
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 0d 7b 00 00       	call   c0007b2d <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 44 42 02 c0       	mov    eax,0xc0024244
c0000025:	3d 44 42 02 c0       	cmp    eax,0xc0024244
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 44 42 02 c0       	push   0xc0024244
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 44 42 02 c0       	mov    eax,0xc0024244
c0000051:	2d 44 42 02 c0       	sub    eax,0xc0024244
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 44 42 02 c0       	push   0xc0024244
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 60 02 c0 00 	cmp    BYTE PTR ds:0xc00260c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 7c 04 02 c0       	mov    ebx,0xc002047c
c0000097:	81 eb 78 04 02 c0    	sub    ebx,0xc0020478
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 78 04 02 c0       	mov    esi,0xc0020478
c00000a6:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 60 02 c0       	mov    ds:0xc00260c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 44 42 02 c0       	push   0xc0024244
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 60 02 c0 01 	mov    BYTE PTR ds:0xc00260c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 60 02 c0       	push   0xc00260c8
c0000108:	68 44 42 02 c0       	push   0xc0024244
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 7f 56 01 00       	call   c001592c <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 fc a3 00 00       	call   c000a6c1 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 5d 56 01 00       	call   c001592c <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 6a 5b 01 00       	call   c0015e58 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 05 62 01 00       	call   c00164fc <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 6e 02 c0 	lgdtd  ds:0xc0026ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 77 12 01 00       	jmp    c00115f6 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 60 02 c0       	mov    ds:0xc00260e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 60 02 c0    	mov    DWORD PTR ds:0xc00260e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 60 02 c0    	mov    ebx,DWORD PTR ds:0xc00260e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 80 04 02 c0 02 	test   BYTE PTR [edx-0x3ffdfb80],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 80 04 02 c0 01 	test   BYTE PTR [edx-0x3ffdfb80],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 80 04 02 c0 08 	test   BYTE PTR [edx-0x3ffdfb80],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 80 04 02 c0 08 	test   BYTE PTR [edx-0x3ffdfb80],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 80 04 02 c0 04 	test   BYTE PTR [ecx-0x3ffdfb80],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 80 04 02 c0 01 	test   BYTE PTR [edx-0x3ffdfb80],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d8d:	85 db                	test   ebx,ebx
c0000d8f:	0f 84 e2 00 00 00    	je     c0000e77 <dlfree+0xf1>
c0000d95:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d98:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d9b:	8b 0d 00 61 02 c0    	mov    ecx,DWORD PTR ds:0xc0026100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c1                	cmp    ecx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 c9 03             	or     ecx,0x3
c0000db0:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 0c 85 04 61 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9efc]
c0000dc0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dc2:	89 14 85 04 61 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9efc],edx
c0000dc9:	e9 a9 00 00 00       	jmp    c0000e77 <dlfree+0xf1>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 c9 01             	or     ecx,0x1
c0000ddd:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000de3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000de6:	83 e1 fc             	and    ecx,0xfffffffc
c0000de9:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000df2:	29 da                	sub    edx,ebx
c0000df4:	01 d8                	add    eax,ebx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dfc:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dff:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e02:	39 35 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e0e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e11:	80 e3 01             	and    bl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 c8                	add    eax,ecx
c0000e1b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e1e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e21:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e24:	8b 0d 3c 61 02 c0    	mov    ecx,DWORD PTR ds:0xc002613c
c0000e2a:	c7 42 0c 34 61 02 c0 	mov    DWORD PTR [edx+0xc],0xc0026134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 c8                	add    eax,ecx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 16                	jbe    c0000e77 <dlfree+0xf1>
c0000e61:	f6 05 00 61 02 c0 02 	test   BYTE PTR ds:0xc0026100,0x2
c0000e68:	74 0d                	je     c0000e77 <dlfree+0xf1>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	5b                   	pop    ebx
c0000e78:	5e                   	pop    esi
c0000e79:	5f                   	pop    edi
c0000e7a:	c3                   	ret    

c0000e7b <sYSMALLOc>:
c0000e7b:	55                   	push   ebp
c0000e7c:	57                   	push   edi
c0000e7d:	56                   	push   esi
c0000e7e:	53                   	push   ebx
c0000e7f:	89 d3                	mov    ebx,edx
c0000e81:	83 ec 2c             	sub    esp,0x2c
c0000e84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000e88:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000e8e:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e91:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000e94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e98:	74 1f                	je     c0000eb9 <sYSMALLOc+0x3e>
c0000e9a:	89 d0                	mov    eax,edx
c0000e9c:	e8 fe fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ea1:	83 ec 0c             	sub    esp,0xc
c0000ea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000ea8:	83 e8 07             	sub    eax,0x7
c0000eab:	50                   	push   eax
c0000eac:	e8 33 02 00 00       	call   c00010e4 <dlmalloc>
c0000eb1:	83 c4 10             	add    esp,0x10
c0000eb4:	e9 23 02 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000eb9:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000ec0:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ec6:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000ec9:	83 c0 10             	add    eax,0x10
c0000ecc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	83 e5 fc             	and    ebp,0xfffffffc
c0000ed5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000edc:	74 02                	je     c0000ee0 <sYSMALLOc+0x65>
c0000ede:	29 ea                	sub    edx,ebp
c0000ee0:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000ee4:	f7 d9                	neg    ecx
c0000ee6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000eea:	21 ca                	and    edx,ecx
c0000eec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000ef0:	7f 07                	jg     c0000ef9 <sYSMALLOc+0x7e>
c0000ef2:	31 c0                	xor    eax,eax
c0000ef4:	e9 e3 01 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000ef9:	83 ec 0c             	sub    esp,0xc
c0000efc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f00:	e8 a3 6a 00 00       	call   c00079a8 <sbrk>
c0000f05:	83 c4 10             	add    esp,0x10
c0000f08:	83 f8 ff             	cmp    eax,0xffffffff
c0000f0b:	89 c6                	mov    esi,eax
c0000f0d:	74 e3                	je     c0000ef2 <sYSMALLOc+0x77>
c0000f0f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f13:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000f16:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000f1c:	39 c2                	cmp    edx,eax
c0000f1e:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f24:	75 11                	jne    c0000f37 <sYSMALLOc+0xbc>
c0000f26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2a:	01 e8                	add    eax,ebp
c0000f2c:	83 c8 01             	or     eax,0x1
c0000f2f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f32:	e9 93 00 00 00       	jmp    c0000fca <sYSMALLOc+0x14f>
c0000f37:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000f3d:	a8 01                	test   al,0x1
c0000f3f:	0f 84 73 01 00 00    	je     c00010b8 <sYSMALLOc+0x23d>
c0000f45:	85 ed                	test   ebp,ebp
c0000f47:	74 12                	je     c0000f5b <sYSMALLOc+0xe0>
c0000f49:	39 f2                	cmp    edx,esi
c0000f4b:	76 0e                	jbe    c0000f5b <sYSMALLOc+0xe0>
c0000f4d:	83 e0 fe             	and    eax,0xfffffffe
c0000f50:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000f56:	e9 5d 01 00 00       	jmp    c00010b8 <sYSMALLOc+0x23d>
c0000f5b:	85 ed                	test   ebp,ebp
c0000f5d:	74 0c                	je     c0000f6b <sYSMALLOc+0xf0>
c0000f5f:	89 f0                	mov    eax,esi
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	01 c1                	add    ecx,eax
c0000f65:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f6b:	89 f2                	mov    edx,esi
c0000f6d:	83 e2 07             	and    edx,0x7
c0000f70:	0f 84 b1 00 00 00    	je     c0001027 <sYSMALLOc+0x1ac>
c0000f76:	b8 08 00 00 00       	mov    eax,0x8
c0000f7b:	29 d0                	sub    eax,edx
c0000f7d:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000f80:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000f84:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f88:	01 e8                	add    eax,ebp
c0000f8a:	83 ec 0c             	sub    esp,0xc
c0000f8d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000f90:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000f94:	01 f2                	add    edx,esi
c0000f96:	29 d0                	sub    eax,edx
c0000f98:	01 d1                	add    ecx,edx
c0000f9a:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000f9e:	01 c1                	add    ecx,eax
c0000fa0:	51                   	push   ecx
c0000fa1:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000fa5:	e8 fe 69 00 00       	call   c00079a8 <sbrk>
c0000faa:	83 c4 10             	add    esp,0x10
c0000fad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000fb1:	83 f8 ff             	cmp    eax,0xffffffff
c0000fb4:	75 7c                	jne    c0001032 <sYSMALLOc+0x1b7>
c0000fb6:	83 ec 0c             	sub    esp,0xc
c0000fb9:	6a 00                	push   0x0
c0000fbb:	e8 e8 69 00 00       	call   c00079a8 <sbrk>
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	31 c9                	xor    ecx,ecx
c0000fc5:	83 f8 ff             	cmp    eax,0xffffffff
c0000fc8:	75 7e                	jne    c0001048 <sYSMALLOc+0x1cd>
c0000fca:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fd0:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fd6:	73 06                	jae    c0000fde <sYSMALLOc+0x163>
c0000fd8:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fde:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fe4:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fea:	73 06                	jae    c0000ff2 <sYSMALLOc+0x177>
c0000fec:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ff2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ff5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff8:	83 e2 fc             	and    edx,0xfffffffc
c0000ffb:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000fff:	0f 87 ed fe ff ff    	ja     c0000ef2 <sYSMALLOc+0x77>
c0001005:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0001009:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000100c:	29 fa                	sub    edx,edi
c000100e:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001011:	89 fb                	mov    ebx,edi
c0001013:	83 ca 01             	or     edx,0x1
c0001016:	83 cb 01             	or     ebx,0x1
c0001019:	83 c0 08             	add    eax,0x8
c000101c:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000101f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001022:	e9 b5 00 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0001027:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000102b:	31 c0                	xor    eax,eax
c000102d:	e9 52 ff ff ff       	jmp    c0000f84 <sYSMALLOc+0x109>
c0001032:	39 c6                	cmp    esi,eax
c0001034:	76 12                	jbe    c0001048 <sYSMALLOc+0x1cd>
c0001036:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000103a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001041:	01 f0                	add    eax,esi
c0001043:	e9 7b ff ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c0001048:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000104c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000104f:	29 f0                	sub    eax,esi
c0001051:	01 c8                	add    eax,ecx
c0001053:	83 c8 01             	or     eax,0x1
c0001056:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0001059:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c000105f:	85 ed                	test   ebp,ebp
c0001061:	0f 84 63 ff ff ff    	je     c0000fca <sYSMALLOc+0x14f>
c0001067:	8d 45 f4             	lea    eax,[ebp-0xc]
c000106a:	83 e0 f8             	and    eax,0xfffffff8
c000106d:	89 c2                	mov    edx,eax
c000106f:	83 ca 01             	or     edx,0x1
c0001072:	83 f8 0f             	cmp    eax,0xf
c0001075:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001078:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001080:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001088:	0f 86 3c ff ff ff    	jbe    c0000fca <sYSMALLOc+0x14f>
c000108e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001094:	83 ec 0c             	sub    esp,0xc
c0001097:	83 c7 08             	add    edi,0x8
c000109a:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a4:	57                   	push   edi
c00010a5:	e8 dc fc ff ff       	call   c0000d86 <dlfree>
c00010aa:	83 c4 10             	add    esp,0x10
c00010ad:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b3:	e9 12 ff ff ff       	jmp    c0000fca <sYSMALLOc+0x14f>
c00010b8:	83 ec 0c             	sub    esp,0xc
c00010bb:	6a 00                	push   0x0
c00010bd:	e8 e6 68 00 00       	call   c00079a8 <sbrk>
c00010c2:	89 c2                	mov    edx,eax
c00010c4:	29 f2                	sub    edx,esi
c00010c6:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c00010ca:	83 c4 10             	add    esp,0x10
c00010cd:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010d3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00010d7:	e9 e7 fe ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c00010dc:	83 c4 2c             	add    esp,0x2c
c00010df:	5b                   	pop    ebx
c00010e0:	5e                   	pop    esi
c00010e1:	5f                   	pop    edi
c00010e2:	5d                   	pop    ebp
c00010e3:	c3                   	ret    

c00010e4 <dlmalloc>:
c00010e4:	55                   	push   ebp
c00010e5:	57                   	push   edi
c00010e6:	56                   	push   esi
c00010e7:	53                   	push   ebx
c00010e8:	83 ec 1c             	sub    esp,0x1c
c00010eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010ef:	83 f8 df             	cmp    eax,0xffffffdf
c00010f2:	0f 87 70 03 00 00    	ja     c0001468 <dlmalloc+0x384>
c00010f8:	83 c0 0b             	add    eax,0xb
c00010fb:	be 10 00 00 00       	mov    esi,0x10
c0001100:	83 f8 0f             	cmp    eax,0xf
c0001103:	76 05                	jbe    c000110a <dlmalloc+0x26>
c0001105:	83 e0 f8             	and    eax,0xfffffff8
c0001108:	89 c6                	mov    esi,eax
c000110a:	8b 3d 00 61 02 c0    	mov    edi,DWORD PTR ds:0xc0026100
c0001110:	f7 c7 01 00 00 00    	test   edi,0x1
c0001116:	75 17                	jne    c000112f <dlmalloc+0x4b>
c0001118:	85 ff                	test   edi,edi
c000111a:	0f 85 05 03 00 00    	jne    c0001425 <dlmalloc+0x341>
c0001120:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001125:	e8 75 fb ff ff       	call   c0000c9f <malloc_consolidate>
c000112a:	e9 f6 02 00 00       	jmp    c0001425 <dlmalloc+0x341>
c000112f:	39 f7                	cmp    edi,esi
c0001131:	72 1f                	jb     c0001152 <dlmalloc+0x6e>
c0001133:	89 f2                	mov    edx,esi
c0001135:	c1 ea 03             	shr    edx,0x3
c0001138:	83 ea 02             	sub    edx,0x2
c000113b:	8b 04 95 04 61 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9efc]
c0001142:	85 c0                	test   eax,eax
c0001144:	74 0c                	je     c0001152 <dlmalloc+0x6e>
c0001146:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001149:	89 0c 95 04 61 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9efc],ecx
c0001150:	eb 30                	jmp    c0001182 <dlmalloc+0x9e>
c0001152:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001158:	89 f0                	mov    eax,esi
c000115a:	77 2e                	ja     c000118a <dlmalloc+0xa6>
c000115c:	c1 e8 03             	shr    eax,0x3
c000115f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001163:	8d 14 c5 34 61 02 c0 	lea    edx,[eax*8-0x3ffd9ecc]
c000116a:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000116d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001170:	39 c3                	cmp    ebx,eax
c0001172:	74 2e                	je     c00011a2 <dlmalloc+0xbe>
c0001174:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001177:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000117c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000117f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001182:	83 c0 08             	add    eax,0x8
c0001185:	e9 e0 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c000118a:	e8 8c fa ff ff       	call   c0000c1b <largebin_index>
c000118f:	83 e7 02             	and    edi,0x2
c0001192:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001196:	74 0a                	je     c00011a2 <dlmalloc+0xbe>
c0001198:	b8 00 61 02 c0       	mov    eax,0xc0026100
c000119d:	e8 fd fa ff ff       	call   c0000c9f <malloc_consolidate>
c00011a2:	8d 46 10             	lea    eax,[esi+0x10]
c00011a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011a9:	8b 1d 40 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026140
c00011af:	81 fb 34 61 02 c0    	cmp    ebx,0xc0026134
c00011b5:	0f 84 13 01 00 00    	je     c00012ce <dlmalloc+0x1ea>
c00011bb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011be:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011c1:	83 e7 fc             	and    edi,0xfffffffc
c00011c4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011ca:	77 4c                	ja     c0001218 <dlmalloc+0x134>
c00011cc:	3d 34 61 02 c0       	cmp    eax,0xc0026134
c00011d1:	75 45                	jne    c0001218 <dlmalloc+0x134>
c00011d3:	39 1d 30 61 02 c0    	cmp    DWORD PTR ds:0xc0026130,ebx
c00011d9:	75 3d                	jne    c0001218 <dlmalloc+0x134>
c00011db:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011df:	73 37                	jae    c0001218 <dlmalloc+0x134>
c00011e1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011e4:	89 fa                	mov    edx,edi
c00011e6:	a3 3c 61 02 c0       	mov    ds:0xc002613c,eax
c00011eb:	29 f2                	sub    edx,esi
c00011ed:	83 ce 01             	or     esi,0x1
c00011f0:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c00011f5:	89 d1                	mov    ecx,edx
c00011f7:	a3 30 61 02 c0       	mov    ds:0xc0026130,eax
c00011fc:	83 c9 01             	or     ecx,0x1
c00011ff:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c0001206:	c7 40 0c 34 61 02 c0 	mov    DWORD PTR [eax+0xc],0xc0026134
c000120d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001210:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001213:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001216:	eb 15                	jmp    c000122d <dlmalloc+0x149>
c0001218:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c000121d:	39 fe                	cmp    esi,edi
c000121f:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c0001226:	75 0d                	jne    c0001235 <dlmalloc+0x151>
c0001228:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000122d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001230:	e9 35 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001235:	81 ff ff 00 00 00    	cmp    edi,0xff
c000123b:	89 f8                	mov    eax,edi
c000123d:	77 19                	ja     c0001258 <dlmalloc+0x174>
c000123f:	c1 e8 03             	shr    eax,0x3
c0001242:	8d 14 00             	lea    edx,[eax+eax*1]
c0001245:	83 c2 0d             	add    edx,0xd
c0001248:	8d 2c 95 f8 60 02 c0 	lea    ebp,[edx*4-0x3ffd9f08]
c000124f:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c0001256:	eb 46                	jmp    c000129e <dlmalloc+0x1ba>
c0001258:	e8 be f9 ff ff       	call   c0000c1b <largebin_index>
c000125d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001260:	83 c2 0d             	add    edx,0xd
c0001263:	8d 0c 95 00 61 02 c0 	lea    ecx,[edx*4-0x3ffd9f00]
c000126a:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c0001271:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001274:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001278:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000127c:	89 d5                	mov    ebp,edx
c000127e:	74 1e                	je     c000129e <dlmalloc+0x1ba>
c0001280:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001283:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001286:	77 12                	ja     c000129a <dlmalloc+0x1b6>
c0001288:	83 cf 01             	or     edi,0x1
c000128b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000128e:	76 05                	jbe    c0001295 <dlmalloc+0x1b1>
c0001290:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001293:	eb f6                	jmp    c000128b <dlmalloc+0x1a7>
c0001295:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001298:	eb 04                	jmp    c000129e <dlmalloc+0x1ba>
c000129a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000129e:	89 c7                	mov    edi,eax
c00012a0:	88 c1                	mov    cl,al
c00012a2:	c1 ff 05             	sar    edi,0x5
c00012a5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012a9:	bf 01 00 00 00       	mov    edi,0x1
c00012ae:	d3 e7                	shl    edi,cl
c00012b0:	89 f8                	mov    eax,edi
c00012b2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012b6:	09 04 bd 34 64 02 c0 	or     DWORD PTR [edi*4-0x3ffd9bcc],eax
c00012bd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012c0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012c3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012c6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012c9:	e9 db fe ff ff       	jmp    c00011a9 <dlmalloc+0xc5>
c00012ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012d4:	76 78                	jbe    c000134e <dlmalloc+0x26a>
c00012d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012da:	8d 04 c5 34 61 02 c0 	lea    eax,[eax*8-0x3ffd9ecc]
c00012e1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012e4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012e7:	39 ca                	cmp    edx,ecx
c00012e9:	74 63                	je     c000134e <dlmalloc+0x26a>
c00012eb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012ee:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012f1:	83 e3 fc             	and    ebx,0xfffffffc
c00012f4:	39 de                	cmp    esi,ebx
c00012f6:	77 52                	ja     c000134a <dlmalloc+0x266>
c00012f8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012fb:	89 df                	mov    edi,ebx
c00012fd:	01 d3                	add    ebx,edx
c00012ff:	29 f7                	sub    edi,esi
c0001301:	83 ff 0f             	cmp    edi,0xf
c0001304:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001307:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000130a:	8d 42 08             	lea    eax,[edx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x234>
c000130f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001313:	e9 52 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001318:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000131b:	83 ce 01             	or     esi,0x1
c000131e:	89 0d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,ecx
c0001324:	89 0d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,ecx
c000132a:	c7 41 08 34 61 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0026134
c0001331:	c7 41 0c 34 61 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0026134
c0001338:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000133b:	89 fa                	mov    edx,edi
c000133d:	83 ca 01             	or     edx,0x1
c0001340:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001343:	89 3b                	mov    DWORD PTR [ebx],edi
c0001345:	e9 20 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c000134a:	89 c2                	mov    edx,eax
c000134c:	eb 99                	jmp    c00012e7 <dlmalloc+0x203>
c000134e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001352:	b8 01 00 00 00       	mov    eax,0x1
c0001357:	41                   	inc    ecx
c0001358:	8d 14 cd 2c 61 02 c0 	lea    edx,[ecx*8-0x3ffd9ed4]
c000135f:	89 cb                	mov    ebx,ecx
c0001361:	c1 eb 05             	shr    ebx,0x5
c0001364:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c000136b:	d3 e0                	shl    eax,cl
c000136d:	39 f8                	cmp    eax,edi
c000136f:	77 04                	ja     c0001375 <dlmalloc+0x291>
c0001371:	85 c0                	test   eax,eax
c0001373:	75 26                	jne    c000139b <dlmalloc+0x2b7>
c0001375:	43                   	inc    ebx
c0001376:	83 fb 02             	cmp    ebx,0x2
c0001379:	0f 87 a6 00 00 00    	ja     c0001425 <dlmalloc+0x341>
c000137f:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c0001386:	85 ff                	test   edi,edi
c0001388:	74 eb                	je     c0001375 <dlmalloc+0x291>
c000138a:	89 d8                	mov    eax,ebx
c000138c:	c1 e0 06             	shl    eax,0x6
c000138f:	8d 14 85 2c 61 02 c0 	lea    edx,[eax*4-0x3ffd9ed4]
c0001396:	b8 01 00 00 00       	mov    eax,0x1
c000139b:	85 f8                	test   eax,edi
c000139d:	75 07                	jne    c00013a6 <dlmalloc+0x2c2>
c000139f:	83 c2 08             	add    edx,0x8
c00013a2:	01 c0                	add    eax,eax
c00013a4:	eb f5                	jmp    c000139b <dlmalloc+0x2b7>
c00013a6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013a9:	39 ca                	cmp    edx,ecx
c00013ab:	75 14                	jne    c00013c1 <dlmalloc+0x2dd>
c00013ad:	89 c1                	mov    ecx,eax
c00013af:	83 c2 08             	add    edx,0x8
c00013b2:	f7 d1                	not    ecx
c00013b4:	01 c0                	add    eax,eax
c00013b6:	21 cf                	and    edi,ecx
c00013b8:	89 3c 9d 34 64 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9bcc],edi
c00013bf:	eb ac                	jmp    c000136d <dlmalloc+0x289>
c00013c1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013c4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013c7:	83 e0 fc             	and    eax,0xfffffffc
c00013ca:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013cd:	89 c3                	mov    ebx,eax
c00013cf:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013d2:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013d5:	29 f3                	sub    ebx,esi
c00013d7:	8d 41 08             	lea    eax,[ecx+0x8]
c00013da:	83 fb 0f             	cmp    ebx,0xf
c00013dd:	77 09                	ja     c00013e8 <dlmalloc+0x304>
c00013df:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013e3:	e9 82 00 00 00       	jmp    c000146a <dlmalloc+0x386>
c00013e8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013f1:	89 3d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edi
c00013f7:	89 3d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,edi
c00013fd:	c7 47 08 34 61 02 c0 	mov    DWORD PTR [edi+0x8],0xc0026134
c0001404:	c7 47 0c 34 61 02 c0 	mov    DWORD PTR [edi+0xc],0xc0026134
c000140b:	77 06                	ja     c0001413 <dlmalloc+0x32f>
c000140d:	89 3d 30 61 02 c0    	mov    DWORD PTR ds:0xc0026130,edi
c0001413:	83 ce 01             	or     esi,0x1
c0001416:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001419:	89 d9                	mov    ecx,ebx
c000141b:	83 c9 01             	or     ecx,0x1
c000141e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001421:	89 1a                	mov    DWORD PTR [edx],ebx
c0001423:	eb 45                	jmp    c000146a <dlmalloc+0x386>
c0001425:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c000142a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000142d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001430:	83 e2 fc             	and    edx,0xfffffffc
c0001433:	39 d1                	cmp    ecx,edx
c0001435:	77 1e                	ja     c0001455 <dlmalloc+0x371>
c0001437:	89 f3                	mov    ebx,esi
c0001439:	29 f2                	sub    edx,esi
c000143b:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000143e:	83 cb 01             	or     ebx,0x1
c0001441:	89 0d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,ecx
c0001447:	83 ca 01             	or     edx,0x1
c000144a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000144d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001450:	e9 2d fd ff ff       	jmp    c0001182 <dlmalloc+0x9e>
c0001455:	83 c4 1c             	add    esp,0x1c
c0001458:	89 f0                	mov    eax,esi
c000145a:	5b                   	pop    ebx
c000145b:	ba 00 61 02 c0       	mov    edx,0xc0026100
c0001460:	5e                   	pop    esi
c0001461:	5f                   	pop    edi
c0001462:	5d                   	pop    ebp
c0001463:	e9 13 fa ff ff       	jmp    c0000e7b <sYSMALLOc>
c0001468:	31 c0                	xor    eax,eax
c000146a:	83 c4 1c             	add    esp,0x1c
c000146d:	5b                   	pop    ebx
c000146e:	5e                   	pop    esi
c000146f:	5f                   	pop    edi
c0001470:	5d                   	pop    ebp
c0001471:	c3                   	ret    

c0001472 <iALLOc>:
c0001472:	55                   	push   ebp
c0001473:	89 c5                	mov    ebp,eax
c0001475:	57                   	push   edi
c0001476:	56                   	push   esi
c0001477:	53                   	push   ebx
c0001478:	83 ec 2c             	sub    esp,0x2c
c000147b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000147f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001483:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c000148a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000148e:	75 12                	jne    c00014a2 <iALLOc+0x30>
c0001490:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001494:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001499:	e8 01 f8 ff ff       	call   c0000c9f <malloc_consolidate>
c000149e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014a2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014a7:	74 12                	je     c00014bb <iALLOc+0x49>
c00014a9:	85 ed                	test   ebp,ebp
c00014ab:	0f 84 64 01 00 00    	je     c0001615 <iALLOc+0x1a3>
c00014b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014b9:	eb 33                	jmp    c00014ee <iALLOc+0x7c>
c00014bb:	85 ed                	test   ebp,ebp
c00014bd:	75 14                	jne    c00014d3 <iALLOc+0x61>
c00014bf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014c7:	83 c4 2c             	add    esp,0x2c
c00014ca:	5b                   	pop    ebx
c00014cb:	5e                   	pop    esi
c00014cc:	5f                   	pop    edi
c00014cd:	5d                   	pop    ebp
c00014ce:	e9 11 fc ff ff       	jmp    c00010e4 <dlmalloc>
c00014d3:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014db:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e2:	83 f8 0f             	cmp    eax,0xf
c00014e5:	76 07                	jbe    c00014ee <iALLOc+0x7c>
c00014e7:	83 e0 f8             	and    eax,0xfffffff8
c00014ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014ee:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014f3:	75 09                	jne    c00014fe <iALLOc+0x8c>
c00014f5:	89 d0                	mov    eax,edx
c00014f7:	31 f6                	xor    esi,esi
c00014f9:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014fc:	eb 3b                	jmp    c0001539 <iALLOc+0xc7>
c00014fe:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001506:	8b 02                	mov    eax,DWORD PTR [edx]
c0001508:	83 c0 0b             	add    eax,0xb
c000150b:	83 f8 0f             	cmp    eax,0xf
c000150e:	76 07                	jbe    c0001517 <iALLOc+0xa5>
c0001510:	83 e0 f8             	and    eax,0xfffffff8
c0001513:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001517:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000151b:	0f af f5             	imul   esi,ebp
c000151e:	eb 25                	jmp    c0001545 <iALLOc+0xd3>
c0001520:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001522:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001525:	bb 10 00 00 00       	mov    ebx,0x10
c000152a:	83 f9 0f             	cmp    ecx,0xf
c000152d:	76 05                	jbe    c0001534 <iALLOc+0xc2>
c000152f:	83 e1 f8             	and    ecx,0xfffffff8
c0001532:	89 cb                	mov    ebx,ecx
c0001534:	01 de                	add    esi,ebx
c0001536:	83 c0 04             	add    eax,0x4
c0001539:	39 c7                	cmp    edi,eax
c000153b:	75 e3                	jne    c0001520 <iALLOc+0xae>
c000153d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001545:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001549:	83 ec 0c             	sub    esp,0xc
c000154c:	8b 1d 54 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026454
c0001552:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c000155c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001560:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001564:	50                   	push   eax
c0001565:	e8 7a fb ff ff       	call   c00010e4 <dlmalloc>
c000156a:	83 c4 10             	add    esp,0x10
c000156d:	89 1d 54 64 02 c0    	mov    DWORD PTR ds:0xc0026454,ebx
c0001573:	85 c0                	test   eax,eax
c0001575:	0f 84 92 00 00 00    	je     c000160d <iALLOc+0x19b>
c000157b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000157e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001581:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001585:	83 e3 fc             	and    ebx,0xfffffffc
c0001588:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000158d:	74 1e                	je     c00015ad <iALLOc+0x13b>
c000158f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001593:	89 d9                	mov    ecx,ebx
c0001595:	52                   	push   edx
c0001596:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000159a:	83 e9 04             	sub    ecx,0x4
c000159d:	51                   	push   ecx
c000159e:	6a 00                	push   0x0
c00015a0:	50                   	push   eax
c00015a1:	e8 4a ef ff ff       	call   c00004f0 <memset>
c00015a6:	83 c4 10             	add    esp,0x10
c00015a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015b2:	75 14                	jne    c00015c8 <iALLOc+0x156>
c00015b4:	8d 04 37             	lea    eax,[edi+esi*1]
c00015b7:	29 f3                	sub    ebx,esi
c00015b9:	8d 48 08             	lea    ecx,[eax+0x8]
c00015bc:	83 cb 01             	or     ebx,0x1
c00015bf:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015c2:	89 f3                	mov    ebx,esi
c00015c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c8:	31 c0                	xor    eax,eax
c00015ca:	4d                   	dec    ebp
c00015cb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015cf:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d2:	39 c5                	cmp    ebp,eax
c00015d4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015d7:	74 2c                	je     c0001605 <iALLOc+0x193>
c00015d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015dd:	85 c9                	test   ecx,ecx
c00015df:	75 15                	jne    c00015f6 <iALLOc+0x184>
c00015e1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015e4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015e7:	b9 10 00 00 00       	mov    ecx,0x10
c00015ec:	83 fe 0f             	cmp    esi,0xf
c00015ef:	76 05                	jbe    c00015f6 <iALLOc+0x184>
c00015f1:	83 e6 f8             	and    esi,0xfffffff8
c00015f4:	89 f1                	mov    ecx,esi
c00015f6:	89 ce                	mov    esi,ecx
c00015f8:	29 cb                	sub    ebx,ecx
c00015fa:	83 ce 01             	or     esi,0x1
c00015fd:	40                   	inc    eax
c00015fe:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001601:	01 cf                	add    edi,ecx
c0001603:	eb c6                	jmp    c00015cb <iALLOc+0x159>
c0001605:	83 cb 01             	or     ebx,0x1
c0001608:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000160b:	eb 08                	jmp    c0001615 <iALLOc+0x1a3>
c000160d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001615:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001619:	83 c4 2c             	add    esp,0x2c
c000161c:	5b                   	pop    ebx
c000161d:	5e                   	pop    esi
c000161e:	5f                   	pop    edi
c000161f:	5d                   	pop    ebp
c0001620:	c3                   	ret    

c0001621 <dlrealloc>:
c0001621:	55                   	push   ebp
c0001622:	57                   	push   edi
c0001623:	56                   	push   esi
c0001624:	53                   	push   ebx
c0001625:	83 ec 1c             	sub    esp,0x1c
c0001628:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000162c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001630:	85 db                	test   ebx,ebx
c0001632:	75 10                	jne    c0001644 <dlrealloc+0x23>
c0001634:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001638:	83 c4 1c             	add    esp,0x1c
c000163b:	5b                   	pop    ebx
c000163c:	5e                   	pop    esi
c000163d:	5f                   	pop    edi
c000163e:	5d                   	pop    ebp
c000163f:	e9 a0 fa ff ff       	jmp    c00010e4 <dlmalloc>
c0001644:	83 f8 df             	cmp    eax,0xffffffdf
c0001647:	76 07                	jbe    c0001650 <dlrealloc+0x2f>
c0001649:	31 db                	xor    ebx,ebx
c000164b:	e9 6b 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c0001650:	83 c0 0b             	add    eax,0xb
c0001653:	bd 10 00 00 00       	mov    ebp,0x10
c0001658:	83 f8 0f             	cmp    eax,0xf
c000165b:	76 05                	jbe    c0001662 <dlrealloc+0x41>
c000165d:	83 e0 f8             	and    eax,0xfffffff8
c0001660:	89 c5                	mov    ebp,eax
c0001662:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001665:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001668:	89 ce                	mov    esi,ecx
c000166a:	83 e6 fc             	and    esi,0xfffffffc
c000166d:	f6 c1 02             	test   cl,0x2
c0001670:	75 d7                	jne    c0001649 <dlrealloc+0x28>
c0001672:	39 f5                	cmp    ebp,esi
c0001674:	0f 86 04 01 00 00    	jbe    c000177e <dlrealloc+0x15d>
c000167a:	8d 14 37             	lea    edx,[edi+esi*1]
c000167d:	39 15 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,edx
c0001683:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001686:	75 33                	jne    c00016bb <dlrealloc+0x9a>
c0001688:	83 e0 fc             	and    eax,0xfffffffc
c000168b:	01 f0                	add    eax,esi
c000168d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001691:	8d 45 10             	lea    eax,[ebp+0x10]
c0001694:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0001698:	77 49                	ja     c00016e3 <dlrealloc+0xc2>
c000169a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000169e:	83 e1 01             	and    ecx,0x1
c00016a1:	01 ef                	add    edi,ebp
c00016a3:	09 e9                	or     ecx,ebp
c00016a5:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00016a8:	89 3d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edi
c00016ae:	29 e8                	sub    eax,ebp
c00016b0:	83 c8 01             	or     eax,0x1
c00016b3:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016b6:	e9 00 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c00016bb:	89 c1                	mov    ecx,eax
c00016bd:	83 e1 fe             	and    ecx,0xfffffffe
c00016c0:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c00016c5:	75 1c                	jne    c00016e3 <dlrealloc+0xc2>
c00016c7:	83 e0 fc             	and    eax,0xfffffffc
c00016ca:	01 f0                	add    eax,esi
c00016cc:	39 c5                	cmp    ebp,eax
c00016ce:	77 13                	ja     c00016e3 <dlrealloc+0xc2>
c00016d0:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00016d3:	89 c6                	mov    esi,eax
c00016d5:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00016d8:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00016db:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00016de:	e9 9b 00 00 00       	jmp    c000177e <dlrealloc+0x15d>
c00016e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016e7:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016ea:	83 ec 0c             	sub    esp,0xc
c00016ed:	50                   	push   eax
c00016ee:	e8 f1 f9 ff ff       	call   c00010e4 <dlmalloc>
c00016f3:	83 c4 10             	add    esp,0x10
c00016f6:	85 c0                	test   eax,eax
c00016f8:	0f 84 4b ff ff ff    	je     c0001649 <dlrealloc+0x28>
c00016fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001702:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001705:	39 ca                	cmp    edx,ecx
c0001707:	75 0a                	jne    c0001713 <dlrealloc+0xf2>
c0001709:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000170c:	83 e0 fc             	and    eax,0xfffffffc
c000170f:	01 c6                	add    esi,eax
c0001711:	eb 6b                	jmp    c000177e <dlrealloc+0x15d>
c0001713:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001716:	83 f9 27             	cmp    ecx,0x27
c0001719:	76 08                	jbe    c0001723 <dlrealloc+0x102>
c000171b:	89 de                	mov    esi,ebx
c000171d:	89 c7                	mov    edi,eax
c000171f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001721:	eb 43                	jmp    c0001766 <dlrealloc+0x145>
c0001723:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001725:	83 f9 13             	cmp    ecx,0x13
c0001728:	89 10                	mov    DWORD PTR [eax],edx
c000172a:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000172d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001730:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001733:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001736:	76 2e                	jbe    c0001766 <dlrealloc+0x145>
c0001738:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000173b:	83 f9 1b             	cmp    ecx,0x1b
c000173e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001741:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001744:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001747:	76 1d                	jbe    c0001766 <dlrealloc+0x145>
c0001749:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000174c:	83 f9 23             	cmp    ecx,0x23
c000174f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001752:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001755:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001758:	76 0c                	jbe    c0001766 <dlrealloc+0x145>
c000175a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000175d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001760:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001763:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001766:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000176a:	83 ec 0c             	sub    esp,0xc
c000176d:	53                   	push   ebx
c000176e:	e8 13 f6 ff ff       	call   c0000d86 <dlfree>
c0001773:	83 c4 10             	add    esp,0x10
c0001776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177a:	89 c3                	mov    ebx,eax
c000177c:	eb 3d                	jmp    c00017bb <dlrealloc+0x19a>
c000177e:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001781:	8d 04 37             	lea    eax,[edi+esi*1]
c0001784:	89 f2                	mov    edx,esi
c0001786:	29 ea                	sub    edx,ebp
c0001788:	83 e1 01             	and    ecx,0x1
c000178b:	83 fa 0f             	cmp    edx,0xf
c000178e:	77 0b                	ja     c000179b <dlrealloc+0x17a>
c0001790:	09 ce                	or     esi,ecx
c0001792:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001795:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001799:	eb 20                	jmp    c00017bb <dlrealloc+0x19a>
c000179b:	01 ef                	add    edi,ebp
c000179d:	83 ca 01             	or     edx,0x1
c00017a0:	09 cd                	or     ebp,ecx
c00017a2:	83 ec 0c             	sub    esp,0xc
c00017a5:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017a8:	83 c7 08             	add    edi,0x8
c00017ab:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017ae:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017b2:	57                   	push   edi
c00017b3:	e8 ce f5 ff ff       	call   c0000d86 <dlfree>
c00017b8:	83 c4 10             	add    esp,0x10
c00017bb:	83 c4 1c             	add    esp,0x1c
c00017be:	89 d8                	mov    eax,ebx
c00017c0:	5b                   	pop    ebx
c00017c1:	5e                   	pop    esi
c00017c2:	5f                   	pop    edi
c00017c3:	5d                   	pop    ebp
c00017c4:	c3                   	ret    

c00017c5 <dlmemalign>:
c00017c5:	55                   	push   ebp
c00017c6:	57                   	push   edi
c00017c7:	56                   	push   esi
c00017c8:	53                   	push   ebx
c00017c9:	83 ec 0c             	sub    esp,0xc
c00017cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017d4:	83 fa 08             	cmp    edx,0x8
c00017d7:	77 10                	ja     c00017e9 <dlmemalign+0x24>
c00017d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017dd:	83 c4 0c             	add    esp,0xc
c00017e0:	5b                   	pop    ebx
c00017e1:	5e                   	pop    esi
c00017e2:	5f                   	pop    edi
c00017e3:	5d                   	pop    ebp
c00017e4:	e9 fb f8 ff ff       	jmp    c00010e4 <dlmalloc>
c00017e9:	83 fa 0f             	cmp    edx,0xf
c00017ec:	bf 10 00 00 00       	mov    edi,0x10
c00017f1:	76 13                	jbe    c0001806 <dlmemalign+0x41>
c00017f3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017f6:	85 d1                	test   ecx,edx
c00017f8:	75 04                	jne    c00017fe <dlmemalign+0x39>
c00017fa:	89 d7                	mov    edi,edx
c00017fc:	eb 08                	jmp    c0001806 <dlmemalign+0x41>
c00017fe:	39 d7                	cmp    edi,edx
c0001800:	73 04                	jae    c0001806 <dlmemalign+0x41>
c0001802:	01 ff                	add    edi,edi
c0001804:	eb f8                	jmp    c00017fe <dlmemalign+0x39>
c0001806:	83 f8 df             	cmp    eax,0xffffffdf
c0001809:	76 07                	jbe    c0001812 <dlmemalign+0x4d>
c000180b:	31 c0                	xor    eax,eax
c000180d:	e9 ce 00 00 00       	jmp    c00018e0 <dlmemalign+0x11b>
c0001812:	83 c0 0b             	add    eax,0xb
c0001815:	bd 10 00 00 00       	mov    ebp,0x10
c000181a:	83 f8 0f             	cmp    eax,0xf
c000181d:	76 05                	jbe    c0001824 <dlmemalign+0x5f>
c000181f:	83 e0 f8             	and    eax,0xfffffff8
c0001822:	89 c5                	mov    ebp,eax
c0001824:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001828:	83 ec 0c             	sub    esp,0xc
c000182b:	50                   	push   eax
c000182c:	e8 b3 f8 ff ff       	call   c00010e4 <dlmalloc>
c0001831:	83 c4 10             	add    esp,0x10
c0001834:	85 c0                	test   eax,eax
c0001836:	89 c1                	mov    ecx,eax
c0001838:	74 d1                	je     c000180b <dlmemalign+0x46>
c000183a:	8d 70 f8             	lea    esi,[eax-0x8]
c000183d:	31 d2                	xor    edx,edx
c000183f:	f7 f7                	div    edi
c0001841:	85 d2                	test   edx,edx
c0001843:	74 62                	je     c00018a7 <dlmemalign+0xe2>
c0001845:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001849:	89 f8                	mov    eax,edi
c000184b:	f7 d8                	neg    eax
c000184d:	21 c3                	and    ebx,eax
c000184f:	83 eb 08             	sub    ebx,0x8
c0001852:	89 d8                	mov    eax,ebx
c0001854:	29 f0                	sub    eax,esi
c0001856:	83 f8 0f             	cmp    eax,0xf
c0001859:	77 02                	ja     c000185d <dlmemalign+0x98>
c000185b:	01 fb                	add    ebx,edi
c000185d:	89 d8                	mov    eax,ebx
c000185f:	29 f0                	sub    eax,esi
c0001861:	89 c6                	mov    esi,eax
c0001863:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001866:	89 c2                	mov    edx,eax
c0001868:	83 e2 fc             	and    edx,0xfffffffc
c000186b:	29 f2                	sub    edx,esi
c000186d:	a8 02                	test   al,0x2
c000186f:	74 10                	je     c0001881 <dlmemalign+0xbc>
c0001871:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001874:	83 ca 02             	or     edx,0x2
c0001877:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000187a:	8d 43 08             	lea    eax,[ebx+0x8]
c000187d:	89 33                	mov    DWORD PTR [ebx],esi
c000187f:	eb 5f                	jmp    c00018e0 <dlmemalign+0x11b>
c0001881:	89 d0                	mov    eax,edx
c0001883:	83 ec 0c             	sub    esp,0xc
c0001886:	83 c8 01             	or     eax,0x1
c0001889:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000188c:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001891:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001894:	83 e0 01             	and    eax,0x1
c0001897:	09 f0                	or     eax,esi
c0001899:	89 de                	mov    esi,ebx
c000189b:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000189e:	51                   	push   ecx
c000189f:	e8 e2 f4 ff ff       	call   c0000d86 <dlfree>
c00018a4:	83 c4 10             	add    esp,0x10
c00018a7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018aa:	a8 02                	test   al,0x2
c00018ac:	75 2f                	jne    c00018dd <dlmemalign+0x118>
c00018ae:	8d 55 10             	lea    edx,[ebp+0x10]
c00018b1:	83 e0 fc             	and    eax,0xfffffffc
c00018b4:	39 c2                	cmp    edx,eax
c00018b6:	73 25                	jae    c00018dd <dlmemalign+0x118>
c00018b8:	29 e8                	sub    eax,ebp
c00018ba:	83 ec 0c             	sub    esp,0xc
c00018bd:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c0:	83 c8 01             	or     eax,0x1
c00018c3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00018c6:	83 c2 08             	add    edx,0x8
c00018c9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018cc:	83 e0 01             	and    eax,0x1
c00018cf:	09 c5                	or     ebp,eax
c00018d1:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018d4:	52                   	push   edx
c00018d5:	e8 ac f4 ff ff       	call   c0000d86 <dlfree>
c00018da:	83 c4 10             	add    esp,0x10
c00018dd:	8d 46 08             	lea    eax,[esi+0x8]
c00018e0:	83 c4 0c             	add    esp,0xc
c00018e3:	5b                   	pop    ebx
c00018e4:	5e                   	pop    esi
c00018e5:	5f                   	pop    edi
c00018e6:	5d                   	pop    ebp
c00018e7:	c3                   	ret    

c00018e8 <dlcalloc>:
c00018e8:	53                   	push   ebx
c00018e9:	83 ec 14             	sub    esp,0x14
c00018ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018f0:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018f5:	50                   	push   eax
c00018f6:	e8 e9 f7 ff ff       	call   c00010e4 <dlmalloc>
c00018fb:	83 c4 10             	add    esp,0x10
c00018fe:	85 c0                	test   eax,eax
c0001900:	89 c3                	mov    ebx,eax
c0001902:	74 77                	je     c000197b <dlcalloc+0x93>
c0001904:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001907:	89 d0                	mov    eax,edx
c0001909:	83 e0 fc             	and    eax,0xfffffffc
c000190c:	80 e2 02             	and    dl,0x2
c000190f:	75 5a                	jne    c000196b <dlcalloc+0x83>
c0001911:	83 e8 04             	sub    eax,0x4
c0001914:	83 f8 27             	cmp    eax,0x27
c0001917:	76 03                	jbe    c000191c <dlcalloc+0x34>
c0001919:	51                   	push   ecx
c000191a:	eb 53                	jmp    c000196f <dlcalloc+0x87>
c000191c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001922:	83 f8 13             	cmp    eax,0x13
c0001925:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000192c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001933:	76 46                	jbe    c000197b <dlcalloc+0x93>
c0001935:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000193c:	83 f8 1b             	cmp    eax,0x1b
c000193f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001946:	76 33                	jbe    c000197b <dlcalloc+0x93>
c0001948:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000194f:	83 f8 23             	cmp    eax,0x23
c0001952:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001959:	76 20                	jbe    c000197b <dlcalloc+0x93>
c000195b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001962:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001969:	eb 10                	jmp    c000197b <dlcalloc+0x93>
c000196b:	52                   	push   edx
c000196c:	83 e8 08             	sub    eax,0x8
c000196f:	50                   	push   eax
c0001970:	6a 00                	push   0x0
c0001972:	53                   	push   ebx
c0001973:	e8 78 eb ff ff       	call   c00004f0 <memset>
c0001978:	83 c4 10             	add    esp,0x10
c000197b:	83 c4 08             	add    esp,0x8
c000197e:	89 d8                	mov    eax,ebx
c0001980:	5b                   	pop    ebx
c0001981:	c3                   	ret    

c0001982 <dlcfree>:
c0001982:	e9 ff f3 ff ff       	jmp    c0000d86 <dlfree>

c0001987 <dlindependent_calloc>:
c0001987:	83 ec 28             	sub    esp,0x28
c000198a:	b9 03 00 00 00       	mov    ecx,0x3
c000198f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001993:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000199b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a3:	e8 ca fa ff ff       	call   c0001472 <iALLOc>
c00019a8:	83 c4 2c             	add    esp,0x2c
c00019ab:	c3                   	ret    

c00019ac <dlindependent_comalloc>:
c00019ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019b0:	31 c9                	xor    ecx,ecx
c00019b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019be:	e9 af fa ff ff       	jmp    c0001472 <iALLOc>

c00019c3 <dlvalloc>:
c00019c3:	83 ec 0c             	sub    esp,0xc
c00019c6:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00019cd:	75 0a                	jne    c00019d9 <dlvalloc+0x16>
c00019cf:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019d4:	e8 c6 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c00019d9:	50                   	push   eax
c00019da:	50                   	push   eax
c00019db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019df:	ff 35 5c 64 02 c0    	push   DWORD PTR ds:0xc002645c
c00019e5:	e8 db fd ff ff       	call   c00017c5 <dlmemalign>
c00019ea:	83 c4 1c             	add    esp,0x1c
c00019ed:	c3                   	ret    

c00019ee <dlpvalloc>:
c00019ee:	83 ec 0c             	sub    esp,0xc
c00019f1:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00019f8:	75 0a                	jne    c0001a04 <dlpvalloc+0x16>
c00019fa:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019ff:	e8 9b f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a04:	52                   	push   edx
c0001a05:	a1 5c 64 02 c0       	mov    eax,ds:0xc002645c
c0001a0a:	52                   	push   edx
c0001a0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a0f:	89 c1                	mov    ecx,eax
c0001a11:	f7 d9                	neg    ecx
c0001a13:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a17:	21 ca                	and    edx,ecx
c0001a19:	52                   	push   edx
c0001a1a:	50                   	push   eax
c0001a1b:	e8 a5 fd ff ff       	call   c00017c5 <dlmemalign>
c0001a20:	83 c4 1c             	add    esp,0x1c
c0001a23:	c3                   	ret    

c0001a24 <dlmalloc_trim>:
c0001a24:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001a29:	e8 71 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a2e:	31 c0                	xor    eax,eax
c0001a30:	c3                   	ret    

c0001a31 <dlmalloc_usable_size>:
c0001a31:	53                   	push   ebx
c0001a32:	31 c0                	xor    eax,eax
c0001a34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a38:	85 c9                	test   ecx,ecx
c0001a3a:	74 24                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a3c:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a3f:	f6 c2 02             	test   dl,0x2
c0001a42:	74 08                	je     c0001a4c <dlmalloc_usable_size+0x1b>
c0001a44:	83 e2 fc             	and    edx,0xfffffffc
c0001a47:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a4a:	eb 14                	jmp    c0001a60 <dlmalloc_usable_size+0x2f>
c0001a4c:	89 d3                	mov    ebx,edx
c0001a4e:	31 c0                	xor    eax,eax
c0001a50:	83 e3 fe             	and    ebx,0xfffffffe
c0001a53:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a58:	74 06                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a5a:	83 e2 fc             	and    edx,0xfffffffc
c0001a5d:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a60:	5b                   	pop    ebx
c0001a61:	c3                   	ret    

c0001a62 <dlmallinfo>:
c0001a62:	55                   	push   ebp
c0001a63:	57                   	push   edi
c0001a64:	56                   	push   esi
c0001a65:	53                   	push   ebx
c0001a66:	83 ec 08             	sub    esp,0x8
c0001a69:	83 3d 2c 61 02 c0 00 	cmp    DWORD PTR ds:0xc002612c,0x0
c0001a70:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a74:	75 0a                	jne    c0001a80 <dlmallinfo+0x1e>
c0001a76:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001a7b:	e8 1f f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a80:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c0001a85:	31 ed                	xor    ebp,ebp
c0001a87:	31 c9                	xor    ecx,ecx
c0001a89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a8c:	83 e0 fc             	and    eax,0xfffffffc
c0001a8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a93:	31 c0                	xor    eax,eax
c0001a95:	8b 14 85 04 61 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9efc]
c0001a9c:	85 d2                	test   edx,edx
c0001a9e:	74 0e                	je     c0001aae <dlmallinfo+0x4c>
c0001aa0:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aa3:	45                   	inc    ebp
c0001aa4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aa7:	83 e6 fc             	and    esi,0xfffffffc
c0001aaa:	01 f1                	add    ecx,esi
c0001aac:	eb ee                	jmp    c0001a9c <dlmallinfo+0x3a>
c0001aae:	40                   	inc    eax
c0001aaf:	83 f8 0a             	cmp    eax,0xa
c0001ab2:	75 e1                	jne    c0001a95 <dlmallinfo+0x33>
c0001ab4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001abb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001abf:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001ac2:	b8 34 61 02 c0       	mov    eax,0xc0026134
c0001ac7:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001aca:	39 f0                	cmp    eax,esi
c0001acc:	74 10                	je     c0001ade <dlmallinfo+0x7c>
c0001ace:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001ad1:	ff 04 24             	inc    DWORD PTR [esp]
c0001ad4:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ad7:	83 e7 fc             	and    edi,0xfffffffc
c0001ada:	01 fa                	add    edx,edi
c0001adc:	eb ec                	jmp    c0001aca <dlmallinfo+0x68>
c0001ade:	83 c0 08             	add    eax,0x8
c0001ae1:	3d 2c 64 02 c0       	cmp    eax,0xc002642c
c0001ae6:	75 df                	jne    c0001ac7 <dlmallinfo+0x65>
c0001ae8:	8b 35 50 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026450
c0001aee:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af1:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0001af6:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001afc:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001aff:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b02:	8b 35 64 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026464
c0001b08:	89 03                	mov    DWORD PTR [ebx],eax
c0001b0a:	29 d0                	sub    eax,edx
c0001b0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b13:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b16:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b19:	8b 35 74 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026474
c0001b1f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b22:	89 d8                	mov    eax,ebx
c0001b24:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b27:	83 c4 08             	add    esp,0x8
c0001b2a:	5b                   	pop    ebx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	5d                   	pop    ebp
c0001b2e:	c2 04 00             	ret    0x4

c0001b31 <dlmalloc_stats>:
c0001b31:	83 ec 30             	sub    esp,0x30
c0001b34:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b38:	50                   	push   eax
c0001b39:	e8 24 ff ff ff       	call   c0001a62 <dlmallinfo>
c0001b3e:	83 c4 30             	add    esp,0x30
c0001b41:	c3                   	ret    

c0001b42 <dlmallopt>:
c0001b42:	56                   	push   esi
c0001b43:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b48:	53                   	push   ebx
c0001b49:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b51:	e8 49 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b56:	8d 46 04             	lea    eax,[esi+0x4]
c0001b59:	83 f8 05             	cmp    eax,0x5
c0001b5c:	77 67                	ja     c0001bc5 <dlmallopt+0x83>
c0001b5e:	ff 24 85 84 05 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfa7c]
c0001b65:	83 fb 50             	cmp    ebx,0x50
c0001b68:	77 5b                	ja     c0001bc5 <dlmallopt+0x83>
c0001b6a:	85 db                	test   ebx,ebx
c0001b6c:	ba 08 00 00 00       	mov    edx,0x8
c0001b71:	74 12                	je     c0001b85 <dlmallopt+0x43>
c0001b73:	83 c3 0b             	add    ebx,0xb
c0001b76:	ba 10 00 00 00       	mov    edx,0x10
c0001b7b:	83 fb 0f             	cmp    ebx,0xf
c0001b7e:	76 05                	jbe    c0001b85 <dlmallopt+0x43>
c0001b80:	89 da                	mov    edx,ebx
c0001b82:	83 e2 f8             	and    edx,0xfffffff8
c0001b85:	a1 00 61 02 c0       	mov    eax,ds:0xc0026100
c0001b8a:	83 e0 03             	and    eax,0x3
c0001b8d:	09 d0                	or     eax,edx
c0001b8f:	a3 00 61 02 c0       	mov    ds:0xc0026100,eax
c0001b94:	eb 31                	jmp    c0001bc7 <dlmallopt+0x85>
c0001b96:	89 1d 44 64 02 c0    	mov    DWORD PTR ds:0xc0026444,ebx
c0001b9c:	eb 06                	jmp    c0001ba4 <dlmallopt+0x62>
c0001b9e:	89 1d 48 64 02 c0    	mov    DWORD PTR ds:0xc0026448,ebx
c0001ba4:	be 01 00 00 00       	mov    esi,0x1
c0001ba9:	eb 1c                	jmp    c0001bc7 <dlmallopt+0x85>
c0001bab:	89 1d 4c 64 02 c0    	mov    DWORD PTR ds:0xc002644c,ebx
c0001bb1:	eb f1                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bb3:	31 f6                	xor    esi,esi
c0001bb5:	85 db                	test   ebx,ebx
c0001bb7:	75 0e                	jne    c0001bc7 <dlmallopt+0x85>
c0001bb9:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001bc3:	eb df                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bc5:	31 f6                	xor    esi,esi
c0001bc7:	5b                   	pop    ebx
c0001bc8:	89 f0                	mov    eax,esi
c0001bca:	5e                   	pop    esi
c0001bcb:	c3                   	ret    

c0001bcc <isblank>:
c0001bcc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001bd1:	74 09                	je     c0001bdc <isblank+0x10>
c0001bd3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001bd8:	75 0a                	jne    c0001be4 <isblank+0x18>
c0001bda:	66 90                	xchg   ax,ax
c0001bdc:	b8 01 00 00 00       	mov    eax,0x1
c0001be1:	c3                   	ret    
c0001be2:	66 90                	xchg   ax,ax
c0001be4:	b8 00 00 00 00       	mov    eax,0x0
c0001be9:	c3                   	ret    
c0001bea:	66 90                	xchg   ax,ax

c0001bec <iscntrl>:
c0001bec:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bf1:	7e 09                	jle    c0001bfc <iscntrl+0x10>
c0001bf3:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bf8:	75 0a                	jne    c0001c04 <iscntrl+0x18>
c0001bfa:	66 90                	xchg   ax,ax
c0001bfc:	b8 01 00 00 00       	mov    eax,0x1
c0001c01:	c3                   	ret    
c0001c02:	66 90                	xchg   ax,ax
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isdigit>:
c0001c0c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001c11:	7e 0d                	jle    c0001c20 <isdigit+0x14>
c0001c13:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001c18:	7f 06                	jg     c0001c20 <isdigit+0x14>
c0001c1a:	b8 01 00 00 00       	mov    eax,0x1
c0001c1f:	c3                   	ret    
c0001c20:	b8 00 00 00 00       	mov    eax,0x0
c0001c25:	c3                   	ret    
c0001c26:	66 90                	xchg   ax,ax

c0001c28 <islower>:
c0001c28:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001c2d:	7e 0d                	jle    c0001c3c <islower+0x14>
c0001c2f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001c34:	7f 06                	jg     c0001c3c <islower+0x14>
c0001c36:	b8 01 00 00 00       	mov    eax,0x1
c0001c3b:	c3                   	ret    
c0001c3c:	b8 00 00 00 00       	mov    eax,0x0
c0001c41:	c3                   	ret    
c0001c42:	66 90                	xchg   ax,ax

c0001c44 <isspace>:
c0001c44:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c49:	7c 19                	jl     c0001c64 <isspace+0x20>
c0001c4b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c50:	7e 0a                	jle    c0001c5c <isspace+0x18>
c0001c52:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c57:	75 0b                	jne    c0001c64 <isspace+0x20>
c0001c59:	8d 76 00             	lea    esi,[esi+0x0]
c0001c5c:	b8 01 00 00 00       	mov    eax,0x1
c0001c61:	c3                   	ret    
c0001c62:	66 90                	xchg   ax,ax
c0001c64:	b8 00 00 00 00       	mov    eax,0x0
c0001c69:	c3                   	ret    
c0001c6a:	66 90                	xchg   ax,ax

c0001c6c <isupper>:
c0001c6c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c71:	7e 0d                	jle    c0001c80 <isupper+0x14>
c0001c73:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c78:	7f 06                	jg     c0001c80 <isupper+0x14>
c0001c7a:	b8 01 00 00 00       	mov    eax,0x1
c0001c7f:	c3                   	ret    
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isalpha>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 db ff ff ff       	call   c0001c6c <isupper>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 10                	jne    c0001ca8 <isalpha+0x20>
c0001c98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c9c:	e8 87 ff ff ff       	call   c0001c28 <islower>
c0001ca1:	83 c4 04             	add    esp,0x4
c0001ca4:	85 c0                	test   eax,eax
c0001ca6:	74 08                	je     c0001cb0 <isalpha+0x28>
c0001ca8:	b8 01 00 00 00       	mov    eax,0x1
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	b8 00 00 00 00       	mov    eax,0x0
c0001cb5:	c3                   	ret    
c0001cb6:	66 90                	xchg   ax,ax

c0001cb8 <isalnum>:
c0001cb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cbc:	e8 c7 ff ff ff       	call   c0001c88 <isalpha>
c0001cc1:	83 c4 04             	add    esp,0x4
c0001cc4:	85 c0                	test   eax,eax
c0001cc6:	75 10                	jne    c0001cd8 <isalnum+0x20>
c0001cc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ccc:	e8 3b ff ff ff       	call   c0001c0c <isdigit>
c0001cd1:	83 c4 04             	add    esp,0x4
c0001cd4:	85 c0                	test   eax,eax
c0001cd6:	74 08                	je     c0001ce0 <isalnum+0x28>
c0001cd8:	b8 01 00 00 00       	mov    eax,0x1
c0001cdd:	c3                   	ret    
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 00 00 00 00       	mov    eax,0x0
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax

c0001ce8 <ispunct>:
c0001ce8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cec:	e8 c7 ff ff ff       	call   c0001cb8 <isalnum>
c0001cf1:	83 c4 04             	add    esp,0x4
c0001cf4:	85 c0                	test   eax,eax
c0001cf6:	75 28                	jne    c0001d20 <ispunct+0x38>
c0001cf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cfc:	e8 43 ff ff ff       	call   c0001c44 <isspace>
c0001d01:	83 c4 04             	add    esp,0x4
c0001d04:	85 c0                	test   eax,eax
c0001d06:	75 18                	jne    c0001d20 <ispunct+0x38>
c0001d08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d0c:	e8 db fe ff ff       	call   c0001bec <iscntrl>
c0001d11:	83 c4 04             	add    esp,0x4
c0001d14:	85 c0                	test   eax,eax
c0001d16:	75 08                	jne    c0001d20 <ispunct+0x38>
c0001d18:	b8 01 00 00 00       	mov    eax,0x1
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax
c0001d20:	b8 00 00 00 00       	mov    eax,0x0
c0001d25:	c3                   	ret    
c0001d26:	66 90                	xchg   ax,ax

c0001d28 <isgraph>:
c0001d28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d2c:	e8 87 ff ff ff       	call   c0001cb8 <isalnum>
c0001d31:	83 c4 04             	add    esp,0x4
c0001d34:	85 c0                	test   eax,eax
c0001d36:	75 10                	jne    c0001d48 <isgraph+0x20>
c0001d38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d3c:	e8 a7 ff ff ff       	call   c0001ce8 <ispunct>
c0001d41:	83 c4 04             	add    esp,0x4
c0001d44:	85 c0                	test   eax,eax
c0001d46:	74 08                	je     c0001d50 <isgraph+0x28>
c0001d48:	b8 01 00 00 00       	mov    eax,0x1
c0001d4d:	c3                   	ret    
c0001d4e:	66 90                	xchg   ax,ax
c0001d50:	b8 00 00 00 00       	mov    eax,0x0
c0001d55:	c3                   	ret    
c0001d56:	66 90                	xchg   ax,ax

c0001d58 <isprint>:
c0001d58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d5c:	e8 c7 ff ff ff       	call   c0001d28 <isgraph>
c0001d61:	83 c4 04             	add    esp,0x4
c0001d64:	85 c0                	test   eax,eax
c0001d66:	75 08                	jne    c0001d70 <isprint+0x18>
c0001d68:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d6d:	75 09                	jne    c0001d78 <isprint+0x20>
c0001d6f:	90                   	nop
c0001d70:	b8 01 00 00 00       	mov    eax,0x1
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 00 00 00 00       	mov    eax,0x0
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax

c0001d80 <isxdigit>:
c0001d80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d84:	e8 83 fe ff ff       	call   c0001c0c <isdigit>
c0001d89:	83 c4 04             	add    esp,0x4
c0001d8c:	85 c0                	test   eax,eax
c0001d8e:	75 20                	jne    c0001db0 <isxdigit+0x30>
c0001d90:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d95:	7e 09                	jle    c0001da0 <isxdigit+0x20>
c0001d97:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d9c:	7e 12                	jle    c0001db0 <isxdigit+0x30>
c0001d9e:	66 90                	xchg   ax,ax
c0001da0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001da5:	7e 11                	jle    c0001db8 <isxdigit+0x38>
c0001da7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001dac:	7f 0a                	jg     c0001db8 <isxdigit+0x38>
c0001dae:	66 90                	xchg   ax,ax
c0001db0:	b8 01 00 00 00       	mov    eax,0x1
c0001db5:	c3                   	ret    
c0001db6:	66 90                	xchg   ax,ax
c0001db8:	b8 00 00 00 00       	mov    eax,0x0
c0001dbd:	c3                   	ret    

c0001dbe <disk_status>:
c0001dbe:	31 c0                	xor    eax,eax
c0001dc0:	c3                   	ret    

c0001dc1 <disk_initialize>:
c0001dc1:	31 c0                	xor    eax,eax
c0001dc3:	c3                   	ret    

c0001dc4 <disk_read>:
c0001dc4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc9:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001dd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd5:	e9 ee 7c 01 00       	jmp    c0019ac8 <fatWrapperReadDisk>

c0001dda <disk_write>:
c0001dda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001ddf:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001de7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001deb:	e9 18 7d 01 00       	jmp    c0019b08 <fatWrapperWriteDisk>

c0001df0 <disk_ioctl>:
c0001df0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001df5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001df9:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dfe:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001e06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e0a:	e9 39 7d 01 00       	jmp    c0019b48 <fatWrapperIoctl>

c0001e0f <ld_word>:
c0001e0f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e13:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e16:	c1 e2 08             	shl    edx,0x8
c0001e19:	09 d0                	or     eax,edx
c0001e1b:	c3                   	ret    

c0001e1c <ld_dword>:
c0001e1c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001e20:	89 d1                	mov    ecx,edx
c0001e22:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e26:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e29:	c1 e1 08             	shl    ecx,0x8
c0001e2c:	09 ca                	or     edx,ecx
c0001e2e:	c1 e2 08             	shl    edx,0x8
c0001e31:	09 d0                	or     eax,edx
c0001e33:	c3                   	ret    

c0001e34 <st_word>:
c0001e34:	66 89 10             	mov    WORD PTR [eax],dx
c0001e37:	c3                   	ret    

c0001e38 <st_dword>:
c0001e38:	89 10                	mov    DWORD PTR [eax],edx
c0001e3a:	c3                   	ret    

c0001e3b <mem_cpy>:
c0001e3b:	85 c9                	test   ecx,ecx
c0001e3d:	74 10                	je     c0001e4f <mem_cpy+0x14>
c0001e3f:	57                   	push   edi
c0001e40:	01 c1                	add    ecx,eax
c0001e42:	56                   	push   esi
c0001e43:	89 c7                	mov    edi,eax
c0001e45:	89 d6                	mov    esi,edx
c0001e47:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e48:	39 f9                	cmp    ecx,edi
c0001e4a:	75 fb                	jne    c0001e47 <mem_cpy+0xc>
c0001e4c:	5e                   	pop    esi
c0001e4d:	5f                   	pop    edi
c0001e4e:	c3                   	ret    
c0001e4f:	c3                   	ret    

c0001e50 <mem_set>:
c0001e50:	01 c1                	add    ecx,eax
c0001e52:	88 10                	mov    BYTE PTR [eax],dl
c0001e54:	40                   	inc    eax
c0001e55:	39 c8                	cmp    eax,ecx
c0001e57:	75 f9                	jne    c0001e52 <mem_set+0x2>
c0001e59:	c3                   	ret    

c0001e5a <mem_cmp>:
c0001e5a:	57                   	push   edi
c0001e5b:	56                   	push   esi
c0001e5c:	89 c6                	mov    esi,eax
c0001e5e:	53                   	push   ebx
c0001e5f:	46                   	inc    esi
c0001e60:	42                   	inc    edx
c0001e61:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e65:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e69:	29 fb                	sub    ebx,edi
c0001e6b:	89 cf                	mov    edi,ecx
c0001e6d:	29 f7                	sub    edi,esi
c0001e6f:	01 c7                	add    edi,eax
c0001e71:	74 04                	je     c0001e77 <mem_cmp+0x1d>
c0001e73:	85 db                	test   ebx,ebx
c0001e75:	74 e8                	je     c0001e5f <mem_cmp+0x5>
c0001e77:	89 d8                	mov    eax,ebx
c0001e79:	5b                   	pop    ebx
c0001e7a:	5e                   	pop    esi
c0001e7b:	5f                   	pop    edi
c0001e7c:	c3                   	ret    

c0001e7d <chk_chr>:
c0001e7d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e80:	85 c9                	test   ecx,ecx
c0001e82:	74 07                	je     c0001e8b <chk_chr+0xe>
c0001e84:	39 d1                	cmp    ecx,edx
c0001e86:	74 03                	je     c0001e8b <chk_chr+0xe>
c0001e88:	40                   	inc    eax
c0001e89:	eb f2                	jmp    c0001e7d <chk_chr>
c0001e8b:	89 c8                	mov    eax,ecx
c0001e8d:	c3                   	ret    

c0001e8e <dbc_1st>:
c0001e8e:	31 c0                	xor    eax,eax
c0001e90:	c3                   	ret    

c0001e91 <dbc_2nd>:
c0001e91:	31 c0                	xor    eax,eax
c0001e93:	c3                   	ret    

c0001e94 <tchar2uni>:
c0001e94:	57                   	push   edi
c0001e95:	56                   	push   esi
c0001e96:	53                   	push   ebx
c0001e97:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e99:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e9b:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e9e:	f6 c1 80             	test   cl,0x80
c0001ea1:	75 0a                	jne    c0001ead <tchar2uni+0x19>
c0001ea3:	0f b6 d1             	movzx  edx,cl
c0001ea6:	89 f3                	mov    ebx,esi
c0001ea8:	e9 b2 00 00 00       	jmp    c0001f5f <tchar2uni+0xcb>
c0001ead:	89 ca                	mov    edx,ecx
c0001eaf:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001eb5:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001ebb:	89 ca                	mov    edx,ecx
c0001ebd:	75 0a                	jne    c0001ec9 <tchar2uni+0x35>
c0001ebf:	83 e2 1f             	and    edx,0x1f
c0001ec2:	b9 01 00 00 00       	mov    ecx,0x1
c0001ec7:	eb 37                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ec9:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001ecf:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001ed5:	75 0c                	jne    c0001ee3 <tchar2uni+0x4f>
c0001ed7:	89 ca                	mov    edx,ecx
c0001ed9:	b9 02 00 00 00       	mov    ecx,0x2
c0001ede:	83 e2 0f             	and    edx,0xf
c0001ee1:	eb 1d                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ee3:	89 cf                	mov    edi,ecx
c0001ee5:	83 ca ff             	or     edx,0xffffffff
c0001ee8:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eee:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ef4:	75 70                	jne    c0001f66 <tchar2uni+0xd2>
c0001ef6:	89 ca                	mov    edx,ecx
c0001ef8:	b9 03 00 00 00       	mov    ecx,0x3
c0001efd:	83 e2 07             	and    edx,0x7
c0001f00:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001f04:	46                   	inc    esi
c0001f05:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001f08:	89 cf                	mov    edi,ecx
c0001f0a:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001f10:	83 c7 80             	add    edi,0xffffff80
c0001f13:	75 4e                	jne    c0001f63 <tchar2uni+0xcf>
c0001f15:	c1 e2 06             	shl    edx,0x6
c0001f18:	83 e1 3f             	and    ecx,0x3f
c0001f1b:	09 ca                	or     edx,ecx
c0001f1d:	39 de                	cmp    esi,ebx
c0001f1f:	75 e3                	jne    c0001f04 <tchar2uni+0x70>
c0001f21:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001f27:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f2d:	76 34                	jbe    c0001f63 <tchar2uni+0xcf>
c0001f2f:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001f32:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001f38:	77 29                	ja     c0001f63 <tchar2uni+0xcf>
c0001f3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f40:	76 1d                	jbe    c0001f5f <tchar2uni+0xcb>
c0001f42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f4e:	c1 e1 06             	shl    ecx,0x6
c0001f51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f57:	09 ca                	or     edx,ecx
c0001f59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f5f:	89 18                	mov    DWORD PTR [eax],ebx
c0001f61:	eb 03                	jmp    c0001f66 <tchar2uni+0xd2>
c0001f63:	83 ca ff             	or     edx,0xffffffff
c0001f66:	5b                   	pop    ebx
c0001f67:	89 d0                	mov    eax,edx
c0001f69:	5e                   	pop    esi
c0001f6a:	5f                   	pop    edi
c0001f6b:	c3                   	ret    

c0001f6c <put_utf>:
c0001f6c:	53                   	push   ebx
c0001f6d:	83 f8 7f             	cmp    eax,0x7f
c0001f70:	89 c3                	mov    ebx,eax
c0001f72:	b0 00                	mov    al,0x0
c0001f74:	77 11                	ja     c0001f87 <put_utf+0x1b>
c0001f76:	85 c9                	test   ecx,ecx
c0001f78:	0f 84 e5 00 00 00    	je     c0002063 <put_utf+0xf7>
c0001f7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001f80:	b0 01                	mov    al,0x1
c0001f82:	e9 dc 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001f87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f8d:	77 23                	ja     c0001fb2 <put_utf+0x46>
c0001f8f:	83 f9 01             	cmp    ecx,0x1
c0001f92:	0f 86 cb 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001f98:	89 d8                	mov    eax,ebx
c0001f9a:	83 e3 3f             	and    ebx,0x3f
c0001f9d:	c1 e8 06             	shr    eax,0x6
c0001fa0:	83 cb 80             	or     ebx,0xffffff80
c0001fa3:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001fa6:	83 c8 c0             	or     eax,0xffffffc0
c0001fa9:	88 02                	mov    BYTE PTR [edx],al
c0001fab:	b0 02                	mov    al,0x2
c0001fad:	e9 b1 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001fb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001fb8:	77 40                	ja     c0001ffa <put_utf+0x8e>
c0001fba:	83 f9 02             	cmp    ecx,0x2
c0001fbd:	0f 86 a0 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fc3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001fc9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001fcf:	0f 86 8e 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fd5:	89 d8                	mov    eax,ebx
c0001fd7:	c1 e8 0c             	shr    eax,0xc
c0001fda:	83 c8 e0             	or     eax,0xffffffe0
c0001fdd:	88 02                	mov    BYTE PTR [edx],al
c0001fdf:	89 d8                	mov    eax,ebx
c0001fe1:	83 e3 3f             	and    ebx,0x3f
c0001fe4:	c1 e8 06             	shr    eax,0x6
c0001fe7:	83 cb 80             	or     ebx,0xffffff80
c0001fea:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fed:	83 e0 3f             	and    eax,0x3f
c0001ff0:	83 c8 80             	or     eax,0xffffff80
c0001ff3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ff6:	b0 03                	mov    al,0x3
c0001ff8:	eb 69                	jmp    c0002063 <put_utf+0xf7>
c0001ffa:	83 f9 03             	cmp    ecx,0x3
c0001ffd:	76 64                	jbe    c0002063 <put_utf+0xf7>
c0001fff:	89 d9                	mov    ecx,ebx
c0002001:	0f b7 c3             	movzx  eax,bx
c0002004:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c000200a:	66 31 c9             	xor    cx,cx
c000200d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0002013:	c1 e9 06             	shr    ecx,0x6
c0002016:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c000201c:	77 43                	ja     c0002061 <put_utf+0xf5>
c000201e:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002024:	77 3b                	ja     c0002061 <put_utf+0xf5>
c0002026:	09 cb                	or     ebx,ecx
c0002028:	81 c3 00 00 01 00    	add    ebx,0x10000
c000202e:	89 d8                	mov    eax,ebx
c0002030:	c1 e8 12             	shr    eax,0x12
c0002033:	83 c8 f0             	or     eax,0xfffffff0
c0002036:	88 02                	mov    BYTE PTR [edx],al
c0002038:	89 d8                	mov    eax,ebx
c000203a:	c1 e8 0c             	shr    eax,0xc
c000203d:	83 e0 3f             	and    eax,0x3f
c0002040:	83 c8 80             	or     eax,0xffffff80
c0002043:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002046:	89 d8                	mov    eax,ebx
c0002048:	83 e3 3f             	and    ebx,0x3f
c000204b:	c1 e8 06             	shr    eax,0x6
c000204e:	83 cb 80             	or     ebx,0xffffff80
c0002051:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002054:	83 e0 3f             	and    eax,0x3f
c0002057:	83 c8 80             	or     eax,0xffffff80
c000205a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000205d:	b0 04                	mov    al,0x4
c000205f:	eb 02                	jmp    c0002063 <put_utf+0xf7>
c0002061:	31 c0                	xor    eax,eax
c0002063:	5b                   	pop    ebx
c0002064:	c3                   	ret    

c0002065 <clst2sect>:
c0002065:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002068:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000206b:	83 ea 02             	sub    edx,0x2
c000206e:	39 ca                	cmp    edx,ecx
c0002070:	76 0d                	jbe    c000207f <clst2sect+0x1a>
c0002072:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002076:	0f af d1             	imul   edx,ecx
c0002079:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000207c:	89 d0                	mov    eax,edx
c000207e:	c3                   	ret    
c000207f:	31 c0                	xor    eax,eax
c0002081:	c3                   	ret    

c0002082 <pick_lfn>:
c0002082:	55                   	push   ebp
c0002083:	57                   	push   edi
c0002084:	89 c7                	mov    edi,eax
c0002086:	56                   	push   esi
c0002087:	53                   	push   ebx
c0002088:	89 d3                	mov    ebx,edx
c000208a:	8d 42 1a             	lea    eax,[edx+0x1a]
c000208d:	e8 7d fd ff ff       	call   c0001e0f <ld_word>
c0002092:	66 85 c0             	test   ax,ax
c0002095:	74 04                	je     c000209b <pick_lfn+0x19>
c0002097:	31 c0                	xor    eax,eax
c0002099:	eb 62                	jmp    c00020fd <pick_lfn+0x7b>
c000209b:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000209e:	bd 01 00 00 00       	mov    ebp,0x1
c00020a3:	31 f6                	xor    esi,esi
c00020a5:	83 e1 bf             	and    ecx,0xffffffbf
c00020a8:	49                   	dec    ecx
c00020a9:	6b c9 0d             	imul   ecx,ecx,0xd
c00020ac:	0f b6 86 e0 06 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdf920]
c00020b3:	01 d8                	add    eax,ebx
c00020b5:	e8 55 fd ff ff       	call   c0001e0f <ld_word>
c00020ba:	66 85 ed             	test   bp,bp
c00020bd:	74 11                	je     c00020d0 <pick_lfn+0x4e>
c00020bf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020c5:	77 d0                	ja     c0002097 <pick_lfn+0x15>
c00020c7:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00020cb:	89 c5                	mov    ebp,eax
c00020cd:	41                   	inc    ecx
c00020ce:	eb 0a                	jmp    c00020da <pick_lfn+0x58>
c00020d0:	0f b7 c0             	movzx  eax,ax
c00020d3:	3d ff ff 00 00       	cmp    eax,0xffff
c00020d8:	75 bd                	jne    c0002097 <pick_lfn+0x15>
c00020da:	46                   	inc    esi
c00020db:	83 fe 0d             	cmp    esi,0xd
c00020de:	75 cc                	jne    c00020ac <pick_lfn+0x2a>
c00020e0:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020e3:	74 13                	je     c00020f8 <pick_lfn+0x76>
c00020e5:	66 85 ed             	test   bp,bp
c00020e8:	74 0e                	je     c00020f8 <pick_lfn+0x76>
c00020ea:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020f0:	77 a5                	ja     c0002097 <pick_lfn+0x15>
c00020f2:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020f8:	b8 01 00 00 00       	mov    eax,0x1
c00020fd:	5b                   	pop    ebx
c00020fe:	5e                   	pop    esi
c00020ff:	5f                   	pop    edi
c0002100:	5d                   	pop    ebp
c0002101:	c3                   	ret    

c0002102 <put_lfn>:
c0002102:	55                   	push   ebp
c0002103:	57                   	push   edi
c0002104:	89 d7                	mov    edi,edx
c0002106:	56                   	push   esi
c0002107:	31 f6                	xor    esi,esi
c0002109:	53                   	push   ebx
c000210a:	83 ec 0c             	sub    esp,0xc
c000210d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002111:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0002115:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000211b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000211f:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002122:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002125:	31 d2                	xor    edx,edx
c0002127:	e8 08 fd ff ff       	call   c0001e34 <st_word>
c000212c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002133:	0f b6 d9             	movzx  ebx,cl
c0002136:	4b                   	dec    ebx
c0002137:	6b db 0d             	imul   ebx,ebx,0xd
c000213a:	0f b7 c6             	movzx  eax,si
c000213d:	3d ff ff 00 00       	cmp    eax,0xffff
c0002142:	74 09                	je     c000214d <put_lfn+0x4b>
c0002144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002148:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000214c:	43                   	inc    ebx
c000214d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002150:	0f b7 ee             	movzx  ebp,si
c0002153:	89 ea                	mov    edx,ebp
c0002155:	0f b6 80 e0 06 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf920]
c000215c:	01 f8                	add    eax,edi
c000215e:	e8 d1 fc ff ff       	call   c0001e34 <st_word>
c0002163:	85 ed                	test   ebp,ebp
c0002165:	75 05                	jne    c000216c <put_lfn+0x6a>
c0002167:	be ff ff 00 00       	mov    esi,0xffff
c000216c:	ff 04 24             	inc    DWORD PTR [esp]
c000216f:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002173:	75 c5                	jne    c000213a <put_lfn+0x38>
c0002175:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000217b:	74 0b                	je     c0002188 <put_lfn+0x86>
c000217d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002181:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002186:	75 07                	jne    c000218f <put_lfn+0x8d>
c0002188:	83 c9 40             	or     ecx,0x40
c000218b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000218f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002193:	88 07                	mov    BYTE PTR [edi],al
c0002195:	83 c4 0c             	add    esp,0xc
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	5f                   	pop    edi
c000219b:	5d                   	pop    ebp
c000219c:	c3                   	ret    

c000219d <gen_numname>:
c000219d:	57                   	push   edi
c000219e:	89 cf                	mov    edi,ecx
c00021a0:	56                   	push   esi
c00021a1:	b9 0b 00 00 00       	mov    ecx,0xb
c00021a6:	53                   	push   ebx
c00021a7:	89 c6                	mov    esi,eax
c00021a9:	83 ec 10             	sub    esp,0x10
c00021ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00021b0:	e8 86 fc ff ff       	call   c0001e3b <mem_cpy>
c00021b5:	83 fb 05             	cmp    ebx,0x5
c00021b8:	76 30                	jbe    c00021ea <gen_numname+0x4d>
c00021ba:	66 8b 07             	mov    ax,WORD PTR [edi]
c00021bd:	66 85 c0             	test   ax,ax
c00021c0:	74 28                	je     c00021ea <gen_numname+0x4d>
c00021c2:	83 c7 02             	add    edi,0x2
c00021c5:	ba 10 00 00 00       	mov    edx,0x10
c00021ca:	89 c1                	mov    ecx,eax
c00021cc:	01 db                	add    ebx,ebx
c00021ce:	c1 e0 10             	shl    eax,0x10
c00021d1:	83 e1 01             	and    ecx,0x1
c00021d4:	c1 e8 11             	shr    eax,0x11
c00021d7:	01 cb                	add    ebx,ecx
c00021d9:	0f ba e3 10          	bt     ebx,0x10
c00021dd:	73 06                	jae    c00021e5 <gen_numname+0x48>
c00021df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021e5:	4a                   	dec    edx
c00021e6:	75 e2                	jne    c00021ca <gen_numname+0x2d>
c00021e8:	eb d0                	jmp    c00021ba <gen_numname+0x1d>
c00021ea:	b8 07 00 00 00       	mov    eax,0x7
c00021ef:	89 d9                	mov    ecx,ebx
c00021f1:	83 e1 0f             	and    ecx,0xf
c00021f4:	8d 79 30             	lea    edi,[ecx+0x30]
c00021f7:	83 ff 39             	cmp    edi,0x39
c00021fa:	89 fa                	mov    edx,edi
c00021fc:	76 03                	jbe    c0002201 <gen_numname+0x64>
c00021fe:	8d 51 37             	lea    edx,[ecx+0x37]
c0002201:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002204:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002208:	89 da                	mov    edx,ebx
c000220a:	c1 ea 04             	shr    edx,0x4
c000220d:	83 fb 0f             	cmp    ebx,0xf
c0002210:	76 06                	jbe    c0002218 <gen_numname+0x7b>
c0002212:	89 c8                	mov    eax,ecx
c0002214:	89 d3                	mov    ebx,edx
c0002216:	eb d7                	jmp    c00021ef <gen_numname+0x52>
c0002218:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000221d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002220:	31 d2                	xor    edx,edx
c0002222:	8d 04 16             	lea    eax,[esi+edx*1]
c0002225:	39 ca                	cmp    edx,ecx
c0002227:	73 19                	jae    c0002242 <gen_numname+0xa5>
c0002229:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000222c:	83 f8 20             	cmp    eax,0x20
c000222f:	74 11                	je     c0002242 <gen_numname+0xa5>
c0002231:	e8 58 fc ff ff       	call   c0001e8e <dbc_1st>
c0002236:	85 c0                	test   eax,eax
c0002238:	74 05                	je     c000223f <gen_numname+0xa2>
c000223a:	39 d3                	cmp    ebx,edx
c000223c:	74 04                	je     c0002242 <gen_numname+0xa5>
c000223e:	42                   	inc    edx
c000223f:	42                   	inc    edx
c0002240:	eb e0                	jmp    c0002222 <gen_numname+0x85>
c0002242:	83 f9 07             	cmp    ecx,0x7
c0002245:	b0 20                	mov    al,0x20
c0002247:	77 05                	ja     c000224e <gen_numname+0xb1>
c0002249:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000224d:	41                   	inc    ecx
c000224e:	42                   	inc    edx
c000224f:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002253:	83 fa 07             	cmp    edx,0x7
c0002256:	76 ea                	jbe    c0002242 <gen_numname+0xa5>
c0002258:	83 c4 10             	add    esp,0x10
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	5f                   	pop    edi
c000225e:	c3                   	ret    

c000225f <sum_sfn>:
c000225f:	53                   	push   ebx
c0002260:	31 c9                	xor    ecx,ecx
c0002262:	31 db                	xor    ebx,ebx
c0002264:	0f b6 d1             	movzx  edx,cl
c0002267:	d1 ea                	shr    edx,1
c0002269:	c1 e1 07             	shl    ecx,0x7
c000226c:	09 ca                	or     edx,ecx
c000226e:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002271:	43                   	inc    ebx
c0002272:	01 ca                	add    edx,ecx
c0002274:	83 fb 0b             	cmp    ebx,0xb
c0002277:	88 d1                	mov    cl,dl
c0002279:	75 e9                	jne    c0002264 <sum_sfn+0x5>
c000227b:	5b                   	pop    ebx
c000227c:	88 d0                	mov    al,dl
c000227e:	c3                   	ret    

c000227f <get_ldnumber>:
c000227f:	55                   	push   ebp
c0002280:	57                   	push   edi
c0002281:	56                   	push   esi
c0002282:	83 ce ff             	or     esi,0xffffffff
c0002285:	53                   	push   ebx
c0002286:	8b 10                	mov    edx,DWORD PTR [eax]
c0002288:	85 d2                	test   edx,edx
c000228a:	74 38                	je     c00022c4 <get_ldnumber+0x45>
c000228c:	89 c5                	mov    ebp,eax
c000228e:	89 d1                	mov    ecx,edx
c0002290:	41                   	inc    ecx
c0002291:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002295:	80 fb 1f             	cmp    bl,0x1f
c0002298:	76 05                	jbe    c000229f <get_ldnumber+0x20>
c000229a:	83 fb 3a             	cmp    ebx,0x3a
c000229d:	75 f1                	jne    c0002290 <get_ldnumber+0x11>
c000229f:	31 f6                	xor    esi,esi
c00022a1:	83 fb 3a             	cmp    ebx,0x3a
c00022a4:	75 1e                	jne    c00022c4 <get_ldnumber+0x45>
c00022a6:	8a 1a                	mov    bl,BYTE PTR [edx]
c00022a8:	83 ce ff             	or     esi,0xffffffff
c00022ab:	8d 7b d0             	lea    edi,[ebx-0x30]
c00022ae:	89 f8                	mov    eax,edi
c00022b0:	3c 09                	cmp    al,0x9
c00022b2:	77 10                	ja     c00022c4 <get_ldnumber+0x45>
c00022b4:	83 c2 02             	add    edx,0x2
c00022b7:	39 d1                	cmp    ecx,edx
c00022b9:	75 09                	jne    c00022c4 <get_ldnumber+0x45>
c00022bb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00022be:	0f be f3             	movsx  esi,bl
c00022c1:	83 ee 30             	sub    esi,0x30
c00022c4:	5b                   	pop    ebx
c00022c5:	89 f0                	mov    eax,esi
c00022c7:	5e                   	pop    esi
c00022c8:	5f                   	pop    edi
c00022c9:	5d                   	pop    ebp
c00022ca:	c3                   	ret    

c00022cb <validate>:
c00022cb:	56                   	push   esi
c00022cc:	85 c0                	test   eax,eax
c00022ce:	53                   	push   ebx
c00022cf:	89 d6                	mov    esi,edx
c00022d1:	51                   	push   ecx
c00022d2:	75 09                	jne    c00022dd <validate+0x12>
c00022d4:	b8 09 00 00 00       	mov    eax,0x9
c00022d9:	31 c9                	xor    ecx,ecx
c00022db:	eb 2e                	jmp    c000230b <validate+0x40>
c00022dd:	89 c3                	mov    ebx,eax
c00022df:	8b 00                	mov    eax,DWORD PTR [eax]
c00022e1:	85 c0                	test   eax,eax
c00022e3:	74 ef                	je     c00022d4 <validate+0x9>
c00022e5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022e8:	74 ea                	je     c00022d4 <validate+0x9>
c00022ea:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022ed:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022f1:	75 e1                	jne    c00022d4 <validate+0x9>
c00022f3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f7:	83 ec 0c             	sub    esp,0xc
c00022fa:	50                   	push   eax
c00022fb:	e8 be fa ff ff       	call   c0001dbe <disk_status>
c0002300:	83 c4 10             	add    esp,0x10
c0002303:	a8 01                	test   al,0x1
c0002305:	75 cd                	jne    c00022d4 <validate+0x9>
c0002307:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002309:	31 c0                	xor    eax,eax
c000230b:	89 0e                	mov    DWORD PTR [esi],ecx
c000230d:	5a                   	pop    edx
c000230e:	5b                   	pop    ebx
c000230f:	5e                   	pop    esi
c0002310:	c3                   	ret    

c0002311 <sync_window>:
c0002311:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002315:	74 58                	je     c000236f <sync_window+0x5e>
c0002317:	56                   	push   esi
c0002318:	53                   	push   ebx
c0002319:	89 c3                	mov    ebx,eax
c000231b:	51                   	push   ecx
c000231c:	6a 01                	push   0x1
c000231e:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002321:	8d 70 34             	lea    esi,[eax+0x34]
c0002324:	56                   	push   esi
c0002325:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002329:	50                   	push   eax
c000232a:	e8 ab fa ff ff       	call   c0001dda <disk_write>
c000232f:	83 c4 10             	add    esp,0x10
c0002332:	ba 01 00 00 00       	mov    edx,0x1
c0002337:	85 c0                	test   eax,eax
c0002339:	75 2e                	jne    c0002369 <sync_window+0x58>
c000233b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000233f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002342:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002345:	89 c1                	mov    ecx,eax
c0002347:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000234a:	39 d1                	cmp    ecx,edx
c000234c:	73 19                	jae    c0002367 <sync_window+0x56>
c000234e:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002352:	75 13                	jne    c0002367 <sync_window+0x56>
c0002354:	6a 01                	push   0x1
c0002356:	01 d0                	add    eax,edx
c0002358:	50                   	push   eax
c0002359:	56                   	push   esi
c000235a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000235e:	50                   	push   eax
c000235f:	e8 76 fa ff ff       	call   c0001dda <disk_write>
c0002364:	83 c4 10             	add    esp,0x10
c0002367:	31 d2                	xor    edx,edx
c0002369:	89 d0                	mov    eax,edx
c000236b:	5a                   	pop    edx
c000236c:	5b                   	pop    ebx
c000236d:	5e                   	pop    esi
c000236e:	c3                   	ret    
c000236f:	31 d2                	xor    edx,edx
c0002371:	89 d0                	mov    eax,edx
c0002373:	c3                   	ret    

c0002374 <move_window>:
c0002374:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002377:	74 3a                	je     c00023b3 <move_window+0x3f>
c0002379:	56                   	push   esi
c000237a:	89 d6                	mov    esi,edx
c000237c:	53                   	push   ebx
c000237d:	89 c3                	mov    ebx,eax
c000237f:	51                   	push   ecx
c0002380:	e8 8c ff ff ff       	call   c0002311 <sync_window>
c0002385:	85 c0                	test   eax,eax
c0002387:	75 2d                	jne    c00023b6 <move_window+0x42>
c0002389:	6a 01                	push   0x1
c000238b:	56                   	push   esi
c000238c:	8d 43 34             	lea    eax,[ebx+0x34]
c000238f:	50                   	push   eax
c0002390:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 2a fa ff ff       	call   c0001dc4 <disk_read>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	89 c2                	mov    edx,eax
c000239f:	31 c0                	xor    eax,eax
c00023a1:	85 d2                	test   edx,edx
c00023a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00023a8:	0f 45 f2             	cmovne esi,edx
c00023ab:	0f 95 c0             	setne  al
c00023ae:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00023b1:	eb 03                	jmp    c00023b6 <move_window+0x42>
c00023b3:	31 c0                	xor    eax,eax
c00023b5:	c3                   	ret    
c00023b6:	5a                   	pop    edx
c00023b7:	5b                   	pop    ebx
c00023b8:	5e                   	pop    esi
c00023b9:	c3                   	ret    

c00023ba <check_fs>:
c00023ba:	53                   	push   ebx
c00023bb:	89 c3                	mov    ebx,eax
c00023bd:	83 ec 08             	sub    esp,0x8
c00023c0:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023c4:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00023cb:	e8 a4 ff ff ff       	call   c0002374 <move_window>
c00023d0:	ba 04 00 00 00       	mov    edx,0x4
c00023d5:	85 c0                	test   eax,eax
c00023d7:	75 68                	jne    c0002441 <check_fs+0x87>
c00023d9:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023df:	e8 2b fa ff ff       	call   c0001e0f <ld_word>
c00023e4:	ba 03 00 00 00       	mov    edx,0x3
c00023e9:	66 3d 55 aa          	cmp    ax,0xaa55
c00023ed:	75 52                	jne    c0002441 <check_fs+0x87>
c00023ef:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023f2:	8d 50 18             	lea    edx,[eax+0x18]
c00023f5:	80 fa 01             	cmp    dl,0x1
c00023f8:	76 09                	jbe    c0002403 <check_fs+0x49>
c00023fa:	3c eb                	cmp    al,0xeb
c00023fc:	ba 02 00 00 00       	mov    edx,0x2
c0002401:	75 3e                	jne    c0002441 <check_fs+0x87>
c0002403:	ba 64 2e 02 c0       	mov    edx,0xc0022e64
c0002408:	b9 03 00 00 00       	mov    ecx,0x3
c000240d:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002410:	e8 45 fa ff ff       	call   c0001e5a <mem_cmp>
c0002415:	31 d2                	xor    edx,edx
c0002417:	85 c0                	test   eax,eax
c0002419:	74 26                	je     c0002441 <check_fs+0x87>
c000241b:	ba 9c 05 02 c0       	mov    edx,0xc002059c
c0002420:	b9 05 00 00 00       	mov    ecx,0x5
c0002425:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000242b:	e8 2a fa ff ff       	call   c0001e5a <mem_cmp>
c0002430:	31 d2                	xor    edx,edx
c0002432:	85 c0                	test   eax,eax
c0002434:	74 0b                	je     c0002441 <check_fs+0x87>
c0002436:	31 d2                	xor    edx,edx
c0002438:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000243c:	0f 95 c2             	setne  dl
c000243f:	01 d2                	add    edx,edx
c0002441:	83 c4 08             	add    esp,0x8
c0002444:	89 d0                	mov    eax,edx
c0002446:	5b                   	pop    ebx
c0002447:	c3                   	ret    

c0002448 <find_volume>:
c0002448:	55                   	push   ebp
c0002449:	57                   	push   edi
c000244a:	56                   	push   esi
c000244b:	89 c6                	mov    esi,eax
c000244d:	53                   	push   ebx
c000244e:	89 d3                	mov    ebx,edx
c0002450:	83 ec 2c             	sub    esp,0x2c
c0002453:	31 d2                	xor    edx,edx
c0002455:	e8 60 ff ff ff       	call   c00023ba <check_fs>
c000245a:	85 db                	test   ebx,ebx
c000245c:	0f 94 c2             	sete   dl
c000245f:	83 f8 02             	cmp    eax,0x2
c0002462:	74 07                	je     c000246b <find_volume+0x23>
c0002464:	77 63                	ja     c00024c9 <find_volume+0x81>
c0002466:	f6 c2 01             	test   dl,0x1
c0002469:	75 5e                	jne    c00024c9 <find_volume+0x81>
c000246b:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002471:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002475:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000247b:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000247f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002483:	89 f8                	mov    eax,edi
c0002485:	83 c7 10             	add    edi,0x10
c0002488:	e8 8f f9 ff ff       	call   c0001e1c <ld_dword>
c000248d:	83 c5 04             	add    ebp,0x4
c0002490:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002494:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002497:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000249b:	75 e2                	jne    c000247f <find_volume+0x37>
c000249d:	83 fb 01             	cmp    ebx,0x1
c00024a0:	0f b6 fa             	movzx  edi,dl
c00024a3:	83 d3 ff             	adc    ebx,0xffffffff
c00024a6:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c00024aa:	b8 03 00 00 00       	mov    eax,0x3
c00024af:	85 d2                	test   edx,edx
c00024b1:	74 07                	je     c00024ba <find_volume+0x72>
c00024b3:	89 f0                	mov    eax,esi
c00024b5:	e8 00 ff ff ff       	call   c00023ba <check_fs>
c00024ba:	83 f8 01             	cmp    eax,0x1
c00024bd:	76 0a                	jbe    c00024c9 <find_volume+0x81>
c00024bf:	85 ff                	test   edi,edi
c00024c1:	74 06                	je     c00024c9 <find_volume+0x81>
c00024c3:	43                   	inc    ebx
c00024c4:	83 fb 03             	cmp    ebx,0x3
c00024c7:	76 dd                	jbe    c00024a6 <find_volume+0x5e>
c00024c9:	83 c4 2c             	add    esp,0x2c
c00024cc:	5b                   	pop    ebx
c00024cd:	5e                   	pop    esi
c00024ce:	5f                   	pop    edi
c00024cf:	5d                   	pop    ebp
c00024d0:	c3                   	ret    

c00024d1 <mount_volume>:
c00024d1:	55                   	push   ebp
c00024d2:	89 d5                	mov    ebp,edx
c00024d4:	57                   	push   edi
c00024d5:	89 cf                	mov    edi,ecx
c00024d7:	56                   	push   esi
c00024d8:	53                   	push   ebx
c00024d9:	bb 0b 00 00 00       	mov    ebx,0xb
c00024de:	83 ec 2c             	sub    esp,0x2c
c00024e1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024e7:	e8 93 fd ff ff       	call   c000227f <get_ldnumber>
c00024ec:	85 c0                	test   eax,eax
c00024ee:	0f 88 d0 02 00 00    	js     c00027c4 <mount_volume+0x2f3>
c00024f4:	8b 34 85 a0 64 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9b60]
c00024fb:	89 c2                	mov    edx,eax
c00024fd:	bb 0c 00 00 00       	mov    ebx,0xc
c0002502:	85 f6                	test   esi,esi
c0002504:	0f 84 ba 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000250a:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c000250d:	83 e7 fe             	and    edi,0xfffffffe
c0002510:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002513:	74 3c                	je     c0002551 <mount_volume+0x80>
c0002515:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002519:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	50                   	push   eax
c0002521:	e8 98 f8 ff ff       	call   c0001dbe <disk_status>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000252d:	a8 01                	test   al,0x1
c000252f:	75 20                	jne    c0002551 <mount_volume+0x80>
c0002531:	31 db                	xor    ebx,ebx
c0002533:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002539:	0f 84 85 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000253f:	a8 04                	test   al,0x4
c0002541:	0f 84 7d 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002547:	bb 0a 00 00 00       	mov    ebx,0xa
c000254c:	e9 73 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c0002551:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002554:	83 ec 0c             	sub    esp,0xc
c0002557:	0f b6 c2             	movzx  eax,dl
c000255a:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000255d:	bb 03 00 00 00       	mov    ebx,0x3
c0002562:	50                   	push   eax
c0002563:	e8 59 f8 ff ff       	call   c0001dc1 <disk_initialize>
c0002568:	83 c4 10             	add    esp,0x10
c000256b:	a8 01                	test   al,0x1
c000256d:	0f 85 51 02 00 00    	jne    c00027c4 <mount_volume+0x2f3>
c0002573:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002579:	74 04                	je     c000257f <mount_volume+0xae>
c000257b:	a8 04                	test   al,0x4
c000257d:	75 c8                	jne    c0002547 <mount_volume+0x76>
c000257f:	31 d2                	xor    edx,edx
c0002581:	89 f0                	mov    eax,esi
c0002583:	e8 c0 fe ff ff       	call   c0002448 <find_volume>
c0002588:	bb 01 00 00 00       	mov    ebx,0x1
c000258d:	83 f8 04             	cmp    eax,0x4
c0002590:	0f 84 2e 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002596:	83 f8 01             	cmp    eax,0x1
c0002599:	76 0a                	jbe    c00025a5 <mount_volume+0xd4>
c000259b:	bb 0d 00 00 00       	mov    ebx,0xd
c00025a0:	e9 1f 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c00025a5:	8d 46 3f             	lea    eax,[esi+0x3f]
c00025a8:	e8 62 f8 ff ff       	call   c0001e0f <ld_word>
c00025ad:	66 3d 00 02          	cmp    ax,0x200
c00025b1:	75 e8                	jne    c000259b <mount_volume+0xca>
c00025b3:	8d 46 4a             	lea    eax,[esi+0x4a]
c00025b6:	e8 54 f8 ff ff       	call   c0001e0f <ld_word>
c00025bb:	0f b7 c0             	movzx  eax,ax
c00025be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025c2:	85 c0                	test   eax,eax
c00025c4:	75 0c                	jne    c00025d2 <mount_volume+0x101>
c00025c6:	8d 46 58             	lea    eax,[esi+0x58]
c00025c9:	e8 4e f8 ff ff       	call   c0001e1c <ld_dword>
c00025ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025d2:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00025d5:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00025d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00025e0:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00025e3:	89 e8                	mov    eax,ebp
c00025e5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025e8:	8d 45 ff             	lea    eax,[ebp-0x1]
c00025eb:	3c 01                	cmp    al,0x1
c00025ed:	77 ac                	ja     c000259b <mount_volume+0xca>
c00025ef:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025f3:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025f7:	66 85 c0             	test   ax,ax
c00025fa:	89 c3                	mov    ebx,eax
c00025fc:	74 9d                	je     c000259b <mount_volume+0xca>
c00025fe:	8d 40 ff             	lea    eax,[eax-0x1]
c0002601:	85 d8                	test   eax,ebx
c0002603:	75 96                	jne    c000259b <mount_volume+0xca>
c0002605:	8d 46 45             	lea    eax,[esi+0x45]
c0002608:	e8 02 f8 ff ff       	call   c0001e0f <ld_word>
c000260d:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002611:	a8 0f                	test   al,0xf
c0002613:	89 c7                	mov    edi,eax
c0002615:	75 84                	jne    c000259b <mount_volume+0xca>
c0002617:	8d 46 47             	lea    eax,[esi+0x47]
c000261a:	e8 f0 f7 ff ff       	call   c0001e0f <ld_word>
c000261f:	0f b7 d0             	movzx  edx,ax
c0002622:	85 d2                	test   edx,edx
c0002624:	75 0a                	jne    c0002630 <mount_volume+0x15f>
c0002626:	8d 46 54             	lea    eax,[esi+0x54]
c0002629:	e8 ee f7 ff ff       	call   c0001e1c <ld_dword>
c000262e:	89 c2                	mov    edx,eax
c0002630:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002634:	8d 46 42             	lea    eax,[esi+0x42]
c0002637:	e8 d3 f7 ff ff       	call   c0001e0f <ld_word>
c000263c:	0f b7 c8             	movzx  ecx,ax
c000263f:	85 c9                	test   ecx,ecx
c0002641:	0f 84 54 ff ff ff    	je     c000259b <mount_volume+0xca>
c0002647:	89 e8                	mov    eax,ebp
c0002649:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000264d:	0f b6 e8             	movzx  ebp,al
c0002650:	0f b7 c7             	movzx  eax,di
c0002653:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002658:	c1 e8 04             	shr    eax,0x4
c000265b:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000265f:	01 e8                	add    eax,ebp
c0002661:	01 c8                	add    eax,ecx
c0002663:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002667:	39 c2                	cmp    edx,eax
c0002669:	0f 82 2c ff ff ff    	jb     c000259b <mount_volume+0xca>
c000266f:	29 c2                	sub    edx,eax
c0002671:	89 d5                	mov    ebp,edx
c0002673:	89 d0                	mov    eax,edx
c0002675:	31 d2                	xor    edx,edx
c0002677:	f7 f3                	div    ebx
c0002679:	39 dd                	cmp    ebp,ebx
c000267b:	0f 82 1a ff ff ff    	jb     c000259b <mount_volume+0xca>
c0002681:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002686:	0f 87 0f ff ff ff    	ja     c000259b <mount_volume+0xca>
c000268c:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002691:	0f 86 1e 01 00 00    	jbe    c00027b5 <mount_volume+0x2e4>
c0002697:	bb 03 00 00 00       	mov    ebx,0x3
c000269c:	8d 68 02             	lea    ebp,[eax+0x2]
c000269f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00026a3:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00026a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00026aa:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00026ae:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00026b1:	01 c8                	add    eax,ecx
c00026b3:	83 fb 03             	cmp    ebx,0x3
c00026b6:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00026b9:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00026bc:	75 23                	jne    c00026e1 <mount_volume+0x210>
c00026be:	8d 46 5e             	lea    eax,[esi+0x5e]
c00026c1:	e8 49 f7 ff ff       	call   c0001e0f <ld_word>
c00026c6:	09 c7                	or     edi,eax
c00026c8:	66 85 ff             	test   di,di
c00026cb:	0f 85 ca fe ff ff    	jne    c000259b <mount_volume+0xca>
c00026d1:	8d 46 60             	lea    eax,[esi+0x60]
c00026d4:	e8 43 f7 ff ff       	call   c0001e1c <ld_dword>
c00026d9:	c1 e5 02             	shl    ebp,0x2
c00026dc:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026df:	eb 25                	jmp    c0002706 <mount_volume+0x235>
c00026e1:	66 85 ff             	test   di,di
c00026e4:	0f 84 b1 fe ff ff    	je     c000259b <mount_volume+0xca>
c00026ea:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00026ee:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00026f2:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00026f6:	83 e5 01             	and    ebp,0x1
c00026f9:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026fc:	d1 ea                	shr    edx,1
c00026fe:	01 d5                	add    ebp,edx
c0002700:	83 fb 02             	cmp    ebx,0x2
c0002703:	0f 44 ef             	cmove  ebp,edi
c0002706:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c000270c:	c1 ed 09             	shr    ebp,0x9
c000270f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002713:	0f 87 82 fe ff ff    	ja     c000259b <mount_volume+0xca>
c0002719:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002720:	83 fb 03             	cmp    ebx,0x3
c0002723:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000272a:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000272e:	75 6e                	jne    c000279e <mount_volume+0x2cd>
c0002730:	8d 46 64             	lea    eax,[esi+0x64]
c0002733:	e8 d7 f6 ff ff       	call   c0001e0f <ld_word>
c0002738:	66 48                	dec    ax
c000273a:	75 62                	jne    c000279e <mount_volume+0x2cd>
c000273c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002740:	89 f0                	mov    eax,esi
c0002742:	42                   	inc    edx
c0002743:	e8 2c fc ff ff       	call   c0002374 <move_window>
c0002748:	85 c0                	test   eax,eax
c000274a:	75 52                	jne    c000279e <mount_volume+0x2cd>
c000274c:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002750:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002756:	e8 b4 f6 ff ff       	call   c0001e0f <ld_word>
c000275b:	66 3d 55 aa          	cmp    ax,0xaa55
c000275f:	75 3d                	jne    c000279e <mount_volume+0x2cd>
c0002761:	8d 46 34             	lea    eax,[esi+0x34]
c0002764:	e8 b3 f6 ff ff       	call   c0001e1c <ld_dword>
c0002769:	3d 52 52 61 41       	cmp    eax,0x41615252
c000276e:	75 2e                	jne    c000279e <mount_volume+0x2cd>
c0002770:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002776:	e8 a1 f6 ff ff       	call   c0001e1c <ld_dword>
c000277b:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002780:	75 1c                	jne    c000279e <mount_volume+0x2cd>
c0002782:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002788:	e8 8f f6 ff ff       	call   c0001e1c <ld_dword>
c000278d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002790:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002796:	e8 81 f6 ff ff       	call   c0001e1c <ld_dword>
c000279b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000279e:	88 1e                	mov    BYTE PTR [esi],bl
c00027a0:	66 a1 80 64 02 c0    	mov    ax,ds:0xc0026480
c00027a6:	31 db                	xor    ebx,ebx
c00027a8:	40                   	inc    eax
c00027a9:	66 a3 80 64 02 c0    	mov    ds:0xc0026480,ax
c00027af:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c00027b3:	eb 0f                	jmp    c00027c4 <mount_volume+0x2f3>
c00027b5:	3d f6 0f 00 00       	cmp    eax,0xff6
c00027ba:	19 db                	sbb    ebx,ebx
c00027bc:	83 c3 02             	add    ebx,0x2
c00027bf:	e9 d8 fe ff ff       	jmp    c000269c <mount_volume+0x1cb>
c00027c4:	83 c4 2c             	add    esp,0x2c
c00027c7:	89 d8                	mov    eax,ebx
c00027c9:	5b                   	pop    ebx
c00027ca:	5e                   	pop    esi
c00027cb:	5f                   	pop    edi
c00027cc:	5d                   	pop    ebp
c00027cd:	c3                   	ret    

c00027ce <put_fat>:
c00027ce:	55                   	push   ebp
c00027cf:	bd 02 00 00 00       	mov    ebp,0x2
c00027d4:	57                   	push   edi
c00027d5:	56                   	push   esi
c00027d6:	53                   	push   ebx
c00027d7:	83 ec 1c             	sub    esp,0x1c
c00027da:	83 fa 01             	cmp    edx,0x1
c00027dd:	0f 86 38 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027e3:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00027e6:	0f 86 2f 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027ec:	89 c6                	mov    esi,eax
c00027ee:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027f1:	89 cf                	mov    edi,ecx
c00027f3:	89 d3                	mov    ebx,edx
c00027f5:	83 f8 02             	cmp    eax,0x2
c00027f8:	0f 84 b1 00 00 00    	je     c00028af <put_fat+0xe1>
c00027fe:	83 f8 03             	cmp    eax,0x3
c0002801:	0f 84 d5 00 00 00    	je     c00028dc <put_fat+0x10e>
c0002807:	48                   	dec    eax
c0002808:	0f 85 0d 01 00 00    	jne    c000291b <put_fat+0x14d>
c000280e:	89 d1                	mov    ecx,edx
c0002810:	89 f0                	mov    eax,esi
c0002812:	d1 e9                	shr    ecx,1
c0002814:	01 d1                	add    ecx,edx
c0002816:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000281a:	89 ca                	mov    edx,ecx
c000281c:	c1 ea 09             	shr    edx,0x9
c000281f:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002822:	e8 4d fb ff ff       	call   c0002374 <move_window>
c0002827:	85 c0                	test   eax,eax
c0002829:	89 c5                	mov    ebp,eax
c000282b:	0f 85 ea 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002831:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002835:	8d 46 34             	lea    eax,[esi+0x34]
c0002838:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000283c:	8d 41 01             	lea    eax,[ecx+0x1]
c000283f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002845:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002849:	83 e3 01             	and    ebx,0x1
c000284c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002850:	89 f8                	mov    eax,edi
c0002852:	74 11                	je     c0002865 <put_fat+0x97>
c0002854:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002856:	89 f8                	mov    eax,edi
c0002858:	c1 e0 04             	shl    eax,0x4
c000285b:	25 f0 0f 00 00       	and    eax,0xff0
c0002860:	83 e2 0f             	and    edx,0xf
c0002863:	09 d0                	or     eax,edx
c0002865:	88 01                	mov    BYTE PTR [ecx],al
c0002867:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000286b:	89 f0                	mov    eax,esi
c000286d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002871:	c1 ea 09             	shr    edx,0x9
c0002874:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002877:	e8 f8 fa ff ff       	call   c0002374 <move_window>
c000287c:	85 c0                	test   eax,eax
c000287e:	89 c5                	mov    ebp,eax
c0002880:	0f 85 95 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000288a:	25 ff 01 00 00       	and    eax,0x1ff
c000288f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002893:	85 db                	test   ebx,ebx
c0002895:	74 07                	je     c000289e <put_fat+0xd0>
c0002897:	c1 ef 04             	shr    edi,0x4
c000289a:	89 f9                	mov    ecx,edi
c000289c:	eb 0d                	jmp    c00028ab <put_fat+0xdd>
c000289e:	8a 08                	mov    cl,BYTE PTR [eax]
c00028a0:	c1 ef 08             	shr    edi,0x8
c00028a3:	83 e7 0f             	and    edi,0xf
c00028a6:	83 e1 f0             	and    ecx,0xfffffff0
c00028a9:	09 f9                	or     ecx,edi
c00028ab:	88 08                	mov    BYTE PTR [eax],cl
c00028ad:	eb 27                	jmp    c00028d6 <put_fat+0x108>
c00028af:	c1 ea 08             	shr    edx,0x8
c00028b2:	89 f0                	mov    eax,esi
c00028b4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028b7:	e8 b8 fa ff ff       	call   c0002374 <move_window>
c00028bc:	85 c0                	test   eax,eax
c00028be:	89 c5                	mov    ebp,eax
c00028c0:	75 59                	jne    c000291b <put_fat+0x14d>
c00028c2:	01 db                	add    ebx,ebx
c00028c4:	0f b7 d7             	movzx  edx,di
c00028c7:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00028cd:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00028d1:	e8 5e f5 ff ff       	call   c0001e34 <st_word>
c00028d6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00028da:	eb 3f                	jmp    c000291b <put_fat+0x14d>
c00028dc:	c1 ea 07             	shr    edx,0x7
c00028df:	89 f0                	mov    eax,esi
c00028e1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028e4:	e8 8b fa ff ff       	call   c0002374 <move_window>
c00028e9:	85 c0                	test   eax,eax
c00028eb:	89 c5                	mov    ebp,eax
c00028ed:	75 2c                	jne    c000291b <put_fat+0x14d>
c00028ef:	c1 e3 02             	shl    ebx,0x2
c00028f2:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028f8:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028fe:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002902:	89 d8                	mov    eax,ebx
c0002904:	e8 13 f5 ff ff       	call   c0001e1c <ld_dword>
c0002909:	25 00 00 00 f0       	and    eax,0xf0000000
c000290e:	09 f8                	or     eax,edi
c0002910:	89 c2                	mov    edx,eax
c0002912:	89 d8                	mov    eax,ebx
c0002914:	e8 1f f5 ff ff       	call   c0001e38 <st_dword>
c0002919:	eb bb                	jmp    c00028d6 <put_fat+0x108>
c000291b:	83 c4 1c             	add    esp,0x1c
c000291e:	89 e8                	mov    eax,ebp
c0002920:	5b                   	pop    ebx
c0002921:	5e                   	pop    esi
c0002922:	5f                   	pop    edi
c0002923:	5d                   	pop    ebp
c0002924:	c3                   	ret    

c0002925 <dir_clear>:
c0002925:	55                   	push   ebp
c0002926:	57                   	push   edi
c0002927:	56                   	push   esi
c0002928:	89 c6                	mov    esi,eax
c000292a:	53                   	push   ebx
c000292b:	83 ec 1c             	sub    esp,0x1c
c000292e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002932:	e8 da f9 ff ff       	call   c0002311 <sync_window>
c0002937:	85 c0                	test   eax,eax
c0002939:	0f 85 c1 00 00 00    	jne    c0002a00 <dir_clear+0xdb>
c000293f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002943:	89 f0                	mov    eax,esi
c0002945:	e8 1b f7 ff ff       	call   c0002065 <clst2sect>
c000294a:	31 d2                	xor    edx,edx
c000294c:	b9 00 02 00 00       	mov    ecx,0x200
c0002951:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002954:	89 c5                	mov    ebp,eax
c0002956:	8d 46 34             	lea    eax,[esi+0x34]
c0002959:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000295d:	e8 ee f4 ff ff       	call   c0001e50 <mem_set>
c0002962:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002966:	b8 00 80 00 00       	mov    eax,0x8000
c000296b:	c1 e3 09             	shl    ebx,0x9
c000296e:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002974:	0f 47 d8             	cmova  ebx,eax
c0002977:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000297d:	76 16                	jbe    c0002995 <dir_clear+0x70>
c000297f:	83 ec 0c             	sub    esp,0xc
c0002982:	53                   	push   ebx
c0002983:	e8 cc 32 00 00       	call   c0005c54 <ff_memalloc>
c0002988:	83 c4 10             	add    esp,0x10
c000298b:	85 c0                	test   eax,eax
c000298d:	89 c7                	mov    edi,eax
c000298f:	75 76                	jne    c0002a07 <dir_clear+0xe2>
c0002991:	d1 eb                	shr    ebx,1
c0002993:	eb e2                	jmp    c0002977 <dir_clear+0x52>
c0002995:	31 db                	xor    ebx,ebx
c0002997:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000299b:	39 d8                	cmp    eax,ebx
c000299d:	76 53                	jbe    c00029f2 <dir_clear+0xcd>
c000299f:	6a 01                	push   0x1
c00029a1:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029a4:	50                   	push   eax
c00029a5:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00029ad:	50                   	push   eax
c00029ae:	e8 27 f4 ff ff       	call   c0001dda <disk_write>
c00029b3:	83 c4 10             	add    esp,0x10
c00029b6:	85 c0                	test   eax,eax
c00029b8:	75 38                	jne    c00029f2 <dir_clear+0xcd>
c00029ba:	43                   	inc    ebx
c00029bb:	eb da                	jmp    c0002997 <dir_clear+0x72>
c00029bd:	52                   	push   edx
c00029be:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029c1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00029c5:	50                   	push   eax
c00029c6:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029ca:	57                   	push   edi
c00029cb:	50                   	push   eax
c00029cc:	e8 09 f4 ff ff       	call   c0001dda <disk_write>
c00029d1:	83 c4 10             	add    esp,0x10
c00029d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029d8:	85 c0                	test   eax,eax
c00029da:	75 0a                	jne    c00029e6 <dir_clear+0xc1>
c00029dc:	01 d3                	add    ebx,edx
c00029de:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029e2:	39 d8                	cmp    eax,ebx
c00029e4:	77 d7                	ja     c00029bd <dir_clear+0x98>
c00029e6:	83 ec 0c             	sub    esp,0xc
c00029e9:	57                   	push   edi
c00029ea:	e8 7d 32 00 00       	call   c0005c6c <ff_memfree>
c00029ef:	83 c4 10             	add    esp,0x10
c00029f2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029f6:	39 d8                	cmp    eax,ebx
c00029f8:	0f 95 c0             	setne  al
c00029fb:	0f b6 c0             	movzx  eax,al
c00029fe:	eb 19                	jmp    c0002a19 <dir_clear+0xf4>
c0002a00:	b8 01 00 00 00       	mov    eax,0x1
c0002a05:	eb 12                	jmp    c0002a19 <dir_clear+0xf4>
c0002a07:	89 d9                	mov    ecx,ebx
c0002a09:	31 d2                	xor    edx,edx
c0002a0b:	e8 40 f4 ff ff       	call   c0001e50 <mem_set>
c0002a10:	89 da                	mov    edx,ebx
c0002a12:	31 db                	xor    ebx,ebx
c0002a14:	c1 ea 09             	shr    edx,0x9
c0002a17:	eb c5                	jmp    c00029de <dir_clear+0xb9>
c0002a19:	83 c4 1c             	add    esp,0x1c
c0002a1c:	5b                   	pop    ebx
c0002a1d:	5e                   	pop    esi
c0002a1e:	5f                   	pop    edi
c0002a1f:	5d                   	pop    ebp
c0002a20:	c3                   	ret    

c0002a21 <create_name>:
c0002a21:	55                   	push   ebp
c0002a22:	89 c5                	mov    ebp,eax
c0002a24:	57                   	push   edi
c0002a25:	89 d7                	mov    edi,edx
c0002a27:	56                   	push   esi
c0002a28:	31 f6                	xor    esi,esi
c0002a2a:	53                   	push   ebx
c0002a2b:	83 ec 3c             	sub    esp,0x3c
c0002a2e:	8b 02                	mov    eax,DWORD PTR [edx]
c0002a30:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a34:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002a37:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002a3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a3e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002a42:	e8 4d f4 ff ff       	call   c0001e94 <tchar2uni>
c0002a47:	83 f8 ff             	cmp    eax,0xffffffff
c0002a4a:	89 c3                	mov    ebx,eax
c0002a4c:	75 0a                	jne    c0002a58 <create_name+0x37>
c0002a4e:	b8 06 00 00 00       	mov    eax,0x6
c0002a53:	e9 7c 02 00 00       	jmp    c0002cd4 <create_name+0x2b3>
c0002a58:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a5d:	76 0c                	jbe    c0002a6b <create_name+0x4a>
c0002a5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a63:	c1 e8 10             	shr    eax,0x10
c0002a66:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002a6a:	46                   	inc    esi
c0002a6b:	0f b7 d3             	movzx  edx,bx
c0002a6e:	89 d8                	mov    eax,ebx
c0002a70:	83 fa 1f             	cmp    edx,0x1f
c0002a73:	76 30                	jbe    c0002aa5 <create_name+0x84>
c0002a75:	83 fa 2f             	cmp    edx,0x2f
c0002a78:	74 2b                	je     c0002aa5 <create_name+0x84>
c0002a7a:	83 fa 5c             	cmp    edx,0x5c
c0002a7d:	74 35                	je     c0002ab4 <create_name+0x93>
c0002a7f:	83 fa 7f             	cmp    edx,0x7f
c0002a82:	77 0e                	ja     c0002a92 <create_name+0x71>
c0002a84:	b8 a2 05 02 c0       	mov    eax,0xc00205a2
c0002a89:	e8 ef f3 ff ff       	call   c0001e7d <chk_chr>
c0002a8e:	85 c0                	test   eax,eax
c0002a90:	75 bc                	jne    c0002a4e <create_name+0x2d>
c0002a92:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a98:	77 b4                	ja     c0002a4e <create_name+0x2d>
c0002a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9e:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002aa2:	46                   	inc    esi
c0002aa3:	eb 99                	jmp    c0002a3e <create_name+0x1d>
c0002aa5:	66 83 f8 1f          	cmp    ax,0x1f
c0002aa9:	b3 04                	mov    bl,0x4
c0002aab:	76 1a                	jbe    c0002ac7 <create_name+0xa6>
c0002aad:	eb 05                	jmp    c0002ab4 <create_name+0x93>
c0002aaf:	40                   	inc    eax
c0002ab0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002ab4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002ab8:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002abb:	83 fa 2f             	cmp    edx,0x2f
c0002abe:	74 ef                	je     c0002aaf <create_name+0x8e>
c0002ac0:	83 fa 5c             	cmp    edx,0x5c
c0002ac3:	74 ea                	je     c0002aaf <create_name+0x8e>
c0002ac5:	31 db                	xor    ebx,ebx
c0002ac7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002acb:	89 07                	mov    DWORD PTR [edi],eax
c0002acd:	85 f6                	test   esi,esi
c0002acf:	74 16                	je     c0002ae7 <create_name+0xc6>
c0002ad1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad5:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002ada:	83 f8 20             	cmp    eax,0x20
c0002add:	74 05                	je     c0002ae4 <create_name+0xc3>
c0002adf:	83 f8 2e             	cmp    eax,0x2e
c0002ae2:	75 03                	jne    c0002ae7 <create_name+0xc6>
c0002ae4:	4e                   	dec    esi
c0002ae5:	eb e6                	jmp    c0002acd <create_name+0xac>
c0002ae7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aeb:	31 ff                	xor    edi,edi
c0002aed:	85 f6                	test   esi,esi
c0002aef:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002af5:	0f 84 53 ff ff ff    	je     c0002a4e <create_name+0x2d>
c0002afb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aff:	8d 57 01             	lea    edx,[edi+0x1]
c0002b02:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b06:	83 f8 20             	cmp    eax,0x20
c0002b09:	75 04                	jne    c0002b0f <create_name+0xee>
c0002b0b:	89 d7                	mov    edi,edx
c0002b0d:	eb ec                	jmp    c0002afb <create_name+0xda>
c0002b0f:	85 ff                	test   edi,edi
c0002b11:	75 05                	jne    c0002b18 <create_name+0xf7>
c0002b13:	83 f8 2e             	cmp    eax,0x2e
c0002b16:	75 08                	jne    c0002b20 <create_name+0xff>
c0002b18:	83 cb 03             	or     ebx,0x3
c0002b1b:	eb 03                	jmp    c0002b20 <create_name+0xff>
c0002b1d:	4e                   	dec    esi
c0002b1e:	74 0c                	je     c0002b2c <create_name+0x10b>
c0002b20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b24:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002b2a:	75 f1                	jne    c0002b1d <create_name+0xfc>
c0002b2c:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b31:	ba 20 00 00 00       	mov    edx,0x20
c0002b36:	8d 45 20             	lea    eax,[ebp+0x20]
c0002b39:	e8 12 f3 ff ff       	call   c0001e50 <mem_set>
c0002b3e:	31 c9                	xor    ecx,ecx
c0002b40:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002b48:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002b4d:	8d 47 01             	lea    eax,[edi+0x1]
c0002b50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b58:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b5c:	85 c0                	test   eax,eax
c0002b5e:	89 c7                	mov    edi,eax
c0002b60:	0f 84 1d 01 00 00    	je     c0002c83 <create_name+0x262>
c0002b66:	83 f8 20             	cmp    eax,0x20
c0002b69:	74 0b                	je     c0002b76 <create_name+0x155>
c0002b6b:	83 f8 2e             	cmp    eax,0x2e
c0002b6e:	75 0f                	jne    c0002b7f <create_name+0x15e>
c0002b70:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b74:	74 09                	je     c0002b7f <create_name+0x15e>
c0002b76:	83 cb 03             	or     ebx,0x3
c0002b79:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002b7d:	eb ce                	jmp    c0002b4d <create_name+0x12c>
c0002b7f:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002b83:	73 06                	jae    c0002b8b <create_name+0x16a>
c0002b85:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b89:	75 3a                	jne    c0002bc5 <create_name+0x1a4>
c0002b8b:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002b90:	75 08                	jne    c0002b9a <create_name+0x179>
c0002b92:	83 cb 03             	or     ebx,0x3
c0002b95:	e9 e9 00 00 00       	jmp    c0002c83 <create_name+0x262>
c0002b9a:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b9e:	74 0d                	je     c0002bad <create_name+0x18c>
c0002ba0:	83 cb 03             	or     ebx,0x3
c0002ba3:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002ba7:	0f 87 d6 00 00 00    	ja     c0002c83 <create_name+0x262>
c0002bad:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002bb2:	b9 08 00 00 00       	mov    ecx,0x8
c0002bb7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002bbb:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002bc3:	eb b4                	jmp    c0002b79 <create_name+0x158>
c0002bc5:	0f b7 c7             	movzx  eax,di
c0002bc8:	83 f8 7f             	cmp    eax,0x7f
c0002bcb:	76 66                	jbe    c0002c33 <create_name+0x212>
c0002bcd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002bd1:	89 d9                	mov    ecx,ebx
c0002bd3:	83 c9 02             	or     ecx,0x2
c0002bd6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bda:	52                   	push   edx
c0002bdb:	52                   	push   edx
c0002bdc:	68 b5 01 00 00       	push   0x1b5
c0002be1:	50                   	push   eax
c0002be2:	e8 9d 30 00 00       	call   c0005c84 <ff_uni2oem>
c0002be7:	83 c4 10             	add    esp,0x10
c0002bea:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002bee:	a8 80                	test   al,0x80
c0002bf0:	89 c7                	mov    edi,eax
c0002bf2:	74 0c                	je     c0002c00 <create_name+0x1df>
c0002bf4:	83 e7 7f             	and    edi,0x7f
c0002bf7:	0f b6 bf 60 06 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdf9a0]
c0002bfe:	eb 2a                	jmp    c0002c2a <create_name+0x209>
c0002c00:	0f b7 c0             	movzx  eax,ax
c0002c03:	3d ff 00 00 00       	cmp    eax,0xff
c0002c08:	76 20                	jbe    c0002c2a <create_name+0x209>
c0002c0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002c0e:	4a                   	dec    edx
c0002c0f:	39 ca                	cmp    edx,ecx
c0002c11:	77 0c                	ja     c0002c1f <create_name+0x1fe>
c0002c13:	83 cb 03             	or     ebx,0x3
c0002c16:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002c1a:	e9 5a ff ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c1f:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002c23:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c27:	41                   	inc    ecx
c0002c28:	eb 4d                	jmp    c0002c77 <create_name+0x256>
c0002c2a:	66 85 ff             	test   di,di
c0002c2d:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c31:	74 19                	je     c0002c4c <create_name+0x22b>
c0002c33:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002c37:	0f b7 d7             	movzx  edx,di
c0002c3a:	b8 ab 05 02 c0       	mov    eax,0xc00205ab
c0002c3f:	e8 39 f2 ff ff       	call   c0001e7d <chk_chr>
c0002c44:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002c48:	85 c0                	test   eax,eax
c0002c4a:	74 0a                	je     c0002c56 <create_name+0x235>
c0002c4c:	83 cb 03             	or     ebx,0x3
c0002c4f:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c54:	eb 21                	jmp    c0002c77 <create_name+0x256>
c0002c56:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c59:	66 83 f8 19          	cmp    ax,0x19
c0002c5d:	77 07                	ja     c0002c66 <create_name+0x245>
c0002c5f:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c64:	eb 11                	jmp    c0002c77 <create_name+0x256>
c0002c66:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c69:	66 83 f8 19          	cmp    ax,0x19
c0002c6d:	77 08                	ja     c0002c77 <create_name+0x256>
c0002c6f:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c74:	83 ef 20             	sub    edi,0x20
c0002c77:	89 f8                	mov    eax,edi
c0002c79:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002c7d:	41                   	inc    ecx
c0002c7e:	e9 f6 fe ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c83:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002c87:	75 04                	jne    c0002c8d <create_name+0x26c>
c0002c89:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002c8d:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002c92:	75 05                	jne    c0002c99 <create_name+0x278>
c0002c94:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c9d:	83 e0 0c             	and    eax,0xc
c0002ca0:	83 f8 0c             	cmp    eax,0xc
c0002ca3:	74 0c                	je     c0002cb1 <create_name+0x290>
c0002ca5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ca9:	83 e0 03             	and    eax,0x3
c0002cac:	83 f8 03             	cmp    eax,0x3
c0002caf:	75 05                	jne    c0002cb6 <create_name+0x295>
c0002cb1:	83 cb 02             	or     ebx,0x2
c0002cb4:	eb 19                	jmp    c0002ccf <create_name+0x2ae>
c0002cb6:	f6 c3 02             	test   bl,0x2
c0002cb9:	75 14                	jne    c0002ccf <create_name+0x2ae>
c0002cbb:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002cc0:	74 03                	je     c0002cc5 <create_name+0x2a4>
c0002cc2:	83 cb 10             	or     ebx,0x10
c0002cc5:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002cca:	74 03                	je     c0002ccf <create_name+0x2ae>
c0002ccc:	83 cb 08             	or     ebx,0x8
c0002ccf:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002cd2:	31 c0                	xor    eax,eax
c0002cd4:	83 c4 3c             	add    esp,0x3c
c0002cd7:	5b                   	pop    ebx
c0002cd8:	5e                   	pop    esi
c0002cd9:	5f                   	pop    edi
c0002cda:	5d                   	pop    ebp
c0002cdb:	c3                   	ret    

c0002cdc <cmp_lfn>:
c0002cdc:	55                   	push   ebp
c0002cdd:	57                   	push   edi
c0002cde:	89 d7                	mov    edi,edx
c0002ce0:	56                   	push   esi
c0002ce1:	53                   	push   ebx
c0002ce2:	83 ec 1c             	sub    esp,0x1c
c0002ce5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002ce9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cec:	e8 1e f1 ff ff       	call   c0001e0f <ld_word>
c0002cf1:	66 85 c0             	test   ax,ax
c0002cf4:	74 07                	je     c0002cfd <cmp_lfn+0x21>
c0002cf6:	31 c0                	xor    eax,eax
c0002cf8:	e9 a4 00 00 00       	jmp    c0002da1 <cmp_lfn+0xc5>
c0002cfd:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cff:	bd 01 00 00 00       	mov    ebp,0x1
c0002d04:	31 c9                	xor    ecx,ecx
c0002d06:	83 e3 3f             	and    ebx,0x3f
c0002d09:	4b                   	dec    ebx
c0002d0a:	6b db 0d             	imul   ebx,ebx,0xd
c0002d0d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d11:	0f b6 81 e0 06 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffdf920]
c0002d18:	01 f8                	add    eax,edi
c0002d1a:	e8 f0 f0 ff ff       	call   c0001e0f <ld_word>
c0002d1f:	66 85 ed             	test   bp,bp
c0002d22:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d26:	0f b7 f0             	movzx  esi,ax
c0002d29:	74 44                	je     c0002d6f <cmp_lfn+0x93>
c0002d2b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002d2f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d35:	77 bf                	ja     c0002cf6 <cmp_lfn+0x1a>
c0002d37:	83 ec 0c             	sub    esp,0xc
c0002d3a:	0f b7 c6             	movzx  eax,si
c0002d3d:	50                   	push   eax
c0002d3e:	e8 55 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d43:	89 c5                	mov    ebp,eax
c0002d45:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002d4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002d50:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d54:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d57:	e8 3c 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d5c:	83 c4 10             	add    esp,0x10
c0002d5f:	39 c5                	cmp    ebp,eax
c0002d61:	75 93                	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d63:	89 f5                	mov    ebp,esi
c0002d65:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002d69:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002d6d:	eb 0c                	jmp    c0002d7b <cmp_lfn+0x9f>
c0002d6f:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002d75:	0f 85 7b ff ff ff    	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d7b:	41                   	inc    ecx
c0002d7c:	83 f9 0d             	cmp    ecx,0xd
c0002d7f:	75 8c                	jne    c0002d0d <cmp_lfn+0x31>
c0002d81:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d84:	74 16                	je     c0002d9c <cmp_lfn+0xc0>
c0002d86:	66 85 ed             	test   bp,bp
c0002d89:	74 11                	je     c0002d9c <cmp_lfn+0xc0>
c0002d8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d8f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d94:	0f 94 c0             	sete   al
c0002d97:	0f b6 c0             	movzx  eax,al
c0002d9a:	eb 05                	jmp    c0002da1 <cmp_lfn+0xc5>
c0002d9c:	b8 01 00 00 00       	mov    eax,0x1
c0002da1:	83 c4 1c             	add    esp,0x1c
c0002da4:	5b                   	pop    ebx
c0002da5:	5e                   	pop    esi
c0002da6:	5f                   	pop    edi
c0002da7:	5d                   	pop    ebp
c0002da8:	c3                   	ret    

c0002da9 <sync_fs>:
c0002da9:	56                   	push   esi
c0002daa:	53                   	push   ebx
c0002dab:	53                   	push   ebx
c0002dac:	89 c3                	mov    ebx,eax
c0002dae:	e8 5e f5 ff ff       	call   c0002311 <sync_window>
c0002db3:	85 c0                	test   eax,eax
c0002db5:	0f 85 9a 00 00 00    	jne    c0002e55 <sync_fs+0xac>
c0002dbb:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002dbe:	75 7b                	jne    c0002e3b <sync_fs+0x92>
c0002dc0:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002dc4:	75 75                	jne    c0002e3b <sync_fs+0x92>
c0002dc6:	8d 73 34             	lea    esi,[ebx+0x34]
c0002dc9:	b9 00 02 00 00       	mov    ecx,0x200
c0002dce:	31 d2                	xor    edx,edx
c0002dd0:	89 f0                	mov    eax,esi
c0002dd2:	e8 79 f0 ff ff       	call   c0001e50 <mem_set>
c0002dd7:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ddd:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002de2:	e8 4d f0 ff ff       	call   c0001e34 <st_word>
c0002de7:	ba 52 52 61 41       	mov    edx,0x41615252
c0002dec:	89 f0                	mov    eax,esi
c0002dee:	e8 45 f0 ff ff       	call   c0001e38 <st_dword>
c0002df3:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002df9:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dfe:	e8 35 f0 ff ff       	call   c0001e38 <st_dword>
c0002e03:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002e06:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002e0c:	e8 27 f0 ff ff       	call   c0001e38 <st_dword>
c0002e11:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e14:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002e1a:	e8 19 f0 ff ff       	call   c0001e38 <st_dword>
c0002e1f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002e22:	6a 01                	push   0x1
c0002e24:	40                   	inc    eax
c0002e25:	50                   	push   eax
c0002e26:	56                   	push   esi
c0002e27:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002e2a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e2e:	50                   	push   eax
c0002e2f:	e8 a6 ef ff ff       	call   c0001dda <disk_write>
c0002e34:	83 c4 10             	add    esp,0x10
c0002e37:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e3b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e3f:	51                   	push   ecx
c0002e40:	6a 00                	push   0x0
c0002e42:	6a 00                	push   0x0
c0002e44:	50                   	push   eax
c0002e45:	e8 a6 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e4a:	83 c4 10             	add    esp,0x10
c0002e4d:	85 c0                	test   eax,eax
c0002e4f:	0f 95 c0             	setne  al
c0002e52:	0f b6 c0             	movzx  eax,al
c0002e55:	5a                   	pop    edx
c0002e56:	5b                   	pop    ebx
c0002e57:	5e                   	pop    esi
c0002e58:	c3                   	ret    

c0002e59 <create_partition>:
c0002e59:	55                   	push   ebp
c0002e5a:	0f b6 c0             	movzx  eax,al
c0002e5d:	57                   	push   edi
c0002e5e:	56                   	push   esi
c0002e5f:	53                   	push   ebx
c0002e60:	83 ec 40             	sub    esp,0x40
c0002e63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e67:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e6b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e6f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e73:	50                   	push   eax
c0002e74:	6a 01                	push   0x1
c0002e76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e7a:	e8 71 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e7f:	83 c4 10             	add    esp,0x10
c0002e82:	85 c0                	test   eax,eax
c0002e84:	0f 85 68 01 00 00    	jne    c0002ff2 <create_partition+0x199>
c0002e8a:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0002e8e:	b9 05 00 00 00       	mov    ecx,0x5
c0002e93:	be 08 00 00 00       	mov    esi,0x8
c0002e98:	89 f0                	mov    eax,esi
c0002e9a:	31 d2                	xor    edx,edx
c0002e9c:	0f b6 d8             	movzx  ebx,al
c0002e9f:	89 e8                	mov    eax,ebp
c0002ea1:	f7 f3                	div    ebx
c0002ea3:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002ea8:	76 0a                	jbe    c0002eb4 <create_partition+0x5b>
c0002eaa:	d1 e6                	shl    esi,1
c0002eac:	49                   	dec    ecx
c0002ead:	75 e9                	jne    c0002e98 <create_partition+0x3f>
c0002eaf:	be ff ff ff ff       	mov    esi,0xffffffff
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	b9 00 02 00 00       	mov    ecx,0x200
c0002ebd:	31 d2                	xor    edx,edx
c0002ebf:	e8 8c ef ff ff       	call   c0001e50 <mem_set>
c0002ec4:	b9 64 00 00 00       	mov    ecx,0x64
c0002ec9:	89 e8                	mov    eax,ebp
c0002ecb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ed3:	31 d2                	xor    edx,edx
c0002ed5:	f7 f1                	div    ecx
c0002ed7:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002edc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002ee0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ee4:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002eea:	89 f0                	mov    eax,esi
c0002eec:	0f b6 c0             	movzx  eax,al
c0002eef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ef3:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0002ef8:	0f 96 c0             	setbe  al
c0002efb:	31 d2                	xor    edx,edx
c0002efd:	85 c9                	test   ecx,ecx
c0002eff:	0f 95 c2             	setne  dl
c0002f02:	85 c2                	test   edx,eax
c0002f04:	0f 84 b7 00 00 00    	je     c0002fc1 <create_partition+0x168>
c0002f0a:	39 e9                	cmp    ecx,ebp
c0002f0c:	0f 83 af 00 00 00    	jae    c0002fc1 <create_partition+0x168>
c0002f12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f16:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f1a:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f1d:	83 fe 64             	cmp    esi,0x64
c0002f20:	77 0b                	ja     c0002f2d <create_partition+0xd4>
c0002f22:	74 07                	je     c0002f2b <create_partition+0xd2>
c0002f24:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f29:	eb 02                	jmp    c0002f2d <create_partition+0xd4>
c0002f2b:	89 ee                	mov    esi,ebp
c0002f2d:	89 ca                	mov    edx,ecx
c0002f2f:	31 c0                	xor    eax,eax
c0002f31:	01 f2                	add    edx,esi
c0002f33:	0f 92 c0             	setb   al
c0002f36:	39 ea                	cmp    edx,ebp
c0002f38:	77 04                	ja     c0002f3e <create_partition+0xe5>
c0002f3a:	85 c0                	test   eax,eax
c0002f3c:	74 06                	je     c0002f44 <create_partition+0xeb>
c0002f3e:	89 ee                	mov    esi,ebp
c0002f40:	29 ce                	sub    esi,ecx
c0002f42:	eb 04                	jmp    c0002f48 <create_partition+0xef>
c0002f44:	85 f6                	test   esi,esi
c0002f46:	74 79                	je     c0002fc1 <create_partition+0x168>
c0002f48:	89 ca                	mov    edx,ecx
c0002f4a:	89 d8                	mov    eax,ebx
c0002f4c:	e8 e7 ee ff ff       	call   c0001e38 <st_dword>
c0002f51:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f54:	89 f2                	mov    edx,esi
c0002f56:	e8 dd ee ff ff       	call   c0001e38 <st_dword>
c0002f5b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f5f:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f64:	31 d2                	xor    edx,edx
c0002f66:	83 c3 10             	add    ebx,0x10
c0002f69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f6d:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f70:	89 c8                	mov    eax,ecx
c0002f72:	01 f1                	add    ecx,esi
c0002f74:	f7 f7                	div    edi
c0002f76:	89 d7                	mov    edi,edx
c0002f78:	31 d2                	xor    edx,edx
c0002f7a:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f7e:	47                   	inc    edi
c0002f7f:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f82:	89 c2                	mov    edx,eax
c0002f84:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f87:	c1 ea 02             	shr    edx,0x2
c0002f8a:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f8d:	83 e2 c0             	and    edx,0xffffffc0
c0002f90:	09 fa                	or     edx,edi
c0002f92:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f97:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f9a:	31 d2                	xor    edx,edx
c0002f9c:	f7 f7                	div    edi
c0002f9e:	89 d6                	mov    esi,edx
c0002fa0:	31 d2                	xor    edx,edx
c0002fa2:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002fa6:	46                   	inc    esi
c0002fa7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002faa:	89 c7                	mov    edi,eax
c0002fac:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002faf:	c1 ef 02             	shr    edi,0x2
c0002fb2:	83 e7 c0             	and    edi,0xffffffc0
c0002fb5:	09 fe                	or     esi,edi
c0002fb7:	89 f2                	mov    edx,esi
c0002fb9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fbc:	e9 32 ff ff ff       	jmp    c0002ef3 <create_partition+0x9a>
c0002fc1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002fc5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fca:	05 fe 01 00 00       	add    eax,0x1fe
c0002fcf:	e8 60 ee ff ff       	call   c0001e34 <st_word>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	6a 00                	push   0x0
c0002fd8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002fdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002fe0:	e8 f5 ed ff ff       	call   c0001dda <disk_write>
c0002fe5:	83 c4 10             	add    esp,0x10
c0002fe8:	85 c0                	test   eax,eax
c0002fea:	0f 95 c0             	setne  al
c0002fed:	0f b6 c0             	movzx  eax,al
c0002ff0:	eb 05                	jmp    c0002ff7 <create_partition+0x19e>
c0002ff2:	b8 01 00 00 00       	mov    eax,0x1
c0002ff7:	83 c4 3c             	add    esp,0x3c
c0002ffa:	5b                   	pop    ebx
c0002ffb:	5e                   	pop    esi
c0002ffc:	5f                   	pop    edi
c0002ffd:	5d                   	pop    ebp
c0002ffe:	c3                   	ret    

c0002fff <get_fileinfo>:
c0002fff:	55                   	push   ebp
c0003000:	57                   	push   edi
c0003001:	56                   	push   esi
c0003002:	53                   	push   ebx
c0003003:	83 ec 1c             	sub    esp,0x1c
c0003006:	8b 30                	mov    esi,DWORD PTR [eax]
c0003008:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c000300c:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003010:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003014:	0f 84 de 01 00 00    	je     c00031f8 <get_fileinfo+0x1f9>
c000301a:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c000301e:	89 d3                	mov    ebx,edx
c0003020:	89 c6                	mov    esi,eax
c0003022:	74 7d                	je     c00030a1 <get_fileinfo+0xa2>
c0003024:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000302c:	31 ff                	xor    edi,edi
c000302e:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003035:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003039:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000303d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003040:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003044:	85 c0                	test   eax,eax
c0003046:	89 c2                	mov    edx,eax
c0003048:	74 44                	je     c000308e <get_fileinfo+0x8f>
c000304a:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c000304f:	85 ed                	test   ebp,ebp
c0003051:	75 0d                	jne    c0003060 <get_fileinfo+0x61>
c0003053:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003059:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000305e:	76 20                	jbe    c0003080 <get_fileinfo+0x81>
c0003060:	c1 e5 10             	shl    ebp,0x10
c0003063:	b9 ff 00 00 00       	mov    ecx,0xff
c0003068:	29 f9                	sub    ecx,edi
c000306a:	09 e8                	or     eax,ebp
c000306c:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003070:	e8 f7 ee ff ff       	call   c0001f6c <put_utf>
c0003075:	0f b6 c0             	movzx  eax,al
c0003078:	85 c0                	test   eax,eax
c000307a:	74 10                	je     c000308c <get_fileinfo+0x8d>
c000307c:	01 c7                	add    edi,eax
c000307e:	31 d2                	xor    edx,edx
c0003080:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003085:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000308a:	eb a9                	jmp    c0003035 <get_fileinfo+0x36>
c000308c:	31 ff                	xor    edi,edi
c000308e:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003094:	b8 00 00 00 00       	mov    eax,0x0
c0003099:	0f 45 f8             	cmovne edi,eax
c000309c:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c00030a1:	31 ff                	xor    edi,edi
c00030a3:	31 c9                	xor    ecx,ecx
c00030a5:	83 f9 0a             	cmp    ecx,0xa
c00030a8:	0f 87 ac 00 00 00    	ja     c000315a <get_fileinfo+0x15b>
c00030ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b1:	8d 69 01             	lea    ebp,[ecx+0x1]
c00030b4:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00030b8:	83 f8 20             	cmp    eax,0x20
c00030bb:	89 c2                	mov    edx,eax
c00030bd:	0f 84 90 00 00 00    	je     c0003153 <get_fileinfo+0x154>
c00030c3:	83 f8 05             	cmp    eax,0x5
c00030c6:	75 05                	jne    c00030cd <get_fileinfo+0xce>
c00030c8:	ba e5 00 00 00       	mov    edx,0xe5
c00030cd:	83 fd 09             	cmp    ebp,0x9
c00030d0:	75 0b                	jne    c00030dd <get_fileinfo+0xde>
c00030d2:	83 ff 0b             	cmp    edi,0xb
c00030d5:	77 06                	ja     c00030dd <get_fileinfo+0xde>
c00030d7:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00030dc:	47                   	inc    edi
c00030dd:	0f b7 c2             	movzx  eax,dx
c00030e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030e4:	e8 a5 ed ff ff       	call   c0001e8e <dbc_1st>
c00030e9:	85 c0                	test   eax,eax
c00030eb:	74 2f                	je     c000311c <get_fileinfo+0x11d>
c00030ed:	83 fd 08             	cmp    ebp,0x8
c00030f0:	74 2a                	je     c000311c <get_fileinfo+0x11d>
c00030f2:	83 fd 0b             	cmp    ebp,0xb
c00030f5:	74 25                	je     c000311c <get_fileinfo+0x11d>
c00030f7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030fa:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030fe:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c0003102:	e8 8a ed ff ff       	call   c0001e91 <dbc_2nd>
c0003107:	85 c0                	test   eax,eax
c0003109:	74 11                	je     c000311c <get_fileinfo+0x11d>
c000310b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000310f:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003112:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c0003117:	c1 e0 08             	shl    eax,0x8
c000311a:	09 c2                	or     edx,eax
c000311c:	50                   	push   eax
c000311d:	0f b7 d2             	movzx  edx,dx
c0003120:	50                   	push   eax
c0003121:	68 b5 01 00 00       	push   0x1b5
c0003126:	52                   	push   edx
c0003127:	e8 f4 2b 00 00       	call   c0005d20 <ff_oem2uni>
c000312c:	83 c4 10             	add    esp,0x10
c000312f:	0f b7 c0             	movzx  eax,ax
c0003132:	85 c0                	test   eax,eax
c0003134:	75 04                	jne    c000313a <get_fileinfo+0x13b>
c0003136:	31 ff                	xor    edi,edi
c0003138:	eb 20                	jmp    c000315a <get_fileinfo+0x15b>
c000313a:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000313e:	b9 0c 00 00 00       	mov    ecx,0xc
c0003143:	29 f9                	sub    ecx,edi
c0003145:	e8 22 ee ff ff       	call   c0001f6c <put_utf>
c000314a:	0f b6 c0             	movzx  eax,al
c000314d:	85 c0                	test   eax,eax
c000314f:	74 e5                	je     c0003136 <get_fileinfo+0x137>
c0003151:	01 c7                	add    edi,eax
c0003153:	89 e9                	mov    ecx,ebp
c0003155:	e9 4b ff ff ff       	jmp    c00030a5 <get_fileinfo+0xa6>
c000315a:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000315f:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003163:	75 5f                	jne    c00031c4 <get_fileinfo+0x1c5>
c0003165:	85 ff                	test   edi,edi
c0003167:	75 0b                	jne    c0003174 <get_fileinfo+0x175>
c0003169:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000316d:	ba 01 00 00 00       	mov    edx,0x1
c0003172:	eb 3e                	jmp    c00031b2 <get_fileinfo+0x1b3>
c0003174:	bf 08 00 00 00       	mov    edi,0x8
c0003179:	31 d2                	xor    edx,edx
c000317b:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003181:	84 c0                	test   al,al
c0003183:	74 2d                	je     c00031b2 <get_fileinfo+0x1b3>
c0003185:	66 83 f8 2e          	cmp    ax,0x2e
c0003189:	74 1b                	je     c00031a6 <get_fileinfo+0x1a7>
c000318b:	8d 48 bf             	lea    ecx,[eax-0x41]
c000318e:	66 83 f9 19          	cmp    cx,0x19
c0003192:	77 17                	ja     c00031ab <get_fileinfo+0x1ac>
c0003194:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003197:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000319a:	21 f9                	and    ecx,edi
c000319c:	80 e1 18             	and    cl,0x18
c000319f:	74 0a                	je     c00031ab <get_fileinfo+0x1ac>
c00031a1:	83 c0 20             	add    eax,0x20
c00031a4:	eb 05                	jmp    c00031ab <get_fileinfo+0x1ac>
c00031a6:	bf 10 00 00 00       	mov    edi,0x10
c00031ab:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c00031af:	42                   	inc    edx
c00031b0:	eb c9                	jmp    c000317b <get_fileinfo+0x17c>
c00031b2:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c00031b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ba:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c00031be:	75 04                	jne    c00031c4 <get_fileinfo+0x1c5>
c00031c0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00031c4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031c7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00031ca:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00031cd:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031d0:	83 c0 1c             	add    eax,0x1c
c00031d3:	e8 44 ec ff ff       	call   c0001e1c <ld_dword>
c00031d8:	89 03                	mov    DWORD PTR [ebx],eax
c00031da:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031dd:	83 c0 16             	add    eax,0x16
c00031e0:	e8 2a ec ff ff       	call   c0001e0f <ld_word>
c00031e5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031e9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ec:	83 c0 18             	add    eax,0x18
c00031ef:	e8 1b ec ff ff       	call   c0001e0f <ld_word>
c00031f4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031f8:	83 c4 1c             	add    esp,0x1c
c00031fb:	5b                   	pop    ebx
c00031fc:	5e                   	pop    esi
c00031fd:	5f                   	pop    edi
c00031fe:	5d                   	pop    ebp
c00031ff:	c3                   	ret    

c0003200 <ld_clust.isra.0>:
c0003200:	56                   	push   esi
c0003201:	89 c6                	mov    esi,eax
c0003203:	53                   	push   ebx
c0003204:	89 d3                	mov    ebx,edx
c0003206:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003209:	e8 01 ec ff ff       	call   c0001e0f <ld_word>
c000320e:	0f b7 c8             	movzx  ecx,ax
c0003211:	89 f0                	mov    eax,esi
c0003213:	3c 03                	cmp    al,0x3
c0003215:	75 0d                	jne    c0003224 <ld_clust.isra.0+0x24>
c0003217:	8d 43 14             	lea    eax,[ebx+0x14]
c000321a:	e8 f0 eb ff ff       	call   c0001e0f <ld_word>
c000321f:	c1 e0 10             	shl    eax,0x10
c0003222:	09 c1                	or     ecx,eax
c0003224:	5b                   	pop    ebx
c0003225:	89 c8                	mov    eax,ecx
c0003227:	5e                   	pop    esi
c0003228:	c3                   	ret    

c0003229 <st_clust.isra.1>:
c0003229:	56                   	push   esi
c000322a:	89 c6                	mov    esi,eax
c000322c:	53                   	push   ebx
c000322d:	89 d3                	mov    ebx,edx
c000322f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003232:	0f b7 d1             	movzx  edx,cx
c0003235:	e8 fa eb ff ff       	call   c0001e34 <st_word>
c000323a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000323d:	75 0f                	jne    c000324e <st_clust.isra.1+0x25>
c000323f:	8d 43 14             	lea    eax,[ebx+0x14]
c0003242:	5b                   	pop    ebx
c0003243:	c1 e9 10             	shr    ecx,0x10
c0003246:	89 ca                	mov    edx,ecx
c0003248:	5e                   	pop    esi
c0003249:	e9 e6 eb ff ff       	jmp    c0001e34 <st_word>
c000324e:	5b                   	pop    ebx
c000324f:	5e                   	pop    esi
c0003250:	c3                   	ret    

c0003251 <get_fat.isra.2>:
c0003251:	83 fa 01             	cmp    edx,0x1
c0003254:	b9 01 00 00 00       	mov    ecx,0x1
c0003259:	0f 86 f4 00 00 00    	jbe    c0003353 <get_fat.isra.2+0x102>
c000325f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003262:	0f 83 eb 00 00 00    	jae    c0003353 <get_fat.isra.2+0x102>
c0003268:	55                   	push   ebp
c0003269:	57                   	push   edi
c000326a:	56                   	push   esi
c000326b:	89 c6                	mov    esi,eax
c000326d:	53                   	push   ebx
c000326e:	89 d3                	mov    ebx,edx
c0003270:	83 ec 0c             	sub    esp,0xc
c0003273:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003276:	83 f8 02             	cmp    eax,0x2
c0003279:	74 79                	je     c00032f4 <get_fat.isra.2+0xa3>
c000327b:	83 f8 03             	cmp    eax,0x3
c000327e:	0f 84 97 00 00 00    	je     c000331b <get_fat.isra.2+0xca>
c0003284:	48                   	dec    eax
c0003285:	0f 85 be 00 00 00    	jne    c0003349 <get_fat.isra.2+0xf8>
c000328b:	89 d7                	mov    edi,edx
c000328d:	89 f0                	mov    eax,esi
c000328f:	d1 ef                	shr    edi,1
c0003291:	01 d7                	add    edi,edx
c0003293:	89 fa                	mov    edx,edi
c0003295:	c1 ea 09             	shr    edx,0x9
c0003298:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000329b:	e8 d4 f0 ff ff       	call   c0002374 <move_window>
c00032a0:	85 c0                	test   eax,eax
c00032a2:	74 08                	je     c00032ac <get_fat.isra.2+0x5b>
c00032a4:	83 c9 ff             	or     ecx,0xffffffff
c00032a7:	e9 9d 00 00 00       	jmp    c0003349 <get_fat.isra.2+0xf8>
c00032ac:	8d 6f 01             	lea    ebp,[edi+0x1]
c00032af:	89 f0                	mov    eax,esi
c00032b1:	89 ea                	mov    edx,ebp
c00032b3:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00032b9:	c1 ea 09             	shr    edx,0x9
c00032bc:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00032c1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032c4:	e8 ab f0 ff ff       	call   c0002374 <move_window>
c00032c9:	85 c0                	test   eax,eax
c00032cb:	75 d7                	jne    c00032a4 <get_fat.isra.2+0x53>
c00032cd:	89 f8                	mov    eax,edi
c00032cf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00032d5:	0f b6 f8             	movzx  edi,al
c00032d8:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00032dd:	c1 e0 08             	shl    eax,0x8
c00032e0:	09 f8                	or     eax,edi
c00032e2:	89 c1                	mov    ecx,eax
c00032e4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032ea:	80 e3 01             	and    bl,0x1
c00032ed:	74 5a                	je     c0003349 <get_fat.isra.2+0xf8>
c00032ef:	c1 e8 04             	shr    eax,0x4
c00032f2:	eb 53                	jmp    c0003347 <get_fat.isra.2+0xf6>
c00032f4:	c1 ea 08             	shr    edx,0x8
c00032f7:	89 f0                	mov    eax,esi
c00032f9:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032fc:	e8 73 f0 ff ff       	call   c0002374 <move_window>
c0003301:	85 c0                	test   eax,eax
c0003303:	75 9f                	jne    c00032a4 <get_fat.isra.2+0x53>
c0003305:	01 db                	add    ebx,ebx
c0003307:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c000330d:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0003311:	e8 f9 ea ff ff       	call   c0001e0f <ld_word>
c0003316:	0f b7 c8             	movzx  ecx,ax
c0003319:	eb 2e                	jmp    c0003349 <get_fat.isra.2+0xf8>
c000331b:	c1 ea 07             	shr    edx,0x7
c000331e:	89 f0                	mov    eax,esi
c0003320:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003323:	e8 4c f0 ff ff       	call   c0002374 <move_window>
c0003328:	85 c0                	test   eax,eax
c000332a:	0f 85 74 ff ff ff    	jne    c00032a4 <get_fat.isra.2+0x53>
c0003330:	c1 e3 02             	shl    ebx,0x2
c0003333:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0003339:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000333d:	e8 da ea ff ff       	call   c0001e1c <ld_dword>
c0003342:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003347:	89 c1                	mov    ecx,eax
c0003349:	83 c4 0c             	add    esp,0xc
c000334c:	89 c8                	mov    eax,ecx
c000334e:	5b                   	pop    ebx
c000334f:	5e                   	pop    esi
c0003350:	5f                   	pop    edi
c0003351:	5d                   	pop    ebp
c0003352:	c3                   	ret    
c0003353:	89 c8                	mov    eax,ecx
c0003355:	c3                   	ret    

c0003356 <dir_sdi>:
c0003356:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000335c:	0f 87 b6 00 00 00    	ja     c0003418 <dir_sdi+0xc2>
c0003362:	55                   	push   ebp
c0003363:	57                   	push   edi
c0003364:	56                   	push   esi
c0003365:	53                   	push   ebx
c0003366:	89 d3                	mov    ebx,edx
c0003368:	83 ec 1c             	sub    esp,0x1c
c000336b:	f6 c2 1f             	test   dl,0x1f
c000336e:	74 0a                	je     c000337a <dir_sdi+0x24>
c0003370:	b8 02 00 00 00       	mov    eax,0x2
c0003375:	e9 96 00 00 00       	jmp    c0003410 <dir_sdi+0xba>
c000337a:	89 c6                	mov    esi,eax
c000337c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000337e:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003381:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003384:	85 ff                	test   edi,edi
c0003386:	75 21                	jne    c00033a9 <dir_sdi+0x53>
c0003388:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000338c:	76 07                	jbe    c0003395 <dir_sdi+0x3f>
c000338e:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003391:	85 c0                	test   eax,eax
c0003393:	75 12                	jne    c00033a7 <dir_sdi+0x51>
c0003395:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003399:	89 da                	mov    edx,ebx
c000339b:	c1 ea 05             	shr    edx,0x5
c000339e:	39 c2                	cmp    edx,eax
c00033a0:	73 ce                	jae    c0003370 <dir_sdi+0x1a>
c00033a2:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00033a5:	eb 3c                	jmp    c00033e3 <dir_sdi+0x8d>
c00033a7:	89 c7                	mov    edi,eax
c00033a9:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00033ad:	c1 e1 09             	shl    ecx,0x9
c00033b0:	39 cb                	cmp    ebx,ecx
c00033b2:	72 26                	jb     c00033da <dir_sdi+0x84>
c00033b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00033ba:	89 fa                	mov    edx,edi
c00033bc:	e8 90 fe ff ff       	call   c0003251 <get_fat.isra.2>
c00033c1:	83 f8 ff             	cmp    eax,0xffffffff
c00033c4:	89 c7                	mov    edi,eax
c00033c6:	74 43                	je     c000340b <dir_sdi+0xb5>
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 a3                	jbe    c0003370 <dir_sdi+0x1a>
c00033cd:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00033d0:	76 9e                	jbe    c0003370 <dir_sdi+0x1a>
c00033d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d6:	29 cb                	sub    ebx,ecx
c00033d8:	eb d6                	jmp    c00033b0 <dir_sdi+0x5a>
c00033da:	89 fa                	mov    edx,edi
c00033dc:	89 e8                	mov    eax,ebp
c00033de:	e8 82 ec ff ff       	call   c0002065 <clst2sect>
c00033e3:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033e6:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00033e9:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ec:	85 d2                	test   edx,edx
c00033ee:	74 80                	je     c0003370 <dir_sdi+0x1a>
c00033f0:	89 d8                	mov    eax,ebx
c00033f2:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033f8:	c1 e8 09             	shr    eax,0x9
c00033fb:	01 d0                	add    eax,edx
c00033fd:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003400:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c0003404:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003407:	31 c0                	xor    eax,eax
c0003409:	eb 05                	jmp    c0003410 <dir_sdi+0xba>
c000340b:	b8 01 00 00 00       	mov    eax,0x1
c0003410:	83 c4 1c             	add    esp,0x1c
c0003413:	5b                   	pop    ebx
c0003414:	5e                   	pop    esi
c0003415:	5f                   	pop    edi
c0003416:	5d                   	pop    ebp
c0003417:	c3                   	ret    
c0003418:	b8 02 00 00 00       	mov    eax,0x2
c000341d:	c3                   	ret    

c000341e <create_chain>:
c000341e:	55                   	push   ebp
c000341f:	89 c5                	mov    ebp,eax
c0003421:	57                   	push   edi
c0003422:	89 d7                	mov    edi,edx
c0003424:	56                   	push   esi
c0003425:	53                   	push   ebx
c0003426:	83 ec 1c             	sub    esp,0x1c
c0003429:	85 d2                	test   edx,edx
c000342b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000342d:	75 0e                	jne    c000343d <create_chain+0x1f>
c000342f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003432:	85 c9                	test   ecx,ecx
c0003434:	74 32                	je     c0003468 <create_chain+0x4a>
c0003436:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0003439:	77 32                	ja     c000346d <create_chain+0x4f>
c000343b:	eb 2b                	jmp    c0003468 <create_chain+0x4a>
c000343d:	89 d8                	mov    eax,ebx
c000343f:	e8 0d fe ff ff       	call   c0003251 <get_fat.isra.2>
c0003444:	83 f8 01             	cmp    eax,0x1
c0003447:	77 0a                	ja     c0003453 <create_chain+0x35>
c0003449:	b8 01 00 00 00       	mov    eax,0x1
c000344e:	e9 fd 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003453:	83 f8 ff             	cmp    eax,0xffffffff
c0003456:	0f 84 f1 00 00 00    	je     c000354d <create_chain+0x12f>
c000345c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000345f:	89 f9                	mov    ecx,edi
c0003461:	76 0a                	jbe    c000346d <create_chain+0x4f>
c0003463:	e9 e8 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003468:	b9 01 00 00 00       	mov    ecx,0x1
c000346d:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003471:	75 07                	jne    c000347a <create_chain+0x5c>
c0003473:	31 c0                	xor    eax,eax
c0003475:	e9 d6 00 00 00       	jmp    c0003550 <create_chain+0x132>
c000347a:	39 f9                	cmp    ecx,edi
c000347c:	75 49                	jne    c00034c7 <create_chain+0xa9>
c000347e:	8d 71 01             	lea    esi,[ecx+0x1]
c0003481:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003484:	77 05                	ja     c000348b <create_chain+0x6d>
c0003486:	be 02 00 00 00       	mov    esi,0x2
c000348b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000348f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003492:	89 f2                	mov    edx,esi
c0003494:	e8 b8 fd ff ff       	call   c0003251 <get_fat.isra.2>
c0003499:	83 f8 01             	cmp    eax,0x1
c000349c:	0f 84 ae 00 00 00    	je     c0003550 <create_chain+0x132>
c00034a2:	83 f8 ff             	cmp    eax,0xffffffff
c00034a5:	0f 84 a5 00 00 00    	je     c0003550 <create_chain+0x132>
c00034ab:	85 c0                	test   eax,eax
c00034ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034b1:	74 10                	je     c00034c3 <create_chain+0xa5>
c00034b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00034b6:	83 f8 01             	cmp    eax,0x1
c00034b9:	76 0c                	jbe    c00034c7 <create_chain+0xa9>
c00034bb:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c00034be:	0f 47 c8             	cmova  ecx,eax
c00034c1:	eb 04                	jmp    c00034c7 <create_chain+0xa9>
c00034c3:	85 f6                	test   esi,esi
c00034c5:	75 3b                	jne    c0003502 <create_chain+0xe4>
c00034c7:	89 ce                	mov    esi,ecx
c00034c9:	46                   	inc    esi
c00034ca:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00034cd:	77 0a                	ja     c00034d9 <create_chain+0xbb>
c00034cf:	83 f9 01             	cmp    ecx,0x1
c00034d2:	76 9f                	jbe    c0003473 <create_chain+0x55>
c00034d4:	be 02 00 00 00       	mov    esi,0x2
c00034d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00034dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034e0:	89 f2                	mov    edx,esi
c00034e2:	e8 6a fd ff ff       	call   c0003251 <get_fat.isra.2>
c00034e7:	85 c0                	test   eax,eax
c00034e9:	74 17                	je     c0003502 <create_chain+0xe4>
c00034eb:	83 f8 01             	cmp    eax,0x1
c00034ee:	74 60                	je     c0003550 <create_chain+0x132>
c00034f0:	83 f8 ff             	cmp    eax,0xffffffff
c00034f3:	74 5b                	je     c0003550 <create_chain+0x132>
c00034f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034f9:	39 ce                	cmp    esi,ecx
c00034fb:	75 cc                	jne    c00034c9 <create_chain+0xab>
c00034fd:	e9 71 ff ff ff       	jmp    c0003473 <create_chain+0x55>
c0003502:	83 c9 ff             	or     ecx,0xffffffff
c0003505:	89 f2                	mov    edx,esi
c0003507:	89 d8                	mov    eax,ebx
c0003509:	e8 c0 f2 ff ff       	call   c00027ce <put_fat>
c000350e:	85 c0                	test   eax,eax
c0003510:	75 0f                	jne    c0003521 <create_chain+0x103>
c0003512:	85 ff                	test   edi,edi
c0003514:	74 0b                	je     c0003521 <create_chain+0x103>
c0003516:	89 f1                	mov    ecx,esi
c0003518:	89 fa                	mov    edx,edi
c000351a:	89 d8                	mov    eax,ebx
c000351c:	e8 ad f2 ff ff       	call   c00027ce <put_fat>
c0003521:	85 c0                	test   eax,eax
c0003523:	75 21                	jne    c0003546 <create_chain+0x128>
c0003525:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003528:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000352b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000352e:	8d 57 fe             	lea    edx,[edi-0x2]
c0003531:	39 d0                	cmp    eax,edx
c0003533:	77 04                	ja     c0003539 <create_chain+0x11b>
c0003535:	48                   	dec    eax
c0003536:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003539:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000353c:	83 c8 01             	or     eax,0x1
c000353f:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003542:	89 f0                	mov    eax,esi
c0003544:	eb 0a                	jmp    c0003550 <create_chain+0x132>
c0003546:	48                   	dec    eax
c0003547:	0f 85 fc fe ff ff    	jne    c0003449 <create_chain+0x2b>
c000354d:	83 c8 ff             	or     eax,0xffffffff
c0003550:	83 c4 1c             	add    esp,0x1c
c0003553:	5b                   	pop    ebx
c0003554:	5e                   	pop    esi
c0003555:	5f                   	pop    edi
c0003556:	5d                   	pop    ebp
c0003557:	c3                   	ret    

c0003558 <remove_chain>:
c0003558:	55                   	push   ebp
c0003559:	57                   	push   edi
c000355a:	56                   	push   esi
c000355b:	89 d6                	mov    esi,edx
c000355d:	53                   	push   ebx
c000355e:	83 ec 0c             	sub    esp,0xc
c0003561:	83 fa 01             	cmp    edx,0x1
c0003564:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003566:	76 6a                	jbe    c00035d2 <remove_chain+0x7a>
c0003568:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000356b:	76 65                	jbe    c00035d2 <remove_chain+0x7a>
c000356d:	85 c9                	test   ecx,ecx
c000356f:	89 c5                	mov    ebp,eax
c0003571:	89 ca                	mov    edx,ecx
c0003573:	74 0e                	je     c0003583 <remove_chain+0x2b>
c0003575:	83 c9 ff             	or     ecx,0xffffffff
c0003578:	89 d8                	mov    eax,ebx
c000357a:	e8 4f f2 ff ff       	call   c00027ce <put_fat>
c000357f:	85 c0                	test   eax,eax
c0003581:	75 5b                	jne    c00035de <remove_chain+0x86>
c0003583:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003586:	89 f2                	mov    edx,esi
c0003588:	e8 c4 fc ff ff       	call   c0003251 <get_fat.isra.2>
c000358d:	85 c0                	test   eax,eax
c000358f:	89 c7                	mov    edi,eax
c0003591:	75 04                	jne    c0003597 <remove_chain+0x3f>
c0003593:	31 c0                	xor    eax,eax
c0003595:	eb 47                	jmp    c00035de <remove_chain+0x86>
c0003597:	83 f8 01             	cmp    eax,0x1
c000359a:	74 36                	je     c00035d2 <remove_chain+0x7a>
c000359c:	83 f8 ff             	cmp    eax,0xffffffff
c000359f:	74 38                	je     c00035d9 <remove_chain+0x81>
c00035a1:	31 c9                	xor    ecx,ecx
c00035a3:	89 f2                	mov    edx,esi
c00035a5:	89 d8                	mov    eax,ebx
c00035a7:	e8 22 f2 ff ff       	call   c00027ce <put_fat>
c00035ac:	85 c0                	test   eax,eax
c00035ae:	75 2e                	jne    c00035de <remove_chain+0x86>
c00035b0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00035b3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00035b6:	8d 4a fe             	lea    ecx,[edx-0x2]
c00035b9:	39 c8                	cmp    eax,ecx
c00035bb:	73 0d                	jae    c00035ca <remove_chain+0x72>
c00035bd:	40                   	inc    eax
c00035be:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00035c1:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00035c4:	83 c8 01             	or     eax,0x1
c00035c7:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00035ca:	39 fa                	cmp    edx,edi
c00035cc:	89 fe                	mov    esi,edi
c00035ce:	77 b3                	ja     c0003583 <remove_chain+0x2b>
c00035d0:	eb c1                	jmp    c0003593 <remove_chain+0x3b>
c00035d2:	b8 02 00 00 00       	mov    eax,0x2
c00035d7:	eb 05                	jmp    c00035de <remove_chain+0x86>
c00035d9:	b8 01 00 00 00       	mov    eax,0x1
c00035de:	83 c4 0c             	add    esp,0xc
c00035e1:	5b                   	pop    ebx
c00035e2:	5e                   	pop    esi
c00035e3:	5f                   	pop    edi
c00035e4:	5d                   	pop    ebp
c00035e5:	c3                   	ret    

c00035e6 <dir_next>:
c00035e6:	55                   	push   ebp
c00035e7:	57                   	push   edi
c00035e8:	56                   	push   esi
c00035e9:	53                   	push   ebx
c00035ea:	83 ec 1c             	sub    esp,0x1c
c00035ed:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035f0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035f2:	83 c7 20             	add    edi,0x20
c00035f5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035fb:	76 07                	jbe    c0003604 <dir_next+0x1e>
c00035fd:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003604:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c0003607:	b9 04 00 00 00       	mov    ecx,0x4
c000360c:	85 f6                	test   esi,esi
c000360e:	0f 84 cd 00 00 00    	je     c00036e1 <dir_next+0xfb>
c0003614:	89 c3                	mov    ebx,eax
c0003616:	89 f8                	mov    eax,edi
c0003618:	25 ff 01 00 00       	and    eax,0x1ff
c000361d:	89 d1                	mov    ecx,edx
c000361f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003623:	0f 85 a8 00 00 00    	jne    c00036d1 <dir_next+0xeb>
c0003629:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000362c:	46                   	inc    esi
c000362d:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003630:	85 d2                	test   edx,edx
c0003632:	75 22                	jne    c0003656 <dir_next+0x70>
c0003634:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003638:	89 fa                	mov    edx,edi
c000363a:	c1 ea 05             	shr    edx,0x5
c000363d:	39 c2                	cmp    edx,eax
c000363f:	0f 82 8c 00 00 00    	jb     c00036d1 <dir_next+0xeb>
c0003645:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000364c:	b9 04 00 00 00       	mov    ecx,0x4
c0003651:	e9 8b 00 00 00       	jmp    c00036e1 <dir_next+0xfb>
c0003656:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000365a:	89 fe                	mov    esi,edi
c000365c:	c1 ee 09             	shr    esi,0x9
c000365f:	48                   	dec    eax
c0003660:	85 f0                	test   eax,esi
c0003662:	75 6d                	jne    c00036d1 <dir_next+0xeb>
c0003664:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003668:	89 e8                	mov    eax,ebp
c000366a:	e8 e2 fb ff ff       	call   c0003251 <get_fat.isra.2>
c000366f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003673:	83 f8 01             	cmp    eax,0x1
c0003676:	89 c6                	mov    esi,eax
c0003678:	77 07                	ja     c0003681 <dir_next+0x9b>
c000367a:	b9 02 00 00 00       	mov    ecx,0x2
c000367f:	eb 60                	jmp    c00036e1 <dir_next+0xfb>
c0003681:	83 f8 ff             	cmp    eax,0xffffffff
c0003684:	75 07                	jne    c000368d <dir_next+0xa7>
c0003686:	b9 01 00 00 00       	mov    ecx,0x1
c000368b:	eb 54                	jmp    c00036e1 <dir_next+0xfb>
c000368d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003690:	77 30                	ja     c00036c2 <dir_next+0xdc>
c0003692:	85 c9                	test   ecx,ecx
c0003694:	74 af                	je     c0003645 <dir_next+0x5f>
c0003696:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003699:	89 d8                	mov    eax,ebx
c000369b:	e8 7e fd ff ff       	call   c000341e <create_chain>
c00036a0:	b9 07 00 00 00       	mov    ecx,0x7
c00036a5:	85 c0                	test   eax,eax
c00036a7:	89 c6                	mov    esi,eax
c00036a9:	74 36                	je     c00036e1 <dir_next+0xfb>
c00036ab:	83 f8 01             	cmp    eax,0x1
c00036ae:	74 ca                	je     c000367a <dir_next+0x94>
c00036b0:	83 f8 ff             	cmp    eax,0xffffffff
c00036b3:	74 d1                	je     c0003686 <dir_next+0xa0>
c00036b5:	89 c2                	mov    edx,eax
c00036b7:	89 e8                	mov    eax,ebp
c00036b9:	e8 67 f2 ff ff       	call   c0002925 <dir_clear>
c00036be:	85 c0                	test   eax,eax
c00036c0:	75 c4                	jne    c0003686 <dir_next+0xa0>
c00036c2:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00036c5:	89 f2                	mov    edx,esi
c00036c7:	89 e8                	mov    eax,ebp
c00036c9:	e8 97 e9 ff ff       	call   c0002065 <clst2sect>
c00036ce:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00036d1:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00036d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00036d8:	31 c9                	xor    ecx,ecx
c00036da:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036de:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036e1:	83 c4 1c             	add    esp,0x1c
c00036e4:	89 c8                	mov    eax,ecx
c00036e6:	5b                   	pop    ebx
c00036e7:	5e                   	pop    esi
c00036e8:	5f                   	pop    edi
c00036e9:	5d                   	pop    ebp
c00036ea:	c3                   	ret    

c00036eb <dir_alloc>:
c00036eb:	55                   	push   ebp
c00036ec:	89 c5                	mov    ebp,eax
c00036ee:	57                   	push   edi
c00036ef:	89 d7                	mov    edi,edx
c00036f1:	56                   	push   esi
c00036f2:	31 d2                	xor    edx,edx
c00036f4:	53                   	push   ebx
c00036f5:	83 ec 0c             	sub    esp,0xc
c00036f8:	8b 30                	mov    esi,DWORD PTR [eax]
c00036fa:	e8 57 fc ff ff       	call   c0003356 <dir_sdi>
c00036ff:	85 c0                	test   eax,eax
c0003701:	75 3b                	jne    c000373e <dir_alloc+0x53>
c0003703:	31 db                	xor    ebx,ebx
c0003705:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003708:	89 f0                	mov    eax,esi
c000370a:	e8 65 ec ff ff       	call   c0002374 <move_window>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 2b                	jne    c000373e <dir_alloc+0x53>
c0003713:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003716:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003719:	81 fa e5 00 00 00    	cmp    edx,0xe5
c000371f:	74 04                	je     c0003725 <dir_alloc+0x3a>
c0003721:	85 d2                	test   edx,edx
c0003723:	75 07                	jne    c000372c <dir_alloc+0x41>
c0003725:	43                   	inc    ebx
c0003726:	39 fb                	cmp    ebx,edi
c0003728:	75 04                	jne    c000372e <dir_alloc+0x43>
c000372a:	eb 1c                	jmp    c0003748 <dir_alloc+0x5d>
c000372c:	31 db                	xor    ebx,ebx
c000372e:	ba 01 00 00 00       	mov    edx,0x1
c0003733:	89 e8                	mov    eax,ebp
c0003735:	e8 ac fe ff ff       	call   c00035e6 <dir_next>
c000373a:	85 c0                	test   eax,eax
c000373c:	74 c7                	je     c0003705 <dir_alloc+0x1a>
c000373e:	83 f8 04             	cmp    eax,0x4
c0003741:	75 05                	jne    c0003748 <dir_alloc+0x5d>
c0003743:	b8 07 00 00 00       	mov    eax,0x7
c0003748:	83 c4 0c             	add    esp,0xc
c000374b:	5b                   	pop    ebx
c000374c:	5e                   	pop    esi
c000374d:	5f                   	pop    edi
c000374e:	5d                   	pop    ebp
c000374f:	c3                   	ret    

c0003750 <dir_read>:
c0003750:	55                   	push   ebp
c0003751:	57                   	push   edi
c0003752:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003757:	56                   	push   esi
c0003758:	be 04 00 00 00       	mov    esi,0x4
c000375d:	53                   	push   ebx
c000375e:	89 c3                	mov    ebx,eax
c0003760:	83 ec 1c             	sub    esp,0x1c
c0003763:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003767:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003769:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000376e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003771:	85 d2                	test   edx,edx
c0003773:	0f 84 e3 00 00 00    	je     c000385c <dir_read+0x10c>
c0003779:	89 e8                	mov    eax,ebp
c000377b:	e8 f4 eb ff ff       	call   c0002374 <move_window>
c0003780:	85 c0                	test   eax,eax
c0003782:	89 c6                	mov    esi,eax
c0003784:	0f 85 dd 00 00 00    	jne    c0003867 <dir_read+0x117>
c000378a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000378d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003790:	88 04 24             	mov    BYTE PTR [esp],al
c0003793:	85 c0                	test   eax,eax
c0003795:	0f 84 c7 00 00 00    	je     c0003862 <dir_read+0x112>
c000379b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000379e:	83 e1 3f             	and    ecx,0x3f
c00037a1:	3d e5 00 00 00       	cmp    eax,0xe5
c00037a6:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c00037a9:	0f 84 93 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037af:	83 f8 2e             	cmp    eax,0x2e
c00037b2:	0f 84 8a 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037b8:	0f b6 c9             	movzx  ecx,cl
c00037bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00037bf:	83 e1 df             	and    ecx,0xffffffdf
c00037c2:	83 f9 08             	cmp    ecx,0x8
c00037c5:	0f 94 c1             	sete   cl
c00037c8:	0f b6 c9             	movzx  ecx,cl
c00037cb:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00037cf:	75 71                	jne    c0003842 <dir_read+0xf2>
c00037d1:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00037d6:	75 4a                	jne    c0003822 <dir_read+0xd2>
c00037d8:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037dc:	74 16                	je     c00037f4 <dir_read+0xa4>
c00037de:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037e1:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037e8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037ef:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037f2:	eb 0e                	jmp    c0003802 <dir_read+0xb2>
c00037f4:	89 f9                	mov    ecx,edi
c00037f6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037fb:	0f b6 c9             	movzx  ecx,cl
c00037fe:	39 c1                	cmp    ecx,eax
c0003800:	75 45                	jne    c0003847 <dir_read+0xf7>
c0003802:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003806:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380b:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c000380e:	75 37                	jne    c0003847 <dir_read+0xf7>
c0003810:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0003813:	e8 6a e8 ff ff       	call   c0002082 <pick_lfn>
c0003818:	85 c0                	test   eax,eax
c000381a:	74 2b                	je     c0003847 <dir_read+0xf7>
c000381c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000381f:	4f                   	dec    edi
c0003820:	eb 25                	jmp    c0003847 <dir_read+0xf7>
c0003822:	89 f8                	mov    eax,edi
c0003824:	84 c0                	test   al,al
c0003826:	75 11                	jne    c0003839 <dir_read+0xe9>
c0003828:	89 d0                	mov    eax,edx
c000382a:	e8 30 ea ff ff       	call   c000225f <sum_sfn>
c000382f:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003833:	75 04                	jne    c0003839 <dir_read+0xe9>
c0003835:	31 f6                	xor    esi,esi
c0003837:	eb 35                	jmp    c000386e <dir_read+0x11e>
c0003839:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003840:	eb 2c                	jmp    c000386e <dir_read+0x11e>
c0003842:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003847:	31 d2                	xor    edx,edx
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 96 fd ff ff       	call   c00035e6 <dir_next>
c0003850:	85 c0                	test   eax,eax
c0003852:	89 c6                	mov    esi,eax
c0003854:	0f 84 14 ff ff ff    	je     c000376e <dir_read+0x1e>
c000385a:	eb 0b                	jmp    c0003867 <dir_read+0x117>
c000385c:	85 f6                	test   esi,esi
c000385e:	74 d5                	je     c0003835 <dir_read+0xe5>
c0003860:	eb 05                	jmp    c0003867 <dir_read+0x117>
c0003862:	be 04 00 00 00       	mov    esi,0x4
c0003867:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000386e:	83 c4 1c             	add    esp,0x1c
c0003871:	89 f0                	mov    eax,esi
c0003873:	5b                   	pop    ebx
c0003874:	5e                   	pop    esi
c0003875:	5f                   	pop    edi
c0003876:	5d                   	pop    ebp
c0003877:	c3                   	ret    

c0003878 <dir_remove>:
c0003878:	57                   	push   edi
c0003879:	56                   	push   esi
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003880:	8b 30                	mov    esi,DWORD PTR [eax]
c0003882:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003885:	83 fa ff             	cmp    edx,0xffffffff
c0003888:	74 09                	je     c0003893 <dir_remove+0x1b>
c000388a:	e8 c7 fa ff ff       	call   c0003356 <dir_sdi>
c000388f:	85 c0                	test   eax,eax
c0003891:	75 34                	jne    c00038c7 <dir_remove+0x4f>
c0003893:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003896:	89 f0                	mov    eax,esi
c0003898:	e8 d7 ea ff ff       	call   c0002374 <move_window>
c000389d:	85 c0                	test   eax,eax
c000389f:	75 1c                	jne    c00038bd <dir_remove+0x45>
c00038a1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00038a4:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00038a7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00038ab:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c00038ae:	73 17                	jae    c00038c7 <dir_remove+0x4f>
c00038b0:	31 d2                	xor    edx,edx
c00038b2:	89 d8                	mov    eax,ebx
c00038b4:	e8 2d fd ff ff       	call   c00035e6 <dir_next>
c00038b9:	85 c0                	test   eax,eax
c00038bb:	74 d6                	je     c0003893 <dir_remove+0x1b>
c00038bd:	83 f8 04             	cmp    eax,0x4
c00038c0:	75 05                	jne    c00038c7 <dir_remove+0x4f>
c00038c2:	b8 02 00 00 00       	mov    eax,0x2
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	c3                   	ret    

c00038cb <dir_find>:
c00038cb:	55                   	push   ebp
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	57                   	push   edi
c00038cf:	56                   	push   esi
c00038d0:	53                   	push   ebx
c00038d1:	89 c3                	mov    ebx,eax
c00038d3:	83 ec 1c             	sub    esp,0x1c
c00038d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00038d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038dc:	89 d8                	mov    eax,ebx
c00038de:	e8 73 fa ff ff       	call   c0003356 <dir_sdi>
c00038e3:	85 c0                	test   eax,eax
c00038e5:	89 c6                	mov    esi,eax
c00038e7:	0f 85 22 01 00 00    	jne    c0003a0f <dir_find+0x144>
c00038ed:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038f4:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00038f9:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038fe:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003905:	e8 6a ea ff ff       	call   c0002374 <move_window>
c000390a:	85 c0                	test   eax,eax
c000390c:	89 c6                	mov    esi,eax
c000390e:	0f 85 fb 00 00 00    	jne    c0003a0f <dir_find+0x144>
c0003914:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003917:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c000391a:	85 d2                	test   edx,edx
c000391c:	89 d1                	mov    ecx,edx
c000391e:	0f 84 e6 00 00 00    	je     c0003a0a <dir_find+0x13f>
c0003924:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003927:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000392b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000392f:	83 e0 3f             	and    eax,0x3f
c0003932:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003938:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000393b:	0f 84 a8 00 00 00    	je     c00039e9 <dir_find+0x11e>
c0003941:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003946:	0f b6 c0             	movzx  eax,al
c0003949:	74 0b                	je     c0003956 <dir_find+0x8b>
c000394b:	83 f8 0f             	cmp    eax,0xf
c000394e:	0f 85 95 00 00 00    	jne    c00039e9 <dir_find+0x11e>
c0003954:	eb 05                	jmp    c000395b <dir_find+0x90>
c0003956:	83 f8 0f             	cmp    eax,0xf
c0003959:	75 62                	jne    c00039bd <dir_find+0xf2>
c000395b:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c000395f:	0f 85 90 00 00 00    	jne    c00039f5 <dir_find+0x12a>
c0003965:	f6 c1 40             	test   cl,0x40
c0003968:	74 15                	je     c000397f <dir_find+0xb4>
c000396a:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c000396d:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003973:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003977:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000397a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000397d:	eb 11                	jmp    c0003990 <dir_find+0xc5>
c000397f:	89 e8                	mov    eax,ebp
c0003981:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003986:	0f b6 d0             	movzx  edx,al
c0003989:	0f b6 c1             	movzx  eax,cl
c000398c:	39 c2                	cmp    edx,eax
c000398e:	75 65                	jne    c00039f5 <dir_find+0x12a>
c0003990:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003994:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003999:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c000399c:	75 57                	jne    c00039f5 <dir_find+0x12a>
c000399e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039a6:	89 fa                	mov    edx,edi
c00039a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039ab:	e8 2c f3 ff ff       	call   c0002cdc <cmp_lfn>
c00039b0:	85 c0                	test   eax,eax
c00039b2:	74 41                	je     c00039f5 <dir_find+0x12a>
c00039b4:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039b8:	8d 69 ff             	lea    ebp,[ecx-0x1]
c00039bb:	eb 38                	jmp    c00039f5 <dir_find+0x12a>
c00039bd:	89 e8                	mov    eax,ebp
c00039bf:	84 c0                	test   al,al
c00039c1:	75 0d                	jne    c00039d0 <dir_find+0x105>
c00039c3:	89 f8                	mov    eax,edi
c00039c5:	e8 95 e8 ff ff       	call   c000225f <sum_sfn>
c00039ca:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039ce:	74 3f                	je     c0003a0f <dir_find+0x144>
c00039d0:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c00039d4:	75 13                	jne    c00039e9 <dir_find+0x11e>
c00039d6:	8d 53 20             	lea    edx,[ebx+0x20]
c00039d9:	b9 0b 00 00 00       	mov    ecx,0xb
c00039de:	89 f8                	mov    eax,edi
c00039e0:	e8 75 e4 ff ff       	call   c0001e5a <mem_cmp>
c00039e5:	85 c0                	test   eax,eax
c00039e7:	74 26                	je     c0003a0f <dir_find+0x144>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00039f5:	31 d2                	xor    edx,edx
c00039f7:	89 d8                	mov    eax,ebx
c00039f9:	e8 e8 fb ff ff       	call   c00035e6 <dir_next>
c00039fe:	85 c0                	test   eax,eax
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	0f 84 f6 fe ff ff    	je     c00038fe <dir_find+0x33>
c0003a08:	eb 05                	jmp    c0003a0f <dir_find+0x144>
c0003a0a:	be 04 00 00 00       	mov    esi,0x4
c0003a0f:	83 c4 1c             	add    esp,0x1c
c0003a12:	89 f0                	mov    eax,esi
c0003a14:	5b                   	pop    ebx
c0003a15:	5e                   	pop    esi
c0003a16:	5f                   	pop    edi
c0003a17:	5d                   	pop    ebp
c0003a18:	c3                   	ret    

c0003a19 <follow_path>:
c0003a19:	56                   	push   esi
c0003a1a:	53                   	push   ebx
c0003a1b:	89 c3                	mov    ebx,eax
c0003a1d:	83 ec 14             	sub    esp,0x14
c0003a20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a24:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a2a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003a2d:	83 fa 2f             	cmp    edx,0x2f
c0003a30:	75 07                	jne    c0003a39 <follow_path+0x20>
c0003a32:	40                   	inc    eax
c0003a33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a37:	eb ed                	jmp    c0003a26 <follow_path+0xd>
c0003a39:	83 fa 5c             	cmp    edx,0x5c
c0003a3c:	74 f4                	je     c0003a32 <follow_path+0x19>
c0003a3e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a45:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a48:	77 3e                	ja     c0003a88 <follow_path+0x6f>
c0003a4a:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a4e:	31 d2                	xor    edx,edx
c0003a50:	89 d8                	mov    eax,ebx
c0003a52:	e8 ff f8 ff ff       	call   c0003356 <dir_sdi>
c0003a57:	eb 57                	jmp    c0003ab0 <follow_path+0x97>
c0003a59:	89 d8                	mov    eax,ebx
c0003a5b:	e8 6b fe ff ff       	call   c00038cb <dir_find>
c0003a60:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a63:	85 c0                	test   eax,eax
c0003a65:	75 32                	jne    c0003a99 <follow_path+0x80>
c0003a67:	80 e2 04             	and    dl,0x4
c0003a6a:	75 44                	jne    c0003ab0 <follow_path+0x97>
c0003a6c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a70:	74 39                	je     c0003aab <follow_path+0x92>
c0003a72:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a75:	25 ff 01 00 00       	and    eax,0x1ff
c0003a7a:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a7e:	8a 06                	mov    al,BYTE PTR [esi]
c0003a80:	e8 7b f7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003a85:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a88:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 8e ef ff ff       	call   c0002a21 <create_name>
c0003a93:	85 c0                	test   eax,eax
c0003a95:	74 c2                	je     c0003a59 <follow_path+0x40>
c0003a97:	eb 17                	jmp    c0003ab0 <follow_path+0x97>
c0003a99:	83 f8 04             	cmp    eax,0x4
c0003a9c:	75 12                	jne    c0003ab0 <follow_path+0x97>
c0003a9e:	80 e2 04             	and    dl,0x4
c0003aa1:	ba 05 00 00 00       	mov    edx,0x5
c0003aa6:	0f 44 c2             	cmove  eax,edx
c0003aa9:	eb 05                	jmp    c0003ab0 <follow_path+0x97>
c0003aab:	b8 05 00 00 00       	mov    eax,0x5
c0003ab0:	83 c4 14             	add    esp,0x14
c0003ab3:	5b                   	pop    ebx
c0003ab4:	5e                   	pop    esi
c0003ab5:	c3                   	ret    

c0003ab6 <dir_register>:
c0003ab6:	55                   	push   ebp
c0003ab7:	57                   	push   edi
c0003ab8:	56                   	push   esi
c0003ab9:	be 06 00 00 00       	mov    esi,0x6
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 2c             	sub    esp,0x2c
c0003ac2:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ac5:	80 e2 a0             	and    dl,0xa0
c0003ac8:	0f 85 66 01 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ace:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003ad6:	8b 38                	mov    edi,DWORD PTR [eax]
c0003ad8:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003adb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003adf:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003ae4:	74 06                	je     c0003aec <dir_register+0x36>
c0003ae6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aea:	eb ef                	jmp    c0003adb <dir_register+0x25>
c0003aec:	89 c3                	mov    ebx,eax
c0003aee:	b9 0c 00 00 00       	mov    ecx,0xc
c0003af3:	8d 40 20             	lea    eax,[eax+0x20]
c0003af6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003afa:	89 c2                	mov    edx,eax
c0003afc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003b00:	e8 36 e3 ff ff       	call   c0001e3b <mem_cpy>
c0003b05:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003b0a:	74 48                	je     c0003b54 <dir_register+0x9e>
c0003b0c:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003b10:	bd 01 00 00 00       	mov    ebp,0x1
c0003b15:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003b18:	55                   	push   ebp
c0003b19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003b21:	e8 77 e6 ff ff       	call   c000219d <gen_numname>
c0003b26:	58                   	pop    eax
c0003b27:	89 d8                	mov    eax,ebx
c0003b29:	e8 9d fd ff ff       	call   c00038cb <dir_find>
c0003b2e:	85 c0                	test   eax,eax
c0003b30:	89 c6                	mov    esi,eax
c0003b32:	75 10                	jne    c0003b44 <dir_register+0x8e>
c0003b34:	45                   	inc    ebp
c0003b35:	83 fd 64             	cmp    ebp,0x64
c0003b38:	75 db                	jne    c0003b15 <dir_register+0x5f>
c0003b3a:	be 07 00 00 00       	mov    esi,0x7
c0003b3f:	e9 f0 00 00 00       	jmp    c0003c34 <dir_register+0x17e>
c0003b44:	83 f8 04             	cmp    eax,0x4
c0003b47:	0f 85 e7 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b4d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b51:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b54:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b59:	bd 01 00 00 00       	mov    ebp,0x1
c0003b5e:	74 13                	je     c0003b73 <dir_register+0xbd>
c0003b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b64:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b69:	31 d2                	xor    edx,edx
c0003b6b:	83 c0 0c             	add    eax,0xc
c0003b6e:	f7 f1                	div    ecx
c0003b70:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b73:	89 ea                	mov    edx,ebp
c0003b75:	89 d8                	mov    eax,ebx
c0003b77:	e8 6f fb ff ff       	call   c00036eb <dir_alloc>
c0003b7c:	85 c0                	test   eax,eax
c0003b7e:	89 c6                	mov    esi,eax
c0003b80:	0f 85 ae 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b86:	4d                   	dec    ebp
c0003b87:	74 6b                	je     c0003bf4 <dir_register+0x13e>
c0003b89:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b8c:	89 e8                	mov    eax,ebp
c0003b8e:	c1 e0 05             	shl    eax,0x5
c0003b91:	29 c2                	sub    edx,eax
c0003b93:	89 d8                	mov    eax,ebx
c0003b95:	e8 bc f7 ff ff       	call   c0003356 <dir_sdi>
c0003b9a:	85 c0                	test   eax,eax
c0003b9c:	89 c6                	mov    esi,eax
c0003b9e:	0f 85 90 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ba8:	e8 b2 e6 ff ff       	call   c000225f <sum_sfn>
c0003bad:	0f b6 c0             	movzx  eax,al
c0003bb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bb4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb7:	89 f8                	mov    eax,edi
c0003bb9:	e8 b6 e7 ff ff       	call   c0002374 <move_window>
c0003bbe:	85 c0                	test   eax,eax
c0003bc0:	89 c6                	mov    esi,eax
c0003bc2:	75 70                	jne    c0003c34 <dir_register+0x17e>
c0003bc4:	83 ec 0c             	sub    esp,0xc
c0003bc7:	89 e8                	mov    eax,ebp
c0003bc9:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003bcc:	0f b6 c8             	movzx  ecx,al
c0003bcf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003bd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003bd6:	e8 27 e5 ff ff       	call   c0002102 <put_lfn>
c0003bdb:	31 d2                	xor    edx,edx
c0003bdd:	89 d8                	mov    eax,ebx
c0003bdf:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003be3:	e8 fe f9 ff ff       	call   c00035e6 <dir_next>
c0003be8:	83 c4 10             	add    esp,0x10
c0003beb:	85 c0                	test   eax,eax
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	75 43                	jne    c0003c34 <dir_register+0x17e>
c0003bf1:	4d                   	dec    ebp
c0003bf2:	75 c0                	jne    c0003bb4 <dir_register+0xfe>
c0003bf4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bf7:	89 f8                	mov    eax,edi
c0003bf9:	e8 76 e7 ff ff       	call   c0002374 <move_window>
c0003bfe:	85 c0                	test   eax,eax
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	75 30                	jne    c0003c34 <dir_register+0x17e>
c0003c04:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c07:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0c:	31 d2                	xor    edx,edx
c0003c0e:	e8 3d e2 ff ff       	call   c0001e50 <mem_set>
c0003c13:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0003c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003c1f:	e8 17 e2 ff ff       	call   c0001e3b <mem_cpy>
c0003c24:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003c27:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003c2a:	83 e0 18             	and    eax,0x18
c0003c2d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003c30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003c34:	83 c4 2c             	add    esp,0x2c
c0003c37:	89 f0                	mov    eax,esi
c0003c39:	5b                   	pop    ebx
c0003c3a:	5e                   	pop    esi
c0003c3b:	5f                   	pop    edi
c0003c3c:	5d                   	pop    ebp
c0003c3d:	c3                   	ret    

c0003c3e <f_mount>:
c0003c3e:	53                   	push   ebx
c0003c3f:	83 ec 18             	sub    esp,0x18
c0003c42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c46:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c4e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c52:	e8 28 e6 ff ff       	call   c000227f <get_ldnumber>
c0003c57:	89 c2                	mov    edx,eax
c0003c59:	b8 0b 00 00 00       	mov    eax,0xb
c0003c5e:	85 d2                	test   edx,edx
c0003c60:	78 39                	js     c0003c9b <f_mount+0x5d>
c0003c62:	8b 04 95 a0 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9b60]
c0003c69:	85 c0                	test   eax,eax
c0003c6b:	74 03                	je     c0003c70 <f_mount+0x32>
c0003c6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 03                	je     c0003c7b <f_mount+0x3d>
c0003c78:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c7f:	89 04 95 a0 64 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9b60],eax
c0003c86:	31 c0                	xor    eax,eax
c0003c88:	84 db                	test   bl,bl
c0003c8a:	74 0f                	je     c0003c9b <f_mount+0x5d>
c0003c8c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c90:	31 c9                	xor    ecx,ecx
c0003c92:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c96:	e8 36 e8 ff ff       	call   c00024d1 <mount_volume>
c0003c9b:	83 c4 18             	add    esp,0x18
c0003c9e:	5b                   	pop    ebx
c0003c9f:	c3                   	ret    

c0003ca0 <f_open>:
c0003ca0:	55                   	push   ebp
c0003ca1:	b8 09 00 00 00       	mov    eax,0x9
c0003ca6:	57                   	push   edi
c0003ca7:	56                   	push   esi
c0003ca8:	53                   	push   ebx
c0003ca9:	83 ec 5c             	sub    esp,0x5c
c0003cac:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003cb0:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003cb4:	85 db                	test   ebx,ebx
c0003cb6:	0f 84 9f 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003cbc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003cc0:	89 fd                	mov    ebp,edi
c0003cc2:	83 e5 3f             	and    ebp,0x3f
c0003cc5:	89 e8                	mov    eax,ebp
c0003cc7:	89 ee                	mov    esi,ebp
c0003cc9:	0f b6 c8             	movzx  ecx,al
c0003ccc:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003cd0:	e8 fc e7 ff ff       	call   c00024d1 <mount_volume>
c0003cd5:	85 c0                	test   eax,eax
c0003cd7:	0f 85 78 02 00 00    	jne    c0003f55 <f_open+0x2b5>
c0003cdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ce1:	83 ec 0c             	sub    esp,0xc
c0003ce4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ce8:	68 00 02 00 00       	push   0x200
c0003ced:	e8 62 1f 00 00       	call   c0005c54 <ff_memalloc>
c0003cf2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cf6:	83 c4 10             	add    esp,0x10
c0003cf9:	b8 11 00 00 00       	mov    eax,0x11
c0003cfe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003d03:	0f 84 52 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003d09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003d11:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003d15:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003d18:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d1c:	e8 f8 fc ff ff       	call   c0003a19 <follow_path>
c0003d21:	85 c0                	test   eax,eax
c0003d23:	75 0d                	jne    c0003d32 <f_open+0x92>
c0003d25:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003d2a:	ba 06 00 00 00       	mov    edx,0x6
c0003d2f:	0f 45 c2             	cmovne eax,edx
c0003d32:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003d38:	0f 84 d5 00 00 00    	je     c0003e13 <f_open+0x173>
c0003d3e:	85 c0                	test   eax,eax
c0003d40:	74 21                	je     c0003d63 <f_open+0xc3>
c0003d42:	83 f8 04             	cmp    eax,0x4
c0003d45:	0f 85 ef 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d4b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d4f:	e8 62 fd ff ff       	call   c0003ab6 <dir_register>
c0003d54:	85 c0                	test   eax,eax
c0003d56:	0f 85 de 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d5c:	83 cd 08             	or     ebp,0x8
c0003d5f:	89 ee                	mov    esi,ebp
c0003d61:	eb 2c                	jmp    c0003d8f <f_open+0xef>
c0003d63:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d67:	b8 07 00 00 00       	mov    eax,0x7
c0003d6c:	80 e2 11             	and    dl,0x11
c0003d6f:	0f 85 c5 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d75:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d7b:	b8 08 00 00 00       	mov    eax,0x8
c0003d80:	0f 85 b4 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d86:	83 e7 08             	and    edi,0x8
c0003d89:	0f 84 b1 00 00 00    	je     c0003e40 <f_open+0x1a0>
c0003d8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d93:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d97:	8a 00                	mov    al,BYTE PTR [eax]
c0003d99:	89 ea                	mov    edx,ebp
c0003d9b:	e8 60 f4 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003da0:	ba 00 00 21 50       	mov    edx,0x50210000
c0003da5:	89 c7                	mov    edi,eax
c0003da7:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003daa:	e8 89 e0 ff ff       	call   c0001e38 <st_dword>
c0003daf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003db3:	31 c9                	xor    ecx,ecx
c0003db5:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003db9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003dc1:	e8 63 f4 ff ff       	call   c0003229 <st_clust.isra.1>
c0003dc6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003dca:	31 d2                	xor    edx,edx
c0003dcc:	83 c0 1c             	add    eax,0x1c
c0003dcf:	e8 64 e0 ff ff       	call   c0001e38 <st_dword>
c0003dd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dd8:	85 ff                	test   edi,edi
c0003dda:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003dde:	74 60                	je     c0003e40 <f_open+0x1a0>
c0003de0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003de4:	31 c9                	xor    ecx,ecx
c0003de6:	89 fa                	mov    edx,edi
c0003de8:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003deb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003def:	e8 64 f7 ff ff       	call   c0003558 <remove_chain>
c0003df4:	85 c0                	test   eax,eax
c0003df6:	0f 85 3e 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e00:	89 ea                	mov    edx,ebp
c0003e02:	4f                   	dec    edi
c0003e03:	e8 6c e5 ff ff       	call   c0002374 <move_window>
c0003e08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003e0c:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003e0f:	85 c0                	test   eax,eax
c0003e11:	eb 27                	jmp    c0003e3a <f_open+0x19a>
c0003e13:	85 c0                	test   eax,eax
c0003e15:	0f 85 1f 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e1b:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003e1f:	b8 04 00 00 00       	mov    eax,0x4
c0003e24:	f6 c2 10             	test   dl,0x10
c0003e27:	0f 85 0d 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e2d:	83 e7 02             	and    edi,0x2
c0003e30:	74 0e                	je     c0003e40 <f_open+0x1a0>
c0003e32:	b8 07 00 00 00       	mov    eax,0x7
c0003e37:	80 e2 01             	and    dl,0x1
c0003e3a:	0f 85 fa 00 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e40:	f7 c6 08 00 00 00    	test   esi,0x8
c0003e46:	74 03                	je     c0003e4b <f_open+0x1ab>
c0003e48:	83 ce 40             	or     esi,0x40
c0003e4b:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e4f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e53:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e56:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e59:	89 fa                	mov    edx,edi
c0003e5b:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e5e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e61:	e8 9a f3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003e66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e69:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e6c:	e8 ab df ff ff       	call   c0001e1c <ld_dword>
c0003e71:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e74:	31 d2                	xor    edx,edx
c0003e76:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e78:	b9 00 02 00 00       	mov    ecx,0x200
c0003e7d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e80:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e84:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e88:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e8f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e96:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e9a:	89 f0                	mov    eax,esi
c0003e9c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e9f:	89 f8                	mov    eax,edi
c0003ea1:	e8 aa df ff ff       	call   c0001e50 <mem_set>
c0003ea6:	83 e6 20             	and    esi,0x20
c0003ea9:	75 07                	jne    c0003eb2 <f_open+0x212>
c0003eab:	31 c0                	xor    eax,eax
c0003ead:	e9 88 00 00 00       	jmp    c0003f3a <f_open+0x29a>
c0003eb2:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0003eb5:	85 f6                	test   esi,esi
c0003eb7:	74 f2                	je     c0003eab <f_open+0x20b>
c0003eb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003ebc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003ec3:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0003ec7:	31 c0                	xor    eax,eax
c0003ec9:	c1 e5 09             	shl    ebp,0x9
c0003ecc:	85 c0                	test   eax,eax
c0003ece:	75 23                	jne    c0003ef3 <f_open+0x253>
c0003ed0:	39 ee                	cmp    esi,ebp
c0003ed2:	76 1f                	jbe    c0003ef3 <f_open+0x253>
c0003ed4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ed6:	e8 76 f3 ff ff       	call   c0003251 <get_fat.isra.2>
c0003edb:	89 c2                	mov    edx,eax
c0003edd:	b8 02 00 00 00       	mov    eax,0x2
c0003ee2:	83 fa 01             	cmp    edx,0x1
c0003ee5:	76 08                	jbe    c0003eef <f_open+0x24f>
c0003ee7:	31 c0                	xor    eax,eax
c0003ee9:	83 fa ff             	cmp    edx,0xffffffff
c0003eec:	0f 94 c0             	sete   al
c0003eef:	29 ee                	sub    esi,ebp
c0003ef1:	eb d9                	jmp    c0003ecc <f_open+0x22c>
c0003ef3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	75 40                	jne    c0003f3a <f_open+0x29a>
c0003efa:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0003f00:	74 a9                	je     c0003eab <f_open+0x20b>
c0003f02:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003f06:	89 e8                	mov    eax,ebp
c0003f08:	e8 58 e1 ff ff       	call   c0002065 <clst2sect>
c0003f0d:	89 c2                	mov    edx,eax
c0003f0f:	b8 02 00 00 00       	mov    eax,0x2
c0003f14:	85 d2                	test   edx,edx
c0003f16:	74 22                	je     c0003f3a <f_open+0x29a>
c0003f18:	c1 ee 09             	shr    esi,0x9
c0003f1b:	8d 04 16             	lea    eax,[esi+edx*1]
c0003f1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003f21:	6a 01                	push   0x1
c0003f23:	50                   	push   eax
c0003f24:	57                   	push   edi
c0003f25:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0003f29:	50                   	push   eax
c0003f2a:	e8 95 de ff ff       	call   c0001dc4 <disk_read>
c0003f2f:	83 c4 10             	add    esp,0x10
c0003f32:	85 c0                	test   eax,eax
c0003f34:	0f 95 c0             	setne  al
c0003f37:	0f b6 c0             	movzx  eax,al
c0003f3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f3e:	83 ec 0c             	sub    esp,0xc
c0003f41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003f45:	e8 22 1d 00 00       	call   c0005c6c <ff_memfree>
c0003f4a:	83 c4 10             	add    esp,0x10
c0003f4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f51:	85 c0                	test   eax,eax
c0003f53:	74 06                	je     c0003f5b <f_open+0x2bb>
c0003f55:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f5b:	83 c4 5c             	add    esp,0x5c
c0003f5e:	5b                   	pop    ebx
c0003f5f:	5e                   	pop    esi
c0003f60:	5f                   	pop    edi
c0003f61:	5d                   	pop    ebp
c0003f62:	c3                   	ret    

c0003f63 <f_read>:
c0003f63:	55                   	push   ebp
c0003f64:	57                   	push   edi
c0003f65:	56                   	push   esi
c0003f66:	53                   	push   ebx
c0003f67:	83 ec 2c             	sub    esp,0x2c
c0003f6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f6e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f72:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f76:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0003f7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f80:	89 d8                	mov    eax,ebx
c0003f82:	e8 44 e3 ff ff       	call   c00022cb <validate>
c0003f87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f8b:	85 c0                	test   eax,eax
c0003f8d:	0f 85 a5 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003f93:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0003f97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f9b:	85 c0                	test   eax,eax
c0003f9d:	0f 85 95 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003fa3:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003fa7:	0f 84 83 01 00 00    	je     c0004130 <f_read+0x1cd>
c0003fad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003fb0:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003fb3:	39 f8                	cmp    eax,edi
c0003fb5:	0f 46 f8             	cmovbe edi,eax
c0003fb8:	85 ff                	test   edi,edi
c0003fba:	0f 84 78 01 00 00    	je     c0004138 <f_read+0x1d5>
c0003fc0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fc3:	a9 ff 01 00 00       	test   eax,0x1ff
c0003fc8:	0f 85 2b 01 00 00    	jne    c00040f9 <f_read+0x196>
c0003fce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fd2:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0003fd6:	89 c2                	mov    edx,eax
c0003fd8:	c1 ea 09             	shr    edx,0x9
c0003fdb:	4d                   	dec    ebp
c0003fdc:	21 d5                	and    ebp,edx
c0003fde:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0003fe2:	75 42                	jne    c0004026 <f_read+0xc3>
c0003fe4:	85 c0                	test   eax,eax
c0003fe6:	75 05                	jne    c0003fed <f_read+0x8a>
c0003fe8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003feb:	eb 0a                	jmp    c0003ff7 <f_read+0x94>
c0003fed:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ff0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ff2:	e8 5a f2 ff ff       	call   c0003251 <get_fat.isra.2>
c0003ff7:	83 f8 01             	cmp    eax,0x1
c0003ffa:	77 11                	ja     c000400d <f_read+0xaa>
c0003ffc:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004000:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c0004008:	e9 2b 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c000400d:	83 f8 ff             	cmp    eax,0xffffffff
c0004010:	75 11                	jne    c0004023 <f_read+0xc0>
c0004012:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004016:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000401e:	e9 15 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c0004023:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004026:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000402a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000402d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004031:	89 c8                	mov    eax,ecx
c0004033:	e8 2d e0 ff ff       	call   c0002065 <clst2sect>
c0004038:	85 c0                	test   eax,eax
c000403a:	74 c0                	je     c0003ffc <f_read+0x99>
c000403c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004040:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004046:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0004049:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000404d:	76 58                	jbe    c00040a7 <f_read+0x144>
c000404f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004053:	89 fe                	mov    esi,edi
c0004055:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004059:	c1 ee 09             	shr    esi,0x9
c000405c:	01 f2                	add    edx,esi
c000405e:	39 c2                	cmp    edx,eax
c0004060:	76 06                	jbe    c0004068 <f_read+0x105>
c0004062:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004066:	89 c6                	mov    esi,eax
c0004068:	56                   	push   esi
c0004069:	55                   	push   ebp
c000406a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000406e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004072:	50                   	push   eax
c0004073:	e8 4c dd ff ff       	call   c0001dc4 <disk_read>
c0004078:	83 c4 10             	add    esp,0x10
c000407b:	85 c0                	test   eax,eax
c000407d:	75 93                	jne    c0004012 <f_read+0xaf>
c000407f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004083:	74 1d                	je     c00040a2 <f_read+0x13f>
c0004085:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004088:	29 e8                	sub    eax,ebp
c000408a:	39 f0                	cmp    eax,esi
c000408c:	73 14                	jae    c00040a2 <f_read+0x13f>
c000408e:	c1 e0 09             	shl    eax,0x9
c0004091:	b9 00 02 00 00       	mov    ecx,0x200
c0004096:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000409a:	8d 53 28             	lea    edx,[ebx+0x28]
c000409d:	e8 99 dd ff ff       	call   c0001e3b <mem_cpy>
c00040a2:	c1 e6 09             	shl    esi,0x9
c00040a5:	eb 75                	jmp    c000411c <f_read+0x1b9>
c00040a7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00040aa:	39 e8                	cmp    eax,ebp
c00040ac:	74 48                	je     c00040f6 <f_read+0x193>
c00040ae:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040b2:	8d 73 28             	lea    esi,[ebx+0x28]
c00040b5:	74 22                	je     c00040d9 <f_read+0x176>
c00040b7:	6a 01                	push   0x1
c00040b9:	50                   	push   eax
c00040ba:	56                   	push   esi
c00040bb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040bf:	50                   	push   eax
c00040c0:	e8 15 dd ff ff       	call   c0001dda <disk_write>
c00040c5:	83 c4 10             	add    esp,0x10
c00040c8:	85 c0                	test   eax,eax
c00040ca:	0f 85 42 ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040d0:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040d3:	83 e0 7f             	and    eax,0x7f
c00040d6:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040d9:	6a 01                	push   0x1
c00040db:	55                   	push   ebp
c00040dc:	56                   	push   esi
c00040dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040e5:	50                   	push   eax
c00040e6:	e8 d9 dc ff ff       	call   c0001dc4 <disk_read>
c00040eb:	83 c4 10             	add    esp,0x10
c00040ee:	85 c0                	test   eax,eax
c00040f0:	0f 85 1c ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040f6:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00040f9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040fc:	be 00 02 00 00       	mov    esi,0x200
c0004101:	25 ff 01 00 00       	and    eax,0x1ff
c0004106:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c000410a:	29 c6                	sub    esi,eax
c000410c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004110:	39 f7                	cmp    edi,esi
c0004112:	0f 46 f7             	cmovbe esi,edi
c0004115:	89 f1                	mov    ecx,esi
c0004117:	e8 1f dd ff ff       	call   c0001e3b <mem_cpy>
c000411c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004120:	29 f7                	sub    edi,esi
c0004122:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004126:	01 30                	add    DWORD PTR [eax],esi
c0004128:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000412b:	e9 88 fe ff ff       	jmp    c0003fb8 <f_read+0x55>
c0004130:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000413c:	83 c4 2c             	add    esp,0x2c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_write>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 67 e1 ff ff       	call   c00022cb <validate>
c0004164:	85 c0                	test   eax,eax
c0004166:	89 c7                	mov    edi,eax
c0004168:	0f 85 13 02 00 00    	jne    c0004381 <f_write+0x23d>
c000416e:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004172:	85 ff                	test   edi,edi
c0004174:	0f 85 07 02 00 00    	jne    c0004381 <f_write+0x23d>
c000417a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000417e:	0f 84 f8 01 00 00    	je     c000437c <f_write+0x238>
c0004184:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004187:	89 c1                	mov    ecx,eax
c0004189:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000418d:	0f 83 ed 00 00 00    	jae    c0004280 <f_write+0x13c>
c0004193:	f7 d0                	not    eax
c0004195:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004199:	e9 e2 00 00 00       	jmp    c0004280 <f_write+0x13c>
c000419e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a1:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a6:	0f 85 9b 01 00 00    	jne    c0004347 <f_write+0x203>
c00041ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b0:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b4:	89 c2                	mov    edx,eax
c00041b6:	c1 ea 09             	shr    edx,0x9
c00041b9:	4d                   	dec    ebp
c00041ba:	21 d5                	and    ebp,edx
c00041bc:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c0:	0f 84 c7 00 00 00    	je     c000428d <f_write+0x149>
c00041c6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041ca:	0f 85 23 01 00 00    	jne    c00042f3 <f_write+0x1af>
c00041d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041db:	89 c8                	mov    eax,ecx
c00041dd:	e8 83 de ff ff       	call   c0002065 <clst2sect>
c00041e2:	85 c0                	test   eax,eax
c00041e4:	0f 84 d3 00 00 00    	je     c00042bd <f_write+0x179>
c00041ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ee:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041f6:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00041f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041fd:	0f 86 1c 01 00 00    	jbe    c000431f <f_write+0x1db>
c0004203:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004207:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000420b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000420f:	c1 ee 09             	shr    esi,0x9
c0004212:	01 f2                	add    edx,esi
c0004214:	39 c2                	cmp    edx,eax
c0004216:	76 06                	jbe    c000421e <f_write+0xda>
c0004218:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000421c:	89 c6                	mov    esi,eax
c000421e:	56                   	push   esi
c000421f:	55                   	push   ebp
c0004220:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004224:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004228:	50                   	push   eax
c0004229:	e8 ac db ff ff       	call   c0001dda <disk_write>
c000422e:	83 c4 10             	add    esp,0x10
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 97 00 00 00    	jne    c00042d0 <f_write+0x18c>
c0004239:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000423c:	29 ea                	sub    edx,ebp
c000423e:	39 f2                	cmp    edx,esi
c0004240:	73 1d                	jae    c000425f <f_write+0x11b>
c0004242:	c1 e2 09             	shl    edx,0x9
c0004245:	b9 00 02 00 00       	mov    ecx,0x200
c000424a:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000424e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004251:	e8 e5 db ff ff       	call   c0001e3b <mem_cpy>
c0004256:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004259:	83 e0 7f             	and    eax,0x7f
c000425c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000425f:	c1 e6 09             	shl    esi,0x9
c0004262:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004266:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000426a:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000426e:	01 30                	add    DWORD PTR [eax],esi
c0004270:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004273:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004276:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004279:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000427d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004280:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004285:	0f 85 13 ff ff ff    	jne    c000419e <f_write+0x5a>
c000428b:	eb 1d                	jmp    c00042aa <f_write+0x166>
c000428d:	85 c0                	test   eax,eax
c000428f:	75 0b                	jne    c000429c <f_write+0x158>
c0004291:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004294:	31 d2                	xor    edx,edx
c0004296:	85 c0                	test   eax,eax
c0004298:	75 1e                	jne    c00042b8 <f_write+0x174>
c000429a:	eb 03                	jmp    c000429f <f_write+0x15b>
c000429c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000429f:	89 d8                	mov    eax,ebx
c00042a1:	e8 78 f1 ff ff       	call   c000341e <create_chain>
c00042a6:	85 c0                	test   eax,eax
c00042a8:	75 0e                	jne    c00042b8 <f_write+0x174>
c00042aa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ad:	83 c8 40             	or     eax,0x40
c00042b0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042b3:	e9 c9 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042b8:	83 f8 01             	cmp    eax,0x1
c00042bb:	75 0e                	jne    c00042cb <f_write+0x187>
c00042bd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00042c1:	bf 02 00 00 00       	mov    edi,0x2
c00042c6:	e9 b6 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042cb:	83 f8 ff             	cmp    eax,0xffffffff
c00042ce:	75 0e                	jne    c00042de <f_write+0x19a>
c00042d0:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042d4:	bf 01 00 00 00       	mov    edi,0x1
c00042d9:	e9 a3 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042de:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042e2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042e5:	0f 85 db fe ff ff    	jne    c00041c6 <f_write+0x82>
c00042eb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042ee:	e9 d3 fe ff ff       	jmp    c00041c6 <f_write+0x82>
c00042f3:	6a 01                	push   0x1
c00042f5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042f8:	8d 43 28             	lea    eax,[ebx+0x28]
c00042fb:	50                   	push   eax
c00042fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004300:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004304:	50                   	push   eax
c0004305:	e8 d0 da ff ff       	call   c0001dda <disk_write>
c000430a:	83 c4 10             	add    esp,0x10
c000430d:	85 c0                	test   eax,eax
c000430f:	75 bf                	jne    c00042d0 <f_write+0x18c>
c0004311:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004314:	83 e0 7f             	and    eax,0x7f
c0004317:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000431a:	e9 b1 fe ff ff       	jmp    c00041d0 <f_write+0x8c>
c000431f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004322:	74 20                	je     c0004344 <f_write+0x200>
c0004324:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004327:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000432a:	76 18                	jbe    c0004344 <f_write+0x200>
c000432c:	6a 01                	push   0x1
c000432e:	55                   	push   ebp
c000432f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004332:	50                   	push   eax
c0004333:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004337:	50                   	push   eax
c0004338:	e8 87 da ff ff       	call   c0001dc4 <disk_read>
c000433d:	83 c4 10             	add    esp,0x10
c0004340:	85 c0                	test   eax,eax
c0004342:	75 8c                	jne    c00042d0 <f_write+0x18c>
c0004344:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004347:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000434a:	be 00 02 00 00       	mov    esi,0x200
c000434f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004353:	25 ff 01 00 00       	and    eax,0x1ff
c0004358:	29 c6                	sub    esi,eax
c000435a:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000435e:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004362:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004367:	89 f1                	mov    ecx,esi
c0004369:	e8 cd da ff ff       	call   c0001e3b <mem_cpy>
c000436e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004371:	83 c8 80             	or     eax,0xffffff80
c0004374:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004377:	e9 e6 fe ff ff       	jmp    c0004262 <f_write+0x11e>
c000437c:	bf 07 00 00 00       	mov    edi,0x7
c0004381:	83 c4 2c             	add    esp,0x2c
c0004384:	89 f8                	mov    eax,edi
c0004386:	5b                   	pop    ebx
c0004387:	5e                   	pop    esi
c0004388:	5f                   	pop    edi
c0004389:	5d                   	pop    ebp
c000438a:	c3                   	ret    

c000438b <f_sync>:
c000438b:	56                   	push   esi
c000438c:	53                   	push   ebx
c000438d:	83 ec 14             	sub    esp,0x14
c0004390:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004394:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004398:	89 d8                	mov    eax,ebx
c000439a:	e8 2c df ff ff       	call   c00022cb <validate>
c000439f:	85 c0                	test   eax,eax
c00043a1:	0f 85 a3 00 00 00    	jne    c000444a <f_sync+0xbf>
c00043a7:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00043aa:	f6 c2 40             	test   dl,0x40
c00043ad:	0f 84 97 00 00 00    	je     c000444a <f_sync+0xbf>
c00043b3:	80 e2 80             	and    dl,0x80
c00043b6:	74 2e                	je     c00043e6 <f_sync+0x5b>
c00043b8:	6a 01                	push   0x1
c00043ba:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00043bd:	8d 43 28             	lea    eax,[ebx+0x28]
c00043c0:	50                   	push   eax
c00043c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043c5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043c9:	50                   	push   eax
c00043ca:	e8 0b da ff ff       	call   c0001dda <disk_write>
c00043cf:	83 c4 10             	add    esp,0x10
c00043d2:	89 c2                	mov    edx,eax
c00043d4:	b8 01 00 00 00       	mov    eax,0x1
c00043d9:	85 d2                	test   edx,edx
c00043db:	75 6d                	jne    c000444a <f_sync+0xbf>
c00043dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043e0:	83 e0 7f             	and    eax,0x7f
c00043e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043e6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043ed:	e8 82 df ff ff       	call   c0002374 <move_window>
c00043f2:	85 c0                	test   eax,eax
c00043f4:	75 54                	jne    c000444a <f_sync+0xbf>
c00043f6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043f9:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043fc:	89 f2                	mov    edx,esi
c00043fe:	83 c8 20             	or     eax,0x20
c0004401:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004404:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0004407:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004409:	e8 1b ee ff ff       	call   c0003229 <st_clust.isra.1>
c000440e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004411:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004414:	e8 1f da ff ff       	call   c0001e38 <st_dword>
c0004419:	8d 46 16             	lea    eax,[esi+0x16]
c000441c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004421:	e8 12 da ff ff       	call   c0001e38 <st_dword>
c0004426:	8d 46 12             	lea    eax,[esi+0x12]
c0004429:	31 d2                	xor    edx,edx
c000442b:	e8 04 da ff ff       	call   c0001e34 <st_word>
c0004430:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004434:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004438:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000443c:	e8 68 e9 ff ff       	call   c0002da9 <sync_fs>
c0004441:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004444:	83 e2 bf             	and    edx,0xffffffbf
c0004447:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000444a:	83 c4 14             	add    esp,0x14
c000444d:	5b                   	pop    ebx
c000444e:	5e                   	pop    esi
c000444f:	c3                   	ret    

c0004450 <f_close>:
c0004450:	53                   	push   ebx
c0004451:	83 ec 24             	sub    esp,0x24
c0004454:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004458:	53                   	push   ebx
c0004459:	e8 2d ff ff ff       	call   c000438b <f_sync>
c000445e:	83 c4 10             	add    esp,0x10
c0004461:	85 c0                	test   eax,eax
c0004463:	75 15                	jne    c000447a <f_close+0x2a>
c0004465:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004469:	89 d8                	mov    eax,ebx
c000446b:	e8 5b de ff ff       	call   c00022cb <validate>
c0004470:	85 c0                	test   eax,eax
c0004472:	75 06                	jne    c000447a <f_close+0x2a>
c0004474:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000447a:	83 c4 18             	add    esp,0x18
c000447d:	5b                   	pop    ebx
c000447e:	c3                   	ret    

c000447f <f_lseek>:
c000447f:	55                   	push   ebp
c0004480:	57                   	push   edi
c0004481:	56                   	push   esi
c0004482:	53                   	push   ebx
c0004483:	83 ec 2c             	sub    esp,0x2c
c0004486:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000448a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000448e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004492:	89 d8                	mov    eax,ebx
c0004494:	e8 32 de ff ff       	call   c00022cb <validate>
c0004499:	85 c0                	test   eax,eax
c000449b:	89 c5                	mov    ebp,eax
c000449d:	0f 85 82 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044a3:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00044a7:	85 ed                	test   ebp,ebp
c00044a9:	0f 85 76 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044af:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00044b2:	39 f0                	cmp    eax,esi
c00044b4:	73 07                	jae    c00044bd <f_lseek+0x3e>
c00044b6:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044ba:	0f 44 f0             	cmove  esi,eax
c00044bd:	85 f6                	test   esi,esi
c00044bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00044c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044c9:	75 07                	jne    c00044d2 <f_lseek+0x53>
c00044cb:	31 f6                	xor    esi,esi
c00044cd:	e9 e2 00 00 00       	jmp    c00045b4 <f_lseek+0x135>
c00044d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d6:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044da:	c1 e7 09             	shl    edi,0x9
c00044dd:	85 c9                	test   ecx,ecx
c00044df:	74 28                	je     c0004509 <f_lseek+0x8a>
c00044e1:	31 d2                	xor    edx,edx
c00044e3:	49                   	dec    ecx
c00044e4:	8d 46 ff             	lea    eax,[esi-0x1]
c00044e7:	f7 f7                	div    edi
c00044e9:	31 d2                	xor    edx,edx
c00044eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044ef:	89 c8                	mov    eax,ecx
c00044f1:	f7 f7                	div    edi
c00044f3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044f7:	72 10                	jb     c0004509 <f_lseek+0x8a>
c00044f9:	89 f8                	mov    eax,edi
c00044fb:	f7 d8                	neg    eax
c00044fd:	21 c1                	and    ecx,eax
c00044ff:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004502:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004505:	29 ce                	sub    esi,ecx
c0004507:	eb 3c                	jmp    c0004545 <f_lseek+0xc6>
c0004509:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000450c:	85 c0                	test   eax,eax
c000450e:	75 32                	jne    c0004542 <f_lseek+0xc3>
c0004510:	31 d2                	xor    edx,edx
c0004512:	89 d8                	mov    eax,ebx
c0004514:	e8 05 ef ff ff       	call   c000341e <create_chain>
c0004519:	83 f8 01             	cmp    eax,0x1
c000451c:	75 0e                	jne    c000452c <f_lseek+0xad>
c000451e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004522:	bd 02 00 00 00       	mov    ebp,0x2
c0004527:	e9 f9 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000452c:	83 f8 ff             	cmp    eax,0xffffffff
c000452f:	75 0e                	jne    c000453f <f_lseek+0xc0>
c0004531:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004535:	bd 01 00 00 00       	mov    ebp,0x1
c000453a:	e9 e6 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000453f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004542:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004545:	85 c0                	test   eax,eax
c0004547:	74 82                	je     c00044cb <f_lseek+0x4c>
c0004549:	39 fe                	cmp    esi,edi
c000454b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000454e:	76 3d                	jbe    c000458d <f_lseek+0x10e>
c0004550:	01 fa                	add    edx,edi
c0004552:	29 fe                	sub    esi,edi
c0004554:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004558:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000455b:	89 c2                	mov    edx,eax
c000455d:	74 0d                	je     c000456c <f_lseek+0xed>
c000455f:	89 d8                	mov    eax,ebx
c0004561:	e8 b8 ee ff ff       	call   c000341e <create_chain>
c0004566:	85 c0                	test   eax,eax
c0004568:	75 09                	jne    c0004573 <f_lseek+0xf4>
c000456a:	eb 1f                	jmp    c000458b <f_lseek+0x10c>
c000456c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000456e:	e8 de ec ff ff       	call   c0003251 <get_fat.isra.2>
c0004573:	83 f8 ff             	cmp    eax,0xffffffff
c0004576:	74 b9                	je     c0004531 <f_lseek+0xb2>
c0004578:	83 f8 01             	cmp    eax,0x1
c000457b:	76 a1                	jbe    c000451e <f_lseek+0x9f>
c000457d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004581:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004584:	76 98                	jbe    c000451e <f_lseek+0x9f>
c0004586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004589:	eb be                	jmp    c0004549 <f_lseek+0xca>
c000458b:	31 f6                	xor    esi,esi
c000458d:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004590:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004596:	0f 84 2f ff ff ff    	je     c00044cb <f_lseek+0x4c>
c000459c:	89 c2                	mov    edx,eax
c000459e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045a2:	e8 be da ff ff       	call   c0002065 <clst2sect>
c00045a7:	85 c0                	test   eax,eax
c00045a9:	0f 84 6f ff ff ff    	je     c000451e <f_lseek+0x9f>
c00045af:	c1 ee 09             	shr    esi,0x9
c00045b2:	01 c6                	add    esi,eax
c00045b4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00045b7:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00045ba:	76 0c                	jbe    c00045c8 <f_lseek+0x149>
c00045bc:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00045bf:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00045c2:	83 ca 40             	or     edx,0x40
c00045c5:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045c8:	a9 ff 01 00 00       	test   eax,0x1ff
c00045cd:	74 56                	je     c0004625 <f_lseek+0x1a6>
c00045cf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045d2:	39 f0                	cmp    eax,esi
c00045d4:	74 4f                	je     c0004625 <f_lseek+0x1a6>
c00045d6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045da:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045dd:	74 26                	je     c0004605 <f_lseek+0x186>
c00045df:	6a 01                	push   0x1
c00045e1:	50                   	push   eax
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 e9 d7 ff ff       	call   c0001dda <disk_write>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 35 ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c00045fc:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045ff:	83 e0 7f             	and    eax,0x7f
c0004602:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004605:	6a 01                	push   0x1
c0004607:	56                   	push   esi
c0004608:	57                   	push   edi
c0004609:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000460d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004611:	50                   	push   eax
c0004612:	e8 ad d7 ff ff       	call   c0001dc4 <disk_read>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	85 c0                	test   eax,eax
c000461c:	0f 85 0f ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c0004622:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004625:	83 c4 2c             	add    esp,0x2c
c0004628:	89 e8                	mov    eax,ebp
c000462a:	5b                   	pop    ebx
c000462b:	5e                   	pop    esi
c000462c:	5f                   	pop    edi
c000462d:	5d                   	pop    ebp
c000462e:	c3                   	ret    

c000462f <f_opendir>:
c000462f:	56                   	push   esi
c0004630:	b8 09 00 00 00       	mov    eax,0x9
c0004635:	53                   	push   ebx
c0004636:	83 ec 24             	sub    esp,0x24
c0004639:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000463d:	85 db                	test   ebx,ebx
c000463f:	0f 84 af 00 00 00    	je     c00046f4 <f_opendir+0xc5>
c0004645:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004649:	31 c9                	xor    ecx,ecx
c000464b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000464f:	e8 7d de ff ff       	call   c00024d1 <mount_volume>
c0004654:	85 c0                	test   eax,eax
c0004656:	0f 85 92 00 00 00    	jne    c00046ee <f_opendir+0xbf>
c000465c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004660:	83 ec 0c             	sub    esp,0xc
c0004663:	89 03                	mov    DWORD PTR [ebx],eax
c0004665:	68 00 02 00 00       	push   0x200
c000466a:	e8 e5 15 00 00       	call   c0005c54 <ff_memalloc>
c000466f:	83 c4 10             	add    esp,0x10
c0004672:	89 c6                	mov    esi,eax
c0004674:	b8 11 00 00 00       	mov    eax,0x11
c0004679:	85 f6                	test   esi,esi
c000467b:	74 77                	je     c00046f4 <f_opendir+0xc5>
c000467d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004681:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004685:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004688:	89 d8                	mov    eax,ebx
c000468a:	e8 8a f3 ff ff       	call   c0003a19 <follow_path>
c000468f:	85 c0                	test   eax,eax
c0004691:	75 37                	jne    c00046ca <f_opendir+0x9b>
c0004693:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004697:	75 1c                	jne    c00046b5 <f_opendir+0x86>
c0004699:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000469d:	b8 05 00 00 00       	mov    eax,0x5
c00046a2:	74 26                	je     c00046ca <f_opendir+0x9b>
c00046a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046a8:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00046ab:	8a 00                	mov    al,BYTE PTR [eax]
c00046ad:	e8 4e eb ff ff       	call   c0003200 <ld_clust.isra.0>
c00046b2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00046b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b9:	31 d2                	xor    edx,edx
c00046bb:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00046bf:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00046c3:	89 d8                	mov    eax,ebx
c00046c5:	e8 8c ec ff ff       	call   c0003356 <dir_sdi>
c00046ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046ce:	83 ec 0c             	sub    esp,0xc
c00046d1:	56                   	push   esi
c00046d2:	e8 95 15 00 00       	call   c0005c6c <ff_memfree>
c00046d7:	83 c4 10             	add    esp,0x10
c00046da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046de:	83 f8 04             	cmp    eax,0x4
c00046e1:	74 06                	je     c00046e9 <f_opendir+0xba>
c00046e3:	85 c0                	test   eax,eax
c00046e5:	74 0d                	je     c00046f4 <f_opendir+0xc5>
c00046e7:	eb 05                	jmp    c00046ee <f_opendir+0xbf>
c00046e9:	b8 05 00 00 00       	mov    eax,0x5
c00046ee:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f4:	83 c4 24             	add    esp,0x24
c00046f7:	5b                   	pop    ebx
c00046f8:	5e                   	pop    esi
c00046f9:	c3                   	ret    

c00046fa <f_closedir>:
c00046fa:	53                   	push   ebx
c00046fb:	83 ec 18             	sub    esp,0x18
c00046fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004702:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004706:	89 d8                	mov    eax,ebx
c0004708:	e8 be db ff ff       	call   c00022cb <validate>
c000470d:	85 c0                	test   eax,eax
c000470f:	75 06                	jne    c0004717 <f_closedir+0x1d>
c0004711:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004717:	83 c4 18             	add    esp,0x18
c000471a:	5b                   	pop    ebx
c000471b:	c3                   	ret    

c000471c <f_readdir>:
c000471c:	57                   	push   edi
c000471d:	56                   	push   esi
c000471e:	53                   	push   ebx
c000471f:	83 ec 20             	sub    esp,0x20
c0004722:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004726:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000472a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000472e:	89 d8                	mov    eax,ebx
c0004730:	e8 96 db ff ff       	call   c00022cb <validate>
c0004735:	85 c0                	test   eax,eax
c0004737:	75 6e                	jne    c00047a7 <f_readdir+0x8b>
c0004739:	85 ff                	test   edi,edi
c000473b:	75 0b                	jne    c0004748 <f_readdir+0x2c>
c000473d:	31 d2                	xor    edx,edx
c000473f:	89 d8                	mov    eax,ebx
c0004741:	e8 10 ec ff ff       	call   c0003356 <dir_sdi>
c0004746:	eb 5f                	jmp    c00047a7 <f_readdir+0x8b>
c0004748:	83 ec 0c             	sub    esp,0xc
c000474b:	68 00 02 00 00       	push   0x200
c0004750:	e8 ff 14 00 00       	call   c0005c54 <ff_memalloc>
c0004755:	83 c4 10             	add    esp,0x10
c0004758:	89 c6                	mov    esi,eax
c000475a:	b8 11 00 00 00       	mov    eax,0x11
c000475f:	85 f6                	test   esi,esi
c0004761:	74 44                	je     c00047a7 <f_readdir+0x8b>
c0004763:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004767:	31 d2                	xor    edx,edx
c0004769:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000476c:	89 d8                	mov    eax,ebx
c000476e:	e8 dd ef ff ff       	call   c0003750 <dir_read>
c0004773:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004778:	75 19                	jne    c0004793 <f_readdir+0x77>
c000477a:	89 fa                	mov    edx,edi
c000477c:	89 d8                	mov    eax,ebx
c000477e:	e8 7c e8 ff ff       	call   c0002fff <get_fileinfo>
c0004783:	31 d2                	xor    edx,edx
c0004785:	89 d8                	mov    eax,ebx
c0004787:	e8 5a ee ff ff       	call   c00035e6 <dir_next>
c000478c:	83 f8 04             	cmp    eax,0x4
c000478f:	75 02                	jne    c0004793 <f_readdir+0x77>
c0004791:	31 c0                	xor    eax,eax
c0004793:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004797:	83 ec 0c             	sub    esp,0xc
c000479a:	56                   	push   esi
c000479b:	e8 cc 14 00 00       	call   c0005c6c <ff_memfree>
c00047a0:	83 c4 10             	add    esp,0x10
c00047a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047a7:	83 c4 20             	add    esp,0x20
c00047aa:	5b                   	pop    ebx
c00047ab:	5e                   	pop    esi
c00047ac:	5f                   	pop    edi
c00047ad:	c3                   	ret    

c00047ae <f_stat>:
c00047ae:	57                   	push   edi
c00047af:	31 c9                	xor    ecx,ecx
c00047b1:	56                   	push   esi
c00047b2:	53                   	push   ebx
c00047b3:	83 ec 30             	sub    esp,0x30
c00047b6:	8d 44 24 40          	lea    eax,[esp+0x40]
c00047ba:	89 e2                	mov    edx,esp
c00047bc:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00047c0:	e8 0c dd ff ff       	call   c00024d1 <mount_volume>
c00047c5:	85 c0                	test   eax,eax
c00047c7:	89 c3                	mov    ebx,eax
c00047c9:	75 59                	jne    c0004824 <f_stat+0x76>
c00047cb:	83 ec 0c             	sub    esp,0xc
c00047ce:	bb 11 00 00 00       	mov    ebx,0x11
c00047d3:	68 00 02 00 00       	push   0x200
c00047d8:	e8 77 14 00 00       	call   c0005c54 <ff_memalloc>
c00047dd:	83 c4 10             	add    esp,0x10
c00047e0:	85 c0                	test   eax,eax
c00047e2:	89 c6                	mov    esi,eax
c00047e4:	74 3e                	je     c0004824 <f_stat+0x76>
c00047e6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047e9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047f0:	89 e0                	mov    eax,esp
c00047f2:	e8 22 f2 ff ff       	call   c0003a19 <follow_path>
c00047f7:	85 c0                	test   eax,eax
c00047f9:	89 c3                	mov    ebx,eax
c00047fb:	75 1b                	jne    c0004818 <f_stat+0x6a>
c00047fd:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c0004802:	75 0f                	jne    c0004813 <f_stat+0x65>
c0004804:	85 ff                	test   edi,edi
c0004806:	74 10                	je     c0004818 <f_stat+0x6a>
c0004808:	89 fa                	mov    edx,edi
c000480a:	89 e0                	mov    eax,esp
c000480c:	e8 ee e7 ff ff       	call   c0002fff <get_fileinfo>
c0004811:	eb 05                	jmp    c0004818 <f_stat+0x6a>
c0004813:	bb 06 00 00 00       	mov    ebx,0x6
c0004818:	83 ec 0c             	sub    esp,0xc
c000481b:	56                   	push   esi
c000481c:	e8 4b 14 00 00       	call   c0005c6c <ff_memfree>
c0004821:	83 c4 10             	add    esp,0x10
c0004824:	83 c4 30             	add    esp,0x30
c0004827:	89 d8                	mov    eax,ebx
c0004829:	5b                   	pop    ebx
c000482a:	5e                   	pop    esi
c000482b:	5f                   	pop    edi
c000482c:	c3                   	ret    

c000482d <f_getfree>:
c000482d:	55                   	push   ebp
c000482e:	31 c9                	xor    ecx,ecx
c0004830:	57                   	push   edi
c0004831:	56                   	push   esi
c0004832:	53                   	push   ebx
c0004833:	83 ec 2c             	sub    esp,0x2c
c0004836:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000483a:	8d 44 24 40          	lea    eax,[esp+0x40]
c000483e:	e8 8e dc ff ff       	call   c00024d1 <mount_volume>
c0004843:	85 c0                	test   eax,eax
c0004845:	89 c6                	mov    esi,eax
c0004847:	0f 85 df 00 00 00    	jne    c000492c <f_getfree+0xff>
c000484d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004851:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004855:	89 18                	mov    DWORD PTR [eax],ebx
c0004857:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000485a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000485d:	8d 57 fe             	lea    edx,[edi-0x2]
c0004860:	39 d0                	cmp    eax,edx
c0004862:	77 0b                	ja     c000486f <f_getfree+0x42>
c0004864:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004868:	89 01                	mov    DWORD PTR [ecx],eax
c000486a:	e9 bd 00 00 00       	jmp    c000492c <f_getfree+0xff>
c000486f:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004872:	75 29                	jne    c000489d <f_getfree+0x70>
c0004874:	bf 02 00 00 00       	mov    edi,0x2
c0004879:	31 ed                	xor    ebp,ebp
c000487b:	89 fa                	mov    edx,edi
c000487d:	89 d8                	mov    eax,ebx
c000487f:	e8 cd e9 ff ff       	call   c0003251 <get_fat.isra.2>
c0004884:	83 f8 ff             	cmp    eax,0xffffffff
c0004887:	74 7d                	je     c0004906 <f_getfree+0xd9>
c0004889:	83 f8 01             	cmp    eax,0x1
c000488c:	74 7f                	je     c000490d <f_getfree+0xe0>
c000488e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004892:	83 d5 00             	adc    ebp,0x0
c0004895:	47                   	inc    edi
c0004896:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004899:	77 e0                	ja     c000487b <f_getfree+0x4e>
c000489b:	eb 79                	jmp    c0004916 <f_getfree+0xe9>
c000489d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00048a0:	31 ed                	xor    ebp,ebp
c00048a2:	31 db                	xor    ebx,ebx
c00048a4:	85 db                	test   ebx,ebx
c00048a6:	75 18                	jne    c00048c0 <f_getfree+0x93>
c00048a8:	8d 42 01             	lea    eax,[edx+0x1]
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b3:	e8 bc da ff ff       	call   c0002374 <move_window>
c00048b8:	85 c0                	test   eax,eax
c00048ba:	75 58                	jne    c0004914 <f_getfree+0xe7>
c00048bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00048c8:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048cb:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c00048cf:	75 13                	jne    c00048e4 <f_getfree+0xb7>
c00048d1:	e8 39 d5 ff ff       	call   c0001e0f <ld_word>
c00048d6:	0f b7 c0             	movzx  eax,ax
c00048d9:	83 f8 01             	cmp    eax,0x1
c00048dc:	83 d5 00             	adc    ebp,0x0
c00048df:	83 c3 02             	add    ebx,0x2
c00048e2:	eb 13                	jmp    c00048f7 <f_getfree+0xca>
c00048e4:	e8 33 d5 ff ff       	call   c0001e1c <ld_dword>
c00048e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048ee:	83 f8 01             	cmp    eax,0x1
c00048f1:	83 d5 00             	adc    ebp,0x0
c00048f4:	83 c3 04             	add    ebx,0x4
c00048f7:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00048fd:	4f                   	dec    edi
c00048fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004902:	75 a0                	jne    c00048a4 <f_getfree+0x77>
c0004904:	eb 10                	jmp    c0004916 <f_getfree+0xe9>
c0004906:	be 01 00 00 00       	mov    esi,0x1
c000490b:	eb 09                	jmp    c0004916 <f_getfree+0xe9>
c000490d:	be 02 00 00 00       	mov    esi,0x2
c0004912:	eb 02                	jmp    c0004916 <f_getfree+0xe9>
c0004914:	89 c6                	mov    esi,eax
c0004916:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000491a:	89 28                	mov    DWORD PTR [eax],ebp
c000491c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004920:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004923:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004926:	83 ca 01             	or     edx,0x1
c0004929:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c000492c:	83 c4 2c             	add    esp,0x2c
c000492f:	89 f0                	mov    eax,esi
c0004931:	5b                   	pop    ebx
c0004932:	5e                   	pop    esi
c0004933:	5f                   	pop    edi
c0004934:	5d                   	pop    ebp
c0004935:	c3                   	ret    

c0004936 <f_truncate>:
c0004936:	56                   	push   esi
c0004937:	53                   	push   ebx
c0004938:	83 ec 14             	sub    esp,0x14
c000493b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000493f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004943:	89 d8                	mov    eax,ebx
c0004945:	e8 81 d9 ff ff       	call   c00022cb <validate>
c000494a:	85 c0                	test   eax,eax
c000494c:	89 c6                	mov    esi,eax
c000494e:	0f 85 c4 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004954:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004958:	85 f6                	test   esi,esi
c000495a:	0f 85 b8 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004960:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004964:	0f 84 a9 00 00 00    	je     c0004a13 <f_truncate+0xdd>
c000496a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000496d:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004970:	0f 83 a2 00 00 00    	jae    c0004a18 <f_truncate+0xe2>
c0004976:	85 c0                	test   eax,eax
c0004978:	75 15                	jne    c000498f <f_truncate+0x59>
c000497a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000497d:	31 c9                	xor    ecx,ecx
c000497f:	89 d8                	mov    eax,ebx
c0004981:	e8 d2 eb ff ff       	call   c0003558 <remove_chain>
c0004986:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000498d:	eb 35                	jmp    c00049c4 <f_truncate+0x8e>
c000498f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004994:	e8 b8 e8 ff ff       	call   c0003251 <get_fat.isra.2>
c0004999:	89 c2                	mov    edx,eax
c000499b:	b8 01 00 00 00       	mov    eax,0x1
c00049a0:	83 fa ff             	cmp    edx,0xffffffff
c00049a3:	74 1f                	je     c00049c4 <f_truncate+0x8e>
c00049a5:	83 fa 01             	cmp    edx,0x1
c00049a8:	b8 02 00 00 00       	mov    eax,0x2
c00049ad:	74 15                	je     c00049c4 <f_truncate+0x8e>
c00049af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049b3:	31 c0                	xor    eax,eax
c00049b5:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c00049b8:	76 0a                	jbe    c00049c4 <f_truncate+0x8e>
c00049ba:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c00049bd:	89 d8                	mov    eax,ebx
c00049bf:	e8 94 eb ff ff       	call   c0003558 <remove_chain>
c00049c4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049c7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049ca:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049cd:	83 ca 40             	or     edx,0x40
c00049d0:	85 c0                	test   eax,eax
c00049d2:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049d5:	75 35                	jne    c0004a0c <f_truncate+0xd6>
c00049d7:	80 e2 80             	and    dl,0x80
c00049da:	74 3c                	je     c0004a18 <f_truncate+0xe2>
c00049dc:	6a 01                	push   0x1
c00049de:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049e1:	8d 43 28             	lea    eax,[ebx+0x28]
c00049e4:	50                   	push   eax
c00049e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049e9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049ed:	50                   	push   eax
c00049ee:	e8 e7 d3 ff ff       	call   c0001dda <disk_write>
c00049f3:	83 c4 10             	add    esp,0x10
c00049f6:	85 c0                	test   eax,eax
c00049f8:	75 0d                	jne    c0004a07 <f_truncate+0xd1>
c00049fa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049fd:	31 f6                	xor    esi,esi
c00049ff:	83 e0 7f             	and    eax,0x7f
c0004a02:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004a05:	eb 11                	jmp    c0004a18 <f_truncate+0xe2>
c0004a07:	b8 01 00 00 00       	mov    eax,0x1
c0004a0c:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004a0f:	89 c6                	mov    esi,eax
c0004a11:	eb 05                	jmp    c0004a18 <f_truncate+0xe2>
c0004a13:	be 07 00 00 00       	mov    esi,0x7
c0004a18:	83 c4 14             	add    esp,0x14
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	5b                   	pop    ebx
c0004a1e:	5e                   	pop    esi
c0004a1f:	c3                   	ret    

c0004a20 <f_unlink>:
c0004a20:	55                   	push   ebp
c0004a21:	b9 02 00 00 00       	mov    ecx,0x2
c0004a26:	57                   	push   edi
c0004a27:	56                   	push   esi
c0004a28:	53                   	push   ebx
c0004a29:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a2f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a33:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a3a:	e8 92 da ff ff       	call   c00024d1 <mount_volume>
c0004a3f:	85 c0                	test   eax,eax
c0004a41:	0f 85 ee 00 00 00    	jne    c0004b35 <f_unlink+0x115>
c0004a47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4b:	83 ec 0c             	sub    esp,0xc
c0004a4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a52:	68 00 02 00 00       	push   0x200
c0004a57:	e8 f8 11 00 00       	call   c0005c54 <ff_memalloc>
c0004a5c:	83 c4 10             	add    esp,0x10
c0004a5f:	89 c3                	mov    ebx,eax
c0004a61:	b8 11 00 00 00       	mov    eax,0x11
c0004a66:	85 db                	test   ebx,ebx
c0004a68:	0f 84 c7 00 00 00    	je     c0004b35 <f_unlink+0x115>
c0004a6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a72:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a79:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a7c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a80:	e8 94 ef ff ff       	call   c0003a19 <follow_path>
c0004a85:	85 c0                	test   eax,eax
c0004a87:	0f 85 94 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a8d:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a92:	b8 06 00 00 00       	mov    eax,0x6
c0004a97:	0f 85 84 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a9d:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004aa2:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004aa8:	74 07                	je     c0004ab1 <f_unlink+0x91>
c0004aaa:	b8 07 00 00 00       	mov    eax,0x7
c0004aaf:	eb 70                	jmp    c0004b21 <f_unlink+0x101>
c0004ab1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ab5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ab9:	8a 07                	mov    al,BYTE PTR [edi]
c0004abb:	e8 40 e7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004ac0:	83 e5 10             	and    ebp,0x10
c0004ac3:	89 c6                	mov    esi,eax
c0004ac5:	75 20                	jne    c0004ae7 <f_unlink+0xc7>
c0004ac7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004acb:	e8 a8 ed ff ff       	call   c0003878 <dir_remove>
c0004ad0:	85 c0                	test   eax,eax
c0004ad2:	75 40                	jne    c0004b14 <f_unlink+0xf4>
c0004ad4:	85 f6                	test   esi,esi
c0004ad6:	74 3c                	je     c0004b14 <f_unlink+0xf4>
c0004ad8:	31 c9                	xor    ecx,ecx
c0004ada:	89 f2                	mov    edx,esi
c0004adc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ae0:	e8 73 ea ff ff       	call   c0003558 <remove_chain>
c0004ae5:	eb 2d                	jmp    c0004b14 <f_unlink+0xf4>
c0004ae7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004aeb:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004aef:	31 d2                	xor    edx,edx
c0004af1:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004af5:	e8 5c e8 ff ff       	call   c0003356 <dir_sdi>
c0004afa:	85 c0                	test   eax,eax
c0004afc:	75 23                	jne    c0004b21 <f_unlink+0x101>
c0004afe:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004b02:	31 d2                	xor    edx,edx
c0004b04:	e8 47 ec ff ff       	call   c0003750 <dir_read>
c0004b09:	85 c0                	test   eax,eax
c0004b0b:	74 9d                	je     c0004aaa <f_unlink+0x8a>
c0004b0d:	83 f8 04             	cmp    eax,0x4
c0004b10:	75 0f                	jne    c0004b21 <f_unlink+0x101>
c0004b12:	eb b3                	jmp    c0004ac7 <f_unlink+0xa7>
c0004b14:	85 c0                	test   eax,eax
c0004b16:	75 09                	jne    c0004b21 <f_unlink+0x101>
c0004b18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b1c:	e8 88 e2 ff ff       	call   c0002da9 <sync_fs>
c0004b21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b25:	83 ec 0c             	sub    esp,0xc
c0004b28:	53                   	push   ebx
c0004b29:	e8 3e 11 00 00       	call   c0005c6c <ff_memfree>
c0004b2e:	83 c4 10             	add    esp,0x10
c0004b31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b35:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b3b:	5b                   	pop    ebx
c0004b3c:	5e                   	pop    esi
c0004b3d:	5f                   	pop    edi
c0004b3e:	5d                   	pop    ebp
c0004b3f:	c3                   	ret    

c0004b40 <f_mkdir>:
c0004b40:	57                   	push   edi
c0004b41:	b9 02 00 00 00       	mov    ecx,0x2
c0004b46:	56                   	push   esi
c0004b47:	53                   	push   ebx
c0004b48:	83 ec 50             	sub    esp,0x50
c0004b4b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b4f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b53:	e8 79 d9 ff ff       	call   c00024d1 <mount_volume>
c0004b58:	85 c0                	test   eax,eax
c0004b5a:	89 c3                	mov    ebx,eax
c0004b5c:	0f 85 70 01 00 00    	jne    c0004cd2 <f_mkdir+0x192>
c0004b62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b66:	83 ec 0c             	sub    esp,0xc
c0004b69:	bb 11 00 00 00       	mov    ebx,0x11
c0004b6e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b72:	68 00 02 00 00       	push   0x200
c0004b77:	e8 d8 10 00 00       	call   c0005c54 <ff_memalloc>
c0004b7c:	83 c4 10             	add    esp,0x10
c0004b7f:	85 c0                	test   eax,eax
c0004b81:	89 c7                	mov    edi,eax
c0004b83:	0f 84 49 01 00 00    	je     c0004cd2 <f_mkdir+0x192>
c0004b89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b91:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b98:	e8 7c ee ff ff       	call   c0003a19 <follow_path>
c0004b9d:	85 c0                	test   eax,eax
c0004b9f:	89 c3                	mov    ebx,eax
c0004ba1:	74 3e                	je     c0004be1 <f_mkdir+0xa1>
c0004ba3:	83 f8 04             	cmp    eax,0x4
c0004ba6:	75 3e                	jne    c0004be6 <f_mkdir+0xa6>
c0004ba8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bac:	31 d2                	xor    edx,edx
c0004bae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 63 e8 ff ff       	call   c000341e <create_chain>
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	89 c6                	mov    esi,eax
c0004bbf:	74 0c                	je     c0004bcd <f_mkdir+0x8d>
c0004bc1:	83 f8 01             	cmp    eax,0x1
c0004bc4:	bb 02 00 00 00       	mov    ebx,0x2
c0004bc9:	74 07                	je     c0004bd2 <f_mkdir+0x92>
c0004bcb:	eb 2a                	jmp    c0004bf7 <f_mkdir+0xb7>
c0004bcd:	bb 07 00 00 00       	mov    ebx,0x7
c0004bd2:	31 c9                	xor    ecx,ecx
c0004bd4:	89 f2                	mov    edx,esi
c0004bd6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bda:	e8 79 e9 ff ff       	call   c0003558 <remove_chain>
c0004bdf:	eb 05                	jmp    c0004be6 <f_mkdir+0xa6>
c0004be1:	bb 08 00 00 00       	mov    ebx,0x8
c0004be6:	83 ec 0c             	sub    esp,0xc
c0004be9:	57                   	push   edi
c0004bea:	e8 7d 10 00 00       	call   c0005c6c <ff_memfree>
c0004bef:	83 c4 10             	add    esp,0x10
c0004bf2:	e9 db 00 00 00       	jmp    c0004cd2 <f_mkdir+0x192>
c0004bf7:	83 f8 ff             	cmp    eax,0xffffffff
c0004bfa:	bb 01 00 00 00       	mov    ebx,0x1
c0004bff:	74 d1                	je     c0004bd2 <f_mkdir+0x92>
c0004c01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c05:	89 f2                	mov    edx,esi
c0004c07:	e8 19 dd ff ff       	call   c0002925 <dir_clear>
c0004c0c:	85 c0                	test   eax,eax
c0004c0e:	89 c3                	mov    ebx,eax
c0004c10:	75 c0                	jne    c0004bd2 <f_mkdir+0x92>
c0004c12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0004c1b:	ba 20 00 00 00       	mov    edx,0x20
c0004c20:	83 c0 34             	add    eax,0x34
c0004c23:	e8 28 d2 ff ff       	call   c0001e50 <mem_set>
c0004c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c31:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c35:	83 c0 4a             	add    eax,0x4a
c0004c38:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004c3c:	e8 f7 d1 ff ff       	call   c0001e38 <st_dword>
c0004c41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c45:	89 f1                	mov    ecx,esi
c0004c47:	8d 50 34             	lea    edx,[eax+0x34]
c0004c4a:	e8 da e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c53:	b9 20 00 00 00       	mov    ecx,0x20
c0004c58:	8d 50 34             	lea    edx,[eax+0x34]
c0004c5b:	83 c0 54             	add    eax,0x54
c0004c5e:	e8 d8 d1 ff ff       	call   c0001e3b <mem_cpy>
c0004c63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c67:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c6b:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c6f:	8d 50 54             	lea    edx,[eax+0x54]
c0004c72:	e8 b2 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c7b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c7f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c83:	e8 2e ee ff ff       	call   c0003ab6 <dir_register>
c0004c88:	85 c0                	test   eax,eax
c0004c8a:	89 c3                	mov    ebx,eax
c0004c8c:	0f 85 40 ff ff ff    	jne    c0004bd2 <f_mkdir+0x92>
c0004c92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c96:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c9b:	83 c0 16             	add    eax,0x16
c0004c9e:	e8 95 d1 ff ff       	call   c0001e38 <st_dword>
c0004ca3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ca7:	89 f1                	mov    ecx,esi
c0004ca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cad:	e8 77 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004cb2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004cb6:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004cba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cbe:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cc6:	e8 de e0 ff ff       	call   c0002da9 <sync_fs>
c0004ccb:	89 c3                	mov    ebx,eax
c0004ccd:	e9 14 ff ff ff       	jmp    c0004be6 <f_mkdir+0xa6>
c0004cd2:	83 c4 50             	add    esp,0x50
c0004cd5:	89 d8                	mov    eax,ebx
c0004cd7:	5b                   	pop    ebx
c0004cd8:	5e                   	pop    esi
c0004cd9:	5f                   	pop    edi
c0004cda:	c3                   	ret    

c0004cdb <f_rename>:
c0004cdb:	57                   	push   edi
c0004cdc:	56                   	push   esi
c0004cdd:	53                   	push   ebx
c0004cde:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ce4:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ceb:	e8 8f d5 ff ff       	call   c000227f <get_ldnumber>
c0004cf0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cf4:	b9 02 00 00 00       	mov    ecx,0x2
c0004cf9:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004d00:	e8 cc d7 ff ff       	call   c00024d1 <mount_volume>
c0004d05:	85 c0                	test   eax,eax
c0004d07:	0f 85 7c 01 00 00    	jne    c0004e89 <f_rename+0x1ae>
c0004d0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004d18:	68 00 02 00 00       	push   0x200
c0004d1d:	e8 32 0f 00 00       	call   c0005c54 <ff_memalloc>
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	89 c6                	mov    esi,eax
c0004d27:	b8 11 00 00 00       	mov    eax,0x11
c0004d2c:	85 f6                	test   esi,esi
c0004d2e:	0f 84 55 01 00 00    	je     c0004e89 <f_rename+0x1ae>
c0004d34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d38:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d3f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d42:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d46:	e8 ce ec ff ff       	call   c0003a19 <follow_path>
c0004d4b:	85 c0                	test   eax,eax
c0004d4d:	0f 85 22 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d53:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d57:	b8 06 00 00 00       	mov    eax,0x6
c0004d5c:	80 e2 a0             	and    dl,0xa0
c0004d5f:	0f 85 10 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d65:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d69:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d6d:	b9 20 00 00 00       	mov    ecx,0x20
c0004d72:	e8 c4 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d77:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d7b:	b9 30 00 00 00       	mov    ecx,0x30
c0004d80:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d84:	e8 b2 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d89:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d90:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d94:	e8 80 ec ff ff       	call   c0003a19 <follow_path>
c0004d99:	85 c0                	test   eax,eax
c0004d9b:	75 20                	jne    c0004dbd <f_rename+0xe2>
c0004d9d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004da1:	b8 08 00 00 00       	mov    eax,0x8
c0004da6:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004daa:	0f 85 c5 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004db0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004db4:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004dbb:	eb 03                	jmp    c0004dc0 <f_rename+0xe5>
c0004dbd:	83 f8 04             	cmp    eax,0x4
c0004dc0:	0f 85 af 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dc6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004dca:	e8 e7 ec ff ff       	call   c0003ab6 <dir_register>
c0004dcf:	85 c0                	test   eax,eax
c0004dd1:	0f 85 9e 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dd7:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dde:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004de2:	b9 13 00 00 00       	mov    ecx,0x13
c0004de7:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dea:	e8 4c d0 ff ff       	call   c0001e3b <mem_cpy>
c0004def:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004df3:	a8 10                	test   al,0x10
c0004df5:	75 03                	jne    c0004dfa <f_rename+0x11f>
c0004df7:	83 c8 20             	or     eax,0x20
c0004dfa:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e01:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e05:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004e09:	74 54                	je     c0004e5f <f_rename+0x184>
c0004e0b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004e0f:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004e13:	74 4a                	je     c0004e5f <f_rename+0x184>
c0004e15:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004e19:	89 da                	mov    edx,ebx
c0004e1b:	8a 07                	mov    al,BYTE PTR [edi]
c0004e1d:	e8 de e3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004e22:	89 c2                	mov    edx,eax
c0004e24:	89 f8                	mov    eax,edi
c0004e26:	e8 3a d2 ff ff       	call   c0002065 <clst2sect>
c0004e2b:	89 c2                	mov    edx,eax
c0004e2d:	b8 02 00 00 00       	mov    eax,0x2
c0004e32:	85 d2                	test   edx,edx
c0004e34:	74 3f                	je     c0004e75 <f_rename+0x19a>
c0004e36:	89 f8                	mov    eax,edi
c0004e38:	e8 37 d5 ff ff       	call   c0002374 <move_window>
c0004e3d:	85 c0                	test   eax,eax
c0004e3f:	75 34                	jne    c0004e75 <f_rename+0x19a>
c0004e41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e45:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e49:	75 14                	jne    c0004e5f <f_rename+0x184>
c0004e4b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e4f:	8d 50 54             	lea    edx,[eax+0x54]
c0004e52:	e8 d2 e3 ff ff       	call   c0003229 <st_clust.isra.1>
c0004e57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e5b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e5f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e63:	e8 10 ea ff ff       	call   c0003878 <dir_remove>
c0004e68:	85 c0                	test   eax,eax
c0004e6a:	75 09                	jne    c0004e75 <f_rename+0x19a>
c0004e6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e70:	e8 34 df ff ff       	call   c0002da9 <sync_fs>
c0004e75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e79:	83 ec 0c             	sub    esp,0xc
c0004e7c:	56                   	push   esi
c0004e7d:	e8 ea 0d 00 00       	call   c0005c6c <ff_memfree>
c0004e82:	83 c4 10             	add    esp,0x10
c0004e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e89:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e8f:	5b                   	pop    ebx
c0004e90:	5e                   	pop    esi
c0004e91:	5f                   	pop    edi
c0004e92:	c3                   	ret    

c0004e93 <f_chmod>:
c0004e93:	57                   	push   edi
c0004e94:	b9 02 00 00 00       	mov    ecx,0x2
c0004e99:	56                   	push   esi
c0004e9a:	53                   	push   ebx
c0004e9b:	83 ec 50             	sub    esp,0x50
c0004e9e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ea2:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004ea6:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004eaa:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004eae:	e8 1e d6 ff ff       	call   c00024d1 <mount_volume>
c0004eb3:	85 c0                	test   eax,eax
c0004eb5:	0f 85 81 00 00 00    	jne    c0004f3c <f_chmod+0xa9>
c0004ebb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebf:	83 ec 0c             	sub    esp,0xc
c0004ec2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ec6:	68 00 02 00 00       	push   0x200
c0004ecb:	e8 84 0d 00 00       	call   c0005c54 <ff_memalloc>
c0004ed0:	83 c4 10             	add    esp,0x10
c0004ed3:	89 c6                	mov    esi,eax
c0004ed5:	b8 11 00 00 00       	mov    eax,0x11
c0004eda:	85 f6                	test   esi,esi
c0004edc:	74 5e                	je     c0004f3c <f_chmod+0xa9>
c0004ede:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ee2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ee6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ee9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eed:	e8 27 eb ff ff       	call   c0003a19 <follow_path>
c0004ef2:	85 c0                	test   eax,eax
c0004ef4:	75 32                	jne    c0004f28 <f_chmod+0x95>
c0004ef6:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004efa:	b8 06 00 00 00       	mov    eax,0x6
c0004eff:	80 e2 a0             	and    dl,0xa0
c0004f02:	75 24                	jne    c0004f28 <f_chmod+0x95>
c0004f04:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f08:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004f0b:	31 d7                	xor    edi,edx
c0004f0d:	21 fb                	and    ebx,edi
c0004f0f:	83 e3 27             	and    ebx,0x27
c0004f12:	31 d3                	xor    ebx,edx
c0004f14:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004f17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f23:	e8 81 de ff ff       	call   c0002da9 <sync_fs>
c0004f28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f2c:	83 ec 0c             	sub    esp,0xc
c0004f2f:	56                   	push   esi
c0004f30:	e8 37 0d 00 00       	call   c0005c6c <ff_memfree>
c0004f35:	83 c4 10             	add    esp,0x10
c0004f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f3c:	83 c4 50             	add    esp,0x50
c0004f3f:	5b                   	pop    ebx
c0004f40:	5e                   	pop    esi
c0004f41:	5f                   	pop    edi
c0004f42:	c3                   	ret    

c0004f43 <f_utime>:
c0004f43:	56                   	push   esi
c0004f44:	b9 02 00 00 00       	mov    ecx,0x2
c0004f49:	53                   	push   ebx
c0004f4a:	83 ec 54             	sub    esp,0x54
c0004f4d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f51:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f55:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f59:	e8 73 d5 ff ff       	call   c00024d1 <mount_volume>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	0f 85 87 00 00 00    	jne    c0004fed <f_utime+0xaa>
c0004f66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f6a:	83 ec 0c             	sub    esp,0xc
c0004f6d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f71:	68 00 02 00 00       	push   0x200
c0004f76:	e8 d9 0c 00 00       	call   c0005c54 <ff_memalloc>
c0004f7b:	83 c4 10             	add    esp,0x10
c0004f7e:	89 c3                	mov    ebx,eax
c0004f80:	b8 11 00 00 00       	mov    eax,0x11
c0004f85:	85 db                	test   ebx,ebx
c0004f87:	74 64                	je     c0004fed <f_utime+0xaa>
c0004f89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f91:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f98:	e8 7c ea ff ff       	call   c0003a19 <follow_path>
c0004f9d:	85 c0                	test   eax,eax
c0004f9f:	75 38                	jne    c0004fd9 <f_utime+0x96>
c0004fa1:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004fa5:	b8 06 00 00 00       	mov    eax,0x6
c0004faa:	80 e2 a0             	and    dl,0xa0
c0004fad:	75 2a                	jne    c0004fd9 <f_utime+0x96>
c0004faf:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004fb3:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004fb7:	c1 e2 10             	shl    edx,0x10
c0004fba:	09 c2                	or     edx,eax
c0004fbc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fc0:	83 c0 16             	add    eax,0x16
c0004fc3:	e8 70 ce ff ff       	call   c0001e38 <st_dword>
c0004fc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fcc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fd4:	e8 d0 dd ff ff       	call   c0002da9 <sync_fs>
c0004fd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fdd:	83 ec 0c             	sub    esp,0xc
c0004fe0:	53                   	push   ebx
c0004fe1:	e8 86 0c 00 00       	call   c0005c6c <ff_memfree>
c0004fe6:	83 c4 10             	add    esp,0x10
c0004fe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fed:	83 c4 54             	add    esp,0x54
c0004ff0:	5b                   	pop    ebx
c0004ff1:	5e                   	pop    esi
c0004ff2:	c3                   	ret    

c0004ff3 <f_getlabel>:
c0004ff3:	55                   	push   ebp
c0004ff4:	31 c9                	xor    ecx,ecx
c0004ff6:	57                   	push   edi
c0004ff7:	56                   	push   esi
c0004ff8:	53                   	push   ebx
c0004ff9:	83 ec 5c             	sub    esp,0x5c
c0004ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005000:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c0005004:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005008:	e8 c4 d4 ff ff       	call   c00024d1 <mount_volume>
c000500d:	85 c0                	test   eax,eax
c000500f:	89 c3                	mov    ebx,eax
c0005011:	0f 85 d9 00 00 00    	jne    c00050f0 <f_getlabel+0xfd>
c0005017:	85 ff                	test   edi,edi
c0005019:	0f 84 d1 00 00 00    	je     c00050f0 <f_getlabel+0xfd>
c000501f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005027:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000502b:	31 d2                	xor    edx,edx
c000502d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005031:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005035:	e8 1c e3 ff ff       	call   c0003356 <dir_sdi>
c000503a:	85 c0                	test   eax,eax
c000503c:	89 c3                	mov    ebx,eax
c000503e:	0f 85 a2 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c0005044:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005048:	ba 01 00 00 00       	mov    edx,0x1
c000504d:	e8 fe e6 ff ff       	call   c0003750 <dir_read>
c0005052:	85 c0                	test   eax,eax
c0005054:	89 c3                	mov    ebx,eax
c0005056:	0f 85 8a 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c000505c:	31 f6                	xor    esi,esi
c000505e:	31 d2                	xor    edx,edx
c0005060:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005064:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005067:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000506b:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c000506f:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005074:	89 c8                	mov    eax,ecx
c0005076:	e8 13 ce ff ff       	call   c0001e8e <dbc_1st>
c000507b:	85 c0                	test   eax,eax
c000507d:	74 19                	je     c0005098 <f_getlabel+0xa5>
c000507f:	83 fd 0b             	cmp    ebp,0xb
c0005082:	74 14                	je     c0005098 <f_getlabel+0xa5>
c0005084:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005088:	c1 e1 08             	shl    ecx,0x8
c000508b:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c000508f:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005092:	09 c1                	or     ecx,eax
c0005094:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005098:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000509d:	52                   	push   edx
c000509e:	52                   	push   edx
c000509f:	68 b5 01 00 00       	push   0x1b5
c00050a4:	50                   	push   eax
c00050a5:	e8 76 0c 00 00       	call   c0005d20 <ff_oem2uni>
c00050aa:	83 c4 10             	add    esp,0x10
c00050ad:	0f b7 c0             	movzx  eax,ax
c00050b0:	85 c0                	test   eax,eax
c00050b2:	74 1f                	je     c00050d3 <f_getlabel+0xe0>
c00050b4:	8d 14 37             	lea    edx,[edi+esi*1]
c00050b7:	b9 04 00 00 00       	mov    ecx,0x4
c00050bc:	e8 ab ce ff ff       	call   c0001f6c <put_utf>
c00050c1:	0f b6 c0             	movzx  eax,al
c00050c4:	85 c0                	test   eax,eax
c00050c6:	74 0b                	je     c00050d3 <f_getlabel+0xe0>
c00050c8:	01 c6                	add    esi,eax
c00050ca:	83 fd 0b             	cmp    ebp,0xb
c00050cd:	74 06                	je     c00050d5 <f_getlabel+0xe2>
c00050cf:	89 ea                	mov    edx,ebp
c00050d1:	eb 8d                	jmp    c0005060 <f_getlabel+0x6d>
c00050d3:	31 f6                	xor    esi,esi
c00050d5:	01 fe                	add    esi,edi
c00050d7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00050da:	39 f7                	cmp    edi,esi
c00050dc:	74 12                	je     c00050f0 <f_getlabel+0xfd>
c00050de:	4e                   	dec    esi
c00050df:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00050e2:	74 f3                	je     c00050d7 <f_getlabel+0xe4>
c00050e4:	eb 0a                	jmp    c00050f0 <f_getlabel+0xfd>
c00050e6:	83 fb 04             	cmp    ebx,0x4
c00050e9:	75 05                	jne    c00050f0 <f_getlabel+0xfd>
c00050eb:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00050ee:	31 db                	xor    ebx,ebx
c00050f0:	85 db                	test   ebx,ebx
c00050f2:	75 49                	jne    c000513d <f_getlabel+0x14a>
c00050f4:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050f9:	74 42                	je     c000513d <f_getlabel+0x14a>
c00050fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050ff:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0005102:	e8 6d d2 ff ff       	call   c0002374 <move_window>
c0005107:	85 c0                	test   eax,eax
c0005109:	89 c3                	mov    ebx,eax
c000510b:	75 30                	jne    c000513d <f_getlabel+0x14a>
c000510d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005111:	b8 43 00 00 00       	mov    eax,0x43
c0005116:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c0005119:	83 f9 03             	cmp    ecx,0x3
c000511c:	74 10                	je     c000512e <f_getlabel+0x13b>
c000511e:	83 f9 04             	cmp    ecx,0x4
c0005121:	b8 64 00 00 00       	mov    eax,0x64
c0005126:	b9 27 00 00 00       	mov    ecx,0x27
c000512b:	0f 45 c1             	cmovne eax,ecx
c000512e:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005132:	e8 e5 cc ff ff       	call   c0001e1c <ld_dword>
c0005137:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000513b:	89 07                	mov    DWORD PTR [edi],eax
c000513d:	83 c4 5c             	add    esp,0x5c
c0005140:	89 d8                	mov    eax,ebx
c0005142:	5b                   	pop    ebx
c0005143:	5e                   	pop    esi
c0005144:	5f                   	pop    edi
c0005145:	5d                   	pop    ebp
c0005146:	c3                   	ret    

c0005147 <f_setlabel>:
c0005147:	57                   	push   edi
c0005148:	b9 02 00 00 00       	mov    ecx,0x2
c000514d:	56                   	push   esi
c000514e:	53                   	push   ebx
c000514f:	83 ec 50             	sub    esp,0x50
c0005152:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005156:	8d 44 24 60          	lea    eax,[esp+0x60]
c000515a:	e8 72 d3 ff ff       	call   c00024d1 <mount_volume>
c000515f:	85 c0                	test   eax,eax
c0005161:	89 c6                	mov    esi,eax
c0005163:	0f 85 65 01 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005169:	b9 0b 00 00 00       	mov    ecx,0xb
c000516e:	ba 20 00 00 00       	mov    edx,0x20
c0005173:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005177:	31 db                	xor    ebx,ebx
c0005179:	e8 d2 cc ff ff       	call   c0001e50 <mem_set>
c000517e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005182:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005185:	76 5d                	jbe    c00051e4 <f_setlabel+0x9d>
c0005187:	8d 44 24 60          	lea    eax,[esp+0x60]
c000518b:	e8 04 cd ff ff       	call   c0001e94 <tchar2uni>
c0005190:	3d ff ff 00 00       	cmp    eax,0xffff
c0005195:	76 0a                	jbe    c00051a1 <f_setlabel+0x5a>
c0005197:	be 06 00 00 00       	mov    esi,0x6
c000519c:	e9 2d 01 00 00       	jmp    c00052ce <f_setlabel+0x187>
c00051a1:	83 ec 0c             	sub    esp,0xc
c00051a4:	50                   	push   eax
c00051a5:	e8 ee 0b 00 00       	call   c0005d98 <ff_wtoupper>
c00051aa:	5a                   	pop    edx
c00051ab:	59                   	pop    ecx
c00051ac:	68 b5 01 00 00       	push   0x1b5
c00051b1:	50                   	push   eax
c00051b2:	e8 cd 0a 00 00       	call   c0005c84 <ff_uni2oem>
c00051b7:	83 c4 10             	add    esp,0x10
c00051ba:	0f b7 f0             	movzx  esi,ax
c00051bd:	85 f6                	test   esi,esi
c00051bf:	89 f7                	mov    edi,esi
c00051c1:	74 d4                	je     c0005197 <f_setlabel+0x50>
c00051c3:	89 f2                	mov    edx,esi
c00051c5:	b8 30 06 02 c0       	mov    eax,0xc0020630
c00051ca:	e8 ae cc ff ff       	call   c0001e7d <chk_chr>
c00051cf:	85 c0                	test   eax,eax
c00051d1:	75 c4                	jne    c0005197 <f_setlabel+0x50>
c00051d3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051d9:	0f 87 c9 00 00 00    	ja     c00052a8 <f_setlabel+0x161>
c00051df:	e9 e0 00 00 00       	jmp    c00052c4 <f_setlabel+0x17d>
c00051e4:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051e9:	74 ac                	je     c0005197 <f_setlabel+0x50>
c00051eb:	85 db                	test   ebx,ebx
c00051ed:	74 0e                	je     c00051fd <f_setlabel+0xb6>
c00051ef:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051f4:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051f7:	75 04                	jne    c00051fd <f_setlabel+0xb6>
c00051f9:	89 c3                	mov    ebx,eax
c00051fb:	eb ee                	jmp    c00051eb <f_setlabel+0xa4>
c00051fd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005205:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005209:	31 d2                	xor    edx,edx
c000520b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000520f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005213:	e8 3e e1 ff ff       	call   c0003356 <dir_sdi>
c0005218:	85 c0                	test   eax,eax
c000521a:	89 c6                	mov    esi,eax
c000521c:	0f 85 ac 00 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005222:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005226:	ba 01 00 00 00       	mov    edx,0x1
c000522b:	e8 20 e5 ff ff       	call   c0003750 <dir_read>
c0005230:	85 c0                	test   eax,eax
c0005232:	75 18                	jne    c000524c <f_setlabel+0x105>
c0005234:	85 db                	test   ebx,ebx
c0005236:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000523a:	74 0b                	je     c0005247 <f_setlabel+0x100>
c000523c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005240:	b9 0b 00 00 00       	mov    ecx,0xb
c0005245:	eb 47                	jmp    c000528e <f_setlabel+0x147>
c0005247:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000524a:	eb 47                	jmp    c0005293 <f_setlabel+0x14c>
c000524c:	83 f8 04             	cmp    eax,0x4
c000524f:	75 53                	jne    c00052a4 <f_setlabel+0x15d>
c0005251:	85 db                	test   ebx,ebx
c0005253:	74 79                	je     c00052ce <f_setlabel+0x187>
c0005255:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005259:	ba 01 00 00 00       	mov    edx,0x1
c000525e:	e8 88 e4 ff ff       	call   c00036eb <dir_alloc>
c0005263:	85 c0                	test   eax,eax
c0005265:	89 c6                	mov    esi,eax
c0005267:	75 65                	jne    c00052ce <f_setlabel+0x187>
c0005269:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000526d:	b9 20 00 00 00       	mov    ecx,0x20
c0005272:	31 d2                	xor    edx,edx
c0005274:	e8 d7 cb ff ff       	call   c0001e50 <mem_set>
c0005279:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000527d:	b9 0b 00 00 00       	mov    ecx,0xb
c0005282:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005286:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000528a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000528e:	e8 a8 cb ff ff       	call   c0001e3b <mem_cpy>
c0005293:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005297:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000529b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000529f:	e8 05 db ff ff       	call   c0002da9 <sync_fs>
c00052a4:	89 c6                	mov    esi,eax
c00052a6:	eb 26                	jmp    c00052ce <f_setlabel+0x187>
c00052a8:	83 fb 09             	cmp    ebx,0x9
c00052ab:	0f 87 e6 fe ff ff    	ja     c0005197 <f_setlabel+0x50>
c00052b1:	89 f0                	mov    eax,esi
c00052b3:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c00052b7:	43                   	inc    ebx
c00052b8:	89 f8                	mov    eax,edi
c00052ba:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c00052be:	43                   	inc    ebx
c00052bf:	e9 ba fe ff ff       	jmp    c000517e <f_setlabel+0x37>
c00052c4:	83 fb 0a             	cmp    ebx,0xa
c00052c7:	76 ef                	jbe    c00052b8 <f_setlabel+0x171>
c00052c9:	e9 c9 fe ff ff       	jmp    c0005197 <f_setlabel+0x50>
c00052ce:	83 c4 50             	add    esp,0x50
c00052d1:	89 f0                	mov    eax,esi
c00052d3:	5b                   	pop    ebx
c00052d4:	5e                   	pop    esi
c00052d5:	5f                   	pop    edi
c00052d6:	c3                   	ret    

c00052d7 <f_expand>:
c00052d7:	55                   	push   ebp
c00052d8:	57                   	push   edi
c00052d9:	56                   	push   esi
c00052da:	53                   	push   ebx
c00052db:	83 ec 2c             	sub    esp,0x2c
c00052de:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052ee:	89 d8                	mov    eax,ebx
c00052f0:	e8 d6 cf ff ff       	call   c00022cb <validate>
c00052f5:	85 c0                	test   eax,eax
c00052f7:	89 c6                	mov    esi,eax
c00052f9:	0f 85 3b 01 00 00    	jne    c000543a <f_expand+0x163>
c00052ff:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005303:	85 f6                	test   esi,esi
c0005305:	0f 85 2f 01 00 00    	jne    c000543a <f_expand+0x163>
c000530b:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005310:	75 0a                	jne    c000531c <f_expand+0x45>
c0005312:	be 07 00 00 00       	mov    esi,0x7
c0005317:	e9 1e 01 00 00       	jmp    c000543a <f_expand+0x163>
c000531c:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005320:	75 f0                	jne    c0005312 <f_expand+0x3b>
c0005322:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005326:	74 ea                	je     c0005312 <f_expand+0x3b>
c0005328:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000532c:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8d 47 ff             	lea    eax,[edi-0x1]
c0005336:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000533a:	0f 95 c0             	setne  al
c000533d:	31 d2                	xor    edx,edx
c000533f:	0f b6 c0             	movzx  eax,al
c0005342:	89 c5                	mov    ebp,eax
c0005344:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005348:	f7 f7                	div    edi
c000534a:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000534d:	01 e8                	add    eax,ebp
c000534f:	83 ff 01             	cmp    edi,0x1
c0005352:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005356:	76 05                	jbe    c000535d <f_expand+0x86>
c0005358:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000535b:	77 05                	ja     c0005362 <f_expand+0x8b>
c000535d:	bf 02 00 00 00       	mov    edi,0x2
c0005362:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005365:	89 fd                	mov    ebp,edi
c0005367:	31 c9                	xor    ecx,ecx
c0005369:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000536d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000536f:	89 ea                	mov    edx,ebp
c0005371:	45                   	inc    ebp
c0005372:	e8 da de ff ff       	call   c0003251 <get_fat.isra.2>
c0005377:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000537b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000537f:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005382:	77 05                	ja     c0005389 <f_expand+0xb2>
c0005384:	bd 02 00 00 00       	mov    ebp,0x2
c0005389:	83 f8 01             	cmp    eax,0x1
c000538c:	74 20                	je     c00053ae <f_expand+0xd7>
c000538e:	83 f8 ff             	cmp    eax,0xffffffff
c0005391:	74 25                	je     c00053b8 <f_expand+0xe1>
c0005393:	85 c0                	test   eax,eax
c0005395:	75 09                	jne    c00053a0 <f_expand+0xc9>
c0005397:	41                   	inc    ecx
c0005398:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000539c:	75 07                	jne    c00053a5 <f_expand+0xce>
c000539e:	eb 1f                	jmp    c00053bf <f_expand+0xe8>
c00053a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00053a3:	31 c9                	xor    ecx,ecx
c00053a5:	39 fd                	cmp    ebp,edi
c00053a7:	75 c0                	jne    c0005369 <f_expand+0x92>
c00053a9:	e9 64 ff ff ff       	jmp    c0005312 <f_expand+0x3b>
c00053ae:	be 02 00 00 00       	mov    esi,0x2
c00053b3:	e9 82 00 00 00       	jmp    c000543a <f_expand+0x163>
c00053b8:	be 01 00 00 00       	mov    esi,0x1
c00053bd:	eb 7b                	jmp    c000543a <f_expand+0x163>
c00053bf:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053c4:	74 2b                	je     c00053f1 <f_expand+0x11a>
c00053c6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053c9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053cd:	85 ed                	test   ebp,ebp
c00053cf:	74 24                	je     c00053f5 <f_expand+0x11e>
c00053d1:	83 c9 ff             	or     ecx,0xffffffff
c00053d4:	83 fd 01             	cmp    ebp,0x1
c00053d7:	74 03                	je     c00053dc <f_expand+0x105>
c00053d9:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053e0:	89 fa                	mov    edx,edi
c00053e2:	e8 e7 d3 ff ff       	call   c00027ce <put_fat>
c00053e7:	85 c0                	test   eax,eax
c00053e9:	75 4d                	jne    c0005438 <f_expand+0x161>
c00053eb:	89 f8                	mov    eax,edi
c00053ed:	4d                   	dec    ebp
c00053ee:	47                   	inc    edi
c00053ef:	eb dc                	jmp    c00053cd <f_expand+0xf6>
c00053f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053f4:	48                   	dec    eax
c00053f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053f9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053fe:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005401:	74 37                	je     c000543a <f_expand+0x163>
c0005403:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005406:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005409:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000540d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005410:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0005413:	83 c8 40             	or     eax,0x40
c0005416:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005419:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c000541c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000541f:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005422:	39 c8                	cmp    eax,ecx
c0005424:	77 14                	ja     c000543a <f_expand+0x163>
c0005426:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000542a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000542d:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005430:	83 c8 01             	or     eax,0x1
c0005433:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005436:	eb 02                	jmp    c000543a <f_expand+0x163>
c0005438:	89 c6                	mov    esi,eax
c000543a:	83 c4 2c             	add    esp,0x2c
c000543d:	89 f0                	mov    eax,esi
c000543f:	5b                   	pop    ebx
c0005440:	5e                   	pop    esi
c0005441:	5f                   	pop    edi
c0005442:	5d                   	pop    ebp
c0005443:	c3                   	ret    

c0005444 <f_mkfs>:
c0005444:	55                   	push   ebp
c0005445:	57                   	push   edi
c0005446:	56                   	push   esi
c0005447:	be 0b 00 00 00       	mov    esi,0xb
c000544c:	53                   	push   ebx
c000544d:	83 ec 5c             	sub    esp,0x5c
c0005450:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005454:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005458:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000545c:	e8 1e ce ff ff       	call   c000227f <get_ldnumber>
c0005461:	85 c0                	test   eax,eax
c0005463:	0f 88 e0 07 00 00    	js     c0005c49 <f_mkfs+0x805>
c0005469:	8b 14 85 a0 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9b60]
c0005470:	85 d2                	test   edx,edx
c0005472:	74 03                	je     c0005477 <f_mkfs+0x33>
c0005474:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005477:	85 db                	test   ebx,ebx
c0005479:	75 05                	jne    c0005480 <f_mkfs+0x3c>
c000547b:	bb 20 06 02 c0       	mov    ebx,0xc0020620
c0005480:	0f b6 c0             	movzx  eax,al
c0005483:	83 ec 0c             	sub    esp,0xc
c0005486:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000548a:	be 03 00 00 00       	mov    esi,0x3
c000548f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005493:	e8 29 c9 ff ff       	call   c0001dc1 <disk_initialize>
c0005498:	83 c4 10             	add    esp,0x10
c000549b:	a8 01                	test   al,0x1
c000549d:	0f 85 a6 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054a3:	a8 04                	test   al,0x4
c00054a5:	be 0a 00 00 00       	mov    esi,0xa
c00054aa:	0f 85 99 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054b0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00054b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00054b7:	85 c0                	test   eax,eax
c00054b9:	75 20                	jne    c00054db <f_mkfs+0x97>
c00054bb:	51                   	push   ecx
c00054bc:	8d 44 24 44          	lea    eax,[esp+0x44]
c00054c0:	50                   	push   eax
c00054c1:	6a 03                	push   0x3
c00054c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054c7:	e8 24 c9 ff ff       	call   c0001df0 <disk_ioctl>
c00054cc:	83 c4 10             	add    esp,0x10
c00054cf:	85 c0                	test   eax,eax
c00054d1:	74 08                	je     c00054db <f_mkfs+0x97>
c00054d3:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054db:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054df:	8d 42 ff             	lea    eax,[edx-0x1]
c00054e2:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054e7:	77 04                	ja     c00054ed <f_mkfs+0xa9>
c00054e9:	85 c2                	test   edx,eax
c00054eb:	74 08                	je     c00054f5 <f_mkfs+0xb1>
c00054ed:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054f5:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054f8:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005500:	48                   	dec    eax
c0005501:	3c 01                	cmp    al,0x1
c0005503:	76 05                	jbe    c000550a <f_mkfs+0xc6>
c0005505:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000550a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000550d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005511:	48                   	dec    eax
c0005512:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005517:	77 15                	ja     c000552e <f_mkfs+0xea>
c0005519:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c000551e:	b8 00 02 00 00       	mov    eax,0x200
c0005523:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005528:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000552c:	eb 08                	jmp    c0005536 <f_mkfs+0xf2>
c000552e:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005536:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005539:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000553f:	77 0f                	ja     c0005550 <f_mkfs+0x10c>
c0005541:	8d 47 ff             	lea    eax,[edi-0x1]
c0005544:	85 f8                	test   eax,edi
c0005546:	b8 00 00 00 00       	mov    eax,0x0
c000554b:	0f 45 f8             	cmovne edi,eax
c000554e:	eb 02                	jmp    c0005552 <f_mkfs+0x10e>
c0005550:	31 ff                	xor    edi,edi
c0005552:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000555a:	77 0a                	ja     c0005566 <f_mkfs+0x122>
c000555c:	be 11 00 00 00       	mov    esi,0x11
c0005561:	e9 e3 06 00 00       	jmp    c0005c49 <f_mkfs+0x805>
c0005566:	85 ed                	test   ebp,ebp
c0005568:	8b 33                	mov    esi,DWORD PTR [ebx]
c000556a:	89 eb                	mov    ebx,ebp
c000556c:	75 1e                	jne    c000558c <f_mkfs+0x148>
c000556e:	83 ec 0c             	sub    esp,0xc
c0005571:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005578:	25 00 fe ff ff       	and    eax,0xfffffe00
c000557d:	50                   	push   eax
c000557e:	e8 d1 06 00 00       	call   c0005c54 <ff_memalloc>
c0005583:	83 c4 10             	add    esp,0x10
c0005586:	85 c0                	test   eax,eax
c0005588:	89 c3                	mov    ebx,eax
c000558a:	74 d0                	je     c000555c <f_mkfs+0x118>
c000558c:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005594:	52                   	push   edx
c0005595:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005599:	50                   	push   eax
c000559a:	6a 01                	push   0x1
c000559c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00055a0:	e8 4b c8 ff ff       	call   c0001df0 <disk_ioctl>
c00055a5:	83 c4 10             	add    esp,0x10
c00055a8:	85 c0                	test   eax,eax
c00055aa:	0f 85 42 06 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00055b0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00055b8:	89 f0                	mov    eax,esi
c00055ba:	83 e0 08             	and    eax,0x8
c00055bd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00055c1:	75 18                	jne    c00055db <f_mkfs+0x197>
c00055c3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055c7:	83 f8 3f             	cmp    eax,0x3f
c00055ca:	76 0f                	jbe    c00055db <f_mkfs+0x197>
c00055cc:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00055d4:	83 e8 3f             	sub    eax,0x3f
c00055d7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00055db:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055e3:	83 f8 7f             	cmp    eax,0x7f
c00055e6:	0f 86 5f 02 00 00    	jbe    c000584b <f_mkfs+0x407>
c00055ec:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055f2:	b9 80 00 00 00       	mov    ecx,0x80
c00055f7:	77 05                	ja     c00055fe <f_mkfs+0x1ba>
c00055f9:	c1 ef 09             	shr    edi,0x9
c00055fc:	89 f9                	mov    ecx,edi
c00055fe:	89 f0                	mov    eax,esi
c0005600:	89 f7                	mov    edi,esi
c0005602:	83 e0 01             	and    eax,0x1
c0005605:	83 e7 02             	and    edi,0x2
c0005608:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000560c:	0f b6 c0             	movzx  eax,al
c000560f:	74 0a                	je     c000561b <f_mkfs+0x1d7>
c0005611:	85 c0                	test   eax,eax
c0005613:	0f 84 53 01 00 00    	je     c000576c <f_mkfs+0x328>
c0005619:	eb 37                	jmp    c0005652 <f_mkfs+0x20e>
c000561b:	85 c0                	test   eax,eax
c000561d:	be 13 00 00 00       	mov    esi,0x13
c0005622:	75 2e                	jne    c0005652 <f_mkfs+0x20e>
c0005624:	e9 e0 05 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005629:	83 f8 02             	cmp    eax,0x2
c000562c:	0f 85 11 02 00 00    	jne    c0005843 <f_mkfs+0x3ff>
c0005632:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005638:	0f 86 e8 01 00 00    	jbe    c0005826 <f_mkfs+0x3e2>
c000563e:	85 c9                	test   ecx,ecx
c0005640:	0f 85 d5 05 00 00    	jne    c0005c1b <f_mkfs+0x7d7>
c0005646:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005649:	83 f9 40             	cmp    ecx,0x40
c000564c:	0f 87 d9 05 00 00    	ja     c0005c2b <f_mkfs+0x7e7>
c0005652:	85 c9                	test   ecx,ecx
c0005654:	89 cf                	mov    edi,ecx
c0005656:	75 1c                	jne    c0005674 <f_mkfs+0x230>
c0005658:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000565c:	b8 00 06 02 c0       	mov    eax,0xc0020600
c0005661:	bf 01 00 00 00       	mov    edi,0x1
c0005666:	c1 ee 0c             	shr    esi,0xc
c0005669:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000566c:	85 d2                	test   edx,edx
c000566e:	0f 85 67 01 00 00    	jne    c00057db <f_mkfs+0x397>
c0005674:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005678:	31 d2                	xor    edx,edx
c000567a:	f7 f7                	div    edi
c000567c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005681:	0f 86 66 01 00 00    	jbe    c00057ed <f_mkfs+0x3a9>
c0005687:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000568c:	83 c0 02             	add    eax,0x2
c000568f:	01 c0                	add    eax,eax
c0005691:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005699:	05 ff 01 00 00       	add    eax,0x1ff
c000569e:	c1 e8 09             	shr    eax,0x9
c00056a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00056a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056a9:	c1 e0 05             	shl    eax,0x5
c00056ac:	c1 e8 09             	shr    eax,0x9
c00056af:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00056b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00056b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00056bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00056c0:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00056c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00056c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00056cc:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00056d1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00056d5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00056d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056e1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e5:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056e9:	f7 d8                	neg    eax
c00056eb:	21 c6                	and    esi,eax
c00056ed:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056f2:	29 d6                	sub    esi,edx
c00056f4:	83 f8 03             	cmp    eax,0x3
c00056f7:	0f 85 03 01 00 00    	jne    c0005800 <f_mkfs+0x3bc>
c00056fd:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005701:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005705:	89 f8                	mov    eax,edi
c0005707:	c1 e0 04             	shl    eax,0x4
c000570a:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c000570e:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005712:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005716:	0f 82 2f 01 00 00    	jb     c000584b <f_mkfs+0x407>
c000571c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005720:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005724:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005728:	89 c2                	mov    edx,eax
c000572a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000572e:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005733:	29 c2                	sub    edx,eax
c0005735:	89 d0                	mov    eax,edx
c0005737:	31 d2                	xor    edx,edx
c0005739:	f7 f7                	div    edi
c000573b:	89 c6                	mov    esi,eax
c000573d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005742:	83 f8 03             	cmp    eax,0x3
c0005745:	0f 85 de fe ff ff    	jne    c0005629 <f_mkfs+0x1e5>
c000574b:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005751:	0f 87 03 01 00 00    	ja     c000585a <f_mkfs+0x416>
c0005757:	85 c9                	test   ecx,ecx
c0005759:	0f 85 ec 00 00 00    	jne    c000584b <f_mkfs+0x407>
c000575f:	83 ff 01             	cmp    edi,0x1
c0005762:	0f 86 e3 00 00 00    	jbe    c000584b <f_mkfs+0x407>
c0005768:	d1 ef                	shr    edi,1
c000576a:	89 f9                	mov    ecx,edi
c000576c:	85 c9                	test   ecx,ecx
c000576e:	89 ce                	mov    esi,ecx
c0005770:	75 25                	jne    c0005797 <f_mkfs+0x353>
c0005772:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005776:	b8 10 06 02 c0       	mov    eax,0xc0020610
c000577b:	b9 01 00 00 00       	mov    ecx,0x1
c0005780:	c1 ee 11             	shr    esi,0x11
c0005783:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005786:	85 d2                	test   edx,edx
c0005788:	74 0b                	je     c0005795 <f_mkfs+0x351>
c000578a:	83 c0 02             	add    eax,0x2
c000578d:	39 f2                	cmp    edx,esi
c000578f:	77 04                	ja     c0005795 <f_mkfs+0x351>
c0005791:	01 c9                	add    ecx,ecx
c0005793:	eb ee                	jmp    c0005783 <f_mkfs+0x33f>
c0005795:	31 f6                	xor    esi,esi
c0005797:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000579b:	31 d2                	xor    edx,edx
c000579d:	f7 f1                	div    ecx
c000579f:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00057a6:	2d f6 ff 00 00       	sub    eax,0xfff6
c00057ab:	c1 ea 09             	shr    edx,0x9
c00057ae:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00057b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00057b7:	0f 87 8e 00 00 00    	ja     c000584b <f_mkfs+0x407>
c00057bd:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00057c5:	89 cf                	mov    edi,ecx
c00057c7:	89 f1                	mov    ecx,esi
c00057c9:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00057d1:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00057d6:	e9 d8 fe ff ff       	jmp    c00056b3 <f_mkfs+0x26f>
c00057db:	83 c0 02             	add    eax,0x2
c00057de:	39 f2                	cmp    edx,esi
c00057e0:	0f 87 8e fe ff ff    	ja     c0005674 <f_mkfs+0x230>
c00057e6:	01 ff                	add    edi,edi
c00057e8:	e9 7c fe ff ff       	jmp    c0005669 <f_mkfs+0x225>
c00057ed:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057f2:	8d 04 40             	lea    eax,[eax+eax*2]
c00057f5:	40                   	inc    eax
c00057f6:	d1 e8                	shr    eax,1
c00057f8:	83 c0 03             	add    eax,0x3
c00057fb:	e9 91 fe ff ff       	jmp    c0005691 <f_mkfs+0x24d>
c0005800:	31 d2                	xor    edx,edx
c0005802:	89 f0                	mov    eax,esi
c0005804:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005808:	85 d2                	test   edx,edx
c000580a:	74 09                	je     c0005815 <f_mkfs+0x3d1>
c000580c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005810:	4e                   	dec    esi
c0005811:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005815:	89 f0                	mov    eax,esi
c0005817:	31 d2                	xor    edx,edx
c0005819:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000581d:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005821:	e9 df fe ff ff       	jmp    c0005705 <f_mkfs+0x2c1>
c0005826:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c000582c:	77 2c                	ja     c000585a <f_mkfs+0x416>
c000582e:	85 c9                	test   ecx,ecx
c0005830:	75 19                	jne    c000584b <f_mkfs+0x407>
c0005832:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005835:	81 f9 80 00 00 00    	cmp    ecx,0x80
c000583b:	0f 86 11 fe ff ff    	jbe    c0005652 <f_mkfs+0x20e>
c0005841:	eb 08                	jmp    c000584b <f_mkfs+0x407>
c0005843:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005849:	76 0a                	jbe    c0005855 <f_mkfs+0x411>
c000584b:	be 0e 00 00 00       	mov    esi,0xe
c0005850:	e9 b4 03 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005855:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000585a:	31 d2                	xor    edx,edx
c000585c:	b9 00 02 00 00       	mov    ecx,0x200
c0005861:	89 d8                	mov    eax,ebx
c0005863:	e8 e8 c5 ff ff       	call   c0001e50 <mem_set>
c0005868:	b9 0b 00 00 00       	mov    ecx,0xb
c000586d:	ba b2 05 02 c0       	mov    edx,0xc00205b2
c0005872:	89 d8                	mov    eax,ebx
c0005874:	e8 c2 c5 ff ff       	call   c0001e3b <mem_cpy>
c0005879:	8d 43 0b             	lea    eax,[ebx+0xb]
c000587c:	ba 00 02 00 00       	mov    edx,0x200
c0005881:	e8 ae c5 ff ff       	call   c0001e34 <st_word>
c0005886:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000588b:	89 f8                	mov    eax,edi
c000588d:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005890:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005893:	e8 9c c5 ff ff       	call   c0001e34 <st_word>
c0005898:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000589c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000589f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058a4:	83 f8 03             	cmp    eax,0x3
c00058a7:	b8 00 00 00 00       	mov    eax,0x0
c00058ac:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c00058b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00058b5:	8d 43 11             	lea    eax,[ebx+0x11]
c00058b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bc:	e8 73 c5 ff ff       	call   c0001e34 <st_word>
c00058c1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058c5:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00058cb:	77 0a                	ja     c00058d7 <f_mkfs+0x493>
c00058cd:	8d 43 13             	lea    eax,[ebx+0x13]
c00058d0:	e8 5f c5 ff ff       	call   c0001e34 <st_word>
c00058d5:	eb 08                	jmp    c00058df <f_mkfs+0x49b>
c00058d7:	8d 43 20             	lea    eax,[ebx+0x20]
c00058da:	e8 59 c5 ff ff       	call   c0001e38 <st_dword>
c00058df:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058e3:	8d 43 18             	lea    eax,[ebx+0x18]
c00058e6:	ba 3f 00 00 00       	mov    edx,0x3f
c00058eb:	e8 44 c5 ff ff       	call   c0001e34 <st_word>
c00058f0:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058f3:	ba ff 00 00 00       	mov    edx,0xff
c00058f8:	e8 37 c5 ff ff       	call   c0001e34 <st_word>
c00058fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005901:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005904:	e8 2f c5 ff ff       	call   c0001e38 <st_dword>
c0005909:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000590e:	83 f8 03             	cmp    eax,0x3
c0005911:	75 57                	jne    c000596a <f_mkfs+0x526>
c0005913:	8d 43 43             	lea    eax,[ebx+0x43]
c0005916:	ba 00 00 21 50       	mov    edx,0x50210000
c000591b:	e8 18 c5 ff ff       	call   c0001e38 <st_dword>
c0005920:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005924:	8d 43 24             	lea    eax,[ebx+0x24]
c0005927:	e8 0c c5 ff ff       	call   c0001e38 <st_dword>
c000592c:	8d 43 2c             	lea    eax,[ebx+0x2c]
c000592f:	ba 02 00 00 00       	mov    edx,0x2
c0005934:	e8 ff c4 ff ff       	call   c0001e38 <st_dword>
c0005939:	8d 43 30             	lea    eax,[ebx+0x30]
c000593c:	ba 01 00 00 00       	mov    edx,0x1
c0005941:	e8 ee c4 ff ff       	call   c0001e34 <st_word>
c0005946:	8d 43 32             	lea    eax,[ebx+0x32]
c0005949:	ba 06 00 00 00       	mov    edx,0x6
c000594e:	e8 e1 c4 ff ff       	call   c0001e34 <st_word>
c0005953:	8d 43 47             	lea    eax,[ebx+0x47]
c0005956:	b9 13 00 00 00       	mov    ecx,0x13
c000595b:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c000595f:	ba be 05 02 c0       	mov    edx,0xc00205be
c0005964:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005968:	eb 2f                	jmp    c0005999 <f_mkfs+0x555>
c000596a:	8d 43 27             	lea    eax,[ebx+0x27]
c000596d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005972:	e8 c1 c4 ff ff       	call   c0001e38 <st_dword>
c0005977:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000597c:	8d 43 16             	lea    eax,[ebx+0x16]
c000597f:	e8 b0 c4 ff ff       	call   c0001e34 <st_word>
c0005984:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005987:	b9 13 00 00 00       	mov    ecx,0x13
c000598c:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005990:	ba d2 05 02 c0       	mov    edx,0xc00205d2
c0005995:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005999:	e8 9d c4 ff ff       	call   c0001e3b <mem_cpy>
c000599e:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059a4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00059ad:	e8 82 c4 ff ff       	call   c0001e34 <st_word>
c00059b2:	6a 01                	push   0x1
c00059b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059b8:	53                   	push   ebx
c00059b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059bd:	e8 18 c4 ff ff       	call   c0001dda <disk_write>
c00059c2:	83 c4 10             	add    esp,0x10
c00059c5:	85 c0                	test   eax,eax
c00059c7:	0f 85 25 02 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00059cd:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00059d2:	83 f8 03             	cmp    eax,0x3
c00059d5:	0f 85 98 00 00 00    	jne    c0005a73 <f_mkfs+0x62f>
c00059db:	6a 01                	push   0x1
c00059dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00059e1:	83 c0 06             	add    eax,0x6
c00059e4:	50                   	push   eax
c00059e5:	53                   	push   ebx
c00059e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059ea:	e8 eb c3 ff ff       	call   c0001dda <disk_write>
c00059ef:	b9 00 02 00 00       	mov    ecx,0x200
c00059f4:	31 d2                	xor    edx,edx
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 53 c4 ff ff       	call   c0001e50 <mem_set>
c00059fd:	ba 52 52 61 41       	mov    edx,0x41615252
c0005a02:	89 d8                	mov    eax,ebx
c0005a04:	e8 2f c4 ff ff       	call   c0001e38 <st_dword>
c0005a09:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005a0f:	ba 72 72 41 61       	mov    edx,0x61417272
c0005a14:	e8 1f c4 ff ff       	call   c0001e38 <st_dword>
c0005a19:	8d 56 ff             	lea    edx,[esi-0x1]
c0005a1c:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005a22:	e8 11 c4 ff ff       	call   c0001e38 <st_dword>
c0005a27:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005a2d:	ba 02 00 00 00       	mov    edx,0x2
c0005a32:	e8 01 c4 ff ff       	call   c0001e38 <st_dword>
c0005a37:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005a3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005a42:	e8 ed c3 ff ff       	call   c0001e34 <st_word>
c0005a47:	6a 01                	push   0x1
c0005a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005a4d:	83 c0 07             	add    eax,0x7
c0005a50:	50                   	push   eax
c0005a51:	53                   	push   ebx
c0005a52:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a56:	e8 7f c3 ff ff       	call   c0001dda <disk_write>
c0005a5b:	83 c4 20             	add    esp,0x20
c0005a5e:	6a 01                	push   0x1
c0005a60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005a64:	40                   	inc    eax
c0005a65:	50                   	push   eax
c0005a66:	53                   	push   ebx
c0005a67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a6b:	e8 6a c3 ff ff       	call   c0001dda <disk_write>
c0005a70:	83 c4 10             	add    esp,0x10
c0005a73:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a77:	31 d2                	xor    edx,edx
c0005a79:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a7d:	c1 e8 09             	shr    eax,0x9
c0005a80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a84:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a8a:	89 d8                	mov    eax,ebx
c0005a8c:	e8 bf c3 ff ff       	call   c0001e50 <mem_set>
c0005a91:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a96:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005a9b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005aa3:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005aa8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005aac:	83 f8 01             	cmp    eax,0x1
c0005aaf:	0f 44 d1             	cmove  edx,ecx
c0005ab2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005ab6:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005abb:	75 21                	jne    c0005ade <f_mkfs+0x69a>
c0005abd:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 6f c3 ff ff       	call   c0001e38 <st_dword>
c0005ac9:	8d 43 04             	lea    eax,[ebx+0x4]
c0005acc:	83 ca ff             	or     edx,0xffffffff
c0005acf:	e8 64 c3 ff ff       	call   c0001e38 <st_dword>
c0005ad4:	8d 43 08             	lea    eax,[ebx+0x8]
c0005ad7:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005adc:	eb 06                	jmp    c0005ae4 <f_mkfs+0x6a0>
c0005ade:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005ae2:	89 d8                	mov    eax,ebx
c0005ae4:	e8 4f c3 ff ff       	call   c0001e38 <st_dword>
c0005ae9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005af1:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005af5:	0f 46 c6             	cmovbe eax,esi
c0005af8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005afc:	50                   	push   eax
c0005afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b01:	53                   	push   ebx
c0005b02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b06:	e8 cf c2 ff ff       	call   c0001dda <disk_write>
c0005b0b:	83 c4 10             	add    esp,0x10
c0005b0e:	85 c0                	test   eax,eax
c0005b10:	0f 85 dc 00 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b16:	b9 00 02 00 00       	mov    ecx,0x200
c0005b1b:	31 d2                	xor    edx,edx
c0005b1d:	89 d8                	mov    eax,ebx
c0005b1f:	e8 2c c3 ff ff       	call   c0001e50 <mem_set>
c0005b24:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005b28:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005b2c:	29 ce                	sub    esi,ecx
c0005b2e:	75 bd                	jne    c0005aed <f_mkfs+0x6a9>
c0005b30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b34:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005b3c:	40                   	inc    eax
c0005b3d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b41:	0f 87 6f ff ff ff    	ja     c0005ab6 <f_mkfs+0x672>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	83 f8 03             	cmp    eax,0x3
c0005b4f:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005b54:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b58:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b5c:	0f 46 f7             	cmovbe esi,edi
c0005b5f:	56                   	push   esi
c0005b60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b64:	53                   	push   ebx
c0005b65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b69:	e8 6c c2 ff ff       	call   c0001dda <disk_write>
c0005b6e:	83 c4 10             	add    esp,0x10
c0005b71:	85 c0                	test   eax,eax
c0005b73:	75 7d                	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b75:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b79:	29 f7                	sub    edi,esi
c0005b7b:	75 d7                	jne    c0005b54 <f_mkfs+0x710>
c0005b7d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b82:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b87:	83 f8 03             	cmp    eax,0x3
c0005b8a:	74 1e                	je     c0005baa <f_mkfs+0x766>
c0005b8c:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b94:	b9 06 00 00 00       	mov    ecx,0x6
c0005b99:	77 0f                	ja     c0005baa <f_mkfs+0x766>
c0005b9b:	83 f8 02             	cmp    eax,0x2
c0005b9e:	b9 04 00 00 00       	mov    ecx,0x4
c0005ba3:	74 05                	je     c0005baa <f_mkfs+0x766>
c0005ba5:	b9 01 00 00 00       	mov    ecx,0x1
c0005baa:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005baf:	75 2a                	jne    c0005bdb <f_mkfs+0x797>
c0005bb1:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005bb9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005bbd:	83 ec 0c             	sub    esp,0xc
c0005bc0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005bc4:	53                   	push   ebx
c0005bc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005bc9:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005bcd:	e8 87 d2 ff ff       	call   c0002e59 <create_partition>
c0005bd2:	83 c4 10             	add    esp,0x10
c0005bd5:	85 c0                	test   eax,eax
c0005bd7:	89 c6                	mov    esi,eax
c0005bd9:	75 2e                	jne    c0005c09 <f_mkfs+0x7c5>
c0005bdb:	50                   	push   eax
c0005bdc:	31 f6                	xor    esi,esi
c0005bde:	6a 00                	push   0x0
c0005be0:	6a 00                	push   0x0
c0005be2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005be6:	e8 05 c2 ff ff       	call   c0001df0 <disk_ioctl>
c0005beb:	83 c4 10             	add    esp,0x10
c0005bee:	85 c0                	test   eax,eax
c0005bf0:	74 17                	je     c0005c09 <f_mkfs+0x7c5>
c0005bf2:	85 ed                	test   ebp,ebp
c0005bf4:	75 0c                	jne    c0005c02 <f_mkfs+0x7be>
c0005bf6:	83 ec 0c             	sub    esp,0xc
c0005bf9:	53                   	push   ebx
c0005bfa:	e8 6d 00 00 00       	call   c0005c6c <ff_memfree>
c0005bff:	83 c4 10             	add    esp,0x10
c0005c02:	be 01 00 00 00       	mov    esi,0x1
c0005c07:	eb 40                	jmp    c0005c49 <f_mkfs+0x805>
c0005c09:	85 ed                	test   ebp,ebp
c0005c0b:	75 3c                	jne    c0005c49 <f_mkfs+0x805>
c0005c0d:	83 ec 0c             	sub    esp,0xc
c0005c10:	53                   	push   ebx
c0005c11:	e8 56 00 00 00       	call   c0005c6c <ff_memfree>
c0005c16:	83 c4 10             	add    esp,0x10
c0005c19:	eb 2e                	jmp    c0005c49 <f_mkfs+0x805>
c0005c1b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c20:	0f 85 46 fb ff ff    	jne    c000576c <f_mkfs+0x328>
c0005c26:	e9 20 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c2b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c30:	0f 85 3c fb ff ff    	jne    c0005772 <f_mkfs+0x32e>
c0005c36:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c3c:	89 cf                	mov    edi,ecx
c0005c3e:	0f 86 30 fa ff ff    	jbe    c0005674 <f_mkfs+0x230>
c0005c44:	e9 02 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c49:	83 c4 5c             	add    esp,0x5c
c0005c4c:	89 f0                	mov    eax,esi
c0005c4e:	5b                   	pop    ebx
c0005c4f:	5e                   	pop    esi
c0005c50:	5f                   	pop    edi
c0005c51:	5d                   	pop    ebp
c0005c52:	c3                   	ret    
c0005c53:	90                   	nop

c0005c54 <ff_memalloc>:
c0005c54:	83 ec 0c             	sub    esp,0xc
c0005c57:	83 ec 0c             	sub    esp,0xc
c0005c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c5e:	e8 70 1e 00 00       	call   c0007ad3 <malloc>
c0005c63:	83 c4 10             	add    esp,0x10
c0005c66:	83 c4 0c             	add    esp,0xc
c0005c69:	c3                   	ret    
c0005c6a:	66 90                	xchg   ax,ax

c0005c6c <ff_memfree>:
c0005c6c:	83 ec 0c             	sub    esp,0xc
c0005c6f:	83 ec 0c             	sub    esp,0xc
c0005c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c76:	e8 68 1e 00 00       	call   c0007ae3 <free>
c0005c7b:	83 c4 10             	add    esp,0x10
c0005c7e:	90                   	nop
c0005c7f:	83 c4 0c             	add    esp,0xc
c0005c82:	c3                   	ret    
c0005c83:	90                   	nop

c0005c84 <ff_uni2oem>:
c0005c84:	83 ec 14             	sub    esp,0x14
c0005c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c8b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c8f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c96:	c7 44 24 0c 00 0a 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020a00
c0005c9e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005ca3:	77 0b                	ja     c0005cb0 <ff_uni2oem+0x2c>
c0005ca5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ca9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cae:	eb 64                	jmp    c0005d14 <ff_uni2oem+0x90>
c0005cb0:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005cb8:	77 5a                	ja     c0005d14 <ff_uni2oem+0x90>
c0005cba:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005cbe:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005cc3:	75 4f                	jne    c0005d14 <ff_uni2oem+0x90>
c0005cc5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ccc:	eb 12                	jmp    c0005ce0 <ff_uni2oem+0x5c>
c0005cce:	66 90                	xchg   ax,ax
c0005cd0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd5:	83 c0 01             	add    eax,0x1
c0005cd8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ce0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ce5:	83 f8 7f             	cmp    eax,0x7f
c0005ce8:	77 1a                	ja     c0005d04 <ff_uni2oem+0x80>
c0005cea:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cef:	8d 14 00             	lea    edx,[eax+eax*1]
c0005cf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cf6:	01 d0                	add    eax,edx
c0005cf8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cfb:	0f b7 c0             	movzx  eax,ax
c0005cfe:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005d02:	75 cc                	jne    c0005cd0 <ff_uni2oem+0x4c>
c0005d04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d09:	83 e8 80             	sub    eax,0xffffff80
c0005d0c:	0f b6 c0             	movzx  eax,al
c0005d0f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005d14:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d19:	83 c4 14             	add    esp,0x14
c0005d1c:	c3                   	ret    
c0005d1d:	8d 76 00             	lea    esi,[esi+0x0]

c0005d20 <ff_oem2uni>:
c0005d20:	83 ec 18             	sub    esp,0x18
c0005d23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005d27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005d2b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d30:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d34:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d3b:	c7 44 24 10 00 0a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020a00
c0005d43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d48:	83 f8 7f             	cmp    eax,0x7f
c0005d4b:	77 0b                	ja     c0005d58 <ff_oem2uni+0x38>
c0005d4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d51:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d56:	eb 34                	jmp    c0005d8c <ff_oem2uni+0x6c>
c0005d58:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d5c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d61:	75 29                	jne    c0005d8c <ff_oem2uni+0x6c>
c0005d63:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d68:	3d ff 00 00 00       	cmp    eax,0xff
c0005d6d:	77 1d                	ja     c0005d8c <ff_oem2uni+0x6c>
c0005d6f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d74:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d79:	8d 14 00             	lea    edx,[eax+eax*1]
c0005d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d80:	01 d0                	add    eax,edx
c0005d82:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d85:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d8a:	66 90                	xchg   ax,ax
c0005d8c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d91:	83 c4 18             	add    esp,0x18
c0005d94:	c3                   	ret    
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]

c0005d98 <ff_wtoupper>:
c0005d98:	83 ec 10             	sub    esp,0x10
c0005d9b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005da3:	0f 87 a7 01 00 00    	ja     c0005f50 <ff_wtoupper+0x1b8>
c0005da9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005dad:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005db2:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005db7:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005dbc:	77 0a                	ja     c0005dc8 <ff_wtoupper+0x30>
c0005dbe:	b8 00 08 02 c0       	mov    eax,0xc0020800
c0005dc3:	eb 0b                	jmp    c0005dd0 <ff_wtoupper+0x38>
c0005dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005dc8:	b8 40 07 02 c0       	mov    eax,0xc0020740
c0005dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0005dd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dd8:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ddf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005de7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dec:	85 c0                	test   eax,eax
c0005dee:	0f 84 50 01 00 00    	je     c0005f44 <ff_wtoupper+0x1ac>
c0005df4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005df9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dfe:	39 c2                	cmp    edx,eax
c0005e00:	0f 82 3e 01 00 00    	jb     c0005f44 <ff_wtoupper+0x1ac>
c0005e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e0a:	8d 50 02             	lea    edx,[eax+0x2]
c0005e0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005e11:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e14:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e19:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005e1e:	c1 e8 08             	shr    eax,0x8
c0005e21:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005e26:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005e2b:	0f b6 c0             	movzx  eax,al
c0005e2e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e33:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e38:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e3d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e42:	01 ca                	add    edx,ecx
c0005e44:	39 d0                	cmp    eax,edx
c0005e46:	0f 8d d4 00 00 00    	jge    c0005f20 <ff_wtoupper+0x188>
c0005e4c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e51:	83 f8 08             	cmp    eax,0x8
c0005e54:	0f 87 e6 00 00 00    	ja     c0005f40 <ff_wtoupper+0x1a8>
c0005e5a:	8b 04 85 00 07 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf900]
c0005e61:	ff e0                	jmp    eax
c0005e63:	90                   	nop
c0005e64:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e69:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e6e:	29 c2                	sub    edx,eax
c0005e70:	89 d0                	mov    eax,edx
c0005e72:	8d 14 00             	lea    edx,[eax+eax*1]
c0005e75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e79:	01 d0                	add    eax,edx
c0005e7b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e7e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e83:	e9 94 00 00 00       	jmp    c0005f1c <ff_wtoupper+0x184>
c0005e88:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e91:	89 d1                	mov    ecx,edx
c0005e93:	29 c1                	sub    ecx,eax
c0005e95:	89 c8                	mov    eax,ecx
c0005e97:	83 e0 01             	and    eax,0x1
c0005e9a:	89 c2                	mov    edx,eax
c0005e9c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea1:	29 d0                	sub    eax,edx
c0005ea3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ea8:	eb 72                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eaa:	66 90                	xchg   ax,ax
c0005eac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb1:	83 e8 10             	sub    eax,0x10
c0005eb4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eb9:	eb 61                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ebb:	90                   	nop
c0005ebc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec1:	83 e8 20             	sub    eax,0x20
c0005ec4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ec9:	eb 51                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ecb:	90                   	nop
c0005ecc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed1:	83 e8 30             	sub    eax,0x30
c0005ed4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ed9:	eb 41                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005edb:	90                   	nop
c0005edc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee1:	83 e8 1a             	sub    eax,0x1a
c0005ee4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ee9:	eb 31                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eeb:	90                   	nop
c0005eec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ef1:	83 c0 08             	add    eax,0x8
c0005ef4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ef9:	eb 21                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005efb:	90                   	nop
c0005efc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f01:	83 e8 50             	sub    eax,0x50
c0005f04:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f09:	eb 11                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005f0b:	90                   	nop
c0005f0c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f11:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005f16:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f1b:	90                   	nop
c0005f1c:	eb 22                	jmp    c0005f40 <ff_wtoupper+0x1a8>
c0005f1e:	66 90                	xchg   ax,ax
c0005f20:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f25:	85 c0                	test   eax,eax
c0005f27:	0f 85 a7 fe ff ff    	jne    c0005dd4 <ff_wtoupper+0x3c>
c0005f2d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f32:	d1 e0                	shl    eax,1
c0005f34:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f38:	e9 97 fe ff ff       	jmp    c0005dd4 <ff_wtoupper+0x3c>
c0005f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f40:	90                   	nop
c0005f41:	8d 76 00             	lea    esi,[esi+0x0]
c0005f44:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f54:	83 c4 10             	add    esp,0x10
c0005f57:	c3                   	ret    

c0005f58 <utf2ucs>:
c0005f58:	57                   	push   edi
c0005f59:	31 c9                	xor    ecx,ecx
c0005f5b:	56                   	push   esi
c0005f5c:	89 d7                	mov    edi,edx
c0005f5e:	53                   	push   ebx
c0005f5f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f63:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f67:	89 de                	mov    esi,ebx
c0005f69:	c1 fe 08             	sar    esi,0x8
c0005f6c:	89 f2                	mov    edx,esi
c0005f6e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f71:	41                   	inc    ecx
c0005f72:	85 db                	test   ebx,ebx
c0005f74:	75 e9                	jne    c0005f5f <utf2ucs+0x7>
c0005f76:	5b                   	pop    ebx
c0005f77:	5e                   	pop    esi
c0005f78:	5f                   	pop    edi
c0005f79:	c3                   	ret    

c0005f7a <ucs2utfn>:
c0005f7a:	83 e1 fe             	and    ecx,0xfffffffe
c0005f7d:	01 d1                	add    ecx,edx
c0005f7f:	39 d1                	cmp    ecx,edx
c0005f81:	75 04                	jne    c0005f87 <ucs2utfn+0xd>
c0005f83:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f86:	c3                   	ret    
c0005f87:	57                   	push   edi
c0005f88:	56                   	push   esi
c0005f89:	53                   	push   ebx
c0005f8a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f8d:	83 c2 02             	add    edx,0x2
c0005f90:	89 de                	mov    esi,ebx
c0005f92:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f96:	c1 e6 08             	shl    esi,0x8
c0005f99:	09 f3                	or     ebx,esi
c0005f9b:	83 fb 3b             	cmp    ebx,0x3b
c0005f9e:	74 50                	je     c0005ff0 <ucs2utfn+0x76>
c0005fa0:	83 fb 7f             	cmp    ebx,0x7f
c0005fa3:	7f 05                	jg     c0005faa <ucs2utfn+0x30>
c0005fa5:	88 18                	mov    BYTE PTR [eax],bl
c0005fa7:	40                   	inc    eax
c0005fa8:	eb 42                	jmp    c0005fec <ucs2utfn+0x72>
c0005faa:	89 df                	mov    edi,ebx
c0005fac:	89 de                	mov    esi,ebx
c0005fae:	c1 fe 06             	sar    esi,0x6
c0005fb1:	83 e7 3f             	and    edi,0x3f
c0005fb4:	83 cf 80             	or     edi,0xffffff80
c0005fb7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005fbd:	7f 12                	jg     c0005fd1 <ucs2utfn+0x57>
c0005fbf:	83 ce c0             	or     esi,0xffffffc0
c0005fc2:	83 c0 02             	add    eax,0x2
c0005fc5:	89 f3                	mov    ebx,esi
c0005fc7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fca:	89 fb                	mov    ebx,edi
c0005fcc:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fcf:	eb 1b                	jmp    c0005fec <ucs2utfn+0x72>
c0005fd1:	c1 fb 0c             	sar    ebx,0xc
c0005fd4:	83 e6 3f             	and    esi,0x3f
c0005fd7:	83 cb e0             	or     ebx,0xffffffe0
c0005fda:	83 ce 80             	or     esi,0xffffff80
c0005fdd:	88 18                	mov    BYTE PTR [eax],bl
c0005fdf:	89 f3                	mov    ebx,esi
c0005fe1:	83 c0 03             	add    eax,0x3
c0005fe4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fe7:	89 fb                	mov    ebx,edi
c0005fe9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fec:	39 d1                	cmp    ecx,edx
c0005fee:	75 9a                	jne    c0005f8a <ucs2utfn+0x10>
c0005ff0:	5b                   	pop    ebx
c0005ff1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005ff4:	5e                   	pop    esi
c0005ff5:	5f                   	pop    edi
c0005ff6:	c3                   	ret    

c0005ff7 <isjoliet>:
c0005ff7:	31 d2                	xor    edx,edx
c0005ff9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005ffc:	75 26                	jne    c0006024 <isjoliet+0x2d>
c0005ffe:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0006002:	75 20                	jne    c0006024 <isjoliet+0x2d>
c0006004:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0006008:	ba 02 00 00 00       	mov    edx,0x2
c000600d:	83 f8 43             	cmp    eax,0x43
c0006010:	74 12                	je     c0006024 <isjoliet+0x2d>
c0006012:	83 f8 45             	cmp    eax,0x45
c0006015:	ba 03 00 00 00       	mov    edx,0x3
c000601a:	74 08                	je     c0006024 <isjoliet+0x2d>
c000601c:	31 d2                	xor    edx,edx
c000601e:	83 f8 40             	cmp    eax,0x40
c0006021:	0f 94 c2             	sete   dl
c0006024:	89 d0                	mov    eax,edx
c0006026:	c3                   	ret    

c0006027 <htohl_32>:
c0006027:	8b 00                	mov    eax,DWORD PTR [eax]
c0006029:	c3                   	ret    

c000602a <iso_733>:
c000602a:	eb fb                	jmp    c0006027 <htohl_32>

c000602c <bgrad_cache>:
c000602c:	83 fa 0e             	cmp    edx,0xe
c000602f:	77 16                	ja     c0006047 <bgrad_cache+0x1b>
c0006031:	53                   	push   ebx
c0006032:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006035:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006039:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000603c:	42                   	inc    edx
c000603d:	83 fa 0f             	cmp    edx,0xf
c0006040:	75 f3                	jne    c0006035 <bgrad_cache+0x9>
c0006042:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006045:	5b                   	pop    ebx
c0006046:	c3                   	ret    
c0006047:	c3                   	ret    

c0006048 <ucscompare>:
c0006048:	55                   	push   ebp
c0006049:	57                   	push   edi
c000604a:	89 c7                	mov    edi,eax
c000604c:	56                   	push   esi
c000604d:	89 d6                	mov    esi,edx
c000604f:	53                   	push   ebx
c0006050:	31 d2                	xor    edx,edx
c0006052:	83 ec 1c             	sub    esp,0x1c
c0006055:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006059:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000605e:	c1 e3 08             	shl    ebx,0x8
c0006061:	09 c3                	or     ebx,eax
c0006063:	39 ca                	cmp    edx,ecx
c0006065:	7d 42                	jge    c00060a9 <ucscompare+0x61>
c0006067:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000606b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000606f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006073:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006078:	c1 e0 08             	shl    eax,0x8
c000607b:	09 e8                	or     eax,ebp
c000607d:	83 f8 3b             	cmp    eax,0x3b
c0006080:	74 27                	je     c00060a9 <ucscompare+0x61>
c0006082:	83 ec 0c             	sub    esp,0xc
c0006085:	50                   	push   eax
c0006086:	e8 f5 a8 ff ff       	call   c0000980 <tolower>
c000608b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000608e:	89 c5                	mov    ebp,eax
c0006090:	e8 eb a8 ff ff       	call   c0000980 <tolower>
c0006095:	83 c4 10             	add    esp,0x10
c0006098:	39 c5                	cmp    ebp,eax
c000609a:	75 20                	jne    c00060bc <ucscompare+0x74>
c000609c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00060a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00060a4:	83 c2 02             	add    edx,0x2
c00060a7:	eb ac                	jmp    c0006055 <ucscompare+0xd>
c00060a9:	83 fb 2f             	cmp    ebx,0x2f
c00060ac:	0f 95 c2             	setne  dl
c00060af:	31 c0                	xor    eax,eax
c00060b1:	85 db                	test   ebx,ebx
c00060b3:	0f 95 c0             	setne  al
c00060b6:	21 d0                	and    eax,edx
c00060b8:	f7 d8                	neg    eax
c00060ba:	eb 03                	jmp    c00060bf <ucscompare+0x77>
c00060bc:	83 c8 ff             	or     eax,0xffffffff
c00060bf:	83 c4 1c             	add    esp,0x1c
c00060c2:	5b                   	pop    ebx
c00060c3:	5e                   	pop    esi
c00060c4:	5f                   	pop    edi
c00060c5:	5d                   	pop    ebp
c00060c6:	c3                   	ret    

c00060c7 <fncompare>:
c00060c7:	55                   	push   ebp
c00060c8:	57                   	push   edi
c00060c9:	89 c7                	mov    edi,eax
c00060cb:	56                   	push   esi
c00060cc:	89 ce                	mov    esi,ecx
c00060ce:	53                   	push   ebx
c00060cf:	31 db                	xor    ebx,ebx
c00060d1:	83 ec 1c             	sub    esp,0x1c
c00060d4:	39 d3                	cmp    ebx,edx
c00060d6:	7d 45                	jge    c000611d <fncompare+0x56>
c00060d8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060dc:	83 f8 3b             	cmp    eax,0x3b
c00060df:	74 3c                	je     c000611d <fncompare+0x56>
c00060e1:	83 f8 2e             	cmp    eax,0x2e
c00060e4:	75 0e                	jne    c00060f4 <fncompare+0x2d>
c00060e6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060e9:	39 d9                	cmp    ecx,ebx
c00060eb:	74 30                	je     c000611d <fncompare+0x56>
c00060ed:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060f2:	74 29                	je     c000611d <fncompare+0x56>
c00060f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060f8:	83 ec 0c             	sub    esp,0xc
c00060fb:	50                   	push   eax
c00060fc:	e8 7f a8 ff ff       	call   c0000980 <tolower>
c0006101:	89 c5                	mov    ebp,eax
c0006103:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0006107:	89 04 24             	mov    DWORD PTR [esp],eax
c000610a:	e8 71 a8 ff ff       	call   c0000980 <tolower>
c000610f:	83 c4 10             	add    esp,0x10
c0006112:	39 c5                	cmp    ebp,eax
c0006114:	75 1e                	jne    c0006134 <fncompare+0x6d>
c0006116:	43                   	inc    ebx
c0006117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000611b:	eb b7                	jmp    c00060d4 <fncompare+0xd>
c000611d:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006121:	83 fa 2f             	cmp    edx,0x2f
c0006124:	0f 95 c1             	setne  cl
c0006127:	31 c0                	xor    eax,eax
c0006129:	85 d2                	test   edx,edx
c000612b:	0f 95 c0             	setne  al
c000612e:	21 c8                	and    eax,ecx
c0006130:	f7 d8                	neg    eax
c0006132:	eb 03                	jmp    c0006137 <fncompare+0x70>
c0006134:	83 c8 ff             	or     eax,0xffffffff
c0006137:	83 c4 1c             	add    esp,0x1c
c000613a:	5b                   	pop    ebx
c000613b:	5e                   	pop    esi
c000613c:	5f                   	pop    edi
c000613d:	5d                   	pop    ebp
c000613e:	c3                   	ret    

c000613f <bclear_cache>:
c000613f:	83 ec 18             	sub    esp,0x18
c0006142:	68 00 0b 02 c0       	push   0xc0020b00
c0006147:	e8 20 43 01 00       	call   c001a46c <iso_kprintf>
c000614c:	83 c4 10             	add    esp,0x10
c000614f:	31 c0                	xor    eax,eax
c0006151:	8b 14 85 20 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9fe0]
c0006158:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000615e:	8b 14 85 80 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9f80]
c0006165:	40                   	inc    eax
c0006166:	83 f8 10             	cmp    eax,0x10
c0006169:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000616f:	75 e0                	jne    c0006151 <bclear_cache+0x12>
c0006171:	83 c4 0c             	add    esp,0xc
c0006174:	c3                   	ret    

c0006175 <bclear>:
c0006175:	eb c8                	jmp    c000613f <bclear_cache>

c0006177 <iso_break_all>:
c0006177:	83 ec 18             	sub    esp,0x18
c000617a:	68 0e 0b 02 c0       	push   0xc0020b0e
c000617f:	e8 e8 42 01 00       	call   c001a46c <iso_kprintf>
c0006184:	83 c4 10             	add    esp,0x10
c0006187:	31 c0                	xor    eax,eax
c0006189:	c7 80 d0 65 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd9a30],0x1
c0006193:	05 94 00 00 00       	add    eax,0x94
c0006198:	3d 40 09 00 00       	cmp    eax,0x940
c000619d:	75 ea                	jne    c0006189 <iso_break_all+0x12>
c000619f:	83 c4 0c             	add    esp,0xc
c00061a2:	c3                   	ret    

c00061a3 <isoReadDiscSector>:
c00061a3:	83 ec 0c             	sub    esp,0xc
c00061a6:	0f be 05 60 60 02 c0 	movsx  eax,BYTE PTR ds:0xc0026060
c00061ad:	50                   	push   eax
c00061ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061ba:	e8 51 42 01 00       	call   c001a410 <isoReadDiscSectorHelper>
c00061bf:	83 c4 1c             	add    esp,0x1c
c00061c2:	c3                   	ret    

c00061c3 <bread_cache>:
c00061c3:	55                   	push   ebp
c00061c4:	57                   	push   edi
c00061c5:	89 d7                	mov    edi,edx
c00061c7:	56                   	push   esi
c00061c8:	ba 0f 00 00 00       	mov    edx,0xf
c00061cd:	53                   	push   ebx
c00061ce:	89 c6                	mov    esi,eax
c00061d0:	83 ec 0c             	sub    esp,0xc
c00061d3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061d6:	39 38                	cmp    DWORD PTR [eax],edi
c00061d8:	74 3c                	je     c0006216 <bread_cache+0x53>
c00061da:	4a                   	dec    edx
c00061db:	83 fa ff             	cmp    edx,0xffffffff
c00061de:	75 f3                	jne    c00061d3 <bread_cache+0x10>
c00061e0:	31 db                	xor    ebx,ebx
c00061e2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061e5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061e8:	74 08                	je     c00061f2 <bread_cache+0x2f>
c00061ea:	43                   	inc    ebx
c00061eb:	83 fb 10             	cmp    ebx,0x10
c00061ee:	75 f2                	jne    c00061e2 <bread_cache+0x1f>
c00061f0:	31 db                	xor    ebx,ebx
c00061f2:	50                   	push   eax
c00061f3:	6a 01                	push   0x1
c00061f5:	57                   	push   edi
c00061f6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061fc:	83 c0 04             	add    eax,0x4
c00061ff:	50                   	push   eax
c0006200:	e8 9e ff ff ff       	call   c00061a3 <isoReadDiscSector>
c0006205:	83 c4 10             	add    esp,0x10
c0006208:	83 c9 ff             	or     ecx,0xffffffff
c000620b:	85 c0                	test   eax,eax
c000620d:	78 13                	js     c0006222 <bread_cache+0x5f>
c000620f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006212:	89 da                	mov    edx,ebx
c0006214:	89 38                	mov    DWORD PTR [eax],edi
c0006216:	89 f0                	mov    eax,esi
c0006218:	e8 0f fe ff ff       	call   c000602c <bgrad_cache>
c000621d:	b9 0f 00 00 00       	mov    ecx,0xf
c0006222:	83 c4 0c             	add    esp,0xc
c0006225:	89 c8                	mov    eax,ecx
c0006227:	5b                   	pop    ebx
c0006228:	5e                   	pop    esi
c0006229:	5f                   	pop    edi
c000622a:	5d                   	pop    ebp
c000622b:	c3                   	ret    

c000622c <biread>:
c000622c:	89 c2                	mov    edx,eax
c000622e:	b8 80 60 02 c0       	mov    eax,0xc0026080
c0006233:	eb 8e                	jmp    c00061c3 <bread_cache>

c0006235 <bdread>:
c0006235:	89 c2                	mov    edx,eax
c0006237:	b8 20 60 02 c0       	mov    eax,0xc0026020
c000623c:	eb 85                	jmp    c00061c3 <bread_cache>

c000623e <strnicmp>:
c000623e:	55                   	push   ebp
c000623f:	57                   	push   edi
c0006240:	31 ff                	xor    edi,edi
c0006242:	56                   	push   esi
c0006243:	53                   	push   ebx
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000624b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000624f:	74 43                	je     c0006294 <strnicmp+0x56>
c0006251:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006255:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006259:	85 c0                	test   eax,eax
c000625b:	74 37                	je     c0006294 <strnicmp+0x56>
c000625d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006261:	85 d2                	test   edx,edx
c0006263:	74 2f                	je     c0006294 <strnicmp+0x56>
c0006265:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006268:	39 d0                	cmp    eax,edx
c000626a:	75 04                	jne    c0006270 <strnicmp+0x32>
c000626c:	89 ef                	mov    edi,ebp
c000626e:	eb db                	jmp    c000624b <strnicmp+0xd>
c0006270:	83 ec 0c             	sub    esp,0xc
c0006273:	50                   	push   eax
c0006274:	e8 07 a7 ff ff       	call   c0000980 <tolower>
c0006279:	89 c3                	mov    ebx,eax
c000627b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000627f:	89 ef                	mov    edi,ebp
c0006281:	89 04 24             	mov    DWORD PTR [esp],eax
c0006284:	e8 f7 a6 ff ff       	call   c0000980 <tolower>
c0006289:	83 c4 10             	add    esp,0x10
c000628c:	29 c3                	sub    ebx,eax
c000628e:	89 d8                	mov    eax,ebx
c0006290:	74 b9                	je     c000624b <strnicmp+0xd>
c0006292:	eb 02                	jmp    c0006296 <strnicmp+0x58>
c0006294:	31 c0                	xor    eax,eax
c0006296:	83 c4 0c             	add    esp,0xc
c0006299:	5b                   	pop    ebx
c000629a:	5e                   	pop    esi
c000629b:	5f                   	pop    edi
c000629c:	5d                   	pop    ebp
c000629d:	c3                   	ret    

c000629e <find_object>:
c000629e:	55                   	push   ebp
c000629f:	57                   	push   edi
c00062a0:	89 c7                	mov    edi,eax
c00062a2:	56                   	push   esi
c00062a3:	53                   	push   ebx
c00062a4:	89 d3                	mov    ebx,edx
c00062a6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00062ac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00062b0:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00062b7:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c00062be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00062c2:	74 0b                	je     c00062cf <find_object+0x31>
c00062c4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00062c8:	89 fa                	mov    edx,edi
c00062ca:	e8 89 fc ff ff       	call   c0005f58 <utf2ucs>
c00062cf:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062d6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00062db:	7e 11                	jle    c00062ee <find_object+0x50>
c00062dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062e1:	e8 46 ff ff ff       	call   c000622c <biread>
c00062e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062ea:	85 c0                	test   eax,eax
c00062ec:	79 07                	jns    c00062f5 <find_object+0x57>
c00062ee:	31 db                	xor    ebx,ebx
c00062f0:	e9 47 01 00 00       	jmp    c000643c <find_object+0x19e>
c00062f5:	31 ed                	xor    ebp,ebp
c00062f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062fb:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006302:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c0006306:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0006309:	85 f6                	test   esi,esi
c000630b:	75 0e                	jne    c000631b <find_object+0x7d>
c000630d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006311:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c0006319:	eb bb                	jmp    c00062d6 <find_object+0x38>
c000631b:	8b 0d b4 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026eb4
c0006321:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006325:	85 c9                	test   ecx,ecx
c0006327:	89 d0                	mov    eax,edx
c0006329:	74 2b                	je     c0006356 <find_object+0xb8>
c000632b:	8d 43 21             	lea    eax,[ebx+0x21]
c000632e:	89 d1                	mov    ecx,edx
c0006330:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006334:	e8 0f fd ff ff       	call   c0006048 <ucscompare>
c0006339:	85 c0                	test   eax,eax
c000633b:	0f 84 cd 00 00 00    	je     c000640e <find_object+0x170>
c0006341:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006344:	01 c5                	add    ebp,eax
c0006346:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000634c:	7f bf                	jg     c000630d <find_object+0x6f>
c000634e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006352:	7f a3                	jg     c00062f7 <find_object+0x59>
c0006354:	eb b7                	jmp    c000630d <find_object+0x6f>
c0006356:	29 d6                	sub    esi,edx
c0006358:	a8 01                	test   al,0x1
c000635a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000635e:	74 05                	je     c0006365 <find_object+0xc7>
c0006360:	83 ee 21             	sub    esi,0x21
c0006363:	eb 6a                	jmp    c00063cf <find_object+0x131>
c0006365:	42                   	inc    edx
c0006366:	83 ee 22             	sub    esi,0x22
c0006369:	eb 64                	jmp    c00063cf <find_object+0x131>
c000636b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000636e:	48                   	dec    eax
c000636f:	3c 01                	cmp    al,0x1
c0006371:	77 61                	ja     c00063d4 <find_object+0x136>
c0006373:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006377:	50                   	push   eax
c0006378:	6a 02                	push   0x2
c000637a:	68 1d 0b 02 c0       	push   0xc0020b1d
c000637f:	52                   	push   edx
c0006380:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006384:	e8 87 a4 ff ff       	call   c0000810 <strncmp>
c0006389:	83 c4 10             	add    esp,0x10
c000638c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006390:	85 c0                	test   eax,eax
c0006392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006396:	75 2f                	jne    c00063c7 <find_object+0x129>
c0006398:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000639c:	50                   	push   eax
c000639d:	8d 42 05             	lea    eax,[edx+0x5]
c00063a0:	83 e9 05             	sub    ecx,0x5
c00063a3:	51                   	push   ecx
c00063a4:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00063a8:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00063ac:	50                   	push   eax
c00063ad:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063b1:	50                   	push   eax
c00063b2:	e8 d9 a2 ff ff       	call   c0000690 <strncpy>
c00063b7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00063bb:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00063c0:	83 c4 10             	add    esp,0x10
c00063c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063c7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00063cb:	29 c6                	sub    esi,eax
c00063cd:	01 c2                	add    edx,eax
c00063cf:	83 fe 03             	cmp    esi,0x3
c00063d2:	7f 97                	jg     c000636b <find_object+0xcd>
c00063d4:	85 c9                	test   ecx,ecx
c00063d6:	7e 40                	jle    c0006418 <find_object+0x17a>
c00063d8:	51                   	push   ecx
c00063d9:	51                   	push   ecx
c00063da:	6a 2f                	push   0x2f
c00063dc:	57                   	push   edi
c00063dd:	e8 ee a3 ff ff       	call   c00007d0 <strchr>
c00063e2:	83 c4 10             	add    esp,0x10
c00063e5:	85 c0                	test   eax,eax
c00063e7:	74 04                	je     c00063ed <find_object+0x14f>
c00063e9:	29 f8                	sub    eax,edi
c00063eb:	eb 0c                	jmp    c00063f9 <find_object+0x15b>
c00063ed:	83 ec 0c             	sub    esp,0xc
c00063f0:	57                   	push   edi
c00063f1:	e8 8a a1 ff ff       	call   c0000580 <strlen>
c00063f6:	83 c4 10             	add    esp,0x10
c00063f9:	52                   	push   edx
c00063fa:	50                   	push   eax
c00063fb:	57                   	push   edi
c00063fc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006400:	50                   	push   eax
c0006401:	e8 38 fe ff ff       	call   c000623e <strnicmp>
c0006406:	83 c4 10             	add    esp,0x10
c0006409:	e9 2b ff ff ff       	jmp    c0006339 <find_object+0x9b>
c000640e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006412:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006416:	eb 1e                	jmp    c0006436 <find_object+0x198>
c0006418:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c000641c:	8d 43 21             	lea    eax,[ebx+0x21]
c000641f:	89 f9                	mov    ecx,edi
c0006421:	e8 a1 fc ff ff       	call   c00060c7 <fncompare>
c0006426:	85 c0                	test   eax,eax
c0006428:	0f 85 13 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000642e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006432:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006436:	0f 85 05 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000643c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006442:	89 d8                	mov    eax,ebx
c0006444:	5b                   	pop    ebx
c0006445:	5e                   	pop    esi
c0006446:	5f                   	pop    edi
c0006447:	5d                   	pop    ebp
c0006448:	c3                   	ret    

c0006449 <find_object_path>:
c0006449:	55                   	push   ebp
c000644a:	57                   	push   edi
c000644b:	89 d7                	mov    edi,edx
c000644d:	56                   	push   esi
c000644e:	89 c6                	mov    esi,eax
c0006450:	53                   	push   ebx
c0006451:	89 cb                	mov    ebx,ecx
c0006453:	83 ec 0c             	sub    esp,0xc
c0006456:	50                   	push   eax
c0006457:	50                   	push   eax
c0006458:	6a 2f                	push   0x2f
c000645a:	56                   	push   esi
c000645b:	e8 70 a3 ff ff       	call   c00007d0 <strchr>
c0006460:	83 c4 10             	add    esp,0x10
c0006463:	85 c0                	test   eax,eax
c0006465:	89 c5                	mov    ebp,eax
c0006467:	74 3a                	je     c00064a3 <find_object_path+0x5a>
c0006469:	39 ee                	cmp    esi,ebp
c000646b:	74 31                	je     c000649e <find_object_path+0x55>
c000646d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006470:	e8 b5 fb ff ff       	call   c000602a <iso_733>
c0006475:	89 c2                	mov    edx,eax
c0006477:	8d 43 02             	lea    eax,[ebx+0x2]
c000647a:	e8 ab fb ff ff       	call   c000602a <iso_733>
c000647f:	83 ec 0c             	sub    esp,0xc
c0006482:	52                   	push   edx
c0006483:	89 c1                	mov    ecx,eax
c0006485:	ba 01 00 00 00       	mov    edx,0x1
c000648a:	89 f0                	mov    eax,esi
c000648c:	e8 0d fe ff ff       	call   c000629e <find_object>
c0006491:	83 c4 10             	add    esp,0x10
c0006494:	85 c0                	test   eax,eax
c0006496:	89 c3                	mov    ebx,eax
c0006498:	75 04                	jne    c000649e <find_object_path+0x55>
c000649a:	31 db                	xor    ebx,ebx
c000649c:	eb 36                	jmp    c00064d4 <find_object_path+0x8b>
c000649e:	8d 75 01             	lea    esi,[ebp+0x1]
c00064a1:	eb b3                	jmp    c0006456 <find_object_path+0xd>
c00064a3:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00064a6:	74 28                	je     c00064d0 <find_object_path+0x87>
c00064a8:	8d 43 0a             	lea    eax,[ebx+0xa]
c00064ab:	e8 7a fb ff ff       	call   c000602a <iso_733>
c00064b0:	89 c2                	mov    edx,eax
c00064b2:	8d 43 02             	lea    eax,[ebx+0x2]
c00064b5:	e8 70 fb ff ff       	call   c000602a <iso_733>
c00064ba:	83 ec 0c             	sub    esp,0xc
c00064bd:	52                   	push   edx
c00064be:	89 c1                	mov    ecx,eax
c00064c0:	89 fa                	mov    edx,edi
c00064c2:	89 f0                	mov    eax,esi
c00064c4:	e8 d5 fd ff ff       	call   c000629e <find_object>
c00064c9:	83 c4 10             	add    esp,0x10
c00064cc:	89 c3                	mov    ebx,eax
c00064ce:	eb 04                	jmp    c00064d4 <find_object_path+0x8b>
c00064d0:	85 ff                	test   edi,edi
c00064d2:	74 c6                	je     c000649a <find_object_path+0x51>
c00064d4:	83 c4 0c             	add    esp,0xc
c00064d7:	89 d8                	mov    eax,ebx
c00064d9:	5b                   	pop    ebx
c00064da:	5e                   	pop    esi
c00064db:	5f                   	pop    edi
c00064dc:	5d                   	pop    ebp
c00064dd:	c3                   	ret    

c00064de <stricmp>:
c00064de:	57                   	push   edi
c00064df:	56                   	push   esi
c00064e0:	31 f6                	xor    esi,esi
c00064e2:	53                   	push   ebx
c00064e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064e7:	83 ec 0c             	sub    esp,0xc
c00064ea:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064f6:	46                   	inc    esi
c00064f7:	50                   	push   eax
c00064f8:	e8 63 a4 ff ff       	call   c0000960 <toupper>
c00064fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006500:	e8 7b a4 ff ff       	call   c0000980 <tolower>
c0006505:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006508:	89 c3                	mov    ebx,eax
c000650a:	e8 51 a4 ff ff       	call   c0000960 <toupper>
c000650f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006512:	e8 69 a4 ff ff       	call   c0000980 <tolower>
c0006517:	83 c4 10             	add    esp,0x10
c000651a:	39 c3                	cmp    ebx,eax
c000651c:	75 04                	jne    c0006522 <stricmp+0x44>
c000651e:	85 db                	test   ebx,ebx
c0006520:	75 c1                	jne    c00064e3 <stricmp+0x5>
c0006522:	29 c3                	sub    ebx,eax
c0006524:	89 d8                	mov    eax,ebx
c0006526:	5b                   	pop    ebx
c0006527:	5e                   	pop    esi
c0006528:	5f                   	pop    edi
c0006529:	c3                   	ret    

c000652a <iso_open>:
c000652a:	57                   	push   edi
c000652b:	31 c0                	xor    eax,eax
c000652d:	56                   	push   esi
c000652e:	b9 80 6e 02 c0       	mov    ecx,0xc0026e80
c0006533:	53                   	push   ebx
c0006534:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006539:	0f 95 c0             	setne  al
c000653c:	89 c2                	mov    edx,eax
c000653e:	89 c6                	mov    esi,eax
c0006540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006544:	e8 00 ff ff ff       	call   c0006449 <find_object_path>
c0006549:	83 ca ff             	or     edx,0xffffffff
c000654c:	85 c0                	test   eax,eax
c000654e:	74 5e                	je     c00065ae <iso_open+0x84>
c0006550:	89 c1                	mov    ecx,eax
c0006552:	31 d2                	xor    edx,edx
c0006554:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000655a:	83 bf 40 65 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd9ac0],0x0
c0006561:	75 42                	jne    c00065a5 <iso_open+0x7b>
c0006563:	c7 87 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd9ac0],0xffffffff
c000656d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006570:	e8 b5 fa ff ff       	call   c000602a <iso_733>
c0006575:	89 b7 44 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9abc],esi
c000657b:	c7 87 48 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9ab8],0x0
c0006585:	89 87 40 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ac0],eax
c000658b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000658e:	e8 97 fa ff ff       	call   c000602a <iso_733>
c0006593:	c7 87 d0 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9a30],0x0
c000659d:	89 87 4c 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ab4],eax
c00065a3:	eb 09                	jmp    c00065ae <iso_open+0x84>
c00065a5:	42                   	inc    edx
c00065a6:	83 fa 10             	cmp    edx,0x10
c00065a9:	75 a9                	jne    c0006554 <iso_open+0x2a>
c00065ab:	83 ca ff             	or     edx,0xffffffff
c00065ae:	5b                   	pop    ebx
c00065af:	89 d0                	mov    eax,edx
c00065b1:	5e                   	pop    esi
c00065b2:	5f                   	pop    edi
c00065b3:	c3                   	ret    

c00065b4 <iso_close>:
c00065b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065b8:	83 f8 0f             	cmp    eax,0xf
c00065bb:	7f 10                	jg     c00065cd <iso_close+0x19>
c00065bd:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065c3:	c7 80 40 65 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9ac0],0x0
c00065cd:	e9 6d fb ff ff       	jmp    c000613f <bclear_cache>

c00065d2 <iso_read>:
c00065d2:	55                   	push   ebp
c00065d3:	57                   	push   edi
c00065d4:	56                   	push   esi
c00065d5:	53                   	push   ebx
c00065d6:	83 ec 1c             	sub    esp,0x1c
c00065d9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065dd:	83 fd 0f             	cmp    ebp,0xf
c00065e0:	7e 0a                	jle    c00065ec <iso_read+0x1a>
c00065e2:	83 c8 ff             	or     eax,0xffffffff
c00065e5:	89 c2                	mov    edx,eax
c00065e7:	e9 f4 00 00 00       	jmp    c00066e0 <iso_read+0x10e>
c00065ec:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065f2:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00065f9:	74 e7                	je     c00065e2 <iso_read+0x10>
c00065fb:	8b 95 d0 65 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd9a30]
c0006601:	85 d2                	test   edx,edx
c0006603:	75 dd                	jne    c00065e2 <iso_read+0x10>
c0006605:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000660a:	0f 84 cd 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006610:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c0006616:	8b 9d 4c 65 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffd9ab4]
c000661c:	29 c3                	sub    ebx,eax
c000661e:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006622:	89 d9                	mov    ecx,ebx
c0006624:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006629:	85 c9                	test   ecx,ecx
c000662b:	0f 84 ac 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006631:	89 c6                	mov    esi,eax
c0006633:	bb 00 08 00 00       	mov    ebx,0x800
c0006638:	c1 e8 0b             	shr    eax,0xb
c000663b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006641:	03 85 40 65 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd9ac0]
c0006647:	29 f3                	sub    ebx,esi
c0006649:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000664f:	75 3f                	jne    c0006690 <iso_read+0xbe>
c0006651:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006657:	7e 37                	jle    c0006690 <iso_read+0xbe>
c0006659:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000665f:	be 20 00 00 00       	mov    esi,0x20
c0006664:	7f 05                	jg     c000666b <iso_read+0x99>
c0006666:	89 ce                	mov    esi,ecx
c0006668:	c1 fe 0b             	sar    esi,0xb
c000666b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000666f:	89 f3                	mov    ebx,esi
c0006671:	52                   	push   edx
c0006672:	56                   	push   esi
c0006673:	50                   	push   eax
c0006674:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006678:	c1 e3 0b             	shl    ebx,0xb
c000667b:	e8 23 fb ff ff       	call   c00061a3 <isoReadDiscSector>
c0006680:	83 c4 10             	add    esp,0x10
c0006683:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006687:	85 c0                	test   eax,eax
c0006689:	7f 3d                	jg     c00066c8 <iso_read+0xf6>
c000668b:	e9 52 ff ff ff       	jmp    c00065e2 <iso_read+0x10>
c0006690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006694:	39 d9                	cmp    ecx,ebx
c0006696:	0f 4e d9             	cmovle ebx,ecx
c0006699:	e8 97 fb ff ff       	call   c0006235 <bdread>
c000669e:	85 c0                	test   eax,eax
c00066a0:	0f 88 3c ff ff ff    	js     c00065e2 <iso_read+0x10>
c00066a6:	8b 0c 85 20 60 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9fe0]
c00066ad:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c00066b3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066b7:	25 ff 07 00 00       	and    eax,0x7ff
c00066bc:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066c0:	89 d9                	mov    ecx,ebx
c00066c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066c8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066cc:	01 da                	add    edx,ebx
c00066ce:	01 9d 48 65 02 c0    	add    DWORD PTR [ebp-0x3ffd9ab8],ebx
c00066d4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066d8:	e9 28 ff ff ff       	jmp    c0006605 <iso_read+0x33>
c00066dd:	89 d0                	mov    eax,edx
c00066df:	99                   	cdq    
c00066e0:	83 c4 1c             	add    esp,0x1c
c00066e3:	5b                   	pop    ebx
c00066e4:	5e                   	pop    esi
c00066e5:	5f                   	pop    edi
c00066e6:	5d                   	pop    ebp
c00066e7:	c3                   	ret    

c00066e8 <iso_seek>:
c00066e8:	55                   	push   ebp
c00066e9:	83 c8 ff             	or     eax,0xffffffff
c00066ec:	57                   	push   edi
c00066ed:	89 c2                	mov    edx,eax
c00066ef:	56                   	push   esi
c00066f0:	53                   	push   ebx
c00066f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066fd:	83 fe 0f             	cmp    esi,0xf
c0006700:	7f 65                	jg     c0006767 <iso_seek+0x7f>
c0006702:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006708:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c000670f:	8d 8d 40 65 02 c0    	lea    ecx,[ebp-0x3ffd9ac0]
c0006715:	74 50                	je     c0006767 <iso_seek+0x7f>
c0006717:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c000671e:	75 47                	jne    c0006767 <iso_seek+0x7f>
c0006720:	83 fb 01             	cmp    ebx,0x1
c0006723:	74 0e                	je     c0006733 <iso_seek+0x4b>
c0006725:	83 fb 02             	cmp    ebx,0x2
c0006728:	74 0e                	je     c0006738 <iso_seek+0x50>
c000672a:	85 db                	test   ebx,ebx
c000672c:	75 39                	jne    c0006767 <iso_seek+0x7f>
c000672e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006731:	eb 0d                	jmp    c0006740 <iso_seek+0x58>
c0006733:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006736:	eb 08                	jmp    c0006740 <iso_seek+0x58>
c0006738:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000673b:	01 f8                	add    eax,edi
c000673d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006740:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006746:	8b 88 4c 65 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd9ab4]
c000674c:	05 40 65 02 c0       	add    eax,0xc0026540
c0006751:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006754:	76 03                	jbe    c0006759 <iso_seek+0x71>
c0006756:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006759:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000675f:	8b 82 48 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab8]
c0006765:	31 d2                	xor    edx,edx
c0006767:	5b                   	pop    ebx
c0006768:	5e                   	pop    esi
c0006769:	5f                   	pop    edi
c000676a:	5d                   	pop    ebp
c000676b:	c3                   	ret    

c000676c <iso_tell>:
c000676c:	53                   	push   ebx
c000676d:	83 c8 ff             	or     eax,0xffffffff
c0006770:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006774:	89 c2                	mov    edx,eax
c0006776:	83 f9 0f             	cmp    ecx,0xf
c0006779:	7f 20                	jg     c000679b <iso_tell+0x2f>
c000677b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006781:	83 bb 40 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9ac0],0x0
c0006788:	74 11                	je     c000679b <iso_tell+0x2f>
c000678a:	83 bb d0 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9a30],0x0
c0006791:	75 08                	jne    c000679b <iso_tell+0x2f>
c0006793:	8b 83 48 65 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd9ab8]
c0006799:	31 d2                	xor    edx,edx
c000679b:	5b                   	pop    ebx
c000679c:	c3                   	ret    

c000679d <iso_total>:
c000679d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067a1:	83 c8 ff             	or     eax,0xffffffff
c00067a4:	83 fa 0f             	cmp    edx,0xf
c00067a7:	7f 1e                	jg     c00067c7 <iso_total+0x2a>
c00067a9:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c00067af:	83 ba 40 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9ac0],0x0
c00067b6:	74 0f                	je     c00067c7 <iso_total+0x2a>
c00067b8:	83 ba d0 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9a30],0x0
c00067bf:	75 06                	jne    c00067c7 <iso_total+0x2a>
c00067c1:	8b 82 4c 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab4]
c00067c7:	c3                   	ret    

c00067c8 <fn_postprocess>:
c00067c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067cc:	89 d0                	mov    eax,edx
c00067ce:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067d1:	85 c9                	test   ecx,ecx
c00067d3:	74 08                	je     c00067dd <fn_postprocess+0x15>
c00067d5:	83 f9 3b             	cmp    ecx,0x3b
c00067d8:	74 03                	je     c00067dd <fn_postprocess+0x15>
c00067da:	40                   	inc    eax
c00067db:	eb f1                	jmp    c00067ce <fn_postprocess+0x6>
c00067dd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067e0:	39 d0                	cmp    eax,edx
c00067e2:	76 0a                	jbe    c00067ee <fn_postprocess+0x26>
c00067e4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067e8:	75 04                	jne    c00067ee <fn_postprocess+0x26>
c00067ea:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067ee:	c3                   	ret    

c00067ef <iso_readdir>:
c00067ef:	55                   	push   ebp
c00067f0:	57                   	push   edi
c00067f1:	56                   	push   esi
c00067f2:	53                   	push   ebx
c00067f3:	83 ec 1c             	sub    esp,0x1c
c00067f6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067fa:	83 fb 0f             	cmp    ebx,0xf
c00067fd:	7f 28                	jg     c0006827 <iso_readdir+0x38>
c00067ff:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006805:	83 b8 40 65 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd9ac0],0x0
c000680c:	8d b8 40 65 02 c0    	lea    edi,[eax-0x3ffd9ac0]
c0006812:	74 13                	je     c0006827 <iso_readdir+0x38>
c0006814:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006818:	74 0d                	je     c0006827 <iso_readdir+0x38>
c000681a:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006821:	0f 84 b1 00 00 00    	je     c00068d8 <iso_readdir+0xe9>
c0006827:	83 ec 0c             	sub    esp,0xc
c000682a:	68 20 0b 02 c0       	push   0xc0020b20
c000682f:	e8 38 3c 01 00       	call   c001a46c <iso_kprintf>
c0006834:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006837:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000683d:	e8 46 3c 01 00       	call   c001a488 <iso_kprintfd>
c0006842:	c7 04 24 25 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b25
c0006849:	e8 1e 3c 01 00       	call   c001a46c <iso_kprintf>
c000684e:	58                   	pop    eax
c000684f:	ff b3 40 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9ac0]
c0006855:	e8 2e 3c 01 00       	call   c001a488 <iso_kprintfd>
c000685a:	c7 04 24 2b 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b2b
c0006861:	e8 06 3c 01 00       	call   c001a46c <iso_kprintf>
c0006866:	58                   	pop    eax
c0006867:	ff b3 44 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9abc]
c000686d:	e8 16 3c 01 00       	call   c001a488 <iso_kprintfd>
c0006872:	c7 04 24 31 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b31
c0006879:	e8 ee 3b 01 00       	call   c001a46c <iso_kprintf>
c000687e:	58                   	pop    eax
c000687f:	ff b3 d0 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9a30]
c0006885:	e8 fe 3b 01 00       	call   c001a488 <iso_kprintfd>
c000688a:	83 c4 10             	add    esp,0x10
c000688d:	eb 42                	jmp    c00068d1 <iso_readdir+0xe2>
c000688f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006892:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c0006899:	89 d1                	mov    ecx,edx
c000689b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00068a1:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c00068a5:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00068a8:	75 35                	jne    c00068df <iso_readdir+0xf0>
c00068aa:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c00068b0:	81 c2 00 08 00 00    	add    edx,0x800
c00068b6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00068b9:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00068bc:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068bf:	73 1e                	jae    c00068df <iso_readdir+0xf0>
c00068c1:	8b 07                	mov    eax,DWORD PTR [edi]
c00068c3:	c1 ea 0b             	shr    edx,0xb
c00068c6:	01 d0                	add    eax,edx
c00068c8:	e8 5f f9 ff ff       	call   c000622c <biread>
c00068cd:	85 c0                	test   eax,eax
c00068cf:	79 be                	jns    c000688f <iso_readdir+0xa0>
c00068d1:	31 c0                	xor    eax,eax
c00068d3:	e9 6a 01 00 00       	jmp    c0006a42 <iso_readdir+0x253>
c00068d8:	31 f6                	xor    esi,esi
c00068da:	83 c8 ff             	or     eax,0xffffffff
c00068dd:	eb da                	jmp    c00068b9 <iso_readdir+0xca>
c00068df:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068e5:	8b ba 48 65 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd9ab8]
c00068eb:	81 c2 40 65 02 c0    	add    edx,0xc0026540
c00068f1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068f4:	73 db                	jae    c00068d1 <iso_readdir+0xe2>
c00068f6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068fa:	75 34                	jne    c0006930 <iso_readdir+0x141>
c00068fc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006900:	75 2e                	jne    c0006930 <iso_readdir+0x141>
c0006902:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006905:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c000690c:	01 f9                	add    ecx,edi
c000690e:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006911:	89 c8                	mov    eax,ecx
c0006913:	25 ff 07 00 00       	and    eax,0x7ff
c0006918:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c000691d:	01 c8                	add    eax,ecx
c000691f:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006922:	25 ff 07 00 00       	and    eax,0x7ff
c0006927:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000692b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000692e:	74 a1                	je     c00068d1 <iso_readdir+0xe2>
c0006930:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006936:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000693a:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006941:	8d 56 21             	lea    edx,[esi+0x21]
c0006944:	8d af 58 65 02 c0    	lea    ebp,[edi-0x3ffd9aa8]
c000694a:	74 0c                	je     c0006958 <iso_readdir+0x169>
c000694c:	89 e8                	mov    eax,ebp
c000694e:	e8 27 f6 ff ff       	call   c0005f7a <ucs2utfn>
c0006953:	e9 b1 00 00 00       	jmp    c0006a09 <iso_readdir+0x21a>
c0006958:	50                   	push   eax
c0006959:	51                   	push   ecx
c000695a:	52                   	push   edx
c000695b:	55                   	push   ebp
c000695c:	e8 2f 9d ff ff       	call   c0000690 <strncpy>
c0006961:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006965:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006968:	c6 84 07 58 65 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffd9aa8],0x0
c0006970:	e8 53 fe ff ff       	call   c00067c8 <fn_postprocess>
c0006975:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000697f:	89 d1                	mov    ecx,edx
c0006981:	29 d0                	sub    eax,edx
c0006983:	80 e1 01             	and    cl,0x1
c0006986:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c000698a:	74 05                	je     c0006991 <iso_readdir+0x1a2>
c000698c:	83 e8 21             	sub    eax,0x21
c000698f:	eb 04                	jmp    c0006995 <iso_readdir+0x1a6>
c0006991:	42                   	inc    edx
c0006992:	83 e8 22             	sub    eax,0x22
c0006995:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006999:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000699f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00069a3:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c00069a8:	7e 5f                	jle    c0006a09 <iso_readdir+0x21a>
c00069aa:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c00069ad:	48                   	dec    eax
c00069ae:	3c 01                	cmp    al,0x1
c00069b0:	77 57                	ja     c0006a09 <iso_readdir+0x21a>
c00069b2:	51                   	push   ecx
c00069b3:	6a 02                	push   0x2
c00069b5:	68 1d 0b 02 c0       	push   0xc0020b1d
c00069ba:	52                   	push   edx
c00069bb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00069bf:	e8 4c 9e ff ff       	call   c0000810 <strncmp>
c00069c4:	83 c4 10             	add    esp,0x10
c00069c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069cb:	85 c0                	test   eax,eax
c00069cd:	75 2e                	jne    c00069fd <iso_readdir+0x20e>
c00069cf:	50                   	push   eax
c00069d0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069d4:	83 e8 05             	sub    eax,0x5
c00069d7:	50                   	push   eax
c00069d8:	8d 42 05             	lea    eax,[edx+0x5]
c00069db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00069df:	50                   	push   eax
c00069e0:	55                   	push   ebp
c00069e1:	e8 aa 9c ff ff       	call   c0000690 <strncpy>
c00069e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00069ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00069ee:	83 c4 10             	add    esp,0x10
c00069f1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069f5:	c6 84 08 53 65 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd9aad],0x0
c00069fd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006a01:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006a05:	01 c2                	add    edx,eax
c0006a07:	eb 9a                	jmp    c00069a3 <iso_readdir+0x1b4>
c0006a09:	83 c8 ff             	or     eax,0xffffffff
c0006a0c:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006a10:	89 c2                	mov    edx,eax
c0006a12:	75 0a                	jne    c0006a1e <iso_readdir+0x22f>
c0006a14:	8d 46 0a             	lea    eax,[esi+0xa]
c0006a17:	e8 0e f6 ff ff       	call   c000602a <iso_733>
c0006a1c:	31 d2                	xor    edx,edx
c0006a1e:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a24:	89 83 50 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9ab0],eax
c0006a2a:	89 93 54 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9aac],edx
c0006a30:	81 c3 40 65 02 c0    	add    ebx,0xc0026540
c0006a36:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a39:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a3c:	8d 87 50 65 02 c0    	lea    eax,[edi-0x3ffd9ab0]
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	5b                   	pop    ebx
c0006a46:	5e                   	pop    esi
c0006a47:	5f                   	pop    edi
c0006a48:	5d                   	pop    ebp
c0006a49:	c3                   	ret    

c0006a4a <iso_reset>:
c0006a4a:	83 ec 18             	sub    esp,0x18
c0006a4d:	68 3a 0b 02 c0       	push   0xc0020b3a
c0006a52:	e8 15 3a 01 00       	call   c001a46c <iso_kprintf>
c0006a57:	e8 1b f7 ff ff       	call   c0006177 <iso_break_all>
c0006a5c:	e8 14 f7 ff ff       	call   c0006175 <bclear>
c0006a61:	31 c0                	xor    eax,eax
c0006a63:	83 c4 1c             	add    esp,0x1c
c0006a66:	c3                   	ret    

c0006a67 <init_percd>:
c0006a67:	57                   	push   edi
c0006a68:	56                   	push   esi
c0006a69:	53                   	push   ebx
c0006a6a:	bb 01 00 00 00       	mov    ebx,0x1
c0006a6f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006a73:	a2 60 60 02 c0       	mov    ds:0xc0026060,al
c0006a78:	e8 cd ff ff ff       	call   c0006a4a <iso_reset>
c0006a7d:	c7 05 b4 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb4,0x0
c0006a87:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006a8c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a90:	e8 97 f7 ff ff       	call   c000622c <biread>
c0006a95:	85 c0                	test   eax,eax
c0006a97:	89 c6                	mov    esi,eax
c0006a99:	0f 88 ba 00 00 00    	js     c0006b59 <init_percd+0xf2>
c0006a9f:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006aa6:	52                   	push   edx
c0006aa7:	6a 06                	push   0x6
c0006aa9:	68 45 0b 02 c0       	push   0xc0020b45
c0006aae:	83 c0 04             	add    eax,0x4
c0006ab1:	50                   	push   eax
c0006ab2:	e8 c9 98 ff ff       	call   c0000380 <memcmp>
c0006ab7:	83 c4 10             	add    esp,0x10
c0006aba:	85 c0                	test   eax,eax
c0006abc:	74 08                	je     c0006ac6 <init_percd+0x5f>
c0006abe:	43                   	inc    ebx
c0006abf:	83 fb 04             	cmp    ebx,0x4
c0006ac2:	75 c3                	jne    c0006a87 <init_percd+0x20>
c0006ac4:	eb 1a                	jmp    c0006ae0 <init_percd+0x79>
c0006ac6:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006acd:	83 c0 5c             	add    eax,0x5c
c0006ad0:	e8 22 f5 ff ff       	call   c0005ff7 <isjoliet>
c0006ad5:	a3 b4 6e 02 c0       	mov    ds:0xc0026eb4,eax
c0006ada:	85 c0                	test   eax,eax
c0006adc:	74 e0                	je     c0006abe <init_percd+0x57>
c0006ade:	eb 3e                	jmp    c0006b1e <init_percd+0xb7>
c0006ae0:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006ae7:	75 35                	jne    c0006b1e <init_percd+0xb7>
c0006ae9:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006aee:	83 c0 10             	add    eax,0x10
c0006af1:	e8 36 f7 ff ff       	call   c000622c <biread>
c0006af6:	85 c0                	test   eax,eax
c0006af8:	89 c6                	mov    esi,eax
c0006afa:	78 5f                	js     c0006b5b <init_percd+0xf4>
c0006afc:	50                   	push   eax
c0006afd:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006b04:	83 cb ff             	or     ebx,0xffffffff
c0006b07:	6a 06                	push   0x6
c0006b09:	68 4c 0b 02 c0       	push   0xc0020b4c
c0006b0e:	83 c0 04             	add    eax,0x4
c0006b11:	50                   	push   eax
c0006b12:	e8 69 98 ff ff       	call   c0000380 <memcmp>
c0006b17:	83 c4 10             	add    esp,0x10
c0006b1a:	85 c0                	test   eax,eax
c0006b1c:	75 3d                	jne    c0006b5b <init_percd+0xf4>
c0006b1e:	8b 34 b5 80 60 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd9f80]
c0006b25:	bf 80 6e 02 c0       	mov    edi,0xc0026e80
c0006b2a:	b9 22 00 00 00       	mov    ecx,0x22
c0006b2f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b37:	b8 82 6e 02 c0       	mov    eax,0xc0026e82
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	e8 e7 f4 ff ff       	call   c000602a <iso_733>
c0006b43:	a3 a8 6e 02 c0       	mov    ds:0xc0026ea8,eax
c0006b48:	b8 8a 6e 02 c0       	mov    eax,0xc0026e8a
c0006b4d:	e8 d8 f4 ff ff       	call   c000602a <iso_733>
c0006b52:	a3 a4 6e 02 c0       	mov    ds:0xc0026ea4,eax
c0006b57:	eb 02                	jmp    c0006b5b <init_percd+0xf4>
c0006b59:	89 c3                	mov    ebx,eax
c0006b5b:	89 d8                	mov    eax,ebx
c0006b5d:	5b                   	pop    ebx
c0006b5e:	5e                   	pop    esi
c0006b5f:	5f                   	pop    edi
c0006b60:	c3                   	ret    

c0006b61 <iso_ioctl>:
c0006b61:	83 ec 18             	sub    esp,0x18
c0006b64:	68 53 0b 02 c0       	push   0xc0020b53
c0006b69:	e8 fe 38 01 00       	call   c001a46c <iso_kprintf>
c0006b6e:	e8 d7 fe ff ff       	call   c0006a4a <iso_reset>
c0006b73:	31 c0                	xor    eax,eax
c0006b75:	83 c4 1c             	add    esp,0x1c
c0006b78:	c3                   	ret    

c0006b79 <fs_iso9660_init>:
c0006b79:	53                   	push   ebx
c0006b7a:	31 db                	xor    ebx,ebx
c0006b7c:	83 ec 14             	sub    esp,0x14
c0006b7f:	68 5e 0b 02 c0       	push   0xc0020b5e
c0006b84:	e8 e3 38 01 00       	call   c001a46c <iso_kprintf>
c0006b89:	83 c4 0c             	add    esp,0xc
c0006b8c:	68 40 09 00 00       	push   0x940
c0006b91:	6a 00                	push   0x0
c0006b93:	68 40 65 02 c0       	push   0xc0026540
c0006b98:	e8 53 99 ff ff       	call   c00004f0 <memset>
c0006b9d:	c7 05 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0026540,0xffffffff
c0006ba7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bae:	e8 20 0f 00 00       	call   c0007ad3 <malloc>
c0006bb3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bba:	a3 b0 6e 02 c0       	mov    ds:0xc0026eb0,eax
c0006bbf:	e8 0f 0f 00 00       	call   c0007ad3 <malloc>
c0006bc4:	83 c4 10             	add    esp,0x10
c0006bc7:	a3 20 65 02 c0       	mov    ds:0xc0026520,eax
c0006bcc:	83 ec 0c             	sub    esp,0xc
c0006bcf:	68 04 08 00 00       	push   0x804
c0006bd4:	e8 fa 0e 00 00       	call   c0007ad3 <malloc>
c0006bd9:	89 04 9d 80 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9f80],eax
c0006be0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bed:	e8 e1 0e 00 00       	call   c0007ad3 <malloc>
c0006bf2:	83 c4 10             	add    esp,0x10
c0006bf5:	89 04 9d 20 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9fe0],eax
c0006bfc:	43                   	inc    ebx
c0006bfd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006c03:	83 fb 10             	cmp    ebx,0x10
c0006c06:	75 c4                	jne    c0006bcc <fs_iso9660_init+0x53>
c0006c08:	83 c4 08             	add    esp,0x8
c0006c0b:	31 c0                	xor    eax,eax
c0006c0d:	5b                   	pop    ebx
c0006c0e:	c3                   	ret    

c0006c0f <fs_iso9660_shutdown>:
c0006c0f:	53                   	push   ebx
c0006c10:	31 db                	xor    ebx,ebx
c0006c12:	83 ec 08             	sub    esp,0x8
c0006c15:	83 ec 0c             	sub    esp,0xc
c0006c18:	ff 34 9d 80 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9f80]
c0006c1f:	e8 bf 0e 00 00       	call   c0007ae3 <free>
c0006c24:	58                   	pop    eax
c0006c25:	ff 34 9d 20 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9fe0]
c0006c2c:	43                   	inc    ebx
c0006c2d:	e8 b1 0e 00 00       	call   c0007ae3 <free>
c0006c32:	83 c4 10             	add    esp,0x10
c0006c35:	83 fb 10             	cmp    ebx,0x10
c0006c38:	75 db                	jne    c0006c15 <fs_iso9660_shutdown+0x6>
c0006c3a:	a1 b0 6e 02 c0       	mov    eax,ds:0xc0026eb0
c0006c3f:	85 c0                	test   eax,eax
c0006c41:	74 0c                	je     c0006c4f <fs_iso9660_shutdown+0x40>
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	50                   	push   eax
c0006c47:	e8 97 0e 00 00       	call   c0007ae3 <free>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c0006c54:	85 c0                	test   eax,eax
c0006c56:	74 0c                	je     c0006c64 <fs_iso9660_shutdown+0x55>
c0006c58:	83 ec 0c             	sub    esp,0xc
c0006c5b:	50                   	push   eax
c0006c5c:	e8 82 0e 00 00       	call   c0007ae3 <free>
c0006c61:	83 c4 10             	add    esp,0x10
c0006c64:	c7 05 20 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026520,0x0
c0006c6e:	31 c0                	xor    eax,eax
c0006c70:	c7 05 b0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb0,0x0
c0006c7a:	83 c4 08             	add    esp,0x8
c0006c7d:	5b                   	pop    ebx
c0006c7e:	c3                   	ret    
c0006c7f:	90                   	nop

c0006c80 <Computer::close(int, int, void*)>:
c0006c80:	57                   	push   edi
c0006c81:	56                   	push   esi
c0006c82:	53                   	push   ebx
c0006c83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c87:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c8f:	e8 9a a1 00 00       	call   c0010e2e <KeExecuteAtexit()>
c0006c94:	83 ec 0c             	sub    esp,0xc
c0006c97:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c9d:	50                   	push   eax
c0006c9e:	e8 bf 5e 00 00       	call   c000cb62 <Device::closeAll()>
c0006ca3:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006ca9:	83 c4 10             	add    esp,0x10
c0006cac:	8b 10                	mov    edx,DWORD PTR [eax]
c0006cae:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006cb2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006cba:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006cbe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006cc2:	5b                   	pop    ebx
c0006cc3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006cc6:	5e                   	pop    esi
c0006cc7:	5f                   	pop    edi
c0006cc8:	ff e0                	jmp    eax

c0006cca <Krnl::firstTask()>:
c0006cca:	53                   	push   ebx
c0006ccb:	83 ec 14             	sub    esp,0x14
c0006cce:	fb                   	sti    
c0006ccf:	68 6f 0b 02 c0       	push   0xc0020b6f
c0006cd4:	e8 34 a2 00 00       	call   c0010f0d <KeSetBootMessage(char const*)>
c0006cd9:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006ce0:	e8 ee 0d 00 00       	call   c0007ad3 <malloc>
c0006ce5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cec:	89 c3                	mov    ebx,eax
c0006cee:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0006cf3:	50                   	push   eax
c0006cf4:	68 88 0b 02 c0       	push   0xc0020b88
c0006cf9:	6a 01                	push   0x1
c0006cfb:	53                   	push   ebx
c0006cfc:	e8 83 ef 00 00       	call   c0015c84 <Process::Process(bool, char const*, Process*, char**)>
c0006d01:	83 c4 20             	add    esp,0x20
c0006d04:	68 ff 00 00 00       	push   0xff
c0006d09:	6a 00                	push   0x0
c0006d0b:	68 1d 75 00 c0       	push   0xc000751d
c0006d10:	53                   	push   ebx
c0006d11:	e8 92 f1 00 00       	call   c0015ea8 <Process::createThread(void (*)(void*), void*, int)>
c0006d16:	8b 15 f0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6f0
c0006d1c:	6a 7a                	push   0x7a
c0006d1e:	6a 00                	push   0x0
c0006d20:	68 6c 69 01 c0       	push   0xc001696c
c0006d25:	52                   	push   edx
c0006d26:	e8 7d f1 00 00       	call   c0015ea8 <Process::createThread(void (*)(void*), void*, int)>
c0006d2b:	83 c4 14             	add    esp,0x14
c0006d2e:	68 84 0c 02 c0       	push   0xc0020c84
c0006d33:	a3 a8 c6 02 c0       	mov    ds:0xc002c6a8,eax
c0006d38:	e8 d0 a1 00 00       	call   c0010f0d <KeSetBootMessage(char const*)>
c0006d3d:	c6 05 bd 6e 02 c0 01 	mov    BYTE PTR ds:0xc0026ebd,0x1
c0006d44:	e8 79 aa 00 00       	call   c00117c2 <KeInitRand()>
c0006d49:	e8 41 00 01 00       	call   c0016d8f <Vm::initialise8086()>
c0006d4e:	e8 3b 4b 00 00       	call   c000b88e <Fs::initVFS()>
c0006d53:	c7 04 24 95 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b95
c0006d5a:	e8 ae a1 00 00       	call   c0010f0d <KeSetBootMessage(char const*)>
c0006d5f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006d64:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d6c:	6a 00                	push   0x0
c0006d6e:	6a 00                	push   0x0
c0006d70:	6a 00                	push   0x0
c0006d72:	50                   	push   eax
c0006d73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d76:	83 c4 14             	add    esp,0x14
c0006d79:	68 84 0c 02 c0       	push   0xc0020c84
c0006d7e:	e8 8a a1 00 00       	call   c0010f0d <KeSetBootMessage(char const*)>
c0006d83:	e8 bf 46 00 00       	call   c000b447 <KeInitialiseSymlinks()>
c0006d88:	e8 e1 a6 00 00       	call   c001146e <KeLoadSystemEnv()>
c0006d8d:	e8 3e a9 00 00       	call   c00116d0 <KeSetupPowerManager()>
c0006d92:	83 c4 0c             	add    esp,0xc
c0006d95:	6a 3a                	push   0x3a
c0006d97:	68 af 0b 02 c0       	push   0xc0020baf
c0006d9c:	68 b8 0b 02 c0       	push   0xc0020bb8
c0006da1:	e8 e0 d0 00 00       	call   c0013e86 <Reg::readIntWithDefault(char*, char*, int)>
c0006da6:	89 04 24             	mov    DWORD PTR [esp],eax
c0006da9:	e8 0e 57 00 00       	call   c000c4bc <User::loadClockSettings(int)>
c0006dae:	c7 04 24 a8 0c 02 c0 	mov    DWORD PTR [esp],0xc0020ca8
c0006db5:	e8 53 a1 00 00       	call   c0010f0d <KeSetBootMessage(char const*)>
c0006dba:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006dbf:	59                   	pop    ecx
c0006dc0:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006dc6:	53                   	push   ebx
c0006dc7:	e8 94 5d 00 00       	call   c000cb60 <Device::loadDriversForAll()>
c0006dcc:	c7 04 24 c0 0b 02 c0 	mov    DWORD PTR [esp],0xc0020bc0
c0006dd3:	e8 35 a1 00 00       	call   c0010f0d <KeSetBootMessage(char const*)>
c0006dd8:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c0006dde:	58                   	pop    eax
c0006ddf:	5a                   	pop    edx
c0006de0:	6a 01                	push   0x1
c0006de2:	68 d1 0b 02 c0       	push   0xc0020bd1
c0006de7:	e8 9d e8 00 00       	call   c0015689 <Thr::loadDLL(char const*, bool)>
c0006dec:	59                   	pop    ecx
c0006ded:	5a                   	pop    edx
c0006dee:	53                   	push   ebx
c0006def:	50                   	push   eax
c0006df0:	e8 d4 ea 00 00       	call   c00158c9 <Thr::executeDLL(unsigned long, void*)>
c0006df5:	83 c4 10             	add    esp,0x10
c0006df8:	83 ec 0c             	sub    esp,0xc
c0006dfb:	6a 02                	push   0x2
c0006dfd:	e8 f2 f4 00 00       	call   c00162f4 <blockTask(TaskState)>
c0006e02:	83 c4 10             	add    esp,0x10
c0006e05:	eb f1                	jmp    c0006df8 <Krnl::firstTask()+0x12e>
c0006e07:	90                   	nop

c0006e08 <Computer::Computer()>:
c0006e08:	83 ec 0c             	sub    esp,0xc
c0006e0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e0f:	83 ec 08             	sub    esp,0x8
c0006e12:	68 ed 0b 02 c0       	push   0xc0020bed
c0006e17:	50                   	push   eax
c0006e18:	e8 bf 5d 00 00       	call   c000cbdc <Device::Device(char const*)>
c0006e1d:	83 c4 10             	add    esp,0x10
c0006e20:	ba f4 0c 02 c0       	mov    edx,0xc0020cf4
c0006e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e29:	89 10                	mov    DWORD PTR [eax],edx
c0006e2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e2f:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3d:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e4b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e51:	83 ca 04             	or     edx,0x4
c0006e54:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e64:	0f b6 d0             	movzx  edx,al
c0006e67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6b:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e76:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e7c:	0f b6 d0             	movzx  edx,al
c0006e7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e83:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e8c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e92:	8d 50 01             	lea    edx,[eax+0x1]
c0006e95:	88 d1                	mov    cl,dl
c0006e97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e9b:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006ea1:	0f b6 d0             	movzx  edx,al
c0006ea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ea8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006eac:	83 e1 3f             	and    ecx,0x3f
c0006eaf:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006eb3:	90                   	nop
c0006eb4:	83 c4 0c             	add    esp,0xc
c0006eb7:	c3                   	ret    

c0006eb8 <Computer::setBootMessage(char const*)>:
c0006eb8:	c3                   	ret    
c0006eb9:	90                   	nop

c0006eba <Computer::detectFeatures()>:
c0006eba:	55                   	push   ebp
c0006ebb:	57                   	push   edi
c0006ebc:	56                   	push   esi
c0006ebd:	53                   	push   ebx
c0006ebe:	83 ec 1c             	sub    esp,0x1c
c0006ec1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ec5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ecb:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006ed1:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006ed7:	e8 1d 93 ff ff       	call   c00001f9 <detectCPUID>
c0006edc:	31 d2                	xor    edx,edx
c0006ede:	85 c0                	test   eax,eax
c0006ee0:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ee6:	0f 95 c2             	setne  dl
c0006ee9:	d1 e2                	shl    edx,1
c0006eeb:	83 e0 fd             	and    eax,0xfffffffd
c0006eee:	09 d0                	or     eax,edx
c0006ef0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef6:	a8 02                	test   al,0x2
c0006ef8:	75 51                	jne    c0006f4b <Computer::detectFeatures()+0x91>
c0006efa:	f6 05 d1 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed1,0x4
c0006f01:	74 0f                	je     c0006f12 <Computer::detectFeatures()+0x58>
c0006f03:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f09:	83 e0 fb             	and    eax,0xfffffffb
c0006f0c:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f12:	e8 5f 85 01 00       	call   c001f476 <x87Detect>
c0006f17:	83 e0 01             	and    eax,0x1
c0006f1a:	c1 e0 04             	shl    eax,0x4
c0006f1d:	89 c2                	mov    edx,eax
c0006f1f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f25:	83 e0 ef             	and    eax,0xffffffef
c0006f28:	09 d0                	or     eax,edx
c0006f2a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f30:	a8 10                	test   al,0x10
c0006f32:	88 c2                	mov    dl,al
c0006f34:	0f 85 33 01 00 00    	jne    c000706d <Computer::detectFeatures()+0x1b3>
c0006f3a:	80 e2 80             	and    dl,0x80
c0006f3d:	0f 85 4c 01 00 00    	jne    c000708f <Computer::detectFeatures()+0x1d5>
c0006f43:	83 c4 1c             	add    esp,0x1c
c0006f46:	5b                   	pop    ebx
c0006f47:	5e                   	pop    esi
c0006f48:	5f                   	pop    edi
c0006f49:	5d                   	pop    ebp
c0006f4a:	c3                   	ret    
c0006f4b:	83 ec 0c             	sub    esp,0xc
c0006f4e:	6a 20                	push   0x20
c0006f50:	e8 f1 93 00 00       	call   c0010346 <CPU::cpuidCheckEDX(unsigned int)>
c0006f55:	83 e0 01             	and    eax,0x1
c0006f58:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f5f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f65:	83 e0 f7             	and    eax,0xfffffff7
c0006f68:	09 d0                	or     eax,edx
c0006f6a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f70:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f77:	e8 ca 93 00 00       	call   c0010346 <CPU::cpuidCheckEDX(unsigned int)>
c0006f7c:	89 c2                	mov    edx,eax
c0006f7e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f84:	83 e2 01             	and    edx,0x1
c0006f87:	83 e0 fe             	and    eax,0xfffffffe
c0006f8a:	09 d0                	or     eax,edx
c0006f8c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f92:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f99:	e8 a8 93 00 00       	call   c0010346 <CPU::cpuidCheckEDX(unsigned int)>
c0006f9e:	89 c2                	mov    edx,eax
c0006fa0:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006fa6:	c1 e2 07             	shl    edx,0x7
c0006fa9:	83 e0 7f             	and    eax,0x7f
c0006fac:	09 d0                	or     eax,edx
c0006fae:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006fb4:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006fbb:	e8 86 93 00 00       	call   c0010346 <CPU::cpuidCheckEDX(unsigned int)>
c0006fc0:	83 c4 10             	add    esp,0x10
c0006fc3:	83 e0 01             	and    eax,0x1
c0006fc6:	c1 e0 05             	shl    eax,0x5
c0006fc9:	89 c2                	mov    edx,eax
c0006fcb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd1:	83 e0 df             	and    eax,0xffffffdf
c0006fd4:	09 d0                	or     eax,edx
c0006fd6:	f7 05 d0 6e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0026ed0,0x401
c0006fe0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fe6:	0f 84 c9 00 00 00    	je     c00070b5 <Computer::detectFeatures()+0x1fb>
c0006fec:	83 e0 fe             	and    eax,0xfffffffe
c0006fef:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ff5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ffb:	89 c2                	mov    edx,eax
c0006ffd:	83 e2 09             	and    edx,0x9
c0007000:	83 fa 01             	cmp    edx,0x1
c0007003:	75 09                	jne    c000700e <Computer::detectFeatures()+0x154>
c0007005:	83 e0 fe             	and    eax,0xfffffffe
c0007008:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000700e:	83 ec 0c             	sub    esp,0xc
c0007011:	8d 44 24 18          	lea    eax,[esp+0x18]
c0007015:	50                   	push   eax
c0007016:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000701a:	55                   	push   ebp
c000701b:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000701f:	57                   	push   edi
c0007020:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007024:	56                   	push   esi
c0007025:	68 00 00 00 80       	push   0x80000000
c000702a:	e8 93 92 00 00       	call   c00102c2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000702f:	83 c4 20             	add    esp,0x20
c0007032:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007039:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000703d:	0f 86 b7 fe ff ff    	jbe    c0006efa <Computer::detectFeatures()+0x40>
c0007043:	83 ec 0c             	sub    esp,0xc
c0007046:	50                   	push   eax
c0007047:	55                   	push   ebp
c0007048:	57                   	push   edi
c0007049:	56                   	push   esi
c000704a:	68 01 00 00 80       	push   0x80000001
c000704f:	e8 6e 92 00 00       	call   c00102c2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007054:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000705a:	83 c4 20             	add    esp,0x20
c000705d:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007062:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007068:	e9 8d fe ff ff       	jmp    c0006efa <Computer::detectFeatures()+0x40>
c000706d:	e8 be 83 01 00       	call   c001f430 <absolutelyNoChanceInHell>
c0007072:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007078:	83 e2 7f             	and    edx,0x7f
c000707b:	c1 e0 07             	shl    eax,0x7
c000707e:	09 c2                	or     edx,eax
c0007080:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007086:	80 e2 80             	and    dl,0x80
c0007089:	0f 84 b4 fe ff ff    	je     c0006f43 <Computer::detectFeatures()+0x89>
c000708f:	e8 0c 80 01 00       	call   c001f0a0 <avxDetect>
c0007094:	83 e0 01             	and    eax,0x1
c0007097:	c1 e0 05             	shl    eax,0x5
c000709a:	89 c2                	mov    edx,eax
c000709c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c00070a2:	83 e0 df             	and    eax,0xffffffdf
c00070a5:	09 d0                	or     eax,edx
c00070a7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00070ad:	83 c4 1c             	add    esp,0x1c
c00070b0:	5b                   	pop    ebx
c00070b1:	5e                   	pop    esi
c00070b2:	5f                   	pop    edi
c00070b3:	5d                   	pop    ebp
c00070b4:	c3                   	ret    
c00070b5:	83 ec 0c             	sub    esp,0xc
c00070b8:	68 00 02 00 00       	push   0x200
c00070bd:	e8 84 92 00 00       	call   c0010346 <CPU::cpuidCheckEDX(unsigned int)>
c00070c2:	83 c4 10             	add    esp,0x10
c00070c5:	89 c2                	mov    edx,eax
c00070c7:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070cd:	83 e2 01             	and    edx,0x1
c00070d0:	83 e0 fe             	and    eax,0xfffffffe
c00070d3:	09 d0                	or     eax,edx
c00070d5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070db:	e9 15 ff ff ff       	jmp    c0006ff5 <Computer::detectFeatures()+0x13b>

c00070e0 <Computer::displayFeatures()>:
c00070e0:	c3                   	ret    
c00070e1:	90                   	nop

c00070e2 <Computer::rdmsr(unsigned int)>:
c00070e2:	83 ec 0c             	sub    esp,0xc
c00070e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070e9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070f0:	74 0a                	je     c00070fc <Computer::rdmsr(unsigned int)+0x1a>
c00070f2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070f6:	0f 32                	rdmsr  
c00070f8:	83 c4 0c             	add    esp,0xc
c00070fb:	c3                   	ret    
c00070fc:	83 ec 0c             	sub    esp,0xc
c00070ff:	68 f6 0b 02 c0       	push   0xc0020bf6
c0007104:	e8 02 a5 00 00       	call   c001160b <KePanic(char const*)>
c0007109:	83 c4 10             	add    esp,0x10
c000710c:	eb e4                	jmp    c00070f2 <Computer::rdmsr(unsigned int)+0x10>

c000710e <Computer::wrmsr(unsigned int, unsigned long long)>:
c000710e:	57                   	push   edi
c000710f:	56                   	push   esi
c0007110:	83 ec 04             	sub    esp,0x4
c0007113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007117:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000711b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000711f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007126:	74 10                	je     c0007138 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007128:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000712c:	89 f0                	mov    eax,esi
c000712e:	89 fa                	mov    edx,edi
c0007130:	0f 30                	wrmsr  
c0007132:	83 c4 04             	add    esp,0x4
c0007135:	5e                   	pop    esi
c0007136:	5f                   	pop    edi
c0007137:	c3                   	ret    
c0007138:	83 ec 0c             	sub    esp,0xc
c000713b:	68 fc 0b 02 c0       	push   0xc0020bfc
c0007140:	e8 c6 a4 00 00       	call   c001160b <KePanic(char const*)>
c0007145:	83 c4 10             	add    esp,0x10
c0007148:	eb de                	jmp    c0007128 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c000714a <Computer::shutdown()>:
c000714a:	83 ec 0c             	sub    esp,0xc
c000714d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007151:	8b 10                	mov    edx,DWORD PTR [eax]
c0007153:	6a 00                	push   0x0
c0007155:	6a 00                	push   0x0
c0007157:	6a 00                	push   0x0
c0007159:	50                   	push   eax
c000715a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000715d:	83 c4 1c             	add    esp,0x1c
c0007160:	c3                   	ret    
c0007161:	90                   	nop

c0007162 <Computer::restart()>:
c0007162:	83 ec 0c             	sub    esp,0xc
c0007165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007169:	8b 10                	mov    edx,DWORD PTR [eax]
c000716b:	6a 00                	push   0x0
c000716d:	6a 00                	push   0x0
c000716f:	6a 01                	push   0x1
c0007171:	50                   	push   eax
c0007172:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007175:	83 c4 1c             	add    esp,0x1c
c0007178:	c3                   	ret    
c0007179:	90                   	nop

c000717a <Computer::sleep()>:
c000717a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000717e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007184:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007188:	e9 8b 8c 00 00       	jmp    c000fe18 <ACPI::sleep()>
c000718d:	90                   	nop

c000718e <Computer::nmiEnabled()>:
c000718e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007192:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007198:	c3                   	ret    
c0007199:	90                   	nop

c000719a <Computer::readCMOS(unsigned char)>:
c000719a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000719e:	31 d2                	xor    edx,edx
c00071a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00071a4:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00071ab:	75 02                	jne    c00071af <Computer::readCMOS(unsigned char)+0x15>
c00071ad:	b2 80                	mov    dl,0x80
c00071af:	09 d0                	or     eax,edx
c00071b1:	e6 70                	out    0x70,al
c00071b3:	e4 71                	in     al,0x71
c00071b5:	c3                   	ret    

c00071b6 <Computer::enableNMI(bool)>:
c00071b6:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c00071ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071be:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071c4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071cc:	eb cc                	jmp    c000719a <Computer::readCMOS(unsigned char)>

c00071ce <Computer::open(int, int, void*)>:
c00071ce:	56                   	push   esi
c00071cf:	53                   	push   ebx
c00071d0:	83 ec 10             	sub    esp,0x10
c00071d3:	f6 05 d0 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed0,0x4
c00071da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071de:	68 02 0c 02 c0       	push   0xc0020c02
c00071e3:	0f 94 05 a0 36 02 c0 	sete   BYTE PTR ds:0xc00236a0
c00071ea:	e8 1e 9d 00 00       	call   c0010f0d <KeSetBootMessage(char const*)>
c00071ef:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071f6:	e8 d8 08 00 00       	call   c0007ad3 <malloc>
c00071fb:	89 04 24             	mov    DWORD PTR [esp],eax
c00071fe:	89 c6                	mov    esi,eax
c0007200:	e8 87 87 00 00       	call   c000f98c <ACPI::ACPI()>
c0007205:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000720b:	58                   	pop    eax
c000720c:	5a                   	pop    edx
c000720d:	56                   	push   esi
c000720e:	53                   	push   ebx
c000720f:	e8 30 58 00 00       	call   c000ca44 <Device::addChild(Device*)>
c0007214:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007217:	e8 9e fc ff ff       	call   c0006eba <Computer::detectFeatures()>
c000721c:	59                   	pop    ecx
c000721d:	5e                   	pop    esi
c000721e:	6a 01                	push   0x1
c0007220:	53                   	push   ebx
c0007221:	e8 90 ff ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c0007226:	c7 04 24 1a 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c1a
c000722d:	e8 db 9c 00 00       	call   c0010f0d <KeSetBootMessage(char const*)>
c0007232:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007239:	e8 95 08 00 00       	call   c0007ad3 <malloc>
c000723e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007241:	89 c6                	mov    esi,eax
c0007243:	e8 b6 91 00 00       	call   c00103fe <CPU::CPU()>
c0007248:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000724e:	58                   	pop    eax
c000724f:	5a                   	pop    edx
c0007250:	56                   	push   esi
c0007251:	53                   	push   ebx
c0007252:	e8 ed 57 00 00       	call   c000ca44 <Device::addChild(Device*)>
c0007257:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000725d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007261:	8b 10                	mov    edx,DWORD PTR [eax]
c0007263:	51                   	push   ecx
c0007264:	6a 00                	push   0x0
c0007266:	6a 00                	push   0x0
c0007268:	50                   	push   eax
c0007269:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000726c:	83 c4 14             	add    esp,0x14
c000726f:	68 c8 0c 02 c0       	push   0xc0020cc8
c0007274:	e8 94 9c 00 00       	call   c0010f0d <KeSetBootMessage(char const*)>
c0007279:	e8 58 0d 01 00       	call   c0017fd6 <HalInitialiseCoprocessor()>
c000727e:	c7 04 24 34 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c34
c0007285:	e8 83 9c 00 00       	call   c0010f0d <KeSetBootMessage(char const*)>
c000728a:	c7 04 24 ca 6c 00 c0 	mov    DWORD PTR [esp],0xc0006cca
c0007291:	e8 3a ed 00 00       	call   c0015fd0 <setupMultitasking(void (*)())>
c0007296:	83 c4 14             	add    esp,0x14
c0007299:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000729e:	5b                   	pop    ebx
c000729f:	5e                   	pop    esi
c00072a0:	c3                   	ret    
c00072a1:	90                   	nop

c00072a2 <Computer::disableNMI()>:
c00072a2:	6a 00                	push   0x0
c00072a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a8:	50                   	push   eax
c00072a9:	e8 08 ff ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c00072ae:	5a                   	pop    edx
c00072af:	59                   	pop    ecx
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop

c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c00072b2:	53                   	push   ebx
c00072b3:	b2 80                	mov    dl,0x80
c00072b5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00072b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072bd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00072c1:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00072c8:	74 02                	je     c00072cc <Computer::writeCMOS(unsigned char, unsigned char)+0x1a>
c00072ca:	31 d2                	xor    edx,edx
c00072cc:	09 d0                	or     eax,edx
c00072ce:	e6 70                	out    0x70,al
c00072d0:	88 c8                	mov    al,cl
c00072d2:	e6 71                	out    0x71,al
c00072d4:	5b                   	pop    ebx
c00072d5:	c3                   	ret    

c00072d6 <Computer::handleNMI()>:
c00072d6:	56                   	push   esi
c00072d7:	53                   	push   ebx
c00072d8:	83 ec 10             	sub    esp,0x10
c00072db:	e4 92                	in     al,0x92
c00072dd:	89 c6                	mov    esi,eax
c00072df:	e4 61                	in     al,0x61
c00072e1:	68 4f 0c 02 c0       	push   0xc0020c4f
c00072e6:	88 c3                	mov    bl,al
c00072e8:	e8 1d 36 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00072ed:	83 c4 10             	add    esp,0x10
c00072f0:	83 e6 10             	and    esi,0x10
c00072f3:	75 10                	jne    c0007305 <Computer::handleNMI()+0x2f>
c00072f5:	f6 c3 40             	test   bl,0x40
c00072f8:	75 20                	jne    c000731a <Computer::handleNMI()+0x44>
c00072fa:	80 e3 80             	and    bl,0x80
c00072fd:	75 30                	jne    c000732f <Computer::handleNMI()+0x59>
c00072ff:	83 c4 04             	add    esp,0x4
c0007302:	5b                   	pop    ebx
c0007303:	5e                   	pop    esi
c0007304:	c3                   	ret    
c0007305:	83 ec 0c             	sub    esp,0xc
c0007308:	68 60 0c 02 c0       	push   0xc0020c60
c000730d:	e8 f9 a2 00 00       	call   c001160b <KePanic(char const*)>
c0007312:	83 c4 10             	add    esp,0x10
c0007315:	f6 c3 40             	test   bl,0x40
c0007318:	74 e0                	je     c00072fa <Computer::handleNMI()+0x24>
c000731a:	83 ec 0c             	sub    esp,0xc
c000731d:	68 6d 0c 02 c0       	push   0xc0020c6d
c0007322:	e8 e4 a2 00 00       	call   c001160b <KePanic(char const*)>
c0007327:	83 c4 10             	add    esp,0x10
c000732a:	80 e3 80             	and    bl,0x80
c000732d:	74 d0                	je     c00072ff <Computer::handleNMI()+0x29>
c000732f:	c7 44 24 10 77 0c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020c77
c0007337:	83 c4 04             	add    esp,0x4
c000733a:	5b                   	pop    ebx
c000733b:	5e                   	pop    esi
c000733c:	e9 ca a2 00 00       	jmp    c001160b <KePanic(char const*)>
c0007341:	90                   	nop

c0007342 <GDTEntry::setBase(unsigned int)>:
c0007342:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007346:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000734a:	89 c1                	mov    ecx,eax
c000734c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007350:	c1 e9 10             	shr    ecx,0x10
c0007353:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007356:	c1 e8 18             	shr    eax,0x18
c0007359:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000735c:	c3                   	ret    
c000735d:	90                   	nop

c000735e <GDTEntry::setLimit(unsigned int)>:
c000735e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007362:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007366:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007369:	66 89 01             	mov    WORD PTR [ecx],ax
c000736c:	c1 e8 10             	shr    eax,0x10
c000736f:	83 e0 0f             	and    eax,0xf
c0007372:	83 e2 f0             	and    edx,0xfffffff0
c0007375:	09 d0                	or     eax,edx
c0007377:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000737a:	c3                   	ret    
c000737b:	90                   	nop

c000737c <GDT::GDT()>:
c000737c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007380:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007386:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000738a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007390:	90                   	nop
c0007391:	c3                   	ret    

c0007392 <GDT::addEntry(GDTEntry)>:
c0007392:	53                   	push   ebx
c0007393:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007397:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000739f:	8b 02                	mov    eax,DWORD PTR [edx]
c00073a1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00073a5:	8d 48 01             	lea    ecx,[eax+0x1]
c00073a8:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00073ac:	c1 e0 03             	shl    eax,0x3
c00073af:	89 0a                	mov    DWORD PTR [edx],ecx
c00073b1:	5b                   	pop    ebx
c00073b2:	c3                   	ret    
c00073b3:	90                   	nop

c00073b4 <GDT::getNumberOfEntries()>:
c00073b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00073ba:	c3                   	ret    
c00073bb:	90                   	nop

c00073bc <GDT::flush()>:
c00073bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073c0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073c2:	83 c0 04             	add    eax,0x4
c00073c5:	a3 c2 6e 02 c0       	mov    ds:0xc0026ec2,eax
c00073ca:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073d1:	66 89 15 c0 6e 02 c0 	mov    WORD PTR ds:0xc0026ec0,dx
c00073d8:	e9 7d 8f ff ff       	jmp    c000035a <loadGDT>
c00073dd:	90                   	nop

c00073de <GDT::setup()>:
c00073de:	57                   	push   edi
c00073df:	56                   	push   esi
c00073e0:	53                   	push   ebx
c00073e1:	83 ec 30             	sub    esp,0x30
c00073e4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073e8:	6a 00                	push   0x0
c00073ea:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073ee:	56                   	push   esi
c00073ef:	e8 4e ff ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c00073f4:	6a 00                	push   0x0
c00073f6:	56                   	push   esi
c00073f7:	e8 62 ff ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c00073fc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007404:	6a 00                	push   0x0
c0007406:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000740a:	56                   	push   esi
c000740b:	e8 32 ff ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007410:	68 ff ff ff 00       	push   0xffffff
c0007415:	56                   	push   esi
c0007416:	e8 43 ff ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c000741b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000741f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007423:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007428:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000742c:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007431:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007435:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007439:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000743d:	89 f8                	mov    eax,edi
c000743f:	89 fa                	mov    edx,edi
c0007441:	80 e4 f7             	and    ah,0xf7
c0007444:	80 ce 60             	or     dh,0x60
c0007447:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000744b:	89 c7                	mov    edi,eax
c000744d:	80 cc 60             	or     ah,0x60
c0007450:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007454:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007458:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000745c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007460:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007464:	83 c4 20             	add    esp,0x20
c0007467:	6a 00                	push   0x0
c0007469:	8d 44 24 24          	lea    eax,[esp+0x24]
c000746d:	50                   	push   eax
c000746e:	e8 cf fe ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007473:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007477:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000747b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000747f:	83 e0 3f             	and    eax,0x3f
c0007482:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007486:	6a 00                	push   0x0
c0007488:	8d 44 24 34          	lea    eax,[esp+0x34]
c000748c:	50                   	push   eax
c000748d:	e8 b0 fe ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007492:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007496:	83 e0 3f             	and    eax,0x3f
c0007499:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000749d:	83 c4 0c             	add    esp,0xc
c00074a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a8:	53                   	push   ebx
c00074a9:	e8 e4 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ae:	83 c4 0c             	add    esp,0xc
c00074b1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b9:	53                   	push   ebx
c00074ba:	e8 d3 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074bf:	83 c4 0c             	add    esp,0xc
c00074c2:	57                   	push   edi
c00074c3:	56                   	push   esi
c00074c4:	53                   	push   ebx
c00074c5:	e8 c8 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ca:	83 c4 0c             	add    esp,0xc
c00074cd:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d5:	53                   	push   ebx
c00074d6:	e8 b7 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074db:	83 c4 0c             	add    esp,0xc
c00074de:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e6:	53                   	push   ebx
c00074e7:	e8 a6 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ec:	83 c4 0c             	add    esp,0xc
c00074ef:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f7:	53                   	push   ebx
c00074f8:	e8 95 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074fd:	83 c4 0c             	add    esp,0xc
c0007500:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007504:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007508:	53                   	push   ebx
c0007509:	e8 84 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c000750e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007511:	e8 a6 fe ff ff       	call   c00073bc <GDT::flush()>
c0007516:	83 c4 40             	add    esp,0x40
c0007519:	5b                   	pop    ebx
c000751a:	5e                   	pop    esi
c000751b:	5f                   	pop    edi
c000751c:	c3                   	ret    

c000751d <idleFunction(void*)>:
c000751d:	83 ec 0c             	sub    esp,0xc
c0007520:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007525:	48                   	dec    eax
c0007526:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000752b:	75 01                	jne    c000752e <idleFunction(void*)+0x11>
c000752d:	fb                   	sti    
c000752e:	e8 6f 07 01 00       	call   c0017ca2 <HalSystemIdle()>
c0007533:	e8 fa 84 01 00       	call   c001fa32 <idleCommon()>
c0007538:	eb f4                	jmp    c000752e <idleFunction(void*)+0x11>
c000753a:	66 90                	xchg   ax,ax

c000753c <IDTEntry::IDTEntry(bool)>:
c000753c:	53                   	push   ebx
c000753d:	83 ec 04             	sub    esp,0x4
c0007540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007544:	88 04 24             	mov    BYTE PTR [esp],al
c0007547:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007555:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007559:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000755d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007560:	83 e2 f0             	and    edx,0xfffffff0
c0007563:	83 ca 0e             	or     edx,0xe
c0007566:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007569:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007570:	83 e2 ef             	and    edx,0xffffffef
c0007573:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007576:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000757a:	85 c0                	test   eax,eax
c000757c:	74 06                	je     c0007584 <IDTEntry::IDTEntry(bool)+0x48>
c000757e:	b2 03                	mov    dl,0x3
c0007580:	eb 06                	jmp    c0007588 <IDTEntry::IDTEntry(bool)+0x4c>
c0007582:	66 90                	xchg   ax,ax
c0007584:	b2 00                	mov    dl,0x0
c0007586:	66 90                	xchg   ax,ax
c0007588:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000758c:	83 e2 03             	and    edx,0x3
c000758f:	89 d3                	mov    ebx,edx
c0007591:	c1 e3 05             	shl    ebx,0x5
c0007594:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007597:	83 e2 9f             	and    edx,0xffffff9f
c000759a:	88 d1                	mov    cl,dl
c000759c:	88 da                	mov    dl,bl
c000759e:	09 ca                	or     edx,ecx
c00075a0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00075a7:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075aa:	83 ca 80             	or     edx,0xffffff80
c00075ad:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075b0:	90                   	nop
c00075b1:	83 c4 04             	add    esp,0x4
c00075b4:	5b                   	pop    ebx
c00075b5:	c3                   	ret    

c00075b6 <IDTEntry::setOffset(unsigned int)>:
c00075b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00075ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075be:	66 89 02             	mov    WORD PTR [edx],ax
c00075c1:	c1 e8 10             	shr    eax,0x10
c00075c4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075c8:	c3                   	ret    
c00075c9:	90                   	nop
c00075ca:	66 90                	xchg   ax,ax

c00075cc <IDT::IDT()>:
c00075cc:	90                   	nop
c00075cd:	c3                   	ret    

c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075d2:	83 c0 30             	add    eax,0x30
c00075d5:	c3                   	ret    

c00075d6 <IDT::addEntry(IDTEntry, int)>:
c00075d6:	53                   	push   ebx
c00075d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075e7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ea:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075ee:	5b                   	pop    ebx
c00075ef:	c3                   	ret    

c00075f0 <IDT::addEntry(int, void (*)(), bool)>:
c00075f0:	53                   	push   ebx
c00075f1:	83 ec 10             	sub    esp,0x10
c00075f4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075f9:	50                   	push   eax
c00075fa:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075fe:	53                   	push   ebx
c00075ff:	e8 38 ff ff ff       	call   c000753c <IDTEntry::IDTEntry(bool)>
c0007604:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007608:	53                   	push   ebx
c0007609:	e8 a8 ff ff ff       	call   c00075b6 <IDTEntry::setOffset(unsigned int)>
c000760e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007612:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007616:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000761a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000761e:	e8 b3 ff ff ff       	call   c00075d6 <IDT::addEntry(IDTEntry, int)>
c0007623:	83 c4 30             	add    esp,0x30
c0007626:	5b                   	pop    ebx
c0007627:	c3                   	ret    

c0007628 <IDT::flush()>:
c0007628:	66 c7 05 c8 6e 02 c0 ff 07 	mov    WORD PTR ds:0xc0026ec8,0x7ff
c0007631:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007635:	a3 ca 6e 02 c0       	mov    ds:0xc0026eca,eax
c000763a:	0f 01 1d c8 6e 02 c0 	lidtd  ds:0xc0026ec8
c0007641:	c3                   	ret    

c0007642 <IDT::setup()>:
c0007642:	57                   	push   edi
c0007643:	56                   	push   esi
c0007644:	53                   	push   ebx
c0007645:	83 ec 10             	sub    esp,0x10
c0007648:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000764c:	6a 00                	push   0x0
c000764e:	68 30 f1 01 c0       	push   0xc001f130
c0007653:	6a 00                	push   0x0
c0007655:	53                   	push   ebx
c0007656:	e8 95 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000765b:	6a 00                	push   0x0
c000765d:	68 40 f1 01 c0       	push   0xc001f140
c0007662:	6a 01                	push   0x1
c0007664:	53                   	push   ebx
c0007665:	e8 86 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000766a:	83 c4 20             	add    esp,0x20
c000766d:	6a 00                	push   0x0
c000766f:	68 4a f1 01 c0       	push   0xc001f14a
c0007674:	6a 02                	push   0x2
c0007676:	53                   	push   ebx
c0007677:	e8 74 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000767c:	6a 00                	push   0x0
c000767e:	68 54 f1 01 c0       	push   0xc001f154
c0007683:	6a 03                	push   0x3
c0007685:	53                   	push   ebx
c0007686:	e8 65 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000768b:	83 c4 20             	add    esp,0x20
c000768e:	6a 00                	push   0x0
c0007690:	68 5e f1 01 c0       	push   0xc001f15e
c0007695:	6a 04                	push   0x4
c0007697:	53                   	push   ebx
c0007698:	e8 53 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000769d:	6a 00                	push   0x0
c000769f:	68 68 f1 01 c0       	push   0xc001f168
c00076a4:	6a 05                	push   0x5
c00076a6:	53                   	push   ebx
c00076a7:	e8 44 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076ac:	83 c4 20             	add    esp,0x20
c00076af:	6a 00                	push   0x0
c00076b1:	68 72 f1 01 c0       	push   0xc001f172
c00076b6:	6a 06                	push   0x6
c00076b8:	53                   	push   ebx
c00076b9:	e8 32 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076be:	6a 00                	push   0x0
c00076c0:	68 7c f1 01 c0       	push   0xc001f17c
c00076c5:	6a 07                	push   0x7
c00076c7:	53                   	push   ebx
c00076c8:	e8 23 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076cd:	83 c4 20             	add    esp,0x20
c00076d0:	6a 00                	push   0x0
c00076d2:	68 86 f1 01 c0       	push   0xc001f186
c00076d7:	6a 08                	push   0x8
c00076d9:	53                   	push   ebx
c00076da:	e8 11 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076df:	6a 00                	push   0x0
c00076e1:	68 8e f1 01 c0       	push   0xc001f18e
c00076e6:	6a 09                	push   0x9
c00076e8:	53                   	push   ebx
c00076e9:	e8 02 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076ee:	83 c4 20             	add    esp,0x20
c00076f1:	6a 00                	push   0x0
c00076f3:	68 98 f1 01 c0       	push   0xc001f198
c00076f8:	6a 0a                	push   0xa
c00076fa:	53                   	push   ebx
c00076fb:	e8 f0 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007700:	6a 00                	push   0x0
c0007702:	68 a0 f1 01 c0       	push   0xc001f1a0
c0007707:	6a 0b                	push   0xb
c0007709:	53                   	push   ebx
c000770a:	e8 e1 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000770f:	83 c4 20             	add    esp,0x20
c0007712:	6a 00                	push   0x0
c0007714:	68 a8 f1 01 c0       	push   0xc001f1a8
c0007719:	6a 0c                	push   0xc
c000771b:	53                   	push   ebx
c000771c:	e8 cf fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007721:	6a 00                	push   0x0
c0007723:	68 b0 f1 01 c0       	push   0xc001f1b0
c0007728:	6a 0d                	push   0xd
c000772a:	53                   	push   ebx
c000772b:	e8 c0 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007730:	83 c4 20             	add    esp,0x20
c0007733:	6a 00                	push   0x0
c0007735:	68 ca f1 01 c0       	push   0xc001f1ca
c000773a:	6a 0e                	push   0xe
c000773c:	53                   	push   ebx
c000773d:	e8 ae fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007742:	6a 00                	push   0x0
c0007744:	68 d2 f1 01 c0       	push   0xc001f1d2
c0007749:	6a 0f                	push   0xf
c000774b:	53                   	push   ebx
c000774c:	e8 9f fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007751:	83 c4 20             	add    esp,0x20
c0007754:	6a 00                	push   0x0
c0007756:	68 dc f1 01 c0       	push   0xc001f1dc
c000775b:	6a 10                	push   0x10
c000775d:	53                   	push   ebx
c000775e:	e8 8d fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007763:	6a 00                	push   0x0
c0007765:	68 e6 f1 01 c0       	push   0xc001f1e6
c000776a:	6a 11                	push   0x11
c000776c:	53                   	push   ebx
c000776d:	e8 7e fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007772:	83 c4 20             	add    esp,0x20
c0007775:	6a 00                	push   0x0
c0007777:	68 f0 f1 01 c0       	push   0xc001f1f0
c000777c:	6a 12                	push   0x12
c000777e:	53                   	push   ebx
c000777f:	e8 6c fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007784:	6a 01                	push   0x1
c0007786:	68 8a f2 01 c0       	push   0xc001f28a
c000778b:	6a 60                	push   0x60
c000778d:	53                   	push   ebx
c000778e:	e8 5d fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007793:	83 c4 20             	add    esp,0x20
c0007796:	6a 00                	push   0x0
c0007798:	68 91 f2 01 c0       	push   0xc001f291
c000779d:	6a 20                	push   0x20
c000779f:	53                   	push   ebx
c00077a0:	e8 4b fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077a5:	6a 00                	push   0x0
c00077a7:	68 7c f2 01 c0       	push   0xc001f27c
c00077ac:	6a 21                	push   0x21
c00077ae:	53                   	push   ebx
c00077af:	e8 3c fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077b4:	83 c4 20             	add    esp,0x20
c00077b7:	6a 00                	push   0x0
c00077b9:	68 83 f2 01 c0       	push   0xc001f283
c00077be:	6a 22                	push   0x22
c00077c0:	53                   	push   ebx
c00077c1:	e8 2a fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077c6:	6a 00                	push   0x0
c00077c8:	68 fa f1 01 c0       	push   0xc001f1fa
c00077cd:	6a 23                	push   0x23
c00077cf:	53                   	push   ebx
c00077d0:	e8 1b fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077d5:	83 c4 20             	add    esp,0x20
c00077d8:	6a 00                	push   0x0
c00077da:	68 04 f2 01 c0       	push   0xc001f204
c00077df:	6a 24                	push   0x24
c00077e1:	53                   	push   ebx
c00077e2:	e8 09 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077e7:	6a 00                	push   0x0
c00077e9:	68 0e f2 01 c0       	push   0xc001f20e
c00077ee:	6a 25                	push   0x25
c00077f0:	53                   	push   ebx
c00077f1:	e8 fa fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077f6:	83 c4 20             	add    esp,0x20
c00077f9:	6a 00                	push   0x0
c00077fb:	68 18 f2 01 c0       	push   0xc001f218
c0007800:	6a 26                	push   0x26
c0007802:	53                   	push   ebx
c0007803:	e8 e8 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007808:	6a 00                	push   0x0
c000780a:	68 22 f2 01 c0       	push   0xc001f222
c000780f:	6a 27                	push   0x27
c0007811:	53                   	push   ebx
c0007812:	e8 d9 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007817:	83 c4 20             	add    esp,0x20
c000781a:	6a 00                	push   0x0
c000781c:	68 2c f2 01 c0       	push   0xc001f22c
c0007821:	6a 28                	push   0x28
c0007823:	53                   	push   ebx
c0007824:	e8 c7 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007829:	6a 00                	push   0x0
c000782b:	68 36 f2 01 c0       	push   0xc001f236
c0007830:	6a 29                	push   0x29
c0007832:	53                   	push   ebx
c0007833:	e8 b8 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007838:	83 c4 20             	add    esp,0x20
c000783b:	6a 00                	push   0x0
c000783d:	68 40 f2 01 c0       	push   0xc001f240
c0007842:	6a 2a                	push   0x2a
c0007844:	53                   	push   ebx
c0007845:	e8 a6 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000784a:	6a 00                	push   0x0
c000784c:	68 4a f2 01 c0       	push   0xc001f24a
c0007851:	6a 2b                	push   0x2b
c0007853:	53                   	push   ebx
c0007854:	e8 97 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007859:	83 c4 20             	add    esp,0x20
c000785c:	6a 00                	push   0x0
c000785e:	68 54 f2 01 c0       	push   0xc001f254
c0007863:	6a 2c                	push   0x2c
c0007865:	53                   	push   ebx
c0007866:	e8 85 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000786b:	6a 00                	push   0x0
c000786d:	68 5e f2 01 c0       	push   0xc001f25e
c0007872:	6a 2d                	push   0x2d
c0007874:	53                   	push   ebx
c0007875:	e8 76 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000787a:	83 c4 20             	add    esp,0x20
c000787d:	6a 00                	push   0x0
c000787f:	68 68 f2 01 c0       	push   0xc001f268
c0007884:	6a 2e                	push   0x2e
c0007886:	53                   	push   ebx
c0007887:	e8 64 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000788c:	6a 00                	push   0x0
c000788e:	68 72 f2 01 c0       	push   0xc001f272
c0007893:	6a 2f                	push   0x2f
c0007895:	53                   	push   ebx
c0007896:	e8 55 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000789b:	83 c4 20             	add    esp,0x20
c000789e:	6a 00                	push   0x0
c00078a0:	68 cc f3 01 c0       	push   0xc001f3cc
c00078a5:	6a 30                	push   0x30
c00078a7:	53                   	push   ebx
c00078a8:	e8 43 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ad:	6a 00                	push   0x0
c00078af:	68 d6 f3 01 c0       	push   0xc001f3d6
c00078b4:	6a 31                	push   0x31
c00078b6:	53                   	push   ebx
c00078b7:	e8 34 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078bc:	83 c4 20             	add    esp,0x20
c00078bf:	6a 00                	push   0x0
c00078c1:	68 e0 f3 01 c0       	push   0xc001f3e0
c00078c6:	6a 32                	push   0x32
c00078c8:	53                   	push   ebx
c00078c9:	e8 22 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ce:	6a 00                	push   0x0
c00078d0:	68 ea f3 01 c0       	push   0xc001f3ea
c00078d5:	6a 33                	push   0x33
c00078d7:	53                   	push   ebx
c00078d8:	e8 13 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078dd:	83 c4 20             	add    esp,0x20
c00078e0:	6a 00                	push   0x0
c00078e2:	68 f4 f3 01 c0       	push   0xc001f3f4
c00078e7:	6a 34                	push   0x34
c00078e9:	53                   	push   ebx
c00078ea:	e8 01 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ef:	6a 00                	push   0x0
c00078f1:	68 fe f3 01 c0       	push   0xc001f3fe
c00078f6:	6a 35                	push   0x35
c00078f8:	53                   	push   ebx
c00078f9:	e8 f2 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078fe:	83 c4 20             	add    esp,0x20
c0007901:	6a 00                	push   0x0
c0007903:	68 08 f4 01 c0       	push   0xc001f408
c0007908:	6a 36                	push   0x36
c000790a:	53                   	push   ebx
c000790b:	e8 e0 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007910:	6a 00                	push   0x0
c0007912:	68 12 f4 01 c0       	push   0xc001f412
c0007917:	6a 37                	push   0x37
c0007919:	53                   	push   ebx
c000791a:	e8 d1 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000791f:	83 c4 1c             	add    esp,0x1c
c0007922:	6a 03                	push   0x3
c0007924:	6a 02                	push   0x2
c0007926:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c000792c:	e8 d5 24 00 00       	call   c0009e06 <VAS::allocatePages(int, int)>
c0007931:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007938:	89 c6                	mov    esi,eax
c000793a:	e8 94 01 00 00       	call   c0007ad3 <malloc>
c000793f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007945:	89 04 24             	mov    DWORD PTR [esp],eax
c0007948:	89 c7                	mov    edi,eax
c000794a:	e8 dd 15 00 00       	call   c0008f2c <TSS::TSS()>
c000794f:	83 c4 0c             	add    esp,0xc
c0007952:	68 86 f1 01 c0       	push   0xc001f186
c0007957:	56                   	push   esi
c0007958:	57                   	push   edi
c0007959:	e8 12 16 00 00       	call   c0008f70 <TSS::setup(unsigned long, unsigned long)>
c000795e:	89 c6                	mov    esi,eax
c0007960:	58                   	pop    eax
c0007961:	5a                   	pop    edx
c0007962:	6a 00                	push   0x0
c0007964:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007968:	50                   	push   eax
c0007969:	e8 ce fb ff ff       	call   c000753c <IDTEntry::IDTEntry(bool)>
c000796e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007972:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007977:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000797e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007982:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007988:	80 ce 05             	or     dh,0x5
c000798b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000798f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007992:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007996:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007999:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000799c:	e8 87 fc ff ff       	call   c0007628 <IDT::flush()>
c00079a1:	83 c4 20             	add    esp,0x20
c00079a4:	5b                   	pop    ebx
c00079a5:	5e                   	pop    esi
c00079a6:	5f                   	pop    edi
c00079a7:	c3                   	ret    

c00079a8 <sbrk>:
c00079a8:	55                   	push   ebp
c00079a9:	57                   	push   edi
c00079aa:	56                   	push   esi
c00079ab:	53                   	push   ebx
c00079ac:	83 ec 1c             	sub    esp,0x1c
c00079af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00079b3:	85 c0                	test   eax,eax
c00079b5:	74 66                	je     c0007a1d <sbrk+0x75>
c00079b7:	78 6b                	js     c0007a24 <sbrk+0x7c>
c00079b9:	8b 15 94 36 02 c0    	mov    edx,DWORD PTR ds:0xc0023694
c00079bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079c3:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c00079c9:	05 ff 0f 00 00       	add    eax,0xfff
c00079ce:	0f 49 e8             	cmovns ebp,eax
c00079d1:	c1 fd 0c             	sar    ebp,0xc
c00079d4:	bb 00 00 00 00       	mov    ebx,0x0
c00079d9:	8b 35 b0 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fb0
c00079df:	8b 3d 94 36 02 c0    	mov    edi,DWORD PTR ds:0xc0023694
c00079e5:	e8 f8 03 00 00       	call   c0007de2 <Phys::allocatePage()>
c00079ea:	68 01 04 00 00       	push   0x401
c00079ef:	57                   	push   edi
c00079f0:	50                   	push   eax
c00079f1:	56                   	push   esi
c00079f2:	e8 07 23 00 00       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c00079f7:	81 05 94 36 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0023694,0x1000
c0007a01:	83 c3 01             	add    ebx,0x1
c0007a04:	83 c4 10             	add    esp,0x10
c0007a07:	39 dd                	cmp    ebp,ebx
c0007a09:	75 ce                	jne    c00079d9 <sbrk+0x31>
c0007a0b:	0f 20 d8             	mov    eax,cr3
c0007a0e:	0f 22 d8             	mov    cr3,eax
c0007a11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a15:	83 c4 1c             	add    esp,0x1c
c0007a18:	5b                   	pop    ebx
c0007a19:	5e                   	pop    esi
c0007a1a:	5f                   	pop    edi
c0007a1b:	5d                   	pop    ebp
c0007a1c:	c3                   	ret    
c0007a1d:	a1 94 36 02 c0       	mov    eax,ds:0xc0023694
c0007a22:	eb f1                	jmp    c0007a15 <sbrk+0x6d>
c0007a24:	83 ec 08             	sub    esp,0x8
c0007a27:	50                   	push   eax
c0007a28:	68 18 0d 02 c0       	push   0xc0020d18
c0007a2d:	e8 d8 2e 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007a32:	83 c4 10             	add    esp,0x10
c0007a35:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a3a:	eb d9                	jmp    c0007a15 <sbrk+0x6d>

c0007a3c <mmap>:
c0007a3c:	83 ec 18             	sub    esp,0x18
c0007a3f:	68 48 0d 02 c0       	push   0xc0020d48
c0007a44:	e8 c2 9b 00 00       	call   c001160b <KePanic(char const*)>
c0007a49:	b8 00 00 00 00       	mov    eax,0x0
c0007a4e:	83 c4 1c             	add    esp,0x1c
c0007a51:	c3                   	ret    

c0007a52 <munmap>:
c0007a52:	83 ec 18             	sub    esp,0x18
c0007a55:	68 4d 0d 02 c0       	push   0xc0020d4d
c0007a5a:	e8 ac 9b 00 00       	call   c001160b <KePanic(char const*)>
c0007a5f:	b8 00 00 00 00       	mov    eax,0x0
c0007a64:	83 c4 1c             	add    esp,0x1c
c0007a67:	c3                   	ret    

c0007a68 <liballoc_lock()>:
c0007a68:	fa                   	cli    
c0007a69:	83 05 c8 c6 02 c0 01 	add    DWORD PTR ds:0xc002c6c8,0x1
c0007a70:	b8 00 00 00 00       	mov    eax,0x0
c0007a75:	c3                   	ret    

c0007a76 <liballoc_unlock()>:
c0007a76:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007a7b:	83 e8 01             	sub    eax,0x1
c0007a7e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007a83:	75 01                	jne    c0007a86 <liballoc_unlock()+0x10>
c0007a85:	fb                   	sti    
c0007a86:	b8 00 00 00 00       	mov    eax,0x0
c0007a8b:	c3                   	ret    

c0007a8c <liballoc_alloc(int)>:
c0007a8c:	83 ec 10             	sub    esp,0x10
c0007a8f:	6a 01                	push   0x1
c0007a91:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a95:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007a9b:	e8 66 23 00 00       	call   c0009e06 <VAS::allocatePages(int, int)>
c0007aa0:	83 c4 1c             	add    esp,0x1c
c0007aa3:	c3                   	ret    

c0007aa4 <liballoc_free(void*, int)>:
c0007aa4:	83 ec 14             	sub    esp,0x14
c0007aa7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007aab:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007ab1:	e8 90 1f 00 00       	call   c0009a46 <VAS::freeAllocatedPages(unsigned long)>
c0007ab6:	b8 00 00 00 00       	mov    eax,0x0
c0007abb:	83 c4 1c             	add    esp,0x1c
c0007abe:	c3                   	ret    

c0007abf <realloc>:
c0007abf:	83 ec 14             	sub    esp,0x14
c0007ac2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aca:	e8 52 9b ff ff       	call   c0001621 <dlrealloc>
c0007acf:	83 c4 1c             	add    esp,0x1c
c0007ad2:	c3                   	ret    

c0007ad3 <malloc>:
c0007ad3:	83 ec 18             	sub    esp,0x18
c0007ad6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ada:	e8 05 96 ff ff       	call   c00010e4 <dlmalloc>
c0007adf:	83 c4 1c             	add    esp,0x1c
c0007ae2:	c3                   	ret    

c0007ae3 <free>:
c0007ae3:	83 ec 18             	sub    esp,0x18
c0007ae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aea:	e8 97 92 ff ff       	call   c0000d86 <dlfree>
c0007aef:	83 c4 1c             	add    esp,0x1c
c0007af2:	c3                   	ret    

c0007af3 <rfree>:
c0007af3:	83 ec 18             	sub    esp,0x18
c0007af6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007afa:	e8 87 92 ff ff       	call   c0000d86 <dlfree>
c0007aff:	83 c4 1c             	add    esp,0x1c
c0007b02:	c3                   	ret    

c0007b03 <calloc>:
c0007b03:	56                   	push   esi
c0007b04:	53                   	push   ebx
c0007b05:	83 ec 10             	sub    esp,0x10
c0007b08:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007b0c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007b11:	53                   	push   ebx
c0007b12:	e8 bc ff ff ff       	call   c0007ad3 <malloc>
c0007b17:	89 c6                	mov    esi,eax
c0007b19:	83 c4 0c             	add    esp,0xc
c0007b1c:	53                   	push   ebx
c0007b1d:	6a 00                	push   0x0
c0007b1f:	50                   	push   eax
c0007b20:	e8 cb 89 ff ff       	call   c00004f0 <memset>
c0007b25:	89 f0                	mov    eax,esi
c0007b27:	83 c4 14             	add    esp,0x14
c0007b2a:	5b                   	pop    ebx
c0007b2b:	5e                   	pop    esi
c0007b2c:	c3                   	ret    

c0007b2d <KeEntryPoint>:
c0007b2d:	57                   	push   edi
c0007b2e:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b33:	56                   	push   esi
c0007b34:	31 f6                	xor    esi,esi
c0007b36:	53                   	push   ebx
c0007b37:	89 fa                	mov    edx,edi
c0007b39:	83 ec 2c             	sub    esp,0x2c
c0007b3c:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b41:	a3 d0 6e 02 c0       	mov    ds:0xc0026ed0,eax
c0007b46:	89 f0                	mov    eax,esi
c0007b48:	ee                   	out    dx,al
c0007b49:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b4e:	b0 80                	mov    al,0x80
c0007b50:	89 da                	mov    edx,ebx
c0007b52:	ee                   	out    dx,al
c0007b53:	b1 03                	mov    cl,0x3
c0007b55:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b5a:	88 c8                	mov    al,cl
c0007b5c:	ee                   	out    dx,al
c0007b5d:	89 f0                	mov    eax,esi
c0007b5f:	89 fa                	mov    edx,edi
c0007b61:	ee                   	out    dx,al
c0007b62:	88 c8                	mov    al,cl
c0007b64:	89 da                	mov    edx,ebx
c0007b66:	ee                   	out    dx,al
c0007b67:	b0 c7                	mov    al,0xc7
c0007b69:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b6e:	ee                   	out    dx,al
c0007b6f:	b0 0b                	mov    al,0xb
c0007b71:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b76:	ee                   	out    dx,al
c0007b77:	68 54 0d 02 c0       	push   0xc0020d54
c0007b7c:	e8 89 2d 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007b81:	e8 0b 93 00 00       	call   c0010e91 <KeDisplaySplashScreen()>
c0007b86:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b8b:	05 ff 0f 00 00       	add    eax,0xfff
c0007b90:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b95:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b98:	e8 b3 03 00 00       	call   c0007f50 <Phys::physicalMemorySetup(unsigned int)>
c0007b9d:	e8 27 1c 00 00       	call   c00097c9 <Virt::virtualMemorySetup()>
c0007ba2:	e8 34 92 00 00       	call   c0010ddb <KeInitialiseAtexit()>
c0007ba7:	58                   	pop    eax
c0007ba8:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007bac:	53                   	push   ebx
c0007bad:	e8 14 1f 00 00       	call   c0009ac6 <VAS::VAS()>
c0007bb2:	89 1d b0 6f 02 c0    	mov    DWORD PTR ds:0xc0026fb0,ebx
c0007bb8:	e8 0d 7e 01 00       	call   c001f9ca <_init>
c0007bbd:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007bc4:	e8 0a ff ff ff       	call   c0007ad3 <malloc>
c0007bc9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bcc:	89 c6                	mov    esi,eax
c0007bce:	e8 35 f2 ff ff       	call   c0006e08 <Computer::Computer()>
c0007bd3:	53                   	push   ebx
c0007bd4:	6a 00                	push   0x0
c0007bd6:	6a 00                	push   0x0
c0007bd8:	56                   	push   esi
c0007bd9:	89 35 b8 6e 02 c0    	mov    DWORD PTR ds:0xc0026eb8,esi
c0007bdf:	e8 ea f5 ff ff       	call   c00071ce <Computer::open(int, int, void*)>
c0007be4:	83 c4 14             	add    esp,0x14
c0007be7:	53                   	push   ebx
c0007be8:	e8 a3 1f 00 00       	call   c0009b90 <VAS::~VAS()>
c0007bed:	83 c4 30             	add    esp,0x30
c0007bf0:	5b                   	pop    ebx
c0007bf1:	5e                   	pop    esi
c0007bf2:	5f                   	pop    edi
c0007bf3:	c3                   	ret    

c0007bf4 <Phys::allocateDMA(unsigned long)>:
c0007bf4:	55                   	push   ebp
c0007bf5:	31 ed                	xor    ebp,ebp
c0007bf7:	57                   	push   edi
c0007bf8:	56                   	push   esi
c0007bf9:	31 f6                	xor    esi,esi
c0007bfb:	53                   	push   ebx
c0007bfc:	31 db                	xor    ebx,ebx
c0007bfe:	83 ec 1c             	sub    esp,0x1c
c0007c01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007c05:	05 ff 0f 00 00       	add    eax,0xfff
c0007c0a:	c1 e8 0c             	shr    eax,0xc
c0007c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c11:	31 c0                	xor    eax,eax
c0007c13:	eb 1b                	jmp    c0007c30 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c15:	8d 78 01             	lea    edi,[eax+0x1]
c0007c18:	85 c0                	test   eax,eax
c0007c1a:	0f 44 eb             	cmove  ebp,ebx
c0007c1d:	0f 44 f3             	cmove  esi,ebx
c0007c20:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0007c24:	74 37                	je     c0007c5d <Phys::allocateDMA(unsigned long)+0x69>
c0007c26:	89 f8                	mov    eax,edi
c0007c28:	83 c3 01             	add    ebx,0x1
c0007c2b:	83 fb 0f             	cmp    ebx,0xf
c0007c2e:	7f 13                	jg     c0007c43 <Phys::allocateDMA(unsigned long)+0x4f>
c0007c30:	80 bb ec 6e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd9114],0x0
c0007c37:	74 dc                	je     c0007c15 <Phys::allocateDMA(unsigned long)+0x21>
c0007c39:	31 c0                	xor    eax,eax
c0007c3b:	83 c3 01             	add    ebx,0x1
c0007c3e:	83 fb 0f             	cmp    ebx,0xf
c0007c41:	7e ed                	jle    c0007c30 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c43:	83 ec 0c             	sub    esp,0xc
c0007c46:	68 6c 0d 02 c0       	push   0xc0020d6c
c0007c4b:	e8 bb 99 00 00       	call   c001160b <KePanic(char const*)>
c0007c50:	83 c4 10             	add    esp,0x10
c0007c53:	31 c0                	xor    eax,eax
c0007c55:	83 c4 1c             	add    esp,0x1c
c0007c58:	5b                   	pop    ebx
c0007c59:	5e                   	pop    esi
c0007c5a:	5f                   	pop    edi
c0007c5b:	5d                   	pop    ebp
c0007c5c:	c3                   	ret    
c0007c5d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007c61:	89 f2                	mov    edx,esi
c0007c63:	c1 fa 04             	sar    edx,0x4
c0007c66:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c6a:	01 f1                	add    ecx,esi
c0007c6c:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c6f:	83 e9 01             	sub    ecx,0x1
c0007c72:	0f 48 ca             	cmovs  ecx,edx
c0007c75:	c1 f9 04             	sar    ecx,0x4
c0007c78:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0007c7c:	74 06                	je     c0007c84 <Phys::allocateDMA(unsigned long)+0x90>
c0007c7e:	89 eb                	mov    ebx,ebp
c0007c80:	31 c0                	xor    eax,eax
c0007c82:	eb b7                	jmp    c0007c3b <Phys::allocateDMA(unsigned long)+0x47>
c0007c84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c88:	85 d2                	test   edx,edx
c0007c8a:	74 17                	je     c0007ca3 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c8c:	8d 96 ec 6e 02 c0    	lea    edx,[esi-0x3ffd9114]
c0007c92:	8d 84 06 ed 6e 02 c0 	lea    eax,[esi+eax*1-0x3ffd9113]
c0007c99:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c9c:	83 c2 01             	add    edx,0x1
c0007c9f:	39 d0                	cmp    eax,edx
c0007ca1:	75 f6                	jne    c0007c99 <Phys::allocateDMA(unsigned long)+0xa5>
c0007ca3:	8b 15 e4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee4
c0007ca9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007cb1:	01 c2                	add    edx,eax
c0007cb3:	89 15 e4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee4,edx
c0007cb9:	85 c9                	test   ecx,ecx
c0007cbb:	74 17                	je     c0007cd4 <Phys::allocateDMA(unsigned long)+0xe0>
c0007cbd:	83 ec 0c             	sub    esp,0xc
c0007cc0:	68 6c 0d 02 c0       	push   0xc0020d6c
c0007cc5:	e8 41 99 00 00       	call   c001160b <KePanic(char const*)>
c0007cca:	83 c4 10             	add    esp,0x10
c0007ccd:	89 f8                	mov    eax,edi
c0007ccf:	e9 54 ff ff ff       	jmp    c0007c28 <Phys::allocateDMA(unsigned long)+0x34>
c0007cd4:	c1 e6 0c             	shl    esi,0xc
c0007cd7:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c0007cdd:	e9 73 ff ff ff       	jmp    c0007c55 <Phys::allocateDMA(unsigned long)+0x61>

c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007ce2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ce6:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cec:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007cf1:	c1 ea 0c             	shr    edx,0xc
c0007cf4:	29 d0                	sub    eax,edx
c0007cf6:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007cfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cff:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007d04:	c1 e8 0c             	shr    eax,0xc
c0007d07:	85 d2                	test   edx,edx
c0007d09:	74 11                	je     c0007d1c <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007d0b:	05 ec 6e 02 c0       	add    eax,0xc0026eec
c0007d10:	01 c2                	add    edx,eax
c0007d12:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007d15:	83 c0 01             	add    eax,0x1
c0007d18:	39 d0                	cmp    eax,edx
c0007d1a:	75 f6                	jne    c0007d12 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007d1c:	c3                   	ret    

c0007d1d <Phys::setPageState(unsigned long, bool)>:
c0007d1d:	57                   	push   edi
c0007d1e:	56                   	push   esi
c0007d1f:	8b 35 98 36 02 c0    	mov    esi,DWORD PTR ds:0xc0023698
c0007d25:	53                   	push   ebx
c0007d26:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d2b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d33:	89 ca                	mov    edx,ecx
c0007d35:	83 e1 07             	and    ecx,0x7
c0007d38:	c1 ea 03             	shr    edx,0x3
c0007d3b:	0f b6 c0             	movzx  eax,al
c0007d3e:	d3 c3                	rol    ebx,cl
c0007d40:	01 d6                	add    esi,edx
c0007d42:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d45:	d3 e0                	shl    eax,cl
c0007d47:	21 fb                	and    ebx,edi
c0007d49:	88 1e                	mov    BYTE PTR [esi],bl
c0007d4b:	8b 1d 98 36 02 c0    	mov    ebx,DWORD PTR ds:0xc0023698
c0007d51:	01 da                	add    edx,ebx
c0007d53:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d55:	09 c8                	or     eax,ecx
c0007d57:	88 02                	mov    BYTE PTR [edx],al
c0007d59:	5b                   	pop    ebx
c0007d5a:	5e                   	pop    esi
c0007d5b:	5f                   	pop    edi
c0007d5c:	c3                   	ret    

c0007d5d <Phys::getPageState(unsigned long)>:
c0007d5d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d61:	8b 15 98 36 02 c0    	mov    edx,DWORD PTR ds:0xc0023698
c0007d67:	89 c8                	mov    eax,ecx
c0007d69:	83 e1 07             	and    ecx,0x7
c0007d6c:	c1 e8 03             	shr    eax,0x3
c0007d6f:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d73:	d3 f8                	sar    eax,cl
c0007d75:	83 e0 01             	and    eax,0x1
c0007d78:	c3                   	ret    

c0007d79 <Phys::freePage(unsigned long)>:
c0007d79:	53                   	push   ebx
c0007d7a:	83 ec 08             	sub    esp,0x8
c0007d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d81:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d87:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d8d:	76 41                	jbe    c0007dd0 <Phys::freePage(unsigned long)+0x57>
c0007d8f:	c1 e8 0c             	shr    eax,0xc
c0007d92:	50                   	push   eax
c0007d93:	89 c3                	mov    ebx,eax
c0007d95:	e8 c3 ff ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007d9a:	5a                   	pop    edx
c0007d9b:	84 c0                	test   al,al
c0007d9d:	74 20                	je     c0007dbf <Phys::freePage(unsigned long)+0x46>
c0007d9f:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007da4:	83 ec 08             	sub    esp,0x8
c0007da7:	6a 00                	push   0x0
c0007da9:	53                   	push   ebx
c0007daa:	83 e8 01             	sub    eax,0x1
c0007dad:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007db2:	e8 66 ff ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007db7:	83 c4 10             	add    esp,0x10
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	c3                   	ret    
c0007dbf:	c7 44 24 10 11 0e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020e11
c0007dc7:	83 c4 08             	add    esp,0x8
c0007dca:	5b                   	pop    ebx
c0007dcb:	e9 3b 98 00 00       	jmp    c001160b <KePanic(char const*)>
c0007dd0:	68 00 10 00 00       	push   0x1000
c0007dd5:	50                   	push   eax
c0007dd6:	e8 07 ff ff ff       	call   c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)>
c0007ddb:	59                   	pop    ecx
c0007ddc:	5b                   	pop    ebx
c0007ddd:	83 c4 08             	add    esp,0x8
c0007de0:	5b                   	pop    ebx
c0007de1:	c3                   	ret    

c0007de2 <Phys::allocatePage()>:
c0007de2:	56                   	push   esi
c0007de3:	53                   	push   ebx
c0007de4:	83 ec 14             	sub    esp,0x14
c0007de7:	8b 35 d8 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ed8
c0007ded:	89 f3                	mov    ebx,esi
c0007def:	eb 0a                	jmp    c0007dfb <Phys::allocatePage()+0x19>
c0007df1:	89 1d d8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ed8,ebx
c0007df7:	39 de                	cmp    esi,ebx
c0007df9:	74 26                	je     c0007e21 <Phys::allocatePage()+0x3f>
c0007dfb:	53                   	push   ebx
c0007dfc:	e8 5c ff ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007e01:	5a                   	pop    edx
c0007e02:	84 c0                	test   al,al
c0007e04:	74 67                	je     c0007e6d <Phys::allocatePage()+0x8b>
c0007e06:	83 c3 01             	add    ebx,0x1
c0007e09:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007e0f:	75 e0                	jne    c0007df1 <Phys::allocatePage()+0xf>
c0007e11:	c7 05 d8 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026ed8,0x0
c0007e1b:	31 db                	xor    ebx,ebx
c0007e1d:	39 de                	cmp    esi,ebx
c0007e1f:	75 da                	jne    c0007dfb <Phys::allocatePage()+0x19>
c0007e21:	a0 fc 6e 02 c0       	mov    al,ds:0xc0026efc
c0007e26:	83 ec 0c             	sub    esp,0xc
c0007e29:	83 f0 01             	xor    eax,0x1
c0007e2c:	a2 fc 6e 02 c0       	mov    ds:0xc0026efc,al
c0007e31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e36:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e39:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e3f:	50                   	push   eax
c0007e40:	e8 79 27 00 00       	call   c000a5be <VAS::scanForEviction()>
c0007e45:	83 c4 10             	add    esp,0x10
c0007e48:	85 c0                	test   eax,eax
c0007e4a:	75 48                	jne    c0007e94 <Phys::allocatePage()+0xb2>
c0007e4c:	83 ec 0c             	sub    esp,0xc
c0007e4f:	68 94 0d 02 c0       	push   0xc0020d94
c0007e54:	e8 b2 97 00 00       	call   c001160b <KePanic(char const*)>
c0007e59:	8b 1d d8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026ed8
c0007e5f:	83 c4 10             	add    esp,0x10
c0007e62:	53                   	push   ebx
c0007e63:	e8 f5 fe ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007e68:	5a                   	pop    edx
c0007e69:	84 c0                	test   al,al
c0007e6b:	75 99                	jne    c0007e06 <Phys::allocatePage()+0x24>
c0007e6d:	6a 01                	push   0x1
c0007e6f:	53                   	push   ebx
c0007e70:	e8 a8 fe ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007e75:	8b 15 e4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee4
c0007e7b:	59                   	pop    ecx
c0007e7c:	a1 d8 6e 02 c0       	mov    eax,ds:0xc0026ed8
c0007e81:	5b                   	pop    ebx
c0007e82:	83 c2 01             	add    edx,0x1
c0007e85:	89 15 e4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee4,edx
c0007e8b:	c1 e0 0c             	shl    eax,0xc
c0007e8e:	83 c4 14             	add    esp,0x14
c0007e91:	5b                   	pop    ebx
c0007e92:	5e                   	pop    esi
c0007e93:	c3                   	ret    
c0007e94:	83 ec 08             	sub    esp,0x8
c0007e97:	89 c2                	mov    edx,eax
c0007e99:	6a 01                	push   0x1
c0007e9b:	c1 ea 0c             	shr    edx,0xc
c0007e9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007ea2:	52                   	push   edx
c0007ea3:	e8 75 fe ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007ea8:	83 c4 10             	add    esp,0x10
c0007eab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007eaf:	eb dd                	jmp    c0007e8e <Phys::allocatePage()+0xac>

c0007eb1 <Phys::allocateContiguousPages(int)>:
c0007eb1:	57                   	push   edi
c0007eb2:	56                   	push   esi
c0007eb3:	53                   	push   ebx
c0007eb4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007eb8:	fa                   	cli    
c0007eb9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007ebe:	31 db                	xor    ebx,ebx
c0007ec0:	83 c0 01             	add    eax,0x1
c0007ec3:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007ec8:	85 db                	test   ebx,ebx
c0007eca:	75 11                	jne    c0007edd <Phys::allocateContiguousPages(int)+0x2c>
c0007ecc:	e8 11 ff ff ff       	call   c0007de2 <Phys::allocatePage()>
c0007ed1:	83 fe 01             	cmp    esi,0x1
c0007ed4:	89 c7                	mov    edi,eax
c0007ed6:	74 21                	je     c0007ef9 <Phys::allocateContiguousPages(int)+0x48>
c0007ed8:	bb 01 00 00 00       	mov    ebx,0x1
c0007edd:	e8 00 ff ff ff       	call   c0007de2 <Phys::allocatePage()>
c0007ee2:	89 da                	mov    edx,ebx
c0007ee4:	c1 e2 0c             	shl    edx,0xc
c0007ee7:	01 fa                	add    edx,edi
c0007ee9:	39 c2                	cmp    edx,eax
c0007eeb:	74 22                	je     c0007f0f <Phys::allocateContiguousPages(int)+0x5e>
c0007eed:	83 fe 01             	cmp    esi,0x1
c0007ef0:	bb 01 00 00 00       	mov    ebx,0x1
c0007ef5:	89 c7                	mov    edi,eax
c0007ef7:	75 e4                	jne    c0007edd <Phys::allocateContiguousPages(int)+0x2c>
c0007ef9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007efe:	83 e8 01             	sub    eax,0x1
c0007f01:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007f06:	75 01                	jne    c0007f09 <Phys::allocateContiguousPages(int)+0x58>
c0007f08:	fb                   	sti    
c0007f09:	5b                   	pop    ebx
c0007f0a:	89 f8                	mov    eax,edi
c0007f0c:	5e                   	pop    esi
c0007f0d:	5f                   	pop    edi
c0007f0e:	c3                   	ret    
c0007f0f:	83 c3 01             	add    ebx,0x1
c0007f12:	39 f3                	cmp    ebx,esi
c0007f14:	75 b2                	jne    c0007ec8 <Phys::allocateContiguousPages(int)+0x17>
c0007f16:	eb e1                	jmp    c0007ef9 <Phys::allocateContiguousPages(int)+0x48>

c0007f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007f18:	56                   	push   esi
c0007f19:	53                   	push   ebx
c0007f1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007f1e:	39 1d dc 6e 02 c0    	cmp    DWORD PTR ds:0xc0026edc,ebx
c0007f24:	73 06                	jae    c0007f2c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f26:	89 1d dc 6e 02 c0    	mov    DWORD PTR ds:0xc0026edc,ebx
c0007f2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f30:	c1 eb 0c             	shr    ebx,0xc
c0007f33:	c1 e8 0c             	shr    eax,0xc
c0007f36:	39 d8                	cmp    eax,ebx
c0007f38:	73 13                	jae    c0007f4d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f3a:	6a 00                	push   0x0
c0007f3c:	50                   	push   eax
c0007f3d:	8d 70 01             	lea    esi,[eax+0x1]
c0007f40:	e8 d8 fd ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007f45:	39 f3                	cmp    ebx,esi
c0007f47:	89 f0                	mov    eax,esi
c0007f49:	5a                   	pop    edx
c0007f4a:	59                   	pop    ecx
c0007f4b:	75 ed                	jne    c0007f3a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f4d:	5b                   	pop    ebx
c0007f4e:	5e                   	pop    esi
c0007f4f:	c3                   	ret    

c0007f50 <Phys::physicalMemorySetup(unsigned int)>:
c0007f50:	55                   	push   ebp
c0007f51:	57                   	push   edi
c0007f52:	56                   	push   esi
c0007f53:	53                   	push   ebx
c0007f54:	31 db                	xor    ebx,ebx
c0007f56:	83 ec 40             	sub    esp,0x40
c0007f59:	6a 10                	push   0x10
c0007f5b:	6a 00                	push   0x0
c0007f5d:	68 ec 6e 02 c0       	push   0xc0026eec
c0007f62:	e8 89 85 ff ff       	call   c00004f0 <memset>
c0007f67:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f6b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f70:	05 00 10 00 00       	add    eax,0x1000
c0007f75:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007f79:	5a                   	pop    edx
c0007f7a:	59                   	pop    ecx
c0007f7b:	50                   	push   eax
c0007f7c:	68 27 0e 02 c0       	push   0xc0020e27
c0007f81:	e8 84 29 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007f86:	83 c4 10             	add    esp,0x10
c0007f89:	83 ec 08             	sub    esp,0x8
c0007f8c:	6a 01                	push   0x1
c0007f8e:	53                   	push   ebx
c0007f8f:	83 c3 01             	add    ebx,0x1
c0007f92:	e8 86 fd ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007f97:	83 c4 10             	add    esp,0x10
c0007f9a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007fa0:	75 e7                	jne    c0007f89 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007fa2:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007fa9:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007fb0:	c1 e0 08             	shl    eax,0x8
c0007fb3:	09 c2                	or     edx,eax
c0007fb5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0007fb9:	0f 84 43 01 00 00    	je     c0008102 <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c0007fbf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fc7:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fcc:	e9 82 00 00 00       	jmp    c0008053 <Phys::physicalMemorySetup(unsigned int)+0x103>
c0007fd1:	ba 00 00 08 00       	mov    edx,0x80000
c0007fd6:	89 c1                	mov    ecx,eax
c0007fd8:	39 f2                	cmp    edx,esi
c0007fda:	19 f9                	sbb    ecx,edi
c0007fdc:	0f 82 c0 00 00 00    	jb     c00080a2 <Phys::physicalMemorySetup(unsigned int)+0x152>
c0007fe2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007fe6:	89 c5                	mov    ebp,eax
c0007fe8:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007fec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007ff0:	19 cd                	sbb    ebp,ecx
c0007ff2:	0f 83 af 00 00 00    	jae    c00080a7 <Phys::physicalMemorySetup(unsigned int)+0x157>
c0007ff8:	89 d6                	mov    esi,edx
c0007ffa:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007fff:	39 f2                	cmp    edx,esi
c0008001:	89 cf                	mov    edi,ecx
c0008003:	19 c8                	sbb    eax,ecx
c0008005:	73 07                	jae    c000800e <Phys::physicalMemorySetup(unsigned int)+0xbe>
c0008007:	be 00 00 0a 00       	mov    esi,0xa0000
c000800c:	31 ff                	xor    edi,edi
c000800e:	89 f2                	mov    edx,esi
c0008010:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0008015:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000801b:	89 f9                	mov    ecx,edi
c000801d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008021:	83 d1 ff             	adc    ecx,0xffffffff
c0008024:	39 d0                	cmp    eax,edx
c0008026:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000802a:	b8 00 00 00 00       	mov    eax,0x0
c000802f:	19 c8                	sbb    eax,ecx
c0008031:	0f 82 9d 01 00 00    	jb     c00081d4 <Phys::physicalMemorySetup(unsigned int)+0x284>
c0008037:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000803b:	83 c3 18             	add    ebx,0x18
c000803e:	83 c6 01             	add    esi,0x1
c0008041:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008045:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008049:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000804d:	0f 84 bf 00 00 00    	je     c0008112 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008053:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000805b:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000805e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0008062:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008065:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008069:	01 f0                	add    eax,esi
c000806b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000806f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008073:	55                   	push   ebp
c0008074:	11 fa                	adc    edx,edi
c0008076:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000807a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000807e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008082:	50                   	push   eax
c0008083:	56                   	push   esi
c0008084:	68 c4 0d 02 c0       	push   0xc0020dc4
c0008089:	e8 7c 28 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000808e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008092:	83 c4 10             	add    esp,0x10
c0008095:	09 f8                	or     eax,edi
c0008097:	75 79                	jne    c0008112 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008099:	83 fd 01             	cmp    ebp,0x1
c000809c:	0f 84 2f ff ff ff    	je     c0007fd1 <Phys::physicalMemorySetup(unsigned int)+0x81>
c00080a2:	83 fd 01             	cmp    ebp,0x1
c00080a5:	75 90                	jne    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080a7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00080ab:	31 d2                	xor    edx,edx
c00080ad:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00080b1:	89 c8                	mov    eax,ecx
c00080b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080b7:	19 d1                	sbb    ecx,edx
c00080b9:	0f 82 78 ff ff ff    	jb     c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080bf:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c00080c4:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c00080c8:	b9 00 00 00 00       	mov    ecx,0x0
c00080cd:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c00080d1:	0f 83 60 ff ff ff    	jae    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080d7:	39 c6                	cmp    esi,eax
c00080d9:	19 d7                	sbb    edi,edx
c00080db:	0f 83 ff 00 00 00    	jae    c00081e0 <Phys::physicalMemorySetup(unsigned int)+0x290>
c00080e1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080e5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00080e9:	29 c7                	sub    edi,eax
c00080eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00080ef:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00080f3:	19 d5                	sbb    ebp,edx
c00080f5:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00080f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00080fd:	e9 de 00 00 00       	jmp    c00081e0 <Phys::physicalMemorySetup(unsigned int)+0x290>
c0008102:	83 ec 0c             	sub    esp,0xc
c0008105:	68 3f 0e 02 c0       	push   0xc0020e3f
c000810a:	e8 fc 94 00 00       	call   c001160b <KePanic(char const*)>
c000810f:	83 c4 10             	add    esp,0x10
c0008112:	83 ec 08             	sub    esp,0x8
c0008115:	bb 60 00 00 00       	mov    ebx,0x60
c000811a:	6a 00                	push   0x0
c000811c:	6a 06                	push   0x6
c000811e:	e8 fa fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0008123:	58                   	pop    eax
c0008124:	5a                   	pop    edx
c0008125:	6a 00                	push   0x0
c0008127:	6a 07                	push   0x7
c0008129:	e8 ef fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000812e:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0008134:	83 c4 10             	add    esp,0x10
c0008137:	83 c1 02             	add    ecx,0x2
c000813a:	89 0d e8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee8,ecx
c0008140:	83 ec 08             	sub    esp,0x8
c0008143:	6a 00                	push   0x0
c0008145:	53                   	push   ebx
c0008146:	83 c3 01             	add    ebx,0x1
c0008149:	e8 cf fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000814e:	83 c4 10             	add    esp,0x10
c0008151:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008157:	75 e7                	jne    c0008140 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c0008159:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c000815e:	bb 40 01 00 00       	mov    ebx,0x140
c0008163:	83 c0 20             	add    eax,0x20
c0008166:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c000816b:	eb 26                	jmp    c0008193 <Phys::physicalMemorySetup(unsigned int)+0x243>
c000816d:	83 ec 08             	sub    esp,0x8
c0008170:	6a 00                	push   0x0
c0008172:	53                   	push   ebx
c0008173:	83 c3 01             	add    ebx,0x1
c0008176:	e8 a2 fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000817b:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	83 c0 01             	add    eax,0x1
c0008186:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000818c:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c0008191:	74 07                	je     c000819a <Phys::physicalMemorySetup(unsigned int)+0x24a>
c0008193:	3d ff 03 00 00       	cmp    eax,0x3ff
c0008198:	7e d3                	jle    c000816d <Phys::physicalMemorySetup(unsigned int)+0x21d>
c000819a:	bb d0 01 00 00       	mov    ebx,0x1d0
c000819f:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081a4:	7f 26                	jg     c00081cc <Phys::physicalMemorySetup(unsigned int)+0x27c>
c00081a6:	83 ec 08             	sub    esp,0x8
c00081a9:	6a 00                	push   0x0
c00081ab:	53                   	push   ebx
c00081ac:	83 c3 01             	add    ebx,0x1
c00081af:	e8 69 fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c00081b4:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c00081b9:	83 c4 10             	add    esp,0x10
c00081bc:	83 c0 01             	add    eax,0x1
c00081bf:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081c5:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00081ca:	75 d3                	jne    c000819f <Phys::physicalMemorySetup(unsigned int)+0x24f>
c00081cc:	83 c4 3c             	add    esp,0x3c
c00081cf:	5b                   	pop    ebx
c00081d0:	5e                   	pop    esi
c00081d1:	5f                   	pop    edi
c00081d2:	5d                   	pop    ebp
c00081d3:	c3                   	ret    
c00081d4:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00081d8:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c00081e0:	83 ec 04             	sub    esp,0x4
c00081e3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00081e7:	56                   	push   esi
c00081e8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00081ec:	57                   	push   edi
c00081ed:	68 e8 0d 02 c0       	push   0xc0020de8
c00081f2:	e8 13 27 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00081f7:	5d                   	pop    ebp
c00081f8:	58                   	pop    eax
c00081f9:	56                   	push   esi
c00081fa:	57                   	push   edi
c00081fb:	e8 18 fd ff ff       	call   c0007f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0008200:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008204:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008208:	83 c4 0c             	add    esp,0xc
c000820b:	8b 35 e8 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ee8
c0008211:	0f ac d0 0c          	shrd   eax,edx,0xc
c0008215:	01 f0                	add    eax,esi
c0008217:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c000821c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0008223:	52                   	push   edx
c0008224:	50                   	push   eax
c0008225:	68 4d 0e 02 c0       	push   0xc0020e4d
c000822a:	e8 db 26 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000822f:	83 c4 10             	add    esp,0x10
c0008232:	e9 00 fe ff ff       	jmp    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0008237:	90                   	nop

c0008238 <Pipe::isAtty()>:
c0008238:	31 c0                	xor    eax,eax
c000823a:	c3                   	ret    
c000823b:	90                   	nop

c000823c <Pipe::~Pipe()>:
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	ba ac 0e 02 c0       	mov    edx,0xc0020eac
c0008244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008248:	89 10                	mov    DWORD PTR [eax],edx
c000824a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000824e:	83 ec 0c             	sub    esp,0xc
c0008251:	50                   	push   eax
c0008252:	e8 35 11 00 00       	call   c000938c <UnixFile::~UnixFile()>
c0008257:	83 c4 10             	add    esp,0x10
c000825a:	90                   	nop
c000825b:	83 c4 0c             	add    esp,0xc
c000825e:	c3                   	ret    
c000825f:	90                   	nop

c0008260 <Pipe::~Pipe()>:
c0008260:	83 ec 0c             	sub    esp,0xc
c0008263:	83 ec 0c             	sub    esp,0xc
c0008266:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000826a:	e8 cd ff ff ff       	call   c000823c <Pipe::~Pipe()>
c000826f:	83 c4 10             	add    esp,0x10
c0008272:	83 ec 08             	sub    esp,0x8
c0008275:	6a 20                	push   0x20
c0008277:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000827b:	e8 8c 25 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0008280:	83 c4 10             	add    esp,0x10
c0008283:	83 c4 0c             	add    esp,0xc
c0008286:	c3                   	ret    
c0008287:	90                   	nop

c0008288 <Pipe::write(unsigned long long, void*, int*)>:
c0008288:	55                   	push   ebp
c0008289:	57                   	push   edi
c000828a:	56                   	push   esi
c000828b:	53                   	push   ebx
c000828c:	83 ec 1c             	sub    esp,0x1c
c000828f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008293:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008297:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000829b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000829e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00082a2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00082a5:	89 04 24             	mov    DWORD PTR [esp],eax
c00082a8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00082ac:	89 d8                	mov    eax,ebx
c00082ae:	89 d6                	mov    esi,edx
c00082b0:	89 d7                	mov    edi,edx
c00082b2:	c1 ff 1f             	sar    edi,0x1f
c00082b5:	03 34 24             	add    esi,DWORD PTR [esp]
c00082b8:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082bc:	c1 f8 1f             	sar    eax,0x1f
c00082bf:	39 f3                	cmp    ebx,esi
c00082c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082c9:	19 f8                	sbb    eax,edi
c00082cb:	b8 01 00 00 00       	mov    eax,0x1
c00082d0:	72 72                	jb     c0008344 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c00082d2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082d5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00082d9:	01 d0                	add    eax,edx
c00082db:	99                   	cdq    
c00082dc:	f7 fb                	idiv   ebx
c00082de:	89 d8                	mov    eax,ebx
c00082e0:	29 d0                	sub    eax,edx
c00082e2:	89 d6                	mov    esi,edx
c00082e4:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082e7:	89 c3                	mov    ebx,eax
c00082e9:	c1 fb 1f             	sar    ebx,0x1f
c00082ec:	39 c2                	cmp    edx,eax
c00082ee:	19 df                	sbb    edi,ebx
c00082f0:	bb 00 00 00 00       	mov    ebx,0x0
c00082f5:	72 04                	jb     c00082fb <Pipe::write(unsigned long long, void*, int*)+0x73>
c00082f7:	89 d3                	mov    ebx,edx
c00082f9:	29 c3                	sub    ebx,eax
c00082fb:	89 d0                	mov    eax,edx
c00082fd:	29 d8                	sub    eax,ebx
c00082ff:	74 0d                	je     c000830e <Pipe::write(unsigned long long, void*, int*)+0x86>
c0008301:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008304:	89 c1                	mov    ecx,eax
c0008306:	01 f7                	add    edi,esi
c0008308:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000830c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000830e:	85 db                	test   ebx,ebx
c0008310:	74 0d                	je     c000831f <Pipe::write(unsigned long long, void*, int*)+0x97>
c0008312:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008316:	89 d9                	mov    ecx,ebx
c0008318:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000831b:	89 c6                	mov    esi,eax
c000831d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000831f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008322:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008327:	75 10                	jne    c0008339 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	68 69 0e 02 c0       	push   0xc0020e69
c0008331:	e8 d5 92 00 00       	call   c001160b <KePanic(char const*)>
c0008336:	83 c4 10             	add    esp,0x10
c0008339:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000833d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008340:	89 08                	mov    DWORD PTR [eax],ecx
c0008342:	31 c0                	xor    eax,eax
c0008344:	83 c4 1c             	add    esp,0x1c
c0008347:	5b                   	pop    ebx
c0008348:	5e                   	pop    esi
c0008349:	5f                   	pop    edi
c000834a:	5d                   	pop    ebp
c000834b:	c3                   	ret    

c000834c <Pipe::read(unsigned long long, void*, int*)>:
c000834c:	55                   	push   ebp
c000834d:	57                   	push   edi
c000834e:	56                   	push   esi
c000834f:	53                   	push   ebx
c0008350:	83 ec 1c             	sub    esp,0x1c
c0008353:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008357:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000835b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000835f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008362:	89 c8                	mov    eax,ecx
c0008364:	99                   	cdq    
c0008365:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008369:	74 24                	je     c000838f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000836b:	39 f9                	cmp    ecx,edi
c000836d:	89 d1                	mov    ecx,edx
c000836f:	19 f1                	sbb    ecx,esi
c0008371:	73 1c                	jae    c000838f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008373:	fa                   	cli    
c0008374:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000837a:	e8 75 dd 00 00       	call   c00160f4 <schedule()>
c000837f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0008384:	48                   	dec    eax
c0008385:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000838a:	75 d3                	jne    c000835f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000838c:	fb                   	sti    
c000838d:	eb d0                	jmp    c000835f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000838f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008393:	39 f8                	cmp    eax,edi
c0008395:	89 d1                	mov    ecx,edx
c0008397:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000839b:	19 f1                	sbb    ecx,esi
c000839d:	73 08                	jae    c00083a7 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c000839f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00083a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083a7:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00083aa:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00083ad:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00083b1:	29 f7                	sub    edi,esi
c00083b3:	89 f8                	mov    eax,edi
c00083b5:	99                   	cdq    
c00083b6:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00083ba:	89 d0                	mov    eax,edx
c00083bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083c0:	19 c2                	sbb    edx,eax
c00083c2:	89 f8                	mov    eax,edi
c00083c4:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c00083c9:	89 ea                	mov    edx,ebp
c00083cb:	29 c2                	sub    edx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	74 0b                	je     c00083dc <Pipe::read(unsigned long long, void*, int*)+0x90>
c00083d1:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083d4:	89 c1                	mov    ecx,eax
c00083d6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083dc:	85 d2                	test   edx,edx
c00083de:	74 0d                	je     c00083ed <Pipe::read(unsigned long long, void*, int*)+0xa1>
c00083e0:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083e4:	89 d1                	mov    ecx,edx
c00083e6:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083e9:	89 c7                	mov    edi,eax
c00083eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083ed:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083f0:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083f3:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083f6:	99                   	cdq    
c00083f7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00083fb:	89 f7                	mov    edi,esi
c00083fd:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0008401:	c1 ff 1f             	sar    edi,0x1f
c0008404:	57                   	push   edi
c0008405:	56                   	push   esi
c0008406:	52                   	push   edx
c0008407:	50                   	push   eax
c0008408:	e8 a3 74 01 00       	call   c001f8b0 <__umoddi3>
c000840d:	83 c4 10             	add    esp,0x10
c0008410:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008415:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008418:	75 10                	jne    c000842a <Pipe::read(unsigned long long, void*, int*)+0xde>
c000841a:	83 ec 0c             	sub    esp,0xc
c000841d:	68 86 0e 02 c0       	push   0xc0020e86
c0008422:	e8 e4 91 00 00       	call   c001160b <KePanic(char const*)>
c0008427:	83 c4 10             	add    esp,0x10
c000842a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000842e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008432:	89 10                	mov    DWORD PTR [eax],edx
c0008434:	83 c4 1c             	add    esp,0x1c
c0008437:	31 c0                	xor    eax,eax
c0008439:	5b                   	pop    ebx
c000843a:	5e                   	pop    esi
c000843b:	5f                   	pop    edi
c000843c:	5d                   	pop    ebp
c000843d:	c3                   	ret    

c000843e <Pipe::Pipe(int)>:
c000843e:	83 ec 0c             	sub    esp,0xc
c0008441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008445:	83 ec 08             	sub    esp,0x8
c0008448:	6a 00                	push   0x0
c000844a:	50                   	push   eax
c000844b:	e8 56 0d 00 00       	call   c00091a6 <UnixFile::UnixFile(int)>
c0008450:	83 c4 10             	add    esp,0x10
c0008453:	ba ac 0e 02 c0       	mov    edx,0xc0020eac
c0008458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000845c:	89 10                	mov    DWORD PTR [eax],edx
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008466:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008469:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000846d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008478:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000847f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008483:	83 ec 0c             	sub    esp,0xc
c0008486:	50                   	push   eax
c0008487:	e8 47 f6 ff ff       	call   c0007ad3 <malloc>
c000848c:	83 c4 10             	add    esp,0x10
c000848f:	89 c2                	mov    edx,eax
c0008491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008495:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000849c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00084a0:	90                   	nop
c00084a1:	83 c4 0c             	add    esp,0xc
c00084a4:	c3                   	ret    
c00084a5:	90                   	nop

c00084a6 <VgaText::isAtty()>:
c00084a6:	b0 01                	mov    al,0x1
c00084a8:	c3                   	ret    
c00084a9:	90                   	nop

c00084aa <VgaText::~VgaText()>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	ba f4 0e 02 c0       	mov    edx,0xc0020ef4
c00084b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084b6:	89 10                	mov    DWORD PTR [eax],edx
c00084b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084bc:	83 ec 0c             	sub    esp,0xc
c00084bf:	50                   	push   eax
c00084c0:	e8 c7 0e 00 00       	call   c000938c <UnixFile::~UnixFile()>
c00084c5:	83 c4 10             	add    esp,0x10
c00084c8:	90                   	nop
c00084c9:	83 c4 0c             	add    esp,0xc
c00084cc:	c3                   	ret    
c00084cd:	90                   	nop

c00084ce <VgaText::~VgaText()>:
c00084ce:	83 ec 0c             	sub    esp,0xc
c00084d1:	83 ec 0c             	sub    esp,0xc
c00084d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d8:	e8 cd ff ff ff       	call   c00084aa <VgaText::~VgaText()>
c00084dd:	83 c4 10             	add    esp,0x10
c00084e0:	83 ec 08             	sub    esp,0x8
c00084e3:	68 84 01 00 00       	push   0x184
c00084e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084ec:	e8 1b 23 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c00084f1:	83 c4 10             	add    esp,0x10
c00084f4:	83 c4 0c             	add    esp,0xc
c00084f7:	c3                   	ret    

c00084f8 <VgaText::read(unsigned long long, void*, int*)>:
c00084f8:	83 ec 10             	sub    esp,0x10
c00084fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008503:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008507:	e8 1a 54 00 00       	call   c000d926 <readKeyboard(VgaText*, char*, unsigned long)>
c000850c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008510:	89 02                	mov    DWORD PTR [edx],eax
c0008512:	31 c0                	xor    eax,eax
c0008514:	83 c4 1c             	add    esp,0x1c
c0008517:	c3                   	ret    

c0008518 <setTerminalScrollLock(bool)>:
c0008518:	c3                   	ret    

c0008519 <doTerminalCycle()>:
c0008519:	c3                   	ret    

c000851a <addToTerminalCycle(VgaText*)>:
c000851a:	c3                   	ret    

c000851b <scrollTerminalScrollLock(int)>:
c000851b:	c3                   	ret    

c000851c <VgaText::updateTitle()>:
c000851c:	c3                   	ret    
c000851d:	90                   	nop

c000851e <VgaText::load()>:
c000851e:	c3                   	ret    
c000851f:	90                   	nop

c0008520 <VgaText::updateCursor()>:
c0008520:	83 ec 14             	sub    esp,0x14
c0008523:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008527:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000852a:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000852d:	e8 62 09 01 00       	call   c0018e94 <HalConsoleCursorUpdate(int, int)>
c0008532:	83 c4 1c             	add    esp,0x1c
c0008535:	c3                   	ret    

c0008536 <VgaText::doANSI_SGR(int)>:
c0008536:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000853a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000853e:	85 d2                	test   edx,edx
c0008540:	75 0b                	jne    c000854d <VgaText::doANSI_SGR(int)+0x17>
c0008542:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008545:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008548:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000854b:	eb 59                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c000854d:	83 fa 07             	cmp    edx,0x7
c0008550:	75 0b                	jne    c000855d <VgaText::doANSI_SGR(int)+0x27>
c0008552:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008555:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008558:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000855b:	eb 49                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c000855d:	83 fa 1b             	cmp    edx,0x1b
c0008560:	74 e0                	je     c0008542 <VgaText::doANSI_SGR(int)+0xc>
c0008562:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008565:	83 f9 07             	cmp    ecx,0x7
c0008568:	77 09                	ja     c0008573 <VgaText::doANSI_SGR(int)+0x3d>
c000856a:	8b 14 8d c0 36 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc940]
c0008571:	eb 20                	jmp    c0008593 <VgaText::doANSI_SGR(int)+0x5d>
c0008573:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008576:	83 f9 07             	cmp    ecx,0x7
c0008579:	77 09                	ja     c0008584 <VgaText::doANSI_SGR(int)+0x4e>
c000857b:	8b 14 8d c0 36 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc940]
c0008582:	eb 22                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c0008584:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008587:	83 f9 07             	cmp    ecx,0x7
c000858a:	77 0b                	ja     c0008597 <VgaText::doANSI_SGR(int)+0x61>
c000858c:	8b 14 95 78 35 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdca88]
c0008593:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008596:	c3                   	ret    
c0008597:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000859a:	83 f9 07             	cmp    ecx,0x7
c000859d:	77 0a                	ja     c00085a9 <VgaText::doANSI_SGR(int)+0x73>
c000859f:	8b 14 95 50 35 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcab0]
c00085a6:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a9:	c3                   	ret    

c00085aa <VgaText::setDefaultBgColour(VgaColour)>:
c00085aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085b2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00085b5:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085b8:	c3                   	ret    
c00085b9:	90                   	nop

c00085ba <VgaText::setDefaultFgColour(VgaColour)>:
c00085ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085c2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085c8:	c3                   	ret    
c00085c9:	90                   	nop

c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085ca:	53                   	push   ebx
c00085cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085cf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085d7:	51                   	push   ecx
c00085d8:	e8 cd ff ff ff       	call   c00085aa <VgaText::setDefaultBgColour(VgaColour)>
c00085dd:	58                   	pop    eax
c00085de:	5a                   	pop    edx
c00085df:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085e3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085e7:	5b                   	pop    ebx
c00085e8:	eb d0                	jmp    c00085ba <VgaText::setDefaultFgColour(VgaColour)>

c00085ea <VgaText::setTitleTextColour(VgaColour)>:
c00085ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085f2:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085f5:	c3                   	ret    

c00085f6 <VgaText::setTitleColour(VgaColour)>:
c00085f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085fe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008601:	c3                   	ret    

c0008602 <VgaText::setTitle(char*)>:
c0008602:	c3                   	ret    
c0008603:	90                   	nop

c0008604 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008608:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000860d:	83 e0 0f             	and    eax,0xf
c0008610:	c1 e2 04             	shl    edx,0x4
c0008613:	09 d0                	or     eax,edx
c0008615:	c3                   	ret    

c0008616 <VgaText::scrollScreen()>:
c0008616:	55                   	push   ebp
c0008617:	57                   	push   edi
c0008618:	56                   	push   esi
c0008619:	be 01 00 00 00       	mov    esi,0x1
c000861e:	53                   	push   ebx
c000861f:	83 ec 0c             	sub    esp,0xc
c0008622:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008626:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008629:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000862f:	31 ff                	xor    edi,edi
c0008631:	01 e9                	add    ecx,ebp
c0008633:	8a 01                	mov    al,BYTE PTR [ecx]
c0008635:	83 fe 18             	cmp    esi,0x18
c0008638:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c000863e:	75 20                	jne    c0008660 <VgaText::scrollScreen()+0x4a>
c0008640:	f7 c7 01 00 00 00    	test   edi,0x1
c0008646:	74 15                	je     c000865d <VgaText::scrollScreen()+0x47>
c0008648:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000864c:	50                   	push   eax
c000864d:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008651:	50                   	push   eax
c0008652:	e8 ad ff ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c0008657:	5a                   	pop    edx
c0008658:	5a                   	pop    edx
c0008659:	88 01                	mov    BYTE PTR [ecx],al
c000865b:	eb 03                	jmp    c0008660 <VgaText::scrollScreen()+0x4a>
c000865d:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0008660:	47                   	inc    edi
c0008661:	41                   	inc    ecx
c0008662:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008668:	75 c9                	jne    c0008633 <VgaText::scrollScreen()+0x1d>
c000866a:	46                   	inc    esi
c000866b:	83 fe 19             	cmp    esi,0x19
c000866e:	75 b9                	jne    c0008629 <VgaText::scrollScreen()+0x13>
c0008670:	39 1d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebx
c0008676:	75 1f                	jne    c0008697 <VgaText::scrollScreen()+0x81>
c0008678:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000867c:	74 05                	je     c0008683 <VgaText::scrollScreen()+0x6d>
c000867e:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008681:	eb 14                	jmp    c0008697 <VgaText::scrollScreen()+0x81>
c0008683:	50                   	push   eax
c0008684:	50                   	push   eax
c0008685:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008689:	50                   	push   eax
c000868a:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000868e:	50                   	push   eax
c000868f:	e8 94 06 01 00       	call   c0018d28 <HalConsoleScroll(int, int)>
c0008694:	83 c4 10             	add    esp,0x10
c0008697:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000869b:	83 c4 0c             	add    esp,0xc
c000869e:	5b                   	pop    ebx
c000869f:	5e                   	pop    esi
c00086a0:	5f                   	pop    edi
c00086a1:	5d                   	pop    ebp
c00086a2:	e9 79 fe ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c00086a7:	90                   	nop

c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>:
c00086a8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00086ad:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00086b2:	c1 e0 08             	shl    eax,0x8
c00086b5:	09 d0                	or     eax,edx
c00086b7:	c3                   	ret    

c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086b8:	55                   	push   ebp
c00086b9:	57                   	push   edi
c00086ba:	56                   	push   esi
c00086bb:	53                   	push   ebx
c00086bc:	83 ec 1c             	sub    esp,0x1c
c00086bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086c3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086c7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086cb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086d3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086d7:	0f b6 c3             	movzx  eax,bl
c00086da:	50                   	push   eax
c00086db:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086e0:	50                   	push   eax
c00086e1:	e8 1e ff ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c00086e6:	5a                   	pop    edx
c00086e7:	59                   	pop    ecx
c00086e8:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086ed:	0f b6 c0             	movzx  eax,al
c00086f0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086f4:	50                   	push   eax
c00086f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086f9:	e8 aa ff ff ff       	call   c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>
c00086fe:	5a                   	pop    edx
c00086ff:	6b d7 50             	imul   edx,edi,0x50
c0008702:	59                   	pop    ecx
c0008703:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008706:	01 f2                	add    edx,esi
c0008708:	0f b7 d2             	movzx  edx,dx
c000870b:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000870f:	39 2d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebp
c0008715:	75 28                	jne    c000873f <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008717:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c000871b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000871f:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008723:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008727:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000872b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000872f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008733:	83 c4 1c             	add    esp,0x1c
c0008736:	5b                   	pop    ebx
c0008737:	5e                   	pop    esi
c0008738:	5f                   	pop    edi
c0008739:	5d                   	pop    ebp
c000873a:	e9 f1 06 01 00       	jmp    c0018e30 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000873f:	83 c4 1c             	add    esp,0x1c
c0008742:	5b                   	pop    ebx
c0008743:	5e                   	pop    esi
c0008744:	5f                   	pop    edi
c0008745:	5d                   	pop    ebp
c0008746:	c3                   	ret    
c0008747:	90                   	nop

c0008748 <VgaText::getCursorX()>:
c0008748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000874c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000874f:	c3                   	ret    

c0008750 <VgaText::getCursorY()>:
c0008750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008754:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008757:	c3                   	ret    

c0008758 <VgaText::setCursor(int, int)>:
c0008758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000875c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008760:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008763:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008767:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000876a:	e9 b1 fd ff ff       	jmp    c0008520 <VgaText::updateCursor()>

c000876f <setActiveTerminal(VgaText*)>:
c000876f:	53                   	push   ebx
c0008770:	83 ec 08             	sub    esp,0x8
c0008773:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008777:	85 db                	test   ebx,ebx
c0008779:	75 11                	jne    c000878c <setActiveTerminal(VgaText*)+0x1d>
c000877b:	c7 44 24 10 c0 0e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020ec0
c0008783:	83 c4 08             	add    esp,0x8
c0008786:	5b                   	pop    ebx
c0008787:	e9 7f 8e 00 00       	jmp    c001160b <KePanic(char const*)>
c000878c:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c0008791:	85 c0                	test   eax,eax
c0008793:	74 0c                	je     c00087a1 <setActiveTerminal(VgaText*)+0x32>
c0008795:	83 ec 0c             	sub    esp,0xc
c0008798:	50                   	push   eax
c0008799:	e8 82 fd ff ff       	call   c0008520 <VgaText::updateCursor()>
c000879e:	83 c4 10             	add    esp,0x10
c00087a1:	50                   	push   eax
c00087a2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00087a5:	89 1d 04 6f 02 c0    	mov    DWORD PTR ds:0xc0026f04,ebx
c00087ab:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00087ae:	53                   	push   ebx
c00087af:	e8 a4 ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c00087b4:	83 c4 18             	add    esp,0x18
c00087b7:	5b                   	pop    ebx
c00087b8:	c3                   	ret    
c00087b9:	90                   	nop

c00087ba <VgaText::clearScreen()>:
c00087ba:	57                   	push   edi
c00087bb:	56                   	push   esi
c00087bc:	31 f6                	xor    esi,esi
c00087be:	53                   	push   ebx
c00087bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087c3:	52                   	push   edx
c00087c4:	6a 00                	push   0x0
c00087c6:	6a 00                	push   0x0
c00087c8:	53                   	push   ebx
c00087c9:	e8 8a ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c00087ce:	83 c4 10             	add    esp,0x10
c00087d1:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087d8:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087db:	7e 20                	jle    c00087fd <VgaText::clearScreen()+0x43>
c00087dd:	31 ff                	xor    edi,edi
c00087df:	50                   	push   eax
c00087e0:	50                   	push   eax
c00087e1:	56                   	push   esi
c00087e2:	57                   	push   edi
c00087e3:	47                   	inc    edi
c00087e4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087e7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087ea:	6a 20                	push   0x20
c00087ec:	53                   	push   ebx
c00087ed:	e8 c6 fe ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087f2:	83 c4 20             	add    esp,0x20
c00087f5:	83 ff 50             	cmp    edi,0x50
c00087f8:	75 e5                	jne    c00087df <VgaText::clearScreen()+0x25>
c00087fa:	46                   	inc    esi
c00087fb:	eb db                	jmp    c00087d8 <VgaText::clearScreen()+0x1e>
c00087fd:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008804:	5b                   	pop    ebx
c0008805:	5e                   	pop    esi
c0008806:	5f                   	pop    edi
c0008807:	c3                   	ret    

c0008808 <VgaText::setCursorX(int)>:
c0008808:	83 ec 10             	sub    esp,0x10
c000880b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000880f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008816:	50                   	push   eax
c0008817:	e8 3c ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c000881c:	83 c4 1c             	add    esp,0x1c
c000881f:	c3                   	ret    

c0008820 <VgaText::setCursorY(int)>:
c0008820:	83 ec 10             	sub    esp,0x10
c0008823:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008827:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000882b:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000882e:	50                   	push   eax
c000882f:	e8 24 ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008834:	83 c4 1c             	add    esp,0x1c
c0008837:	c3                   	ret    

c0008838 <VgaText::incrementCursor(bool)>:
c0008838:	56                   	push   esi
c0008839:	53                   	push   ebx
c000883a:	51                   	push   ecx
c000883b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000883f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008843:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008846:	40                   	inc    eax
c0008847:	83 f8 50             	cmp    eax,0x50
c000884a:	74 05                	je     c0008851 <VgaText::incrementCursor(bool)+0x19>
c000884c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000884f:	eb 24                	jmp    c0008875 <VgaText::incrementCursor(bool)+0x3d>
c0008851:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008858:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000885b:	8d 50 01             	lea    edx,[eax+0x1]
c000885e:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008861:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008864:	75 0f                	jne    c0008875 <VgaText::incrementCursor(bool)+0x3d>
c0008866:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008869:	83 ec 0c             	sub    esp,0xc
c000886c:	53                   	push   ebx
c000886d:	e8 a4 fd ff ff       	call   c0008616 <VgaText::scrollScreen()>
c0008872:	83 c4 10             	add    esp,0x10
c0008875:	89 f0                	mov    eax,esi
c0008877:	84 c0                	test   al,al
c0008879:	74 0c                	je     c0008887 <VgaText::incrementCursor(bool)+0x4f>
c000887b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000887f:	5a                   	pop    edx
c0008880:	5b                   	pop    ebx
c0008881:	5e                   	pop    esi
c0008882:	e9 99 fc ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c0008887:	58                   	pop    eax
c0008888:	5b                   	pop    ebx
c0008889:	5e                   	pop    esi
c000888a:	c3                   	ret    
c000888b:	90                   	nop

c000888c <VgaText::decrementCursor(bool)>:
c000888c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008890:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008894:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008897:	85 c0                	test   eax,eax
c0008899:	74 04                	je     c000889f <VgaText::decrementCursor(bool)+0x13>
c000889b:	48                   	dec    eax
c000889c:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000889f:	84 c9                	test   cl,cl
c00088a1:	74 09                	je     c00088ac <VgaText::decrementCursor(bool)+0x20>
c00088a3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00088a7:	e9 74 fc ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c00088ac:	c3                   	ret    
c00088ad:	90                   	nop

c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>:
c00088ae:	53                   	push   ebx
c00088af:	83 ec 08             	sub    esp,0x8
c00088b2:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088bf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088c3:	83 f8 07             	cmp    eax,0x7
c00088c6:	75 21                	jne    c00088e9 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088c8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088d0:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088d8:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088e0:	83 c4 08             	add    esp,0x8
c00088e3:	5b                   	pop    ebx
c00088e4:	e9 7a 3b 00 00       	jmp    c000c463 <Krnl::beep(int, int, bool)>
c00088e9:	83 f8 0d             	cmp    eax,0xd
c00088ec:	75 09                	jne    c00088f7 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088ee:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f5:	eb 2d                	jmp    c0008924 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088f7:	83 f8 0a             	cmp    eax,0xa
c00088fa:	75 31                	jne    c000892d <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088fc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008903:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008906:	8d 50 01             	lea    edx,[eax+0x1]
c0008909:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000890c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000890f:	75 0f                	jne    c0008920 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008911:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008914:	83 ec 0c             	sub    esp,0xc
c0008917:	53                   	push   ebx
c0008918:	e8 f9 fc ff ff       	call   c0008616 <VgaText::scrollScreen()>
c000891d:	83 c4 10             	add    esp,0x10
c0008920:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008924:	83 c4 08             	add    esp,0x8
c0008927:	5b                   	pop    ebx
c0008928:	e9 f3 fb ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c000892d:	83 f8 08             	cmp    eax,0x8
c0008930:	75 25                	jne    c0008957 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0008932:	50                   	push   eax
c0008933:	50                   	push   eax
c0008934:	6a 01                	push   0x1
c0008936:	53                   	push   ebx
c0008937:	e8 50 ff ff ff       	call   c000888c <VgaText::decrementCursor(bool)>
c000893c:	5a                   	pop    edx
c000893d:	59                   	pop    ecx
c000893e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008941:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008944:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008947:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000894a:	6a 20                	push   0x20
c000894c:	53                   	push   ebx
c000894d:	e8 66 fd ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008952:	83 c4 28             	add    esp,0x28
c0008955:	5b                   	pop    ebx
c0008956:	c3                   	ret    
c0008957:	83 ec 08             	sub    esp,0x8
c000895a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000895d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008960:	51                   	push   ecx
c0008961:	52                   	push   edx
c0008962:	50                   	push   eax
c0008963:	53                   	push   ebx
c0008964:	e8 4f fd ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008969:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000896d:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008975:	83 c4 28             	add    esp,0x28
c0008978:	5b                   	pop    ebx
c0008979:	e9 ba fe ff ff       	jmp    c0008838 <VgaText::incrementCursor(bool)>

c000897e <VgaText::putchar(char)>:
c000897e:	57                   	push   edi
c000897f:	56                   	push   esi
c0008980:	53                   	push   ebx
c0008981:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008985:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008989:	0f be c2             	movsx  eax,dl
c000898c:	83 f8 5b             	cmp    eax,0x5b
c000898f:	75 18                	jne    c00089a9 <VgaText::putchar(char)+0x2b>
c0008991:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008995:	74 20                	je     c00089b7 <VgaText::putchar(char)+0x39>
c0008997:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000899d:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00089a4:	e9 b8 00 00 00       	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c00089a9:	83 f8 1b             	cmp    eax,0x1b
c00089ac:	75 09                	jne    c00089b7 <VgaText::putchar(char)+0x39>
c00089ae:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089b2:	e9 aa 00 00 00       	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c00089b7:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00089bb:	89 f9                	mov    ecx,edi
c00089bd:	84 c9                	test   cl,cl
c00089bf:	0f 84 8c 00 00 00    	je     c0008a51 <VgaText::putchar(char)+0xd3>
c00089c5:	8d 4a c0             	lea    ecx,[edx-0x40]
c00089c8:	80 f9 3e             	cmp    cl,0x3e
c00089cb:	77 70                	ja     c0008a3d <VgaText::putchar(char)+0xbf>
c00089cd:	83 f8 6d             	cmp    eax,0x6d
c00089d0:	75 3f                	jne    c0008a11 <VgaText::putchar(char)+0x93>
c00089d2:	31 f6                	xor    esi,esi
c00089d4:	31 d2                	xor    edx,edx
c00089d6:	31 c0                	xor    eax,eax
c00089d8:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089db:	7e 25                	jle    c0008a02 <VgaText::putchar(char)+0x84>
c00089dd:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089e2:	83 fa 3b             	cmp    edx,0x3b
c00089e5:	75 0f                	jne    c00089f6 <VgaText::putchar(char)+0x78>
c00089e7:	50                   	push   eax
c00089e8:	53                   	push   ebx
c00089e9:	e8 48 fb ff ff       	call   c0008536 <VgaText::doANSI_SGR(int)>
c00089ee:	31 d2                	xor    edx,edx
c00089f0:	59                   	pop    ecx
c00089f1:	58                   	pop    eax
c00089f2:	31 c0                	xor    eax,eax
c00089f4:	eb 09                	jmp    c00089ff <VgaText::putchar(char)+0x81>
c00089f6:	6b c0 0a             	imul   eax,eax,0xa
c00089f9:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089fd:	89 fa                	mov    edx,edi
c00089ff:	46                   	inc    esi
c0008a00:	eb d6                	jmp    c00089d8 <VgaText::putchar(char)+0x5a>
c0008a02:	84 d2                	test   dl,dl
c0008a04:	74 2f                	je     c0008a35 <VgaText::putchar(char)+0xb7>
c0008a06:	50                   	push   eax
c0008a07:	53                   	push   ebx
c0008a08:	e8 29 fb ff ff       	call   c0008536 <VgaText::doANSI_SGR(int)>
c0008a0d:	58                   	pop    eax
c0008a0e:	5a                   	pop    edx
c0008a0f:	eb 24                	jmp    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a11:	83 f8 4a             	cmp    eax,0x4a
c0008a14:	75 1f                	jne    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a16:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a1a:	75 19                	jne    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a1c:	83 ec 0c             	sub    esp,0xc
c0008a1f:	53                   	push   ebx
c0008a20:	e8 95 fd ff ff       	call   c00087ba <VgaText::clearScreen()>
c0008a25:	83 c4 0c             	add    esp,0xc
c0008a28:	6a 00                	push   0x0
c0008a2a:	6a 00                	push   0x0
c0008a2c:	53                   	push   ebx
c0008a2d:	e8 26 fd ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008a32:	83 c4 10             	add    esp,0x10
c0008a35:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a3b:	eb 24                	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c0008a3d:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a40:	83 f8 0e             	cmp    eax,0xe
c0008a43:	7f 1c                	jg     c0008a61 <VgaText::putchar(char)+0xe3>
c0008a45:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a48:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a4b:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0008a4f:	eb 10                	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c0008a51:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a54:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a57:	50                   	push   eax
c0008a58:	53                   	push   ebx
c0008a59:	e8 50 fe ff ff       	call   c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a5e:	83 c4 10             	add    esp,0x10
c0008a61:	5b                   	pop    ebx
c0008a62:	5e                   	pop    esi
c0008a63:	5f                   	pop    edi
c0008a64:	c3                   	ret    
c0008a65:	90                   	nop

c0008a66 <VgaText::putx(unsigned int)>:
c0008a66:	57                   	push   edi
c0008a67:	b9 11 00 00 00       	mov    ecx,0x11
c0008a6c:	56                   	push   esi
c0008a6d:	be ce 0e 02 c0       	mov    esi,0xc0020ece
c0008a72:	53                   	push   ebx
c0008a73:	83 ec 20             	sub    esp,0x20
c0008a76:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a7a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a7e:	fc                   	cld    
c0008a7f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a81:	be 08 00 00 00       	mov    esi,0x8
c0008a86:	50                   	push   eax
c0008a87:	50                   	push   eax
c0008a88:	89 d8                	mov    eax,ebx
c0008a8a:	c1 e8 1c             	shr    eax,0x1c
c0008a8d:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a92:	c1 e3 04             	shl    ebx,0x4
c0008a95:	50                   	push   eax
c0008a96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a9a:	e8 df fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008a9f:	83 c4 10             	add    esp,0x10
c0008aa2:	4e                   	dec    esi
c0008aa3:	75 e1                	jne    c0008a86 <VgaText::putx(unsigned int)+0x20>
c0008aa5:	83 c4 20             	add    esp,0x20
c0008aa8:	5b                   	pop    ebx
c0008aa9:	5e                   	pop    esi
c0008aaa:	5f                   	pop    edi
c0008aab:	c3                   	ret    

c0008aac <VgaText::puts(char const*)>:
c0008aac:	53                   	push   ebx
c0008aad:	83 ec 08             	sub    esp,0x8
c0008ab0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008ab4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ab7:	85 c0                	test   eax,eax
c0008ab9:	74 12                	je     c0008acd <VgaText::puts(char const*)+0x21>
c0008abb:	51                   	push   ecx
c0008abc:	43                   	inc    ebx
c0008abd:	51                   	push   ecx
c0008abe:	50                   	push   eax
c0008abf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ac3:	e8 b6 fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008ac8:	83 c4 10             	add    esp,0x10
c0008acb:	eb e7                	jmp    c0008ab4 <VgaText::puts(char const*)+0x8>
c0008acd:	83 c4 08             	add    esp,0x8
c0008ad0:	5b                   	pop    ebx
c0008ad1:	c3                   	ret    

c0008ad2 <VgaText::write(unsigned long long, void*, int*)>:
c0008ad2:	55                   	push   ebp
c0008ad3:	57                   	push   edi
c0008ad4:	56                   	push   esi
c0008ad5:	53                   	push   ebx
c0008ad6:	83 ec 0c             	sub    esp,0xc
c0008ad9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008add:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008ae1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008ae5:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008aec:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008aef:	39 eb                	cmp    ebx,ebp
c0008af1:	74 13                	je     c0008b06 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008af3:	50                   	push   eax
c0008af4:	43                   	inc    ebx
c0008af5:	50                   	push   eax
c0008af6:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008afa:	50                   	push   eax
c0008afb:	56                   	push   esi
c0008afc:	e8 7d fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008b01:	83 c4 10             	add    esp,0x10
c0008b04:	eb e9                	jmp    c0008aef <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b06:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b11:	89 38                	mov    DWORD PTR [eax],edi
c0008b13:	83 c4 0c             	add    esp,0xc
c0008b16:	31 c0                	xor    eax,eax
c0008b18:	5b                   	pop    ebx
c0008b19:	5e                   	pop    esi
c0008b1a:	5f                   	pop    edi
c0008b1b:	5d                   	pop    ebp
c0008b1c:	c3                   	ret    
c0008b1d:	90                   	nop

c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b1e:	55                   	push   ebp
c0008b1f:	57                   	push   edi
c0008b20:	56                   	push   esi
c0008b21:	53                   	push   ebx
c0008b22:	83 ec 0c             	sub    esp,0xc
c0008b25:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0008b29:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b2e:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c0008b35:	50                   	push   eax
c0008b36:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b3b:	50                   	push   eax
c0008b3c:	e8 c3 fa ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c0008b41:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008b45:	5a                   	pop    edx
c0008b46:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008b49:	59                   	pop    ecx
c0008b4a:	0f b6 f8             	movzx  edi,al
c0008b4d:	0f b7 db             	movzx  ebx,bx
c0008b50:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b54:	01 db                	add    ebx,ebx
c0008b56:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008b59:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008b5c:	85 c0                	test   eax,eax
c0008b5e:	0f 84 ef 00 00 00    	je     c0008c53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b64:	83 f8 0d             	cmp    eax,0xd
c0008b67:	75 0c                	jne    c0008b75 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b69:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b70:	e9 d8 00 00 00       	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b75:	83 f8 0a             	cmp    eax,0xa
c0008b78:	75 44                	jne    c0008bbe <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b7a:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b81:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0008b84:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b87:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c0008b8a:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0008b8d:	75 0f                	jne    c0008b9e <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b8f:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0008b92:	83 ec 0c             	sub    esp,0xc
c0008b95:	55                   	push   ebp
c0008b96:	e8 7b fa ff ff       	call   c0008616 <VgaText::scrollScreen()>
c0008b9b:	83 c4 10             	add    esp,0x10
c0008b9e:	83 ec 0c             	sub    esp,0xc
c0008ba1:	55                   	push   ebp
c0008ba2:	e8 79 f9 ff ff       	call   c0008520 <VgaText::updateCursor()>
c0008ba7:	83 c4 10             	add    esp,0x10
c0008baa:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bae:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bb1:	0f b7 db             	movzx  ebx,bx
c0008bb4:	01 db                	add    ebx,ebx
c0008bb6:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bb9:	e9 8f 00 00 00       	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bbe:	83 f8 08             	cmp    eax,0x8
c0008bc1:	75 34                	jne    c0008bf7 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bc3:	51                   	push   ecx
c0008bc4:	51                   	push   ecx
c0008bc5:	6a 01                	push   0x1
c0008bc7:	55                   	push   ebp
c0008bc8:	e8 bf fc ff ff       	call   c000888c <VgaText::decrementCursor(bool)>
c0008bcd:	5b                   	pop    ebx
c0008bce:	58                   	pop    eax
c0008bcf:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008bd2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008bd5:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0008bd8:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c0008bdb:	6a 20                	push   0x20
c0008bdd:	55                   	push   ebp
c0008bde:	e8 d5 fa ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008be3:	83 c4 20             	add    esp,0x20
c0008be6:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bea:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bed:	0f b7 db             	movzx  ebx,bx
c0008bf0:	01 db                	add    ebx,ebx
c0008bf2:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bf5:	eb 56                	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bf7:	52                   	push   edx
c0008bf8:	52                   	push   edx
c0008bf9:	57                   	push   edi
c0008bfa:	50                   	push   eax
c0008bfb:	e8 a8 fa ff ff       	call   c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>
c0008c00:	83 c4 10             	add    esp,0x10
c0008c03:	66 89 03             	mov    WORD PTR [ebx],ax
c0008c06:	39 2d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebp
c0008c0c:	75 1d                	jne    c0008c2b <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c0e:	83 ec 0c             	sub    esp,0xc
c0008c11:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008c14:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008c17:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c1b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c1f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008c22:	50                   	push   eax
c0008c23:	e8 08 02 01 00       	call   c0018e30 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c28:	83 c4 20             	add    esp,0x20
c0008c2b:	50                   	push   eax
c0008c2c:	83 c3 02             	add    ebx,0x2
c0008c2f:	50                   	push   eax
c0008c30:	6a 00                	push   0x0
c0008c32:	55                   	push   ebp
c0008c33:	e8 00 fc ff ff       	call   c0008838 <VgaText::incrementCursor(bool)>
c0008c38:	83 c4 10             	add    esp,0x10
c0008c3b:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c0008c3f:	75 0c                	jne    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c41:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008c45:	0f b7 db             	movzx  ebx,bx
c0008c48:	01 db                	add    ebx,ebx
c0008c4a:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008c4d:	46                   	inc    esi
c0008c4e:	e9 06 ff ff ff       	jmp    c0008b59 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c53:	83 ec 0c             	sub    esp,0xc
c0008c56:	55                   	push   ebp
c0008c57:	e8 c4 f8 ff ff       	call   c0008520 <VgaText::updateCursor()>
c0008c5c:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c0008c63:	83 c4 1c             	add    esp,0x1c
c0008c66:	5b                   	pop    ebx
c0008c67:	5e                   	pop    esi
c0008c68:	5f                   	pop    edi
c0008c69:	5d                   	pop    ebp
c0008c6a:	c3                   	ret    
c0008c6b:	90                   	nop

c0008c6c <VgaText::VgaText(char const*)>:
c0008c6c:	56                   	push   esi
c0008c6d:	53                   	push   ebx
c0008c6e:	83 ec 04             	sub    esp,0x4
c0008c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c75:	83 ec 08             	sub    esp,0x8
c0008c78:	6a 00                	push   0x0
c0008c7a:	50                   	push   eax
c0008c7b:	e8 26 05 00 00       	call   c00091a6 <UnixFile::UnixFile(int)>
c0008c80:	83 c4 10             	add    esp,0x10
c0008c83:	ba f4 0e 02 c0       	mov    edx,0xc0020ef4
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	89 10                	mov    DWORD PTR [eax],edx
c0008c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c92:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9d:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca8:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb0:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb8:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc3:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cce:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd9:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce4:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ceb:	83 ec 0c             	sub    esp,0xc
c0008cee:	6a 01                	push   0x1
c0008cf0:	e8 00 09 00 00       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0008cf5:	83 c4 10             	add    esp,0x10
c0008cf8:	89 c2                	mov    edx,eax
c0008cfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cfe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008d01:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c0008d07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d0b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d0e:	89 c6                	mov    esi,eax
c0008d10:	e8 cd f0 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0008d15:	68 05 0c 00 00       	push   0xc05
c0008d1a:	56                   	push   esi
c0008d1b:	50                   	push   eax
c0008d1c:	53                   	push   ebx
c0008d1d:	e8 dc 0f 00 00       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d22:	83 c4 10             	add    esp,0x10
c0008d25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d29:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d2c:	83 ec 04             	sub    esp,0x4
c0008d2f:	68 a0 0f 00 00       	push   0xfa0
c0008d34:	6a 00                	push   0x0
c0008d36:	50                   	push   eax
c0008d37:	e8 b4 77 ff ff       	call   c00004f0 <memset>
c0008d3c:	83 c4 10             	add    esp,0x10
c0008d3f:	83 ec 04             	sub    esp,0x4
c0008d42:	6a 00                	push   0x0
c0008d44:	6a 07                	push   0x7
c0008d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d4a:	e8 7b f8 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d4f:	83 c4 10             	add    esp,0x10
c0008d52:	83 ec 04             	sub    esp,0x4
c0008d55:	6a 00                	push   0x0
c0008d57:	6a 00                	push   0x0
c0008d59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d5d:	e8 f6 f9 ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008d62:	83 c4 10             	add    esp,0x10
c0008d65:	83 ec 0c             	sub    esp,0xc
c0008d68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d6c:	e8 49 fa ff ff       	call   c00087ba <VgaText::clearScreen()>
c0008d71:	83 c4 10             	add    esp,0x10
c0008d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d78:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d80:	05 82 00 00 00       	add    eax,0x82
c0008d85:	83 ec 04             	sub    esp,0x4
c0008d88:	68 80 00 00 00       	push   0x80
c0008d8d:	6a 00                	push   0x0
c0008d8f:	50                   	push   eax
c0008d90:	e8 5b 77 ff ff       	call   c00004f0 <memset>
c0008d95:	83 c4 10             	add    esp,0x10
c0008d98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d9c:	05 02 01 00 00       	add    eax,0x102
c0008da1:	83 ec 04             	sub    esp,0x4
c0008da4:	68 80 00 00 00       	push   0x80
c0008da9:	6a 00                	push   0x0
c0008dab:	50                   	push   eax
c0008dac:	e8 3f 77 ff ff       	call   c00004f0 <memset>
c0008db1:	83 c4 10             	add    esp,0x10
c0008db4:	90                   	nop
c0008db5:	83 c4 04             	add    esp,0x4
c0008db8:	5b                   	pop    ebx
c0008db9:	5e                   	pop    esi
c0008dba:	c3                   	ret    
c0008dbb:	90                   	nop

c0008dbc <VgaText::receiveKey(unsigned char)>:
c0008dbc:	55                   	push   ebp
c0008dbd:	57                   	push   edi
c0008dbe:	56                   	push   esi
c0008dbf:	53                   	push   ebx
c0008dc0:	83 ec 2c             	sub    esp,0x2c
c0008dc3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008dc7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dcb:	89 fd                	mov    ebp,edi
c0008dcd:	81 e5 ff 00 00 00    	and    ebp,0xff
c0008dd3:	0f 84 48 01 00 00    	je     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008dd9:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008ddf:	83 fd 08             	cmp    ebp,0x8
c0008de2:	75 6a                	jne    c0008e4e <VgaText::receiveKey(unsigned char)+0x92>
c0008de4:	83 ec 0c             	sub    esp,0xc
c0008de7:	56                   	push   esi
c0008de8:	e8 93 77 ff ff       	call   c0000580 <strlen>
c0008ded:	83 c4 10             	add    esp,0x10
c0008df0:	85 c0                	test   eax,eax
c0008df2:	0f 84 ef 00 00 00    	je     c0008ee7 <VgaText::receiveKey(unsigned char)+0x12b>
c0008df8:	50                   	push   eax
c0008df9:	50                   	push   eax
c0008dfa:	6a 08                	push   0x8
c0008dfc:	53                   	push   ebx
c0008dfd:	e8 7c fb ff ff       	call   c000897e <VgaText::putchar(char)>
c0008e02:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e05:	e8 76 77 ff ff       	call   c0000580 <strlen>
c0008e0a:	83 c4 10             	add    esp,0x10
c0008e0d:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e15:	83 fa 1f             	cmp    edx,0x1f
c0008e18:	89 d0                	mov    eax,edx
c0008e1a:	7f 1c                	jg     c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e1c:	83 e8 08             	sub    eax,0x8
c0008e1f:	3c 02                	cmp    al,0x2
c0008e21:	76 15                	jbe    c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e23:	83 fa 0d             	cmp    edx,0xd
c0008e26:	74 10                	je     c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e28:	57                   	push   edi
c0008e29:	57                   	push   edi
c0008e2a:	68 df 0e 02 c0       	push   0xc0020edf
c0008e2f:	53                   	push   ebx
c0008e30:	e8 77 fc ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0008e35:	83 c4 10             	add    esp,0x10
c0008e38:	83 ec 0c             	sub    esp,0xc
c0008e3b:	56                   	push   esi
c0008e3c:	e8 3f 77 ff ff       	call   c0000580 <strlen>
c0008e41:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e49:	e9 96 00 00 00       	jmp    c0008ee4 <VgaText::receiveKey(unsigned char)+0x128>
c0008e4e:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e54:	83 ec 0c             	sub    esp,0xc
c0008e57:	50                   	push   eax
c0008e58:	e8 23 77 ff ff       	call   c0000580 <strlen>
c0008e5d:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e60:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e64:	e8 17 77 ff ff       	call   c0000580 <strlen>
c0008e69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e6d:	83 c4 10             	add    esp,0x10
c0008e70:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e74:	3d 80 00 00 00       	cmp    eax,0x80
c0008e79:	0f 87 a2 00 00 00    	ja     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008e7f:	8d 47 ff             	lea    eax,[edi-0x1]
c0008e82:	3c 1e                	cmp    al,0x1e
c0008e84:	77 35                	ja     c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e86:	8d 47 f7             	lea    eax,[edi-0x9]
c0008e89:	3c 01                	cmp    al,0x1
c0008e8b:	76 2e                	jbe    c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e8d:	83 fd 0d             	cmp    ebp,0xd
c0008e90:	74 29                	je     c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e92:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e95:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e98:	68 e5 0e 02 c0       	push   0xc0020ee5
c0008e9d:	53                   	push   ebx
c0008e9e:	e8 7b fc ff ff       	call   c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008ea3:	8d 47 40             	lea    eax,[edi+0x40]
c0008ea6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea9:	0f b6 c0             	movzx  eax,al
c0008eac:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eaf:	50                   	push   eax
c0008eb0:	53                   	push   ebx
c0008eb1:	e8 f8 f9 ff ff       	call   c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>
c0008eb6:	83 c4 20             	add    esp,0x20
c0008eb9:	eb 11                	jmp    c0008ecc <VgaText::receiveKey(unsigned char)+0x110>
c0008ebb:	51                   	push   ecx
c0008ebc:	89 f8                	mov    eax,edi
c0008ebe:	51                   	push   ecx
c0008ebf:	0f be c0             	movsx  eax,al
c0008ec2:	50                   	push   eax
c0008ec3:	53                   	push   ebx
c0008ec4:	e8 b5 fa ff ff       	call   c000897e <VgaText::putchar(char)>
c0008ec9:	83 c4 10             	add    esp,0x10
c0008ecc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ed1:	89 f8                	mov    eax,edi
c0008ed3:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ed7:	52                   	push   edx
c0008ed8:	52                   	push   edx
c0008ed9:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008edd:	50                   	push   eax
c0008ede:	56                   	push   esi
c0008edf:	e8 8c 79 ff ff       	call   c0000870 <strcat>
c0008ee4:	83 c4 10             	add    esp,0x10
c0008ee7:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008eee:	75 0f                	jne    c0008eff <VgaText::receiveKey(unsigned char)+0x143>
c0008ef0:	83 fd 1c             	cmp    ebp,0x1c
c0008ef3:	77 2c                	ja     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008ef5:	b8 08 04 00 10       	mov    eax,0x10000408
c0008efa:	0f a3 e8             	bt     eax,ebp
c0008efd:	73 22                	jae    c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008eff:	50                   	push   eax
c0008f00:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f06:	50                   	push   eax
c0008f07:	56                   	push   esi
c0008f08:	53                   	push   ebx
c0008f09:	e8 62 79 ff ff       	call   c0000870 <strcat>
c0008f0e:	83 c4 0c             	add    esp,0xc
c0008f11:	68 80 00 00 00       	push   0x80
c0008f16:	6a 00                	push   0x0
c0008f18:	56                   	push   esi
c0008f19:	e8 d2 75 ff ff       	call   c00004f0 <memset>
c0008f1e:	83 c4 10             	add    esp,0x10
c0008f21:	83 c4 2c             	add    esp,0x2c
c0008f24:	5b                   	pop    ebx
c0008f25:	5e                   	pop    esi
c0008f26:	5f                   	pop    edi
c0008f27:	5d                   	pop    ebp
c0008f28:	c3                   	ret    
c0008f29:	90                   	nop

c0008f2a <VgaText::doUpdate()>:
c0008f2a:	c3                   	ret    
c0008f2b:	90                   	nop

c0008f2c <TSS::TSS()>:
c0008f2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f30:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f37:	90                   	nop
c0008f38:	c3                   	ret    
c0008f39:	90                   	nop
c0008f3a:	66 90                	xchg   ax,ax

c0008f3c <TSS::setESP(unsigned long)>:
c0008f3c:	55                   	push   ebp
c0008f3d:	89 e5                	mov    ebp,esp
c0008f3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f45:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f48:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f4b:	90                   	nop
c0008f4c:	5d                   	pop    ebp
c0008f4d:	c3                   	ret    
c0008f4e:	66 90                	xchg   ax,ax

c0008f50 <TSS::flush()>:
c0008f50:	55                   	push   ebp
c0008f51:	89 e5                	mov    ebp,esp
c0008f53:	83 ec 10             	sub    esp,0x10
c0008f56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f59:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f5b:	83 c8 03             	or     eax,0x3
c0008f5e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f62:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f66:	66 89 d0             	mov    ax,dx
c0008f69:	0f 00 d8             	ltr    ax
c0008f6c:	90                   	nop
c0008f6d:	c9                   	leave  
c0008f6e:	c3                   	ret    
c0008f6f:	90                   	nop

c0008f70 <TSS::setup(unsigned long, unsigned long)>:
c0008f70:	55                   	push   ebp
c0008f71:	89 e5                	mov    ebp,esp
c0008f73:	83 ec 18             	sub    esp,0x18
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	6a 68                	push   0x68
c0008f7b:	e8 53 eb ff ff       	call   c0007ad3 <malloc>
c0008f80:	83 c4 10             	add    esp,0x10
c0008f83:	89 c2                	mov    edx,eax
c0008f85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f88:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f91:	83 ec 04             	sub    esp,0x4
c0008f94:	6a 68                	push   0x68
c0008f96:	6a 00                	push   0x0
c0008f98:	50                   	push   eax
c0008f99:	e8 52 75 ff ff       	call   c00004f0 <memset>
c0008f9e:	83 c4 10             	add    esp,0x10
c0008fa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa7:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fb3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fc2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0009016:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009022:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0009032:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009035:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009038:	0f 20 da             	mov    edx,cr3
c000903b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000903e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009041:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009044:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009047:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000904a:	83 ec 08             	sub    esp,0x8
c000904d:	50                   	push   eax
c000904e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009051:	50                   	push   eax
c0009052:	e8 eb e2 ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0009057:	83 c4 10             	add    esp,0x10
c000905a:	83 ec 08             	sub    esp,0x8
c000905d:	6a 68                	push   0x68
c000905f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009062:	50                   	push   eax
c0009063:	e8 f6 e2 ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c0009068:	83 c4 10             	add    esp,0x10
c000906b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000906f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009072:	83 e0 0f             	and    eax,0xf
c0009075:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009078:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000907b:	83 c8 40             	or     eax,0x40
c000907e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009081:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009086:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000908c:	05 78 01 00 00       	add    eax,0x178
c0009091:	83 ec 04             	sub    esp,0x4
c0009094:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009097:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000909a:	50                   	push   eax
c000909b:	e8 f2 e2 ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00090a0:	83 c4 10             	add    esp,0x10
c00090a3:	89 c2                	mov    edx,eax
c00090a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090a8:	89 10                	mov    DWORD PTR [eax],edx
c00090aa:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00090af:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090b5:	05 78 01 00 00       	add    eax,0x178
c00090ba:	83 ec 0c             	sub    esp,0xc
c00090bd:	50                   	push   eax
c00090be:	e8 f9 e2 ff ff       	call   c00073bc <GDT::flush()>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00090cb:	c9                   	leave  
c00090cc:	c3                   	ret    
c00090cd:	90                   	nop

c00090ce <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090d9:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090de:	75 08                	jne    c00090e8 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090e0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090e6:	eb 38                	jmp    c0009120 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00090e8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00090ed:	75 17                	jne    c0009106 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00090ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00090f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00090f7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00090fd:	8b 10                	mov    edx,DWORD PTR [eax]
c00090ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009103:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0009106:	89 c1                	mov    ecx,eax
c0009108:	83 e1 fd             	and    ecx,0xfffffffd
c000910b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009111:	74 cd                	je     c00090e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009113:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009118:	83 e0 ef             	and    eax,0xffffffef
c000911b:	83 f8 08             	cmp    eax,0x8
c000911e:	76 c0                	jbe    c00090e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009120:	31 c0                	xor    eax,eax
c0009122:	c3                   	ret    
c0009123:	90                   	nop

c0009124 <ReservedFilename::isAtty()>:
c0009124:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009128:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000912b:	31 c0                	xor    eax,eax
c000912d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0009133:	74 09                	je     c000913e <ReservedFilename::isAtty()+0x1a>
c0009135:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000913b:	0f 94 c0             	sete   al
c000913e:	c3                   	ret    
c000913f:	90                   	nop

c0009140 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009144:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009148:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000914c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000914f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009154:	75 08                	jne    c000915e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009156:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000915c:	eb 3d                	jmp    c000919b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000915e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009163:	75 17                	jne    c000917c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009165:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000916a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000916d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009173:	8b 10                	mov    edx,DWORD PTR [eax]
c0009175:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009179:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000917c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009181:	75 04                	jne    c0009187 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0009183:	89 0a                	mov    DWORD PTR [edx],ecx
c0009185:	eb 14                	jmp    c000919b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009187:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000918c:	74 c8                	je     c0009156 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000918e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009193:	83 e0 ef             	and    eax,0xffffffef
c0009196:	83 f8 08             	cmp    eax,0x8
c0009199:	76 bb                	jbe    c0009156 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000919b:	31 c0                	xor    eax,eax
c000919d:	c3                   	ret    

c000919e <UnixFile::getFileDescriptor()>:
c000919e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091a5:	c3                   	ret    

c00091a6 <UnixFile::UnixFile(int)>:
c00091a6:	53                   	push   ebx
c00091a7:	83 ec 28             	sub    esp,0x28
c00091aa:	ba bc 0f 02 c0       	mov    edx,0xc0020fbc
c00091af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091b3:	89 10                	mov    DWORD PTR [eax],edx
c00091b5:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091bd:	0f 8f 90 01 00 00    	jg     c0009353 <UnixFile::UnixFile(int)+0x1ad>
c00091c3:	a1 00 37 02 c0       	mov    eax,ds:0xc0023700
c00091c8:	8d 50 01             	lea    edx,[eax+0x1]
c00091cb:	89 15 00 37 02 c0    	mov    DWORD PTR ds:0xc0023700,edx
c00091d1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091d5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091d8:	83 ec 08             	sub    esp,0x8
c00091db:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091df:	68 98 6f 02 c0       	push   0xc0026f98
c00091e4:	e8 af 68 01 00       	call   c001fa98 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00091e9:	83 c4 10             	add    esp,0x10
c00091ec:	a0 94 6f 02 c0       	mov    al,ds:0xc0026f94
c00091f1:	83 f0 01             	xor    eax,0x1
c00091f4:	0f b6 c0             	movzx  eax,al
c00091f7:	85 c0                	test   eax,eax
c00091f9:	0f 84 55 01 00 00    	je     c0009354 <UnixFile::UnixFile(int)+0x1ae>
c00091ff:	c6 05 94 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026f94,0x1
c0009206:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000920e:	83 ec 0c             	sub    esp,0xc
c0009211:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009215:	e8 b9 e8 ff ff       	call   c0007ad3 <malloc>
c000921a:	83 c4 10             	add    esp,0x10
c000921d:	89 c3                	mov    ebx,eax
c000921f:	83 ec 08             	sub    esp,0x8
c0009222:	68 03 ff ff 0f       	push   0xfffff03
c0009227:	53                   	push   ebx
c0009228:	e8 2d 01 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000922d:	83 c4 10             	add    esp,0x10
c0009230:	89 1d 8c 6f 02 c0    	mov    DWORD PTR ds:0xc0026f8c,ebx
c0009236:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000923e:	83 ec 0c             	sub    esp,0xc
c0009241:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009245:	e8 89 e8 ff ff       	call   c0007ad3 <malloc>
c000924a:	83 c4 10             	add    esp,0x10
c000924d:	89 c3                	mov    ebx,eax
c000924f:	83 ec 08             	sub    esp,0x8
c0009252:	68 01 ff ff 0f       	push   0xfffff01
c0009257:	53                   	push   ebx
c0009258:	e8 fd 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000925d:	83 c4 10             	add    esp,0x10
c0009260:	89 1d 90 6f 02 c0    	mov    DWORD PTR ds:0xc0026f90,ebx
c0009266:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000926e:	83 ec 0c             	sub    esp,0xc
c0009271:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009275:	e8 59 e8 ff ff       	call   c0007ad3 <malloc>
c000927a:	83 c4 10             	add    esp,0x10
c000927d:	89 c3                	mov    ebx,eax
c000927f:	83 ec 08             	sub    esp,0x8
c0009282:	68 00 ff ff 0f       	push   0xfffff00
c0009287:	53                   	push   ebx
c0009288:	e8 cd 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000928d:	83 c4 10             	add    esp,0x10
c0009290:	89 1d 84 6f 02 c0    	mov    DWORD PTR ds:0xc0026f84,ebx
c0009296:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000929e:	83 ec 0c             	sub    esp,0xc
c00092a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092a5:	e8 29 e8 ff ff       	call   c0007ad3 <malloc>
c00092aa:	83 c4 10             	add    esp,0x10
c00092ad:	89 c3                	mov    ebx,eax
c00092af:	83 ec 08             	sub    esp,0x8
c00092b2:	68 02 ff ff 0f       	push   0xfffff02
c00092b7:	53                   	push   ebx
c00092b8:	e8 9d 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c00092bd:	83 c4 10             	add    esp,0x10
c00092c0:	89 1d 88 6f 02 c0    	mov    DWORD PTR ds:0xc0026f88,ebx
c00092c6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092ce:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092d3:	7f 7f                	jg     c0009354 <UnixFile::UnixFile(int)+0x1ae>
c00092d5:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092dd:	83 ec 0c             	sub    esp,0xc
c00092e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092e4:	e8 ea e7 ff ff       	call   c0007ad3 <malloc>
c00092e9:	83 c4 10             	add    esp,0x10
c00092ec:	89 c3                	mov    ebx,eax
c00092ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092f2:	05 10 ff ff 0f       	add    eax,0xfffff10
c00092f7:	83 ec 08             	sub    esp,0x8
c00092fa:	50                   	push   eax
c00092fb:	53                   	push   ebx
c00092fc:	e8 59 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c0009301:	83 c4 10             	add    esp,0x10
c0009304:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009308:	89 1c 85 60 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90a0],ebx
c000930f:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009317:	83 ec 0c             	sub    esp,0xc
c000931a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000931e:	e8 b0 e7 ff ff       	call   c0007ad3 <malloc>
c0009323:	83 c4 10             	add    esp,0x10
c0009326:	89 c3                	mov    ebx,eax
c0009328:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000932c:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009331:	83 ec 08             	sub    esp,0x8
c0009334:	50                   	push   eax
c0009335:	53                   	push   ebx
c0009336:	e8 1f 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009342:	89 1c 85 20 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90e0],ebx
c0009349:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000934e:	e9 7b ff ff ff       	jmp    c00092ce <UnixFile::UnixFile(int)+0x128>
c0009353:	90                   	nop
c0009354:	83 c4 28             	add    esp,0x28
c0009357:	5b                   	pop    ebx
c0009358:	c3                   	ret    
c0009359:	90                   	nop

c000935a <ReservedFilename::ReservedFilename(int)>:
c000935a:	83 ec 0c             	sub    esp,0xc
c000935d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009361:	83 ec 08             	sub    esp,0x8
c0009364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009368:	50                   	push   eax
c0009369:	e8 38 fe ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000936e:	83 c4 10             	add    esp,0x10
c0009371:	ba d8 0f 02 c0       	mov    edx,0xc0020fd8
c0009376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000937a:	89 10                	mov    DWORD PTR [eax],edx
c000937c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009380:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009384:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009387:	90                   	nop
c0009388:	83 c4 0c             	add    esp,0xc
c000938b:	c3                   	ret    

c000938c <UnixFile::~UnixFile()>:
c000938c:	83 ec 1c             	sub    esp,0x1c
c000938f:	ba bc 0f 02 c0       	mov    edx,0xc0020fbc
c0009394:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009398:	89 10                	mov    DWORD PTR [eax],edx
c000939a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000939e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093a1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093a6:	7f 76                	jg     c000941e <UnixFile::~UnixFile()+0x92>
c00093a8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093b0:	83 ec 0c             	sub    esp,0xc
c00093b3:	68 98 6f 02 c0       	push   0xc0026f98
c00093b8:	e8 af 67 01 00       	call   c001fb6c <LinkedList<UnixFile>::getFirstElement()>
c00093bd:	83 c4 10             	add    esp,0x10
c00093c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093c4:	83 ec 0c             	sub    esp,0xc
c00093c7:	68 98 6f 02 c0       	push   0xc0026f98
c00093cc:	e8 a3 67 01 00       	call   c001fb74 <LinkedList<UnixFile>::removeFirst()>
c00093d1:	83 c4 10             	add    esp,0x10
c00093d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093d8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093dc:	74 43                	je     c0009421 <UnixFile::~UnixFile()+0x95>
c00093de:	83 ec 08             	sub    esp,0x8
c00093e1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093e5:	68 98 6f 02 c0       	push   0xc0026f98
c00093ea:	e8 a9 66 01 00       	call   c001fa98 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00093ef:	83 c4 10             	add    esp,0x10
c00093f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00093f6:	8d 50 01             	lea    edx,[eax+0x1]
c00093f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00093fd:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009402:	0f 94 c0             	sete   al
c0009405:	0f b6 c0             	movzx  eax,al
c0009408:	85 c0                	test   eax,eax
c000940a:	74 a4                	je     c00093b0 <UnixFile::~UnixFile()+0x24>
c000940c:	83 ec 0c             	sub    esp,0xc
c000940f:	68 94 0f 02 c0       	push   0xc0020f94
c0009414:	e8 f2 81 00 00       	call   c001160b <KePanic(char const*)>
c0009419:	83 c4 10             	add    esp,0x10
c000941c:	eb 92                	jmp    c00093b0 <UnixFile::~UnixFile()+0x24>
c000941e:	90                   	nop
c000941f:	eb 01                	jmp    c0009422 <UnixFile::~UnixFile()+0x96>
c0009421:	90                   	nop
c0009422:	90                   	nop
c0009423:	83 c4 1c             	add    esp,0x1c
c0009426:	c3                   	ret    
c0009427:	90                   	nop

c0009428 <UnixFile::~UnixFile()>:
c0009428:	83 ec 0c             	sub    esp,0xc
c000942b:	83 ec 0c             	sub    esp,0xc
c000942e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009432:	e8 55 ff ff ff       	call   c000938c <UnixFile::~UnixFile()>
c0009437:	83 c4 10             	add    esp,0x10
c000943a:	83 ec 08             	sub    esp,0x8
c000943d:	6a 0c                	push   0xc
c000943f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009443:	e8 c4 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0009448:	83 c4 10             	add    esp,0x10
c000944b:	83 c4 0c             	add    esp,0xc
c000944e:	c3                   	ret    
c000944f:	90                   	nop

c0009450 <ReservedFilename::~ReservedFilename()>:
c0009450:	83 ec 0c             	sub    esp,0xc
c0009453:	ba d8 0f 02 c0       	mov    edx,0xc0020fd8
c0009458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000945c:	89 10                	mov    DWORD PTR [eax],edx
c000945e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009462:	83 ec 0c             	sub    esp,0xc
c0009465:	50                   	push   eax
c0009466:	e8 21 ff ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000946b:	83 c4 10             	add    esp,0x10
c000946e:	90                   	nop
c000946f:	83 c4 0c             	add    esp,0xc
c0009472:	c3                   	ret    
c0009473:	90                   	nop

c0009474 <ReservedFilename::~ReservedFilename()>:
c0009474:	83 ec 0c             	sub    esp,0xc
c0009477:	83 ec 0c             	sub    esp,0xc
c000947a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000947e:	e8 cd ff ff ff       	call   c0009450 <ReservedFilename::~ReservedFilename()>
c0009483:	83 c4 10             	add    esp,0x10
c0009486:	83 ec 08             	sub    esp,0x8
c0009489:	6a 0c                	push   0xc
c000948b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000948f:	e8 78 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0009494:	83 c4 10             	add    esp,0x10
c0009497:	83 c4 0c             	add    esp,0xc
c000949a:	c3                   	ret    

c000949b <KeGetFileFromDescriptor(int)>:
c000949b:	53                   	push   ebx
c000949c:	83 ec 08             	sub    esp,0x8
c000949f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094a3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094a9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094af:	7f 2c                	jg     c00094dd <KeGetFileFromDescriptor(int)+0x42>
c00094b1:	83 ec 0c             	sub    esp,0xc
c00094b4:	68 98 6f 02 c0       	push   0xc0026f98
c00094b9:	e8 ae 66 01 00       	call   c001fb6c <LinkedList<UnixFile>::getFirstElement()>
c00094be:	83 c4 10             	add    esp,0x10
c00094c1:	85 c0                	test   eax,eax
c00094c3:	75 04                	jne    c00094c9 <KeGetFileFromDescriptor(int)+0x2e>
c00094c5:	31 c0                	xor    eax,eax
c00094c7:	eb 6e                	jmp    c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094c9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094cc:	74 69                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094ce:	52                   	push   edx
c00094cf:	52                   	push   edx
c00094d0:	50                   	push   eax
c00094d1:	68 98 6f 02 c0       	push   0xc0026f98
c00094d6:	e8 3b 67 01 00       	call   c001fc16 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094db:	eb e1                	jmp    c00094be <KeGetFileFromDescriptor(int)+0x23>
c00094dd:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00094e3:	a1 8c 6f 02 c0       	mov    eax,ds:0xc0026f8c
c00094e8:	74 4d                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094ea:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00094f0:	a1 90 6f 02 c0       	mov    eax,ds:0xc0026f90
c00094f5:	74 40                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094f7:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00094fd:	a1 88 6f 02 c0       	mov    eax,ds:0xc0026f88
c0009502:	74 33                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009504:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000950a:	a1 84 6f 02 c0       	mov    eax,ds:0xc0026f84
c000950f:	74 26                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009511:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009517:	83 f8 08             	cmp    eax,0x8
c000951a:	77 09                	ja     c0009525 <KeGetFileFromDescriptor(int)+0x8a>
c000951c:	8b 04 85 60 6f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd90a0]
c0009523:	eb 12                	jmp    c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009525:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000952b:	83 fb 08             	cmp    ebx,0x8
c000952e:	77 95                	ja     c00094c5 <KeGetFileFromDescriptor(int)+0x2a>
c0009530:	8b 04 9d 20 6f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd90e0]
c0009537:	83 c4 08             	add    esp,0x8
c000953a:	5b                   	pop    ebx
c000953b:	c3                   	ret    

c000953c <__static_initialization_and_destruction_0(int, int)>:
c000953c:	83 ec 0c             	sub    esp,0xc
c000953f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009544:	75 34                	jne    c000957a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009546:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000954e:	75 2a                	jne    c000957a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009550:	83 ec 0c             	sub    esp,0xc
c0009553:	68 98 6f 02 c0       	push   0xc0026f98
c0009558:	e8 f9 64 01 00       	call   c001fa56 <LinkedList<UnixFile>::LinkedList()>
c000955d:	83 c4 10             	add    esp,0x10
c0009560:	83 ec 04             	sub    esp,0x4
c0009563:	68 90 36 02 c0       	push   0xc0023690
c0009568:	68 98 6f 02 c0       	push   0xc0026f98
c000956d:	68 54 fa 01 c0       	push   0xc001fa54
c0009572:	e8 45 12 00 00       	call   c000a7bc <__cxa_atexit>
c0009577:	83 c4 10             	add    esp,0x10
c000957a:	90                   	nop
c000957b:	83 c4 0c             	add    esp,0xc
c000957e:	c3                   	ret    

c000957f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000957f:	83 ec 0c             	sub    esp,0xc
c0009582:	83 ec 08             	sub    esp,0x8
c0009585:	68 ff ff 00 00       	push   0xffff
c000958a:	6a 01                	push   0x1
c000958c:	e8 ab ff ff ff       	call   c000953c <__static_initialization_and_destruction_0(int, int)>
c0009591:	83 c4 10             	add    esp,0x10
c0009594:	83 c4 0c             	add    esp,0xc
c0009597:	c3                   	ret    

c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0009598:	53                   	push   ebx
c0009599:	8b 15 08 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023708
c000959f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095a7:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095ad:	89 d8                	mov    eax,ebx
c00095af:	d1 e8                	shr    eax,1
c00095b1:	01 d0                	add    eax,edx
c00095b3:	80 e3 01             	and    bl,0x1
c00095b6:	8a 10                	mov    dl,BYTE PTR [eax]
c00095b8:	75 09                	jne    c00095c3 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095ba:	83 e2 f0             	and    edx,0xfffffff0
c00095bd:	09 ca                	or     edx,ecx
c00095bf:	88 10                	mov    BYTE PTR [eax],dl
c00095c1:	5b                   	pop    ebx
c00095c2:	c3                   	ret    
c00095c3:	0f b6 c9             	movzx  ecx,cl
c00095c6:	83 e2 0f             	and    edx,0xf
c00095c9:	c1 e1 04             	shl    ecx,0x4
c00095cc:	09 ca                	or     edx,ecx
c00095ce:	88 10                	mov    BYTE PTR [eax],dl
c00095d0:	5b                   	pop    ebx
c00095d1:	c3                   	ret    

c00095d2 <Virt::getPageState(unsigned long)>:
c00095d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095d6:	8b 0d 08 37 02 c0    	mov    ecx,DWORD PTR ds:0xc0023708
c00095dc:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095e2:	89 d0                	mov    eax,edx
c00095e4:	d1 e8                	shr    eax,1
c00095e6:	80 e2 01             	and    dl,0x1
c00095e9:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00095ec:	74 03                	je     c00095f1 <Virt::getPageState(unsigned long)+0x1f>
c00095ee:	c1 e8 04             	shr    eax,0x4
c00095f1:	83 e0 0f             	and    eax,0xf
c00095f4:	c3                   	ret    

c00095f5 <Virt::allocateKernelVirtualPages(int)>:
c00095f5:	55                   	push   ebp
c00095f6:	57                   	push   edi
c00095f7:	56                   	push   esi
c00095f8:	31 f6                	xor    esi,esi
c00095fa:	53                   	push   ebx
c00095fb:	31 db                	xor    ebx,ebx
c00095fd:	83 ec 1c             	sub    esp,0x1c
c0009600:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0009605:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009609:	8b 2d 04 37 02 c0    	mov    ebp,DWORD PTR ds:0xc0023704
c000960f:	55                   	push   ebp
c0009610:	e8 bd ff ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c0009615:	5a                   	pop    edx
c0009616:	84 c0                	test   al,al
c0009618:	75 3d                	jne    c0009657 <Virt::allocateKernelVirtualPages(int)+0x62>
c000961a:	85 db                	test   ebx,ebx
c000961c:	0f 44 f5             	cmove  esi,ebp
c000961f:	83 c3 01             	add    ebx,0x1
c0009622:	39 fb                	cmp    ebx,edi
c0009624:	74 5e                	je     c0009684 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0009626:	83 c5 01             	add    ebp,0x1
c0009629:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c000962f:	76 33                	jbe    c0009664 <Virt::allocateKernelVirtualPages(int)+0x6f>
c0009631:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0009636:	c7 05 04 37 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023704,0xc8000
c0009640:	75 2a                	jne    c000966c <Virt::allocateKernelVirtualPages(int)+0x77>
c0009642:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0009647:	bd 00 80 0c 00       	mov    ebp,0xc8000
c000964c:	55                   	push   ebp
c000964d:	e8 80 ff ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c0009652:	5a                   	pop    edx
c0009653:	84 c0                	test   al,al
c0009655:	74 c3                	je     c000961a <Virt::allocateKernelVirtualPages(int)+0x25>
c0009657:	83 c5 01             	add    ebp,0x1
c000965a:	31 db                	xor    ebx,ebx
c000965c:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0009662:	77 cd                	ja     c0009631 <Virt::allocateKernelVirtualPages(int)+0x3c>
c0009664:	89 2d 04 37 02 c0    	mov    DWORD PTR ds:0xc0023704,ebp
c000966a:	eb a3                	jmp    c000960f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000966c:	83 ec 0c             	sub    esp,0xc
c000966f:	68 ec 0f 02 c0       	push   0xc0020fec
c0009674:	e8 92 7f 00 00       	call   c001160b <KePanic(char const*)>
c0009679:	8b 2d 04 37 02 c0    	mov    ebp,DWORD PTR ds:0xc0023704
c000967f:	83 c4 10             	add    esp,0x10
c0009682:	eb 8b                	jmp    c000960f <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009684:	89 35 04 37 02 c0    	mov    DWORD PTR ds:0xc0023704,esi
c000968a:	83 fb 01             	cmp    ebx,0x1
c000968d:	74 63                	je     c00096f2 <Virt::allocateKernelVirtualPages(int)+0xfd>
c000968f:	85 ff                	test   edi,edi
c0009691:	74 41                	je     c00096d4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c0009693:	89 f0                	mov    eax,esi
c0009695:	31 db                	xor    ebx,ebx
c0009697:	8d 6f ff             	lea    ebp,[edi-0x1]
c000969a:	eb 16                	jmp    c00096b2 <Virt::allocateKernelVirtualPages(int)+0xbd>
c000969c:	6a 01                	push   0x1
c000969e:	83 c3 01             	add    ebx,0x1
c00096a1:	50                   	push   eax
c00096a2:	e8 f1 fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096a7:	39 fb                	cmp    ebx,edi
c00096a9:	58                   	pop    eax
c00096aa:	5a                   	pop    edx
c00096ab:	74 27                	je     c00096d4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00096ad:	a1 04 37 02 c0       	mov    eax,ds:0xc0023704
c00096b2:	8d 50 01             	lea    edx,[eax+0x1]
c00096b5:	85 db                	test   ebx,ebx
c00096b7:	89 15 04 37 02 c0    	mov    DWORD PTR ds:0xc0023704,edx
c00096bd:	74 22                	je     c00096e1 <Virt::allocateKernelVirtualPages(int)+0xec>
c00096bf:	39 dd                	cmp    ebp,ebx
c00096c1:	75 d9                	jne    c000969c <Virt::allocateKernelVirtualPages(int)+0xa7>
c00096c3:	6a 03                	push   0x3
c00096c5:	83 c3 01             	add    ebx,0x1
c00096c8:	50                   	push   eax
c00096c9:	e8 ca fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ce:	39 fb                	cmp    ebx,edi
c00096d0:	59                   	pop    ecx
c00096d1:	58                   	pop    eax
c00096d2:	75 d9                	jne    c00096ad <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096d4:	83 c4 1c             	add    esp,0x1c
c00096d7:	89 f0                	mov    eax,esi
c00096d9:	5b                   	pop    ebx
c00096da:	c1 e0 0c             	shl    eax,0xc
c00096dd:	5e                   	pop    esi
c00096de:	5f                   	pop    edi
c00096df:	5d                   	pop    ebp
c00096e0:	c3                   	ret    
c00096e1:	6a 02                	push   0x2
c00096e3:	bb 01 00 00 00       	mov    ebx,0x1
c00096e8:	50                   	push   eax
c00096e9:	e8 aa fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ee:	58                   	pop    eax
c00096ef:	5a                   	pop    edx
c00096f0:	eb bb                	jmp    c00096ad <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096f2:	6a 04                	push   0x4
c00096f4:	56                   	push   esi
c00096f5:	8d 46 01             	lea    eax,[esi+0x1]
c00096f8:	a3 04 37 02 c0       	mov    ds:0xc0023704,eax
c00096fd:	e8 96 fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009702:	89 f0                	mov    eax,esi
c0009704:	59                   	pop    ecx
c0009705:	c1 e0 0c             	shl    eax,0xc
c0009708:	5b                   	pop    ebx
c0009709:	83 c4 1c             	add    esp,0x1c
c000970c:	5b                   	pop    ebx
c000970d:	5e                   	pop    esi
c000970e:	5f                   	pop    edi
c000970f:	5d                   	pop    ebp
c0009710:	c3                   	ret    

c0009711 <Virt::freeSwapfilePage(unsigned long)>:
c0009711:	53                   	push   ebx
c0009712:	8b 15 ac 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fac
c0009718:	b8 01 00 00 00       	mov    eax,0x1
c000971d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009721:	d3 e0                	shl    eax,cl
c0009723:	89 cb                	mov    ebx,ecx
c0009725:	c1 eb 05             	shr    ebx,0x5
c0009728:	f7 d0                	not    eax
c000972a:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000972d:	21 c1                	and    ecx,eax
c000972f:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009732:	5b                   	pop    ebx
c0009733:	c3                   	ret    

c0009734 <Virt::swapIDToSector(unsigned long)>:
c0009734:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009738:	8b 15 0c 37 02 c0    	mov    edx,DWORD PTR ds:0xc002370c
c000973e:	8b 0d 14 37 02 c0    	mov    ecx,DWORD PTR ds:0xc0023714
c0009744:	0f af c2             	imul   eax,edx
c0009747:	01 c8                	add    eax,ecx
c0009749:	c3                   	ret    

c000974a <Virt::allocateSwapfilePage()>:
c000974a:	55                   	push   ebp
c000974b:	31 d2                	xor    edx,edx
c000974d:	57                   	push   edi
c000974e:	56                   	push   esi
c000974f:	53                   	push   ebx
c0009750:	83 ec 0c             	sub    esp,0xc
c0009753:	8b 1d 10 37 02 c0    	mov    ebx,DWORD PTR ds:0xc0023710
c0009759:	8b 0d 0c 37 02 c0    	mov    ecx,DWORD PTR ds:0xc002370c
c000975f:	89 d8                	mov    eax,ebx
c0009761:	f7 f1                	div    ecx
c0009763:	39 cb                	cmp    ebx,ecx
c0009765:	72 2f                	jb     c0009796 <Virt::allocateSwapfilePage()+0x4c>
c0009767:	8b 35 ac 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fac
c000976d:	8b 16                	mov    edx,DWORD PTR [esi]
c000976f:	f6 c2 01             	test   dl,0x1
c0009772:	74 3e                	je     c00097b2 <Virt::allocateSwapfilePage()+0x68>
c0009774:	31 c9                	xor    ecx,ecx
c0009776:	bf 01 00 00 00       	mov    edi,0x1
c000977b:	eb 12                	jmp    c000978f <Virt::allocateSwapfilePage()+0x45>
c000977d:	89 ca                	mov    edx,ecx
c000977f:	89 fd                	mov    ebp,edi
c0009781:	c1 ea 05             	shr    edx,0x5
c0009784:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009787:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009789:	d3 e5                	shl    ebp,cl
c000978b:	85 ea                	test   edx,ebp
c000978d:	74 2c                	je     c00097bb <Virt::allocateSwapfilePage()+0x71>
c000978f:	83 c1 01             	add    ecx,0x1
c0009792:	39 c8                	cmp    eax,ecx
c0009794:	77 e7                	ja     c000977d <Virt::allocateSwapfilePage()+0x33>
c0009796:	83 ec 0c             	sub    esp,0xc
c0009799:	68 80 12 02 c0       	push   0xc0021280
c000979e:	e8 68 7e 00 00       	call   c001160b <KePanic(char const*)>
c00097a3:	83 c4 10             	add    esp,0x10
c00097a6:	31 c9                	xor    ecx,ecx
c00097a8:	83 c4 0c             	add    esp,0xc
c00097ab:	89 c8                	mov    eax,ecx
c00097ad:	5b                   	pop    ebx
c00097ae:	5e                   	pop    esi
c00097af:	5f                   	pop    edi
c00097b0:	5d                   	pop    ebp
c00097b1:	c3                   	ret    
c00097b2:	89 f3                	mov    ebx,esi
c00097b4:	bd 01 00 00 00       	mov    ebp,0x1
c00097b9:	31 c9                	xor    ecx,ecx
c00097bb:	09 ea                	or     edx,ebp
c00097bd:	89 c8                	mov    eax,ecx
c00097bf:	89 13                	mov    DWORD PTR [ebx],edx
c00097c1:	83 c4 0c             	add    esp,0xc
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <Virt::virtualMemorySetup()>:
c00097c9:	53                   	push   ebx
c00097ca:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097cf:	6a 0f                	push   0xf
c00097d1:	53                   	push   ebx
c00097d2:	83 c3 01             	add    ebx,0x1
c00097d5:	e8 be fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097da:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097e0:	58                   	pop    eax
c00097e1:	5a                   	pop    edx
c00097e2:	75 eb                	jne    c00097cf <Virt::virtualMemorySetup()+0x6>
c00097e4:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097e9:	6a 00                	push   0x0
c00097eb:	53                   	push   ebx
c00097ec:	83 c3 01             	add    ebx,0x1
c00097ef:	e8 a4 fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097f4:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097fa:	59                   	pop    ecx
c00097fb:	58                   	pop    eax
c00097fc:	75 eb                	jne    c00097e9 <Virt::virtualMemorySetup()+0x20>
c00097fe:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009803:	6a 0f                	push   0xf
c0009805:	53                   	push   ebx
c0009806:	83 c3 01             	add    ebx,0x1
c0009809:	e8 8a fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000980e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009814:	58                   	pop    eax
c0009815:	5a                   	pop    edx
c0009816:	75 eb                	jne    c0009803 <Virt::virtualMemorySetup()+0x3a>
c0009818:	5b                   	pop    ebx
c0009819:	c3                   	ret    

c000981a <Virt::setupPageSwapping(int)>:
c000981a:	53                   	push   ebx
c000981b:	83 ec 0c             	sub    esp,0xc
c000981e:	a1 88 b8 02 c0       	mov    eax,ds:0xc002b888
c0009823:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009827:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000982d:	8b 10                	mov    edx,DWORD PTR [eax]
c000982f:	53                   	push   ebx
c0009830:	68 97 12 02 c0       	push   0xc0021297
c0009835:	50                   	push   eax
c0009836:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0009839:	c1 e3 0b             	shl    ebx,0xb
c000983c:	89 1d 10 37 02 c0    	mov    DWORD PTR ds:0xc0023710,ebx
c0009842:	c1 eb 08             	shr    ebx,0x8
c0009845:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009848:	c6 05 18 37 02 c0 43 	mov    BYTE PTR ds:0xc0023718,0x43
c000984f:	c7 05 0c 37 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002370c,0x8
c0009859:	a3 14 37 02 c0       	mov    ds:0xc0023714,eax
c000985e:	e8 70 e2 ff ff       	call   c0007ad3 <malloc>
c0009863:	31 d2                	xor    edx,edx
c0009865:	83 c4 0c             	add    esp,0xc
c0009868:	a3 ac 6f 02 c0       	mov    ds:0xc0026fac,eax
c000986d:	89 c1                	mov    ecx,eax
c000986f:	a1 10 37 02 c0       	mov    eax,ds:0xc0023710
c0009874:	f7 35 0c 37 02 c0    	div    DWORD PTR ds:0xc002370c
c000987a:	c1 e8 05             	shr    eax,0x5
c000987d:	50                   	push   eax
c000987e:	6a 00                	push   0x0
c0009880:	51                   	push   ecx
c0009881:	e8 6a 6c ff ff       	call   c00004f0 <memset>
c0009886:	83 c4 18             	add    esp,0x18
c0009889:	5b                   	pop    ebx
c000988a:	c3                   	ret    
c000988b:	90                   	nop

c000988c <VAS::setCPUSpecific(unsigned long)>:
c000988c:	c3                   	ret    
c000988d:	90                   	nop

c000988e <VAS::VAS(VAS*)>:
c000988e:	83 ec 0c             	sub    esp,0xc
c0009891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009895:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000989c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098a0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098a7:	83 ec 0c             	sub    esp,0xc
c00098aa:	68 0c 10 02 c0       	push   0xc002100c
c00098af:	e8 57 7d 00 00       	call   c001160b <KePanic(char const*)>
c00098b4:	83 c4 10             	add    esp,0x10
c00098b7:	90                   	nop
c00098b8:	83 c4 0c             	add    esp,0xc
c00098bb:	c3                   	ret    

c00098bc <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098c0:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098c5:	89 c2                	mov    edx,eax
c00098c7:	c1 ea 16             	shr    edx,0x16
c00098ca:	c1 e8 0a             	shr    eax,0xa
c00098cd:	83 f9 01             	cmp    ecx,0x1
c00098d0:	19 c9                	sbb    ecx,ecx
c00098d2:	25 fc 0f 00 00       	and    eax,0xffc
c00098d7:	c1 e2 0c             	shl    edx,0xc
c00098da:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098e0:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00098e7:	01 d0                	add    eax,edx
c00098e9:	c3                   	ret    

c00098ea <VAS::getPageTableEntry(unsigned long)>:
c00098ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00098ee:	89 ca                	mov    edx,ecx
c00098f0:	c1 ea 16             	shr    edx,0x16
c00098f3:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00098f9:	c1 e9 0a             	shr    ecx,0xa
c00098fc:	c1 e0 0c             	shl    eax,0xc
c00098ff:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009905:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009908:	c3                   	ret    

c0009909 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009909:	55                   	push   ebp
c000990a:	57                   	push   edi
c000990b:	bf 01 00 00 00       	mov    edi,0x1
c0009910:	56                   	push   esi
c0009911:	53                   	push   ebx
c0009912:	83 ec 1c             	sub    esp,0x1c
c0009915:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009919:	c1 ee 0c             	shr    esi,0xc
c000991c:	eb 48                	jmp    c0009966 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c000991e:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c0009923:	83 ec 08             	sub    esp,0x8
c0009926:	55                   	push   ebp
c0009927:	50                   	push   eax
c0009928:	e8 bd ff ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000992d:	83 c4 10             	add    esp,0x10
c0009930:	8b 10                	mov    edx,DWORD PTR [eax]
c0009932:	f6 c6 04             	test   dh,0x4
c0009935:	75 70                	jne    c00099a7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009937:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000993d:	83 fb 04             	cmp    ebx,0x4
c0009940:	0f 84 8a 00 00 00    	je     c00099d0 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009946:	83 fb 02             	cmp    ebx,0x2
c0009949:	0f 84 9a 00 00 00    	je     c00099e9 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c000994f:	83 fb 03             	cmp    ebx,0x3
c0009952:	0f 84 be 00 00 00    	je     c0009a16 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0009958:	83 fb 01             	cmp    ebx,0x1
c000995b:	0f 84 a2 00 00 00    	je     c0009a03 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009961:	83 c6 01             	add    esi,0x1
c0009964:	31 ff                	xor    edi,edi
c0009966:	56                   	push   esi
c0009967:	89 f5                	mov    ebp,esi
c0009969:	e8 64 fc ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c000996e:	c1 e5 0c             	shl    ebp,0xc
c0009971:	5a                   	pop    edx
c0009972:	0f b6 d8             	movzx  ebx,al
c0009975:	85 db                	test   ebx,ebx
c0009977:	75 a5                	jne    c000991e <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0009979:	83 ec 0c             	sub    esp,0xc
c000997c:	68 ae 12 02 c0       	push   0xc00212ae
c0009981:	e8 85 7c 00 00       	call   c001160b <KePanic(char const*)>
c0009986:	5a                   	pop    edx
c0009987:	59                   	pop    ecx
c0009988:	55                   	push   ebp
c0009989:	8b 2d b0 6f 02 c0    	mov    ebp,DWORD PTR ds:0xc0026fb0
c000998f:	55                   	push   ebp
c0009990:	e8 55 ff ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009995:	83 c4 10             	add    esp,0x10
c0009998:	8b 10                	mov    edx,DWORD PTR [eax]
c000999a:	f6 c6 04             	test   dh,0x4
c000999d:	75 08                	jne    c00099a7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c000999f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099a5:	eb ba                	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099ab:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099b1:	83 ec 0c             	sub    esp,0xc
c00099b4:	52                   	push   edx
c00099b5:	e8 bf e3 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c00099ba:	83 c4 10             	add    esp,0x10
c00099bd:	83 fb 04             	cmp    ebx,0x4
c00099c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099c4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ca:	0f 85 76 ff ff ff    	jne    c0009946 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099d0:	83 e7 01             	and    edi,0x1
c00099d3:	75 46                	jne    c0009a1b <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099d5:	c7 44 24 30 30 10 02 c0 	mov    DWORD PTR [esp+0x30],0xc0021030
c00099dd:	83 c4 1c             	add    esp,0x1c
c00099e0:	5b                   	pop    ebx
c00099e1:	5e                   	pop    esi
c00099e2:	5f                   	pop    edi
c00099e3:	5d                   	pop    ebp
c00099e4:	e9 22 7c 00 00       	jmp    c001160b <KePanic(char const*)>
c00099e9:	83 e7 01             	and    edi,0x1
c00099ec:	75 15                	jne    c0009a03 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00099ee:	83 ec 0c             	sub    esp,0xc
c00099f1:	68 ca 12 02 c0       	push   0xc00212ca
c00099f6:	e8 10 7c 00 00       	call   c001160b <KePanic(char const*)>
c00099fb:	83 c4 10             	add    esp,0x10
c00099fe:	e9 5e ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a03:	83 ec 08             	sub    esp,0x8
c0009a06:	6a 00                	push   0x0
c0009a08:	56                   	push   esi
c0009a09:	e8 8a fb ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a0e:	83 c4 10             	add    esp,0x10
c0009a11:	e9 4b ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a16:	83 e7 01             	and    edi,0x1
c0009a19:	75 16                	jne    c0009a31 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a1b:	83 ec 08             	sub    esp,0x8
c0009a1e:	6a 00                	push   0x0
c0009a20:	56                   	push   esi
c0009a21:	e8 72 fb ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a26:	83 c4 10             	add    esp,0x10
c0009a29:	83 c4 1c             	add    esp,0x1c
c0009a2c:	5b                   	pop    ebx
c0009a2d:	5e                   	pop    esi
c0009a2e:	5f                   	pop    edi
c0009a2f:	5d                   	pop    ebp
c0009a30:	c3                   	ret    
c0009a31:	c7 44 24 30 e6 12 02 c0 	mov    DWORD PTR [esp+0x30],0xc00212e6
c0009a39:	83 c4 1c             	add    esp,0x1c
c0009a3c:	5b                   	pop    ebx
c0009a3d:	5e                   	pop    esi
c0009a3e:	5f                   	pop    edi
c0009a3f:	5d                   	pop    ebp
c0009a40:	e9 c6 7b 00 00       	jmp    c001160b <KePanic(char const*)>
c0009a45:	90                   	nop

c0009a46 <VAS::freeAllocatedPages(unsigned long)>:
c0009a46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a4a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a4e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a52:	74 09                	je     c0009a5d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a54:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a58:	e9 ac fe ff ff       	jmp    c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a5d:	c7 44 24 04 54 10 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021054
c0009a65:	e9 a0 0e 00 00       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>

c0009a6a <VAS::virtualToPhysical(unsigned long)>:
c0009a6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a6e:	50                   	push   eax
c0009a6f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a73:	52                   	push   edx
c0009a74:	e8 71 fe ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009a79:	59                   	pop    ecx
c0009a7a:	5a                   	pop    edx
c0009a7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a7d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a82:	c3                   	ret    
c0009a83:	90                   	nop

c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009a84:	55                   	push   ebp
c0009a85:	57                   	push   edi
c0009a86:	56                   	push   esi
c0009a87:	53                   	push   ebx
c0009a88:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a8c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009a90:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009a94:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009a98:	85 db                	test   ebx,ebx
c0009a9a:	7e 24                	jle    c0009ac0 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009a9c:	c1 e3 0c             	shl    ebx,0xc
c0009a9f:	01 f3                	add    ebx,esi
c0009aa1:	56                   	push   esi
c0009aa2:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aa8:	55                   	push   ebp
c0009aa9:	e8 3c fe ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009aae:	5a                   	pop    edx
c0009aaf:	59                   	pop    ecx
c0009ab0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ab2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ab6:	21 f9                	and    ecx,edi
c0009ab8:	09 d1                	or     ecx,edx
c0009aba:	39 f3                	cmp    ebx,esi
c0009abc:	89 08                	mov    DWORD PTR [eax],ecx
c0009abe:	75 e1                	jne    c0009aa1 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ac0:	5b                   	pop    ebx
c0009ac1:	5e                   	pop    esi
c0009ac2:	5f                   	pop    edi
c0009ac3:	5d                   	pop    ebp
c0009ac4:	c3                   	ret    
c0009ac5:	90                   	nop

c0009ac6 <VAS::VAS()>:
c0009ac6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ad1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ad5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009adc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae0:	a3 b0 6f 02 c0       	mov    ds:0xc0026fb0,eax
c0009ae5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae9:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009aed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af1:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009af4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af8:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009aff:	ba 7d 50 02 c0       	mov    edx,0xc002507d
c0009b04:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b09:	29 c2                	sub    edx,eax
c0009b0b:	89 d0                	mov    eax,edx
c0009b0d:	05 ff 0f 00 00       	add    eax,0xfff
c0009b12:	c1 e8 0c             	shr    eax,0xc
c0009b15:	89 c2                	mov    edx,eax
c0009b17:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b1c:	6a 04                	push   0x4
c0009b1e:	6a ff                	push   0xffffffff
c0009b20:	52                   	push   edx
c0009b21:	50                   	push   eax
c0009b22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b26:	e8 59 ff ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b2b:	83 c4 14             	add    esp,0x14
c0009b2e:	90                   	nop
c0009b2f:	c3                   	ret    

c0009b30 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b30:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009b35:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b3b:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b42:	75 01                	jne    c0009b45 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b44:	c3                   	ret    
c0009b45:	68 80 00 00 00       	push   0x80
c0009b4a:	6a ff                	push   0xffffffff
c0009b4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b50:	50                   	push   eax
c0009b51:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b55:	52                   	push   edx
c0009b56:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b5a:	51                   	push   ecx
c0009b5b:	e8 24 ff ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b60:	83 c4 14             	add    esp,0x14
c0009b63:	c3                   	ret    

c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b68:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b6f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b72:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b77:	83 f8 01             	cmp    eax,0x1
c0009b7a:	19 c0                	sbb    eax,eax
c0009b7c:	83 ca 03             	or     edx,0x3
c0009b7f:	83 e0 fc             	and    eax,0xfffffffc
c0009b82:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009b89:	0f 20 d8             	mov    eax,cr3
c0009b8c:	0f 22 d8             	mov    cr3,eax
c0009b8f:	c3                   	ret    

c0009b90 <VAS::~VAS()>:
c0009b90:	83 ec 2c             	sub    esp,0x2c
c0009b93:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009b9b:	fa                   	cli    
c0009b9c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009ba1:	83 c0 01             	add    eax,0x1
c0009ba4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009ba9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bae:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bb0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bb3:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bb9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bbd:	6a 01                	push   0x1
c0009bbf:	50                   	push   eax
c0009bc0:	e8 9f ff ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c0009bc5:	83 c4 0c             	add    esp,0xc
c0009bc8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bd0:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bd8:	0f 8f d8 00 00 00    	jg     c0009cb6 <VAS::~VAS()+0x126>
c0009bde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009be2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009be5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009be9:	c1 e2 02             	shl    edx,0x2
c0009bec:	01 d0                	add    eax,edx
c0009bee:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bf0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bf8:	83 e0 01             	and    eax,0x1
c0009bfb:	0f 84 ab 00 00 00    	je     c0009cac <VAS::~VAS()+0x11c>
c0009c01:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c09:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c11:	7f 74                	jg     c0009c87 <VAS::~VAS()+0xf7>
c0009c13:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c17:	c1 e0 0a             	shl    eax,0xa
c0009c1a:	89 c2                	mov    edx,eax
c0009c1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c20:	01 d0                	add    eax,edx
c0009c22:	c1 e0 0c             	shl    eax,0xc
c0009c25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c29:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c30:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c33:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c3d:	6a 01                	push   0x1
c0009c3f:	50                   	push   eax
c0009c40:	e8 77 fc ff ff       	call   c00098bc <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c45:	83 c4 0c             	add    esp,0xc
c0009c48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c5a:	25 01 04 00 00       	and    eax,0x401
c0009c5f:	3d 01 04 00 00       	cmp    eax,0x401
c0009c64:	75 1a                	jne    c0009c80 <VAS::~VAS()+0xf0>
c0009c66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c6a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c6f:	83 ec 0c             	sub    esp,0xc
c0009c72:	50                   	push   eax
c0009c73:	e8 01 e1 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009c78:	83 c4 10             	add    esp,0x10
c0009c7b:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c80:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009c85:	eb 82                	jmp    c0009c09 <VAS::~VAS()+0x79>
c0009c87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c8b:	25 00 04 00 00       	and    eax,0x400
c0009c90:	74 1a                	je     c0009cac <VAS::~VAS()+0x11c>
c0009c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c96:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c9b:	83 ec 0c             	sub    esp,0xc
c0009c9e:	50                   	push   eax
c0009c9f:	e8 d5 e0 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009ca4:	83 c4 10             	add    esp,0x10
c0009ca7:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cac:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cb1:	e9 1a ff ff ff       	jmp    c0009bd0 <VAS::~VAS()+0x40>
c0009cb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cbd:	83 ec 0c             	sub    esp,0xc
c0009cc0:	50                   	push   eax
c0009cc1:	e8 43 fc ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ccd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cd0:	83 ec 0c             	sub    esp,0xc
c0009cd3:	50                   	push   eax
c0009cd4:	e8 a0 e0 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009cd9:	83 c4 10             	add    esp,0x10
c0009cdc:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ce1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009ce6:	83 e8 01             	sub    eax,0x1
c0009ce9:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009cee:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009cf3:	85 c0                	test   eax,eax
c0009cf5:	75 01                	jne    c0009cf8 <VAS::~VAS()+0x168>
c0009cf7:	fb                   	sti    
c0009cf8:	90                   	nop
c0009cf9:	83 c4 2c             	add    esp,0x2c
c0009cfc:	c3                   	ret    
c0009cfd:	90                   	nop

c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009cfe:	55                   	push   ebp
c0009cff:	57                   	push   edi
c0009d00:	56                   	push   esi
c0009d01:	53                   	push   ebx
c0009d02:	83 ec 1c             	sub    esp,0x1c
c0009d05:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d09:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009d0d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009d11:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d17:	77 08                	ja     c0009d21 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c0009d19:	0f 20 d8             	mov    eax,cr3
c0009d1c:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0009d1f:	75 43                	jne    c0009d64 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0009d21:	89 d8                	mov    eax,ebx
c0009d23:	09 f8                	or     eax,edi
c0009d25:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d2a:	75 53                	jne    c0009d7f <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c0009d2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009d2f:	89 de                	mov    esi,ebx
c0009d31:	c1 ee 16             	shr    esi,0x16
c0009d34:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d3b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d3f:	74 50                	je     c0009d91 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c0009d41:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d45:	c1 eb 0a             	shr    ebx,0xa
c0009d48:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d4e:	c1 e6 0c             	shl    esi,0xc
c0009d51:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d57:	09 c7                	or     edi,eax
c0009d59:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0009d5c:	83 c4 1c             	add    esp,0x1c
c0009d5f:	5b                   	pop    ebx
c0009d60:	5e                   	pop    esi
c0009d61:	5f                   	pop    edi
c0009d62:	5d                   	pop    ebp
c0009d63:	c3                   	ret    
c0009d64:	83 ec 0c             	sub    esp,0xc
c0009d67:	68 78 10 02 c0       	push   0xc0021078
c0009d6c:	e8 99 0b 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0009d71:	89 d8                	mov    eax,ebx
c0009d73:	83 c4 10             	add    esp,0x10
c0009d76:	09 f8                	or     eax,edi
c0009d78:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d7d:	74 ad                	je     c0009d2c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d7f:	83 ec 0c             	sub    esp,0xc
c0009d82:	68 e0 10 02 c0       	push   0xc00210e0
c0009d87:	e8 7f 78 00 00       	call   c001160b <KePanic(char const*)>
c0009d8c:	83 c4 10             	add    esp,0x10
c0009d8f:	eb 9b                	jmp    c0009d2c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d95:	e8 48 e0 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009d9a:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c0009da0:	83 ec 0c             	sub    esp,0xc
c0009da3:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009dab:	6a 01                	push   0x1
c0009dad:	e8 43 f8 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0009db2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009db9:	6a 01                	push   0x1
c0009dbb:	50                   	push   eax
c0009dbc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009dc0:	52                   	push   edx
c0009dc1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009dc5:	51                   	push   ecx
c0009dc6:	e8 3d 01 00 00       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009dcb:	83 c4 1c             	add    esp,0x1c
c0009dce:	68 00 10 00 00       	push   0x1000
c0009dd3:	6a 00                	push   0x0
c0009dd5:	50                   	push   eax
c0009dd6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dda:	e8 11 67 ff ff       	call   c00004f0 <memset>
c0009ddf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009de3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009de6:	e8 1e fb ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009deb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009def:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009df3:	83 c4 10             	add    esp,0x10
c0009df6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0009df9:	0d 07 04 00 00       	or     eax,0x407
c0009dfe:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0009e01:	e9 3b ff ff ff       	jmp    c0009d41 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c0009e06 <VAS::allocatePages(int, int)>:
c0009e06:	55                   	push   ebp
c0009e07:	57                   	push   edi
c0009e08:	56                   	push   esi
c0009e09:	53                   	push   ebx
c0009e0a:	83 ec 1c             	sub    esp,0x1c
c0009e0d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e11:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e15:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e19:	75 75                	jne    c0009e90 <VAS::allocatePages(int, int)+0x8a>
c0009e1b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e22:	85 c0                	test   eax,eax
c0009e24:	74 49                	je     c0009e6f <VAS::allocatePages(int, int)+0x69>
c0009e26:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e2a:	89 d5                	mov    ebp,edx
c0009e2c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e30:	c1 e5 0c             	shl    ebp,0xc
c0009e33:	01 dd                	add    ebp,ebx
c0009e35:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e38:	81 cf 00 04 00 00    	or     edi,0x400
c0009e3e:	85 d2                	test   edx,edx
c0009e40:	7e 1b                	jle    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009e42:	e8 9b df ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009e47:	57                   	push   edi
c0009e48:	53                   	push   ebx
c0009e49:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e4f:	50                   	push   eax
c0009e50:	56                   	push   esi
c0009e51:	e8 a8 fe ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e56:	83 c4 10             	add    esp,0x10
c0009e59:	39 dd                	cmp    ebp,ebx
c0009e5b:	75 e5                	jne    c0009e42 <VAS::allocatePages(int, int)+0x3c>
c0009e5d:	0f 20 d8             	mov    eax,cr3
c0009e60:	0f 22 d8             	mov    cr3,eax
c0009e63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e67:	83 c4 1c             	add    esp,0x1c
c0009e6a:	5b                   	pop    ebx
c0009e6b:	5e                   	pop    esi
c0009e6c:	5f                   	pop    edi
c0009e6d:	5d                   	pop    ebp
c0009e6e:	c3                   	ret    
c0009e6f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e73:	83 ec 0c             	sub    esp,0xc
c0009e76:	68 04 11 02 c0       	push   0xc0021104
c0009e7b:	e8 8b 77 00 00       	call   c001160b <KePanic(char const*)>
c0009e80:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e83:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009e87:	83 c4 10             	add    esp,0x10
c0009e8a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e8e:	eb 96                	jmp    c0009e26 <VAS::allocatePages(int, int)+0x20>
c0009e90:	83 ec 0c             	sub    esp,0xc
c0009e93:	52                   	push   edx
c0009e94:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009e98:	e8 58 f7 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0009e9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea1:	83 c4 10             	add    esp,0x10
c0009ea4:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ea9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009ead:	77 38                	ja     c0009ee7 <VAS::allocatePages(int, int)+0xe1>
c0009eaf:	85 d2                	test   edx,edx
c0009eb1:	7e aa                	jle    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009eb3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009eb7:	c1 e2 0c             	shl    edx,0xc
c0009eba:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009ebe:	81 cf 00 04 00 00    	or     edi,0x400
c0009ec4:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c0009ec7:	e8 16 df ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009ecc:	57                   	push   edi
c0009ecd:	53                   	push   ebx
c0009ece:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ed4:	50                   	push   eax
c0009ed5:	56                   	push   esi
c0009ed6:	e8 23 fe ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009edb:	83 c4 10             	add    esp,0x10
c0009ede:	39 dd                	cmp    ebp,ebx
c0009ee0:	75 e5                	jne    c0009ec7 <VAS::allocatePages(int, int)+0xc1>
c0009ee2:	e9 76 ff ff ff       	jmp    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009ee7:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009eec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ef2:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009ef9:	74 b4                	je     c0009eaf <VAS::allocatePages(int, int)+0xa9>
c0009efb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009eff:	80 cc 01             	or     ah,0x1
c0009f02:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f06:	eb a7                	jmp    c0009eaf <VAS::allocatePages(int, int)+0xa9>

c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f08:	55                   	push   ebp
c0009f09:	57                   	push   edi
c0009f0a:	56                   	push   esi
c0009f0b:	53                   	push   ebx
c0009f0c:	83 ec 1c             	sub    esp,0x1c
c0009f0f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009f13:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009f17:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009f1b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009f1f:	85 db                	test   ebx,ebx
c0009f21:	7e 2c                	jle    c0009f4f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c0009f23:	c1 e3 0c             	shl    ebx,0xc
c0009f26:	8d 04 33             	lea    eax,[ebx+esi*1]
c0009f29:	89 f3                	mov    ebx,esi
c0009f2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009f2f:	55                   	push   ebp
c0009f30:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0009f34:	29 f2                	sub    edx,esi
c0009f36:	01 da                	add    edx,ebx
c0009f38:	52                   	push   edx
c0009f39:	53                   	push   ebx
c0009f3a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f40:	57                   	push   edi
c0009f41:	e8 b8 fd ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f46:	83 c4 10             	add    esp,0x10
c0009f49:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0009f4d:	75 e0                	jne    c0009f2f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c0009f4f:	0f 20 d8             	mov    eax,cr3
c0009f52:	0f 22 d8             	mov    cr3,eax
c0009f55:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009f59:	83 c4 1c             	add    esp,0x1c
c0009f5c:	5b                   	pop    ebx
c0009f5d:	5e                   	pop    esi
c0009f5e:	5f                   	pop    edi
c0009f5f:	5d                   	pop    ebp
c0009f60:	c3                   	ret    
c0009f61:	90                   	nop

c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f62:	55                   	push   ebp
c0009f63:	57                   	push   edi
c0009f64:	56                   	push   esi
c0009f65:	53                   	push   ebx
c0009f66:	83 ec 1c             	sub    esp,0x1c
c0009f69:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f6d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f71:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009f75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f79:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009f7d:	09 d8                	or     eax,ebx
c0009f7f:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f84:	75 4b                	jne    c0009fd1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f86:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009f89:	89 de                	mov    esi,ebx
c0009f8b:	c1 ee 16             	shr    esi,0x16
c0009f8e:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0009f95:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0009f99:	74 48                	je     c0009fe3 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0009f9b:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0009fa0:	c1 eb 0a             	shr    ebx,0xa
c0009fa3:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0009fa7:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0009fab:	83 ff 01             	cmp    edi,0x1
c0009fae:	19 c0                	sbb    eax,eax
c0009fb0:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009fb6:	c1 e6 0c             	shl    esi,0xc
c0009fb9:	25 00 00 c0 ff       	and    eax,0xffc00000
c0009fbe:	01 f3                	add    ebx,esi
c0009fc0:	09 ca                	or     edx,ecx
c0009fc2:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0009fc9:	83 c4 1c             	add    esp,0x1c
c0009fcc:	5b                   	pop    ebx
c0009fcd:	5e                   	pop    esi
c0009fce:	5f                   	pop    edi
c0009fcf:	5d                   	pop    ebp
c0009fd0:	c3                   	ret    
c0009fd1:	83 ec 0c             	sub    esp,0xc
c0009fd4:	68 30 11 02 c0       	push   0xc0021130
c0009fd9:	e8 2d 76 00 00       	call   c001160b <KePanic(char const*)>
c0009fde:	83 c4 10             	add    esp,0x10
c0009fe1:	eb a3                	jmp    c0009f86 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c0009fe3:	e8 fa dd ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009fe8:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c0009fee:	83 ec 0c             	sub    esp,0xc
c0009ff1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009ff5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0009ff9:	6a 01                	push   0x1
c0009ffb:	e8 f5 f5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a000:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a007:	6a 01                	push   0x1
c000a009:	50                   	push   eax
c000a00a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a00e:	50                   	push   eax
c000a00f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a013:	51                   	push   ecx
c000a014:	e8 ef fe ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a019:	83 c4 1c             	add    esp,0x1c
c000a01c:	68 00 10 00 00       	push   0x1000
c000a021:	6a 00                	push   0x0
c000a023:	50                   	push   eax
c000a024:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a028:	e8 c3 64 ff ff       	call   c00004f0 <memset>
c000a02d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a031:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a034:	e8 d0 f8 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000a039:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a03d:	83 c4 10             	add    esp,0x10
c000a040:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a043:	81 ca 07 04 00 00    	or     edx,0x407
c000a049:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c000a04c:	e9 4a ff ff ff       	jmp    c0009f9b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c000a051:	90                   	nop

c000a052 <VAS::VAS(bool)>:
c000a052:	53                   	push   ebx
c000a053:	83 ec 28             	sub    esp,0x28
c000a056:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a05a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a05e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a062:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a069:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a06d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a078:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a07c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a07f:	e8 5e dd ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a084:	89 c2                	mov    edx,eax
c000a086:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a08d:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000a093:	83 ec 0c             	sub    esp,0xc
c000a096:	6a 01                	push   0x1
c000a098:	e8 58 f5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a09d:	83 c4 10             	add    esp,0x10
c000a0a0:	89 c2                	mov    edx,eax
c000a0a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0a9:	83 ec 0c             	sub    esp,0xc
c000a0ac:	6a 03                	push   0x3
c000a0ae:	6a 01                	push   0x1
c000a0b0:	52                   	push   edx
c000a0b1:	50                   	push   eax
c000a0b2:	53                   	push   ebx
c000a0b3:	e8 50 fe ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0b8:	83 c4 20             	add    esp,0x20
c000a0bb:	89 c2                	mov    edx,eax
c000a0bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0c1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0c4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0cc:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0d4:	7f 1d                	jg     c000a0f3 <VAS::VAS(bool)+0xa1>
c000a0d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0e1:	c1 e2 02             	shl    edx,0x2
c000a0e4:	01 d0                	add    eax,edx
c000a0e6:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a0ec:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a0f1:	eb d9                	jmp    c000a0cc <VAS::VAS(bool)+0x7a>
c000a0f3:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a0fb:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a103:	7f 7e                	jg     c000a183 <VAS::VAS(bool)+0x131>
c000a105:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a109:	2d 00 02 00 00       	sub    eax,0x200
c000a10e:	c1 e0 0c             	shl    eax,0xc
c000a111:	83 c8 05             	or     eax,0x5
c000a114:	89 c2                	mov    edx,eax
c000a116:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a11b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a121:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a127:	83 e0 10             	and    eax,0x10
c000a12a:	0f b6 c0             	movzx  eax,al
c000a12d:	85 c0                	test   eax,eax
c000a12f:	74 07                	je     c000a138 <VAS::VAS(bool)+0xe6>
c000a131:	b8 00 01 00 00       	mov    eax,0x100
c000a136:	eb 05                	jmp    c000a13d <VAS::VAS(bool)+0xeb>
c000a138:	b8 00 00 00 00       	mov    eax,0x0
c000a13d:	09 d0                	or     eax,edx
c000a13f:	89 c1                	mov    ecx,eax
c000a141:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a145:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a148:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a14c:	c1 e2 02             	shl    edx,0x2
c000a14f:	01 d0                	add    eax,edx
c000a151:	89 ca                	mov    edx,ecx
c000a153:	89 10                	mov    DWORD PTR [eax],edx
c000a155:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a159:	2d 40 03 00 00       	sub    eax,0x340
c000a15e:	83 f8 7f             	cmp    eax,0x7f
c000a161:	77 16                	ja     c000a179 <VAS::VAS(bool)+0x127>
c000a163:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a167:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a16a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a16e:	c1 e2 02             	shl    edx,0x2
c000a171:	01 d0                	add    eax,edx
c000a173:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a179:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a17e:	e9 78 ff ff ff       	jmp    c000a0fb <VAS::VAS(bool)+0xa9>
c000a183:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a188:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a18e:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a194:	83 e0 10             	and    eax,0x10
c000a197:	0f b6 c0             	movzx  eax,al
c000a19a:	85 c0                	test   eax,eax
c000a19c:	74 07                	je     c000a1a5 <VAS::VAS(bool)+0x153>
c000a19e:	b8 03 41 00 00       	mov    eax,0x4103
c000a1a3:	eb 05                	jmp    c000a1aa <VAS::VAS(bool)+0x158>
c000a1a5:	b8 03 40 00 00       	mov    eax,0x4003
c000a1aa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1ae:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1b1:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1b7:	89 02                	mov    DWORD PTR [edx],eax
c000a1b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1bd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1c0:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a1c5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1cb:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1d1:	83 e0 10             	and    eax,0x10
c000a1d4:	0f b6 c0             	movzx  eax,al
c000a1d7:	85 c0                	test   eax,eax
c000a1d9:	74 07                	je     c000a1e2 <VAS::VAS(bool)+0x190>
c000a1db:	b8 00 01 00 00       	mov    eax,0x100
c000a1e0:	eb 05                	jmp    c000a1e7 <VAS::VAS(bool)+0x195>
c000a1e2:	b8 00 00 00 00       	mov    eax,0x0
c000a1e7:	09 c2                	or     edx,eax
c000a1e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1ed:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a1f0:	05 fc 0f 00 00       	add    eax,0xffc
c000a1f5:	83 ca 03             	or     edx,0x3
c000a1f8:	89 10                	mov    DWORD PTR [eax],edx
c000a1fa:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a1ff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a205:	83 ec 0c             	sub    esp,0xc
c000a208:	50                   	push   eax
c000a209:	e8 ca 2a 00 00       	call   c000ccd8 <Device::getName()>
c000a20e:	83 c4 10             	add    esp,0x10
c000a211:	83 ec 08             	sub    esp,0x8
c000a214:	68 00 13 02 c0       	push   0xc0021300
c000a219:	50                   	push   eax
c000a21a:	e8 61 65 ff ff       	call   c0000780 <strcmp>
c000a21f:	83 c4 10             	add    esp,0x10
c000a222:	85 c0                	test   eax,eax
c000a224:	0f 94 c0             	sete   al
c000a227:	0f b6 c0             	movzx  eax,al
c000a22a:	85 c0                	test   eax,eax
c000a22c:	74 68                	je     c000a296 <VAS::VAS(bool)+0x244>
c000a22e:	fa                   	cli    
c000a22f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a234:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a23a:	05 7c 09 00 00       	add    eax,0x97c
c000a23f:	83 ec 0c             	sub    esp,0xc
c000a242:	50                   	push   eax
c000a243:	e8 86 d3 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a248:	83 c4 10             	add    esp,0x10
c000a24b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a250:	89 c3                	mov    ebx,eax
c000a252:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a257:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a25d:	05 7c 09 00 00       	add    eax,0x97c
c000a262:	83 ec 0c             	sub    esp,0xc
c000a265:	50                   	push   eax
c000a266:	e8 63 d3 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a26b:	83 c4 10             	add    esp,0x10
c000a26e:	83 ec 08             	sub    esp,0x8
c000a271:	50                   	push   eax
c000a272:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a276:	e8 6f f6 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a27b:	83 c4 10             	add    esp,0x10
c000a27e:	8b 00                	mov    eax,DWORD PTR [eax]
c000a280:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a285:	6a 11                	push   0x11
c000a287:	53                   	push   ebx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28d:	e8 6c fa ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a292:	83 c4 10             	add    esp,0x10
c000a295:	fb                   	sti    
c000a296:	90                   	nop
c000a297:	83 c4 28             	add    esp,0x28
c000a29a:	5b                   	pop    ebx
c000a29b:	c3                   	ret    

c000a29c <VAS::evict(unsigned long)>:
c000a29c:	55                   	push   ebp
c000a29d:	57                   	push   edi
c000a29e:	56                   	push   esi
c000a29f:	53                   	push   ebx
c000a2a0:	83 ec 1c             	sub    esp,0x1c
c000a2a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2a7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2af:	e8 96 f4 ff ff       	call   c000974a <Virt::allocateSwapfilePage()>
c000a2b4:	89 c7                	mov    edi,eax
c000a2b6:	a1 0c 37 02 c0       	mov    eax,ds:0xc002370c
c000a2bb:	85 c0                	test   eax,eax
c000a2bd:	7e 40                	jle    c000a2ff <VAS::evict(unsigned long)+0x63>
c000a2bf:	89 ee                	mov    esi,ebp
c000a2c1:	31 db                	xor    ebx,ebx
c000a2c3:	83 ec 0c             	sub    esp,0xc
c000a2c6:	57                   	push   edi
c000a2c7:	e8 68 f4 ff ff       	call   c0009734 <Virt::swapIDToSector(unsigned long)>
c000a2cc:	31 d2                	xor    edx,edx
c000a2ce:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2d1:	81 c6 00 02 00 00    	add    esi,0x200
c000a2d7:	6a 01                	push   0x1
c000a2d9:	52                   	push   edx
c000a2da:	01 d8                	add    eax,ebx
c000a2dc:	83 c3 01             	add    ebx,0x1
c000a2df:	50                   	push   eax
c000a2e0:	0f be 05 18 37 02 c0 	movsx  eax,BYTE PTR ds:0xc0023718
c000a2e7:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c000a2ee:	50                   	push   eax
c000a2ef:	e8 a6 3b 00 00       	call   c000de9a <LogicalDisk::write(unsigned long long, int, void*)>
c000a2f4:	83 c4 20             	add    esp,0x20
c000a2f7:	39 1d 0c 37 02 c0    	cmp    DWORD PTR ds:0xc002370c,ebx
c000a2fd:	7f c4                	jg     c000a2c3 <VAS::evict(unsigned long)+0x27>
c000a2ff:	c1 e7 0c             	shl    edi,0xc
c000a302:	83 ec 08             	sub    esp,0x8
c000a305:	55                   	push   ebp
c000a306:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a30a:	50                   	push   eax
c000a30b:	e8 da f5 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a310:	8b 10                	mov    edx,DWORD PTR [eax]
c000a312:	89 d3                	mov    ebx,edx
c000a314:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a31a:	09 d7                	or     edi,edx
c000a31c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a322:	89 38                	mov    DWORD PTR [eax],edi
c000a324:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a327:	8b 15 a8 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fa8
c000a32d:	83 c2 01             	add    edx,0x1
c000a330:	89 15 a8 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa8,edx
c000a336:	e8 3e da ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c000a33b:	0f 20 d8             	mov    eax,cr3
c000a33e:	0f 22 d8             	mov    cr3,eax
c000a341:	8b 0d a8 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fa8
c000a347:	51                   	push   ecx
c000a348:	55                   	push   ebp
c000a349:	53                   	push   ebx
c000a34a:	68 54 11 02 c0       	push   0xc0021154
c000a34f:	e8 b6 05 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a354:	a1 a4 6f 02 c0       	mov    eax,ds:0xc0026fa4
c000a359:	c7 44 24 50 0e 13 02 c0 	mov    DWORD PTR [esp+0x50],0xc002130e
c000a361:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a365:	8d 50 01             	lea    edx,[eax+0x1]
c000a368:	89 15 a4 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa4,edx
c000a36e:	83 c4 3c             	add    esp,0x3c
c000a371:	5b                   	pop    ebx
c000a372:	5e                   	pop    esi
c000a373:	5f                   	pop    edi
c000a374:	5d                   	pop    ebp
c000a375:	e9 90 05 00 00       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>

c000a37a <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a37a:	55                   	push   ebp
c000a37b:	57                   	push   edi
c000a37c:	56                   	push   esi
c000a37d:	53                   	push   ebx
c000a37e:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a384:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c000a38b:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c000a391:	77 78                	ja     c000a40b <VAS::tryLoadBackOffDisk(unsigned long)+0x91>
c000a393:	83 ec 08             	sub    esp,0x8
c000a396:	53                   	push   ebx
c000a397:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a39d:	68 31 13 02 c0       	push   0xc0021331
c000a3a2:	e8 63 05 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a3a7:	58                   	pop    eax
c000a3a8:	5a                   	pop    edx
c000a3a9:	53                   	push   ebx
c000a3aa:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3b1:	51                   	push   ecx
c000a3b2:	e8 33 f5 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a3b7:	83 c4 10             	add    esp,0x10
c000a3ba:	85 c0                	test   eax,eax
c000a3bc:	89 c5                	mov    ebp,eax
c000a3be:	0f 95 c0             	setne  al
c000a3c1:	85 db                	test   ebx,ebx
c000a3c3:	0f 95 c2             	setne  dl
c000a3c6:	21 d0                	and    eax,edx
c000a3c8:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a3cc:	a8 01                	test   al,0x1
c000a3ce:	75 0f                	jne    c000a3df <VAS::tryLoadBackOffDisk(unsigned long)+0x65>
c000a3d0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a3d4:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3da:	5b                   	pop    ebx
c000a3db:	5e                   	pop    esi
c000a3dc:	5f                   	pop    edi
c000a3dd:	5d                   	pop    ebp
c000a3de:	c3                   	ret    
c000a3df:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a3e2:	f6 c4 02             	test   ah,0x2
c000a3e5:	75 39                	jne    c000a420 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c000a3e7:	89 c2                	mov    edx,eax
c000a3e9:	81 e2 01 04 00 00    	and    edx,0x401
c000a3ef:	81 fa 00 04 00 00    	cmp    edx,0x400
c000a3f5:	74 73                	je     c000a46a <VAS::tryLoadBackOffDisk(unsigned long)+0xf0>
c000a3f7:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c000a3fc:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a400:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a406:	5b                   	pop    ebx
c000a407:	5e                   	pop    esi
c000a408:	5f                   	pop    edi
c000a409:	5d                   	pop    ebp
c000a40a:	c3                   	ret    
c000a40b:	83 ec 0c             	sub    esp,0xc
c000a40e:	68 1f 13 02 c0       	push   0xc002131f
c000a413:	e8 f3 71 00 00       	call   c001160b <KePanic(char const*)>
c000a418:	83 c4 10             	add    esp,0x10
c000a41b:	e9 73 ff ff ff       	jmp    c000a393 <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c000a420:	83 ec 0c             	sub    esp,0xc
c000a423:	89 de                	mov    esi,ebx
c000a425:	68 84 11 02 c0       	push   0xc0021184
c000a42a:	e8 db 04 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a42f:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a433:	e8 aa d9 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a438:	ba 00 10 00 00       	mov    edx,0x1000
c000a43d:	89 d1                	mov    ecx,edx
c000a43f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a441:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000a444:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a44a:	09 c8                	or     eax,ecx
c000a44c:	83 c8 02             	or     eax,0x2
c000a44f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000a452:	0f 20 d8             	mov    eax,cr3
c000a455:	0f 22 d8             	mov    cr3,eax
c000a458:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a45c:	89 df                	mov    edi,ebx
c000a45e:	89 d1                	mov    ecx,edx
c000a460:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a462:	83 c4 10             	add    esp,0x10
c000a465:	e9 66 ff ff ff       	jmp    c000a3d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c000a46a:	c1 e8 0c             	shr    eax,0xc
c000a46d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a471:	e8 6c d9 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a476:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000a479:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a47f:	09 c2                	or     edx,eax
c000a481:	81 ca 01 08 00 00    	or     edx,0x801
c000a487:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c000a48a:	a1 0c 37 02 c0       	mov    eax,ds:0xc002370c
c000a48f:	85 c0                	test   eax,eax
c000a491:	7e 44                	jle    c000a4d7 <VAS::tryLoadBackOffDisk(unsigned long)+0x15d>
c000a493:	89 df                	mov    edi,ebx
c000a495:	31 f6                	xor    esi,esi
c000a497:	83 ec 0c             	sub    esp,0xc
c000a49a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a49e:	51                   	push   ecx
c000a49f:	e8 90 f2 ff ff       	call   c0009734 <Virt::swapIDToSector(unsigned long)>
c000a4a4:	31 d2                	xor    edx,edx
c000a4a6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a4a9:	81 c7 00 02 00 00    	add    edi,0x200
c000a4af:	6a 01                	push   0x1
c000a4b1:	52                   	push   edx
c000a4b2:	01 f0                	add    eax,esi
c000a4b4:	83 c6 01             	add    esi,0x1
c000a4b7:	50                   	push   eax
c000a4b8:	0f be 05 18 37 02 c0 	movsx  eax,BYTE PTR ds:0xc0023718
c000a4bf:	8b 2c 85 7c b7 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd4884]
c000a4c6:	55                   	push   ebp
c000a4c7:	e8 62 39 00 00       	call   c000de2e <LogicalDisk::read(unsigned long long, int, void*)>
c000a4cc:	83 c4 20             	add    esp,0x20
c000a4cf:	39 35 0c 37 02 c0    	cmp    DWORD PTR ds:0xc002370c,esi
c000a4d5:	7f c0                	jg     c000a497 <VAS::tryLoadBackOffDisk(unsigned long)+0x11d>
c000a4d7:	a1 a8 6f 02 c0       	mov    eax,ds:0xc0026fa8
c000a4dc:	83 ec 04             	sub    esp,0x4
c000a4df:	83 e8 01             	sub    eax,0x1
c000a4e2:	50                   	push   eax
c000a4e3:	53                   	push   ebx
c000a4e4:	68 44 13 02 c0       	push   0xc0021344
c000a4e9:	a3 a8 6f 02 c0       	mov    ds:0xc0026fa8,eax
c000a4ee:	e8 17 04 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a4f3:	58                   	pop    eax
c000a4f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a4f8:	52                   	push   edx
c000a4f9:	e8 13 f2 ff ff       	call   c0009711 <Virt::freeSwapfilePage(unsigned long)>
c000a4fe:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000a503:	83 c4 10             	add    esp,0x10
c000a506:	83 e8 01             	sub    eax,0x1
c000a509:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000a50e:	85 c0                	test   eax,eax
c000a510:	75 01                	jne    c000a513 <VAS::tryLoadBackOffDisk(unsigned long)+0x199>
c000a512:	fb                   	sti    
c000a513:	0f 20 d8             	mov    eax,cr3
c000a516:	0f 22 d8             	mov    cr3,eax
c000a519:	e9 b2 fe ff ff       	jmp    c000a3d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>

c000a51e <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a51e:	55                   	push   ebp
c000a51f:	57                   	push   edi
c000a520:	56                   	push   esi
c000a521:	53                   	push   ebx
c000a522:	83 ec 28             	sub    esp,0x28
c000a525:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a529:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a52d:	50                   	push   eax
c000a52e:	e8 c2 f0 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a533:	83 c4 0c             	add    esp,0xc
c000a536:	6a 07                	push   0x7
c000a538:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a53c:	52                   	push   edx
c000a53d:	89 c5                	mov    ebp,eax
c000a53f:	53                   	push   ebx
c000a540:	e8 c1 f8 ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c000a545:	83 c4 10             	add    esp,0x10
c000a548:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a54c:	89 c7                	mov    edi,eax
c000a54e:	85 c9                	test   ecx,ecx
c000a550:	74 2f                	je     c000a581 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a552:	31 f6                	xor    esi,esi
c000a554:	e8 89 d8 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a559:	83 c6 01             	add    esi,0x1
c000a55c:	6a 03                	push   0x3
c000a55e:	55                   	push   ebp
c000a55f:	50                   	push   eax
c000a560:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a564:	53                   	push   ebx
c000a565:	e8 94 f7 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a56a:	6a 07                	push   0x7
c000a56c:	57                   	push   edi
c000a56d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a571:	50                   	push   eax
c000a572:	53                   	push   ebx
c000a573:	e8 86 f7 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a578:	83 c4 20             	add    esp,0x20
c000a57b:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c000a57f:	75 d3                	jne    c000a554 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a581:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a585:	89 28                	mov    DWORD PTR [eax],ebp
c000a587:	83 c4 1c             	add    esp,0x1c
c000a58a:	89 f8                	mov    eax,edi
c000a58c:	5b                   	pop    ebx
c000a58d:	5e                   	pop    esi
c000a58e:	5f                   	pop    edi
c000a58f:	5d                   	pop    ebp
c000a590:	c3                   	ret    
c000a591:	90                   	nop

c000a592 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a592:	53                   	push   ebx
c000a593:	83 ec 14             	sub    esp,0x14
c000a596:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a59a:	68 a4 11 02 c0       	push   0xc00211a4
c000a59f:	e8 66 03 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a5a4:	c7 04 24 04 12 02 c0 	mov    DWORD PTR [esp],0xc0021204
c000a5ab:	e8 5a 03 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a5b0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5b4:	83 c4 18             	add    esp,0x18
c000a5b7:	5b                   	pop    ebx
c000a5b8:	e9 4c f3 ff ff       	jmp    c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000a5bd:	90                   	nop

c000a5be <VAS::scanForEviction()>:
c000a5be:	57                   	push   edi
c000a5bf:	56                   	push   esi
c000a5c0:	31 f6                	xor    esi,esi
c000a5c2:	53                   	push   ebx
c000a5c3:	83 ec 10             	sub    esp,0x10
c000a5c6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5ca:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5cd:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5d3:	75 0e                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a5d5:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5d8:	89 da                	mov    edx,ebx
c000a5da:	c1 ea 16             	shr    edx,0x16
c000a5dd:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5e1:	74 57                	je     c000a63a <VAS::scanForEviction()+0x7c>
c000a5e3:	53                   	push   ebx
c000a5e4:	57                   	push   edi
c000a5e5:	e8 00 f3 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a5ea:	5a                   	pop    edx
c000a5eb:	59                   	pop    ecx
c000a5ec:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5ee:	89 d1                	mov    ecx,edx
c000a5f0:	c1 e9 0c             	shr    ecx,0xc
c000a5f3:	74 10                	je     c000a605 <VAS::scanForEviction()+0x47>
c000a5f5:	89 d1                	mov    ecx,edx
c000a5f7:	81 e1 01 08 00 00    	and    ecx,0x801
c000a5fd:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a603:	74 40                	je     c000a645 <VAS::scanForEviction()+0x87>
c000a605:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a60b:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a611:	76 2d                	jbe    c000a640 <VAS::scanForEviction()+0x82>
c000a613:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a61a:	83 c6 01             	add    esi,0x1
c000a61d:	83 fe 03             	cmp    esi,0x3
c000a620:	74 32                	je     c000a654 <VAS::scanForEviction()+0x96>
c000a622:	31 db                	xor    ebx,ebx
c000a624:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a62a:	75 b7                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a62c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a62f:	89 da                	mov    edx,ebx
c000a631:	c1 ea 16             	shr    edx,0x16
c000a634:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a638:	75 a9                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a63a:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a640:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a643:	eb 88                	jmp    c000a5cd <VAS::scanForEviction()+0xf>
c000a645:	f6 c2 20             	test   dl,0x20
c000a648:	74 13                	je     c000a65d <VAS::scanForEviction()+0x9f>
c000a64a:	83 e2 df             	and    edx,0xffffffdf
c000a64d:	89 10                	mov    DWORD PTR [eax],edx
c000a64f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a652:	eb b1                	jmp    c000a605 <VAS::scanForEviction()+0x47>
c000a654:	83 c4 10             	add    esp,0x10
c000a657:	31 c0                	xor    eax,eax
c000a659:	5b                   	pop    ebx
c000a65a:	5e                   	pop    esi
c000a65b:	5f                   	pop    edi
c000a65c:	c3                   	ret    
c000a65d:	89 d0                	mov    eax,edx
c000a65f:	83 ec 08             	sub    esp,0x8
c000a662:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a667:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a66b:	53                   	push   ebx
c000a66c:	68 59 13 02 c0       	push   0xc0021359
c000a671:	e8 94 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a676:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a679:	58                   	pop    eax
c000a67a:	5a                   	pop    edx
c000a67b:	51                   	push   ecx
c000a67c:	57                   	push   edi
c000a67d:	e8 1a fc ff ff       	call   c000a29c <VAS::evict(unsigned long)>
c000a682:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a685:	5b                   	pop    ebx
c000a686:	5e                   	pop    esi
c000a687:	50                   	push   eax
c000a688:	68 6d 13 02 c0       	push   0xc002136d
c000a68d:	e8 78 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a692:	58                   	pop    eax
c000a693:	5a                   	pop    edx
c000a694:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a698:	50                   	push   eax
c000a699:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a69d:	68 80 13 02 c0       	push   0xc0021380
c000a6a2:	e8 63 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a6a7:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6aa:	83 c4 10             	add    esp,0x10
c000a6ad:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6b3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6ba:	83 c4 10             	add    esp,0x10
c000a6bd:	5b                   	pop    ebx
c000a6be:	5e                   	pop    esi
c000a6bf:	5f                   	pop    edi
c000a6c0:	c3                   	ret    

c000a6c1 <mapVASFirstTime>:
c000a6c1:	55                   	push   ebp
c000a6c2:	57                   	push   edi
c000a6c3:	56                   	push   esi
c000a6c4:	53                   	push   ebx
c000a6c5:	83 ec 0c             	sub    esp,0xc
c000a6c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6cd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6d0:	83 fa 01             	cmp    edx,0x1
c000a6d3:	0f 84 cb 00 00 00    	je     c000a7a4 <mapVASFirstTime+0xe3>
c000a6d9:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6dc:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6e1:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6e6:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6e9:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6ef:	c1 e5 15             	shl    ebp,0x15
c000a6f2:	29 eb                	sub    ebx,ebp
c000a6f4:	29 ef                	sub    edi,ebp
c000a6f6:	e8 e7 d6 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a6fb:	83 ec 0c             	sub    esp,0xc
c000a6fe:	68 03 04 00 00       	push   0x403
c000a703:	6a 01                	push   0x1
c000a705:	53                   	push   ebx
c000a706:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a70c:	50                   	push   eax
c000a70d:	56                   	push   esi
c000a70e:	e8 f5 f7 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a713:	83 c4 20             	add    esp,0x20
c000a716:	39 fb                	cmp    ebx,edi
c000a718:	75 dc                	jne    c000a6f6 <mapVASFirstTime+0x35>
c000a71a:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a71f:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a724:	29 eb                	sub    ebx,ebp
c000a726:	29 ef                	sub    edi,ebp
c000a728:	e8 b5 d6 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a72d:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a731:	83 fa 01             	cmp    edx,0x1
c000a734:	19 d2                	sbb    edx,edx
c000a736:	83 ec 0c             	sub    esp,0xc
c000a739:	83 e2 04             	and    edx,0x4
c000a73c:	81 c2 03 04 00 00    	add    edx,0x403
c000a742:	52                   	push   edx
c000a743:	6a 01                	push   0x1
c000a745:	53                   	push   ebx
c000a746:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a74c:	50                   	push   eax
c000a74d:	56                   	push   esi
c000a74e:	e8 b5 f7 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a753:	83 c4 20             	add    esp,0x20
c000a756:	39 df                	cmp    edi,ebx
c000a758:	75 ce                	jne    c000a728 <mapVASFirstTime+0x67>
c000a75a:	83 ec 0c             	sub    esp,0xc
c000a75d:	bb 7c 60 02 c0       	mov    ebx,0xc002607c
c000a762:	6a 04                	push   0x4
c000a764:	81 eb 00 50 02 c0    	sub    ebx,0xc0025000
c000a76a:	6a ff                	push   0xffffffff
c000a76c:	c1 eb 0c             	shr    ebx,0xc
c000a76f:	53                   	push   ebx
c000a770:	68 00 50 02 c0       	push   0xc0025000
c000a775:	56                   	push   esi
c000a776:	e8 09 f3 ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a77b:	83 c4 14             	add    esp,0x14
c000a77e:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c000a783:	6a 04                	push   0x4
c000a785:	6a ff                	push   0xffffffff
c000a787:	53                   	push   ebx
c000a788:	68 00 50 02 c0       	push   0xc0025000
c000a78d:	50                   	push   eax
c000a78e:	e8 f1 f2 ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a793:	0f 20 d8             	mov    eax,cr3
c000a796:	0f 22 d8             	mov    cr3,eax
c000a799:	83 c4 20             	add    esp,0x20
c000a79c:	83 c4 0c             	add    esp,0xc
c000a79f:	5b                   	pop    ebx
c000a7a0:	5e                   	pop    esi
c000a7a1:	5f                   	pop    edi
c000a7a2:	5d                   	pop    ebp
c000a7a3:	c3                   	ret    
c000a7a4:	83 ec 0c             	sub    esp,0xc
c000a7a7:	68 8d 13 02 c0       	push   0xc002138d
c000a7ac:	e8 59 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7b1:	83 c4 10             	add    esp,0x10
c000a7b4:	83 c4 0c             	add    esp,0xc
c000a7b7:	5b                   	pop    ebx
c000a7b8:	5e                   	pop    esi
c000a7b9:	5f                   	pop    edi
c000a7ba:	5d                   	pop    ebp
c000a7bb:	c3                   	ret    

c000a7bc <__cxa_atexit>:
c000a7bc:	31 c0                	xor    eax,eax
c000a7be:	c3                   	ret    

c000a7bf <__cxa_finalize>:
c000a7bf:	c3                   	ret    

c000a7c0 <__stack_chk_fail>:
c000a7c0:	55                   	push   ebp
c000a7c1:	89 e5                	mov    ebp,esp
c000a7c3:	83 ec 10             	sub    esp,0x10
c000a7c6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7c9:	68 a6 13 02 c0       	push   0xc00213a6
c000a7ce:	e8 37 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7d3:	58                   	pop    eax
c000a7d4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7d7:	5a                   	pop    edx
c000a7d8:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7db:	68 a6 13 02 c0       	push   0xc00213a6
c000a7e0:	e8 25 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7e5:	c7 04 24 ae 13 02 c0 	mov    DWORD PTR [esp],0xc00213ae
c000a7ec:	e8 1a 6e 00 00       	call   c001160b <KePanic(char const*)>
c000a7f1:	83 c4 10             	add    esp,0x10
c000a7f4:	c9                   	leave  
c000a7f5:	c3                   	ret    

c000a7f6 <__cxa_pure_virtual>:
c000a7f6:	83 ec 18             	sub    esp,0x18
c000a7f9:	68 c6 13 02 c0       	push   0xc00213c6
c000a7fe:	e8 08 6e 00 00       	call   c001160b <KePanic(char const*)>
c000a803:	83 c4 1c             	add    esp,0x1c
c000a806:	c3                   	ret    

c000a807 <operator new[](unsigned long)>:
c000a807:	e9 c7 d2 ff ff       	jmp    c0007ad3 <malloc>

c000a80c <operator delete(void*, unsigned long)>:
c000a80c:	e9 e2 d2 ff ff       	jmp    c0007af3 <rfree>

c000a811 <operator delete[](void*)>:
c000a811:	e9 dd d2 ff ff       	jmp    c0007af3 <rfree>

c000a816 <operator delete[](void*, unsigned long)>:
c000a816:	e9 d8 d2 ff ff       	jmp    c0007af3 <rfree>

c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a81b:	55                   	push   ebp
c000a81c:	57                   	push   edi
c000a81d:	56                   	push   esi
c000a81e:	53                   	push   ebx
c000a81f:	83 ec 20             	sub    esp,0x20
c000a822:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a826:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c000a82e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a832:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c000a83a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a83e:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c000a846:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c000a84e:	89 f7                	mov    edi,esi
c000a850:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a855:	89 eb                	mov    ebx,ebp
c000a857:	eb 02                	jmp    c000a85b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c000a859:	89 c7                	mov    edi,eax
c000a85b:	31 d2                	xor    edx,edx
c000a85d:	89 f8                	mov    eax,edi
c000a85f:	f7 f1                	div    ecx
c000a861:	83 c3 01             	add    ebx,0x1
c000a864:	39 cf                	cmp    edi,ecx
c000a866:	73 f1                	jae    c000a859 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c000a868:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a86b:	eb 02                	jmp    c000a86f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c000a86d:	89 c6                	mov    esi,eax
c000a86f:	31 d2                	xor    edx,edx
c000a871:	89 f0                	mov    eax,esi
c000a873:	f7 f1                	div    ecx
c000a875:	83 eb 01             	sub    ebx,0x1
c000a878:	39 ce                	cmp    esi,ecx
c000a87a:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a87e:	88 13                	mov    BYTE PTR [ebx],dl
c000a880:	73 eb                	jae    c000a86d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c000a882:	83 c4 20             	add    esp,0x20
c000a885:	89 e8                	mov    eax,ebp
c000a887:	5b                   	pop    ebx
c000a888:	5e                   	pop    esi
c000a889:	5f                   	pop    edi
c000a88a:	5d                   	pop    ebp
c000a88b:	c3                   	ret    

c000a88c <Dbg::logc(char)>:
c000a88c:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a893:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a897:	75 12                	jne    c000a8ab <Dbg::logc(char)+0x1f>
c000a899:	ba fd 03 00 00       	mov    edx,0x3fd
c000a89e:	ec                   	in     al,dx
c000a89f:	a8 20                	test   al,0x20
c000a8a1:	74 fb                	je     c000a89e <Dbg::logc(char)+0x12>
c000a8a3:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8a8:	88 c8                	mov    al,cl
c000a8aa:	ee                   	out    dx,al
c000a8ab:	c3                   	ret    

c000a8ac <Dbg::logs(char*)>:
c000a8ac:	53                   	push   ebx
c000a8ad:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8b1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8b4:	85 c0                	test   eax,eax
c000a8b6:	74 11                	je     c000a8c9 <Dbg::logs(char*)+0x1d>
c000a8b8:	50                   	push   eax
c000a8b9:	83 c3 01             	add    ebx,0x1
c000a8bc:	e8 cb ff ff ff       	call   c000a88c <Dbg::logc(char)>
c000a8c1:	58                   	pop    eax
c000a8c2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8c5:	85 c0                	test   eax,eax
c000a8c7:	75 ef                	jne    c000a8b8 <Dbg::logs(char*)+0xc>
c000a8c9:	5b                   	pop    ebx
c000a8ca:	c3                   	ret    

c000a8cb <Dbg::logWriteInt(unsigned int)>:
c000a8cb:	83 ec 10             	sub    esp,0x10
c000a8ce:	6a 0a                	push   0xa
c000a8d0:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8d4:	50                   	push   eax
c000a8d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8d9:	50                   	push   eax
c000a8da:	e8 3c ff ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a8df:	50                   	push   eax
c000a8e0:	e8 c7 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a8e5:	83 c4 20             	add    esp,0x20
c000a8e8:	c3                   	ret    

c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a8e9:	83 ec 10             	sub    esp,0x10
c000a8ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a8f0:	50                   	push   eax
c000a8f1:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8f5:	50                   	push   eax
c000a8f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a8fa:	52                   	push   edx
c000a8fb:	e8 1b ff ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a900:	50                   	push   eax
c000a901:	e8 a6 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a906:	83 c4 20             	add    esp,0x20
c000a909:	c3                   	ret    

c000a90a <Dbg::kprintf(char const*, ...)>:
c000a90a:	55                   	push   ebp
c000a90b:	57                   	push   edi
c000a90c:	56                   	push   esi
c000a90d:	53                   	push   ebx
c000a90e:	83 ec 0c             	sub    esp,0xc
c000a911:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a918:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a91c:	74 08                	je     c000a926 <Dbg::kprintf(char const*, ...)+0x1c>
c000a91e:	83 c4 0c             	add    esp,0xc
c000a921:	5b                   	pop    ebx
c000a922:	5e                   	pop    esi
c000a923:	5f                   	pop    edi
c000a924:	5d                   	pop    ebp
c000a925:	c3                   	ret    
c000a926:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a92a:	31 ff                	xor    edi,edi
c000a92c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a930:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a933:	85 c0                	test   eax,eax
c000a935:	74 e7                	je     c000a91e <Dbg::kprintf(char const*, ...)+0x14>
c000a937:	8d 77 01             	lea    esi,[edi+0x1]
c000a93a:	83 f8 25             	cmp    eax,0x25
c000a93d:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a940:	75 47                	jne    c000a989 <Dbg::kprintf(char const*, ...)+0x7f>
c000a942:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a945:	83 c7 02             	add    edi,0x2
c000a948:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a94b:	83 e8 25             	sub    eax,0x25
c000a94e:	0f b6 c0             	movzx  eax,al
c000a951:	83 f8 53             	cmp    eax,0x53
c000a954:	0f 87 ce 00 00 00    	ja     c000aa28 <Dbg::kprintf(char const*, ...)+0x11e>
c000a95a:	ff 24 85 dc 13 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdec24]
c000a961:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a965:	89 c8                	mov    eax,ecx
c000a967:	83 c1 04             	add    ecx,0x4
c000a96a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a96e:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a970:	55                   	push   ebp
c000a971:	e8 55 ff ff ff       	call   c000a8cb <Dbg::logWriteInt(unsigned int)>
c000a976:	58                   	pop    eax
c000a977:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a97a:	85 c0                	test   eax,eax
c000a97c:	74 a0                	je     c000a91e <Dbg::kprintf(char const*, ...)+0x14>
c000a97e:	8d 77 01             	lea    esi,[edi+0x1]
c000a981:	83 f8 25             	cmp    eax,0x25
c000a984:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a987:	74 b9                	je     c000a942 <Dbg::kprintf(char const*, ...)+0x38>
c000a989:	50                   	push   eax
c000a98a:	89 f7                	mov    edi,esi
c000a98c:	e8 fb fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000a991:	89 ee                	mov    esi,ebp
c000a993:	58                   	pop    eax
c000a994:	eb e1                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a996:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a99a:	89 c8                	mov    eax,ecx
c000a99c:	83 c1 04             	add    ecx,0x4
c000a99f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a3:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9a5:	50                   	push   eax
c000a9a6:	e8 01 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a9ab:	58                   	pop    eax
c000a9ac:	eb c9                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9b2:	89 d0                	mov    eax,edx
c000a9b4:	83 c2 04             	add    edx,0x4
c000a9b7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9bb:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9bd:	50                   	push   eax
c000a9be:	e8 08 ff ff ff       	call   c000a8cb <Dbg::logWriteInt(unsigned int)>
c000a9c3:	58                   	pop    eax
c000a9c4:	eb b1                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ca:	89 d0                	mov    eax,edx
c000a9cc:	83 c2 04             	add    edx,0x4
c000a9cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9d3:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a9d6:	50                   	push   eax
c000a9d7:	e8 b0 fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000a9dc:	58                   	pop    eax
c000a9dd:	eb 98                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9df:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9e3:	89 c8                	mov    eax,ecx
c000a9e5:	83 c1 04             	add    ecx,0x4
c000a9e8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9ec:	6a 10                	push   0x10
c000a9ee:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a9f0:	51                   	push   ecx
c000a9f1:	e8 f3 fe ff ff       	call   c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000a9f6:	5d                   	pop    ebp
c000a9f7:	58                   	pop    eax
c000a9f8:	e9 7a ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9fd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa01:	89 d0                	mov    eax,edx
c000aa03:	83 c2 08             	add    edx,0x8
c000aa06:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa0a:	6a 10                	push   0x10
c000aa0c:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa0e:	50                   	push   eax
c000aa0f:	e8 d5 fe ff ff       	call   c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa14:	58                   	pop    eax
c000aa15:	5a                   	pop    edx
c000aa16:	e9 5c ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1b:	6a 25                	push   0x25
c000aa1d:	e8 6a fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa22:	5a                   	pop    edx
c000aa23:	e9 4f ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa28:	6a 25                	push   0x25
c000aa2a:	e8 5d fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa2f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa33:	50                   	push   eax
c000aa34:	e8 53 fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa39:	5a                   	pop    edx
c000aa3a:	59                   	pop    ecx
c000aa3b:	e9 37 ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>

c000aa40 <KiUbsanPrintDetails(char const*, void*)>:
c000aa40:	83 ec 1c             	sub    esp,0x1c
c000aa43:	83 ec 08             	sub    esp,0x8
c000aa46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa4a:	68 2c 15 02 c0       	push   0xc002152c
c000aa4f:	e8 b6 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa54:	83 c4 10             	add    esp,0x10
c000aa57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa63:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa65:	83 ec 08             	sub    esp,0x8
c000aa68:	50                   	push   eax
c000aa69:	68 40 15 02 c0       	push   0xc0021540
c000aa6e:	e8 97 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa73:	83 c4 10             	add    esp,0x10
c000aa76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aa7d:	83 ec 08             	sub    esp,0x8
c000aa80:	50                   	push   eax
c000aa81:	68 4a 15 02 c0       	push   0xc002154a
c000aa86:	e8 7f fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa8b:	83 c4 10             	add    esp,0x10
c000aa8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa92:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aa95:	83 ec 08             	sub    esp,0x8
c000aa98:	50                   	push   eax
c000aa99:	68 54 15 02 c0       	push   0xc0021554
c000aa9e:	e8 67 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aaa3:	83 c4 10             	add    esp,0x10
c000aaa6:	90                   	nop
c000aaa7:	83 c4 1c             	add    esp,0x1c
c000aaaa:	c3                   	ret    
c000aaab:	90                   	nop

c000aaac <__ubsan_handle_type_mismatch_v1>:
c000aaac:	83 ec 0c             	sub    esp,0xc
c000aaaf:	83 ec 08             	sub    esp,0x8
c000aab2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aab6:	68 98 16 02 c0       	push   0xc0021698
c000aabb:	e8 80 ff ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000aac0:	83 c4 10             	add    esp,0x10
c000aac3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000aac8:	75 16                	jne    c000aae0 <__ubsan_handle_type_mismatch_v1+0x34>
c000aaca:	83 ec 0c             	sub    esp,0xc
c000aacd:	68 5e 15 02 c0       	push   0xc002155e
c000aad2:	e8 33 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aad7:	83 c4 10             	add    esp,0x10
c000aada:	e9 91 00 00 00       	jmp    c000ab70 <__ubsan_handle_type_mismatch_v1+0xc4>
c000aadf:	90                   	nop
c000aae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aae4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aae7:	85 c0                	test   eax,eax
c000aae9:	74 29                	je     c000ab14 <__ubsan_handle_type_mismatch_v1+0x68>
c000aaeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aaf2:	83 e8 01             	sub    eax,0x1
c000aaf5:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000aaf9:	75 19                	jne    c000ab14 <__ubsan_handle_type_mismatch_v1+0x68>
c000aafb:	83 ec 08             	sub    esp,0x8
c000aafe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab02:	68 b8 16 02 c0       	push   0xc00216b8
c000ab07:	e8 fe fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab0c:	83 c4 10             	add    esp,0x10
c000ab0f:	eb 5f                	jmp    c000ab70 <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab11:	8d 76 00             	lea    esi,[esi+0x0]
c000ab14:	83 ec 0c             	sub    esp,0xc
c000ab17:	68 73 15 02 c0       	push   0xc0021573
c000ab1c:	e8 e9 fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab21:	83 c4 10             	add    esp,0x10
c000ab24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab28:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab2b:	0f b6 c0             	movzx  eax,al
c000ab2e:	83 ec 08             	sub    esp,0x8
c000ab31:	50                   	push   eax
c000ab32:	68 8d 15 02 c0       	push   0xc002158d
c000ab37:	e8 ce fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab3c:	83 c4 10             	add    esp,0x10
c000ab3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab43:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab46:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab49:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab51:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab54:	0f b6 c0             	movzx  eax,al
c000ab57:	8b 04 85 20 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc8e0]
c000ab5e:	51                   	push   ecx
c000ab5f:	52                   	push   edx
c000ab60:	50                   	push   eax
c000ab61:	68 e0 16 02 c0       	push   0xc00216e0
c000ab66:	e8 9f fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab6b:	83 c4 10             	add    esp,0x10
c000ab6e:	66 90                	xchg   ax,ax
c000ab70:	83 ec 0c             	sub    esp,0xc
c000ab73:	68 98 16 02 c0       	push   0xc0021698
c000ab78:	e8 8e 6a 00 00       	call   c001160b <KePanic(char const*)>
c000ab7d:	83 c4 10             	add    esp,0x10
c000ab80:	90                   	nop
c000ab81:	83 c4 0c             	add    esp,0xc
c000ab84:	c3                   	ret    
c000ab85:	8d 76 00             	lea    esi,[esi+0x0]

c000ab88 <__ubsan_handle_pointer_overflow>:
c000ab88:	83 ec 0c             	sub    esp,0xc
c000ab8b:	83 ec 08             	sub    esp,0x8
c000ab8e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ab92:	68 28 17 02 c0       	push   0xc0021728
c000ab97:	e8 a4 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	83 ec 0c             	sub    esp,0xc
c000aba2:	68 28 17 02 c0       	push   0xc0021728
c000aba7:	e8 5f 6a 00 00       	call   c001160b <KePanic(char const*)>
c000abac:	83 c4 10             	add    esp,0x10
c000abaf:	90                   	nop
c000abb0:	83 c4 0c             	add    esp,0xc
c000abb3:	c3                   	ret    

c000abb4 <__ubsan_handle_out_of_bounds>:
c000abb4:	83 ec 0c             	sub    esp,0xc
c000abb7:	83 ec 08             	sub    esp,0x8
c000abba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abbe:	68 98 15 02 c0       	push   0xc0021598
c000abc3:	e8 78 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000abc8:	83 c4 10             	add    esp,0x10
c000abcb:	83 ec 0c             	sub    esp,0xc
c000abce:	68 98 15 02 c0       	push   0xc0021598
c000abd3:	e8 33 6a 00 00       	call   c001160b <KePanic(char const*)>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	90                   	nop
c000abdc:	83 c4 0c             	add    esp,0xc
c000abdf:	c3                   	ret    

c000abe0 <__ubsan_handle_add_overflow>:
c000abe0:	83 ec 0c             	sub    esp,0xc
c000abe3:	83 ec 08             	sub    esp,0x8
c000abe6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abea:	68 b5 15 02 c0       	push   0xc00215b5
c000abef:	e8 4c fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	83 ec 0c             	sub    esp,0xc
c000abfa:	68 b5 15 02 c0       	push   0xc00215b5
c000abff:	e8 07 6a 00 00       	call   c001160b <KePanic(char const*)>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	90                   	nop
c000ac08:	83 c4 0c             	add    esp,0xc
c000ac0b:	c3                   	ret    

c000ac0c <__ubsan_handle_load_invalid_value>:
c000ac0c:	83 ec 0c             	sub    esp,0xc
c000ac0f:	83 ec 08             	sub    esp,0x8
c000ac12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac16:	68 48 17 02 c0       	push   0xc0021748
c000ac1b:	e8 20 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac20:	83 c4 10             	add    esp,0x10
c000ac23:	83 ec 0c             	sub    esp,0xc
c000ac26:	68 48 17 02 c0       	push   0xc0021748
c000ac2b:	e8 db 69 00 00       	call   c001160b <KePanic(char const*)>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	90                   	nop
c000ac34:	83 c4 0c             	add    esp,0xc
c000ac37:	c3                   	ret    

c000ac38 <__ubsan_handle_divrem_overflow>:
c000ac38:	83 ec 0c             	sub    esp,0xc
c000ac3b:	83 ec 08             	sub    esp,0x8
c000ac3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac42:	68 6c 17 02 c0       	push   0xc002176c
c000ac47:	e8 f4 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	83 ec 0c             	sub    esp,0xc
c000ac52:	68 6c 17 02 c0       	push   0xc002176c
c000ac57:	e8 af 69 00 00       	call   c001160b <KePanic(char const*)>
c000ac5c:	83 c4 10             	add    esp,0x10
c000ac5f:	90                   	nop
c000ac60:	83 c4 0c             	add    esp,0xc
c000ac63:	c3                   	ret    

c000ac64 <__ubsan_handle_mul_overflow>:
c000ac64:	83 ec 0c             	sub    esp,0xc
c000ac67:	83 ec 08             	sub    esp,0x8
c000ac6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac6e:	68 d1 15 02 c0       	push   0xc00215d1
c000ac73:	e8 c8 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac78:	83 c4 10             	add    esp,0x10
c000ac7b:	83 ec 0c             	sub    esp,0xc
c000ac7e:	68 d1 15 02 c0       	push   0xc00215d1
c000ac83:	e8 83 69 00 00       	call   c001160b <KePanic(char const*)>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	90                   	nop
c000ac8c:	83 c4 0c             	add    esp,0xc
c000ac8f:	c3                   	ret    

c000ac90 <__ubsan_handle_sub_overflow>:
c000ac90:	83 ec 0c             	sub    esp,0xc
c000ac93:	83 ec 08             	sub    esp,0x8
c000ac96:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac9a:	68 ed 15 02 c0       	push   0xc00215ed
c000ac9f:	e8 9c fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000aca4:	83 c4 10             	add    esp,0x10
c000aca7:	83 ec 0c             	sub    esp,0xc
c000acaa:	68 ed 15 02 c0       	push   0xc00215ed
c000acaf:	e8 57 69 00 00       	call   c001160b <KePanic(char const*)>
c000acb4:	83 c4 10             	add    esp,0x10
c000acb7:	90                   	nop
c000acb8:	83 c4 0c             	add    esp,0xc
c000acbb:	c3                   	ret    

c000acbc <__ubsan_handle_shift_out_of_bounds>:
c000acbc:	83 ec 0c             	sub    esp,0xc
c000acbf:	83 ec 08             	sub    esp,0x8
c000acc2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acc6:	68 8c 17 02 c0       	push   0xc002178c
c000accb:	e8 70 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000acd0:	83 c4 10             	add    esp,0x10
c000acd3:	83 ec 0c             	sub    esp,0xc
c000acd6:	68 8c 17 02 c0       	push   0xc002178c
c000acdb:	e8 2b 69 00 00       	call   c001160b <KePanic(char const*)>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	90                   	nop
c000ace4:	83 c4 0c             	add    esp,0xc
c000ace7:	c3                   	ret    

c000ace8 <__ubsan_handle_negate_overflow>:
c000ace8:	83 ec 0c             	sub    esp,0xc
c000aceb:	83 ec 08             	sub    esp,0x8
c000acee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acf2:	68 b0 17 02 c0       	push   0xc00217b0
c000acf7:	e8 44 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000acfc:	83 c4 10             	add    esp,0x10
c000acff:	83 ec 0c             	sub    esp,0xc
c000ad02:	68 b0 17 02 c0       	push   0xc00217b0
c000ad07:	e8 ff 68 00 00       	call   c001160b <KePanic(char const*)>
c000ad0c:	83 c4 10             	add    esp,0x10
c000ad0f:	90                   	nop
c000ad10:	83 c4 0c             	add    esp,0xc
c000ad13:	c3                   	ret    

c000ad14 <KiIsHashInTable(unsigned short)>:
c000ad14:	0f b7 d0             	movzx  edx,ax
c000ad17:	83 e0 07             	and    eax,0x7
c000ad1a:	c1 fa 03             	sar    edx,0x3
c000ad1d:	88 c1                	mov    cl,al
c000ad1f:	0f b6 92 00 74 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd8c00]
c000ad26:	d3 fa                	sar    edx,cl
c000ad28:	89 d0                	mov    eax,edx
c000ad2a:	83 e0 01             	and    eax,0x1
c000ad2d:	c3                   	ret    

c000ad2e <KiSetHashInTable(unsigned short, bool)>:
c000ad2e:	56                   	push   esi
c000ad2f:	53                   	push   ebx
c000ad30:	0f b7 d8             	movzx  ebx,ax
c000ad33:	c1 fb 03             	sar    ebx,0x3
c000ad36:	83 e0 07             	and    eax,0x7
c000ad39:	89 c1                	mov    ecx,eax
c000ad3b:	b8 01 00 00 00       	mov    eax,0x1
c000ad40:	0f b6 b3 00 74 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd8c00]
c000ad47:	d3 e0                	shl    eax,cl
c000ad49:	84 d2                	test   dl,dl
c000ad4b:	74 04                	je     c000ad51 <KiSetHashInTable(unsigned short, bool)+0x23>
c000ad4d:	09 f0                	or     eax,esi
c000ad4f:	eb 04                	jmp    c000ad55 <KiSetHashInTable(unsigned short, bool)+0x27>
c000ad51:	f7 d0                	not    eax
c000ad53:	21 f0                	and    eax,esi
c000ad55:	88 83 00 74 02 c0    	mov    BYTE PTR [ebx-0x3ffd8c00],al
c000ad5b:	5b                   	pop    ebx
c000ad5c:	5e                   	pop    esi
c000ad5d:	c3                   	ret    

c000ad5e <KiFlushSymlinkChanges()>:
c000ad5e:	57                   	push   edi
c000ad5f:	56                   	push   esi
c000ad60:	53                   	push   ebx
c000ad61:	83 ec 1c             	sub    esp,0x1c
c000ad64:	68 14 01 00 00       	push   0x114
c000ad69:	e8 65 cd ff ff       	call   c0007ad3 <malloc>
c000ad6e:	83 c4 0c             	add    esp,0xc
c000ad71:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000ad77:	68 cf 17 02 c0       	push   0xc00217cf
c000ad7c:	50                   	push   eax
c000ad7d:	89 c3                	mov    ebx,eax
c000ad7f:	e8 40 0e 00 00       	call   c000bbc4 <File::File(char const*, Process*)>
c000ad84:	83 c4 10             	add    esp,0x10
c000ad87:	85 db                	test   ebx,ebx
c000ad89:	75 10                	jne    c000ad9b <KiFlushSymlinkChanges()+0x3d>
c000ad8b:	83 ec 0c             	sub    esp,0xc
c000ad8e:	68 ed 17 02 c0       	push   0xc00217ed
c000ad93:	e8 73 68 00 00       	call   c001160b <KePanic(char const*)>
c000ad98:	83 c4 10             	add    esp,0x10
c000ad9b:	56                   	push   esi
c000ad9c:	56                   	push   esi
c000ad9d:	6a 06                	push   0x6
c000ad9f:	53                   	push   ebx
c000ada0:	e8 3d 0e 00 00       	call   c000bbe2 <File::open(FileOpenMode)>
c000ada5:	83 c4 10             	add    esp,0x10
c000ada8:	85 c0                	test   eax,eax
c000adaa:	74 10                	je     c000adbc <KiFlushSymlinkChanges()+0x5e>
c000adac:	83 ec 0c             	sub    esp,0xc
c000adaf:	68 07 18 02 c0       	push   0xc0021807
c000adb4:	e8 52 68 00 00       	call   c001160b <KePanic(char const*)>
c000adb9:	83 c4 10             	add    esp,0x10
c000adbc:	31 f6                	xor    esi,esi
c000adbe:	39 35 c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,esi
c000adc4:	7e 70                	jle    c000ae36 <KiFlushSymlinkChanges()+0xd8>
c000adc6:	83 ec 0c             	sub    esp,0xc
c000adc9:	89 f0                	mov    eax,esi
c000adcb:	8b 13                	mov    edx,DWORD PTR [ebx]
c000adcd:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000add1:	c1 e0 08             	shl    eax,0x8
c000add4:	57                   	push   edi
c000add5:	05 00 70 02 c0       	add    eax,0xc0027000
c000adda:	50                   	push   eax
c000addb:	6a 00                	push   0x0
c000addd:	68 00 01 00 00       	push   0x100
c000ade2:	53                   	push   ebx
c000ade3:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ade6:	83 c4 20             	add    esp,0x20
c000ade9:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000adf1:	74 10                	je     c000ae03 <KiFlushSymlinkChanges()+0xa5>
c000adf3:	83 ec 0c             	sub    esp,0xc
c000adf6:	68 21 18 02 c0       	push   0xc0021821
c000adfb:	e8 0b 68 00 00       	call   c001160b <KePanic(char const*)>
c000ae00:	83 c4 10             	add    esp,0x10
c000ae03:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae05:	8d 14 f5 e0 6f 02 c0 	lea    edx,[esi*8-0x3ffd9020]
c000ae0c:	83 ec 0c             	sub    esp,0xc
c000ae0f:	57                   	push   edi
c000ae10:	52                   	push   edx
c000ae11:	6a 00                	push   0x0
c000ae13:	6a 08                	push   0x8
c000ae15:	53                   	push   ebx
c000ae16:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ae19:	83 c4 20             	add    esp,0x20
c000ae1c:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000ae21:	74 10                	je     c000ae33 <KiFlushSymlinkChanges()+0xd5>
c000ae23:	83 ec 0c             	sub    esp,0xc
c000ae26:	68 3b 18 02 c0       	push   0xc002183b
c000ae2b:	e8 db 67 00 00       	call   c001160b <KePanic(char const*)>
c000ae30:	83 c4 10             	add    esp,0x10
c000ae33:	46                   	inc    esi
c000ae34:	eb 88                	jmp    c000adbe <KiFlushSymlinkChanges()+0x60>
c000ae36:	83 ec 0c             	sub    esp,0xc
c000ae39:	53                   	push   ebx
c000ae3a:	e8 01 0e 00 00       	call   c000bc40 <File::close()>
c000ae3f:	83 c4 10             	add    esp,0x10
c000ae42:	85 db                	test   ebx,ebx
c000ae44:	74 0c                	je     c000ae52 <KiFlushSymlinkChanges()+0xf4>
c000ae46:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae48:	83 ec 0c             	sub    esp,0xc
c000ae4b:	53                   	push   ebx
c000ae4c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae4f:	83 c4 10             	add    esp,0x10
c000ae52:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000ae5c:	83 ec 0c             	sub    esp,0xc
c000ae5f:	68 55 18 02 c0       	push   0xc0021855
c000ae64:	e8 f4 7d 00 00       	call   c0012c5d <CmOpen(char const*)>
c000ae69:	83 c4 10             	add    esp,0x10
c000ae6c:	85 c0                	test   eax,eax
c000ae6e:	89 c3                	mov    ebx,eax
c000ae70:	74 6d                	je     c000aedf <KiFlushSymlinkChanges()+0x181>
c000ae72:	51                   	push   ecx
c000ae73:	bf 00 00 00 00       	mov    edi,0x0
c000ae78:	51                   	push   ecx
c000ae79:	68 7a 18 02 c0       	push   0xc002187a
c000ae7e:	50                   	push   eax
c000ae7f:	e8 d4 89 00 00       	call   c0013858 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c000ae84:	83 c4 10             	add    esp,0x10
c000ae87:	8b 35 00 94 02 c0    	mov    esi,DWORD PTR ds:0xc0029400
c000ae8d:	40                   	inc    eax
c000ae8e:	75 2a                	jne    c000aeba <KiFlushSymlinkChanges()+0x15c>
c000ae90:	52                   	push   edx
c000ae91:	52                   	push   edx
c000ae92:	68 8f 18 02 c0       	push   0xc002188f
c000ae97:	53                   	push   ebx
c000ae98:	e8 bb 89 00 00       	call   c0013858 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c000ae9d:	59                   	pop    ecx
c000ae9e:	5a                   	pop    edx
c000ae9f:	50                   	push   eax
c000aea0:	53                   	push   ebx
c000aea1:	e8 9e 7f 00 00       	call   c0012e44 <CmEnterDirectory(Reghive_Tag*, int)>
c000aea6:	59                   	pop    ecx
c000aea7:	5a                   	pop    edx
c000aea8:	6a 6c                	push   0x6c
c000aeaa:	57                   	push   edi
c000aeab:	56                   	push   esi
c000aeac:	68 81 18 02 c0       	push   0xc0021881
c000aeb1:	50                   	push   eax
c000aeb2:	53                   	push   ebx
c000aeb3:	e8 17 88 00 00       	call   c00136cf <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000aeb8:	eb 16                	jmp    c000aed0 <KiFlushSymlinkChanges()+0x172>
c000aeba:	50                   	push   eax
c000aebb:	50                   	push   eax
c000aebc:	68 7a 18 02 c0       	push   0xc002187a
c000aec1:	53                   	push   ebx
c000aec2:	e8 91 89 00 00       	call   c0013858 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c000aec7:	57                   	push   edi
c000aec8:	56                   	push   esi
c000aec9:	50                   	push   eax
c000aeca:	53                   	push   ebx
c000aecb:	e8 89 84 00 00       	call   c0013359 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>
c000aed0:	83 c4 20             	add    esp,0x20
c000aed3:	83 ec 0c             	sub    esp,0xc
c000aed6:	53                   	push   ebx
c000aed7:	e8 9f 7e 00 00       	call   c0012d7b <CmClose(Reghive_Tag*)>
c000aedc:	83 c4 10             	add    esp,0x10
c000aedf:	83 c4 10             	add    esp,0x10
c000aee2:	5b                   	pop    ebx
c000aee3:	5e                   	pop    esi
c000aee4:	5f                   	pop    edi
c000aee5:	c3                   	ret    

c000aee6 <KiDeinitialiseSymlinks(void*)>:
c000aee6:	e9 73 fe ff ff       	jmp    c000ad5e <KiFlushSymlinkChanges()>

c000aeeb <KiGetSymlinkHash(char const*)>:
c000aeeb:	53                   	push   ebx
c000aeec:	89 c3                	mov    ebx,eax
c000aeee:	83 ec 14             	sub    esp,0x14
c000aef1:	50                   	push   eax
c000aef2:	e8 89 56 ff ff       	call   c0000580 <strlen>
c000aef7:	5a                   	pop    edx
c000aef8:	59                   	pop    ecx
c000aef9:	50                   	push   eax
c000aefa:	53                   	push   ebx
c000aefb:	e8 8d 60 00 00       	call   c0010f8d <KeCalculateCRC32(unsigned char*, int)>
c000af00:	83 c4 18             	add    esp,0x18
c000af03:	5b                   	pop    ebx
c000af04:	89 c2                	mov    edx,eax
c000af06:	c1 ea 10             	shr    edx,0x10
c000af09:	31 d0                	xor    eax,edx
c000af0b:	c3                   	ret    

c000af0c <KiCreateSymlinkID()>:
c000af0c:	55                   	push   ebp
c000af0d:	57                   	push   edi
c000af0e:	56                   	push   esi
c000af0f:	53                   	push   ebx
c000af10:	31 db                	xor    ebx,ebx
c000af12:	83 ec 1c             	sub    esp,0x1c
c000af15:	e8 3f 68 00 00       	call   c0011759 <KeRand()>
c000af1a:	8b 2d 00 94 02 c0    	mov    ebp,DWORD PTR ds:0xc0029400
c000af20:	31 d2                	xor    edx,edx
c000af22:	43                   	inc    ebx
c000af23:	31 ff                	xor    edi,edi
c000af25:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000af28:	89 ee                	mov    esi,ebp
c000af2a:	89 0d 00 94 02 c0    	mov    DWORD PTR ds:0xc0029400,ecx
c000af30:	0f a4 c2 1f          	shld   edx,eax,0x1f
c000af34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000af38:	c1 e0 1f             	shl    eax,0x1f
c000af3b:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000af41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000af45:	75 10                	jne    c000af57 <KiCreateSymlinkID()+0x4b>
c000af47:	83 ec 0c             	sub    esp,0xc
c000af4a:	68 96 18 02 c0       	push   0xc0021896
c000af4f:	e8 b7 66 00 00       	call   c001160b <KePanic(char const*)>
c000af54:	83 c4 10             	add    esp,0x10
c000af57:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000af5b:	75 06                	jne    c000af63 <KiCreateSymlinkID()+0x57>
c000af5d:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000af61:	74 b2                	je     c000af15 <KiCreateSymlinkID()+0x9>
c000af63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000af67:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af6b:	83 c4 1c             	add    esp,0x1c
c000af6e:	5b                   	pop    ebx
c000af6f:	31 f0                	xor    eax,esi
c000af71:	5e                   	pop    esi
c000af72:	31 fa                	xor    edx,edi
c000af74:	5f                   	pop    edi
c000af75:	5d                   	pop    ebp
c000af76:	c3                   	ret    

c000af77 <KeRegisterSymlink(char const*, unsigned long long)>:
c000af77:	53                   	push   ebx
c000af78:	83 ec 0c             	sub    esp,0xc
c000af7b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000af7f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000af83:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af88:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000af8c:	68 00 01 00 00       	push   0x100
c000af91:	6a 00                	push   0x0
c000af93:	89 0c c5 e4 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd901c],ecx
c000af9a:	89 14 c5 e0 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9020],edx
c000afa1:	c1 e0 08             	shl    eax,0x8
c000afa4:	05 00 70 02 c0       	add    eax,0xc0027000
c000afa9:	50                   	push   eax
c000afaa:	e8 41 55 ff ff       	call   c00004f0 <memset>
c000afaf:	58                   	pop    eax
c000afb0:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000afb5:	5a                   	pop    edx
c000afb6:	c1 e0 08             	shl    eax,0x8
c000afb9:	53                   	push   ebx
c000afba:	05 00 70 02 c0       	add    eax,0xc0027000
c000afbf:	50                   	push   eax
c000afc0:	e8 8b 56 ff ff       	call   c0000650 <strcpy>
c000afc5:	89 d8                	mov    eax,ebx
c000afc7:	e8 1f ff ff ff       	call   c000aeeb <KiGetSymlinkHash(char const*)>
c000afcc:	ba 01 00 00 00       	mov    edx,0x1
c000afd1:	0f b7 c0             	movzx  eax,ax
c000afd4:	e8 55 fd ff ff       	call   c000ad2e <KiSetHashInTable(unsigned short, bool)>
c000afd9:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000afde:	83 c4 10             	add    esp,0x10
c000afe1:	40                   	inc    eax
c000afe2:	a3 c0 6f 02 c0       	mov    ds:0xc0026fc0,eax
c000afe7:	83 f8 03             	cmp    eax,0x3
c000afea:	7e 09                	jle    c000aff5 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c000afec:	83 c4 08             	add    esp,0x8
c000afef:	5b                   	pop    ebx
c000aff0:	e9 69 fd ff ff       	jmp    c000ad5e <KiFlushSymlinkChanges()>
c000aff5:	83 c4 08             	add    esp,0x8
c000aff8:	5b                   	pop    ebx
c000aff9:	c3                   	ret    

c000affa <KiIsSymlinkRegistered(char const*)>:
c000affa:	55                   	push   ebp
c000affb:	57                   	push   edi
c000affc:	56                   	push   esi
c000affd:	53                   	push   ebx
c000affe:	81 ec 1c 01 00 00    	sub    esp,0x11c
c000b004:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c000b00b:	89 f0                	mov    eax,esi
c000b00d:	e8 d9 fe ff ff       	call   c000aeeb <KiGetSymlinkHash(char const*)>
c000b012:	0f b7 c0             	movzx  eax,ax
c000b015:	e8 fa fc ff ff       	call   c000ad14 <KiIsHashInTable(unsigned short)>
c000b01a:	31 d2                	xor    edx,edx
c000b01c:	88 c1                	mov    cl,al
c000b01e:	31 c0                	xor    eax,eax
c000b020:	84 c9                	test   cl,cl
c000b022:	0f 84 31 01 00 00    	je     c000b159 <KiIsSymlinkRegistered(char const*)+0x15f>
c000b028:	31 db                	xor    ebx,ebx
c000b02a:	39 1d c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,ebx
c000b030:	7e 30                	jle    c000b062 <KiIsSymlinkRegistered(char const*)+0x68>
c000b032:	89 d8                	mov    eax,ebx
c000b034:	c1 e0 08             	shl    eax,0x8
c000b037:	51                   	push   ecx
c000b038:	05 00 70 02 c0       	add    eax,0xc0027000
c000b03d:	51                   	push   ecx
c000b03e:	50                   	push   eax
c000b03f:	56                   	push   esi
c000b040:	e8 3b 57 ff ff       	call   c0000780 <strcmp>
c000b045:	83 c4 10             	add    esp,0x10
c000b048:	85 c0                	test   eax,eax
c000b04a:	75 13                	jne    c000b05f <KiIsSymlinkRegistered(char const*)+0x65>
c000b04c:	8b 04 dd e0 6f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd9020]
c000b053:	8b 14 dd e4 6f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd901c]
c000b05a:	e9 fa 00 00 00       	jmp    c000b159 <KiIsSymlinkRegistered(char const*)+0x15f>
c000b05f:	43                   	inc    ebx
c000b060:	eb c8                	jmp    c000b02a <KiIsSymlinkRegistered(char const*)+0x30>
c000b062:	83 ec 0c             	sub    esp,0xc
c000b065:	68 14 01 00 00       	push   0x114
c000b06a:	e8 64 ca ff ff       	call   c0007ad3 <malloc>
c000b06f:	83 c4 0c             	add    esp,0xc
c000b072:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b078:	68 cf 17 02 c0       	push   0xc00217cf
c000b07d:	50                   	push   eax
c000b07e:	89 c3                	mov    ebx,eax
c000b080:	e8 3f 0b 00 00       	call   c000bbc4 <File::File(char const*, Process*)>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	85 db                	test   ebx,ebx
c000b08a:	75 12                	jne    c000b09e <KiIsSymlinkRegistered(char const*)+0xa4>
c000b08c:	83 ec 0c             	sub    esp,0xc
c000b08f:	68 9f 18 02 c0       	push   0xc002189f
c000b094:	e8 72 65 00 00       	call   c001160b <KePanic(char const*)>
c000b099:	83 c4 10             	add    esp,0x10
c000b09c:	eb 10                	jmp    c000b0ae <KiIsSymlinkRegistered(char const*)+0xb4>
c000b09e:	83 ec 0c             	sub    esp,0xc
c000b0a1:	53                   	push   ebx
c000b0a2:	e8 ff 0d 00 00       	call   c000bea6 <File::exists()>
c000b0a7:	83 c4 10             	add    esp,0x10
c000b0aa:	84 c0                	test   al,al
c000b0ac:	74 de                	je     c000b08c <KiIsSymlinkRegistered(char const*)+0x92>
c000b0ae:	52                   	push   edx
c000b0af:	52                   	push   edx
c000b0b0:	6a 01                	push   0x1
c000b0b2:	53                   	push   ebx
c000b0b3:	e8 2a 0b 00 00       	call   c000bbe2 <File::open(FileOpenMode)>
c000b0b8:	83 c4 10             	add    esp,0x10
c000b0bb:	85 c0                	test   eax,eax
c000b0bd:	74 10                	je     c000b0cf <KiIsSymlinkRegistered(char const*)+0xd5>
c000b0bf:	83 ec 0c             	sub    esp,0xc
c000b0c2:	68 ba 18 02 c0       	push   0xc00218ba
c000b0c7:	e8 3f 65 00 00       	call   c001160b <KePanic(char const*)>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	83 ec 0c             	sub    esp,0xc
c000b0d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0d4:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000b0d8:	55                   	push   ebp
c000b0d9:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000b0dd:	57                   	push   edi
c000b0de:	6a 00                	push   0x0
c000b0e0:	68 00 01 00 00       	push   0x100
c000b0e5:	53                   	push   ebx
c000b0e6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b0e9:	83 c4 20             	add    esp,0x20
c000b0ec:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b0f4:	75 4b                	jne    c000b141 <KiIsSymlinkRegistered(char const*)+0x147>
c000b0f6:	83 ec 0c             	sub    esp,0xc
c000b0f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0fb:	55                   	push   ebp
c000b0fc:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b100:	52                   	push   edx
c000b101:	6a 00                	push   0x0
c000b103:	6a 08                	push   0x8
c000b105:	53                   	push   ebx
c000b106:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b109:	83 c4 20             	add    esp,0x20
c000b10c:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b111:	75 2e                	jne    c000b141 <KiIsSymlinkRegistered(char const*)+0x147>
c000b113:	50                   	push   eax
c000b114:	50                   	push   eax
c000b115:	57                   	push   edi
c000b116:	56                   	push   esi
c000b117:	e8 64 56 ff ff       	call   c0000780 <strcmp>
c000b11c:	83 c4 10             	add    esp,0x10
c000b11f:	85 c0                	test   eax,eax
c000b121:	75 ac                	jne    c000b0cf <KiIsSymlinkRegistered(char const*)+0xd5>
c000b123:	83 ec 0c             	sub    esp,0xc
c000b126:	53                   	push   ebx
c000b127:	e8 14 0b 00 00       	call   c000bc40 <File::close()>
c000b12c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b12e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b131:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b134:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b138:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b13c:	83 c4 10             	add    esp,0x10
c000b13f:	eb 18                	jmp    c000b159 <KiIsSymlinkRegistered(char const*)+0x15f>
c000b141:	83 ec 0c             	sub    esp,0xc
c000b144:	53                   	push   ebx
c000b145:	e8 f6 0a 00 00       	call   c000bc40 <File::close()>
c000b14a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b14c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b14f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b152:	83 c4 10             	add    esp,0x10
c000b155:	31 c0                	xor    eax,eax
c000b157:	31 d2                	xor    edx,edx
c000b159:	81 c4 1c 01 00 00    	add    esp,0x11c
c000b15f:	5b                   	pop    ebx
c000b160:	5e                   	pop    esi
c000b161:	5f                   	pop    edi
c000b162:	5d                   	pop    ebp
c000b163:	c3                   	ret    

c000b164 <KeDereferenceSymlink(char const*, char*)>:
c000b164:	55                   	push   ebp
c000b165:	57                   	push   edi
c000b166:	56                   	push   esi
c000b167:	53                   	push   ebx
c000b168:	83 ec 48             	sub    esp,0x48
c000b16b:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c000b16f:	56                   	push   esi
c000b170:	e8 85 fe ff ff       	call   c000affa <KiIsSymlinkRegistered(char const*)>
c000b175:	83 c4 10             	add    esp,0x10
c000b178:	89 c7                	mov    edi,eax
c000b17a:	89 d0                	mov    eax,edx
c000b17c:	09 f8                	or     eax,edi
c000b17e:	75 07                	jne    c000b187 <KeDereferenceSymlink(char const*, char*)+0x23>
c000b180:	31 c0                	xor    eax,eax
c000b182:	e9 7c 01 00 00       	jmp    c000b303 <KeDereferenceSymlink(char const*, char*)+0x19f>
c000b187:	83 ec 0c             	sub    esp,0xc
c000b18a:	89 d5                	mov    ebp,edx
c000b18c:	68 14 01 00 00       	push   0x114
c000b191:	e8 3d c9 ff ff       	call   c0007ad3 <malloc>
c000b196:	83 c4 0c             	add    esp,0xc
c000b199:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b19f:	56                   	push   esi
c000b1a0:	50                   	push   eax
c000b1a1:	89 c3                	mov    ebx,eax
c000b1a3:	e8 1c 0a 00 00       	call   c000bbc4 <File::File(char const*, Process*)>
c000b1a8:	83 c4 10             	add    esp,0x10
c000b1ab:	85 db                	test   ebx,ebx
c000b1ad:	0f 84 32 01 00 00    	je     c000b2e5 <KeDereferenceSymlink(char const*, char*)+0x181>
c000b1b3:	56                   	push   esi
c000b1b4:	56                   	push   esi
c000b1b5:	6a 01                	push   0x1
c000b1b7:	53                   	push   ebx
c000b1b8:	e8 25 0a 00 00       	call   c000bbe2 <File::open(FileOpenMode)>
c000b1bd:	83 c4 10             	add    esp,0x10
c000b1c0:	85 c0                	test   eax,eax
c000b1c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1c4:	74 09                	je     c000b1cf <KeDereferenceSymlink(char const*, char*)+0x6b>
c000b1c6:	83 ec 0c             	sub    esp,0xc
c000b1c9:	53                   	push   ebx
c000b1ca:	e9 10 01 00 00       	jmp    c000b2df <KeDereferenceSymlink(char const*, char*)+0x17b>
c000b1cf:	83 ec 0c             	sub    esp,0xc
c000b1d2:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b1d6:	56                   	push   esi
c000b1d7:	8d 54 24 37          	lea    edx,[esp+0x37]
c000b1db:	52                   	push   edx
c000b1dc:	6a 00                	push   0x0
c000b1de:	6a 08                	push   0x8
c000b1e0:	53                   	push   ebx
c000b1e1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b1e4:	83 c4 20             	add    esp,0x20
c000b1e7:	85 c0                	test   eax,eax
c000b1e9:	0f 85 e2 00 00 00    	jne    c000b2d1 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b1ef:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b1f4:	0f 85 d7 00 00 00    	jne    c000b2d1 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b1fa:	83 ec 0c             	sub    esp,0xc
c000b1fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1ff:	56                   	push   esi
c000b200:	8d 54 24 20          	lea    edx,[esp+0x20]
c000b204:	52                   	push   edx
c000b205:	6a 00                	push   0x0
c000b207:	6a 08                	push   0x8
c000b209:	53                   	push   ebx
c000b20a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b20d:	83 c4 20             	add    esp,0x20
c000b210:	85 c0                	test   eax,eax
c000b212:	0f 85 b9 00 00 00    	jne    c000b2d1 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b218:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b21d:	0f 85 ae 00 00 00    	jne    c000b2d1 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b223:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000b227:	0f 85 53 ff ff ff    	jne    c000b180 <KeDereferenceSymlink(char const*, char*)+0x1c>
c000b22d:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000b231:	0f 85 49 ff ff ff    	jne    c000b180 <KeDereferenceSymlink(char const*, char*)+0x1c>
c000b237:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b23f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b247:	51                   	push   ecx
c000b248:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000b24c:	50                   	push   eax
c000b24d:	8d 44 24 20          	lea    eax,[esp+0x20]
c000b251:	50                   	push   eax
c000b252:	53                   	push   ebx
c000b253:	e8 8c 0c 00 00       	call   c000bee4 <File::stat(unsigned long long*, bool*)>
c000b258:	83 c4 10             	add    esp,0x10
c000b25b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b260:	75 6f                	jne    c000b2d1 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b262:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b266:	31 c9                	xor    ecx,ecx
c000b268:	bf 0f 00 00 00       	mov    edi,0xf
c000b26d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b271:	39 c7                	cmp    edi,eax
c000b273:	89 cf                	mov    edi,ecx
c000b275:	19 d7                	sbb    edi,edx
c000b277:	73 58                	jae    c000b2d1 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b279:	83 c0 f0             	add    eax,0xfffffff0
c000b27c:	bf ff 00 00 00       	mov    edi,0xff
c000b281:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b285:	83 d2 ff             	adc    edx,0xffffffff
c000b288:	39 c7                	cmp    edi,eax
c000b28a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b28e:	19 d1                	sbb    ecx,edx
c000b290:	72 53                	jb     c000b2e5 <KeDereferenceSymlink(char const*, char*)+0x181>
c000b292:	40                   	inc    eax
c000b293:	52                   	push   edx
c000b294:	50                   	push   eax
c000b295:	6a 00                	push   0x0
c000b297:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000b29b:	e8 50 52 ff ff       	call   c00004f0 <memset>
c000b2a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2a2:	89 34 24             	mov    DWORD PTR [esp],esi
c000b2a5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b2a9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b2ad:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b2b1:	53                   	push   ebx
c000b2b2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b2b5:	83 c4 20             	add    esp,0x20
c000b2b8:	85 c0                	test   eax,eax
c000b2ba:	75 15                	jne    c000b2d1 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b2bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b2c0:	89 c7                	mov    edi,eax
c000b2c2:	c1 ff 1f             	sar    edi,0x1f
c000b2c5:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b2c9:	75 06                	jne    c000b2d1 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b2cb:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b2cf:	74 19                	je     c000b2ea <KeDereferenceSymlink(char const*, char*)+0x186>
c000b2d1:	83 ec 0c             	sub    esp,0xc
c000b2d4:	53                   	push   ebx
c000b2d5:	e8 66 09 00 00       	call   c000bc40 <File::close()>
c000b2da:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b2df:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b2e2:	83 c4 10             	add    esp,0x10
c000b2e5:	83 c8 ff             	or     eax,0xffffffff
c000b2e8:	eb 19                	jmp    c000b303 <KeDereferenceSymlink(char const*, char*)+0x19f>
c000b2ea:	83 ec 0c             	sub    esp,0xc
c000b2ed:	53                   	push   ebx
c000b2ee:	e8 4d 09 00 00       	call   c000bc40 <File::close()>
c000b2f3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b2f8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b2fb:	83 c4 10             	add    esp,0x10
c000b2fe:	b8 01 00 00 00       	mov    eax,0x1
c000b303:	83 c4 3c             	add    esp,0x3c
c000b306:	5b                   	pop    ebx
c000b307:	5e                   	pop    esi
c000b308:	5f                   	pop    edi
c000b309:	5d                   	pop    ebp
c000b30a:	c3                   	ret    

c000b30b <KeCreateSymlink(char const*, char const*)>:
c000b30b:	55                   	push   ebp
c000b30c:	57                   	push   edi
c000b30d:	56                   	push   esi
c000b30e:	53                   	push   ebx
c000b30f:	83 ec 38             	sub    esp,0x38
c000b312:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b316:	68 14 01 00 00       	push   0x114
c000b31b:	e8 b3 c7 ff ff       	call   c0007ad3 <malloc>
c000b320:	6a 00                	push   0x0
c000b322:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b328:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b32c:	89 c3                	mov    ebx,eax
c000b32e:	50                   	push   eax
c000b32f:	e8 b2 07 00 00       	call   c000bae6 <File::File(char const*, Process*, bool)>
c000b334:	83 c4 20             	add    esp,0x20
c000b337:	85 db                	test   ebx,ebx
c000b339:	b8 01 00 00 00       	mov    eax,0x1
c000b33e:	0f 84 fb 00 00 00    	je     c000b43f <KeCreateSymlink(char const*, char const*)+0x134>
c000b344:	52                   	push   edx
c000b345:	52                   	push   edx
c000b346:	6a 12                	push   0x12
c000b348:	53                   	push   ebx
c000b349:	e8 94 08 00 00       	call   c000bbe2 <File::open(FileOpenMode)>
c000b34e:	83 c4 10             	add    esp,0x10
c000b351:	85 c0                	test   eax,eax
c000b353:	74 0b                	je     c000b360 <KeCreateSymlink(char const*, char const*)+0x55>
c000b355:	83 ec 0c             	sub    esp,0xc
c000b358:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b35a:	53                   	push   ebx
c000b35b:	e9 d4 00 00 00       	jmp    c000b434 <KeCreateSymlink(char const*, char const*)+0x129>
c000b360:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b364:	be d5 18 02 c0       	mov    esi,0xc00218d5
c000b369:	b9 09 00 00 00       	mov    ecx,0x9
c000b36e:	fc                   	cld    
c000b36f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b371:	83 ec 0c             	sub    esp,0xc
c000b374:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b378:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b37a:	56                   	push   esi
c000b37b:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b37f:	52                   	push   edx
c000b380:	6a 00                	push   0x0
c000b382:	6a 08                	push   0x8
c000b384:	53                   	push   ebx
c000b385:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b388:	83 c4 20             	add    esp,0x20
c000b38b:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b390:	0f 85 90 00 00 00    	jne    c000b426 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b396:	85 c0                	test   eax,eax
c000b398:	0f 85 88 00 00 00    	jne    c000b426 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b39e:	e8 69 fb ff ff       	call   c000af0c <KiCreateSymlinkID()>
c000b3a3:	83 ec 0c             	sub    esp,0xc
c000b3a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b3aa:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b3ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3b0:	56                   	push   esi
c000b3b1:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b3b5:	52                   	push   edx
c000b3b6:	6a 00                	push   0x0
c000b3b8:	6a 08                	push   0x8
c000b3ba:	53                   	push   ebx
c000b3bb:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b3be:	83 c4 20             	add    esp,0x20
c000b3c1:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b3c6:	75 5e                	jne    c000b426 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b3c8:	85 c0                	test   eax,eax
c000b3ca:	75 5a                	jne    c000b426 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b3cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3ce:	83 ec 0c             	sub    esp,0xc
c000b3d1:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b3d4:	55                   	push   ebp
c000b3d5:	e8 a6 51 ff ff       	call   c0000580 <strlen>
c000b3da:	31 d2                	xor    edx,edx
c000b3dc:	89 34 24             	mov    DWORD PTR [esp],esi
c000b3df:	55                   	push   ebp
c000b3e0:	52                   	push   edx
c000b3e1:	50                   	push   eax
c000b3e2:	53                   	push   ebx
c000b3e3:	ff d7                	call   edi
c000b3e5:	83 c4 14             	add    esp,0x14
c000b3e8:	55                   	push   ebp
c000b3e9:	89 c6                	mov    esi,eax
c000b3eb:	e8 90 51 ff ff       	call   c0000580 <strlen>
c000b3f0:	83 c4 10             	add    esp,0x10
c000b3f3:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b3f7:	75 2d                	jne    c000b426 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b3f9:	85 f6                	test   esi,esi
c000b3fb:	75 29                	jne    c000b426 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b3fd:	50                   	push   eax
c000b3fe:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b402:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b406:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b40a:	e8 68 fb ff ff       	call   c000af77 <KeRegisterSymlink(char const*, unsigned long long)>
c000b40f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b412:	e8 29 08 00 00       	call   c000bc40 <File::close()>
c000b417:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b419:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b41c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b41f:	83 c4 10             	add    esp,0x10
c000b422:	31 c0                	xor    eax,eax
c000b424:	eb 19                	jmp    c000b43f <KeCreateSymlink(char const*, char const*)+0x134>
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	53                   	push   ebx
c000b42a:	e8 11 08 00 00       	call   c000bc40 <File::close()>
c000b42f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b431:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b434:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b437:	83 c4 10             	add    esp,0x10
c000b43a:	b8 01 00 00 00       	mov    eax,0x1
c000b43f:	83 c4 2c             	add    esp,0x2c
c000b442:	5b                   	pop    ebx
c000b443:	5e                   	pop    esi
c000b444:	5f                   	pop    edi
c000b445:	5d                   	pop    ebp
c000b446:	c3                   	ret    

c000b447 <KeInitialiseSymlinks()>:
c000b447:	57                   	push   edi
c000b448:	56                   	push   esi
c000b449:	53                   	push   ebx
c000b44a:	81 ec 14 01 00 00    	sub    esp,0x114
c000b450:	68 00 20 00 00       	push   0x2000
c000b455:	6a 00                	push   0x0
c000b457:	68 00 74 02 c0       	push   0xc0027400
c000b45c:	c7 05 00 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029400,0x0
c000b466:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000b470:	e8 7b 50 ff ff       	call   c00004f0 <memset>
c000b475:	c7 04 24 55 18 02 c0 	mov    DWORD PTR [esp],0xc0021855
c000b47c:	e8 dc 77 00 00       	call   c0012c5d <CmOpen(char const*)>
c000b481:	83 c4 10             	add    esp,0x10
c000b484:	85 c0                	test   eax,eax
c000b486:	74 49                	je     c000b4d1 <KeInitialiseSymlinks()+0x8a>
c000b488:	89 c3                	mov    ebx,eax
c000b48a:	50                   	push   eax
c000b48b:	50                   	push   eax
c000b48c:	68 7a 18 02 c0       	push   0xc002187a
c000b491:	53                   	push   ebx
c000b492:	e8 c1 83 00 00       	call   c0013858 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c000b497:	83 c4 10             	add    esp,0x10
c000b49a:	40                   	inc    eax
c000b49b:	74 28                	je     c000b4c5 <KeInitialiseSymlinks()+0x7e>
c000b49d:	50                   	push   eax
c000b49e:	50                   	push   eax
c000b49f:	68 7a 18 02 c0       	push   0xc002187a
c000b4a4:	53                   	push   ebx
c000b4a5:	e8 ae 83 00 00       	call   c0013858 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c000b4aa:	83 c4 0c             	add    esp,0xc
c000b4ad:	8d 54 24 14          	lea    edx,[esp+0x14]
c000b4b1:	52                   	push   edx
c000b4b2:	50                   	push   eax
c000b4b3:	53                   	push   ebx
c000b4b4:	e8 76 7e 00 00       	call   c001332f <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c000b4b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b4bd:	83 c4 10             	add    esp,0x10
c000b4c0:	a3 00 94 02 c0       	mov    ds:0xc0029400,eax
c000b4c5:	83 ec 0c             	sub    esp,0xc
c000b4c8:	53                   	push   ebx
c000b4c9:	e8 ad 78 00 00       	call   c0012d7b <CmClose(Reghive_Tag*)>
c000b4ce:	83 c4 10             	add    esp,0x10
c000b4d1:	53                   	push   ebx
c000b4d2:	53                   	push   ebx
c000b4d3:	ff 35 00 94 02 c0    	push   DWORD PTR ds:0xc0029400
c000b4d9:	68 de 18 02 c0       	push   0xc00218de
c000b4de:	e8 27 f4 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b4e3:	5e                   	pop    esi
c000b4e4:	5f                   	pop    edi
c000b4e5:	6a 00                	push   0x0
c000b4e7:	68 e6 ae 00 c0       	push   0xc000aee6
c000b4ec:	e8 09 59 00 00       	call   c0010dfa <KeRegisterAtexit(void (*)(void*), void*)>
c000b4f1:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b4f8:	e8 d6 c5 ff ff       	call   c0007ad3 <malloc>
c000b4fd:	83 c4 0c             	add    esp,0xc
c000b500:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b506:	68 cf 17 02 c0       	push   0xc00217cf
c000b50b:	50                   	push   eax
c000b50c:	89 c3                	mov    ebx,eax
c000b50e:	e8 b1 06 00 00       	call   c000bbc4 <File::File(char const*, Process*)>
c000b513:	83 c4 10             	add    esp,0x10
c000b516:	85 db                	test   ebx,ebx
c000b518:	75 10                	jne    c000b52a <KeInitialiseSymlinks()+0xe3>
c000b51a:	83 ec 0c             	sub    esp,0xc
c000b51d:	68 fb 18 02 c0       	push   0xc00218fb
c000b522:	e8 e4 60 00 00       	call   c001160b <KePanic(char const*)>
c000b527:	83 c4 10             	add    esp,0x10
c000b52a:	83 ec 0c             	sub    esp,0xc
c000b52d:	53                   	push   ebx
c000b52e:	e8 73 09 00 00       	call   c000bea6 <File::exists()>
c000b533:	83 c4 10             	add    esp,0x10
c000b536:	84 c0                	test   al,al
c000b538:	75 3a                	jne    c000b574 <KeInitialiseSymlinks()+0x12d>
c000b53a:	51                   	push   ecx
c000b53b:	51                   	push   ecx
c000b53c:	6a 12                	push   0x12
c000b53e:	53                   	push   ebx
c000b53f:	e8 9e 06 00 00       	call   c000bbe2 <File::open(FileOpenMode)>
c000b544:	83 c4 10             	add    esp,0x10
c000b547:	85 c0                	test   eax,eax
c000b549:	74 10                	je     c000b55b <KeInitialiseSymlinks()+0x114>
c000b54b:	83 ec 0c             	sub    esp,0xc
c000b54e:	68 18 19 02 c0       	push   0xc0021918
c000b553:	e8 b3 60 00 00       	call   c001160b <KePanic(char const*)>
c000b558:	83 c4 10             	add    esp,0x10
c000b55b:	83 ec 0c             	sub    esp,0xc
c000b55e:	53                   	push   ebx
c000b55f:	e8 dc 06 00 00       	call   c000bc40 <File::close()>
c000b564:	83 c4 10             	add    esp,0x10
c000b567:	85 db                	test   ebx,ebx
c000b569:	0f 84 98 00 00 00    	je     c000b607 <KeInitialiseSymlinks()+0x1c0>
c000b56f:	e9 87 00 00 00       	jmp    c000b5fb <KeInitialiseSymlinks()+0x1b4>
c000b574:	52                   	push   edx
c000b575:	52                   	push   edx
c000b576:	6a 01                	push   0x1
c000b578:	53                   	push   ebx
c000b579:	e8 64 06 00 00       	call   c000bbe2 <File::open(FileOpenMode)>
c000b57e:	83 c4 10             	add    esp,0x10
c000b581:	85 c0                	test   eax,eax
c000b583:	74 10                	je     c000b595 <KeInitialiseSymlinks()+0x14e>
c000b585:	83 ec 0c             	sub    esp,0xc
c000b588:	68 35 19 02 c0       	push   0xc0021935
c000b58d:	e8 79 60 00 00       	call   c001160b <KePanic(char const*)>
c000b592:	83 c4 10             	add    esp,0x10
c000b595:	83 ec 0c             	sub    esp,0xc
c000b598:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b59a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000b59e:	57                   	push   edi
c000b59f:	8d 74 24 20          	lea    esi,[esp+0x20]
c000b5a3:	56                   	push   esi
c000b5a4:	6a 00                	push   0x0
c000b5a6:	68 00 01 00 00       	push   0x100
c000b5ab:	53                   	push   ebx
c000b5ac:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b5af:	83 c4 20             	add    esp,0x20
c000b5b2:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b5ba:	75 33                	jne    c000b5ef <KeInitialiseSymlinks()+0x1a8>
c000b5bc:	83 ec 0c             	sub    esp,0xc
c000b5bf:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b5c1:	57                   	push   edi
c000b5c2:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b5c6:	52                   	push   edx
c000b5c7:	6a 00                	push   0x0
c000b5c9:	6a 08                	push   0x8
c000b5cb:	53                   	push   ebx
c000b5cc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b5cf:	83 c4 20             	add    esp,0x20
c000b5d2:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b5d7:	75 16                	jne    c000b5ef <KeInitialiseSymlinks()+0x1a8>
c000b5d9:	89 f0                	mov    eax,esi
c000b5db:	e8 0b f9 ff ff       	call   c000aeeb <KiGetSymlinkHash(char const*)>
c000b5e0:	ba 01 00 00 00       	mov    edx,0x1
c000b5e5:	0f b7 c0             	movzx  eax,ax
c000b5e8:	e8 41 f7 ff ff       	call   c000ad2e <KiSetHashInTable(unsigned short, bool)>
c000b5ed:	eb a6                	jmp    c000b595 <KeInitialiseSymlinks()+0x14e>
c000b5ef:	83 ec 0c             	sub    esp,0xc
c000b5f2:	53                   	push   ebx
c000b5f3:	e8 48 06 00 00       	call   c000bc40 <File::close()>
c000b5f8:	83 c4 10             	add    esp,0x10
c000b5fb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b5fd:	83 ec 0c             	sub    esp,0xc
c000b600:	53                   	push   ebx
c000b601:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b604:	83 c4 10             	add    esp,0x10
c000b607:	50                   	push   eax
c000b608:	50                   	push   eax
c000b609:	68 50 19 02 c0       	push   0xc0021950
c000b60e:	68 5e 19 02 c0       	push   0xc002195e
c000b613:	e8 f3 fc ff ff       	call   c000b30b <KeCreateSymlink(char const*, char const*)>
c000b618:	81 c4 20 01 00 00    	add    esp,0x120
c000b61e:	5b                   	pop    ebx
c000b61f:	5e                   	pop    esi
c000b620:	5f                   	pop    edi
c000b621:	c3                   	ret    

c000b622 <File::read(unsigned long long, void*, int*)>:
c000b622:	53                   	push   ebx
c000b623:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b627:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b62b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b632:	83 f8 19             	cmp    eax,0x19
c000b635:	77 35                	ja     c000b66c <File::read(unsigned long long, void*, int*)+0x4a>
c000b637:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b63e:	85 c0                	test   eax,eax
c000b640:	74 2a                	je     c000b66c <File::read(unsigned long long, void*, int*)+0x4a>
c000b642:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b648:	85 c0                	test   eax,eax
c000b64a:	74 20                	je     c000b66c <File::read(unsigned long long, void*, int*)+0x4a>
c000b64c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b650:	74 21                	je     c000b673 <File::read(unsigned long long, void*, int*)+0x51>
c000b652:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b654:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b658:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b65e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b662:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b666:	5b                   	pop    ebx
c000b667:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b66a:	ff e0                	jmp    eax
c000b66c:	b8 0b 00 00 00       	mov    eax,0xb
c000b671:	eb 05                	jmp    c000b678 <File::read(unsigned long long, void*, int*)+0x56>
c000b673:	b8 05 00 00 00       	mov    eax,0x5
c000b678:	5b                   	pop    ebx
c000b679:	c3                   	ret    

c000b67a <File::write(unsigned long long, void*, int*)>:
c000b67a:	53                   	push   ebx
c000b67b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b67f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b683:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b68a:	83 f8 19             	cmp    eax,0x19
c000b68d:	77 35                	ja     c000b6c4 <File::write(unsigned long long, void*, int*)+0x4a>
c000b68f:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b696:	85 c0                	test   eax,eax
c000b698:	74 2a                	je     c000b6c4 <File::write(unsigned long long, void*, int*)+0x4a>
c000b69a:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b6a0:	85 c0                	test   eax,eax
c000b6a2:	74 20                	je     c000b6c4 <File::write(unsigned long long, void*, int*)+0x4a>
c000b6a4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b6a8:	74 21                	je     c000b6cb <File::write(unsigned long long, void*, int*)+0x51>
c000b6aa:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b6ac:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b6b0:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b6b6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6be:	5b                   	pop    ebx
c000b6bf:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b6c2:	ff e0                	jmp    eax
c000b6c4:	b8 0b 00 00 00       	mov    eax,0xb
c000b6c9:	eb 05                	jmp    c000b6d0 <File::write(unsigned long long, void*, int*)+0x56>
c000b6cb:	b8 05 00 00 00       	mov    eax,0x5
c000b6d0:	5b                   	pop    ebx
c000b6d1:	c3                   	ret    

c000b6d2 <Directory::read(unsigned long long, void*, int*)>:
c000b6d2:	53                   	push   ebx
c000b6d3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b6d7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b6db:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b6e2:	83 f8 19             	cmp    eax,0x19
c000b6e5:	77 35                	ja     c000b71c <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b6e7:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b6ee:	85 c0                	test   eax,eax
c000b6f0:	74 2a                	je     c000b71c <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b6f2:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b6f8:	85 c0                	test   eax,eax
c000b6fa:	74 20                	je     c000b71c <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b6fc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b700:	74 21                	je     c000b723 <Directory::read(unsigned long long, void*, int*)+0x51>
c000b702:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b704:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b708:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b70e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b712:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b716:	5b                   	pop    ebx
c000b717:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b71a:	ff e0                	jmp    eax
c000b71c:	b8 0b 00 00 00       	mov    eax,0xb
c000b721:	eb 05                	jmp    c000b728 <Directory::read(unsigned long long, void*, int*)+0x56>
c000b723:	b8 05 00 00 00       	mov    eax,0x5
c000b728:	5b                   	pop    ebx
c000b729:	c3                   	ret    

c000b72a <Directory::write(unsigned long long, void*, int*)>:
c000b72a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b72e:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b735:	b8 0b 00 00 00       	mov    eax,0xb
c000b73a:	83 fa 19             	cmp    edx,0x19
c000b73d:	77 18                	ja     c000b757 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b73f:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000b746:	85 d2                	test   edx,edx
c000b748:	74 0d                	je     c000b757 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b74a:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b751:	19 c0                	sbb    eax,eax
c000b753:	83 e0 0a             	and    eax,0xa
c000b756:	40                   	inc    eax
c000b757:	c3                   	ret    

c000b758 <File::isAtty()>:
c000b758:	31 c0                	xor    eax,eax
c000b75a:	c3                   	ret    
c000b75b:	90                   	nop

c000b75c <Directory::isAtty()>:
c000b75c:	31 c0                	xor    eax,eax
c000b75e:	c3                   	ret    
c000b75f:	90                   	nop

c000b760 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b760:	b8 0a 00 00 00       	mov    eax,0xa
c000b765:	c3                   	ret    

c000b766 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b766:	b8 0a 00 00 00       	mov    eax,0xa
c000b76b:	c3                   	ret    

c000b76c <Filesystem::allocateSwapfile(char const*, int)>:
c000b76c:	31 c0                	xor    eax,eax
c000b76e:	31 d2                	xor    edx,edx
c000b770:	c3                   	ret    
c000b771:	90                   	nop

c000b772 <File::~File()>:
c000b772:	83 ec 0c             	sub    esp,0xc
c000b775:	ba 34 1a 02 c0       	mov    edx,0xc0021a34
c000b77a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b77e:	89 10                	mov    DWORD PTR [eax],edx
c000b780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b784:	83 ec 0c             	sub    esp,0xc
c000b787:	50                   	push   eax
c000b788:	e8 ff db ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000b78d:	83 c4 10             	add    esp,0x10
c000b790:	90                   	nop
c000b791:	83 c4 0c             	add    esp,0xc
c000b794:	c3                   	ret    
c000b795:	90                   	nop

c000b796 <File::~File()>:
c000b796:	83 ec 0c             	sub    esp,0xc
c000b799:	83 ec 0c             	sub    esp,0xc
c000b79c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7a0:	e8 cd ff ff ff       	call   c000b772 <File::~File()>
c000b7a5:	83 c4 10             	add    esp,0x10
c000b7a8:	83 ec 08             	sub    esp,0x8
c000b7ab:	68 14 01 00 00       	push   0x114
c000b7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7b4:	e8 53 f0 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b7b9:	83 c4 10             	add    esp,0x10
c000b7bc:	83 c4 0c             	add    esp,0xc
c000b7bf:	c3                   	ret    

c000b7c0 <Directory::~Directory()>:
c000b7c0:	83 ec 0c             	sub    esp,0xc
c000b7c3:	ba 50 1a 02 c0       	mov    edx,0xc0021a50
c000b7c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7cc:	89 10                	mov    DWORD PTR [eax],edx
c000b7ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7d2:	83 ec 0c             	sub    esp,0xc
c000b7d5:	50                   	push   eax
c000b7d6:	e8 b1 db ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000b7db:	83 c4 10             	add    esp,0x10
c000b7de:	90                   	nop
c000b7df:	83 c4 0c             	add    esp,0xc
c000b7e2:	c3                   	ret    
c000b7e3:	90                   	nop

c000b7e4 <Directory::~Directory()>:
c000b7e4:	83 ec 0c             	sub    esp,0xc
c000b7e7:	83 ec 0c             	sub    esp,0xc
c000b7ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7ee:	e8 cd ff ff ff       	call   c000b7c0 <Directory::~Directory()>
c000b7f3:	83 c4 10             	add    esp,0x10
c000b7f6:	83 ec 08             	sub    esp,0x8
c000b7f9:	68 14 01 00 00       	push   0x114
c000b7fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b802:	e8 05 f0 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b807:	83 c4 10             	add    esp,0x10
c000b80a:	83 c4 0c             	add    esp,0xc
c000b80d:	c3                   	ret    

c000b80e <Filesystem::Filesystem()>:
c000b80e:	ba c8 19 02 c0       	mov    edx,0xc00219c8
c000b813:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b817:	89 10                	mov    DWORD PTR [eax],edx
c000b819:	8b 15 04 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029404
c000b81f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b823:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b826:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82a:	a3 04 94 02 c0       	mov    ds:0xc0029404,eax
c000b82f:	90                   	nop
c000b830:	c3                   	ret    
c000b831:	90                   	nop

c000b832 <Filesystem::~Filesystem()>:
c000b832:	ba c8 19 02 c0       	mov    edx,0xc00219c8
c000b837:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b83b:	89 10                	mov    DWORD PTR [eax],edx
c000b83d:	90                   	nop
c000b83e:	c3                   	ret    
c000b83f:	90                   	nop

c000b840 <Filesystem::~Filesystem()>:
c000b840:	83 ec 0c             	sub    esp,0xc
c000b843:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b847:	e8 e6 ff ff ff       	call   c000b832 <Filesystem::~Filesystem()>
c000b84c:	83 c4 04             	add    esp,0x4
c000b84f:	83 ec 08             	sub    esp,0x8
c000b852:	6a 08                	push   0x8
c000b854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b858:	e8 af ef ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b85d:	83 c4 10             	add    esp,0x10
c000b860:	83 c4 0c             	add    esp,0xc
c000b863:	c3                   	ret    

c000b864 <Fs::getcwd(Process*, char*, int)>:
c000b864:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b868:	31 c0                	xor    eax,eax
c000b86a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b86e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b871:	7d 15                	jge    c000b888 <Fs::getcwd(Process*, char*, int)+0x24>
c000b873:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b877:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b87e:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b881:	84 c9                	test   cl,cl
c000b883:	74 06                	je     c000b88b <Fs::getcwd(Process*, char*, int)+0x27>
c000b885:	40                   	inc    eax
c000b886:	eb e2                	jmp    c000b86a <Fs::getcwd(Process*, char*, int)+0x6>
c000b888:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b88b:	31 c0                	xor    eax,eax
c000b88d:	c3                   	ret    

c000b88e <Fs::initVFS()>:
c000b88e:	83 ec 18             	sub    esp,0x18
c000b891:	6a 08                	push   0x8
c000b893:	e8 3b c2 ff ff       	call   c0007ad3 <malloc>
c000b898:	89 04 24             	mov    DWORD PTR [esp],eax
c000b89b:	e8 c8 e3 00 00       	call   c0019c68 <FAT::FAT()>
c000b8a0:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b8a7:	e8 27 c2 ff ff       	call   c0007ad3 <malloc>
c000b8ac:	89 04 24             	mov    DWORD PTR [esp],eax
c000b8af:	e8 e2 f2 00 00       	call   c001ab96 <ISO9660::ISO9660()>
c000b8b4:	83 c4 1c             	add    esp,0x1c
c000b8b7:	c3                   	ret    

c000b8b8 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c000b8b8:	55                   	push   ebp
c000b8b9:	57                   	push   edi
c000b8ba:	56                   	push   esi
c000b8bb:	53                   	push   ebx
c000b8bc:	81 ec 20 04 00 00    	sub    esp,0x420
c000b8c2:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c000b8c9:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c000b8d0:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c000b8d7:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c000b8de:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b8e2:	68 00 04 00 00       	push   0x400
c000b8e7:	6a 00                	push   0x0
c000b8e9:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c000b8ed:	57                   	push   edi
c000b8ee:	e8 fd 4b ff ff       	call   c00004f0 <memset>
c000b8f3:	83 c4 10             	add    esp,0x10
c000b8f6:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c000b8fa:	75 0b                	jne    c000b907 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c000b8fc:	50                   	push   eax
c000b8fd:	50                   	push   eax
c000b8fe:	56                   	push   esi
c000b8ff:	57                   	push   edi
c000b900:	e8 4b 4d ff ff       	call   c0000650 <strcpy>
c000b905:	eb 45                	jmp    c000b94c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c000b907:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000b90a:	83 f8 2f             	cmp    eax,0x2f
c000b90d:	74 05                	je     c000b914 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c000b90f:	83 f8 5c             	cmp    eax,0x5c
c000b912:	75 19                	jne    c000b92d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c000b914:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000b917:	3c 60                	cmp    al,0x60
c000b919:	7e 03                	jle    c000b91e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c000b91b:	83 e8 20             	sub    eax,0x20
c000b91e:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b922:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b929:	50                   	push   eax
c000b92a:	50                   	push   eax
c000b92b:	eb 18                	jmp    c000b945 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c000b92d:	50                   	push   eax
c000b92e:	50                   	push   eax
c000b92f:	55                   	push   ebp
c000b930:	57                   	push   edi
c000b931:	e8 1a 4d ff ff       	call   c0000650 <strcpy>
c000b936:	58                   	pop    eax
c000b937:	5a                   	pop    edx
c000b938:	68 83 29 02 c0       	push   0xc0022983
c000b93d:	57                   	push   edi
c000b93e:	e8 2d 4f ff ff       	call   c0000870 <strcat>
c000b943:	59                   	pop    ecx
c000b944:	5d                   	pop    ebp
c000b945:	56                   	push   esi
c000b946:	57                   	push   edi
c000b947:	e8 24 4f ff ff       	call   c0000870 <strcat>
c000b94c:	83 c4 10             	add    esp,0x10
c000b94f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c000b953:	3c 60                	cmp    al,0x60
c000b955:	7e 03                	jle    c000b95a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c000b957:	83 e8 20             	sub    eax,0x20
c000b95a:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b95e:	be 03 00 00 00       	mov    esi,0x3
c000b963:	88 03                	mov    BYTE PTR [ebx],al
c000b965:	b8 03 00 00 00       	mov    eax,0x3
c000b96a:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b971:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b977:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b97b:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c000b980:	89 fa                	mov    edx,edi
c000b982:	0f be ea             	movsx  ebp,dl
c000b985:	85 ed                	test   ebp,ebp
c000b987:	0f 84 a1 00 00 00    	je     c000ba2e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c000b98d:	8d 56 01             	lea    edx,[esi+0x1]
c000b990:	83 fd 2f             	cmp    ebp,0x2f
c000b993:	74 05                	je     c000b99a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c000b995:	83 fd 5c             	cmp    ebp,0x5c
c000b998:	75 12                	jne    c000b9ac <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c000b99a:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b99f:	89 c5                	mov    ebp,eax
c000b9a1:	74 09                	je     c000b9ac <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c000b9a3:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b9a7:	40                   	inc    eax
c000b9a8:	89 d6                	mov    esi,edx
c000b9aa:	eb cf                	jmp    c000b97b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c000b9ac:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c000b9b1:	89 f9                	mov    ecx,edi
c000b9b3:	0f be e9             	movsx  ebp,cl
c000b9b6:	75 61                	jne    c000ba19 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c000b9b8:	83 fd 2e             	cmp    ebp,0x2e
c000b9bb:	75 5c                	jne    c000ba19 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c000b9bd:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c000b9c2:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c000b9c7:	74 19                	je     c000b9e2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c000b9c9:	83 fd 2e             	cmp    ebp,0x2e
c000b9cc:	74 55                	je     c000ba23 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c000b9ce:	89 f2                	mov    edx,esi
c000b9d0:	42                   	inc    edx
c000b9d1:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c000b9d6:	83 f9 2f             	cmp    ecx,0x2f
c000b9d9:	74 f5                	je     c000b9d0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c000b9db:	83 f9 5c             	cmp    ecx,0x5c
c000b9de:	74 f0                	je     c000b9d0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c000b9e0:	eb c6                	jmp    c000b9a8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b9e2:	83 fd 2e             	cmp    ebp,0x2e
c000b9e5:	74 3c                	je     c000ba23 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c000b9e7:	83 f8 03             	cmp    eax,0x3
c000b9ea:	74 bc                	je     c000b9a8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b9ec:	42                   	inc    edx
c000b9ed:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c000b9f2:	83 f9 2f             	cmp    ecx,0x2f
c000b9f5:	74 f5                	je     c000b9ec <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c000b9f7:	83 f9 5c             	cmp    ecx,0x5c
c000b9fa:	74 f0                	je     c000b9ec <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c000b9fc:	48                   	dec    eax
c000b9fd:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000ba01:	75 06                	jne    c000ba09 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c000ba03:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ba07:	eb f3                	jmp    c000b9fc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c000ba09:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000ba0d:	74 07                	je     c000ba16 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c000ba0f:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ba13:	48                   	dec    eax
c000ba14:	eb f3                	jmp    c000ba09 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c000ba16:	40                   	inc    eax
c000ba17:	eb 8f                	jmp    c000b9a8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000ba19:	83 fd 2f             	cmp    ebp,0x2f
c000ba1c:	74 8a                	je     c000b9a8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000ba1e:	83 fd 5c             	cmp    ebp,0x5c
c000ba21:	74 85                	je     c000b9a8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000ba23:	89 f9                	mov    ecx,edi
c000ba25:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000ba28:	40                   	inc    eax
c000ba29:	e9 7a ff ff ff       	jmp    c000b9a8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000ba2e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ba32:	83 ec 0c             	sub    esp,0xc
c000ba35:	53                   	push   ebx
c000ba36:	e8 45 4b ff ff       	call   c0000580 <strlen>
c000ba3b:	83 c4 10             	add    esp,0x10
c000ba3e:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000ba43:	74 1c                	je     c000ba61 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c000ba45:	83 ec 0c             	sub    esp,0xc
c000ba48:	53                   	push   ebx
c000ba49:	e8 32 4b ff ff       	call   c0000580 <strlen>
c000ba4e:	83 c4 10             	add    esp,0x10
c000ba51:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000ba56:	74 09                	je     c000ba61 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c000ba58:	31 ff                	xor    edi,edi
c000ba5a:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c000ba5f:	eb 5c                	jmp    c000babd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c000ba61:	83 ec 0c             	sub    esp,0xc
c000ba64:	53                   	push   ebx
c000ba65:	e8 16 4b ff ff       	call   c0000580 <strlen>
c000ba6a:	83 c4 10             	add    esp,0x10
c000ba6d:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000ba72:	74 e4                	je     c000ba58 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c000ba74:	83 ec 0c             	sub    esp,0xc
c000ba77:	53                   	push   ebx
c000ba78:	e8 03 4b ff ff       	call   c0000580 <strlen>
c000ba7d:	83 c4 10             	add    esp,0x10
c000ba80:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000ba85:	eb ab                	jmp    c000ba32 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c000ba87:	52                   	push   edx
c000ba88:	52                   	push   edx
c000ba89:	53                   	push   ebx
c000ba8a:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000ba8e:	55                   	push   ebp
c000ba8f:	e8 bc 4b ff ff       	call   c0000650 <strcpy>
c000ba94:	59                   	pop    ecx
c000ba95:	58                   	pop    eax
c000ba96:	53                   	push   ebx
c000ba97:	55                   	push   ebp
c000ba98:	e8 c7 f6 ff ff       	call   c000b164 <KeDereferenceSymlink(char const*, char*)>
c000ba9d:	83 c4 10             	add    esp,0x10
c000baa0:	48                   	dec    eax
c000baa1:	75 37                	jne    c000bada <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c000baa3:	50                   	push   eax
c000baa4:	53                   	push   ebx
c000baa5:	55                   	push   ebp
c000baa6:	68 7c 19 02 c0       	push   0xc002197c
c000baab:	e8 5a ee ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000bab0:	8d 47 01             	lea    eax,[edi+0x1]
c000bab3:	83 c4 10             	add    esp,0x10
c000bab6:	83 ff 14             	cmp    edi,0x14
c000bab9:	74 08                	je     c000bac3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20b>
c000babb:	89 c7                	mov    edi,eax
c000babd:	85 f6                	test   esi,esi
c000babf:	75 c6                	jne    c000ba87 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c000bac1:	eb 17                	jmp    c000bada <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c000bac3:	83 ec 0c             	sub    esp,0xc
c000bac6:	bf 15 00 00 00       	mov    edi,0x15
c000bacb:	68 97 19 02 c0       	push   0xc0021997
c000bad0:	e8 36 5b 00 00       	call   c001160b <KePanic(char const*)>
c000bad5:	83 c4 10             	add    esp,0x10
c000bad8:	eb e3                	jmp    c000babd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c000bada:	81 c4 1c 04 00 00    	add    esp,0x41c
c000bae0:	5b                   	pop    ebx
c000bae1:	5e                   	pop    esi
c000bae2:	5f                   	pop    edi
c000bae3:	5d                   	pop    ebp
c000bae4:	c3                   	ret    
c000bae5:	90                   	nop

c000bae6 <File::File(char const*, Process*, bool)>:
c000bae6:	83 ec 1c             	sub    esp,0x1c
c000bae9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000baed:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000baf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baf5:	83 ec 08             	sub    esp,0x8
c000baf8:	6a 00                	push   0x0
c000bafa:	50                   	push   eax
c000bafb:	e8 a6 d6 ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000bb00:	83 c4 10             	add    esp,0x10
c000bb03:	ba 34 1a 02 c0       	mov    edx,0xc0021a34
c000bb08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb0c:	89 10                	mov    DWORD PTR [eax],edx
c000bb0e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000bb13:	85 c0                	test   eax,eax
c000bb15:	74 0f                	je     c000bb26 <File::File(char const*, Process*, bool)+0x40>
c000bb17:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000bb1c:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000bb20:	74 04                	je     c000bb26 <File::File(char const*, Process*, bool)+0x40>
c000bb22:	b0 01                	mov    al,0x1
c000bb24:	eb 02                	jmp    c000bb28 <File::File(char const*, Process*, bool)+0x42>
c000bb26:	b0 00                	mov    al,0x0
c000bb28:	0f b6 c0             	movzx  eax,al
c000bb2b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bb2f:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000bb35:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bb39:	83 c2 0d             	add    edx,0xd
c000bb3c:	50                   	push   eax
c000bb3d:	51                   	push   ecx
c000bb3e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb42:	52                   	push   edx
c000bb43:	e8 70 fd ff ff       	call   c000b8b8 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bb48:	83 c4 10             	add    esp,0x10
c000bb4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb4f:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000bb52:	83 e8 41             	sub    eax,0x41
c000bb55:	88 c2                	mov    dl,al
c000bb57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb5b:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000bb61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb65:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000bb69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb6d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb73:	0f b6 c0             	movzx  eax,al
c000bb76:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb7d:	85 c0                	test   eax,eax
c000bb7f:	74 3e                	je     c000bbbf <File::File(char const*, Process*, bool)+0xd9>
c000bb81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb85:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb8b:	0f b6 c0             	movzx  eax,al
c000bb8e:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb95:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bb9b:	85 c0                	test   eax,eax
c000bb9d:	75 20                	jne    c000bbbf <File::File(char const*, Process*, bool)+0xd9>
c000bb9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bba3:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bba9:	0f b6 c0             	movzx  eax,al
c000bbac:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bbb3:	83 ec 0c             	sub    esp,0xc
c000bbb6:	50                   	push   eax
c000bbb7:	e8 b0 21 00 00       	call   c000dd6c <LogicalDisk::mount()>
c000bbbc:	83 c4 10             	add    esp,0x10
c000bbbf:	90                   	nop
c000bbc0:	83 c4 1c             	add    esp,0x1c
c000bbc3:	c3                   	ret    

c000bbc4 <File::File(char const*, Process*)>:
c000bbc4:	83 ec 0c             	sub    esp,0xc
c000bbc7:	6a 01                	push   0x1
c000bbc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbcd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbd1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbd5:	e8 0c ff ff ff       	call   c000bae6 <File::File(char const*, Process*, bool)>
c000bbda:	83 c4 10             	add    esp,0x10
c000bbdd:	90                   	nop
c000bbde:	83 c4 0c             	add    esp,0xc
c000bbe1:	c3                   	ret    

c000bbe2 <File::open(FileOpenMode)>:
c000bbe2:	53                   	push   ebx
c000bbe3:	b8 0b 00 00 00       	mov    eax,0xb
c000bbe8:	83 ec 08             	sub    esp,0x8
c000bbeb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bbef:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000bbf6:	83 fa 19             	cmp    edx,0x19
c000bbf9:	77 40                	ja     c000bc3b <File::open(FileOpenMode)+0x59>
c000bbfb:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bc02:	85 d2                	test   edx,edx
c000bc04:	74 35                	je     c000bc3b <File::open(FileOpenMode)+0x59>
c000bc06:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bc0c:	85 d2                	test   edx,edx
c000bc0e:	74 2b                	je     c000bc3b <File::open(FileOpenMode)+0x59>
c000bc10:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000bc14:	b8 06 00 00 00       	mov    eax,0x6
c000bc19:	75 20                	jne    c000bc3b <File::open(FileOpenMode)+0x59>
c000bc1b:	8b 02                	mov    eax,DWORD PTR [edx]
c000bc1d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000bc23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc27:	51                   	push   ecx
c000bc28:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000bc2b:	51                   	push   ecx
c000bc2c:	52                   	push   edx
c000bc2d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bc30:	83 c4 10             	add    esp,0x10
c000bc33:	85 c0                	test   eax,eax
c000bc35:	75 04                	jne    c000bc3b <File::open(FileOpenMode)+0x59>
c000bc37:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bc3b:	83 c4 08             	add    esp,0x8
c000bc3e:	5b                   	pop    ebx
c000bc3f:	c3                   	ret    

c000bc40 <File::close()>:
c000bc40:	53                   	push   ebx
c000bc41:	b8 0b 00 00 00       	mov    eax,0xb
c000bc46:	83 ec 08             	sub    esp,0x8
c000bc49:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bc4d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bc54:	83 f9 19             	cmp    ecx,0x19
c000bc57:	77 41                	ja     c000bc9a <File::close()+0x5a>
c000bc59:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000bc60:	85 db                	test   ebx,ebx
c000bc62:	74 36                	je     c000bc9a <File::close()+0x5a>
c000bc64:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bc6b:	74 2d                	je     c000bc9a <File::close()+0x5a>
c000bc6d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bc71:	b8 05 00 00 00       	mov    eax,0x5
c000bc76:	74 22                	je     c000bc9a <File::close()+0x5a>
c000bc78:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bc7c:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000bc83:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bc89:	53                   	push   ebx
c000bc8a:	53                   	push   ebx
c000bc8b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bc8d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bc93:	50                   	push   eax
c000bc94:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000bc97:	83 c4 10             	add    esp,0x10
c000bc9a:	83 c4 08             	add    esp,0x8
c000bc9d:	5b                   	pop    ebx
c000bc9e:	c3                   	ret    
c000bc9f:	90                   	nop

c000bca0 <File::seek(unsigned long long)>:
c000bca0:	56                   	push   esi
c000bca1:	b8 0b 00 00 00       	mov    eax,0xb
c000bca6:	53                   	push   ebx
c000bca7:	51                   	push   ecx
c000bca8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bcac:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bcb0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bcb4:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bcbb:	83 fa 19             	cmp    edx,0x19
c000bcbe:	77 31                	ja     c000bcf1 <File::seek(unsigned long long)+0x51>
c000bcc0:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bcc7:	85 d2                	test   edx,edx
c000bcc9:	74 26                	je     c000bcf1 <File::seek(unsigned long long)+0x51>
c000bccb:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bcd1:	85 d2                	test   edx,edx
c000bcd3:	74 1c                	je     c000bcf1 <File::seek(unsigned long long)+0x51>
c000bcd5:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bcd9:	b8 05 00 00 00       	mov    eax,0x5
c000bcde:	74 11                	je     c000bcf1 <File::seek(unsigned long long)+0x51>
c000bce0:	8b 02                	mov    eax,DWORD PTR [edx]
c000bce2:	53                   	push   ebx
c000bce3:	51                   	push   ecx
c000bce4:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bcea:	52                   	push   edx
c000bceb:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bcee:	83 c4 10             	add    esp,0x10
c000bcf1:	5a                   	pop    edx
c000bcf2:	5b                   	pop    ebx
c000bcf3:	5e                   	pop    esi
c000bcf4:	c3                   	ret    
c000bcf5:	90                   	nop

c000bcf6 <File::truncate(unsigned long long)>:
c000bcf6:	56                   	push   esi
c000bcf7:	b8 0b 00 00 00       	mov    eax,0xb
c000bcfc:	53                   	push   ebx
c000bcfd:	51                   	push   ecx
c000bcfe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bd02:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bd06:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bd0a:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bd11:	83 fa 19             	cmp    edx,0x19
c000bd14:	77 31                	ja     c000bd47 <File::truncate(unsigned long long)+0x51>
c000bd16:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bd1d:	85 d2                	test   edx,edx
c000bd1f:	74 26                	je     c000bd47 <File::truncate(unsigned long long)+0x51>
c000bd21:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bd27:	85 d2                	test   edx,edx
c000bd29:	74 1c                	je     c000bd47 <File::truncate(unsigned long long)+0x51>
c000bd2b:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bd2f:	b8 05 00 00 00       	mov    eax,0x5
c000bd34:	74 11                	je     c000bd47 <File::truncate(unsigned long long)+0x51>
c000bd36:	8b 02                	mov    eax,DWORD PTR [edx]
c000bd38:	53                   	push   ebx
c000bd39:	51                   	push   ecx
c000bd3a:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bd40:	52                   	push   edx
c000bd41:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000bd44:	83 c4 10             	add    esp,0x10
c000bd47:	5a                   	pop    edx
c000bd48:	5b                   	pop    ebx
c000bd49:	5e                   	pop    esi
c000bd4a:	c3                   	ret    
c000bd4b:	90                   	nop

c000bd4c <File::tell(unsigned long long*)>:
c000bd4c:	83 ec 0c             	sub    esp,0xc
c000bd4f:	b8 0b 00 00 00       	mov    eax,0xb
c000bd54:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bd58:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000bd5f:	83 fa 19             	cmp    edx,0x19
c000bd62:	77 34                	ja     c000bd98 <File::tell(unsigned long long*)+0x4c>
c000bd64:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bd6b:	85 d2                	test   edx,edx
c000bd6d:	74 29                	je     c000bd98 <File::tell(unsigned long long*)+0x4c>
c000bd6f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bd75:	85 d2                	test   edx,edx
c000bd77:	74 1f                	je     c000bd98 <File::tell(unsigned long long*)+0x4c>
c000bd79:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000bd7d:	b8 05 00 00 00       	mov    eax,0x5
c000bd82:	74 14                	je     c000bd98 <File::tell(unsigned long long*)+0x4c>
c000bd84:	50                   	push   eax
c000bd85:	8b 02                	mov    eax,DWORD PTR [edx]
c000bd87:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd8b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000bd91:	52                   	push   edx
c000bd92:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000bd95:	83 c4 10             	add    esp,0x10
c000bd98:	83 c4 0c             	add    esp,0xc
c000bd9b:	c3                   	ret    

c000bd9c <File::rewind()>:
c000bd9c:	83 ec 10             	sub    esp,0x10
c000bd9f:	6a 00                	push   0x0
c000bda1:	6a 00                	push   0x0
c000bda3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bda7:	e8 f4 fe ff ff       	call   c000bca0 <File::seek(unsigned long long)>
c000bdac:	83 c4 1c             	add    esp,0x1c
c000bdaf:	c3                   	ret    

c000bdb0 <File::unlink()>:
c000bdb0:	83 ec 0c             	sub    esp,0xc
c000bdb3:	b8 0b 00 00 00       	mov    eax,0xb
c000bdb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bdbc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bdc3:	83 f9 19             	cmp    ecx,0x19
c000bdc6:	77 2f                	ja     c000bdf7 <File::unlink()+0x47>
c000bdc8:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bdcf:	85 c9                	test   ecx,ecx
c000bdd1:	74 24                	je     c000bdf7 <File::unlink()+0x47>
c000bdd3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bdd9:	85 c9                	test   ecx,ecx
c000bddb:	74 1a                	je     c000bdf7 <File::unlink()+0x47>
c000bddd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bde1:	b8 06 00 00 00       	mov    eax,0x6
c000bde6:	75 0f                	jne    c000bdf7 <File::unlink()+0x47>
c000bde8:	50                   	push   eax
c000bde9:	83 c2 0d             	add    edx,0xd
c000bdec:	50                   	push   eax
c000bded:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bdef:	52                   	push   edx
c000bdf0:	51                   	push   ecx
c000bdf1:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bdf4:	83 c4 10             	add    esp,0x10
c000bdf7:	83 c4 0c             	add    esp,0xc
c000bdfa:	c3                   	ret    
c000bdfb:	90                   	nop

c000bdfc <File::rename(char const*)>:
c000bdfc:	83 ec 0c             	sub    esp,0xc
c000bdff:	b8 0b 00 00 00       	mov    eax,0xb
c000be04:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be08:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be0f:	83 f9 19             	cmp    ecx,0x19
c000be12:	77 32                	ja     c000be46 <File::rename(char const*)+0x4a>
c000be14:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be1b:	85 c9                	test   ecx,ecx
c000be1d:	74 27                	je     c000be46 <File::rename(char const*)+0x4a>
c000be1f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be25:	85 c9                	test   ecx,ecx
c000be27:	74 1d                	je     c000be46 <File::rename(char const*)+0x4a>
c000be29:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be2d:	b8 06 00 00 00       	mov    eax,0x6
c000be32:	75 12                	jne    c000be46 <File::rename(char const*)+0x4a>
c000be34:	50                   	push   eax
c000be35:	83 c2 0d             	add    edx,0xd
c000be38:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be3a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000be3e:	52                   	push   edx
c000be3f:	51                   	push   ecx
c000be40:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000be43:	83 c4 10             	add    esp,0x10
c000be46:	83 c4 0c             	add    esp,0xc
c000be49:	c3                   	ret    

c000be4a <File::chfatattr(unsigned char, unsigned char)>:
c000be4a:	57                   	push   edi
c000be4b:	b8 0b 00 00 00       	mov    eax,0xb
c000be50:	56                   	push   esi
c000be51:	53                   	push   ebx
c000be52:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be56:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000be5a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000be5e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be65:	83 f9 19             	cmp    ecx,0x19
c000be68:	77 37                	ja     c000bea1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be6a:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be71:	85 c9                	test   ecx,ecx
c000be73:	74 2c                	je     c000bea1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be75:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be7b:	85 c9                	test   ecx,ecx
c000be7d:	74 22                	je     c000bea1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be7f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be83:	b8 06 00 00 00       	mov    eax,0x6
c000be88:	75 17                	jne    c000bea1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be8a:	89 f0                	mov    eax,esi
c000be8c:	8b 39                	mov    edi,DWORD PTR [ecx]
c000be8e:	0f b6 db             	movzx  ebx,bl
c000be91:	0f b6 f0             	movzx  esi,al
c000be94:	83 c2 0d             	add    edx,0xd
c000be97:	56                   	push   esi
c000be98:	53                   	push   ebx
c000be99:	52                   	push   edx
c000be9a:	51                   	push   ecx
c000be9b:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000be9e:	83 c4 10             	add    esp,0x10
c000bea1:	5b                   	pop    ebx
c000bea2:	5e                   	pop    esi
c000bea3:	5f                   	pop    edi
c000bea4:	c3                   	ret    
c000bea5:	90                   	nop

c000bea6 <File::exists()>:
c000bea6:	83 ec 0c             	sub    esp,0xc
c000bea9:	31 c0                	xor    eax,eax
c000beab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000beaf:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000beb6:	83 f9 19             	cmp    ecx,0x19
c000beb9:	77 24                	ja     c000bedf <File::exists()+0x39>
c000bebb:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bec2:	85 c9                	test   ecx,ecx
c000bec4:	74 19                	je     c000bedf <File::exists()+0x39>
c000bec6:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000becc:	85 c9                	test   ecx,ecx
c000bece:	74 0f                	je     c000bedf <File::exists()+0x39>
c000bed0:	50                   	push   eax
c000bed1:	83 c2 0d             	add    edx,0xd
c000bed4:	50                   	push   eax
c000bed5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bed7:	52                   	push   edx
c000bed8:	51                   	push   ecx
c000bed9:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000bedc:	83 c4 10             	add    esp,0x10
c000bedf:	83 c4 0c             	add    esp,0xc
c000bee2:	c3                   	ret    
c000bee3:	90                   	nop

c000bee4 <File::stat(unsigned long long*, bool*)>:
c000bee4:	56                   	push   esi
c000bee5:	53                   	push   ebx
c000bee6:	50                   	push   eax
c000bee7:	b8 0b 00 00 00       	mov    eax,0xb
c000beec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bef0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bef4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bef8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000beff:	83 f9 19             	cmp    ecx,0x19
c000bf02:	77 3d                	ja     c000bf41 <File::stat(unsigned long long*, bool*)+0x5d>
c000bf04:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bf0b:	85 c9                	test   ecx,ecx
c000bf0d:	74 32                	je     c000bf41 <File::stat(unsigned long long*, bool*)+0x5d>
c000bf0f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bf15:	85 c9                	test   ecx,ecx
c000bf17:	74 28                	je     c000bf41 <File::stat(unsigned long long*, bool*)+0x5d>
c000bf19:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bf1d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bf1f:	74 13                	je     c000bf34 <File::stat(unsigned long long*, bool*)+0x50>
c000bf21:	83 ec 04             	sub    esp,0x4
c000bf24:	56                   	push   esi
c000bf25:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bf2b:	51                   	push   ecx
c000bf2c:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000bf2f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000bf32:	eb 0a                	jmp    c000bf3e <File::stat(unsigned long long*, bool*)+0x5a>
c000bf34:	53                   	push   ebx
c000bf35:	83 c2 0d             	add    edx,0xd
c000bf38:	56                   	push   esi
c000bf39:	52                   	push   edx
c000bf3a:	51                   	push   ecx
c000bf3b:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000bf3e:	83 c4 10             	add    esp,0x10
c000bf41:	5a                   	pop    edx
c000bf42:	5b                   	pop    ebx
c000bf43:	5e                   	pop    esi
c000bf44:	c3                   	ret    

c000bf45 <Fs::setcwd(Process*, char*)>:
c000bf45:	55                   	push   ebp
c000bf46:	57                   	push   edi
c000bf47:	56                   	push   esi
c000bf48:	53                   	push   ebx
c000bf49:	81 ec 1c 02 00 00    	sub    esp,0x21c
c000bf4f:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000bf56:	6a 00                	push   0x0
c000bf58:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bf5e:	57                   	push   edi
c000bf5f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000bf66:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000bf6a:	56                   	push   esi
c000bf6b:	e8 48 f9 ff ff       	call   c000b8b8 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bf70:	89 34 24             	mov    DWORD PTR [esp],esi
c000bf73:	e8 08 46 ff ff       	call   c0000580 <strlen>
c000bf78:	83 c4 10             	add    esp,0x10
c000bf7b:	83 f8 02             	cmp    eax,0x2
c000bf7e:	77 15                	ja     c000bf95 <Fs::setcwd(Process*, char*)+0x50>
c000bf80:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bf85:	83 eb 41             	sub    ebx,0x41
c000bf88:	8b 04 9d 80 b8 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd4780]
c000bf8f:	85 c0                	test   eax,eax
c000bf91:	75 1c                	jne    c000bfaf <Fs::setcwd(Process*, char*)+0x6a>
c000bf93:	eb 2f                	jmp    c000bfc4 <Fs::setcwd(Process*, char*)+0x7f>
c000bf95:	83 ec 0c             	sub    esp,0xc
c000bf98:	56                   	push   esi
c000bf99:	e8 e2 45 ff ff       	call   c0000580 <strlen>
c000bf9e:	83 c4 10             	add    esp,0x10
c000bfa1:	83 f8 03             	cmp    eax,0x3
c000bfa4:	75 57                	jne    c000bffd <Fs::setcwd(Process*, char*)+0xb8>
c000bfa6:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bfab:	75 50                	jne    c000bffd <Fs::setcwd(Process*, char*)+0xb8>
c000bfad:	eb d1                	jmp    c000bf80 <Fs::setcwd(Process*, char*)+0x3b>
c000bfaf:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bfb6:	75 0c                	jne    c000bfc4 <Fs::setcwd(Process*, char*)+0x7f>
c000bfb8:	83 ec 0c             	sub    esp,0xc
c000bfbb:	50                   	push   eax
c000bfbc:	e8 ab 1d 00 00       	call   c000dd6c <LogicalDisk::mount()>
c000bfc1:	83 c4 10             	add    esp,0x10
c000bfc4:	83 fb 19             	cmp    ebx,0x19
c000bfc7:	b8 03 00 00 00       	mov    eax,0x3
c000bfcc:	0f 87 c6 00 00 00    	ja     c000c098 <Fs::setcwd(Process*, char*)+0x153>
c000bfd2:	8b 14 9d 80 b8 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd4780]
c000bfd9:	b8 05 00 00 00       	mov    eax,0x5
c000bfde:	85 d2                	test   edx,edx
c000bfe0:	0f 84 b2 00 00 00    	je     c000c098 <Fs::setcwd(Process*, char*)+0x153>
c000bfe6:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bfed:	b8 06 00 00 00       	mov    eax,0x6
c000bff2:	0f 85 92 00 00 00    	jne    c000c08a <Fs::setcwd(Process*, char*)+0x145>
c000bff8:	e9 9b 00 00 00       	jmp    c000c098 <Fs::setcwd(Process*, char*)+0x153>
c000bffd:	83 ec 0c             	sub    esp,0xc
c000c000:	68 14 01 00 00       	push   0x114
c000c005:	e8 c9 ba ff ff       	call   c0007ad3 <malloc>
c000c00a:	83 c4 0c             	add    esp,0xc
c000c00d:	55                   	push   ebp
c000c00e:	56                   	push   esi
c000c00f:	50                   	push   eax
c000c010:	89 c3                	mov    ebx,eax
c000c012:	e8 ad fb ff ff       	call   c000bbc4 <File::File(char const*, Process*)>
c000c017:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000c01c:	83 c4 0c             	add    esp,0xc
c000c01f:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000c023:	50                   	push   eax
c000c024:	8d 44 24 10          	lea    eax,[esp+0x10]
c000c028:	50                   	push   eax
c000c029:	53                   	push   ebx
c000c02a:	e8 b5 fe ff ff       	call   c000bee4 <File::stat(unsigned long long*, bool*)>
c000c02f:	83 c4 10             	add    esp,0x10
c000c032:	83 f8 02             	cmp    eax,0x2
c000c035:	74 27                	je     c000c05e <Fs::setcwd(Process*, char*)+0x119>
c000c037:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000c03c:	75 1c                	jne    c000c05a <Fs::setcwd(Process*, char*)+0x115>
c000c03e:	85 db                	test   ebx,ebx
c000c040:	b8 02 00 00 00       	mov    eax,0x2
c000c045:	74 51                	je     c000c098 <Fs::setcwd(Process*, char*)+0x153>
c000c047:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c049:	83 ec 0c             	sub    esp,0xc
c000c04c:	53                   	push   ebx
c000c04d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c050:	83 c4 10             	add    esp,0x10
c000c053:	b8 02 00 00 00       	mov    eax,0x2
c000c058:	eb 3e                	jmp    c000c098 <Fs::setcwd(Process*, char*)+0x153>
c000c05a:	85 c0                	test   eax,eax
c000c05c:	74 1c                	je     c000c07a <Fs::setcwd(Process*, char*)+0x135>
c000c05e:	85 db                	test   ebx,ebx
c000c060:	b8 01 00 00 00       	mov    eax,0x1
c000c065:	74 31                	je     c000c098 <Fs::setcwd(Process*, char*)+0x153>
c000c067:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c069:	83 ec 0c             	sub    esp,0xc
c000c06c:	53                   	push   ebx
c000c06d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c070:	83 c4 10             	add    esp,0x10
c000c073:	b8 01 00 00 00       	mov    eax,0x1
c000c078:	eb 1e                	jmp    c000c098 <Fs::setcwd(Process*, char*)+0x153>
c000c07a:	85 db                	test   ebx,ebx
c000c07c:	74 0c                	je     c000c08a <Fs::setcwd(Process*, char*)+0x145>
c000c07e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c080:	83 ec 0c             	sub    esp,0xc
c000c083:	53                   	push   ebx
c000c084:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c087:	83 c4 10             	add    esp,0x10
c000c08a:	50                   	push   eax
c000c08b:	50                   	push   eax
c000c08c:	56                   	push   esi
c000c08d:	57                   	push   edi
c000c08e:	e8 bd 45 ff ff       	call   c0000650 <strcpy>
c000c093:	83 c4 10             	add    esp,0x10
c000c096:	31 c0                	xor    eax,eax
c000c098:	81 c4 1c 02 00 00    	add    esp,0x21c
c000c09e:	5b                   	pop    ebx
c000c09f:	5e                   	pop    esi
c000c0a0:	5f                   	pop    edi
c000c0a1:	5d                   	pop    ebp
c000c0a2:	c3                   	ret    
c000c0a3:	90                   	nop

c000c0a4 <Directory::Directory(char const*, Process*)>:
c000c0a4:	83 ec 0c             	sub    esp,0xc
c000c0a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0ab:	83 ec 08             	sub    esp,0x8
c000c0ae:	6a 00                	push   0x0
c000c0b0:	50                   	push   eax
c000c0b1:	e8 f0 d0 ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000c0b6:	83 c4 10             	add    esp,0x10
c000c0b9:	ba 50 1a 02 c0       	mov    edx,0xc0021a50
c000c0be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0c2:	89 10                	mov    DWORD PTR [eax],edx
c000c0c4:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000c0c9:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c0cd:	0f 95 c0             	setne  al
c000c0d0:	0f b6 c0             	movzx  eax,al
c000c0d3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c0d7:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000c0dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c0e1:	83 c2 0d             	add    edx,0xd
c000c0e4:	50                   	push   eax
c000c0e5:	51                   	push   ecx
c000c0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ea:	52                   	push   edx
c000c0eb:	e8 c8 f7 ff ff       	call   c000b8b8 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000c0f0:	83 c4 10             	add    esp,0x10
c000c0f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0f7:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000c0fa:	83 e8 41             	sub    eax,0x41
c000c0fd:	88 c2                	mov    dl,al
c000c0ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c103:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000c109:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c10d:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000c111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c115:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c11b:	0f b6 c0             	movzx  eax,al
c000c11e:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c125:	85 c0                	test   eax,eax
c000c127:	74 3e                	je     c000c167 <Directory::Directory(char const*, Process*)+0xc3>
c000c129:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c12d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c133:	0f b6 c0             	movzx  eax,al
c000c136:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c13d:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c143:	85 c0                	test   eax,eax
c000c145:	75 20                	jne    c000c167 <Directory::Directory(char const*, Process*)+0xc3>
c000c147:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c14b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c151:	0f b6 c0             	movzx  eax,al
c000c154:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c15b:	83 ec 0c             	sub    esp,0xc
c000c15e:	50                   	push   eax
c000c15f:	e8 08 1c 00 00       	call   c000dd6c <LogicalDisk::mount()>
c000c164:	83 c4 10             	add    esp,0x10
c000c167:	90                   	nop
c000c168:	83 c4 0c             	add    esp,0xc
c000c16b:	c3                   	ret    

c000c16c <Directory::open()>:
c000c16c:	53                   	push   ebx
c000c16d:	b8 0b 00 00 00       	mov    eax,0xb
c000c172:	83 ec 08             	sub    esp,0x8
c000c175:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c179:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000c180:	83 fa 19             	cmp    edx,0x19
c000c183:	77 3d                	ja     c000c1c2 <Directory::open()+0x56>
c000c185:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000c18c:	85 d2                	test   edx,edx
c000c18e:	74 32                	je     c000c1c2 <Directory::open()+0x56>
c000c190:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000c196:	85 d2                	test   edx,edx
c000c198:	74 28                	je     c000c1c2 <Directory::open()+0x56>
c000c19a:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000c19e:	b8 06 00 00 00       	mov    eax,0x6
c000c1a3:	75 1d                	jne    c000c1c2 <Directory::open()+0x56>
c000c1a5:	50                   	push   eax
c000c1a6:	8b 02                	mov    eax,DWORD PTR [edx]
c000c1a8:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000c1ae:	51                   	push   ecx
c000c1af:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000c1b2:	51                   	push   ecx
c000c1b3:	52                   	push   edx
c000c1b4:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000c1b7:	83 c4 10             	add    esp,0x10
c000c1ba:	85 c0                	test   eax,eax
c000c1bc:	75 04                	jne    c000c1c2 <Directory::open()+0x56>
c000c1be:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000c1c2:	83 c4 08             	add    esp,0x8
c000c1c5:	5b                   	pop    ebx
c000c1c6:	c3                   	ret    
c000c1c7:	90                   	nop

c000c1c8 <Directory::close()>:
c000c1c8:	53                   	push   ebx
c000c1c9:	b8 0b 00 00 00       	mov    eax,0xb
c000c1ce:	83 ec 08             	sub    esp,0x8
c000c1d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c1d5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c1dc:	83 f9 19             	cmp    ecx,0x19
c000c1df:	77 41                	ja     c000c222 <Directory::close()+0x5a>
c000c1e1:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000c1e8:	85 db                	test   ebx,ebx
c000c1ea:	74 36                	je     c000c222 <Directory::close()+0x5a>
c000c1ec:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000c1f3:	74 2d                	je     c000c222 <Directory::close()+0x5a>
c000c1f5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c1f9:	b8 05 00 00 00       	mov    eax,0x5
c000c1fe:	74 22                	je     c000c222 <Directory::close()+0x5a>
c000c200:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000c204:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000c20b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c211:	53                   	push   ebx
c000c212:	53                   	push   ebx
c000c213:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c215:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000c21b:	50                   	push   eax
c000c21c:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000c21f:	83 c4 10             	add    esp,0x10
c000c222:	83 c4 08             	add    esp,0x8
c000c225:	5b                   	pop    ebx
c000c226:	c3                   	ret    
c000c227:	90                   	nop

c000c228 <Directory::unlink()>:
c000c228:	83 ec 0c             	sub    esp,0xc
c000c22b:	b8 0b 00 00 00       	mov    eax,0xb
c000c230:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c234:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c23b:	83 f9 19             	cmp    ecx,0x19
c000c23e:	77 2f                	ja     c000c26f <Directory::unlink()+0x47>
c000c240:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c247:	85 c9                	test   ecx,ecx
c000c249:	74 24                	je     c000c26f <Directory::unlink()+0x47>
c000c24b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c251:	85 c9                	test   ecx,ecx
c000c253:	74 1a                	je     c000c26f <Directory::unlink()+0x47>
c000c255:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c259:	b8 06 00 00 00       	mov    eax,0x6
c000c25e:	75 0f                	jne    c000c26f <Directory::unlink()+0x47>
c000c260:	50                   	push   eax
c000c261:	83 c2 0d             	add    edx,0xd
c000c264:	50                   	push   eax
c000c265:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c267:	52                   	push   edx
c000c268:	51                   	push   ecx
c000c269:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000c26c:	83 c4 10             	add    esp,0x10
c000c26f:	83 c4 0c             	add    esp,0xc
c000c272:	c3                   	ret    
c000c273:	90                   	nop

c000c274 <Directory::rename(char const*)>:
c000c274:	83 ec 0c             	sub    esp,0xc
c000c277:	b8 0b 00 00 00       	mov    eax,0xb
c000c27c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c280:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c287:	83 f9 19             	cmp    ecx,0x19
c000c28a:	77 32                	ja     c000c2be <Directory::rename(char const*)+0x4a>
c000c28c:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c293:	85 c9                	test   ecx,ecx
c000c295:	74 27                	je     c000c2be <Directory::rename(char const*)+0x4a>
c000c297:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c29d:	85 c9                	test   ecx,ecx
c000c29f:	74 1d                	je     c000c2be <Directory::rename(char const*)+0x4a>
c000c2a1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c2a5:	b8 06 00 00 00       	mov    eax,0x6
c000c2aa:	75 12                	jne    c000c2be <Directory::rename(char const*)+0x4a>
c000c2ac:	50                   	push   eax
c000c2ad:	83 c2 0d             	add    edx,0xd
c000c2b0:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c2b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c2b6:	52                   	push   edx
c000c2b7:	51                   	push   ecx
c000c2b8:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000c2bb:	83 c4 10             	add    esp,0x10
c000c2be:	83 c4 0c             	add    esp,0xc
c000c2c1:	c3                   	ret    

c000c2c2 <Directory::exists()>:
c000c2c2:	83 ec 0c             	sub    esp,0xc
c000c2c5:	31 c0                	xor    eax,eax
c000c2c7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c2cb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c2d2:	83 f9 19             	cmp    ecx,0x19
c000c2d5:	77 24                	ja     c000c2fb <Directory::exists()+0x39>
c000c2d7:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c2de:	85 c9                	test   ecx,ecx
c000c2e0:	74 19                	je     c000c2fb <Directory::exists()+0x39>
c000c2e2:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c2e8:	85 c9                	test   ecx,ecx
c000c2ea:	74 0f                	je     c000c2fb <Directory::exists()+0x39>
c000c2ec:	50                   	push   eax
c000c2ed:	83 c2 0d             	add    edx,0xd
c000c2f0:	50                   	push   eax
c000c2f1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c2f3:	52                   	push   edx
c000c2f4:	51                   	push   ecx
c000c2f5:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000c2f8:	83 c4 10             	add    esp,0x10
c000c2fb:	83 c4 0c             	add    esp,0xc
c000c2fe:	c3                   	ret    
c000c2ff:	90                   	nop

c000c300 <Directory::read(dirent*)>:
c000c300:	83 ec 1c             	sub    esp,0x1c
c000c303:	b8 0b 00 00 00       	mov    eax,0xb
c000c308:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c30c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c313:	83 f9 19             	cmp    ecx,0x19
c000c316:	77 30                	ja     c000c348 <Directory::read(dirent*)+0x48>
c000c318:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c31f:	85 c9                	test   ecx,ecx
c000c321:	74 25                	je     c000c348 <Directory::read(dirent*)+0x48>
c000c323:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000c32a:	74 1c                	je     c000c348 <Directory::read(dirent*)+0x48>
c000c32c:	83 ec 0c             	sub    esp,0xc
c000c32f:	8b 02                	mov    eax,DWORD PTR [edx]
c000c331:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c335:	51                   	push   ecx
c000c336:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c33a:	6a 00                	push   0x0
c000c33c:	68 10 01 00 00       	push   0x110
c000c341:	52                   	push   edx
c000c342:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c345:	83 c4 20             	add    esp,0x20
c000c348:	83 c4 1c             	add    esp,0x1c
c000c34b:	c3                   	ret    

c000c34c <Directory::create()>:
c000c34c:	83 ec 0c             	sub    esp,0xc
c000c34f:	b8 0b 00 00 00       	mov    eax,0xb
c000c354:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c358:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c35f:	83 f9 19             	cmp    ecx,0x19
c000c362:	77 2f                	ja     c000c393 <Directory::create()+0x47>
c000c364:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c36b:	85 c9                	test   ecx,ecx
c000c36d:	74 24                	je     c000c393 <Directory::create()+0x47>
c000c36f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c375:	85 c9                	test   ecx,ecx
c000c377:	74 1a                	je     c000c393 <Directory::create()+0x47>
c000c379:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c37d:	b8 06 00 00 00       	mov    eax,0x6
c000c382:	75 0f                	jne    c000c393 <Directory::create()+0x47>
c000c384:	50                   	push   eax
c000c385:	83 c2 0d             	add    edx,0xd
c000c388:	50                   	push   eax
c000c389:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c38b:	52                   	push   edx
c000c38c:	51                   	push   ecx
c000c38d:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000c390:	83 c4 10             	add    esp,0x10
c000c393:	83 c4 0c             	add    esp,0xc
c000c396:	c3                   	ret    
c000c397:	90                   	nop

c000c398 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000c398:	b8 0a 00 00 00       	mov    eax,0xa
c000c39d:	c3                   	ret    
c000c39e:	66 90                	xchg   ax,ax

c000c3a0 <Bus::Bus(char const*)>:
c000c3a0:	83 ec 0c             	sub    esp,0xc
c000c3a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3a7:	83 ec 08             	sub    esp,0x8
c000c3aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3ae:	50                   	push   eax
c000c3af:	e8 28 08 00 00       	call   c000cbdc <Device::Device(char const*)>
c000c3b4:	83 c4 10             	add    esp,0x10
c000c3b7:	ba 6c 1a 02 c0       	mov    edx,0xc0021a6c
c000c3bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3c0:	89 10                	mov    DWORD PTR [eax],edx
c000c3c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3c6:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000c3d0:	90                   	nop
c000c3d1:	83 c4 0c             	add    esp,0xc
c000c3d4:	c3                   	ret    
c000c3d5:	90                   	nop
c000c3d6:	66 90                	xchg   ax,ax

c000c3d8 <Bus::~Bus()>:
c000c3d8:	83 ec 0c             	sub    esp,0xc
c000c3db:	ba 6c 1a 02 c0       	mov    edx,0xc0021a6c
c000c3e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3e4:	89 10                	mov    DWORD PTR [eax],edx
c000c3e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3ea:	83 ec 0c             	sub    esp,0xc
c000c3ed:	50                   	push   eax
c000c3ee:	e8 53 05 00 00       	call   c000c946 <Device::~Device()>
c000c3f3:	83 c4 10             	add    esp,0x10
c000c3f6:	90                   	nop
c000c3f7:	83 c4 0c             	add    esp,0xc
c000c3fa:	c3                   	ret    
c000c3fb:	90                   	nop

c000c3fc <Bus::~Bus()>:
c000c3fc:	83 ec 0c             	sub    esp,0xc
c000c3ff:	83 ec 0c             	sub    esp,0xc
c000c402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c406:	e8 cd ff ff ff       	call   c000c3d8 <Bus::~Bus()>
c000c40b:	83 c4 10             	add    esp,0x10
c000c40e:	83 ec 08             	sub    esp,0x8
c000c411:	68 58 01 00 00       	push   0x158
c000c416:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c41a:	e8 ed e3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c41f:	83 c4 10             	add    esp,0x10
c000c422:	83 c4 0c             	add    esp,0xc
c000c425:	c3                   	ret    

c000c426 <beepThread(void*)>:
c000c426:	83 ec 0c             	sub    esp,0xc
c000c429:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000c42e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c432:	48                   	dec    eax
c000c433:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000c438:	75 01                	jne    c000c43b <beepThread(void*)+0x15>
c000c43a:	fb                   	sti    
c000c43b:	6b c2 0a             	imul   eax,edx,0xa
c000c43e:	83 ec 0c             	sub    esp,0xc
c000c441:	50                   	push   eax
c000c442:	e8 c9 9f 00 00       	call   c0016410 <milliTenthSleep(unsigned int)>
c000c447:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c44e:	e8 16 bf 00 00       	call   c0018369 <HalMakeBeep(int)>
c000c453:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c45b:	83 c4 1c             	add    esp,0x1c
c000c45e:	e9 91 9e 00 00       	jmp    c00162f4 <blockTask(TaskState)>

c000c463 <Krnl::beep(int, int, bool)>:
c000c463:	56                   	push   esi
c000c464:	53                   	push   ebx
c000c465:	83 ec 10             	sub    esp,0x10
c000c468:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c46c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c470:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c474:	e8 f0 be 00 00       	call   c0018369 <HalMakeBeep(int)>
c000c479:	89 f0                	mov    eax,esi
c000c47b:	83 c4 10             	add    esp,0x10
c000c47e:	84 c0                	test   al,al
c000c480:	74 1e                	je     c000c4a0 <Krnl::beep(int, int, bool)+0x3d>
c000c482:	6b db 0a             	imul   ebx,ebx,0xa
c000c485:	83 ec 0c             	sub    esp,0xc
c000c488:	53                   	push   ebx
c000c489:	e8 82 9f 00 00       	call   c0016410 <milliTenthSleep(unsigned int)>
c000c48e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c496:	83 c4 14             	add    esp,0x14
c000c499:	5b                   	pop    ebx
c000c49a:	5e                   	pop    esi
c000c49b:	e9 c9 be 00 00       	jmp    c0018369 <HalMakeBeep(int)>
c000c4a0:	68 e6 00 00 00       	push   0xe6
c000c4a5:	53                   	push   ebx
c000c4a6:	68 26 c4 00 c0       	push   0xc000c426
c000c4ab:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c4b1:	e8 f2 99 00 00       	call   c0015ea8 <Process::createThread(void (*)(void*), void*, int)>
c000c4b6:	83 c4 14             	add    esp,0x14
c000c4b9:	5b                   	pop    ebx
c000c4ba:	5e                   	pop    esi
c000c4bb:	c3                   	ret    

c000c4bc <User::loadClockSettings(int)>:
c000c4bc:	53                   	push   ebx
c000c4bd:	83 ec 14             	sub    esp,0x14
c000c4c0:	68 14 01 00 00       	push   0x114
c000c4c5:	e8 09 b6 ff ff       	call   c0007ad3 <malloc>
c000c4ca:	83 c4 0c             	add    esp,0xc
c000c4cd:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c4d3:	68 90 1a 02 c0       	push   0xc0021a90
c000c4d8:	50                   	push   eax
c000c4d9:	89 c3                	mov    ebx,eax
c000c4db:	e8 e4 f6 ff ff       	call   c000bbc4 <File::File(char const*, Process*)>
c000c4e0:	58                   	pop    eax
c000c4e1:	5a                   	pop    edx
c000c4e2:	6a 01                	push   0x1
c000c4e4:	53                   	push   ebx
c000c4e5:	e8 f8 f6 ff ff       	call   c000bbe2 <File::open(FileOpenMode)>
c000c4ea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c4ed:	e8 4e f7 ff ff       	call   c000bc40 <File::close()>
c000c4f2:	83 c4 10             	add    esp,0x10
c000c4f5:	85 db                	test   ebx,ebx
c000c4f7:	74 0f                	je     c000c508 <User::loadClockSettings(int)+0x4c>
c000c4f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c4fb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c4ff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c502:	83 c4 08             	add    esp,0x8
c000c505:	5b                   	pop    ebx
c000c506:	ff e0                	jmp    eax
c000c508:	83 c4 08             	add    esp,0x8
c000c50b:	5b                   	pop    ebx
c000c50c:	c3                   	ret    
c000c50d:	90                   	nop

c000c50e <Clock::Clock(char const*)>:
c000c50e:	83 ec 0c             	sub    esp,0xc
c000c511:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c515:	83 ec 08             	sub    esp,0x8
c000c518:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c51c:	50                   	push   eax
c000c51d:	e8 ba 06 00 00       	call   c000cbdc <Device::Device(char const*)>
c000c522:	83 c4 10             	add    esp,0x10
c000c525:	ba b8 1a 02 c0       	mov    edx,0xc0021ab8
c000c52a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c52e:	89 10                	mov    DWORD PTR [eax],edx
c000c530:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c534:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c53e:	90                   	nop
c000c53f:	83 c4 0c             	add    esp,0xc
c000c542:	c3                   	ret    
c000c543:	90                   	nop

c000c544 <Clock::~Clock()>:
c000c544:	83 ec 0c             	sub    esp,0xc
c000c547:	ba b8 1a 02 c0       	mov    edx,0xc0021ab8
c000c54c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c550:	89 10                	mov    DWORD PTR [eax],edx
c000c552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c556:	83 ec 0c             	sub    esp,0xc
c000c559:	50                   	push   eax
c000c55a:	e8 e7 03 00 00       	call   c000c946 <Device::~Device()>
c000c55f:	83 c4 10             	add    esp,0x10
c000c562:	90                   	nop
c000c563:	83 c4 0c             	add    esp,0xc
c000c566:	c3                   	ret    
c000c567:	90                   	nop

c000c568 <Clock::~Clock()>:
c000c568:	83 ec 0c             	sub    esp,0xc
c000c56b:	83 ec 0c             	sub    esp,0xc
c000c56e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c572:	e8 cd ff ff ff       	call   c000c544 <Clock::~Clock()>
c000c577:	83 c4 10             	add    esp,0x10
c000c57a:	83 ec 08             	sub    esp,0x8
c000c57d:	68 58 01 00 00       	push   0x158
c000c582:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c586:	e8 81 e2 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c58b:	83 c4 10             	add    esp,0x10
c000c58e:	83 c4 0c             	add    esp,0xc
c000c591:	c3                   	ret    

c000c592 <Clock::timeInSecondsLocal()>:
c000c592:	53                   	push   ebx
c000c593:	83 ec 14             	sub    esp,0x14
c000c596:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c59a:	8b 10                	mov    edx,DWORD PTR [eax]
c000c59c:	50                   	push   eax
c000c59d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c5a0:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c5a7:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c5ad:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c5b3:	89 cb                	mov    ebx,ecx
c000c5b5:	c1 fb 1f             	sar    ebx,0x1f
c000c5b8:	01 c8                	add    eax,ecx
c000c5ba:	11 da                	adc    edx,ebx
c000c5bc:	83 c4 10             	add    esp,0x10
c000c5bf:	31 c9                	xor    ecx,ecx
c000c5c1:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c5c8:	74 05                	je     c000c5cf <Clock::timeInSecondsLocal()+0x3d>
c000c5ca:	b9 08 07 00 00       	mov    ecx,0x708
c000c5cf:	31 db                	xor    ebx,ebx
c000c5d1:	01 c8                	add    eax,ecx
c000c5d3:	11 da                	adc    edx,ebx
c000c5d5:	83 c4 08             	add    esp,0x8
c000c5d8:	5b                   	pop    ebx
c000c5d9:	c3                   	ret    

c000c5da <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c5da:	57                   	push   edi
c000c5db:	56                   	push   esi
c000c5dc:	53                   	push   ebx
c000c5dd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c5e1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c5e5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c5e9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c5eb:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c5ee:	0f b6 05 08 94 02 c0 	movzx  eax,BYTE PTR ds:0xc0029408
c000c5f5:	03 05 0c 94 02 c0    	add    eax,DWORD PTR ds:0xc002940c
c000c5fb:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c601:	99                   	cdq    
c000c602:	29 c6                	sub    esi,eax
c000c604:	19 d7                	sbb    edi,edx
c000c606:	89 f0                	mov    eax,esi
c000c608:	31 f6                	xor    esi,esi
c000c60a:	89 fa                	mov    edx,edi
c000c60c:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c613:	74 05                	je     c000c61a <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c615:	be 08 07 00 00       	mov    esi,0x708
c000c61a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c61e:	31 ff                	xor    edi,edi
c000c620:	29 f0                	sub    eax,esi
c000c622:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c626:	19 fa                	sbb    edx,edi
c000c628:	89 d8                	mov    eax,ebx
c000c62a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c62e:	5b                   	pop    ebx
c000c62f:	5e                   	pop    esi
c000c630:	5f                   	pop    edi
c000c631:	ff e0                	jmp    eax

c000c633 <datetimeToSeconds(datetime_t)>:
c000c633:	55                   	push   ebp
c000c634:	57                   	push   edi
c000c635:	56                   	push   esi
c000c636:	53                   	push   ebx
c000c637:	83 ec 0c             	sub    esp,0xc
c000c63a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c63e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c642:	89 f7                	mov    edi,esi
c000c644:	89 f0                	mov    eax,esi
c000c646:	0f b6 cf             	movzx  ecx,bh
c000c649:	0f b6 c4             	movzx  eax,ah
c000c64c:	c1 ef 10             	shr    edi,0x10
c000c64f:	89 da                	mov    edx,ebx
c000c651:	8d 69 ff             	lea    ebp,[ecx-0x1]
c000c654:	89 f9                	mov    ecx,edi
c000c656:	0f b6 f9             	movzx  edi,cl
c000c659:	89 f1                	mov    ecx,esi
c000c65b:	6b c0 3c             	imul   eax,eax,0x3c
c000c65e:	0f b6 f1             	movzx  esi,cl
c000c661:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c000c667:	0f b6 db             	movzx  ebx,bl
c000c66a:	c1 ea 10             	shr    edx,0x10
c000c66d:	81 ea 6c 07 00 00    	sub    edx,0x76c
c000c673:	01 f8                	add    eax,edi
c000c675:	01 f0                	add    eax,esi
c000c677:	89 04 24             	mov    DWORD PTR [esp],eax
c000c67a:	c1 f8 1f             	sar    eax,0x1f
c000c67d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c681:	89 e8                	mov    eax,ebp
c000c683:	0f b6 c0             	movzx  eax,al
c000c686:	8b 0c 85 00 1b 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde500]
c000c68d:	83 f8 01             	cmp    eax,0x1
c000c690:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c000c694:	0f b7 da             	movzx  ebx,dx
c000c697:	76 27                	jbe    c000c6c0 <datetimeToSeconds(datetime_t)+0x8d>
c000c699:	80 e2 03             	and    dl,0x3
c000c69c:	75 22                	jne    c000c6c0 <datetimeToSeconds(datetime_t)+0x8d>
c000c69e:	31 d2                	xor    edx,edx
c000c6a0:	be 64 00 00 00       	mov    esi,0x64
c000c6a5:	89 d8                	mov    eax,ebx
c000c6a7:	f7 f6                	div    esi
c000c6a9:	85 d2                	test   edx,edx
c000c6ab:	75 12                	jne    c000c6bf <datetimeToSeconds(datetime_t)+0x8c>
c000c6ad:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c6b3:	be 90 01 00 00       	mov    esi,0x190
c000c6b8:	99                   	cdq    
c000c6b9:	f7 fe                	idiv   esi
c000c6bb:	85 d2                	test   edx,edx
c000c6bd:	75 01                	jne    c000c6c0 <datetimeToSeconds(datetime_t)+0x8d>
c000c6bf:	41                   	inc    ecx
c000c6c0:	83 fb 46             	cmp    ebx,0x46
c000c6c3:	76 48                	jbe    c000c70d <datetimeToSeconds(datetime_t)+0xda>
c000c6c5:	be 46 00 00 00       	mov    esi,0x46
c000c6ca:	bf 64 00 00 00       	mov    edi,0x64
c000c6cf:	bd 90 01 00 00       	mov    ebp,0x190
c000c6d4:	f7 c6 03 00 00 00    	test   esi,0x3
c000c6da:	b8 6d 01 00 00       	mov    eax,0x16d
c000c6df:	75 23                	jne    c000c704 <datetimeToSeconds(datetime_t)+0xd1>
c000c6e1:	89 f0                	mov    eax,esi
c000c6e3:	99                   	cdq    
c000c6e4:	f7 ff                	idiv   edi
c000c6e6:	b8 6e 01 00 00       	mov    eax,0x16e
c000c6eb:	85 d2                	test   edx,edx
c000c6ed:	75 15                	jne    c000c704 <datetimeToSeconds(datetime_t)+0xd1>
c000c6ef:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c6f5:	99                   	cdq    
c000c6f6:	f7 fd                	idiv   ebp
c000c6f8:	83 fa 01             	cmp    edx,0x1
c000c6fb:	19 c0                	sbb    eax,eax
c000c6fd:	f7 d0                	not    eax
c000c6ff:	05 6e 01 00 00       	add    eax,0x16e
c000c704:	46                   	inc    esi
c000c705:	01 c1                	add    ecx,eax
c000c707:	39 de                	cmp    esi,ebx
c000c709:	7c c9                	jl     c000c6d4 <datetimeToSeconds(datetime_t)+0xa1>
c000c70b:	eb 34                	jmp    c000c741 <datetimeToSeconds(datetime_t)+0x10e>
c000c70d:	74 32                	je     c000c741 <datetimeToSeconds(datetime_t)+0x10e>
c000c70f:	b8 45 00 00 00       	mov    eax,0x45
c000c714:	89 c2                	mov    edx,eax
c000c716:	83 e2 03             	and    edx,0x3
c000c719:	39 d8                	cmp    eax,ebx
c000c71b:	7e 0f                	jle    c000c72c <datetimeToSeconds(datetime_t)+0xf9>
c000c71d:	83 fa 01             	cmp    edx,0x1
c000c720:	19 d2                	sbb    edx,edx
c000c722:	48                   	dec    eax
c000c723:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c72a:	eb e8                	jmp    c000c714 <datetimeToSeconds(datetime_t)+0xe1>
c000c72c:	85 d2                	test   edx,edx
c000c72e:	b8 6d 01 00 00       	mov    eax,0x16d
c000c733:	75 0a                	jne    c000c73f <datetimeToSeconds(datetime_t)+0x10c>
c000c735:	83 fb 01             	cmp    ebx,0x1
c000c738:	19 c0                	sbb    eax,eax
c000c73a:	05 6e 01 00 00       	add    eax,0x16e
c000c73f:	29 c1                	sub    ecx,eax
c000c741:	b8 80 51 01 00       	mov    eax,0x15180
c000c746:	f7 e9                	imul   ecx
c000c748:	03 04 24             	add    eax,DWORD PTR [esp]
c000c74b:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c74f:	83 c4 0c             	add    esp,0xc
c000c752:	5b                   	pop    ebx
c000c753:	5e                   	pop    esi
c000c754:	5f                   	pop    edi
c000c755:	5d                   	pop    ebp
c000c756:	c3                   	ret    
c000c757:	90                   	nop

c000c758 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c758:	57                   	push   edi
c000c759:	56                   	push   esi
c000c75a:	53                   	push   ebx
c000c75b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c75f:	8b 06                	mov    eax,DWORD PTR [esi]
c000c761:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c764:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c768:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c76c:	e8 c2 fe ff ff       	call   c000c633 <datetimeToSeconds(datetime_t)>
c000c771:	59                   	pop    ecx
c000c772:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c779:	5b                   	pop    ebx
c000c77a:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c780:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c786:	89 cb                	mov    ebx,ecx
c000c788:	c1 fb 1f             	sar    ebx,0x1f
c000c78b:	29 c8                	sub    eax,ecx
c000c78d:	19 da                	sbb    edx,ebx
c000c78f:	31 c9                	xor    ecx,ecx
c000c791:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c798:	74 05                	je     c000c79f <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c79a:	b9 08 07 00 00       	mov    ecx,0x708
c000c79f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c7a3:	31 db                	xor    ebx,ebx
c000c7a5:	29 c8                	sub    eax,ecx
c000c7a7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c7ab:	19 da                	sbb    edx,ebx
c000c7ad:	89 f8                	mov    eax,edi
c000c7af:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c7b3:	5b                   	pop    ebx
c000c7b4:	5e                   	pop    esi
c000c7b5:	5f                   	pop    edi
c000c7b6:	ff e0                	jmp    eax

c000c7b8 <secondsToDatetime(unsigned long long)>:
c000c7b8:	55                   	push   ebp
c000c7b9:	57                   	push   edi
c000c7ba:	56                   	push   esi
c000c7bb:	53                   	push   ebx
c000c7bc:	83 ec 1c             	sub    esp,0x1c
c000c7bf:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c7c3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c7c7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c7cb:	6a 00                	push   0x0
c000c7cd:	68 80 51 01 00       	push   0x15180
c000c7d2:	55                   	push   ebp
c000c7d3:	57                   	push   edi
c000c7d4:	e8 d7 2f 01 00       	call   c001f7b0 <__udivdi3>
c000c7d9:	83 c4 10             	add    esp,0x10
c000c7dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7e0:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c7e6:	6a 00                	push   0x0
c000c7e8:	68 80 51 01 00       	push   0x15180
c000c7ed:	55                   	push   ebp
c000c7ee:	57                   	push   edi
c000c7ef:	bf 10 0e 00 00       	mov    edi,0xe10
c000c7f4:	e8 b7 30 01 00       	call   c001f8b0 <__umoddi3>
c000c7f9:	83 c4 10             	add    esp,0x10
c000c7fc:	99                   	cdq    
c000c7fd:	f7 ff                	idiv   edi
c000c7ff:	bf 3c 00 00 00       	mov    edi,0x3c
c000c804:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c807:	89 d0                	mov    eax,edx
c000c809:	99                   	cdq    
c000c80a:	f7 ff                	idiv   edi
c000c80c:	85 db                	test   ebx,ebx
c000c80e:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c811:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c814:	79 11                	jns    c000c827 <secondsToDatetime(unsigned long long)+0x6f>
c000c816:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c81a:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c820:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c825:	eb 07                	jmp    c000c82e <secondsToDatetime(unsigned long long)+0x76>
c000c827:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c82c:	89 d8                	mov    eax,ebx
c000c82e:	99                   	cdq    
c000c82f:	bf b4 05 00 00       	mov    edi,0x5b4
c000c834:	f7 f9                	idiv   ecx
c000c836:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c83b:	31 d2                	xor    edx,edx
c000c83d:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c842:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c846:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c84e:	01 c3                	add    ebx,eax
c000c850:	89 d8                	mov    eax,ebx
c000c852:	f7 f1                	div    ecx
c000c854:	31 d2                	xor    edx,edx
c000c856:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c859:	89 d8                	mov    eax,ebx
c000c85b:	f7 f7                	div    edi
c000c85d:	31 d2                	xor    edx,edx
c000c85f:	29 c1                	sub    ecx,eax
c000c861:	89 d8                	mov    eax,ebx
c000c863:	f7 f5                	div    ebp
c000c865:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c86a:	31 d2                	xor    edx,edx
c000c86c:	29 c1                	sub    ecx,eax
c000c86e:	89 c8                	mov    eax,ecx
c000c870:	f7 f5                	div    ebp
c000c872:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c877:	31 d2                	xor    edx,edx
c000c879:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c87d:	89 c8                	mov    eax,ecx
c000c87f:	f7 f5                	div    ebp
c000c881:	31 d2                	xor    edx,edx
c000c883:	01 c3                	add    ebx,eax
c000c885:	89 c8                	mov    eax,ecx
c000c887:	f7 f7                	div    edi
c000c889:	bf 99 00 00 00       	mov    edi,0x99
c000c88e:	31 d2                	xor    edx,edx
c000c890:	29 c3                	sub    ebx,eax
c000c892:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c89a:	29 c3                	sub    ebx,eax
c000c89c:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c89f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c8a2:	83 c1 02             	add    ecx,0x2
c000c8a5:	89 c8                	mov    eax,ecx
c000c8a7:	bb 05 00 00 00       	mov    ebx,0x5
c000c8ac:	f7 f7                	div    edi
c000c8ae:	31 d2                	xor    edx,edx
c000c8b0:	89 c7                	mov    edi,eax
c000c8b2:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c8b8:	83 c0 02             	add    eax,0x2
c000c8bb:	f7 f3                	div    ebx
c000c8bd:	89 eb                	mov    ebx,ebp
c000c8bf:	29 c3                	sub    ebx,eax
c000c8c1:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c8c7:	88 1e                	mov    BYTE PTR [esi],bl
c000c8c9:	19 c0                	sbb    eax,eax
c000c8cb:	31 d2                	xor    edx,edx
c000c8cd:	83 e0 0c             	and    eax,0xc
c000c8d0:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c8d4:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c8dc:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c8e0:	83 f9 01             	cmp    ecx,0x1
c000c8e3:	0f 96 c2             	setbe  dl
c000c8e6:	41                   	inc    ecx
c000c8e7:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c8ea:	01 d0                	add    eax,edx
c000c8ec:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c8f0:	83 c4 1c             	add    esp,0x1c
c000c8f3:	89 f0                	mov    eax,esi
c000c8f5:	5b                   	pop    ebx
c000c8f6:	5e                   	pop    esi
c000c8f7:	5f                   	pop    edi
c000c8f8:	5d                   	pop    ebp
c000c8f9:	c2 04 00             	ret    0x4

c000c8fc <Clock::timeInDatetimeLocal()>:
c000c8fc:	53                   	push   ebx
c000c8fd:	83 ec 14             	sub    esp,0x14
c000c900:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c904:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c908:	e8 85 fc ff ff       	call   c000c592 <Clock::timeInSecondsLocal()>
c000c90d:	83 c4 0c             	add    esp,0xc
c000c910:	52                   	push   edx
c000c911:	50                   	push   eax
c000c912:	53                   	push   ebx
c000c913:	e8 a0 fe ff ff       	call   c000c7b8 <secondsToDatetime(unsigned long long)>
c000c918:	89 d8                	mov    eax,ebx
c000c91a:	83 c4 14             	add    esp,0x14
c000c91d:	5b                   	pop    ebx
c000c91e:	c2 04 00             	ret    0x4
c000c921:	90                   	nop

c000c922 <Device::hibernate()>:
c000c922:	c3                   	ret    
c000c923:	90                   	nop

c000c924 <Device::wake()>:
c000c924:	c3                   	ret    
c000c925:	90                   	nop

c000c926 <Device::detect()>:
c000c926:	c3                   	ret    
c000c927:	90                   	nop

c000c928 <Device::disableLegacy()>:
c000c928:	c3                   	ret    
c000c929:	90                   	nop

c000c92a <Device::powerSaving(PowerSavingLevel)>:
c000c92a:	c3                   	ret    
c000c92b:	90                   	nop

c000c92c <DriverlessDevice::close(int, int, void*)>:
c000c92c:	31 c0                	xor    eax,eax
c000c92e:	c3                   	ret    
c000c92f:	90                   	nop

c000c930 <DriverlessDevice::detect()>:
c000c930:	c3                   	ret    
c000c931:	90                   	nop

c000c932 <DriverlessDevice::open(int, int, void*)>:
c000c932:	83 ec 18             	sub    esp,0x18
c000c935:	68 30 1b 02 c0       	push   0xc0021b30
c000c93a:	e8 cc 4c 00 00       	call   c001160b <KePanic(char const*)>
c000c93f:	83 c8 ff             	or     eax,0xffffffff
c000c942:	83 c4 1c             	add    esp,0x1c
c000c945:	c3                   	ret    

c000c946 <Device::~Device()>:
c000c946:	ba 90 1b 02 c0       	mov    edx,0xc0021b90
c000c94b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c94f:	89 10                	mov    DWORD PTR [eax],edx
c000c951:	90                   	nop
c000c952:	c3                   	ret    
c000c953:	90                   	nop

c000c954 <Device::~Device()>:
c000c954:	83 ec 0c             	sub    esp,0xc
c000c957:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c95b:	e8 e6 ff ff ff       	call   c000c946 <Device::~Device()>
c000c960:	83 c4 04             	add    esp,0x4
c000c963:	83 ec 08             	sub    esp,0x8
c000c966:	68 58 01 00 00       	push   0x158
c000c96b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c96f:	e8 98 de ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c974:	83 c4 10             	add    esp,0x10
c000c977:	83 c4 0c             	add    esp,0xc
c000c97a:	c3                   	ret    
c000c97b:	90                   	nop

c000c97c <Device::findAndLoadDriver()>:
c000c97c:	c7 44 24 04 4e 1b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021b4e
c000c984:	e9 81 df ff ff       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>
c000c989:	90                   	nop

c000c98a <Device::preOpenPCI(PCIDeviceInfo)>:
c000c98a:	57                   	push   edi
c000c98b:	b9 09 00 00 00       	mov    ecx,0x9
c000c990:	56                   	push   esi
c000c991:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c995:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c999:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c9a3:	81 c7 18 01 00 00    	add    edi,0x118
c000c9a9:	fc                   	cld    
c000c9aa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c9ac:	5e                   	pop    esi
c000c9ad:	5f                   	pop    edi
c000c9ae:	c3                   	ret    
c000c9af:	90                   	nop

c000c9b0 <Device::preOpenACPI(void*, char*, char*)>:
c000c9b0:	57                   	push   edi
c000c9b1:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c9b6:	56                   	push   esi
c000c9b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c9bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c9bf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c9c3:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c9cd:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c9d3:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c9d9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c9db:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c9e1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c9e5:	b9 0e 00 00 00       	mov    ecx,0xe
c000c9ea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c9ec:	5e                   	pop    esi
c000c9ed:	5f                   	pop    edi
c000c9ee:	c3                   	ret    
c000c9ef:	90                   	nop

c000c9f0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c9f0:	53                   	push   ebx
c000c9f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c9f9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c9fd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ca01:	0f b6 c0             	movzx  eax,al
c000ca04:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca08:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ca0c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ca10:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ca14:	5b                   	pop    ebx
c000ca15:	e9 aa 05 00 00       	jmp    c000cfc4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000ca1a <Device::getParent()>:
c000ca1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca1e:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000ca24:	c3                   	ret    
c000ca25:	90                   	nop

c000ca26 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ca26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca2a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ca2e:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000ca33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ca37:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ca3b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ca3f:	e9 f7 06 00 00       	jmp    c000d13b <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000ca44 <Device::addChild(Device*)>:
c000ca44:	53                   	push   ebx
c000ca45:	83 ec 08             	sub    esp,0x8
c000ca48:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ca4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca50:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000ca56:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000ca5c:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ca5e:	85 d2                	test   edx,edx
c000ca60:	74 04                	je     c000ca66 <Device::addChild(Device*)+0x22>
c000ca62:	89 d3                	mov    ebx,edx
c000ca64:	eb f6                	jmp    c000ca5c <Device::addChild(Device*)+0x18>
c000ca66:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ca69:	83 ec 0c             	sub    esp,0xc
c000ca6c:	6a 08                	push   0x8
c000ca6e:	e8 60 b0 ff ff       	call   c0007ad3 <malloc>
c000ca73:	89 03                	mov    DWORD PTR [ebx],eax
c000ca75:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ca7b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ca82:	83 c4 18             	add    esp,0x18
c000ca85:	5b                   	pop    ebx
c000ca86:	c3                   	ret    
c000ca87:	90                   	nop

c000ca88 <Device::removeAllChildren()>:
c000ca88:	56                   	push   esi
c000ca89:	53                   	push   ebx
c000ca8a:	52                   	push   edx
c000ca8b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ca8f:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000ca95:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca98:	74 17                	je     c000cab1 <Device::removeAllChildren()+0x29>
c000ca9a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ca9d:	85 c0                	test   eax,eax
c000ca9f:	74 0c                	je     c000caad <Device::removeAllChildren()+0x25>
c000caa1:	8b 10                	mov    edx,DWORD PTR [eax]
c000caa3:	83 ec 0c             	sub    esp,0xc
c000caa6:	50                   	push   eax
c000caa7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000caaa:	83 c4 10             	add    esp,0x10
c000caad:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000caaf:	eb e4                	jmp    c000ca95 <Device::removeAllChildren()+0xd>
c000cab1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000cab7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cabd:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000cac3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000caca:	58                   	pop    eax
c000cacb:	5b                   	pop    ebx
c000cacc:	5e                   	pop    esi
c000cacd:	c3                   	ret    

c000cace <Device::hibernateAll()>:
c000cace:	53                   	push   ebx
c000cacf:	83 ec 14             	sub    esp,0x14
c000cad2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cad6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cad8:	53                   	push   ebx
c000cad9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000cadc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cae2:	83 c4 10             	add    esp,0x10
c000cae5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cae8:	74 0f                	je     c000caf9 <Device::hibernateAll()+0x2b>
c000caea:	83 ec 0c             	sub    esp,0xc
c000caed:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000caf0:	e8 d9 ff ff ff       	call   c000cace <Device::hibernateAll()>
c000caf5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000caf7:	eb e9                	jmp    c000cae2 <Device::hibernateAll()+0x14>
c000caf9:	83 c4 08             	add    esp,0x8
c000cafc:	5b                   	pop    ebx
c000cafd:	c3                   	ret    

c000cafe <Device::wakeAll()>:
c000cafe:	53                   	push   ebx
c000caff:	83 ec 14             	sub    esp,0x14
c000cb02:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cb06:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cb08:	53                   	push   ebx
c000cb09:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000cb0c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cb12:	83 c4 10             	add    esp,0x10
c000cb15:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cb18:	74 0f                	je     c000cb29 <Device::wakeAll()+0x2b>
c000cb1a:	83 ec 0c             	sub    esp,0xc
c000cb1d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb20:	e8 d9 ff ff ff       	call   c000cafe <Device::wakeAll()>
c000cb25:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb27:	eb e9                	jmp    c000cb12 <Device::wakeAll()+0x14>
c000cb29:	83 c4 08             	add    esp,0x8
c000cb2c:	5b                   	pop    ebx
c000cb2d:	c3                   	ret    

c000cb2e <Device::detectAll()>:
c000cb2e:	53                   	push   ebx
c000cb2f:	83 ec 14             	sub    esp,0x14
c000cb32:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cb36:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cb38:	53                   	push   ebx
c000cb39:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000cb3c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cb42:	83 c4 10             	add    esp,0x10
c000cb45:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cb48:	74 0f                	je     c000cb59 <Device::detectAll()+0x2b>
c000cb4a:	83 ec 0c             	sub    esp,0xc
c000cb4d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb50:	e8 d9 ff ff ff       	call   c000cb2e <Device::detectAll()>
c000cb55:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb57:	eb e9                	jmp    c000cb42 <Device::detectAll()+0x14>
c000cb59:	83 c4 08             	add    esp,0x8
c000cb5c:	5b                   	pop    ebx
c000cb5d:	c3                   	ret    

c000cb5e <Device::disableLegacyAll()>:
c000cb5e:	c3                   	ret    
c000cb5f:	90                   	nop

c000cb60 <Device::loadDriversForAll()>:
c000cb60:	c3                   	ret    
c000cb61:	90                   	nop

c000cb62 <Device::closeAll()>:
c000cb62:	53                   	push   ebx
c000cb63:	83 ec 08             	sub    esp,0x8
c000cb66:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cb6a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cb6c:	6a 00                	push   0x0
c000cb6e:	6a 00                	push   0x0
c000cb70:	6a 00                	push   0x0
c000cb72:	53                   	push   ebx
c000cb73:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000cb76:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cb7c:	83 c4 10             	add    esp,0x10
c000cb7f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cb82:	74 0f                	je     c000cb93 <Device::closeAll()+0x31>
c000cb84:	83 ec 0c             	sub    esp,0xc
c000cb87:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb8a:	e8 d3 ff ff ff       	call   c000cb62 <Device::closeAll()>
c000cb8f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb91:	eb e9                	jmp    c000cb7c <Device::closeAll()+0x1a>
c000cb93:	83 c4 08             	add    esp,0x8
c000cb96:	5b                   	pop    ebx
c000cb97:	c3                   	ret    

c000cb98 <Device::powerSavingAll(PowerSavingLevel)>:
c000cb98:	56                   	push   esi
c000cb99:	53                   	push   ebx
c000cb9a:	83 ec 0c             	sub    esp,0xc
c000cb9d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cba1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000cba5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cba7:	56                   	push   esi
c000cba8:	53                   	push   ebx
c000cba9:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000cbac:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cbb2:	83 c4 10             	add    esp,0x10
c000cbb5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cbb8:	74 0f                	je     c000cbc9 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000cbba:	52                   	push   edx
c000cbbb:	52                   	push   edx
c000cbbc:	56                   	push   esi
c000cbbd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cbc0:	e8 d3 ff ff ff       	call   c000cb98 <Device::powerSavingAll(PowerSavingLevel)>
c000cbc5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cbc7:	eb e9                	jmp    c000cbb2 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000cbc9:	58                   	pop    eax
c000cbca:	5b                   	pop    ebx
c000cbcb:	5e                   	pop    esi
c000cbcc:	c3                   	ret    
c000cbcd:	90                   	nop

c000cbce <Device::setName(char const*)>:
c000cbce:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000cbd6:	e9 75 3a ff ff       	jmp    c0000650 <strcpy>
c000cbdb:	90                   	nop

c000cbdc <Device::Device(char const*)>:
c000cbdc:	83 ec 1c             	sub    esp,0x1c
c000cbdf:	ba 90 1b 02 c0       	mov    edx,0xc0021b90
c000cbe4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbe8:	89 10                	mov    DWORD PTR [eax],edx
c000cbea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbee:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000cbf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbfc:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cc06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc0a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cc14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc18:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cc22:	83 ec 08             	sub    esp,0x8
c000cc25:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc2d:	e8 9c ff ff ff       	call   c000cbce <Device::setName(char const*)>
c000cc32:	83 c4 10             	add    esp,0x10
c000cc35:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000cc3d:	83 ec 0c             	sub    esp,0xc
c000cc40:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cc44:	e8 8a ae ff ff       	call   c0007ad3 <malloc>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cc52:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cc59:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000cc5d:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000cc63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc67:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cc6d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cc73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc77:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cc7d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cc84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc88:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000cc8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc93:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000cc9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc9e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cca8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ccac:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000ccb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ccba:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000ccc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ccc8:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000ccd2:	90                   	nop
c000ccd3:	83 c4 1c             	add    esp,0x1c
c000ccd6:	c3                   	ret    
c000ccd7:	90                   	nop

c000ccd8 <Device::getName()>:
c000ccd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccdc:	05 d0 00 00 00       	add    eax,0xd0
c000cce1:	c3                   	ret    

c000cce2 <DriverlessDevice::DriverlessDevice(char const*)>:
c000cce2:	83 ec 0c             	sub    esp,0xc
c000cce5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cce9:	83 ec 08             	sub    esp,0x8
c000ccec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccf0:	50                   	push   eax
c000ccf1:	e8 e6 fe ff ff       	call   c000cbdc <Device::Device(char const*)>
c000ccf6:	83 c4 10             	add    esp,0x10
c000ccf9:	ba bc 1b 02 c0       	mov    edx,0xc0021bbc
c000ccfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd02:	89 10                	mov    DWORD PTR [eax],edx
c000cd04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd08:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000cd12:	90                   	nop
c000cd13:	83 c4 0c             	add    esp,0xc
c000cd16:	c3                   	ret    
c000cd17:	90                   	nop

c000cd18 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000cd18:	57                   	push   edi
c000cd19:	56                   	push   esi
c000cd1a:	53                   	push   ebx
c000cd1b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cd1f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000cd23:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cd27:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000cd2d:	75 0c                	jne    c000cd3b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000cd2f:	52                   	push   edx
c000cd30:	52                   	push   edx
c000cd31:	53                   	push   ebx
c000cd32:	56                   	push   esi
c000cd33:	e8 2a 2f 01 00       	call   c001fc62 <LinkedList<Device>::addElement(Device*)>
c000cd38:	83 c4 10             	add    esp,0x10
c000cd3b:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cd41:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cd44:	74 12                	je     c000cd58 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000cd46:	50                   	push   eax
c000cd47:	57                   	push   edi
c000cd48:	56                   	push   esi
c000cd49:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cd4c:	e8 c7 ff ff ff       	call   c000cd18 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000cd51:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cd53:	83 c4 10             	add    esp,0x10
c000cd56:	eb e9                	jmp    c000cd41 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000cd58:	5b                   	pop    ebx
c000cd59:	5e                   	pop    esi
c000cd5a:	5f                   	pop    edi
c000cd5b:	c3                   	ret    

c000cd5c <getDevicesOfType(DeviceType)>:
c000cd5c:	53                   	push   ebx
c000cd5d:	83 ec 14             	sub    esp,0x14
c000cd60:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cd64:	53                   	push   ebx
c000cd65:	e8 d4 2f 01 00       	call   c001fd3e <LinkedList<Device>::LinkedList()>
c000cd6a:	83 c4 0c             	add    esp,0xc
c000cd6d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cd71:	53                   	push   ebx
c000cd72:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000cd78:	e8 9b ff ff ff       	call   c000cd18 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000cd7d:	83 c4 18             	add    esp,0x18
c000cd80:	89 d8                	mov    eax,ebx
c000cd82:	5b                   	pop    ebx
c000cd83:	c2 04 00             	ret    0x4
c000cd86:	66 90                	xchg   ax,ax

c000cd88 <HardDiskController::HardDiskController(char const*)>:
c000cd88:	83 ec 0c             	sub    esp,0xc
c000cd8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd8f:	83 ec 08             	sub    esp,0x8
c000cd92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd96:	50                   	push   eax
c000cd97:	e8 40 fe ff ff       	call   c000cbdc <Device::Device(char const*)>
c000cd9c:	83 c4 10             	add    esp,0x10
c000cd9f:	ba e8 1b 02 c0       	mov    edx,0xc0021be8
c000cda4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cda8:	89 10                	mov    DWORD PTR [eax],edx
c000cdaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdae:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000cdb8:	90                   	nop
c000cdb9:	83 c4 0c             	add    esp,0xc
c000cdbc:	c3                   	ret    
c000cdbd:	90                   	nop
c000cdbe:	66 90                	xchg   ax,ax

c000cdc0 <HardDiskController::~HardDiskController()>:
c000cdc0:	83 ec 0c             	sub    esp,0xc
c000cdc3:	ba e8 1b 02 c0       	mov    edx,0xc0021be8
c000cdc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdcc:	89 10                	mov    DWORD PTR [eax],edx
c000cdce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdd2:	83 ec 0c             	sub    esp,0xc
c000cdd5:	50                   	push   eax
c000cdd6:	e8 6b fb ff ff       	call   c000c946 <Device::~Device()>
c000cddb:	83 c4 10             	add    esp,0x10
c000cdde:	90                   	nop
c000cddf:	83 c4 0c             	add    esp,0xc
c000cde2:	c3                   	ret    
c000cde3:	90                   	nop

c000cde4 <HardDiskController::~HardDiskController()>:
c000cde4:	83 ec 0c             	sub    esp,0xc
c000cde7:	83 ec 0c             	sub    esp,0xc
c000cdea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdee:	e8 cd ff ff ff       	call   c000cdc0 <HardDiskController::~HardDiskController()>
c000cdf3:	83 c4 10             	add    esp,0x10
c000cdf6:	83 ec 08             	sub    esp,0x8
c000cdf9:	68 58 01 00 00       	push   0x158
c000cdfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce02:	e8 05 da ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000ce07:	83 c4 10             	add    esp,0x10
c000ce0a:	83 c4 0c             	add    esp,0xc
c000ce0d:	c3                   	ret    

c000ce0e <PhysicalDisk::eject()>:
c000ce0e:	83 c8 ff             	or     eax,0xffffffff
c000ce11:	c3                   	ret    

c000ce12 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000ce12:	83 ec 0c             	sub    esp,0xc
c000ce15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce19:	83 ec 08             	sub    esp,0x8
c000ce1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce20:	50                   	push   eax
c000ce21:	e8 b6 fd ff ff       	call   c000cbdc <Device::Device(char const*)>
c000ce26:	83 c4 10             	add    esp,0x10
c000ce29:	ba 14 1c 02 c0       	mov    edx,0xc0021c14
c000ce2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce32:	89 10                	mov    DWORD PTR [eax],edx
c000ce34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce38:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ce3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce43:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000ce4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce4e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000ce58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce5c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ce60:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000ce66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce6a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ce74:	90                   	nop
c000ce75:	83 c4 0c             	add    esp,0xc
c000ce78:	c3                   	ret    
c000ce79:	90                   	nop

c000ce7a <PhysicalDisk::startCache()>:
c000ce7a:	56                   	push   esi
c000ce7b:	53                   	push   ebx
c000ce7c:	83 ec 10             	sub    esp,0x10
c000ce7f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ce83:	6a 44                	push   0x44
c000ce85:	e8 49 ac ff ff       	call   c0007ad3 <malloc>
c000ce8a:	89 c6                	mov    esi,eax
c000ce8c:	58                   	pop    eax
c000ce8d:	5a                   	pop    edx
c000ce8e:	53                   	push   ebx
c000ce8f:	56                   	push   esi
c000ce90:	e8 83 17 00 00       	call   c000e618 <VCache::VCache(PhysicalDisk*)>
c000ce95:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000ce9b:	83 c4 14             	add    esp,0x14
c000ce9e:	5b                   	pop    ebx
c000ce9f:	5e                   	pop    esi
c000cea0:	c3                   	ret    
c000cea1:	90                   	nop

c000cea2 <PhysicalDisk::~PhysicalDisk()>:
c000cea2:	83 ec 0c             	sub    esp,0xc
c000cea5:	ba 14 1c 02 c0       	mov    edx,0xc0021c14
c000ceaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ceae:	89 10                	mov    DWORD PTR [eax],edx
c000ceb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ceb4:	83 ec 0c             	sub    esp,0xc
c000ceb7:	50                   	push   eax
c000ceb8:	e8 89 fa ff ff       	call   c000c946 <Device::~Device()>
c000cebd:	83 c4 10             	add    esp,0x10
c000cec0:	90                   	nop
c000cec1:	83 c4 0c             	add    esp,0xc
c000cec4:	c3                   	ret    
c000cec5:	90                   	nop

c000cec6 <PhysicalDisk::~PhysicalDisk()>:
c000cec6:	83 ec 0c             	sub    esp,0xc
c000cec9:	83 ec 0c             	sub    esp,0xc
c000cecc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ced0:	e8 cd ff ff ff       	call   c000cea2 <PhysicalDisk::~PhysicalDisk()>
c000ced5:	83 c4 10             	add    esp,0x10
c000ced8:	83 ec 08             	sub    esp,0x8
c000cedb:	68 6c 01 00 00       	push   0x16c
c000cee0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee4:	e8 23 d9 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000cee9:	83 c4 10             	add    esp,0x10
c000ceec:	83 c4 0c             	add    esp,0xc
c000ceef:	c3                   	ret    

c000cef0 <int_handler>:
c000cef0:	55                   	push   ebp
c000cef1:	57                   	push   edi
c000cef2:	56                   	push   esi
c000cef3:	53                   	push   ebx
c000cef4:	83 ec 0c             	sub    esp,0xc
c000cef7:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000cefe:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000cf02:	74 0b                	je     c000cf0f <int_handler+0x1f>
c000cf04:	fa                   	cli    
c000cf05:	f4                   	hlt    
c000cf06:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000cf0d:	75 f5                	jne    c000cf04 <int_handler+0x14>
c000cf0f:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000cf12:	8d 46 e0             	lea    eax,[esi-0x20]
c000cf15:	83 f8 17             	cmp    eax,0x17
c000cf18:	76 40                	jbe    c000cf5a <int_handler+0x6a>
c000cf1a:	c1 e6 04             	shl    esi,0x4
c000cf1d:	31 db                	xor    ebx,ebx
c000cf1f:	8d ae 20 a4 02 c0    	lea    ebp,[esi-0x3ffd5be0]
c000cf25:	81 c6 20 94 02 c0    	add    esi,0xc0029420
c000cf2b:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000cf2f:	85 c0                	test   eax,eax
c000cf31:	74 13                	je     c000cf46 <int_handler+0x56>
c000cf33:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000cf37:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000cf3a:	74 2c                	je     c000cf68 <int_handler+0x78>
c000cf3c:	83 ec 08             	sub    esp,0x8
c000cf3f:	52                   	push   edx
c000cf40:	57                   	push   edi
c000cf41:	ff d0                	call   eax
c000cf43:	83 c4 10             	add    esp,0x10
c000cf46:	83 c3 01             	add    ebx,0x1
c000cf49:	83 fb 04             	cmp    ebx,0x4
c000cf4c:	75 dd                	jne    c000cf2b <int_handler+0x3b>
c000cf4e:	83 c4 0c             	add    esp,0xc
c000cf51:	31 c0                	xor    eax,eax
c000cf53:	5b                   	pop    ebx
c000cf54:	31 d2                	xor    edx,edx
c000cf56:	5e                   	pop    esi
c000cf57:	5f                   	pop    edi
c000cf58:	5d                   	pop    ebp
c000cf59:	c3                   	ret    
c000cf5a:	83 ec 0c             	sub    esp,0xc
c000cf5d:	50                   	push   eax
c000cf5e:	e8 43 b4 00 00       	call   c00183a6 <HalEndOfInterrupt(int)>
c000cf63:	83 c4 10             	add    esp,0x10
c000cf66:	eb b2                	jmp    c000cf1a <int_handler+0x2a>
c000cf68:	83 ec 08             	sub    esp,0x8
c000cf6b:	52                   	push   edx
c000cf6c:	57                   	push   edi
c000cf6d:	ff d0                	call   eax
c000cf6f:	83 c4 10             	add    esp,0x10
c000cf72:	83 c4 0c             	add    esp,0xc
c000cf75:	5b                   	pop    ebx
c000cf76:	5e                   	pop    esi
c000cf77:	5f                   	pop    edi
c000cf78:	5d                   	pop    ebp
c000cf79:	c3                   	ret    

c000cf7a <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cf7a:	56                   	push   esi
c000cf7b:	31 c0                	xor    eax,eax
c000cf7d:	53                   	push   ebx
c000cf7e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cf82:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cf86:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cf8a:	89 ca                	mov    edx,ecx
c000cf8c:	c1 e2 04             	shl    edx,0x4
c000cf8f:	83 bc 82 20 a4 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd5be0],0x0
c000cf97:	74 17                	je     c000cfb0 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cf99:	83 c0 01             	add    eax,0x1
c000cf9c:	83 f8 04             	cmp    eax,0x4
c000cf9f:	75 ee                	jne    c000cf8f <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cfa1:	c7 44 24 0c 44 1c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021c44
c000cfa9:	5b                   	pop    ebx
c000cfaa:	5e                   	pop    esi
c000cfab:	e9 5b 46 00 00       	jmp    c001160b <KePanic(char const*)>
c000cfb0:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cfb3:	89 1c 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],ebx
c000cfba:	5b                   	pop    ebx
c000cfbb:	89 34 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],esi
c000cfc2:	5e                   	pop    esi
c000cfc3:	c3                   	ret    

c000cfc4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cfc4:	55                   	push   ebp
c000cfc5:	57                   	push   edi
c000cfc6:	56                   	push   esi
c000cfc7:	53                   	push   ebx
c000cfc8:	83 ec 0c             	sub    esp,0xc
c000cfcb:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000cfd1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cfd5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cfd9:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cfe0:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cfe3:	74 57                	je     c000d03c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cfe5:	84 c0                	test   al,al
c000cfe7:	89 c7                	mov    edi,eax
c000cfe9:	74 1d                	je     c000d008 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000cfeb:	83 fe 0f             	cmp    esi,0xf
c000cfee:	0f 8f d9 00 00 00    	jg     c000d0cd <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c000cff4:	0f b6 b6 48 37 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc8b8]
c000cffb:	0f b7 bc 36 c0 bb 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd4440]
c000d003:	d1 ef                	shr    edi,1
c000d005:	83 e7 01             	and    edi,0x1
c000d008:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000d00d:	83 ec 08             	sub    esp,0x8
c000d010:	31 db                	xor    ebx,ebx
c000d012:	50                   	push   eax
c000d013:	68 51 1c 02 c0       	push   0xc0021c51
c000d018:	e8 ed d8 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000d01d:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000d022:	83 c4 10             	add    esp,0x10
c000d025:	85 c0                	test   eax,eax
c000d027:	7f 59                	jg     c000d082 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbe>
c000d029:	8d 6e 20             	lea    ebp,[esi+0x20]
c000d02c:	83 ec 0c             	sub    esp,0xc
c000d02f:	68 68 1c 02 c0       	push   0xc0021c68
c000d034:	e8 d2 45 00 00       	call   c001160b <KePanic(char const*)>
c000d039:	83 c4 10             	add    esp,0x10
c000d03c:	89 e8                	mov    eax,ebp
c000d03e:	31 d2                	xor    edx,edx
c000d040:	c1 e0 04             	shl    eax,0x4
c000d043:	8b 8c 90 20 a4 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd5be0]
c000d04a:	85 c9                	test   ecx,ecx
c000d04c:	0f 84 92 00 00 00    	je     c000d0e4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x120>
c000d052:	83 c2 01             	add    edx,0x1
c000d055:	83 fa 04             	cmp    edx,0x4
c000d058:	75 e9                	jne    c000d043 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000d05a:	83 ec 0c             	sub    esp,0xc
c000d05d:	68 bc 1c 02 c0       	push   0xc0021cbc
c000d062:	e8 a4 45 00 00       	call   c001160b <KePanic(char const*)>
c000d067:	83 c4 10             	add    esp,0x10
c000d06a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d06f:	83 c4 0c             	add    esp,0xc
c000d072:	5b                   	pop    ebx
c000d073:	5e                   	pop    esi
c000d074:	5f                   	pop    edi
c000d075:	5d                   	pop    ebp
c000d076:	c3                   	ret    
c000d077:	83 c3 01             	add    ebx,0x1
c000d07a:	39 1d c0 d0 02 c0    	cmp    DWORD PTR ds:0xc002d0c0,ebx
c000d080:	7e a7                	jle    c000d029 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000d082:	8b 2c 9d e0 d0 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd2f20]
c000d089:	83 ec 08             	sub    esp,0x8
c000d08c:	56                   	push   esi
c000d08d:	55                   	push   ebp
c000d08e:	e8 fd 1a 01 00       	call   c001eb90 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000d093:	83 c4 10             	add    esp,0x10
c000d096:	84 c0                	test   al,al
c000d098:	74 dd                	je     c000d077 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000d09a:	89 f8                	mov    eax,edi
c000d09c:	83 ec 04             	sub    esp,0x4
c000d09f:	8b 1c 9d e0 d0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd2f20]
c000d0a6:	8d 6e 20             	lea    ebp,[esi+0x20]
c000d0a9:	0f b6 f8             	movzx  edi,al
c000d0ac:	57                   	push   edi
c000d0ad:	89 e8                	mov    eax,ebp
c000d0af:	6a 00                	push   0x0
c000d0b1:	0f b6 c0             	movzx  eax,al
c000d0b4:	50                   	push   eax
c000d0b5:	89 f0                	mov    eax,esi
c000d0b7:	6a 00                	push   0x0
c000d0b9:	0f b6 c0             	movzx  eax,al
c000d0bc:	6a 00                	push   0x0
c000d0be:	50                   	push   eax
c000d0bf:	53                   	push   ebx
c000d0c0:	e8 37 1c 01 00       	call   c001ecfc <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000d0c5:	83 c4 20             	add    esp,0x20
c000d0c8:	e9 6f ff ff ff       	jmp    c000d03c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000d0cd:	83 ec 0c             	sub    esp,0xc
c000d0d0:	31 ff                	xor    edi,edi
c000d0d2:	68 84 1c 02 c0       	push   0xc0021c84
c000d0d7:	e8 2f 45 00 00       	call   c001160b <KePanic(char const*)>
c000d0dc:	83 c4 10             	add    esp,0x10
c000d0df:	e9 24 ff ff ff       	jmp    c000d008 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000d0e4:	8d 04 aa             	lea    eax,[edx+ebp*4]
c000d0e7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d0eb:	89 14 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],edx
c000d0f2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d0f6:	89 14 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],edx
c000d0fd:	83 c4 0c             	add    esp,0xc
c000d100:	89 f0                	mov    eax,esi
c000d102:	5b                   	pop    ebx
c000d103:	5e                   	pop    esi
c000d104:	5f                   	pop    edi
c000d105:	5d                   	pop    ebp
c000d106:	c3                   	ret    

c000d107 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000d107:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d10b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d10f:	c1 e0 04             	shl    eax,0x4
c000d112:	8d 50 10             	lea    edx,[eax+0x10]
c000d115:	39 88 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],ecx
c000d11b:	74 08                	je     c000d125 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000d11d:	83 c0 04             	add    eax,0x4
c000d120:	39 d0                	cmp    eax,edx
c000d122:	75 f1                	jne    c000d115 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000d124:	c3                   	ret    
c000d125:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d12f:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d139:	eb e2                	jmp    c000d11d <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000d13b <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000d13b:	56                   	push   esi
c000d13c:	53                   	push   ebx
c000d13d:	83 ec 04             	sub    esp,0x4
c000d140:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d145:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d149:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d14d:	74 0e                	je     c000d15d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000d14f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000d154:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000d15b:	75 34                	jne    c000d191 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x56>
c000d15d:	8d 43 20             	lea    eax,[ebx+0x20]
c000d160:	c1 e0 04             	shl    eax,0x4
c000d163:	8d 50 10             	lea    edx,[eax+0x10]
c000d166:	39 b0 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],esi
c000d16c:	74 0d                	je     c000d17b <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c000d16e:	83 c0 04             	add    eax,0x4
c000d171:	39 d0                	cmp    eax,edx
c000d173:	75 f1                	jne    c000d166 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000d175:	83 c4 04             	add    esp,0x4
c000d178:	5b                   	pop    ebx
c000d179:	5e                   	pop    esi
c000d17a:	c3                   	ret    
c000d17b:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d185:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d18f:	eb dd                	jmp    c000d16e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c000d191:	83 fb 0f             	cmp    ebx,0xf
c000d194:	7f 09                	jg     c000d19f <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x64>
c000d196:	0f b6 9b 48 37 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdc8b8]
c000d19d:	eb be                	jmp    c000d15d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000d19f:	83 ec 0c             	sub    esp,0xc
c000d1a2:	68 75 1c 02 c0       	push   0xc0021c75
c000d1a7:	e8 5f 44 00 00       	call   c001160b <KePanic(char const*)>
c000d1ac:	83 c4 10             	add    esp,0x10
c000d1af:	eb ac                	jmp    c000d15d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c000d1b1 <setupINTS()>:
c000d1b1:	31 c0                	xor    eax,eax
c000d1b3:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d1bd:	83 c0 10             	add    eax,0x10
c000d1c0:	c7 80 10 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bf0],0x0
c000d1ca:	c7 80 14 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bec],0x0
c000d1d4:	c7 80 14 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bec],0x0
c000d1de:	c7 80 18 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be8],0x0
c000d1e8:	c7 80 18 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be8],0x0
c000d1f2:	c7 80 1c a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be4],0x0
c000d1fc:	c7 80 1c 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be4],0x0
c000d206:	3d 00 10 00 00       	cmp    eax,0x1000
c000d20b:	75 a6                	jne    c000d1b3 <setupINTS()+0x2>
c000d20d:	c3                   	ret    

c000d20e <convertLegacyIRQNumber(int)>:
c000d20e:	83 ec 0c             	sub    esp,0xc
c000d211:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000d217:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d21b:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000d222:	74 0c                	je     c000d230 <convertLegacyIRQNumber(int)+0x22>
c000d224:	83 f8 0f             	cmp    eax,0xf
c000d227:	7f 0b                	jg     c000d234 <convertLegacyIRQNumber(int)+0x26>
c000d229:	0f b6 80 48 37 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc8b8]
c000d230:	83 c4 0c             	add    esp,0xc
c000d233:	c3                   	ret    
c000d234:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d238:	83 ec 0c             	sub    esp,0xc
c000d23b:	68 84 1c 02 c0       	push   0xc0021c84
c000d240:	e8 c6 43 00 00       	call   c001160b <KePanic(char const*)>
c000d245:	83 c4 10             	add    esp,0x10
c000d248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d24c:	83 c4 0c             	add    esp,0xc
c000d24f:	c3                   	ret    

c000d250 <startGUI(void*)>:
c000d250:	55                   	push   ebp
c000d251:	89 e5                	mov    ebp,esp
c000d253:	53                   	push   ebx
c000d254:	83 ec 04             	sub    esp,0x4
c000d257:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d25c:	83 e8 01             	sub    eax,0x1
c000d25f:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d264:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d269:	85 c0                	test   eax,eax
c000d26b:	75 01                	jne    c000d26e <startGUI(void*)+0x1e>
c000d26d:	fb                   	sti    
c000d26e:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d274:	83 ec 08             	sub    esp,0x8
c000d277:	6a 01                	push   0x1
c000d279:	68 e1 1c 02 c0       	push   0xc0021ce1
c000d27e:	e8 06 84 00 00       	call   c0015689 <Thr::loadDLL(char const*, bool)>
c000d283:	83 c4 10             	add    esp,0x10
c000d286:	83 ec 08             	sub    esp,0x8
c000d289:	53                   	push   ebx
c000d28a:	50                   	push   eax
c000d28b:	e8 39 86 00 00       	call   c00158c9 <Thr::executeDLL(unsigned long, void*)>
c000d290:	83 c4 10             	add    esp,0x10
c000d293:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d299:	83 ec 08             	sub    esp,0x8
c000d29c:	6a 01                	push   0x1
c000d29e:	68 fb 1c 02 c0       	push   0xc0021cfb
c000d2a3:	e8 e1 83 00 00       	call   c0015689 <Thr::loadDLL(char const*, bool)>
c000d2a8:	83 c4 10             	add    esp,0x10
c000d2ab:	83 ec 08             	sub    esp,0x8
c000d2ae:	53                   	push   ebx
c000d2af:	50                   	push   eax
c000d2b0:	e8 14 86 00 00       	call   c00158c9 <Thr::executeDLL(unsigned long, void*)>
c000d2b5:	83 c4 10             	add    esp,0x10
c000d2b8:	90                   	nop
c000d2b9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d2bc:	c9                   	leave  
c000d2bd:	c3                   	ret    

c000d2be <startGUIVESA(void*)>:
c000d2be:	55                   	push   ebp
c000d2bf:	89 e5                	mov    ebp,esp
c000d2c1:	53                   	push   ebx
c000d2c2:	83 ec 04             	sub    esp,0x4
c000d2c5:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d2ca:	83 e8 01             	sub    eax,0x1
c000d2cd:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d2d2:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d2d7:	85 c0                	test   eax,eax
c000d2d9:	75 01                	jne    c000d2dc <startGUIVESA(void*)+0x1e>
c000d2db:	fb                   	sti    
c000d2dc:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d2e2:	83 ec 08             	sub    esp,0x8
c000d2e5:	6a 01                	push   0x1
c000d2e7:	68 19 1d 02 c0       	push   0xc0021d19
c000d2ec:	e8 98 83 00 00       	call   c0015689 <Thr::loadDLL(char const*, bool)>
c000d2f1:	83 c4 10             	add    esp,0x10
c000d2f4:	83 ec 08             	sub    esp,0x8
c000d2f7:	53                   	push   ebx
c000d2f8:	50                   	push   eax
c000d2f9:	e8 cb 85 00 00       	call   c00158c9 <Thr::executeDLL(unsigned long, void*)>
c000d2fe:	83 c4 10             	add    esp,0x10
c000d301:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d307:	83 ec 08             	sub    esp,0x8
c000d30a:	6a 01                	push   0x1
c000d30c:	68 fb 1c 02 c0       	push   0xc0021cfb
c000d311:	e8 73 83 00 00       	call   c0015689 <Thr::loadDLL(char const*, bool)>
c000d316:	83 c4 10             	add    esp,0x10
c000d319:	83 ec 08             	sub    esp,0x8
c000d31c:	53                   	push   ebx
c000d31d:	50                   	push   eax
c000d31e:	e8 a6 85 00 00       	call   c00158c9 <Thr::executeDLL(unsigned long, void*)>
c000d323:	83 c4 10             	add    esp,0x10
c000d326:	90                   	nop
c000d327:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d32a:	c9                   	leave  
c000d32b:	c3                   	ret    

c000d32c <sendKeyToTerminal(unsigned char)>:
c000d32c:	55                   	push   ebp
c000d32d:	89 e5                	mov    ebp,esp
c000d32f:	83 ec 28             	sub    esp,0x28
c000d332:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d335:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000d338:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c000d33d:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000d341:	83 ec 08             	sub    esp,0x8
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	e8 71 ba ff ff       	call   c0008dbc <VgaText::receiveKey(unsigned char)>
c000d34b:	83 c4 10             	add    esp,0x10
c000d34e:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d352:	83 f8 0a             	cmp    eax,0xa
c000d355:	74 16                	je     c000d36d <sendKeyToTerminal(unsigned char)+0x41>
c000d357:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d35b:	83 f8 03             	cmp    eax,0x3
c000d35e:	74 0d                	je     c000d36d <sendKeyToTerminal(unsigned char)+0x41>
c000d360:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d364:	83 f8 1c             	cmp    eax,0x1c
c000d367:	0f 85 97 00 00 00    	jne    c000d404 <sendKeyToTerminal(unsigned char)+0xd8>
c000d36d:	fa                   	cli    
c000d36e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d373:	83 c0 01             	add    eax,0x1
c000d376:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d37b:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d380:	83 c0 01             	add    eax,0x1
c000d383:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d388:	a1 20 b4 02 c0       	mov    eax,ds:0xc002b420
c000d38d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d390:	c7 05 20 b4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b420,0x0
c000d39a:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000d39e:	74 1f                	je     c000d3bf <sendKeyToTerminal(unsigned char)+0x93>
c000d3a0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d3a3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000d3a6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d3a9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d3ac:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d3af:	83 ec 0c             	sub    esp,0xc
c000d3b2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d3b5:	e8 32 92 00 00       	call   c00165ec <unblockTask(ThreadControlBlock*)>
c000d3ba:	83 c4 10             	add    esp,0x10
c000d3bd:	eb db                	jmp    c000d39a <sendKeyToTerminal(unsigned char)+0x6e>
c000d3bf:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d3c4:	83 e8 01             	sub    eax,0x1
c000d3c7:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d3cc:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d3d1:	85 c0                	test   eax,eax
c000d3d3:	75 18                	jne    c000d3ed <sendKeyToTerminal(unsigned char)+0xc1>
c000d3d5:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c000d3da:	85 c0                	test   eax,eax
c000d3dc:	74 0f                	je     c000d3ed <sendKeyToTerminal(unsigned char)+0xc1>
c000d3de:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000d3e8:	e8 07 8d 00 00       	call   c00160f4 <schedule()>
c000d3ed:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d3f2:	83 e8 01             	sub    eax,0x1
c000d3f5:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d3fa:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d3ff:	85 c0                	test   eax,eax
c000d401:	75 01                	jne    c000d404 <sendKeyToTerminal(unsigned char)+0xd8>
c000d403:	fb                   	sti    
c000d404:	90                   	nop
c000d405:	c9                   	leave  
c000d406:	c3                   	ret    

c000d407 <sendKeyboardToken(KeyboardToken)>:
c000d407:	55                   	push   ebp
c000d408:	89 e5                	mov    ebp,esp
c000d40a:	83 ec 18             	sub    esp,0x18
c000d40d:	e8 49 42 00 00       	call   c001165b <KeUserIOReceived()>
c000d412:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d415:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d418:	0f b7 c0             	movzx  eax,ax
c000d41b:	83 f2 01             	xor    edx,0x1
c000d41e:	88 90 40 b4 02 c0    	mov    BYTE PTR [eax-0x3ffd4bc0],dl
c000d424:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d429:	85 c0                	test   eax,eax
c000d42b:	74 24                	je     c000d451 <sendKeyboardToken(KeyboardToken)+0x4a>
c000d42d:	8b 15 28 b4 02 c0    	mov    edx,DWORD PTR ds:0xc002b428
c000d433:	83 ec 04             	sub    esp,0x4
c000d436:	68 40 b4 02 c0       	push   0xc002b440
c000d43b:	83 ec 08             	sub    esp,0x8
c000d43e:	89 e0                	mov    eax,esp
c000d440:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000d443:	89 08                	mov    DWORD PTR [eax],ecx
c000d445:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000d448:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d44c:	ff d2                	call   edx
c000d44e:	83 c4 10             	add    esp,0x10
c000d451:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d455:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d458:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d45d:	0f b6 d2             	movzx  edx,dl
c000d460:	0f b6 c0             	movzx  eax,al
c000d463:	39 c2                	cmp    edx,eax
c000d465:	74 1c                	je     c000d483 <sendKeyboardToken(KeyboardToken)+0x7c>
c000d467:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d46a:	a2 48 b8 02 c0       	mov    ds:0xc002b848,al
c000d46f:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d474:	0f b6 c0             	movzx  eax,al
c000d477:	83 ec 0c             	sub    esp,0xc
c000d47a:	50                   	push   eax
c000d47b:	e8 98 b0 ff ff       	call   c0008518 <setTerminalScrollLock(bool)>
c000d480:	83 c4 10             	add    esp,0x10
c000d483:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d486:	0f b6 c0             	movzx  eax,al
c000d489:	85 c0                	test   eax,eax
c000d48b:	0f 84 da 00 00 00    	je     c000d56b <sendKeyboardToken(KeyboardToken)+0x164>
c000d491:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d494:	0f b7 c0             	movzx  eax,ax
c000d497:	3d 18 03 00 00       	cmp    eax,0x318
c000d49c:	75 06                	jne    c000d4a4 <sendKeyboardToken(KeyboardToken)+0x9d>
c000d49e:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d4a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4a7:	0f b7 c0             	movzx  eax,ax
c000d4aa:	3d 19 03 00 00       	cmp    eax,0x319
c000d4af:	75 06                	jne    c000d4b7 <sendKeyboardToken(KeyboardToken)+0xb0>
c000d4b1:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d4b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4ba:	0f b7 c0             	movzx  eax,ax
c000d4bd:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d4c2:	75 06                	jne    c000d4ca <sendKeyboardToken(KeyboardToken)+0xc3>
c000d4c4:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d4ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4cd:	0f b7 c0             	movzx  eax,ax
c000d4d0:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d4d5:	75 06                	jne    c000d4dd <sendKeyboardToken(KeyboardToken)+0xd6>
c000d4d7:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d4dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4e0:	0f b7 c0             	movzx  eax,ax
c000d4e3:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d4e8:	75 06                	jne    c000d4f0 <sendKeyboardToken(KeyboardToken)+0xe9>
c000d4ea:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d4f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4f3:	0f b7 c0             	movzx  eax,ax
c000d4f6:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d4fb:	75 06                	jne    c000d503 <sendKeyboardToken(KeyboardToken)+0xfc>
c000d4fd:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d503:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d506:	0f b7 c0             	movzx  eax,ax
c000d509:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d50e:	75 06                	jne    c000d516 <sendKeyboardToken(KeyboardToken)+0x10f>
c000d510:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d516:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d519:	0f b7 c0             	movzx  eax,ax
c000d51c:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d521:	75 06                	jne    c000d529 <sendKeyboardToken(KeyboardToken)+0x122>
c000d523:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d529:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d52c:	0f b7 c0             	movzx  eax,ax
c000d52f:	3d 20 03 00 00       	cmp    eax,0x320
c000d534:	75 06                	jne    c000d53c <sendKeyboardToken(KeyboardToken)+0x135>
c000d536:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d53c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d53f:	0f b7 c0             	movzx  eax,ax
c000d542:	3d 21 03 00 00       	cmp    eax,0x321
c000d547:	75 06                	jne    c000d54f <sendKeyboardToken(KeyboardToken)+0x148>
c000d549:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d54f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d552:	0f b7 c0             	movzx  eax,ax
c000d555:	3d 22 03 00 00       	cmp    eax,0x322
c000d55a:	0f 85 f1 00 00 00    	jne    c000d651 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d560:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d566:	e9 e6 00 00 00       	jmp    c000d651 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d56b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d56e:	0f b7 c0             	movzx  eax,ax
c000d571:	3d 18 03 00 00       	cmp    eax,0x318
c000d576:	75 0a                	jne    c000d582 <sendKeyboardToken(KeyboardToken)+0x17b>
c000d578:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d57e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d582:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d585:	0f b7 c0             	movzx  eax,ax
c000d588:	3d 19 03 00 00       	cmp    eax,0x319
c000d58d:	75 0a                	jne    c000d599 <sendKeyboardToken(KeyboardToken)+0x192>
c000d58f:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d595:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d599:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d59c:	0f b7 c0             	movzx  eax,ax
c000d59f:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d5a4:	75 0a                	jne    c000d5b0 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d5a6:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d5ac:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5b3:	0f b7 c0             	movzx  eax,ax
c000d5b6:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d5bb:	75 0a                	jne    c000d5c7 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d5bd:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d5c3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5ca:	0f b7 c0             	movzx  eax,ax
c000d5cd:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d5d2:	75 0a                	jne    c000d5de <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d5d4:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d5da:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5e1:	0f b7 c0             	movzx  eax,ax
c000d5e4:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d5e9:	75 0a                	jne    c000d5f5 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d5eb:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d5f1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5f8:	0f b7 c0             	movzx  eax,ax
c000d5fb:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d600:	75 0a                	jne    c000d60c <sendKeyboardToken(KeyboardToken)+0x205>
c000d602:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d608:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d60c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d60f:	0f b7 c0             	movzx  eax,ax
c000d612:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d617:	75 0a                	jne    c000d623 <sendKeyboardToken(KeyboardToken)+0x21c>
c000d619:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d61f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d623:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d626:	0f b7 c0             	movzx  eax,ax
c000d629:	3d 20 03 00 00       	cmp    eax,0x320
c000d62e:	75 0a                	jne    c000d63a <sendKeyboardToken(KeyboardToken)+0x233>
c000d630:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d636:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d63a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d63d:	0f b7 c0             	movzx  eax,ax
c000d640:	3d 21 03 00 00       	cmp    eax,0x321
c000d645:	75 0a                	jne    c000d651 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d647:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d64d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d651:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d654:	0f b7 c0             	movzx  eax,ax
c000d657:	3d 00 02 00 00       	cmp    eax,0x200
c000d65c:	75 2f                	jne    c000d68d <sendKeyboardToken(KeyboardToken)+0x286>
c000d65e:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d663:	83 f0 01             	xor    eax,0x1
c000d666:	0f b6 c0             	movzx  eax,al
c000d669:	85 c0                	test   eax,eax
c000d66b:	74 20                	je     c000d68d <sendKeyboardToken(KeyboardToken)+0x286>
c000d66d:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d672:	6a 01                	push   0x1
c000d674:	6a 00                	push   0x0
c000d676:	68 50 d2 00 c0       	push   0xc000d250
c000d67b:	50                   	push   eax
c000d67c:	e8 27 88 00 00       	call   c0015ea8 <Process::createThread(void (*)(void*), void*, int)>
c000d681:	83 c4 10             	add    esp,0x10
c000d684:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d68b:	eb 3a                	jmp    c000d6c7 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d68d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d690:	0f b7 c0             	movzx  eax,ax
c000d693:	3d 01 02 00 00       	cmp    eax,0x201
c000d698:	75 2d                	jne    c000d6c7 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d69a:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d69f:	83 f0 01             	xor    eax,0x1
c000d6a2:	0f b6 c0             	movzx  eax,al
c000d6a5:	85 c0                	test   eax,eax
c000d6a7:	74 1e                	je     c000d6c7 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d6a9:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d6ae:	6a 01                	push   0x1
c000d6b0:	6a 00                	push   0x0
c000d6b2:	68 be d2 00 c0       	push   0xc000d2be
c000d6b7:	50                   	push   eax
c000d6b8:	e8 eb 87 00 00       	call   c0015ea8 <Process::createThread(void (*)(void*), void*, int)>
c000d6bd:	83 c4 10             	add    esp,0x10
c000d6c0:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d6c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6ca:	0f b7 c0             	movzx  eax,ax
c000d6cd:	3d 25 03 00 00       	cmp    eax,0x325
c000d6d2:	75 06                	jne    c000d6da <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d6d4:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d6da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6dd:	0f b7 c0             	movzx  eax,ax
c000d6e0:	3d 24 03 00 00       	cmp    eax,0x324
c000d6e5:	75 06                	jne    c000d6ed <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d6e7:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d6ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6f0:	0f b7 c0             	movzx  eax,ax
c000d6f3:	3d 23 03 00 00       	cmp    eax,0x323
c000d6f8:	75 06                	jne    c000d700 <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d6fa:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d700:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d703:	0f b7 c0             	movzx  eax,ax
c000d706:	3d 26 03 00 00       	cmp    eax,0x326
c000d70b:	75 06                	jne    c000d713 <sendKeyboardToken(KeyboardToken)+0x30c>
c000d70d:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d713:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d716:	0f b7 c0             	movzx  eax,ax
c000d719:	3d 27 03 00 00       	cmp    eax,0x327
c000d71e:	75 06                	jne    c000d726 <sendKeyboardToken(KeyboardToken)+0x31f>
c000d720:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d726:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d729:	0f b7 c0             	movzx  eax,ax
c000d72c:	3d 22 03 00 00       	cmp    eax,0x322
c000d731:	75 06                	jne    c000d739 <sendKeyboardToken(KeyboardToken)+0x332>
c000d733:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d739:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d73d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d740:	83 f0 01             	xor    eax,0x1
c000d743:	0f b6 c0             	movzx  eax,al
c000d746:	85 c0                	test   eax,eax
c000d748:	74 7c                	je     c000d7c6 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d74a:	a0 41 b5 02 c0       	mov    al,ds:0xc002b541
c000d74f:	0f b6 c0             	movzx  eax,al
c000d752:	85 c0                	test   eax,eax
c000d754:	74 43                	je     c000d799 <sendKeyboardToken(KeyboardToken)+0x392>
c000d756:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d75a:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d75e:	85 c0                	test   eax,eax
c000d760:	74 2b                	je     c000d78d <sendKeyboardToken(KeyboardToken)+0x386>
c000d762:	8b 15 44 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b844
c000d768:	89 d0                	mov    eax,edx
c000d76a:	c1 e0 02             	shl    eax,0x2
c000d76d:	01 d0                	add    eax,edx
c000d76f:	d1 e0                	shl    eax,1
c000d771:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d776:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d779:	0f b7 c0             	movzx  eax,ax
c000d77c:	8d 50 d0             	lea    edx,[eax-0x30]
c000d77f:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d784:	01 d0                	add    eax,edx
c000d786:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d78b:	eb 71                	jmp    c000d7fe <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d78d:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d797:	eb 65                	jmp    c000d7fe <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d799:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d79e:	85 c0                	test   eax,eax
c000d7a0:	74 18                	je     c000d7ba <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d7a2:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d7a7:	0f b6 c0             	movzx  eax,al
c000d7aa:	83 ec 0c             	sub    esp,0xc
c000d7ad:	50                   	push   eax
c000d7ae:	e8 79 fb ff ff       	call   c000d32c <sendKeyToTerminal(unsigned char)>
c000d7b3:	83 c4 10             	add    esp,0x10
c000d7b6:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d7ba:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d7c4:	eb 38                	jmp    c000d7fe <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d7c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7c9:	0f b7 c0             	movzx  eax,ax
c000d7cc:	3d 01 01 00 00       	cmp    eax,0x101
c000d7d1:	75 2b                	jne    c000d7fe <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d7d3:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d7d8:	85 c0                	test   eax,eax
c000d7da:	74 18                	je     c000d7f4 <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d7dc:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d7e1:	0f b6 c0             	movzx  eax,al
c000d7e4:	83 ec 0c             	sub    esp,0xc
c000d7e7:	50                   	push   eax
c000d7e8:	e8 3f fb ff ff       	call   c000d32c <sendKeyToTerminal(unsigned char)>
c000d7ed:	83 c4 10             	add    esp,0x10
c000d7f0:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d7f4:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d7fe:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d801:	83 f0 01             	xor    eax,0x1
c000d804:	0f b6 c0             	movzx  eax,al
c000d807:	85 c0                	test   eax,eax
c000d809:	74 5a                	je     c000d865 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d80b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d80e:	83 f0 01             	xor    eax,0x1
c000d811:	0f b6 c0             	movzx  eax,al
c000d814:	85 c0                	test   eax,eax
c000d816:	74 4d                	je     c000d865 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d818:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d81d:	83 f0 01             	xor    eax,0x1
c000d820:	0f b6 c0             	movzx  eax,al
c000d823:	85 c0                	test   eax,eax
c000d825:	74 3e                	je     c000d865 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d827:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d82a:	0f b7 c0             	movzx  eax,ax
c000d82d:	83 f8 1f             	cmp    eax,0x1f
c000d830:	76 0b                	jbe    c000d83d <sendKeyboardToken(KeyboardToken)+0x436>
c000d832:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d835:	0f b7 c0             	movzx  eax,ax
c000d838:	83 f8 7e             	cmp    eax,0x7e
c000d83b:	76 16                	jbe    c000d853 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d83d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d840:	0f b7 c0             	movzx  eax,ax
c000d843:	83 f8 0a             	cmp    eax,0xa
c000d846:	74 0b                	je     c000d853 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d848:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d84b:	0f b7 c0             	movzx  eax,ax
c000d84e:	83 f8 08             	cmp    eax,0x8
c000d851:	75 12                	jne    c000d865 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d853:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d856:	0f b6 c0             	movzx  eax,al
c000d859:	83 ec 0c             	sub    esp,0xc
c000d85c:	50                   	push   eax
c000d85d:	e8 ca fa ff ff       	call   c000d32c <sendKeyToTerminal(unsigned char)>
c000d862:	83 c4 10             	add    esp,0x10
c000d865:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d868:	83 f0 01             	xor    eax,0x1
c000d86b:	0f b6 c0             	movzx  eax,al
c000d86e:	85 c0                	test   eax,eax
c000d870:	74 5d                	je     c000d8cf <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d872:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d875:	83 f0 01             	xor    eax,0x1
c000d878:	0f b6 c0             	movzx  eax,al
c000d87b:	85 c0                	test   eax,eax
c000d87d:	74 50                	je     c000d8cf <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d87f:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d884:	0f b6 c0             	movzx  eax,al
c000d887:	85 c0                	test   eax,eax
c000d889:	74 44                	je     c000d8cf <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d88b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d88e:	0f b7 c0             	movzx  eax,ax
c000d891:	83 f8 3f             	cmp    eax,0x3f
c000d894:	76 39                	jbe    c000d8cf <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d896:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d899:	0f b7 c0             	movzx  eax,ax
c000d89c:	83 f8 7f             	cmp    eax,0x7f
c000d89f:	77 2e                	ja     c000d8cf <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d8a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d8a4:	88 c2                	mov    dl,al
c000d8a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d8a9:	0f b7 c0             	movzx  eax,ax
c000d8ac:	83 f8 5f             	cmp    eax,0x5f
c000d8af:	76 04                	jbe    c000d8b5 <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d8b1:	b0 20                	mov    al,0x20
c000d8b3:	eb 02                	jmp    c000d8b7 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d8b5:	b0 00                	mov    al,0x0
c000d8b7:	89 d1                	mov    ecx,edx
c000d8b9:	29 c1                	sub    ecx,eax
c000d8bb:	89 c8                	mov    eax,ecx
c000d8bd:	83 e8 40             	sub    eax,0x40
c000d8c0:	0f b6 c0             	movzx  eax,al
c000d8c3:	83 ec 0c             	sub    esp,0xc
c000d8c6:	50                   	push   eax
c000d8c7:	e8 60 fa ff ff       	call   c000d32c <sendKeyToTerminal(unsigned char)>
c000d8cc:	83 c4 10             	add    esp,0x10
c000d8cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d8d2:	0f b7 c0             	movzx  eax,ax
c000d8d5:	3d 00 03 00 00       	cmp    eax,0x300
c000d8da:	75 12                	jne    c000d8ee <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d8dc:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d8df:	83 f0 01             	xor    eax,0x1
c000d8e2:	0f b6 c0             	movzx  eax,al
c000d8e5:	85 c0                	test   eax,eax
c000d8e7:	74 05                	je     c000d8ee <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d8e9:	e8 2b ac ff ff       	call   c0008519 <doTerminalCycle()>
c000d8ee:	90                   	nop
c000d8ef:	c9                   	leave  
c000d8f0:	c3                   	ret    

c000d8f1 <clearInternalKeybuffer(VgaText*)>:
c000d8f1:	55                   	push   ebp
c000d8f2:	89 e5                	mov    ebp,esp
c000d8f4:	83 ec 08             	sub    esp,0x8
c000d8f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d8fa:	05 02 01 00 00       	add    eax,0x102
c000d8ff:	83 ec 0c             	sub    esp,0xc
c000d902:	50                   	push   eax
c000d903:	e8 78 2c ff ff       	call   c0000580 <strlen>
c000d908:	83 c4 10             	add    esp,0x10
c000d90b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d90e:	81 c2 02 01 00 00    	add    edx,0x102
c000d914:	83 ec 04             	sub    esp,0x4
c000d917:	50                   	push   eax
c000d918:	6a 00                	push   0x0
c000d91a:	52                   	push   edx
c000d91b:	e8 d0 2b ff ff       	call   c00004f0 <memset>
c000d920:	83 c4 10             	add    esp,0x10
c000d923:	90                   	nop
c000d924:	c9                   	leave  
c000d925:	c3                   	ret    

c000d926 <readKeyboard(VgaText*, char*, unsigned long)>:
c000d926:	55                   	push   ebp
c000d927:	89 e5                	mov    ebp,esp
c000d929:	83 ec 18             	sub    esp,0x18
c000d92c:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d931:	85 c0                	test   eax,eax
c000d933:	74 2a                	je     c000d95f <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d935:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d93b:	8b 15 28 b4 02 c0    	mov    edx,DWORD PTR ds:0xc002b428
c000d941:	83 ec 04             	sub    esp,0x4
c000d944:	68 40 b4 02 c0       	push   0xc002b440
c000d949:	83 ec 08             	sub    esp,0x8
c000d94c:	89 e0                	mov    eax,esp
c000d94e:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000d951:	89 08                	mov    DWORD PTR [eax],ecx
c000d953:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000d956:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d95a:	ff d2                	call   edx
c000d95c:	83 c4 10             	add    esp,0x10
c000d95f:	fb                   	sti    
c000d960:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d967:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d96b:	0f 84 0d 01 00 00    	je     c000da7e <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d971:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d974:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d97a:	0f be c0             	movsx  eax,al
c000d97d:	85 c0                	test   eax,eax
c000d97f:	75 2c                	jne    c000d9ad <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d981:	fa                   	cli    
c000d982:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d987:	83 c0 01             	add    eax,0x1
c000d98a:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d98f:	e8 60 87 00 00       	call   c00160f4 <schedule()>
c000d994:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d999:	83 e8 01             	sub    eax,0x1
c000d99c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d9a1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d9a6:	85 c0                	test   eax,eax
c000d9a8:	75 c7                	jne    c000d971 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d9aa:	fb                   	sti    
c000d9ab:	eb c4                	jmp    c000d971 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d9ad:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d9b0:	8d 50 01             	lea    edx,[eax+0x1]
c000d9b3:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d9b6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d9b9:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d9bf:	88 10                	mov    BYTE PTR [eax],dl
c000d9c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d9c4:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d9ca:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d9cd:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9d1:	83 f8 03             	cmp    eax,0x3
c000d9d4:	75 1e                	jne    c000d9f4 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d9d6:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d9db:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9dd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d9e0:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d9e6:	83 ec 08             	sub    esp,0x8
c000d9e9:	6a 02                	push   0x2
c000d9eb:	50                   	push   eax
c000d9ec:	e8 b6 40 00 00       	call   c0011aa7 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d9f1:	83 c4 10             	add    esp,0x10
c000d9f4:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9f8:	83 f8 1c             	cmp    eax,0x1c
c000d9fb:	75 1e                	jne    c000da1b <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d9fd:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000da02:	8b 00                	mov    eax,DWORD PTR [eax]
c000da04:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000da07:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000da0d:	83 ec 08             	sub    esp,0x8
c000da10:	6a 09                	push   0x9
c000da12:	50                   	push   eax
c000da13:	e8 8f 40 00 00       	call   c0011aa7 <KeRaiseSignal(SigHandlerBlock*, int)>
c000da18:	83 c4 10             	add    esp,0x10
c000da1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000da1e:	05 02 01 00 00       	add    eax,0x102
c000da23:	83 ec 0c             	sub    esp,0xc
c000da26:	50                   	push   eax
c000da27:	e8 54 2b ff ff       	call   c0000580 <strlen>
c000da2c:	83 c4 10             	add    esp,0x10
c000da2f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000da32:	81 c2 02 01 00 00    	add    edx,0x102
c000da38:	8d 4a 01             	lea    ecx,[edx+0x1]
c000da3b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000da3e:	81 c2 02 01 00 00    	add    edx,0x102
c000da44:	83 ec 04             	sub    esp,0x4
c000da47:	50                   	push   eax
c000da48:	51                   	push   ecx
c000da49:	52                   	push   edx
c000da4a:	e8 81 29 ff ff       	call   c00003d0 <memmove>
c000da4f:	83 c4 10             	add    esp,0x10
c000da52:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000da56:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000da5a:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000da5e:	83 f8 0a             	cmp    eax,0xa
c000da61:	74 16                	je     c000da79 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000da63:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000da67:	83 f8 03             	cmp    eax,0x3
c000da6a:	74 0d                	je     c000da79 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000da6c:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000da70:	83 f8 1c             	cmp    eax,0x1c
c000da73:	0f 85 ee fe ff ff    	jne    c000d967 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000da79:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000da7c:	eb 03                	jmp    c000da81 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000da7e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000da81:	c9                   	leave  
c000da82:	c3                   	ret    
c000da83:	90                   	nop

c000da84 <Keyboard::Keyboard(char const*)>:
c000da84:	83 ec 0c             	sub    esp,0xc
c000da87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da8b:	83 ec 08             	sub    esp,0x8
c000da8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da92:	50                   	push   eax
c000da93:	e8 44 f1 ff ff       	call   c000cbdc <Device::Device(char const*)>
c000da98:	83 c4 10             	add    esp,0x10
c000da9b:	ba 3c 1d 02 c0       	mov    edx,0xc0021d3c
c000daa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daa4:	89 10                	mov    DWORD PTR [eax],edx
c000daa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daaa:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000dab4:	c6 05 24 b4 02 c0 01 	mov    BYTE PTR ds:0xc002b424,0x1
c000dabb:	90                   	nop
c000dabc:	83 c4 0c             	add    esp,0xc
c000dabf:	c3                   	ret    

c000dac0 <Keyboard::~Keyboard()>:
c000dac0:	83 ec 0c             	sub    esp,0xc
c000dac3:	ba 3c 1d 02 c0       	mov    edx,0xc0021d3c
c000dac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dacc:	89 10                	mov    DWORD PTR [eax],edx
c000dace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dad2:	83 ec 0c             	sub    esp,0xc
c000dad5:	50                   	push   eax
c000dad6:	e8 6b ee ff ff       	call   c000c946 <Device::~Device()>
c000dadb:	83 c4 10             	add    esp,0x10
c000dade:	90                   	nop
c000dadf:	83 c4 0c             	add    esp,0xc
c000dae2:	c3                   	ret    
c000dae3:	90                   	nop

c000dae4 <Keyboard::~Keyboard()>:
c000dae4:	83 ec 0c             	sub    esp,0xc
c000dae7:	83 ec 0c             	sub    esp,0xc
c000daea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000daee:	e8 cd ff ff ff       	call   c000dac0 <Keyboard::~Keyboard()>
c000daf3:	83 c4 10             	add    esp,0x10
c000daf6:	83 ec 08             	sub    esp,0x8
c000daf9:	68 5c 01 00 00       	push   0x15c
c000dafe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db02:	e8 05 cd ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000db07:	83 c4 10             	add    esp,0x10
c000db0a:	83 c4 0c             	add    esp,0xc
c000db0d:	c3                   	ret    

c000db0e <LogicalDisk::close(int, int, void*)>:
c000db0e:	83 c8 ff             	or     eax,0xffffffff
c000db11:	c3                   	ret    

c000db12 <LogicalDisk::~LogicalDisk()>:
c000db12:	83 ec 0c             	sub    esp,0xc
c000db15:	ba b4 1d 02 c0       	mov    edx,0xc0021db4
c000db1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db1e:	89 10                	mov    DWORD PTR [eax],edx
c000db20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db24:	83 ec 0c             	sub    esp,0xc
c000db27:	50                   	push   eax
c000db28:	e8 19 ee ff ff       	call   c000c946 <Device::~Device()>
c000db2d:	83 c4 10             	add    esp,0x10
c000db30:	90                   	nop
c000db31:	83 c4 0c             	add    esp,0xc
c000db34:	c3                   	ret    
c000db35:	90                   	nop

c000db36 <LogicalDisk::~LogicalDisk()>:
c000db36:	83 ec 0c             	sub    esp,0xc
c000db39:	83 ec 0c             	sub    esp,0xc
c000db3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db40:	e8 cd ff ff ff       	call   c000db12 <LogicalDisk::~LogicalDisk()>
c000db45:	83 c4 10             	add    esp,0x10
c000db48:	83 ec 08             	sub    esp,0x8
c000db4b:	68 78 01 00 00       	push   0x178
c000db50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db54:	e8 b3 cc ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000db59:	83 c4 10             	add    esp,0x10
c000db5c:	83 c4 0c             	add    esp,0xc
c000db5f:	c3                   	ret    

c000db60 <LogicalDisk::open(int, int, void*)>:
c000db60:	83 ec 18             	sub    esp,0x18
c000db63:	68 68 1d 02 c0       	push   0xc0021d68
c000db68:	e8 9e 3a 00 00       	call   c001160b <KePanic(char const*)>
c000db6d:	83 c8 ff             	or     eax,0xffffffff
c000db70:	83 c4 1c             	add    esp,0x1c
c000db73:	c3                   	ret    

c000db74 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000db74:	53                   	push   ebx
c000db75:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000db79:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000db7d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000db81:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000db87:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000db8d:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000db93:	77 10                	ja     c000dba5 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000db95:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000db9b:	89 d3                	mov    ebx,edx
c000db9d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000dba3:	72 05                	jb     c000dbaa <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000dba5:	83 c8 ff             	or     eax,0xffffffff
c000dba8:	89 c2                	mov    edx,eax
c000dbaa:	5b                   	pop    ebx
c000dbab:	c3                   	ret    

c000dbac <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000dbac:	56                   	push   esi
c000dbad:	83 c8 ff             	or     eax,0xffffffff
c000dbb0:	53                   	push   ebx
c000dbb1:	89 c2                	mov    edx,eax
c000dbb3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000dbb7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000dbbb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000dbbf:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000dbc5:	77 27                	ja     c000dbee <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000dbc7:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000dbcd:	89 d8                	mov    eax,ebx
c000dbcf:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000dbd5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dbda:	89 c2                	mov    edx,eax
c000dbdc:	73 10                	jae    c000dbee <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000dbde:	89 c8                	mov    eax,ecx
c000dbe0:	89 da                	mov    edx,ebx
c000dbe2:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000dbe8:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000dbee:	5b                   	pop    ebx
c000dbef:	5e                   	pop    esi
c000dbf0:	c3                   	ret    
c000dbf1:	90                   	nop

c000dbf2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dbf2:	83 ec 1c             	sub    esp,0x1c
c000dbf5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000dbf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbfd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dc01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc05:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dc09:	89 04 24             	mov    DWORD PTR [esp],eax
c000dc0c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dc10:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dc14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc18:	83 ec 08             	sub    esp,0x8
c000dc1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dc1f:	50                   	push   eax
c000dc20:	e8 b7 ef ff ff       	call   c000cbdc <Device::Device(char const*)>
c000dc25:	83 c4 10             	add    esp,0x10
c000dc28:	ba b4 1d 02 c0       	mov    edx,0xc0021db4
c000dc2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc31:	89 10                	mov    DWORD PTR [eax],edx
c000dc33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc37:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000dc3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc42:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000dc49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc4d:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000dc54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc58:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000dc62:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dc66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dc6a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dc6e:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000dc74:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000dc7a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dc7e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000dc81:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc85:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000dc8b:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000dc91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc95:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000dc99:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000dc9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dca3:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dcad:	90                   	nop
c000dcae:	83 c4 1c             	add    esp,0x1c
c000dcb1:	c3                   	ret    

c000dcb2 <LogicalDisk::assignDriveLetter()>:
c000dcb2:	55                   	push   ebp
c000dcb3:	57                   	push   edi
c000dcb4:	56                   	push   esi
c000dcb5:	53                   	push   ebx
c000dcb6:	83 ec 14             	sub    esp,0x14
c000dcb9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000dcbd:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000dcc3:	b0 41                	mov    al,0x41
c000dcc5:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000dccb:	84 d2                	test   dl,dl
c000dccd:	75 02                	jne    c000dcd1 <LogicalDisk::assignDriveLetter()+0x1f>
c000dccf:	b0 43                	mov    al,0x43
c000dcd1:	8b 3d 60 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b860
c000dcd7:	0f b6 ca             	movzx  ecx,dl
c000dcda:	0f be e8             	movsx  ebp,al
c000dcdd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dce1:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000dce5:	8b 3d 64 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b864
c000dceb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000dcef:	3c 43                	cmp    al,0x43
c000dcf1:	75 10                	jne    c000dd03 <LogicalDisk::assignDriveLetter()+0x51>
c000dcf3:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000dcfa:	75 5a                	jne    c000dd56 <LogicalDisk::assignDriveLetter()+0xa4>
c000dcfc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000dd01:	75 53                	jne    c000dd56 <LogicalDisk::assignDriveLetter()+0xa4>
c000dd03:	8d 75 bf             	lea    esi,[ebp-0x41]
c000dd06:	ba 01 00 00 00       	mov    edx,0x1
c000dd0b:	89 34 24             	mov    DWORD PTR [esp],esi
c000dd0e:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000dd11:	d3 e2                	shl    edx,cl
c000dd13:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dd17:	89 d7                	mov    edi,edx
c000dd19:	89 d6                	mov    esi,edx
c000dd1b:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000dd1f:	c1 ff 1f             	sar    edi,0x1f
c000dd22:	21 f9                	and    ecx,edi
c000dd24:	09 d1                	or     ecx,edx
c000dd26:	75 2e                	jne    c000dd56 <LogicalDisk::assignDriveLetter()+0xa4>
c000dd28:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dd2c:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000dd30:	09 f2                	or     edx,esi
c000dd32:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dd35:	89 15 60 b8 02 c0    	mov    DWORD PTR ds:0xc002b860,edx
c000dd3b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dd3f:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000dd45:	89 1c b5 80 b8 02 c0 	mov    DWORD PTR [esi*4-0x3ffd4780],ebx
c000dd4c:	09 fa                	or     edx,edi
c000dd4e:	89 15 64 b8 02 c0    	mov    DWORD PTR ds:0xc002b864,edx
c000dd54:	eb 0d                	jmp    c000dd63 <LogicalDisk::assignDriveLetter()+0xb1>
c000dd56:	8d 50 01             	lea    edx,[eax+0x1]
c000dd59:	45                   	inc    ebp
c000dd5a:	80 fa 5b             	cmp    dl,0x5b
c000dd5d:	88 d0                	mov    al,dl
c000dd5f:	75 8e                	jne    c000dcef <LogicalDisk::assignDriveLetter()+0x3d>
c000dd61:	31 c0                	xor    eax,eax
c000dd63:	83 c4 14             	add    esp,0x14
c000dd66:	5b                   	pop    ebx
c000dd67:	5e                   	pop    esi
c000dd68:	5f                   	pop    edi
c000dd69:	5d                   	pop    ebp
c000dd6a:	c3                   	ret    
c000dd6b:	90                   	nop

c000dd6c <LogicalDisk::mount()>:
c000dd6c:	56                   	push   esi
c000dd6d:	53                   	push   ebx
c000dd6e:	53                   	push   ebx
c000dd6f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dd73:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c000dd79:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000dd83:	85 db                	test   ebx,ebx
c000dd85:	74 27                	je     c000ddae <LogicalDisk::mount()+0x42>
c000dd87:	51                   	push   ecx
c000dd88:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000dd8f:	8b 13                	mov    edx,DWORD PTR [ebx]
c000dd91:	83 e8 41             	sub    eax,0x41
c000dd94:	50                   	push   eax
c000dd95:	56                   	push   esi
c000dd96:	53                   	push   ebx
c000dd97:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000dd9a:	83 c4 10             	add    esp,0x10
c000dd9d:	84 c0                	test   al,al
c000dd9f:	74 08                	je     c000dda9 <LogicalDisk::mount()+0x3d>
c000dda1:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000dda7:	eb 07                	jmp    c000ddb0 <LogicalDisk::mount()+0x44>
c000dda9:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000ddac:	eb d5                	jmp    c000dd83 <LogicalDisk::mount()+0x17>
c000ddae:	31 c0                	xor    eax,eax
c000ddb0:	5a                   	pop    edx
c000ddb1:	5b                   	pop    ebx
c000ddb2:	5e                   	pop    esi
c000ddb3:	c3                   	ret    

c000ddb4 <LogicalDisk::unmount()>:
c000ddb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ddb8:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000ddc2:	c3                   	ret    
c000ddc3:	90                   	nop

c000ddc4 <LogicalDisk::eject()>:
c000ddc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ddc8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000ddce:	8b 10                	mov    edx,DWORD PTR [eax]
c000ddd0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ddd4:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000ddd7:	90                   	nop

c000ddd8 <LogicalDisk::unassignDriveLetter()>:
c000ddd8:	57                   	push   edi
c000ddd9:	56                   	push   esi
c000ddda:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ddde:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000dde5:	85 c9                	test   ecx,ecx
c000dde7:	75 0f                	jne    c000ddf8 <LogicalDisk::unassignDriveLetter()+0x20>
c000dde9:	c7 44 24 0c 8c 1d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021d8c
c000ddf1:	5e                   	pop    esi
c000ddf2:	5f                   	pop    edi
c000ddf3:	e9 13 38 00 00       	jmp    c001160b <KePanic(char const*)>
c000ddf8:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000ddff:	83 e9 41             	sub    ecx,0x41
c000de02:	b8 01 00 00 00       	mov    eax,0x1
c000de07:	c7 04 8d 80 b8 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd4780],0x0
c000de12:	d3 e0                	shl    eax,cl
c000de14:	89 c7                	mov    edi,eax
c000de16:	f7 d0                	not    eax
c000de18:	c1 ff 1f             	sar    edi,0x1f
c000de1b:	21 05 60 b8 02 c0    	and    DWORD PTR ds:0xc002b860,eax
c000de21:	89 fe                	mov    esi,edi
c000de23:	f7 d6                	not    esi
c000de25:	21 35 64 b8 02 c0    	and    DWORD PTR ds:0xc002b864,esi
c000de2b:	5e                   	pop    esi
c000de2c:	5f                   	pop    edi
c000de2d:	c3                   	ret    

c000de2e <LogicalDisk::read(unsigned long long, int, void*)>:
c000de2e:	57                   	push   edi
c000de2f:	56                   	push   esi
c000de30:	53                   	push   ebx
c000de31:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000de35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000de39:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000de3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de41:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000de47:	77 41                	ja     c000de8a <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000de49:	99                   	cdq    
c000de4a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000de50:	01 c8                	add    eax,ecx
c000de52:	11 da                	adc    edx,ebx
c000de54:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000de5a:	19 d7                	sbb    edi,edx
c000de5c:	72 33                	jb     c000de91 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000de5e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000de64:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000de6a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000de6e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000de72:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000de78:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000de7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de82:	5b                   	pop    ebx
c000de83:	5e                   	pop    esi
c000de84:	5f                   	pop    edi
c000de85:	e9 d4 0a 00 00       	jmp    c000e95e <VCache::read(unsigned long long, int, void*)>
c000de8a:	b8 05 00 00 00       	mov    eax,0x5
c000de8f:	eb 05                	jmp    c000de96 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000de91:	b8 07 00 00 00       	mov    eax,0x7
c000de96:	5b                   	pop    ebx
c000de97:	5e                   	pop    esi
c000de98:	5f                   	pop    edi
c000de99:	c3                   	ret    

c000de9a <LogicalDisk::write(unsigned long long, int, void*)>:
c000de9a:	57                   	push   edi
c000de9b:	56                   	push   esi
c000de9c:	53                   	push   ebx
c000de9d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000dea1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dea5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000dea9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dead:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000deb3:	77 41                	ja     c000def6 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000deb5:	99                   	cdq    
c000deb6:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000debc:	01 c8                	add    eax,ecx
c000debe:	11 da                	adc    edx,ebx
c000dec0:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000dec6:	19 d7                	sbb    edi,edx
c000dec8:	72 33                	jb     c000defd <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000deca:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000ded0:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000ded6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000deda:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dede:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000dee4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000deea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000deee:	5b                   	pop    ebx
c000deef:	5e                   	pop    esi
c000def0:	5f                   	pop    edi
c000def1:	e9 6e 09 00 00       	jmp    c000e864 <VCache::write(unsigned long long, int, void*)>
c000def6:	b8 05 00 00 00       	mov    eax,0x5
c000defb:	eb 05                	jmp    c000df02 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000defd:	b8 07 00 00 00       	mov    eax,0x7
c000df02:	5b                   	pop    ebx
c000df03:	5e                   	pop    esi
c000df04:	5f                   	pop    edi
c000df05:	c3                   	ret    
c000df06:	66 90                	xchg   ax,ax

c000df08 <Mouse::Mouse(char const*)>:
c000df08:	83 ec 0c             	sub    esp,0xc
c000df0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df0f:	83 ec 08             	sub    esp,0x8
c000df12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df16:	50                   	push   eax
c000df17:	e8 c0 ec ff ff       	call   c000cbdc <Device::Device(char const*)>
c000df1c:	83 c4 10             	add    esp,0x10
c000df1f:	ba e0 1d 02 c0       	mov    edx,0xc0021de0
c000df24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df28:	89 10                	mov    DWORD PTR [eax],edx
c000df2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df2e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000df38:	90                   	nop
c000df39:	83 c4 0c             	add    esp,0xc
c000df3c:	c3                   	ret    
c000df3d:	90                   	nop
c000df3e:	66 90                	xchg   ax,ax

c000df40 <Mouse::~Mouse()>:
c000df40:	83 ec 0c             	sub    esp,0xc
c000df43:	ba e0 1d 02 c0       	mov    edx,0xc0021de0
c000df48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df4c:	89 10                	mov    DWORD PTR [eax],edx
c000df4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df52:	83 ec 0c             	sub    esp,0xc
c000df55:	50                   	push   eax
c000df56:	e8 eb e9 ff ff       	call   c000c946 <Device::~Device()>
c000df5b:	83 c4 10             	add    esp,0x10
c000df5e:	90                   	nop
c000df5f:	83 c4 0c             	add    esp,0xc
c000df62:	c3                   	ret    
c000df63:	90                   	nop

c000df64 <Mouse::~Mouse()>:
c000df64:	83 ec 0c             	sub    esp,0xc
c000df67:	83 ec 0c             	sub    esp,0xc
c000df6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df6e:	e8 cd ff ff ff       	call   c000df40 <Mouse::~Mouse()>
c000df73:	83 c4 10             	add    esp,0x10
c000df76:	83 ec 08             	sub    esp,0x8
c000df79:	68 58 01 00 00       	push   0x158
c000df7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df82:	e8 85 c8 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000df87:	83 c4 10             	add    esp,0x10
c000df8a:	83 c4 0c             	add    esp,0xc
c000df8d:	c3                   	ret    

c000df8e <NIC::getMAC()>:
c000df8e:	31 c0                	xor    eax,eax
c000df90:	31 d2                	xor    edx,edx
c000df92:	c3                   	ret    
c000df93:	90                   	nop

c000df94 <NIC::write(int, unsigned char*, int*)>:
c000df94:	b8 01 00 00 00       	mov    eax,0x1
c000df99:	c3                   	ret    

c000df9a <NIC::NIC(char const*)>:
c000df9a:	83 ec 0c             	sub    esp,0xc
c000df9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfa1:	83 ec 08             	sub    esp,0x8
c000dfa4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfa8:	50                   	push   eax
c000dfa9:	e8 2e ec ff ff       	call   c000cbdc <Device::Device(char const*)>
c000dfae:	83 c4 10             	add    esp,0x10
c000dfb1:	ba 0c 1e 02 c0       	mov    edx,0xc0021e0c
c000dfb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfba:	89 10                	mov    DWORD PTR [eax],edx
c000dfbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfc0:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000dfca:	90                   	nop
c000dfcb:	83 c4 0c             	add    esp,0xc
c000dfce:	c3                   	ret    
c000dfcf:	90                   	nop

c000dfd0 <NIC::~NIC()>:
c000dfd0:	83 ec 0c             	sub    esp,0xc
c000dfd3:	ba 0c 1e 02 c0       	mov    edx,0xc0021e0c
c000dfd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfdc:	89 10                	mov    DWORD PTR [eax],edx
c000dfde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfe2:	83 ec 0c             	sub    esp,0xc
c000dfe5:	50                   	push   eax
c000dfe6:	e8 5b e9 ff ff       	call   c000c946 <Device::~Device()>
c000dfeb:	83 c4 10             	add    esp,0x10
c000dfee:	90                   	nop
c000dfef:	83 c4 0c             	add    esp,0xc
c000dff2:	c3                   	ret    
c000dff3:	90                   	nop

c000dff4 <NIC::~NIC()>:
c000dff4:	83 ec 0c             	sub    esp,0xc
c000dff7:	83 ec 0c             	sub    esp,0xc
c000dffa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dffe:	e8 cd ff ff ff       	call   c000dfd0 <NIC::~NIC()>
c000e003:	83 c4 10             	add    esp,0x10
c000e006:	83 ec 08             	sub    esp,0x8
c000e009:	68 58 01 00 00       	push   0x158
c000e00e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e012:	e8 f5 c7 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e017:	83 c4 10             	add    esp,0x10
c000e01a:	83 c4 0c             	add    esp,0xc
c000e01d:	c3                   	ret    

c000e01e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000e01e:	55                   	push   ebp
c000e01f:	57                   	push   edi
c000e020:	56                   	push   esi
c000e021:	53                   	push   ebx
c000e022:	81 ec 28 01 00 00    	sub    esp,0x128
c000e028:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000e02f:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000e036:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000e03d:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000e044:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e048:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e04c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000e053:	e8 80 ec ff ff       	call   c000ccd8 <Device::getName()>
c000e058:	5a                   	pop    edx
c000e059:	59                   	pop    ecx
c000e05a:	50                   	push   eax
c000e05b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000e05f:	55                   	push   ebp
c000e060:	e8 eb 25 ff ff       	call   c0000650 <strcpy>
c000e065:	5b                   	pop    ebx
c000e066:	58                   	pop    eax
c000e067:	68 38 1e 02 c0       	push   0xc0021e38
c000e06c:	55                   	push   ebp
c000e06d:	e8 fe 27 ff ff       	call   c0000870 <strcat>
c000e072:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000e079:	e8 55 9a ff ff       	call   c0007ad3 <malloc>
c000e07e:	83 c4 0c             	add    esp,0xc
c000e081:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e085:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e089:	89 c3                	mov    ebx,eax
c000e08b:	57                   	push   edi
c000e08c:	56                   	push   esi
c000e08d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000e094:	55                   	push   ebp
c000e095:	50                   	push   eax
c000e096:	e8 57 fb ff ff       	call   c000dbf2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000e09b:	83 c4 14             	add    esp,0x14
c000e09e:	53                   	push   ebx
c000e09f:	e8 0e fc ff ff       	call   c000dcb2 <LogicalDisk::assignDriveLetter()>
c000e0a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e0a7:	e8 c0 fc ff ff       	call   c000dd6c <LogicalDisk::mount()>
c000e0ac:	58                   	pop    eax
c000e0ad:	5a                   	pop    edx
c000e0ae:	53                   	push   ebx
c000e0af:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000e0b6:	e8 89 e9 ff ff       	call   c000ca44 <Device::addChild(Device*)>
c000e0bb:	81 c4 2c 01 00 00    	add    esp,0x12c
c000e0c1:	5b                   	pop    ebx
c000e0c2:	5e                   	pop    esi
c000e0c3:	5f                   	pop    edi
c000e0c4:	5d                   	pop    ebp
c000e0c5:	c3                   	ret    

c000e0c6 <createPartitionsForDisk(PhysicalDisk*)>:
c000e0c6:	55                   	push   ebp
c000e0c7:	57                   	push   edi
c000e0c8:	56                   	push   esi
c000e0c9:	53                   	push   ebx
c000e0ca:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000e0d0:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000e0d7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000e0dd:	3d 00 02 00 00       	cmp    eax,0x200
c000e0e2:	74 27                	je     c000e10b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000e0e4:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000e0ea:	83 ec 10             	sub    esp,0x10
c000e0ed:	99                   	cdq    
c000e0ee:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000e0f4:	52                   	push   edx
c000e0f5:	50                   	push   eax
c000e0f6:	0f a4 f7 0a          	shld   edi,esi,0xa
c000e0fa:	c1 e6 0a             	shl    esi,0xa
c000e0fd:	89 fd                	mov    ebp,edi
c000e0ff:	55                   	push   ebp
c000e100:	56                   	push   esi
c000e101:	e8 aa 16 01 00       	call   c001f7b0 <__udivdi3>
c000e106:	e9 b9 00 00 00       	jmp    c000e1c4 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e10b:	83 ec 0c             	sub    esp,0xc
c000e10e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e110:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000e114:	56                   	push   esi
c000e115:	6a 01                	push   0x1
c000e117:	6a 00                	push   0x0
c000e119:	6a 00                	push   0x0
c000e11b:	53                   	push   ebx
c000e11c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000e11f:	83 c4 20             	add    esp,0x20
c000e122:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000e12a:	75 0a                	jne    c000e136 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000e12c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000e134:	74 2c                	je     c000e162 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000e136:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e13c:	83 ec 10             	sub    esp,0x10
c000e13f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e145:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e14b:	89 f7                	mov    edi,esi
c000e14d:	c1 ff 1f             	sar    edi,0x1f
c000e150:	57                   	push   edi
c000e151:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e155:	56                   	push   esi
c000e156:	c1 e0 0a             	shl    eax,0xa
c000e159:	52                   	push   edx
c000e15a:	50                   	push   eax
c000e15b:	e8 50 16 01 00       	call   c001f7b0 <__udivdi3>
c000e160:	eb 62                	jmp    c000e1c4 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e162:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000e169:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000e170:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000e177:	89 cf                	mov    edi,ecx
c000e179:	83 e2 7f             	and    edx,0x7f
c000e17c:	83 e7 7f             	and    edi,0x7f
c000e17f:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000e182:	83 e0 7f             	and    eax,0x7f
c000e185:	8d 14 01             	lea    edx,[ecx+eax*1]
c000e188:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000e18f:	83 e0 7f             	and    eax,0x7f
c000e192:	01 d0                	add    eax,edx
c000e194:	84 c0                	test   al,al
c000e196:	89 c5                	mov    ebp,eax
c000e198:	74 41                	je     c000e1db <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000e19a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e1a0:	83 ec 10             	sub    esp,0x10
c000e1a3:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e1a9:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e1af:	89 f7                	mov    edi,esi
c000e1b1:	c1 ff 1f             	sar    edi,0x1f
c000e1b4:	57                   	push   edi
c000e1b5:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e1b9:	56                   	push   esi
c000e1ba:	c1 e0 0a             	shl    eax,0xa
c000e1bd:	52                   	push   edx
c000e1be:	50                   	push   eax
c000e1bf:	e8 ec 15 01 00       	call   c001f7b0 <__udivdi3>
c000e1c4:	83 c4 14             	add    esp,0x14
c000e1c7:	52                   	push   edx
c000e1c8:	50                   	push   eax
c000e1c9:	6a 00                	push   0x0
c000e1cb:	6a 00                	push   0x0
c000e1cd:	53                   	push   ebx
c000e1ce:	e8 4b fe ff ff       	call   c000e01e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e1d3:	83 c4 20             	add    esp,0x20
c000e1d6:	e9 73 01 00 00       	jmp    c000e34e <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000e1db:	89 f0                	mov    eax,esi
c000e1dd:	31 c9                	xor    ecx,ecx
c000e1df:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000e1e6:	75 02                	jne    c000e1ea <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000e1e8:	89 cd                	mov    ebp,ecx
c000e1ea:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000e1f2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000e1f9:	83 c0 10             	add    eax,0x10
c000e1fc:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000e204:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000e20b:	c1 e2 08             	shl    edx,0x8
c000e20e:	c1 e6 10             	shl    esi,0x10
c000e211:	09 f2                	or     edx,esi
c000e213:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000e21a:	09 f2                	or     edx,esi
c000e21c:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000e223:	c1 e6 18             	shl    esi,0x18
c000e226:	09 f2                	or     edx,esi
c000e228:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000e22f:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000e233:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000e23a:	c1 e6 10             	shl    esi,0x10
c000e23d:	c1 e2 08             	shl    edx,0x8
c000e240:	09 f2                	or     edx,esi
c000e242:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000e249:	09 f2                	or     edx,esi
c000e24b:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000e252:	c1 e6 18             	shl    esi,0x18
c000e255:	09 f2                	or     edx,esi
c000e257:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000e25b:	41                   	inc    ecx
c000e25c:	83 f9 04             	cmp    ecx,0x4
c000e25f:	0f 85 7a ff ff ff    	jne    c000e1df <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000e265:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e269:	83 f0 01             	xor    eax,0x1
c000e26c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e270:	75 4f                	jne    c000e2c1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e272:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e276:	83 f0 01             	xor    eax,0x1
c000e279:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000e27d:	75 42                	jne    c000e2c1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e27f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e285:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000e28d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e293:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e29b:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e2a1:	89 f7                	mov    edi,esi
c000e2a3:	c1 ff 1f             	sar    edi,0x1f
c000e2a6:	57                   	push   edi
c000e2a7:	56                   	push   esi
c000e2a8:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e2ac:	52                   	push   edx
c000e2ad:	c1 e0 0a             	shl    eax,0xa
c000e2b0:	50                   	push   eax
c000e2b1:	e8 fa 14 01 00       	call   c001f7b0 <__udivdi3>
c000e2b6:	83 c4 10             	add    esp,0x10
c000e2b9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e2bd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000e2c1:	89 e8                	mov    eax,ebp
c000e2c3:	0f b6 e8             	movzx  ebp,al
c000e2c6:	85 ed                	test   ebp,ebp
c000e2c8:	74 50                	je     c000e31a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000e2ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e2ce:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e2d2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e2d6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000e2da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e2de:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e2e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e2e6:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e2ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e2f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2f6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e2fa:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000e2fe:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e302:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000e306:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e30a:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e30e:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e312:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000e316:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000e31a:	31 ed                	xor    ebp,ebp
c000e31c:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e320:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e324:	89 f8                	mov    eax,edi
c000e326:	09 f0                	or     eax,esi
c000e328:	74 1e                	je     c000e348 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e32a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e32e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e332:	89 d1                	mov    ecx,edx
c000e334:	09 c1                	or     ecx,eax
c000e336:	74 10                	je     c000e348 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e338:	83 ec 0c             	sub    esp,0xc
c000e33b:	57                   	push   edi
c000e33c:	56                   	push   esi
c000e33d:	52                   	push   edx
c000e33e:	50                   	push   eax
c000e33f:	53                   	push   ebx
c000e340:	e8 d9 fc ff ff       	call   c000e01e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e345:	83 c4 20             	add    esp,0x20
c000e348:	45                   	inc    ebp
c000e349:	83 fd 04             	cmp    ebp,0x4
c000e34c:	75 ce                	jne    c000e31c <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000e34e:	81 c4 5c 02 00 00    	add    esp,0x25c
c000e354:	5b                   	pop    ebx
c000e355:	5e                   	pop    esi
c000e356:	5f                   	pop    edi
c000e357:	5d                   	pop    ebp
c000e358:	c3                   	ret    
c000e359:	66 90                	xchg   ax,ax
c000e35b:	90                   	nop

c000e35c <Serial::Serial(char const*)>:
c000e35c:	83 ec 0c             	sub    esp,0xc
c000e35f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e363:	83 ec 08             	sub    esp,0x8
c000e366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e36a:	50                   	push   eax
c000e36b:	e8 6c e8 ff ff       	call   c000cbdc <Device::Device(char const*)>
c000e370:	83 c4 10             	add    esp,0x10
c000e373:	ba 4c 1e 02 c0       	mov    edx,0xc0021e4c
c000e378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e37c:	89 10                	mov    DWORD PTR [eax],edx
c000e37e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e382:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000e38c:	90                   	nop
c000e38d:	83 c4 0c             	add    esp,0xc
c000e390:	c3                   	ret    
c000e391:	90                   	nop
c000e392:	66 90                	xchg   ax,ax

c000e394 <Serial::~Serial()>:
c000e394:	83 ec 0c             	sub    esp,0xc
c000e397:	ba 4c 1e 02 c0       	mov    edx,0xc0021e4c
c000e39c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3a0:	89 10                	mov    DWORD PTR [eax],edx
c000e3a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3a6:	83 ec 0c             	sub    esp,0xc
c000e3a9:	50                   	push   eax
c000e3aa:	e8 97 e5 ff ff       	call   c000c946 <Device::~Device()>
c000e3af:	83 c4 10             	add    esp,0x10
c000e3b2:	90                   	nop
c000e3b3:	83 c4 0c             	add    esp,0xc
c000e3b6:	c3                   	ret    
c000e3b7:	90                   	nop

c000e3b8 <Serial::~Serial()>:
c000e3b8:	83 ec 0c             	sub    esp,0xc
c000e3bb:	83 ec 0c             	sub    esp,0xc
c000e3be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3c2:	e8 cd ff ff ff       	call   c000e394 <Serial::~Serial()>
c000e3c7:	83 c4 10             	add    esp,0x10
c000e3ca:	83 ec 08             	sub    esp,0x8
c000e3cd:	68 58 01 00 00       	push   0x158
c000e3d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3d6:	e8 31 c4 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e3db:	83 c4 10             	add    esp,0x10
c000e3de:	83 c4 0c             	add    esp,0xc
c000e3e1:	c3                   	ret    
c000e3e2:	66 90                	xchg   ax,ax

c000e3e4 <Timer::Timer(char const*)>:
c000e3e4:	83 ec 0c             	sub    esp,0xc
c000e3e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3eb:	83 ec 08             	sub    esp,0x8
c000e3ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3f2:	50                   	push   eax
c000e3f3:	e8 e4 e7 ff ff       	call   c000cbdc <Device::Device(char const*)>
c000e3f8:	83 c4 10             	add    esp,0x10
c000e3fb:	ba 90 1e 02 c0       	mov    edx,0xc0021e90
c000e400:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e404:	89 10                	mov    DWORD PTR [eax],edx
c000e406:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e40a:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e414:	90                   	nop
c000e415:	83 c4 0c             	add    esp,0xc
c000e418:	c3                   	ret    
c000e419:	90                   	nop
c000e41a:	66 90                	xchg   ax,ax

c000e41c <Timer::~Timer()>:
c000e41c:	83 ec 0c             	sub    esp,0xc
c000e41f:	ba 90 1e 02 c0       	mov    edx,0xc0021e90
c000e424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e428:	89 10                	mov    DWORD PTR [eax],edx
c000e42a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e42e:	83 ec 0c             	sub    esp,0xc
c000e431:	50                   	push   eax
c000e432:	e8 0f e5 ff ff       	call   c000c946 <Device::~Device()>
c000e437:	83 c4 10             	add    esp,0x10
c000e43a:	90                   	nop
c000e43b:	83 c4 0c             	add    esp,0xc
c000e43e:	c3                   	ret    
c000e43f:	90                   	nop

c000e440 <Timer::~Timer()>:
c000e440:	83 ec 0c             	sub    esp,0xc
c000e443:	83 ec 0c             	sub    esp,0xc
c000e446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e44a:	e8 cd ff ff ff       	call   c000e41c <Timer::~Timer()>
c000e44f:	83 c4 10             	add    esp,0x10
c000e452:	83 ec 08             	sub    esp,0x8
c000e455:	68 5c 01 00 00       	push   0x15c
c000e45a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e45e:	e8 a9 c3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e463:	83 c4 10             	add    esp,0x10
c000e466:	83 c4 0c             	add    esp,0xc
c000e469:	c3                   	ret    

c000e46a <Timer::read()>:
c000e46a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e46e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e474:	c3                   	ret    

c000e475 <setupTimer(int)>:
c000e475:	53                   	push   ebx
c000e476:	83 ec 14             	sub    esp,0x14
c000e479:	68 5c 01 00 00       	push   0x15c
c000e47e:	e8 50 96 ff ff       	call   c0007ad3 <malloc>
c000e483:	89 04 24             	mov    DWORD PTR [esp],eax
c000e486:	89 c3                	mov    ebx,eax
c000e488:	e8 8b 0b 01 00       	call   c001f018 <PIT::PIT()>
c000e48d:	58                   	pop    eax
c000e48e:	5a                   	pop    edx
c000e48f:	53                   	push   ebx
c000e490:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000e496:	e8 a9 e5 ff ff       	call   c000ca44 <Device::addChild(Device*)>
c000e49b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e49d:	6a 00                	push   0x0
c000e49f:	6a 00                	push   0x0
c000e4a1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e4a5:	53                   	push   ebx
c000e4a6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e4a9:	83 c4 28             	add    esp,0x28
c000e4ac:	89 d8                	mov    eax,ebx
c000e4ae:	5b                   	pop    ebx
c000e4af:	c3                   	ret    

c000e4b0 <timerHandler(unsigned int)>:
c000e4b0:	56                   	push   esi
c000e4b1:	53                   	push   ebx
c000e4b2:	51                   	push   ecx
c000e4b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4b7:	01 05 ec b8 02 c0    	add    DWORD PTR ds:0xc002b8ec,eax
c000e4bd:	80 3d bd 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebd,0x0
c000e4c4:	0f 84 4a 01 00 00    	je     c000e614 <timerHandler(unsigned int)+0x164>
c000e4ca:	fa                   	cli    
c000e4cb:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e4d1:	83 ec 0c             	sub    esp,0xc
c000e4d4:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4d9:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c000e4df:	e8 9c 18 01 00       	call   c001fd80 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e4e4:	83 c4 10             	add    esp,0x10
c000e4e7:	84 c0                	test   al,al
c000e4e9:	0f 85 a1 00 00 00    	jne    c000e590 <timerHandler(unsigned int)+0xe0>
c000e4ef:	83 ec 0c             	sub    esp,0xc
c000e4f2:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4f7:	e8 a0 18 01 00       	call   c001fd9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e4fc:	83 c4 10             	add    esp,0x10
c000e4ff:	89 c6                	mov    esi,eax
c000e501:	8d 76 00             	lea    esi,[esi+0x0]
c000e504:	83 ec 0c             	sub    esp,0xc
c000e507:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e50c:	e8 8b 18 01 00       	call   c001fd9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e511:	c7 04 24 d8 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6d8
c000e518:	89 c3                	mov    ebx,eax
c000e51a:	e8 85 18 01 00       	call   c001fda4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e51f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e522:	83 c4 10             	add    esp,0x10
c000e525:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c000e52b:	77 23                	ja     c000e550 <timerHandler(unsigned int)+0xa0>
c000e52d:	83 ec 0c             	sub    esp,0xc
c000e530:	53                   	push   ebx
c000e531:	e8 b6 80 00 00       	call   c00165ec <unblockTask(ThreadControlBlock*)>
c000e536:	83 c4 10             	add    esp,0x10
c000e539:	39 de                	cmp    esi,ebx
c000e53b:	75 27                	jne    c000e564 <timerHandler(unsigned int)+0xb4>
c000e53d:	83 ec 0c             	sub    esp,0xc
c000e540:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e545:	e8 52 18 01 00       	call   c001fd9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e54a:	89 c6                	mov    esi,eax
c000e54c:	eb 12                	jmp    c000e560 <timerHandler(unsigned int)+0xb0>
c000e54e:	66 90                	xchg   ax,ax
c000e550:	52                   	push   edx
c000e551:	52                   	push   edx
c000e552:	53                   	push   ebx
c000e553:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e558:	e8 03 19 01 00       	call   c001fe60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e55d:	8d 76 00             	lea    esi,[esi+0x0]
c000e560:	83 c4 10             	add    esp,0x10
c000e563:	90                   	nop
c000e564:	83 ec 0c             	sub    esp,0xc
c000e567:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e56c:	e8 0f 18 01 00       	call   c001fd80 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e571:	83 c4 10             	add    esp,0x10
c000e574:	84 c0                	test   al,al
c000e576:	75 18                	jne    c000e590 <timerHandler(unsigned int)+0xe0>
c000e578:	83 ec 0c             	sub    esp,0xc
c000e57b:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e580:	e8 17 18 01 00       	call   c001fd9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e585:	83 c4 10             	add    esp,0x10
c000e588:	39 f0                	cmp    eax,esi
c000e58a:	0f 85 74 ff ff ff    	jne    c000e504 <timerHandler(unsigned int)+0x54>
c000e590:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e595:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e599:	74 41                	je     c000e5dc <timerHandler(unsigned int)+0x12c>
c000e59b:	80 3d bc 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebc,0x0
c000e5a2:	74 38                	je     c000e5dc <timerHandler(unsigned int)+0x12c>
c000e5a4:	fa                   	cli    
c000e5a5:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e5ab:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c000e5b0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e5b6:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e5b9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e5bf:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e5c2:	72 08                	jb     c000e5cc <timerHandler(unsigned int)+0x11c>
c000e5c4:	e8 2b 7b 00 00       	call   c00160f4 <schedule()>
c000e5c9:	8d 76 00             	lea    esi,[esi+0x0]
c000e5cc:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e5d1:	48                   	dec    eax
c000e5d2:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e5d7:	75 03                	jne    c000e5dc <timerHandler(unsigned int)+0x12c>
c000e5d9:	fb                   	sti    
c000e5da:	66 90                	xchg   ax,ax
c000e5dc:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000e5e1:	48                   	dec    eax
c000e5e2:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000e5e7:	75 1b                	jne    c000e604 <timerHandler(unsigned int)+0x154>
c000e5e9:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c000e5f0:	74 12                	je     c000e604 <timerHandler(unsigned int)+0x154>
c000e5f2:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000e5fc:	e8 f3 7a 00 00       	call   c00160f4 <schedule()>
c000e601:	8d 76 00             	lea    esi,[esi+0x0]
c000e604:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e609:	48                   	dec    eax
c000e60a:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e60f:	75 03                	jne    c000e614 <timerHandler(unsigned int)+0x164>
c000e611:	fb                   	sti    
c000e612:	66 90                	xchg   ax,ax
c000e614:	58                   	pop    eax
c000e615:	5b                   	pop    ebx
c000e616:	5e                   	pop    esi
c000e617:	c3                   	ret    

c000e618 <VCache::VCache(PhysicalDisk*)>:
c000e618:	53                   	push   ebx
c000e619:	83 ec 18             	sub    esp,0x18
c000e61c:	ba c0 1e 02 c0       	mov    edx,0xc0021ec0
c000e621:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e625:	89 10                	mov    DWORD PTR [eax],edx
c000e627:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e62b:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e632:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e636:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e63d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e641:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e648:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e64f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e653:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e65a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e661:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e665:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e66c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e670:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e674:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e678:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e67f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e686:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e68a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e68e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e692:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e696:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e69a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e69e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6a2:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e6a9:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e6b1:	83 ec 0c             	sub    esp,0xc
c000e6b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e6b8:	e8 16 94 ff ff       	call   c0007ad3 <malloc>
c000e6bd:	83 c4 10             	add    esp,0x10
c000e6c0:	89 c3                	mov    ebx,eax
c000e6c2:	83 ec 0c             	sub    esp,0xc
c000e6c5:	53                   	push   ebx
c000e6c6:	e8 c9 77 00 00       	call   c0015e94 <Mutex::Mutex()>
c000e6cb:	83 c4 10             	add    esp,0x10
c000e6ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6d2:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e6d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6d9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e6dd:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e6e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6e4:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e6eb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e6ef:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e6f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6f9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e6fc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e700:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e706:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e70c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e710:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e713:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e716:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e71a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e71e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e722:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e728:	05 00 02 00 00       	add    eax,0x200
c000e72d:	c1 e0 03             	shl    eax,0x3
c000e730:	83 ec 0c             	sub    esp,0xc
c000e733:	50                   	push   eax
c000e734:	e8 9a 93 ff ff       	call   c0007ad3 <malloc>
c000e739:	83 c4 10             	add    esp,0x10
c000e73c:	89 c2                	mov    edx,eax
c000e73e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e742:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e745:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e749:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e750:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e754:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e758:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e75c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e762:	89 d0                	mov    eax,edx
c000e764:	c1 e0 02             	shl    eax,0x2
c000e767:	01 d0                	add    eax,edx
c000e769:	c1 e0 04             	shl    eax,0x4
c000e76c:	83 ec 0c             	sub    esp,0xc
c000e76f:	50                   	push   eax
c000e770:	e8 5e 93 ff ff       	call   c0007ad3 <malloc>
c000e775:	83 c4 10             	add    esp,0x10
c000e778:	89 c2                	mov    edx,eax
c000e77a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e77e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e781:	90                   	nop
c000e782:	83 c4 18             	add    esp,0x18
c000e785:	5b                   	pop    ebx
c000e786:	c3                   	ret    
c000e787:	90                   	nop

c000e788 <VCache::invalidateReadBuffer()>:
c000e788:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e78c:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e792:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e796:	c3                   	ret    
c000e797:	90                   	nop

c000e798 <VCache::writeWriteBuffer()>:
c000e798:	53                   	push   ebx
c000e799:	83 ec 08             	sub    esp,0x8
c000e79c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e7a0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e7a4:	74 1e                	je     c000e7c4 <VCache::writeWriteBuffer()+0x2c>
c000e7a6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e7a9:	83 ec 0c             	sub    esp,0xc
c000e7ac:	8b 10                	mov    edx,DWORD PTR [eax]
c000e7ae:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e7b1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e7b4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e7b7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e7ba:	50                   	push   eax
c000e7bb:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e7be:	83 c4 20             	add    esp,0x20
c000e7c1:	8d 76 00             	lea    esi,[esi+0x0]
c000e7c4:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e7cb:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e7d2:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e7d6:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e7dd:	83 c4 08             	add    esp,0x8
c000e7e0:	5b                   	pop    ebx
c000e7e1:	c3                   	ret    
c000e7e2:	66 90                	xchg   ax,ax

c000e7e4 <VCache::~VCache()>:
c000e7e4:	83 ec 0c             	sub    esp,0xc
c000e7e7:	ba c0 1e 02 c0       	mov    edx,0xc0021ec0
c000e7ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f0:	89 10                	mov    DWORD PTR [eax],edx
c000e7f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f6:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e7f9:	0f b6 c0             	movzx  eax,al
c000e7fc:	85 c0                	test   eax,eax
c000e7fe:	74 10                	je     c000e810 <VCache::~VCache()+0x2c>
c000e800:	83 ec 0c             	sub    esp,0xc
c000e803:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e807:	e8 8c ff ff ff       	call   c000e798 <VCache::writeWriteBuffer()>
c000e80c:	83 c4 10             	add    esp,0x10
c000e80f:	90                   	nop
c000e810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e814:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e817:	83 ec 0c             	sub    esp,0xc
c000e81a:	50                   	push   eax
c000e81b:	e8 c3 92 ff ff       	call   c0007ae3 <free>
c000e820:	83 c4 10             	add    esp,0x10
c000e823:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e827:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e82a:	83 ec 0c             	sub    esp,0xc
c000e82d:	50                   	push   eax
c000e82e:	e8 b0 92 ff ff       	call   c0007ae3 <free>
c000e833:	83 c4 10             	add    esp,0x10
c000e836:	90                   	nop
c000e837:	83 c4 0c             	add    esp,0xc
c000e83a:	c3                   	ret    
c000e83b:	90                   	nop

c000e83c <VCache::~VCache()>:
c000e83c:	83 ec 0c             	sub    esp,0xc
c000e83f:	83 ec 0c             	sub    esp,0xc
c000e842:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e846:	e8 99 ff ff ff       	call   c000e7e4 <VCache::~VCache()>
c000e84b:	83 c4 10             	add    esp,0x10
c000e84e:	83 ec 08             	sub    esp,0x8
c000e851:	6a 44                	push   0x44
c000e853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e857:	e8 b0 bf ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e85c:	83 c4 10             	add    esp,0x10
c000e85f:	83 c4 0c             	add    esp,0xc
c000e862:	c3                   	ret    
c000e863:	90                   	nop

c000e864 <VCache::write(unsigned long long, int, void*)>:
c000e864:	55                   	push   ebp
c000e865:	57                   	push   edi
c000e866:	56                   	push   esi
c000e867:	53                   	push   ebx
c000e868:	83 ec 1c             	sub    esp,0x1c
c000e86b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e86f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e873:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e877:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e87b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e87f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e883:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e887:	74 0f                	je     c000e898 <VCache::write(unsigned long long, int, void*)+0x34>
c000e889:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e88d:	53                   	push   ebx
c000e88e:	e8 f5 fe ff ff       	call   c000e788 <VCache::invalidateReadBuffer()>
c000e893:	58                   	pop    eax
c000e894:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e898:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e89c:	74 66                	je     c000e904 <VCache::write(unsigned long long, int, void*)+0xa0>
c000e89e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e8a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e8a5:	99                   	cdq    
c000e8a6:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e8a9:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e8ac:	89 c6                	mov    esi,eax
c000e8ae:	31 ce                	xor    esi,ecx
c000e8b0:	89 d0                	mov    eax,edx
c000e8b2:	31 e8                	xor    eax,ebp
c000e8b4:	09 c6                	or     esi,eax
c000e8b6:	75 38                	jne    c000e8f0 <VCache::write(unsigned long long, int, void*)+0x8c>
c000e8b8:	83 ff 01             	cmp    edi,0x1
c000e8bb:	75 33                	jne    c000e8f0 <VCache::write(unsigned long long, int, void*)+0x8c>
c000e8bd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e8c0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e8c4:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e8c8:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e8ce:	0f af f9             	imul   edi,ecx
c000e8d1:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000e8d4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e8d6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e8d9:	40                   	inc    eax
c000e8da:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e8dd:	83 f8 50             	cmp    eax,0x50
c000e8e0:	75 72                	jne    c000e954 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e8e2:	83 ec 0c             	sub    esp,0xc
c000e8e5:	53                   	push   ebx
c000e8e6:	e8 ad fe ff ff       	call   c000e798 <VCache::writeWriteBuffer()>
c000e8eb:	83 c4 10             	add    esp,0x10
c000e8ee:	eb 64                	jmp    c000e954 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e8f0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e8f4:	83 ec 0c             	sub    esp,0xc
c000e8f7:	53                   	push   ebx
c000e8f8:	e8 9b fe ff ff       	call   c000e798 <VCache::writeWriteBuffer()>
c000e8fd:	83 c4 10             	add    esp,0x10
c000e900:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e904:	83 ff 4f             	cmp    edi,0x4f
c000e907:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e90a:	7f 20                	jg     c000e92c <VCache::write(unsigned long long, int, void*)+0xc8>
c000e90c:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e90f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e913:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c000e916:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e919:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e91c:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e920:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e926:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e928:	eb 2a                	jmp    c000e954 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e92a:	66 90                	xchg   ax,ax
c000e92c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e930:	8b 10                	mov    edx,DWORD PTR [eax]
c000e932:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e936:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e93a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e93e:	89 4c 24 34          	mov    DWORD PTR [esp+0x34],ecx
c000e942:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e946:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e949:	83 c4 1c             	add    esp,0x1c
c000e94c:	5b                   	pop    ebx
c000e94d:	5e                   	pop    esi
c000e94e:	5f                   	pop    edi
c000e94f:	5d                   	pop    ebp
c000e950:	ff e0                	jmp    eax
c000e952:	66 90                	xchg   ax,ax
c000e954:	83 c4 1c             	add    esp,0x1c
c000e957:	31 c0                	xor    eax,eax
c000e959:	5b                   	pop    ebx
c000e95a:	5e                   	pop    esi
c000e95b:	5f                   	pop    edi
c000e95c:	5d                   	pop    ebp
c000e95d:	c3                   	ret    

c000e95e <VCache::read(unsigned long long, int, void*)>:
c000e95e:	55                   	push   ebp
c000e95f:	57                   	push   edi
c000e960:	56                   	push   esi
c000e961:	53                   	push   ebx
c000e962:	83 ec 1c             	sub    esp,0x1c
c000e965:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e969:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e96d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e971:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e975:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e979:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e97d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e981:	74 0d                	je     c000e990 <VCache::read(unsigned long long, int, void*)+0x32>
c000e983:	83 ec 0c             	sub    esp,0xc
c000e986:	57                   	push   edi
c000e987:	e8 0c fe ff ff       	call   c000e798 <VCache::writeWriteBuffer()>
c000e98c:	83 c4 10             	add    esp,0x10
c000e98f:	90                   	nop
c000e990:	83 fd 01             	cmp    ebp,0x1
c000e993:	0f 85 93 00 00 00    	jne    c000ea2c <VCache::read(unsigned long long, int, void*)+0xce>
c000e999:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e99c:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e9a3:	89 04 24             	mov    DWORD PTR [esp],eax
c000e9a6:	0f 85 80 00 00 00    	jne    c000ea2c <VCache::read(unsigned long long, int, void*)+0xce>
c000e9ac:	8b 4f 40             	mov    ecx,DWORD PTR [edi+0x40]
c000e9af:	89 cd                	mov    ebp,ecx
c000e9b1:	f7 dd                	neg    ebp
c000e9b3:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000e9b7:	89 e8                	mov    eax,ebp
c000e9b9:	21 dd                	and    ebp,ebx
c000e9bb:	c1 f8 1f             	sar    eax,0x1f
c000e9be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e9c2:	89 e8                	mov    eax,ebp
c000e9c4:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000e9c8:	21 f5                	and    ebp,esi
c000e9ca:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e9ce:	89 ea                	mov    edx,ebp
c000e9d0:	74 2e                	je     c000ea00 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e9d2:	39 6f 34             	cmp    DWORD PTR [edi+0x34],ebp
c000e9d5:	75 29                	jne    c000ea00 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e9d7:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e9da:	75 24                	jne    c000ea00 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e9dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e9df:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e9e5:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e9e8:	8d 70 ff             	lea    esi,[eax-0x1]
c000e9eb:	21 f3                	and    ebx,esi
c000e9ed:	0f af d9             	imul   ebx,ecx
c000e9f0:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e9f3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e9f7:	89 de                	mov    esi,ebx
c000e9f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e9fb:	31 c0                	xor    eax,eax
c000e9fd:	eb 61                	jmp    c000ea60 <VCache::read(unsigned long long, int, void*)+0x102>
c000e9ff:	90                   	nop
c000ea00:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000ea04:	83 ec 0c             	sub    esp,0xc
c000ea07:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000ea0a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000ea0e:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000ea11:	8b 36                	mov    esi,DWORD PTR [esi]
c000ea13:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000ea16:	51                   	push   ecx
c000ea17:	52                   	push   edx
c000ea18:	50                   	push   eax
c000ea19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea1d:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000ea20:	83 c4 20             	add    esp,0x20
c000ea23:	85 c0                	test   eax,eax
c000ea25:	75 39                	jne    c000ea60 <VCache::read(unsigned long long, int, void*)+0x102>
c000ea27:	eb b3                	jmp    c000e9dc <VCache::read(unsigned long long, int, void*)+0x7e>
c000ea29:	8d 76 00             	lea    esi,[esi+0x0]
c000ea2c:	83 ec 0c             	sub    esp,0xc
c000ea2f:	57                   	push   edi
c000ea30:	e8 53 fd ff ff       	call   c000e788 <VCache::invalidateReadBuffer()>
c000ea35:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ea38:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ea3c:	8b 10                	mov    edx,DWORD PTR [eax]
c000ea3e:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000ea42:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000ea46:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000ea4a:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000ea4e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ea52:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000ea55:	83 c4 2c             	add    esp,0x2c
c000ea58:	5b                   	pop    ebx
c000ea59:	5e                   	pop    esi
c000ea5a:	5f                   	pop    edi
c000ea5b:	5d                   	pop    ebp
c000ea5c:	ff e0                	jmp    eax
c000ea5e:	66 90                	xchg   ax,ax
c000ea60:	83 c4 1c             	add    esp,0x1c
c000ea63:	5b                   	pop    ebx
c000ea64:	5e                   	pop    esi
c000ea65:	5f                   	pop    edi
c000ea66:	5d                   	pop    ebp
c000ea67:	c3                   	ret    

c000ea68 <Video::putrect(int, int, int, int, unsigned int)>:
c000ea68:	55                   	push   ebp
c000ea69:	57                   	push   edi
c000ea6a:	56                   	push   esi
c000ea6b:	53                   	push   ebx
c000ea6c:	83 ec 1c             	sub    esp,0x1c
c000ea6f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ea73:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ea77:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ea7b:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000ea7f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ea83:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ea87:	01 df                	add    edi,ebx
c000ea89:	39 fb                	cmp    ebx,edi
c000ea8b:	7d 1f                	jge    c000eaac <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000ea8d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ea91:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000ea95:	7d 12                	jge    c000eaa9 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000ea97:	8b 16                	mov    edx,DWORD PTR [esi]
c000ea99:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ea9d:	53                   	push   ebx
c000ea9e:	55                   	push   ebp
c000ea9f:	45                   	inc    ebp
c000eaa0:	56                   	push   esi
c000eaa1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000eaa4:	83 c4 10             	add    esp,0x10
c000eaa7:	eb e8                	jmp    c000ea91 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000eaa9:	43                   	inc    ebx
c000eaaa:	eb dd                	jmp    c000ea89 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000eaac:	83 c4 1c             	add    esp,0x1c
c000eaaf:	5b                   	pop    ebx
c000eab0:	5e                   	pop    esi
c000eab1:	5f                   	pop    edi
c000eab2:	5d                   	pop    ebp
c000eab3:	c3                   	ret    

c000eab4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000eab4:	55                   	push   ebp
c000eab5:	57                   	push   edi
c000eab6:	31 ff                	xor    edi,edi
c000eab8:	56                   	push   esi
c000eab9:	53                   	push   ebx
c000eaba:	83 ec 1c             	sub    esp,0x1c
c000eabd:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000eac1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000eac5:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000eacc:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000ead1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ead5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ead9:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000eadd:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000eae0:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000eae4:	01 f9                	add    ecx,edi
c000eae6:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000eaea:	7d 2f                	jge    c000eb1b <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000eaec:	31 f6                	xor    esi,esi
c000eaee:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000eaf2:	01 f2                	add    edx,esi
c000eaf4:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000eaf8:	7d 1a                	jge    c000eb14 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000eafa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000eafd:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000eb00:	46                   	inc    esi
c000eb01:	51                   	push   ecx
c000eb02:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000eb06:	52                   	push   edx
c000eb07:	55                   	push   ebp
c000eb08:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eb0b:	83 c4 10             	add    esp,0x10
c000eb0e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eb12:	eb da                	jmp    c000eaee <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000eb14:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000eb18:	47                   	inc    edi
c000eb19:	eb c5                	jmp    c000eae0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000eb1b:	83 c4 1c             	add    esp,0x1c
c000eb1e:	5b                   	pop    ebx
c000eb1f:	5e                   	pop    esi
c000eb20:	5f                   	pop    edi
c000eb21:	5d                   	pop    ebp
c000eb22:	c3                   	ret    
c000eb23:	90                   	nop

c000eb24 <Video::blit(unsigned int*, int, int, int, int)>:
c000eb24:	55                   	push   ebp
c000eb25:	ba 00 00 00 00       	mov    edx,0x0
c000eb2a:	57                   	push   edi
c000eb2b:	56                   	push   esi
c000eb2c:	53                   	push   ebx
c000eb2d:	83 ec 1c             	sub    esp,0x1c
c000eb30:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eb34:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000eb38:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000eb3c:	85 c0                	test   eax,eax
c000eb3e:	0f 49 d0             	cmovns edx,eax
c000eb41:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000eb48:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000eb4c:	89 eb                	mov    ebx,ebp
c000eb4e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000eb52:	01 ea                	add    edx,ebp
c000eb54:	39 da                	cmp    edx,ebx
c000eb56:	7e 54                	jle    c000ebac <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000eb58:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000eb5e:	7c 4c                	jl     c000ebac <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000eb60:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000eb64:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000eb68:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000eb6c:	01 c1                	add    ecx,eax
c000eb6e:	39 f9                	cmp    ecx,edi
c000eb70:	7e 2f                	jle    c000eba1 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000eb72:	83 c2 04             	add    edx,0x4
c000eb75:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000eb7b:	7c 21                	jl     c000eb9e <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000eb7d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000eb81:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000eb83:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000eb86:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000eb8a:	55                   	push   ebp
c000eb8b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eb8f:	56                   	push   esi
c000eb90:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000eb93:	83 c4 10             	add    esp,0x10
c000eb96:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eb9a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eb9e:	47                   	inc    edi
c000eb9f:	eb c7                	jmp    c000eb68 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000eba1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000eba5:	43                   	inc    ebx
c000eba6:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000ebaa:	eb a2                	jmp    c000eb4e <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000ebac:	83 c4 1c             	add    esp,0x1c
c000ebaf:	5b                   	pop    ebx
c000ebb0:	5e                   	pop    esi
c000ebb1:	5f                   	pop    edi
c000ebb2:	5d                   	pop    ebp
c000ebb3:	c3                   	ret    

c000ebb4 <Video::clearScreen(unsigned int)>:
c000ebb4:	57                   	push   edi
c000ebb5:	56                   	push   esi
c000ebb6:	53                   	push   ebx
c000ebb7:	31 db                	xor    ebx,ebx
c000ebb9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ebbd:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000ebc3:	7e 1f                	jle    c000ebe4 <Video::clearScreen(unsigned int)+0x30>
c000ebc5:	31 ff                	xor    edi,edi
c000ebc7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000ebcd:	7e 12                	jle    c000ebe1 <Video::clearScreen(unsigned int)+0x2d>
c000ebcf:	8b 06                	mov    eax,DWORD PTR [esi]
c000ebd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ebd5:	53                   	push   ebx
c000ebd6:	57                   	push   edi
c000ebd7:	47                   	inc    edi
c000ebd8:	56                   	push   esi
c000ebd9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ebdc:	83 c4 10             	add    esp,0x10
c000ebdf:	eb e6                	jmp    c000ebc7 <Video::clearScreen(unsigned int)+0x13>
c000ebe1:	43                   	inc    ebx
c000ebe2:	eb d9                	jmp    c000ebbd <Video::clearScreen(unsigned int)+0x9>
c000ebe4:	5b                   	pop    ebx
c000ebe5:	5e                   	pop    esi
c000ebe6:	5f                   	pop    edi
c000ebe7:	c3                   	ret    

c000ebe8 <Video::putpixel(int, int, unsigned int)>:
c000ebe8:	c7 44 24 04 c8 1e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021ec8
c000ebf0:	e9 16 2a 00 00       	jmp    c001160b <KePanic(char const*)>
c000ebf5:	90                   	nop

c000ebf6 <Video::readPixelApprox(int, int)>:
c000ebf6:	83 ec 18             	sub    esp,0x18
c000ebf9:	68 e9 1e 02 c0       	push   0xc0021ee9
c000ebfe:	e8 08 2a 00 00       	call   c001160b <KePanic(char const*)>
c000ec03:	31 c0                	xor    eax,eax
c000ec05:	83 c4 1c             	add    esp,0x1c
c000ec08:	c3                   	ret    
c000ec09:	90                   	nop

c000ec0a <Video::Video(char const*)>:
c000ec0a:	83 ec 0c             	sub    esp,0xc
c000ec0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec11:	83 ec 08             	sub    esp,0x8
c000ec14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec18:	50                   	push   eax
c000ec19:	e8 be df ff ff       	call   c000cbdc <Device::Device(char const*)>
c000ec1e:	83 c4 10             	add    esp,0x10
c000ec21:	ba 64 1f 02 c0       	mov    edx,0xc0021f64
c000ec26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec2a:	89 10                	mov    DWORD PTR [eax],edx
c000ec2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec30:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000ec3a:	90                   	nop
c000ec3b:	83 c4 0c             	add    esp,0xc
c000ec3e:	c3                   	ret    
c000ec3f:	90                   	nop

c000ec40 <Video::~Video()>:
c000ec40:	83 ec 0c             	sub    esp,0xc
c000ec43:	ba 64 1f 02 c0       	mov    edx,0xc0021f64
c000ec48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec4c:	89 10                	mov    DWORD PTR [eax],edx
c000ec4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec52:	83 ec 0c             	sub    esp,0xc
c000ec55:	50                   	push   eax
c000ec56:	e8 eb dc ff ff       	call   c000c946 <Device::~Device()>
c000ec5b:	83 c4 10             	add    esp,0x10
c000ec5e:	90                   	nop
c000ec5f:	83 c4 0c             	add    esp,0xc
c000ec62:	c3                   	ret    
c000ec63:	90                   	nop

c000ec64 <Video::~Video()>:
c000ec64:	83 ec 0c             	sub    esp,0xc
c000ec67:	83 ec 0c             	sub    esp,0xc
c000ec6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec6e:	e8 cd ff ff ff       	call   c000ec40 <Video::~Video()>
c000ec73:	83 c4 10             	add    esp,0x10
c000ec76:	83 ec 08             	sub    esp,0x8
c000ec79:	68 64 01 00 00       	push   0x164
c000ec7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec82:	e8 85 bb ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000ec87:	83 c4 10             	add    esp,0x10
c000ec8a:	83 c4 0c             	add    esp,0xc
c000ec8d:	c3                   	ret    

c000ec8e <Video::isMonochrome()>:
c000ec8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec92:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000ec98:	c3                   	ret    
c000ec99:	90                   	nop

c000ec9a <Video::getWidth()>:
c000ec9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec9e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000eca4:	c3                   	ret    
c000eca5:	90                   	nop

c000eca6 <Video::getHeight()>:
c000eca6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ecaa:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ecb0:	c3                   	ret    
c000ecb1:	90                   	nop

c000ecb2 <Video::drawCursor(int, int, unsigned int*, int)>:
c000ecb2:	55                   	push   ebp
c000ecb3:	57                   	push   edi
c000ecb4:	56                   	push   esi
c000ecb5:	53                   	push   ebx
c000ecb6:	83 ec 2c             	sub    esp,0x2c
c000ecb9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ecbd:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ecc1:	83 f8 01             	cmp    eax,0x1
c000ecc4:	19 c9                	sbb    ecx,ecx
c000ecc6:	31 db                	xor    ebx,ebx
c000ecc8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000eccc:	89 ce                	mov    esi,ecx
c000ecce:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000ecd6:	f7 d6                	not    esi
c000ecd8:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000ecde:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ece2:	01 d8                	add    eax,ebx
c000ece4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ece8:	57                   	push   edi
c000ece9:	e8 b8 ff ff ff       	call   c000eca6 <Video::getHeight()>
c000ecee:	59                   	pop    ecx
c000ecef:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ecf3:	7e 70                	jle    c000ed65 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000ecf5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ecf9:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000ecfd:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000ed00:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ed04:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ed08:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000ed0f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ed13:	89 e8                	mov    eax,ebp
c000ed15:	83 c0 20             	add    eax,0x20
c000ed18:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ed1c:	57                   	push   edi
c000ed1d:	e8 78 ff ff ff       	call   c000ec9a <Video::getWidth()>
c000ed22:	5a                   	pop    edx
c000ed23:	39 c5                	cmp    ebp,eax
c000ed25:	7d 34                	jge    c000ed5b <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000ed27:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000ed2c:	74 05                	je     c000ed33 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000ed2e:	8b 07                	mov    eax,DWORD PTR [edi]
c000ed30:	56                   	push   esi
c000ed31:	eb 0d                	jmp    c000ed40 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000ed33:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000ed38:	74 12                	je     c000ed4c <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000ed3a:	8b 07                	mov    eax,DWORD PTR [edi]
c000ed3c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ed40:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ed44:	55                   	push   ebp
c000ed45:	57                   	push   edi
c000ed46:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ed49:	83 c4 10             	add    esp,0x10
c000ed4c:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000ed50:	45                   	inc    ebp
c000ed51:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000ed55:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000ed59:	75 c1                	jne    c000ed1c <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000ed5b:	43                   	inc    ebx
c000ed5c:	83 fb 20             	cmp    ebx,0x20
c000ed5f:	0f 85 79 ff ff ff    	jne    c000ecde <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000ed65:	83 c4 2c             	add    esp,0x2c
c000ed68:	5b                   	pop    ebx
c000ed69:	5e                   	pop    esi
c000ed6a:	5f                   	pop    edi
c000ed6b:	5d                   	pop    ebp
c000ed6c:	c3                   	ret    
c000ed6d:	90                   	nop

c000ed6e <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000ed6e:	55                   	push   ebp
c000ed6f:	57                   	push   edi
c000ed70:	56                   	push   esi
c000ed71:	53                   	push   ebx
c000ed72:	83 ec 28             	sub    esp,0x28
c000ed75:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ed79:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c000ed7d:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000ed81:	0f b6 73 0f          	movzx  esi,BYTE PTR [ebx+0xf]
c000ed85:	c1 e7 08             	shl    edi,0x8
c000ed88:	01 c7                	add    edi,eax
c000ed8a:	0f b6 43 0e          	movzx  eax,BYTE PTR [ebx+0xe]
c000ed8e:	c1 e6 08             	shl    esi,0x8
c000ed91:	01 f0                	add    eax,esi
c000ed93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ed97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed9b:	0f af c7             	imul   eax,edi
c000ed9e:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000eda5:	50                   	push   eax
c000eda6:	e8 28 8d ff ff       	call   c0007ad3 <malloc>
c000edab:	83 c4 10             	add    esp,0x10
c000edae:	85 c0                	test   eax,eax
c000edb0:	89 c5                	mov    ebp,eax
c000edb2:	75 10                	jne    c000edc4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000edb4:	83 ec 0c             	sub    esp,0xc
c000edb7:	68 14 1f 02 c0       	push   0xc0021f14
c000edbc:	e8 4a 28 00 00       	call   c001160b <KePanic(char const*)>
c000edc1:	83 c4 10             	add    esp,0x10
c000edc4:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000edc8:	ba 12 00 00 00       	mov    edx,0x12
c000edcd:	85 c0                	test   eax,eax
c000edcf:	74 11                	je     c000ede2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000edd1:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000edd5:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000edd9:	c1 fa 03             	sar    edx,0x3
c000eddc:	0f af d1             	imul   edx,ecx
c000eddf:	83 c2 12             	add    edx,0x12
c000ede2:	85 ff                	test   edi,edi
c000ede4:	74 06                	je     c000edec <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000ede6:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000edea:	75 12                	jne    c000edfe <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000edec:	83 ec 0c             	sub    esp,0xc
c000edef:	68 24 1f 02 c0       	push   0xc0021f24
c000edf4:	e8 11 bb ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000edf9:	e9 b8 00 00 00       	jmp    c000eeb6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000edfe:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000ee02:	83 f9 02             	cmp    ecx,0x2
c000ee05:	0f 85 96 00 00 00    	jne    c000eea1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000ee0b:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000ee10:	75 0e                	jne    c000ee20 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ee12:	85 c0                	test   eax,eax
c000ee14:	75 0a                	jne    c000ee20 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ee16:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000ee19:	83 e8 18             	sub    eax,0x18
c000ee1c:	a8 f7                	test   al,0xf7
c000ee1e:	74 0a                	je     c000ee2a <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000ee20:	83 ec 0c             	sub    esp,0xc
c000ee23:	68 39 1f 02 c0       	push   0xc0021f39
c000ee28:	eb 7f                	jmp    c000eea9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000ee2a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ee32:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000ee3a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000ee3e:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000ee42:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ee4a:	75 0c                	jne    c000ee58 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000ee4c:	0f b6 4c 13 03       	movzx  ecx,BYTE PTR [ebx+edx*1+0x3]
c000ee51:	c1 e1 18             	shl    ecx,0x18
c000ee54:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ee58:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000ee5d:	46                   	inc    esi
c000ee5e:	89 c8                	mov    eax,ecx
c000ee60:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000ee65:	c1 e0 10             	shl    eax,0x10
c000ee68:	c1 e1 08             	shl    ecx,0x8
c000ee6b:	09 c1                	or     ecx,eax
c000ee6d:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000ee71:	09 c1                	or     ecx,eax
c000ee73:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000ee77:	89 4c b5 fc          	mov    DWORD PTR [ebp+esi*4-0x4],ecx
c000ee7b:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000ee7f:	c1 f8 03             	sar    eax,0x3
c000ee82:	01 c2                	add    edx,eax
c000ee84:	89 f0                	mov    eax,esi
c000ee86:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000ee8a:	39 c7                	cmp    edi,eax
c000ee8c:	7f b0                	jg     c000ee3e <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000ee8e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ee92:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ee96:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000ee99:	7e 22                	jle    c000eebd <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000ee9b:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000ee9f:	eb 99                	jmp    c000ee3a <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000eea1:	50                   	push   eax
c000eea2:	50                   	push   eax
c000eea3:	51                   	push   ecx
c000eea4:	68 47 1f 02 c0       	push   0xc0021f47
c000eea9:	e8 5c ba ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000eeae:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000eeb1:	e8 2d 8c ff ff       	call   c0007ae3 <free>
c000eeb6:	83 c4 10             	add    esp,0x10
c000eeb9:	31 ed                	xor    ebp,ebp
c000eebb:	eb 0f                	jmp    c000eecc <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000eebd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eec1:	89 38                	mov    DWORD PTR [eax],edi
c000eec3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eec7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000eeca:	89 38                	mov    DWORD PTR [eax],edi
c000eecc:	83 c4 1c             	add    esp,0x1c
c000eecf:	89 e8                	mov    eax,ebp
c000eed1:	5b                   	pop    ebx
c000eed2:	5e                   	pop    esi
c000eed3:	5f                   	pop    edi
c000eed4:	5d                   	pop    ebp
c000eed5:	c3                   	ret    

c000eed6 <Video::putTGA(int, int, unsigned char*, int)>:
c000eed6:	55                   	push   ebp
c000eed7:	57                   	push   edi
c000eed8:	56                   	push   esi
c000eed9:	53                   	push   ebx
c000eeda:	83 ec 28             	sub    esp,0x28
c000eedd:	8d 44 24 18          	lea    eax,[esp+0x18]
c000eee1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000eee5:	50                   	push   eax
c000eee6:	8d 44 24 18          	lea    eax,[esp+0x18]
c000eeea:	50                   	push   eax
c000eeeb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000eeef:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000eef3:	57                   	push   edi
c000eef4:	e8 75 fe ff ff       	call   c000ed6e <Video::tgaParse(unsigned char*, int, int*, int*)>
c000eef9:	83 c4 20             	add    esp,0x20
c000eefc:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ef00:	85 c0                	test   eax,eax
c000ef02:	74 35                	je     c000ef39 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ef04:	89 c6                	mov    esi,eax
c000ef06:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ef0a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ef0e:	39 d8                	cmp    eax,ebx
c000ef10:	7e 27                	jle    c000ef39 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ef12:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ef16:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000ef1a:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000ef1e:	39 e9                	cmp    ecx,ebp
c000ef20:	7e 14                	jle    c000ef36 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000ef22:	83 c6 04             	add    esi,0x4
c000ef25:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000ef27:	ff 76 fc             	push   DWORD PTR [esi-0x4]
c000ef2a:	53                   	push   ebx
c000ef2b:	55                   	push   ebp
c000ef2c:	45                   	inc    ebp
c000ef2d:	57                   	push   edi
c000ef2e:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000ef31:	83 c4 10             	add    esp,0x10
c000ef34:	eb e0                	jmp    c000ef16 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000ef36:	43                   	inc    ebx
c000ef37:	eb cd                	jmp    c000ef06 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000ef39:	83 c4 1c             	add    esp,0x1c
c000ef3c:	5b                   	pop    ebx
c000ef3d:	5e                   	pop    esi
c000ef3e:	5f                   	pop    edi
c000ef3f:	5d                   	pop    ebp
c000ef40:	c3                   	ret    
c000ef41:	66 90                	xchg   ax,ax
c000ef43:	90                   	nop

c000ef44 <ACPI::close(int, int, void*)>:
c000ef44:	83 ec 1c             	sub    esp,0x1c
c000ef47:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000ef4f:	74 0b                	je     c000ef5c <ACPI::close(int, int, void*)+0x18>
c000ef51:	b8 00 00 00 00       	mov    eax,0x0
c000ef56:	e9 99 00 00 00       	jmp    c000eff4 <ACPI::close(int, int, void*)+0xb0>
c000ef5b:	90                   	nop
c000ef5c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000ef61:	75 29                	jne    c000ef8c <ACPI::close(int, int, void*)+0x48>
c000ef63:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ef68:	85 c0                	test   eax,eax
c000ef6a:	74 08                	je     c000ef74 <ACPI::close(int, int, void*)+0x30>
c000ef6c:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ef71:	ff d0                	call   eax
c000ef73:	90                   	nop
c000ef74:	83 ec 0c             	sub    esp,0xc
c000ef77:	68 a8 1f 02 c0       	push   0xc0021fa8
c000ef7c:	e8 8a 26 00 00       	call   c001160b <KePanic(char const*)>
c000ef81:	83 c4 10             	add    esp,0x10
c000ef84:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef89:	eb 69                	jmp    c000eff4 <ACPI::close(int, int, void*)+0xb0>
c000ef8b:	90                   	nop
c000ef8c:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000ef91:	75 59                	jne    c000efec <ACPI::close(int, int, void*)+0xa8>
c000ef93:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000ef98:	85 c0                	test   eax,eax
c000ef9a:	74 08                	je     c000efa4 <ACPI::close(int, int, void*)+0x60>
c000ef9c:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000efa1:	ff d0                	call   eax
c000efa3:	90                   	nop
c000efa4:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000efa9:	8d 76 00             	lea    esi,[esi+0x0]
c000efac:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000efb1:	83 e0 02             	and    eax,0x2
c000efb4:	74 1e                	je     c000efd4 <ACPI::close(int, int, void*)+0x90>
c000efb6:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000efbd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efc1:	89 c2                	mov    edx,eax
c000efc3:	ec                   	in     al,dx
c000efc4:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000efc8:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000efcc:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000efd0:	eb da                	jmp    c000efac <ACPI::close(int, int, void*)+0x68>
c000efd2:	66 90                	xchg   ax,ax
c000efd4:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000efdb:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000efe0:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000efe4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000efe8:	ee                   	out    dx,al
c000efe9:	8d 76 00             	lea    esi,[esi+0x0]
c000efec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eff1:	8d 76 00             	lea    esi,[esi+0x0]
c000eff4:	83 c4 1c             	add    esp,0x1c
c000eff7:	c3                   	ret    

c000eff8 <findRSDP()>:
c000eff8:	83 ec 1c             	sub    esp,0x1c
c000effb:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f000:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f006:	83 e0 04             	and    eax,0x4
c000f009:	0f b6 c0             	movzx  eax,al
c000f00c:	85 c0                	test   eax,eax
c000f00e:	75 08                	jne    c000f018 <findRSDP()+0x20>
c000f010:	b8 00 00 00 00       	mov    eax,0x0
c000f015:	eb 75                	jmp    c000f08c <findRSDP()+0x94>
c000f017:	90                   	nop
c000f018:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c000f01d:	3d ff 07 00 00       	cmp    eax,0x7ff
c000f022:	7f 1c                	jg     c000f040 <findRSDP()+0x48>
c000f024:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f029:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f02f:	83 e2 fb             	and    edx,0xfffffffb
c000f032:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f038:	b8 00 00 00 00       	mov    eax,0x0
c000f03d:	eb 4d                	jmp    c000f08c <findRSDP()+0x94>
c000f03f:	90                   	nop
c000f040:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000f048:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000f050:	77 32                	ja     c000f084 <findRSDP()+0x8c>
c000f052:	83 ec 04             	sub    esp,0x4
c000f055:	6a 08                	push   0x8
c000f057:	68 43 20 02 c0       	push   0xc0022043
c000f05c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f060:	e8 1b 13 ff ff       	call   c0000380 <memcmp>
c000f065:	83 c4 10             	add    esp,0x10
c000f068:	85 c0                	test   eax,eax
c000f06a:	0f 94 c0             	sete   al
c000f06d:	0f b6 c0             	movzx  eax,al
c000f070:	85 c0                	test   eax,eax
c000f072:	74 08                	je     c000f07c <findRSDP()+0x84>
c000f074:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f078:	eb 12                	jmp    c000f08c <findRSDP()+0x94>
c000f07a:	66 90                	xchg   ax,ax
c000f07c:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000f081:	eb c5                	jmp    c000f048 <findRSDP()+0x50>
c000f083:	90                   	nop
c000f084:	b8 00 00 00 00       	mov    eax,0x0
c000f089:	8d 76 00             	lea    esi,[esi+0x0]
c000f08c:	83 c4 1c             	add    esp,0x1c
c000f08f:	c3                   	ret    

c000f090 <loadACPITables(unsigned char*)>:
c000f090:	57                   	push   edi
c000f091:	56                   	push   esi
c000f092:	53                   	push   ebx
c000f093:	83 ec 60             	sub    esp,0x60
c000f096:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f09b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f0a1:	83 e0 04             	and    eax,0x4
c000f0a4:	0f b6 c0             	movzx  eax,al
c000f0a7:	85 c0                	test   eax,eax
c000f0a9:	0f 84 41 02 00 00    	je     c000f2f0 <loadACPITables(unsigned char*)+0x260>
c000f0af:	a0 20 bb 02 c0       	mov    al,ds:0xc002bb20
c000f0b4:	0f b6 c0             	movzx  eax,al
c000f0b7:	85 c0                	test   eax,eax
c000f0b9:	74 79                	je     c000f134 <loadACPITables(unsigned char*)+0xa4>
c000f0bb:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f0bf:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000f0c3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000f0c7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f0ca:	83 e8 24             	sub    eax,0x24
c000f0cd:	c1 e8 03             	shr    eax,0x3
c000f0d0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f0d4:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000f0dc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f0e0:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000f0e4:	0f 8d ba 00 00 00    	jge    c000f1a4 <loadACPITables(unsigned char*)+0x114>
c000f0ea:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f0ee:	83 c0 24             	add    eax,0x24
c000f0f1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f0f5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f0f9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f0fd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f101:	c1 e0 03             	shl    eax,0x3
c000f104:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000f108:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f10c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f10f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f111:	89 c1                	mov    ecx,eax
c000f113:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f118:	8d 50 01             	lea    edx,[eax+0x1]
c000f11b:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f121:	89 ca                	mov    edx,ecx
c000f123:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f12a:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000f12f:	eb ab                	jmp    c000f0dc <loadACPITables(unsigned char*)+0x4c>
c000f131:	8d 76 00             	lea    esi,[esi+0x0]
c000f134:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f138:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f13c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f140:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f143:	83 e8 24             	sub    eax,0x24
c000f146:	c1 e8 02             	shr    eax,0x2
c000f149:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f14d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000f155:	8d 76 00             	lea    esi,[esi+0x0]
c000f158:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f15c:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000f160:	7d 42                	jge    c000f1a4 <loadACPITables(unsigned char*)+0x114>
c000f162:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f166:	83 c0 24             	add    eax,0x24
c000f169:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f16d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f171:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f175:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f179:	c1 e0 02             	shl    eax,0x2
c000f17c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000f180:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f184:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f186:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f18b:	8d 50 01             	lea    edx,[eax+0x1]
c000f18e:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f194:	89 ca                	mov    edx,ecx
c000f196:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f19d:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000f1a2:	eb b4                	jmp    c000f158 <loadACPITables(unsigned char*)+0xc8>
c000f1a4:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000f1ac:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f1b1:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000f1b5:	0f 8d 39 01 00 00    	jge    c000f2f4 <loadACPITables(unsigned char*)+0x264>
c000f1bb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f1bf:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f1c6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f1ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1ce:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f1d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1d6:	25 ff 0f 00 00       	and    eax,0xfff
c000f1db:	89 c6                	mov    esi,eax
c000f1dd:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f1e3:	83 ec 0c             	sub    esp,0xc
c000f1e6:	6a 01                	push   0x1
c000f1e8:	e8 08 a4 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f1ed:	83 c4 10             	add    esp,0x10
c000f1f0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f1f4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f1fa:	83 ec 0c             	sub    esp,0xc
c000f1fd:	6a 01                	push   0x1
c000f1ff:	6a 01                	push   0x1
c000f201:	50                   	push   eax
c000f202:	52                   	push   edx
c000f203:	53                   	push   ebx
c000f204:	e8 ff ac ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f209:	83 c4 20             	add    esp,0x20
c000f20c:	09 f0                	or     eax,esi
c000f20e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f212:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f216:	c1 e0 03             	shl    eax,0x3
c000f219:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f21e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f222:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f226:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f22a:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000f232:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f236:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f23a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f23e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f242:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f246:	89 c6                	mov    esi,eax
c000f248:	89 d7                	mov    edi,edx
c000f24a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f24c:	89 c8                	mov    eax,ecx
c000f24e:	89 fa                	mov    edx,edi
c000f250:	89 f3                	mov    ebx,esi
c000f252:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f256:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000f25a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f25e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f262:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f265:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f269:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f26d:	05 00 10 00 00       	add    eax,0x1000
c000f272:	c1 e8 0c             	shr    eax,0xc
c000f275:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f279:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f27d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f281:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f285:	25 ff 0f 00 00       	and    eax,0xfff
c000f28a:	89 c6                	mov    esi,eax
c000f28c:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f292:	83 ec 0c             	sub    esp,0xc
c000f295:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f299:	e8 57 a3 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f29e:	83 c4 10             	add    esp,0x10
c000f2a1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f2a5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f2ab:	83 ec 0c             	sub    esp,0xc
c000f2ae:	6a 01                	push   0x1
c000f2b0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f2b4:	50                   	push   eax
c000f2b5:	52                   	push   edx
c000f2b6:	53                   	push   ebx
c000f2b7:	e8 4c ac ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f2bc:	83 c4 20             	add    esp,0x20
c000f2bf:	09 f0                	or     eax,esi
c000f2c1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f2c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f2c9:	83 ec 0c             	sub    esp,0xc
c000f2cc:	50                   	push   eax
c000f2cd:	e8 37 a6 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000f2d2:	83 c4 10             	add    esp,0x10
c000f2d5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f2d9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f2dd:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f2e4:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000f2e9:	e9 be fe ff ff       	jmp    c000f1ac <loadACPITables(unsigned char*)+0x11c>
c000f2ee:	66 90                	xchg   ax,ax
c000f2f0:	90                   	nop
c000f2f1:	8d 76 00             	lea    esi,[esi+0x0]
c000f2f4:	83 c4 60             	add    esp,0x60
c000f2f7:	5b                   	pop    ebx
c000f2f8:	5e                   	pop    esi
c000f2f9:	5f                   	pop    edi
c000f2fa:	c3                   	ret    
c000f2fb:	90                   	nop

c000f2fc <findRSDT(unsigned char*)>:
c000f2fc:	57                   	push   edi
c000f2fd:	56                   	push   esi
c000f2fe:	53                   	push   ebx
c000f2ff:	83 ec 50             	sub    esp,0x50
c000f302:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f307:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f30d:	83 e0 04             	and    eax,0x4
c000f310:	0f b6 c0             	movzx  eax,al
c000f313:	85 c0                	test   eax,eax
c000f315:	75 0d                	jne    c000f324 <findRSDT(unsigned char*)+0x28>
c000f317:	b8 00 00 00 00       	mov    eax,0x0
c000f31c:	e9 2b 01 00 00       	jmp    c000f44c <findRSDT(unsigned char*)+0x150>
c000f321:	8d 76 00             	lea    esi,[esi+0x0]
c000f324:	89 e0                	mov    eax,esp
c000f326:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f32a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f32e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f332:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000f33a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f33e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f342:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f346:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f34a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000f34e:	89 c6                	mov    esi,eax
c000f350:	89 d7                	mov    edi,edx
c000f352:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f354:	89 c8                	mov    eax,ecx
c000f356:	89 fa                	mov    edx,edi
c000f358:	89 f3                	mov    ebx,esi
c000f35a:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000f35e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f362:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f366:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f36a:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000f36e:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f376:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f37a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f37e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f386:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f38a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f38e:	25 ff 0f 00 00       	and    eax,0xfff
c000f393:	89 c6                	mov    esi,eax
c000f395:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f39b:	83 ec 0c             	sub    esp,0xc
c000f39e:	6a 02                	push   0x2
c000f3a0:	e8 50 a2 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f3a5:	83 c4 10             	add    esp,0x10
c000f3a8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f3ac:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f3b2:	83 ec 0c             	sub    esp,0xc
c000f3b5:	6a 01                	push   0x1
c000f3b7:	6a 02                	push   0x2
c000f3b9:	50                   	push   eax
c000f3ba:	52                   	push   edx
c000f3bb:	53                   	push   ebx
c000f3bc:	e8 47 ab ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f3c1:	83 c4 20             	add    esp,0x20
c000f3c4:	09 f0                	or     eax,esi
c000f3c6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f3ca:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f3ce:	25 ff 0f 00 00       	and    eax,0xfff
c000f3d3:	89 c6                	mov    esi,eax
c000f3d5:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f3db:	83 ec 0c             	sub    esp,0xc
c000f3de:	6a 02                	push   0x2
c000f3e0:	e8 10 a2 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f3e5:	83 c4 10             	add    esp,0x10
c000f3e8:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f3ec:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f3f2:	83 ec 0c             	sub    esp,0xc
c000f3f5:	6a 01                	push   0x1
c000f3f7:	6a 02                	push   0x2
c000f3f9:	50                   	push   eax
c000f3fa:	52                   	push   edx
c000f3fb:	53                   	push   ebx
c000f3fc:	e8 07 ab ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f401:	83 c4 20             	add    esp,0x20
c000f404:	09 f0                	or     eax,esi
c000f406:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f40a:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f40f:	85 c0                	test   eax,eax
c000f411:	75 11                	jne    c000f424 <findRSDT(unsigned char*)+0x128>
c000f413:	c6 05 20 bb 02 c0 00 	mov    BYTE PTR ds:0xc002bb20,0x0
c000f41a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f41e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f422:	eb 24                	jmp    c000f448 <findRSDT(unsigned char*)+0x14c>
c000f424:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f429:	83 f8 02             	cmp    eax,0x2
c000f42c:	75 12                	jne    c000f440 <findRSDT(unsigned char*)+0x144>
c000f42e:	c6 05 20 bb 02 c0 01 	mov    BYTE PTR ds:0xc002bb20,0x1
c000f435:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f439:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f43d:	eb 09                	jmp    c000f448 <findRSDT(unsigned char*)+0x14c>
c000f43f:	90                   	nop
c000f440:	b8 00 00 00 00       	mov    eax,0x0
c000f445:	eb 05                	jmp    c000f44c <findRSDT(unsigned char*)+0x150>
c000f447:	90                   	nop
c000f448:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f44c:	83 c4 50             	add    esp,0x50
c000f44f:	5b                   	pop    ebx
c000f450:	5e                   	pop    esi
c000f451:	5f                   	pop    edi
c000f452:	c3                   	ret    
c000f453:	90                   	nop

c000f454 <findDataTable(unsigned char*, char*)>:
c000f454:	83 ec 1c             	sub    esp,0x1c
c000f457:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f45c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f462:	83 e0 04             	and    eax,0x4
c000f465:	0f b6 c0             	movzx  eax,al
c000f468:	85 c0                	test   eax,eax
c000f46a:	75 08                	jne    c000f474 <findDataTable(unsigned char*, char*)+0x20>
c000f46c:	b8 00 00 00 00       	mov    eax,0x0
c000f471:	eb 5d                	jmp    c000f4d0 <findDataTable(unsigned char*, char*)+0x7c>
c000f473:	90                   	nop
c000f474:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f47c:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f481:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f485:	7d 41                	jge    c000f4c8 <findDataTable(unsigned char*, char*)+0x74>
c000f487:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f48b:	c1 e0 03             	shl    eax,0x3
c000f48e:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f493:	83 ec 04             	sub    esp,0x4
c000f496:	6a 04                	push   0x4
c000f498:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f49c:	50                   	push   eax
c000f49d:	e8 de 0e ff ff       	call   c0000380 <memcmp>
c000f4a2:	83 c4 10             	add    esp,0x10
c000f4a5:	85 c0                	test   eax,eax
c000f4a7:	0f 94 c0             	sete   al
c000f4aa:	0f b6 c0             	movzx  eax,al
c000f4ad:	85 c0                	test   eax,eax
c000f4af:	74 0f                	je     c000f4c0 <findDataTable(unsigned char*, char*)+0x6c>
c000f4b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4b5:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f4bc:	eb 12                	jmp    c000f4d0 <findDataTable(unsigned char*, char*)+0x7c>
c000f4be:	66 90                	xchg   ax,ax
c000f4c0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f4c5:	eb b5                	jmp    c000f47c <findDataTable(unsigned char*, char*)+0x28>
c000f4c7:	90                   	nop
c000f4c8:	b8 00 00 00 00       	mov    eax,0x0
c000f4cd:	8d 76 00             	lea    esi,[esi+0x0]
c000f4d0:	83 c4 1c             	add    esp,0x1c
c000f4d3:	c3                   	ret    

c000f4d4 <scanMADT()>:
c000f4d4:	53                   	push   ebx
c000f4d5:	83 ec 38             	sub    esp,0x38
c000f4d8:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c000f4dd:	25 00 04 00 00       	and    eax,0x400
c000f4e2:	74 14                	je     c000f4f8 <scanMADT()+0x24>
c000f4e4:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f4e9:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f4ef:	83 e2 fb             	and    edx,0xfffffffb
c000f4f2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f4f8:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f4fd:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f503:	83 e0 04             	and    eax,0x4
c000f506:	0f b6 c0             	movzx  eax,al
c000f509:	85 c0                	test   eax,eax
c000f50b:	0f 84 6b 04 00 00    	je     c000f97c <scanMADT()+0x4a8>
c000f511:	e8 e2 fa ff ff       	call   c000eff8 <findRSDP()>
c000f516:	a3 2c bb 02 c0       	mov    ds:0xc002bb2c,eax
c000f51b:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f520:	85 c0                	test   eax,eax
c000f522:	75 1c                	jne    c000f540 <scanMADT()+0x6c>
c000f524:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f529:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f52f:	83 e2 fb             	and    edx,0xfffffffb
c000f532:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f538:	e9 47 04 00 00       	jmp    c000f984 <scanMADT()+0x4b0>
c000f53d:	8d 76 00             	lea    esi,[esi+0x0]
c000f540:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f545:	83 ec 0c             	sub    esp,0xc
c000f548:	50                   	push   eax
c000f549:	e8 ae fd ff ff       	call   c000f2fc <findRSDT(unsigned char*)>
c000f54e:	83 c4 10             	add    esp,0x10
c000f551:	a3 28 bb 02 c0       	mov    ds:0xc002bb28,eax
c000f556:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f55b:	85 c0                	test   eax,eax
c000f55d:	75 19                	jne    c000f578 <scanMADT()+0xa4>
c000f55f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f564:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f56a:	83 e2 fb             	and    edx,0xfffffffb
c000f56d:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f573:	e9 0c 04 00 00       	jmp    c000f984 <scanMADT()+0x4b0>
c000f578:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f57d:	83 ec 0c             	sub    esp,0xc
c000f580:	50                   	push   eax
c000f581:	e8 0a fb ff ff       	call   c000f090 <loadACPITables(unsigned char*)>
c000f586:	83 c4 10             	add    esp,0x10
c000f589:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f58e:	83 ec 08             	sub    esp,0x8
c000f591:	68 4c 20 02 c0       	push   0xc002204c
c000f596:	50                   	push   eax
c000f597:	e8 b8 fe ff ff       	call   c000f454 <findDataTable(unsigned char*, char*)>
c000f59c:	83 c4 10             	add    esp,0x10
c000f59f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f5a3:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f5a8:	75 1a                	jne    c000f5c4 <scanMADT()+0xf0>
c000f5aa:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f5af:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f5b5:	83 e2 fe             	and    edx,0xfffffffe
c000f5b8:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f5be:	e9 c1 03 00 00       	jmp    c000f984 <scanMADT()+0x4b0>
c000f5c3:	90                   	nop
c000f5c4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f5cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f5d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f5d3:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f5d7:	0f 87 a7 03 00 00    	ja     c000f984 <scanMADT()+0x4b0>
c000f5dd:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f5e5:	0f 87 99 03 00 00    	ja     c000f984 <scanMADT()+0x4b0>
c000f5eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5ef:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f5f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5f7:	8d 50 01             	lea    edx,[eax+0x1]
c000f5fa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5fe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f602:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f606:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f60a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f60e:	8d 50 01             	lea    edx,[eax+0x1]
c000f611:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f615:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f619:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f61d:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f621:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f626:	83 f8 02             	cmp    eax,0x2
c000f629:	0f 86 51 03 00 00    	jbe    c000f980 <scanMADT()+0x4ac>
c000f62f:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f634:	85 c0                	test   eax,eax
c000f636:	75 58                	jne    c000f690 <scanMADT()+0x1bc>
c000f638:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f63c:	8d 50 01             	lea    edx,[eax+0x1]
c000f63f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f643:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f649:	0f b6 d2             	movzx  edx,dl
c000f64c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f650:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f654:	88 82 60 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42a0],al
c000f65a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f65e:	8d 50 01             	lea    edx,[eax+0x1]
c000f661:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f665:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f66b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f66e:	88 0d 20 bd 02 c0    	mov    BYTE PTR ds:0xc002bd20,cl
c000f674:	0f b6 d2             	movzx  edx,dl
c000f677:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f67b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f67f:	88 82 40 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42c0],al
c000f685:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f68a:	e9 d9 02 00 00       	jmp    c000f968 <scanMADT()+0x494>
c000f68f:	90                   	nop
c000f690:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f695:	83 f8 01             	cmp    eax,0x1
c000f698:	0f 85 1a 01 00 00    	jne    c000f7b8 <scanMADT()+0x2e4>
c000f69e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6a2:	8d 50 01             	lea    edx,[eax+0x1]
c000f6a5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f6a9:	8a 15 e0 bb 02 c0    	mov    dl,BYTE PTR ds:0xc002bbe0
c000f6af:	0f b6 d2             	movzx  edx,dl
c000f6b2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f6b6:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f6ba:	88 82 00 bc 02 c0    	mov    BYTE PTR [edx-0x3ffd4400],al
c000f6c0:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f6c5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f6c9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6cd:	01 d0                	add    eax,edx
c000f6cf:	83 c0 2c             	add    eax,0x2c
c000f6d2:	8a 00                	mov    al,BYTE PTR [eax]
c000f6d4:	0f b6 d0             	movzx  edx,al
c000f6d7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6db:	8d 48 01             	lea    ecx,[eax+0x1]
c000f6de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6e2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f6e6:	0f b6 c0             	movzx  eax,al
c000f6e9:	c1 e0 08             	shl    eax,0x8
c000f6ec:	89 d1                	mov    ecx,edx
c000f6ee:	09 c1                	or     ecx,eax
c000f6f0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6f4:	8d 50 02             	lea    edx,[eax+0x2]
c000f6f7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6fb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f6ff:	0f b6 c0             	movzx  eax,al
c000f702:	c1 e0 10             	shl    eax,0x10
c000f705:	09 c1                	or     ecx,eax
c000f707:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f70b:	8d 50 03             	lea    edx,[eax+0x3]
c000f70e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f712:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f716:	0f b6 c0             	movzx  eax,al
c000f719:	c1 e0 18             	shl    eax,0x18
c000f71c:	09 c1                	or     ecx,eax
c000f71e:	89 ca                	mov    edx,ecx
c000f720:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f725:	0f b6 c0             	movzx  eax,al
c000f728:	89 14 85 20 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd43e0],edx
c000f72f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f734:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f738:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f73c:	01 d0                	add    eax,edx
c000f73e:	83 c0 2c             	add    eax,0x2c
c000f741:	8a 00                	mov    al,BYTE PTR [eax]
c000f743:	0f b6 d0             	movzx  edx,al
c000f746:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f74a:	8d 48 01             	lea    ecx,[eax+0x1]
c000f74d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f751:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f755:	0f b6 c0             	movzx  eax,al
c000f758:	c1 e0 08             	shl    eax,0x8
c000f75b:	89 d1                	mov    ecx,edx
c000f75d:	09 c1                	or     ecx,eax
c000f75f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f763:	8d 50 02             	lea    edx,[eax+0x2]
c000f766:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f76a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f76e:	0f b6 c0             	movzx  eax,al
c000f771:	c1 e0 10             	shl    eax,0x10
c000f774:	09 c1                	or     ecx,eax
c000f776:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f77a:	8d 50 03             	lea    edx,[eax+0x3]
c000f77d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f781:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f785:	0f b6 c0             	movzx  eax,al
c000f788:	c1 e0 18             	shl    eax,0x18
c000f78b:	09 c1                	or     ecx,eax
c000f78d:	89 ca                	mov    edx,ecx
c000f78f:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f794:	0f b6 c0             	movzx  eax,al
c000f797:	89 14 85 a0 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4360],edx
c000f79e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f7a3:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f7a8:	83 c0 01             	add    eax,0x1
c000f7ab:	a2 e0 bb 02 c0       	mov    ds:0xc002bbe0,al
c000f7b0:	e9 b3 01 00 00       	jmp    c000f968 <scanMADT()+0x494>
c000f7b5:	8d 76 00             	lea    esi,[esi+0x0]
c000f7b8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f7bd:	83 f8 02             	cmp    eax,0x2
c000f7c0:	0f 85 ea 00 00 00    	jne    c000f8b0 <scanMADT()+0x3dc>
c000f7c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7ca:	8d 50 01             	lea    edx,[eax+0x1]
c000f7cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f7d1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7d5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f7d9:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f7dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7e1:	8d 50 01             	lea    edx,[eax+0x1]
c000f7e4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f7e8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7ec:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f7f0:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f7f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7f8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7fc:	01 d0                	add    eax,edx
c000f7fe:	83 c0 2c             	add    eax,0x2c
c000f801:	8a 00                	mov    al,BYTE PTR [eax]
c000f803:	0f b6 d0             	movzx  edx,al
c000f806:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f80a:	8d 48 01             	lea    ecx,[eax+0x1]
c000f80d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f811:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f815:	0f b6 c0             	movzx  eax,al
c000f818:	c1 e0 08             	shl    eax,0x8
c000f81b:	89 d1                	mov    ecx,edx
c000f81d:	09 c1                	or     ecx,eax
c000f81f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f823:	8d 50 02             	lea    edx,[eax+0x2]
c000f826:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f82a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f82e:	0f b6 c0             	movzx  eax,al
c000f831:	c1 e0 10             	shl    eax,0x10
c000f834:	09 c1                	or     ecx,eax
c000f836:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f83a:	8d 50 03             	lea    edx,[eax+0x3]
c000f83d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f841:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f845:	0f b6 c0             	movzx  eax,al
c000f848:	c1 e0 18             	shl    eax,0x18
c000f84b:	09 c8                	or     eax,ecx
c000f84d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f851:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f856:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f85a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f85e:	01 d0                	add    eax,edx
c000f860:	83 c0 2c             	add    eax,0x2c
c000f863:	8a 00                	mov    al,BYTE PTR [eax]
c000f865:	0f b6 d0             	movzx  edx,al
c000f868:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f86c:	8d 48 01             	lea    ecx,[eax+0x1]
c000f86f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f873:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f877:	0f b6 c0             	movzx  eax,al
c000f87a:	c1 e0 08             	shl    eax,0x8
c000f87d:	09 d0                	or     eax,edx
c000f87f:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f884:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f889:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f88e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f892:	88 90 48 37 02 c0    	mov    BYTE PTR [eax-0x3ffdc8b8],dl
c000f898:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f89d:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000f8a2:	66 89 94 00 c0 bb 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd4440],dx
c000f8aa:	e9 b9 00 00 00       	jmp    c000f968 <scanMADT()+0x494>
c000f8af:	90                   	nop
c000f8b0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f8b5:	83 f8 04             	cmp    eax,0x4
c000f8b8:	0f 85 9a 00 00 00    	jne    c000f958 <scanMADT()+0x484>
c000f8be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f8c2:	8d 50 01             	lea    edx,[eax+0x1]
c000f8c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f8c9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f8cd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f8d1:	0f b6 c0             	movzx  eax,al
c000f8d4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f8d8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f8dc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f8e0:	01 d0                	add    eax,edx
c000f8e2:	83 c0 2c             	add    eax,0x2c
c000f8e5:	8a 00                	mov    al,BYTE PTR [eax]
c000f8e7:	0f b6 d0             	movzx  edx,al
c000f8ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f8ee:	8d 48 01             	lea    ecx,[eax+0x1]
c000f8f1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f8f5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f8f9:	0f b6 c0             	movzx  eax,al
c000f8fc:	c1 e0 08             	shl    eax,0x8
c000f8ff:	09 d0                	or     eax,edx
c000f901:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f905:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f90a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f90e:	8d 50 01             	lea    edx,[eax+0x1]
c000f911:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f915:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f919:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f91d:	0f b6 c0             	movzx  eax,al
c000f920:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f928:	c1 e0 08             	shl    eax,0x8
c000f92b:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f92f:	89 c1                	mov    ecx,eax
c000f931:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f935:	c1 e0 18             	shl    eax,0x18
c000f938:	89 c3                	mov    ebx,eax
c000f93a:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c000f93f:	8d 50 01             	lea    edx,[eax+0x1]
c000f942:	89 15 30 bb 02 c0    	mov    DWORD PTR ds:0xc002bb30,edx
c000f948:	09 d9                	or     ecx,ebx
c000f94a:	89 ca                	mov    edx,ecx
c000f94c:	89 14 85 40 bb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd44c0],edx
c000f953:	eb 13                	jmp    c000f968 <scanMADT()+0x494>
c000f955:	8d 76 00             	lea    esi,[esi+0x0]
c000f958:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f95d:	83 f8 05             	cmp    eax,0x5
c000f960:	75 06                	jne    c000f968 <scanMADT()+0x494>
c000f962:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f967:	90                   	nop
c000f968:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f96d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f971:	01 d0                	add    eax,edx
c000f973:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f977:	e9 50 fc ff ff       	jmp    c000f5cc <scanMADT()+0xf8>
c000f97c:	90                   	nop
c000f97d:	eb 05                	jmp    c000f984 <scanMADT()+0x4b0>
c000f97f:	90                   	nop
c000f980:	90                   	nop
c000f981:	8d 76 00             	lea    esi,[esi+0x0]
c000f984:	83 c4 38             	add    esp,0x38
c000f987:	5b                   	pop    ebx
c000f988:	c3                   	ret    
c000f989:	90                   	nop
c000f98a:	66 90                	xchg   ax,ax

c000f98c <ACPI::ACPI()>:
c000f98c:	83 ec 0c             	sub    esp,0xc
c000f98f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f993:	83 ec 08             	sub    esp,0x8
c000f996:	68 51 20 02 c0       	push   0xc0022051
c000f99b:	50                   	push   eax
c000f99c:	e8 3b d2 ff ff       	call   c000cbdc <Device::Device(char const*)>
c000f9a1:	83 c4 10             	add    esp,0x10
c000f9a4:	ba a4 21 02 c0       	mov    edx,0xc00221a4
c000f9a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9ad:	89 10                	mov    DWORD PTR [eax],edx
c000f9af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9b3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f9ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9be:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f9c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9cc:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f9d6:	e8 f9 fa ff ff       	call   c000f4d4 <scanMADT()>
c000f9db:	90                   	nop
c000f9dc:	83 c4 0c             	add    esp,0xc
c000f9df:	c3                   	ret    

c000f9e0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f9e0:	83 ec 2c             	sub    esp,0x2c
c000f9e3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f9e7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f9eb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000f9ef:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000f9f3:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f9f8:	88 c8                	mov    al,cl
c000f9fa:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f9fe:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000fa03:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000fa0b:	90                   	nop
c000fa0c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa10:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fa16:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000fa1a:	0f 8d b0 00 00 00    	jge    c000fad0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000fa20:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa24:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa28:	83 c2 2a             	add    edx,0x2a
c000fa2b:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000fa2f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000fa34:	0f b7 c0             	movzx  eax,ax
c000fa37:	39 c2                	cmp    edx,eax
c000fa39:	0f 85 85 00 00 00    	jne    c000fac4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000fa3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa43:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa47:	83 c2 2a             	add    edx,0x2a
c000fa4a:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000fa4e:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000fa53:	0f b6 c0             	movzx  eax,al
c000fa56:	39 c2                	cmp    edx,eax
c000fa58:	75 6a                	jne    c000fac4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000fa5a:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000fa5f:	85 c0                	test   eax,eax
c000fa61:	74 3d                	je     c000faa0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000fa63:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa67:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa6b:	83 c2 2a             	add    edx,0x2a
c000fa6e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000fa72:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fa76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fa79:	39 c2                	cmp    edx,eax
c000fa7b:	74 13                	je     c000fa90 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000fa7d:	83 ec 0c             	sub    esp,0xc
c000fa80:	68 cc 1f 02 c0       	push   0xc0021fcc
c000fa85:	e8 81 1b 00 00       	call   c001160b <KePanic(char const*)>
c000fa8a:	83 c4 10             	add    esp,0x10
c000fa8d:	8d 76 00             	lea    esi,[esi+0x0]
c000fa90:	83 ec 0c             	sub    esp,0xc
c000fa93:	68 56 20 02 c0       	push   0xc0022056
c000fa98:	e8 6e 1b 00 00       	call   c001160b <KePanic(char const*)>
c000fa9d:	83 c4 10             	add    esp,0x10
c000faa0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000faa4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000faa8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000faac:	83 c2 2a             	add    edx,0x2a
c000faaf:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000fab3:	8b 02                	mov    eax,DWORD PTR [edx]
c000fab5:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000fab8:	89 01                	mov    DWORD PTR [ecx],eax
c000faba:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000fabd:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fac2:	66 90                	xchg   ax,ax
c000fac4:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000fac9:	e9 3e ff ff ff       	jmp    c000fa0c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000face:	66 90                	xchg   ax,ax
c000fad0:	90                   	nop
c000fad1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fad5:	83 c4 2c             	add    esp,0x2c
c000fad8:	c2 04 00             	ret    0x4
c000fadb:	90                   	nop

c000fadc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000fadc:	83 ec 1c             	sub    esp,0x1c
c000fadf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fae3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000fae7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000faeb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000faf0:	88 c8                	mov    al,cl
c000faf2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000faf6:	88 d0                	mov    al,dl
c000faf8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000fafc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb00:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fb06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb0a:	83 c2 2a             	add    edx,0x2a
c000fb0d:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000fb11:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000fb15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb19:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fb1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb23:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fb26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fb2a:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000fb2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb33:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fb39:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000fb3d:	83 c0 01             	add    eax,0x1
c000fb40:	88 c1                	mov    cl,al
c000fb42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb46:	83 c2 2a             	add    edx,0x2a
c000fb49:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000fb4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb51:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fb57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb5b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fb5e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fb62:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000fb66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb6a:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fb70:	8d 50 01             	lea    edx,[eax+0x1]
c000fb73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb77:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000fb7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb81:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fb87:	3d 00 02 00 00       	cmp    eax,0x200
c000fb8c:	75 12                	jne    c000fba0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000fb8e:	83 ec 0c             	sub    esp,0xc
c000fb91:	68 65 20 02 c0       	push   0xc0022065
c000fb96:	e8 70 1a 00 00       	call   c001160b <KePanic(char const*)>
c000fb9b:	83 c4 10             	add    esp,0x10
c000fb9e:	66 90                	xchg   ax,ax
c000fba0:	90                   	nop
c000fba1:	83 c4 1c             	add    esp,0x1c
c000fba4:	c3                   	ret    
c000fba5:	90                   	nop
c000fba6:	66 90                	xchg   ax,ax

c000fba8 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000fba8:	b8 00 00 00 00       	mov    eax,0x0
c000fbad:	c3                   	ret    
c000fbae:	66 90                	xchg   ax,ax

c000fbb0 <ACPI::detectPCI()>:
c000fbb0:	53                   	push   ebx
c000fbb1:	83 ec 28             	sub    esp,0x28
c000fbb4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000fbb9:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000fbbe:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fbc3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fbc9:	83 e0 04             	and    eax,0x4
c000fbcc:	0f b6 c0             	movzx  eax,al
c000fbcf:	85 c0                	test   eax,eax
c000fbd1:	74 2d                	je     c000fc00 <ACPI::detectPCI()+0x50>
c000fbd3:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000fbd8:	83 ec 08             	sub    esp,0x8
c000fbdb:	68 82 20 02 c0       	push   0xc0022082
c000fbe0:	50                   	push   eax
c000fbe1:	e8 6e f8 ff ff       	call   c000f454 <findDataTable(unsigned char*, char*)>
c000fbe6:	83 c4 10             	add    esp,0x10
c000fbe9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fbed:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000fbf2:	74 0c                	je     c000fc00 <ACPI::detectPCI()+0x50>
c000fbf4:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fbf9:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fbfe:	66 90                	xchg   ax,ax
c000fc00:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000fc08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc0c:	8a 00                	mov    al,BYTE PTR [eax]
c000fc0e:	0f b6 c0             	movzx  eax,al
c000fc11:	83 f8 01             	cmp    eax,0x1
c000fc14:	75 0e                	jne    c000fc24 <ACPI::detectPCI()+0x74>
c000fc16:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc1b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fc20:	eb 2e                	jmp    c000fc50 <ACPI::detectPCI()+0xa0>
c000fc22:	66 90                	xchg   ax,ax
c000fc24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc28:	8a 00                	mov    al,BYTE PTR [eax]
c000fc2a:	0f b6 c0             	movzx  eax,al
c000fc2d:	83 f8 02             	cmp    eax,0x2
c000fc30:	75 1e                	jne    c000fc50 <ACPI::detectPCI()+0xa0>
c000fc32:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc37:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fc3c:	85 c0                	test   eax,eax
c000fc3e:	74 10                	je     c000fc50 <ACPI::detectPCI()+0xa0>
c000fc40:	83 ec 0c             	sub    esp,0xc
c000fc43:	68 fc 1f 02 c0       	push   0xc0021ffc
c000fc48:	e8 be 19 00 00       	call   c001160b <KePanic(char const*)>
c000fc4d:	83 c4 10             	add    esp,0x10
c000fc50:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000fc54:	83 f0 01             	xor    eax,0x1
c000fc57:	0f b6 c0             	movzx  eax,al
c000fc5a:	85 c0                	test   eax,eax
c000fc5c:	74 46                	je     c000fca4 <ACPI::detectPCI()+0xf4>
c000fc5e:	e8 cd 04 ff ff       	call   c0000130 <manualPCIProbe>
c000fc63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fc67:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000fc6c:	75 0e                	jne    c000fc7c <ACPI::detectPCI()+0xcc>
c000fc6e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc73:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fc78:	eb 2a                	jmp    c000fca4 <ACPI::detectPCI()+0xf4>
c000fc7a:	66 90                	xchg   ax,ax
c000fc7c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000fc81:	75 21                	jne    c000fca4 <ACPI::detectPCI()+0xf4>
c000fc83:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc88:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fc8d:	85 c0                	test   eax,eax
c000fc8f:	74 13                	je     c000fca4 <ACPI::detectPCI()+0xf4>
c000fc91:	83 ec 0c             	sub    esp,0xc
c000fc94:	68 fc 1f 02 c0       	push   0xc0021ffc
c000fc99:	e8 6d 19 00 00       	call   c001160b <KePanic(char const*)>
c000fc9e:	83 c4 10             	add    esp,0x10
c000fca1:	8d 76 00             	lea    esi,[esi+0x0]
c000fca4:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000fca9:	85 c0                	test   eax,eax
c000fcab:	0f 84 87 00 00 00    	je     c000fd38 <ACPI::detectPCI()+0x188>
c000fcb1:	83 ec 0c             	sub    esp,0xc
c000fcb4:	68 87 20 02 c0       	push   0xc0022087
c000fcb9:	e8 4f 12 00 00       	call   c0010f0d <KeSetBootMessage(char const*)>
c000fcbe:	83 c4 10             	add    esp,0x10
c000fcc1:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000fcc9:	83 ec 0c             	sub    esp,0xc
c000fccc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fcd0:	e8 fe 7d ff ff       	call   c0007ad3 <malloc>
c000fcd5:	83 c4 10             	add    esp,0x10
c000fcd8:	89 c3                	mov    ebx,eax
c000fcda:	83 ec 0c             	sub    esp,0xc
c000fcdd:	53                   	push   ebx
c000fcde:	e8 ff b4 00 00       	call   c001b1e2 <PCI::PCI()>
c000fce3:	83 c4 10             	add    esp,0x10
c000fce6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000fcea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fcee:	83 ec 08             	sub    esp,0x8
c000fcf1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fcf5:	50                   	push   eax
c000fcf6:	e8 49 cd ff ff       	call   c000ca44 <Device::addChild(Device*)>
c000fcfb:	83 c4 10             	add    esp,0x10
c000fcfe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fd02:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd04:	83 c0 08             	add    eax,0x8
c000fd07:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd09:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000fd0e:	85 d2                	test   edx,edx
c000fd10:	74 0a                	je     c000fd1c <ACPI::detectPCI()+0x16c>
c000fd12:	ba 01 00 00 00       	mov    edx,0x1
c000fd17:	eb 0b                	jmp    c000fd24 <ACPI::detectPCI()+0x174>
c000fd19:	8d 76 00             	lea    esi,[esi+0x0]
c000fd1c:	ba 02 00 00 00       	mov    edx,0x2
c000fd21:	8d 76 00             	lea    esi,[esi+0x0]
c000fd24:	6a 00                	push   0x0
c000fd26:	6a 00                	push   0x0
c000fd28:	52                   	push   edx
c000fd29:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fd2d:	ff d0                	call   eax
c000fd2f:	83 c4 10             	add    esp,0x10
c000fd32:	e9 91 00 00 00       	jmp    c000fdc8 <ACPI::detectPCI()+0x218>
c000fd37:	90                   	nop
c000fd38:	83 ec 0c             	sub    esp,0xc
c000fd3b:	68 9f 20 02 c0       	push   0xc002209f
c000fd40:	e8 c8 11 00 00       	call   c0010f0d <KeSetBootMessage(char const*)>
c000fd45:	83 c4 10             	add    esp,0x10
c000fd48:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000fd4f:	83 ec 0c             	sub    esp,0xc
c000fd52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fd56:	e8 78 7d ff ff       	call   c0007ad3 <malloc>
c000fd5b:	83 c4 10             	add    esp,0x10
c000fd5e:	89 c3                	mov    ebx,eax
c000fd60:	83 ec 0c             	sub    esp,0xc
c000fd63:	53                   	push   ebx
c000fd64:	e8 21 c0 00 00       	call   c001bd8a <IDE::IDE()>
c000fd69:	83 c4 10             	add    esp,0x10
c000fd6c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fd70:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fd74:	83 ec 08             	sub    esp,0x8
c000fd77:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fd7b:	50                   	push   eax
c000fd7c:	e8 c3 cc ff ff       	call   c000ca44 <Device::addChild(Device*)>
c000fd81:	83 c4 10             	add    esp,0x10
c000fd84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd88:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000fd92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd96:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000fd9f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fda3:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000fdac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fdb0:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdb2:	83 c0 08             	add    eax,0x8
c000fdb5:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdb7:	6a 00                	push   0x0
c000fdb9:	6a 00                	push   0x0
c000fdbb:	6a 00                	push   0x0
c000fdbd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fdc1:	ff d0                	call   eax
c000fdc3:	83 c4 10             	add    esp,0x10
c000fdc6:	66 90                	xchg   ax,ax
c000fdc8:	90                   	nop
c000fdc9:	83 c4 28             	add    esp,0x28
c000fdcc:	5b                   	pop    ebx
c000fdcd:	c3                   	ret    
c000fdce:	66 90                	xchg   ax,ax

c000fdd0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000fdd0:	83 ec 1c             	sub    esp,0x1c
c000fdd3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fdd7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fdda:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fdde:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fde3:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fde8:	83 ec 08             	sub    esp,0x8
c000fdeb:	52                   	push   edx
c000fdec:	50                   	push   eax
c000fded:	e8 a8 73 ff ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c000fdf2:	83 c4 10             	add    esp,0x10
c000fdf5:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000fdf9:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fdfe:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fe03:	83 ec 04             	sub    esp,0x4
c000fe06:	6a 01                	push   0x1
c000fe08:	52                   	push   edx
c000fe09:	50                   	push   eax
c000fe0a:	e8 a3 74 ff ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c000fe0f:	83 c4 10             	add    esp,0x10
c000fe12:	90                   	nop
c000fe13:	83 c4 1c             	add    esp,0x1c
c000fe16:	c3                   	ret    
c000fe17:	90                   	nop

c000fe18 <ACPI::sleep()>:
c000fe18:	83 ec 0c             	sub    esp,0xc
c000fe1b:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fe20:	85 c0                	test   eax,eax
c000fe22:	74 08                	je     c000fe2c <ACPI::sleep()+0x14>
c000fe24:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fe29:	ff d0                	call   eax
c000fe2b:	90                   	nop
c000fe2c:	90                   	nop
c000fe2d:	83 c4 0c             	add    esp,0xc
c000fe30:	c3                   	ret    
c000fe31:	90                   	nop
c000fe32:	66 90                	xchg   ax,ax

c000fe34 <ACPI::open(int, int, void*)>:
c000fe34:	55                   	push   ebp
c000fe35:	89 e5                	mov    ebp,esp
c000fe37:	53                   	push   ebx
c000fe38:	81 ec 74 01 00 00    	sub    esp,0x174
c000fe3e:	83 ec 0c             	sub    esp,0xc
c000fe41:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fe44:	e8 67 fd ff ff       	call   c000fbb0 <ACPI::detectPCI()>
c000fe49:	83 c4 10             	add    esp,0x10
c000fe4c:	83 ec 0c             	sub    esp,0xc
c000fe4f:	68 24 20 02 c0       	push   0xc0022024
c000fe54:	e8 b4 10 00 00       	call   c0010f0d <KeSetBootMessage(char const*)>
c000fe59:	83 c4 10             	add    esp,0x10
c000fe5c:	b8 4c 05 00 00       	mov    eax,0x54c
c000fe61:	8a 00                	mov    al,BYTE PTR [eax]
c000fe63:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000fe66:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fe6a:	83 f8 01             	cmp    eax,0x1
c000fe6d:	75 15                	jne    c000fe84 <ACPI::open(int, int, void*)+0x50>
c000fe6f:	83 ec 0c             	sub    esp,0xc
c000fe72:	68 5e 19 02 c0       	push   0xc002195e
c000fe77:	e8 8b 4d 00 00       	call   c0014c07 <Thr::loadKernelSymbolTable(char const*)>
c000fe7c:	83 c4 10             	add    esp,0x10
c000fe7f:	eb 33                	jmp    c000feb4 <ACPI::open(int, int, void*)+0x80>
c000fe81:	8d 76 00             	lea    esi,[esi+0x0]
c000fe84:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fe88:	3d bb 00 00 00       	cmp    eax,0xbb
c000fe8d:	75 15                	jne    c000fea4 <ACPI::open(int, int, void*)+0x70>
c000fe8f:	83 ec 0c             	sub    esp,0xc
c000fe92:	68 b4 20 02 c0       	push   0xc00220b4
c000fe97:	e8 6b 4d 00 00       	call   c0014c07 <Thr::loadKernelSymbolTable(char const*)>
c000fe9c:	83 c4 10             	add    esp,0x10
c000fe9f:	eb 13                	jmp    c000feb4 <ACPI::open(int, int, void*)+0x80>
c000fea1:	8d 76 00             	lea    esi,[esi+0x0]
c000fea4:	83 ec 0c             	sub    esp,0xc
c000fea7:	68 d2 20 02 c0       	push   0xc00220d2
c000feac:	e8 5a 17 00 00       	call   c001160b <KePanic(char const*)>
c000feb1:	83 c4 10             	add    esp,0x10
c000feb4:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000feb8:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000febf:	83 ec 0c             	sub    esp,0xc
c000fec2:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000fec5:	e8 09 7c ff ff       	call   c0007ad3 <malloc>
c000feca:	83 c4 10             	add    esp,0x10
c000fecd:	89 c3                	mov    ebx,eax
c000fecf:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000fed4:	83 ec 04             	sub    esp,0x4
c000fed7:	50                   	push   eax
c000fed8:	68 ec 20 02 c0       	push   0xc00220ec
c000fedd:	53                   	push   ebx
c000fede:	e8 e1 bc ff ff       	call   c000bbc4 <File::File(char const*, Process*)>
c000fee3:	83 c4 10             	add    esp,0x10
c000fee6:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000fee9:	83 ec 08             	sub    esp,0x8
c000feec:	6a 01                	push   0x1
c000feee:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fef1:	e8 ec bc ff ff       	call   c000bbe2 <File::open(FileOpenMode)>
c000fef6:	83 c4 10             	add    esp,0x10
c000fef9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000fefc:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000ff00:	75 12                	jne    c000ff14 <ACPI::open(int, int, void*)+0xe0>
c000ff02:	83 ec 0c             	sub    esp,0xc
c000ff05:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000ff08:	e8 33 bd ff ff       	call   c000bc40 <File::close()>
c000ff0d:	83 c4 10             	add    esp,0x10
c000ff10:	eb 06                	jmp    c000ff18 <ACPI::open(int, int, void*)+0xe4>
c000ff12:	66 90                	xchg   ax,ax
c000ff14:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ff18:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000ff1c:	74 16                	je     c000ff34 <ACPI::open(int, int, void*)+0x100>
c000ff1e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000ff21:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff23:	83 c0 08             	add    eax,0x8
c000ff26:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff28:	83 ec 0c             	sub    esp,0xc
c000ff2b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000ff2e:	ff d0                	call   eax
c000ff30:	83 c4 10             	add    esp,0x10
c000ff33:	90                   	nop
c000ff34:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000ff37:	83 f0 01             	xor    eax,0x1
c000ff3a:	0f b6 c0             	movzx  eax,al
c000ff3d:	85 c0                	test   eax,eax
c000ff3f:	74 3b                	je     c000ff7c <ACPI::open(int, int, void*)+0x148>
c000ff41:	83 ec 0c             	sub    esp,0xc
c000ff44:	68 0a 21 02 c0       	push   0xc002210a
c000ff49:	e8 bf 0f 00 00       	call   c0010f0d <KeSetBootMessage(char const*)>
c000ff4e:	83 c4 10             	add    esp,0x10
c000ff51:	83 ec 04             	sub    esp,0x4
c000ff54:	6a 0c                	push   0xc
c000ff56:	68 25 21 02 c0       	push   0xc0022125
c000ff5b:	68 36 21 02 c0       	push   0xc0022136
c000ff60:	e8 21 3f 00 00       	call   c0013e86 <Reg::readIntWithDefault(char*, char*, int)>
c000ff65:	83 c4 10             	add    esp,0x10
c000ff68:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000ff6b:	83 ec 0c             	sub    esp,0xc
c000ff6e:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000ff71:	e8 a4 98 ff ff       	call   c000981a <Virt::setupPageSwapping(int)>
c000ff76:	83 c4 10             	add    esp,0x10
c000ff79:	8d 76 00             	lea    esi,[esi+0x0]
c000ff7c:	83 ec 0c             	sub    esp,0xc
c000ff7f:	68 95 0b 02 c0       	push   0xc0020b95
c000ff84:	e8 84 0f 00 00       	call   c0010f0d <KeSetBootMessage(char const*)>
c000ff89:	83 c4 10             	add    esp,0x10
c000ff8c:	8d 45 b8             	lea    eax,[ebp-0x48]
c000ff8f:	83 ec 08             	sub    esp,0x8
c000ff92:	6a 13                	push   0x13
c000ff94:	50                   	push   eax
c000ff95:	e8 c2 cd ff ff       	call   c000cd5c <getDevicesOfType(DeviceType)>
c000ff9a:	83 c4 0c             	add    esp,0xc
c000ff9d:	8d 76 00             	lea    esi,[esi+0x0]
c000ffa0:	83 ec 0c             	sub    esp,0xc
c000ffa3:	8d 45 b8             	lea    eax,[ebp-0x48]
c000ffa6:	50                   	push   eax
c000ffa7:	e8 e4 ff 00 00       	call   c001ff90 <LinkedList<Device>::isEmpty()>
c000ffac:	83 c4 10             	add    esp,0x10
c000ffaf:	83 f0 01             	xor    eax,0x1
c000ffb2:	0f b6 c0             	movzx  eax,al
c000ffb5:	85 c0                	test   eax,eax
c000ffb7:	0f 84 1f 01 00 00    	je     c00100dc <ACPI::open(int, int, void*)+0x2a8>
c000ffbd:	83 ec 0c             	sub    esp,0xc
c000ffc0:	8d 45 b8             	lea    eax,[ebp-0x48]
c000ffc3:	50                   	push   eax
c000ffc4:	e8 e3 ff 00 00       	call   c001ffac <LinkedList<Device>::getFirstElement()>
c000ffc9:	83 c4 10             	add    esp,0x10
c000ffcc:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000ffcf:	83 ec 0c             	sub    esp,0xc
c000ffd2:	8d 45 b8             	lea    eax,[ebp-0x48]
c000ffd5:	50                   	push   eax
c000ffd6:	e8 d9 ff 00 00       	call   c001ffb4 <LinkedList<Device>::removeFirst()>
c000ffdb:	83 c4 10             	add    esp,0x10
c000ffde:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000ffe1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000ffe4:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000ffe7:	b8 24 00 00 00       	mov    eax,0x24
c000ffec:	83 e0 fc             	and    eax,0xfffffffc
c000ffef:	89 c3                	mov    ebx,eax
c000fff1:	b8 00 00 00 00       	mov    eax,0x0
c000fff6:	66 90                	xchg   ax,ax
c000fff8:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000ffff:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c0010006:	83 c0 04             	add    eax,0x4
c0010009:	39 d8                	cmp    eax,ebx
c001000b:	72 eb                	jb     c000fff8 <ACPI::open(int, int, void*)+0x1c4>
c001000d:	83 ec 08             	sub    esp,0x8
c0010010:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c0010016:	50                   	push   eax
c0010017:	83 ec 24             	sub    esp,0x24
c001001a:	89 e1                	mov    ecx,esp
c001001c:	b8 24 00 00 00       	mov    eax,0x24
c0010021:	83 e0 fc             	and    eax,0xfffffffc
c0010024:	89 c3                	mov    ebx,eax
c0010026:	b8 00 00 00 00       	mov    eax,0x0
c001002b:	90                   	nop
c001002c:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c0010033:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c0010036:	83 c0 04             	add    eax,0x4
c0010039:	39 d8                	cmp    eax,ebx
c001003b:	72 ef                	jb     c001002c <ACPI::open(int, int, void*)+0x1f8>
c001003d:	e8 88 b6 00 00       	call   c001b6ca <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0010042:	83 c4 30             	add    esp,0x30
c0010045:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0010048:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c001004c:	0f 84 4e ff ff ff    	je     c000ffa0 <ACPI::open(int, int, void*)+0x16c>
c0010052:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c0010059:	83 ec 0c             	sub    esp,0xc
c001005c:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c001005f:	e8 6f 7a ff ff       	call   c0007ad3 <malloc>
c0010064:	83 c4 10             	add    esp,0x10
c0010067:	89 c3                	mov    ebx,eax
c0010069:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001006e:	83 ec 04             	sub    esp,0x4
c0010071:	50                   	push   eax
c0010072:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c0010075:	53                   	push   ebx
c0010076:	e8 49 bb ff ff       	call   c000bbc4 <File::File(char const*, Process*)>
c001007b:	83 c4 10             	add    esp,0x10
c001007e:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0010081:	83 ec 0c             	sub    esp,0xc
c0010084:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c0010087:	e8 1a be ff ff       	call   c000bea6 <File::exists()>
c001008c:	83 c4 10             	add    esp,0x10
c001008f:	0f b6 c0             	movzx  eax,al
c0010092:	85 c0                	test   eax,eax
c0010094:	74 22                	je     c00100b8 <ACPI::open(int, int, void*)+0x284>
c0010096:	83 ec 08             	sub    esp,0x8
c0010099:	6a 01                	push   0x1
c001009b:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c001009e:	e8 e6 55 00 00       	call   c0015689 <Thr::loadDLL(char const*, bool)>
c00100a3:	83 c4 10             	add    esp,0x10
c00100a6:	83 ec 08             	sub    esp,0x8
c00100a9:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00100ac:	50                   	push   eax
c00100ad:	e8 17 58 00 00       	call   c00158c9 <Thr::executeDLL(unsigned long, void*)>
c00100b2:	83 c4 10             	add    esp,0x10
c00100b5:	8d 76 00             	lea    esi,[esi+0x0]
c00100b8:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00100bc:	0f 84 de fe ff ff    	je     c000ffa0 <ACPI::open(int, int, void*)+0x16c>
c00100c2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00100c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00100c7:	83 c0 08             	add    eax,0x8
c00100ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00100cc:	83 ec 0c             	sub    esp,0xc
c00100cf:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c00100d2:	ff d0                	call   eax
c00100d4:	83 c4 10             	add    esp,0x10
c00100d7:	e9 c4 fe ff ff       	jmp    c000ffa0 <ACPI::open(int, int, void*)+0x16c>
c00100dc:	83 ec 0c             	sub    esp,0xc
c00100df:	8d 45 b8             	lea    eax,[ebp-0x48]
c00100e2:	50                   	push   eax
c00100e3:	e8 a4 fe 00 00       	call   c001ff8c <LinkedList<Device>::~LinkedList()>
c00100e8:	83 c4 10             	add    esp,0x10
c00100eb:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c00100f1:	83 ec 08             	sub    esp,0x8
c00100f4:	6a 01                	push   0x1
c00100f6:	68 3d 21 02 c0       	push   0xc002213d
c00100fb:	e8 89 55 00 00       	call   c0015689 <Thr::loadDLL(char const*, bool)>
c0010100:	83 c4 10             	add    esp,0x10
c0010103:	83 ec 08             	sub    esp,0x8
c0010106:	53                   	push   ebx
c0010107:	50                   	push   eax
c0010108:	e8 bc 57 00 00       	call   c00158c9 <Thr::executeDLL(unsigned long, void*)>
c001010d:	83 c4 10             	add    esp,0x10
c0010110:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010115:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001011b:	83 e0 04             	and    eax,0x4
c001011e:	0f b6 c0             	movzx  eax,al
c0010121:	85 c0                	test   eax,eax
c0010123:	0f 84 e3 00 00 00    	je     c001020c <ACPI::open(int, int, void*)+0x3d8>
c0010129:	83 ec 0c             	sub    esp,0xc
c001012c:	68 5a 21 02 c0       	push   0xc002215a
c0010131:	e8 d7 0d 00 00       	call   c0010f0d <KeSetBootMessage(char const*)>
c0010136:	83 c4 10             	add    esp,0x10
c0010139:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c0010140:	83 ec 0c             	sub    esp,0xc
c0010143:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c0010146:	e8 88 79 ff ff       	call   c0007ad3 <malloc>
c001014b:	83 c4 10             	add    esp,0x10
c001014e:	89 c3                	mov    ebx,eax
c0010150:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0010155:	83 ec 04             	sub    esp,0x4
c0010158:	50                   	push   eax
c0010159:	68 77 21 02 c0       	push   0xc0022177
c001015e:	53                   	push   ebx
c001015f:	e8 60 ba ff ff       	call   c000bbc4 <File::File(char const*, Process*)>
c0010164:	83 c4 10             	add    esp,0x10
c0010167:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c001016a:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c001016e:	74 1c                	je     c001018c <ACPI::open(int, int, void*)+0x358>
c0010170:	83 ec 0c             	sub    esp,0xc
c0010173:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c0010176:	e8 2b bd ff ff       	call   c000bea6 <File::exists()>
c001017b:	83 c4 10             	add    esp,0x10
c001017e:	0f b6 c0             	movzx  eax,al
c0010181:	85 c0                	test   eax,eax
c0010183:	74 07                	je     c001018c <ACPI::open(int, int, void*)+0x358>
c0010185:	b0 01                	mov    al,0x1
c0010187:	eb 07                	jmp    c0010190 <ACPI::open(int, int, void*)+0x35c>
c0010189:	8d 76 00             	lea    esi,[esi+0x0]
c001018c:	b0 00                	mov    al,0x0
c001018e:	66 90                	xchg   ax,ax
c0010190:	0f b6 c0             	movzx  eax,al
c0010193:	85 c0                	test   eax,eax
c0010195:	74 21                	je     c00101b8 <ACPI::open(int, int, void*)+0x384>
c0010197:	83 ec 08             	sub    esp,0x8
c001019a:	6a 01                	push   0x1
c001019c:	68 77 21 02 c0       	push   0xc0022177
c00101a1:	e8 e3 54 00 00       	call   c0015689 <Thr::loadDLL(char const*, bool)>
c00101a6:	83 c4 10             	add    esp,0x10
c00101a9:	83 ec 08             	sub    esp,0x8
c00101ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00101af:	50                   	push   eax
c00101b0:	e8 14 57 00 00       	call   c00158c9 <Thr::executeDLL(unsigned long, void*)>
c00101b5:	83 c4 10             	add    esp,0x10
c00101b8:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00101bc:	74 1e                	je     c00101dc <ACPI::open(int, int, void*)+0x3a8>
c00101be:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00101c2:	74 18                	je     c00101dc <ACPI::open(int, int, void*)+0x3a8>
c00101c4:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c00101c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00101c9:	83 c0 08             	add    eax,0x8
c00101cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00101ce:	83 ec 0c             	sub    esp,0xc
c00101d1:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c00101d4:	ff d0                	call   eax
c00101d6:	83 c4 10             	add    esp,0x10
c00101d9:	8d 76 00             	lea    esi,[esi+0x0]
c00101dc:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c00101e1:	83 ec 08             	sub    esp,0x8
c00101e4:	68 94 21 02 c0       	push   0xc0022194
c00101e9:	50                   	push   eax
c00101ea:	e8 65 f2 ff ff       	call   c000f454 <findDataTable(unsigned char*, char*)>
c00101ef:	83 c4 10             	add    esp,0x10
c00101f2:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00101f5:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00101f9:	74 11                	je     c001020c <ACPI::open(int, int, void*)+0x3d8>
c00101fb:	83 ec 08             	sub    esp,0x8
c00101fe:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0010201:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010204:	e8 c7 fb ff ff       	call   c000fdd0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0010209:	83 c4 10             	add    esp,0x10
c001020c:	b8 00 00 00 00       	mov    eax,0x0
c0010211:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0010214:	c9                   	leave  
c0010215:	c3                   	ret    

c0010216 <CPU::close(int, int, void*)>:
c0010216:	31 c0                	xor    eax,eax
c0010218:	c3                   	ret    
c0010219:	90                   	nop

c001021a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c001021a:	60                   	pusha  
c001021b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001021f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010223:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010227:	9c                   	pushf  
c0010228:	fa                   	cli    
c0010229:	0f 09                	wbinvd 
c001022b:	0f 30                	wrmsr  
c001022d:	9d                   	popf   
c001022e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010232:	89 02                	mov    DWORD PTR [edx],eax
c0010234:	61                   	popa   
c0010235:	c3                   	ret    

c0010236 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0010236:	60                   	pusha  
c0010237:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001023b:	9c                   	pushf  
c001023c:	fa                   	cli    
c001023d:	0f 09                	wbinvd 
c001023f:	31 c0                	xor    eax,eax
c0010241:	31 d2                	xor    edx,edx
c0010243:	0f 32                	rdmsr  
c0010245:	9d                   	popf   
c0010246:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001024a:	89 02                	mov    DWORD PTR [edx],eax
c001024c:	61                   	popa   
c001024d:	c3                   	ret    

c001024e <CPU::AMD_K6_writeback(int, int, int)>:
c001024e:	56                   	push   esi
c001024f:	53                   	push   ebx
c0010250:	83 ec 10             	sub    esp,0x10
c0010253:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0010258:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001025c:	75 5d                	jne    c00102bb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001025e:	83 f8 08             	cmp    eax,0x8
c0010261:	75 09                	jne    c001026c <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0010263:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0010268:	7e 13                	jle    c001027d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001026a:	eb 30                	jmp    c001029c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001026c:	83 f8 06             	cmp    eax,0x6
c001026f:	7c 4a                	jl     c00102bb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0010271:	83 f8 07             	cmp    eax,0x7
c0010274:	7e 07                	jle    c001027d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0010276:	83 f8 09             	cmp    eax,0x9
c0010279:	74 21                	je     c001029c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001027b:	eb 3e                	jmp    c00102bb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001027d:	8b 1d dc 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026edc
c0010283:	89 e6                	mov    esi,esp
c0010285:	56                   	push   esi
c0010286:	68 82 00 00 c0       	push   0xc0000082
c001028b:	e8 a6 ff ff ff       	call   c0010236 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0010290:	c1 eb 15             	shr    ebx,0x15
c0010293:	56                   	push   esi
c0010294:	83 e3 7e             	and    ebx,0x7e
c0010297:	6a 00                	push   0x0
c0010299:	53                   	push   ebx
c001029a:	eb 12                	jmp    c00102ae <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001029c:	89 e3                	mov    ebx,esp
c001029e:	53                   	push   ebx
c001029f:	68 82 00 00 c0       	push   0xc0000082
c00102a4:	e8 8d ff ff ff       	call   c0010236 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00102a9:	53                   	push   ebx
c00102aa:	6a 00                	push   0x0
c00102ac:	6a 00                	push   0x0
c00102ae:	68 82 00 00 c0       	push   0xc0000082
c00102b3:	e8 62 ff ff ff       	call   c001021a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00102b8:	83 c4 18             	add    esp,0x18
c00102bb:	83 c4 10             	add    esp,0x10
c00102be:	5b                   	pop    ebx
c00102bf:	5e                   	pop    esi
c00102c0:	c3                   	ret    
c00102c1:	90                   	nop

c00102c2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00102c2:	55                   	push   ebp
c00102c3:	57                   	push   edi
c00102c4:	56                   	push   esi
c00102c5:	53                   	push   ebx
c00102c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00102ca:	39 05 58 37 02 c0    	cmp    DWORD PTR ds:0xc0023758,eax
c00102d0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00102d4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00102d8:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00102dc:	75 23                	jne    c0010301 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00102de:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c00102e3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00102e7:	89 06                	mov    DWORD PTR [esi],eax
c00102e9:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c00102ee:	89 07                	mov    DWORD PTR [edi],eax
c00102f0:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c00102f5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00102f8:	a1 80 bd 02 c0       	mov    eax,ds:0xc002bd80
c00102fd:	89 02                	mov    DWORD PTR [edx],eax
c00102ff:	eb 3f                	jmp    c0010340 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0010301:	31 c9                	xor    ecx,ecx
c0010303:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010307:	0f a2                	cpuid  
c0010309:	89 06                	mov    DWORD PTR [esi],eax
c001030b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001030f:	89 1f                	mov    DWORD PTR [edi],ebx
c0010311:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0010314:	89 10                	mov    DWORD PTR [eax],edx
c0010316:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001031a:	a3 58 37 02 c0       	mov    ds:0xc0023758,eax
c001031f:	8b 06                	mov    eax,DWORD PTR [esi]
c0010321:	a3 8c bd 02 c0       	mov    ds:0xc002bd8c,eax
c0010326:	8b 07                	mov    eax,DWORD PTR [edi]
c0010328:	a3 88 bd 02 c0       	mov    ds:0xc002bd88,eax
c001032d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010330:	a3 84 bd 02 c0       	mov    ds:0xc002bd84,eax
c0010335:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010339:	8b 00                	mov    eax,DWORD PTR [eax]
c001033b:	a3 80 bd 02 c0       	mov    ds:0xc002bd80,eax
c0010340:	5b                   	pop    ebx
c0010341:	5e                   	pop    esi
c0010342:	5f                   	pop    edi
c0010343:	5d                   	pop    ebp
c0010344:	c3                   	ret    
c0010345:	90                   	nop

c0010346 <CPU::cpuidCheckEDX(unsigned int)>:
c0010346:	83 ec 10             	sub    esp,0x10
c0010349:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001034d:	50                   	push   eax
c001034e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010352:	50                   	push   eax
c0010353:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010357:	50                   	push   eax
c0010358:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001035c:	50                   	push   eax
c001035d:	6a 01                	push   0x1
c001035f:	e8 5e ff ff ff       	call   c00102c2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010364:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010368:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001036c:	0f 95 c0             	setne  al
c001036f:	83 c4 24             	add    esp,0x24
c0010372:	c3                   	ret    
c0010373:	90                   	nop

c0010374 <CPU::cpuidCheckECX(unsigned int)>:
c0010374:	83 ec 10             	sub    esp,0x10
c0010377:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001037b:	50                   	push   eax
c001037c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010380:	50                   	push   eax
c0010381:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010385:	50                   	push   eax
c0010386:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001038a:	50                   	push   eax
c001038b:	6a 01                	push   0x1
c001038d:	e8 30 ff ff ff       	call   c00102c2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010392:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010396:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001039a:	0f 95 c0             	setne  al
c001039d:	83 c4 24             	add    esp,0x24
c00103a0:	c3                   	ret    
c00103a1:	90                   	nop

c00103a2 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00103a2:	83 ec 10             	sub    esp,0x10
c00103a5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103a9:	50                   	push   eax
c00103aa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103ae:	50                   	push   eax
c00103af:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103b3:	50                   	push   eax
c00103b4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103b8:	50                   	push   eax
c00103b9:	6a 07                	push   0x7
c00103bb:	e8 02 ff ff ff       	call   c00102c2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00103c0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00103c4:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00103c8:	0f 95 c0             	setne  al
c00103cb:	83 c4 24             	add    esp,0x24
c00103ce:	c3                   	ret    
c00103cf:	90                   	nop

c00103d0 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00103d0:	83 ec 10             	sub    esp,0x10
c00103d3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103d7:	50                   	push   eax
c00103d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103dc:	50                   	push   eax
c00103dd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103e1:	50                   	push   eax
c00103e2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103e6:	50                   	push   eax
c00103e7:	6a 07                	push   0x7
c00103e9:	e8 d4 fe ff ff       	call   c00102c2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00103ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00103f2:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00103f6:	0f 95 c0             	setne  al
c00103f9:	83 c4 24             	add    esp,0x24
c00103fc:	c3                   	ret    
c00103fd:	90                   	nop

c00103fe <CPU::CPU()>:
c00103fe:	83 ec 0c             	sub    esp,0xc
c0010401:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010405:	83 ec 08             	sub    esp,0x8
c0010408:	68 b9 22 02 c0       	push   0xc00222b9
c001040d:	50                   	push   eax
c001040e:	e8 c9 c7 ff ff       	call   c000cbdc <Device::Device(char const*)>
c0010413:	83 c4 10             	add    esp,0x10
c0010416:	ba 4c 23 02 c0       	mov    edx,0xc002234c
c001041b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001041f:	89 10                	mov    DWORD PTR [eax],edx
c0010421:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010425:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001042f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010433:	05 78 01 00 00       	add    eax,0x178
c0010438:	83 ec 0c             	sub    esp,0xc
c001043b:	50                   	push   eax
c001043c:	e8 3b 6f ff ff       	call   c000737c <GDT::GDT()>
c0010441:	83 c4 10             	add    esp,0x10
c0010444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010448:	05 7c 09 00 00       	add    eax,0x97c
c001044d:	83 ec 0c             	sub    esp,0xc
c0010450:	50                   	push   eax
c0010451:	e8 76 71 ff ff       	call   c00075cc <IDT::IDT()>
c0010456:	83 c4 10             	add    esp,0x10
c0010459:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001045d:	05 7c 11 00 00       	add    eax,0x117c
c0010462:	83 ec 0c             	sub    esp,0xc
c0010465:	50                   	push   eax
c0010466:	e8 c1 8a ff ff       	call   c0008f2c <TSS::TSS()>
c001046b:	83 c4 10             	add    esp,0x10
c001046e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010472:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c0010479:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001047d:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c0010487:	90                   	nop
c0010488:	83 c4 0c             	add    esp,0xc
c001048b:	c3                   	ret    

c001048c <CPU::displayFeatures()>:
c001048c:	c3                   	ret    
c001048d:	90                   	nop

c001048e <CPU::detectFeatures()>:
c001048e:	55                   	push   ebp
c001048f:	57                   	push   edi
c0010490:	56                   	push   esi
c0010491:	53                   	push   ebx
c0010492:	83 ec 30             	sub    esp,0x30
c0010495:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010499:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c00104a3:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c00104a9:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c00104b0:	6a 0d                	push   0xd
c00104b2:	6a 00                	push   0x0
c00104b4:	55                   	push   ebp
c00104b5:	e8 36 00 ff ff       	call   c00004f0 <memset>
c00104ba:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00104bf:	83 c4 10             	add    esp,0x10
c00104c2:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c00104c9:	0f 84 db 05 00 00    	je     c0010aaa <CPU::detectFeatures()+0x61c>
c00104cf:	83 ec 0c             	sub    esp,0xc
c00104d2:	89 ef                	mov    edi,ebp
c00104d4:	6a 10                	push   0x10
c00104d6:	e8 6b fe ff ff       	call   c0010346 <CPU::cpuidCheckEDX(unsigned int)>
c00104db:	83 e0 01             	and    eax,0x1
c00104de:	8d 14 00             	lea    edx,[eax+eax*1]
c00104e1:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00104e7:	83 e0 fd             	and    eax,0xfffffffd
c00104ea:	09 d0                	or     eax,edx
c00104ec:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00104f2:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00104f9:	e8 48 fe ff ff       	call   c0010346 <CPU::cpuidCheckEDX(unsigned int)>
c00104fe:	83 e0 01             	and    eax,0x1
c0010501:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010508:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001050e:	83 e0 fb             	and    eax,0xfffffffb
c0010511:	09 d0                	or     eax,edx
c0010513:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010519:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0010520:	e8 21 fe ff ff       	call   c0010346 <CPU::cpuidCheckEDX(unsigned int)>
c0010525:	83 e0 01             	and    eax,0x1
c0010528:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001052f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010535:	83 e0 f7             	and    eax,0xfffffff7
c0010538:	09 d0                	or     eax,edx
c001053a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010540:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0010547:	e8 fa fd ff ff       	call   c0010346 <CPU::cpuidCheckEDX(unsigned int)>
c001054c:	83 e0 01             	and    eax,0x1
c001054f:	c1 e0 04             	shl    eax,0x4
c0010552:	89 c2                	mov    edx,eax
c0010554:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001055a:	83 e0 ef             	and    eax,0xffffffef
c001055d:	09 d0                	or     eax,edx
c001055f:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010565:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001056c:	e8 d5 fd ff ff       	call   c0010346 <CPU::cpuidCheckEDX(unsigned int)>
c0010571:	83 e0 01             	and    eax,0x1
c0010574:	c1 e0 05             	shl    eax,0x5
c0010577:	89 c2                	mov    edx,eax
c0010579:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001057f:	83 e0 df             	and    eax,0xffffffdf
c0010582:	09 d0                	or     eax,edx
c0010584:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001058a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0010591:	e8 b0 fd ff ff       	call   c0010346 <CPU::cpuidCheckEDX(unsigned int)>
c0010596:	83 e0 01             	and    eax,0x1
c0010599:	8d 14 00             	lea    edx,[eax+eax*1]
c001059c:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00105a2:	83 e0 fd             	and    eax,0xfffffffd
c00105a5:	09 d0                	or     eax,edx
c00105a7:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00105ad:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00105b4:	e8 8d fd ff ff       	call   c0010346 <CPU::cpuidCheckEDX(unsigned int)>
c00105b9:	83 e0 01             	and    eax,0x1
c00105bc:	c1 e0 06             	shl    eax,0x6
c00105bf:	89 c2                	mov    edx,eax
c00105c1:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00105c7:	83 e0 bf             	and    eax,0xffffffbf
c00105ca:	09 d0                	or     eax,edx
c00105cc:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00105d2:	58                   	pop    eax
c00105d3:	8d 44 24 28          	lea    eax,[esp+0x28]
c00105d7:	50                   	push   eax
c00105d8:	8d 44 24 28          	lea    eax,[esp+0x28]
c00105dc:	50                   	push   eax
c00105dd:	8d 74 24 28          	lea    esi,[esp+0x28]
c00105e1:	56                   	push   esi
c00105e2:	8d 44 24 28          	lea    eax,[esp+0x28]
c00105e6:	50                   	push   eax
c00105e7:	6a 00                	push   0x0
c00105e9:	e8 d4 fc ff ff       	call   c00102c2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00105ee:	b8 04 00 00 00       	mov    eax,0x4
c00105f3:	89 c1                	mov    ecx,eax
c00105f5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00105f7:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c00105fd:	89 c1                	mov    ecx,eax
c00105ff:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0010603:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010605:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c001060b:	89 c1                	mov    ecx,eax
c001060d:	8d 74 24 38          	lea    esi,[esp+0x38]
c0010611:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010613:	83 c4 18             	add    esp,0x18
c0010616:	68 c8 21 02 c0       	push   0xc00221c8
c001061b:	55                   	push   ebp
c001061c:	e8 5f 01 ff ff       	call   c0000780 <strcmp>
c0010621:	83 c4 10             	add    esp,0x10
c0010624:	85 c0                	test   eax,eax
c0010626:	75 0f                	jne    c0010637 <CPU::detectFeatures()+0x1a9>
c0010628:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0010632:	e9 22 02 00 00       	jmp    c0010859 <CPU::detectFeatures()+0x3cb>
c0010637:	50                   	push   eax
c0010638:	50                   	push   eax
c0010639:	68 d5 21 02 c0       	push   0xc00221d5
c001063e:	55                   	push   ebp
c001063f:	e8 3c 01 ff ff       	call   c0000780 <strcmp>
c0010644:	83 c4 10             	add    esp,0x10
c0010647:	85 c0                	test   eax,eax
c0010649:	74 dd                	je     c0010628 <CPU::detectFeatures()+0x19a>
c001064b:	50                   	push   eax
c001064c:	50                   	push   eax
c001064d:	68 e2 21 02 c0       	push   0xc00221e2
c0010652:	55                   	push   ebp
c0010653:	e8 28 01 ff ff       	call   c0000780 <strcmp>
c0010658:	83 c4 10             	add    esp,0x10
c001065b:	85 c0                	test   eax,eax
c001065d:	74 2a                	je     c0010689 <CPU::detectFeatures()+0x1fb>
c001065f:	50                   	push   eax
c0010660:	50                   	push   eax
c0010661:	68 ef 21 02 c0       	push   0xc00221ef
c0010666:	55                   	push   ebp
c0010667:	e8 14 01 ff ff       	call   c0000780 <strcmp>
c001066c:	83 c4 10             	add    esp,0x10
c001066f:	85 c0                	test   eax,eax
c0010671:	74 16                	je     c0010689 <CPU::detectFeatures()+0x1fb>
c0010673:	50                   	push   eax
c0010674:	50                   	push   eax
c0010675:	68 fc 21 02 c0       	push   0xc00221fc
c001067a:	55                   	push   ebp
c001067b:	e8 00 01 ff ff       	call   c0000780 <strcmp>
c0010680:	83 c4 10             	add    esp,0x10
c0010683:	85 c0                	test   eax,eax
c0010685:	74 48                	je     c00106cf <CPU::detectFeatures()+0x241>
c0010687:	eb 0f                	jmp    c0010698 <CPU::detectFeatures()+0x20a>
c0010689:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0010693:	e9 c1 01 00 00       	jmp    c0010859 <CPU::detectFeatures()+0x3cb>
c0010698:	50                   	push   eax
c0010699:	50                   	push   eax
c001069a:	68 09 22 02 c0       	push   0xc0022209
c001069f:	55                   	push   ebp
c00106a0:	e8 db 00 ff ff       	call   c0000780 <strcmp>
c00106a5:	83 c4 10             	add    esp,0x10
c00106a8:	85 c0                	test   eax,eax
c00106aa:	74 23                	je     c00106cf <CPU::detectFeatures()+0x241>
c00106ac:	57                   	push   edi
c00106ad:	57                   	push   edi
c00106ae:	68 16 22 02 c0       	push   0xc0022216
c00106b3:	55                   	push   ebp
c00106b4:	e8 c7 00 ff ff       	call   c0000780 <strcmp>
c00106b9:	83 c4 10             	add    esp,0x10
c00106bc:	85 c0                	test   eax,eax
c00106be:	75 1e                	jne    c00106de <CPU::detectFeatures()+0x250>
c00106c0:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00106ca:	e9 8a 01 00 00       	jmp    c0010859 <CPU::detectFeatures()+0x3cb>
c00106cf:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00106d9:	e9 7b 01 00 00       	jmp    c0010859 <CPU::detectFeatures()+0x3cb>
c00106de:	56                   	push   esi
c00106df:	56                   	push   esi
c00106e0:	68 23 22 02 c0       	push   0xc0022223
c00106e5:	55                   	push   ebp
c00106e6:	e8 95 00 ff ff       	call   c0000780 <strcmp>
c00106eb:	83 c4 10             	add    esp,0x10
c00106ee:	85 c0                	test   eax,eax
c00106f0:	75 0f                	jne    c0010701 <CPU::detectFeatures()+0x273>
c00106f2:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00106fc:	e9 58 01 00 00       	jmp    c0010859 <CPU::detectFeatures()+0x3cb>
c0010701:	51                   	push   ecx
c0010702:	51                   	push   ecx
c0010703:	68 e2 21 02 c0       	push   0xc00221e2
c0010708:	55                   	push   ebp
c0010709:	e8 72 00 ff ff       	call   c0000780 <strcmp>
c001070e:	83 c4 10             	add    esp,0x10
c0010711:	85 c0                	test   eax,eax
c0010713:	75 0f                	jne    c0010724 <CPU::detectFeatures()+0x296>
c0010715:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001071f:	e9 35 01 00 00       	jmp    c0010859 <CPU::detectFeatures()+0x3cb>
c0010724:	52                   	push   edx
c0010725:	52                   	push   edx
c0010726:	68 30 22 02 c0       	push   0xc0022230
c001072b:	55                   	push   ebp
c001072c:	e8 4f 00 ff ff       	call   c0000780 <strcmp>
c0010731:	83 c4 10             	add    esp,0x10
c0010734:	85 c0                	test   eax,eax
c0010736:	75 0f                	jne    c0010747 <CPU::detectFeatures()+0x2b9>
c0010738:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0010742:	e9 12 01 00 00       	jmp    c0010859 <CPU::detectFeatures()+0x3cb>
c0010747:	50                   	push   eax
c0010748:	50                   	push   eax
c0010749:	68 3d 22 02 c0       	push   0xc002223d
c001074e:	55                   	push   ebp
c001074f:	e8 2c 00 ff ff       	call   c0000780 <strcmp>
c0010754:	83 c4 10             	add    esp,0x10
c0010757:	85 c0                	test   eax,eax
c0010759:	75 0f                	jne    c001076a <CPU::detectFeatures()+0x2dc>
c001075b:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0010765:	e9 ef 00 00 00       	jmp    c0010859 <CPU::detectFeatures()+0x3cb>
c001076a:	50                   	push   eax
c001076b:	50                   	push   eax
c001076c:	68 4a 22 02 c0       	push   0xc002224a
c0010771:	55                   	push   ebp
c0010772:	e8 09 00 ff ff       	call   c0000780 <strcmp>
c0010777:	83 c4 10             	add    esp,0x10
c001077a:	85 c0                	test   eax,eax
c001077c:	75 0f                	jne    c001078d <CPU::detectFeatures()+0x2ff>
c001077e:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0010788:	e9 cc 00 00 00       	jmp    c0010859 <CPU::detectFeatures()+0x3cb>
c001078d:	50                   	push   eax
c001078e:	50                   	push   eax
c001078f:	68 57 22 02 c0       	push   0xc0022257
c0010794:	55                   	push   ebp
c0010795:	e8 e6 ff fe ff       	call   c0000780 <strcmp>
c001079a:	83 c4 10             	add    esp,0x10
c001079d:	85 c0                	test   eax,eax
c001079f:	75 0f                	jne    c00107b0 <CPU::detectFeatures()+0x322>
c00107a1:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00107ab:	e9 a9 00 00 00       	jmp    c0010859 <CPU::detectFeatures()+0x3cb>
c00107b0:	50                   	push   eax
c00107b1:	50                   	push   eax
c00107b2:	68 64 22 02 c0       	push   0xc0022264
c00107b7:	55                   	push   ebp
c00107b8:	e8 c3 ff fe ff       	call   c0000780 <strcmp>
c00107bd:	83 c4 10             	add    esp,0x10
c00107c0:	85 c0                	test   eax,eax
c00107c2:	75 0f                	jne    c00107d3 <CPU::detectFeatures()+0x345>
c00107c4:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00107ce:	e9 86 00 00 00       	jmp    c0010859 <CPU::detectFeatures()+0x3cb>
c00107d3:	50                   	push   eax
c00107d4:	50                   	push   eax
c00107d5:	68 71 22 02 c0       	push   0xc0022271
c00107da:	55                   	push   ebp
c00107db:	e8 a0 ff fe ff       	call   c0000780 <strcmp>
c00107e0:	83 c4 10             	add    esp,0x10
c00107e3:	85 c0                	test   eax,eax
c00107e5:	75 0c                	jne    c00107f3 <CPU::detectFeatures()+0x365>
c00107e7:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00107f1:	eb 66                	jmp    c0010859 <CPU::detectFeatures()+0x3cb>
c00107f3:	50                   	push   eax
c00107f4:	50                   	push   eax
c00107f5:	68 7e 22 02 c0       	push   0xc002227e
c00107fa:	55                   	push   ebp
c00107fb:	e8 80 ff fe ff       	call   c0000780 <strcmp>
c0010800:	83 c4 10             	add    esp,0x10
c0010803:	85 c0                	test   eax,eax
c0010805:	75 0c                	jne    c0010813 <CPU::detectFeatures()+0x385>
c0010807:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0010811:	eb 46                	jmp    c0010859 <CPU::detectFeatures()+0x3cb>
c0010813:	57                   	push   edi
c0010814:	57                   	push   edi
c0010815:	68 8b 22 02 c0       	push   0xc002228b
c001081a:	55                   	push   ebp
c001081b:	e8 60 ff fe ff       	call   c0000780 <strcmp>
c0010820:	83 c4 10             	add    esp,0x10
c0010823:	85 c0                	test   eax,eax
c0010825:	74 e0                	je     c0010807 <CPU::detectFeatures()+0x379>
c0010827:	56                   	push   esi
c0010828:	56                   	push   esi
c0010829:	68 98 22 02 c0       	push   0xc0022298
c001082e:	55                   	push   ebp
c001082f:	e8 4c ff fe ff       	call   c0000780 <strcmp>
c0010834:	83 c4 10             	add    esp,0x10
c0010837:	85 c0                	test   eax,eax
c0010839:	74 cc                	je     c0010807 <CPU::detectFeatures()+0x379>
c001083b:	51                   	push   ecx
c001083c:	51                   	push   ecx
c001083d:	68 a5 22 02 c0       	push   0xc00222a5
c0010842:	55                   	push   ebp
c0010843:	e8 38 ff fe ff       	call   c0000780 <strcmp>
c0010848:	83 c4 10             	add    esp,0x10
c001084b:	85 c0                	test   eax,eax
c001084d:	74 b8                	je     c0010807 <CPU::detectFeatures()+0x379>
c001084f:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0010859:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001085e:	0f 86 be 00 00 00    	jbe    c0010922 <CPU::detectFeatures()+0x494>
c0010864:	83 ec 0c             	sub    esp,0xc
c0010867:	68 80 00 00 00       	push   0x80
c001086c:	e8 31 fb ff ff       	call   c00103a2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010871:	83 e0 01             	and    eax,0x1
c0010874:	c1 e0 06             	shl    eax,0x6
c0010877:	89 c2                	mov    edx,eax
c0010879:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001087f:	83 e0 bf             	and    eax,0xffffffbf
c0010882:	09 d0                	or     eax,edx
c0010884:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001088a:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0010891:	e8 0c fb ff ff       	call   c00103a2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010896:	83 e0 01             	and    eax,0x1
c0010899:	c1 e0 04             	shl    eax,0x4
c001089c:	89 c2                	mov    edx,eax
c001089e:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00108a4:	83 e0 ef             	and    eax,0xffffffef
c00108a7:	09 d0                	or     eax,edx
c00108a9:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00108af:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00108b6:	e8 e7 fa ff ff       	call   c00103a2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00108bb:	89 c2                	mov    edx,eax
c00108bd:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00108c3:	c1 e2 07             	shl    edx,0x7
c00108c6:	83 e0 7f             	and    eax,0x7f
c00108c9:	09 d0                	or     eax,edx
c00108cb:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00108d1:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00108d8:	e8 f3 fa ff ff       	call   c00103d0 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00108dd:	83 e0 01             	and    eax,0x1
c00108e0:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00108e7:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00108ed:	83 e0 f7             	and    eax,0xfffffff7
c00108f0:	09 d0                	or     eax,edx
c00108f2:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00108f8:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00108ff:	e8 cc fa ff ff       	call   c00103d0 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0010904:	83 c4 10             	add    esp,0x10
c0010907:	83 e0 01             	and    eax,0x1
c001090a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010911:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010917:	83 e0 fb             	and    eax,0xfffffffb
c001091a:	09 d0                	or     eax,edx
c001091c:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010922:	83 ec 0c             	sub    esp,0xc
c0010925:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010929:	50                   	push   eax
c001092a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001092e:	50                   	push   eax
c001092f:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0010933:	57                   	push   edi
c0010934:	8d 74 24 28          	lea    esi,[esp+0x28]
c0010938:	56                   	push   esi
c0010939:	6a 01                	push   0x1
c001093b:	e8 82 f9 ff ff       	call   c00102c2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010940:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010944:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001094a:	89 c1                	mov    ecx,eax
c001094c:	83 e1 0f             	and    ecx,0xf
c001094f:	83 e2 f0             	and    edx,0xfffffff0
c0010952:	09 ca                	or     edx,ecx
c0010954:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001095a:	89 c2                	mov    edx,eax
c001095c:	c1 ea 04             	shr    edx,0x4
c001095f:	83 e2 0f             	and    edx,0xf
c0010962:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010966:	89 d1                	mov    ecx,edx
c0010968:	83 c4 20             	add    esp,0x20
c001096b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0010971:	c1 e1 06             	shl    ecx,0x6
c0010974:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c001097a:	09 ca                	or     edx,ecx
c001097c:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0010983:	89 c2                	mov    edx,eax
c0010985:	c1 ea 08             	shr    edx,0x8
c0010988:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c001098e:	83 e2 0f             	and    edx,0xf
c0010991:	89 d5                	mov    ebp,edx
c0010993:	83 e5 03             	and    ebp,0x3
c0010996:	c1 e5 06             	shl    ebp,0x6
c0010999:	83 e1 3f             	and    ecx,0x3f
c001099c:	09 e9                	or     ecx,ebp
c001099e:	89 d5                	mov    ebp,edx
c00109a0:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c00109a6:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c00109ac:	c1 ed 02             	shr    ebp,0x2
c00109af:	83 e1 c0             	and    ecx,0xffffffc0
c00109b2:	09 e9                	or     ecx,ebp
c00109b4:	89 c5                	mov    ebp,eax
c00109b6:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00109bc:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c00109c2:	c1 ed 08             	shr    ebp,0x8
c00109c5:	83 e5 30             	and    ebp,0x30
c00109c8:	83 e1 cf             	and    ecx,0xffffffcf
c00109cb:	09 e9                	or     ecx,ebp
c00109cd:	83 fa 06             	cmp    edx,0x6
c00109d0:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c00109d6:	74 05                	je     c00109dd <CPU::detectFeatures()+0x54f>
c00109d8:	83 fa 0f             	cmp    edx,0xf
c00109db:	75 64                	jne    c0010a41 <CPU::detectFeatures()+0x5b3>
c00109dd:	89 c1                	mov    ecx,eax
c00109df:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00109e5:	c1 e9 10             	shr    ecx,0x10
c00109e8:	c1 e1 04             	shl    ecx,0x4
c00109eb:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c00109ef:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c00109f5:	0f b6 c9             	movzx  ecx,cl
c00109f8:	c1 e1 06             	shl    ecx,0x6
c00109fb:	09 e9                	or     ecx,ebp
c00109fd:	83 fa 0f             	cmp    edx,0xf
c0010a00:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c0010a07:	75 38                	jne    c0010a41 <CPU::detectFeatures()+0x5b3>
c0010a09:	c1 e8 14             	shr    eax,0x14
c0010a0c:	83 c0 0f             	add    eax,0xf
c0010a0f:	0f b6 c0             	movzx  eax,al
c0010a12:	89 c2                	mov    edx,eax
c0010a14:	c1 e8 02             	shr    eax,0x2
c0010a17:	83 e2 03             	and    edx,0x3
c0010a1a:	89 d1                	mov    ecx,edx
c0010a1c:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0010a22:	c1 e1 06             	shl    ecx,0x6
c0010a25:	83 e2 3f             	and    edx,0x3f
c0010a28:	09 ca                	or     edx,ecx
c0010a2a:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0010a30:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0010a36:	83 e2 c0             	and    edx,0xffffffc0
c0010a39:	09 d0                	or     eax,edx
c0010a3b:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c0010a41:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010a47:	83 ec 0c             	sub    esp,0xc
c0010a4a:	83 c8 07             	or     eax,0x7
c0010a4d:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010a53:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010a57:	50                   	push   eax
c0010a58:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0010a5c:	55                   	push   ebp
c0010a5d:	57                   	push   edi
c0010a5e:	56                   	push   esi
c0010a5f:	68 00 00 00 80       	push   0x80000000
c0010a64:	e8 59 f8 ff ff       	call   c00102c2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010a69:	83 c4 20             	add    esp,0x20
c0010a6c:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0010a74:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0010a78:	76 1e                	jbe    c0010a98 <CPU::detectFeatures()+0x60a>
c0010a7a:	83 ec 0c             	sub    esp,0xc
c0010a7d:	50                   	push   eax
c0010a7e:	55                   	push   ebp
c0010a7f:	57                   	push   edi
c0010a80:	56                   	push   esi
c0010a81:	68 01 00 00 80       	push   0x80000001
c0010a86:	e8 37 f8 ff ff       	call   c00102c2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010a8b:	83 c4 20             	add    esp,0x20
c0010a8e:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0010a98:	52                   	push   edx
c0010a99:	52                   	push   edx
c0010a9a:	68 b1 22 02 c0       	push   0xc00222b1
c0010a9f:	53                   	push   ebx
c0010aa0:	e8 29 c1 ff ff       	call   c000cbce <Device::setName(char const*)>
c0010aa5:	83 c4 10             	add    esp,0x10
c0010aa8:	eb 69                	jmp    c0010b13 <CPU::detectFeatures()+0x685>
c0010aaa:	50                   	push   eax
c0010aab:	50                   	push   eax
c0010aac:	68 16 22 02 c0       	push   0xc0022216
c0010ab1:	55                   	push   ebp
c0010ab2:	e8 99 fb fe ff       	call   c0000650 <strcpy>
c0010ab7:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010ac1:	e8 fd f6 fe ff       	call   c00001c3 <is486>
c0010ac6:	83 c4 10             	add    esp,0x10
c0010ac9:	85 c0                	test   eax,eax
c0010acb:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010ad1:	74 1f                	je     c0010af2 <CPU::detectFeatures()+0x664>
c0010ad3:	83 c8 07             	or     eax,0x7
c0010ad6:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010adc:	0f 20 c0             	mov    eax,cr0
c0010adf:	83 e0 14             	and    eax,0x14
c0010ae2:	83 f8 04             	cmp    eax,0x4
c0010ae5:	75 10                	jne    c0010af7 <CPU::detectFeatures()+0x669>
c0010ae7:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010aed:	83 e0 fd             	and    eax,0xfffffffd
c0010af0:	eb 1b                	jmp    c0010b0d <CPU::detectFeatures()+0x67f>
c0010af2:	83 e0 f8             	and    eax,0xfffffff8
c0010af5:	eb df                	jmp    c0010ad6 <CPU::detectFeatures()+0x648>
c0010af7:	e8 a2 f6 fe ff       	call   c000019e <hasLegacyFPU>
c0010afc:	83 e0 01             	and    eax,0x1
c0010aff:	8d 14 00             	lea    edx,[eax+eax*1]
c0010b02:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010b08:	83 e0 fd             	and    eax,0xfffffffd
c0010b0b:	09 d0                	or     eax,edx
c0010b0d:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010b13:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c0010b1a:	74 17                	je     c0010b33 <CPU::detectFeatures()+0x6a5>
c0010b1c:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c0010b22:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c0010b28:	83 c8 10             	or     eax,0x10
c0010b2b:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c0010b31:	eb 20                	jmp    c0010b53 <CPU::detectFeatures()+0x6c5>
c0010b33:	e8 66 f6 fe ff       	call   c000019e <hasLegacyFPU>
c0010b38:	83 e0 01             	and    eax,0x1
c0010b3b:	8d 14 00             	lea    edx,[eax+eax*1]
c0010b3e:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010b44:	83 e0 fd             	and    eax,0xfffffffd
c0010b47:	09 d0                	or     eax,edx
c0010b49:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010b4f:	a8 02                	test   al,0x2
c0010b51:	75 c9                	jne    c0010b1c <CPU::detectFeatures()+0x68e>
c0010b53:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0010b5a:	83 c4 2c             	add    esp,0x2c
c0010b5d:	5b                   	pop    ebx
c0010b5e:	5e                   	pop    esi
c0010b5f:	5f                   	pop    edi
c0010b60:	5d                   	pop    ebp
c0010b61:	c3                   	ret    

c0010b62 <CPU::setupSMEP()>:
c0010b62:	0f 20 e0             	mov    eax,cr4
c0010b65:	0d 00 00 10 00       	or     eax,0x100000
c0010b6a:	0f 22 e0             	mov    cr4,eax
c0010b6d:	c3                   	ret    

c0010b6e <CPU::setupUMIP()>:
c0010b6e:	0f 20 e0             	mov    eax,cr4
c0010b71:	80 cc 08             	or     ah,0x8
c0010b74:	0f 22 e0             	mov    cr4,eax
c0010b77:	c3                   	ret    

c0010b78 <CPU::setupTSC()>:
c0010b78:	0f 20 e0             	mov    eax,cr4
c0010b7b:	83 c8 04             	or     eax,0x4
c0010b7e:	0f 22 e0             	mov    cr4,eax
c0010b81:	c3                   	ret    

c0010b82 <CPU::setupLargePages()>:
c0010b82:	0f 20 e0             	mov    eax,cr4
c0010b85:	83 c8 10             	or     eax,0x10
c0010b88:	0f 22 e0             	mov    cr4,eax
c0010b8b:	c3                   	ret    

c0010b8c <CPU::setupPAT()>:
c0010b8c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010b91:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010b98:	74 2c                	je     c0010bc6 <CPU::setupPAT()+0x3a>
c0010b9a:	53                   	push   ebx
c0010b9b:	83 ec 10             	sub    esp,0x10
c0010b9e:	68 77 02 00 00       	push   0x277
c0010ba3:	50                   	push   eax
c0010ba4:	e8 39 65 ff ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c0010ba9:	83 e2 f8             	and    edx,0xfffffff8
c0010bac:	83 ca 01             	or     edx,0x1
c0010baf:	52                   	push   edx
c0010bb0:	50                   	push   eax
c0010bb1:	68 77 02 00 00       	push   0x277
c0010bb6:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0010bbc:	e8 4d 65 ff ff       	call   c000710e <Computer::wrmsr(unsigned int, unsigned long long)>
c0010bc1:	83 c4 28             	add    esp,0x28
c0010bc4:	5b                   	pop    ebx
c0010bc5:	c3                   	ret    
c0010bc6:	c3                   	ret    
c0010bc7:	90                   	nop

c0010bc8 <CPU::setupMTRR()>:
c0010bc8:	c3                   	ret    
c0010bc9:	90                   	nop

c0010bca <CPU::setupGlobalPages()>:
c0010bca:	0f 20 e0             	mov    eax,cr4
c0010bcd:	0c 80                	or     al,0x80
c0010bcf:	0f 22 e0             	mov    cr4,eax
c0010bd2:	c3                   	ret    
c0010bd3:	90                   	nop

c0010bd4 <CPU::allowUsermodeDataAccess()>:
c0010bd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bd8:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010bdf:	74 03                	je     c0010be4 <CPU::allowUsermodeDataAccess()+0x10>
c0010be1:	0f 01 cb             	stac   
c0010be4:	c3                   	ret    
c0010be5:	90                   	nop

c0010be6 <CPU::prohibitUsermodeDataAccess()>:
c0010be6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bea:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010bf1:	74 03                	je     c0010bf6 <CPU::prohibitUsermodeDataAccess()+0x10>
c0010bf3:	0f 01 ca             	clac   
c0010bf6:	c3                   	ret    
c0010bf7:	90                   	nop

c0010bf8 <CPU::setupSMAP()>:
c0010bf8:	0f 20 e0             	mov    eax,cr4
c0010bfb:	0d 00 00 20 00       	or     eax,0x200000
c0010c00:	0f 22 e0             	mov    cr4,eax
c0010c03:	eb e1                	jmp    c0010be6 <CPU::prohibitUsermodeDataAccess()>
c0010c05:	90                   	nop

c0010c06 <CPU::setupFeatures()>:
c0010c06:	53                   	push   ebx
c0010c07:	83 ec 08             	sub    esp,0x8
c0010c0a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c0e:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0010c15:	74 18                	je     c0010c2f <CPU::setupFeatures()+0x29>
c0010c17:	83 ec 0c             	sub    esp,0xc
c0010c1a:	68 bd 22 02 c0       	push   0xc00222bd
c0010c1f:	e8 e6 9c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010c24:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c27:	e8 42 ff ff ff       	call   c0010b6e <CPU::setupUMIP()>
c0010c2c:	83 c4 10             	add    esp,0x10
c0010c2f:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0010c36:	74 18                	je     c0010c50 <CPU::setupFeatures()+0x4a>
c0010c38:	83 ec 0c             	sub    esp,0xc
c0010c3b:	68 c7 22 02 c0       	push   0xc00222c7
c0010c40:	e8 c5 9c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010c45:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c48:	e8 2b ff ff ff       	call   c0010b78 <CPU::setupTSC()>
c0010c4d:	83 c4 10             	add    esp,0x10
c0010c50:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010c57:	74 18                	je     c0010c71 <CPU::setupFeatures()+0x6b>
c0010c59:	83 ec 0c             	sub    esp,0xc
c0010c5c:	68 d0 22 02 c0       	push   0xc00222d0
c0010c61:	e8 a4 9c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010c66:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c69:	e8 14 ff ff ff       	call   c0010b82 <CPU::setupLargePages()>
c0010c6e:	83 c4 10             	add    esp,0x10
c0010c71:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010c78:	74 18                	je     c0010c92 <CPU::setupFeatures()+0x8c>
c0010c7a:	83 ec 0c             	sub    esp,0xc
c0010c7d:	68 d9 22 02 c0       	push   0xc00222d9
c0010c82:	e8 83 9c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010c87:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c8a:	e8 3b ff ff ff       	call   c0010bca <CPU::setupGlobalPages()>
c0010c8f:	83 c4 10             	add    esp,0x10
c0010c92:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010c99:	74 18                	je     c0010cb3 <CPU::setupFeatures()+0xad>
c0010c9b:	83 ec 0c             	sub    esp,0xc
c0010c9e:	68 eb 22 02 c0       	push   0xc00222eb
c0010ca3:	e8 62 9c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010ca8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cab:	e8 dc fe ff ff       	call   c0010b8c <CPU::setupPAT()>
c0010cb0:	83 c4 10             	add    esp,0x10
c0010cb3:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010cba:	74 11                	je     c0010ccd <CPU::setupFeatures()+0xc7>
c0010cbc:	c7 44 24 10 f4 22 02 c0 	mov    DWORD PTR [esp+0x10],0xc00222f4
c0010cc4:	83 c4 08             	add    esp,0x8
c0010cc7:	5b                   	pop    ebx
c0010cc8:	e9 3d 9c ff ff       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>
c0010ccd:	83 c4 08             	add    esp,0x8
c0010cd0:	5b                   	pop    ebx
c0010cd1:	c3                   	ret    

c0010cd2 <CPU::open(int, int, void*)>:
c0010cd2:	55                   	push   ebp
c0010cd3:	57                   	push   edi
c0010cd4:	56                   	push   esi
c0010cd5:	53                   	push   ebx
c0010cd6:	83 ec 18             	sub    esp,0x18
c0010cd9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010cdd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0010ce1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010ce5:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010ceb:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c0010cf1:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c0010cf7:	50                   	push   eax
c0010cf8:	e8 e1 66 ff ff       	call   c00073de <GDT::setup()>
c0010cfd:	83 c4 0c             	add    esp,0xc
c0010d00:	6a 00                	push   0x0
c0010d02:	68 ef be ad de       	push   0xdeadbeef
c0010d07:	55                   	push   ebp
c0010d08:	e8 63 82 ff ff       	call   c0008f70 <TSS::setup(unsigned long, unsigned long)>
c0010d0d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010d10:	e8 3b 82 ff ff       	call   c0008f50 <TSS::flush()>
c0010d15:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010d1b:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d1e:	e8 1f 69 ff ff       	call   c0007642 <IDT::setup()>
c0010d23:	b8 00 04 00 00       	mov    eax,0x400
c0010d28:	0f 23 f8             	mov    db7,eax
c0010d2b:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010d35:	e8 a8 70 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0010d3a:	83 c4 10             	add    esp,0x10
c0010d3d:	85 f6                	test   esi,esi
c0010d3f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010d45:	89 38                	mov    DWORD PTR [eax],edi
c0010d47:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010d4d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010d50:	74 10                	je     c0010d62 <CPU::open(int, int, void*)+0x90>
c0010d52:	50                   	push   eax
c0010d53:	50                   	push   eax
c0010d54:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010d5a:	56                   	push   esi
c0010d5b:	e8 2c 8b ff ff       	call   c000988c <VAS::setCPUSpecific(unsigned long)>
c0010d60:	eb 0d                	jmp    c0010d6f <CPU::open(int, int, void*)+0x9d>
c0010d62:	83 ec 0c             	sub    esp,0xc
c0010d65:	68 fe 22 02 c0       	push   0xc00222fe
c0010d6a:	e8 9c 08 00 00       	call   c001160b <KePanic(char const*)>
c0010d6f:	83 c4 10             	add    esp,0x10
c0010d72:	83 ec 0c             	sub    esp,0xc
c0010d75:	68 0c 23 02 c0       	push   0xc002230c
c0010d7a:	e8 8e 01 00 00       	call   c0010f0d <KeSetBootMessage(char const*)>
c0010d7f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d82:	e8 07 f7 ff ff       	call   c001048e <CPU::detectFeatures()>
c0010d87:	c7 04 24 2f 23 02 c0 	mov    DWORD PTR [esp],0xc002232f
c0010d8e:	e8 7a 01 00 00       	call   c0010f0d <KeSetBootMessage(char const*)>
c0010d93:	e8 1b 74 00 00       	call   c00181b3 <HalInitialise()>
c0010d98:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c0010d9d:	83 e0 10             	and    eax,0x10
c0010da0:	83 f8 01             	cmp    eax,0x1
c0010da3:	19 c0                	sbb    eax,eax
c0010da5:	83 e0 46             	and    eax,0x46
c0010da8:	83 c0 1e             	add    eax,0x1e
c0010dab:	89 04 24             	mov    DWORD PTR [esp],eax
c0010dae:	e8 c2 d6 ff ff       	call   c000e475 <setupTimer(int)>
c0010db3:	83 c4 10             	add    esp,0x10
c0010db6:	f6 05 d0 6e 02 c0 20 	test   BYTE PTR ds:0xc0026ed0,0x20
c0010dbd:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010dc3:	74 0c                	je     c0010dd1 <CPU::open(int, int, void*)+0xff>
c0010dc5:	83 ec 0c             	sub    esp,0xc
c0010dc8:	53                   	push   ebx
c0010dc9:	e8 38 fe ff ff       	call   c0010c06 <CPU::setupFeatures()>
c0010dce:	83 c4 10             	add    esp,0x10
c0010dd1:	83 c4 0c             	add    esp,0xc
c0010dd4:	31 c0                	xor    eax,eax
c0010dd6:	5b                   	pop    ebx
c0010dd7:	5e                   	pop    esi
c0010dd8:	5f                   	pop    edi
c0010dd9:	5d                   	pop    ebp
c0010dda:	c3                   	ret    

c0010ddb <KeInitialiseAtexit()>:
c0010ddb:	83 ec 10             	sub    esp,0x10
c0010dde:	6a 60                	push   0x60
c0010de0:	6a 00                	push   0x0
c0010de2:	68 20 be 02 c0       	push   0xc002be20
c0010de7:	c7 05 a0 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bda0,0x0
c0010df1:	e8 fa f6 fe ff       	call   c00004f0 <memset>
c0010df6:	83 c4 1c             	add    esp,0x1c
c0010df9:	c3                   	ret    

c0010dfa <KeRegisterAtexit(void (*)(void*), void*)>:
c0010dfa:	a1 a0 bd 02 c0       	mov    eax,ds:0xc002bda0
c0010dff:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010e03:	89 14 85 20 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd41e0],edx
c0010e0a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010e0e:	89 14 85 c0 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4240],edx
c0010e15:	40                   	inc    eax
c0010e16:	a3 a0 bd 02 c0       	mov    ds:0xc002bda0,eax
c0010e1b:	83 f8 17             	cmp    eax,0x17
c0010e1e:	7e 0d                	jle    c0010e2d <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010e20:	c7 44 24 04 70 23 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022370
c0010e28:	e9 de 07 00 00       	jmp    c001160b <KePanic(char const*)>
c0010e2d:	c3                   	ret    

c0010e2e <KeExecuteAtexit()>:
c0010e2e:	53                   	push   ebx
c0010e2f:	31 db                	xor    ebx,ebx
c0010e31:	83 ec 08             	sub    esp,0x8
c0010e34:	39 1d a0 bd 02 c0    	cmp    DWORD PTR ds:0xc002bda0,ebx
c0010e3a:	7e 50                	jle    c0010e8c <KeExecuteAtexit()+0x5e>
c0010e3c:	8b 04 9d 20 be 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd41e0]
c0010e43:	85 c0                	test   eax,eax
c0010e45:	74 42                	je     c0010e89 <KeExecuteAtexit()+0x5b>
c0010e47:	51                   	push   ecx
c0010e48:	50                   	push   eax
c0010e49:	53                   	push   ebx
c0010e4a:	68 89 23 02 c0       	push   0xc0022389
c0010e4f:	e8 b6 9a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010e54:	58                   	pop    eax
c0010e55:	ff 34 9d c0 bd 02 c0 	push   DWORD PTR [ebx*4-0x3ffd4240]
c0010e5c:	ff 14 9d 20 be 02 c0 	call   DWORD PTR [ebx*4-0x3ffd41e0]
c0010e63:	c7 04 24 ab 23 02 c0 	mov    DWORD PTR [esp],0xc00223ab
c0010e6a:	e8 9b 9a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010e6f:	c7 04 24 0b 35 02 c0 	mov    DWORD PTR [esp],0xc002350b
c0010e76:	c7 04 9d 20 be 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd41e0],0x0
c0010e81:	e8 84 9a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010e86:	83 c4 10             	add    esp,0x10
c0010e89:	43                   	inc    ebx
c0010e8a:	eb a8                	jmp    c0010e34 <KeExecuteAtexit()+0x6>
c0010e8c:	83 c4 08             	add    esp,0x8
c0010e8f:	5b                   	pop    ebx
c0010e90:	c3                   	ret    

c0010e91 <KeDisplaySplashScreen()>:
c0010e91:	55                   	push   ebp
c0010e92:	bd 05 00 00 00       	mov    ebp,0x5
c0010e97:	57                   	push   edi
c0010e98:	bf 0a 00 00 00       	mov    edi,0xa
c0010e9d:	56                   	push   esi
c0010e9e:	31 f6                	xor    esi,esi
c0010ea0:	53                   	push   ebx
c0010ea1:	31 db                	xor    ebx,ebx
c0010ea3:	83 ec 0c             	sub    esp,0xc
c0010ea6:	0f b6 96 60 37 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdc8a0]
c0010ead:	85 d2                	test   edx,edx
c0010eaf:	89 d0                	mov    eax,edx
c0010eb1:	74 52                	je     c0010f05 <KeDisplaySplashScreen()+0x74>
c0010eb3:	80 bb 96 37 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdc86a],0xdb
c0010eba:	75 13                	jne    c0010ecf <KeDisplaySplashScreen()+0x3e>
c0010ebc:	0f b6 8b 95 37 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdc86b]
c0010ec3:	83 e1 fe             	and    ecx,0xfffffffe
c0010ec6:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010ecc:	75 01                	jne    c0010ecf <KeDisplaySplashScreen()+0x3e>
c0010ece:	47                   	inc    edi
c0010ecf:	83 fa 0d             	cmp    edx,0xd
c0010ed2:	74 28                	je     c0010efc <KeDisplaySplashScreen()+0x6b>
c0010ed4:	83 fa 0a             	cmp    edx,0xa
c0010ed7:	75 0a                	jne    c0010ee3 <KeDisplaySplashScreen()+0x52>
c0010ed9:	45                   	inc    ebp
c0010eda:	bf 0a 00 00 00       	mov    edi,0xa
c0010edf:	31 db                	xor    ebx,ebx
c0010ee1:	eb 19                	jmp    c0010efc <KeDisplaySplashScreen()+0x6b>
c0010ee3:	83 ec 0c             	sub    esp,0xc
c0010ee6:	0f be c0             	movsx  eax,al
c0010ee9:	55                   	push   ebp
c0010eea:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010eed:	43                   	inc    ebx
c0010eee:	52                   	push   edx
c0010eef:	6a 00                	push   0x0
c0010ef1:	6a 0e                	push   0xe
c0010ef3:	50                   	push   eax
c0010ef4:	e8 37 7f 00 00       	call   c0018e30 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010ef9:	83 c4 20             	add    esp,0x20
c0010efc:	46                   	inc    esi
c0010efd:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010f03:	75 a1                	jne    c0010ea6 <KeDisplaySplashScreen()+0x15>
c0010f05:	83 c4 0c             	add    esp,0xc
c0010f08:	5b                   	pop    ebx
c0010f09:	5e                   	pop    esi
c0010f0a:	5f                   	pop    edi
c0010f0b:	5d                   	pop    ebp
c0010f0c:	c3                   	ret    

c0010f0d <KeSetBootMessage(char const*)>:
c0010f0d:	57                   	push   edi
c0010f0e:	56                   	push   esi
c0010f0f:	53                   	push   ebx
c0010f10:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010f16:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010f1d:	68 9e 00 00 00       	push   0x9e
c0010f22:	6a 00                	push   0x0
c0010f24:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010f28:	56                   	push   esi
c0010f29:	e8 c2 f5 fe ff       	call   c00004f0 <memset>
c0010f2e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f31:	e8 4a f6 fe ff       	call   c0000580 <strlen>
c0010f36:	ba 50 00 00 00       	mov    edx,0x50
c0010f3b:	83 c4 10             	add    esp,0x10
c0010f3e:	31 c9                	xor    ecx,ecx
c0010f40:	29 c2                	sub    edx,eax
c0010f42:	83 e2 fe             	and    edx,0xfffffffe
c0010f45:	01 f2                	add    edx,esi
c0010f47:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010f4c:	84 c0                	test   al,al
c0010f4e:	74 0a                	je     c0010f5a <KeSetBootMessage(char const*)+0x4d>
c0010f50:	80 cc 0f             	or     ah,0xf
c0010f53:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010f57:	41                   	inc    ecx
c0010f58:	eb ed                	jmp    c0010f47 <KeSetBootMessage(char const*)+0x3a>
c0010f5a:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010f5f:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010f64:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f66:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010f6c:	5b                   	pop    ebx
c0010f6d:	5e                   	pop    esi
c0010f6e:	5f                   	pop    edi
c0010f6f:	c3                   	ret    

c0010f70 <Krnl::handlePowerButton()>:
c0010f70:	83 ec 0c             	sub    esp,0xc
c0010f73:	e8 ee 06 00 00       	call   c0011666 <KeHandlePowerButton()>
c0010f78:	90                   	nop
c0010f79:	83 c4 0c             	add    esp,0xc
c0010f7c:	c3                   	ret    
c0010f7d:	8d 76 00             	lea    esi,[esi+0x0]

c0010f80 <Krnl::handleSleepButton()>:
c0010f80:	83 ec 0c             	sub    esp,0xc
c0010f83:	e8 13 07 00 00       	call   c001169b <KeHandleSleepButton()>
c0010f88:	90                   	nop
c0010f89:	83 c4 0c             	add    esp,0xc
c0010f8c:	c3                   	ret    

c0010f8d <KeCalculateCRC32(unsigned char*, int)>:
c0010f8d:	53                   	push   ebx
c0010f8e:	83 c8 ff             	or     eax,0xffffffff
c0010f91:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010f95:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010f99:	01 cb                	add    ebx,ecx
c0010f9b:	39 d9                	cmp    ecx,ebx
c0010f9d:	74 15                	je     c0010fb4 <KeCalculateCRC32(unsigned char*, int)+0x27>
c0010f9f:	41                   	inc    ecx
c0010fa0:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c0010fa3:	31 c2                	xor    edx,eax
c0010fa5:	c1 e8 08             	shr    eax,0x8
c0010fa8:	0f b6 d2             	movzx  edx,dl
c0010fab:	33 04 95 c0 38 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffdc740]
c0010fb2:	eb e7                	jmp    c0010f9b <KeCalculateCRC32(unsigned char*, int)+0xe>
c0010fb4:	5b                   	pop    ebx
c0010fb5:	f7 d0                	not    eax
c0010fb7:	c3                   	ret    

c0010fb8 <EnvVarContainer::getEnv(char const*)>:
c0010fb8:	57                   	push   edi
c0010fb9:	56                   	push   esi
c0010fba:	53                   	push   ebx
c0010fbb:	31 db                	xor    ebx,ebx
c0010fbd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010fc1:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010fc3:	7e 2b                	jle    c0010ff0 <EnvVarContainer::getEnv(char const*)+0x38>
c0010fc5:	50                   	push   eax
c0010fc6:	50                   	push   eax
c0010fc7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010fca:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010fd1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010fd4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010fd8:	e8 a3 f7 fe ff       	call   c0000780 <strcmp>
c0010fdd:	83 c4 10             	add    esp,0x10
c0010fe0:	85 c0                	test   eax,eax
c0010fe2:	75 09                	jne    c0010fed <EnvVarContainer::getEnv(char const*)+0x35>
c0010fe4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010fe7:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010feb:	eb 05                	jmp    c0010ff2 <EnvVarContainer::getEnv(char const*)+0x3a>
c0010fed:	43                   	inc    ebx
c0010fee:	eb d1                	jmp    c0010fc1 <EnvVarContainer::getEnv(char const*)+0x9>
c0010ff0:	31 c0                	xor    eax,eax
c0010ff2:	5b                   	pop    ebx
c0010ff3:	5e                   	pop    esi
c0010ff4:	5f                   	pop    edi
c0010ff5:	c3                   	ret    

c0010ff6 <EnvVarContainer::setEnv(char const*, char const*)>:
c0010ff6:	55                   	push   ebp
c0010ff7:	57                   	push   edi
c0010ff8:	56                   	push   esi
c0010ff9:	53                   	push   ebx
c0010ffa:	83 ec 28             	sub    esp,0x28
c0010ffd:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0011001:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0011005:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0011009:	56                   	push   esi
c001100a:	e8 71 f5 fe ff       	call   c0000580 <strlen>
c001100f:	40                   	inc    eax
c0011010:	89 04 24             	mov    DWORD PTR [esp],eax
c0011013:	e8 bb 6a ff ff       	call   c0007ad3 <malloc>
c0011018:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001101b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001101f:	e8 5c f5 fe ff       	call   c0000580 <strlen>
c0011024:	40                   	inc    eax
c0011025:	89 04 24             	mov    DWORD PTR [esp],eax
c0011028:	e8 a6 6a ff ff       	call   c0007ad3 <malloc>
c001102d:	89 34 24             	mov    DWORD PTR [esp],esi
c0011030:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011034:	e8 47 f5 fe ff       	call   c0000580 <strlen>
c0011039:	83 c4 0c             	add    esp,0xc
c001103c:	40                   	inc    eax
c001103d:	50                   	push   eax
c001103e:	6a 00                	push   0x0
c0011040:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011044:	e8 a7 f4 fe ff       	call   c00004f0 <memset>
c0011049:	89 34 24             	mov    DWORD PTR [esp],esi
c001104c:	e8 2f f5 fe ff       	call   c0000580 <strlen>
c0011051:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011055:	8d 48 01             	lea    ecx,[eax+0x1]
c0011058:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001105a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001105d:	89 de                	mov    esi,ebx
c001105f:	e8 1c f5 fe ff       	call   c0000580 <strlen>
c0011064:	83 c4 0c             	add    esp,0xc
c0011067:	40                   	inc    eax
c0011068:	50                   	push   eax
c0011069:	6a 00                	push   0x0
c001106b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001106f:	e8 7c f4 fe ff       	call   c00004f0 <memset>
c0011074:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011077:	e8 04 f5 fe ff       	call   c0000580 <strlen>
c001107c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0011080:	8d 48 01             	lea    ecx,[eax+0x1]
c0011083:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011085:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011088:	40                   	inc    eax
c0011089:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001108c:	c1 e0 03             	shl    eax,0x3
c001108f:	5a                   	pop    edx
c0011090:	59                   	pop    ecx
c0011091:	50                   	push   eax
c0011092:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0011095:	e8 25 6a ff ff       	call   c0007abf <realloc>
c001109a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001109d:	8d 74 24 18          	lea    esi,[esp+0x18]
c00110a1:	b9 08 00 00 00       	mov    ecx,0x8
c00110a6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00110a9:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00110ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00110af:	83 c4 2c             	add    esp,0x2c
c00110b2:	5b                   	pop    ebx
c00110b3:	5e                   	pop    esi
c00110b4:	5f                   	pop    edi
c00110b5:	5d                   	pop    ebp
c00110b6:	c3                   	ret    
c00110b7:	90                   	nop

c00110b8 <EnvVarContainer::deleteEnv(char const*)>:
c00110b8:	c3                   	ret    
c00110b9:	90                   	nop

c00110ba <EnvVarContainer::loadFrom(char const*, char const*)>:
c00110ba:	55                   	push   ebp
c00110bb:	57                   	push   edi
c00110bc:	56                   	push   esi
c00110bd:	53                   	push   ebx
c00110be:	81 ec 38 01 00 00    	sub    esp,0x138
c00110c4:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00110cb:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c00110d2:	68 14 01 00 00       	push   0x114
c00110d7:	e8 f7 69 ff ff       	call   c0007ad3 <malloc>
c00110dc:	83 c4 0c             	add    esp,0xc
c00110df:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00110e2:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00110e9:	89 c3                	mov    ebx,eax
c00110eb:	50                   	push   eax
c00110ec:	e8 d3 aa ff ff       	call   c000bbc4 <File::File(char const*, Process*)>
c00110f1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00110f4:	e8 ad ad ff ff       	call   c000bea6 <File::exists()>
c00110f9:	83 c4 10             	add    esp,0x10
c00110fc:	84 c0                	test   al,al
c00110fe:	75 31                	jne    c0011131 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0011100:	50                   	push   eax
c0011101:	50                   	push   eax
c0011102:	6a 12                	push   0x12
c0011104:	53                   	push   ebx
c0011105:	e8 d8 aa ff ff       	call   c000bbe2 <File::open(FileOpenMode)>
c001110a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001110c:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001110f:	89 34 24             	mov    DWORD PTR [esp],esi
c0011112:	e8 69 f4 fe ff       	call   c0000580 <strlen>
c0011117:	5a                   	pop    edx
c0011118:	8d 54 24 20          	lea    edx,[esp+0x20]
c001111c:	52                   	push   edx
c001111d:	31 d2                	xor    edx,edx
c001111f:	56                   	push   esi
c0011120:	52                   	push   edx
c0011121:	50                   	push   eax
c0011122:	53                   	push   ebx
c0011123:	ff d7                	call   edi
c0011125:	83 c4 14             	add    esp,0x14
c0011128:	53                   	push   ebx
c0011129:	e8 12 ab ff ff       	call   c000bc40 <File::close()>
c001112e:	83 c4 10             	add    esp,0x10
c0011131:	56                   	push   esi
c0011132:	31 f6                	xor    esi,esi
c0011134:	68 00 01 00 00       	push   0x100
c0011139:	6a 00                	push   0x0
c001113b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001113f:	50                   	push   eax
c0011140:	e8 ab f3 fe ff       	call   c00004f0 <memset>
c0011145:	5f                   	pop    edi
c0011146:	58                   	pop    eax
c0011147:	6a 01                	push   0x1
c0011149:	53                   	push   ebx
c001114a:	e8 93 aa ff ff       	call   c000bbe2 <File::open(FileOpenMode)>
c001114f:	83 c4 10             	add    esp,0x10
c0011152:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001115a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011162:	83 ec 0c             	sub    esp,0xc
c0011165:	8d 54 24 20          	lea    edx,[esp+0x20]
c0011169:	8b 03                	mov    eax,DWORD PTR [ebx]
c001116b:	52                   	push   edx
c001116c:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c0011170:	51                   	push   ecx
c0011171:	6a 00                	push   0x0
c0011173:	6a 01                	push   0x1
c0011175:	53                   	push   ebx
c0011176:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011179:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c001117e:	83 c4 20             	add    esp,0x20
c0011181:	85 c0                	test   eax,eax
c0011183:	89 c1                	mov    ecx,eax
c0011185:	0f 84 36 01 00 00    	je     c00112c1 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c001118b:	83 f8 0d             	cmp    eax,0xd
c001118e:	0f 84 22 01 00 00    	je     c00112b6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011194:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0011199:	0f 84 f0 00 00 00    	je     c001128f <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c001119f:	83 f8 0a             	cmp    eax,0xa
c00111a2:	74 13                	je     c00111b7 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c00111a4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00111a9:	74 0c                	je     c00111b7 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c00111ab:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00111b1:	0f 8e f6 00 00 00    	jle    c00112ad <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c00111b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00111bb:	83 ec 0c             	sub    esp,0xc
c00111be:	8d 78 01             	lea    edi,[eax+0x1]
c00111c1:	57                   	push   edi
c00111c2:	e8 0c 69 ff ff       	call   c0007ad3 <malloc>
c00111c7:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c00111cb:	8d 56 04             	lea    edx,[esi+0x4]
c00111ce:	89 14 24             	mov    DWORD PTR [esp],edx
c00111d1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00111d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00111d9:	e8 f5 68 ff ff       	call   c0007ad3 <malloc>
c00111de:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00111e2:	83 c4 0c             	add    esp,0xc
c00111e5:	57                   	push   edi
c00111e6:	6a 00                	push   0x0
c00111e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00111ec:	e8 ff f2 fe ff       	call   c00004f0 <memset>
c00111f1:	8d 74 24 30          	lea    esi,[esp+0x30]
c00111f5:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00111f9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00111fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00111ff:	83 c4 0c             	add    esp,0xc
c0011202:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011206:	52                   	push   edx
c0011207:	6a 00                	push   0x0
c0011209:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001120d:	e8 de f2 fe ff       	call   c00004f0 <memset>
c0011212:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011216:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001121a:	89 34 24             	mov    DWORD PTR [esp],esi
c001121d:	e8 5e f3 fe ff       	call   c0000580 <strlen>
c0011222:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0011226:	89 c1                	mov    ecx,eax
c0011228:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001122a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001122d:	83 c4 10             	add    esp,0x10
c0011230:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0011233:	40                   	inc    eax
c0011234:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0011237:	85 d2                	test   edx,edx
c0011239:	75 0c                	jne    c0011247 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c001123b:	83 ec 0c             	sub    esp,0xc
c001123e:	6a 08                	push   0x8
c0011240:	e8 8e 68 ff ff       	call   c0007ad3 <malloc>
c0011245:	eb 0c                	jmp    c0011253 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c0011247:	51                   	push   ecx
c0011248:	51                   	push   ecx
c0011249:	c1 e0 03             	shl    eax,0x3
c001124c:	50                   	push   eax
c001124d:	52                   	push   edx
c001124e:	e8 6c 68 ff ff       	call   c0007abf <realloc>
c0011253:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0011256:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0011259:	83 c4 10             	add    esp,0x10
c001125c:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001125f:	8d 74 24 18          	lea    esi,[esp+0x18]
c0011263:	b9 08 00 00 00       	mov    ecx,0x8
c0011268:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001126c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001126e:	50                   	push   eax
c001126f:	31 f6                	xor    esi,esi
c0011271:	68 00 01 00 00       	push   0x100
c0011276:	6a 00                	push   0x0
c0011278:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001127c:	50                   	push   eax
c001127d:	e8 6e f2 fe ff       	call   c00004f0 <memset>
c0011282:	83 c4 10             	add    esp,0x10
c0011285:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001128d:	eb 27                	jmp    c00112b6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001128f:	83 f8 3d             	cmp    eax,0x3d
c0011292:	74 1e                	je     c00112b2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0011294:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001129a:	7f 07                	jg     c00112a3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c001129c:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c00112a0:	46                   	inc    esi
c00112a1:	eb 13                	jmp    c00112b6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00112a3:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00112ab:	eb 09                	jmp    c00112b6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00112ad:	83 f8 3d             	cmp    eax,0x3d
c00112b0:	75 ea                	jne    c001129c <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c00112b2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00112b6:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00112bb:	0f 85 99 fe ff ff    	jne    c001115a <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c00112c1:	83 ec 0c             	sub    esp,0xc
c00112c4:	53                   	push   ebx
c00112c5:	e8 76 a9 ff ff       	call   c000bc40 <File::close()>
c00112ca:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112cc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00112cf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00112d2:	81 c4 3c 01 00 00    	add    esp,0x13c
c00112d8:	5b                   	pop    ebx
c00112d9:	5e                   	pop    esi
c00112da:	5f                   	pop    edi
c00112db:	5d                   	pop    ebp
c00112dc:	c3                   	ret    
c00112dd:	90                   	nop

c00112de <EnvVarContainer::__loadSystem()>:
c00112de:	83 ec 10             	sub    esp,0x10
c00112e1:	68 c0 3c 02 c0       	push   0xc0023cc0
c00112e6:	68 b0 23 02 c0       	push   0xc00223b0
c00112eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112ef:	e8 c6 fd ff ff       	call   c00110ba <EnvVarContainer::loadFrom(char const*, char const*)>
c00112f4:	83 c4 1c             	add    esp,0x1c
c00112f7:	c3                   	ret    

c00112f8 <EnvVarContainer::__loadUser()>:
c00112f8:	c3                   	ret    
c00112f9:	90                   	nop

c00112fa <EnvVarContainer::EnvVarContainer(Process*)>:
c00112fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112fe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011304:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011308:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001130c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001130f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011313:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001131a:	90                   	nop
c001131b:	c3                   	ret    

c001131c <EnvVarContainer::~EnvVarContainer()>:
c001131c:	83 ec 0c             	sub    esp,0xc
c001131f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011323:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011326:	85 c0                	test   eax,eax
c0011328:	74 1d                	je     c0011347 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001132a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001132e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011330:	85 c0                	test   eax,eax
c0011332:	74 13                	je     c0011347 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0011334:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011338:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001133b:	83 ec 0c             	sub    esp,0xc
c001133e:	50                   	push   eax
c001133f:	e8 9f 67 ff ff       	call   c0007ae3 <free>
c0011344:	83 c4 10             	add    esp,0x10
c0011347:	90                   	nop
c0011348:	83 c4 0c             	add    esp,0xc
c001134b:	c3                   	ret    

c001134c <KeGetEnv(Process*, char const*)>:
c001134c:	53                   	push   ebx
c001134d:	83 ec 08             	sub    esp,0x8
c0011350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011354:	39 05 f0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6f0,eax
c001135a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001135e:	74 04                	je     c0011364 <KeGetEnv(Process*, char const*)+0x18>
c0011360:	85 c0                	test   eax,eax
c0011362:	75 0b                	jne    c001136f <KeGetEnv(Process*, char const*)+0x23>
c0011364:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c0011369:	85 c0                	test   eax,eax
c001136b:	75 19                	jne    c0011386 <KeGetEnv(Process*, char const*)+0x3a>
c001136d:	eb 27                	jmp    c0011396 <KeGetEnv(Process*, char const*)+0x4a>
c001136f:	52                   	push   edx
c0011370:	52                   	push   edx
c0011371:	53                   	push   ebx
c0011372:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0011378:	e8 3b fc ff ff       	call   c0010fb8 <EnvVarContainer::getEnv(char const*)>
c001137d:	83 c4 10             	add    esp,0x10
c0011380:	85 c0                	test   eax,eax
c0011382:	75 28                	jne    c00113ac <KeGetEnv(Process*, char const*)+0x60>
c0011384:	eb de                	jmp    c0011364 <KeGetEnv(Process*, char const*)+0x18>
c0011386:	52                   	push   edx
c0011387:	52                   	push   edx
c0011388:	53                   	push   ebx
c0011389:	50                   	push   eax
c001138a:	e8 29 fc ff ff       	call   c0010fb8 <EnvVarContainer::getEnv(char const*)>
c001138f:	83 c4 10             	add    esp,0x10
c0011392:	85 c0                	test   eax,eax
c0011394:	75 16                	jne    c00113ac <KeGetEnv(Process*, char const*)+0x60>
c0011396:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001139a:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c001139f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00113a3:	83 c4 08             	add    esp,0x8
c00113a6:	5b                   	pop    ebx
c00113a7:	e9 0c fc ff ff       	jmp    c0010fb8 <EnvVarContainer::getEnv(char const*)>
c00113ac:	83 c4 08             	add    esp,0x8
c00113af:	5b                   	pop    ebx
c00113b0:	c3                   	ret    

c00113b1 <KeSetEnvSystem(char const*, char const*)>:
c00113b1:	83 ec 10             	sub    esp,0x10
c00113b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113bc:	ff 35 84 be 02 c0    	push   DWORD PTR ds:0xc002be84
c00113c2:	e8 2f fc ff ff       	call   c0010ff6 <EnvVarContainer::setEnv(char const*, char const*)>
c00113c7:	83 c4 1c             	add    esp,0x1c
c00113ca:	c3                   	ret    

c00113cb <KeSetEnvUser(char const*, char const*)>:
c00113cb:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c00113d0:	85 c0                	test   eax,eax
c00113d2:	74 15                	je     c00113e9 <KeSetEnvUser(char const*, char const*)+0x1e>
c00113d4:	83 ec 10             	sub    esp,0x10
c00113d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113df:	50                   	push   eax
c00113e0:	e8 11 fc ff ff       	call   c0010ff6 <EnvVarContainer::setEnv(char const*, char const*)>
c00113e5:	83 c4 1c             	add    esp,0x1c
c00113e8:	c3                   	ret    
c00113e9:	c3                   	ret    

c00113ea <KeSetEnvProcess(Process*, char const*, char const*)>:
c00113ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113ee:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00113f4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00113f8:	e9 f9 fb ff ff       	jmp    c0010ff6 <EnvVarContainer::setEnv(char const*, char const*)>

c00113fd <KeDeleteEnvSystem(char const*)>:
c00113fd:	c3                   	ret    

c00113fe <KeDeleteEnvUser(char const*)>:
c00113fe:	c3                   	ret    

c00113ff <KeDeleteEnvProcess(Process*, char const*)>:
c00113ff:	c3                   	ret    

c0011400 <KeNewProcessEnv(Process*)>:
c0011400:	83 ec 28             	sub    esp,0x28
c0011403:	6a 0c                	push   0xc
c0011405:	e8 c9 66 ff ff       	call   c0007ad3 <malloc>
c001140a:	5a                   	pop    edx
c001140b:	59                   	pop    ecx
c001140c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011410:	50                   	push   eax
c0011411:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011415:	e8 e0 fe ff ff       	call   c00112fa <EnvVarContainer::EnvVarContainer(Process*)>
c001141a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001141e:	83 c4 2c             	add    esp,0x2c
c0011421:	c3                   	ret    

c0011422 <KeCopyProcessEnv(Process*, Process*)>:
c0011422:	57                   	push   edi
c0011423:	56                   	push   esi
c0011424:	53                   	push   ebx
c0011425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011429:	83 ec 0c             	sub    esp,0xc
c001142c:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0011432:	6a 0c                	push   0xc
c0011434:	e8 9a 66 ff ff       	call   c0007ad3 <malloc>
c0011439:	89 c3                	mov    ebx,eax
c001143b:	58                   	pop    eax
c001143c:	5a                   	pop    edx
c001143d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011441:	53                   	push   ebx
c0011442:	e8 b3 fe ff ff       	call   c00112fa <EnvVarContainer::EnvVarContainer(Process*)>
c0011447:	8b 07                	mov    eax,DWORD PTR [edi]
c0011449:	89 03                	mov    DWORD PTR [ebx],eax
c001144b:	c1 e0 03             	shl    eax,0x3
c001144e:	89 04 24             	mov    DWORD PTR [esp],eax
c0011451:	e8 7d 66 ff ff       	call   c0007ad3 <malloc>
c0011456:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0011459:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001145b:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001145e:	89 c7                	mov    edi,eax
c0011460:	c1 e1 03             	shl    ecx,0x3
c0011463:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011465:	83 c4 10             	add    esp,0x10
c0011468:	89 d8                	mov    eax,ebx
c001146a:	5b                   	pop    ebx
c001146b:	5e                   	pop    esi
c001146c:	5f                   	pop    edi
c001146d:	c3                   	ret    

c001146e <KeLoadSystemEnv()>:
c001146e:	53                   	push   ebx
c001146f:	83 ec 14             	sub    esp,0x14
c0011472:	6a 0c                	push   0xc
c0011474:	e8 5a 66 ff ff       	call   c0007ad3 <malloc>
c0011479:	89 c3                	mov    ebx,eax
c001147b:	58                   	pop    eax
c001147c:	5a                   	pop    edx
c001147d:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0011483:	53                   	push   ebx
c0011484:	e8 71 fe ff ff       	call   c00112fa <EnvVarContainer::EnvVarContainer(Process*)>
c0011489:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001148c:	89 1d 84 be 02 c0    	mov    DWORD PTR ds:0xc002be84,ebx
c0011492:	e8 47 fe ff ff       	call   c00112de <EnvVarContainer::__loadSystem()>
c0011497:	83 c4 18             	add    esp,0x18
c001149a:	5b                   	pop    ebx
c001149b:	c3                   	ret    

c001149c <KeLoadUserEnv()>:
c001149c:	53                   	push   ebx
c001149d:	83 ec 14             	sub    esp,0x14
c00114a0:	6a 0c                	push   0xc
c00114a2:	e8 2c 66 ff ff       	call   c0007ad3 <malloc>
c00114a7:	89 c3                	mov    ebx,eax
c00114a9:	58                   	pop    eax
c00114aa:	5a                   	pop    edx
c00114ab:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00114b1:	53                   	push   ebx
c00114b2:	e8 43 fe ff ff       	call   c00112fa <EnvVarContainer::EnvVarContainer(Process*)>
c00114b7:	89 1d 80 be 02 c0    	mov    DWORD PTR ds:0xc002be80,ebx
c00114bd:	83 c4 18             	add    esp,0x18
c00114c0:	5b                   	pop    ebx
c00114c1:	c3                   	ret    

c00114c2 <KeFlushEnv()>:
c00114c2:	c3                   	ret    

c00114c3 <KeGetProcessTotalEnvCount(Process*)>:
c00114c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114c7:	8b 15 80 be 02 c0    	mov    edx,DWORD PTR ds:0xc002be80
c00114cd:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00114d3:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c00114d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00114da:	03 01                	add    eax,DWORD PTR [ecx]
c00114dc:	85 d2                	test   edx,edx
c00114de:	74 02                	je     c00114e2 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c00114e0:	03 02                	add    eax,DWORD PTR [edx]
c00114e2:	c3                   	ret    

c00114e3 <KeGetProcessEnvPair(Process*, int)>:
c00114e3:	57                   	push   edi
c00114e4:	56                   	push   esi
c00114e5:	8b 35 80 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be80
c00114eb:	53                   	push   ebx
c00114ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00114f0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00114f4:	85 f6                	test   esi,esi
c00114f6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00114fa:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0011500:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011502:	75 16                	jne    c001151a <KeGetProcessEnvPair(Process*, int)+0x37>
c0011504:	39 c2                	cmp    edx,eax
c0011506:	7c 16                	jl     c001151e <KeGetProcessEnvPair(Process*, int)+0x3b>
c0011508:	8b 0d 84 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002be84
c001150e:	8b 31                	mov    esi,DWORD PTR [ecx]
c0011510:	01 c6                	add    esi,eax
c0011512:	39 d6                	cmp    esi,edx
c0011514:	7e 3c                	jle    c0011552 <KeGetProcessEnvPair(Process*, int)+0x6f>
c0011516:	29 c2                	sub    edx,eax
c0011518:	eb 04                	jmp    c001151e <KeGetProcessEnvPair(Process*, int)+0x3b>
c001151a:	39 c2                	cmp    edx,eax
c001151c:	7d 05                	jge    c0011523 <KeGetProcessEnvPair(Process*, int)+0x40>
c001151e:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0011521:	eb 20                	jmp    c0011543 <KeGetProcessEnvPair(Process*, int)+0x60>
c0011523:	8b 3e                	mov    edi,DWORD PTR [esi]
c0011525:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0011528:	39 d1                	cmp    ecx,edx
c001152a:	7e 04                	jle    c0011530 <KeGetProcessEnvPair(Process*, int)+0x4d>
c001152c:	29 c2                	sub    edx,eax
c001152e:	eb 10                	jmp    c0011540 <KeGetProcessEnvPair(Process*, int)+0x5d>
c0011530:	8b 35 84 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be84
c0011536:	03 0e                	add    ecx,DWORD PTR [esi]
c0011538:	39 d1                	cmp    ecx,edx
c001153a:	7e 16                	jle    c0011552 <KeGetProcessEnvPair(Process*, int)+0x6f>
c001153c:	29 c2                	sub    edx,eax
c001153e:	29 fa                	sub    edx,edi
c0011540:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0011543:	8d 14 d0             	lea    edx,[eax+edx*8]
c0011546:	8b 02                	mov    eax,DWORD PTR [edx]
c0011548:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001154b:	89 03                	mov    DWORD PTR [ebx],eax
c001154d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0011550:	eb 1d                	jmp    c001156f <KeGetProcessEnvPair(Process*, int)+0x8c>
c0011552:	83 ec 0c             	sub    esp,0xc
c0011555:	68 d2 23 02 c0       	push   0xc00223d2
c001155a:	e8 ac 00 00 00       	call   c001160b <KePanic(char const*)>
c001155f:	83 c4 10             	add    esp,0x10
c0011562:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011568:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001156f:	89 d8                	mov    eax,ebx
c0011571:	5b                   	pop    ebx
c0011572:	5e                   	pop    esi
c0011573:	5f                   	pop    edi
c0011574:	c2 04 00             	ret    0x4

c0011577 <CPU::current()>:
c0011577:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001157c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011582:	c3                   	ret    

c0011583 <operator new(unsigned long)>:
c0011583:	e9 4b 65 ff ff       	jmp    c0007ad3 <malloc>

c0011588 <operator delete(void*)>:
c0011588:	e9 66 65 ff ff       	jmp    c0007af3 <rfree>

c001158d <disableIRQs()>:
c001158d:	fa                   	cli    
c001158e:	c3                   	ret    

c001158f <enableIRQs()>:
c001158f:	fb                   	sti    
c0011590:	c3                   	ret    

c0011591 <lockScheduler()>:
c0011591:	fa                   	cli    
c0011592:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0011598:	c3                   	ret    

c0011599 <unlockScheduler()>:
c0011599:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001159e:	48                   	dec    eax
c001159f:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00115a4:	75 01                	jne    c00115a7 <unlockScheduler()+0xe>
c00115a6:	fb                   	sti    
c00115a7:	c3                   	ret    

c00115a8 <lockStuff()>:
c00115a8:	fa                   	cli    
c00115a9:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00115af:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c00115b5:	c3                   	ret    

c00115b6 <unlockStuff()>:
c00115b6:	83 ec 0c             	sub    esp,0xc
c00115b9:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00115be:	48                   	dec    eax
c00115bf:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00115c4:	75 18                	jne    c00115de <unlockStuff()+0x28>
c00115c6:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c00115cd:	74 0f                	je     c00115de <unlockStuff()+0x28>
c00115cf:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00115d9:	e8 16 4b 00 00       	call   c00160f4 <schedule()>
c00115de:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00115e3:	48                   	dec    eax
c00115e4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00115e9:	75 01                	jne    c00115ec <unlockStuff()+0x36>
c00115eb:	fb                   	sti    
c00115ec:	83 c4 0c             	add    esp,0xc
c00115ef:	c3                   	ret    

c00115f0 <Virt::getAKernelVAS()>:
c00115f0:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c00115f5:	c3                   	ret    

c00115f6 <__not_memcpy>:
c00115f6:	57                   	push   edi
c00115f7:	56                   	push   esi
c00115f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00115fc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011600:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011604:	89 c7                	mov    edi,eax
c0011606:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011608:	5e                   	pop    esi
c0011609:	5f                   	pop    edi
c001160a:	c3                   	ret    

c001160b <KePanic(char const*)>:
c001160b:	c6 05 88 be 02 c0 01 	mov    BYTE PTR ds:0xc002be88,0x1
c0011612:	e9 6d 6a 00 00       	jmp    c0018084 <HalPanic(char const*)>

c0011617 <KePowerThread(void*)>:
c0011617:	83 ec 0c             	sub    esp,0xc
c001161a:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001161f:	48                   	dec    eax
c0011620:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0011625:	75 01                	jne    c0011628 <KePowerThread(void*)+0x11>
c0011627:	fb                   	sti    
c0011628:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c001162f:	83 ec 0c             	sub    esp,0xc
c0011632:	6a 0a                	push   0xa
c0011634:	e8 eb 4d 00 00       	call   c0016424 <sleep(unsigned int)>
c0011639:	83 c4 10             	add    esp,0x10
c001163c:	83 05 e4 be 02 c0 0a 	add    DWORD PTR ds:0xc002bee4,0xa
c0011643:	eb e3                	jmp    c0011628 <KePowerThread(void*)+0x11>

c0011645 <KeChangePowerSettings(PowerSettings)>:
c0011645:	57                   	push   edi
c0011646:	b9 09 00 00 00       	mov    ecx,0x9
c001164b:	56                   	push   esi
c001164c:	bf c0 be 02 c0       	mov    edi,0xc002bec0
c0011651:	fc                   	cld    
c0011652:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011656:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011658:	5e                   	pop    esi
c0011659:	5f                   	pop    edi
c001165a:	c3                   	ret    

c001165b <KeUserIOReceived()>:
c001165b:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c0011665:	c3                   	ret    

c0011666 <KeHandlePowerButton()>:
c0011666:	83 ec 0c             	sub    esp,0xc
c0011669:	a1 c0 be 02 c0       	mov    eax,ds:0xc002bec0
c001166e:	83 f8 02             	cmp    eax,0x2
c0011671:	75 10                	jne    c0011683 <KeHandlePowerButton()+0x1d>
c0011673:	83 ec 0c             	sub    esp,0xc
c0011676:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001167c:	e8 c9 5a ff ff       	call   c000714a <Computer::shutdown()>
c0011681:	eb 11                	jmp    c0011694 <KeHandlePowerButton()+0x2e>
c0011683:	48                   	dec    eax
c0011684:	75 11                	jne    c0011697 <KeHandlePowerButton()+0x31>
c0011686:	83 ec 0c             	sub    esp,0xc
c0011689:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001168f:	e8 e6 5a ff ff       	call   c000717a <Computer::sleep()>
c0011694:	83 c4 10             	add    esp,0x10
c0011697:	83 c4 0c             	add    esp,0xc
c001169a:	c3                   	ret    

c001169b <KeHandleSleepButton()>:
c001169b:	83 ec 0c             	sub    esp,0xc
c001169e:	a1 c4 be 02 c0       	mov    eax,ds:0xc002bec4
c00116a3:	83 f8 02             	cmp    eax,0x2
c00116a6:	75 10                	jne    c00116b8 <KeHandleSleepButton()+0x1d>
c00116a8:	83 ec 0c             	sub    esp,0xc
c00116ab:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00116b1:	e8 94 5a ff ff       	call   c000714a <Computer::shutdown()>
c00116b6:	eb 11                	jmp    c00116c9 <KeHandleSleepButton()+0x2e>
c00116b8:	48                   	dec    eax
c00116b9:	75 11                	jne    c00116cc <KeHandleSleepButton()+0x31>
c00116bb:	83 ec 0c             	sub    esp,0xc
c00116be:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00116c4:	e8 b1 5a ff ff       	call   c000717a <Computer::sleep()>
c00116c9:	83 c4 10             	add    esp,0x10
c00116cc:	83 c4 0c             	add    esp,0xc
c00116cf:	c3                   	ret    

c00116d0 <KeSetupPowerManager()>:
c00116d0:	83 ec 0c             	sub    esp,0xc
c00116d3:	68 f0 00 00 00       	push   0xf0
c00116d8:	6a 00                	push   0x0
c00116da:	68 17 16 01 c0       	push   0xc0011617
c00116df:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00116e5:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c00116ef:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c00116f6:	e8 ad 47 00 00       	call   c0015ea8 <Process::createThread(void (*)(void*), void*, int)>
c00116fb:	c7 05 c0 be 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002bec0,0x2
c0011705:	c7 05 c4 be 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002bec4,0x1
c001170f:	c7 05 c8 be 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002bec8,0x3
c0011719:	c7 05 cc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002becc,0x0
c0011723:	c7 05 d8 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed8,0x0
c001172d:	c7 05 d0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed0,0x0
c0011737:	c7 05 dc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bedc,0x0
c0011741:	c7 05 d4 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bed4,0x3c
c001174b:	c7 05 e0 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bee0,0x3c
c0011755:	83 c4 1c             	add    esp,0x1c
c0011758:	c3                   	ret    

c0011759 <KeRand()>:
c0011759:	69 05 e8 be 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002bee8,0x2875
c0011763:	69 0d ec be 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002beec,0xa2e7b175
c001176d:	53                   	push   ebx
c001176e:	01 c1                	add    ecx,eax
c0011770:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0011775:	f7 25 e8 be 02 c0    	mul    DWORD PTR ds:0xc002bee8
c001177b:	01 ca                	add    edx,ecx
c001177d:	05 ef 04 b5 00       	add    eax,0xb504ef
c0011782:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c0011787:	83 d2 00             	adc    edx,0x0
c001178a:	0f b7 da             	movzx  ebx,dx
c001178d:	89 1d ec be 02 c0    	mov    DWORD PTR ds:0xc002beec,ebx
c0011793:	0f ac d8 0e          	shrd   eax,ebx,0xe
c0011797:	5b                   	pop    ebx
c0011798:	c3                   	ret    

c0011799 <KeSeedRand(unsigned int)>:
c0011799:	53                   	push   ebx
c001179a:	83 ec 08             	sub    esp,0x8
c001179d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00117a1:	e8 fd 6b 00 00       	call   c00183a3 <HalGetRand()>
c00117a6:	c7 05 ec be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002beec,0x0
c00117b0:	31 d8                	xor    eax,ebx
c00117b2:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c00117b7:	e8 9d ff ff ff       	call   c0011759 <KeRand()>
c00117bc:	83 c4 08             	add    esp,0x8
c00117bf:	5b                   	pop    ebx
c00117c0:	eb 97                	jmp    c0011759 <KeRand()>

c00117c2 <KeInitRand()>:
c00117c2:	83 ec 0c             	sub    esp,0xc
c00117c5:	e8 ce 69 00 00       	call   c0018198 <HalQueryPerformanceCounter()>
c00117ca:	0f 20 da             	mov    edx,cr3
c00117cd:	0f 22 da             	mov    cr3,edx
c00117d0:	0f 20 da             	mov    edx,cr3
c00117d3:	0f 22 da             	mov    cr3,edx
c00117d6:	0f 20 da             	mov    edx,cr3
c00117d9:	0f 22 da             	mov    cr3,edx
c00117dc:	0f 20 da             	mov    edx,cr3
c00117df:	0f 22 da             	mov    cr3,edx
c00117e2:	83 ec 0c             	sub    esp,0xc
c00117e5:	35 03 8a 95 38       	xor    eax,0x38958a03
c00117ea:	50                   	push   eax
c00117eb:	e8 a9 ff ff ff       	call   c0011799 <KeSeedRand(unsigned int)>
c00117f0:	83 c4 1c             	add    esp,0x1c
c00117f3:	c3                   	ret    

c00117f4 <KeResolveCompatibilitySymbol(char*)>:
c00117f4:	83 ec 0c             	sub    esp,0xc
c00117f7:	83 ec 08             	sub    esp,0x8
c00117fa:	68 ec 23 02 c0       	push   0xc00223ec
c00117ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011803:	e8 78 ef fe ff       	call   c0000780 <strcmp>
c0011808:	83 c4 10             	add    esp,0x10
c001180b:	85 c0                	test   eax,eax
c001180d:	0f 94 c0             	sete   al
c0011810:	0f b6 c0             	movzx  eax,al
c0011813:	85 c0                	test   eax,eax
c0011815:	74 0d                	je     c0011824 <KeResolveCompatibilitySymbol(char*)+0x30>
c0011817:	b8 b8 6e 02 c0       	mov    eax,0xc0026eb8
c001181c:	e9 8b 01 00 00       	jmp    c00119ac <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011821:	8d 76 00             	lea    esi,[esi+0x0]
c0011824:	83 ec 08             	sub    esp,0x8
c0011827:	68 f5 23 02 c0       	push   0xc00223f5
c001182c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011830:	e8 4b ef fe ff       	call   c0000780 <strcmp>
c0011835:	83 c4 10             	add    esp,0x10
c0011838:	85 c0                	test   eax,eax
c001183a:	0f 94 c0             	sete   al
c001183d:	0f b6 c0             	movzx  eax,al
c0011840:	85 c0                	test   eax,eax
c0011842:	74 0c                	je     c0011850 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0011844:	b8 b0 f7 01 c0       	mov    eax,0xc001f7b0
c0011849:	e9 5e 01 00 00       	jmp    c00119ac <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001184e:	66 90                	xchg   ax,ax
c0011850:	83 ec 08             	sub    esp,0x8
c0011853:	68 ff 23 02 c0       	push   0xc00223ff
c0011858:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001185c:	e8 1f ef fe ff       	call   c0000780 <strcmp>
c0011861:	83 c4 10             	add    esp,0x10
c0011864:	85 c0                	test   eax,eax
c0011866:	0f 94 c0             	sete   al
c0011869:	0f b6 c0             	movzx  eax,al
c001186c:	85 c0                	test   eax,eax
c001186e:	74 0c                	je     c001187c <KeResolveCompatibilitySymbol(char*)+0x88>
c0011870:	b8 e4 f4 01 c0       	mov    eax,0xc001f4e4
c0011875:	e9 32 01 00 00       	jmp    c00119ac <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001187a:	66 90                	xchg   ax,ax
c001187c:	83 ec 08             	sub    esp,0x8
c001187f:	68 08 24 02 c0       	push   0xc0022408
c0011884:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011888:	e8 f3 ee fe ff       	call   c0000780 <strcmp>
c001188d:	83 c4 10             	add    esp,0x10
c0011890:	85 c0                	test   eax,eax
c0011892:	0f 94 c0             	sete   al
c0011895:	0f b6 c0             	movzx  eax,al
c0011898:	85 c0                	test   eax,eax
c001189a:	74 0c                	je     c00118a8 <KeResolveCompatibilitySymbol(char*)+0xb4>
c001189c:	b8 0b 16 01 c0       	mov    eax,0xc001160b
c00118a1:	e9 06 01 00 00       	jmp    c00119ac <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118a6:	66 90                	xchg   ax,ax
c00118a8:	83 ec 08             	sub    esp,0x8
c00118ab:	68 1b 24 02 c0       	push   0xc002241b
c00118b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118b4:	e8 c7 ee fe ff       	call   c0000780 <strcmp>
c00118b9:	83 c4 10             	add    esp,0x10
c00118bc:	85 c0                	test   eax,eax
c00118be:	0f 94 c0             	sete   al
c00118c1:	0f b6 c0             	movzx  eax,al
c00118c4:	85 c0                	test   eax,eax
c00118c6:	74 0c                	je     c00118d4 <KeResolveCompatibilitySymbol(char*)+0xe0>
c00118c8:	b8 0d 0f 01 c0       	mov    eax,0xc0010f0d
c00118cd:	e9 da 00 00 00       	jmp    c00119ac <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118d2:	66 90                	xchg   ax,ax
c00118d4:	83 ec 08             	sub    esp,0x8
c00118d7:	68 38 24 02 c0       	push   0xc0022438
c00118dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118e0:	e8 9b ee fe ff       	call   c0000780 <strcmp>
c00118e5:	83 c4 10             	add    esp,0x10
c00118e8:	85 c0                	test   eax,eax
c00118ea:	0f 94 c0             	sete   al
c00118ed:	0f b6 c0             	movzx  eax,al
c00118f0:	85 c0                	test   eax,eax
c00118f2:	74 0c                	je     c0011900 <KeResolveCompatibilitySymbol(char*)+0x10c>
c00118f4:	b8 b0 f8 01 c0       	mov    eax,0xc001f8b0
c00118f9:	e9 ae 00 00 00       	jmp    c00119ac <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118fe:	66 90                	xchg   ax,ax
c0011900:	83 ec 08             	sub    esp,0x8
c0011903:	68 42 24 02 c0       	push   0xc0022442
c0011908:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001190c:	e8 6f ee fe ff       	call   c0000780 <strcmp>
c0011911:	83 c4 10             	add    esp,0x10
c0011914:	85 c0                	test   eax,eax
c0011916:	0f 94 c0             	sete   al
c0011919:	0f b6 c0             	movzx  eax,al
c001191c:	85 c0                	test   eax,eax
c001191e:	74 0c                	je     c001192c <KeResolveCompatibilitySymbol(char*)+0x138>
c0011920:	b8 30 f6 01 c0       	mov    eax,0xc001f630
c0011925:	e9 82 00 00 00       	jmp    c00119ac <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001192a:	66 90                	xchg   ax,ax
c001192c:	83 ec 08             	sub    esp,0x8
c001192f:	68 4b 24 02 c0       	push   0xc002244b
c0011934:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011938:	e8 43 ee fe ff       	call   c0000780 <strcmp>
c001193d:	83 c4 10             	add    esp,0x10
c0011940:	85 c0                	test   eax,eax
c0011942:	0f 94 c0             	sete   al
c0011945:	0f b6 c0             	movzx  eax,al
c0011948:	85 c0                	test   eax,eax
c001194a:	74 08                	je     c0011954 <KeResolveCompatibilitySymbol(char*)+0x160>
c001194c:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c0011951:	eb 59                	jmp    c00119ac <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011953:	90                   	nop
c0011954:	83 ec 08             	sub    esp,0x8
c0011957:	68 63 24 02 c0       	push   0xc0022463
c001195c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011960:	e8 1b ee fe ff       	call   c0000780 <strcmp>
c0011965:	83 c4 10             	add    esp,0x10
c0011968:	85 c0                	test   eax,eax
c001196a:	0f 94 c0             	sete   al
c001196d:	0f b6 c0             	movzx  eax,al
c0011970:	85 c0                	test   eax,eax
c0011972:	74 08                	je     c001197c <KeResolveCompatibilitySymbol(char*)+0x188>
c0011974:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c0011979:	eb 31                	jmp    c00119ac <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001197b:	90                   	nop
c001197c:	83 ec 08             	sub    esp,0x8
c001197f:	68 70 24 02 c0       	push   0xc0022470
c0011984:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011988:	e8 f3 ed fe ff       	call   c0000780 <strcmp>
c001198d:	83 c4 10             	add    esp,0x10
c0011990:	85 c0                	test   eax,eax
c0011992:	0f 94 c0             	sete   al
c0011995:	0f b6 c0             	movzx  eax,al
c0011998:	85 c0                	test   eax,eax
c001199a:	74 08                	je     c00119a4 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c001199c:	b8 bd 6e 02 c0       	mov    eax,0xc0026ebd
c00119a1:	eb 09                	jmp    c00119ac <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00119a3:	90                   	nop
c00119a4:	b8 00 00 00 00       	mov    eax,0x0
c00119a9:	8d 76 00             	lea    esi,[esi+0x0]
c00119ac:	83 c4 0c             	add    esp,0xc
c00119af:	c3                   	ret    

c00119b0 <KiSigKill(int)>:
c00119b0:	83 ec 0c             	sub    esp,0xc
c00119b3:	6a 00                	push   0x0
c00119b5:	6a 00                	push   0x0
c00119b7:	6a ff                	push   0xffffffff
c00119b9:	6a 01                	push   0x1
c00119bb:	e8 92 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00119c0:	83 c4 1c             	add    esp,0x1c
c00119c3:	c3                   	ret    

c00119c4 <KiDefaultSignalHandlerIgnore(int)>:
c00119c4:	c3                   	ret    

c00119c5 <KiDefaultSignalHandlerPause(int)>:
c00119c5:	57                   	push   edi
c00119c6:	b9 07 00 00 00       	mov    ecx,0x7
c00119cb:	56                   	push   esi
c00119cc:	be b9 24 02 c0       	mov    esi,0xc00224b9
c00119d1:	83 ec 24             	sub    esp,0x24
c00119d4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00119d8:	fc                   	cld    
c00119d9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00119db:	8d 44 24 04          	lea    eax,[esp+0x4]
c00119df:	50                   	push   eax
c00119e0:	6a 00                	push   0x0
c00119e2:	6a 00                	push   0x0
c00119e4:	6a 27                	push   0x27
c00119e6:	e8 67 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00119eb:	83 c4 34             	add    esp,0x34
c00119ee:	5e                   	pop    esi
c00119ef:	5f                   	pop    edi
c00119f0:	c3                   	ret    

c00119f1 <KiDefaultSignalHandlerResume(int)>:
c00119f1:	57                   	push   edi
c00119f2:	b9 1d 00 00 00       	mov    ecx,0x1d
c00119f7:	56                   	push   esi
c00119f8:	be d5 24 02 c0       	mov    esi,0xc00224d5
c00119fd:	83 ec 24             	sub    esp,0x24
c0011a00:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0011a04:	fc                   	cld    
c0011a05:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011a07:	8d 44 24 03          	lea    eax,[esp+0x3]
c0011a0b:	50                   	push   eax
c0011a0c:	6a 00                	push   0x0
c0011a0e:	6a 00                	push   0x0
c0011a10:	6a 27                	push   0x27
c0011a12:	e8 3b 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011a17:	83 c4 34             	add    esp,0x34
c0011a1a:	5e                   	pop    esi
c0011a1b:	5f                   	pop    edi
c0011a1c:	c3                   	ret    

c0011a1d <KeDeinitSignals(SigHandlerBlock*)>:
c0011a1d:	e9 c1 60 ff ff       	jmp    c0007ae3 <free>

c0011a22 <KeInitSignals()>:
c0011a22:	53                   	push   ebx
c0011a23:	83 ec 14             	sub    esp,0x14
c0011a26:	68 c8 00 00 00       	push   0xc8
c0011a2b:	e8 a3 60 ff ff       	call   c0007ad3 <malloc>
c0011a30:	83 c4 0c             	add    esp,0xc
c0011a33:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0011a3d:	89 c3                	mov    ebx,eax
c0011a3f:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0011a49:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0011a4f:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c0011a53:	6a 20                	push   0x20
c0011a55:	6a 00                	push   0x0
c0011a57:	50                   	push   eax
c0011a58:	e8 93 ea fe ff       	call   c00004f0 <memset>
c0011a5d:	83 c4 0c             	add    esp,0xc
c0011a60:	6a 44                	push   0x44
c0011a62:	6a 00                	push   0x0
c0011a64:	53                   	push   ebx
c0011a65:	e8 86 ea fe ff       	call   c00004f0 <memset>
c0011a6a:	83 c4 18             	add    esp,0x18
c0011a6d:	89 d8                	mov    eax,ebx
c0011a6f:	5b                   	pop    ebx
c0011a70:	c3                   	ret    

c0011a71 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011a71:	53                   	push   ebx
c0011a72:	b8 01 00 00 00       	mov    eax,0x1
c0011a77:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011a7b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011a7f:	83 f9 10             	cmp    ecx,0x10
c0011a82:	7f 21                	jg     c0011aa5 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0011a84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a88:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0011a8b:	89 03                	mov    DWORD PTR [ebx],eax
c0011a8d:	b8 01 00 00 00       	mov    eax,0x1
c0011a92:	d3 e0                	shl    eax,cl
c0011a94:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011a98:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0011a9b:	31 c0                	xor    eax,eax
c0011a9d:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0011aa5:	5b                   	pop    ebx
c0011aa6:	c3                   	ret    

c0011aa7 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0011aa7:	55                   	push   ebp
c0011aa8:	57                   	push   edi
c0011aa9:	bf 08 00 00 00       	mov    edi,0x8
c0011aae:	56                   	push   esi
c0011aaf:	53                   	push   ebx
c0011ab0:	83 ec 18             	sub    esp,0x18
c0011ab3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011ab7:	68 f2 24 02 c0       	push   0xc00224f2
c0011abc:	e8 49 8e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0011ac1:	83 c4 10             	add    esp,0x10
c0011ac4:	31 c9                	xor    ecx,ecx
c0011ac6:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011acd:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011ad3:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0011ad7:	99                   	cdq    
c0011ad8:	f7 ff                	idiv   edi
c0011ada:	8d 42 24             	lea    eax,[edx+0x24]
c0011add:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011ae1:	85 f6                	test   esi,esi
c0011ae3:	75 1a                	jne    c0011aff <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0011ae5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011ae9:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0011aed:	50                   	push   eax
c0011aee:	50                   	push   eax
c0011aef:	52                   	push   edx
c0011af0:	68 03 25 02 c0       	push   0xc0022503
c0011af5:	e8 10 8e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0011afa:	83 c4 10             	add    esp,0x10
c0011afd:	eb 1b                	jmp    c0011b1a <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0011aff:	41                   	inc    ecx
c0011b00:	83 f9 08             	cmp    ecx,0x8
c0011b03:	75 ce                	jne    c0011ad3 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0011b05:	83 ec 0c             	sub    esp,0xc
c0011b08:	be 01 00 00 00       	mov    esi,0x1
c0011b0d:	68 24 25 02 c0       	push   0xc0022524
c0011b12:	e8 f3 8d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0011b17:	83 c4 10             	add    esp,0x10
c0011b1a:	83 c4 0c             	add    esp,0xc
c0011b1d:	89 f0                	mov    eax,esi
c0011b1f:	5b                   	pop    ebx
c0011b20:	5e                   	pop    esi
c0011b21:	5f                   	pop    edi
c0011b22:	5d                   	pop    ebp
c0011b23:	c3                   	ret    

c0011b24 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0011b24:	55                   	push   ebp
c0011b25:	57                   	push   edi
c0011b26:	56                   	push   esi
c0011b27:	53                   	push   ebx
c0011b28:	51                   	push   ecx
c0011b29:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011b2d:	85 db                	test   ebx,ebx
c0011b2f:	0f 84 bc 00 00 00    	je     c0011bf1 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011b35:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011b3c:	0f 84 af 00 00 00    	je     c0011bf1 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011b42:	31 c9                	xor    ecx,ecx
c0011b44:	bf 08 00 00 00       	mov    edi,0x8
c0011b49:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011b4f:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011b52:	99                   	cdq    
c0011b53:	f7 ff                	idiv   edi
c0011b55:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011b5c:	85 ed                	test   ebp,ebp
c0011b5e:	0f 84 9e 00 00 00    	je     c0011c02 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0011b64:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011b6a:	89 e9                	mov    ecx,ebp
c0011b6c:	bf 01 00 00 00       	mov    edi,0x1
c0011b71:	d3 e7                	shl    edi,cl
c0011b73:	31 c9                	xor    ecx,ecx
c0011b75:	89 04 24             	mov    DWORD PTR [esp],eax
c0011b78:	b8 01 00 00 00       	mov    eax,0x1
c0011b7d:	d3 e0                	shl    eax,cl
c0011b7f:	85 04 24             	test   DWORD PTR [esp],eax
c0011b82:	74 06                	je     c0011b8a <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0011b84:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011b88:	75 67                	jne    c0011bf1 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011b8a:	41                   	inc    ecx
c0011b8b:	83 f9 11             	cmp    ecx,0x11
c0011b8e:	75 e8                	jne    c0011b78 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0011b90:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011b93:	46                   	inc    esi
c0011b94:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011b9a:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0011ba5:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011bac:	09 f8                	or     eax,edi
c0011bae:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011bb4:	31 c0                	xor    eax,eax
c0011bb6:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011bbe:	74 09                	je     c0011bc9 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011bc0:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011bc7:	eb 06                	jmp    c0011bcf <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0011bc9:	40                   	inc    eax
c0011bca:	83 f8 08             	cmp    eax,0x8
c0011bcd:	75 e7                	jne    c0011bb6 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0011bcf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011bd3:	83 fd 09             	cmp    ebp,0x9
c0011bd6:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011bd9:	89 2a                	mov    DWORD PTR [edx],ebp
c0011bdb:	75 07                	jne    c0011be4 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011bdd:	b8 b0 19 01 c0       	mov    eax,0xc00119b0
c0011be2:	eb 31                	jmp    c0011c15 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011be4:	83 f8 01             	cmp    eax,0x1
c0011be7:	75 0c                	jne    c0011bf5 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0011be9:	f7 d7                	not    edi
c0011beb:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011bf1:	31 c0                	xor    eax,eax
c0011bf3:	eb 20                	jmp    c0011c15 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011bf5:	85 c0                	test   eax,eax
c0011bf7:	75 1c                	jne    c0011c15 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011bf9:	8b 04 ad 20 3d 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdc2e0]
c0011c00:	eb 13                	jmp    c0011c15 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011c02:	41                   	inc    ecx
c0011c03:	46                   	inc    esi
c0011c04:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011c0a:	83 f9 08             	cmp    ecx,0x8
c0011c0d:	0f 85 36 ff ff ff    	jne    c0011b49 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0011c13:	eb dc                	jmp    c0011bf1 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011c15:	5a                   	pop    edx
c0011c16:	5b                   	pop    ebx
c0011c17:	5e                   	pop    esi
c0011c18:	5f                   	pop    edi
c0011c19:	5d                   	pop    ebp
c0011c1a:	c3                   	ret    

c0011c1b <KiCheckSignalZ>:
c0011c1b:	83 ec 10             	sub    esp,0x10
c0011c1e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011c22:	50                   	push   eax
c0011c23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c28:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c2b:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011c31:	e8 ee fe ff ff       	call   c0011b24 <KeCheckSignal(SigHandlerBlock*, int*)>
c0011c36:	5a                   	pop    edx
c0011c37:	31 d2                	xor    edx,edx
c0011c39:	59                   	pop    ecx
c0011c3a:	85 c0                	test   eax,eax
c0011c3c:	74 19                	je     c0011c57 <KiCheckSignalZ+0x3c>
c0011c3e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011c44:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011c47:	89 02                	mov    DWORD PTR [edx],eax
c0011c49:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011c50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c54:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0011c57:	89 d0                	mov    eax,edx
c0011c59:	83 c4 10             	add    esp,0x10
c0011c5c:	c3                   	ret    

c0011c5d <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011c5d:	56                   	push   esi
c0011c5e:	53                   	push   ebx
c0011c5f:	bb 01 00 00 00       	mov    ebx,0x1
c0011c64:	52                   	push   edx
c0011c65:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011c69:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011c6d:	d3 e3                	shl    ebx,cl
c0011c6f:	83 f9 10             	cmp    ecx,0x10
c0011c72:	7f 08                	jg     c0011c7c <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011c74:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011c7a:	75 10                	jne    c0011c8c <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011c7c:	83 ec 0c             	sub    esp,0xc
c0011c7f:	68 35 25 02 c0       	push   0xc0022535
c0011c84:	e8 82 f9 ff ff       	call   c001160b <KePanic(char const*)>
c0011c89:	83 c4 10             	add    esp,0x10
c0011c8c:	f7 d3                	not    ebx
c0011c8e:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011c94:	58                   	pop    eax
c0011c95:	5b                   	pop    ebx
c0011c96:	5e                   	pop    esi
c0011c97:	c3                   	ret    

c0011c98 <KiFinishSignalZ>:
c0011c98:	53                   	push   ebx
c0011c99:	83 ec 10             	sub    esp,0x10
c0011c9c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011ca0:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011ca3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ca8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011cab:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011cb1:	e8 a7 ff ff ff       	call   c0011c5d <KeCompleteSignal(SigHandlerBlock*, int)>
c0011cb6:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011cbc:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011cc3:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011cca:	83 c4 18             	add    esp,0x18
c0011ccd:	5b                   	pop    ebx
c0011cce:	c3                   	ret    

c0011ccf <SysSeekDir(regs*)>:
c0011ccf:	31 c0                	xor    eax,eax
c0011cd1:	31 d2                	xor    edx,edx
c0011cd3:	c3                   	ret    

c0011cd4 <SysTellDir(regs*)>:
c0011cd4:	31 c0                	xor    eax,eax
c0011cd6:	31 d2                	xor    edx,edx
c0011cd8:	c3                   	ret    

c0011cd9 <SysVerify(regs*)>:
c0011cd9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cdd:	31 d2                	xor    edx,edx
c0011cdf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011ce2:	c3                   	ret    

c0011ce3 <SysGetArgc(regs*)>:
c0011ce3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ce8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ceb:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011cf1:	89 c2                	mov    edx,eax
c0011cf3:	c1 fa 1f             	sar    edx,0x1f
c0011cf6:	c3                   	ret    

c0011cf7 <SysTTYName(regs*)>:
c0011cf7:	b8 01 00 00 00       	mov    eax,0x1
c0011cfc:	31 d2                	xor    edx,edx
c0011cfe:	c3                   	ret    

c0011cff <SysFormatDisk(regs*)>:
c0011cff:	56                   	push   esi
c0011d00:	53                   	push   ebx
c0011d01:	83 ec 04             	sub    esp,0x4
c0011d04:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011d08:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c0011d0e:	eb 2a                	jmp    c0011d3a <SysFormatDisk(regs*)+0x3b>
c0011d10:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011d13:	83 ec 0c             	sub    esp,0xc
c0011d16:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011d19:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011d1b:	51                   	push   ecx
c0011d1c:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011d1f:	51                   	push   ecx
c0011d20:	50                   	push   eax
c0011d21:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0011d28:	50                   	push   eax
c0011d29:	53                   	push   ebx
c0011d2a:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011d2d:	83 c4 20             	add    esp,0x20
c0011d30:	83 f8 08             	cmp    eax,0x8
c0011d33:	89 c1                	mov    ecx,eax
c0011d35:	75 14                	jne    c0011d4b <SysFormatDisk(regs*)+0x4c>
c0011d37:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011d3a:	85 db                	test   ebx,ebx
c0011d3c:	75 d2                	jne    c0011d10 <SysFormatDisk(regs*)+0x11>
c0011d3e:	b8 03 00 00 00       	mov    eax,0x3
c0011d43:	31 d2                	xor    edx,edx
c0011d45:	83 c4 04             	add    esp,0x4
c0011d48:	5b                   	pop    ebx
c0011d49:	5e                   	pop    esi
c0011d4a:	c3                   	ret    
c0011d4b:	85 c0                	test   eax,eax
c0011d4d:	74 13                	je     c0011d62 <SysFormatDisk(regs*)+0x63>
c0011d4f:	31 d2                	xor    edx,edx
c0011d51:	83 f9 09             	cmp    ecx,0x9
c0011d54:	b8 01 00 00 00       	mov    eax,0x1
c0011d59:	74 ea                	je     c0011d45 <SysFormatDisk(regs*)+0x46>
c0011d5b:	b8 02 00 00 00       	mov    eax,0x2
c0011d60:	eb e1                	jmp    c0011d43 <SysFormatDisk(regs*)+0x44>
c0011d62:	31 c0                	xor    eax,eax
c0011d64:	eb dd                	jmp    c0011d43 <SysFormatDisk(regs*)+0x44>

c0011d66 <SysSetDiskVolumeLabel(regs*)>:
c0011d66:	56                   	push   esi
c0011d67:	53                   	push   ebx
c0011d68:	83 ec 04             	sub    esp,0x4
c0011d6b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011d6f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011d72:	83 f8 19             	cmp    eax,0x19
c0011d75:	77 33                	ja     c0011daa <SysSetDiskVolumeLabel(regs*)+0x44>
c0011d77:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0011d7e:	85 c9                	test   ecx,ecx
c0011d80:	74 28                	je     c0011daa <SysSetDiskVolumeLabel(regs*)+0x44>
c0011d82:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011d85:	85 db                	test   ebx,ebx
c0011d87:	74 21                	je     c0011daa <SysSetDiskVolumeLabel(regs*)+0x44>
c0011d89:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011d8f:	85 d2                	test   edx,edx
c0011d91:	74 17                	je     c0011daa <SysSetDiskVolumeLabel(regs*)+0x44>
c0011d93:	8b 32                	mov    esi,DWORD PTR [edx]
c0011d95:	53                   	push   ebx
c0011d96:	50                   	push   eax
c0011d97:	51                   	push   ecx
c0011d98:	52                   	push   edx
c0011d99:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011d9c:	83 c4 10             	add    esp,0x10
c0011d9f:	83 c4 04             	add    esp,0x4
c0011da2:	5b                   	pop    ebx
c0011da3:	5e                   	pop    esi
c0011da4:	89 c2                	mov    edx,eax
c0011da6:	c1 fa 1f             	sar    edx,0x1f
c0011da9:	c3                   	ret    
c0011daa:	83 c4 04             	add    esp,0x4
c0011dad:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011db2:	5b                   	pop    ebx
c0011db3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011db8:	5e                   	pop    esi
c0011db9:	c3                   	ret    

c0011dba <SysGetDiskVolumeLabel(regs*)>:
c0011dba:	57                   	push   edi
c0011dbb:	56                   	push   esi
c0011dbc:	53                   	push   ebx
c0011dbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011dc1:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011dc4:	83 fa 19             	cmp    edx,0x19
c0011dc7:	77 3c                	ja     c0011e05 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011dc9:	8b 0c 95 80 b8 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd4780]
c0011dd0:	85 c9                	test   ecx,ecx
c0011dd2:	74 31                	je     c0011e05 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011dd4:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011dd7:	85 db                	test   ebx,ebx
c0011dd9:	74 2a                	je     c0011e05 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011ddb:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011dde:	85 f6                	test   esi,esi
c0011de0:	74 23                	je     c0011e05 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011de2:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011de8:	85 c0                	test   eax,eax
c0011dea:	74 19                	je     c0011e05 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011dec:	83 ec 0c             	sub    esp,0xc
c0011def:	8b 38                	mov    edi,DWORD PTR [eax]
c0011df1:	56                   	push   esi
c0011df2:	53                   	push   ebx
c0011df3:	52                   	push   edx
c0011df4:	51                   	push   ecx
c0011df5:	50                   	push   eax
c0011df6:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011df9:	83 c4 20             	add    esp,0x20
c0011dfc:	5b                   	pop    ebx
c0011dfd:	5e                   	pop    esi
c0011dfe:	89 c2                	mov    edx,eax
c0011e00:	c1 fa 1f             	sar    edx,0x1f
c0011e03:	5f                   	pop    edi
c0011e04:	c3                   	ret    
c0011e05:	5b                   	pop    ebx
c0011e06:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011e0b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e10:	5e                   	pop    esi
c0011e11:	5f                   	pop    edi
c0011e12:	c3                   	ret    

c0011e13 <SysShutdown(regs*)>:
c0011e13:	57                   	push   edi
c0011e14:	56                   	push   esi
c0011e15:	83 ec 04             	sub    esp,0x4
c0011e18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e1c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011e1f:	85 c0                	test   eax,eax
c0011e21:	74 1e                	je     c0011e41 <SysShutdown(regs*)+0x2e>
c0011e23:	83 f8 01             	cmp    eax,0x1
c0011e26:	74 5f                	je     c0011e87 <SysShutdown(regs*)+0x74>
c0011e28:	83 f8 02             	cmp    eax,0x2
c0011e2b:	be ff ff ff ff       	mov    esi,0xffffffff
c0011e30:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011e35:	74 32                	je     c0011e69 <SysShutdown(regs*)+0x56>
c0011e37:	83 c4 04             	add    esp,0x4
c0011e3a:	89 f0                	mov    eax,esi
c0011e3c:	5e                   	pop    esi
c0011e3d:	89 fa                	mov    edx,edi
c0011e3f:	5f                   	pop    edi
c0011e40:	c3                   	ret    
c0011e41:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011e46:	be ff ff ff ff       	mov    esi,0xffffffff
c0011e4b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011e50:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e52:	6a 00                	push   0x0
c0011e54:	6a 00                	push   0x0
c0011e56:	6a 00                	push   0x0
c0011e58:	50                   	push   eax
c0011e59:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011e5c:	83 c4 10             	add    esp,0x10
c0011e5f:	89 f0                	mov    eax,esi
c0011e61:	83 c4 04             	add    esp,0x4
c0011e64:	89 fa                	mov    edx,edi
c0011e66:	5e                   	pop    esi
c0011e67:	5f                   	pop    edi
c0011e68:	c3                   	ret    
c0011e69:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011e6e:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e70:	6a 00                	push   0x0
c0011e72:	6a 00                	push   0x0
c0011e74:	6a 01                	push   0x1
c0011e76:	50                   	push   eax
c0011e77:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011e7a:	83 c4 10             	add    esp,0x10
c0011e7d:	89 f0                	mov    eax,esi
c0011e7f:	83 c4 04             	add    esp,0x4
c0011e82:	89 fa                	mov    edx,edi
c0011e84:	5e                   	pop    esi
c0011e85:	5f                   	pop    edi
c0011e86:	c3                   	ret    
c0011e87:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c0011e8c:	85 c0                	test   eax,eax
c0011e8e:	74 02                	je     c0011e92 <SysShutdown(regs*)+0x7f>
c0011e90:	ff d0                	call   eax
c0011e92:	31 f6                	xor    esi,esi
c0011e94:	83 c4 04             	add    esp,0x4
c0011e97:	89 f0                	mov    eax,esi
c0011e99:	31 ff                	xor    edi,edi
c0011e9b:	5e                   	pop    esi
c0011e9c:	89 fa                	mov    edx,edi
c0011e9e:	5f                   	pop    edi
c0011e9f:	c3                   	ret    

c0011ea0 <SysRealpath(regs*)>:
c0011ea0:	53                   	push   ebx
c0011ea1:	83 ec 08             	sub    esp,0x8
c0011ea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ea8:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0011eab:	85 c9                	test   ecx,ecx
c0011ead:	74 36                	je     c0011ee5 <SysRealpath(regs*)+0x45>
c0011eaf:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011eb2:	31 d2                	xor    edx,edx
c0011eb4:	b8 01 00 00 00       	mov    eax,0x1
c0011eb9:	85 db                	test   ebx,ebx
c0011ebb:	75 05                	jne    c0011ec2 <SysRealpath(regs*)+0x22>
c0011ebd:	83 c4 08             	add    esp,0x8
c0011ec0:	5b                   	pop    ebx
c0011ec1:	c3                   	ret    
c0011ec2:	6a 00                	push   0x0
c0011ec4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ec9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ecc:	05 0c 01 00 00       	add    eax,0x10c
c0011ed1:	50                   	push   eax
c0011ed2:	51                   	push   ecx
c0011ed3:	53                   	push   ebx
c0011ed4:	e8 df 99 ff ff       	call   c000b8b8 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011ed9:	83 c4 10             	add    esp,0x10
c0011edc:	31 c0                	xor    eax,eax
c0011ede:	31 d2                	xor    edx,edx
c0011ee0:	83 c4 08             	add    esp,0x8
c0011ee3:	5b                   	pop    ebx
c0011ee4:	c3                   	ret    
c0011ee5:	b8 01 00 00 00       	mov    eax,0x1
c0011eea:	31 d2                	xor    edx,edx
c0011eec:	eb f2                	jmp    c0011ee0 <SysRealpath(regs*)+0x40>

c0011eee <SysReadDir(regs*)>:
c0011eee:	53                   	push   ebx
c0011eef:	83 ec 18             	sub    esp,0x18
c0011ef2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ef6:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011ef9:	83 f8 02             	cmp    eax,0x2
c0011efc:	76 4f                	jbe    c0011f4d <SysReadDir(regs*)+0x5f>
c0011efe:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011f05:	77 52                	ja     c0011f59 <SysReadDir(regs*)+0x6b>
c0011f07:	83 ec 0c             	sub    esp,0xc
c0011f0a:	50                   	push   eax
c0011f0b:	e8 8b 75 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011f10:	83 c4 10             	add    esp,0x10
c0011f13:	85 c0                	test   eax,eax
c0011f15:	74 42                	je     c0011f59 <SysReadDir(regs*)+0x6b>
c0011f17:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011f1f:	83 ec 0c             	sub    esp,0xc
c0011f22:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011f26:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f28:	51                   	push   ecx
c0011f29:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011f2c:	51                   	push   ecx
c0011f2d:	6a 00                	push   0x0
c0011f2f:	68 10 01 00 00       	push   0x110
c0011f34:	50                   	push   eax
c0011f35:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011f38:	83 c4 20             	add    esp,0x20
c0011f3b:	85 c0                	test   eax,eax
c0011f3d:	89 c1                	mov    ecx,eax
c0011f3f:	74 27                	je     c0011f68 <SysReadDir(regs*)+0x7a>
c0011f41:	31 d2                	xor    edx,edx
c0011f43:	83 f9 07             	cmp    ecx,0x7
c0011f46:	b8 02 00 00 00       	mov    eax,0x2
c0011f4b:	75 16                	jne    c0011f63 <SysReadDir(regs*)+0x75>
c0011f4d:	b8 01 00 00 00       	mov    eax,0x1
c0011f52:	31 d2                	xor    edx,edx
c0011f54:	83 c4 18             	add    esp,0x18
c0011f57:	5b                   	pop    ebx
c0011f58:	c3                   	ret    
c0011f59:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f5e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f63:	83 c4 18             	add    esp,0x18
c0011f66:	5b                   	pop    ebx
c0011f67:	c3                   	ret    
c0011f68:	31 c0                	xor    eax,eax
c0011f6a:	31 d2                	xor    edx,edx
c0011f6c:	eb e6                	jmp    c0011f54 <SysReadDir(regs*)+0x66>

c0011f6e <SysIsATTY(regs*)>:
c0011f6e:	83 ec 0c             	sub    esp,0xc
c0011f71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f75:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011f78:	83 f8 02             	cmp    eax,0x2
c0011f7b:	76 07                	jbe    c0011f84 <SysIsATTY(regs*)+0x16>
c0011f7d:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011f82:	75 26                	jne    c0011faa <SysIsATTY(regs*)+0x3c>
c0011f84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f89:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f8c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011f92:	85 c0                	test   eax,eax
c0011f94:	74 24                	je     c0011fba <SysIsATTY(regs*)+0x4c>
c0011f96:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f98:	83 ec 0c             	sub    esp,0xc
c0011f9b:	50                   	push   eax
c0011f9c:	ff 12                	call   DWORD PTR [edx]
c0011f9e:	83 c4 10             	add    esp,0x10
c0011fa1:	31 d2                	xor    edx,edx
c0011fa3:	83 c4 0c             	add    esp,0xc
c0011fa6:	0f b6 c0             	movzx  eax,al
c0011fa9:	c3                   	ret    
c0011faa:	83 ec 0c             	sub    esp,0xc
c0011fad:	50                   	push   eax
c0011fae:	e8 e8 74 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011fb3:	83 c4 10             	add    esp,0x10
c0011fb6:	85 c0                	test   eax,eax
c0011fb8:	75 dc                	jne    c0011f96 <SysIsATTY(regs*)+0x28>
c0011fba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011fbf:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011fc4:	83 c4 0c             	add    esp,0xc
c0011fc7:	c3                   	ret    

c0011fc8 <SysSeek(regs*)>:
c0011fc8:	56                   	push   esi
c0011fc9:	53                   	push   ebx
c0011fca:	83 ec 04             	sub    esp,0x4
c0011fcd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011fd1:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011fd4:	8d 71 fd             	lea    esi,[ecx-0x3]
c0011fd7:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c0011fdd:	77 33                	ja     c0012012 <SysSeek(regs*)+0x4a>
c0011fdf:	83 ec 0c             	sub    esp,0xc
c0011fe2:	51                   	push   ecx
c0011fe3:	e8 b3 74 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011fe8:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011feb:	83 c4 0c             	add    esp,0xc
c0011fee:	31 db                	xor    ebx,ebx
c0011ff0:	53                   	push   ebx
c0011ff1:	51                   	push   ecx
c0011ff2:	50                   	push   eax
c0011ff3:	e8 a8 9c ff ff       	call   c000bca0 <File::seek(unsigned long long)>
c0011ff8:	83 c4 10             	add    esp,0x10
c0011ffb:	85 c0                	test   eax,eax
c0011ffd:	0f 95 c0             	setne  al
c0012000:	31 d2                	xor    edx,edx
c0012002:	0f b6 c0             	movzx  eax,al
c0012005:	f7 d8                	neg    eax
c0012007:	83 d2 00             	adc    edx,0x0
c001200a:	83 c4 04             	add    esp,0x4
c001200d:	5b                   	pop    ebx
c001200e:	f7 da                	neg    edx
c0012010:	5e                   	pop    esi
c0012011:	c3                   	ret    
c0012012:	83 c4 04             	add    esp,0x4
c0012015:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001201a:	5b                   	pop    ebx
c001201b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012020:	5e                   	pop    esi
c0012021:	c3                   	ret    

c0012022 <SysTell(regs*)>:
c0012022:	53                   	push   ebx
c0012023:	83 ec 08             	sub    esp,0x8
c0012026:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001202a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001202d:	83 f8 02             	cmp    eax,0x2
c0012030:	76 4e                	jbe    c0012080 <SysTell(regs*)+0x5e>
c0012032:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012037:	76 19                	jbe    c0012052 <SysTell(regs*)+0x30>
c0012039:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001203c:	31 d2                	xor    edx,edx
c001203e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012044:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001204b:	83 c4 08             	add    esp,0x8
c001204e:	31 c0                	xor    eax,eax
c0012050:	5b                   	pop    ebx
c0012051:	c3                   	ret    
c0012052:	83 ec 0c             	sub    esp,0xc
c0012055:	50                   	push   eax
c0012056:	e8 40 74 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c001205b:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001205e:	5a                   	pop    edx
c001205f:	59                   	pop    ecx
c0012060:	53                   	push   ebx
c0012061:	50                   	push   eax
c0012062:	e8 e5 9c ff ff       	call   c000bd4c <File::tell(unsigned long long*)>
c0012067:	83 c4 10             	add    esp,0x10
c001206a:	85 c0                	test   eax,eax
c001206c:	0f 95 c0             	setne  al
c001206f:	31 d2                	xor    edx,edx
c0012071:	0f b6 c0             	movzx  eax,al
c0012074:	f7 d8                	neg    eax
c0012076:	83 d2 00             	adc    edx,0x0
c0012079:	83 c4 08             	add    esp,0x8
c001207c:	5b                   	pop    ebx
c001207d:	f7 da                	neg    edx
c001207f:	c3                   	ret    
c0012080:	83 c4 08             	add    esp,0x8
c0012083:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012088:	5b                   	pop    ebx
c0012089:	ba ff ff ff ff       	mov    edx,0xffffffff
c001208e:	c3                   	ret    

c001208f <SysSize(regs*)>:
c001208f:	53                   	push   ebx
c0012090:	83 ec 18             	sub    esp,0x18
c0012093:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012097:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001209a:	83 f8 02             	cmp    eax,0x2
c001209d:	76 54                	jbe    c00120f3 <SysSize(regs*)+0x64>
c001209f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00120a4:	76 19                	jbe    c00120bf <SysSize(regs*)+0x30>
c00120a6:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00120a9:	31 d2                	xor    edx,edx
c00120ab:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00120b1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00120b8:	83 c4 18             	add    esp,0x18
c00120bb:	31 c0                	xor    eax,eax
c00120bd:	5b                   	pop    ebx
c00120be:	c3                   	ret    
c00120bf:	83 ec 0c             	sub    esp,0xc
c00120c2:	50                   	push   eax
c00120c3:	e8 d3 73 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c00120c8:	83 c4 0c             	add    esp,0xc
c00120cb:	8d 54 24 13          	lea    edx,[esp+0x13]
c00120cf:	52                   	push   edx
c00120d0:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00120d3:	52                   	push   edx
c00120d4:	50                   	push   eax
c00120d5:	e8 0a 9e ff ff       	call   c000bee4 <File::stat(unsigned long long*, bool*)>
c00120da:	83 c4 10             	add    esp,0x10
c00120dd:	85 c0                	test   eax,eax
c00120df:	0f 95 c0             	setne  al
c00120e2:	31 d2                	xor    edx,edx
c00120e4:	0f b6 c0             	movzx  eax,al
c00120e7:	f7 d8                	neg    eax
c00120e9:	83 d2 00             	adc    edx,0x0
c00120ec:	83 c4 18             	add    esp,0x18
c00120ef:	5b                   	pop    ebx
c00120f0:	f7 da                	neg    edx
c00120f2:	c3                   	ret    
c00120f3:	83 c4 18             	add    esp,0x18
c00120f6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00120fb:	5b                   	pop    ebx
c00120fc:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012101:	c3                   	ret    

c0012102 <SysSizeFromFilename(regs*)>:
c0012102:	55                   	push   ebp
c0012103:	57                   	push   edi
c0012104:	56                   	push   esi
c0012105:	53                   	push   ebx
c0012106:	81 ec 4c 02 00 00    	sub    esp,0x24c
c001210c:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0012113:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012116:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012119:	85 f6                	test   esi,esi
c001211b:	89 f8                	mov    eax,edi
c001211d:	74 09                	je     c0012128 <SysSizeFromFilename(regs*)+0x26>
c001211f:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012125:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012128:	83 f8 02             	cmp    eax,0x2
c001212b:	0f 86 ca 00 00 00    	jbe    c00121fb <SysSizeFromFilename(regs*)+0xf9>
c0012131:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012136:	76 1f                	jbe    c0012157 <SysSizeFromFilename(regs*)+0x55>
c0012138:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001213b:	31 d2                	xor    edx,edx
c001213d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012143:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001214a:	31 c0                	xor    eax,eax
c001214c:	81 c4 4c 02 00 00    	add    esp,0x24c
c0012152:	5b                   	pop    ebx
c0012153:	5e                   	pop    esi
c0012154:	5f                   	pop    edi
c0012155:	5d                   	pop    ebp
c0012156:	c3                   	ret    
c0012157:	83 ec 0c             	sub    esp,0xc
c001215a:	68 14 01 00 00       	push   0x114
c001215f:	e8 6f 59 ff ff       	call   c0007ad3 <malloc>
c0012164:	6a 01                	push   0x1
c0012166:	89 c5                	mov    ebp,eax
c0012168:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001216d:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0012170:	51                   	push   ecx
c0012171:	57                   	push   edi
c0012172:	55                   	push   ebp
c0012173:	e8 6e 99 ff ff       	call   c000bae6 <File::File(char const*, Process*, bool)>
c0012178:	83 c4 1c             	add    esp,0x1c
c001217b:	8d 44 24 13          	lea    eax,[esp+0x13]
c001217f:	50                   	push   eax
c0012180:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0012183:	53                   	push   ebx
c0012184:	55                   	push   ebp
c0012185:	e8 5a 9d ff ff       	call   c000bee4 <File::stat(unsigned long long*, bool*)>
c001218a:	83 c4 10             	add    esp,0x10
c001218d:	85 ed                	test   ebp,ebp
c001218f:	89 c3                	mov    ebx,eax
c0012191:	74 0d                	je     c00121a0 <SysSizeFromFilename(regs*)+0x9e>
c0012193:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012196:	83 ec 0c             	sub    esp,0xc
c0012199:	55                   	push   ebp
c001219a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001219d:	83 c4 10             	add    esp,0x10
c00121a0:	85 db                	test   ebx,ebx
c00121a2:	75 57                	jne    c00121fb <SysSizeFromFilename(regs*)+0xf9>
c00121a4:	6a 00                	push   0x0
c00121a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121ab:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00121ae:	05 0c 01 00 00       	add    eax,0x10c
c00121b3:	50                   	push   eax
c00121b4:	57                   	push   edi
c00121b5:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00121bc:	53                   	push   ebx
c00121bd:	e8 f6 96 ff ff       	call   c000b8b8 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00121c2:	58                   	pop    eax
c00121c3:	5a                   	pop    edx
c00121c4:	8d 44 24 18          	lea    eax,[esp+0x18]
c00121c8:	50                   	push   eax
c00121c9:	53                   	push   ebx
c00121ca:	e8 95 8f ff ff       	call   c000b164 <KeDereferenceSymlink(char const*, char*)>
c00121cf:	83 c4 10             	add    esp,0x10
c00121d2:	ba 00 00 00 00       	mov    edx,0x0
c00121d7:	83 f8 01             	cmp    eax,0x1
c00121da:	b8 00 00 00 00       	mov    eax,0x0
c00121df:	74 2f                	je     c0012210 <SysSizeFromFilename(regs*)+0x10e>
c00121e1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00121e6:	74 3b                	je     c0012223 <SysSizeFromFilename(regs*)+0x121>
c00121e8:	85 f6                	test   esi,esi
c00121ea:	0f 84 5c ff ff ff    	je     c001214c <SysSizeFromFilename(regs*)+0x4a>
c00121f0:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00121f6:	e9 51 ff ff ff       	jmp    c001214c <SysSizeFromFilename(regs*)+0x4a>
c00121fb:	81 c4 4c 02 00 00    	add    esp,0x24c
c0012201:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012206:	5b                   	pop    ebx
c0012207:	ba ff ff ff ff       	mov    edx,0xffffffff
c001220c:	5e                   	pop    esi
c001220d:	5f                   	pop    edi
c001220e:	5d                   	pop    ebp
c001220f:	c3                   	ret    
c0012210:	85 f6                	test   esi,esi
c0012212:	0f 84 34 ff ff ff    	je     c001214c <SysSizeFromFilename(regs*)+0x4a>
c0012218:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c001221e:	e9 29 ff ff ff       	jmp    c001214c <SysSizeFromFilename(regs*)+0x4a>
c0012223:	85 f6                	test   esi,esi
c0012225:	0f 84 21 ff ff ff    	je     c001214c <SysSizeFromFilename(regs*)+0x4a>
c001222b:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012231:	e9 16 ff ff ff       	jmp    c001214c <SysSizeFromFilename(regs*)+0x4a>

c0012236 <SysSizeFromFilenameNoSymlink(regs*)>:
c0012236:	55                   	push   ebp
c0012237:	57                   	push   edi
c0012238:	56                   	push   esi
c0012239:	53                   	push   ebx
c001223a:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0012240:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0012247:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001224a:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001224d:	85 f6                	test   esi,esi
c001224f:	89 f8                	mov    eax,edi
c0012251:	74 09                	je     c001225c <SysSizeFromFilenameNoSymlink(regs*)+0x26>
c0012253:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012259:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001225c:	83 f8 02             	cmp    eax,0x2
c001225f:	0f 86 ca 00 00 00    	jbe    c001232f <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c0012265:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001226a:	76 1f                	jbe    c001228b <SysSizeFromFilenameNoSymlink(regs*)+0x55>
c001226c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001226f:	31 d2                	xor    edx,edx
c0012271:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012277:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001227e:	31 c0                	xor    eax,eax
c0012280:	81 c4 4c 02 00 00    	add    esp,0x24c
c0012286:	5b                   	pop    ebx
c0012287:	5e                   	pop    esi
c0012288:	5f                   	pop    edi
c0012289:	5d                   	pop    ebp
c001228a:	c3                   	ret    
c001228b:	83 ec 0c             	sub    esp,0xc
c001228e:	68 14 01 00 00       	push   0x114
c0012293:	e8 3b 58 ff ff       	call   c0007ad3 <malloc>
c0012298:	6a 00                	push   0x0
c001229a:	89 c5                	mov    ebp,eax
c001229c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00122a1:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00122a4:	51                   	push   ecx
c00122a5:	57                   	push   edi
c00122a6:	55                   	push   ebp
c00122a7:	e8 3a 98 ff ff       	call   c000bae6 <File::File(char const*, Process*, bool)>
c00122ac:	83 c4 1c             	add    esp,0x1c
c00122af:	8d 44 24 13          	lea    eax,[esp+0x13]
c00122b3:	50                   	push   eax
c00122b4:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00122b7:	53                   	push   ebx
c00122b8:	55                   	push   ebp
c00122b9:	e8 26 9c ff ff       	call   c000bee4 <File::stat(unsigned long long*, bool*)>
c00122be:	83 c4 10             	add    esp,0x10
c00122c1:	85 ed                	test   ebp,ebp
c00122c3:	89 c3                	mov    ebx,eax
c00122c5:	74 0d                	je     c00122d4 <SysSizeFromFilenameNoSymlink(regs*)+0x9e>
c00122c7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00122ca:	83 ec 0c             	sub    esp,0xc
c00122cd:	55                   	push   ebp
c00122ce:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00122d1:	83 c4 10             	add    esp,0x10
c00122d4:	85 db                	test   ebx,ebx
c00122d6:	75 57                	jne    c001232f <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c00122d8:	6a 00                	push   0x0
c00122da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00122df:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00122e2:	05 0c 01 00 00       	add    eax,0x10c
c00122e7:	50                   	push   eax
c00122e8:	57                   	push   edi
c00122e9:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00122f0:	53                   	push   ebx
c00122f1:	e8 c2 95 ff ff       	call   c000b8b8 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00122f6:	58                   	pop    eax
c00122f7:	5a                   	pop    edx
c00122f8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00122fc:	50                   	push   eax
c00122fd:	53                   	push   ebx
c00122fe:	e8 61 8e ff ff       	call   c000b164 <KeDereferenceSymlink(char const*, char*)>
c0012303:	83 c4 10             	add    esp,0x10
c0012306:	ba 00 00 00 00       	mov    edx,0x0
c001230b:	83 f8 01             	cmp    eax,0x1
c001230e:	b8 00 00 00 00       	mov    eax,0x0
c0012313:	74 2f                	je     c0012344 <SysSizeFromFilenameNoSymlink(regs*)+0x10e>
c0012315:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001231a:	74 3b                	je     c0012357 <SysSizeFromFilenameNoSymlink(regs*)+0x121>
c001231c:	85 f6                	test   esi,esi
c001231e:	0f 84 5c ff ff ff    	je     c0012280 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0012324:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c001232a:	e9 51 ff ff ff       	jmp    c0012280 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001232f:	81 c4 4c 02 00 00    	add    esp,0x24c
c0012335:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001233a:	5b                   	pop    ebx
c001233b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012340:	5e                   	pop    esi
c0012341:	5f                   	pop    edi
c0012342:	5d                   	pop    ebp
c0012343:	c3                   	ret    
c0012344:	85 f6                	test   esi,esi
c0012346:	0f 84 34 ff ff ff    	je     c0012280 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001234c:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0012352:	e9 29 ff ff ff       	jmp    c0012280 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0012357:	85 f6                	test   esi,esi
c0012359:	0f 84 21 ff ff ff    	je     c0012280 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001235f:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012365:	e9 16 ff ff ff       	jmp    c0012280 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>

c001236a <SysClose(regs*)>:
c001236a:	53                   	push   ebx
c001236b:	83 ec 08             	sub    esp,0x8
c001236e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012372:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012375:	83 f8 02             	cmp    eax,0x2
c0012378:	76 41                	jbe    c00123bb <SysClose(regs*)+0x51>
c001237a:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0012380:	83 fa 01             	cmp    edx,0x1
c0012383:	76 2d                	jbe    c00123b2 <SysClose(regs*)+0x48>
c0012385:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001238a:	77 2f                	ja     c00123bb <SysClose(regs*)+0x51>
c001238c:	83 ec 0c             	sub    esp,0xc
c001238f:	50                   	push   eax
c0012390:	e8 06 71 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0012395:	89 04 24             	mov    DWORD PTR [esp],eax
c0012398:	89 c3                	mov    ebx,eax
c001239a:	e8 a1 98 ff ff       	call   c000bc40 <File::close()>
c001239f:	83 c4 10             	add    esp,0x10
c00123a2:	85 db                	test   ebx,ebx
c00123a4:	74 0c                	je     c00123b2 <SysClose(regs*)+0x48>
c00123a6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00123a8:	83 ec 0c             	sub    esp,0xc
c00123ab:	53                   	push   ebx
c00123ac:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00123af:	83 c4 10             	add    esp,0x10
c00123b2:	83 c4 08             	add    esp,0x8
c00123b5:	31 c0                	xor    eax,eax
c00123b7:	5b                   	pop    ebx
c00123b8:	31 d2                	xor    edx,edx
c00123ba:	c3                   	ret    
c00123bb:	83 c4 08             	add    esp,0x8
c00123be:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00123c3:	5b                   	pop    ebx
c00123c4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00123c9:	c3                   	ret    

c00123ca <SysOpenDir(regs*)>:
c00123ca:	56                   	push   esi
c00123cb:	53                   	push   ebx
c00123cc:	83 ec 04             	sub    esp,0x4
c00123cf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00123d3:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00123d6:	85 c9                	test   ecx,ecx
c00123d8:	74 5d                	je     c0012437 <SysOpenDir(regs*)+0x6d>
c00123da:	83 ec 0c             	sub    esp,0xc
c00123dd:	68 14 01 00 00       	push   0x114
c00123e2:	e8 ec 56 ff ff       	call   c0007ad3 <malloc>
c00123e7:	83 c4 0c             	add    esp,0xc
c00123ea:	89 c6                	mov    esi,eax
c00123ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00123f1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00123f4:	50                   	push   eax
c00123f5:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00123f8:	52                   	push   edx
c00123f9:	56                   	push   esi
c00123fa:	e8 a5 9c ff ff       	call   c000c0a4 <Directory::Directory(char const*, Process*)>
c00123ff:	83 c4 10             	add    esp,0x10
c0012402:	85 f6                	test   esi,esi
c0012404:	74 31                	je     c0012437 <SysOpenDir(regs*)+0x6d>
c0012406:	83 ec 0c             	sub    esp,0xc
c0012409:	56                   	push   esi
c001240a:	e8 5d 9d ff ff       	call   c000c16c <Directory::open()>
c001240f:	83 c4 10             	add    esp,0x10
c0012412:	85 c0                	test   eax,eax
c0012414:	75 21                	jne    c0012437 <SysOpenDir(regs*)+0x6d>
c0012416:	83 ec 0c             	sub    esp,0xc
c0012419:	56                   	push   esi
c001241a:	e8 7f 6d ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c001241f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012422:	83 c4 10             	add    esp,0x10
c0012425:	89 02                	mov    DWORD PTR [edx],eax
c0012427:	c1 f8 1f             	sar    eax,0x1f
c001242a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001242d:	83 c4 04             	add    esp,0x4
c0012430:	31 c0                	xor    eax,eax
c0012432:	5b                   	pop    ebx
c0012433:	31 d2                	xor    edx,edx
c0012435:	5e                   	pop    esi
c0012436:	c3                   	ret    
c0012437:	83 c4 04             	add    esp,0x4
c001243a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001243f:	5b                   	pop    ebx
c0012440:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012445:	5e                   	pop    esi
c0012446:	c3                   	ret    

c0012447 <SysMakeDir(regs*)>:
c0012447:	56                   	push   esi
c0012448:	53                   	push   ebx
c0012449:	83 ec 10             	sub    esp,0x10
c001244c:	68 14 01 00 00       	push   0x114
c0012451:	e8 7d 56 ff ff       	call   c0007ad3 <malloc>
c0012456:	83 c4 0c             	add    esp,0xc
c0012459:	89 c3                	mov    ebx,eax
c001245b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012460:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012463:	50                   	push   eax
c0012464:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012468:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c001246b:	52                   	push   edx
c001246c:	53                   	push   ebx
c001246d:	e8 32 9c ff ff       	call   c000c0a4 <Directory::Directory(char const*, Process*)>
c0012472:	83 c4 10             	add    esp,0x10
c0012475:	85 db                	test   ebx,ebx
c0012477:	74 2c                	je     c00124a5 <SysMakeDir(regs*)+0x5e>
c0012479:	83 ec 0c             	sub    esp,0xc
c001247c:	53                   	push   ebx
c001247d:	e8 ca 9e ff ff       	call   c000c34c <Directory::create()>
c0012482:	89 c6                	mov    esi,eax
c0012484:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012486:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012489:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001248c:	83 c4 10             	add    esp,0x10
c001248f:	31 c0                	xor    eax,eax
c0012491:	85 f6                	test   esi,esi
c0012493:	0f 95 c0             	setne  al
c0012496:	31 d2                	xor    edx,edx
c0012498:	f7 d8                	neg    eax
c001249a:	83 d2 00             	adc    edx,0x0
c001249d:	83 c4 04             	add    esp,0x4
c00124a0:	5b                   	pop    ebx
c00124a1:	f7 da                	neg    edx
c00124a3:	5e                   	pop    esi
c00124a4:	c3                   	ret    
c00124a5:	83 c4 04             	add    esp,0x4
c00124a8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00124ad:	5b                   	pop    ebx
c00124ae:	ba ff ff ff ff       	mov    edx,0xffffffff
c00124b3:	5e                   	pop    esi
c00124b4:	c3                   	ret    

c00124b5 <SysCloseDir(regs*)>:
c00124b5:	53                   	push   ebx
c00124b6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00124bb:	83 ec 08             	sub    esp,0x8
c00124be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124c2:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00124c5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00124ca:	8d 59 fd             	lea    ebx,[ecx-0x3]
c00124cd:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c00124d3:	77 2a                	ja     c00124ff <SysCloseDir(regs*)+0x4a>
c00124d5:	83 ec 0c             	sub    esp,0xc
c00124d8:	51                   	push   ecx
c00124d9:	e8 bd 6f ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c00124de:	89 04 24             	mov    DWORD PTR [esp],eax
c00124e1:	89 c3                	mov    ebx,eax
c00124e3:	e8 e0 9c ff ff       	call   c000c1c8 <Directory::close()>
c00124e8:	83 c4 10             	add    esp,0x10
c00124eb:	85 db                	test   ebx,ebx
c00124ed:	74 0c                	je     c00124fb <SysCloseDir(regs*)+0x46>
c00124ef:	8b 03                	mov    eax,DWORD PTR [ebx]
c00124f1:	83 ec 0c             	sub    esp,0xc
c00124f4:	53                   	push   ebx
c00124f5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00124f8:	83 c4 10             	add    esp,0x10
c00124fb:	31 c0                	xor    eax,eax
c00124fd:	31 d2                	xor    edx,edx
c00124ff:	83 c4 08             	add    esp,0x8
c0012502:	5b                   	pop    ebx
c0012503:	c3                   	ret    

c0012504 <SysWait(regs*)>:
c0012504:	83 ec 10             	sub    esp,0x10
c0012507:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001250b:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001250e:	52                   	push   edx
c001250f:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0012512:	51                   	push   ecx
c0012513:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012516:	50                   	push   eax
c0012517:	e8 10 3e 00 00       	call   c001632c <waitTask(int, int*, int)>
c001251c:	83 c4 1c             	add    esp,0x1c
c001251f:	89 c2                	mov    edx,eax
c0012521:	c1 fa 1f             	sar    edx,0x1f
c0012524:	c3                   	ret    

c0012525 <SysNotImpl(regs*)>:
c0012525:	83 ec 18             	sub    esp,0x18
c0012528:	68 46 25 02 c0       	push   0xc0022546
c001252d:	e8 d9 f0 ff ff       	call   c001160b <KePanic(char const*)>
c0012532:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012537:	ba ff ff ff ff       	mov    edx,0xffffffff
c001253c:	83 c4 1c             	add    esp,0x1c
c001253f:	c3                   	ret    

c0012540 <SysPanic(regs*)>:
c0012540:	83 ec 18             	sub    esp,0x18
c0012543:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012547:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001254a:	50                   	push   eax
c001254b:	e8 bb f0 ff ff       	call   c001160b <KePanic(char const*)>
c0012550:	b8 01 00 00 00       	mov    eax,0x1
c0012555:	31 d2                	xor    edx,edx
c0012557:	83 c4 1c             	add    esp,0x1c
c001255a:	c3                   	ret    

c001255b <SysRmdir(regs*)>:
c001255b:	56                   	push   esi
c001255c:	53                   	push   ebx
c001255d:	83 ec 10             	sub    esp,0x10
c0012560:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012564:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0012567:	68 14 01 00 00       	push   0x114
c001256c:	e8 62 55 ff ff       	call   c0007ad3 <malloc>
c0012571:	6a 00                	push   0x0
c0012573:	89 c3                	mov    ebx,eax
c0012575:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001257a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001257d:	50                   	push   eax
c001257e:	56                   	push   esi
c001257f:	53                   	push   ebx
c0012580:	e8 61 95 ff ff       	call   c000bae6 <File::File(char const*, Process*, bool)>
c0012585:	83 c4 14             	add    esp,0x14
c0012588:	53                   	push   ebx
c0012589:	e8 22 98 ff ff       	call   c000bdb0 <File::unlink()>
c001258e:	83 c4 10             	add    esp,0x10
c0012591:	85 db                	test   ebx,ebx
c0012593:	89 c6                	mov    esi,eax
c0012595:	74 0c                	je     c00125a3 <SysRmdir(regs*)+0x48>
c0012597:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012599:	83 ec 0c             	sub    esp,0xc
c001259c:	53                   	push   ebx
c001259d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00125a0:	83 c4 10             	add    esp,0x10
c00125a3:	31 c0                	xor    eax,eax
c00125a5:	85 f6                	test   esi,esi
c00125a7:	0f 95 c0             	setne  al
c00125aa:	31 d2                	xor    edx,edx
c00125ac:	f7 d8                	neg    eax
c00125ae:	83 d2 00             	adc    edx,0x0
c00125b1:	83 c4 04             	add    esp,0x4
c00125b4:	5b                   	pop    ebx
c00125b5:	f7 da                	neg    edx
c00125b7:	5e                   	pop    esi
c00125b8:	c3                   	ret    

c00125b9 <SysUnlink(regs*)>:
c00125b9:	56                   	push   esi
c00125ba:	53                   	push   ebx
c00125bb:	83 ec 10             	sub    esp,0x10
c00125be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00125c2:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00125c5:	68 14 01 00 00       	push   0x114
c00125ca:	e8 04 55 ff ff       	call   c0007ad3 <malloc>
c00125cf:	6a 00                	push   0x0
c00125d1:	89 c3                	mov    ebx,eax
c00125d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00125d8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00125db:	50                   	push   eax
c00125dc:	56                   	push   esi
c00125dd:	53                   	push   ebx
c00125de:	e8 03 95 ff ff       	call   c000bae6 <File::File(char const*, Process*, bool)>
c00125e3:	83 c4 14             	add    esp,0x14
c00125e6:	53                   	push   ebx
c00125e7:	e8 c4 97 ff ff       	call   c000bdb0 <File::unlink()>
c00125ec:	83 c4 10             	add    esp,0x10
c00125ef:	85 db                	test   ebx,ebx
c00125f1:	89 c6                	mov    esi,eax
c00125f3:	74 0c                	je     c0012601 <SysUnlink(regs*)+0x48>
c00125f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00125f7:	83 ec 0c             	sub    esp,0xc
c00125fa:	53                   	push   ebx
c00125fb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00125fe:	83 c4 10             	add    esp,0x10
c0012601:	31 c0                	xor    eax,eax
c0012603:	85 f6                	test   esi,esi
c0012605:	0f 95 c0             	setne  al
c0012608:	31 d2                	xor    edx,edx
c001260a:	f7 d8                	neg    eax
c001260c:	83 d2 00             	adc    edx,0x0
c001260f:	83 c4 04             	add    esp,0x4
c0012612:	5b                   	pop    ebx
c0012613:	f7 da                	neg    edx
c0012615:	5e                   	pop    esi
c0012616:	c3                   	ret    

c0012617 <SysGetArgv(regs*)>:
c0012617:	83 ec 0c             	sub    esp,0xc
c001261a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001261e:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0012621:	85 c0                	test   eax,eax
c0012623:	78 2c                	js     c0012651 <SysGetArgv(regs*)+0x3a>
c0012625:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001262b:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001262e:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0012634:	7d 1b                	jge    c0012651 <SysGetArgv(regs*)+0x3a>
c0012636:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c001263d:	85 c0                	test   eax,eax
c001263f:	74 18                	je     c0012659 <SysGetArgv(regs*)+0x42>
c0012641:	83 ec 08             	sub    esp,0x8
c0012644:	50                   	push   eax
c0012645:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0012648:	50                   	push   eax
c0012649:	e8 02 e0 fe ff       	call   c0000650 <strcpy>
c001264e:	83 c4 10             	add    esp,0x10
c0012651:	31 c0                	xor    eax,eax
c0012653:	31 d2                	xor    edx,edx
c0012655:	83 c4 0c             	add    esp,0xc
c0012658:	c3                   	ret    
c0012659:	b8 01 00 00 00       	mov    eax,0x1
c001265e:	31 d2                	xor    edx,edx
c0012660:	83 c4 0c             	add    esp,0xc
c0012663:	c3                   	ret    

c0012664 <SysUSleep(regs*)>:
c0012664:	83 ec 1c             	sub    esp,0x1c
c0012667:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001266b:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c001266e:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0012671:	6a 00                	push   0x0
c0012673:	6a 64                	push   0x64
c0012675:	52                   	push   edx
c0012676:	50                   	push   eax
c0012677:	e8 34 d1 00 00       	call   c001f7b0 <__udivdi3>
c001267c:	83 c4 14             	add    esp,0x14
c001267f:	50                   	push   eax
c0012680:	e8 8b 3d 00 00       	call   c0016410 <milliTenthSleep(unsigned int)>
c0012685:	31 c0                	xor    eax,eax
c0012687:	31 d2                	xor    edx,edx
c0012689:	83 c4 1c             	add    esp,0x1c
c001268c:	c3                   	ret    

c001268d <SysSpawn(regs*)>:
c001268d:	56                   	push   esi
c001268e:	53                   	push   ebx
c001268f:	83 ec 04             	sub    esp,0x4
c0012692:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012696:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012699:	85 f6                	test   esi,esi
c001269b:	75 0a                	jne    c00126a7 <SysSpawn(regs*)+0x1a>
c001269d:	83 c4 04             	add    esp,0x4
c00126a0:	31 c0                	xor    eax,eax
c00126a2:	5b                   	pop    ebx
c00126a3:	31 d2                	xor    edx,edx
c00126a5:	5e                   	pop    esi
c00126a6:	c3                   	ret    
c00126a7:	83 ec 0c             	sub    esp,0xc
c00126aa:	68 24 07 00 00       	push   0x724
c00126af:	e8 1f 54 ff ff       	call   c0007ad3 <malloc>
c00126b4:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00126b7:	83 c4 10             	add    esp,0x10
c00126ba:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00126bd:	89 c6                	mov    esi,eax
c00126bf:	31 c0                	xor    eax,eax
c00126c1:	85 c9                	test   ecx,ecx
c00126c3:	75 08                	jne    c00126cd <SysSpawn(regs*)+0x40>
c00126c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00126ca:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00126cd:	52                   	push   edx
c00126ce:	50                   	push   eax
c00126cf:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00126d2:	50                   	push   eax
c00126d3:	56                   	push   esi
c00126d4:	e8 9f 33 00 00       	call   c0015a78 <Process::Process(char const*, Process*, char**)>
c00126d9:	83 c4 10             	add    esp,0x10
c00126dc:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00126e3:	75 b8                	jne    c001269d <SysSpawn(regs*)+0x10>
c00126e5:	83 ec 0c             	sub    esp,0xc
c00126e8:	56                   	push   esi
c00126e9:	e8 c2 38 00 00       	call   c0015fb0 <Process::createUserThread()>
c00126ee:	8b 06                	mov    eax,DWORD PTR [esi]
c00126f0:	83 c4 10             	add    esp,0x10
c00126f3:	83 c4 04             	add    esp,0x4
c00126f6:	5b                   	pop    ebx
c00126f7:	89 c2                	mov    edx,eax
c00126f9:	c1 fa 1f             	sar    edx,0x1f
c00126fc:	5e                   	pop    esi
c00126fd:	c3                   	ret    

c00126fe <SysGetEnv(regs*)>:
c00126fe:	57                   	push   edi
c00126ff:	56                   	push   esi
c0012700:	53                   	push   ebx
c0012701:	83 ec 1c             	sub    esp,0x1c
c0012704:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012709:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001270d:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0012710:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012713:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012716:	51                   	push   ecx
c0012717:	e8 a7 ed ff ff       	call   c00114c3 <KeGetProcessTotalEnvCount(Process*)>
c001271c:	83 c4 10             	add    esp,0x10
c001271f:	39 c7                	cmp    edi,eax
c0012721:	7c 12                	jl     c0012735 <SysGetEnv(regs*)+0x37>
c0012723:	31 c0                	xor    eax,eax
c0012725:	31 d2                	xor    edx,edx
c0012727:	85 f6                	test   esi,esi
c0012729:	74 03                	je     c001272e <SysGetEnv(regs*)+0x30>
c001272b:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001272e:	83 c4 10             	add    esp,0x10
c0012731:	5b                   	pop    ebx
c0012732:	5e                   	pop    esi
c0012733:	5f                   	pop    edi
c0012734:	c3                   	ret    
c0012735:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012739:	83 ec 04             	sub    esp,0x4
c001273c:	57                   	push   edi
c001273d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012743:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0012746:	57                   	push   edi
c0012747:	50                   	push   eax
c0012748:	e8 96 ed ff ff       	call   c00114e3 <KeGetProcessEnvPair(Process*, int)>
c001274d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012750:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012754:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012758:	83 c4 0c             	add    esp,0xc
c001275b:	85 d2                	test   edx,edx
c001275d:	75 23                	jne    c0012782 <SysGetEnv(regs*)+0x84>
c001275f:	83 ec 0c             	sub    esp,0xc
c0012762:	50                   	push   eax
c0012763:	e8 18 de fe ff       	call   c0000580 <strlen>
c0012768:	89 3c 24             	mov    DWORD PTR [esp],edi
c001276b:	89 c3                	mov    ebx,eax
c001276d:	e8 0e de fe ff       	call   c0000580 <strlen>
c0012772:	83 c4 10             	add    esp,0x10
c0012775:	31 d2                	xor    edx,edx
c0012777:	83 c4 10             	add    esp,0x10
c001277a:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001277e:	5b                   	pop    ebx
c001277f:	5e                   	pop    esi
c0012780:	5f                   	pop    edi
c0012781:	c3                   	ret    
c0012782:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012785:	83 ec 08             	sub    esp,0x8
c0012788:	50                   	push   eax
c0012789:	56                   	push   esi
c001278a:	e8 c1 de fe ff       	call   c0000650 <strcpy>
c001278f:	58                   	pop    eax
c0012790:	5a                   	pop    edx
c0012791:	68 60 25 02 c0       	push   0xc0022560
c0012796:	56                   	push   esi
c0012797:	e8 d4 e0 fe ff       	call   c0000870 <strcat>
c001279c:	59                   	pop    ecx
c001279d:	5b                   	pop    ebx
c001279e:	57                   	push   edi
c001279f:	56                   	push   esi
c00127a0:	e8 cb e0 fe ff       	call   c0000870 <strcat>
c00127a5:	83 c4 10             	add    esp,0x10
c00127a8:	31 c0                	xor    eax,eax
c00127aa:	83 c4 10             	add    esp,0x10
c00127ad:	31 d2                	xor    edx,edx
c00127af:	5b                   	pop    ebx
c00127b0:	5e                   	pop    esi
c00127b1:	5f                   	pop    edi
c00127b2:	c3                   	ret    

c00127b3 <SysSetFatAttrib(regs*)>:
c00127b3:	57                   	push   edi
c00127b4:	56                   	push   esi
c00127b5:	53                   	push   ebx
c00127b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00127ba:	83 ec 0c             	sub    esp,0xc
c00127bd:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00127c0:	68 14 01 00 00       	push   0x114
c00127c5:	e8 09 53 ff ff       	call   c0007ad3 <malloc>
c00127ca:	83 c4 0c             	add    esp,0xc
c00127cd:	89 c3                	mov    ebx,eax
c00127cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00127d4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00127d7:	50                   	push   eax
c00127d8:	57                   	push   edi
c00127d9:	53                   	push   ebx
c00127da:	e8 e5 93 ff ff       	call   c000bbc4 <File::File(char const*, Process*)>
c00127df:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00127e2:	83 c4 0c             	add    esp,0xc
c00127e5:	0f b6 d4             	movzx  edx,ah
c00127e8:	0f b6 c0             	movzx  eax,al
c00127eb:	52                   	push   edx
c00127ec:	50                   	push   eax
c00127ed:	53                   	push   ebx
c00127ee:	e8 57 96 ff ff       	call   c000be4a <File::chfatattr(unsigned char, unsigned char)>
c00127f3:	83 c4 10             	add    esp,0x10
c00127f6:	85 db                	test   ebx,ebx
c00127f8:	89 c6                	mov    esi,eax
c00127fa:	74 0c                	je     c0012808 <SysSetFatAttrib(regs*)+0x55>
c00127fc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00127fe:	83 ec 0c             	sub    esp,0xc
c0012801:	53                   	push   ebx
c0012802:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012805:	83 c4 10             	add    esp,0x10
c0012808:	5b                   	pop    ebx
c0012809:	31 c0                	xor    eax,eax
c001280b:	85 f6                	test   esi,esi
c001280d:	0f 95 c0             	setne  al
c0012810:	31 d2                	xor    edx,edx
c0012812:	5e                   	pop    esi
c0012813:	f7 d8                	neg    eax
c0012815:	83 d2 00             	adc    edx,0x0
c0012818:	f7 da                	neg    edx
c001281a:	5f                   	pop    edi
c001281b:	c3                   	ret    

c001281c <SysPipe(regs*)>:
c001281c:	57                   	push   edi
c001281d:	56                   	push   esi
c001281e:	53                   	push   ebx
c001281f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012823:	83 ec 0c             	sub    esp,0xc
c0012826:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0012829:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001282c:	6a 20                	push   0x20
c001282e:	e8 a0 52 ff ff       	call   c0007ad3 <malloc>
c0012833:	89 c3                	mov    ebx,eax
c0012835:	58                   	pop    eax
c0012836:	5a                   	pop    edx
c0012837:	68 00 50 00 00       	push   0x5000
c001283c:	53                   	push   ebx
c001283d:	e8 fc 5b ff ff       	call   c000843e <Pipe::Pipe(int)>
c0012842:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012845:	e8 54 69 ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c001284a:	89 07                	mov    DWORD PTR [edi],eax
c001284c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001284f:	e8 4a 69 ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c0012854:	83 c4 10             	add    esp,0x10
c0012857:	31 d2                	xor    edx,edx
c0012859:	89 06                	mov    DWORD PTR [esi],eax
c001285b:	31 c0                	xor    eax,eax
c001285d:	5b                   	pop    ebx
c001285e:	5e                   	pop    esi
c001285f:	5f                   	pop    edi
c0012860:	c3                   	ret    

c0012861 <SysGetUnixTime(regs*)>:
c0012861:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0012866:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001286c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012870:	e9 1d 9d ff ff       	jmp    c000c592 <Clock::timeInSecondsLocal()>

c0012875 <string_ends_with(char const*, char const*)>:
c0012875:	57                   	push   edi
c0012876:	56                   	push   esi
c0012877:	53                   	push   ebx
c0012878:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001287c:	83 ec 0c             	sub    esp,0xc
c001287f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012883:	53                   	push   ebx
c0012884:	e8 f7 dc fe ff       	call   c0000580 <strlen>
c0012889:	89 3c 24             	mov    DWORD PTR [esp],edi
c001288c:	89 c6                	mov    esi,eax
c001288e:	e8 ed dc fe ff       	call   c0000580 <strlen>
c0012893:	83 c4 10             	add    esp,0x10
c0012896:	31 d2                	xor    edx,edx
c0012898:	39 c6                	cmp    esi,eax
c001289a:	7d 06                	jge    c00128a2 <string_ends_with(char const*, char const*)+0x2d>
c001289c:	5b                   	pop    ebx
c001289d:	89 d0                	mov    eax,edx
c001289f:	5e                   	pop    esi
c00128a0:	5f                   	pop    edi
c00128a1:	c3                   	ret    
c00128a2:	83 ec 08             	sub    esp,0x8
c00128a5:	29 c6                	sub    esi,eax
c00128a7:	57                   	push   edi
c00128a8:	01 f3                	add    ebx,esi
c00128aa:	53                   	push   ebx
c00128ab:	e8 d0 de fe ff       	call   c0000780 <strcmp>
c00128b0:	83 c4 10             	add    esp,0x10
c00128b3:	31 d2                	xor    edx,edx
c00128b5:	5b                   	pop    ebx
c00128b6:	5e                   	pop    esi
c00128b7:	85 c0                	test   eax,eax
c00128b9:	5f                   	pop    edi
c00128ba:	0f 94 c2             	sete   dl
c00128bd:	89 d0                	mov    eax,edx
c00128bf:	c3                   	ret    

c00128c0 <SysOpen(regs*)>:
c00128c0:	56                   	push   esi
c00128c1:	53                   	push   ebx
c00128c2:	81 ec 04 01 00 00    	sub    esp,0x104
c00128c8:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00128cf:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00128d2:	85 c0                	test   eax,eax
c00128d4:	0f 84 c4 01 00 00    	je     c0012a9e <SysOpen(regs*)+0x1de>
c00128da:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00128dd:	85 c0                	test   eax,eax
c00128df:	0f 84 b9 01 00 00    	je     c0012a9e <SysOpen(regs*)+0x1de>
c00128e5:	6a 00                	push   0x0
c00128e7:	68 62 25 02 c0       	push   0xc0022562
c00128ec:	50                   	push   eax
c00128ed:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00128f1:	56                   	push   esi
c00128f2:	e8 c1 8f ff ff       	call   c000b8b8 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00128f7:	89 34 24             	mov    DWORD PTR [esp],esi
c00128fa:	e8 81 dc fe ff       	call   c0000580 <strlen>
c00128ff:	83 c4 10             	add    esp,0x10
c0012902:	83 e8 01             	sub    eax,0x1
c0012905:	74 29                	je     c0012930 <SysOpen(regs*)+0x70>
c0012907:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c001290b:	83 fa 2e             	cmp    edx,0x2e
c001290e:	74 1c                	je     c001292c <SysOpen(regs*)+0x6c>
c0012910:	83 fa 3a             	cmp    edx,0x3a
c0012913:	74 17                	je     c001292c <SysOpen(regs*)+0x6c>
c0012915:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0012919:	83 e8 01             	sub    eax,0x1
c001291c:	74 12                	je     c0012930 <SysOpen(regs*)+0x70>
c001291e:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0012922:	83 fa 3a             	cmp    edx,0x3a
c0012925:	74 05                	je     c001292c <SysOpen(regs*)+0x6c>
c0012927:	83 fa 2e             	cmp    edx,0x2e
c001292a:	75 e9                	jne    c0012915 <SysOpen(regs*)+0x55>
c001292c:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0012930:	83 ec 08             	sub    esp,0x8
c0012933:	68 66 25 02 c0       	push   0xc0022566
c0012938:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001293b:	50                   	push   eax
c001293c:	e8 34 ff ff ff       	call   c0012875 <string_ends_with(char const*, char const*)>
c0012941:	83 c4 10             	add    esp,0x10
c0012944:	85 c0                	test   eax,eax
c0012946:	74 1d                	je     c0012965 <SysOpen(regs*)+0xa5>
c0012948:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001294b:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0012951:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012958:	81 c4 04 01 00 00    	add    esp,0x104
c001295e:	31 c0                	xor    eax,eax
c0012960:	5b                   	pop    ebx
c0012961:	31 d2                	xor    edx,edx
c0012963:	5e                   	pop    esi
c0012964:	c3                   	ret    
c0012965:	83 ec 08             	sub    esp,0x8
c0012968:	68 6b 25 02 c0       	push   0xc002256b
c001296d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012970:	50                   	push   eax
c0012971:	e8 ff fe ff ff       	call   c0012875 <string_ends_with(char const*, char const*)>
c0012976:	83 c4 10             	add    esp,0x10
c0012979:	85 c0                	test   eax,eax
c001297b:	75 cb                	jne    c0012948 <SysOpen(regs*)+0x88>
c001297d:	83 ec 08             	sub    esp,0x8
c0012980:	68 67 25 02 c0       	push   0xc0022567
c0012985:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012988:	50                   	push   eax
c0012989:	e8 f2 dd fe ff       	call   c0000780 <strcmp>
c001298e:	83 c4 10             	add    esp,0x10
c0012991:	85 c0                	test   eax,eax
c0012993:	74 b3                	je     c0012948 <SysOpen(regs*)+0x88>
c0012995:	83 ec 08             	sub    esp,0x8
c0012998:	68 66 25 02 c0       	push   0xc0022566
c001299d:	56                   	push   esi
c001299e:	e8 d2 fe ff ff       	call   c0012875 <string_ends_with(char const*, char const*)>
c00129a3:	83 c4 10             	add    esp,0x10
c00129a6:	85 c0                	test   eax,eax
c00129a8:	75 9e                	jne    c0012948 <SysOpen(regs*)+0x88>
c00129aa:	83 ec 08             	sub    esp,0x8
c00129ad:	68 70 25 02 c0       	push   0xc0022570
c00129b2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00129b5:	50                   	push   eax
c00129b6:	e8 ba fe ff ff       	call   c0012875 <string_ends_with(char const*, char const*)>
c00129bb:	83 c4 10             	add    esp,0x10
c00129be:	85 c0                	test   eax,eax
c00129c0:	0f 85 eb 00 00 00    	jne    c0012ab1 <SysOpen(regs*)+0x1f1>
c00129c6:	83 ec 08             	sub    esp,0x8
c00129c9:	68 75 25 02 c0       	push   0xc0022575
c00129ce:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00129d1:	50                   	push   eax
c00129d2:	e8 9e fe ff ff       	call   c0012875 <string_ends_with(char const*, char const*)>
c00129d7:	83 c4 10             	add    esp,0x10
c00129da:	85 c0                	test   eax,eax
c00129dc:	0f 85 cf 00 00 00    	jne    c0012ab1 <SysOpen(regs*)+0x1f1>
c00129e2:	83 ec 08             	sub    esp,0x8
c00129e5:	68 71 25 02 c0       	push   0xc0022571
c00129ea:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00129ed:	51                   	push   ecx
c00129ee:	e8 8d dd fe ff       	call   c0000780 <strcmp>
c00129f3:	83 c4 10             	add    esp,0x10
c00129f6:	85 c0                	test   eax,eax
c00129f8:	0f 84 b3 00 00 00    	je     c0012ab1 <SysOpen(regs*)+0x1f1>
c00129fe:	83 ec 08             	sub    esp,0x8
c0012a01:	68 70 25 02 c0       	push   0xc0022570
c0012a06:	56                   	push   esi
c0012a07:	e8 69 fe ff ff       	call   c0012875 <string_ends_with(char const*, char const*)>
c0012a0c:	83 c4 10             	add    esp,0x10
c0012a0f:	85 c0                	test   eax,eax
c0012a11:	0f 85 9a 00 00 00    	jne    c0012ab1 <SysOpen(regs*)+0x1f1>
c0012a17:	83 ec 0c             	sub    esp,0xc
c0012a1a:	68 14 01 00 00       	push   0x114
c0012a1f:	e8 af 50 ff ff       	call   c0007ad3 <malloc>
c0012a24:	83 c4 0c             	add    esp,0xc
c0012a27:	89 c6                	mov    esi,eax
c0012a29:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012a2e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012a31:	50                   	push   eax
c0012a32:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012a35:	52                   	push   edx
c0012a36:	56                   	push   esi
c0012a37:	e8 88 91 ff ff       	call   c000bbc4 <File::File(char const*, Process*)>
c0012a3c:	83 c4 10             	add    esp,0x10
c0012a3f:	85 f6                	test   esi,esi
c0012a41:	74 5b                	je     c0012a9e <SysOpen(regs*)+0x1de>
c0012a43:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012a46:	0f b6 c2             	movzx  eax,dl
c0012a49:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0012a4c:	89 d0                	mov    eax,edx
c0012a4e:	83 e0 01             	and    eax,0x1
c0012a51:	f6 c2 02             	test   dl,0x2
c0012a54:	74 03                	je     c0012a59 <SysOpen(regs*)+0x199>
c0012a56:	83 c8 02             	or     eax,0x2
c0012a59:	f6 c2 04             	test   dl,0x4
c0012a5c:	74 03                	je     c0012a61 <SysOpen(regs*)+0x1a1>
c0012a5e:	83 c8 04             	or     eax,0x4
c0012a61:	f6 c2 08             	test   dl,0x8
c0012a64:	74 03                	je     c0012a69 <SysOpen(regs*)+0x1a9>
c0012a66:	83 c8 0a             	or     eax,0xa
c0012a69:	80 e2 10             	and    dl,0x10
c0012a6c:	74 03                	je     c0012a71 <SysOpen(regs*)+0x1b1>
c0012a6e:	83 c8 12             	or     eax,0x12
c0012a71:	83 ec 08             	sub    esp,0x8
c0012a74:	50                   	push   eax
c0012a75:	56                   	push   esi
c0012a76:	e8 67 91 ff ff       	call   c000bbe2 <File::open(FileOpenMode)>
c0012a7b:	83 c4 10             	add    esp,0x10
c0012a7e:	85 c0                	test   eax,eax
c0012a80:	75 1c                	jne    c0012a9e <SysOpen(regs*)+0x1de>
c0012a82:	83 ec 0c             	sub    esp,0xc
c0012a85:	56                   	push   esi
c0012a86:	e8 13 67 ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c0012a8b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012a8e:	83 c4 10             	add    esp,0x10
c0012a91:	89 02                	mov    DWORD PTR [edx],eax
c0012a93:	c1 f8 1f             	sar    eax,0x1f
c0012a96:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012a99:	e9 ba fe ff ff       	jmp    c0012958 <SysOpen(regs*)+0x98>
c0012a9e:	81 c4 04 01 00 00    	add    esp,0x104
c0012aa4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012aa9:	5b                   	pop    ebx
c0012aaa:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012aaf:	5e                   	pop    esi
c0012ab0:	c3                   	ret    
c0012ab1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012ab4:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012aba:	e9 92 fe ff ff       	jmp    c0012951 <SysOpen(regs*)+0x91>

c0012abf <KeSystemCall(regs*, void*)>:
c0012abf:	53                   	push   ebx
c0012ac0:	83 ec 08             	sub    esp,0x8
c0012ac3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012ac7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012aca:	83 f8 3e             	cmp    eax,0x3e
c0012acd:	77 16                	ja     c0012ae5 <KeSystemCall(regs*, void*)+0x26>
c0012acf:	8b 14 85 80 3d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc280]
c0012ad6:	85 d2                	test   edx,edx
c0012ad8:	74 0b                	je     c0012ae5 <KeSystemCall(regs*, void*)+0x26>
c0012ada:	83 ec 0c             	sub    esp,0xc
c0012add:	53                   	push   ebx
c0012ade:	ff d2                	call   edx
c0012ae0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0012ae3:	eb 0d                	jmp    c0012af2 <KeSystemCall(regs*, void*)+0x33>
c0012ae5:	52                   	push   edx
c0012ae6:	52                   	push   edx
c0012ae7:	50                   	push   eax
c0012ae8:	68 7a 25 02 c0       	push   0xc002257a
c0012aed:	e8 18 7e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0012af2:	83 c4 10             	add    esp,0x10
c0012af5:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012afa:	83 c4 08             	add    esp,0x8
c0012afd:	31 d2                	xor    edx,edx
c0012aff:	5b                   	pop    ebx
c0012b00:	c3                   	ret    
c0012b01:	66 90                	xchg   ax,ax
c0012b03:	90                   	nop

c0012b04 <KeSwitchEndian16(unsigned short)>:
c0012b04:	83 ec 04             	sub    esp,0x4
c0012b07:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012b0b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0012b0f:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012b13:	c1 f8 08             	sar    eax,0x8
c0012b16:	89 c2                	mov    edx,eax
c0012b18:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012b1c:	c1 e0 08             	shl    eax,0x8
c0012b1f:	09 d0                	or     eax,edx
c0012b21:	83 c4 04             	add    esp,0x4
c0012b24:	c3                   	ret    
c0012b25:	8d 76 00             	lea    esi,[esi+0x0]

c0012b28 <KeSwitchEndian32(unsigned int)>:
c0012b28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b2c:	c1 e8 18             	shr    eax,0x18
c0012b2f:	89 c2                	mov    edx,eax
c0012b31:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b35:	c1 e0 08             	shl    eax,0x8
c0012b38:	25 00 00 ff 00       	and    eax,0xff0000
c0012b3d:	09 c2                	or     edx,eax
c0012b3f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b43:	c1 e8 08             	shr    eax,0x8
c0012b46:	25 00 ff 00 00       	and    eax,0xff00
c0012b4b:	09 c2                	or     edx,eax
c0012b4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b51:	c1 e0 18             	shl    eax,0x18
c0012b54:	09 d0                	or     eax,edx
c0012b56:	c3                   	ret    
c0012b57:	90                   	nop

c0012b58 <EthernetCRC32(unsigned char*, int)>:
c0012b58:	83 ec 10             	sub    esp,0x10
c0012b5b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012b60:	75 0a                	jne    c0012b6c <EthernetCRC32(unsigned char*, int)+0x14>
c0012b62:	b8 00 00 00 00       	mov    eax,0x0
c0012b67:	e9 8c 00 00 00       	jmp    c0012bf8 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012b6c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012b71:	7f 09                	jg     c0012b7c <EthernetCRC32(unsigned char*, int)+0x24>
c0012b73:	b8 00 00 00 00       	mov    eax,0x0
c0012b78:	eb 7e                	jmp    c0012bf8 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012b7a:	66 90                	xchg   ax,ax
c0012b7c:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0012b84:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012b8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012b90:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0012b94:	7d 5a                	jge    c0012bf0 <EthernetCRC32(unsigned char*, int)+0x98>
c0012b96:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012b9a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012b9e:	01 d0                	add    eax,edx
c0012ba0:	8a 00                	mov    al,BYTE PTR [eax]
c0012ba2:	0f b6 c0             	movzx  eax,al
c0012ba5:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0012ba9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012bb1:	8d 76 00             	lea    esi,[esi+0x0]
c0012bb4:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0012bb9:	7f 2d                	jg     c0012be8 <EthernetCRC32(unsigned char*, int)+0x90>
c0012bbb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bbf:	83 e0 01             	and    eax,0x1
c0012bc2:	74 10                	je     c0012bd4 <EthernetCRC32(unsigned char*, int)+0x7c>
c0012bc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bc8:	d1 e8                	shr    eax,1
c0012bca:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0012bcf:	eb 0b                	jmp    c0012bdc <EthernetCRC32(unsigned char*, int)+0x84>
c0012bd1:	8d 76 00             	lea    esi,[esi+0x0]
c0012bd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bd8:	d1 e8                	shr    eax,1
c0012bda:	66 90                	xchg   ax,ax
c0012bdc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012be0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0012be5:	eb cd                	jmp    c0012bb4 <EthernetCRC32(unsigned char*, int)+0x5c>
c0012be7:	90                   	nop
c0012be8:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0012bed:	eb 9d                	jmp    c0012b8c <EthernetCRC32(unsigned char*, int)+0x34>
c0012bef:	90                   	nop
c0012bf0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bf4:	f7 d0                	not    eax
c0012bf6:	66 90                	xchg   ax,ax
c0012bf8:	83 c4 10             	add    esp,0x10
c0012bfb:	c3                   	ret    

c0012bfc <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0012bfc:	83 ec 2c             	sub    esp,0x2c
c0012bff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012c03:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012c08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c0c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012c10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012c14:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012c17:	0f b7 c0             	movzx  eax,ax
c0012c1a:	3d 06 08 00 00       	cmp    eax,0x806
c0012c1f:	75 13                	jne    c0012c34 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0012c21:	83 ec 0c             	sub    esp,0xc
c0012c24:	68 8e 25 02 c0       	push   0xc002258e
c0012c29:	e8 dc 7c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0012c2e:	83 c4 10             	add    esp,0x10
c0012c31:	eb 25                	jmp    c0012c58 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012c33:	90                   	nop
c0012c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012c38:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012c3b:	0f b7 c0             	movzx  eax,ax
c0012c3e:	3d 00 08 00 00       	cmp    eax,0x800
c0012c43:	75 13                	jne    c0012c58 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012c45:	83 ec 0c             	sub    esp,0xc
c0012c48:	68 a4 25 02 c0       	push   0xc00225a4
c0012c4d:	e8 b8 7c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0012c52:	83 c4 10             	add    esp,0x10
c0012c55:	8d 76 00             	lea    esi,[esi+0x0]
c0012c58:	90                   	nop
c0012c59:	83 c4 2c             	add    esp,0x2c
c0012c5c:	c3                   	ret    

c0012c5d <CmOpen(char const*)>:
c0012c5d:	57                   	push   edi
c0012c5e:	56                   	push   esi
c0012c5f:	53                   	push   ebx
c0012c60:	83 ec 1c             	sub    esp,0x1c
c0012c63:	6a 30                	push   0x30
c0012c65:	e8 69 4e ff ff       	call   c0007ad3 <malloc>
c0012c6a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012c71:	89 c3                	mov    ebx,eax
c0012c73:	e8 5b 4e ff ff       	call   c0007ad3 <malloc>
c0012c78:	83 c4 0c             	add    esp,0xc
c0012c7b:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0012c81:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012c85:	89 c6                	mov    esi,eax
c0012c87:	50                   	push   eax
c0012c88:	e8 37 8f ff ff       	call   c000bbc4 <File::File(char const*, Process*)>
c0012c8d:	83 c4 0c             	add    esp,0xc
c0012c90:	89 33                	mov    DWORD PTR [ebx],esi
c0012c92:	8d 44 24 07          	lea    eax,[esp+0x7]
c0012c96:	50                   	push   eax
c0012c97:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012c9b:	50                   	push   eax
c0012c9c:	56                   	push   esi
c0012c9d:	e8 42 92 ff ff       	call   c000bee4 <File::stat(unsigned long long*, bool*)>
c0012ca2:	5a                   	pop    edx
c0012ca3:	59                   	pop    ecx
c0012ca4:	6a 01                	push   0x1
c0012ca6:	ff 33                	push   DWORD PTR [ebx]
c0012ca8:	e8 35 8f ff ff       	call   c000bbe2 <File::open(FileOpenMode)>
c0012cad:	5e                   	pop    esi
c0012cae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012cb2:	e8 1c 4e ff ff       	call   c0007ad3 <malloc>
c0012cb7:	5a                   	pop    edx
c0012cb8:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012cbc:	89 c7                	mov    edi,eax
c0012cbe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012cc0:	8b 10                	mov    edx,DWORD PTR [eax]
c0012cc2:	56                   	push   esi
c0012cc3:	57                   	push   edi
c0012cc4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012cc8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012ccc:	50                   	push   eax
c0012ccd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012cd0:	83 c4 14             	add    esp,0x14
c0012cd3:	ff 33                	push   DWORD PTR [ebx]
c0012cd5:	e8 66 8f ff ff       	call   c000bc40 <File::close()>
c0012cda:	59                   	pop    ecx
c0012cdb:	58                   	pop    eax
c0012cdc:	6a 13                	push   0x13
c0012cde:	ff 33                	push   DWORD PTR [ebx]
c0012ce0:	e8 fd 8e ff ff       	call   c000bbe2 <File::open(FileOpenMode)>
c0012ce5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ce7:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ce9:	89 34 24             	mov    DWORD PTR [esp],esi
c0012cec:	57                   	push   edi
c0012ced:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012cf1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012cf5:	50                   	push   eax
c0012cf6:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012cf9:	83 c4 14             	add    esp,0x14
c0012cfc:	57                   	push   edi
c0012cfd:	e8 e1 4d ff ff       	call   c0007ae3 <free>
c0012d02:	83 c4 10             	add    esp,0x10
c0012d05:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0012d08:	75 10                	jne    c0012d1a <CmOpen(char const*)+0xbd>
c0012d0a:	83 ec 0c             	sub    esp,0xc
c0012d0d:	68 b9 25 02 c0       	push   0xc00225b9
c0012d12:	e8 f4 e8 ff ff       	call   c001160b <KePanic(char const*)>
c0012d17:	83 c4 10             	add    esp,0x10
c0012d1a:	50                   	push   eax
c0012d1b:	6a 00                	push   0x0
c0012d1d:	6a 00                	push   0x0
c0012d1f:	ff 33                	push   DWORD PTR [ebx]
c0012d21:	8d 7b 05             	lea    edi,[ebx+0x5]
c0012d24:	e8 77 8f ff ff       	call   c000bca0 <File::seek(unsigned long long)>
c0012d29:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d2b:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d2d:	89 34 24             	mov    DWORD PTR [esp],esi
c0012d30:	57                   	push   edi
c0012d31:	6a 00                	push   0x0
c0012d33:	6a 2b                	push   0x2b
c0012d35:	50                   	push   eax
c0012d36:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012d39:	83 c4 1c             	add    esp,0x1c
c0012d3c:	6a 00                	push   0x0
c0012d3e:	6a 00                	push   0x0
c0012d40:	ff 33                	push   DWORD PTR [ebx]
c0012d42:	e8 59 8f ff ff       	call   c000bca0 <File::seek(unsigned long long)>
c0012d47:	83 c4 0c             	add    esp,0xc
c0012d4a:	6a 08                	push   0x8
c0012d4c:	68 ca 25 02 c0       	push   0xc00225ca
c0012d51:	57                   	push   edi
c0012d52:	e8 29 d6 fe ff       	call   c0000380 <memcmp>
c0012d57:	83 c4 10             	add    esp,0x10
c0012d5a:	85 c0                	test   eax,eax
c0012d5c:	74 10                	je     c0012d6e <CmOpen(char const*)+0x111>
c0012d5e:	83 ec 0c             	sub    esp,0xc
c0012d61:	68 d3 25 02 c0       	push   0xc00225d3
c0012d66:	e8 a0 e8 ff ff       	call   c001160b <KePanic(char const*)>
c0012d6b:	83 c4 10             	add    esp,0x10
c0012d6e:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0012d72:	83 c4 10             	add    esp,0x10
c0012d75:	89 d8                	mov    eax,ebx
c0012d77:	5b                   	pop    ebx
c0012d78:	5e                   	pop    esi
c0012d79:	5f                   	pop    edi
c0012d7a:	c3                   	ret    

c0012d7b <CmClose(Reghive_Tag*)>:
c0012d7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d7f:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012d83:	74 0b                	je     c0012d90 <CmClose(Reghive_Tag*)+0x15>
c0012d85:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012d8b:	e9 b0 8e ff ff       	jmp    c000bc40 <File::close()>
c0012d90:	c3                   	ret    

c0012d91 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012d91:	53                   	push   ebx
c0012d92:	83 ec 18             	sub    esp,0x18
c0012d95:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012d99:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012d9d:	74 29                	je     c0012dc8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012d9f:	50                   	push   eax
c0012da0:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012da5:	99                   	cdq    
c0012da6:	52                   	push   edx
c0012da7:	50                   	push   eax
c0012da8:	ff 33                	push   DWORD PTR [ebx]
c0012daa:	e8 f1 8e ff ff       	call   c000bca0 <File::seek(unsigned long long)>
c0012daf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012db1:	5a                   	pop    edx
c0012db2:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012db6:	8b 10                	mov    edx,DWORD PTR [eax]
c0012db8:	51                   	push   ecx
c0012db9:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012dbd:	6a 00                	push   0x0
c0012dbf:	6a 2b                	push   0x2b
c0012dc1:	50                   	push   eax
c0012dc2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012dc5:	83 c4 20             	add    esp,0x20
c0012dc8:	83 c4 18             	add    esp,0x18
c0012dcb:	5b                   	pop    ebx
c0012dcc:	c3                   	ret    

c0012dcd <CmGetString(Reghive_Tag*, int, char*)>:
c0012dcd:	55                   	push   ebp
c0012dce:	57                   	push   edi
c0012dcf:	56                   	push   esi
c0012dd0:	53                   	push   ebx
c0012dd1:	31 db                	xor    ebx,ebx
c0012dd3:	83 ec 70             	sub    esp,0x70
c0012dd6:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0012dda:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0012de1:	50                   	push   eax
c0012de2:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012de9:	55                   	push   ebp
c0012dea:	e8 a2 ff ff ff       	call   c0012d91 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012def:	83 c4 10             	add    esp,0x10
c0012df2:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0012df7:	c1 e0 08             	shl    eax,0x8
c0012dfa:	89 c2                	mov    edx,eax
c0012dfc:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012e01:	09 d0                	or     eax,edx
c0012e03:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0012e08:	c1 e0 08             	shl    eax,0x8
c0012e0b:	09 d0                	or     eax,edx
c0012e0d:	74 25                	je     c0012e34 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0012e0f:	52                   	push   edx
c0012e10:	8d 54 24 39          	lea    edx,[esp+0x39]
c0012e14:	52                   	push   edx
c0012e15:	6b fb 0d             	imul   edi,ebx,0xd
c0012e18:	50                   	push   eax
c0012e19:	55                   	push   ebp
c0012e1a:	e8 72 ff ff ff       	call   c0012d91 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e1f:	8d 74 24 49          	lea    esi,[esp+0x49]
c0012e23:	b9 27 00 00 00       	mov    ecx,0x27
c0012e28:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0012e2f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012e31:	83 c4 10             	add    esp,0x10
c0012e34:	83 c3 03             	add    ebx,0x3
c0012e37:	83 fb 15             	cmp    ebx,0x15
c0012e3a:	75 b6                	jne    c0012df2 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0012e3c:	83 c4 6c             	add    esp,0x6c
c0012e3f:	5b                   	pop    ebx
c0012e40:	5e                   	pop    esi
c0012e41:	5f                   	pop    edi
c0012e42:	5d                   	pop    ebp
c0012e43:	c3                   	ret    

c0012e44 <CmEnterDirectory(Reghive_Tag*, int)>:
c0012e44:	83 ec 40             	sub    esp,0x40
c0012e47:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012e4b:	50                   	push   eax
c0012e4c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e50:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e54:	e8 38 ff ff ff       	call   c0012d91 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e59:	83 c4 10             	add    esp,0x10
c0012e5c:	83 c8 ff             	or     eax,0xffffffff
c0012e5f:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012e64:	75 19                	jne    c0012e7f <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0012e66:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012e6b:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0012e70:	c1 e0 08             	shl    eax,0x8
c0012e73:	09 c2                	or     edx,eax
c0012e75:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0012e7a:	c1 e0 10             	shl    eax,0x10
c0012e7d:	09 d0                	or     eax,edx
c0012e7f:	83 c4 3c             	add    esp,0x3c
c0012e82:	c3                   	ret    

c0012e83 <CmGetNext(Reghive_Tag*, int)>:
c0012e83:	83 ec 40             	sub    esp,0x40
c0012e86:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012e8a:	50                   	push   eax
c0012e8b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e8f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e93:	e8 f9 fe ff ff       	call   c0012d91 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e98:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012e9d:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0012ea2:	c1 e0 08             	shl    eax,0x8
c0012ea5:	09 c2                	or     edx,eax
c0012ea7:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012eac:	83 c4 4c             	add    esp,0x4c
c0012eaf:	c1 e0 10             	shl    eax,0x10
c0012eb2:	09 d0                	or     eax,edx
c0012eb4:	c3                   	ret    

c0012eb5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0012eb5:	53                   	push   ebx
c0012eb6:	83 ec 18             	sub    esp,0x18
c0012eb9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012ebd:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012ec1:	74 29                	je     c0012eec <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012ec3:	50                   	push   eax
c0012ec4:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012ec9:	99                   	cdq    
c0012eca:	52                   	push   edx
c0012ecb:	50                   	push   eax
c0012ecc:	ff 33                	push   DWORD PTR [ebx]
c0012ece:	e8 cd 8d ff ff       	call   c000bca0 <File::seek(unsigned long long)>
c0012ed3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ed5:	5a                   	pop    edx
c0012ed6:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012eda:	8b 10                	mov    edx,DWORD PTR [eax]
c0012edc:	51                   	push   ecx
c0012edd:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012ee1:	6a 00                	push   0x0
c0012ee3:	6a 2b                	push   0x2b
c0012ee5:	50                   	push   eax
c0012ee6:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012ee9:	83 c4 20             	add    esp,0x20
c0012eec:	83 c4 18             	add    esp,0x18
c0012eef:	5b                   	pop    ebx
c0012ef0:	c3                   	ret    

c0012ef1 <CmFreeExtent(Reghive_Tag*, int)>:
c0012ef1:	53                   	push   ebx
c0012ef2:	83 ec 3c             	sub    esp,0x3c
c0012ef5:	6a 2b                	push   0x2b
c0012ef7:	6a 00                	push   0x0
c0012ef9:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012efd:	53                   	push   ebx
c0012efe:	e8 ed d5 fe ff       	call   c00004f0 <memset>
c0012f03:	83 c4 0c             	add    esp,0xc
c0012f06:	53                   	push   ebx
c0012f07:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f0b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f0f:	e8 a1 ff ff ff       	call   c0012eb5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012f14:	83 c4 48             	add    esp,0x48
c0012f17:	5b                   	pop    ebx
c0012f18:	c3                   	ret    

c0012f19 <CmUpdateHeader(Reghive_Tag*)>:
c0012f19:	83 ec 0c             	sub    esp,0xc
c0012f1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f20:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012f24:	74 10                	je     c0012f36 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0012f26:	52                   	push   edx
c0012f27:	8d 50 05             	lea    edx,[eax+0x5]
c0012f2a:	52                   	push   edx
c0012f2b:	6a 00                	push   0x0
c0012f2d:	50                   	push   eax
c0012f2e:	e8 82 ff ff ff       	call   c0012eb5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012f33:	83 c4 10             	add    esp,0x10
c0012f36:	83 c4 0c             	add    esp,0xc
c0012f39:	c3                   	ret    

c0012f3a <CmExpand(Reghive_Tag*, int)>:
c0012f3a:	55                   	push   ebp
c0012f3b:	57                   	push   edi
c0012f3c:	83 cf ff             	or     edi,0xffffffff
c0012f3f:	56                   	push   esi
c0012f40:	53                   	push   ebx
c0012f41:	83 ec 3c             	sub    esp,0x3c
c0012f44:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012f48:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012f4c:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012f50:	74 59                	je     c0012fab <CmExpand(Reghive_Tag*, int)+0x71>
c0012f52:	50                   	push   eax
c0012f53:	31 d2                	xor    edx,edx
c0012f55:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012f59:	31 ff                	xor    edi,edi
c0012f5b:	52                   	push   edx
c0012f5c:	50                   	push   eax
c0012f5d:	ff 33                	push   DWORD PTR [ebx]
c0012f5f:	e8 3c 8d ff ff       	call   c000bca0 <File::seek(unsigned long long)>
c0012f64:	83 c4 0c             	add    esp,0xc
c0012f67:	6a 2b                	push   0x2b
c0012f69:	6a 00                	push   0x0
c0012f6b:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c0012f6f:	55                   	push   ebp
c0012f70:	e8 7b d5 fe ff       	call   c00004f0 <memset>
c0012f75:	83 c4 10             	add    esp,0x10
c0012f78:	39 f7                	cmp    edi,esi
c0012f7a:	7d 1b                	jge    c0012f97 <CmExpand(Reghive_Tag*, int)+0x5d>
c0012f7c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f7e:	83 ec 0c             	sub    esp,0xc
c0012f81:	47                   	inc    edi
c0012f82:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012f86:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f88:	51                   	push   ecx
c0012f89:	55                   	push   ebp
c0012f8a:	6a 00                	push   0x0
c0012f8c:	6a 2b                	push   0x2b
c0012f8e:	50                   	push   eax
c0012f8f:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012f92:	83 c4 20             	add    esp,0x20
c0012f95:	eb e1                	jmp    c0012f78 <CmExpand(Reghive_Tag*, int)+0x3e>
c0012f97:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c0012f9a:	83 ec 0c             	sub    esp,0xc
c0012f9d:	01 fe                	add    esi,edi
c0012f9f:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c0012fa2:	53                   	push   ebx
c0012fa3:	e8 71 ff ff ff       	call   c0012f19 <CmUpdateHeader(Reghive_Tag*)>
c0012fa8:	83 c4 10             	add    esp,0x10
c0012fab:	83 c4 3c             	add    esp,0x3c
c0012fae:	89 f8                	mov    eax,edi
c0012fb0:	5b                   	pop    ebx
c0012fb1:	5e                   	pop    esi
c0012fb2:	5f                   	pop    edi
c0012fb3:	5d                   	pop    ebp
c0012fb4:	c3                   	ret    

c0012fb5 <CmFindUnusedExtent(Reghive_Tag*)>:
c0012fb5:	55                   	push   ebp
c0012fb6:	57                   	push   edi
c0012fb7:	56                   	push   esi
c0012fb8:	53                   	push   ebx
c0012fb9:	83 cb ff             	or     ebx,0xffffffff
c0012fbc:	83 ec 1c             	sub    esp,0x1c
c0012fbf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012fc3:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0012fc7:	74 68                	je     c0013031 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012fc9:	51                   	push   ecx
c0012fca:	be 2b 00 00 00       	mov    esi,0x2b
c0012fcf:	6a 00                	push   0x0
c0012fd1:	31 ff                	xor    edi,edi
c0012fd3:	6a 00                	push   0x0
c0012fd5:	31 db                	xor    ebx,ebx
c0012fd7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012fda:	e8 c1 8c ff ff       	call   c000bca0 <File::seek(unsigned long long)>
c0012fdf:	83 c4 10             	add    esp,0x10
c0012fe2:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012fe5:	76 3b                	jbe    c0013022 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012fe7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012fea:	83 ec 0c             	sub    esp,0xc
c0012fed:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012ff1:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ff3:	51                   	push   ecx
c0012ff4:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012ff8:	51                   	push   ecx
c0012ff9:	6a 00                	push   0x0
c0012ffb:	6a 01                	push   0x1
c0012ffd:	50                   	push   eax
c0012ffe:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0013001:	83 c4 20             	add    esp,0x20
c0013004:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0013009:	74 26                	je     c0013031 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c001300b:	52                   	push   edx
c001300c:	43                   	inc    ebx
c001300d:	57                   	push   edi
c001300e:	56                   	push   esi
c001300f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0013012:	e8 89 8c ff ff       	call   c000bca0 <File::seek(unsigned long long)>
c0013017:	83 c6 2b             	add    esi,0x2b
c001301a:	83 d7 00             	adc    edi,0x0
c001301d:	83 c4 10             	add    esp,0x10
c0013020:	eb c0                	jmp    c0012fe2 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0013022:	50                   	push   eax
c0013023:	50                   	push   eax
c0013024:	6a 40                	push   0x40
c0013026:	55                   	push   ebp
c0013027:	e8 0e ff ff ff       	call   c0012f3a <CmExpand(Reghive_Tag*, int)>
c001302c:	83 c4 10             	add    esp,0x10
c001302f:	89 c3                	mov    ebx,eax
c0013031:	83 c4 1c             	add    esp,0x1c
c0013034:	89 d8                	mov    eax,ebx
c0013036:	5b                   	pop    ebx
c0013037:	5e                   	pop    esi
c0013038:	5f                   	pop    edi
c0013039:	5d                   	pop    ebp
c001303a:	c3                   	ret    

c001303b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c001303b:	55                   	push   ebp
c001303c:	57                   	push   edi
c001303d:	56                   	push   esi
c001303e:	53                   	push   ebx
c001303f:	81 ec 88 00 00 00    	sub    esp,0x88
c0013045:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c001304c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013053:	e8 5d ff ff ff       	call   c0012fb5 <CmFindUnusedExtent(Reghive_Tag*)>
c0013058:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001305c:	83 c4 0c             	add    esp,0xc
c001305f:	6a 2b                	push   0x2b
c0013061:	6a 00                	push   0x0
c0013063:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0013067:	55                   	push   ebp
c0013068:	e8 83 d4 fe ff       	call   c00004f0 <memset>
c001306d:	83 c4 10             	add    esp,0x10
c0013070:	85 db                	test   ebx,ebx
c0013072:	74 12                	je     c0013086 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0013074:	51                   	push   ecx
c0013075:	55                   	push   ebp
c0013076:	53                   	push   ebx
c0013077:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001307e:	e8 0e fd ff ff       	call   c0012d91 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013083:	83 c4 10             	add    esp,0x10
c0013086:	8d 7c 24 45          	lea    edi,[esp+0x45]
c001308a:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0013091:	b9 2b 00 00 00       	mov    ecx,0x2b
c0013096:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013098:	85 db                	test   ebx,ebx
c001309a:	74 49                	je     c00130e5 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c001309c:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00130a1:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c00130a6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00130aa:	c1 e0 08             	shl    eax,0x8
c00130ad:	81 e2 ff ff ff 00    	and    edx,0xffffff
c00130b3:	09 c8                	or     eax,ecx
c00130b5:	74 11                	je     c00130c8 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c00130b7:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00130bb:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c00130bf:	c1 e8 10             	shr    eax,0x10
c00130c2:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00130c6:	eb 0f                	jmp    c00130d7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c00130c8:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c00130cd:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c00130d2:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c00130d7:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c00130db:	c1 ea 08             	shr    edx,0x8
c00130de:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c00130e3:	eb 0f                	jmp    c00130f4 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c00130e5:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c00130ea:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c00130ef:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c00130f4:	52                   	push   edx
c00130f5:	8d 44 24 49          	lea    eax,[esp+0x49]
c00130f9:	50                   	push   eax
c00130fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00130fe:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013105:	e8 ab fd ff ff       	call   c0012eb5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001310a:	83 c4 10             	add    esp,0x10
c001310d:	85 db                	test   ebx,ebx
c001310f:	74 12                	je     c0013123 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0013111:	50                   	push   eax
c0013112:	55                   	push   ebp
c0013113:	53                   	push   ebx
c0013114:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001311b:	e8 95 fd ff ff       	call   c0012eb5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013120:	83 c4 10             	add    esp,0x10
c0013123:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013127:	83 c4 7c             	add    esp,0x7c
c001312a:	5b                   	pop    ebx
c001312b:	5e                   	pop    esi
c001312c:	5f                   	pop    edi
c001312d:	5d                   	pop    ebp
c001312e:	c3                   	ret    

c001312f <CmSetString(Reghive_Tag*, int, char const*)>:
c001312f:	55                   	push   ebp
c0013130:	57                   	push   edi
c0013131:	56                   	push   esi
c0013132:	53                   	push   ebx
c0013133:	bb 27 00 00 00       	mov    ebx,0x27
c0013138:	81 ec 88 00 00 00    	sub    esp,0x88
c001313e:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c0013145:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c001314c:	e8 2f d4 fe ff       	call   c0000580 <strlen>
c0013151:	8d 48 26             	lea    ecx,[eax+0x26]
c0013154:	89 c8                	mov    eax,ecx
c0013156:	99                   	cdq    
c0013157:	f7 fb                	idiv   ebx
c0013159:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001315d:	83 c4 10             	add    esp,0x10
c0013160:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0013166:	7e 10                	jle    c0013178 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0013168:	83 ec 0c             	sub    esp,0xc
c001316b:	68 e4 25 02 c0       	push   0xc00225e4
c0013170:	e8 96 e4 ff ff       	call   c001160b <KePanic(char const*)>
c0013175:	83 c4 10             	add    esp,0x10
c0013178:	53                   	push   ebx
c0013179:	31 ed                	xor    ebp,ebp
c001317b:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c001317f:	53                   	push   ebx
c0013180:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013187:	57                   	push   edi
c0013188:	e8 04 fc ff ff       	call   c0012d91 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001318d:	83 c4 10             	add    esp,0x10
c0013190:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c0013194:	89 f0                	mov    eax,esi
c0013196:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c001319a:	c1 e0 08             	shl    eax,0x8
c001319d:	09 c6                	or     esi,eax
c001319f:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c00131a3:	c1 e6 08             	shl    esi,0x8
c00131a6:	09 c6                	or     esi,eax
c00131a8:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c00131ac:	7e 72                	jle    c0013220 <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c00131ae:	85 f6                	test   esi,esi
c00131b0:	75 25                	jne    c00131d7 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c00131b2:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c00131b7:	8d 44 24 45          	lea    eax,[esp+0x45]
c00131bb:	50                   	push   eax
c00131bc:	6a 00                	push   0x0
c00131be:	6a 00                	push   0x0
c00131c0:	57                   	push   edi
c00131c1:	e8 75 fe ff ff       	call   c001303b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00131c6:	83 c4 10             	add    esp,0x10
c00131c9:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c00131cc:	89 c6                	mov    esi,eax
c00131ce:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c00131d1:	c1 f8 10             	sar    eax,0x10
c00131d4:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c00131d7:	51                   	push   ecx
c00131d8:	8d 54 24 49          	lea    edx,[esp+0x49]
c00131dc:	52                   	push   edx
c00131dd:	56                   	push   esi
c00131de:	57                   	push   edi
c00131df:	e8 ad fb ff ff       	call   c0012d91 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00131e4:	83 c4 0c             	add    esp,0xc
c00131e7:	6a 27                	push   0x27
c00131e9:	6a 00                	push   0x0
c00131eb:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c00131ef:	51                   	push   ecx
c00131f0:	e8 fb d2 fe ff       	call   c00004f0 <memset>
c00131f5:	6b c5 27             	imul   eax,ebp,0x27
c00131f8:	83 c4 0c             	add    esp,0xc
c00131fb:	6a 27                	push   0x27
c00131fd:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0013204:	50                   	push   eax
c0013205:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0013209:	51                   	push   ecx
c001320a:	e8 81 d4 fe ff       	call   c0000690 <strncpy>
c001320f:	83 c4 0c             	add    esp,0xc
c0013212:	8d 54 24 49          	lea    edx,[esp+0x49]
c0013216:	52                   	push   edx
c0013217:	56                   	push   esi
c0013218:	57                   	push   edi
c0013219:	e8 97 fc ff ff       	call   c0012eb5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001321e:	eb 19                	jmp    c0013239 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c0013220:	85 f6                	test   esi,esi
c0013222:	74 18                	je     c001323c <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c0013224:	52                   	push   edx
c0013225:	52                   	push   edx
c0013226:	56                   	push   esi
c0013227:	57                   	push   edi
c0013228:	e8 c4 fc ff ff       	call   c0012ef1 <CmFreeExtent(Reghive_Tag*, int)>
c001322d:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0013231:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0013235:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0013239:	83 c4 10             	add    esp,0x10
c001323c:	45                   	inc    ebp
c001323d:	83 c3 03             	add    ebx,0x3
c0013240:	83 fd 07             	cmp    ebp,0x7
c0013243:	0f 85 47 ff ff ff    	jne    c0013190 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0013249:	50                   	push   eax
c001324a:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c001324e:	50                   	push   eax
c001324f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013256:	57                   	push   edi
c0013257:	e8 59 fc ff ff       	call   c0012eb5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001325c:	81 c4 8c 00 00 00    	add    esp,0x8c
c0013262:	5b                   	pop    ebx
c0013263:	5e                   	pop    esi
c0013264:	5f                   	pop    edi
c0013265:	5d                   	pop    ebp
c0013266:	c3                   	ret    

c0013267 <CmGetMatch(char*, char*, bool, bool*)>:
c0013267:	56                   	push   esi
c0013268:	53                   	push   ebx
c0013269:	50                   	push   eax
c001326a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001326f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013273:	74 25                	je     c001329a <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0013275:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0013278:	31 db                	xor    ebx,ebx
c001327a:	50                   	push   eax
c001327b:	50                   	push   eax
c001327c:	8d 04 9d 80 3e 02 c0 	lea    eax,[ebx*4-0x3ffdc180]
c0013283:	50                   	push   eax
c0013284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013288:	e8 f3 d4 fe ff       	call   c0000780 <strcmp>
c001328d:	83 c4 10             	add    esp,0x10
c0013290:	85 c0                	test   eax,eax
c0013292:	74 2e                	je     c00132c2 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0013294:	43                   	inc    ebx
c0013295:	83 fb 3f             	cmp    ebx,0x3f
c0013298:	75 e0                	jne    c001327a <CmGetMatch(char*, char*, bool, bool*)+0x13>
c001329a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001329d:	31 db                	xor    ebx,ebx
c001329f:	51                   	push   ecx
c00132a0:	51                   	push   ecx
c00132a1:	8d 04 9d 80 3e 02 c0 	lea    eax,[ebx*4-0x3ffdc180]
c00132a8:	50                   	push   eax
c00132a9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00132ad:	e8 ce d4 fe ff       	call   c0000780 <strcmp>
c00132b2:	83 c4 10             	add    esp,0x10
c00132b5:	85 c0                	test   eax,eax
c00132b7:	74 09                	je     c00132c2 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00132b9:	43                   	inc    ebx
c00132ba:	83 fb 3f             	cmp    ebx,0x3f
c00132bd:	75 e0                	jne    c001329f <CmGetMatch(char*, char*, bool, bool*)+0x38>
c00132bf:	83 cb ff             	or     ebx,0xffffffff
c00132c2:	5a                   	pop    edx
c00132c3:	89 d8                	mov    eax,ebx
c00132c5:	5b                   	pop    ebx
c00132c6:	5e                   	pop    esi
c00132c7:	c3                   	ret    

c00132c8 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c00132c8:	55                   	push   ebp
c00132c9:	31 c0                	xor    eax,eax
c00132cb:	57                   	push   edi
c00132cc:	56                   	push   esi
c00132cd:	53                   	push   ebx
c00132ce:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00132d2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00132d6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00132da:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00132de:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00132e0:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c00132e3:	83 fd 1f             	cmp    ebp,0x1f
c00132e6:	7f 0b                	jg     c00132f3 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c00132e8:	0f b6 c2             	movzx  eax,dl
c00132eb:	d3 e0                	shl    eax,cl
c00132ed:	09 07                	or     DWORD PTR [edi],eax
c00132ef:	b0 01                	mov    al,0x1
c00132f1:	01 33                	add    DWORD PTR [ebx],esi
c00132f3:	5b                   	pop    ebx
c00132f4:	5e                   	pop    esi
c00132f5:	5f                   	pop    edi
c00132f6:	5d                   	pop    ebp
c00132f7:	c3                   	ret    

c00132f8 <CmGetShift(unsigned int*, int*, int, bool*)>:
c00132f8:	57                   	push   edi
c00132f9:	56                   	push   esi
c00132fa:	53                   	push   ebx
c00132fb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00132ff:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013303:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0013307:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001330b:	39 0b                	cmp    DWORD PTR [ebx],ecx
c001330d:	7c 17                	jl     c0013326 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c001330f:	8b 17                	mov    edx,DWORD PTR [edi]
c0013311:	b8 01 00 00 00       	mov    eax,0x1
c0013316:	d3 e0                	shl    eax,cl
c0013318:	48                   	dec    eax
c0013319:	21 d0                	and    eax,edx
c001331b:	d3 ea                	shr    edx,cl
c001331d:	89 17                	mov    DWORD PTR [edi],edx
c001331f:	29 0b                	sub    DWORD PTR [ebx],ecx
c0013321:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0013324:	eb 05                	jmp    c001332b <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0013326:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0013329:	31 c0                	xor    eax,eax
c001332b:	5b                   	pop    ebx
c001332c:	5e                   	pop    esi
c001332d:	5f                   	pop    edi
c001332e:	c3                   	ret    

c001332f <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c001332f:	83 ec 40             	sub    esp,0x40
c0013332:	8d 44 24 09          	lea    eax,[esp+0x9]
c0013336:	50                   	push   eax
c0013337:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001333b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001333f:	e8 4d fa ff ff       	call   c0012d91 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013344:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0013348:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c001334c:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0013350:	89 10                	mov    DWORD PTR [eax],edx
c0013352:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0013355:	83 c4 4c             	add    esp,0x4c
c0013358:	c3                   	ret    

c0013359 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0013359:	55                   	push   ebp
c001335a:	57                   	push   edi
c001335b:	56                   	push   esi
c001335c:	53                   	push   ebx
c001335d:	83 ec 40             	sub    esp,0x40
c0013360:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0013364:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0013368:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c001336c:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0013370:	53                   	push   ebx
c0013371:	56                   	push   esi
c0013372:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013376:	e8 16 fa ff ff       	call   c0012d91 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001337b:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c001337f:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0013383:	83 c4 0c             	add    esp,0xc
c0013386:	53                   	push   ebx
c0013387:	56                   	push   esi
c0013388:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001338c:	e8 24 fb ff ff       	call   c0012eb5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013391:	83 c4 4c             	add    esp,0x4c
c0013394:	5b                   	pop    ebx
c0013395:	5e                   	pop    esi
c0013396:	5f                   	pop    edi
c0013397:	5d                   	pop    ebp
c0013398:	c3                   	ret    

c0013399 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0013399:	55                   	push   ebp
c001339a:	57                   	push   edi
c001339b:	56                   	push   esi
c001339c:	31 f6                	xor    esi,esi
c001339e:	53                   	push   ebx
c001339f:	31 db                	xor    ebx,ebx
c00133a1:	83 ec 40             	sub    esp,0x40
c00133a4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00133ac:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00133b4:	6a 12                	push   0x12
c00133b6:	68 ee 00 00 00       	push   0xee
c00133bb:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00133bf:	e8 2c d1 fe ff       	call   c00004f0 <memset>
c00133c4:	83 c4 10             	add    esp,0x10
c00133c7:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00133cb:	6a 08                	push   0x8
c00133cd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00133d1:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c00133d5:	50                   	push   eax
c00133d6:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00133da:	55                   	push   ebp
c00133db:	57                   	push   edi
c00133dc:	e8 e7 fe ff ff       	call   c00132c8 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00133e1:	83 c4 10             	add    esp,0x10
c00133e4:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00133e8:	50                   	push   eax
c00133e9:	6a 06                	push   0x6
c00133eb:	55                   	push   ebp
c00133ec:	57                   	push   edi
c00133ed:	e8 06 ff ff ff       	call   c00132f8 <CmGetShift(unsigned int*, int*, int, bool*)>
c00133f2:	83 c4 10             	add    esp,0x10
c00133f5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00133fa:	74 07                	je     c0013403 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c00133fc:	46                   	inc    esi
c00133fd:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0013401:	eb e1                	jmp    c00133e4 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0013403:	43                   	inc    ebx
c0013404:	83 fb 12             	cmp    ebx,0x12
c0013407:	75 c2                	jne    c00133cb <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0013409:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001340d:	31 f6                	xor    esi,esi
c001340f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0013412:	50                   	push   eax
c0013413:	50                   	push   eax
c0013414:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c0013419:	46                   	inc    esi
c001341a:	8d 04 85 80 3e 02 c0 	lea    eax,[eax*4-0x3ffdc180]
c0013421:	50                   	push   eax
c0013422:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0013426:	e8 45 d4 fe ff       	call   c0000870 <strcat>
c001342b:	83 c4 10             	add    esp,0x10
c001342e:	83 fe 18             	cmp    esi,0x18
c0013431:	75 df                	jne    c0013412 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0013433:	83 c4 3c             	add    esp,0x3c
c0013436:	31 c0                	xor    eax,eax
c0013438:	5b                   	pop    ebx
c0013439:	5e                   	pop    esi
c001343a:	5f                   	pop    edi
c001343b:	5d                   	pop    ebp
c001343c:	c3                   	ret    

c001343d <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c001343d:	83 ec 40             	sub    esp,0x40
c0013440:	8d 44 24 09          	lea    eax,[esp+0x9]
c0013444:	50                   	push   eax
c0013445:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013449:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001344d:	e8 3f f9 ff ff       	call   c0012d91 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013452:	58                   	pop    eax
c0013453:	5a                   	pop    edx
c0013454:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0013458:	8d 44 24 15          	lea    eax,[esp+0x15]
c001345c:	50                   	push   eax
c001345d:	e8 37 ff ff ff       	call   c0013399 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0013462:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0013467:	83 c4 4c             	add    esp,0x4c
c001346a:	c3                   	ret    

c001346b <CmConvertToInternalFilename(char const*, unsigned char*)>:
c001346b:	55                   	push   ebp
c001346c:	57                   	push   edi
c001346d:	56                   	push   esi
c001346e:	53                   	push   ebx
c001346f:	31 db                	xor    ebx,ebx
c0013471:	83 ec 70             	sub    esp,0x70
c0013474:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c001347b:	6a 30                	push   0x30
c001347d:	6a 00                	push   0x0
c001347f:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0013483:	56                   	push   esi
c0013484:	e8 67 d0 fe ff       	call   c00004f0 <memset>
c0013489:	83 c4 10             	add    esp,0x10
c001348c:	83 ec 0c             	sub    esp,0xc
c001348f:	57                   	push   edi
c0013490:	e8 eb d0 fe ff       	call   c0000580 <strlen>
c0013495:	83 c4 10             	add    esp,0x10
c0013498:	39 d8                	cmp    eax,ebx
c001349a:	76 16                	jbe    c00134b2 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c001349c:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00134a0:	83 ec 0c             	sub    esp,0xc
c00134a3:	50                   	push   eax
c00134a4:	e8 b7 d4 fe ff       	call   c0000960 <toupper>
c00134a9:	83 c4 10             	add    esp,0x10
c00134ac:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00134af:	43                   	inc    ebx
c00134b0:	eb da                	jmp    c001348c <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c00134b2:	52                   	push   edx
c00134b3:	31 db                	xor    ebx,ebx
c00134b5:	6a 18                	push   0x18
c00134b7:	31 ff                	xor    edi,edi
c00134b9:	6a 3f                	push   0x3f
c00134bb:	8d 44 24 24          	lea    eax,[esp+0x24]
c00134bf:	50                   	push   eax
c00134c0:	e8 2b d0 fe ff       	call   c00004f0 <memset>
c00134c5:	83 c4 10             	add    esp,0x10
c00134c8:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c00134cc:	8d 74 24 10          	lea    esi,[esp+0x10]
c00134d0:	84 c0                	test   al,al
c00134d2:	0f 84 af 00 00 00    	je     c0013587 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c00134d8:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c00134dc:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00134df:	83 ec 0c             	sub    esp,0xc
c00134e2:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c00134e7:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c00134eb:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00134ef:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c00134f4:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c00134f8:	56                   	push   esi
c00134f9:	e8 82 d0 fe ff       	call   c0000580 <strlen>
c00134fe:	83 c4 10             	add    esp,0x10
c0013501:	85 c0                	test   eax,eax
c0013503:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0013507:	74 0b                	je     c0013514 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0013509:	50                   	push   eax
c001350a:	6a 01                	push   0x1
c001350c:	56                   	push   esi
c001350d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013511:	50                   	push   eax
c0013512:	eb 0a                	jmp    c001351e <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0013514:	50                   	push   eax
c0013515:	6a 00                	push   0x0
c0013517:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001351b:	50                   	push   eax
c001351c:	6a 00                	push   0x0
c001351e:	e8 44 fd ff ff       	call   c0013267 <CmGetMatch(char*, char*, bool, bool*)>
c0013523:	83 c4 10             	add    esp,0x10
c0013526:	83 f8 ff             	cmp    eax,0xffffffff
c0013529:	75 1a                	jne    c0013545 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c001352b:	83 ec 0c             	sub    esp,0xc
c001352e:	68 f9 25 02 c0       	push   0xc00225f9
c0013533:	e8 d3 e0 ff ff       	call   c001160b <KePanic(char const*)>
c0013538:	83 c4 10             	add    esp,0x10
c001353b:	b8 02 00 00 00       	mov    eax,0x2
c0013540:	e9 bb 00 00 00       	jmp    c0013600 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0013545:	83 ff 18             	cmp    edi,0x18
c0013548:	75 1a                	jne    c0013564 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c001354a:	83 ec 0c             	sub    esp,0xc
c001354d:	68 0e 26 02 c0       	push   0xc002260e
c0013552:	e8 b4 e0 ff ff       	call   c001160b <KePanic(char const*)>
c0013557:	83 c4 10             	add    esp,0x10
c001355a:	b8 01 00 00 00       	mov    eax,0x1
c001355f:	e9 9c 00 00 00       	jmp    c0013600 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0013564:	47                   	inc    edi
c0013565:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001356a:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c001356e:	0f 45 dd             	cmovne ebx,ebp
c0013571:	83 ec 0c             	sub    esp,0xc
c0013574:	56                   	push   esi
c0013575:	e8 06 d0 fe ff       	call   c0000580 <strlen>
c001357a:	83 c4 10             	add    esp,0x10
c001357d:	85 c0                	test   eax,eax
c001357f:	74 06                	je     c0013587 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0013581:	43                   	inc    ebx
c0013582:	e9 41 ff ff ff       	jmp    c00134c8 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c0013587:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001358f:	31 db                	xor    ebx,ebx
c0013591:	31 ff                	xor    edi,edi
c0013593:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001359b:	50                   	push   eax
c001359c:	6a 12                	push   0x12
c001359e:	68 ee 00 00 00       	push   0xee
c00135a3:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00135aa:	e8 41 cf fe ff       	call   c00004f0 <memset>
c00135af:	83 c4 10             	add    esp,0x10
c00135b2:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c00135b6:	83 fb 17             	cmp    ebx,0x17
c00135b9:	7e 26                	jle    c00135e1 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c00135bb:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00135bf:	50                   	push   eax
c00135c0:	6a 08                	push   0x8
c00135c2:	55                   	push   ebp
c00135c3:	56                   	push   esi
c00135c4:	e8 2f fd ff ff       	call   c00132f8 <CmGetShift(unsigned int*, int*, int, bool*)>
c00135c9:	83 c4 10             	add    esp,0x10
c00135cc:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00135d1:	74 26                	je     c00135f9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c00135d3:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c00135da:	4b                   	dec    ebx
c00135db:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c00135de:	47                   	inc    edi
c00135df:	eb 1c                	jmp    c00135fd <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c00135e1:	6a 06                	push   0x6
c00135e3:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c00135e8:	50                   	push   eax
c00135e9:	55                   	push   ebp
c00135ea:	56                   	push   esi
c00135eb:	e8 d8 fc ff ff       	call   c00132c8 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00135f0:	83 c4 10             	add    esp,0x10
c00135f3:	84 c0                	test   al,al
c00135f5:	75 06                	jne    c00135fd <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c00135f7:	eb c2                	jmp    c00135bb <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c00135f9:	31 c0                	xor    eax,eax
c00135fb:	eb 03                	jmp    c0013600 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c00135fd:	43                   	inc    ebx
c00135fe:	eb b2                	jmp    c00135b2 <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c0013600:	83 c4 6c             	add    esp,0x6c
c0013603:	5b                   	pop    ebx
c0013604:	5e                   	pop    esi
c0013605:	5f                   	pop    edi
c0013606:	5d                   	pop    ebp
c0013607:	c3                   	ret    

c0013608 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0013608:	53                   	push   ebx
c0013609:	83 ec 3c             	sub    esp,0x3c
c001360c:	6a 2b                	push   0x2b
c001360e:	6a 00                	push   0x0
c0013610:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0013614:	53                   	push   ebx
c0013615:	e8 d6 ce fe ff       	call   c00004f0 <memset>
c001361a:	58                   	pop    eax
c001361b:	5a                   	pop    edx
c001361c:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013620:	50                   	push   eax
c0013621:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013625:	e8 41 fe ff ff       	call   c001346b <CmConvertToInternalFilename(char const*, unsigned char*)>
c001362a:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c001362f:	83 c4 0c             	add    esp,0xc
c0013632:	6a 15                	push   0x15
c0013634:	6a 00                	push   0x0
c0013636:	8d 44 24 27          	lea    eax,[esp+0x27]
c001363a:	50                   	push   eax
c001363b:	e8 b0 ce fe ff       	call   c00004f0 <memset>
c0013640:	53                   	push   ebx
c0013641:	6a 00                	push   0x0
c0013643:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013647:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001364b:	e8 eb f9 ff ff       	call   c001303b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013650:	83 c4 58             	add    esp,0x58
c0013653:	5b                   	pop    ebx
c0013654:	c3                   	ret    

c0013655 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0013655:	56                   	push   esi
c0013656:	53                   	push   ebx
c0013657:	83 ec 48             	sub    esp,0x48
c001365a:	6a 12                	push   0x12
c001365c:	68 ff 00 00 00       	push   0xff
c0013661:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0013665:	56                   	push   esi
c0013666:	e8 85 ce fe ff       	call   c00004f0 <memset>
c001366b:	5a                   	pop    edx
c001366c:	59                   	pop    ecx
c001366d:	56                   	push   esi
c001366e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0013672:	e8 f4 fd ff ff       	call   c001346b <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013677:	83 c4 10             	add    esp,0x10
c001367a:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001367e:	85 db                	test   ebx,ebx
c0013680:	74 42                	je     c00136c4 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c0013682:	50                   	push   eax
c0013683:	8d 44 24 19          	lea    eax,[esp+0x19]
c0013687:	50                   	push   eax
c0013688:	53                   	push   ebx
c0013689:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001368d:	e8 ff f6 ff ff       	call   c0012d91 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013692:	83 c4 0c             	add    esp,0xc
c0013695:	6a 12                	push   0x12
c0013697:	8d 44 24 21          	lea    eax,[esp+0x21]
c001369b:	50                   	push   eax
c001369c:	56                   	push   esi
c001369d:	e8 de cc fe ff       	call   c0000380 <memcmp>
c00136a2:	83 c4 10             	add    esp,0x10
c00136a5:	85 c0                	test   eax,eax
c00136a7:	74 1e                	je     c00136c7 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c00136a9:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c00136ae:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c00136b3:	c1 e3 08             	shl    ebx,0x8
c00136b6:	09 d8                	or     eax,ebx
c00136b8:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c00136bd:	c1 e3 10             	shl    ebx,0x10
c00136c0:	09 c3                	or     ebx,eax
c00136c2:	eb ba                	jmp    c001367e <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c00136c4:	83 cb ff             	or     ebx,0xffffffff
c00136c7:	83 c4 44             	add    esp,0x44
c00136ca:	89 d8                	mov    eax,ebx
c00136cc:	5b                   	pop    ebx
c00136cd:	5e                   	pop    esi
c00136ce:	c3                   	ret    

c00136cf <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c00136cf:	57                   	push   edi
c00136d0:	56                   	push   esi
c00136d1:	53                   	push   ebx
c00136d2:	83 ec 34             	sub    esp,0x34
c00136d5:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00136d9:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00136dd:	6a 2b                	push   0x2b
c00136df:	6a 00                	push   0x0
c00136e1:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00136e5:	53                   	push   ebx
c00136e6:	e8 05 ce fe ff       	call   c00004f0 <memset>
c00136eb:	58                   	pop    eax
c00136ec:	5a                   	pop    edx
c00136ed:	8d 44 24 11          	lea    eax,[esp+0x11]
c00136f1:	50                   	push   eax
c00136f2:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00136f6:	e8 70 fd ff ff       	call   c001346b <CmConvertToInternalFilename(char const*, unsigned char*)>
c00136fb:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c00136ff:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c0013703:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0013707:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c001370b:	53                   	push   ebx
c001370c:	6a 00                	push   0x0
c001370e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013712:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013716:	e8 20 f9 ff ff       	call   c001303b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001371b:	83 c4 50             	add    esp,0x50
c001371e:	5b                   	pop    ebx
c001371f:	5e                   	pop    esi
c0013720:	5f                   	pop    edi
c0013721:	c3                   	ret    

c0013722 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c0013722:	55                   	push   ebp
c0013723:	57                   	push   edi
c0013724:	56                   	push   esi
c0013725:	53                   	push   ebx
c0013726:	83 ec 40             	sub    esp,0x40
c0013729:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c001372d:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0013731:	6a 2b                	push   0x2b
c0013733:	6a 00                	push   0x0
c0013735:	8d 74 24 11          	lea    esi,[esp+0x11]
c0013739:	56                   	push   esi
c001373a:	e8 b1 cd fe ff       	call   c00004f0 <memset>
c001373f:	5f                   	pop    edi
c0013740:	89 ef                	mov    edi,ebp
c0013742:	58                   	pop    eax
c0013743:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013747:	50                   	push   eax
c0013748:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c001374c:	e8 1a fd ff ff       	call   c001346b <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013751:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c0013756:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c001375b:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0013760:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0013765:	83 c4 10             	add    esp,0x10
c0013768:	85 ed                	test   ebp,ebp
c001376a:	74 14                	je     c0013780 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c001376c:	51                   	push   ecx
c001376d:	51                   	push   ecx
c001376e:	57                   	push   edi
c001376f:	53                   	push   ebx
c0013770:	e8 0e f7 ff ff       	call   c0012e83 <CmGetNext(Reghive_Tag*, int)>
c0013775:	83 c4 10             	add    esp,0x10
c0013778:	85 c0                	test   eax,eax
c001377a:	74 04                	je     c0013780 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c001377c:	89 c7                	mov    edi,eax
c001377e:	eb e8                	jmp    c0013768 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0013780:	56                   	push   esi
c0013781:	6a 00                	push   0x0
c0013783:	57                   	push   edi
c0013784:	53                   	push   ebx
c0013785:	e8 b1 f8 ff ff       	call   c001303b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001378a:	83 c4 0c             	add    esp,0xc
c001378d:	56                   	push   esi
c001378e:	50                   	push   eax
c001378f:	89 c7                	mov    edi,eax
c0013791:	53                   	push   ebx
c0013792:	e8 fa f5 ff ff       	call   c0012d91 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013797:	58                   	pop    eax
c0013798:	5a                   	pop    edx
c0013799:	6a 6c                	push   0x6c
c001379b:	6a 00                	push   0x0
c001379d:	6a 00                	push   0x0
c001379f:	68 1f 26 02 c0       	push   0xc002261f
c00137a4:	57                   	push   edi
c00137a5:	53                   	push   ebx
c00137a6:	e8 24 ff ff ff       	call   c00136cf <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c00137ab:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00137af:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c00137b3:	c1 e8 10             	shr    eax,0x10
c00137b6:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00137ba:	83 c4 1c             	add    esp,0x1c
c00137bd:	56                   	push   esi
c00137be:	57                   	push   edi
c00137bf:	53                   	push   ebx
c00137c0:	e8 f0 f6 ff ff       	call   c0012eb5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00137c5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00137ca:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c00137cf:	c1 e0 08             	shl    eax,0x8
c00137d2:	09 c2                	or     edx,eax
c00137d4:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00137d9:	83 c4 4c             	add    esp,0x4c
c00137dc:	5b                   	pop    ebx
c00137dd:	5e                   	pop    esi
c00137de:	c1 e0 10             	shl    eax,0x10
c00137e1:	09 d0                	or     eax,edx
c00137e3:	5f                   	pop    edi
c00137e4:	5d                   	pop    ebp
c00137e5:	c3                   	ret    

c00137e6 <zStrtok(char*, char const*)>:
c00137e6:	55                   	push   ebp
c00137e7:	57                   	push   edi
c00137e8:	56                   	push   esi
c00137e9:	53                   	push   ebx
c00137ea:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00137ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00137f2:	85 db                	test   ebx,ebx
c00137f4:	74 2f                	je     c0013825 <zStrtok(char*, char const*)+0x3f>
c00137f6:	85 c0                	test   eax,eax
c00137f8:	75 09                	jne    c0013803 <zStrtok(char*, char const*)+0x1d>
c00137fa:	a1 f0 be 02 c0       	mov    eax,ds:0xc002bef0
c00137ff:	85 c0                	test   eax,eax
c0013801:	74 50                	je     c0013853 <zStrtok(char*, char const*)+0x6d>
c0013803:	31 c9                	xor    ecx,ecx
c0013805:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0013809:	74 03                	je     c001380e <zStrtok(char*, char const*)+0x28>
c001380b:	41                   	inc    ecx
c001380c:	eb f7                	jmp    c0013805 <zStrtok(char*, char const*)+0x1f>
c001380e:	31 d2                	xor    edx,edx
c0013810:	39 ca                	cmp    edx,ecx
c0013812:	74 15                	je     c0013829 <zStrtok(char*, char const*)+0x43>
c0013814:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0013818:	8d 3c 10             	lea    edi,[eax+edx*1]
c001381b:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c001381e:	39 ee                	cmp    esi,ebp
c0013820:	74 13                	je     c0013835 <zStrtok(char*, char const*)+0x4f>
c0013822:	42                   	inc    edx
c0013823:	eb eb                	jmp    c0013810 <zStrtok(char*, char const*)+0x2a>
c0013825:	31 c0                	xor    eax,eax
c0013827:	eb 2a                	jmp    c0013853 <zStrtok(char*, char const*)+0x6d>
c0013829:	c7 05 f0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bef0,0x0
c0013833:	eb 1e                	jmp    c0013853 <zStrtok(char*, char const*)+0x6d>
c0013835:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013838:	39 ce                	cmp    esi,ecx
c001383a:	75 0a                	jne    c0013846 <zStrtok(char*, char const*)+0x60>
c001383c:	40                   	inc    eax
c001383d:	a3 f0 be 02 c0       	mov    ds:0xc002bef0,eax
c0013842:	89 d8                	mov    eax,ebx
c0013844:	eb 0d                	jmp    c0013853 <zStrtok(char*, char const*)+0x6d>
c0013846:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0013849:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c001384d:	89 15 f0 be 02 c0    	mov    DWORD PTR ds:0xc002bef0,edx
c0013853:	5b                   	pop    ebx
c0013854:	5e                   	pop    esi
c0013855:	5f                   	pop    edi
c0013856:	5d                   	pop    ebp
c0013857:	c3                   	ret    

c0013858 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0013858:	57                   	push   edi
c0013859:	56                   	push   esi
c001385a:	53                   	push   ebx
c001385b:	81 ec 08 01 00 00    	sub    esp,0x108
c0013861:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0013868:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c001386f:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0013873:	53                   	push   ebx
c0013874:	e8 d7 cd fe ff       	call   c0000650 <strcpy>
c0013879:	59                   	pop    ecx
c001387a:	5e                   	pop    esi
c001387b:	68 83 29 02 c0       	push   0xc0022983
c0013880:	53                   	push   ebx
c0013881:	bb 01 00 00 00       	mov    ebx,0x1
c0013886:	e8 5b ff ff ff       	call   c00137e6 <zStrtok(char*, char const*)>
c001388b:	83 c4 10             	add    esp,0x10
c001388e:	85 c0                	test   eax,eax
c0013890:	74 3b                	je     c00138cd <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013892:	52                   	push   edx
c0013893:	50                   	push   eax
c0013894:	6a 01                	push   0x1
c0013896:	57                   	push   edi
c0013897:	e8 b9 fd ff ff       	call   c0013655 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c001389c:	59                   	pop    ecx
c001389d:	5e                   	pop    esi
c001389e:	89 c3                	mov    ebx,eax
c00138a0:	68 83 29 02 c0       	push   0xc0022983
c00138a5:	6a 00                	push   0x0
c00138a7:	e8 3a ff ff ff       	call   c00137e6 <zStrtok(char*, char const*)>
c00138ac:	83 c4 10             	add    esp,0x10
c00138af:	85 c0                	test   eax,eax
c00138b1:	89 c6                	mov    esi,eax
c00138b3:	74 18                	je     c00138cd <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00138b5:	52                   	push   edx
c00138b6:	52                   	push   edx
c00138b7:	53                   	push   ebx
c00138b8:	57                   	push   edi
c00138b9:	e8 86 f5 ff ff       	call   c0012e44 <CmEnterDirectory(Reghive_Tag*, int)>
c00138be:	83 c4 10             	add    esp,0x10
c00138c1:	83 f8 ff             	cmp    eax,0xffffffff
c00138c4:	89 c3                	mov    ebx,eax
c00138c6:	74 05                	je     c00138cd <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00138c8:	50                   	push   eax
c00138c9:	56                   	push   esi
c00138ca:	53                   	push   ebx
c00138cb:	eb c9                	jmp    c0013896 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c00138cd:	81 c4 00 01 00 00    	add    esp,0x100
c00138d3:	89 d8                	mov    eax,ebx
c00138d5:	5b                   	pop    ebx
c00138d6:	5e                   	pop    esi
c00138d7:	5f                   	pop    edi
c00138d8:	c3                   	ret    

c00138d9 <CmDisplayTree(Reghive_Tag*, int, int)>:
c00138d9:	55                   	push   ebp
c00138da:	57                   	push   edi
c00138db:	56                   	push   esi
c00138dc:	53                   	push   ebx
c00138dd:	83 ec 5c             	sub    esp,0x5c
c00138e0:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c00138e4:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00138e8:	85 db                	test   ebx,ebx
c00138ea:	0f 8e 84 00 00 00    	jle    c0013974 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c00138f0:	57                   	push   edi
c00138f1:	31 ed                	xor    ebp,ebp
c00138f3:	6a 32                	push   0x32
c00138f5:	6a 00                	push   0x0
c00138f7:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c00138fb:	57                   	push   edi
c00138fc:	e8 ef cb fe ff       	call   c00004f0 <memset>
c0013901:	83 c4 0c             	add    esp,0xc
c0013904:	57                   	push   edi
c0013905:	53                   	push   ebx
c0013906:	56                   	push   esi
c0013907:	e8 31 fb ff ff       	call   c001343d <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001390c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013910:	83 c4 10             	add    esp,0x10
c0013913:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0013917:	7d 13                	jge    c001392c <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0013919:	83 ec 0c             	sub    esp,0xc
c001391c:	45                   	inc    ebp
c001391d:	68 27 2d 02 c0       	push   0xc0022d27
c0013922:	e8 e3 6f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013927:	83 c4 10             	add    esp,0x10
c001392a:	eb e7                	jmp    c0013913 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c001392c:	51                   	push   ecx
c001392d:	57                   	push   edi
c001392e:	53                   	push   ebx
c001392f:	68 25 26 02 c0       	push   0xc0022625
c0013934:	e8 d1 6f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013939:	83 c4 10             	add    esp,0x10
c001393c:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0013941:	75 1e                	jne    c0013961 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0013943:	52                   	push   edx
c0013944:	52                   	push   edx
c0013945:	53                   	push   ebx
c0013946:	56                   	push   esi
c0013947:	e8 f8 f4 ff ff       	call   c0012e44 <CmEnterDirectory(Reghive_Tag*, int)>
c001394c:	83 c4 0c             	add    esp,0xc
c001394f:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0013953:	8d 51 04             	lea    edx,[ecx+0x4]
c0013956:	52                   	push   edx
c0013957:	50                   	push   eax
c0013958:	56                   	push   esi
c0013959:	e8 7b ff ff ff       	call   c00138d9 <CmDisplayTree(Reghive_Tag*, int, int)>
c001395e:	83 c4 10             	add    esp,0x10
c0013961:	50                   	push   eax
c0013962:	50                   	push   eax
c0013963:	53                   	push   ebx
c0013964:	56                   	push   esi
c0013965:	e8 19 f5 ff ff       	call   c0012e83 <CmGetNext(Reghive_Tag*, int)>
c001396a:	83 c4 10             	add    esp,0x10
c001396d:	89 c3                	mov    ebx,eax
c001396f:	e9 74 ff ff ff       	jmp    c00138e8 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0013974:	83 c4 5c             	add    esp,0x5c
c0013977:	5b                   	pop    ebx
c0013978:	5e                   	pop    esi
c0013979:	5f                   	pop    edi
c001397a:	5d                   	pop    ebp
c001397b:	c3                   	ret    

c001397c <CmSplitFinalSlashInPlace(char*)>:
c001397c:	53                   	push   ebx
c001397d:	83 ec 14             	sub    esp,0x14
c0013980:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013984:	53                   	push   ebx
c0013985:	e8 f6 cb fe ff       	call   c0000580 <strlen>
c001398a:	83 c4 10             	add    esp,0x10
c001398d:	48                   	dec    eax
c001398e:	85 c0                	test   eax,eax
c0013990:	74 15                	je     c00139a7 <CmSplitFinalSlashInPlace(char*)+0x2b>
c0013992:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013996:	8d 14 03             	lea    edx,[ebx+eax*1]
c0013999:	75 09                	jne    c00139a4 <CmSplitFinalSlashInPlace(char*)+0x28>
c001399b:	c6 02 00             	mov    BYTE PTR [edx],0x0
c001399e:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00139a2:	eb 05                	jmp    c00139a9 <CmSplitFinalSlashInPlace(char*)+0x2d>
c00139a4:	48                   	dec    eax
c00139a5:	eb e7                	jmp    c001398e <CmSplitFinalSlashInPlace(char*)+0x12>
c00139a7:	31 c0                	xor    eax,eax
c00139a9:	83 c4 08             	add    esp,0x8
c00139ac:	5b                   	pop    ebx
c00139ad:	c3                   	ret    

c00139ae <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00139ae:	55                   	push   ebp
c00139af:	57                   	push   edi
c00139b0:	56                   	push   esi
c00139b1:	53                   	push   ebx
c00139b2:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00139b8:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c00139bf:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00139c2:	8d 43 01             	lea    eax,[ebx+0x1]
c00139c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00139c9:	89 f0                	mov    eax,esi
c00139cb:	3c 40                	cmp    al,0x40
c00139cd:	75 1b                	jne    c00139ea <Reg::findLineFromLoadedData(char*, char*, char*)+0x3c>
c00139cf:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00139d2:	85 c0                	test   eax,eax
c00139d4:	74 08                	je     c00139de <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c00139d6:	83 f8 3a             	cmp    eax,0x3a
c00139d9:	74 03                	je     c00139de <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c00139db:	43                   	inc    ebx
c00139dc:	eb f1                	jmp    c00139cf <Reg::findLineFromLoadedData(char*, char*, char*)+0x21>
c00139de:	85 c0                	test   eax,eax
c00139e0:	0f 84 45 01 00 00    	je     c0013b2b <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00139e6:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00139e9:	43                   	inc    ebx
c00139ea:	50                   	push   eax
c00139eb:	6a 40                	push   0x40
c00139ed:	6a 00                	push   0x0
c00139ef:	8d 44 24 24          	lea    eax,[esp+0x24]
c00139f3:	50                   	push   eax
c00139f4:	e8 f7 ca fe ff       	call   c00004f0 <memset>
c00139f9:	89 f1                	mov    ecx,esi
c00139fb:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0013a02:	31 c0                	xor    eax,eax
c0013a04:	83 c4 10             	add    esp,0x10
c0013a07:	0f be f1             	movsx  esi,cl
c0013a0a:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0013a0d:	85 d2                	test   edx,edx
c0013a0f:	89 d1                	mov    ecx,edx
c0013a11:	0f 84 14 01 00 00    	je     c0013b2b <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013a17:	3d c7 00 00 00       	cmp    eax,0xc7
c0013a1c:	0f 8f 09 01 00 00    	jg     c0013b2b <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013a22:	83 fa 0a             	cmp    edx,0xa
c0013a25:	0f 85 f1 00 00 00    	jne    c0013b1c <Reg::findLineFromLoadedData(char*, char*, char*)+0x16e>
c0013a2b:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0013a30:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0013a35:	89 c8                	mov    eax,ecx
c0013a37:	a8 df                	test   al,0xdf
c0013a39:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013a3e:	83 f9 23             	cmp    ecx,0x23
c0013a41:	0f 94 c2             	sete   dl
c0013a44:	89 d5                	mov    ebp,edx
c0013a46:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013a4a:	09 ea                	or     edx,ebp
c0013a4c:	80 e2 01             	and    dl,0x1
c0013a4f:	75 47                	jne    c0013a98 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013a51:	83 e8 09             	sub    eax,0x9
c0013a54:	3c 01                	cmp    al,0x1
c0013a56:	76 40                	jbe    c0013a98 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013a58:	83 f9 5b             	cmp    ecx,0x5b
c0013a5b:	75 42                	jne    c0013a9f <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0013a5d:	83 fe 40             	cmp    esi,0x40
c0013a60:	75 36                	jne    c0013a98 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013a62:	83 ec 0c             	sub    esp,0xc
c0013a65:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0013a69:	55                   	push   ebp
c0013a6a:	e8 11 cb fe ff       	call   c0000580 <strlen>
c0013a6f:	83 c4 10             	add    esp,0x10
c0013a72:	83 f8 3f             	cmp    eax,0x3f
c0013a75:	0f 87 b0 00 00 00    	ja     c0013b2b <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013a7b:	50                   	push   eax
c0013a7c:	50                   	push   eax
c0013a7d:	55                   	push   ebp
c0013a7e:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c0013a82:	55                   	push   ebp
c0013a83:	e8 c8 cb fe ff       	call   c0000650 <strcpy>
c0013a88:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013a8b:	e8 f0 ca fe ff       	call   c0000580 <strlen>
c0013a90:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0013a95:	83 c4 10             	add    esp,0x10
c0013a98:	31 d2                	xor    edx,edx
c0013a9a:	e9 84 00 00 00       	jmp    c0013b23 <Reg::findLineFromLoadedData(char*, char*, char*)+0x175>
c0013a9f:	83 fe 40             	cmp    esi,0x40
c0013aa2:	74 06                	je     c0013aaa <Reg::findLineFromLoadedData(char*, char*, char*)+0xfc>
c0013aa4:	8d 54 24 58          	lea    edx,[esp+0x58]
c0013aa8:	eb 19                	jmp    c0013ac3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0013aaa:	51                   	push   ecx
c0013aab:	51                   	push   ecx
c0013aac:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013ab0:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013ab4:	50                   	push   eax
c0013ab5:	e8 c6 cc fe ff       	call   c0000780 <strcmp>
c0013aba:	83 c4 10             	add    esp,0x10
c0013abd:	85 c0                	test   eax,eax
c0013abf:	75 d7                	jne    c0013a98 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013ac1:	eb e1                	jmp    c0013aa4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf6>
c0013ac3:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c0013ac6:	85 c9                	test   ecx,ecx
c0013ac8:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013acd:	83 f9 3d             	cmp    ecx,0x3d
c0013ad0:	0f 94 c0             	sete   al
c0013ad3:	89 c5                	mov    ebp,eax
c0013ad5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013ad9:	09 e8                	or     eax,ebp
c0013adb:	a8 01                	test   al,0x1
c0013add:	89 c5                	mov    ebp,eax
c0013adf:	75 03                	jne    c0013ae4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x136>
c0013ae1:	42                   	inc    edx
c0013ae2:	eb df                	jmp    c0013ac3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0013ae4:	85 c9                	test   ecx,ecx
c0013ae6:	74 43                	je     c0013b2b <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013ae8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013aec:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0013aef:	52                   	push   edx
c0013af0:	52                   	push   edx
c0013af1:	8d 44 24 60          	lea    eax,[esp+0x60]
c0013af5:	50                   	push   eax
c0013af6:	53                   	push   ebx
c0013af7:	e8 84 cc fe ff       	call   c0000780 <strcmp>
c0013afc:	83 c4 10             	add    esp,0x10
c0013aff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013b03:	85 c0                	test   eax,eax
c0013b05:	75 91                	jne    c0013a98 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013b07:	50                   	push   eax
c0013b08:	42                   	inc    edx
c0013b09:	50                   	push   eax
c0013b0a:	52                   	push   edx
c0013b0b:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0013b12:	e8 39 cb fe ff       	call   c0000650 <strcpy>
c0013b17:	83 c4 10             	add    esp,0x10
c0013b1a:	eb 11                	jmp    c0013b2d <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c0013b1c:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0013b20:	8d 50 01             	lea    edx,[eax+0x1]
c0013b23:	47                   	inc    edi
c0013b24:	89 d0                	mov    eax,edx
c0013b26:	e9 df fe ff ff       	jmp    c0013a0a <Reg::findLineFromLoadedData(char*, char*, char*)+0x5c>
c0013b2b:	31 ed                	xor    ebp,ebp
c0013b2d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013b33:	89 e8                	mov    eax,ebp
c0013b35:	5b                   	pop    ebx
c0013b36:	5e                   	pop    esi
c0013b37:	5f                   	pop    edi
c0013b38:	5d                   	pop    ebp
c0013b39:	c3                   	ret    

c0013b3a <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0013b3a:	57                   	push   edi
c0013b3b:	56                   	push   esi
c0013b3c:	53                   	push   ebx
c0013b3d:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013b43:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0013b4a:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0013b51:	53                   	push   ebx
c0013b52:	e8 29 ca fe ff       	call   c0000580 <strlen>
c0013b57:	89 34 24             	mov    DWORD PTR [esp],esi
c0013b5a:	89 c7                	mov    edi,eax
c0013b5c:	e8 1f ca fe ff       	call   c0000580 <strlen>
c0013b61:	83 c4 10             	add    esp,0x10
c0013b64:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0013b68:	3d ff 00 00 00       	cmp    eax,0xff
c0013b6d:	0f 87 d3 00 00 00    	ja     c0013c46 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013b73:	57                   	push   edi
c0013b74:	57                   	push   edi
c0013b75:	56                   	push   esi
c0013b76:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013b7a:	56                   	push   esi
c0013b7b:	e8 d0 ca fe ff       	call   c0000650 <strcpy>
c0013b80:	58                   	pop    eax
c0013b81:	5a                   	pop    edx
c0013b82:	68 83 29 02 c0       	push   0xc0022983
c0013b87:	56                   	push   esi
c0013b88:	e8 e3 cc fe ff       	call   c0000870 <strcat>
c0013b8d:	59                   	pop    ecx
c0013b8e:	5f                   	pop    edi
c0013b8f:	53                   	push   ebx
c0013b90:	56                   	push   esi
c0013b91:	e8 da cc fe ff       	call   c0000870 <strcat>
c0013b96:	58                   	pop    eax
c0013b97:	5a                   	pop    edx
c0013b98:	68 2f 26 02 c0       	push   0xc002262f
c0013b9d:	56                   	push   esi
c0013b9e:	e8 cd cc fe ff       	call   c0000870 <strcat>
c0013ba3:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013baa:	e8 24 3f ff ff       	call   c0007ad3 <malloc>
c0013baf:	83 c4 0c             	add    esp,0xc
c0013bb2:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0013bb8:	56                   	push   esi
c0013bb9:	50                   	push   eax
c0013bba:	89 c3                	mov    ebx,eax
c0013bbc:	e8 03 80 ff ff       	call   c000bbc4 <File::File(char const*, Process*)>
c0013bc1:	83 c4 10             	add    esp,0x10
c0013bc4:	85 db                	test   ebx,ebx
c0013bc6:	74 7e                	je     c0013c46 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013bc8:	51                   	push   ecx
c0013bc9:	51                   	push   ecx
c0013bca:	6a 01                	push   0x1
c0013bcc:	53                   	push   ebx
c0013bcd:	e8 10 80 ff ff       	call   c000bbe2 <File::open(FileOpenMode)>
c0013bd2:	83 c4 10             	add    esp,0x10
c0013bd5:	85 c0                	test   eax,eax
c0013bd7:	74 08                	je     c0013be1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0013bd9:	83 ec 0c             	sub    esp,0xc
c0013bdc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bde:	53                   	push   ebx
c0013bdf:	eb 5f                	jmp    c0013c40 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0013be1:	52                   	push   edx
c0013be2:	8d 44 24 17          	lea    eax,[esp+0x17]
c0013be6:	50                   	push   eax
c0013be7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013beb:	50                   	push   eax
c0013bec:	53                   	push   ebx
c0013bed:	e8 f2 82 ff ff       	call   c000bee4 <File::stat(unsigned long long*, bool*)>
c0013bf2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013bf6:	83 c4 10             	add    esp,0x10
c0013bf9:	89 c1                	mov    ecx,eax
c0013bfb:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0013bff:	74 31                	je     c0013c32 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013c01:	83 ec 0c             	sub    esp,0xc
c0013c04:	50                   	push   eax
c0013c05:	e8 c9 3e ff ff       	call   c0007ad3 <malloc>
c0013c0a:	89 c6                	mov    esi,eax
c0013c0c:	58                   	pop    eax
c0013c0d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c0f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013c13:	52                   	push   edx
c0013c14:	56                   	push   esi
c0013c15:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013c19:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013c1d:	53                   	push   ebx
c0013c1e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c21:	83 c4 20             	add    esp,0x20
c0013c24:	85 c0                	test   eax,eax
c0013c26:	75 0a                	jne    c0013c32 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013c28:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c2c:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013c30:	74 18                	je     c0013c4a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0013c32:	83 ec 0c             	sub    esp,0xc
c0013c35:	53                   	push   ebx
c0013c36:	e8 05 80 ff ff       	call   c000bc40 <File::close()>
c0013c3b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c3d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c40:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013c43:	83 c4 10             	add    esp,0x10
c0013c46:	31 c0                	xor    eax,eax
c0013c48:	eb 3b                	jmp    c0013c85 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0013c4a:	83 ec 0c             	sub    esp,0xc
c0013c4d:	53                   	push   ebx
c0013c4e:	e8 ed 7f ff ff       	call   c000bc40 <File::close()>
c0013c53:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c55:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c58:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013c5b:	83 c4 0c             	add    esp,0xc
c0013c5e:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013c65:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013c6c:	56                   	push   esi
c0013c6d:	e8 3c fd ff ff       	call   c00139ae <Reg::findLineFromLoadedData(char*, char*, char*)>
c0013c72:	89 34 24             	mov    DWORD PTR [esp],esi
c0013c75:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013c79:	e8 65 3e ff ff       	call   c0007ae3 <free>
c0013c7e:	83 c4 10             	add    esp,0x10
c0013c81:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013c85:	81 c4 20 01 00 00    	add    esp,0x120
c0013c8b:	5b                   	pop    ebx
c0013c8c:	5e                   	pop    esi
c0013c8d:	5f                   	pop    edi
c0013c8e:	c3                   	ret    

c0013c8f <Reg::getLine(char*, char*, char*)>:
c0013c8f:	57                   	push   edi
c0013c90:	56                   	push   esi
c0013c91:	53                   	push   ebx
c0013c92:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013c96:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013c9a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c9e:	57                   	push   edi
c0013c9f:	56                   	push   esi
c0013ca0:	53                   	push   ebx
c0013ca1:	68 34 26 02 c0       	push   0xc0022634
c0013ca6:	e8 8f fe ff ff       	call   c0013b3a <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013cab:	83 c4 10             	add    esp,0x10
c0013cae:	84 c0                	test   al,al
c0013cb0:	75 10                	jne    c0013cc2 <Reg::getLine(char*, char*, char*)+0x33>
c0013cb2:	57                   	push   edi
c0013cb3:	56                   	push   esi
c0013cb4:	53                   	push   ebx
c0013cb5:	68 59 26 02 c0       	push   0xc0022659
c0013cba:	e8 7b fe ff ff       	call   c0013b3a <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013cbf:	83 c4 10             	add    esp,0x10
c0013cc2:	5b                   	pop    ebx
c0013cc3:	5e                   	pop    esi
c0013cc4:	5f                   	pop    edi
c0013cc5:	c3                   	ret    

c0013cc6 <Reg::readInt(char*, char*, int*)>:
c0013cc6:	55                   	push   ebp
c0013cc7:	57                   	push   edi
c0013cc8:	56                   	push   esi
c0013cc9:	53                   	push   ebx
c0013cca:	81 ec f0 00 00 00    	sub    esp,0xf0
c0013cd0:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013cd4:	55                   	push   ebp
c0013cd5:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013cdc:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013ce3:	e8 a7 ff ff ff       	call   c0013c8f <Reg::getLine(char*, char*, char*)>
c0013ce8:	83 c4 10             	add    esp,0x10
c0013ceb:	84 c0                	test   al,al
c0013ced:	0f 84 b6 00 00 00    	je     c0013da9 <Reg::readInt(char*, char*, int*)+0xe3>
c0013cf3:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0013cf8:	83 fa 2b             	cmp    edx,0x2b
c0013cfb:	74 0c                	je     c0013d09 <Reg::readInt(char*, char*, int*)+0x43>
c0013cfd:	83 fa 2d             	cmp    edx,0x2d
c0013d00:	75 0e                	jne    c0013d10 <Reg::readInt(char*, char*, int*)+0x4a>
c0013d02:	ba 01 00 00 00       	mov    edx,0x1
c0013d07:	eb 0b                	jmp    c0013d14 <Reg::readInt(char*, char*, int*)+0x4e>
c0013d09:	ba 01 00 00 00       	mov    edx,0x1
c0013d0e:	eb 02                	jmp    c0013d12 <Reg::readInt(char*, char*, int*)+0x4c>
c0013d10:	31 d2                	xor    edx,edx
c0013d12:	31 c0                	xor    eax,eax
c0013d14:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0013d19:	be 0a 00 00 00       	mov    esi,0xa
c0013d1e:	75 21                	jne    c0013d41 <Reg::readInt(char*, char*, int*)+0x7b>
c0013d20:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0013d25:	83 f9 78             	cmp    ecx,0x78
c0013d28:	75 0a                	jne    c0013d34 <Reg::readInt(char*, char*, int*)+0x6e>
c0013d2a:	83 c2 02             	add    edx,0x2
c0013d2d:	be 10 00 00 00       	mov    esi,0x10
c0013d32:	eb 0d                	jmp    c0013d41 <Reg::readInt(char*, char*, int*)+0x7b>
c0013d34:	83 f9 62             	cmp    ecx,0x62
c0013d37:	75 08                	jne    c0013d41 <Reg::readInt(char*, char*, int*)+0x7b>
c0013d39:	83 c2 02             	add    edx,0x2
c0013d3c:	be 02 00 00 00       	mov    esi,0x2
c0013d41:	01 d5                	add    ebp,edx
c0013d43:	31 d2                	xor    edx,edx
c0013d45:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0013d49:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013d4d:	85 c9                	test   ecx,ecx
c0013d4f:	0f 94 c3             	sete   bl
c0013d52:	83 f9 0d             	cmp    ecx,0xd
c0013d55:	89 df                	mov    edi,ebx
c0013d57:	0f 94 c3             	sete   bl
c0013d5a:	09 df                	or     edi,ebx
c0013d5c:	89 fb                	mov    ebx,edi
c0013d5e:	83 e7 01             	and    edi,0x1
c0013d61:	75 35                	jne    c0013d98 <Reg::readInt(char*, char*, int*)+0xd2>
c0013d63:	0f af d6             	imul   edx,esi
c0013d66:	83 fe 10             	cmp    esi,0x10
c0013d69:	75 26                	jne    c0013d91 <Reg::readInt(char*, char*, int*)+0xcb>
c0013d6b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013d6f:	83 ef 41             	sub    edi,0x41
c0013d72:	89 fb                	mov    ebx,edi
c0013d74:	80 fb 05             	cmp    bl,0x5
c0013d77:	77 06                	ja     c0013d7f <Reg::readInt(char*, char*, int*)+0xb9>
c0013d79:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0013d7d:	eb 16                	jmp    c0013d95 <Reg::readInt(char*, char*, int*)+0xcf>
c0013d7f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013d83:	83 eb 61             	sub    ebx,0x61
c0013d86:	80 fb 05             	cmp    bl,0x5
c0013d89:	77 06                	ja     c0013d91 <Reg::readInt(char*, char*, int*)+0xcb>
c0013d8b:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0013d8f:	eb 04                	jmp    c0013d95 <Reg::readInt(char*, char*, int*)+0xcf>
c0013d91:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0013d95:	45                   	inc    ebp
c0013d96:	eb ad                	jmp    c0013d45 <Reg::readInt(char*, char*, int*)+0x7f>
c0013d98:	84 c0                	test   al,al
c0013d9a:	74 02                	je     c0013d9e <Reg::readInt(char*, char*, int*)+0xd8>
c0013d9c:	f7 da                	neg    edx
c0013d9e:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0013da5:	89 10                	mov    DWORD PTR [eax],edx
c0013da7:	88 d8                	mov    al,bl
c0013da9:	81 c4 ec 00 00 00    	add    esp,0xec
c0013daf:	5b                   	pop    ebx
c0013db0:	5e                   	pop    esi
c0013db1:	5f                   	pop    edi
c0013db2:	5d                   	pop    ebp
c0013db3:	c3                   	ret    

c0013db4 <Reg::readString(char*, char*, char*, int)>:
c0013db4:	57                   	push   edi
c0013db5:	56                   	push   esi
c0013db6:	53                   	push   ebx
c0013db7:	81 ec d4 00 00 00    	sub    esp,0xd4
c0013dbd:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013dc1:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013dc8:	57                   	push   edi
c0013dc9:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013dd0:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013dd7:	e8 b3 fe ff ff       	call   c0013c8f <Reg::getLine(char*, char*, char*)>
c0013ddc:	83 c4 10             	add    esp,0x10
c0013ddf:	84 c0                	test   al,al
c0013de1:	89 c6                	mov    esi,eax
c0013de3:	74 44                	je     c0013e29 <Reg::readString(char*, char*, char*, int)+0x75>
c0013de5:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013dec:	31 c0                	xor    eax,eax
c0013dee:	4a                   	dec    edx
c0013def:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0013df2:	84 c9                	test   cl,cl
c0013df4:	74 0f                	je     c0013e05 <Reg::readString(char*, char*, char*, int)+0x51>
c0013df6:	39 c2                	cmp    edx,eax
c0013df8:	7e 0b                	jle    c0013e05 <Reg::readString(char*, char*, char*, int)+0x51>
c0013dfa:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0013dfd:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0013e02:	40                   	inc    eax
c0013e03:	eb ea                	jmp    c0013def <Reg::readString(char*, char*, char*, int)+0x3b>
c0013e05:	83 ec 0c             	sub    esp,0xc
c0013e08:	53                   	push   ebx
c0013e09:	e8 72 c7 fe ff       	call   c0000580 <strlen>
c0013e0e:	83 c4 10             	add    esp,0x10
c0013e11:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0013e16:	75 11                	jne    c0013e29 <Reg::readString(char*, char*, char*, int)+0x75>
c0013e18:	83 ec 0c             	sub    esp,0xc
c0013e1b:	53                   	push   ebx
c0013e1c:	e8 5f c7 fe ff       	call   c0000580 <strlen>
c0013e21:	83 c4 10             	add    esp,0x10
c0013e24:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013e29:	81 c4 d0 00 00 00    	add    esp,0xd0
c0013e2f:	89 f0                	mov    eax,esi
c0013e31:	5b                   	pop    ebx
c0013e32:	5e                   	pop    esi
c0013e33:	5f                   	pop    edi
c0013e34:	c3                   	ret    

c0013e35 <Reg::readBool(char*, char*, bool*)>:
c0013e35:	83 ec 20             	sub    esp,0x20
c0013e38:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013e3c:	50                   	push   eax
c0013e3d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e41:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e45:	e8 7c fe ff ff       	call   c0013cc6 <Reg::readInt(char*, char*, int*)>
c0013e4a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013e4e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013e53:	0f 95 02             	setne  BYTE PTR [edx]
c0013e56:	83 c4 2c             	add    esp,0x2c
c0013e59:	c3                   	ret    

c0013e5a <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013e5a:	53                   	push   ebx
c0013e5b:	83 ec 1c             	sub    esp,0x1c
c0013e5e:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013e62:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013e66:	50                   	push   eax
c0013e67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e6f:	e8 c1 ff ff ff       	call   c0013e35 <Reg::readBool(char*, char*, bool*)>
c0013e74:	83 c4 10             	add    esp,0x10
c0013e77:	84 c0                	test   al,al
c0013e79:	74 04                	je     c0013e7f <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013e7b:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013e7f:	83 c4 18             	add    esp,0x18
c0013e82:	88 d8                	mov    al,bl
c0013e84:	5b                   	pop    ebx
c0013e85:	c3                   	ret    

c0013e86 <Reg::readIntWithDefault(char*, char*, int)>:
c0013e86:	53                   	push   ebx
c0013e87:	83 ec 1c             	sub    esp,0x1c
c0013e8a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013e8e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013e92:	50                   	push   eax
c0013e93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e9b:	e8 26 fe ff ff       	call   c0013cc6 <Reg::readInt(char*, char*, int*)>
c0013ea0:	83 c4 10             	add    esp,0x10
c0013ea3:	84 c0                	test   al,al
c0013ea5:	74 04                	je     c0013eab <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013ea7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013eab:	83 c4 18             	add    esp,0x18
c0013eae:	89 d8                	mov    eax,ebx
c0013eb0:	5b                   	pop    ebx
c0013eb1:	c3                   	ret    

c0013eb2 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0013eb2:	57                   	push   edi
c0013eb3:	56                   	push   esi
c0013eb4:	53                   	push   ebx
c0013eb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013eb9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013ebd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013ec1:	56                   	push   esi
c0013ec2:	57                   	push   edi
c0013ec3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ec7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ecb:	e8 e4 fe ff ff       	call   c0013db4 <Reg::readString(char*, char*, char*, int)>
c0013ed0:	83 c4 10             	add    esp,0x10
c0013ed3:	84 c0                	test   al,al
c0013ed5:	75 16                	jne    c0013eed <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013ed7:	50                   	push   eax
c0013ed8:	56                   	push   esi
c0013ed9:	6a 00                	push   0x0
c0013edb:	57                   	push   edi
c0013edc:	e8 0f c6 fe ff       	call   c00004f0 <memset>
c0013ee1:	8d 4e ff             	lea    ecx,[esi-0x1]
c0013ee4:	89 de                	mov    esi,ebx
c0013ee6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013ee8:	83 c4 10             	add    esp,0x10
c0013eeb:	89 df                	mov    edi,ebx
c0013eed:	5b                   	pop    ebx
c0013eee:	89 f8                	mov    eax,edi
c0013ef0:	5e                   	pop    esi
c0013ef1:	5f                   	pop    edi
c0013ef2:	c3                   	ret    

c0013ef3 <SysEject(regs*)>:
c0013ef3:	83 ec 0c             	sub    esp,0xc
c0013ef6:	83 ca ff             	or     edx,0xffffffff
c0013ef9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013efd:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013f00:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013f05:	83 e9 41             	sub    ecx,0x41
c0013f08:	83 f9 19             	cmp    ecx,0x19
c0013f0b:	77 18                	ja     c0013f25 <SysEject(regs*)+0x32>
c0013f0d:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0013f14:	85 c9                	test   ecx,ecx
c0013f16:	74 0d                	je     c0013f25 <SysEject(regs*)+0x32>
c0013f18:	83 ec 0c             	sub    esp,0xc
c0013f1b:	51                   	push   ecx
c0013f1c:	e8 a3 9e ff ff       	call   c000ddc4 <LogicalDisk::eject()>
c0013f21:	83 c4 10             	add    esp,0x10
c0013f24:	99                   	cdq    
c0013f25:	83 c4 0c             	add    esp,0xc
c0013f28:	c3                   	ret    

c0013f29 <SysExit(regs*)>:
c0013f29:	83 ec 18             	sub    esp,0x18
c0013f2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f30:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013f33:	e8 3c 2b 00 00       	call   c0016a74 <terminateTask(int)>
c0013f38:	83 c8 ff             	or     eax,0xffffffff
c0013f3b:	83 c4 1c             	add    esp,0x1c
c0013f3e:	89 c2                	mov    edx,eax
c0013f40:	c3                   	ret    

c0013f41 <SysGetCwd(regs*)>:
c0013f41:	83 ec 10             	sub    esp,0x10
c0013f44:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f48:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013f4b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013f4e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f53:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013f56:	e8 09 79 ff ff       	call   c000b864 <Fs::getcwd(Process*, char*, int)>
c0013f5b:	83 c4 1c             	add    esp,0x1c
c0013f5e:	99                   	cdq    
c0013f5f:	c3                   	ret    

c0013f60 <SysGetPID(regs*)>:
c0013f60:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f65:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013f68:	8b 00                	mov    eax,DWORD PTR [eax]
c0013f6a:	99                   	cdq    
c0013f6b:	c3                   	ret    

c0013f6c <SysGetRAMData(regs*)>:
c0013f6c:	69 05 e4 6e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0026ee4,0xc8
c0013f76:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0013f7c:	99                   	cdq    
c0013f7d:	f7 f9                	idiv   ecx
c0013f7f:	c1 e0 18             	shl    eax,0x18
c0013f82:	09 c8                	or     eax,ecx
c0013f84:	99                   	cdq    
c0013f85:	c3                   	ret    

c0013f86 <SysGetVGAPtr(regs*)>:
c0013f86:	55                   	push   ebp
c0013f87:	57                   	push   edi
c0013f88:	56                   	push   esi
c0013f89:	53                   	push   ebx
c0013f8a:	83 ec 18             	sub    esp,0x18
c0013f8d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013f91:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013f94:	e8 a7 25 00 00       	call   c0016540 <Thr::processFromPID(int)>
c0013f99:	83 c4 10             	add    esp,0x10
c0013f9c:	89 c1                	mov    ecx,eax
c0013f9e:	b8 01 00 00 00       	mov    eax,0x1
c0013fa3:	85 c9                	test   ecx,ecx
c0013fa5:	74 57                	je     c0013ffe <SysGetVGAPtr(regs*)+0x78>
c0013fa7:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013fab:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013fb1:	74 0c                	je     c0013fbf <SysGetVGAPtr(regs*)+0x39>
c0013fb3:	83 ec 0c             	sub    esp,0xc
c0013fb6:	55                   	push   ebp
c0013fb7:	e8 b3 47 ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0013fbc:	83 c4 10             	add    esp,0x10
c0013fbf:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013fc2:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013fc7:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013fca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013fcc:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013fcf:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013fd2:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013fd8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013fdb:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013fde:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013fe4:	50                   	push   eax
c0013fe5:	50                   	push   eax
c0013fe6:	68 74 26 02 c0       	push   0xc0022674
c0013feb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013fee:	05 a8 0f 00 00       	add    eax,0xfa8
c0013ff3:	50                   	push   eax
c0013ff4:	e8 57 c6 fe ff       	call   c0000650 <strcpy>
c0013ff9:	83 c4 10             	add    esp,0x10
c0013ffc:	31 c0                	xor    eax,eax
c0013ffe:	83 c4 0c             	add    esp,0xc
c0014001:	31 d2                	xor    edx,edx
c0014003:	5b                   	pop    ebx
c0014004:	5e                   	pop    esi
c0014005:	5f                   	pop    edi
c0014006:	5d                   	pop    ebp
c0014007:	c3                   	ret    

c0014008 <SysKill(regs*)>:
c0014008:	53                   	push   ebx
c0014009:	83 ec 08             	sub    esp,0x8
c001400c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014010:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0014014:	75 16                	jne    c001402c <SysKill(regs*)+0x24>
c0014016:	83 ec 0c             	sub    esp,0xc
c0014019:	68 7e 26 02 c0       	push   0xc002267e
c001401e:	e8 e8 d5 ff ff       	call   c001160b <KePanic(char const*)>
c0014023:	83 c4 10             	add    esp,0x10
c0014026:	e9 89 00 00 00       	jmp    c00140b4 <SysKill(regs*)+0xac>
c001402b:	90                   	nop
c001402c:	83 ec 0c             	sub    esp,0xc
c001402f:	68 e4 c6 02 c0       	push   0xc002c6e4
c0014034:	e8 63 bd 00 00       	call   c001fd9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014039:	8d 76 00             	lea    esi,[esi+0x0]
c001403c:	83 c4 10             	add    esp,0x10
c001403f:	85 c0                	test   eax,eax
c0014041:	74 19                	je     c001405c <SysKill(regs*)+0x54>
c0014043:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0014046:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014049:	39 0a                	cmp    DWORD PTR [edx],ecx
c001404b:	74 33                	je     c0014080 <SysKill(regs*)+0x78>
c001404d:	52                   	push   edx
c001404e:	52                   	push   edx
c001404f:	50                   	push   eax
c0014050:	68 e4 c6 02 c0       	push   0xc002c6e4
c0014055:	e8 62 c0 00 00       	call   c00200bc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001405a:	eb e0                	jmp    c001403c <SysKill(regs*)+0x34>
c001405c:	83 ec 0c             	sub    esp,0xc
c001405f:	68 d8 c6 02 c0       	push   0xc002c6d8
c0014064:	e8 33 bd 00 00       	call   c001fd9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014069:	8d 76 00             	lea    esi,[esi+0x0]
c001406c:	83 c4 10             	add    esp,0x10
c001406f:	85 c0                	test   eax,eax
c0014071:	74 41                	je     c00140b4 <SysKill(regs*)+0xac>
c0014073:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0014076:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014079:	39 0a                	cmp    DWORD PTR [edx],ecx
c001407b:	75 27                	jne    c00140a4 <SysKill(regs*)+0x9c>
c001407d:	8d 76 00             	lea    esi,[esi+0x0]
c0014080:	51                   	push   ecx
c0014081:	51                   	push   ecx
c0014082:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014085:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001408a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001408d:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0014093:	e8 0f da ff ff       	call   c0011aa7 <KeRaiseSignal(SigHandlerBlock*, int)>
c0014098:	83 c4 10             	add    esp,0x10
c001409b:	31 c0                	xor    eax,eax
c001409d:	31 d2                	xor    edx,edx
c001409f:	eb 1b                	jmp    c00140bc <SysKill(regs*)+0xb4>
c00140a1:	8d 76 00             	lea    esi,[esi+0x0]
c00140a4:	52                   	push   edx
c00140a5:	52                   	push   edx
c00140a6:	50                   	push   eax
c00140a7:	68 d8 c6 02 c0       	push   0xc002c6d8
c00140ac:	e8 0b c0 00 00       	call   c00200bc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00140b1:	eb b9                	jmp    c001406c <SysKill(regs*)+0x64>
c00140b3:	90                   	nop
c00140b4:	83 c8 ff             	or     eax,0xffffffff
c00140b7:	89 c2                	mov    edx,eax
c00140b9:	8d 76 00             	lea    esi,[esi+0x0]
c00140bc:	83 c4 08             	add    esp,0x8
c00140bf:	5b                   	pop    ebx
c00140c0:	c3                   	ret    

c00140c1 <SysLoadDLL(regs*)>:
c00140c1:	56                   	push   esi
c00140c2:	31 d2                	xor    edx,edx
c00140c4:	53                   	push   ebx
c00140c5:	b8 01 00 00 00       	mov    eax,0x1
c00140ca:	51                   	push   ecx
c00140cb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00140cf:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00140d3:	0f 84 8c 00 00 00    	je     c0014165 <SysLoadDLL(regs*)+0xa4>
c00140d9:	83 ec 0c             	sub    esp,0xc
c00140dc:	68 14 01 00 00       	push   0x114
c00140e1:	e8 ed 39 ff ff       	call   c0007ad3 <malloc>
c00140e6:	83 c4 0c             	add    esp,0xc
c00140e9:	89 c3                	mov    ebx,eax
c00140eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140f0:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00140f3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00140f6:	53                   	push   ebx
c00140f7:	e8 c8 7a ff ff       	call   c000bbc4 <File::File(char const*, Process*)>
c00140fc:	83 c4 10             	add    esp,0x10
c00140ff:	31 d2                	xor    edx,edx
c0014101:	85 db                	test   ebx,ebx
c0014103:	b8 02 00 00 00       	mov    eax,0x2
c0014108:	74 5b                	je     c0014165 <SysLoadDLL(regs*)+0xa4>
c001410a:	83 ec 0c             	sub    esp,0xc
c001410d:	53                   	push   ebx
c001410e:	e8 93 7d ff ff       	call   c000bea6 <File::exists()>
c0014113:	83 c4 10             	add    esp,0x10
c0014116:	84 c0                	test   al,al
c0014118:	8b 03                	mov    eax,DWORD PTR [ebx]
c001411a:	75 11                	jne    c001412d <SysLoadDLL(regs*)+0x6c>
c001411c:	83 ec 0c             	sub    esp,0xc
c001411f:	53                   	push   ebx
c0014120:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014123:	83 c4 10             	add    esp,0x10
c0014126:	b8 03 00 00 00       	mov    eax,0x3
c001412b:	eb 36                	jmp    c0014163 <SysLoadDLL(regs*)+0xa2>
c001412d:	83 ec 0c             	sub    esp,0xc
c0014130:	53                   	push   ebx
c0014131:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014134:	58                   	pop    eax
c0014135:	5a                   	pop    edx
c0014136:	6a 00                	push   0x0
c0014138:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001413b:	e8 49 15 00 00       	call   c0015689 <Thr::loadDLL(char const*, bool)>
c0014140:	83 c4 10             	add    esp,0x10
c0014143:	31 d2                	xor    edx,edx
c0014145:	89 c1                	mov    ecx,eax
c0014147:	b8 04 00 00 00       	mov    eax,0x4
c001414c:	85 c9                	test   ecx,ecx
c001414e:	74 15                	je     c0014165 <SysLoadDLL(regs*)+0xa4>
c0014150:	53                   	push   ebx
c0014151:	53                   	push   ebx
c0014152:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0014158:	51                   	push   ecx
c0014159:	e8 6b 17 00 00       	call   c00158c9 <Thr::executeDLL(unsigned long, void*)>
c001415e:	83 c4 10             	add    esp,0x10
c0014161:	31 c0                	xor    eax,eax
c0014163:	31 d2                	xor    edx,edx
c0014165:	59                   	pop    ecx
c0014166:	5b                   	pop    ebx
c0014167:	5e                   	pop    esi
c0014168:	c3                   	ret    

c0014169 <SysRead(regs*)>:
c0014169:	57                   	push   edi
c001416a:	56                   	push   esi
c001416b:	53                   	push   ebx
c001416c:	83 ec 10             	sub    esp,0x10
c001416f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014173:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014176:	83 f8 02             	cmp    eax,0x2
c0014179:	77 10                	ja     c001418b <SysRead(regs*)+0x22>
c001417b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014180:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014183:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0014189:	eb 0e                	jmp    c0014199 <SysRead(regs*)+0x30>
c001418b:	83 ec 0c             	sub    esp,0xc
c001418e:	50                   	push   eax
c001418f:	e8 07 53 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0014194:	83 c4 10             	add    esp,0x10
c0014197:	89 c1                	mov    ecx,eax
c0014199:	83 c8 ff             	or     eax,0xffffffff
c001419c:	85 c9                	test   ecx,ecx
c001419e:	89 c2                	mov    edx,eax
c00141a0:	74 28                	je     c00141ca <SysRead(regs*)+0x61>
c00141a2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00141aa:	83 ec 0c             	sub    esp,0xc
c00141ad:	31 ff                	xor    edi,edi
c00141af:	8d 54 24 18          	lea    edx,[esp+0x18]
c00141b3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00141b5:	52                   	push   edx
c00141b6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00141b9:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00141bc:	57                   	push   edi
c00141bd:	56                   	push   esi
c00141be:	51                   	push   ecx
c00141bf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00141c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00141c6:	83 c4 20             	add    esp,0x20
c00141c9:	99                   	cdq    
c00141ca:	83 c4 10             	add    esp,0x10
c00141cd:	5b                   	pop    ebx
c00141ce:	5e                   	pop    esi
c00141cf:	5f                   	pop    edi
c00141d0:	c3                   	ret    

c00141d1 <SysRegisterSignal(regs*)>:
c00141d1:	83 ec 18             	sub    esp,0x18
c00141d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00141d8:	6a 00                	push   0x0
c00141da:	6a 00                	push   0x0
c00141dc:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00141df:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00141e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141e7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00141ea:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00141f0:	e8 7c d8 ff ff       	call   c0011a71 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c00141f5:	83 c4 2c             	add    esp,0x2c
c00141f8:	99                   	cdq    
c00141f9:	c3                   	ret    

c00141fa <SysRegistryGetTypeFromPath(regs*)>:
c00141fa:	57                   	push   edi
c00141fb:	56                   	push   esi
c00141fc:	53                   	push   ebx
c00141fd:	81 ec 38 01 00 00    	sub    esp,0x138
c0014203:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c001420a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001420d:	68 9f 26 02 c0       	push   0xc002269f
c0014212:	e8 f3 66 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014217:	5a                   	pop    edx
c0014218:	59                   	pop    ecx
c0014219:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001421c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001421f:	e8 34 f6 ff ff       	call   c0013858 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014224:	5f                   	pop    edi
c0014225:	5a                   	pop    edx
c0014226:	89 c6                	mov    esi,eax
c0014228:	50                   	push   eax
c0014229:	68 bf 26 02 c0       	push   0xc00226bf
c001422e:	e8 d7 66 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014233:	83 c4 10             	add    esp,0x10
c0014236:	85 f6                	test   esi,esi
c0014238:	74 28                	je     c0014262 <SysRegistryGetTypeFromPath(regs*)+0x68>
c001423a:	50                   	push   eax
c001423b:	8d 7c 24 08          	lea    edi,[esp+0x8]
c001423f:	57                   	push   edi
c0014240:	56                   	push   esi
c0014241:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014244:	e8 f4 f1 ff ff       	call   c001343d <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014249:	83 c4 0c             	add    esp,0xc
c001424c:	57                   	push   edi
c001424d:	50                   	push   eax
c001424e:	89 c3                	mov    ebx,eax
c0014250:	68 c7 26 02 c0       	push   0xc00226c7
c0014255:	e8 b0 66 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001425a:	89 d8                	mov    eax,ebx
c001425c:	83 c4 10             	add    esp,0x10
c001425f:	99                   	cdq    
c0014260:	eb 05                	jmp    c0014267 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0014262:	83 c8 ff             	or     eax,0xffffffff
c0014265:	89 c2                	mov    edx,eax
c0014267:	81 c4 30 01 00 00    	add    esp,0x130
c001426d:	5b                   	pop    ebx
c001426e:	5e                   	pop    esi
c001426f:	5f                   	pop    edi
c0014270:	c3                   	ret    

c0014271 <SysRegistryReadExtent(regs*)>:
c0014271:	83 ec 1c             	sub    esp,0x1c
c0014274:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014278:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001427b:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001427e:	85 c0                	test   eax,eax
c0014280:	79 1f                	jns    c00142a1 <SysRegistryReadExtent(regs*)+0x30>
c0014282:	52                   	push   edx
c0014283:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0014288:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001428c:	52                   	push   edx
c001428d:	50                   	push   eax
c001428e:	51                   	push   ecx
c001428f:	e8 9b f0 ff ff       	call   c001332f <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014294:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014298:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001429c:	83 c4 10             	add    esp,0x10
c001429f:	eb 14                	jmp    c00142b5 <SysRegistryReadExtent(regs*)+0x44>
c00142a1:	83 ec 04             	sub    esp,0x4
c00142a4:	ff 72 24             	push   DWORD PTR [edx+0x24]
c00142a7:	50                   	push   eax
c00142a8:	51                   	push   ecx
c00142a9:	e8 1f eb ff ff       	call   c0012dcd <CmGetString(Reghive_Tag*, int, char*)>
c00142ae:	83 c4 10             	add    esp,0x10
c00142b1:	31 c0                	xor    eax,eax
c00142b3:	31 d2                	xor    edx,edx
c00142b5:	83 c4 1c             	add    esp,0x1c
c00142b8:	c3                   	ret    

c00142b9 <SysRegistryPathToExtentLookup(regs*)>:
c00142b9:	53                   	push   ebx
c00142ba:	83 ec 10             	sub    esp,0x10
c00142bd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00142c1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00142c4:	68 dd 26 02 c0       	push   0xc00226dd
c00142c9:	e8 3c 66 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00142ce:	58                   	pop    eax
c00142cf:	5a                   	pop    edx
c00142d0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00142d3:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00142d6:	e8 7d f5 ff ff       	call   c0013858 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00142db:	83 c4 18             	add    esp,0x18
c00142de:	5b                   	pop    ebx
c00142df:	99                   	cdq    
c00142e0:	c3                   	ret    

c00142e1 <SysRegistryEnterDirectory(regs*)>:
c00142e1:	53                   	push   ebx
c00142e2:	83 ec 10             	sub    esp,0x10
c00142e5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00142e9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00142ec:	68 00 27 02 c0       	push   0xc0022700
c00142f1:	e8 14 66 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00142f6:	58                   	pop    eax
c00142f7:	5a                   	pop    edx
c00142f8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00142fb:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00142fe:	e8 41 eb ff ff       	call   c0012e44 <CmEnterDirectory(Reghive_Tag*, int)>
c0014303:	83 c4 18             	add    esp,0x18
c0014306:	5b                   	pop    ebx
c0014307:	99                   	cdq    
c0014308:	c3                   	ret    

c0014309 <SysRegistryGetNext(regs*)>:
c0014309:	53                   	push   ebx
c001430a:	83 ec 10             	sub    esp,0x10
c001430d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014311:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014314:	68 1e 27 02 c0       	push   0xc002271e
c0014319:	e8 ec 65 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001431e:	58                   	pop    eax
c001431f:	5a                   	pop    edx
c0014320:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014323:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014326:	e8 58 eb ff ff       	call   c0012e83 <CmGetNext(Reghive_Tag*, int)>
c001432b:	83 c4 18             	add    esp,0x18
c001432e:	5b                   	pop    ebx
c001432f:	99                   	cdq    
c0014330:	c3                   	ret    

c0014331 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0014331:	57                   	push   edi
c0014332:	56                   	push   esi
c0014333:	53                   	push   ebx
c0014334:	81 ec 34 01 00 00    	sub    esp,0x134
c001433a:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014341:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0014345:	57                   	push   edi
c0014346:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014349:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001434c:	e8 ec f0 ff ff       	call   c001343d <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014351:	89 c3                	mov    ebx,eax
c0014353:	58                   	pop    eax
c0014354:	5a                   	pop    edx
c0014355:	57                   	push   edi
c0014356:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014359:	e8 f2 c2 fe ff       	call   c0000650 <strcpy>
c001435e:	81 c4 40 01 00 00    	add    esp,0x140
c0014364:	89 d8                	mov    eax,ebx
c0014366:	5b                   	pop    ebx
c0014367:	99                   	cdq    
c0014368:	5e                   	pop    esi
c0014369:	5f                   	pop    edi
c001436a:	c3                   	ret    

c001436b <SysRegistryOpen(regs*)>:
c001436b:	83 ec 18             	sub    esp,0x18
c001436e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014372:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014375:	e8 e3 e8 ff ff       	call   c0012c5d <CmOpen(char const*)>
c001437a:	83 c4 1c             	add    esp,0x1c
c001437d:	99                   	cdq    
c001437e:	c3                   	ret    

c001437f <SysRegistryClose(regs*)>:
c001437f:	83 ec 18             	sub    esp,0x18
c0014382:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014386:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014389:	e8 ed e9 ff ff       	call   c0012d7b <CmClose(Reghive_Tag*)>
c001438e:	31 c0                	xor    eax,eax
c0014390:	31 d2                	xor    edx,edx
c0014392:	83 c4 1c             	add    esp,0x1c
c0014395:	c3                   	ret    

c0014396 <SysSbrk(regs*)>:
c0014396:	56                   	push   esi
c0014397:	53                   	push   ebx
c0014398:	50                   	push   eax
c0014399:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001439e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00143a2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00143a5:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00143a8:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00143ae:	85 db                	test   ebx,ebx
c00143b0:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00143b3:	74 02                	je     c00143b7 <SysSbrk(regs*)+0x21>
c00143b5:	79 06                	jns    c00143bd <SysSbrk(regs*)+0x27>
c00143b7:	89 f0                	mov    eax,esi
c00143b9:	31 d2                	xor    edx,edx
c00143bb:	eb 2a                	jmp    c00143e7 <SysSbrk(regs*)+0x51>
c00143bd:	83 c8 ff             	or     eax,0xffffffff
c00143c0:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00143c6:	89 c2                	mov    edx,eax
c00143c8:	77 1d                	ja     c00143e7 <SysSbrk(regs*)+0x51>
c00143ca:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00143d0:	50                   	push   eax
c00143d1:	68 07 0c 00 00       	push   0xc07
c00143d6:	c1 ea 0c             	shr    edx,0xc
c00143d9:	52                   	push   edx
c00143da:	51                   	push   ecx
c00143db:	e8 26 5a ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c00143e0:	89 f0                	mov    eax,esi
c00143e2:	31 d2                	xor    edx,edx
c00143e4:	83 c4 10             	add    esp,0x10
c00143e7:	59                   	pop    ecx
c00143e8:	5b                   	pop    ebx
c00143e9:	5e                   	pop    esi
c00143ea:	c3                   	ret    

c00143eb <SysSetCwd(regs*)>:
c00143eb:	83 ec 14             	sub    esp,0x14
c00143ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00143f2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00143f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143fa:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00143fd:	e8 43 7b ff ff       	call   c000bf45 <Fs::setcwd(Process*, char*)>
c0014402:	83 c4 1c             	add    esp,0x1c
c0014405:	99                   	cdq    
c0014406:	c3                   	ret    

c0014407 <SysSetTime(regs*)>:
c0014407:	55                   	push   ebp
c0014408:	31 c9                	xor    ecx,ecx
c001440a:	57                   	push   edi
c001440b:	bd 0c 00 00 00       	mov    ebp,0xc
c0014410:	56                   	push   esi
c0014411:	53                   	push   ebx
c0014412:	31 db                	xor    ebx,ebx
c0014414:	83 ec 10             	sub    esp,0x10
c0014417:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001441b:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001441e:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0014421:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0014424:	89 c2                	mov    edx,eax
c0014426:	c1 e8 05             	shr    eax,0x5
c0014429:	83 e2 1f             	and    edx,0x1f
c001442c:	42                   	inc    edx
c001442d:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0014433:	c1 e7 10             	shl    edi,0x10
c0014436:	88 d1                	mov    cl,dl
c0014438:	31 d2                	xor    edx,edx
c001443a:	f7 f5                	div    ebp
c001443c:	89 dd                	mov    ebp,ebx
c001443e:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0014444:	88 d5                	mov    ch,dl
c0014446:	31 d2                	xor    edx,edx
c0014448:	0f b7 c1             	movzx  eax,cx
c001444b:	09 f8                	or     eax,edi
c001444d:	bf 3c 00 00 00       	mov    edi,0x3c
c0014452:	89 c1                	mov    ecx,eax
c0014454:	89 f0                	mov    eax,esi
c0014456:	f7 f7                	div    edi
c0014458:	c1 e2 10             	shl    edx,0x10
c001445b:	09 d5                	or     ebp,edx
c001445d:	31 d2                	xor    edx,edx
c001445f:	f7 f7                	div    edi
c0014461:	89 eb                	mov    ebx,ebp
c0014463:	bf 10 0e 00 00       	mov    edi,0xe10
c0014468:	89 f0                	mov    eax,esi
c001446a:	88 d7                	mov    bh,dl
c001446c:	31 d2                	xor    edx,edx
c001446e:	f7 f7                	div    edi
c0014470:	bf 18 00 00 00       	mov    edi,0x18
c0014475:	31 d2                	xor    edx,edx
c0014477:	f7 f7                	div    edi
c0014479:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001447e:	88 d3                	mov    bl,dl
c0014480:	53                   	push   ebx
c0014481:	51                   	push   ecx
c0014482:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0014488:	e8 cb 82 ff ff       	call   c000c758 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001448d:	83 c4 1c             	add    esp,0x1c
c0014490:	31 d2                	xor    edx,edx
c0014492:	5b                   	pop    ebx
c0014493:	5e                   	pop    esi
c0014494:	83 f0 01             	xor    eax,0x1
c0014497:	5f                   	pop    edi
c0014498:	0f b6 c0             	movzx  eax,al
c001449b:	5d                   	pop    ebp
c001449c:	c3                   	ret    

c001449d <SysSymlink(regs*)>:
c001449d:	53                   	push   ebx
c001449e:	83 c8 ff             	or     eax,0xffffffff
c00144a1:	83 ec 08             	sub    esp,0x8
c00144a4:	89 c2                	mov    edx,eax
c00144a6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00144aa:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00144ad:	85 c9                	test   ecx,ecx
c00144af:	74 14                	je     c00144c5 <SysSymlink(regs*)+0x28>
c00144b1:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c00144b4:	85 db                	test   ebx,ebx
c00144b6:	74 0d                	je     c00144c5 <SysSymlink(regs*)+0x28>
c00144b8:	50                   	push   eax
c00144b9:	50                   	push   eax
c00144ba:	53                   	push   ebx
c00144bb:	51                   	push   ecx
c00144bc:	e8 4a 6e ff ff       	call   c000b30b <KeCreateSymlink(char const*, char const*)>
c00144c1:	83 c4 10             	add    esp,0x10
c00144c4:	99                   	cdq    
c00144c5:	83 c4 08             	add    esp,0x8
c00144c8:	5b                   	pop    ebx
c00144c9:	c3                   	ret    

c00144ca <SysTimezone(regs*)>:
c00144ca:	53                   	push   ebx
c00144cb:	83 ec 08             	sub    esp,0x8
c00144ce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00144d2:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00144d6:	75 17                	jne    c00144ef <SysTimezone(regs*)+0x25>
c00144d8:	83 ec 0c             	sub    esp,0xc
c00144db:	68 35 27 02 c0       	push   0xc0022735
c00144e0:	e8 25 64 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00144e5:	83 c8 ff             	or     eax,0xffffffff
c00144e8:	83 c4 10             	add    esp,0x10
c00144eb:	89 c2                	mov    edx,eax
c00144ed:	eb 20                	jmp    c001450f <SysTimezone(regs*)+0x45>
c00144ef:	83 ec 0c             	sub    esp,0xc
c00144f2:	68 4a 27 02 c0       	push   0xc002274a
c00144f7:	e8 0e 64 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00144fc:	58                   	pop    eax
c00144fd:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014500:	e8 b7 7f ff ff       	call   c000c4bc <User::loadClockSettings(int)>
c0014505:	83 c4 10             	add    esp,0x10
c0014508:	b8 01 00 00 00       	mov    eax,0x1
c001450d:	31 d2                	xor    edx,edx
c001450f:	83 c4 08             	add    esp,0x8
c0014512:	5b                   	pop    ebx
c0014513:	c3                   	ret    

c0014514 <SysTruncate(regs*)>:
c0014514:	55                   	push   ebp
c0014515:	57                   	push   edi
c0014516:	31 ff                	xor    edi,edi
c0014518:	56                   	push   esi
c0014519:	53                   	push   ebx
c001451a:	83 ec 0c             	sub    esp,0xc
c001451d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014521:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014524:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014528:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c001452b:	89 ce                	mov    esi,ecx
c001452d:	0f 84 9a 00 00 00    	je     c00145cd <SysTruncate(regs*)+0xb9>
c0014533:	83 ec 0c             	sub    esp,0xc
c0014536:	68 14 01 00 00       	push   0x114
c001453b:	e8 93 35 ff ff       	call   c0007ad3 <malloc>
c0014540:	83 c4 0c             	add    esp,0xc
c0014543:	89 c3                	mov    ebx,eax
c0014545:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001454a:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001454d:	55                   	push   ebp
c001454e:	53                   	push   ebx
c001454f:	e8 70 76 ff ff       	call   c000bbc4 <File::File(char const*, Process*)>
c0014554:	83 c4 10             	add    esp,0x10
c0014557:	31 d2                	xor    edx,edx
c0014559:	85 db                	test   ebx,ebx
c001455b:	b8 03 00 00 00       	mov    eax,0x3
c0014560:	0f 84 a2 00 00 00    	je     c0014608 <SysTruncate(regs*)+0xf4>
c0014566:	51                   	push   ecx
c0014567:	51                   	push   ecx
c0014568:	6a 02                	push   0x2
c001456a:	53                   	push   ebx
c001456b:	e8 72 76 ff ff       	call   c000bbe2 <File::open(FileOpenMode)>
c0014570:	83 c4 10             	add    esp,0x10
c0014573:	85 c0                	test   eax,eax
c0014575:	74 13                	je     c001458a <SysTruncate(regs*)+0x76>
c0014577:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014579:	83 ec 0c             	sub    esp,0xc
c001457c:	53                   	push   ebx
c001457d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014580:	83 c4 10             	add    esp,0x10
c0014583:	b8 04 00 00 00       	mov    eax,0x4
c0014588:	eb 7c                	jmp    c0014606 <SysTruncate(regs*)+0xf2>
c001458a:	52                   	push   edx
c001458b:	57                   	push   edi
c001458c:	56                   	push   esi
c001458d:	53                   	push   ebx
c001458e:	e8 63 77 ff ff       	call   c000bcf6 <File::truncate(unsigned long long)>
c0014593:	83 c4 10             	add    esp,0x10
c0014596:	85 c0                	test   eax,eax
c0014598:	74 1b                	je     c00145b5 <SysTruncate(regs*)+0xa1>
c001459a:	83 ec 0c             	sub    esp,0xc
c001459d:	53                   	push   ebx
c001459e:	e8 9d 76 ff ff       	call   c000bc40 <File::close()>
c00145a3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145a5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00145a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00145ab:	83 c4 10             	add    esp,0x10
c00145ae:	b8 05 00 00 00       	mov    eax,0x5
c00145b3:	eb 51                	jmp    c0014606 <SysTruncate(regs*)+0xf2>
c00145b5:	83 ec 0c             	sub    esp,0xc
c00145b8:	53                   	push   ebx
c00145b9:	e8 82 76 ff ff       	call   c000bc40 <File::close()>
c00145be:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00145c3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00145c6:	83 c4 10             	add    esp,0x10
c00145c9:	31 c0                	xor    eax,eax
c00145cb:	eb 39                	jmp    c0014606 <SysTruncate(regs*)+0xf2>
c00145cd:	31 d2                	xor    edx,edx
c00145cf:	83 fd 02             	cmp    ebp,0x2
c00145d2:	b8 01 00 00 00       	mov    eax,0x1
c00145d7:	7e 2f                	jle    c0014608 <SysTruncate(regs*)+0xf4>
c00145d9:	83 ec 0c             	sub    esp,0xc
c00145dc:	51                   	push   ecx
c00145dd:	e8 b9 4e ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c00145e2:	83 c4 10             	add    esp,0x10
c00145e5:	31 d2                	xor    edx,edx
c00145e7:	89 c1                	mov    ecx,eax
c00145e9:	b8 02 00 00 00       	mov    eax,0x2
c00145ee:	85 c9                	test   ecx,ecx
c00145f0:	74 16                	je     c0014608 <SysTruncate(regs*)+0xf4>
c00145f2:	50                   	push   eax
c00145f3:	57                   	push   edi
c00145f4:	56                   	push   esi
c00145f5:	51                   	push   ecx
c00145f6:	e8 fb 76 ff ff       	call   c000bcf6 <File::truncate(unsigned long long)>
c00145fb:	83 c4 10             	add    esp,0x10
c00145fe:	85 c0                	test   eax,eax
c0014600:	0f 95 c0             	setne  al
c0014603:	0f b6 c0             	movzx  eax,al
c0014606:	31 d2                	xor    edx,edx
c0014608:	83 c4 0c             	add    esp,0xc
c001460b:	5b                   	pop    ebx
c001460c:	5e                   	pop    esi
c001460d:	5f                   	pop    edi
c001460e:	5d                   	pop    ebp
c001460f:	c3                   	ret    

c0014610 <SysWrite(regs*)>:
c0014610:	57                   	push   edi
c0014611:	56                   	push   esi
c0014612:	53                   	push   ebx
c0014613:	83 ec 10             	sub    esp,0x10
c0014616:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001461a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001461d:	83 f8 02             	cmp    eax,0x2
c0014620:	77 10                	ja     c0014632 <SysWrite(regs*)+0x22>
c0014622:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014627:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001462a:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0014630:	eb 0e                	jmp    c0014640 <SysWrite(regs*)+0x30>
c0014632:	83 ec 0c             	sub    esp,0xc
c0014635:	50                   	push   eax
c0014636:	e8 60 4e ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c001463b:	83 c4 10             	add    esp,0x10
c001463e:	89 c1                	mov    ecx,eax
c0014640:	83 c8 ff             	or     eax,0xffffffff
c0014643:	85 c9                	test   ecx,ecx
c0014645:	89 c2                	mov    edx,eax
c0014647:	74 28                	je     c0014671 <SysWrite(regs*)+0x61>
c0014649:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014651:	83 ec 0c             	sub    esp,0xc
c0014654:	31 ff                	xor    edi,edi
c0014656:	8d 54 24 18          	lea    edx,[esp+0x18]
c001465a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001465c:	52                   	push   edx
c001465d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014660:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014663:	57                   	push   edi
c0014664:	56                   	push   esi
c0014665:	51                   	push   ecx
c0014666:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014669:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001466d:	83 c4 20             	add    esp,0x20
c0014670:	99                   	cdq    
c0014671:	83 c4 10             	add    esp,0x10
c0014674:	5b                   	pop    ebx
c0014675:	5e                   	pop    esi
c0014676:	5f                   	pop    edi
c0014677:	c3                   	ret    

c0014678 <SysWsbe(regs*)>:
c0014678:	57                   	push   edi
c0014679:	b9 0b 00 00 00       	mov    ecx,0xb
c001467e:	56                   	push   esi
c001467f:	be 89 27 02 c0       	mov    esi,0xc0022789
c0014684:	53                   	push   ebx
c0014685:	83 ec 30             	sub    esp,0x30
c0014688:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001468c:	fc                   	cld    
c001468d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001468f:	83 ec 0c             	sub    esp,0xc
c0014692:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014696:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001469b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001469e:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00146a4:	8b 06                	mov    eax,DWORD PTR [esi]
c00146a6:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00146a9:	57                   	push   edi
c00146aa:	e8 d1 be fe ff       	call   c0000580 <strlen>
c00146af:	5a                   	pop    edx
c00146b0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00146b4:	52                   	push   edx
c00146b5:	31 d2                	xor    edx,edx
c00146b7:	57                   	push   edi
c00146b8:	52                   	push   edx
c00146b9:	50                   	push   eax
c00146ba:	56                   	push   esi
c00146bb:	ff d3                	call   ebx
c00146bd:	83 c4 14             	add    esp,0x14
c00146c0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00146c4:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00146c7:	e8 a8 23 00 00       	call   c0016a74 <terminateTask(int)>
c00146cc:	83 c4 40             	add    esp,0x40
c00146cf:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00146d4:	5b                   	pop    ebx
c00146d5:	31 d2                	xor    edx,edx
c00146d7:	5e                   	pop    esi
c00146d8:	5f                   	pop    edi
c00146d9:	c3                   	ret    

c00146da <SysYield(regs*)>:
c00146da:	83 ec 0c             	sub    esp,0xc
c00146dd:	fa                   	cli    
c00146de:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00146e4:	e8 0b 1a 00 00       	call   c00160f4 <schedule()>
c00146e9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00146ee:	48                   	dec    eax
c00146ef:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00146f4:	75 01                	jne    c00146f7 <SysYield(regs*)+0x1d>
c00146f6:	fb                   	sti    
c00146f7:	31 c0                	xor    eax,eax
c00146f9:	31 d2                	xor    edx,edx
c00146fb:	83 c4 0c             	add    esp,0xc
c00146fe:	c3                   	ret    

c00146ff <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00146ff:	55                   	push   ebp
c0014700:	57                   	push   edi
c0014701:	56                   	push   esi
c0014702:	53                   	push   ebx
c0014703:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0014709:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0014714:	74 3b                	je     c0014751 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0014716:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c001471e:	74 31                	je     c0014751 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0014720:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0014728:	75 27                	jne    c0014751 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001472a:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0014731:	05 00 10 00 00       	add    eax,0x1000
c0014736:	89 c2                	mov    edx,eax
c0014738:	25 00 f0 ff ff       	and    eax,0xfffff000
c001473d:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0014744:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001474a:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0014751:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0014758:	83 ec 0c             	sub    esp,0xc
c001475b:	6a 01                	push   0x1
c001475d:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0014763:	e8 8d 4e ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0014768:	83 c4 10             	add    esp,0x10
c001476b:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0014771:	89 c3                	mov    ebx,eax
c0014773:	0f 86 26 01 00 00    	jbe    c001489f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c0014779:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014781:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014788:	c1 ee 0c             	shr    esi,0xc
c001478b:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001478f:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0014796:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c001479d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00147a1:	29 ef                	sub    edi,ebp
c00147a3:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00147a7:	0f 83 f9 00 00 00    	jae    c00148a6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c00147ad:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00147b3:	b8 00 10 00 00       	mov    eax,0x1000
c00147b8:	0f 47 f8             	cmova  edi,eax
c00147bb:	83 ec 0c             	sub    esp,0xc
c00147be:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00147c5:	31 d2                	xor    edx,edx
c00147c7:	8b 08                	mov    ecx,DWORD PTR [eax]
c00147c9:	8d 44 24 28          	lea    eax,[esp+0x28]
c00147cd:	50                   	push   eax
c00147ce:	8d 74 24 30          	lea    esi,[esp+0x30]
c00147d2:	56                   	push   esi
c00147d3:	52                   	push   edx
c00147d4:	57                   	push   edi
c00147d5:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00147dc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00147df:	83 c4 20             	add    esp,0x20
c00147e2:	85 c0                	test   eax,eax
c00147e4:	75 06                	jne    c00147ec <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c00147e6:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00147ea:	74 13                	je     c00147ff <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c00147ec:	83 ec 0c             	sub    esp,0xc
c00147ef:	53                   	push   ebx
c00147f0:	e8 14 51 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c00147f5:	83 c4 10             	add    esp,0x10
c00147f8:	31 c0                	xor    eax,eax
c00147fa:	e9 7c 01 00 00       	jmp    c001497b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c00147ff:	fa                   	cli    
c0014800:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0014806:	e8 d7 35 ff ff       	call   c0007de2 <Phys::allocatePage()>
c001480b:	6a 07                	push   0x7
c001480d:	53                   	push   ebx
c001480e:	50                   	push   eax
c001480f:	89 c7                	mov    edi,eax
c0014811:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014816:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014819:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001481f:	e8 da 54 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0014824:	83 c4 0c             	add    esp,0xc
c0014827:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001482e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014834:	6a 00                	push   0x0
c0014836:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001483b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001483e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014844:	e8 1b 53 ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c0014849:	58                   	pop    eax
c001484a:	5a                   	pop    edx
c001484b:	68 07 0c 00 00       	push   0xc07
c0014850:	55                   	push   ebp
c0014851:	57                   	push   edi
c0014852:	89 df                	mov    edi,ebx
c0014854:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001485b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014861:	6a 00                	push   0x0
c0014863:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014868:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001486b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014871:	e8 ec 56 ff ff       	call   c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014876:	b9 00 10 00 00       	mov    ecx,0x1000
c001487b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001487d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0014882:	83 c4 20             	add    esp,0x20
c0014885:	48                   	dec    eax
c0014886:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001488b:	85 c0                	test   eax,eax
c001488d:	75 01                	jne    c0014890 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c001488f:	fb                   	sti    
c0014890:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014894:	81 c5 00 10 00 00    	add    ebp,0x1000
c001489a:	e9 f0 fe ff ff       	jmp    c001478f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c001489f:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00148a6:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00148ad:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00148b3:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00148b9:	0f 86 ae 00 00 00    	jbe    c001496d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c00148bf:	fa                   	cli    
c00148c0:	51                   	push   ecx
c00148c1:	31 ff                	xor    edi,edi
c00148c3:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00148ca:	c1 ee 0c             	shr    esi,0xc
c00148cd:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00148d3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148d9:	6a 00                	push   0x0
c00148db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148e0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00148e3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148e9:	e8 76 52 ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c00148ee:	83 c4 10             	add    esp,0x10
c00148f1:	e8 ec 34 ff ff       	call   c0007de2 <Phys::allocatePage()>
c00148f6:	47                   	inc    edi
c00148f7:	6a 07                	push   0x7
c00148f9:	53                   	push   ebx
c00148fa:	50                   	push   eax
c00148fb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00148ff:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014905:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014908:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c001490e:	e8 eb 53 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0014913:	58                   	pop    eax
c0014914:	5a                   	pop    edx
c0014915:	68 07 0c 00 00       	push   0xc07
c001491a:	55                   	push   ebp
c001491b:	81 c5 00 10 00 00    	add    ebp,0x1000
c0014921:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014925:	50                   	push   eax
c0014926:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001492d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014933:	6a 00                	push   0x0
c0014935:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001493a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001493d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014943:	e8 1a 56 ff ff       	call   c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014948:	83 c4 1c             	add    esp,0x1c
c001494b:	68 00 10 00 00       	push   0x1000
c0014950:	6a 00                	push   0x0
c0014952:	53                   	push   ebx
c0014953:	e8 98 bb fe ff       	call   c00004f0 <memset>
c0014958:	83 c4 10             	add    esp,0x10
c001495b:	39 fe                	cmp    esi,edi
c001495d:	77 92                	ja     c00148f1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c001495f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0014964:	48                   	dec    eax
c0014965:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001496a:	75 01                	jne    c001496d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c001496c:	fb                   	sti    
c001496d:	83 ec 0c             	sub    esp,0xc
c0014970:	53                   	push   ebx
c0014971:	e8 93 4f ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0014976:	83 c4 10             	add    esp,0x10
c0014979:	b0 01                	mov    al,0x1
c001497b:	81 c4 2c 10 00 00    	add    esp,0x102c
c0014981:	5b                   	pop    ebx
c0014982:	5e                   	pop    esi
c0014983:	5f                   	pop    edi
c0014984:	5d                   	pop    ebp
c0014985:	c3                   	ret    

c0014986 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0014986:	55                   	push   ebp
c0014987:	57                   	push   edi
c0014988:	56                   	push   esi
c0014989:	53                   	push   ebx
c001498a:	83 ec 48             	sub    esp,0x48
c001498d:	68 14 01 00 00       	push   0x114
c0014992:	e8 3c 31 ff ff       	call   c0007ad3 <malloc>
c0014997:	83 c4 0c             	add    esp,0xc
c001499a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001499e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00149a2:	89 c7                	mov    edi,eax
c00149a4:	50                   	push   eax
c00149a5:	e8 1a 72 ff ff       	call   c000bbc4 <File::File(char const*, Process*)>
c00149aa:	58                   	pop    eax
c00149ab:	5a                   	pop    edx
c00149ac:	6a 01                	push   0x1
c00149ae:	57                   	push   edi
c00149af:	e8 2e 72 ff ff       	call   c000bbe2 <File::open(FileOpenMode)>
c00149b4:	83 c4 10             	add    esp,0x10
c00149b7:	85 c0                	test   eax,eax
c00149b9:	0f 85 4c 01 00 00    	jne    c0014b0b <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00149bf:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00149c7:	83 ec 0c             	sub    esp,0xc
c00149ca:	6a 34                	push   0x34
c00149cc:	e8 02 31 ff ff       	call   c0007ad3 <malloc>
c00149d1:	89 c3                	mov    ebx,eax
c00149d3:	58                   	pop    eax
c00149d4:	8b 07                	mov    eax,DWORD PTR [edi]
c00149d6:	8d 74 24 38          	lea    esi,[esp+0x38]
c00149da:	56                   	push   esi
c00149db:	53                   	push   ebx
c00149dc:	6a 00                	push   0x0
c00149de:	6a 34                	push   0x34
c00149e0:	57                   	push   edi
c00149e1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00149e4:	83 c4 20             	add    esp,0x20
c00149e7:	85 c0                	test   eax,eax
c00149e9:	0f 85 1c 01 00 00    	jne    c0014b0b <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00149ef:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00149f5:	0f 85 10 01 00 00    	jne    c0014b0b <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00149fb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00149fe:	85 c0                	test   eax,eax
c0014a00:	0f 84 05 01 00 00    	je     c0014b0b <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014a06:	31 d2                	xor    edx,edx
c0014a08:	55                   	push   ebp
c0014a09:	52                   	push   edx
c0014a0a:	50                   	push   eax
c0014a0b:	57                   	push   edi
c0014a0c:	e8 8f 72 ff ff       	call   c000bca0 <File::seek(unsigned long long)>
c0014a11:	83 c4 10             	add    esp,0x10
c0014a14:	85 c0                	test   eax,eax
c0014a16:	0f 85 ef 00 00 00    	jne    c0014b0b <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014a1c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014a1f:	83 ec 0c             	sub    esp,0xc
c0014a22:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014a26:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014a2a:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014a2e:	0f af c2             	imul   eax,edx
c0014a31:	50                   	push   eax
c0014a32:	e8 9c 30 ff ff       	call   c0007ad3 <malloc>
c0014a37:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014a39:	89 34 24             	mov    DWORD PTR [esp],esi
c0014a3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014a40:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014a44:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014a48:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014a4c:	0f af c2             	imul   eax,edx
c0014a4f:	99                   	cdq    
c0014a50:	52                   	push   edx
c0014a51:	50                   	push   eax
c0014a52:	57                   	push   edi
c0014a53:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014a56:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0014a59:	83 c4 20             	add    esp,0x20
c0014a5c:	85 c0                	test   eax,eax
c0014a5e:	0f 84 a7 00 00 00    	je     c0014b0b <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014a64:	31 d2                	xor    edx,edx
c0014a66:	51                   	push   ecx
c0014a67:	52                   	push   edx
c0014a68:	50                   	push   eax
c0014a69:	57                   	push   edi
c0014a6a:	e8 31 72 ff ff       	call   c000bca0 <File::seek(unsigned long long)>
c0014a6f:	83 c4 10             	add    esp,0x10
c0014a72:	85 c0                	test   eax,eax
c0014a74:	0f 85 91 00 00 00    	jne    c0014b0b <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014a7a:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014a7e:	83 ec 0c             	sub    esp,0xc
c0014a81:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014a85:	0f af c2             	imul   eax,edx
c0014a88:	50                   	push   eax
c0014a89:	e8 45 30 ff ff       	call   c0007ad3 <malloc>
c0014a8e:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014a90:	89 34 24             	mov    DWORD PTR [esp],esi
c0014a93:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014a97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a9b:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014a9f:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014aa3:	0f af c2             	imul   eax,edx
c0014aa6:	99                   	cdq    
c0014aa7:	52                   	push   edx
c0014aa8:	50                   	push   eax
c0014aa9:	57                   	push   edi
c0014aaa:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014aad:	83 c4 20             	add    esp,0x20
c0014ab0:	31 c9                	xor    ecx,ecx
c0014ab2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014aba:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c0014abe:	0f b7 e9             	movzx  ebp,cx
c0014ac1:	0f 83 86 00 00 00    	jae    c0014b4d <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c0014ac7:	c1 e5 05             	shl    ebp,0x5
c0014aca:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0014ace:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c0014ad2:	75 73                	jne    c0014b47 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c0014ad4:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014ad8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014adb:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0014ade:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014ae2:	52                   	push   edx
c0014ae3:	31 d2                	xor    edx,edx
c0014ae5:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0014ae8:	52                   	push   edx
c0014ae9:	50                   	push   eax
c0014aea:	57                   	push   edi
c0014aeb:	e8 b0 71 ff ff       	call   c000bca0 <File::seek(unsigned long long)>
c0014af0:	83 c4 10             	add    esp,0x10
c0014af3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014af7:	85 c0                	test   eax,eax
c0014af9:	74 17                	je     c0014b12 <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c0014afb:	83 ec 0c             	sub    esp,0xc
c0014afe:	68 b5 27 02 c0       	push   0xc00227b5
c0014b03:	e8 02 5e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014b08:	83 c4 10             	add    esp,0x10
c0014b0b:	31 c0                	xor    eax,eax
c0014b0d:	e9 8b 00 00 00       	jmp    c0014b9d <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c0014b12:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014b16:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0014b19:	83 ec 0c             	sub    esp,0xc
c0014b1c:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0014b1f:	50                   	push   eax
c0014b20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014b24:	56                   	push   esi
c0014b25:	57                   	push   edi
c0014b26:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014b2a:	e8 d0 fb ff ff       	call   c00146ff <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0014b2f:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0014b33:	83 c4 20             	add    esp,0x20
c0014b36:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0014b3a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014b3e:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0014b43:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0014b47:	41                   	inc    ecx
c0014b48:	e9 6d ff ff ff       	jmp    c0014aba <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014b4d:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014b51:	83 ec 0c             	sub    esp,0xc
c0014b54:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0014b58:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b5c:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c0014b62:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0014b68:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014b6d:	05 00 10 00 00       	add    eax,0x1000
c0014b72:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014b75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b79:	e8 65 2f ff ff       	call   c0007ae3 <free>
c0014b7e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b81:	e8 5d 2f ff ff       	call   c0007ae3 <free>
c0014b86:	58                   	pop    eax
c0014b87:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b8b:	e8 53 2f ff ff       	call   c0007ae3 <free>
c0014b90:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014b93:	e8 a8 70 ff ff       	call   c000bc40 <File::close()>
c0014b98:	83 c4 10             	add    esp,0x10
c0014b9b:	b0 01                	mov    al,0x1
c0014b9d:	83 c4 3c             	add    esp,0x3c
c0014ba0:	5b                   	pop    ebx
c0014ba1:	5e                   	pop    esi
c0014ba2:	5f                   	pop    edi
c0014ba3:	5d                   	pop    ebp
c0014ba4:	c3                   	ret    

c0014ba5 <Thr::runtimeReferenceHelper()>:
c0014ba5:	83 ec 18             	sub    esp,0x18
c0014ba8:	68 bd 27 02 c0       	push   0xc00227bd
c0014bad:	e8 58 5d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014bb2:	fa                   	cli    
c0014bb3:	83 c4 10             	add    esp,0x10
c0014bb6:	eb fe                	jmp    c0014bb6 <Thr::runtimeReferenceHelper()+0x11>

c0014bb8 <Thr::getAddressOfKernelSymbol(char const*)>:
c0014bb8:	57                   	push   edi
c0014bb9:	56                   	push   esi
c0014bba:	53                   	push   ebx
c0014bbb:	31 db                	xor    ebx,ebx
c0014bbd:	39 1d a0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6a0,ebx
c0014bc3:	7e 3c                	jle    c0014c01 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014bc5:	8b 34 9d 20 c6 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd39e0]
c0014bcc:	31 ff                	xor    edi,edi
c0014bce:	39 3c 9d 20 c5 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd3ae0],edi
c0014bd5:	7e 27                	jle    c0014bfe <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014bd7:	50                   	push   eax
c0014bd8:	50                   	push   eax
c0014bd9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014bdd:	8b 06                	mov    eax,DWORD PTR [esi]
c0014bdf:	03 04 9d a0 c5 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd3a60]
c0014be6:	50                   	push   eax
c0014be7:	e8 94 bb fe ff       	call   c0000780 <strcmp>
c0014bec:	83 c4 10             	add    esp,0x10
c0014bef:	85 c0                	test   eax,eax
c0014bf1:	75 05                	jne    c0014bf8 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0014bf3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014bf6:	eb 0b                	jmp    c0014c03 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014bf8:	83 c6 10             	add    esi,0x10
c0014bfb:	47                   	inc    edi
c0014bfc:	eb d0                	jmp    c0014bce <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014bfe:	43                   	inc    ebx
c0014bff:	eb bc                	jmp    c0014bbd <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0014c01:	31 c0                	xor    eax,eax
c0014c03:	5b                   	pop    ebx
c0014c04:	5e                   	pop    esi
c0014c05:	5f                   	pop    edi
c0014c06:	c3                   	ret    

c0014c07 <Thr::loadKernelSymbolTable(char const*)>:
c0014c07:	55                   	push   ebp
c0014c08:	57                   	push   edi
c0014c09:	56                   	push   esi
c0014c0a:	53                   	push   ebx
c0014c0b:	83 ec 68             	sub    esp,0x68
c0014c0e:	68 14 01 00 00       	push   0x114
c0014c13:	8b 35 f0 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6f0
c0014c19:	e8 b5 2e ff ff       	call   c0007ad3 <malloc>
c0014c1e:	83 c4 0c             	add    esp,0xc
c0014c21:	56                   	push   esi
c0014c22:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014c26:	89 c3                	mov    ebx,eax
c0014c28:	50                   	push   eax
c0014c29:	e8 96 6f ff ff       	call   c000bbc4 <File::File(char const*, Process*)>
c0014c2e:	5e                   	pop    esi
c0014c2f:	5f                   	pop    edi
c0014c30:	6a 01                	push   0x1
c0014c32:	53                   	push   ebx
c0014c33:	e8 aa 6f ff ff       	call   c000bbe2 <File::open(FileOpenMode)>
c0014c38:	83 c4 10             	add    esp,0x10
c0014c3b:	85 c0                	test   eax,eax
c0014c3d:	74 0a                	je     c0014c49 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014c3f:	83 ec 0c             	sub    esp,0xc
c0014c42:	68 df 27 02 c0       	push   0xc00227df
c0014c47:	eb 34                	jmp    c0014c7d <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014c49:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014c51:	83 ec 0c             	sub    esp,0xc
c0014c54:	6a 34                	push   0x34
c0014c56:	e8 78 2e ff ff       	call   c0007ad3 <malloc>
c0014c5b:	59                   	pop    ecx
c0014c5c:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014c60:	89 c7                	mov    edi,eax
c0014c62:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014c64:	56                   	push   esi
c0014c65:	57                   	push   edi
c0014c66:	6a 00                	push   0x0
c0014c68:	6a 34                	push   0x34
c0014c6a:	53                   	push   ebx
c0014c6b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014c6e:	83 c4 20             	add    esp,0x20
c0014c71:	85 c0                	test   eax,eax
c0014c73:	74 17                	je     c0014c8c <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014c75:	83 ec 0c             	sub    esp,0xc
c0014c78:	68 f6 27 02 c0       	push   0xc00227f6
c0014c7d:	e8 89 c9 ff ff       	call   c001160b <KePanic(char const*)>
c0014c82:	83 c4 10             	add    esp,0x10
c0014c85:	31 c0                	xor    eax,eax
c0014c87:	e9 31 02 00 00       	jmp    c0014ebd <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014c8c:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014c92:	75 e1                	jne    c0014c75 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014c94:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014c97:	85 c0                	test   eax,eax
c0014c99:	74 da                	je     c0014c75 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014c9b:	52                   	push   edx
c0014c9c:	31 d2                	xor    edx,edx
c0014c9e:	52                   	push   edx
c0014c9f:	50                   	push   eax
c0014ca0:	53                   	push   ebx
c0014ca1:	e8 fa 6f ff ff       	call   c000bca0 <File::seek(unsigned long long)>
c0014ca6:	83 c4 10             	add    esp,0x10
c0014ca9:	85 c0                	test   eax,eax
c0014cab:	75 c8                	jne    c0014c75 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014cad:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014cb1:	83 ec 0c             	sub    esp,0xc
c0014cb4:	31 ed                	xor    ebp,ebp
c0014cb6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014cba:	0f af c2             	imul   eax,edx
c0014cbd:	50                   	push   eax
c0014cbe:	e8 10 2e ff ff       	call   c0007ad3 <malloc>
c0014cc3:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014cc5:	89 34 24             	mov    DWORD PTR [esp],esi
c0014cc8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014ccc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014cd0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014cd4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014cd8:	0f af c2             	imul   eax,edx
c0014cdb:	99                   	cdq    
c0014cdc:	52                   	push   edx
c0014cdd:	50                   	push   eax
c0014cde:	53                   	push   ebx
c0014cdf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014ce2:	83 c4 20             	add    esp,0x20
c0014ce5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014ced:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014cf5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014cfd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014d05:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014d09:	0f b7 f5             	movzx  esi,bp
c0014d0c:	0f 83 a7 00 00 00    	jae    c0014db9 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014d12:	6b f6 28             	imul   esi,esi,0x28
c0014d15:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014d19:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014d1c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d20:	50                   	push   eax
c0014d21:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014d25:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014d29:	8b 16                	mov    edx,DWORD PTR [esi]
c0014d2b:	6b c0 28             	imul   eax,eax,0x28
c0014d2e:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0014d32:	89 d0                	mov    eax,edx
c0014d34:	31 d2                	xor    edx,edx
c0014d36:	52                   	push   edx
c0014d37:	50                   	push   eax
c0014d38:	53                   	push   ebx
c0014d39:	e8 62 6f ff ff       	call   c000bca0 <File::seek(unsigned long long)>
c0014d3e:	83 c4 0c             	add    esp,0xc
c0014d41:	6a 20                	push   0x20
c0014d43:	6a 00                	push   0x0
c0014d45:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014d49:	52                   	push   edx
c0014d4a:	e8 a1 b7 fe ff       	call   c00004f0 <memset>
c0014d4f:	58                   	pop    eax
c0014d50:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d52:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014d56:	51                   	push   ecx
c0014d57:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014d5b:	52                   	push   edx
c0014d5c:	6a 00                	push   0x0
c0014d5e:	6a 1f                	push   0x1f
c0014d60:	53                   	push   ebx
c0014d61:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014d64:	83 c4 18             	add    esp,0x18
c0014d67:	68 0d 28 02 c0       	push   0xc002280d
c0014d6c:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014d70:	52                   	push   edx
c0014d71:	e8 0a ba fe ff       	call   c0000780 <strcmp>
c0014d76:	83 c4 10             	add    esp,0x10
c0014d79:	85 c0                	test   eax,eax
c0014d7b:	75 0f                	jne    c0014d8c <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014d7d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014d80:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014d84:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014d8c:	50                   	push   eax
c0014d8d:	50                   	push   eax
c0014d8e:	68 15 28 02 c0       	push   0xc0022815
c0014d93:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014d97:	50                   	push   eax
c0014d98:	e8 e3 b9 fe ff       	call   c0000780 <strcmp>
c0014d9d:	83 c4 10             	add    esp,0x10
c0014da0:	85 c0                	test   eax,eax
c0014da2:	75 0f                	jne    c0014db3 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014da4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014da7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014dab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014daf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014db3:	45                   	inc    ebp
c0014db4:	e9 4c ff ff ff       	jmp    c0014d05 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014db9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014dbe:	75 10                	jne    c0014dd0 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014dc0:	83 ec 0c             	sub    esp,0xc
c0014dc3:	68 1d 28 02 c0       	push   0xc002281d
c0014dc8:	e8 3e c8 ff ff       	call   c001160b <KePanic(char const*)>
c0014dcd:	83 c4 10             	add    esp,0x10
c0014dd0:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014dd5:	75 10                	jne    c0014de7 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014dd7:	83 ec 0c             	sub    esp,0xc
c0014dda:	68 1d 28 02 c0       	push   0xc002281d
c0014ddf:	e8 27 c8 ff ff       	call   c001160b <KePanic(char const*)>
c0014de4:	83 c4 10             	add    esp,0x10
c0014de7:	50                   	push   eax
c0014de8:	31 d2                	xor    edx,edx
c0014dea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014dee:	52                   	push   edx
c0014def:	50                   	push   eax
c0014df0:	53                   	push   ebx
c0014df1:	e8 aa 6e ff ff       	call   c000bca0 <File::seek(unsigned long long)>
c0014df6:	5a                   	pop    edx
c0014df7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014dfb:	e8 d3 2c ff ff       	call   c0007ad3 <malloc>
c0014e00:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014e04:	31 c9                	xor    ecx,ecx
c0014e06:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014e0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e0c:	5e                   	pop    esi
c0014e0d:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014e11:	55                   	push   ebp
c0014e12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e16:	51                   	push   ecx
c0014e17:	52                   	push   edx
c0014e18:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014e1c:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014e20:	53                   	push   ebx
c0014e21:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014e24:	83 c4 14             	add    esp,0x14
c0014e27:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014e2b:	e8 a3 2c ff ff       	call   c0007ad3 <malloc>
c0014e30:	89 c6                	mov    esi,eax
c0014e32:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e34:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014e37:	56                   	push   esi
c0014e38:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014e3c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014e40:	51                   	push   ecx
c0014e41:	52                   	push   edx
c0014e42:	53                   	push   ebx
c0014e43:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014e46:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014e4a:	83 c4 1c             	add    esp,0x1c
c0014e4d:	8b 15 a0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6a0
c0014e53:	c1 e8 04             	shr    eax,0x4
c0014e56:	89 04 95 20 c5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3ae0],eax
c0014e5d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014e61:	31 d2                	xor    edx,edx
c0014e63:	52                   	push   edx
c0014e64:	50                   	push   eax
c0014e65:	53                   	push   ebx
c0014e66:	e8 35 6e ff ff       	call   c000bca0 <File::seek(unsigned long long)>
c0014e6b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014e6d:	31 d2                	xor    edx,edx
c0014e6f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014e72:	56                   	push   esi
c0014e73:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014e77:	52                   	push   edx
c0014e78:	50                   	push   eax
c0014e79:	53                   	push   ebx
c0014e7a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014e7d:	83 c4 14             	add    esp,0x14
c0014e80:	53                   	push   ebx
c0014e81:	e8 ba 6d ff ff       	call   c000bc40 <File::close()>
c0014e86:	5d                   	pop    ebp
c0014e87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014e8b:	e8 53 2c ff ff       	call   c0007ae3 <free>
c0014e90:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014e93:	e8 4b 2c ff ff       	call   c0007ae3 <free>
c0014e98:	a1 a0 c6 02 c0       	mov    eax,ds:0xc002c6a0
c0014e9d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014ea1:	83 c4 10             	add    esp,0x10
c0014ea4:	89 34 85 a0 c5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a60],esi
c0014eab:	8d 50 01             	lea    edx,[eax+0x1]
c0014eae:	89 0c 85 20 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd39e0],ecx
c0014eb5:	b0 01                	mov    al,0x1
c0014eb7:	89 15 a0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6a0,edx
c0014ebd:	83 c4 5c             	add    esp,0x5c
c0014ec0:	5b                   	pop    ebx
c0014ec1:	5e                   	pop    esi
c0014ec2:	5f                   	pop    edi
c0014ec3:	5d                   	pop    ebp
c0014ec4:	c3                   	ret    

c0014ec5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014ec5:	55                   	push   ebp
c0014ec6:	57                   	push   edi
c0014ec7:	56                   	push   esi
c0014ec8:	53                   	push   ebx
c0014ec9:	81 ec 68 03 00 00    	sub    esp,0x368
c0014ecf:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014ed6:	8b 35 f0 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6f0
c0014edc:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0014ee0:	68 14 01 00 00       	push   0x114
c0014ee5:	e8 e9 2b ff ff       	call   c0007ad3 <malloc>
c0014eea:	83 c4 0c             	add    esp,0xc
c0014eed:	56                   	push   esi
c0014eee:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014ef5:	50                   	push   eax
c0014ef6:	89 c3                	mov    ebx,eax
c0014ef8:	e8 c7 6c ff ff       	call   c000bbc4 <File::File(char const*, Process*)>
c0014efd:	5f                   	pop    edi
c0014efe:	5d                   	pop    ebp
c0014eff:	6a 01                	push   0x1
c0014f01:	53                   	push   ebx
c0014f02:	e8 db 6c ff ff       	call   c000bbe2 <File::open(FileOpenMode)>
c0014f07:	83 c4 10             	add    esp,0x10
c0014f0a:	85 c0                	test   eax,eax
c0014f0c:	0f 85 b3 06 00 00    	jne    c00155c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014f12:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014f1a:	83 ec 0c             	sub    esp,0xc
c0014f1d:	6a 34                	push   0x34
c0014f1f:	e8 af 2b ff ff       	call   c0007ad3 <malloc>
c0014f24:	5e                   	pop    esi
c0014f25:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014f29:	89 c5                	mov    ebp,eax
c0014f2b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f2d:	56                   	push   esi
c0014f2e:	55                   	push   ebp
c0014f2f:	6a 00                	push   0x0
c0014f31:	6a 34                	push   0x34
c0014f33:	53                   	push   ebx
c0014f34:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014f37:	83 c4 20             	add    esp,0x20
c0014f3a:	85 c0                	test   eax,eax
c0014f3c:	0f 85 83 06 00 00    	jne    c00155c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014f42:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0014f49:	0f 85 76 06 00 00    	jne    c00155c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014f4f:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0014f52:	85 c0                	test   eax,eax
c0014f54:	0f 84 6b 06 00 00    	je     c00155c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014f5a:	31 d2                	xor    edx,edx
c0014f5c:	51                   	push   ecx
c0014f5d:	52                   	push   edx
c0014f5e:	50                   	push   eax
c0014f5f:	53                   	push   ebx
c0014f60:	e8 3b 6d ff ff       	call   c000bca0 <File::seek(unsigned long long)>
c0014f65:	83 c4 10             	add    esp,0x10
c0014f68:	85 c0                	test   eax,eax
c0014f6a:	0f 85 55 06 00 00    	jne    c00155c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014f70:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0014f73:	83 ec 0c             	sub    esp,0xc
c0014f76:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014f7a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014f7e:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014f82:	0f af c2             	imul   eax,edx
c0014f85:	50                   	push   eax
c0014f86:	e8 48 2b ff ff       	call   c0007ad3 <malloc>
c0014f8b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014f8d:	89 34 24             	mov    DWORD PTR [esp],esi
c0014f90:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014f94:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014f98:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014f9c:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014fa0:	0f af c2             	imul   eax,edx
c0014fa3:	99                   	cdq    
c0014fa4:	52                   	push   edx
c0014fa5:	50                   	push   eax
c0014fa6:	53                   	push   ebx
c0014fa7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014faa:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0014fad:	83 c4 20             	add    esp,0x20
c0014fb0:	85 c0                	test   eax,eax
c0014fb2:	0f 84 0d 06 00 00    	je     c00155c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014fb8:	52                   	push   edx
c0014fb9:	31 d2                	xor    edx,edx
c0014fbb:	52                   	push   edx
c0014fbc:	50                   	push   eax
c0014fbd:	53                   	push   ebx
c0014fbe:	e8 dd 6c ff ff       	call   c000bca0 <File::seek(unsigned long long)>
c0014fc3:	83 c4 10             	add    esp,0x10
c0014fc6:	85 c0                	test   eax,eax
c0014fc8:	0f 85 f7 05 00 00    	jne    c00155c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014fce:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014fd2:	83 ec 0c             	sub    esp,0xc
c0014fd5:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014fd9:	0f af c2             	imul   eax,edx
c0014fdc:	50                   	push   eax
c0014fdd:	e8 f1 2a ff ff       	call   c0007ad3 <malloc>
c0014fe2:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014fe4:	89 34 24             	mov    DWORD PTR [esp],esi
c0014fe7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014feb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014fef:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014ff3:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014ff7:	0f af c2             	imul   eax,edx
c0014ffa:	99                   	cdq    
c0014ffb:	52                   	push   edx
c0014ffc:	50                   	push   eax
c0014ffd:	53                   	push   ebx
c0014ffe:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015001:	83 c4 20             	add    esp,0x20
c0015004:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001500a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001500d:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c0015011:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c0015015:	73 78                	jae    c001508f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0015017:	c1 e7 05             	shl    edi,0x5
c001501a:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001501e:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0015021:	75 63                	jne    c0015086 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c0015023:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0015026:	31 d2                	xor    edx,edx
c0015028:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c001502b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001502f:	50                   	push   eax
c0015030:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0015033:	52                   	push   edx
c0015034:	50                   	push   eax
c0015035:	53                   	push   ebx
c0015036:	e8 65 6c ff ff       	call   c000bca0 <File::seek(unsigned long long)>
c001503b:	83 c4 10             	add    esp,0x10
c001503e:	85 c0                	test   eax,eax
c0015040:	0f 85 7f 05 00 00    	jne    c00155c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0015046:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001504d:	83 ec 0c             	sub    esp,0xc
c0015050:	31 d2                	xor    edx,edx
c0015052:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0015056:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015058:	01 c6                	add    esi,eax
c001505a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015061:	50                   	push   eax
c0015062:	56                   	push   esi
c0015063:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015067:	52                   	push   edx
c0015068:	50                   	push   eax
c0015069:	53                   	push   ebx
c001506a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001506d:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015070:	83 c4 1c             	add    esp,0x1c
c0015073:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0015076:	50                   	push   eax
c0015077:	6a 00                	push   0x0
c0015079:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001507d:	56                   	push   esi
c001507e:	e8 6d b4 fe ff       	call   c00004f0 <memset>
c0015083:	83 c4 10             	add    esp,0x10
c0015086:	66 ff 04 24          	inc    WORD PTR [esp]
c001508a:	e9 7b ff ff ff       	jmp    c001500a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c001508f:	50                   	push   eax
c0015090:	68 00 01 00 00       	push   0x100
c0015095:	6a 00                	push   0x0
c0015097:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001509b:	50                   	push   eax
c001509c:	e8 4f b4 fe ff       	call   c00004f0 <memset>
c00150a1:	83 c4 0c             	add    esp,0xc
c00150a4:	68 00 01 00 00       	push   0x100
c00150a9:	6a 00                	push   0x0
c00150ab:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00150b2:	50                   	push   eax
c00150b3:	e8 38 b4 fe ff       	call   c00004f0 <memset>
c00150b8:	83 c4 10             	add    esp,0x10
c00150bb:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c00150c2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00150c9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00150d1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00150d9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00150e1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00150e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00150ed:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c00150f1:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c00150f6:	0f 83 16 01 00 00    	jae    c0015212 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c00150fc:	6b ff 28             	imul   edi,edi,0x28
c00150ff:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c0015103:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0015106:	51                   	push   ecx
c0015107:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c001510b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001510f:	8b 07                	mov    eax,DWORD PTR [edi]
c0015111:	6b d2 28             	imul   edx,edx,0x28
c0015114:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0015118:	31 d2                	xor    edx,edx
c001511a:	52                   	push   edx
c001511b:	50                   	push   eax
c001511c:	53                   	push   ebx
c001511d:	e8 7e 6b ff ff       	call   c000bca0 <File::seek(unsigned long long)>
c0015122:	83 c4 0c             	add    esp,0xc
c0015125:	6a 20                	push   0x20
c0015127:	6a 00                	push   0x0
c0015129:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015130:	51                   	push   ecx
c0015131:	e8 ba b3 fe ff       	call   c00004f0 <memset>
c0015136:	58                   	pop    eax
c0015137:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015139:	8d 54 24 58          	lea    edx,[esp+0x58]
c001513d:	52                   	push   edx
c001513e:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0015145:	51                   	push   ecx
c0015146:	6a 00                	push   0x0
c0015148:	6a 1f                	push   0x1f
c001514a:	53                   	push   ebx
c001514b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001514e:	83 c4 1c             	add    esp,0x1c
c0015151:	6a 09                	push   0x9
c0015153:	68 37 28 02 c0       	push   0xc0022837
c0015158:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001515f:	51                   	push   ecx
c0015160:	e8 1b b2 fe ff       	call   c0000380 <memcmp>
c0015165:	83 c4 10             	add    esp,0x10
c0015168:	85 c0                	test   eax,eax
c001516a:	75 1a                	jne    c0015186 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c001516c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001516f:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0015172:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0015176:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015179:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0015180:	89 d0                	mov    eax,edx
c0015182:	40                   	inc    eax
c0015183:	89 04 24             	mov    DWORD PTR [esp],eax
c0015186:	52                   	push   edx
c0015187:	6a 09                	push   0x9
c0015189:	68 41 28 02 c0       	push   0xc0022841
c001518e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015195:	50                   	push   eax
c0015196:	e8 e5 b1 fe ff       	call   c0000380 <memcmp>
c001519b:	83 c4 10             	add    esp,0x10
c001519e:	85 c0                	test   eax,eax
c00151a0:	75 1a                	jne    c00151bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c00151a2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00151a5:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00151a8:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c00151ac:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00151af:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c00151b6:	89 c8                	mov    eax,ecx
c00151b8:	40                   	inc    eax
c00151b9:	89 04 24             	mov    DWORD PTR [esp],eax
c00151bc:	50                   	push   eax
c00151bd:	50                   	push   eax
c00151be:	68 0d 28 02 c0       	push   0xc002280d
c00151c3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00151ca:	50                   	push   eax
c00151cb:	e8 b0 b5 fe ff       	call   c0000780 <strcmp>
c00151d0:	83 c4 10             	add    esp,0x10
c00151d3:	85 c0                	test   eax,eax
c00151d5:	75 0b                	jne    c00151e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c00151d7:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00151db:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00151de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00151e2:	50                   	push   eax
c00151e3:	50                   	push   eax
c00151e4:	68 15 28 02 c0       	push   0xc0022815
c00151e9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00151f0:	50                   	push   eax
c00151f1:	e8 8a b5 fe ff       	call   c0000780 <strcmp>
c00151f6:	83 c4 10             	add    esp,0x10
c00151f9:	85 c0                	test   eax,eax
c00151fb:	75 0b                	jne    c0015208 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c00151fd:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c0015201:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015204:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015208:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c001520d:	e9 d7 fe ff ff       	jmp    c00150e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c0015212:	50                   	push   eax
c0015213:	31 d2                	xor    edx,edx
c0015215:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015219:	52                   	push   edx
c001521a:	50                   	push   eax
c001521b:	53                   	push   ebx
c001521c:	e8 7f 6a ff ff       	call   c000bca0 <File::seek(unsigned long long)>
c0015221:	58                   	pop    eax
c0015222:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015226:	e8 a8 28 ff ff       	call   c0007ad3 <malloc>
c001522b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001522d:	31 d2                	xor    edx,edx
c001522f:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0015233:	58                   	pop    eax
c0015234:	8d 74 24 54          	lea    esi,[esp+0x54]
c0015238:	56                   	push   esi
c0015239:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001523d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015241:	52                   	push   edx
c0015242:	50                   	push   eax
c0015243:	53                   	push   ebx
c0015244:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015247:	83 c4 14             	add    esp,0x14
c001524a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001524e:	e8 80 28 ff ff       	call   c0007ad3 <malloc>
c0015253:	31 d2                	xor    edx,edx
c0015255:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015259:	83 c4 0c             	add    esp,0xc
c001525c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015260:	52                   	push   edx
c0015261:	50                   	push   eax
c0015262:	53                   	push   ebx
c0015263:	e8 38 6a ff ff       	call   c000bca0 <File::seek(unsigned long long)>
c0015268:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001526a:	31 d2                	xor    edx,edx
c001526c:	89 34 24             	mov    DWORD PTR [esp],esi
c001526f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015273:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015277:	52                   	push   edx
c0015278:	50                   	push   eax
c0015279:	53                   	push   ebx
c001527a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001527d:	83 c4 20             	add    esp,0x20
c0015280:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c0015285:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001528d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015291:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0015295:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0015298:	0f 84 2b 03 00 00    	je     c00155c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c001529e:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c00152a5:	31 d2                	xor    edx,edx
c00152a7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00152ab:	c1 e8 03             	shr    eax,0x3
c00152ae:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00152b2:	51                   	push   ecx
c00152b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00152b7:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00152bb:	52                   	push   edx
c00152bc:	50                   	push   eax
c00152bd:	53                   	push   ebx
c00152be:	e8 dd 69 ff ff       	call   c000bca0 <File::seek(unsigned long long)>
c00152c3:	5e                   	pop    esi
c00152c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00152c8:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00152cf:	e8 ff 27 ff ff       	call   c0007ad3 <malloc>
c00152d4:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00152d6:	31 d2                	xor    edx,edx
c00152d8:	89 c7                	mov    edi,eax
c00152da:	58                   	pop    eax
c00152db:	8d 44 24 58          	lea    eax,[esp+0x58]
c00152df:	50                   	push   eax
c00152e0:	57                   	push   edi
c00152e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152e5:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00152ec:	52                   	push   edx
c00152ed:	50                   	push   eax
c00152ee:	53                   	push   ebx
c00152ef:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00152f2:	83 c4 20             	add    esp,0x20
c00152f5:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00152fd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0015301:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0015305:	0f 8d a5 02 00 00    	jge    c00155b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c001530b:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0015310:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015314:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c0015317:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001531b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001531f:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c0015323:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015327:	c1 e8 08             	shr    eax,0x8
c001532a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001532e:	89 c2                	mov    edx,eax
c0015330:	c1 e2 04             	shl    edx,0x4
c0015333:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c0015337:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c001533a:	85 f6                	test   esi,esi
c001533c:	0f 85 cf 00 00 00    	jne    c0015411 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0015342:	83 ec 0c             	sub    esp,0xc
c0015345:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0015349:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001534d:	03 02                	add    eax,DWORD PTR [edx]
c001534f:	50                   	push   eax
c0015350:	e8 63 f8 ff ff       	call   c0014bb8 <Thr::getAddressOfKernelSymbol(char const*)>
c0015355:	83 c4 10             	add    esp,0x10
c0015358:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001535c:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c0015361:	85 c0                	test   eax,eax
c0015363:	89 c6                	mov    esi,eax
c0015365:	0f 85 a6 00 00 00    	jne    c0015411 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c001536b:	83 ec 0c             	sub    esp,0xc
c001536e:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0015372:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015376:	03 02                	add    eax,DWORD PTR [edx]
c0015378:	50                   	push   eax
c0015379:	e8 76 c4 ff ff       	call   c00117f4 <KeResolveCompatibilitySymbol(char*)>
c001537e:	83 c4 10             	add    esp,0x10
c0015381:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015385:	85 c0                	test   eax,eax
c0015387:	89 c6                	mov    esi,eax
c0015389:	0f 85 82 00 00 00    	jne    c0015411 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c001538f:	50                   	push   eax
c0015390:	50                   	push   eax
c0015391:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015395:	03 02                	add    eax,DWORD PTR [edx]
c0015397:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001539b:	50                   	push   eax
c001539c:	68 4b 28 02 c0       	push   0xc002284b
c00153a1:	e8 64 55 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00153a6:	58                   	pop    eax
c00153a7:	5a                   	pop    edx
c00153a8:	68 65 28 02 c0       	push   0xc0022865
c00153ad:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00153b4:	51                   	push   ecx
c00153b5:	e8 96 b2 fe ff       	call   c0000650 <strcpy>
c00153ba:	59                   	pop    ecx
c00153bb:	58                   	pop    eax
c00153bc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00153c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00153c4:	03 02                	add    eax,DWORD PTR [edx]
c00153c6:	50                   	push   eax
c00153c7:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00153ce:	51                   	push   ecx
c00153cf:	e8 9c b4 fe ff       	call   c0000870 <strcat>
c00153d4:	58                   	pop    eax
c00153d5:	5a                   	pop    edx
c00153d6:	68 fb 28 02 c0       	push   0xc00228fb
c00153db:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00153e2:	51                   	push   ecx
c00153e3:	e8 88 b4 fe ff       	call   c0000870 <strcat>
c00153e8:	83 c4 10             	add    esp,0x10
c00153eb:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00153f0:	0f 84 77 01 00 00    	je     c001556d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00153f6:	83 ec 0c             	sub    esp,0xc
c00153f9:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015400:	51                   	push   ecx
c0015401:	e8 05 c2 ff ff       	call   c001160b <KePanic(char const*)>
c0015406:	83 c4 10             	add    esp,0x10
c0015409:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001540d:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015411:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0015416:	83 f8 01             	cmp    eax,0x1
c0015419:	0f 85 9b 00 00 00    	jne    c00154ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c001541f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015423:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c001542a:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c001542e:	01 d0                	add    eax,edx
c0015430:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0015438:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001543c:	0f 94 c0             	sete   al
c001543f:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0015447:	0f 94 c1             	sete   cl
c001544a:	09 c1                	or     ecx,eax
c001544c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015450:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0015455:	0f b6 c9             	movzx  ecx,cl
c0015458:	8b 00                	mov    eax,DWORD PTR [eax]
c001545a:	74 41                	je     c001549d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c001545c:	8d 14 06             	lea    edx,[esi+eax*1]
c001545f:	85 c9                	test   ecx,ecx
c0015461:	75 15                	jne    c0015478 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c0015463:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0015467:	66 83 f8 0c          	cmp    ax,0xc
c001546b:	76 05                	jbe    c0015472 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001546d:	b8 0c 00 00 00       	mov    eax,0xc
c0015472:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0015476:	76 37                	jbe    c00154af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0015478:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001547d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0015481:	0f 84 e6 00 00 00    	je     c001556d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0015487:	83 ec 0c             	sub    esp,0xc
c001548a:	68 7c 28 02 c0       	push   0xc002287c
c001548f:	e8 77 c1 ff ff       	call   c001160b <KePanic(char const*)>
c0015494:	83 c4 10             	add    esp,0x10
c0015497:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001549b:	eb 12                	jmp    c00154af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c001549d:	01 c2                	add    edx,eax
c001549f:	85 c9                	test   ecx,ecx
c00154a1:	75 0c                	jne    c00154af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00154a3:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00154a7:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c00154ab:	77 02                	ja     c00154af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00154ad:	01 f2                	add    edx,esi
c00154af:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00154b3:	89 10                	mov    DWORD PTR [eax],edx
c00154b5:	e9 ed 00 00 00       	jmp    c00155a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00154ba:	83 f8 02             	cmp    eax,0x2
c00154bd:	0f 85 81 00 00 00    	jne    c0015544 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c00154c3:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00154ca:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c00154ce:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00154d2:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c00154da:	74 21                	je     c00154fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c00154dc:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c00154e4:	74 17                	je     c00154fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c00154e6:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c00154ea:	ba 0a 00 00 00       	mov    edx,0xa
c00154ef:	83 f9 0e             	cmp    ecx,0xe
c00154f2:	77 03                	ja     c00154f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c00154f4:	8d 51 fc             	lea    edx,[ecx-0x4]
c00154f7:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c00154fb:	76 1f                	jbe    c001551c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c00154fd:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0015502:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015506:	74 65                	je     c001556d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0015508:	83 ec 0c             	sub    esp,0xc
c001550b:	68 98 28 02 c0       	push   0xc0022898
c0015510:	e8 f6 c0 ff ff       	call   c001160b <KePanic(char const*)>
c0015515:	83 c4 10             	add    esp,0x10
c0015518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001551c:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0015521:	8b 10                	mov    edx,DWORD PTR [eax]
c0015523:	74 15                	je     c001553a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c0015525:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015529:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0015530:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0015534:	01 d1                	add    ecx,edx
c0015536:	01 ce                	add    esi,ecx
c0015538:	eb 06                	jmp    c0015540 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c001553a:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c001553e:	01 d6                	add    esi,edx
c0015540:	89 30                	mov    DWORD PTR [eax],esi
c0015542:	eb 63                	jmp    c00155a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0015544:	56                   	push   esi
c0015545:	56                   	push   esi
c0015546:	50                   	push   eax
c0015547:	68 b4 28 02 c0       	push   0xc00228b4
c001554c:	e8 b9 53 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015551:	83 c4 10             	add    esp,0x10
c0015554:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0015559:	74 12                	je     c001556d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c001555b:	83 ec 0c             	sub    esp,0xc
c001555e:	68 bf 28 02 c0       	push   0xc00228bf
c0015563:	e8 a3 c0 ff ff       	call   c001160b <KePanic(char const*)>
c0015568:	83 c4 10             	add    esp,0x10
c001556b:	eb 3a                	jmp    c00155a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c001556d:	83 ec 0c             	sub    esp,0xc
c0015570:	53                   	push   ebx
c0015571:	e8 ca 66 ff ff       	call   c000bc40 <File::close()>
c0015576:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015578:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001557b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001557e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015581:	e8 5d 25 ff ff       	call   c0007ae3 <free>
c0015586:	59                   	pop    ecx
c0015587:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001558b:	e8 53 25 ff ff       	call   c0007ae3 <free>
c0015590:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015593:	e8 4b 25 ff ff       	call   c0007ae3 <free>
c0015598:	5b                   	pop    ebx
c0015599:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001559d:	e8 41 25 ff ff       	call   c0007ae3 <free>
c00155a2:	83 c4 10             	add    esp,0x10
c00155a5:	eb 1e                	jmp    c00155c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00155a7:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00155ab:	e9 4d fd ff ff       	jmp    c00152fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c00155b0:	83 ec 0c             	sub    esp,0xc
c00155b3:	57                   	push   edi
c00155b4:	e8 2a 25 ff ff       	call   c0007ae3 <free>
c00155b9:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00155bd:	83 c4 10             	add    esp,0x10
c00155c0:	e9 cc fc ff ff       	jmp    c0015291 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c00155c5:	31 c0                	xor    eax,eax
c00155c7:	eb 32                	jmp    c00155fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c00155c9:	83 ec 0c             	sub    esp,0xc
c00155cc:	53                   	push   ebx
c00155cd:	e8 6e 66 ff ff       	call   c000bc40 <File::close()>
c00155d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00155d4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00155d7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00155da:	58                   	pop    eax
c00155db:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00155df:	e8 ff 24 ff ff       	call   c0007ae3 <free>
c00155e4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00155e7:	e8 f7 24 ff ff       	call   c0007ae3 <free>
c00155ec:	5a                   	pop    edx
c00155ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00155f1:	e8 ed 24 ff ff       	call   c0007ae3 <free>
c00155f6:	83 c4 10             	add    esp,0x10
c00155f9:	b0 01                	mov    al,0x1
c00155fb:	81 c4 5c 03 00 00    	add    esp,0x35c
c0015601:	5b                   	pop    ebx
c0015602:	5e                   	pop    esi
c0015603:	5f                   	pop    edi
c0015604:	5d                   	pop    ebp
c0015605:	c3                   	ret    

c0015606 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0015606:	56                   	push   esi
c0015607:	31 d2                	xor    edx,edx
c0015609:	53                   	push   ebx
c001560a:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c0015610:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015614:	39 d3                	cmp    ebx,edx
c0015616:	7e 1b                	jle    c0015633 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0015618:	8b 04 95 20 c1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3ee0]
c001561f:	39 c8                	cmp    eax,ecx
c0015621:	77 0d                	ja     c0015630 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0015623:	8b 34 95 20 bf 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd40e0]
c001562a:	01 c6                	add    esi,eax
c001562c:	39 ce                	cmp    esi,ecx
c001562e:	77 05                	ja     c0015635 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0015630:	42                   	inc    edx
c0015631:	eb e1                	jmp    c0015614 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0015633:	31 c0                	xor    eax,eax
c0015635:	5b                   	pop    ebx
c0015636:	5e                   	pop    esi
c0015637:	c3                   	ret    

c0015638 <Thr::getDriverNameFromAddress(unsigned long)>:
c0015638:	53                   	push   ebx
c0015639:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c001563f:	31 c0                	xor    eax,eax
c0015641:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015645:	39 c3                	cmp    ebx,eax
c0015647:	7e 22                	jle    c001566b <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0015649:	8b 14 85 20 c1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3ee0]
c0015650:	39 ca                	cmp    edx,ecx
c0015652:	77 14                	ja     c0015668 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015654:	03 14 85 20 bf 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd40e0]
c001565b:	39 ca                	cmp    edx,ecx
c001565d:	76 09                	jbe    c0015668 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001565f:	8b 04 85 20 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3ce0]
c0015666:	eb 05                	jmp    c001566d <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0015668:	40                   	inc    eax
c0015669:	eb da                	jmp    c0015645 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001566b:	31 c0                	xor    eax,eax
c001566d:	5b                   	pop    ebx
c001566e:	c3                   	ret    

c001566f <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001566f:	53                   	push   ebx
c0015670:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015674:	53                   	push   ebx
c0015675:	e8 8c ff ff ff       	call   c0015606 <Thr::getDriverBaseFromAddress(unsigned long)>
c001567a:	5a                   	pop    edx
c001567b:	31 d2                	xor    edx,edx
c001567d:	85 c0                	test   eax,eax
c001567f:	74 04                	je     c0015685 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0015681:	89 da                	mov    edx,ebx
c0015683:	29 c2                	sub    edx,eax
c0015685:	5b                   	pop    ebx
c0015686:	89 d0                	mov    eax,edx
c0015688:	c3                   	ret    

c0015689 <Thr::loadDLL(char const*, bool)>:
c0015689:	55                   	push   ebp
c001568a:	57                   	push   edi
c001568b:	56                   	push   esi
c001568c:	53                   	push   ebx
c001568d:	81 ec 34 01 00 00    	sub    esp,0x134
c0015693:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001569a:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00156a1:	56                   	push   esi
c00156a2:	68 d7 28 02 c0       	push   0xc00228d7
c00156a7:	e8 5e 52 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00156ac:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00156b3:	e8 1b 24 ff ff       	call   c0007ad3 <malloc>
c00156b8:	83 c4 0c             	add    esp,0xc
c00156bb:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00156c1:	56                   	push   esi
c00156c2:	50                   	push   eax
c00156c3:	89 c3                	mov    ebx,eax
c00156c5:	e8 fa 64 ff ff       	call   c000bbc4 <File::File(char const*, Process*)>
c00156ca:	83 c4 10             	add    esp,0x10
c00156cd:	85 db                	test   ebx,ebx
c00156cf:	75 3c                	jne    c001570d <Thr::loadDLL(char const*, bool)+0x84>
c00156d1:	89 e8                	mov    eax,ebp
c00156d3:	84 c0                	test   al,al
c00156d5:	0f 84 e1 01 00 00    	je     c00158bc <Thr::loadDLL(char const*, bool)+0x233>
c00156db:	50                   	push   eax
c00156dc:	50                   	push   eax
c00156dd:	68 e8 28 02 c0       	push   0xc00228e8
c00156e2:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c00156e6:	57                   	push   edi
c00156e7:	e8 64 af fe ff       	call   c0000650 <strcpy>
c00156ec:	58                   	pop    eax
c00156ed:	5a                   	pop    edx
c00156ee:	56                   	push   esi
c00156ef:	57                   	push   edi
c00156f0:	e8 7b b1 fe ff       	call   c0000870 <strcat>
c00156f5:	59                   	pop    ecx
c00156f6:	58                   	pop    eax
c00156f7:	68 fb 28 02 c0       	push   0xc00228fb
c00156fc:	57                   	push   edi
c00156fd:	e8 6e b1 fe ff       	call   c0000870 <strcat>
c0015702:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015705:	e8 01 bf ff ff       	call   c001160b <KePanic(char const*)>
c001570a:	83 c4 10             	add    esp,0x10
c001570d:	50                   	push   eax
c001570e:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0015712:	50                   	push   eax
c0015713:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015717:	50                   	push   eax
c0015718:	53                   	push   ebx
c0015719:	e8 c6 67 ff ff       	call   c000bee4 <File::stat(unsigned long long*, bool*)>
c001571e:	83 c4 10             	add    esp,0x10
c0015721:	85 db                	test   ebx,ebx
c0015723:	74 0c                	je     c0015731 <Thr::loadDLL(char const*, bool)+0xa8>
c0015725:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015727:	83 ec 0c             	sub    esp,0xc
c001572a:	53                   	push   ebx
c001572b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001572e:	83 c4 10             	add    esp,0x10
c0015731:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0015736:	75 0a                	jne    c0015742 <Thr::loadDLL(char const*, bool)+0xb9>
c0015738:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001573c:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0015740:	75 3e                	jne    c0015780 <Thr::loadDLL(char const*, bool)+0xf7>
c0015742:	89 e8                	mov    eax,ebp
c0015744:	31 db                	xor    ebx,ebx
c0015746:	84 c0                	test   al,al
c0015748:	0f 84 6e 01 00 00    	je     c00158bc <Thr::loadDLL(char const*, bool)+0x233>
c001574e:	50                   	push   eax
c001574f:	50                   	push   eax
c0015750:	68 e8 28 02 c0       	push   0xc00228e8
c0015755:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0015759:	53                   	push   ebx
c001575a:	e8 f1 ae fe ff       	call   c0000650 <strcpy>
c001575f:	58                   	pop    eax
c0015760:	5a                   	pop    edx
c0015761:	56                   	push   esi
c0015762:	53                   	push   ebx
c0015763:	e8 08 b1 fe ff       	call   c0000870 <strcat>
c0015768:	59                   	pop    ecx
c0015769:	5f                   	pop    edi
c001576a:	68 fb 28 02 c0       	push   0xc00228fb
c001576f:	53                   	push   ebx
c0015770:	e8 fb b0 fe ff       	call   c0000870 <strcat>
c0015775:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015778:	e8 8e be ff ff       	call   c001160b <KePanic(char const*)>
c001577d:	83 c4 10             	add    esp,0x10
c0015780:	53                   	push   ebx
c0015781:	6a 03                	push   0x3
c0015783:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015787:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001578b:	05 ff 0f 00 00       	add    eax,0xfff
c0015790:	83 d2 00             	adc    edx,0x0
c0015793:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015797:	50                   	push   eax
c0015798:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001579e:	e8 63 46 ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c00157a3:	89 c3                	mov    ebx,eax
c00157a5:	58                   	pop    eax
c00157a6:	5a                   	pop    edx
c00157a7:	53                   	push   ebx
c00157a8:	68 32 0e 02 c0       	push   0xc0020e32
c00157ad:	e8 58 51 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00157b2:	89 34 24             	mov    DWORD PTR [esp],esi
c00157b5:	e8 c6 ad fe ff       	call   c0000580 <strlen>
c00157ba:	8b 3d 00 bf 02 c0    	mov    edi,DWORD PTR ds:0xc002bf00
c00157c0:	40                   	inc    eax
c00157c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00157c4:	e8 0a 23 ff ff       	call   c0007ad3 <malloc>
c00157c9:	59                   	pop    ecx
c00157ca:	89 04 bd 20 c3 02 c0 	mov    DWORD PTR [edi*4-0x3ffd3ce0],eax
c00157d1:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c00157d6:	5f                   	pop    edi
c00157d7:	56                   	push   esi
c00157d8:	ff 34 85 20 c3 02 c0 	push   DWORD PTR [eax*4-0x3ffd3ce0]
c00157df:	e8 6c ae fe ff       	call   c0000650 <strcpy>
c00157e4:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c00157e9:	89 1c 85 20 c1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3ee0],ebx
c00157f0:	8d 50 01             	lea    edx,[eax+0x1]
c00157f3:	89 15 00 bf 02 c0    	mov    DWORD PTR ds:0xc002bf00,edx
c00157f9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00157fd:	83 c4 0c             	add    esp,0xc
c0015800:	6a 01                	push   0x1
c0015802:	53                   	push   ebx
c0015803:	56                   	push   esi
c0015804:	89 14 85 20 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd40e0],edx
c001580b:	e8 b5 f6 ff ff       	call   c0014ec5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0015810:	83 c4 10             	add    esp,0x10
c0015813:	89 c7                	mov    edi,eax
c0015815:	89 f8                	mov    eax,edi
c0015817:	83 f0 01             	xor    eax,0x1
c001581a:	84 c0                	test   al,al
c001581c:	74 18                	je     c0015836 <Thr::loadDLL(char const*, bool)+0x1ad>
c001581e:	89 e8                	mov    eax,ebp
c0015820:	84 c0                	test   al,al
c0015822:	74 12                	je     c0015836 <Thr::loadDLL(char const*, bool)+0x1ad>
c0015824:	83 ec 0c             	sub    esp,0xc
c0015827:	68 fd 28 02 c0       	push   0xc00228fd
c001582c:	e8 da bd ff ff       	call   c001160b <KePanic(char const*)>
c0015831:	83 c4 10             	add    esp,0x10
c0015834:	eb 06                	jmp    c001583c <Thr::loadDLL(char const*, bool)+0x1b3>
c0015836:	89 f8                	mov    eax,edi
c0015838:	84 c0                	test   al,al
c001583a:	75 10                	jne    c001584c <Thr::loadDLL(char const*, bool)+0x1c3>
c001583c:	83 ec 0c             	sub    esp,0xc
c001583f:	68 1c 29 02 c0       	push   0xc002291c
c0015844:	e8 c2 bd ff ff       	call   c001160b <KePanic(char const*)>
c0015849:	83 c4 10             	add    esp,0x10
c001584c:	31 f6                	xor    esi,esi
c001584e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015852:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015856:	05 ff 0f 00 00       	add    eax,0xfff
c001585b:	83 d2 00             	adc    edx,0x0
c001585e:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015862:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015866:	c1 ea 0c             	shr    edx,0xc
c0015869:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001586d:	ba 00 00 00 00       	mov    edx,0x0
c0015872:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0015876:	89 d0                	mov    eax,edx
c0015878:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001587c:	73 32                	jae    c00158b0 <Thr::loadDLL(char const*, bool)+0x227>
c001587e:	50                   	push   eax
c001587f:	50                   	push   eax
c0015880:	89 f0                	mov    eax,esi
c0015882:	c1 e0 0c             	shl    eax,0xc
c0015885:	01 d8                	add    eax,ebx
c0015887:	50                   	push   eax
c0015888:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001588e:	e8 57 40 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0015893:	83 c4 10             	add    esp,0x10
c0015896:	8b 00                	mov    eax,DWORD PTR [eax]
c0015898:	a8 60                	test   al,0x60
c001589a:	75 11                	jne    c00158ad <Thr::loadDLL(char const*, bool)+0x224>
c001589c:	83 ec 0c             	sub    esp,0xc
c001589f:	25 00 f0 ff ff       	and    eax,0xfffff000
c00158a4:	50                   	push   eax
c00158a5:	e8 cf 24 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c00158aa:	83 c4 10             	add    esp,0x10
c00158ad:	46                   	inc    esi
c00158ae:	eb 9e                	jmp    c001584e <Thr::loadDLL(char const*, bool)+0x1c5>
c00158b0:	89 f8                	mov    eax,edi
c00158b2:	84 c0                	test   al,al
c00158b4:	b8 00 00 00 00       	mov    eax,0x0
c00158b9:	0f 44 d8             	cmove  ebx,eax
c00158bc:	81 c4 2c 01 00 00    	add    esp,0x12c
c00158c2:	89 d8                	mov    eax,ebx
c00158c4:	5b                   	pop    ebx
c00158c5:	5e                   	pop    esi
c00158c6:	5f                   	pop    edi
c00158c7:	5d                   	pop    ebp
c00158c8:	c3                   	ret    

c00158c9 <Thr::executeDLL(unsigned long, void*)>:
c00158c9:	56                   	push   esi
c00158ca:	53                   	push   ebx
c00158cb:	52                   	push   edx
c00158cc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00158d0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00158d4:	85 db                	test   ebx,ebx
c00158d6:	75 10                	jne    c00158e8 <Thr::executeDLL(unsigned long, void*)+0x1f>
c00158d8:	83 ec 0c             	sub    esp,0xc
c00158db:	68 38 29 02 c0       	push   0xc0022938
c00158e0:	e8 26 bd ff ff       	call   c001160b <KePanic(char const*)>
c00158e5:	83 c4 10             	add    esp,0x10
c00158e8:	50                   	push   eax
c00158e9:	50                   	push   eax
c00158ea:	53                   	push   ebx
c00158eb:	68 62 29 02 c0       	push   0xc0022962
c00158f0:	e8 15 50 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00158f5:	89 d8                	mov    eax,ebx
c00158f7:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00158fb:	83 c4 14             	add    esp,0x14
c00158fe:	5b                   	pop    ebx
c00158ff:	5e                   	pop    esi
c0015900:	ff e0                	jmp    eax
c0015902:	66 90                	xchg   ax,ax

c0015904 <userModeEntryPoint(void*)>:
c0015904:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0015909:	83 e8 01             	sub    eax,0x1
c001590c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0015911:	75 01                	jne    c0015914 <userModeEntryPoint(void*)+0x10>
c0015913:	fb                   	sti    
c0015914:	fb                   	sti    
c0015915:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001591a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001591d:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0015923:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015927:	e9 13 a9 fe ff       	jmp    c000023f <goToUsermode>

c001592c <changeTSS>:
c001592c:	83 ec 14             	sub    esp,0x14
c001592f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015934:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015937:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001593c:	c1 e2 15             	shl    edx,0x15
c001593f:	29 d0                	sub    eax,edx
c0015941:	50                   	push   eax
c0015942:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0015947:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001594d:	05 7c 11 00 00       	add    eax,0x117c
c0015952:	50                   	push   eax
c0015953:	e8 e4 35 ff ff       	call   c0008f3c <TSS::setESP(unsigned long)>
c0015958:	83 c4 1c             	add    esp,0x1c
c001595b:	c3                   	ret    

c001595c <switchToThread(ThreadControlBlock*)>:
c001595c:	57                   	push   edi
c001595d:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0015963:	56                   	push   esi
c0015964:	53                   	push   ebx
c0015965:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015969:	85 c9                	test   ecx,ecx
c001596b:	0f 85 8b 00 00 00    	jne    c00159fc <switchToThread(ThreadControlBlock*)+0xa0>
c0015971:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0015975:	81 fa ff 00 00 00    	cmp    edx,0xff
c001597b:	74 7b                	je     c00159f8 <switchToThread(ThreadControlBlock*)+0x9c>
c001597d:	b8 00 04 00 00       	mov    eax,0x400
c0015982:	29 d0                	sub    eax,edx
c0015984:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0015987:	d1 f8                	sar    eax,1
c0015989:	01 d0                	add    eax,edx
c001598b:	90                   	nop
c001598c:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c001598f:	e8 04 28 00 00       	call   c0018198 <HalQueryPerformanceCounter()>
c0015994:	a3 08 c7 02 c0       	mov    ds:0xc002c708,eax
c0015999:	89 c6                	mov    esi,eax
c001599b:	89 d7                	mov    edi,edx
c001599d:	2b 35 f8 c6 02 c0    	sub    esi,DWORD PTR ds:0xc002c6f8
c00159a3:	a3 f8 c6 02 c0       	mov    ds:0xc002c6f8,eax
c00159a8:	1b 3d fc c6 02 c0    	sbb    edi,DWORD PTR ds:0xc002c6fc
c00159ae:	89 35 00 c7 02 c0    	mov    DWORD PTR ds:0xc002c700,esi
c00159b4:	89 15 0c c7 02 c0    	mov    DWORD PTR ds:0xc002c70c,edx
c00159ba:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00159c0:	89 15 fc c6 02 c0    	mov    DWORD PTR ds:0xc002c6fc,edx
c00159c6:	89 3d 04 c7 02 c0    	mov    DWORD PTR ds:0xc002c704,edi
c00159cc:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00159cf:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00159d2:	01 c6                	add    esi,eax
c00159d4:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00159d7:	11 d7                	adc    edi,edx
c00159d9:	83 ec 0c             	sub    esp,0xc
c00159dc:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00159df:	53                   	push   ebx
c00159e0:	e8 92 a8 fe ff       	call   c0000277 <switchToThreadASM>
c00159e5:	0f 20 c0             	mov    eax,cr0
c00159e8:	83 c8 08             	or     eax,0x8
c00159eb:	0f 22 c0             	mov    cr0,eax
c00159ee:	83 c4 10             	add    esp,0x10
c00159f1:	5b                   	pop    ebx
c00159f2:	5e                   	pop    esi
c00159f3:	5f                   	pop    edi
c00159f4:	c3                   	ret    
c00159f5:	8d 76 00             	lea    esi,[esi+0x0]
c00159f8:	31 c0                	xor    eax,eax
c00159fa:	eb 90                	jmp    c001598c <switchToThread(ThreadControlBlock*)+0x30>
c00159fc:	5b                   	pop    ebx
c00159fd:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c0015a07:	5e                   	pop    esi
c0015a08:	5f                   	pop    edi
c0015a09:	c3                   	ret    
c0015a0a:	66 90                	xchg   ax,ax

c0015a0c <Process::addArgs(char**)>:
c0015a0c:	57                   	push   edi
c0015a0d:	56                   	push   esi
c0015a0e:	53                   	push   ebx
c0015a0f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015a13:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0015a17:	85 f6                	test   esi,esi
c0015a19:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c0015a23:	74 4f                	je     c0015a74 <Process::addArgs(char**)+0x68>
c0015a25:	8b 06                	mov    eax,DWORD PTR [esi]
c0015a27:	85 c0                	test   eax,eax
c0015a29:	74 49                	je     c0015a74 <Process::addArgs(char**)+0x68>
c0015a2b:	31 db                	xor    ebx,ebx
c0015a2d:	8d 76 00             	lea    esi,[esi+0x0]
c0015a30:	83 ec 0c             	sub    esp,0xc
c0015a33:	50                   	push   eax
c0015a34:	e8 47 ab fe ff       	call   c0000580 <strlen>
c0015a39:	83 c0 01             	add    eax,0x1
c0015a3c:	89 04 24             	mov    DWORD PTR [esp],eax
c0015a3f:	e8 8f 20 ff ff       	call   c0007ad3 <malloc>
c0015a44:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c0015a4b:	5a                   	pop    edx
c0015a4c:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c0015a4f:	83 c3 01             	add    ebx,0x1
c0015a52:	59                   	pop    ecx
c0015a53:	52                   	push   edx
c0015a54:	50                   	push   eax
c0015a55:	e8 f6 ab fe ff       	call   c0000650 <strcpy>
c0015a5a:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c0015a60:	83 c4 10             	add    esp,0x10
c0015a63:	83 c1 01             	add    ecx,0x1
c0015a66:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c0015a6c:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0015a6f:	85 c0                	test   eax,eax
c0015a71:	75 bd                	jne    c0015a30 <Process::addArgs(char**)+0x24>
c0015a73:	90                   	nop
c0015a74:	5b                   	pop    ebx
c0015a75:	5e                   	pop    esi
c0015a76:	5f                   	pop    edi
c0015a77:	c3                   	ret    

c0015a78 <Process::Process(char const*, Process*, char**)>:
c0015a78:	56                   	push   esi
c0015a79:	53                   	push   ebx
c0015a7a:	83 ec 14             	sub    esp,0x14
c0015a7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a81:	05 0c 02 00 00       	add    eax,0x20c
c0015a86:	bb 07 00 00 00       	mov    ebx,0x7
c0015a8b:	89 c6                	mov    esi,eax
c0015a8d:	8d 76 00             	lea    esi,[esi+0x0]
c0015a90:	85 db                	test   ebx,ebx
c0015a92:	78 14                	js     c0015aa8 <Process::Process(char const*, Process*, char**)+0x30>
c0015a94:	83 ec 0c             	sub    esp,0xc
c0015a97:	56                   	push   esi
c0015a98:	e8 2b a6 00 00       	call   c00200c8 <ThreadControlBlock::ThreadControlBlock()>
c0015a9d:	83 c4 10             	add    esp,0x10
c0015aa0:	83 c6 5f             	add    esi,0x5f
c0015aa3:	83 eb 01             	sub    ebx,0x1
c0015aa6:	eb e8                	jmp    c0015a90 <Process::Process(char const*, Process*, char**)+0x18>
c0015aa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015aac:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ab7:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015abe:	83 ec 0c             	sub    esp,0xc
c0015ac1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015ac5:	e8 36 b9 ff ff       	call   c0011400 <KeNewProcessEnv(Process*)>
c0015aca:	83 c4 10             	add    esp,0x10
c0015acd:	89 c2                	mov    edx,eax
c0015acf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ad3:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015ad9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015add:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015ae6:	a1 80 3f 02 c0       	mov    eax,ds:0xc0023f80
c0015aeb:	8d 50 01             	lea    edx,[eax+0x1]
c0015aee:	89 15 80 3f 02 c0    	mov    DWORD PTR ds:0xc0023f80,edx
c0015af4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015af8:	89 02                	mov    DWORD PTR [edx],eax
c0015afa:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0015b02:	83 ec 0c             	sub    esp,0xc
c0015b05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015b09:	e8 c5 1f ff ff       	call   c0007ad3 <malloc>
c0015b0e:	83 c4 10             	add    esp,0x10
c0015b11:	89 c3                	mov    ebx,eax
c0015b13:	83 ec 08             	sub    esp,0x8
c0015b16:	6a 00                	push   0x0
c0015b18:	53                   	push   ebx
c0015b19:	e8 34 45 ff ff       	call   c000a052 <VAS::VAS(bool)>
c0015b1e:	83 c4 10             	add    esp,0x10
c0015b21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b25:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015b2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b2f:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015b39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b3d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015b41:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015b47:	e8 d6 be ff ff       	call   c0011a22 <KeInitSignals()>
c0015b4c:	89 c2                	mov    edx,eax
c0015b4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b52:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015b58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b5c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015b62:	85 c0                	test   eax,eax
c0015b64:	74 42                	je     c0015ba8 <Process::Process(char const*, Process*, char**)+0x130>
c0015b66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b6a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015b70:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015b76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b7a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b84:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015b8a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b94:	05 0c 01 00 00       	add    eax,0x10c
c0015b99:	83 ec 08             	sub    esp,0x8
c0015b9c:	52                   	push   edx
c0015b9d:	50                   	push   eax
c0015b9e:	e8 ad aa fe ff       	call   c0000650 <strcpy>
c0015ba3:	83 c4 10             	add    esp,0x10
c0015ba6:	eb 64                	jmp    c0015c0c <Process::Process(char const*, Process*, char**)+0x194>
c0015ba8:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015bb0:	83 ec 0c             	sub    esp,0xc
c0015bb3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015bb7:	e8 17 1f ff ff       	call   c0007ad3 <malloc>
c0015bbc:	83 c4 10             	add    esp,0x10
c0015bbf:	89 c3                	mov    ebx,eax
c0015bc1:	83 ec 08             	sub    esp,0x8
c0015bc4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015bc8:	53                   	push   ebx
c0015bc9:	e8 9e 30 ff ff       	call   c0008c6c <VgaText::VgaText(char const*)>
c0015bce:	83 c4 10             	add    esp,0x10
c0015bd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bd5:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015bdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bdf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015be5:	83 ec 0c             	sub    esp,0xc
c0015be8:	50                   	push   eax
c0015be9:	e8 2c 29 ff ff       	call   c000851a <addToTerminalCycle(VgaText*)>
c0015bee:	83 c4 10             	add    esp,0x10
c0015bf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bf5:	05 0c 01 00 00       	add    eax,0x10c
c0015bfa:	83 ec 08             	sub    esp,0x8
c0015bfd:	68 81 29 02 c0       	push   0xc0022981
c0015c02:	50                   	push   eax
c0015c03:	e8 48 aa fe ff       	call   c0000650 <strcpy>
c0015c08:	83 c4 10             	add    esp,0x10
c0015c0b:	90                   	nop
c0015c0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c10:	83 c0 0c             	add    eax,0xc
c0015c13:	83 ec 08             	sub    esp,0x8
c0015c16:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c1a:	50                   	push   eax
c0015c1b:	e8 30 aa fe ff       	call   c0000650 <strcpy>
c0015c20:	83 c4 10             	add    esp,0x10
c0015c23:	83 ec 08             	sub    esp,0x8
c0015c26:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015c2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c2e:	e8 d9 fd ff ff       	call   c0015a0c <Process::addArgs(char**)>
c0015c33:	83 c4 10             	add    esp,0x10
c0015c36:	83 ec 08             	sub    esp,0x8
c0015c39:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c3d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c41:	e8 40 ed ff ff       	call   c0014986 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015c46:	83 c4 10             	add    esp,0x10
c0015c49:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015c4d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015c51:	83 f0 01             	xor    eax,0x1
c0015c54:	88 c2                	mov    dl,al
c0015c56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c5a:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015c60:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015c65:	83 ec 04             	sub    esp,0x4
c0015c68:	50                   	push   eax
c0015c69:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c6d:	68 d8 29 02 c0       	push   0xc00229d8
c0015c72:	e8 93 4c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015c77:	83 c4 10             	add    esp,0x10
c0015c7a:	90                   	nop
c0015c7b:	83 c4 14             	add    esp,0x14
c0015c7e:	5b                   	pop    ebx
c0015c7f:	5e                   	pop    esi
c0015c80:	c3                   	ret    
c0015c81:	90                   	nop
c0015c82:	66 90                	xchg   ax,ax

c0015c84 <Process::Process(bool, char const*, Process*, char**)>:
c0015c84:	56                   	push   esi
c0015c85:	53                   	push   ebx
c0015c86:	83 ec 24             	sub    esp,0x24
c0015c89:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015c8d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015c91:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c95:	05 0c 02 00 00       	add    eax,0x20c
c0015c9a:	bb 07 00 00 00       	mov    ebx,0x7
c0015c9f:	89 c6                	mov    esi,eax
c0015ca1:	8d 76 00             	lea    esi,[esi+0x0]
c0015ca4:	85 db                	test   ebx,ebx
c0015ca6:	78 14                	js     c0015cbc <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015ca8:	83 ec 0c             	sub    esp,0xc
c0015cab:	56                   	push   esi
c0015cac:	e8 17 a4 00 00       	call   c00200c8 <ThreadControlBlock::ThreadControlBlock()>
c0015cb1:	83 c4 10             	add    esp,0x10
c0015cb4:	83 c6 5f             	add    esi,0x5f
c0015cb7:	83 eb 01             	sub    ebx,0x1
c0015cba:	eb e8                	jmp    c0015ca4 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015cbc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cc0:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015cc7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ccb:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015cd2:	83 ec 0c             	sub    esp,0xc
c0015cd5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015cd9:	e8 22 b7 ff ff       	call   c0011400 <KeNewProcessEnv(Process*)>
c0015cde:	83 c4 10             	add    esp,0x10
c0015ce1:	89 c2                	mov    edx,eax
c0015ce3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ce7:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015ced:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cf1:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015cfa:	a1 80 3f 02 c0       	mov    eax,ds:0xc0023f80
c0015cff:	8d 50 01             	lea    edx,[eax+0x1]
c0015d02:	89 15 80 3f 02 c0    	mov    DWORD PTR ds:0xc0023f80,edx
c0015d08:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015d0c:	89 02                	mov    DWORD PTR [edx],eax
c0015d0e:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0015d16:	83 ec 0c             	sub    esp,0xc
c0015d19:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015d1d:	e8 b1 1d ff ff       	call   c0007ad3 <malloc>
c0015d22:	83 c4 10             	add    esp,0x10
c0015d25:	89 c3                	mov    ebx,eax
c0015d27:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015d2c:	83 ec 08             	sub    esp,0x8
c0015d2f:	50                   	push   eax
c0015d30:	53                   	push   ebx
c0015d31:	e8 1c 43 ff ff       	call   c000a052 <VAS::VAS(bool)>
c0015d36:	83 c4 10             	add    esp,0x10
c0015d39:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d3d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015d43:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d47:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015d51:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d55:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015d59:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015d5f:	e8 be bc ff ff       	call   c0011a22 <KeInitSignals()>
c0015d64:	89 c2                	mov    edx,eax
c0015d66:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d6a:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015d70:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d74:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015d7a:	85 c0                	test   eax,eax
c0015d7c:	74 42                	je     c0015dc0 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015d7e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d82:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015d88:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015d8e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d92:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015d98:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d9c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015da2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015da8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dac:	05 0c 01 00 00       	add    eax,0x10c
c0015db1:	83 ec 08             	sub    esp,0x8
c0015db4:	52                   	push   edx
c0015db5:	50                   	push   eax
c0015db6:	e8 95 a8 fe ff       	call   c0000650 <strcpy>
c0015dbb:	83 c4 10             	add    esp,0x10
c0015dbe:	eb 64                	jmp    c0015e24 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015dc0:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015dc8:	83 ec 0c             	sub    esp,0xc
c0015dcb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015dcf:	e8 ff 1c ff ff       	call   c0007ad3 <malloc>
c0015dd4:	83 c4 10             	add    esp,0x10
c0015dd7:	89 c3                	mov    ebx,eax
c0015dd9:	83 ec 08             	sub    esp,0x8
c0015ddc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015de0:	53                   	push   ebx
c0015de1:	e8 86 2e ff ff       	call   c0008c6c <VgaText::VgaText(char const*)>
c0015de6:	83 c4 10             	add    esp,0x10
c0015de9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ded:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015df3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015df7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015dfd:	83 ec 0c             	sub    esp,0xc
c0015e00:	50                   	push   eax
c0015e01:	e8 14 27 ff ff       	call   c000851a <addToTerminalCycle(VgaText*)>
c0015e06:	83 c4 10             	add    esp,0x10
c0015e09:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e0d:	05 0c 01 00 00       	add    eax,0x10c
c0015e12:	83 ec 08             	sub    esp,0x8
c0015e15:	68 81 29 02 c0       	push   0xc0022981
c0015e1a:	50                   	push   eax
c0015e1b:	e8 30 a8 fe ff       	call   c0000650 <strcpy>
c0015e20:	83 c4 10             	add    esp,0x10
c0015e23:	90                   	nop
c0015e24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e28:	83 c0 0c             	add    eax,0xc
c0015e2b:	83 ec 08             	sub    esp,0x8
c0015e2e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015e32:	50                   	push   eax
c0015e33:	e8 18 a8 fe ff       	call   c0000650 <strcpy>
c0015e38:	83 c4 10             	add    esp,0x10
c0015e3b:	83 ec 08             	sub    esp,0x8
c0015e3e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015e42:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015e46:	e8 c1 fb ff ff       	call   c0015a0c <Process::addArgs(char**)>
c0015e4b:	83 c4 10             	add    esp,0x10
c0015e4e:	90                   	nop
c0015e4f:	83 c4 24             	add    esp,0x24
c0015e52:	5b                   	pop    ebx
c0015e53:	5e                   	pop    esi
c0015e54:	c3                   	ret    
c0015e55:	8d 76 00             	lea    esi,[esi+0x0]

c0015e58 <taskStartupFunction>:
c0015e58:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e5d:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015e60:	c3                   	ret    
c0015e61:	90                   	nop
c0015e62:	66 90                	xchg   ax,ax

c0015e64 <Semaphore::Semaphore(int)>:
c0015e64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e68:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015e6c:	89 10                	mov    DWORD PTR [eax],edx
c0015e6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e72:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0015e79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e7d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015e84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e88:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015e8f:	90                   	nop
c0015e90:	c3                   	ret    
c0015e91:	90                   	nop
c0015e92:	66 90                	xchg   ax,ax

c0015e94 <Mutex::Mutex()>:
c0015e94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e98:	6a 01                	push   0x1
c0015e9a:	50                   	push   eax
c0015e9b:	e8 c4 ff ff ff       	call   c0015e64 <Semaphore::Semaphore(int)>
c0015ea0:	83 c4 08             	add    esp,0x8
c0015ea3:	90                   	nop
c0015ea4:	c3                   	ret    
c0015ea5:	90                   	nop
c0015ea6:	66 90                	xchg   ax,ax

c0015ea8 <Process::createThread(void (*)(void*), void*, int)>:
c0015ea8:	57                   	push   edi
c0015ea9:	31 c9                	xor    ecx,ecx
c0015eab:	56                   	push   esi
c0015eac:	53                   	push   ebx
c0015ead:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015eb1:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015eb8:	89 f2                	mov    edx,esi
c0015eba:	66 90                	xchg   ax,ax
c0015ebc:	0f b7 c2             	movzx  eax,dx
c0015ebf:	80 e2 01             	and    dl,0x1
c0015ec2:	74 14                	je     c0015ed8 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015ec4:	d1 f8                	sar    eax,1
c0015ec6:	83 c1 01             	add    ecx,0x1
c0015ec9:	83 f9 10             	cmp    ecx,0x10
c0015ecc:	89 c2                	mov    edx,eax
c0015ece:	75 ec                	jne    c0015ebc <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015ed0:	31 db                	xor    ebx,ebx
c0015ed2:	89 d8                	mov    eax,ebx
c0015ed4:	5b                   	pop    ebx
c0015ed5:	5e                   	pop    esi
c0015ed6:	5f                   	pop    edi
c0015ed7:	c3                   	ret    
c0015ed8:	b8 01 00 00 00       	mov    eax,0x1
c0015edd:	d3 e0                	shl    eax,cl
c0015edf:	09 c6                	or     esi,eax
c0015ee1:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015ee8:	8d 04 49             	lea    eax,[ecx+ecx*2]
c0015eeb:	c1 e0 05             	shl    eax,0x5
c0015eee:	29 c8                	sub    eax,ecx
c0015ef0:	01 d8                	add    eax,ebx
c0015ef2:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015ef9:	75 0d                	jne    c0015f08 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015efb:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015f05:	8d 76 00             	lea    esi,[esi+0x0]
c0015f08:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015f0e:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0015f11:	83 ec 0c             	sub    esp,0xc
c0015f14:	c1 e6 05             	shl    esi,0x5
c0015f17:	29 ce                	sub    esi,ecx
c0015f19:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015f1c:	8d 04 33             	lea    eax,[ebx+esi*1]
c0015f1f:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015f25:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0015f2b:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015f31:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0015f38:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015f3e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015f42:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015f48:	89 ca                	mov    edx,ecx
c0015f4a:	f7 da                	neg    edx
c0015f4c:	c1 e2 15             	shl    edx,0x15
c0015f4f:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015f55:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015f5b:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0015f5f:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015f69:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015f6f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015f73:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015f79:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015f83:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015f8d:	68 00 01 00 00       	push   0x100
c0015f92:	e8 3c 1b ff ff       	call   c0007ad3 <malloc>
c0015f97:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0015f9a:	58                   	pop    eax
c0015f9b:	5a                   	pop    edx
c0015f9c:	53                   	push   ebx
c0015f9d:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015fa2:	e8 b9 9e 00 00       	call   c001fe60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015fa7:	83 c4 10             	add    esp,0x10
c0015faa:	89 d8                	mov    eax,ebx
c0015fac:	5b                   	pop    ebx
c0015fad:	5e                   	pop    esi
c0015fae:	5f                   	pop    edi
c0015faf:	c3                   	ret    

c0015fb0 <Process::createUserThread()>:
c0015fb0:	83 ec 0c             	sub    esp,0xc
c0015fb3:	68 80 00 00 00       	push   0x80
c0015fb8:	6a 00                	push   0x0
c0015fba:	68 04 59 01 c0       	push   0xc0015904
c0015fbf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015fc3:	50                   	push   eax
c0015fc4:	e8 df fe ff ff       	call   c0015ea8 <Process::createThread(void (*)(void*), void*, int)>
c0015fc9:	83 c4 1c             	add    esp,0x1c
c0015fcc:	c3                   	ret    
c0015fcd:	8d 76 00             	lea    esi,[esi+0x0]

c0015fd0 <setupMultitasking(void (*)())>:
c0015fd0:	56                   	push   esi
c0015fd1:	53                   	push   ebx
c0015fd2:	83 ec 04             	sub    esp,0x4
c0015fd5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015fd9:	eb 11                	jmp    c0015fec <setupMultitasking(void (*)())+0x1c>
c0015fdb:	90                   	nop
c0015fdc:	83 ec 0c             	sub    esp,0xc
c0015fdf:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015fe4:	e8 bb 9d 00 00       	call   c001fda4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015fe9:	83 c4 10             	add    esp,0x10
c0015fec:	83 ec 0c             	sub    esp,0xc
c0015fef:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015ff4:	e8 87 9d 00 00       	call   c001fd80 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015ff9:	83 c4 10             	add    esp,0x10
c0015ffc:	84 c0                	test   al,al
c0015ffe:	74 dc                	je     c0015fdc <setupMultitasking(void (*)())+0xc>
c0016000:	83 ec 0c             	sub    esp,0xc
c0016003:	68 24 07 00 00       	push   0x724
c0016008:	e8 c6 1a ff ff       	call   c0007ad3 <malloc>
c001600d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016014:	6a 00                	push   0x0
c0016016:	68 85 29 02 c0       	push   0xc0022985
c001601b:	6a 01                	push   0x1
c001601d:	50                   	push   eax
c001601e:	89 c3                	mov    ebx,eax
c0016020:	e8 5f fc ff ff       	call   c0015c84 <Process::Process(bool, char const*, Process*, char**)>
c0016025:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c001602b:	83 c4 14             	add    esp,0x14
c001602e:	89 1d f0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6f0,ebx
c0016034:	50                   	push   eax
c0016035:	e8 35 27 ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c001603a:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0016041:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c001604b:	83 c8 01             	or     eax,0x1
c001604e:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0016055:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001605b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001605e:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0016068:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c001606e:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0016078:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001607e:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0016088:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0016092:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0016098:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001609e:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00160a8:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00160b2:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c00160b9:	e8 15 1a ff ff       	call   c0007ad3 <malloc>
c00160be:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c00160c4:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00160ca:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00160d0:	5a                   	pop    edx
c00160d1:	59                   	pop    ecx
c00160d2:	68 81 29 02 c0       	push   0xc0022981
c00160d7:	50                   	push   eax
c00160d8:	e8 73 a5 fe ff       	call   c0000650 <strcpy>
c00160dd:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00160e4:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00160e8:	83 c4 14             	add    esp,0x14
c00160eb:	5b                   	pop    ebx
c00160ec:	5e                   	pop    esi
c00160ed:	e9 77 a1 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c00160f2:	66 90                	xchg   ax,ax

c00160f4 <schedule()>:
c00160f4:	8b 15 c4 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c4
c00160fa:	85 d2                	test   edx,edx
c00160fc:	74 0e                	je     c001610c <schedule()+0x18>
c00160fe:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c0016108:	c3                   	ret    
c0016109:	8d 76 00             	lea    esi,[esi+0x0]
c001610c:	53                   	push   ebx
c001610d:	83 ec 14             	sub    esp,0x14
c0016110:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016115:	e8 66 9c 00 00       	call   c001fd80 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001611a:	83 c4 10             	add    esp,0x10
c001611d:	84 c0                	test   al,al
c001611f:	75 3f                	jne    c0016160 <schedule()+0x6c>
c0016121:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016126:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0016129:	83 fa 01             	cmp    edx,0x1
c001612c:	74 3a                	je     c0016168 <schedule()+0x74>
c001612e:	66 90                	xchg   ax,ax
c0016130:	83 ec 0c             	sub    esp,0xc
c0016133:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016138:	e8 5f 9c 00 00       	call   c001fd9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001613d:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016144:	89 c3                	mov    ebx,eax
c0016146:	e8 59 9c 00 00       	call   c001fda4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001614b:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0016152:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016155:	e8 02 f8 ff ff       	call   c001595c <switchToThread(ThreadControlBlock*)>
c001615a:	83 c4 10             	add    esp,0x10
c001615d:	8d 76 00             	lea    esi,[esi+0x0]
c0016160:	83 c4 08             	add    esp,0x8
c0016163:	5b                   	pop    ebx
c0016164:	c3                   	ret    
c0016165:	8d 76 00             	lea    esi,[esi+0x0]
c0016168:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001616f:	83 ec 08             	sub    esp,0x8
c0016172:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016177:	50                   	push   eax
c0016178:	68 e4 c6 02 c0       	push   0xc002c6e4
c001617d:	e8 de 9c 00 00       	call   c001fe60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016182:	83 c4 10             	add    esp,0x10
c0016185:	eb a9                	jmp    c0016130 <schedule()+0x3c>
c0016187:	90                   	nop

c0016188 <Semaphore::tryAcquire()>:
c0016188:	53                   	push   ebx
c0016189:	83 ec 08             	sub    esp,0x8
c001618c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016190:	fa                   	cli    
c0016191:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016197:	8d 42 01             	lea    eax,[edx+0x1]
c001619a:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001619f:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00161a4:	8d 58 01             	lea    ebx,[eax+0x1]
c00161a7:	89 1d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ebx
c00161ad:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00161b0:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00161b2:	7c 2c                	jl     c00161e0 <Semaphore::tryAcquire()+0x58>
c00161b4:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00161b9:	85 c0                	test   eax,eax
c00161bb:	75 0b                	jne    c00161c8 <Semaphore::tryAcquire()+0x40>
c00161bd:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c00161c2:	85 c0                	test   eax,eax
c00161c4:	75 5a                	jne    c0016220 <Semaphore::tryAcquire()+0x98>
c00161c6:	66 90                	xchg   ax,ax
c00161c8:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00161ce:	31 c0                	xor    eax,eax
c00161d0:	85 d2                	test   edx,edx
c00161d2:	75 04                	jne    c00161d8 <Semaphore::tryAcquire()+0x50>
c00161d4:	fb                   	sti    
c00161d5:	8d 76 00             	lea    esi,[esi+0x0]
c00161d8:	83 c4 08             	add    esp,0x8
c00161db:	5b                   	pop    ebx
c00161dc:	c3                   	ret    
c00161dd:	8d 76 00             	lea    esi,[esi+0x0]
c00161e0:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00161e5:	83 c3 01             	add    ebx,0x1
c00161e8:	85 c0                	test   eax,eax
c00161ea:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00161ed:	75 21                	jne    c0016210 <Semaphore::tryAcquire()+0x88>
c00161ef:	8b 0d c0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c0
c00161f5:	85 c9                	test   ecx,ecx
c00161f7:	74 17                	je     c0016210 <Semaphore::tryAcquire()+0x88>
c00161f9:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016203:	e8 ec fe ff ff       	call   c00160f4 <schedule()>
c0016208:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001620d:	8d 50 ff             	lea    edx,[eax-0x1]
c0016210:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016216:	85 d2                	test   edx,edx
c0016218:	b0 01                	mov    al,0x1
c001621a:	75 bc                	jne    c00161d8 <Semaphore::tryAcquire()+0x50>
c001621c:	eb b6                	jmp    c00161d4 <Semaphore::tryAcquire()+0x4c>
c001621e:	66 90                	xchg   ax,ax
c0016220:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c001622a:	e8 c5 fe ff ff       	call   c00160f4 <schedule()>
c001622f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016234:	8d 50 ff             	lea    edx,[eax-0x1]
c0016237:	31 c0                	xor    eax,eax
c0016239:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c001623f:	85 d2                	test   edx,edx
c0016241:	75 95                	jne    c00161d8 <Semaphore::tryAcquire()+0x50>
c0016243:	eb 8f                	jmp    c00161d4 <Semaphore::tryAcquire()+0x4c>
c0016245:	90                   	nop
c0016246:	66 90                	xchg   ax,ax

c0016248 <Semaphore::assertLocked(char const*)>:
c0016248:	83 ec 0c             	sub    esp,0xc
c001624b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001624f:	fa                   	cli    
c0016250:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c0016256:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001625b:	83 c1 01             	add    ecx,0x1
c001625e:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c0016264:	8d 48 01             	lea    ecx,[eax+0x1]
c0016267:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c001626d:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001626f:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0016272:	7c 28                	jl     c001629c <Semaphore::assertLocked(char const*)+0x54>
c0016274:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016279:	85 c0                	test   eax,eax
c001627b:	75 0b                	jne    c0016288 <Semaphore::assertLocked(char const*)+0x40>
c001627d:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016282:	85 c0                	test   eax,eax
c0016284:	75 32                	jne    c00162b8 <Semaphore::assertLocked(char const*)+0x70>
c0016286:	66 90                	xchg   ax,ax
c0016288:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001628d:	83 e8 01             	sub    eax,0x1
c0016290:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016295:	75 01                	jne    c0016298 <Semaphore::assertLocked(char const*)+0x50>
c0016297:	fb                   	sti    
c0016298:	83 c4 0c             	add    esp,0xc
c001629b:	c3                   	ret    
c001629c:	83 ec 0c             	sub    esp,0xc
c001629f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00162a3:	52                   	push   edx
c00162a4:	e8 62 b3 ff ff       	call   c001160b <KePanic(char const*)>
c00162a9:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00162ae:	83 c4 10             	add    esp,0x10
c00162b1:	83 e8 01             	sub    eax,0x1
c00162b4:	eb be                	jmp    c0016274 <Semaphore::assertLocked(char const*)+0x2c>
c00162b6:	66 90                	xchg   ax,ax
c00162b8:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00162c2:	e8 2d fe ff ff       	call   c00160f4 <schedule()>
c00162c7:	eb bf                	jmp    c0016288 <Semaphore::assertLocked(char const*)+0x40>
c00162c9:	8d 76 00             	lea    esi,[esi+0x0]

c00162cc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00162cc:	83 ec 0c             	sub    esp,0xc
c00162cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00162d8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00162db:	e8 14 fe ff ff       	call   c00160f4 <schedule()>
c00162e0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00162e5:	83 e8 01             	sub    eax,0x1
c00162e8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00162ed:	75 01                	jne    c00162f0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00162ef:	fb                   	sti    
c00162f0:	83 c4 0c             	add    esp,0xc
c00162f3:	c3                   	ret    

c00162f4 <blockTask(TaskState)>:
c00162f4:	83 ec 0c             	sub    esp,0xc
c00162f7:	fa                   	cli    
c00162f8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00162fd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016301:	83 c0 01             	add    eax,0x1
c0016304:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016309:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001630e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016311:	e8 de fd ff ff       	call   c00160f4 <schedule()>
c0016316:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001631b:	83 e8 01             	sub    eax,0x1
c001631e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016323:	75 03                	jne    c0016328 <blockTask(TaskState)+0x34>
c0016325:	fb                   	sti    
c0016326:	66 90                	xchg   ax,ax
c0016328:	83 c4 0c             	add    esp,0xc
c001632b:	c3                   	ret    

c001632c <waitTask(int, int*, int)>:
c001632c:	83 ec 18             	sub    esp,0x18
c001632f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016334:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016338:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c001633b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001633f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016344:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0016347:	6a 07                	push   0x7
c0016349:	e8 a6 ff ff ff       	call   c00162f4 <blockTask(TaskState)>
c001634e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016353:	83 c4 10             	add    esp,0x10
c0016356:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0016359:	85 d2                	test   edx,edx
c001635b:	74 0b                	je     c0016368 <waitTask(int, int*, int)+0x3c>
c001635d:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0016360:	89 02                	mov    DWORD PTR [edx],eax
c0016362:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016367:	90                   	nop
c0016368:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001636b:	83 c4 0c             	add    esp,0xc
c001636e:	c3                   	ret    
c001636f:	90                   	nop

c0016370 <milliTenthSleepUntil(unsigned int)>:
c0016370:	83 ec 0c             	sub    esp,0xc
c0016373:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016377:	39 05 ec b8 02 c0    	cmp    DWORD PTR ds:0xc002b8ec,eax
c001637d:	76 05                	jbe    c0016384 <milliTenthSleepUntil(unsigned int)+0x14>
c001637f:	90                   	nop
c0016380:	83 c4 0c             	add    esp,0xc
c0016383:	c3                   	ret    
c0016384:	fa                   	cli    
c0016385:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c001638b:	83 ec 08             	sub    esp,0x8
c001638e:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016394:	83 c2 01             	add    edx,0x1
c0016397:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c001639d:	83 c1 01             	add    ecx,0x1
c00163a0:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c00163a6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00163ac:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00163af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163b4:	50                   	push   eax
c00163b5:	68 d8 c6 02 c0       	push   0xc002c6d8
c00163ba:	e8 a1 9a 00 00       	call   c001fe60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00163bf:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00163c6:	e8 29 ff ff ff       	call   c00162f4 <blockTask(TaskState)>
c00163cb:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00163d0:	83 c4 10             	add    esp,0x10
c00163d3:	83 e8 01             	sub    eax,0x1
c00163d6:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00163db:	85 c0                	test   eax,eax
c00163dd:	75 09                	jne    c00163e8 <milliTenthSleepUntil(unsigned int)+0x78>
c00163df:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c00163e4:	85 c0                	test   eax,eax
c00163e6:	75 14                	jne    c00163fc <milliTenthSleepUntil(unsigned int)+0x8c>
c00163e8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00163ed:	83 e8 01             	sub    eax,0x1
c00163f0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00163f5:	75 89                	jne    c0016380 <milliTenthSleepUntil(unsigned int)+0x10>
c00163f7:	fb                   	sti    
c00163f8:	83 c4 0c             	add    esp,0xc
c00163fb:	c3                   	ret    
c00163fc:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016406:	e8 e9 fc ff ff       	call   c00160f4 <schedule()>
c001640b:	eb db                	jmp    c00163e8 <milliTenthSleepUntil(unsigned int)+0x78>
c001640d:	8d 76 00             	lea    esi,[esi+0x0]

c0016410 <milliTenthSleep(unsigned int)>:
c0016410:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016414:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c0016419:	01 c2                	add    edx,eax
c001641b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001641f:	e9 4c ff ff ff       	jmp    c0016370 <milliTenthSleepUntil(unsigned int)>

c0016424 <sleep(unsigned int)>:
c0016424:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c001642c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016430:	eb de                	jmp    c0016410 <milliTenthSleep(unsigned int)>
c0016432:	66 90                	xchg   ax,ax

c0016434 <Semaphore::acquire()>:
c0016434:	83 ec 0c             	sub    esp,0xc
c0016437:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001643b:	fa                   	cli    
c001643c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016441:	83 c0 01             	add    eax,0x1
c0016444:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016449:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001644e:	8d 48 01             	lea    ecx,[eax+0x1]
c0016451:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016457:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001645a:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001645c:	7d 2e                	jge    c001648c <Semaphore::acquire()+0x58>
c001645e:	83 c1 01             	add    ecx,0x1
c0016461:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016464:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016469:	85 c0                	test   eax,eax
c001646b:	75 0b                	jne    c0016478 <Semaphore::acquire()+0x44>
c001646d:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016472:	85 c0                	test   eax,eax
c0016474:	75 66                	jne    c00164dc <Semaphore::acquire()+0xa8>
c0016476:	66 90                	xchg   ax,ax
c0016478:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001647d:	83 e8 01             	sub    eax,0x1
c0016480:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016485:	75 01                	jne    c0016488 <Semaphore::acquire()+0x54>
c0016487:	fb                   	sti    
c0016488:	83 c4 0c             	add    esp,0xc
c001648b:	c3                   	ret    
c001648c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016491:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016498:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001649b:	85 c9                	test   ecx,ecx
c001649d:	74 51                	je     c00164f0 <Semaphore::acquire()+0xbc>
c001649f:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00164a2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00164a8:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00164ab:	90                   	nop
c00164ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164b1:	83 ec 0c             	sub    esp,0xc
c00164b4:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00164b7:	68 04 2a 02 c0       	push   0xc0022a04
c00164bc:	e8 49 44 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00164c1:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00164c8:	e8 27 fe ff ff       	call   c00162f4 <blockTask(TaskState)>
c00164cd:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00164d2:	83 c4 10             	add    esp,0x10
c00164d5:	83 e8 01             	sub    eax,0x1
c00164d8:	eb 8a                	jmp    c0016464 <Semaphore::acquire()+0x30>
c00164da:	66 90                	xchg   ax,ax
c00164dc:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00164e6:	e8 09 fc ff ff       	call   c00160f4 <schedule()>
c00164eb:	eb 8b                	jmp    c0016478 <Semaphore::acquire()+0x44>
c00164ed:	8d 76 00             	lea    esi,[esi+0x0]
c00164f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164f5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00164f8:	eb b2                	jmp    c00164ac <Semaphore::acquire()+0x78>
c00164fa:	66 90                	xchg   ax,ax

c00164fc <taskReturned>:
c00164fc:	83 ec 18             	sub    esp,0x18
c00164ff:	68 24 2a 02 c0       	push   0xc0022a24
c0016504:	e8 02 b1 ff ff       	call   c001160b <KePanic(char const*)>
c0016509:	83 c4 10             	add    esp,0x10
c001650c:	83 ec 0c             	sub    esp,0xc
c001650f:	6a 02                	push   0x2
c0016511:	e8 de fd ff ff       	call   c00162f4 <blockTask(TaskState)>
c0016516:	fa                   	cli    
c0016517:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001651c:	83 c0 01             	add    eax,0x1
c001651f:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016524:	e8 cb fb ff ff       	call   c00160f4 <schedule()>
c0016529:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001652e:	83 c4 10             	add    esp,0x10
c0016531:	83 e8 01             	sub    eax,0x1
c0016534:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016539:	85 c0                	test   eax,eax
c001653b:	75 cf                	jne    c001650c <taskReturned+0x10>
c001653d:	fb                   	sti    
c001653e:	eb cc                	jmp    c001650c <taskReturned+0x10>

c0016540 <Thr::processFromPID(int)>:
c0016540:	57                   	push   edi
c0016541:	56                   	push   esi
c0016542:	53                   	push   ebx
c0016543:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016547:	fa                   	cli    
c0016548:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c001654e:	83 ec 0c             	sub    esp,0xc
c0016551:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016556:	83 c1 01             	add    ecx,0x1
c0016559:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c001655f:	e8 38 98 00 00       	call   c001fd9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016564:	83 c4 10             	add    esp,0x10
c0016567:	89 c7                	mov    edi,eax
c0016569:	eb 15                	jmp    c0016580 <Thr::processFromPID(int)+0x40>
c001656b:	90                   	nop
c001656c:	83 ec 0c             	sub    esp,0xc
c001656f:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016574:	e8 23 98 00 00       	call   c001fd9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016579:	83 c4 10             	add    esp,0x10
c001657c:	39 f8                	cmp    eax,edi
c001657e:	74 50                	je     c00165d0 <Thr::processFromPID(int)+0x90>
c0016580:	83 ec 0c             	sub    esp,0xc
c0016583:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016588:	e8 0f 98 00 00       	call   c001fd9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001658d:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016594:	89 c3                	mov    ebx,eax
c0016596:	e8 09 98 00 00       	call   c001fda4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001659b:	58                   	pop    eax
c001659c:	5a                   	pop    edx
c001659d:	53                   	push   ebx
c001659e:	68 e4 c6 02 c0       	push   0xc002c6e4
c00165a3:	e8 b8 98 00 00       	call   c001fe60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00165a8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00165ab:	83 c4 10             	add    esp,0x10
c00165ae:	39 30                	cmp    DWORD PTR [eax],esi
c00165b0:	75 ba                	jne    c001656c <Thr::processFromPID(int)+0x2c>
c00165b2:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00165b7:	83 e8 01             	sub    eax,0x1
c00165ba:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00165bf:	74 0b                	je     c00165cc <Thr::processFromPID(int)+0x8c>
c00165c1:	8d 76 00             	lea    esi,[esi+0x0]
c00165c4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00165c7:	90                   	nop
c00165c8:	5b                   	pop    ebx
c00165c9:	5e                   	pop    esi
c00165ca:	5f                   	pop    edi
c00165cb:	c3                   	ret    
c00165cc:	fb                   	sti    
c00165cd:	eb f5                	jmp    c00165c4 <Thr::processFromPID(int)+0x84>
c00165cf:	90                   	nop
c00165d0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00165d5:	8d 50 ff             	lea    edx,[eax-0x1]
c00165d8:	31 c0                	xor    eax,eax
c00165da:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00165e0:	85 d2                	test   edx,edx
c00165e2:	75 e4                	jne    c00165c8 <Thr::processFromPID(int)+0x88>
c00165e4:	fb                   	sti    
c00165e5:	5b                   	pop    ebx
c00165e6:	5e                   	pop    esi
c00165e7:	5f                   	pop    edi
c00165e8:	c3                   	ret    
c00165e9:	8d 76 00             	lea    esi,[esi+0x0]

c00165ec <unblockTask(ThreadControlBlock*)>:
c00165ec:	53                   	push   ebx
c00165ed:	83 ec 08             	sub    esp,0x8
c00165f0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00165f4:	fa                   	cli    
c00165f5:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00165fa:	83 c0 01             	add    eax,0x1
c00165fd:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016602:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016605:	85 c0                	test   eax,eax
c0016607:	74 67                	je     c0016670 <unblockTask(ThreadControlBlock*)+0x84>
c0016609:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001660c:	83 f8 01             	cmp    eax,0x1
c001660f:	74 37                	je     c0016648 <unblockTask(ThreadControlBlock*)+0x5c>
c0016611:	83 ec 0c             	sub    esp,0xc
c0016614:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016619:	e8 7e 97 00 00       	call   c001fd9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001661e:	83 c4 10             	add    esp,0x10
c0016621:	85 c0                	test   eax,eax
c0016623:	75 1b                	jne    c0016640 <unblockTask(ThreadControlBlock*)+0x54>
c0016625:	eb 5d                	jmp    c0016684 <unblockTask(ThreadControlBlock*)+0x98>
c0016627:	90                   	nop
c0016628:	83 ec 08             	sub    esp,0x8
c001662b:	50                   	push   eax
c001662c:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016631:	e8 86 9a 00 00       	call   c00200bc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0016636:	83 c4 10             	add    esp,0x10
c0016639:	85 c0                	test   eax,eax
c001663b:	74 47                	je     c0016684 <unblockTask(ThreadControlBlock*)+0x98>
c001663d:	8d 76 00             	lea    esi,[esi+0x0]
c0016640:	39 c3                	cmp    ebx,eax
c0016642:	75 e4                	jne    c0016628 <unblockTask(ThreadControlBlock*)+0x3c>
c0016644:	eb 12                	jmp    c0016658 <unblockTask(ThreadControlBlock*)+0x6c>
c0016646:	66 90                	xchg   ax,ax
c0016648:	83 ec 0c             	sub    esp,0xc
c001664b:	68 a3 29 02 c0       	push   0xc00229a3
c0016650:	e8 b5 42 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016655:	83 c4 10             	add    esp,0x10
c0016658:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001665d:	83 e8 01             	sub    eax,0x1
c0016660:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016665:	75 01                	jne    c0016668 <unblockTask(ThreadControlBlock*)+0x7c>
c0016667:	fb                   	sti    
c0016668:	83 c4 08             	add    esp,0x8
c001666b:	5b                   	pop    ebx
c001666c:	c3                   	ret    
c001666d:	8d 76 00             	lea    esi,[esi+0x0]
c0016670:	83 ec 0c             	sub    esp,0xc
c0016673:	68 8c 29 02 c0       	push   0xc002298c
c0016678:	e8 8d 42 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001667d:	83 c4 10             	add    esp,0x10
c0016680:	eb d6                	jmp    c0016658 <unblockTask(ThreadControlBlock*)+0x6c>
c0016682:	66 90                	xchg   ax,ax
c0016684:	83 ec 08             	sub    esp,0x8
c0016687:	53                   	push   ebx
c0016688:	68 e4 c6 02 c0       	push   0xc002c6e4
c001668d:	e8 ce 97 00 00       	call   c001fe60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016692:	83 c4 10             	add    esp,0x10
c0016695:	eb c1                	jmp    c0016658 <unblockTask(ThreadControlBlock*)+0x6c>
c0016697:	90                   	nop

c0016698 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0016698:	55                   	push   ebp
c0016699:	57                   	push   edi
c001669a:	56                   	push   esi
c001669b:	53                   	push   ebx
c001669c:	83 ec 1c             	sub    esp,0x1c
c001669f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00166a3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00166a6:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c00166ac:	85 ed                	test   ebp,ebp
c00166ae:	7e 28                	jle    c00166d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c00166b0:	31 f6                	xor    esi,esi
c00166b2:	66 90                	xchg   ax,ax
c00166b4:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c00166bb:	83 ec 0c             	sub    esp,0xc
c00166be:	83 c6 01             	add    esi,0x1
c00166c1:	57                   	push   edi
c00166c2:	e8 1c 14 ff ff       	call   c0007ae3 <free>
c00166c7:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00166ca:	83 c4 10             	add    esp,0x10
c00166cd:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00166d3:	7f df                	jg     c00166b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00166d5:	8d 76 00             	lea    esi,[esi+0x0]
c00166d8:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00166e2:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00166e7:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00166ea:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00166ed:	d3 c0                	rol    eax,cl
c00166ef:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c00166f6:	21 c8                	and    eax,ecx
c00166f8:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c00166ff:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016702:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c001670a:	89 f7                	mov    edi,esi
c001670c:	0f 85 72 01 00 00    	jne    c0016884 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0016712:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0016718:	85 ed                	test   ebp,ebp
c001671a:	74 1c                	je     c0016738 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c001671c:	83 ec 0c             	sub    esp,0xc
c001671f:	55                   	push   ebp
c0016720:	e8 f7 ab ff ff       	call   c001131c <EnvVarContainer::~EnvVarContainer()>
c0016725:	59                   	pop    ecx
c0016726:	5e                   	pop    esi
c0016727:	6a 0c                	push   0xc
c0016729:	55                   	push   ebp
c001672a:	e8 dd 40 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001672f:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016732:	83 c4 10             	add    esp,0x10
c0016735:	89 f7                	mov    edi,esi
c0016737:	90                   	nop
c0016738:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001673e:	85 c0                	test   eax,eax
c0016740:	0f 84 b2 00 00 00    	je     c00167f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0016746:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0016749:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001674d:	31 c9                	xor    ecx,ecx
c001674f:	eb 17                	jmp    c0016768 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0016751:	8d 76 00             	lea    esi,[esi+0x0]
c0016754:	83 c1 01             	add    ecx,0x1
c0016757:	83 f9 10             	cmp    ecx,0x10
c001675a:	0f 84 98 00 00 00    	je     c00167f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0016760:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016766:	66 90                	xchg   ax,ax
c0016768:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001676f:	d3 fa                	sar    edx,cl
c0016771:	80 e2 01             	and    dl,0x1
c0016774:	74 de                	je     c0016754 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016776:	8d 14 49             	lea    edx,[ecx+ecx*2]
c0016779:	c1 e2 05             	shl    edx,0x5
c001677c:	29 ca                	sub    edx,ecx
c001677e:	01 d0                	add    eax,edx
c0016780:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0016786:	83 fd 07             	cmp    ebp,0x7
c0016789:	75 c9                	jne    c0016754 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001678b:	05 40 02 00 00       	add    eax,0x240
c0016790:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0016793:	83 fd ff             	cmp    ebp,0xffffffff
c0016796:	0f 8c f0 00 00 00    	jl     c001688c <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001679c:	0f 84 ae 01 00 00    	je     c0016950 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c00167a2:	85 ed                	test   ebp,ebp
c00167a4:	0f 84 92 01 00 00    	je     c001693c <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c00167aa:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00167ac:	75 a6                	jne    c0016754 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00167ae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00167b2:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00167b8:	01 d0                	add    eax,edx
c00167ba:	66 90                	xchg   ax,ax
c00167bc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00167c0:	83 ec 0c             	sub    esp,0xc
c00167c3:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00167c9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00167cc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00167d2:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00167d9:	50                   	push   eax
c00167da:	e8 0d fe ff ff       	call   c00165ec <unblockTask(ThreadControlBlock*)>
c00167df:	83 c4 10             	add    esp,0x10
c00167e2:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00167e5:	89 f7                	mov    edi,esi
c00167e7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00167eb:	83 c1 01             	add    ecx,0x1
c00167ee:	83 f9 10             	cmp    ecx,0x10
c00167f1:	0f 85 69 ff ff ff    	jne    c0016760 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00167f7:	90                   	nop
c00167f8:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00167fe:	85 c0                	test   eax,eax
c0016800:	74 62                	je     c0016864 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0016802:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0016808:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c001680e:	74 54                	je     c0016864 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0016810:	83 ec 0c             	sub    esp,0xc
c0016813:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016818:	e8 7f 95 00 00       	call   c001fd9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001681d:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016824:	89 c7                	mov    edi,eax
c0016826:	e8 55 95 00 00       	call   c001fd80 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001682b:	83 c4 10             	add    esp,0x10
c001682e:	84 c0                	test   al,al
c0016830:	0f 84 ce 00 00 00    	je     c0016904 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0016836:	66 90                	xchg   ax,ax
c0016838:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001683b:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016841:	85 d2                	test   edx,edx
c0016843:	74 0f                	je     c0016854 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0016845:	8b 02                	mov    eax,DWORD PTR [edx]
c0016847:	83 ec 0c             	sub    esp,0xc
c001684a:	52                   	push   edx
c001684b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001684e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016851:	83 c4 10             	add    esp,0x10
c0016854:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001685e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0016861:	8d 76 00             	lea    esi,[esi+0x0]
c0016864:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c001686a:	85 db                	test   ebx,ebx
c001686c:	74 16                	je     c0016884 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001686e:	83 ec 0c             	sub    esp,0xc
c0016871:	53                   	push   ebx
c0016872:	e8 19 33 ff ff       	call   c0009b90 <VAS::~VAS()>
c0016877:	58                   	pop    eax
c0016878:	5a                   	pop    edx
c0016879:	6a 14                	push   0x14
c001687b:	53                   	push   ebx
c001687c:	e8 8b 3f ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0016881:	83 c4 10             	add    esp,0x10
c0016884:	83 c4 1c             	add    esp,0x1c
c0016887:	5b                   	pop    ebx
c0016888:	5e                   	pop    esi
c0016889:	5f                   	pop    edi
c001688a:	5d                   	pop    ebp
c001688b:	c3                   	ret    
c001688c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016890:	83 ec 0c             	sub    esp,0xc
c0016893:	68 58 2a 02 c0       	push   0xc0022a58
c0016898:	e8 6e ad ff ff       	call   c001160b <KePanic(char const*)>
c001689d:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00168a0:	83 c4 10             	add    esp,0x10
c00168a3:	89 f7                	mov    edi,esi
c00168a5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00168a9:	e9 a6 fe ff ff       	jmp    c0016754 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00168ae:	66 90                	xchg   ax,ax
c00168b0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00168b6:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00168bc:	75 1e                	jne    c00168dc <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00168be:	83 ec 0c             	sub    esp,0xc
c00168c1:	68 c0 2a 02 c0       	push   0xc0022ac0
c00168c6:	e8 3f 40 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00168cb:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00168d2:	e8 1d fa ff ff       	call   c00162f4 <blockTask(TaskState)>
c00168d7:	83 c4 10             	add    esp,0x10
c00168da:	66 90                	xchg   ax,ax
c00168dc:	83 ec 08             	sub    esp,0x8
c00168df:	56                   	push   esi
c00168e0:	68 e4 c6 02 c0       	push   0xc002c6e4
c00168e5:	e8 76 95 00 00       	call   c001fe60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00168ea:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00168f1:	e8 a6 94 00 00       	call   c001fd9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00168f6:	83 c4 10             	add    esp,0x10
c00168f9:	39 f8                	cmp    eax,edi
c00168fb:	0f 84 37 ff ff ff    	je     c0016838 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0016901:	8d 76 00             	lea    esi,[esi+0x0]
c0016904:	83 ec 0c             	sub    esp,0xc
c0016907:	68 e4 c6 02 c0       	push   0xc002c6e4
c001690c:	e8 8b 94 00 00       	call   c001fd9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016911:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016918:	89 c6                	mov    esi,eax
c001691a:	e8 85 94 00 00       	call   c001fda4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001691f:	83 c4 10             	add    esp,0x10
c0016922:	39 f3                	cmp    ebx,esi
c0016924:	74 b6                	je     c00168dc <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016926:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0016929:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001692c:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0016932:	75 a8                	jne    c00168dc <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016934:	e9 77 ff ff ff       	jmp    c00168b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0016939:	8d 76 00             	lea    esi,[esi+0x0]
c001693c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016940:	83 ec 0c             	sub    esp,0xc
c0016943:	68 8c 2a 02 c0       	push   0xc0022a8c
c0016948:	e9 4b ff ff ff       	jmp    c0016898 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c001694d:	8d 76 00             	lea    esi,[esi+0x0]
c0016950:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016954:	8b 36                	mov    esi,DWORD PTR [esi]
c0016956:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0016959:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001695c:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0016962:	01 d7                	add    edi,edx
c0016964:	89 f8                	mov    eax,edi
c0016966:	e9 51 fe ff ff       	jmp    c00167bc <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c001696b:	90                   	nop

c001696c <cleanerTaskFunction(void*)>:
c001696c:	53                   	push   ebx
c001696d:	83 ec 08             	sub    esp,0x8
c0016970:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016975:	83 e8 01             	sub    eax,0x1
c0016978:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001697d:	75 01                	jne    c0016980 <cleanerTaskFunction(void*)+0x14>
c001697f:	fb                   	sti    
c0016980:	fa                   	cli    
c0016981:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016986:	80 3d ac c6 02 c0 00 	cmp    BYTE PTR ds:0xc002c6ac,0x0
c001698d:	8d 50 01             	lea    edx,[eax+0x1]
c0016990:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016996:	0f 84 c4 00 00 00    	je     c0016a60 <cleanerTaskFunction(void*)+0xf4>
c001699c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00169a1:	85 c0                	test   eax,eax
c00169a3:	75 03                	jne    c00169a8 <cleanerTaskFunction(void*)+0x3c>
c00169a5:	fb                   	sti    
c00169a6:	66 90                	xchg   ax,ax
c00169a8:	c6 05 ac c6 02 c0 00 	mov    BYTE PTR ds:0xc002c6ac,0x0
c00169af:	fa                   	cli    
c00169b0:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c00169b6:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c00169bc:	83 c2 01             	add    edx,0x1
c00169bf:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00169c5:	83 c1 01             	add    ecx,0x1
c00169c8:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c00169ce:	fa                   	cli    
c00169cf:	8b 1d c8 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6c8
c00169d5:	83 c3 01             	add    ebx,0x1
c00169d8:	89 1d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ebx
c00169de:	eb 28                	jmp    c0016a08 <cleanerTaskFunction(void*)+0x9c>
c00169e0:	83 ec 0c             	sub    esp,0xc
c00169e3:	68 cc c6 02 c0       	push   0xc002c6cc
c00169e8:	e8 af 93 00 00       	call   c001fd9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00169ed:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c00169f4:	89 c3                	mov    ebx,eax
c00169f6:	e8 a9 93 00 00       	call   c001fda4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00169fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00169fe:	e8 95 fc ff ff       	call   c0016698 <cleanupTerminatedTask(ThreadControlBlock*)>
c0016a03:	83 c4 10             	add    esp,0x10
c0016a06:	66 90                	xchg   ax,ax
c0016a08:	83 ec 0c             	sub    esp,0xc
c0016a0b:	68 cc c6 02 c0       	push   0xc002c6cc
c0016a10:	e8 6b 93 00 00       	call   c001fd80 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016a15:	83 c4 10             	add    esp,0x10
c0016a18:	84 c0                	test   al,al
c0016a1a:	74 c4                	je     c00169e0 <cleanerTaskFunction(void*)+0x74>
c0016a1c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a21:	83 e8 01             	sub    eax,0x1
c0016a24:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a29:	75 01                	jne    c0016a2c <cleanerTaskFunction(void*)+0xc0>
c0016a2b:	fb                   	sti    
c0016a2c:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016a31:	83 e8 01             	sub    eax,0x1
c0016a34:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016a39:	0f 85 31 ff ff ff    	jne    c0016970 <cleanerTaskFunction(void*)+0x4>
c0016a3f:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016a44:	85 c0                	test   eax,eax
c0016a46:	0f 84 24 ff ff ff    	je     c0016970 <cleanerTaskFunction(void*)+0x4>
c0016a4c:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016a56:	e8 99 f6 ff ff       	call   c00160f4 <schedule()>
c0016a5b:	e9 10 ff ff ff       	jmp    c0016970 <cleanerTaskFunction(void*)+0x4>
c0016a60:	83 ec 0c             	sub    esp,0xc
c0016a63:	6a 02                	push   0x2
c0016a65:	e8 62 f8 ff ff       	call   c00162cc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016a6a:	83 c4 10             	add    esp,0x10
c0016a6d:	e9 36 ff ff ff       	jmp    c00169a8 <cleanerTaskFunction(void*)+0x3c>
c0016a72:	66 90                	xchg   ax,ax

c0016a74 <terminateTask(int)>:
c0016a74:	83 ec 14             	sub    esp,0x14
c0016a77:	fa                   	cli    
c0016a78:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016a7e:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016a84:	83 c2 01             	add    edx,0x1
c0016a87:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016a8d:	83 c1 01             	add    ecx,0x1
c0016a90:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016a96:	fa                   	cli    
c0016a97:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a9c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016aa0:	83 c0 01             	add    eax,0x1
c0016aa3:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016aa8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016aad:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0016ab0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ab5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016ab8:	50                   	push   eax
c0016ab9:	68 cc c6 02 c0       	push   0xc002c6cc
c0016abe:	e8 9d 93 00 00       	call   c001fe60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016ac3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ac8:	83 c4 10             	add    esp,0x10
c0016acb:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0016ad2:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c0016ad7:	85 c0                	test   eax,eax
c0016ad9:	74 65                	je     c0016b40 <terminateTask(int)+0xcc>
c0016adb:	c6 05 ac c6 02 c0 01 	mov    BYTE PTR ds:0xc002c6ac,0x1
c0016ae2:	83 ec 0c             	sub    esp,0xc
c0016ae5:	50                   	push   eax
c0016ae6:	e8 01 fb ff ff       	call   c00165ec <unblockTask(ThreadControlBlock*)>
c0016aeb:	83 c4 10             	add    esp,0x10
c0016aee:	66 90                	xchg   ax,ax
c0016af0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016af5:	83 e8 01             	sub    eax,0x1
c0016af8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016afd:	75 01                	jne    c0016b00 <terminateTask(int)+0x8c>
c0016aff:	fb                   	sti    
c0016b00:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016b05:	83 e8 01             	sub    eax,0x1
c0016b08:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016b0d:	75 09                	jne    c0016b18 <terminateTask(int)+0xa4>
c0016b0f:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c0016b16:	75 3c                	jne    c0016b54 <terminateTask(int)+0xe0>
c0016b18:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b1d:	83 e8 01             	sub    eax,0x1
c0016b20:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b25:	75 01                	jne    c0016b28 <terminateTask(int)+0xb4>
c0016b27:	fb                   	sti    
c0016b28:	fa                   	cli    
c0016b29:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b2e:	83 c0 01             	add    eax,0x1
c0016b31:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b36:	66 90                	xchg   ax,ax
c0016b38:	e8 b7 f5 ff ff       	call   c00160f4 <schedule()>
c0016b3d:	eb d9                	jmp    c0016b18 <terminateTask(int)+0xa4>
c0016b3f:	90                   	nop
c0016b40:	83 ec 0c             	sub    esp,0xc
c0016b43:	68 ba 29 02 c0       	push   0xc00229ba
c0016b48:	e8 bd 3d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016b4d:	83 c4 10             	add    esp,0x10
c0016b50:	eb 9e                	jmp    c0016af0 <terminateTask(int)+0x7c>
c0016b52:	66 90                	xchg   ax,ax
c0016b54:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016b5e:	eb d8                	jmp    c0016b38 <terminateTask(int)+0xc4>

c0016b60 <Thr::terminateFromIRQ(int)>:
c0016b60:	83 ec 18             	sub    esp,0x18
c0016b63:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b67:	50                   	push   eax
c0016b68:	e8 07 ff ff ff       	call   c0016a74 <terminateTask(int)>
c0016b6d:	90                   	nop
c0016b6e:	66 90                	xchg   ax,ax

c0016b70 <Semaphore::release()>:
c0016b70:	83 ec 0c             	sub    esp,0xc
c0016b73:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016b77:	fa                   	cli    
c0016b78:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b7d:	83 c0 01             	add    eax,0x1
c0016b80:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b85:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016b8a:	8d 48 01             	lea    ecx,[eax+0x1]
c0016b8d:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016b93:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016b96:	85 c9                	test   ecx,ecx
c0016b98:	74 42                	je     c0016bdc <Semaphore::release()+0x6c>
c0016b9a:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016b9d:	83 ec 0c             	sub    esp,0xc
c0016ba0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016ba3:	51                   	push   ecx
c0016ba4:	e8 43 fa ff ff       	call   c00165ec <unblockTask(ThreadControlBlock*)>
c0016ba9:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016bae:	83 c4 10             	add    esp,0x10
c0016bb1:	83 e8 01             	sub    eax,0x1
c0016bb4:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016bb9:	85 c0                	test   eax,eax
c0016bbb:	75 0b                	jne    c0016bc8 <Semaphore::release()+0x58>
c0016bbd:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016bc2:	85 c0                	test   eax,eax
c0016bc4:	75 22                	jne    c0016be8 <Semaphore::release()+0x78>
c0016bc6:	66 90                	xchg   ax,ax
c0016bc8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016bcd:	83 e8 01             	sub    eax,0x1
c0016bd0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016bd5:	75 01                	jne    c0016bd8 <Semaphore::release()+0x68>
c0016bd7:	fb                   	sti    
c0016bd8:	83 c4 0c             	add    esp,0xc
c0016bdb:	c3                   	ret    
c0016bdc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016bdf:	83 e9 01             	sub    ecx,0x1
c0016be2:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016be5:	eb cd                	jmp    c0016bb4 <Semaphore::release()+0x44>
c0016be7:	90                   	nop
c0016be8:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016bf2:	e8 fd f4 ff ff       	call   c00160f4 <schedule()>
c0016bf7:	eb cf                	jmp    c0016bc8 <Semaphore::release()+0x58>
c0016bf9:	8d 76 00             	lea    esi,[esi+0x0]

c0016bfc <__static_initialization_and_destruction_0(int, int)>:
c0016bfc:	83 ec 0c             	sub    esp,0xc
c0016bff:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016c04:	0f 85 8e 00 00 00    	jne    c0016c98 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016c0a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0016c12:	0f 85 80 00 00 00    	jne    c0016c98 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016c18:	83 ec 0c             	sub    esp,0xc
c0016c1b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016c20:	e8 ef 94 00 00       	call   c0020114 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016c25:	83 c4 10             	add    esp,0x10
c0016c28:	83 ec 04             	sub    esp,0x4
c0016c2b:	68 90 36 02 c0       	push   0xc0023690
c0016c30:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016c35:	68 c4 00 02 c0       	push   0xc00200c4
c0016c3a:	e8 7d 3b ff ff       	call   c000a7bc <__cxa_atexit>
c0016c3f:	83 c4 10             	add    esp,0x10
c0016c42:	83 ec 0c             	sub    esp,0xc
c0016c45:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016c4a:	e8 c5 94 00 00       	call   c0020114 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016c4f:	83 c4 10             	add    esp,0x10
c0016c52:	83 ec 04             	sub    esp,0x4
c0016c55:	68 90 36 02 c0       	push   0xc0023690
c0016c5a:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016c5f:	68 c4 00 02 c0       	push   0xc00200c4
c0016c64:	e8 53 3b ff ff       	call   c000a7bc <__cxa_atexit>
c0016c69:	83 c4 10             	add    esp,0x10
c0016c6c:	83 ec 0c             	sub    esp,0xc
c0016c6f:	68 cc c6 02 c0       	push   0xc002c6cc
c0016c74:	e8 9b 94 00 00       	call   c0020114 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016c79:	83 c4 10             	add    esp,0x10
c0016c7c:	83 ec 04             	sub    esp,0x4
c0016c7f:	68 90 36 02 c0       	push   0xc0023690
c0016c84:	68 cc c6 02 c0       	push   0xc002c6cc
c0016c89:	68 c4 00 02 c0       	push   0xc00200c4
c0016c8e:	e8 29 3b ff ff       	call   c000a7bc <__cxa_atexit>
c0016c93:	83 c4 10             	add    esp,0x10
c0016c96:	66 90                	xchg   ax,ax
c0016c98:	90                   	nop
c0016c99:	83 c4 0c             	add    esp,0xc
c0016c9c:	c3                   	ret    
c0016c9d:	8d 76 00             	lea    esi,[esi+0x0]

c0016ca0 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016ca0:	83 ec 0c             	sub    esp,0xc
c0016ca3:	83 ec 08             	sub    esp,0x8
c0016ca6:	68 ff ff 00 00       	push   0xffff
c0016cab:	6a 01                	push   0x1
c0016cad:	e8 4a ff ff ff       	call   c0016bfc <__static_initialization_and_destruction_0(int, int)>
c0016cb2:	83 c4 10             	add    esp,0x10
c0016cb5:	83 c4 0c             	add    esp,0xc
c0016cb8:	c3                   	ret    

c0016cb9 <Vm::inbv(unsigned short)>:
c0016cb9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016cbd:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016cc2:	75 06                	jne    c0016cca <Vm::inbv(unsigned short)+0x11>
c0016cc4:	a0 2c c7 02 c0       	mov    al,ds:0xc002c72c
c0016cc9:	c3                   	ret    
c0016cca:	ec                   	in     al,dx
c0016ccb:	c3                   	ret    

c0016ccc <Vm::outbv(unsigned short, unsigned char)>:
c0016ccc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016cd0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016cd4:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016cd9:	75 25                	jne    c0016d00 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016cdb:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016ce1:	88 81 40 c7 02 c0    	mov    BYTE PTR [ecx-0x3ffd38c0],al
c0016ce7:	8d 51 01             	lea    edx,[ecx+0x1]
c0016cea:	89 15 2c c7 02 c0    	mov    DWORD PTR ds:0xc002c72c,edx
c0016cf0:	83 fa 20             	cmp    edx,0x20
c0016cf3:	75 0c                	jne    c0016d01 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016cf5:	c7 05 2c c7 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x1f
c0016cff:	c3                   	ret    
c0016d00:	ee                   	out    dx,al
c0016d01:	c3                   	ret    

c0016d02 <Vm::realToLinear(unsigned short, unsigned short)>:
c0016d02:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016d07:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016d0c:	c1 e0 04             	shl    eax,0x4
c0016d0f:	01 d0                	add    eax,edx
c0016d11:	c3                   	ret    

c0016d12 <Vm::getSegment(unsigned int)>:
c0016d12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d16:	c1 e8 10             	shr    eax,0x10
c0016d19:	c3                   	ret    

c0016d1a <Vm::getOffset(unsigned int)>:
c0016d1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d1e:	c3                   	ret    

c0016d1f <Vm::mainloop2()>:
c0016d1f:	83 ec 18             	sub    esp,0x18
c0016d22:	fa                   	cli    
c0016d23:	6a 02                	push   0x2
c0016d25:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016d2b:	c6 05 25 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c725,0x1
c0016d32:	e8 95 f5 ff ff       	call   c00162cc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016d37:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d3c:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016d40:	52                   	push   edx
c0016d41:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016d45:	52                   	push   edx
c0016d46:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016d4a:	52                   	push   edx
c0016d4b:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016d4f:	50                   	push   eax
c0016d50:	e8 ba 94 fe ff       	call   c000020f <goToVM86>
c0016d55:	83 c4 2c             	add    esp,0x2c
c0016d58:	c3                   	ret    

c0016d59 <Vm::mainVm8086Loop(void*)>:
c0016d59:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016d5e:	48                   	dec    eax
c0016d5f:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016d64:	75 01                	jne    c0016d67 <Vm::mainVm8086Loop(void*)+0xe>
c0016d66:	fb                   	sti    
c0016d67:	eb b6                	jmp    c0016d1f <Vm::mainloop2()>

c0016d69 <Vm::mainloop3(unsigned long)>:
c0016d69:	83 ec 18             	sub    esp,0x18
c0016d6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d70:	fa                   	cli    
c0016d71:	6a 02                	push   0x2
c0016d73:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016d79:	c6 05 24 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c724,0x1
c0016d80:	a3 20 c7 02 c0       	mov    ds:0xc002c720,eax
c0016d85:	e8 42 f5 ff ff       	call   c00162cc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016d8a:	83 c4 1c             	add    esp,0x1c
c0016d8d:	eb 90                	jmp    c0016d1f <Vm::mainloop2()>

c0016d8f <Vm::initialise8086()>:
c0016d8f:	83 ec 0c             	sub    esp,0xc
c0016d92:	68 80 00 00 00       	push   0x80
c0016d97:	6a 00                	push   0x0
c0016d99:	68 59 6d 01 c0       	push   0xc0016d59
c0016d9e:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016da4:	e8 ff f0 ff ff       	call   c0015ea8 <Process::createThread(void (*)(void*), void*, int)>
c0016da9:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016db0:	68 00 01 00 00       	push   0x100
c0016db5:	6a 00                	push   0x0
c0016db7:	6a 00                	push   0x0
c0016db9:	a3 28 c7 02 c0       	mov    ds:0xc002c728,eax
c0016dbe:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0016dc3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016dc9:	e8 3a 31 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016dce:	83 c4 2c             	add    esp,0x2c
c0016dd1:	c3                   	ret    

c0016dd2 <Vm::finish8086()>:
c0016dd2:	53                   	push   ebx
c0016dd3:	83 ec 08             	sub    esp,0x8
c0016dd6:	fa                   	cli    
c0016dd7:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016ddd:	80 3d 24 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c724,0x0
c0016de4:	75 15                	jne    c0016dfb <Vm::finish8086()+0x29>
c0016de6:	e8 09 f3 ff ff       	call   c00160f4 <schedule()>
c0016deb:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016df0:	48                   	dec    eax
c0016df1:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016df6:	75 de                	jne    c0016dd6 <Vm::finish8086()+0x4>
c0016df8:	fb                   	sti    
c0016df9:	eb db                	jmp    c0016dd6 <Vm::finish8086()+0x4>
c0016dfb:	c6 05 24 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c724,0x0
c0016e02:	83 ec 0c             	sub    esp,0xc
c0016e05:	8b 1d 20 c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c720
c0016e0b:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016e11:	e8 d6 f7 ff ff       	call   c00165ec <unblockTask(ThreadControlBlock*)>
c0016e16:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016e1b:	83 c4 10             	add    esp,0x10
c0016e1e:	8d 50 ff             	lea    edx,[eax-0x1]
c0016e21:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016e27:	85 d2                	test   edx,edx
c0016e29:	75 01                	jne    c0016e2c <Vm::finish8086()+0x5a>
c0016e2b:	fb                   	sti    
c0016e2c:	83 c4 08             	add    esp,0x8
c0016e2f:	89 d8                	mov    eax,ebx
c0016e31:	5b                   	pop    ebx
c0016e32:	c3                   	ret    

c0016e33 <Vm::getOutput8086(unsigned char*)>:
c0016e33:	57                   	push   edi
c0016e34:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016e3a:	56                   	push   esi
c0016e3b:	be 40 c7 02 c0       	mov    esi,0xc002c740
c0016e40:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016e44:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e46:	5e                   	pop    esi
c0016e47:	a1 2c c7 02 c0       	mov    eax,ds:0xc002c72c
c0016e4c:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016e56:	5f                   	pop    edi
c0016e57:	c3                   	ret    

c0016e58 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016e58:	55                   	push   ebp
c0016e59:	57                   	push   edi
c0016e5a:	56                   	push   esi
c0016e5b:	53                   	push   ebx
c0016e5c:	83 ec 0c             	sub    esp,0xc
c0016e5f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016e63:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016e67:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016e6b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016e6f:	fa                   	cli    
c0016e70:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016e76:	80 3d 25 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c725,0x0
c0016e7d:	75 15                	jne    c0016e94 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016e7f:	e8 70 f2 ff ff       	call   c00160f4 <schedule()>
c0016e84:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016e89:	48                   	dec    eax
c0016e8a:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016e8f:	75 de                	jne    c0016e6f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016e91:	fb                   	sti    
c0016e92:	eb db                	jmp    c0016e6f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016e94:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016e9e:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016ea3:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016ea7:	0f b7 ff             	movzx  edi,di
c0016eaa:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016eae:	0f b7 f6             	movzx  esi,si
c0016eb1:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016eb5:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016eb9:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016ebd:	50                   	push   eax
c0016ebe:	6a 20                	push   0x20
c0016ec0:	6a 00                	push   0x0
c0016ec2:	68 40 c7 02 c0       	push   0xc002c740
c0016ec7:	e8 24 96 fe ff       	call   c00004f0 <memset>
c0016ecc:	5a                   	pop    edx
c0016ecd:	59                   	pop    ecx
c0016ece:	57                   	push   edi
c0016ecf:	56                   	push   esi
c0016ed0:	e8 2d fe ff ff       	call   c0016d02 <Vm::realToLinear(unsigned short, unsigned short)>
c0016ed5:	83 c4 10             	add    esp,0x10
c0016ed8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016edc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016ee0:	89 c7                	mov    edi,eax
c0016ee2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016ee4:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0016eeb:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016ef0:	48                   	dec    eax
c0016ef1:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016ef6:	75 01                	jne    c0016ef9 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016ef8:	fb                   	sti    
c0016ef9:	83 ec 0c             	sub    esp,0xc
c0016efc:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016f02:	e8 e5 f6 ff ff       	call   c00165ec <unblockTask(ThreadControlBlock*)>
c0016f07:	83 c4 1c             	add    esp,0x1c
c0016f0a:	b0 01                	mov    al,0x1
c0016f0c:	5b                   	pop    ebx
c0016f0d:	5e                   	pop    esi
c0016f0e:	5f                   	pop    edi
c0016f0f:	5d                   	pop    ebp
c0016f10:	c3                   	ret    

c0016f11 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016f11:	55                   	push   ebp
c0016f12:	57                   	push   edi
c0016f13:	56                   	push   esi
c0016f14:	53                   	push   ebx
c0016f15:	83 ec 34             	sub    esp,0x34
c0016f18:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016f1c:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016f20:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016f24:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016f28:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016f2c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016f30:	68 e8 2a 02 c0       	push   0xc0022ae8
c0016f35:	e8 d0 39 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016f3a:	83 c4 10             	add    esp,0x10
c0016f3d:	fa                   	cli    
c0016f3e:	8a 1d 25 c7 02 c0    	mov    bl,BYTE PTR ds:0xc002c725
c0016f44:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016f4a:	84 db                	test   bl,bl
c0016f4c:	75 15                	jne    c0016f63 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0016f4e:	e8 a1 f1 ff ff       	call   c00160f4 <schedule()>
c0016f53:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016f58:	48                   	dec    eax
c0016f59:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016f5e:	75 dd                	jne    c0016f3d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016f60:	fb                   	sti    
c0016f61:	eb da                	jmp    c0016f3d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016f63:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016f6d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016f71:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016f76:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016f7a:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016f7e:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016f82:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016f86:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016f8a:	50                   	push   eax
c0016f8b:	6a 20                	push   0x20
c0016f8d:	6a 00                	push   0x0
c0016f8f:	68 40 c7 02 c0       	push   0xc002c740
c0016f94:	e8 57 95 fe ff       	call   c00004f0 <memset>
c0016f99:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016fa0:	e8 2e 0b ff ff       	call   c0007ad3 <malloc>
c0016fa5:	83 c4 0c             	add    esp,0xc
c0016fa8:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016fae:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016fb2:	89 c5                	mov    ebp,eax
c0016fb4:	50                   	push   eax
c0016fb5:	e8 0a 4c ff ff       	call   c000bbc4 <File::File(char const*, Process*)>
c0016fba:	83 c4 10             	add    esp,0x10
c0016fbd:	85 ed                	test   ebp,ebp
c0016fbf:	75 0a                	jne    c0016fcb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0016fc1:	83 ec 0c             	sub    esp,0xc
c0016fc4:	68 0a 2b 02 c0       	push   0xc0022b0a
c0016fc9:	eb 2b                	jmp    c0016ff6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0016fcb:	50                   	push   eax
c0016fcc:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016fd0:	50                   	push   eax
c0016fd1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016fd5:	50                   	push   eax
c0016fd6:	55                   	push   ebp
c0016fd7:	e8 08 4f ff ff       	call   c000bee4 <File::stat(unsigned long long*, bool*)>
c0016fdc:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016fe0:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016fe4:	83 c4 10             	add    esp,0x10
c0016fe7:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016fec:	74 27                	je     c0017015 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0016fee:	83 ec 0c             	sub    esp,0xc
c0016ff1:	68 1e 2b 02 c0       	push   0xc0022b1e
c0016ff6:	e8 10 a6 ff ff       	call   c001160b <KePanic(char const*)>
c0016ffb:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0017000:	83 c4 10             	add    esp,0x10
c0017003:	48                   	dec    eax
c0017004:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0017009:	85 c0                	test   eax,eax
c001700b:	75 01                	jne    c001700e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c001700d:	fb                   	sti    
c001700e:	31 db                	xor    ebx,ebx
c0017010:	e9 90 00 00 00       	jmp    c00170a5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0017015:	51                   	push   ecx
c0017016:	51                   	push   ecx
c0017017:	6a 01                	push   0x1
c0017019:	55                   	push   ebp
c001701a:	e8 c3 4b ff ff       	call   c000bbe2 <File::open(FileOpenMode)>
c001701f:	83 c4 10             	add    esp,0x10
c0017022:	85 c0                	test   eax,eax
c0017024:	74 26                	je     c001704c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0017026:	83 ec 0c             	sub    esp,0xc
c0017029:	68 37 2b 02 c0       	push   0xc0022b37
c001702e:	e8 d8 a5 ff ff       	call   c001160b <KePanic(char const*)>
c0017033:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0017038:	83 c4 10             	add    esp,0x10
c001703b:	48                   	dec    eax
c001703c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0017041:	85 c0                	test   eax,eax
c0017043:	75 c9                	jne    c001700e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0017045:	fb                   	sti    
c0017046:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c001704a:	eb 59                	jmp    c00170a5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c001704c:	50                   	push   eax
c001704d:	0f b7 ff             	movzx  edi,di
c0017050:	50                   	push   eax
c0017051:	0f b7 f6             	movzx  esi,si
c0017054:	57                   	push   edi
c0017055:	56                   	push   esi
c0017056:	e8 a7 fc ff ff       	call   c0016d02 <Vm::realToLinear(unsigned short, unsigned short)>
c001705b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001705e:	5a                   	pop    edx
c001705f:	8d 74 24 20          	lea    esi,[esp+0x20]
c0017063:	56                   	push   esi
c0017064:	50                   	push   eax
c0017065:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017069:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001706d:	55                   	push   ebp
c001706e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017071:	83 c4 14             	add    esp,0x14
c0017074:	55                   	push   ebp
c0017075:	e8 c6 4b ff ff       	call   c000bc40 <File::close()>
c001707a:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001707f:	83 c4 10             	add    esp,0x10
c0017082:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0017089:	48                   	dec    eax
c001708a:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001708f:	85 c0                	test   eax,eax
c0017091:	75 01                	jne    c0017094 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0017093:	fb                   	sti    
c0017094:	83 ec 0c             	sub    esp,0xc
c0017097:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c001709d:	e8 4a f5 ff ff       	call   c00165ec <unblockTask(ThreadControlBlock*)>
c00170a2:	83 c4 10             	add    esp,0x10
c00170a5:	83 c4 2c             	add    esp,0x2c
c00170a8:	88 d8                	mov    al,bl
c00170aa:	5b                   	pop    ebx
c00170ab:	5e                   	pop    esi
c00170ac:	5f                   	pop    edi
c00170ad:	5d                   	pop    ebp
c00170ae:	c3                   	ret    

c00170af <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00170af:	57                   	push   edi
c00170b0:	56                   	push   esi
c00170b1:	53                   	push   ebx
c00170b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170b6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00170ba:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00170be:	83 e8 06             	sub    eax,0x6
c00170c1:	0f b7 c0             	movzx  eax,ax
c00170c4:	50                   	push   eax
c00170c5:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00170ca:	50                   	push   eax
c00170cb:	e8 32 fc ff ff       	call   c0016d02 <Vm::realToLinear(unsigned short, unsigned short)>
c00170d0:	5a                   	pop    edx
c00170d1:	59                   	pop    ecx
c00170d2:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c00170d5:	8d 51 fa             	lea    edx,[ecx-0x6]
c00170d8:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00170db:	81 e2 ff ff 00 00    	and    edx,0xffff
c00170e1:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00170e4:	8d 51 02             	lea    edx,[ecx+0x2]
c00170e7:	66 89 10             	mov    WORD PTR [eax],dx
c00170ea:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c00170ee:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00170f2:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c00170f6:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00170f9:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00170fd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017103:	89 f1                	mov    ecx,esi
c0017105:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0017109:	89 f2                	mov    edx,esi
c001710b:	0f b6 d6             	movzx  edx,dh
c001710e:	0f b6 f1             	movzx  esi,cl
c0017111:	74 0a                	je     c001711d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c0017113:	c1 e2 08             	shl    edx,0x8
c0017116:	09 f2                	or     edx,esi
c0017118:	80 ce 02             	or     dh,0x2
c001711b:	eb 08                	jmp    c0017125 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c001711d:	c1 e2 08             	shl    edx,0x8
c0017120:	09 f2                	or     edx,esi
c0017122:	80 e6 fd             	and    dh,0xfd
c0017125:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017129:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001712e:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0017132:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c001713a:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c001713d:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0017145:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0017148:	5b                   	pop    ebx
c0017149:	5e                   	pop    esi
c001714a:	5f                   	pop    edi
c001714b:	c3                   	ret    

c001714c <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001714c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017151:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017156:	c1 e0 04             	shl    eax,0x4
c0017159:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001715c:	c3                   	ret    

c001715d <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001715d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017162:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017167:	c1 e0 04             	shl    eax,0x4
c001716a:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001716e:	c3                   	ret    

c001716f <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001716f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017174:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017179:	c1 e0 04             	shl    eax,0x4
c001717c:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001717f:	c3                   	ret    

c0017180 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0017180:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017185:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001718a:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001718e:	c1 e0 04             	shl    eax,0x4
c0017191:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0017194:	c3                   	ret    

c0017195 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0017195:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001719a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001719f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00171a3:	c1 e0 04             	shl    eax,0x4
c00171a6:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00171aa:	c3                   	ret    

c00171ab <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00171ab:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00171b0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00171b5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00171b9:	c1 e0 04             	shl    eax,0x4
c00171bc:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00171bf:	c3                   	ret    

c00171c0 <Vm::faultHandler(regs*)>:
c00171c0:	55                   	push   ebp
c00171c1:	57                   	push   edi
c00171c2:	56                   	push   esi
c00171c3:	53                   	push   ebx
c00171c4:	83 ec 2c             	sub    esp,0x2c
c00171c7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00171cb:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00171ce:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00171d2:	0f b7 f8             	movzx  edi,ax
c00171d5:	0f b7 c0             	movzx  eax,ax
c00171d8:	52                   	push   edx
c00171d9:	50                   	push   eax
c00171da:	e8 23 fb ff ff       	call   c0016d02 <Vm::realToLinear(unsigned short, unsigned short)>
c00171df:	5a                   	pop    edx
c00171e0:	59                   	pop    ecx
c00171e1:	89 c1                	mov    ecx,eax
c00171e3:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00171e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00171ea:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00171ef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00171f3:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c00171f6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00171fa:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c00171ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017203:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017207:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001720b:	e8 f2 fa ff ff       	call   c0016d02 <Vm::realToLinear(unsigned short, unsigned short)>
c0017210:	5e                   	pop    esi
c0017211:	be 06 00 00 00       	mov    esi,0x6
c0017216:	5d                   	pop    ebp
c0017217:	31 ed                	xor    ebp,ebp
c0017219:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001721e:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0017221:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0017227:	0f 84 74 02 00 00    	je     c00174a1 <Vm::faultHandler(regs*)+0x2e1>
c001722d:	0f 87 94 00 00 00    	ja     c00172c7 <Vm::faultHandler(regs*)+0x107>
c0017233:	83 fa 66             	cmp    edx,0x66
c0017236:	0f 84 e2 01 00 00    	je     c001741e <Vm::faultHandler(regs*)+0x25e>
c001723c:	77 47                	ja     c0017285 <Vm::faultHandler(regs*)+0xc5>
c001723e:	83 fa 36             	cmp    edx,0x36
c0017241:	0f 84 ca 01 00 00    	je     c0017411 <Vm::faultHandler(regs*)+0x251>
c0017247:	77 1a                	ja     c0017263 <Vm::faultHandler(regs*)+0xa3>
c0017249:	83 fa 26             	cmp    edx,0x26
c001724c:	0f 84 98 01 00 00    	je     c00173ea <Vm::faultHandler(regs*)+0x22a>
c0017252:	83 fa 2e             	cmp    edx,0x2e
c0017255:	0f 85 27 06 00 00    	jne    c0017882 <Vm::faultHandler(regs*)+0x6c2>
c001725b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001725e:	31 f6                	xor    esi,esi
c0017260:	41                   	inc    ecx
c0017261:	eb bb                	jmp    c001721e <Vm::faultHandler(regs*)+0x5e>
c0017263:	83 fa 64             	cmp    edx,0x64
c0017266:	0f 84 8b 01 00 00    	je     c00173f7 <Vm::faultHandler(regs*)+0x237>
c001726c:	0f 87 92 01 00 00    	ja     c0017404 <Vm::faultHandler(regs*)+0x244>
c0017272:	83 fa 3e             	cmp    edx,0x3e
c0017275:	0f 85 07 06 00 00    	jne    c0017882 <Vm::faultHandler(regs*)+0x6c2>
c001727b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001727e:	be 01 00 00 00       	mov    esi,0x1
c0017283:	eb db                	jmp    c0017260 <Vm::faultHandler(regs*)+0xa0>
c0017285:	83 fa 6d             	cmp    edx,0x6d
c0017288:	0f 84 34 03 00 00    	je     c00175c2 <Vm::faultHandler(regs*)+0x402>
c001728e:	77 17                	ja     c00172a7 <Vm::faultHandler(regs*)+0xe7>
c0017290:	83 fa 67             	cmp    edx,0x67
c0017293:	0f 84 92 01 00 00    	je     c001742b <Vm::faultHandler(regs*)+0x26b>
c0017299:	83 fa 6c             	cmp    edx,0x6c
c001729c:	0f 84 b1 02 00 00    	je     c0017553 <Vm::faultHandler(regs*)+0x393>
c00172a2:	e9 db 05 00 00       	jmp    c0017882 <Vm::faultHandler(regs*)+0x6c2>
c00172a7:	83 fa 6f             	cmp    edx,0x6f
c00172aa:	0f 84 40 04 00 00    	je     c00176f0 <Vm::faultHandler(regs*)+0x530>
c00172b0:	0f 82 a2 03 00 00    	jb     c0017658 <Vm::faultHandler(regs*)+0x498>
c00172b6:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c00172bc:	0f 84 76 01 00 00    	je     c0017438 <Vm::faultHandler(regs*)+0x278>
c00172c2:	e9 bb 05 00 00       	jmp    c0017882 <Vm::faultHandler(regs*)+0x6c2>
c00172c7:	81 fa ec 00 00 00    	cmp    edx,0xec
c00172cd:	0f 84 57 05 00 00    	je     c001782a <Vm::faultHandler(regs*)+0x66a>
c00172d3:	0f 87 a9 00 00 00    	ja     c0017382 <Vm::faultHandler(regs*)+0x1c2>
c00172d9:	81 fa e4 00 00 00    	cmp    edx,0xe4
c00172df:	0f 84 d6 04 00 00    	je     c00177bb <Vm::faultHandler(regs*)+0x5fb>
c00172e5:	77 78                	ja     c001735f <Vm::faultHandler(regs*)+0x19f>
c00172e7:	81 fa cd 00 00 00    	cmp    edx,0xcd
c00172ed:	0f 84 0e 02 00 00    	je     c0017501 <Vm::faultHandler(regs*)+0x341>
c00172f3:	81 fa cf 00 00 00    	cmp    edx,0xcf
c00172f9:	0f 85 83 05 00 00    	jne    c0017882 <Vm::faultHandler(regs*)+0x6c2>
c00172ff:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0017303:	89 d1                	mov    ecx,edx
c0017305:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0017308:	c1 e1 08             	shl    ecx,0x8
c001730b:	09 ca                	or     edx,ecx
c001730d:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0017310:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0017314:	89 d1                	mov    ecx,edx
c0017316:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c001731a:	c1 e1 08             	shl    ecx,0x8
c001731d:	09 ca                	or     edx,ecx
c001731f:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0017322:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0017326:	89 d1                	mov    ecx,edx
c0017328:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c001732c:	c1 e1 08             	shl    ecx,0x8
c001732f:	09 ca                	or     edx,ecx
c0017331:	81 ca 00 02 02 00    	or     edx,0x20200
c0017337:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001733a:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c001733e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017344:	d1 e8                	shr    eax,1
c0017346:	83 e0 01             	and    eax,0x1
c0017349:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001734c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001734f:	83 c0 06             	add    eax,0x6
c0017352:	25 ff ff 00 00       	and    eax,0xffff
c0017357:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001735a:	e9 1f 05 00 00       	jmp    c001787e <Vm::faultHandler(regs*)+0x6be>
c001735f:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0017365:	0f 84 95 04 00 00    	je     c0017800 <Vm::faultHandler(regs*)+0x640>
c001736b:	0f 82 66 04 00 00    	jb     c00177d7 <Vm::faultHandler(regs*)+0x617>
c0017371:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0017377:	0f 84 9a 04 00 00    	je     c0017817 <Vm::faultHandler(regs*)+0x657>
c001737d:	e9 00 05 00 00       	jmp    c0017882 <Vm::faultHandler(regs*)+0x6c2>
c0017382:	81 fa ef 00 00 00    	cmp    edx,0xef
c0017388:	0f 84 dd 04 00 00    	je     c001786b <Vm::faultHandler(regs*)+0x6ab>
c001738e:	77 2e                	ja     c00173be <Vm::faultHandler(regs*)+0x1fe>
c0017390:	81 fa ed 00 00 00    	cmp    edx,0xed
c0017396:	0f 84 aa 04 00 00    	je     c0017846 <Vm::faultHandler(regs*)+0x686>
c001739c:	81 fa ee 00 00 00    	cmp    edx,0xee
c00173a2:	0f 85 da 04 00 00    	jne    c0017882 <Vm::faultHandler(regs*)+0x6c2>
c00173a8:	50                   	push   eax
c00173a9:	50                   	push   eax
c00173aa:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00173ae:	50                   	push   eax
c00173af:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00173b3:	50                   	push   eax
c00173b4:	e8 13 f9 ff ff       	call   c0016ccc <Vm::outbv(unsigned short, unsigned char)>
c00173b9:	e9 a5 04 00 00       	jmp    c0017863 <Vm::faultHandler(regs*)+0x6a3>
c00173be:	81 fa fa 00 00 00    	cmp    edx,0xfa
c00173c4:	0f 84 6d 01 00 00    	je     c0017537 <Vm::faultHandler(regs*)+0x377>
c00173ca:	81 fa fb 00 00 00    	cmp    edx,0xfb
c00173d0:	0f 84 6f 01 00 00    	je     c0017545 <Vm::faultHandler(regs*)+0x385>
c00173d6:	81 fa f3 00 00 00    	cmp    edx,0xf3
c00173dc:	0f 85 a0 04 00 00    	jne    c0017882 <Vm::faultHandler(regs*)+0x6c2>
c00173e2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00173e5:	e9 76 fe ff ff       	jmp    c0017260 <Vm::faultHandler(regs*)+0xa0>
c00173ea:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00173ed:	be 02 00 00 00       	mov    esi,0x2
c00173f2:	e9 69 fe ff ff       	jmp    c0017260 <Vm::faultHandler(regs*)+0xa0>
c00173f7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00173fa:	be 03 00 00 00       	mov    esi,0x3
c00173ff:	e9 5c fe ff ff       	jmp    c0017260 <Vm::faultHandler(regs*)+0xa0>
c0017404:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017407:	be 04 00 00 00       	mov    esi,0x4
c001740c:	e9 4f fe ff ff       	jmp    c0017260 <Vm::faultHandler(regs*)+0xa0>
c0017411:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017414:	be 05 00 00 00       	mov    esi,0x5
c0017419:	e9 42 fe ff ff       	jmp    c0017260 <Vm::faultHandler(regs*)+0xa0>
c001741e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017421:	bd 01 00 00 00       	mov    ebp,0x1
c0017426:	e9 35 fe ff ff       	jmp    c0017260 <Vm::faultHandler(regs*)+0xa0>
c001742b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001742e:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0017433:	e9 28 fe ff ff       	jmp    c0017260 <Vm::faultHandler(regs*)+0xa0>
c0017438:	83 e5 01             	and    ebp,0x1
c001743b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001743e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017442:	74 30                	je     c0017474 <Vm::faultHandler(regs*)+0x2b4>
c0017444:	83 e9 04             	sub    ecx,0x4
c0017447:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001744d:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0017453:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017456:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0017459:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001745f:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0017463:	0f 84 12 04 00 00    	je     c001787b <Vm::faultHandler(regs*)+0x6bb>
c0017469:	80 ce 02             	or     dh,0x2
c001746c:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001746f:	e9 07 04 00 00       	jmp    c001787b <Vm::faultHandler(regs*)+0x6bb>
c0017474:	83 e9 02             	sub    ecx,0x2
c0017477:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001747d:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017480:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017484:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001748a:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001748e:	74 05                	je     c0017495 <Vm::faultHandler(regs*)+0x2d5>
c0017490:	80 ce 02             	or     dh,0x2
c0017493:	eb 03                	jmp    c0017498 <Vm::faultHandler(regs*)+0x2d8>
c0017495:	80 e6 fd             	and    dh,0xfd
c0017498:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001749c:	e9 da 03 00 00       	jmp    c001787b <Vm::faultHandler(regs*)+0x6bb>
c00174a1:	83 e5 01             	and    ebp,0x1
c00174a4:	74 2a                	je     c00174d0 <Vm::faultHandler(regs*)+0x310>
c00174a6:	8b 10                	mov    edx,DWORD PTR [eax]
c00174a8:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00174ae:	81 ca 00 02 02 00    	or     edx,0x20200
c00174b4:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00174b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00174b9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00174bf:	c1 e8 09             	shr    eax,0x9
c00174c2:	83 e0 01             	and    eax,0x1
c00174c5:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00174c8:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00174cb:	83 c0 04             	add    eax,0x4
c00174ce:	eb 24                	jmp    c00174f4 <Vm::faultHandler(regs*)+0x334>
c00174d0:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00174d3:	81 ca 00 02 02 00    	or     edx,0x20200
c00174d9:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00174dc:	0f b7 00             	movzx  eax,WORD PTR [eax]
c00174df:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00174e5:	c1 e8 09             	shr    eax,0x9
c00174e8:	83 e0 01             	and    eax,0x1
c00174eb:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00174ee:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00174f1:	83 c0 02             	add    eax,0x2
c00174f4:	25 ff ff 00 00       	and    eax,0xffff
c00174f9:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00174fc:	e9 7a 03 00 00       	jmp    c001787b <Vm::faultHandler(regs*)+0x6bb>
c0017501:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017505:	3d ee 00 00 00       	cmp    eax,0xee
c001750a:	75 10                	jne    c001751c <Vm::faultHandler(regs*)+0x35c>
c001750c:	83 ec 0c             	sub    esp,0xc
c001750f:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0017512:	e8 52 f8 ff ff       	call   c0016d69 <Vm::mainloop3(unsigned long)>
c0017517:	e9 4a 03 00 00       	jmp    c0017866 <Vm::faultHandler(regs*)+0x6a6>
c001751c:	83 ec 0c             	sub    esp,0xc
c001751f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017523:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017527:	51                   	push   ecx
c0017528:	50                   	push   eax
c0017529:	53                   	push   ebx
c001752a:	e8 80 fb ff ff       	call   c00170af <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001752f:	83 c4 20             	add    esp,0x20
c0017532:	e9 47 03 00 00       	jmp    c001787e <Vm::faultHandler(regs*)+0x6be>
c0017537:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001753c:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0017540:	e9 36 03 00 00       	jmp    c001787b <Vm::faultHandler(regs*)+0x6bb>
c0017545:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001754a:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001754e:	e9 28 03 00 00       	jmp    c001787b <Vm::faultHandler(regs*)+0x6bb>
c0017553:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017558:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001755b:	74 2b                	je     c0017588 <Vm::faultHandler(regs*)+0x3c8>
c001755d:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0017564:	76 22                	jbe    c0017588 <Vm::faultHandler(regs*)+0x3c8>
c0017566:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001756a:	50                   	push   eax
c001756b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001756f:	50                   	push   eax
c0017570:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017574:	50                   	push   eax
c0017575:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017579:	50                   	push   eax
c001757a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001757e:	50                   	push   eax
c001757f:	6a 6c                	push   0x6c
c0017581:	6a 6c                	push   0x6c
c0017583:	e9 c0 01 00 00       	jmp    c0017748 <Vm::faultHandler(regs*)+0x588>
c0017588:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001758c:	83 ec 0c             	sub    esp,0xc
c001758f:	0f b7 f6             	movzx  esi,si
c0017592:	50                   	push   eax
c0017593:	e8 21 f7 ff ff       	call   c0016cb9 <Vm::inbv(unsigned short)>
c0017598:	83 c4 0c             	add    esp,0xc
c001759b:	0f b6 c0             	movzx  eax,al
c001759e:	50                   	push   eax
c001759f:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00175a3:	50                   	push   eax
c00175a4:	56                   	push   esi
c00175a5:	e8 d6 fb ff ff       	call   c0017180 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00175aa:	83 c4 10             	add    esp,0x10
c00175ad:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00175b0:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00175b4:	74 03                	je     c00175b9 <Vm::faultHandler(regs*)+0x3f9>
c00175b6:	48                   	dec    eax
c00175b7:	eb 01                	jmp    c00175ba <Vm::faultHandler(regs*)+0x3fa>
c00175b9:	40                   	inc    eax
c00175ba:	0f b7 c0             	movzx  eax,ax
c00175bd:	e9 8e 00 00 00       	jmp    c0017650 <Vm::faultHandler(regs*)+0x490>
c00175c2:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00175c7:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00175ca:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00175cd:	74 29                	je     c00175f8 <Vm::faultHandler(regs*)+0x438>
c00175cf:	3d ff ff 00 00       	cmp    eax,0xffff
c00175d4:	76 22                	jbe    c00175f8 <Vm::faultHandler(regs*)+0x438>
c00175d6:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00175da:	50                   	push   eax
c00175db:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00175df:	50                   	push   eax
c00175e0:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00175e4:	50                   	push   eax
c00175e5:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00175e9:	50                   	push   eax
c00175ea:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00175ee:	50                   	push   eax
c00175ef:	6a 6d                	push   0x6d
c00175f1:	6a 6d                	push   0x6d
c00175f3:	e9 50 01 00 00       	jmp    c0017748 <Vm::faultHandler(regs*)+0x588>
c00175f8:	83 e5 01             	and    ebp,0x1
c00175fb:	0f b7 c8             	movzx  ecx,ax
c00175fe:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017601:	0f b7 f6             	movzx  esi,si
c0017604:	74 1e                	je     c0017624 <Vm::faultHandler(regs*)+0x464>
c0017606:	ed                   	in     eax,dx
c0017607:	55                   	push   ebp
c0017608:	50                   	push   eax
c0017609:	51                   	push   ecx
c001760a:	56                   	push   esi
c001760b:	e8 9b fb ff ff       	call   c00171ab <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0017610:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017613:	83 c4 10             	add    esp,0x10
c0017616:	8d 50 04             	lea    edx,[eax+0x4]
c0017619:	83 e8 04             	sub    eax,0x4
c001761c:	81 e2 ff ff 00 00    	and    edx,0xffff
c0017622:	eb 20                	jmp    c0017644 <Vm::faultHandler(regs*)+0x484>
c0017624:	66 ed                	in     ax,dx
c0017626:	57                   	push   edi
c0017627:	0f b7 c0             	movzx  eax,ax
c001762a:	50                   	push   eax
c001762b:	51                   	push   ecx
c001762c:	56                   	push   esi
c001762d:	e8 63 fb ff ff       	call   c0017195 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0017632:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017635:	83 c4 10             	add    esp,0x10
c0017638:	8d 50 02             	lea    edx,[eax+0x2]
c001763b:	83 e8 02             	sub    eax,0x2
c001763e:	81 e2 ff ff 00 00    	and    edx,0xffff
c0017644:	25 ff ff 00 00       	and    eax,0xffff
c0017649:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001764d:	0f 44 c2             	cmove  eax,edx
c0017650:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0017653:	e9 23 02 00 00       	jmp    c001787b <Vm::faultHandler(regs*)+0x6bb>
c0017658:	8d 46 ff             	lea    eax,[esi-0x1]
c001765b:	0f b6 f0             	movzx  esi,al
c001765e:	83 fe 05             	cmp    esi,0x5
c0017661:	77 23                	ja     c0017686 <Vm::faultHandler(regs*)+0x4c6>
c0017663:	ff 24 b5 ac 2b 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd454]
c001766a:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c001766f:	eb 15                	jmp    c0017686 <Vm::faultHandler(regs*)+0x4c6>
c0017671:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0017675:	eb 0f                	jmp    c0017686 <Vm::faultHandler(regs*)+0x4c6>
c0017677:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001767b:	eb 09                	jmp    c0017686 <Vm::faultHandler(regs*)+0x4c6>
c001767d:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0017681:	eb 03                	jmp    c0017686 <Vm::faultHandler(regs*)+0x4c6>
c0017683:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0017686:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001768b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001768e:	74 29                	je     c00176b9 <Vm::faultHandler(regs*)+0x4f9>
c0017690:	3d ff ff 00 00       	cmp    eax,0xffff
c0017695:	76 22                	jbe    c00176b9 <Vm::faultHandler(regs*)+0x4f9>
c0017697:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001769b:	50                   	push   eax
c001769c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00176a0:	50                   	push   eax
c00176a1:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00176a5:	50                   	push   eax
c00176a6:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00176aa:	50                   	push   eax
c00176ab:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00176af:	50                   	push   eax
c00176b0:	6a 6e                	push   0x6e
c00176b2:	6a 6e                	push   0x6e
c00176b4:	e9 8f 00 00 00       	jmp    c0017748 <Vm::faultHandler(regs*)+0x588>
c00176b9:	52                   	push   edx
c00176ba:	0f b7 c0             	movzx  eax,ax
c00176bd:	52                   	push   edx
c00176be:	50                   	push   eax
c00176bf:	57                   	push   edi
c00176c0:	e8 87 fa ff ff       	call   c001714c <Vm::readByteFromReal(unsigned short, unsigned short)>
c00176c5:	59                   	pop    ecx
c00176c6:	5e                   	pop    esi
c00176c7:	0f b6 c0             	movzx  eax,al
c00176ca:	50                   	push   eax
c00176cb:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00176cf:	50                   	push   eax
c00176d0:	e8 f7 f5 ff ff       	call   c0016ccc <Vm::outbv(unsigned short, unsigned char)>
c00176d5:	83 c4 10             	add    esp,0x10
c00176d8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00176db:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00176df:	74 03                	je     c00176e4 <Vm::faultHandler(regs*)+0x524>
c00176e1:	48                   	dec    eax
c00176e2:	eb 01                	jmp    c00176e5 <Vm::faultHandler(regs*)+0x525>
c00176e4:	40                   	inc    eax
c00176e5:	0f b7 c0             	movzx  eax,ax
c00176e8:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00176eb:	e9 8b 01 00 00       	jmp    c001787b <Vm::faultHandler(regs*)+0x6bb>
c00176f0:	8d 46 ff             	lea    eax,[esi-0x1]
c00176f3:	0f b6 f0             	movzx  esi,al
c00176f6:	83 fe 05             	cmp    esi,0x5
c00176f9:	77 1e                	ja     c0017719 <Vm::faultHandler(regs*)+0x559>
c00176fb:	ff 24 b5 c4 2b 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd43c]
c0017702:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017706:	eb 11                	jmp    c0017719 <Vm::faultHandler(regs*)+0x559>
c0017708:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001770b:	eb 0c                	jmp    c0017719 <Vm::faultHandler(regs*)+0x559>
c001770d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0017710:	eb 07                	jmp    c0017719 <Vm::faultHandler(regs*)+0x559>
c0017712:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0017715:	eb 02                	jmp    c0017719 <Vm::faultHandler(regs*)+0x559>
c0017717:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0017719:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001771e:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0017721:	74 37                	je     c001775a <Vm::faultHandler(regs*)+0x59a>
c0017723:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0017729:	76 2f                	jbe    c001775a <Vm::faultHandler(regs*)+0x59a>
c001772b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001772f:	50                   	push   eax
c0017730:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017734:	50                   	push   eax
c0017735:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017739:	50                   	push   eax
c001773a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001773e:	50                   	push   eax
c001773f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017743:	50                   	push   eax
c0017744:	6a 6f                	push   0x6f
c0017746:	6a 6f                	push   0x6f
c0017748:	68 50 2b 02 c0       	push   0xc0022b50
c001774d:	e8 b8 31 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017752:	83 c4 20             	add    esp,0x20
c0017755:	e9 86 01 00 00       	jmp    c00178e0 <Vm::faultHandler(regs*)+0x720>
c001775a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001775d:	0f b7 d7             	movzx  edx,di
c0017760:	0f b7 c6             	movzx  eax,si
c0017763:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0017766:	81 e1 00 04 00 00    	and    ecx,0x400
c001776c:	83 e5 01             	and    ebp,0x1
c001776f:	74 1c                	je     c001778d <Vm::faultHandler(regs*)+0x5cd>
c0017771:	55                   	push   ebp
c0017772:	55                   	push   ebp
c0017773:	50                   	push   eax
c0017774:	52                   	push   edx
c0017775:	e8 f5 f9 ff ff       	call   c001716f <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001777a:	83 c4 10             	add    esp,0x10
c001777d:	89 fa                	mov    edx,edi
c001777f:	ef                   	out    dx,eax
c0017780:	8d 46 04             	lea    eax,[esi+0x4]
c0017783:	83 ee 04             	sub    esi,0x4
c0017786:	25 ff ff 00 00       	and    eax,0xffff
c001778b:	eb 1b                	jmp    c00177a8 <Vm::faultHandler(regs*)+0x5e8>
c001778d:	55                   	push   ebp
c001778e:	55                   	push   ebp
c001778f:	50                   	push   eax
c0017790:	52                   	push   edx
c0017791:	e8 c7 f9 ff ff       	call   c001715d <Vm::readWordFromReal(unsigned short, unsigned short)>
c0017796:	83 c4 10             	add    esp,0x10
c0017799:	89 fa                	mov    edx,edi
c001779b:	66 ef                	out    dx,ax
c001779d:	8d 46 02             	lea    eax,[esi+0x2]
c00177a0:	83 ee 02             	sub    esi,0x2
c00177a3:	25 ff ff 00 00       	and    eax,0xffff
c00177a8:	81 e6 ff ff 00 00    	and    esi,0xffff
c00177ae:	85 c9                	test   ecx,ecx
c00177b0:	0f 44 f0             	cmove  esi,eax
c00177b3:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00177b6:	e9 c0 00 00 00       	jmp    c001787b <Vm::faultHandler(regs*)+0x6bb>
c00177bb:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00177c2:	83 ec 0c             	sub    esp,0xc
c00177c5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00177c9:	50                   	push   eax
c00177ca:	e8 ea f4 ff ff       	call   c0016cb9 <Vm::inbv(unsigned short)>
c00177cf:	0f b6 c0             	movzx  eax,al
c00177d2:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00177d5:	eb 3a                	jmp    c0017811 <Vm::faultHandler(regs*)+0x651>
c00177d7:	83 e5 01             	and    ebp,0x1
c00177da:	74 07                	je     c00177e3 <Vm::faultHandler(regs*)+0x623>
c00177dc:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00177e0:	ed                   	in     eax,dx
c00177e1:	eb 14                	jmp    c00177f7 <Vm::faultHandler(regs*)+0x637>
c00177e3:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00177e6:	66 31 f6             	xor    si,si
c00177e9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00177ec:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00177f0:	66 ed                	in     ax,dx
c00177f2:	0f b7 c0             	movzx  eax,ax
c00177f5:	09 f0                	or     eax,esi
c00177f7:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00177fa:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00177fe:	eb 7e                	jmp    c001787e <Vm::faultHandler(regs*)+0x6be>
c0017800:	52                   	push   edx
c0017801:	52                   	push   edx
c0017802:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017806:	50                   	push   eax
c0017807:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001780b:	50                   	push   eax
c001780c:	e8 bb f4 ff ff       	call   c0016ccc <Vm::outbv(unsigned short, unsigned char)>
c0017811:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017815:	eb 4f                	jmp    c0017866 <Vm::faultHandler(regs*)+0x6a6>
c0017817:	83 e5 01             	and    ebp,0x1
c001781a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001781d:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017821:	74 03                	je     c0017826 <Vm::faultHandler(regs*)+0x666>
c0017823:	ef                   	out    dx,eax
c0017824:	eb d4                	jmp    c00177fa <Vm::faultHandler(regs*)+0x63a>
c0017826:	66 ef                	out    dx,ax
c0017828:	eb d0                	jmp    c00177fa <Vm::faultHandler(regs*)+0x63a>
c001782a:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001782e:	83 ec 0c             	sub    esp,0xc
c0017831:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017838:	50                   	push   eax
c0017839:	e8 7b f4 ff ff       	call   c0016cb9 <Vm::inbv(unsigned short)>
c001783e:	0f b6 c0             	movzx  eax,al
c0017841:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017844:	eb 1d                	jmp    c0017863 <Vm::faultHandler(regs*)+0x6a3>
c0017846:	83 e5 01             	and    ebp,0x1
c0017849:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001784c:	74 03                	je     c0017851 <Vm::faultHandler(regs*)+0x691>
c001784e:	ed                   	in     eax,dx
c001784f:	eb 0d                	jmp    c001785e <Vm::faultHandler(regs*)+0x69e>
c0017851:	66 ed                	in     ax,dx
c0017853:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0017856:	0f b7 c0             	movzx  eax,ax
c0017859:	66 31 d2             	xor    dx,dx
c001785c:	09 d0                	or     eax,edx
c001785e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017861:	eb 18                	jmp    c001787b <Vm::faultHandler(regs*)+0x6bb>
c0017863:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017866:	83 c4 10             	add    esp,0x10
c0017869:	eb 13                	jmp    c001787e <Vm::faultHandler(regs*)+0x6be>
c001786b:	83 e5 01             	and    ebp,0x1
c001786e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017871:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017874:	74 03                	je     c0017879 <Vm::faultHandler(regs*)+0x6b9>
c0017876:	ef                   	out    dx,eax
c0017877:	eb 02                	jmp    c001787b <Vm::faultHandler(regs*)+0x6bb>
c0017879:	66 ef                	out    dx,ax
c001787b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001787e:	b0 01                	mov    al,0x1
c0017880:	eb 60                	jmp    c00178e2 <Vm::faultHandler(regs*)+0x722>
c0017882:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017886:	50                   	push   eax
c0017887:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001788b:	50                   	push   eax
c001788c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017890:	50                   	push   eax
c0017891:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017895:	50                   	push   eax
c0017896:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001789a:	50                   	push   eax
c001789b:	52                   	push   edx
c001789c:	52                   	push   edx
c001789d:	68 7d 2b 02 c0       	push   0xc0022b7d
c00178a2:	e8 63 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00178a7:	83 c4 20             	add    esp,0x20
c00178aa:	83 ec 0c             	sub    esp,0xc
c00178ad:	6a 60                	push   0x60
c00178af:	e8 05 f4 ff ff       	call   c0016cb9 <Vm::inbv(unsigned short)>
c00178b4:	83 c4 10             	add    esp,0x10
c00178b7:	0f b6 d0             	movzx  edx,al
c00178ba:	83 fa 1c             	cmp    edx,0x1c
c00178bd:	74 05                	je     c00178c4 <Vm::faultHandler(regs*)+0x704>
c00178bf:	83 fa 5a             	cmp    edx,0x5a
c00178c2:	75 e6                	jne    c00178aa <Vm::faultHandler(regs*)+0x6ea>
c00178c4:	0f b6 c0             	movzx  eax,al
c00178c7:	83 f8 1c             	cmp    eax,0x1c
c00178ca:	74 05                	je     c00178d1 <Vm::faultHandler(regs*)+0x711>
c00178cc:	83 f8 5a             	cmp    eax,0x5a
c00178cf:	75 0f                	jne    c00178e0 <Vm::faultHandler(regs*)+0x720>
c00178d1:	83 ec 0c             	sub    esp,0xc
c00178d4:	6a 60                	push   0x60
c00178d6:	e8 de f3 ff ff       	call   c0016cb9 <Vm::inbv(unsigned short)>
c00178db:	83 c4 10             	add    esp,0x10
c00178de:	eb e4                	jmp    c00178c4 <Vm::faultHandler(regs*)+0x704>
c00178e0:	31 c0                	xor    eax,eax
c00178e2:	83 c4 2c             	add    esp,0x2c
c00178e5:	5b                   	pop    ebx
c00178e6:	5e                   	pop    esi
c00178e7:	5f                   	pop    edi
c00178e8:	5d                   	pop    ebp
c00178e9:	c3                   	ret    

c00178ea <noCopro(unsigned long)>:
c00178ea:	c3                   	ret    

c00178eb <nmiHandler(regs*, void*)>:
c00178eb:	83 ec 0c             	sub    esp,0xc
c00178ee:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00178f3:	83 ec 0c             	sub    esp,0xc
c00178f6:	50                   	push   eax
c00178f7:	e8 da f9 fe ff       	call   c00072d6 <Computer::handleNMI()>
c00178fc:	83 c4 10             	add    esp,0x10
c00178ff:	90                   	nop
c0017900:	83 c4 0c             	add    esp,0xc
c0017903:	c3                   	ret    

c0017904 <doubleFault(regs*, void*)>:
c0017904:	55                   	push   ebp
c0017905:	89 e5                	mov    ebp,esp
c0017907:	83 ec 08             	sub    esp,0x8
c001790a:	83 ec 0c             	sub    esp,0xc
c001790d:	68 dc 2b 02 c0       	push   0xc0022bdc
c0017912:	e8 f4 9c ff ff       	call   c001160b <KePanic(char const*)>
c0017917:	83 c4 10             	add    esp,0x10
c001791a:	90                   	nop
c001791b:	c9                   	leave  
c001791c:	c3                   	ret    

c001791d <displayDebugInfo(regs*)>:
c001791d:	83 ec 1c             	sub    esp,0x1c
c0017920:	0f 20 c0             	mov    eax,cr0
c0017923:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017927:	0f 20 d0             	mov    eax,cr2
c001792a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001792e:	0f 20 d8             	mov    eax,cr3
c0017931:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017935:	0f 20 e0             	mov    eax,cr4
c0017938:	89 04 24             	mov    DWORD PTR [esp],eax
c001793b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001793f:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0017942:	83 ec 08             	sub    esp,0x8
c0017945:	50                   	push   eax
c0017946:	68 f8 2b 02 c0       	push   0xc0022bf8
c001794b:	e8 ba 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017950:	83 c4 10             	add    esp,0x10
c0017953:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017957:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001795a:	83 ec 08             	sub    esp,0x8
c001795d:	50                   	push   eax
c001795e:	68 e9 2b 02 c0       	push   0xc0022be9
c0017963:	e8 a2 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017968:	83 c4 10             	add    esp,0x10
c001796b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001796f:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017972:	83 ec 08             	sub    esp,0x8
c0017975:	50                   	push   eax
c0017976:	68 f4 2b 02 c0       	push   0xc0022bf4
c001797b:	e8 8a 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017980:	83 c4 10             	add    esp,0x10
c0017983:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017987:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001798a:	83 ec 08             	sub    esp,0x8
c001798d:	50                   	push   eax
c001798e:	68 03 2c 02 c0       	push   0xc0022c03
c0017993:	e8 72 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017998:	83 c4 10             	add    esp,0x10
c001799b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001799f:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00179a2:	83 ec 08             	sub    esp,0x8
c00179a5:	50                   	push   eax
c00179a6:	68 0e 2c 02 c0       	push   0xc0022c0e
c00179ab:	e8 5a 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00179b0:	83 c4 10             	add    esp,0x10
c00179b3:	83 ec 08             	sub    esp,0x8
c00179b6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00179ba:	68 19 2c 02 c0       	push   0xc0022c19
c00179bf:	e8 46 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00179c4:	83 c4 10             	add    esp,0x10
c00179c7:	83 ec 08             	sub    esp,0x8
c00179ca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00179ce:	68 24 2c 02 c0       	push   0xc0022c24
c00179d3:	e8 32 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00179d8:	83 c4 10             	add    esp,0x10
c00179db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179df:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00179e2:	c1 e0 05             	shl    eax,0x5
c00179e5:	8d 90 a0 3f 02 c0    	lea    edx,[eax-0x3ffdc060]
c00179eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179ef:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00179f2:	83 ec 04             	sub    esp,0x4
c00179f5:	52                   	push   edx
c00179f6:	50                   	push   eax
c00179f7:	68 2f 2c 02 c0       	push   0xc0022c2f
c00179fc:	e8 09 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017a01:	83 c4 10             	add    esp,0x10
c0017a04:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a09:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a0f:	83 ec 0c             	sub    esp,0xc
c0017a12:	50                   	push   eax
c0017a13:	e8 57 0d ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0017a18:	83 c4 10             	add    esp,0x10
c0017a1b:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a20:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a26:	83 ec 08             	sub    esp,0x8
c0017a29:	68 3e 2c 02 c0       	push   0xc0022c3e
c0017a2e:	50                   	push   eax
c0017a2f:	e8 78 10 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017a34:	83 c4 10             	add    esp,0x10
c0017a37:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a3c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a42:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017a46:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0017a49:	83 ec 08             	sub    esp,0x8
c0017a4c:	52                   	push   edx
c0017a4d:	50                   	push   eax
c0017a4e:	e8 13 10 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017a53:	83 c4 10             	add    esp,0x10
c0017a56:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a5b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a61:	83 ec 08             	sub    esp,0x8
c0017a64:	68 4c 2c 02 c0       	push   0xc0022c4c
c0017a69:	50                   	push   eax
c0017a6a:	e8 3d 10 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017a6f:	83 c4 10             	add    esp,0x10
c0017a72:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a77:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a7d:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0017a82:	8b 12                	mov    edx,DWORD PTR [edx]
c0017a84:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017a87:	83 c2 0c             	add    edx,0xc
c0017a8a:	83 ec 08             	sub    esp,0x8
c0017a8d:	52                   	push   edx
c0017a8e:	50                   	push   eax
c0017a8f:	e8 18 10 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017a94:	83 c4 10             	add    esp,0x10
c0017a97:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a9c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017aa2:	83 ec 08             	sub    esp,0x8
c0017aa5:	68 55 2c 02 c0       	push   0xc0022c55
c0017aaa:	50                   	push   eax
c0017aab:	e8 fc 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017ab0:	83 c4 10             	add    esp,0x10
c0017ab3:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ab8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017abe:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017ac2:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017ac5:	83 ec 08             	sub    esp,0x8
c0017ac8:	52                   	push   edx
c0017ac9:	50                   	push   eax
c0017aca:	e8 97 0f ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017acf:	83 c4 10             	add    esp,0x10
c0017ad2:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ad7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017add:	83 ec 08             	sub    esp,0x8
c0017ae0:	68 5d 2c 02 c0       	push   0xc0022c5d
c0017ae5:	50                   	push   eax
c0017ae6:	e8 c1 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017aeb:	83 c4 10             	add    esp,0x10
c0017aee:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017af3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017af9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017afd:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0017b00:	83 ec 08             	sub    esp,0x8
c0017b03:	52                   	push   edx
c0017b04:	50                   	push   eax
c0017b05:	e8 5c 0f ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017b0a:	83 c4 10             	add    esp,0x10
c0017b0d:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b12:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b18:	83 ec 08             	sub    esp,0x8
c0017b1b:	68 65 2c 02 c0       	push   0xc0022c65
c0017b20:	50                   	push   eax
c0017b21:	e8 86 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017b26:	83 c4 10             	add    esp,0x10
c0017b29:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b2e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b34:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b38:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0017b3b:	83 ec 08             	sub    esp,0x8
c0017b3e:	52                   	push   edx
c0017b3f:	50                   	push   eax
c0017b40:	e8 21 0f ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017b45:	83 c4 10             	add    esp,0x10
c0017b48:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b4d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b53:	83 ec 08             	sub    esp,0x8
c0017b56:	68 6d 2c 02 c0       	push   0xc0022c6d
c0017b5b:	50                   	push   eax
c0017b5c:	e8 4b 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017b61:	83 c4 10             	add    esp,0x10
c0017b64:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b69:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b6f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b73:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017b76:	83 ec 08             	sub    esp,0x8
c0017b79:	52                   	push   edx
c0017b7a:	50                   	push   eax
c0017b7b:	e8 e6 0e ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017b80:	83 c4 10             	add    esp,0x10
c0017b83:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b88:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b8e:	83 ec 08             	sub    esp,0x8
c0017b91:	68 75 2c 02 c0       	push   0xc0022c75
c0017b96:	50                   	push   eax
c0017b97:	e8 10 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017b9c:	83 c4 10             	add    esp,0x10
c0017b9f:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ba4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017baa:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017bae:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0017bb1:	83 ec 08             	sub    esp,0x8
c0017bb4:	52                   	push   edx
c0017bb5:	50                   	push   eax
c0017bb6:	e8 ab 0e ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017bbb:	83 c4 10             	add    esp,0x10
c0017bbe:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bc3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bc9:	83 ec 08             	sub    esp,0x8
c0017bcc:	68 7d 2c 02 c0       	push   0xc0022c7d
c0017bd1:	50                   	push   eax
c0017bd2:	e8 d5 0e ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017bd7:	83 c4 10             	add    esp,0x10
c0017bda:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bdf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017be5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017be9:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017bec:	83 ec 08             	sub    esp,0x8
c0017bef:	52                   	push   edx
c0017bf0:	50                   	push   eax
c0017bf1:	e8 70 0e ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017bf6:	83 c4 10             	add    esp,0x10
c0017bf9:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bfe:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c04:	83 ec 08             	sub    esp,0x8
c0017c07:	68 85 2c 02 c0       	push   0xc0022c85
c0017c0c:	50                   	push   eax
c0017c0d:	e8 9a 0e ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017c12:	83 c4 10             	add    esp,0x10
c0017c15:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c1a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c20:	83 ec 08             	sub    esp,0x8
c0017c23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017c27:	50                   	push   eax
c0017c28:	e8 39 0e ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017c2d:	83 c4 10             	add    esp,0x10
c0017c30:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c35:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c3b:	83 ec 08             	sub    esp,0x8
c0017c3e:	68 8e 2c 02 c0       	push   0xc0022c8e
c0017c43:	50                   	push   eax
c0017c44:	e8 63 0e ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017c49:	83 c4 10             	add    esp,0x10
c0017c4c:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c51:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c57:	83 ec 08             	sub    esp,0x8
c0017c5a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017c5e:	50                   	push   eax
c0017c5f:	e8 02 0e ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017c64:	83 c4 10             	add    esp,0x10
c0017c67:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c6c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c72:	83 ec 08             	sub    esp,0x8
c0017c75:	68 96 2c 02 c0       	push   0xc0022c96
c0017c7a:	50                   	push   eax
c0017c7b:	e8 2c 0e ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017c80:	83 c4 10             	add    esp,0x10
c0017c83:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c88:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c8e:	83 ec 08             	sub    esp,0x8
c0017c91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017c95:	50                   	push   eax
c0017c96:	e8 cb 0d ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017c9b:	83 c4 10             	add    esp,0x10
c0017c9e:	fa                   	cli    
c0017c9f:	f4                   	hlt    
c0017ca0:	eb fe                	jmp    c0017ca0 <displayDebugInfo(regs*)+0x383>

c0017ca2 <HalSystemIdle()>:
c0017ca2:	56                   	push   esi
c0017ca3:	53                   	push   ebx
c0017ca4:	83 ec 14             	sub    esp,0x14
c0017ca7:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017cac:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017cb2:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0017cb8:	83 e0 04             	and    eax,0x4
c0017cbb:	0f b6 c0             	movzx  eax,al
c0017cbe:	85 c0                	test   eax,eax
c0017cc0:	0f 95 c0             	setne  al
c0017cc3:	0f b6 c0             	movzx  eax,al
c0017cc6:	85 c0                	test   eax,eax
c0017cc8:	74 4c                	je     c0017d16 <HalSystemIdle()+0x74>
c0017cca:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017ccf:	83 ec 08             	sub    esp,0x8
c0017cd2:	68 e1 00 00 00       	push   0xe1
c0017cd7:	50                   	push   eax
c0017cd8:	e8 05 f4 fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c0017cdd:	83 c4 10             	add    esp,0x10
c0017ce0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017ce4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017ce8:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017ced:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017cf1:	83 e2 02             	and    edx,0x2
c0017cf4:	89 d3                	mov    ebx,edx
c0017cf6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017cfa:	83 e2 00             	and    edx,0x0
c0017cfd:	89 d6                	mov    esi,edx
c0017cff:	56                   	push   esi
c0017d00:	53                   	push   ebx
c0017d01:	68 e1 00 00 00       	push   0xe1
c0017d06:	50                   	push   eax
c0017d07:	e8 02 f4 fe ff       	call   c000710e <Computer::wrmsr(unsigned int, unsigned long long)>
c0017d0c:	83 c4 10             	add    esp,0x10
c0017d0f:	e8 80 84 fe ff       	call   c0000194 <doTPAUSE>
c0017d14:	eb 01                	jmp    c0017d17 <HalSystemIdle()+0x75>
c0017d16:	f4                   	hlt    
c0017d17:	90                   	nop
c0017d18:	83 c4 14             	add    esp,0x14
c0017d1b:	5b                   	pop    ebx
c0017d1c:	5e                   	pop    esi
c0017d1d:	c3                   	ret    

c0017d1e <displayProgramFault(char const*)>:
c0017d1e:	83 ec 0c             	sub    esp,0xc
c0017d21:	83 ec 0c             	sub    esp,0xc
c0017d24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d28:	e8 dd 2b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017d2d:	83 c4 10             	add    esp,0x10
c0017d30:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017d35:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d37:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017d3a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d40:	85 c0                	test   eax,eax
c0017d42:	74 21                	je     c0017d65 <displayProgramFault(char const*)+0x47>
c0017d44:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017d49:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d4b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017d4e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d54:	6a 04                	push   0x4
c0017d56:	6a 0f                	push   0xf
c0017d58:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017d5c:	50                   	push   eax
c0017d5d:	e8 bc 0d ff ff       	call   c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017d62:	83 c4 10             	add    esp,0x10
c0017d65:	90                   	nop
c0017d66:	83 c4 0c             	add    esp,0xc
c0017d69:	c3                   	ret    

c0017d6a <gpFault(regs*, void*)>:
c0017d6a:	83 ec 1c             	sub    esp,0x1c
c0017d6d:	c7 05 74 c7 02 c0 c0 71 01 c0 	mov    DWORD PTR ds:0xc002c774,0xc00171c0
c0017d77:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017d7c:	85 c0                	test   eax,eax
c0017d7e:	74 1e                	je     c0017d9e <gpFault(regs*, void*)+0x34>
c0017d80:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017d85:	83 ec 0c             	sub    esp,0xc
c0017d88:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d8c:	ff d0                	call   eax
c0017d8e:	83 c4 10             	add    esp,0x10
c0017d91:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017d95:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017d9a:	85 c0                	test   eax,eax
c0017d9c:	75 2e                	jne    c0017dcc <gpFault(regs*, void*)+0x62>
c0017d9e:	83 ec 0c             	sub    esp,0xc
c0017da1:	68 9e 2c 02 c0       	push   0xc0022c9e
c0017da6:	e8 73 ff ff ff       	call   c0017d1e <displayProgramFault(char const*)>
c0017dab:	83 c4 10             	add    esp,0x10
c0017dae:	83 ec 0c             	sub    esp,0xc
c0017db1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017db5:	e8 63 fb ff ff       	call   c001791d <displayDebugInfo(regs*)>
c0017dba:	83 c4 10             	add    esp,0x10
c0017dbd:	83 ec 0c             	sub    esp,0xc
c0017dc0:	6a 00                	push   0x0
c0017dc2:	e8 99 ed ff ff       	call   c0016b60 <Thr::terminateFromIRQ(int)>
c0017dc7:	83 c4 10             	add    esp,0x10
c0017dca:	eb 01                	jmp    c0017dcd <gpFault(regs*, void*)+0x63>
c0017dcc:	90                   	nop
c0017dcd:	83 c4 1c             	add    esp,0x1c
c0017dd0:	c3                   	ret    

c0017dd1 <pgFault(regs*, void*)>:
c0017dd1:	83 ec 1c             	sub    esp,0x1c
c0017dd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017dd8:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017ddb:	0f 20 d0             	mov    eax,cr2
c0017dde:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017de2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017de6:	83 ec 04             	sub    esp,0x4
c0017de9:	52                   	push   edx
c0017dea:	50                   	push   eax
c0017deb:	68 7c 2d 02 c0       	push   0xc0022d7c
c0017df0:	e8 15 2b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017df5:	83 c4 10             	add    esp,0x10
c0017df8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017dfd:	8b 00                	mov    eax,DWORD PTR [eax]
c0017dff:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017e02:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017e08:	0f 20 d2             	mov    edx,cr2
c0017e0b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017e0f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017e13:	83 ec 08             	sub    esp,0x8
c0017e16:	52                   	push   edx
c0017e17:	50                   	push   eax
c0017e18:	e8 5d 25 ff ff       	call   c000a37a <VAS::tryLoadBackOffDisk(unsigned long)>
c0017e1d:	83 c4 10             	add    esp,0x10
c0017e20:	0f b6 c0             	movzx  eax,al
c0017e23:	85 c0                	test   eax,eax
c0017e25:	75 2e                	jne    c0017e55 <pgFault(regs*, void*)+0x84>
c0017e27:	83 ec 0c             	sub    esp,0xc
c0017e2a:	68 b7 2c 02 c0       	push   0xc0022cb7
c0017e2f:	e8 ea fe ff ff       	call   c0017d1e <displayProgramFault(char const*)>
c0017e34:	83 c4 10             	add    esp,0x10
c0017e37:	83 ec 0c             	sub    esp,0xc
c0017e3a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e3e:	e8 da fa ff ff       	call   c001791d <displayDebugInfo(regs*)>
c0017e43:	83 c4 10             	add    esp,0x10
c0017e46:	83 ec 0c             	sub    esp,0xc
c0017e49:	6a 00                	push   0x0
c0017e4b:	e8 10 ed ff ff       	call   c0016b60 <Thr::terminateFromIRQ(int)>
c0017e50:	83 c4 10             	add    esp,0x10
c0017e53:	eb 01                	jmp    c0017e56 <pgFault(regs*, void*)+0x85>
c0017e55:	90                   	nop
c0017e56:	83 c4 1c             	add    esp,0x1c
c0017e59:	c3                   	ret    

c0017e5a <otherISRHandler(regs*, void*)>:
c0017e5a:	83 ec 0c             	sub    esp,0xc
c0017e5d:	83 ec 0c             	sub    esp,0xc
c0017e60:	68 a4 2d 02 c0       	push   0xc0022da4
c0017e65:	e8 b4 fe ff ff       	call   c0017d1e <displayProgramFault(char const*)>
c0017e6a:	83 c4 10             	add    esp,0x10
c0017e6d:	83 ec 0c             	sub    esp,0xc
c0017e70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e74:	e8 a4 fa ff ff       	call   c001791d <displayDebugInfo(regs*)>
c0017e79:	83 c4 10             	add    esp,0x10
c0017e7c:	83 ec 0c             	sub    esp,0xc
c0017e7f:	6a 00                	push   0x0
c0017e81:	e8 da ec ff ff       	call   c0016b60 <Thr::terminateFromIRQ(int)>
c0017e86:	83 c4 10             	add    esp,0x10
c0017e89:	90                   	nop
c0017e8a:	83 c4 0c             	add    esp,0xc
c0017e8d:	c3                   	ret    

c0017e8e <opcodeFault(regs*, void*)>:
c0017e8e:	55                   	push   ebp
c0017e8f:	89 e5                	mov    ebp,esp
c0017e91:	83 ec 08             	sub    esp,0x8
c0017e94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e97:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017e9a:	83 ec 08             	sub    esp,0x8
c0017e9d:	50                   	push   eax
c0017e9e:	68 c2 2c 02 c0       	push   0xc0022cc2
c0017ea3:	e8 62 2a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017ea8:	83 c4 10             	add    esp,0x10
c0017eab:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017eb0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017eb6:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0017ebc:	0f b6 c0             	movzx  eax,al
c0017ebf:	85 c0                	test   eax,eax
c0017ec1:	74 21                	je     c0017ee4 <opcodeFault(regs*, void*)+0x56>
c0017ec3:	83 ec 0c             	sub    esp,0xc
c0017ec6:	68 cc 2d 02 c0       	push   0xc0022dcc
c0017ecb:	e8 3a 2a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017ed0:	83 c4 10             	add    esp,0x10
c0017ed3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ed6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017ed9:	8d 50 19             	lea    edx,[eax+0x19]
c0017edc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017edf:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017ee2:	eb 2b                	jmp    c0017f0f <opcodeFault(regs*, void*)+0x81>
c0017ee4:	83 ec 0c             	sub    esp,0xc
c0017ee7:	68 d0 2c 02 c0       	push   0xc0022cd0
c0017eec:	e8 2d fe ff ff       	call   c0017d1e <displayProgramFault(char const*)>
c0017ef1:	83 c4 10             	add    esp,0x10
c0017ef4:	83 ec 0c             	sub    esp,0xc
c0017ef7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017efa:	e8 1e fa ff ff       	call   c001791d <displayDebugInfo(regs*)>
c0017eff:	83 c4 10             	add    esp,0x10
c0017f02:	83 ec 0c             	sub    esp,0xc
c0017f05:	6a 00                	push   0x0
c0017f07:	e8 54 ec ff ff       	call   c0016b60 <Thr::terminateFromIRQ(int)>
c0017f0c:	83 c4 10             	add    esp,0x10
c0017f0f:	c9                   	leave  
c0017f10:	c3                   	ret    

c0017f11 <i386SaveCoprocessor(void*)>:
c0017f11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017f15:	83 c0 3f             	add    eax,0x3f
c0017f18:	83 e0 c0             	and    eax,0xffffffc0
c0017f1b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017f1f:	ff 25 70 c7 02 c0    	jmp    DWORD PTR ds:0xc002c770

c0017f25 <i386LoadCoprocessor(void*)>:
c0017f25:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017f29:	83 c0 3f             	add    eax,0x3f
c0017f2c:	83 e0 c0             	and    eax,0xffffffc0
c0017f2f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017f33:	ff 25 6c c7 02 c0    	jmp    DWORD PTR ds:0xc002c76c

c0017f39 <x87EmulHandler(regs*, void*)>:
c0017f39:	53                   	push   ebx
c0017f3a:	83 ec 08             	sub    esp,0x8
c0017f3d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f42:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017f46:	74 10                	je     c0017f58 <x87EmulHandler(regs*, void*)+0x1f>
c0017f48:	83 ec 0c             	sub    esp,0xc
c0017f4b:	68 dd 2c 02 c0       	push   0xc0022cdd
c0017f50:	e8 b6 96 ff ff       	call   c001160b <KePanic(char const*)>
c0017f55:	83 c4 10             	add    esp,0x10
c0017f58:	0f 20 c0             	mov    eax,cr0
c0017f5b:	a8 08                	test   al,0x8
c0017f5d:	74 59                	je     c0017fb8 <x87EmulHandler(regs*, void*)+0x7f>
c0017f5f:	0f 06                	clts   
c0017f61:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0017f66:	85 c0                	test   eax,eax
c0017f68:	74 0e                	je     c0017f78 <x87EmulHandler(regs*, void*)+0x3f>
c0017f6a:	83 ec 0c             	sub    esp,0xc
c0017f6d:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017f70:	e8 9c ff ff ff       	call   c0017f11 <i386SaveCoprocessor(void*)>
c0017f75:	83 c4 10             	add    esp,0x10
c0017f78:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017f7e:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0017f82:	75 12                	jne    c0017f96 <x87EmulHandler(regs*, void*)+0x5d>
c0017f84:	83 ec 0c             	sub    esp,0xc
c0017f87:	68 40 02 00 00       	push   0x240
c0017f8c:	e8 42 fb fe ff       	call   c0007ad3 <malloc>
c0017f91:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0017f94:	eb 10                	jmp    c0017fa6 <x87EmulHandler(regs*, void*)+0x6d>
c0017f96:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0017f9b:	83 ec 0c             	sub    esp,0xc
c0017f9e:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017fa1:	e8 7f ff ff ff       	call   c0017f25 <i386LoadCoprocessor(void*)>
c0017fa6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017fab:	83 c4 10             	add    esp,0x10
c0017fae:	a3 68 c7 02 c0       	mov    ds:0xc002c768,eax
c0017fb3:	83 c4 08             	add    esp,0x8
c0017fb6:	5b                   	pop    ebx
c0017fb7:	c3                   	ret    
c0017fb8:	83 ec 0c             	sub    esp,0xc
c0017fbb:	68 f1 2c 02 c0       	push   0xc0022cf1
c0017fc0:	e8 45 29 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017fc5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017fcd:	83 c4 18             	add    esp,0x18
c0017fd0:	5b                   	pop    ebx
c0017fd1:	e9 8a eb ff ff       	jmp    c0016b60 <Thr::terminateFromIRQ(int)>

c0017fd6 <HalInitialiseCoprocessor()>:
c0017fd6:	83 ec 10             	sub    esp,0x10
c0017fd9:	6a 00                	push   0x0
c0017fdb:	68 39 7f 01 c0       	push   0xc0017f39
c0017fe0:	6a 07                	push   0x7
c0017fe2:	c7 05 68 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c768,0x0
c0017fec:	e8 89 4f ff ff       	call   c000cf7a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017ff1:	e8 aa 70 00 00       	call   c001f0a0 <avxDetect>
c0017ff6:	83 c4 10             	add    esp,0x10
c0017ff9:	85 c0                	test   eax,eax
c0017ffb:	74 1c                	je     c0018019 <HalInitialiseCoprocessor()+0x43>
c0017ffd:	c7 05 70 c7 02 c0 ca f0 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f0ca
c0018007:	c7 05 6c c7 02 c0 db f0 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f0db
c0018011:	83 c4 0c             	add    esp,0xc
c0018014:	e9 d3 70 00 00       	jmp    c001f0ec <avxInit>
c0018019:	e8 12 74 00 00       	call   c001f430 <absolutelyNoChanceInHell>
c001801e:	85 c0                	test   eax,eax
c0018020:	74 1c                	je     c001803e <HalInitialiseCoprocessor()+0x68>
c0018022:	c7 05 70 c7 02 c0 48 f4 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f448
c001802c:	c7 05 6c c7 02 c0 50 f4 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f450
c0018036:	83 c4 0c             	add    esp,0xc
c0018039:	e9 1a 74 00 00       	jmp    c001f458 <sseInit>
c001803e:	e8 33 74 00 00       	call   c001f476 <x87Detect>
c0018043:	85 c0                	test   eax,eax
c0018045:	74 1c                	je     c0018063 <HalInitialiseCoprocessor()+0x8d>
c0018047:	c7 05 70 c7 02 c0 91 f4 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f491
c0018051:	c7 05 6c c7 02 c0 98 f4 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f498
c001805b:	83 c4 0c             	add    esp,0xc
c001805e:	e9 3c 74 00 00       	jmp    c001f49f <x87Init>
c0018063:	c7 05 70 c7 02 c0 ea 78 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc00178ea
c001806d:	c7 05 6c c7 02 c0 ea 78 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc00178ea
c0018077:	0f 20 c0             	mov    eax,cr0
c001807a:	83 c8 04             	or     eax,0x4
c001807d:	0f 22 c0             	mov    cr0,eax
c0018080:	83 c4 0c             	add    esp,0xc
c0018083:	c3                   	ret    

c0018084 <HalPanic(char const*)>:
c0018084:	53                   	push   ebx
c0018085:	83 ec 10             	sub    esp,0x10
c0018088:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001808c:	fa                   	cli    
c001808d:	53                   	push   ebx
c001808e:	68 07 2d 02 c0       	push   0xc0022d07
c0018093:	e8 72 28 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0018098:	a1 64 c7 02 c0       	mov    eax,ds:0xc002c764
c001809d:	83 c4 10             	add    esp,0x10
c00180a0:	85 c0                	test   eax,eax
c00180a2:	74 09                	je     c00180ad <HalPanic(char const*)+0x29>
c00180a4:	83 ec 0c             	sub    esp,0xc
c00180a7:	53                   	push   ebx
c00180a8:	ff d0                	call   eax
c00180aa:	83 c4 10             	add    esp,0x10
c00180ad:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c00180b2:	85 c0                	test   eax,eax
c00180b4:	0f 84 dc 00 00 00    	je     c0018196 <HalPanic(char const*)+0x112>
c00180ba:	52                   	push   edx
c00180bb:	6a 01                	push   0x1
c00180bd:	6a 0f                	push   0xf
c00180bf:	50                   	push   eax
c00180c0:	e8 05 05 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00180c5:	59                   	pop    ecx
c00180c6:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180cc:	e8 e9 06 ff ff       	call   c00087ba <VgaText::clearScreen()>
c00180d1:	58                   	pop    eax
c00180d2:	5a                   	pop    edx
c00180d3:	68 e4 0e 02 c0       	push   0xc0020ee4
c00180d8:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180de:	e8 1f 05 ff ff       	call   c0008602 <VgaText::setTitle(char*)>
c00180e3:	83 c4 0c             	add    esp,0xc
c00180e6:	6a 01                	push   0x1
c00180e8:	6a 0f                	push   0xf
c00180ea:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180f0:	e8 d5 04 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00180f5:	59                   	pop    ecx
c00180f6:	58                   	pop    eax
c00180f7:	68 20 2d 02 c0       	push   0xc0022d20
c00180fc:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018102:	e8 a5 09 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0018107:	83 c4 0c             	add    esp,0xc
c001810a:	6a 0f                	push   0xf
c001810c:	6a 01                	push   0x1
c001810e:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018114:	e8 b1 04 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018119:	58                   	pop    eax
c001811a:	5a                   	pop    edx
c001811b:	68 29 2d 02 c0       	push   0xc0022d29
c0018120:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018126:	e8 81 09 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001812b:	83 c4 0c             	add    esp,0xc
c001812e:	6a 01                	push   0x1
c0018130:	6a 0f                	push   0xf
c0018132:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018138:	e8 8d 04 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001813d:	59                   	pop    ecx
c001813e:	58                   	pop    eax
c001813f:	68 6d 2d 02 c0       	push   0xc0022d6d
c0018144:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001814a:	e8 5d 09 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001814f:	58                   	pop    eax
c0018150:	5a                   	pop    edx
c0018151:	68 36 2d 02 c0       	push   0xc0022d36
c0018156:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001815c:	e8 4b 09 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0018161:	59                   	pop    ecx
c0018162:	58                   	pop    eax
c0018163:	68 70 2d 02 c0       	push   0xc0022d70
c0018168:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001816e:	e8 39 09 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0018173:	58                   	pop    eax
c0018174:	5a                   	pop    edx
c0018175:	53                   	push   ebx
c0018176:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001817c:	e8 2b 09 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0018181:	59                   	pop    ecx
c0018182:	5b                   	pop    ebx
c0018183:	68 6d 2d 02 c0       	push   0xc0022d6d
c0018188:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001818e:	e8 19 09 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0018193:	83 c4 10             	add    esp,0x10
c0018196:	eb fe                	jmp    c0018196 <HalPanic(char const*)+0x112>

c0018198 <HalQueryPerformanceCounter()>:
c0018198:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001819d:	31 d2                	xor    edx,edx
c001819f:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00181a5:	31 c0                	xor    eax,eax
c00181a7:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c00181ae:	74 02                	je     c00181b2 <HalQueryPerformanceCounter()+0x1a>
c00181b0:	0f 31                	rdtsc  
c00181b2:	c3                   	ret    

c00181b3 <HalInitialise()>:
c00181b3:	53                   	push   ebx
c00181b4:	83 ec 08             	sub    esp,0x8
c00181b7:	e8 f5 4f ff ff       	call   c000d1b1 <setupINTS()>
c00181bc:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00181c1:	80 3d e0 bb 02 c0 00 	cmp    BYTE PTR ds:0xc002bbe0,0x0
c00181c8:	75 0f                	jne    c00181d9 <HalInitialise()+0x26>
c00181ca:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00181d0:	83 e2 fe             	and    edx,0xfffffffe
c00181d3:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00181d9:	c6 05 60 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c760,0x0
c00181e0:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00181e6:	83 e2 fe             	and    edx,0xfffffffe
c00181e9:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00181ef:	e8 a0 02 00 00       	call   c0018494 <picOpen()>
c00181f4:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c00181fb:	74 0a                	je     c0018207 <HalInitialise()+0x54>
c00181fd:	e8 e2 01 00 00       	call   c00183e4 <picDisable()>
c0018202:	e8 0d 68 00 00       	call   c001ea14 <apicOpen()>
c0018207:	50                   	push   eax
c0018208:	bb 0f 00 00 00       	mov    ebx,0xf
c001820d:	6a 00                	push   0x0
c001820f:	68 5a 7e 01 c0       	push   0xc0017e5a
c0018214:	6a 00                	push   0x0
c0018216:	e8 5f 4d ff ff       	call   c000cf7a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001821b:	83 c4 0c             	add    esp,0xc
c001821e:	6a 00                	push   0x0
c0018220:	68 5a 7e 01 c0       	push   0xc0017e5a
c0018225:	6a 01                	push   0x1
c0018227:	e8 4e 4d ff ff       	call   c000cf7a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001822c:	83 c4 0c             	add    esp,0xc
c001822f:	6a 00                	push   0x0
c0018231:	68 eb 78 01 c0       	push   0xc00178eb
c0018236:	6a 02                	push   0x2
c0018238:	e8 3d 4d ff ff       	call   c000cf7a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001823d:	83 c4 0c             	add    esp,0xc
c0018240:	6a 00                	push   0x0
c0018242:	68 5a 7e 01 c0       	push   0xc0017e5a
c0018247:	6a 03                	push   0x3
c0018249:	e8 2c 4d ff ff       	call   c000cf7a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001824e:	83 c4 0c             	add    esp,0xc
c0018251:	6a 00                	push   0x0
c0018253:	68 5a 7e 01 c0       	push   0xc0017e5a
c0018258:	6a 04                	push   0x4
c001825a:	e8 1b 4d ff ff       	call   c000cf7a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001825f:	83 c4 0c             	add    esp,0xc
c0018262:	6a 00                	push   0x0
c0018264:	68 5a 7e 01 c0       	push   0xc0017e5a
c0018269:	6a 05                	push   0x5
c001826b:	e8 0a 4d ff ff       	call   c000cf7a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018270:	83 c4 0c             	add    esp,0xc
c0018273:	6a 00                	push   0x0
c0018275:	68 8e 7e 01 c0       	push   0xc0017e8e
c001827a:	6a 06                	push   0x6
c001827c:	e8 f9 4c ff ff       	call   c000cf7a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018281:	83 c4 0c             	add    esp,0xc
c0018284:	6a 00                	push   0x0
c0018286:	68 04 79 01 c0       	push   0xc0017904
c001828b:	6a 08                	push   0x8
c001828d:	e8 e8 4c ff ff       	call   c000cf7a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018292:	83 c4 0c             	add    esp,0xc
c0018295:	6a 00                	push   0x0
c0018297:	68 5a 7e 01 c0       	push   0xc0017e5a
c001829c:	6a 09                	push   0x9
c001829e:	e8 d7 4c ff ff       	call   c000cf7a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182a3:	83 c4 0c             	add    esp,0xc
c00182a6:	6a 00                	push   0x0
c00182a8:	68 5a 7e 01 c0       	push   0xc0017e5a
c00182ad:	6a 0a                	push   0xa
c00182af:	e8 c6 4c ff ff       	call   c000cf7a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182b4:	83 c4 0c             	add    esp,0xc
c00182b7:	6a 00                	push   0x0
c00182b9:	68 5a 7e 01 c0       	push   0xc0017e5a
c00182be:	6a 0b                	push   0xb
c00182c0:	e8 b5 4c ff ff       	call   c000cf7a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182c5:	83 c4 0c             	add    esp,0xc
c00182c8:	6a 00                	push   0x0
c00182ca:	68 6a 7d 01 c0       	push   0xc0017d6a
c00182cf:	6a 0d                	push   0xd
c00182d1:	e8 a4 4c ff ff       	call   c000cf7a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182d6:	83 c4 0c             	add    esp,0xc
c00182d9:	6a 00                	push   0x0
c00182db:	68 d1 7d 01 c0       	push   0xc0017dd1
c00182e0:	6a 0e                	push   0xe
c00182e2:	e8 93 4c ff ff       	call   c000cf7a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182e7:	83 c4 10             	add    esp,0x10
c00182ea:	50                   	push   eax
c00182eb:	6a 00                	push   0x0
c00182ed:	68 5a 7e 01 c0       	push   0xc0017e5a
c00182f2:	53                   	push   ebx
c00182f3:	43                   	inc    ebx
c00182f4:	e8 81 4c ff ff       	call   c000cf7a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182f9:	83 c4 10             	add    esp,0x10
c00182fc:	83 fb 1e             	cmp    ebx,0x1e
c00182ff:	75 e9                	jne    c00182ea <HalInitialise()+0x137>
c0018301:	50                   	push   eax
c0018302:	6a 00                	push   0x0
c0018304:	68 bf 2a 01 c0       	push   0xc0012abf
c0018309:	6a 60                	push   0x60
c001830b:	e8 6a 4c ff ff       	call   c000cf7a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018310:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018315:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001831f:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0018326:	e8 a8 f7 fe ff       	call   c0007ad3 <malloc>
c001832b:	89 04 24             	mov    DWORD PTR [esp],eax
c001832e:	89 c3                	mov    ebx,eax
c0018330:	e8 37 09 00 00       	call   c0018c6c <RTC::RTC()>
c0018335:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001833f:	5a                   	pop    edx
c0018340:	59                   	pop    ecx
c0018341:	53                   	push   ebx
c0018342:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018348:	e8 f7 46 ff ff       	call   c000ca44 <Device::addChild(Device*)>
c001834d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001834f:	6a 00                	push   0x0
c0018351:	6a 00                	push   0x0
c0018353:	6a 00                	push   0x0
c0018355:	53                   	push   ebx
c0018356:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018359:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001835e:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0018364:	83 c4 28             	add    esp,0x28
c0018367:	5b                   	pop    ebx
c0018368:	c3                   	ret    

c0018369 <HalMakeBeep(int)>:
c0018369:	53                   	push   ebx
c001836a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001836e:	85 db                	test   ebx,ebx
c0018370:	75 07                	jne    c0018379 <HalMakeBeep(int)+0x10>
c0018372:	e4 61                	in     al,0x61
c0018374:	83 e0 fc             	and    eax,0xfffffffc
c0018377:	eb 26                	jmp    c001839f <HalMakeBeep(int)+0x36>
c0018379:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001837e:	99                   	cdq    
c001837f:	f7 fb                	idiv   ebx
c0018381:	89 c1                	mov    ecx,eax
c0018383:	b0 b6                	mov    al,0xb6
c0018385:	e6 43                	out    0x43,al
c0018387:	88 c8                	mov    al,cl
c0018389:	e6 42                	out    0x42,al
c001838b:	89 c8                	mov    eax,ecx
c001838d:	c1 e8 08             	shr    eax,0x8
c0018390:	e6 42                	out    0x42,al
c0018392:	e4 61                	in     al,0x61
c0018394:	89 c2                	mov    edx,eax
c0018396:	83 ca 03             	or     edx,0x3
c0018399:	38 d0                	cmp    al,dl
c001839b:	74 04                	je     c00183a1 <HalMakeBeep(int)+0x38>
c001839d:	88 d0                	mov    al,dl
c001839f:	e6 61                	out    0x61,al
c00183a1:	5b                   	pop    ebx
c00183a2:	c3                   	ret    

c00183a3 <HalGetRand()>:
c00183a3:	31 c0                	xor    eax,eax
c00183a5:	c3                   	ret    

c00183a6 <HalEndOfInterrupt(int)>:
c00183a6:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c00183ad:	74 23                	je     c00183d2 <HalEndOfInterrupt(int)+0x2c>
c00183af:	83 ec 14             	sub    esp,0x14
c00183b2:	6a 1b                	push   0x1b
c00183b4:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00183ba:	e8 23 ed fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c00183bf:	25 00 f0 ff ff       	and    eax,0xfffff000
c00183c4:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00183ce:	83 c4 1c             	add    esp,0x1c
c00183d1:	c3                   	ret    
c00183d2:	e9 41 02 00 00       	jmp    c0018618 <picEOI(int)>

c00183d7 <HalRestart()>:
c00183d7:	c3                   	ret    

c00183d8 <HalShutdown()>:
c00183d8:	c3                   	ret    

c00183d9 <HalSleep()>:
c00183d9:	c3                   	ret    
c00183da:	66 90                	xchg   ax,ax

c00183dc <picIoWait()>:
c00183dc:	eb 00                	jmp    c00183de <picIoWait()+0x2>
c00183de:	eb 00                	jmp    c00183e0 <picIoWait()+0x4>
c00183e0:	90                   	nop
c00183e1:	c3                   	ret    
c00183e2:	66 90                	xchg   ax,ax

c00183e4 <picDisable()>:
c00183e4:	83 ec 10             	sub    esp,0x10
c00183e7:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00183ee:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00183f3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00183f7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00183fc:	ee                   	out    dx,al
c00183fd:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0018404:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0018409:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001840d:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0018412:	ee                   	out    dx,al
c0018413:	90                   	nop
c0018414:	83 c4 10             	add    esp,0x10
c0018417:	c3                   	ret    

c0018418 <picGetIRQReg(int)>:
c0018418:	83 ec 10             	sub    esp,0x10
c001841b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001841f:	0f b6 c0             	movzx  eax,al
c0018422:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018429:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001842d:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018431:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018436:	ee                   	out    dx,al
c0018437:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001843b:	0f b6 c0             	movzx  eax,al
c001843e:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018445:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018449:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001844d:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018452:	ee                   	out    dx,al
c0018453:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001845a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001845f:	89 c2                	mov    edx,eax
c0018461:	ec                   	in     al,dx
c0018462:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018466:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001846a:	0f b6 c0             	movzx  eax,al
c001846d:	c1 e0 08             	shl    eax,0x8
c0018470:	89 c1                	mov    ecx,eax
c0018472:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0018479:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001847e:	89 c2                	mov    edx,eax
c0018480:	ec                   	in     al,dx
c0018481:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018485:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018489:	0f b6 c0             	movzx  eax,al
c001848c:	09 c8                	or     eax,ecx
c001848e:	83 c4 10             	add    esp,0x10
c0018491:	c3                   	ret    
c0018492:	66 90                	xchg   ax,ax

c0018494 <picOpen()>:
c0018494:	83 ec 50             	sub    esp,0x50
c0018497:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001849e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00184a3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00184a7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00184ab:	ee                   	out    dx,al
c00184ac:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00184b3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00184b8:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00184bc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00184c0:	ee                   	out    dx,al
c00184c1:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00184c9:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00184d1:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00184d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00184dc:	89 c2                	mov    edx,eax
c00184de:	ec                   	in     al,dx
c00184df:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00184e3:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00184e7:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00184eb:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00184f2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00184f6:	89 c2                	mov    edx,eax
c00184f8:	ec                   	in     al,dx
c00184f9:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00184fd:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018501:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0018505:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c001850c:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0018511:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0018515:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018519:	ee                   	out    dx,al
c001851a:	e8 bd fe ff ff       	call   c00183dc <picIoWait()>
c001851f:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0018526:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001852b:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001852f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018533:	ee                   	out    dx,al
c0018534:	e8 a3 fe ff ff       	call   c00183dc <picIoWait()>
c0018539:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001853d:	0f b6 c0             	movzx  eax,al
c0018540:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0018547:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001854b:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001854f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018553:	ee                   	out    dx,al
c0018554:	e8 83 fe ff ff       	call   c00183dc <picIoWait()>
c0018559:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001855d:	0f b6 c0             	movzx  eax,al
c0018560:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0018567:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001856b:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001856f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018573:	ee                   	out    dx,al
c0018574:	e8 63 fe ff ff       	call   c00183dc <picIoWait()>
c0018579:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0018580:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0018585:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0018589:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001858d:	ee                   	out    dx,al
c001858e:	e8 49 fe ff ff       	call   c00183dc <picIoWait()>
c0018593:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001859a:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001859f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00185a3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00185a7:	ee                   	out    dx,al
c00185a8:	e8 2f fe ff ff       	call   c00183dc <picIoWait()>
c00185ad:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00185b4:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00185b9:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00185bd:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00185c1:	ee                   	out    dx,al
c00185c2:	e8 15 fe ff ff       	call   c00183dc <picIoWait()>
c00185c7:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c00185ce:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c00185d3:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00185d7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00185db:	ee                   	out    dx,al
c00185dc:	e8 fb fd ff ff       	call   c00183dc <picIoWait()>
c00185e1:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c00185e6:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c00185ed:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c00185f1:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00185f5:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00185f9:	ee                   	out    dx,al
c00185fa:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c00185ff:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0018606:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001860a:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001860e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0018612:	ee                   	out    dx,al
c0018613:	90                   	nop
c0018614:	83 c4 50             	add    esp,0x50
c0018617:	c3                   	ret    

c0018618 <picEOI(int)>:
c0018618:	83 ec 10             	sub    esp,0x10
c001861b:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018620:	75 1e                	jne    c0018640 <picEOI(int)+0x28>
c0018622:	6a 0b                	push   0xb
c0018624:	e8 ef fd ff ff       	call   c0018418 <picGetIRQReg(int)>
c0018629:	83 c4 04             	add    esp,0x4
c001862c:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0018631:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0018636:	25 80 00 00 00       	and    eax,0x80
c001863b:	74 73                	je     c00186b0 <picEOI(int)+0x98>
c001863d:	8d 76 00             	lea    esi,[esi+0x0]
c0018640:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0018645:	75 31                	jne    c0018678 <picEOI(int)+0x60>
c0018647:	6a 0b                	push   0xb
c0018649:	e8 ca fd ff ff       	call   c0018418 <picGetIRQReg(int)>
c001864e:	83 c4 04             	add    esp,0x4
c0018651:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018656:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001865a:	98                   	cwde   
c001865b:	85 c0                	test   eax,eax
c001865d:	78 19                	js     c0018678 <picEOI(int)+0x60>
c001865f:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0018666:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001866b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001866f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018674:	ee                   	out    dx,al
c0018675:	eb 3d                	jmp    c00186b4 <picEOI(int)+0x9c>
c0018677:	90                   	nop
c0018678:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001867d:	7e 19                	jle    c0018698 <picEOI(int)+0x80>
c001867f:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018686:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001868b:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001868f:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018694:	ee                   	out    dx,al
c0018695:	8d 76 00             	lea    esi,[esi+0x0]
c0018698:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001869f:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c00186a4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00186a8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00186ad:	ee                   	out    dx,al
c00186ae:	eb 04                	jmp    c00186b4 <picEOI(int)+0x9c>
c00186b0:	90                   	nop
c00186b1:	8d 76 00             	lea    esi,[esi+0x0]
c00186b4:	83 c4 10             	add    esp,0x10
c00186b7:	c3                   	ret    

c00186b8 <RTC::open(int, int, void*)>:
c00186b8:	31 c0                	xor    eax,eax
c00186ba:	c3                   	ret    
c00186bb:	90                   	nop

c00186bc <RTC::close(int, int, void*)>:
c00186bc:	31 c0                	xor    eax,eax
c00186be:	c3                   	ret    
c00186bf:	90                   	nop

c00186c0 <RTC::timeInSecondsUTC()>:
c00186c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00186c4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00186ca:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00186d0:	c3                   	ret    
c00186d1:	90                   	nop

c00186d2 <RTC::timeInDatetimeUTC()>:
c00186d2:	53                   	push   ebx
c00186d3:	83 ec 14             	sub    esp,0x14
c00186d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00186de:	8b 10                	mov    edx,DWORD PTR [eax]
c00186e0:	50                   	push   eax
c00186e1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00186e4:	83 c4 0c             	add    esp,0xc
c00186e7:	52                   	push   edx
c00186e8:	50                   	push   eax
c00186e9:	53                   	push   ebx
c00186ea:	e8 c9 40 ff ff       	call   c000c7b8 <secondsToDatetime(unsigned long long)>
c00186ef:	89 d8                	mov    eax,ebx
c00186f1:	83 c4 14             	add    esp,0x14
c00186f4:	5b                   	pop    ebx
c00186f5:	c2 04 00             	ret    0x4

c00186f8 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00186f8:	56                   	push   esi
c00186f9:	53                   	push   ebx
c00186fa:	83 ec 14             	sub    esp,0x14
c00186fd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018701:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018703:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0018706:	8d 44 24 08          	lea    eax,[esp+0x8]
c001870a:	52                   	push   edx
c001870b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001870f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018713:	50                   	push   eax
c0018714:	e8 9f 40 ff ff       	call   c000c7b8 <secondsToDatetime(unsigned long long)>
c0018719:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001871d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018721:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018725:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0018729:	89 f0                	mov    eax,esi
c001872b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001872f:	83 c4 20             	add    esp,0x20
c0018732:	5b                   	pop    ebx
c0018733:	5e                   	pop    esi
c0018734:	ff e0                	jmp    eax

c0018736 <RTC::~RTC()>:
c0018736:	83 ec 0c             	sub    esp,0xc
c0018739:	ba 0c 2e 02 c0       	mov    edx,0xc0022e0c
c001873e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018742:	89 10                	mov    DWORD PTR [eax],edx
c0018744:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018748:	83 ec 0c             	sub    esp,0xc
c001874b:	50                   	push   eax
c001874c:	e8 f3 3d ff ff       	call   c000c544 <Clock::~Clock()>
c0018751:	83 c4 10             	add    esp,0x10
c0018754:	90                   	nop
c0018755:	83 c4 0c             	add    esp,0xc
c0018758:	c3                   	ret    
c0018759:	90                   	nop

c001875a <RTC::~RTC()>:
c001875a:	83 ec 0c             	sub    esp,0xc
c001875d:	83 ec 0c             	sub    esp,0xc
c0018760:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018764:	e8 cd ff ff ff       	call   c0018736 <RTC::~RTC()>
c0018769:	83 c4 10             	add    esp,0x10
c001876c:	83 ec 08             	sub    esp,0x8
c001876f:	68 60 01 00 00       	push   0x160
c0018774:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018778:	e8 8f 20 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001877d:	83 c4 10             	add    esp,0x10
c0018780:	83 c4 0c             	add    esp,0xc
c0018783:	c3                   	ret    

c0018784 <RTC::get_update_in_progress_flag()>:
c0018784:	83 ec 14             	sub    esp,0x14
c0018787:	6a 0a                	push   0xa
c0018789:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001878f:	e8 06 ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018794:	83 c4 1c             	add    esp,0x1c
c0018797:	0f b6 c0             	movzx  eax,al
c001879a:	c1 e8 07             	shr    eax,0x7
c001879d:	c3                   	ret    

c001879e <RTC::completeRTCRefresh()>:
c001879e:	55                   	push   ebp
c001879f:	57                   	push   edi
c00187a0:	56                   	push   esi
c00187a1:	53                   	push   ebx
c00187a2:	83 ec 3c             	sub    esp,0x3c
c00187a5:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c00187ab:	83 ec 0c             	sub    esp,0xc
c00187ae:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00187b2:	e8 cd ff ff ff       	call   c0018784 <RTC::get_update_in_progress_flag()>
c00187b7:	83 c4 10             	add    esp,0x10
c00187ba:	84 c0                	test   al,al
c00187bc:	74 0e                	je     c00187cc <RTC::completeRTCRefresh()+0x2e>
c00187be:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00187c4:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c00187ca:	73 df                	jae    c00187ab <RTC::completeRTCRefresh()+0xd>
c00187cc:	50                   	push   eax
c00187cd:	50                   	push   eax
c00187ce:	6a 00                	push   0x0
c00187d0:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187d6:	e8 bf e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00187db:	89 c7                	mov    edi,eax
c00187dd:	58                   	pop    eax
c00187de:	5a                   	pop    edx
c00187df:	6a 02                	push   0x2
c00187e1:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187e7:	e8 ae e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00187ec:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00187f0:	59                   	pop    ecx
c00187f1:	5b                   	pop    ebx
c00187f2:	6a 04                	push   0x4
c00187f4:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187fa:	e8 9b e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00187ff:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0018803:	5e                   	pop    esi
c0018804:	5d                   	pop    ebp
c0018805:	6a 07                	push   0x7
c0018807:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001880d:	e8 88 e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018812:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0018816:	58                   	pop    eax
c0018817:	5a                   	pop    edx
c0018818:	6a 08                	push   0x8
c001881a:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018820:	e8 75 e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018825:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0018829:	59                   	pop    ecx
c001882a:	5b                   	pop    ebx
c001882b:	6a 09                	push   0x9
c001882d:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018833:	e8 62 e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018838:	0f b6 c0             	movzx  eax,al
c001883b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001883f:	83 c4 10             	add    esp,0x10
c0018842:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c0018848:	83 ec 0c             	sub    esp,0xc
c001884b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001884f:	e8 30 ff ff ff       	call   c0018784 <RTC::get_update_in_progress_flag()>
c0018854:	83 c4 10             	add    esp,0x10
c0018857:	84 c0                	test   al,al
c0018859:	74 0e                	je     c0018869 <RTC::completeRTCRefresh()+0xcb>
c001885b:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018861:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c0018867:	73 df                	jae    c0018848 <RTC::completeRTCRefresh()+0xaa>
c0018869:	51                   	push   ecx
c001886a:	51                   	push   ecx
c001886b:	6a 00                	push   0x0
c001886d:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018873:	e8 22 e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018878:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001887c:	5b                   	pop    ebx
c001887d:	5e                   	pop    esi
c001887e:	6a 02                	push   0x2
c0018880:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018886:	e8 0f e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001888b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001888f:	5d                   	pop    ebp
c0018890:	58                   	pop    eax
c0018891:	6a 04                	push   0x4
c0018893:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018899:	e8 fc e8 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001889e:	88 c3                	mov    bl,al
c00188a0:	58                   	pop    eax
c00188a1:	5a                   	pop    edx
c00188a2:	6a 07                	push   0x7
c00188a4:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188aa:	e8 eb e8 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00188af:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00188b3:	59                   	pop    ecx
c00188b4:	5e                   	pop    esi
c00188b5:	6a 08                	push   0x8
c00188b7:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188bd:	e8 d8 e8 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00188c2:	5d                   	pop    ebp
c00188c3:	89 c6                	mov    esi,eax
c00188c5:	58                   	pop    eax
c00188c6:	6a 09                	push   0x9
c00188c8:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188ce:	e8 c7 e8 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00188d3:	89 f9                	mov    ecx,edi
c00188d5:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00188d9:	83 c4 10             	add    esp,0x10
c00188dc:	0f b6 e8             	movzx  ebp,al
c00188df:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00188e4:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c00188e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00188ec:	74 27                	je     c0018915 <RTC::completeRTCRefresh()+0x177>
c00188ee:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c00188f2:	89 f0                	mov    eax,esi
c00188f4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00188f8:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00188fc:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0018900:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0018904:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0018908:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001890c:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018910:	e9 2d ff ff ff       	jmp    c0018842 <RTC::completeRTCRefresh()+0xa4>
c0018915:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001891a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001891e:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018922:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c0018926:	75 c6                	jne    c00188ee <RTC::completeRTCRefresh()+0x150>
c0018928:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001892d:	89 f1                	mov    ecx,esi
c001892f:	0f b6 fb             	movzx  edi,bl
c0018932:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0018936:	0f b6 c9             	movzx  ecx,cl
c0018939:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001893d:	89 f1                	mov    ecx,esi
c001893f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018943:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0018947:	0f 94 c2             	sete   dl
c001894a:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001894e:	0f 94 c0             	sete   al
c0018951:	21 d0                	and    eax,edx
c0018953:	31 d2                	xor    edx,edx
c0018955:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0018959:	0f 94 c2             	sete   dl
c001895c:	85 c2                	test   edx,eax
c001895e:	74 8e                	je     c00188ee <RTC::completeRTCRefresh()+0x150>
c0018960:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0018964:	75 88                	jne    c00188ee <RTC::completeRTCRefresh()+0x150>
c0018966:	52                   	push   edx
c0018967:	52                   	push   edx
c0018968:	6a 0b                	push   0xb
c001896a:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018970:	e8 25 e8 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018975:	83 c4 10             	add    esp,0x10
c0018978:	a8 04                	test   al,0x4
c001897a:	75 7a                	jne    c00189f6 <RTC::completeRTCRefresh()+0x258>
c001897c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018980:	c1 ef 04             	shr    edi,0x4
c0018983:	83 e6 0f             	and    esi,0xf
c0018986:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001898a:	c1 ed 04             	shr    ebp,0x4
c001898d:	6b ed 0a             	imul   ebp,ebp,0xa
c0018990:	c1 ea 04             	shr    edx,0x4
c0018993:	6b d2 0a             	imul   edx,edx,0xa
c0018996:	83 e1 0f             	and    ecx,0xf
c0018999:	01 d1                	add    ecx,edx
c001899b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001899f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00189a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00189a7:	c1 ea 04             	shr    edx,0x4
c00189aa:	6b d2 0a             	imul   edx,edx,0xa
c00189ad:	83 e1 0f             	and    ecx,0xf
c00189b0:	01 d1                	add    ecx,edx
c00189b2:	89 fa                	mov    edx,edi
c00189b4:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00189b8:	83 e2 07             	and    edx,0x7
c00189bb:	89 d9                	mov    ecx,ebx
c00189bd:	6b d2 0a             	imul   edx,edx,0xa
c00189c0:	83 e1 0f             	and    ecx,0xf
c00189c3:	83 e3 80             	and    ebx,0xffffff80
c00189c6:	01 d1                	add    ecx,edx
c00189c8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00189cc:	09 cb                	or     ebx,ecx
c00189ce:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00189d2:	c1 ea 04             	shr    edx,0x4
c00189d5:	6b d2 0a             	imul   edx,edx,0xa
c00189d8:	83 e1 0f             	and    ecx,0xf
c00189db:	01 d1                	add    ecx,edx
c00189dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00189e1:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00189e5:	c1 ea 04             	shr    edx,0x4
c00189e8:	6b d2 0a             	imul   edx,edx,0xa
c00189eb:	01 d6                	add    esi,edx
c00189ed:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00189f1:	83 e2 0f             	and    edx,0xf
c00189f4:	01 d5                	add    ebp,edx
c00189f6:	a8 02                	test   al,0x2
c00189f8:	75 15                	jne    c0018a0f <RTC::completeRTCRefresh()+0x271>
c00189fa:	f6 c3 80             	test   bl,0x80
c00189fd:	74 10                	je     c0018a0f <RTC::completeRTCRefresh()+0x271>
c00189ff:	83 e3 7f             	and    ebx,0x7f
c0018a02:	b9 18 00 00 00       	mov    ecx,0x18
c0018a07:	8d 43 0c             	lea    eax,[ebx+0xc]
c0018a0a:	99                   	cdq    
c0018a0b:	f7 f9                	idiv   ecx
c0018a0d:	88 d3                	mov    bl,dl
c0018a0f:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0018a15:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0018a1b:	77 06                	ja     c0018a23 <RTC::completeRTCRefresh()+0x285>
c0018a1d:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0018a23:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a28:	31 c9                	xor    ecx,ecx
c0018a2a:	31 d2                	xor    edx,edx
c0018a2c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0018a30:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0018a34:	89 cd                	mov    ebp,ecx
c0018a36:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c0018a3a:	c1 e7 10             	shl    edi,0x10
c0018a3d:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0018a43:	c1 e0 10             	shl    eax,0x10
c0018a46:	09 c5                	or     ebp,eax
c0018a48:	89 e9                	mov    ecx,ebp
c0018a4a:	0f b7 c2             	movzx  eax,dx
c0018a4d:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0018a51:	09 f8                	or     eax,edi
c0018a53:	89 c2                	mov    edx,eax
c0018a55:	50                   	push   eax
c0018a56:	50                   	push   eax
c0018a57:	88 d9                	mov    cl,bl
c0018a59:	51                   	push   ecx
c0018a5a:	52                   	push   edx
c0018a5b:	e8 d3 3b ff ff       	call   c000c633 <datetimeToSeconds(datetime_t)>
c0018a60:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0018a64:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0018a6a:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0018a70:	83 c4 4c             	add    esp,0x4c
c0018a73:	5b                   	pop    ebx
c0018a74:	5e                   	pop    esi
c0018a75:	5f                   	pop    edi
c0018a76:	5d                   	pop    ebp
c0018a77:	c3                   	ret    

c0018a78 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0018a78:	55                   	push   ebp
c0018a79:	57                   	push   edi
c0018a7a:	56                   	push   esi
c0018a7b:	53                   	push   ebx
c0018a7c:	83 ec 30             	sub    esp,0x30
c0018a7f:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0018a83:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0018a87:	6a 00                	push   0x0
c0018a89:	6a 00                	push   0x0
c0018a8b:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018a91:	e8 1c e8 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018a96:	83 c4 0c             	add    esp,0xc
c0018a99:	6a 00                	push   0x0
c0018a9b:	6a 02                	push   0x2
c0018a9d:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018aa3:	e8 0a e8 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018aa8:	89 f8                	mov    eax,edi
c0018aaa:	89 f9                	mov    ecx,edi
c0018aac:	0f b6 c4             	movzx  eax,ah
c0018aaf:	31 d2                	xor    edx,edx
c0018ab1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018ab5:	c1 e9 10             	shr    ecx,0x10
c0018ab8:	89 f0                	mov    eax,esi
c0018aba:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018abe:	89 f0                	mov    eax,esi
c0018ac0:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0018ac4:	0f b6 c4             	movzx  eax,ah
c0018ac7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018acb:	89 f0                	mov    eax,esi
c0018acd:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0018ad1:	c1 e8 10             	shr    eax,0x10
c0018ad4:	b9 64 00 00 00       	mov    ecx,0x64
c0018ad9:	f7 f1                	div    ecx
c0018adb:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0018adf:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0018ae3:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018ae7:	59                   	pop    ecx
c0018ae8:	5b                   	pop    ebx
c0018ae9:	89 fb                	mov    ebx,edi
c0018aeb:	6a 0b                	push   0xb
c0018aed:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018af3:	e8 a2 e6 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018af8:	83 c4 10             	add    esp,0x10
c0018afb:	a8 04                	test   al,0x4
c0018afd:	89 c5                	mov    ebp,eax
c0018aff:	75 6e                	jne    c0018b6f <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0018b01:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018b05:	31 d2                	xor    edx,edx
c0018b07:	0f b6 c1             	movzx  eax,cl
c0018b0a:	b9 0a 00 00 00       	mov    ecx,0xa
c0018b0f:	f7 f1                	div    ecx
c0018b11:	c1 e0 04             	shl    eax,0x4
c0018b14:	09 d0                	or     eax,edx
c0018b16:	31 d2                	xor    edx,edx
c0018b18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018b1c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0018b21:	f7 f1                	div    ecx
c0018b23:	c1 e0 04             	shl    eax,0x4
c0018b26:	09 d0                	or     eax,edx
c0018b28:	31 d2                	xor    edx,edx
c0018b2a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018b2e:	0f b6 c3             	movzx  eax,bl
c0018b31:	f7 f1                	div    ecx
c0018b33:	c1 e0 04             	shl    eax,0x4
c0018b36:	09 d0                	or     eax,edx
c0018b38:	31 d2                	xor    edx,edx
c0018b3a:	89 c3                	mov    ebx,eax
c0018b3c:	89 f0                	mov    eax,esi
c0018b3e:	0f b6 c0             	movzx  eax,al
c0018b41:	f7 f1                	div    ecx
c0018b43:	c1 e0 04             	shl    eax,0x4
c0018b46:	09 d0                	or     eax,edx
c0018b48:	31 d2                	xor    edx,edx
c0018b4a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018b4e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018b53:	f7 f1                	div    ecx
c0018b55:	c1 e0 04             	shl    eax,0x4
c0018b58:	09 d0                	or     eax,edx
c0018b5a:	31 d2                	xor    edx,edx
c0018b5c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018b60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018b64:	f7 f1                	div    ecx
c0018b66:	c1 e0 04             	shl    eax,0x4
c0018b69:	09 d0                	or     eax,edx
c0018b6b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018b6f:	83 e5 02             	and    ebp,0x2
c0018b72:	75 1e                	jne    c0018b92 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018b74:	0f b6 c3             	movzx  eax,bl
c0018b77:	83 f8 0b             	cmp    eax,0xb
c0018b7a:	76 10                	jbe    c0018b8c <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0018b7c:	8d 53 f4             	lea    edx,[ebx-0xc]
c0018b7f:	84 d2                	test   dl,dl
c0018b81:	88 d3                	mov    bl,dl
c0018b83:	75 02                	jne    c0018b87 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0018b85:	b3 0c                	mov    bl,0xc
c0018b87:	83 cb 80             	or     ebx,0xffffff80
c0018b8a:	eb 06                	jmp    c0018b92 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018b8c:	85 c0                	test   eax,eax
c0018b8e:	75 02                	jne    c0018b92 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018b90:	b3 0c                	mov    bl,0xc
c0018b92:	50                   	push   eax
c0018b93:	0f b6 db             	movzx  ebx,bl
c0018b96:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0018b9b:	52                   	push   edx
c0018b9c:	6a 00                	push   0x0
c0018b9e:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018ba4:	e8 09 e7 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018ba9:	83 c4 0c             	add    esp,0xc
c0018bac:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018bb1:	50                   	push   eax
c0018bb2:	6a 02                	push   0x2
c0018bb4:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018bba:	e8 f3 e6 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018bbf:	83 c4 0c             	add    esp,0xc
c0018bc2:	53                   	push   ebx
c0018bc3:	6a 04                	push   0x4
c0018bc5:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018bcb:	e8 e2 e6 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018bd0:	83 c4 0c             	add    esp,0xc
c0018bd3:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0018bd8:	52                   	push   edx
c0018bd9:	6a 07                	push   0x7
c0018bdb:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018be1:	e8 cc e6 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018be6:	83 c4 0c             	add    esp,0xc
c0018be9:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018bee:	50                   	push   eax
c0018bef:	6a 08                	push   0x8
c0018bf1:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018bf7:	e8 b6 e6 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018bfc:	83 c4 0c             	add    esp,0xc
c0018bff:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0018c04:	55                   	push   ebp
c0018c05:	6a 09                	push   0x9
c0018c07:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c0d:	e8 a0 e6 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c12:	5a                   	pop    edx
c0018c13:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018c17:	e8 82 fb ff ff       	call   c001879e <RTC::completeRTCRefresh()>
c0018c1c:	83 c4 3c             	add    esp,0x3c
c0018c1f:	b0 01                	mov    al,0x1
c0018c21:	5b                   	pop    ebx
c0018c22:	5e                   	pop    esi
c0018c23:	5f                   	pop    edi
c0018c24:	5d                   	pop    ebp
c0018c25:	c3                   	ret    

c0018c26 <rtcIRQHandler(regs*, void*)>:
c0018c26:	53                   	push   ebx
c0018c27:	83 ec 10             	sub    esp,0x10
c0018c2a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018c2e:	6a 0c                	push   0xc
c0018c30:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c36:	e8 5f e5 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018c3b:	83 c4 10             	add    esp,0x10
c0018c3e:	a8 80                	test   al,0x80
c0018c40:	74 24                	je     c0018c66 <rtcIRQHandler(regs*, void*)+0x40>
c0018c42:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0018c49:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0018c50:	66 ff 05 78 c7 02 c0 	inc    WORD PTR ds:0xc002c778
c0018c57:	75 0d                	jne    c0018c66 <rtcIRQHandler(regs*, void*)+0x40>
c0018c59:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018c5d:	83 c4 08             	add    esp,0x8
c0018c60:	5b                   	pop    ebx
c0018c61:	e9 38 fb ff ff       	jmp    c001879e <RTC::completeRTCRefresh()>
c0018c66:	83 c4 08             	add    esp,0x8
c0018c69:	5b                   	pop    ebx
c0018c6a:	c3                   	ret    
c0018c6b:	90                   	nop

c0018c6c <RTC::RTC()>:
c0018c6c:	83 ec 1c             	sub    esp,0x1c
c0018c6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c73:	83 ec 08             	sub    esp,0x8
c0018c76:	68 ef 2d 02 c0       	push   0xc0022def
c0018c7b:	50                   	push   eax
c0018c7c:	e8 8d 38 ff ff       	call   c000c50e <Clock::Clock(char const*)>
c0018c81:	83 c4 10             	add    esp,0x10
c0018c84:	ba 0c 2e 02 c0       	mov    edx,0xc0022e0c
c0018c89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c8d:	89 10                	mov    DWORD PTR [eax],edx
c0018c8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c93:	83 ec 0c             	sub    esp,0xc
c0018c96:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018c9a:	6a 01                	push   0x1
c0018c9c:	68 26 8c 01 c0       	push   0xc0018c26
c0018ca1:	6a 08                	push   0x8
c0018ca3:	50                   	push   eax
c0018ca4:	e8 47 3d ff ff       	call   c000c9f0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018ca9:	83 c4 20             	add    esp,0x20
c0018cac:	89 c2                	mov    edx,eax
c0018cae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018cb2:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0018cb8:	fa                   	cli    
c0018cb9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018cbe:	83 c0 01             	add    eax,0x1
c0018cc1:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018cc6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018ccb:	83 ec 08             	sub    esp,0x8
c0018cce:	6a 0b                	push   0xb
c0018cd0:	50                   	push   eax
c0018cd1:	e8 c4 e4 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018cd6:	83 c4 10             	add    esp,0x10
c0018cd9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018cdd:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018ce2:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018ce6:	83 ca 10             	or     edx,0x10
c0018ce9:	0f b6 d2             	movzx  edx,dl
c0018cec:	83 ec 04             	sub    esp,0x4
c0018cef:	52                   	push   edx
c0018cf0:	6a 0b                	push   0xb
c0018cf2:	50                   	push   eax
c0018cf3:	e8 ba e5 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018cf8:	83 c4 10             	add    esp,0x10
c0018cfb:	83 ec 0c             	sub    esp,0xc
c0018cfe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018d02:	e8 97 fa ff ff       	call   c001879e <RTC::completeRTCRefresh()>
c0018d07:	83 c4 10             	add    esp,0x10
c0018d0a:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018d0f:	83 e8 01             	sub    eax,0x1
c0018d12:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018d17:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018d1c:	85 c0                	test   eax,eax
c0018d1e:	75 01                	jne    c0018d21 <RTC::RTC()+0xb5>
c0018d20:	fb                   	sti    
c0018d21:	90                   	nop
c0018d22:	83 c4 1c             	add    esp,0x1c
c0018d25:	c3                   	ret    
c0018d26:	66 90                	xchg   ax,ax

c0018d28 <HalConsoleScroll(int, int)>:
c0018d28:	83 ec 10             	sub    esp,0x10
c0018d2b:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0018d33:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0018d3b:	90                   	nop
c0018d3c:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018d41:	0f 8f e1 00 00 00    	jg     c0018e28 <HalConsoleScroll(int, int)+0x100>
c0018d47:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018d4f:	90                   	nop
c0018d50:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0018d58:	0f 8f be 00 00 00    	jg     c0018e1c <HalConsoleScroll(int, int)+0xf4>
c0018d5e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018d62:	89 d0                	mov    eax,edx
c0018d64:	c1 e0 02             	shl    eax,0x2
c0018d67:	01 d0                	add    eax,edx
c0018d69:	c1 e0 05             	shl    eax,0x5
c0018d6c:	89 c2                	mov    edx,eax
c0018d6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d72:	01 d0                	add    eax,edx
c0018d74:	89 c2                	mov    edx,eax
c0018d76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d7a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018d7d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018d81:	89 d0                	mov    eax,edx
c0018d83:	c1 e0 02             	shl    eax,0x2
c0018d86:	01 d0                	add    eax,edx
c0018d88:	c1 e0 05             	shl    eax,0x5
c0018d8b:	89 c2                	mov    edx,eax
c0018d8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d91:	01 d0                	add    eax,edx
c0018d93:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0018d99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d9d:	01 d0                	add    eax,edx
c0018d9f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0018da1:	88 10                	mov    BYTE PTR [eax],dl
c0018da3:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018da8:	75 66                	jne    c0018e10 <HalConsoleScroll(int, int)+0xe8>
c0018daa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018dae:	83 e0 01             	and    eax,0x1
c0018db1:	74 39                	je     c0018dec <HalConsoleScroll(int, int)+0xc4>
c0018db3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018db7:	83 e0 0f             	and    eax,0xf
c0018dba:	88 c2                	mov    dl,al
c0018dbc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018dc0:	c1 e0 04             	shl    eax,0x4
c0018dc3:	09 d0                	or     eax,edx
c0018dc5:	88 c1                	mov    cl,al
c0018dc7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018dcb:	89 d0                	mov    eax,edx
c0018dcd:	c1 e0 02             	shl    eax,0x2
c0018dd0:	01 d0                	add    eax,edx
c0018dd2:	c1 e0 05             	shl    eax,0x5
c0018dd5:	89 c2                	mov    edx,eax
c0018dd7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ddb:	01 d0                	add    eax,edx
c0018ddd:	89 c2                	mov    edx,eax
c0018ddf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018de3:	01 d0                	add    eax,edx
c0018de5:	88 ca                	mov    dl,cl
c0018de7:	88 10                	mov    BYTE PTR [eax],dl
c0018de9:	eb 25                	jmp    c0018e10 <HalConsoleScroll(int, int)+0xe8>
c0018deb:	90                   	nop
c0018dec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018df0:	89 d0                	mov    eax,edx
c0018df2:	c1 e0 02             	shl    eax,0x2
c0018df5:	01 d0                	add    eax,edx
c0018df7:	c1 e0 05             	shl    eax,0x5
c0018dfa:	89 c2                	mov    edx,eax
c0018dfc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e00:	01 d0                	add    eax,edx
c0018e02:	89 c2                	mov    edx,eax
c0018e04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e08:	01 d0                	add    eax,edx
c0018e0a:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0018e0d:	8d 76 00             	lea    esi,[esi+0x0]
c0018e10:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018e15:	e9 36 ff ff ff       	jmp    c0018d50 <HalConsoleScroll(int, int)+0x28>
c0018e1a:	66 90                	xchg   ax,ax
c0018e1c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018e21:	e9 16 ff ff ff       	jmp    c0018d3c <HalConsoleScroll(int, int)+0x14>
c0018e26:	66 90                	xchg   ax,ax
c0018e28:	90                   	nop
c0018e29:	83 c4 10             	add    esp,0x10
c0018e2c:	c3                   	ret    
c0018e2d:	8d 76 00             	lea    esi,[esi+0x0]

c0018e30 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0018e30:	83 ec 14             	sub    esp,0x14
c0018e33:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018e37:	88 04 24             	mov    BYTE PTR [esp],al
c0018e3a:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018e3d:	0f b6 c0             	movzx  eax,al
c0018e40:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018e44:	89 d1                	mov    ecx,edx
c0018e46:	83 e1 0f             	and    ecx,0xf
c0018e49:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018e4d:	c1 e2 04             	shl    edx,0x4
c0018e50:	0f b6 d2             	movzx  edx,dl
c0018e53:	09 ca                	or     edx,ecx
c0018e55:	c1 e2 08             	shl    edx,0x8
c0018e58:	09 d0                	or     eax,edx
c0018e5a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0018e5f:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0018e67:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018e6b:	89 d0                	mov    eax,edx
c0018e6d:	c1 e0 02             	shl    eax,0x2
c0018e70:	01 d0                	add    eax,edx
c0018e72:	c1 e0 04             	shl    eax,0x4
c0018e75:	89 c2                	mov    edx,eax
c0018e77:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018e7b:	01 d0                	add    eax,edx
c0018e7d:	d1 e0                	shl    eax,1
c0018e7f:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018e83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018e87:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0018e8c:	66 89 10             	mov    WORD PTR [eax],dx
c0018e8f:	90                   	nop
c0018e90:	83 c4 14             	add    esp,0x14
c0018e93:	c3                   	ret    

c0018e94 <HalConsoleCursorUpdate(int, int)>:
c0018e94:	83 ec 20             	sub    esp,0x20
c0018e97:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e9b:	89 c2                	mov    edx,eax
c0018e9d:	c1 e2 02             	shl    edx,0x2
c0018ea0:	01 d0                	add    eax,edx
c0018ea2:	c1 e0 04             	shl    eax,0x4
c0018ea5:	89 c2                	mov    edx,eax
c0018ea7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018eab:	01 d0                	add    eax,edx
c0018ead:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0018eb2:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018eb9:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0018ebe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018ec2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018ec6:	ee                   	out    dx,al
c0018ec7:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018ecc:	0f b6 c0             	movzx  eax,al
c0018ecf:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018ed6:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0018eda:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018ede:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018ee2:	ee                   	out    dx,al
c0018ee3:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0018eea:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0018eef:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018ef3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018ef7:	ee                   	out    dx,al
c0018ef8:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018efd:	c1 e8 08             	shr    eax,0x8
c0018f00:	0f b6 c0             	movzx  eax,al
c0018f03:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0018f0a:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018f0e:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018f12:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018f16:	ee                   	out    dx,al
c0018f17:	90                   	nop
c0018f18:	83 c4 20             	add    esp,0x20
c0018f1b:	c3                   	ret    

c0018f1c <FAT::getName()>:
c0018f1c:	b8 40 2e 02 c0       	mov    eax,0xc0022e40
c0018f21:	c3                   	ret    
c0018f22:	66 90                	xchg   ax,ax

c0018f24 <FAT::tell(void*, unsigned long long*)>:
c0018f24:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018f29:	75 09                	jne    c0018f34 <FAT::tell(void*, unsigned long long*)+0x10>
c0018f2b:	b8 04 00 00 00       	mov    eax,0x4
c0018f30:	c3                   	ret    
c0018f31:	8d 76 00             	lea    esi,[esi+0x0]
c0018f34:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018f39:	75 09                	jne    c0018f44 <FAT::tell(void*, unsigned long long*)+0x20>
c0018f3b:	b8 04 00 00 00       	mov    eax,0x4
c0018f40:	c3                   	ret    
c0018f41:	8d 76 00             	lea    esi,[esi+0x0]
c0018f44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f48:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018f4b:	ba 00 00 00 00       	mov    edx,0x0
c0018f50:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018f54:	89 01                	mov    DWORD PTR [ecx],eax
c0018f56:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018f59:	b8 00 00 00 00       	mov    eax,0x0
c0018f5e:	c3                   	ret    
c0018f5f:	90                   	nop

c0018f60 <FAT::stat(void*, unsigned long long*)>:
c0018f60:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018f65:	75 09                	jne    c0018f70 <FAT::stat(void*, unsigned long long*)+0x10>
c0018f67:	b8 04 00 00 00       	mov    eax,0x4
c0018f6c:	c3                   	ret    
c0018f6d:	8d 76 00             	lea    esi,[esi+0x0]
c0018f70:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018f75:	75 09                	jne    c0018f80 <FAT::stat(void*, unsigned long long*)+0x20>
c0018f77:	b8 04 00 00 00       	mov    eax,0x4
c0018f7c:	c3                   	ret    
c0018f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0018f80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f84:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018f87:	ba 00 00 00 00       	mov    edx,0x0
c0018f8c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018f90:	89 01                	mov    DWORD PTR [ecx],eax
c0018f92:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018f95:	b8 00 00 00 00       	mov    eax,0x0
c0018f9a:	c3                   	ret    
c0018f9b:	90                   	nop

c0018f9c <FAT::~FAT()>:
c0018f9c:	83 ec 0c             	sub    esp,0xc
c0018f9f:	ba 8c 2e 02 c0       	mov    edx,0xc0022e8c
c0018fa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018fa8:	89 10                	mov    DWORD PTR [eax],edx
c0018faa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018fae:	83 ec 0c             	sub    esp,0xc
c0018fb1:	50                   	push   eax
c0018fb2:	e8 7b 28 ff ff       	call   c000b832 <Filesystem::~Filesystem()>
c0018fb7:	83 c4 10             	add    esp,0x10
c0018fba:	90                   	nop
c0018fbb:	83 c4 0c             	add    esp,0xc
c0018fbe:	c3                   	ret    
c0018fbf:	90                   	nop

c0018fc0 <FAT::~FAT()>:
c0018fc0:	83 ec 0c             	sub    esp,0xc
c0018fc3:	83 ec 0c             	sub    esp,0xc
c0018fc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018fca:	e8 cd ff ff ff       	call   c0018f9c <FAT::~FAT()>
c0018fcf:	83 c4 10             	add    esp,0x10
c0018fd2:	83 ec 08             	sub    esp,0x8
c0018fd5:	6a 08                	push   0x8
c0018fd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018fdb:	e8 2c 18 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0018fe0:	83 c4 10             	add    esp,0x10
c0018fe3:	83 c4 0c             	add    esp,0xc
c0018fe6:	c3                   	ret    
c0018fe7:	90                   	nop

c0018fe8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018fe8:	83 ec 1c             	sub    esp,0x1c
c0018feb:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018ff2:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018ff7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ffb:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019002:	83 f8 ff             	cmp    eax,0xffffffff
c0019005:	75 35                	jne    c001903c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0019007:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001900b:	88 c2                	mov    dl,al
c001900d:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019012:	01 d0                	add    eax,edx
c0019014:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019018:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c001901e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019022:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019029:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001902e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019032:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019039:	eb 19                	jmp    c0019054 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001903b:	90                   	nop
c001903c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019040:	88 c2                	mov    dl,al
c0019042:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019046:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c001904d:	01 d0                	add    eax,edx
c001904f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019053:	90                   	nop
c0019054:	83 ec 04             	sub    esp,0x4
c0019057:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001905b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001905f:	8d 44 24 15          	lea    eax,[esp+0x15]
c0019063:	50                   	push   eax
c0019064:	e8 8a bf fe ff       	call   c0004ff3 <f_getlabel>
c0019069:	83 c4 10             	add    esp,0x10
c001906c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019070:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019075:	75 09                	jne    c0019080 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0019077:	b8 00 00 00 00       	mov    eax,0x0
c001907c:	eb 0a                	jmp    c0019088 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001907e:	66 90                	xchg   ax,ax
c0019080:	b8 01 00 00 00       	mov    eax,0x1
c0019085:	8d 76 00             	lea    esi,[esi+0x0]
c0019088:	83 c4 1c             	add    esp,0x1c
c001908b:	c3                   	ret    

c001908c <FAT::setlabel(LogicalDisk*, int, char*)>:
c001908c:	53                   	push   ebx
c001908d:	83 ec 58             	sub    esp,0x58
c0019090:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0019098:	8d 54 24 10          	lea    edx,[esp+0x10]
c001909c:	b9 00 00 00 00       	mov    ecx,0x0
c00190a1:	b8 3c 00 00 00       	mov    eax,0x3c
c00190a6:	83 e0 f8             	and    eax,0xfffffff8
c00190a9:	89 c3                	mov    ebx,eax
c00190ab:	b8 00 00 00 00       	mov    eax,0x0
c00190b0:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c00190b4:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c00190b8:	83 c0 08             	add    eax,0x8
c00190bb:	39 d8                	cmp    eax,ebx
c00190bd:	72 f1                	jb     c00190b0 <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c00190bf:	01 c2                	add    edx,eax
c00190c1:	89 0a                	mov    DWORD PTR [edx],ecx
c00190c3:	83 c2 04             	add    edx,0x4
c00190c6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00190ca:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00190d1:	83 f8 ff             	cmp    eax,0xffffffff
c00190d4:	75 36                	jne    c001910c <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c00190d6:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00190da:	88 c2                	mov    dl,al
c00190dc:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00190e1:	01 d0                	add    eax,edx
c00190e3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00190e7:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c00190ed:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00190f1:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c00190f8:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00190fd:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0019101:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019108:	eb 1a                	jmp    c0019124 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c001910a:	66 90                	xchg   ax,ax
c001910c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019110:	88 c2                	mov    dl,al
c0019112:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019116:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c001911d:	01 d0                	add    eax,edx
c001911f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019123:	90                   	nop
c0019124:	83 ec 08             	sub    esp,0x8
c0019127:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001912b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001912f:	50                   	push   eax
c0019130:	e8 3b 77 fe ff       	call   c0000870 <strcat>
c0019135:	83 c4 10             	add    esp,0x10
c0019138:	83 ec 0c             	sub    esp,0xc
c001913b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001913f:	50                   	push   eax
c0019140:	e8 02 c0 fe ff       	call   c0005147 <f_setlabel>
c0019145:	83 c4 10             	add    esp,0x10
c0019148:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001914c:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0019151:	75 09                	jne    c001915c <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c0019153:	b8 00 00 00 00       	mov    eax,0x0
c0019158:	eb 0a                	jmp    c0019164 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c001915a:	66 90                	xchg   ax,ax
c001915c:	b8 01 00 00 00       	mov    eax,0x1
c0019161:	8d 76 00             	lea    esi,[esi+0x0]
c0019164:	83 c4 58             	add    esp,0x58
c0019167:	5b                   	pop    ebx
c0019168:	c3                   	ret    
c0019169:	90                   	nop
c001916a:	66 90                	xchg   ax,ax

c001916c <FAT::format(LogicalDisk*, int, char const*, int)>:
c001916c:	83 ec 2c             	sub    esp,0x2c
c001916f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019177:	83 ec 08             	sub    esp,0x8
c001917a:	68 64 2e 02 c0       	push   0xc0022e64
c001917f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019183:	e8 f8 75 fe ff       	call   c0000780 <strcmp>
c0019188:	83 c4 10             	add    esp,0x10
c001918b:	85 c0                	test   eax,eax
c001918d:	0f 94 c0             	sete   al
c0019190:	0f b6 c0             	movzx  eax,al
c0019193:	85 c0                	test   eax,eax
c0019195:	74 0d                	je     c00191a4 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0019197:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001919f:	e9 c0 00 00 00       	jmp    c0019264 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00191a4:	83 ec 08             	sub    esp,0x8
c00191a7:	68 56 2e 02 c0       	push   0xc0022e56
c00191ac:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00191b0:	e8 cb 75 fe ff       	call   c0000780 <strcmp>
c00191b5:	83 c4 10             	add    esp,0x10
c00191b8:	85 c0                	test   eax,eax
c00191ba:	0f 94 c0             	sete   al
c00191bd:	0f b6 c0             	movzx  eax,al
c00191c0:	85 c0                	test   eax,eax
c00191c2:	74 10                	je     c00191d4 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c00191c4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00191cc:	e9 93 00 00 00       	jmp    c0019264 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00191d1:	8d 76 00             	lea    esi,[esi+0x0]
c00191d4:	83 ec 08             	sub    esp,0x8
c00191d7:	68 5c 2e 02 c0       	push   0xc0022e5c
c00191dc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00191e0:	e8 9b 75 fe ff       	call   c0000780 <strcmp>
c00191e5:	83 c4 10             	add    esp,0x10
c00191e8:	85 c0                	test   eax,eax
c00191ea:	0f 94 c0             	sete   al
c00191ed:	0f b6 c0             	movzx  eax,al
c00191f0:	85 c0                	test   eax,eax
c00191f2:	74 0c                	je     c0019200 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c00191f4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00191fc:	eb 66                	jmp    c0019264 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00191fe:	66 90                	xchg   ax,ax
c0019200:	83 ec 08             	sub    esp,0x8
c0019203:	68 9c 05 02 c0       	push   0xc002059c
c0019208:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001920c:	e8 6f 75 fe ff       	call   c0000780 <strcmp>
c0019211:	83 c4 10             	add    esp,0x10
c0019214:	85 c0                	test   eax,eax
c0019216:	0f 94 c0             	sete   al
c0019219:	0f b6 c0             	movzx  eax,al
c001921c:	85 c0                	test   eax,eax
c001921e:	74 0c                	je     c001922c <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0019220:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0019228:	eb 3a                	jmp    c0019264 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001922a:	66 90                	xchg   ax,ax
c001922c:	83 ec 08             	sub    esp,0x8
c001922f:	68 62 2e 02 c0       	push   0xc0022e62
c0019234:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019238:	e8 43 75 fe ff       	call   c0000780 <strcmp>
c001923d:	83 c4 10             	add    esp,0x10
c0019240:	85 c0                	test   eax,eax
c0019242:	0f 94 c0             	sete   al
c0019245:	0f b6 c0             	movzx  eax,al
c0019248:	85 c0                	test   eax,eax
c001924a:	74 0c                	je     c0019258 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c001924c:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0019254:	eb 0e                	jmp    c0019264 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019256:	66 90                	xchg   ax,ax
c0019258:	b8 08 00 00 00       	mov    eax,0x8
c001925d:	e9 ea 00 00 00       	jmp    c001934c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019262:	66 90                	xchg   ax,ax
c0019264:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001926b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0019270:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019274:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c001927b:	83 f8 ff             	cmp    eax,0xffffffff
c001927e:	75 34                	jne    c00192b4 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0019280:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019284:	88 c2                	mov    dl,al
c0019286:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001928b:	01 d0                	add    eax,edx
c001928d:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019291:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0019297:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001929b:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c00192a2:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00192a7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00192ab:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c00192b2:	eb 18                	jmp    c00192cc <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c00192b4:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00192b8:	88 c2                	mov    dl,al
c00192ba:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00192be:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00192c5:	01 d0                	add    eax,edx
c00192c7:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00192cb:	90                   	nop
c00192cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00192d0:	88 04 24             	mov    BYTE PTR [esp],al
c00192d3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00192d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00192db:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00192e3:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00192e8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00192f0:	83 ec 0c             	sub    esp,0xc
c00192f3:	68 00 20 00 00       	push   0x2000
c00192f8:	e8 d6 e7 fe ff       	call   c0007ad3 <malloc>
c00192fd:	83 c4 10             	add    esp,0x10
c0019300:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019304:	68 00 20 00 00       	push   0x2000
c0019309:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001930d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019311:	50                   	push   eax
c0019312:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0019316:	50                   	push   eax
c0019317:	e8 28 c1 fe ff       	call   c0005444 <f_mkfs>
c001931c:	83 c4 10             	add    esp,0x10
c001931f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019323:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019328:	75 0a                	jne    c0019334 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001932a:	b8 00 00 00 00       	mov    eax,0x0
c001932f:	eb 1b                	jmp    c001934c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019331:	8d 76 00             	lea    esi,[esi+0x0]
c0019334:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0019339:	75 09                	jne    c0019344 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001933b:	b8 09 00 00 00       	mov    eax,0x9
c0019340:	eb 0a                	jmp    c001934c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019342:	66 90                	xchg   ax,ax
c0019344:	b8 01 00 00 00       	mov    eax,0x1
c0019349:	8d 76 00             	lea    esi,[esi+0x0]
c001934c:	83 c4 2c             	add    esp,0x2c
c001934f:	c3                   	ret    

c0019350 <FAT::tryMount(LogicalDisk*, int)>:
c0019350:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0019356:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001935b:	83 f8 14             	cmp    eax,0x14
c001935e:	75 18                	jne    c0019378 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0019360:	83 ec 0c             	sub    esp,0xc
c0019363:	68 68 2e 02 c0       	push   0xc0022e68
c0019368:	e8 9e 82 ff ff       	call   c001160b <KePanic(char const*)>
c001936d:	83 c4 10             	add    esp,0x10
c0019370:	b0 00                	mov    al,0x0
c0019372:	e9 ed 01 00 00       	jmp    c0019564 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019377:	90                   	nop
c0019378:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001937f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019385:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001938b:	3d 00 02 00 00       	cmp    eax,0x200
c0019390:	74 0a                	je     c001939c <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0019392:	b0 00                	mov    al,0x0
c0019394:	e9 cb 01 00 00       	jmp    c0019564 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019399:	8d 76 00             	lea    esi,[esi+0x0]
c001939c:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00193a4:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00193ab:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00193b2:	83 f8 ff             	cmp    eax,0xffffffff
c00193b5:	74 09                	je     c00193c0 <FAT::tryMount(LogicalDisk*, int)+0x70>
c00193b7:	b0 01                	mov    al,0x1
c00193b9:	e9 a6 01 00 00       	jmp    c0019564 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00193be:	66 90                	xchg   ax,ax
c00193c0:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c00193ca:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c00193d2:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00193d9:	88 c2                	mov    dl,al
c00193db:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00193e0:	01 d0                	add    eax,edx
c00193e2:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00193e9:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c00193ef:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00193f6:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c00193fd:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019402:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0019409:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019410:	83 ec 0c             	sub    esp,0xc
c0019413:	68 34 02 00 00       	push   0x234
c0019418:	e8 b6 e6 fe ff       	call   c0007ad3 <malloc>
c001941d:	83 c4 10             	add    esp,0x10
c0019420:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0019427:	83 ec 04             	sub    esp,0x4
c001942a:	6a 00                	push   0x0
c001942c:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019433:	50                   	push   eax
c0019434:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001943b:	e8 fe a7 fe ff       	call   c0003c3e <f_mount>
c0019440:	83 c4 10             	add    esp,0x10
c0019443:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001944a:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0019452:	74 1c                	je     c0019470 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0019454:	83 ec 0c             	sub    esp,0xc
c0019457:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001945e:	e8 90 e6 fe ff       	call   c0007af3 <rfree>
c0019463:	83 c4 10             	add    esp,0x10
c0019466:	b0 00                	mov    al,0x0
c0019468:	e9 f7 00 00 00       	jmp    c0019564 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001946d:	8d 76 00             	lea    esi,[esi+0x0]
c0019470:	83 ec 04             	sub    esp,0x4
c0019473:	68 00 01 00 00       	push   0x100
c0019478:	6a 00                	push   0x0
c001947a:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019481:	50                   	push   eax
c0019482:	e8 69 70 fe ff       	call   c00004f0 <memset>
c0019487:	83 c4 10             	add    esp,0x10
c001948a:	83 ec 08             	sub    esp,0x8
c001948d:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019494:	50                   	push   eax
c0019495:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001949c:	50                   	push   eax
c001949d:	e8 ce 73 fe ff       	call   c0000870 <strcat>
c00194a2:	83 c4 10             	add    esp,0x10
c00194a5:	83 ec 08             	sub    esp,0x8
c00194a8:	68 76 2e 02 c0       	push   0xc0022e76
c00194ad:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00194b4:	50                   	push   eax
c00194b5:	e8 b6 73 fe ff       	call   c0000870 <strcat>
c00194ba:	83 c4 10             	add    esp,0x10
c00194bd:	83 ec 04             	sub    esp,0x4
c00194c0:	6a 01                	push   0x1
c00194c2:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c00194c9:	50                   	push   eax
c00194ca:	8d 44 24 14          	lea    eax,[esp+0x14]
c00194ce:	50                   	push   eax
c00194cf:	e8 cc a7 fe ff       	call   c0003ca0 <f_open>
c00194d4:	83 c4 10             	add    esp,0x10
c00194d7:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00194de:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c00194e5:	85 c0                	test   eax,eax
c00194e7:	74 0b                	je     c00194f4 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c00194e9:	78 31                	js     c001951c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00194eb:	83 e8 04             	sub    eax,0x4
c00194ee:	83 f8 01             	cmp    eax,0x1
c00194f1:	77 29                	ja     c001951c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00194f3:	90                   	nop
c00194f4:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c00194fc:	83 ec 0c             	sub    esp,0xc
c00194ff:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019503:	50                   	push   eax
c0019504:	e8 47 af fe ff       	call   c0004450 <f_close>
c0019509:	83 c4 10             	add    esp,0x10
c001950c:	90                   	nop
c001950d:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0019515:	85 c0                	test   eax,eax
c0019517:	74 43                	je     c001955c <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0019519:	eb 31                	jmp    c001954c <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001951b:	90                   	nop
c001951c:	83 ec 0c             	sub    esp,0xc
c001951f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019526:	e8 c8 e5 fe ff       	call   c0007af3 <rfree>
c001952b:	83 c4 10             	add    esp,0x10
c001952e:	83 ec 04             	sub    esp,0x4
c0019531:	6a 00                	push   0x0
c0019533:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001953a:	50                   	push   eax
c001953b:	6a 00                	push   0x0
c001953d:	e8 fc a6 fe ff       	call   c0003c3e <f_mount>
c0019542:	83 c4 10             	add    esp,0x10
c0019545:	b0 00                	mov    al,0x0
c0019547:	eb 1b                	jmp    c0019564 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019549:	8d 76 00             	lea    esi,[esi+0x0]
c001954c:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019551:	83 c0 01             	add    eax,0x1
c0019554:	a3 80 c7 02 c0       	mov    ds:0xc002c780,eax
c0019559:	8d 76 00             	lea    esi,[esi+0x0]
c001955c:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0019563:	90                   	nop
c0019564:	81 c4 4c 03 00 00    	add    esp,0x34c
c001956a:	c3                   	ret    
c001956b:	90                   	nop

c001956c <FAT::allocateSwapfile(char const*, int)>:
c001956c:	55                   	push   ebp
c001956d:	57                   	push   edi
c001956e:	56                   	push   esi
c001956f:	53                   	push   ebx
c0019570:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0019576:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0019581:	83 ec 0c             	sub    esp,0xc
c0019584:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001958b:	e8 43 e5 fe ff       	call   c0007ad3 <malloc>
c0019590:	83 c4 10             	add    esp,0x10
c0019593:	89 c7                	mov    edi,eax
c0019595:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001959a:	83 ec 04             	sub    esp,0x4
c001959d:	50                   	push   eax
c001959e:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c00195a5:	57                   	push   edi
c00195a6:	e8 19 26 ff ff       	call   c000bbc4 <File::File(char const*, Process*)>
c00195ab:	83 c4 10             	add    esp,0x10
c00195ae:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c00195b5:	83 ec 04             	sub    esp,0x4
c00195b8:	8d 44 24 13          	lea    eax,[esp+0x13]
c00195bc:	50                   	push   eax
c00195bd:	8d 44 24 18          	lea    eax,[esp+0x18]
c00195c1:	50                   	push   eax
c00195c2:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00195c9:	e8 16 29 ff ff       	call   c000bee4 <File::stat(unsigned long long*, bool*)>
c00195ce:	83 c4 10             	add    esp,0x10
c00195d1:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00195d8:	c1 e0 14             	shl    eax,0x14
c00195db:	89 c7                	mov    edi,eax
c00195dd:	89 c5                	mov    ebp,eax
c00195df:	c1 fd 1f             	sar    ebp,0x1f
c00195e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195e6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00195ea:	89 f9                	mov    ecx,edi
c00195ec:	31 c1                	xor    ecx,eax
c00195ee:	89 cb                	mov    ebx,ecx
c00195f0:	89 e9                	mov    ecx,ebp
c00195f2:	31 d1                	xor    ecx,edx
c00195f4:	89 ce                	mov    esi,ecx
c00195f6:	89 f0                	mov    eax,esi
c00195f8:	09 d8                	or     eax,ebx
c00195fa:	0f 84 9c 00 00 00    	je     c001969c <FAT::allocateSwapfile(char const*, int)+0x130>
c0019600:	83 ec 0c             	sub    esp,0xc
c0019603:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001960a:	e8 a1 27 ff ff       	call   c000bdb0 <File::unlink()>
c001960f:	83 c4 10             	add    esp,0x10
c0019612:	83 ec 08             	sub    esp,0x8
c0019615:	6a 12                	push   0x12
c0019617:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001961e:	e8 bf 25 ff ff       	call   c000bbe2 <File::open(FileOpenMode)>
c0019623:	83 c4 10             	add    esp,0x10
c0019626:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001962d:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019633:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001963a:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019641:	c1 e0 14             	shl    eax,0x14
c0019644:	83 ec 04             	sub    esp,0x4
c0019647:	6a 01                	push   0x1
c0019649:	50                   	push   eax
c001964a:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0019651:	e8 81 bc fe ff       	call   c00052d7 <f_expand>
c0019656:	83 c4 10             	add    esp,0x10
c0019659:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019660:	8b 00                	mov    eax,DWORD PTR [eax]
c0019662:	83 c0 10             	add    eax,0x10
c0019665:	8b 00                	mov    eax,DWORD PTR [eax]
c0019667:	83 ec 0c             	sub    esp,0xc
c001966a:	8d 54 24 24          	lea    edx,[esp+0x24]
c001966e:	52                   	push   edx
c001966f:	8d 54 24 30          	lea    edx,[esp+0x30]
c0019673:	52                   	push   edx
c0019674:	6a 00                	push   0x0
c0019676:	68 00 04 00 00       	push   0x400
c001967b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019682:	ff d0                	call   eax
c0019684:	83 c4 20             	add    esp,0x20
c0019687:	83 ec 0c             	sub    esp,0xc
c001968a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019691:	e8 aa 25 ff ff       	call   c000bc40 <File::close()>
c0019696:	83 c4 10             	add    esp,0x10
c0019699:	8d 76 00             	lea    esi,[esi+0x0]
c001969c:	83 ec 08             	sub    esp,0x8
c001969f:	6a 01                	push   0x1
c00196a1:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00196a8:	e8 35 25 ff ff       	call   c000bbe2 <File::open(FileOpenMode)>
c00196ad:	83 c4 10             	add    esp,0x10
c00196b0:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00196b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00196b9:	83 c0 0c             	add    eax,0xc
c00196bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00196be:	83 ec 0c             	sub    esp,0xc
c00196c1:	8d 54 24 24          	lea    edx,[esp+0x24]
c00196c5:	52                   	push   edx
c00196c6:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00196ca:	52                   	push   edx
c00196cb:	6a 00                	push   0x0
c00196cd:	6a 04                	push   0x4
c00196cf:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00196d6:	ff d0                	call   eax
c00196d8:	83 c4 20             	add    esp,0x20
c00196db:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00196e2:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00196e8:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00196ef:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c00196f6:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00196f9:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0019700:	83 ec 0c             	sub    esp,0xc
c0019703:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001970a:	e8 31 25 ff ff       	call   c000bc40 <File::close()>
c001970f:	83 c4 10             	add    esp,0x10
c0019712:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0019719:	ba 00 00 00 00       	mov    edx,0x0
c001971e:	81 c4 3c 04 00 00    	add    esp,0x43c
c0019724:	5b                   	pop    ebx
c0019725:	5e                   	pop    esi
c0019726:	5f                   	pop    edi
c0019727:	5d                   	pop    ebp
c0019728:	c3                   	ret    
c0019729:	90                   	nop
c001972a:	66 90                	xchg   ax,ax

c001972c <FAT::readDir(void*, unsigned long, void*, int*)>:
c001972c:	57                   	push   edi
c001972d:	56                   	push   esi
c001972e:	53                   	push   ebx
c001972f:	81 ec 50 02 00 00    	sub    esp,0x250
c0019735:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001973d:	74 0d                	je     c001974c <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001973f:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0019747:	75 0f                	jne    c0019758 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0019749:	8d 76 00             	lea    esi,[esi+0x0]
c001974c:	b8 04 00 00 00       	mov    eax,0x4
c0019751:	e9 3a 01 00 00       	jmp    c0019890 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019756:	66 90                	xchg   ax,ax
c0019758:	83 ec 08             	sub    esp,0x8
c001975b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019762:	50                   	push   eax
c0019763:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001976a:	e8 ad af fe ff       	call   c000471c <f_readdir>
c001976f:	83 c4 10             	add    esp,0x10
c0019772:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0019779:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0019780:	83 ec 0c             	sub    esp,0xc
c0019783:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001978a:	83 c0 16             	add    eax,0x16
c001978d:	50                   	push   eax
c001978e:	e8 ed 6d fe ff       	call   c0000580 <strlen>
c0019793:	83 c4 10             	add    esp,0x10
c0019796:	ba 00 00 00 00       	mov    edx,0x0
c001979b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001979f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00197a3:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00197aa:	0f b6 c0             	movzx  eax,al
c00197ad:	83 e0 10             	and    eax,0x10
c00197b0:	74 0a                	je     c00197bc <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c00197b2:	b8 02 00 00 00       	mov    eax,0x2
c00197b7:	eb 0b                	jmp    c00197c4 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c00197b9:	8d 76 00             	lea    esi,[esi+0x0]
c00197bc:	b8 01 00 00 00       	mov    eax,0x1
c00197c1:	8d 76 00             	lea    esi,[esi+0x0]
c00197c4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00197c8:	83 ec 08             	sub    esp,0x8
c00197cb:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00197d2:	83 c0 16             	add    eax,0x16
c00197d5:	50                   	push   eax
c00197d6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00197da:	83 c0 10             	add    eax,0x10
c00197dd:	50                   	push   eax
c00197de:	e8 6d 6e fe ff       	call   c0000650 <strcpy>
c00197e3:	83 c4 10             	add    esp,0x10
c00197e6:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00197ed:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00197f4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00197f8:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00197ff:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0019806:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001980d:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0019814:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001981b:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0019822:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0019829:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0019830:	89 c6                	mov    esi,eax
c0019832:	89 d7                	mov    edi,edx
c0019834:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019836:	89 c8                	mov    eax,ecx
c0019838:	89 fa                	mov    edx,edi
c001983a:	89 f3                	mov    ebx,esi
c001983c:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0019843:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001984a:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0019851:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0019858:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001985e:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0019865:	0f be c0             	movsx  eax,al
c0019868:	85 c0                	test   eax,eax
c001986a:	75 08                	jne    c0019874 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001986c:	b8 07 00 00 00       	mov    eax,0x7
c0019871:	eb 1d                	jmp    c0019890 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019873:	90                   	nop
c0019874:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001987b:	85 c0                	test   eax,eax
c001987d:	75 09                	jne    c0019888 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001987f:	b8 00 00 00 00       	mov    eax,0x0
c0019884:	eb 0a                	jmp    c0019890 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019886:	66 90                	xchg   ax,ax
c0019888:	b8 01 00 00 00       	mov    eax,0x1
c001988d:	8d 76 00             	lea    esi,[esi+0x0]
c0019890:	81 c4 50 02 00 00    	add    esp,0x250
c0019896:	5b                   	pop    ebx
c0019897:	5e                   	pop    esi
c0019898:	5f                   	pop    edi
c0019899:	c3                   	ret    
c001989a:	66 90                	xchg   ax,ax

c001989c <FAT::read(void*, unsigned long, void*, int*)>:
c001989c:	83 ec 1c             	sub    esp,0x1c
c001989f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00198a4:	74 0a                	je     c00198b0 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c00198a6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00198ab:	75 0b                	jne    c00198b8 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c00198ad:	8d 76 00             	lea    esi,[esi+0x0]
c00198b0:	b8 04 00 00 00       	mov    eax,0x4
c00198b5:	eb 41                	jmp    c00198f8 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00198b7:	90                   	nop
c00198b8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00198bc:	50                   	push   eax
c00198bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00198c1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00198c5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00198c9:	e8 95 a6 fe ff       	call   c0003f63 <f_read>
c00198ce:	83 c4 10             	add    esp,0x10
c00198d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00198d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00198d9:	89 c2                	mov    edx,eax
c00198db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00198df:	89 10                	mov    DWORD PTR [eax],edx
c00198e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00198e5:	85 c0                	test   eax,eax
c00198e7:	75 07                	jne    c00198f0 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c00198e9:	b8 00 00 00 00       	mov    eax,0x0
c00198ee:	eb 08                	jmp    c00198f8 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00198f0:	b8 01 00 00 00       	mov    eax,0x1
c00198f5:	8d 76 00             	lea    esi,[esi+0x0]
c00198f8:	83 c4 1c             	add    esp,0x1c
c00198fb:	c3                   	ret    

c00198fc <FAT::write(void*, unsigned long, void*, int*)>:
c00198fc:	83 ec 1c             	sub    esp,0x1c
c00198ff:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019904:	74 0a                	je     c0019910 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0019906:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001990b:	75 0b                	jne    c0019918 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001990d:	8d 76 00             	lea    esi,[esi+0x0]
c0019910:	b8 04 00 00 00       	mov    eax,0x4
c0019915:	eb 41                	jmp    c0019958 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019917:	90                   	nop
c0019918:	8d 44 24 08          	lea    eax,[esp+0x8]
c001991c:	50                   	push   eax
c001991d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019921:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019925:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019929:	e8 16 a8 fe ff       	call   c0004144 <f_write>
c001992e:	83 c4 10             	add    esp,0x10
c0019931:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019935:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019939:	89 c2                	mov    edx,eax
c001993b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001993f:	89 10                	mov    DWORD PTR [eax],edx
c0019941:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019945:	85 c0                	test   eax,eax
c0019947:	75 07                	jne    c0019950 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0019949:	b8 00 00 00 00       	mov    eax,0x0
c001994e:	eb 08                	jmp    c0019958 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019950:	b8 01 00 00 00       	mov    eax,0x1
c0019955:	8d 76 00             	lea    esi,[esi+0x0]
c0019958:	83 c4 1c             	add    esp,0x1c
c001995b:	c3                   	ret    

c001995c <FAT::close(void*)>:
c001995c:	83 ec 1c             	sub    esp,0x1c
c001995f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019964:	75 0a                	jne    c0019970 <FAT::close(void*)+0x14>
c0019966:	b8 04 00 00 00       	mov    eax,0x4
c001996b:	eb 3f                	jmp    c00199ac <FAT::close(void*)+0x50>
c001996d:	8d 76 00             	lea    esi,[esi+0x0]
c0019970:	83 ec 0c             	sub    esp,0xc
c0019973:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019977:	e8 d4 aa fe ff       	call   c0004450 <f_close>
c001997c:	83 c4 10             	add    esp,0x10
c001997f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019983:	83 ec 0c             	sub    esp,0xc
c0019986:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001998a:	e8 54 e1 fe ff       	call   c0007ae3 <free>
c001998f:	83 c4 10             	add    esp,0x10
c0019992:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019996:	85 c0                	test   eax,eax
c0019998:	75 0a                	jne    c00199a4 <FAT::close(void*)+0x48>
c001999a:	b8 00 00 00 00       	mov    eax,0x0
c001999f:	eb 0b                	jmp    c00199ac <FAT::close(void*)+0x50>
c00199a1:	8d 76 00             	lea    esi,[esi+0x0]
c00199a4:	b8 01 00 00 00       	mov    eax,0x1
c00199a9:	8d 76 00             	lea    esi,[esi+0x0]
c00199ac:	83 c4 1c             	add    esp,0x1c
c00199af:	c3                   	ret    

c00199b0 <FAT::closeDir(void*)>:
c00199b0:	83 ec 1c             	sub    esp,0x1c
c00199b3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00199b8:	75 0a                	jne    c00199c4 <FAT::closeDir(void*)+0x14>
c00199ba:	b8 04 00 00 00       	mov    eax,0x4
c00199bf:	eb 3f                	jmp    c0019a00 <FAT::closeDir(void*)+0x50>
c00199c1:	8d 76 00             	lea    esi,[esi+0x0]
c00199c4:	83 ec 0c             	sub    esp,0xc
c00199c7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00199cb:	e8 2a ad fe ff       	call   c00046fa <f_closedir>
c00199d0:	83 c4 10             	add    esp,0x10
c00199d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00199d7:	83 ec 0c             	sub    esp,0xc
c00199da:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00199de:	e8 00 e1 fe ff       	call   c0007ae3 <free>
c00199e3:	83 c4 10             	add    esp,0x10
c00199e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00199ea:	85 c0                	test   eax,eax
c00199ec:	75 0a                	jne    c00199f8 <FAT::closeDir(void*)+0x48>
c00199ee:	b8 00 00 00 00       	mov    eax,0x0
c00199f3:	eb 0b                	jmp    c0019a00 <FAT::closeDir(void*)+0x50>
c00199f5:	8d 76 00             	lea    esi,[esi+0x0]
c00199f8:	b8 01 00 00 00       	mov    eax,0x1
c00199fd:	8d 76 00             	lea    esi,[esi+0x0]
c0019a00:	83 c4 1c             	add    esp,0x1c
c0019a03:	c3                   	ret    

c0019a04 <FAT::truncate(void*, unsigned long long)>:
c0019a04:	83 ec 2c             	sub    esp,0x2c
c0019a07:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019a0b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019a0f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019a13:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a17:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019a1c:	75 0a                	jne    c0019a28 <FAT::truncate(void*, unsigned long long)+0x24>
c0019a1e:	b8 04 00 00 00       	mov    eax,0x4
c0019a23:	eb 47                	jmp    c0019a6c <FAT::truncate(void*, unsigned long long)+0x68>
c0019a25:	8d 76 00             	lea    esi,[esi+0x0]
c0019a28:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019a2c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019a2f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019a33:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019a3b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a3f:	83 ec 08             	sub    esp,0x8
c0019a42:	50                   	push   eax
c0019a43:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019a47:	e8 33 aa fe ff       	call   c000447f <f_lseek>
c0019a4c:	83 c4 10             	add    esp,0x10
c0019a4f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019a53:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019a57:	85 c0                	test   eax,eax
c0019a59:	75 09                	jne    c0019a64 <FAT::truncate(void*, unsigned long long)+0x60>
c0019a5b:	b8 00 00 00 00       	mov    eax,0x0
c0019a60:	eb 0a                	jmp    c0019a6c <FAT::truncate(void*, unsigned long long)+0x68>
c0019a62:	66 90                	xchg   ax,ax
c0019a64:	b8 01 00 00 00       	mov    eax,0x1
c0019a69:	8d 76 00             	lea    esi,[esi+0x0]
c0019a6c:	83 c4 2c             	add    esp,0x2c
c0019a6f:	c3                   	ret    

c0019a70 <FAT::seek(void*, unsigned long long)>:
c0019a70:	83 ec 2c             	sub    esp,0x2c
c0019a73:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019a77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019a7b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019a7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a83:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019a88:	75 0a                	jne    c0019a94 <FAT::seek(void*, unsigned long long)+0x24>
c0019a8a:	b8 04 00 00 00       	mov    eax,0x4
c0019a8f:	eb 33                	jmp    c0019ac4 <FAT::seek(void*, unsigned long long)+0x54>
c0019a91:	8d 76 00             	lea    esi,[esi+0x0]
c0019a94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a98:	83 ec 08             	sub    esp,0x8
c0019a9b:	50                   	push   eax
c0019a9c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019aa0:	e8 da a9 fe ff       	call   c000447f <f_lseek>
c0019aa5:	83 c4 10             	add    esp,0x10
c0019aa8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019aac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019ab0:	85 c0                	test   eax,eax
c0019ab2:	75 08                	jne    c0019abc <FAT::seek(void*, unsigned long long)+0x4c>
c0019ab4:	b8 00 00 00 00       	mov    eax,0x0
c0019ab9:	eb 09                	jmp    c0019ac4 <FAT::seek(void*, unsigned long long)+0x54>
c0019abb:	90                   	nop
c0019abc:	b8 01 00 00 00       	mov    eax,0x1
c0019ac1:	8d 76 00             	lea    esi,[esi+0x0]
c0019ac4:	83 c4 2c             	add    esp,0x2c
c0019ac7:	c3                   	ret    

c0019ac8 <fatWrapperReadDisk>:
c0019ac8:	53                   	push   ebx
c0019ac9:	83 ec 18             	sub    esp,0x18
c0019acc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ad0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019ad4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019ad9:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019ae0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019ae4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019ae8:	ba 00 00 00 00       	mov    edx,0x0
c0019aed:	83 ec 0c             	sub    esp,0xc
c0019af0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019af4:	53                   	push   ebx
c0019af5:	52                   	push   edx
c0019af6:	50                   	push   eax
c0019af7:	51                   	push   ecx
c0019af8:	e8 31 43 ff ff       	call   c000de2e <LogicalDisk::read(unsigned long long, int, void*)>
c0019afd:	83 c4 20             	add    esp,0x20
c0019b00:	83 c4 18             	add    esp,0x18
c0019b03:	5b                   	pop    ebx
c0019b04:	c3                   	ret    
c0019b05:	8d 76 00             	lea    esi,[esi+0x0]

c0019b08 <fatWrapperWriteDisk>:
c0019b08:	53                   	push   ebx
c0019b09:	83 ec 18             	sub    esp,0x18
c0019b0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b10:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019b14:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b19:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019b20:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019b24:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019b28:	ba 00 00 00 00       	mov    edx,0x0
c0019b2d:	83 ec 0c             	sub    esp,0xc
c0019b30:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019b34:	53                   	push   ebx
c0019b35:	52                   	push   edx
c0019b36:	50                   	push   eax
c0019b37:	51                   	push   ecx
c0019b38:	e8 5d 43 ff ff       	call   c000de9a <LogicalDisk::write(unsigned long long, int, void*)>
c0019b3d:	83 c4 20             	add    esp,0x20
c0019b40:	83 c4 18             	add    esp,0x18
c0019b43:	5b                   	pop    ebx
c0019b44:	c3                   	ret    
c0019b45:	8d 76 00             	lea    esi,[esi+0x0]

c0019b48 <fatWrapperIoctl>:
c0019b48:	53                   	push   ebx
c0019b49:	83 ec 28             	sub    esp,0x28
c0019b4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019b50:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019b54:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019b58:	88 d0                	mov    al,dl
c0019b5a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019b5e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b63:	83 f8 02             	cmp    eax,0x2
c0019b66:	75 34                	jne    c0019b9c <fatWrapperIoctl+0x54>
c0019b68:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019b6c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019b70:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b75:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019b7c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019b82:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019b88:	89 c2                	mov    edx,eax
c0019b8a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019b8e:	66 89 10             	mov    WORD PTR [eax],dx
c0019b91:	b8 00 00 00 00       	mov    eax,0x0
c0019b96:	e9 c5 00 00 00       	jmp    c0019c60 <fatWrapperIoctl+0x118>
c0019b9b:	90                   	nop
c0019b9c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019ba1:	83 f8 01             	cmp    eax,0x1
c0019ba4:	75 6a                	jne    c0019c10 <fatWrapperIoctl+0xc8>
c0019ba6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019baa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019bae:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019bb3:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019bba:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019bc0:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019bc6:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019bcc:	89 c8                	mov    eax,ecx
c0019bce:	89 da                	mov    edx,ebx
c0019bd0:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019bd4:	c1 e0 0a             	shl    eax,0xa
c0019bd7:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019bdc:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0019be3:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019be9:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019bef:	89 cb                	mov    ebx,ecx
c0019bf1:	c1 fb 1f             	sar    ebx,0x1f
c0019bf4:	53                   	push   ebx
c0019bf5:	51                   	push   ecx
c0019bf6:	52                   	push   edx
c0019bf7:	50                   	push   eax
c0019bf8:	e8 b3 5b 00 00       	call   c001f7b0 <__udivdi3>
c0019bfd:	83 c4 10             	add    esp,0x10
c0019c00:	89 c2                	mov    edx,eax
c0019c02:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019c06:	89 10                	mov    DWORD PTR [eax],edx
c0019c08:	b8 00 00 00 00       	mov    eax,0x0
c0019c0d:	eb 51                	jmp    c0019c60 <fatWrapperIoctl+0x118>
c0019c0f:	90                   	nop
c0019c10:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c15:	85 c0                	test   eax,eax
c0019c17:	75 07                	jne    c0019c20 <fatWrapperIoctl+0xd8>
c0019c19:	b8 00 00 00 00       	mov    eax,0x0
c0019c1e:	eb 40                	jmp    c0019c60 <fatWrapperIoctl+0x118>
c0019c20:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c25:	83 f8 03             	cmp    eax,0x3
c0019c28:	75 1a                	jne    c0019c44 <fatWrapperIoctl+0xfc>
c0019c2a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019c2e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019c32:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019c36:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019c3c:	b8 00 00 00 00       	mov    eax,0x0
c0019c41:	eb 1d                	jmp    c0019c60 <fatWrapperIoctl+0x118>
c0019c43:	90                   	nop
c0019c44:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c49:	83 f8 04             	cmp    eax,0x4
c0019c4c:	75 0a                	jne    c0019c58 <fatWrapperIoctl+0x110>
c0019c4e:	b8 00 00 00 00       	mov    eax,0x0
c0019c53:	eb 0b                	jmp    c0019c60 <fatWrapperIoctl+0x118>
c0019c55:	8d 76 00             	lea    esi,[esi+0x0]
c0019c58:	b8 04 00 00 00       	mov    eax,0x4
c0019c5d:	8d 76 00             	lea    esi,[esi+0x0]
c0019c60:	83 c4 28             	add    esp,0x28
c0019c63:	5b                   	pop    ebx
c0019c64:	c3                   	ret    
c0019c65:	90                   	nop
c0019c66:	66 90                	xchg   ax,ax

c0019c68 <FAT::FAT()>:
c0019c68:	83 ec 1c             	sub    esp,0x1c
c0019c6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019c6f:	83 ec 0c             	sub    esp,0xc
c0019c72:	50                   	push   eax
c0019c73:	e8 96 1b ff ff       	call   c000b80e <Filesystem::Filesystem()>
c0019c78:	83 c4 10             	add    esp,0x10
c0019c7b:	ba 8c 2e 02 c0       	mov    edx,0xc0022e8c
c0019c80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019c84:	89 10                	mov    DWORD PTR [eax],edx
c0019c86:	c7 05 80 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c780,0x0
c0019c90:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019c98:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019c9d:	7f 19                	jg     c0019cb8 <FAT::FAT()+0x50>
c0019c9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019ca3:	c7 04 85 a0 c7 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd3860],0xffffffff
c0019cae:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019cb3:	eb e3                	jmp    c0019c98 <FAT::FAT()+0x30>
c0019cb5:	8d 76 00             	lea    esi,[esi+0x0]
c0019cb8:	90                   	nop
c0019cb9:	83 c4 1c             	add    esp,0x1c
c0019cbc:	c3                   	ret    
c0019cbd:	90                   	nop
c0019cbe:	66 90                	xchg   ax,ax

c0019cc0 <FAT::fixFilepath(char*)>:
c0019cc0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019cc4:	8a 00                	mov    al,BYTE PTR [eax]
c0019cc6:	0f be c0             	movsx  eax,al
c0019cc9:	83 f8 40             	cmp    eax,0x40
c0019ccc:	7e 2e                	jle    c0019cfc <FAT::fixFilepath(char*)+0x3c>
c0019cce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019cd2:	8a 00                	mov    al,BYTE PTR [eax]
c0019cd4:	83 e8 41             	sub    eax,0x41
c0019cd7:	88 c2                	mov    dl,al
c0019cd9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019cdd:	88 10                	mov    BYTE PTR [eax],dl
c0019cdf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019ce3:	8a 00                	mov    al,BYTE PTR [eax]
c0019ce5:	0f be c0             	movsx  eax,al
c0019ce8:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019cef:	83 c0 30             	add    eax,0x30
c0019cf2:	88 c2                	mov    dl,al
c0019cf4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019cf8:	88 10                	mov    BYTE PTR [eax],dl
c0019cfa:	66 90                	xchg   ax,ax
c0019cfc:	90                   	nop
c0019cfd:	c3                   	ret    
c0019cfe:	66 90                	xchg   ax,ax

c0019d00 <FAT::open(char const*, void**, FileOpenMode)>:
c0019d00:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019d06:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019d0e:	74 0c                	je     c0019d1c <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0019d10:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019d18:	75 0e                	jne    c0019d28 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0019d1a:	66 90                	xchg   ax,ax
c0019d1c:	b8 04 00 00 00       	mov    eax,0x4
c0019d21:	e9 46 01 00 00       	jmp    c0019e6c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019d26:	66 90                	xchg   ax,ax
c0019d28:	83 ec 08             	sub    esp,0x8
c0019d2b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d32:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d36:	50                   	push   eax
c0019d37:	e8 14 69 fe ff       	call   c0000650 <strcpy>
c0019d3c:	83 c4 10             	add    esp,0x10
c0019d3f:	83 ec 08             	sub    esp,0x8
c0019d42:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019d46:	50                   	push   eax
c0019d47:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d4e:	e8 6d ff ff ff       	call   c0019cc0 <FAT::fixFilepath(char*)>
c0019d53:	83 c4 10             	add    esp,0x10
c0019d56:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019d5e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d65:	83 e0 01             	and    eax,0x1
c0019d68:	74 12                	je     c0019d7c <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0019d6a:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d71:	83 c8 01             	or     eax,0x1
c0019d74:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d7b:	90                   	nop
c0019d7c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d83:	83 e0 04             	and    eax,0x4
c0019d86:	74 24                	je     c0019dac <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0019d88:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d8f:	83 c8 30             	or     eax,0x30
c0019d92:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d99:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019da0:	83 c8 02             	or     eax,0x2
c0019da3:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019daa:	66 90                	xchg   ax,ax
c0019dac:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019db3:	83 e0 02             	and    eax,0x2
c0019db6:	74 14                	je     c0019dcc <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0019db8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019dbf:	83 c8 02             	or     eax,0x2
c0019dc2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019dc9:	8d 76 00             	lea    esi,[esi+0x0]
c0019dcc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019dd3:	83 e0 08             	and    eax,0x8
c0019dd6:	74 14                	je     c0019dec <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0019dd8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019ddf:	83 c8 04             	or     eax,0x4
c0019de2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019de9:	8d 76 00             	lea    esi,[esi+0x0]
c0019dec:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019df3:	83 e0 10             	and    eax,0x10
c0019df6:	74 14                	je     c0019e0c <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0019df8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019dff:	83 c8 08             	or     eax,0x8
c0019e02:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e09:	8d 76 00             	lea    esi,[esi+0x0]
c0019e0c:	83 ec 0c             	sub    esp,0xc
c0019e0f:	68 28 02 00 00       	push   0x228
c0019e14:	e8 ba dc fe ff       	call   c0007ad3 <malloc>
c0019e19:	83 c4 10             	add    esp,0x10
c0019e1c:	89 c2                	mov    edx,eax
c0019e1e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019e25:	89 10                	mov    DWORD PTR [eax],edx
c0019e27:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019e2f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019e36:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e38:	83 ec 04             	sub    esp,0x4
c0019e3b:	52                   	push   edx
c0019e3c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019e40:	52                   	push   edx
c0019e41:	50                   	push   eax
c0019e42:	e8 59 9e fe ff       	call   c0003ca0 <f_open>
c0019e47:	83 c4 10             	add    esp,0x10
c0019e4a:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019e51:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019e59:	74 09                	je     c0019e64 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0019e5b:	b8 01 00 00 00       	mov    eax,0x1
c0019e60:	eb 0a                	jmp    c0019e6c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019e62:	66 90                	xchg   ax,ax
c0019e64:	b8 00 00 00 00       	mov    eax,0x0
c0019e69:	8d 76 00             	lea    esi,[esi+0x0]
c0019e6c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019e72:	c3                   	ret    
c0019e73:	90                   	nop

c0019e74 <FAT::openDir(char const*, void**)>:
c0019e74:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019e7a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019e82:	74 0c                	je     c0019e90 <FAT::openDir(char const*, void**)+0x1c>
c0019e84:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019e8c:	75 0e                	jne    c0019e9c <FAT::openDir(char const*, void**)+0x28>
c0019e8e:	66 90                	xchg   ax,ax
c0019e90:	b8 04 00 00 00       	mov    eax,0x4
c0019e95:	e9 82 00 00 00       	jmp    c0019f1c <FAT::openDir(char const*, void**)+0xa8>
c0019e9a:	66 90                	xchg   ax,ax
c0019e9c:	83 ec 08             	sub    esp,0x8
c0019e9f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019ea6:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019eaa:	50                   	push   eax
c0019eab:	e8 a0 67 fe ff       	call   c0000650 <strcpy>
c0019eb0:	83 c4 10             	add    esp,0x10
c0019eb3:	83 ec 08             	sub    esp,0x8
c0019eb6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019eba:	50                   	push   eax
c0019ebb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019ec2:	e8 f9 fd ff ff       	call   c0019cc0 <FAT::fixFilepath(char*)>
c0019ec7:	83 c4 10             	add    esp,0x10
c0019eca:	83 ec 0c             	sub    esp,0xc
c0019ecd:	6a 30                	push   0x30
c0019ecf:	e8 ff db fe ff       	call   c0007ad3 <malloc>
c0019ed4:	83 c4 10             	add    esp,0x10
c0019ed7:	89 c2                	mov    edx,eax
c0019ed9:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019ee0:	89 10                	mov    DWORD PTR [eax],edx
c0019ee2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019ee9:	8b 00                	mov    eax,DWORD PTR [eax]
c0019eeb:	83 ec 08             	sub    esp,0x8
c0019eee:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019ef2:	52                   	push   edx
c0019ef3:	50                   	push   eax
c0019ef4:	e8 36 a7 fe ff       	call   c000462f <f_opendir>
c0019ef9:	83 c4 10             	add    esp,0x10
c0019efc:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019f03:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019f0b:	74 07                	je     c0019f14 <FAT::openDir(char const*, void**)+0xa0>
c0019f0d:	b8 01 00 00 00       	mov    eax,0x1
c0019f12:	eb 08                	jmp    c0019f1c <FAT::openDir(char const*, void**)+0xa8>
c0019f14:	b8 00 00 00 00       	mov    eax,0x0
c0019f19:	8d 76 00             	lea    esi,[esi+0x0]
c0019f1c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019f22:	c3                   	ret    
c0019f23:	90                   	nop

c0019f24 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019f24:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019f2a:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019f32:	75 0c                	jne    c0019f40 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019f34:	b8 04 00 00 00       	mov    eax,0x4
c0019f39:	e9 d6 00 00 00       	jmp    c001a014 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019f3e:	66 90                	xchg   ax,ax
c0019f40:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019f48:	75 0a                	jne    c0019f54 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0019f4a:	b8 04 00 00 00       	mov    eax,0x4
c0019f4f:	e9 c0 00 00 00       	jmp    c001a014 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019f54:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019f5c:	75 0a                	jne    c0019f68 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0019f5e:	b8 04 00 00 00       	mov    eax,0x4
c0019f63:	e9 ac 00 00 00       	jmp    c001a014 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019f68:	83 ec 08             	sub    esp,0x8
c0019f6b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019f72:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019f79:	50                   	push   eax
c0019f7a:	e8 d1 66 fe ff       	call   c0000650 <strcpy>
c0019f7f:	83 c4 10             	add    esp,0x10
c0019f82:	83 ec 08             	sub    esp,0x8
c0019f85:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019f8c:	50                   	push   eax
c0019f8d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019f94:	e8 27 fd ff ff       	call   c0019cc0 <FAT::fixFilepath(char*)>
c0019f99:	83 c4 10             	add    esp,0x10
c0019f9c:	83 ec 08             	sub    esp,0x8
c0019f9f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019fa3:	50                   	push   eax
c0019fa4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019fab:	50                   	push   eax
c0019fac:	e8 fd a7 fe ff       	call   c00047ae <f_stat>
c0019fb1:	83 c4 10             	add    esp,0x10
c0019fb4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019fbb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019fc2:	85 c0                	test   eax,eax
c0019fc4:	74 0a                	je     c0019fd0 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0019fc6:	83 f8 04             	cmp    eax,0x4
c0019fc9:	74 39                	je     c001a004 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019fcb:	eb 3f                	jmp    c001a00c <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0019fcd:	8d 76 00             	lea    esi,[esi+0x0]
c0019fd0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019fd4:	0f b6 c0             	movzx  eax,al
c0019fd7:	83 e0 10             	and    eax,0x10
c0019fda:	0f 95 c2             	setne  dl
c0019fdd:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019fe4:	88 10                	mov    BYTE PTR [eax],dl
c0019fe6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019fea:	ba 00 00 00 00       	mov    edx,0x0
c0019fef:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019ff6:	89 01                	mov    DWORD PTR [ecx],eax
c0019ff8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019ffb:	b8 00 00 00 00       	mov    eax,0x0
c001a000:	eb 12                	jmp    c001a014 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a002:	66 90                	xchg   ax,ax
c001a004:	b8 02 00 00 00       	mov    eax,0x2
c001a009:	eb 09                	jmp    c001a014 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a00b:	90                   	nop
c001a00c:	b8 01 00 00 00       	mov    eax,0x1
c001a011:	8d 76 00             	lea    esi,[esi+0x0]
c001a014:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a01a:	c3                   	ret    
c001a01b:	90                   	nop

c001a01c <FAT::unlink(char const*)>:
c001a01c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a022:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a02a:	75 08                	jne    c001a034 <FAT::unlink(char const*)+0x18>
c001a02c:	b8 04 00 00 00       	mov    eax,0x4
c001a031:	eb 61                	jmp    c001a094 <FAT::unlink(char const*)+0x78>
c001a033:	90                   	nop
c001a034:	83 ec 08             	sub    esp,0x8
c001a037:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a03e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a042:	50                   	push   eax
c001a043:	e8 08 66 fe ff       	call   c0000650 <strcpy>
c001a048:	83 c4 10             	add    esp,0x10
c001a04b:	83 ec 08             	sub    esp,0x8
c001a04e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a052:	50                   	push   eax
c001a053:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a05a:	e8 61 fc ff ff       	call   c0019cc0 <FAT::fixFilepath(char*)>
c001a05f:	83 c4 10             	add    esp,0x10
c001a062:	83 ec 0c             	sub    esp,0xc
c001a065:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a069:	50                   	push   eax
c001a06a:	e8 b1 a9 fe ff       	call   c0004a20 <f_unlink>
c001a06f:	83 c4 10             	add    esp,0x10
c001a072:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a079:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a080:	85 c0                	test   eax,eax
c001a082:	75 08                	jne    c001a08c <FAT::unlink(char const*)+0x70>
c001a084:	b8 00 00 00 00       	mov    eax,0x0
c001a089:	eb 09                	jmp    c001a094 <FAT::unlink(char const*)+0x78>
c001a08b:	90                   	nop
c001a08c:	b8 01 00 00 00       	mov    eax,0x1
c001a091:	8d 76 00             	lea    esi,[esi+0x0]
c001a094:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a09a:	c3                   	ret    
c001a09b:	90                   	nop

c001a09c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001a09c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a0a2:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c001a0a9:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c001a0b0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a0b4:	88 d0                	mov    al,dl
c001a0b6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a0ba:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a0c2:	75 0c                	jne    c001a0d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c001a0c4:	b8 04 00 00 00       	mov    eax,0x4
c001a0c9:	e9 7e 01 00 00       	jmp    c001a24c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001a0ce:	66 90                	xchg   ax,ax
c001a0d0:	83 ec 08             	sub    esp,0x8
c001a0d3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a0da:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a0de:	50                   	push   eax
c001a0df:	e8 6c 65 fe ff       	call   c0000650 <strcpy>
c001a0e4:	83 c4 10             	add    esp,0x10
c001a0e7:	83 ec 08             	sub    esp,0x8
c001a0ea:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a0ee:	50                   	push   eax
c001a0ef:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a0f6:	e8 c5 fb ff ff       	call   c0019cc0 <FAT::fixFilepath(char*)>
c001a0fb:	83 c4 10             	add    esp,0x10
c001a0fe:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001a106:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001a10e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a113:	83 e0 01             	and    eax,0x1
c001a116:	74 14                	je     c001a12c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c001a118:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a11f:	83 c8 01             	or     eax,0x1
c001a122:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a129:	8d 76 00             	lea    esi,[esi+0x0]
c001a12c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a131:	83 e0 02             	and    eax,0x2
c001a134:	74 12                	je     c001a148 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c001a136:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a13d:	83 c8 20             	or     eax,0x20
c001a140:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a147:	90                   	nop
c001a148:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a14d:	83 e0 04             	and    eax,0x4
c001a150:	74 12                	je     c001a164 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001a152:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a159:	83 c8 04             	or     eax,0x4
c001a15c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a163:	90                   	nop
c001a164:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a169:	83 e0 08             	and    eax,0x8
c001a16c:	74 12                	je     c001a180 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001a16e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a175:	83 c8 02             	or     eax,0x2
c001a178:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a17f:	90                   	nop
c001a180:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a185:	83 e0 01             	and    eax,0x1
c001a188:	74 12                	je     c001a19c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c001a18a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a191:	83 c8 01             	or     eax,0x1
c001a194:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a19b:	90                   	nop
c001a19c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a1a1:	83 e0 02             	and    eax,0x2
c001a1a4:	74 12                	je     c001a1b8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c001a1a6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a1ad:	83 c8 20             	or     eax,0x20
c001a1b0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a1b7:	90                   	nop
c001a1b8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a1bd:	83 e0 04             	and    eax,0x4
c001a1c0:	74 12                	je     c001a1d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c001a1c2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a1c9:	83 c8 04             	or     eax,0x4
c001a1cc:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a1d3:	90                   	nop
c001a1d4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a1d9:	83 e0 08             	and    eax,0x8
c001a1dc:	74 12                	je     c001a1f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c001a1de:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a1e5:	83 c8 02             	or     eax,0x2
c001a1e8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a1ef:	90                   	nop
c001a1f0:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001a1f7:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a1fe:	09 d0                	or     eax,edx
c001a200:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a207:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001a20f:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001a217:	83 ec 04             	sub    esp,0x4
c001a21a:	52                   	push   edx
c001a21b:	50                   	push   eax
c001a21c:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a220:	50                   	push   eax
c001a221:	e8 6d ac fe ff       	call   c0004e93 <f_chmod>
c001a226:	83 c4 10             	add    esp,0x10
c001a229:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a230:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a237:	85 c0                	test   eax,eax
c001a239:	75 09                	jne    c001a244 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c001a23b:	b8 00 00 00 00       	mov    eax,0x0
c001a240:	eb 0a                	jmp    c001a24c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001a242:	66 90                	xchg   ax,ax
c001a244:	b8 01 00 00 00       	mov    eax,0x1
c001a249:	8d 76 00             	lea    esi,[esi+0x0]
c001a24c:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a252:	c3                   	ret    
c001a253:	90                   	nop

c001a254 <FAT::rename(char const*, char const*)>:
c001a254:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a25a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a262:	74 0c                	je     c001a270 <FAT::rename(char const*, char const*)+0x1c>
c001a264:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001a26c:	75 0e                	jne    c001a27c <FAT::rename(char const*, char const*)+0x28>
c001a26e:	66 90                	xchg   ax,ax
c001a270:	b8 04 00 00 00       	mov    eax,0x4
c001a275:	e9 9e 00 00 00       	jmp    c001a318 <FAT::rename(char const*, char const*)+0xc4>
c001a27a:	66 90                	xchg   ax,ax
c001a27c:	83 ec 08             	sub    esp,0x8
c001a27f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a286:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a28d:	50                   	push   eax
c001a28e:	e8 bd 63 fe ff       	call   c0000650 <strcpy>
c001a293:	83 c4 10             	add    esp,0x10
c001a296:	83 ec 08             	sub    esp,0x8
c001a299:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001a2a0:	50                   	push   eax
c001a2a1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a2a8:	e8 13 fa ff ff       	call   c0019cc0 <FAT::fixFilepath(char*)>
c001a2ad:	83 c4 10             	add    esp,0x10
c001a2b0:	83 ec 08             	sub    esp,0x8
c001a2b3:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001a2ba:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a2be:	50                   	push   eax
c001a2bf:	e8 8c 63 fe ff       	call   c0000650 <strcpy>
c001a2c4:	83 c4 10             	add    esp,0x10
c001a2c7:	83 ec 08             	sub    esp,0x8
c001a2ca:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a2ce:	50                   	push   eax
c001a2cf:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a2d6:	e8 e5 f9 ff ff       	call   c0019cc0 <FAT::fixFilepath(char*)>
c001a2db:	83 c4 10             	add    esp,0x10
c001a2de:	83 ec 08             	sub    esp,0x8
c001a2e1:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a2e5:	50                   	push   eax
c001a2e6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a2ed:	50                   	push   eax
c001a2ee:	e8 e8 a9 fe ff       	call   c0004cdb <f_rename>
c001a2f3:	83 c4 10             	add    esp,0x10
c001a2f6:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001a2fd:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001a304:	85 c0                	test   eax,eax
c001a306:	75 08                	jne    c001a310 <FAT::rename(char const*, char const*)+0xbc>
c001a308:	b8 00 00 00 00       	mov    eax,0x0
c001a30d:	eb 09                	jmp    c001a318 <FAT::rename(char const*, char const*)+0xc4>
c001a30f:	90                   	nop
c001a310:	b8 01 00 00 00       	mov    eax,0x1
c001a315:	8d 76 00             	lea    esi,[esi+0x0]
c001a318:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a31e:	c3                   	ret    
c001a31f:	90                   	nop

c001a320 <FAT::mkdir(char const*)>:
c001a320:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a326:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a32e:	75 08                	jne    c001a338 <FAT::mkdir(char const*)+0x18>
c001a330:	b8 04 00 00 00       	mov    eax,0x4
c001a335:	eb 61                	jmp    c001a398 <FAT::mkdir(char const*)+0x78>
c001a337:	90                   	nop
c001a338:	83 ec 08             	sub    esp,0x8
c001a33b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a342:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a346:	50                   	push   eax
c001a347:	e8 04 63 fe ff       	call   c0000650 <strcpy>
c001a34c:	83 c4 10             	add    esp,0x10
c001a34f:	83 ec 08             	sub    esp,0x8
c001a352:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a356:	50                   	push   eax
c001a357:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a35e:	e8 5d f9 ff ff       	call   c0019cc0 <FAT::fixFilepath(char*)>
c001a363:	83 c4 10             	add    esp,0x10
c001a366:	83 ec 0c             	sub    esp,0xc
c001a369:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a36d:	50                   	push   eax
c001a36e:	e8 cd a7 fe ff       	call   c0004b40 <f_mkdir>
c001a373:	83 c4 10             	add    esp,0x10
c001a376:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a37d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a384:	85 c0                	test   eax,eax
c001a386:	75 08                	jne    c001a390 <FAT::mkdir(char const*)+0x70>
c001a388:	b8 00 00 00 00       	mov    eax,0x0
c001a38d:	eb 09                	jmp    c001a398 <FAT::mkdir(char const*)+0x78>
c001a38f:	90                   	nop
c001a390:	b8 01 00 00 00       	mov    eax,0x1
c001a395:	8d 76 00             	lea    esi,[esi+0x0]
c001a398:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a39e:	c3                   	ret    
c001a39f:	90                   	nop

c001a3a0 <FAT::exists(char const*)>:
c001a3a0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a3a6:	83 ec 08             	sub    esp,0x8
c001a3a9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a3b0:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a3b4:	50                   	push   eax
c001a3b5:	e8 96 62 fe ff       	call   c0000650 <strcpy>
c001a3ba:	83 c4 10             	add    esp,0x10
c001a3bd:	83 ec 08             	sub    esp,0x8
c001a3c0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a3c4:	50                   	push   eax
c001a3c5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a3cc:	e8 ef f8 ff ff       	call   c0019cc0 <FAT::fixFilepath(char*)>
c001a3d1:	83 c4 10             	add    esp,0x10
c001a3d4:	83 ec 08             	sub    esp,0x8
c001a3d7:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001a3de:	50                   	push   eax
c001a3df:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a3e3:	50                   	push   eax
c001a3e4:	e8 c5 a3 fe ff       	call   c00047ae <f_stat>
c001a3e9:	83 c4 10             	add    esp,0x10
c001a3ec:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a3f3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a3fa:	85 c0                	test   eax,eax
c001a3fc:	75 06                	jne    c001a404 <FAT::exists(char const*)+0x64>
c001a3fe:	b0 01                	mov    al,0x1
c001a400:	eb 06                	jmp    c001a408 <FAT::exists(char const*)+0x68>
c001a402:	66 90                	xchg   ax,ax
c001a404:	b0 00                	mov    al,0x0
c001a406:	66 90                	xchg   ax,ax
c001a408:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a40e:	c3                   	ret    
c001a40f:	90                   	nop

c001a410 <isoReadDiscSectorHelper>:
c001a410:	83 ec 2c             	sub    esp,0x2c
c001a413:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a417:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a41b:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a420:	83 e8 41             	sub    eax,0x41
c001a423:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c001a42a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a42e:	ba 00 00 00 00       	mov    edx,0x0
c001a433:	83 ec 0c             	sub    esp,0xc
c001a436:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a43a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a43e:	52                   	push   edx
c001a43f:	50                   	push   eax
c001a440:	51                   	push   ecx
c001a441:	e8 e8 39 ff ff       	call   c000de2e <LogicalDisk::read(unsigned long long, int, void*)>
c001a446:	83 c4 20             	add    esp,0x20
c001a449:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a44d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a452:	74 0c                	je     c001a460 <isoReadDiscSectorHelper+0x50>
c001a454:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a458:	c1 e0 0b             	shl    eax,0xb
c001a45b:	eb 0b                	jmp    c001a468 <isoReadDiscSectorHelper+0x58>
c001a45d:	8d 76 00             	lea    esi,[esi+0x0]
c001a460:	b8 00 00 00 00       	mov    eax,0x0
c001a465:	8d 76 00             	lea    esi,[esi+0x0]
c001a468:	83 c4 2c             	add    esp,0x2c
c001a46b:	c3                   	ret    

c001a46c <iso_kprintf>:
c001a46c:	83 ec 0c             	sub    esp,0xc
c001a46f:	83 ec 08             	sub    esp,0x8
c001a472:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a476:	68 3a 2c 02 c0       	push   0xc0022c3a
c001a47b:	e8 8a 04 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a480:	83 c4 10             	add    esp,0x10
c001a483:	90                   	nop
c001a484:	83 c4 0c             	add    esp,0xc
c001a487:	c3                   	ret    

c001a488 <iso_kprintfd>:
c001a488:	83 ec 0c             	sub    esp,0xc
c001a48b:	83 ec 08             	sub    esp,0x8
c001a48e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a492:	68 7a 13 02 c0       	push   0xc002137a
c001a497:	e8 6e 04 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a49c:	83 c4 10             	add    esp,0x10
c001a49f:	90                   	nop
c001a4a0:	83 c4 0c             	add    esp,0xc
c001a4a3:	c3                   	ret    

c001a4a4 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001a4a4:	b8 08 00 00 00       	mov    eax,0x8
c001a4a9:	c3                   	ret    

c001a4aa <ISO9660::truncate(void*, unsigned long long)>:
c001a4aa:	b8 01 00 00 00       	mov    eax,0x1
c001a4af:	c3                   	ret    

c001a4b0 <ISO9660::getName()>:
c001a4b0:	b8 f0 2e 02 c0       	mov    eax,0xc0022ef0
c001a4b5:	c3                   	ret    

c001a4b6 <ISO9660::closeDir(void*)>:
c001a4b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a4ba:	8b 00                	mov    eax,DWORD PTR [eax]
c001a4bc:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001a4bf:	90                   	nop

c001a4c0 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a4c0:	b8 01 00 00 00       	mov    eax,0x1
c001a4c5:	c3                   	ret    

c001a4c6 <ISO9660::unlink(char const*)>:
c001a4c6:	b8 01 00 00 00       	mov    eax,0x1
c001a4cb:	c3                   	ret    

c001a4cc <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a4cc:	b8 03 00 00 00       	mov    eax,0x3
c001a4d1:	c3                   	ret    

c001a4d2 <ISO9660::rename(char const*, char const*)>:
c001a4d2:	b8 01 00 00 00       	mov    eax,0x1
c001a4d7:	c3                   	ret    

c001a4d8 <ISO9660::mkdir(char const*)>:
c001a4d8:	b8 01 00 00 00       	mov    eax,0x1
c001a4dd:	c3                   	ret    

c001a4de <ISO9660::~ISO9660()>:
c001a4de:	83 ec 0c             	sub    esp,0xc
c001a4e1:	ba 30 30 02 c0       	mov    edx,0xc0023030
c001a4e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4ea:	89 10                	mov    DWORD PTR [eax],edx
c001a4ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4f0:	83 ec 0c             	sub    esp,0xc
c001a4f3:	50                   	push   eax
c001a4f4:	e8 39 13 ff ff       	call   c000b832 <Filesystem::~Filesystem()>
c001a4f9:	83 c4 10             	add    esp,0x10
c001a4fc:	90                   	nop
c001a4fd:	83 c4 0c             	add    esp,0xc
c001a500:	c3                   	ret    
c001a501:	90                   	nop

c001a502 <ISO9660::~ISO9660()>:
c001a502:	83 ec 0c             	sub    esp,0xc
c001a505:	83 ec 0c             	sub    esp,0xc
c001a508:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a50c:	e8 cd ff ff ff       	call   c001a4de <ISO9660::~ISO9660()>
c001a511:	83 c4 10             	add    esp,0x10
c001a514:	83 ec 08             	sub    esp,0x8
c001a517:	6a 08                	push   0x8
c001a519:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a51d:	e8 ea 02 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001a522:	83 c4 10             	add    esp,0x10
c001a525:	83 c4 0c             	add    esp,0xc
c001a528:	c3                   	ret    
c001a529:	90                   	nop

c001a52a <ISO9660::exists(char const*)>:
c001a52a:	83 ec 18             	sub    esp,0x18
c001a52d:	68 0b 2f 02 c0       	push   0xc0022f0b
c001a532:	e8 d4 70 ff ff       	call   c001160b <KePanic(char const*)>
c001a537:	31 c0                	xor    eax,eax
c001a539:	83 c4 1c             	add    esp,0x1c
c001a53c:	c3                   	ret    
c001a53d:	90                   	nop

c001a53e <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a53e:	56                   	push   esi
c001a53f:	53                   	push   ebx
c001a540:	53                   	push   ebx
c001a541:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a545:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a549:	85 db                	test   ebx,ebx
c001a54b:	0f 84 ca 00 00 00    	je     c001a61b <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a551:	85 f6                	test   esi,esi
c001a553:	0f 84 c2 00 00 00    	je     c001a61b <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a559:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001a55e:	b8 03 00 00 00       	mov    eax,0x3
c001a563:	0f 85 b7 00 00 00    	jne    c001a620 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a569:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a56b:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a571:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a578:	74 1b                	je     c001a595 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a57a:	85 c0                	test   eax,eax
c001a57c:	74 10                	je     c001a58e <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001a57e:	83 ec 0c             	sub    esp,0xc
c001a581:	68 29 2f 02 c0       	push   0xc0022f29
c001a586:	e8 80 70 ff ff       	call   c001160b <KePanic(char const*)>
c001a58b:	83 c4 10             	add    esp,0x10
c001a58e:	8a 03                	mov    al,BYTE PTR [ebx]
c001a590:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a595:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a598:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a59f:	85 c0                	test   eax,eax
c001a5a1:	74 09                	je     c001a5ac <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001a5a3:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a5aa:	74 48                	je     c001a5f4 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001a5ac:	83 ec 0c             	sub    esp,0xc
c001a5af:	68 39 2f 02 c0       	push   0xc0022f39
c001a5b4:	e8 51 03 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a5b9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a5bc:	83 c4 10             	add    esp,0x10
c001a5bf:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a5c6:	85 c0                	test   eax,eax
c001a5c8:	74 17                	je     c001a5e1 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001a5ca:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a5d1:	83 ec 0c             	sub    esp,0xc
c001a5d4:	68 59 2f 02 c0       	push   0xc0022f59
c001a5d9:	e8 2c 03 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a5de:	83 c4 10             	add    esp,0x10
c001a5e1:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a5e8:	83 ec 0c             	sub    esp,0xc
c001a5eb:	50                   	push   eax
c001a5ec:	e8 76 c4 fe ff       	call   c0006a67 <init_percd>
c001a5f1:	83 c4 10             	add    esp,0x10
c001a5f4:	51                   	push   ecx
c001a5f5:	83 c3 03             	add    ebx,0x3
c001a5f8:	51                   	push   ecx
c001a5f9:	6a 00                	push   0x0
c001a5fb:	53                   	push   ebx
c001a5fc:	e8 29 bf fe ff       	call   c000652a <iso_open>
c001a601:	83 c4 10             	add    esp,0x10
c001a604:	89 c2                	mov    edx,eax
c001a606:	b8 01 00 00 00       	mov    eax,0x1
c001a60b:	83 fa ff             	cmp    edx,0xffffffff
c001a60e:	74 10                	je     c001a620 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a610:	83 c2 32             	add    edx,0x32
c001a613:	31 c0                	xor    eax,eax
c001a615:	01 d2                	add    edx,edx
c001a617:	89 16                	mov    DWORD PTR [esi],edx
c001a619:	eb 05                	jmp    c001a620 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a61b:	b8 04 00 00 00       	mov    eax,0x4
c001a620:	5a                   	pop    edx
c001a621:	5b                   	pop    ebx
c001a622:	5e                   	pop    esi
c001a623:	c3                   	ret    

c001a624 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a624:	53                   	push   ebx
c001a625:	83 ec 08             	sub    esp,0x8
c001a628:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a62c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a630:	85 c0                	test   eax,eax
c001a632:	74 2d                	je     c001a661 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a634:	85 db                	test   ebx,ebx
c001a636:	74 29                	je     c001a661 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a638:	52                   	push   edx
c001a639:	b9 02 00 00 00       	mov    ecx,0x2
c001a63e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a642:	99                   	cdq    
c001a643:	f7 f9                	idiv   ecx
c001a645:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a649:	83 e8 32             	sub    eax,0x32
c001a64c:	50                   	push   eax
c001a64d:	e8 80 bf fe ff       	call   c00065d2 <iso_read>
c001a652:	83 c4 10             	add    esp,0x10
c001a655:	89 03                	mov    DWORD PTR [ebx],eax
c001a657:	09 d0                	or     eax,edx
c001a659:	0f 94 c0             	sete   al
c001a65c:	0f b6 c0             	movzx  eax,al
c001a65f:	eb 05                	jmp    c001a666 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a661:	b8 04 00 00 00       	mov    eax,0x4
c001a666:	83 c4 08             	add    esp,0x8
c001a669:	5b                   	pop    ebx
c001a66a:	c3                   	ret    
c001a66b:	90                   	nop

c001a66c <ISO9660::seek(void*, unsigned long long)>:
c001a66c:	57                   	push   edi
c001a66d:	b8 04 00 00 00       	mov    eax,0x4
c001a672:	56                   	push   esi
c001a673:	51                   	push   ecx
c001a674:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a678:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a67c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a680:	85 d2                	test   edx,edx
c001a682:	74 26                	je     c001a6aa <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a684:	89 d0                	mov    eax,edx
c001a686:	b9 02 00 00 00       	mov    ecx,0x2
c001a68b:	6a 00                	push   0x0
c001a68d:	99                   	cdq    
c001a68e:	f7 f9                	idiv   ecx
c001a690:	57                   	push   edi
c001a691:	56                   	push   esi
c001a692:	83 e8 32             	sub    eax,0x32
c001a695:	50                   	push   eax
c001a696:	e8 4d c0 fe ff       	call   c00066e8 <iso_seek>
c001a69b:	83 c4 10             	add    esp,0x10
c001a69e:	31 f0                	xor    eax,esi
c001a6a0:	31 fa                	xor    edx,edi
c001a6a2:	09 d0                	or     eax,edx
c001a6a4:	0f 95 c0             	setne  al
c001a6a7:	0f b6 c0             	movzx  eax,al
c001a6aa:	5a                   	pop    edx
c001a6ab:	5e                   	pop    esi
c001a6ac:	5f                   	pop    edi
c001a6ad:	c3                   	ret    

c001a6ae <ISO9660::tell(void*, unsigned long long*)>:
c001a6ae:	53                   	push   ebx
c001a6af:	83 ec 08             	sub    esp,0x8
c001a6b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a6b6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a6ba:	85 c0                	test   eax,eax
c001a6bc:	74 24                	je     c001a6e2 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a6be:	85 db                	test   ebx,ebx
c001a6c0:	74 20                	je     c001a6e2 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a6c2:	b9 02 00 00 00       	mov    ecx,0x2
c001a6c7:	99                   	cdq    
c001a6c8:	f7 f9                	idiv   ecx
c001a6ca:	83 ec 0c             	sub    esp,0xc
c001a6cd:	83 e8 32             	sub    eax,0x32
c001a6d0:	50                   	push   eax
c001a6d1:	e8 96 c0 fe ff       	call   c000676c <iso_tell>
c001a6d6:	83 c4 10             	add    esp,0x10
c001a6d9:	89 03                	mov    DWORD PTR [ebx],eax
c001a6db:	31 c0                	xor    eax,eax
c001a6dd:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a6e0:	eb 05                	jmp    c001a6e7 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a6e2:	b8 04 00 00 00       	mov    eax,0x4
c001a6e7:	83 c4 08             	add    esp,0x8
c001a6ea:	5b                   	pop    ebx
c001a6eb:	c3                   	ret    

c001a6ec <ISO9660::stat(void*, unsigned long long*)>:
c001a6ec:	56                   	push   esi
c001a6ed:	53                   	push   ebx
c001a6ee:	83 ec 10             	sub    esp,0x10
c001a6f1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a6f5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a6f9:	68 7d 2f 02 c0       	push   0xc0022f7d
c001a6fe:	e8 07 02 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a703:	83 c4 10             	add    esp,0x10
c001a706:	85 db                	test   ebx,ebx
c001a708:	74 2a                	je     c001a734 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a70a:	85 f6                	test   esi,esi
c001a70c:	74 26                	je     c001a734 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a70e:	89 d8                	mov    eax,ebx
c001a710:	b9 02 00 00 00       	mov    ecx,0x2
c001a715:	99                   	cdq    
c001a716:	83 ec 0c             	sub    esp,0xc
c001a719:	f7 f9                	idiv   ecx
c001a71b:	83 e8 32             	sub    eax,0x32
c001a71e:	50                   	push   eax
c001a71f:	e8 79 c0 fe ff       	call   c000679d <iso_total>
c001a724:	83 c4 10             	add    esp,0x10
c001a727:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a72e:	89 06                	mov    DWORD PTR [esi],eax
c001a730:	31 c0                	xor    eax,eax
c001a732:	eb 05                	jmp    c001a739 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a734:	b8 04 00 00 00       	mov    eax,0x4
c001a739:	5a                   	pop    edx
c001a73a:	5b                   	pop    ebx
c001a73b:	5e                   	pop    esi
c001a73c:	c3                   	ret    
c001a73d:	90                   	nop

c001a73e <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a73e:	55                   	push   ebp
c001a73f:	57                   	push   edi
c001a740:	56                   	push   esi
c001a741:	53                   	push   ebx
c001a742:	83 ec 18             	sub    esp,0x18
c001a745:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a749:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a74d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a751:	68 85 2f 02 c0       	push   0xc0022f85
c001a756:	e8 af 01 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a75b:	83 c4 10             	add    esp,0x10
c001a75e:	85 ff                	test   edi,edi
c001a760:	0f 94 c0             	sete   al
c001a763:	85 f6                	test   esi,esi
c001a765:	0f 94 c2             	sete   dl
c001a768:	09 d0                	or     eax,edx
c001a76a:	a8 01                	test   al,0x1
c001a76c:	0f 85 dd 00 00 00    	jne    c001a84f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a772:	85 db                	test   ebx,ebx
c001a774:	0f 84 d5 00 00 00    	je     c001a84f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a77a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a77d:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a783:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a78a:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a791:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a793:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a799:	74 1b                	je     c001a7b6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a79b:	85 c0                	test   eax,eax
c001a79d:	74 10                	je     c001a7af <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a79f:	83 ec 0c             	sub    esp,0xc
c001a7a2:	68 29 2f 02 c0       	push   0xc0022f29
c001a7a7:	e8 5f 6e ff ff       	call   c001160b <KePanic(char const*)>
c001a7ac:	83 c4 10             	add    esp,0x10
c001a7af:	8a 03                	mov    al,BYTE PTR [ebx]
c001a7b1:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a7b6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a7b9:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a7c0:	85 c0                	test   eax,eax
c001a7c2:	74 09                	je     c001a7cd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a7c4:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a7cb:	74 51                	je     c001a81e <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a7cd:	83 ec 0c             	sub    esp,0xc
c001a7d0:	68 8d 2f 02 c0       	push   0xc0022f8d
c001a7d5:	e8 30 01 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a7da:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a7dd:	83 c4 10             	add    esp,0x10
c001a7e0:	83 3c 85 7c b7 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd4884],0x0
c001a7e8:	74 21                	je     c001a80b <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a7ea:	83 ec 0c             	sub    esp,0xc
c001a7ed:	68 ad 2f 02 c0       	push   0xc0022fad
c001a7f2:	e8 13 01 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a7f7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a7fa:	83 c4 10             	add    esp,0x10
c001a7fd:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a804:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a80b:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a812:	83 ec 0c             	sub    esp,0xc
c001a815:	50                   	push   eax
c001a816:	e8 4c c2 fe ff       	call   c0006a67 <init_percd>
c001a81b:	83 c4 10             	add    esp,0x10
c001a81e:	52                   	push   edx
c001a81f:	83 c3 03             	add    ebx,0x3
c001a822:	52                   	push   edx
c001a823:	6a 00                	push   0x0
c001a825:	53                   	push   ebx
c001a826:	e8 ff bc fe ff       	call   c000652a <iso_open>
c001a82b:	83 c4 10             	add    esp,0x10
c001a82e:	83 f8 ff             	cmp    eax,0xffffffff
c001a831:	89 c5                	mov    ebp,eax
c001a833:	75 21                	jne    c001a856 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a835:	50                   	push   eax
c001a836:	50                   	push   eax
c001a837:	6a 01                	push   0x1
c001a839:	53                   	push   ebx
c001a83a:	e8 eb bc fe ff       	call   c000652a <iso_open>
c001a83f:	83 c4 10             	add    esp,0x10
c001a842:	ba 02 00 00 00       	mov    edx,0x2
c001a847:	40                   	inc    eax
c001a848:	74 2b                	je     c001a875 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a84a:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a84d:	eb 24                	jmp    c001a873 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a84f:	ba 04 00 00 00       	mov    edx,0x4
c001a854:	eb 1f                	jmp    c001a875 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a856:	83 ec 0c             	sub    esp,0xc
c001a859:	50                   	push   eax
c001a85a:	e8 3e bf fe ff       	call   c000679d <iso_total>
c001a85f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a866:	89 07                	mov    DWORD PTR [edi],eax
c001a868:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a86b:	e8 44 bd fe ff       	call   c00065b4 <iso_close>
c001a870:	83 c4 10             	add    esp,0x10
c001a873:	31 d2                	xor    edx,edx
c001a875:	83 c4 0c             	add    esp,0xc
c001a878:	89 d0                	mov    eax,edx
c001a87a:	5b                   	pop    ebx
c001a87b:	5e                   	pop    esi
c001a87c:	5f                   	pop    edi
c001a87d:	5d                   	pop    ebp
c001a87e:	c3                   	ret    
c001a87f:	90                   	nop

c001a880 <ISO9660::close(void*)>:
c001a880:	83 ec 0c             	sub    esp,0xc
c001a883:	b8 04 00 00 00       	mov    eax,0x4
c001a888:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a88c:	85 d2                	test   edx,edx
c001a88e:	74 1b                	je     c001a8ab <ISO9660::close(void*)+0x2b>
c001a890:	89 d0                	mov    eax,edx
c001a892:	b9 02 00 00 00       	mov    ecx,0x2
c001a897:	99                   	cdq    
c001a898:	83 ec 0c             	sub    esp,0xc
c001a89b:	f7 f9                	idiv   ecx
c001a89d:	83 e8 32             	sub    eax,0x32
c001a8a0:	50                   	push   eax
c001a8a1:	e8 0e bd fe ff       	call   c00065b4 <iso_close>
c001a8a6:	83 c4 10             	add    esp,0x10
c001a8a9:	31 c0                	xor    eax,eax
c001a8ab:	83 c4 0c             	add    esp,0xc
c001a8ae:	c3                   	ret    
c001a8af:	90                   	nop

c001a8b0 <ISO9660::openDir(char const*, void**)>:
c001a8b0:	56                   	push   esi
c001a8b1:	53                   	push   ebx
c001a8b2:	50                   	push   eax
c001a8b3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a8b7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a8bb:	85 db                	test   ebx,ebx
c001a8bd:	0f 84 bd 00 00 00    	je     c001a980 <ISO9660::openDir(char const*, void**)+0xd0>
c001a8c3:	85 f6                	test   esi,esi
c001a8c5:	0f 84 b5 00 00 00    	je     c001a980 <ISO9660::openDir(char const*, void**)+0xd0>
c001a8cb:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a8cd:	38 15 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,dl
c001a8d3:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a8da:	74 1b                	je     c001a8f7 <ISO9660::openDir(char const*, void**)+0x47>
c001a8dc:	85 c0                	test   eax,eax
c001a8de:	74 10                	je     c001a8f0 <ISO9660::openDir(char const*, void**)+0x40>
c001a8e0:	83 ec 0c             	sub    esp,0xc
c001a8e3:	68 29 2f 02 c0       	push   0xc0022f29
c001a8e8:	e8 1e 6d ff ff       	call   c001160b <KePanic(char const*)>
c001a8ed:	83 c4 10             	add    esp,0x10
c001a8f0:	8a 03                	mov    al,BYTE PTR [ebx]
c001a8f2:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a8f7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a8fa:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a901:	85 c0                	test   eax,eax
c001a903:	74 10                	je     c001a915 <ISO9660::openDir(char const*, void**)+0x65>
c001a905:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a90c:	74 1a                	je     c001a928 <ISO9660::openDir(char const*, void**)+0x78>
c001a90e:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a915:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a91c:	83 ec 0c             	sub    esp,0xc
c001a91f:	50                   	push   eax
c001a920:	e8 42 c1 fe ff       	call   c0006a67 <init_percd>
c001a925:	83 c4 10             	add    esp,0x10
c001a928:	50                   	push   eax
c001a929:	83 c3 03             	add    ebx,0x3
c001a92c:	50                   	push   eax
c001a92d:	6a 01                	push   0x1
c001a92f:	53                   	push   ebx
c001a930:	e8 f5 bb fe ff       	call   c000652a <iso_open>
c001a935:	83 c4 10             	add    esp,0x10
c001a938:	83 f8 ff             	cmp    eax,0xffffffff
c001a93b:	89 c3                	mov    ebx,eax
c001a93d:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a942:	75 1c                	jne    c001a960 <ISO9660::openDir(char const*, void**)+0xb0>
c001a944:	53                   	push   ebx
c001a945:	53                   	push   ebx
c001a946:	68 d1 2f 02 c0       	push   0xc0022fd1
c001a94b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a951:	e8 56 e1 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a956:	83 c4 10             	add    esp,0x10
c001a959:	b8 01 00 00 00       	mov    eax,0x1
c001a95e:	eb 25                	jmp    c001a985 <ISO9660::openDir(char const*, void**)+0xd5>
c001a960:	51                   	push   ecx
c001a961:	01 db                	add    ebx,ebx
c001a963:	51                   	push   ecx
c001a964:	83 c3 65             	add    ebx,0x65
c001a967:	68 e4 2f 02 c0       	push   0xc0022fe4
c001a96c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a972:	e8 35 e1 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a977:	83 c4 10             	add    esp,0x10
c001a97a:	31 c0                	xor    eax,eax
c001a97c:	89 1e                	mov    DWORD PTR [esi],ebx
c001a97e:	eb 05                	jmp    c001a985 <ISO9660::openDir(char const*, void**)+0xd5>
c001a980:	b8 04 00 00 00       	mov    eax,0x4
c001a985:	5a                   	pop    edx
c001a986:	5b                   	pop    ebx
c001a987:	5e                   	pop    esi
c001a988:	c3                   	ret    
c001a989:	90                   	nop

c001a98a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a98a:	55                   	push   ebp
c001a98b:	57                   	push   edi
c001a98c:	56                   	push   esi
c001a98d:	53                   	push   ebx
c001a98e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a994:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001a99b:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a9a2:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001a9a9:	85 db                	test   ebx,ebx
c001a9ab:	0f 84 e4 00 00 00    	je     c001aa95 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a9b1:	85 ed                	test   ebp,ebp
c001a9b3:	0f 84 dc 00 00 00    	je     c001aa95 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a9b9:	83 ec 0c             	sub    esp,0xc
c001a9bc:	68 f7 2f 02 c0       	push   0xc0022ff7
c001a9c1:	e8 44 ff fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a9c6:	89 d8                	mov    eax,ebx
c001a9c8:	b9 02 00 00 00       	mov    ecx,0x2
c001a9cd:	99                   	cdq    
c001a9ce:	f7 f9                	idiv   ecx
c001a9d0:	83 e8 32             	sub    eax,0x32
c001a9d3:	89 04 24             	mov    DWORD PTR [esp],eax
c001a9d6:	e8 14 be fe ff       	call   c00067ef <iso_readdir>
c001a9db:	83 c4 10             	add    esp,0x10
c001a9de:	85 c0                	test   eax,eax
c001a9e0:	89 c3                	mov    ebx,eax
c001a9e2:	75 38                	jne    c001aa1c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001a9e4:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a9e9:	53                   	push   ebx
c001a9ea:	53                   	push   ebx
c001a9eb:	68 02 30 02 c0       	push   0xc0023002
c001a9f0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a9f6:	e8 b1 e0 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a9fb:	83 c4 0c             	add    esp,0xc
c001a9fe:	68 10 01 00 00       	push   0x110
c001aa03:	6a 00                	push   0x0
c001aa05:	57                   	push   edi
c001aa06:	e8 e5 5a fe ff       	call   c00004f0 <memset>
c001aa0b:	83 c4 10             	add    esp,0x10
c001aa0e:	b8 01 00 00 00       	mov    eax,0x1
c001aa13:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001aa1a:	eb 7e                	jmp    c001aa9a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001aa1c:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001aa22:	8d 70 08             	lea    esi,[eax+0x8]
c001aa25:	83 ec 0c             	sub    esp,0xc
c001aa28:	56                   	push   esi
c001aa29:	e8 52 5b fe ff       	call   c0000580 <strlen>
c001aa2e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001aa36:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aa3a:	83 c4 10             	add    esp,0x10
c001aa3d:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001aa41:	75 0a                	jne    c001aa4d <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001aa43:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001aa46:	b8 02 00 00 00       	mov    eax,0x2
c001aa4b:	74 05                	je     c001aa52 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001aa4d:	b8 01 00 00 00       	mov    eax,0x1
c001aa52:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aa56:	50                   	push   eax
c001aa57:	50                   	push   eax
c001aa58:	56                   	push   esi
c001aa59:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aa5d:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001aa61:	50                   	push   eax
c001aa62:	e8 e9 5b fe ff       	call   c0000650 <strcpy>
c001aa67:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001aa6e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aa70:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001aa77:	5a                   	pop    edx
c001aa78:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001aa7d:	59                   	pop    ecx
c001aa7e:	68 15 30 02 c0       	push   0xc0023015
c001aa83:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001aa89:	e8 1e e0 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001aa8e:	83 c4 10             	add    esp,0x10
c001aa91:	31 c0                	xor    eax,eax
c001aa93:	eb 05                	jmp    c001aa9a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001aa95:	b8 04 00 00 00       	mov    eax,0x4
c001aa9a:	81 c4 1c 01 00 00    	add    esp,0x11c
c001aaa0:	5b                   	pop    ebx
c001aaa1:	5e                   	pop    esi
c001aaa2:	5f                   	pop    edi
c001aaa3:	5d                   	pop    ebp
c001aaa4:	c3                   	ret    

c001aaa5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001aaa5:	57                   	push   edi
c001aaa6:	56                   	push   esi
c001aaa7:	53                   	push   ebx
c001aaa8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001aaac:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001aab0:	39 35 84 c8 02 c0    	cmp    DWORD PTR ds:0xc002c884,esi
c001aab6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001aaba:	0f be cb             	movsx  ecx,bl
c001aabd:	75 0b                	jne    c001aaca <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001aabf:	0f be 05 40 42 02 c0 	movsx  eax,BYTE PTR ds:0xc0024240
c001aac6:	39 c8                	cmp    eax,ecx
c001aac8:	74 47                	je     c001ab11 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001aaca:	83 ec 0c             	sub    esp,0xc
c001aacd:	31 d2                	xor    edx,edx
c001aacf:	68 a0 c8 02 c0       	push   0xc002c8a0
c001aad4:	6a 01                	push   0x1
c001aad6:	52                   	push   edx
c001aad7:	56                   	push   esi
c001aad8:	ff 34 8d 7c b7 02 c0 	push   DWORD PTR [ecx*4-0x3ffd4884]
c001aadf:	e8 4a 33 ff ff       	call   c000de2e <LogicalDisk::read(unsigned long long, int, void*)>
c001aae4:	83 c4 20             	add    esp,0x20
c001aae7:	85 c0                	test   eax,eax
c001aae9:	75 0e                	jne    c001aaf9 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001aaeb:	89 35 84 c8 02 c0    	mov    DWORD PTR ds:0xc002c884,esi
c001aaf1:	88 1d 40 42 02 c0    	mov    BYTE PTR ds:0xc0024240,bl
c001aaf7:	eb 18                	jmp    c001ab11 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001aaf9:	50                   	push   eax
c001aafa:	68 00 08 00 00       	push   0x800
c001aaff:	6a 00                	push   0x0
c001ab01:	57                   	push   edi
c001ab02:	e8 e9 59 fe ff       	call   c00004f0 <memset>
c001ab07:	83 c4 10             	add    esp,0x10
c001ab0a:	b8 01 00 00 00       	mov    eax,0x1
c001ab0f:	eb 0e                	jmp    c001ab1f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001ab11:	be a0 c8 02 c0       	mov    esi,0xc002c8a0
c001ab16:	b9 00 08 00 00       	mov    ecx,0x800
c001ab1b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ab1d:	31 c0                	xor    eax,eax
c001ab1f:	5b                   	pop    ebx
c001ab20:	5e                   	pop    esi
c001ab21:	5f                   	pop    edi
c001ab22:	c3                   	ret    
c001ab23:	90                   	nop

c001ab24 <ISO9660::tryMount(LogicalDisk*, int)>:
c001ab24:	53                   	push   ebx
c001ab25:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001ab2b:	c7 05 84 c8 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002c884,0xdeadbeef
c001ab35:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001ab3c:	8d 58 41             	lea    ebx,[eax+0x41]
c001ab3f:	0f be db             	movsx  ebx,bl
c001ab42:	53                   	push   ebx
c001ab43:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ab47:	50                   	push   eax
c001ab48:	6a 10                	push   0x10
c001ab4a:	e8 56 ff ff ff       	call   c001aaa5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ab4f:	83 c4 10             	add    esp,0x10
c001ab52:	31 d2                	xor    edx,edx
c001ab54:	85 c0                	test   eax,eax
c001ab56:	75 33                	jne    c001ab8b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab58:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001ab5d:	75 2c                	jne    c001ab8b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab5f:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001ab64:	75 25                	jne    c001ab8b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab66:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001ab6b:	75 1e                	jne    c001ab8b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab6d:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001ab72:	75 17                	jne    c001ab8b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab74:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001ab79:	75 10                	jne    c001ab8b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab7b:	83 ec 0c             	sub    esp,0xc
c001ab7e:	53                   	push   ebx
c001ab7f:	e8 e3 be fe ff       	call   c0006a67 <init_percd>
c001ab84:	83 c4 10             	add    esp,0x10
c001ab87:	40                   	inc    eax
c001ab88:	0f 95 c2             	setne  dl
c001ab8b:	81 c4 08 08 00 00    	add    esp,0x808
c001ab91:	88 d0                	mov    al,dl
c001ab93:	5b                   	pop    ebx
c001ab94:	c3                   	ret    
c001ab95:	90                   	nop

c001ab96 <ISO9660::ISO9660()>:
c001ab96:	83 ec 0c             	sub    esp,0xc
c001ab99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab9d:	83 ec 0c             	sub    esp,0xc
c001aba0:	50                   	push   eax
c001aba1:	e8 68 0c ff ff       	call   c000b80e <Filesystem::Filesystem()>
c001aba6:	83 c4 10             	add    esp,0x10
c001aba9:	ba 30 30 02 c0       	mov    edx,0xc0023030
c001abae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abb2:	89 10                	mov    DWORD PTR [eax],edx
c001abb4:	e8 c0 bf fe ff       	call   c0006b79 <fs_iso9660_init>
c001abb9:	90                   	nop
c001abba:	83 c4 0c             	add    esp,0xc
c001abbd:	c3                   	ret    

c001abbe <SoundCard::beginPlayback()>:
c001abbe:	c7 44 24 04 94 30 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023094
c001abc6:	e9 40 6a ff ff       	jmp    c001160b <KePanic(char const*)>
c001abcb:	90                   	nop

c001abcc <SoundCard::stopPlayback()>:
c001abcc:	c7 44 24 04 94 30 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023094
c001abd4:	e9 32 6a ff ff       	jmp    c001160b <KePanic(char const*)>
c001abd9:	90                   	nop

c001abda <SoundCard::SoundCard(char const*)>:
c001abda:	83 ec 1c             	sub    esp,0x1c
c001abdd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abe1:	83 ec 08             	sub    esp,0x8
c001abe4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abe8:	50                   	push   eax
c001abe9:	e8 ee 1f ff ff       	call   c000cbdc <Device::Device(char const*)>
c001abee:	83 c4 10             	add    esp,0x10
c001abf1:	ba e0 30 02 c0       	mov    edx,0xc00230e0
c001abf6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abfa:	89 10                	mov    DWORD PTR [eax],edx
c001abfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac00:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ac07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac0b:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001ac15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac19:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001ac23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac27:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001ac31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac35:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001ac3f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ac47:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001ac4c:	7f 1a                	jg     c001ac68 <SoundCard::SoundCard(char const*)+0x8e>
c001ac4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac52:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ac56:	83 c2 54             	add    edx,0x54
c001ac59:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001ac61:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001ac66:	eb df                	jmp    c001ac47 <SoundCard::SoundCard(char const*)+0x6d>
c001ac68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac6c:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ac73:	90                   	nop
c001ac74:	83 c4 1c             	add    esp,0x1c
c001ac77:	c3                   	ret    

c001ac78 <SoundCard::~SoundCard()>:
c001ac78:	83 ec 0c             	sub    esp,0xc
c001ac7b:	ba e0 30 02 c0       	mov    edx,0xc00230e0
c001ac80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac84:	89 10                	mov    DWORD PTR [eax],edx
c001ac86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac8a:	83 ec 0c             	sub    esp,0xc
c001ac8d:	50                   	push   eax
c001ac8e:	e8 b3 1c ff ff       	call   c000c946 <Device::~Device()>
c001ac93:	83 c4 10             	add    esp,0x10
c001ac96:	90                   	nop
c001ac97:	83 c4 0c             	add    esp,0xc
c001ac9a:	c3                   	ret    
c001ac9b:	90                   	nop

c001ac9c <SoundCard::~SoundCard()>:
c001ac9c:	83 ec 0c             	sub    esp,0xc
c001ac9f:	83 ec 0c             	sub    esp,0xc
c001aca2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aca6:	e8 cd ff ff ff       	call   c001ac78 <SoundCard::~SoundCard()>
c001acab:	83 c4 10             	add    esp,0x10
c001acae:	83 ec 08             	sub    esp,0x8
c001acb1:	68 e8 01 00 00       	push   0x1e8
c001acb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001acba:	e8 4d fb fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001acbf:	83 c4 10             	add    esp,0x10
c001acc2:	83 c4 0c             	add    esp,0xc
c001acc5:	c3                   	ret    

c001acc6 <SoundCard::configureRates(int, int, int)>:
c001acc6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001acca:	31 c0                	xor    eax,eax
c001accc:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001acd3:	75 20                	jne    c001acf5 <SoundCard::configureRates(int, int, int)+0x2f>
c001acd5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001acd9:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001acdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ace3:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001ace9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aced:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001acf3:	b0 01                	mov    al,0x1
c001acf5:	c3                   	ret    

c001acf6 <SoundCard::getSamples16(int, short*)>:
c001acf6:	55                   	push   ebp
c001acf7:	57                   	push   edi
c001acf8:	31 ff                	xor    edi,edi
c001acfa:	56                   	push   esi
c001acfb:	53                   	push   ebx
c001acfc:	31 db                	xor    ebx,ebx
c001acfe:	83 ec 10             	sub    esp,0x10
c001ad01:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001ad05:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ad09:	8d 04 36             	lea    eax,[esi+esi*1]
c001ad0c:	50                   	push   eax
c001ad0d:	6a 00                	push   0x0
c001ad0f:	55                   	push   ebp
c001ad10:	e8 db 57 fe ff       	call   c00004f0 <memset>
c001ad15:	83 c4 10             	add    esp,0x10
c001ad18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad1c:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001ad23:	85 c0                	test   eax,eax
c001ad25:	74 1a                	je     c001ad41 <SoundCard::getSamples16(int, short*)+0x4b>
c001ad27:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ad2b:	75 14                	jne    c001ad41 <SoundCard::getSamples16(int, short*)+0x4b>
c001ad2d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ad31:	55                   	push   ebp
c001ad32:	56                   	push   esi
c001ad33:	50                   	push   eax
c001ad34:	e8 f3 02 00 00       	call   c001b02c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001ad39:	83 c4 10             	add    esp,0x10
c001ad3c:	39 c3                	cmp    ebx,eax
c001ad3e:	0f 4c d8             	cmovl  ebx,eax
c001ad41:	47                   	inc    edi
c001ad42:	83 ff 20             	cmp    edi,0x20
c001ad45:	75 d1                	jne    c001ad18 <SoundCard::getSamples16(int, short*)+0x22>
c001ad47:	83 c4 0c             	add    esp,0xc
c001ad4a:	89 d8                	mov    eax,ebx
c001ad4c:	5b                   	pop    ebx
c001ad4d:	5e                   	pop    esi
c001ad4e:	5f                   	pop    edi
c001ad4f:	5d                   	pop    ebp
c001ad50:	c3                   	ret    
c001ad51:	90                   	nop

c001ad52 <SoundCard::getSamples32(int, int*)>:
c001ad52:	55                   	push   ebp
c001ad53:	57                   	push   edi
c001ad54:	31 ff                	xor    edi,edi
c001ad56:	56                   	push   esi
c001ad57:	31 f6                	xor    esi,esi
c001ad59:	53                   	push   ebx
c001ad5a:	83 ec 10             	sub    esp,0x10
c001ad5d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ad61:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ad65:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001ad69:	c1 e0 02             	shl    eax,0x2
c001ad6c:	50                   	push   eax
c001ad6d:	6a 00                	push   0x0
c001ad6f:	55                   	push   ebp
c001ad70:	e8 7b 57 fe ff       	call   c00004f0 <memset>
c001ad75:	83 c4 10             	add    esp,0x10
c001ad78:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001ad7f:	85 c0                	test   eax,eax
c001ad81:	74 1a                	je     c001ad9d <SoundCard::getSamples32(int, int*)+0x4b>
c001ad83:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ad87:	75 14                	jne    c001ad9d <SoundCard::getSamples32(int, int*)+0x4b>
c001ad89:	53                   	push   ebx
c001ad8a:	55                   	push   ebp
c001ad8b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad8f:	50                   	push   eax
c001ad90:	e8 67 03 00 00       	call   c001b0fc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001ad95:	83 c4 10             	add    esp,0x10
c001ad98:	39 c6                	cmp    esi,eax
c001ad9a:	0f 4c f0             	cmovl  esi,eax
c001ad9d:	47                   	inc    edi
c001ad9e:	83 ff 20             	cmp    edi,0x20
c001ada1:	75 d5                	jne    c001ad78 <SoundCard::getSamples32(int, int*)+0x26>
c001ada3:	85 f6                	test   esi,esi
c001ada5:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001adac:	75 0f                	jne    c001adbd <SoundCard::getSamples32(int, int*)+0x6b>
c001adae:	85 c0                	test   eax,eax
c001adb0:	74 1b                	je     c001adcd <SoundCard::getSamples32(int, int*)+0x7b>
c001adb2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001adb4:	83 ec 0c             	sub    esp,0xc
c001adb7:	53                   	push   ebx
c001adb8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001adbb:	eb 0d                	jmp    c001adca <SoundCard::getSamples32(int, int*)+0x78>
c001adbd:	85 c0                	test   eax,eax
c001adbf:	75 0c                	jne    c001adcd <SoundCard::getSamples32(int, int*)+0x7b>
c001adc1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001adc3:	83 ec 0c             	sub    esp,0xc
c001adc6:	53                   	push   ebx
c001adc7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001adca:	83 c4 10             	add    esp,0x10
c001adcd:	83 c4 0c             	add    esp,0xc
c001add0:	89 f0                	mov    eax,esi
c001add2:	5b                   	pop    ebx
c001add3:	5e                   	pop    esi
c001add4:	5f                   	pop    edi
c001add5:	5d                   	pop    ebp
c001add6:	c3                   	ret    
c001add7:	90                   	nop

c001add8 <SoundCard::addChannel(SoundPort*)>:
c001add8:	83 ec 0c             	sub    esp,0xc
c001addb:	31 c0                	xor    eax,eax
c001addd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ade1:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001ade9:	74 1b                	je     c001ae06 <SoundCard::addChannel(SoundPort*)+0x2e>
c001adeb:	40                   	inc    eax
c001adec:	83 f8 20             	cmp    eax,0x20
c001adef:	75 f0                	jne    c001ade1 <SoundCard::addChannel(SoundPort*)+0x9>
c001adf1:	83 ec 0c             	sub    esp,0xc
c001adf4:	68 b9 30 02 c0       	push   0xc00230b9
c001adf9:	e8 0d 68 ff ff       	call   c001160b <KePanic(char const*)>
c001adfe:	83 c4 10             	add    esp,0x10
c001ae01:	83 c8 ff             	or     eax,0xffffffff
c001ae04:	eb 0b                	jmp    c001ae11 <SoundCard::addChannel(SoundPort*)+0x39>
c001ae06:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ae0a:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001ae11:	83 c4 0c             	add    esp,0xc
c001ae14:	c3                   	ret    
c001ae15:	90                   	nop

c001ae16 <SoundCard::removeChannel(int)>:
c001ae16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae1a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae1e:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001ae29:	c3                   	ret    
c001ae2a:	66 90                	xchg   ax,ax

c001ae2c <SoundPort::SoundPort(int, int, int, int)>:
c001ae2c:	83 ec 0c             	sub    esp,0xc
c001ae2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae33:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ae3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae3e:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001ae42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae46:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ae4a:	89 10                	mov    DWORD PTR [eax],edx
c001ae4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae50:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ae54:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ae57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae5b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ae5f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ae62:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001ae67:	75 13                	jne    c001ae7c <SoundPort::SoundPort(int, int, int, int)+0x50>
c001ae69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae6d:	8b 00                	mov    eax,DWORD PTR [eax]
c001ae6f:	05 a0 0f 00 00       	add    eax,0xfa0
c001ae74:	d1 e0                	shl    eax,1
c001ae76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ae7a:	66 90                	xchg   ax,ax
c001ae7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae80:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ae84:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001ae87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae8b:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001ae92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae96:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001ae99:	c1 e0 02             	shl    eax,0x2
c001ae9c:	83 ec 0c             	sub    esp,0xc
c001ae9f:	50                   	push   eax
c001aea0:	e8 2e cc fe ff       	call   c0007ad3 <malloc>
c001aea5:	83 c4 10             	add    esp,0x10
c001aea8:	89 c2                	mov    edx,eax
c001aeaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aeae:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001aeb1:	90                   	nop
c001aeb2:	83 c4 0c             	add    esp,0xc
c001aeb5:	c3                   	ret    
c001aeb6:	66 90                	xchg   ax,ax

c001aeb8 <SoundPort::~SoundPort()>:
c001aeb8:	83 ec 0c             	sub    esp,0xc
c001aebb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aebf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001aec2:	85 c0                	test   eax,eax
c001aec4:	74 1e                	je     c001aee4 <SoundPort::~SoundPort()+0x2c>
c001aec6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aeca:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001aecd:	83 ec 0c             	sub    esp,0xc
c001aed0:	50                   	push   eax
c001aed1:	e8 0d cc fe ff       	call   c0007ae3 <free>
c001aed6:	83 c4 10             	add    esp,0x10
c001aed9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aedd:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001aee4:	90                   	nop
c001aee5:	83 c4 0c             	add    esp,0xc
c001aee8:	c3                   	ret    
c001aee9:	90                   	nop
c001aeea:	66 90                	xchg   ax,ax

c001aeec <SoundPort::unpause()>:
c001aeec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aef0:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001aef4:	c3                   	ret    
c001aef5:	90                   	nop
c001aef6:	66 90                	xchg   ax,ax

c001aef8 <SoundPort::pause()>:
c001aef8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aefc:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001af00:	c3                   	ret    
c001af01:	90                   	nop
c001af02:	66 90                	xchg   ax,ax

c001af04 <SoundPort::getBufferUsed()>:
c001af04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af08:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001af0b:	c3                   	ret    

c001af0c <SoundPort::getBufferSize()>:
c001af0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af10:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001af13:	c3                   	ret    

c001af14 <SoundPort::buffer16(short*, int)>:
c001af14:	55                   	push   ebp
c001af15:	57                   	push   edi
c001af16:	56                   	push   esi
c001af17:	53                   	push   ebx
c001af18:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001af1c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001af20:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001af23:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001af26:	74 68                	je     c001af90 <SoundPort::buffer16(short*, int)+0x7c>
c001af28:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001af2c:	85 c9                	test   ecx,ecx
c001af2e:	7e 60                	jle    c001af90 <SoundPort::buffer16(short*, int)+0x7c>
c001af30:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001af34:	8d 70 01             	lea    esi,[eax+0x1]
c001af37:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001af3a:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001af3d:	c1 e1 0f             	shl    ecx,0xf
c001af40:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001af43:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001af46:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001af49:	74 4d                	je     c001af98 <SoundPort::buffer16(short*, int)+0x84>
c001af4b:	31 f6                	xor    esi,esi
c001af4d:	eb 21                	jmp    c001af70 <SoundPort::buffer16(short*, int)+0x5c>
c001af4f:	90                   	nop
c001af50:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001af55:	8d 79 01             	lea    edi,[ecx+0x1]
c001af58:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001af5b:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001af5e:	c1 e3 0f             	shl    ebx,0xf
c001af61:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001af64:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001af67:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001af6a:	74 1c                	je     c001af88 <SoundPort::buffer16(short*, int)+0x74>
c001af6c:	89 c6                	mov    esi,eax
c001af6e:	66 90                	xchg   ax,ax
c001af70:	8d 46 01             	lea    eax,[esi+0x1]
c001af73:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001af77:	75 d7                	jne    c001af50 <SoundPort::buffer16(short*, int)+0x3c>
c001af79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001af7d:	8d 76 00             	lea    esi,[esi+0x0]
c001af80:	5b                   	pop    ebx
c001af81:	5e                   	pop    esi
c001af82:	5f                   	pop    edi
c001af83:	5d                   	pop    ebp
c001af84:	c3                   	ret    
c001af85:	8d 76 00             	lea    esi,[esi+0x0]
c001af88:	5b                   	pop    ebx
c001af89:	8d 46 02             	lea    eax,[esi+0x2]
c001af8c:	5e                   	pop    esi
c001af8d:	5f                   	pop    edi
c001af8e:	5d                   	pop    ebp
c001af8f:	c3                   	ret    
c001af90:	5b                   	pop    ebx
c001af91:	31 c0                	xor    eax,eax
c001af93:	5e                   	pop    esi
c001af94:	5f                   	pop    edi
c001af95:	5d                   	pop    ebp
c001af96:	c3                   	ret    
c001af97:	90                   	nop
c001af98:	b8 01 00 00 00       	mov    eax,0x1
c001af9d:	eb e1                	jmp    c001af80 <SoundPort::buffer16(short*, int)+0x6c>
c001af9f:	90                   	nop

c001afa0 <SoundPort::buffer32(int*, int)>:
c001afa0:	55                   	push   ebp
c001afa1:	57                   	push   edi
c001afa2:	56                   	push   esi
c001afa3:	53                   	push   ebx
c001afa4:	83 ec 04             	sub    esp,0x4
c001afa7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001afab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001afaf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001afb3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001afb6:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001afb9:	89 04 24             	mov    DWORD PTR [esp],eax
c001afbc:	74 5a                	je     c001b018 <SoundPort::buffer32(int*, int)+0x78>
c001afbe:	85 c0                	test   eax,eax
c001afc0:	7e 56                	jle    c001b018 <SoundPort::buffer32(int*, int)+0x78>
c001afc2:	8d 71 01             	lea    esi,[ecx+0x1]
c001afc5:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001afc8:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001afcb:	8b 37                	mov    esi,DWORD PTR [edi]
c001afcd:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001afd0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001afd3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001afd6:	74 4c                	je     c001b024 <SoundPort::buffer32(int*, int)+0x84>
c001afd8:	31 f6                	xor    esi,esi
c001afda:	eb 1c                	jmp    c001aff8 <SoundPort::buffer32(int*, int)+0x58>
c001afdc:	8d 69 01             	lea    ebp,[ecx+0x1]
c001afdf:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001afe2:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001afe5:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001afe8:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001afec:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001afef:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aff2:	74 18                	je     c001b00c <SoundPort::buffer32(int*, int)+0x6c>
c001aff4:	89 de                	mov    esi,ebx
c001aff6:	66 90                	xchg   ax,ax
c001aff8:	8d 5e 01             	lea    ebx,[esi+0x1]
c001affb:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001affe:	75 dc                	jne    c001afdc <SoundPort::buffer32(int*, int)+0x3c>
c001b000:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b003:	90                   	nop
c001b004:	83 c4 04             	add    esp,0x4
c001b007:	5b                   	pop    ebx
c001b008:	5e                   	pop    esi
c001b009:	5f                   	pop    edi
c001b00a:	5d                   	pop    ebp
c001b00b:	c3                   	ret    
c001b00c:	8d 46 02             	lea    eax,[esi+0x2]
c001b00f:	83 c4 04             	add    esp,0x4
c001b012:	5b                   	pop    ebx
c001b013:	5e                   	pop    esi
c001b014:	5f                   	pop    edi
c001b015:	5d                   	pop    ebp
c001b016:	c3                   	ret    
c001b017:	90                   	nop
c001b018:	83 c4 04             	add    esp,0x4
c001b01b:	31 c0                	xor    eax,eax
c001b01d:	5b                   	pop    ebx
c001b01e:	5e                   	pop    esi
c001b01f:	5f                   	pop    edi
c001b020:	5d                   	pop    ebp
c001b021:	c3                   	ret    
c001b022:	66 90                	xchg   ax,ax
c001b024:	b8 01 00 00 00       	mov    eax,0x1
c001b029:	eb d9                	jmp    c001b004 <SoundPort::buffer32(int*, int)+0x64>
c001b02b:	90                   	nop

c001b02c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001b02c:	55                   	push   ebp
c001b02d:	57                   	push   edi
c001b02e:	56                   	push   esi
c001b02f:	53                   	push   ebx
c001b030:	83 ec 0c             	sub    esp,0xc
c001b033:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b037:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b03b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001b03f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001b043:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001b049:	39 03                	cmp    DWORD PTR [ebx],eax
c001b04b:	74 13                	je     c001b060 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001b04d:	83 ec 0c             	sub    esp,0xc
c001b050:	68 0c 31 02 c0       	push   0xc002310c
c001b055:	e8 b1 65 ff ff       	call   c001160b <KePanic(char const*)>
c001b05a:	83 c4 10             	add    esp,0x10
c001b05d:	8d 76 00             	lea    esi,[esi+0x0]
c001b060:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001b066:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001b069:	74 11                	je     c001b07c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001b06b:	83 ec 0c             	sub    esp,0xc
c001b06e:	68 4b 31 02 c0       	push   0xc002314b
c001b073:	e8 93 65 ff ff       	call   c001160b <KePanic(char const*)>
c001b078:	83 c4 10             	add    esp,0x10
c001b07b:	90                   	nop
c001b07c:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001b082:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b085:	74 11                	je     c001b098 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001b087:	83 ec 0c             	sub    esp,0xc
c001b08a:	68 4b 31 02 c0       	push   0xc002314b
c001b08f:	e8 77 65 ff ff       	call   c001160b <KePanic(char const*)>
c001b094:	83 c4 10             	add    esp,0x10
c001b097:	90                   	nop
c001b098:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001b09b:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001b09f:	85 f6                	test   esi,esi
c001b0a1:	7e 2d                	jle    c001b0d0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001b0a3:	31 c0                	xor    eax,eax
c001b0a5:	8d 76 00             	lea    esi,[esi+0x0]
c001b0a8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b0ab:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001b0ae:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001b0b4:	85 c9                	test   ecx,ecx
c001b0b6:	0f 49 d1             	cmovns edx,ecx
c001b0b9:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001b0bd:	c1 fa 0f             	sar    edx,0xf
c001b0c0:	01 d1                	add    ecx,edx
c001b0c2:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001b0c6:	83 c0 01             	add    eax,0x1
c001b0c9:	39 f0                	cmp    eax,esi
c001b0cb:	75 db                	jne    c001b0a8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001b0cd:	8d 76 00             	lea    esi,[esi+0x0]
c001b0d0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b0d3:	83 ec 04             	sub    esp,0x4
c001b0d6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b0d9:	29 f0                	sub    eax,esi
c001b0db:	c1 e0 02             	shl    eax,0x2
c001b0de:	50                   	push   eax
c001b0df:	8d 04 b2             	lea    eax,[edx+esi*4]
c001b0e2:	50                   	push   eax
c001b0e3:	52                   	push   edx
c001b0e4:	e8 e7 52 fe ff       	call   c00003d0 <memmove>
c001b0e9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b0ec:	29 f0                	sub    eax,esi
c001b0ee:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b0f1:	83 c4 1c             	add    esp,0x1c
c001b0f4:	89 f0                	mov    eax,esi
c001b0f6:	5b                   	pop    ebx
c001b0f7:	5e                   	pop    esi
c001b0f8:	5f                   	pop    edi
c001b0f9:	5d                   	pop    ebp
c001b0fa:	c3                   	ret    
c001b0fb:	90                   	nop

c001b0fc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001b0fc:	55                   	push   ebp
c001b0fd:	57                   	push   edi
c001b0fe:	56                   	push   esi
c001b0ff:	53                   	push   ebx
c001b100:	83 ec 0c             	sub    esp,0xc
c001b103:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b107:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b10b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001b10f:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001b113:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001b119:	39 03                	cmp    DWORD PTR [ebx],eax
c001b11b:	74 13                	je     c001b130 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001b11d:	83 ec 0c             	sub    esp,0xc
c001b120:	68 2c 31 02 c0       	push   0xc002312c
c001b125:	e8 e1 64 ff ff       	call   c001160b <KePanic(char const*)>
c001b12a:	83 c4 10             	add    esp,0x10
c001b12d:	8d 76 00             	lea    esi,[esi+0x0]
c001b130:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001b136:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001b139:	74 11                	je     c001b14c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001b13b:	83 ec 0c             	sub    esp,0xc
c001b13e:	68 67 31 02 c0       	push   0xc0023167
c001b143:	e8 c3 64 ff ff       	call   c001160b <KePanic(char const*)>
c001b148:	83 c4 10             	add    esp,0x10
c001b14b:	90                   	nop
c001b14c:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001b152:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b155:	74 11                	je     c001b168 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001b157:	83 ec 0c             	sub    esp,0xc
c001b15a:	68 67 31 02 c0       	push   0xc0023167
c001b15f:	e8 a7 64 ff ff       	call   c001160b <KePanic(char const*)>
c001b164:	83 c4 10             	add    esp,0x10
c001b167:	90                   	nop
c001b168:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001b16b:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001b16f:	85 ff                	test   edi,edi
c001b171:	7e 21                	jle    c001b194 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001b173:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001b17a:	31 c0                	xor    eax,eax
c001b17c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b17f:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001b182:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001b185:	01 d5                	add    ebp,edx
c001b187:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001b18a:	83 c0 04             	add    eax,0x4
c001b18d:	39 c1                	cmp    ecx,eax
c001b18f:	75 eb                	jne    c001b17c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001b191:	8d 76 00             	lea    esi,[esi+0x0]
c001b194:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b197:	83 ec 04             	sub    esp,0x4
c001b19a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b19d:	29 f8                	sub    eax,edi
c001b19f:	c1 e0 02             	shl    eax,0x2
c001b1a2:	50                   	push   eax
c001b1a3:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b1a6:	50                   	push   eax
c001b1a7:	52                   	push   edx
c001b1a8:	e8 23 52 fe ff       	call   c00003d0 <memmove>
c001b1ad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b1b0:	29 f8                	sub    eax,edi
c001b1b2:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b1b5:	83 c4 1c             	add    esp,0x1c
c001b1b8:	89 f8                	mov    eax,edi
c001b1ba:	5b                   	pop    ebx
c001b1bb:	5e                   	pop    esi
c001b1bc:	5f                   	pop    edi
c001b1bd:	5d                   	pop    ebp
c001b1be:	c3                   	ret    
c001b1bf:	90                   	nop

c001b1c0 <PCI::open(int, int, void*)>:
c001b1c0:	83 ec 18             	sub    esp,0x18
c001b1c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b1c7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b1cb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b1d1:	8b 10                	mov    edx,DWORD PTR [eax]
c001b1d3:	50                   	push   eax
c001b1d4:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001b1d7:	31 c0                	xor    eax,eax
c001b1d9:	83 c4 1c             	add    esp,0x1c
c001b1dc:	c3                   	ret    
c001b1dd:	90                   	nop

c001b1de <PCI::close(int, int, void*)>:
c001b1de:	31 c0                	xor    eax,eax
c001b1e0:	c3                   	ret    
c001b1e1:	90                   	nop

c001b1e2 <PCI::PCI()>:
c001b1e2:	83 ec 0c             	sub    esp,0xc
c001b1e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1e9:	83 ec 08             	sub    esp,0x8
c001b1ec:	68 83 31 02 c0       	push   0xc0023183
c001b1f1:	50                   	push   eax
c001b1f2:	e8 a9 11 ff ff       	call   c000c3a0 <Bus::Bus(char const*)>
c001b1f7:	83 c4 10             	add    esp,0x10
c001b1fa:	ba 2c 32 02 c0       	mov    edx,0xc002322c
c001b1ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b203:	89 10                	mov    DWORD PTR [eax],edx
c001b205:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b209:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001b213:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b217:	a3 a0 d0 02 c0       	mov    ds:0xc002d0a0,eax
c001b21c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b220:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b226:	0f b6 d0             	movzx  edx,al
c001b229:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b22d:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001b234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b238:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b23e:	0f b6 d0             	movzx  edx,al
c001b241:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b245:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b24a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b24e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b254:	8d 50 01             	lea    edx,[eax+0x1]
c001b257:	88 d1                	mov    cl,dl
c001b259:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b25d:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001b263:	0f b6 d0             	movzx  edx,al
c001b266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b26a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b26e:	83 c9 c0             	or     ecx,0xffffffc0
c001b271:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b275:	90                   	nop
c001b276:	83 c4 0c             	add    esp,0xc
c001b279:	c3                   	ret    

c001b27a <PCI::readBAR8(unsigned int, int)>:
c001b27a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b27e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b282:	f6 c2 01             	test   dl,0x1
c001b285:	74 07                	je     c001b28e <PCI::readBAR8(unsigned int, int)+0x14>
c001b287:	83 e2 fc             	and    edx,0xfffffffc
c001b28a:	01 c2                	add    edx,eax
c001b28c:	ec                   	in     al,dx
c001b28d:	c3                   	ret    
c001b28e:	83 e2 f0             	and    edx,0xfffffff0
c001b291:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001b294:	c3                   	ret    
c001b295:	90                   	nop

c001b296 <PCI::readBAR16(unsigned int, int)>:
c001b296:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b29a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b29e:	f6 c2 01             	test   dl,0x1
c001b2a1:	74 08                	je     c001b2ab <PCI::readBAR16(unsigned int, int)+0x15>
c001b2a3:	83 e2 fc             	and    edx,0xfffffffc
c001b2a6:	01 c2                	add    edx,eax
c001b2a8:	66 ed                	in     ax,dx
c001b2aa:	c3                   	ret    
c001b2ab:	83 e2 f0             	and    edx,0xfffffff0
c001b2ae:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001b2b2:	c3                   	ret    
c001b2b3:	90                   	nop

c001b2b4 <PCI::readBAR32(unsigned int, int)>:
c001b2b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b2b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b2bc:	f6 c2 01             	test   dl,0x1
c001b2bf:	74 07                	je     c001b2c8 <PCI::readBAR32(unsigned int, int)+0x14>
c001b2c1:	83 e2 fc             	and    edx,0xfffffffc
c001b2c4:	01 c2                	add    edx,eax
c001b2c6:	ed                   	in     eax,dx
c001b2c7:	c3                   	ret    
c001b2c8:	83 e2 f0             	and    edx,0xfffffff0
c001b2cb:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001b2ce:	c3                   	ret    
c001b2cf:	90                   	nop

c001b2d0 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001b2d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b2d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b2d8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b2dc:	f6 c2 01             	test   dl,0x1
c001b2df:	74 07                	je     c001b2e8 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001b2e1:	83 e2 fc             	and    edx,0xfffffffc
c001b2e4:	01 ca                	add    edx,ecx
c001b2e6:	ee                   	out    dx,al
c001b2e7:	c3                   	ret    
c001b2e8:	83 e2 f0             	and    edx,0xfffffff0
c001b2eb:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001b2ee:	c3                   	ret    
c001b2ef:	90                   	nop

c001b2f0 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001b2f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b2f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b2f8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b2fc:	f6 c2 01             	test   dl,0x1
c001b2ff:	74 08                	je     c001b309 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001b301:	83 e2 fc             	and    edx,0xfffffffc
c001b304:	01 ca                	add    edx,ecx
c001b306:	66 ef                	out    dx,ax
c001b308:	c3                   	ret    
c001b309:	83 e2 f0             	and    edx,0xfffffff0
c001b30c:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001b310:	c3                   	ret    
c001b311:	90                   	nop

c001b312 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001b312:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b316:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b31a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b31e:	f6 c2 01             	test   dl,0x1
c001b321:	74 07                	je     c001b32a <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001b323:	83 e2 fc             	and    edx,0xfffffffc
c001b326:	01 ca                	add    edx,ecx
c001b328:	ef                   	out    dx,eax
c001b329:	c3                   	ret    
c001b32a:	83 e2 f0             	and    edx,0xfffffff0
c001b32d:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001b330:	c3                   	ret    
c001b331:	90                   	nop

c001b332 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b332:	55                   	push   ebp
c001b333:	57                   	push   edi
c001b334:	56                   	push   esi
c001b335:	53                   	push   ebx
c001b336:	83 ec 0c             	sub    esp,0xc
c001b339:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001b33e:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001b342:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001b346:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b34a:	83 fe 07             	cmp    esi,0x7
c001b34d:	76 10                	jbe    c001b35f <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001b34f:	83 ec 0c             	sub    esp,0xc
c001b352:	68 8b 31 02 c0       	push   0xc002318b
c001b357:	e8 af 62 ff ff       	call   c001160b <KePanic(char const*)>
c001b35c:	83 c4 10             	add    esp,0x10
c001b35f:	0f b6 db             	movzx  ebx,bl
c001b362:	83 fb 0f             	cmp    ebx,0xf
c001b365:	76 10                	jbe    c001b377 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001b367:	83 ec 0c             	sub    esp,0xc
c001b36a:	68 bb 31 02 c0       	push   0xc00231bb
c001b36f:	e8 97 62 ff ff       	call   c001160b <KePanic(char const*)>
c001b374:	83 c4 10             	add    esp,0x10
c001b377:	8d 04 36             	lea    eax,[esi+esi*1]
c001b37a:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b37f:	83 c8 f0             	or     eax,0xfffffff0
c001b382:	ee                   	out    dx,al
c001b383:	ba fa 0c 00 00       	mov    edx,0xcfa
c001b388:	89 e8                	mov    eax,ebp
c001b38a:	ee                   	out    dx,al
c001b38b:	89 f9                	mov    ecx,edi
c001b38d:	89 d8                	mov    eax,ebx
c001b38f:	0f b6 d9             	movzx  ebx,cl
c001b392:	83 c4 0c             	add    esp,0xc
c001b395:	c1 e0 08             	shl    eax,0x8
c001b398:	83 e3 fc             	and    ebx,0xfffffffc
c001b39b:	09 d8                	or     eax,ebx
c001b39d:	5b                   	pop    ebx
c001b39e:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001b3a3:	5e                   	pop    esi
c001b3a4:	5f                   	pop    edi
c001b3a5:	5d                   	pop    ebp
c001b3a6:	c3                   	ret    
c001b3a7:	90                   	nop

c001b3a8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b3a8:	57                   	push   edi
c001b3a9:	56                   	push   esi
c001b3aa:	53                   	push   ebx
c001b3ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b3af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b3b3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b3b7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b3bb:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001b3c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b3c5:	83 ff 01             	cmp    edi,0x1
c001b3c8:	75 3f                	jne    c001b409 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001b3ca:	89 de                	mov    esi,ebx
c001b3cc:	0f b6 c0             	movzx  eax,al
c001b3cf:	c1 e0 10             	shl    eax,0x10
c001b3d2:	81 e6 fc 00 00 00    	and    esi,0xfc
c001b3d8:	0f b6 c9             	movzx  ecx,cl
c001b3db:	09 f0                	or     eax,esi
c001b3dd:	c1 e1 08             	shl    ecx,0x8
c001b3e0:	0f b6 d2             	movzx  edx,dl
c001b3e3:	c1 e2 0b             	shl    edx,0xb
c001b3e6:	09 c8                	or     eax,ecx
c001b3e8:	09 d0                	or     eax,edx
c001b3ea:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b3ef:	0d 00 00 00 80       	or     eax,0x80000000
c001b3f4:	ef                   	out    dx,eax
c001b3f5:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b3fa:	ed                   	in     eax,dx
c001b3fb:	83 e3 02             	and    ebx,0x2
c001b3fe:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b405:	d3 e8                	shr    eax,cl
c001b407:	eb 44                	jmp    c001b44d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b409:	83 ff 02             	cmp    edi,0x2
c001b40c:	75 2d                	jne    c001b43b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001b40e:	83 ec 0c             	sub    esp,0xc
c001b411:	0f b6 fb             	movzx  edi,bl
c001b414:	57                   	push   edi
c001b415:	0f b6 c9             	movzx  ecx,cl
c001b418:	51                   	push   ecx
c001b419:	0f b6 d2             	movzx  edx,dl
c001b41c:	52                   	push   edx
c001b41d:	0f b6 c0             	movzx  eax,al
c001b420:	50                   	push   eax
c001b421:	56                   	push   esi
c001b422:	e8 0b ff ff ff       	call   c001b332 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b427:	89 c2                	mov    edx,eax
c001b429:	ed                   	in     eax,dx
c001b42a:	83 e3 02             	and    ebx,0x2
c001b42d:	83 c4 20             	add    esp,0x20
c001b430:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b437:	d3 e8                	shr    eax,cl
c001b439:	eb 12                	jmp    c001b44d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b43b:	83 ec 0c             	sub    esp,0xc
c001b43e:	68 eb 31 02 c0       	push   0xc00231eb
c001b443:	e8 c3 61 ff ff       	call   c001160b <KePanic(char const*)>
c001b448:	83 c4 10             	add    esp,0x10
c001b44b:	31 c0                	xor    eax,eax
c001b44d:	5b                   	pop    ebx
c001b44e:	5e                   	pop    esi
c001b44f:	5f                   	pop    edi
c001b450:	c3                   	ret    
c001b451:	90                   	nop

c001b452 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b452:	83 ec 18             	sub    esp,0x18
c001b455:	6a 00                	push   0x0
c001b457:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b45c:	50                   	push   eax
c001b45d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b462:	50                   	push   eax
c001b463:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b468:	50                   	push   eax
c001b469:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b46d:	e8 36 ff ff ff       	call   c001b3a8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b472:	83 c4 2c             	add    esp,0x2c
c001b475:	c3                   	ret    

c001b476 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b476:	83 ec 18             	sub    esp,0x18
c001b479:	6a 0e                	push   0xe
c001b47b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b480:	50                   	push   eax
c001b481:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b486:	50                   	push   eax
c001b487:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b48c:	50                   	push   eax
c001b48d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b491:	e8 12 ff ff ff       	call   c001b3a8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b496:	83 c4 2c             	add    esp,0x2c
c001b499:	0f b6 c0             	movzx  eax,al
c001b49c:	c3                   	ret    
c001b49d:	90                   	nop

c001b49e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b49e:	55                   	push   ebp
c001b49f:	57                   	push   edi
c001b4a0:	56                   	push   esi
c001b4a1:	53                   	push   ebx
c001b4a2:	83 ec 18             	sub    esp,0x18
c001b4a5:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001b4aa:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001b4af:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001b4b4:	6a 0a                	push   0xa
c001b4b6:	56                   	push   esi
c001b4b7:	55                   	push   ebp
c001b4b8:	57                   	push   edi
c001b4b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b4bd:	e8 e6 fe ff ff       	call   c001b3a8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4c2:	83 c4 14             	add    esp,0x14
c001b4c5:	6a 0a                	push   0xa
c001b4c7:	56                   	push   esi
c001b4c8:	55                   	push   ebp
c001b4c9:	57                   	push   edi
c001b4ca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b4ce:	89 c3                	mov    ebx,eax
c001b4d0:	0f b6 db             	movzx  ebx,bl
c001b4d3:	e8 d0 fe ff ff       	call   c001b3a8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4d8:	83 c4 2c             	add    esp,0x2c
c001b4db:	25 00 ff 00 00       	and    eax,0xff00
c001b4e0:	09 d8                	or     eax,ebx
c001b4e2:	5b                   	pop    ebx
c001b4e3:	5e                   	pop    esi
c001b4e4:	5f                   	pop    edi
c001b4e5:	5d                   	pop    ebp
c001b4e6:	c3                   	ret    
c001b4e7:	90                   	nop

c001b4e8 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b4e8:	83 ec 18             	sub    esp,0x18
c001b4eb:	6a 08                	push   0x8
c001b4ed:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4f2:	50                   	push   eax
c001b4f3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4f8:	50                   	push   eax
c001b4f9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4fe:	50                   	push   eax
c001b4ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b503:	e8 a0 fe ff ff       	call   c001b3a8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b508:	83 c4 2c             	add    esp,0x2c
c001b50b:	0f b6 c4             	movzx  eax,ah
c001b50e:	c3                   	ret    
c001b50f:	90                   	nop

c001b510 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b510:	83 ec 18             	sub    esp,0x18
c001b513:	6a 08                	push   0x8
c001b515:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b51a:	50                   	push   eax
c001b51b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b520:	50                   	push   eax
c001b521:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b526:	50                   	push   eax
c001b527:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b52b:	e8 78 fe ff ff       	call   c001b3a8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b530:	83 c4 2c             	add    esp,0x2c
c001b533:	c3                   	ret    

c001b534 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b534:	83 ec 18             	sub    esp,0x18
c001b537:	6a 3c                	push   0x3c
c001b539:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b53e:	50                   	push   eax
c001b53f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b544:	50                   	push   eax
c001b545:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b54a:	50                   	push   eax
c001b54b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b54f:	e8 54 fe ff ff       	call   c001b3a8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b554:	83 c4 2c             	add    esp,0x2c
c001b557:	c3                   	ret    

c001b558 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b558:	83 ec 18             	sub    esp,0x18
c001b55b:	6a 18                	push   0x18
c001b55d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b562:	50                   	push   eax
c001b563:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b568:	50                   	push   eax
c001b569:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b56e:	50                   	push   eax
c001b56f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b573:	e8 30 fe ff ff       	call   c001b3a8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b578:	83 c4 2c             	add    esp,0x2c
c001b57b:	0f b6 c4             	movzx  eax,ah
c001b57e:	c3                   	ret    
c001b57f:	90                   	nop

c001b580 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b580:	55                   	push   ebp
c001b581:	57                   	push   edi
c001b582:	56                   	push   esi
c001b583:	53                   	push   ebx
c001b584:	83 ec 28             	sub    esp,0x28
c001b587:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b58b:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001b590:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001b595:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001b59a:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b5a1:	8d 43 12             	lea    eax,[ebx+0x12]
c001b5a4:	83 c3 10             	add    ebx,0x10
c001b5a7:	0f b6 c0             	movzx  eax,al
c001b5aa:	0f b6 db             	movzx  ebx,bl
c001b5ad:	50                   	push   eax
c001b5ae:	51                   	push   ecx
c001b5af:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001b5b3:	57                   	push   edi
c001b5b4:	55                   	push   ebp
c001b5b5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b5b9:	e8 ea fd ff ff       	call   c001b3a8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5be:	83 c4 14             	add    esp,0x14
c001b5c1:	53                   	push   ebx
c001b5c2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b5c6:	51                   	push   ecx
c001b5c7:	89 c6                	mov    esi,eax
c001b5c9:	57                   	push   edi
c001b5ca:	55                   	push   ebp
c001b5cb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b5cf:	c1 e6 10             	shl    esi,0x10
c001b5d2:	e8 d1 fd ff ff       	call   c001b3a8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5d7:	83 c4 3c             	add    esp,0x3c
c001b5da:	5b                   	pop    ebx
c001b5db:	0f b7 c0             	movzx  eax,ax
c001b5de:	09 f0                	or     eax,esi
c001b5e0:	5e                   	pop    esi
c001b5e1:	5f                   	pop    edi
c001b5e2:	5d                   	pop    ebp
c001b5e3:	c3                   	ret    

c001b5e4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b5e4:	55                   	push   ebp
c001b5e5:	57                   	push   edi
c001b5e6:	56                   	push   esi
c001b5e7:	53                   	push   ebx
c001b5e8:	83 ec 0c             	sub    esp,0xc
c001b5eb:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b5ef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b5f3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b5f7:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001b5fb:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001b601:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b605:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b609:	83 f9 01             	cmp    ecx,0x1
c001b60c:	75 5d                	jne    c001b66b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001b60e:	0f b6 c8             	movzx  ecx,al
c001b611:	89 f0                	mov    eax,esi
c001b613:	25 fc 00 00 00       	and    eax,0xfc
c001b618:	0f b6 d2             	movzx  edx,dl
c001b61b:	c1 e1 10             	shl    ecx,0x10
c001b61e:	c1 e2 0b             	shl    edx,0xb
c001b621:	09 c1                	or     ecx,eax
c001b623:	89 f8                	mov    eax,edi
c001b625:	0f b6 f8             	movzx  edi,al
c001b628:	c1 e7 08             	shl    edi,0x8
c001b62b:	09 f9                	or     ecx,edi
c001b62d:	09 d1                	or     ecx,edx
c001b62f:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b634:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b63a:	89 c8                	mov    eax,ecx
c001b63c:	ef                   	out    dx,eax
c001b63d:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b642:	ed                   	in     eax,dx
c001b643:	83 e6 02             	and    esi,0x2
c001b646:	0f b7 db             	movzx  ebx,bx
c001b649:	74 0a                	je     c001b655 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001b64b:	c1 e3 10             	shl    ebx,0x10
c001b64e:	0f b7 d0             	movzx  edx,ax
c001b651:	09 d3                	or     ebx,edx
c001b653:	eb 05                	jmp    c001b65a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001b655:	66 31 c0             	xor    ax,ax
c001b658:	09 c3                	or     ebx,eax
c001b65a:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b65f:	89 c8                	mov    eax,ecx
c001b661:	ef                   	out    dx,eax
c001b662:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b667:	89 d8                	mov    eax,ebx
c001b669:	eb 41                	jmp    c001b6ac <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b66b:	83 f9 02             	cmp    ecx,0x2
c001b66e:	75 45                	jne    c001b6b5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001b670:	89 f1                	mov    ecx,esi
c001b672:	83 ec 0c             	sub    esp,0xc
c001b675:	0f b6 f1             	movzx  esi,cl
c001b678:	89 f9                	mov    ecx,edi
c001b67a:	56                   	push   esi
c001b67b:	0f b6 f9             	movzx  edi,cl
c001b67e:	57                   	push   edi
c001b67f:	0f b6 d2             	movzx  edx,dl
c001b682:	52                   	push   edx
c001b683:	0f b6 c0             	movzx  eax,al
c001b686:	50                   	push   eax
c001b687:	55                   	push   ebp
c001b688:	e8 a5 fc ff ff       	call   c001b332 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b68d:	89 c2                	mov    edx,eax
c001b68f:	ed                   	in     eax,dx
c001b690:	83 c4 20             	add    esp,0x20
c001b693:	f6 c2 02             	test   dl,0x2
c001b696:	0f b7 db             	movzx  ebx,bx
c001b699:	74 0c                	je     c001b6a7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001b69b:	0f b7 c8             	movzx  ecx,ax
c001b69e:	89 d8                	mov    eax,ebx
c001b6a0:	c1 e0 10             	shl    eax,0x10
c001b6a3:	09 c8                	or     eax,ecx
c001b6a5:	eb 05                	jmp    c001b6ac <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b6a7:	66 31 c0             	xor    ax,ax
c001b6aa:	09 d8                	or     eax,ebx
c001b6ac:	ef                   	out    dx,eax
c001b6ad:	83 c4 0c             	add    esp,0xc
c001b6b0:	5b                   	pop    ebx
c001b6b1:	5e                   	pop    esi
c001b6b2:	5f                   	pop    edi
c001b6b3:	5d                   	pop    ebp
c001b6b4:	c3                   	ret    
c001b6b5:	c7 44 24 20 eb 31 02 c0 	mov    DWORD PTR [esp+0x20],0xc00231eb
c001b6bd:	83 c4 0c             	add    esp,0xc
c001b6c0:	5b                   	pop    ebx
c001b6c1:	5e                   	pop    esi
c001b6c2:	5f                   	pop    edi
c001b6c3:	5d                   	pop    ebp
c001b6c4:	e9 42 5f ff ff       	jmp    c001160b <KePanic(char const*)>
c001b6c9:	90                   	nop

c001b6ca <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b6ca:	55                   	push   ebp
c001b6cb:	57                   	push   edi
c001b6cc:	56                   	push   esi
c001b6cd:	53                   	push   ebx
c001b6ce:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b6d4:	80 3d ac d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0ac,0x0
c001b6db:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001b6e2:	0f 85 bd 00 00 00    	jne    c001b7a5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b6e8:	83 ec 0c             	sub    esp,0xc
c001b6eb:	68 14 01 00 00       	push   0x114
c001b6f0:	e8 de c3 fe ff       	call   c0007ad3 <malloc>
c001b6f5:	83 c4 0c             	add    esp,0xc
c001b6f8:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001b6fe:	68 f1 31 02 c0       	push   0xc00231f1
c001b703:	50                   	push   eax
c001b704:	89 c3                	mov    ebx,eax
c001b706:	e8 b9 04 ff ff       	call   c000bbc4 <File::File(char const*, Process*)>
c001b70b:	83 c4 10             	add    esp,0x10
c001b70e:	85 db                	test   ebx,ebx
c001b710:	0f 84 6b 02 00 00    	je     c001b981 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b716:	57                   	push   edi
c001b717:	57                   	push   edi
c001b718:	6a 01                	push   0x1
c001b71a:	53                   	push   ebx
c001b71b:	e8 c2 04 ff ff       	call   c000bbe2 <File::open(FileOpenMode)>
c001b720:	83 c4 10             	add    esp,0x10
c001b723:	85 c0                	test   eax,eax
c001b725:	0f 85 56 02 00 00    	jne    c001b981 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b72b:	52                   	push   edx
c001b72c:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b730:	50                   	push   eax
c001b731:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b735:	50                   	push   eax
c001b736:	53                   	push   ebx
c001b737:	e8 a8 07 ff ff       	call   c000bee4 <File::stat(unsigned long long*, bool*)>
c001b73c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b740:	40                   	inc    eax
c001b741:	89 04 24             	mov    DWORD PTR [esp],eax
c001b744:	e8 8a c3 fe ff       	call   c0007ad3 <malloc>
c001b749:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b74d:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b751:	59                   	pop    ecx
c001b752:	a3 a8 d0 02 c0       	mov    ds:0xc002d0a8,eax
c001b757:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b759:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b75d:	51                   	push   ecx
c001b75e:	50                   	push   eax
c001b75f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b763:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b767:	53                   	push   ebx
c001b768:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b76b:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b76f:	83 c4 20             	add    esp,0x20
c001b772:	89 c8                	mov    eax,ecx
c001b774:	99                   	cdq    
c001b775:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b779:	0f 85 02 02 00 00    	jne    c001b981 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b77f:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b783:	0f 85 f8 01 00 00    	jne    c001b981 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b789:	83 ec 0c             	sub    esp,0xc
c001b78c:	53                   	push   ebx
c001b78d:	e8 ae 04 ff ff       	call   c000bc40 <File::close()>
c001b792:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b796:	83 c4 10             	add    esp,0x10
c001b799:	c6 05 ac d0 02 c0 01 	mov    BYTE PTR ds:0xc002d0ac,0x1
c001b7a0:	a3 a4 d0 02 c0       	mov    ds:0xc002d0a4,eax
c001b7a5:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b7ad:	31 c9                	xor    ecx,ecx
c001b7af:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001b7b6:	8b 2d a4 d0 02 c0    	mov    ebp,DWORD PTR ds:0xc002d0a4
c001b7bc:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b7c3:	8b 15 a8 d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d0a8
c001b7c9:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b7ce:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b7d6:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b7db:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b7e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b7e7:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b7ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b7f3:	39 cd                	cmp    ebp,ecx
c001b7f5:	0f 8e 86 01 00 00    	jle    c001b981 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b7fb:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001b7fe:	d4 40                	aam    0x40
c001b800:	d5 39                	aad    0x39
c001b802:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b806:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001b80a:	d4 40                	aam    0x40
c001b80c:	d5 39                	aad    0x39
c001b80e:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b812:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001b816:	d4 40                	aam    0x40
c001b818:	d5 39                	aad    0x39
c001b81a:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b81e:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001b822:	d4 40                	aam    0x40
c001b824:	d5 39                	aad    0x39
c001b826:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b82a:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001b82e:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b832:	3c 56                	cmp    al,0x56
c001b834:	74 47                	je     c001b87d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001b836:	d4 40                	aam    0x40
c001b838:	d5 39                	aad    0x39
c001b83a:	8d 58 d0             	lea    ebx,[eax-0x30]
c001b83d:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001b841:	0f b6 db             	movzx  ebx,bl
c001b844:	c1 e3 04             	shl    ebx,0x4
c001b847:	d4 40                	aam    0x40
c001b849:	d5 39                	aad    0x39
c001b84b:	83 e8 30             	sub    eax,0x30
c001b84e:	0f b6 c0             	movzx  eax,al
c001b851:	09 c3                	or     ebx,eax
c001b853:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001b857:	c1 e3 04             	shl    ebx,0x4
c001b85a:	d4 40                	aam    0x40
c001b85c:	d5 39                	aad    0x39
c001b85e:	83 e8 30             	sub    eax,0x30
c001b861:	0f b6 c0             	movzx  eax,al
c001b864:	09 c3                	or     ebx,eax
c001b866:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001b86a:	c1 e3 04             	shl    ebx,0x4
c001b86d:	d4 40                	aam    0x40
c001b86f:	d5 39                	aad    0x39
c001b871:	83 e8 30             	sub    eax,0x30
c001b874:	0f b6 c0             	movzx  eax,al
c001b877:	09 c3                	or     ebx,eax
c001b879:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001b87d:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001b881:	80 fb 58             	cmp    bl,0x58
c001b884:	74 49                	je     c001b8cf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001b886:	88 d8                	mov    al,bl
c001b888:	d4 40                	aam    0x40
c001b88a:	d5 39                	aad    0x39
c001b88c:	83 e8 30             	sub    eax,0x30
c001b88f:	0f b6 f8             	movzx  edi,al
c001b892:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001b896:	c1 e7 04             	shl    edi,0x4
c001b899:	d4 40                	aam    0x40
c001b89b:	d5 39                	aad    0x39
c001b89d:	83 e8 30             	sub    eax,0x30
c001b8a0:	0f b6 c0             	movzx  eax,al
c001b8a3:	09 c7                	or     edi,eax
c001b8a5:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001b8a9:	c1 e7 04             	shl    edi,0x4
c001b8ac:	d4 40                	aam    0x40
c001b8ae:	d5 39                	aad    0x39
c001b8b0:	83 e8 30             	sub    eax,0x30
c001b8b3:	0f b6 c0             	movzx  eax,al
c001b8b6:	09 c7                	or     edi,eax
c001b8b8:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001b8bc:	c1 e7 04             	shl    edi,0x4
c001b8bf:	d4 40                	aam    0x40
c001b8c1:	d5 39                	aad    0x39
c001b8c3:	83 e8 30             	sub    eax,0x30
c001b8c6:	0f b6 c0             	movzx  eax,al
c001b8c9:	09 c7                	or     edi,eax
c001b8cb:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001b8cf:	8d 41 10             	lea    eax,[ecx+0x10]
c001b8d2:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b8d6:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001b8da:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b8de:	83 f9 0a             	cmp    ecx,0xa
c001b8e1:	74 07                	je     c001b8ea <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001b8e3:	47                   	inc    edi
c001b8e4:	39 c5                	cmp    ebp,eax
c001b8e6:	75 16                	jne    c001b8fe <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001b8e8:	89 e8                	mov    eax,ebp
c001b8ea:	83 f9 0a             	cmp    ecx,0xa
c001b8ed:	0f 94 c1             	sete   cl
c001b8f0:	0f b6 c9             	movzx  ecx,cl
c001b8f3:	01 c1                	add    ecx,eax
c001b8f5:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b8fa:	75 0f                	jne    c001b90b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001b8fc:	eb 1c                	jmp    c001b91a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001b8fe:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b901:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001b905:	40                   	inc    eax
c001b906:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001b909:	eb cb                	jmp    c001b8d6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001b90b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b90f:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b914:	0f 85 d9 fe ff ff    	jne    c001b7f3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b91a:	80 fb 58             	cmp    bl,0x58
c001b91d:	74 10                	je     c001b92f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001b91f:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b924:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001b929:	0f 85 c4 fe ff ff    	jne    c001b7f3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b92f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b933:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b937:	83 e8 30             	sub    eax,0x30
c001b93a:	c1 e0 04             	shl    eax,0x4
c001b93d:	83 eb 30             	sub    ebx,0x30
c001b940:	09 d8                	or     eax,ebx
c001b942:	0f b6 c0             	movzx  eax,al
c001b945:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b949:	0f 85 a4 fe ff ff    	jne    c001b7f3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b94f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b953:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b957:	83 e8 30             	sub    eax,0x30
c001b95a:	c1 e0 04             	shl    eax,0x4
c001b95d:	83 eb 30             	sub    ebx,0x30
c001b960:	09 d8                	or     eax,ebx
c001b962:	0f b6 c0             	movzx  eax,al
c001b965:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b969:	0f 85 84 fe ff ff    	jne    c001b7f3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b96f:	50                   	push   eax
c001b970:	50                   	push   eax
c001b971:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b975:	50                   	push   eax
c001b976:	56                   	push   esi
c001b977:	e8 d4 4c fe ff       	call   c0000650 <strcpy>
c001b97c:	83 c4 10             	add    esp,0x10
c001b97f:	eb 05                	jmp    c001b986 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001b981:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b984:	31 f6                	xor    esi,esi
c001b986:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b98c:	89 f0                	mov    eax,esi
c001b98e:	5b                   	pop    ebx
c001b98f:	5e                   	pop    esi
c001b990:	5f                   	pop    edi
c001b991:	5d                   	pop    ebp
c001b992:	c3                   	ret    
c001b993:	90                   	nop

c001b994 <PCI::checkBus(unsigned char)>:
c001b994:	56                   	push   esi
c001b995:	53                   	push   ebx
c001b996:	31 db                	xor    ebx,ebx
c001b998:	51                   	push   ecx
c001b999:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b99e:	52                   	push   edx
c001b99f:	53                   	push   ebx
c001b9a0:	43                   	inc    ebx
c001b9a1:	56                   	push   esi
c001b9a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9a6:	e8 0f 03 00 00       	call   c001bcba <PCI::checkDevice(unsigned char, unsigned char)>
c001b9ab:	83 c4 10             	add    esp,0x10
c001b9ae:	83 fb 20             	cmp    ebx,0x20
c001b9b1:	75 eb                	jne    c001b99e <PCI::checkBus(unsigned char)+0xa>
c001b9b3:	58                   	pop    eax
c001b9b4:	5b                   	pop    ebx
c001b9b5:	5e                   	pop    esi
c001b9b6:	c3                   	ret    
c001b9b7:	90                   	nop

c001b9b8 <PCI::foundDevice(PCIDeviceInfo)>:
c001b9b8:	55                   	push   ebp
c001b9b9:	57                   	push   edi
c001b9ba:	56                   	push   esi
c001b9bb:	53                   	push   ebx
c001b9bc:	83 ec 1c             	sub    esp,0x1c
c001b9bf:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001b9c4:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b9c8:	3d ff ff 00 00       	cmp    eax,0xffff
c001b9cd:	0f 84 63 01 00 00    	je     c001bb36 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001b9d3:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001b9d8:	66 3d 06 04          	cmp    ax,0x406
c001b9dc:	75 2c                	jne    c001ba0a <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001b9de:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b9e3:	50                   	push   eax
c001b9e4:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b9e9:	50                   	push   eax
c001b9ea:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b9ef:	50                   	push   eax
c001b9f0:	53                   	push   ebx
c001b9f1:	e8 62 fb ff ff       	call   c001b558 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b9f6:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b9fa:	0f b6 c0             	movzx  eax,al
c001b9fd:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001ba01:	83 c4 2c             	add    esp,0x2c
c001ba04:	5b                   	pop    ebx
c001ba05:	5e                   	pop    esi
c001ba06:	5f                   	pop    edi
c001ba07:	5d                   	pop    ebp
c001ba08:	eb 8a                	jmp    c001b994 <PCI::checkBus(unsigned char)>
c001ba0a:	0f b6 4c 24 54       	movzx  ecx,BYTE PTR [esp+0x54]
c001ba0f:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001ba15:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001ba19:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001ba1d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ba21:	85 d2                	test   edx,edx
c001ba23:	74 34                	je     c001ba59 <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c001ba25:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001ba28:	85 c9                	test   ecx,ecx
c001ba2a:	74 29                	je     c001ba55 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001ba2c:	8b a9 18 01 00 00    	mov    ebp,DWORD PTR [ecx+0x118]
c001ba32:	31 f5                	xor    ebp,esi
c001ba34:	81 e5 ff 00 ff ff    	and    ebp,0xffff00ff
c001ba3a:	75 19                	jne    c001ba55 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001ba3c:	39 b9 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],edi
c001ba42:	75 11                	jne    c001ba55 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001ba44:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001ba4b:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001ba4f:	0f 84 e1 00 00 00    	je     c001bb36 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001ba55:	8b 12                	mov    edx,DWORD PTR [edx]
c001ba57:	eb c8                	jmp    c001ba21 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001ba59:	3d 01 06 00 00       	cmp    eax,0x601
c001ba5e:	75 19                	jne    c001ba79 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001ba60:	83 ec 0c             	sub    esp,0xc
c001ba63:	68 64 01 00 00       	push   0x164
c001ba68:	e8 66 c0 fe ff       	call   c0007ad3 <malloc>
c001ba6d:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba70:	89 c5                	mov    ebp,eax
c001ba72:	e8 ab 0e 00 00       	call   c001c922 <SATABus::SATABus()>
c001ba77:	eb 1e                	jmp    c001ba97 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001ba79:	3d 01 01 00 00       	cmp    eax,0x101
c001ba7e:	75 62                	jne    c001bae2 <PCI::foundDevice(PCIDeviceInfo)+0x12a>
c001ba80:	83 ec 0c             	sub    esp,0xc
c001ba83:	68 70 02 00 00       	push   0x270
c001ba88:	e8 46 c0 fe ff       	call   c0007ad3 <malloc>
c001ba8d:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba90:	89 c5                	mov    ebp,eax
c001ba92:	e8 f3 02 00 00       	call   c001bd8a <IDE::IDE()>
c001ba97:	58                   	pop    eax
c001ba98:	5a                   	pop    edx
c001ba99:	55                   	push   ebp
c001ba9a:	53                   	push   ebx
c001ba9b:	e8 a4 0f ff ff       	call   c000ca44 <Device::addChild(Device*)>
c001baa0:	83 ec 1c             	sub    esp,0x1c
c001baa3:	b9 09 00 00 00       	mov    ecx,0x9
c001baa8:	fc                   	cld    
c001baa9:	8d 74 24 60          	lea    esi,[esp+0x60]
c001baad:	89 e7                	mov    edi,esp
c001baaf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bab1:	55                   	push   ebp
c001bab2:	e8 d3 0e ff ff       	call   c000c98a <Device::preOpenPCI(PCIDeviceInfo)>
c001bab7:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001baba:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001babe:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001bac6:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001bace:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001bad6:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001bad9:	83 c4 4c             	add    esp,0x4c
c001badc:	5b                   	pop    ebx
c001badd:	5e                   	pop    esi
c001bade:	5f                   	pop    edi
c001badf:	5d                   	pop    ebp
c001bae0:	ff e0                	jmp    eax
c001bae2:	83 ec 0c             	sub    esp,0xc
c001bae5:	68 58 01 00 00       	push   0x158
c001baea:	e8 e4 bf fe ff       	call   c0007ad3 <malloc>
c001baef:	5a                   	pop    edx
c001baf0:	59                   	pop    ecx
c001baf1:	68 0a 32 02 c0       	push   0xc002320a
c001baf6:	50                   	push   eax
c001baf7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bafb:	e8 e2 11 ff ff       	call   c000cce2 <DriverlessDevice::DriverlessDevice(char const*)>
c001bb00:	5e                   	pop    esi
c001bb01:	5f                   	pop    edi
c001bb02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bb06:	50                   	push   eax
c001bb07:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bb0b:	53                   	push   ebx
c001bb0c:	e8 33 0f ff ff       	call   c000ca44 <Device::addChild(Device*)>
c001bb11:	83 c4 10             	add    esp,0x10
c001bb14:	b9 09 00 00 00       	mov    ecx,0x9
c001bb19:	fc                   	cld    
c001bb1a:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001bb1e:	89 fe                	mov    esi,edi
c001bb20:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bb22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb26:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bb2a:	83 c4 1c             	add    esp,0x1c
c001bb2d:	5b                   	pop    ebx
c001bb2e:	5e                   	pop    esi
c001bb2f:	5f                   	pop    edi
c001bb30:	5d                   	pop    ebp
c001bb31:	e9 54 0e ff ff       	jmp    c000c98a <Device::preOpenPCI(PCIDeviceInfo)>
c001bb36:	83 c4 1c             	add    esp,0x1c
c001bb39:	5b                   	pop    ebx
c001bb3a:	5e                   	pop    esi
c001bb3b:	5f                   	pop    edi
c001bb3c:	5d                   	pop    ebp
c001bb3d:	c3                   	ret    

c001bb3e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001bb3e:	55                   	push   ebp
c001bb3f:	57                   	push   edi
c001bb40:	56                   	push   esi
c001bb41:	53                   	push   ebx
c001bb42:	83 ec 68             	sub    esp,0x68
c001bb45:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001bb4c:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001bb50:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bb54:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001bb5b:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001bb60:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bb64:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001bb6b:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001bb70:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bb74:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001bb79:	6a 0c                	push   0xc
c001bb7b:	57                   	push   edi
c001bb7c:	53                   	push   ebx
c001bb7d:	56                   	push   esi
c001bb7e:	55                   	push   ebp
c001bb7f:	e8 24 f8 ff ff       	call   c001b3a8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bb84:	83 c4 20             	add    esp,0x20
c001bb87:	57                   	push   edi
c001bb88:	53                   	push   ebx
c001bb89:	56                   	push   esi
c001bb8a:	55                   	push   ebp
c001bb8b:	e8 0e f9 ff ff       	call   c001b49e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001bb90:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001bb95:	57                   	push   edi
c001bb96:	53                   	push   ebx
c001bb97:	56                   	push   esi
c001bb98:	55                   	push   ebp
c001bb99:	e8 96 f9 ff ff       	call   c001b534 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001bb9e:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001bba2:	83 c4 14             	add    esp,0x14
c001bba5:	6a 3c                	push   0x3c
c001bba7:	57                   	push   edi
c001bba8:	53                   	push   ebx
c001bba9:	56                   	push   esi
c001bbaa:	55                   	push   ebp
c001bbab:	e8 f8 f7 ff ff       	call   c001b3a8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bbb0:	0f b6 c4             	movzx  eax,ah
c001bbb3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bbb7:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001bbbb:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001bbbf:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001bbc4:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001bbca:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001bbd0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bbd4:	83 c4 20             	add    esp,0x20
c001bbd7:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001bbdc:	74 30                	je     c001bc0e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bbde:	31 c0                	xor    eax,eax
c001bbe0:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001bbe4:	7e 28                	jle    c001bc0e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bbe6:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001bbee:	39 cb                	cmp    ebx,ecx
c001bbf0:	75 19                	jne    c001bc0b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bbf2:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001bbfa:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001bbfe:	75 0b                	jne    c001bc0b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bc00:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001bc07:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001bc0b:	40                   	inc    eax
c001bc0c:	eb d2                	jmp    c001bbe0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001bc0e:	31 d2                	xor    edx,edx
c001bc10:	83 ec 0c             	sub    esp,0xc
c001bc13:	57                   	push   edi
c001bc14:	53                   	push   ebx
c001bc15:	56                   	push   esi
c001bc16:	52                   	push   edx
c001bc17:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001bc1b:	55                   	push   ebp
c001bc1c:	e8 5f f9 ff ff       	call   c001b580 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc21:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bc25:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001bc29:	42                   	inc    edx
c001bc2a:	83 c4 20             	add    esp,0x20
c001bc2d:	83 fa 06             	cmp    edx,0x6
c001bc30:	75 de                	jne    c001bc10 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001bc32:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bc36:	83 ec 0c             	sub    esp,0xc
c001bc39:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bc3d:	c1 e2 08             	shl    edx,0x8
c001bc40:	0f b6 c4             	movzx  eax,ah
c001bc43:	09 d0                	or     eax,edx
c001bc45:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001bc4a:	6a 02                	push   0x2
c001bc4c:	57                   	push   edi
c001bc4d:	53                   	push   ebx
c001bc4e:	56                   	push   esi
c001bc4f:	55                   	push   ebp
c001bc50:	e8 53 f7 ff ff       	call   c001b3a8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc55:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001bc5a:	83 c4 20             	add    esp,0x20
c001bc5d:	57                   	push   edi
c001bc5e:	53                   	push   ebx
c001bc5f:	56                   	push   esi
c001bc60:	55                   	push   ebp
c001bc61:	e8 82 f8 ff ff       	call   c001b4e8 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001bc66:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001bc6a:	57                   	push   edi
c001bc6b:	53                   	push   ebx
c001bc6c:	56                   	push   esi
c001bc6d:	55                   	push   ebp
c001bc6e:	e8 df f7 ff ff       	call   c001b452 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bc73:	b9 09 00 00 00       	mov    ecx,0x9
c001bc78:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001bc7d:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001bc81:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001bc85:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001bc89:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001bc8d:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001bc91:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001bc95:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001bc99:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001bc9d:	83 ec 0c             	sub    esp,0xc
c001bca0:	fc                   	cld    
c001bca1:	8d 74 24 58          	lea    esi,[esp+0x58]
c001bca5:	89 e7                	mov    edi,esp
c001bca7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bca9:	55                   	push   ebp
c001bcaa:	e8 09 fd ff ff       	call   c001b9b8 <PCI::foundDevice(PCIDeviceInfo)>
c001bcaf:	81 c4 8c 00 00 00    	add    esp,0x8c
c001bcb5:	5b                   	pop    ebx
c001bcb6:	5e                   	pop    esi
c001bcb7:	5f                   	pop    edi
c001bcb8:	5d                   	pop    ebp
c001bcb9:	c3                   	ret    

c001bcba <PCI::checkDevice(unsigned char, unsigned char)>:
c001bcba:	55                   	push   ebp
c001bcbb:	57                   	push   edi
c001bcbc:	56                   	push   esi
c001bcbd:	53                   	push   ebx
c001bcbe:	83 ec 0c             	sub    esp,0xc
c001bcc1:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001bcc6:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001bccb:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001bccf:	6a 00                	push   0x0
c001bcd1:	56                   	push   esi
c001bcd2:	57                   	push   edi
c001bcd3:	55                   	push   ebp
c001bcd4:	e8 79 f7 ff ff       	call   c001b452 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bcd9:	6a 00                	push   0x0
c001bcdb:	56                   	push   esi
c001bcdc:	57                   	push   edi
c001bcdd:	55                   	push   ebp
c001bcde:	e8 5b fe ff ff       	call   c001bb3e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bce3:	83 c4 20             	add    esp,0x20
c001bce6:	6a 00                	push   0x0
c001bce8:	56                   	push   esi
c001bce9:	57                   	push   edi
c001bcea:	55                   	push   ebp
c001bceb:	e8 86 f7 ff ff       	call   c001b476 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bcf0:	83 c4 10             	add    esp,0x10
c001bcf3:	a8 80                	test   al,0x80
c001bcf5:	74 2d                	je     c001bd24 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001bcf7:	bb 01 00 00 00       	mov    ebx,0x1
c001bcfc:	53                   	push   ebx
c001bcfd:	56                   	push   esi
c001bcfe:	57                   	push   edi
c001bcff:	55                   	push   ebp
c001bd00:	e8 4d f7 ff ff       	call   c001b452 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bd05:	83 c4 10             	add    esp,0x10
c001bd08:	0f b7 c0             	movzx  eax,ax
c001bd0b:	3d ff ff 00 00       	cmp    eax,0xffff
c001bd10:	74 0c                	je     c001bd1e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001bd12:	53                   	push   ebx
c001bd13:	56                   	push   esi
c001bd14:	57                   	push   edi
c001bd15:	55                   	push   ebp
c001bd16:	e8 23 fe ff ff       	call   c001bb3e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bd1b:	83 c4 10             	add    esp,0x10
c001bd1e:	43                   	inc    ebx
c001bd1f:	83 fb 08             	cmp    ebx,0x8
c001bd22:	75 d8                	jne    c001bcfc <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001bd24:	83 c4 0c             	add    esp,0xc
c001bd27:	5b                   	pop    ebx
c001bd28:	5e                   	pop    esi
c001bd29:	5f                   	pop    edi
c001bd2a:	5d                   	pop    ebp
c001bd2b:	c3                   	ret    

c001bd2c <PCI::detect()>:
c001bd2c:	56                   	push   esi
c001bd2d:	53                   	push   ebx
c001bd2e:	53                   	push   ebx
c001bd2f:	31 db                	xor    ebx,ebx
c001bd31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bd35:	6a 00                	push   0x0
c001bd37:	6a 00                	push   0x0
c001bd39:	6a 00                	push   0x0
c001bd3b:	56                   	push   esi
c001bd3c:	e8 35 f7 ff ff       	call   c001b476 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bd41:	83 c4 10             	add    esp,0x10
c001bd44:	a8 80                	test   al,0x80
c001bd46:	75 21                	jne    c001bd69 <PCI::detect()+0x3d>
c001bd48:	51                   	push   ecx
c001bd49:	51                   	push   ecx
c001bd4a:	6a 00                	push   0x0
c001bd4c:	56                   	push   esi
c001bd4d:	e8 42 fc ff ff       	call   c001b994 <PCI::checkBus(unsigned char)>
c001bd52:	83 c4 10             	add    esp,0x10
c001bd55:	eb 2a                	jmp    c001bd81 <PCI::detect()+0x55>
c001bd57:	52                   	push   edx
c001bd58:	52                   	push   edx
c001bd59:	53                   	push   ebx
c001bd5a:	43                   	inc    ebx
c001bd5b:	56                   	push   esi
c001bd5c:	e8 33 fc ff ff       	call   c001b994 <PCI::checkBus(unsigned char)>
c001bd61:	83 c4 10             	add    esp,0x10
c001bd64:	83 fb 08             	cmp    ebx,0x8
c001bd67:	74 18                	je     c001bd81 <PCI::detect()+0x55>
c001bd69:	53                   	push   ebx
c001bd6a:	6a 00                	push   0x0
c001bd6c:	6a 00                	push   0x0
c001bd6e:	56                   	push   esi
c001bd6f:	e8 de f6 ff ff       	call   c001b452 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bd74:	83 c4 10             	add    esp,0x10
c001bd77:	0f b7 c0             	movzx  eax,ax
c001bd7a:	3d ff ff 00 00       	cmp    eax,0xffff
c001bd7f:	74 d6                	je     c001bd57 <PCI::detect()+0x2b>
c001bd81:	58                   	pop    eax
c001bd82:	5b                   	pop    ebx
c001bd83:	5e                   	pop    esi
c001bd84:	c3                   	ret    
c001bd85:	90                   	nop

c001bd86 <IDE::close(int, int, void*)>:
c001bd86:	83 c8 ff             	or     eax,0xffffffff
c001bd89:	c3                   	ret    

c001bd8a <IDE::IDE()>:
c001bd8a:	83 ec 0c             	sub    esp,0xc
c001bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd91:	83 ec 08             	sub    esp,0x8
c001bd94:	68 50 32 02 c0       	push   0xc0023250
c001bd99:	50                   	push   eax
c001bd9a:	e8 e9 0f ff ff       	call   c000cd88 <HardDiskController::HardDiskController(char const*)>
c001bd9f:	83 c4 10             	add    esp,0x10
c001bda2:	ba e0 32 02 c0       	mov    edx,0xc00232e0
c001bda7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdab:	89 10                	mov    DWORD PTR [eax],edx
c001bdad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdb1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001bdb8:	90                   	nop
c001bdb9:	83 c4 0c             	add    esp,0xc
c001bdbc:	c3                   	ret    
c001bdbd:	90                   	nop

c001bdbe <IDE::prepareInterrupt(unsigned char)>:
c001bdbe:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bdc3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bdc7:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001bdcf:	c3                   	ret    

c001bdd0 <selectDrive(unsigned char, unsigned char)>:
c001bdd0:	c3                   	ret    
c001bdd1:	90                   	nop

c001bdd2 <IDE::getBase(unsigned char)>:
c001bdd2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001bdd7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bddb:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001bde3:	c3                   	ret    

c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001bde4:	55                   	push   ebp
c001bde5:	57                   	push   edi
c001bde6:	56                   	push   esi
c001bde7:	53                   	push   ebx
c001bde8:	83 ec 1c             	sub    esp,0x1c
c001bdeb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bdef:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bdf3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bdf7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bdfb:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001bdfe:	80 f9 03             	cmp    cl,0x3
c001be01:	77 4f                	ja     c001be52 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001be03:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be07:	0f b6 f2             	movzx  esi,dl
c001be0a:	0f b6 db             	movzx  ebx,bl
c001be0d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001be10:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001be15:	80 ca 80             	or     dl,0x80
c001be18:	52                   	push   edx
c001be19:	6a 0c                	push   0xc
c001be1b:	56                   	push   esi
c001be1c:	57                   	push   edi
c001be1d:	e8 c2 ff ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be22:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001be27:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001be2b:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001be2f:	ee                   	out    dx,al
c001be30:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001be35:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001be39:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001be3d:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001be45:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001be49:	83 c4 2c             	add    esp,0x2c
c001be4c:	5b                   	pop    ebx
c001be4d:	5e                   	pop    esi
c001be4e:	5f                   	pop    edi
c001be4f:	5d                   	pop    ebp
c001be50:	eb 92                	jmp    c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be52:	0f b6 cb             	movzx  ecx,bl
c001be55:	83 f9 07             	cmp    ecx,0x7
c001be58:	77 12                	ja     c001be6c <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001be5a:	0f b6 d2             	movzx  edx,dl
c001be5d:	0f b6 db             	movzx  ebx,bl
c001be60:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001be68:	01 da                	add    edx,ebx
c001be6a:	eb 2f                	jmp    c001be9b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001be6c:	83 f9 0d             	cmp    ecx,0xd
c001be6f:	77 13                	ja     c001be84 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001be71:	0f b6 d2             	movzx  edx,dl
c001be74:	0f b6 db             	movzx  ebx,bl
c001be77:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001be7e:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001be82:	eb 17                	jmp    c001be9b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001be84:	83 f9 15             	cmp    ecx,0x15
c001be87:	77 13                	ja     c001be9c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001be89:	0f b6 d2             	movzx  edx,dl
c001be8c:	0f b6 db             	movzx  ebx,bl
c001be8f:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001be97:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001be9b:	ee                   	out    dx,al
c001be9c:	83 c4 1c             	add    esp,0x1c
c001be9f:	5b                   	pop    ebx
c001bea0:	5e                   	pop    esi
c001bea1:	5f                   	pop    edi
c001bea2:	5d                   	pop    ebp
c001bea3:	c3                   	ret    

c001bea4 <IDE::read(unsigned char, unsigned char)>:
c001bea4:	57                   	push   edi
c001bea5:	56                   	push   esi
c001bea6:	53                   	push   ebx
c001bea7:	83 ec 10             	sub    esp,0x10
c001beaa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001beae:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001beb2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001beb6:	8d 42 f8             	lea    eax,[edx-0x8]
c001beb9:	3c 03                	cmp    al,0x3
c001bebb:	77 48                	ja     c001bf05 <IDE::read(unsigned char, unsigned char)+0x61>
c001bebd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bec1:	0f b6 f1             	movzx  esi,cl
c001bec4:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001bec7:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001becc:	0c 80                	or     al,0x80
c001bece:	50                   	push   eax
c001becf:	6a 0c                	push   0xc
c001bed1:	56                   	push   esi
c001bed2:	53                   	push   ebx
c001bed3:	e8 0c ff ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bed8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bedc:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001bee1:	0f b6 d2             	movzx  edx,dl
c001bee4:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001bee8:	ec                   	in     al,dx
c001bee9:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001beed:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001bef2:	52                   	push   edx
c001bef3:	6a 0c                	push   0xc
c001bef5:	56                   	push   esi
c001bef6:	53                   	push   ebx
c001bef7:	e8 e8 fe ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001befc:	83 c4 20             	add    esp,0x20
c001beff:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001bf03:	eb 4c                	jmp    c001bf51 <IDE::read(unsigned char, unsigned char)+0xad>
c001bf05:	0f b6 f2             	movzx  esi,dl
c001bf08:	83 fe 07             	cmp    esi,0x7
c001bf0b:	77 12                	ja     c001bf1f <IDE::read(unsigned char, unsigned char)+0x7b>
c001bf0d:	0f b6 c9             	movzx  ecx,cl
c001bf10:	0f b6 d2             	movzx  edx,dl
c001bf13:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001bf1b:	01 c2                	add    edx,eax
c001bf1d:	eb 31                	jmp    c001bf50 <IDE::read(unsigned char, unsigned char)+0xac>
c001bf1f:	83 fe 0d             	cmp    esi,0xd
c001bf22:	77 13                	ja     c001bf37 <IDE::read(unsigned char, unsigned char)+0x93>
c001bf24:	0f b6 c9             	movzx  ecx,cl
c001bf27:	0f b6 d2             	movzx  edx,dl
c001bf2a:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001bf31:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bf35:	eb 19                	jmp    c001bf50 <IDE::read(unsigned char, unsigned char)+0xac>
c001bf37:	31 c0                	xor    eax,eax
c001bf39:	83 fe 15             	cmp    esi,0x15
c001bf3c:	77 13                	ja     c001bf51 <IDE::read(unsigned char, unsigned char)+0xad>
c001bf3e:	0f b6 c9             	movzx  ecx,cl
c001bf41:	0f b6 d2             	movzx  edx,dl
c001bf44:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001bf4c:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bf50:	ec                   	in     al,dx
c001bf51:	83 c4 10             	add    esp,0x10
c001bf54:	5b                   	pop    ebx
c001bf55:	5e                   	pop    esi
c001bf56:	5f                   	pop    edi
c001bf57:	c3                   	ret    

c001bf58 <IDE::waitInterrupt(unsigned char)>:
c001bf58:	55                   	push   ebp
c001bf59:	57                   	push   edi
c001bf5a:	56                   	push   esi
c001bf5b:	53                   	push   ebx
c001bf5c:	31 db                	xor    ebx,ebx
c001bf5e:	83 ec 0c             	sub    esp,0xc
c001bf61:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bf65:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001bf6a:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001bf72:	89 e8                	mov    eax,ebp
c001bf74:	84 c0                	test   al,al
c001bf76:	75 30                	jne    c001bfa8 <IDE::waitInterrupt(unsigned char)+0x50>
c001bf78:	50                   	push   eax
c001bf79:	6a 0c                	push   0xc
c001bf7b:	56                   	push   esi
c001bf7c:	57                   	push   edi
c001bf7d:	e8 22 ff ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001bf82:	83 c4 10             	add    esp,0x10
c001bf85:	a8 01                	test   al,0x1
c001bf87:	75 27                	jne    c001bfb0 <IDE::waitInterrupt(unsigned char)+0x58>
c001bf89:	f6 c3 04             	test   bl,0x4
c001bf8c:	75 12                	jne    c001bfa0 <IDE::waitInterrupt(unsigned char)+0x48>
c001bf8e:	83 fb 32             	cmp    ebx,0x32
c001bf91:	7e 0d                	jle    c001bfa0 <IDE::waitInterrupt(unsigned char)+0x48>
c001bf93:	83 ec 0c             	sub    esp,0xc
c001bf96:	6a 64                	push   0x64
c001bf98:	e8 73 a4 ff ff       	call   c0016410 <milliTenthSleep(unsigned int)>
c001bf9d:	83 c4 10             	add    esp,0x10
c001bfa0:	83 fb 3c             	cmp    ebx,0x3c
c001bfa3:	74 0b                	je     c001bfb0 <IDE::waitInterrupt(unsigned char)+0x58>
c001bfa5:	43                   	inc    ebx
c001bfa6:	eb c2                	jmp    c001bf6a <IDE::waitInterrupt(unsigned char)+0x12>
c001bfa8:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001bfb0:	83 c4 0c             	add    esp,0xc
c001bfb3:	89 e8                	mov    eax,ebp
c001bfb5:	5b                   	pop    ebx
c001bfb6:	5e                   	pop    esi
c001bfb7:	5f                   	pop    edi
c001bfb8:	5d                   	pop    ebp
c001bfb9:	c3                   	ret    

c001bfba <ideChannel0IRQHandler(regs*, void*)>:
c001bfba:	83 ec 10             	sub    esp,0x10
c001bfbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bfc1:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001bfc8:	6a 07                	push   0x7
c001bfca:	6a 00                	push   0x0
c001bfcc:	50                   	push   eax
c001bfcd:	e8 d2 fe ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001bfd2:	83 c4 1c             	add    esp,0x1c
c001bfd5:	c3                   	ret    

c001bfd6 <ideChannel1IRQHandler(regs*, void*)>:
c001bfd6:	83 ec 10             	sub    esp,0x10
c001bfd9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bfdd:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001bfe4:	6a 07                	push   0x7
c001bfe6:	6a 01                	push   0x1
c001bfe8:	50                   	push   eax
c001bfe9:	e8 b6 fe ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001bfee:	83 c4 1c             	add    esp,0x1c
c001bff1:	c3                   	ret    

c001bff2 <IDE::enableIRQs(unsigned char, bool)>:
c001bff2:	57                   	push   edi
c001bff3:	b8 02 00 00 00       	mov    eax,0x2
c001bff8:	56                   	push   esi
c001bff9:	53                   	push   ebx
c001bffa:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bfff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c003:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c007:	74 02                	je     c001c00b <IDE::enableIRQs(unsigned char, bool)+0x19>
c001c009:	31 c0                	xor    eax,eax
c001c00b:	0f b6 db             	movzx  ebx,bl
c001c00e:	bf 04 00 00 00       	mov    edi,0x4
c001c013:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001c01a:	50                   	push   eax
c001c01b:	6a 0c                	push   0xc
c001c01d:	53                   	push   ebx
c001c01e:	56                   	push   esi
c001c01f:	e8 c0 fd ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c024:	83 c4 10             	add    esp,0x10
c001c027:	50                   	push   eax
c001c028:	6a 0c                	push   0xc
c001c02a:	53                   	push   ebx
c001c02b:	56                   	push   esi
c001c02c:	e8 73 fe ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001c031:	83 c4 10             	add    esp,0x10
c001c034:	4f                   	dec    edi
c001c035:	75 f0                	jne    c001c027 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001c037:	5b                   	pop    ebx
c001c038:	5e                   	pop    esi
c001c039:	5f                   	pop    edi
c001c03a:	c3                   	ret    
c001c03b:	90                   	nop

c001c03c <IDE::open(int, int, void*)>:
c001c03c:	55                   	push   ebp
c001c03d:	57                   	push   edi
c001c03e:	56                   	push   esi
c001c03f:	53                   	push   ebx
c001c040:	83 ec 1c             	sub    esp,0x1c
c001c043:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c047:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001c04e:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001c057:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001c060:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001c067:	0f 85 da 02 00 00    	jne    c001c347 <IDE::open(int, int, void*)+0x30b>
c001c06d:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001c073:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001c077:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c07b:	83 e0 7f             	and    eax,0x7f
c001c07e:	83 f8 05             	cmp    eax,0x5
c001c081:	74 05                	je     c001c088 <IDE::open(int, int, void*)+0x4c>
c001c083:	83 f8 0f             	cmp    eax,0xf
c001c086:	75 32                	jne    c001c0ba <IDE::open(int, int, void*)+0x7e>
c001c088:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001c08e:	83 e0 fc             	and    eax,0xfffffffc
c001c091:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c098:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001c09e:	83 e0 fc             	and    eax,0xfffffffc
c001c0a1:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c0a8:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001c0ae:	83 e0 fc             	and    eax,0xfffffffc
c001c0b1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c0b8:	eb 14                	jmp    c001c0ce <IDE::open(int, int, void*)+0x92>
c001c0ba:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c0c4:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c0ce:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c001c0d5:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c0da:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001c0e1:	89 fa                	mov    edx,edi
c001c0e3:	89 f1                	mov    ecx,esi
c001c0e5:	c1 e1 10             	shl    ecx,0x10
c001c0e8:	89 e8                	mov    eax,ebp
c001c0ea:	c1 e0 0b             	shl    eax,0xb
c001c0ed:	09 c1                	or     ecx,eax
c001c0ef:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c0f6:	c1 e0 08             	shl    eax,0x8
c001c0f9:	09 c1                	or     ecx,eax
c001c0fb:	89 c8                	mov    eax,ecx
c001c0fd:	0d 08 00 00 80       	or     eax,0x80000008
c001c102:	ef                   	out    dx,eax
c001c103:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c108:	ed                   	in     eax,dx
c001c109:	c1 e8 10             	shr    eax,0x10
c001c10c:	3d ff ff 00 00       	cmp    eax,0xffff
c001c111:	0f 84 f9 00 00 00    	je     c001c210 <IDE::open(int, int, void*)+0x1d4>
c001c117:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c11d:	89 fa                	mov    edx,edi
c001c11f:	89 c8                	mov    eax,ecx
c001c121:	ef                   	out    dx,eax
c001c122:	b0 fe                	mov    al,0xfe
c001c124:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c129:	ee                   	out    dx,al
c001c12a:	89 c8                	mov    eax,ecx
c001c12c:	89 fa                	mov    edx,edi
c001c12e:	ef                   	out    dx,eax
c001c12f:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c134:	ed                   	in     eax,dx
c001c135:	3c fe                	cmp    al,0xfe
c001c137:	0f 85 a4 00 00 00    	jne    c001c1e1 <IDE::open(int, int, void*)+0x1a5>
c001c13d:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c001c143:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001c14a:	74 30                	je     c001c17c <IDE::open(int, int, void*)+0x140>
c001c14c:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001c152:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001c156:	83 ec 0c             	sub    esp,0xc
c001c159:	40                   	inc    eax
c001c15a:	0f b6 c0             	movzx  eax,al
c001c15d:	50                   	push   eax
c001c15e:	55                   	push   ebp
c001c15f:	56                   	push   esi
c001c160:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001c166:	51                   	push   ecx
c001c167:	e8 74 38 ff ff       	call   c000f9e0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001c16c:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001c171:	83 c4 1c             	add    esp,0x1c
c001c174:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c17a:	eb 0a                	jmp    c001c186 <IDE::open(int, int, void*)+0x14a>
c001c17c:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001c186:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c18d:	bd f8 0c 00 00       	mov    ebp,0xcf8
c001c192:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c199:	89 ea                	mov    edx,ebp
c001c19b:	c1 e1 10             	shl    ecx,0x10
c001c19e:	c1 e0 08             	shl    eax,0x8
c001c1a1:	09 c1                	or     ecx,eax
c001c1a3:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c1aa:	c1 e0 0b             	shl    eax,0xb
c001c1ad:	09 c1                	or     ecx,eax
c001c1af:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c1b5:	89 c8                	mov    eax,ecx
c001c1b7:	ef                   	out    dx,eax
c001c1b8:	8b bb 50 01 00 00    	mov    edi,DWORD PTR [ebx+0x150]
c001c1be:	be fc 0c 00 00       	mov    esi,0xcfc
c001c1c3:	89 f2                	mov    edx,esi
c001c1c5:	89 f8                	mov    eax,edi
c001c1c7:	ee                   	out    dx,al
c001c1c8:	89 c8                	mov    eax,ecx
c001c1ca:	89 ea                	mov    edx,ebp
c001c1cc:	ef                   	out    dx,eax
c001c1cd:	89 f2                	mov    edx,esi
c001c1cf:	ed                   	in     eax,dx
c001c1d0:	0f b6 c0             	movzx  eax,al
c001c1d3:	39 f8                	cmp    eax,edi
c001c1d5:	74 49                	je     c001c220 <IDE::open(int, int, void*)+0x1e4>
c001c1d7:	83 ec 0c             	sub    esp,0xc
c001c1da:	68 68 32 02 c0       	push   0xc0023268
c001c1df:	eb 37                	jmp    c001c218 <IDE::open(int, int, void*)+0x1dc>
c001c1e1:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001c1ea:	75 1a                	jne    c001c206 <IDE::open(int, int, void*)+0x1ca>
c001c1ec:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001c1f1:	3d 8a 00 00 00       	cmp    eax,0x8a
c001c1f6:	74 05                	je     c001c1fd <IDE::open(int, int, void*)+0x1c1>
c001c1f8:	83 c0 80             	add    eax,0xffffff80
c001c1fb:	75 09                	jne    c001c206 <IDE::open(int, int, void*)+0x1ca>
c001c1fd:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c204:	eb 1a                	jmp    c001c220 <IDE::open(int, int, void*)+0x1e4>
c001c206:	83 ec 0c             	sub    esp,0xc
c001c209:	68 70 32 02 c0       	push   0xc0023270
c001c20e:	eb 08                	jmp    c001c218 <IDE::open(int, int, void*)+0x1dc>
c001c210:	83 ec 0c             	sub    esp,0xc
c001c213:	68 a1 32 02 c0       	push   0xc00232a1
c001c218:	e8 ee 53 ff ff       	call   c001160b <KePanic(char const*)>
c001c21d:	83 c4 10             	add    esp,0x10
c001c220:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001c227:	74 1a                	je     c001c243 <IDE::open(int, int, void*)+0x207>
c001c229:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001c22f:	83 e0 fc             	and    eax,0xfffffffc
c001c232:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001c239:	83 c0 08             	add    eax,0x8
c001c23c:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001c243:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c249:	89 c2                	mov    edx,eax
c001c24b:	83 e2 0f             	and    edx,0xf
c001c24e:	83 fa 08             	cmp    edx,0x8
c001c251:	75 0a                	jne    c001c25d <IDE::open(int, int, void*)+0x221>
c001c253:	83 e8 02             	sub    eax,0x2
c001c256:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c25d:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001c263:	89 c2                	mov    edx,eax
c001c265:	83 e2 0f             	and    edx,0xf
c001c268:	83 fa 08             	cmp    edx,0x8
c001c26b:	75 0a                	jne    c001c277 <IDE::open(int, int, void*)+0x23b>
c001c26d:	83 e8 02             	sub    eax,0x2
c001c270:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c277:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001c27e:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001c285:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c288:	89 d0                	mov    eax,edx
c001c28a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c28e:	8d 7a 01             	lea    edi,[edx+0x1]
c001c291:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001c295:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c299:	83 e1 3f             	and    ecx,0x3f
c001c29c:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c2a0:	89 f9                	mov    ecx,edi
c001c2a2:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001c2a9:	8d 78 02             	lea    edi,[eax+0x2]
c001c2ac:	0f b6 c9             	movzx  ecx,cl
c001c2af:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c2b2:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001c2b6:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c2ba:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c2be:	83 e2 3f             	and    edx,0x3f
c001c2c1:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c2c5:	89 f9                	mov    ecx,edi
c001c2c7:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c2cd:	8d 78 03             	lea    edi,[eax+0x3]
c001c2d0:	0f b6 d1             	movzx  edx,cl
c001c2d3:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c2d6:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001c2da:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c2de:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c2e2:	83 e1 3f             	and    ecx,0x3f
c001c2e5:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c2e9:	89 f9                	mov    ecx,edi
c001c2eb:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001c2f1:	8d 78 04             	lea    edi,[eax+0x4]
c001c2f4:	0f b6 c9             	movzx  ecx,cl
c001c2f7:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c2fa:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001c2fe:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c302:	89 fa                	mov    edx,edi
c001c304:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001c30a:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c30e:	83 e2 3f             	and    edx,0x3f
c001c311:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c315:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001c31c:	66 85 f6             	test   si,si
c001c31f:	74 65                	je     c001c386 <IDE::open(int, int, void*)+0x34a>
c001c321:	89 f9                	mov    ecx,edi
c001c323:	83 c0 05             	add    eax,0x5
c001c326:	0f b6 d1             	movzx  edx,cl
c001c329:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c32c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c330:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001c334:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001c33a:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001c33e:	83 e0 3f             	and    eax,0x3f
c001c341:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001c345:	eb 3f                	jmp    c001c386 <IDE::open(int, int, void*)+0x34a>
c001c347:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c34e:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001c354:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c35b:	05 06 02 00 00       	add    eax,0x206
c001c360:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c367:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001c36e:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c375:	05 06 02 00 00       	add    eax,0x206
c001c37a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c381:	e9 bd fe ff ff       	jmp    c001c243 <IDE::open(int, int, void*)+0x207>
c001c386:	50                   	push   eax
c001c387:	50                   	push   eax
c001c388:	6a 00                	push   0x0
c001c38a:	53                   	push   ebx
c001c38b:	e8 2e fa ff ff       	call   c001bdbe <IDE::prepareInterrupt(unsigned char)>
c001c390:	5a                   	pop    edx
c001c391:	59                   	pop    ecx
c001c392:	6a 01                	push   0x1
c001c394:	53                   	push   ebx
c001c395:	e8 24 fa ff ff       	call   c001bdbe <IDE::prepareInterrupt(unsigned char)>
c001c39a:	83 c4 0c             	add    esp,0xc
c001c39d:	6a 00                	push   0x0
c001c39f:	6a 00                	push   0x0
c001c3a1:	53                   	push   ebx
c001c3a2:	e8 4b fc ff ff       	call   c001bff2 <IDE::enableIRQs(unsigned char, bool)>
c001c3a7:	83 c4 0c             	add    esp,0xc
c001c3aa:	6a 00                	push   0x0
c001c3ac:	6a 01                	push   0x1
c001c3ae:	53                   	push   ebx
c001c3af:	e8 3e fc ff ff       	call   c001bff2 <IDE::enableIRQs(unsigned char, bool)>
c001c3b4:	83 c4 10             	add    esp,0x10
c001c3b7:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c3be:	74 34                	je     c001c3f4 <IDE::open(int, int, void*)+0x3b8>
c001c3c0:	83 ec 0c             	sub    esp,0xc
c001c3c3:	53                   	push   ebx
c001c3c4:	6a 01                	push   0x1
c001c3c6:	68 ba bf 01 c0       	push   0xc001bfba
c001c3cb:	6a 0e                	push   0xe
c001c3cd:	53                   	push   ebx
c001c3ce:	e8 1d 06 ff ff       	call   c000c9f0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c3d3:	83 c4 14             	add    esp,0x14
c001c3d6:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c3dc:	53                   	push   ebx
c001c3dd:	6a 01                	push   0x1
c001c3df:	68 d6 bf 01 c0       	push   0xc001bfd6
c001c3e4:	6a 0f                	push   0xf
c001c3e6:	53                   	push   ebx
c001c3e7:	e8 04 06 ff ff       	call   c000c9f0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c3ec:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c3f2:	eb 38                	jmp    c001c42c <IDE::open(int, int, void*)+0x3f0>
c001c3f4:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c3fe:	83 ec 0c             	sub    esp,0xc
c001c401:	53                   	push   ebx
c001c402:	6a 00                	push   0x0
c001c404:	68 ba bf 01 c0       	push   0xc001bfba
c001c409:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c40f:	53                   	push   ebx
c001c410:	e8 db 05 ff ff       	call   c000c9f0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c415:	83 c4 14             	add    esp,0x14
c001c418:	53                   	push   ebx
c001c419:	6a 00                	push   0x0
c001c41b:	68 d6 bf 01 c0       	push   0xc001bfd6
c001c420:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c426:	53                   	push   ebx
c001c427:	e8 c4 05 ff ff       	call   c000c9f0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c42c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c42e:	83 c4 20             	add    esp,0x20
c001c431:	83 ec 0c             	sub    esp,0xc
c001c434:	53                   	push   ebx
c001c435:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c438:	83 c4 0c             	add    esp,0xc
c001c43b:	6a 07                	push   0x7
c001c43d:	6a 00                	push   0x0
c001c43f:	53                   	push   ebx
c001c440:	e8 5f fa ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001c445:	83 c4 0c             	add    esp,0xc
c001c448:	6a 07                	push   0x7
c001c44a:	6a 01                	push   0x1
c001c44c:	53                   	push   ebx
c001c44d:	e8 52 fa ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001c452:	83 c4 0c             	add    esp,0xc
c001c455:	6a 01                	push   0x1
c001c457:	6a 00                	push   0x0
c001c459:	53                   	push   ebx
c001c45a:	e8 93 fb ff ff       	call   c001bff2 <IDE::enableIRQs(unsigned char, bool)>
c001c45f:	83 c4 0c             	add    esp,0xc
c001c462:	6a 01                	push   0x1
c001c464:	6a 01                	push   0x1
c001c466:	53                   	push   ebx
c001c467:	e8 86 fb ff ff       	call   c001bff2 <IDE::enableIRQs(unsigned char, bool)>
c001c46c:	83 c4 2c             	add    esp,0x2c
c001c46f:	31 c0                	xor    eax,eax
c001c471:	5b                   	pop    ebx
c001c472:	5e                   	pop    esi
c001c473:	5f                   	pop    edi
c001c474:	5d                   	pop    ebp
c001c475:	c3                   	ret    

c001c476 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c476:	55                   	push   ebp
c001c477:	57                   	push   edi
c001c478:	56                   	push   esi
c001c479:	53                   	push   ebx
c001c47a:	83 ec 1c             	sub    esp,0x1c
c001c47d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001c481:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c485:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c489:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c48d:	8d 42 f8             	lea    eax,[edx-0x8]
c001c490:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c494:	3c 03                	cmp    al,0x3
c001c496:	77 5a                	ja     c001c4f2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001c498:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c49c:	0f b6 db             	movzx  ebx,bl
c001c49f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c4a3:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c4a6:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c4ab:	0c 80                	or     al,0x80
c001c4ad:	50                   	push   eax
c001c4ae:	6a 0c                	push   0xc
c001c4b0:	53                   	push   ebx
c001c4b1:	56                   	push   esi
c001c4b2:	e8 2d f9 ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4b7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c4bb:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001c4c0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c4c4:	0f b6 d2             	movzx  edx,dl
c001c4c7:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001c4cb:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c4cd:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c4d2:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c4d6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c4da:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c4e2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c4e6:	83 c4 2c             	add    esp,0x2c
c001c4e9:	5b                   	pop    ebx
c001c4ea:	5e                   	pop    esi
c001c4eb:	5f                   	pop    edi
c001c4ec:	5d                   	pop    ebp
c001c4ed:	e9 f2 f8 ff ff       	jmp    c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4f2:	0f b6 c2             	movzx  eax,dl
c001c4f5:	83 f8 07             	cmp    eax,0x7
c001c4f8:	77 12                	ja     c001c50c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001c4fa:	0f b6 db             	movzx  ebx,bl
c001c4fd:	0f b6 c2             	movzx  eax,dl
c001c500:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001c508:	01 c2                	add    edx,eax
c001c50a:	eb 2f                	jmp    c001c53b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c50c:	83 f8 0d             	cmp    eax,0xd
c001c50f:	77 13                	ja     c001c524 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001c511:	0f b6 db             	movzx  ebx,bl
c001c514:	0f b6 d2             	movzx  edx,dl
c001c517:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001c51e:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c522:	eb 17                	jmp    c001c53b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c524:	83 f8 15             	cmp    eax,0x15
c001c527:	77 14                	ja     c001c53d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001c529:	0f b6 db             	movzx  ebx,bl
c001c52c:	0f b6 d2             	movzx  edx,dl
c001c52f:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001c537:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c53b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c53d:	83 c4 1c             	add    esp,0x1c
c001c540:	5b                   	pop    ebx
c001c541:	5e                   	pop    esi
c001c542:	5f                   	pop    edi
c001c543:	5d                   	pop    ebp
c001c544:	c3                   	ret    
c001c545:	90                   	nop

c001c546 <IDE::detect()>:
c001c546:	55                   	push   ebp
c001c547:	57                   	push   edi
c001c548:	56                   	push   esi
c001c549:	53                   	push   ebx
c001c54a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c550:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c557:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c55e:	0f 85 9e 02 00 00    	jne    c001c802 <IDE::detect()+0x2bc>
c001c564:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c56b:	31 f6                	xor    esi,esi
c001c56d:	31 ff                	xor    edi,edi
c001c56f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c577:	89 f8                	mov    eax,edi
c001c579:	c1 e0 06             	shl    eax,0x6
c001c57c:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c584:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c588:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c58c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c590:	c1 e0 04             	shl    eax,0x4
c001c593:	83 c8 a0             	or     eax,0xffffffa0
c001c596:	0f b6 c0             	movzx  eax,al
c001c599:	50                   	push   eax
c001c59a:	6a 06                	push   0x6
c001c59c:	56                   	push   esi
c001c59d:	53                   	push   ebx
c001c59e:	e8 41 f8 ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5a3:	83 c4 0c             	add    esp,0xc
c001c5a6:	6a 0c                	push   0xc
c001c5a8:	56                   	push   esi
c001c5a9:	53                   	push   ebx
c001c5aa:	e8 f5 f8 ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001c5af:	83 c4 0c             	add    esp,0xc
c001c5b2:	6a 0c                	push   0xc
c001c5b4:	56                   	push   esi
c001c5b5:	53                   	push   ebx
c001c5b6:	e8 e9 f8 ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001c5bb:	83 c4 0c             	add    esp,0xc
c001c5be:	6a 0c                	push   0xc
c001c5c0:	56                   	push   esi
c001c5c1:	53                   	push   ebx
c001c5c2:	e8 dd f8 ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001c5c7:	83 c4 0c             	add    esp,0xc
c001c5ca:	6a 0c                	push   0xc
c001c5cc:	56                   	push   esi
c001c5cd:	53                   	push   ebx
c001c5ce:	e8 d1 f8 ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001c5d3:	68 ec 00 00 00       	push   0xec
c001c5d8:	6a 07                	push   0x7
c001c5da:	56                   	push   esi
c001c5db:	53                   	push   ebx
c001c5dc:	e8 03 f8 ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5e1:	83 c4 1c             	add    esp,0x1c
c001c5e4:	6a 0c                	push   0xc
c001c5e6:	56                   	push   esi
c001c5e7:	53                   	push   ebx
c001c5e8:	e8 b7 f8 ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001c5ed:	83 c4 0c             	add    esp,0xc
c001c5f0:	6a 0c                	push   0xc
c001c5f2:	56                   	push   esi
c001c5f3:	53                   	push   ebx
c001c5f4:	e8 ab f8 ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001c5f9:	83 c4 0c             	add    esp,0xc
c001c5fc:	6a 0c                	push   0xc
c001c5fe:	56                   	push   esi
c001c5ff:	53                   	push   ebx
c001c600:	e8 9f f8 ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001c605:	83 c4 0c             	add    esp,0xc
c001c608:	6a 0c                	push   0xc
c001c60a:	56                   	push   esi
c001c60b:	53                   	push   ebx
c001c60c:	e8 93 f8 ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001c611:	83 c4 0c             	add    esp,0xc
c001c614:	6a 0c                	push   0xc
c001c616:	56                   	push   esi
c001c617:	53                   	push   ebx
c001c618:	e8 87 f8 ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001c61d:	83 c4 10             	add    esp,0x10
c001c620:	84 c0                	test   al,al
c001c622:	0f 84 61 01 00 00    	je     c001c789 <IDE::detect()+0x243>
c001c628:	31 ed                	xor    ebp,ebp
c001c62a:	50                   	push   eax
c001c62b:	6a 0c                	push   0xc
c001c62d:	56                   	push   esi
c001c62e:	53                   	push   ebx
c001c62f:	e8 70 f8 ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001c634:	83 c4 10             	add    esp,0x10
c001c637:	a8 01                	test   al,0x1
c001c639:	0f 85 6b 01 00 00    	jne    c001c7aa <IDE::detect()+0x264>
c001c63f:	a8 80                	test   al,0x80
c001c641:	75 04                	jne    c001c647 <IDE::detect()+0x101>
c001c643:	a8 08                	test   al,0x8
c001c645:	75 23                	jne    c001c66a <IDE::detect()+0x124>
c001c647:	45                   	inc    ebp
c001c648:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001c64e:	7e da                	jle    c001c62a <IDE::detect()+0xe4>
c001c650:	83 ec 0c             	sub    esp,0xc
c001c653:	6a 32                	push   0x32
c001c655:	e8 b6 9d ff ff       	call   c0016410 <milliTenthSleep(unsigned int)>
c001c65a:	83 c4 10             	add    esp,0x10
c001c65d:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001c663:	75 c5                	jne    c001c62a <IDE::detect()+0xe4>
c001c665:	e9 40 01 00 00       	jmp    c001c7aa <IDE::detect()+0x264>
c001c66a:	31 c9                	xor    ecx,ecx
c001c66c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c670:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c001c674:	83 ec 0c             	sub    esp,0xc
c001c677:	68 80 00 00 00       	push   0x80
c001c67c:	55                   	push   ebp
c001c67d:	6a 00                	push   0x0
c001c67f:	56                   	push   esi
c001c680:	53                   	push   ebx
c001c681:	e8 f0 fd ff ff       	call   c001c476 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c686:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c68b:	89 f8                	mov    eax,edi
c001c68d:	c1 e0 06             	shl    eax,0x6
c001c690:	01 d8                	add    eax,ebx
c001c692:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c699:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c6a0:	89 d1                	mov    ecx,edx
c001c6a2:	89 f2                	mov    edx,esi
c001c6a4:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c6aa:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c6ae:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c6b4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c6b8:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c6bf:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c6c7:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c6ce:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c6d6:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c6dc:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c6e3:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c6e9:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c6ed:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c6f1:	83 c4 20             	add    esp,0x20
c001c6f4:	8a 55 37             	mov    dl,BYTE PTR [ebp+0x37]
c001c6f7:	83 c5 02             	add    ebp,0x2
c001c6fa:	83 c0 02             	add    eax,0x2
c001c6fd:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c703:	8a 55 34             	mov    dl,BYTE PTR [ebp+0x34]
c001c706:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c70c:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c001c710:	75 e2                	jne    c001c6f4 <IDE::detect()+0x1ae>
c001c712:	89 f8                	mov    eax,edi
c001c714:	c1 e0 06             	shl    eax,0x6
c001c717:	01 d8                	add    eax,ebx
c001c719:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c720:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c727:	c1 ea 09             	shr    edx,0x9
c001c72a:	83 e2 01             	and    edx,0x1
c001c72d:	80 e1 01             	and    cl,0x1
c001c730:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c736:	75 22                	jne    c001c75a <IDE::detect()+0x214>
c001c738:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c73f:	74 47                	je     c001c788 <IDE::detect()+0x242>
c001c741:	83 ec 0c             	sub    esp,0xc
c001c744:	68 7c 01 00 00       	push   0x17c
c001c749:	e8 85 b3 fe ff       	call   c0007ad3 <malloc>
c001c74e:	89 04 24             	mov    DWORD PTR [esp],eax
c001c751:	89 c5                	mov    ebp,eax
c001c753:	e8 16 05 00 00       	call   c001cc6e <ATA::ATA()>
c001c758:	eb 17                	jmp    c001c771 <IDE::detect()+0x22b>
c001c75a:	83 ec 0c             	sub    esp,0xc
c001c75d:	68 84 01 00 00       	push   0x184
c001c762:	e8 6c b3 fe ff       	call   c0007ad3 <malloc>
c001c767:	89 04 24             	mov    DWORD PTR [esp],eax
c001c76a:	89 c5                	mov    ebp,eax
c001c76c:	e8 6f 0e 00 00       	call   c001d5e0 <ATAPI::ATAPI()>
c001c771:	5a                   	pop    edx
c001c772:	59                   	pop    ecx
c001c773:	55                   	push   ebp
c001c774:	53                   	push   ebx
c001c775:	e8 ca 02 ff ff       	call   c000ca44 <Device::addChild(Device*)>
c001c77a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c77d:	53                   	push   ebx
c001c77e:	57                   	push   edi
c001c77f:	6a 00                	push   0x0
c001c781:	55                   	push   ebp
c001c782:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c785:	83 c4 20             	add    esp,0x20
c001c788:	47                   	inc    edi
c001c789:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c78e:	74 0d                	je     c001c79d <IDE::detect()+0x257>
c001c790:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c798:	e9 da fd ff ff       	jmp    c001c577 <IDE::detect()+0x31>
c001c79d:	4e                   	dec    esi
c001c79e:	74 62                	je     c001c802 <IDE::detect()+0x2bc>
c001c7a0:	be 01 00 00 00       	mov    esi,0x1
c001c7a5:	e9 c5 fd ff ff       	jmp    c001c56f <IDE::detect()+0x29>
c001c7aa:	50                   	push   eax
c001c7ab:	6a 04                	push   0x4
c001c7ad:	56                   	push   esi
c001c7ae:	53                   	push   ebx
c001c7af:	e8 f0 f6 ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001c7b4:	83 c4 0c             	add    esp,0xc
c001c7b7:	6a 05                	push   0x5
c001c7b9:	56                   	push   esi
c001c7ba:	53                   	push   ebx
c001c7bb:	89 c5                	mov    ebp,eax
c001c7bd:	e8 e2 f6 ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001c7c2:	89 e9                	mov    ecx,ebp
c001c7c4:	83 c4 10             	add    esp,0x10
c001c7c7:	0f b6 e9             	movzx  ebp,cl
c001c7ca:	83 fd 14             	cmp    ebp,0x14
c001c7cd:	74 2d                	je     c001c7fc <IDE::detect()+0x2b6>
c001c7cf:	83 fd 69             	cmp    ebp,0x69
c001c7d2:	75 b5                	jne    c001c789 <IDE::detect()+0x243>
c001c7d4:	3c 96                	cmp    al,0x96
c001c7d6:	75 b1                	jne    c001c789 <IDE::detect()+0x243>
c001c7d8:	68 a1 00 00 00       	push   0xa1
c001c7dd:	6a 07                	push   0x7
c001c7df:	56                   	push   esi
c001c7e0:	53                   	push   ebx
c001c7e1:	e8 fe f5 ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c7e6:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c7ed:	e8 1e 9c ff ff       	call   c0016410 <milliTenthSleep(unsigned int)>
c001c7f2:	83 c4 10             	add    esp,0x10
c001c7f5:	b1 01                	mov    cl,0x1
c001c7f7:	e9 70 fe ff ff       	jmp    c001c66c <IDE::detect()+0x126>
c001c7fc:	3c eb                	cmp    al,0xeb
c001c7fe:	75 cf                	jne    c001c7cf <IDE::detect()+0x289>
c001c800:	eb d6                	jmp    c001c7d8 <IDE::detect()+0x292>
c001c802:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c808:	5b                   	pop    ebx
c001c809:	5e                   	pop    esi
c001c80a:	5f                   	pop    edi
c001c80b:	5d                   	pop    ebp
c001c80c:	c3                   	ret    
c001c80d:	90                   	nop

c001c80e <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c80e:	55                   	push   ebp
c001c80f:	57                   	push   edi
c001c810:	56                   	push   esi
c001c811:	53                   	push   ebx
c001c812:	83 ec 1c             	sub    esp,0x1c
c001c815:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c819:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c81d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c821:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c825:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c829:	88 c3                	mov    bl,al
c001c82b:	25 ff 00 00 00       	and    eax,0xff
c001c830:	0f 84 88 00 00 00    	je     c001c8be <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c836:	83 ec 0c             	sub    esp,0xc
c001c839:	89 c7                	mov    edi,eax
c001c83b:	68 cb 32 02 c0       	push   0xc00232cb
c001c840:	e8 c5 e0 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001c845:	83 c4 10             	add    esp,0x10
c001c848:	83 ff 01             	cmp    edi,0x1
c001c84b:	74 6b                	je     c001c8b8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c84d:	83 ff 02             	cmp    edi,0x2
c001c850:	75 58                	jne    c001c8aa <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c852:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c857:	50                   	push   eax
c001c858:	6a 01                	push   0x1
c001c85a:	01 ff                	add    edi,edi
c001c85c:	09 fe                	or     esi,edi
c001c85e:	89 f0                	mov    eax,esi
c001c860:	0f b6 f0             	movzx  esi,al
c001c863:	c1 e6 06             	shl    esi,0x6
c001c866:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c86e:	50                   	push   eax
c001c86f:	55                   	push   ebp
c001c870:	e8 2f f6 ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001c875:	83 c4 10             	add    esp,0x10
c001c878:	a8 01                	test   al,0x1
c001c87a:	74 02                	je     c001c87e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c87c:	b3 07                	mov    bl,0x7
c001c87e:	a8 02                	test   al,0x2
c001c880:	74 02                	je     c001c884 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c882:	b3 03                	mov    bl,0x3
c001c884:	a8 04                	test   al,0x4
c001c886:	74 02                	je     c001c88a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c888:	b3 14                	mov    bl,0x14
c001c88a:	a8 08                	test   al,0x8
c001c88c:	74 02                	je     c001c890 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c88e:	b3 03                	mov    bl,0x3
c001c890:	a8 10                	test   al,0x10
c001c892:	74 02                	je     c001c896 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c894:	b3 15                	mov    bl,0x15
c001c896:	a8 20                	test   al,0x20
c001c898:	74 02                	je     c001c89c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c89a:	b3 03                	mov    bl,0x3
c001c89c:	a8 40                	test   al,0x40
c001c89e:	74 02                	je     c001c8a2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c8a0:	b3 16                	mov    bl,0x16
c001c8a2:	a8 80                	test   al,0x80
c001c8a4:	74 18                	je     c001c8be <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c8a6:	b3 0d                	mov    bl,0xd
c001c8a8:	eb 14                	jmp    c001c8be <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c8aa:	83 ff 03             	cmp    edi,0x3
c001c8ad:	74 0d                	je     c001c8bc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c8af:	83 ff 04             	cmp    edi,0x4
c001c8b2:	75 0a                	jne    c001c8be <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c8b4:	b3 08                	mov    bl,0x8
c001c8b6:	eb 06                	jmp    c001c8be <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c8b8:	b3 13                	mov    bl,0x13
c001c8ba:	eb 02                	jmp    c001c8be <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c8bc:	b3 17                	mov    bl,0x17
c001c8be:	83 c4 1c             	add    esp,0x1c
c001c8c1:	88 d8                	mov    al,bl
c001c8c3:	5b                   	pop    ebx
c001c8c4:	5e                   	pop    esi
c001c8c5:	5f                   	pop    edi
c001c8c6:	5d                   	pop    ebp
c001c8c7:	c3                   	ret    

c001c8c8 <IDE::polling(unsigned char, unsigned int)>:
c001c8c8:	57                   	push   edi
c001c8c9:	56                   	push   esi
c001c8ca:	53                   	push   ebx
c001c8cb:	bb 04 00 00 00       	mov    ebx,0x4
c001c8d0:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c8d4:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c8d9:	52                   	push   edx
c001c8da:	6a 0c                	push   0xc
c001c8dc:	56                   	push   esi
c001c8dd:	57                   	push   edi
c001c8de:	e8 c1 f5 ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001c8e3:	83 c4 10             	add    esp,0x10
c001c8e6:	4b                   	dec    ebx
c001c8e7:	75 f0                	jne    c001c8d9 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c8e9:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c8ee:	50                   	push   eax
c001c8ef:	6a 0c                	push   0xc
c001c8f1:	56                   	push   esi
c001c8f2:	57                   	push   edi
c001c8f3:	e8 ac f5 ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001c8f8:	83 c4 10             	add    esp,0x10
c001c8fb:	a8 01                	test   al,0x1
c001c8fd:	75 17                	jne    c001c916 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c8ff:	a8 20                	test   al,0x20
c001c901:	75 0f                	jne    c001c912 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c903:	4b                   	dec    ebx
c001c904:	74 10                	je     c001c916 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c906:	a8 80                	test   al,0x80
c001c908:	75 e4                	jne    c001c8ee <IDE::polling(unsigned char, unsigned int)+0x26>
c001c90a:	a8 08                	test   al,0x8
c001c90c:	74 e0                	je     c001c8ee <IDE::polling(unsigned char, unsigned int)+0x26>
c001c90e:	31 c0                	xor    eax,eax
c001c910:	eb 06                	jmp    c001c918 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c912:	b0 01                	mov    al,0x1
c001c914:	eb 02                	jmp    c001c918 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c916:	b0 02                	mov    al,0x2
c001c918:	5b                   	pop    ebx
c001c919:	5e                   	pop    esi
c001c91a:	5f                   	pop    edi
c001c91b:	c3                   	ret    

c001c91c <SATABus::close(int, int, void*)>:
c001c91c:	31 c0                	xor    eax,eax
c001c91e:	c3                   	ret    
c001c91f:	90                   	nop

c001c920 <SATABus::detect()>:
c001c920:	c3                   	ret    
c001c921:	90                   	nop

c001c922 <SATABus::SATABus()>:
c001c922:	83 ec 0c             	sub    esp,0xc
c001c925:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c929:	83 ec 08             	sub    esp,0x8
c001c92c:	68 04 33 02 c0       	push   0xc0023304
c001c931:	50                   	push   eax
c001c932:	e8 51 04 ff ff       	call   c000cd88 <HardDiskController::HardDiskController(char const*)>
c001c937:	83 c4 10             	add    esp,0x10
c001c93a:	ba 30 33 02 c0       	mov    edx,0xc0023330
c001c93f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c943:	89 10                	mov    DWORD PTR [eax],edx
c001c945:	83 ec 0c             	sub    esp,0xc
c001c948:	6a 50                	push   0x50
c001c94a:	e8 62 b5 fe ff       	call   c0007eb1 <Phys::allocateContiguousPages(int)>
c001c94f:	83 c4 10             	add    esp,0x10
c001c952:	89 c2                	mov    edx,eax
c001c954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c958:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c95e:	83 ec 0c             	sub    esp,0xc
c001c961:	6a 50                	push   0x50
c001c963:	e8 8d cc fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001c968:	83 c4 10             	add    esp,0x10
c001c96b:	89 c2                	mov    edx,eax
c001c96d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c971:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c977:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c001c97c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c980:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c986:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c98a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c990:	83 ec 0c             	sub    esp,0xc
c001c993:	6a 03                	push   0x3
c001c995:	6a 50                	push   0x50
c001c997:	51                   	push   ecx
c001c998:	52                   	push   edx
c001c999:	50                   	push   eax
c001c99a:	e8 69 d5 fe ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c99f:	83 c4 20             	add    esp,0x20
c001c9a2:	90                   	nop
c001c9a3:	83 c4 0c             	add    esp,0xc
c001c9a6:	c3                   	ret    
c001c9a7:	90                   	nop

c001c9a8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c9a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c9ac:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c9af:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c9b2:	09 c2                	or     edx,eax
c001c9b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9b8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c9be:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c9c0:	31 c0                	xor    eax,eax
c001c9c2:	c1 e9 08             	shr    ecx,0x8
c001c9c5:	83 e1 0f             	and    ecx,0xf
c001c9c8:	39 c8                	cmp    eax,ecx
c001c9ca:	74 0a                	je     c001c9d6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001c9cc:	f6 c2 01             	test   dl,0x1
c001c9cf:	74 08                	je     c001c9d9 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001c9d1:	d1 ea                	shr    edx,1
c001c9d3:	40                   	inc    eax
c001c9d4:	eb f2                	jmp    c001c9c8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001c9d6:	83 c8 ff             	or     eax,0xffffffff
c001c9d9:	c3                   	ret    

c001c9da <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001c9da:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c9de:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001c9e1:	89 c2                	mov    edx,eax
c001c9e3:	c1 ea 08             	shr    edx,0x8
c001c9e6:	83 e2 0f             	and    edx,0xf
c001c9e9:	4a                   	dec    edx
c001c9ea:	75 32                	jne    c001ca1e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c9ec:	83 e0 0f             	and    eax,0xf
c001c9ef:	83 f8 03             	cmp    eax,0x3
c001c9f2:	75 2a                	jne    c001ca1e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c9f4:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001c9f7:	b8 02 00 00 00       	mov    eax,0x2
c001c9fc:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001ca02:	74 1c                	je     c001ca20 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001ca04:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001ca0a:	b8 04 00 00 00       	mov    eax,0x4
c001ca0f:	74 0f                	je     c001ca20 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001ca11:	31 c0                	xor    eax,eax
c001ca13:	83 fa 03             	cmp    edx,0x3
c001ca16:	0f 94 c0             	sete   al
c001ca19:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001ca1d:	c3                   	ret    
c001ca1e:	31 c0                	xor    eax,eax
c001ca20:	c3                   	ret    
c001ca21:	90                   	nop

c001ca22 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001ca22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca26:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca29:	0f ba e2 0f          	bt     edx,0xf
c001ca2d:	72 f7                	jb     c001ca26 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001ca2f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca32:	83 ca 10             	or     edx,0x10
c001ca35:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ca38:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca3b:	83 ca 01             	or     edx,0x1
c001ca3e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ca41:	c3                   	ret    

c001ca42 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001ca42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca46:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca49:	83 e2 fe             	and    edx,0xfffffffe
c001ca4c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ca4f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca52:	83 e2 ef             	and    edx,0xffffffef
c001ca55:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ca58:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca5b:	0f ba e2 0e          	bt     edx,0xe
c001ca5f:	72 f7                	jb     c001ca58 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001ca61:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca64:	0f ba e2 0f          	bt     edx,0xf
c001ca68:	72 ee                	jb     c001ca58 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001ca6a:	c3                   	ret    
c001ca6b:	90                   	nop

c001ca6c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001ca6c:	55                   	push   ebp
c001ca6d:	57                   	push   edi
c001ca6e:	56                   	push   esi
c001ca6f:	53                   	push   ebx
c001ca70:	83 ec 1c             	sub    esp,0x1c
c001ca73:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ca77:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ca7b:	53                   	push   ebx
c001ca7c:	57                   	push   edi
c001ca7d:	e8 c0 ff ff ff       	call   c001ca42 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001ca82:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001ca86:	83 ec 0c             	sub    esp,0xc
c001ca89:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001ca8f:	c1 e5 0a             	shl    ebp,0xa
c001ca92:	01 e8                	add    eax,ebp
c001ca94:	89 03                	mov    DWORD PTR [ebx],eax
c001ca96:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ca98:	68 00 04 00 00       	push   0x400
c001ca9d:	6a 00                	push   0x0
c001ca9f:	50                   	push   eax
c001caa0:	e8 4b 3a fe ff       	call   c00004f0 <memset>
c001caa5:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001caab:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001caaf:	83 c4 1c             	add    esp,0x1c
c001cab2:	01 e8                	add    eax,ebp
c001cab4:	89 03                	mov    DWORD PTR [ebx],eax
c001cab6:	c1 e6 08             	shl    esi,0x8
c001cab9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cac0:	81 c6 00 80 00 00    	add    esi,0x8000
c001cac6:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001cacc:	01 f0                	add    eax,esi
c001cace:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001cad1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001cad4:	68 00 01 00 00       	push   0x100
c001cad9:	6a 00                	push   0x0
c001cadb:	50                   	push   eax
c001cadc:	e8 0f 3a fe ff       	call   c00004f0 <memset>
c001cae1:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001cae7:	31 d2                	xor    edx,edx
c001cae9:	01 f0                	add    eax,esi
c001caeb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001caee:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001caf5:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001cafb:	01 ee                	add    esi,ebp
c001cafd:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001cb01:	83 c4 10             	add    esp,0x10
c001cb04:	c1 e5 0d             	shl    ebp,0xd
c001cb07:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001cb0d:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001cb13:	83 c6 20             	add    esi,0x20
c001cb16:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001cb1a:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001cb20:	01 e8                	add    eax,ebp
c001cb22:	01 d0                	add    eax,edx
c001cb24:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001cb27:	52                   	push   edx
c001cb28:	68 00 01 00 00       	push   0x100
c001cb2d:	6a 00                	push   0x0
c001cb2f:	50                   	push   eax
c001cb30:	e8 bb 39 fe ff       	call   c00004f0 <memset>
c001cb35:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001cb3b:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001cb42:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cb46:	83 c4 10             	add    esp,0x10
c001cb49:	01 e8                	add    eax,ebp
c001cb4b:	01 d0                	add    eax,edx
c001cb4d:	81 c2 00 01 00 00    	add    edx,0x100
c001cb53:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001cb56:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001cb5c:	75 af                	jne    c001cb0d <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001cb5e:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001cb65:	50                   	push   eax
c001cb66:	50                   	push   eax
c001cb67:	53                   	push   ebx
c001cb68:	57                   	push   edi
c001cb69:	e8 b4 fe ff ff       	call   c001ca22 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001cb6e:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001cb75:	83 c4 2c             	add    esp,0x2c
c001cb78:	5b                   	pop    ebx
c001cb79:	5e                   	pop    esi
c001cb7a:	5f                   	pop    edi
c001cb7b:	5d                   	pop    ebp
c001cb7c:	c3                   	ret    
c001cb7d:	90                   	nop

c001cb7e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001cb7e:	55                   	push   ebp
c001cb7f:	57                   	push   edi
c001cb80:	56                   	push   esi
c001cb81:	53                   	push   ebx
c001cb82:	31 db                	xor    ebx,ebx
c001cb84:	83 ec 0c             	sub    esp,0xc
c001cb87:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cb8b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001cb8f:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001cb92:	f7 c7 01 00 00 00    	test   edi,0x1
c001cb98:	74 7a                	je     c001cc14 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cb9a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cb9e:	89 d8                	mov    eax,ebx
c001cba0:	c1 e0 07             	shl    eax,0x7
c001cba3:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001cbaa:	55                   	push   ebp
c001cbab:	56                   	push   esi
c001cbac:	e8 29 fe ff ff       	call   c001c9da <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001cbb1:	5a                   	pop    edx
c001cbb2:	59                   	pop    ecx
c001cbb3:	83 f8 01             	cmp    eax,0x1
c001cbb6:	75 21                	jne    c001cbd9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001cbb8:	50                   	push   eax
c001cbb9:	53                   	push   ebx
c001cbba:	55                   	push   ebp
c001cbbb:	56                   	push   esi
c001cbbc:	e8 ab fe ff ff       	call   c001ca6c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cbc1:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001cbc8:	e8 06 af fe ff       	call   c0007ad3 <malloc>
c001cbcd:	89 04 24             	mov    DWORD PTR [esp],eax
c001cbd0:	89 c5                	mov    ebp,eax
c001cbd2:	e8 c1 10 00 00       	call   c001dc98 <SATA::SATA()>
c001cbd7:	eb 24                	jmp    c001cbfd <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001cbd9:	83 f8 04             	cmp    eax,0x4
c001cbdc:	75 36                	jne    c001cc14 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cbde:	51                   	push   ecx
c001cbdf:	53                   	push   ebx
c001cbe0:	55                   	push   ebp
c001cbe1:	56                   	push   esi
c001cbe2:	e8 85 fe ff ff       	call   c001ca6c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cbe7:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001cbee:	e8 e0 ae fe ff       	call   c0007ad3 <malloc>
c001cbf3:	89 04 24             	mov    DWORD PTR [esp],eax
c001cbf6:	89 c5                	mov    ebp,eax
c001cbf8:	e8 f5 17 00 00       	call   c001e3f2 <SATAPI::SATAPI()>
c001cbfd:	58                   	pop    eax
c001cbfe:	5a                   	pop    edx
c001cbff:	55                   	push   ebp
c001cc00:	56                   	push   esi
c001cc01:	e8 3e fe fe ff       	call   c000ca44 <Device::addChild(Device*)>
c001cc06:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001cc09:	56                   	push   esi
c001cc0a:	6a 00                	push   0x0
c001cc0c:	53                   	push   ebx
c001cc0d:	55                   	push   ebp
c001cc0e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001cc11:	83 c4 20             	add    esp,0x20
c001cc14:	d1 ef                	shr    edi,1
c001cc16:	43                   	inc    ebx
c001cc17:	83 fb 20             	cmp    ebx,0x20
c001cc1a:	0f 85 72 ff ff ff    	jne    c001cb92 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001cc20:	83 c4 0c             	add    esp,0xc
c001cc23:	5b                   	pop    ebx
c001cc24:	5e                   	pop    esi
c001cc25:	5f                   	pop    edi
c001cc26:	5d                   	pop    ebp
c001cc27:	c3                   	ret    

c001cc28 <SATABus::open(int, int, void*)>:
c001cc28:	83 ec 14             	sub    esp,0x14
c001cc2b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc2f:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001cc35:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001cc3b:	52                   	push   edx
c001cc3c:	50                   	push   eax
c001cc3d:	e8 3c ff ff ff       	call   c001cb7e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001cc42:	31 c0                	xor    eax,eax
c001cc44:	83 c4 1c             	add    esp,0x1c
c001cc47:	c3                   	ret    

c001cc48 <ATA::close(int, int, void*)>:
c001cc48:	83 ec 0c             	sub    esp,0xc
c001cc4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc4f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cc55:	85 c0                	test   eax,eax
c001cc57:	74 0c                	je     c001cc65 <ATA::close(int, int, void*)+0x1d>
c001cc59:	8b 10                	mov    edx,DWORD PTR [eax]
c001cc5b:	83 ec 0c             	sub    esp,0xc
c001cc5e:	50                   	push   eax
c001cc5f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cc62:	83 c4 10             	add    esp,0x10
c001cc65:	31 c0                	xor    eax,eax
c001cc67:	83 c4 0c             	add    esp,0xc
c001cc6a:	c3                   	ret    
c001cc6b:	90                   	nop

c001cc6c <ATA::powerSaving(PowerSavingLevel)>:
c001cc6c:	c3                   	ret    
c001cc6d:	90                   	nop

c001cc6e <ATA::ATA()>:
c001cc6e:	83 ec 0c             	sub    esp,0xc
c001cc71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc75:	83 ec 04             	sub    esp,0x4
c001cc78:	68 00 02 00 00       	push   0x200
c001cc7d:	68 fd 33 02 c0       	push   0xc00233fd
c001cc82:	50                   	push   eax
c001cc83:	e8 8a 01 ff ff       	call   c000ce12 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cc88:	83 c4 10             	add    esp,0x10
c001cc8b:	ba 70 33 02 c0       	mov    edx,0xc0023370
c001cc90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc94:	89 10                	mov    DWORD PTR [eax],edx
c001cc96:	90                   	nop
c001cc97:	83 c4 0c             	add    esp,0xc
c001cc9a:	c3                   	ret    
c001cc9b:	90                   	nop

c001cc9c <ATA::flush(bool)>:
c001cc9c:	53                   	push   ebx
c001cc9d:	83 ec 08             	sub    esp,0x8
c001cca0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001cca5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cca9:	83 f8 01             	cmp    eax,0x1
c001ccac:	19 c0                	sbb    eax,eax
c001ccae:	83 e0 fd             	and    eax,0xfffffffd
c001ccb1:	05 ea 00 00 00       	add    eax,0xea
c001ccb6:	50                   	push   eax
c001ccb7:	6a 07                	push   0x7
c001ccb9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ccc0:	50                   	push   eax
c001ccc1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ccc7:	e8 18 f1 ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cccc:	83 c4 0c             	add    esp,0xc
c001cccf:	6a 00                	push   0x0
c001ccd1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ccd8:	50                   	push   eax
c001ccd9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ccdf:	e8 e4 fb ff ff       	call   c001c8c8 <IDE::polling(unsigned char, unsigned int)>
c001cce4:	83 c4 18             	add    esp,0x18
c001cce7:	5b                   	pop    ebx
c001cce8:	c3                   	ret    
c001cce9:	90                   	nop

c001ccea <ATA::readyForCommand()>:
c001ccea:	56                   	push   esi
c001cceb:	53                   	push   ebx
c001ccec:	53                   	push   ebx
c001cced:	31 db                	xor    ebx,ebx
c001ccef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ccf3:	51                   	push   ecx
c001ccf4:	6a 0c                	push   0xc
c001ccf6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001ccfd:	50                   	push   eax
c001ccfe:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001cd04:	e8 9b f1 ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001cd09:	83 c4 10             	add    esp,0x10
c001cd0c:	a8 88                	test   al,0x88
c001cd0e:	74 1f                	je     c001cd2f <ATA::readyForCommand()+0x45>
c001cd10:	43                   	inc    ebx
c001cd11:	83 fb 63             	cmp    ebx,0x63
c001cd14:	7e dd                	jle    c001ccf3 <ATA::readyForCommand()+0x9>
c001cd16:	83 ec 0c             	sub    esp,0xc
c001cd19:	6a 0a                	push   0xa
c001cd1b:	e8 f0 96 ff ff       	call   c0016410 <milliTenthSleep(unsigned int)>
c001cd20:	83 c4 10             	add    esp,0x10
c001cd23:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001cd29:	75 c8                	jne    c001ccf3 <ATA::readyForCommand()+0x9>
c001cd2b:	31 c0                	xor    eax,eax
c001cd2d:	eb 02                	jmp    c001cd31 <ATA::readyForCommand()+0x47>
c001cd2f:	b0 01                	mov    al,0x1
c001cd31:	5a                   	pop    edx
c001cd32:	5b                   	pop    ebx
c001cd33:	5e                   	pop    esi
c001cd34:	c3                   	ret    
c001cd35:	90                   	nop

c001cd36 <ATA::access(unsigned long long, int, void*, bool)>:
c001cd36:	55                   	push   ebp
c001cd37:	57                   	push   edi
c001cd38:	56                   	push   esi
c001cd39:	53                   	push   ebx
c001cd3a:	83 ec 2c             	sub    esp,0x2c
c001cd3d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001cd41:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001cd45:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001cd49:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001cd4d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cd51:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001cd55:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001cd59:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001cd5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cd63:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cd69:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cd6d:	c1 e0 06             	shl    eax,0x6
c001cd70:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001cd78:	74 5b                	je     c001cdd5 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001cd7a:	89 fa                	mov    edx,edi
c001cd7c:	89 f0                	mov    eax,esi
c001cd7e:	c1 ea 1c             	shr    edx,0x1c
c001cd81:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001cd85:	89 d1                	mov    ecx,edx
c001cd87:	09 c1                	or     ecx,eax
c001cd89:	74 25                	je     c001cdb0 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001cd8b:	31 ed                	xor    ebp,ebp
c001cd8d:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001cd94:	89 fa                	mov    edx,edi
c001cd96:	89 f0                	mov    eax,esi
c001cd98:	0f ad d0             	shrd   eax,edx,cl
c001cd9b:	d3 ea                	shr    edx,cl
c001cd9d:	f6 c1 20             	test   cl,0x20
c001cda0:	74 02                	je     c001cda4 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001cda2:	89 d0                	mov    eax,edx
c001cda4:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001cda8:	45                   	inc    ebp
c001cda9:	83 fd 06             	cmp    ebp,0x6
c001cdac:	75 df                	jne    c001cd8d <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001cdae:	eb 71                	jmp    c001ce21 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001cdb0:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001cdb5:	89 f0                	mov    eax,esi
c001cdb7:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001cdbe:	0f ac f8 10          	shrd   eax,edi,0x10
c001cdc2:	bf 01 00 00 00       	mov    edi,0x1
c001cdc7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001cdcb:	c1 ee 18             	shr    esi,0x18
c001cdce:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001cdd3:	eb 53                	jmp    c001ce28 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001cdd5:	6a 00                	push   0x0
c001cdd7:	6a 3f                	push   0x3f
c001cdd9:	57                   	push   edi
c001cdda:	56                   	push   esi
c001cddb:	e8 d0 2a 00 00       	call   c001f8b0 <__umoddi3>
c001cde0:	83 c4 10             	add    esp,0x10
c001cde3:	40                   	inc    eax
c001cde4:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001cde8:	6a 00                	push   0x0
c001cdea:	68 f0 03 00 00       	push   0x3f0
c001cdef:	57                   	push   edi
c001cdf0:	56                   	push   esi
c001cdf1:	e8 ba 29 00 00       	call   c001f7b0 <__udivdi3>
c001cdf6:	83 c4 10             	add    esp,0x10
c001cdf9:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001cdfe:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001ce05:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ce0a:	6a 00                	push   0x0
c001ce0c:	6a 3f                	push   0x3f
c001ce0e:	57                   	push   edi
c001ce0f:	31 ff                	xor    edi,edi
c001ce11:	56                   	push   esi
c001ce12:	e8 99 29 00 00       	call   c001f7b0 <__udivdi3>
c001ce17:	83 c4 10             	add    esp,0x10
c001ce1a:	83 e0 0f             	and    eax,0xf
c001ce1d:	89 c6                	mov    esi,eax
c001ce1f:	eb 07                	jmp    c001ce28 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001ce21:	31 f6                	xor    esi,esi
c001ce23:	bf 02 00 00 00       	mov    edi,0x2
c001ce28:	50                   	push   eax
c001ce29:	6a 00                	push   0x0
c001ce2b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce32:	50                   	push   eax
c001ce33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ce37:	e8 b6 f1 ff ff       	call   c001bff2 <IDE::enableIRQs(unsigned char, bool)>
c001ce3c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ce3f:	e8 a6 fe ff ff       	call   c001ccea <ATA::readyForCommand()>
c001ce44:	83 c4 10             	add    esp,0x10
c001ce47:	84 c0                	test   al,al
c001ce49:	75 0a                	jne    c001ce55 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001ce4b:	be 01 00 00 00       	mov    esi,0x1
c001ce50:	e9 9b 02 00 00       	jmp    c001d0f0 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001ce55:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ce5b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ce61:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001ce68:	c1 e0 04             	shl    eax,0x4
c001ce6b:	09 c6                	or     esi,eax
c001ce6d:	f7 c7 03 00 00 00    	test   edi,0x3
c001ce73:	75 05                	jne    c001ce7a <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001ce75:	83 ce a0             	or     esi,0xffffffa0
c001ce78:	eb 03                	jmp    c001ce7d <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001ce7a:	83 ce e0             	or     esi,0xffffffe0
c001ce7d:	89 f0                	mov    eax,esi
c001ce7f:	0f b6 f0             	movzx  esi,al
c001ce82:	56                   	push   esi
c001ce83:	6a 06                	push   0x6
c001ce85:	51                   	push   ecx
c001ce86:	52                   	push   edx
c001ce87:	e8 58 ef ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce8c:	83 c4 10             	add    esp,0x10
c001ce8f:	6a 00                	push   0x0
c001ce91:	6a 01                	push   0x1
c001ce93:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce9a:	50                   	push   eax
c001ce9b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cea1:	e8 3e ef ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cea6:	89 f8                	mov    eax,edi
c001cea8:	83 c4 10             	add    esp,0x10
c001ceab:	0f b6 f0             	movzx  esi,al
c001ceae:	83 fe 02             	cmp    esi,0x2
c001ceb1:	75 6e                	jne    c001cf21 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001ceb3:	6a 00                	push   0x0
c001ceb5:	6a 08                	push   0x8
c001ceb7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cebe:	50                   	push   eax
c001cebf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cec5:	e8 1a ef ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ceca:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001cecf:	50                   	push   eax
c001ced0:	6a 09                	push   0x9
c001ced2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ced9:	50                   	push   eax
c001ceda:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cee0:	e8 ff ee ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cee5:	83 c4 20             	add    esp,0x20
c001cee8:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001ceed:	50                   	push   eax
c001ceee:	6a 0a                	push   0xa
c001cef0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cef7:	50                   	push   eax
c001cef8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cefe:	e8 e1 ee ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf03:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001cf08:	50                   	push   eax
c001cf09:	6a 0b                	push   0xb
c001cf0b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf12:	50                   	push   eax
c001cf13:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf19:	e8 c6 ee ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf1e:	83 c4 20             	add    esp,0x20
c001cf21:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001cf26:	50                   	push   eax
c001cf27:	6a 02                	push   0x2
c001cf29:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf30:	50                   	push   eax
c001cf31:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf37:	e8 a8 ee ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf3c:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001cf41:	50                   	push   eax
c001cf42:	6a 03                	push   0x3
c001cf44:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf4b:	50                   	push   eax
c001cf4c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf52:	e8 8d ee ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf57:	83 c4 20             	add    esp,0x20
c001cf5a:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001cf5f:	50                   	push   eax
c001cf60:	6a 04                	push   0x4
c001cf62:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf69:	50                   	push   eax
c001cf6a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf70:	e8 6f ee ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf75:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cf7a:	50                   	push   eax
c001cf7b:	6a 05                	push   0x5
c001cf7d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf84:	50                   	push   eax
c001cf85:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf8b:	e8 54 ee ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf90:	83 c4 20             	add    esp,0x20
c001cf93:	83 fe 02             	cmp    esi,0x2
c001cf96:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001cf9b:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001cfa0:	85 c9                	test   ecx,ecx
c001cfa2:	74 07                	je     c001cfab <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001cfa4:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cfa9:	75 47                	jne    c001cff2 <ATA::access(unsigned long long, int, void*, bool)+0x2bc>
c001cfab:	89 f8                	mov    eax,edi
c001cfad:	0f b6 f8             	movzx  edi,al
c001cfb0:	31 c0                	xor    eax,eax
c001cfb2:	83 ff 02             	cmp    edi,0x2
c001cfb5:	0f 95 c0             	setne  al
c001cfb8:	89 c6                	mov    esi,eax
c001cfba:	74 0c                	je     c001cfc8 <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001cfbc:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cfc1:	b8 30 00 00 00       	mov    eax,0x30
c001cfc6:	75 2f                	jne    c001cff7 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001cfc8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cfcc:	83 f2 01             	xor    edx,0x1
c001cfcf:	85 c9                	test   ecx,ecx
c001cfd1:	74 09                	je     c001cfdc <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001cfd3:	84 d2                	test   dl,dl
c001cfd5:	b8 24 00 00 00       	mov    eax,0x24
c001cfda:	75 1b                	jne    c001cff7 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001cfdc:	85 f6                	test   esi,esi
c001cfde:	0f 84 67 fe ff ff    	je     c001ce4b <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001cfe4:	84 d2                	test   dl,dl
c001cfe6:	b8 20 00 00 00       	mov    eax,0x20
c001cfeb:	75 0a                	jne    c001cff7 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001cfed:	e9 59 fe ff ff       	jmp    c001ce4b <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001cff2:	b8 34 00 00 00       	mov    eax,0x34
c001cff7:	50                   	push   eax
c001cff8:	6a 07                	push   0x7
c001cffa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d001:	50                   	push   eax
c001d002:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d008:	e8 d7 ed ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d00d:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001d011:	83 c4 10             	add    esp,0x10
c001d014:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001d019:	85 f6                	test   esi,esi
c001d01b:	0f 84 b5 00 00 00    	je     c001d0d6 <ATA::access(unsigned long long, int, void*, bool)+0x3a0>
c001d021:	50                   	push   eax
c001d022:	6a 01                	push   0x1
c001d024:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d02b:	50                   	push   eax
c001d02c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d032:	e8 91 f8 ff ff       	call   c001c8c8 <IDE::polling(unsigned char, unsigned int)>
c001d037:	83 c4 10             	add    esp,0x10
c001d03a:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d040:	0f b6 c0             	movzx  eax,al
c001d043:	85 c0                	test   eax,eax
c001d045:	74 1f                	je     c001d066 <ATA::access(unsigned long long, int, void*, bool)+0x330>
c001d047:	50                   	push   eax
c001d048:	89 c6                	mov    esi,eax
c001d04a:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001d051:	0f b6 d2             	movzx  edx,dl
c001d054:	50                   	push   eax
c001d055:	52                   	push   edx
c001d056:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d05c:	e8 ad f7 ff ff       	call   c001c80e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d061:	e9 87 00 00 00       	jmp    c001d0ed <ATA::access(unsigned long long, int, void*, bool)+0x3b7>
c001d066:	85 ed                	test   ebp,ebp
c001d068:	74 3b                	je     c001d0a5 <ATA::access(unsigned long long, int, void*, bool)+0x36f>
c001d06a:	31 ff                	xor    edi,edi
c001d06c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d070:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001d074:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001d079:	50                   	push   eax
c001d07a:	50                   	push   eax
c001d07b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d082:	50                   	push   eax
c001d083:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d089:	e8 44 ed ff ff       	call   c001bdd2 <IDE::getBase(unsigned char)>
c001d08e:	89 c2                	mov    edx,eax
c001d090:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001d095:	66 ef                	out    dx,ax
c001d097:	47                   	inc    edi
c001d098:	83 c4 10             	add    esp,0x10
c001d09b:	81 ff 00 01 00 00    	cmp    edi,0x100
c001d0a1:	75 c9                	jne    c001d06c <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001d0a3:	eb 23                	jmp    c001d0c8 <ATA::access(unsigned long long, int, void*, bool)+0x392>
c001d0a5:	51                   	push   ecx
c001d0a6:	0f b6 d2             	movzx  edx,dl
c001d0a9:	51                   	push   ecx
c001d0aa:	52                   	push   edx
c001d0ab:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d0b1:	e8 1c ed ff ff       	call   c001bdd2 <IDE::getBase(unsigned char)>
c001d0b6:	b9 00 01 00 00       	mov    ecx,0x100
c001d0bb:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001d0bf:	89 c2                	mov    edx,eax
c001d0c1:	fc                   	cld    
c001d0c2:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001d0c5:	83 c4 10             	add    esp,0x10
c001d0c8:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001d0d0:	4e                   	dec    esi
c001d0d1:	e9 43 ff ff ff       	jmp    c001d019 <ATA::access(unsigned long long, int, void*, bool)+0x2e3>
c001d0d6:	31 f6                	xor    esi,esi
c001d0d8:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d0dd:	74 11                	je     c001d0f0 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001d0df:	50                   	push   eax
c001d0e0:	50                   	push   eax
c001d0e1:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001d0e6:	50                   	push   eax
c001d0e7:	53                   	push   ebx
c001d0e8:	e8 af fb ff ff       	call   c001cc9c <ATA::flush(bool)>
c001d0ed:	83 c4 10             	add    esp,0x10
c001d0f0:	83 c4 2c             	add    esp,0x2c
c001d0f3:	89 f0                	mov    eax,esi
c001d0f5:	5b                   	pop    ebx
c001d0f6:	5e                   	pop    esi
c001d0f7:	5f                   	pop    edi
c001d0f8:	5d                   	pop    ebp
c001d0f9:	c3                   	ret    

c001d0fa <ATA::detectCHS()>:
c001d0fa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d0fe:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001d104:	c1 e0 06             	shl    eax,0x6
c001d107:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001d10d:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001d117:	c7 44 24 04 54 33 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023354
c001d11f:	e9 e7 44 ff ff       	jmp    c001160b <KePanic(char const*)>

c001d124 <ATA::open(int, int, void*)>:
c001d124:	53                   	push   ebx
c001d125:	83 ec 08             	sub    esp,0x8
c001d128:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d12c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d130:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d134:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d13a:	c1 e0 06             	shl    eax,0x6
c001d13d:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d143:	01 d0                	add    eax,edx
c001d145:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001d14c:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001d152:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001d159:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d163:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d16a:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001d170:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001d177:	75 0c                	jne    c001d185 <ATA::open(int, int, void*)+0x61>
c001d179:	83 ec 0c             	sub    esp,0xc
c001d17c:	53                   	push   ebx
c001d17d:	e8 78 ff ff ff       	call   c001d0fa <ATA::detectCHS()>
c001d182:	83 c4 10             	add    esp,0x10
c001d185:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d18b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d191:	c1 e0 06             	shl    eax,0x6
c001d194:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001d19b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d1a5:	d1 e8                	shr    eax,1
c001d1a7:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d1ad:	6a 04                	push   0x4
c001d1af:	6a 0c                	push   0xc
c001d1b1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d1b8:	50                   	push   eax
c001d1b9:	52                   	push   edx
c001d1ba:	e8 25 ec ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d1bf:	90                   	nop
c001d1c0:	90                   	nop
c001d1c1:	6a 00                	push   0x0
c001d1c3:	6a 0c                	push   0xc
c001d1c5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d1cc:	50                   	push   eax
c001d1cd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d1d3:	e8 0c ec ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d1d8:	83 c4 14             	add    esp,0x14
c001d1db:	53                   	push   ebx
c001d1dc:	e8 99 fc fe ff       	call   c000ce7a <PhysicalDisk::startCache()>
c001d1e1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d1e4:	e8 dd 0e ff ff       	call   c000e0c6 <createPartitionsForDisk(PhysicalDisk*)>
c001d1e9:	83 c4 18             	add    esp,0x18
c001d1ec:	31 c0                	xor    eax,eax
c001d1ee:	5b                   	pop    ebx
c001d1ef:	c3                   	ret    

c001d1f0 <combineCharAndColour(char, unsigned char)>:
c001d1f0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d1f5:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001d1fb:	c1 e0 08             	shl    eax,0x8
c001d1fe:	09 d0                	or     eax,edx
c001d200:	c3                   	ret    

c001d201 <combineColours(unsigned char, unsigned char)>:
c001d201:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d206:	c1 e0 04             	shl    eax,0x4
c001d209:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001d20d:	c3                   	ret    

c001d20e <ATA::read(unsigned long long, int, void*)>:
c001d20e:	55                   	push   ebp
c001d20f:	57                   	push   edi
c001d210:	56                   	push   esi
c001d211:	be 04 00 00 00       	mov    esi,0x4
c001d216:	53                   	push   ebx
c001d217:	83 ec 0c             	sub    esp,0xc
c001d21a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d21e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d222:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d226:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d22a:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d22d:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d233:	0f 87 a1 01 00 00    	ja     c001d3da <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d239:	85 c9                	test   ecx,ecx
c001d23b:	be 06 00 00 00       	mov    esi,0x6
c001d240:	0f 84 94 01 00 00    	je     c001d3da <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d246:	55                   	push   ebp
c001d247:	55                   	push   ebp
c001d248:	6a 00                	push   0x0
c001d24a:	51                   	push   ecx
c001d24b:	53                   	push   ebx
c001d24c:	52                   	push   edx
c001d24d:	50                   	push   eax
c001d24e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d252:	e8 df fa ff ff       	call   c001cd36 <ATA::access(unsigned long long, int, void*, bool)>
c001d257:	83 c4 20             	add    esp,0x20
c001d25a:	85 c0                	test   eax,eax
c001d25c:	89 c6                	mov    esi,eax
c001d25e:	0f 85 71 01 00 00    	jne    c001d3d5 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001d264:	50                   	push   eax
c001d265:	bd 10 27 00 00       	mov    ebp,0x2710
c001d26a:	50                   	push   eax
c001d26b:	03 1d b4 d0 02 c0    	add    ebx,DWORD PTR ds:0xc002d0b4
c001d271:	6a 0f                	push   0xf
c001d273:	6a 00                	push   0x0
c001d275:	89 da                	mov    edx,ebx
c001d277:	89 1d b4 d0 02 c0    	mov    DWORD PTR ds:0xc002d0b4,ebx
c001d27d:	e8 7f ff ff ff       	call   c001d201 <combineColours(unsigned char, unsigned char)>
c001d282:	59                   	pop    ecx
c001d283:	b9 0a 00 00 00       	mov    ecx,0xa
c001d288:	5b                   	pop    ebx
c001d289:	0f b6 d8             	movzx  ebx,al
c001d28c:	89 d0                	mov    eax,edx
c001d28e:	53                   	push   ebx
c001d28f:	99                   	cdq    
c001d290:	f7 fd                	idiv   ebp
c001d292:	99                   	cdq    
c001d293:	f7 f9                	idiv   ecx
c001d295:	83 c2 30             	add    edx,0x30
c001d298:	0f b6 d2             	movzx  edx,dl
c001d29b:	52                   	push   edx
c001d29c:	e8 4f ff ff ff       	call   c001d1f0 <combineCharAndColour(char, unsigned char)>
c001d2a1:	5f                   	pop    edi
c001d2a2:	bf e8 03 00 00       	mov    edi,0x3e8
c001d2a7:	5a                   	pop    edx
c001d2a8:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d2ae:	53                   	push   ebx
c001d2af:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d2b4:	99                   	cdq    
c001d2b5:	f7 ff                	idiv   edi
c001d2b7:	99                   	cdq    
c001d2b8:	f7 f9                	idiv   ecx
c001d2ba:	8d 42 30             	lea    eax,[edx+0x30]
c001d2bd:	0f b6 c0             	movzx  eax,al
c001d2c0:	50                   	push   eax
c001d2c1:	e8 2a ff ff ff       	call   c001d1f0 <combineCharAndColour(char, unsigned char)>
c001d2c6:	5f                   	pop    edi
c001d2c7:	bf 64 00 00 00       	mov    edi,0x64
c001d2cc:	5a                   	pop    edx
c001d2cd:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d2d3:	53                   	push   ebx
c001d2d4:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d2d9:	99                   	cdq    
c001d2da:	f7 ff                	idiv   edi
c001d2dc:	99                   	cdq    
c001d2dd:	f7 f9                	idiv   ecx
c001d2df:	8d 42 30             	lea    eax,[edx+0x30]
c001d2e2:	0f b6 c0             	movzx  eax,al
c001d2e5:	50                   	push   eax
c001d2e6:	e8 05 ff ff ff       	call   c001d1f0 <combineCharAndColour(char, unsigned char)>
c001d2eb:	5a                   	pop    edx
c001d2ec:	5a                   	pop    edx
c001d2ed:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d2f3:	53                   	push   ebx
c001d2f4:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d2f9:	99                   	cdq    
c001d2fa:	f7 f9                	idiv   ecx
c001d2fc:	99                   	cdq    
c001d2fd:	f7 f9                	idiv   ecx
c001d2ff:	8d 42 30             	lea    eax,[edx+0x30]
c001d302:	0f b6 c0             	movzx  eax,al
c001d305:	50                   	push   eax
c001d306:	e8 e5 fe ff ff       	call   c001d1f0 <combineCharAndColour(char, unsigned char)>
c001d30b:	5a                   	pop    edx
c001d30c:	5a                   	pop    edx
c001d30d:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d313:	53                   	push   ebx
c001d314:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d319:	99                   	cdq    
c001d31a:	f7 f9                	idiv   ecx
c001d31c:	83 c2 30             	add    edx,0x30
c001d31f:	0f b6 d2             	movzx  edx,dl
c001d322:	52                   	push   edx
c001d323:	e8 c8 fe ff ff       	call   c001d1f0 <combineCharAndColour(char, unsigned char)>
c001d328:	5a                   	pop    edx
c001d329:	5a                   	pop    edx
c001d32a:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d330:	53                   	push   ebx
c001d331:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d336:	99                   	cdq    
c001d337:	f7 fd                	idiv   ebp
c001d339:	99                   	cdq    
c001d33a:	f7 f9                	idiv   ecx
c001d33c:	8d 42 30             	lea    eax,[edx+0x30]
c001d33f:	0f b6 c0             	movzx  eax,al
c001d342:	50                   	push   eax
c001d343:	e8 a8 fe ff ff       	call   c001d1f0 <combineCharAndColour(char, unsigned char)>
c001d348:	5d                   	pop    ebp
c001d349:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d34e:	5a                   	pop    edx
c001d34f:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d355:	53                   	push   ebx
c001d356:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d35b:	99                   	cdq    
c001d35c:	f7 fd                	idiv   ebp
c001d35e:	99                   	cdq    
c001d35f:	f7 f9                	idiv   ecx
c001d361:	8d 42 30             	lea    eax,[edx+0x30]
c001d364:	0f b6 c0             	movzx  eax,al
c001d367:	50                   	push   eax
c001d368:	e8 83 fe ff ff       	call   c001d1f0 <combineCharAndColour(char, unsigned char)>
c001d36d:	5d                   	pop    ebp
c001d36e:	5a                   	pop    edx
c001d36f:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d375:	53                   	push   ebx
c001d376:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d37b:	99                   	cdq    
c001d37c:	f7 ff                	idiv   edi
c001d37e:	99                   	cdq    
c001d37f:	f7 f9                	idiv   ecx
c001d381:	8d 42 30             	lea    eax,[edx+0x30]
c001d384:	0f b6 c0             	movzx  eax,al
c001d387:	50                   	push   eax
c001d388:	e8 63 fe ff ff       	call   c001d1f0 <combineCharAndColour(char, unsigned char)>
c001d38d:	5f                   	pop    edi
c001d38e:	5d                   	pop    ebp
c001d38f:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d395:	53                   	push   ebx
c001d396:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d39b:	99                   	cdq    
c001d39c:	f7 f9                	idiv   ecx
c001d39e:	99                   	cdq    
c001d39f:	f7 f9                	idiv   ecx
c001d3a1:	8d 42 30             	lea    eax,[edx+0x30]
c001d3a4:	0f b6 c0             	movzx  eax,al
c001d3a7:	50                   	push   eax
c001d3a8:	e8 43 fe ff ff       	call   c001d1f0 <combineCharAndColour(char, unsigned char)>
c001d3ad:	5a                   	pop    edx
c001d3ae:	5f                   	pop    edi
c001d3af:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d3b5:	53                   	push   ebx
c001d3b6:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d3bb:	99                   	cdq    
c001d3bc:	f7 f9                	idiv   ecx
c001d3be:	83 c2 30             	add    edx,0x30
c001d3c1:	0f b6 d2             	movzx  edx,dl
c001d3c4:	52                   	push   edx
c001d3c5:	e8 26 fe ff ff       	call   c001d1f0 <combineCharAndColour(char, unsigned char)>
c001d3ca:	83 c4 10             	add    esp,0x10
c001d3cd:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d3d3:	eb 05                	jmp    c001d3da <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d3d5:	be 01 00 00 00       	mov    esi,0x1
c001d3da:	83 c4 0c             	add    esp,0xc
c001d3dd:	89 f0                	mov    eax,esi
c001d3df:	5b                   	pop    ebx
c001d3e0:	5e                   	pop    esi
c001d3e1:	5f                   	pop    edi
c001d3e2:	5d                   	pop    ebp
c001d3e3:	c3                   	ret    

c001d3e4 <ATA::write(unsigned long long, int, void*)>:
c001d3e4:	55                   	push   ebp
c001d3e5:	57                   	push   edi
c001d3e6:	56                   	push   esi
c001d3e7:	be 04 00 00 00       	mov    esi,0x4
c001d3ec:	53                   	push   ebx
c001d3ed:	83 ec 0c             	sub    esp,0xc
c001d3f0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d3f4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d3f8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d3fc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d400:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d403:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d409:	0f 87 9c 01 00 00    	ja     c001d5ab <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d40f:	85 c9                	test   ecx,ecx
c001d411:	be 06 00 00 00       	mov    esi,0x6
c001d416:	0f 84 8f 01 00 00    	je     c001d5ab <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d41c:	55                   	push   ebp
c001d41d:	55                   	push   ebp
c001d41e:	6a 01                	push   0x1
c001d420:	51                   	push   ecx
c001d421:	53                   	push   ebx
c001d422:	52                   	push   edx
c001d423:	50                   	push   eax
c001d424:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d428:	e8 09 f9 ff ff       	call   c001cd36 <ATA::access(unsigned long long, int, void*, bool)>
c001d42d:	83 c4 20             	add    esp,0x20
c001d430:	85 c0                	test   eax,eax
c001d432:	89 c6                	mov    esi,eax
c001d434:	0f 85 6c 01 00 00    	jne    c001d5a6 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001d43a:	50                   	push   eax
c001d43b:	bd 10 27 00 00       	mov    ebp,0x2710
c001d440:	50                   	push   eax
c001d441:	6a 0f                	push   0xf
c001d443:	6a 00                	push   0x0
c001d445:	01 1d b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,ebx
c001d44b:	e8 b1 fd ff ff       	call   c001d201 <combineColours(unsigned char, unsigned char)>
c001d450:	5a                   	pop    edx
c001d451:	59                   	pop    ecx
c001d452:	b9 0a 00 00 00       	mov    ecx,0xa
c001d457:	0f b6 d8             	movzx  ebx,al
c001d45a:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d45f:	53                   	push   ebx
c001d460:	99                   	cdq    
c001d461:	f7 fd                	idiv   ebp
c001d463:	99                   	cdq    
c001d464:	f7 f9                	idiv   ecx
c001d466:	8d 42 30             	lea    eax,[edx+0x30]
c001d469:	0f b6 c0             	movzx  eax,al
c001d46c:	50                   	push   eax
c001d46d:	e8 7e fd ff ff       	call   c001d1f0 <combineCharAndColour(char, unsigned char)>
c001d472:	5f                   	pop    edi
c001d473:	bf e8 03 00 00       	mov    edi,0x3e8
c001d478:	5a                   	pop    edx
c001d479:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d47f:	53                   	push   ebx
c001d480:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d485:	99                   	cdq    
c001d486:	f7 ff                	idiv   edi
c001d488:	99                   	cdq    
c001d489:	f7 f9                	idiv   ecx
c001d48b:	8d 42 30             	lea    eax,[edx+0x30]
c001d48e:	0f b6 c0             	movzx  eax,al
c001d491:	50                   	push   eax
c001d492:	e8 59 fd ff ff       	call   c001d1f0 <combineCharAndColour(char, unsigned char)>
c001d497:	5f                   	pop    edi
c001d498:	bf 64 00 00 00       	mov    edi,0x64
c001d49d:	5a                   	pop    edx
c001d49e:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d4a4:	53                   	push   ebx
c001d4a5:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d4aa:	99                   	cdq    
c001d4ab:	f7 ff                	idiv   edi
c001d4ad:	99                   	cdq    
c001d4ae:	f7 f9                	idiv   ecx
c001d4b0:	8d 42 30             	lea    eax,[edx+0x30]
c001d4b3:	0f b6 c0             	movzx  eax,al
c001d4b6:	50                   	push   eax
c001d4b7:	e8 34 fd ff ff       	call   c001d1f0 <combineCharAndColour(char, unsigned char)>
c001d4bc:	5a                   	pop    edx
c001d4bd:	5a                   	pop    edx
c001d4be:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d4c4:	53                   	push   ebx
c001d4c5:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d4ca:	99                   	cdq    
c001d4cb:	f7 f9                	idiv   ecx
c001d4cd:	99                   	cdq    
c001d4ce:	f7 f9                	idiv   ecx
c001d4d0:	8d 42 30             	lea    eax,[edx+0x30]
c001d4d3:	0f b6 c0             	movzx  eax,al
c001d4d6:	50                   	push   eax
c001d4d7:	e8 14 fd ff ff       	call   c001d1f0 <combineCharAndColour(char, unsigned char)>
c001d4dc:	5a                   	pop    edx
c001d4dd:	5a                   	pop    edx
c001d4de:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d4e4:	53                   	push   ebx
c001d4e5:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d4ea:	99                   	cdq    
c001d4eb:	f7 f9                	idiv   ecx
c001d4ed:	83 c2 30             	add    edx,0x30
c001d4f0:	0f b6 d2             	movzx  edx,dl
c001d4f3:	52                   	push   edx
c001d4f4:	e8 f7 fc ff ff       	call   c001d1f0 <combineCharAndColour(char, unsigned char)>
c001d4f9:	5a                   	pop    edx
c001d4fa:	5a                   	pop    edx
c001d4fb:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d501:	53                   	push   ebx
c001d502:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d507:	99                   	cdq    
c001d508:	f7 fd                	idiv   ebp
c001d50a:	99                   	cdq    
c001d50b:	f7 f9                	idiv   ecx
c001d50d:	8d 42 30             	lea    eax,[edx+0x30]
c001d510:	0f b6 c0             	movzx  eax,al
c001d513:	50                   	push   eax
c001d514:	e8 d7 fc ff ff       	call   c001d1f0 <combineCharAndColour(char, unsigned char)>
c001d519:	5d                   	pop    ebp
c001d51a:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d51f:	5a                   	pop    edx
c001d520:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d526:	53                   	push   ebx
c001d527:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d52c:	99                   	cdq    
c001d52d:	f7 fd                	idiv   ebp
c001d52f:	99                   	cdq    
c001d530:	f7 f9                	idiv   ecx
c001d532:	8d 42 30             	lea    eax,[edx+0x30]
c001d535:	0f b6 c0             	movzx  eax,al
c001d538:	50                   	push   eax
c001d539:	e8 b2 fc ff ff       	call   c001d1f0 <combineCharAndColour(char, unsigned char)>
c001d53e:	5d                   	pop    ebp
c001d53f:	5a                   	pop    edx
c001d540:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d546:	53                   	push   ebx
c001d547:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d54c:	99                   	cdq    
c001d54d:	f7 ff                	idiv   edi
c001d54f:	99                   	cdq    
c001d550:	f7 f9                	idiv   ecx
c001d552:	8d 42 30             	lea    eax,[edx+0x30]
c001d555:	0f b6 c0             	movzx  eax,al
c001d558:	50                   	push   eax
c001d559:	e8 92 fc ff ff       	call   c001d1f0 <combineCharAndColour(char, unsigned char)>
c001d55e:	5f                   	pop    edi
c001d55f:	5d                   	pop    ebp
c001d560:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d566:	53                   	push   ebx
c001d567:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d56c:	99                   	cdq    
c001d56d:	f7 f9                	idiv   ecx
c001d56f:	99                   	cdq    
c001d570:	f7 f9                	idiv   ecx
c001d572:	8d 42 30             	lea    eax,[edx+0x30]
c001d575:	0f b6 c0             	movzx  eax,al
c001d578:	50                   	push   eax
c001d579:	e8 72 fc ff ff       	call   c001d1f0 <combineCharAndColour(char, unsigned char)>
c001d57e:	5a                   	pop    edx
c001d57f:	5f                   	pop    edi
c001d580:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d586:	53                   	push   ebx
c001d587:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d58c:	99                   	cdq    
c001d58d:	f7 f9                	idiv   ecx
c001d58f:	83 c2 30             	add    edx,0x30
c001d592:	0f b6 d2             	movzx  edx,dl
c001d595:	52                   	push   edx
c001d596:	e8 55 fc ff ff       	call   c001d1f0 <combineCharAndColour(char, unsigned char)>
c001d59b:	83 c4 10             	add    esp,0x10
c001d59e:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d5a4:	eb 05                	jmp    c001d5ab <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d5a6:	be 01 00 00 00       	mov    esi,0x1
c001d5ab:	83 c4 0c             	add    esp,0xc
c001d5ae:	89 f0                	mov    eax,esi
c001d5b0:	5b                   	pop    ebx
c001d5b1:	5e                   	pop    esi
c001d5b2:	5f                   	pop    edi
c001d5b3:	5d                   	pop    ebp
c001d5b4:	c3                   	ret    
c001d5b5:	90                   	nop

c001d5b6 <ATAPI::write(unsigned long long, int, void*)>:
c001d5b6:	b8 03 00 00 00       	mov    eax,0x3
c001d5bb:	c3                   	ret    

c001d5bc <ATAPI::close(int, int, void*)>:
c001d5bc:	83 ec 0c             	sub    esp,0xc
c001d5bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5c3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d5c9:	85 c0                	test   eax,eax
c001d5cb:	74 0c                	je     c001d5d9 <ATAPI::close(int, int, void*)+0x1d>
c001d5cd:	8b 10                	mov    edx,DWORD PTR [eax]
c001d5cf:	83 ec 0c             	sub    esp,0xc
c001d5d2:	50                   	push   eax
c001d5d3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d5d6:	83 c4 10             	add    esp,0x10
c001d5d9:	31 c0                	xor    eax,eax
c001d5db:	83 c4 0c             	add    esp,0xc
c001d5de:	c3                   	ret    
c001d5df:	90                   	nop

c001d5e0 <ATAPI::ATAPI()>:
c001d5e0:	83 ec 0c             	sub    esp,0xc
c001d5e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5e7:	83 ec 04             	sub    esp,0x4
c001d5ea:	68 00 08 00 00       	push   0x800
c001d5ef:	68 9d 34 02 c0       	push   0xc002349d
c001d5f4:	50                   	push   eax
c001d5f5:	e8 18 f8 fe ff       	call   c000ce12 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d5fa:	83 c4 10             	add    esp,0x10
c001d5fd:	ba b8 33 02 c0       	mov    edx,0xc00233b8
c001d602:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d606:	89 10                	mov    DWORD PTR [eax],edx
c001d608:	90                   	nop
c001d609:	83 c4 0c             	add    esp,0xc
c001d60c:	c3                   	ret    
c001d60d:	90                   	nop

c001d60e <ATAPI::readyForCommand()>:
c001d60e:	56                   	push   esi
c001d60f:	53                   	push   ebx
c001d610:	53                   	push   ebx
c001d611:	31 db                	xor    ebx,ebx
c001d613:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d617:	51                   	push   ecx
c001d618:	6a 0c                	push   0xc
c001d61a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d621:	50                   	push   eax
c001d622:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d628:	e8 77 e8 ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001d62d:	83 c4 10             	add    esp,0x10
c001d630:	a8 88                	test   al,0x88
c001d632:	74 25                	je     c001d659 <ATAPI::readyForCommand()+0x4b>
c001d634:	43                   	inc    ebx
c001d635:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d63b:	7e da                	jle    c001d617 <ATAPI::readyForCommand()+0x9>
c001d63d:	83 ec 0c             	sub    esp,0xc
c001d640:	68 5e 01 00 00       	push   0x15e
c001d645:	e8 c6 8d ff ff       	call   c0016410 <milliTenthSleep(unsigned int)>
c001d64a:	83 c4 10             	add    esp,0x10
c001d64d:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d653:	75 c2                	jne    c001d617 <ATAPI::readyForCommand()+0x9>
c001d655:	31 c0                	xor    eax,eax
c001d657:	eb 02                	jmp    c001d65b <ATAPI::readyForCommand()+0x4d>
c001d659:	b0 01                	mov    al,0x1
c001d65b:	5a                   	pop    edx
c001d65c:	5b                   	pop    ebx
c001d65d:	5e                   	pop    esi
c001d65e:	c3                   	ret    
c001d65f:	90                   	nop

c001d660 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d660:	55                   	push   ebp
c001d661:	57                   	push   edi
c001d662:	56                   	push   esi
c001d663:	53                   	push   ebx
c001d664:	83 ec 20             	sub    esp,0x20
c001d667:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d66b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d66f:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001d673:	6a 01                	push   0x1
c001d675:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d67c:	50                   	push   eax
c001d67d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d683:	e8 6a e9 ff ff       	call   c001bff2 <IDE::enableIRQs(unsigned char, bool)>
c001d688:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d68f:	59                   	pop    ecx
c001d690:	5e                   	pop    esi
c001d691:	50                   	push   eax
c001d692:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d698:	e8 21 e7 ff ff       	call   c001bdbe <IDE::prepareInterrupt(unsigned char)>
c001d69d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d6a0:	e8 69 ff ff ff       	call   c001d60e <ATAPI::readyForCommand()>
c001d6a5:	83 c4 10             	add    esp,0x10
c001d6a8:	84 c0                	test   al,al
c001d6aa:	75 0a                	jne    c001d6b6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001d6ac:	bb 01 00 00 00       	mov    ebx,0x1
c001d6b1:	e9 5f 02 00 00       	jmp    c001d915 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d6b6:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d6bc:	c1 e0 04             	shl    eax,0x4
c001d6bf:	0f b6 c0             	movzx  eax,al
c001d6c2:	50                   	push   eax
c001d6c3:	6a 06                	push   0x6
c001d6c5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6cc:	50                   	push   eax
c001d6cd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6d3:	e8 0c e7 ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6d8:	6a 00                	push   0x0
c001d6da:	6a 01                	push   0x1
c001d6dc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6e3:	50                   	push   eax
c001d6e4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6ea:	e8 f5 e6 ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6ef:	83 c4 20             	add    esp,0x20
c001d6f2:	0f b6 c3             	movzx  eax,bl
c001d6f5:	50                   	push   eax
c001d6f6:	0f b6 df             	movzx  ebx,bh
c001d6f9:	6a 04                	push   0x4
c001d6fb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d702:	50                   	push   eax
c001d703:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d709:	e8 d6 e6 ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d70e:	53                   	push   ebx
c001d70f:	6a 05                	push   0x5
c001d711:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d718:	50                   	push   eax
c001d719:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d71f:	e8 c0 e6 ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d724:	83 c4 20             	add    esp,0x20
c001d727:	68 a0 00 00 00       	push   0xa0
c001d72c:	6a 07                	push   0x7
c001d72e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d735:	50                   	push   eax
c001d736:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d73c:	e8 a3 e6 ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d741:	83 c4 0c             	add    esp,0xc
c001d744:	6a 01                	push   0x1
c001d746:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d74d:	50                   	push   eax
c001d74e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d754:	e8 6f f1 ff ff       	call   c001c8c8 <IDE::polling(unsigned char, unsigned int)>
c001d759:	83 c4 10             	add    esp,0x10
c001d75c:	0f b6 d8             	movzx  ebx,al
c001d75f:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d765:	85 db                	test   ebx,ebx
c001d767:	74 20                	je     c001d789 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001d769:	53                   	push   ebx
c001d76a:	0f b6 c0             	movzx  eax,al
c001d76d:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d774:	52                   	push   edx
c001d775:	50                   	push   eax
c001d776:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d77c:	e8 8d f0 ff ff       	call   c001c80e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d781:	83 c4 10             	add    esp,0x10
c001d784:	e9 8c 01 00 00       	jmp    c001d915 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d789:	52                   	push   edx
c001d78a:	0f b6 c0             	movzx  eax,al
c001d78d:	52                   	push   edx
c001d78e:	50                   	push   eax
c001d78f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d795:	e8 38 e6 ff ff       	call   c001bdd2 <IDE::getBase(unsigned char)>
c001d79a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d79e:	b9 06 00 00 00       	mov    ecx,0x6
c001d7a3:	89 c2                	mov    edx,eax
c001d7a5:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d7a8:	89 e8                	mov    eax,ebp
c001d7aa:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d7ae:	83 c4 10             	add    esp,0x10
c001d7b1:	0f b6 c0             	movzx  eax,al
c001d7b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d7b8:	85 db                	test   ebx,ebx
c001d7ba:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d7c0:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d7c7:	0f 84 eb 00 00 00    	je     c001d8b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001d7cd:	55                   	push   ebp
c001d7ce:	55                   	push   ebp
c001d7cf:	52                   	push   edx
c001d7d0:	50                   	push   eax
c001d7d1:	e8 82 e7 ff ff       	call   c001bf58 <IDE::waitInterrupt(unsigned char)>
c001d7d6:	83 c4 10             	add    esp,0x10
c001d7d9:	84 c0                	test   al,al
c001d7db:	0f 84 cb fe ff ff    	je     c001d6ac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d7e1:	56                   	push   esi
c001d7e2:	56                   	push   esi
c001d7e3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d7ea:	50                   	push   eax
c001d7eb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7f1:	e8 c8 e5 ff ff       	call   c001bdbe <IDE::prepareInterrupt(unsigned char)>
c001d7f6:	83 c4 0c             	add    esp,0xc
c001d7f9:	6a 04                	push   0x4
c001d7fb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d802:	50                   	push   eax
c001d803:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d809:	e8 96 e6 ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001d80e:	83 c4 0c             	add    esp,0xc
c001d811:	6a 05                	push   0x5
c001d813:	89 c6                	mov    esi,eax
c001d815:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d81c:	50                   	push   eax
c001d81d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d823:	e8 7c e6 ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001d828:	83 c4 10             	add    esp,0x10
c001d82b:	0f b6 e8             	movzx  ebp,al
c001d82e:	89 f0                	mov    eax,esi
c001d830:	c1 e5 08             	shl    ebp,0x8
c001d833:	0f b6 f0             	movzx  esi,al
c001d836:	09 f5                	or     ebp,esi
c001d838:	31 f6                	xor    esi,esi
c001d83a:	d1 fd                	sar    ebp,1
c001d83c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d841:	74 5c                	je     c001d89f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001d843:	39 ee                	cmp    esi,ebp
c001d845:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d84b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d852:	75 0d                	jne    c001d861 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001d854:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001d857:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001d85b:	4b                   	dec    ebx
c001d85c:	e9 57 ff ff ff       	jmp    c001d7b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001d861:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001d865:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001d869:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001d86e:	51                   	push   ecx
c001d86f:	51                   	push   ecx
c001d870:	52                   	push   edx
c001d871:	50                   	push   eax
c001d872:	e8 5b e5 ff ff       	call   c001bdd2 <IDE::getBase(unsigned char)>
c001d877:	89 c2                	mov    edx,eax
c001d879:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001d87e:	66 ef                	out    dx,ax
c001d880:	46                   	inc    esi
c001d881:	83 c4 10             	add    esp,0x10
c001d884:	eb bd                	jmp    c001d843 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001d886:	51                   	push   ecx
c001d887:	51                   	push   ecx
c001d888:	52                   	push   edx
c001d889:	50                   	push   eax
c001d88a:	e8 43 e5 ff ff       	call   c001bdd2 <IDE::getBase(unsigned char)>
c001d88f:	89 c2                	mov    edx,eax
c001d891:	66 ed                	in     ax,dx
c001d893:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001d897:	83 c4 10             	add    esp,0x10
c001d89a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001d89e:	46                   	inc    esi
c001d89f:	39 ee                	cmp    esi,ebp
c001d8a1:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d8a7:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d8ae:	75 d6                	jne    c001d886 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001d8b0:	01 f6                	add    esi,esi
c001d8b2:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001d8b6:	eb a3                	jmp    c001d85b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001d8b8:	51                   	push   ecx
c001d8b9:	51                   	push   ecx
c001d8ba:	52                   	push   edx
c001d8bb:	50                   	push   eax
c001d8bc:	e8 97 e6 ff ff       	call   c001bf58 <IDE::waitInterrupt(unsigned char)>
c001d8c1:	83 c4 10             	add    esp,0x10
c001d8c4:	84 c0                	test   al,al
c001d8c6:	0f 84 e0 fd ff ff    	je     c001d6ac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d8cc:	52                   	push   edx
c001d8cd:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d8d2:	52                   	push   edx
c001d8d3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d8da:	50                   	push   eax
c001d8db:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d8e1:	e8 d8 e4 ff ff       	call   c001bdbe <IDE::prepareInterrupt(unsigned char)>
c001d8e6:	83 c4 10             	add    esp,0x10
c001d8e9:	50                   	push   eax
c001d8ea:	50                   	push   eax
c001d8eb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d8f2:	50                   	push   eax
c001d8f3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d8f9:	e8 d4 e4 ff ff       	call   c001bdd2 <IDE::getBase(unsigned char)>
c001d8fe:	8d 50 07             	lea    edx,[eax+0x7]
c001d901:	ec                   	in     al,dx
c001d902:	83 c4 10             	add    esp,0x10
c001d905:	a8 88                	test   al,0x88
c001d907:	74 0a                	je     c001d913 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001d909:	4b                   	dec    ebx
c001d90a:	75 dd                	jne    c001d8e9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001d90c:	bb 02 00 00 00       	mov    ebx,0x2
c001d911:	eb 02                	jmp    c001d915 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d913:	31 db                	xor    ebx,ebx
c001d915:	83 c4 1c             	add    esp,0x1c
c001d918:	89 d8                	mov    eax,ebx
c001d91a:	5b                   	pop    ebx
c001d91b:	5e                   	pop    esi
c001d91c:	5f                   	pop    edi
c001d91d:	5d                   	pop    ebp
c001d91e:	c3                   	ret    
c001d91f:	90                   	nop

c001d920 <ATAPI::diskRemoved()>:
c001d920:	53                   	push   ebx
c001d921:	83 ec 14             	sub    esp,0x14
c001d924:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d928:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d92f:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d935:	e8 7a 04 ff ff       	call   c000ddb4 <LogicalDisk::unmount()>
c001d93a:	58                   	pop    eax
c001d93b:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d941:	e8 52 0e ff ff       	call   c000e798 <VCache::writeWriteBuffer()>
c001d946:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d94c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d950:	83 c4 18             	add    esp,0x18
c001d953:	5b                   	pop    ebx
c001d954:	e9 2f 0e ff ff       	jmp    c000e788 <VCache::invalidateReadBuffer()>
c001d959:	90                   	nop

c001d95a <ATAPI::eject()>:
c001d95a:	57                   	push   edi
c001d95b:	b9 03 00 00 00       	mov    ecx,0x3
c001d960:	53                   	push   ebx
c001d961:	83 ec 14             	sub    esp,0x14
c001d964:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d968:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d96c:	fc                   	cld    
c001d96d:	31 c0                	xor    eax,eax
c001d96f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d971:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d976:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d97b:	50                   	push   eax
c001d97c:	50                   	push   eax
c001d97d:	6a 00                	push   0x0
c001d97f:	6a 00                	push   0x0
c001d981:	6a 00                	push   0x0
c001d983:	6a 02                	push   0x2
c001d985:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d989:	50                   	push   eax
c001d98a:	53                   	push   ebx
c001d98b:	e8 d0 fc ff ff       	call   c001d660 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d990:	83 c4 14             	add    esp,0x14
c001d993:	53                   	push   ebx
c001d994:	e8 87 ff ff ff       	call   c001d920 <ATAPI::diskRemoved()>
c001d999:	83 c4 24             	add    esp,0x24
c001d99c:	31 c0                	xor    eax,eax
c001d99e:	5b                   	pop    ebx
c001d99f:	5f                   	pop    edi
c001d9a0:	c3                   	ret    
c001d9a1:	90                   	nop

c001d9a2 <ATAPI::diskInserted()>:
c001d9a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d9a6:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d9ad:	c3                   	ret    

c001d9ae <ATAPI::detectMedia()>:
c001d9ae:	56                   	push   esi
c001d9af:	53                   	push   ebx
c001d9b0:	83 ec 28             	sub    esp,0x28
c001d9b3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d9b7:	6a 0c                	push   0xc
c001d9b9:	6a 00                	push   0x0
c001d9bb:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d9bf:	56                   	push   esi
c001d9c0:	e8 2b 2b fe ff       	call   c00004f0 <memset>
c001d9c5:	58                   	pop    eax
c001d9c6:	5a                   	pop    edx
c001d9c7:	6a 00                	push   0x0
c001d9c9:	6a 00                	push   0x0
c001d9cb:	6a 00                	push   0x0
c001d9cd:	6a 00                	push   0x0
c001d9cf:	56                   	push   esi
c001d9d0:	53                   	push   ebx
c001d9d1:	e8 8a fc ff ff       	call   c001d660 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d9d6:	83 c4 1c             	add    esp,0x1c
c001d9d9:	6a 0c                	push   0xc
c001d9db:	6a 00                	push   0x0
c001d9dd:	56                   	push   esi
c001d9de:	e8 0d 2b fe ff       	call   c00004f0 <memset>
c001d9e3:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d9e8:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d9ed:	59                   	pop    ecx
c001d9ee:	58                   	pop    eax
c001d9ef:	6a 01                	push   0x1
c001d9f1:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d9f5:	50                   	push   eax
c001d9f6:	6a 00                	push   0x0
c001d9f8:	6a 12                	push   0x12
c001d9fa:	56                   	push   esi
c001d9fb:	53                   	push   ebx
c001d9fc:	e8 5f fc ff ff       	call   c001d660 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001da01:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001da05:	83 c4 20             	add    esp,0x20
c001da08:	83 e0 7f             	and    eax,0x7f
c001da0b:	83 f8 70             	cmp    eax,0x70
c001da0e:	74 15                	je     c001da25 <ATAPI::detectMedia()+0x77>
c001da10:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001da17:	75 0c                	jne    c001da25 <ATAPI::detectMedia()+0x77>
c001da19:	83 ec 0c             	sub    esp,0xc
c001da1c:	53                   	push   ebx
c001da1d:	e8 80 ff ff ff       	call   c001d9a2 <ATAPI::diskInserted()>
c001da22:	83 c4 10             	add    esp,0x10
c001da25:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001da29:	83 e0 0f             	and    eax,0xf
c001da2c:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001da31:	0f b6 c0             	movzx  eax,al
c001da34:	75 19                	jne    c001da4f <ATAPI::detectMedia()+0xa1>
c001da36:	83 f8 02             	cmp    eax,0x2
c001da39:	75 14                	jne    c001da4f <ATAPI::detectMedia()+0xa1>
c001da3b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001da42:	74 24                	je     c001da68 <ATAPI::detectMedia()+0xba>
c001da44:	83 ec 0c             	sub    esp,0xc
c001da47:	53                   	push   ebx
c001da48:	e8 d3 fe ff ff       	call   c001d920 <ATAPI::diskRemoved()>
c001da4d:	eb 16                	jmp    c001da65 <ATAPI::detectMedia()+0xb7>
c001da4f:	85 c0                	test   eax,eax
c001da51:	75 15                	jne    c001da68 <ATAPI::detectMedia()+0xba>
c001da53:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001da5a:	75 0c                	jne    c001da68 <ATAPI::detectMedia()+0xba>
c001da5c:	83 ec 0c             	sub    esp,0xc
c001da5f:	53                   	push   ebx
c001da60:	e8 3d ff ff ff       	call   c001d9a2 <ATAPI::diskInserted()>
c001da65:	83 c4 10             	add    esp,0x10
c001da68:	83 c4 24             	add    esp,0x24
c001da6b:	5b                   	pop    ebx
c001da6c:	5e                   	pop    esi
c001da6d:	c3                   	ret    

c001da6e <ATAPI::open(int, int, void*)>:
c001da6e:	56                   	push   esi
c001da6f:	53                   	push   ebx
c001da70:	50                   	push   eax
c001da71:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001da75:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001da79:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001da7d:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001da83:	c1 e0 06             	shl    eax,0x6
c001da86:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001da8c:	01 d0                	add    eax,edx
c001da8e:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001da95:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001da9b:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001daa2:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001daac:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001dab3:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001dab9:	6a 04                	push   0x4
c001dabb:	6a 0c                	push   0xc
c001dabd:	51                   	push   ecx
c001dabe:	52                   	push   edx
c001dabf:	e8 20 e3 ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dac4:	90                   	nop
c001dac5:	90                   	nop
c001dac6:	6a 00                	push   0x0
c001dac8:	6a 0c                	push   0xc
c001daca:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dad1:	50                   	push   eax
c001dad2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dad8:	e8 07 e3 ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dadd:	83 c4 14             	add    esp,0x14
c001dae0:	68 78 01 00 00       	push   0x178
c001dae5:	e8 e9 9f fe ff       	call   c0007ad3 <malloc>
c001daea:	83 c4 0c             	add    esp,0xc
c001daed:	6a 00                	push   0x0
c001daef:	68 ff ff ff 7f       	push   0x7fffffff
c001daf4:	6a 00                	push   0x0
c001daf6:	6a 00                	push   0x0
c001daf8:	53                   	push   ebx
c001daf9:	68 4f 35 02 c0       	push   0xc002354f
c001dafe:	89 c6                	mov    esi,eax
c001db00:	50                   	push   eax
c001db01:	e8 ec 00 ff ff       	call   c000dbf2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001db06:	83 c4 14             	add    esp,0x14
c001db09:	56                   	push   esi
c001db0a:	e8 a3 01 ff ff       	call   c000dcb2 <LogicalDisk::assignDriveLetter()>
c001db0f:	5a                   	pop    edx
c001db10:	59                   	pop    ecx
c001db11:	0f be c0             	movsx  eax,al
c001db14:	50                   	push   eax
c001db15:	68 a0 33 02 c0       	push   0xc00233a0
c001db1a:	e8 eb cd fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001db1f:	58                   	pop    eax
c001db20:	5a                   	pop    edx
c001db21:	56                   	push   esi
c001db22:	53                   	push   ebx
c001db23:	e8 1c ef fe ff       	call   c000ca44 <Device::addChild(Device*)>
c001db28:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001db2e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001db31:	e8 44 f3 fe ff       	call   c000ce7a <PhysicalDisk::startCache()>
c001db36:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001db3d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001db40:	e8 69 fe ff ff       	call   c001d9ae <ATAPI::detectMedia()>
c001db45:	83 c4 14             	add    esp,0x14
c001db48:	31 c0                	xor    eax,eax
c001db4a:	5b                   	pop    ebx
c001db4b:	5e                   	pop    esi
c001db4c:	c3                   	ret    
c001db4d:	90                   	nop

c001db4e <ATAPI::read(unsigned long long, int, void*)>:
c001db4e:	55                   	push   ebp
c001db4f:	57                   	push   edi
c001db50:	56                   	push   esi
c001db51:	53                   	push   ebx
c001db52:	83 ec 1c             	sub    esp,0x1c
c001db55:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001db59:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001db5d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001db61:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001db68:	74 3c                	je     c001dba6 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001db6a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001db6e:	b9 03 00 00 00       	mov    ecx,0x3
c001db73:	fc                   	cld    
c001db74:	31 c0                	xor    eax,eax
c001db76:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001db78:	89 e8                	mov    eax,ebp
c001db7a:	0f ce                	bswap  esi
c001db7c:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001db80:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001db85:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001db89:	50                   	push   eax
c001db8a:	50                   	push   eax
c001db8b:	55                   	push   ebp
c001db8c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001db90:	c1 e5 0b             	shl    ebp,0xb
c001db93:	6a 00                	push   0x0
c001db95:	55                   	push   ebp
c001db96:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001db9a:	50                   	push   eax
c001db9b:	53                   	push   ebx
c001db9c:	e8 bf fa ff ff       	call   c001d660 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001dba1:	83 c4 20             	add    esp,0x20
c001dba4:	eb 1a                	jmp    c001dbc0 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001dba6:	83 ec 0c             	sub    esp,0xc
c001dba9:	53                   	push   ebx
c001dbaa:	e8 ff fd ff ff       	call   c001d9ae <ATAPI::detectMedia()>
c001dbaf:	83 c4 10             	add    esp,0x10
c001dbb2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dbb9:	75 af                	jne    c001db6a <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001dbbb:	b8 02 00 00 00       	mov    eax,0x2
c001dbc0:	83 c4 1c             	add    esp,0x1c
c001dbc3:	5b                   	pop    ebx
c001dbc4:	5e                   	pop    esi
c001dbc5:	5f                   	pop    edi
c001dbc6:	5d                   	pop    ebp
c001dbc7:	c3                   	ret    

c001dbc8 <SATA::close(int, int, void*)>:
c001dbc8:	83 ec 0c             	sub    esp,0xc
c001dbcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbcf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dbd5:	85 c0                	test   eax,eax
c001dbd7:	74 0c                	je     c001dbe5 <SATA::close(int, int, void*)+0x1d>
c001dbd9:	8b 10                	mov    edx,DWORD PTR [eax]
c001dbdb:	83 ec 0c             	sub    esp,0xc
c001dbde:	50                   	push   eax
c001dbdf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001dbe2:	83 c4 10             	add    esp,0x10
c001dbe5:	31 c0                	xor    eax,eax
c001dbe7:	83 c4 0c             	add    esp,0xc
c001dbea:	c3                   	ret    
c001dbeb:	90                   	nop

c001dbec <SATA::powerSaving(PowerSavingLevel)>:
c001dbec:	c3                   	ret    
c001dbed:	90                   	nop

c001dbee <SATA::open(int, int, void*)>:
c001dbee:	56                   	push   esi
c001dbef:	53                   	push   ebx
c001dbf0:	50                   	push   eax
c001dbf1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dbf5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dbf9:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001dc03:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001dc09:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dc0d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001dc17:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001dc21:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001dc28:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001dc2e:	e8 af a1 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001dc33:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001dc39:	89 c6                	mov    esi,eax
c001dc3b:	e8 a2 a1 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001dc40:	81 c6 00 10 00 00    	add    esi,0x1000
c001dc46:	39 c6                	cmp    esi,eax
c001dc48:	74 10                	je     c001dc5a <SATA::open(int, int, void*)+0x6c>
c001dc4a:	83 ec 0c             	sub    esp,0xc
c001dc4d:	68 e8 33 02 c0       	push   0xc00233e8
c001dc52:	e8 b4 39 ff ff       	call   c001160b <KePanic(char const*)>
c001dc57:	83 c4 10             	add    esp,0x10
c001dc5a:	83 ec 0c             	sub    esp,0xc
c001dc5d:	6a 02                	push   0x2
c001dc5f:	e8 91 b9 fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001dc64:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001dc6a:	6a 03                	push   0x3
c001dc6c:	50                   	push   eax
c001dc6d:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001dc73:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001dc79:	e8 80 c0 fe ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001dc7e:	83 c4 14             	add    esp,0x14
c001dc81:	53                   	push   ebx
c001dc82:	e8 f3 f1 fe ff       	call   c000ce7a <PhysicalDisk::startCache()>
c001dc87:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dc8a:	e8 37 04 ff ff       	call   c000e0c6 <createPartitionsForDisk(PhysicalDisk*)>
c001dc8f:	83 c4 14             	add    esp,0x14
c001dc92:	31 c0                	xor    eax,eax
c001dc94:	5b                   	pop    ebx
c001dc95:	5e                   	pop    esi
c001dc96:	c3                   	ret    
c001dc97:	90                   	nop

c001dc98 <SATA::SATA()>:
c001dc98:	83 ec 0c             	sub    esp,0xc
c001dc9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc9f:	83 ec 04             	sub    esp,0x4
c001dca2:	68 00 02 00 00       	push   0x200
c001dca7:	68 fc 33 02 c0       	push   0xc00233fc
c001dcac:	50                   	push   eax
c001dcad:	e8 60 f1 fe ff       	call   c000ce12 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dcb2:	83 c4 10             	add    esp,0x10
c001dcb5:	ba 6c 34 02 c0       	mov    edx,0xc002346c
c001dcba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcbe:	89 10                	mov    DWORD PTR [eax],edx
c001dcc0:	90                   	nop
c001dcc1:	83 c4 0c             	add    esp,0xc
c001dcc4:	c3                   	ret    
c001dcc5:	90                   	nop

c001dcc6 <SATA::access(unsigned long long, int, void*, bool)>:
c001dcc6:	55                   	push   ebp
c001dcc7:	57                   	push   edi
c001dcc8:	56                   	push   esi
c001dcc9:	53                   	push   ebx
c001dcca:	83 ec 2c             	sub    esp,0x2c
c001dccd:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001dcd1:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001dcd6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001dcda:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001dcde:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001dce2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dce6:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dcea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dcee:	7e 10                	jle    c001dd00 <SATA::access(unsigned long long, int, void*, bool)+0x3a>
c001dcf0:	83 ec 0c             	sub    esp,0xc
c001dcf3:	68 0c 34 02 c0       	push   0xc002340c
c001dcf8:	e8 0e 39 ff ff       	call   c001160b <KePanic(char const*)>
c001dcfd:	83 c4 10             	add    esp,0x10
c001dd00:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001dd06:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001dd0c:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001dd12:	89 e8                	mov    eax,ebp
c001dd14:	c1 e0 07             	shl    eax,0x7
c001dd17:	01 d0                	add    eax,edx
c001dd19:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001dd23:	8d 45 02             	lea    eax,[ebp+0x2]
c001dd26:	51                   	push   ecx
c001dd27:	c1 e0 07             	shl    eax,0x7
c001dd2a:	51                   	push   ecx
c001dd2b:	01 d0                	add    eax,edx
c001dd2d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001dd31:	50                   	push   eax
c001dd32:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001dd38:	e8 6b ec ff ff       	call   c001c9a8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001dd3d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001dd41:	83 c4 10             	add    esp,0x10
c001dd44:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001dd49:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dd4d:	0f 84 5b 01 00 00    	je     c001deae <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001dd53:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001dd57:	c1 e0 09             	shl    eax,0x9
c001dd5a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001dd5f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dd63:	74 0e                	je     c001dd73 <SATA::access(unsigned long long, int, void*, bool)+0xad>
c001dd65:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001dd6b:	89 c1                	mov    ecx,eax
c001dd6d:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001dd71:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dd73:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001dd77:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001dd7d:	8d 45 02             	lea    eax,[ebp+0x2]
c001dd80:	c1 e0 07             	shl    eax,0x7
c001dd83:	01 d0                	add    eax,edx
c001dd85:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd87:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001dd8d:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001dd93:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dd97:	c1 e1 05             	shl    ecx,0x5
c001dd9a:	01 c8                	add    eax,ecx
c001dd9c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001dda0:	83 e1 01             	and    ecx,0x1
c001dda3:	89 ce                	mov    esi,ecx
c001dda5:	8a 08                	mov    cl,BYTE PTR [eax]
c001dda7:	c1 e6 06             	shl    esi,0x6
c001ddaa:	83 e1 bf             	and    ecx,0xffffffbf
c001ddad:	09 f1                	or     ecx,esi
c001ddaf:	88 08                	mov    BYTE PTR [eax],cl
c001ddb1:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ddb3:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001ddb9:	81 c9 05 00 01 00    	or     ecx,0x10005
c001ddbf:	89 08                	mov    DWORD PTR [eax],ecx
c001ddc1:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ddc7:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001ddcd:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001ddd3:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001ddd6:	50                   	push   eax
c001ddd7:	68 90 00 00 00       	push   0x90
c001dddc:	6a 00                	push   0x0
c001ddde:	56                   	push   esi
c001dddf:	e8 0c 27 fe ff       	call   c00004f0 <memset>
c001dde4:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ddea:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001ddf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ddf4:	83 c4 10             	add    esp,0x10
c001ddf7:	48                   	dec    eax
c001ddf8:	25 ff ff 3f 00       	and    eax,0x3fffff
c001ddfd:	89 c1                	mov    ecx,eax
c001ddff:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001de05:	25 00 00 c0 ff       	and    eax,0xffc00000
c001de0a:	09 c8                	or     eax,ecx
c001de0c:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001de12:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001de18:	83 c8 80             	or     eax,0xffffff80
c001de1b:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001de21:	66 8b 06             	mov    ax,WORD PTR [esi]
c001de24:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001de28:	25 00 7f 00 00       	and    eax,0x7f00
c001de2d:	0d 27 80 ff ff       	or     eax,0xffff8027
c001de32:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001de37:	66 89 06             	mov    WORD PTR [esi],ax
c001de3a:	b0 35                	mov    al,0x35
c001de3c:	75 02                	jne    c001de40 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001de3e:	b0 25                	mov    al,0x25
c001de40:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001de43:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001de47:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001de4b:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001de4f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001de53:	c1 e8 10             	shr    eax,0x10
c001de56:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001de59:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001de5d:	c1 e8 18             	shr    eax,0x18
c001de60:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001de63:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001de67:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001de6a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001de6e:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001de71:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001de75:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001de79:	89 ee                	mov    esi,ebp
c001de7b:	31 c0                	xor    eax,eax
c001de7d:	c1 e6 07             	shl    esi,0x7
c001de80:	01 d6                	add    esi,edx
c001de82:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001de88:	80 e1 88             	and    cl,0x88
c001de8b:	74 0a                	je     c001de97 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001de8d:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001de92:	74 0a                	je     c001de9e <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001de94:	40                   	inc    eax
c001de95:	eb eb                	jmp    c001de82 <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001de97:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001de9c:	75 17                	jne    c001deb5 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001de9e:	83 ec 0c             	sub    esp,0xc
c001dea1:	68 45 34 02 c0       	push   0xc0023445
c001dea6:	e8 5f ca fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001deab:	83 c4 10             	add    esp,0x10
c001deae:	b8 01 00 00 00       	mov    eax,0x1
c001deb3:	eb 5b                	jmp    c001df10 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001deb5:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001deb9:	c1 e5 07             	shl    ebp,0x7
c001debc:	b8 01 00 00 00       	mov    eax,0x1
c001dec1:	01 ea                	add    edx,ebp
c001dec3:	d3 e0                	shl    eax,cl
c001dec5:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001decb:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001ded1:	85 c8                	test   eax,ecx
c001ded3:	74 16                	je     c001deeb <SATA::access(unsigned long long, int, void*, bool)+0x225>
c001ded5:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001dedb:	0f ba e1 1e          	bt     ecx,0x1e
c001dedf:	73 ea                	jae    c001decb <SATA::access(unsigned long long, int, void*, bool)+0x205>
c001dee1:	83 ec 0c             	sub    esp,0xc
c001dee4:	68 53 34 02 c0       	push   0xc0023453
c001dee9:	eb bb                	jmp    c001dea6 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001deeb:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001def1:	0f ba e0 1e          	bt     eax,0x1e
c001def5:	72 b7                	jb     c001deae <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001def7:	31 c0                	xor    eax,eax
c001def9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001defe:	75 10                	jne    c001df10 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001df00:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001df06:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001df0a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001df0e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001df10:	83 c4 2c             	add    esp,0x2c
c001df13:	5b                   	pop    ebx
c001df14:	5e                   	pop    esi
c001df15:	5f                   	pop    edi
c001df16:	5d                   	pop    ebp
c001df17:	c3                   	ret    

c001df18 <SATA::read(unsigned long long, int, void*)>:
c001df18:	55                   	push   ebp
c001df19:	57                   	push   edi
c001df1a:	56                   	push   esi
c001df1b:	be 04 00 00 00       	mov    esi,0x4
c001df20:	53                   	push   ebx
c001df21:	83 ec 0c             	sub    esp,0xc
c001df24:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001df28:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001df2c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001df30:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001df34:	8d 7b ff             	lea    edi,[ebx-0x1]
c001df37:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001df3d:	0f 87 1a 02 00 00    	ja     c001e15d <SATA::read(unsigned long long, int, void*)+0x245>
c001df43:	85 c9                	test   ecx,ecx
c001df45:	be 06 00 00 00       	mov    esi,0x6
c001df4a:	0f 84 0d 02 00 00    	je     c001e15d <SATA::read(unsigned long long, int, void*)+0x245>
c001df50:	56                   	push   esi
c001df51:	56                   	push   esi
c001df52:	6a 00                	push   0x0
c001df54:	51                   	push   ecx
c001df55:	53                   	push   ebx
c001df56:	52                   	push   edx
c001df57:	50                   	push   eax
c001df58:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001df5c:	e8 65 fd ff ff       	call   c001dcc6 <SATA::access(unsigned long long, int, void*, bool)>
c001df61:	83 c4 20             	add    esp,0x20
c001df64:	85 c0                	test   eax,eax
c001df66:	89 c6                	mov    esi,eax
c001df68:	0f 85 ea 01 00 00    	jne    c001e158 <SATA::read(unsigned long long, int, void*)+0x240>
c001df6e:	50                   	push   eax
c001df6f:	50                   	push   eax
c001df70:	6a 0f                	push   0xf
c001df72:	6a 00                	push   0x0
c001df74:	01 1d b4 d0 02 c0    	add    DWORD PTR ds:0xc002d0b4,ebx
c001df7a:	bb 0a 00 00 00       	mov    ebx,0xa
c001df7f:	e8 7d f2 ff ff       	call   c001d201 <combineColours(unsigned char, unsigned char)>
c001df84:	5a                   	pop    edx
c001df85:	59                   	pop    ecx
c001df86:	b9 10 27 00 00       	mov    ecx,0x2710
c001df8b:	0f b6 c0             	movzx  eax,al
c001df8e:	50                   	push   eax
c001df8f:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001df94:	99                   	cdq    
c001df95:	f7 f9                	idiv   ecx
c001df97:	99                   	cdq    
c001df98:	f7 fb                	idiv   ebx
c001df9a:	8d 42 30             	lea    eax,[edx+0x30]
c001df9d:	0f b6 c0             	movzx  eax,al
c001dfa0:	50                   	push   eax
c001dfa1:	e8 4a f2 ff ff       	call   c001d1f0 <combineCharAndColour(char, unsigned char)>
c001dfa6:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001dfac:	5f                   	pop    edi
c001dfad:	5d                   	pop    ebp
c001dfae:	bd e8 03 00 00       	mov    ebp,0x3e8
c001dfb3:	6a 0f                	push   0xf
c001dfb5:	6a 00                	push   0x0
c001dfb7:	e8 45 f2 ff ff       	call   c001d201 <combineColours(unsigned char, unsigned char)>
c001dfbc:	5a                   	pop    edx
c001dfbd:	59                   	pop    ecx
c001dfbe:	0f b6 c0             	movzx  eax,al
c001dfc1:	50                   	push   eax
c001dfc2:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001dfc7:	99                   	cdq    
c001dfc8:	f7 fd                	idiv   ebp
c001dfca:	99                   	cdq    
c001dfcb:	f7 fb                	idiv   ebx
c001dfcd:	8d 42 30             	lea    eax,[edx+0x30]
c001dfd0:	0f b6 c0             	movzx  eax,al
c001dfd3:	50                   	push   eax
c001dfd4:	e8 17 f2 ff ff       	call   c001d1f0 <combineCharAndColour(char, unsigned char)>
c001dfd9:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001dfdf:	5f                   	pop    edi
c001dfe0:	bf 64 00 00 00       	mov    edi,0x64
c001dfe5:	58                   	pop    eax
c001dfe6:	6a 0f                	push   0xf
c001dfe8:	6a 00                	push   0x0
c001dfea:	e8 12 f2 ff ff       	call   c001d201 <combineColours(unsigned char, unsigned char)>
c001dfef:	5a                   	pop    edx
c001dff0:	59                   	pop    ecx
c001dff1:	0f b6 c0             	movzx  eax,al
c001dff4:	50                   	push   eax
c001dff5:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001dffa:	99                   	cdq    
c001dffb:	f7 ff                	idiv   edi
c001dffd:	99                   	cdq    
c001dffe:	f7 fb                	idiv   ebx
c001e000:	8d 42 30             	lea    eax,[edx+0x30]
c001e003:	0f b6 c0             	movzx  eax,al
c001e006:	50                   	push   eax
c001e007:	e8 e4 f1 ff ff       	call   c001d1f0 <combineCharAndColour(char, unsigned char)>
c001e00c:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001e012:	58                   	pop    eax
c001e013:	5a                   	pop    edx
c001e014:	6a 0f                	push   0xf
c001e016:	6a 00                	push   0x0
c001e018:	e8 e4 f1 ff ff       	call   c001d201 <combineColours(unsigned char, unsigned char)>
c001e01d:	59                   	pop    ecx
c001e01e:	5a                   	pop    edx
c001e01f:	0f b6 c0             	movzx  eax,al
c001e022:	50                   	push   eax
c001e023:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e028:	99                   	cdq    
c001e029:	f7 fb                	idiv   ebx
c001e02b:	99                   	cdq    
c001e02c:	f7 fb                	idiv   ebx
c001e02e:	8d 42 30             	lea    eax,[edx+0x30]
c001e031:	0f b6 c0             	movzx  eax,al
c001e034:	50                   	push   eax
c001e035:	e8 b6 f1 ff ff       	call   c001d1f0 <combineCharAndColour(char, unsigned char)>
c001e03a:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001e040:	59                   	pop    ecx
c001e041:	58                   	pop    eax
c001e042:	6a 0f                	push   0xf
c001e044:	6a 00                	push   0x0
c001e046:	e8 b6 f1 ff ff       	call   c001d201 <combineColours(unsigned char, unsigned char)>
c001e04b:	5a                   	pop    edx
c001e04c:	59                   	pop    ecx
c001e04d:	0f b6 c0             	movzx  eax,al
c001e050:	50                   	push   eax
c001e051:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e056:	99                   	cdq    
c001e057:	f7 fb                	idiv   ebx
c001e059:	83 c2 30             	add    edx,0x30
c001e05c:	0f b6 d2             	movzx  edx,dl
c001e05f:	52                   	push   edx
c001e060:	e8 8b f1 ff ff       	call   c001d1f0 <combineCharAndColour(char, unsigned char)>
c001e065:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001e06b:	58                   	pop    eax
c001e06c:	5a                   	pop    edx
c001e06d:	6a 0f                	push   0xf
c001e06f:	6a 00                	push   0x0
c001e071:	e8 8b f1 ff ff       	call   c001d201 <combineColours(unsigned char, unsigned char)>
c001e076:	59                   	pop    ecx
c001e077:	b9 10 27 00 00       	mov    ecx,0x2710
c001e07c:	5a                   	pop    edx
c001e07d:	0f b6 c0             	movzx  eax,al
c001e080:	50                   	push   eax
c001e081:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e086:	99                   	cdq    
c001e087:	f7 f9                	idiv   ecx
c001e089:	99                   	cdq    
c001e08a:	f7 fb                	idiv   ebx
c001e08c:	8d 42 30             	lea    eax,[edx+0x30]
c001e08f:	0f b6 c0             	movzx  eax,al
c001e092:	50                   	push   eax
c001e093:	e8 58 f1 ff ff       	call   c001d1f0 <combineCharAndColour(char, unsigned char)>
c001e098:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e09e:	59                   	pop    ecx
c001e09f:	58                   	pop    eax
c001e0a0:	6a 0f                	push   0xf
c001e0a2:	6a 00                	push   0x0
c001e0a4:	e8 58 f1 ff ff       	call   c001d201 <combineColours(unsigned char, unsigned char)>
c001e0a9:	5a                   	pop    edx
c001e0aa:	59                   	pop    ecx
c001e0ab:	0f b6 c0             	movzx  eax,al
c001e0ae:	50                   	push   eax
c001e0af:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e0b4:	99                   	cdq    
c001e0b5:	f7 fd                	idiv   ebp
c001e0b7:	99                   	cdq    
c001e0b8:	f7 fb                	idiv   ebx
c001e0ba:	8d 42 30             	lea    eax,[edx+0x30]
c001e0bd:	0f b6 c0             	movzx  eax,al
c001e0c0:	50                   	push   eax
c001e0c1:	e8 2a f1 ff ff       	call   c001d1f0 <combineCharAndColour(char, unsigned char)>
c001e0c6:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e0cc:	5d                   	pop    ebp
c001e0cd:	58                   	pop    eax
c001e0ce:	6a 0f                	push   0xf
c001e0d0:	6a 00                	push   0x0
c001e0d2:	e8 2a f1 ff ff       	call   c001d201 <combineColours(unsigned char, unsigned char)>
c001e0d7:	5a                   	pop    edx
c001e0d8:	59                   	pop    ecx
c001e0d9:	0f b6 c0             	movzx  eax,al
c001e0dc:	50                   	push   eax
c001e0dd:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e0e2:	99                   	cdq    
c001e0e3:	f7 ff                	idiv   edi
c001e0e5:	99                   	cdq    
c001e0e6:	f7 fb                	idiv   ebx
c001e0e8:	8d 42 30             	lea    eax,[edx+0x30]
c001e0eb:	0f b6 c0             	movzx  eax,al
c001e0ee:	50                   	push   eax
c001e0ef:	e8 fc f0 ff ff       	call   c001d1f0 <combineCharAndColour(char, unsigned char)>
c001e0f4:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e0fa:	5f                   	pop    edi
c001e0fb:	5d                   	pop    ebp
c001e0fc:	6a 0f                	push   0xf
c001e0fe:	6a 00                	push   0x0
c001e100:	e8 fc f0 ff ff       	call   c001d201 <combineColours(unsigned char, unsigned char)>
c001e105:	5a                   	pop    edx
c001e106:	59                   	pop    ecx
c001e107:	0f b6 c0             	movzx  eax,al
c001e10a:	50                   	push   eax
c001e10b:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e110:	99                   	cdq    
c001e111:	f7 fb                	idiv   ebx
c001e113:	99                   	cdq    
c001e114:	f7 fb                	idiv   ebx
c001e116:	8d 42 30             	lea    eax,[edx+0x30]
c001e119:	0f b6 c0             	movzx  eax,al
c001e11c:	50                   	push   eax
c001e11d:	e8 ce f0 ff ff       	call   c001d1f0 <combineCharAndColour(char, unsigned char)>
c001e122:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e128:	5f                   	pop    edi
c001e129:	5d                   	pop    ebp
c001e12a:	6a 0f                	push   0xf
c001e12c:	6a 00                	push   0x0
c001e12e:	e8 ce f0 ff ff       	call   c001d201 <combineColours(unsigned char, unsigned char)>
c001e133:	5a                   	pop    edx
c001e134:	59                   	pop    ecx
c001e135:	0f b6 c0             	movzx  eax,al
c001e138:	50                   	push   eax
c001e139:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e13e:	99                   	cdq    
c001e13f:	f7 fb                	idiv   ebx
c001e141:	83 c2 30             	add    edx,0x30
c001e144:	0f b6 d2             	movzx  edx,dl
c001e147:	52                   	push   edx
c001e148:	e8 a3 f0 ff ff       	call   c001d1f0 <combineCharAndColour(char, unsigned char)>
c001e14d:	83 c4 10             	add    esp,0x10
c001e150:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e156:	eb 05                	jmp    c001e15d <SATA::read(unsigned long long, int, void*)+0x245>
c001e158:	be 01 00 00 00       	mov    esi,0x1
c001e15d:	83 c4 0c             	add    esp,0xc
c001e160:	89 f0                	mov    eax,esi
c001e162:	5b                   	pop    ebx
c001e163:	5e                   	pop    esi
c001e164:	5f                   	pop    edi
c001e165:	5d                   	pop    ebp
c001e166:	c3                   	ret    
c001e167:	90                   	nop

c001e168 <SATA::write(unsigned long long, int, void*)>:
c001e168:	55                   	push   ebp
c001e169:	57                   	push   edi
c001e16a:	56                   	push   esi
c001e16b:	53                   	push   ebx
c001e16c:	83 ec 0c             	sub    esp,0xc
c001e16f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e173:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e177:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e17b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e17f:	8d 70 ff             	lea    esi,[eax-0x1]
c001e182:	b8 04 00 00 00       	mov    eax,0x4
c001e187:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001e18d:	0f 87 2c 02 00 00    	ja     c001e3bf <SATA::write(unsigned long long, int, void*)+0x257>
c001e193:	85 db                	test   ebx,ebx
c001e195:	b8 06 00 00 00       	mov    eax,0x6
c001e19a:	0f 84 1f 02 00 00    	je     c001e3bf <SATA::write(unsigned long long, int, void*)+0x257>
c001e1a0:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001e1a4:	c1 e6 09             	shl    esi,0x9
c001e1a7:	01 de                	add    esi,ebx
c001e1a9:	50                   	push   eax
c001e1aa:	89 d7                	mov    edi,edx
c001e1ac:	50                   	push   eax
c001e1ad:	83 c7 01             	add    edi,0x1
c001e1b0:	6a 01                	push   0x1
c001e1b2:	89 cd                	mov    ebp,ecx
c001e1b4:	53                   	push   ebx
c001e1b5:	83 d5 00             	adc    ebp,0x0
c001e1b8:	6a 01                	push   0x1
c001e1ba:	81 c3 00 02 00 00    	add    ebx,0x200
c001e1c0:	51                   	push   ecx
c001e1c1:	52                   	push   edx
c001e1c2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e1c6:	e8 fb fa ff ff       	call   c001dcc6 <SATA::access(unsigned long long, int, void*, bool)>
c001e1cb:	83 c4 20             	add    esp,0x20
c001e1ce:	39 f3                	cmp    ebx,esi
c001e1d0:	89 fa                	mov    edx,edi
c001e1d2:	89 e9                	mov    ecx,ebp
c001e1d4:	75 d3                	jne    c001e1a9 <SATA::write(unsigned long long, int, void*)+0x41>
c001e1d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e1da:	bd 10 27 00 00       	mov    ebp,0x2710
c001e1df:	bb 0a 00 00 00       	mov    ebx,0xa
c001e1e4:	01 05 b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,eax
c001e1ea:	50                   	push   eax
c001e1eb:	50                   	push   eax
c001e1ec:	6a 0f                	push   0xf
c001e1ee:	6a 00                	push   0x0
c001e1f0:	e8 0c f0 ff ff       	call   c001d201 <combineColours(unsigned char, unsigned char)>
c001e1f5:	5a                   	pop    edx
c001e1f6:	59                   	pop    ecx
c001e1f7:	0f b6 c0             	movzx  eax,al
c001e1fa:	50                   	push   eax
c001e1fb:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e200:	99                   	cdq    
c001e201:	f7 fd                	idiv   ebp
c001e203:	99                   	cdq    
c001e204:	f7 fb                	idiv   ebx
c001e206:	8d 42 30             	lea    eax,[edx+0x30]
c001e209:	0f b6 c0             	movzx  eax,al
c001e20c:	50                   	push   eax
c001e20d:	e8 de ef ff ff       	call   c001d1f0 <combineCharAndColour(char, unsigned char)>
c001e212:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001e218:	5e                   	pop    esi
c001e219:	5f                   	pop    edi
c001e21a:	bf e8 03 00 00       	mov    edi,0x3e8
c001e21f:	6a 0f                	push   0xf
c001e221:	6a 00                	push   0x0
c001e223:	e8 d9 ef ff ff       	call   c001d201 <combineColours(unsigned char, unsigned char)>
c001e228:	5a                   	pop    edx
c001e229:	59                   	pop    ecx
c001e22a:	0f b6 c0             	movzx  eax,al
c001e22d:	50                   	push   eax
c001e22e:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e233:	99                   	cdq    
c001e234:	f7 ff                	idiv   edi
c001e236:	99                   	cdq    
c001e237:	f7 fb                	idiv   ebx
c001e239:	8d 42 30             	lea    eax,[edx+0x30]
c001e23c:	0f b6 c0             	movzx  eax,al
c001e23f:	50                   	push   eax
c001e240:	e8 ab ef ff ff       	call   c001d1f0 <combineCharAndColour(char, unsigned char)>
c001e245:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001e24b:	5e                   	pop    esi
c001e24c:	be 64 00 00 00       	mov    esi,0x64
c001e251:	58                   	pop    eax
c001e252:	6a 0f                	push   0xf
c001e254:	6a 00                	push   0x0
c001e256:	e8 a6 ef ff ff       	call   c001d201 <combineColours(unsigned char, unsigned char)>
c001e25b:	5a                   	pop    edx
c001e25c:	59                   	pop    ecx
c001e25d:	0f b6 c0             	movzx  eax,al
c001e260:	50                   	push   eax
c001e261:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e266:	99                   	cdq    
c001e267:	f7 fe                	idiv   esi
c001e269:	99                   	cdq    
c001e26a:	f7 fb                	idiv   ebx
c001e26c:	8d 42 30             	lea    eax,[edx+0x30]
c001e26f:	0f b6 c0             	movzx  eax,al
c001e272:	50                   	push   eax
c001e273:	e8 78 ef ff ff       	call   c001d1f0 <combineCharAndColour(char, unsigned char)>
c001e278:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001e27e:	58                   	pop    eax
c001e27f:	5a                   	pop    edx
c001e280:	6a 0f                	push   0xf
c001e282:	6a 00                	push   0x0
c001e284:	e8 78 ef ff ff       	call   c001d201 <combineColours(unsigned char, unsigned char)>
c001e289:	59                   	pop    ecx
c001e28a:	5a                   	pop    edx
c001e28b:	0f b6 c0             	movzx  eax,al
c001e28e:	50                   	push   eax
c001e28f:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e294:	99                   	cdq    
c001e295:	f7 fb                	idiv   ebx
c001e297:	99                   	cdq    
c001e298:	f7 fb                	idiv   ebx
c001e29a:	8d 42 30             	lea    eax,[edx+0x30]
c001e29d:	0f b6 c0             	movzx  eax,al
c001e2a0:	50                   	push   eax
c001e2a1:	e8 4a ef ff ff       	call   c001d1f0 <combineCharAndColour(char, unsigned char)>
c001e2a6:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001e2ac:	59                   	pop    ecx
c001e2ad:	58                   	pop    eax
c001e2ae:	6a 0f                	push   0xf
c001e2b0:	6a 00                	push   0x0
c001e2b2:	e8 4a ef ff ff       	call   c001d201 <combineColours(unsigned char, unsigned char)>
c001e2b7:	5a                   	pop    edx
c001e2b8:	59                   	pop    ecx
c001e2b9:	0f b6 c0             	movzx  eax,al
c001e2bc:	50                   	push   eax
c001e2bd:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e2c2:	99                   	cdq    
c001e2c3:	f7 fb                	idiv   ebx
c001e2c5:	83 c2 30             	add    edx,0x30
c001e2c8:	0f b6 d2             	movzx  edx,dl
c001e2cb:	52                   	push   edx
c001e2cc:	e8 1f ef ff ff       	call   c001d1f0 <combineCharAndColour(char, unsigned char)>
c001e2d1:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001e2d7:	58                   	pop    eax
c001e2d8:	5a                   	pop    edx
c001e2d9:	6a 0f                	push   0xf
c001e2db:	6a 00                	push   0x0
c001e2dd:	e8 1f ef ff ff       	call   c001d201 <combineColours(unsigned char, unsigned char)>
c001e2e2:	59                   	pop    ecx
c001e2e3:	5a                   	pop    edx
c001e2e4:	0f b6 c0             	movzx  eax,al
c001e2e7:	50                   	push   eax
c001e2e8:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e2ed:	99                   	cdq    
c001e2ee:	f7 fd                	idiv   ebp
c001e2f0:	99                   	cdq    
c001e2f1:	f7 fb                	idiv   ebx
c001e2f3:	8d 42 30             	lea    eax,[edx+0x30]
c001e2f6:	0f b6 c0             	movzx  eax,al
c001e2f9:	50                   	push   eax
c001e2fa:	e8 f1 ee ff ff       	call   c001d1f0 <combineCharAndColour(char, unsigned char)>
c001e2ff:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e305:	59                   	pop    ecx
c001e306:	5d                   	pop    ebp
c001e307:	6a 0f                	push   0xf
c001e309:	6a 00                	push   0x0
c001e30b:	e8 f1 ee ff ff       	call   c001d201 <combineColours(unsigned char, unsigned char)>
c001e310:	5a                   	pop    edx
c001e311:	59                   	pop    ecx
c001e312:	0f b6 c0             	movzx  eax,al
c001e315:	50                   	push   eax
c001e316:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e31b:	99                   	cdq    
c001e31c:	f7 ff                	idiv   edi
c001e31e:	99                   	cdq    
c001e31f:	f7 fb                	idiv   ebx
c001e321:	8d 42 30             	lea    eax,[edx+0x30]
c001e324:	0f b6 c0             	movzx  eax,al
c001e327:	50                   	push   eax
c001e328:	e8 c3 ee ff ff       	call   c001d1f0 <combineCharAndColour(char, unsigned char)>
c001e32d:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e333:	5f                   	pop    edi
c001e334:	5d                   	pop    ebp
c001e335:	6a 0f                	push   0xf
c001e337:	6a 00                	push   0x0
c001e339:	e8 c3 ee ff ff       	call   c001d201 <combineColours(unsigned char, unsigned char)>
c001e33e:	5a                   	pop    edx
c001e33f:	59                   	pop    ecx
c001e340:	0f b6 c0             	movzx  eax,al
c001e343:	50                   	push   eax
c001e344:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e349:	99                   	cdq    
c001e34a:	f7 fe                	idiv   esi
c001e34c:	99                   	cdq    
c001e34d:	f7 fb                	idiv   ebx
c001e34f:	8d 42 30             	lea    eax,[edx+0x30]
c001e352:	0f b6 c0             	movzx  eax,al
c001e355:	50                   	push   eax
c001e356:	e8 95 ee ff ff       	call   c001d1f0 <combineCharAndColour(char, unsigned char)>
c001e35b:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e361:	5e                   	pop    esi
c001e362:	5f                   	pop    edi
c001e363:	6a 0f                	push   0xf
c001e365:	6a 00                	push   0x0
c001e367:	e8 95 ee ff ff       	call   c001d201 <combineColours(unsigned char, unsigned char)>
c001e36c:	5d                   	pop    ebp
c001e36d:	5a                   	pop    edx
c001e36e:	0f b6 c0             	movzx  eax,al
c001e371:	50                   	push   eax
c001e372:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e377:	99                   	cdq    
c001e378:	f7 fb                	idiv   ebx
c001e37a:	99                   	cdq    
c001e37b:	f7 fb                	idiv   ebx
c001e37d:	8d 42 30             	lea    eax,[edx+0x30]
c001e380:	0f b6 c0             	movzx  eax,al
c001e383:	50                   	push   eax
c001e384:	e8 67 ee ff ff       	call   c001d1f0 <combineCharAndColour(char, unsigned char)>
c001e389:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e38f:	59                   	pop    ecx
c001e390:	5e                   	pop    esi
c001e391:	6a 0f                	push   0xf
c001e393:	6a 00                	push   0x0
c001e395:	e8 67 ee ff ff       	call   c001d201 <combineColours(unsigned char, unsigned char)>
c001e39a:	5f                   	pop    edi
c001e39b:	5d                   	pop    ebp
c001e39c:	0f b6 c0             	movzx  eax,al
c001e39f:	50                   	push   eax
c001e3a0:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e3a5:	99                   	cdq    
c001e3a6:	f7 fb                	idiv   ebx
c001e3a8:	83 c2 30             	add    edx,0x30
c001e3ab:	0f b6 d2             	movzx  edx,dl
c001e3ae:	52                   	push   edx
c001e3af:	e8 3c ee ff ff       	call   c001d1f0 <combineCharAndColour(char, unsigned char)>
c001e3b4:	83 c4 10             	add    esp,0x10
c001e3b7:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e3bd:	31 c0                	xor    eax,eax
c001e3bf:	83 c4 0c             	add    esp,0xc
c001e3c2:	5b                   	pop    ebx
c001e3c3:	5e                   	pop    esi
c001e3c4:	5f                   	pop    edi
c001e3c5:	5d                   	pop    ebp
c001e3c6:	c3                   	ret    
c001e3c7:	90                   	nop

c001e3c8 <SATAPI::write(unsigned long long, int, void*)>:
c001e3c8:	b8 03 00 00 00       	mov    eax,0x3
c001e3cd:	c3                   	ret    

c001e3ce <SATAPI::close(int, int, void*)>:
c001e3ce:	83 ec 0c             	sub    esp,0xc
c001e3d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3d5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e3db:	85 c0                	test   eax,eax
c001e3dd:	74 0c                	je     c001e3eb <SATAPI::close(int, int, void*)+0x1d>
c001e3df:	8b 10                	mov    edx,DWORD PTR [eax]
c001e3e1:	83 ec 0c             	sub    esp,0xc
c001e3e4:	50                   	push   eax
c001e3e5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e3e8:	83 c4 10             	add    esp,0x10
c001e3eb:	31 c0                	xor    eax,eax
c001e3ed:	83 c4 0c             	add    esp,0xc
c001e3f0:	c3                   	ret    
c001e3f1:	90                   	nop

c001e3f2 <SATAPI::SATAPI()>:
c001e3f2:	83 ec 0c             	sub    esp,0xc
c001e3f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3f9:	83 ec 04             	sub    esp,0x4
c001e3fc:	68 00 08 00 00       	push   0x800
c001e401:	68 9c 34 02 c0       	push   0xc002349c
c001e406:	50                   	push   eax
c001e407:	e8 06 ea fe ff       	call   c000ce12 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e40c:	83 c4 10             	add    esp,0x10
c001e40f:	ba 90 35 02 c0       	mov    edx,0xc0023590
c001e414:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e418:	89 10                	mov    DWORD PTR [eax],edx
c001e41a:	90                   	nop
c001e41b:	83 c4 0c             	add    esp,0xc
c001e41e:	c3                   	ret    
c001e41f:	90                   	nop

c001e420 <SATAPI::diskRemoved()>:
c001e420:	c3                   	ret    
c001e421:	90                   	nop

c001e422 <SATAPI::diskInserted()>:
c001e422:	83 ec 18             	sub    esp,0x18
c001e425:	68 a8 34 02 c0       	push   0xc00234a8
c001e42a:	e8 db c4 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e42f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e433:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001e43a:	83 c4 1c             	add    esp,0x1c
c001e43d:	c3                   	ret    

c001e43e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001e43e:	55                   	push   ebp
c001e43f:	57                   	push   edi
c001e440:	56                   	push   esi
c001e441:	53                   	push   ebx
c001e442:	83 ec 34             	sub    esp,0x34
c001e445:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e449:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001e44d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e451:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e455:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e459:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001e45f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e465:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e469:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001e46f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e473:	83 c0 02             	add    eax,0x2
c001e476:	c1 e0 07             	shl    eax,0x7
c001e479:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e47d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e481:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e485:	c1 e0 07             	shl    eax,0x7
c001e488:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e48c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e490:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e49a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e49e:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e4a4:	e8 ff e4 ff ff       	call   c001c9a8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e4a9:	83 c4 10             	add    esp,0x10
c001e4ac:	89 c2                	mov    edx,eax
c001e4ae:	b8 01 00 00 00       	mov    eax,0x1
c001e4b3:	83 fa ff             	cmp    edx,0xffffffff
c001e4b6:	0f 84 5f 02 00 00    	je     c001e71b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001e4bc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e4c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4c4:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e4ca:	8b 00                	mov    eax,DWORD PTR [eax]
c001e4cc:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e4d2:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e4d8:	89 d1                	mov    ecx,edx
c001e4da:	c1 e1 05             	shl    ecx,0x5
c001e4dd:	01 c8                	add    eax,ecx
c001e4df:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e4e1:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001e4e7:	81 c9 25 00 01 00    	or     ecx,0x10025
c001e4ed:	89 08                	mov    DWORD PTR [eax],ecx
c001e4ef:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e4f5:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001e4fb:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001e501:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001e504:	50                   	push   eax
c001e505:	68 90 00 00 00       	push   0x90
c001e50a:	6a 00                	push   0x0
c001e50c:	53                   	push   ebx
c001e50d:	e8 de 1f fe ff       	call   c00004f0 <memset>
c001e512:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e515:	b9 0c 00 00 00       	mov    ecx,0xc
c001e51a:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e51e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e520:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e526:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e52a:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e52e:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e534:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e538:	48                   	dec    eax
c001e539:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e53e:	89 c1                	mov    ecx,eax
c001e540:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e546:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e54b:	09 c8                	or     eax,ecx
c001e54d:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e553:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e559:	83 c8 80             	or     eax,0xffffff80
c001e55c:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e562:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e565:	25 00 7f 00 00       	and    eax,0x7f00
c001e56a:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e56f:	66 89 03             	mov    WORD PTR [ebx],ax
c001e572:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e576:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001e57a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e57e:	c1 e8 10             	shr    eax,0x10
c001e581:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e584:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e588:	c1 e8 18             	shr    eax,0x18
c001e58b:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001e58e:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e592:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e595:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e599:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e59c:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e5a0:	83 c4 10             	add    esp,0x10
c001e5a3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e5a7:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e5ab:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e5af:	31 c0                	xor    eax,eax
c001e5b1:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001e5b7:	80 e1 88             	and    cl,0x88
c001e5ba:	74 0a                	je     c001e5c6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001e5bc:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e5c1:	74 0a                	je     c001e5cd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c001e5c3:	40                   	inc    eax
c001e5c4:	eb eb                	jmp    c001e5b1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c001e5c6:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e5cb:	75 43                	jne    c001e610 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c001e5cd:	83 ec 0c             	sub    esp,0xc
c001e5d0:	68 c0 34 02 c0       	push   0xc00234c0
c001e5d5:	e8 30 c3 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e5da:	58                   	pop    eax
c001e5db:	5a                   	pop    edx
c001e5dc:	68 d5 34 02 c0       	push   0xc00234d5
c001e5e1:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001e5e7:	e8 c0 a4 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001e5ec:	59                   	pop    ecx
c001e5ed:	5b                   	pop    ebx
c001e5ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e5f2:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e5f8:	e8 45 e4 ff ff       	call   c001ca42 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e5fd:	5e                   	pop    esi
c001e5fe:	5f                   	pop    edi
c001e5ff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e603:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e609:	e8 14 e4 ff ff       	call   c001ca22 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e60e:	eb 48                	jmp    c001e658 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c001e610:	b8 01 00 00 00       	mov    eax,0x1
c001e615:	88 d1                	mov    cl,dl
c001e617:	d3 e0                	shl    eax,cl
c001e619:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c001e61e:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c001e624:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e628:	89 c7                	mov    edi,eax
c001e62a:	c1 e3 07             	shl    ebx,0x7
c001e62d:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001e631:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001e637:	85 c7                	test   edi,eax
c001e639:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001e63f:	0f 84 a3 00 00 00    	je     c001e6e8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c001e645:	0f ba e0 1e          	bt     eax,0x1e
c001e649:	73 1a                	jae    c001e665 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c001e64b:	83 ec 0c             	sub    esp,0xc
c001e64e:	68 e7 34 02 c0       	push   0xc00234e7
c001e653:	e8 b2 c2 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e658:	83 c4 10             	add    esp,0x10
c001e65b:	b8 01 00 00 00       	mov    eax,0x1
c001e660:	e9 b6 00 00 00       	jmp    c001e71b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001e665:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c001e66b:	83 f8 0d             	cmp    eax,0xd
c001e66e:	77 0a                	ja     c001e67a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c001e670:	83 ec 0c             	sub    esp,0xc
c001e673:	68 c8 00 00 00       	push   0xc8
c001e678:	eb 28                	jmp    c001e6a2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e67a:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c001e680:	83 f8 0d             	cmp    eax,0xd
c001e683:	77 0a                	ja     c001e68f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c001e685:	83 ec 0c             	sub    esp,0xc
c001e688:	68 58 02 00 00       	push   0x258
c001e68d:	eb 13                	jmp    c001e6a2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e68f:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c001e695:	83 f8 06             	cmp    eax,0x6
c001e698:	77 10                	ja     c001e6aa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c001e69a:	83 ec 0c             	sub    esp,0xc
c001e69d:	68 dc 05 00 00       	push   0x5dc
c001e6a2:	e8 69 7d ff ff       	call   c0016410 <milliTenthSleep(unsigned int)>
c001e6a7:	83 c4 10             	add    esp,0x10
c001e6aa:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e6ae:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e6b1:	75 06                	jne    c001e6b9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c001e6b3:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e6b7:	74 15                	je     c001e6ce <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e6b9:	83 fe 06             	cmp    esi,0x6
c001e6bc:	77 10                	ja     c001e6ce <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e6be:	83 ec 0c             	sub    esp,0xc
c001e6c1:	68 c4 09 00 00       	push   0x9c4
c001e6c6:	e8 45 7d ff ff       	call   c0016410 <milliTenthSleep(unsigned int)>
c001e6cb:	83 c4 10             	add    esp,0x10
c001e6ce:	46                   	inc    esi
c001e6cf:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c001e6d5:	0f 85 56 ff ff ff    	jne    c001e631 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c001e6db:	83 ec 0c             	sub    esp,0xc
c001e6de:	68 fa 34 02 c0       	push   0xc00234fa
c001e6e3:	e9 6b ff ff ff       	jmp    c001e653 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e6e8:	0f ba e0 1e          	bt     eax,0x1e
c001e6ec:	73 0d                	jae    c001e6fb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c001e6ee:	83 ec 0c             	sub    esp,0xc
c001e6f1:	68 0e 35 02 c0       	push   0xc002350e
c001e6f6:	e9 58 ff ff ff       	jmp    c001e653 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e6fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e700:	74 17                	je     c001e719 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e702:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e707:	74 10                	je     c001e719 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e709:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e70f:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e713:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e717:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e719:	31 c0                	xor    eax,eax
c001e71b:	83 c4 2c             	add    esp,0x2c
c001e71e:	5b                   	pop    ebx
c001e71f:	5e                   	pop    esi
c001e720:	5f                   	pop    edi
c001e721:	5d                   	pop    ebp
c001e722:	c3                   	ret    
c001e723:	90                   	nop

c001e724 <SATAPI::eject()>:
c001e724:	57                   	push   edi
c001e725:	b9 03 00 00 00       	mov    ecx,0x3
c001e72a:	83 ec 18             	sub    esp,0x18
c001e72d:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e731:	fc                   	cld    
c001e732:	31 c0                	xor    eax,eax
c001e734:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e736:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e73b:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e740:	50                   	push   eax
c001e741:	6a 00                	push   0x0
c001e743:	6a 00                	push   0x0
c001e745:	6a 00                	push   0x0
c001e747:	6a 00                	push   0x0
c001e749:	6a 02                	push   0x2
c001e74b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e74f:	50                   	push   eax
c001e750:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e754:	e8 e5 fc ff ff       	call   c001e43e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e759:	83 c4 38             	add    esp,0x38
c001e75c:	31 c0                	xor    eax,eax
c001e75e:	5f                   	pop    edi
c001e75f:	c3                   	ret    

c001e760 <SATAPI::detectMedia()>:
c001e760:	53                   	push   ebx
c001e761:	83 ec 14             	sub    esp,0x14
c001e764:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e768:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e76e:	e8 25 00 ff ff       	call   c000e798 <VCache::writeWriteBuffer()>
c001e773:	59                   	pop    ecx
c001e774:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e77a:	e8 09 00 ff ff       	call   c000e788 <VCache::invalidateReadBuffer()>
c001e77f:	c7 04 24 23 35 02 c0 	mov    DWORD PTR [esp],0xc0023523
c001e786:	e8 7f c1 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e78b:	83 c4 10             	add    esp,0x10
c001e78e:	31 c0                	xor    eax,eax
c001e790:	8b 14 85 80 b8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4780]
c001e797:	85 d2                	test   edx,edx
c001e799:	74 0f                	je     c001e7aa <SATAPI::detectMedia()+0x4a>
c001e79b:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e7a1:	75 07                	jne    c001e7aa <SATAPI::detectMedia()+0x4a>
c001e7a3:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e7aa:	40                   	inc    eax
c001e7ab:	83 f8 1a             	cmp    eax,0x1a
c001e7ae:	75 e0                	jne    c001e790 <SATAPI::detectMedia()+0x30>
c001e7b0:	83 c4 08             	add    esp,0x8
c001e7b3:	5b                   	pop    ebx
c001e7b4:	c3                   	ret    
c001e7b5:	90                   	nop

c001e7b6 <SATAPI::open(int, int, void*)>:
c001e7b6:	56                   	push   esi
c001e7b7:	53                   	push   ebx
c001e7b8:	51                   	push   ecx
c001e7b9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e7bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e7c1:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e7cb:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e7d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e7d5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e7df:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e7e9:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e7f0:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e7f6:	e8 e7 95 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001e7fb:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e801:	89 c6                	mov    esi,eax
c001e803:	e8 da 95 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001e808:	81 c6 00 10 00 00    	add    esi,0x1000
c001e80e:	39 c6                	cmp    esi,eax
c001e810:	74 10                	je     c001e822 <SATAPI::open(int, int, void*)+0x6c>
c001e812:	83 ec 0c             	sub    esp,0xc
c001e815:	68 38 35 02 c0       	push   0xc0023538
c001e81a:	e8 ec 2d ff ff       	call   c001160b <KePanic(char const*)>
c001e81f:	83 c4 10             	add    esp,0x10
c001e822:	83 ec 0c             	sub    esp,0xc
c001e825:	6a 02                	push   0x2
c001e827:	e8 c9 ad fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001e82c:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e832:	6a 03                	push   0x3
c001e834:	50                   	push   eax
c001e835:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e83b:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001e841:	e8 b8 b4 fe ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001e846:	83 c4 14             	add    esp,0x14
c001e849:	68 78 01 00 00       	push   0x178
c001e84e:	e8 80 92 fe ff       	call   c0007ad3 <malloc>
c001e853:	83 c4 0c             	add    esp,0xc
c001e856:	6a 00                	push   0x0
c001e858:	68 ff ff ff 7f       	push   0x7fffffff
c001e85d:	6a 00                	push   0x0
c001e85f:	6a 00                	push   0x0
c001e861:	53                   	push   ebx
c001e862:	68 4e 35 02 c0       	push   0xc002354e
c001e867:	89 c6                	mov    esi,eax
c001e869:	50                   	push   eax
c001e86a:	e8 83 f3 fe ff       	call   c000dbf2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e86f:	83 c4 14             	add    esp,0x14
c001e872:	56                   	push   esi
c001e873:	e8 3a f4 fe ff       	call   c000dcb2 <LogicalDisk::assignDriveLetter()>
c001e878:	5a                   	pop    edx
c001e879:	59                   	pop    ecx
c001e87a:	0f be c0             	movsx  eax,al
c001e87d:	50                   	push   eax
c001e87e:	68 a0 33 02 c0       	push   0xc00233a0
c001e883:	e8 82 c0 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e888:	58                   	pop    eax
c001e889:	5a                   	pop    edx
c001e88a:	56                   	push   esi
c001e88b:	53                   	push   ebx
c001e88c:	e8 b3 e1 fe ff       	call   c000ca44 <Device::addChild(Device*)>
c001e891:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e897:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e89a:	e8 db e5 fe ff       	call   c000ce7a <PhysicalDisk::startCache()>
c001e89f:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e8a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e8a9:	e8 b2 fe ff ff       	call   c001e760 <SATAPI::detectMedia()>
c001e8ae:	83 c4 14             	add    esp,0x14
c001e8b1:	31 c0                	xor    eax,eax
c001e8b3:	5b                   	pop    ebx
c001e8b4:	5e                   	pop    esi
c001e8b5:	c3                   	ret    

c001e8b6 <SATAPI::read(unsigned long long, int, void*)>:
c001e8b6:	55                   	push   ebp
c001e8b7:	57                   	push   edi
c001e8b8:	56                   	push   esi
c001e8b9:	53                   	push   ebx
c001e8ba:	83 ec 3c             	sub    esp,0x3c
c001e8bd:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001e8c1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e8c5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001e8c9:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e8cd:	83 fd 04             	cmp    ebp,0x4
c001e8d0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e8d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e8d8:	7e 10                	jle    c001e8ea <SATAPI::read(unsigned long long, int, void*)+0x34>
c001e8da:	83 ec 0c             	sub    esp,0xc
c001e8dd:	68 5c 35 02 c0       	push   0xc002355c
c001e8e2:	e8 24 2d ff ff       	call   c001160b <KePanic(char const*)>
c001e8e7:	83 c4 10             	add    esp,0x10
c001e8ea:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e8f0:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e8f6:	51                   	push   ecx
c001e8f7:	50                   	push   eax
c001e8f8:	83 c0 02             	add    eax,0x2
c001e8fb:	c1 e0 07             	shl    eax,0x7
c001e8fe:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e904:	50                   	push   eax
c001e905:	52                   	push   edx
c001e906:	e8 61 e1 ff ff       	call   c001ca6c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e90b:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e90f:	b9 03 00 00 00       	mov    ecx,0x3
c001e914:	fc                   	cld    
c001e915:	31 c0                	xor    eax,eax
c001e917:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e919:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e91e:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e923:	83 c4 0c             	add    esp,0xc
c001e926:	6a 00                	push   0x0
c001e928:	6a 00                	push   0x0
c001e92a:	6a 00                	push   0x0
c001e92c:	6a 00                	push   0x0
c001e92e:	6a 02                	push   0x2
c001e930:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e934:	50                   	push   eax
c001e935:	53                   	push   ebx
c001e936:	e8 03 fb ff ff       	call   c001e43e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e93b:	83 c4 20             	add    esp,0x20
c001e93e:	85 c0                	test   eax,eax
c001e940:	89 c6                	mov    esi,eax
c001e942:	75 46                	jne    c001e98a <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001e944:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e948:	b9 03 00 00 00       	mov    ecx,0x3
c001e94d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e94f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e953:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e958:	0f c8                	bswap  eax
c001e95a:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e95e:	89 e8                	mov    eax,ebp
c001e960:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e964:	50                   	push   eax
c001e965:	55                   	push   ebp
c001e966:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001e96a:	c1 e5 0b             	shl    ebp,0xb
c001e96d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e971:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e975:	55                   	push   ebp
c001e976:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e97a:	50                   	push   eax
c001e97b:	53                   	push   ebx
c001e97c:	e8 bd fa ff ff       	call   c001e43e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e981:	83 c4 20             	add    esp,0x20
c001e984:	85 c0                	test   eax,eax
c001e986:	89 c6                	mov    esi,eax
c001e988:	74 0c                	je     c001e996 <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001e98a:	83 ec 0c             	sub    esp,0xc
c001e98d:	53                   	push   ebx
c001e98e:	e8 cd fd ff ff       	call   c001e760 <SATAPI::detectMedia()>
c001e993:	83 c4 10             	add    esp,0x10
c001e996:	83 c4 3c             	add    esp,0x3c
c001e999:	89 f0                	mov    eax,esi
c001e99b:	5b                   	pop    ebx
c001e99c:	5e                   	pop    esi
c001e99d:	5f                   	pop    edi
c001e99e:	5d                   	pop    ebp
c001e99f:	c3                   	ret    

c001e9a0 <IOAPIC::close(int, int, void*)>:
c001e9a0:	b8 00 00 00 00       	mov    eax,0x0
c001e9a5:	c3                   	ret    

c001e9a6 <apicGetBase()>:
c001e9a6:	55                   	push   ebp
c001e9a7:	89 e5                	mov    ebp,esp
c001e9a9:	83 ec 18             	sub    esp,0x18
c001e9ac:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e9b1:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e9b7:	83 e0 08             	and    eax,0x8
c001e9ba:	0f b6 c0             	movzx  eax,al
c001e9bd:	85 c0                	test   eax,eax
c001e9bf:	75 07                	jne    c001e9c8 <apicGetBase()+0x22>
c001e9c1:	b8 00 00 00 00       	mov    eax,0x0
c001e9c6:	eb 21                	jmp    c001e9e9 <apicGetBase()+0x43>
c001e9c8:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e9cd:	83 ec 08             	sub    esp,0x8
c001e9d0:	6a 1b                	push   0x1b
c001e9d2:	50                   	push   eax
c001e9d3:	e8 0a 87 fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c001e9d8:	83 c4 10             	add    esp,0x10
c001e9db:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e9de:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e9e1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e9e4:	25 00 00 ff ff       	and    eax,0xffff0000
c001e9e9:	c9                   	leave  
c001e9ea:	c3                   	ret    
c001e9eb:	90                   	nop

c001e9ec <IOAPIC::IOAPIC()>:
c001e9ec:	83 ec 0c             	sub    esp,0xc
c001e9ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9f3:	83 ec 08             	sub    esp,0x8
c001e9f6:	68 c0 35 02 c0       	push   0xc00235c0
c001e9fb:	50                   	push   eax
c001e9fc:	e8 db e1 fe ff       	call   c000cbdc <Device::Device(char const*)>
c001ea01:	83 c4 10             	add    esp,0x10
c001ea04:	ba d0 35 02 c0       	mov    edx,0xc00235d0
c001ea09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea0d:	89 10                	mov    DWORD PTR [eax],edx
c001ea0f:	90                   	nop
c001ea10:	83 c4 0c             	add    esp,0xc
c001ea13:	c3                   	ret    

c001ea14 <apicOpen()>:
c001ea14:	55                   	push   ebp
c001ea15:	89 e5                	mov    ebp,esp
c001ea17:	53                   	push   ebx
c001ea18:	83 ec 34             	sub    esp,0x34
c001ea1b:	a0 00 d1 02 c0       	mov    al,ds:0xc002d100
c001ea20:	83 f0 01             	xor    eax,0x1
c001ea23:	0f b6 c0             	movzx  eax,al
c001ea26:	85 c0                	test   eax,eax
c001ea28:	0f 84 a3 00 00 00    	je     c001ead1 <apicOpen()+0xbd>
c001ea2e:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001ea32:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c001ea37:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001ea3b:	0f b6 c0             	movzx  eax,al
c001ea3e:	39 c2                	cmp    edx,eax
c001ea40:	0f 83 84 00 00 00    	jae    c001eaca <apicOpen()+0xb6>
c001ea46:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001ea4d:	83 ec 0c             	sub    esp,0xc
c001ea50:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001ea53:	e8 7b 90 fe ff       	call   c0007ad3 <malloc>
c001ea58:	83 c4 10             	add    esp,0x10
c001ea5b:	89 c3                	mov    ebx,eax
c001ea5d:	83 ec 0c             	sub    esp,0xc
c001ea60:	53                   	push   ebx
c001ea61:	e8 86 ff ff ff       	call   c001e9ec <IOAPIC::IOAPIC()>
c001ea66:	83 c4 10             	add    esp,0x10
c001ea69:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001ea6c:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001ea70:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001ea73:	89 14 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],edx
c001ea7a:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c001ea7f:	83 c0 01             	add    eax,0x1
c001ea82:	a3 c0 d0 02 c0       	mov    ds:0xc002d0c0,eax
c001ea87:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001ea8c:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001ea92:	83 ec 08             	sub    esp,0x8
c001ea95:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001ea98:	50                   	push   eax
c001ea99:	e8 a6 df fe ff       	call   c000ca44 <Device::addChild(Device*)>
c001ea9e:	83 c4 10             	add    esp,0x10
c001eaa1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001eaa4:	8b 00                	mov    eax,DWORD PTR [eax]
c001eaa6:	83 c0 08             	add    eax,0x8
c001eaa9:	8b 00                	mov    eax,DWORD PTR [eax]
c001eaab:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001eaaf:	6a 00                	push   0x0
c001eab1:	6a 00                	push   0x0
c001eab3:	52                   	push   edx
c001eab4:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001eab7:	ff d0                	call   eax
c001eab9:	83 c4 10             	add    esp,0x10
c001eabc:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001eabf:	83 c0 01             	add    eax,0x1
c001eac2:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001eac5:	e9 68 ff ff ff       	jmp    c001ea32 <apicOpen()+0x1e>
c001eaca:	c6 05 00 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d100,0x1
c001ead1:	e8 d0 fe ff ff       	call   c001e9a6 <apicGetBase()>
c001ead6:	05 f0 00 00 00       	add    eax,0xf0
c001eadb:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001eade:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001eae1:	8b 00                	mov    eax,DWORD PTR [eax]
c001eae3:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001eae6:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001eaed:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001eaf4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001eaf7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001eafa:	89 10                	mov    DWORD PTR [eax],edx
c001eafc:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001eb03:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c001eb08:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001eb0b:	7d 7c                	jge    c001eb89 <apicOpen()+0x175>
c001eb0d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eb10:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001eb17:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001eb1a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eb1d:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001eb24:	c1 e8 08             	shr    eax,0x8
c001eb27:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001eb2b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eb2e:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001eb35:	c1 e8 18             	shr    eax,0x18
c001eb38:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001eb3b:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001eb3f:	3d ff 00 00 00       	cmp    eax,0xff
c001eb44:	75 3a                	jne    c001eb80 <apicOpen()+0x16c>
c001eb46:	e8 5b fe ff ff       	call   c001e9a6 <apicGetBase()>
c001eb4b:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001eb4f:	83 fa 01             	cmp    edx,0x1
c001eb52:	75 07                	jne    c001eb5b <apicOpen()+0x147>
c001eb54:	ba 60 03 00 00       	mov    edx,0x360
c001eb59:	eb 05                	jmp    c001eb60 <apicOpen()+0x14c>
c001eb5b:	ba 50 03 00 00       	mov    edx,0x350
c001eb60:	01 d0                	add    eax,edx
c001eb62:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001eb65:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001eb68:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb6a:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001eb6d:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001eb74:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001eb78:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001eb7b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001eb7e:	89 10                	mov    DWORD PTR [eax],edx
c001eb80:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001eb84:	e9 7a ff ff ff       	jmp    c001eb03 <apicOpen()+0xef>
c001eb89:	90                   	nop
c001eb8a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001eb8d:	c9                   	leave  
c001eb8e:	c3                   	ret    
c001eb8f:	90                   	nop

c001eb90 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001eb90:	55                   	push   ebp
c001eb91:	89 e5                	mov    ebp,esp
c001eb93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb96:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001eb9c:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001eb9f:	72 1d                	jb     c001ebbe <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001eba1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eba4:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001ebaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebad:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001ebb3:	01 d0                	add    eax,edx
c001ebb5:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ebb8:	73 04                	jae    c001ebbe <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ebba:	b0 01                	mov    al,0x1
c001ebbc:	eb 02                	jmp    c001ebc0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001ebbe:	b0 00                	mov    al,0x0
c001ebc0:	5d                   	pop    ebp
c001ebc1:	c3                   	ret    

c001ebc2 <IOAPIC::read(int)>:
c001ebc2:	55                   	push   ebp
c001ebc3:	89 e5                	mov    ebp,esp
c001ebc5:	83 ec 10             	sub    esp,0x10
c001ebc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebcb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ebd1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ebd4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ebd7:	0f b6 d0             	movzx  edx,al
c001ebda:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ebdd:	89 10                	mov    DWORD PTR [eax],edx
c001ebdf:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ebe2:	83 c0 10             	add    eax,0x10
c001ebe5:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebe7:	c9                   	leave  
c001ebe8:	c3                   	ret    
c001ebe9:	90                   	nop

c001ebea <IOAPIC::open(int, int, void*)>:
c001ebea:	55                   	push   ebp
c001ebeb:	89 e5                	mov    ebp,esp
c001ebed:	57                   	push   edi
c001ebee:	56                   	push   esi
c001ebef:	53                   	push   ebx
c001ebf0:	83 ec 04             	sub    esp,0x4
c001ebf3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebf6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001ebf9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ebff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec02:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ec08:	8b 14 85 20 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd43e0]
c001ec0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec12:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ec18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec1b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ec21:	8b 14 85 a0 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4360]
c001ec28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec2b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001ec31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec34:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001ec3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec3d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ec43:	0f b6 f0             	movzx  esi,al
c001ec46:	89 d0                	mov    eax,edx
c001ec48:	ba 00 00 00 00       	mov    edx,0x0
c001ec4d:	89 c7                	mov    edi,eax
c001ec4f:	83 e7 ff             	and    edi,0xffffffff
c001ec52:	89 f9                	mov    ecx,edi
c001ec54:	0f b6 da             	movzx  ebx,dl
c001ec57:	89 c8                	mov    eax,ecx
c001ec59:	89 da                	mov    edx,ebx
c001ec5b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001ec5e:	8d 5e 08             	lea    ebx,[esi+0x8]
c001ec61:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001ec65:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001ec69:	83 e0 00             	and    eax,0x0
c001ec6c:	09 d0                	or     eax,edx
c001ec6e:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ec72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec75:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ec7b:	8d 50 01             	lea    edx,[eax+0x1]
c001ec7e:	88 d1                	mov    cl,dl
c001ec80:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001ec83:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001ec89:	0f b6 d0             	movzx  edx,al
c001ec8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec8f:	83 c2 08             	add    edx,0x8
c001ec92:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ec96:	0f b6 c9             	movzx  ecx,cl
c001ec99:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001ec9f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001eca3:	6a 01                	push   0x1
c001eca5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eca8:	e8 15 ff ff ff       	call   c001ebc2 <IOAPIC::read(int)>
c001ecad:	83 c4 08             	add    esp,0x8
c001ecb0:	c1 f8 10             	sar    eax,0x10
c001ecb3:	0f b6 c0             	movzx  eax,al
c001ecb6:	8d 50 01             	lea    edx,[eax+0x1]
c001ecb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ecbc:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001ecc2:	b8 00 00 00 00       	mov    eax,0x0
c001ecc7:	8d 65 f4             	lea    esp,[ebp-0xc]
c001ecca:	5b                   	pop    ebx
c001eccb:	5e                   	pop    esi
c001eccc:	5f                   	pop    edi
c001eccd:	5d                   	pop    ebp
c001ecce:	c3                   	ret    
c001eccf:	90                   	nop

c001ecd0 <IOAPIC::write(int, int)>:
c001ecd0:	55                   	push   ebp
c001ecd1:	89 e5                	mov    ebp,esp
c001ecd3:	83 ec 10             	sub    esp,0x10
c001ecd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ecd9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ecdf:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ece2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ece5:	0f b6 d0             	movzx  edx,al
c001ece8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001eceb:	89 10                	mov    DWORD PTR [eax],edx
c001eced:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ecf0:	8d 50 10             	lea    edx,[eax+0x10]
c001ecf3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ecf6:	89 02                	mov    DWORD PTR [edx],eax
c001ecf8:	90                   	nop
c001ecf9:	c9                   	leave  
c001ecfa:	c3                   	ret    
c001ecfb:	90                   	nop

c001ecfc <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001ecfc:	55                   	push   ebp
c001ecfd:	89 e5                	mov    ebp,esp
c001ecff:	53                   	push   ebx
c001ed00:	83 ec 2c             	sub    esp,0x2c
c001ed03:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ed06:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001ed09:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001ed0c:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001ed0f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001ed12:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ed15:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ed18:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001ed1b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001ed1e:	88 d8                	mov    al,bl
c001ed20:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001ed23:	88 c8                	mov    al,cl
c001ed25:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001ed28:	88 d0                	mov    al,dl
c001ed2a:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001ed2d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001ed31:	83 c0 08             	add    eax,0x8
c001ed34:	d1 e0                	shl    eax,1
c001ed36:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001ed39:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001ed3d:	83 c0 08             	add    eax,0x8
c001ed40:	d1 e0                	shl    eax,1
c001ed42:	83 c0 01             	add    eax,0x1
c001ed45:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001ed48:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ed4b:	50                   	push   eax
c001ed4c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed4f:	e8 6e fe ff ff       	call   c001ebc2 <IOAPIC::read(int)>
c001ed54:	83 c4 08             	add    esp,0x8
c001ed57:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ed5a:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001ed61:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ed64:	c1 e0 18             	shl    eax,0x18
c001ed67:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001ed6a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001ed6d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ed70:	52                   	push   edx
c001ed71:	50                   	push   eax
c001ed72:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed75:	e8 56 ff ff ff       	call   c001ecd0 <IOAPIC::write(int, int)>
c001ed7a:	83 c4 0c             	add    esp,0xc
c001ed7d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ed80:	50                   	push   eax
c001ed81:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed84:	e8 39 fe ff ff       	call   c001ebc2 <IOAPIC::read(int)>
c001ed89:	83 c4 08             	add    esp,0x8
c001ed8c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001ed8f:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001ed96:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001ed9d:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001eda4:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001eda8:	85 c0                	test   eax,eax
c001edaa:	74 09                	je     c001edb5 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001edac:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001edb3:	eb 07                	jmp    c001edbc <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001edb5:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001edbc:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001edc0:	85 c0                	test   eax,eax
c001edc2:	74 09                	je     c001edcd <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001edc4:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001edcb:	eb 07                	jmp    c001edd4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001edcd:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001edd4:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001eddb:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001eddf:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001ede2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001ede5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ede8:	52                   	push   edx
c001ede9:	50                   	push   eax
c001edea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eded:	e8 de fe ff ff       	call   c001ecd0 <IOAPIC::write(int, int)>
c001edf2:	83 c4 0c             	add    esp,0xc
c001edf5:	90                   	nop
c001edf6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001edf9:	c9                   	leave  
c001edfa:	c3                   	ret    
c001edfb:	90                   	nop

c001edfc <APICTimer::close(int, int, void*)>:
c001edfc:	b8 00 00 00 00       	mov    eax,0x0
c001ee01:	c3                   	ret    
c001ee02:	66 90                	xchg   ax,ax

c001ee04 <apicTimerHandler(regs*, void*)>:
c001ee04:	83 ec 0c             	sub    esp,0xc
c001ee07:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ee0b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ee0d:	b8 10 27 00 00       	mov    eax,0x2710
c001ee12:	ba 00 00 00 00       	mov    edx,0x0
c001ee17:	f7 f1                	div    ecx
c001ee19:	83 ec 0c             	sub    esp,0xc
c001ee1c:	50                   	push   eax
c001ee1d:	e8 8e f6 fe ff       	call   c000e4b0 <timerHandler(unsigned int)>
c001ee22:	83 c4 10             	add    esp,0x10
c001ee25:	90                   	nop
c001ee26:	83 c4 0c             	add    esp,0xc
c001ee29:	c3                   	ret    
c001ee2a:	66 90                	xchg   ax,ax

c001ee2c <APICTimer::open(int, int, void*)>:
c001ee2c:	83 ec 0c             	sub    esp,0xc
c001ee2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee33:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee35:	83 c0 24             	add    eax,0x24
c001ee38:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee3a:	83 ec 08             	sub    esp,0x8
c001ee3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee45:	ff d0                	call   eax
c001ee47:	83 c4 10             	add    esp,0x10
c001ee4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee4e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ee52:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ee58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ee60:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001ee66:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ee6a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ee70:	83 ec 0c             	sub    esp,0xc
c001ee73:	51                   	push   ecx
c001ee74:	6a 01                	push   0x1
c001ee76:	68 04 ee 01 c0       	push   0xc001ee04
c001ee7b:	52                   	push   edx
c001ee7c:	50                   	push   eax
c001ee7d:	e8 6e db fe ff       	call   c000c9f0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ee82:	83 c4 20             	add    esp,0x20
c001ee85:	89 c2                	mov    edx,eax
c001ee87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee8b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ee91:	b8 00 00 00 00       	mov    eax,0x0
c001ee96:	83 c4 0c             	add    esp,0xc
c001ee99:	c3                   	ret    
c001ee9a:	66 90                	xchg   ax,ax

c001ee9c <APICTimer::write(int)>:
c001ee9c:	83 ec 0c             	sub    esp,0xc
c001ee9f:	83 ec 0c             	sub    esp,0xc
c001eea2:	68 f4 35 02 c0       	push   0xc00235f4
c001eea7:	e8 5f 27 ff ff       	call   c001160b <KePanic(char const*)>
c001eeac:	83 c4 10             	add    esp,0x10
c001eeaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeb3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eeb7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eebd:	90                   	nop
c001eebe:	83 c4 0c             	add    esp,0xc
c001eec1:	c3                   	ret    
c001eec2:	66 90                	xchg   ax,ax

c001eec4 <APICTimer::APICTimer()>:
c001eec4:	83 ec 0c             	sub    esp,0xc
c001eec7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eecb:	83 ec 08             	sub    esp,0x8
c001eece:	68 04 36 02 c0       	push   0xc0023604
c001eed3:	50                   	push   eax
c001eed4:	e8 0b f5 fe ff       	call   c000e3e4 <Timer::Timer(char const*)>
c001eed9:	83 c4 10             	add    esp,0x10
c001eedc:	ba 18 36 02 c0       	mov    edx,0xc0023618
c001eee1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eee5:	89 10                	mov    DWORD PTR [eax],edx
c001eee7:	90                   	nop
c001eee8:	83 c4 0c             	add    esp,0xc
c001eeeb:	c3                   	ret    

c001eeec <PIT::write(int)>:
c001eeec:	83 ec 10             	sub    esp,0x10
c001eeef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001eef3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001eef7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eefd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ef01:	a3 04 d1 02 c0       	mov    ds:0xc002d104,eax
c001ef06:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ef0b:	89 c2                	mov    edx,eax
c001ef0d:	c1 fa 1f             	sar    edx,0x1f
c001ef10:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ef14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ef18:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001ef1f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001ef24:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ef28:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ef2d:	ee                   	out    dx,al
c001ef2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ef32:	0f b6 c0             	movzx  eax,al
c001ef35:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ef3c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ef40:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ef44:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ef49:	ee                   	out    dx,al
c001ef4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ef4e:	c1 f8 08             	sar    eax,0x8
c001ef51:	0f b6 c0             	movzx  eax,al
c001ef54:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001ef5b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ef5f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ef63:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ef68:	ee                   	out    dx,al
c001ef69:	90                   	nop
c001ef6a:	83 c4 10             	add    esp,0x10
c001ef6d:	c3                   	ret    
c001ef6e:	66 90                	xchg   ax,ax

c001ef70 <pitHandler(regs*, void*)>:
c001ef70:	83 ec 0c             	sub    esp,0xc
c001ef73:	8b 0d 04 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d104
c001ef79:	b8 10 27 00 00       	mov    eax,0x2710
c001ef7e:	89 c2                	mov    edx,eax
c001ef80:	c1 fa 1f             	sar    edx,0x1f
c001ef83:	f7 f9                	idiv   ecx
c001ef85:	83 ec 0c             	sub    esp,0xc
c001ef88:	50                   	push   eax
c001ef89:	e8 22 f5 fe ff       	call   c000e4b0 <timerHandler(unsigned int)>
c001ef8e:	83 c4 10             	add    esp,0x10
c001ef91:	90                   	nop
c001ef92:	83 c4 0c             	add    esp,0xc
c001ef95:	c3                   	ret    
c001ef96:	66 90                	xchg   ax,ax

c001ef98 <PIT::open(int, int, void*)>:
c001ef98:	83 ec 0c             	sub    esp,0xc
c001ef9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef9f:	8b 00                	mov    eax,DWORD PTR [eax]
c001efa1:	83 c0 24             	add    eax,0x24
c001efa4:	8b 00                	mov    eax,DWORD PTR [eax]
c001efa6:	83 ec 08             	sub    esp,0x8
c001efa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efb1:	ff d0                	call   eax
c001efb3:	83 c4 10             	add    esp,0x10
c001efb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efba:	83 ec 0c             	sub    esp,0xc
c001efbd:	6a 00                	push   0x0
c001efbf:	6a 01                	push   0x1
c001efc1:	68 70 ef 01 c0       	push   0xc001ef70
c001efc6:	6a 00                	push   0x0
c001efc8:	50                   	push   eax
c001efc9:	e8 22 da fe ff       	call   c000c9f0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001efce:	83 c4 20             	add    esp,0x20
c001efd1:	89 c2                	mov    edx,eax
c001efd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efd7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001efdd:	b8 00 00 00 00       	mov    eax,0x0
c001efe2:	83 c4 0c             	add    esp,0xc
c001efe5:	c3                   	ret    
c001efe6:	66 90                	xchg   ax,ax

c001efe8 <PIT::close(int, int, void*)>:
c001efe8:	83 ec 0c             	sub    esp,0xc
c001efeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efef:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001eff9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001effd:	6a 01                	push   0x1
c001efff:	68 70 ef 01 c0       	push   0xc001ef70
c001f004:	6a 00                	push   0x0
c001f006:	50                   	push   eax
c001f007:	e8 1a da fe ff       	call   c000ca26 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001f00c:	83 c4 10             	add    esp,0x10
c001f00f:	b8 00 00 00 00       	mov    eax,0x0
c001f014:	83 c4 0c             	add    esp,0xc
c001f017:	c3                   	ret    

c001f018 <PIT::PIT()>:
c001f018:	83 ec 0c             	sub    esp,0xc
c001f01b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f01f:	83 ec 08             	sub    esp,0x8
c001f022:	68 40 36 02 c0       	push   0xc0023640
c001f027:	50                   	push   eax
c001f028:	e8 b7 f3 fe ff       	call   c000e3e4 <Timer::Timer(char const*)>
c001f02d:	83 c4 10             	add    esp,0x10
c001f030:	ba 68 36 02 c0       	mov    edx,0xc0023668
c001f035:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f039:	89 10                	mov    DWORD PTR [eax],edx
c001f03b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f03f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f045:	0f b6 d0             	movzx  edx,al
c001f048:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f04c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001f053:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f057:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f05d:	0f b6 d0             	movzx  edx,al
c001f060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f064:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001f069:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f06d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f073:	8d 50 01             	lea    edx,[eax+0x1]
c001f076:	88 d1                	mov    cl,dl
c001f078:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f07c:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001f082:	0f b6 d0             	movzx  edx,al
c001f085:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f089:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001f08d:	83 e1 3f             	and    ecx,0x3f
c001f090:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001f094:	90                   	nop
c001f095:	83 c4 0c             	add    esp,0xc
c001f098:	c3                   	ret    
c001f099:	66 90                	xchg   ax,ax
c001f09b:	66 90                	xchg   ax,ax
c001f09d:	66 90                	xchg   ax,ax
c001f09f:	90                   	nop

c001f0a0 <avxDetect>:
c001f0a0:	b8 01 00 00 00       	mov    eax,0x1
c001f0a5:	0f a2                	cpuid  
c001f0a7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001f0ad:	74 15                	je     c001f0c4 <avxDetect.noAVX>
c001f0af:	b8 01 00 00 00       	mov    eax,0x1
c001f0b4:	0f a2                	cpuid  
c001f0b6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001f0bc:	74 06                	je     c001f0c4 <avxDetect.noAVX>
c001f0be:	b8 01 00 00 00       	mov    eax,0x1
c001f0c3:	c3                   	ret    

c001f0c4 <avxDetect.noAVX>:
c001f0c4:	b8 00 00 00 00       	mov    eax,0x0
c001f0c9:	c3                   	ret    

c001f0ca <avxSave>:
c001f0ca:	53                   	push   ebx
c001f0cb:	52                   	push   edx
c001f0cc:	31 c0                	xor    eax,eax
c001f0ce:	48                   	dec    eax
c001f0cf:	89 c2                	mov    edx,eax
c001f0d1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f0d5:	0f ae 23             	xsave  [ebx]
c001f0d8:	5a                   	pop    edx
c001f0d9:	5b                   	pop    ebx
c001f0da:	c3                   	ret    

c001f0db <avxLoad>:
c001f0db:	53                   	push   ebx
c001f0dc:	52                   	push   edx
c001f0dd:	31 c0                	xor    eax,eax
c001f0df:	48                   	dec    eax
c001f0e0:	89 c2                	mov    edx,eax
c001f0e2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f0e6:	0f ae 2b             	xrstor [ebx]
c001f0e9:	5a                   	pop    edx
c001f0ea:	5b                   	pop    ebx
c001f0eb:	c3                   	ret    

c001f0ec <avxInit>:
c001f0ec:	e8 67 03 00 00       	call   c001f458 <sseInit>
c001f0f1:	50                   	push   eax
c001f0f2:	51                   	push   ecx
c001f0f3:	0f 20 e0             	mov    eax,cr4
c001f0f6:	0d 00 00 04 00       	or     eax,0x40000
c001f0fb:	0f 22 e0             	mov    cr4,eax
c001f0fe:	31 c9                	xor    ecx,ecx
c001f100:	0f 01 d0             	xgetbv 
c001f103:	0d 07 00 00 00       	or     eax,0x7
c001f108:	0f 01 d1             	xsetbv 
c001f10b:	59                   	pop    ecx
c001f10c:	58                   	pop    eax
c001f10d:	c3                   	ret    

c001f10e <avxClose>:
c001f10e:	c3                   	ret    

c001f10f <wouldSheSayYes>:
c001f10f:	c3                   	ret    
c001f110:	49                   	dec    ecx
c001f111:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001f115:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001f119:	75 20                	jne    c001f13b <isr0+0xb>
c001f11b:	4e                   	dec    esi
c001f11c:	79 61                	jns    c001f17f <isr7+0x3>
c001f11e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001f123:	66 90                	xchg   ax,ax
c001f125:	66 90                	xchg   ax,ax
c001f127:	66 90                	xchg   ax,ax
c001f129:	66 90                	xchg   ax,ax
c001f12b:	66 90                	xchg   ax,ax
c001f12d:	66 90                	xchg   ax,ax
c001f12f:	90                   	nop

c001f130 <isr0>:
c001f130:	fa                   	cli    
c001f131:	68 00 00 00 00       	push   0x0
c001f136:	68 00 00 00 00       	push   0x0
c001f13b:	e9 56 01 00 00       	jmp    c001f296 <int_common_stub>

c001f140 <isr1>:
c001f140:	fa                   	cli    
c001f141:	6a 00                	push   0x0
c001f143:	6a 01                	push   0x1
c001f145:	e9 4c 01 00 00       	jmp    c001f296 <int_common_stub>

c001f14a <isr2>:
c001f14a:	fa                   	cli    
c001f14b:	6a 00                	push   0x0
c001f14d:	6a 02                	push   0x2
c001f14f:	e9 42 01 00 00       	jmp    c001f296 <int_common_stub>

c001f154 <isr3>:
c001f154:	fa                   	cli    
c001f155:	6a 00                	push   0x0
c001f157:	6a 03                	push   0x3
c001f159:	e9 38 01 00 00       	jmp    c001f296 <int_common_stub>

c001f15e <isr4>:
c001f15e:	fa                   	cli    
c001f15f:	6a 00                	push   0x0
c001f161:	6a 04                	push   0x4
c001f163:	e9 2e 01 00 00       	jmp    c001f296 <int_common_stub>

c001f168 <isr5>:
c001f168:	fa                   	cli    
c001f169:	6a 00                	push   0x0
c001f16b:	6a 05                	push   0x5
c001f16d:	e9 24 01 00 00       	jmp    c001f296 <int_common_stub>

c001f172 <isr6>:
c001f172:	fa                   	cli    
c001f173:	6a 00                	push   0x0
c001f175:	6a 06                	push   0x6
c001f177:	e9 1a 01 00 00       	jmp    c001f296 <int_common_stub>

c001f17c <isr7>:
c001f17c:	fa                   	cli    
c001f17d:	6a 00                	push   0x0
c001f17f:	6a 07                	push   0x7
c001f181:	e9 10 01 00 00       	jmp    c001f296 <int_common_stub>

c001f186 <isr8>:
c001f186:	fa                   	cli    
c001f187:	6a 08                	push   0x8
c001f189:	e9 08 01 00 00       	jmp    c001f296 <int_common_stub>

c001f18e <isr9>:
c001f18e:	fa                   	cli    
c001f18f:	6a 00                	push   0x0
c001f191:	6a 09                	push   0x9
c001f193:	e9 fe 00 00 00       	jmp    c001f296 <int_common_stub>

c001f198 <isr10>:
c001f198:	fa                   	cli    
c001f199:	6a 0a                	push   0xa
c001f19b:	e9 f6 00 00 00       	jmp    c001f296 <int_common_stub>

c001f1a0 <isr11>:
c001f1a0:	fa                   	cli    
c001f1a1:	6a 0b                	push   0xb
c001f1a3:	e9 ee 00 00 00       	jmp    c001f296 <int_common_stub>

c001f1a8 <isr12>:
c001f1a8:	fa                   	cli    
c001f1a9:	6a 0c                	push   0xc
c001f1ab:	e9 e6 00 00 00       	jmp    c001f296 <int_common_stub>

c001f1b0 <isr13>:
c001f1b0:	fa                   	cli    
c001f1b1:	6a 0d                	push   0xd
c001f1b3:	53                   	push   ebx
c001f1b4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f1b8:	81 fb 86 f3 01 c0    	cmp    ebx,0xc001f386
c001f1be:	5b                   	pop    ebx
c001f1bf:	0f 84 c3 01 00 00    	je     c001f388 <finishSignal2>
c001f1c5:	e9 cc 00 00 00       	jmp    c001f296 <int_common_stub>

c001f1ca <isr14>:
c001f1ca:	fa                   	cli    
c001f1cb:	6a 0e                	push   0xe
c001f1cd:	e9 c4 00 00 00       	jmp    c001f296 <int_common_stub>

c001f1d2 <isr15>:
c001f1d2:	fa                   	cli    
c001f1d3:	6a 00                	push   0x0
c001f1d5:	6a 0f                	push   0xf
c001f1d7:	e9 ba 00 00 00       	jmp    c001f296 <int_common_stub>

c001f1dc <isr16>:
c001f1dc:	fa                   	cli    
c001f1dd:	6a 00                	push   0x0
c001f1df:	6a 10                	push   0x10
c001f1e1:	e9 b0 00 00 00       	jmp    c001f296 <int_common_stub>

c001f1e6 <isr17>:
c001f1e6:	fa                   	cli    
c001f1e7:	6a 00                	push   0x0
c001f1e9:	6a 11                	push   0x11
c001f1eb:	e9 a6 00 00 00       	jmp    c001f296 <int_common_stub>

c001f1f0 <isr18>:
c001f1f0:	fa                   	cli    
c001f1f1:	6a 00                	push   0x0
c001f1f3:	6a 12                	push   0x12
c001f1f5:	e9 9c 00 00 00       	jmp    c001f296 <int_common_stub>

c001f1fa <irq3>:
c001f1fa:	fa                   	cli    
c001f1fb:	6a 00                	push   0x0
c001f1fd:	6a 23                	push   0x23
c001f1ff:	e9 92 00 00 00       	jmp    c001f296 <int_common_stub>

c001f204 <irq4>:
c001f204:	fa                   	cli    
c001f205:	6a 00                	push   0x0
c001f207:	6a 24                	push   0x24
c001f209:	e9 88 00 00 00       	jmp    c001f296 <int_common_stub>

c001f20e <irq5>:
c001f20e:	fa                   	cli    
c001f20f:	6a 00                	push   0x0
c001f211:	6a 25                	push   0x25
c001f213:	e9 7e 00 00 00       	jmp    c001f296 <int_common_stub>

c001f218 <irq6>:
c001f218:	fa                   	cli    
c001f219:	6a 00                	push   0x0
c001f21b:	6a 26                	push   0x26
c001f21d:	e9 74 00 00 00       	jmp    c001f296 <int_common_stub>

c001f222 <irq7>:
c001f222:	fa                   	cli    
c001f223:	6a 00                	push   0x0
c001f225:	6a 27                	push   0x27
c001f227:	e9 6a 00 00 00       	jmp    c001f296 <int_common_stub>

c001f22c <irq8>:
c001f22c:	fa                   	cli    
c001f22d:	6a 00                	push   0x0
c001f22f:	6a 28                	push   0x28
c001f231:	e9 60 00 00 00       	jmp    c001f296 <int_common_stub>

c001f236 <irq9>:
c001f236:	fa                   	cli    
c001f237:	6a 00                	push   0x0
c001f239:	6a 29                	push   0x29
c001f23b:	e9 56 00 00 00       	jmp    c001f296 <int_common_stub>

c001f240 <irq10>:
c001f240:	fa                   	cli    
c001f241:	6a 00                	push   0x0
c001f243:	6a 2a                	push   0x2a
c001f245:	e9 4c 00 00 00       	jmp    c001f296 <int_common_stub>

c001f24a <irq11>:
c001f24a:	fa                   	cli    
c001f24b:	6a 00                	push   0x0
c001f24d:	6a 2b                	push   0x2b
c001f24f:	e9 42 00 00 00       	jmp    c001f296 <int_common_stub>

c001f254 <irq12>:
c001f254:	fa                   	cli    
c001f255:	6a 00                	push   0x0
c001f257:	6a 2c                	push   0x2c
c001f259:	e9 38 00 00 00       	jmp    c001f296 <int_common_stub>

c001f25e <irq13>:
c001f25e:	fa                   	cli    
c001f25f:	6a 00                	push   0x0
c001f261:	6a 2d                	push   0x2d
c001f263:	e9 2e 00 00 00       	jmp    c001f296 <int_common_stub>

c001f268 <irq14>:
c001f268:	fa                   	cli    
c001f269:	6a 00                	push   0x0
c001f26b:	6a 2e                	push   0x2e
c001f26d:	e9 24 00 00 00       	jmp    c001f296 <int_common_stub>

c001f272 <irq15>:
c001f272:	fa                   	cli    
c001f273:	6a 00                	push   0x0
c001f275:	6a 2f                	push   0x2f
c001f277:	e9 1a 00 00 00       	jmp    c001f296 <int_common_stub>

c001f27c <irq1>:
c001f27c:	fa                   	cli    
c001f27d:	6a 00                	push   0x0
c001f27f:	6a 21                	push   0x21
c001f281:	eb 13                	jmp    c001f296 <int_common_stub>

c001f283 <irq2>:
c001f283:	fa                   	cli    
c001f284:	6a 00                	push   0x0
c001f286:	6a 22                	push   0x22
c001f288:	eb 0c                	jmp    c001f296 <int_common_stub>

c001f28a <isr96>:
c001f28a:	6a 00                	push   0x0
c001f28c:	6a 60                	push   0x60
c001f28e:	fb                   	sti    
c001f28f:	eb 37                	jmp    c001f2c8 <syscall_common_stub>

c001f291 <irq0>:
c001f291:	fa                   	cli    
c001f292:	6a 00                	push   0x0
c001f294:	6a 20                	push   0x20

c001f296 <int_common_stub>:
c001f296:	60                   	pusha  
c001f297:	1e                   	push   ds
c001f298:	06                   	push   es
c001f299:	0f a0                	push   fs
c001f29b:	0f a8                	push   gs
c001f29d:	66 b8 10 00          	mov    ax,0x10
c001f2a1:	66 8e d8             	mov    ds,ax
c001f2a4:	66 8e c0             	mov    es,ax
c001f2a7:	66 8e e0             	mov    fs,ax
c001f2aa:	66 8e e8             	mov    gs,ax
c001f2ad:	54                   	push   esp
c001f2ae:	fc                   	cld    
c001f2af:	e8 3c dc fe ff       	call   c000cef0 <int_handler>
c001f2b4:	81 c4 04 00 00 00    	add    esp,0x4
c001f2ba:	0f a9                	pop    gs
c001f2bc:	0f a1                	pop    fs
c001f2be:	07                   	pop    es
c001f2bf:	1f                   	pop    ds
c001f2c0:	61                   	popa   
c001f2c1:	81 c4 08 00 00 00    	add    esp,0x8
c001f2c7:	cf                   	iret   

c001f2c8 <syscall_common_stub>:
c001f2c8:	60                   	pusha  
c001f2c9:	1e                   	push   ds
c001f2ca:	06                   	push   es
c001f2cb:	0f a0                	push   fs
c001f2cd:	0f a8                	push   gs
c001f2cf:	66 b8 10 00          	mov    ax,0x10
c001f2d3:	66 8e d8             	mov    ds,ax
c001f2d6:	66 8e c0             	mov    es,ax
c001f2d9:	66 8e e0             	mov    fs,ax
c001f2dc:	66 8e e8             	mov    gs,ax
c001f2df:	54                   	push   esp
c001f2e0:	fc                   	cld    
c001f2e1:	e8 0a dc fe ff       	call   c000cef0 <int_handler>
c001f2e6:	81 c4 04 00 00 00    	add    esp,0x4
c001f2ec:	0f a9                	pop    gs
c001f2ee:	0f a1                	pop    fs
c001f2f0:	07                   	pop    es
c001f2f1:	1f                   	pop    ds
c001f2f2:	e8 24 29 ff ff       	call   c0011c1b <KiCheckSignalZ>
c001f2f7:	3d 00 00 00 00       	cmp    eax,0x0
c001f2fc:	0f 84 c0 00 00 00    	je     c001f3c2 <skipSignals>
c001f302:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001f307:	61                   	popa   
c001f308:	53                   	push   ebx
c001f309:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001f30f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001f312:	5b                   	pop    ebx
c001f313:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001f318:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001f31b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001f31e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f321:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001f324:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001f327:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001f32a:	81 c4 08 00 00 00    	add    esp,0x8
c001f330:	5e                   	pop    esi
c001f331:	5b                   	pop    ebx
c001f332:	59                   	pop    ecx
c001f333:	5a                   	pop    edx
c001f334:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001f337:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001f33a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001f33d:	52                   	push   edx
c001f33e:	51                   	push   ecx
c001f33f:	53                   	push   ebx
c001f340:	56                   	push   esi
c001f341:	81 ec 08 00 00 00    	sub    esp,0x8
c001f347:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001f34a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001f34d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001f350:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f353:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f356:	60                   	pusha  
c001f357:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001f35d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001f360:	89 e3                	mov    ebx,esp
c001f362:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001f365:	52                   	push   edx
c001f366:	68 86 f3 01 c0       	push   0xc001f386
c001f36b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001f36e:	89 dc                	mov    esp,ebx
c001f370:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001f373:	68 23 00 00 00       	push   0x23
c001f378:	51                   	push   ecx
c001f379:	68 02 02 00 00       	push   0x202
c001f37e:	68 1b 00 00 00       	push   0x1b
c001f383:	ff 36                	push   DWORD PTR [esi]
c001f385:	cf                   	iret   

c001f386 <finishSignal>:
c001f386:	cd 0f                	int    0xf

c001f388 <finishSignal2>:
c001f388:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001f38e:	e8 05 29 ff ff       	call   c0011c98 <KiFinishSignalZ>
c001f393:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001f399:	68 23 00 00 00       	push   0x23
c001f39e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001f3a1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001f3a4:	68 1b 00 00 00       	push   0x1b
c001f3a9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001f3ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f3af:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001f3b2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001f3b5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001f3b8:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001f3bb:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001f3be:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001f3c1:	cf                   	iret   

c001f3c2 <skipSignals>:
c001f3c2:	61                   	popa   
c001f3c3:	81 c4 08 00 00 00    	add    esp,0x8
c001f3c9:	cf                   	iret   
c001f3ca:	90                   	nop
c001f3cb:	90                   	nop

c001f3cc <irq16>:
c001f3cc:	fa                   	cli    
c001f3cd:	6a 00                	push   0x0
c001f3cf:	6a 30                	push   0x30
c001f3d1:	e9 c0 fe ff ff       	jmp    c001f296 <int_common_stub>

c001f3d6 <irq17>:
c001f3d6:	fa                   	cli    
c001f3d7:	6a 00                	push   0x0
c001f3d9:	6a 31                	push   0x31
c001f3db:	e9 b6 fe ff ff       	jmp    c001f296 <int_common_stub>

c001f3e0 <irq18>:
c001f3e0:	fa                   	cli    
c001f3e1:	6a 00                	push   0x0
c001f3e3:	6a 32                	push   0x32
c001f3e5:	e9 ac fe ff ff       	jmp    c001f296 <int_common_stub>

c001f3ea <irq19>:
c001f3ea:	fa                   	cli    
c001f3eb:	6a 00                	push   0x0
c001f3ed:	6a 33                	push   0x33
c001f3ef:	e9 a2 fe ff ff       	jmp    c001f296 <int_common_stub>

c001f3f4 <irq20>:
c001f3f4:	fa                   	cli    
c001f3f5:	6a 00                	push   0x0
c001f3f7:	6a 34                	push   0x34
c001f3f9:	e9 98 fe ff ff       	jmp    c001f296 <int_common_stub>

c001f3fe <irq21>:
c001f3fe:	fa                   	cli    
c001f3ff:	6a 00                	push   0x0
c001f401:	6a 35                	push   0x35
c001f403:	e9 8e fe ff ff       	jmp    c001f296 <int_common_stub>

c001f408 <irq22>:
c001f408:	fa                   	cli    
c001f409:	6a 00                	push   0x0
c001f40b:	6a 36                	push   0x36
c001f40d:	e9 84 fe ff ff       	jmp    c001f296 <int_common_stub>

c001f412 <irq23>:
c001f412:	fa                   	cli    
c001f413:	6a 00                	push   0x0
c001f415:	6a 37                	push   0x37
c001f417:	e9 7a fe ff ff       	jmp    c001f296 <int_common_stub>
c001f41c:	66 90                	xchg   ax,ax
c001f41e:	66 90                	xchg   ax,ax

c001f420 <i386GetRDRAND>:
c001f420:	b9 64 00 00 00       	mov    ecx,0x64

c001f425 <retry>:
c001f425:	0f c7 f0             	rdrand eax
c001f428:	72 05                	jb     c001f42f <retry.done>
c001f42a:	e2 f9                	loop   c001f425 <retry>

c001f42c <retry.fail>:
c001f42c:	31 c0                	xor    eax,eax
c001f42e:	c3                   	ret    

c001f42f <retry.done>:
c001f42f:	c3                   	ret    

c001f430 <absolutelyNoChanceInHell>:
c001f430:	b8 01 00 00 00       	mov    eax,0x1
c001f435:	0f a2                	cpuid  
c001f437:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f43d:	74 06                	je     c001f445 <sseDetect.noSSE>
c001f43f:	b8 01 00 00 00       	mov    eax,0x1
c001f444:	c3                   	ret    

c001f445 <sseDetect.noSSE>:
c001f445:	31 c0                	xor    eax,eax
c001f447:	c3                   	ret    

c001f448 <sseSave>:
c001f448:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f44c:	0f ae 00             	fxsave [eax]
c001f44f:	c3                   	ret    

c001f450 <sseLoad>:
c001f450:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f454:	0f ae 08             	fxrstor [eax]
c001f457:	c3                   	ret    

c001f458 <sseInit>:
c001f458:	e8 42 00 00 00       	call   c001f49f <x87Init>
c001f45d:	0f 20 e0             	mov    eax,cr4
c001f460:	66 0d 00 06          	or     ax,0x600
c001f464:	0f 22 e0             	mov    cr4,eax
c001f467:	c3                   	ret    

c001f468 <sseClose>:
c001f468:	c3                   	ret    
c001f469:	66 90                	xchg   ax,ax
c001f46b:	66 90                	xchg   ax,ax
c001f46d:	66 90                	xchg   ax,ax
c001f46f:	90                   	nop

c001f470 <value_37F>:
c001f470:	7f 03                	jg     c001f475 <value_37A+0x1>

c001f472 <value_37E>:
c001f472:	7e 03                	jle    c001f477 <x87Detect+0x1>

c001f474 <value_37A>:
c001f474:	7a 03                	jp     c001f479 <x87Detect+0x3>

c001f476 <x87Detect>:
c001f476:	b8 01 00 00 00       	mov    eax,0x1
c001f47b:	0f a2                	cpuid  
c001f47d:	f7 c2 01 00 00 00    	test   edx,0x1
c001f483:	74 06                	je     c001f48b <x87Detect.nox87>
c001f485:	b8 01 00 00 00       	mov    eax,0x1
c001f48a:	c3                   	ret    

c001f48b <x87Detect.nox87>:
c001f48b:	b8 00 00 00 00       	mov    eax,0x0
c001f490:	c3                   	ret    

c001f491 <x87Save>:
c001f491:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f495:	dd 30                	fnsave [eax]
c001f497:	c3                   	ret    

c001f498 <x87Load>:
c001f498:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f49c:	dd 20                	frstor [eax]
c001f49e:	c3                   	ret    

c001f49f <x87Init>:
c001f49f:	0f 20 c0             	mov    eax,cr0
c001f4a2:	66 25 fb ff          	and    ax,0xfffb
c001f4a6:	66 0d 22 00          	or     ax,0x22
c001f4aa:	0f 22 c0             	mov    cr0,eax
c001f4ad:	db e3                	fninit 
c001f4af:	0f 06                	clts   
c001f4b1:	d9 2d 74 f4 01 c0    	fldcw  WORD PTR ds:0xc001f474
c001f4b7:	c3                   	ret    

c001f4b8 <x87Close>:
c001f4b8:	c3                   	ret    
c001f4b9:	66 90                	xchg   ax,ax
c001f4bb:	90                   	nop

c001f4bc <__do_global_ctors_aux>:
c001f4bc:	a1 70 04 02 c0       	mov    eax,ds:0xc0020470
c001f4c1:	83 f8 ff             	cmp    eax,0xffffffff
c001f4c4:	74 1a                	je     c001f4e0 <__do_global_ctors_aux+0x24>
c001f4c6:	55                   	push   ebp
c001f4c7:	89 e5                	mov    ebp,esp
c001f4c9:	53                   	push   ebx
c001f4ca:	52                   	push   edx
c001f4cb:	bb 70 04 02 c0       	mov    ebx,0xc0020470
c001f4d0:	ff d0                	call   eax
c001f4d2:	83 eb 04             	sub    ebx,0x4
c001f4d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f4d7:	83 f8 ff             	cmp    eax,0xffffffff
c001f4da:	75 f4                	jne    c001f4d0 <__do_global_ctors_aux+0x14>
c001f4dc:	58                   	pop    eax
c001f4dd:	5b                   	pop    ebx
c001f4de:	5d                   	pop    ebp
c001f4df:	c3                   	ret    
c001f4e0:	c3                   	ret    
c001f4e1:	66 90                	xchg   ax,ax
c001f4e3:	90                   	nop

c001f4e4 <__divdi3>:
c001f4e4:	55                   	push   ebp
c001f4e5:	57                   	push   edi
c001f4e6:	56                   	push   esi
c001f4e7:	53                   	push   ebx
c001f4e8:	83 ec 1c             	sub    esp,0x1c
c001f4eb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f4ef:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f4f3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f4f6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f4fa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f4fe:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f502:	85 db                	test   ebx,ebx
c001f504:	0f 88 8e 00 00 00    	js     c001f598 <__divdi3+0xb4>
c001f50a:	89 dd                	mov    ebp,ebx
c001f50c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f514:	89 d3                	mov    ebx,edx
c001f516:	85 d2                	test   edx,edx
c001f518:	79 0d                	jns    c001f527 <__divdi3+0x43>
c001f51a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f51e:	f7 d8                	neg    eax
c001f520:	83 d2 00             	adc    edx,0x0
c001f523:	f7 da                	neg    edx
c001f525:	89 d3                	mov    ebx,edx
c001f527:	89 c7                	mov    edi,eax
c001f529:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f52c:	85 db                	test   ebx,ebx
c001f52e:	75 48                	jne    c001f578 <__divdi3+0x94>
c001f530:	39 ef                	cmp    edi,ebp
c001f532:	76 24                	jbe    c001f558 <__divdi3+0x74>
c001f534:	89 ea                	mov    edx,ebp
c001f536:	f7 f7                	div    edi
c001f538:	89 c1                	mov    ecx,eax
c001f53a:	31 f6                	xor    esi,esi
c001f53c:	89 c8                	mov    eax,ecx
c001f53e:	89 f2                	mov    edx,esi
c001f540:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f544:	85 c9                	test   ecx,ecx
c001f546:	74 07                	je     c001f54f <__divdi3+0x6b>
c001f548:	f7 d8                	neg    eax
c001f54a:	83 d2 00             	adc    edx,0x0
c001f54d:	f7 da                	neg    edx
c001f54f:	83 c4 1c             	add    esp,0x1c
c001f552:	5b                   	pop    ebx
c001f553:	5e                   	pop    esi
c001f554:	5f                   	pop    edi
c001f555:	5d                   	pop    ebp
c001f556:	c3                   	ret    
c001f557:	90                   	nop
c001f558:	85 ff                	test   edi,edi
c001f55a:	75 0b                	jne    c001f567 <__divdi3+0x83>
c001f55c:	b8 01 00 00 00       	mov    eax,0x1
c001f561:	31 d2                	xor    edx,edx
c001f563:	f7 f3                	div    ebx
c001f565:	89 c7                	mov    edi,eax
c001f567:	31 d2                	xor    edx,edx
c001f569:	89 e8                	mov    eax,ebp
c001f56b:	f7 f7                	div    edi
c001f56d:	89 c6                	mov    esi,eax
c001f56f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f572:	f7 f7                	div    edi
c001f574:	89 c1                	mov    ecx,eax
c001f576:	eb c4                	jmp    c001f53c <__divdi3+0x58>
c001f578:	39 eb                	cmp    ebx,ebp
c001f57a:	77 3c                	ja     c001f5b8 <__divdi3+0xd4>
c001f57c:	0f bd f3             	bsr    esi,ebx
c001f57f:	83 f6 1f             	xor    esi,0x1f
c001f582:	75 40                	jne    c001f5c4 <__divdi3+0xe0>
c001f584:	39 eb                	cmp    ebx,ebp
c001f586:	72 09                	jb     c001f591 <__divdi3+0xad>
c001f588:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f58b:	0f 87 97 00 00 00    	ja     c001f628 <__divdi3+0x144>
c001f591:	b9 01 00 00 00       	mov    ecx,0x1
c001f596:	eb a4                	jmp    c001f53c <__divdi3+0x58>
c001f598:	f7 d9                	neg    ecx
c001f59a:	83 d3 00             	adc    ebx,0x0
c001f59d:	f7 db                	neg    ebx
c001f59f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f5a2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f5a6:	89 dd                	mov    ebp,ebx
c001f5a8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f5b0:	e9 5f ff ff ff       	jmp    c001f514 <__divdi3+0x30>
c001f5b5:	8d 76 00             	lea    esi,[esi+0x0]
c001f5b8:	31 f6                	xor    esi,esi
c001f5ba:	31 c9                	xor    ecx,ecx
c001f5bc:	e9 7b ff ff ff       	jmp    c001f53c <__divdi3+0x58>
c001f5c1:	8d 76 00             	lea    esi,[esi+0x0]
c001f5c4:	b8 20 00 00 00       	mov    eax,0x20
c001f5c9:	29 f0                	sub    eax,esi
c001f5cb:	89 f1                	mov    ecx,esi
c001f5cd:	d3 e3                	shl    ebx,cl
c001f5cf:	89 fa                	mov    edx,edi
c001f5d1:	88 c1                	mov    cl,al
c001f5d3:	d3 ea                	shr    edx,cl
c001f5d5:	09 da                	or     edx,ebx
c001f5d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f5db:	89 f1                	mov    ecx,esi
c001f5dd:	d3 e7                	shl    edi,cl
c001f5df:	89 eb                	mov    ebx,ebp
c001f5e1:	88 c1                	mov    cl,al
c001f5e3:	d3 eb                	shr    ebx,cl
c001f5e5:	89 f1                	mov    ecx,esi
c001f5e7:	d3 e5                	shl    ebp,cl
c001f5e9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f5ec:	88 c1                	mov    cl,al
c001f5ee:	d3 ea                	shr    edx,cl
c001f5f0:	09 d5                	or     ebp,edx
c001f5f2:	89 e8                	mov    eax,ebp
c001f5f4:	89 da                	mov    edx,ebx
c001f5f6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f5fa:	89 d3                	mov    ebx,edx
c001f5fc:	89 c5                	mov    ebp,eax
c001f5fe:	f7 e7                	mul    edi
c001f600:	39 d3                	cmp    ebx,edx
c001f602:	72 18                	jb     c001f61c <__divdi3+0x138>
c001f604:	74 0a                	je     c001f610 <__divdi3+0x12c>
c001f606:	89 e9                	mov    ecx,ebp
c001f608:	31 f6                	xor    esi,esi
c001f60a:	e9 2d ff ff ff       	jmp    c001f53c <__divdi3+0x58>
c001f60f:	90                   	nop
c001f610:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f613:	89 f1                	mov    ecx,esi
c001f615:	d3 e7                	shl    edi,cl
c001f617:	39 c7                	cmp    edi,eax
c001f619:	73 eb                	jae    c001f606 <__divdi3+0x122>
c001f61b:	90                   	nop
c001f61c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f61f:	31 f6                	xor    esi,esi
c001f621:	e9 16 ff ff ff       	jmp    c001f53c <__divdi3+0x58>
c001f626:	66 90                	xchg   ax,ax
c001f628:	31 c9                	xor    ecx,ecx
c001f62a:	e9 0d ff ff ff       	jmp    c001f53c <__divdi3+0x58>
c001f62f:	90                   	nop

c001f630 <__moddi3>:
c001f630:	55                   	push   ebp
c001f631:	57                   	push   edi
c001f632:	56                   	push   esi
c001f633:	53                   	push   ebx
c001f634:	83 ec 2c             	sub    esp,0x2c
c001f637:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f63b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f63f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f643:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f647:	85 db                	test   ebx,ebx
c001f649:	0f 88 85 00 00 00    	js     c001f6d4 <__moddi3+0xa4>
c001f64f:	89 de                	mov    esi,ebx
c001f651:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f659:	89 d7                	mov    edi,edx
c001f65b:	85 d2                	test   edx,edx
c001f65d:	79 09                	jns    c001f668 <__moddi3+0x38>
c001f65f:	f7 d8                	neg    eax
c001f661:	83 d2 00             	adc    edx,0x0
c001f664:	f7 da                	neg    edx
c001f666:	89 d7                	mov    edi,edx
c001f668:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f66c:	89 cd                	mov    ebp,ecx
c001f66e:	85 ff                	test   edi,edi
c001f670:	75 52                	jne    c001f6c4 <__moddi3+0x94>
c001f672:	89 c3                	mov    ebx,eax
c001f674:	39 f0                	cmp    eax,esi
c001f676:	76 24                	jbe    c001f69c <__moddi3+0x6c>
c001f678:	89 c8                	mov    eax,ecx
c001f67a:	89 f2                	mov    edx,esi
c001f67c:	f7 f3                	div    ebx
c001f67e:	89 d6                	mov    esi,edx
c001f680:	89 f0                	mov    eax,esi
c001f682:	31 d2                	xor    edx,edx
c001f684:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f688:	85 c9                	test   ecx,ecx
c001f68a:	74 07                	je     c001f693 <__moddi3+0x63>
c001f68c:	f7 d8                	neg    eax
c001f68e:	83 d2 00             	adc    edx,0x0
c001f691:	f7 da                	neg    edx
c001f693:	83 c4 2c             	add    esp,0x2c
c001f696:	5b                   	pop    ebx
c001f697:	5e                   	pop    esi
c001f698:	5f                   	pop    edi
c001f699:	5d                   	pop    ebp
c001f69a:	c3                   	ret    
c001f69b:	90                   	nop
c001f69c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f6a0:	85 db                	test   ebx,ebx
c001f6a2:	75 0d                	jne    c001f6b1 <__moddi3+0x81>
c001f6a4:	b8 01 00 00 00       	mov    eax,0x1
c001f6a9:	31 d2                	xor    edx,edx
c001f6ab:	f7 f7                	div    edi
c001f6ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f6b1:	89 f0                	mov    eax,esi
c001f6b3:	31 d2                	xor    edx,edx
c001f6b5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f6b9:	f7 f7                	div    edi
c001f6bb:	89 e8                	mov    eax,ebp
c001f6bd:	f7 f7                	div    edi
c001f6bf:	89 d6                	mov    esi,edx
c001f6c1:	eb bd                	jmp    c001f680 <__moddi3+0x50>
c001f6c3:	90                   	nop
c001f6c4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f6c8:	39 f7                	cmp    edi,esi
c001f6ca:	76 20                	jbe    c001f6ec <__moddi3+0xbc>
c001f6cc:	89 c8                	mov    eax,ecx
c001f6ce:	89 f2                	mov    edx,esi
c001f6d0:	eb b2                	jmp    c001f684 <__moddi3+0x54>
c001f6d2:	66 90                	xchg   ax,ax
c001f6d4:	f7 d9                	neg    ecx
c001f6d6:	83 d3 00             	adc    ebx,0x0
c001f6d9:	f7 db                	neg    ebx
c001f6db:	89 de                	mov    esi,ebx
c001f6dd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f6e5:	e9 6f ff ff ff       	jmp    c001f659 <__moddi3+0x29>
c001f6ea:	66 90                	xchg   ax,ax
c001f6ec:	0f bd c7             	bsr    eax,edi
c001f6ef:	83 f0 1f             	xor    eax,0x1f
c001f6f2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f6f6:	75 24                	jne    c001f71c <__moddi3+0xec>
c001f6f8:	39 f7                	cmp    edi,esi
c001f6fa:	72 06                	jb     c001f702 <__moddi3+0xd2>
c001f6fc:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f700:	77 0c                	ja     c001f70e <__moddi3+0xde>
c001f702:	89 e9                	mov    ecx,ebp
c001f704:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f708:	19 fe                	sbb    esi,edi
c001f70a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f70e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f712:	89 f2                	mov    edx,esi
c001f714:	e9 6b ff ff ff       	jmp    c001f684 <__moddi3+0x54>
c001f719:	8d 76 00             	lea    esi,[esi+0x0]
c001f71c:	b8 20 00 00 00       	mov    eax,0x20
c001f721:	89 c2                	mov    edx,eax
c001f723:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f727:	29 da                	sub    edx,ebx
c001f729:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f72d:	88 d9                	mov    cl,bl
c001f72f:	d3 e7                	shl    edi,cl
c001f731:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f735:	88 d1                	mov    cl,dl
c001f737:	d3 e8                	shr    eax,cl
c001f739:	09 c7                	or     edi,eax
c001f73b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f73f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f743:	89 d8                	mov    eax,ebx
c001f745:	88 d9                	mov    cl,bl
c001f747:	d3 e7                	shl    edi,cl
c001f749:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f74d:	89 f3                	mov    ebx,esi
c001f74f:	88 d1                	mov    cl,dl
c001f751:	d3 eb                	shr    ebx,cl
c001f753:	89 c7                	mov    edi,eax
c001f755:	88 c1                	mov    cl,al
c001f757:	d3 e6                	shl    esi,cl
c001f759:	89 e8                	mov    eax,ebp
c001f75b:	88 d1                	mov    cl,dl
c001f75d:	d3 e8                	shr    eax,cl
c001f75f:	09 f0                	or     eax,esi
c001f761:	89 f9                	mov    ecx,edi
c001f763:	d3 e5                	shl    ebp,cl
c001f765:	89 da                	mov    edx,ebx
c001f767:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f76b:	89 d3                	mov    ebx,edx
c001f76d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f771:	89 c6                	mov    esi,eax
c001f773:	89 d1                	mov    ecx,edx
c001f775:	39 d3                	cmp    ebx,edx
c001f777:	72 27                	jb     c001f7a0 <__moddi3+0x170>
c001f779:	74 21                	je     c001f79c <__moddi3+0x16c>
c001f77b:	29 f5                	sub    ebp,esi
c001f77d:	19 cb                	sbb    ebx,ecx
c001f77f:	89 de                	mov    esi,ebx
c001f781:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f785:	d3 e6                	shl    esi,cl
c001f787:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f78b:	89 f9                	mov    ecx,edi
c001f78d:	d3 ed                	shr    ebp,cl
c001f78f:	09 ee                	or     esi,ebp
c001f791:	89 f0                	mov    eax,esi
c001f793:	d3 eb                	shr    ebx,cl
c001f795:	89 da                	mov    edx,ebx
c001f797:	e9 e8 fe ff ff       	jmp    c001f684 <__moddi3+0x54>
c001f79c:	39 c5                	cmp    ebp,eax
c001f79e:	73 db                	jae    c001f77b <__moddi3+0x14b>
c001f7a0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f7a4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f7a8:	89 d1                	mov    ecx,edx
c001f7aa:	89 c6                	mov    esi,eax
c001f7ac:	eb cd                	jmp    c001f77b <__moddi3+0x14b>
c001f7ae:	66 90                	xchg   ax,ax

c001f7b0 <__udivdi3>:
c001f7b0:	55                   	push   ebp
c001f7b1:	57                   	push   edi
c001f7b2:	56                   	push   esi
c001f7b3:	53                   	push   ebx
c001f7b4:	83 ec 1c             	sub    esp,0x1c
c001f7b7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f7bb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f7bf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f7c3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f7c7:	85 d2                	test   edx,edx
c001f7c9:	75 41                	jne    c001f80c <__udivdi3+0x5c>
c001f7cb:	39 f7                	cmp    edi,esi
c001f7cd:	76 15                	jbe    c001f7e4 <__udivdi3+0x34>
c001f7cf:	89 e8                	mov    eax,ebp
c001f7d1:	89 f2                	mov    edx,esi
c001f7d3:	f7 f7                	div    edi
c001f7d5:	31 db                	xor    ebx,ebx
c001f7d7:	89 da                	mov    edx,ebx
c001f7d9:	83 c4 1c             	add    esp,0x1c
c001f7dc:	5b                   	pop    ebx
c001f7dd:	5e                   	pop    esi
c001f7de:	5f                   	pop    edi
c001f7df:	5d                   	pop    ebp
c001f7e0:	c3                   	ret    
c001f7e1:	8d 76 00             	lea    esi,[esi+0x0]
c001f7e4:	89 f9                	mov    ecx,edi
c001f7e6:	85 ff                	test   edi,edi
c001f7e8:	75 0b                	jne    c001f7f5 <__udivdi3+0x45>
c001f7ea:	b8 01 00 00 00       	mov    eax,0x1
c001f7ef:	31 d2                	xor    edx,edx
c001f7f1:	f7 f7                	div    edi
c001f7f3:	89 c1                	mov    ecx,eax
c001f7f5:	31 d2                	xor    edx,edx
c001f7f7:	89 f0                	mov    eax,esi
c001f7f9:	f7 f1                	div    ecx
c001f7fb:	89 c3                	mov    ebx,eax
c001f7fd:	89 e8                	mov    eax,ebp
c001f7ff:	f7 f1                	div    ecx
c001f801:	89 da                	mov    edx,ebx
c001f803:	83 c4 1c             	add    esp,0x1c
c001f806:	5b                   	pop    ebx
c001f807:	5e                   	pop    esi
c001f808:	5f                   	pop    edi
c001f809:	5d                   	pop    ebp
c001f80a:	c3                   	ret    
c001f80b:	90                   	nop
c001f80c:	39 f2                	cmp    edx,esi
c001f80e:	77 1c                	ja     c001f82c <__udivdi3+0x7c>
c001f810:	0f bd da             	bsr    ebx,edx
c001f813:	83 f3 1f             	xor    ebx,0x1f
c001f816:	75 24                	jne    c001f83c <__udivdi3+0x8c>
c001f818:	39 f2                	cmp    edx,esi
c001f81a:	72 08                	jb     c001f824 <__udivdi3+0x74>
c001f81c:	39 ef                	cmp    edi,ebp
c001f81e:	0f 87 84 00 00 00    	ja     c001f8a8 <__udivdi3+0xf8>
c001f824:	b8 01 00 00 00       	mov    eax,0x1
c001f829:	eb ac                	jmp    c001f7d7 <__udivdi3+0x27>
c001f82b:	90                   	nop
c001f82c:	31 db                	xor    ebx,ebx
c001f82e:	31 c0                	xor    eax,eax
c001f830:	89 da                	mov    edx,ebx
c001f832:	83 c4 1c             	add    esp,0x1c
c001f835:	5b                   	pop    ebx
c001f836:	5e                   	pop    esi
c001f837:	5f                   	pop    edi
c001f838:	5d                   	pop    ebp
c001f839:	c3                   	ret    
c001f83a:	66 90                	xchg   ax,ax
c001f83c:	b8 20 00 00 00       	mov    eax,0x20
c001f841:	29 d8                	sub    eax,ebx
c001f843:	88 d9                	mov    cl,bl
c001f845:	d3 e2                	shl    edx,cl
c001f847:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f84b:	89 fa                	mov    edx,edi
c001f84d:	88 c1                	mov    cl,al
c001f84f:	d3 ea                	shr    edx,cl
c001f851:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f855:	09 d1                	or     ecx,edx
c001f857:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f85b:	88 d9                	mov    cl,bl
c001f85d:	d3 e7                	shl    edi,cl
c001f85f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f863:	89 f7                	mov    edi,esi
c001f865:	88 c1                	mov    cl,al
c001f867:	d3 ef                	shr    edi,cl
c001f869:	88 d9                	mov    cl,bl
c001f86b:	d3 e6                	shl    esi,cl
c001f86d:	89 ea                	mov    edx,ebp
c001f86f:	88 c1                	mov    cl,al
c001f871:	d3 ea                	shr    edx,cl
c001f873:	09 d6                	or     esi,edx
c001f875:	89 f0                	mov    eax,esi
c001f877:	89 fa                	mov    edx,edi
c001f879:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f87d:	89 d7                	mov    edi,edx
c001f87f:	89 c6                	mov    esi,eax
c001f881:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f885:	39 d7                	cmp    edi,edx
c001f887:	72 13                	jb     c001f89c <__udivdi3+0xec>
c001f889:	74 09                	je     c001f894 <__udivdi3+0xe4>
c001f88b:	89 f0                	mov    eax,esi
c001f88d:	31 db                	xor    ebx,ebx
c001f88f:	e9 43 ff ff ff       	jmp    c001f7d7 <__udivdi3+0x27>
c001f894:	88 d9                	mov    cl,bl
c001f896:	d3 e5                	shl    ebp,cl
c001f898:	39 c5                	cmp    ebp,eax
c001f89a:	73 ef                	jae    c001f88b <__udivdi3+0xdb>
c001f89c:	8d 46 ff             	lea    eax,[esi-0x1]
c001f89f:	31 db                	xor    ebx,ebx
c001f8a1:	e9 31 ff ff ff       	jmp    c001f7d7 <__udivdi3+0x27>
c001f8a6:	66 90                	xchg   ax,ax
c001f8a8:	31 c0                	xor    eax,eax
c001f8aa:	e9 28 ff ff ff       	jmp    c001f7d7 <__udivdi3+0x27>
c001f8af:	90                   	nop

c001f8b0 <__umoddi3>:
c001f8b0:	55                   	push   ebp
c001f8b1:	57                   	push   edi
c001f8b2:	56                   	push   esi
c001f8b3:	53                   	push   ebx
c001f8b4:	83 ec 1c             	sub    esp,0x1c
c001f8b7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f8bb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f8bf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f8c3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f8c7:	89 da                	mov    edx,ebx
c001f8c9:	85 c0                	test   eax,eax
c001f8cb:	75 37                	jne    c001f904 <__umoddi3+0x54>
c001f8cd:	39 df                	cmp    edi,ebx
c001f8cf:	76 13                	jbe    c001f8e4 <__umoddi3+0x34>
c001f8d1:	89 f0                	mov    eax,esi
c001f8d3:	f7 f7                	div    edi
c001f8d5:	89 d0                	mov    eax,edx
c001f8d7:	31 d2                	xor    edx,edx
c001f8d9:	83 c4 1c             	add    esp,0x1c
c001f8dc:	5b                   	pop    ebx
c001f8dd:	5e                   	pop    esi
c001f8de:	5f                   	pop    edi
c001f8df:	5d                   	pop    ebp
c001f8e0:	c3                   	ret    
c001f8e1:	8d 76 00             	lea    esi,[esi+0x0]
c001f8e4:	89 fd                	mov    ebp,edi
c001f8e6:	85 ff                	test   edi,edi
c001f8e8:	75 0b                	jne    c001f8f5 <__umoddi3+0x45>
c001f8ea:	b8 01 00 00 00       	mov    eax,0x1
c001f8ef:	31 d2                	xor    edx,edx
c001f8f1:	f7 f7                	div    edi
c001f8f3:	89 c5                	mov    ebp,eax
c001f8f5:	89 d8                	mov    eax,ebx
c001f8f7:	31 d2                	xor    edx,edx
c001f8f9:	f7 f5                	div    ebp
c001f8fb:	89 f0                	mov    eax,esi
c001f8fd:	f7 f5                	div    ebp
c001f8ff:	89 d0                	mov    eax,edx
c001f901:	eb d4                	jmp    c001f8d7 <__umoddi3+0x27>
c001f903:	90                   	nop
c001f904:	89 f1                	mov    ecx,esi
c001f906:	39 d8                	cmp    eax,ebx
c001f908:	76 0a                	jbe    c001f914 <__umoddi3+0x64>
c001f90a:	89 f0                	mov    eax,esi
c001f90c:	83 c4 1c             	add    esp,0x1c
c001f90f:	5b                   	pop    ebx
c001f910:	5e                   	pop    esi
c001f911:	5f                   	pop    edi
c001f912:	5d                   	pop    ebp
c001f913:	c3                   	ret    
c001f914:	0f bd e8             	bsr    ebp,eax
c001f917:	83 f5 1f             	xor    ebp,0x1f
c001f91a:	75 1c                	jne    c001f938 <__umoddi3+0x88>
c001f91c:	39 d8                	cmp    eax,ebx
c001f91e:	72 04                	jb     c001f924 <__umoddi3+0x74>
c001f920:	39 f7                	cmp    edi,esi
c001f922:	77 08                	ja     c001f92c <__umoddi3+0x7c>
c001f924:	89 da                	mov    edx,ebx
c001f926:	29 fe                	sub    esi,edi
c001f928:	19 c2                	sbb    edx,eax
c001f92a:	89 f1                	mov    ecx,esi
c001f92c:	89 c8                	mov    eax,ecx
c001f92e:	83 c4 1c             	add    esp,0x1c
c001f931:	5b                   	pop    ebx
c001f932:	5e                   	pop    esi
c001f933:	5f                   	pop    edi
c001f934:	5d                   	pop    ebp
c001f935:	c3                   	ret    
c001f936:	66 90                	xchg   ax,ax
c001f938:	ba 20 00 00 00       	mov    edx,0x20
c001f93d:	29 ea                	sub    edx,ebp
c001f93f:	89 e9                	mov    ecx,ebp
c001f941:	d3 e0                	shl    eax,cl
c001f943:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f947:	89 f8                	mov    eax,edi
c001f949:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f94d:	88 d1                	mov    cl,dl
c001f94f:	d3 e8                	shr    eax,cl
c001f951:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f955:	09 c1                	or     ecx,eax
c001f957:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f95b:	89 e9                	mov    ecx,ebp
c001f95d:	d3 e7                	shl    edi,cl
c001f95f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f963:	89 d8                	mov    eax,ebx
c001f965:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f969:	88 d1                	mov    cl,dl
c001f96b:	d3 e8                	shr    eax,cl
c001f96d:	89 c7                	mov    edi,eax
c001f96f:	89 e9                	mov    ecx,ebp
c001f971:	d3 e3                	shl    ebx,cl
c001f973:	89 f0                	mov    eax,esi
c001f975:	88 d1                	mov    cl,dl
c001f977:	d3 e8                	shr    eax,cl
c001f979:	09 d8                	or     eax,ebx
c001f97b:	89 e9                	mov    ecx,ebp
c001f97d:	d3 e6                	shl    esi,cl
c001f97f:	89 f3                	mov    ebx,esi
c001f981:	89 fa                	mov    edx,edi
c001f983:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f987:	89 d1                	mov    ecx,edx
c001f989:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f98d:	89 c6                	mov    esi,eax
c001f98f:	89 d7                	mov    edi,edx
c001f991:	39 d1                	cmp    ecx,edx
c001f993:	72 27                	jb     c001f9bc <__umoddi3+0x10c>
c001f995:	74 21                	je     c001f9b8 <__umoddi3+0x108>
c001f997:	89 ca                	mov    edx,ecx
c001f999:	29 f3                	sub    ebx,esi
c001f99b:	19 fa                	sbb    edx,edi
c001f99d:	89 d0                	mov    eax,edx
c001f99f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f9a3:	d3 e0                	shl    eax,cl
c001f9a5:	89 e9                	mov    ecx,ebp
c001f9a7:	d3 eb                	shr    ebx,cl
c001f9a9:	09 d8                	or     eax,ebx
c001f9ab:	d3 ea                	shr    edx,cl
c001f9ad:	83 c4 1c             	add    esp,0x1c
c001f9b0:	5b                   	pop    ebx
c001f9b1:	5e                   	pop    esi
c001f9b2:	5f                   	pop    edi
c001f9b3:	5d                   	pop    ebp
c001f9b4:	c3                   	ret    
c001f9b5:	8d 76 00             	lea    esi,[esi+0x0]
c001f9b8:	39 c3                	cmp    ebx,eax
c001f9ba:	73 db                	jae    c001f997 <__umoddi3+0xe7>
c001f9bc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f9c0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f9c4:	89 d7                	mov    edi,edx
c001f9c6:	89 c6                	mov    esi,eax
c001f9c8:	eb cd                	jmp    c001f997 <__umoddi3+0xe7>

Disassembly of section .init:

c001f9ca <_init>:
c001f9ca:	55                   	push   ebp
c001f9cb:	89 e5                	mov    ebp,esp
c001f9cd:	e8 22 07 fe ff       	call   c00000f4 <frame_dummy>
c001f9d2:	e8 e5 fa ff ff       	call   c001f4bc <__do_global_ctors_aux>
c001f9d7:	5d                   	pop    ebp
c001f9d8:	c3                   	ret    

Disassembly of section .fini:

c001f9d9 <_fini>:
c001f9d9:	55                   	push   ebp
c001f9da:	89 e5                	mov    ebp,esp
c001f9dc:	e8 a3 06 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001f9e1:	5d                   	pop    ebp
c001f9e2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f9e4 <Computer::~Computer()>:
c001f9e4:	83 ec 0c             	sub    esp,0xc
c001f9e7:	ba f4 0c 02 c0       	mov    edx,0xc0020cf4
c001f9ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9f0:	89 10                	mov    DWORD PTR [eax],edx
c001f9f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9f6:	83 ec 0c             	sub    esp,0xc
c001f9f9:	50                   	push   eax
c001f9fa:	e8 47 cf fe ff       	call   c000c946 <Device::~Device()>
c001f9ff:	83 c4 10             	add    esp,0x10
c001fa02:	90                   	nop
c001fa03:	83 c4 0c             	add    esp,0xc
c001fa06:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001fa08 <Computer::~Computer()>:
c001fa08:	83 ec 0c             	sub    esp,0xc
c001fa0b:	83 ec 0c             	sub    esp,0xc
c001fa0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa12:	e8 cd ff ff ff       	call   c001f9e4 <Computer::~Computer()>
c001fa17:	83 c4 10             	add    esp,0x10
c001fa1a:	83 ec 08             	sub    esp,0x8
c001fa1d:	68 70 01 00 00       	push   0x170
c001fa22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa26:	e8 e1 ad fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fa2b:	83 c4 10             	add    esp,0x10
c001fa2e:	83 c4 0c             	add    esp,0xc
c001fa31:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001fa32 <idleCommon()>:
c001fa32:	83 ec 0c             	sub    esp,0xc
c001fa35:	fa                   	cli    
c001fa36:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001fa3c:	e8 b3 66 ff ff       	call   c00160f4 <schedule()>
c001fa41:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001fa46:	48                   	dec    eax
c001fa47:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001fa4c:	75 01                	jne    c001fa4f <idleCommon()+0x1d>
c001fa4e:	fb                   	sti    
c001fa4f:	83 c4 0c             	add    esp,0xc
c001fa52:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001fa54 <LinkedList<UnixFile>::~LinkedList()>:
c001fa54:	90                   	nop
c001fa55:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001fa56 <LinkedList<UnixFile>::LinkedList()>:
c001fa56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fa60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa64:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fa6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa6f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fa76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fa80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa84:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fa8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa8f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fa96:	90                   	nop
c001fa97:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001fa98 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001fa98:	83 ec 0c             	sub    esp,0xc
c001fa9b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001faa0:	75 10                	jne    c001fab2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001faa2:	83 ec 0c             	sub    esp,0xc
c001faa5:	68 08 0f 02 c0       	push   0xc0020f08
c001faaa:	e8 5c 1b ff ff       	call   c001160b <KePanic(char const*)>
c001faaf:	83 c4 10             	add    esp,0x10
c001fab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fab6:	8b 00                	mov    eax,DWORD PTR [eax]
c001fab8:	85 c0                	test   eax,eax
c001faba:	74 34                	je     c001faf0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001fabc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fac0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fac3:	85 c0                	test   eax,eax
c001fac5:	74 29                	je     c001faf0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001fac7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001facb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001face:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fad2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fad5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fad9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fadd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fae4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fae7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001faee:	eb 65                	jmp    c001fb55 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001faf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faf4:	8b 00                	mov    eax,DWORD PTR [eax]
c001faf6:	85 c0                	test   eax,eax
c001faf8:	75 4b                	jne    c001fb45 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fafa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fafe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb01:	85 c0                	test   eax,eax
c001fb03:	75 40                	jne    c001fb45 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fb05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb09:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb0d:	89 10                	mov    DWORD PTR [eax],edx
c001fb0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb13:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb17:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fb1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb21:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb2c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb2f:	85 c0                	test   eax,eax
c001fb31:	74 22                	je     c001fb55 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fb33:	83 ec 0c             	sub    esp,0xc
c001fb36:	68 2a 0f 02 c0       	push   0xc0020f2a
c001fb3b:	e8 cb 1a ff ff       	call   c001160b <KePanic(char const*)>
c001fb40:	83 c4 10             	add    esp,0x10
c001fb43:	eb 10                	jmp    c001fb55 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fb45:	83 ec 0c             	sub    esp,0xc
c001fb48:	68 34 0f 02 c0       	push   0xc0020f34
c001fb4d:	e8 b9 1a ff ff       	call   c001160b <KePanic(char const*)>
c001fb52:	83 c4 10             	add    esp,0x10
c001fb55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb59:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb5c:	8d 50 01             	lea    edx,[eax+0x1]
c001fb5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb63:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fb66:	90                   	nop
c001fb67:	83 c4 0c             	add    esp,0xc
c001fb6a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001fb6c <LinkedList<UnixFile>::getFirstElement()>:
c001fb6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb70:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb72:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001fb74 <LinkedList<UnixFile>::removeFirst()>:
c001fb74:	83 ec 0c             	sub    esp,0xc
c001fb77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb7b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb7d:	85 c0                	test   eax,eax
c001fb7f:	75 12                	jne    c001fb93 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001fb81:	83 ec 0c             	sub    esp,0xc
c001fb84:	68 40 0f 02 c0       	push   0xc0020f40
c001fb89:	e8 7d 1a ff ff       	call   c001160b <KePanic(char const*)>
c001fb8e:	83 c4 10             	add    esp,0x10
c001fb91:	eb 7e                	jmp    c001fc11 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001fb93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb97:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb9a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb9d:	85 c0                	test   eax,eax
c001fb9f:	74 10                	je     c001fbb1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001fba1:	83 ec 0c             	sub    esp,0xc
c001fba4:	68 8b 0f 02 c0       	push   0xc0020f8b
c001fba9:	e8 5d 1a ff ff       	call   c001160b <KePanic(char const*)>
c001fbae:	83 c4 10             	add    esp,0x10
c001fbb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbb5:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbb7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fbba:	85 c0                	test   eax,eax
c001fbbc:	75 33                	jne    c001fbf1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001fbbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbc2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fbc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbcc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fbd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbd7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fbda:	83 f8 01             	cmp    eax,0x1
c001fbdd:	74 21                	je     c001fc00 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fbdf:	83 ec 0c             	sub    esp,0xc
c001fbe2:	68 64 0f 02 c0       	push   0xc0020f64
c001fbe7:	e8 1f 1a ff ff       	call   c001160b <KePanic(char const*)>
c001fbec:	83 c4 10             	add    esp,0x10
c001fbef:	eb 0f                	jmp    c001fc00 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fbf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbf5:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbf7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001fbfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbfe:	89 10                	mov    DWORD PTR [eax],edx
c001fc00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc04:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc07:	8d 50 ff             	lea    edx,[eax-0x1]
c001fc0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc0e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fc11:	83 c4 0c             	add    esp,0xc
c001fc14:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001fc16 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001fc16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fc1a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc1d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001fc1e <DriverlessDevice::~DriverlessDevice()>:
c001fc1e:	ba bc 1b 02 c0       	mov    edx,0xc0021bbc
c001fc23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc27:	89 10                	mov    DWORD PTR [eax],edx
c001fc29:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc2d:	50                   	push   eax
c001fc2e:	e8 13 cd fe ff       	call   c000c946 <Device::~Device()>
c001fc33:	83 c4 04             	add    esp,0x4
c001fc36:	90                   	nop
c001fc37:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001fc38 <DriverlessDevice::~DriverlessDevice()>:
c001fc38:	83 ec 0c             	sub    esp,0xc
c001fc3b:	83 ec 0c             	sub    esp,0xc
c001fc3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc42:	e8 d7 ff ff ff       	call   c001fc1e <DriverlessDevice::~DriverlessDevice()>
c001fc47:	83 c4 10             	add    esp,0x10
c001fc4a:	83 ec 08             	sub    esp,0x8
c001fc4d:	68 58 01 00 00       	push   0x158
c001fc52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc56:	e8 b1 ab fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fc5b:	83 c4 10             	add    esp,0x10
c001fc5e:	83 c4 0c             	add    esp,0xc
c001fc61:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001fc62 <LinkedList<Device>::addElement(Device*)>:
c001fc62:	83 ec 0c             	sub    esp,0xc
c001fc65:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fc6a:	75 10                	jne    c001fc7c <LinkedList<Device>::addElement(Device*)+0x1a>
c001fc6c:	83 ec 0c             	sub    esp,0xc
c001fc6f:	68 08 0f 02 c0       	push   0xc0020f08
c001fc74:	e8 92 19 ff ff       	call   c001160b <KePanic(char const*)>
c001fc79:	83 c4 10             	add    esp,0x10
c001fc7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc80:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc82:	85 c0                	test   eax,eax
c001fc84:	74 3a                	je     c001fcc0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fc86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc8d:	85 c0                	test   eax,eax
c001fc8f:	74 2f                	je     c001fcc0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fc91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc95:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc98:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc9c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001fca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fca6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fcaa:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fcad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcb1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fcb4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fcbe:	eb 68                	jmp    c001fd28 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fcc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcc4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fcc6:	85 c0                	test   eax,eax
c001fcc8:	75 4e                	jne    c001fd18 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fcca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fcd1:	85 c0                	test   eax,eax
c001fcd3:	75 43                	jne    c001fd18 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fcd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcd9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fcdd:	89 10                	mov    DWORD PTR [eax],edx
c001fcdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fce3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fce7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fcea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fcf1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fcfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd02:	85 c0                	test   eax,eax
c001fd04:	74 22                	je     c001fd28 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fd06:	83 ec 0c             	sub    esp,0xc
c001fd09:	68 2a 0f 02 c0       	push   0xc0020f2a
c001fd0e:	e8 f8 18 ff ff       	call   c001160b <KePanic(char const*)>
c001fd13:	83 c4 10             	add    esp,0x10
c001fd16:	eb 10                	jmp    c001fd28 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fd18:	83 ec 0c             	sub    esp,0xc
c001fd1b:	68 34 0f 02 c0       	push   0xc0020f34
c001fd20:	e8 e6 18 ff ff       	call   c001160b <KePanic(char const*)>
c001fd25:	83 c4 10             	add    esp,0x10
c001fd28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd2c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd2f:	8d 50 01             	lea    edx,[eax+0x1]
c001fd32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd36:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fd39:	90                   	nop
c001fd3a:	83 c4 0c             	add    esp,0xc
c001fd3d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001fd3e <LinkedList<Device>::LinkedList()>:
c001fd3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd42:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fd48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd4c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fd53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd57:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fd5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd62:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fd68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd6c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fd73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd77:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fd7e:	90                   	nop
c001fd7f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fd80 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fd80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd84:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd86:	85 c0                	test   eax,eax
c001fd88:	75 0e                	jne    c001fd98 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fd8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd91:	85 c0                	test   eax,eax
c001fd93:	75 03                	jne    c001fd98 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fd95:	b0 01                	mov    al,0x1
c001fd97:	c3                   	ret    
c001fd98:	b0 00                	mov    al,0x0
c001fd9a:	90                   	nop
c001fd9b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fd9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fd9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fda0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fda2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fda4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fda4:	83 ec 0c             	sub    esp,0xc
c001fda7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdab:	8b 00                	mov    eax,DWORD PTR [eax]
c001fdad:	85 c0                	test   eax,eax
c001fdaf:	75 17                	jne    c001fdc8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001fdb1:	83 ec 0c             	sub    esp,0xc
c001fdb4:	68 40 0f 02 c0       	push   0xc0020f40
c001fdb9:	e8 4d 18 ff ff       	call   c001160b <KePanic(char const*)>
c001fdbe:	83 c4 10             	add    esp,0x10
c001fdc1:	e9 96 00 00 00       	jmp    c001fe5c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001fdc6:	66 90                	xchg   ax,ax
c001fdc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdcc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fdcf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fdd2:	85 c0                	test   eax,eax
c001fdd4:	0f 95 c0             	setne  al
c001fdd7:	0f b6 c0             	movzx  eax,al
c001fdda:	85 c0                	test   eax,eax
c001fddc:	74 12                	je     c001fdf0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001fdde:	83 ec 0c             	sub    esp,0xc
c001fde1:	68 8b 0f 02 c0       	push   0xc0020f8b
c001fde6:	e8 20 18 ff ff       	call   c001160b <KePanic(char const*)>
c001fdeb:	83 c4 10             	add    esp,0x10
c001fdee:	66 90                	xchg   ax,ax
c001fdf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdf4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fdf6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fdf9:	85 c0                	test   eax,eax
c001fdfb:	0f 94 c0             	sete   al
c001fdfe:	0f b6 c0             	movzx  eax,al
c001fe01:	85 c0                	test   eax,eax
c001fe03:	74 33                	je     c001fe38 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001fe05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe09:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fe0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe13:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fe1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe1e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe21:	83 f8 01             	cmp    eax,0x1
c001fe24:	74 22                	je     c001fe48 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fe26:	83 ec 0c             	sub    esp,0xc
c001fe29:	68 64 0f 02 c0       	push   0xc0020f64
c001fe2e:	e8 d8 17 ff ff       	call   c001160b <KePanic(char const*)>
c001fe33:	83 c4 10             	add    esp,0x10
c001fe36:	eb 10                	jmp    c001fe48 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fe38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe3c:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe3e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001fe41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe45:	89 10                	mov    DWORD PTR [eax],edx
c001fe47:	90                   	nop
c001fe48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe4c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe4f:	8d 50 ff             	lea    edx,[eax-0x1]
c001fe52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe56:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fe59:	8d 76 00             	lea    esi,[esi+0x0]
c001fe5c:	83 c4 0c             	add    esp,0xc
c001fe5f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001fe60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001fe60:	83 ec 0c             	sub    esp,0xc
c001fe63:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fe68:	75 12                	jne    c001fe7c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001fe6a:	83 ec 0c             	sub    esp,0xc
c001fe6d:	68 08 0f 02 c0       	push   0xc0020f08
c001fe72:	e8 94 17 ff ff       	call   c001160b <KePanic(char const*)>
c001fe77:	83 c4 10             	add    esp,0x10
c001fe7a:	66 90                	xchg   ax,ax
c001fe7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe80:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe82:	85 c0                	test   eax,eax
c001fe84:	74 36                	je     c001febc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fe86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe8d:	85 c0                	test   eax,eax
c001fe8f:	74 2b                	je     c001febc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fe91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe95:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe98:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fe9c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001fe9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fea3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fea7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001feaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001feb1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001feb8:	eb 6a                	jmp    c001ff24 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001feba:	66 90                	xchg   ax,ax
c001febc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fec0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fec2:	85 c0                	test   eax,eax
c001fec4:	75 4e                	jne    c001ff14 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fec6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fecd:	85 c0                	test   eax,eax
c001fecf:	75 43                	jne    c001ff14 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fed1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fed5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fed9:	89 10                	mov    DWORD PTR [eax],edx
c001fedb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fedf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fee3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fee6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001feed:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fef4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fef8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fefb:	85 c0                	test   eax,eax
c001fefd:	74 25                	je     c001ff24 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001feff:	83 ec 0c             	sub    esp,0xc
c001ff02:	68 2a 0f 02 c0       	push   0xc0020f2a
c001ff07:	e8 ff 16 ff ff       	call   c001160b <KePanic(char const*)>
c001ff0c:	83 c4 10             	add    esp,0x10
c001ff0f:	eb 13                	jmp    c001ff24 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ff11:	8d 76 00             	lea    esi,[esi+0x0]
c001ff14:	83 ec 0c             	sub    esp,0xc
c001ff17:	68 34 0f 02 c0       	push   0xc0020f34
c001ff1c:	e8 ea 16 ff ff       	call   c001160b <KePanic(char const*)>
c001ff21:	83 c4 10             	add    esp,0x10
c001ff24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff28:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ff2b:	8d 50 01             	lea    edx,[eax+0x1]
c001ff2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff32:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ff35:	90                   	nop
c001ff36:	83 c4 0c             	add    esp,0xc
c001ff39:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001ff3c <ACPI::~ACPI()>:
c001ff3c:	83 ec 0c             	sub    esp,0xc
c001ff3f:	ba a4 21 02 c0       	mov    edx,0xc00221a4
c001ff44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff48:	89 10                	mov    DWORD PTR [eax],edx
c001ff4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff4e:	83 ec 0c             	sub    esp,0xc
c001ff51:	50                   	push   eax
c001ff52:	e8 ef c9 fe ff       	call   c000c946 <Device::~Device()>
c001ff57:	83 c4 10             	add    esp,0x10
c001ff5a:	90                   	nop
c001ff5b:	83 c4 0c             	add    esp,0xc
c001ff5e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001ff60 <ACPI::~ACPI()>:
c001ff60:	83 ec 0c             	sub    esp,0xc
c001ff63:	83 ec 0c             	sub    esp,0xc
c001ff66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff6a:	e8 cd ff ff ff       	call   c001ff3c <ACPI::~ACPI()>
c001ff6f:	83 c4 10             	add    esp,0x10
c001ff72:	83 ec 08             	sub    esp,0x8
c001ff75:	68 64 12 00 00       	push   0x1264
c001ff7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff7e:	e8 89 a8 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001ff83:	83 c4 10             	add    esp,0x10
c001ff86:	83 c4 0c             	add    esp,0xc
c001ff89:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001ff8c <LinkedList<Device>::~LinkedList()>:
c001ff8c:	90                   	nop
c001ff8d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001ff90 <LinkedList<Device>::isEmpty()>:
c001ff90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff94:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff96:	85 c0                	test   eax,eax
c001ff98:	75 0e                	jne    c001ffa8 <LinkedList<Device>::isEmpty()+0x18>
c001ff9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ffa1:	85 c0                	test   eax,eax
c001ffa3:	75 03                	jne    c001ffa8 <LinkedList<Device>::isEmpty()+0x18>
c001ffa5:	b0 01                	mov    al,0x1
c001ffa7:	c3                   	ret    
c001ffa8:	b0 00                	mov    al,0x0
c001ffaa:	90                   	nop
c001ffab:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001ffac <LinkedList<Device>::getFirstElement()>:
c001ffac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ffb0:	8b 00                	mov    eax,DWORD PTR [eax]
c001ffb2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001ffb4 <LinkedList<Device>::removeFirst()>:
c001ffb4:	83 ec 0c             	sub    esp,0xc
c001ffb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffbb:	8b 00                	mov    eax,DWORD PTR [eax]
c001ffbd:	85 c0                	test   eax,eax
c001ffbf:	75 17                	jne    c001ffd8 <LinkedList<Device>::removeFirst()+0x24>
c001ffc1:	83 ec 0c             	sub    esp,0xc
c001ffc4:	68 40 0f 02 c0       	push   0xc0020f40
c001ffc9:	e8 3d 16 ff ff       	call   c001160b <KePanic(char const*)>
c001ffce:	83 c4 10             	add    esp,0x10
c001ffd1:	e9 92 00 00 00       	jmp    c0020068 <LinkedList<Device>::removeFirst()+0xb4>
c001ffd6:	66 90                	xchg   ax,ax
c001ffd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffdc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ffdf:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ffe5:	85 c0                	test   eax,eax
c001ffe7:	74 13                	je     c001fffc <LinkedList<Device>::removeFirst()+0x48>
c001ffe9:	83 ec 0c             	sub    esp,0xc
c001ffec:	68 8b 0f 02 c0       	push   0xc0020f8b
c001fff1:	e8 15 16 ff ff       	call   c001160b <KePanic(char const*)>
c001fff6:	83 c4 10             	add    esp,0x10
c001fff9:	8d 76 00             	lea    esi,[esi+0x0]
c001fffc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020000:	8b 00                	mov    eax,DWORD PTR [eax]
c0020002:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0020008:	85 c0                	test   eax,eax
c002000a:	75 34                	jne    c0020040 <LinkedList<Device>::removeFirst()+0x8c>
c002000c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020010:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020016:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002001a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020021:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020025:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020028:	83 f8 01             	cmp    eax,0x1
c002002b:	74 27                	je     c0020054 <LinkedList<Device>::removeFirst()+0xa0>
c002002d:	83 ec 0c             	sub    esp,0xc
c0020030:	68 64 0f 02 c0       	push   0xc0020f64
c0020035:	e8 d1 15 ff ff       	call   c001160b <KePanic(char const*)>
c002003a:	83 c4 10             	add    esp,0x10
c002003d:	eb 15                	jmp    c0020054 <LinkedList<Device>::removeFirst()+0xa0>
c002003f:	90                   	nop
c0020040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020044:	8b 00                	mov    eax,DWORD PTR [eax]
c0020046:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002004c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020050:	89 10                	mov    DWORD PTR [eax],edx
c0020052:	66 90                	xchg   ax,ax
c0020054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020058:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002005b:	8d 50 ff             	lea    edx,[eax-0x1]
c002005e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020062:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020065:	8d 76 00             	lea    esi,[esi+0x0]
c0020068:	83 c4 0c             	add    esp,0xc
c002006b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002006c <CPU::~CPU()>:
c002006c:	83 ec 0c             	sub    esp,0xc
c002006f:	ba 4c 23 02 c0       	mov    edx,0xc002234c
c0020074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020078:	89 10                	mov    DWORD PTR [eax],edx
c002007a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002007e:	83 ec 0c             	sub    esp,0xc
c0020081:	50                   	push   eax
c0020082:	e8 bf c8 fe ff       	call   c000c946 <Device::~Device()>
c0020087:	83 c4 10             	add    esp,0x10
c002008a:	90                   	nop
c002008b:	83 c4 0c             	add    esp,0xc
c002008e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0020090 <CPU::~CPU()>:
c0020090:	83 ec 0c             	sub    esp,0xc
c0020093:	83 ec 0c             	sub    esp,0xc
c0020096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002009a:	e8 cd ff ff ff       	call   c002006c <CPU::~CPU()>
c002009f:	83 c4 10             	add    esp,0x10
c00200a2:	83 ec 08             	sub    esp,0x8
c00200a5:	68 94 11 00 00       	push   0x1194
c00200aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200ae:	e8 59 a7 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00200b3:	83 c4 10             	add    esp,0x10
c00200b6:	83 c4 0c             	add    esp,0xc
c00200b9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00200bc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00200bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00200c0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00200c3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00200c4 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00200c4:	90                   	nop
c00200c5:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00200c8 <ThreadControlBlock::ThreadControlBlock()>:
c00200c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200cc:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00200d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200d7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00200de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200e2:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00200e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200ed:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c00200f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200f8:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c00200ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020103:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0020107:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002010b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c002010f:	90                   	nop
c0020110:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0020114 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0020114:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020118:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002011e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020122:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020129:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002012d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020134:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020138:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002013e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020142:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020149:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002014d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020154:	90                   	nop
c0020155:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0020156 <PCI::~PCI()>:
c0020156:	83 ec 0c             	sub    esp,0xc
c0020159:	ba 2c 32 02 c0       	mov    edx,0xc002322c
c002015e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020162:	89 10                	mov    DWORD PTR [eax],edx
c0020164:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020168:	83 ec 0c             	sub    esp,0xc
c002016b:	50                   	push   eax
c002016c:	e8 67 c2 fe ff       	call   c000c3d8 <Bus::~Bus()>
c0020171:	83 c4 10             	add    esp,0x10
c0020174:	90                   	nop
c0020175:	83 c4 0c             	add    esp,0xc
c0020178:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002017a <PCI::~PCI()>:
c002017a:	83 ec 0c             	sub    esp,0xc
c002017d:	83 ec 0c             	sub    esp,0xc
c0020180:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020184:	e8 cd ff ff ff       	call   c0020156 <PCI::~PCI()>
c0020189:	83 c4 10             	add    esp,0x10
c002018c:	83 ec 08             	sub    esp,0x8
c002018f:	68 5c 01 00 00       	push   0x15c
c0020194:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020198:	e8 6f a6 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c002019d:	83 c4 10             	add    esp,0x10
c00201a0:	83 c4 0c             	add    esp,0xc
c00201a3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00201a4 <IDE::~IDE()>:
c00201a4:	83 ec 0c             	sub    esp,0xc
c00201a7:	ba e0 32 02 c0       	mov    edx,0xc00232e0
c00201ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201b0:	89 10                	mov    DWORD PTR [eax],edx
c00201b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201b6:	83 ec 0c             	sub    esp,0xc
c00201b9:	50                   	push   eax
c00201ba:	e8 01 cc fe ff       	call   c000cdc0 <HardDiskController::~HardDiskController()>
c00201bf:	83 c4 10             	add    esp,0x10
c00201c2:	90                   	nop
c00201c3:	83 c4 0c             	add    esp,0xc
c00201c6:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00201c8 <IDE::~IDE()>:
c00201c8:	83 ec 0c             	sub    esp,0xc
c00201cb:	83 ec 0c             	sub    esp,0xc
c00201ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201d2:	e8 cd ff ff ff       	call   c00201a4 <IDE::~IDE()>
c00201d7:	83 c4 10             	add    esp,0x10
c00201da:	83 ec 08             	sub    esp,0x8
c00201dd:	68 70 02 00 00       	push   0x270
c00201e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201e6:	e8 21 a6 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00201eb:	83 c4 10             	add    esp,0x10
c00201ee:	83 c4 0c             	add    esp,0xc
c00201f1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00201f2 <SATABus::~SATABus()>:
c00201f2:	83 ec 0c             	sub    esp,0xc
c00201f5:	ba 30 33 02 c0       	mov    edx,0xc0023330
c00201fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201fe:	89 10                	mov    DWORD PTR [eax],edx
c0020200:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020204:	83 ec 0c             	sub    esp,0xc
c0020207:	50                   	push   eax
c0020208:	e8 b3 cb fe ff       	call   c000cdc0 <HardDiskController::~HardDiskController()>
c002020d:	83 c4 10             	add    esp,0x10
c0020210:	90                   	nop
c0020211:	83 c4 0c             	add    esp,0xc
c0020214:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0020216 <SATABus::~SATABus()>:
c0020216:	83 ec 0c             	sub    esp,0xc
c0020219:	83 ec 0c             	sub    esp,0xc
c002021c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020220:	e8 cd ff ff ff       	call   c00201f2 <SATABus::~SATABus()>
c0020225:	83 c4 10             	add    esp,0x10
c0020228:	83 ec 08             	sub    esp,0x8
c002022b:	68 64 01 00 00       	push   0x164
c0020230:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020234:	e8 d3 a5 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0020239:	83 c4 10             	add    esp,0x10
c002023c:	83 c4 0c             	add    esp,0xc
c002023f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0020240 <ATA::~ATA()>:
c0020240:	83 ec 0c             	sub    esp,0xc
c0020243:	ba 70 33 02 c0       	mov    edx,0xc0023370
c0020248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002024c:	89 10                	mov    DWORD PTR [eax],edx
c002024e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020252:	83 ec 0c             	sub    esp,0xc
c0020255:	50                   	push   eax
c0020256:	e8 47 cc fe ff       	call   c000cea2 <PhysicalDisk::~PhysicalDisk()>
c002025b:	83 c4 10             	add    esp,0x10
c002025e:	90                   	nop
c002025f:	83 c4 0c             	add    esp,0xc
c0020262:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0020264 <ATA::~ATA()>:
c0020264:	83 ec 0c             	sub    esp,0xc
c0020267:	83 ec 0c             	sub    esp,0xc
c002026a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002026e:	e8 cd ff ff ff       	call   c0020240 <ATA::~ATA()>
c0020273:	83 c4 10             	add    esp,0x10
c0020276:	83 ec 08             	sub    esp,0x8
c0020279:	68 7c 01 00 00       	push   0x17c
c002027e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020282:	e8 85 a5 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0020287:	83 c4 10             	add    esp,0x10
c002028a:	83 c4 0c             	add    esp,0xc
c002028d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002028e <ATAPI::~ATAPI()>:
c002028e:	83 ec 0c             	sub    esp,0xc
c0020291:	ba b8 33 02 c0       	mov    edx,0xc00233b8
c0020296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002029a:	89 10                	mov    DWORD PTR [eax],edx
c002029c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202a0:	83 ec 0c             	sub    esp,0xc
c00202a3:	50                   	push   eax
c00202a4:	e8 f9 cb fe ff       	call   c000cea2 <PhysicalDisk::~PhysicalDisk()>
c00202a9:	83 c4 10             	add    esp,0x10
c00202ac:	90                   	nop
c00202ad:	83 c4 0c             	add    esp,0xc
c00202b0:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00202b2 <ATAPI::~ATAPI()>:
c00202b2:	83 ec 0c             	sub    esp,0xc
c00202b5:	83 ec 0c             	sub    esp,0xc
c00202b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202bc:	e8 cd ff ff ff       	call   c002028e <ATAPI::~ATAPI()>
c00202c1:	83 c4 10             	add    esp,0x10
c00202c4:	83 ec 08             	sub    esp,0x8
c00202c7:	68 84 01 00 00       	push   0x184
c00202cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202d0:	e8 37 a5 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00202d5:	83 c4 10             	add    esp,0x10
c00202d8:	83 c4 0c             	add    esp,0xc
c00202db:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00202dc <SATA::~SATA()>:
c00202dc:	83 ec 0c             	sub    esp,0xc
c00202df:	ba 6c 34 02 c0       	mov    edx,0xc002346c
c00202e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202e8:	89 10                	mov    DWORD PTR [eax],edx
c00202ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202ee:	83 ec 0c             	sub    esp,0xc
c00202f1:	50                   	push   eax
c00202f2:	e8 ab cb fe ff       	call   c000cea2 <PhysicalDisk::~PhysicalDisk()>
c00202f7:	83 c4 10             	add    esp,0x10
c00202fa:	90                   	nop
c00202fb:	83 c4 0c             	add    esp,0xc
c00202fe:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0020300 <SATA::~SATA()>:
c0020300:	83 ec 0c             	sub    esp,0xc
c0020303:	83 ec 0c             	sub    esp,0xc
c0020306:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002030a:	e8 cd ff ff ff       	call   c00202dc <SATA::~SATA()>
c002030f:	83 c4 10             	add    esp,0x10
c0020312:	83 ec 08             	sub    esp,0x8
c0020315:	68 7c 01 00 00       	push   0x17c
c002031a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002031e:	e8 e9 a4 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0020323:	83 c4 10             	add    esp,0x10
c0020326:	83 c4 0c             	add    esp,0xc
c0020329:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002032a <SATAPI::~SATAPI()>:
c002032a:	83 ec 0c             	sub    esp,0xc
c002032d:	ba 90 35 02 c0       	mov    edx,0xc0023590
c0020332:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020336:	89 10                	mov    DWORD PTR [eax],edx
c0020338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002033c:	83 ec 0c             	sub    esp,0xc
c002033f:	50                   	push   eax
c0020340:	e8 5d cb fe ff       	call   c000cea2 <PhysicalDisk::~PhysicalDisk()>
c0020345:	83 c4 10             	add    esp,0x10
c0020348:	90                   	nop
c0020349:	83 c4 0c             	add    esp,0xc
c002034c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002034e <SATAPI::~SATAPI()>:
c002034e:	83 ec 0c             	sub    esp,0xc
c0020351:	83 ec 0c             	sub    esp,0xc
c0020354:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020358:	e8 cd ff ff ff       	call   c002032a <SATAPI::~SATAPI()>
c002035d:	83 c4 10             	add    esp,0x10
c0020360:	83 ec 08             	sub    esp,0x8
c0020363:	68 84 01 00 00       	push   0x184
c0020368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002036c:	e8 9b a4 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0020371:	83 c4 10             	add    esp,0x10
c0020374:	83 c4 0c             	add    esp,0xc
c0020377:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0020378 <IOAPIC::~IOAPIC()>:
c0020378:	83 ec 0c             	sub    esp,0xc
c002037b:	ba d0 35 02 c0       	mov    edx,0xc00235d0
c0020380:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020384:	89 10                	mov    DWORD PTR [eax],edx
c0020386:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002038a:	83 ec 0c             	sub    esp,0xc
c002038d:	50                   	push   eax
c002038e:	e8 b3 c5 fe ff       	call   c000c946 <Device::~Device()>
c0020393:	83 c4 10             	add    esp,0x10
c0020396:	90                   	nop
c0020397:	83 c4 0c             	add    esp,0xc
c002039a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002039c <IOAPIC::~IOAPIC()>:
c002039c:	83 ec 0c             	sub    esp,0xc
c002039f:	83 ec 0c             	sub    esp,0xc
c00203a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203a6:	e8 cd ff ff ff       	call   c0020378 <IOAPIC::~IOAPIC()>
c00203ab:	83 c4 10             	add    esp,0x10
c00203ae:	83 ec 08             	sub    esp,0x8
c00203b1:	68 68 01 00 00       	push   0x168
c00203b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203ba:	e8 4d a4 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00203bf:	83 c4 10             	add    esp,0x10
c00203c2:	83 c4 0c             	add    esp,0xc
c00203c5:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00203c8 <APICTimer::~APICTimer()>:
c00203c8:	83 ec 0c             	sub    esp,0xc
c00203cb:	ba 18 36 02 c0       	mov    edx,0xc0023618
c00203d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203d4:	89 10                	mov    DWORD PTR [eax],edx
c00203d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203da:	83 ec 0c             	sub    esp,0xc
c00203dd:	50                   	push   eax
c00203de:	e8 39 e0 fe ff       	call   c000e41c <Timer::~Timer()>
c00203e3:	83 c4 10             	add    esp,0x10
c00203e6:	90                   	nop
c00203e7:	83 c4 0c             	add    esp,0xc
c00203ea:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00203ec <APICTimer::~APICTimer()>:
c00203ec:	83 ec 0c             	sub    esp,0xc
c00203ef:	83 ec 0c             	sub    esp,0xc
c00203f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203f6:	e8 cd ff ff ff       	call   c00203c8 <APICTimer::~APICTimer()>
c00203fb:	83 c4 10             	add    esp,0x10
c00203fe:	83 ec 08             	sub    esp,0x8
c0020401:	68 60 01 00 00       	push   0x160
c0020406:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002040a:	e8 fd a3 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c002040f:	83 c4 10             	add    esp,0x10
c0020412:	83 c4 0c             	add    esp,0xc
c0020415:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0020418 <PIT::~PIT()>:
c0020418:	83 ec 0c             	sub    esp,0xc
c002041b:	ba 68 36 02 c0       	mov    edx,0xc0023668
c0020420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020424:	89 10                	mov    DWORD PTR [eax],edx
c0020426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002042a:	83 ec 0c             	sub    esp,0xc
c002042d:	50                   	push   eax
c002042e:	e8 e9 df fe ff       	call   c000e41c <Timer::~Timer()>
c0020433:	83 c4 10             	add    esp,0x10
c0020436:	90                   	nop
c0020437:	83 c4 0c             	add    esp,0xc
c002043a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002043c <PIT::~PIT()>:
c002043c:	83 ec 0c             	sub    esp,0xc
c002043f:	83 ec 0c             	sub    esp,0xc
c0020442:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020446:	e8 cd ff ff ff       	call   c0020418 <PIT::~PIT()>
c002044b:	83 c4 10             	add    esp,0x10
c002044e:	83 ec 08             	sub    esp,0x8
c0020451:	68 5c 01 00 00       	push   0x15c
c0020456:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002045a:	e8 ad a3 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c002045f:	83 c4 10             	add    esp,0x10
c0020462:	83 c4 0c             	add    esp,0xc
c0020465:	c3                   	ret    

Disassembly of section userkernel:

c0025000 <KiDefaultSignalHandlerAbort(int)>:
c0025000:	57                   	push   edi
c0025001:	b9 07 00 00 00       	mov    ecx,0x7
c0025006:	56                   	push   esi
c0025007:	be 7d 24 02 c0       	mov    esi,0xc002247d
c002500c:	83 ec 24             	sub    esp,0x24
c002500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025013:	fc                   	cld    
c0025014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002501a:	50                   	push   eax
c002501b:	6a 00                	push   0x0
c002501d:	6a 38                	push   0x38
c002501f:	6a 01                	push   0x1
c0025021:	e8 2c 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0025026:	83 c4 34             	add    esp,0x34
c0025029:	5e                   	pop    esi
c002502a:	5f                   	pop    edi
c002502b:	c3                   	ret    

c002502c <KiDefaultSignalHandlerTerminate(int)>:
c002502c:	57                   	push   edi
c002502d:	b9 08 00 00 00       	mov    ecx,0x8
c0025032:	56                   	push   esi
c0025033:	be 99 24 02 c0       	mov    esi,0xc0022499
c0025038:	83 ec 24             	sub    esp,0x24
c002503b:	89 e7                	mov    edi,esp
c002503d:	fc                   	cld    
c002503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025040:	54                   	push   esp
c0025041:	6a 00                	push   0x0
c0025043:	6a 37                	push   0x37
c0025045:	6a 01                	push   0x1
c0025047:	e8 06 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002504c:	83 c4 34             	add    esp,0x34
c002504f:	5e                   	pop    esi
c0025050:	5f                   	pop    edi
c0025051:	c3                   	ret    

c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0025052:	53                   	push   ebx
c0025053:	83 ec 10             	sub    esp,0x10
c0025056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0025062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025066:	cd 60                	int    0x60
c0025068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025078:	83 c4 10             	add    esp,0x10
c002507b:	5b                   	pop    ebx
c002507c:	c3                   	ret    

Disassembly of section align_previous:

c0026000 <DO_NOT_DELETE()>:
c0026000:	c3                   	ret    
