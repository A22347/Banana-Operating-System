
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 0d 7b 00 00       	call   c0007b2d <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 e4 38 02 c0       	mov    eax,0xc00238e4
c0000025:	3d e4 38 02 c0       	cmp    eax,0xc00238e4
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 e4 38 02 c0       	push   0xc00238e4
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 e4 38 02 c0       	mov    eax,0xc00238e4
c0000051:	2d e4 38 02 c0       	sub    eax,0xc00238e4
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 e4 38 02 c0       	push   0xc00238e4
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 50 02 c0 00 	cmp    BYTE PTR ds:0xc00250c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 8c ff 01 c0       	mov    ebx,0xc001ff8c
c0000097:	81 eb 88 ff 01 c0    	sub    ebx,0xc001ff88
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 88 ff 01 c0       	mov    esi,0xc001ff88
c00000a6:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 50 02 c0       	mov    ds:0xc00250c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 e4 38 02 c0       	push   0xc00238e4
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 50 02 c0 01 	mov    BYTE PTR ds:0xc00250c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 50 02 c0       	push   0xc00250c8
c0000108:	68 e4 38 02 c0       	push   0xc00238e4
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 93 51 01 00       	call   c0015440 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 fc a3 00 00       	call   c000a6c1 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 71 51 01 00       	call   c0015440 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 7e 56 01 00       	call   c001596c <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 19 5d 01 00       	call   c0016010 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 5e 02 c0 	lgdtd  ds:0xc0025ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 75 0f 01 00       	jmp    c00112f4 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 50 02 c0       	mov    ds:0xc00250e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 50 02 c0    	mov    DWORD PTR ds:0xc00250e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 50 02 c0    	mov    ebx,DWORD PTR ds:0xc00250e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 a0 ff 01 c0 02 	test   BYTE PTR [edx-0x3ffe0060],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 a0 ff 01 c0 01 	test   BYTE PTR [edx-0x3ffe0060],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 a0 ff 01 c0 08 	test   BYTE PTR [edx-0x3ffe0060],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 a0 ff 01 c0 08 	test   BYTE PTR [edx-0x3ffe0060],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 a0 ff 01 c0 04 	test   BYTE PTR [ecx-0x3ffe0060],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 a0 ff 01 c0 01 	test   BYTE PTR [edx-0x3ffe0060],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d8d:	85 db                	test   ebx,ebx
c0000d8f:	0f 84 e2 00 00 00    	je     c0000e77 <dlfree+0xf1>
c0000d95:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d98:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d9b:	8b 0d 00 51 02 c0    	mov    ecx,DWORD PTR ds:0xc0025100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c1                	cmp    ecx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 c9 03             	or     ecx,0x3
c0000db0:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 0c 85 04 51 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdaefc]
c0000dc0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dc2:	89 14 85 04 51 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaefc],edx
c0000dc9:	e9 a9 00 00 00       	jmp    c0000e77 <dlfree+0xf1>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 c9 01             	or     ecx,0x1
c0000ddd:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000de3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000de6:	83 e1 fc             	and    ecx,0xfffffffc
c0000de9:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000df2:	29 da                	sub    edx,ebx
c0000df4:	01 d8                	add    eax,ebx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dfc:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dff:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e02:	39 35 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e0e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e11:	80 e3 01             	and    bl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 c8                	add    eax,ecx
c0000e1b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e1e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e21:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e24:	8b 0d 3c 51 02 c0    	mov    ecx,DWORD PTR ds:0xc002513c
c0000e2a:	c7 42 0c 34 51 02 c0 	mov    DWORD PTR [edx+0xc],0xc0025134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 c8                	add    eax,ecx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 16                	jbe    c0000e77 <dlfree+0xf1>
c0000e61:	f6 05 00 51 02 c0 02 	test   BYTE PTR ds:0xc0025100,0x2
c0000e68:	74 0d                	je     c0000e77 <dlfree+0xf1>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	5b                   	pop    ebx
c0000e78:	5e                   	pop    esi
c0000e79:	5f                   	pop    edi
c0000e7a:	c3                   	ret    

c0000e7b <sYSMALLOc>:
c0000e7b:	55                   	push   ebp
c0000e7c:	57                   	push   edi
c0000e7d:	56                   	push   esi
c0000e7e:	53                   	push   ebx
c0000e7f:	89 d3                	mov    ebx,edx
c0000e81:	83 ec 2c             	sub    esp,0x2c
c0000e84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000e88:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000e8e:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e91:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000e94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e98:	74 1f                	je     c0000eb9 <sYSMALLOc+0x3e>
c0000e9a:	89 d0                	mov    eax,edx
c0000e9c:	e8 fe fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ea1:	83 ec 0c             	sub    esp,0xc
c0000ea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000ea8:	83 e8 07             	sub    eax,0x7
c0000eab:	50                   	push   eax
c0000eac:	e8 33 02 00 00       	call   c00010e4 <dlmalloc>
c0000eb1:	83 c4 10             	add    esp,0x10
c0000eb4:	e9 23 02 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000eb9:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000ec0:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ec6:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000ec9:	83 c0 10             	add    eax,0x10
c0000ecc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	83 e5 fc             	and    ebp,0xfffffffc
c0000ed5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000edc:	74 02                	je     c0000ee0 <sYSMALLOc+0x65>
c0000ede:	29 ea                	sub    edx,ebp
c0000ee0:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000ee4:	f7 d9                	neg    ecx
c0000ee6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000eea:	21 ca                	and    edx,ecx
c0000eec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000ef0:	7f 07                	jg     c0000ef9 <sYSMALLOc+0x7e>
c0000ef2:	31 c0                	xor    eax,eax
c0000ef4:	e9 e3 01 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000ef9:	83 ec 0c             	sub    esp,0xc
c0000efc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f00:	e8 a3 6a 00 00       	call   c00079a8 <sbrk>
c0000f05:	83 c4 10             	add    esp,0x10
c0000f08:	83 f8 ff             	cmp    eax,0xffffffff
c0000f0b:	89 c6                	mov    esi,eax
c0000f0d:	74 e3                	je     c0000ef2 <sYSMALLOc+0x77>
c0000f0f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f13:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000f16:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000f1c:	39 c2                	cmp    edx,eax
c0000f1e:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f24:	75 11                	jne    c0000f37 <sYSMALLOc+0xbc>
c0000f26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2a:	01 e8                	add    eax,ebp
c0000f2c:	83 c8 01             	or     eax,0x1
c0000f2f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f32:	e9 93 00 00 00       	jmp    c0000fca <sYSMALLOc+0x14f>
c0000f37:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000f3d:	a8 01                	test   al,0x1
c0000f3f:	0f 84 73 01 00 00    	je     c00010b8 <sYSMALLOc+0x23d>
c0000f45:	85 ed                	test   ebp,ebp
c0000f47:	74 12                	je     c0000f5b <sYSMALLOc+0xe0>
c0000f49:	39 f2                	cmp    edx,esi
c0000f4b:	76 0e                	jbe    c0000f5b <sYSMALLOc+0xe0>
c0000f4d:	83 e0 fe             	and    eax,0xfffffffe
c0000f50:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000f56:	e9 5d 01 00 00       	jmp    c00010b8 <sYSMALLOc+0x23d>
c0000f5b:	85 ed                	test   ebp,ebp
c0000f5d:	74 0c                	je     c0000f6b <sYSMALLOc+0xf0>
c0000f5f:	89 f0                	mov    eax,esi
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	01 c1                	add    ecx,eax
c0000f65:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f6b:	89 f2                	mov    edx,esi
c0000f6d:	83 e2 07             	and    edx,0x7
c0000f70:	0f 84 b1 00 00 00    	je     c0001027 <sYSMALLOc+0x1ac>
c0000f76:	b8 08 00 00 00       	mov    eax,0x8
c0000f7b:	29 d0                	sub    eax,edx
c0000f7d:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000f80:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000f84:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f88:	01 e8                	add    eax,ebp
c0000f8a:	83 ec 0c             	sub    esp,0xc
c0000f8d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000f90:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000f94:	01 f2                	add    edx,esi
c0000f96:	29 d0                	sub    eax,edx
c0000f98:	01 d1                	add    ecx,edx
c0000f9a:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000f9e:	01 c1                	add    ecx,eax
c0000fa0:	51                   	push   ecx
c0000fa1:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000fa5:	e8 fe 69 00 00       	call   c00079a8 <sbrk>
c0000faa:	83 c4 10             	add    esp,0x10
c0000fad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000fb1:	83 f8 ff             	cmp    eax,0xffffffff
c0000fb4:	75 7c                	jne    c0001032 <sYSMALLOc+0x1b7>
c0000fb6:	83 ec 0c             	sub    esp,0xc
c0000fb9:	6a 00                	push   0x0
c0000fbb:	e8 e8 69 00 00       	call   c00079a8 <sbrk>
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	31 c9                	xor    ecx,ecx
c0000fc5:	83 f8 ff             	cmp    eax,0xffffffff
c0000fc8:	75 7e                	jne    c0001048 <sYSMALLOc+0x1cd>
c0000fca:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fd0:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fd6:	73 06                	jae    c0000fde <sYSMALLOc+0x163>
c0000fd8:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fde:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fe4:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fea:	73 06                	jae    c0000ff2 <sYSMALLOc+0x177>
c0000fec:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ff2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ff5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff8:	83 e2 fc             	and    edx,0xfffffffc
c0000ffb:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000fff:	0f 87 ed fe ff ff    	ja     c0000ef2 <sYSMALLOc+0x77>
c0001005:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0001009:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000100c:	29 fa                	sub    edx,edi
c000100e:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001011:	89 fb                	mov    ebx,edi
c0001013:	83 ca 01             	or     edx,0x1
c0001016:	83 cb 01             	or     ebx,0x1
c0001019:	83 c0 08             	add    eax,0x8
c000101c:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000101f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001022:	e9 b5 00 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0001027:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000102b:	31 c0                	xor    eax,eax
c000102d:	e9 52 ff ff ff       	jmp    c0000f84 <sYSMALLOc+0x109>
c0001032:	39 c6                	cmp    esi,eax
c0001034:	76 12                	jbe    c0001048 <sYSMALLOc+0x1cd>
c0001036:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000103a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001041:	01 f0                	add    eax,esi
c0001043:	e9 7b ff ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c0001048:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000104c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000104f:	29 f0                	sub    eax,esi
c0001051:	01 c8                	add    eax,ecx
c0001053:	83 c8 01             	or     eax,0x1
c0001056:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0001059:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c000105f:	85 ed                	test   ebp,ebp
c0001061:	0f 84 63 ff ff ff    	je     c0000fca <sYSMALLOc+0x14f>
c0001067:	8d 45 f4             	lea    eax,[ebp-0xc]
c000106a:	83 e0 f8             	and    eax,0xfffffff8
c000106d:	89 c2                	mov    edx,eax
c000106f:	83 ca 01             	or     edx,0x1
c0001072:	83 f8 0f             	cmp    eax,0xf
c0001075:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001078:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001080:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001088:	0f 86 3c ff ff ff    	jbe    c0000fca <sYSMALLOc+0x14f>
c000108e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001094:	83 ec 0c             	sub    esp,0xc
c0001097:	83 c7 08             	add    edi,0x8
c000109a:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a4:	57                   	push   edi
c00010a5:	e8 dc fc ff ff       	call   c0000d86 <dlfree>
c00010aa:	83 c4 10             	add    esp,0x10
c00010ad:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b3:	e9 12 ff ff ff       	jmp    c0000fca <sYSMALLOc+0x14f>
c00010b8:	83 ec 0c             	sub    esp,0xc
c00010bb:	6a 00                	push   0x0
c00010bd:	e8 e6 68 00 00       	call   c00079a8 <sbrk>
c00010c2:	89 c2                	mov    edx,eax
c00010c4:	29 f2                	sub    edx,esi
c00010c6:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c00010ca:	83 c4 10             	add    esp,0x10
c00010cd:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010d3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00010d7:	e9 e7 fe ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c00010dc:	83 c4 2c             	add    esp,0x2c
c00010df:	5b                   	pop    ebx
c00010e0:	5e                   	pop    esi
c00010e1:	5f                   	pop    edi
c00010e2:	5d                   	pop    ebp
c00010e3:	c3                   	ret    

c00010e4 <dlmalloc>:
c00010e4:	55                   	push   ebp
c00010e5:	57                   	push   edi
c00010e6:	56                   	push   esi
c00010e7:	53                   	push   ebx
c00010e8:	83 ec 1c             	sub    esp,0x1c
c00010eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010ef:	83 f8 df             	cmp    eax,0xffffffdf
c00010f2:	0f 87 70 03 00 00    	ja     c0001468 <dlmalloc+0x384>
c00010f8:	83 c0 0b             	add    eax,0xb
c00010fb:	be 10 00 00 00       	mov    esi,0x10
c0001100:	83 f8 0f             	cmp    eax,0xf
c0001103:	76 05                	jbe    c000110a <dlmalloc+0x26>
c0001105:	83 e0 f8             	and    eax,0xfffffff8
c0001108:	89 c6                	mov    esi,eax
c000110a:	8b 3d 00 51 02 c0    	mov    edi,DWORD PTR ds:0xc0025100
c0001110:	f7 c7 01 00 00 00    	test   edi,0x1
c0001116:	75 17                	jne    c000112f <dlmalloc+0x4b>
c0001118:	85 ff                	test   edi,edi
c000111a:	0f 85 05 03 00 00    	jne    c0001425 <dlmalloc+0x341>
c0001120:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001125:	e8 75 fb ff ff       	call   c0000c9f <malloc_consolidate>
c000112a:	e9 f6 02 00 00       	jmp    c0001425 <dlmalloc+0x341>
c000112f:	39 f7                	cmp    edi,esi
c0001131:	72 1f                	jb     c0001152 <dlmalloc+0x6e>
c0001133:	89 f2                	mov    edx,esi
c0001135:	c1 ea 03             	shr    edx,0x3
c0001138:	83 ea 02             	sub    edx,0x2
c000113b:	8b 04 95 04 51 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdaefc]
c0001142:	85 c0                	test   eax,eax
c0001144:	74 0c                	je     c0001152 <dlmalloc+0x6e>
c0001146:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001149:	89 0c 95 04 51 02 c0 	mov    DWORD PTR [edx*4-0x3ffdaefc],ecx
c0001150:	eb 30                	jmp    c0001182 <dlmalloc+0x9e>
c0001152:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001158:	89 f0                	mov    eax,esi
c000115a:	77 2e                	ja     c000118a <dlmalloc+0xa6>
c000115c:	c1 e8 03             	shr    eax,0x3
c000115f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001163:	8d 14 c5 34 51 02 c0 	lea    edx,[eax*8-0x3ffdaecc]
c000116a:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000116d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001170:	39 c3                	cmp    ebx,eax
c0001172:	74 2e                	je     c00011a2 <dlmalloc+0xbe>
c0001174:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001177:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000117c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000117f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001182:	83 c0 08             	add    eax,0x8
c0001185:	e9 e0 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c000118a:	e8 8c fa ff ff       	call   c0000c1b <largebin_index>
c000118f:	83 e7 02             	and    edi,0x2
c0001192:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001196:	74 0a                	je     c00011a2 <dlmalloc+0xbe>
c0001198:	b8 00 51 02 c0       	mov    eax,0xc0025100
c000119d:	e8 fd fa ff ff       	call   c0000c9f <malloc_consolidate>
c00011a2:	8d 46 10             	lea    eax,[esi+0x10]
c00011a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011a9:	8b 1d 40 51 02 c0    	mov    ebx,DWORD PTR ds:0xc0025140
c00011af:	81 fb 34 51 02 c0    	cmp    ebx,0xc0025134
c00011b5:	0f 84 13 01 00 00    	je     c00012ce <dlmalloc+0x1ea>
c00011bb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011be:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011c1:	83 e7 fc             	and    edi,0xfffffffc
c00011c4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011ca:	77 4c                	ja     c0001218 <dlmalloc+0x134>
c00011cc:	3d 34 51 02 c0       	cmp    eax,0xc0025134
c00011d1:	75 45                	jne    c0001218 <dlmalloc+0x134>
c00011d3:	39 1d 30 51 02 c0    	cmp    DWORD PTR ds:0xc0025130,ebx
c00011d9:	75 3d                	jne    c0001218 <dlmalloc+0x134>
c00011db:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011df:	73 37                	jae    c0001218 <dlmalloc+0x134>
c00011e1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011e4:	89 fa                	mov    edx,edi
c00011e6:	a3 3c 51 02 c0       	mov    ds:0xc002513c,eax
c00011eb:	29 f2                	sub    edx,esi
c00011ed:	83 ce 01             	or     esi,0x1
c00011f0:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c00011f5:	89 d1                	mov    ecx,edx
c00011f7:	a3 30 51 02 c0       	mov    ds:0xc0025130,eax
c00011fc:	83 c9 01             	or     ecx,0x1
c00011ff:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c0001206:	c7 40 0c 34 51 02 c0 	mov    DWORD PTR [eax+0xc],0xc0025134
c000120d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001210:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001213:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001216:	eb 15                	jmp    c000122d <dlmalloc+0x149>
c0001218:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c000121d:	39 fe                	cmp    esi,edi
c000121f:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c0001226:	75 0d                	jne    c0001235 <dlmalloc+0x151>
c0001228:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000122d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001230:	e9 35 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001235:	81 ff ff 00 00 00    	cmp    edi,0xff
c000123b:	89 f8                	mov    eax,edi
c000123d:	77 19                	ja     c0001258 <dlmalloc+0x174>
c000123f:	c1 e8 03             	shr    eax,0x3
c0001242:	8d 14 00             	lea    edx,[eax+eax*1]
c0001245:	83 c2 0d             	add    edx,0xd
c0001248:	8d 2c 95 f8 50 02 c0 	lea    ebp,[edx*4-0x3ffdaf08]
c000124f:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c0001256:	eb 46                	jmp    c000129e <dlmalloc+0x1ba>
c0001258:	e8 be f9 ff ff       	call   c0000c1b <largebin_index>
c000125d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001260:	83 c2 0d             	add    edx,0xd
c0001263:	8d 0c 95 00 51 02 c0 	lea    ecx,[edx*4-0x3ffdaf00]
c000126a:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c0001271:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001274:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001278:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000127c:	89 d5                	mov    ebp,edx
c000127e:	74 1e                	je     c000129e <dlmalloc+0x1ba>
c0001280:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001283:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001286:	77 12                	ja     c000129a <dlmalloc+0x1b6>
c0001288:	83 cf 01             	or     edi,0x1
c000128b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000128e:	76 05                	jbe    c0001295 <dlmalloc+0x1b1>
c0001290:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001293:	eb f6                	jmp    c000128b <dlmalloc+0x1a7>
c0001295:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001298:	eb 04                	jmp    c000129e <dlmalloc+0x1ba>
c000129a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000129e:	89 c7                	mov    edi,eax
c00012a0:	88 c1                	mov    cl,al
c00012a2:	c1 ff 05             	sar    edi,0x5
c00012a5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012a9:	bf 01 00 00 00       	mov    edi,0x1
c00012ae:	d3 e7                	shl    edi,cl
c00012b0:	89 f8                	mov    eax,edi
c00012b2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012b6:	09 04 bd 34 54 02 c0 	or     DWORD PTR [edi*4-0x3ffdabcc],eax
c00012bd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012c0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012c3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012c6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012c9:	e9 db fe ff ff       	jmp    c00011a9 <dlmalloc+0xc5>
c00012ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012d4:	76 78                	jbe    c000134e <dlmalloc+0x26a>
c00012d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012da:	8d 04 c5 34 51 02 c0 	lea    eax,[eax*8-0x3ffdaecc]
c00012e1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012e4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012e7:	39 ca                	cmp    edx,ecx
c00012e9:	74 63                	je     c000134e <dlmalloc+0x26a>
c00012eb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012ee:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012f1:	83 e3 fc             	and    ebx,0xfffffffc
c00012f4:	39 de                	cmp    esi,ebx
c00012f6:	77 52                	ja     c000134a <dlmalloc+0x266>
c00012f8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012fb:	89 df                	mov    edi,ebx
c00012fd:	01 d3                	add    ebx,edx
c00012ff:	29 f7                	sub    edi,esi
c0001301:	83 ff 0f             	cmp    edi,0xf
c0001304:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001307:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000130a:	8d 42 08             	lea    eax,[edx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x234>
c000130f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001313:	e9 52 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001318:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000131b:	83 ce 01             	or     esi,0x1
c000131e:	89 0d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,ecx
c0001324:	89 0d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,ecx
c000132a:	c7 41 08 34 51 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0025134
c0001331:	c7 41 0c 34 51 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0025134
c0001338:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000133b:	89 fa                	mov    edx,edi
c000133d:	83 ca 01             	or     edx,0x1
c0001340:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001343:	89 3b                	mov    DWORD PTR [ebx],edi
c0001345:	e9 20 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c000134a:	89 c2                	mov    edx,eax
c000134c:	eb 99                	jmp    c00012e7 <dlmalloc+0x203>
c000134e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001352:	b8 01 00 00 00       	mov    eax,0x1
c0001357:	41                   	inc    ecx
c0001358:	8d 14 cd 2c 51 02 c0 	lea    edx,[ecx*8-0x3ffdaed4]
c000135f:	89 cb                	mov    ebx,ecx
c0001361:	c1 eb 05             	shr    ebx,0x5
c0001364:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c000136b:	d3 e0                	shl    eax,cl
c000136d:	39 f8                	cmp    eax,edi
c000136f:	77 04                	ja     c0001375 <dlmalloc+0x291>
c0001371:	85 c0                	test   eax,eax
c0001373:	75 26                	jne    c000139b <dlmalloc+0x2b7>
c0001375:	43                   	inc    ebx
c0001376:	83 fb 02             	cmp    ebx,0x2
c0001379:	0f 87 a6 00 00 00    	ja     c0001425 <dlmalloc+0x341>
c000137f:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c0001386:	85 ff                	test   edi,edi
c0001388:	74 eb                	je     c0001375 <dlmalloc+0x291>
c000138a:	89 d8                	mov    eax,ebx
c000138c:	c1 e0 06             	shl    eax,0x6
c000138f:	8d 14 85 2c 51 02 c0 	lea    edx,[eax*4-0x3ffdaed4]
c0001396:	b8 01 00 00 00       	mov    eax,0x1
c000139b:	85 f8                	test   eax,edi
c000139d:	75 07                	jne    c00013a6 <dlmalloc+0x2c2>
c000139f:	83 c2 08             	add    edx,0x8
c00013a2:	01 c0                	add    eax,eax
c00013a4:	eb f5                	jmp    c000139b <dlmalloc+0x2b7>
c00013a6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013a9:	39 ca                	cmp    edx,ecx
c00013ab:	75 14                	jne    c00013c1 <dlmalloc+0x2dd>
c00013ad:	89 c1                	mov    ecx,eax
c00013af:	83 c2 08             	add    edx,0x8
c00013b2:	f7 d1                	not    ecx
c00013b4:	01 c0                	add    eax,eax
c00013b6:	21 cf                	and    edi,ecx
c00013b8:	89 3c 9d 34 54 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdabcc],edi
c00013bf:	eb ac                	jmp    c000136d <dlmalloc+0x289>
c00013c1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013c4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013c7:	83 e0 fc             	and    eax,0xfffffffc
c00013ca:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013cd:	89 c3                	mov    ebx,eax
c00013cf:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013d2:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013d5:	29 f3                	sub    ebx,esi
c00013d7:	8d 41 08             	lea    eax,[ecx+0x8]
c00013da:	83 fb 0f             	cmp    ebx,0xf
c00013dd:	77 09                	ja     c00013e8 <dlmalloc+0x304>
c00013df:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013e3:	e9 82 00 00 00       	jmp    c000146a <dlmalloc+0x386>
c00013e8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013f1:	89 3d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edi
c00013f7:	89 3d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,edi
c00013fd:	c7 47 08 34 51 02 c0 	mov    DWORD PTR [edi+0x8],0xc0025134
c0001404:	c7 47 0c 34 51 02 c0 	mov    DWORD PTR [edi+0xc],0xc0025134
c000140b:	77 06                	ja     c0001413 <dlmalloc+0x32f>
c000140d:	89 3d 30 51 02 c0    	mov    DWORD PTR ds:0xc0025130,edi
c0001413:	83 ce 01             	or     esi,0x1
c0001416:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001419:	89 d9                	mov    ecx,ebx
c000141b:	83 c9 01             	or     ecx,0x1
c000141e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001421:	89 1a                	mov    DWORD PTR [edx],ebx
c0001423:	eb 45                	jmp    c000146a <dlmalloc+0x386>
c0001425:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c000142a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000142d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001430:	83 e2 fc             	and    edx,0xfffffffc
c0001433:	39 d1                	cmp    ecx,edx
c0001435:	77 1e                	ja     c0001455 <dlmalloc+0x371>
c0001437:	89 f3                	mov    ebx,esi
c0001439:	29 f2                	sub    edx,esi
c000143b:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000143e:	83 cb 01             	or     ebx,0x1
c0001441:	89 0d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,ecx
c0001447:	83 ca 01             	or     edx,0x1
c000144a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000144d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001450:	e9 2d fd ff ff       	jmp    c0001182 <dlmalloc+0x9e>
c0001455:	83 c4 1c             	add    esp,0x1c
c0001458:	89 f0                	mov    eax,esi
c000145a:	5b                   	pop    ebx
c000145b:	ba 00 51 02 c0       	mov    edx,0xc0025100
c0001460:	5e                   	pop    esi
c0001461:	5f                   	pop    edi
c0001462:	5d                   	pop    ebp
c0001463:	e9 13 fa ff ff       	jmp    c0000e7b <sYSMALLOc>
c0001468:	31 c0                	xor    eax,eax
c000146a:	83 c4 1c             	add    esp,0x1c
c000146d:	5b                   	pop    ebx
c000146e:	5e                   	pop    esi
c000146f:	5f                   	pop    edi
c0001470:	5d                   	pop    ebp
c0001471:	c3                   	ret    

c0001472 <iALLOc>:
c0001472:	55                   	push   ebp
c0001473:	89 c5                	mov    ebp,eax
c0001475:	57                   	push   edi
c0001476:	56                   	push   esi
c0001477:	53                   	push   ebx
c0001478:	83 ec 2c             	sub    esp,0x2c
c000147b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000147f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001483:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c000148a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000148e:	75 12                	jne    c00014a2 <iALLOc+0x30>
c0001490:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001494:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001499:	e8 01 f8 ff ff       	call   c0000c9f <malloc_consolidate>
c000149e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014a2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014a7:	74 12                	je     c00014bb <iALLOc+0x49>
c00014a9:	85 ed                	test   ebp,ebp
c00014ab:	0f 84 64 01 00 00    	je     c0001615 <iALLOc+0x1a3>
c00014b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014b9:	eb 33                	jmp    c00014ee <iALLOc+0x7c>
c00014bb:	85 ed                	test   ebp,ebp
c00014bd:	75 14                	jne    c00014d3 <iALLOc+0x61>
c00014bf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014c7:	83 c4 2c             	add    esp,0x2c
c00014ca:	5b                   	pop    ebx
c00014cb:	5e                   	pop    esi
c00014cc:	5f                   	pop    edi
c00014cd:	5d                   	pop    ebp
c00014ce:	e9 11 fc ff ff       	jmp    c00010e4 <dlmalloc>
c00014d3:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014db:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e2:	83 f8 0f             	cmp    eax,0xf
c00014e5:	76 07                	jbe    c00014ee <iALLOc+0x7c>
c00014e7:	83 e0 f8             	and    eax,0xfffffff8
c00014ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014ee:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014f3:	75 09                	jne    c00014fe <iALLOc+0x8c>
c00014f5:	89 d0                	mov    eax,edx
c00014f7:	31 f6                	xor    esi,esi
c00014f9:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014fc:	eb 3b                	jmp    c0001539 <iALLOc+0xc7>
c00014fe:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001506:	8b 02                	mov    eax,DWORD PTR [edx]
c0001508:	83 c0 0b             	add    eax,0xb
c000150b:	83 f8 0f             	cmp    eax,0xf
c000150e:	76 07                	jbe    c0001517 <iALLOc+0xa5>
c0001510:	83 e0 f8             	and    eax,0xfffffff8
c0001513:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001517:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000151b:	0f af f5             	imul   esi,ebp
c000151e:	eb 25                	jmp    c0001545 <iALLOc+0xd3>
c0001520:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001522:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001525:	bb 10 00 00 00       	mov    ebx,0x10
c000152a:	83 f9 0f             	cmp    ecx,0xf
c000152d:	76 05                	jbe    c0001534 <iALLOc+0xc2>
c000152f:	83 e1 f8             	and    ecx,0xfffffff8
c0001532:	89 cb                	mov    ebx,ecx
c0001534:	01 de                	add    esi,ebx
c0001536:	83 c0 04             	add    eax,0x4
c0001539:	39 c7                	cmp    edi,eax
c000153b:	75 e3                	jne    c0001520 <iALLOc+0xae>
c000153d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001545:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001549:	83 ec 0c             	sub    esp,0xc
c000154c:	8b 1d 54 54 02 c0    	mov    ebx,DWORD PTR ds:0xc0025454
c0001552:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c000155c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001560:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001564:	50                   	push   eax
c0001565:	e8 7a fb ff ff       	call   c00010e4 <dlmalloc>
c000156a:	83 c4 10             	add    esp,0x10
c000156d:	89 1d 54 54 02 c0    	mov    DWORD PTR ds:0xc0025454,ebx
c0001573:	85 c0                	test   eax,eax
c0001575:	0f 84 92 00 00 00    	je     c000160d <iALLOc+0x19b>
c000157b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000157e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001581:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001585:	83 e3 fc             	and    ebx,0xfffffffc
c0001588:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000158d:	74 1e                	je     c00015ad <iALLOc+0x13b>
c000158f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001593:	89 d9                	mov    ecx,ebx
c0001595:	52                   	push   edx
c0001596:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000159a:	83 e9 04             	sub    ecx,0x4
c000159d:	51                   	push   ecx
c000159e:	6a 00                	push   0x0
c00015a0:	50                   	push   eax
c00015a1:	e8 4a ef ff ff       	call   c00004f0 <memset>
c00015a6:	83 c4 10             	add    esp,0x10
c00015a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015b2:	75 14                	jne    c00015c8 <iALLOc+0x156>
c00015b4:	8d 04 37             	lea    eax,[edi+esi*1]
c00015b7:	29 f3                	sub    ebx,esi
c00015b9:	8d 48 08             	lea    ecx,[eax+0x8]
c00015bc:	83 cb 01             	or     ebx,0x1
c00015bf:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015c2:	89 f3                	mov    ebx,esi
c00015c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c8:	31 c0                	xor    eax,eax
c00015ca:	4d                   	dec    ebp
c00015cb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015cf:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d2:	39 c5                	cmp    ebp,eax
c00015d4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015d7:	74 2c                	je     c0001605 <iALLOc+0x193>
c00015d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015dd:	85 c9                	test   ecx,ecx
c00015df:	75 15                	jne    c00015f6 <iALLOc+0x184>
c00015e1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015e4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015e7:	b9 10 00 00 00       	mov    ecx,0x10
c00015ec:	83 fe 0f             	cmp    esi,0xf
c00015ef:	76 05                	jbe    c00015f6 <iALLOc+0x184>
c00015f1:	83 e6 f8             	and    esi,0xfffffff8
c00015f4:	89 f1                	mov    ecx,esi
c00015f6:	89 ce                	mov    esi,ecx
c00015f8:	29 cb                	sub    ebx,ecx
c00015fa:	83 ce 01             	or     esi,0x1
c00015fd:	40                   	inc    eax
c00015fe:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001601:	01 cf                	add    edi,ecx
c0001603:	eb c6                	jmp    c00015cb <iALLOc+0x159>
c0001605:	83 cb 01             	or     ebx,0x1
c0001608:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000160b:	eb 08                	jmp    c0001615 <iALLOc+0x1a3>
c000160d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001615:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001619:	83 c4 2c             	add    esp,0x2c
c000161c:	5b                   	pop    ebx
c000161d:	5e                   	pop    esi
c000161e:	5f                   	pop    edi
c000161f:	5d                   	pop    ebp
c0001620:	c3                   	ret    

c0001621 <dlrealloc>:
c0001621:	55                   	push   ebp
c0001622:	57                   	push   edi
c0001623:	56                   	push   esi
c0001624:	53                   	push   ebx
c0001625:	83 ec 1c             	sub    esp,0x1c
c0001628:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000162c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001630:	85 db                	test   ebx,ebx
c0001632:	75 10                	jne    c0001644 <dlrealloc+0x23>
c0001634:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001638:	83 c4 1c             	add    esp,0x1c
c000163b:	5b                   	pop    ebx
c000163c:	5e                   	pop    esi
c000163d:	5f                   	pop    edi
c000163e:	5d                   	pop    ebp
c000163f:	e9 a0 fa ff ff       	jmp    c00010e4 <dlmalloc>
c0001644:	83 f8 df             	cmp    eax,0xffffffdf
c0001647:	76 07                	jbe    c0001650 <dlrealloc+0x2f>
c0001649:	31 db                	xor    ebx,ebx
c000164b:	e9 6b 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c0001650:	83 c0 0b             	add    eax,0xb
c0001653:	bd 10 00 00 00       	mov    ebp,0x10
c0001658:	83 f8 0f             	cmp    eax,0xf
c000165b:	76 05                	jbe    c0001662 <dlrealloc+0x41>
c000165d:	83 e0 f8             	and    eax,0xfffffff8
c0001660:	89 c5                	mov    ebp,eax
c0001662:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001665:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001668:	89 ce                	mov    esi,ecx
c000166a:	83 e6 fc             	and    esi,0xfffffffc
c000166d:	f6 c1 02             	test   cl,0x2
c0001670:	75 d7                	jne    c0001649 <dlrealloc+0x28>
c0001672:	39 f5                	cmp    ebp,esi
c0001674:	0f 86 04 01 00 00    	jbe    c000177e <dlrealloc+0x15d>
c000167a:	8d 14 37             	lea    edx,[edi+esi*1]
c000167d:	39 15 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,edx
c0001683:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001686:	75 33                	jne    c00016bb <dlrealloc+0x9a>
c0001688:	83 e0 fc             	and    eax,0xfffffffc
c000168b:	01 f0                	add    eax,esi
c000168d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001691:	8d 45 10             	lea    eax,[ebp+0x10]
c0001694:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0001698:	77 49                	ja     c00016e3 <dlrealloc+0xc2>
c000169a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000169e:	83 e1 01             	and    ecx,0x1
c00016a1:	01 ef                	add    edi,ebp
c00016a3:	09 e9                	or     ecx,ebp
c00016a5:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00016a8:	89 3d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edi
c00016ae:	29 e8                	sub    eax,ebp
c00016b0:	83 c8 01             	or     eax,0x1
c00016b3:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016b6:	e9 00 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c00016bb:	89 c1                	mov    ecx,eax
c00016bd:	83 e1 fe             	and    ecx,0xfffffffe
c00016c0:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c00016c5:	75 1c                	jne    c00016e3 <dlrealloc+0xc2>
c00016c7:	83 e0 fc             	and    eax,0xfffffffc
c00016ca:	01 f0                	add    eax,esi
c00016cc:	39 c5                	cmp    ebp,eax
c00016ce:	77 13                	ja     c00016e3 <dlrealloc+0xc2>
c00016d0:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00016d3:	89 c6                	mov    esi,eax
c00016d5:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00016d8:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00016db:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00016de:	e9 9b 00 00 00       	jmp    c000177e <dlrealloc+0x15d>
c00016e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016e7:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016ea:	83 ec 0c             	sub    esp,0xc
c00016ed:	50                   	push   eax
c00016ee:	e8 f1 f9 ff ff       	call   c00010e4 <dlmalloc>
c00016f3:	83 c4 10             	add    esp,0x10
c00016f6:	85 c0                	test   eax,eax
c00016f8:	0f 84 4b ff ff ff    	je     c0001649 <dlrealloc+0x28>
c00016fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001702:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001705:	39 ca                	cmp    edx,ecx
c0001707:	75 0a                	jne    c0001713 <dlrealloc+0xf2>
c0001709:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000170c:	83 e0 fc             	and    eax,0xfffffffc
c000170f:	01 c6                	add    esi,eax
c0001711:	eb 6b                	jmp    c000177e <dlrealloc+0x15d>
c0001713:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001716:	83 f9 27             	cmp    ecx,0x27
c0001719:	76 08                	jbe    c0001723 <dlrealloc+0x102>
c000171b:	89 de                	mov    esi,ebx
c000171d:	89 c7                	mov    edi,eax
c000171f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001721:	eb 43                	jmp    c0001766 <dlrealloc+0x145>
c0001723:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001725:	83 f9 13             	cmp    ecx,0x13
c0001728:	89 10                	mov    DWORD PTR [eax],edx
c000172a:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000172d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001730:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001733:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001736:	76 2e                	jbe    c0001766 <dlrealloc+0x145>
c0001738:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000173b:	83 f9 1b             	cmp    ecx,0x1b
c000173e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001741:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001744:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001747:	76 1d                	jbe    c0001766 <dlrealloc+0x145>
c0001749:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000174c:	83 f9 23             	cmp    ecx,0x23
c000174f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001752:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001755:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001758:	76 0c                	jbe    c0001766 <dlrealloc+0x145>
c000175a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000175d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001760:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001763:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001766:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000176a:	83 ec 0c             	sub    esp,0xc
c000176d:	53                   	push   ebx
c000176e:	e8 13 f6 ff ff       	call   c0000d86 <dlfree>
c0001773:	83 c4 10             	add    esp,0x10
c0001776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177a:	89 c3                	mov    ebx,eax
c000177c:	eb 3d                	jmp    c00017bb <dlrealloc+0x19a>
c000177e:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001781:	8d 04 37             	lea    eax,[edi+esi*1]
c0001784:	89 f2                	mov    edx,esi
c0001786:	29 ea                	sub    edx,ebp
c0001788:	83 e1 01             	and    ecx,0x1
c000178b:	83 fa 0f             	cmp    edx,0xf
c000178e:	77 0b                	ja     c000179b <dlrealloc+0x17a>
c0001790:	09 ce                	or     esi,ecx
c0001792:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001795:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001799:	eb 20                	jmp    c00017bb <dlrealloc+0x19a>
c000179b:	01 ef                	add    edi,ebp
c000179d:	83 ca 01             	or     edx,0x1
c00017a0:	09 cd                	or     ebp,ecx
c00017a2:	83 ec 0c             	sub    esp,0xc
c00017a5:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017a8:	83 c7 08             	add    edi,0x8
c00017ab:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017ae:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017b2:	57                   	push   edi
c00017b3:	e8 ce f5 ff ff       	call   c0000d86 <dlfree>
c00017b8:	83 c4 10             	add    esp,0x10
c00017bb:	83 c4 1c             	add    esp,0x1c
c00017be:	89 d8                	mov    eax,ebx
c00017c0:	5b                   	pop    ebx
c00017c1:	5e                   	pop    esi
c00017c2:	5f                   	pop    edi
c00017c3:	5d                   	pop    ebp
c00017c4:	c3                   	ret    

c00017c5 <dlmemalign>:
c00017c5:	55                   	push   ebp
c00017c6:	57                   	push   edi
c00017c7:	56                   	push   esi
c00017c8:	53                   	push   ebx
c00017c9:	83 ec 0c             	sub    esp,0xc
c00017cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017d4:	83 fa 08             	cmp    edx,0x8
c00017d7:	77 10                	ja     c00017e9 <dlmemalign+0x24>
c00017d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017dd:	83 c4 0c             	add    esp,0xc
c00017e0:	5b                   	pop    ebx
c00017e1:	5e                   	pop    esi
c00017e2:	5f                   	pop    edi
c00017e3:	5d                   	pop    ebp
c00017e4:	e9 fb f8 ff ff       	jmp    c00010e4 <dlmalloc>
c00017e9:	83 fa 0f             	cmp    edx,0xf
c00017ec:	bf 10 00 00 00       	mov    edi,0x10
c00017f1:	76 13                	jbe    c0001806 <dlmemalign+0x41>
c00017f3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017f6:	85 d1                	test   ecx,edx
c00017f8:	75 04                	jne    c00017fe <dlmemalign+0x39>
c00017fa:	89 d7                	mov    edi,edx
c00017fc:	eb 08                	jmp    c0001806 <dlmemalign+0x41>
c00017fe:	39 d7                	cmp    edi,edx
c0001800:	73 04                	jae    c0001806 <dlmemalign+0x41>
c0001802:	01 ff                	add    edi,edi
c0001804:	eb f8                	jmp    c00017fe <dlmemalign+0x39>
c0001806:	83 f8 df             	cmp    eax,0xffffffdf
c0001809:	76 07                	jbe    c0001812 <dlmemalign+0x4d>
c000180b:	31 c0                	xor    eax,eax
c000180d:	e9 ce 00 00 00       	jmp    c00018e0 <dlmemalign+0x11b>
c0001812:	83 c0 0b             	add    eax,0xb
c0001815:	bd 10 00 00 00       	mov    ebp,0x10
c000181a:	83 f8 0f             	cmp    eax,0xf
c000181d:	76 05                	jbe    c0001824 <dlmemalign+0x5f>
c000181f:	83 e0 f8             	and    eax,0xfffffff8
c0001822:	89 c5                	mov    ebp,eax
c0001824:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001828:	83 ec 0c             	sub    esp,0xc
c000182b:	50                   	push   eax
c000182c:	e8 b3 f8 ff ff       	call   c00010e4 <dlmalloc>
c0001831:	83 c4 10             	add    esp,0x10
c0001834:	85 c0                	test   eax,eax
c0001836:	89 c1                	mov    ecx,eax
c0001838:	74 d1                	je     c000180b <dlmemalign+0x46>
c000183a:	8d 70 f8             	lea    esi,[eax-0x8]
c000183d:	31 d2                	xor    edx,edx
c000183f:	f7 f7                	div    edi
c0001841:	85 d2                	test   edx,edx
c0001843:	74 62                	je     c00018a7 <dlmemalign+0xe2>
c0001845:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001849:	89 f8                	mov    eax,edi
c000184b:	f7 d8                	neg    eax
c000184d:	21 c3                	and    ebx,eax
c000184f:	83 eb 08             	sub    ebx,0x8
c0001852:	89 d8                	mov    eax,ebx
c0001854:	29 f0                	sub    eax,esi
c0001856:	83 f8 0f             	cmp    eax,0xf
c0001859:	77 02                	ja     c000185d <dlmemalign+0x98>
c000185b:	01 fb                	add    ebx,edi
c000185d:	89 d8                	mov    eax,ebx
c000185f:	29 f0                	sub    eax,esi
c0001861:	89 c6                	mov    esi,eax
c0001863:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001866:	89 c2                	mov    edx,eax
c0001868:	83 e2 fc             	and    edx,0xfffffffc
c000186b:	29 f2                	sub    edx,esi
c000186d:	a8 02                	test   al,0x2
c000186f:	74 10                	je     c0001881 <dlmemalign+0xbc>
c0001871:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001874:	83 ca 02             	or     edx,0x2
c0001877:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000187a:	8d 43 08             	lea    eax,[ebx+0x8]
c000187d:	89 33                	mov    DWORD PTR [ebx],esi
c000187f:	eb 5f                	jmp    c00018e0 <dlmemalign+0x11b>
c0001881:	89 d0                	mov    eax,edx
c0001883:	83 ec 0c             	sub    esp,0xc
c0001886:	83 c8 01             	or     eax,0x1
c0001889:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000188c:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001891:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001894:	83 e0 01             	and    eax,0x1
c0001897:	09 f0                	or     eax,esi
c0001899:	89 de                	mov    esi,ebx
c000189b:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000189e:	51                   	push   ecx
c000189f:	e8 e2 f4 ff ff       	call   c0000d86 <dlfree>
c00018a4:	83 c4 10             	add    esp,0x10
c00018a7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018aa:	a8 02                	test   al,0x2
c00018ac:	75 2f                	jne    c00018dd <dlmemalign+0x118>
c00018ae:	8d 55 10             	lea    edx,[ebp+0x10]
c00018b1:	83 e0 fc             	and    eax,0xfffffffc
c00018b4:	39 c2                	cmp    edx,eax
c00018b6:	73 25                	jae    c00018dd <dlmemalign+0x118>
c00018b8:	29 e8                	sub    eax,ebp
c00018ba:	83 ec 0c             	sub    esp,0xc
c00018bd:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c0:	83 c8 01             	or     eax,0x1
c00018c3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00018c6:	83 c2 08             	add    edx,0x8
c00018c9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018cc:	83 e0 01             	and    eax,0x1
c00018cf:	09 c5                	or     ebp,eax
c00018d1:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018d4:	52                   	push   edx
c00018d5:	e8 ac f4 ff ff       	call   c0000d86 <dlfree>
c00018da:	83 c4 10             	add    esp,0x10
c00018dd:	8d 46 08             	lea    eax,[esi+0x8]
c00018e0:	83 c4 0c             	add    esp,0xc
c00018e3:	5b                   	pop    ebx
c00018e4:	5e                   	pop    esi
c00018e5:	5f                   	pop    edi
c00018e6:	5d                   	pop    ebp
c00018e7:	c3                   	ret    

c00018e8 <dlcalloc>:
c00018e8:	53                   	push   ebx
c00018e9:	83 ec 14             	sub    esp,0x14
c00018ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018f0:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018f5:	50                   	push   eax
c00018f6:	e8 e9 f7 ff ff       	call   c00010e4 <dlmalloc>
c00018fb:	83 c4 10             	add    esp,0x10
c00018fe:	85 c0                	test   eax,eax
c0001900:	89 c3                	mov    ebx,eax
c0001902:	74 77                	je     c000197b <dlcalloc+0x93>
c0001904:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001907:	89 d0                	mov    eax,edx
c0001909:	83 e0 fc             	and    eax,0xfffffffc
c000190c:	80 e2 02             	and    dl,0x2
c000190f:	75 5a                	jne    c000196b <dlcalloc+0x83>
c0001911:	83 e8 04             	sub    eax,0x4
c0001914:	83 f8 27             	cmp    eax,0x27
c0001917:	76 03                	jbe    c000191c <dlcalloc+0x34>
c0001919:	51                   	push   ecx
c000191a:	eb 53                	jmp    c000196f <dlcalloc+0x87>
c000191c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001922:	83 f8 13             	cmp    eax,0x13
c0001925:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000192c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001933:	76 46                	jbe    c000197b <dlcalloc+0x93>
c0001935:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000193c:	83 f8 1b             	cmp    eax,0x1b
c000193f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001946:	76 33                	jbe    c000197b <dlcalloc+0x93>
c0001948:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000194f:	83 f8 23             	cmp    eax,0x23
c0001952:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001959:	76 20                	jbe    c000197b <dlcalloc+0x93>
c000195b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001962:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001969:	eb 10                	jmp    c000197b <dlcalloc+0x93>
c000196b:	52                   	push   edx
c000196c:	83 e8 08             	sub    eax,0x8
c000196f:	50                   	push   eax
c0001970:	6a 00                	push   0x0
c0001972:	53                   	push   ebx
c0001973:	e8 78 eb ff ff       	call   c00004f0 <memset>
c0001978:	83 c4 10             	add    esp,0x10
c000197b:	83 c4 08             	add    esp,0x8
c000197e:	89 d8                	mov    eax,ebx
c0001980:	5b                   	pop    ebx
c0001981:	c3                   	ret    

c0001982 <dlcfree>:
c0001982:	e9 ff f3 ff ff       	jmp    c0000d86 <dlfree>

c0001987 <dlindependent_calloc>:
c0001987:	83 ec 28             	sub    esp,0x28
c000198a:	b9 03 00 00 00       	mov    ecx,0x3
c000198f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001993:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000199b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a3:	e8 ca fa ff ff       	call   c0001472 <iALLOc>
c00019a8:	83 c4 2c             	add    esp,0x2c
c00019ab:	c3                   	ret    

c00019ac <dlindependent_comalloc>:
c00019ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019b0:	31 c9                	xor    ecx,ecx
c00019b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019be:	e9 af fa ff ff       	jmp    c0001472 <iALLOc>

c00019c3 <dlvalloc>:
c00019c3:	83 ec 0c             	sub    esp,0xc
c00019c6:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c00019cd:	75 0a                	jne    c00019d9 <dlvalloc+0x16>
c00019cf:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019d4:	e8 c6 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c00019d9:	50                   	push   eax
c00019da:	50                   	push   eax
c00019db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019df:	ff 35 5c 54 02 c0    	push   DWORD PTR ds:0xc002545c
c00019e5:	e8 db fd ff ff       	call   c00017c5 <dlmemalign>
c00019ea:	83 c4 1c             	add    esp,0x1c
c00019ed:	c3                   	ret    

c00019ee <dlpvalloc>:
c00019ee:	83 ec 0c             	sub    esp,0xc
c00019f1:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c00019f8:	75 0a                	jne    c0001a04 <dlpvalloc+0x16>
c00019fa:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019ff:	e8 9b f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a04:	52                   	push   edx
c0001a05:	a1 5c 54 02 c0       	mov    eax,ds:0xc002545c
c0001a0a:	52                   	push   edx
c0001a0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a0f:	89 c1                	mov    ecx,eax
c0001a11:	f7 d9                	neg    ecx
c0001a13:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a17:	21 ca                	and    edx,ecx
c0001a19:	52                   	push   edx
c0001a1a:	50                   	push   eax
c0001a1b:	e8 a5 fd ff ff       	call   c00017c5 <dlmemalign>
c0001a20:	83 c4 1c             	add    esp,0x1c
c0001a23:	c3                   	ret    

c0001a24 <dlmalloc_trim>:
c0001a24:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001a29:	e8 71 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a2e:	31 c0                	xor    eax,eax
c0001a30:	c3                   	ret    

c0001a31 <dlmalloc_usable_size>:
c0001a31:	53                   	push   ebx
c0001a32:	31 c0                	xor    eax,eax
c0001a34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a38:	85 c9                	test   ecx,ecx
c0001a3a:	74 24                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a3c:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a3f:	f6 c2 02             	test   dl,0x2
c0001a42:	74 08                	je     c0001a4c <dlmalloc_usable_size+0x1b>
c0001a44:	83 e2 fc             	and    edx,0xfffffffc
c0001a47:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a4a:	eb 14                	jmp    c0001a60 <dlmalloc_usable_size+0x2f>
c0001a4c:	89 d3                	mov    ebx,edx
c0001a4e:	31 c0                	xor    eax,eax
c0001a50:	83 e3 fe             	and    ebx,0xfffffffe
c0001a53:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a58:	74 06                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a5a:	83 e2 fc             	and    edx,0xfffffffc
c0001a5d:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a60:	5b                   	pop    ebx
c0001a61:	c3                   	ret    

c0001a62 <dlmallinfo>:
c0001a62:	55                   	push   ebp
c0001a63:	57                   	push   edi
c0001a64:	56                   	push   esi
c0001a65:	53                   	push   ebx
c0001a66:	83 ec 08             	sub    esp,0x8
c0001a69:	83 3d 2c 51 02 c0 00 	cmp    DWORD PTR ds:0xc002512c,0x0
c0001a70:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a74:	75 0a                	jne    c0001a80 <dlmallinfo+0x1e>
c0001a76:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001a7b:	e8 1f f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a80:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c0001a85:	31 ed                	xor    ebp,ebp
c0001a87:	31 c9                	xor    ecx,ecx
c0001a89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a8c:	83 e0 fc             	and    eax,0xfffffffc
c0001a8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a93:	31 c0                	xor    eax,eax
c0001a95:	8b 14 85 04 51 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaefc]
c0001a9c:	85 d2                	test   edx,edx
c0001a9e:	74 0e                	je     c0001aae <dlmallinfo+0x4c>
c0001aa0:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aa3:	45                   	inc    ebp
c0001aa4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aa7:	83 e6 fc             	and    esi,0xfffffffc
c0001aaa:	01 f1                	add    ecx,esi
c0001aac:	eb ee                	jmp    c0001a9c <dlmallinfo+0x3a>
c0001aae:	40                   	inc    eax
c0001aaf:	83 f8 0a             	cmp    eax,0xa
c0001ab2:	75 e1                	jne    c0001a95 <dlmallinfo+0x33>
c0001ab4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001abb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001abf:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001ac2:	b8 34 51 02 c0       	mov    eax,0xc0025134
c0001ac7:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001aca:	39 f0                	cmp    eax,esi
c0001acc:	74 10                	je     c0001ade <dlmallinfo+0x7c>
c0001ace:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001ad1:	ff 04 24             	inc    DWORD PTR [esp]
c0001ad4:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ad7:	83 e7 fc             	and    edi,0xfffffffc
c0001ada:	01 fa                	add    edx,edi
c0001adc:	eb ec                	jmp    c0001aca <dlmallinfo+0x68>
c0001ade:	83 c0 08             	add    eax,0x8
c0001ae1:	3d 2c 54 02 c0       	cmp    eax,0xc002542c
c0001ae6:	75 df                	jne    c0001ac7 <dlmallinfo+0x65>
c0001ae8:	8b 35 50 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025450
c0001aee:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af1:	a1 68 54 02 c0       	mov    eax,ds:0xc0025468
c0001af6:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001afc:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001aff:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b02:	8b 35 64 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025464
c0001b08:	89 03                	mov    DWORD PTR [ebx],eax
c0001b0a:	29 d0                	sub    eax,edx
c0001b0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b13:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b16:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b19:	8b 35 74 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025474
c0001b1f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b22:	89 d8                	mov    eax,ebx
c0001b24:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b27:	83 c4 08             	add    esp,0x8
c0001b2a:	5b                   	pop    ebx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	5d                   	pop    ebp
c0001b2e:	c2 04 00             	ret    0x4

c0001b31 <dlmalloc_stats>:
c0001b31:	83 ec 30             	sub    esp,0x30
c0001b34:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b38:	50                   	push   eax
c0001b39:	e8 24 ff ff ff       	call   c0001a62 <dlmallinfo>
c0001b3e:	83 c4 30             	add    esp,0x30
c0001b41:	c3                   	ret    

c0001b42 <dlmallopt>:
c0001b42:	56                   	push   esi
c0001b43:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001b48:	53                   	push   ebx
c0001b49:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b51:	e8 49 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b56:	8d 46 04             	lea    eax,[esi+0x4]
c0001b59:	83 f8 05             	cmp    eax,0x5
c0001b5c:	77 67                	ja     c0001bc5 <dlmallopt+0x83>
c0001b5e:	ff 24 85 a4 00 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdff5c]
c0001b65:	83 fb 50             	cmp    ebx,0x50
c0001b68:	77 5b                	ja     c0001bc5 <dlmallopt+0x83>
c0001b6a:	85 db                	test   ebx,ebx
c0001b6c:	ba 08 00 00 00       	mov    edx,0x8
c0001b71:	74 12                	je     c0001b85 <dlmallopt+0x43>
c0001b73:	83 c3 0b             	add    ebx,0xb
c0001b76:	ba 10 00 00 00       	mov    edx,0x10
c0001b7b:	83 fb 0f             	cmp    ebx,0xf
c0001b7e:	76 05                	jbe    c0001b85 <dlmallopt+0x43>
c0001b80:	89 da                	mov    edx,ebx
c0001b82:	83 e2 f8             	and    edx,0xfffffff8
c0001b85:	a1 00 51 02 c0       	mov    eax,ds:0xc0025100
c0001b8a:	83 e0 03             	and    eax,0x3
c0001b8d:	09 d0                	or     eax,edx
c0001b8f:	a3 00 51 02 c0       	mov    ds:0xc0025100,eax
c0001b94:	eb 31                	jmp    c0001bc7 <dlmallopt+0x85>
c0001b96:	89 1d 44 54 02 c0    	mov    DWORD PTR ds:0xc0025444,ebx
c0001b9c:	eb 06                	jmp    c0001ba4 <dlmallopt+0x62>
c0001b9e:	89 1d 48 54 02 c0    	mov    DWORD PTR ds:0xc0025448,ebx
c0001ba4:	be 01 00 00 00       	mov    esi,0x1
c0001ba9:	eb 1c                	jmp    c0001bc7 <dlmallopt+0x85>
c0001bab:	89 1d 4c 54 02 c0    	mov    DWORD PTR ds:0xc002544c,ebx
c0001bb1:	eb f1                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bb3:	31 f6                	xor    esi,esi
c0001bb5:	85 db                	test   ebx,ebx
c0001bb7:	75 0e                	jne    c0001bc7 <dlmallopt+0x85>
c0001bb9:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c0001bc3:	eb df                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bc5:	31 f6                	xor    esi,esi
c0001bc7:	5b                   	pop    ebx
c0001bc8:	89 f0                	mov    eax,esi
c0001bca:	5e                   	pop    esi
c0001bcb:	c3                   	ret    

c0001bcc <isblank>:
c0001bcc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001bd1:	74 09                	je     c0001bdc <isblank+0x10>
c0001bd3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001bd8:	75 0a                	jne    c0001be4 <isblank+0x18>
c0001bda:	66 90                	xchg   ax,ax
c0001bdc:	b8 01 00 00 00       	mov    eax,0x1
c0001be1:	c3                   	ret    
c0001be2:	66 90                	xchg   ax,ax
c0001be4:	b8 00 00 00 00       	mov    eax,0x0
c0001be9:	c3                   	ret    
c0001bea:	66 90                	xchg   ax,ax

c0001bec <iscntrl>:
c0001bec:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bf1:	7e 09                	jle    c0001bfc <iscntrl+0x10>
c0001bf3:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bf8:	75 0a                	jne    c0001c04 <iscntrl+0x18>
c0001bfa:	66 90                	xchg   ax,ax
c0001bfc:	b8 01 00 00 00       	mov    eax,0x1
c0001c01:	c3                   	ret    
c0001c02:	66 90                	xchg   ax,ax
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isdigit>:
c0001c0c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001c11:	7e 0d                	jle    c0001c20 <isdigit+0x14>
c0001c13:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001c18:	7f 06                	jg     c0001c20 <isdigit+0x14>
c0001c1a:	b8 01 00 00 00       	mov    eax,0x1
c0001c1f:	c3                   	ret    
c0001c20:	b8 00 00 00 00       	mov    eax,0x0
c0001c25:	c3                   	ret    
c0001c26:	66 90                	xchg   ax,ax

c0001c28 <islower>:
c0001c28:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001c2d:	7e 0d                	jle    c0001c3c <islower+0x14>
c0001c2f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001c34:	7f 06                	jg     c0001c3c <islower+0x14>
c0001c36:	b8 01 00 00 00       	mov    eax,0x1
c0001c3b:	c3                   	ret    
c0001c3c:	b8 00 00 00 00       	mov    eax,0x0
c0001c41:	c3                   	ret    
c0001c42:	66 90                	xchg   ax,ax

c0001c44 <isspace>:
c0001c44:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c49:	7c 19                	jl     c0001c64 <isspace+0x20>
c0001c4b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c50:	7e 0a                	jle    c0001c5c <isspace+0x18>
c0001c52:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c57:	75 0b                	jne    c0001c64 <isspace+0x20>
c0001c59:	8d 76 00             	lea    esi,[esi+0x0]
c0001c5c:	b8 01 00 00 00       	mov    eax,0x1
c0001c61:	c3                   	ret    
c0001c62:	66 90                	xchg   ax,ax
c0001c64:	b8 00 00 00 00       	mov    eax,0x0
c0001c69:	c3                   	ret    
c0001c6a:	66 90                	xchg   ax,ax

c0001c6c <isupper>:
c0001c6c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c71:	7e 0d                	jle    c0001c80 <isupper+0x14>
c0001c73:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c78:	7f 06                	jg     c0001c80 <isupper+0x14>
c0001c7a:	b8 01 00 00 00       	mov    eax,0x1
c0001c7f:	c3                   	ret    
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isalpha>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 db ff ff ff       	call   c0001c6c <isupper>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 10                	jne    c0001ca8 <isalpha+0x20>
c0001c98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c9c:	e8 87 ff ff ff       	call   c0001c28 <islower>
c0001ca1:	83 c4 04             	add    esp,0x4
c0001ca4:	85 c0                	test   eax,eax
c0001ca6:	74 08                	je     c0001cb0 <isalpha+0x28>
c0001ca8:	b8 01 00 00 00       	mov    eax,0x1
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	b8 00 00 00 00       	mov    eax,0x0
c0001cb5:	c3                   	ret    
c0001cb6:	66 90                	xchg   ax,ax

c0001cb8 <isalnum>:
c0001cb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cbc:	e8 c7 ff ff ff       	call   c0001c88 <isalpha>
c0001cc1:	83 c4 04             	add    esp,0x4
c0001cc4:	85 c0                	test   eax,eax
c0001cc6:	75 10                	jne    c0001cd8 <isalnum+0x20>
c0001cc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ccc:	e8 3b ff ff ff       	call   c0001c0c <isdigit>
c0001cd1:	83 c4 04             	add    esp,0x4
c0001cd4:	85 c0                	test   eax,eax
c0001cd6:	74 08                	je     c0001ce0 <isalnum+0x28>
c0001cd8:	b8 01 00 00 00       	mov    eax,0x1
c0001cdd:	c3                   	ret    
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 00 00 00 00       	mov    eax,0x0
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax

c0001ce8 <ispunct>:
c0001ce8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cec:	e8 c7 ff ff ff       	call   c0001cb8 <isalnum>
c0001cf1:	83 c4 04             	add    esp,0x4
c0001cf4:	85 c0                	test   eax,eax
c0001cf6:	75 28                	jne    c0001d20 <ispunct+0x38>
c0001cf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cfc:	e8 43 ff ff ff       	call   c0001c44 <isspace>
c0001d01:	83 c4 04             	add    esp,0x4
c0001d04:	85 c0                	test   eax,eax
c0001d06:	75 18                	jne    c0001d20 <ispunct+0x38>
c0001d08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d0c:	e8 db fe ff ff       	call   c0001bec <iscntrl>
c0001d11:	83 c4 04             	add    esp,0x4
c0001d14:	85 c0                	test   eax,eax
c0001d16:	75 08                	jne    c0001d20 <ispunct+0x38>
c0001d18:	b8 01 00 00 00       	mov    eax,0x1
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax
c0001d20:	b8 00 00 00 00       	mov    eax,0x0
c0001d25:	c3                   	ret    
c0001d26:	66 90                	xchg   ax,ax

c0001d28 <isgraph>:
c0001d28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d2c:	e8 87 ff ff ff       	call   c0001cb8 <isalnum>
c0001d31:	83 c4 04             	add    esp,0x4
c0001d34:	85 c0                	test   eax,eax
c0001d36:	75 10                	jne    c0001d48 <isgraph+0x20>
c0001d38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d3c:	e8 a7 ff ff ff       	call   c0001ce8 <ispunct>
c0001d41:	83 c4 04             	add    esp,0x4
c0001d44:	85 c0                	test   eax,eax
c0001d46:	74 08                	je     c0001d50 <isgraph+0x28>
c0001d48:	b8 01 00 00 00       	mov    eax,0x1
c0001d4d:	c3                   	ret    
c0001d4e:	66 90                	xchg   ax,ax
c0001d50:	b8 00 00 00 00       	mov    eax,0x0
c0001d55:	c3                   	ret    
c0001d56:	66 90                	xchg   ax,ax

c0001d58 <isprint>:
c0001d58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d5c:	e8 c7 ff ff ff       	call   c0001d28 <isgraph>
c0001d61:	83 c4 04             	add    esp,0x4
c0001d64:	85 c0                	test   eax,eax
c0001d66:	75 08                	jne    c0001d70 <isprint+0x18>
c0001d68:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d6d:	75 09                	jne    c0001d78 <isprint+0x20>
c0001d6f:	90                   	nop
c0001d70:	b8 01 00 00 00       	mov    eax,0x1
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 00 00 00 00       	mov    eax,0x0
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax

c0001d80 <isxdigit>:
c0001d80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d84:	e8 83 fe ff ff       	call   c0001c0c <isdigit>
c0001d89:	83 c4 04             	add    esp,0x4
c0001d8c:	85 c0                	test   eax,eax
c0001d8e:	75 20                	jne    c0001db0 <isxdigit+0x30>
c0001d90:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d95:	7e 09                	jle    c0001da0 <isxdigit+0x20>
c0001d97:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d9c:	7e 12                	jle    c0001db0 <isxdigit+0x30>
c0001d9e:	66 90                	xchg   ax,ax
c0001da0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001da5:	7e 11                	jle    c0001db8 <isxdigit+0x38>
c0001da7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001dac:	7f 0a                	jg     c0001db8 <isxdigit+0x38>
c0001dae:	66 90                	xchg   ax,ax
c0001db0:	b8 01 00 00 00       	mov    eax,0x1
c0001db5:	c3                   	ret    
c0001db6:	66 90                	xchg   ax,ax
c0001db8:	b8 00 00 00 00       	mov    eax,0x0
c0001dbd:	c3                   	ret    

c0001dbe <disk_status>:
c0001dbe:	31 c0                	xor    eax,eax
c0001dc0:	c3                   	ret    

c0001dc1 <disk_initialize>:
c0001dc1:	31 c0                	xor    eax,eax
c0001dc3:	c3                   	ret    

c0001dc4 <disk_read>:
c0001dc4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc9:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001dd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd5:	e9 02 78 01 00       	jmp    c00195dc <fatWrapperReadDisk>

c0001dda <disk_write>:
c0001dda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001ddf:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001de7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001deb:	e9 2c 78 01 00       	jmp    c001961c <fatWrapperWriteDisk>

c0001df0 <disk_ioctl>:
c0001df0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001df5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001df9:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dfe:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001e06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e0a:	e9 4d 78 01 00       	jmp    c001965c <fatWrapperIoctl>

c0001e0f <ld_word>:
c0001e0f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e13:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e16:	c1 e2 08             	shl    edx,0x8
c0001e19:	09 d0                	or     eax,edx
c0001e1b:	c3                   	ret    

c0001e1c <ld_dword>:
c0001e1c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001e20:	89 d1                	mov    ecx,edx
c0001e22:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e26:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e29:	c1 e1 08             	shl    ecx,0x8
c0001e2c:	09 ca                	or     edx,ecx
c0001e2e:	c1 e2 08             	shl    edx,0x8
c0001e31:	09 d0                	or     eax,edx
c0001e33:	c3                   	ret    

c0001e34 <st_word>:
c0001e34:	66 89 10             	mov    WORD PTR [eax],dx
c0001e37:	c3                   	ret    

c0001e38 <st_dword>:
c0001e38:	89 10                	mov    DWORD PTR [eax],edx
c0001e3a:	c3                   	ret    

c0001e3b <mem_cpy>:
c0001e3b:	85 c9                	test   ecx,ecx
c0001e3d:	74 10                	je     c0001e4f <mem_cpy+0x14>
c0001e3f:	57                   	push   edi
c0001e40:	01 c1                	add    ecx,eax
c0001e42:	56                   	push   esi
c0001e43:	89 c7                	mov    edi,eax
c0001e45:	89 d6                	mov    esi,edx
c0001e47:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e48:	39 f9                	cmp    ecx,edi
c0001e4a:	75 fb                	jne    c0001e47 <mem_cpy+0xc>
c0001e4c:	5e                   	pop    esi
c0001e4d:	5f                   	pop    edi
c0001e4e:	c3                   	ret    
c0001e4f:	c3                   	ret    

c0001e50 <mem_set>:
c0001e50:	01 c1                	add    ecx,eax
c0001e52:	88 10                	mov    BYTE PTR [eax],dl
c0001e54:	40                   	inc    eax
c0001e55:	39 c8                	cmp    eax,ecx
c0001e57:	75 f9                	jne    c0001e52 <mem_set+0x2>
c0001e59:	c3                   	ret    

c0001e5a <mem_cmp>:
c0001e5a:	57                   	push   edi
c0001e5b:	56                   	push   esi
c0001e5c:	89 c6                	mov    esi,eax
c0001e5e:	53                   	push   ebx
c0001e5f:	46                   	inc    esi
c0001e60:	42                   	inc    edx
c0001e61:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e65:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e69:	29 fb                	sub    ebx,edi
c0001e6b:	89 cf                	mov    edi,ecx
c0001e6d:	29 f7                	sub    edi,esi
c0001e6f:	01 c7                	add    edi,eax
c0001e71:	74 04                	je     c0001e77 <mem_cmp+0x1d>
c0001e73:	85 db                	test   ebx,ebx
c0001e75:	74 e8                	je     c0001e5f <mem_cmp+0x5>
c0001e77:	89 d8                	mov    eax,ebx
c0001e79:	5b                   	pop    ebx
c0001e7a:	5e                   	pop    esi
c0001e7b:	5f                   	pop    edi
c0001e7c:	c3                   	ret    

c0001e7d <chk_chr>:
c0001e7d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e80:	85 c9                	test   ecx,ecx
c0001e82:	74 07                	je     c0001e8b <chk_chr+0xe>
c0001e84:	39 d1                	cmp    ecx,edx
c0001e86:	74 03                	je     c0001e8b <chk_chr+0xe>
c0001e88:	40                   	inc    eax
c0001e89:	eb f2                	jmp    c0001e7d <chk_chr>
c0001e8b:	89 c8                	mov    eax,ecx
c0001e8d:	c3                   	ret    

c0001e8e <dbc_1st>:
c0001e8e:	31 c0                	xor    eax,eax
c0001e90:	c3                   	ret    

c0001e91 <dbc_2nd>:
c0001e91:	31 c0                	xor    eax,eax
c0001e93:	c3                   	ret    

c0001e94 <tchar2uni>:
c0001e94:	57                   	push   edi
c0001e95:	56                   	push   esi
c0001e96:	53                   	push   ebx
c0001e97:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e99:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e9b:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e9e:	f6 c1 80             	test   cl,0x80
c0001ea1:	75 0a                	jne    c0001ead <tchar2uni+0x19>
c0001ea3:	0f b6 d1             	movzx  edx,cl
c0001ea6:	89 f3                	mov    ebx,esi
c0001ea8:	e9 b2 00 00 00       	jmp    c0001f5f <tchar2uni+0xcb>
c0001ead:	89 ca                	mov    edx,ecx
c0001eaf:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001eb5:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001ebb:	89 ca                	mov    edx,ecx
c0001ebd:	75 0a                	jne    c0001ec9 <tchar2uni+0x35>
c0001ebf:	83 e2 1f             	and    edx,0x1f
c0001ec2:	b9 01 00 00 00       	mov    ecx,0x1
c0001ec7:	eb 37                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ec9:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001ecf:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001ed5:	75 0c                	jne    c0001ee3 <tchar2uni+0x4f>
c0001ed7:	89 ca                	mov    edx,ecx
c0001ed9:	b9 02 00 00 00       	mov    ecx,0x2
c0001ede:	83 e2 0f             	and    edx,0xf
c0001ee1:	eb 1d                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ee3:	89 cf                	mov    edi,ecx
c0001ee5:	83 ca ff             	or     edx,0xffffffff
c0001ee8:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eee:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ef4:	75 70                	jne    c0001f66 <tchar2uni+0xd2>
c0001ef6:	89 ca                	mov    edx,ecx
c0001ef8:	b9 03 00 00 00       	mov    ecx,0x3
c0001efd:	83 e2 07             	and    edx,0x7
c0001f00:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001f04:	46                   	inc    esi
c0001f05:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001f08:	89 cf                	mov    edi,ecx
c0001f0a:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001f10:	83 c7 80             	add    edi,0xffffff80
c0001f13:	75 4e                	jne    c0001f63 <tchar2uni+0xcf>
c0001f15:	c1 e2 06             	shl    edx,0x6
c0001f18:	83 e1 3f             	and    ecx,0x3f
c0001f1b:	09 ca                	or     edx,ecx
c0001f1d:	39 de                	cmp    esi,ebx
c0001f1f:	75 e3                	jne    c0001f04 <tchar2uni+0x70>
c0001f21:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001f27:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f2d:	76 34                	jbe    c0001f63 <tchar2uni+0xcf>
c0001f2f:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001f32:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001f38:	77 29                	ja     c0001f63 <tchar2uni+0xcf>
c0001f3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f40:	76 1d                	jbe    c0001f5f <tchar2uni+0xcb>
c0001f42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f4e:	c1 e1 06             	shl    ecx,0x6
c0001f51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f57:	09 ca                	or     edx,ecx
c0001f59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f5f:	89 18                	mov    DWORD PTR [eax],ebx
c0001f61:	eb 03                	jmp    c0001f66 <tchar2uni+0xd2>
c0001f63:	83 ca ff             	or     edx,0xffffffff
c0001f66:	5b                   	pop    ebx
c0001f67:	89 d0                	mov    eax,edx
c0001f69:	5e                   	pop    esi
c0001f6a:	5f                   	pop    edi
c0001f6b:	c3                   	ret    

c0001f6c <put_utf>:
c0001f6c:	53                   	push   ebx
c0001f6d:	83 f8 7f             	cmp    eax,0x7f
c0001f70:	89 c3                	mov    ebx,eax
c0001f72:	b0 00                	mov    al,0x0
c0001f74:	77 11                	ja     c0001f87 <put_utf+0x1b>
c0001f76:	85 c9                	test   ecx,ecx
c0001f78:	0f 84 e5 00 00 00    	je     c0002063 <put_utf+0xf7>
c0001f7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001f80:	b0 01                	mov    al,0x1
c0001f82:	e9 dc 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001f87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f8d:	77 23                	ja     c0001fb2 <put_utf+0x46>
c0001f8f:	83 f9 01             	cmp    ecx,0x1
c0001f92:	0f 86 cb 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001f98:	89 d8                	mov    eax,ebx
c0001f9a:	83 e3 3f             	and    ebx,0x3f
c0001f9d:	c1 e8 06             	shr    eax,0x6
c0001fa0:	83 cb 80             	or     ebx,0xffffff80
c0001fa3:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001fa6:	83 c8 c0             	or     eax,0xffffffc0
c0001fa9:	88 02                	mov    BYTE PTR [edx],al
c0001fab:	b0 02                	mov    al,0x2
c0001fad:	e9 b1 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001fb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001fb8:	77 40                	ja     c0001ffa <put_utf+0x8e>
c0001fba:	83 f9 02             	cmp    ecx,0x2
c0001fbd:	0f 86 a0 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fc3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001fc9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001fcf:	0f 86 8e 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fd5:	89 d8                	mov    eax,ebx
c0001fd7:	c1 e8 0c             	shr    eax,0xc
c0001fda:	83 c8 e0             	or     eax,0xffffffe0
c0001fdd:	88 02                	mov    BYTE PTR [edx],al
c0001fdf:	89 d8                	mov    eax,ebx
c0001fe1:	83 e3 3f             	and    ebx,0x3f
c0001fe4:	c1 e8 06             	shr    eax,0x6
c0001fe7:	83 cb 80             	or     ebx,0xffffff80
c0001fea:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fed:	83 e0 3f             	and    eax,0x3f
c0001ff0:	83 c8 80             	or     eax,0xffffff80
c0001ff3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ff6:	b0 03                	mov    al,0x3
c0001ff8:	eb 69                	jmp    c0002063 <put_utf+0xf7>
c0001ffa:	83 f9 03             	cmp    ecx,0x3
c0001ffd:	76 64                	jbe    c0002063 <put_utf+0xf7>
c0001fff:	89 d9                	mov    ecx,ebx
c0002001:	0f b7 c3             	movzx  eax,bx
c0002004:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c000200a:	66 31 c9             	xor    cx,cx
c000200d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0002013:	c1 e9 06             	shr    ecx,0x6
c0002016:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c000201c:	77 43                	ja     c0002061 <put_utf+0xf5>
c000201e:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002024:	77 3b                	ja     c0002061 <put_utf+0xf5>
c0002026:	09 cb                	or     ebx,ecx
c0002028:	81 c3 00 00 01 00    	add    ebx,0x10000
c000202e:	89 d8                	mov    eax,ebx
c0002030:	c1 e8 12             	shr    eax,0x12
c0002033:	83 c8 f0             	or     eax,0xfffffff0
c0002036:	88 02                	mov    BYTE PTR [edx],al
c0002038:	89 d8                	mov    eax,ebx
c000203a:	c1 e8 0c             	shr    eax,0xc
c000203d:	83 e0 3f             	and    eax,0x3f
c0002040:	83 c8 80             	or     eax,0xffffff80
c0002043:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002046:	89 d8                	mov    eax,ebx
c0002048:	83 e3 3f             	and    ebx,0x3f
c000204b:	c1 e8 06             	shr    eax,0x6
c000204e:	83 cb 80             	or     ebx,0xffffff80
c0002051:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002054:	83 e0 3f             	and    eax,0x3f
c0002057:	83 c8 80             	or     eax,0xffffff80
c000205a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000205d:	b0 04                	mov    al,0x4
c000205f:	eb 02                	jmp    c0002063 <put_utf+0xf7>
c0002061:	31 c0                	xor    eax,eax
c0002063:	5b                   	pop    ebx
c0002064:	c3                   	ret    

c0002065 <clst2sect>:
c0002065:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002068:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000206b:	83 ea 02             	sub    edx,0x2
c000206e:	39 ca                	cmp    edx,ecx
c0002070:	76 0d                	jbe    c000207f <clst2sect+0x1a>
c0002072:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002076:	0f af d1             	imul   edx,ecx
c0002079:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000207c:	89 d0                	mov    eax,edx
c000207e:	c3                   	ret    
c000207f:	31 c0                	xor    eax,eax
c0002081:	c3                   	ret    

c0002082 <pick_lfn>:
c0002082:	55                   	push   ebp
c0002083:	57                   	push   edi
c0002084:	89 c7                	mov    edi,eax
c0002086:	56                   	push   esi
c0002087:	53                   	push   ebx
c0002088:	89 d3                	mov    ebx,edx
c000208a:	8d 42 1a             	lea    eax,[edx+0x1a]
c000208d:	e8 7d fd ff ff       	call   c0001e0f <ld_word>
c0002092:	66 85 c0             	test   ax,ax
c0002095:	74 04                	je     c000209b <pick_lfn+0x19>
c0002097:	31 c0                	xor    eax,eax
c0002099:	eb 62                	jmp    c00020fd <pick_lfn+0x7b>
c000209b:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000209e:	bd 01 00 00 00       	mov    ebp,0x1
c00020a3:	31 f6                	xor    esi,esi
c00020a5:	83 e1 bf             	and    ecx,0xffffffbf
c00020a8:	49                   	dec    ecx
c00020a9:	6b c9 0d             	imul   ecx,ecx,0xd
c00020ac:	0f b6 86 00 02 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdfe00]
c00020b3:	01 d8                	add    eax,ebx
c00020b5:	e8 55 fd ff ff       	call   c0001e0f <ld_word>
c00020ba:	66 85 ed             	test   bp,bp
c00020bd:	74 11                	je     c00020d0 <pick_lfn+0x4e>
c00020bf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020c5:	77 d0                	ja     c0002097 <pick_lfn+0x15>
c00020c7:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00020cb:	89 c5                	mov    ebp,eax
c00020cd:	41                   	inc    ecx
c00020ce:	eb 0a                	jmp    c00020da <pick_lfn+0x58>
c00020d0:	0f b7 c0             	movzx  eax,ax
c00020d3:	3d ff ff 00 00       	cmp    eax,0xffff
c00020d8:	75 bd                	jne    c0002097 <pick_lfn+0x15>
c00020da:	46                   	inc    esi
c00020db:	83 fe 0d             	cmp    esi,0xd
c00020de:	75 cc                	jne    c00020ac <pick_lfn+0x2a>
c00020e0:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020e3:	74 13                	je     c00020f8 <pick_lfn+0x76>
c00020e5:	66 85 ed             	test   bp,bp
c00020e8:	74 0e                	je     c00020f8 <pick_lfn+0x76>
c00020ea:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020f0:	77 a5                	ja     c0002097 <pick_lfn+0x15>
c00020f2:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020f8:	b8 01 00 00 00       	mov    eax,0x1
c00020fd:	5b                   	pop    ebx
c00020fe:	5e                   	pop    esi
c00020ff:	5f                   	pop    edi
c0002100:	5d                   	pop    ebp
c0002101:	c3                   	ret    

c0002102 <put_lfn>:
c0002102:	55                   	push   ebp
c0002103:	57                   	push   edi
c0002104:	89 d7                	mov    edi,edx
c0002106:	56                   	push   esi
c0002107:	31 f6                	xor    esi,esi
c0002109:	53                   	push   ebx
c000210a:	83 ec 0c             	sub    esp,0xc
c000210d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002111:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0002115:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000211b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000211f:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002122:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002125:	31 d2                	xor    edx,edx
c0002127:	e8 08 fd ff ff       	call   c0001e34 <st_word>
c000212c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002133:	0f b6 d9             	movzx  ebx,cl
c0002136:	4b                   	dec    ebx
c0002137:	6b db 0d             	imul   ebx,ebx,0xd
c000213a:	0f b7 c6             	movzx  eax,si
c000213d:	3d ff ff 00 00       	cmp    eax,0xffff
c0002142:	74 09                	je     c000214d <put_lfn+0x4b>
c0002144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002148:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000214c:	43                   	inc    ebx
c000214d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002150:	0f b7 ee             	movzx  ebp,si
c0002153:	89 ea                	mov    edx,ebp
c0002155:	0f b6 80 00 02 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfe00]
c000215c:	01 f8                	add    eax,edi
c000215e:	e8 d1 fc ff ff       	call   c0001e34 <st_word>
c0002163:	85 ed                	test   ebp,ebp
c0002165:	75 05                	jne    c000216c <put_lfn+0x6a>
c0002167:	be ff ff 00 00       	mov    esi,0xffff
c000216c:	ff 04 24             	inc    DWORD PTR [esp]
c000216f:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002173:	75 c5                	jne    c000213a <put_lfn+0x38>
c0002175:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000217b:	74 0b                	je     c0002188 <put_lfn+0x86>
c000217d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002181:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002186:	75 07                	jne    c000218f <put_lfn+0x8d>
c0002188:	83 c9 40             	or     ecx,0x40
c000218b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000218f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002193:	88 07                	mov    BYTE PTR [edi],al
c0002195:	83 c4 0c             	add    esp,0xc
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	5f                   	pop    edi
c000219b:	5d                   	pop    ebp
c000219c:	c3                   	ret    

c000219d <gen_numname>:
c000219d:	57                   	push   edi
c000219e:	89 cf                	mov    edi,ecx
c00021a0:	56                   	push   esi
c00021a1:	b9 0b 00 00 00       	mov    ecx,0xb
c00021a6:	53                   	push   ebx
c00021a7:	89 c6                	mov    esi,eax
c00021a9:	83 ec 10             	sub    esp,0x10
c00021ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00021b0:	e8 86 fc ff ff       	call   c0001e3b <mem_cpy>
c00021b5:	83 fb 05             	cmp    ebx,0x5
c00021b8:	76 30                	jbe    c00021ea <gen_numname+0x4d>
c00021ba:	66 8b 07             	mov    ax,WORD PTR [edi]
c00021bd:	66 85 c0             	test   ax,ax
c00021c0:	74 28                	je     c00021ea <gen_numname+0x4d>
c00021c2:	83 c7 02             	add    edi,0x2
c00021c5:	ba 10 00 00 00       	mov    edx,0x10
c00021ca:	89 c1                	mov    ecx,eax
c00021cc:	01 db                	add    ebx,ebx
c00021ce:	c1 e0 10             	shl    eax,0x10
c00021d1:	83 e1 01             	and    ecx,0x1
c00021d4:	c1 e8 11             	shr    eax,0x11
c00021d7:	01 cb                	add    ebx,ecx
c00021d9:	0f ba e3 10          	bt     ebx,0x10
c00021dd:	73 06                	jae    c00021e5 <gen_numname+0x48>
c00021df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021e5:	4a                   	dec    edx
c00021e6:	75 e2                	jne    c00021ca <gen_numname+0x2d>
c00021e8:	eb d0                	jmp    c00021ba <gen_numname+0x1d>
c00021ea:	b8 07 00 00 00       	mov    eax,0x7
c00021ef:	89 d9                	mov    ecx,ebx
c00021f1:	83 e1 0f             	and    ecx,0xf
c00021f4:	8d 79 30             	lea    edi,[ecx+0x30]
c00021f7:	83 ff 39             	cmp    edi,0x39
c00021fa:	89 fa                	mov    edx,edi
c00021fc:	76 03                	jbe    c0002201 <gen_numname+0x64>
c00021fe:	8d 51 37             	lea    edx,[ecx+0x37]
c0002201:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002204:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002208:	89 da                	mov    edx,ebx
c000220a:	c1 ea 04             	shr    edx,0x4
c000220d:	83 fb 0f             	cmp    ebx,0xf
c0002210:	76 06                	jbe    c0002218 <gen_numname+0x7b>
c0002212:	89 c8                	mov    eax,ecx
c0002214:	89 d3                	mov    ebx,edx
c0002216:	eb d7                	jmp    c00021ef <gen_numname+0x52>
c0002218:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000221d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002220:	31 d2                	xor    edx,edx
c0002222:	8d 04 16             	lea    eax,[esi+edx*1]
c0002225:	39 ca                	cmp    edx,ecx
c0002227:	73 19                	jae    c0002242 <gen_numname+0xa5>
c0002229:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000222c:	83 f8 20             	cmp    eax,0x20
c000222f:	74 11                	je     c0002242 <gen_numname+0xa5>
c0002231:	e8 58 fc ff ff       	call   c0001e8e <dbc_1st>
c0002236:	85 c0                	test   eax,eax
c0002238:	74 05                	je     c000223f <gen_numname+0xa2>
c000223a:	39 d3                	cmp    ebx,edx
c000223c:	74 04                	je     c0002242 <gen_numname+0xa5>
c000223e:	42                   	inc    edx
c000223f:	42                   	inc    edx
c0002240:	eb e0                	jmp    c0002222 <gen_numname+0x85>
c0002242:	83 f9 07             	cmp    ecx,0x7
c0002245:	b0 20                	mov    al,0x20
c0002247:	77 05                	ja     c000224e <gen_numname+0xb1>
c0002249:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000224d:	41                   	inc    ecx
c000224e:	42                   	inc    edx
c000224f:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002253:	83 fa 07             	cmp    edx,0x7
c0002256:	76 ea                	jbe    c0002242 <gen_numname+0xa5>
c0002258:	83 c4 10             	add    esp,0x10
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	5f                   	pop    edi
c000225e:	c3                   	ret    

c000225f <sum_sfn>:
c000225f:	53                   	push   ebx
c0002260:	31 c9                	xor    ecx,ecx
c0002262:	31 db                	xor    ebx,ebx
c0002264:	0f b6 d1             	movzx  edx,cl
c0002267:	d1 ea                	shr    edx,1
c0002269:	c1 e1 07             	shl    ecx,0x7
c000226c:	09 ca                	or     edx,ecx
c000226e:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002271:	43                   	inc    ebx
c0002272:	01 ca                	add    edx,ecx
c0002274:	83 fb 0b             	cmp    ebx,0xb
c0002277:	88 d1                	mov    cl,dl
c0002279:	75 e9                	jne    c0002264 <sum_sfn+0x5>
c000227b:	5b                   	pop    ebx
c000227c:	88 d0                	mov    al,dl
c000227e:	c3                   	ret    

c000227f <get_ldnumber>:
c000227f:	55                   	push   ebp
c0002280:	57                   	push   edi
c0002281:	56                   	push   esi
c0002282:	83 ce ff             	or     esi,0xffffffff
c0002285:	53                   	push   ebx
c0002286:	8b 10                	mov    edx,DWORD PTR [eax]
c0002288:	85 d2                	test   edx,edx
c000228a:	74 38                	je     c00022c4 <get_ldnumber+0x45>
c000228c:	89 c5                	mov    ebp,eax
c000228e:	89 d1                	mov    ecx,edx
c0002290:	41                   	inc    ecx
c0002291:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002295:	80 fb 1f             	cmp    bl,0x1f
c0002298:	76 05                	jbe    c000229f <get_ldnumber+0x20>
c000229a:	83 fb 3a             	cmp    ebx,0x3a
c000229d:	75 f1                	jne    c0002290 <get_ldnumber+0x11>
c000229f:	31 f6                	xor    esi,esi
c00022a1:	83 fb 3a             	cmp    ebx,0x3a
c00022a4:	75 1e                	jne    c00022c4 <get_ldnumber+0x45>
c00022a6:	8a 1a                	mov    bl,BYTE PTR [edx]
c00022a8:	83 ce ff             	or     esi,0xffffffff
c00022ab:	8d 7b d0             	lea    edi,[ebx-0x30]
c00022ae:	89 f8                	mov    eax,edi
c00022b0:	3c 09                	cmp    al,0x9
c00022b2:	77 10                	ja     c00022c4 <get_ldnumber+0x45>
c00022b4:	83 c2 02             	add    edx,0x2
c00022b7:	39 d1                	cmp    ecx,edx
c00022b9:	75 09                	jne    c00022c4 <get_ldnumber+0x45>
c00022bb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00022be:	0f be f3             	movsx  esi,bl
c00022c1:	83 ee 30             	sub    esi,0x30
c00022c4:	5b                   	pop    ebx
c00022c5:	89 f0                	mov    eax,esi
c00022c7:	5e                   	pop    esi
c00022c8:	5f                   	pop    edi
c00022c9:	5d                   	pop    ebp
c00022ca:	c3                   	ret    

c00022cb <validate>:
c00022cb:	56                   	push   esi
c00022cc:	85 c0                	test   eax,eax
c00022ce:	53                   	push   ebx
c00022cf:	89 d6                	mov    esi,edx
c00022d1:	51                   	push   ecx
c00022d2:	75 09                	jne    c00022dd <validate+0x12>
c00022d4:	b8 09 00 00 00       	mov    eax,0x9
c00022d9:	31 c9                	xor    ecx,ecx
c00022db:	eb 2e                	jmp    c000230b <validate+0x40>
c00022dd:	89 c3                	mov    ebx,eax
c00022df:	8b 00                	mov    eax,DWORD PTR [eax]
c00022e1:	85 c0                	test   eax,eax
c00022e3:	74 ef                	je     c00022d4 <validate+0x9>
c00022e5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022e8:	74 ea                	je     c00022d4 <validate+0x9>
c00022ea:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022ed:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022f1:	75 e1                	jne    c00022d4 <validate+0x9>
c00022f3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f7:	83 ec 0c             	sub    esp,0xc
c00022fa:	50                   	push   eax
c00022fb:	e8 be fa ff ff       	call   c0001dbe <disk_status>
c0002300:	83 c4 10             	add    esp,0x10
c0002303:	a8 01                	test   al,0x1
c0002305:	75 cd                	jne    c00022d4 <validate+0x9>
c0002307:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002309:	31 c0                	xor    eax,eax
c000230b:	89 0e                	mov    DWORD PTR [esi],ecx
c000230d:	5a                   	pop    edx
c000230e:	5b                   	pop    ebx
c000230f:	5e                   	pop    esi
c0002310:	c3                   	ret    

c0002311 <sync_window>:
c0002311:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002315:	74 58                	je     c000236f <sync_window+0x5e>
c0002317:	56                   	push   esi
c0002318:	53                   	push   ebx
c0002319:	89 c3                	mov    ebx,eax
c000231b:	51                   	push   ecx
c000231c:	6a 01                	push   0x1
c000231e:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002321:	8d 70 34             	lea    esi,[eax+0x34]
c0002324:	56                   	push   esi
c0002325:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002329:	50                   	push   eax
c000232a:	e8 ab fa ff ff       	call   c0001dda <disk_write>
c000232f:	83 c4 10             	add    esp,0x10
c0002332:	ba 01 00 00 00       	mov    edx,0x1
c0002337:	85 c0                	test   eax,eax
c0002339:	75 2e                	jne    c0002369 <sync_window+0x58>
c000233b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000233f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002342:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002345:	89 c1                	mov    ecx,eax
c0002347:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000234a:	39 d1                	cmp    ecx,edx
c000234c:	73 19                	jae    c0002367 <sync_window+0x56>
c000234e:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002352:	75 13                	jne    c0002367 <sync_window+0x56>
c0002354:	6a 01                	push   0x1
c0002356:	01 d0                	add    eax,edx
c0002358:	50                   	push   eax
c0002359:	56                   	push   esi
c000235a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000235e:	50                   	push   eax
c000235f:	e8 76 fa ff ff       	call   c0001dda <disk_write>
c0002364:	83 c4 10             	add    esp,0x10
c0002367:	31 d2                	xor    edx,edx
c0002369:	89 d0                	mov    eax,edx
c000236b:	5a                   	pop    edx
c000236c:	5b                   	pop    ebx
c000236d:	5e                   	pop    esi
c000236e:	c3                   	ret    
c000236f:	31 d2                	xor    edx,edx
c0002371:	89 d0                	mov    eax,edx
c0002373:	c3                   	ret    

c0002374 <move_window>:
c0002374:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002377:	74 3a                	je     c00023b3 <move_window+0x3f>
c0002379:	56                   	push   esi
c000237a:	89 d6                	mov    esi,edx
c000237c:	53                   	push   ebx
c000237d:	89 c3                	mov    ebx,eax
c000237f:	51                   	push   ecx
c0002380:	e8 8c ff ff ff       	call   c0002311 <sync_window>
c0002385:	85 c0                	test   eax,eax
c0002387:	75 2d                	jne    c00023b6 <move_window+0x42>
c0002389:	6a 01                	push   0x1
c000238b:	56                   	push   esi
c000238c:	8d 43 34             	lea    eax,[ebx+0x34]
c000238f:	50                   	push   eax
c0002390:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 2a fa ff ff       	call   c0001dc4 <disk_read>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	89 c2                	mov    edx,eax
c000239f:	31 c0                	xor    eax,eax
c00023a1:	85 d2                	test   edx,edx
c00023a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00023a8:	0f 45 f2             	cmovne esi,edx
c00023ab:	0f 95 c0             	setne  al
c00023ae:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00023b1:	eb 03                	jmp    c00023b6 <move_window+0x42>
c00023b3:	31 c0                	xor    eax,eax
c00023b5:	c3                   	ret    
c00023b6:	5a                   	pop    edx
c00023b7:	5b                   	pop    ebx
c00023b8:	5e                   	pop    esi
c00023b9:	c3                   	ret    

c00023ba <check_fs>:
c00023ba:	53                   	push   ebx
c00023bb:	89 c3                	mov    ebx,eax
c00023bd:	83 ec 08             	sub    esp,0x8
c00023c0:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023c4:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00023cb:	e8 a4 ff ff ff       	call   c0002374 <move_window>
c00023d0:	ba 04 00 00 00       	mov    edx,0x4
c00023d5:	85 c0                	test   eax,eax
c00023d7:	75 68                	jne    c0002441 <check_fs+0x87>
c00023d9:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023df:	e8 2b fa ff ff       	call   c0001e0f <ld_word>
c00023e4:	ba 03 00 00 00       	mov    edx,0x3
c00023e9:	66 3d 55 aa          	cmp    ax,0xaa55
c00023ed:	75 52                	jne    c0002441 <check_fs+0x87>
c00023ef:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023f2:	8d 50 18             	lea    edx,[eax+0x18]
c00023f5:	80 fa 01             	cmp    dl,0x1
c00023f8:	76 09                	jbe    c0002403 <check_fs+0x49>
c00023fa:	3c eb                	cmp    al,0xeb
c00023fc:	ba 02 00 00 00       	mov    edx,0x2
c0002401:	75 3e                	jne    c0002441 <check_fs+0x87>
c0002403:	ba 04 29 02 c0       	mov    edx,0xc0022904
c0002408:	b9 03 00 00 00       	mov    ecx,0x3
c000240d:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002410:	e8 45 fa ff ff       	call   c0001e5a <mem_cmp>
c0002415:	31 d2                	xor    edx,edx
c0002417:	85 c0                	test   eax,eax
c0002419:	74 26                	je     c0002441 <check_fs+0x87>
c000241b:	ba bc 00 02 c0       	mov    edx,0xc00200bc
c0002420:	b9 05 00 00 00       	mov    ecx,0x5
c0002425:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000242b:	e8 2a fa ff ff       	call   c0001e5a <mem_cmp>
c0002430:	31 d2                	xor    edx,edx
c0002432:	85 c0                	test   eax,eax
c0002434:	74 0b                	je     c0002441 <check_fs+0x87>
c0002436:	31 d2                	xor    edx,edx
c0002438:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000243c:	0f 95 c2             	setne  dl
c000243f:	01 d2                	add    edx,edx
c0002441:	83 c4 08             	add    esp,0x8
c0002444:	89 d0                	mov    eax,edx
c0002446:	5b                   	pop    ebx
c0002447:	c3                   	ret    

c0002448 <find_volume>:
c0002448:	55                   	push   ebp
c0002449:	57                   	push   edi
c000244a:	56                   	push   esi
c000244b:	89 c6                	mov    esi,eax
c000244d:	53                   	push   ebx
c000244e:	89 d3                	mov    ebx,edx
c0002450:	83 ec 2c             	sub    esp,0x2c
c0002453:	31 d2                	xor    edx,edx
c0002455:	e8 60 ff ff ff       	call   c00023ba <check_fs>
c000245a:	85 db                	test   ebx,ebx
c000245c:	0f 94 c2             	sete   dl
c000245f:	83 f8 02             	cmp    eax,0x2
c0002462:	74 07                	je     c000246b <find_volume+0x23>
c0002464:	77 63                	ja     c00024c9 <find_volume+0x81>
c0002466:	f6 c2 01             	test   dl,0x1
c0002469:	75 5e                	jne    c00024c9 <find_volume+0x81>
c000246b:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002471:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002475:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000247b:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000247f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002483:	89 f8                	mov    eax,edi
c0002485:	83 c7 10             	add    edi,0x10
c0002488:	e8 8f f9 ff ff       	call   c0001e1c <ld_dword>
c000248d:	83 c5 04             	add    ebp,0x4
c0002490:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002494:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002497:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000249b:	75 e2                	jne    c000247f <find_volume+0x37>
c000249d:	83 fb 01             	cmp    ebx,0x1
c00024a0:	0f b6 fa             	movzx  edi,dl
c00024a3:	83 d3 ff             	adc    ebx,0xffffffff
c00024a6:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c00024aa:	b8 03 00 00 00       	mov    eax,0x3
c00024af:	85 d2                	test   edx,edx
c00024b1:	74 07                	je     c00024ba <find_volume+0x72>
c00024b3:	89 f0                	mov    eax,esi
c00024b5:	e8 00 ff ff ff       	call   c00023ba <check_fs>
c00024ba:	83 f8 01             	cmp    eax,0x1
c00024bd:	76 0a                	jbe    c00024c9 <find_volume+0x81>
c00024bf:	85 ff                	test   edi,edi
c00024c1:	74 06                	je     c00024c9 <find_volume+0x81>
c00024c3:	43                   	inc    ebx
c00024c4:	83 fb 03             	cmp    ebx,0x3
c00024c7:	76 dd                	jbe    c00024a6 <find_volume+0x5e>
c00024c9:	83 c4 2c             	add    esp,0x2c
c00024cc:	5b                   	pop    ebx
c00024cd:	5e                   	pop    esi
c00024ce:	5f                   	pop    edi
c00024cf:	5d                   	pop    ebp
c00024d0:	c3                   	ret    

c00024d1 <mount_volume>:
c00024d1:	55                   	push   ebp
c00024d2:	89 d5                	mov    ebp,edx
c00024d4:	57                   	push   edi
c00024d5:	89 cf                	mov    edi,ecx
c00024d7:	56                   	push   esi
c00024d8:	53                   	push   ebx
c00024d9:	bb 0b 00 00 00       	mov    ebx,0xb
c00024de:	83 ec 2c             	sub    esp,0x2c
c00024e1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024e7:	e8 93 fd ff ff       	call   c000227f <get_ldnumber>
c00024ec:	85 c0                	test   eax,eax
c00024ee:	0f 88 d0 02 00 00    	js     c00027c4 <mount_volume+0x2f3>
c00024f4:	8b 34 85 a0 54 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdab60]
c00024fb:	89 c2                	mov    edx,eax
c00024fd:	bb 0c 00 00 00       	mov    ebx,0xc
c0002502:	85 f6                	test   esi,esi
c0002504:	0f 84 ba 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000250a:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c000250d:	83 e7 fe             	and    edi,0xfffffffe
c0002510:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002513:	74 3c                	je     c0002551 <mount_volume+0x80>
c0002515:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002519:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	50                   	push   eax
c0002521:	e8 98 f8 ff ff       	call   c0001dbe <disk_status>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000252d:	a8 01                	test   al,0x1
c000252f:	75 20                	jne    c0002551 <mount_volume+0x80>
c0002531:	31 db                	xor    ebx,ebx
c0002533:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002539:	0f 84 85 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000253f:	a8 04                	test   al,0x4
c0002541:	0f 84 7d 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002547:	bb 0a 00 00 00       	mov    ebx,0xa
c000254c:	e9 73 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c0002551:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002554:	83 ec 0c             	sub    esp,0xc
c0002557:	0f b6 c2             	movzx  eax,dl
c000255a:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000255d:	bb 03 00 00 00       	mov    ebx,0x3
c0002562:	50                   	push   eax
c0002563:	e8 59 f8 ff ff       	call   c0001dc1 <disk_initialize>
c0002568:	83 c4 10             	add    esp,0x10
c000256b:	a8 01                	test   al,0x1
c000256d:	0f 85 51 02 00 00    	jne    c00027c4 <mount_volume+0x2f3>
c0002573:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002579:	74 04                	je     c000257f <mount_volume+0xae>
c000257b:	a8 04                	test   al,0x4
c000257d:	75 c8                	jne    c0002547 <mount_volume+0x76>
c000257f:	31 d2                	xor    edx,edx
c0002581:	89 f0                	mov    eax,esi
c0002583:	e8 c0 fe ff ff       	call   c0002448 <find_volume>
c0002588:	bb 01 00 00 00       	mov    ebx,0x1
c000258d:	83 f8 04             	cmp    eax,0x4
c0002590:	0f 84 2e 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002596:	83 f8 01             	cmp    eax,0x1
c0002599:	76 0a                	jbe    c00025a5 <mount_volume+0xd4>
c000259b:	bb 0d 00 00 00       	mov    ebx,0xd
c00025a0:	e9 1f 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c00025a5:	8d 46 3f             	lea    eax,[esi+0x3f]
c00025a8:	e8 62 f8 ff ff       	call   c0001e0f <ld_word>
c00025ad:	66 3d 00 02          	cmp    ax,0x200
c00025b1:	75 e8                	jne    c000259b <mount_volume+0xca>
c00025b3:	8d 46 4a             	lea    eax,[esi+0x4a]
c00025b6:	e8 54 f8 ff ff       	call   c0001e0f <ld_word>
c00025bb:	0f b7 c0             	movzx  eax,ax
c00025be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025c2:	85 c0                	test   eax,eax
c00025c4:	75 0c                	jne    c00025d2 <mount_volume+0x101>
c00025c6:	8d 46 58             	lea    eax,[esi+0x58]
c00025c9:	e8 4e f8 ff ff       	call   c0001e1c <ld_dword>
c00025ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025d2:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00025d5:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00025d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00025e0:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00025e3:	89 e8                	mov    eax,ebp
c00025e5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025e8:	8d 45 ff             	lea    eax,[ebp-0x1]
c00025eb:	3c 01                	cmp    al,0x1
c00025ed:	77 ac                	ja     c000259b <mount_volume+0xca>
c00025ef:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025f3:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025f7:	66 85 c0             	test   ax,ax
c00025fa:	89 c3                	mov    ebx,eax
c00025fc:	74 9d                	je     c000259b <mount_volume+0xca>
c00025fe:	8d 40 ff             	lea    eax,[eax-0x1]
c0002601:	85 d8                	test   eax,ebx
c0002603:	75 96                	jne    c000259b <mount_volume+0xca>
c0002605:	8d 46 45             	lea    eax,[esi+0x45]
c0002608:	e8 02 f8 ff ff       	call   c0001e0f <ld_word>
c000260d:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002611:	a8 0f                	test   al,0xf
c0002613:	89 c7                	mov    edi,eax
c0002615:	75 84                	jne    c000259b <mount_volume+0xca>
c0002617:	8d 46 47             	lea    eax,[esi+0x47]
c000261a:	e8 f0 f7 ff ff       	call   c0001e0f <ld_word>
c000261f:	0f b7 d0             	movzx  edx,ax
c0002622:	85 d2                	test   edx,edx
c0002624:	75 0a                	jne    c0002630 <mount_volume+0x15f>
c0002626:	8d 46 54             	lea    eax,[esi+0x54]
c0002629:	e8 ee f7 ff ff       	call   c0001e1c <ld_dword>
c000262e:	89 c2                	mov    edx,eax
c0002630:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002634:	8d 46 42             	lea    eax,[esi+0x42]
c0002637:	e8 d3 f7 ff ff       	call   c0001e0f <ld_word>
c000263c:	0f b7 c8             	movzx  ecx,ax
c000263f:	85 c9                	test   ecx,ecx
c0002641:	0f 84 54 ff ff ff    	je     c000259b <mount_volume+0xca>
c0002647:	89 e8                	mov    eax,ebp
c0002649:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000264d:	0f b6 e8             	movzx  ebp,al
c0002650:	0f b7 c7             	movzx  eax,di
c0002653:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002658:	c1 e8 04             	shr    eax,0x4
c000265b:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000265f:	01 e8                	add    eax,ebp
c0002661:	01 c8                	add    eax,ecx
c0002663:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002667:	39 c2                	cmp    edx,eax
c0002669:	0f 82 2c ff ff ff    	jb     c000259b <mount_volume+0xca>
c000266f:	29 c2                	sub    edx,eax
c0002671:	89 d5                	mov    ebp,edx
c0002673:	89 d0                	mov    eax,edx
c0002675:	31 d2                	xor    edx,edx
c0002677:	f7 f3                	div    ebx
c0002679:	39 dd                	cmp    ebp,ebx
c000267b:	0f 82 1a ff ff ff    	jb     c000259b <mount_volume+0xca>
c0002681:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002686:	0f 87 0f ff ff ff    	ja     c000259b <mount_volume+0xca>
c000268c:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002691:	0f 86 1e 01 00 00    	jbe    c00027b5 <mount_volume+0x2e4>
c0002697:	bb 03 00 00 00       	mov    ebx,0x3
c000269c:	8d 68 02             	lea    ebp,[eax+0x2]
c000269f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00026a3:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00026a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00026aa:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00026ae:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00026b1:	01 c8                	add    eax,ecx
c00026b3:	83 fb 03             	cmp    ebx,0x3
c00026b6:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00026b9:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00026bc:	75 23                	jne    c00026e1 <mount_volume+0x210>
c00026be:	8d 46 5e             	lea    eax,[esi+0x5e]
c00026c1:	e8 49 f7 ff ff       	call   c0001e0f <ld_word>
c00026c6:	09 c7                	or     edi,eax
c00026c8:	66 85 ff             	test   di,di
c00026cb:	0f 85 ca fe ff ff    	jne    c000259b <mount_volume+0xca>
c00026d1:	8d 46 60             	lea    eax,[esi+0x60]
c00026d4:	e8 43 f7 ff ff       	call   c0001e1c <ld_dword>
c00026d9:	c1 e5 02             	shl    ebp,0x2
c00026dc:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026df:	eb 25                	jmp    c0002706 <mount_volume+0x235>
c00026e1:	66 85 ff             	test   di,di
c00026e4:	0f 84 b1 fe ff ff    	je     c000259b <mount_volume+0xca>
c00026ea:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00026ee:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00026f2:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00026f6:	83 e5 01             	and    ebp,0x1
c00026f9:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026fc:	d1 ea                	shr    edx,1
c00026fe:	01 d5                	add    ebp,edx
c0002700:	83 fb 02             	cmp    ebx,0x2
c0002703:	0f 44 ef             	cmove  ebp,edi
c0002706:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c000270c:	c1 ed 09             	shr    ebp,0x9
c000270f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002713:	0f 87 82 fe ff ff    	ja     c000259b <mount_volume+0xca>
c0002719:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002720:	83 fb 03             	cmp    ebx,0x3
c0002723:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000272a:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000272e:	75 6e                	jne    c000279e <mount_volume+0x2cd>
c0002730:	8d 46 64             	lea    eax,[esi+0x64]
c0002733:	e8 d7 f6 ff ff       	call   c0001e0f <ld_word>
c0002738:	66 48                	dec    ax
c000273a:	75 62                	jne    c000279e <mount_volume+0x2cd>
c000273c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002740:	89 f0                	mov    eax,esi
c0002742:	42                   	inc    edx
c0002743:	e8 2c fc ff ff       	call   c0002374 <move_window>
c0002748:	85 c0                	test   eax,eax
c000274a:	75 52                	jne    c000279e <mount_volume+0x2cd>
c000274c:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002750:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002756:	e8 b4 f6 ff ff       	call   c0001e0f <ld_word>
c000275b:	66 3d 55 aa          	cmp    ax,0xaa55
c000275f:	75 3d                	jne    c000279e <mount_volume+0x2cd>
c0002761:	8d 46 34             	lea    eax,[esi+0x34]
c0002764:	e8 b3 f6 ff ff       	call   c0001e1c <ld_dword>
c0002769:	3d 52 52 61 41       	cmp    eax,0x41615252
c000276e:	75 2e                	jne    c000279e <mount_volume+0x2cd>
c0002770:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002776:	e8 a1 f6 ff ff       	call   c0001e1c <ld_dword>
c000277b:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002780:	75 1c                	jne    c000279e <mount_volume+0x2cd>
c0002782:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002788:	e8 8f f6 ff ff       	call   c0001e1c <ld_dword>
c000278d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002790:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002796:	e8 81 f6 ff ff       	call   c0001e1c <ld_dword>
c000279b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000279e:	88 1e                	mov    BYTE PTR [esi],bl
c00027a0:	66 a1 80 54 02 c0    	mov    ax,ds:0xc0025480
c00027a6:	31 db                	xor    ebx,ebx
c00027a8:	40                   	inc    eax
c00027a9:	66 a3 80 54 02 c0    	mov    ds:0xc0025480,ax
c00027af:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c00027b3:	eb 0f                	jmp    c00027c4 <mount_volume+0x2f3>
c00027b5:	3d f6 0f 00 00       	cmp    eax,0xff6
c00027ba:	19 db                	sbb    ebx,ebx
c00027bc:	83 c3 02             	add    ebx,0x2
c00027bf:	e9 d8 fe ff ff       	jmp    c000269c <mount_volume+0x1cb>
c00027c4:	83 c4 2c             	add    esp,0x2c
c00027c7:	89 d8                	mov    eax,ebx
c00027c9:	5b                   	pop    ebx
c00027ca:	5e                   	pop    esi
c00027cb:	5f                   	pop    edi
c00027cc:	5d                   	pop    ebp
c00027cd:	c3                   	ret    

c00027ce <put_fat>:
c00027ce:	55                   	push   ebp
c00027cf:	bd 02 00 00 00       	mov    ebp,0x2
c00027d4:	57                   	push   edi
c00027d5:	56                   	push   esi
c00027d6:	53                   	push   ebx
c00027d7:	83 ec 1c             	sub    esp,0x1c
c00027da:	83 fa 01             	cmp    edx,0x1
c00027dd:	0f 86 38 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027e3:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00027e6:	0f 86 2f 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027ec:	89 c6                	mov    esi,eax
c00027ee:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027f1:	89 cf                	mov    edi,ecx
c00027f3:	89 d3                	mov    ebx,edx
c00027f5:	83 f8 02             	cmp    eax,0x2
c00027f8:	0f 84 b1 00 00 00    	je     c00028af <put_fat+0xe1>
c00027fe:	83 f8 03             	cmp    eax,0x3
c0002801:	0f 84 d5 00 00 00    	je     c00028dc <put_fat+0x10e>
c0002807:	48                   	dec    eax
c0002808:	0f 85 0d 01 00 00    	jne    c000291b <put_fat+0x14d>
c000280e:	89 d1                	mov    ecx,edx
c0002810:	89 f0                	mov    eax,esi
c0002812:	d1 e9                	shr    ecx,1
c0002814:	01 d1                	add    ecx,edx
c0002816:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000281a:	89 ca                	mov    edx,ecx
c000281c:	c1 ea 09             	shr    edx,0x9
c000281f:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002822:	e8 4d fb ff ff       	call   c0002374 <move_window>
c0002827:	85 c0                	test   eax,eax
c0002829:	89 c5                	mov    ebp,eax
c000282b:	0f 85 ea 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002831:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002835:	8d 46 34             	lea    eax,[esi+0x34]
c0002838:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000283c:	8d 41 01             	lea    eax,[ecx+0x1]
c000283f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002845:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002849:	83 e3 01             	and    ebx,0x1
c000284c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002850:	89 f8                	mov    eax,edi
c0002852:	74 11                	je     c0002865 <put_fat+0x97>
c0002854:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002856:	89 f8                	mov    eax,edi
c0002858:	c1 e0 04             	shl    eax,0x4
c000285b:	25 f0 0f 00 00       	and    eax,0xff0
c0002860:	83 e2 0f             	and    edx,0xf
c0002863:	09 d0                	or     eax,edx
c0002865:	88 01                	mov    BYTE PTR [ecx],al
c0002867:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000286b:	89 f0                	mov    eax,esi
c000286d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002871:	c1 ea 09             	shr    edx,0x9
c0002874:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002877:	e8 f8 fa ff ff       	call   c0002374 <move_window>
c000287c:	85 c0                	test   eax,eax
c000287e:	89 c5                	mov    ebp,eax
c0002880:	0f 85 95 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000288a:	25 ff 01 00 00       	and    eax,0x1ff
c000288f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002893:	85 db                	test   ebx,ebx
c0002895:	74 07                	je     c000289e <put_fat+0xd0>
c0002897:	c1 ef 04             	shr    edi,0x4
c000289a:	89 f9                	mov    ecx,edi
c000289c:	eb 0d                	jmp    c00028ab <put_fat+0xdd>
c000289e:	8a 08                	mov    cl,BYTE PTR [eax]
c00028a0:	c1 ef 08             	shr    edi,0x8
c00028a3:	83 e7 0f             	and    edi,0xf
c00028a6:	83 e1 f0             	and    ecx,0xfffffff0
c00028a9:	09 f9                	or     ecx,edi
c00028ab:	88 08                	mov    BYTE PTR [eax],cl
c00028ad:	eb 27                	jmp    c00028d6 <put_fat+0x108>
c00028af:	c1 ea 08             	shr    edx,0x8
c00028b2:	89 f0                	mov    eax,esi
c00028b4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028b7:	e8 b8 fa ff ff       	call   c0002374 <move_window>
c00028bc:	85 c0                	test   eax,eax
c00028be:	89 c5                	mov    ebp,eax
c00028c0:	75 59                	jne    c000291b <put_fat+0x14d>
c00028c2:	01 db                	add    ebx,ebx
c00028c4:	0f b7 d7             	movzx  edx,di
c00028c7:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00028cd:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00028d1:	e8 5e f5 ff ff       	call   c0001e34 <st_word>
c00028d6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00028da:	eb 3f                	jmp    c000291b <put_fat+0x14d>
c00028dc:	c1 ea 07             	shr    edx,0x7
c00028df:	89 f0                	mov    eax,esi
c00028e1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028e4:	e8 8b fa ff ff       	call   c0002374 <move_window>
c00028e9:	85 c0                	test   eax,eax
c00028eb:	89 c5                	mov    ebp,eax
c00028ed:	75 2c                	jne    c000291b <put_fat+0x14d>
c00028ef:	c1 e3 02             	shl    ebx,0x2
c00028f2:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028f8:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028fe:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002902:	89 d8                	mov    eax,ebx
c0002904:	e8 13 f5 ff ff       	call   c0001e1c <ld_dword>
c0002909:	25 00 00 00 f0       	and    eax,0xf0000000
c000290e:	09 f8                	or     eax,edi
c0002910:	89 c2                	mov    edx,eax
c0002912:	89 d8                	mov    eax,ebx
c0002914:	e8 1f f5 ff ff       	call   c0001e38 <st_dword>
c0002919:	eb bb                	jmp    c00028d6 <put_fat+0x108>
c000291b:	83 c4 1c             	add    esp,0x1c
c000291e:	89 e8                	mov    eax,ebp
c0002920:	5b                   	pop    ebx
c0002921:	5e                   	pop    esi
c0002922:	5f                   	pop    edi
c0002923:	5d                   	pop    ebp
c0002924:	c3                   	ret    

c0002925 <dir_clear>:
c0002925:	55                   	push   ebp
c0002926:	57                   	push   edi
c0002927:	56                   	push   esi
c0002928:	89 c6                	mov    esi,eax
c000292a:	53                   	push   ebx
c000292b:	83 ec 1c             	sub    esp,0x1c
c000292e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002932:	e8 da f9 ff ff       	call   c0002311 <sync_window>
c0002937:	85 c0                	test   eax,eax
c0002939:	0f 85 c1 00 00 00    	jne    c0002a00 <dir_clear+0xdb>
c000293f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002943:	89 f0                	mov    eax,esi
c0002945:	e8 1b f7 ff ff       	call   c0002065 <clst2sect>
c000294a:	31 d2                	xor    edx,edx
c000294c:	b9 00 02 00 00       	mov    ecx,0x200
c0002951:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002954:	89 c5                	mov    ebp,eax
c0002956:	8d 46 34             	lea    eax,[esi+0x34]
c0002959:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000295d:	e8 ee f4 ff ff       	call   c0001e50 <mem_set>
c0002962:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002966:	b8 00 80 00 00       	mov    eax,0x8000
c000296b:	c1 e3 09             	shl    ebx,0x9
c000296e:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002974:	0f 47 d8             	cmova  ebx,eax
c0002977:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000297d:	76 16                	jbe    c0002995 <dir_clear+0x70>
c000297f:	83 ec 0c             	sub    esp,0xc
c0002982:	53                   	push   ebx
c0002983:	e8 cc 32 00 00       	call   c0005c54 <ff_memalloc>
c0002988:	83 c4 10             	add    esp,0x10
c000298b:	85 c0                	test   eax,eax
c000298d:	89 c7                	mov    edi,eax
c000298f:	75 76                	jne    c0002a07 <dir_clear+0xe2>
c0002991:	d1 eb                	shr    ebx,1
c0002993:	eb e2                	jmp    c0002977 <dir_clear+0x52>
c0002995:	31 db                	xor    ebx,ebx
c0002997:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000299b:	39 d8                	cmp    eax,ebx
c000299d:	76 53                	jbe    c00029f2 <dir_clear+0xcd>
c000299f:	6a 01                	push   0x1
c00029a1:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029a4:	50                   	push   eax
c00029a5:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00029ad:	50                   	push   eax
c00029ae:	e8 27 f4 ff ff       	call   c0001dda <disk_write>
c00029b3:	83 c4 10             	add    esp,0x10
c00029b6:	85 c0                	test   eax,eax
c00029b8:	75 38                	jne    c00029f2 <dir_clear+0xcd>
c00029ba:	43                   	inc    ebx
c00029bb:	eb da                	jmp    c0002997 <dir_clear+0x72>
c00029bd:	52                   	push   edx
c00029be:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029c1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00029c5:	50                   	push   eax
c00029c6:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029ca:	57                   	push   edi
c00029cb:	50                   	push   eax
c00029cc:	e8 09 f4 ff ff       	call   c0001dda <disk_write>
c00029d1:	83 c4 10             	add    esp,0x10
c00029d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029d8:	85 c0                	test   eax,eax
c00029da:	75 0a                	jne    c00029e6 <dir_clear+0xc1>
c00029dc:	01 d3                	add    ebx,edx
c00029de:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029e2:	39 d8                	cmp    eax,ebx
c00029e4:	77 d7                	ja     c00029bd <dir_clear+0x98>
c00029e6:	83 ec 0c             	sub    esp,0xc
c00029e9:	57                   	push   edi
c00029ea:	e8 7d 32 00 00       	call   c0005c6c <ff_memfree>
c00029ef:	83 c4 10             	add    esp,0x10
c00029f2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029f6:	39 d8                	cmp    eax,ebx
c00029f8:	0f 95 c0             	setne  al
c00029fb:	0f b6 c0             	movzx  eax,al
c00029fe:	eb 19                	jmp    c0002a19 <dir_clear+0xf4>
c0002a00:	b8 01 00 00 00       	mov    eax,0x1
c0002a05:	eb 12                	jmp    c0002a19 <dir_clear+0xf4>
c0002a07:	89 d9                	mov    ecx,ebx
c0002a09:	31 d2                	xor    edx,edx
c0002a0b:	e8 40 f4 ff ff       	call   c0001e50 <mem_set>
c0002a10:	89 da                	mov    edx,ebx
c0002a12:	31 db                	xor    ebx,ebx
c0002a14:	c1 ea 09             	shr    edx,0x9
c0002a17:	eb c5                	jmp    c00029de <dir_clear+0xb9>
c0002a19:	83 c4 1c             	add    esp,0x1c
c0002a1c:	5b                   	pop    ebx
c0002a1d:	5e                   	pop    esi
c0002a1e:	5f                   	pop    edi
c0002a1f:	5d                   	pop    ebp
c0002a20:	c3                   	ret    

c0002a21 <create_name>:
c0002a21:	55                   	push   ebp
c0002a22:	89 c5                	mov    ebp,eax
c0002a24:	57                   	push   edi
c0002a25:	89 d7                	mov    edi,edx
c0002a27:	56                   	push   esi
c0002a28:	31 f6                	xor    esi,esi
c0002a2a:	53                   	push   ebx
c0002a2b:	83 ec 3c             	sub    esp,0x3c
c0002a2e:	8b 02                	mov    eax,DWORD PTR [edx]
c0002a30:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a34:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002a37:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002a3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a3e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002a42:	e8 4d f4 ff ff       	call   c0001e94 <tchar2uni>
c0002a47:	83 f8 ff             	cmp    eax,0xffffffff
c0002a4a:	89 c3                	mov    ebx,eax
c0002a4c:	75 0a                	jne    c0002a58 <create_name+0x37>
c0002a4e:	b8 06 00 00 00       	mov    eax,0x6
c0002a53:	e9 7c 02 00 00       	jmp    c0002cd4 <create_name+0x2b3>
c0002a58:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a5d:	76 0c                	jbe    c0002a6b <create_name+0x4a>
c0002a5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a63:	c1 e8 10             	shr    eax,0x10
c0002a66:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002a6a:	46                   	inc    esi
c0002a6b:	0f b7 d3             	movzx  edx,bx
c0002a6e:	89 d8                	mov    eax,ebx
c0002a70:	83 fa 1f             	cmp    edx,0x1f
c0002a73:	76 30                	jbe    c0002aa5 <create_name+0x84>
c0002a75:	83 fa 2f             	cmp    edx,0x2f
c0002a78:	74 2b                	je     c0002aa5 <create_name+0x84>
c0002a7a:	83 fa 5c             	cmp    edx,0x5c
c0002a7d:	74 35                	je     c0002ab4 <create_name+0x93>
c0002a7f:	83 fa 7f             	cmp    edx,0x7f
c0002a82:	77 0e                	ja     c0002a92 <create_name+0x71>
c0002a84:	b8 c2 00 02 c0       	mov    eax,0xc00200c2
c0002a89:	e8 ef f3 ff ff       	call   c0001e7d <chk_chr>
c0002a8e:	85 c0                	test   eax,eax
c0002a90:	75 bc                	jne    c0002a4e <create_name+0x2d>
c0002a92:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a98:	77 b4                	ja     c0002a4e <create_name+0x2d>
c0002a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9e:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002aa2:	46                   	inc    esi
c0002aa3:	eb 99                	jmp    c0002a3e <create_name+0x1d>
c0002aa5:	66 83 f8 1f          	cmp    ax,0x1f
c0002aa9:	b3 04                	mov    bl,0x4
c0002aab:	76 1a                	jbe    c0002ac7 <create_name+0xa6>
c0002aad:	eb 05                	jmp    c0002ab4 <create_name+0x93>
c0002aaf:	40                   	inc    eax
c0002ab0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002ab4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002ab8:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002abb:	83 fa 2f             	cmp    edx,0x2f
c0002abe:	74 ef                	je     c0002aaf <create_name+0x8e>
c0002ac0:	83 fa 5c             	cmp    edx,0x5c
c0002ac3:	74 ea                	je     c0002aaf <create_name+0x8e>
c0002ac5:	31 db                	xor    ebx,ebx
c0002ac7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002acb:	89 07                	mov    DWORD PTR [edi],eax
c0002acd:	85 f6                	test   esi,esi
c0002acf:	74 16                	je     c0002ae7 <create_name+0xc6>
c0002ad1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad5:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002ada:	83 f8 20             	cmp    eax,0x20
c0002add:	74 05                	je     c0002ae4 <create_name+0xc3>
c0002adf:	83 f8 2e             	cmp    eax,0x2e
c0002ae2:	75 03                	jne    c0002ae7 <create_name+0xc6>
c0002ae4:	4e                   	dec    esi
c0002ae5:	eb e6                	jmp    c0002acd <create_name+0xac>
c0002ae7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aeb:	31 ff                	xor    edi,edi
c0002aed:	85 f6                	test   esi,esi
c0002aef:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002af5:	0f 84 53 ff ff ff    	je     c0002a4e <create_name+0x2d>
c0002afb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aff:	8d 57 01             	lea    edx,[edi+0x1]
c0002b02:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b06:	83 f8 20             	cmp    eax,0x20
c0002b09:	75 04                	jne    c0002b0f <create_name+0xee>
c0002b0b:	89 d7                	mov    edi,edx
c0002b0d:	eb ec                	jmp    c0002afb <create_name+0xda>
c0002b0f:	85 ff                	test   edi,edi
c0002b11:	75 05                	jne    c0002b18 <create_name+0xf7>
c0002b13:	83 f8 2e             	cmp    eax,0x2e
c0002b16:	75 08                	jne    c0002b20 <create_name+0xff>
c0002b18:	83 cb 03             	or     ebx,0x3
c0002b1b:	eb 03                	jmp    c0002b20 <create_name+0xff>
c0002b1d:	4e                   	dec    esi
c0002b1e:	74 0c                	je     c0002b2c <create_name+0x10b>
c0002b20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b24:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002b2a:	75 f1                	jne    c0002b1d <create_name+0xfc>
c0002b2c:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b31:	ba 20 00 00 00       	mov    edx,0x20
c0002b36:	8d 45 20             	lea    eax,[ebp+0x20]
c0002b39:	e8 12 f3 ff ff       	call   c0001e50 <mem_set>
c0002b3e:	31 c9                	xor    ecx,ecx
c0002b40:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002b48:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002b4d:	8d 47 01             	lea    eax,[edi+0x1]
c0002b50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b58:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b5c:	85 c0                	test   eax,eax
c0002b5e:	89 c7                	mov    edi,eax
c0002b60:	0f 84 1d 01 00 00    	je     c0002c83 <create_name+0x262>
c0002b66:	83 f8 20             	cmp    eax,0x20
c0002b69:	74 0b                	je     c0002b76 <create_name+0x155>
c0002b6b:	83 f8 2e             	cmp    eax,0x2e
c0002b6e:	75 0f                	jne    c0002b7f <create_name+0x15e>
c0002b70:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b74:	74 09                	je     c0002b7f <create_name+0x15e>
c0002b76:	83 cb 03             	or     ebx,0x3
c0002b79:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002b7d:	eb ce                	jmp    c0002b4d <create_name+0x12c>
c0002b7f:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002b83:	73 06                	jae    c0002b8b <create_name+0x16a>
c0002b85:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b89:	75 3a                	jne    c0002bc5 <create_name+0x1a4>
c0002b8b:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002b90:	75 08                	jne    c0002b9a <create_name+0x179>
c0002b92:	83 cb 03             	or     ebx,0x3
c0002b95:	e9 e9 00 00 00       	jmp    c0002c83 <create_name+0x262>
c0002b9a:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b9e:	74 0d                	je     c0002bad <create_name+0x18c>
c0002ba0:	83 cb 03             	or     ebx,0x3
c0002ba3:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002ba7:	0f 87 d6 00 00 00    	ja     c0002c83 <create_name+0x262>
c0002bad:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002bb2:	b9 08 00 00 00       	mov    ecx,0x8
c0002bb7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002bbb:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002bc3:	eb b4                	jmp    c0002b79 <create_name+0x158>
c0002bc5:	0f b7 c7             	movzx  eax,di
c0002bc8:	83 f8 7f             	cmp    eax,0x7f
c0002bcb:	76 66                	jbe    c0002c33 <create_name+0x212>
c0002bcd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002bd1:	89 d9                	mov    ecx,ebx
c0002bd3:	83 c9 02             	or     ecx,0x2
c0002bd6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bda:	52                   	push   edx
c0002bdb:	52                   	push   edx
c0002bdc:	68 b5 01 00 00       	push   0x1b5
c0002be1:	50                   	push   eax
c0002be2:	e8 9d 30 00 00       	call   c0005c84 <ff_uni2oem>
c0002be7:	83 c4 10             	add    esp,0x10
c0002bea:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002bee:	a8 80                	test   al,0x80
c0002bf0:	89 c7                	mov    edi,eax
c0002bf2:	74 0c                	je     c0002c00 <create_name+0x1df>
c0002bf4:	83 e7 7f             	and    edi,0x7f
c0002bf7:	0f b6 bf 80 01 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdfe80]
c0002bfe:	eb 2a                	jmp    c0002c2a <create_name+0x209>
c0002c00:	0f b7 c0             	movzx  eax,ax
c0002c03:	3d ff 00 00 00       	cmp    eax,0xff
c0002c08:	76 20                	jbe    c0002c2a <create_name+0x209>
c0002c0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002c0e:	4a                   	dec    edx
c0002c0f:	39 ca                	cmp    edx,ecx
c0002c11:	77 0c                	ja     c0002c1f <create_name+0x1fe>
c0002c13:	83 cb 03             	or     ebx,0x3
c0002c16:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002c1a:	e9 5a ff ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c1f:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002c23:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c27:	41                   	inc    ecx
c0002c28:	eb 4d                	jmp    c0002c77 <create_name+0x256>
c0002c2a:	66 85 ff             	test   di,di
c0002c2d:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c31:	74 19                	je     c0002c4c <create_name+0x22b>
c0002c33:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002c37:	0f b7 d7             	movzx  edx,di
c0002c3a:	b8 cb 00 02 c0       	mov    eax,0xc00200cb
c0002c3f:	e8 39 f2 ff ff       	call   c0001e7d <chk_chr>
c0002c44:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002c48:	85 c0                	test   eax,eax
c0002c4a:	74 0a                	je     c0002c56 <create_name+0x235>
c0002c4c:	83 cb 03             	or     ebx,0x3
c0002c4f:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c54:	eb 21                	jmp    c0002c77 <create_name+0x256>
c0002c56:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c59:	66 83 f8 19          	cmp    ax,0x19
c0002c5d:	77 07                	ja     c0002c66 <create_name+0x245>
c0002c5f:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c64:	eb 11                	jmp    c0002c77 <create_name+0x256>
c0002c66:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c69:	66 83 f8 19          	cmp    ax,0x19
c0002c6d:	77 08                	ja     c0002c77 <create_name+0x256>
c0002c6f:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c74:	83 ef 20             	sub    edi,0x20
c0002c77:	89 f8                	mov    eax,edi
c0002c79:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002c7d:	41                   	inc    ecx
c0002c7e:	e9 f6 fe ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c83:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002c87:	75 04                	jne    c0002c8d <create_name+0x26c>
c0002c89:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002c8d:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002c92:	75 05                	jne    c0002c99 <create_name+0x278>
c0002c94:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c9d:	83 e0 0c             	and    eax,0xc
c0002ca0:	83 f8 0c             	cmp    eax,0xc
c0002ca3:	74 0c                	je     c0002cb1 <create_name+0x290>
c0002ca5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ca9:	83 e0 03             	and    eax,0x3
c0002cac:	83 f8 03             	cmp    eax,0x3
c0002caf:	75 05                	jne    c0002cb6 <create_name+0x295>
c0002cb1:	83 cb 02             	or     ebx,0x2
c0002cb4:	eb 19                	jmp    c0002ccf <create_name+0x2ae>
c0002cb6:	f6 c3 02             	test   bl,0x2
c0002cb9:	75 14                	jne    c0002ccf <create_name+0x2ae>
c0002cbb:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002cc0:	74 03                	je     c0002cc5 <create_name+0x2a4>
c0002cc2:	83 cb 10             	or     ebx,0x10
c0002cc5:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002cca:	74 03                	je     c0002ccf <create_name+0x2ae>
c0002ccc:	83 cb 08             	or     ebx,0x8
c0002ccf:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002cd2:	31 c0                	xor    eax,eax
c0002cd4:	83 c4 3c             	add    esp,0x3c
c0002cd7:	5b                   	pop    ebx
c0002cd8:	5e                   	pop    esi
c0002cd9:	5f                   	pop    edi
c0002cda:	5d                   	pop    ebp
c0002cdb:	c3                   	ret    

c0002cdc <cmp_lfn>:
c0002cdc:	55                   	push   ebp
c0002cdd:	57                   	push   edi
c0002cde:	89 d7                	mov    edi,edx
c0002ce0:	56                   	push   esi
c0002ce1:	53                   	push   ebx
c0002ce2:	83 ec 1c             	sub    esp,0x1c
c0002ce5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002ce9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cec:	e8 1e f1 ff ff       	call   c0001e0f <ld_word>
c0002cf1:	66 85 c0             	test   ax,ax
c0002cf4:	74 07                	je     c0002cfd <cmp_lfn+0x21>
c0002cf6:	31 c0                	xor    eax,eax
c0002cf8:	e9 a4 00 00 00       	jmp    c0002da1 <cmp_lfn+0xc5>
c0002cfd:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cff:	bd 01 00 00 00       	mov    ebp,0x1
c0002d04:	31 c9                	xor    ecx,ecx
c0002d06:	83 e3 3f             	and    ebx,0x3f
c0002d09:	4b                   	dec    ebx
c0002d0a:	6b db 0d             	imul   ebx,ebx,0xd
c0002d0d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d11:	0f b6 81 00 02 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffdfe00]
c0002d18:	01 f8                	add    eax,edi
c0002d1a:	e8 f0 f0 ff ff       	call   c0001e0f <ld_word>
c0002d1f:	66 85 ed             	test   bp,bp
c0002d22:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d26:	0f b7 f0             	movzx  esi,ax
c0002d29:	74 44                	je     c0002d6f <cmp_lfn+0x93>
c0002d2b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002d2f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d35:	77 bf                	ja     c0002cf6 <cmp_lfn+0x1a>
c0002d37:	83 ec 0c             	sub    esp,0xc
c0002d3a:	0f b7 c6             	movzx  eax,si
c0002d3d:	50                   	push   eax
c0002d3e:	e8 55 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d43:	89 c5                	mov    ebp,eax
c0002d45:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002d4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002d50:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d54:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d57:	e8 3c 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d5c:	83 c4 10             	add    esp,0x10
c0002d5f:	39 c5                	cmp    ebp,eax
c0002d61:	75 93                	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d63:	89 f5                	mov    ebp,esi
c0002d65:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002d69:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002d6d:	eb 0c                	jmp    c0002d7b <cmp_lfn+0x9f>
c0002d6f:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002d75:	0f 85 7b ff ff ff    	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d7b:	41                   	inc    ecx
c0002d7c:	83 f9 0d             	cmp    ecx,0xd
c0002d7f:	75 8c                	jne    c0002d0d <cmp_lfn+0x31>
c0002d81:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d84:	74 16                	je     c0002d9c <cmp_lfn+0xc0>
c0002d86:	66 85 ed             	test   bp,bp
c0002d89:	74 11                	je     c0002d9c <cmp_lfn+0xc0>
c0002d8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d8f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d94:	0f 94 c0             	sete   al
c0002d97:	0f b6 c0             	movzx  eax,al
c0002d9a:	eb 05                	jmp    c0002da1 <cmp_lfn+0xc5>
c0002d9c:	b8 01 00 00 00       	mov    eax,0x1
c0002da1:	83 c4 1c             	add    esp,0x1c
c0002da4:	5b                   	pop    ebx
c0002da5:	5e                   	pop    esi
c0002da6:	5f                   	pop    edi
c0002da7:	5d                   	pop    ebp
c0002da8:	c3                   	ret    

c0002da9 <sync_fs>:
c0002da9:	56                   	push   esi
c0002daa:	53                   	push   ebx
c0002dab:	53                   	push   ebx
c0002dac:	89 c3                	mov    ebx,eax
c0002dae:	e8 5e f5 ff ff       	call   c0002311 <sync_window>
c0002db3:	85 c0                	test   eax,eax
c0002db5:	0f 85 9a 00 00 00    	jne    c0002e55 <sync_fs+0xac>
c0002dbb:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002dbe:	75 7b                	jne    c0002e3b <sync_fs+0x92>
c0002dc0:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002dc4:	75 75                	jne    c0002e3b <sync_fs+0x92>
c0002dc6:	8d 73 34             	lea    esi,[ebx+0x34]
c0002dc9:	b9 00 02 00 00       	mov    ecx,0x200
c0002dce:	31 d2                	xor    edx,edx
c0002dd0:	89 f0                	mov    eax,esi
c0002dd2:	e8 79 f0 ff ff       	call   c0001e50 <mem_set>
c0002dd7:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ddd:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002de2:	e8 4d f0 ff ff       	call   c0001e34 <st_word>
c0002de7:	ba 52 52 61 41       	mov    edx,0x41615252
c0002dec:	89 f0                	mov    eax,esi
c0002dee:	e8 45 f0 ff ff       	call   c0001e38 <st_dword>
c0002df3:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002df9:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dfe:	e8 35 f0 ff ff       	call   c0001e38 <st_dword>
c0002e03:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002e06:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002e0c:	e8 27 f0 ff ff       	call   c0001e38 <st_dword>
c0002e11:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e14:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002e1a:	e8 19 f0 ff ff       	call   c0001e38 <st_dword>
c0002e1f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002e22:	6a 01                	push   0x1
c0002e24:	40                   	inc    eax
c0002e25:	50                   	push   eax
c0002e26:	56                   	push   esi
c0002e27:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002e2a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e2e:	50                   	push   eax
c0002e2f:	e8 a6 ef ff ff       	call   c0001dda <disk_write>
c0002e34:	83 c4 10             	add    esp,0x10
c0002e37:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e3b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e3f:	51                   	push   ecx
c0002e40:	6a 00                	push   0x0
c0002e42:	6a 00                	push   0x0
c0002e44:	50                   	push   eax
c0002e45:	e8 a6 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e4a:	83 c4 10             	add    esp,0x10
c0002e4d:	85 c0                	test   eax,eax
c0002e4f:	0f 95 c0             	setne  al
c0002e52:	0f b6 c0             	movzx  eax,al
c0002e55:	5a                   	pop    edx
c0002e56:	5b                   	pop    ebx
c0002e57:	5e                   	pop    esi
c0002e58:	c3                   	ret    

c0002e59 <create_partition>:
c0002e59:	55                   	push   ebp
c0002e5a:	0f b6 c0             	movzx  eax,al
c0002e5d:	57                   	push   edi
c0002e5e:	56                   	push   esi
c0002e5f:	53                   	push   ebx
c0002e60:	83 ec 40             	sub    esp,0x40
c0002e63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e67:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e6b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e6f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e73:	50                   	push   eax
c0002e74:	6a 01                	push   0x1
c0002e76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e7a:	e8 71 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e7f:	83 c4 10             	add    esp,0x10
c0002e82:	85 c0                	test   eax,eax
c0002e84:	0f 85 68 01 00 00    	jne    c0002ff2 <create_partition+0x199>
c0002e8a:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0002e8e:	b9 05 00 00 00       	mov    ecx,0x5
c0002e93:	be 08 00 00 00       	mov    esi,0x8
c0002e98:	89 f0                	mov    eax,esi
c0002e9a:	31 d2                	xor    edx,edx
c0002e9c:	0f b6 d8             	movzx  ebx,al
c0002e9f:	89 e8                	mov    eax,ebp
c0002ea1:	f7 f3                	div    ebx
c0002ea3:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002ea8:	76 0a                	jbe    c0002eb4 <create_partition+0x5b>
c0002eaa:	d1 e6                	shl    esi,1
c0002eac:	49                   	dec    ecx
c0002ead:	75 e9                	jne    c0002e98 <create_partition+0x3f>
c0002eaf:	be ff ff ff ff       	mov    esi,0xffffffff
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	b9 00 02 00 00       	mov    ecx,0x200
c0002ebd:	31 d2                	xor    edx,edx
c0002ebf:	e8 8c ef ff ff       	call   c0001e50 <mem_set>
c0002ec4:	b9 64 00 00 00       	mov    ecx,0x64
c0002ec9:	89 e8                	mov    eax,ebp
c0002ecb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ed3:	31 d2                	xor    edx,edx
c0002ed5:	f7 f1                	div    ecx
c0002ed7:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002edc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002ee0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ee4:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002eea:	89 f0                	mov    eax,esi
c0002eec:	0f b6 c0             	movzx  eax,al
c0002eef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ef3:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0002ef8:	0f 96 c0             	setbe  al
c0002efb:	31 d2                	xor    edx,edx
c0002efd:	85 c9                	test   ecx,ecx
c0002eff:	0f 95 c2             	setne  dl
c0002f02:	85 c2                	test   edx,eax
c0002f04:	0f 84 b7 00 00 00    	je     c0002fc1 <create_partition+0x168>
c0002f0a:	39 e9                	cmp    ecx,ebp
c0002f0c:	0f 83 af 00 00 00    	jae    c0002fc1 <create_partition+0x168>
c0002f12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f16:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f1a:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f1d:	83 fe 64             	cmp    esi,0x64
c0002f20:	77 0b                	ja     c0002f2d <create_partition+0xd4>
c0002f22:	74 07                	je     c0002f2b <create_partition+0xd2>
c0002f24:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f29:	eb 02                	jmp    c0002f2d <create_partition+0xd4>
c0002f2b:	89 ee                	mov    esi,ebp
c0002f2d:	89 ca                	mov    edx,ecx
c0002f2f:	31 c0                	xor    eax,eax
c0002f31:	01 f2                	add    edx,esi
c0002f33:	0f 92 c0             	setb   al
c0002f36:	39 ea                	cmp    edx,ebp
c0002f38:	77 04                	ja     c0002f3e <create_partition+0xe5>
c0002f3a:	85 c0                	test   eax,eax
c0002f3c:	74 06                	je     c0002f44 <create_partition+0xeb>
c0002f3e:	89 ee                	mov    esi,ebp
c0002f40:	29 ce                	sub    esi,ecx
c0002f42:	eb 04                	jmp    c0002f48 <create_partition+0xef>
c0002f44:	85 f6                	test   esi,esi
c0002f46:	74 79                	je     c0002fc1 <create_partition+0x168>
c0002f48:	89 ca                	mov    edx,ecx
c0002f4a:	89 d8                	mov    eax,ebx
c0002f4c:	e8 e7 ee ff ff       	call   c0001e38 <st_dword>
c0002f51:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f54:	89 f2                	mov    edx,esi
c0002f56:	e8 dd ee ff ff       	call   c0001e38 <st_dword>
c0002f5b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f5f:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f64:	31 d2                	xor    edx,edx
c0002f66:	83 c3 10             	add    ebx,0x10
c0002f69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f6d:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f70:	89 c8                	mov    eax,ecx
c0002f72:	01 f1                	add    ecx,esi
c0002f74:	f7 f7                	div    edi
c0002f76:	89 d7                	mov    edi,edx
c0002f78:	31 d2                	xor    edx,edx
c0002f7a:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f7e:	47                   	inc    edi
c0002f7f:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f82:	89 c2                	mov    edx,eax
c0002f84:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f87:	c1 ea 02             	shr    edx,0x2
c0002f8a:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f8d:	83 e2 c0             	and    edx,0xffffffc0
c0002f90:	09 fa                	or     edx,edi
c0002f92:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f97:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f9a:	31 d2                	xor    edx,edx
c0002f9c:	f7 f7                	div    edi
c0002f9e:	89 d6                	mov    esi,edx
c0002fa0:	31 d2                	xor    edx,edx
c0002fa2:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002fa6:	46                   	inc    esi
c0002fa7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002faa:	89 c7                	mov    edi,eax
c0002fac:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002faf:	c1 ef 02             	shr    edi,0x2
c0002fb2:	83 e7 c0             	and    edi,0xffffffc0
c0002fb5:	09 fe                	or     esi,edi
c0002fb7:	89 f2                	mov    edx,esi
c0002fb9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fbc:	e9 32 ff ff ff       	jmp    c0002ef3 <create_partition+0x9a>
c0002fc1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002fc5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fca:	05 fe 01 00 00       	add    eax,0x1fe
c0002fcf:	e8 60 ee ff ff       	call   c0001e34 <st_word>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	6a 00                	push   0x0
c0002fd8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002fdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002fe0:	e8 f5 ed ff ff       	call   c0001dda <disk_write>
c0002fe5:	83 c4 10             	add    esp,0x10
c0002fe8:	85 c0                	test   eax,eax
c0002fea:	0f 95 c0             	setne  al
c0002fed:	0f b6 c0             	movzx  eax,al
c0002ff0:	eb 05                	jmp    c0002ff7 <create_partition+0x19e>
c0002ff2:	b8 01 00 00 00       	mov    eax,0x1
c0002ff7:	83 c4 3c             	add    esp,0x3c
c0002ffa:	5b                   	pop    ebx
c0002ffb:	5e                   	pop    esi
c0002ffc:	5f                   	pop    edi
c0002ffd:	5d                   	pop    ebp
c0002ffe:	c3                   	ret    

c0002fff <get_fileinfo>:
c0002fff:	55                   	push   ebp
c0003000:	57                   	push   edi
c0003001:	56                   	push   esi
c0003002:	53                   	push   ebx
c0003003:	83 ec 1c             	sub    esp,0x1c
c0003006:	8b 30                	mov    esi,DWORD PTR [eax]
c0003008:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c000300c:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003010:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003014:	0f 84 de 01 00 00    	je     c00031f8 <get_fileinfo+0x1f9>
c000301a:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c000301e:	89 d3                	mov    ebx,edx
c0003020:	89 c6                	mov    esi,eax
c0003022:	74 7d                	je     c00030a1 <get_fileinfo+0xa2>
c0003024:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000302c:	31 ff                	xor    edi,edi
c000302e:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003035:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003039:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000303d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003040:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003044:	85 c0                	test   eax,eax
c0003046:	89 c2                	mov    edx,eax
c0003048:	74 44                	je     c000308e <get_fileinfo+0x8f>
c000304a:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c000304f:	85 ed                	test   ebp,ebp
c0003051:	75 0d                	jne    c0003060 <get_fileinfo+0x61>
c0003053:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003059:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000305e:	76 20                	jbe    c0003080 <get_fileinfo+0x81>
c0003060:	c1 e5 10             	shl    ebp,0x10
c0003063:	b9 ff 00 00 00       	mov    ecx,0xff
c0003068:	29 f9                	sub    ecx,edi
c000306a:	09 e8                	or     eax,ebp
c000306c:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003070:	e8 f7 ee ff ff       	call   c0001f6c <put_utf>
c0003075:	0f b6 c0             	movzx  eax,al
c0003078:	85 c0                	test   eax,eax
c000307a:	74 10                	je     c000308c <get_fileinfo+0x8d>
c000307c:	01 c7                	add    edi,eax
c000307e:	31 d2                	xor    edx,edx
c0003080:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003085:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000308a:	eb a9                	jmp    c0003035 <get_fileinfo+0x36>
c000308c:	31 ff                	xor    edi,edi
c000308e:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003094:	b8 00 00 00 00       	mov    eax,0x0
c0003099:	0f 45 f8             	cmovne edi,eax
c000309c:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c00030a1:	31 ff                	xor    edi,edi
c00030a3:	31 c9                	xor    ecx,ecx
c00030a5:	83 f9 0a             	cmp    ecx,0xa
c00030a8:	0f 87 ac 00 00 00    	ja     c000315a <get_fileinfo+0x15b>
c00030ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b1:	8d 69 01             	lea    ebp,[ecx+0x1]
c00030b4:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00030b8:	83 f8 20             	cmp    eax,0x20
c00030bb:	89 c2                	mov    edx,eax
c00030bd:	0f 84 90 00 00 00    	je     c0003153 <get_fileinfo+0x154>
c00030c3:	83 f8 05             	cmp    eax,0x5
c00030c6:	75 05                	jne    c00030cd <get_fileinfo+0xce>
c00030c8:	ba e5 00 00 00       	mov    edx,0xe5
c00030cd:	83 fd 09             	cmp    ebp,0x9
c00030d0:	75 0b                	jne    c00030dd <get_fileinfo+0xde>
c00030d2:	83 ff 0b             	cmp    edi,0xb
c00030d5:	77 06                	ja     c00030dd <get_fileinfo+0xde>
c00030d7:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00030dc:	47                   	inc    edi
c00030dd:	0f b7 c2             	movzx  eax,dx
c00030e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030e4:	e8 a5 ed ff ff       	call   c0001e8e <dbc_1st>
c00030e9:	85 c0                	test   eax,eax
c00030eb:	74 2f                	je     c000311c <get_fileinfo+0x11d>
c00030ed:	83 fd 08             	cmp    ebp,0x8
c00030f0:	74 2a                	je     c000311c <get_fileinfo+0x11d>
c00030f2:	83 fd 0b             	cmp    ebp,0xb
c00030f5:	74 25                	je     c000311c <get_fileinfo+0x11d>
c00030f7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030fa:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030fe:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c0003102:	e8 8a ed ff ff       	call   c0001e91 <dbc_2nd>
c0003107:	85 c0                	test   eax,eax
c0003109:	74 11                	je     c000311c <get_fileinfo+0x11d>
c000310b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000310f:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003112:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c0003117:	c1 e0 08             	shl    eax,0x8
c000311a:	09 c2                	or     edx,eax
c000311c:	50                   	push   eax
c000311d:	0f b7 d2             	movzx  edx,dx
c0003120:	50                   	push   eax
c0003121:	68 b5 01 00 00       	push   0x1b5
c0003126:	52                   	push   edx
c0003127:	e8 f4 2b 00 00       	call   c0005d20 <ff_oem2uni>
c000312c:	83 c4 10             	add    esp,0x10
c000312f:	0f b7 c0             	movzx  eax,ax
c0003132:	85 c0                	test   eax,eax
c0003134:	75 04                	jne    c000313a <get_fileinfo+0x13b>
c0003136:	31 ff                	xor    edi,edi
c0003138:	eb 20                	jmp    c000315a <get_fileinfo+0x15b>
c000313a:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000313e:	b9 0c 00 00 00       	mov    ecx,0xc
c0003143:	29 f9                	sub    ecx,edi
c0003145:	e8 22 ee ff ff       	call   c0001f6c <put_utf>
c000314a:	0f b6 c0             	movzx  eax,al
c000314d:	85 c0                	test   eax,eax
c000314f:	74 e5                	je     c0003136 <get_fileinfo+0x137>
c0003151:	01 c7                	add    edi,eax
c0003153:	89 e9                	mov    ecx,ebp
c0003155:	e9 4b ff ff ff       	jmp    c00030a5 <get_fileinfo+0xa6>
c000315a:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000315f:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003163:	75 5f                	jne    c00031c4 <get_fileinfo+0x1c5>
c0003165:	85 ff                	test   edi,edi
c0003167:	75 0b                	jne    c0003174 <get_fileinfo+0x175>
c0003169:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000316d:	ba 01 00 00 00       	mov    edx,0x1
c0003172:	eb 3e                	jmp    c00031b2 <get_fileinfo+0x1b3>
c0003174:	bf 08 00 00 00       	mov    edi,0x8
c0003179:	31 d2                	xor    edx,edx
c000317b:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003181:	84 c0                	test   al,al
c0003183:	74 2d                	je     c00031b2 <get_fileinfo+0x1b3>
c0003185:	66 83 f8 2e          	cmp    ax,0x2e
c0003189:	74 1b                	je     c00031a6 <get_fileinfo+0x1a7>
c000318b:	8d 48 bf             	lea    ecx,[eax-0x41]
c000318e:	66 83 f9 19          	cmp    cx,0x19
c0003192:	77 17                	ja     c00031ab <get_fileinfo+0x1ac>
c0003194:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003197:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000319a:	21 f9                	and    ecx,edi
c000319c:	80 e1 18             	and    cl,0x18
c000319f:	74 0a                	je     c00031ab <get_fileinfo+0x1ac>
c00031a1:	83 c0 20             	add    eax,0x20
c00031a4:	eb 05                	jmp    c00031ab <get_fileinfo+0x1ac>
c00031a6:	bf 10 00 00 00       	mov    edi,0x10
c00031ab:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c00031af:	42                   	inc    edx
c00031b0:	eb c9                	jmp    c000317b <get_fileinfo+0x17c>
c00031b2:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c00031b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ba:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c00031be:	75 04                	jne    c00031c4 <get_fileinfo+0x1c5>
c00031c0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00031c4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031c7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00031ca:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00031cd:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031d0:	83 c0 1c             	add    eax,0x1c
c00031d3:	e8 44 ec ff ff       	call   c0001e1c <ld_dword>
c00031d8:	89 03                	mov    DWORD PTR [ebx],eax
c00031da:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031dd:	83 c0 16             	add    eax,0x16
c00031e0:	e8 2a ec ff ff       	call   c0001e0f <ld_word>
c00031e5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031e9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ec:	83 c0 18             	add    eax,0x18
c00031ef:	e8 1b ec ff ff       	call   c0001e0f <ld_word>
c00031f4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031f8:	83 c4 1c             	add    esp,0x1c
c00031fb:	5b                   	pop    ebx
c00031fc:	5e                   	pop    esi
c00031fd:	5f                   	pop    edi
c00031fe:	5d                   	pop    ebp
c00031ff:	c3                   	ret    

c0003200 <ld_clust.isra.0>:
c0003200:	56                   	push   esi
c0003201:	89 c6                	mov    esi,eax
c0003203:	53                   	push   ebx
c0003204:	89 d3                	mov    ebx,edx
c0003206:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003209:	e8 01 ec ff ff       	call   c0001e0f <ld_word>
c000320e:	0f b7 c8             	movzx  ecx,ax
c0003211:	89 f0                	mov    eax,esi
c0003213:	3c 03                	cmp    al,0x3
c0003215:	75 0d                	jne    c0003224 <ld_clust.isra.0+0x24>
c0003217:	8d 43 14             	lea    eax,[ebx+0x14]
c000321a:	e8 f0 eb ff ff       	call   c0001e0f <ld_word>
c000321f:	c1 e0 10             	shl    eax,0x10
c0003222:	09 c1                	or     ecx,eax
c0003224:	5b                   	pop    ebx
c0003225:	89 c8                	mov    eax,ecx
c0003227:	5e                   	pop    esi
c0003228:	c3                   	ret    

c0003229 <st_clust.isra.1>:
c0003229:	56                   	push   esi
c000322a:	89 c6                	mov    esi,eax
c000322c:	53                   	push   ebx
c000322d:	89 d3                	mov    ebx,edx
c000322f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003232:	0f b7 d1             	movzx  edx,cx
c0003235:	e8 fa eb ff ff       	call   c0001e34 <st_word>
c000323a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000323d:	75 0f                	jne    c000324e <st_clust.isra.1+0x25>
c000323f:	8d 43 14             	lea    eax,[ebx+0x14]
c0003242:	5b                   	pop    ebx
c0003243:	c1 e9 10             	shr    ecx,0x10
c0003246:	89 ca                	mov    edx,ecx
c0003248:	5e                   	pop    esi
c0003249:	e9 e6 eb ff ff       	jmp    c0001e34 <st_word>
c000324e:	5b                   	pop    ebx
c000324f:	5e                   	pop    esi
c0003250:	c3                   	ret    

c0003251 <get_fat.isra.2>:
c0003251:	83 fa 01             	cmp    edx,0x1
c0003254:	b9 01 00 00 00       	mov    ecx,0x1
c0003259:	0f 86 f4 00 00 00    	jbe    c0003353 <get_fat.isra.2+0x102>
c000325f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003262:	0f 83 eb 00 00 00    	jae    c0003353 <get_fat.isra.2+0x102>
c0003268:	55                   	push   ebp
c0003269:	57                   	push   edi
c000326a:	56                   	push   esi
c000326b:	89 c6                	mov    esi,eax
c000326d:	53                   	push   ebx
c000326e:	89 d3                	mov    ebx,edx
c0003270:	83 ec 0c             	sub    esp,0xc
c0003273:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003276:	83 f8 02             	cmp    eax,0x2
c0003279:	74 79                	je     c00032f4 <get_fat.isra.2+0xa3>
c000327b:	83 f8 03             	cmp    eax,0x3
c000327e:	0f 84 97 00 00 00    	je     c000331b <get_fat.isra.2+0xca>
c0003284:	48                   	dec    eax
c0003285:	0f 85 be 00 00 00    	jne    c0003349 <get_fat.isra.2+0xf8>
c000328b:	89 d7                	mov    edi,edx
c000328d:	89 f0                	mov    eax,esi
c000328f:	d1 ef                	shr    edi,1
c0003291:	01 d7                	add    edi,edx
c0003293:	89 fa                	mov    edx,edi
c0003295:	c1 ea 09             	shr    edx,0x9
c0003298:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000329b:	e8 d4 f0 ff ff       	call   c0002374 <move_window>
c00032a0:	85 c0                	test   eax,eax
c00032a2:	74 08                	je     c00032ac <get_fat.isra.2+0x5b>
c00032a4:	83 c9 ff             	or     ecx,0xffffffff
c00032a7:	e9 9d 00 00 00       	jmp    c0003349 <get_fat.isra.2+0xf8>
c00032ac:	8d 6f 01             	lea    ebp,[edi+0x1]
c00032af:	89 f0                	mov    eax,esi
c00032b1:	89 ea                	mov    edx,ebp
c00032b3:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00032b9:	c1 ea 09             	shr    edx,0x9
c00032bc:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00032c1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032c4:	e8 ab f0 ff ff       	call   c0002374 <move_window>
c00032c9:	85 c0                	test   eax,eax
c00032cb:	75 d7                	jne    c00032a4 <get_fat.isra.2+0x53>
c00032cd:	89 f8                	mov    eax,edi
c00032cf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00032d5:	0f b6 f8             	movzx  edi,al
c00032d8:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00032dd:	c1 e0 08             	shl    eax,0x8
c00032e0:	09 f8                	or     eax,edi
c00032e2:	89 c1                	mov    ecx,eax
c00032e4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032ea:	80 e3 01             	and    bl,0x1
c00032ed:	74 5a                	je     c0003349 <get_fat.isra.2+0xf8>
c00032ef:	c1 e8 04             	shr    eax,0x4
c00032f2:	eb 53                	jmp    c0003347 <get_fat.isra.2+0xf6>
c00032f4:	c1 ea 08             	shr    edx,0x8
c00032f7:	89 f0                	mov    eax,esi
c00032f9:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032fc:	e8 73 f0 ff ff       	call   c0002374 <move_window>
c0003301:	85 c0                	test   eax,eax
c0003303:	75 9f                	jne    c00032a4 <get_fat.isra.2+0x53>
c0003305:	01 db                	add    ebx,ebx
c0003307:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c000330d:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0003311:	e8 f9 ea ff ff       	call   c0001e0f <ld_word>
c0003316:	0f b7 c8             	movzx  ecx,ax
c0003319:	eb 2e                	jmp    c0003349 <get_fat.isra.2+0xf8>
c000331b:	c1 ea 07             	shr    edx,0x7
c000331e:	89 f0                	mov    eax,esi
c0003320:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003323:	e8 4c f0 ff ff       	call   c0002374 <move_window>
c0003328:	85 c0                	test   eax,eax
c000332a:	0f 85 74 ff ff ff    	jne    c00032a4 <get_fat.isra.2+0x53>
c0003330:	c1 e3 02             	shl    ebx,0x2
c0003333:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0003339:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000333d:	e8 da ea ff ff       	call   c0001e1c <ld_dword>
c0003342:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003347:	89 c1                	mov    ecx,eax
c0003349:	83 c4 0c             	add    esp,0xc
c000334c:	89 c8                	mov    eax,ecx
c000334e:	5b                   	pop    ebx
c000334f:	5e                   	pop    esi
c0003350:	5f                   	pop    edi
c0003351:	5d                   	pop    ebp
c0003352:	c3                   	ret    
c0003353:	89 c8                	mov    eax,ecx
c0003355:	c3                   	ret    

c0003356 <dir_sdi>:
c0003356:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000335c:	0f 87 b6 00 00 00    	ja     c0003418 <dir_sdi+0xc2>
c0003362:	55                   	push   ebp
c0003363:	57                   	push   edi
c0003364:	56                   	push   esi
c0003365:	53                   	push   ebx
c0003366:	89 d3                	mov    ebx,edx
c0003368:	83 ec 1c             	sub    esp,0x1c
c000336b:	f6 c2 1f             	test   dl,0x1f
c000336e:	74 0a                	je     c000337a <dir_sdi+0x24>
c0003370:	b8 02 00 00 00       	mov    eax,0x2
c0003375:	e9 96 00 00 00       	jmp    c0003410 <dir_sdi+0xba>
c000337a:	89 c6                	mov    esi,eax
c000337c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000337e:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003381:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003384:	85 ff                	test   edi,edi
c0003386:	75 21                	jne    c00033a9 <dir_sdi+0x53>
c0003388:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000338c:	76 07                	jbe    c0003395 <dir_sdi+0x3f>
c000338e:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003391:	85 c0                	test   eax,eax
c0003393:	75 12                	jne    c00033a7 <dir_sdi+0x51>
c0003395:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003399:	89 da                	mov    edx,ebx
c000339b:	c1 ea 05             	shr    edx,0x5
c000339e:	39 c2                	cmp    edx,eax
c00033a0:	73 ce                	jae    c0003370 <dir_sdi+0x1a>
c00033a2:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00033a5:	eb 3c                	jmp    c00033e3 <dir_sdi+0x8d>
c00033a7:	89 c7                	mov    edi,eax
c00033a9:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00033ad:	c1 e1 09             	shl    ecx,0x9
c00033b0:	39 cb                	cmp    ebx,ecx
c00033b2:	72 26                	jb     c00033da <dir_sdi+0x84>
c00033b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00033ba:	89 fa                	mov    edx,edi
c00033bc:	e8 90 fe ff ff       	call   c0003251 <get_fat.isra.2>
c00033c1:	83 f8 ff             	cmp    eax,0xffffffff
c00033c4:	89 c7                	mov    edi,eax
c00033c6:	74 43                	je     c000340b <dir_sdi+0xb5>
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 a3                	jbe    c0003370 <dir_sdi+0x1a>
c00033cd:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00033d0:	76 9e                	jbe    c0003370 <dir_sdi+0x1a>
c00033d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d6:	29 cb                	sub    ebx,ecx
c00033d8:	eb d6                	jmp    c00033b0 <dir_sdi+0x5a>
c00033da:	89 fa                	mov    edx,edi
c00033dc:	89 e8                	mov    eax,ebp
c00033de:	e8 82 ec ff ff       	call   c0002065 <clst2sect>
c00033e3:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033e6:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00033e9:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ec:	85 d2                	test   edx,edx
c00033ee:	74 80                	je     c0003370 <dir_sdi+0x1a>
c00033f0:	89 d8                	mov    eax,ebx
c00033f2:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033f8:	c1 e8 09             	shr    eax,0x9
c00033fb:	01 d0                	add    eax,edx
c00033fd:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003400:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c0003404:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003407:	31 c0                	xor    eax,eax
c0003409:	eb 05                	jmp    c0003410 <dir_sdi+0xba>
c000340b:	b8 01 00 00 00       	mov    eax,0x1
c0003410:	83 c4 1c             	add    esp,0x1c
c0003413:	5b                   	pop    ebx
c0003414:	5e                   	pop    esi
c0003415:	5f                   	pop    edi
c0003416:	5d                   	pop    ebp
c0003417:	c3                   	ret    
c0003418:	b8 02 00 00 00       	mov    eax,0x2
c000341d:	c3                   	ret    

c000341e <create_chain>:
c000341e:	55                   	push   ebp
c000341f:	89 c5                	mov    ebp,eax
c0003421:	57                   	push   edi
c0003422:	89 d7                	mov    edi,edx
c0003424:	56                   	push   esi
c0003425:	53                   	push   ebx
c0003426:	83 ec 1c             	sub    esp,0x1c
c0003429:	85 d2                	test   edx,edx
c000342b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000342d:	75 0e                	jne    c000343d <create_chain+0x1f>
c000342f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003432:	85 c9                	test   ecx,ecx
c0003434:	74 32                	je     c0003468 <create_chain+0x4a>
c0003436:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0003439:	77 32                	ja     c000346d <create_chain+0x4f>
c000343b:	eb 2b                	jmp    c0003468 <create_chain+0x4a>
c000343d:	89 d8                	mov    eax,ebx
c000343f:	e8 0d fe ff ff       	call   c0003251 <get_fat.isra.2>
c0003444:	83 f8 01             	cmp    eax,0x1
c0003447:	77 0a                	ja     c0003453 <create_chain+0x35>
c0003449:	b8 01 00 00 00       	mov    eax,0x1
c000344e:	e9 fd 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003453:	83 f8 ff             	cmp    eax,0xffffffff
c0003456:	0f 84 f1 00 00 00    	je     c000354d <create_chain+0x12f>
c000345c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000345f:	89 f9                	mov    ecx,edi
c0003461:	76 0a                	jbe    c000346d <create_chain+0x4f>
c0003463:	e9 e8 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003468:	b9 01 00 00 00       	mov    ecx,0x1
c000346d:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003471:	75 07                	jne    c000347a <create_chain+0x5c>
c0003473:	31 c0                	xor    eax,eax
c0003475:	e9 d6 00 00 00       	jmp    c0003550 <create_chain+0x132>
c000347a:	39 f9                	cmp    ecx,edi
c000347c:	75 49                	jne    c00034c7 <create_chain+0xa9>
c000347e:	8d 71 01             	lea    esi,[ecx+0x1]
c0003481:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003484:	77 05                	ja     c000348b <create_chain+0x6d>
c0003486:	be 02 00 00 00       	mov    esi,0x2
c000348b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000348f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003492:	89 f2                	mov    edx,esi
c0003494:	e8 b8 fd ff ff       	call   c0003251 <get_fat.isra.2>
c0003499:	83 f8 01             	cmp    eax,0x1
c000349c:	0f 84 ae 00 00 00    	je     c0003550 <create_chain+0x132>
c00034a2:	83 f8 ff             	cmp    eax,0xffffffff
c00034a5:	0f 84 a5 00 00 00    	je     c0003550 <create_chain+0x132>
c00034ab:	85 c0                	test   eax,eax
c00034ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034b1:	74 10                	je     c00034c3 <create_chain+0xa5>
c00034b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00034b6:	83 f8 01             	cmp    eax,0x1
c00034b9:	76 0c                	jbe    c00034c7 <create_chain+0xa9>
c00034bb:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c00034be:	0f 47 c8             	cmova  ecx,eax
c00034c1:	eb 04                	jmp    c00034c7 <create_chain+0xa9>
c00034c3:	85 f6                	test   esi,esi
c00034c5:	75 3b                	jne    c0003502 <create_chain+0xe4>
c00034c7:	89 ce                	mov    esi,ecx
c00034c9:	46                   	inc    esi
c00034ca:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00034cd:	77 0a                	ja     c00034d9 <create_chain+0xbb>
c00034cf:	83 f9 01             	cmp    ecx,0x1
c00034d2:	76 9f                	jbe    c0003473 <create_chain+0x55>
c00034d4:	be 02 00 00 00       	mov    esi,0x2
c00034d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00034dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034e0:	89 f2                	mov    edx,esi
c00034e2:	e8 6a fd ff ff       	call   c0003251 <get_fat.isra.2>
c00034e7:	85 c0                	test   eax,eax
c00034e9:	74 17                	je     c0003502 <create_chain+0xe4>
c00034eb:	83 f8 01             	cmp    eax,0x1
c00034ee:	74 60                	je     c0003550 <create_chain+0x132>
c00034f0:	83 f8 ff             	cmp    eax,0xffffffff
c00034f3:	74 5b                	je     c0003550 <create_chain+0x132>
c00034f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034f9:	39 ce                	cmp    esi,ecx
c00034fb:	75 cc                	jne    c00034c9 <create_chain+0xab>
c00034fd:	e9 71 ff ff ff       	jmp    c0003473 <create_chain+0x55>
c0003502:	83 c9 ff             	or     ecx,0xffffffff
c0003505:	89 f2                	mov    edx,esi
c0003507:	89 d8                	mov    eax,ebx
c0003509:	e8 c0 f2 ff ff       	call   c00027ce <put_fat>
c000350e:	85 c0                	test   eax,eax
c0003510:	75 0f                	jne    c0003521 <create_chain+0x103>
c0003512:	85 ff                	test   edi,edi
c0003514:	74 0b                	je     c0003521 <create_chain+0x103>
c0003516:	89 f1                	mov    ecx,esi
c0003518:	89 fa                	mov    edx,edi
c000351a:	89 d8                	mov    eax,ebx
c000351c:	e8 ad f2 ff ff       	call   c00027ce <put_fat>
c0003521:	85 c0                	test   eax,eax
c0003523:	75 21                	jne    c0003546 <create_chain+0x128>
c0003525:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003528:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000352b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000352e:	8d 57 fe             	lea    edx,[edi-0x2]
c0003531:	39 d0                	cmp    eax,edx
c0003533:	77 04                	ja     c0003539 <create_chain+0x11b>
c0003535:	48                   	dec    eax
c0003536:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003539:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000353c:	83 c8 01             	or     eax,0x1
c000353f:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003542:	89 f0                	mov    eax,esi
c0003544:	eb 0a                	jmp    c0003550 <create_chain+0x132>
c0003546:	48                   	dec    eax
c0003547:	0f 85 fc fe ff ff    	jne    c0003449 <create_chain+0x2b>
c000354d:	83 c8 ff             	or     eax,0xffffffff
c0003550:	83 c4 1c             	add    esp,0x1c
c0003553:	5b                   	pop    ebx
c0003554:	5e                   	pop    esi
c0003555:	5f                   	pop    edi
c0003556:	5d                   	pop    ebp
c0003557:	c3                   	ret    

c0003558 <remove_chain>:
c0003558:	55                   	push   ebp
c0003559:	57                   	push   edi
c000355a:	56                   	push   esi
c000355b:	89 d6                	mov    esi,edx
c000355d:	53                   	push   ebx
c000355e:	83 ec 0c             	sub    esp,0xc
c0003561:	83 fa 01             	cmp    edx,0x1
c0003564:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003566:	76 6a                	jbe    c00035d2 <remove_chain+0x7a>
c0003568:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000356b:	76 65                	jbe    c00035d2 <remove_chain+0x7a>
c000356d:	85 c9                	test   ecx,ecx
c000356f:	89 c5                	mov    ebp,eax
c0003571:	89 ca                	mov    edx,ecx
c0003573:	74 0e                	je     c0003583 <remove_chain+0x2b>
c0003575:	83 c9 ff             	or     ecx,0xffffffff
c0003578:	89 d8                	mov    eax,ebx
c000357a:	e8 4f f2 ff ff       	call   c00027ce <put_fat>
c000357f:	85 c0                	test   eax,eax
c0003581:	75 5b                	jne    c00035de <remove_chain+0x86>
c0003583:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003586:	89 f2                	mov    edx,esi
c0003588:	e8 c4 fc ff ff       	call   c0003251 <get_fat.isra.2>
c000358d:	85 c0                	test   eax,eax
c000358f:	89 c7                	mov    edi,eax
c0003591:	75 04                	jne    c0003597 <remove_chain+0x3f>
c0003593:	31 c0                	xor    eax,eax
c0003595:	eb 47                	jmp    c00035de <remove_chain+0x86>
c0003597:	83 f8 01             	cmp    eax,0x1
c000359a:	74 36                	je     c00035d2 <remove_chain+0x7a>
c000359c:	83 f8 ff             	cmp    eax,0xffffffff
c000359f:	74 38                	je     c00035d9 <remove_chain+0x81>
c00035a1:	31 c9                	xor    ecx,ecx
c00035a3:	89 f2                	mov    edx,esi
c00035a5:	89 d8                	mov    eax,ebx
c00035a7:	e8 22 f2 ff ff       	call   c00027ce <put_fat>
c00035ac:	85 c0                	test   eax,eax
c00035ae:	75 2e                	jne    c00035de <remove_chain+0x86>
c00035b0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00035b3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00035b6:	8d 4a fe             	lea    ecx,[edx-0x2]
c00035b9:	39 c8                	cmp    eax,ecx
c00035bb:	73 0d                	jae    c00035ca <remove_chain+0x72>
c00035bd:	40                   	inc    eax
c00035be:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00035c1:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00035c4:	83 c8 01             	or     eax,0x1
c00035c7:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00035ca:	39 fa                	cmp    edx,edi
c00035cc:	89 fe                	mov    esi,edi
c00035ce:	77 b3                	ja     c0003583 <remove_chain+0x2b>
c00035d0:	eb c1                	jmp    c0003593 <remove_chain+0x3b>
c00035d2:	b8 02 00 00 00       	mov    eax,0x2
c00035d7:	eb 05                	jmp    c00035de <remove_chain+0x86>
c00035d9:	b8 01 00 00 00       	mov    eax,0x1
c00035de:	83 c4 0c             	add    esp,0xc
c00035e1:	5b                   	pop    ebx
c00035e2:	5e                   	pop    esi
c00035e3:	5f                   	pop    edi
c00035e4:	5d                   	pop    ebp
c00035e5:	c3                   	ret    

c00035e6 <dir_next>:
c00035e6:	55                   	push   ebp
c00035e7:	57                   	push   edi
c00035e8:	56                   	push   esi
c00035e9:	53                   	push   ebx
c00035ea:	83 ec 1c             	sub    esp,0x1c
c00035ed:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035f0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035f2:	83 c7 20             	add    edi,0x20
c00035f5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035fb:	76 07                	jbe    c0003604 <dir_next+0x1e>
c00035fd:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003604:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c0003607:	b9 04 00 00 00       	mov    ecx,0x4
c000360c:	85 f6                	test   esi,esi
c000360e:	0f 84 cd 00 00 00    	je     c00036e1 <dir_next+0xfb>
c0003614:	89 c3                	mov    ebx,eax
c0003616:	89 f8                	mov    eax,edi
c0003618:	25 ff 01 00 00       	and    eax,0x1ff
c000361d:	89 d1                	mov    ecx,edx
c000361f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003623:	0f 85 a8 00 00 00    	jne    c00036d1 <dir_next+0xeb>
c0003629:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000362c:	46                   	inc    esi
c000362d:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003630:	85 d2                	test   edx,edx
c0003632:	75 22                	jne    c0003656 <dir_next+0x70>
c0003634:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003638:	89 fa                	mov    edx,edi
c000363a:	c1 ea 05             	shr    edx,0x5
c000363d:	39 c2                	cmp    edx,eax
c000363f:	0f 82 8c 00 00 00    	jb     c00036d1 <dir_next+0xeb>
c0003645:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000364c:	b9 04 00 00 00       	mov    ecx,0x4
c0003651:	e9 8b 00 00 00       	jmp    c00036e1 <dir_next+0xfb>
c0003656:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000365a:	89 fe                	mov    esi,edi
c000365c:	c1 ee 09             	shr    esi,0x9
c000365f:	48                   	dec    eax
c0003660:	85 f0                	test   eax,esi
c0003662:	75 6d                	jne    c00036d1 <dir_next+0xeb>
c0003664:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003668:	89 e8                	mov    eax,ebp
c000366a:	e8 e2 fb ff ff       	call   c0003251 <get_fat.isra.2>
c000366f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003673:	83 f8 01             	cmp    eax,0x1
c0003676:	89 c6                	mov    esi,eax
c0003678:	77 07                	ja     c0003681 <dir_next+0x9b>
c000367a:	b9 02 00 00 00       	mov    ecx,0x2
c000367f:	eb 60                	jmp    c00036e1 <dir_next+0xfb>
c0003681:	83 f8 ff             	cmp    eax,0xffffffff
c0003684:	75 07                	jne    c000368d <dir_next+0xa7>
c0003686:	b9 01 00 00 00       	mov    ecx,0x1
c000368b:	eb 54                	jmp    c00036e1 <dir_next+0xfb>
c000368d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003690:	77 30                	ja     c00036c2 <dir_next+0xdc>
c0003692:	85 c9                	test   ecx,ecx
c0003694:	74 af                	je     c0003645 <dir_next+0x5f>
c0003696:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003699:	89 d8                	mov    eax,ebx
c000369b:	e8 7e fd ff ff       	call   c000341e <create_chain>
c00036a0:	b9 07 00 00 00       	mov    ecx,0x7
c00036a5:	85 c0                	test   eax,eax
c00036a7:	89 c6                	mov    esi,eax
c00036a9:	74 36                	je     c00036e1 <dir_next+0xfb>
c00036ab:	83 f8 01             	cmp    eax,0x1
c00036ae:	74 ca                	je     c000367a <dir_next+0x94>
c00036b0:	83 f8 ff             	cmp    eax,0xffffffff
c00036b3:	74 d1                	je     c0003686 <dir_next+0xa0>
c00036b5:	89 c2                	mov    edx,eax
c00036b7:	89 e8                	mov    eax,ebp
c00036b9:	e8 67 f2 ff ff       	call   c0002925 <dir_clear>
c00036be:	85 c0                	test   eax,eax
c00036c0:	75 c4                	jne    c0003686 <dir_next+0xa0>
c00036c2:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00036c5:	89 f2                	mov    edx,esi
c00036c7:	89 e8                	mov    eax,ebp
c00036c9:	e8 97 e9 ff ff       	call   c0002065 <clst2sect>
c00036ce:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00036d1:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00036d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00036d8:	31 c9                	xor    ecx,ecx
c00036da:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036de:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036e1:	83 c4 1c             	add    esp,0x1c
c00036e4:	89 c8                	mov    eax,ecx
c00036e6:	5b                   	pop    ebx
c00036e7:	5e                   	pop    esi
c00036e8:	5f                   	pop    edi
c00036e9:	5d                   	pop    ebp
c00036ea:	c3                   	ret    

c00036eb <dir_alloc>:
c00036eb:	55                   	push   ebp
c00036ec:	89 c5                	mov    ebp,eax
c00036ee:	57                   	push   edi
c00036ef:	89 d7                	mov    edi,edx
c00036f1:	56                   	push   esi
c00036f2:	31 d2                	xor    edx,edx
c00036f4:	53                   	push   ebx
c00036f5:	83 ec 0c             	sub    esp,0xc
c00036f8:	8b 30                	mov    esi,DWORD PTR [eax]
c00036fa:	e8 57 fc ff ff       	call   c0003356 <dir_sdi>
c00036ff:	85 c0                	test   eax,eax
c0003701:	75 3b                	jne    c000373e <dir_alloc+0x53>
c0003703:	31 db                	xor    ebx,ebx
c0003705:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003708:	89 f0                	mov    eax,esi
c000370a:	e8 65 ec ff ff       	call   c0002374 <move_window>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 2b                	jne    c000373e <dir_alloc+0x53>
c0003713:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003716:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003719:	81 fa e5 00 00 00    	cmp    edx,0xe5
c000371f:	74 04                	je     c0003725 <dir_alloc+0x3a>
c0003721:	85 d2                	test   edx,edx
c0003723:	75 07                	jne    c000372c <dir_alloc+0x41>
c0003725:	43                   	inc    ebx
c0003726:	39 fb                	cmp    ebx,edi
c0003728:	75 04                	jne    c000372e <dir_alloc+0x43>
c000372a:	eb 1c                	jmp    c0003748 <dir_alloc+0x5d>
c000372c:	31 db                	xor    ebx,ebx
c000372e:	ba 01 00 00 00       	mov    edx,0x1
c0003733:	89 e8                	mov    eax,ebp
c0003735:	e8 ac fe ff ff       	call   c00035e6 <dir_next>
c000373a:	85 c0                	test   eax,eax
c000373c:	74 c7                	je     c0003705 <dir_alloc+0x1a>
c000373e:	83 f8 04             	cmp    eax,0x4
c0003741:	75 05                	jne    c0003748 <dir_alloc+0x5d>
c0003743:	b8 07 00 00 00       	mov    eax,0x7
c0003748:	83 c4 0c             	add    esp,0xc
c000374b:	5b                   	pop    ebx
c000374c:	5e                   	pop    esi
c000374d:	5f                   	pop    edi
c000374e:	5d                   	pop    ebp
c000374f:	c3                   	ret    

c0003750 <dir_read>:
c0003750:	55                   	push   ebp
c0003751:	57                   	push   edi
c0003752:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003757:	56                   	push   esi
c0003758:	be 04 00 00 00       	mov    esi,0x4
c000375d:	53                   	push   ebx
c000375e:	89 c3                	mov    ebx,eax
c0003760:	83 ec 1c             	sub    esp,0x1c
c0003763:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003767:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003769:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000376e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003771:	85 d2                	test   edx,edx
c0003773:	0f 84 e3 00 00 00    	je     c000385c <dir_read+0x10c>
c0003779:	89 e8                	mov    eax,ebp
c000377b:	e8 f4 eb ff ff       	call   c0002374 <move_window>
c0003780:	85 c0                	test   eax,eax
c0003782:	89 c6                	mov    esi,eax
c0003784:	0f 85 dd 00 00 00    	jne    c0003867 <dir_read+0x117>
c000378a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000378d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003790:	88 04 24             	mov    BYTE PTR [esp],al
c0003793:	85 c0                	test   eax,eax
c0003795:	0f 84 c7 00 00 00    	je     c0003862 <dir_read+0x112>
c000379b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000379e:	83 e1 3f             	and    ecx,0x3f
c00037a1:	3d e5 00 00 00       	cmp    eax,0xe5
c00037a6:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c00037a9:	0f 84 93 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037af:	83 f8 2e             	cmp    eax,0x2e
c00037b2:	0f 84 8a 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037b8:	0f b6 c9             	movzx  ecx,cl
c00037bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00037bf:	83 e1 df             	and    ecx,0xffffffdf
c00037c2:	83 f9 08             	cmp    ecx,0x8
c00037c5:	0f 94 c1             	sete   cl
c00037c8:	0f b6 c9             	movzx  ecx,cl
c00037cb:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00037cf:	75 71                	jne    c0003842 <dir_read+0xf2>
c00037d1:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00037d6:	75 4a                	jne    c0003822 <dir_read+0xd2>
c00037d8:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037dc:	74 16                	je     c00037f4 <dir_read+0xa4>
c00037de:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037e1:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037e8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037ef:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037f2:	eb 0e                	jmp    c0003802 <dir_read+0xb2>
c00037f4:	89 f9                	mov    ecx,edi
c00037f6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037fb:	0f b6 c9             	movzx  ecx,cl
c00037fe:	39 c1                	cmp    ecx,eax
c0003800:	75 45                	jne    c0003847 <dir_read+0xf7>
c0003802:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003806:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380b:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c000380e:	75 37                	jne    c0003847 <dir_read+0xf7>
c0003810:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0003813:	e8 6a e8 ff ff       	call   c0002082 <pick_lfn>
c0003818:	85 c0                	test   eax,eax
c000381a:	74 2b                	je     c0003847 <dir_read+0xf7>
c000381c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000381f:	4f                   	dec    edi
c0003820:	eb 25                	jmp    c0003847 <dir_read+0xf7>
c0003822:	89 f8                	mov    eax,edi
c0003824:	84 c0                	test   al,al
c0003826:	75 11                	jne    c0003839 <dir_read+0xe9>
c0003828:	89 d0                	mov    eax,edx
c000382a:	e8 30 ea ff ff       	call   c000225f <sum_sfn>
c000382f:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003833:	75 04                	jne    c0003839 <dir_read+0xe9>
c0003835:	31 f6                	xor    esi,esi
c0003837:	eb 35                	jmp    c000386e <dir_read+0x11e>
c0003839:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003840:	eb 2c                	jmp    c000386e <dir_read+0x11e>
c0003842:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003847:	31 d2                	xor    edx,edx
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 96 fd ff ff       	call   c00035e6 <dir_next>
c0003850:	85 c0                	test   eax,eax
c0003852:	89 c6                	mov    esi,eax
c0003854:	0f 84 14 ff ff ff    	je     c000376e <dir_read+0x1e>
c000385a:	eb 0b                	jmp    c0003867 <dir_read+0x117>
c000385c:	85 f6                	test   esi,esi
c000385e:	74 d5                	je     c0003835 <dir_read+0xe5>
c0003860:	eb 05                	jmp    c0003867 <dir_read+0x117>
c0003862:	be 04 00 00 00       	mov    esi,0x4
c0003867:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000386e:	83 c4 1c             	add    esp,0x1c
c0003871:	89 f0                	mov    eax,esi
c0003873:	5b                   	pop    ebx
c0003874:	5e                   	pop    esi
c0003875:	5f                   	pop    edi
c0003876:	5d                   	pop    ebp
c0003877:	c3                   	ret    

c0003878 <dir_remove>:
c0003878:	57                   	push   edi
c0003879:	56                   	push   esi
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003880:	8b 30                	mov    esi,DWORD PTR [eax]
c0003882:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003885:	83 fa ff             	cmp    edx,0xffffffff
c0003888:	74 09                	je     c0003893 <dir_remove+0x1b>
c000388a:	e8 c7 fa ff ff       	call   c0003356 <dir_sdi>
c000388f:	85 c0                	test   eax,eax
c0003891:	75 34                	jne    c00038c7 <dir_remove+0x4f>
c0003893:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003896:	89 f0                	mov    eax,esi
c0003898:	e8 d7 ea ff ff       	call   c0002374 <move_window>
c000389d:	85 c0                	test   eax,eax
c000389f:	75 1c                	jne    c00038bd <dir_remove+0x45>
c00038a1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00038a4:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00038a7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00038ab:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c00038ae:	73 17                	jae    c00038c7 <dir_remove+0x4f>
c00038b0:	31 d2                	xor    edx,edx
c00038b2:	89 d8                	mov    eax,ebx
c00038b4:	e8 2d fd ff ff       	call   c00035e6 <dir_next>
c00038b9:	85 c0                	test   eax,eax
c00038bb:	74 d6                	je     c0003893 <dir_remove+0x1b>
c00038bd:	83 f8 04             	cmp    eax,0x4
c00038c0:	75 05                	jne    c00038c7 <dir_remove+0x4f>
c00038c2:	b8 02 00 00 00       	mov    eax,0x2
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	c3                   	ret    

c00038cb <dir_find>:
c00038cb:	55                   	push   ebp
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	57                   	push   edi
c00038cf:	56                   	push   esi
c00038d0:	53                   	push   ebx
c00038d1:	89 c3                	mov    ebx,eax
c00038d3:	83 ec 1c             	sub    esp,0x1c
c00038d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00038d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038dc:	89 d8                	mov    eax,ebx
c00038de:	e8 73 fa ff ff       	call   c0003356 <dir_sdi>
c00038e3:	85 c0                	test   eax,eax
c00038e5:	89 c6                	mov    esi,eax
c00038e7:	0f 85 22 01 00 00    	jne    c0003a0f <dir_find+0x144>
c00038ed:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038f4:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00038f9:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038fe:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003905:	e8 6a ea ff ff       	call   c0002374 <move_window>
c000390a:	85 c0                	test   eax,eax
c000390c:	89 c6                	mov    esi,eax
c000390e:	0f 85 fb 00 00 00    	jne    c0003a0f <dir_find+0x144>
c0003914:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003917:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c000391a:	85 d2                	test   edx,edx
c000391c:	89 d1                	mov    ecx,edx
c000391e:	0f 84 e6 00 00 00    	je     c0003a0a <dir_find+0x13f>
c0003924:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003927:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000392b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000392f:	83 e0 3f             	and    eax,0x3f
c0003932:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003938:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000393b:	0f 84 a8 00 00 00    	je     c00039e9 <dir_find+0x11e>
c0003941:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003946:	0f b6 c0             	movzx  eax,al
c0003949:	74 0b                	je     c0003956 <dir_find+0x8b>
c000394b:	83 f8 0f             	cmp    eax,0xf
c000394e:	0f 85 95 00 00 00    	jne    c00039e9 <dir_find+0x11e>
c0003954:	eb 05                	jmp    c000395b <dir_find+0x90>
c0003956:	83 f8 0f             	cmp    eax,0xf
c0003959:	75 62                	jne    c00039bd <dir_find+0xf2>
c000395b:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c000395f:	0f 85 90 00 00 00    	jne    c00039f5 <dir_find+0x12a>
c0003965:	f6 c1 40             	test   cl,0x40
c0003968:	74 15                	je     c000397f <dir_find+0xb4>
c000396a:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c000396d:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003973:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003977:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000397a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000397d:	eb 11                	jmp    c0003990 <dir_find+0xc5>
c000397f:	89 e8                	mov    eax,ebp
c0003981:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003986:	0f b6 d0             	movzx  edx,al
c0003989:	0f b6 c1             	movzx  eax,cl
c000398c:	39 c2                	cmp    edx,eax
c000398e:	75 65                	jne    c00039f5 <dir_find+0x12a>
c0003990:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003994:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003999:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c000399c:	75 57                	jne    c00039f5 <dir_find+0x12a>
c000399e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039a6:	89 fa                	mov    edx,edi
c00039a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039ab:	e8 2c f3 ff ff       	call   c0002cdc <cmp_lfn>
c00039b0:	85 c0                	test   eax,eax
c00039b2:	74 41                	je     c00039f5 <dir_find+0x12a>
c00039b4:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039b8:	8d 69 ff             	lea    ebp,[ecx-0x1]
c00039bb:	eb 38                	jmp    c00039f5 <dir_find+0x12a>
c00039bd:	89 e8                	mov    eax,ebp
c00039bf:	84 c0                	test   al,al
c00039c1:	75 0d                	jne    c00039d0 <dir_find+0x105>
c00039c3:	89 f8                	mov    eax,edi
c00039c5:	e8 95 e8 ff ff       	call   c000225f <sum_sfn>
c00039ca:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039ce:	74 3f                	je     c0003a0f <dir_find+0x144>
c00039d0:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c00039d4:	75 13                	jne    c00039e9 <dir_find+0x11e>
c00039d6:	8d 53 20             	lea    edx,[ebx+0x20]
c00039d9:	b9 0b 00 00 00       	mov    ecx,0xb
c00039de:	89 f8                	mov    eax,edi
c00039e0:	e8 75 e4 ff ff       	call   c0001e5a <mem_cmp>
c00039e5:	85 c0                	test   eax,eax
c00039e7:	74 26                	je     c0003a0f <dir_find+0x144>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00039f5:	31 d2                	xor    edx,edx
c00039f7:	89 d8                	mov    eax,ebx
c00039f9:	e8 e8 fb ff ff       	call   c00035e6 <dir_next>
c00039fe:	85 c0                	test   eax,eax
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	0f 84 f6 fe ff ff    	je     c00038fe <dir_find+0x33>
c0003a08:	eb 05                	jmp    c0003a0f <dir_find+0x144>
c0003a0a:	be 04 00 00 00       	mov    esi,0x4
c0003a0f:	83 c4 1c             	add    esp,0x1c
c0003a12:	89 f0                	mov    eax,esi
c0003a14:	5b                   	pop    ebx
c0003a15:	5e                   	pop    esi
c0003a16:	5f                   	pop    edi
c0003a17:	5d                   	pop    ebp
c0003a18:	c3                   	ret    

c0003a19 <follow_path>:
c0003a19:	56                   	push   esi
c0003a1a:	53                   	push   ebx
c0003a1b:	89 c3                	mov    ebx,eax
c0003a1d:	83 ec 14             	sub    esp,0x14
c0003a20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a24:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a2a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003a2d:	83 fa 2f             	cmp    edx,0x2f
c0003a30:	75 07                	jne    c0003a39 <follow_path+0x20>
c0003a32:	40                   	inc    eax
c0003a33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a37:	eb ed                	jmp    c0003a26 <follow_path+0xd>
c0003a39:	83 fa 5c             	cmp    edx,0x5c
c0003a3c:	74 f4                	je     c0003a32 <follow_path+0x19>
c0003a3e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a45:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a48:	77 3e                	ja     c0003a88 <follow_path+0x6f>
c0003a4a:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a4e:	31 d2                	xor    edx,edx
c0003a50:	89 d8                	mov    eax,ebx
c0003a52:	e8 ff f8 ff ff       	call   c0003356 <dir_sdi>
c0003a57:	eb 57                	jmp    c0003ab0 <follow_path+0x97>
c0003a59:	89 d8                	mov    eax,ebx
c0003a5b:	e8 6b fe ff ff       	call   c00038cb <dir_find>
c0003a60:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a63:	85 c0                	test   eax,eax
c0003a65:	75 32                	jne    c0003a99 <follow_path+0x80>
c0003a67:	80 e2 04             	and    dl,0x4
c0003a6a:	75 44                	jne    c0003ab0 <follow_path+0x97>
c0003a6c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a70:	74 39                	je     c0003aab <follow_path+0x92>
c0003a72:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a75:	25 ff 01 00 00       	and    eax,0x1ff
c0003a7a:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a7e:	8a 06                	mov    al,BYTE PTR [esi]
c0003a80:	e8 7b f7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003a85:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a88:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 8e ef ff ff       	call   c0002a21 <create_name>
c0003a93:	85 c0                	test   eax,eax
c0003a95:	74 c2                	je     c0003a59 <follow_path+0x40>
c0003a97:	eb 17                	jmp    c0003ab0 <follow_path+0x97>
c0003a99:	83 f8 04             	cmp    eax,0x4
c0003a9c:	75 12                	jne    c0003ab0 <follow_path+0x97>
c0003a9e:	80 e2 04             	and    dl,0x4
c0003aa1:	ba 05 00 00 00       	mov    edx,0x5
c0003aa6:	0f 44 c2             	cmove  eax,edx
c0003aa9:	eb 05                	jmp    c0003ab0 <follow_path+0x97>
c0003aab:	b8 05 00 00 00       	mov    eax,0x5
c0003ab0:	83 c4 14             	add    esp,0x14
c0003ab3:	5b                   	pop    ebx
c0003ab4:	5e                   	pop    esi
c0003ab5:	c3                   	ret    

c0003ab6 <dir_register>:
c0003ab6:	55                   	push   ebp
c0003ab7:	57                   	push   edi
c0003ab8:	56                   	push   esi
c0003ab9:	be 06 00 00 00       	mov    esi,0x6
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 2c             	sub    esp,0x2c
c0003ac2:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ac5:	80 e2 a0             	and    dl,0xa0
c0003ac8:	0f 85 66 01 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ace:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003ad6:	8b 38                	mov    edi,DWORD PTR [eax]
c0003ad8:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003adb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003adf:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003ae4:	74 06                	je     c0003aec <dir_register+0x36>
c0003ae6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aea:	eb ef                	jmp    c0003adb <dir_register+0x25>
c0003aec:	89 c3                	mov    ebx,eax
c0003aee:	b9 0c 00 00 00       	mov    ecx,0xc
c0003af3:	8d 40 20             	lea    eax,[eax+0x20]
c0003af6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003afa:	89 c2                	mov    edx,eax
c0003afc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003b00:	e8 36 e3 ff ff       	call   c0001e3b <mem_cpy>
c0003b05:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003b0a:	74 48                	je     c0003b54 <dir_register+0x9e>
c0003b0c:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003b10:	bd 01 00 00 00       	mov    ebp,0x1
c0003b15:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003b18:	55                   	push   ebp
c0003b19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003b21:	e8 77 e6 ff ff       	call   c000219d <gen_numname>
c0003b26:	58                   	pop    eax
c0003b27:	89 d8                	mov    eax,ebx
c0003b29:	e8 9d fd ff ff       	call   c00038cb <dir_find>
c0003b2e:	85 c0                	test   eax,eax
c0003b30:	89 c6                	mov    esi,eax
c0003b32:	75 10                	jne    c0003b44 <dir_register+0x8e>
c0003b34:	45                   	inc    ebp
c0003b35:	83 fd 64             	cmp    ebp,0x64
c0003b38:	75 db                	jne    c0003b15 <dir_register+0x5f>
c0003b3a:	be 07 00 00 00       	mov    esi,0x7
c0003b3f:	e9 f0 00 00 00       	jmp    c0003c34 <dir_register+0x17e>
c0003b44:	83 f8 04             	cmp    eax,0x4
c0003b47:	0f 85 e7 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b4d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b51:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b54:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b59:	bd 01 00 00 00       	mov    ebp,0x1
c0003b5e:	74 13                	je     c0003b73 <dir_register+0xbd>
c0003b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b64:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b69:	31 d2                	xor    edx,edx
c0003b6b:	83 c0 0c             	add    eax,0xc
c0003b6e:	f7 f1                	div    ecx
c0003b70:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b73:	89 ea                	mov    edx,ebp
c0003b75:	89 d8                	mov    eax,ebx
c0003b77:	e8 6f fb ff ff       	call   c00036eb <dir_alloc>
c0003b7c:	85 c0                	test   eax,eax
c0003b7e:	89 c6                	mov    esi,eax
c0003b80:	0f 85 ae 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b86:	4d                   	dec    ebp
c0003b87:	74 6b                	je     c0003bf4 <dir_register+0x13e>
c0003b89:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b8c:	89 e8                	mov    eax,ebp
c0003b8e:	c1 e0 05             	shl    eax,0x5
c0003b91:	29 c2                	sub    edx,eax
c0003b93:	89 d8                	mov    eax,ebx
c0003b95:	e8 bc f7 ff ff       	call   c0003356 <dir_sdi>
c0003b9a:	85 c0                	test   eax,eax
c0003b9c:	89 c6                	mov    esi,eax
c0003b9e:	0f 85 90 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ba8:	e8 b2 e6 ff ff       	call   c000225f <sum_sfn>
c0003bad:	0f b6 c0             	movzx  eax,al
c0003bb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bb4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb7:	89 f8                	mov    eax,edi
c0003bb9:	e8 b6 e7 ff ff       	call   c0002374 <move_window>
c0003bbe:	85 c0                	test   eax,eax
c0003bc0:	89 c6                	mov    esi,eax
c0003bc2:	75 70                	jne    c0003c34 <dir_register+0x17e>
c0003bc4:	83 ec 0c             	sub    esp,0xc
c0003bc7:	89 e8                	mov    eax,ebp
c0003bc9:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003bcc:	0f b6 c8             	movzx  ecx,al
c0003bcf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003bd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003bd6:	e8 27 e5 ff ff       	call   c0002102 <put_lfn>
c0003bdb:	31 d2                	xor    edx,edx
c0003bdd:	89 d8                	mov    eax,ebx
c0003bdf:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003be3:	e8 fe f9 ff ff       	call   c00035e6 <dir_next>
c0003be8:	83 c4 10             	add    esp,0x10
c0003beb:	85 c0                	test   eax,eax
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	75 43                	jne    c0003c34 <dir_register+0x17e>
c0003bf1:	4d                   	dec    ebp
c0003bf2:	75 c0                	jne    c0003bb4 <dir_register+0xfe>
c0003bf4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bf7:	89 f8                	mov    eax,edi
c0003bf9:	e8 76 e7 ff ff       	call   c0002374 <move_window>
c0003bfe:	85 c0                	test   eax,eax
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	75 30                	jne    c0003c34 <dir_register+0x17e>
c0003c04:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c07:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0c:	31 d2                	xor    edx,edx
c0003c0e:	e8 3d e2 ff ff       	call   c0001e50 <mem_set>
c0003c13:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0003c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003c1f:	e8 17 e2 ff ff       	call   c0001e3b <mem_cpy>
c0003c24:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003c27:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003c2a:	83 e0 18             	and    eax,0x18
c0003c2d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003c30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003c34:	83 c4 2c             	add    esp,0x2c
c0003c37:	89 f0                	mov    eax,esi
c0003c39:	5b                   	pop    ebx
c0003c3a:	5e                   	pop    esi
c0003c3b:	5f                   	pop    edi
c0003c3c:	5d                   	pop    ebp
c0003c3d:	c3                   	ret    

c0003c3e <f_mount>:
c0003c3e:	53                   	push   ebx
c0003c3f:	83 ec 18             	sub    esp,0x18
c0003c42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c46:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c4e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c52:	e8 28 e6 ff ff       	call   c000227f <get_ldnumber>
c0003c57:	89 c2                	mov    edx,eax
c0003c59:	b8 0b 00 00 00       	mov    eax,0xb
c0003c5e:	85 d2                	test   edx,edx
c0003c60:	78 39                	js     c0003c9b <f_mount+0x5d>
c0003c62:	8b 04 95 a0 54 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdab60]
c0003c69:	85 c0                	test   eax,eax
c0003c6b:	74 03                	je     c0003c70 <f_mount+0x32>
c0003c6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 03                	je     c0003c7b <f_mount+0x3d>
c0003c78:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c7f:	89 04 95 a0 54 02 c0 	mov    DWORD PTR [edx*4-0x3ffdab60],eax
c0003c86:	31 c0                	xor    eax,eax
c0003c88:	84 db                	test   bl,bl
c0003c8a:	74 0f                	je     c0003c9b <f_mount+0x5d>
c0003c8c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c90:	31 c9                	xor    ecx,ecx
c0003c92:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c96:	e8 36 e8 ff ff       	call   c00024d1 <mount_volume>
c0003c9b:	83 c4 18             	add    esp,0x18
c0003c9e:	5b                   	pop    ebx
c0003c9f:	c3                   	ret    

c0003ca0 <f_open>:
c0003ca0:	55                   	push   ebp
c0003ca1:	b8 09 00 00 00       	mov    eax,0x9
c0003ca6:	57                   	push   edi
c0003ca7:	56                   	push   esi
c0003ca8:	53                   	push   ebx
c0003ca9:	83 ec 5c             	sub    esp,0x5c
c0003cac:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003cb0:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003cb4:	85 db                	test   ebx,ebx
c0003cb6:	0f 84 9f 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003cbc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003cc0:	89 fd                	mov    ebp,edi
c0003cc2:	83 e5 3f             	and    ebp,0x3f
c0003cc5:	89 e8                	mov    eax,ebp
c0003cc7:	89 ee                	mov    esi,ebp
c0003cc9:	0f b6 c8             	movzx  ecx,al
c0003ccc:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003cd0:	e8 fc e7 ff ff       	call   c00024d1 <mount_volume>
c0003cd5:	85 c0                	test   eax,eax
c0003cd7:	0f 85 78 02 00 00    	jne    c0003f55 <f_open+0x2b5>
c0003cdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ce1:	83 ec 0c             	sub    esp,0xc
c0003ce4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ce8:	68 00 02 00 00       	push   0x200
c0003ced:	e8 62 1f 00 00       	call   c0005c54 <ff_memalloc>
c0003cf2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cf6:	83 c4 10             	add    esp,0x10
c0003cf9:	b8 11 00 00 00       	mov    eax,0x11
c0003cfe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003d03:	0f 84 52 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003d09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003d11:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003d15:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003d18:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d1c:	e8 f8 fc ff ff       	call   c0003a19 <follow_path>
c0003d21:	85 c0                	test   eax,eax
c0003d23:	75 0d                	jne    c0003d32 <f_open+0x92>
c0003d25:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003d2a:	ba 06 00 00 00       	mov    edx,0x6
c0003d2f:	0f 45 c2             	cmovne eax,edx
c0003d32:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003d38:	0f 84 d5 00 00 00    	je     c0003e13 <f_open+0x173>
c0003d3e:	85 c0                	test   eax,eax
c0003d40:	74 21                	je     c0003d63 <f_open+0xc3>
c0003d42:	83 f8 04             	cmp    eax,0x4
c0003d45:	0f 85 ef 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d4b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d4f:	e8 62 fd ff ff       	call   c0003ab6 <dir_register>
c0003d54:	85 c0                	test   eax,eax
c0003d56:	0f 85 de 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d5c:	83 cd 08             	or     ebp,0x8
c0003d5f:	89 ee                	mov    esi,ebp
c0003d61:	eb 2c                	jmp    c0003d8f <f_open+0xef>
c0003d63:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d67:	b8 07 00 00 00       	mov    eax,0x7
c0003d6c:	80 e2 11             	and    dl,0x11
c0003d6f:	0f 85 c5 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d75:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d7b:	b8 08 00 00 00       	mov    eax,0x8
c0003d80:	0f 85 b4 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d86:	83 e7 08             	and    edi,0x8
c0003d89:	0f 84 b1 00 00 00    	je     c0003e40 <f_open+0x1a0>
c0003d8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d93:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d97:	8a 00                	mov    al,BYTE PTR [eax]
c0003d99:	89 ea                	mov    edx,ebp
c0003d9b:	e8 60 f4 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003da0:	ba 00 00 21 50       	mov    edx,0x50210000
c0003da5:	89 c7                	mov    edi,eax
c0003da7:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003daa:	e8 89 e0 ff ff       	call   c0001e38 <st_dword>
c0003daf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003db3:	31 c9                	xor    ecx,ecx
c0003db5:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003db9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003dc1:	e8 63 f4 ff ff       	call   c0003229 <st_clust.isra.1>
c0003dc6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003dca:	31 d2                	xor    edx,edx
c0003dcc:	83 c0 1c             	add    eax,0x1c
c0003dcf:	e8 64 e0 ff ff       	call   c0001e38 <st_dword>
c0003dd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dd8:	85 ff                	test   edi,edi
c0003dda:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003dde:	74 60                	je     c0003e40 <f_open+0x1a0>
c0003de0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003de4:	31 c9                	xor    ecx,ecx
c0003de6:	89 fa                	mov    edx,edi
c0003de8:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003deb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003def:	e8 64 f7 ff ff       	call   c0003558 <remove_chain>
c0003df4:	85 c0                	test   eax,eax
c0003df6:	0f 85 3e 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e00:	89 ea                	mov    edx,ebp
c0003e02:	4f                   	dec    edi
c0003e03:	e8 6c e5 ff ff       	call   c0002374 <move_window>
c0003e08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003e0c:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003e0f:	85 c0                	test   eax,eax
c0003e11:	eb 27                	jmp    c0003e3a <f_open+0x19a>
c0003e13:	85 c0                	test   eax,eax
c0003e15:	0f 85 1f 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e1b:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003e1f:	b8 04 00 00 00       	mov    eax,0x4
c0003e24:	f6 c2 10             	test   dl,0x10
c0003e27:	0f 85 0d 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e2d:	83 e7 02             	and    edi,0x2
c0003e30:	74 0e                	je     c0003e40 <f_open+0x1a0>
c0003e32:	b8 07 00 00 00       	mov    eax,0x7
c0003e37:	80 e2 01             	and    dl,0x1
c0003e3a:	0f 85 fa 00 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e40:	f7 c6 08 00 00 00    	test   esi,0x8
c0003e46:	74 03                	je     c0003e4b <f_open+0x1ab>
c0003e48:	83 ce 40             	or     esi,0x40
c0003e4b:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e4f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e53:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e56:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e59:	89 fa                	mov    edx,edi
c0003e5b:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e5e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e61:	e8 9a f3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003e66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e69:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e6c:	e8 ab df ff ff       	call   c0001e1c <ld_dword>
c0003e71:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e74:	31 d2                	xor    edx,edx
c0003e76:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e78:	b9 00 02 00 00       	mov    ecx,0x200
c0003e7d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e80:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e84:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e88:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e8f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e96:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e9a:	89 f0                	mov    eax,esi
c0003e9c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e9f:	89 f8                	mov    eax,edi
c0003ea1:	e8 aa df ff ff       	call   c0001e50 <mem_set>
c0003ea6:	83 e6 20             	and    esi,0x20
c0003ea9:	75 07                	jne    c0003eb2 <f_open+0x212>
c0003eab:	31 c0                	xor    eax,eax
c0003ead:	e9 88 00 00 00       	jmp    c0003f3a <f_open+0x29a>
c0003eb2:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0003eb5:	85 f6                	test   esi,esi
c0003eb7:	74 f2                	je     c0003eab <f_open+0x20b>
c0003eb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003ebc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003ec3:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0003ec7:	31 c0                	xor    eax,eax
c0003ec9:	c1 e5 09             	shl    ebp,0x9
c0003ecc:	85 c0                	test   eax,eax
c0003ece:	75 23                	jne    c0003ef3 <f_open+0x253>
c0003ed0:	39 ee                	cmp    esi,ebp
c0003ed2:	76 1f                	jbe    c0003ef3 <f_open+0x253>
c0003ed4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ed6:	e8 76 f3 ff ff       	call   c0003251 <get_fat.isra.2>
c0003edb:	89 c2                	mov    edx,eax
c0003edd:	b8 02 00 00 00       	mov    eax,0x2
c0003ee2:	83 fa 01             	cmp    edx,0x1
c0003ee5:	76 08                	jbe    c0003eef <f_open+0x24f>
c0003ee7:	31 c0                	xor    eax,eax
c0003ee9:	83 fa ff             	cmp    edx,0xffffffff
c0003eec:	0f 94 c0             	sete   al
c0003eef:	29 ee                	sub    esi,ebp
c0003ef1:	eb d9                	jmp    c0003ecc <f_open+0x22c>
c0003ef3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	75 40                	jne    c0003f3a <f_open+0x29a>
c0003efa:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0003f00:	74 a9                	je     c0003eab <f_open+0x20b>
c0003f02:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003f06:	89 e8                	mov    eax,ebp
c0003f08:	e8 58 e1 ff ff       	call   c0002065 <clst2sect>
c0003f0d:	89 c2                	mov    edx,eax
c0003f0f:	b8 02 00 00 00       	mov    eax,0x2
c0003f14:	85 d2                	test   edx,edx
c0003f16:	74 22                	je     c0003f3a <f_open+0x29a>
c0003f18:	c1 ee 09             	shr    esi,0x9
c0003f1b:	8d 04 16             	lea    eax,[esi+edx*1]
c0003f1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003f21:	6a 01                	push   0x1
c0003f23:	50                   	push   eax
c0003f24:	57                   	push   edi
c0003f25:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0003f29:	50                   	push   eax
c0003f2a:	e8 95 de ff ff       	call   c0001dc4 <disk_read>
c0003f2f:	83 c4 10             	add    esp,0x10
c0003f32:	85 c0                	test   eax,eax
c0003f34:	0f 95 c0             	setne  al
c0003f37:	0f b6 c0             	movzx  eax,al
c0003f3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f3e:	83 ec 0c             	sub    esp,0xc
c0003f41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003f45:	e8 22 1d 00 00       	call   c0005c6c <ff_memfree>
c0003f4a:	83 c4 10             	add    esp,0x10
c0003f4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f51:	85 c0                	test   eax,eax
c0003f53:	74 06                	je     c0003f5b <f_open+0x2bb>
c0003f55:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f5b:	83 c4 5c             	add    esp,0x5c
c0003f5e:	5b                   	pop    ebx
c0003f5f:	5e                   	pop    esi
c0003f60:	5f                   	pop    edi
c0003f61:	5d                   	pop    ebp
c0003f62:	c3                   	ret    

c0003f63 <f_read>:
c0003f63:	55                   	push   ebp
c0003f64:	57                   	push   edi
c0003f65:	56                   	push   esi
c0003f66:	53                   	push   ebx
c0003f67:	83 ec 2c             	sub    esp,0x2c
c0003f6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f6e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f72:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f76:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0003f7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f80:	89 d8                	mov    eax,ebx
c0003f82:	e8 44 e3 ff ff       	call   c00022cb <validate>
c0003f87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f8b:	85 c0                	test   eax,eax
c0003f8d:	0f 85 a5 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003f93:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0003f97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f9b:	85 c0                	test   eax,eax
c0003f9d:	0f 85 95 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003fa3:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003fa7:	0f 84 83 01 00 00    	je     c0004130 <f_read+0x1cd>
c0003fad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003fb0:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003fb3:	39 f8                	cmp    eax,edi
c0003fb5:	0f 46 f8             	cmovbe edi,eax
c0003fb8:	85 ff                	test   edi,edi
c0003fba:	0f 84 78 01 00 00    	je     c0004138 <f_read+0x1d5>
c0003fc0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fc3:	a9 ff 01 00 00       	test   eax,0x1ff
c0003fc8:	0f 85 2b 01 00 00    	jne    c00040f9 <f_read+0x196>
c0003fce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fd2:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0003fd6:	89 c2                	mov    edx,eax
c0003fd8:	c1 ea 09             	shr    edx,0x9
c0003fdb:	4d                   	dec    ebp
c0003fdc:	21 d5                	and    ebp,edx
c0003fde:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0003fe2:	75 42                	jne    c0004026 <f_read+0xc3>
c0003fe4:	85 c0                	test   eax,eax
c0003fe6:	75 05                	jne    c0003fed <f_read+0x8a>
c0003fe8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003feb:	eb 0a                	jmp    c0003ff7 <f_read+0x94>
c0003fed:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ff0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ff2:	e8 5a f2 ff ff       	call   c0003251 <get_fat.isra.2>
c0003ff7:	83 f8 01             	cmp    eax,0x1
c0003ffa:	77 11                	ja     c000400d <f_read+0xaa>
c0003ffc:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004000:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c0004008:	e9 2b 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c000400d:	83 f8 ff             	cmp    eax,0xffffffff
c0004010:	75 11                	jne    c0004023 <f_read+0xc0>
c0004012:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004016:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000401e:	e9 15 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c0004023:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004026:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000402a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000402d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004031:	89 c8                	mov    eax,ecx
c0004033:	e8 2d e0 ff ff       	call   c0002065 <clst2sect>
c0004038:	85 c0                	test   eax,eax
c000403a:	74 c0                	je     c0003ffc <f_read+0x99>
c000403c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004040:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004046:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0004049:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000404d:	76 58                	jbe    c00040a7 <f_read+0x144>
c000404f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004053:	89 fe                	mov    esi,edi
c0004055:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004059:	c1 ee 09             	shr    esi,0x9
c000405c:	01 f2                	add    edx,esi
c000405e:	39 c2                	cmp    edx,eax
c0004060:	76 06                	jbe    c0004068 <f_read+0x105>
c0004062:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004066:	89 c6                	mov    esi,eax
c0004068:	56                   	push   esi
c0004069:	55                   	push   ebp
c000406a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000406e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004072:	50                   	push   eax
c0004073:	e8 4c dd ff ff       	call   c0001dc4 <disk_read>
c0004078:	83 c4 10             	add    esp,0x10
c000407b:	85 c0                	test   eax,eax
c000407d:	75 93                	jne    c0004012 <f_read+0xaf>
c000407f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004083:	74 1d                	je     c00040a2 <f_read+0x13f>
c0004085:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004088:	29 e8                	sub    eax,ebp
c000408a:	39 f0                	cmp    eax,esi
c000408c:	73 14                	jae    c00040a2 <f_read+0x13f>
c000408e:	c1 e0 09             	shl    eax,0x9
c0004091:	b9 00 02 00 00       	mov    ecx,0x200
c0004096:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000409a:	8d 53 28             	lea    edx,[ebx+0x28]
c000409d:	e8 99 dd ff ff       	call   c0001e3b <mem_cpy>
c00040a2:	c1 e6 09             	shl    esi,0x9
c00040a5:	eb 75                	jmp    c000411c <f_read+0x1b9>
c00040a7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00040aa:	39 e8                	cmp    eax,ebp
c00040ac:	74 48                	je     c00040f6 <f_read+0x193>
c00040ae:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040b2:	8d 73 28             	lea    esi,[ebx+0x28]
c00040b5:	74 22                	je     c00040d9 <f_read+0x176>
c00040b7:	6a 01                	push   0x1
c00040b9:	50                   	push   eax
c00040ba:	56                   	push   esi
c00040bb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040bf:	50                   	push   eax
c00040c0:	e8 15 dd ff ff       	call   c0001dda <disk_write>
c00040c5:	83 c4 10             	add    esp,0x10
c00040c8:	85 c0                	test   eax,eax
c00040ca:	0f 85 42 ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040d0:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040d3:	83 e0 7f             	and    eax,0x7f
c00040d6:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040d9:	6a 01                	push   0x1
c00040db:	55                   	push   ebp
c00040dc:	56                   	push   esi
c00040dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040e5:	50                   	push   eax
c00040e6:	e8 d9 dc ff ff       	call   c0001dc4 <disk_read>
c00040eb:	83 c4 10             	add    esp,0x10
c00040ee:	85 c0                	test   eax,eax
c00040f0:	0f 85 1c ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040f6:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00040f9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040fc:	be 00 02 00 00       	mov    esi,0x200
c0004101:	25 ff 01 00 00       	and    eax,0x1ff
c0004106:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c000410a:	29 c6                	sub    esi,eax
c000410c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004110:	39 f7                	cmp    edi,esi
c0004112:	0f 46 f7             	cmovbe esi,edi
c0004115:	89 f1                	mov    ecx,esi
c0004117:	e8 1f dd ff ff       	call   c0001e3b <mem_cpy>
c000411c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004120:	29 f7                	sub    edi,esi
c0004122:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004126:	01 30                	add    DWORD PTR [eax],esi
c0004128:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000412b:	e9 88 fe ff ff       	jmp    c0003fb8 <f_read+0x55>
c0004130:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000413c:	83 c4 2c             	add    esp,0x2c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_write>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 67 e1 ff ff       	call   c00022cb <validate>
c0004164:	85 c0                	test   eax,eax
c0004166:	89 c7                	mov    edi,eax
c0004168:	0f 85 13 02 00 00    	jne    c0004381 <f_write+0x23d>
c000416e:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004172:	85 ff                	test   edi,edi
c0004174:	0f 85 07 02 00 00    	jne    c0004381 <f_write+0x23d>
c000417a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000417e:	0f 84 f8 01 00 00    	je     c000437c <f_write+0x238>
c0004184:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004187:	89 c1                	mov    ecx,eax
c0004189:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000418d:	0f 83 ed 00 00 00    	jae    c0004280 <f_write+0x13c>
c0004193:	f7 d0                	not    eax
c0004195:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004199:	e9 e2 00 00 00       	jmp    c0004280 <f_write+0x13c>
c000419e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a1:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a6:	0f 85 9b 01 00 00    	jne    c0004347 <f_write+0x203>
c00041ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b0:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b4:	89 c2                	mov    edx,eax
c00041b6:	c1 ea 09             	shr    edx,0x9
c00041b9:	4d                   	dec    ebp
c00041ba:	21 d5                	and    ebp,edx
c00041bc:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c0:	0f 84 c7 00 00 00    	je     c000428d <f_write+0x149>
c00041c6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041ca:	0f 85 23 01 00 00    	jne    c00042f3 <f_write+0x1af>
c00041d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041db:	89 c8                	mov    eax,ecx
c00041dd:	e8 83 de ff ff       	call   c0002065 <clst2sect>
c00041e2:	85 c0                	test   eax,eax
c00041e4:	0f 84 d3 00 00 00    	je     c00042bd <f_write+0x179>
c00041ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ee:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041f6:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00041f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041fd:	0f 86 1c 01 00 00    	jbe    c000431f <f_write+0x1db>
c0004203:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004207:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000420b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000420f:	c1 ee 09             	shr    esi,0x9
c0004212:	01 f2                	add    edx,esi
c0004214:	39 c2                	cmp    edx,eax
c0004216:	76 06                	jbe    c000421e <f_write+0xda>
c0004218:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000421c:	89 c6                	mov    esi,eax
c000421e:	56                   	push   esi
c000421f:	55                   	push   ebp
c0004220:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004224:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004228:	50                   	push   eax
c0004229:	e8 ac db ff ff       	call   c0001dda <disk_write>
c000422e:	83 c4 10             	add    esp,0x10
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 97 00 00 00    	jne    c00042d0 <f_write+0x18c>
c0004239:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000423c:	29 ea                	sub    edx,ebp
c000423e:	39 f2                	cmp    edx,esi
c0004240:	73 1d                	jae    c000425f <f_write+0x11b>
c0004242:	c1 e2 09             	shl    edx,0x9
c0004245:	b9 00 02 00 00       	mov    ecx,0x200
c000424a:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000424e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004251:	e8 e5 db ff ff       	call   c0001e3b <mem_cpy>
c0004256:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004259:	83 e0 7f             	and    eax,0x7f
c000425c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000425f:	c1 e6 09             	shl    esi,0x9
c0004262:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004266:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000426a:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000426e:	01 30                	add    DWORD PTR [eax],esi
c0004270:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004273:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004276:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004279:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000427d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004280:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004285:	0f 85 13 ff ff ff    	jne    c000419e <f_write+0x5a>
c000428b:	eb 1d                	jmp    c00042aa <f_write+0x166>
c000428d:	85 c0                	test   eax,eax
c000428f:	75 0b                	jne    c000429c <f_write+0x158>
c0004291:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004294:	31 d2                	xor    edx,edx
c0004296:	85 c0                	test   eax,eax
c0004298:	75 1e                	jne    c00042b8 <f_write+0x174>
c000429a:	eb 03                	jmp    c000429f <f_write+0x15b>
c000429c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000429f:	89 d8                	mov    eax,ebx
c00042a1:	e8 78 f1 ff ff       	call   c000341e <create_chain>
c00042a6:	85 c0                	test   eax,eax
c00042a8:	75 0e                	jne    c00042b8 <f_write+0x174>
c00042aa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ad:	83 c8 40             	or     eax,0x40
c00042b0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042b3:	e9 c9 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042b8:	83 f8 01             	cmp    eax,0x1
c00042bb:	75 0e                	jne    c00042cb <f_write+0x187>
c00042bd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00042c1:	bf 02 00 00 00       	mov    edi,0x2
c00042c6:	e9 b6 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042cb:	83 f8 ff             	cmp    eax,0xffffffff
c00042ce:	75 0e                	jne    c00042de <f_write+0x19a>
c00042d0:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042d4:	bf 01 00 00 00       	mov    edi,0x1
c00042d9:	e9 a3 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042de:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042e2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042e5:	0f 85 db fe ff ff    	jne    c00041c6 <f_write+0x82>
c00042eb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042ee:	e9 d3 fe ff ff       	jmp    c00041c6 <f_write+0x82>
c00042f3:	6a 01                	push   0x1
c00042f5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042f8:	8d 43 28             	lea    eax,[ebx+0x28]
c00042fb:	50                   	push   eax
c00042fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004300:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004304:	50                   	push   eax
c0004305:	e8 d0 da ff ff       	call   c0001dda <disk_write>
c000430a:	83 c4 10             	add    esp,0x10
c000430d:	85 c0                	test   eax,eax
c000430f:	75 bf                	jne    c00042d0 <f_write+0x18c>
c0004311:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004314:	83 e0 7f             	and    eax,0x7f
c0004317:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000431a:	e9 b1 fe ff ff       	jmp    c00041d0 <f_write+0x8c>
c000431f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004322:	74 20                	je     c0004344 <f_write+0x200>
c0004324:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004327:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000432a:	76 18                	jbe    c0004344 <f_write+0x200>
c000432c:	6a 01                	push   0x1
c000432e:	55                   	push   ebp
c000432f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004332:	50                   	push   eax
c0004333:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004337:	50                   	push   eax
c0004338:	e8 87 da ff ff       	call   c0001dc4 <disk_read>
c000433d:	83 c4 10             	add    esp,0x10
c0004340:	85 c0                	test   eax,eax
c0004342:	75 8c                	jne    c00042d0 <f_write+0x18c>
c0004344:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004347:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000434a:	be 00 02 00 00       	mov    esi,0x200
c000434f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004353:	25 ff 01 00 00       	and    eax,0x1ff
c0004358:	29 c6                	sub    esi,eax
c000435a:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000435e:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004362:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004367:	89 f1                	mov    ecx,esi
c0004369:	e8 cd da ff ff       	call   c0001e3b <mem_cpy>
c000436e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004371:	83 c8 80             	or     eax,0xffffff80
c0004374:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004377:	e9 e6 fe ff ff       	jmp    c0004262 <f_write+0x11e>
c000437c:	bf 07 00 00 00       	mov    edi,0x7
c0004381:	83 c4 2c             	add    esp,0x2c
c0004384:	89 f8                	mov    eax,edi
c0004386:	5b                   	pop    ebx
c0004387:	5e                   	pop    esi
c0004388:	5f                   	pop    edi
c0004389:	5d                   	pop    ebp
c000438a:	c3                   	ret    

c000438b <f_sync>:
c000438b:	56                   	push   esi
c000438c:	53                   	push   ebx
c000438d:	83 ec 14             	sub    esp,0x14
c0004390:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004394:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004398:	89 d8                	mov    eax,ebx
c000439a:	e8 2c df ff ff       	call   c00022cb <validate>
c000439f:	85 c0                	test   eax,eax
c00043a1:	0f 85 a3 00 00 00    	jne    c000444a <f_sync+0xbf>
c00043a7:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00043aa:	f6 c2 40             	test   dl,0x40
c00043ad:	0f 84 97 00 00 00    	je     c000444a <f_sync+0xbf>
c00043b3:	80 e2 80             	and    dl,0x80
c00043b6:	74 2e                	je     c00043e6 <f_sync+0x5b>
c00043b8:	6a 01                	push   0x1
c00043ba:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00043bd:	8d 43 28             	lea    eax,[ebx+0x28]
c00043c0:	50                   	push   eax
c00043c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043c5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043c9:	50                   	push   eax
c00043ca:	e8 0b da ff ff       	call   c0001dda <disk_write>
c00043cf:	83 c4 10             	add    esp,0x10
c00043d2:	89 c2                	mov    edx,eax
c00043d4:	b8 01 00 00 00       	mov    eax,0x1
c00043d9:	85 d2                	test   edx,edx
c00043db:	75 6d                	jne    c000444a <f_sync+0xbf>
c00043dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043e0:	83 e0 7f             	and    eax,0x7f
c00043e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043e6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043ed:	e8 82 df ff ff       	call   c0002374 <move_window>
c00043f2:	85 c0                	test   eax,eax
c00043f4:	75 54                	jne    c000444a <f_sync+0xbf>
c00043f6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043f9:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043fc:	89 f2                	mov    edx,esi
c00043fe:	83 c8 20             	or     eax,0x20
c0004401:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004404:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0004407:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004409:	e8 1b ee ff ff       	call   c0003229 <st_clust.isra.1>
c000440e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004411:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004414:	e8 1f da ff ff       	call   c0001e38 <st_dword>
c0004419:	8d 46 16             	lea    eax,[esi+0x16]
c000441c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004421:	e8 12 da ff ff       	call   c0001e38 <st_dword>
c0004426:	8d 46 12             	lea    eax,[esi+0x12]
c0004429:	31 d2                	xor    edx,edx
c000442b:	e8 04 da ff ff       	call   c0001e34 <st_word>
c0004430:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004434:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004438:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000443c:	e8 68 e9 ff ff       	call   c0002da9 <sync_fs>
c0004441:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004444:	83 e2 bf             	and    edx,0xffffffbf
c0004447:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000444a:	83 c4 14             	add    esp,0x14
c000444d:	5b                   	pop    ebx
c000444e:	5e                   	pop    esi
c000444f:	c3                   	ret    

c0004450 <f_close>:
c0004450:	53                   	push   ebx
c0004451:	83 ec 24             	sub    esp,0x24
c0004454:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004458:	53                   	push   ebx
c0004459:	e8 2d ff ff ff       	call   c000438b <f_sync>
c000445e:	83 c4 10             	add    esp,0x10
c0004461:	85 c0                	test   eax,eax
c0004463:	75 15                	jne    c000447a <f_close+0x2a>
c0004465:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004469:	89 d8                	mov    eax,ebx
c000446b:	e8 5b de ff ff       	call   c00022cb <validate>
c0004470:	85 c0                	test   eax,eax
c0004472:	75 06                	jne    c000447a <f_close+0x2a>
c0004474:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000447a:	83 c4 18             	add    esp,0x18
c000447d:	5b                   	pop    ebx
c000447e:	c3                   	ret    

c000447f <f_lseek>:
c000447f:	55                   	push   ebp
c0004480:	57                   	push   edi
c0004481:	56                   	push   esi
c0004482:	53                   	push   ebx
c0004483:	83 ec 2c             	sub    esp,0x2c
c0004486:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000448a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000448e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004492:	89 d8                	mov    eax,ebx
c0004494:	e8 32 de ff ff       	call   c00022cb <validate>
c0004499:	85 c0                	test   eax,eax
c000449b:	89 c5                	mov    ebp,eax
c000449d:	0f 85 82 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044a3:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00044a7:	85 ed                	test   ebp,ebp
c00044a9:	0f 85 76 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044af:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00044b2:	39 f0                	cmp    eax,esi
c00044b4:	73 07                	jae    c00044bd <f_lseek+0x3e>
c00044b6:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044ba:	0f 44 f0             	cmove  esi,eax
c00044bd:	85 f6                	test   esi,esi
c00044bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00044c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044c9:	75 07                	jne    c00044d2 <f_lseek+0x53>
c00044cb:	31 f6                	xor    esi,esi
c00044cd:	e9 e2 00 00 00       	jmp    c00045b4 <f_lseek+0x135>
c00044d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d6:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044da:	c1 e7 09             	shl    edi,0x9
c00044dd:	85 c9                	test   ecx,ecx
c00044df:	74 28                	je     c0004509 <f_lseek+0x8a>
c00044e1:	31 d2                	xor    edx,edx
c00044e3:	49                   	dec    ecx
c00044e4:	8d 46 ff             	lea    eax,[esi-0x1]
c00044e7:	f7 f7                	div    edi
c00044e9:	31 d2                	xor    edx,edx
c00044eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044ef:	89 c8                	mov    eax,ecx
c00044f1:	f7 f7                	div    edi
c00044f3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044f7:	72 10                	jb     c0004509 <f_lseek+0x8a>
c00044f9:	89 f8                	mov    eax,edi
c00044fb:	f7 d8                	neg    eax
c00044fd:	21 c1                	and    ecx,eax
c00044ff:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004502:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004505:	29 ce                	sub    esi,ecx
c0004507:	eb 3c                	jmp    c0004545 <f_lseek+0xc6>
c0004509:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000450c:	85 c0                	test   eax,eax
c000450e:	75 32                	jne    c0004542 <f_lseek+0xc3>
c0004510:	31 d2                	xor    edx,edx
c0004512:	89 d8                	mov    eax,ebx
c0004514:	e8 05 ef ff ff       	call   c000341e <create_chain>
c0004519:	83 f8 01             	cmp    eax,0x1
c000451c:	75 0e                	jne    c000452c <f_lseek+0xad>
c000451e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004522:	bd 02 00 00 00       	mov    ebp,0x2
c0004527:	e9 f9 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000452c:	83 f8 ff             	cmp    eax,0xffffffff
c000452f:	75 0e                	jne    c000453f <f_lseek+0xc0>
c0004531:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004535:	bd 01 00 00 00       	mov    ebp,0x1
c000453a:	e9 e6 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000453f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004542:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004545:	85 c0                	test   eax,eax
c0004547:	74 82                	je     c00044cb <f_lseek+0x4c>
c0004549:	39 fe                	cmp    esi,edi
c000454b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000454e:	76 3d                	jbe    c000458d <f_lseek+0x10e>
c0004550:	01 fa                	add    edx,edi
c0004552:	29 fe                	sub    esi,edi
c0004554:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004558:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000455b:	89 c2                	mov    edx,eax
c000455d:	74 0d                	je     c000456c <f_lseek+0xed>
c000455f:	89 d8                	mov    eax,ebx
c0004561:	e8 b8 ee ff ff       	call   c000341e <create_chain>
c0004566:	85 c0                	test   eax,eax
c0004568:	75 09                	jne    c0004573 <f_lseek+0xf4>
c000456a:	eb 1f                	jmp    c000458b <f_lseek+0x10c>
c000456c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000456e:	e8 de ec ff ff       	call   c0003251 <get_fat.isra.2>
c0004573:	83 f8 ff             	cmp    eax,0xffffffff
c0004576:	74 b9                	je     c0004531 <f_lseek+0xb2>
c0004578:	83 f8 01             	cmp    eax,0x1
c000457b:	76 a1                	jbe    c000451e <f_lseek+0x9f>
c000457d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004581:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004584:	76 98                	jbe    c000451e <f_lseek+0x9f>
c0004586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004589:	eb be                	jmp    c0004549 <f_lseek+0xca>
c000458b:	31 f6                	xor    esi,esi
c000458d:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004590:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004596:	0f 84 2f ff ff ff    	je     c00044cb <f_lseek+0x4c>
c000459c:	89 c2                	mov    edx,eax
c000459e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045a2:	e8 be da ff ff       	call   c0002065 <clst2sect>
c00045a7:	85 c0                	test   eax,eax
c00045a9:	0f 84 6f ff ff ff    	je     c000451e <f_lseek+0x9f>
c00045af:	c1 ee 09             	shr    esi,0x9
c00045b2:	01 c6                	add    esi,eax
c00045b4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00045b7:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00045ba:	76 0c                	jbe    c00045c8 <f_lseek+0x149>
c00045bc:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00045bf:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00045c2:	83 ca 40             	or     edx,0x40
c00045c5:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045c8:	a9 ff 01 00 00       	test   eax,0x1ff
c00045cd:	74 56                	je     c0004625 <f_lseek+0x1a6>
c00045cf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045d2:	39 f0                	cmp    eax,esi
c00045d4:	74 4f                	je     c0004625 <f_lseek+0x1a6>
c00045d6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045da:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045dd:	74 26                	je     c0004605 <f_lseek+0x186>
c00045df:	6a 01                	push   0x1
c00045e1:	50                   	push   eax
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 e9 d7 ff ff       	call   c0001dda <disk_write>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 35 ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c00045fc:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045ff:	83 e0 7f             	and    eax,0x7f
c0004602:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004605:	6a 01                	push   0x1
c0004607:	56                   	push   esi
c0004608:	57                   	push   edi
c0004609:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000460d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004611:	50                   	push   eax
c0004612:	e8 ad d7 ff ff       	call   c0001dc4 <disk_read>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	85 c0                	test   eax,eax
c000461c:	0f 85 0f ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c0004622:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004625:	83 c4 2c             	add    esp,0x2c
c0004628:	89 e8                	mov    eax,ebp
c000462a:	5b                   	pop    ebx
c000462b:	5e                   	pop    esi
c000462c:	5f                   	pop    edi
c000462d:	5d                   	pop    ebp
c000462e:	c3                   	ret    

c000462f <f_opendir>:
c000462f:	56                   	push   esi
c0004630:	b8 09 00 00 00       	mov    eax,0x9
c0004635:	53                   	push   ebx
c0004636:	83 ec 24             	sub    esp,0x24
c0004639:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000463d:	85 db                	test   ebx,ebx
c000463f:	0f 84 af 00 00 00    	je     c00046f4 <f_opendir+0xc5>
c0004645:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004649:	31 c9                	xor    ecx,ecx
c000464b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000464f:	e8 7d de ff ff       	call   c00024d1 <mount_volume>
c0004654:	85 c0                	test   eax,eax
c0004656:	0f 85 92 00 00 00    	jne    c00046ee <f_opendir+0xbf>
c000465c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004660:	83 ec 0c             	sub    esp,0xc
c0004663:	89 03                	mov    DWORD PTR [ebx],eax
c0004665:	68 00 02 00 00       	push   0x200
c000466a:	e8 e5 15 00 00       	call   c0005c54 <ff_memalloc>
c000466f:	83 c4 10             	add    esp,0x10
c0004672:	89 c6                	mov    esi,eax
c0004674:	b8 11 00 00 00       	mov    eax,0x11
c0004679:	85 f6                	test   esi,esi
c000467b:	74 77                	je     c00046f4 <f_opendir+0xc5>
c000467d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004681:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004685:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004688:	89 d8                	mov    eax,ebx
c000468a:	e8 8a f3 ff ff       	call   c0003a19 <follow_path>
c000468f:	85 c0                	test   eax,eax
c0004691:	75 37                	jne    c00046ca <f_opendir+0x9b>
c0004693:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004697:	75 1c                	jne    c00046b5 <f_opendir+0x86>
c0004699:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000469d:	b8 05 00 00 00       	mov    eax,0x5
c00046a2:	74 26                	je     c00046ca <f_opendir+0x9b>
c00046a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046a8:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00046ab:	8a 00                	mov    al,BYTE PTR [eax]
c00046ad:	e8 4e eb ff ff       	call   c0003200 <ld_clust.isra.0>
c00046b2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00046b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b9:	31 d2                	xor    edx,edx
c00046bb:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00046bf:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00046c3:	89 d8                	mov    eax,ebx
c00046c5:	e8 8c ec ff ff       	call   c0003356 <dir_sdi>
c00046ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046ce:	83 ec 0c             	sub    esp,0xc
c00046d1:	56                   	push   esi
c00046d2:	e8 95 15 00 00       	call   c0005c6c <ff_memfree>
c00046d7:	83 c4 10             	add    esp,0x10
c00046da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046de:	83 f8 04             	cmp    eax,0x4
c00046e1:	74 06                	je     c00046e9 <f_opendir+0xba>
c00046e3:	85 c0                	test   eax,eax
c00046e5:	74 0d                	je     c00046f4 <f_opendir+0xc5>
c00046e7:	eb 05                	jmp    c00046ee <f_opendir+0xbf>
c00046e9:	b8 05 00 00 00       	mov    eax,0x5
c00046ee:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f4:	83 c4 24             	add    esp,0x24
c00046f7:	5b                   	pop    ebx
c00046f8:	5e                   	pop    esi
c00046f9:	c3                   	ret    

c00046fa <f_closedir>:
c00046fa:	53                   	push   ebx
c00046fb:	83 ec 18             	sub    esp,0x18
c00046fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004702:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004706:	89 d8                	mov    eax,ebx
c0004708:	e8 be db ff ff       	call   c00022cb <validate>
c000470d:	85 c0                	test   eax,eax
c000470f:	75 06                	jne    c0004717 <f_closedir+0x1d>
c0004711:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004717:	83 c4 18             	add    esp,0x18
c000471a:	5b                   	pop    ebx
c000471b:	c3                   	ret    

c000471c <f_readdir>:
c000471c:	57                   	push   edi
c000471d:	56                   	push   esi
c000471e:	53                   	push   ebx
c000471f:	83 ec 20             	sub    esp,0x20
c0004722:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004726:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000472a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000472e:	89 d8                	mov    eax,ebx
c0004730:	e8 96 db ff ff       	call   c00022cb <validate>
c0004735:	85 c0                	test   eax,eax
c0004737:	75 6e                	jne    c00047a7 <f_readdir+0x8b>
c0004739:	85 ff                	test   edi,edi
c000473b:	75 0b                	jne    c0004748 <f_readdir+0x2c>
c000473d:	31 d2                	xor    edx,edx
c000473f:	89 d8                	mov    eax,ebx
c0004741:	e8 10 ec ff ff       	call   c0003356 <dir_sdi>
c0004746:	eb 5f                	jmp    c00047a7 <f_readdir+0x8b>
c0004748:	83 ec 0c             	sub    esp,0xc
c000474b:	68 00 02 00 00       	push   0x200
c0004750:	e8 ff 14 00 00       	call   c0005c54 <ff_memalloc>
c0004755:	83 c4 10             	add    esp,0x10
c0004758:	89 c6                	mov    esi,eax
c000475a:	b8 11 00 00 00       	mov    eax,0x11
c000475f:	85 f6                	test   esi,esi
c0004761:	74 44                	je     c00047a7 <f_readdir+0x8b>
c0004763:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004767:	31 d2                	xor    edx,edx
c0004769:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000476c:	89 d8                	mov    eax,ebx
c000476e:	e8 dd ef ff ff       	call   c0003750 <dir_read>
c0004773:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004778:	75 19                	jne    c0004793 <f_readdir+0x77>
c000477a:	89 fa                	mov    edx,edi
c000477c:	89 d8                	mov    eax,ebx
c000477e:	e8 7c e8 ff ff       	call   c0002fff <get_fileinfo>
c0004783:	31 d2                	xor    edx,edx
c0004785:	89 d8                	mov    eax,ebx
c0004787:	e8 5a ee ff ff       	call   c00035e6 <dir_next>
c000478c:	83 f8 04             	cmp    eax,0x4
c000478f:	75 02                	jne    c0004793 <f_readdir+0x77>
c0004791:	31 c0                	xor    eax,eax
c0004793:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004797:	83 ec 0c             	sub    esp,0xc
c000479a:	56                   	push   esi
c000479b:	e8 cc 14 00 00       	call   c0005c6c <ff_memfree>
c00047a0:	83 c4 10             	add    esp,0x10
c00047a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047a7:	83 c4 20             	add    esp,0x20
c00047aa:	5b                   	pop    ebx
c00047ab:	5e                   	pop    esi
c00047ac:	5f                   	pop    edi
c00047ad:	c3                   	ret    

c00047ae <f_stat>:
c00047ae:	57                   	push   edi
c00047af:	31 c9                	xor    ecx,ecx
c00047b1:	56                   	push   esi
c00047b2:	53                   	push   ebx
c00047b3:	83 ec 30             	sub    esp,0x30
c00047b6:	8d 44 24 40          	lea    eax,[esp+0x40]
c00047ba:	89 e2                	mov    edx,esp
c00047bc:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00047c0:	e8 0c dd ff ff       	call   c00024d1 <mount_volume>
c00047c5:	85 c0                	test   eax,eax
c00047c7:	89 c3                	mov    ebx,eax
c00047c9:	75 59                	jne    c0004824 <f_stat+0x76>
c00047cb:	83 ec 0c             	sub    esp,0xc
c00047ce:	bb 11 00 00 00       	mov    ebx,0x11
c00047d3:	68 00 02 00 00       	push   0x200
c00047d8:	e8 77 14 00 00       	call   c0005c54 <ff_memalloc>
c00047dd:	83 c4 10             	add    esp,0x10
c00047e0:	85 c0                	test   eax,eax
c00047e2:	89 c6                	mov    esi,eax
c00047e4:	74 3e                	je     c0004824 <f_stat+0x76>
c00047e6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047e9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047f0:	89 e0                	mov    eax,esp
c00047f2:	e8 22 f2 ff ff       	call   c0003a19 <follow_path>
c00047f7:	85 c0                	test   eax,eax
c00047f9:	89 c3                	mov    ebx,eax
c00047fb:	75 1b                	jne    c0004818 <f_stat+0x6a>
c00047fd:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c0004802:	75 0f                	jne    c0004813 <f_stat+0x65>
c0004804:	85 ff                	test   edi,edi
c0004806:	74 10                	je     c0004818 <f_stat+0x6a>
c0004808:	89 fa                	mov    edx,edi
c000480a:	89 e0                	mov    eax,esp
c000480c:	e8 ee e7 ff ff       	call   c0002fff <get_fileinfo>
c0004811:	eb 05                	jmp    c0004818 <f_stat+0x6a>
c0004813:	bb 06 00 00 00       	mov    ebx,0x6
c0004818:	83 ec 0c             	sub    esp,0xc
c000481b:	56                   	push   esi
c000481c:	e8 4b 14 00 00       	call   c0005c6c <ff_memfree>
c0004821:	83 c4 10             	add    esp,0x10
c0004824:	83 c4 30             	add    esp,0x30
c0004827:	89 d8                	mov    eax,ebx
c0004829:	5b                   	pop    ebx
c000482a:	5e                   	pop    esi
c000482b:	5f                   	pop    edi
c000482c:	c3                   	ret    

c000482d <f_getfree>:
c000482d:	55                   	push   ebp
c000482e:	31 c9                	xor    ecx,ecx
c0004830:	57                   	push   edi
c0004831:	56                   	push   esi
c0004832:	53                   	push   ebx
c0004833:	83 ec 2c             	sub    esp,0x2c
c0004836:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000483a:	8d 44 24 40          	lea    eax,[esp+0x40]
c000483e:	e8 8e dc ff ff       	call   c00024d1 <mount_volume>
c0004843:	85 c0                	test   eax,eax
c0004845:	89 c6                	mov    esi,eax
c0004847:	0f 85 df 00 00 00    	jne    c000492c <f_getfree+0xff>
c000484d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004851:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004855:	89 18                	mov    DWORD PTR [eax],ebx
c0004857:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000485a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000485d:	8d 57 fe             	lea    edx,[edi-0x2]
c0004860:	39 d0                	cmp    eax,edx
c0004862:	77 0b                	ja     c000486f <f_getfree+0x42>
c0004864:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004868:	89 01                	mov    DWORD PTR [ecx],eax
c000486a:	e9 bd 00 00 00       	jmp    c000492c <f_getfree+0xff>
c000486f:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004872:	75 29                	jne    c000489d <f_getfree+0x70>
c0004874:	bf 02 00 00 00       	mov    edi,0x2
c0004879:	31 ed                	xor    ebp,ebp
c000487b:	89 fa                	mov    edx,edi
c000487d:	89 d8                	mov    eax,ebx
c000487f:	e8 cd e9 ff ff       	call   c0003251 <get_fat.isra.2>
c0004884:	83 f8 ff             	cmp    eax,0xffffffff
c0004887:	74 7d                	je     c0004906 <f_getfree+0xd9>
c0004889:	83 f8 01             	cmp    eax,0x1
c000488c:	74 7f                	je     c000490d <f_getfree+0xe0>
c000488e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004892:	83 d5 00             	adc    ebp,0x0
c0004895:	47                   	inc    edi
c0004896:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004899:	77 e0                	ja     c000487b <f_getfree+0x4e>
c000489b:	eb 79                	jmp    c0004916 <f_getfree+0xe9>
c000489d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00048a0:	31 ed                	xor    ebp,ebp
c00048a2:	31 db                	xor    ebx,ebx
c00048a4:	85 db                	test   ebx,ebx
c00048a6:	75 18                	jne    c00048c0 <f_getfree+0x93>
c00048a8:	8d 42 01             	lea    eax,[edx+0x1]
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b3:	e8 bc da ff ff       	call   c0002374 <move_window>
c00048b8:	85 c0                	test   eax,eax
c00048ba:	75 58                	jne    c0004914 <f_getfree+0xe7>
c00048bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00048c8:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048cb:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c00048cf:	75 13                	jne    c00048e4 <f_getfree+0xb7>
c00048d1:	e8 39 d5 ff ff       	call   c0001e0f <ld_word>
c00048d6:	0f b7 c0             	movzx  eax,ax
c00048d9:	83 f8 01             	cmp    eax,0x1
c00048dc:	83 d5 00             	adc    ebp,0x0
c00048df:	83 c3 02             	add    ebx,0x2
c00048e2:	eb 13                	jmp    c00048f7 <f_getfree+0xca>
c00048e4:	e8 33 d5 ff ff       	call   c0001e1c <ld_dword>
c00048e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048ee:	83 f8 01             	cmp    eax,0x1
c00048f1:	83 d5 00             	adc    ebp,0x0
c00048f4:	83 c3 04             	add    ebx,0x4
c00048f7:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00048fd:	4f                   	dec    edi
c00048fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004902:	75 a0                	jne    c00048a4 <f_getfree+0x77>
c0004904:	eb 10                	jmp    c0004916 <f_getfree+0xe9>
c0004906:	be 01 00 00 00       	mov    esi,0x1
c000490b:	eb 09                	jmp    c0004916 <f_getfree+0xe9>
c000490d:	be 02 00 00 00       	mov    esi,0x2
c0004912:	eb 02                	jmp    c0004916 <f_getfree+0xe9>
c0004914:	89 c6                	mov    esi,eax
c0004916:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000491a:	89 28                	mov    DWORD PTR [eax],ebp
c000491c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004920:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004923:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004926:	83 ca 01             	or     edx,0x1
c0004929:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c000492c:	83 c4 2c             	add    esp,0x2c
c000492f:	89 f0                	mov    eax,esi
c0004931:	5b                   	pop    ebx
c0004932:	5e                   	pop    esi
c0004933:	5f                   	pop    edi
c0004934:	5d                   	pop    ebp
c0004935:	c3                   	ret    

c0004936 <f_truncate>:
c0004936:	56                   	push   esi
c0004937:	53                   	push   ebx
c0004938:	83 ec 14             	sub    esp,0x14
c000493b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000493f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004943:	89 d8                	mov    eax,ebx
c0004945:	e8 81 d9 ff ff       	call   c00022cb <validate>
c000494a:	85 c0                	test   eax,eax
c000494c:	89 c6                	mov    esi,eax
c000494e:	0f 85 c4 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004954:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004958:	85 f6                	test   esi,esi
c000495a:	0f 85 b8 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004960:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004964:	0f 84 a9 00 00 00    	je     c0004a13 <f_truncate+0xdd>
c000496a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000496d:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004970:	0f 83 a2 00 00 00    	jae    c0004a18 <f_truncate+0xe2>
c0004976:	85 c0                	test   eax,eax
c0004978:	75 15                	jne    c000498f <f_truncate+0x59>
c000497a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000497d:	31 c9                	xor    ecx,ecx
c000497f:	89 d8                	mov    eax,ebx
c0004981:	e8 d2 eb ff ff       	call   c0003558 <remove_chain>
c0004986:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000498d:	eb 35                	jmp    c00049c4 <f_truncate+0x8e>
c000498f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004994:	e8 b8 e8 ff ff       	call   c0003251 <get_fat.isra.2>
c0004999:	89 c2                	mov    edx,eax
c000499b:	b8 01 00 00 00       	mov    eax,0x1
c00049a0:	83 fa ff             	cmp    edx,0xffffffff
c00049a3:	74 1f                	je     c00049c4 <f_truncate+0x8e>
c00049a5:	83 fa 01             	cmp    edx,0x1
c00049a8:	b8 02 00 00 00       	mov    eax,0x2
c00049ad:	74 15                	je     c00049c4 <f_truncate+0x8e>
c00049af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049b3:	31 c0                	xor    eax,eax
c00049b5:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c00049b8:	76 0a                	jbe    c00049c4 <f_truncate+0x8e>
c00049ba:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c00049bd:	89 d8                	mov    eax,ebx
c00049bf:	e8 94 eb ff ff       	call   c0003558 <remove_chain>
c00049c4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049c7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049ca:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049cd:	83 ca 40             	or     edx,0x40
c00049d0:	85 c0                	test   eax,eax
c00049d2:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049d5:	75 35                	jne    c0004a0c <f_truncate+0xd6>
c00049d7:	80 e2 80             	and    dl,0x80
c00049da:	74 3c                	je     c0004a18 <f_truncate+0xe2>
c00049dc:	6a 01                	push   0x1
c00049de:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049e1:	8d 43 28             	lea    eax,[ebx+0x28]
c00049e4:	50                   	push   eax
c00049e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049e9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049ed:	50                   	push   eax
c00049ee:	e8 e7 d3 ff ff       	call   c0001dda <disk_write>
c00049f3:	83 c4 10             	add    esp,0x10
c00049f6:	85 c0                	test   eax,eax
c00049f8:	75 0d                	jne    c0004a07 <f_truncate+0xd1>
c00049fa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049fd:	31 f6                	xor    esi,esi
c00049ff:	83 e0 7f             	and    eax,0x7f
c0004a02:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004a05:	eb 11                	jmp    c0004a18 <f_truncate+0xe2>
c0004a07:	b8 01 00 00 00       	mov    eax,0x1
c0004a0c:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004a0f:	89 c6                	mov    esi,eax
c0004a11:	eb 05                	jmp    c0004a18 <f_truncate+0xe2>
c0004a13:	be 07 00 00 00       	mov    esi,0x7
c0004a18:	83 c4 14             	add    esp,0x14
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	5b                   	pop    ebx
c0004a1e:	5e                   	pop    esi
c0004a1f:	c3                   	ret    

c0004a20 <f_unlink>:
c0004a20:	55                   	push   ebp
c0004a21:	b9 02 00 00 00       	mov    ecx,0x2
c0004a26:	57                   	push   edi
c0004a27:	56                   	push   esi
c0004a28:	53                   	push   ebx
c0004a29:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a2f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a33:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a3a:	e8 92 da ff ff       	call   c00024d1 <mount_volume>
c0004a3f:	85 c0                	test   eax,eax
c0004a41:	0f 85 ee 00 00 00    	jne    c0004b35 <f_unlink+0x115>
c0004a47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4b:	83 ec 0c             	sub    esp,0xc
c0004a4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a52:	68 00 02 00 00       	push   0x200
c0004a57:	e8 f8 11 00 00       	call   c0005c54 <ff_memalloc>
c0004a5c:	83 c4 10             	add    esp,0x10
c0004a5f:	89 c3                	mov    ebx,eax
c0004a61:	b8 11 00 00 00       	mov    eax,0x11
c0004a66:	85 db                	test   ebx,ebx
c0004a68:	0f 84 c7 00 00 00    	je     c0004b35 <f_unlink+0x115>
c0004a6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a72:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a79:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a7c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a80:	e8 94 ef ff ff       	call   c0003a19 <follow_path>
c0004a85:	85 c0                	test   eax,eax
c0004a87:	0f 85 94 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a8d:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a92:	b8 06 00 00 00       	mov    eax,0x6
c0004a97:	0f 85 84 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a9d:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004aa2:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004aa8:	74 07                	je     c0004ab1 <f_unlink+0x91>
c0004aaa:	b8 07 00 00 00       	mov    eax,0x7
c0004aaf:	eb 70                	jmp    c0004b21 <f_unlink+0x101>
c0004ab1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ab5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ab9:	8a 07                	mov    al,BYTE PTR [edi]
c0004abb:	e8 40 e7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004ac0:	83 e5 10             	and    ebp,0x10
c0004ac3:	89 c6                	mov    esi,eax
c0004ac5:	75 20                	jne    c0004ae7 <f_unlink+0xc7>
c0004ac7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004acb:	e8 a8 ed ff ff       	call   c0003878 <dir_remove>
c0004ad0:	85 c0                	test   eax,eax
c0004ad2:	75 40                	jne    c0004b14 <f_unlink+0xf4>
c0004ad4:	85 f6                	test   esi,esi
c0004ad6:	74 3c                	je     c0004b14 <f_unlink+0xf4>
c0004ad8:	31 c9                	xor    ecx,ecx
c0004ada:	89 f2                	mov    edx,esi
c0004adc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ae0:	e8 73 ea ff ff       	call   c0003558 <remove_chain>
c0004ae5:	eb 2d                	jmp    c0004b14 <f_unlink+0xf4>
c0004ae7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004aeb:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004aef:	31 d2                	xor    edx,edx
c0004af1:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004af5:	e8 5c e8 ff ff       	call   c0003356 <dir_sdi>
c0004afa:	85 c0                	test   eax,eax
c0004afc:	75 23                	jne    c0004b21 <f_unlink+0x101>
c0004afe:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004b02:	31 d2                	xor    edx,edx
c0004b04:	e8 47 ec ff ff       	call   c0003750 <dir_read>
c0004b09:	85 c0                	test   eax,eax
c0004b0b:	74 9d                	je     c0004aaa <f_unlink+0x8a>
c0004b0d:	83 f8 04             	cmp    eax,0x4
c0004b10:	75 0f                	jne    c0004b21 <f_unlink+0x101>
c0004b12:	eb b3                	jmp    c0004ac7 <f_unlink+0xa7>
c0004b14:	85 c0                	test   eax,eax
c0004b16:	75 09                	jne    c0004b21 <f_unlink+0x101>
c0004b18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b1c:	e8 88 e2 ff ff       	call   c0002da9 <sync_fs>
c0004b21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b25:	83 ec 0c             	sub    esp,0xc
c0004b28:	53                   	push   ebx
c0004b29:	e8 3e 11 00 00       	call   c0005c6c <ff_memfree>
c0004b2e:	83 c4 10             	add    esp,0x10
c0004b31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b35:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b3b:	5b                   	pop    ebx
c0004b3c:	5e                   	pop    esi
c0004b3d:	5f                   	pop    edi
c0004b3e:	5d                   	pop    ebp
c0004b3f:	c3                   	ret    

c0004b40 <f_mkdir>:
c0004b40:	57                   	push   edi
c0004b41:	b9 02 00 00 00       	mov    ecx,0x2
c0004b46:	56                   	push   esi
c0004b47:	53                   	push   ebx
c0004b48:	83 ec 50             	sub    esp,0x50
c0004b4b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b4f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b53:	e8 79 d9 ff ff       	call   c00024d1 <mount_volume>
c0004b58:	85 c0                	test   eax,eax
c0004b5a:	89 c3                	mov    ebx,eax
c0004b5c:	0f 85 70 01 00 00    	jne    c0004cd2 <f_mkdir+0x192>
c0004b62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b66:	83 ec 0c             	sub    esp,0xc
c0004b69:	bb 11 00 00 00       	mov    ebx,0x11
c0004b6e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b72:	68 00 02 00 00       	push   0x200
c0004b77:	e8 d8 10 00 00       	call   c0005c54 <ff_memalloc>
c0004b7c:	83 c4 10             	add    esp,0x10
c0004b7f:	85 c0                	test   eax,eax
c0004b81:	89 c7                	mov    edi,eax
c0004b83:	0f 84 49 01 00 00    	je     c0004cd2 <f_mkdir+0x192>
c0004b89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b91:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b98:	e8 7c ee ff ff       	call   c0003a19 <follow_path>
c0004b9d:	85 c0                	test   eax,eax
c0004b9f:	89 c3                	mov    ebx,eax
c0004ba1:	74 3e                	je     c0004be1 <f_mkdir+0xa1>
c0004ba3:	83 f8 04             	cmp    eax,0x4
c0004ba6:	75 3e                	jne    c0004be6 <f_mkdir+0xa6>
c0004ba8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bac:	31 d2                	xor    edx,edx
c0004bae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 63 e8 ff ff       	call   c000341e <create_chain>
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	89 c6                	mov    esi,eax
c0004bbf:	74 0c                	je     c0004bcd <f_mkdir+0x8d>
c0004bc1:	83 f8 01             	cmp    eax,0x1
c0004bc4:	bb 02 00 00 00       	mov    ebx,0x2
c0004bc9:	74 07                	je     c0004bd2 <f_mkdir+0x92>
c0004bcb:	eb 2a                	jmp    c0004bf7 <f_mkdir+0xb7>
c0004bcd:	bb 07 00 00 00       	mov    ebx,0x7
c0004bd2:	31 c9                	xor    ecx,ecx
c0004bd4:	89 f2                	mov    edx,esi
c0004bd6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bda:	e8 79 e9 ff ff       	call   c0003558 <remove_chain>
c0004bdf:	eb 05                	jmp    c0004be6 <f_mkdir+0xa6>
c0004be1:	bb 08 00 00 00       	mov    ebx,0x8
c0004be6:	83 ec 0c             	sub    esp,0xc
c0004be9:	57                   	push   edi
c0004bea:	e8 7d 10 00 00       	call   c0005c6c <ff_memfree>
c0004bef:	83 c4 10             	add    esp,0x10
c0004bf2:	e9 db 00 00 00       	jmp    c0004cd2 <f_mkdir+0x192>
c0004bf7:	83 f8 ff             	cmp    eax,0xffffffff
c0004bfa:	bb 01 00 00 00       	mov    ebx,0x1
c0004bff:	74 d1                	je     c0004bd2 <f_mkdir+0x92>
c0004c01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c05:	89 f2                	mov    edx,esi
c0004c07:	e8 19 dd ff ff       	call   c0002925 <dir_clear>
c0004c0c:	85 c0                	test   eax,eax
c0004c0e:	89 c3                	mov    ebx,eax
c0004c10:	75 c0                	jne    c0004bd2 <f_mkdir+0x92>
c0004c12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0004c1b:	ba 20 00 00 00       	mov    edx,0x20
c0004c20:	83 c0 34             	add    eax,0x34
c0004c23:	e8 28 d2 ff ff       	call   c0001e50 <mem_set>
c0004c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c31:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c35:	83 c0 4a             	add    eax,0x4a
c0004c38:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004c3c:	e8 f7 d1 ff ff       	call   c0001e38 <st_dword>
c0004c41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c45:	89 f1                	mov    ecx,esi
c0004c47:	8d 50 34             	lea    edx,[eax+0x34]
c0004c4a:	e8 da e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c53:	b9 20 00 00 00       	mov    ecx,0x20
c0004c58:	8d 50 34             	lea    edx,[eax+0x34]
c0004c5b:	83 c0 54             	add    eax,0x54
c0004c5e:	e8 d8 d1 ff ff       	call   c0001e3b <mem_cpy>
c0004c63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c67:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c6b:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c6f:	8d 50 54             	lea    edx,[eax+0x54]
c0004c72:	e8 b2 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c7b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c7f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c83:	e8 2e ee ff ff       	call   c0003ab6 <dir_register>
c0004c88:	85 c0                	test   eax,eax
c0004c8a:	89 c3                	mov    ebx,eax
c0004c8c:	0f 85 40 ff ff ff    	jne    c0004bd2 <f_mkdir+0x92>
c0004c92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c96:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c9b:	83 c0 16             	add    eax,0x16
c0004c9e:	e8 95 d1 ff ff       	call   c0001e38 <st_dword>
c0004ca3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ca7:	89 f1                	mov    ecx,esi
c0004ca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cad:	e8 77 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004cb2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004cb6:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004cba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cbe:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cc6:	e8 de e0 ff ff       	call   c0002da9 <sync_fs>
c0004ccb:	89 c3                	mov    ebx,eax
c0004ccd:	e9 14 ff ff ff       	jmp    c0004be6 <f_mkdir+0xa6>
c0004cd2:	83 c4 50             	add    esp,0x50
c0004cd5:	89 d8                	mov    eax,ebx
c0004cd7:	5b                   	pop    ebx
c0004cd8:	5e                   	pop    esi
c0004cd9:	5f                   	pop    edi
c0004cda:	c3                   	ret    

c0004cdb <f_rename>:
c0004cdb:	57                   	push   edi
c0004cdc:	56                   	push   esi
c0004cdd:	53                   	push   ebx
c0004cde:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ce4:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ceb:	e8 8f d5 ff ff       	call   c000227f <get_ldnumber>
c0004cf0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cf4:	b9 02 00 00 00       	mov    ecx,0x2
c0004cf9:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004d00:	e8 cc d7 ff ff       	call   c00024d1 <mount_volume>
c0004d05:	85 c0                	test   eax,eax
c0004d07:	0f 85 7c 01 00 00    	jne    c0004e89 <f_rename+0x1ae>
c0004d0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004d18:	68 00 02 00 00       	push   0x200
c0004d1d:	e8 32 0f 00 00       	call   c0005c54 <ff_memalloc>
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	89 c6                	mov    esi,eax
c0004d27:	b8 11 00 00 00       	mov    eax,0x11
c0004d2c:	85 f6                	test   esi,esi
c0004d2e:	0f 84 55 01 00 00    	je     c0004e89 <f_rename+0x1ae>
c0004d34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d38:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d3f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d42:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d46:	e8 ce ec ff ff       	call   c0003a19 <follow_path>
c0004d4b:	85 c0                	test   eax,eax
c0004d4d:	0f 85 22 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d53:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d57:	b8 06 00 00 00       	mov    eax,0x6
c0004d5c:	80 e2 a0             	and    dl,0xa0
c0004d5f:	0f 85 10 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d65:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d69:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d6d:	b9 20 00 00 00       	mov    ecx,0x20
c0004d72:	e8 c4 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d77:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d7b:	b9 30 00 00 00       	mov    ecx,0x30
c0004d80:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d84:	e8 b2 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d89:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d90:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d94:	e8 80 ec ff ff       	call   c0003a19 <follow_path>
c0004d99:	85 c0                	test   eax,eax
c0004d9b:	75 20                	jne    c0004dbd <f_rename+0xe2>
c0004d9d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004da1:	b8 08 00 00 00       	mov    eax,0x8
c0004da6:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004daa:	0f 85 c5 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004db0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004db4:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004dbb:	eb 03                	jmp    c0004dc0 <f_rename+0xe5>
c0004dbd:	83 f8 04             	cmp    eax,0x4
c0004dc0:	0f 85 af 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dc6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004dca:	e8 e7 ec ff ff       	call   c0003ab6 <dir_register>
c0004dcf:	85 c0                	test   eax,eax
c0004dd1:	0f 85 9e 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dd7:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dde:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004de2:	b9 13 00 00 00       	mov    ecx,0x13
c0004de7:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dea:	e8 4c d0 ff ff       	call   c0001e3b <mem_cpy>
c0004def:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004df3:	a8 10                	test   al,0x10
c0004df5:	75 03                	jne    c0004dfa <f_rename+0x11f>
c0004df7:	83 c8 20             	or     eax,0x20
c0004dfa:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e01:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e05:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004e09:	74 54                	je     c0004e5f <f_rename+0x184>
c0004e0b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004e0f:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004e13:	74 4a                	je     c0004e5f <f_rename+0x184>
c0004e15:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004e19:	89 da                	mov    edx,ebx
c0004e1b:	8a 07                	mov    al,BYTE PTR [edi]
c0004e1d:	e8 de e3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004e22:	89 c2                	mov    edx,eax
c0004e24:	89 f8                	mov    eax,edi
c0004e26:	e8 3a d2 ff ff       	call   c0002065 <clst2sect>
c0004e2b:	89 c2                	mov    edx,eax
c0004e2d:	b8 02 00 00 00       	mov    eax,0x2
c0004e32:	85 d2                	test   edx,edx
c0004e34:	74 3f                	je     c0004e75 <f_rename+0x19a>
c0004e36:	89 f8                	mov    eax,edi
c0004e38:	e8 37 d5 ff ff       	call   c0002374 <move_window>
c0004e3d:	85 c0                	test   eax,eax
c0004e3f:	75 34                	jne    c0004e75 <f_rename+0x19a>
c0004e41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e45:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e49:	75 14                	jne    c0004e5f <f_rename+0x184>
c0004e4b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e4f:	8d 50 54             	lea    edx,[eax+0x54]
c0004e52:	e8 d2 e3 ff ff       	call   c0003229 <st_clust.isra.1>
c0004e57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e5b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e5f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e63:	e8 10 ea ff ff       	call   c0003878 <dir_remove>
c0004e68:	85 c0                	test   eax,eax
c0004e6a:	75 09                	jne    c0004e75 <f_rename+0x19a>
c0004e6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e70:	e8 34 df ff ff       	call   c0002da9 <sync_fs>
c0004e75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e79:	83 ec 0c             	sub    esp,0xc
c0004e7c:	56                   	push   esi
c0004e7d:	e8 ea 0d 00 00       	call   c0005c6c <ff_memfree>
c0004e82:	83 c4 10             	add    esp,0x10
c0004e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e89:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e8f:	5b                   	pop    ebx
c0004e90:	5e                   	pop    esi
c0004e91:	5f                   	pop    edi
c0004e92:	c3                   	ret    

c0004e93 <f_chmod>:
c0004e93:	57                   	push   edi
c0004e94:	b9 02 00 00 00       	mov    ecx,0x2
c0004e99:	56                   	push   esi
c0004e9a:	53                   	push   ebx
c0004e9b:	83 ec 50             	sub    esp,0x50
c0004e9e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ea2:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004ea6:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004eaa:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004eae:	e8 1e d6 ff ff       	call   c00024d1 <mount_volume>
c0004eb3:	85 c0                	test   eax,eax
c0004eb5:	0f 85 81 00 00 00    	jne    c0004f3c <f_chmod+0xa9>
c0004ebb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebf:	83 ec 0c             	sub    esp,0xc
c0004ec2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ec6:	68 00 02 00 00       	push   0x200
c0004ecb:	e8 84 0d 00 00       	call   c0005c54 <ff_memalloc>
c0004ed0:	83 c4 10             	add    esp,0x10
c0004ed3:	89 c6                	mov    esi,eax
c0004ed5:	b8 11 00 00 00       	mov    eax,0x11
c0004eda:	85 f6                	test   esi,esi
c0004edc:	74 5e                	je     c0004f3c <f_chmod+0xa9>
c0004ede:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ee2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ee6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ee9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eed:	e8 27 eb ff ff       	call   c0003a19 <follow_path>
c0004ef2:	85 c0                	test   eax,eax
c0004ef4:	75 32                	jne    c0004f28 <f_chmod+0x95>
c0004ef6:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004efa:	b8 06 00 00 00       	mov    eax,0x6
c0004eff:	80 e2 a0             	and    dl,0xa0
c0004f02:	75 24                	jne    c0004f28 <f_chmod+0x95>
c0004f04:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f08:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004f0b:	31 d7                	xor    edi,edx
c0004f0d:	21 fb                	and    ebx,edi
c0004f0f:	83 e3 27             	and    ebx,0x27
c0004f12:	31 d3                	xor    ebx,edx
c0004f14:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004f17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f23:	e8 81 de ff ff       	call   c0002da9 <sync_fs>
c0004f28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f2c:	83 ec 0c             	sub    esp,0xc
c0004f2f:	56                   	push   esi
c0004f30:	e8 37 0d 00 00       	call   c0005c6c <ff_memfree>
c0004f35:	83 c4 10             	add    esp,0x10
c0004f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f3c:	83 c4 50             	add    esp,0x50
c0004f3f:	5b                   	pop    ebx
c0004f40:	5e                   	pop    esi
c0004f41:	5f                   	pop    edi
c0004f42:	c3                   	ret    

c0004f43 <f_utime>:
c0004f43:	56                   	push   esi
c0004f44:	b9 02 00 00 00       	mov    ecx,0x2
c0004f49:	53                   	push   ebx
c0004f4a:	83 ec 54             	sub    esp,0x54
c0004f4d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f51:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f55:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f59:	e8 73 d5 ff ff       	call   c00024d1 <mount_volume>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	0f 85 87 00 00 00    	jne    c0004fed <f_utime+0xaa>
c0004f66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f6a:	83 ec 0c             	sub    esp,0xc
c0004f6d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f71:	68 00 02 00 00       	push   0x200
c0004f76:	e8 d9 0c 00 00       	call   c0005c54 <ff_memalloc>
c0004f7b:	83 c4 10             	add    esp,0x10
c0004f7e:	89 c3                	mov    ebx,eax
c0004f80:	b8 11 00 00 00       	mov    eax,0x11
c0004f85:	85 db                	test   ebx,ebx
c0004f87:	74 64                	je     c0004fed <f_utime+0xaa>
c0004f89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f91:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f98:	e8 7c ea ff ff       	call   c0003a19 <follow_path>
c0004f9d:	85 c0                	test   eax,eax
c0004f9f:	75 38                	jne    c0004fd9 <f_utime+0x96>
c0004fa1:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004fa5:	b8 06 00 00 00       	mov    eax,0x6
c0004faa:	80 e2 a0             	and    dl,0xa0
c0004fad:	75 2a                	jne    c0004fd9 <f_utime+0x96>
c0004faf:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004fb3:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004fb7:	c1 e2 10             	shl    edx,0x10
c0004fba:	09 c2                	or     edx,eax
c0004fbc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fc0:	83 c0 16             	add    eax,0x16
c0004fc3:	e8 70 ce ff ff       	call   c0001e38 <st_dword>
c0004fc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fcc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fd4:	e8 d0 dd ff ff       	call   c0002da9 <sync_fs>
c0004fd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fdd:	83 ec 0c             	sub    esp,0xc
c0004fe0:	53                   	push   ebx
c0004fe1:	e8 86 0c 00 00       	call   c0005c6c <ff_memfree>
c0004fe6:	83 c4 10             	add    esp,0x10
c0004fe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fed:	83 c4 54             	add    esp,0x54
c0004ff0:	5b                   	pop    ebx
c0004ff1:	5e                   	pop    esi
c0004ff2:	c3                   	ret    

c0004ff3 <f_getlabel>:
c0004ff3:	55                   	push   ebp
c0004ff4:	31 c9                	xor    ecx,ecx
c0004ff6:	57                   	push   edi
c0004ff7:	56                   	push   esi
c0004ff8:	53                   	push   ebx
c0004ff9:	83 ec 5c             	sub    esp,0x5c
c0004ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005000:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c0005004:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005008:	e8 c4 d4 ff ff       	call   c00024d1 <mount_volume>
c000500d:	85 c0                	test   eax,eax
c000500f:	89 c3                	mov    ebx,eax
c0005011:	0f 85 d9 00 00 00    	jne    c00050f0 <f_getlabel+0xfd>
c0005017:	85 ff                	test   edi,edi
c0005019:	0f 84 d1 00 00 00    	je     c00050f0 <f_getlabel+0xfd>
c000501f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005027:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000502b:	31 d2                	xor    edx,edx
c000502d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005031:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005035:	e8 1c e3 ff ff       	call   c0003356 <dir_sdi>
c000503a:	85 c0                	test   eax,eax
c000503c:	89 c3                	mov    ebx,eax
c000503e:	0f 85 a2 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c0005044:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005048:	ba 01 00 00 00       	mov    edx,0x1
c000504d:	e8 fe e6 ff ff       	call   c0003750 <dir_read>
c0005052:	85 c0                	test   eax,eax
c0005054:	89 c3                	mov    ebx,eax
c0005056:	0f 85 8a 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c000505c:	31 f6                	xor    esi,esi
c000505e:	31 d2                	xor    edx,edx
c0005060:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005064:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005067:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000506b:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c000506f:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005074:	89 c8                	mov    eax,ecx
c0005076:	e8 13 ce ff ff       	call   c0001e8e <dbc_1st>
c000507b:	85 c0                	test   eax,eax
c000507d:	74 19                	je     c0005098 <f_getlabel+0xa5>
c000507f:	83 fd 0b             	cmp    ebp,0xb
c0005082:	74 14                	je     c0005098 <f_getlabel+0xa5>
c0005084:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005088:	c1 e1 08             	shl    ecx,0x8
c000508b:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c000508f:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005092:	09 c1                	or     ecx,eax
c0005094:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005098:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000509d:	52                   	push   edx
c000509e:	52                   	push   edx
c000509f:	68 b5 01 00 00       	push   0x1b5
c00050a4:	50                   	push   eax
c00050a5:	e8 76 0c 00 00       	call   c0005d20 <ff_oem2uni>
c00050aa:	83 c4 10             	add    esp,0x10
c00050ad:	0f b7 c0             	movzx  eax,ax
c00050b0:	85 c0                	test   eax,eax
c00050b2:	74 1f                	je     c00050d3 <f_getlabel+0xe0>
c00050b4:	8d 14 37             	lea    edx,[edi+esi*1]
c00050b7:	b9 04 00 00 00       	mov    ecx,0x4
c00050bc:	e8 ab ce ff ff       	call   c0001f6c <put_utf>
c00050c1:	0f b6 c0             	movzx  eax,al
c00050c4:	85 c0                	test   eax,eax
c00050c6:	74 0b                	je     c00050d3 <f_getlabel+0xe0>
c00050c8:	01 c6                	add    esi,eax
c00050ca:	83 fd 0b             	cmp    ebp,0xb
c00050cd:	74 06                	je     c00050d5 <f_getlabel+0xe2>
c00050cf:	89 ea                	mov    edx,ebp
c00050d1:	eb 8d                	jmp    c0005060 <f_getlabel+0x6d>
c00050d3:	31 f6                	xor    esi,esi
c00050d5:	01 fe                	add    esi,edi
c00050d7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00050da:	39 f7                	cmp    edi,esi
c00050dc:	74 12                	je     c00050f0 <f_getlabel+0xfd>
c00050de:	4e                   	dec    esi
c00050df:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00050e2:	74 f3                	je     c00050d7 <f_getlabel+0xe4>
c00050e4:	eb 0a                	jmp    c00050f0 <f_getlabel+0xfd>
c00050e6:	83 fb 04             	cmp    ebx,0x4
c00050e9:	75 05                	jne    c00050f0 <f_getlabel+0xfd>
c00050eb:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00050ee:	31 db                	xor    ebx,ebx
c00050f0:	85 db                	test   ebx,ebx
c00050f2:	75 49                	jne    c000513d <f_getlabel+0x14a>
c00050f4:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050f9:	74 42                	je     c000513d <f_getlabel+0x14a>
c00050fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050ff:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0005102:	e8 6d d2 ff ff       	call   c0002374 <move_window>
c0005107:	85 c0                	test   eax,eax
c0005109:	89 c3                	mov    ebx,eax
c000510b:	75 30                	jne    c000513d <f_getlabel+0x14a>
c000510d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005111:	b8 43 00 00 00       	mov    eax,0x43
c0005116:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c0005119:	83 f9 03             	cmp    ecx,0x3
c000511c:	74 10                	je     c000512e <f_getlabel+0x13b>
c000511e:	83 f9 04             	cmp    ecx,0x4
c0005121:	b8 64 00 00 00       	mov    eax,0x64
c0005126:	b9 27 00 00 00       	mov    ecx,0x27
c000512b:	0f 45 c1             	cmovne eax,ecx
c000512e:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005132:	e8 e5 cc ff ff       	call   c0001e1c <ld_dword>
c0005137:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000513b:	89 07                	mov    DWORD PTR [edi],eax
c000513d:	83 c4 5c             	add    esp,0x5c
c0005140:	89 d8                	mov    eax,ebx
c0005142:	5b                   	pop    ebx
c0005143:	5e                   	pop    esi
c0005144:	5f                   	pop    edi
c0005145:	5d                   	pop    ebp
c0005146:	c3                   	ret    

c0005147 <f_setlabel>:
c0005147:	57                   	push   edi
c0005148:	b9 02 00 00 00       	mov    ecx,0x2
c000514d:	56                   	push   esi
c000514e:	53                   	push   ebx
c000514f:	83 ec 50             	sub    esp,0x50
c0005152:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005156:	8d 44 24 60          	lea    eax,[esp+0x60]
c000515a:	e8 72 d3 ff ff       	call   c00024d1 <mount_volume>
c000515f:	85 c0                	test   eax,eax
c0005161:	89 c6                	mov    esi,eax
c0005163:	0f 85 65 01 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005169:	b9 0b 00 00 00       	mov    ecx,0xb
c000516e:	ba 20 00 00 00       	mov    edx,0x20
c0005173:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005177:	31 db                	xor    ebx,ebx
c0005179:	e8 d2 cc ff ff       	call   c0001e50 <mem_set>
c000517e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005182:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005185:	76 5d                	jbe    c00051e4 <f_setlabel+0x9d>
c0005187:	8d 44 24 60          	lea    eax,[esp+0x60]
c000518b:	e8 04 cd ff ff       	call   c0001e94 <tchar2uni>
c0005190:	3d ff ff 00 00       	cmp    eax,0xffff
c0005195:	76 0a                	jbe    c00051a1 <f_setlabel+0x5a>
c0005197:	be 06 00 00 00       	mov    esi,0x6
c000519c:	e9 2d 01 00 00       	jmp    c00052ce <f_setlabel+0x187>
c00051a1:	83 ec 0c             	sub    esp,0xc
c00051a4:	50                   	push   eax
c00051a5:	e8 ee 0b 00 00       	call   c0005d98 <ff_wtoupper>
c00051aa:	5a                   	pop    edx
c00051ab:	59                   	pop    ecx
c00051ac:	68 b5 01 00 00       	push   0x1b5
c00051b1:	50                   	push   eax
c00051b2:	e8 cd 0a 00 00       	call   c0005c84 <ff_uni2oem>
c00051b7:	83 c4 10             	add    esp,0x10
c00051ba:	0f b7 f0             	movzx  esi,ax
c00051bd:	85 f6                	test   esi,esi
c00051bf:	89 f7                	mov    edi,esi
c00051c1:	74 d4                	je     c0005197 <f_setlabel+0x50>
c00051c3:	89 f2                	mov    edx,esi
c00051c5:	b8 50 01 02 c0       	mov    eax,0xc0020150
c00051ca:	e8 ae cc ff ff       	call   c0001e7d <chk_chr>
c00051cf:	85 c0                	test   eax,eax
c00051d1:	75 c4                	jne    c0005197 <f_setlabel+0x50>
c00051d3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051d9:	0f 87 c9 00 00 00    	ja     c00052a8 <f_setlabel+0x161>
c00051df:	e9 e0 00 00 00       	jmp    c00052c4 <f_setlabel+0x17d>
c00051e4:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051e9:	74 ac                	je     c0005197 <f_setlabel+0x50>
c00051eb:	85 db                	test   ebx,ebx
c00051ed:	74 0e                	je     c00051fd <f_setlabel+0xb6>
c00051ef:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051f4:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051f7:	75 04                	jne    c00051fd <f_setlabel+0xb6>
c00051f9:	89 c3                	mov    ebx,eax
c00051fb:	eb ee                	jmp    c00051eb <f_setlabel+0xa4>
c00051fd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005205:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005209:	31 d2                	xor    edx,edx
c000520b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000520f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005213:	e8 3e e1 ff ff       	call   c0003356 <dir_sdi>
c0005218:	85 c0                	test   eax,eax
c000521a:	89 c6                	mov    esi,eax
c000521c:	0f 85 ac 00 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005222:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005226:	ba 01 00 00 00       	mov    edx,0x1
c000522b:	e8 20 e5 ff ff       	call   c0003750 <dir_read>
c0005230:	85 c0                	test   eax,eax
c0005232:	75 18                	jne    c000524c <f_setlabel+0x105>
c0005234:	85 db                	test   ebx,ebx
c0005236:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000523a:	74 0b                	je     c0005247 <f_setlabel+0x100>
c000523c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005240:	b9 0b 00 00 00       	mov    ecx,0xb
c0005245:	eb 47                	jmp    c000528e <f_setlabel+0x147>
c0005247:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000524a:	eb 47                	jmp    c0005293 <f_setlabel+0x14c>
c000524c:	83 f8 04             	cmp    eax,0x4
c000524f:	75 53                	jne    c00052a4 <f_setlabel+0x15d>
c0005251:	85 db                	test   ebx,ebx
c0005253:	74 79                	je     c00052ce <f_setlabel+0x187>
c0005255:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005259:	ba 01 00 00 00       	mov    edx,0x1
c000525e:	e8 88 e4 ff ff       	call   c00036eb <dir_alloc>
c0005263:	85 c0                	test   eax,eax
c0005265:	89 c6                	mov    esi,eax
c0005267:	75 65                	jne    c00052ce <f_setlabel+0x187>
c0005269:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000526d:	b9 20 00 00 00       	mov    ecx,0x20
c0005272:	31 d2                	xor    edx,edx
c0005274:	e8 d7 cb ff ff       	call   c0001e50 <mem_set>
c0005279:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000527d:	b9 0b 00 00 00       	mov    ecx,0xb
c0005282:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005286:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000528a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000528e:	e8 a8 cb ff ff       	call   c0001e3b <mem_cpy>
c0005293:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005297:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000529b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000529f:	e8 05 db ff ff       	call   c0002da9 <sync_fs>
c00052a4:	89 c6                	mov    esi,eax
c00052a6:	eb 26                	jmp    c00052ce <f_setlabel+0x187>
c00052a8:	83 fb 09             	cmp    ebx,0x9
c00052ab:	0f 87 e6 fe ff ff    	ja     c0005197 <f_setlabel+0x50>
c00052b1:	89 f0                	mov    eax,esi
c00052b3:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c00052b7:	43                   	inc    ebx
c00052b8:	89 f8                	mov    eax,edi
c00052ba:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c00052be:	43                   	inc    ebx
c00052bf:	e9 ba fe ff ff       	jmp    c000517e <f_setlabel+0x37>
c00052c4:	83 fb 0a             	cmp    ebx,0xa
c00052c7:	76 ef                	jbe    c00052b8 <f_setlabel+0x171>
c00052c9:	e9 c9 fe ff ff       	jmp    c0005197 <f_setlabel+0x50>
c00052ce:	83 c4 50             	add    esp,0x50
c00052d1:	89 f0                	mov    eax,esi
c00052d3:	5b                   	pop    ebx
c00052d4:	5e                   	pop    esi
c00052d5:	5f                   	pop    edi
c00052d6:	c3                   	ret    

c00052d7 <f_expand>:
c00052d7:	55                   	push   ebp
c00052d8:	57                   	push   edi
c00052d9:	56                   	push   esi
c00052da:	53                   	push   ebx
c00052db:	83 ec 2c             	sub    esp,0x2c
c00052de:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052ee:	89 d8                	mov    eax,ebx
c00052f0:	e8 d6 cf ff ff       	call   c00022cb <validate>
c00052f5:	85 c0                	test   eax,eax
c00052f7:	89 c6                	mov    esi,eax
c00052f9:	0f 85 3b 01 00 00    	jne    c000543a <f_expand+0x163>
c00052ff:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005303:	85 f6                	test   esi,esi
c0005305:	0f 85 2f 01 00 00    	jne    c000543a <f_expand+0x163>
c000530b:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005310:	75 0a                	jne    c000531c <f_expand+0x45>
c0005312:	be 07 00 00 00       	mov    esi,0x7
c0005317:	e9 1e 01 00 00       	jmp    c000543a <f_expand+0x163>
c000531c:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005320:	75 f0                	jne    c0005312 <f_expand+0x3b>
c0005322:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005326:	74 ea                	je     c0005312 <f_expand+0x3b>
c0005328:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000532c:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8d 47 ff             	lea    eax,[edi-0x1]
c0005336:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000533a:	0f 95 c0             	setne  al
c000533d:	31 d2                	xor    edx,edx
c000533f:	0f b6 c0             	movzx  eax,al
c0005342:	89 c5                	mov    ebp,eax
c0005344:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005348:	f7 f7                	div    edi
c000534a:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000534d:	01 e8                	add    eax,ebp
c000534f:	83 ff 01             	cmp    edi,0x1
c0005352:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005356:	76 05                	jbe    c000535d <f_expand+0x86>
c0005358:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000535b:	77 05                	ja     c0005362 <f_expand+0x8b>
c000535d:	bf 02 00 00 00       	mov    edi,0x2
c0005362:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005365:	89 fd                	mov    ebp,edi
c0005367:	31 c9                	xor    ecx,ecx
c0005369:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000536d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000536f:	89 ea                	mov    edx,ebp
c0005371:	45                   	inc    ebp
c0005372:	e8 da de ff ff       	call   c0003251 <get_fat.isra.2>
c0005377:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000537b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000537f:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005382:	77 05                	ja     c0005389 <f_expand+0xb2>
c0005384:	bd 02 00 00 00       	mov    ebp,0x2
c0005389:	83 f8 01             	cmp    eax,0x1
c000538c:	74 20                	je     c00053ae <f_expand+0xd7>
c000538e:	83 f8 ff             	cmp    eax,0xffffffff
c0005391:	74 25                	je     c00053b8 <f_expand+0xe1>
c0005393:	85 c0                	test   eax,eax
c0005395:	75 09                	jne    c00053a0 <f_expand+0xc9>
c0005397:	41                   	inc    ecx
c0005398:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000539c:	75 07                	jne    c00053a5 <f_expand+0xce>
c000539e:	eb 1f                	jmp    c00053bf <f_expand+0xe8>
c00053a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00053a3:	31 c9                	xor    ecx,ecx
c00053a5:	39 fd                	cmp    ebp,edi
c00053a7:	75 c0                	jne    c0005369 <f_expand+0x92>
c00053a9:	e9 64 ff ff ff       	jmp    c0005312 <f_expand+0x3b>
c00053ae:	be 02 00 00 00       	mov    esi,0x2
c00053b3:	e9 82 00 00 00       	jmp    c000543a <f_expand+0x163>
c00053b8:	be 01 00 00 00       	mov    esi,0x1
c00053bd:	eb 7b                	jmp    c000543a <f_expand+0x163>
c00053bf:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053c4:	74 2b                	je     c00053f1 <f_expand+0x11a>
c00053c6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053c9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053cd:	85 ed                	test   ebp,ebp
c00053cf:	74 24                	je     c00053f5 <f_expand+0x11e>
c00053d1:	83 c9 ff             	or     ecx,0xffffffff
c00053d4:	83 fd 01             	cmp    ebp,0x1
c00053d7:	74 03                	je     c00053dc <f_expand+0x105>
c00053d9:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053e0:	89 fa                	mov    edx,edi
c00053e2:	e8 e7 d3 ff ff       	call   c00027ce <put_fat>
c00053e7:	85 c0                	test   eax,eax
c00053e9:	75 4d                	jne    c0005438 <f_expand+0x161>
c00053eb:	89 f8                	mov    eax,edi
c00053ed:	4d                   	dec    ebp
c00053ee:	47                   	inc    edi
c00053ef:	eb dc                	jmp    c00053cd <f_expand+0xf6>
c00053f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053f4:	48                   	dec    eax
c00053f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053f9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053fe:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005401:	74 37                	je     c000543a <f_expand+0x163>
c0005403:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005406:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005409:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000540d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005410:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0005413:	83 c8 40             	or     eax,0x40
c0005416:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005419:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c000541c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000541f:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005422:	39 c8                	cmp    eax,ecx
c0005424:	77 14                	ja     c000543a <f_expand+0x163>
c0005426:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000542a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000542d:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005430:	83 c8 01             	or     eax,0x1
c0005433:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005436:	eb 02                	jmp    c000543a <f_expand+0x163>
c0005438:	89 c6                	mov    esi,eax
c000543a:	83 c4 2c             	add    esp,0x2c
c000543d:	89 f0                	mov    eax,esi
c000543f:	5b                   	pop    ebx
c0005440:	5e                   	pop    esi
c0005441:	5f                   	pop    edi
c0005442:	5d                   	pop    ebp
c0005443:	c3                   	ret    

c0005444 <f_mkfs>:
c0005444:	55                   	push   ebp
c0005445:	57                   	push   edi
c0005446:	56                   	push   esi
c0005447:	be 0b 00 00 00       	mov    esi,0xb
c000544c:	53                   	push   ebx
c000544d:	83 ec 5c             	sub    esp,0x5c
c0005450:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005454:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005458:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000545c:	e8 1e ce ff ff       	call   c000227f <get_ldnumber>
c0005461:	85 c0                	test   eax,eax
c0005463:	0f 88 e0 07 00 00    	js     c0005c49 <f_mkfs+0x805>
c0005469:	8b 14 85 a0 54 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdab60]
c0005470:	85 d2                	test   edx,edx
c0005472:	74 03                	je     c0005477 <f_mkfs+0x33>
c0005474:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005477:	85 db                	test   ebx,ebx
c0005479:	75 05                	jne    c0005480 <f_mkfs+0x3c>
c000547b:	bb 40 01 02 c0       	mov    ebx,0xc0020140
c0005480:	0f b6 c0             	movzx  eax,al
c0005483:	83 ec 0c             	sub    esp,0xc
c0005486:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000548a:	be 03 00 00 00       	mov    esi,0x3
c000548f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005493:	e8 29 c9 ff ff       	call   c0001dc1 <disk_initialize>
c0005498:	83 c4 10             	add    esp,0x10
c000549b:	a8 01                	test   al,0x1
c000549d:	0f 85 a6 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054a3:	a8 04                	test   al,0x4
c00054a5:	be 0a 00 00 00       	mov    esi,0xa
c00054aa:	0f 85 99 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054b0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00054b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00054b7:	85 c0                	test   eax,eax
c00054b9:	75 20                	jne    c00054db <f_mkfs+0x97>
c00054bb:	51                   	push   ecx
c00054bc:	8d 44 24 44          	lea    eax,[esp+0x44]
c00054c0:	50                   	push   eax
c00054c1:	6a 03                	push   0x3
c00054c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054c7:	e8 24 c9 ff ff       	call   c0001df0 <disk_ioctl>
c00054cc:	83 c4 10             	add    esp,0x10
c00054cf:	85 c0                	test   eax,eax
c00054d1:	74 08                	je     c00054db <f_mkfs+0x97>
c00054d3:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054db:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054df:	8d 42 ff             	lea    eax,[edx-0x1]
c00054e2:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054e7:	77 04                	ja     c00054ed <f_mkfs+0xa9>
c00054e9:	85 c2                	test   edx,eax
c00054eb:	74 08                	je     c00054f5 <f_mkfs+0xb1>
c00054ed:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054f5:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054f8:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005500:	48                   	dec    eax
c0005501:	3c 01                	cmp    al,0x1
c0005503:	76 05                	jbe    c000550a <f_mkfs+0xc6>
c0005505:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000550a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000550d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005511:	48                   	dec    eax
c0005512:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005517:	77 15                	ja     c000552e <f_mkfs+0xea>
c0005519:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c000551e:	b8 00 02 00 00       	mov    eax,0x200
c0005523:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005528:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000552c:	eb 08                	jmp    c0005536 <f_mkfs+0xf2>
c000552e:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005536:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005539:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000553f:	77 0f                	ja     c0005550 <f_mkfs+0x10c>
c0005541:	8d 47 ff             	lea    eax,[edi-0x1]
c0005544:	85 f8                	test   eax,edi
c0005546:	b8 00 00 00 00       	mov    eax,0x0
c000554b:	0f 45 f8             	cmovne edi,eax
c000554e:	eb 02                	jmp    c0005552 <f_mkfs+0x10e>
c0005550:	31 ff                	xor    edi,edi
c0005552:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000555a:	77 0a                	ja     c0005566 <f_mkfs+0x122>
c000555c:	be 11 00 00 00       	mov    esi,0x11
c0005561:	e9 e3 06 00 00       	jmp    c0005c49 <f_mkfs+0x805>
c0005566:	85 ed                	test   ebp,ebp
c0005568:	8b 33                	mov    esi,DWORD PTR [ebx]
c000556a:	89 eb                	mov    ebx,ebp
c000556c:	75 1e                	jne    c000558c <f_mkfs+0x148>
c000556e:	83 ec 0c             	sub    esp,0xc
c0005571:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005578:	25 00 fe ff ff       	and    eax,0xfffffe00
c000557d:	50                   	push   eax
c000557e:	e8 d1 06 00 00       	call   c0005c54 <ff_memalloc>
c0005583:	83 c4 10             	add    esp,0x10
c0005586:	85 c0                	test   eax,eax
c0005588:	89 c3                	mov    ebx,eax
c000558a:	74 d0                	je     c000555c <f_mkfs+0x118>
c000558c:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005594:	52                   	push   edx
c0005595:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005599:	50                   	push   eax
c000559a:	6a 01                	push   0x1
c000559c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00055a0:	e8 4b c8 ff ff       	call   c0001df0 <disk_ioctl>
c00055a5:	83 c4 10             	add    esp,0x10
c00055a8:	85 c0                	test   eax,eax
c00055aa:	0f 85 42 06 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00055b0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00055b8:	89 f0                	mov    eax,esi
c00055ba:	83 e0 08             	and    eax,0x8
c00055bd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00055c1:	75 18                	jne    c00055db <f_mkfs+0x197>
c00055c3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055c7:	83 f8 3f             	cmp    eax,0x3f
c00055ca:	76 0f                	jbe    c00055db <f_mkfs+0x197>
c00055cc:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00055d4:	83 e8 3f             	sub    eax,0x3f
c00055d7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00055db:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055e3:	83 f8 7f             	cmp    eax,0x7f
c00055e6:	0f 86 5f 02 00 00    	jbe    c000584b <f_mkfs+0x407>
c00055ec:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055f2:	b9 80 00 00 00       	mov    ecx,0x80
c00055f7:	77 05                	ja     c00055fe <f_mkfs+0x1ba>
c00055f9:	c1 ef 09             	shr    edi,0x9
c00055fc:	89 f9                	mov    ecx,edi
c00055fe:	89 f0                	mov    eax,esi
c0005600:	89 f7                	mov    edi,esi
c0005602:	83 e0 01             	and    eax,0x1
c0005605:	83 e7 02             	and    edi,0x2
c0005608:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000560c:	0f b6 c0             	movzx  eax,al
c000560f:	74 0a                	je     c000561b <f_mkfs+0x1d7>
c0005611:	85 c0                	test   eax,eax
c0005613:	0f 84 53 01 00 00    	je     c000576c <f_mkfs+0x328>
c0005619:	eb 37                	jmp    c0005652 <f_mkfs+0x20e>
c000561b:	85 c0                	test   eax,eax
c000561d:	be 13 00 00 00       	mov    esi,0x13
c0005622:	75 2e                	jne    c0005652 <f_mkfs+0x20e>
c0005624:	e9 e0 05 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005629:	83 f8 02             	cmp    eax,0x2
c000562c:	0f 85 11 02 00 00    	jne    c0005843 <f_mkfs+0x3ff>
c0005632:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005638:	0f 86 e8 01 00 00    	jbe    c0005826 <f_mkfs+0x3e2>
c000563e:	85 c9                	test   ecx,ecx
c0005640:	0f 85 d5 05 00 00    	jne    c0005c1b <f_mkfs+0x7d7>
c0005646:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005649:	83 f9 40             	cmp    ecx,0x40
c000564c:	0f 87 d9 05 00 00    	ja     c0005c2b <f_mkfs+0x7e7>
c0005652:	85 c9                	test   ecx,ecx
c0005654:	89 cf                	mov    edi,ecx
c0005656:	75 1c                	jne    c0005674 <f_mkfs+0x230>
c0005658:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000565c:	b8 20 01 02 c0       	mov    eax,0xc0020120
c0005661:	bf 01 00 00 00       	mov    edi,0x1
c0005666:	c1 ee 0c             	shr    esi,0xc
c0005669:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000566c:	85 d2                	test   edx,edx
c000566e:	0f 85 67 01 00 00    	jne    c00057db <f_mkfs+0x397>
c0005674:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005678:	31 d2                	xor    edx,edx
c000567a:	f7 f7                	div    edi
c000567c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005681:	0f 86 66 01 00 00    	jbe    c00057ed <f_mkfs+0x3a9>
c0005687:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000568c:	83 c0 02             	add    eax,0x2
c000568f:	01 c0                	add    eax,eax
c0005691:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005699:	05 ff 01 00 00       	add    eax,0x1ff
c000569e:	c1 e8 09             	shr    eax,0x9
c00056a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00056a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056a9:	c1 e0 05             	shl    eax,0x5
c00056ac:	c1 e8 09             	shr    eax,0x9
c00056af:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00056b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00056b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00056bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00056c0:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00056c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00056c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00056cc:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00056d1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00056d5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00056d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056e1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e5:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056e9:	f7 d8                	neg    eax
c00056eb:	21 c6                	and    esi,eax
c00056ed:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056f2:	29 d6                	sub    esi,edx
c00056f4:	83 f8 03             	cmp    eax,0x3
c00056f7:	0f 85 03 01 00 00    	jne    c0005800 <f_mkfs+0x3bc>
c00056fd:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005701:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005705:	89 f8                	mov    eax,edi
c0005707:	c1 e0 04             	shl    eax,0x4
c000570a:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c000570e:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005712:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005716:	0f 82 2f 01 00 00    	jb     c000584b <f_mkfs+0x407>
c000571c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005720:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005724:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005728:	89 c2                	mov    edx,eax
c000572a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000572e:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005733:	29 c2                	sub    edx,eax
c0005735:	89 d0                	mov    eax,edx
c0005737:	31 d2                	xor    edx,edx
c0005739:	f7 f7                	div    edi
c000573b:	89 c6                	mov    esi,eax
c000573d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005742:	83 f8 03             	cmp    eax,0x3
c0005745:	0f 85 de fe ff ff    	jne    c0005629 <f_mkfs+0x1e5>
c000574b:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005751:	0f 87 03 01 00 00    	ja     c000585a <f_mkfs+0x416>
c0005757:	85 c9                	test   ecx,ecx
c0005759:	0f 85 ec 00 00 00    	jne    c000584b <f_mkfs+0x407>
c000575f:	83 ff 01             	cmp    edi,0x1
c0005762:	0f 86 e3 00 00 00    	jbe    c000584b <f_mkfs+0x407>
c0005768:	d1 ef                	shr    edi,1
c000576a:	89 f9                	mov    ecx,edi
c000576c:	85 c9                	test   ecx,ecx
c000576e:	89 ce                	mov    esi,ecx
c0005770:	75 25                	jne    c0005797 <f_mkfs+0x353>
c0005772:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005776:	b8 30 01 02 c0       	mov    eax,0xc0020130
c000577b:	b9 01 00 00 00       	mov    ecx,0x1
c0005780:	c1 ee 11             	shr    esi,0x11
c0005783:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005786:	85 d2                	test   edx,edx
c0005788:	74 0b                	je     c0005795 <f_mkfs+0x351>
c000578a:	83 c0 02             	add    eax,0x2
c000578d:	39 f2                	cmp    edx,esi
c000578f:	77 04                	ja     c0005795 <f_mkfs+0x351>
c0005791:	01 c9                	add    ecx,ecx
c0005793:	eb ee                	jmp    c0005783 <f_mkfs+0x33f>
c0005795:	31 f6                	xor    esi,esi
c0005797:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000579b:	31 d2                	xor    edx,edx
c000579d:	f7 f1                	div    ecx
c000579f:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00057a6:	2d f6 ff 00 00       	sub    eax,0xfff6
c00057ab:	c1 ea 09             	shr    edx,0x9
c00057ae:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00057b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00057b7:	0f 87 8e 00 00 00    	ja     c000584b <f_mkfs+0x407>
c00057bd:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00057c5:	89 cf                	mov    edi,ecx
c00057c7:	89 f1                	mov    ecx,esi
c00057c9:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00057d1:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00057d6:	e9 d8 fe ff ff       	jmp    c00056b3 <f_mkfs+0x26f>
c00057db:	83 c0 02             	add    eax,0x2
c00057de:	39 f2                	cmp    edx,esi
c00057e0:	0f 87 8e fe ff ff    	ja     c0005674 <f_mkfs+0x230>
c00057e6:	01 ff                	add    edi,edi
c00057e8:	e9 7c fe ff ff       	jmp    c0005669 <f_mkfs+0x225>
c00057ed:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057f2:	8d 04 40             	lea    eax,[eax+eax*2]
c00057f5:	40                   	inc    eax
c00057f6:	d1 e8                	shr    eax,1
c00057f8:	83 c0 03             	add    eax,0x3
c00057fb:	e9 91 fe ff ff       	jmp    c0005691 <f_mkfs+0x24d>
c0005800:	31 d2                	xor    edx,edx
c0005802:	89 f0                	mov    eax,esi
c0005804:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005808:	85 d2                	test   edx,edx
c000580a:	74 09                	je     c0005815 <f_mkfs+0x3d1>
c000580c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005810:	4e                   	dec    esi
c0005811:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005815:	89 f0                	mov    eax,esi
c0005817:	31 d2                	xor    edx,edx
c0005819:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000581d:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005821:	e9 df fe ff ff       	jmp    c0005705 <f_mkfs+0x2c1>
c0005826:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c000582c:	77 2c                	ja     c000585a <f_mkfs+0x416>
c000582e:	85 c9                	test   ecx,ecx
c0005830:	75 19                	jne    c000584b <f_mkfs+0x407>
c0005832:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005835:	81 f9 80 00 00 00    	cmp    ecx,0x80
c000583b:	0f 86 11 fe ff ff    	jbe    c0005652 <f_mkfs+0x20e>
c0005841:	eb 08                	jmp    c000584b <f_mkfs+0x407>
c0005843:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005849:	76 0a                	jbe    c0005855 <f_mkfs+0x411>
c000584b:	be 0e 00 00 00       	mov    esi,0xe
c0005850:	e9 b4 03 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005855:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000585a:	31 d2                	xor    edx,edx
c000585c:	b9 00 02 00 00       	mov    ecx,0x200
c0005861:	89 d8                	mov    eax,ebx
c0005863:	e8 e8 c5 ff ff       	call   c0001e50 <mem_set>
c0005868:	b9 0b 00 00 00       	mov    ecx,0xb
c000586d:	ba d2 00 02 c0       	mov    edx,0xc00200d2
c0005872:	89 d8                	mov    eax,ebx
c0005874:	e8 c2 c5 ff ff       	call   c0001e3b <mem_cpy>
c0005879:	8d 43 0b             	lea    eax,[ebx+0xb]
c000587c:	ba 00 02 00 00       	mov    edx,0x200
c0005881:	e8 ae c5 ff ff       	call   c0001e34 <st_word>
c0005886:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000588b:	89 f8                	mov    eax,edi
c000588d:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005890:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005893:	e8 9c c5 ff ff       	call   c0001e34 <st_word>
c0005898:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000589c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000589f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058a4:	83 f8 03             	cmp    eax,0x3
c00058a7:	b8 00 00 00 00       	mov    eax,0x0
c00058ac:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c00058b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00058b5:	8d 43 11             	lea    eax,[ebx+0x11]
c00058b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bc:	e8 73 c5 ff ff       	call   c0001e34 <st_word>
c00058c1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058c5:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00058cb:	77 0a                	ja     c00058d7 <f_mkfs+0x493>
c00058cd:	8d 43 13             	lea    eax,[ebx+0x13]
c00058d0:	e8 5f c5 ff ff       	call   c0001e34 <st_word>
c00058d5:	eb 08                	jmp    c00058df <f_mkfs+0x49b>
c00058d7:	8d 43 20             	lea    eax,[ebx+0x20]
c00058da:	e8 59 c5 ff ff       	call   c0001e38 <st_dword>
c00058df:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058e3:	8d 43 18             	lea    eax,[ebx+0x18]
c00058e6:	ba 3f 00 00 00       	mov    edx,0x3f
c00058eb:	e8 44 c5 ff ff       	call   c0001e34 <st_word>
c00058f0:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058f3:	ba ff 00 00 00       	mov    edx,0xff
c00058f8:	e8 37 c5 ff ff       	call   c0001e34 <st_word>
c00058fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005901:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005904:	e8 2f c5 ff ff       	call   c0001e38 <st_dword>
c0005909:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000590e:	83 f8 03             	cmp    eax,0x3
c0005911:	75 57                	jne    c000596a <f_mkfs+0x526>
c0005913:	8d 43 43             	lea    eax,[ebx+0x43]
c0005916:	ba 00 00 21 50       	mov    edx,0x50210000
c000591b:	e8 18 c5 ff ff       	call   c0001e38 <st_dword>
c0005920:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005924:	8d 43 24             	lea    eax,[ebx+0x24]
c0005927:	e8 0c c5 ff ff       	call   c0001e38 <st_dword>
c000592c:	8d 43 2c             	lea    eax,[ebx+0x2c]
c000592f:	ba 02 00 00 00       	mov    edx,0x2
c0005934:	e8 ff c4 ff ff       	call   c0001e38 <st_dword>
c0005939:	8d 43 30             	lea    eax,[ebx+0x30]
c000593c:	ba 01 00 00 00       	mov    edx,0x1
c0005941:	e8 ee c4 ff ff       	call   c0001e34 <st_word>
c0005946:	8d 43 32             	lea    eax,[ebx+0x32]
c0005949:	ba 06 00 00 00       	mov    edx,0x6
c000594e:	e8 e1 c4 ff ff       	call   c0001e34 <st_word>
c0005953:	8d 43 47             	lea    eax,[ebx+0x47]
c0005956:	b9 13 00 00 00       	mov    ecx,0x13
c000595b:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c000595f:	ba de 00 02 c0       	mov    edx,0xc00200de
c0005964:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005968:	eb 2f                	jmp    c0005999 <f_mkfs+0x555>
c000596a:	8d 43 27             	lea    eax,[ebx+0x27]
c000596d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005972:	e8 c1 c4 ff ff       	call   c0001e38 <st_dword>
c0005977:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000597c:	8d 43 16             	lea    eax,[ebx+0x16]
c000597f:	e8 b0 c4 ff ff       	call   c0001e34 <st_word>
c0005984:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005987:	b9 13 00 00 00       	mov    ecx,0x13
c000598c:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005990:	ba f2 00 02 c0       	mov    edx,0xc00200f2
c0005995:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005999:	e8 9d c4 ff ff       	call   c0001e3b <mem_cpy>
c000599e:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059a4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00059ad:	e8 82 c4 ff ff       	call   c0001e34 <st_word>
c00059b2:	6a 01                	push   0x1
c00059b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059b8:	53                   	push   ebx
c00059b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059bd:	e8 18 c4 ff ff       	call   c0001dda <disk_write>
c00059c2:	83 c4 10             	add    esp,0x10
c00059c5:	85 c0                	test   eax,eax
c00059c7:	0f 85 25 02 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00059cd:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00059d2:	83 f8 03             	cmp    eax,0x3
c00059d5:	0f 85 98 00 00 00    	jne    c0005a73 <f_mkfs+0x62f>
c00059db:	6a 01                	push   0x1
c00059dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00059e1:	83 c0 06             	add    eax,0x6
c00059e4:	50                   	push   eax
c00059e5:	53                   	push   ebx
c00059e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059ea:	e8 eb c3 ff ff       	call   c0001dda <disk_write>
c00059ef:	b9 00 02 00 00       	mov    ecx,0x200
c00059f4:	31 d2                	xor    edx,edx
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 53 c4 ff ff       	call   c0001e50 <mem_set>
c00059fd:	ba 52 52 61 41       	mov    edx,0x41615252
c0005a02:	89 d8                	mov    eax,ebx
c0005a04:	e8 2f c4 ff ff       	call   c0001e38 <st_dword>
c0005a09:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005a0f:	ba 72 72 41 61       	mov    edx,0x61417272
c0005a14:	e8 1f c4 ff ff       	call   c0001e38 <st_dword>
c0005a19:	8d 56 ff             	lea    edx,[esi-0x1]
c0005a1c:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005a22:	e8 11 c4 ff ff       	call   c0001e38 <st_dword>
c0005a27:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005a2d:	ba 02 00 00 00       	mov    edx,0x2
c0005a32:	e8 01 c4 ff ff       	call   c0001e38 <st_dword>
c0005a37:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005a3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005a42:	e8 ed c3 ff ff       	call   c0001e34 <st_word>
c0005a47:	6a 01                	push   0x1
c0005a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005a4d:	83 c0 07             	add    eax,0x7
c0005a50:	50                   	push   eax
c0005a51:	53                   	push   ebx
c0005a52:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a56:	e8 7f c3 ff ff       	call   c0001dda <disk_write>
c0005a5b:	83 c4 20             	add    esp,0x20
c0005a5e:	6a 01                	push   0x1
c0005a60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005a64:	40                   	inc    eax
c0005a65:	50                   	push   eax
c0005a66:	53                   	push   ebx
c0005a67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a6b:	e8 6a c3 ff ff       	call   c0001dda <disk_write>
c0005a70:	83 c4 10             	add    esp,0x10
c0005a73:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a77:	31 d2                	xor    edx,edx
c0005a79:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a7d:	c1 e8 09             	shr    eax,0x9
c0005a80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a84:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a8a:	89 d8                	mov    eax,ebx
c0005a8c:	e8 bf c3 ff ff       	call   c0001e50 <mem_set>
c0005a91:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a96:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005a9b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005aa3:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005aa8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005aac:	83 f8 01             	cmp    eax,0x1
c0005aaf:	0f 44 d1             	cmove  edx,ecx
c0005ab2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005ab6:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005abb:	75 21                	jne    c0005ade <f_mkfs+0x69a>
c0005abd:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 6f c3 ff ff       	call   c0001e38 <st_dword>
c0005ac9:	8d 43 04             	lea    eax,[ebx+0x4]
c0005acc:	83 ca ff             	or     edx,0xffffffff
c0005acf:	e8 64 c3 ff ff       	call   c0001e38 <st_dword>
c0005ad4:	8d 43 08             	lea    eax,[ebx+0x8]
c0005ad7:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005adc:	eb 06                	jmp    c0005ae4 <f_mkfs+0x6a0>
c0005ade:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005ae2:	89 d8                	mov    eax,ebx
c0005ae4:	e8 4f c3 ff ff       	call   c0001e38 <st_dword>
c0005ae9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005af1:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005af5:	0f 46 c6             	cmovbe eax,esi
c0005af8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005afc:	50                   	push   eax
c0005afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b01:	53                   	push   ebx
c0005b02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b06:	e8 cf c2 ff ff       	call   c0001dda <disk_write>
c0005b0b:	83 c4 10             	add    esp,0x10
c0005b0e:	85 c0                	test   eax,eax
c0005b10:	0f 85 dc 00 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b16:	b9 00 02 00 00       	mov    ecx,0x200
c0005b1b:	31 d2                	xor    edx,edx
c0005b1d:	89 d8                	mov    eax,ebx
c0005b1f:	e8 2c c3 ff ff       	call   c0001e50 <mem_set>
c0005b24:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005b28:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005b2c:	29 ce                	sub    esi,ecx
c0005b2e:	75 bd                	jne    c0005aed <f_mkfs+0x6a9>
c0005b30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b34:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005b3c:	40                   	inc    eax
c0005b3d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b41:	0f 87 6f ff ff ff    	ja     c0005ab6 <f_mkfs+0x672>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	83 f8 03             	cmp    eax,0x3
c0005b4f:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005b54:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b58:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b5c:	0f 46 f7             	cmovbe esi,edi
c0005b5f:	56                   	push   esi
c0005b60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b64:	53                   	push   ebx
c0005b65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b69:	e8 6c c2 ff ff       	call   c0001dda <disk_write>
c0005b6e:	83 c4 10             	add    esp,0x10
c0005b71:	85 c0                	test   eax,eax
c0005b73:	75 7d                	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b75:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b79:	29 f7                	sub    edi,esi
c0005b7b:	75 d7                	jne    c0005b54 <f_mkfs+0x710>
c0005b7d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b82:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b87:	83 f8 03             	cmp    eax,0x3
c0005b8a:	74 1e                	je     c0005baa <f_mkfs+0x766>
c0005b8c:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b94:	b9 06 00 00 00       	mov    ecx,0x6
c0005b99:	77 0f                	ja     c0005baa <f_mkfs+0x766>
c0005b9b:	83 f8 02             	cmp    eax,0x2
c0005b9e:	b9 04 00 00 00       	mov    ecx,0x4
c0005ba3:	74 05                	je     c0005baa <f_mkfs+0x766>
c0005ba5:	b9 01 00 00 00       	mov    ecx,0x1
c0005baa:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005baf:	75 2a                	jne    c0005bdb <f_mkfs+0x797>
c0005bb1:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005bb9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005bbd:	83 ec 0c             	sub    esp,0xc
c0005bc0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005bc4:	53                   	push   ebx
c0005bc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005bc9:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005bcd:	e8 87 d2 ff ff       	call   c0002e59 <create_partition>
c0005bd2:	83 c4 10             	add    esp,0x10
c0005bd5:	85 c0                	test   eax,eax
c0005bd7:	89 c6                	mov    esi,eax
c0005bd9:	75 2e                	jne    c0005c09 <f_mkfs+0x7c5>
c0005bdb:	50                   	push   eax
c0005bdc:	31 f6                	xor    esi,esi
c0005bde:	6a 00                	push   0x0
c0005be0:	6a 00                	push   0x0
c0005be2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005be6:	e8 05 c2 ff ff       	call   c0001df0 <disk_ioctl>
c0005beb:	83 c4 10             	add    esp,0x10
c0005bee:	85 c0                	test   eax,eax
c0005bf0:	74 17                	je     c0005c09 <f_mkfs+0x7c5>
c0005bf2:	85 ed                	test   ebp,ebp
c0005bf4:	75 0c                	jne    c0005c02 <f_mkfs+0x7be>
c0005bf6:	83 ec 0c             	sub    esp,0xc
c0005bf9:	53                   	push   ebx
c0005bfa:	e8 6d 00 00 00       	call   c0005c6c <ff_memfree>
c0005bff:	83 c4 10             	add    esp,0x10
c0005c02:	be 01 00 00 00       	mov    esi,0x1
c0005c07:	eb 40                	jmp    c0005c49 <f_mkfs+0x805>
c0005c09:	85 ed                	test   ebp,ebp
c0005c0b:	75 3c                	jne    c0005c49 <f_mkfs+0x805>
c0005c0d:	83 ec 0c             	sub    esp,0xc
c0005c10:	53                   	push   ebx
c0005c11:	e8 56 00 00 00       	call   c0005c6c <ff_memfree>
c0005c16:	83 c4 10             	add    esp,0x10
c0005c19:	eb 2e                	jmp    c0005c49 <f_mkfs+0x805>
c0005c1b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c20:	0f 85 46 fb ff ff    	jne    c000576c <f_mkfs+0x328>
c0005c26:	e9 20 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c2b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c30:	0f 85 3c fb ff ff    	jne    c0005772 <f_mkfs+0x32e>
c0005c36:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c3c:	89 cf                	mov    edi,ecx
c0005c3e:	0f 86 30 fa ff ff    	jbe    c0005674 <f_mkfs+0x230>
c0005c44:	e9 02 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c49:	83 c4 5c             	add    esp,0x5c
c0005c4c:	89 f0                	mov    eax,esi
c0005c4e:	5b                   	pop    ebx
c0005c4f:	5e                   	pop    esi
c0005c50:	5f                   	pop    edi
c0005c51:	5d                   	pop    ebp
c0005c52:	c3                   	ret    
c0005c53:	90                   	nop

c0005c54 <ff_memalloc>:
c0005c54:	83 ec 0c             	sub    esp,0xc
c0005c57:	83 ec 0c             	sub    esp,0xc
c0005c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c5e:	e8 70 1e 00 00       	call   c0007ad3 <malloc>
c0005c63:	83 c4 10             	add    esp,0x10
c0005c66:	83 c4 0c             	add    esp,0xc
c0005c69:	c3                   	ret    
c0005c6a:	66 90                	xchg   ax,ax

c0005c6c <ff_memfree>:
c0005c6c:	83 ec 0c             	sub    esp,0xc
c0005c6f:	83 ec 0c             	sub    esp,0xc
c0005c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c76:	e8 68 1e 00 00       	call   c0007ae3 <free>
c0005c7b:	83 c4 10             	add    esp,0x10
c0005c7e:	90                   	nop
c0005c7f:	83 c4 0c             	add    esp,0xc
c0005c82:	c3                   	ret    
c0005c83:	90                   	nop

c0005c84 <ff_uni2oem>:
c0005c84:	83 ec 14             	sub    esp,0x14
c0005c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c8b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c8f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c96:	c7 44 24 0c 20 05 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020520
c0005c9e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005ca3:	77 0b                	ja     c0005cb0 <ff_uni2oem+0x2c>
c0005ca5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ca9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cae:	eb 64                	jmp    c0005d14 <ff_uni2oem+0x90>
c0005cb0:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005cb8:	77 5a                	ja     c0005d14 <ff_uni2oem+0x90>
c0005cba:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005cbe:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005cc3:	75 4f                	jne    c0005d14 <ff_uni2oem+0x90>
c0005cc5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ccc:	eb 12                	jmp    c0005ce0 <ff_uni2oem+0x5c>
c0005cce:	66 90                	xchg   ax,ax
c0005cd0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd5:	83 c0 01             	add    eax,0x1
c0005cd8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ce0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ce5:	83 f8 7f             	cmp    eax,0x7f
c0005ce8:	77 1a                	ja     c0005d04 <ff_uni2oem+0x80>
c0005cea:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cef:	8d 14 00             	lea    edx,[eax+eax*1]
c0005cf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cf6:	01 d0                	add    eax,edx
c0005cf8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cfb:	0f b7 c0             	movzx  eax,ax
c0005cfe:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005d02:	75 cc                	jne    c0005cd0 <ff_uni2oem+0x4c>
c0005d04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d09:	83 e8 80             	sub    eax,0xffffff80
c0005d0c:	0f b6 c0             	movzx  eax,al
c0005d0f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005d14:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d19:	83 c4 14             	add    esp,0x14
c0005d1c:	c3                   	ret    
c0005d1d:	8d 76 00             	lea    esi,[esi+0x0]

c0005d20 <ff_oem2uni>:
c0005d20:	83 ec 18             	sub    esp,0x18
c0005d23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005d27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005d2b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d30:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d34:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d3b:	c7 44 24 10 20 05 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020520
c0005d43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d48:	83 f8 7f             	cmp    eax,0x7f
c0005d4b:	77 0b                	ja     c0005d58 <ff_oem2uni+0x38>
c0005d4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d51:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d56:	eb 34                	jmp    c0005d8c <ff_oem2uni+0x6c>
c0005d58:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d5c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d61:	75 29                	jne    c0005d8c <ff_oem2uni+0x6c>
c0005d63:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d68:	3d ff 00 00 00       	cmp    eax,0xff
c0005d6d:	77 1d                	ja     c0005d8c <ff_oem2uni+0x6c>
c0005d6f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d74:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d79:	8d 14 00             	lea    edx,[eax+eax*1]
c0005d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d80:	01 d0                	add    eax,edx
c0005d82:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d85:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d8a:	66 90                	xchg   ax,ax
c0005d8c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d91:	83 c4 18             	add    esp,0x18
c0005d94:	c3                   	ret    
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]

c0005d98 <ff_wtoupper>:
c0005d98:	83 ec 10             	sub    esp,0x10
c0005d9b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005da3:	0f 87 a7 01 00 00    	ja     c0005f50 <ff_wtoupper+0x1b8>
c0005da9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005dad:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005db2:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005db7:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005dbc:	77 0a                	ja     c0005dc8 <ff_wtoupper+0x30>
c0005dbe:	b8 20 03 02 c0       	mov    eax,0xc0020320
c0005dc3:	eb 0b                	jmp    c0005dd0 <ff_wtoupper+0x38>
c0005dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005dc8:	b8 60 02 02 c0       	mov    eax,0xc0020260
c0005dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0005dd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dd8:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ddf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005de7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dec:	85 c0                	test   eax,eax
c0005dee:	0f 84 50 01 00 00    	je     c0005f44 <ff_wtoupper+0x1ac>
c0005df4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005df9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dfe:	39 c2                	cmp    edx,eax
c0005e00:	0f 82 3e 01 00 00    	jb     c0005f44 <ff_wtoupper+0x1ac>
c0005e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e0a:	8d 50 02             	lea    edx,[eax+0x2]
c0005e0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005e11:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e14:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e19:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005e1e:	c1 e8 08             	shr    eax,0x8
c0005e21:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005e26:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005e2b:	0f b6 c0             	movzx  eax,al
c0005e2e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e33:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e38:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e3d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e42:	01 ca                	add    edx,ecx
c0005e44:	39 d0                	cmp    eax,edx
c0005e46:	0f 8d d4 00 00 00    	jge    c0005f20 <ff_wtoupper+0x188>
c0005e4c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e51:	83 f8 08             	cmp    eax,0x8
c0005e54:	0f 87 e6 00 00 00    	ja     c0005f40 <ff_wtoupper+0x1a8>
c0005e5a:	8b 04 85 20 02 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfde0]
c0005e61:	ff e0                	jmp    eax
c0005e63:	90                   	nop
c0005e64:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e69:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e6e:	29 c2                	sub    edx,eax
c0005e70:	89 d0                	mov    eax,edx
c0005e72:	8d 14 00             	lea    edx,[eax+eax*1]
c0005e75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e79:	01 d0                	add    eax,edx
c0005e7b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e7e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e83:	e9 94 00 00 00       	jmp    c0005f1c <ff_wtoupper+0x184>
c0005e88:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e91:	89 d1                	mov    ecx,edx
c0005e93:	29 c1                	sub    ecx,eax
c0005e95:	89 c8                	mov    eax,ecx
c0005e97:	83 e0 01             	and    eax,0x1
c0005e9a:	89 c2                	mov    edx,eax
c0005e9c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea1:	29 d0                	sub    eax,edx
c0005ea3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ea8:	eb 72                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eaa:	66 90                	xchg   ax,ax
c0005eac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb1:	83 e8 10             	sub    eax,0x10
c0005eb4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eb9:	eb 61                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ebb:	90                   	nop
c0005ebc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec1:	83 e8 20             	sub    eax,0x20
c0005ec4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ec9:	eb 51                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ecb:	90                   	nop
c0005ecc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed1:	83 e8 30             	sub    eax,0x30
c0005ed4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ed9:	eb 41                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005edb:	90                   	nop
c0005edc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee1:	83 e8 1a             	sub    eax,0x1a
c0005ee4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ee9:	eb 31                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eeb:	90                   	nop
c0005eec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ef1:	83 c0 08             	add    eax,0x8
c0005ef4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ef9:	eb 21                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005efb:	90                   	nop
c0005efc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f01:	83 e8 50             	sub    eax,0x50
c0005f04:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f09:	eb 11                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005f0b:	90                   	nop
c0005f0c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f11:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005f16:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f1b:	90                   	nop
c0005f1c:	eb 22                	jmp    c0005f40 <ff_wtoupper+0x1a8>
c0005f1e:	66 90                	xchg   ax,ax
c0005f20:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f25:	85 c0                	test   eax,eax
c0005f27:	0f 85 a7 fe ff ff    	jne    c0005dd4 <ff_wtoupper+0x3c>
c0005f2d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f32:	d1 e0                	shl    eax,1
c0005f34:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f38:	e9 97 fe ff ff       	jmp    c0005dd4 <ff_wtoupper+0x3c>
c0005f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f40:	90                   	nop
c0005f41:	8d 76 00             	lea    esi,[esi+0x0]
c0005f44:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f54:	83 c4 10             	add    esp,0x10
c0005f57:	c3                   	ret    

c0005f58 <utf2ucs>:
c0005f58:	57                   	push   edi
c0005f59:	31 c9                	xor    ecx,ecx
c0005f5b:	56                   	push   esi
c0005f5c:	89 d7                	mov    edi,edx
c0005f5e:	53                   	push   ebx
c0005f5f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f63:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f67:	89 de                	mov    esi,ebx
c0005f69:	c1 fe 08             	sar    esi,0x8
c0005f6c:	89 f2                	mov    edx,esi
c0005f6e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f71:	41                   	inc    ecx
c0005f72:	85 db                	test   ebx,ebx
c0005f74:	75 e9                	jne    c0005f5f <utf2ucs+0x7>
c0005f76:	5b                   	pop    ebx
c0005f77:	5e                   	pop    esi
c0005f78:	5f                   	pop    edi
c0005f79:	c3                   	ret    

c0005f7a <ucs2utfn>:
c0005f7a:	83 e1 fe             	and    ecx,0xfffffffe
c0005f7d:	01 d1                	add    ecx,edx
c0005f7f:	39 d1                	cmp    ecx,edx
c0005f81:	75 04                	jne    c0005f87 <ucs2utfn+0xd>
c0005f83:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f86:	c3                   	ret    
c0005f87:	57                   	push   edi
c0005f88:	56                   	push   esi
c0005f89:	53                   	push   ebx
c0005f8a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f8d:	83 c2 02             	add    edx,0x2
c0005f90:	89 de                	mov    esi,ebx
c0005f92:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f96:	c1 e6 08             	shl    esi,0x8
c0005f99:	09 f3                	or     ebx,esi
c0005f9b:	83 fb 3b             	cmp    ebx,0x3b
c0005f9e:	74 50                	je     c0005ff0 <ucs2utfn+0x76>
c0005fa0:	83 fb 7f             	cmp    ebx,0x7f
c0005fa3:	7f 05                	jg     c0005faa <ucs2utfn+0x30>
c0005fa5:	88 18                	mov    BYTE PTR [eax],bl
c0005fa7:	40                   	inc    eax
c0005fa8:	eb 42                	jmp    c0005fec <ucs2utfn+0x72>
c0005faa:	89 df                	mov    edi,ebx
c0005fac:	89 de                	mov    esi,ebx
c0005fae:	c1 fe 06             	sar    esi,0x6
c0005fb1:	83 e7 3f             	and    edi,0x3f
c0005fb4:	83 cf 80             	or     edi,0xffffff80
c0005fb7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005fbd:	7f 12                	jg     c0005fd1 <ucs2utfn+0x57>
c0005fbf:	83 ce c0             	or     esi,0xffffffc0
c0005fc2:	83 c0 02             	add    eax,0x2
c0005fc5:	89 f3                	mov    ebx,esi
c0005fc7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fca:	89 fb                	mov    ebx,edi
c0005fcc:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fcf:	eb 1b                	jmp    c0005fec <ucs2utfn+0x72>
c0005fd1:	c1 fb 0c             	sar    ebx,0xc
c0005fd4:	83 e6 3f             	and    esi,0x3f
c0005fd7:	83 cb e0             	or     ebx,0xffffffe0
c0005fda:	83 ce 80             	or     esi,0xffffff80
c0005fdd:	88 18                	mov    BYTE PTR [eax],bl
c0005fdf:	89 f3                	mov    ebx,esi
c0005fe1:	83 c0 03             	add    eax,0x3
c0005fe4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fe7:	89 fb                	mov    ebx,edi
c0005fe9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fec:	39 d1                	cmp    ecx,edx
c0005fee:	75 9a                	jne    c0005f8a <ucs2utfn+0x10>
c0005ff0:	5b                   	pop    ebx
c0005ff1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005ff4:	5e                   	pop    esi
c0005ff5:	5f                   	pop    edi
c0005ff6:	c3                   	ret    

c0005ff7 <isjoliet>:
c0005ff7:	31 d2                	xor    edx,edx
c0005ff9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005ffc:	75 26                	jne    c0006024 <isjoliet+0x2d>
c0005ffe:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0006002:	75 20                	jne    c0006024 <isjoliet+0x2d>
c0006004:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0006008:	ba 02 00 00 00       	mov    edx,0x2
c000600d:	83 f8 43             	cmp    eax,0x43
c0006010:	74 12                	je     c0006024 <isjoliet+0x2d>
c0006012:	83 f8 45             	cmp    eax,0x45
c0006015:	ba 03 00 00 00       	mov    edx,0x3
c000601a:	74 08                	je     c0006024 <isjoliet+0x2d>
c000601c:	31 d2                	xor    edx,edx
c000601e:	83 f8 40             	cmp    eax,0x40
c0006021:	0f 94 c2             	sete   dl
c0006024:	89 d0                	mov    eax,edx
c0006026:	c3                   	ret    

c0006027 <htohl_32>:
c0006027:	8b 00                	mov    eax,DWORD PTR [eax]
c0006029:	c3                   	ret    

c000602a <iso_733>:
c000602a:	eb fb                	jmp    c0006027 <htohl_32>

c000602c <bgrad_cache>:
c000602c:	83 fa 0e             	cmp    edx,0xe
c000602f:	77 16                	ja     c0006047 <bgrad_cache+0x1b>
c0006031:	53                   	push   ebx
c0006032:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006035:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006039:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000603c:	42                   	inc    edx
c000603d:	83 fa 0f             	cmp    edx,0xf
c0006040:	75 f3                	jne    c0006035 <bgrad_cache+0x9>
c0006042:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006045:	5b                   	pop    ebx
c0006046:	c3                   	ret    
c0006047:	c3                   	ret    

c0006048 <ucscompare>:
c0006048:	55                   	push   ebp
c0006049:	57                   	push   edi
c000604a:	89 c7                	mov    edi,eax
c000604c:	56                   	push   esi
c000604d:	89 d6                	mov    esi,edx
c000604f:	53                   	push   ebx
c0006050:	31 d2                	xor    edx,edx
c0006052:	83 ec 1c             	sub    esp,0x1c
c0006055:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006059:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000605e:	c1 e3 08             	shl    ebx,0x8
c0006061:	09 c3                	or     ebx,eax
c0006063:	39 ca                	cmp    edx,ecx
c0006065:	7d 42                	jge    c00060a9 <ucscompare+0x61>
c0006067:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000606b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000606f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006073:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006078:	c1 e0 08             	shl    eax,0x8
c000607b:	09 e8                	or     eax,ebp
c000607d:	83 f8 3b             	cmp    eax,0x3b
c0006080:	74 27                	je     c00060a9 <ucscompare+0x61>
c0006082:	83 ec 0c             	sub    esp,0xc
c0006085:	50                   	push   eax
c0006086:	e8 f5 a8 ff ff       	call   c0000980 <tolower>
c000608b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000608e:	89 c5                	mov    ebp,eax
c0006090:	e8 eb a8 ff ff       	call   c0000980 <tolower>
c0006095:	83 c4 10             	add    esp,0x10
c0006098:	39 c5                	cmp    ebp,eax
c000609a:	75 20                	jne    c00060bc <ucscompare+0x74>
c000609c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00060a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00060a4:	83 c2 02             	add    edx,0x2
c00060a7:	eb ac                	jmp    c0006055 <ucscompare+0xd>
c00060a9:	83 fb 2f             	cmp    ebx,0x2f
c00060ac:	0f 95 c2             	setne  dl
c00060af:	31 c0                	xor    eax,eax
c00060b1:	85 db                	test   ebx,ebx
c00060b3:	0f 95 c0             	setne  al
c00060b6:	21 d0                	and    eax,edx
c00060b8:	f7 d8                	neg    eax
c00060ba:	eb 03                	jmp    c00060bf <ucscompare+0x77>
c00060bc:	83 c8 ff             	or     eax,0xffffffff
c00060bf:	83 c4 1c             	add    esp,0x1c
c00060c2:	5b                   	pop    ebx
c00060c3:	5e                   	pop    esi
c00060c4:	5f                   	pop    edi
c00060c5:	5d                   	pop    ebp
c00060c6:	c3                   	ret    

c00060c7 <fncompare>:
c00060c7:	55                   	push   ebp
c00060c8:	57                   	push   edi
c00060c9:	89 c7                	mov    edi,eax
c00060cb:	56                   	push   esi
c00060cc:	89 ce                	mov    esi,ecx
c00060ce:	53                   	push   ebx
c00060cf:	31 db                	xor    ebx,ebx
c00060d1:	83 ec 1c             	sub    esp,0x1c
c00060d4:	39 d3                	cmp    ebx,edx
c00060d6:	7d 45                	jge    c000611d <fncompare+0x56>
c00060d8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060dc:	83 f8 3b             	cmp    eax,0x3b
c00060df:	74 3c                	je     c000611d <fncompare+0x56>
c00060e1:	83 f8 2e             	cmp    eax,0x2e
c00060e4:	75 0e                	jne    c00060f4 <fncompare+0x2d>
c00060e6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060e9:	39 d9                	cmp    ecx,ebx
c00060eb:	74 30                	je     c000611d <fncompare+0x56>
c00060ed:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060f2:	74 29                	je     c000611d <fncompare+0x56>
c00060f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060f8:	83 ec 0c             	sub    esp,0xc
c00060fb:	50                   	push   eax
c00060fc:	e8 7f a8 ff ff       	call   c0000980 <tolower>
c0006101:	89 c5                	mov    ebp,eax
c0006103:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0006107:	89 04 24             	mov    DWORD PTR [esp],eax
c000610a:	e8 71 a8 ff ff       	call   c0000980 <tolower>
c000610f:	83 c4 10             	add    esp,0x10
c0006112:	39 c5                	cmp    ebp,eax
c0006114:	75 1e                	jne    c0006134 <fncompare+0x6d>
c0006116:	43                   	inc    ebx
c0006117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000611b:	eb b7                	jmp    c00060d4 <fncompare+0xd>
c000611d:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006121:	83 fa 2f             	cmp    edx,0x2f
c0006124:	0f 95 c1             	setne  cl
c0006127:	31 c0                	xor    eax,eax
c0006129:	85 d2                	test   edx,edx
c000612b:	0f 95 c0             	setne  al
c000612e:	21 c8                	and    eax,ecx
c0006130:	f7 d8                	neg    eax
c0006132:	eb 03                	jmp    c0006137 <fncompare+0x70>
c0006134:	83 c8 ff             	or     eax,0xffffffff
c0006137:	83 c4 1c             	add    esp,0x1c
c000613a:	5b                   	pop    ebx
c000613b:	5e                   	pop    esi
c000613c:	5f                   	pop    edi
c000613d:	5d                   	pop    ebp
c000613e:	c3                   	ret    

c000613f <bclear_cache>:
c000613f:	83 ec 18             	sub    esp,0x18
c0006142:	68 20 06 02 c0       	push   0xc0020620
c0006147:	e8 34 3e 01 00       	call   c0019f80 <iso_kprintf>
c000614c:	83 c4 10             	add    esp,0x10
c000614f:	31 c0                	xor    eax,eax
c0006151:	8b 14 85 20 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdafe0]
c0006158:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000615e:	8b 14 85 80 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaf80]
c0006165:	40                   	inc    eax
c0006166:	83 f8 10             	cmp    eax,0x10
c0006169:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000616f:	75 e0                	jne    c0006151 <bclear_cache+0x12>
c0006171:	83 c4 0c             	add    esp,0xc
c0006174:	c3                   	ret    

c0006175 <bclear>:
c0006175:	eb c8                	jmp    c000613f <bclear_cache>

c0006177 <iso_break_all>:
c0006177:	83 ec 18             	sub    esp,0x18
c000617a:	68 2e 06 02 c0       	push   0xc002062e
c000617f:	e8 fc 3d 01 00       	call   c0019f80 <iso_kprintf>
c0006184:	83 c4 10             	add    esp,0x10
c0006187:	31 c0                	xor    eax,eax
c0006189:	c7 80 d0 55 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdaa30],0x1
c0006193:	05 94 00 00 00       	add    eax,0x94
c0006198:	3d 40 09 00 00       	cmp    eax,0x940
c000619d:	75 ea                	jne    c0006189 <iso_break_all+0x12>
c000619f:	83 c4 0c             	add    esp,0xc
c00061a2:	c3                   	ret    

c00061a3 <isoReadDiscSector>:
c00061a3:	83 ec 0c             	sub    esp,0xc
c00061a6:	0f be 05 60 50 02 c0 	movsx  eax,BYTE PTR ds:0xc0025060
c00061ad:	50                   	push   eax
c00061ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061ba:	e8 65 3d 01 00       	call   c0019f24 <isoReadDiscSectorHelper>
c00061bf:	83 c4 1c             	add    esp,0x1c
c00061c2:	c3                   	ret    

c00061c3 <bread_cache>:
c00061c3:	55                   	push   ebp
c00061c4:	57                   	push   edi
c00061c5:	89 d7                	mov    edi,edx
c00061c7:	56                   	push   esi
c00061c8:	ba 0f 00 00 00       	mov    edx,0xf
c00061cd:	53                   	push   ebx
c00061ce:	89 c6                	mov    esi,eax
c00061d0:	83 ec 0c             	sub    esp,0xc
c00061d3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061d6:	39 38                	cmp    DWORD PTR [eax],edi
c00061d8:	74 3c                	je     c0006216 <bread_cache+0x53>
c00061da:	4a                   	dec    edx
c00061db:	83 fa ff             	cmp    edx,0xffffffff
c00061de:	75 f3                	jne    c00061d3 <bread_cache+0x10>
c00061e0:	31 db                	xor    ebx,ebx
c00061e2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061e5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061e8:	74 08                	je     c00061f2 <bread_cache+0x2f>
c00061ea:	43                   	inc    ebx
c00061eb:	83 fb 10             	cmp    ebx,0x10
c00061ee:	75 f2                	jne    c00061e2 <bread_cache+0x1f>
c00061f0:	31 db                	xor    ebx,ebx
c00061f2:	50                   	push   eax
c00061f3:	6a 01                	push   0x1
c00061f5:	57                   	push   edi
c00061f6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061fc:	83 c0 04             	add    eax,0x4
c00061ff:	50                   	push   eax
c0006200:	e8 9e ff ff ff       	call   c00061a3 <isoReadDiscSector>
c0006205:	83 c4 10             	add    esp,0x10
c0006208:	83 c9 ff             	or     ecx,0xffffffff
c000620b:	85 c0                	test   eax,eax
c000620d:	78 13                	js     c0006222 <bread_cache+0x5f>
c000620f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006212:	89 da                	mov    edx,ebx
c0006214:	89 38                	mov    DWORD PTR [eax],edi
c0006216:	89 f0                	mov    eax,esi
c0006218:	e8 0f fe ff ff       	call   c000602c <bgrad_cache>
c000621d:	b9 0f 00 00 00       	mov    ecx,0xf
c0006222:	83 c4 0c             	add    esp,0xc
c0006225:	89 c8                	mov    eax,ecx
c0006227:	5b                   	pop    ebx
c0006228:	5e                   	pop    esi
c0006229:	5f                   	pop    edi
c000622a:	5d                   	pop    ebp
c000622b:	c3                   	ret    

c000622c <biread>:
c000622c:	89 c2                	mov    edx,eax
c000622e:	b8 80 50 02 c0       	mov    eax,0xc0025080
c0006233:	eb 8e                	jmp    c00061c3 <bread_cache>

c0006235 <bdread>:
c0006235:	89 c2                	mov    edx,eax
c0006237:	b8 20 50 02 c0       	mov    eax,0xc0025020
c000623c:	eb 85                	jmp    c00061c3 <bread_cache>

c000623e <strnicmp>:
c000623e:	55                   	push   ebp
c000623f:	57                   	push   edi
c0006240:	31 ff                	xor    edi,edi
c0006242:	56                   	push   esi
c0006243:	53                   	push   ebx
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000624b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000624f:	74 43                	je     c0006294 <strnicmp+0x56>
c0006251:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006255:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006259:	85 c0                	test   eax,eax
c000625b:	74 37                	je     c0006294 <strnicmp+0x56>
c000625d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006261:	85 d2                	test   edx,edx
c0006263:	74 2f                	je     c0006294 <strnicmp+0x56>
c0006265:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006268:	39 d0                	cmp    eax,edx
c000626a:	75 04                	jne    c0006270 <strnicmp+0x32>
c000626c:	89 ef                	mov    edi,ebp
c000626e:	eb db                	jmp    c000624b <strnicmp+0xd>
c0006270:	83 ec 0c             	sub    esp,0xc
c0006273:	50                   	push   eax
c0006274:	e8 07 a7 ff ff       	call   c0000980 <tolower>
c0006279:	89 c3                	mov    ebx,eax
c000627b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000627f:	89 ef                	mov    edi,ebp
c0006281:	89 04 24             	mov    DWORD PTR [esp],eax
c0006284:	e8 f7 a6 ff ff       	call   c0000980 <tolower>
c0006289:	83 c4 10             	add    esp,0x10
c000628c:	29 c3                	sub    ebx,eax
c000628e:	89 d8                	mov    eax,ebx
c0006290:	74 b9                	je     c000624b <strnicmp+0xd>
c0006292:	eb 02                	jmp    c0006296 <strnicmp+0x58>
c0006294:	31 c0                	xor    eax,eax
c0006296:	83 c4 0c             	add    esp,0xc
c0006299:	5b                   	pop    ebx
c000629a:	5e                   	pop    esi
c000629b:	5f                   	pop    edi
c000629c:	5d                   	pop    ebp
c000629d:	c3                   	ret    

c000629e <find_object>:
c000629e:	55                   	push   ebp
c000629f:	57                   	push   edi
c00062a0:	89 c7                	mov    edi,eax
c00062a2:	56                   	push   esi
c00062a3:	53                   	push   ebx
c00062a4:	89 d3                	mov    ebx,edx
c00062a6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00062ac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00062b0:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00062b7:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c00062be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00062c2:	74 0b                	je     c00062cf <find_object+0x31>
c00062c4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00062c8:	89 fa                	mov    edx,edi
c00062ca:	e8 89 fc ff ff       	call   c0005f58 <utf2ucs>
c00062cf:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062d6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00062db:	7e 11                	jle    c00062ee <find_object+0x50>
c00062dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062e1:	e8 46 ff ff ff       	call   c000622c <biread>
c00062e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062ea:	85 c0                	test   eax,eax
c00062ec:	79 07                	jns    c00062f5 <find_object+0x57>
c00062ee:	31 db                	xor    ebx,ebx
c00062f0:	e9 47 01 00 00       	jmp    c000643c <find_object+0x19e>
c00062f5:	31 ed                	xor    ebp,ebp
c00062f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062fb:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c0006302:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c0006306:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0006309:	85 f6                	test   esi,esi
c000630b:	75 0e                	jne    c000631b <find_object+0x7d>
c000630d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006311:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c0006319:	eb bb                	jmp    c00062d6 <find_object+0x38>
c000631b:	8b 0d b4 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025eb4
c0006321:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006325:	85 c9                	test   ecx,ecx
c0006327:	89 d0                	mov    eax,edx
c0006329:	74 2b                	je     c0006356 <find_object+0xb8>
c000632b:	8d 43 21             	lea    eax,[ebx+0x21]
c000632e:	89 d1                	mov    ecx,edx
c0006330:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006334:	e8 0f fd ff ff       	call   c0006048 <ucscompare>
c0006339:	85 c0                	test   eax,eax
c000633b:	0f 84 cd 00 00 00    	je     c000640e <find_object+0x170>
c0006341:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006344:	01 c5                	add    ebp,eax
c0006346:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000634c:	7f bf                	jg     c000630d <find_object+0x6f>
c000634e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006352:	7f a3                	jg     c00062f7 <find_object+0x59>
c0006354:	eb b7                	jmp    c000630d <find_object+0x6f>
c0006356:	29 d6                	sub    esi,edx
c0006358:	a8 01                	test   al,0x1
c000635a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000635e:	74 05                	je     c0006365 <find_object+0xc7>
c0006360:	83 ee 21             	sub    esi,0x21
c0006363:	eb 6a                	jmp    c00063cf <find_object+0x131>
c0006365:	42                   	inc    edx
c0006366:	83 ee 22             	sub    esi,0x22
c0006369:	eb 64                	jmp    c00063cf <find_object+0x131>
c000636b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000636e:	48                   	dec    eax
c000636f:	3c 01                	cmp    al,0x1
c0006371:	77 61                	ja     c00063d4 <find_object+0x136>
c0006373:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006377:	50                   	push   eax
c0006378:	6a 02                	push   0x2
c000637a:	68 3d 06 02 c0       	push   0xc002063d
c000637f:	52                   	push   edx
c0006380:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006384:	e8 87 a4 ff ff       	call   c0000810 <strncmp>
c0006389:	83 c4 10             	add    esp,0x10
c000638c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006390:	85 c0                	test   eax,eax
c0006392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006396:	75 2f                	jne    c00063c7 <find_object+0x129>
c0006398:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000639c:	50                   	push   eax
c000639d:	8d 42 05             	lea    eax,[edx+0x5]
c00063a0:	83 e9 05             	sub    ecx,0x5
c00063a3:	51                   	push   ecx
c00063a4:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00063a8:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00063ac:	50                   	push   eax
c00063ad:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063b1:	50                   	push   eax
c00063b2:	e8 d9 a2 ff ff       	call   c0000690 <strncpy>
c00063b7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00063bb:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00063c0:	83 c4 10             	add    esp,0x10
c00063c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063c7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00063cb:	29 c6                	sub    esi,eax
c00063cd:	01 c2                	add    edx,eax
c00063cf:	83 fe 03             	cmp    esi,0x3
c00063d2:	7f 97                	jg     c000636b <find_object+0xcd>
c00063d4:	85 c9                	test   ecx,ecx
c00063d6:	7e 40                	jle    c0006418 <find_object+0x17a>
c00063d8:	51                   	push   ecx
c00063d9:	51                   	push   ecx
c00063da:	6a 2f                	push   0x2f
c00063dc:	57                   	push   edi
c00063dd:	e8 ee a3 ff ff       	call   c00007d0 <strchr>
c00063e2:	83 c4 10             	add    esp,0x10
c00063e5:	85 c0                	test   eax,eax
c00063e7:	74 04                	je     c00063ed <find_object+0x14f>
c00063e9:	29 f8                	sub    eax,edi
c00063eb:	eb 0c                	jmp    c00063f9 <find_object+0x15b>
c00063ed:	83 ec 0c             	sub    esp,0xc
c00063f0:	57                   	push   edi
c00063f1:	e8 8a a1 ff ff       	call   c0000580 <strlen>
c00063f6:	83 c4 10             	add    esp,0x10
c00063f9:	52                   	push   edx
c00063fa:	50                   	push   eax
c00063fb:	57                   	push   edi
c00063fc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006400:	50                   	push   eax
c0006401:	e8 38 fe ff ff       	call   c000623e <strnicmp>
c0006406:	83 c4 10             	add    esp,0x10
c0006409:	e9 2b ff ff ff       	jmp    c0006339 <find_object+0x9b>
c000640e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006412:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006416:	eb 1e                	jmp    c0006436 <find_object+0x198>
c0006418:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c000641c:	8d 43 21             	lea    eax,[ebx+0x21]
c000641f:	89 f9                	mov    ecx,edi
c0006421:	e8 a1 fc ff ff       	call   c00060c7 <fncompare>
c0006426:	85 c0                	test   eax,eax
c0006428:	0f 85 13 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000642e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006432:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006436:	0f 85 05 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000643c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006442:	89 d8                	mov    eax,ebx
c0006444:	5b                   	pop    ebx
c0006445:	5e                   	pop    esi
c0006446:	5f                   	pop    edi
c0006447:	5d                   	pop    ebp
c0006448:	c3                   	ret    

c0006449 <find_object_path>:
c0006449:	55                   	push   ebp
c000644a:	57                   	push   edi
c000644b:	89 d7                	mov    edi,edx
c000644d:	56                   	push   esi
c000644e:	89 c6                	mov    esi,eax
c0006450:	53                   	push   ebx
c0006451:	89 cb                	mov    ebx,ecx
c0006453:	83 ec 0c             	sub    esp,0xc
c0006456:	50                   	push   eax
c0006457:	50                   	push   eax
c0006458:	6a 2f                	push   0x2f
c000645a:	56                   	push   esi
c000645b:	e8 70 a3 ff ff       	call   c00007d0 <strchr>
c0006460:	83 c4 10             	add    esp,0x10
c0006463:	85 c0                	test   eax,eax
c0006465:	89 c5                	mov    ebp,eax
c0006467:	74 3a                	je     c00064a3 <find_object_path+0x5a>
c0006469:	39 ee                	cmp    esi,ebp
c000646b:	74 31                	je     c000649e <find_object_path+0x55>
c000646d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006470:	e8 b5 fb ff ff       	call   c000602a <iso_733>
c0006475:	89 c2                	mov    edx,eax
c0006477:	8d 43 02             	lea    eax,[ebx+0x2]
c000647a:	e8 ab fb ff ff       	call   c000602a <iso_733>
c000647f:	83 ec 0c             	sub    esp,0xc
c0006482:	52                   	push   edx
c0006483:	89 c1                	mov    ecx,eax
c0006485:	ba 01 00 00 00       	mov    edx,0x1
c000648a:	89 f0                	mov    eax,esi
c000648c:	e8 0d fe ff ff       	call   c000629e <find_object>
c0006491:	83 c4 10             	add    esp,0x10
c0006494:	85 c0                	test   eax,eax
c0006496:	89 c3                	mov    ebx,eax
c0006498:	75 04                	jne    c000649e <find_object_path+0x55>
c000649a:	31 db                	xor    ebx,ebx
c000649c:	eb 36                	jmp    c00064d4 <find_object_path+0x8b>
c000649e:	8d 75 01             	lea    esi,[ebp+0x1]
c00064a1:	eb b3                	jmp    c0006456 <find_object_path+0xd>
c00064a3:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00064a6:	74 28                	je     c00064d0 <find_object_path+0x87>
c00064a8:	8d 43 0a             	lea    eax,[ebx+0xa]
c00064ab:	e8 7a fb ff ff       	call   c000602a <iso_733>
c00064b0:	89 c2                	mov    edx,eax
c00064b2:	8d 43 02             	lea    eax,[ebx+0x2]
c00064b5:	e8 70 fb ff ff       	call   c000602a <iso_733>
c00064ba:	83 ec 0c             	sub    esp,0xc
c00064bd:	52                   	push   edx
c00064be:	89 c1                	mov    ecx,eax
c00064c0:	89 fa                	mov    edx,edi
c00064c2:	89 f0                	mov    eax,esi
c00064c4:	e8 d5 fd ff ff       	call   c000629e <find_object>
c00064c9:	83 c4 10             	add    esp,0x10
c00064cc:	89 c3                	mov    ebx,eax
c00064ce:	eb 04                	jmp    c00064d4 <find_object_path+0x8b>
c00064d0:	85 ff                	test   edi,edi
c00064d2:	74 c6                	je     c000649a <find_object_path+0x51>
c00064d4:	83 c4 0c             	add    esp,0xc
c00064d7:	89 d8                	mov    eax,ebx
c00064d9:	5b                   	pop    ebx
c00064da:	5e                   	pop    esi
c00064db:	5f                   	pop    edi
c00064dc:	5d                   	pop    ebp
c00064dd:	c3                   	ret    

c00064de <stricmp>:
c00064de:	57                   	push   edi
c00064df:	56                   	push   esi
c00064e0:	31 f6                	xor    esi,esi
c00064e2:	53                   	push   ebx
c00064e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064e7:	83 ec 0c             	sub    esp,0xc
c00064ea:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064f6:	46                   	inc    esi
c00064f7:	50                   	push   eax
c00064f8:	e8 63 a4 ff ff       	call   c0000960 <toupper>
c00064fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006500:	e8 7b a4 ff ff       	call   c0000980 <tolower>
c0006505:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006508:	89 c3                	mov    ebx,eax
c000650a:	e8 51 a4 ff ff       	call   c0000960 <toupper>
c000650f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006512:	e8 69 a4 ff ff       	call   c0000980 <tolower>
c0006517:	83 c4 10             	add    esp,0x10
c000651a:	39 c3                	cmp    ebx,eax
c000651c:	75 04                	jne    c0006522 <stricmp+0x44>
c000651e:	85 db                	test   ebx,ebx
c0006520:	75 c1                	jne    c00064e3 <stricmp+0x5>
c0006522:	29 c3                	sub    ebx,eax
c0006524:	89 d8                	mov    eax,ebx
c0006526:	5b                   	pop    ebx
c0006527:	5e                   	pop    esi
c0006528:	5f                   	pop    edi
c0006529:	c3                   	ret    

c000652a <iso_open>:
c000652a:	57                   	push   edi
c000652b:	31 c0                	xor    eax,eax
c000652d:	56                   	push   esi
c000652e:	b9 80 5e 02 c0       	mov    ecx,0xc0025e80
c0006533:	53                   	push   ebx
c0006534:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006539:	0f 95 c0             	setne  al
c000653c:	89 c2                	mov    edx,eax
c000653e:	89 c6                	mov    esi,eax
c0006540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006544:	e8 00 ff ff ff       	call   c0006449 <find_object_path>
c0006549:	83 ca ff             	or     edx,0xffffffff
c000654c:	85 c0                	test   eax,eax
c000654e:	74 5e                	je     c00065ae <iso_open+0x84>
c0006550:	89 c1                	mov    ecx,eax
c0006552:	31 d2                	xor    edx,edx
c0006554:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000655a:	83 bf 40 55 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdaac0],0x0
c0006561:	75 42                	jne    c00065a5 <iso_open+0x7b>
c0006563:	c7 87 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdaac0],0xffffffff
c000656d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006570:	e8 b5 fa ff ff       	call   c000602a <iso_733>
c0006575:	89 b7 44 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaabc],esi
c000657b:	c7 87 48 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaab8],0x0
c0006585:	89 87 40 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaac0],eax
c000658b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000658e:	e8 97 fa ff ff       	call   c000602a <iso_733>
c0006593:	c7 87 d0 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaa30],0x0
c000659d:	89 87 4c 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaab4],eax
c00065a3:	eb 09                	jmp    c00065ae <iso_open+0x84>
c00065a5:	42                   	inc    edx
c00065a6:	83 fa 10             	cmp    edx,0x10
c00065a9:	75 a9                	jne    c0006554 <iso_open+0x2a>
c00065ab:	83 ca ff             	or     edx,0xffffffff
c00065ae:	5b                   	pop    ebx
c00065af:	89 d0                	mov    eax,edx
c00065b1:	5e                   	pop    esi
c00065b2:	5f                   	pop    edi
c00065b3:	c3                   	ret    

c00065b4 <iso_close>:
c00065b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065b8:	83 f8 0f             	cmp    eax,0xf
c00065bb:	7f 10                	jg     c00065cd <iso_close+0x19>
c00065bd:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065c3:	c7 80 40 55 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdaac0],0x0
c00065cd:	e9 6d fb ff ff       	jmp    c000613f <bclear_cache>

c00065d2 <iso_read>:
c00065d2:	55                   	push   ebp
c00065d3:	57                   	push   edi
c00065d4:	56                   	push   esi
c00065d5:	53                   	push   ebx
c00065d6:	83 ec 1c             	sub    esp,0x1c
c00065d9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065dd:	83 fd 0f             	cmp    ebp,0xf
c00065e0:	7e 0a                	jle    c00065ec <iso_read+0x1a>
c00065e2:	83 c8 ff             	or     eax,0xffffffff
c00065e5:	89 c2                	mov    edx,eax
c00065e7:	e9 f4 00 00 00       	jmp    c00066e0 <iso_read+0x10e>
c00065ec:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065f2:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c00065f9:	74 e7                	je     c00065e2 <iso_read+0x10>
c00065fb:	8b 95 d0 55 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdaa30]
c0006601:	85 d2                	test   edx,edx
c0006603:	75 dd                	jne    c00065e2 <iso_read+0x10>
c0006605:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000660a:	0f 84 cd 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006610:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c0006616:	8b 9d 4c 55 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffdaab4]
c000661c:	29 c3                	sub    ebx,eax
c000661e:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006622:	89 d9                	mov    ecx,ebx
c0006624:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006629:	85 c9                	test   ecx,ecx
c000662b:	0f 84 ac 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006631:	89 c6                	mov    esi,eax
c0006633:	bb 00 08 00 00       	mov    ebx,0x800
c0006638:	c1 e8 0b             	shr    eax,0xb
c000663b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006641:	03 85 40 55 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdaac0]
c0006647:	29 f3                	sub    ebx,esi
c0006649:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000664f:	75 3f                	jne    c0006690 <iso_read+0xbe>
c0006651:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006657:	7e 37                	jle    c0006690 <iso_read+0xbe>
c0006659:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000665f:	be 20 00 00 00       	mov    esi,0x20
c0006664:	7f 05                	jg     c000666b <iso_read+0x99>
c0006666:	89 ce                	mov    esi,ecx
c0006668:	c1 fe 0b             	sar    esi,0xb
c000666b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000666f:	89 f3                	mov    ebx,esi
c0006671:	52                   	push   edx
c0006672:	56                   	push   esi
c0006673:	50                   	push   eax
c0006674:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006678:	c1 e3 0b             	shl    ebx,0xb
c000667b:	e8 23 fb ff ff       	call   c00061a3 <isoReadDiscSector>
c0006680:	83 c4 10             	add    esp,0x10
c0006683:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006687:	85 c0                	test   eax,eax
c0006689:	7f 3d                	jg     c00066c8 <iso_read+0xf6>
c000668b:	e9 52 ff ff ff       	jmp    c00065e2 <iso_read+0x10>
c0006690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006694:	39 d9                	cmp    ecx,ebx
c0006696:	0f 4e d9             	cmovle ebx,ecx
c0006699:	e8 97 fb ff ff       	call   c0006235 <bdread>
c000669e:	85 c0                	test   eax,eax
c00066a0:	0f 88 3c ff ff ff    	js     c00065e2 <iso_read+0x10>
c00066a6:	8b 0c 85 20 50 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdafe0]
c00066ad:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c00066b3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066b7:	25 ff 07 00 00       	and    eax,0x7ff
c00066bc:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066c0:	89 d9                	mov    ecx,ebx
c00066c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066c8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066cc:	01 da                	add    edx,ebx
c00066ce:	01 9d 48 55 02 c0    	add    DWORD PTR [ebp-0x3ffdaab8],ebx
c00066d4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066d8:	e9 28 ff ff ff       	jmp    c0006605 <iso_read+0x33>
c00066dd:	89 d0                	mov    eax,edx
c00066df:	99                   	cdq    
c00066e0:	83 c4 1c             	add    esp,0x1c
c00066e3:	5b                   	pop    ebx
c00066e4:	5e                   	pop    esi
c00066e5:	5f                   	pop    edi
c00066e6:	5d                   	pop    ebp
c00066e7:	c3                   	ret    

c00066e8 <iso_seek>:
c00066e8:	55                   	push   ebp
c00066e9:	83 c8 ff             	or     eax,0xffffffff
c00066ec:	57                   	push   edi
c00066ed:	89 c2                	mov    edx,eax
c00066ef:	56                   	push   esi
c00066f0:	53                   	push   ebx
c00066f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066fd:	83 fe 0f             	cmp    esi,0xf
c0006700:	7f 65                	jg     c0006767 <iso_seek+0x7f>
c0006702:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006708:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c000670f:	8d 8d 40 55 02 c0    	lea    ecx,[ebp-0x3ffdaac0]
c0006715:	74 50                	je     c0006767 <iso_seek+0x7f>
c0006717:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c000671e:	75 47                	jne    c0006767 <iso_seek+0x7f>
c0006720:	83 fb 01             	cmp    ebx,0x1
c0006723:	74 0e                	je     c0006733 <iso_seek+0x4b>
c0006725:	83 fb 02             	cmp    ebx,0x2
c0006728:	74 0e                	je     c0006738 <iso_seek+0x50>
c000672a:	85 db                	test   ebx,ebx
c000672c:	75 39                	jne    c0006767 <iso_seek+0x7f>
c000672e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006731:	eb 0d                	jmp    c0006740 <iso_seek+0x58>
c0006733:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006736:	eb 08                	jmp    c0006740 <iso_seek+0x58>
c0006738:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000673b:	01 f8                	add    eax,edi
c000673d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006740:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006746:	8b 88 4c 55 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdaab4]
c000674c:	05 40 55 02 c0       	add    eax,0xc0025540
c0006751:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006754:	76 03                	jbe    c0006759 <iso_seek+0x71>
c0006756:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006759:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000675f:	8b 82 48 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab8]
c0006765:	31 d2                	xor    edx,edx
c0006767:	5b                   	pop    ebx
c0006768:	5e                   	pop    esi
c0006769:	5f                   	pop    edi
c000676a:	5d                   	pop    ebp
c000676b:	c3                   	ret    

c000676c <iso_tell>:
c000676c:	53                   	push   ebx
c000676d:	83 c8 ff             	or     eax,0xffffffff
c0006770:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006774:	89 c2                	mov    edx,eax
c0006776:	83 f9 0f             	cmp    ecx,0xf
c0006779:	7f 20                	jg     c000679b <iso_tell+0x2f>
c000677b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006781:	83 bb 40 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaac0],0x0
c0006788:	74 11                	je     c000679b <iso_tell+0x2f>
c000678a:	83 bb d0 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaa30],0x0
c0006791:	75 08                	jne    c000679b <iso_tell+0x2f>
c0006793:	8b 83 48 55 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdaab8]
c0006799:	31 d2                	xor    edx,edx
c000679b:	5b                   	pop    ebx
c000679c:	c3                   	ret    

c000679d <iso_total>:
c000679d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067a1:	83 c8 ff             	or     eax,0xffffffff
c00067a4:	83 fa 0f             	cmp    edx,0xf
c00067a7:	7f 1e                	jg     c00067c7 <iso_total+0x2a>
c00067a9:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c00067af:	83 ba 40 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaac0],0x0
c00067b6:	74 0f                	je     c00067c7 <iso_total+0x2a>
c00067b8:	83 ba d0 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaa30],0x0
c00067bf:	75 06                	jne    c00067c7 <iso_total+0x2a>
c00067c1:	8b 82 4c 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab4]
c00067c7:	c3                   	ret    

c00067c8 <fn_postprocess>:
c00067c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067cc:	89 d0                	mov    eax,edx
c00067ce:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067d1:	85 c9                	test   ecx,ecx
c00067d3:	74 08                	je     c00067dd <fn_postprocess+0x15>
c00067d5:	83 f9 3b             	cmp    ecx,0x3b
c00067d8:	74 03                	je     c00067dd <fn_postprocess+0x15>
c00067da:	40                   	inc    eax
c00067db:	eb f1                	jmp    c00067ce <fn_postprocess+0x6>
c00067dd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067e0:	39 d0                	cmp    eax,edx
c00067e2:	76 0a                	jbe    c00067ee <fn_postprocess+0x26>
c00067e4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067e8:	75 04                	jne    c00067ee <fn_postprocess+0x26>
c00067ea:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067ee:	c3                   	ret    

c00067ef <iso_readdir>:
c00067ef:	55                   	push   ebp
c00067f0:	57                   	push   edi
c00067f1:	56                   	push   esi
c00067f2:	53                   	push   ebx
c00067f3:	83 ec 1c             	sub    esp,0x1c
c00067f6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067fa:	83 fb 0f             	cmp    ebx,0xf
c00067fd:	7f 28                	jg     c0006827 <iso_readdir+0x38>
c00067ff:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006805:	83 b8 40 55 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdaac0],0x0
c000680c:	8d b8 40 55 02 c0    	lea    edi,[eax-0x3ffdaac0]
c0006812:	74 13                	je     c0006827 <iso_readdir+0x38>
c0006814:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006818:	74 0d                	je     c0006827 <iso_readdir+0x38>
c000681a:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006821:	0f 84 b1 00 00 00    	je     c00068d8 <iso_readdir+0xe9>
c0006827:	83 ec 0c             	sub    esp,0xc
c000682a:	68 40 06 02 c0       	push   0xc0020640
c000682f:	e8 4c 37 01 00       	call   c0019f80 <iso_kprintf>
c0006834:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006837:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000683d:	e8 5a 37 01 00       	call   c0019f9c <iso_kprintfd>
c0006842:	c7 04 24 45 06 02 c0 	mov    DWORD PTR [esp],0xc0020645
c0006849:	e8 32 37 01 00       	call   c0019f80 <iso_kprintf>
c000684e:	58                   	pop    eax
c000684f:	ff b3 40 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaac0]
c0006855:	e8 42 37 01 00       	call   c0019f9c <iso_kprintfd>
c000685a:	c7 04 24 4b 06 02 c0 	mov    DWORD PTR [esp],0xc002064b
c0006861:	e8 1a 37 01 00       	call   c0019f80 <iso_kprintf>
c0006866:	58                   	pop    eax
c0006867:	ff b3 44 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaabc]
c000686d:	e8 2a 37 01 00       	call   c0019f9c <iso_kprintfd>
c0006872:	c7 04 24 51 06 02 c0 	mov    DWORD PTR [esp],0xc0020651
c0006879:	e8 02 37 01 00       	call   c0019f80 <iso_kprintf>
c000687e:	58                   	pop    eax
c000687f:	ff b3 d0 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaa30]
c0006885:	e8 12 37 01 00       	call   c0019f9c <iso_kprintfd>
c000688a:	83 c4 10             	add    esp,0x10
c000688d:	eb 42                	jmp    c00068d1 <iso_readdir+0xe2>
c000688f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006892:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c0006899:	89 d1                	mov    ecx,edx
c000689b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00068a1:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c00068a5:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00068a8:	75 35                	jne    c00068df <iso_readdir+0xf0>
c00068aa:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c00068b0:	81 c2 00 08 00 00    	add    edx,0x800
c00068b6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00068b9:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00068bc:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068bf:	73 1e                	jae    c00068df <iso_readdir+0xf0>
c00068c1:	8b 07                	mov    eax,DWORD PTR [edi]
c00068c3:	c1 ea 0b             	shr    edx,0xb
c00068c6:	01 d0                	add    eax,edx
c00068c8:	e8 5f f9 ff ff       	call   c000622c <biread>
c00068cd:	85 c0                	test   eax,eax
c00068cf:	79 be                	jns    c000688f <iso_readdir+0xa0>
c00068d1:	31 c0                	xor    eax,eax
c00068d3:	e9 6a 01 00 00       	jmp    c0006a42 <iso_readdir+0x253>
c00068d8:	31 f6                	xor    esi,esi
c00068da:	83 c8 ff             	or     eax,0xffffffff
c00068dd:	eb da                	jmp    c00068b9 <iso_readdir+0xca>
c00068df:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068e5:	8b ba 48 55 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdaab8]
c00068eb:	81 c2 40 55 02 c0    	add    edx,0xc0025540
c00068f1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068f4:	73 db                	jae    c00068d1 <iso_readdir+0xe2>
c00068f6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068fa:	75 34                	jne    c0006930 <iso_readdir+0x141>
c00068fc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006900:	75 2e                	jne    c0006930 <iso_readdir+0x141>
c0006902:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006905:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c000690c:	01 f9                	add    ecx,edi
c000690e:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006911:	89 c8                	mov    eax,ecx
c0006913:	25 ff 07 00 00       	and    eax,0x7ff
c0006918:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c000691d:	01 c8                	add    eax,ecx
c000691f:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006922:	25 ff 07 00 00       	and    eax,0x7ff
c0006927:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000692b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000692e:	74 a1                	je     c00068d1 <iso_readdir+0xe2>
c0006930:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006936:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000693a:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006941:	8d 56 21             	lea    edx,[esi+0x21]
c0006944:	8d af 58 55 02 c0    	lea    ebp,[edi-0x3ffdaaa8]
c000694a:	74 0c                	je     c0006958 <iso_readdir+0x169>
c000694c:	89 e8                	mov    eax,ebp
c000694e:	e8 27 f6 ff ff       	call   c0005f7a <ucs2utfn>
c0006953:	e9 b1 00 00 00       	jmp    c0006a09 <iso_readdir+0x21a>
c0006958:	50                   	push   eax
c0006959:	51                   	push   ecx
c000695a:	52                   	push   edx
c000695b:	55                   	push   ebp
c000695c:	e8 2f 9d ff ff       	call   c0000690 <strncpy>
c0006961:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006965:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006968:	c6 84 07 58 55 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdaaa8],0x0
c0006970:	e8 53 fe ff ff       	call   c00067c8 <fn_postprocess>
c0006975:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000697f:	89 d1                	mov    ecx,edx
c0006981:	29 d0                	sub    eax,edx
c0006983:	80 e1 01             	and    cl,0x1
c0006986:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c000698a:	74 05                	je     c0006991 <iso_readdir+0x1a2>
c000698c:	83 e8 21             	sub    eax,0x21
c000698f:	eb 04                	jmp    c0006995 <iso_readdir+0x1a6>
c0006991:	42                   	inc    edx
c0006992:	83 e8 22             	sub    eax,0x22
c0006995:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006999:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000699f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00069a3:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c00069a8:	7e 5f                	jle    c0006a09 <iso_readdir+0x21a>
c00069aa:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c00069ad:	48                   	dec    eax
c00069ae:	3c 01                	cmp    al,0x1
c00069b0:	77 57                	ja     c0006a09 <iso_readdir+0x21a>
c00069b2:	51                   	push   ecx
c00069b3:	6a 02                	push   0x2
c00069b5:	68 3d 06 02 c0       	push   0xc002063d
c00069ba:	52                   	push   edx
c00069bb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00069bf:	e8 4c 9e ff ff       	call   c0000810 <strncmp>
c00069c4:	83 c4 10             	add    esp,0x10
c00069c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069cb:	85 c0                	test   eax,eax
c00069cd:	75 2e                	jne    c00069fd <iso_readdir+0x20e>
c00069cf:	50                   	push   eax
c00069d0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069d4:	83 e8 05             	sub    eax,0x5
c00069d7:	50                   	push   eax
c00069d8:	8d 42 05             	lea    eax,[edx+0x5]
c00069db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00069df:	50                   	push   eax
c00069e0:	55                   	push   ebp
c00069e1:	e8 aa 9c ff ff       	call   c0000690 <strncpy>
c00069e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00069ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00069ee:	83 c4 10             	add    esp,0x10
c00069f1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069f5:	c6 84 08 53 55 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdaaad],0x0
c00069fd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006a01:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006a05:	01 c2                	add    edx,eax
c0006a07:	eb 9a                	jmp    c00069a3 <iso_readdir+0x1b4>
c0006a09:	83 c8 ff             	or     eax,0xffffffff
c0006a0c:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006a10:	89 c2                	mov    edx,eax
c0006a12:	75 0a                	jne    c0006a1e <iso_readdir+0x22f>
c0006a14:	8d 46 0a             	lea    eax,[esi+0xa]
c0006a17:	e8 0e f6 ff ff       	call   c000602a <iso_733>
c0006a1c:	31 d2                	xor    edx,edx
c0006a1e:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a24:	89 83 50 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaab0],eax
c0006a2a:	89 93 54 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaaac],edx
c0006a30:	81 c3 40 55 02 c0    	add    ebx,0xc0025540
c0006a36:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a39:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a3c:	8d 87 50 55 02 c0    	lea    eax,[edi-0x3ffdaab0]
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	5b                   	pop    ebx
c0006a46:	5e                   	pop    esi
c0006a47:	5f                   	pop    edi
c0006a48:	5d                   	pop    ebp
c0006a49:	c3                   	ret    

c0006a4a <iso_reset>:
c0006a4a:	83 ec 18             	sub    esp,0x18
c0006a4d:	68 5a 06 02 c0       	push   0xc002065a
c0006a52:	e8 29 35 01 00       	call   c0019f80 <iso_kprintf>
c0006a57:	e8 1b f7 ff ff       	call   c0006177 <iso_break_all>
c0006a5c:	e8 14 f7 ff ff       	call   c0006175 <bclear>
c0006a61:	31 c0                	xor    eax,eax
c0006a63:	83 c4 1c             	add    esp,0x1c
c0006a66:	c3                   	ret    

c0006a67 <init_percd>:
c0006a67:	57                   	push   edi
c0006a68:	56                   	push   esi
c0006a69:	53                   	push   ebx
c0006a6a:	bb 01 00 00 00       	mov    ebx,0x1
c0006a6f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006a73:	a2 60 50 02 c0       	mov    ds:0xc0025060,al
c0006a78:	e8 cd ff ff ff       	call   c0006a4a <iso_reset>
c0006a7d:	c7 05 b4 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb4,0x0
c0006a87:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006a8c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a90:	e8 97 f7 ff ff       	call   c000622c <biread>
c0006a95:	85 c0                	test   eax,eax
c0006a97:	89 c6                	mov    esi,eax
c0006a99:	0f 88 ba 00 00 00    	js     c0006b59 <init_percd+0xf2>
c0006a9f:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c0006aa6:	52                   	push   edx
c0006aa7:	6a 06                	push   0x6
c0006aa9:	68 65 06 02 c0       	push   0xc0020665
c0006aae:	83 c0 04             	add    eax,0x4
c0006ab1:	50                   	push   eax
c0006ab2:	e8 c9 98 ff ff       	call   c0000380 <memcmp>
c0006ab7:	83 c4 10             	add    esp,0x10
c0006aba:	85 c0                	test   eax,eax
c0006abc:	74 08                	je     c0006ac6 <init_percd+0x5f>
c0006abe:	43                   	inc    ebx
c0006abf:	83 fb 04             	cmp    ebx,0x4
c0006ac2:	75 c3                	jne    c0006a87 <init_percd+0x20>
c0006ac4:	eb 1a                	jmp    c0006ae0 <init_percd+0x79>
c0006ac6:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006acd:	83 c0 5c             	add    eax,0x5c
c0006ad0:	e8 22 f5 ff ff       	call   c0005ff7 <isjoliet>
c0006ad5:	a3 b4 5e 02 c0       	mov    ds:0xc0025eb4,eax
c0006ada:	85 c0                	test   eax,eax
c0006adc:	74 e0                	je     c0006abe <init_percd+0x57>
c0006ade:	eb 3e                	jmp    c0006b1e <init_percd+0xb7>
c0006ae0:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006ae7:	75 35                	jne    c0006b1e <init_percd+0xb7>
c0006ae9:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006aee:	83 c0 10             	add    eax,0x10
c0006af1:	e8 36 f7 ff ff       	call   c000622c <biread>
c0006af6:	85 c0                	test   eax,eax
c0006af8:	89 c6                	mov    esi,eax
c0006afa:	78 5f                	js     c0006b5b <init_percd+0xf4>
c0006afc:	50                   	push   eax
c0006afd:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006b04:	83 cb ff             	or     ebx,0xffffffff
c0006b07:	6a 06                	push   0x6
c0006b09:	68 6c 06 02 c0       	push   0xc002066c
c0006b0e:	83 c0 04             	add    eax,0x4
c0006b11:	50                   	push   eax
c0006b12:	e8 69 98 ff ff       	call   c0000380 <memcmp>
c0006b17:	83 c4 10             	add    esp,0x10
c0006b1a:	85 c0                	test   eax,eax
c0006b1c:	75 3d                	jne    c0006b5b <init_percd+0xf4>
c0006b1e:	8b 34 b5 80 50 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdaf80]
c0006b25:	bf 80 5e 02 c0       	mov    edi,0xc0025e80
c0006b2a:	b9 22 00 00 00       	mov    ecx,0x22
c0006b2f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b37:	b8 82 5e 02 c0       	mov    eax,0xc0025e82
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	e8 e7 f4 ff ff       	call   c000602a <iso_733>
c0006b43:	a3 a8 5e 02 c0       	mov    ds:0xc0025ea8,eax
c0006b48:	b8 8a 5e 02 c0       	mov    eax,0xc0025e8a
c0006b4d:	e8 d8 f4 ff ff       	call   c000602a <iso_733>
c0006b52:	a3 a4 5e 02 c0       	mov    ds:0xc0025ea4,eax
c0006b57:	eb 02                	jmp    c0006b5b <init_percd+0xf4>
c0006b59:	89 c3                	mov    ebx,eax
c0006b5b:	89 d8                	mov    eax,ebx
c0006b5d:	5b                   	pop    ebx
c0006b5e:	5e                   	pop    esi
c0006b5f:	5f                   	pop    edi
c0006b60:	c3                   	ret    

c0006b61 <iso_ioctl>:
c0006b61:	83 ec 18             	sub    esp,0x18
c0006b64:	68 73 06 02 c0       	push   0xc0020673
c0006b69:	e8 12 34 01 00       	call   c0019f80 <iso_kprintf>
c0006b6e:	e8 d7 fe ff ff       	call   c0006a4a <iso_reset>
c0006b73:	31 c0                	xor    eax,eax
c0006b75:	83 c4 1c             	add    esp,0x1c
c0006b78:	c3                   	ret    

c0006b79 <fs_iso9660_init>:
c0006b79:	53                   	push   ebx
c0006b7a:	31 db                	xor    ebx,ebx
c0006b7c:	83 ec 14             	sub    esp,0x14
c0006b7f:	68 7e 06 02 c0       	push   0xc002067e
c0006b84:	e8 f7 33 01 00       	call   c0019f80 <iso_kprintf>
c0006b89:	83 c4 0c             	add    esp,0xc
c0006b8c:	68 40 09 00 00       	push   0x940
c0006b91:	6a 00                	push   0x0
c0006b93:	68 40 55 02 c0       	push   0xc0025540
c0006b98:	e8 53 99 ff ff       	call   c00004f0 <memset>
c0006b9d:	c7 05 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0025540,0xffffffff
c0006ba7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bae:	e8 20 0f 00 00       	call   c0007ad3 <malloc>
c0006bb3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bba:	a3 b0 5e 02 c0       	mov    ds:0xc0025eb0,eax
c0006bbf:	e8 0f 0f 00 00       	call   c0007ad3 <malloc>
c0006bc4:	83 c4 10             	add    esp,0x10
c0006bc7:	a3 20 55 02 c0       	mov    ds:0xc0025520,eax
c0006bcc:	83 ec 0c             	sub    esp,0xc
c0006bcf:	68 04 08 00 00       	push   0x804
c0006bd4:	e8 fa 0e 00 00       	call   c0007ad3 <malloc>
c0006bd9:	89 04 9d 80 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdaf80],eax
c0006be0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bed:	e8 e1 0e 00 00       	call   c0007ad3 <malloc>
c0006bf2:	83 c4 10             	add    esp,0x10
c0006bf5:	89 04 9d 20 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdafe0],eax
c0006bfc:	43                   	inc    ebx
c0006bfd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006c03:	83 fb 10             	cmp    ebx,0x10
c0006c06:	75 c4                	jne    c0006bcc <fs_iso9660_init+0x53>
c0006c08:	83 c4 08             	add    esp,0x8
c0006c0b:	31 c0                	xor    eax,eax
c0006c0d:	5b                   	pop    ebx
c0006c0e:	c3                   	ret    

c0006c0f <fs_iso9660_shutdown>:
c0006c0f:	53                   	push   ebx
c0006c10:	31 db                	xor    ebx,ebx
c0006c12:	83 ec 08             	sub    esp,0x8
c0006c15:	83 ec 0c             	sub    esp,0xc
c0006c18:	ff 34 9d 80 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdaf80]
c0006c1f:	e8 bf 0e 00 00       	call   c0007ae3 <free>
c0006c24:	58                   	pop    eax
c0006c25:	ff 34 9d 20 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdafe0]
c0006c2c:	43                   	inc    ebx
c0006c2d:	e8 b1 0e 00 00       	call   c0007ae3 <free>
c0006c32:	83 c4 10             	add    esp,0x10
c0006c35:	83 fb 10             	cmp    ebx,0x10
c0006c38:	75 db                	jne    c0006c15 <fs_iso9660_shutdown+0x6>
c0006c3a:	a1 b0 5e 02 c0       	mov    eax,ds:0xc0025eb0
c0006c3f:	85 c0                	test   eax,eax
c0006c41:	74 0c                	je     c0006c4f <fs_iso9660_shutdown+0x40>
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	50                   	push   eax
c0006c47:	e8 97 0e 00 00       	call   c0007ae3 <free>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	a1 20 55 02 c0       	mov    eax,ds:0xc0025520
c0006c54:	85 c0                	test   eax,eax
c0006c56:	74 0c                	je     c0006c64 <fs_iso9660_shutdown+0x55>
c0006c58:	83 ec 0c             	sub    esp,0xc
c0006c5b:	50                   	push   eax
c0006c5c:	e8 82 0e 00 00       	call   c0007ae3 <free>
c0006c61:	83 c4 10             	add    esp,0x10
c0006c64:	c7 05 20 55 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025520,0x0
c0006c6e:	31 c0                	xor    eax,eax
c0006c70:	c7 05 b0 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb0,0x0
c0006c7a:	83 c4 08             	add    esp,0x8
c0006c7d:	5b                   	pop    ebx
c0006c7e:	c3                   	ret    
c0006c7f:	90                   	nop

c0006c80 <Computer::close(int, int, void*)>:
c0006c80:	57                   	push   edi
c0006c81:	56                   	push   esi
c0006c82:	53                   	push   ebx
c0006c83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c87:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c8f:	e8 c2 9e 00 00       	call   c0010b56 <KeExecuteAtexit()>
c0006c94:	83 ec 0c             	sub    esp,0xc
c0006c97:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c9d:	50                   	push   eax
c0006c9e:	e8 e7 5b 00 00       	call   c000c88a <Device::closeAll()>
c0006ca3:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006ca9:	83 c4 10             	add    esp,0x10
c0006cac:	8b 10                	mov    edx,DWORD PTR [eax]
c0006cae:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006cb2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006cba:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006cbe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006cc2:	5b                   	pop    ebx
c0006cc3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006cc6:	5e                   	pop    esi
c0006cc7:	5f                   	pop    edi
c0006cc8:	ff e0                	jmp    eax

c0006cca <Krnl::firstTask()>:
c0006cca:	53                   	push   ebx
c0006ccb:	83 ec 14             	sub    esp,0x14
c0006cce:	fb                   	sti    
c0006ccf:	68 8f 06 02 c0       	push   0xc002068f
c0006cd4:	e8 5c 9f 00 00       	call   c0010c35 <KeSetBootMessage(char const*)>
c0006cd9:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006ce0:	e8 ee 0d 00 00       	call   c0007ad3 <malloc>
c0006ce5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cec:	89 c3                	mov    ebx,eax
c0006cee:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0006cf3:	50                   	push   eax
c0006cf4:	68 a8 06 02 c0       	push   0xc00206a8
c0006cf9:	6a 01                	push   0x1
c0006cfb:	53                   	push   ebx
c0006cfc:	e8 97 ea 00 00       	call   c0015798 <Process::Process(bool, char const*, Process*, char**)>
c0006d01:	83 c4 20             	add    esp,0x20
c0006d04:	68 ff 00 00 00       	push   0xff
c0006d09:	6a 00                	push   0x0
c0006d0b:	68 1d 75 00 c0       	push   0xc000751d
c0006d10:	53                   	push   ebx
c0006d11:	e8 a6 ec 00 00       	call   c00159bc <Process::createThread(void (*)(void*), void*, int)>
c0006d16:	8b 15 f0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296f0
c0006d1c:	6a 7a                	push   0x7a
c0006d1e:	6a 00                	push   0x0
c0006d20:	68 80 64 01 c0       	push   0xc0016480
c0006d25:	52                   	push   edx
c0006d26:	e8 91 ec 00 00       	call   c00159bc <Process::createThread(void (*)(void*), void*, int)>
c0006d2b:	83 c4 14             	add    esp,0x14
c0006d2e:	68 a4 07 02 c0       	push   0xc00207a4
c0006d33:	a3 a8 96 02 c0       	mov    ds:0xc00296a8,eax
c0006d38:	e8 f8 9e 00 00       	call   c0010c35 <KeSetBootMessage(char const*)>
c0006d3d:	c6 05 bd 5e 02 c0 01 	mov    BYTE PTR ds:0xc0025ebd,0x1
c0006d44:	e8 77 a7 00 00       	call   c00114c0 <KeInitRand()>
c0006d49:	e8 55 fb 00 00       	call   c00168a3 <Vm::initialise8086()>
c0006d4e:	e8 2f 48 00 00       	call   c000b582 <Fs::initVFS()>
c0006d53:	c7 04 24 b5 06 02 c0 	mov    DWORD PTR [esp],0xc00206b5
c0006d5a:	e8 d6 9e 00 00       	call   c0010c35 <KeSetBootMessage(char const*)>
c0006d5f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006d64:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d6c:	6a 00                	push   0x0
c0006d6e:	6a 00                	push   0x0
c0006d70:	6a 00                	push   0x0
c0006d72:	50                   	push   eax
c0006d73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d76:	83 c4 14             	add    esp,0x14
c0006d79:	68 a4 07 02 c0       	push   0xc00207a4
c0006d7e:	e8 b2 9e 00 00       	call   c0010c35 <KeSetBootMessage(char const*)>
c0006d83:	e8 d7 44 00 00       	call   c000b25f <KeInitialiseSymlinks()>
c0006d88:	e8 df a3 00 00       	call   c001116c <KeLoadSystemEnv()>
c0006d8d:	e8 3c a6 00 00       	call   c00113ce <KeSetupPowerManager()>
c0006d92:	83 c4 0c             	add    esp,0xc
c0006d95:	6a 3a                	push   0x3a
c0006d97:	68 cf 06 02 c0       	push   0xc00206cf
c0006d9c:	68 d8 06 02 c0       	push   0xc00206d8
c0006da1:	e8 20 cc 00 00       	call   c00139c6 <Reg::readIntWithDefault(char*, char*, int)>
c0006da6:	89 04 24             	mov    DWORD PTR [esp],eax
c0006da9:	e8 36 54 00 00       	call   c000c1e4 <User::loadClockSettings(int)>
c0006dae:	c7 04 24 c8 07 02 c0 	mov    DWORD PTR [esp],0xc00207c8
c0006db5:	e8 7b 9e 00 00       	call   c0010c35 <KeSetBootMessage(char const*)>
c0006dba:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006dbf:	59                   	pop    ecx
c0006dc0:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006dc6:	53                   	push   ebx
c0006dc7:	e8 bc 5a 00 00       	call   c000c888 <Device::loadDriversForAll()>
c0006dcc:	c7 04 24 e0 06 02 c0 	mov    DWORD PTR [esp],0xc00206e0
c0006dd3:	e8 5d 9e 00 00       	call   c0010c35 <KeSetBootMessage(char const*)>
c0006dd8:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c0006dde:	58                   	pop    eax
c0006ddf:	5a                   	pop    edx
c0006de0:	6a 01                	push   0x1
c0006de2:	68 f1 06 02 c0       	push   0xc00206f1
c0006de7:	e8 b0 e3 00 00       	call   c001519c <Thr::loadDLL(char const*, bool)>
c0006dec:	59                   	pop    ecx
c0006ded:	5a                   	pop    edx
c0006dee:	53                   	push   ebx
c0006def:	50                   	push   eax
c0006df0:	e8 e7 e5 00 00       	call   c00153dc <Thr::executeDLL(unsigned long, void*)>
c0006df5:	83 c4 10             	add    esp,0x10
c0006df8:	83 ec 0c             	sub    esp,0xc
c0006dfb:	6a 02                	push   0x2
c0006dfd:	e8 06 f0 00 00       	call   c0015e08 <blockTask(TaskState)>
c0006e02:	83 c4 10             	add    esp,0x10
c0006e05:	eb f1                	jmp    c0006df8 <Krnl::firstTask()+0x12e>
c0006e07:	90                   	nop

c0006e08 <Computer::Computer()>:
c0006e08:	83 ec 0c             	sub    esp,0xc
c0006e0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e0f:	83 ec 08             	sub    esp,0x8
c0006e12:	68 0d 07 02 c0       	push   0xc002070d
c0006e17:	50                   	push   eax
c0006e18:	e8 e7 5a 00 00       	call   c000c904 <Device::Device(char const*)>
c0006e1d:	83 c4 10             	add    esp,0x10
c0006e20:	ba 14 08 02 c0       	mov    edx,0xc0020814
c0006e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e29:	89 10                	mov    DWORD PTR [eax],edx
c0006e2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e2f:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3d:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e4b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e51:	83 ca 04             	or     edx,0x4
c0006e54:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e64:	0f b6 d0             	movzx  edx,al
c0006e67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6b:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e76:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e7c:	0f b6 d0             	movzx  edx,al
c0006e7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e83:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e8c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e92:	8d 50 01             	lea    edx,[eax+0x1]
c0006e95:	88 d1                	mov    cl,dl
c0006e97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e9b:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006ea1:	0f b6 d0             	movzx  edx,al
c0006ea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ea8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006eac:	83 e1 3f             	and    ecx,0x3f
c0006eaf:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006eb3:	90                   	nop
c0006eb4:	83 c4 0c             	add    esp,0xc
c0006eb7:	c3                   	ret    

c0006eb8 <Computer::setBootMessage(char const*)>:
c0006eb8:	c3                   	ret    
c0006eb9:	90                   	nop

c0006eba <Computer::detectFeatures()>:
c0006eba:	55                   	push   ebp
c0006ebb:	57                   	push   edi
c0006ebc:	56                   	push   esi
c0006ebd:	53                   	push   ebx
c0006ebe:	83 ec 1c             	sub    esp,0x1c
c0006ec1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ec5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ecb:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006ed1:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006ed7:	e8 1d 93 ff ff       	call   c00001f9 <detectCPUID>
c0006edc:	31 d2                	xor    edx,edx
c0006ede:	85 c0                	test   eax,eax
c0006ee0:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ee6:	0f 95 c2             	setne  dl
c0006ee9:	d1 e2                	shl    edx,1
c0006eeb:	83 e0 fd             	and    eax,0xfffffffd
c0006eee:	09 d0                	or     eax,edx
c0006ef0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef6:	a8 02                	test   al,0x2
c0006ef8:	75 51                	jne    c0006f4b <Computer::detectFeatures()+0x91>
c0006efa:	f6 05 d1 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed1,0x4
c0006f01:	74 0f                	je     c0006f12 <Computer::detectFeatures()+0x58>
c0006f03:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f09:	83 e0 fb             	and    eax,0xfffffffb
c0006f0c:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f12:	e8 6f 80 01 00       	call   c001ef86 <x87Detect>
c0006f17:	83 e0 01             	and    eax,0x1
c0006f1a:	c1 e0 04             	shl    eax,0x4
c0006f1d:	89 c2                	mov    edx,eax
c0006f1f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f25:	83 e0 ef             	and    eax,0xffffffef
c0006f28:	09 d0                	or     eax,edx
c0006f2a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f30:	a8 10                	test   al,0x10
c0006f32:	88 c2                	mov    dl,al
c0006f34:	0f 85 33 01 00 00    	jne    c000706d <Computer::detectFeatures()+0x1b3>
c0006f3a:	80 e2 80             	and    dl,0x80
c0006f3d:	0f 85 4c 01 00 00    	jne    c000708f <Computer::detectFeatures()+0x1d5>
c0006f43:	83 c4 1c             	add    esp,0x1c
c0006f46:	5b                   	pop    ebx
c0006f47:	5e                   	pop    esi
c0006f48:	5f                   	pop    edi
c0006f49:	5d                   	pop    ebp
c0006f4a:	c3                   	ret    
c0006f4b:	83 ec 0c             	sub    esp,0xc
c0006f4e:	6a 20                	push   0x20
c0006f50:	e8 19 91 00 00       	call   c001006e <CPU::cpuidCheckEDX(unsigned int)>
c0006f55:	83 e0 01             	and    eax,0x1
c0006f58:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f5f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f65:	83 e0 f7             	and    eax,0xfffffff7
c0006f68:	09 d0                	or     eax,edx
c0006f6a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f70:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f77:	e8 f2 90 00 00       	call   c001006e <CPU::cpuidCheckEDX(unsigned int)>
c0006f7c:	89 c2                	mov    edx,eax
c0006f7e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f84:	83 e2 01             	and    edx,0x1
c0006f87:	83 e0 fe             	and    eax,0xfffffffe
c0006f8a:	09 d0                	or     eax,edx
c0006f8c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f92:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f99:	e8 d0 90 00 00       	call   c001006e <CPU::cpuidCheckEDX(unsigned int)>
c0006f9e:	89 c2                	mov    edx,eax
c0006fa0:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006fa6:	c1 e2 07             	shl    edx,0x7
c0006fa9:	83 e0 7f             	and    eax,0x7f
c0006fac:	09 d0                	or     eax,edx
c0006fae:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006fb4:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006fbb:	e8 ae 90 00 00       	call   c001006e <CPU::cpuidCheckEDX(unsigned int)>
c0006fc0:	83 c4 10             	add    esp,0x10
c0006fc3:	83 e0 01             	and    eax,0x1
c0006fc6:	c1 e0 05             	shl    eax,0x5
c0006fc9:	89 c2                	mov    edx,eax
c0006fcb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd1:	83 e0 df             	and    eax,0xffffffdf
c0006fd4:	09 d0                	or     eax,edx
c0006fd6:	f7 05 d0 5e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0025ed0,0x401
c0006fe0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fe6:	0f 84 c9 00 00 00    	je     c00070b5 <Computer::detectFeatures()+0x1fb>
c0006fec:	83 e0 fe             	and    eax,0xfffffffe
c0006fef:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ff5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ffb:	89 c2                	mov    edx,eax
c0006ffd:	83 e2 09             	and    edx,0x9
c0007000:	83 fa 01             	cmp    edx,0x1
c0007003:	75 09                	jne    c000700e <Computer::detectFeatures()+0x154>
c0007005:	83 e0 fe             	and    eax,0xfffffffe
c0007008:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000700e:	83 ec 0c             	sub    esp,0xc
c0007011:	8d 44 24 18          	lea    eax,[esp+0x18]
c0007015:	50                   	push   eax
c0007016:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000701a:	55                   	push   ebp
c000701b:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000701f:	57                   	push   edi
c0007020:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007024:	56                   	push   esi
c0007025:	68 00 00 00 80       	push   0x80000000
c000702a:	e8 bb 8f 00 00       	call   c000ffea <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000702f:	83 c4 20             	add    esp,0x20
c0007032:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007039:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000703d:	0f 86 b7 fe ff ff    	jbe    c0006efa <Computer::detectFeatures()+0x40>
c0007043:	83 ec 0c             	sub    esp,0xc
c0007046:	50                   	push   eax
c0007047:	55                   	push   ebp
c0007048:	57                   	push   edi
c0007049:	56                   	push   esi
c000704a:	68 01 00 00 80       	push   0x80000001
c000704f:	e8 96 8f 00 00       	call   c000ffea <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007054:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000705a:	83 c4 20             	add    esp,0x20
c000705d:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007062:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007068:	e9 8d fe ff ff       	jmp    c0006efa <Computer::detectFeatures()+0x40>
c000706d:	e8 ce 7e 01 00       	call   c001ef40 <absolutelyNoChanceInHell>
c0007072:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007078:	83 e2 7f             	and    edx,0x7f
c000707b:	c1 e0 07             	shl    eax,0x7
c000707e:	09 c2                	or     edx,eax
c0007080:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007086:	80 e2 80             	and    dl,0x80
c0007089:	0f 84 b4 fe ff ff    	je     c0006f43 <Computer::detectFeatures()+0x89>
c000708f:	e8 1c 7b 01 00       	call   c001ebb0 <avxDetect>
c0007094:	83 e0 01             	and    eax,0x1
c0007097:	c1 e0 05             	shl    eax,0x5
c000709a:	89 c2                	mov    edx,eax
c000709c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c00070a2:	83 e0 df             	and    eax,0xffffffdf
c00070a5:	09 d0                	or     eax,edx
c00070a7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00070ad:	83 c4 1c             	add    esp,0x1c
c00070b0:	5b                   	pop    ebx
c00070b1:	5e                   	pop    esi
c00070b2:	5f                   	pop    edi
c00070b3:	5d                   	pop    ebp
c00070b4:	c3                   	ret    
c00070b5:	83 ec 0c             	sub    esp,0xc
c00070b8:	68 00 02 00 00       	push   0x200
c00070bd:	e8 ac 8f 00 00       	call   c001006e <CPU::cpuidCheckEDX(unsigned int)>
c00070c2:	83 c4 10             	add    esp,0x10
c00070c5:	89 c2                	mov    edx,eax
c00070c7:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070cd:	83 e2 01             	and    edx,0x1
c00070d0:	83 e0 fe             	and    eax,0xfffffffe
c00070d3:	09 d0                	or     eax,edx
c00070d5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070db:	e9 15 ff ff ff       	jmp    c0006ff5 <Computer::detectFeatures()+0x13b>

c00070e0 <Computer::displayFeatures()>:
c00070e0:	c3                   	ret    
c00070e1:	90                   	nop

c00070e2 <Computer::rdmsr(unsigned int)>:
c00070e2:	83 ec 0c             	sub    esp,0xc
c00070e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070e9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070f0:	74 0a                	je     c00070fc <Computer::rdmsr(unsigned int)+0x1a>
c00070f2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070f6:	0f 32                	rdmsr  
c00070f8:	83 c4 0c             	add    esp,0xc
c00070fb:	c3                   	ret    
c00070fc:	83 ec 0c             	sub    esp,0xc
c00070ff:	68 16 07 02 c0       	push   0xc0020716
c0007104:	e8 00 a2 00 00       	call   c0011309 <KePanic(char const*)>
c0007109:	83 c4 10             	add    esp,0x10
c000710c:	eb e4                	jmp    c00070f2 <Computer::rdmsr(unsigned int)+0x10>

c000710e <Computer::wrmsr(unsigned int, unsigned long long)>:
c000710e:	57                   	push   edi
c000710f:	56                   	push   esi
c0007110:	83 ec 04             	sub    esp,0x4
c0007113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007117:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000711b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000711f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007126:	74 10                	je     c0007138 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007128:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000712c:	89 f0                	mov    eax,esi
c000712e:	89 fa                	mov    edx,edi
c0007130:	0f 30                	wrmsr  
c0007132:	83 c4 04             	add    esp,0x4
c0007135:	5e                   	pop    esi
c0007136:	5f                   	pop    edi
c0007137:	c3                   	ret    
c0007138:	83 ec 0c             	sub    esp,0xc
c000713b:	68 1c 07 02 c0       	push   0xc002071c
c0007140:	e8 c4 a1 00 00       	call   c0011309 <KePanic(char const*)>
c0007145:	83 c4 10             	add    esp,0x10
c0007148:	eb de                	jmp    c0007128 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c000714a <Computer::shutdown()>:
c000714a:	83 ec 0c             	sub    esp,0xc
c000714d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007151:	8b 10                	mov    edx,DWORD PTR [eax]
c0007153:	6a 00                	push   0x0
c0007155:	6a 00                	push   0x0
c0007157:	6a 00                	push   0x0
c0007159:	50                   	push   eax
c000715a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000715d:	83 c4 1c             	add    esp,0x1c
c0007160:	c3                   	ret    
c0007161:	90                   	nop

c0007162 <Computer::restart()>:
c0007162:	83 ec 0c             	sub    esp,0xc
c0007165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007169:	8b 10                	mov    edx,DWORD PTR [eax]
c000716b:	6a 00                	push   0x0
c000716d:	6a 00                	push   0x0
c000716f:	6a 01                	push   0x1
c0007171:	50                   	push   eax
c0007172:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007175:	83 c4 1c             	add    esp,0x1c
c0007178:	c3                   	ret    
c0007179:	90                   	nop

c000717a <Computer::sleep()>:
c000717a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000717e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007184:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007188:	e9 b3 89 00 00       	jmp    c000fb40 <ACPI::sleep()>
c000718d:	90                   	nop

c000718e <Computer::nmiEnabled()>:
c000718e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007192:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007198:	c3                   	ret    
c0007199:	90                   	nop

c000719a <Computer::readCMOS(unsigned char)>:
c000719a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000719e:	31 d2                	xor    edx,edx
c00071a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00071a4:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00071ab:	75 02                	jne    c00071af <Computer::readCMOS(unsigned char)+0x15>
c00071ad:	b2 80                	mov    dl,0x80
c00071af:	09 d0                	or     eax,edx
c00071b1:	e6 70                	out    0x70,al
c00071b3:	e4 71                	in     al,0x71
c00071b5:	c3                   	ret    

c00071b6 <Computer::enableNMI(bool)>:
c00071b6:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c00071ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071be:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071c4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071cc:	eb cc                	jmp    c000719a <Computer::readCMOS(unsigned char)>

c00071ce <Computer::open(int, int, void*)>:
c00071ce:	56                   	push   esi
c00071cf:	53                   	push   ebx
c00071d0:	83 ec 10             	sub    esp,0x10
c00071d3:	f6 05 d0 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed0,0x4
c00071da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071de:	68 22 07 02 c0       	push   0xc0020722
c00071e3:	0f 94 05 40 31 02 c0 	sete   BYTE PTR ds:0xc0023140
c00071ea:	e8 46 9a 00 00       	call   c0010c35 <KeSetBootMessage(char const*)>
c00071ef:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071f6:	e8 d8 08 00 00       	call   c0007ad3 <malloc>
c00071fb:	89 04 24             	mov    DWORD PTR [esp],eax
c00071fe:	89 c6                	mov    esi,eax
c0007200:	e8 af 84 00 00       	call   c000f6b4 <ACPI::ACPI()>
c0007205:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000720b:	58                   	pop    eax
c000720c:	5a                   	pop    edx
c000720d:	56                   	push   esi
c000720e:	53                   	push   ebx
c000720f:	e8 58 55 00 00       	call   c000c76c <Device::addChild(Device*)>
c0007214:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007217:	e8 9e fc ff ff       	call   c0006eba <Computer::detectFeatures()>
c000721c:	59                   	pop    ecx
c000721d:	5e                   	pop    esi
c000721e:	6a 01                	push   0x1
c0007220:	53                   	push   ebx
c0007221:	e8 90 ff ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c0007226:	c7 04 24 3a 07 02 c0 	mov    DWORD PTR [esp],0xc002073a
c000722d:	e8 03 9a 00 00       	call   c0010c35 <KeSetBootMessage(char const*)>
c0007232:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007239:	e8 95 08 00 00       	call   c0007ad3 <malloc>
c000723e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007241:	89 c6                	mov    esi,eax
c0007243:	e8 de 8e 00 00       	call   c0010126 <CPU::CPU()>
c0007248:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000724e:	58                   	pop    eax
c000724f:	5a                   	pop    edx
c0007250:	56                   	push   esi
c0007251:	53                   	push   ebx
c0007252:	e8 15 55 00 00       	call   c000c76c <Device::addChild(Device*)>
c0007257:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000725d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007261:	8b 10                	mov    edx,DWORD PTR [eax]
c0007263:	51                   	push   ecx
c0007264:	6a 00                	push   0x0
c0007266:	6a 00                	push   0x0
c0007268:	50                   	push   eax
c0007269:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000726c:	83 c4 14             	add    esp,0x14
c000726f:	68 e8 07 02 c0       	push   0xc00207e8
c0007274:	e8 bc 99 00 00       	call   c0010c35 <KeSetBootMessage(char const*)>
c0007279:	e8 6c 08 01 00       	call   c0017aea <HalInitialiseCoprocessor()>
c000727e:	c7 04 24 54 07 02 c0 	mov    DWORD PTR [esp],0xc0020754
c0007285:	e8 ab 99 00 00       	call   c0010c35 <KeSetBootMessage(char const*)>
c000728a:	c7 04 24 ca 6c 00 c0 	mov    DWORD PTR [esp],0xc0006cca
c0007291:	e8 4e e8 00 00       	call   c0015ae4 <setupMultitasking(void (*)())>
c0007296:	83 c4 14             	add    esp,0x14
c0007299:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000729e:	5b                   	pop    ebx
c000729f:	5e                   	pop    esi
c00072a0:	c3                   	ret    
c00072a1:	90                   	nop

c00072a2 <Computer::disableNMI()>:
c00072a2:	6a 00                	push   0x0
c00072a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a8:	50                   	push   eax
c00072a9:	e8 08 ff ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c00072ae:	5a                   	pop    edx
c00072af:	59                   	pop    ecx
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop

c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c00072b2:	53                   	push   ebx
c00072b3:	b2 80                	mov    dl,0x80
c00072b5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00072b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072bd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00072c1:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00072c8:	74 02                	je     c00072cc <Computer::writeCMOS(unsigned char, unsigned char)+0x1a>
c00072ca:	31 d2                	xor    edx,edx
c00072cc:	09 d0                	or     eax,edx
c00072ce:	e6 70                	out    0x70,al
c00072d0:	88 c8                	mov    al,cl
c00072d2:	e6 71                	out    0x71,al
c00072d4:	5b                   	pop    ebx
c00072d5:	c3                   	ret    

c00072d6 <Computer::handleNMI()>:
c00072d6:	56                   	push   esi
c00072d7:	53                   	push   ebx
c00072d8:	83 ec 10             	sub    esp,0x10
c00072db:	e4 92                	in     al,0x92
c00072dd:	89 c6                	mov    esi,eax
c00072df:	e4 61                	in     al,0x61
c00072e1:	68 6f 07 02 c0       	push   0xc002076f
c00072e6:	88 c3                	mov    bl,al
c00072e8:	e8 1d 36 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00072ed:	83 c4 10             	add    esp,0x10
c00072f0:	83 e6 10             	and    esi,0x10
c00072f3:	75 10                	jne    c0007305 <Computer::handleNMI()+0x2f>
c00072f5:	f6 c3 40             	test   bl,0x40
c00072f8:	75 20                	jne    c000731a <Computer::handleNMI()+0x44>
c00072fa:	80 e3 80             	and    bl,0x80
c00072fd:	75 30                	jne    c000732f <Computer::handleNMI()+0x59>
c00072ff:	83 c4 04             	add    esp,0x4
c0007302:	5b                   	pop    ebx
c0007303:	5e                   	pop    esi
c0007304:	c3                   	ret    
c0007305:	83 ec 0c             	sub    esp,0xc
c0007308:	68 80 07 02 c0       	push   0xc0020780
c000730d:	e8 f7 9f 00 00       	call   c0011309 <KePanic(char const*)>
c0007312:	83 c4 10             	add    esp,0x10
c0007315:	f6 c3 40             	test   bl,0x40
c0007318:	74 e0                	je     c00072fa <Computer::handleNMI()+0x24>
c000731a:	83 ec 0c             	sub    esp,0xc
c000731d:	68 8d 07 02 c0       	push   0xc002078d
c0007322:	e8 e2 9f 00 00       	call   c0011309 <KePanic(char const*)>
c0007327:	83 c4 10             	add    esp,0x10
c000732a:	80 e3 80             	and    bl,0x80
c000732d:	74 d0                	je     c00072ff <Computer::handleNMI()+0x29>
c000732f:	c7 44 24 10 97 07 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020797
c0007337:	83 c4 04             	add    esp,0x4
c000733a:	5b                   	pop    ebx
c000733b:	5e                   	pop    esi
c000733c:	e9 c8 9f 00 00       	jmp    c0011309 <KePanic(char const*)>
c0007341:	90                   	nop

c0007342 <GDTEntry::setBase(unsigned int)>:
c0007342:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007346:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000734a:	89 c1                	mov    ecx,eax
c000734c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007350:	c1 e9 10             	shr    ecx,0x10
c0007353:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007356:	c1 e8 18             	shr    eax,0x18
c0007359:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000735c:	c3                   	ret    
c000735d:	90                   	nop

c000735e <GDTEntry::setLimit(unsigned int)>:
c000735e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007362:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007366:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007369:	66 89 01             	mov    WORD PTR [ecx],ax
c000736c:	c1 e8 10             	shr    eax,0x10
c000736f:	83 e0 0f             	and    eax,0xf
c0007372:	83 e2 f0             	and    edx,0xfffffff0
c0007375:	09 d0                	or     eax,edx
c0007377:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000737a:	c3                   	ret    
c000737b:	90                   	nop

c000737c <GDT::GDT()>:
c000737c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007380:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007386:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000738a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007390:	90                   	nop
c0007391:	c3                   	ret    

c0007392 <GDT::addEntry(GDTEntry)>:
c0007392:	53                   	push   ebx
c0007393:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007397:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000739f:	8b 02                	mov    eax,DWORD PTR [edx]
c00073a1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00073a5:	8d 48 01             	lea    ecx,[eax+0x1]
c00073a8:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00073ac:	c1 e0 03             	shl    eax,0x3
c00073af:	89 0a                	mov    DWORD PTR [edx],ecx
c00073b1:	5b                   	pop    ebx
c00073b2:	c3                   	ret    
c00073b3:	90                   	nop

c00073b4 <GDT::getNumberOfEntries()>:
c00073b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00073ba:	c3                   	ret    
c00073bb:	90                   	nop

c00073bc <GDT::flush()>:
c00073bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073c0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073c2:	83 c0 04             	add    eax,0x4
c00073c5:	a3 c2 5e 02 c0       	mov    ds:0xc0025ec2,eax
c00073ca:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073d1:	66 89 15 c0 5e 02 c0 	mov    WORD PTR ds:0xc0025ec0,dx
c00073d8:	e9 7d 8f ff ff       	jmp    c000035a <loadGDT>
c00073dd:	90                   	nop

c00073de <GDT::setup()>:
c00073de:	57                   	push   edi
c00073df:	56                   	push   esi
c00073e0:	53                   	push   ebx
c00073e1:	83 ec 30             	sub    esp,0x30
c00073e4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073e8:	6a 00                	push   0x0
c00073ea:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073ee:	56                   	push   esi
c00073ef:	e8 4e ff ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c00073f4:	6a 00                	push   0x0
c00073f6:	56                   	push   esi
c00073f7:	e8 62 ff ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c00073fc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007404:	6a 00                	push   0x0
c0007406:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000740a:	56                   	push   esi
c000740b:	e8 32 ff ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007410:	68 ff ff ff 00       	push   0xffffff
c0007415:	56                   	push   esi
c0007416:	e8 43 ff ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c000741b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000741f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007423:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007428:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000742c:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007431:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007435:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007439:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000743d:	89 f8                	mov    eax,edi
c000743f:	89 fa                	mov    edx,edi
c0007441:	80 e4 f7             	and    ah,0xf7
c0007444:	80 ce 60             	or     dh,0x60
c0007447:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000744b:	89 c7                	mov    edi,eax
c000744d:	80 cc 60             	or     ah,0x60
c0007450:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007454:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007458:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000745c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007460:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007464:	83 c4 20             	add    esp,0x20
c0007467:	6a 00                	push   0x0
c0007469:	8d 44 24 24          	lea    eax,[esp+0x24]
c000746d:	50                   	push   eax
c000746e:	e8 cf fe ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007473:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007477:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000747b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000747f:	83 e0 3f             	and    eax,0x3f
c0007482:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007486:	6a 00                	push   0x0
c0007488:	8d 44 24 34          	lea    eax,[esp+0x34]
c000748c:	50                   	push   eax
c000748d:	e8 b0 fe ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007492:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007496:	83 e0 3f             	and    eax,0x3f
c0007499:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000749d:	83 c4 0c             	add    esp,0xc
c00074a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a8:	53                   	push   ebx
c00074a9:	e8 e4 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ae:	83 c4 0c             	add    esp,0xc
c00074b1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b9:	53                   	push   ebx
c00074ba:	e8 d3 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074bf:	83 c4 0c             	add    esp,0xc
c00074c2:	57                   	push   edi
c00074c3:	56                   	push   esi
c00074c4:	53                   	push   ebx
c00074c5:	e8 c8 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ca:	83 c4 0c             	add    esp,0xc
c00074cd:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d5:	53                   	push   ebx
c00074d6:	e8 b7 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074db:	83 c4 0c             	add    esp,0xc
c00074de:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e6:	53                   	push   ebx
c00074e7:	e8 a6 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ec:	83 c4 0c             	add    esp,0xc
c00074ef:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f7:	53                   	push   ebx
c00074f8:	e8 95 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074fd:	83 c4 0c             	add    esp,0xc
c0007500:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007504:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007508:	53                   	push   ebx
c0007509:	e8 84 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c000750e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007511:	e8 a6 fe ff ff       	call   c00073bc <GDT::flush()>
c0007516:	83 c4 40             	add    esp,0x40
c0007519:	5b                   	pop    ebx
c000751a:	5e                   	pop    esi
c000751b:	5f                   	pop    edi
c000751c:	c3                   	ret    

c000751d <idleFunction(void*)>:
c000751d:	83 ec 0c             	sub    esp,0xc
c0007520:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007525:	48                   	dec    eax
c0007526:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000752b:	75 01                	jne    c000752e <idleFunction(void*)+0x11>
c000752d:	fb                   	sti    
c000752e:	e8 83 02 01 00       	call   c00177b6 <HalSystemIdle()>
c0007533:	e8 0a 80 01 00       	call   c001f542 <idleCommon()>
c0007538:	eb f4                	jmp    c000752e <idleFunction(void*)+0x11>
c000753a:	66 90                	xchg   ax,ax

c000753c <IDTEntry::IDTEntry(bool)>:
c000753c:	53                   	push   ebx
c000753d:	83 ec 04             	sub    esp,0x4
c0007540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007544:	88 04 24             	mov    BYTE PTR [esp],al
c0007547:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007555:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007559:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000755d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007560:	83 e2 f0             	and    edx,0xfffffff0
c0007563:	83 ca 0e             	or     edx,0xe
c0007566:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007569:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007570:	83 e2 ef             	and    edx,0xffffffef
c0007573:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007576:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000757a:	85 c0                	test   eax,eax
c000757c:	74 06                	je     c0007584 <IDTEntry::IDTEntry(bool)+0x48>
c000757e:	b2 03                	mov    dl,0x3
c0007580:	eb 06                	jmp    c0007588 <IDTEntry::IDTEntry(bool)+0x4c>
c0007582:	66 90                	xchg   ax,ax
c0007584:	b2 00                	mov    dl,0x0
c0007586:	66 90                	xchg   ax,ax
c0007588:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000758c:	83 e2 03             	and    edx,0x3
c000758f:	89 d3                	mov    ebx,edx
c0007591:	c1 e3 05             	shl    ebx,0x5
c0007594:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007597:	83 e2 9f             	and    edx,0xffffff9f
c000759a:	88 d1                	mov    cl,dl
c000759c:	88 da                	mov    dl,bl
c000759e:	09 ca                	or     edx,ecx
c00075a0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00075a7:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075aa:	83 ca 80             	or     edx,0xffffff80
c00075ad:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075b0:	90                   	nop
c00075b1:	83 c4 04             	add    esp,0x4
c00075b4:	5b                   	pop    ebx
c00075b5:	c3                   	ret    

c00075b6 <IDTEntry::setOffset(unsigned int)>:
c00075b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00075ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075be:	66 89 02             	mov    WORD PTR [edx],ax
c00075c1:	c1 e8 10             	shr    eax,0x10
c00075c4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075c8:	c3                   	ret    
c00075c9:	90                   	nop
c00075ca:	66 90                	xchg   ax,ax

c00075cc <IDT::IDT()>:
c00075cc:	90                   	nop
c00075cd:	c3                   	ret    

c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075d2:	83 c0 30             	add    eax,0x30
c00075d5:	c3                   	ret    

c00075d6 <IDT::addEntry(IDTEntry, int)>:
c00075d6:	53                   	push   ebx
c00075d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075e7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ea:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075ee:	5b                   	pop    ebx
c00075ef:	c3                   	ret    

c00075f0 <IDT::addEntry(int, void (*)(), bool)>:
c00075f0:	53                   	push   ebx
c00075f1:	83 ec 10             	sub    esp,0x10
c00075f4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075f9:	50                   	push   eax
c00075fa:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075fe:	53                   	push   ebx
c00075ff:	e8 38 ff ff ff       	call   c000753c <IDTEntry::IDTEntry(bool)>
c0007604:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007608:	53                   	push   ebx
c0007609:	e8 a8 ff ff ff       	call   c00075b6 <IDTEntry::setOffset(unsigned int)>
c000760e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007612:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007616:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000761a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000761e:	e8 b3 ff ff ff       	call   c00075d6 <IDT::addEntry(IDTEntry, int)>
c0007623:	83 c4 30             	add    esp,0x30
c0007626:	5b                   	pop    ebx
c0007627:	c3                   	ret    

c0007628 <IDT::flush()>:
c0007628:	66 c7 05 c8 5e 02 c0 ff 07 	mov    WORD PTR ds:0xc0025ec8,0x7ff
c0007631:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007635:	a3 ca 5e 02 c0       	mov    ds:0xc0025eca,eax
c000763a:	0f 01 1d c8 5e 02 c0 	lidtd  ds:0xc0025ec8
c0007641:	c3                   	ret    

c0007642 <IDT::setup()>:
c0007642:	57                   	push   edi
c0007643:	56                   	push   esi
c0007644:	53                   	push   ebx
c0007645:	83 ec 10             	sub    esp,0x10
c0007648:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000764c:	6a 00                	push   0x0
c000764e:	68 40 ec 01 c0       	push   0xc001ec40
c0007653:	6a 00                	push   0x0
c0007655:	53                   	push   ebx
c0007656:	e8 95 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000765b:	6a 00                	push   0x0
c000765d:	68 50 ec 01 c0       	push   0xc001ec50
c0007662:	6a 01                	push   0x1
c0007664:	53                   	push   ebx
c0007665:	e8 86 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000766a:	83 c4 20             	add    esp,0x20
c000766d:	6a 00                	push   0x0
c000766f:	68 5a ec 01 c0       	push   0xc001ec5a
c0007674:	6a 02                	push   0x2
c0007676:	53                   	push   ebx
c0007677:	e8 74 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000767c:	6a 00                	push   0x0
c000767e:	68 64 ec 01 c0       	push   0xc001ec64
c0007683:	6a 03                	push   0x3
c0007685:	53                   	push   ebx
c0007686:	e8 65 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000768b:	83 c4 20             	add    esp,0x20
c000768e:	6a 00                	push   0x0
c0007690:	68 6e ec 01 c0       	push   0xc001ec6e
c0007695:	6a 04                	push   0x4
c0007697:	53                   	push   ebx
c0007698:	e8 53 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000769d:	6a 00                	push   0x0
c000769f:	68 78 ec 01 c0       	push   0xc001ec78
c00076a4:	6a 05                	push   0x5
c00076a6:	53                   	push   ebx
c00076a7:	e8 44 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076ac:	83 c4 20             	add    esp,0x20
c00076af:	6a 00                	push   0x0
c00076b1:	68 82 ec 01 c0       	push   0xc001ec82
c00076b6:	6a 06                	push   0x6
c00076b8:	53                   	push   ebx
c00076b9:	e8 32 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076be:	6a 00                	push   0x0
c00076c0:	68 8c ec 01 c0       	push   0xc001ec8c
c00076c5:	6a 07                	push   0x7
c00076c7:	53                   	push   ebx
c00076c8:	e8 23 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076cd:	83 c4 20             	add    esp,0x20
c00076d0:	6a 00                	push   0x0
c00076d2:	68 96 ec 01 c0       	push   0xc001ec96
c00076d7:	6a 08                	push   0x8
c00076d9:	53                   	push   ebx
c00076da:	e8 11 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076df:	6a 00                	push   0x0
c00076e1:	68 9e ec 01 c0       	push   0xc001ec9e
c00076e6:	6a 09                	push   0x9
c00076e8:	53                   	push   ebx
c00076e9:	e8 02 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076ee:	83 c4 20             	add    esp,0x20
c00076f1:	6a 00                	push   0x0
c00076f3:	68 a8 ec 01 c0       	push   0xc001eca8
c00076f8:	6a 0a                	push   0xa
c00076fa:	53                   	push   ebx
c00076fb:	e8 f0 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007700:	6a 00                	push   0x0
c0007702:	68 b0 ec 01 c0       	push   0xc001ecb0
c0007707:	6a 0b                	push   0xb
c0007709:	53                   	push   ebx
c000770a:	e8 e1 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000770f:	83 c4 20             	add    esp,0x20
c0007712:	6a 00                	push   0x0
c0007714:	68 b8 ec 01 c0       	push   0xc001ecb8
c0007719:	6a 0c                	push   0xc
c000771b:	53                   	push   ebx
c000771c:	e8 cf fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007721:	6a 00                	push   0x0
c0007723:	68 c0 ec 01 c0       	push   0xc001ecc0
c0007728:	6a 0d                	push   0xd
c000772a:	53                   	push   ebx
c000772b:	e8 c0 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007730:	83 c4 20             	add    esp,0x20
c0007733:	6a 00                	push   0x0
c0007735:	68 da ec 01 c0       	push   0xc001ecda
c000773a:	6a 0e                	push   0xe
c000773c:	53                   	push   ebx
c000773d:	e8 ae fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007742:	6a 00                	push   0x0
c0007744:	68 e2 ec 01 c0       	push   0xc001ece2
c0007749:	6a 0f                	push   0xf
c000774b:	53                   	push   ebx
c000774c:	e8 9f fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007751:	83 c4 20             	add    esp,0x20
c0007754:	6a 00                	push   0x0
c0007756:	68 ec ec 01 c0       	push   0xc001ecec
c000775b:	6a 10                	push   0x10
c000775d:	53                   	push   ebx
c000775e:	e8 8d fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007763:	6a 00                	push   0x0
c0007765:	68 f6 ec 01 c0       	push   0xc001ecf6
c000776a:	6a 11                	push   0x11
c000776c:	53                   	push   ebx
c000776d:	e8 7e fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007772:	83 c4 20             	add    esp,0x20
c0007775:	6a 00                	push   0x0
c0007777:	68 00 ed 01 c0       	push   0xc001ed00
c000777c:	6a 12                	push   0x12
c000777e:	53                   	push   ebx
c000777f:	e8 6c fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007784:	6a 01                	push   0x1
c0007786:	68 9a ed 01 c0       	push   0xc001ed9a
c000778b:	6a 60                	push   0x60
c000778d:	53                   	push   ebx
c000778e:	e8 5d fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007793:	83 c4 20             	add    esp,0x20
c0007796:	6a 00                	push   0x0
c0007798:	68 a1 ed 01 c0       	push   0xc001eda1
c000779d:	6a 20                	push   0x20
c000779f:	53                   	push   ebx
c00077a0:	e8 4b fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077a5:	6a 00                	push   0x0
c00077a7:	68 8c ed 01 c0       	push   0xc001ed8c
c00077ac:	6a 21                	push   0x21
c00077ae:	53                   	push   ebx
c00077af:	e8 3c fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077b4:	83 c4 20             	add    esp,0x20
c00077b7:	6a 00                	push   0x0
c00077b9:	68 93 ed 01 c0       	push   0xc001ed93
c00077be:	6a 22                	push   0x22
c00077c0:	53                   	push   ebx
c00077c1:	e8 2a fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077c6:	6a 00                	push   0x0
c00077c8:	68 0a ed 01 c0       	push   0xc001ed0a
c00077cd:	6a 23                	push   0x23
c00077cf:	53                   	push   ebx
c00077d0:	e8 1b fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077d5:	83 c4 20             	add    esp,0x20
c00077d8:	6a 00                	push   0x0
c00077da:	68 14 ed 01 c0       	push   0xc001ed14
c00077df:	6a 24                	push   0x24
c00077e1:	53                   	push   ebx
c00077e2:	e8 09 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077e7:	6a 00                	push   0x0
c00077e9:	68 1e ed 01 c0       	push   0xc001ed1e
c00077ee:	6a 25                	push   0x25
c00077f0:	53                   	push   ebx
c00077f1:	e8 fa fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077f6:	83 c4 20             	add    esp,0x20
c00077f9:	6a 00                	push   0x0
c00077fb:	68 28 ed 01 c0       	push   0xc001ed28
c0007800:	6a 26                	push   0x26
c0007802:	53                   	push   ebx
c0007803:	e8 e8 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007808:	6a 00                	push   0x0
c000780a:	68 32 ed 01 c0       	push   0xc001ed32
c000780f:	6a 27                	push   0x27
c0007811:	53                   	push   ebx
c0007812:	e8 d9 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007817:	83 c4 20             	add    esp,0x20
c000781a:	6a 00                	push   0x0
c000781c:	68 3c ed 01 c0       	push   0xc001ed3c
c0007821:	6a 28                	push   0x28
c0007823:	53                   	push   ebx
c0007824:	e8 c7 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007829:	6a 00                	push   0x0
c000782b:	68 46 ed 01 c0       	push   0xc001ed46
c0007830:	6a 29                	push   0x29
c0007832:	53                   	push   ebx
c0007833:	e8 b8 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007838:	83 c4 20             	add    esp,0x20
c000783b:	6a 00                	push   0x0
c000783d:	68 50 ed 01 c0       	push   0xc001ed50
c0007842:	6a 2a                	push   0x2a
c0007844:	53                   	push   ebx
c0007845:	e8 a6 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000784a:	6a 00                	push   0x0
c000784c:	68 5a ed 01 c0       	push   0xc001ed5a
c0007851:	6a 2b                	push   0x2b
c0007853:	53                   	push   ebx
c0007854:	e8 97 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007859:	83 c4 20             	add    esp,0x20
c000785c:	6a 00                	push   0x0
c000785e:	68 64 ed 01 c0       	push   0xc001ed64
c0007863:	6a 2c                	push   0x2c
c0007865:	53                   	push   ebx
c0007866:	e8 85 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000786b:	6a 00                	push   0x0
c000786d:	68 6e ed 01 c0       	push   0xc001ed6e
c0007872:	6a 2d                	push   0x2d
c0007874:	53                   	push   ebx
c0007875:	e8 76 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000787a:	83 c4 20             	add    esp,0x20
c000787d:	6a 00                	push   0x0
c000787f:	68 78 ed 01 c0       	push   0xc001ed78
c0007884:	6a 2e                	push   0x2e
c0007886:	53                   	push   ebx
c0007887:	e8 64 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000788c:	6a 00                	push   0x0
c000788e:	68 82 ed 01 c0       	push   0xc001ed82
c0007893:	6a 2f                	push   0x2f
c0007895:	53                   	push   ebx
c0007896:	e8 55 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000789b:	83 c4 20             	add    esp,0x20
c000789e:	6a 00                	push   0x0
c00078a0:	68 dc ee 01 c0       	push   0xc001eedc
c00078a5:	6a 30                	push   0x30
c00078a7:	53                   	push   ebx
c00078a8:	e8 43 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ad:	6a 00                	push   0x0
c00078af:	68 e6 ee 01 c0       	push   0xc001eee6
c00078b4:	6a 31                	push   0x31
c00078b6:	53                   	push   ebx
c00078b7:	e8 34 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078bc:	83 c4 20             	add    esp,0x20
c00078bf:	6a 00                	push   0x0
c00078c1:	68 f0 ee 01 c0       	push   0xc001eef0
c00078c6:	6a 32                	push   0x32
c00078c8:	53                   	push   ebx
c00078c9:	e8 22 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ce:	6a 00                	push   0x0
c00078d0:	68 fa ee 01 c0       	push   0xc001eefa
c00078d5:	6a 33                	push   0x33
c00078d7:	53                   	push   ebx
c00078d8:	e8 13 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078dd:	83 c4 20             	add    esp,0x20
c00078e0:	6a 00                	push   0x0
c00078e2:	68 04 ef 01 c0       	push   0xc001ef04
c00078e7:	6a 34                	push   0x34
c00078e9:	53                   	push   ebx
c00078ea:	e8 01 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ef:	6a 00                	push   0x0
c00078f1:	68 0e ef 01 c0       	push   0xc001ef0e
c00078f6:	6a 35                	push   0x35
c00078f8:	53                   	push   ebx
c00078f9:	e8 f2 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078fe:	83 c4 20             	add    esp,0x20
c0007901:	6a 00                	push   0x0
c0007903:	68 18 ef 01 c0       	push   0xc001ef18
c0007908:	6a 36                	push   0x36
c000790a:	53                   	push   ebx
c000790b:	e8 e0 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007910:	6a 00                	push   0x0
c0007912:	68 22 ef 01 c0       	push   0xc001ef22
c0007917:	6a 37                	push   0x37
c0007919:	53                   	push   ebx
c000791a:	e8 d1 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000791f:	83 c4 1c             	add    esp,0x1c
c0007922:	6a 03                	push   0x3
c0007924:	6a 02                	push   0x2
c0007926:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c000792c:	e8 d5 24 00 00       	call   c0009e06 <VAS::allocatePages(int, int)>
c0007931:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007938:	89 c6                	mov    esi,eax
c000793a:	e8 94 01 00 00       	call   c0007ad3 <malloc>
c000793f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007945:	89 04 24             	mov    DWORD PTR [esp],eax
c0007948:	89 c7                	mov    edi,eax
c000794a:	e8 dd 15 00 00       	call   c0008f2c <TSS::TSS()>
c000794f:	83 c4 0c             	add    esp,0xc
c0007952:	68 96 ec 01 c0       	push   0xc001ec96
c0007957:	56                   	push   esi
c0007958:	57                   	push   edi
c0007959:	e8 12 16 00 00       	call   c0008f70 <TSS::setup(unsigned long, unsigned long)>
c000795e:	89 c6                	mov    esi,eax
c0007960:	58                   	pop    eax
c0007961:	5a                   	pop    edx
c0007962:	6a 00                	push   0x0
c0007964:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007968:	50                   	push   eax
c0007969:	e8 ce fb ff ff       	call   c000753c <IDTEntry::IDTEntry(bool)>
c000796e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007972:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007977:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000797e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007982:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007988:	80 ce 05             	or     dh,0x5
c000798b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000798f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007992:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007996:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007999:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000799c:	e8 87 fc ff ff       	call   c0007628 <IDT::flush()>
c00079a1:	83 c4 20             	add    esp,0x20
c00079a4:	5b                   	pop    ebx
c00079a5:	5e                   	pop    esi
c00079a6:	5f                   	pop    edi
c00079a7:	c3                   	ret    

c00079a8 <sbrk>:
c00079a8:	55                   	push   ebp
c00079a9:	57                   	push   edi
c00079aa:	56                   	push   esi
c00079ab:	53                   	push   ebx
c00079ac:	83 ec 1c             	sub    esp,0x1c
c00079af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00079b3:	85 c0                	test   eax,eax
c00079b5:	74 66                	je     c0007a1d <sbrk+0x75>
c00079b7:	78 6b                	js     c0007a24 <sbrk+0x7c>
c00079b9:	8b 15 34 31 02 c0    	mov    edx,DWORD PTR ds:0xc0023134
c00079bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079c3:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c00079c9:	05 ff 0f 00 00       	add    eax,0xfff
c00079ce:	0f 49 e8             	cmovns ebp,eax
c00079d1:	c1 fd 0c             	sar    ebp,0xc
c00079d4:	bb 00 00 00 00       	mov    ebx,0x0
c00079d9:	8b 35 b0 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fb0
c00079df:	8b 3d 34 31 02 c0    	mov    edi,DWORD PTR ds:0xc0023134
c00079e5:	e8 f8 03 00 00       	call   c0007de2 <Phys::allocatePage()>
c00079ea:	68 01 04 00 00       	push   0x401
c00079ef:	57                   	push   edi
c00079f0:	50                   	push   eax
c00079f1:	56                   	push   esi
c00079f2:	e8 07 23 00 00       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c00079f7:	81 05 34 31 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0023134,0x1000
c0007a01:	83 c3 01             	add    ebx,0x1
c0007a04:	83 c4 10             	add    esp,0x10
c0007a07:	39 dd                	cmp    ebp,ebx
c0007a09:	75 ce                	jne    c00079d9 <sbrk+0x31>
c0007a0b:	0f 20 d8             	mov    eax,cr3
c0007a0e:	0f 22 d8             	mov    cr3,eax
c0007a11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a15:	83 c4 1c             	add    esp,0x1c
c0007a18:	5b                   	pop    ebx
c0007a19:	5e                   	pop    esi
c0007a1a:	5f                   	pop    edi
c0007a1b:	5d                   	pop    ebp
c0007a1c:	c3                   	ret    
c0007a1d:	a1 34 31 02 c0       	mov    eax,ds:0xc0023134
c0007a22:	eb f1                	jmp    c0007a15 <sbrk+0x6d>
c0007a24:	83 ec 08             	sub    esp,0x8
c0007a27:	50                   	push   eax
c0007a28:	68 38 08 02 c0       	push   0xc0020838
c0007a2d:	e8 d8 2e 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007a32:	83 c4 10             	add    esp,0x10
c0007a35:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a3a:	eb d9                	jmp    c0007a15 <sbrk+0x6d>

c0007a3c <mmap>:
c0007a3c:	83 ec 18             	sub    esp,0x18
c0007a3f:	68 68 08 02 c0       	push   0xc0020868
c0007a44:	e8 c0 98 00 00       	call   c0011309 <KePanic(char const*)>
c0007a49:	b8 00 00 00 00       	mov    eax,0x0
c0007a4e:	83 c4 1c             	add    esp,0x1c
c0007a51:	c3                   	ret    

c0007a52 <munmap>:
c0007a52:	83 ec 18             	sub    esp,0x18
c0007a55:	68 6d 08 02 c0       	push   0xc002086d
c0007a5a:	e8 aa 98 00 00       	call   c0011309 <KePanic(char const*)>
c0007a5f:	b8 00 00 00 00       	mov    eax,0x0
c0007a64:	83 c4 1c             	add    esp,0x1c
c0007a67:	c3                   	ret    

c0007a68 <liballoc_lock()>:
c0007a68:	fa                   	cli    
c0007a69:	83 05 c8 96 02 c0 01 	add    DWORD PTR ds:0xc00296c8,0x1
c0007a70:	b8 00 00 00 00       	mov    eax,0x0
c0007a75:	c3                   	ret    

c0007a76 <liballoc_unlock()>:
c0007a76:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007a7b:	83 e8 01             	sub    eax,0x1
c0007a7e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007a83:	75 01                	jne    c0007a86 <liballoc_unlock()+0x10>
c0007a85:	fb                   	sti    
c0007a86:	b8 00 00 00 00       	mov    eax,0x0
c0007a8b:	c3                   	ret    

c0007a8c <liballoc_alloc(int)>:
c0007a8c:	83 ec 10             	sub    esp,0x10
c0007a8f:	6a 01                	push   0x1
c0007a91:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a95:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007a9b:	e8 66 23 00 00       	call   c0009e06 <VAS::allocatePages(int, int)>
c0007aa0:	83 c4 1c             	add    esp,0x1c
c0007aa3:	c3                   	ret    

c0007aa4 <liballoc_free(void*, int)>:
c0007aa4:	83 ec 14             	sub    esp,0x14
c0007aa7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007aab:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007ab1:	e8 90 1f 00 00       	call   c0009a46 <VAS::freeAllocatedPages(unsigned long)>
c0007ab6:	b8 00 00 00 00       	mov    eax,0x0
c0007abb:	83 c4 1c             	add    esp,0x1c
c0007abe:	c3                   	ret    

c0007abf <realloc>:
c0007abf:	83 ec 14             	sub    esp,0x14
c0007ac2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aca:	e8 52 9b ff ff       	call   c0001621 <dlrealloc>
c0007acf:	83 c4 1c             	add    esp,0x1c
c0007ad2:	c3                   	ret    

c0007ad3 <malloc>:
c0007ad3:	83 ec 18             	sub    esp,0x18
c0007ad6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ada:	e8 05 96 ff ff       	call   c00010e4 <dlmalloc>
c0007adf:	83 c4 1c             	add    esp,0x1c
c0007ae2:	c3                   	ret    

c0007ae3 <free>:
c0007ae3:	83 ec 18             	sub    esp,0x18
c0007ae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aea:	e8 97 92 ff ff       	call   c0000d86 <dlfree>
c0007aef:	83 c4 1c             	add    esp,0x1c
c0007af2:	c3                   	ret    

c0007af3 <rfree>:
c0007af3:	83 ec 18             	sub    esp,0x18
c0007af6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007afa:	e8 87 92 ff ff       	call   c0000d86 <dlfree>
c0007aff:	83 c4 1c             	add    esp,0x1c
c0007b02:	c3                   	ret    

c0007b03 <calloc>:
c0007b03:	56                   	push   esi
c0007b04:	53                   	push   ebx
c0007b05:	83 ec 10             	sub    esp,0x10
c0007b08:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007b0c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007b11:	53                   	push   ebx
c0007b12:	e8 bc ff ff ff       	call   c0007ad3 <malloc>
c0007b17:	89 c6                	mov    esi,eax
c0007b19:	83 c4 0c             	add    esp,0xc
c0007b1c:	53                   	push   ebx
c0007b1d:	6a 00                	push   0x0
c0007b1f:	50                   	push   eax
c0007b20:	e8 cb 89 ff ff       	call   c00004f0 <memset>
c0007b25:	89 f0                	mov    eax,esi
c0007b27:	83 c4 14             	add    esp,0x14
c0007b2a:	5b                   	pop    ebx
c0007b2b:	5e                   	pop    esi
c0007b2c:	c3                   	ret    

c0007b2d <KeEntryPoint>:
c0007b2d:	57                   	push   edi
c0007b2e:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b33:	56                   	push   esi
c0007b34:	31 f6                	xor    esi,esi
c0007b36:	53                   	push   ebx
c0007b37:	89 fa                	mov    edx,edi
c0007b39:	83 ec 2c             	sub    esp,0x2c
c0007b3c:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b41:	a3 d0 5e 02 c0       	mov    ds:0xc0025ed0,eax
c0007b46:	89 f0                	mov    eax,esi
c0007b48:	ee                   	out    dx,al
c0007b49:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b4e:	b0 80                	mov    al,0x80
c0007b50:	89 da                	mov    edx,ebx
c0007b52:	ee                   	out    dx,al
c0007b53:	b1 03                	mov    cl,0x3
c0007b55:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b5a:	88 c8                	mov    al,cl
c0007b5c:	ee                   	out    dx,al
c0007b5d:	89 f0                	mov    eax,esi
c0007b5f:	89 fa                	mov    edx,edi
c0007b61:	ee                   	out    dx,al
c0007b62:	88 c8                	mov    al,cl
c0007b64:	89 da                	mov    edx,ebx
c0007b66:	ee                   	out    dx,al
c0007b67:	b0 c7                	mov    al,0xc7
c0007b69:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b6e:	ee                   	out    dx,al
c0007b6f:	b0 0b                	mov    al,0xb
c0007b71:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b76:	ee                   	out    dx,al
c0007b77:	68 74 08 02 c0       	push   0xc0020874
c0007b7c:	e8 89 2d 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007b81:	e8 33 90 00 00       	call   c0010bb9 <KeDisplaySplashScreen()>
c0007b86:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b8b:	05 ff 0f 00 00       	add    eax,0xfff
c0007b90:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b95:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b98:	e8 b3 03 00 00       	call   c0007f50 <Phys::physicalMemorySetup(unsigned int)>
c0007b9d:	e8 27 1c 00 00       	call   c00097c9 <Virt::virtualMemorySetup()>
c0007ba2:	e8 5c 8f 00 00       	call   c0010b03 <KeInitialiseAtexit()>
c0007ba7:	58                   	pop    eax
c0007ba8:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007bac:	53                   	push   ebx
c0007bad:	e8 14 1f 00 00       	call   c0009ac6 <VAS::VAS()>
c0007bb2:	89 1d b0 5f 02 c0    	mov    DWORD PTR ds:0xc0025fb0,ebx
c0007bb8:	e8 1d 79 01 00       	call   c001f4da <_init>
c0007bbd:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007bc4:	e8 0a ff ff ff       	call   c0007ad3 <malloc>
c0007bc9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bcc:	89 c6                	mov    esi,eax
c0007bce:	e8 35 f2 ff ff       	call   c0006e08 <Computer::Computer()>
c0007bd3:	53                   	push   ebx
c0007bd4:	6a 00                	push   0x0
c0007bd6:	6a 00                	push   0x0
c0007bd8:	56                   	push   esi
c0007bd9:	89 35 b8 5e 02 c0    	mov    DWORD PTR ds:0xc0025eb8,esi
c0007bdf:	e8 ea f5 ff ff       	call   c00071ce <Computer::open(int, int, void*)>
c0007be4:	83 c4 14             	add    esp,0x14
c0007be7:	53                   	push   ebx
c0007be8:	e8 a3 1f 00 00       	call   c0009b90 <VAS::~VAS()>
c0007bed:	83 c4 30             	add    esp,0x30
c0007bf0:	5b                   	pop    ebx
c0007bf1:	5e                   	pop    esi
c0007bf2:	5f                   	pop    edi
c0007bf3:	c3                   	ret    

c0007bf4 <Phys::allocateDMA(unsigned long)>:
c0007bf4:	55                   	push   ebp
c0007bf5:	31 ed                	xor    ebp,ebp
c0007bf7:	57                   	push   edi
c0007bf8:	56                   	push   esi
c0007bf9:	31 f6                	xor    esi,esi
c0007bfb:	53                   	push   ebx
c0007bfc:	31 db                	xor    ebx,ebx
c0007bfe:	83 ec 1c             	sub    esp,0x1c
c0007c01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007c05:	05 ff 0f 00 00       	add    eax,0xfff
c0007c0a:	c1 e8 0c             	shr    eax,0xc
c0007c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c11:	31 c0                	xor    eax,eax
c0007c13:	eb 1b                	jmp    c0007c30 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c15:	8d 78 01             	lea    edi,[eax+0x1]
c0007c18:	85 c0                	test   eax,eax
c0007c1a:	0f 44 eb             	cmove  ebp,ebx
c0007c1d:	0f 44 f3             	cmove  esi,ebx
c0007c20:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0007c24:	74 37                	je     c0007c5d <Phys::allocateDMA(unsigned long)+0x69>
c0007c26:	89 f8                	mov    eax,edi
c0007c28:	83 c3 01             	add    ebx,0x1
c0007c2b:	83 fb 0f             	cmp    ebx,0xf
c0007c2e:	7f 13                	jg     c0007c43 <Phys::allocateDMA(unsigned long)+0x4f>
c0007c30:	80 bb ec 5e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffda114],0x0
c0007c37:	74 dc                	je     c0007c15 <Phys::allocateDMA(unsigned long)+0x21>
c0007c39:	31 c0                	xor    eax,eax
c0007c3b:	83 c3 01             	add    ebx,0x1
c0007c3e:	83 fb 0f             	cmp    ebx,0xf
c0007c41:	7e ed                	jle    c0007c30 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c43:	83 ec 0c             	sub    esp,0xc
c0007c46:	68 8c 08 02 c0       	push   0xc002088c
c0007c4b:	e8 b9 96 00 00       	call   c0011309 <KePanic(char const*)>
c0007c50:	83 c4 10             	add    esp,0x10
c0007c53:	31 c0                	xor    eax,eax
c0007c55:	83 c4 1c             	add    esp,0x1c
c0007c58:	5b                   	pop    ebx
c0007c59:	5e                   	pop    esi
c0007c5a:	5f                   	pop    edi
c0007c5b:	5d                   	pop    ebp
c0007c5c:	c3                   	ret    
c0007c5d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007c61:	89 f2                	mov    edx,esi
c0007c63:	c1 fa 04             	sar    edx,0x4
c0007c66:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c6a:	01 f1                	add    ecx,esi
c0007c6c:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c6f:	83 e9 01             	sub    ecx,0x1
c0007c72:	0f 48 ca             	cmovs  ecx,edx
c0007c75:	c1 f9 04             	sar    ecx,0x4
c0007c78:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0007c7c:	74 06                	je     c0007c84 <Phys::allocateDMA(unsigned long)+0x90>
c0007c7e:	89 eb                	mov    ebx,ebp
c0007c80:	31 c0                	xor    eax,eax
c0007c82:	eb b7                	jmp    c0007c3b <Phys::allocateDMA(unsigned long)+0x47>
c0007c84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c88:	85 d2                	test   edx,edx
c0007c8a:	74 17                	je     c0007ca3 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c8c:	8d 96 ec 5e 02 c0    	lea    edx,[esi-0x3ffda114]
c0007c92:	8d 84 06 ed 5e 02 c0 	lea    eax,[esi+eax*1-0x3ffda113]
c0007c99:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c9c:	83 c2 01             	add    edx,0x1
c0007c9f:	39 d0                	cmp    eax,edx
c0007ca1:	75 f6                	jne    c0007c99 <Phys::allocateDMA(unsigned long)+0xa5>
c0007ca3:	8b 15 e4 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee4
c0007ca9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007cb1:	01 c2                	add    edx,eax
c0007cb3:	89 15 e4 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee4,edx
c0007cb9:	85 c9                	test   ecx,ecx
c0007cbb:	74 17                	je     c0007cd4 <Phys::allocateDMA(unsigned long)+0xe0>
c0007cbd:	83 ec 0c             	sub    esp,0xc
c0007cc0:	68 8c 08 02 c0       	push   0xc002088c
c0007cc5:	e8 3f 96 00 00       	call   c0011309 <KePanic(char const*)>
c0007cca:	83 c4 10             	add    esp,0x10
c0007ccd:	89 f8                	mov    eax,edi
c0007ccf:	e9 54 ff ff ff       	jmp    c0007c28 <Phys::allocateDMA(unsigned long)+0x34>
c0007cd4:	c1 e6 0c             	shl    esi,0xc
c0007cd7:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c0007cdd:	e9 73 ff ff ff       	jmp    c0007c55 <Phys::allocateDMA(unsigned long)+0x61>

c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007ce2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ce6:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cec:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007cf1:	c1 ea 0c             	shr    edx,0xc
c0007cf4:	29 d0                	sub    eax,edx
c0007cf6:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007cfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cff:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007d04:	c1 e8 0c             	shr    eax,0xc
c0007d07:	85 d2                	test   edx,edx
c0007d09:	74 11                	je     c0007d1c <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007d0b:	05 ec 5e 02 c0       	add    eax,0xc0025eec
c0007d10:	01 c2                	add    edx,eax
c0007d12:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007d15:	83 c0 01             	add    eax,0x1
c0007d18:	39 d0                	cmp    eax,edx
c0007d1a:	75 f6                	jne    c0007d12 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007d1c:	c3                   	ret    

c0007d1d <Phys::setPageState(unsigned long, bool)>:
c0007d1d:	57                   	push   edi
c0007d1e:	56                   	push   esi
c0007d1f:	8b 35 38 31 02 c0    	mov    esi,DWORD PTR ds:0xc0023138
c0007d25:	53                   	push   ebx
c0007d26:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d2b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d33:	89 ca                	mov    edx,ecx
c0007d35:	83 e1 07             	and    ecx,0x7
c0007d38:	c1 ea 03             	shr    edx,0x3
c0007d3b:	0f b6 c0             	movzx  eax,al
c0007d3e:	d3 c3                	rol    ebx,cl
c0007d40:	01 d6                	add    esi,edx
c0007d42:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d45:	d3 e0                	shl    eax,cl
c0007d47:	21 fb                	and    ebx,edi
c0007d49:	88 1e                	mov    BYTE PTR [esi],bl
c0007d4b:	8b 1d 38 31 02 c0    	mov    ebx,DWORD PTR ds:0xc0023138
c0007d51:	01 da                	add    edx,ebx
c0007d53:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d55:	09 c8                	or     eax,ecx
c0007d57:	88 02                	mov    BYTE PTR [edx],al
c0007d59:	5b                   	pop    ebx
c0007d5a:	5e                   	pop    esi
c0007d5b:	5f                   	pop    edi
c0007d5c:	c3                   	ret    

c0007d5d <Phys::getPageState(unsigned long)>:
c0007d5d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d61:	8b 15 38 31 02 c0    	mov    edx,DWORD PTR ds:0xc0023138
c0007d67:	89 c8                	mov    eax,ecx
c0007d69:	83 e1 07             	and    ecx,0x7
c0007d6c:	c1 e8 03             	shr    eax,0x3
c0007d6f:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d73:	d3 f8                	sar    eax,cl
c0007d75:	83 e0 01             	and    eax,0x1
c0007d78:	c3                   	ret    

c0007d79 <Phys::freePage(unsigned long)>:
c0007d79:	53                   	push   ebx
c0007d7a:	83 ec 08             	sub    esp,0x8
c0007d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d81:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d87:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d8d:	76 41                	jbe    c0007dd0 <Phys::freePage(unsigned long)+0x57>
c0007d8f:	c1 e8 0c             	shr    eax,0xc
c0007d92:	50                   	push   eax
c0007d93:	89 c3                	mov    ebx,eax
c0007d95:	e8 c3 ff ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007d9a:	5a                   	pop    edx
c0007d9b:	84 c0                	test   al,al
c0007d9d:	74 20                	je     c0007dbf <Phys::freePage(unsigned long)+0x46>
c0007d9f:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007da4:	83 ec 08             	sub    esp,0x8
c0007da7:	6a 00                	push   0x0
c0007da9:	53                   	push   ebx
c0007daa:	83 e8 01             	sub    eax,0x1
c0007dad:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007db2:	e8 66 ff ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007db7:	83 c4 10             	add    esp,0x10
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	c3                   	ret    
c0007dbf:	c7 44 24 10 31 09 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020931
c0007dc7:	83 c4 08             	add    esp,0x8
c0007dca:	5b                   	pop    ebx
c0007dcb:	e9 39 95 00 00       	jmp    c0011309 <KePanic(char const*)>
c0007dd0:	68 00 10 00 00       	push   0x1000
c0007dd5:	50                   	push   eax
c0007dd6:	e8 07 ff ff ff       	call   c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)>
c0007ddb:	59                   	pop    ecx
c0007ddc:	5b                   	pop    ebx
c0007ddd:	83 c4 08             	add    esp,0x8
c0007de0:	5b                   	pop    ebx
c0007de1:	c3                   	ret    

c0007de2 <Phys::allocatePage()>:
c0007de2:	56                   	push   esi
c0007de3:	53                   	push   ebx
c0007de4:	83 ec 14             	sub    esp,0x14
c0007de7:	8b 35 d8 5e 02 c0    	mov    esi,DWORD PTR ds:0xc0025ed8
c0007ded:	89 f3                	mov    ebx,esi
c0007def:	eb 0a                	jmp    c0007dfb <Phys::allocatePage()+0x19>
c0007df1:	89 1d d8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ed8,ebx
c0007df7:	39 de                	cmp    esi,ebx
c0007df9:	74 26                	je     c0007e21 <Phys::allocatePage()+0x3f>
c0007dfb:	53                   	push   ebx
c0007dfc:	e8 5c ff ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007e01:	5a                   	pop    edx
c0007e02:	84 c0                	test   al,al
c0007e04:	74 67                	je     c0007e6d <Phys::allocatePage()+0x8b>
c0007e06:	83 c3 01             	add    ebx,0x1
c0007e09:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007e0f:	75 e0                	jne    c0007df1 <Phys::allocatePage()+0xf>
c0007e11:	c7 05 d8 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025ed8,0x0
c0007e1b:	31 db                	xor    ebx,ebx
c0007e1d:	39 de                	cmp    esi,ebx
c0007e1f:	75 da                	jne    c0007dfb <Phys::allocatePage()+0x19>
c0007e21:	a0 fc 5e 02 c0       	mov    al,ds:0xc0025efc
c0007e26:	83 ec 0c             	sub    esp,0xc
c0007e29:	83 f0 01             	xor    eax,0x1
c0007e2c:	a2 fc 5e 02 c0       	mov    ds:0xc0025efc,al
c0007e31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e36:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e39:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e3f:	50                   	push   eax
c0007e40:	e8 79 27 00 00       	call   c000a5be <VAS::scanForEviction()>
c0007e45:	83 c4 10             	add    esp,0x10
c0007e48:	85 c0                	test   eax,eax
c0007e4a:	75 48                	jne    c0007e94 <Phys::allocatePage()+0xb2>
c0007e4c:	83 ec 0c             	sub    esp,0xc
c0007e4f:	68 b4 08 02 c0       	push   0xc00208b4
c0007e54:	e8 b0 94 00 00       	call   c0011309 <KePanic(char const*)>
c0007e59:	8b 1d d8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025ed8
c0007e5f:	83 c4 10             	add    esp,0x10
c0007e62:	53                   	push   ebx
c0007e63:	e8 f5 fe ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007e68:	5a                   	pop    edx
c0007e69:	84 c0                	test   al,al
c0007e6b:	75 99                	jne    c0007e06 <Phys::allocatePage()+0x24>
c0007e6d:	6a 01                	push   0x1
c0007e6f:	53                   	push   ebx
c0007e70:	e8 a8 fe ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007e75:	8b 15 e4 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee4
c0007e7b:	59                   	pop    ecx
c0007e7c:	a1 d8 5e 02 c0       	mov    eax,ds:0xc0025ed8
c0007e81:	5b                   	pop    ebx
c0007e82:	83 c2 01             	add    edx,0x1
c0007e85:	89 15 e4 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee4,edx
c0007e8b:	c1 e0 0c             	shl    eax,0xc
c0007e8e:	83 c4 14             	add    esp,0x14
c0007e91:	5b                   	pop    ebx
c0007e92:	5e                   	pop    esi
c0007e93:	c3                   	ret    
c0007e94:	83 ec 08             	sub    esp,0x8
c0007e97:	89 c2                	mov    edx,eax
c0007e99:	6a 01                	push   0x1
c0007e9b:	c1 ea 0c             	shr    edx,0xc
c0007e9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007ea2:	52                   	push   edx
c0007ea3:	e8 75 fe ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007ea8:	83 c4 10             	add    esp,0x10
c0007eab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007eaf:	eb dd                	jmp    c0007e8e <Phys::allocatePage()+0xac>

c0007eb1 <Phys::allocateContiguousPages(int)>:
c0007eb1:	57                   	push   edi
c0007eb2:	56                   	push   esi
c0007eb3:	53                   	push   ebx
c0007eb4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007eb8:	fa                   	cli    
c0007eb9:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007ebe:	31 db                	xor    ebx,ebx
c0007ec0:	83 c0 01             	add    eax,0x1
c0007ec3:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007ec8:	85 db                	test   ebx,ebx
c0007eca:	75 11                	jne    c0007edd <Phys::allocateContiguousPages(int)+0x2c>
c0007ecc:	e8 11 ff ff ff       	call   c0007de2 <Phys::allocatePage()>
c0007ed1:	83 fe 01             	cmp    esi,0x1
c0007ed4:	89 c7                	mov    edi,eax
c0007ed6:	74 21                	je     c0007ef9 <Phys::allocateContiguousPages(int)+0x48>
c0007ed8:	bb 01 00 00 00       	mov    ebx,0x1
c0007edd:	e8 00 ff ff ff       	call   c0007de2 <Phys::allocatePage()>
c0007ee2:	89 da                	mov    edx,ebx
c0007ee4:	c1 e2 0c             	shl    edx,0xc
c0007ee7:	01 fa                	add    edx,edi
c0007ee9:	39 c2                	cmp    edx,eax
c0007eeb:	74 22                	je     c0007f0f <Phys::allocateContiguousPages(int)+0x5e>
c0007eed:	83 fe 01             	cmp    esi,0x1
c0007ef0:	bb 01 00 00 00       	mov    ebx,0x1
c0007ef5:	89 c7                	mov    edi,eax
c0007ef7:	75 e4                	jne    c0007edd <Phys::allocateContiguousPages(int)+0x2c>
c0007ef9:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007efe:	83 e8 01             	sub    eax,0x1
c0007f01:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007f06:	75 01                	jne    c0007f09 <Phys::allocateContiguousPages(int)+0x58>
c0007f08:	fb                   	sti    
c0007f09:	5b                   	pop    ebx
c0007f0a:	89 f8                	mov    eax,edi
c0007f0c:	5e                   	pop    esi
c0007f0d:	5f                   	pop    edi
c0007f0e:	c3                   	ret    
c0007f0f:	83 c3 01             	add    ebx,0x1
c0007f12:	39 f3                	cmp    ebx,esi
c0007f14:	75 b2                	jne    c0007ec8 <Phys::allocateContiguousPages(int)+0x17>
c0007f16:	eb e1                	jmp    c0007ef9 <Phys::allocateContiguousPages(int)+0x48>

c0007f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007f18:	56                   	push   esi
c0007f19:	53                   	push   ebx
c0007f1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007f1e:	39 1d dc 5e 02 c0    	cmp    DWORD PTR ds:0xc0025edc,ebx
c0007f24:	73 06                	jae    c0007f2c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f26:	89 1d dc 5e 02 c0    	mov    DWORD PTR ds:0xc0025edc,ebx
c0007f2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f30:	c1 eb 0c             	shr    ebx,0xc
c0007f33:	c1 e8 0c             	shr    eax,0xc
c0007f36:	39 d8                	cmp    eax,ebx
c0007f38:	73 13                	jae    c0007f4d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f3a:	6a 00                	push   0x0
c0007f3c:	50                   	push   eax
c0007f3d:	8d 70 01             	lea    esi,[eax+0x1]
c0007f40:	e8 d8 fd ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007f45:	39 f3                	cmp    ebx,esi
c0007f47:	89 f0                	mov    eax,esi
c0007f49:	5a                   	pop    edx
c0007f4a:	59                   	pop    ecx
c0007f4b:	75 ed                	jne    c0007f3a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f4d:	5b                   	pop    ebx
c0007f4e:	5e                   	pop    esi
c0007f4f:	c3                   	ret    

c0007f50 <Phys::physicalMemorySetup(unsigned int)>:
c0007f50:	55                   	push   ebp
c0007f51:	57                   	push   edi
c0007f52:	56                   	push   esi
c0007f53:	53                   	push   ebx
c0007f54:	31 db                	xor    ebx,ebx
c0007f56:	83 ec 40             	sub    esp,0x40
c0007f59:	6a 10                	push   0x10
c0007f5b:	6a 00                	push   0x0
c0007f5d:	68 ec 5e 02 c0       	push   0xc0025eec
c0007f62:	e8 89 85 ff ff       	call   c00004f0 <memset>
c0007f67:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f6b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f70:	05 00 10 00 00       	add    eax,0x1000
c0007f75:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007f79:	5a                   	pop    edx
c0007f7a:	59                   	pop    ecx
c0007f7b:	50                   	push   eax
c0007f7c:	68 47 09 02 c0       	push   0xc0020947
c0007f81:	e8 84 29 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007f86:	83 c4 10             	add    esp,0x10
c0007f89:	83 ec 08             	sub    esp,0x8
c0007f8c:	6a 01                	push   0x1
c0007f8e:	53                   	push   ebx
c0007f8f:	83 c3 01             	add    ebx,0x1
c0007f92:	e8 86 fd ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007f97:	83 c4 10             	add    esp,0x10
c0007f9a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007fa0:	75 e7                	jne    c0007f89 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007fa2:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007fa9:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007fb0:	c1 e0 08             	shl    eax,0x8
c0007fb3:	09 c2                	or     edx,eax
c0007fb5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0007fb9:	0f 84 43 01 00 00    	je     c0008102 <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c0007fbf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fc7:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fcc:	e9 82 00 00 00       	jmp    c0008053 <Phys::physicalMemorySetup(unsigned int)+0x103>
c0007fd1:	ba 00 00 08 00       	mov    edx,0x80000
c0007fd6:	89 c1                	mov    ecx,eax
c0007fd8:	39 f2                	cmp    edx,esi
c0007fda:	19 f9                	sbb    ecx,edi
c0007fdc:	0f 82 c0 00 00 00    	jb     c00080a2 <Phys::physicalMemorySetup(unsigned int)+0x152>
c0007fe2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007fe6:	89 c5                	mov    ebp,eax
c0007fe8:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007fec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007ff0:	19 cd                	sbb    ebp,ecx
c0007ff2:	0f 83 af 00 00 00    	jae    c00080a7 <Phys::physicalMemorySetup(unsigned int)+0x157>
c0007ff8:	89 d6                	mov    esi,edx
c0007ffa:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007fff:	39 f2                	cmp    edx,esi
c0008001:	89 cf                	mov    edi,ecx
c0008003:	19 c8                	sbb    eax,ecx
c0008005:	73 07                	jae    c000800e <Phys::physicalMemorySetup(unsigned int)+0xbe>
c0008007:	be 00 00 0a 00       	mov    esi,0xa0000
c000800c:	31 ff                	xor    edi,edi
c000800e:	89 f2                	mov    edx,esi
c0008010:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0008015:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000801b:	89 f9                	mov    ecx,edi
c000801d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008021:	83 d1 ff             	adc    ecx,0xffffffff
c0008024:	39 d0                	cmp    eax,edx
c0008026:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000802a:	b8 00 00 00 00       	mov    eax,0x0
c000802f:	19 c8                	sbb    eax,ecx
c0008031:	0f 82 9d 01 00 00    	jb     c00081d4 <Phys::physicalMemorySetup(unsigned int)+0x284>
c0008037:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000803b:	83 c3 18             	add    ebx,0x18
c000803e:	83 c6 01             	add    esi,0x1
c0008041:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008045:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008049:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000804d:	0f 84 bf 00 00 00    	je     c0008112 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008053:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000805b:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000805e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0008062:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008065:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008069:	01 f0                	add    eax,esi
c000806b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000806f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008073:	55                   	push   ebp
c0008074:	11 fa                	adc    edx,edi
c0008076:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000807a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000807e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008082:	50                   	push   eax
c0008083:	56                   	push   esi
c0008084:	68 e4 08 02 c0       	push   0xc00208e4
c0008089:	e8 7c 28 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000808e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008092:	83 c4 10             	add    esp,0x10
c0008095:	09 f8                	or     eax,edi
c0008097:	75 79                	jne    c0008112 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008099:	83 fd 01             	cmp    ebp,0x1
c000809c:	0f 84 2f ff ff ff    	je     c0007fd1 <Phys::physicalMemorySetup(unsigned int)+0x81>
c00080a2:	83 fd 01             	cmp    ebp,0x1
c00080a5:	75 90                	jne    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080a7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00080ab:	31 d2                	xor    edx,edx
c00080ad:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00080b1:	89 c8                	mov    eax,ecx
c00080b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080b7:	19 d1                	sbb    ecx,edx
c00080b9:	0f 82 78 ff ff ff    	jb     c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080bf:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c00080c4:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c00080c8:	b9 00 00 00 00       	mov    ecx,0x0
c00080cd:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c00080d1:	0f 83 60 ff ff ff    	jae    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080d7:	39 c6                	cmp    esi,eax
c00080d9:	19 d7                	sbb    edi,edx
c00080db:	0f 83 ff 00 00 00    	jae    c00081e0 <Phys::physicalMemorySetup(unsigned int)+0x290>
c00080e1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080e5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00080e9:	29 c7                	sub    edi,eax
c00080eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00080ef:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00080f3:	19 d5                	sbb    ebp,edx
c00080f5:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00080f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00080fd:	e9 de 00 00 00       	jmp    c00081e0 <Phys::physicalMemorySetup(unsigned int)+0x290>
c0008102:	83 ec 0c             	sub    esp,0xc
c0008105:	68 5f 09 02 c0       	push   0xc002095f
c000810a:	e8 fa 91 00 00       	call   c0011309 <KePanic(char const*)>
c000810f:	83 c4 10             	add    esp,0x10
c0008112:	83 ec 08             	sub    esp,0x8
c0008115:	bb 60 00 00 00       	mov    ebx,0x60
c000811a:	6a 00                	push   0x0
c000811c:	6a 06                	push   0x6
c000811e:	e8 fa fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0008123:	58                   	pop    eax
c0008124:	5a                   	pop    edx
c0008125:	6a 00                	push   0x0
c0008127:	6a 07                	push   0x7
c0008129:	e8 ef fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000812e:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0008134:	83 c4 10             	add    esp,0x10
c0008137:	83 c1 02             	add    ecx,0x2
c000813a:	89 0d e8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee8,ecx
c0008140:	83 ec 08             	sub    esp,0x8
c0008143:	6a 00                	push   0x0
c0008145:	53                   	push   ebx
c0008146:	83 c3 01             	add    ebx,0x1
c0008149:	e8 cf fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000814e:	83 c4 10             	add    esp,0x10
c0008151:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008157:	75 e7                	jne    c0008140 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c0008159:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c000815e:	bb 40 01 00 00       	mov    ebx,0x140
c0008163:	83 c0 20             	add    eax,0x20
c0008166:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c000816b:	eb 26                	jmp    c0008193 <Phys::physicalMemorySetup(unsigned int)+0x243>
c000816d:	83 ec 08             	sub    esp,0x8
c0008170:	6a 00                	push   0x0
c0008172:	53                   	push   ebx
c0008173:	83 c3 01             	add    ebx,0x1
c0008176:	e8 a2 fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000817b:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	83 c0 01             	add    eax,0x1
c0008186:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000818c:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c0008191:	74 07                	je     c000819a <Phys::physicalMemorySetup(unsigned int)+0x24a>
c0008193:	3d ff 03 00 00       	cmp    eax,0x3ff
c0008198:	7e d3                	jle    c000816d <Phys::physicalMemorySetup(unsigned int)+0x21d>
c000819a:	bb d0 01 00 00       	mov    ebx,0x1d0
c000819f:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081a4:	7f 26                	jg     c00081cc <Phys::physicalMemorySetup(unsigned int)+0x27c>
c00081a6:	83 ec 08             	sub    esp,0x8
c00081a9:	6a 00                	push   0x0
c00081ab:	53                   	push   ebx
c00081ac:	83 c3 01             	add    ebx,0x1
c00081af:	e8 69 fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c00081b4:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c00081b9:	83 c4 10             	add    esp,0x10
c00081bc:	83 c0 01             	add    eax,0x1
c00081bf:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081c5:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00081ca:	75 d3                	jne    c000819f <Phys::physicalMemorySetup(unsigned int)+0x24f>
c00081cc:	83 c4 3c             	add    esp,0x3c
c00081cf:	5b                   	pop    ebx
c00081d0:	5e                   	pop    esi
c00081d1:	5f                   	pop    edi
c00081d2:	5d                   	pop    ebp
c00081d3:	c3                   	ret    
c00081d4:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00081d8:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c00081e0:	83 ec 04             	sub    esp,0x4
c00081e3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00081e7:	56                   	push   esi
c00081e8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00081ec:	57                   	push   edi
c00081ed:	68 08 09 02 c0       	push   0xc0020908
c00081f2:	e8 13 27 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00081f7:	5d                   	pop    ebp
c00081f8:	58                   	pop    eax
c00081f9:	56                   	push   esi
c00081fa:	57                   	push   edi
c00081fb:	e8 18 fd ff ff       	call   c0007f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0008200:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008204:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008208:	83 c4 0c             	add    esp,0xc
c000820b:	8b 35 e8 5e 02 c0    	mov    esi,DWORD PTR ds:0xc0025ee8
c0008211:	0f ac d0 0c          	shrd   eax,edx,0xc
c0008215:	01 f0                	add    eax,esi
c0008217:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c000821c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0008223:	52                   	push   edx
c0008224:	50                   	push   eax
c0008225:	68 6d 09 02 c0       	push   0xc002096d
c000822a:	e8 db 26 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000822f:	83 c4 10             	add    esp,0x10
c0008232:	e9 00 fe ff ff       	jmp    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0008237:	90                   	nop

c0008238 <Pipe::isAtty()>:
c0008238:	31 c0                	xor    eax,eax
c000823a:	c3                   	ret    
c000823b:	90                   	nop

c000823c <Pipe::~Pipe()>:
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	ba cc 09 02 c0       	mov    edx,0xc00209cc
c0008244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008248:	89 10                	mov    DWORD PTR [eax],edx
c000824a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000824e:	83 ec 0c             	sub    esp,0xc
c0008251:	50                   	push   eax
c0008252:	e8 35 11 00 00       	call   c000938c <UnixFile::~UnixFile()>
c0008257:	83 c4 10             	add    esp,0x10
c000825a:	90                   	nop
c000825b:	83 c4 0c             	add    esp,0xc
c000825e:	c3                   	ret    
c000825f:	90                   	nop

c0008260 <Pipe::~Pipe()>:
c0008260:	83 ec 0c             	sub    esp,0xc
c0008263:	83 ec 0c             	sub    esp,0xc
c0008266:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000826a:	e8 cd ff ff ff       	call   c000823c <Pipe::~Pipe()>
c000826f:	83 c4 10             	add    esp,0x10
c0008272:	83 ec 08             	sub    esp,0x8
c0008275:	6a 20                	push   0x20
c0008277:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000827b:	e8 8c 25 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0008280:	83 c4 10             	add    esp,0x10
c0008283:	83 c4 0c             	add    esp,0xc
c0008286:	c3                   	ret    
c0008287:	90                   	nop

c0008288 <Pipe::write(unsigned long long, void*, int*)>:
c0008288:	55                   	push   ebp
c0008289:	57                   	push   edi
c000828a:	56                   	push   esi
c000828b:	53                   	push   ebx
c000828c:	83 ec 1c             	sub    esp,0x1c
c000828f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008293:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008297:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000829b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000829e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00082a2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00082a5:	89 04 24             	mov    DWORD PTR [esp],eax
c00082a8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00082ac:	89 d8                	mov    eax,ebx
c00082ae:	89 d6                	mov    esi,edx
c00082b0:	89 d7                	mov    edi,edx
c00082b2:	c1 ff 1f             	sar    edi,0x1f
c00082b5:	03 34 24             	add    esi,DWORD PTR [esp]
c00082b8:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082bc:	c1 f8 1f             	sar    eax,0x1f
c00082bf:	39 f3                	cmp    ebx,esi
c00082c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082c9:	19 f8                	sbb    eax,edi
c00082cb:	b8 01 00 00 00       	mov    eax,0x1
c00082d0:	72 72                	jb     c0008344 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c00082d2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082d5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00082d9:	01 d0                	add    eax,edx
c00082db:	99                   	cdq    
c00082dc:	f7 fb                	idiv   ebx
c00082de:	89 d8                	mov    eax,ebx
c00082e0:	29 d0                	sub    eax,edx
c00082e2:	89 d6                	mov    esi,edx
c00082e4:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082e7:	89 c3                	mov    ebx,eax
c00082e9:	c1 fb 1f             	sar    ebx,0x1f
c00082ec:	39 c2                	cmp    edx,eax
c00082ee:	19 df                	sbb    edi,ebx
c00082f0:	bb 00 00 00 00       	mov    ebx,0x0
c00082f5:	72 04                	jb     c00082fb <Pipe::write(unsigned long long, void*, int*)+0x73>
c00082f7:	89 d3                	mov    ebx,edx
c00082f9:	29 c3                	sub    ebx,eax
c00082fb:	89 d0                	mov    eax,edx
c00082fd:	29 d8                	sub    eax,ebx
c00082ff:	74 0d                	je     c000830e <Pipe::write(unsigned long long, void*, int*)+0x86>
c0008301:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008304:	89 c1                	mov    ecx,eax
c0008306:	01 f7                	add    edi,esi
c0008308:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000830c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000830e:	85 db                	test   ebx,ebx
c0008310:	74 0d                	je     c000831f <Pipe::write(unsigned long long, void*, int*)+0x97>
c0008312:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008316:	89 d9                	mov    ecx,ebx
c0008318:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000831b:	89 c6                	mov    esi,eax
c000831d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000831f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008322:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008327:	75 10                	jne    c0008339 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	68 89 09 02 c0       	push   0xc0020989
c0008331:	e8 d3 8f 00 00       	call   c0011309 <KePanic(char const*)>
c0008336:	83 c4 10             	add    esp,0x10
c0008339:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000833d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008340:	89 08                	mov    DWORD PTR [eax],ecx
c0008342:	31 c0                	xor    eax,eax
c0008344:	83 c4 1c             	add    esp,0x1c
c0008347:	5b                   	pop    ebx
c0008348:	5e                   	pop    esi
c0008349:	5f                   	pop    edi
c000834a:	5d                   	pop    ebp
c000834b:	c3                   	ret    

c000834c <Pipe::read(unsigned long long, void*, int*)>:
c000834c:	55                   	push   ebp
c000834d:	57                   	push   edi
c000834e:	56                   	push   esi
c000834f:	53                   	push   ebx
c0008350:	83 ec 1c             	sub    esp,0x1c
c0008353:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008357:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000835b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000835f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008362:	89 c8                	mov    eax,ecx
c0008364:	99                   	cdq    
c0008365:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008369:	74 24                	je     c000838f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000836b:	39 f9                	cmp    ecx,edi
c000836d:	89 d1                	mov    ecx,edx
c000836f:	19 f1                	sbb    ecx,esi
c0008371:	73 1c                	jae    c000838f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008373:	fa                   	cli    
c0008374:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000837a:	e8 89 d8 00 00       	call   c0015c08 <schedule()>
c000837f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0008384:	48                   	dec    eax
c0008385:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000838a:	75 d3                	jne    c000835f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000838c:	fb                   	sti    
c000838d:	eb d0                	jmp    c000835f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000838f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008393:	39 f8                	cmp    eax,edi
c0008395:	89 d1                	mov    ecx,edx
c0008397:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000839b:	19 f1                	sbb    ecx,esi
c000839d:	73 08                	jae    c00083a7 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c000839f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00083a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083a7:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00083aa:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00083ad:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00083b1:	29 f7                	sub    edi,esi
c00083b3:	89 f8                	mov    eax,edi
c00083b5:	99                   	cdq    
c00083b6:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00083ba:	89 d0                	mov    eax,edx
c00083bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083c0:	19 c2                	sbb    edx,eax
c00083c2:	89 f8                	mov    eax,edi
c00083c4:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c00083c9:	89 ea                	mov    edx,ebp
c00083cb:	29 c2                	sub    edx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	74 0b                	je     c00083dc <Pipe::read(unsigned long long, void*, int*)+0x90>
c00083d1:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083d4:	89 c1                	mov    ecx,eax
c00083d6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083dc:	85 d2                	test   edx,edx
c00083de:	74 0d                	je     c00083ed <Pipe::read(unsigned long long, void*, int*)+0xa1>
c00083e0:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083e4:	89 d1                	mov    ecx,edx
c00083e6:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083e9:	89 c7                	mov    edi,eax
c00083eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083ed:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083f0:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083f3:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083f6:	99                   	cdq    
c00083f7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00083fb:	89 f7                	mov    edi,esi
c00083fd:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0008401:	c1 ff 1f             	sar    edi,0x1f
c0008404:	57                   	push   edi
c0008405:	56                   	push   esi
c0008406:	52                   	push   edx
c0008407:	50                   	push   eax
c0008408:	e8 b3 6f 01 00       	call   c001f3c0 <__umoddi3>
c000840d:	83 c4 10             	add    esp,0x10
c0008410:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008415:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008418:	75 10                	jne    c000842a <Pipe::read(unsigned long long, void*, int*)+0xde>
c000841a:	83 ec 0c             	sub    esp,0xc
c000841d:	68 a6 09 02 c0       	push   0xc00209a6
c0008422:	e8 e2 8e 00 00       	call   c0011309 <KePanic(char const*)>
c0008427:	83 c4 10             	add    esp,0x10
c000842a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000842e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008432:	89 10                	mov    DWORD PTR [eax],edx
c0008434:	83 c4 1c             	add    esp,0x1c
c0008437:	31 c0                	xor    eax,eax
c0008439:	5b                   	pop    ebx
c000843a:	5e                   	pop    esi
c000843b:	5f                   	pop    edi
c000843c:	5d                   	pop    ebp
c000843d:	c3                   	ret    

c000843e <Pipe::Pipe(int)>:
c000843e:	83 ec 0c             	sub    esp,0xc
c0008441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008445:	83 ec 08             	sub    esp,0x8
c0008448:	6a 00                	push   0x0
c000844a:	50                   	push   eax
c000844b:	e8 56 0d 00 00       	call   c00091a6 <UnixFile::UnixFile(int)>
c0008450:	83 c4 10             	add    esp,0x10
c0008453:	ba cc 09 02 c0       	mov    edx,0xc00209cc
c0008458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000845c:	89 10                	mov    DWORD PTR [eax],edx
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008466:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008469:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000846d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008478:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000847f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008483:	83 ec 0c             	sub    esp,0xc
c0008486:	50                   	push   eax
c0008487:	e8 47 f6 ff ff       	call   c0007ad3 <malloc>
c000848c:	83 c4 10             	add    esp,0x10
c000848f:	89 c2                	mov    edx,eax
c0008491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008495:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000849c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00084a0:	90                   	nop
c00084a1:	83 c4 0c             	add    esp,0xc
c00084a4:	c3                   	ret    
c00084a5:	90                   	nop

c00084a6 <VgaText::isAtty()>:
c00084a6:	b0 01                	mov    al,0x1
c00084a8:	c3                   	ret    
c00084a9:	90                   	nop

c00084aa <VgaText::~VgaText()>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	ba 14 0a 02 c0       	mov    edx,0xc0020a14
c00084b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084b6:	89 10                	mov    DWORD PTR [eax],edx
c00084b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084bc:	83 ec 0c             	sub    esp,0xc
c00084bf:	50                   	push   eax
c00084c0:	e8 c7 0e 00 00       	call   c000938c <UnixFile::~UnixFile()>
c00084c5:	83 c4 10             	add    esp,0x10
c00084c8:	90                   	nop
c00084c9:	83 c4 0c             	add    esp,0xc
c00084cc:	c3                   	ret    
c00084cd:	90                   	nop

c00084ce <VgaText::~VgaText()>:
c00084ce:	83 ec 0c             	sub    esp,0xc
c00084d1:	83 ec 0c             	sub    esp,0xc
c00084d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d8:	e8 cd ff ff ff       	call   c00084aa <VgaText::~VgaText()>
c00084dd:	83 c4 10             	add    esp,0x10
c00084e0:	83 ec 08             	sub    esp,0x8
c00084e3:	68 84 01 00 00       	push   0x184
c00084e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084ec:	e8 1b 23 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c00084f1:	83 c4 10             	add    esp,0x10
c00084f4:	83 c4 0c             	add    esp,0xc
c00084f7:	c3                   	ret    

c00084f8 <VgaText::read(unsigned long long, void*, int*)>:
c00084f8:	83 ec 10             	sub    esp,0x10
c00084fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008503:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008507:	e8 42 51 00 00       	call   c000d64e <readKeyboard(VgaText*, char*, unsigned long)>
c000850c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008510:	89 02                	mov    DWORD PTR [edx],eax
c0008512:	31 c0                	xor    eax,eax
c0008514:	83 c4 1c             	add    esp,0x1c
c0008517:	c3                   	ret    

c0008518 <setTerminalScrollLock(bool)>:
c0008518:	c3                   	ret    

c0008519 <doTerminalCycle()>:
c0008519:	c3                   	ret    

c000851a <addToTerminalCycle(VgaText*)>:
c000851a:	c3                   	ret    

c000851b <scrollTerminalScrollLock(int)>:
c000851b:	c3                   	ret    

c000851c <VgaText::updateTitle()>:
c000851c:	c3                   	ret    
c000851d:	90                   	nop

c000851e <VgaText::load()>:
c000851e:	c3                   	ret    
c000851f:	90                   	nop

c0008520 <VgaText::updateCursor()>:
c0008520:	83 ec 14             	sub    esp,0x14
c0008523:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008527:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000852a:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000852d:	e8 76 04 01 00       	call   c00189a8 <HalConsoleCursorUpdate(int, int)>
c0008532:	83 c4 1c             	add    esp,0x1c
c0008535:	c3                   	ret    

c0008536 <VgaText::doANSI_SGR(int)>:
c0008536:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000853a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000853e:	85 d2                	test   edx,edx
c0008540:	75 0b                	jne    c000854d <VgaText::doANSI_SGR(int)+0x17>
c0008542:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008545:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008548:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000854b:	eb 59                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c000854d:	83 fa 07             	cmp    edx,0x7
c0008550:	75 0b                	jne    c000855d <VgaText::doANSI_SGR(int)+0x27>
c0008552:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008555:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008558:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000855b:	eb 49                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c000855d:	83 fa 1b             	cmp    edx,0x1b
c0008560:	74 e0                	je     c0008542 <VgaText::doANSI_SGR(int)+0xc>
c0008562:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008565:	83 f9 07             	cmp    ecx,0x7
c0008568:	77 09                	ja     c0008573 <VgaText::doANSI_SGR(int)+0x3d>
c000856a:	8b 14 8d 60 31 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdcea0]
c0008571:	eb 20                	jmp    c0008593 <VgaText::doANSI_SGR(int)+0x5d>
c0008573:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008576:	83 f9 07             	cmp    ecx,0x7
c0008579:	77 09                	ja     c0008584 <VgaText::doANSI_SGR(int)+0x4e>
c000857b:	8b 14 8d 60 31 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdcea0]
c0008582:	eb 22                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c0008584:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008587:	83 f9 07             	cmp    ecx,0x7
c000858a:	77 0b                	ja     c0008597 <VgaText::doANSI_SGR(int)+0x61>
c000858c:	8b 14 95 18 30 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcfe8]
c0008593:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008596:	c3                   	ret    
c0008597:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000859a:	83 f9 07             	cmp    ecx,0x7
c000859d:	77 0a                	ja     c00085a9 <VgaText::doANSI_SGR(int)+0x73>
c000859f:	8b 14 95 f0 2f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd010]
c00085a6:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a9:	c3                   	ret    

c00085aa <VgaText::setDefaultBgColour(VgaColour)>:
c00085aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085b2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00085b5:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085b8:	c3                   	ret    
c00085b9:	90                   	nop

c00085ba <VgaText::setDefaultFgColour(VgaColour)>:
c00085ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085c2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085c8:	c3                   	ret    
c00085c9:	90                   	nop

c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085ca:	53                   	push   ebx
c00085cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085cf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085d7:	51                   	push   ecx
c00085d8:	e8 cd ff ff ff       	call   c00085aa <VgaText::setDefaultBgColour(VgaColour)>
c00085dd:	58                   	pop    eax
c00085de:	5a                   	pop    edx
c00085df:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085e3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085e7:	5b                   	pop    ebx
c00085e8:	eb d0                	jmp    c00085ba <VgaText::setDefaultFgColour(VgaColour)>

c00085ea <VgaText::setTitleTextColour(VgaColour)>:
c00085ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085f2:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085f5:	c3                   	ret    

c00085f6 <VgaText::setTitleColour(VgaColour)>:
c00085f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085fe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008601:	c3                   	ret    

c0008602 <VgaText::setTitle(char*)>:
c0008602:	c3                   	ret    
c0008603:	90                   	nop

c0008604 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008608:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000860d:	83 e0 0f             	and    eax,0xf
c0008610:	c1 e2 04             	shl    edx,0x4
c0008613:	09 d0                	or     eax,edx
c0008615:	c3                   	ret    

c0008616 <VgaText::scrollScreen()>:
c0008616:	55                   	push   ebp
c0008617:	57                   	push   edi
c0008618:	56                   	push   esi
c0008619:	be 01 00 00 00       	mov    esi,0x1
c000861e:	53                   	push   ebx
c000861f:	83 ec 0c             	sub    esp,0xc
c0008622:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008626:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008629:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000862f:	31 ff                	xor    edi,edi
c0008631:	01 e9                	add    ecx,ebp
c0008633:	8a 01                	mov    al,BYTE PTR [ecx]
c0008635:	83 fe 18             	cmp    esi,0x18
c0008638:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c000863e:	75 20                	jne    c0008660 <VgaText::scrollScreen()+0x4a>
c0008640:	f7 c7 01 00 00 00    	test   edi,0x1
c0008646:	74 15                	je     c000865d <VgaText::scrollScreen()+0x47>
c0008648:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000864c:	50                   	push   eax
c000864d:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008651:	50                   	push   eax
c0008652:	e8 ad ff ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c0008657:	5a                   	pop    edx
c0008658:	5a                   	pop    edx
c0008659:	88 01                	mov    BYTE PTR [ecx],al
c000865b:	eb 03                	jmp    c0008660 <VgaText::scrollScreen()+0x4a>
c000865d:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0008660:	47                   	inc    edi
c0008661:	41                   	inc    ecx
c0008662:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008668:	75 c9                	jne    c0008633 <VgaText::scrollScreen()+0x1d>
c000866a:	46                   	inc    esi
c000866b:	83 fe 19             	cmp    esi,0x19
c000866e:	75 b9                	jne    c0008629 <VgaText::scrollScreen()+0x13>
c0008670:	39 1d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebx
c0008676:	75 1f                	jne    c0008697 <VgaText::scrollScreen()+0x81>
c0008678:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000867c:	74 05                	je     c0008683 <VgaText::scrollScreen()+0x6d>
c000867e:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008681:	eb 14                	jmp    c0008697 <VgaText::scrollScreen()+0x81>
c0008683:	50                   	push   eax
c0008684:	50                   	push   eax
c0008685:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008689:	50                   	push   eax
c000868a:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000868e:	50                   	push   eax
c000868f:	e8 a8 01 01 00       	call   c001883c <HalConsoleScroll(int, int)>
c0008694:	83 c4 10             	add    esp,0x10
c0008697:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000869b:	83 c4 0c             	add    esp,0xc
c000869e:	5b                   	pop    ebx
c000869f:	5e                   	pop    esi
c00086a0:	5f                   	pop    edi
c00086a1:	5d                   	pop    ebp
c00086a2:	e9 79 fe ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c00086a7:	90                   	nop

c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>:
c00086a8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00086ad:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00086b2:	c1 e0 08             	shl    eax,0x8
c00086b5:	09 d0                	or     eax,edx
c00086b7:	c3                   	ret    

c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086b8:	55                   	push   ebp
c00086b9:	57                   	push   edi
c00086ba:	56                   	push   esi
c00086bb:	53                   	push   ebx
c00086bc:	83 ec 1c             	sub    esp,0x1c
c00086bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086c3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086c7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086cb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086d3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086d7:	0f b6 c3             	movzx  eax,bl
c00086da:	50                   	push   eax
c00086db:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086e0:	50                   	push   eax
c00086e1:	e8 1e ff ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c00086e6:	5a                   	pop    edx
c00086e7:	59                   	pop    ecx
c00086e8:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086ed:	0f b6 c0             	movzx  eax,al
c00086f0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086f4:	50                   	push   eax
c00086f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086f9:	e8 aa ff ff ff       	call   c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>
c00086fe:	5a                   	pop    edx
c00086ff:	6b d7 50             	imul   edx,edi,0x50
c0008702:	59                   	pop    ecx
c0008703:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008706:	01 f2                	add    edx,esi
c0008708:	0f b7 d2             	movzx  edx,dx
c000870b:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000870f:	39 2d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebp
c0008715:	75 28                	jne    c000873f <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008717:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c000871b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000871f:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008723:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008727:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000872b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000872f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008733:	83 c4 1c             	add    esp,0x1c
c0008736:	5b                   	pop    ebx
c0008737:	5e                   	pop    esi
c0008738:	5f                   	pop    edi
c0008739:	5d                   	pop    ebp
c000873a:	e9 05 02 01 00       	jmp    c0018944 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000873f:	83 c4 1c             	add    esp,0x1c
c0008742:	5b                   	pop    ebx
c0008743:	5e                   	pop    esi
c0008744:	5f                   	pop    edi
c0008745:	5d                   	pop    ebp
c0008746:	c3                   	ret    
c0008747:	90                   	nop

c0008748 <VgaText::getCursorX()>:
c0008748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000874c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000874f:	c3                   	ret    

c0008750 <VgaText::getCursorY()>:
c0008750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008754:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008757:	c3                   	ret    

c0008758 <VgaText::setCursor(int, int)>:
c0008758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000875c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008760:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008763:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008767:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000876a:	e9 b1 fd ff ff       	jmp    c0008520 <VgaText::updateCursor()>

c000876f <setActiveTerminal(VgaText*)>:
c000876f:	53                   	push   ebx
c0008770:	83 ec 08             	sub    esp,0x8
c0008773:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008777:	85 db                	test   ebx,ebx
c0008779:	75 11                	jne    c000878c <setActiveTerminal(VgaText*)+0x1d>
c000877b:	c7 44 24 10 e0 09 02 c0 	mov    DWORD PTR [esp+0x10],0xc00209e0
c0008783:	83 c4 08             	add    esp,0x8
c0008786:	5b                   	pop    ebx
c0008787:	e9 7d 8b 00 00       	jmp    c0011309 <KePanic(char const*)>
c000878c:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c0008791:	85 c0                	test   eax,eax
c0008793:	74 0c                	je     c00087a1 <setActiveTerminal(VgaText*)+0x32>
c0008795:	83 ec 0c             	sub    esp,0xc
c0008798:	50                   	push   eax
c0008799:	e8 82 fd ff ff       	call   c0008520 <VgaText::updateCursor()>
c000879e:	83 c4 10             	add    esp,0x10
c00087a1:	50                   	push   eax
c00087a2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00087a5:	89 1d 04 5f 02 c0    	mov    DWORD PTR ds:0xc0025f04,ebx
c00087ab:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00087ae:	53                   	push   ebx
c00087af:	e8 a4 ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c00087b4:	83 c4 18             	add    esp,0x18
c00087b7:	5b                   	pop    ebx
c00087b8:	c3                   	ret    
c00087b9:	90                   	nop

c00087ba <VgaText::clearScreen()>:
c00087ba:	57                   	push   edi
c00087bb:	56                   	push   esi
c00087bc:	31 f6                	xor    esi,esi
c00087be:	53                   	push   ebx
c00087bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087c3:	52                   	push   edx
c00087c4:	6a 00                	push   0x0
c00087c6:	6a 00                	push   0x0
c00087c8:	53                   	push   ebx
c00087c9:	e8 8a ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c00087ce:	83 c4 10             	add    esp,0x10
c00087d1:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087d8:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087db:	7e 20                	jle    c00087fd <VgaText::clearScreen()+0x43>
c00087dd:	31 ff                	xor    edi,edi
c00087df:	50                   	push   eax
c00087e0:	50                   	push   eax
c00087e1:	56                   	push   esi
c00087e2:	57                   	push   edi
c00087e3:	47                   	inc    edi
c00087e4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087e7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087ea:	6a 20                	push   0x20
c00087ec:	53                   	push   ebx
c00087ed:	e8 c6 fe ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087f2:	83 c4 20             	add    esp,0x20
c00087f5:	83 ff 50             	cmp    edi,0x50
c00087f8:	75 e5                	jne    c00087df <VgaText::clearScreen()+0x25>
c00087fa:	46                   	inc    esi
c00087fb:	eb db                	jmp    c00087d8 <VgaText::clearScreen()+0x1e>
c00087fd:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008804:	5b                   	pop    ebx
c0008805:	5e                   	pop    esi
c0008806:	5f                   	pop    edi
c0008807:	c3                   	ret    

c0008808 <VgaText::setCursorX(int)>:
c0008808:	83 ec 10             	sub    esp,0x10
c000880b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000880f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008816:	50                   	push   eax
c0008817:	e8 3c ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c000881c:	83 c4 1c             	add    esp,0x1c
c000881f:	c3                   	ret    

c0008820 <VgaText::setCursorY(int)>:
c0008820:	83 ec 10             	sub    esp,0x10
c0008823:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008827:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000882b:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000882e:	50                   	push   eax
c000882f:	e8 24 ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008834:	83 c4 1c             	add    esp,0x1c
c0008837:	c3                   	ret    

c0008838 <VgaText::incrementCursor(bool)>:
c0008838:	56                   	push   esi
c0008839:	53                   	push   ebx
c000883a:	51                   	push   ecx
c000883b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000883f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008843:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008846:	40                   	inc    eax
c0008847:	83 f8 50             	cmp    eax,0x50
c000884a:	74 05                	je     c0008851 <VgaText::incrementCursor(bool)+0x19>
c000884c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000884f:	eb 24                	jmp    c0008875 <VgaText::incrementCursor(bool)+0x3d>
c0008851:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008858:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000885b:	8d 50 01             	lea    edx,[eax+0x1]
c000885e:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008861:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008864:	75 0f                	jne    c0008875 <VgaText::incrementCursor(bool)+0x3d>
c0008866:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008869:	83 ec 0c             	sub    esp,0xc
c000886c:	53                   	push   ebx
c000886d:	e8 a4 fd ff ff       	call   c0008616 <VgaText::scrollScreen()>
c0008872:	83 c4 10             	add    esp,0x10
c0008875:	89 f0                	mov    eax,esi
c0008877:	84 c0                	test   al,al
c0008879:	74 0c                	je     c0008887 <VgaText::incrementCursor(bool)+0x4f>
c000887b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000887f:	5a                   	pop    edx
c0008880:	5b                   	pop    ebx
c0008881:	5e                   	pop    esi
c0008882:	e9 99 fc ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c0008887:	58                   	pop    eax
c0008888:	5b                   	pop    ebx
c0008889:	5e                   	pop    esi
c000888a:	c3                   	ret    
c000888b:	90                   	nop

c000888c <VgaText::decrementCursor(bool)>:
c000888c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008890:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008894:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008897:	85 c0                	test   eax,eax
c0008899:	74 04                	je     c000889f <VgaText::decrementCursor(bool)+0x13>
c000889b:	48                   	dec    eax
c000889c:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000889f:	84 c9                	test   cl,cl
c00088a1:	74 09                	je     c00088ac <VgaText::decrementCursor(bool)+0x20>
c00088a3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00088a7:	e9 74 fc ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c00088ac:	c3                   	ret    
c00088ad:	90                   	nop

c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>:
c00088ae:	53                   	push   ebx
c00088af:	83 ec 08             	sub    esp,0x8
c00088b2:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088bf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088c3:	83 f8 07             	cmp    eax,0x7
c00088c6:	75 21                	jne    c00088e9 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088c8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088d0:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088d8:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088e0:	83 c4 08             	add    esp,0x8
c00088e3:	5b                   	pop    ebx
c00088e4:	e9 a2 38 00 00       	jmp    c000c18b <Krnl::beep(int, int, bool)>
c00088e9:	83 f8 0d             	cmp    eax,0xd
c00088ec:	75 09                	jne    c00088f7 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088ee:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f5:	eb 2d                	jmp    c0008924 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088f7:	83 f8 0a             	cmp    eax,0xa
c00088fa:	75 31                	jne    c000892d <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088fc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008903:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008906:	8d 50 01             	lea    edx,[eax+0x1]
c0008909:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000890c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000890f:	75 0f                	jne    c0008920 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008911:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008914:	83 ec 0c             	sub    esp,0xc
c0008917:	53                   	push   ebx
c0008918:	e8 f9 fc ff ff       	call   c0008616 <VgaText::scrollScreen()>
c000891d:	83 c4 10             	add    esp,0x10
c0008920:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008924:	83 c4 08             	add    esp,0x8
c0008927:	5b                   	pop    ebx
c0008928:	e9 f3 fb ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c000892d:	83 f8 08             	cmp    eax,0x8
c0008930:	75 25                	jne    c0008957 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0008932:	50                   	push   eax
c0008933:	50                   	push   eax
c0008934:	6a 01                	push   0x1
c0008936:	53                   	push   ebx
c0008937:	e8 50 ff ff ff       	call   c000888c <VgaText::decrementCursor(bool)>
c000893c:	5a                   	pop    edx
c000893d:	59                   	pop    ecx
c000893e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008941:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008944:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008947:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000894a:	6a 20                	push   0x20
c000894c:	53                   	push   ebx
c000894d:	e8 66 fd ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008952:	83 c4 28             	add    esp,0x28
c0008955:	5b                   	pop    ebx
c0008956:	c3                   	ret    
c0008957:	83 ec 08             	sub    esp,0x8
c000895a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000895d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008960:	51                   	push   ecx
c0008961:	52                   	push   edx
c0008962:	50                   	push   eax
c0008963:	53                   	push   ebx
c0008964:	e8 4f fd ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008969:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000896d:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008975:	83 c4 28             	add    esp,0x28
c0008978:	5b                   	pop    ebx
c0008979:	e9 ba fe ff ff       	jmp    c0008838 <VgaText::incrementCursor(bool)>

c000897e <VgaText::putchar(char)>:
c000897e:	57                   	push   edi
c000897f:	56                   	push   esi
c0008980:	53                   	push   ebx
c0008981:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008985:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008989:	0f be c2             	movsx  eax,dl
c000898c:	83 f8 5b             	cmp    eax,0x5b
c000898f:	75 18                	jne    c00089a9 <VgaText::putchar(char)+0x2b>
c0008991:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008995:	74 20                	je     c00089b7 <VgaText::putchar(char)+0x39>
c0008997:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000899d:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00089a4:	e9 b8 00 00 00       	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c00089a9:	83 f8 1b             	cmp    eax,0x1b
c00089ac:	75 09                	jne    c00089b7 <VgaText::putchar(char)+0x39>
c00089ae:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089b2:	e9 aa 00 00 00       	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c00089b7:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00089bb:	89 f9                	mov    ecx,edi
c00089bd:	84 c9                	test   cl,cl
c00089bf:	0f 84 8c 00 00 00    	je     c0008a51 <VgaText::putchar(char)+0xd3>
c00089c5:	8d 4a c0             	lea    ecx,[edx-0x40]
c00089c8:	80 f9 3e             	cmp    cl,0x3e
c00089cb:	77 70                	ja     c0008a3d <VgaText::putchar(char)+0xbf>
c00089cd:	83 f8 6d             	cmp    eax,0x6d
c00089d0:	75 3f                	jne    c0008a11 <VgaText::putchar(char)+0x93>
c00089d2:	31 f6                	xor    esi,esi
c00089d4:	31 d2                	xor    edx,edx
c00089d6:	31 c0                	xor    eax,eax
c00089d8:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089db:	7e 25                	jle    c0008a02 <VgaText::putchar(char)+0x84>
c00089dd:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089e2:	83 fa 3b             	cmp    edx,0x3b
c00089e5:	75 0f                	jne    c00089f6 <VgaText::putchar(char)+0x78>
c00089e7:	50                   	push   eax
c00089e8:	53                   	push   ebx
c00089e9:	e8 48 fb ff ff       	call   c0008536 <VgaText::doANSI_SGR(int)>
c00089ee:	31 d2                	xor    edx,edx
c00089f0:	59                   	pop    ecx
c00089f1:	58                   	pop    eax
c00089f2:	31 c0                	xor    eax,eax
c00089f4:	eb 09                	jmp    c00089ff <VgaText::putchar(char)+0x81>
c00089f6:	6b c0 0a             	imul   eax,eax,0xa
c00089f9:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089fd:	89 fa                	mov    edx,edi
c00089ff:	46                   	inc    esi
c0008a00:	eb d6                	jmp    c00089d8 <VgaText::putchar(char)+0x5a>
c0008a02:	84 d2                	test   dl,dl
c0008a04:	74 2f                	je     c0008a35 <VgaText::putchar(char)+0xb7>
c0008a06:	50                   	push   eax
c0008a07:	53                   	push   ebx
c0008a08:	e8 29 fb ff ff       	call   c0008536 <VgaText::doANSI_SGR(int)>
c0008a0d:	58                   	pop    eax
c0008a0e:	5a                   	pop    edx
c0008a0f:	eb 24                	jmp    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a11:	83 f8 4a             	cmp    eax,0x4a
c0008a14:	75 1f                	jne    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a16:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a1a:	75 19                	jne    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a1c:	83 ec 0c             	sub    esp,0xc
c0008a1f:	53                   	push   ebx
c0008a20:	e8 95 fd ff ff       	call   c00087ba <VgaText::clearScreen()>
c0008a25:	83 c4 0c             	add    esp,0xc
c0008a28:	6a 00                	push   0x0
c0008a2a:	6a 00                	push   0x0
c0008a2c:	53                   	push   ebx
c0008a2d:	e8 26 fd ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008a32:	83 c4 10             	add    esp,0x10
c0008a35:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a3b:	eb 24                	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c0008a3d:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a40:	83 f8 0e             	cmp    eax,0xe
c0008a43:	7f 1c                	jg     c0008a61 <VgaText::putchar(char)+0xe3>
c0008a45:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a48:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a4b:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0008a4f:	eb 10                	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c0008a51:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a54:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a57:	50                   	push   eax
c0008a58:	53                   	push   ebx
c0008a59:	e8 50 fe ff ff       	call   c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a5e:	83 c4 10             	add    esp,0x10
c0008a61:	5b                   	pop    ebx
c0008a62:	5e                   	pop    esi
c0008a63:	5f                   	pop    edi
c0008a64:	c3                   	ret    
c0008a65:	90                   	nop

c0008a66 <VgaText::putx(unsigned int)>:
c0008a66:	57                   	push   edi
c0008a67:	b9 11 00 00 00       	mov    ecx,0x11
c0008a6c:	56                   	push   esi
c0008a6d:	be ee 09 02 c0       	mov    esi,0xc00209ee
c0008a72:	53                   	push   ebx
c0008a73:	83 ec 20             	sub    esp,0x20
c0008a76:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a7a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a7e:	fc                   	cld    
c0008a7f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a81:	be 08 00 00 00       	mov    esi,0x8
c0008a86:	50                   	push   eax
c0008a87:	50                   	push   eax
c0008a88:	89 d8                	mov    eax,ebx
c0008a8a:	c1 e8 1c             	shr    eax,0x1c
c0008a8d:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a92:	c1 e3 04             	shl    ebx,0x4
c0008a95:	50                   	push   eax
c0008a96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a9a:	e8 df fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008a9f:	83 c4 10             	add    esp,0x10
c0008aa2:	4e                   	dec    esi
c0008aa3:	75 e1                	jne    c0008a86 <VgaText::putx(unsigned int)+0x20>
c0008aa5:	83 c4 20             	add    esp,0x20
c0008aa8:	5b                   	pop    ebx
c0008aa9:	5e                   	pop    esi
c0008aaa:	5f                   	pop    edi
c0008aab:	c3                   	ret    

c0008aac <VgaText::puts(char const*)>:
c0008aac:	53                   	push   ebx
c0008aad:	83 ec 08             	sub    esp,0x8
c0008ab0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008ab4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ab7:	85 c0                	test   eax,eax
c0008ab9:	74 12                	je     c0008acd <VgaText::puts(char const*)+0x21>
c0008abb:	51                   	push   ecx
c0008abc:	43                   	inc    ebx
c0008abd:	51                   	push   ecx
c0008abe:	50                   	push   eax
c0008abf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ac3:	e8 b6 fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008ac8:	83 c4 10             	add    esp,0x10
c0008acb:	eb e7                	jmp    c0008ab4 <VgaText::puts(char const*)+0x8>
c0008acd:	83 c4 08             	add    esp,0x8
c0008ad0:	5b                   	pop    ebx
c0008ad1:	c3                   	ret    

c0008ad2 <VgaText::write(unsigned long long, void*, int*)>:
c0008ad2:	55                   	push   ebp
c0008ad3:	57                   	push   edi
c0008ad4:	56                   	push   esi
c0008ad5:	53                   	push   ebx
c0008ad6:	83 ec 0c             	sub    esp,0xc
c0008ad9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008add:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008ae1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008ae5:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008aec:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008aef:	39 eb                	cmp    ebx,ebp
c0008af1:	74 13                	je     c0008b06 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008af3:	50                   	push   eax
c0008af4:	43                   	inc    ebx
c0008af5:	50                   	push   eax
c0008af6:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008afa:	50                   	push   eax
c0008afb:	56                   	push   esi
c0008afc:	e8 7d fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008b01:	83 c4 10             	add    esp,0x10
c0008b04:	eb e9                	jmp    c0008aef <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b06:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b11:	89 38                	mov    DWORD PTR [eax],edi
c0008b13:	83 c4 0c             	add    esp,0xc
c0008b16:	31 c0                	xor    eax,eax
c0008b18:	5b                   	pop    ebx
c0008b19:	5e                   	pop    esi
c0008b1a:	5f                   	pop    edi
c0008b1b:	5d                   	pop    ebp
c0008b1c:	c3                   	ret    
c0008b1d:	90                   	nop

c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b1e:	55                   	push   ebp
c0008b1f:	57                   	push   edi
c0008b20:	56                   	push   esi
c0008b21:	53                   	push   ebx
c0008b22:	83 ec 0c             	sub    esp,0xc
c0008b25:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0008b29:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b2e:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c0008b35:	50                   	push   eax
c0008b36:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b3b:	50                   	push   eax
c0008b3c:	e8 c3 fa ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c0008b41:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008b45:	5a                   	pop    edx
c0008b46:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008b49:	59                   	pop    ecx
c0008b4a:	0f b6 f8             	movzx  edi,al
c0008b4d:	0f b7 db             	movzx  ebx,bx
c0008b50:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b54:	01 db                	add    ebx,ebx
c0008b56:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008b59:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008b5c:	85 c0                	test   eax,eax
c0008b5e:	0f 84 ef 00 00 00    	je     c0008c53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b64:	83 f8 0d             	cmp    eax,0xd
c0008b67:	75 0c                	jne    c0008b75 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b69:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b70:	e9 d8 00 00 00       	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b75:	83 f8 0a             	cmp    eax,0xa
c0008b78:	75 44                	jne    c0008bbe <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b7a:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b81:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0008b84:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b87:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c0008b8a:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0008b8d:	75 0f                	jne    c0008b9e <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b8f:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0008b92:	83 ec 0c             	sub    esp,0xc
c0008b95:	55                   	push   ebp
c0008b96:	e8 7b fa ff ff       	call   c0008616 <VgaText::scrollScreen()>
c0008b9b:	83 c4 10             	add    esp,0x10
c0008b9e:	83 ec 0c             	sub    esp,0xc
c0008ba1:	55                   	push   ebp
c0008ba2:	e8 79 f9 ff ff       	call   c0008520 <VgaText::updateCursor()>
c0008ba7:	83 c4 10             	add    esp,0x10
c0008baa:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bae:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bb1:	0f b7 db             	movzx  ebx,bx
c0008bb4:	01 db                	add    ebx,ebx
c0008bb6:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bb9:	e9 8f 00 00 00       	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bbe:	83 f8 08             	cmp    eax,0x8
c0008bc1:	75 34                	jne    c0008bf7 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bc3:	51                   	push   ecx
c0008bc4:	51                   	push   ecx
c0008bc5:	6a 01                	push   0x1
c0008bc7:	55                   	push   ebp
c0008bc8:	e8 bf fc ff ff       	call   c000888c <VgaText::decrementCursor(bool)>
c0008bcd:	5b                   	pop    ebx
c0008bce:	58                   	pop    eax
c0008bcf:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008bd2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008bd5:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0008bd8:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c0008bdb:	6a 20                	push   0x20
c0008bdd:	55                   	push   ebp
c0008bde:	e8 d5 fa ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008be3:	83 c4 20             	add    esp,0x20
c0008be6:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bea:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bed:	0f b7 db             	movzx  ebx,bx
c0008bf0:	01 db                	add    ebx,ebx
c0008bf2:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bf5:	eb 56                	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bf7:	52                   	push   edx
c0008bf8:	52                   	push   edx
c0008bf9:	57                   	push   edi
c0008bfa:	50                   	push   eax
c0008bfb:	e8 a8 fa ff ff       	call   c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>
c0008c00:	83 c4 10             	add    esp,0x10
c0008c03:	66 89 03             	mov    WORD PTR [ebx],ax
c0008c06:	39 2d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebp
c0008c0c:	75 1d                	jne    c0008c2b <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c0e:	83 ec 0c             	sub    esp,0xc
c0008c11:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008c14:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008c17:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c1b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c1f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008c22:	50                   	push   eax
c0008c23:	e8 1c fd 00 00       	call   c0018944 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c28:	83 c4 20             	add    esp,0x20
c0008c2b:	50                   	push   eax
c0008c2c:	83 c3 02             	add    ebx,0x2
c0008c2f:	50                   	push   eax
c0008c30:	6a 00                	push   0x0
c0008c32:	55                   	push   ebp
c0008c33:	e8 00 fc ff ff       	call   c0008838 <VgaText::incrementCursor(bool)>
c0008c38:	83 c4 10             	add    esp,0x10
c0008c3b:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c0008c3f:	75 0c                	jne    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c41:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008c45:	0f b7 db             	movzx  ebx,bx
c0008c48:	01 db                	add    ebx,ebx
c0008c4a:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008c4d:	46                   	inc    esi
c0008c4e:	e9 06 ff ff ff       	jmp    c0008b59 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c53:	83 ec 0c             	sub    esp,0xc
c0008c56:	55                   	push   ebp
c0008c57:	e8 c4 f8 ff ff       	call   c0008520 <VgaText::updateCursor()>
c0008c5c:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c0008c63:	83 c4 1c             	add    esp,0x1c
c0008c66:	5b                   	pop    ebx
c0008c67:	5e                   	pop    esi
c0008c68:	5f                   	pop    edi
c0008c69:	5d                   	pop    ebp
c0008c6a:	c3                   	ret    
c0008c6b:	90                   	nop

c0008c6c <VgaText::VgaText(char const*)>:
c0008c6c:	56                   	push   esi
c0008c6d:	53                   	push   ebx
c0008c6e:	83 ec 04             	sub    esp,0x4
c0008c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c75:	83 ec 08             	sub    esp,0x8
c0008c78:	6a 00                	push   0x0
c0008c7a:	50                   	push   eax
c0008c7b:	e8 26 05 00 00       	call   c00091a6 <UnixFile::UnixFile(int)>
c0008c80:	83 c4 10             	add    esp,0x10
c0008c83:	ba 14 0a 02 c0       	mov    edx,0xc0020a14
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	89 10                	mov    DWORD PTR [eax],edx
c0008c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c92:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9d:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca8:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb0:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb8:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc3:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cce:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd9:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce4:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ceb:	83 ec 0c             	sub    esp,0xc
c0008cee:	6a 01                	push   0x1
c0008cf0:	e8 00 09 00 00       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0008cf5:	83 c4 10             	add    esp,0x10
c0008cf8:	89 c2                	mov    edx,eax
c0008cfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cfe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008d01:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c0008d07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d0b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d0e:	89 c6                	mov    esi,eax
c0008d10:	e8 cd f0 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0008d15:	68 05 0c 00 00       	push   0xc05
c0008d1a:	56                   	push   esi
c0008d1b:	50                   	push   eax
c0008d1c:	53                   	push   ebx
c0008d1d:	e8 dc 0f 00 00       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d22:	83 c4 10             	add    esp,0x10
c0008d25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d29:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d2c:	83 ec 04             	sub    esp,0x4
c0008d2f:	68 a0 0f 00 00       	push   0xfa0
c0008d34:	6a 00                	push   0x0
c0008d36:	50                   	push   eax
c0008d37:	e8 b4 77 ff ff       	call   c00004f0 <memset>
c0008d3c:	83 c4 10             	add    esp,0x10
c0008d3f:	83 ec 04             	sub    esp,0x4
c0008d42:	6a 00                	push   0x0
c0008d44:	6a 07                	push   0x7
c0008d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d4a:	e8 7b f8 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d4f:	83 c4 10             	add    esp,0x10
c0008d52:	83 ec 04             	sub    esp,0x4
c0008d55:	6a 00                	push   0x0
c0008d57:	6a 00                	push   0x0
c0008d59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d5d:	e8 f6 f9 ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008d62:	83 c4 10             	add    esp,0x10
c0008d65:	83 ec 0c             	sub    esp,0xc
c0008d68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d6c:	e8 49 fa ff ff       	call   c00087ba <VgaText::clearScreen()>
c0008d71:	83 c4 10             	add    esp,0x10
c0008d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d78:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d80:	05 82 00 00 00       	add    eax,0x82
c0008d85:	83 ec 04             	sub    esp,0x4
c0008d88:	68 80 00 00 00       	push   0x80
c0008d8d:	6a 00                	push   0x0
c0008d8f:	50                   	push   eax
c0008d90:	e8 5b 77 ff ff       	call   c00004f0 <memset>
c0008d95:	83 c4 10             	add    esp,0x10
c0008d98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d9c:	05 02 01 00 00       	add    eax,0x102
c0008da1:	83 ec 04             	sub    esp,0x4
c0008da4:	68 80 00 00 00       	push   0x80
c0008da9:	6a 00                	push   0x0
c0008dab:	50                   	push   eax
c0008dac:	e8 3f 77 ff ff       	call   c00004f0 <memset>
c0008db1:	83 c4 10             	add    esp,0x10
c0008db4:	90                   	nop
c0008db5:	83 c4 04             	add    esp,0x4
c0008db8:	5b                   	pop    ebx
c0008db9:	5e                   	pop    esi
c0008dba:	c3                   	ret    
c0008dbb:	90                   	nop

c0008dbc <VgaText::receiveKey(unsigned char)>:
c0008dbc:	55                   	push   ebp
c0008dbd:	57                   	push   edi
c0008dbe:	56                   	push   esi
c0008dbf:	53                   	push   ebx
c0008dc0:	83 ec 2c             	sub    esp,0x2c
c0008dc3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008dc7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dcb:	89 fd                	mov    ebp,edi
c0008dcd:	81 e5 ff 00 00 00    	and    ebp,0xff
c0008dd3:	0f 84 48 01 00 00    	je     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008dd9:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008ddf:	83 fd 08             	cmp    ebp,0x8
c0008de2:	75 6a                	jne    c0008e4e <VgaText::receiveKey(unsigned char)+0x92>
c0008de4:	83 ec 0c             	sub    esp,0xc
c0008de7:	56                   	push   esi
c0008de8:	e8 93 77 ff ff       	call   c0000580 <strlen>
c0008ded:	83 c4 10             	add    esp,0x10
c0008df0:	85 c0                	test   eax,eax
c0008df2:	0f 84 ef 00 00 00    	je     c0008ee7 <VgaText::receiveKey(unsigned char)+0x12b>
c0008df8:	50                   	push   eax
c0008df9:	50                   	push   eax
c0008dfa:	6a 08                	push   0x8
c0008dfc:	53                   	push   ebx
c0008dfd:	e8 7c fb ff ff       	call   c000897e <VgaText::putchar(char)>
c0008e02:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e05:	e8 76 77 ff ff       	call   c0000580 <strlen>
c0008e0a:	83 c4 10             	add    esp,0x10
c0008e0d:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e15:	83 fa 1f             	cmp    edx,0x1f
c0008e18:	89 d0                	mov    eax,edx
c0008e1a:	7f 1c                	jg     c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e1c:	83 e8 08             	sub    eax,0x8
c0008e1f:	3c 02                	cmp    al,0x2
c0008e21:	76 15                	jbe    c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e23:	83 fa 0d             	cmp    edx,0xd
c0008e26:	74 10                	je     c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e28:	57                   	push   edi
c0008e29:	57                   	push   edi
c0008e2a:	68 ff 09 02 c0       	push   0xc00209ff
c0008e2f:	53                   	push   ebx
c0008e30:	e8 77 fc ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0008e35:	83 c4 10             	add    esp,0x10
c0008e38:	83 ec 0c             	sub    esp,0xc
c0008e3b:	56                   	push   esi
c0008e3c:	e8 3f 77 ff ff       	call   c0000580 <strlen>
c0008e41:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e49:	e9 96 00 00 00       	jmp    c0008ee4 <VgaText::receiveKey(unsigned char)+0x128>
c0008e4e:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e54:	83 ec 0c             	sub    esp,0xc
c0008e57:	50                   	push   eax
c0008e58:	e8 23 77 ff ff       	call   c0000580 <strlen>
c0008e5d:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e60:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e64:	e8 17 77 ff ff       	call   c0000580 <strlen>
c0008e69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e6d:	83 c4 10             	add    esp,0x10
c0008e70:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e74:	3d 80 00 00 00       	cmp    eax,0x80
c0008e79:	0f 87 a2 00 00 00    	ja     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008e7f:	8d 47 ff             	lea    eax,[edi-0x1]
c0008e82:	3c 1e                	cmp    al,0x1e
c0008e84:	77 35                	ja     c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e86:	8d 47 f7             	lea    eax,[edi-0x9]
c0008e89:	3c 01                	cmp    al,0x1
c0008e8b:	76 2e                	jbe    c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e8d:	83 fd 0d             	cmp    ebp,0xd
c0008e90:	74 29                	je     c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e92:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e95:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e98:	68 05 0a 02 c0       	push   0xc0020a05
c0008e9d:	53                   	push   ebx
c0008e9e:	e8 7b fc ff ff       	call   c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008ea3:	8d 47 40             	lea    eax,[edi+0x40]
c0008ea6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea9:	0f b6 c0             	movzx  eax,al
c0008eac:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eaf:	50                   	push   eax
c0008eb0:	53                   	push   ebx
c0008eb1:	e8 f8 f9 ff ff       	call   c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>
c0008eb6:	83 c4 20             	add    esp,0x20
c0008eb9:	eb 11                	jmp    c0008ecc <VgaText::receiveKey(unsigned char)+0x110>
c0008ebb:	51                   	push   ecx
c0008ebc:	89 f8                	mov    eax,edi
c0008ebe:	51                   	push   ecx
c0008ebf:	0f be c0             	movsx  eax,al
c0008ec2:	50                   	push   eax
c0008ec3:	53                   	push   ebx
c0008ec4:	e8 b5 fa ff ff       	call   c000897e <VgaText::putchar(char)>
c0008ec9:	83 c4 10             	add    esp,0x10
c0008ecc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ed1:	89 f8                	mov    eax,edi
c0008ed3:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ed7:	52                   	push   edx
c0008ed8:	52                   	push   edx
c0008ed9:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008edd:	50                   	push   eax
c0008ede:	56                   	push   esi
c0008edf:	e8 8c 79 ff ff       	call   c0000870 <strcat>
c0008ee4:	83 c4 10             	add    esp,0x10
c0008ee7:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008eee:	75 0f                	jne    c0008eff <VgaText::receiveKey(unsigned char)+0x143>
c0008ef0:	83 fd 1c             	cmp    ebp,0x1c
c0008ef3:	77 2c                	ja     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008ef5:	b8 08 04 00 10       	mov    eax,0x10000408
c0008efa:	0f a3 e8             	bt     eax,ebp
c0008efd:	73 22                	jae    c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008eff:	50                   	push   eax
c0008f00:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f06:	50                   	push   eax
c0008f07:	56                   	push   esi
c0008f08:	53                   	push   ebx
c0008f09:	e8 62 79 ff ff       	call   c0000870 <strcat>
c0008f0e:	83 c4 0c             	add    esp,0xc
c0008f11:	68 80 00 00 00       	push   0x80
c0008f16:	6a 00                	push   0x0
c0008f18:	56                   	push   esi
c0008f19:	e8 d2 75 ff ff       	call   c00004f0 <memset>
c0008f1e:	83 c4 10             	add    esp,0x10
c0008f21:	83 c4 2c             	add    esp,0x2c
c0008f24:	5b                   	pop    ebx
c0008f25:	5e                   	pop    esi
c0008f26:	5f                   	pop    edi
c0008f27:	5d                   	pop    ebp
c0008f28:	c3                   	ret    
c0008f29:	90                   	nop

c0008f2a <VgaText::doUpdate()>:
c0008f2a:	c3                   	ret    
c0008f2b:	90                   	nop

c0008f2c <TSS::TSS()>:
c0008f2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f30:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f37:	90                   	nop
c0008f38:	c3                   	ret    
c0008f39:	90                   	nop
c0008f3a:	66 90                	xchg   ax,ax

c0008f3c <TSS::setESP(unsigned long)>:
c0008f3c:	55                   	push   ebp
c0008f3d:	89 e5                	mov    ebp,esp
c0008f3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f45:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f48:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f4b:	90                   	nop
c0008f4c:	5d                   	pop    ebp
c0008f4d:	c3                   	ret    
c0008f4e:	66 90                	xchg   ax,ax

c0008f50 <TSS::flush()>:
c0008f50:	55                   	push   ebp
c0008f51:	89 e5                	mov    ebp,esp
c0008f53:	83 ec 10             	sub    esp,0x10
c0008f56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f59:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f5b:	83 c8 03             	or     eax,0x3
c0008f5e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f62:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f66:	66 89 d0             	mov    ax,dx
c0008f69:	0f 00 d8             	ltr    ax
c0008f6c:	90                   	nop
c0008f6d:	c9                   	leave  
c0008f6e:	c3                   	ret    
c0008f6f:	90                   	nop

c0008f70 <TSS::setup(unsigned long, unsigned long)>:
c0008f70:	55                   	push   ebp
c0008f71:	89 e5                	mov    ebp,esp
c0008f73:	83 ec 18             	sub    esp,0x18
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	6a 68                	push   0x68
c0008f7b:	e8 53 eb ff ff       	call   c0007ad3 <malloc>
c0008f80:	83 c4 10             	add    esp,0x10
c0008f83:	89 c2                	mov    edx,eax
c0008f85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f88:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f91:	83 ec 04             	sub    esp,0x4
c0008f94:	6a 68                	push   0x68
c0008f96:	6a 00                	push   0x0
c0008f98:	50                   	push   eax
c0008f99:	e8 52 75 ff ff       	call   c00004f0 <memset>
c0008f9e:	83 c4 10             	add    esp,0x10
c0008fa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa7:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fb3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fc2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0009016:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009022:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0009032:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009035:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009038:	0f 20 da             	mov    edx,cr3
c000903b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000903e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009041:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009044:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009047:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000904a:	83 ec 08             	sub    esp,0x8
c000904d:	50                   	push   eax
c000904e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009051:	50                   	push   eax
c0009052:	e8 eb e2 ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0009057:	83 c4 10             	add    esp,0x10
c000905a:	83 ec 08             	sub    esp,0x8
c000905d:	6a 68                	push   0x68
c000905f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009062:	50                   	push   eax
c0009063:	e8 f6 e2 ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c0009068:	83 c4 10             	add    esp,0x10
c000906b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000906f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009072:	83 e0 0f             	and    eax,0xf
c0009075:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009078:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000907b:	83 c8 40             	or     eax,0x40
c000907e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009081:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009086:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000908c:	05 78 01 00 00       	add    eax,0x178
c0009091:	83 ec 04             	sub    esp,0x4
c0009094:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009097:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000909a:	50                   	push   eax
c000909b:	e8 f2 e2 ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00090a0:	83 c4 10             	add    esp,0x10
c00090a3:	89 c2                	mov    edx,eax
c00090a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090a8:	89 10                	mov    DWORD PTR [eax],edx
c00090aa:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00090af:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090b5:	05 78 01 00 00       	add    eax,0x178
c00090ba:	83 ec 0c             	sub    esp,0xc
c00090bd:	50                   	push   eax
c00090be:	e8 f9 e2 ff ff       	call   c00073bc <GDT::flush()>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00090cb:	c9                   	leave  
c00090cc:	c3                   	ret    
c00090cd:	90                   	nop

c00090ce <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090d9:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090de:	75 08                	jne    c00090e8 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090e0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090e6:	eb 38                	jmp    c0009120 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00090e8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00090ed:	75 17                	jne    c0009106 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00090ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00090f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00090f7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00090fd:	8b 10                	mov    edx,DWORD PTR [eax]
c00090ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009103:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0009106:	89 c1                	mov    ecx,eax
c0009108:	83 e1 fd             	and    ecx,0xfffffffd
c000910b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009111:	74 cd                	je     c00090e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009113:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009118:	83 e0 ef             	and    eax,0xffffffef
c000911b:	83 f8 08             	cmp    eax,0x8
c000911e:	76 c0                	jbe    c00090e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009120:	31 c0                	xor    eax,eax
c0009122:	c3                   	ret    
c0009123:	90                   	nop

c0009124 <ReservedFilename::isAtty()>:
c0009124:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009128:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000912b:	31 c0                	xor    eax,eax
c000912d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0009133:	74 09                	je     c000913e <ReservedFilename::isAtty()+0x1a>
c0009135:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000913b:	0f 94 c0             	sete   al
c000913e:	c3                   	ret    
c000913f:	90                   	nop

c0009140 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009144:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009148:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000914c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000914f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009154:	75 08                	jne    c000915e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009156:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000915c:	eb 3d                	jmp    c000919b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000915e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009163:	75 17                	jne    c000917c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009165:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000916a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000916d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009173:	8b 10                	mov    edx,DWORD PTR [eax]
c0009175:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009179:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000917c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009181:	75 04                	jne    c0009187 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0009183:	89 0a                	mov    DWORD PTR [edx],ecx
c0009185:	eb 14                	jmp    c000919b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009187:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000918c:	74 c8                	je     c0009156 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000918e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009193:	83 e0 ef             	and    eax,0xffffffef
c0009196:	83 f8 08             	cmp    eax,0x8
c0009199:	76 bb                	jbe    c0009156 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000919b:	31 c0                	xor    eax,eax
c000919d:	c3                   	ret    

c000919e <UnixFile::getFileDescriptor()>:
c000919e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091a5:	c3                   	ret    

c00091a6 <UnixFile::UnixFile(int)>:
c00091a6:	53                   	push   ebx
c00091a7:	83 ec 28             	sub    esp,0x28
c00091aa:	ba dc 0a 02 c0       	mov    edx,0xc0020adc
c00091af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091b3:	89 10                	mov    DWORD PTR [eax],edx
c00091b5:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091bd:	0f 8f 90 01 00 00    	jg     c0009353 <UnixFile::UnixFile(int)+0x1ad>
c00091c3:	a1 a0 31 02 c0       	mov    eax,ds:0xc00231a0
c00091c8:	8d 50 01             	lea    edx,[eax+0x1]
c00091cb:	89 15 a0 31 02 c0    	mov    DWORD PTR ds:0xc00231a0,edx
c00091d1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091d5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091d8:	83 ec 08             	sub    esp,0x8
c00091db:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091df:	68 98 5f 02 c0       	push   0xc0025f98
c00091e4:	e8 bf 63 01 00       	call   c001f5a8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00091e9:	83 c4 10             	add    esp,0x10
c00091ec:	a0 94 5f 02 c0       	mov    al,ds:0xc0025f94
c00091f1:	83 f0 01             	xor    eax,0x1
c00091f4:	0f b6 c0             	movzx  eax,al
c00091f7:	85 c0                	test   eax,eax
c00091f9:	0f 84 55 01 00 00    	je     c0009354 <UnixFile::UnixFile(int)+0x1ae>
c00091ff:	c6 05 94 5f 02 c0 01 	mov    BYTE PTR ds:0xc0025f94,0x1
c0009206:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000920e:	83 ec 0c             	sub    esp,0xc
c0009211:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009215:	e8 b9 e8 ff ff       	call   c0007ad3 <malloc>
c000921a:	83 c4 10             	add    esp,0x10
c000921d:	89 c3                	mov    ebx,eax
c000921f:	83 ec 08             	sub    esp,0x8
c0009222:	68 03 ff ff 0f       	push   0xfffff03
c0009227:	53                   	push   ebx
c0009228:	e8 2d 01 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000922d:	83 c4 10             	add    esp,0x10
c0009230:	89 1d 8c 5f 02 c0    	mov    DWORD PTR ds:0xc0025f8c,ebx
c0009236:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000923e:	83 ec 0c             	sub    esp,0xc
c0009241:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009245:	e8 89 e8 ff ff       	call   c0007ad3 <malloc>
c000924a:	83 c4 10             	add    esp,0x10
c000924d:	89 c3                	mov    ebx,eax
c000924f:	83 ec 08             	sub    esp,0x8
c0009252:	68 01 ff ff 0f       	push   0xfffff01
c0009257:	53                   	push   ebx
c0009258:	e8 fd 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000925d:	83 c4 10             	add    esp,0x10
c0009260:	89 1d 90 5f 02 c0    	mov    DWORD PTR ds:0xc0025f90,ebx
c0009266:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000926e:	83 ec 0c             	sub    esp,0xc
c0009271:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009275:	e8 59 e8 ff ff       	call   c0007ad3 <malloc>
c000927a:	83 c4 10             	add    esp,0x10
c000927d:	89 c3                	mov    ebx,eax
c000927f:	83 ec 08             	sub    esp,0x8
c0009282:	68 00 ff ff 0f       	push   0xfffff00
c0009287:	53                   	push   ebx
c0009288:	e8 cd 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000928d:	83 c4 10             	add    esp,0x10
c0009290:	89 1d 84 5f 02 c0    	mov    DWORD PTR ds:0xc0025f84,ebx
c0009296:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000929e:	83 ec 0c             	sub    esp,0xc
c00092a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092a5:	e8 29 e8 ff ff       	call   c0007ad3 <malloc>
c00092aa:	83 c4 10             	add    esp,0x10
c00092ad:	89 c3                	mov    ebx,eax
c00092af:	83 ec 08             	sub    esp,0x8
c00092b2:	68 02 ff ff 0f       	push   0xfffff02
c00092b7:	53                   	push   ebx
c00092b8:	e8 9d 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c00092bd:	83 c4 10             	add    esp,0x10
c00092c0:	89 1d 88 5f 02 c0    	mov    DWORD PTR ds:0xc0025f88,ebx
c00092c6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092ce:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092d3:	7f 7f                	jg     c0009354 <UnixFile::UnixFile(int)+0x1ae>
c00092d5:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092dd:	83 ec 0c             	sub    esp,0xc
c00092e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092e4:	e8 ea e7 ff ff       	call   c0007ad3 <malloc>
c00092e9:	83 c4 10             	add    esp,0x10
c00092ec:	89 c3                	mov    ebx,eax
c00092ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092f2:	05 10 ff ff 0f       	add    eax,0xfffff10
c00092f7:	83 ec 08             	sub    esp,0x8
c00092fa:	50                   	push   eax
c00092fb:	53                   	push   ebx
c00092fc:	e8 59 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c0009301:	83 c4 10             	add    esp,0x10
c0009304:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009308:	89 1c 85 60 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0a0],ebx
c000930f:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009317:	83 ec 0c             	sub    esp,0xc
c000931a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000931e:	e8 b0 e7 ff ff       	call   c0007ad3 <malloc>
c0009323:	83 c4 10             	add    esp,0x10
c0009326:	89 c3                	mov    ebx,eax
c0009328:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000932c:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009331:	83 ec 08             	sub    esp,0x8
c0009334:	50                   	push   eax
c0009335:	53                   	push   ebx
c0009336:	e8 1f 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009342:	89 1c 85 20 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0e0],ebx
c0009349:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000934e:	e9 7b ff ff ff       	jmp    c00092ce <UnixFile::UnixFile(int)+0x128>
c0009353:	90                   	nop
c0009354:	83 c4 28             	add    esp,0x28
c0009357:	5b                   	pop    ebx
c0009358:	c3                   	ret    
c0009359:	90                   	nop

c000935a <ReservedFilename::ReservedFilename(int)>:
c000935a:	83 ec 0c             	sub    esp,0xc
c000935d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009361:	83 ec 08             	sub    esp,0x8
c0009364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009368:	50                   	push   eax
c0009369:	e8 38 fe ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000936e:	83 c4 10             	add    esp,0x10
c0009371:	ba f8 0a 02 c0       	mov    edx,0xc0020af8
c0009376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000937a:	89 10                	mov    DWORD PTR [eax],edx
c000937c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009380:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009384:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009387:	90                   	nop
c0009388:	83 c4 0c             	add    esp,0xc
c000938b:	c3                   	ret    

c000938c <UnixFile::~UnixFile()>:
c000938c:	83 ec 1c             	sub    esp,0x1c
c000938f:	ba dc 0a 02 c0       	mov    edx,0xc0020adc
c0009394:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009398:	89 10                	mov    DWORD PTR [eax],edx
c000939a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000939e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093a1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093a6:	7f 76                	jg     c000941e <UnixFile::~UnixFile()+0x92>
c00093a8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093b0:	83 ec 0c             	sub    esp,0xc
c00093b3:	68 98 5f 02 c0       	push   0xc0025f98
c00093b8:	e8 bf 62 01 00       	call   c001f67c <LinkedList<UnixFile>::getFirstElement()>
c00093bd:	83 c4 10             	add    esp,0x10
c00093c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093c4:	83 ec 0c             	sub    esp,0xc
c00093c7:	68 98 5f 02 c0       	push   0xc0025f98
c00093cc:	e8 b3 62 01 00       	call   c001f684 <LinkedList<UnixFile>::removeFirst()>
c00093d1:	83 c4 10             	add    esp,0x10
c00093d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093d8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093dc:	74 43                	je     c0009421 <UnixFile::~UnixFile()+0x95>
c00093de:	83 ec 08             	sub    esp,0x8
c00093e1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093e5:	68 98 5f 02 c0       	push   0xc0025f98
c00093ea:	e8 b9 61 01 00       	call   c001f5a8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00093ef:	83 c4 10             	add    esp,0x10
c00093f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00093f6:	8d 50 01             	lea    edx,[eax+0x1]
c00093f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00093fd:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009402:	0f 94 c0             	sete   al
c0009405:	0f b6 c0             	movzx  eax,al
c0009408:	85 c0                	test   eax,eax
c000940a:	74 a4                	je     c00093b0 <UnixFile::~UnixFile()+0x24>
c000940c:	83 ec 0c             	sub    esp,0xc
c000940f:	68 b4 0a 02 c0       	push   0xc0020ab4
c0009414:	e8 f0 7e 00 00       	call   c0011309 <KePanic(char const*)>
c0009419:	83 c4 10             	add    esp,0x10
c000941c:	eb 92                	jmp    c00093b0 <UnixFile::~UnixFile()+0x24>
c000941e:	90                   	nop
c000941f:	eb 01                	jmp    c0009422 <UnixFile::~UnixFile()+0x96>
c0009421:	90                   	nop
c0009422:	90                   	nop
c0009423:	83 c4 1c             	add    esp,0x1c
c0009426:	c3                   	ret    
c0009427:	90                   	nop

c0009428 <UnixFile::~UnixFile()>:
c0009428:	83 ec 0c             	sub    esp,0xc
c000942b:	83 ec 0c             	sub    esp,0xc
c000942e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009432:	e8 55 ff ff ff       	call   c000938c <UnixFile::~UnixFile()>
c0009437:	83 c4 10             	add    esp,0x10
c000943a:	83 ec 08             	sub    esp,0x8
c000943d:	6a 0c                	push   0xc
c000943f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009443:	e8 c4 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0009448:	83 c4 10             	add    esp,0x10
c000944b:	83 c4 0c             	add    esp,0xc
c000944e:	c3                   	ret    
c000944f:	90                   	nop

c0009450 <ReservedFilename::~ReservedFilename()>:
c0009450:	83 ec 0c             	sub    esp,0xc
c0009453:	ba f8 0a 02 c0       	mov    edx,0xc0020af8
c0009458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000945c:	89 10                	mov    DWORD PTR [eax],edx
c000945e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009462:	83 ec 0c             	sub    esp,0xc
c0009465:	50                   	push   eax
c0009466:	e8 21 ff ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000946b:	83 c4 10             	add    esp,0x10
c000946e:	90                   	nop
c000946f:	83 c4 0c             	add    esp,0xc
c0009472:	c3                   	ret    
c0009473:	90                   	nop

c0009474 <ReservedFilename::~ReservedFilename()>:
c0009474:	83 ec 0c             	sub    esp,0xc
c0009477:	83 ec 0c             	sub    esp,0xc
c000947a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000947e:	e8 cd ff ff ff       	call   c0009450 <ReservedFilename::~ReservedFilename()>
c0009483:	83 c4 10             	add    esp,0x10
c0009486:	83 ec 08             	sub    esp,0x8
c0009489:	6a 0c                	push   0xc
c000948b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000948f:	e8 78 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0009494:	83 c4 10             	add    esp,0x10
c0009497:	83 c4 0c             	add    esp,0xc
c000949a:	c3                   	ret    

c000949b <KeGetFileFromDescriptor(int)>:
c000949b:	53                   	push   ebx
c000949c:	83 ec 08             	sub    esp,0x8
c000949f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094a3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094a9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094af:	7f 2c                	jg     c00094dd <KeGetFileFromDescriptor(int)+0x42>
c00094b1:	83 ec 0c             	sub    esp,0xc
c00094b4:	68 98 5f 02 c0       	push   0xc0025f98
c00094b9:	e8 be 61 01 00       	call   c001f67c <LinkedList<UnixFile>::getFirstElement()>
c00094be:	83 c4 10             	add    esp,0x10
c00094c1:	85 c0                	test   eax,eax
c00094c3:	75 04                	jne    c00094c9 <KeGetFileFromDescriptor(int)+0x2e>
c00094c5:	31 c0                	xor    eax,eax
c00094c7:	eb 6e                	jmp    c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094c9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094cc:	74 69                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094ce:	52                   	push   edx
c00094cf:	52                   	push   edx
c00094d0:	50                   	push   eax
c00094d1:	68 98 5f 02 c0       	push   0xc0025f98
c00094d6:	e8 4b 62 01 00       	call   c001f726 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094db:	eb e1                	jmp    c00094be <KeGetFileFromDescriptor(int)+0x23>
c00094dd:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00094e3:	a1 8c 5f 02 c0       	mov    eax,ds:0xc0025f8c
c00094e8:	74 4d                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094ea:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00094f0:	a1 90 5f 02 c0       	mov    eax,ds:0xc0025f90
c00094f5:	74 40                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094f7:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00094fd:	a1 88 5f 02 c0       	mov    eax,ds:0xc0025f88
c0009502:	74 33                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009504:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000950a:	a1 84 5f 02 c0       	mov    eax,ds:0xc0025f84
c000950f:	74 26                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009511:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009517:	83 f8 08             	cmp    eax,0x8
c000951a:	77 09                	ja     c0009525 <KeGetFileFromDescriptor(int)+0x8a>
c000951c:	8b 04 85 60 5f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda0a0]
c0009523:	eb 12                	jmp    c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009525:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000952b:	83 fb 08             	cmp    ebx,0x8
c000952e:	77 95                	ja     c00094c5 <KeGetFileFromDescriptor(int)+0x2a>
c0009530:	8b 04 9d 20 5f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda0e0]
c0009537:	83 c4 08             	add    esp,0x8
c000953a:	5b                   	pop    ebx
c000953b:	c3                   	ret    

c000953c <__static_initialization_and_destruction_0(int, int)>:
c000953c:	83 ec 0c             	sub    esp,0xc
c000953f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009544:	75 34                	jne    c000957a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009546:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000954e:	75 2a                	jne    c000957a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009550:	83 ec 0c             	sub    esp,0xc
c0009553:	68 98 5f 02 c0       	push   0xc0025f98
c0009558:	e8 09 60 01 00       	call   c001f566 <LinkedList<UnixFile>::LinkedList()>
c000955d:	83 c4 10             	add    esp,0x10
c0009560:	83 ec 04             	sub    esp,0x4
c0009563:	68 30 31 02 c0       	push   0xc0023130
c0009568:	68 98 5f 02 c0       	push   0xc0025f98
c000956d:	68 64 f5 01 c0       	push   0xc001f564
c0009572:	e8 45 12 00 00       	call   c000a7bc <__cxa_atexit>
c0009577:	83 c4 10             	add    esp,0x10
c000957a:	90                   	nop
c000957b:	83 c4 0c             	add    esp,0xc
c000957e:	c3                   	ret    

c000957f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000957f:	83 ec 0c             	sub    esp,0xc
c0009582:	83 ec 08             	sub    esp,0x8
c0009585:	68 ff ff 00 00       	push   0xffff
c000958a:	6a 01                	push   0x1
c000958c:	e8 ab ff ff ff       	call   c000953c <__static_initialization_and_destruction_0(int, int)>
c0009591:	83 c4 10             	add    esp,0x10
c0009594:	83 c4 0c             	add    esp,0xc
c0009597:	c3                   	ret    

c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0009598:	53                   	push   ebx
c0009599:	8b 15 a8 31 02 c0    	mov    edx,DWORD PTR ds:0xc00231a8
c000959f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095a7:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095ad:	89 d8                	mov    eax,ebx
c00095af:	d1 e8                	shr    eax,1
c00095b1:	01 d0                	add    eax,edx
c00095b3:	80 e3 01             	and    bl,0x1
c00095b6:	8a 10                	mov    dl,BYTE PTR [eax]
c00095b8:	75 09                	jne    c00095c3 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095ba:	83 e2 f0             	and    edx,0xfffffff0
c00095bd:	09 ca                	or     edx,ecx
c00095bf:	88 10                	mov    BYTE PTR [eax],dl
c00095c1:	5b                   	pop    ebx
c00095c2:	c3                   	ret    
c00095c3:	0f b6 c9             	movzx  ecx,cl
c00095c6:	83 e2 0f             	and    edx,0xf
c00095c9:	c1 e1 04             	shl    ecx,0x4
c00095cc:	09 ca                	or     edx,ecx
c00095ce:	88 10                	mov    BYTE PTR [eax],dl
c00095d0:	5b                   	pop    ebx
c00095d1:	c3                   	ret    

c00095d2 <Virt::getPageState(unsigned long)>:
c00095d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095d6:	8b 0d a8 31 02 c0    	mov    ecx,DWORD PTR ds:0xc00231a8
c00095dc:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095e2:	89 d0                	mov    eax,edx
c00095e4:	d1 e8                	shr    eax,1
c00095e6:	80 e2 01             	and    dl,0x1
c00095e9:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00095ec:	74 03                	je     c00095f1 <Virt::getPageState(unsigned long)+0x1f>
c00095ee:	c1 e8 04             	shr    eax,0x4
c00095f1:	83 e0 0f             	and    eax,0xf
c00095f4:	c3                   	ret    

c00095f5 <Virt::allocateKernelVirtualPages(int)>:
c00095f5:	55                   	push   ebp
c00095f6:	57                   	push   edi
c00095f7:	56                   	push   esi
c00095f8:	31 f6                	xor    esi,esi
c00095fa:	53                   	push   ebx
c00095fb:	31 db                	xor    ebx,ebx
c00095fd:	83 ec 1c             	sub    esp,0x1c
c0009600:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0009605:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009609:	8b 2d a4 31 02 c0    	mov    ebp,DWORD PTR ds:0xc00231a4
c000960f:	55                   	push   ebp
c0009610:	e8 bd ff ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c0009615:	5a                   	pop    edx
c0009616:	84 c0                	test   al,al
c0009618:	75 3d                	jne    c0009657 <Virt::allocateKernelVirtualPages(int)+0x62>
c000961a:	85 db                	test   ebx,ebx
c000961c:	0f 44 f5             	cmove  esi,ebp
c000961f:	83 c3 01             	add    ebx,0x1
c0009622:	39 fb                	cmp    ebx,edi
c0009624:	74 5e                	je     c0009684 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0009626:	83 c5 01             	add    ebp,0x1
c0009629:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c000962f:	76 33                	jbe    c0009664 <Virt::allocateKernelVirtualPages(int)+0x6f>
c0009631:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0009636:	c7 05 a4 31 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00231a4,0xc8000
c0009640:	75 2a                	jne    c000966c <Virt::allocateKernelVirtualPages(int)+0x77>
c0009642:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0009647:	bd 00 80 0c 00       	mov    ebp,0xc8000
c000964c:	55                   	push   ebp
c000964d:	e8 80 ff ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c0009652:	5a                   	pop    edx
c0009653:	84 c0                	test   al,al
c0009655:	74 c3                	je     c000961a <Virt::allocateKernelVirtualPages(int)+0x25>
c0009657:	83 c5 01             	add    ebp,0x1
c000965a:	31 db                	xor    ebx,ebx
c000965c:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0009662:	77 cd                	ja     c0009631 <Virt::allocateKernelVirtualPages(int)+0x3c>
c0009664:	89 2d a4 31 02 c0    	mov    DWORD PTR ds:0xc00231a4,ebp
c000966a:	eb a3                	jmp    c000960f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000966c:	83 ec 0c             	sub    esp,0xc
c000966f:	68 0c 0b 02 c0       	push   0xc0020b0c
c0009674:	e8 90 7c 00 00       	call   c0011309 <KePanic(char const*)>
c0009679:	8b 2d a4 31 02 c0    	mov    ebp,DWORD PTR ds:0xc00231a4
c000967f:	83 c4 10             	add    esp,0x10
c0009682:	eb 8b                	jmp    c000960f <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009684:	89 35 a4 31 02 c0    	mov    DWORD PTR ds:0xc00231a4,esi
c000968a:	83 fb 01             	cmp    ebx,0x1
c000968d:	74 63                	je     c00096f2 <Virt::allocateKernelVirtualPages(int)+0xfd>
c000968f:	85 ff                	test   edi,edi
c0009691:	74 41                	je     c00096d4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c0009693:	89 f0                	mov    eax,esi
c0009695:	31 db                	xor    ebx,ebx
c0009697:	8d 6f ff             	lea    ebp,[edi-0x1]
c000969a:	eb 16                	jmp    c00096b2 <Virt::allocateKernelVirtualPages(int)+0xbd>
c000969c:	6a 01                	push   0x1
c000969e:	83 c3 01             	add    ebx,0x1
c00096a1:	50                   	push   eax
c00096a2:	e8 f1 fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096a7:	39 fb                	cmp    ebx,edi
c00096a9:	58                   	pop    eax
c00096aa:	5a                   	pop    edx
c00096ab:	74 27                	je     c00096d4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00096ad:	a1 a4 31 02 c0       	mov    eax,ds:0xc00231a4
c00096b2:	8d 50 01             	lea    edx,[eax+0x1]
c00096b5:	85 db                	test   ebx,ebx
c00096b7:	89 15 a4 31 02 c0    	mov    DWORD PTR ds:0xc00231a4,edx
c00096bd:	74 22                	je     c00096e1 <Virt::allocateKernelVirtualPages(int)+0xec>
c00096bf:	39 dd                	cmp    ebp,ebx
c00096c1:	75 d9                	jne    c000969c <Virt::allocateKernelVirtualPages(int)+0xa7>
c00096c3:	6a 03                	push   0x3
c00096c5:	83 c3 01             	add    ebx,0x1
c00096c8:	50                   	push   eax
c00096c9:	e8 ca fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ce:	39 fb                	cmp    ebx,edi
c00096d0:	59                   	pop    ecx
c00096d1:	58                   	pop    eax
c00096d2:	75 d9                	jne    c00096ad <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096d4:	83 c4 1c             	add    esp,0x1c
c00096d7:	89 f0                	mov    eax,esi
c00096d9:	5b                   	pop    ebx
c00096da:	c1 e0 0c             	shl    eax,0xc
c00096dd:	5e                   	pop    esi
c00096de:	5f                   	pop    edi
c00096df:	5d                   	pop    ebp
c00096e0:	c3                   	ret    
c00096e1:	6a 02                	push   0x2
c00096e3:	bb 01 00 00 00       	mov    ebx,0x1
c00096e8:	50                   	push   eax
c00096e9:	e8 aa fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ee:	58                   	pop    eax
c00096ef:	5a                   	pop    edx
c00096f0:	eb bb                	jmp    c00096ad <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096f2:	6a 04                	push   0x4
c00096f4:	56                   	push   esi
c00096f5:	8d 46 01             	lea    eax,[esi+0x1]
c00096f8:	a3 a4 31 02 c0       	mov    ds:0xc00231a4,eax
c00096fd:	e8 96 fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009702:	89 f0                	mov    eax,esi
c0009704:	59                   	pop    ecx
c0009705:	c1 e0 0c             	shl    eax,0xc
c0009708:	5b                   	pop    ebx
c0009709:	83 c4 1c             	add    esp,0x1c
c000970c:	5b                   	pop    ebx
c000970d:	5e                   	pop    esi
c000970e:	5f                   	pop    edi
c000970f:	5d                   	pop    ebp
c0009710:	c3                   	ret    

c0009711 <Virt::freeSwapfilePage(unsigned long)>:
c0009711:	53                   	push   ebx
c0009712:	8b 15 ac 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fac
c0009718:	b8 01 00 00 00       	mov    eax,0x1
c000971d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009721:	d3 e0                	shl    eax,cl
c0009723:	89 cb                	mov    ebx,ecx
c0009725:	c1 eb 05             	shr    ebx,0x5
c0009728:	f7 d0                	not    eax
c000972a:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000972d:	21 c1                	and    ecx,eax
c000972f:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009732:	5b                   	pop    ebx
c0009733:	c3                   	ret    

c0009734 <Virt::swapIDToSector(unsigned long)>:
c0009734:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009738:	8b 15 ac 31 02 c0    	mov    edx,DWORD PTR ds:0xc00231ac
c000973e:	8b 0d b4 31 02 c0    	mov    ecx,DWORD PTR ds:0xc00231b4
c0009744:	0f af c2             	imul   eax,edx
c0009747:	01 c8                	add    eax,ecx
c0009749:	c3                   	ret    

c000974a <Virt::allocateSwapfilePage()>:
c000974a:	55                   	push   ebp
c000974b:	31 d2                	xor    edx,edx
c000974d:	57                   	push   edi
c000974e:	56                   	push   esi
c000974f:	53                   	push   ebx
c0009750:	83 ec 0c             	sub    esp,0xc
c0009753:	8b 1d b0 31 02 c0    	mov    ebx,DWORD PTR ds:0xc00231b0
c0009759:	8b 0d ac 31 02 c0    	mov    ecx,DWORD PTR ds:0xc00231ac
c000975f:	89 d8                	mov    eax,ebx
c0009761:	f7 f1                	div    ecx
c0009763:	39 cb                	cmp    ebx,ecx
c0009765:	72 2f                	jb     c0009796 <Virt::allocateSwapfilePage()+0x4c>
c0009767:	8b 35 ac 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fac
c000976d:	8b 16                	mov    edx,DWORD PTR [esi]
c000976f:	f6 c2 01             	test   dl,0x1
c0009772:	74 3e                	je     c00097b2 <Virt::allocateSwapfilePage()+0x68>
c0009774:	31 c9                	xor    ecx,ecx
c0009776:	bf 01 00 00 00       	mov    edi,0x1
c000977b:	eb 12                	jmp    c000978f <Virt::allocateSwapfilePage()+0x45>
c000977d:	89 ca                	mov    edx,ecx
c000977f:	89 fd                	mov    ebp,edi
c0009781:	c1 ea 05             	shr    edx,0x5
c0009784:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009787:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009789:	d3 e5                	shl    ebp,cl
c000978b:	85 ea                	test   edx,ebp
c000978d:	74 2c                	je     c00097bb <Virt::allocateSwapfilePage()+0x71>
c000978f:	83 c1 01             	add    ecx,0x1
c0009792:	39 c8                	cmp    eax,ecx
c0009794:	77 e7                	ja     c000977d <Virt::allocateSwapfilePage()+0x33>
c0009796:	83 ec 0c             	sub    esp,0xc
c0009799:	68 a0 0d 02 c0       	push   0xc0020da0
c000979e:	e8 66 7b 00 00       	call   c0011309 <KePanic(char const*)>
c00097a3:	83 c4 10             	add    esp,0x10
c00097a6:	31 c9                	xor    ecx,ecx
c00097a8:	83 c4 0c             	add    esp,0xc
c00097ab:	89 c8                	mov    eax,ecx
c00097ad:	5b                   	pop    ebx
c00097ae:	5e                   	pop    esi
c00097af:	5f                   	pop    edi
c00097b0:	5d                   	pop    ebp
c00097b1:	c3                   	ret    
c00097b2:	89 f3                	mov    ebx,esi
c00097b4:	bd 01 00 00 00       	mov    ebp,0x1
c00097b9:	31 c9                	xor    ecx,ecx
c00097bb:	09 ea                	or     edx,ebp
c00097bd:	89 c8                	mov    eax,ecx
c00097bf:	89 13                	mov    DWORD PTR [ebx],edx
c00097c1:	83 c4 0c             	add    esp,0xc
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <Virt::virtualMemorySetup()>:
c00097c9:	53                   	push   ebx
c00097ca:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097cf:	6a 0f                	push   0xf
c00097d1:	53                   	push   ebx
c00097d2:	83 c3 01             	add    ebx,0x1
c00097d5:	e8 be fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097da:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097e0:	58                   	pop    eax
c00097e1:	5a                   	pop    edx
c00097e2:	75 eb                	jne    c00097cf <Virt::virtualMemorySetup()+0x6>
c00097e4:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097e9:	6a 00                	push   0x0
c00097eb:	53                   	push   ebx
c00097ec:	83 c3 01             	add    ebx,0x1
c00097ef:	e8 a4 fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097f4:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097fa:	59                   	pop    ecx
c00097fb:	58                   	pop    eax
c00097fc:	75 eb                	jne    c00097e9 <Virt::virtualMemorySetup()+0x20>
c00097fe:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009803:	6a 0f                	push   0xf
c0009805:	53                   	push   ebx
c0009806:	83 c3 01             	add    ebx,0x1
c0009809:	e8 8a fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000980e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009814:	58                   	pop    eax
c0009815:	5a                   	pop    edx
c0009816:	75 eb                	jne    c0009803 <Virt::virtualMemorySetup()+0x3a>
c0009818:	5b                   	pop    ebx
c0009819:	c3                   	ret    

c000981a <Virt::setupPageSwapping(int)>:
c000981a:	53                   	push   ebx
c000981b:	83 ec 0c             	sub    esp,0xc
c000981e:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0009823:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009827:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000982d:	8b 10                	mov    edx,DWORD PTR [eax]
c000982f:	53                   	push   ebx
c0009830:	68 b7 0d 02 c0       	push   0xc0020db7
c0009835:	50                   	push   eax
c0009836:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0009839:	c1 e3 0b             	shl    ebx,0xb
c000983c:	89 1d b0 31 02 c0    	mov    DWORD PTR ds:0xc00231b0,ebx
c0009842:	c1 eb 08             	shr    ebx,0x8
c0009845:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009848:	c6 05 b8 31 02 c0 43 	mov    BYTE PTR ds:0xc00231b8,0x43
c000984f:	c7 05 ac 31 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc00231ac,0x8
c0009859:	a3 b4 31 02 c0       	mov    ds:0xc00231b4,eax
c000985e:	e8 70 e2 ff ff       	call   c0007ad3 <malloc>
c0009863:	31 d2                	xor    edx,edx
c0009865:	83 c4 0c             	add    esp,0xc
c0009868:	a3 ac 5f 02 c0       	mov    ds:0xc0025fac,eax
c000986d:	89 c1                	mov    ecx,eax
c000986f:	a1 b0 31 02 c0       	mov    eax,ds:0xc00231b0
c0009874:	f7 35 ac 31 02 c0    	div    DWORD PTR ds:0xc00231ac
c000987a:	c1 e8 05             	shr    eax,0x5
c000987d:	50                   	push   eax
c000987e:	6a 00                	push   0x0
c0009880:	51                   	push   ecx
c0009881:	e8 6a 6c ff ff       	call   c00004f0 <memset>
c0009886:	83 c4 18             	add    esp,0x18
c0009889:	5b                   	pop    ebx
c000988a:	c3                   	ret    
c000988b:	90                   	nop

c000988c <VAS::setCPUSpecific(unsigned long)>:
c000988c:	c3                   	ret    
c000988d:	90                   	nop

c000988e <VAS::VAS(VAS*)>:
c000988e:	83 ec 0c             	sub    esp,0xc
c0009891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009895:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000989c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098a0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098a7:	83 ec 0c             	sub    esp,0xc
c00098aa:	68 2c 0b 02 c0       	push   0xc0020b2c
c00098af:	e8 55 7a 00 00       	call   c0011309 <KePanic(char const*)>
c00098b4:	83 c4 10             	add    esp,0x10
c00098b7:	90                   	nop
c00098b8:	83 c4 0c             	add    esp,0xc
c00098bb:	c3                   	ret    

c00098bc <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098c0:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098c5:	89 c2                	mov    edx,eax
c00098c7:	c1 ea 16             	shr    edx,0x16
c00098ca:	c1 e8 0a             	shr    eax,0xa
c00098cd:	83 f9 01             	cmp    ecx,0x1
c00098d0:	19 c9                	sbb    ecx,ecx
c00098d2:	25 fc 0f 00 00       	and    eax,0xffc
c00098d7:	c1 e2 0c             	shl    edx,0xc
c00098da:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098e0:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00098e7:	01 d0                	add    eax,edx
c00098e9:	c3                   	ret    

c00098ea <VAS::getPageTableEntry(unsigned long)>:
c00098ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00098ee:	89 ca                	mov    edx,ecx
c00098f0:	c1 ea 16             	shr    edx,0x16
c00098f3:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00098f9:	c1 e9 0a             	shr    ecx,0xa
c00098fc:	c1 e0 0c             	shl    eax,0xc
c00098ff:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009905:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009908:	c3                   	ret    

c0009909 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009909:	55                   	push   ebp
c000990a:	57                   	push   edi
c000990b:	bf 01 00 00 00       	mov    edi,0x1
c0009910:	56                   	push   esi
c0009911:	53                   	push   ebx
c0009912:	83 ec 1c             	sub    esp,0x1c
c0009915:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009919:	c1 ee 0c             	shr    esi,0xc
c000991c:	eb 48                	jmp    c0009966 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c000991e:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c0009923:	83 ec 08             	sub    esp,0x8
c0009926:	55                   	push   ebp
c0009927:	50                   	push   eax
c0009928:	e8 bd ff ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000992d:	83 c4 10             	add    esp,0x10
c0009930:	8b 10                	mov    edx,DWORD PTR [eax]
c0009932:	f6 c6 04             	test   dh,0x4
c0009935:	75 70                	jne    c00099a7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009937:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000993d:	83 fb 04             	cmp    ebx,0x4
c0009940:	0f 84 8a 00 00 00    	je     c00099d0 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009946:	83 fb 02             	cmp    ebx,0x2
c0009949:	0f 84 9a 00 00 00    	je     c00099e9 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c000994f:	83 fb 03             	cmp    ebx,0x3
c0009952:	0f 84 be 00 00 00    	je     c0009a16 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0009958:	83 fb 01             	cmp    ebx,0x1
c000995b:	0f 84 a2 00 00 00    	je     c0009a03 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009961:	83 c6 01             	add    esi,0x1
c0009964:	31 ff                	xor    edi,edi
c0009966:	56                   	push   esi
c0009967:	89 f5                	mov    ebp,esi
c0009969:	e8 64 fc ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c000996e:	c1 e5 0c             	shl    ebp,0xc
c0009971:	5a                   	pop    edx
c0009972:	0f b6 d8             	movzx  ebx,al
c0009975:	85 db                	test   ebx,ebx
c0009977:	75 a5                	jne    c000991e <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0009979:	83 ec 0c             	sub    esp,0xc
c000997c:	68 ce 0d 02 c0       	push   0xc0020dce
c0009981:	e8 83 79 00 00       	call   c0011309 <KePanic(char const*)>
c0009986:	5a                   	pop    edx
c0009987:	59                   	pop    ecx
c0009988:	55                   	push   ebp
c0009989:	8b 2d b0 5f 02 c0    	mov    ebp,DWORD PTR ds:0xc0025fb0
c000998f:	55                   	push   ebp
c0009990:	e8 55 ff ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009995:	83 c4 10             	add    esp,0x10
c0009998:	8b 10                	mov    edx,DWORD PTR [eax]
c000999a:	f6 c6 04             	test   dh,0x4
c000999d:	75 08                	jne    c00099a7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c000999f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099a5:	eb ba                	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099ab:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099b1:	83 ec 0c             	sub    esp,0xc
c00099b4:	52                   	push   edx
c00099b5:	e8 bf e3 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c00099ba:	83 c4 10             	add    esp,0x10
c00099bd:	83 fb 04             	cmp    ebx,0x4
c00099c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099c4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ca:	0f 85 76 ff ff ff    	jne    c0009946 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099d0:	83 e7 01             	and    edi,0x1
c00099d3:	75 46                	jne    c0009a1b <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099d5:	c7 44 24 30 50 0b 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020b50
c00099dd:	83 c4 1c             	add    esp,0x1c
c00099e0:	5b                   	pop    ebx
c00099e1:	5e                   	pop    esi
c00099e2:	5f                   	pop    edi
c00099e3:	5d                   	pop    ebp
c00099e4:	e9 20 79 00 00       	jmp    c0011309 <KePanic(char const*)>
c00099e9:	83 e7 01             	and    edi,0x1
c00099ec:	75 15                	jne    c0009a03 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00099ee:	83 ec 0c             	sub    esp,0xc
c00099f1:	68 ea 0d 02 c0       	push   0xc0020dea
c00099f6:	e8 0e 79 00 00       	call   c0011309 <KePanic(char const*)>
c00099fb:	83 c4 10             	add    esp,0x10
c00099fe:	e9 5e ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a03:	83 ec 08             	sub    esp,0x8
c0009a06:	6a 00                	push   0x0
c0009a08:	56                   	push   esi
c0009a09:	e8 8a fb ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a0e:	83 c4 10             	add    esp,0x10
c0009a11:	e9 4b ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a16:	83 e7 01             	and    edi,0x1
c0009a19:	75 16                	jne    c0009a31 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a1b:	83 ec 08             	sub    esp,0x8
c0009a1e:	6a 00                	push   0x0
c0009a20:	56                   	push   esi
c0009a21:	e8 72 fb ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a26:	83 c4 10             	add    esp,0x10
c0009a29:	83 c4 1c             	add    esp,0x1c
c0009a2c:	5b                   	pop    ebx
c0009a2d:	5e                   	pop    esi
c0009a2e:	5f                   	pop    edi
c0009a2f:	5d                   	pop    ebp
c0009a30:	c3                   	ret    
c0009a31:	c7 44 24 30 06 0e 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020e06
c0009a39:	83 c4 1c             	add    esp,0x1c
c0009a3c:	5b                   	pop    ebx
c0009a3d:	5e                   	pop    esi
c0009a3e:	5f                   	pop    edi
c0009a3f:	5d                   	pop    ebp
c0009a40:	e9 c4 78 00 00       	jmp    c0011309 <KePanic(char const*)>
c0009a45:	90                   	nop

c0009a46 <VAS::freeAllocatedPages(unsigned long)>:
c0009a46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a4a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a4e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a52:	74 09                	je     c0009a5d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a54:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a58:	e9 ac fe ff ff       	jmp    c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a5d:	c7 44 24 04 74 0b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020b74
c0009a65:	e9 a0 0e 00 00       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>

c0009a6a <VAS::virtualToPhysical(unsigned long)>:
c0009a6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a6e:	50                   	push   eax
c0009a6f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a73:	52                   	push   edx
c0009a74:	e8 71 fe ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009a79:	59                   	pop    ecx
c0009a7a:	5a                   	pop    edx
c0009a7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a7d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a82:	c3                   	ret    
c0009a83:	90                   	nop

c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009a84:	55                   	push   ebp
c0009a85:	57                   	push   edi
c0009a86:	56                   	push   esi
c0009a87:	53                   	push   ebx
c0009a88:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a8c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009a90:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009a94:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009a98:	85 db                	test   ebx,ebx
c0009a9a:	7e 24                	jle    c0009ac0 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009a9c:	c1 e3 0c             	shl    ebx,0xc
c0009a9f:	01 f3                	add    ebx,esi
c0009aa1:	56                   	push   esi
c0009aa2:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aa8:	55                   	push   ebp
c0009aa9:	e8 3c fe ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009aae:	5a                   	pop    edx
c0009aaf:	59                   	pop    ecx
c0009ab0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ab2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ab6:	21 f9                	and    ecx,edi
c0009ab8:	09 d1                	or     ecx,edx
c0009aba:	39 f3                	cmp    ebx,esi
c0009abc:	89 08                	mov    DWORD PTR [eax],ecx
c0009abe:	75 e1                	jne    c0009aa1 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ac0:	5b                   	pop    ebx
c0009ac1:	5e                   	pop    esi
c0009ac2:	5f                   	pop    edi
c0009ac3:	5d                   	pop    ebp
c0009ac4:	c3                   	ret    
c0009ac5:	90                   	nop

c0009ac6 <VAS::VAS()>:
c0009ac6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ad1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ad5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009adc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae0:	a3 b0 5f 02 c0       	mov    ds:0xc0025fb0,eax
c0009ae5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae9:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009aed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af1:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009af4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af8:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009aff:	ba 7d 40 02 c0       	mov    edx,0xc002407d
c0009b04:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b09:	29 c2                	sub    edx,eax
c0009b0b:	89 d0                	mov    eax,edx
c0009b0d:	05 ff 0f 00 00       	add    eax,0xfff
c0009b12:	c1 e8 0c             	shr    eax,0xc
c0009b15:	89 c2                	mov    edx,eax
c0009b17:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b1c:	6a 04                	push   0x4
c0009b1e:	6a ff                	push   0xffffffff
c0009b20:	52                   	push   edx
c0009b21:	50                   	push   eax
c0009b22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b26:	e8 59 ff ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b2b:	83 c4 14             	add    esp,0x14
c0009b2e:	90                   	nop
c0009b2f:	c3                   	ret    

c0009b30 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b30:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009b35:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b3b:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b42:	75 01                	jne    c0009b45 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b44:	c3                   	ret    
c0009b45:	68 80 00 00 00       	push   0x80
c0009b4a:	6a ff                	push   0xffffffff
c0009b4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b50:	50                   	push   eax
c0009b51:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b55:	52                   	push   edx
c0009b56:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b5a:	51                   	push   ecx
c0009b5b:	e8 24 ff ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b60:	83 c4 14             	add    esp,0x14
c0009b63:	c3                   	ret    

c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b68:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b6f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b72:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b77:	83 f8 01             	cmp    eax,0x1
c0009b7a:	19 c0                	sbb    eax,eax
c0009b7c:	83 ca 03             	or     edx,0x3
c0009b7f:	83 e0 fc             	and    eax,0xfffffffc
c0009b82:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009b89:	0f 20 d8             	mov    eax,cr3
c0009b8c:	0f 22 d8             	mov    cr3,eax
c0009b8f:	c3                   	ret    

c0009b90 <VAS::~VAS()>:
c0009b90:	83 ec 2c             	sub    esp,0x2c
c0009b93:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009b9b:	fa                   	cli    
c0009b9c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009ba1:	83 c0 01             	add    eax,0x1
c0009ba4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0009ba9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bae:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bb0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bb3:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bb9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bbd:	6a 01                	push   0x1
c0009bbf:	50                   	push   eax
c0009bc0:	e8 9f ff ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c0009bc5:	83 c4 0c             	add    esp,0xc
c0009bc8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bd0:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bd8:	0f 8f d8 00 00 00    	jg     c0009cb6 <VAS::~VAS()+0x126>
c0009bde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009be2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009be5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009be9:	c1 e2 02             	shl    edx,0x2
c0009bec:	01 d0                	add    eax,edx
c0009bee:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bf0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bf8:	83 e0 01             	and    eax,0x1
c0009bfb:	0f 84 ab 00 00 00    	je     c0009cac <VAS::~VAS()+0x11c>
c0009c01:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c09:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c11:	7f 74                	jg     c0009c87 <VAS::~VAS()+0xf7>
c0009c13:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c17:	c1 e0 0a             	shl    eax,0xa
c0009c1a:	89 c2                	mov    edx,eax
c0009c1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c20:	01 d0                	add    eax,edx
c0009c22:	c1 e0 0c             	shl    eax,0xc
c0009c25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c29:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c30:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c33:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c3d:	6a 01                	push   0x1
c0009c3f:	50                   	push   eax
c0009c40:	e8 77 fc ff ff       	call   c00098bc <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c45:	83 c4 0c             	add    esp,0xc
c0009c48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c5a:	25 01 04 00 00       	and    eax,0x401
c0009c5f:	3d 01 04 00 00       	cmp    eax,0x401
c0009c64:	75 1a                	jne    c0009c80 <VAS::~VAS()+0xf0>
c0009c66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c6a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c6f:	83 ec 0c             	sub    esp,0xc
c0009c72:	50                   	push   eax
c0009c73:	e8 01 e1 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009c78:	83 c4 10             	add    esp,0x10
c0009c7b:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c80:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009c85:	eb 82                	jmp    c0009c09 <VAS::~VAS()+0x79>
c0009c87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c8b:	25 00 04 00 00       	and    eax,0x400
c0009c90:	74 1a                	je     c0009cac <VAS::~VAS()+0x11c>
c0009c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c96:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c9b:	83 ec 0c             	sub    esp,0xc
c0009c9e:	50                   	push   eax
c0009c9f:	e8 d5 e0 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009ca4:	83 c4 10             	add    esp,0x10
c0009ca7:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cac:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cb1:	e9 1a ff ff ff       	jmp    c0009bd0 <VAS::~VAS()+0x40>
c0009cb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cbd:	83 ec 0c             	sub    esp,0xc
c0009cc0:	50                   	push   eax
c0009cc1:	e8 43 fc ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ccd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cd0:	83 ec 0c             	sub    esp,0xc
c0009cd3:	50                   	push   eax
c0009cd4:	e8 a0 e0 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009cd9:	83 c4 10             	add    esp,0x10
c0009cdc:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ce1:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009ce6:	83 e8 01             	sub    eax,0x1
c0009ce9:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0009cee:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009cf3:	85 c0                	test   eax,eax
c0009cf5:	75 01                	jne    c0009cf8 <VAS::~VAS()+0x168>
c0009cf7:	fb                   	sti    
c0009cf8:	90                   	nop
c0009cf9:	83 c4 2c             	add    esp,0x2c
c0009cfc:	c3                   	ret    
c0009cfd:	90                   	nop

c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009cfe:	55                   	push   ebp
c0009cff:	57                   	push   edi
c0009d00:	56                   	push   esi
c0009d01:	53                   	push   ebx
c0009d02:	83 ec 1c             	sub    esp,0x1c
c0009d05:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d09:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009d0d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009d11:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d17:	77 08                	ja     c0009d21 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c0009d19:	0f 20 d8             	mov    eax,cr3
c0009d1c:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0009d1f:	75 43                	jne    c0009d64 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0009d21:	89 d8                	mov    eax,ebx
c0009d23:	09 f8                	or     eax,edi
c0009d25:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d2a:	75 53                	jne    c0009d7f <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c0009d2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009d2f:	89 de                	mov    esi,ebx
c0009d31:	c1 ee 16             	shr    esi,0x16
c0009d34:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d3b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d3f:	74 50                	je     c0009d91 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c0009d41:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d45:	c1 eb 0a             	shr    ebx,0xa
c0009d48:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d4e:	c1 e6 0c             	shl    esi,0xc
c0009d51:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d57:	09 c7                	or     edi,eax
c0009d59:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0009d5c:	83 c4 1c             	add    esp,0x1c
c0009d5f:	5b                   	pop    ebx
c0009d60:	5e                   	pop    esi
c0009d61:	5f                   	pop    edi
c0009d62:	5d                   	pop    ebp
c0009d63:	c3                   	ret    
c0009d64:	83 ec 0c             	sub    esp,0xc
c0009d67:	68 98 0b 02 c0       	push   0xc0020b98
c0009d6c:	e8 99 0b 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0009d71:	89 d8                	mov    eax,ebx
c0009d73:	83 c4 10             	add    esp,0x10
c0009d76:	09 f8                	or     eax,edi
c0009d78:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d7d:	74 ad                	je     c0009d2c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d7f:	83 ec 0c             	sub    esp,0xc
c0009d82:	68 00 0c 02 c0       	push   0xc0020c00
c0009d87:	e8 7d 75 00 00       	call   c0011309 <KePanic(char const*)>
c0009d8c:	83 c4 10             	add    esp,0x10
c0009d8f:	eb 9b                	jmp    c0009d2c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d95:	e8 48 e0 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009d9a:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c0009da0:	83 ec 0c             	sub    esp,0xc
c0009da3:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009dab:	6a 01                	push   0x1
c0009dad:	e8 43 f8 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0009db2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009db9:	6a 01                	push   0x1
c0009dbb:	50                   	push   eax
c0009dbc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009dc0:	52                   	push   edx
c0009dc1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009dc5:	51                   	push   ecx
c0009dc6:	e8 3d 01 00 00       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009dcb:	83 c4 1c             	add    esp,0x1c
c0009dce:	68 00 10 00 00       	push   0x1000
c0009dd3:	6a 00                	push   0x0
c0009dd5:	50                   	push   eax
c0009dd6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dda:	e8 11 67 ff ff       	call   c00004f0 <memset>
c0009ddf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009de3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009de6:	e8 1e fb ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009deb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009def:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009df3:	83 c4 10             	add    esp,0x10
c0009df6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0009df9:	0d 07 04 00 00       	or     eax,0x407
c0009dfe:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0009e01:	e9 3b ff ff ff       	jmp    c0009d41 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c0009e06 <VAS::allocatePages(int, int)>:
c0009e06:	55                   	push   ebp
c0009e07:	57                   	push   edi
c0009e08:	56                   	push   esi
c0009e09:	53                   	push   ebx
c0009e0a:	83 ec 1c             	sub    esp,0x1c
c0009e0d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e11:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e15:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e19:	75 75                	jne    c0009e90 <VAS::allocatePages(int, int)+0x8a>
c0009e1b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e22:	85 c0                	test   eax,eax
c0009e24:	74 49                	je     c0009e6f <VAS::allocatePages(int, int)+0x69>
c0009e26:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e2a:	89 d5                	mov    ebp,edx
c0009e2c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e30:	c1 e5 0c             	shl    ebp,0xc
c0009e33:	01 dd                	add    ebp,ebx
c0009e35:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e38:	81 cf 00 04 00 00    	or     edi,0x400
c0009e3e:	85 d2                	test   edx,edx
c0009e40:	7e 1b                	jle    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009e42:	e8 9b df ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009e47:	57                   	push   edi
c0009e48:	53                   	push   ebx
c0009e49:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e4f:	50                   	push   eax
c0009e50:	56                   	push   esi
c0009e51:	e8 a8 fe ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e56:	83 c4 10             	add    esp,0x10
c0009e59:	39 dd                	cmp    ebp,ebx
c0009e5b:	75 e5                	jne    c0009e42 <VAS::allocatePages(int, int)+0x3c>
c0009e5d:	0f 20 d8             	mov    eax,cr3
c0009e60:	0f 22 d8             	mov    cr3,eax
c0009e63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e67:	83 c4 1c             	add    esp,0x1c
c0009e6a:	5b                   	pop    ebx
c0009e6b:	5e                   	pop    esi
c0009e6c:	5f                   	pop    edi
c0009e6d:	5d                   	pop    ebp
c0009e6e:	c3                   	ret    
c0009e6f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e73:	83 ec 0c             	sub    esp,0xc
c0009e76:	68 24 0c 02 c0       	push   0xc0020c24
c0009e7b:	e8 89 74 00 00       	call   c0011309 <KePanic(char const*)>
c0009e80:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e83:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009e87:	83 c4 10             	add    esp,0x10
c0009e8a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e8e:	eb 96                	jmp    c0009e26 <VAS::allocatePages(int, int)+0x20>
c0009e90:	83 ec 0c             	sub    esp,0xc
c0009e93:	52                   	push   edx
c0009e94:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009e98:	e8 58 f7 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0009e9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea1:	83 c4 10             	add    esp,0x10
c0009ea4:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ea9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009ead:	77 38                	ja     c0009ee7 <VAS::allocatePages(int, int)+0xe1>
c0009eaf:	85 d2                	test   edx,edx
c0009eb1:	7e aa                	jle    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009eb3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009eb7:	c1 e2 0c             	shl    edx,0xc
c0009eba:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009ebe:	81 cf 00 04 00 00    	or     edi,0x400
c0009ec4:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c0009ec7:	e8 16 df ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009ecc:	57                   	push   edi
c0009ecd:	53                   	push   ebx
c0009ece:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ed4:	50                   	push   eax
c0009ed5:	56                   	push   esi
c0009ed6:	e8 23 fe ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009edb:	83 c4 10             	add    esp,0x10
c0009ede:	39 dd                	cmp    ebp,ebx
c0009ee0:	75 e5                	jne    c0009ec7 <VAS::allocatePages(int, int)+0xc1>
c0009ee2:	e9 76 ff ff ff       	jmp    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009ee7:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009eec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ef2:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009ef9:	74 b4                	je     c0009eaf <VAS::allocatePages(int, int)+0xa9>
c0009efb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009eff:	80 cc 01             	or     ah,0x1
c0009f02:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f06:	eb a7                	jmp    c0009eaf <VAS::allocatePages(int, int)+0xa9>

c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f08:	55                   	push   ebp
c0009f09:	57                   	push   edi
c0009f0a:	56                   	push   esi
c0009f0b:	53                   	push   ebx
c0009f0c:	83 ec 1c             	sub    esp,0x1c
c0009f0f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009f13:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009f17:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009f1b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009f1f:	85 db                	test   ebx,ebx
c0009f21:	7e 2c                	jle    c0009f4f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c0009f23:	c1 e3 0c             	shl    ebx,0xc
c0009f26:	8d 04 33             	lea    eax,[ebx+esi*1]
c0009f29:	89 f3                	mov    ebx,esi
c0009f2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009f2f:	55                   	push   ebp
c0009f30:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0009f34:	29 f2                	sub    edx,esi
c0009f36:	01 da                	add    edx,ebx
c0009f38:	52                   	push   edx
c0009f39:	53                   	push   ebx
c0009f3a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f40:	57                   	push   edi
c0009f41:	e8 b8 fd ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f46:	83 c4 10             	add    esp,0x10
c0009f49:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0009f4d:	75 e0                	jne    c0009f2f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c0009f4f:	0f 20 d8             	mov    eax,cr3
c0009f52:	0f 22 d8             	mov    cr3,eax
c0009f55:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009f59:	83 c4 1c             	add    esp,0x1c
c0009f5c:	5b                   	pop    ebx
c0009f5d:	5e                   	pop    esi
c0009f5e:	5f                   	pop    edi
c0009f5f:	5d                   	pop    ebp
c0009f60:	c3                   	ret    
c0009f61:	90                   	nop

c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f62:	55                   	push   ebp
c0009f63:	57                   	push   edi
c0009f64:	56                   	push   esi
c0009f65:	53                   	push   ebx
c0009f66:	83 ec 1c             	sub    esp,0x1c
c0009f69:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f6d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f71:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009f75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f79:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009f7d:	09 d8                	or     eax,ebx
c0009f7f:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f84:	75 4b                	jne    c0009fd1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f86:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009f89:	89 de                	mov    esi,ebx
c0009f8b:	c1 ee 16             	shr    esi,0x16
c0009f8e:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0009f95:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0009f99:	74 48                	je     c0009fe3 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0009f9b:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0009fa0:	c1 eb 0a             	shr    ebx,0xa
c0009fa3:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0009fa7:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0009fab:	83 ff 01             	cmp    edi,0x1
c0009fae:	19 c0                	sbb    eax,eax
c0009fb0:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009fb6:	c1 e6 0c             	shl    esi,0xc
c0009fb9:	25 00 00 c0 ff       	and    eax,0xffc00000
c0009fbe:	01 f3                	add    ebx,esi
c0009fc0:	09 ca                	or     edx,ecx
c0009fc2:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0009fc9:	83 c4 1c             	add    esp,0x1c
c0009fcc:	5b                   	pop    ebx
c0009fcd:	5e                   	pop    esi
c0009fce:	5f                   	pop    edi
c0009fcf:	5d                   	pop    ebp
c0009fd0:	c3                   	ret    
c0009fd1:	83 ec 0c             	sub    esp,0xc
c0009fd4:	68 50 0c 02 c0       	push   0xc0020c50
c0009fd9:	e8 2b 73 00 00       	call   c0011309 <KePanic(char const*)>
c0009fde:	83 c4 10             	add    esp,0x10
c0009fe1:	eb a3                	jmp    c0009f86 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c0009fe3:	e8 fa dd ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009fe8:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c0009fee:	83 ec 0c             	sub    esp,0xc
c0009ff1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009ff5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0009ff9:	6a 01                	push   0x1
c0009ffb:	e8 f5 f5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a000:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a007:	6a 01                	push   0x1
c000a009:	50                   	push   eax
c000a00a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a00e:	50                   	push   eax
c000a00f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a013:	51                   	push   ecx
c000a014:	e8 ef fe ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a019:	83 c4 1c             	add    esp,0x1c
c000a01c:	68 00 10 00 00       	push   0x1000
c000a021:	6a 00                	push   0x0
c000a023:	50                   	push   eax
c000a024:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a028:	e8 c3 64 ff ff       	call   c00004f0 <memset>
c000a02d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a031:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a034:	e8 d0 f8 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000a039:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a03d:	83 c4 10             	add    esp,0x10
c000a040:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a043:	81 ca 07 04 00 00    	or     edx,0x407
c000a049:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c000a04c:	e9 4a ff ff ff       	jmp    c0009f9b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c000a051:	90                   	nop

c000a052 <VAS::VAS(bool)>:
c000a052:	53                   	push   ebx
c000a053:	83 ec 28             	sub    esp,0x28
c000a056:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a05a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a05e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a062:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a069:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a06d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a078:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a07c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a07f:	e8 5e dd ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a084:	89 c2                	mov    edx,eax
c000a086:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a08d:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000a093:	83 ec 0c             	sub    esp,0xc
c000a096:	6a 01                	push   0x1
c000a098:	e8 58 f5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a09d:	83 c4 10             	add    esp,0x10
c000a0a0:	89 c2                	mov    edx,eax
c000a0a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0a9:	83 ec 0c             	sub    esp,0xc
c000a0ac:	6a 03                	push   0x3
c000a0ae:	6a 01                	push   0x1
c000a0b0:	52                   	push   edx
c000a0b1:	50                   	push   eax
c000a0b2:	53                   	push   ebx
c000a0b3:	e8 50 fe ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0b8:	83 c4 20             	add    esp,0x20
c000a0bb:	89 c2                	mov    edx,eax
c000a0bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0c1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0c4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0cc:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0d4:	7f 1d                	jg     c000a0f3 <VAS::VAS(bool)+0xa1>
c000a0d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0e1:	c1 e2 02             	shl    edx,0x2
c000a0e4:	01 d0                	add    eax,edx
c000a0e6:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a0ec:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a0f1:	eb d9                	jmp    c000a0cc <VAS::VAS(bool)+0x7a>
c000a0f3:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a0fb:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a103:	7f 7e                	jg     c000a183 <VAS::VAS(bool)+0x131>
c000a105:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a109:	2d 00 02 00 00       	sub    eax,0x200
c000a10e:	c1 e0 0c             	shl    eax,0xc
c000a111:	83 c8 05             	or     eax,0x5
c000a114:	89 c2                	mov    edx,eax
c000a116:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a11b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a121:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a127:	83 e0 10             	and    eax,0x10
c000a12a:	0f b6 c0             	movzx  eax,al
c000a12d:	85 c0                	test   eax,eax
c000a12f:	74 07                	je     c000a138 <VAS::VAS(bool)+0xe6>
c000a131:	b8 00 01 00 00       	mov    eax,0x100
c000a136:	eb 05                	jmp    c000a13d <VAS::VAS(bool)+0xeb>
c000a138:	b8 00 00 00 00       	mov    eax,0x0
c000a13d:	09 d0                	or     eax,edx
c000a13f:	89 c1                	mov    ecx,eax
c000a141:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a145:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a148:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a14c:	c1 e2 02             	shl    edx,0x2
c000a14f:	01 d0                	add    eax,edx
c000a151:	89 ca                	mov    edx,ecx
c000a153:	89 10                	mov    DWORD PTR [eax],edx
c000a155:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a159:	2d 40 03 00 00       	sub    eax,0x340
c000a15e:	83 f8 7f             	cmp    eax,0x7f
c000a161:	77 16                	ja     c000a179 <VAS::VAS(bool)+0x127>
c000a163:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a167:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a16a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a16e:	c1 e2 02             	shl    edx,0x2
c000a171:	01 d0                	add    eax,edx
c000a173:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a179:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a17e:	e9 78 ff ff ff       	jmp    c000a0fb <VAS::VAS(bool)+0xa9>
c000a183:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a188:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a18e:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a194:	83 e0 10             	and    eax,0x10
c000a197:	0f b6 c0             	movzx  eax,al
c000a19a:	85 c0                	test   eax,eax
c000a19c:	74 07                	je     c000a1a5 <VAS::VAS(bool)+0x153>
c000a19e:	b8 03 41 00 00       	mov    eax,0x4103
c000a1a3:	eb 05                	jmp    c000a1aa <VAS::VAS(bool)+0x158>
c000a1a5:	b8 03 40 00 00       	mov    eax,0x4003
c000a1aa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1ae:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1b1:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1b7:	89 02                	mov    DWORD PTR [edx],eax
c000a1b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1bd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1c0:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a1c5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1cb:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1d1:	83 e0 10             	and    eax,0x10
c000a1d4:	0f b6 c0             	movzx  eax,al
c000a1d7:	85 c0                	test   eax,eax
c000a1d9:	74 07                	je     c000a1e2 <VAS::VAS(bool)+0x190>
c000a1db:	b8 00 01 00 00       	mov    eax,0x100
c000a1e0:	eb 05                	jmp    c000a1e7 <VAS::VAS(bool)+0x195>
c000a1e2:	b8 00 00 00 00       	mov    eax,0x0
c000a1e7:	09 c2                	or     edx,eax
c000a1e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1ed:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a1f0:	05 fc 0f 00 00       	add    eax,0xffc
c000a1f5:	83 ca 03             	or     edx,0x3
c000a1f8:	89 10                	mov    DWORD PTR [eax],edx
c000a1fa:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a1ff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a205:	83 ec 0c             	sub    esp,0xc
c000a208:	50                   	push   eax
c000a209:	e8 f2 27 00 00       	call   c000ca00 <Device::getName()>
c000a20e:	83 c4 10             	add    esp,0x10
c000a211:	83 ec 08             	sub    esp,0x8
c000a214:	68 20 0e 02 c0       	push   0xc0020e20
c000a219:	50                   	push   eax
c000a21a:	e8 61 65 ff ff       	call   c0000780 <strcmp>
c000a21f:	83 c4 10             	add    esp,0x10
c000a222:	85 c0                	test   eax,eax
c000a224:	0f 94 c0             	sete   al
c000a227:	0f b6 c0             	movzx  eax,al
c000a22a:	85 c0                	test   eax,eax
c000a22c:	74 68                	je     c000a296 <VAS::VAS(bool)+0x244>
c000a22e:	fa                   	cli    
c000a22f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a234:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a23a:	05 7c 09 00 00       	add    eax,0x97c
c000a23f:	83 ec 0c             	sub    esp,0xc
c000a242:	50                   	push   eax
c000a243:	e8 86 d3 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a248:	83 c4 10             	add    esp,0x10
c000a24b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a250:	89 c3                	mov    ebx,eax
c000a252:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a257:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a25d:	05 7c 09 00 00       	add    eax,0x97c
c000a262:	83 ec 0c             	sub    esp,0xc
c000a265:	50                   	push   eax
c000a266:	e8 63 d3 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a26b:	83 c4 10             	add    esp,0x10
c000a26e:	83 ec 08             	sub    esp,0x8
c000a271:	50                   	push   eax
c000a272:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a276:	e8 6f f6 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a27b:	83 c4 10             	add    esp,0x10
c000a27e:	8b 00                	mov    eax,DWORD PTR [eax]
c000a280:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a285:	6a 11                	push   0x11
c000a287:	53                   	push   ebx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28d:	e8 6c fa ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a292:	83 c4 10             	add    esp,0x10
c000a295:	fb                   	sti    
c000a296:	90                   	nop
c000a297:	83 c4 28             	add    esp,0x28
c000a29a:	5b                   	pop    ebx
c000a29b:	c3                   	ret    

c000a29c <VAS::evict(unsigned long)>:
c000a29c:	55                   	push   ebp
c000a29d:	57                   	push   edi
c000a29e:	56                   	push   esi
c000a29f:	53                   	push   ebx
c000a2a0:	83 ec 1c             	sub    esp,0x1c
c000a2a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2a7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2af:	e8 96 f4 ff ff       	call   c000974a <Virt::allocateSwapfilePage()>
c000a2b4:	89 c7                	mov    edi,eax
c000a2b6:	a1 ac 31 02 c0       	mov    eax,ds:0xc00231ac
c000a2bb:	85 c0                	test   eax,eax
c000a2bd:	7e 40                	jle    c000a2ff <VAS::evict(unsigned long)+0x63>
c000a2bf:	89 ee                	mov    esi,ebp
c000a2c1:	31 db                	xor    ebx,ebx
c000a2c3:	83 ec 0c             	sub    esp,0xc
c000a2c6:	57                   	push   edi
c000a2c7:	e8 68 f4 ff ff       	call   c0009734 <Virt::swapIDToSector(unsigned long)>
c000a2cc:	31 d2                	xor    edx,edx
c000a2ce:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2d1:	81 c6 00 02 00 00    	add    esi,0x200
c000a2d7:	6a 01                	push   0x1
c000a2d9:	52                   	push   edx
c000a2da:	01 d8                	add    eax,ebx
c000a2dc:	83 c3 01             	add    ebx,0x1
c000a2df:	50                   	push   eax
c000a2e0:	0f be 05 b8 31 02 c0 	movsx  eax,BYTE PTR ds:0xc00231b8
c000a2e7:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c000a2ee:	50                   	push   eax
c000a2ef:	e8 ce 38 00 00       	call   c000dbc2 <LogicalDisk::write(unsigned long long, int, void*)>
c000a2f4:	83 c4 20             	add    esp,0x20
c000a2f7:	39 1d ac 31 02 c0    	cmp    DWORD PTR ds:0xc00231ac,ebx
c000a2fd:	7f c4                	jg     c000a2c3 <VAS::evict(unsigned long)+0x27>
c000a2ff:	c1 e7 0c             	shl    edi,0xc
c000a302:	83 ec 08             	sub    esp,0x8
c000a305:	55                   	push   ebp
c000a306:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a30a:	50                   	push   eax
c000a30b:	e8 da f5 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a310:	8b 10                	mov    edx,DWORD PTR [eax]
c000a312:	89 d3                	mov    ebx,edx
c000a314:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a31a:	09 d7                	or     edi,edx
c000a31c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a322:	89 38                	mov    DWORD PTR [eax],edi
c000a324:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a327:	8b 15 a8 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fa8
c000a32d:	83 c2 01             	add    edx,0x1
c000a330:	89 15 a8 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa8,edx
c000a336:	e8 3e da ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c000a33b:	0f 20 d8             	mov    eax,cr3
c000a33e:	0f 22 d8             	mov    cr3,eax
c000a341:	8b 0d a8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fa8
c000a347:	51                   	push   ecx
c000a348:	55                   	push   ebp
c000a349:	53                   	push   ebx
c000a34a:	68 74 0c 02 c0       	push   0xc0020c74
c000a34f:	e8 b6 05 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a354:	a1 a4 5f 02 c0       	mov    eax,ds:0xc0025fa4
c000a359:	c7 44 24 50 2e 0e 02 c0 	mov    DWORD PTR [esp+0x50],0xc0020e2e
c000a361:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a365:	8d 50 01             	lea    edx,[eax+0x1]
c000a368:	89 15 a4 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa4,edx
c000a36e:	83 c4 3c             	add    esp,0x3c
c000a371:	5b                   	pop    ebx
c000a372:	5e                   	pop    esi
c000a373:	5f                   	pop    edi
c000a374:	5d                   	pop    ebp
c000a375:	e9 90 05 00 00       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>

c000a37a <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a37a:	55                   	push   ebp
c000a37b:	57                   	push   edi
c000a37c:	56                   	push   esi
c000a37d:	53                   	push   ebx
c000a37e:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a384:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c000a38b:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c000a391:	77 78                	ja     c000a40b <VAS::tryLoadBackOffDisk(unsigned long)+0x91>
c000a393:	83 ec 08             	sub    esp,0x8
c000a396:	53                   	push   ebx
c000a397:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a39d:	68 51 0e 02 c0       	push   0xc0020e51
c000a3a2:	e8 63 05 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a3a7:	58                   	pop    eax
c000a3a8:	5a                   	pop    edx
c000a3a9:	53                   	push   ebx
c000a3aa:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3b1:	51                   	push   ecx
c000a3b2:	e8 33 f5 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a3b7:	83 c4 10             	add    esp,0x10
c000a3ba:	85 c0                	test   eax,eax
c000a3bc:	89 c5                	mov    ebp,eax
c000a3be:	0f 95 c0             	setne  al
c000a3c1:	85 db                	test   ebx,ebx
c000a3c3:	0f 95 c2             	setne  dl
c000a3c6:	21 d0                	and    eax,edx
c000a3c8:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a3cc:	a8 01                	test   al,0x1
c000a3ce:	75 0f                	jne    c000a3df <VAS::tryLoadBackOffDisk(unsigned long)+0x65>
c000a3d0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a3d4:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3da:	5b                   	pop    ebx
c000a3db:	5e                   	pop    esi
c000a3dc:	5f                   	pop    edi
c000a3dd:	5d                   	pop    ebp
c000a3de:	c3                   	ret    
c000a3df:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a3e2:	f6 c4 02             	test   ah,0x2
c000a3e5:	75 39                	jne    c000a420 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c000a3e7:	89 c2                	mov    edx,eax
c000a3e9:	81 e2 01 04 00 00    	and    edx,0x401
c000a3ef:	81 fa 00 04 00 00    	cmp    edx,0x400
c000a3f5:	74 73                	je     c000a46a <VAS::tryLoadBackOffDisk(unsigned long)+0xf0>
c000a3f7:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c000a3fc:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a400:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a406:	5b                   	pop    ebx
c000a407:	5e                   	pop    esi
c000a408:	5f                   	pop    edi
c000a409:	5d                   	pop    ebp
c000a40a:	c3                   	ret    
c000a40b:	83 ec 0c             	sub    esp,0xc
c000a40e:	68 3f 0e 02 c0       	push   0xc0020e3f
c000a413:	e8 f1 6e 00 00       	call   c0011309 <KePanic(char const*)>
c000a418:	83 c4 10             	add    esp,0x10
c000a41b:	e9 73 ff ff ff       	jmp    c000a393 <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c000a420:	83 ec 0c             	sub    esp,0xc
c000a423:	89 de                	mov    esi,ebx
c000a425:	68 a4 0c 02 c0       	push   0xc0020ca4
c000a42a:	e8 db 04 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a42f:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a433:	e8 aa d9 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a438:	ba 00 10 00 00       	mov    edx,0x1000
c000a43d:	89 d1                	mov    ecx,edx
c000a43f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a441:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000a444:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a44a:	09 c8                	or     eax,ecx
c000a44c:	83 c8 02             	or     eax,0x2
c000a44f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000a452:	0f 20 d8             	mov    eax,cr3
c000a455:	0f 22 d8             	mov    cr3,eax
c000a458:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a45c:	89 df                	mov    edi,ebx
c000a45e:	89 d1                	mov    ecx,edx
c000a460:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a462:	83 c4 10             	add    esp,0x10
c000a465:	e9 66 ff ff ff       	jmp    c000a3d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c000a46a:	c1 e8 0c             	shr    eax,0xc
c000a46d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a471:	e8 6c d9 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a476:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000a479:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a47f:	09 c2                	or     edx,eax
c000a481:	81 ca 01 08 00 00    	or     edx,0x801
c000a487:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c000a48a:	a1 ac 31 02 c0       	mov    eax,ds:0xc00231ac
c000a48f:	85 c0                	test   eax,eax
c000a491:	7e 44                	jle    c000a4d7 <VAS::tryLoadBackOffDisk(unsigned long)+0x15d>
c000a493:	89 df                	mov    edi,ebx
c000a495:	31 f6                	xor    esi,esi
c000a497:	83 ec 0c             	sub    esp,0xc
c000a49a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a49e:	51                   	push   ecx
c000a49f:	e8 90 f2 ff ff       	call   c0009734 <Virt::swapIDToSector(unsigned long)>
c000a4a4:	31 d2                	xor    edx,edx
c000a4a6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a4a9:	81 c7 00 02 00 00    	add    edi,0x200
c000a4af:	6a 01                	push   0x1
c000a4b1:	52                   	push   edx
c000a4b2:	01 f0                	add    eax,esi
c000a4b4:	83 c6 01             	add    esi,0x1
c000a4b7:	50                   	push   eax
c000a4b8:	0f be 05 b8 31 02 c0 	movsx  eax,BYTE PTR ds:0xc00231b8
c000a4bf:	8b 2c 85 7c 87 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd7884]
c000a4c6:	55                   	push   ebp
c000a4c7:	e8 8a 36 00 00       	call   c000db56 <LogicalDisk::read(unsigned long long, int, void*)>
c000a4cc:	83 c4 20             	add    esp,0x20
c000a4cf:	39 35 ac 31 02 c0    	cmp    DWORD PTR ds:0xc00231ac,esi
c000a4d5:	7f c0                	jg     c000a497 <VAS::tryLoadBackOffDisk(unsigned long)+0x11d>
c000a4d7:	a1 a8 5f 02 c0       	mov    eax,ds:0xc0025fa8
c000a4dc:	83 ec 04             	sub    esp,0x4
c000a4df:	83 e8 01             	sub    eax,0x1
c000a4e2:	50                   	push   eax
c000a4e3:	53                   	push   ebx
c000a4e4:	68 64 0e 02 c0       	push   0xc0020e64
c000a4e9:	a3 a8 5f 02 c0       	mov    ds:0xc0025fa8,eax
c000a4ee:	e8 17 04 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a4f3:	58                   	pop    eax
c000a4f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a4f8:	52                   	push   edx
c000a4f9:	e8 13 f2 ff ff       	call   c0009711 <Virt::freeSwapfilePage(unsigned long)>
c000a4fe:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000a503:	83 c4 10             	add    esp,0x10
c000a506:	83 e8 01             	sub    eax,0x1
c000a509:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000a50e:	85 c0                	test   eax,eax
c000a510:	75 01                	jne    c000a513 <VAS::tryLoadBackOffDisk(unsigned long)+0x199>
c000a512:	fb                   	sti    
c000a513:	0f 20 d8             	mov    eax,cr3
c000a516:	0f 22 d8             	mov    cr3,eax
c000a519:	e9 b2 fe ff ff       	jmp    c000a3d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>

c000a51e <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a51e:	55                   	push   ebp
c000a51f:	57                   	push   edi
c000a520:	56                   	push   esi
c000a521:	53                   	push   ebx
c000a522:	83 ec 28             	sub    esp,0x28
c000a525:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a529:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a52d:	50                   	push   eax
c000a52e:	e8 c2 f0 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a533:	83 c4 0c             	add    esp,0xc
c000a536:	6a 07                	push   0x7
c000a538:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a53c:	52                   	push   edx
c000a53d:	89 c5                	mov    ebp,eax
c000a53f:	53                   	push   ebx
c000a540:	e8 c1 f8 ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c000a545:	83 c4 10             	add    esp,0x10
c000a548:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a54c:	89 c7                	mov    edi,eax
c000a54e:	85 c9                	test   ecx,ecx
c000a550:	74 2f                	je     c000a581 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a552:	31 f6                	xor    esi,esi
c000a554:	e8 89 d8 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a559:	83 c6 01             	add    esi,0x1
c000a55c:	6a 03                	push   0x3
c000a55e:	55                   	push   ebp
c000a55f:	50                   	push   eax
c000a560:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a564:	53                   	push   ebx
c000a565:	e8 94 f7 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a56a:	6a 07                	push   0x7
c000a56c:	57                   	push   edi
c000a56d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a571:	50                   	push   eax
c000a572:	53                   	push   ebx
c000a573:	e8 86 f7 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a578:	83 c4 20             	add    esp,0x20
c000a57b:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c000a57f:	75 d3                	jne    c000a554 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a581:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a585:	89 28                	mov    DWORD PTR [eax],ebp
c000a587:	83 c4 1c             	add    esp,0x1c
c000a58a:	89 f8                	mov    eax,edi
c000a58c:	5b                   	pop    ebx
c000a58d:	5e                   	pop    esi
c000a58e:	5f                   	pop    edi
c000a58f:	5d                   	pop    ebp
c000a590:	c3                   	ret    
c000a591:	90                   	nop

c000a592 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a592:	53                   	push   ebx
c000a593:	83 ec 14             	sub    esp,0x14
c000a596:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a59a:	68 c4 0c 02 c0       	push   0xc0020cc4
c000a59f:	e8 66 03 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a5a4:	c7 04 24 24 0d 02 c0 	mov    DWORD PTR [esp],0xc0020d24
c000a5ab:	e8 5a 03 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a5b0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5b4:	83 c4 18             	add    esp,0x18
c000a5b7:	5b                   	pop    ebx
c000a5b8:	e9 4c f3 ff ff       	jmp    c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000a5bd:	90                   	nop

c000a5be <VAS::scanForEviction()>:
c000a5be:	57                   	push   edi
c000a5bf:	56                   	push   esi
c000a5c0:	31 f6                	xor    esi,esi
c000a5c2:	53                   	push   ebx
c000a5c3:	83 ec 10             	sub    esp,0x10
c000a5c6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5ca:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5cd:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5d3:	75 0e                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a5d5:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5d8:	89 da                	mov    edx,ebx
c000a5da:	c1 ea 16             	shr    edx,0x16
c000a5dd:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5e1:	74 57                	je     c000a63a <VAS::scanForEviction()+0x7c>
c000a5e3:	53                   	push   ebx
c000a5e4:	57                   	push   edi
c000a5e5:	e8 00 f3 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a5ea:	5a                   	pop    edx
c000a5eb:	59                   	pop    ecx
c000a5ec:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5ee:	89 d1                	mov    ecx,edx
c000a5f0:	c1 e9 0c             	shr    ecx,0xc
c000a5f3:	74 10                	je     c000a605 <VAS::scanForEviction()+0x47>
c000a5f5:	89 d1                	mov    ecx,edx
c000a5f7:	81 e1 01 08 00 00    	and    ecx,0x801
c000a5fd:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a603:	74 40                	je     c000a645 <VAS::scanForEviction()+0x87>
c000a605:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a60b:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a611:	76 2d                	jbe    c000a640 <VAS::scanForEviction()+0x82>
c000a613:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a61a:	83 c6 01             	add    esi,0x1
c000a61d:	83 fe 03             	cmp    esi,0x3
c000a620:	74 32                	je     c000a654 <VAS::scanForEviction()+0x96>
c000a622:	31 db                	xor    ebx,ebx
c000a624:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a62a:	75 b7                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a62c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a62f:	89 da                	mov    edx,ebx
c000a631:	c1 ea 16             	shr    edx,0x16
c000a634:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a638:	75 a9                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a63a:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a640:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a643:	eb 88                	jmp    c000a5cd <VAS::scanForEviction()+0xf>
c000a645:	f6 c2 20             	test   dl,0x20
c000a648:	74 13                	je     c000a65d <VAS::scanForEviction()+0x9f>
c000a64a:	83 e2 df             	and    edx,0xffffffdf
c000a64d:	89 10                	mov    DWORD PTR [eax],edx
c000a64f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a652:	eb b1                	jmp    c000a605 <VAS::scanForEviction()+0x47>
c000a654:	83 c4 10             	add    esp,0x10
c000a657:	31 c0                	xor    eax,eax
c000a659:	5b                   	pop    ebx
c000a65a:	5e                   	pop    esi
c000a65b:	5f                   	pop    edi
c000a65c:	c3                   	ret    
c000a65d:	89 d0                	mov    eax,edx
c000a65f:	83 ec 08             	sub    esp,0x8
c000a662:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a667:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a66b:	53                   	push   ebx
c000a66c:	68 79 0e 02 c0       	push   0xc0020e79
c000a671:	e8 94 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a676:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a679:	58                   	pop    eax
c000a67a:	5a                   	pop    edx
c000a67b:	51                   	push   ecx
c000a67c:	57                   	push   edi
c000a67d:	e8 1a fc ff ff       	call   c000a29c <VAS::evict(unsigned long)>
c000a682:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a685:	5b                   	pop    ebx
c000a686:	5e                   	pop    esi
c000a687:	50                   	push   eax
c000a688:	68 8d 0e 02 c0       	push   0xc0020e8d
c000a68d:	e8 78 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a692:	58                   	pop    eax
c000a693:	5a                   	pop    edx
c000a694:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a698:	50                   	push   eax
c000a699:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a69d:	68 a0 0e 02 c0       	push   0xc0020ea0
c000a6a2:	e8 63 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a6a7:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6aa:	83 c4 10             	add    esp,0x10
c000a6ad:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6b3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6ba:	83 c4 10             	add    esp,0x10
c000a6bd:	5b                   	pop    ebx
c000a6be:	5e                   	pop    esi
c000a6bf:	5f                   	pop    edi
c000a6c0:	c3                   	ret    

c000a6c1 <mapVASFirstTime>:
c000a6c1:	55                   	push   ebp
c000a6c2:	57                   	push   edi
c000a6c3:	56                   	push   esi
c000a6c4:	53                   	push   ebx
c000a6c5:	83 ec 0c             	sub    esp,0xc
c000a6c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6cd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6d0:	83 fa 01             	cmp    edx,0x1
c000a6d3:	0f 84 cb 00 00 00    	je     c000a7a4 <mapVASFirstTime+0xe3>
c000a6d9:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6dc:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6e1:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6e6:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6e9:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6ef:	c1 e5 15             	shl    ebp,0x15
c000a6f2:	29 eb                	sub    ebx,ebp
c000a6f4:	29 ef                	sub    edi,ebp
c000a6f6:	e8 e7 d6 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a6fb:	83 ec 0c             	sub    esp,0xc
c000a6fe:	68 03 04 00 00       	push   0x403
c000a703:	6a 01                	push   0x1
c000a705:	53                   	push   ebx
c000a706:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a70c:	50                   	push   eax
c000a70d:	56                   	push   esi
c000a70e:	e8 f5 f7 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a713:	83 c4 20             	add    esp,0x20
c000a716:	39 fb                	cmp    ebx,edi
c000a718:	75 dc                	jne    c000a6f6 <mapVASFirstTime+0x35>
c000a71a:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a71f:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a724:	29 eb                	sub    ebx,ebp
c000a726:	29 ef                	sub    edi,ebp
c000a728:	e8 b5 d6 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a72d:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a731:	83 fa 01             	cmp    edx,0x1
c000a734:	19 d2                	sbb    edx,edx
c000a736:	83 ec 0c             	sub    esp,0xc
c000a739:	83 e2 04             	and    edx,0x4
c000a73c:	81 c2 03 04 00 00    	add    edx,0x403
c000a742:	52                   	push   edx
c000a743:	6a 01                	push   0x1
c000a745:	53                   	push   ebx
c000a746:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a74c:	50                   	push   eax
c000a74d:	56                   	push   esi
c000a74e:	e8 b5 f7 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a753:	83 c4 20             	add    esp,0x20
c000a756:	39 df                	cmp    edi,ebx
c000a758:	75 ce                	jne    c000a728 <mapVASFirstTime+0x67>
c000a75a:	83 ec 0c             	sub    esp,0xc
c000a75d:	bb 7c 50 02 c0       	mov    ebx,0xc002507c
c000a762:	6a 04                	push   0x4
c000a764:	81 eb 00 40 02 c0    	sub    ebx,0xc0024000
c000a76a:	6a ff                	push   0xffffffff
c000a76c:	c1 eb 0c             	shr    ebx,0xc
c000a76f:	53                   	push   ebx
c000a770:	68 00 40 02 c0       	push   0xc0024000
c000a775:	56                   	push   esi
c000a776:	e8 09 f3 ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a77b:	83 c4 14             	add    esp,0x14
c000a77e:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c000a783:	6a 04                	push   0x4
c000a785:	6a ff                	push   0xffffffff
c000a787:	53                   	push   ebx
c000a788:	68 00 40 02 c0       	push   0xc0024000
c000a78d:	50                   	push   eax
c000a78e:	e8 f1 f2 ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a793:	0f 20 d8             	mov    eax,cr3
c000a796:	0f 22 d8             	mov    cr3,eax
c000a799:	83 c4 20             	add    esp,0x20
c000a79c:	83 c4 0c             	add    esp,0xc
c000a79f:	5b                   	pop    ebx
c000a7a0:	5e                   	pop    esi
c000a7a1:	5f                   	pop    edi
c000a7a2:	5d                   	pop    ebp
c000a7a3:	c3                   	ret    
c000a7a4:	83 ec 0c             	sub    esp,0xc
c000a7a7:	68 ad 0e 02 c0       	push   0xc0020ead
c000a7ac:	e8 59 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7b1:	83 c4 10             	add    esp,0x10
c000a7b4:	83 c4 0c             	add    esp,0xc
c000a7b7:	5b                   	pop    ebx
c000a7b8:	5e                   	pop    esi
c000a7b9:	5f                   	pop    edi
c000a7ba:	5d                   	pop    ebp
c000a7bb:	c3                   	ret    

c000a7bc <__cxa_atexit>:
c000a7bc:	31 c0                	xor    eax,eax
c000a7be:	c3                   	ret    

c000a7bf <__cxa_finalize>:
c000a7bf:	c3                   	ret    

c000a7c0 <__stack_chk_fail>:
c000a7c0:	55                   	push   ebp
c000a7c1:	89 e5                	mov    ebp,esp
c000a7c3:	83 ec 10             	sub    esp,0x10
c000a7c6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7c9:	68 c6 0e 02 c0       	push   0xc0020ec6
c000a7ce:	e8 37 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7d3:	58                   	pop    eax
c000a7d4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7d7:	5a                   	pop    edx
c000a7d8:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7db:	68 c6 0e 02 c0       	push   0xc0020ec6
c000a7e0:	e8 25 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7e5:	c7 04 24 ce 0e 02 c0 	mov    DWORD PTR [esp],0xc0020ece
c000a7ec:	e8 18 6b 00 00       	call   c0011309 <KePanic(char const*)>
c000a7f1:	83 c4 10             	add    esp,0x10
c000a7f4:	c9                   	leave  
c000a7f5:	c3                   	ret    

c000a7f6 <__cxa_pure_virtual>:
c000a7f6:	83 ec 18             	sub    esp,0x18
c000a7f9:	68 e6 0e 02 c0       	push   0xc0020ee6
c000a7fe:	e8 06 6b 00 00       	call   c0011309 <KePanic(char const*)>
c000a803:	83 c4 1c             	add    esp,0x1c
c000a806:	c3                   	ret    

c000a807 <operator new[](unsigned long)>:
c000a807:	e9 c7 d2 ff ff       	jmp    c0007ad3 <malloc>

c000a80c <operator delete(void*, unsigned long)>:
c000a80c:	e9 e2 d2 ff ff       	jmp    c0007af3 <rfree>

c000a811 <operator delete[](void*)>:
c000a811:	e9 dd d2 ff ff       	jmp    c0007af3 <rfree>

c000a816 <operator delete[](void*, unsigned long)>:
c000a816:	e9 d8 d2 ff ff       	jmp    c0007af3 <rfree>

c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a81b:	55                   	push   ebp
c000a81c:	57                   	push   edi
c000a81d:	56                   	push   esi
c000a81e:	53                   	push   ebx
c000a81f:	83 ec 20             	sub    esp,0x20
c000a822:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a826:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c000a82e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a832:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c000a83a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a83e:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c000a846:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c000a84e:	89 f7                	mov    edi,esi
c000a850:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a855:	89 eb                	mov    ebx,ebp
c000a857:	eb 02                	jmp    c000a85b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c000a859:	89 c7                	mov    edi,eax
c000a85b:	31 d2                	xor    edx,edx
c000a85d:	89 f8                	mov    eax,edi
c000a85f:	f7 f1                	div    ecx
c000a861:	83 c3 01             	add    ebx,0x1
c000a864:	39 cf                	cmp    edi,ecx
c000a866:	73 f1                	jae    c000a859 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c000a868:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a86b:	eb 02                	jmp    c000a86f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c000a86d:	89 c6                	mov    esi,eax
c000a86f:	31 d2                	xor    edx,edx
c000a871:	89 f0                	mov    eax,esi
c000a873:	f7 f1                	div    ecx
c000a875:	83 eb 01             	sub    ebx,0x1
c000a878:	39 ce                	cmp    esi,ecx
c000a87a:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a87e:	88 13                	mov    BYTE PTR [ebx],dl
c000a880:	73 eb                	jae    c000a86d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c000a882:	83 c4 20             	add    esp,0x20
c000a885:	89 e8                	mov    eax,ebp
c000a887:	5b                   	pop    ebx
c000a888:	5e                   	pop    esi
c000a889:	5f                   	pop    edi
c000a88a:	5d                   	pop    ebp
c000a88b:	c3                   	ret    

c000a88c <Dbg::logc(char)>:
c000a88c:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a893:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a897:	75 12                	jne    c000a8ab <Dbg::logc(char)+0x1f>
c000a899:	ba fd 03 00 00       	mov    edx,0x3fd
c000a89e:	ec                   	in     al,dx
c000a89f:	a8 20                	test   al,0x20
c000a8a1:	74 fb                	je     c000a89e <Dbg::logc(char)+0x12>
c000a8a3:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8a8:	88 c8                	mov    al,cl
c000a8aa:	ee                   	out    dx,al
c000a8ab:	c3                   	ret    

c000a8ac <Dbg::logs(char*)>:
c000a8ac:	53                   	push   ebx
c000a8ad:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8b1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8b4:	85 c0                	test   eax,eax
c000a8b6:	74 11                	je     c000a8c9 <Dbg::logs(char*)+0x1d>
c000a8b8:	50                   	push   eax
c000a8b9:	83 c3 01             	add    ebx,0x1
c000a8bc:	e8 cb ff ff ff       	call   c000a88c <Dbg::logc(char)>
c000a8c1:	58                   	pop    eax
c000a8c2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8c5:	85 c0                	test   eax,eax
c000a8c7:	75 ef                	jne    c000a8b8 <Dbg::logs(char*)+0xc>
c000a8c9:	5b                   	pop    ebx
c000a8ca:	c3                   	ret    

c000a8cb <Dbg::logWriteInt(unsigned int)>:
c000a8cb:	83 ec 10             	sub    esp,0x10
c000a8ce:	6a 0a                	push   0xa
c000a8d0:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8d4:	50                   	push   eax
c000a8d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8d9:	50                   	push   eax
c000a8da:	e8 3c ff ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a8df:	50                   	push   eax
c000a8e0:	e8 c7 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a8e5:	83 c4 20             	add    esp,0x20
c000a8e8:	c3                   	ret    

c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a8e9:	83 ec 10             	sub    esp,0x10
c000a8ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a8f0:	50                   	push   eax
c000a8f1:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8f5:	50                   	push   eax
c000a8f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a8fa:	52                   	push   edx
c000a8fb:	e8 1b ff ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a900:	50                   	push   eax
c000a901:	e8 a6 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a906:	83 c4 20             	add    esp,0x20
c000a909:	c3                   	ret    

c000a90a <Dbg::kprintf(char const*, ...)>:
c000a90a:	55                   	push   ebp
c000a90b:	57                   	push   edi
c000a90c:	56                   	push   esi
c000a90d:	53                   	push   ebx
c000a90e:	83 ec 0c             	sub    esp,0xc
c000a911:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a918:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a91c:	74 08                	je     c000a926 <Dbg::kprintf(char const*, ...)+0x1c>
c000a91e:	83 c4 0c             	add    esp,0xc
c000a921:	5b                   	pop    ebx
c000a922:	5e                   	pop    esi
c000a923:	5f                   	pop    edi
c000a924:	5d                   	pop    ebp
c000a925:	c3                   	ret    
c000a926:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a92a:	31 ff                	xor    edi,edi
c000a92c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a930:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a933:	85 c0                	test   eax,eax
c000a935:	74 e7                	je     c000a91e <Dbg::kprintf(char const*, ...)+0x14>
c000a937:	8d 77 01             	lea    esi,[edi+0x1]
c000a93a:	83 f8 25             	cmp    eax,0x25
c000a93d:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a940:	75 47                	jne    c000a989 <Dbg::kprintf(char const*, ...)+0x7f>
c000a942:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a945:	83 c7 02             	add    edi,0x2
c000a948:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a94b:	83 e8 25             	sub    eax,0x25
c000a94e:	0f b6 c0             	movzx  eax,al
c000a951:	83 f8 53             	cmp    eax,0x53
c000a954:	0f 87 ce 00 00 00    	ja     c000aa28 <Dbg::kprintf(char const*, ...)+0x11e>
c000a95a:	ff 24 85 fc 0e 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf104]
c000a961:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a965:	89 c8                	mov    eax,ecx
c000a967:	83 c1 04             	add    ecx,0x4
c000a96a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a96e:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a970:	55                   	push   ebp
c000a971:	e8 55 ff ff ff       	call   c000a8cb <Dbg::logWriteInt(unsigned int)>
c000a976:	58                   	pop    eax
c000a977:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a97a:	85 c0                	test   eax,eax
c000a97c:	74 a0                	je     c000a91e <Dbg::kprintf(char const*, ...)+0x14>
c000a97e:	8d 77 01             	lea    esi,[edi+0x1]
c000a981:	83 f8 25             	cmp    eax,0x25
c000a984:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a987:	74 b9                	je     c000a942 <Dbg::kprintf(char const*, ...)+0x38>
c000a989:	50                   	push   eax
c000a98a:	89 f7                	mov    edi,esi
c000a98c:	e8 fb fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000a991:	89 ee                	mov    esi,ebp
c000a993:	58                   	pop    eax
c000a994:	eb e1                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a996:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a99a:	89 c8                	mov    eax,ecx
c000a99c:	83 c1 04             	add    ecx,0x4
c000a99f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a3:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9a5:	50                   	push   eax
c000a9a6:	e8 01 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a9ab:	58                   	pop    eax
c000a9ac:	eb c9                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9b2:	89 d0                	mov    eax,edx
c000a9b4:	83 c2 04             	add    edx,0x4
c000a9b7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9bb:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9bd:	50                   	push   eax
c000a9be:	e8 08 ff ff ff       	call   c000a8cb <Dbg::logWriteInt(unsigned int)>
c000a9c3:	58                   	pop    eax
c000a9c4:	eb b1                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ca:	89 d0                	mov    eax,edx
c000a9cc:	83 c2 04             	add    edx,0x4
c000a9cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9d3:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a9d6:	50                   	push   eax
c000a9d7:	e8 b0 fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000a9dc:	58                   	pop    eax
c000a9dd:	eb 98                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9df:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9e3:	89 c8                	mov    eax,ecx
c000a9e5:	83 c1 04             	add    ecx,0x4
c000a9e8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9ec:	6a 10                	push   0x10
c000a9ee:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a9f0:	51                   	push   ecx
c000a9f1:	e8 f3 fe ff ff       	call   c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000a9f6:	5d                   	pop    ebp
c000a9f7:	58                   	pop    eax
c000a9f8:	e9 7a ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9fd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa01:	89 d0                	mov    eax,edx
c000aa03:	83 c2 08             	add    edx,0x8
c000aa06:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa0a:	6a 10                	push   0x10
c000aa0c:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa0e:	50                   	push   eax
c000aa0f:	e8 d5 fe ff ff       	call   c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa14:	58                   	pop    eax
c000aa15:	5a                   	pop    edx
c000aa16:	e9 5c ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1b:	6a 25                	push   0x25
c000aa1d:	e8 6a fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa22:	5a                   	pop    edx
c000aa23:	e9 4f ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa28:	6a 25                	push   0x25
c000aa2a:	e8 5d fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa2f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa33:	50                   	push   eax
c000aa34:	e8 53 fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa39:	5a                   	pop    edx
c000aa3a:	59                   	pop    ecx
c000aa3b:	e9 37 ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>

c000aa40 <KiUbsanPrintDetails(char const*, void*)>:
c000aa40:	83 ec 1c             	sub    esp,0x1c
c000aa43:	83 ec 08             	sub    esp,0x8
c000aa46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa4a:	68 4c 10 02 c0       	push   0xc002104c
c000aa4f:	e8 b6 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa54:	83 c4 10             	add    esp,0x10
c000aa57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa63:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa65:	83 ec 08             	sub    esp,0x8
c000aa68:	50                   	push   eax
c000aa69:	68 60 10 02 c0       	push   0xc0021060
c000aa6e:	e8 97 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa73:	83 c4 10             	add    esp,0x10
c000aa76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aa7d:	83 ec 08             	sub    esp,0x8
c000aa80:	50                   	push   eax
c000aa81:	68 6a 10 02 c0       	push   0xc002106a
c000aa86:	e8 7f fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa8b:	83 c4 10             	add    esp,0x10
c000aa8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa92:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aa95:	83 ec 08             	sub    esp,0x8
c000aa98:	50                   	push   eax
c000aa99:	68 74 10 02 c0       	push   0xc0021074
c000aa9e:	e8 67 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aaa3:	83 c4 10             	add    esp,0x10
c000aaa6:	90                   	nop
c000aaa7:	83 c4 1c             	add    esp,0x1c
c000aaaa:	c3                   	ret    
c000aaab:	90                   	nop

c000aaac <__ubsan_handle_type_mismatch_v1>:
c000aaac:	83 ec 0c             	sub    esp,0xc
c000aaaf:	83 ec 08             	sub    esp,0x8
c000aab2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aab6:	68 b8 11 02 c0       	push   0xc00211b8
c000aabb:	e8 80 ff ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000aac0:	83 c4 10             	add    esp,0x10
c000aac3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000aac8:	75 16                	jne    c000aae0 <__ubsan_handle_type_mismatch_v1+0x34>
c000aaca:	83 ec 0c             	sub    esp,0xc
c000aacd:	68 7e 10 02 c0       	push   0xc002107e
c000aad2:	e8 33 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aad7:	83 c4 10             	add    esp,0x10
c000aada:	e9 91 00 00 00       	jmp    c000ab70 <__ubsan_handle_type_mismatch_v1+0xc4>
c000aadf:	90                   	nop
c000aae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aae4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aae7:	85 c0                	test   eax,eax
c000aae9:	74 29                	je     c000ab14 <__ubsan_handle_type_mismatch_v1+0x68>
c000aaeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aaf2:	83 e8 01             	sub    eax,0x1
c000aaf5:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000aaf9:	75 19                	jne    c000ab14 <__ubsan_handle_type_mismatch_v1+0x68>
c000aafb:	83 ec 08             	sub    esp,0x8
c000aafe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab02:	68 d8 11 02 c0       	push   0xc00211d8
c000ab07:	e8 fe fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab0c:	83 c4 10             	add    esp,0x10
c000ab0f:	eb 5f                	jmp    c000ab70 <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab11:	8d 76 00             	lea    esi,[esi+0x0]
c000ab14:	83 ec 0c             	sub    esp,0xc
c000ab17:	68 93 10 02 c0       	push   0xc0021093
c000ab1c:	e8 e9 fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab21:	83 c4 10             	add    esp,0x10
c000ab24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab28:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab2b:	0f b6 c0             	movzx  eax,al
c000ab2e:	83 ec 08             	sub    esp,0x8
c000ab31:	50                   	push   eax
c000ab32:	68 ad 10 02 c0       	push   0xc00210ad
c000ab37:	e8 ce fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab3c:	83 c4 10             	add    esp,0x10
c000ab3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab43:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab46:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab49:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab51:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab54:	0f b6 c0             	movzx  eax,al
c000ab57:	8b 04 85 c0 31 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdce40]
c000ab5e:	51                   	push   ecx
c000ab5f:	52                   	push   edx
c000ab60:	50                   	push   eax
c000ab61:	68 00 12 02 c0       	push   0xc0021200
c000ab66:	e8 9f fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab6b:	83 c4 10             	add    esp,0x10
c000ab6e:	66 90                	xchg   ax,ax
c000ab70:	83 ec 0c             	sub    esp,0xc
c000ab73:	68 b8 11 02 c0       	push   0xc00211b8
c000ab78:	e8 8c 67 00 00       	call   c0011309 <KePanic(char const*)>
c000ab7d:	83 c4 10             	add    esp,0x10
c000ab80:	90                   	nop
c000ab81:	83 c4 0c             	add    esp,0xc
c000ab84:	c3                   	ret    
c000ab85:	8d 76 00             	lea    esi,[esi+0x0]

c000ab88 <__ubsan_handle_pointer_overflow>:
c000ab88:	83 ec 0c             	sub    esp,0xc
c000ab8b:	83 ec 08             	sub    esp,0x8
c000ab8e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ab92:	68 48 12 02 c0       	push   0xc0021248
c000ab97:	e8 a4 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	83 ec 0c             	sub    esp,0xc
c000aba2:	68 48 12 02 c0       	push   0xc0021248
c000aba7:	e8 5d 67 00 00       	call   c0011309 <KePanic(char const*)>
c000abac:	83 c4 10             	add    esp,0x10
c000abaf:	90                   	nop
c000abb0:	83 c4 0c             	add    esp,0xc
c000abb3:	c3                   	ret    

c000abb4 <__ubsan_handle_out_of_bounds>:
c000abb4:	83 ec 0c             	sub    esp,0xc
c000abb7:	83 ec 08             	sub    esp,0x8
c000abba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abbe:	68 b8 10 02 c0       	push   0xc00210b8
c000abc3:	e8 78 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000abc8:	83 c4 10             	add    esp,0x10
c000abcb:	83 ec 0c             	sub    esp,0xc
c000abce:	68 b8 10 02 c0       	push   0xc00210b8
c000abd3:	e8 31 67 00 00       	call   c0011309 <KePanic(char const*)>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	90                   	nop
c000abdc:	83 c4 0c             	add    esp,0xc
c000abdf:	c3                   	ret    

c000abe0 <__ubsan_handle_add_overflow>:
c000abe0:	83 ec 0c             	sub    esp,0xc
c000abe3:	83 ec 08             	sub    esp,0x8
c000abe6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abea:	68 d5 10 02 c0       	push   0xc00210d5
c000abef:	e8 4c fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	83 ec 0c             	sub    esp,0xc
c000abfa:	68 d5 10 02 c0       	push   0xc00210d5
c000abff:	e8 05 67 00 00       	call   c0011309 <KePanic(char const*)>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	90                   	nop
c000ac08:	83 c4 0c             	add    esp,0xc
c000ac0b:	c3                   	ret    

c000ac0c <__ubsan_handle_load_invalid_value>:
c000ac0c:	83 ec 0c             	sub    esp,0xc
c000ac0f:	83 ec 08             	sub    esp,0x8
c000ac12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac16:	68 68 12 02 c0       	push   0xc0021268
c000ac1b:	e8 20 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac20:	83 c4 10             	add    esp,0x10
c000ac23:	83 ec 0c             	sub    esp,0xc
c000ac26:	68 68 12 02 c0       	push   0xc0021268
c000ac2b:	e8 d9 66 00 00       	call   c0011309 <KePanic(char const*)>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	90                   	nop
c000ac34:	83 c4 0c             	add    esp,0xc
c000ac37:	c3                   	ret    

c000ac38 <__ubsan_handle_divrem_overflow>:
c000ac38:	83 ec 0c             	sub    esp,0xc
c000ac3b:	83 ec 08             	sub    esp,0x8
c000ac3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac42:	68 8c 12 02 c0       	push   0xc002128c
c000ac47:	e8 f4 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	83 ec 0c             	sub    esp,0xc
c000ac52:	68 8c 12 02 c0       	push   0xc002128c
c000ac57:	e8 ad 66 00 00       	call   c0011309 <KePanic(char const*)>
c000ac5c:	83 c4 10             	add    esp,0x10
c000ac5f:	90                   	nop
c000ac60:	83 c4 0c             	add    esp,0xc
c000ac63:	c3                   	ret    

c000ac64 <__ubsan_handle_mul_overflow>:
c000ac64:	83 ec 0c             	sub    esp,0xc
c000ac67:	83 ec 08             	sub    esp,0x8
c000ac6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac6e:	68 f1 10 02 c0       	push   0xc00210f1
c000ac73:	e8 c8 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac78:	83 c4 10             	add    esp,0x10
c000ac7b:	83 ec 0c             	sub    esp,0xc
c000ac7e:	68 f1 10 02 c0       	push   0xc00210f1
c000ac83:	e8 81 66 00 00       	call   c0011309 <KePanic(char const*)>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	90                   	nop
c000ac8c:	83 c4 0c             	add    esp,0xc
c000ac8f:	c3                   	ret    

c000ac90 <__ubsan_handle_sub_overflow>:
c000ac90:	83 ec 0c             	sub    esp,0xc
c000ac93:	83 ec 08             	sub    esp,0x8
c000ac96:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac9a:	68 0d 11 02 c0       	push   0xc002110d
c000ac9f:	e8 9c fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000aca4:	83 c4 10             	add    esp,0x10
c000aca7:	83 ec 0c             	sub    esp,0xc
c000acaa:	68 0d 11 02 c0       	push   0xc002110d
c000acaf:	e8 55 66 00 00       	call   c0011309 <KePanic(char const*)>
c000acb4:	83 c4 10             	add    esp,0x10
c000acb7:	90                   	nop
c000acb8:	83 c4 0c             	add    esp,0xc
c000acbb:	c3                   	ret    

c000acbc <__ubsan_handle_shift_out_of_bounds>:
c000acbc:	83 ec 0c             	sub    esp,0xc
c000acbf:	83 ec 08             	sub    esp,0x8
c000acc2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acc6:	68 ac 12 02 c0       	push   0xc00212ac
c000accb:	e8 70 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000acd0:	83 c4 10             	add    esp,0x10
c000acd3:	83 ec 0c             	sub    esp,0xc
c000acd6:	68 ac 12 02 c0       	push   0xc00212ac
c000acdb:	e8 29 66 00 00       	call   c0011309 <KePanic(char const*)>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	90                   	nop
c000ace4:	83 c4 0c             	add    esp,0xc
c000ace7:	c3                   	ret    

c000ace8 <__ubsan_handle_negate_overflow>:
c000ace8:	83 ec 0c             	sub    esp,0xc
c000aceb:	83 ec 08             	sub    esp,0x8
c000acee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acf2:	68 d0 12 02 c0       	push   0xc00212d0
c000acf7:	e8 44 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000acfc:	83 c4 10             	add    esp,0x10
c000acff:	83 ec 0c             	sub    esp,0xc
c000ad02:	68 d0 12 02 c0       	push   0xc00212d0
c000ad07:	e8 fd 65 00 00       	call   c0011309 <KePanic(char const*)>
c000ad0c:	83 c4 10             	add    esp,0x10
c000ad0f:	90                   	nop
c000ad10:	83 c4 0c             	add    esp,0xc
c000ad13:	c3                   	ret    

c000ad14 <KiCreateSymlinkID()>:
c000ad14:	55                   	push   ebp
c000ad15:	57                   	push   edi
c000ad16:	56                   	push   esi
c000ad17:	53                   	push   ebx
c000ad18:	31 db                	xor    ebx,ebx
c000ad1a:	83 ec 1c             	sub    esp,0x1c
c000ad1d:	e8 35 67 00 00       	call   c0011457 <KeRand()>
c000ad22:	8b 2d 00 64 02 c0    	mov    ebp,DWORD PTR ds:0xc0026400
c000ad28:	31 d2                	xor    edx,edx
c000ad2a:	43                   	inc    ebx
c000ad2b:	31 ff                	xor    edi,edi
c000ad2d:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000ad30:	89 ee                	mov    esi,ebp
c000ad32:	89 0d 00 64 02 c0    	mov    DWORD PTR ds:0xc0026400,ecx
c000ad38:	0f a4 c2 1b          	shld   edx,eax,0x1b
c000ad3c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad40:	c1 e0 1b             	shl    eax,0x1b
c000ad43:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000ad49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad4d:	75 10                	jne    c000ad5f <KiCreateSymlinkID()+0x4b>
c000ad4f:	83 ec 0c             	sub    esp,0xc
c000ad52:	68 ef 12 02 c0       	push   0xc00212ef
c000ad57:	e8 ad 65 00 00       	call   c0011309 <KePanic(char const*)>
c000ad5c:	83 c4 10             	add    esp,0x10
c000ad5f:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000ad63:	75 06                	jne    c000ad6b <KiCreateSymlinkID()+0x57>
c000ad65:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000ad69:	74 b2                	je     c000ad1d <KiCreateSymlinkID()+0x9>
c000ad6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ad6f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ad73:	83 c4 1c             	add    esp,0x1c
c000ad76:	5b                   	pop    ebx
c000ad77:	31 f0                	xor    eax,esi
c000ad79:	5e                   	pop    esi
c000ad7a:	31 fa                	xor    edx,edi
c000ad7c:	5f                   	pop    edi
c000ad7d:	5d                   	pop    ebp
c000ad7e:	c3                   	ret    

c000ad7f <KiFlushSymlinkChanges()>:
c000ad7f:	56                   	push   esi
c000ad80:	53                   	push   ebx
c000ad81:	83 ec 20             	sub    esp,0x20
c000ad84:	68 14 01 00 00       	push   0x114
c000ad89:	e8 45 cd ff ff       	call   c0007ad3 <malloc>
c000ad8e:	83 c4 0c             	add    esp,0xc
c000ad91:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000ad97:	68 f8 12 02 c0       	push   0xc00212f8
c000ad9c:	50                   	push   eax
c000ad9d:	89 c3                	mov    ebx,eax
c000ad9f:	e8 a0 0a 00 00       	call   c000b844 <File::File(char const*, Process*)>
c000ada4:	83 c4 10             	add    esp,0x10
c000ada7:	85 db                	test   ebx,ebx
c000ada9:	75 10                	jne    c000adbb <KiFlushSymlinkChanges()+0x3c>
c000adab:	83 ec 0c             	sub    esp,0xc
c000adae:	68 16 13 02 c0       	push   0xc0021316
c000adb3:	e8 51 65 00 00       	call   c0011309 <KePanic(char const*)>
c000adb8:	83 c4 10             	add    esp,0x10
c000adbb:	50                   	push   eax
c000adbc:	50                   	push   eax
c000adbd:	6a 06                	push   0x6
c000adbf:	53                   	push   ebx
c000adc0:	e8 47 0b 00 00       	call   c000b90c <File::open(FileOpenMode)>
c000adc5:	83 c4 10             	add    esp,0x10
c000adc8:	85 c0                	test   eax,eax
c000adca:	74 10                	je     c000addc <KiFlushSymlinkChanges()+0x5d>
c000adcc:	83 ec 0c             	sub    esp,0xc
c000adcf:	68 30 13 02 c0       	push   0xc0021330
c000add4:	e8 30 65 00 00       	call   c0011309 <KePanic(char const*)>
c000add9:	83 c4 10             	add    esp,0x10
c000addc:	31 f6                	xor    esi,esi
c000adde:	39 35 c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,esi
c000ade4:	7e 40                	jle    c000ae26 <KiFlushSymlinkChanges()+0xa7>
c000ade6:	83 ec 0c             	sub    esp,0xc
c000ade9:	8b 13                	mov    edx,DWORD PTR [ebx]
c000adeb:	8d 44 24 18          	lea    eax,[esp+0x18]
c000adef:	50                   	push   eax
c000adf0:	89 f0                	mov    eax,esi
c000adf2:	c1 e0 08             	shl    eax,0x8
c000adf5:	05 00 60 02 c0       	add    eax,0xc0026000
c000adfa:	50                   	push   eax
c000adfb:	6a 00                	push   0x0
c000adfd:	68 00 01 00 00       	push   0x100
c000ae02:	53                   	push   ebx
c000ae03:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ae06:	83 c4 20             	add    esp,0x20
c000ae09:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ae11:	74 10                	je     c000ae23 <KiFlushSymlinkChanges()+0xa4>
c000ae13:	83 ec 0c             	sub    esp,0xc
c000ae16:	68 4a 13 02 c0       	push   0xc002134a
c000ae1b:	e8 e9 64 00 00       	call   c0011309 <KePanic(char const*)>
c000ae20:	83 c4 10             	add    esp,0x10
c000ae23:	46                   	inc    esi
c000ae24:	eb b8                	jmp    c000adde <KiFlushSymlinkChanges()+0x5f>
c000ae26:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000ae30:	83 ec 0c             	sub    esp,0xc
c000ae33:	53                   	push   ebx
c000ae34:	e8 31 0b 00 00       	call   c000b96a <File::close()>
c000ae39:	83 c4 10             	add    esp,0x10
c000ae3c:	85 db                	test   ebx,ebx
c000ae3e:	74 0c                	je     c000ae4c <KiFlushSymlinkChanges()+0xcd>
c000ae40:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae42:	83 ec 0c             	sub    esp,0xc
c000ae45:	53                   	push   ebx
c000ae46:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae49:	83 c4 10             	add    esp,0x10
c000ae4c:	83 c4 14             	add    esp,0x14
c000ae4f:	5b                   	pop    ebx
c000ae50:	5e                   	pop    esi
c000ae51:	c3                   	ret    

c000ae52 <KiDeinitialiseSymlinks(void*)>:
c000ae52:	e9 28 ff ff ff       	jmp    c000ad7f <KiFlushSymlinkChanges()>

c000ae57 <KeRegisterSymlink(char const*, unsigned long long)>:
c000ae57:	53                   	push   ebx
c000ae58:	83 ec 0c             	sub    esp,0xc
c000ae5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000ae5f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ae63:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000ae68:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ae6c:	68 00 01 00 00       	push   0x100
c000ae71:	6a 00                	push   0x0
c000ae73:	89 14 c5 e0 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda020],edx
c000ae7a:	89 0c c5 e4 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda01c],ecx
c000ae81:	c1 e0 08             	shl    eax,0x8
c000ae84:	05 00 60 02 c0       	add    eax,0xc0026000
c000ae89:	50                   	push   eax
c000ae8a:	e8 61 56 ff ff       	call   c00004f0 <memset>
c000ae8f:	58                   	pop    eax
c000ae90:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000ae95:	5a                   	pop    edx
c000ae96:	c1 e0 08             	shl    eax,0x8
c000ae99:	53                   	push   ebx
c000ae9a:	05 00 60 02 c0       	add    eax,0xc0026000
c000ae9f:	50                   	push   eax
c000aea0:	e8 ab 57 ff ff       	call   c0000650 <strcpy>
c000aea5:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aeaa:	83 c4 10             	add    esp,0x10
c000aead:	40                   	inc    eax
c000aeae:	a3 c0 5f 02 c0       	mov    ds:0xc0025fc0,eax
c000aeb3:	83 f8 03             	cmp    eax,0x3
c000aeb6:	7e 09                	jle    c000aec1 <KeRegisterSymlink(char const*, unsigned long long)+0x6a>
c000aeb8:	83 c4 08             	add    esp,0x8
c000aebb:	5b                   	pop    ebx
c000aebc:	e9 be fe ff ff       	jmp    c000ad7f <KiFlushSymlinkChanges()>
c000aec1:	83 c4 08             	add    esp,0x8
c000aec4:	5b                   	pop    ebx
c000aec5:	c3                   	ret    

c000aec6 <KiIsSymlinkRegistered(char const*)>:
c000aec6:	53                   	push   ebx
c000aec7:	31 db                	xor    ebx,ebx
c000aec9:	83 ec 08             	sub    esp,0x8
c000aecc:	39 1d c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,ebx
c000aed2:	7e 30                	jle    c000af04 <KiIsSymlinkRegistered(char const*)+0x3e>
c000aed4:	50                   	push   eax
c000aed5:	50                   	push   eax
c000aed6:	89 d8                	mov    eax,ebx
c000aed8:	c1 e0 08             	shl    eax,0x8
c000aedb:	05 00 60 02 c0       	add    eax,0xc0026000
c000aee0:	50                   	push   eax
c000aee1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aee5:	e8 96 58 ff ff       	call   c0000780 <strcmp>
c000aeea:	83 c4 10             	add    esp,0x10
c000aeed:	85 c0                	test   eax,eax
c000aeef:	75 10                	jne    c000af01 <KiIsSymlinkRegistered(char const*)+0x3b>
c000aef1:	8b 04 dd e0 5f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffda020]
c000aef8:	8b 14 dd e4 5f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffda01c]
c000aeff:	eb 07                	jmp    c000af08 <KiIsSymlinkRegistered(char const*)+0x42>
c000af01:	43                   	inc    ebx
c000af02:	eb c8                	jmp    c000aecc <KiIsSymlinkRegistered(char const*)+0x6>
c000af04:	31 c0                	xor    eax,eax
c000af06:	31 d2                	xor    edx,edx
c000af08:	83 c4 08             	add    esp,0x8
c000af0b:	5b                   	pop    ebx
c000af0c:	c3                   	ret    

c000af0d <KeDereferenceSymlink(char const*, char*)>:
c000af0d:	55                   	push   ebp
c000af0e:	57                   	push   edi
c000af0f:	56                   	push   esi
c000af10:	53                   	push   ebx
c000af11:	83 ec 44             	sub    esp,0x44
c000af14:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000af18:	56                   	push   esi
c000af19:	68 64 13 02 c0       	push   0xc0021364
c000af1e:	e8 e7 f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000af23:	89 34 24             	mov    DWORD PTR [esp],esi
c000af26:	e8 9b ff ff ff       	call   c000aec6 <KiIsSymlinkRegistered(char const*)>
c000af2b:	83 c4 10             	add    esp,0x10
c000af2e:	89 c7                	mov    edi,eax
c000af30:	89 d0                	mov    eax,edx
c000af32:	09 f8                	or     eax,edi
c000af34:	0f 84 de 01 00 00    	je     c000b118 <KeDereferenceSymlink(char const*, char*)+0x20b>
c000af3a:	53                   	push   ebx
c000af3b:	89 d5                	mov    ebp,edx
c000af3d:	53                   	push   ebx
c000af3e:	57                   	push   edi
c000af3f:	68 7e 13 02 c0       	push   0xc002137e
c000af44:	e8 c1 f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000af49:	58                   	pop    eax
c000af4a:	5a                   	pop    edx
c000af4b:	55                   	push   ebp
c000af4c:	68 8c 13 02 c0       	push   0xc002138c
c000af51:	e8 b4 f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000af56:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000af5d:	e8 71 cb ff ff       	call   c0007ad3 <malloc>
c000af62:	83 c4 0c             	add    esp,0xc
c000af65:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000af6b:	56                   	push   esi
c000af6c:	50                   	push   eax
c000af6d:	89 c3                	mov    ebx,eax
c000af6f:	e8 d0 08 00 00       	call   c000b844 <File::File(char const*, Process*)>
c000af74:	83 c4 10             	add    esp,0x10
c000af77:	85 db                	test   ebx,ebx
c000af79:	0f 84 68 01 00 00    	je     c000b0e7 <KeDereferenceSymlink(char const*, char*)+0x1da>
c000af7f:	83 ec 0c             	sub    esp,0xc
c000af82:	68 a0 1f 02 c0       	push   0xc0021fa0
c000af87:	e8 7e f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000af8c:	5a                   	pop    edx
c000af8d:	59                   	pop    ecx
c000af8e:	6a 01                	push   0x1
c000af90:	53                   	push   ebx
c000af91:	e8 76 09 00 00       	call   c000b90c <File::open(FileOpenMode)>
c000af96:	83 c4 10             	add    esp,0x10
c000af99:	85 c0                	test   eax,eax
c000af9b:	74 0b                	je     c000afa8 <KeDereferenceSymlink(char const*, char*)+0x9b>
c000af9d:	83 ec 0c             	sub    esp,0xc
c000afa0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afa2:	53                   	push   ebx
c000afa3:	e9 39 01 00 00       	jmp    c000b0e1 <KeDereferenceSymlink(char const*, char*)+0x1d4>
c000afa8:	83 ec 0c             	sub    esp,0xc
c000afab:	68 86 09 02 c0       	push   0xc0020986
c000afb0:	e8 55 f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000afb5:	58                   	pop    eax
c000afb6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afb8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000afbc:	56                   	push   esi
c000afbd:	8d 54 24 37          	lea    edx,[esp+0x37]
c000afc1:	52                   	push   edx
c000afc2:	6a 00                	push   0x0
c000afc4:	6a 08                	push   0x8
c000afc6:	53                   	push   ebx
c000afc7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000afca:	83 c4 20             	add    esp,0x20
c000afcd:	85 c0                	test   eax,eax
c000afcf:	0f 85 fe 00 00 00    	jne    c000b0d3 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000afd5:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000afda:	0f 85 f3 00 00 00    	jne    c000b0d3 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000afe0:	83 ec 0c             	sub    esp,0xc
c000afe3:	68 d2 1f 02 c0       	push   0xc0021fd2
c000afe8:	e8 1d f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000afed:	8d 54 24 20          	lea    edx,[esp+0x20]
c000aff1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000aff3:	89 34 24             	mov    DWORD PTR [esp],esi
c000aff6:	52                   	push   edx
c000aff7:	6a 00                	push   0x0
c000aff9:	6a 08                	push   0x8
c000affb:	53                   	push   ebx
c000affc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000afff:	83 c4 20             	add    esp,0x20
c000b002:	85 c0                	test   eax,eax
c000b004:	0f 85 c9 00 00 00    	jne    c000b0d3 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b00a:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b00f:	0f 85 be 00 00 00    	jne    c000b0d3 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b015:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000b019:	0f 85 f9 00 00 00    	jne    c000b118 <KeDereferenceSymlink(char const*, char*)+0x20b>
c000b01f:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000b023:	0f 85 ef 00 00 00    	jne    c000b118 <KeDereferenceSymlink(char const*, char*)+0x20b>
c000b029:	83 ec 0c             	sub    esp,0xc
c000b02c:	68 9a 13 02 c0       	push   0xc002139a
c000b031:	e8 d4 f8 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b036:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000b03e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000b046:	83 c4 0c             	add    esp,0xc
c000b049:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000b04d:	50                   	push   eax
c000b04e:	8d 44 24 20          	lea    eax,[esp+0x20]
c000b052:	50                   	push   eax
c000b053:	53                   	push   ebx
c000b054:	e8 b5 0b 00 00       	call   c000bc0e <File::stat(unsigned long long*, bool*)>
c000b059:	83 c4 10             	add    esp,0x10
c000b05c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b061:	75 70                	jne    c000b0d3 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b063:	b8 0f 00 00 00       	mov    eax,0xf
c000b068:	31 ff                	xor    edi,edi
c000b06a:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b06e:	89 f8                	mov    eax,edi
c000b070:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000b074:	73 5d                	jae    c000b0d3 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b076:	83 ec 0c             	sub    esp,0xc
c000b079:	68 9a 13 02 c0       	push   0xc002139a
c000b07e:	e8 87 f8 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b083:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b087:	b9 ff 00 00 00       	mov    ecx,0xff
c000b08c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b090:	83 c0 f0             	add    eax,0xfffffff0
c000b093:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b097:	83 d2 ff             	adc    edx,0xffffffff
c000b09a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b09e:	83 c4 10             	add    esp,0x10
c000b0a1:	39 c1                	cmp    ecx,eax
c000b0a3:	19 d7                	sbb    edi,edx
c000b0a5:	72 40                	jb     c000b0e7 <KeDereferenceSymlink(char const*, char*)+0x1da>
c000b0a7:	83 ec 0c             	sub    esp,0xc
c000b0aa:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000b0ac:	56                   	push   esi
c000b0ad:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b0b1:	52                   	push   edx
c000b0b2:	50                   	push   eax
c000b0b3:	53                   	push   ebx
c000b0b4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b0b7:	83 c4 20             	add    esp,0x20
c000b0ba:	85 c0                	test   eax,eax
c000b0bc:	75 15                	jne    c000b0d3 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b0be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b0c2:	89 c7                	mov    edi,eax
c000b0c4:	c1 ff 1f             	sar    edi,0x1f
c000b0c7:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b0cb:	75 06                	jne    c000b0d3 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b0cd:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b0d1:	74 19                	je     c000b0ec <KeDereferenceSymlink(char const*, char*)+0x1df>
c000b0d3:	83 ec 0c             	sub    esp,0xc
c000b0d6:	53                   	push   ebx
c000b0d7:	e8 8e 08 00 00       	call   c000b96a <File::close()>
c000b0dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b0e1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	83 c8 ff             	or     eax,0xffffffff
c000b0ea:	eb 2e                	jmp    c000b11a <KeDereferenceSymlink(char const*, char*)+0x20d>
c000b0ec:	83 ec 0c             	sub    esp,0xc
c000b0ef:	68 b2 2a 02 c0       	push   0xc0022ab2
c000b0f4:	e8 11 f8 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b0f9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b0fc:	e8 69 08 00 00       	call   c000b96a <File::close()>
c000b101:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b103:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b106:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b109:	c7 04 24 9d 13 02 c0 	mov    DWORD PTR [esp],0xc002139d
c000b110:	e8 f5 f7 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b115:	83 c4 10             	add    esp,0x10
c000b118:	31 c0                	xor    eax,eax
c000b11a:	83 c4 3c             	add    esp,0x3c
c000b11d:	5b                   	pop    ebx
c000b11e:	5e                   	pop    esi
c000b11f:	5f                   	pop    edi
c000b120:	5d                   	pop    ebp
c000b121:	c3                   	ret    

c000b122 <KeCreateSymlink(char const*, char const*)>:
c000b122:	55                   	push   ebp
c000b123:	57                   	push   edi
c000b124:	56                   	push   esi
c000b125:	53                   	push   ebx
c000b126:	83 ec 38             	sub    esp,0x38
c000b129:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b12d:	68 14 01 00 00       	push   0x114
c000b132:	e8 9c c9 ff ff       	call   c0007ad3 <malloc>
c000b137:	83 c4 0c             	add    esp,0xc
c000b13a:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000b140:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b144:	89 c3                	mov    ebx,eax
c000b146:	50                   	push   eax
c000b147:	e8 f8 06 00 00       	call   c000b844 <File::File(char const*, Process*)>
c000b14c:	83 c4 10             	add    esp,0x10
c000b14f:	85 db                	test   ebx,ebx
c000b151:	b8 01 00 00 00       	mov    eax,0x1
c000b156:	0f 84 fb 00 00 00    	je     c000b257 <KeCreateSymlink(char const*, char const*)+0x135>
c000b15c:	52                   	push   edx
c000b15d:	52                   	push   edx
c000b15e:	6a 12                	push   0x12
c000b160:	53                   	push   ebx
c000b161:	e8 a6 07 00 00       	call   c000b90c <File::open(FileOpenMode)>
c000b166:	83 c4 10             	add    esp,0x10
c000b169:	85 c0                	test   eax,eax
c000b16b:	74 0b                	je     c000b178 <KeCreateSymlink(char const*, char const*)+0x56>
c000b16d:	83 ec 0c             	sub    esp,0xc
c000b170:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b172:	53                   	push   ebx
c000b173:	e9 d4 00 00 00       	jmp    c000b24c <KeCreateSymlink(char const*, char const*)+0x12a>
c000b178:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b17c:	be a0 13 02 c0       	mov    esi,0xc00213a0
c000b181:	b9 09 00 00 00       	mov    ecx,0x9
c000b186:	fc                   	cld    
c000b187:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b189:	83 ec 0c             	sub    esp,0xc
c000b18c:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b190:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b192:	56                   	push   esi
c000b193:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b197:	52                   	push   edx
c000b198:	6a 00                	push   0x0
c000b19a:	6a 08                	push   0x8
c000b19c:	53                   	push   ebx
c000b19d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b1a0:	83 c4 20             	add    esp,0x20
c000b1a3:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b1a8:	0f 85 90 00 00 00    	jne    c000b23e <KeCreateSymlink(char const*, char const*)+0x11c>
c000b1ae:	85 c0                	test   eax,eax
c000b1b0:	0f 85 88 00 00 00    	jne    c000b23e <KeCreateSymlink(char const*, char const*)+0x11c>
c000b1b6:	e8 59 fb ff ff       	call   c000ad14 <KiCreateSymlinkID()>
c000b1bb:	83 ec 0c             	sub    esp,0xc
c000b1be:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b1c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b1c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1c8:	56                   	push   esi
c000b1c9:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b1cd:	52                   	push   edx
c000b1ce:	6a 00                	push   0x0
c000b1d0:	6a 08                	push   0x8
c000b1d2:	53                   	push   ebx
c000b1d3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b1d6:	83 c4 20             	add    esp,0x20
c000b1d9:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b1de:	75 5e                	jne    c000b23e <KeCreateSymlink(char const*, char const*)+0x11c>
c000b1e0:	85 c0                	test   eax,eax
c000b1e2:	75 5a                	jne    c000b23e <KeCreateSymlink(char const*, char const*)+0x11c>
c000b1e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1e6:	83 ec 0c             	sub    esp,0xc
c000b1e9:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b1ec:	55                   	push   ebp
c000b1ed:	e8 8e 53 ff ff       	call   c0000580 <strlen>
c000b1f2:	31 d2                	xor    edx,edx
c000b1f4:	89 34 24             	mov    DWORD PTR [esp],esi
c000b1f7:	55                   	push   ebp
c000b1f8:	52                   	push   edx
c000b1f9:	50                   	push   eax
c000b1fa:	53                   	push   ebx
c000b1fb:	ff d7                	call   edi
c000b1fd:	83 c4 14             	add    esp,0x14
c000b200:	55                   	push   ebp
c000b201:	89 c6                	mov    esi,eax
c000b203:	e8 78 53 ff ff       	call   c0000580 <strlen>
c000b208:	83 c4 10             	add    esp,0x10
c000b20b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b20f:	75 2d                	jne    c000b23e <KeCreateSymlink(char const*, char const*)+0x11c>
c000b211:	85 f6                	test   esi,esi
c000b213:	75 29                	jne    c000b23e <KeCreateSymlink(char const*, char const*)+0x11c>
c000b215:	50                   	push   eax
c000b216:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b21a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b21e:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b222:	e8 30 fc ff ff       	call   c000ae57 <KeRegisterSymlink(char const*, unsigned long long)>
c000b227:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b22a:	e8 3b 07 00 00       	call   c000b96a <File::close()>
c000b22f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b231:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b234:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b237:	83 c4 10             	add    esp,0x10
c000b23a:	31 c0                	xor    eax,eax
c000b23c:	eb 19                	jmp    c000b257 <KeCreateSymlink(char const*, char const*)+0x135>
c000b23e:	83 ec 0c             	sub    esp,0xc
c000b241:	53                   	push   ebx
c000b242:	e8 23 07 00 00       	call   c000b96a <File::close()>
c000b247:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b249:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b24c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b24f:	83 c4 10             	add    esp,0x10
c000b252:	b8 01 00 00 00       	mov    eax,0x1
c000b257:	83 c4 2c             	add    esp,0x2c
c000b25a:	5b                   	pop    ebx
c000b25b:	5e                   	pop    esi
c000b25c:	5f                   	pop    edi
c000b25d:	5d                   	pop    ebp
c000b25e:	c3                   	ret    

c000b25f <KeInitialiseSymlinks()>:
c000b25f:	53                   	push   ebx
c000b260:	83 ec 10             	sub    esp,0x10
c000b263:	6a 00                	push   0x0
c000b265:	68 52 ae 00 c0       	push   0xc000ae52
c000b26a:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000b274:	e8 a9 58 00 00       	call   c0010b22 <KeRegisterAtexit(void (*)(void*), void*)>
c000b279:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b280:	e8 4e c8 ff ff       	call   c0007ad3 <malloc>
c000b285:	83 c4 0c             	add    esp,0xc
c000b288:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000b28e:	68 f8 12 02 c0       	push   0xc00212f8
c000b293:	50                   	push   eax
c000b294:	89 c3                	mov    ebx,eax
c000b296:	e8 a9 05 00 00       	call   c000b844 <File::File(char const*, Process*)>
c000b29b:	83 c4 10             	add    esp,0x10
c000b29e:	85 db                	test   ebx,ebx
c000b2a0:	75 10                	jne    c000b2b2 <KeInitialiseSymlinks()+0x53>
c000b2a2:	83 ec 0c             	sub    esp,0xc
c000b2a5:	68 a9 13 02 c0       	push   0xc00213a9
c000b2aa:	e8 5a 60 00 00       	call   c0011309 <KePanic(char const*)>
c000b2af:	83 c4 10             	add    esp,0x10
c000b2b2:	83 ec 0c             	sub    esp,0xc
c000b2b5:	53                   	push   ebx
c000b2b6:	e8 15 09 00 00       	call   c000bbd0 <File::exists()>
c000b2bb:	83 c4 10             	add    esp,0x10
c000b2be:	84 c0                	test   al,al
c000b2c0:	75 2d                	jne    c000b2ef <KeInitialiseSymlinks()+0x90>
c000b2c2:	52                   	push   edx
c000b2c3:	52                   	push   edx
c000b2c4:	6a 12                	push   0x12
c000b2c6:	53                   	push   ebx
c000b2c7:	e8 40 06 00 00       	call   c000b90c <File::open(FileOpenMode)>
c000b2cc:	83 c4 10             	add    esp,0x10
c000b2cf:	85 c0                	test   eax,eax
c000b2d1:	74 10                	je     c000b2e3 <KeInitialiseSymlinks()+0x84>
c000b2d3:	83 ec 0c             	sub    esp,0xc
c000b2d6:	68 c6 13 02 c0       	push   0xc00213c6
c000b2db:	e8 29 60 00 00       	call   c0011309 <KePanic(char const*)>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	83 ec 0c             	sub    esp,0xc
c000b2e6:	53                   	push   ebx
c000b2e7:	e8 7e 06 00 00       	call   c000b96a <File::close()>
c000b2ec:	83 c4 10             	add    esp,0x10
c000b2ef:	85 db                	test   ebx,ebx
c000b2f1:	74 0c                	je     c000b2ff <KeInitialiseSymlinks()+0xa0>
c000b2f3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2f5:	83 ec 0c             	sub    esp,0xc
c000b2f8:	53                   	push   ebx
c000b2f9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b2fc:	83 c4 10             	add    esp,0x10
c000b2ff:	50                   	push   eax
c000b300:	50                   	push   eax
c000b301:	68 e3 13 02 c0       	push   0xc00213e3
c000b306:	68 f1 13 02 c0       	push   0xc00213f1
c000b30b:	e8 12 fe ff ff       	call   c000b122 <KeCreateSymlink(char const*, char const*)>
c000b310:	83 c4 18             	add    esp,0x18
c000b313:	5b                   	pop    ebx
c000b314:	c3                   	ret    
c000b315:	90                   	nop

c000b316 <File::read(unsigned long long, void*, int*)>:
c000b316:	53                   	push   ebx
c000b317:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b31b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b31f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b326:	83 f8 19             	cmp    eax,0x19
c000b329:	77 35                	ja     c000b360 <File::read(unsigned long long, void*, int*)+0x4a>
c000b32b:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b332:	85 c0                	test   eax,eax
c000b334:	74 2a                	je     c000b360 <File::read(unsigned long long, void*, int*)+0x4a>
c000b336:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b33c:	85 c0                	test   eax,eax
c000b33e:	74 20                	je     c000b360 <File::read(unsigned long long, void*, int*)+0x4a>
c000b340:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b344:	74 21                	je     c000b367 <File::read(unsigned long long, void*, int*)+0x51>
c000b346:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b348:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b34c:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b352:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b356:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b35a:	5b                   	pop    ebx
c000b35b:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b35e:	ff e0                	jmp    eax
c000b360:	b8 0b 00 00 00       	mov    eax,0xb
c000b365:	eb 05                	jmp    c000b36c <File::read(unsigned long long, void*, int*)+0x56>
c000b367:	b8 05 00 00 00       	mov    eax,0x5
c000b36c:	5b                   	pop    ebx
c000b36d:	c3                   	ret    

c000b36e <File::write(unsigned long long, void*, int*)>:
c000b36e:	53                   	push   ebx
c000b36f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b373:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b377:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b37e:	83 f8 19             	cmp    eax,0x19
c000b381:	77 35                	ja     c000b3b8 <File::write(unsigned long long, void*, int*)+0x4a>
c000b383:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b38a:	85 c0                	test   eax,eax
c000b38c:	74 2a                	je     c000b3b8 <File::write(unsigned long long, void*, int*)+0x4a>
c000b38e:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b394:	85 c0                	test   eax,eax
c000b396:	74 20                	je     c000b3b8 <File::write(unsigned long long, void*, int*)+0x4a>
c000b398:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b39c:	74 21                	je     c000b3bf <File::write(unsigned long long, void*, int*)+0x51>
c000b39e:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b3a0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b3a4:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b3aa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3ae:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3b2:	5b                   	pop    ebx
c000b3b3:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b3b6:	ff e0                	jmp    eax
c000b3b8:	b8 0b 00 00 00       	mov    eax,0xb
c000b3bd:	eb 05                	jmp    c000b3c4 <File::write(unsigned long long, void*, int*)+0x56>
c000b3bf:	b8 05 00 00 00       	mov    eax,0x5
c000b3c4:	5b                   	pop    ebx
c000b3c5:	c3                   	ret    

c000b3c6 <Directory::read(unsigned long long, void*, int*)>:
c000b3c6:	53                   	push   ebx
c000b3c7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b3cb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b3cf:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b3d6:	83 f8 19             	cmp    eax,0x19
c000b3d9:	77 35                	ja     c000b410 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b3db:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b3e2:	85 c0                	test   eax,eax
c000b3e4:	74 2a                	je     c000b410 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b3e6:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b3ec:	85 c0                	test   eax,eax
c000b3ee:	74 20                	je     c000b410 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b3f0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b3f4:	74 21                	je     c000b417 <Directory::read(unsigned long long, void*, int*)+0x51>
c000b3f6:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b3f8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b3fc:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b402:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b406:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b40a:	5b                   	pop    ebx
c000b40b:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b40e:	ff e0                	jmp    eax
c000b410:	b8 0b 00 00 00       	mov    eax,0xb
c000b415:	eb 05                	jmp    c000b41c <Directory::read(unsigned long long, void*, int*)+0x56>
c000b417:	b8 05 00 00 00       	mov    eax,0x5
c000b41c:	5b                   	pop    ebx
c000b41d:	c3                   	ret    

c000b41e <Directory::write(unsigned long long, void*, int*)>:
c000b41e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b422:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b429:	b8 0b 00 00 00       	mov    eax,0xb
c000b42e:	83 fa 19             	cmp    edx,0x19
c000b431:	77 18                	ja     c000b44b <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b433:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b43a:	85 d2                	test   edx,edx
c000b43c:	74 0d                	je     c000b44b <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b43e:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b445:	19 c0                	sbb    eax,eax
c000b447:	83 e0 0a             	and    eax,0xa
c000b44a:	40                   	inc    eax
c000b44b:	c3                   	ret    

c000b44c <File::isAtty()>:
c000b44c:	31 c0                	xor    eax,eax
c000b44e:	c3                   	ret    
c000b44f:	90                   	nop

c000b450 <Directory::isAtty()>:
c000b450:	31 c0                	xor    eax,eax
c000b452:	c3                   	ret    
c000b453:	90                   	nop

c000b454 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b454:	b8 0a 00 00 00       	mov    eax,0xa
c000b459:	c3                   	ret    

c000b45a <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b45a:	b8 0a 00 00 00       	mov    eax,0xa
c000b45f:	c3                   	ret    

c000b460 <Filesystem::allocateSwapfile(char const*, int)>:
c000b460:	31 c0                	xor    eax,eax
c000b462:	31 d2                	xor    edx,edx
c000b464:	c3                   	ret    
c000b465:	90                   	nop

c000b466 <File::~File()>:
c000b466:	83 ec 0c             	sub    esp,0xc
c000b469:	ba d4 14 02 c0       	mov    edx,0xc00214d4
c000b46e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b472:	89 10                	mov    DWORD PTR [eax],edx
c000b474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b478:	83 ec 0c             	sub    esp,0xc
c000b47b:	50                   	push   eax
c000b47c:	e8 0b df ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000b481:	83 c4 10             	add    esp,0x10
c000b484:	90                   	nop
c000b485:	83 c4 0c             	add    esp,0xc
c000b488:	c3                   	ret    
c000b489:	90                   	nop

c000b48a <File::~File()>:
c000b48a:	83 ec 0c             	sub    esp,0xc
c000b48d:	83 ec 0c             	sub    esp,0xc
c000b490:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b494:	e8 cd ff ff ff       	call   c000b466 <File::~File()>
c000b499:	83 c4 10             	add    esp,0x10
c000b49c:	83 ec 08             	sub    esp,0x8
c000b49f:	68 14 01 00 00       	push   0x114
c000b4a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4a8:	e8 5f f3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b4ad:	83 c4 10             	add    esp,0x10
c000b4b0:	83 c4 0c             	add    esp,0xc
c000b4b3:	c3                   	ret    

c000b4b4 <Directory::~Directory()>:
c000b4b4:	83 ec 0c             	sub    esp,0xc
c000b4b7:	ba f0 14 02 c0       	mov    edx,0xc00214f0
c000b4bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4c0:	89 10                	mov    DWORD PTR [eax],edx
c000b4c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4c6:	83 ec 0c             	sub    esp,0xc
c000b4c9:	50                   	push   eax
c000b4ca:	e8 bd de ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000b4cf:	83 c4 10             	add    esp,0x10
c000b4d2:	90                   	nop
c000b4d3:	83 c4 0c             	add    esp,0xc
c000b4d6:	c3                   	ret    
c000b4d7:	90                   	nop

c000b4d8 <Directory::~Directory()>:
c000b4d8:	83 ec 0c             	sub    esp,0xc
c000b4db:	83 ec 0c             	sub    esp,0xc
c000b4de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4e2:	e8 cd ff ff ff       	call   c000b4b4 <Directory::~Directory()>
c000b4e7:	83 c4 10             	add    esp,0x10
c000b4ea:	83 ec 08             	sub    esp,0x8
c000b4ed:	68 14 01 00 00       	push   0x114
c000b4f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4f6:	e8 11 f3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b4fb:	83 c4 10             	add    esp,0x10
c000b4fe:	83 c4 0c             	add    esp,0xc
c000b501:	c3                   	ret    

c000b502 <Filesystem::Filesystem()>:
c000b502:	ba 68 14 02 c0       	mov    edx,0xc0021468
c000b507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50b:	89 10                	mov    DWORD PTR [eax],edx
c000b50d:	8b 15 04 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026404
c000b513:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b517:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b51a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b51e:	a3 04 64 02 c0       	mov    ds:0xc0026404,eax
c000b523:	90                   	nop
c000b524:	c3                   	ret    
c000b525:	90                   	nop

c000b526 <Filesystem::~Filesystem()>:
c000b526:	ba 68 14 02 c0       	mov    edx,0xc0021468
c000b52b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b52f:	89 10                	mov    DWORD PTR [eax],edx
c000b531:	90                   	nop
c000b532:	c3                   	ret    
c000b533:	90                   	nop

c000b534 <Filesystem::~Filesystem()>:
c000b534:	83 ec 0c             	sub    esp,0xc
c000b537:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b53b:	e8 e6 ff ff ff       	call   c000b526 <Filesystem::~Filesystem()>
c000b540:	83 c4 04             	add    esp,0x4
c000b543:	83 ec 08             	sub    esp,0x8
c000b546:	6a 08                	push   0x8
c000b548:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b54c:	e8 bb f2 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b551:	83 c4 10             	add    esp,0x10
c000b554:	83 c4 0c             	add    esp,0xc
c000b557:	c3                   	ret    

c000b558 <Fs::getcwd(Process*, char*, int)>:
c000b558:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b55c:	31 c0                	xor    eax,eax
c000b55e:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b562:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b565:	7d 15                	jge    c000b57c <Fs::getcwd(Process*, char*, int)+0x24>
c000b567:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b56b:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b572:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b575:	84 c9                	test   cl,cl
c000b577:	74 06                	je     c000b57f <Fs::getcwd(Process*, char*, int)+0x27>
c000b579:	40                   	inc    eax
c000b57a:	eb e2                	jmp    c000b55e <Fs::getcwd(Process*, char*, int)+0x6>
c000b57c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b57f:	31 c0                	xor    eax,eax
c000b581:	c3                   	ret    

c000b582 <Fs::initVFS()>:
c000b582:	83 ec 18             	sub    esp,0x18
c000b585:	6a 08                	push   0x8
c000b587:	e8 47 c5 ff ff       	call   c0007ad3 <malloc>
c000b58c:	89 04 24             	mov    DWORD PTR [esp],eax
c000b58f:	e8 e8 e1 00 00       	call   c001977c <FAT::FAT()>
c000b594:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b59b:	e8 33 c5 ff ff       	call   c0007ad3 <malloc>
c000b5a0:	89 04 24             	mov    DWORD PTR [esp],eax
c000b5a3:	e8 02 f1 00 00       	call   c001a6aa <ISO9660::ISO9660()>
c000b5a8:	83 c4 1c             	add    esp,0x1c
c000b5ab:	c3                   	ret    

c000b5ac <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c000b5ac:	55                   	push   ebp
c000b5ad:	57                   	push   edi
c000b5ae:	56                   	push   esi
c000b5af:	53                   	push   ebx
c000b5b0:	81 ec 20 04 00 00    	sub    esp,0x420
c000b5b6:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c000b5bd:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c000b5c4:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c000b5cb:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c000b5d2:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b5d6:	68 00 04 00 00       	push   0x400
c000b5db:	6a 00                	push   0x0
c000b5dd:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c000b5e1:	57                   	push   edi
c000b5e2:	e8 09 4f ff ff       	call   c00004f0 <memset>
c000b5e7:	83 c4 10             	add    esp,0x10
c000b5ea:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c000b5ee:	75 0b                	jne    c000b5fb <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c000b5f0:	50                   	push   eax
c000b5f1:	50                   	push   eax
c000b5f2:	56                   	push   esi
c000b5f3:	57                   	push   edi
c000b5f4:	e8 57 50 ff ff       	call   c0000650 <strcpy>
c000b5f9:	eb 45                	jmp    c000b640 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c000b5fb:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000b5fe:	83 f8 2f             	cmp    eax,0x2f
c000b601:	74 05                	je     c000b608 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c000b603:	83 f8 5c             	cmp    eax,0x5c
c000b606:	75 19                	jne    c000b621 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c000b608:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000b60b:	3c 60                	cmp    al,0x60
c000b60d:	7e 03                	jle    c000b612 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c000b60f:	83 e8 20             	sub    eax,0x20
c000b612:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b616:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b61d:	50                   	push   eax
c000b61e:	50                   	push   eax
c000b61f:	eb 18                	jmp    c000b639 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c000b621:	50                   	push   eax
c000b622:	50                   	push   eax
c000b623:	55                   	push   ebp
c000b624:	57                   	push   edi
c000b625:	e8 26 50 ff ff       	call   c0000650 <strcpy>
c000b62a:	58                   	pop    eax
c000b62b:	5a                   	pop    edx
c000b62c:	68 23 24 02 c0       	push   0xc0022423
c000b631:	57                   	push   edi
c000b632:	e8 39 52 ff ff       	call   c0000870 <strcat>
c000b637:	59                   	pop    ecx
c000b638:	5d                   	pop    ebp
c000b639:	56                   	push   esi
c000b63a:	57                   	push   edi
c000b63b:	e8 30 52 ff ff       	call   c0000870 <strcat>
c000b640:	83 c4 10             	add    esp,0x10
c000b643:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c000b647:	3c 60                	cmp    al,0x60
c000b649:	7e 03                	jle    c000b64e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c000b64b:	83 e8 20             	sub    eax,0x20
c000b64e:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b652:	be 03 00 00 00       	mov    esi,0x3
c000b657:	88 03                	mov    BYTE PTR [ebx],al
c000b659:	b8 03 00 00 00       	mov    eax,0x3
c000b65e:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b665:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b66b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b66f:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c000b674:	89 fa                	mov    edx,edi
c000b676:	0f be ea             	movsx  ebp,dl
c000b679:	85 ed                	test   ebp,ebp
c000b67b:	0f 84 a1 00 00 00    	je     c000b722 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c000b681:	8d 56 01             	lea    edx,[esi+0x1]
c000b684:	83 fd 2f             	cmp    ebp,0x2f
c000b687:	74 05                	je     c000b68e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c000b689:	83 fd 5c             	cmp    ebp,0x5c
c000b68c:	75 12                	jne    c000b6a0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c000b68e:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b693:	89 c5                	mov    ebp,eax
c000b695:	74 09                	je     c000b6a0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c000b697:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b69b:	40                   	inc    eax
c000b69c:	89 d6                	mov    esi,edx
c000b69e:	eb cf                	jmp    c000b66f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c000b6a0:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c000b6a5:	89 f9                	mov    ecx,edi
c000b6a7:	0f be e9             	movsx  ebp,cl
c000b6aa:	75 61                	jne    c000b70d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c000b6ac:	83 fd 2e             	cmp    ebp,0x2e
c000b6af:	75 5c                	jne    c000b70d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c000b6b1:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c000b6b6:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c000b6bb:	74 19                	je     c000b6d6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c000b6bd:	83 fd 2e             	cmp    ebp,0x2e
c000b6c0:	74 55                	je     c000b717 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c000b6c2:	89 f2                	mov    edx,esi
c000b6c4:	42                   	inc    edx
c000b6c5:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c000b6ca:	83 f9 2f             	cmp    ecx,0x2f
c000b6cd:	74 f5                	je     c000b6c4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c000b6cf:	83 f9 5c             	cmp    ecx,0x5c
c000b6d2:	74 f0                	je     c000b6c4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c000b6d4:	eb c6                	jmp    c000b69c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b6d6:	83 fd 2e             	cmp    ebp,0x2e
c000b6d9:	74 3c                	je     c000b717 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c000b6db:	83 f8 03             	cmp    eax,0x3
c000b6de:	74 bc                	je     c000b69c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b6e0:	42                   	inc    edx
c000b6e1:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c000b6e6:	83 f9 2f             	cmp    ecx,0x2f
c000b6e9:	74 f5                	je     c000b6e0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c000b6eb:	83 f9 5c             	cmp    ecx,0x5c
c000b6ee:	74 f0                	je     c000b6e0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c000b6f0:	48                   	dec    eax
c000b6f1:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b6f5:	75 06                	jne    c000b6fd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c000b6f7:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b6fb:	eb f3                	jmp    c000b6f0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c000b6fd:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b701:	74 07                	je     c000b70a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c000b703:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b707:	48                   	dec    eax
c000b708:	eb f3                	jmp    c000b6fd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c000b70a:	40                   	inc    eax
c000b70b:	eb 8f                	jmp    c000b69c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b70d:	83 fd 2f             	cmp    ebp,0x2f
c000b710:	74 8a                	je     c000b69c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b712:	83 fd 5c             	cmp    ebp,0x5c
c000b715:	74 85                	je     c000b69c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b717:	89 f9                	mov    ecx,edi
c000b719:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000b71c:	40                   	inc    eax
c000b71d:	e9 7a ff ff ff       	jmp    c000b69c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b722:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b726:	83 ec 0c             	sub    esp,0xc
c000b729:	53                   	push   ebx
c000b72a:	e8 51 4e ff ff       	call   c0000580 <strlen>
c000b72f:	83 c4 10             	add    esp,0x10
c000b732:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000b737:	75 26                	jne    c000b75f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1b3>
c000b739:	83 ec 0c             	sub    esp,0xc
c000b73c:	53                   	push   ebx
c000b73d:	e8 3e 4e ff ff       	call   c0000580 <strlen>
c000b742:	83 c4 10             	add    esp,0x10
c000b745:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000b74a:	74 26                	je     c000b772 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1c6>
c000b74c:	83 ec 0c             	sub    esp,0xc
c000b74f:	53                   	push   ebx
c000b750:	e8 2b 4e ff ff       	call   c0000580 <strlen>
c000b755:	83 c4 10             	add    esp,0x10
c000b758:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b75d:	eb c7                	jmp    c000b726 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c000b75f:	83 ec 0c             	sub    esp,0xc
c000b762:	53                   	push   ebx
c000b763:	e8 18 4e ff ff       	call   c0000580 <strlen>
c000b768:	83 c4 10             	add    esp,0x10
c000b76b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b770:	74 c7                	je     c000b739 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x18d>
c000b772:	83 ec 0c             	sub    esp,0xc
c000b775:	53                   	push   ebx
c000b776:	e8 05 4e ff ff       	call   c0000580 <strlen>
c000b77b:	0f be 7c 03 fe       	movsx  edi,BYTE PTR [ebx+eax*1-0x2]
c000b780:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b783:	e8 f8 4d ff ff       	call   c0000580 <strlen>
c000b788:	57                   	push   edi
c000b789:	0f be 44 03 ff       	movsx  eax,BYTE PTR [ebx+eax*1-0x1]
c000b78e:	50                   	push   eax
c000b78f:	53                   	push   ebx
c000b790:	68 0f 14 02 c0       	push   0xc002140f
c000b795:	e8 70 f1 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b79a:	83 c4 14             	add    esp,0x14
c000b79d:	53                   	push   ebx
c000b79e:	e8 dd 4d ff ff       	call   c0000580 <strlen>
c000b7a3:	83 c4 10             	add    esp,0x10
c000b7a6:	80 7c 03 ff 40       	cmp    BYTE PTR [ebx+eax*1-0x1],0x40
c000b7ab:	74 09                	je     c000b7b6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20a>
c000b7ad:	31 ff                	xor    edi,edi
c000b7af:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c000b7b4:	eb 66                	jmp    c000b81c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x270>
c000b7b6:	83 ec 0c             	sub    esp,0xc
c000b7b9:	53                   	push   ebx
c000b7ba:	e8 c1 4d ff ff       	call   c0000580 <strlen>
c000b7bf:	83 c4 10             	add    esp,0x10
c000b7c2:	80 7c 03 fe 40       	cmp    BYTE PTR [ebx+eax*1-0x2],0x40
c000b7c7:	75 e4                	jne    c000b7ad <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x201>
c000b7c9:	83 ec 0c             	sub    esp,0xc
c000b7cc:	53                   	push   ebx
c000b7cd:	e8 ae 4d ff ff       	call   c0000580 <strlen>
c000b7d2:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b7d7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b7da:	e8 a1 4d ff ff       	call   c0000580 <strlen>
c000b7df:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b7e4:	5e                   	pop    esi
c000b7e5:	5f                   	pop    edi
c000b7e6:	53                   	push   ebx
c000b7e7:	68 22 14 02 c0       	push   0xc0021422
c000b7ec:	e8 19 f1 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b7f1:	83 c4 10             	add    esp,0x10
c000b7f4:	eb 43                	jmp    c000b839 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x28d>
c000b7f6:	50                   	push   eax
c000b7f7:	50                   	push   eax
c000b7f8:	53                   	push   ebx
c000b7f9:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000b7fd:	55                   	push   ebp
c000b7fe:	e8 4d 4e ff ff       	call   c0000650 <strcpy>
c000b803:	5a                   	pop    edx
c000b804:	59                   	pop    ecx
c000b805:	53                   	push   ebx
c000b806:	55                   	push   ebp
c000b807:	e8 01 f7 ff ff       	call   c000af0d <KeDereferenceSymlink(char const*, char*)>
c000b80c:	83 c4 10             	add    esp,0x10
c000b80f:	48                   	dec    eax
c000b810:	75 27                	jne    c000b839 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x28d>
c000b812:	8d 47 01             	lea    eax,[edi+0x1]
c000b815:	83 ff 14             	cmp    edi,0x14
c000b818:	74 08                	je     c000b822 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x276>
c000b81a:	89 c7                	mov    edi,eax
c000b81c:	85 f6                	test   esi,esi
c000b81e:	75 d6                	jne    c000b7f6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x24a>
c000b820:	eb 17                	jmp    c000b839 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x28d>
c000b822:	83 ec 0c             	sub    esp,0xc
c000b825:	bf 15 00 00 00       	mov    edi,0x15
c000b82a:	68 37 14 02 c0       	push   0xc0021437
c000b82f:	e8 d5 5a 00 00       	call   c0011309 <KePanic(char const*)>
c000b834:	83 c4 10             	add    esp,0x10
c000b837:	eb e3                	jmp    c000b81c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x270>
c000b839:	81 c4 1c 04 00 00    	add    esp,0x41c
c000b83f:	5b                   	pop    ebx
c000b840:	5e                   	pop    esi
c000b841:	5f                   	pop    edi
c000b842:	5d                   	pop    ebp
c000b843:	c3                   	ret    

c000b844 <File::File(char const*, Process*)>:
c000b844:	83 ec 0c             	sub    esp,0xc
c000b847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b84b:	83 ec 08             	sub    esp,0x8
c000b84e:	6a 00                	push   0x0
c000b850:	50                   	push   eax
c000b851:	e8 50 d9 ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000b856:	83 c4 10             	add    esp,0x10
c000b859:	ba d4 14 02 c0       	mov    edx,0xc00214d4
c000b85e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b862:	89 10                	mov    DWORD PTR [eax],edx
c000b864:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000b869:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000b86d:	0f 95 c0             	setne  al
c000b870:	0f b6 c0             	movzx  eax,al
c000b873:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b877:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000b87d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b881:	83 c2 0d             	add    edx,0xd
c000b884:	50                   	push   eax
c000b885:	51                   	push   ecx
c000b886:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88a:	52                   	push   edx
c000b88b:	e8 1c fd ff ff       	call   c000b5ac <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000b890:	83 c4 10             	add    esp,0x10
c000b893:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b897:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b89a:	83 e8 41             	sub    eax,0x41
c000b89d:	88 c2                	mov    dl,al
c000b89f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8a3:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b8a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8ad:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b8b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8b5:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b8bb:	0f b6 c0             	movzx  eax,al
c000b8be:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b8c5:	85 c0                	test   eax,eax
c000b8c7:	74 3e                	je     c000b907 <File::File(char const*, Process*)+0xc3>
c000b8c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8cd:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b8d3:	0f b6 c0             	movzx  eax,al
c000b8d6:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b8dd:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b8e3:	85 c0                	test   eax,eax
c000b8e5:	75 20                	jne    c000b907 <File::File(char const*, Process*)+0xc3>
c000b8e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8eb:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b8f1:	0f b6 c0             	movzx  eax,al
c000b8f4:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b8fb:	83 ec 0c             	sub    esp,0xc
c000b8fe:	50                   	push   eax
c000b8ff:	e8 90 21 00 00       	call   c000da94 <LogicalDisk::mount()>
c000b904:	83 c4 10             	add    esp,0x10
c000b907:	90                   	nop
c000b908:	83 c4 0c             	add    esp,0xc
c000b90b:	c3                   	ret    

c000b90c <File::open(FileOpenMode)>:
c000b90c:	53                   	push   ebx
c000b90d:	b8 0b 00 00 00       	mov    eax,0xb
c000b912:	83 ec 08             	sub    esp,0x8
c000b915:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b919:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b920:	83 fa 19             	cmp    edx,0x19
c000b923:	77 40                	ja     c000b965 <File::open(FileOpenMode)+0x59>
c000b925:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b92c:	85 d2                	test   edx,edx
c000b92e:	74 35                	je     c000b965 <File::open(FileOpenMode)+0x59>
c000b930:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b936:	85 d2                	test   edx,edx
c000b938:	74 2b                	je     c000b965 <File::open(FileOpenMode)+0x59>
c000b93a:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b93e:	b8 06 00 00 00       	mov    eax,0x6
c000b943:	75 20                	jne    c000b965 <File::open(FileOpenMode)+0x59>
c000b945:	8b 02                	mov    eax,DWORD PTR [edx]
c000b947:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b94d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b951:	51                   	push   ecx
c000b952:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b955:	51                   	push   ecx
c000b956:	52                   	push   edx
c000b957:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b95a:	83 c4 10             	add    esp,0x10
c000b95d:	85 c0                	test   eax,eax
c000b95f:	75 04                	jne    c000b965 <File::open(FileOpenMode)+0x59>
c000b961:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b965:	83 c4 08             	add    esp,0x8
c000b968:	5b                   	pop    ebx
c000b969:	c3                   	ret    

c000b96a <File::close()>:
c000b96a:	53                   	push   ebx
c000b96b:	b8 0b 00 00 00       	mov    eax,0xb
c000b970:	83 ec 08             	sub    esp,0x8
c000b973:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b977:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b97e:	83 f9 19             	cmp    ecx,0x19
c000b981:	77 41                	ja     c000b9c4 <File::close()+0x5a>
c000b983:	8b 1c 8d 80 88 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7780]
c000b98a:	85 db                	test   ebx,ebx
c000b98c:	74 36                	je     c000b9c4 <File::close()+0x5a>
c000b98e:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b995:	74 2d                	je     c000b9c4 <File::close()+0x5a>
c000b997:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b99b:	b8 05 00 00 00       	mov    eax,0x5
c000b9a0:	74 22                	je     c000b9c4 <File::close()+0x5a>
c000b9a2:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b9a6:	8b 04 8d 80 88 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7780]
c000b9ad:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b9b3:	53                   	push   ebx
c000b9b4:	53                   	push   ebx
c000b9b5:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b9b7:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b9bd:	50                   	push   eax
c000b9be:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b9c1:	83 c4 10             	add    esp,0x10
c000b9c4:	83 c4 08             	add    esp,0x8
c000b9c7:	5b                   	pop    ebx
c000b9c8:	c3                   	ret    
c000b9c9:	90                   	nop

c000b9ca <File::seek(unsigned long long)>:
c000b9ca:	56                   	push   esi
c000b9cb:	b8 0b 00 00 00       	mov    eax,0xb
c000b9d0:	53                   	push   ebx
c000b9d1:	51                   	push   ecx
c000b9d2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b9d6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b9da:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b9de:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b9e5:	83 fa 19             	cmp    edx,0x19
c000b9e8:	77 31                	ja     c000ba1b <File::seek(unsigned long long)+0x51>
c000b9ea:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b9f1:	85 d2                	test   edx,edx
c000b9f3:	74 26                	je     c000ba1b <File::seek(unsigned long long)+0x51>
c000b9f5:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b9fb:	85 d2                	test   edx,edx
c000b9fd:	74 1c                	je     c000ba1b <File::seek(unsigned long long)+0x51>
c000b9ff:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ba03:	b8 05 00 00 00       	mov    eax,0x5
c000ba08:	74 11                	je     c000ba1b <File::seek(unsigned long long)+0x51>
c000ba0a:	8b 02                	mov    eax,DWORD PTR [edx]
c000ba0c:	53                   	push   ebx
c000ba0d:	51                   	push   ecx
c000ba0e:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ba14:	52                   	push   edx
c000ba15:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ba18:	83 c4 10             	add    esp,0x10
c000ba1b:	5a                   	pop    edx
c000ba1c:	5b                   	pop    ebx
c000ba1d:	5e                   	pop    esi
c000ba1e:	c3                   	ret    
c000ba1f:	90                   	nop

c000ba20 <File::truncate(unsigned long long)>:
c000ba20:	56                   	push   esi
c000ba21:	b8 0b 00 00 00       	mov    eax,0xb
c000ba26:	53                   	push   ebx
c000ba27:	51                   	push   ecx
c000ba28:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ba2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ba30:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ba34:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000ba3b:	83 fa 19             	cmp    edx,0x19
c000ba3e:	77 31                	ja     c000ba71 <File::truncate(unsigned long long)+0x51>
c000ba40:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000ba47:	85 d2                	test   edx,edx
c000ba49:	74 26                	je     c000ba71 <File::truncate(unsigned long long)+0x51>
c000ba4b:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ba51:	85 d2                	test   edx,edx
c000ba53:	74 1c                	je     c000ba71 <File::truncate(unsigned long long)+0x51>
c000ba55:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ba59:	b8 05 00 00 00       	mov    eax,0x5
c000ba5e:	74 11                	je     c000ba71 <File::truncate(unsigned long long)+0x51>
c000ba60:	8b 02                	mov    eax,DWORD PTR [edx]
c000ba62:	53                   	push   ebx
c000ba63:	51                   	push   ecx
c000ba64:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ba6a:	52                   	push   edx
c000ba6b:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000ba6e:	83 c4 10             	add    esp,0x10
c000ba71:	5a                   	pop    edx
c000ba72:	5b                   	pop    ebx
c000ba73:	5e                   	pop    esi
c000ba74:	c3                   	ret    
c000ba75:	90                   	nop

c000ba76 <File::tell(unsigned long long*)>:
c000ba76:	83 ec 0c             	sub    esp,0xc
c000ba79:	b8 0b 00 00 00       	mov    eax,0xb
c000ba7e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ba82:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ba89:	83 fa 19             	cmp    edx,0x19
c000ba8c:	77 34                	ja     c000bac2 <File::tell(unsigned long long*)+0x4c>
c000ba8e:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000ba95:	85 d2                	test   edx,edx
c000ba97:	74 29                	je     c000bac2 <File::tell(unsigned long long*)+0x4c>
c000ba99:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ba9f:	85 d2                	test   edx,edx
c000baa1:	74 1f                	je     c000bac2 <File::tell(unsigned long long*)+0x4c>
c000baa3:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000baa7:	b8 05 00 00 00       	mov    eax,0x5
c000baac:	74 14                	je     c000bac2 <File::tell(unsigned long long*)+0x4c>
c000baae:	50                   	push   eax
c000baaf:	8b 02                	mov    eax,DWORD PTR [edx]
c000bab1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bab5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000babb:	52                   	push   edx
c000babc:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000babf:	83 c4 10             	add    esp,0x10
c000bac2:	83 c4 0c             	add    esp,0xc
c000bac5:	c3                   	ret    

c000bac6 <File::rewind()>:
c000bac6:	83 ec 10             	sub    esp,0x10
c000bac9:	6a 00                	push   0x0
c000bacb:	6a 00                	push   0x0
c000bacd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bad1:	e8 f4 fe ff ff       	call   c000b9ca <File::seek(unsigned long long)>
c000bad6:	83 c4 1c             	add    esp,0x1c
c000bad9:	c3                   	ret    

c000bada <File::unlink()>:
c000bada:	83 ec 0c             	sub    esp,0xc
c000badd:	b8 0b 00 00 00       	mov    eax,0xb
c000bae2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bae6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000baed:	83 f9 19             	cmp    ecx,0x19
c000baf0:	77 2f                	ja     c000bb21 <File::unlink()+0x47>
c000baf2:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000baf9:	85 c9                	test   ecx,ecx
c000bafb:	74 24                	je     c000bb21 <File::unlink()+0x47>
c000bafd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bb03:	85 c9                	test   ecx,ecx
c000bb05:	74 1a                	je     c000bb21 <File::unlink()+0x47>
c000bb07:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bb0b:	b8 06 00 00 00       	mov    eax,0x6
c000bb10:	75 0f                	jne    c000bb21 <File::unlink()+0x47>
c000bb12:	50                   	push   eax
c000bb13:	83 c2 0d             	add    edx,0xd
c000bb16:	50                   	push   eax
c000bb17:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bb19:	52                   	push   edx
c000bb1a:	51                   	push   ecx
c000bb1b:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bb1e:	83 c4 10             	add    esp,0x10
c000bb21:	83 c4 0c             	add    esp,0xc
c000bb24:	c3                   	ret    
c000bb25:	90                   	nop

c000bb26 <File::rename(char const*)>:
c000bb26:	83 ec 0c             	sub    esp,0xc
c000bb29:	b8 0b 00 00 00       	mov    eax,0xb
c000bb2e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bb32:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bb39:	83 f9 19             	cmp    ecx,0x19
c000bb3c:	77 32                	ja     c000bb70 <File::rename(char const*)+0x4a>
c000bb3e:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bb45:	85 c9                	test   ecx,ecx
c000bb47:	74 27                	je     c000bb70 <File::rename(char const*)+0x4a>
c000bb49:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bb4f:	85 c9                	test   ecx,ecx
c000bb51:	74 1d                	je     c000bb70 <File::rename(char const*)+0x4a>
c000bb53:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bb57:	b8 06 00 00 00       	mov    eax,0x6
c000bb5c:	75 12                	jne    c000bb70 <File::rename(char const*)+0x4a>
c000bb5e:	50                   	push   eax
c000bb5f:	83 c2 0d             	add    edx,0xd
c000bb62:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bb64:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb68:	52                   	push   edx
c000bb69:	51                   	push   ecx
c000bb6a:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bb6d:	83 c4 10             	add    esp,0x10
c000bb70:	83 c4 0c             	add    esp,0xc
c000bb73:	c3                   	ret    

c000bb74 <File::chfatattr(unsigned char, unsigned char)>:
c000bb74:	57                   	push   edi
c000bb75:	b8 0b 00 00 00       	mov    eax,0xb
c000bb7a:	56                   	push   esi
c000bb7b:	53                   	push   ebx
c000bb7c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bb80:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bb84:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bb88:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bb8f:	83 f9 19             	cmp    ecx,0x19
c000bb92:	77 37                	ja     c000bbcb <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bb94:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bb9b:	85 c9                	test   ecx,ecx
c000bb9d:	74 2c                	je     c000bbcb <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bb9f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bba5:	85 c9                	test   ecx,ecx
c000bba7:	74 22                	je     c000bbcb <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bba9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bbad:	b8 06 00 00 00       	mov    eax,0x6
c000bbb2:	75 17                	jne    c000bbcb <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bbb4:	89 f0                	mov    eax,esi
c000bbb6:	8b 39                	mov    edi,DWORD PTR [ecx]
c000bbb8:	0f b6 db             	movzx  ebx,bl
c000bbbb:	0f b6 f0             	movzx  esi,al
c000bbbe:	83 c2 0d             	add    edx,0xd
c000bbc1:	56                   	push   esi
c000bbc2:	53                   	push   ebx
c000bbc3:	52                   	push   edx
c000bbc4:	51                   	push   ecx
c000bbc5:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000bbc8:	83 c4 10             	add    esp,0x10
c000bbcb:	5b                   	pop    ebx
c000bbcc:	5e                   	pop    esi
c000bbcd:	5f                   	pop    edi
c000bbce:	c3                   	ret    
c000bbcf:	90                   	nop

c000bbd0 <File::exists()>:
c000bbd0:	83 ec 0c             	sub    esp,0xc
c000bbd3:	31 c0                	xor    eax,eax
c000bbd5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bbd9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bbe0:	83 f9 19             	cmp    ecx,0x19
c000bbe3:	77 24                	ja     c000bc09 <File::exists()+0x39>
c000bbe5:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bbec:	85 c9                	test   ecx,ecx
c000bbee:	74 19                	je     c000bc09 <File::exists()+0x39>
c000bbf0:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bbf6:	85 c9                	test   ecx,ecx
c000bbf8:	74 0f                	je     c000bc09 <File::exists()+0x39>
c000bbfa:	50                   	push   eax
c000bbfb:	83 c2 0d             	add    edx,0xd
c000bbfe:	50                   	push   eax
c000bbff:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bc01:	52                   	push   edx
c000bc02:	51                   	push   ecx
c000bc03:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000bc06:	83 c4 10             	add    esp,0x10
c000bc09:	83 c4 0c             	add    esp,0xc
c000bc0c:	c3                   	ret    
c000bc0d:	90                   	nop

c000bc0e <File::stat(unsigned long long*, bool*)>:
c000bc0e:	56                   	push   esi
c000bc0f:	53                   	push   ebx
c000bc10:	50                   	push   eax
c000bc11:	b8 0b 00 00 00       	mov    eax,0xb
c000bc16:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bc1a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bc1e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bc22:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bc29:	83 f9 19             	cmp    ecx,0x19
c000bc2c:	77 3d                	ja     c000bc6b <File::stat(unsigned long long*, bool*)+0x5d>
c000bc2e:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bc35:	85 c9                	test   ecx,ecx
c000bc37:	74 32                	je     c000bc6b <File::stat(unsigned long long*, bool*)+0x5d>
c000bc39:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bc3f:	85 c9                	test   ecx,ecx
c000bc41:	74 28                	je     c000bc6b <File::stat(unsigned long long*, bool*)+0x5d>
c000bc43:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bc47:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bc49:	74 13                	je     c000bc5e <File::stat(unsigned long long*, bool*)+0x50>
c000bc4b:	83 ec 04             	sub    esp,0x4
c000bc4e:	56                   	push   esi
c000bc4f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bc55:	51                   	push   ecx
c000bc56:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000bc59:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000bc5c:	eb 0a                	jmp    c000bc68 <File::stat(unsigned long long*, bool*)+0x5a>
c000bc5e:	53                   	push   ebx
c000bc5f:	83 c2 0d             	add    edx,0xd
c000bc62:	56                   	push   esi
c000bc63:	52                   	push   edx
c000bc64:	51                   	push   ecx
c000bc65:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000bc68:	83 c4 10             	add    esp,0x10
c000bc6b:	5a                   	pop    edx
c000bc6c:	5b                   	pop    ebx
c000bc6d:	5e                   	pop    esi
c000bc6e:	c3                   	ret    

c000bc6f <Fs::setcwd(Process*, char*)>:
c000bc6f:	55                   	push   ebp
c000bc70:	57                   	push   edi
c000bc71:	56                   	push   esi
c000bc72:	53                   	push   ebx
c000bc73:	81 ec 1c 02 00 00    	sub    esp,0x21c
c000bc79:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000bc80:	6a 00                	push   0x0
c000bc82:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bc88:	57                   	push   edi
c000bc89:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000bc90:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000bc94:	56                   	push   esi
c000bc95:	e8 12 f9 ff ff       	call   c000b5ac <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bc9a:	89 34 24             	mov    DWORD PTR [esp],esi
c000bc9d:	e8 de 48 ff ff       	call   c0000580 <strlen>
c000bca2:	83 c4 10             	add    esp,0x10
c000bca5:	83 f8 02             	cmp    eax,0x2
c000bca8:	77 15                	ja     c000bcbf <Fs::setcwd(Process*, char*)+0x50>
c000bcaa:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bcaf:	83 eb 41             	sub    ebx,0x41
c000bcb2:	8b 04 9d 80 88 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7780]
c000bcb9:	85 c0                	test   eax,eax
c000bcbb:	75 1c                	jne    c000bcd9 <Fs::setcwd(Process*, char*)+0x6a>
c000bcbd:	eb 2f                	jmp    c000bcee <Fs::setcwd(Process*, char*)+0x7f>
c000bcbf:	83 ec 0c             	sub    esp,0xc
c000bcc2:	56                   	push   esi
c000bcc3:	e8 b8 48 ff ff       	call   c0000580 <strlen>
c000bcc8:	83 c4 10             	add    esp,0x10
c000bccb:	83 f8 03             	cmp    eax,0x3
c000bcce:	75 57                	jne    c000bd27 <Fs::setcwd(Process*, char*)+0xb8>
c000bcd0:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bcd5:	75 50                	jne    c000bd27 <Fs::setcwd(Process*, char*)+0xb8>
c000bcd7:	eb d1                	jmp    c000bcaa <Fs::setcwd(Process*, char*)+0x3b>
c000bcd9:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bce0:	75 0c                	jne    c000bcee <Fs::setcwd(Process*, char*)+0x7f>
c000bce2:	83 ec 0c             	sub    esp,0xc
c000bce5:	50                   	push   eax
c000bce6:	e8 a9 1d 00 00       	call   c000da94 <LogicalDisk::mount()>
c000bceb:	83 c4 10             	add    esp,0x10
c000bcee:	83 fb 19             	cmp    ebx,0x19
c000bcf1:	b8 03 00 00 00       	mov    eax,0x3
c000bcf6:	0f 87 c6 00 00 00    	ja     c000bdc2 <Fs::setcwd(Process*, char*)+0x153>
c000bcfc:	8b 14 9d 80 88 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd7780]
c000bd03:	b8 05 00 00 00       	mov    eax,0x5
c000bd08:	85 d2                	test   edx,edx
c000bd0a:	0f 84 b2 00 00 00    	je     c000bdc2 <Fs::setcwd(Process*, char*)+0x153>
c000bd10:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bd17:	b8 06 00 00 00       	mov    eax,0x6
c000bd1c:	0f 85 92 00 00 00    	jne    c000bdb4 <Fs::setcwd(Process*, char*)+0x145>
c000bd22:	e9 9b 00 00 00       	jmp    c000bdc2 <Fs::setcwd(Process*, char*)+0x153>
c000bd27:	83 ec 0c             	sub    esp,0xc
c000bd2a:	68 14 01 00 00       	push   0x114
c000bd2f:	e8 9f bd ff ff       	call   c0007ad3 <malloc>
c000bd34:	83 c4 0c             	add    esp,0xc
c000bd37:	55                   	push   ebp
c000bd38:	56                   	push   esi
c000bd39:	50                   	push   eax
c000bd3a:	89 c3                	mov    ebx,eax
c000bd3c:	e8 03 fb ff ff       	call   c000b844 <File::File(char const*, Process*)>
c000bd41:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bd46:	83 c4 0c             	add    esp,0xc
c000bd49:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bd4d:	50                   	push   eax
c000bd4e:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bd52:	50                   	push   eax
c000bd53:	53                   	push   ebx
c000bd54:	e8 b5 fe ff ff       	call   c000bc0e <File::stat(unsigned long long*, bool*)>
c000bd59:	83 c4 10             	add    esp,0x10
c000bd5c:	83 f8 02             	cmp    eax,0x2
c000bd5f:	74 27                	je     c000bd88 <Fs::setcwd(Process*, char*)+0x119>
c000bd61:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bd66:	75 1c                	jne    c000bd84 <Fs::setcwd(Process*, char*)+0x115>
c000bd68:	85 db                	test   ebx,ebx
c000bd6a:	b8 02 00 00 00       	mov    eax,0x2
c000bd6f:	74 51                	je     c000bdc2 <Fs::setcwd(Process*, char*)+0x153>
c000bd71:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bd73:	83 ec 0c             	sub    esp,0xc
c000bd76:	53                   	push   ebx
c000bd77:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bd7a:	83 c4 10             	add    esp,0x10
c000bd7d:	b8 02 00 00 00       	mov    eax,0x2
c000bd82:	eb 3e                	jmp    c000bdc2 <Fs::setcwd(Process*, char*)+0x153>
c000bd84:	85 c0                	test   eax,eax
c000bd86:	74 1c                	je     c000bda4 <Fs::setcwd(Process*, char*)+0x135>
c000bd88:	85 db                	test   ebx,ebx
c000bd8a:	b8 01 00 00 00       	mov    eax,0x1
c000bd8f:	74 31                	je     c000bdc2 <Fs::setcwd(Process*, char*)+0x153>
c000bd91:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bd93:	83 ec 0c             	sub    esp,0xc
c000bd96:	53                   	push   ebx
c000bd97:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bd9a:	83 c4 10             	add    esp,0x10
c000bd9d:	b8 01 00 00 00       	mov    eax,0x1
c000bda2:	eb 1e                	jmp    c000bdc2 <Fs::setcwd(Process*, char*)+0x153>
c000bda4:	85 db                	test   ebx,ebx
c000bda6:	74 0c                	je     c000bdb4 <Fs::setcwd(Process*, char*)+0x145>
c000bda8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bdaa:	83 ec 0c             	sub    esp,0xc
c000bdad:	53                   	push   ebx
c000bdae:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bdb1:	83 c4 10             	add    esp,0x10
c000bdb4:	50                   	push   eax
c000bdb5:	50                   	push   eax
c000bdb6:	56                   	push   esi
c000bdb7:	57                   	push   edi
c000bdb8:	e8 93 48 ff ff       	call   c0000650 <strcpy>
c000bdbd:	83 c4 10             	add    esp,0x10
c000bdc0:	31 c0                	xor    eax,eax
c000bdc2:	81 c4 1c 02 00 00    	add    esp,0x21c
c000bdc8:	5b                   	pop    ebx
c000bdc9:	5e                   	pop    esi
c000bdca:	5f                   	pop    edi
c000bdcb:	5d                   	pop    ebp
c000bdcc:	c3                   	ret    
c000bdcd:	90                   	nop

c000bdce <Directory::Directory(char const*, Process*)>:
c000bdce:	83 ec 0c             	sub    esp,0xc
c000bdd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdd5:	83 ec 08             	sub    esp,0x8
c000bdd8:	6a 00                	push   0x0
c000bdda:	50                   	push   eax
c000bddb:	e8 c6 d3 ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	ba f0 14 02 c0       	mov    edx,0xc00214f0
c000bde8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdec:	89 10                	mov    DWORD PTR [eax],edx
c000bdee:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000bdf3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000bdf7:	0f 95 c0             	setne  al
c000bdfa:	0f b6 c0             	movzx  eax,al
c000bdfd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000be01:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000be07:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be0b:	83 c2 0d             	add    edx,0xd
c000be0e:	50                   	push   eax
c000be0f:	51                   	push   ecx
c000be10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be14:	52                   	push   edx
c000be15:	e8 92 f7 ff ff       	call   c000b5ac <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000be1a:	83 c4 10             	add    esp,0x10
c000be1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be21:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000be24:	83 e8 41             	sub    eax,0x41
c000be27:	88 c2                	mov    dl,al
c000be29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be2d:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000be33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be37:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000be3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be3f:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000be45:	0f b6 c0             	movzx  eax,al
c000be48:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000be4f:	85 c0                	test   eax,eax
c000be51:	74 3e                	je     c000be91 <Directory::Directory(char const*, Process*)+0xc3>
c000be53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be57:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000be5d:	0f b6 c0             	movzx  eax,al
c000be60:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000be67:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000be6d:	85 c0                	test   eax,eax
c000be6f:	75 20                	jne    c000be91 <Directory::Directory(char const*, Process*)+0xc3>
c000be71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be75:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000be7b:	0f b6 c0             	movzx  eax,al
c000be7e:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000be85:	83 ec 0c             	sub    esp,0xc
c000be88:	50                   	push   eax
c000be89:	e8 06 1c 00 00       	call   c000da94 <LogicalDisk::mount()>
c000be8e:	83 c4 10             	add    esp,0x10
c000be91:	90                   	nop
c000be92:	83 c4 0c             	add    esp,0xc
c000be95:	c3                   	ret    

c000be96 <Directory::open()>:
c000be96:	53                   	push   ebx
c000be97:	b8 0b 00 00 00       	mov    eax,0xb
c000be9c:	83 ec 08             	sub    esp,0x8
c000be9f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bea3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000beaa:	83 fa 19             	cmp    edx,0x19
c000bead:	77 3d                	ja     c000beec <Directory::open()+0x56>
c000beaf:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000beb6:	85 d2                	test   edx,edx
c000beb8:	74 32                	je     c000beec <Directory::open()+0x56>
c000beba:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bec0:	85 d2                	test   edx,edx
c000bec2:	74 28                	je     c000beec <Directory::open()+0x56>
c000bec4:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000bec8:	b8 06 00 00 00       	mov    eax,0x6
c000becd:	75 1d                	jne    c000beec <Directory::open()+0x56>
c000becf:	50                   	push   eax
c000bed0:	8b 02                	mov    eax,DWORD PTR [edx]
c000bed2:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000bed8:	51                   	push   ecx
c000bed9:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000bedc:	51                   	push   ecx
c000bedd:	52                   	push   edx
c000bede:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000bee1:	83 c4 10             	add    esp,0x10
c000bee4:	85 c0                	test   eax,eax
c000bee6:	75 04                	jne    c000beec <Directory::open()+0x56>
c000bee8:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000beec:	83 c4 08             	add    esp,0x8
c000beef:	5b                   	pop    ebx
c000bef0:	c3                   	ret    
c000bef1:	90                   	nop

c000bef2 <Directory::close()>:
c000bef2:	53                   	push   ebx
c000bef3:	b8 0b 00 00 00       	mov    eax,0xb
c000bef8:	83 ec 08             	sub    esp,0x8
c000befb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000beff:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bf06:	83 f9 19             	cmp    ecx,0x19
c000bf09:	77 41                	ja     c000bf4c <Directory::close()+0x5a>
c000bf0b:	8b 1c 8d 80 88 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7780]
c000bf12:	85 db                	test   ebx,ebx
c000bf14:	74 36                	je     c000bf4c <Directory::close()+0x5a>
c000bf16:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bf1d:	74 2d                	je     c000bf4c <Directory::close()+0x5a>
c000bf1f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bf23:	b8 05 00 00 00       	mov    eax,0x5
c000bf28:	74 22                	je     c000bf4c <Directory::close()+0x5a>
c000bf2a:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bf2e:	8b 04 8d 80 88 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7780]
c000bf35:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bf3b:	53                   	push   ebx
c000bf3c:	53                   	push   ebx
c000bf3d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bf3f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bf45:	50                   	push   eax
c000bf46:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000bf49:	83 c4 10             	add    esp,0x10
c000bf4c:	83 c4 08             	add    esp,0x8
c000bf4f:	5b                   	pop    ebx
c000bf50:	c3                   	ret    
c000bf51:	90                   	nop

c000bf52 <Directory::unlink()>:
c000bf52:	83 ec 0c             	sub    esp,0xc
c000bf55:	b8 0b 00 00 00       	mov    eax,0xb
c000bf5a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf5e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bf65:	83 f9 19             	cmp    ecx,0x19
c000bf68:	77 2f                	ja     c000bf99 <Directory::unlink()+0x47>
c000bf6a:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bf71:	85 c9                	test   ecx,ecx
c000bf73:	74 24                	je     c000bf99 <Directory::unlink()+0x47>
c000bf75:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bf7b:	85 c9                	test   ecx,ecx
c000bf7d:	74 1a                	je     c000bf99 <Directory::unlink()+0x47>
c000bf7f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bf83:	b8 06 00 00 00       	mov    eax,0x6
c000bf88:	75 0f                	jne    c000bf99 <Directory::unlink()+0x47>
c000bf8a:	50                   	push   eax
c000bf8b:	83 c2 0d             	add    edx,0xd
c000bf8e:	50                   	push   eax
c000bf8f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bf91:	52                   	push   edx
c000bf92:	51                   	push   ecx
c000bf93:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bf96:	83 c4 10             	add    esp,0x10
c000bf99:	83 c4 0c             	add    esp,0xc
c000bf9c:	c3                   	ret    
c000bf9d:	90                   	nop

c000bf9e <Directory::rename(char const*)>:
c000bf9e:	83 ec 0c             	sub    esp,0xc
c000bfa1:	b8 0b 00 00 00       	mov    eax,0xb
c000bfa6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bfaa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bfb1:	83 f9 19             	cmp    ecx,0x19
c000bfb4:	77 32                	ja     c000bfe8 <Directory::rename(char const*)+0x4a>
c000bfb6:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bfbd:	85 c9                	test   ecx,ecx
c000bfbf:	74 27                	je     c000bfe8 <Directory::rename(char const*)+0x4a>
c000bfc1:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bfc7:	85 c9                	test   ecx,ecx
c000bfc9:	74 1d                	je     c000bfe8 <Directory::rename(char const*)+0x4a>
c000bfcb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bfcf:	b8 06 00 00 00       	mov    eax,0x6
c000bfd4:	75 12                	jne    c000bfe8 <Directory::rename(char const*)+0x4a>
c000bfd6:	50                   	push   eax
c000bfd7:	83 c2 0d             	add    edx,0xd
c000bfda:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bfdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bfe0:	52                   	push   edx
c000bfe1:	51                   	push   ecx
c000bfe2:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bfe5:	83 c4 10             	add    esp,0x10
c000bfe8:	83 c4 0c             	add    esp,0xc
c000bfeb:	c3                   	ret    

c000bfec <Directory::exists()>:
c000bfec:	83 ec 0c             	sub    esp,0xc
c000bfef:	31 c0                	xor    eax,eax
c000bff1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bff5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bffc:	83 f9 19             	cmp    ecx,0x19
c000bfff:	77 24                	ja     c000c025 <Directory::exists()+0x39>
c000c001:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000c008:	85 c9                	test   ecx,ecx
c000c00a:	74 19                	je     c000c025 <Directory::exists()+0x39>
c000c00c:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c012:	85 c9                	test   ecx,ecx
c000c014:	74 0f                	je     c000c025 <Directory::exists()+0x39>
c000c016:	50                   	push   eax
c000c017:	83 c2 0d             	add    edx,0xd
c000c01a:	50                   	push   eax
c000c01b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c01d:	52                   	push   edx
c000c01e:	51                   	push   ecx
c000c01f:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000c022:	83 c4 10             	add    esp,0x10
c000c025:	83 c4 0c             	add    esp,0xc
c000c028:	c3                   	ret    
c000c029:	90                   	nop

c000c02a <Directory::read(dirent*)>:
c000c02a:	83 ec 1c             	sub    esp,0x1c
c000c02d:	b8 0b 00 00 00       	mov    eax,0xb
c000c032:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c036:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c03d:	83 f9 19             	cmp    ecx,0x19
c000c040:	77 30                	ja     c000c072 <Directory::read(dirent*)+0x48>
c000c042:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000c049:	85 c9                	test   ecx,ecx
c000c04b:	74 25                	je     c000c072 <Directory::read(dirent*)+0x48>
c000c04d:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000c054:	74 1c                	je     c000c072 <Directory::read(dirent*)+0x48>
c000c056:	83 ec 0c             	sub    esp,0xc
c000c059:	8b 02                	mov    eax,DWORD PTR [edx]
c000c05b:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c05f:	51                   	push   ecx
c000c060:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c064:	6a 00                	push   0x0
c000c066:	68 10 01 00 00       	push   0x110
c000c06b:	52                   	push   edx
c000c06c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c06f:	83 c4 20             	add    esp,0x20
c000c072:	83 c4 1c             	add    esp,0x1c
c000c075:	c3                   	ret    

c000c076 <Directory::create()>:
c000c076:	83 ec 0c             	sub    esp,0xc
c000c079:	b8 0b 00 00 00       	mov    eax,0xb
c000c07e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c082:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c089:	83 f9 19             	cmp    ecx,0x19
c000c08c:	77 2f                	ja     c000c0bd <Directory::create()+0x47>
c000c08e:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000c095:	85 c9                	test   ecx,ecx
c000c097:	74 24                	je     c000c0bd <Directory::create()+0x47>
c000c099:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c09f:	85 c9                	test   ecx,ecx
c000c0a1:	74 1a                	je     c000c0bd <Directory::create()+0x47>
c000c0a3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c0a7:	b8 06 00 00 00       	mov    eax,0x6
c000c0ac:	75 0f                	jne    c000c0bd <Directory::create()+0x47>
c000c0ae:	50                   	push   eax
c000c0af:	83 c2 0d             	add    edx,0xd
c000c0b2:	50                   	push   eax
c000c0b3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c0b5:	52                   	push   edx
c000c0b6:	51                   	push   ecx
c000c0b7:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000c0ba:	83 c4 10             	add    esp,0x10
c000c0bd:	83 c4 0c             	add    esp,0xc
c000c0c0:	c3                   	ret    
c000c0c1:	90                   	nop

c000c0c2 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000c0c2:	b8 0a 00 00 00       	mov    eax,0xa
c000c0c7:	c3                   	ret    

c000c0c8 <Bus::Bus(char const*)>:
c000c0c8:	83 ec 0c             	sub    esp,0xc
c000c0cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0cf:	83 ec 08             	sub    esp,0x8
c000c0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0d6:	50                   	push   eax
c000c0d7:	e8 28 08 00 00       	call   c000c904 <Device::Device(char const*)>
c000c0dc:	83 c4 10             	add    esp,0x10
c000c0df:	ba 0c 15 02 c0       	mov    edx,0xc002150c
c000c0e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0e8:	89 10                	mov    DWORD PTR [eax],edx
c000c0ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0ee:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000c0f8:	90                   	nop
c000c0f9:	83 c4 0c             	add    esp,0xc
c000c0fc:	c3                   	ret    
c000c0fd:	90                   	nop
c000c0fe:	66 90                	xchg   ax,ax

c000c100 <Bus::~Bus()>:
c000c100:	83 ec 0c             	sub    esp,0xc
c000c103:	ba 0c 15 02 c0       	mov    edx,0xc002150c
c000c108:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c10c:	89 10                	mov    DWORD PTR [eax],edx
c000c10e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c112:	83 ec 0c             	sub    esp,0xc
c000c115:	50                   	push   eax
c000c116:	e8 53 05 00 00       	call   c000c66e <Device::~Device()>
c000c11b:	83 c4 10             	add    esp,0x10
c000c11e:	90                   	nop
c000c11f:	83 c4 0c             	add    esp,0xc
c000c122:	c3                   	ret    
c000c123:	90                   	nop

c000c124 <Bus::~Bus()>:
c000c124:	83 ec 0c             	sub    esp,0xc
c000c127:	83 ec 0c             	sub    esp,0xc
c000c12a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c12e:	e8 cd ff ff ff       	call   c000c100 <Bus::~Bus()>
c000c133:	83 c4 10             	add    esp,0x10
c000c136:	83 ec 08             	sub    esp,0x8
c000c139:	68 58 01 00 00       	push   0x158
c000c13e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c142:	e8 c5 e6 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c147:	83 c4 10             	add    esp,0x10
c000c14a:	83 c4 0c             	add    esp,0xc
c000c14d:	c3                   	ret    

c000c14e <beepThread(void*)>:
c000c14e:	83 ec 0c             	sub    esp,0xc
c000c151:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000c156:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c15a:	48                   	dec    eax
c000c15b:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000c160:	75 01                	jne    c000c163 <beepThread(void*)+0x15>
c000c162:	fb                   	sti    
c000c163:	6b c2 0a             	imul   eax,edx,0xa
c000c166:	83 ec 0c             	sub    esp,0xc
c000c169:	50                   	push   eax
c000c16a:	e8 b5 9d 00 00       	call   c0015f24 <milliTenthSleep(unsigned int)>
c000c16f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c176:	e8 02 bd 00 00       	call   c0017e7d <HalMakeBeep(int)>
c000c17b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c183:	83 c4 1c             	add    esp,0x1c
c000c186:	e9 7d 9c 00 00       	jmp    c0015e08 <blockTask(TaskState)>

c000c18b <Krnl::beep(int, int, bool)>:
c000c18b:	56                   	push   esi
c000c18c:	53                   	push   ebx
c000c18d:	83 ec 10             	sub    esp,0x10
c000c190:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c194:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c198:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c19c:	e8 dc bc 00 00       	call   c0017e7d <HalMakeBeep(int)>
c000c1a1:	89 f0                	mov    eax,esi
c000c1a3:	83 c4 10             	add    esp,0x10
c000c1a6:	84 c0                	test   al,al
c000c1a8:	74 1e                	je     c000c1c8 <Krnl::beep(int, int, bool)+0x3d>
c000c1aa:	6b db 0a             	imul   ebx,ebx,0xa
c000c1ad:	83 ec 0c             	sub    esp,0xc
c000c1b0:	53                   	push   ebx
c000c1b1:	e8 6e 9d 00 00       	call   c0015f24 <milliTenthSleep(unsigned int)>
c000c1b6:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c1be:	83 c4 14             	add    esp,0x14
c000c1c1:	5b                   	pop    ebx
c000c1c2:	5e                   	pop    esi
c000c1c3:	e9 b5 bc 00 00       	jmp    c0017e7d <HalMakeBeep(int)>
c000c1c8:	68 e6 00 00 00       	push   0xe6
c000c1cd:	53                   	push   ebx
c000c1ce:	68 4e c1 00 c0       	push   0xc000c14e
c000c1d3:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000c1d9:	e8 de 97 00 00       	call   c00159bc <Process::createThread(void (*)(void*), void*, int)>
c000c1de:	83 c4 14             	add    esp,0x14
c000c1e1:	5b                   	pop    ebx
c000c1e2:	5e                   	pop    esi
c000c1e3:	c3                   	ret    

c000c1e4 <User::loadClockSettings(int)>:
c000c1e4:	53                   	push   ebx
c000c1e5:	83 ec 14             	sub    esp,0x14
c000c1e8:	68 14 01 00 00       	push   0x114
c000c1ed:	e8 e1 b8 ff ff       	call   c0007ad3 <malloc>
c000c1f2:	83 c4 0c             	add    esp,0xc
c000c1f5:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000c1fb:	68 30 15 02 c0       	push   0xc0021530
c000c200:	50                   	push   eax
c000c201:	89 c3                	mov    ebx,eax
c000c203:	e8 3c f6 ff ff       	call   c000b844 <File::File(char const*, Process*)>
c000c208:	58                   	pop    eax
c000c209:	5a                   	pop    edx
c000c20a:	6a 01                	push   0x1
c000c20c:	53                   	push   ebx
c000c20d:	e8 fa f6 ff ff       	call   c000b90c <File::open(FileOpenMode)>
c000c212:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c215:	e8 50 f7 ff ff       	call   c000b96a <File::close()>
c000c21a:	83 c4 10             	add    esp,0x10
c000c21d:	85 db                	test   ebx,ebx
c000c21f:	74 0f                	je     c000c230 <User::loadClockSettings(int)+0x4c>
c000c221:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c223:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c227:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c22a:	83 c4 08             	add    esp,0x8
c000c22d:	5b                   	pop    ebx
c000c22e:	ff e0                	jmp    eax
c000c230:	83 c4 08             	add    esp,0x8
c000c233:	5b                   	pop    ebx
c000c234:	c3                   	ret    
c000c235:	90                   	nop

c000c236 <Clock::Clock(char const*)>:
c000c236:	83 ec 0c             	sub    esp,0xc
c000c239:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23d:	83 ec 08             	sub    esp,0x8
c000c240:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c244:	50                   	push   eax
c000c245:	e8 ba 06 00 00       	call   c000c904 <Device::Device(char const*)>
c000c24a:	83 c4 10             	add    esp,0x10
c000c24d:	ba 58 15 02 c0       	mov    edx,0xc0021558
c000c252:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c256:	89 10                	mov    DWORD PTR [eax],edx
c000c258:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c25c:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c266:	90                   	nop
c000c267:	83 c4 0c             	add    esp,0xc
c000c26a:	c3                   	ret    
c000c26b:	90                   	nop

c000c26c <Clock::~Clock()>:
c000c26c:	83 ec 0c             	sub    esp,0xc
c000c26f:	ba 58 15 02 c0       	mov    edx,0xc0021558
c000c274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c278:	89 10                	mov    DWORD PTR [eax],edx
c000c27a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c27e:	83 ec 0c             	sub    esp,0xc
c000c281:	50                   	push   eax
c000c282:	e8 e7 03 00 00       	call   c000c66e <Device::~Device()>
c000c287:	83 c4 10             	add    esp,0x10
c000c28a:	90                   	nop
c000c28b:	83 c4 0c             	add    esp,0xc
c000c28e:	c3                   	ret    
c000c28f:	90                   	nop

c000c290 <Clock::~Clock()>:
c000c290:	83 ec 0c             	sub    esp,0xc
c000c293:	83 ec 0c             	sub    esp,0xc
c000c296:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c29a:	e8 cd ff ff ff       	call   c000c26c <Clock::~Clock()>
c000c29f:	83 c4 10             	add    esp,0x10
c000c2a2:	83 ec 08             	sub    esp,0x8
c000c2a5:	68 58 01 00 00       	push   0x158
c000c2aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2ae:	e8 59 e5 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	83 c4 0c             	add    esp,0xc
c000c2b9:	c3                   	ret    

c000c2ba <Clock::timeInSecondsLocal()>:
c000c2ba:	53                   	push   ebx
c000c2bb:	83 ec 14             	sub    esp,0x14
c000c2be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c2c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000c2c4:	50                   	push   eax
c000c2c5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c2c8:	0f b6 0d 08 64 02 c0 	movzx  ecx,BYTE PTR ds:0xc0026408
c000c2cf:	03 0d 0c 64 02 c0    	add    ecx,DWORD PTR ds:0xc002640c
c000c2d5:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c2db:	89 cb                	mov    ebx,ecx
c000c2dd:	c1 fb 1f             	sar    ebx,0x1f
c000c2e0:	01 c8                	add    eax,ecx
c000c2e2:	11 da                	adc    edx,ebx
c000c2e4:	83 c4 10             	add    esp,0x10
c000c2e7:	31 c9                	xor    ecx,ecx
c000c2e9:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c2f0:	74 05                	je     c000c2f7 <Clock::timeInSecondsLocal()+0x3d>
c000c2f2:	b9 08 07 00 00       	mov    ecx,0x708
c000c2f7:	31 db                	xor    ebx,ebx
c000c2f9:	01 c8                	add    eax,ecx
c000c2fb:	11 da                	adc    edx,ebx
c000c2fd:	83 c4 08             	add    esp,0x8
c000c300:	5b                   	pop    ebx
c000c301:	c3                   	ret    

c000c302 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c302:	57                   	push   edi
c000c303:	56                   	push   esi
c000c304:	53                   	push   ebx
c000c305:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c309:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c30d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c311:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c313:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c316:	0f b6 05 08 64 02 c0 	movzx  eax,BYTE PTR ds:0xc0026408
c000c31d:	03 05 0c 64 02 c0    	add    eax,DWORD PTR ds:0xc002640c
c000c323:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c329:	99                   	cdq    
c000c32a:	29 c6                	sub    esi,eax
c000c32c:	19 d7                	sbb    edi,edx
c000c32e:	89 f0                	mov    eax,esi
c000c330:	31 f6                	xor    esi,esi
c000c332:	89 fa                	mov    edx,edi
c000c334:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c33b:	74 05                	je     c000c342 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c33d:	be 08 07 00 00       	mov    esi,0x708
c000c342:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c346:	31 ff                	xor    edi,edi
c000c348:	29 f0                	sub    eax,esi
c000c34a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c34e:	19 fa                	sbb    edx,edi
c000c350:	89 d8                	mov    eax,ebx
c000c352:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c356:	5b                   	pop    ebx
c000c357:	5e                   	pop    esi
c000c358:	5f                   	pop    edi
c000c359:	ff e0                	jmp    eax

c000c35b <datetimeToSeconds(datetime_t)>:
c000c35b:	55                   	push   ebp
c000c35c:	57                   	push   edi
c000c35d:	56                   	push   esi
c000c35e:	53                   	push   ebx
c000c35f:	83 ec 0c             	sub    esp,0xc
c000c362:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c366:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c36a:	89 f7                	mov    edi,esi
c000c36c:	89 f0                	mov    eax,esi
c000c36e:	0f b6 cf             	movzx  ecx,bh
c000c371:	0f b6 c4             	movzx  eax,ah
c000c374:	c1 ef 10             	shr    edi,0x10
c000c377:	89 da                	mov    edx,ebx
c000c379:	8d 69 ff             	lea    ebp,[ecx-0x1]
c000c37c:	89 f9                	mov    ecx,edi
c000c37e:	0f b6 f9             	movzx  edi,cl
c000c381:	89 f1                	mov    ecx,esi
c000c383:	6b c0 3c             	imul   eax,eax,0x3c
c000c386:	0f b6 f1             	movzx  esi,cl
c000c389:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c000c38f:	0f b6 db             	movzx  ebx,bl
c000c392:	c1 ea 10             	shr    edx,0x10
c000c395:	81 ea 6c 07 00 00    	sub    edx,0x76c
c000c39b:	01 f8                	add    eax,edi
c000c39d:	01 f0                	add    eax,esi
c000c39f:	89 04 24             	mov    DWORD PTR [esp],eax
c000c3a2:	c1 f8 1f             	sar    eax,0x1f
c000c3a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c3a9:	89 e8                	mov    eax,ebp
c000c3ab:	0f b6 c0             	movzx  eax,al
c000c3ae:	8b 0c 85 a0 15 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdea60]
c000c3b5:	83 f8 01             	cmp    eax,0x1
c000c3b8:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c000c3bc:	0f b7 da             	movzx  ebx,dx
c000c3bf:	76 27                	jbe    c000c3e8 <datetimeToSeconds(datetime_t)+0x8d>
c000c3c1:	80 e2 03             	and    dl,0x3
c000c3c4:	75 22                	jne    c000c3e8 <datetimeToSeconds(datetime_t)+0x8d>
c000c3c6:	31 d2                	xor    edx,edx
c000c3c8:	be 64 00 00 00       	mov    esi,0x64
c000c3cd:	89 d8                	mov    eax,ebx
c000c3cf:	f7 f6                	div    esi
c000c3d1:	85 d2                	test   edx,edx
c000c3d3:	75 12                	jne    c000c3e7 <datetimeToSeconds(datetime_t)+0x8c>
c000c3d5:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c3db:	be 90 01 00 00       	mov    esi,0x190
c000c3e0:	99                   	cdq    
c000c3e1:	f7 fe                	idiv   esi
c000c3e3:	85 d2                	test   edx,edx
c000c3e5:	75 01                	jne    c000c3e8 <datetimeToSeconds(datetime_t)+0x8d>
c000c3e7:	41                   	inc    ecx
c000c3e8:	83 fb 46             	cmp    ebx,0x46
c000c3eb:	76 48                	jbe    c000c435 <datetimeToSeconds(datetime_t)+0xda>
c000c3ed:	be 46 00 00 00       	mov    esi,0x46
c000c3f2:	bf 64 00 00 00       	mov    edi,0x64
c000c3f7:	bd 90 01 00 00       	mov    ebp,0x190
c000c3fc:	f7 c6 03 00 00 00    	test   esi,0x3
c000c402:	b8 6d 01 00 00       	mov    eax,0x16d
c000c407:	75 23                	jne    c000c42c <datetimeToSeconds(datetime_t)+0xd1>
c000c409:	89 f0                	mov    eax,esi
c000c40b:	99                   	cdq    
c000c40c:	f7 ff                	idiv   edi
c000c40e:	b8 6e 01 00 00       	mov    eax,0x16e
c000c413:	85 d2                	test   edx,edx
c000c415:	75 15                	jne    c000c42c <datetimeToSeconds(datetime_t)+0xd1>
c000c417:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c41d:	99                   	cdq    
c000c41e:	f7 fd                	idiv   ebp
c000c420:	83 fa 01             	cmp    edx,0x1
c000c423:	19 c0                	sbb    eax,eax
c000c425:	f7 d0                	not    eax
c000c427:	05 6e 01 00 00       	add    eax,0x16e
c000c42c:	46                   	inc    esi
c000c42d:	01 c1                	add    ecx,eax
c000c42f:	39 de                	cmp    esi,ebx
c000c431:	7c c9                	jl     c000c3fc <datetimeToSeconds(datetime_t)+0xa1>
c000c433:	eb 34                	jmp    c000c469 <datetimeToSeconds(datetime_t)+0x10e>
c000c435:	74 32                	je     c000c469 <datetimeToSeconds(datetime_t)+0x10e>
c000c437:	b8 45 00 00 00       	mov    eax,0x45
c000c43c:	89 c2                	mov    edx,eax
c000c43e:	83 e2 03             	and    edx,0x3
c000c441:	39 d8                	cmp    eax,ebx
c000c443:	7e 0f                	jle    c000c454 <datetimeToSeconds(datetime_t)+0xf9>
c000c445:	83 fa 01             	cmp    edx,0x1
c000c448:	19 d2                	sbb    edx,edx
c000c44a:	48                   	dec    eax
c000c44b:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c452:	eb e8                	jmp    c000c43c <datetimeToSeconds(datetime_t)+0xe1>
c000c454:	85 d2                	test   edx,edx
c000c456:	b8 6d 01 00 00       	mov    eax,0x16d
c000c45b:	75 0a                	jne    c000c467 <datetimeToSeconds(datetime_t)+0x10c>
c000c45d:	83 fb 01             	cmp    ebx,0x1
c000c460:	19 c0                	sbb    eax,eax
c000c462:	05 6e 01 00 00       	add    eax,0x16e
c000c467:	29 c1                	sub    ecx,eax
c000c469:	b8 80 51 01 00       	mov    eax,0x15180
c000c46e:	f7 e9                	imul   ecx
c000c470:	03 04 24             	add    eax,DWORD PTR [esp]
c000c473:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c477:	83 c4 0c             	add    esp,0xc
c000c47a:	5b                   	pop    ebx
c000c47b:	5e                   	pop    esi
c000c47c:	5f                   	pop    edi
c000c47d:	5d                   	pop    ebp
c000c47e:	c3                   	ret    
c000c47f:	90                   	nop

c000c480 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c480:	57                   	push   edi
c000c481:	56                   	push   esi
c000c482:	53                   	push   ebx
c000c483:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c487:	8b 06                	mov    eax,DWORD PTR [esi]
c000c489:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c48c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c490:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c494:	e8 c2 fe ff ff       	call   c000c35b <datetimeToSeconds(datetime_t)>
c000c499:	59                   	pop    ecx
c000c49a:	0f b6 0d 08 64 02 c0 	movzx  ecx,BYTE PTR ds:0xc0026408
c000c4a1:	5b                   	pop    ebx
c000c4a2:	03 0d 0c 64 02 c0    	add    ecx,DWORD PTR ds:0xc002640c
c000c4a8:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c4ae:	89 cb                	mov    ebx,ecx
c000c4b0:	c1 fb 1f             	sar    ebx,0x1f
c000c4b3:	29 c8                	sub    eax,ecx
c000c4b5:	19 da                	sbb    edx,ebx
c000c4b7:	31 c9                	xor    ecx,ecx
c000c4b9:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c4c0:	74 05                	je     c000c4c7 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c4c2:	b9 08 07 00 00       	mov    ecx,0x708
c000c4c7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c4cb:	31 db                	xor    ebx,ebx
c000c4cd:	29 c8                	sub    eax,ecx
c000c4cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c4d3:	19 da                	sbb    edx,ebx
c000c4d5:	89 f8                	mov    eax,edi
c000c4d7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c4db:	5b                   	pop    ebx
c000c4dc:	5e                   	pop    esi
c000c4dd:	5f                   	pop    edi
c000c4de:	ff e0                	jmp    eax

c000c4e0 <secondsToDatetime(unsigned long long)>:
c000c4e0:	55                   	push   ebp
c000c4e1:	57                   	push   edi
c000c4e2:	56                   	push   esi
c000c4e3:	53                   	push   ebx
c000c4e4:	83 ec 1c             	sub    esp,0x1c
c000c4e7:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c4eb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c4ef:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c4f3:	6a 00                	push   0x0
c000c4f5:	68 80 51 01 00       	push   0x15180
c000c4fa:	55                   	push   ebp
c000c4fb:	57                   	push   edi
c000c4fc:	e8 bf 2d 01 00       	call   c001f2c0 <__udivdi3>
c000c501:	83 c4 10             	add    esp,0x10
c000c504:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c508:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c50e:	6a 00                	push   0x0
c000c510:	68 80 51 01 00       	push   0x15180
c000c515:	55                   	push   ebp
c000c516:	57                   	push   edi
c000c517:	bf 10 0e 00 00       	mov    edi,0xe10
c000c51c:	e8 9f 2e 01 00       	call   c001f3c0 <__umoddi3>
c000c521:	83 c4 10             	add    esp,0x10
c000c524:	99                   	cdq    
c000c525:	f7 ff                	idiv   edi
c000c527:	bf 3c 00 00 00       	mov    edi,0x3c
c000c52c:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c52f:	89 d0                	mov    eax,edx
c000c531:	99                   	cdq    
c000c532:	f7 ff                	idiv   edi
c000c534:	85 db                	test   ebx,ebx
c000c536:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c539:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c53c:	79 11                	jns    c000c54f <secondsToDatetime(unsigned long long)+0x6f>
c000c53e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c542:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c548:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c54d:	eb 07                	jmp    c000c556 <secondsToDatetime(unsigned long long)+0x76>
c000c54f:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c554:	89 d8                	mov    eax,ebx
c000c556:	99                   	cdq    
c000c557:	bf b4 05 00 00       	mov    edi,0x5b4
c000c55c:	f7 f9                	idiv   ecx
c000c55e:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c563:	31 d2                	xor    edx,edx
c000c565:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c56a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c56e:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c576:	01 c3                	add    ebx,eax
c000c578:	89 d8                	mov    eax,ebx
c000c57a:	f7 f1                	div    ecx
c000c57c:	31 d2                	xor    edx,edx
c000c57e:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c581:	89 d8                	mov    eax,ebx
c000c583:	f7 f7                	div    edi
c000c585:	31 d2                	xor    edx,edx
c000c587:	29 c1                	sub    ecx,eax
c000c589:	89 d8                	mov    eax,ebx
c000c58b:	f7 f5                	div    ebp
c000c58d:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c592:	31 d2                	xor    edx,edx
c000c594:	29 c1                	sub    ecx,eax
c000c596:	89 c8                	mov    eax,ecx
c000c598:	f7 f5                	div    ebp
c000c59a:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c59f:	31 d2                	xor    edx,edx
c000c5a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c5a5:	89 c8                	mov    eax,ecx
c000c5a7:	f7 f5                	div    ebp
c000c5a9:	31 d2                	xor    edx,edx
c000c5ab:	01 c3                	add    ebx,eax
c000c5ad:	89 c8                	mov    eax,ecx
c000c5af:	f7 f7                	div    edi
c000c5b1:	bf 99 00 00 00       	mov    edi,0x99
c000c5b6:	31 d2                	xor    edx,edx
c000c5b8:	29 c3                	sub    ebx,eax
c000c5ba:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c5c2:	29 c3                	sub    ebx,eax
c000c5c4:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c5c7:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c5ca:	83 c1 02             	add    ecx,0x2
c000c5cd:	89 c8                	mov    eax,ecx
c000c5cf:	bb 05 00 00 00       	mov    ebx,0x5
c000c5d4:	f7 f7                	div    edi
c000c5d6:	31 d2                	xor    edx,edx
c000c5d8:	89 c7                	mov    edi,eax
c000c5da:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c5e0:	83 c0 02             	add    eax,0x2
c000c5e3:	f7 f3                	div    ebx
c000c5e5:	89 eb                	mov    ebx,ebp
c000c5e7:	29 c3                	sub    ebx,eax
c000c5e9:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c5ef:	88 1e                	mov    BYTE PTR [esi],bl
c000c5f1:	19 c0                	sbb    eax,eax
c000c5f3:	31 d2                	xor    edx,edx
c000c5f5:	83 e0 0c             	and    eax,0xc
c000c5f8:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c5fc:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c604:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c608:	83 f9 01             	cmp    ecx,0x1
c000c60b:	0f 96 c2             	setbe  dl
c000c60e:	41                   	inc    ecx
c000c60f:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c612:	01 d0                	add    eax,edx
c000c614:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c618:	83 c4 1c             	add    esp,0x1c
c000c61b:	89 f0                	mov    eax,esi
c000c61d:	5b                   	pop    ebx
c000c61e:	5e                   	pop    esi
c000c61f:	5f                   	pop    edi
c000c620:	5d                   	pop    ebp
c000c621:	c2 04 00             	ret    0x4

c000c624 <Clock::timeInDatetimeLocal()>:
c000c624:	53                   	push   ebx
c000c625:	83 ec 14             	sub    esp,0x14
c000c628:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c62c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c630:	e8 85 fc ff ff       	call   c000c2ba <Clock::timeInSecondsLocal()>
c000c635:	83 c4 0c             	add    esp,0xc
c000c638:	52                   	push   edx
c000c639:	50                   	push   eax
c000c63a:	53                   	push   ebx
c000c63b:	e8 a0 fe ff ff       	call   c000c4e0 <secondsToDatetime(unsigned long long)>
c000c640:	89 d8                	mov    eax,ebx
c000c642:	83 c4 14             	add    esp,0x14
c000c645:	5b                   	pop    ebx
c000c646:	c2 04 00             	ret    0x4
c000c649:	90                   	nop

c000c64a <Device::hibernate()>:
c000c64a:	c3                   	ret    
c000c64b:	90                   	nop

c000c64c <Device::wake()>:
c000c64c:	c3                   	ret    
c000c64d:	90                   	nop

c000c64e <Device::detect()>:
c000c64e:	c3                   	ret    
c000c64f:	90                   	nop

c000c650 <Device::disableLegacy()>:
c000c650:	c3                   	ret    
c000c651:	90                   	nop

c000c652 <Device::powerSaving(PowerSavingLevel)>:
c000c652:	c3                   	ret    
c000c653:	90                   	nop

c000c654 <DriverlessDevice::close(int, int, void*)>:
c000c654:	31 c0                	xor    eax,eax
c000c656:	c3                   	ret    
c000c657:	90                   	nop

c000c658 <DriverlessDevice::detect()>:
c000c658:	c3                   	ret    
c000c659:	90                   	nop

c000c65a <DriverlessDevice::open(int, int, void*)>:
c000c65a:	83 ec 18             	sub    esp,0x18
c000c65d:	68 d0 15 02 c0       	push   0xc00215d0
c000c662:	e8 a2 4c 00 00       	call   c0011309 <KePanic(char const*)>
c000c667:	83 c8 ff             	or     eax,0xffffffff
c000c66a:	83 c4 1c             	add    esp,0x1c
c000c66d:	c3                   	ret    

c000c66e <Device::~Device()>:
c000c66e:	ba 30 16 02 c0       	mov    edx,0xc0021630
c000c673:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c677:	89 10                	mov    DWORD PTR [eax],edx
c000c679:	90                   	nop
c000c67a:	c3                   	ret    
c000c67b:	90                   	nop

c000c67c <Device::~Device()>:
c000c67c:	83 ec 0c             	sub    esp,0xc
c000c67f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c683:	e8 e6 ff ff ff       	call   c000c66e <Device::~Device()>
c000c688:	83 c4 04             	add    esp,0x4
c000c68b:	83 ec 08             	sub    esp,0x8
c000c68e:	68 58 01 00 00       	push   0x158
c000c693:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c697:	e8 70 e1 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c69c:	83 c4 10             	add    esp,0x10
c000c69f:	83 c4 0c             	add    esp,0xc
c000c6a2:	c3                   	ret    
c000c6a3:	90                   	nop

c000c6a4 <Device::findAndLoadDriver()>:
c000c6a4:	c7 44 24 04 ee 15 02 c0 	mov    DWORD PTR [esp+0x4],0xc00215ee
c000c6ac:	e9 59 e2 ff ff       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>
c000c6b1:	90                   	nop

c000c6b2 <Device::preOpenPCI(PCIDeviceInfo)>:
c000c6b2:	57                   	push   edi
c000c6b3:	b9 09 00 00 00       	mov    ecx,0x9
c000c6b8:	56                   	push   esi
c000c6b9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c6bd:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c6c1:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c6cb:	81 c7 18 01 00 00    	add    edi,0x118
c000c6d1:	fc                   	cld    
c000c6d2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c6d4:	5e                   	pop    esi
c000c6d5:	5f                   	pop    edi
c000c6d6:	c3                   	ret    
c000c6d7:	90                   	nop

c000c6d8 <Device::preOpenACPI(void*, char*, char*)>:
c000c6d8:	57                   	push   edi
c000c6d9:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c6de:	56                   	push   esi
c000c6df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c6e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c6e7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c6eb:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c6f5:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c6fb:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c701:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c703:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c709:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c70d:	b9 0e 00 00 00       	mov    ecx,0xe
c000c712:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c714:	5e                   	pop    esi
c000c715:	5f                   	pop    edi
c000c716:	c3                   	ret    
c000c717:	90                   	nop

c000c718 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c718:	53                   	push   ebx
c000c719:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c71d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c721:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c725:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c729:	0f b6 c0             	movzx  eax,al
c000c72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c730:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c734:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c738:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c73c:	5b                   	pop    ebx
c000c73d:	e9 aa 05 00 00       	jmp    c000ccec <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c742 <Device::getParent()>:
c000c742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c746:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c74c:	c3                   	ret    
c000c74d:	90                   	nop

c000c74e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c74e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c752:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c756:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c75b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c75f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c763:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c767:	e9 f7 06 00 00       	jmp    c000ce63 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c76c <Device::addChild(Device*)>:
c000c76c:	53                   	push   ebx
c000c76d:	83 ec 08             	sub    esp,0x8
c000c770:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c774:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c778:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c77e:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c784:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c786:	85 d2                	test   edx,edx
c000c788:	74 04                	je     c000c78e <Device::addChild(Device*)+0x22>
c000c78a:	89 d3                	mov    ebx,edx
c000c78c:	eb f6                	jmp    c000c784 <Device::addChild(Device*)+0x18>
c000c78e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c791:	83 ec 0c             	sub    esp,0xc
c000c794:	6a 08                	push   0x8
c000c796:	e8 38 b3 ff ff       	call   c0007ad3 <malloc>
c000c79b:	89 03                	mov    DWORD PTR [ebx],eax
c000c79d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c7a3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c7aa:	83 c4 18             	add    esp,0x18
c000c7ad:	5b                   	pop    ebx
c000c7ae:	c3                   	ret    
c000c7af:	90                   	nop

c000c7b0 <Device::removeAllChildren()>:
c000c7b0:	56                   	push   esi
c000c7b1:	53                   	push   ebx
c000c7b2:	52                   	push   edx
c000c7b3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c7b7:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c7bd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c7c0:	74 17                	je     c000c7d9 <Device::removeAllChildren()+0x29>
c000c7c2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c7c5:	85 c0                	test   eax,eax
c000c7c7:	74 0c                	je     c000c7d5 <Device::removeAllChildren()+0x25>
c000c7c9:	8b 10                	mov    edx,DWORD PTR [eax]
c000c7cb:	83 ec 0c             	sub    esp,0xc
c000c7ce:	50                   	push   eax
c000c7cf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c7d2:	83 c4 10             	add    esp,0x10
c000c7d5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c7d7:	eb e4                	jmp    c000c7bd <Device::removeAllChildren()+0xd>
c000c7d9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c7df:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c7e5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c7eb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c7f2:	58                   	pop    eax
c000c7f3:	5b                   	pop    ebx
c000c7f4:	5e                   	pop    esi
c000c7f5:	c3                   	ret    

c000c7f6 <Device::hibernateAll()>:
c000c7f6:	53                   	push   ebx
c000c7f7:	83 ec 14             	sub    esp,0x14
c000c7fa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c7fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c800:	53                   	push   ebx
c000c801:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c804:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c80a:	83 c4 10             	add    esp,0x10
c000c80d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c810:	74 0f                	je     c000c821 <Device::hibernateAll()+0x2b>
c000c812:	83 ec 0c             	sub    esp,0xc
c000c815:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c818:	e8 d9 ff ff ff       	call   c000c7f6 <Device::hibernateAll()>
c000c81d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c81f:	eb e9                	jmp    c000c80a <Device::hibernateAll()+0x14>
c000c821:	83 c4 08             	add    esp,0x8
c000c824:	5b                   	pop    ebx
c000c825:	c3                   	ret    

c000c826 <Device::wakeAll()>:
c000c826:	53                   	push   ebx
c000c827:	83 ec 14             	sub    esp,0x14
c000c82a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c82e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c830:	53                   	push   ebx
c000c831:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000c834:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c83a:	83 c4 10             	add    esp,0x10
c000c83d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c840:	74 0f                	je     c000c851 <Device::wakeAll()+0x2b>
c000c842:	83 ec 0c             	sub    esp,0xc
c000c845:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c848:	e8 d9 ff ff ff       	call   c000c826 <Device::wakeAll()>
c000c84d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c84f:	eb e9                	jmp    c000c83a <Device::wakeAll()+0x14>
c000c851:	83 c4 08             	add    esp,0x8
c000c854:	5b                   	pop    ebx
c000c855:	c3                   	ret    

c000c856 <Device::detectAll()>:
c000c856:	53                   	push   ebx
c000c857:	83 ec 14             	sub    esp,0x14
c000c85a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c85e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c860:	53                   	push   ebx
c000c861:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000c864:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c86a:	83 c4 10             	add    esp,0x10
c000c86d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c870:	74 0f                	je     c000c881 <Device::detectAll()+0x2b>
c000c872:	83 ec 0c             	sub    esp,0xc
c000c875:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c878:	e8 d9 ff ff ff       	call   c000c856 <Device::detectAll()>
c000c87d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c87f:	eb e9                	jmp    c000c86a <Device::detectAll()+0x14>
c000c881:	83 c4 08             	add    esp,0x8
c000c884:	5b                   	pop    ebx
c000c885:	c3                   	ret    

c000c886 <Device::disableLegacyAll()>:
c000c886:	c3                   	ret    
c000c887:	90                   	nop

c000c888 <Device::loadDriversForAll()>:
c000c888:	c3                   	ret    
c000c889:	90                   	nop

c000c88a <Device::closeAll()>:
c000c88a:	53                   	push   ebx
c000c88b:	83 ec 08             	sub    esp,0x8
c000c88e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c892:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c894:	6a 00                	push   0x0
c000c896:	6a 00                	push   0x0
c000c898:	6a 00                	push   0x0
c000c89a:	53                   	push   ebx
c000c89b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c89e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c8a4:	83 c4 10             	add    esp,0x10
c000c8a7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c8aa:	74 0f                	je     c000c8bb <Device::closeAll()+0x31>
c000c8ac:	83 ec 0c             	sub    esp,0xc
c000c8af:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c8b2:	e8 d3 ff ff ff       	call   c000c88a <Device::closeAll()>
c000c8b7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c8b9:	eb e9                	jmp    c000c8a4 <Device::closeAll()+0x1a>
c000c8bb:	83 c4 08             	add    esp,0x8
c000c8be:	5b                   	pop    ebx
c000c8bf:	c3                   	ret    

c000c8c0 <Device::powerSavingAll(PowerSavingLevel)>:
c000c8c0:	56                   	push   esi
c000c8c1:	53                   	push   ebx
c000c8c2:	83 ec 0c             	sub    esp,0xc
c000c8c5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c8c9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c8cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c8cf:	56                   	push   esi
c000c8d0:	53                   	push   ebx
c000c8d1:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c8d4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c8da:	83 c4 10             	add    esp,0x10
c000c8dd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c8e0:	74 0f                	je     c000c8f1 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c8e2:	52                   	push   edx
c000c8e3:	52                   	push   edx
c000c8e4:	56                   	push   esi
c000c8e5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c8e8:	e8 d3 ff ff ff       	call   c000c8c0 <Device::powerSavingAll(PowerSavingLevel)>
c000c8ed:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c8ef:	eb e9                	jmp    c000c8da <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c8f1:	58                   	pop    eax
c000c8f2:	5b                   	pop    ebx
c000c8f3:	5e                   	pop    esi
c000c8f4:	c3                   	ret    
c000c8f5:	90                   	nop

c000c8f6 <Device::setName(char const*)>:
c000c8f6:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c8fe:	e9 4d 3d ff ff       	jmp    c0000650 <strcpy>
c000c903:	90                   	nop

c000c904 <Device::Device(char const*)>:
c000c904:	83 ec 1c             	sub    esp,0x1c
c000c907:	ba 30 16 02 c0       	mov    edx,0xc0021630
c000c90c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c910:	89 10                	mov    DWORD PTR [eax],edx
c000c912:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c916:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c920:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c924:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c92e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c932:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c93c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c940:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c94a:	83 ec 08             	sub    esp,0x8
c000c94d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c951:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c955:	e8 9c ff ff ff       	call   c000c8f6 <Device::setName(char const*)>
c000c95a:	83 c4 10             	add    esp,0x10
c000c95d:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c965:	83 ec 0c             	sub    esp,0xc
c000c968:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c96c:	e8 62 b1 ff ff       	call   c0007ad3 <malloc>
c000c971:	83 c4 10             	add    esp,0x10
c000c974:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c97a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c981:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c985:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c98b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c98f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c995:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c99b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c99f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c9a5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c9ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9b0:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c9b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9bb:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c9c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9c6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c9d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9d4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c9de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9e2:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c9ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9f0:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c9fa:	90                   	nop
c000c9fb:	83 c4 1c             	add    esp,0x1c
c000c9fe:	c3                   	ret    
c000c9ff:	90                   	nop

c000ca00 <Device::getName()>:
c000ca00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca04:	05 d0 00 00 00       	add    eax,0xd0
c000ca09:	c3                   	ret    

c000ca0a <DriverlessDevice::DriverlessDevice(char const*)>:
c000ca0a:	83 ec 0c             	sub    esp,0xc
c000ca0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca11:	83 ec 08             	sub    esp,0x8
c000ca14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca18:	50                   	push   eax
c000ca19:	e8 e6 fe ff ff       	call   c000c904 <Device::Device(char const*)>
c000ca1e:	83 c4 10             	add    esp,0x10
c000ca21:	ba 5c 16 02 c0       	mov    edx,0xc002165c
c000ca26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca2a:	89 10                	mov    DWORD PTR [eax],edx
c000ca2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca30:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000ca3a:	90                   	nop
c000ca3b:	83 c4 0c             	add    esp,0xc
c000ca3e:	c3                   	ret    
c000ca3f:	90                   	nop

c000ca40 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000ca40:	57                   	push   edi
c000ca41:	56                   	push   esi
c000ca42:	53                   	push   ebx
c000ca43:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ca47:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000ca4b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ca4f:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000ca55:	75 0c                	jne    c000ca63 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000ca57:	52                   	push   edx
c000ca58:	52                   	push   edx
c000ca59:	53                   	push   ebx
c000ca5a:	56                   	push   esi
c000ca5b:	e8 12 2d 01 00       	call   c001f772 <LinkedList<Device>::addElement(Device*)>
c000ca60:	83 c4 10             	add    esp,0x10
c000ca63:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca69:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca6c:	74 12                	je     c000ca80 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000ca6e:	50                   	push   eax
c000ca6f:	57                   	push   edi
c000ca70:	56                   	push   esi
c000ca71:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ca74:	e8 c7 ff ff ff       	call   c000ca40 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000ca79:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca7b:	83 c4 10             	add    esp,0x10
c000ca7e:	eb e9                	jmp    c000ca69 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000ca80:	5b                   	pop    ebx
c000ca81:	5e                   	pop    esi
c000ca82:	5f                   	pop    edi
c000ca83:	c3                   	ret    

c000ca84 <getDevicesOfType(DeviceType)>:
c000ca84:	53                   	push   ebx
c000ca85:	83 ec 14             	sub    esp,0x14
c000ca88:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca8c:	53                   	push   ebx
c000ca8d:	e8 bc 2d 01 00       	call   c001f84e <LinkedList<Device>::LinkedList()>
c000ca92:	83 c4 0c             	add    esp,0xc
c000ca95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ca99:	53                   	push   ebx
c000ca9a:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000caa0:	e8 9b ff ff ff       	call   c000ca40 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000caa5:	83 c4 18             	add    esp,0x18
c000caa8:	89 d8                	mov    eax,ebx
c000caaa:	5b                   	pop    ebx
c000caab:	c2 04 00             	ret    0x4
c000caae:	66 90                	xchg   ax,ax

c000cab0 <HardDiskController::HardDiskController(char const*)>:
c000cab0:	83 ec 0c             	sub    esp,0xc
c000cab3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cab7:	83 ec 08             	sub    esp,0x8
c000caba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cabe:	50                   	push   eax
c000cabf:	e8 40 fe ff ff       	call   c000c904 <Device::Device(char const*)>
c000cac4:	83 c4 10             	add    esp,0x10
c000cac7:	ba 88 16 02 c0       	mov    edx,0xc0021688
c000cacc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cad0:	89 10                	mov    DWORD PTR [eax],edx
c000cad2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cad6:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000cae0:	90                   	nop
c000cae1:	83 c4 0c             	add    esp,0xc
c000cae4:	c3                   	ret    
c000cae5:	90                   	nop
c000cae6:	66 90                	xchg   ax,ax

c000cae8 <HardDiskController::~HardDiskController()>:
c000cae8:	83 ec 0c             	sub    esp,0xc
c000caeb:	ba 88 16 02 c0       	mov    edx,0xc0021688
c000caf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000caf4:	89 10                	mov    DWORD PTR [eax],edx
c000caf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cafa:	83 ec 0c             	sub    esp,0xc
c000cafd:	50                   	push   eax
c000cafe:	e8 6b fb ff ff       	call   c000c66e <Device::~Device()>
c000cb03:	83 c4 10             	add    esp,0x10
c000cb06:	90                   	nop
c000cb07:	83 c4 0c             	add    esp,0xc
c000cb0a:	c3                   	ret    
c000cb0b:	90                   	nop

c000cb0c <HardDiskController::~HardDiskController()>:
c000cb0c:	83 ec 0c             	sub    esp,0xc
c000cb0f:	83 ec 0c             	sub    esp,0xc
c000cb12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb16:	e8 cd ff ff ff       	call   c000cae8 <HardDiskController::~HardDiskController()>
c000cb1b:	83 c4 10             	add    esp,0x10
c000cb1e:	83 ec 08             	sub    esp,0x8
c000cb21:	68 58 01 00 00       	push   0x158
c000cb26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb2a:	e8 dd dc ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000cb2f:	83 c4 10             	add    esp,0x10
c000cb32:	83 c4 0c             	add    esp,0xc
c000cb35:	c3                   	ret    

c000cb36 <PhysicalDisk::eject()>:
c000cb36:	83 c8 ff             	or     eax,0xffffffff
c000cb39:	c3                   	ret    

c000cb3a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000cb3a:	83 ec 0c             	sub    esp,0xc
c000cb3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb41:	83 ec 08             	sub    esp,0x8
c000cb44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb48:	50                   	push   eax
c000cb49:	e8 b6 fd ff ff       	call   c000c904 <Device::Device(char const*)>
c000cb4e:	83 c4 10             	add    esp,0x10
c000cb51:	ba b4 16 02 c0       	mov    edx,0xc00216b4
c000cb56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb5a:	89 10                	mov    DWORD PTR [eax],edx
c000cb5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb60:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cb67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb6b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000cb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb76:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000cb80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb84:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000cb88:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000cb8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb92:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000cb9c:	90                   	nop
c000cb9d:	83 c4 0c             	add    esp,0xc
c000cba0:	c3                   	ret    
c000cba1:	90                   	nop

c000cba2 <PhysicalDisk::startCache()>:
c000cba2:	56                   	push   esi
c000cba3:	53                   	push   ebx
c000cba4:	83 ec 10             	sub    esp,0x10
c000cba7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cbab:	6a 44                	push   0x44
c000cbad:	e8 21 af ff ff       	call   c0007ad3 <malloc>
c000cbb2:	89 c6                	mov    esi,eax
c000cbb4:	58                   	pop    eax
c000cbb5:	5a                   	pop    edx
c000cbb6:	53                   	push   ebx
c000cbb7:	56                   	push   esi
c000cbb8:	e8 83 17 00 00       	call   c000e340 <VCache::VCache(PhysicalDisk*)>
c000cbbd:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000cbc3:	83 c4 14             	add    esp,0x14
c000cbc6:	5b                   	pop    ebx
c000cbc7:	5e                   	pop    esi
c000cbc8:	c3                   	ret    
c000cbc9:	90                   	nop

c000cbca <PhysicalDisk::~PhysicalDisk()>:
c000cbca:	83 ec 0c             	sub    esp,0xc
c000cbcd:	ba b4 16 02 c0       	mov    edx,0xc00216b4
c000cbd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cbd6:	89 10                	mov    DWORD PTR [eax],edx
c000cbd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cbdc:	83 ec 0c             	sub    esp,0xc
c000cbdf:	50                   	push   eax
c000cbe0:	e8 89 fa ff ff       	call   c000c66e <Device::~Device()>
c000cbe5:	83 c4 10             	add    esp,0x10
c000cbe8:	90                   	nop
c000cbe9:	83 c4 0c             	add    esp,0xc
c000cbec:	c3                   	ret    
c000cbed:	90                   	nop

c000cbee <PhysicalDisk::~PhysicalDisk()>:
c000cbee:	83 ec 0c             	sub    esp,0xc
c000cbf1:	83 ec 0c             	sub    esp,0xc
c000cbf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbf8:	e8 cd ff ff ff       	call   c000cbca <PhysicalDisk::~PhysicalDisk()>
c000cbfd:	83 c4 10             	add    esp,0x10
c000cc00:	83 ec 08             	sub    esp,0x8
c000cc03:	68 6c 01 00 00       	push   0x16c
c000cc08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc0c:	e8 fb db ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000cc11:	83 c4 10             	add    esp,0x10
c000cc14:	83 c4 0c             	add    esp,0xc
c000cc17:	c3                   	ret    

c000cc18 <int_handler>:
c000cc18:	55                   	push   ebp
c000cc19:	57                   	push   edi
c000cc1a:	56                   	push   esi
c000cc1b:	53                   	push   ebx
c000cc1c:	83 ec 0c             	sub    esp,0xc
c000cc1f:	80 3d 88 8e 02 c0 00 	cmp    BYTE PTR ds:0xc0028e88,0x0
c000cc26:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000cc2a:	74 0b                	je     c000cc37 <int_handler+0x1f>
c000cc2c:	fa                   	cli    
c000cc2d:	f4                   	hlt    
c000cc2e:	80 3d 88 8e 02 c0 00 	cmp    BYTE PTR ds:0xc0028e88,0x0
c000cc35:	75 f5                	jne    c000cc2c <int_handler+0x14>
c000cc37:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000cc3a:	8d 46 e0             	lea    eax,[esi-0x20]
c000cc3d:	83 f8 17             	cmp    eax,0x17
c000cc40:	76 40                	jbe    c000cc82 <int_handler+0x6a>
c000cc42:	c1 e6 04             	shl    esi,0x4
c000cc45:	31 db                	xor    ebx,ebx
c000cc47:	8d ae 20 74 02 c0    	lea    ebp,[esi-0x3ffd8be0]
c000cc4d:	81 c6 20 64 02 c0    	add    esi,0xc0026420
c000cc53:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000cc57:	85 c0                	test   eax,eax
c000cc59:	74 13                	je     c000cc6e <int_handler+0x56>
c000cc5b:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000cc5f:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000cc62:	74 2c                	je     c000cc90 <int_handler+0x78>
c000cc64:	83 ec 08             	sub    esp,0x8
c000cc67:	52                   	push   edx
c000cc68:	57                   	push   edi
c000cc69:	ff d0                	call   eax
c000cc6b:	83 c4 10             	add    esp,0x10
c000cc6e:	83 c3 01             	add    ebx,0x1
c000cc71:	83 fb 04             	cmp    ebx,0x4
c000cc74:	75 dd                	jne    c000cc53 <int_handler+0x3b>
c000cc76:	83 c4 0c             	add    esp,0xc
c000cc79:	31 c0                	xor    eax,eax
c000cc7b:	5b                   	pop    ebx
c000cc7c:	31 d2                	xor    edx,edx
c000cc7e:	5e                   	pop    esi
c000cc7f:	5f                   	pop    edi
c000cc80:	5d                   	pop    ebp
c000cc81:	c3                   	ret    
c000cc82:	83 ec 0c             	sub    esp,0xc
c000cc85:	50                   	push   eax
c000cc86:	e8 2f b2 00 00       	call   c0017eba <HalEndOfInterrupt(int)>
c000cc8b:	83 c4 10             	add    esp,0x10
c000cc8e:	eb b2                	jmp    c000cc42 <int_handler+0x2a>
c000cc90:	83 ec 08             	sub    esp,0x8
c000cc93:	52                   	push   edx
c000cc94:	57                   	push   edi
c000cc95:	ff d0                	call   eax
c000cc97:	83 c4 10             	add    esp,0x10
c000cc9a:	83 c4 0c             	add    esp,0xc
c000cc9d:	5b                   	pop    ebx
c000cc9e:	5e                   	pop    esi
c000cc9f:	5f                   	pop    edi
c000cca0:	5d                   	pop    ebp
c000cca1:	c3                   	ret    

c000cca2 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cca2:	56                   	push   esi
c000cca3:	31 c0                	xor    eax,eax
c000cca5:	53                   	push   ebx
c000cca6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ccaa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ccae:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ccb2:	89 ca                	mov    edx,ecx
c000ccb4:	c1 e2 04             	shl    edx,0x4
c000ccb7:	83 bc 82 20 74 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd8be0],0x0
c000ccbf:	74 17                	je     c000ccd8 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000ccc1:	83 c0 01             	add    eax,0x1
c000ccc4:	83 f8 04             	cmp    eax,0x4
c000ccc7:	75 ee                	jne    c000ccb7 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000ccc9:	c7 44 24 0c e4 16 02 c0 	mov    DWORD PTR [esp+0xc],0xc00216e4
c000ccd1:	5b                   	pop    ebx
c000ccd2:	5e                   	pop    esi
c000ccd3:	e9 31 46 00 00       	jmp    c0011309 <KePanic(char const*)>
c000ccd8:	8d 04 88             	lea    eax,[eax+ecx*4]
c000ccdb:	89 1c 85 20 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8be0],ebx
c000cce2:	5b                   	pop    ebx
c000cce3:	89 34 85 20 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9be0],esi
c000ccea:	5e                   	pop    esi
c000cceb:	c3                   	ret    

c000ccec <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000ccec:	55                   	push   ebp
c000cced:	57                   	push   edi
c000ccee:	56                   	push   esi
c000ccef:	53                   	push   ebx
c000ccf0:	83 ec 0c             	sub    esp,0xc
c000ccf3:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000ccf9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000ccfd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cd01:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cd08:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cd0b:	74 57                	je     c000cd64 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cd0d:	84 c0                	test   al,al
c000cd0f:	89 c7                	mov    edi,eax
c000cd11:	74 1d                	je     c000cd30 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000cd13:	83 fe 0f             	cmp    esi,0xf
c000cd16:	0f 8f d9 00 00 00    	jg     c000cdf5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c000cd1c:	0f b6 b6 e8 31 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdce18]
c000cd23:	0f b7 bc 36 c0 8b 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd7440]
c000cd2b:	d1 ef                	shr    edi,1
c000cd2d:	83 e7 01             	and    edi,0x1
c000cd30:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c000cd35:	83 ec 08             	sub    esp,0x8
c000cd38:	31 db                	xor    ebx,ebx
c000cd3a:	50                   	push   eax
c000cd3b:	68 f1 16 02 c0       	push   0xc00216f1
c000cd40:	e8 c5 db ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000cd45:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c000cd4a:	83 c4 10             	add    esp,0x10
c000cd4d:	85 c0                	test   eax,eax
c000cd4f:	7f 59                	jg     c000cdaa <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbe>
c000cd51:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cd54:	83 ec 0c             	sub    esp,0xc
c000cd57:	68 08 17 02 c0       	push   0xc0021708
c000cd5c:	e8 a8 45 00 00       	call   c0011309 <KePanic(char const*)>
c000cd61:	83 c4 10             	add    esp,0x10
c000cd64:	89 e8                	mov    eax,ebp
c000cd66:	31 d2                	xor    edx,edx
c000cd68:	c1 e0 04             	shl    eax,0x4
c000cd6b:	8b 8c 90 20 74 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd8be0]
c000cd72:	85 c9                	test   ecx,ecx
c000cd74:	0f 84 92 00 00 00    	je     c000ce0c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x120>
c000cd7a:	83 c2 01             	add    edx,0x1
c000cd7d:	83 fa 04             	cmp    edx,0x4
c000cd80:	75 e9                	jne    c000cd6b <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000cd82:	83 ec 0c             	sub    esp,0xc
c000cd85:	68 5c 17 02 c0       	push   0xc002175c
c000cd8a:	e8 7a 45 00 00       	call   c0011309 <KePanic(char const*)>
c000cd8f:	83 c4 10             	add    esp,0x10
c000cd92:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cd97:	83 c4 0c             	add    esp,0xc
c000cd9a:	5b                   	pop    ebx
c000cd9b:	5e                   	pop    esi
c000cd9c:	5f                   	pop    edi
c000cd9d:	5d                   	pop    ebp
c000cd9e:	c3                   	ret    
c000cd9f:	83 c3 01             	add    ebx,0x1
c000cda2:	39 1d c0 a0 02 c0    	cmp    DWORD PTR ds:0xc002a0c0,ebx
c000cda8:	7e a7                	jle    c000cd51 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000cdaa:	8b 2c 9d e0 a0 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd5f20]
c000cdb1:	83 ec 08             	sub    esp,0x8
c000cdb4:	56                   	push   esi
c000cdb5:	55                   	push   ebp
c000cdb6:	e8 e9 18 01 00       	call   c001e6a4 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000cdbb:	83 c4 10             	add    esp,0x10
c000cdbe:	84 c0                	test   al,al
c000cdc0:	74 dd                	je     c000cd9f <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000cdc2:	89 f8                	mov    eax,edi
c000cdc4:	83 ec 04             	sub    esp,0x4
c000cdc7:	8b 1c 9d e0 a0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd5f20]
c000cdce:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cdd1:	0f b6 f8             	movzx  edi,al
c000cdd4:	57                   	push   edi
c000cdd5:	89 e8                	mov    eax,ebp
c000cdd7:	6a 00                	push   0x0
c000cdd9:	0f b6 c0             	movzx  eax,al
c000cddc:	50                   	push   eax
c000cddd:	89 f0                	mov    eax,esi
c000cddf:	6a 00                	push   0x0
c000cde1:	0f b6 c0             	movzx  eax,al
c000cde4:	6a 00                	push   0x0
c000cde6:	50                   	push   eax
c000cde7:	53                   	push   ebx
c000cde8:	e8 23 1a 01 00       	call   c001e810 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000cded:	83 c4 20             	add    esp,0x20
c000cdf0:	e9 6f ff ff ff       	jmp    c000cd64 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cdf5:	83 ec 0c             	sub    esp,0xc
c000cdf8:	31 ff                	xor    edi,edi
c000cdfa:	68 24 17 02 c0       	push   0xc0021724
c000cdff:	e8 05 45 00 00       	call   c0011309 <KePanic(char const*)>
c000ce04:	83 c4 10             	add    esp,0x10
c000ce07:	e9 24 ff ff ff       	jmp    c000cd30 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000ce0c:	8d 04 aa             	lea    eax,[edx+ebp*4]
c000ce0f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ce13:	89 14 85 20 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8be0],edx
c000ce1a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ce1e:	89 14 85 20 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9be0],edx
c000ce25:	83 c4 0c             	add    esp,0xc
c000ce28:	89 f0                	mov    eax,esi
c000ce2a:	5b                   	pop    ebx
c000ce2b:	5e                   	pop    esi
c000ce2c:	5f                   	pop    edi
c000ce2d:	5d                   	pop    ebp
c000ce2e:	c3                   	ret    

c000ce2f <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000ce2f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce33:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ce37:	c1 e0 04             	shl    eax,0x4
c000ce3a:	8d 50 10             	lea    edx,[eax+0x10]
c000ce3d:	39 88 20 74 02 c0    	cmp    DWORD PTR [eax-0x3ffd8be0],ecx
c000ce43:	74 08                	je     c000ce4d <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000ce45:	83 c0 04             	add    eax,0x4
c000ce48:	39 d0                	cmp    eax,edx
c000ce4a:	75 f1                	jne    c000ce3d <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000ce4c:	c3                   	ret    
c000ce4d:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000ce57:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000ce61:	eb e2                	jmp    c000ce45 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000ce63 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ce63:	56                   	push   esi
c000ce64:	53                   	push   ebx
c000ce65:	83 ec 04             	sub    esp,0x4
c000ce68:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000ce6d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ce71:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ce75:	74 0e                	je     c000ce85 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000ce77:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ce7c:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000ce83:	75 34                	jne    c000ceb9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x56>
c000ce85:	8d 43 20             	lea    eax,[ebx+0x20]
c000ce88:	c1 e0 04             	shl    eax,0x4
c000ce8b:	8d 50 10             	lea    edx,[eax+0x10]
c000ce8e:	39 b0 20 74 02 c0    	cmp    DWORD PTR [eax-0x3ffd8be0],esi
c000ce94:	74 0d                	je     c000cea3 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c000ce96:	83 c0 04             	add    eax,0x4
c000ce99:	39 d0                	cmp    eax,edx
c000ce9b:	75 f1                	jne    c000ce8e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000ce9d:	83 c4 04             	add    esp,0x4
c000cea0:	5b                   	pop    ebx
c000cea1:	5e                   	pop    esi
c000cea2:	c3                   	ret    
c000cea3:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000cead:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000ceb7:	eb dd                	jmp    c000ce96 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c000ceb9:	83 fb 0f             	cmp    ebx,0xf
c000cebc:	7f 09                	jg     c000cec7 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x64>
c000cebe:	0f b6 9b e8 31 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdce18]
c000cec5:	eb be                	jmp    c000ce85 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000cec7:	83 ec 0c             	sub    esp,0xc
c000ceca:	68 15 17 02 c0       	push   0xc0021715
c000cecf:	e8 35 44 00 00       	call   c0011309 <KePanic(char const*)>
c000ced4:	83 c4 10             	add    esp,0x10
c000ced7:	eb ac                	jmp    c000ce85 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c000ced9 <setupINTS()>:
c000ced9:	31 c0                	xor    eax,eax
c000cedb:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000cee5:	83 c0 10             	add    eax,0x10
c000cee8:	c7 80 10 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bf0],0x0
c000cef2:	c7 80 14 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bec],0x0
c000cefc:	c7 80 14 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bec],0x0
c000cf06:	c7 80 18 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be8],0x0
c000cf10:	c7 80 18 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be8],0x0
c000cf1a:	c7 80 1c 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be4],0x0
c000cf24:	c7 80 1c 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be4],0x0
c000cf2e:	3d 00 10 00 00       	cmp    eax,0x1000
c000cf33:	75 a6                	jne    c000cedb <setupINTS()+0x2>
c000cf35:	c3                   	ret    

c000cf36 <convertLegacyIRQNumber(int)>:
c000cf36:	83 ec 0c             	sub    esp,0xc
c000cf39:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000cf3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf43:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cf4a:	74 0c                	je     c000cf58 <convertLegacyIRQNumber(int)+0x22>
c000cf4c:	83 f8 0f             	cmp    eax,0xf
c000cf4f:	7f 0b                	jg     c000cf5c <convertLegacyIRQNumber(int)+0x26>
c000cf51:	0f b6 80 e8 31 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdce18]
c000cf58:	83 c4 0c             	add    esp,0xc
c000cf5b:	c3                   	ret    
c000cf5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf60:	83 ec 0c             	sub    esp,0xc
c000cf63:	68 24 17 02 c0       	push   0xc0021724
c000cf68:	e8 9c 43 00 00       	call   c0011309 <KePanic(char const*)>
c000cf6d:	83 c4 10             	add    esp,0x10
c000cf70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf74:	83 c4 0c             	add    esp,0xc
c000cf77:	c3                   	ret    

c000cf78 <startGUI(void*)>:
c000cf78:	55                   	push   ebp
c000cf79:	89 e5                	mov    ebp,esp
c000cf7b:	53                   	push   ebx
c000cf7c:	83 ec 04             	sub    esp,0x4
c000cf7f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cf84:	83 e8 01             	sub    eax,0x1
c000cf87:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000cf8c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cf91:	85 c0                	test   eax,eax
c000cf93:	75 01                	jne    c000cf96 <startGUI(void*)+0x1e>
c000cf95:	fb                   	sti    
c000cf96:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cf9c:	83 ec 08             	sub    esp,0x8
c000cf9f:	6a 01                	push   0x1
c000cfa1:	68 81 17 02 c0       	push   0xc0021781
c000cfa6:	e8 f1 81 00 00       	call   c001519c <Thr::loadDLL(char const*, bool)>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	83 ec 08             	sub    esp,0x8
c000cfb1:	53                   	push   ebx
c000cfb2:	50                   	push   eax
c000cfb3:	e8 24 84 00 00       	call   c00153dc <Thr::executeDLL(unsigned long, void*)>
c000cfb8:	83 c4 10             	add    esp,0x10
c000cfbb:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cfc1:	83 ec 08             	sub    esp,0x8
c000cfc4:	6a 01                	push   0x1
c000cfc6:	68 9b 17 02 c0       	push   0xc002179b
c000cfcb:	e8 cc 81 00 00       	call   c001519c <Thr::loadDLL(char const*, bool)>
c000cfd0:	83 c4 10             	add    esp,0x10
c000cfd3:	83 ec 08             	sub    esp,0x8
c000cfd6:	53                   	push   ebx
c000cfd7:	50                   	push   eax
c000cfd8:	e8 ff 83 00 00       	call   c00153dc <Thr::executeDLL(unsigned long, void*)>
c000cfdd:	83 c4 10             	add    esp,0x10
c000cfe0:	90                   	nop
c000cfe1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000cfe4:	c9                   	leave  
c000cfe5:	c3                   	ret    

c000cfe6 <startGUIVESA(void*)>:
c000cfe6:	55                   	push   ebp
c000cfe7:	89 e5                	mov    ebp,esp
c000cfe9:	53                   	push   ebx
c000cfea:	83 ec 04             	sub    esp,0x4
c000cfed:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cff2:	83 e8 01             	sub    eax,0x1
c000cff5:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000cffa:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cfff:	85 c0                	test   eax,eax
c000d001:	75 01                	jne    c000d004 <startGUIVESA(void*)+0x1e>
c000d003:	fb                   	sti    
c000d004:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000d00a:	83 ec 08             	sub    esp,0x8
c000d00d:	6a 01                	push   0x1
c000d00f:	68 b9 17 02 c0       	push   0xc00217b9
c000d014:	e8 83 81 00 00       	call   c001519c <Thr::loadDLL(char const*, bool)>
c000d019:	83 c4 10             	add    esp,0x10
c000d01c:	83 ec 08             	sub    esp,0x8
c000d01f:	53                   	push   ebx
c000d020:	50                   	push   eax
c000d021:	e8 b6 83 00 00       	call   c00153dc <Thr::executeDLL(unsigned long, void*)>
c000d026:	83 c4 10             	add    esp,0x10
c000d029:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000d02f:	83 ec 08             	sub    esp,0x8
c000d032:	6a 01                	push   0x1
c000d034:	68 9b 17 02 c0       	push   0xc002179b
c000d039:	e8 5e 81 00 00       	call   c001519c <Thr::loadDLL(char const*, bool)>
c000d03e:	83 c4 10             	add    esp,0x10
c000d041:	83 ec 08             	sub    esp,0x8
c000d044:	53                   	push   ebx
c000d045:	50                   	push   eax
c000d046:	e8 91 83 00 00       	call   c00153dc <Thr::executeDLL(unsigned long, void*)>
c000d04b:	83 c4 10             	add    esp,0x10
c000d04e:	90                   	nop
c000d04f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d052:	c9                   	leave  
c000d053:	c3                   	ret    

c000d054 <sendKeyToTerminal(unsigned char)>:
c000d054:	55                   	push   ebp
c000d055:	89 e5                	mov    ebp,esp
c000d057:	83 ec 28             	sub    esp,0x28
c000d05a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d05d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000d060:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c000d065:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000d069:	83 ec 08             	sub    esp,0x8
c000d06c:	52                   	push   edx
c000d06d:	50                   	push   eax
c000d06e:	e8 49 bd ff ff       	call   c0008dbc <VgaText::receiveKey(unsigned char)>
c000d073:	83 c4 10             	add    esp,0x10
c000d076:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d07a:	83 f8 0a             	cmp    eax,0xa
c000d07d:	74 16                	je     c000d095 <sendKeyToTerminal(unsigned char)+0x41>
c000d07f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d083:	83 f8 03             	cmp    eax,0x3
c000d086:	74 0d                	je     c000d095 <sendKeyToTerminal(unsigned char)+0x41>
c000d088:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d08c:	83 f8 1c             	cmp    eax,0x1c
c000d08f:	0f 85 97 00 00 00    	jne    c000d12c <sendKeyToTerminal(unsigned char)+0xd8>
c000d095:	fa                   	cli    
c000d096:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d09b:	83 c0 01             	add    eax,0x1
c000d09e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d0a3:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000d0a8:	83 c0 01             	add    eax,0x1
c000d0ab:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000d0b0:	a1 20 84 02 c0       	mov    eax,ds:0xc0028420
c000d0b5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d0b8:	c7 05 20 84 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028420,0x0
c000d0c2:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000d0c6:	74 1f                	je     c000d0e7 <sendKeyToTerminal(unsigned char)+0x93>
c000d0c8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d0cb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000d0ce:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d0d1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d0d4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d0d7:	83 ec 0c             	sub    esp,0xc
c000d0da:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d0dd:	e8 1e 90 00 00       	call   c0016100 <unblockTask(ThreadControlBlock*)>
c000d0e2:	83 c4 10             	add    esp,0x10
c000d0e5:	eb db                	jmp    c000d0c2 <sendKeyToTerminal(unsigned char)+0x6e>
c000d0e7:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000d0ec:	83 e8 01             	sub    eax,0x1
c000d0ef:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000d0f4:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000d0f9:	85 c0                	test   eax,eax
c000d0fb:	75 18                	jne    c000d115 <sendKeyToTerminal(unsigned char)+0xc1>
c000d0fd:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c000d102:	85 c0                	test   eax,eax
c000d104:	74 0f                	je     c000d115 <sendKeyToTerminal(unsigned char)+0xc1>
c000d106:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c000d110:	e8 f3 8a 00 00       	call   c0015c08 <schedule()>
c000d115:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d11a:	83 e8 01             	sub    eax,0x1
c000d11d:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d122:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d127:	85 c0                	test   eax,eax
c000d129:	75 01                	jne    c000d12c <sendKeyToTerminal(unsigned char)+0xd8>
c000d12b:	fb                   	sti    
c000d12c:	90                   	nop
c000d12d:	c9                   	leave  
c000d12e:	c3                   	ret    

c000d12f <sendKeyboardToken(KeyboardToken)>:
c000d12f:	55                   	push   ebp
c000d130:	89 e5                	mov    ebp,esp
c000d132:	83 ec 18             	sub    esp,0x18
c000d135:	e8 1f 42 00 00       	call   c0011359 <KeUserIOReceived()>
c000d13a:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d13d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d140:	0f b7 c0             	movzx  eax,ax
c000d143:	83 f2 01             	xor    edx,0x1
c000d146:	88 90 40 84 02 c0    	mov    BYTE PTR [eax-0x3ffd7bc0],dl
c000d14c:	a1 28 84 02 c0       	mov    eax,ds:0xc0028428
c000d151:	85 c0                	test   eax,eax
c000d153:	74 24                	je     c000d179 <sendKeyboardToken(KeyboardToken)+0x4a>
c000d155:	8b 15 28 84 02 c0    	mov    edx,DWORD PTR ds:0xc0028428
c000d15b:	83 ec 04             	sub    esp,0x4
c000d15e:	68 40 84 02 c0       	push   0xc0028440
c000d163:	83 ec 08             	sub    esp,0x8
c000d166:	89 e0                	mov    eax,esp
c000d168:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000d16b:	89 08                	mov    DWORD PTR [eax],ecx
c000d16d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000d170:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d174:	ff d2                	call   edx
c000d176:	83 c4 10             	add    esp,0x10
c000d179:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d17d:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d180:	a0 48 88 02 c0       	mov    al,ds:0xc0028848
c000d185:	0f b6 d2             	movzx  edx,dl
c000d188:	0f b6 c0             	movzx  eax,al
c000d18b:	39 c2                	cmp    edx,eax
c000d18d:	74 1c                	je     c000d1ab <sendKeyboardToken(KeyboardToken)+0x7c>
c000d18f:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d192:	a2 48 88 02 c0       	mov    ds:0xc0028848,al
c000d197:	a0 48 88 02 c0       	mov    al,ds:0xc0028848
c000d19c:	0f b6 c0             	movzx  eax,al
c000d19f:	83 ec 0c             	sub    esp,0xc
c000d1a2:	50                   	push   eax
c000d1a3:	e8 70 b3 ff ff       	call   c0008518 <setTerminalScrollLock(bool)>
c000d1a8:	83 c4 10             	add    esp,0x10
c000d1ab:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d1ae:	0f b6 c0             	movzx  eax,al
c000d1b1:	85 c0                	test   eax,eax
c000d1b3:	0f 84 da 00 00 00    	je     c000d293 <sendKeyboardToken(KeyboardToken)+0x164>
c000d1b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1bc:	0f b7 c0             	movzx  eax,ax
c000d1bf:	3d 18 03 00 00       	cmp    eax,0x318
c000d1c4:	75 06                	jne    c000d1cc <sendKeyboardToken(KeyboardToken)+0x9d>
c000d1c6:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d1cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1cf:	0f b7 c0             	movzx  eax,ax
c000d1d2:	3d 19 03 00 00       	cmp    eax,0x319
c000d1d7:	75 06                	jne    c000d1df <sendKeyboardToken(KeyboardToken)+0xb0>
c000d1d9:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d1df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1e2:	0f b7 c0             	movzx  eax,ax
c000d1e5:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d1ea:	75 06                	jne    c000d1f2 <sendKeyboardToken(KeyboardToken)+0xc3>
c000d1ec:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d1f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1f5:	0f b7 c0             	movzx  eax,ax
c000d1f8:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d1fd:	75 06                	jne    c000d205 <sendKeyboardToken(KeyboardToken)+0xd6>
c000d1ff:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d205:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d208:	0f b7 c0             	movzx  eax,ax
c000d20b:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d210:	75 06                	jne    c000d218 <sendKeyboardToken(KeyboardToken)+0xe9>
c000d212:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d218:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d21b:	0f b7 c0             	movzx  eax,ax
c000d21e:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d223:	75 06                	jne    c000d22b <sendKeyboardToken(KeyboardToken)+0xfc>
c000d225:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d22b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d22e:	0f b7 c0             	movzx  eax,ax
c000d231:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d236:	75 06                	jne    c000d23e <sendKeyboardToken(KeyboardToken)+0x10f>
c000d238:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d23e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d241:	0f b7 c0             	movzx  eax,ax
c000d244:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d249:	75 06                	jne    c000d251 <sendKeyboardToken(KeyboardToken)+0x122>
c000d24b:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d251:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d254:	0f b7 c0             	movzx  eax,ax
c000d257:	3d 20 03 00 00       	cmp    eax,0x320
c000d25c:	75 06                	jne    c000d264 <sendKeyboardToken(KeyboardToken)+0x135>
c000d25e:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d264:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d267:	0f b7 c0             	movzx  eax,ax
c000d26a:	3d 21 03 00 00       	cmp    eax,0x321
c000d26f:	75 06                	jne    c000d277 <sendKeyboardToken(KeyboardToken)+0x148>
c000d271:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d277:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d27a:	0f b7 c0             	movzx  eax,ax
c000d27d:	3d 22 03 00 00       	cmp    eax,0x322
c000d282:	0f 85 f1 00 00 00    	jne    c000d379 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d288:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d28e:	e9 e6 00 00 00       	jmp    c000d379 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d293:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d296:	0f b7 c0             	movzx  eax,ax
c000d299:	3d 18 03 00 00       	cmp    eax,0x318
c000d29e:	75 0a                	jne    c000d2aa <sendKeyboardToken(KeyboardToken)+0x17b>
c000d2a0:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d2a6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2ad:	0f b7 c0             	movzx  eax,ax
c000d2b0:	3d 19 03 00 00       	cmp    eax,0x319
c000d2b5:	75 0a                	jne    c000d2c1 <sendKeyboardToken(KeyboardToken)+0x192>
c000d2b7:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d2bd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2c4:	0f b7 c0             	movzx  eax,ax
c000d2c7:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d2cc:	75 0a                	jne    c000d2d8 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d2ce:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d2d4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2db:	0f b7 c0             	movzx  eax,ax
c000d2de:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d2e3:	75 0a                	jne    c000d2ef <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d2e5:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d2eb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2f2:	0f b7 c0             	movzx  eax,ax
c000d2f5:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d2fa:	75 0a                	jne    c000d306 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d2fc:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d302:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d306:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d309:	0f b7 c0             	movzx  eax,ax
c000d30c:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d311:	75 0a                	jne    c000d31d <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d313:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d319:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d31d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d320:	0f b7 c0             	movzx  eax,ax
c000d323:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d328:	75 0a                	jne    c000d334 <sendKeyboardToken(KeyboardToken)+0x205>
c000d32a:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d330:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d334:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d337:	0f b7 c0             	movzx  eax,ax
c000d33a:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d33f:	75 0a                	jne    c000d34b <sendKeyboardToken(KeyboardToken)+0x21c>
c000d341:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d347:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d34b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d34e:	0f b7 c0             	movzx  eax,ax
c000d351:	3d 20 03 00 00       	cmp    eax,0x320
c000d356:	75 0a                	jne    c000d362 <sendKeyboardToken(KeyboardToken)+0x233>
c000d358:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d35e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d362:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d365:	0f b7 c0             	movzx  eax,ax
c000d368:	3d 21 03 00 00       	cmp    eax,0x321
c000d36d:	75 0a                	jne    c000d379 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d36f:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d375:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d379:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d37c:	0f b7 c0             	movzx  eax,ax
c000d37f:	3d 00 02 00 00       	cmp    eax,0x200
c000d384:	75 2f                	jne    c000d3b5 <sendKeyboardToken(KeyboardToken)+0x286>
c000d386:	a0 40 88 02 c0       	mov    al,ds:0xc0028840
c000d38b:	83 f0 01             	xor    eax,0x1
c000d38e:	0f b6 c0             	movzx  eax,al
c000d391:	85 c0                	test   eax,eax
c000d393:	74 20                	je     c000d3b5 <sendKeyboardToken(KeyboardToken)+0x286>
c000d395:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000d39a:	6a 01                	push   0x1
c000d39c:	6a 00                	push   0x0
c000d39e:	68 78 cf 00 c0       	push   0xc000cf78
c000d3a3:	50                   	push   eax
c000d3a4:	e8 13 86 00 00       	call   c00159bc <Process::createThread(void (*)(void*), void*, int)>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	c6 05 40 88 02 c0 01 	mov    BYTE PTR ds:0xc0028840,0x1
c000d3b3:	eb 3a                	jmp    c000d3ef <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d3b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3b8:	0f b7 c0             	movzx  eax,ax
c000d3bb:	3d 01 02 00 00       	cmp    eax,0x201
c000d3c0:	75 2d                	jne    c000d3ef <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d3c2:	a0 40 88 02 c0       	mov    al,ds:0xc0028840
c000d3c7:	83 f0 01             	xor    eax,0x1
c000d3ca:	0f b6 c0             	movzx  eax,al
c000d3cd:	85 c0                	test   eax,eax
c000d3cf:	74 1e                	je     c000d3ef <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d3d1:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000d3d6:	6a 01                	push   0x1
c000d3d8:	6a 00                	push   0x0
c000d3da:	68 e6 cf 00 c0       	push   0xc000cfe6
c000d3df:	50                   	push   eax
c000d3e0:	e8 d7 85 00 00       	call   c00159bc <Process::createThread(void (*)(void*), void*, int)>
c000d3e5:	83 c4 10             	add    esp,0x10
c000d3e8:	c6 05 40 88 02 c0 01 	mov    BYTE PTR ds:0xc0028840,0x1
c000d3ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3f2:	0f b7 c0             	movzx  eax,ax
c000d3f5:	3d 25 03 00 00       	cmp    eax,0x325
c000d3fa:	75 06                	jne    c000d402 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d3fc:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d402:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d405:	0f b7 c0             	movzx  eax,ax
c000d408:	3d 24 03 00 00       	cmp    eax,0x324
c000d40d:	75 06                	jne    c000d415 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d40f:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d415:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d418:	0f b7 c0             	movzx  eax,ax
c000d41b:	3d 23 03 00 00       	cmp    eax,0x323
c000d420:	75 06                	jne    c000d428 <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d422:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d428:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d42b:	0f b7 c0             	movzx  eax,ax
c000d42e:	3d 26 03 00 00       	cmp    eax,0x326
c000d433:	75 06                	jne    c000d43b <sendKeyboardToken(KeyboardToken)+0x30c>
c000d435:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d43b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d43e:	0f b7 c0             	movzx  eax,ax
c000d441:	3d 27 03 00 00       	cmp    eax,0x327
c000d446:	75 06                	jne    c000d44e <sendKeyboardToken(KeyboardToken)+0x31f>
c000d448:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d44e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d451:	0f b7 c0             	movzx  eax,ax
c000d454:	3d 22 03 00 00       	cmp    eax,0x322
c000d459:	75 06                	jne    c000d461 <sendKeyboardToken(KeyboardToken)+0x332>
c000d45b:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d461:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d465:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d468:	83 f0 01             	xor    eax,0x1
c000d46b:	0f b6 c0             	movzx  eax,al
c000d46e:	85 c0                	test   eax,eax
c000d470:	74 7c                	je     c000d4ee <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d472:	a0 41 85 02 c0       	mov    al,ds:0xc0028541
c000d477:	0f b6 c0             	movzx  eax,al
c000d47a:	85 c0                	test   eax,eax
c000d47c:	74 43                	je     c000d4c1 <sendKeyboardToken(KeyboardToken)+0x392>
c000d47e:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d482:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d486:	85 c0                	test   eax,eax
c000d488:	74 2b                	je     c000d4b5 <sendKeyboardToken(KeyboardToken)+0x386>
c000d48a:	8b 15 44 88 02 c0    	mov    edx,DWORD PTR ds:0xc0028844
c000d490:	89 d0                	mov    eax,edx
c000d492:	c1 e0 02             	shl    eax,0x2
c000d495:	01 d0                	add    eax,edx
c000d497:	d1 e0                	shl    eax,1
c000d499:	a3 44 88 02 c0       	mov    ds:0xc0028844,eax
c000d49e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4a1:	0f b7 c0             	movzx  eax,ax
c000d4a4:	8d 50 d0             	lea    edx,[eax-0x30]
c000d4a7:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d4ac:	01 d0                	add    eax,edx
c000d4ae:	a3 44 88 02 c0       	mov    ds:0xc0028844,eax
c000d4b3:	eb 71                	jmp    c000d526 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d4b5:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d4bf:	eb 65                	jmp    c000d526 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d4c1:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d4c6:	85 c0                	test   eax,eax
c000d4c8:	74 18                	je     c000d4e2 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d4ca:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d4cf:	0f b6 c0             	movzx  eax,al
c000d4d2:	83 ec 0c             	sub    esp,0xc
c000d4d5:	50                   	push   eax
c000d4d6:	e8 79 fb ff ff       	call   c000d054 <sendKeyToTerminal(unsigned char)>
c000d4db:	83 c4 10             	add    esp,0x10
c000d4de:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d4e2:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d4ec:	eb 38                	jmp    c000d526 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d4ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4f1:	0f b7 c0             	movzx  eax,ax
c000d4f4:	3d 01 01 00 00       	cmp    eax,0x101
c000d4f9:	75 2b                	jne    c000d526 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d4fb:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d500:	85 c0                	test   eax,eax
c000d502:	74 18                	je     c000d51c <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d504:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d509:	0f b6 c0             	movzx  eax,al
c000d50c:	83 ec 0c             	sub    esp,0xc
c000d50f:	50                   	push   eax
c000d510:	e8 3f fb ff ff       	call   c000d054 <sendKeyToTerminal(unsigned char)>
c000d515:	83 c4 10             	add    esp,0x10
c000d518:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d51c:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d526:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d529:	83 f0 01             	xor    eax,0x1
c000d52c:	0f b6 c0             	movzx  eax,al
c000d52f:	85 c0                	test   eax,eax
c000d531:	74 5a                	je     c000d58d <sendKeyboardToken(KeyboardToken)+0x45e>
c000d533:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d536:	83 f0 01             	xor    eax,0x1
c000d539:	0f b6 c0             	movzx  eax,al
c000d53c:	85 c0                	test   eax,eax
c000d53e:	74 4d                	je     c000d58d <sendKeyboardToken(KeyboardToken)+0x45e>
c000d540:	a0 40 85 02 c0       	mov    al,ds:0xc0028540
c000d545:	83 f0 01             	xor    eax,0x1
c000d548:	0f b6 c0             	movzx  eax,al
c000d54b:	85 c0                	test   eax,eax
c000d54d:	74 3e                	je     c000d58d <sendKeyboardToken(KeyboardToken)+0x45e>
c000d54f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d552:	0f b7 c0             	movzx  eax,ax
c000d555:	83 f8 1f             	cmp    eax,0x1f
c000d558:	76 0b                	jbe    c000d565 <sendKeyboardToken(KeyboardToken)+0x436>
c000d55a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d55d:	0f b7 c0             	movzx  eax,ax
c000d560:	83 f8 7e             	cmp    eax,0x7e
c000d563:	76 16                	jbe    c000d57b <sendKeyboardToken(KeyboardToken)+0x44c>
c000d565:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d568:	0f b7 c0             	movzx  eax,ax
c000d56b:	83 f8 0a             	cmp    eax,0xa
c000d56e:	74 0b                	je     c000d57b <sendKeyboardToken(KeyboardToken)+0x44c>
c000d570:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d573:	0f b7 c0             	movzx  eax,ax
c000d576:	83 f8 08             	cmp    eax,0x8
c000d579:	75 12                	jne    c000d58d <sendKeyboardToken(KeyboardToken)+0x45e>
c000d57b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d57e:	0f b6 c0             	movzx  eax,al
c000d581:	83 ec 0c             	sub    esp,0xc
c000d584:	50                   	push   eax
c000d585:	e8 ca fa ff ff       	call   c000d054 <sendKeyToTerminal(unsigned char)>
c000d58a:	83 c4 10             	add    esp,0x10
c000d58d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d590:	83 f0 01             	xor    eax,0x1
c000d593:	0f b6 c0             	movzx  eax,al
c000d596:	85 c0                	test   eax,eax
c000d598:	74 5d                	je     c000d5f7 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d59a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d59d:	83 f0 01             	xor    eax,0x1
c000d5a0:	0f b6 c0             	movzx  eax,al
c000d5a3:	85 c0                	test   eax,eax
c000d5a5:	74 50                	je     c000d5f7 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d5a7:	a0 40 85 02 c0       	mov    al,ds:0xc0028540
c000d5ac:	0f b6 c0             	movzx  eax,al
c000d5af:	85 c0                	test   eax,eax
c000d5b1:	74 44                	je     c000d5f7 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d5b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5b6:	0f b7 c0             	movzx  eax,ax
c000d5b9:	83 f8 3f             	cmp    eax,0x3f
c000d5bc:	76 39                	jbe    c000d5f7 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d5be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5c1:	0f b7 c0             	movzx  eax,ax
c000d5c4:	83 f8 7f             	cmp    eax,0x7f
c000d5c7:	77 2e                	ja     c000d5f7 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d5c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5cc:	88 c2                	mov    dl,al
c000d5ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5d1:	0f b7 c0             	movzx  eax,ax
c000d5d4:	83 f8 5f             	cmp    eax,0x5f
c000d5d7:	76 04                	jbe    c000d5dd <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d5d9:	b0 20                	mov    al,0x20
c000d5db:	eb 02                	jmp    c000d5df <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d5dd:	b0 00                	mov    al,0x0
c000d5df:	89 d1                	mov    ecx,edx
c000d5e1:	29 c1                	sub    ecx,eax
c000d5e3:	89 c8                	mov    eax,ecx
c000d5e5:	83 e8 40             	sub    eax,0x40
c000d5e8:	0f b6 c0             	movzx  eax,al
c000d5eb:	83 ec 0c             	sub    esp,0xc
c000d5ee:	50                   	push   eax
c000d5ef:	e8 60 fa ff ff       	call   c000d054 <sendKeyToTerminal(unsigned char)>
c000d5f4:	83 c4 10             	add    esp,0x10
c000d5f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5fa:	0f b7 c0             	movzx  eax,ax
c000d5fd:	3d 00 03 00 00       	cmp    eax,0x300
c000d602:	75 12                	jne    c000d616 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d604:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d607:	83 f0 01             	xor    eax,0x1
c000d60a:	0f b6 c0             	movzx  eax,al
c000d60d:	85 c0                	test   eax,eax
c000d60f:	74 05                	je     c000d616 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d611:	e8 03 af ff ff       	call   c0008519 <doTerminalCycle()>
c000d616:	90                   	nop
c000d617:	c9                   	leave  
c000d618:	c3                   	ret    

c000d619 <clearInternalKeybuffer(VgaText*)>:
c000d619:	55                   	push   ebp
c000d61a:	89 e5                	mov    ebp,esp
c000d61c:	83 ec 08             	sub    esp,0x8
c000d61f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d622:	05 02 01 00 00       	add    eax,0x102
c000d627:	83 ec 0c             	sub    esp,0xc
c000d62a:	50                   	push   eax
c000d62b:	e8 50 2f ff ff       	call   c0000580 <strlen>
c000d630:	83 c4 10             	add    esp,0x10
c000d633:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d636:	81 c2 02 01 00 00    	add    edx,0x102
c000d63c:	83 ec 04             	sub    esp,0x4
c000d63f:	50                   	push   eax
c000d640:	6a 00                	push   0x0
c000d642:	52                   	push   edx
c000d643:	e8 a8 2e ff ff       	call   c00004f0 <memset>
c000d648:	83 c4 10             	add    esp,0x10
c000d64b:	90                   	nop
c000d64c:	c9                   	leave  
c000d64d:	c3                   	ret    

c000d64e <readKeyboard(VgaText*, char*, unsigned long)>:
c000d64e:	55                   	push   ebp
c000d64f:	89 e5                	mov    ebp,esp
c000d651:	83 ec 18             	sub    esp,0x18
c000d654:	a1 28 84 02 c0       	mov    eax,ds:0xc0028428
c000d659:	85 c0                	test   eax,eax
c000d65b:	74 2a                	je     c000d687 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d65d:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d663:	8b 15 28 84 02 c0    	mov    edx,DWORD PTR ds:0xc0028428
c000d669:	83 ec 04             	sub    esp,0x4
c000d66c:	68 40 84 02 c0       	push   0xc0028440
c000d671:	83 ec 08             	sub    esp,0x8
c000d674:	89 e0                	mov    eax,esp
c000d676:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000d679:	89 08                	mov    DWORD PTR [eax],ecx
c000d67b:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000d67e:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d682:	ff d2                	call   edx
c000d684:	83 c4 10             	add    esp,0x10
c000d687:	fb                   	sti    
c000d688:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d68f:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d693:	0f 84 0d 01 00 00    	je     c000d7a6 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d699:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d69c:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d6a2:	0f be c0             	movsx  eax,al
c000d6a5:	85 c0                	test   eax,eax
c000d6a7:	75 2c                	jne    c000d6d5 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d6a9:	fa                   	cli    
c000d6aa:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d6af:	83 c0 01             	add    eax,0x1
c000d6b2:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d6b7:	e8 4c 85 00 00       	call   c0015c08 <schedule()>
c000d6bc:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d6c1:	83 e8 01             	sub    eax,0x1
c000d6c4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d6c9:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d6ce:	85 c0                	test   eax,eax
c000d6d0:	75 c7                	jne    c000d699 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d6d2:	fb                   	sti    
c000d6d3:	eb c4                	jmp    c000d699 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d6d5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d6d8:	8d 50 01             	lea    edx,[eax+0x1]
c000d6db:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d6de:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d6e1:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d6e7:	88 10                	mov    BYTE PTR [eax],dl
c000d6e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6ec:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d6f2:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d6f5:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d6f9:	83 f8 03             	cmp    eax,0x3
c000d6fc:	75 1e                	jne    c000d71c <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d6fe:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d703:	8b 00                	mov    eax,DWORD PTR [eax]
c000d705:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d708:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d70e:	83 ec 08             	sub    esp,0x8
c000d711:	6a 02                	push   0x2
c000d713:	50                   	push   eax
c000d714:	e8 8e 40 00 00       	call   c00117a7 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d719:	83 c4 10             	add    esp,0x10
c000d71c:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d720:	83 f8 1c             	cmp    eax,0x1c
c000d723:	75 1e                	jne    c000d743 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d725:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d72a:	8b 00                	mov    eax,DWORD PTR [eax]
c000d72c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d72f:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d735:	83 ec 08             	sub    esp,0x8
c000d738:	6a 09                	push   0x9
c000d73a:	50                   	push   eax
c000d73b:	e8 67 40 00 00       	call   c00117a7 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d740:	83 c4 10             	add    esp,0x10
c000d743:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d746:	05 02 01 00 00       	add    eax,0x102
c000d74b:	83 ec 0c             	sub    esp,0xc
c000d74e:	50                   	push   eax
c000d74f:	e8 2c 2e ff ff       	call   c0000580 <strlen>
c000d754:	83 c4 10             	add    esp,0x10
c000d757:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d75a:	81 c2 02 01 00 00    	add    edx,0x102
c000d760:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d763:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d766:	81 c2 02 01 00 00    	add    edx,0x102
c000d76c:	83 ec 04             	sub    esp,0x4
c000d76f:	50                   	push   eax
c000d770:	51                   	push   ecx
c000d771:	52                   	push   edx
c000d772:	e8 59 2c ff ff       	call   c00003d0 <memmove>
c000d777:	83 c4 10             	add    esp,0x10
c000d77a:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d77e:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d782:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d786:	83 f8 0a             	cmp    eax,0xa
c000d789:	74 16                	je     c000d7a1 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d78b:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d78f:	83 f8 03             	cmp    eax,0x3
c000d792:	74 0d                	je     c000d7a1 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d794:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d798:	83 f8 1c             	cmp    eax,0x1c
c000d79b:	0f 85 ee fe ff ff    	jne    c000d68f <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000d7a1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d7a4:	eb 03                	jmp    c000d7a9 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000d7a6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d7a9:	c9                   	leave  
c000d7aa:	c3                   	ret    
c000d7ab:	90                   	nop

c000d7ac <Keyboard::Keyboard(char const*)>:
c000d7ac:	83 ec 0c             	sub    esp,0xc
c000d7af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7b3:	83 ec 08             	sub    esp,0x8
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	50                   	push   eax
c000d7bb:	e8 44 f1 ff ff       	call   c000c904 <Device::Device(char const*)>
c000d7c0:	83 c4 10             	add    esp,0x10
c000d7c3:	ba dc 17 02 c0       	mov    edx,0xc00217dc
c000d7c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7cc:	89 10                	mov    DWORD PTR [eax],edx
c000d7ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7d2:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000d7dc:	c6 05 24 84 02 c0 01 	mov    BYTE PTR ds:0xc0028424,0x1
c000d7e3:	90                   	nop
c000d7e4:	83 c4 0c             	add    esp,0xc
c000d7e7:	c3                   	ret    

c000d7e8 <Keyboard::~Keyboard()>:
c000d7e8:	83 ec 0c             	sub    esp,0xc
c000d7eb:	ba dc 17 02 c0       	mov    edx,0xc00217dc
c000d7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7f4:	89 10                	mov    DWORD PTR [eax],edx
c000d7f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7fa:	83 ec 0c             	sub    esp,0xc
c000d7fd:	50                   	push   eax
c000d7fe:	e8 6b ee ff ff       	call   c000c66e <Device::~Device()>
c000d803:	83 c4 10             	add    esp,0x10
c000d806:	90                   	nop
c000d807:	83 c4 0c             	add    esp,0xc
c000d80a:	c3                   	ret    
c000d80b:	90                   	nop

c000d80c <Keyboard::~Keyboard()>:
c000d80c:	83 ec 0c             	sub    esp,0xc
c000d80f:	83 ec 0c             	sub    esp,0xc
c000d812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d816:	e8 cd ff ff ff       	call   c000d7e8 <Keyboard::~Keyboard()>
c000d81b:	83 c4 10             	add    esp,0x10
c000d81e:	83 ec 08             	sub    esp,0x8
c000d821:	68 5c 01 00 00       	push   0x15c
c000d826:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d82a:	e8 dd cf ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000d82f:	83 c4 10             	add    esp,0x10
c000d832:	83 c4 0c             	add    esp,0xc
c000d835:	c3                   	ret    

c000d836 <LogicalDisk::close(int, int, void*)>:
c000d836:	83 c8 ff             	or     eax,0xffffffff
c000d839:	c3                   	ret    

c000d83a <LogicalDisk::~LogicalDisk()>:
c000d83a:	83 ec 0c             	sub    esp,0xc
c000d83d:	ba 54 18 02 c0       	mov    edx,0xc0021854
c000d842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d846:	89 10                	mov    DWORD PTR [eax],edx
c000d848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d84c:	83 ec 0c             	sub    esp,0xc
c000d84f:	50                   	push   eax
c000d850:	e8 19 ee ff ff       	call   c000c66e <Device::~Device()>
c000d855:	83 c4 10             	add    esp,0x10
c000d858:	90                   	nop
c000d859:	83 c4 0c             	add    esp,0xc
c000d85c:	c3                   	ret    
c000d85d:	90                   	nop

c000d85e <LogicalDisk::~LogicalDisk()>:
c000d85e:	83 ec 0c             	sub    esp,0xc
c000d861:	83 ec 0c             	sub    esp,0xc
c000d864:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d868:	e8 cd ff ff ff       	call   c000d83a <LogicalDisk::~LogicalDisk()>
c000d86d:	83 c4 10             	add    esp,0x10
c000d870:	83 ec 08             	sub    esp,0x8
c000d873:	68 78 01 00 00       	push   0x178
c000d878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d87c:	e8 8b cf ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000d881:	83 c4 10             	add    esp,0x10
c000d884:	83 c4 0c             	add    esp,0xc
c000d887:	c3                   	ret    

c000d888 <LogicalDisk::open(int, int, void*)>:
c000d888:	83 ec 18             	sub    esp,0x18
c000d88b:	68 08 18 02 c0       	push   0xc0021808
c000d890:	e8 74 3a 00 00       	call   c0011309 <KePanic(char const*)>
c000d895:	83 c8 ff             	or     eax,0xffffffff
c000d898:	83 c4 1c             	add    esp,0x1c
c000d89b:	c3                   	ret    

c000d89c <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000d89c:	53                   	push   ebx
c000d89d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d8a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d8a5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d8a9:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000d8af:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000d8b5:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000d8bb:	77 10                	ja     c000d8cd <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000d8bd:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000d8c3:	89 d3                	mov    ebx,edx
c000d8c5:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000d8cb:	72 05                	jb     c000d8d2 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000d8cd:	83 c8 ff             	or     eax,0xffffffff
c000d8d0:	89 c2                	mov    edx,eax
c000d8d2:	5b                   	pop    ebx
c000d8d3:	c3                   	ret    

c000d8d4 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000d8d4:	56                   	push   esi
c000d8d5:	83 c8 ff             	or     eax,0xffffffff
c000d8d8:	53                   	push   ebx
c000d8d9:	89 c2                	mov    edx,eax
c000d8db:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d8df:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d8e3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d8e7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d8ed:	77 27                	ja     c000d916 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d8ef:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000d8f5:	89 d8                	mov    eax,ebx
c000d8f7:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000d8fd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d902:	89 c2                	mov    edx,eax
c000d904:	73 10                	jae    c000d916 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d906:	89 c8                	mov    eax,ecx
c000d908:	89 da                	mov    edx,ebx
c000d90a:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000d910:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000d916:	5b                   	pop    ebx
c000d917:	5e                   	pop    esi
c000d918:	c3                   	ret    
c000d919:	90                   	nop

c000d91a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d91a:	83 ec 1c             	sub    esp,0x1c
c000d91d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d921:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d925:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d929:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d92d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d931:	89 04 24             	mov    DWORD PTR [esp],eax
c000d934:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d938:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d93c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d940:	83 ec 08             	sub    esp,0x8
c000d943:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d947:	50                   	push   eax
c000d948:	e8 b7 ef ff ff       	call   c000c904 <Device::Device(char const*)>
c000d94d:	83 c4 10             	add    esp,0x10
c000d950:	ba 54 18 02 c0       	mov    edx,0xc0021854
c000d955:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d959:	89 10                	mov    DWORD PTR [eax],edx
c000d95b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d95f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d966:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d96a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000d971:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d975:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d97c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d980:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d98a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d98e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d992:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d996:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d99c:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d9a2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d9a6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d9a9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d9ad:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d9b3:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d9b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9bd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d9c1:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d9c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9cb:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d9d5:	90                   	nop
c000d9d6:	83 c4 1c             	add    esp,0x1c
c000d9d9:	c3                   	ret    

c000d9da <LogicalDisk::assignDriveLetter()>:
c000d9da:	55                   	push   ebp
c000d9db:	57                   	push   edi
c000d9dc:	56                   	push   esi
c000d9dd:	53                   	push   ebx
c000d9de:	83 ec 14             	sub    esp,0x14
c000d9e1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d9e5:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d9eb:	b0 41                	mov    al,0x41
c000d9ed:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000d9f3:	84 d2                	test   dl,dl
c000d9f5:	75 02                	jne    c000d9f9 <LogicalDisk::assignDriveLetter()+0x1f>
c000d9f7:	b0 43                	mov    al,0x43
c000d9f9:	8b 3d 60 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028860
c000d9ff:	0f b6 ca             	movzx  ecx,dl
c000da02:	0f be e8             	movsx  ebp,al
c000da05:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000da09:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000da0d:	8b 3d 64 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028864
c000da13:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000da17:	3c 43                	cmp    al,0x43
c000da19:	75 10                	jne    c000da2b <LogicalDisk::assignDriveLetter()+0x51>
c000da1b:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000da22:	75 5a                	jne    c000da7e <LogicalDisk::assignDriveLetter()+0xa4>
c000da24:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000da29:	75 53                	jne    c000da7e <LogicalDisk::assignDriveLetter()+0xa4>
c000da2b:	8d 75 bf             	lea    esi,[ebp-0x41]
c000da2e:	ba 01 00 00 00       	mov    edx,0x1
c000da33:	89 34 24             	mov    DWORD PTR [esp],esi
c000da36:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000da39:	d3 e2                	shl    edx,cl
c000da3b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000da3f:	89 d7                	mov    edi,edx
c000da41:	89 d6                	mov    esi,edx
c000da43:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000da47:	c1 ff 1f             	sar    edi,0x1f
c000da4a:	21 f9                	and    ecx,edi
c000da4c:	09 d1                	or     ecx,edx
c000da4e:	75 2e                	jne    c000da7e <LogicalDisk::assignDriveLetter()+0xa4>
c000da50:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da54:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000da58:	09 f2                	or     edx,esi
c000da5a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000da5d:	89 15 60 88 02 c0    	mov    DWORD PTR ds:0xc0028860,edx
c000da63:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000da67:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000da6d:	89 1c b5 80 88 02 c0 	mov    DWORD PTR [esi*4-0x3ffd7780],ebx
c000da74:	09 fa                	or     edx,edi
c000da76:	89 15 64 88 02 c0    	mov    DWORD PTR ds:0xc0028864,edx
c000da7c:	eb 0d                	jmp    c000da8b <LogicalDisk::assignDriveLetter()+0xb1>
c000da7e:	8d 50 01             	lea    edx,[eax+0x1]
c000da81:	45                   	inc    ebp
c000da82:	80 fa 5b             	cmp    dl,0x5b
c000da85:	88 d0                	mov    al,dl
c000da87:	75 8e                	jne    c000da17 <LogicalDisk::assignDriveLetter()+0x3d>
c000da89:	31 c0                	xor    eax,eax
c000da8b:	83 c4 14             	add    esp,0x14
c000da8e:	5b                   	pop    ebx
c000da8f:	5e                   	pop    esi
c000da90:	5f                   	pop    edi
c000da91:	5d                   	pop    ebp
c000da92:	c3                   	ret    
c000da93:	90                   	nop

c000da94 <LogicalDisk::mount()>:
c000da94:	56                   	push   esi
c000da95:	53                   	push   ebx
c000da96:	53                   	push   ebx
c000da97:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000da9b:	8b 1d 04 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026404
c000daa1:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000daab:	85 db                	test   ebx,ebx
c000daad:	74 27                	je     c000dad6 <LogicalDisk::mount()+0x42>
c000daaf:	51                   	push   ecx
c000dab0:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000dab7:	8b 13                	mov    edx,DWORD PTR [ebx]
c000dab9:	83 e8 41             	sub    eax,0x41
c000dabc:	50                   	push   eax
c000dabd:	56                   	push   esi
c000dabe:	53                   	push   ebx
c000dabf:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000dac2:	83 c4 10             	add    esp,0x10
c000dac5:	84 c0                	test   al,al
c000dac7:	74 08                	je     c000dad1 <LogicalDisk::mount()+0x3d>
c000dac9:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000dacf:	eb 07                	jmp    c000dad8 <LogicalDisk::mount()+0x44>
c000dad1:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000dad4:	eb d5                	jmp    c000daab <LogicalDisk::mount()+0x17>
c000dad6:	31 c0                	xor    eax,eax
c000dad8:	5a                   	pop    edx
c000dad9:	5b                   	pop    ebx
c000dada:	5e                   	pop    esi
c000dadb:	c3                   	ret    

c000dadc <LogicalDisk::unmount()>:
c000dadc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dae0:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000daea:	c3                   	ret    
c000daeb:	90                   	nop

c000daec <LogicalDisk::eject()>:
c000daec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000daf0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000daf6:	8b 10                	mov    edx,DWORD PTR [eax]
c000daf8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dafc:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000daff:	90                   	nop

c000db00 <LogicalDisk::unassignDriveLetter()>:
c000db00:	57                   	push   edi
c000db01:	56                   	push   esi
c000db02:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000db06:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000db0d:	85 c9                	test   ecx,ecx
c000db0f:	75 0f                	jne    c000db20 <LogicalDisk::unassignDriveLetter()+0x20>
c000db11:	c7 44 24 0c 2c 18 02 c0 	mov    DWORD PTR [esp+0xc],0xc002182c
c000db19:	5e                   	pop    esi
c000db1a:	5f                   	pop    edi
c000db1b:	e9 e9 37 00 00       	jmp    c0011309 <KePanic(char const*)>
c000db20:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000db27:	83 e9 41             	sub    ecx,0x41
c000db2a:	b8 01 00 00 00       	mov    eax,0x1
c000db2f:	c7 04 8d 80 88 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd7780],0x0
c000db3a:	d3 e0                	shl    eax,cl
c000db3c:	89 c7                	mov    edi,eax
c000db3e:	f7 d0                	not    eax
c000db40:	c1 ff 1f             	sar    edi,0x1f
c000db43:	21 05 60 88 02 c0    	and    DWORD PTR ds:0xc0028860,eax
c000db49:	89 fe                	mov    esi,edi
c000db4b:	f7 d6                	not    esi
c000db4d:	21 35 64 88 02 c0    	and    DWORD PTR ds:0xc0028864,esi
c000db53:	5e                   	pop    esi
c000db54:	5f                   	pop    edi
c000db55:	c3                   	ret    

c000db56 <LogicalDisk::read(unsigned long long, int, void*)>:
c000db56:	57                   	push   edi
c000db57:	56                   	push   esi
c000db58:	53                   	push   ebx
c000db59:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000db5d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000db61:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000db65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000db69:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000db6f:	77 41                	ja     c000dbb2 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000db71:	99                   	cdq    
c000db72:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000db78:	01 c8                	add    eax,ecx
c000db7a:	11 da                	adc    edx,ebx
c000db7c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000db82:	19 d7                	sbb    edi,edx
c000db84:	72 33                	jb     c000dbb9 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000db86:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000db8c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000db92:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000db96:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000db9a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000dba0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000dba6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbaa:	5b                   	pop    ebx
c000dbab:	5e                   	pop    esi
c000dbac:	5f                   	pop    edi
c000dbad:	e9 d4 0a 00 00       	jmp    c000e686 <VCache::read(unsigned long long, int, void*)>
c000dbb2:	b8 05 00 00 00       	mov    eax,0x5
c000dbb7:	eb 05                	jmp    c000dbbe <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000dbb9:	b8 07 00 00 00       	mov    eax,0x7
c000dbbe:	5b                   	pop    ebx
c000dbbf:	5e                   	pop    esi
c000dbc0:	5f                   	pop    edi
c000dbc1:	c3                   	ret    

c000dbc2 <LogicalDisk::write(unsigned long long, int, void*)>:
c000dbc2:	57                   	push   edi
c000dbc3:	56                   	push   esi
c000dbc4:	53                   	push   ebx
c000dbc5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000dbc9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dbcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000dbd1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dbd5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000dbdb:	77 41                	ja     c000dc1e <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000dbdd:	99                   	cdq    
c000dbde:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000dbe4:	01 c8                	add    eax,ecx
c000dbe6:	11 da                	adc    edx,ebx
c000dbe8:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000dbee:	19 d7                	sbb    edi,edx
c000dbf0:	72 33                	jb     c000dc25 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000dbf2:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000dbf8:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000dbfe:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000dc02:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dc06:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000dc0c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000dc12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dc16:	5b                   	pop    ebx
c000dc17:	5e                   	pop    esi
c000dc18:	5f                   	pop    edi
c000dc19:	e9 6e 09 00 00       	jmp    c000e58c <VCache::write(unsigned long long, int, void*)>
c000dc1e:	b8 05 00 00 00       	mov    eax,0x5
c000dc23:	eb 05                	jmp    c000dc2a <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000dc25:	b8 07 00 00 00       	mov    eax,0x7
c000dc2a:	5b                   	pop    ebx
c000dc2b:	5e                   	pop    esi
c000dc2c:	5f                   	pop    edi
c000dc2d:	c3                   	ret    
c000dc2e:	66 90                	xchg   ax,ax

c000dc30 <Mouse::Mouse(char const*)>:
c000dc30:	83 ec 0c             	sub    esp,0xc
c000dc33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc37:	83 ec 08             	sub    esp,0x8
c000dc3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc3e:	50                   	push   eax
c000dc3f:	e8 c0 ec ff ff       	call   c000c904 <Device::Device(char const*)>
c000dc44:	83 c4 10             	add    esp,0x10
c000dc47:	ba 80 18 02 c0       	mov    edx,0xc0021880
c000dc4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc50:	89 10                	mov    DWORD PTR [eax],edx
c000dc52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc56:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000dc60:	90                   	nop
c000dc61:	83 c4 0c             	add    esp,0xc
c000dc64:	c3                   	ret    
c000dc65:	90                   	nop
c000dc66:	66 90                	xchg   ax,ax

c000dc68 <Mouse::~Mouse()>:
c000dc68:	83 ec 0c             	sub    esp,0xc
c000dc6b:	ba 80 18 02 c0       	mov    edx,0xc0021880
c000dc70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc74:	89 10                	mov    DWORD PTR [eax],edx
c000dc76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc7a:	83 ec 0c             	sub    esp,0xc
c000dc7d:	50                   	push   eax
c000dc7e:	e8 eb e9 ff ff       	call   c000c66e <Device::~Device()>
c000dc83:	83 c4 10             	add    esp,0x10
c000dc86:	90                   	nop
c000dc87:	83 c4 0c             	add    esp,0xc
c000dc8a:	c3                   	ret    
c000dc8b:	90                   	nop

c000dc8c <Mouse::~Mouse()>:
c000dc8c:	83 ec 0c             	sub    esp,0xc
c000dc8f:	83 ec 0c             	sub    esp,0xc
c000dc92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc96:	e8 cd ff ff ff       	call   c000dc68 <Mouse::~Mouse()>
c000dc9b:	83 c4 10             	add    esp,0x10
c000dc9e:	83 ec 08             	sub    esp,0x8
c000dca1:	68 58 01 00 00       	push   0x158
c000dca6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcaa:	e8 5d cb ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000dcaf:	83 c4 10             	add    esp,0x10
c000dcb2:	83 c4 0c             	add    esp,0xc
c000dcb5:	c3                   	ret    

c000dcb6 <NIC::getMAC()>:
c000dcb6:	31 c0                	xor    eax,eax
c000dcb8:	31 d2                	xor    edx,edx
c000dcba:	c3                   	ret    
c000dcbb:	90                   	nop

c000dcbc <NIC::write(int, unsigned char*, int*)>:
c000dcbc:	b8 01 00 00 00       	mov    eax,0x1
c000dcc1:	c3                   	ret    

c000dcc2 <NIC::NIC(char const*)>:
c000dcc2:	83 ec 0c             	sub    esp,0xc
c000dcc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcc9:	83 ec 08             	sub    esp,0x8
c000dccc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcd0:	50                   	push   eax
c000dcd1:	e8 2e ec ff ff       	call   c000c904 <Device::Device(char const*)>
c000dcd6:	83 c4 10             	add    esp,0x10
c000dcd9:	ba ac 18 02 c0       	mov    edx,0xc00218ac
c000dcde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dce2:	89 10                	mov    DWORD PTR [eax],edx
c000dce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dce8:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000dcf2:	90                   	nop
c000dcf3:	83 c4 0c             	add    esp,0xc
c000dcf6:	c3                   	ret    
c000dcf7:	90                   	nop

c000dcf8 <NIC::~NIC()>:
c000dcf8:	83 ec 0c             	sub    esp,0xc
c000dcfb:	ba ac 18 02 c0       	mov    edx,0xc00218ac
c000dd00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd04:	89 10                	mov    DWORD PTR [eax],edx
c000dd06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd0a:	83 ec 0c             	sub    esp,0xc
c000dd0d:	50                   	push   eax
c000dd0e:	e8 5b e9 ff ff       	call   c000c66e <Device::~Device()>
c000dd13:	83 c4 10             	add    esp,0x10
c000dd16:	90                   	nop
c000dd17:	83 c4 0c             	add    esp,0xc
c000dd1a:	c3                   	ret    
c000dd1b:	90                   	nop

c000dd1c <NIC::~NIC()>:
c000dd1c:	83 ec 0c             	sub    esp,0xc
c000dd1f:	83 ec 0c             	sub    esp,0xc
c000dd22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd26:	e8 cd ff ff ff       	call   c000dcf8 <NIC::~NIC()>
c000dd2b:	83 c4 10             	add    esp,0x10
c000dd2e:	83 ec 08             	sub    esp,0x8
c000dd31:	68 58 01 00 00       	push   0x158
c000dd36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd3a:	e8 cd ca ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000dd3f:	83 c4 10             	add    esp,0x10
c000dd42:	83 c4 0c             	add    esp,0xc
c000dd45:	c3                   	ret    

c000dd46 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dd46:	55                   	push   ebp
c000dd47:	57                   	push   edi
c000dd48:	56                   	push   esi
c000dd49:	53                   	push   ebx
c000dd4a:	81 ec 28 01 00 00    	sub    esp,0x128
c000dd50:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000dd57:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000dd5e:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000dd65:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000dd6c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd70:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd74:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dd7b:	e8 80 ec ff ff       	call   c000ca00 <Device::getName()>
c000dd80:	5a                   	pop    edx
c000dd81:	59                   	pop    ecx
c000dd82:	50                   	push   eax
c000dd83:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000dd87:	55                   	push   ebp
c000dd88:	e8 c3 28 ff ff       	call   c0000650 <strcpy>
c000dd8d:	5b                   	pop    ebx
c000dd8e:	58                   	pop    eax
c000dd8f:	68 d8 18 02 c0       	push   0xc00218d8
c000dd94:	55                   	push   ebp
c000dd95:	e8 d6 2a ff ff       	call   c0000870 <strcat>
c000dd9a:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000dda1:	e8 2d 9d ff ff       	call   c0007ad3 <malloc>
c000dda6:	83 c4 0c             	add    esp,0xc
c000dda9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ddad:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ddb1:	89 c3                	mov    ebx,eax
c000ddb3:	57                   	push   edi
c000ddb4:	56                   	push   esi
c000ddb5:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000ddbc:	55                   	push   ebp
c000ddbd:	50                   	push   eax
c000ddbe:	e8 57 fb ff ff       	call   c000d91a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000ddc3:	83 c4 14             	add    esp,0x14
c000ddc6:	53                   	push   ebx
c000ddc7:	e8 0e fc ff ff       	call   c000d9da <LogicalDisk::assignDriveLetter()>
c000ddcc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ddcf:	e8 c0 fc ff ff       	call   c000da94 <LogicalDisk::mount()>
c000ddd4:	58                   	pop    eax
c000ddd5:	5a                   	pop    edx
c000ddd6:	53                   	push   ebx
c000ddd7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ddde:	e8 89 e9 ff ff       	call   c000c76c <Device::addChild(Device*)>
c000dde3:	81 c4 2c 01 00 00    	add    esp,0x12c
c000dde9:	5b                   	pop    ebx
c000ddea:	5e                   	pop    esi
c000ddeb:	5f                   	pop    edi
c000ddec:	5d                   	pop    ebp
c000dded:	c3                   	ret    

c000ddee <createPartitionsForDisk(PhysicalDisk*)>:
c000ddee:	55                   	push   ebp
c000ddef:	57                   	push   edi
c000ddf0:	56                   	push   esi
c000ddf1:	53                   	push   ebx
c000ddf2:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000ddf8:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000ddff:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000de05:	3d 00 02 00 00       	cmp    eax,0x200
c000de0a:	74 27                	je     c000de33 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000de0c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000de12:	83 ec 10             	sub    esp,0x10
c000de15:	99                   	cdq    
c000de16:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000de1c:	52                   	push   edx
c000de1d:	50                   	push   eax
c000de1e:	0f a4 f7 0a          	shld   edi,esi,0xa
c000de22:	c1 e6 0a             	shl    esi,0xa
c000de25:	89 fd                	mov    ebp,edi
c000de27:	55                   	push   ebp
c000de28:	56                   	push   esi
c000de29:	e8 92 14 01 00       	call   c001f2c0 <__udivdi3>
c000de2e:	e9 b9 00 00 00       	jmp    c000deec <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000de33:	83 ec 0c             	sub    esp,0xc
c000de36:	8b 03                	mov    eax,DWORD PTR [ebx]
c000de38:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000de3c:	56                   	push   esi
c000de3d:	6a 01                	push   0x1
c000de3f:	6a 00                	push   0x0
c000de41:	6a 00                	push   0x0
c000de43:	53                   	push   ebx
c000de44:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000de47:	83 c4 20             	add    esp,0x20
c000de4a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000de52:	75 0a                	jne    c000de5e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000de54:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000de5c:	74 2c                	je     c000de8a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000de5e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000de64:	83 ec 10             	sub    esp,0x10
c000de67:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000de6d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000de73:	89 f7                	mov    edi,esi
c000de75:	c1 ff 1f             	sar    edi,0x1f
c000de78:	57                   	push   edi
c000de79:	0f a4 c2 0a          	shld   edx,eax,0xa
c000de7d:	56                   	push   esi
c000de7e:	c1 e0 0a             	shl    eax,0xa
c000de81:	52                   	push   edx
c000de82:	50                   	push   eax
c000de83:	e8 38 14 01 00       	call   c001f2c0 <__udivdi3>
c000de88:	eb 62                	jmp    c000deec <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000de8a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000de91:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000de98:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000de9f:	89 cf                	mov    edi,ecx
c000dea1:	83 e2 7f             	and    edx,0x7f
c000dea4:	83 e7 7f             	and    edi,0x7f
c000dea7:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000deaa:	83 e0 7f             	and    eax,0x7f
c000dead:	8d 14 01             	lea    edx,[ecx+eax*1]
c000deb0:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000deb7:	83 e0 7f             	and    eax,0x7f
c000deba:	01 d0                	add    eax,edx
c000debc:	84 c0                	test   al,al
c000debe:	89 c5                	mov    ebp,eax
c000dec0:	74 41                	je     c000df03 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000dec2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000dec8:	83 ec 10             	sub    esp,0x10
c000decb:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ded1:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ded7:	89 f7                	mov    edi,esi
c000ded9:	c1 ff 1f             	sar    edi,0x1f
c000dedc:	57                   	push   edi
c000dedd:	0f a4 c2 0a          	shld   edx,eax,0xa
c000dee1:	56                   	push   esi
c000dee2:	c1 e0 0a             	shl    eax,0xa
c000dee5:	52                   	push   edx
c000dee6:	50                   	push   eax
c000dee7:	e8 d4 13 01 00       	call   c001f2c0 <__udivdi3>
c000deec:	83 c4 14             	add    esp,0x14
c000deef:	52                   	push   edx
c000def0:	50                   	push   eax
c000def1:	6a 00                	push   0x0
c000def3:	6a 00                	push   0x0
c000def5:	53                   	push   ebx
c000def6:	e8 4b fe ff ff       	call   c000dd46 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000defb:	83 c4 20             	add    esp,0x20
c000defe:	e9 73 01 00 00       	jmp    c000e076 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000df03:	89 f0                	mov    eax,esi
c000df05:	31 c9                	xor    ecx,ecx
c000df07:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000df0e:	75 02                	jne    c000df12 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000df10:	89 cd                	mov    ebp,ecx
c000df12:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000df1a:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000df21:	83 c0 10             	add    eax,0x10
c000df24:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000df2c:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000df33:	c1 e2 08             	shl    edx,0x8
c000df36:	c1 e6 10             	shl    esi,0x10
c000df39:	09 f2                	or     edx,esi
c000df3b:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000df42:	09 f2                	or     edx,esi
c000df44:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000df4b:	c1 e6 18             	shl    esi,0x18
c000df4e:	09 f2                	or     edx,esi
c000df50:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000df57:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000df5b:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000df62:	c1 e6 10             	shl    esi,0x10
c000df65:	c1 e2 08             	shl    edx,0x8
c000df68:	09 f2                	or     edx,esi
c000df6a:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000df71:	09 f2                	or     edx,esi
c000df73:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000df7a:	c1 e6 18             	shl    esi,0x18
c000df7d:	09 f2                	or     edx,esi
c000df7f:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000df83:	41                   	inc    ecx
c000df84:	83 f9 04             	cmp    ecx,0x4
c000df87:	0f 85 7a ff ff ff    	jne    c000df07 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000df8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df91:	83 f0 01             	xor    eax,0x1
c000df94:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000df98:	75 4f                	jne    c000dfe9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000df9a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df9e:	83 f0 01             	xor    eax,0x1
c000dfa1:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000dfa5:	75 42                	jne    c000dfe9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000dfa7:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000dfad:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000dfb5:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000dfbb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000dfc3:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000dfc9:	89 f7                	mov    edi,esi
c000dfcb:	c1 ff 1f             	sar    edi,0x1f
c000dfce:	57                   	push   edi
c000dfcf:	56                   	push   esi
c000dfd0:	0f a4 c2 0a          	shld   edx,eax,0xa
c000dfd4:	52                   	push   edx
c000dfd5:	c1 e0 0a             	shl    eax,0xa
c000dfd8:	50                   	push   eax
c000dfd9:	e8 e2 12 01 00       	call   c001f2c0 <__udivdi3>
c000dfde:	83 c4 10             	add    esp,0x10
c000dfe1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dfe5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dfe9:	89 e8                	mov    eax,ebp
c000dfeb:	0f b6 e8             	movzx  ebp,al
c000dfee:	85 ed                	test   ebp,ebp
c000dff0:	74 50                	je     c000e042 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000dff2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dff6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000dffa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dffe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000e002:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e006:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e00a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e00e:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e012:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e016:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e01a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e01e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e022:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000e026:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e02a:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000e02e:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e032:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e036:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e03a:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000e03e:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000e042:	31 ed                	xor    ebp,ebp
c000e044:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e048:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e04c:	89 f8                	mov    eax,edi
c000e04e:	09 f0                	or     eax,esi
c000e050:	74 1e                	je     c000e070 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e052:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e056:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e05a:	89 d1                	mov    ecx,edx
c000e05c:	09 c1                	or     ecx,eax
c000e05e:	74 10                	je     c000e070 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e060:	83 ec 0c             	sub    esp,0xc
c000e063:	57                   	push   edi
c000e064:	56                   	push   esi
c000e065:	52                   	push   edx
c000e066:	50                   	push   eax
c000e067:	53                   	push   ebx
c000e068:	e8 d9 fc ff ff       	call   c000dd46 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e06d:	83 c4 20             	add    esp,0x20
c000e070:	45                   	inc    ebp
c000e071:	83 fd 04             	cmp    ebp,0x4
c000e074:	75 ce                	jne    c000e044 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000e076:	81 c4 5c 02 00 00    	add    esp,0x25c
c000e07c:	5b                   	pop    ebx
c000e07d:	5e                   	pop    esi
c000e07e:	5f                   	pop    edi
c000e07f:	5d                   	pop    ebp
c000e080:	c3                   	ret    
c000e081:	66 90                	xchg   ax,ax
c000e083:	90                   	nop

c000e084 <Serial::Serial(char const*)>:
c000e084:	83 ec 0c             	sub    esp,0xc
c000e087:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e08b:	83 ec 08             	sub    esp,0x8
c000e08e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e092:	50                   	push   eax
c000e093:	e8 6c e8 ff ff       	call   c000c904 <Device::Device(char const*)>
c000e098:	83 c4 10             	add    esp,0x10
c000e09b:	ba ec 18 02 c0       	mov    edx,0xc00218ec
c000e0a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0a4:	89 10                	mov    DWORD PTR [eax],edx
c000e0a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0aa:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000e0b4:	90                   	nop
c000e0b5:	83 c4 0c             	add    esp,0xc
c000e0b8:	c3                   	ret    
c000e0b9:	90                   	nop
c000e0ba:	66 90                	xchg   ax,ax

c000e0bc <Serial::~Serial()>:
c000e0bc:	83 ec 0c             	sub    esp,0xc
c000e0bf:	ba ec 18 02 c0       	mov    edx,0xc00218ec
c000e0c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0c8:	89 10                	mov    DWORD PTR [eax],edx
c000e0ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0ce:	83 ec 0c             	sub    esp,0xc
c000e0d1:	50                   	push   eax
c000e0d2:	e8 97 e5 ff ff       	call   c000c66e <Device::~Device()>
c000e0d7:	83 c4 10             	add    esp,0x10
c000e0da:	90                   	nop
c000e0db:	83 c4 0c             	add    esp,0xc
c000e0de:	c3                   	ret    
c000e0df:	90                   	nop

c000e0e0 <Serial::~Serial()>:
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	83 ec 0c             	sub    esp,0xc
c000e0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0ea:	e8 cd ff ff ff       	call   c000e0bc <Serial::~Serial()>
c000e0ef:	83 c4 10             	add    esp,0x10
c000e0f2:	83 ec 08             	sub    esp,0x8
c000e0f5:	68 58 01 00 00       	push   0x158
c000e0fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0fe:	e8 09 c7 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e103:	83 c4 10             	add    esp,0x10
c000e106:	83 c4 0c             	add    esp,0xc
c000e109:	c3                   	ret    
c000e10a:	66 90                	xchg   ax,ax

c000e10c <Timer::Timer(char const*)>:
c000e10c:	83 ec 0c             	sub    esp,0xc
c000e10f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e113:	83 ec 08             	sub    esp,0x8
c000e116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e11a:	50                   	push   eax
c000e11b:	e8 e4 e7 ff ff       	call   c000c904 <Device::Device(char const*)>
c000e120:	83 c4 10             	add    esp,0x10
c000e123:	ba 30 19 02 c0       	mov    edx,0xc0021930
c000e128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e12c:	89 10                	mov    DWORD PTR [eax],edx
c000e12e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e132:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e13c:	90                   	nop
c000e13d:	83 c4 0c             	add    esp,0xc
c000e140:	c3                   	ret    
c000e141:	90                   	nop
c000e142:	66 90                	xchg   ax,ax

c000e144 <Timer::~Timer()>:
c000e144:	83 ec 0c             	sub    esp,0xc
c000e147:	ba 30 19 02 c0       	mov    edx,0xc0021930
c000e14c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e150:	89 10                	mov    DWORD PTR [eax],edx
c000e152:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e156:	83 ec 0c             	sub    esp,0xc
c000e159:	50                   	push   eax
c000e15a:	e8 0f e5 ff ff       	call   c000c66e <Device::~Device()>
c000e15f:	83 c4 10             	add    esp,0x10
c000e162:	90                   	nop
c000e163:	83 c4 0c             	add    esp,0xc
c000e166:	c3                   	ret    
c000e167:	90                   	nop

c000e168 <Timer::~Timer()>:
c000e168:	83 ec 0c             	sub    esp,0xc
c000e16b:	83 ec 0c             	sub    esp,0xc
c000e16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e172:	e8 cd ff ff ff       	call   c000e144 <Timer::~Timer()>
c000e177:	83 c4 10             	add    esp,0x10
c000e17a:	83 ec 08             	sub    esp,0x8
c000e17d:	68 5c 01 00 00       	push   0x15c
c000e182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e186:	e8 81 c6 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e18b:	83 c4 10             	add    esp,0x10
c000e18e:	83 c4 0c             	add    esp,0xc
c000e191:	c3                   	ret    

c000e192 <Timer::read()>:
c000e192:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e196:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e19c:	c3                   	ret    

c000e19d <setupTimer(int)>:
c000e19d:	53                   	push   ebx
c000e19e:	83 ec 14             	sub    esp,0x14
c000e1a1:	68 5c 01 00 00       	push   0x15c
c000e1a6:	e8 28 99 ff ff       	call   c0007ad3 <malloc>
c000e1ab:	89 04 24             	mov    DWORD PTR [esp],eax
c000e1ae:	89 c3                	mov    ebx,eax
c000e1b0:	e8 77 09 01 00       	call   c001eb2c <PIT::PIT()>
c000e1b5:	58                   	pop    eax
c000e1b6:	5a                   	pop    edx
c000e1b7:	53                   	push   ebx
c000e1b8:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000e1be:	e8 a9 e5 ff ff       	call   c000c76c <Device::addChild(Device*)>
c000e1c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e1c5:	6a 00                	push   0x0
c000e1c7:	6a 00                	push   0x0
c000e1c9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e1cd:	53                   	push   ebx
c000e1ce:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e1d1:	83 c4 28             	add    esp,0x28
c000e1d4:	89 d8                	mov    eax,ebx
c000e1d6:	5b                   	pop    ebx
c000e1d7:	c3                   	ret    

c000e1d8 <timerHandler(unsigned int)>:
c000e1d8:	56                   	push   esi
c000e1d9:	53                   	push   ebx
c000e1da:	51                   	push   ecx
c000e1db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1df:	01 05 ec 88 02 c0    	add    DWORD PTR ds:0xc00288ec,eax
c000e1e5:	80 3d bd 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebd,0x0
c000e1ec:	0f 84 4a 01 00 00    	je     c000e33c <timerHandler(unsigned int)+0x164>
c000e1f2:	fa                   	cli    
c000e1f3:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000e1f9:	83 ec 0c             	sub    esp,0xc
c000e1fc:	68 d8 96 02 c0       	push   0xc00296d8
c000e201:	ff 05 c4 96 02 c0    	inc    DWORD PTR ds:0xc00296c4
c000e207:	e8 84 16 01 00       	call   c001f890 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e20c:	83 c4 10             	add    esp,0x10
c000e20f:	84 c0                	test   al,al
c000e211:	0f 85 a1 00 00 00    	jne    c000e2b8 <timerHandler(unsigned int)+0xe0>
c000e217:	83 ec 0c             	sub    esp,0xc
c000e21a:	68 d8 96 02 c0       	push   0xc00296d8
c000e21f:	e8 88 16 01 00       	call   c001f8ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e224:	83 c4 10             	add    esp,0x10
c000e227:	89 c6                	mov    esi,eax
c000e229:	8d 76 00             	lea    esi,[esi+0x0]
c000e22c:	83 ec 0c             	sub    esp,0xc
c000e22f:	68 d8 96 02 c0       	push   0xc00296d8
c000e234:	e8 73 16 01 00       	call   c001f8ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e239:	c7 04 24 d8 96 02 c0 	mov    DWORD PTR [esp],0xc00296d8
c000e240:	89 c3                	mov    ebx,eax
c000e242:	e8 6d 16 01 00       	call   c001f8b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e247:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e24a:	83 c4 10             	add    esp,0x10
c000e24d:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c000e253:	77 23                	ja     c000e278 <timerHandler(unsigned int)+0xa0>
c000e255:	83 ec 0c             	sub    esp,0xc
c000e258:	53                   	push   ebx
c000e259:	e8 a2 7e 00 00       	call   c0016100 <unblockTask(ThreadControlBlock*)>
c000e25e:	83 c4 10             	add    esp,0x10
c000e261:	39 de                	cmp    esi,ebx
c000e263:	75 27                	jne    c000e28c <timerHandler(unsigned int)+0xb4>
c000e265:	83 ec 0c             	sub    esp,0xc
c000e268:	68 d8 96 02 c0       	push   0xc00296d8
c000e26d:	e8 3a 16 01 00       	call   c001f8ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e272:	89 c6                	mov    esi,eax
c000e274:	eb 12                	jmp    c000e288 <timerHandler(unsigned int)+0xb0>
c000e276:	66 90                	xchg   ax,ax
c000e278:	52                   	push   edx
c000e279:	52                   	push   edx
c000e27a:	53                   	push   ebx
c000e27b:	68 d8 96 02 c0       	push   0xc00296d8
c000e280:	e8 eb 16 01 00       	call   c001f970 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e285:	8d 76 00             	lea    esi,[esi+0x0]
c000e288:	83 c4 10             	add    esp,0x10
c000e28b:	90                   	nop
c000e28c:	83 ec 0c             	sub    esp,0xc
c000e28f:	68 d8 96 02 c0       	push   0xc00296d8
c000e294:	e8 f7 15 01 00       	call   c001f890 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e299:	83 c4 10             	add    esp,0x10
c000e29c:	84 c0                	test   al,al
c000e29e:	75 18                	jne    c000e2b8 <timerHandler(unsigned int)+0xe0>
c000e2a0:	83 ec 0c             	sub    esp,0xc
c000e2a3:	68 d8 96 02 c0       	push   0xc00296d8
c000e2a8:	e8 ff 15 01 00       	call   c001f8ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e2ad:	83 c4 10             	add    esp,0x10
c000e2b0:	39 f0                	cmp    eax,esi
c000e2b2:	0f 85 74 ff ff ff    	jne    c000e22c <timerHandler(unsigned int)+0x54>
c000e2b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e2bd:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e2c1:	74 41                	je     c000e304 <timerHandler(unsigned int)+0x12c>
c000e2c3:	80 3d bc 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebc,0x0
c000e2ca:	74 38                	je     c000e304 <timerHandler(unsigned int)+0x12c>
c000e2cc:	fa                   	cli    
c000e2cd:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000e2d3:	a1 ec 88 02 c0       	mov    eax,ds:0xc00288ec
c000e2d8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e2de:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e2e1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e2e7:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e2ea:	72 08                	jb     c000e2f4 <timerHandler(unsigned int)+0x11c>
c000e2ec:	e8 17 79 00 00       	call   c0015c08 <schedule()>
c000e2f1:	8d 76 00             	lea    esi,[esi+0x0]
c000e2f4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000e2f9:	48                   	dec    eax
c000e2fa:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000e2ff:	75 03                	jne    c000e304 <timerHandler(unsigned int)+0x12c>
c000e301:	fb                   	sti    
c000e302:	66 90                	xchg   ax,ax
c000e304:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000e309:	48                   	dec    eax
c000e30a:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000e30f:	75 1b                	jne    c000e32c <timerHandler(unsigned int)+0x154>
c000e311:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c000e318:	74 12                	je     c000e32c <timerHandler(unsigned int)+0x154>
c000e31a:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c000e324:	e8 df 78 00 00       	call   c0015c08 <schedule()>
c000e329:	8d 76 00             	lea    esi,[esi+0x0]
c000e32c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000e331:	48                   	dec    eax
c000e332:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000e337:	75 03                	jne    c000e33c <timerHandler(unsigned int)+0x164>
c000e339:	fb                   	sti    
c000e33a:	66 90                	xchg   ax,ax
c000e33c:	58                   	pop    eax
c000e33d:	5b                   	pop    ebx
c000e33e:	5e                   	pop    esi
c000e33f:	c3                   	ret    

c000e340 <VCache::VCache(PhysicalDisk*)>:
c000e340:	53                   	push   ebx
c000e341:	83 ec 18             	sub    esp,0x18
c000e344:	ba 60 19 02 c0       	mov    edx,0xc0021960
c000e349:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e34d:	89 10                	mov    DWORD PTR [eax],edx
c000e34f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e353:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e35a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e35e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e365:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e369:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e370:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e377:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e37b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e382:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e389:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e38d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e394:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e398:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e39c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3a0:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e3a7:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e3ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3b2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e3b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3ba:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e3be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3c2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e3c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3ca:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e3d1:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e3d9:	83 ec 0c             	sub    esp,0xc
c000e3dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e3e0:	e8 ee 96 ff ff       	call   c0007ad3 <malloc>
c000e3e5:	83 c4 10             	add    esp,0x10
c000e3e8:	89 c3                	mov    ebx,eax
c000e3ea:	83 ec 0c             	sub    esp,0xc
c000e3ed:	53                   	push   ebx
c000e3ee:	e8 b5 75 00 00       	call   c00159a8 <Mutex::Mutex()>
c000e3f3:	83 c4 10             	add    esp,0x10
c000e3f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3fa:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e3fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e401:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e405:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e408:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e40c:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e413:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e417:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e41d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e421:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e424:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e428:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e42e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e434:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e438:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e43b:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e43e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e442:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e446:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e44a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e450:	05 00 02 00 00       	add    eax,0x200
c000e455:	c1 e0 03             	shl    eax,0x3
c000e458:	83 ec 0c             	sub    esp,0xc
c000e45b:	50                   	push   eax
c000e45c:	e8 72 96 ff ff       	call   c0007ad3 <malloc>
c000e461:	83 c4 10             	add    esp,0x10
c000e464:	89 c2                	mov    edx,eax
c000e466:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e46a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e46d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e471:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e478:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e47c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e480:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e484:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e48a:	89 d0                	mov    eax,edx
c000e48c:	c1 e0 02             	shl    eax,0x2
c000e48f:	01 d0                	add    eax,edx
c000e491:	c1 e0 04             	shl    eax,0x4
c000e494:	83 ec 0c             	sub    esp,0xc
c000e497:	50                   	push   eax
c000e498:	e8 36 96 ff ff       	call   c0007ad3 <malloc>
c000e49d:	83 c4 10             	add    esp,0x10
c000e4a0:	89 c2                	mov    edx,eax
c000e4a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e4a6:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e4a9:	90                   	nop
c000e4aa:	83 c4 18             	add    esp,0x18
c000e4ad:	5b                   	pop    ebx
c000e4ae:	c3                   	ret    
c000e4af:	90                   	nop

c000e4b0 <VCache::invalidateReadBuffer()>:
c000e4b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4b4:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e4ba:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e4be:	c3                   	ret    
c000e4bf:	90                   	nop

c000e4c0 <VCache::writeWriteBuffer()>:
c000e4c0:	53                   	push   ebx
c000e4c1:	83 ec 08             	sub    esp,0x8
c000e4c4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e4c8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e4cc:	74 1e                	je     c000e4ec <VCache::writeWriteBuffer()+0x2c>
c000e4ce:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e4d1:	83 ec 0c             	sub    esp,0xc
c000e4d4:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4d6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e4d9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e4dc:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e4df:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e4e2:	50                   	push   eax
c000e4e3:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e4e6:	83 c4 20             	add    esp,0x20
c000e4e9:	8d 76 00             	lea    esi,[esi+0x0]
c000e4ec:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e4f3:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e4fa:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e4fe:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e505:	83 c4 08             	add    esp,0x8
c000e508:	5b                   	pop    ebx
c000e509:	c3                   	ret    
c000e50a:	66 90                	xchg   ax,ax

c000e50c <VCache::~VCache()>:
c000e50c:	83 ec 0c             	sub    esp,0xc
c000e50f:	ba 60 19 02 c0       	mov    edx,0xc0021960
c000e514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e518:	89 10                	mov    DWORD PTR [eax],edx
c000e51a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e51e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e521:	0f b6 c0             	movzx  eax,al
c000e524:	85 c0                	test   eax,eax
c000e526:	74 10                	je     c000e538 <VCache::~VCache()+0x2c>
c000e528:	83 ec 0c             	sub    esp,0xc
c000e52b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52f:	e8 8c ff ff ff       	call   c000e4c0 <VCache::writeWriteBuffer()>
c000e534:	83 c4 10             	add    esp,0x10
c000e537:	90                   	nop
c000e538:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e53c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	50                   	push   eax
c000e543:	e8 9b 95 ff ff       	call   c0007ae3 <free>
c000e548:	83 c4 10             	add    esp,0x10
c000e54b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e54f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e552:	83 ec 0c             	sub    esp,0xc
c000e555:	50                   	push   eax
c000e556:	e8 88 95 ff ff       	call   c0007ae3 <free>
c000e55b:	83 c4 10             	add    esp,0x10
c000e55e:	90                   	nop
c000e55f:	83 c4 0c             	add    esp,0xc
c000e562:	c3                   	ret    
c000e563:	90                   	nop

c000e564 <VCache::~VCache()>:
c000e564:	83 ec 0c             	sub    esp,0xc
c000e567:	83 ec 0c             	sub    esp,0xc
c000e56a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e56e:	e8 99 ff ff ff       	call   c000e50c <VCache::~VCache()>
c000e573:	83 c4 10             	add    esp,0x10
c000e576:	83 ec 08             	sub    esp,0x8
c000e579:	6a 44                	push   0x44
c000e57b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e57f:	e8 88 c2 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e584:	83 c4 10             	add    esp,0x10
c000e587:	83 c4 0c             	add    esp,0xc
c000e58a:	c3                   	ret    
c000e58b:	90                   	nop

c000e58c <VCache::write(unsigned long long, int, void*)>:
c000e58c:	55                   	push   ebp
c000e58d:	57                   	push   edi
c000e58e:	56                   	push   esi
c000e58f:	53                   	push   ebx
c000e590:	83 ec 1c             	sub    esp,0x1c
c000e593:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e597:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e59b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e59f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e5a3:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e5a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e5ab:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e5af:	74 0f                	je     c000e5c0 <VCache::write(unsigned long long, int, void*)+0x34>
c000e5b1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e5b5:	53                   	push   ebx
c000e5b6:	e8 f5 fe ff ff       	call   c000e4b0 <VCache::invalidateReadBuffer()>
c000e5bb:	58                   	pop    eax
c000e5bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e5c0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e5c4:	74 66                	je     c000e62c <VCache::write(unsigned long long, int, void*)+0xa0>
c000e5c6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e5c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e5cd:	99                   	cdq    
c000e5ce:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e5d1:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e5d4:	89 c6                	mov    esi,eax
c000e5d6:	31 ce                	xor    esi,ecx
c000e5d8:	89 d0                	mov    eax,edx
c000e5da:	31 e8                	xor    eax,ebp
c000e5dc:	09 c6                	or     esi,eax
c000e5de:	75 38                	jne    c000e618 <VCache::write(unsigned long long, int, void*)+0x8c>
c000e5e0:	83 ff 01             	cmp    edi,0x1
c000e5e3:	75 33                	jne    c000e618 <VCache::write(unsigned long long, int, void*)+0x8c>
c000e5e5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e5e8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e5ec:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e5f0:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e5f6:	0f af f9             	imul   edi,ecx
c000e5f9:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000e5fc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5fe:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e601:	40                   	inc    eax
c000e602:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e605:	83 f8 50             	cmp    eax,0x50
c000e608:	75 72                	jne    c000e67c <VCache::write(unsigned long long, int, void*)+0xf0>
c000e60a:	83 ec 0c             	sub    esp,0xc
c000e60d:	53                   	push   ebx
c000e60e:	e8 ad fe ff ff       	call   c000e4c0 <VCache::writeWriteBuffer()>
c000e613:	83 c4 10             	add    esp,0x10
c000e616:	eb 64                	jmp    c000e67c <VCache::write(unsigned long long, int, void*)+0xf0>
c000e618:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e61c:	83 ec 0c             	sub    esp,0xc
c000e61f:	53                   	push   ebx
c000e620:	e8 9b fe ff ff       	call   c000e4c0 <VCache::writeWriteBuffer()>
c000e625:	83 c4 10             	add    esp,0x10
c000e628:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e62c:	83 ff 4f             	cmp    edi,0x4f
c000e62f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e632:	7f 20                	jg     c000e654 <VCache::write(unsigned long long, int, void*)+0xc8>
c000e634:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e637:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e63b:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c000e63e:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e641:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e644:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e648:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e64e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e650:	eb 2a                	jmp    c000e67c <VCache::write(unsigned long long, int, void*)+0xf0>
c000e652:	66 90                	xchg   ax,ax
c000e654:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e658:	8b 10                	mov    edx,DWORD PTR [eax]
c000e65a:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e65e:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e662:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e666:	89 4c 24 34          	mov    DWORD PTR [esp+0x34],ecx
c000e66a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e66e:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e671:	83 c4 1c             	add    esp,0x1c
c000e674:	5b                   	pop    ebx
c000e675:	5e                   	pop    esi
c000e676:	5f                   	pop    edi
c000e677:	5d                   	pop    ebp
c000e678:	ff e0                	jmp    eax
c000e67a:	66 90                	xchg   ax,ax
c000e67c:	83 c4 1c             	add    esp,0x1c
c000e67f:	31 c0                	xor    eax,eax
c000e681:	5b                   	pop    ebx
c000e682:	5e                   	pop    esi
c000e683:	5f                   	pop    edi
c000e684:	5d                   	pop    ebp
c000e685:	c3                   	ret    

c000e686 <VCache::read(unsigned long long, int, void*)>:
c000e686:	55                   	push   ebp
c000e687:	57                   	push   edi
c000e688:	56                   	push   esi
c000e689:	53                   	push   ebx
c000e68a:	83 ec 1c             	sub    esp,0x1c
c000e68d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e691:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e695:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e699:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e69d:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e6a1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e6a5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e6a9:	74 0d                	je     c000e6b8 <VCache::read(unsigned long long, int, void*)+0x32>
c000e6ab:	83 ec 0c             	sub    esp,0xc
c000e6ae:	57                   	push   edi
c000e6af:	e8 0c fe ff ff       	call   c000e4c0 <VCache::writeWriteBuffer()>
c000e6b4:	83 c4 10             	add    esp,0x10
c000e6b7:	90                   	nop
c000e6b8:	83 fd 01             	cmp    ebp,0x1
c000e6bb:	0f 85 93 00 00 00    	jne    c000e754 <VCache::read(unsigned long long, int, void*)+0xce>
c000e6c1:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e6c4:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e6cb:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6ce:	0f 85 80 00 00 00    	jne    c000e754 <VCache::read(unsigned long long, int, void*)+0xce>
c000e6d4:	8b 4f 40             	mov    ecx,DWORD PTR [edi+0x40]
c000e6d7:	89 cd                	mov    ebp,ecx
c000e6d9:	f7 dd                	neg    ebp
c000e6db:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000e6df:	89 e8                	mov    eax,ebp
c000e6e1:	21 dd                	and    ebp,ebx
c000e6e3:	c1 f8 1f             	sar    eax,0x1f
c000e6e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e6ea:	89 e8                	mov    eax,ebp
c000e6ec:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000e6f0:	21 f5                	and    ebp,esi
c000e6f2:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e6f6:	89 ea                	mov    edx,ebp
c000e6f8:	74 2e                	je     c000e728 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e6fa:	39 6f 34             	cmp    DWORD PTR [edi+0x34],ebp
c000e6fd:	75 29                	jne    c000e728 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e6ff:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e702:	75 24                	jne    c000e728 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e704:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e707:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e70d:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e710:	8d 70 ff             	lea    esi,[eax-0x1]
c000e713:	21 f3                	and    ebx,esi
c000e715:	0f af d9             	imul   ebx,ecx
c000e718:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e71b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e71f:	89 de                	mov    esi,ebx
c000e721:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e723:	31 c0                	xor    eax,eax
c000e725:	eb 61                	jmp    c000e788 <VCache::read(unsigned long long, int, void*)+0x102>
c000e727:	90                   	nop
c000e728:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e72c:	83 ec 0c             	sub    esp,0xc
c000e72f:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e732:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e736:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e739:	8b 36                	mov    esi,DWORD PTR [esi]
c000e73b:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e73e:	51                   	push   ecx
c000e73f:	52                   	push   edx
c000e740:	50                   	push   eax
c000e741:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e745:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000e748:	83 c4 20             	add    esp,0x20
c000e74b:	85 c0                	test   eax,eax
c000e74d:	75 39                	jne    c000e788 <VCache::read(unsigned long long, int, void*)+0x102>
c000e74f:	eb b3                	jmp    c000e704 <VCache::read(unsigned long long, int, void*)+0x7e>
c000e751:	8d 76 00             	lea    esi,[esi+0x0]
c000e754:	83 ec 0c             	sub    esp,0xc
c000e757:	57                   	push   edi
c000e758:	e8 53 fd ff ff       	call   c000e4b0 <VCache::invalidateReadBuffer()>
c000e75d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e760:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e764:	8b 10                	mov    edx,DWORD PTR [eax]
c000e766:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e76a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e76e:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e772:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e776:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e77a:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e77d:	83 c4 2c             	add    esp,0x2c
c000e780:	5b                   	pop    ebx
c000e781:	5e                   	pop    esi
c000e782:	5f                   	pop    edi
c000e783:	5d                   	pop    ebp
c000e784:	ff e0                	jmp    eax
c000e786:	66 90                	xchg   ax,ax
c000e788:	83 c4 1c             	add    esp,0x1c
c000e78b:	5b                   	pop    ebx
c000e78c:	5e                   	pop    esi
c000e78d:	5f                   	pop    edi
c000e78e:	5d                   	pop    ebp
c000e78f:	c3                   	ret    

c000e790 <Video::putrect(int, int, int, int, unsigned int)>:
c000e790:	55                   	push   ebp
c000e791:	57                   	push   edi
c000e792:	56                   	push   esi
c000e793:	53                   	push   ebx
c000e794:	83 ec 1c             	sub    esp,0x1c
c000e797:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e79b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e79f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e7a3:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e7a7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e7ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e7af:	01 df                	add    edi,ebx
c000e7b1:	39 fb                	cmp    ebx,edi
c000e7b3:	7d 1f                	jge    c000e7d4 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000e7b5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e7b9:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e7bd:	7d 12                	jge    c000e7d1 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000e7bf:	8b 16                	mov    edx,DWORD PTR [esi]
c000e7c1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e7c5:	53                   	push   ebx
c000e7c6:	55                   	push   ebp
c000e7c7:	45                   	inc    ebp
c000e7c8:	56                   	push   esi
c000e7c9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e7cc:	83 c4 10             	add    esp,0x10
c000e7cf:	eb e8                	jmp    c000e7b9 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000e7d1:	43                   	inc    ebx
c000e7d2:	eb dd                	jmp    c000e7b1 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000e7d4:	83 c4 1c             	add    esp,0x1c
c000e7d7:	5b                   	pop    ebx
c000e7d8:	5e                   	pop    esi
c000e7d9:	5f                   	pop    edi
c000e7da:	5d                   	pop    ebp
c000e7db:	c3                   	ret    

c000e7dc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000e7dc:	55                   	push   ebp
c000e7dd:	57                   	push   edi
c000e7de:	31 ff                	xor    edi,edi
c000e7e0:	56                   	push   esi
c000e7e1:	53                   	push   ebx
c000e7e2:	83 ec 1c             	sub    esp,0x1c
c000e7e5:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000e7e9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000e7ed:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000e7f4:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000e7f9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e7fd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e801:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000e805:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000e808:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e80c:	01 f9                	add    ecx,edi
c000e80e:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000e812:	7d 2f                	jge    c000e843 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000e814:	31 f6                	xor    esi,esi
c000e816:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e81a:	01 f2                	add    edx,esi
c000e81c:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000e820:	7d 1a                	jge    c000e83c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000e822:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e825:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000e828:	46                   	inc    esi
c000e829:	51                   	push   ecx
c000e82a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000e82e:	52                   	push   edx
c000e82f:	55                   	push   ebp
c000e830:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e833:	83 c4 10             	add    esp,0x10
c000e836:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e83a:	eb da                	jmp    c000e816 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000e83c:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000e840:	47                   	inc    edi
c000e841:	eb c5                	jmp    c000e808 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000e843:	83 c4 1c             	add    esp,0x1c
c000e846:	5b                   	pop    ebx
c000e847:	5e                   	pop    esi
c000e848:	5f                   	pop    edi
c000e849:	5d                   	pop    ebp
c000e84a:	c3                   	ret    
c000e84b:	90                   	nop

c000e84c <Video::blit(unsigned int*, int, int, int, int)>:
c000e84c:	55                   	push   ebp
c000e84d:	ba 00 00 00 00       	mov    edx,0x0
c000e852:	57                   	push   edi
c000e853:	56                   	push   esi
c000e854:	53                   	push   ebx
c000e855:	83 ec 1c             	sub    esp,0x1c
c000e858:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e85c:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e860:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e864:	85 c0                	test   eax,eax
c000e866:	0f 49 d0             	cmovns edx,eax
c000e869:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000e870:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000e874:	89 eb                	mov    ebx,ebp
c000e876:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e87a:	01 ea                	add    edx,ebp
c000e87c:	39 da                	cmp    edx,ebx
c000e87e:	7e 54                	jle    c000e8d4 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000e880:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e886:	7c 4c                	jl     c000e8d4 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000e888:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000e88c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e890:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e894:	01 c1                	add    ecx,eax
c000e896:	39 f9                	cmp    ecx,edi
c000e898:	7e 2f                	jle    c000e8c9 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000e89a:	83 c2 04             	add    edx,0x4
c000e89d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e8a3:	7c 21                	jl     c000e8c6 <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000e8a5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e8a9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e8ab:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000e8ae:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e8b2:	55                   	push   ebp
c000e8b3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e8b7:	56                   	push   esi
c000e8b8:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e8bb:	83 c4 10             	add    esp,0x10
c000e8be:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e8c2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e8c6:	47                   	inc    edi
c000e8c7:	eb c7                	jmp    c000e890 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000e8c9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000e8cd:	43                   	inc    ebx
c000e8ce:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000e8d2:	eb a2                	jmp    c000e876 <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000e8d4:	83 c4 1c             	add    esp,0x1c
c000e8d7:	5b                   	pop    ebx
c000e8d8:	5e                   	pop    esi
c000e8d9:	5f                   	pop    edi
c000e8da:	5d                   	pop    ebp
c000e8db:	c3                   	ret    

c000e8dc <Video::clearScreen(unsigned int)>:
c000e8dc:	57                   	push   edi
c000e8dd:	56                   	push   esi
c000e8de:	53                   	push   ebx
c000e8df:	31 db                	xor    ebx,ebx
c000e8e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e8e5:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e8eb:	7e 1f                	jle    c000e90c <Video::clearScreen(unsigned int)+0x30>
c000e8ed:	31 ff                	xor    edi,edi
c000e8ef:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e8f5:	7e 12                	jle    c000e909 <Video::clearScreen(unsigned int)+0x2d>
c000e8f7:	8b 06                	mov    eax,DWORD PTR [esi]
c000e8f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e8fd:	53                   	push   ebx
c000e8fe:	57                   	push   edi
c000e8ff:	47                   	inc    edi
c000e900:	56                   	push   esi
c000e901:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e904:	83 c4 10             	add    esp,0x10
c000e907:	eb e6                	jmp    c000e8ef <Video::clearScreen(unsigned int)+0x13>
c000e909:	43                   	inc    ebx
c000e90a:	eb d9                	jmp    c000e8e5 <Video::clearScreen(unsigned int)+0x9>
c000e90c:	5b                   	pop    ebx
c000e90d:	5e                   	pop    esi
c000e90e:	5f                   	pop    edi
c000e90f:	c3                   	ret    

c000e910 <Video::putpixel(int, int, unsigned int)>:
c000e910:	c7 44 24 04 68 19 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021968
c000e918:	e9 ec 29 00 00       	jmp    c0011309 <KePanic(char const*)>
c000e91d:	90                   	nop

c000e91e <Video::readPixelApprox(int, int)>:
c000e91e:	83 ec 18             	sub    esp,0x18
c000e921:	68 89 19 02 c0       	push   0xc0021989
c000e926:	e8 de 29 00 00       	call   c0011309 <KePanic(char const*)>
c000e92b:	31 c0                	xor    eax,eax
c000e92d:	83 c4 1c             	add    esp,0x1c
c000e930:	c3                   	ret    
c000e931:	90                   	nop

c000e932 <Video::Video(char const*)>:
c000e932:	83 ec 0c             	sub    esp,0xc
c000e935:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e939:	83 ec 08             	sub    esp,0x8
c000e93c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e940:	50                   	push   eax
c000e941:	e8 be df ff ff       	call   c000c904 <Device::Device(char const*)>
c000e946:	83 c4 10             	add    esp,0x10
c000e949:	ba 04 1a 02 c0       	mov    edx,0xc0021a04
c000e94e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e952:	89 10                	mov    DWORD PTR [eax],edx
c000e954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e958:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000e962:	90                   	nop
c000e963:	83 c4 0c             	add    esp,0xc
c000e966:	c3                   	ret    
c000e967:	90                   	nop

c000e968 <Video::~Video()>:
c000e968:	83 ec 0c             	sub    esp,0xc
c000e96b:	ba 04 1a 02 c0       	mov    edx,0xc0021a04
c000e970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e974:	89 10                	mov    DWORD PTR [eax],edx
c000e976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e97a:	83 ec 0c             	sub    esp,0xc
c000e97d:	50                   	push   eax
c000e97e:	e8 eb dc ff ff       	call   c000c66e <Device::~Device()>
c000e983:	83 c4 10             	add    esp,0x10
c000e986:	90                   	nop
c000e987:	83 c4 0c             	add    esp,0xc
c000e98a:	c3                   	ret    
c000e98b:	90                   	nop

c000e98c <Video::~Video()>:
c000e98c:	83 ec 0c             	sub    esp,0xc
c000e98f:	83 ec 0c             	sub    esp,0xc
c000e992:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e996:	e8 cd ff ff ff       	call   c000e968 <Video::~Video()>
c000e99b:	83 c4 10             	add    esp,0x10
c000e99e:	83 ec 08             	sub    esp,0x8
c000e9a1:	68 64 01 00 00       	push   0x164
c000e9a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9aa:	e8 5d be ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e9af:	83 c4 10             	add    esp,0x10
c000e9b2:	83 c4 0c             	add    esp,0xc
c000e9b5:	c3                   	ret    

c000e9b6 <Video::isMonochrome()>:
c000e9b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e9ba:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e9c0:	c3                   	ret    
c000e9c1:	90                   	nop

c000e9c2 <Video::getWidth()>:
c000e9c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e9c6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e9cc:	c3                   	ret    
c000e9cd:	90                   	nop

c000e9ce <Video::getHeight()>:
c000e9ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e9d2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e9d8:	c3                   	ret    
c000e9d9:	90                   	nop

c000e9da <Video::drawCursor(int, int, unsigned int*, int)>:
c000e9da:	55                   	push   ebp
c000e9db:	57                   	push   edi
c000e9dc:	56                   	push   esi
c000e9dd:	53                   	push   ebx
c000e9de:	83 ec 2c             	sub    esp,0x2c
c000e9e1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e9e5:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e9e9:	83 f8 01             	cmp    eax,0x1
c000e9ec:	19 c9                	sbb    ecx,ecx
c000e9ee:	31 db                	xor    ebx,ebx
c000e9f0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e9f4:	89 ce                	mov    esi,ecx
c000e9f6:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e9fe:	f7 d6                	not    esi
c000ea00:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000ea06:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ea0a:	01 d8                	add    eax,ebx
c000ea0c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ea10:	57                   	push   edi
c000ea11:	e8 b8 ff ff ff       	call   c000e9ce <Video::getHeight()>
c000ea16:	59                   	pop    ecx
c000ea17:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ea1b:	7e 70                	jle    c000ea8d <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000ea1d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ea21:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000ea25:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000ea28:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ea2c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ea30:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000ea37:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ea3b:	89 e8                	mov    eax,ebp
c000ea3d:	83 c0 20             	add    eax,0x20
c000ea40:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ea44:	57                   	push   edi
c000ea45:	e8 78 ff ff ff       	call   c000e9c2 <Video::getWidth()>
c000ea4a:	5a                   	pop    edx
c000ea4b:	39 c5                	cmp    ebp,eax
c000ea4d:	7d 34                	jge    c000ea83 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000ea4f:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000ea54:	74 05                	je     c000ea5b <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000ea56:	8b 07                	mov    eax,DWORD PTR [edi]
c000ea58:	56                   	push   esi
c000ea59:	eb 0d                	jmp    c000ea68 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000ea5b:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000ea60:	74 12                	je     c000ea74 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000ea62:	8b 07                	mov    eax,DWORD PTR [edi]
c000ea64:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ea68:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ea6c:	55                   	push   ebp
c000ea6d:	57                   	push   edi
c000ea6e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ea71:	83 c4 10             	add    esp,0x10
c000ea74:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000ea78:	45                   	inc    ebp
c000ea79:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000ea7d:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000ea81:	75 c1                	jne    c000ea44 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000ea83:	43                   	inc    ebx
c000ea84:	83 fb 20             	cmp    ebx,0x20
c000ea87:	0f 85 79 ff ff ff    	jne    c000ea06 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000ea8d:	83 c4 2c             	add    esp,0x2c
c000ea90:	5b                   	pop    ebx
c000ea91:	5e                   	pop    esi
c000ea92:	5f                   	pop    edi
c000ea93:	5d                   	pop    ebp
c000ea94:	c3                   	ret    
c000ea95:	90                   	nop

c000ea96 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000ea96:	55                   	push   ebp
c000ea97:	57                   	push   edi
c000ea98:	56                   	push   esi
c000ea99:	53                   	push   ebx
c000ea9a:	83 ec 28             	sub    esp,0x28
c000ea9d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000eaa1:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c000eaa5:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000eaa9:	0f b6 73 0f          	movzx  esi,BYTE PTR [ebx+0xf]
c000eaad:	c1 e7 08             	shl    edi,0x8
c000eab0:	01 c7                	add    edi,eax
c000eab2:	0f b6 43 0e          	movzx  eax,BYTE PTR [ebx+0xe]
c000eab6:	c1 e6 08             	shl    esi,0x8
c000eab9:	01 f0                	add    eax,esi
c000eabb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000eabf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eac3:	0f af c7             	imul   eax,edi
c000eac6:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000eacd:	50                   	push   eax
c000eace:	e8 00 90 ff ff       	call   c0007ad3 <malloc>
c000ead3:	83 c4 10             	add    esp,0x10
c000ead6:	85 c0                	test   eax,eax
c000ead8:	89 c5                	mov    ebp,eax
c000eada:	75 10                	jne    c000eaec <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000eadc:	83 ec 0c             	sub    esp,0xc
c000eadf:	68 b4 19 02 c0       	push   0xc00219b4
c000eae4:	e8 20 28 00 00       	call   c0011309 <KePanic(char const*)>
c000eae9:	83 c4 10             	add    esp,0x10
c000eaec:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000eaf0:	ba 12 00 00 00       	mov    edx,0x12
c000eaf5:	85 c0                	test   eax,eax
c000eaf7:	74 11                	je     c000eb0a <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000eaf9:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000eafd:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000eb01:	c1 fa 03             	sar    edx,0x3
c000eb04:	0f af d1             	imul   edx,ecx
c000eb07:	83 c2 12             	add    edx,0x12
c000eb0a:	85 ff                	test   edi,edi
c000eb0c:	74 06                	je     c000eb14 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000eb0e:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000eb12:	75 12                	jne    c000eb26 <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000eb14:	83 ec 0c             	sub    esp,0xc
c000eb17:	68 c4 19 02 c0       	push   0xc00219c4
c000eb1c:	e8 e9 bd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000eb21:	e9 b8 00 00 00       	jmp    c000ebde <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000eb26:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000eb2a:	83 f9 02             	cmp    ecx,0x2
c000eb2d:	0f 85 96 00 00 00    	jne    c000ebc9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000eb33:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000eb38:	75 0e                	jne    c000eb48 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000eb3a:	85 c0                	test   eax,eax
c000eb3c:	75 0a                	jne    c000eb48 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000eb3e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000eb41:	83 e8 18             	sub    eax,0x18
c000eb44:	a8 f7                	test   al,0xf7
c000eb46:	74 0a                	je     c000eb52 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000eb48:	83 ec 0c             	sub    esp,0xc
c000eb4b:	68 d9 19 02 c0       	push   0xc00219d9
c000eb50:	eb 7f                	jmp    c000ebd1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000eb52:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000eb5a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000eb62:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000eb66:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000eb6a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000eb72:	75 0c                	jne    c000eb80 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000eb74:	0f b6 4c 13 03       	movzx  ecx,BYTE PTR [ebx+edx*1+0x3]
c000eb79:	c1 e1 18             	shl    ecx,0x18
c000eb7c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000eb80:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000eb85:	46                   	inc    esi
c000eb86:	89 c8                	mov    eax,ecx
c000eb88:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000eb8d:	c1 e0 10             	shl    eax,0x10
c000eb90:	c1 e1 08             	shl    ecx,0x8
c000eb93:	09 c1                	or     ecx,eax
c000eb95:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000eb99:	09 c1                	or     ecx,eax
c000eb9b:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000eb9f:	89 4c b5 fc          	mov    DWORD PTR [ebp+esi*4-0x4],ecx
c000eba3:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000eba7:	c1 f8 03             	sar    eax,0x3
c000ebaa:	01 c2                	add    edx,eax
c000ebac:	89 f0                	mov    eax,esi
c000ebae:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000ebb2:	39 c7                	cmp    edi,eax
c000ebb4:	7f b0                	jg     c000eb66 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000ebb6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ebba:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ebbe:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000ebc1:	7e 22                	jle    c000ebe5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000ebc3:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000ebc7:	eb 99                	jmp    c000eb62 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000ebc9:	50                   	push   eax
c000ebca:	50                   	push   eax
c000ebcb:	51                   	push   ecx
c000ebcc:	68 e7 19 02 c0       	push   0xc00219e7
c000ebd1:	e8 34 bd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ebd6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ebd9:	e8 05 8f ff ff       	call   c0007ae3 <free>
c000ebde:	83 c4 10             	add    esp,0x10
c000ebe1:	31 ed                	xor    ebp,ebp
c000ebe3:	eb 0f                	jmp    c000ebf4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000ebe5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ebe9:	89 38                	mov    DWORD PTR [eax],edi
c000ebeb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ebef:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000ebf2:	89 38                	mov    DWORD PTR [eax],edi
c000ebf4:	83 c4 1c             	add    esp,0x1c
c000ebf7:	89 e8                	mov    eax,ebp
c000ebf9:	5b                   	pop    ebx
c000ebfa:	5e                   	pop    esi
c000ebfb:	5f                   	pop    edi
c000ebfc:	5d                   	pop    ebp
c000ebfd:	c3                   	ret    

c000ebfe <Video::putTGA(int, int, unsigned char*, int)>:
c000ebfe:	55                   	push   ebp
c000ebff:	57                   	push   edi
c000ec00:	56                   	push   esi
c000ec01:	53                   	push   ebx
c000ec02:	83 ec 28             	sub    esp,0x28
c000ec05:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ec09:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ec0d:	50                   	push   eax
c000ec0e:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ec12:	50                   	push   eax
c000ec13:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ec17:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ec1b:	57                   	push   edi
c000ec1c:	e8 75 fe ff ff       	call   c000ea96 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000ec21:	83 c4 20             	add    esp,0x20
c000ec24:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ec28:	85 c0                	test   eax,eax
c000ec2a:	74 35                	je     c000ec61 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ec2c:	89 c6                	mov    esi,eax
c000ec2e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ec32:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ec36:	39 d8                	cmp    eax,ebx
c000ec38:	7e 27                	jle    c000ec61 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ec3a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ec3e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000ec42:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000ec46:	39 e9                	cmp    ecx,ebp
c000ec48:	7e 14                	jle    c000ec5e <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000ec4a:	83 c6 04             	add    esi,0x4
c000ec4d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000ec4f:	ff 76 fc             	push   DWORD PTR [esi-0x4]
c000ec52:	53                   	push   ebx
c000ec53:	55                   	push   ebp
c000ec54:	45                   	inc    ebp
c000ec55:	57                   	push   edi
c000ec56:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000ec59:	83 c4 10             	add    esp,0x10
c000ec5c:	eb e0                	jmp    c000ec3e <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000ec5e:	43                   	inc    ebx
c000ec5f:	eb cd                	jmp    c000ec2e <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000ec61:	83 c4 1c             	add    esp,0x1c
c000ec64:	5b                   	pop    ebx
c000ec65:	5e                   	pop    esi
c000ec66:	5f                   	pop    edi
c000ec67:	5d                   	pop    ebp
c000ec68:	c3                   	ret    
c000ec69:	66 90                	xchg   ax,ax
c000ec6b:	90                   	nop

c000ec6c <ACPI::close(int, int, void*)>:
c000ec6c:	83 ec 1c             	sub    esp,0x1c
c000ec6f:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000ec77:	74 0b                	je     c000ec84 <ACPI::close(int, int, void*)+0x18>
c000ec79:	b8 00 00 00 00       	mov    eax,0x0
c000ec7e:	e9 99 00 00 00       	jmp    c000ed1c <ACPI::close(int, int, void*)+0xb0>
c000ec83:	90                   	nop
c000ec84:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000ec89:	75 29                	jne    c000ecb4 <ACPI::close(int, int, void*)+0x48>
c000ec8b:	a1 08 89 02 c0       	mov    eax,ds:0xc0028908
c000ec90:	85 c0                	test   eax,eax
c000ec92:	74 08                	je     c000ec9c <ACPI::close(int, int, void*)+0x30>
c000ec94:	a1 08 89 02 c0       	mov    eax,ds:0xc0028908
c000ec99:	ff d0                	call   eax
c000ec9b:	90                   	nop
c000ec9c:	83 ec 0c             	sub    esp,0xc
c000ec9f:	68 48 1a 02 c0       	push   0xc0021a48
c000eca4:	e8 60 26 00 00       	call   c0011309 <KePanic(char const*)>
c000eca9:	83 c4 10             	add    esp,0x10
c000ecac:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ecb1:	eb 69                	jmp    c000ed1c <ACPI::close(int, int, void*)+0xb0>
c000ecb3:	90                   	nop
c000ecb4:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000ecb9:	75 59                	jne    c000ed14 <ACPI::close(int, int, void*)+0xa8>
c000ecbb:	a1 04 89 02 c0       	mov    eax,ds:0xc0028904
c000ecc0:	85 c0                	test   eax,eax
c000ecc2:	74 08                	je     c000eccc <ACPI::close(int, int, void*)+0x60>
c000ecc4:	a1 04 89 02 c0       	mov    eax,ds:0xc0028904
c000ecc9:	ff d0                	call   eax
c000eccb:	90                   	nop
c000eccc:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000ecd1:	8d 76 00             	lea    esi,[esi+0x0]
c000ecd4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ecd9:	83 e0 02             	and    eax,0x2
c000ecdc:	74 1e                	je     c000ecfc <ACPI::close(int, int, void*)+0x90>
c000ecde:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000ece5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ece9:	89 c2                	mov    edx,eax
c000eceb:	ec                   	in     al,dx
c000ecec:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ecf0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000ecf4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ecf8:	eb da                	jmp    c000ecd4 <ACPI::close(int, int, void*)+0x68>
c000ecfa:	66 90                	xchg   ax,ax
c000ecfc:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000ed03:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000ed08:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000ed0c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ed10:	ee                   	out    dx,al
c000ed11:	8d 76 00             	lea    esi,[esi+0x0]
c000ed14:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ed19:	8d 76 00             	lea    esi,[esi+0x0]
c000ed1c:	83 c4 1c             	add    esp,0x1c
c000ed1f:	c3                   	ret    

c000ed20 <findRSDP()>:
c000ed20:	83 ec 1c             	sub    esp,0x1c
c000ed23:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ed28:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ed2e:	83 e0 04             	and    eax,0x4
c000ed31:	0f b6 c0             	movzx  eax,al
c000ed34:	85 c0                	test   eax,eax
c000ed36:	75 08                	jne    c000ed40 <findRSDP()+0x20>
c000ed38:	b8 00 00 00 00       	mov    eax,0x0
c000ed3d:	eb 75                	jmp    c000edb4 <findRSDP()+0x94>
c000ed3f:	90                   	nop
c000ed40:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c000ed45:	3d ff 07 00 00       	cmp    eax,0x7ff
c000ed4a:	7f 1c                	jg     c000ed68 <findRSDP()+0x48>
c000ed4c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ed51:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000ed57:	83 e2 fb             	and    edx,0xfffffffb
c000ed5a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000ed60:	b8 00 00 00 00       	mov    eax,0x0
c000ed65:	eb 4d                	jmp    c000edb4 <findRSDP()+0x94>
c000ed67:	90                   	nop
c000ed68:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000ed70:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000ed78:	77 32                	ja     c000edac <findRSDP()+0x8c>
c000ed7a:	83 ec 04             	sub    esp,0x4
c000ed7d:	6a 08                	push   0x8
c000ed7f:	68 e3 1a 02 c0       	push   0xc0021ae3
c000ed84:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ed88:	e8 f3 15 ff ff       	call   c0000380 <memcmp>
c000ed8d:	83 c4 10             	add    esp,0x10
c000ed90:	85 c0                	test   eax,eax
c000ed92:	0f 94 c0             	sete   al
c000ed95:	0f b6 c0             	movzx  eax,al
c000ed98:	85 c0                	test   eax,eax
c000ed9a:	74 08                	je     c000eda4 <findRSDP()+0x84>
c000ed9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eda0:	eb 12                	jmp    c000edb4 <findRSDP()+0x94>
c000eda2:	66 90                	xchg   ax,ax
c000eda4:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000eda9:	eb c5                	jmp    c000ed70 <findRSDP()+0x50>
c000edab:	90                   	nop
c000edac:	b8 00 00 00 00       	mov    eax,0x0
c000edb1:	8d 76 00             	lea    esi,[esi+0x0]
c000edb4:	83 c4 1c             	add    esp,0x1c
c000edb7:	c3                   	ret    

c000edb8 <loadACPITables(unsigned char*)>:
c000edb8:	57                   	push   edi
c000edb9:	56                   	push   esi
c000edba:	53                   	push   ebx
c000edbb:	83 ec 60             	sub    esp,0x60
c000edbe:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000edc3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000edc9:	83 e0 04             	and    eax,0x4
c000edcc:	0f b6 c0             	movzx  eax,al
c000edcf:	85 c0                	test   eax,eax
c000edd1:	0f 84 41 02 00 00    	je     c000f018 <loadACPITables(unsigned char*)+0x260>
c000edd7:	a0 20 8b 02 c0       	mov    al,ds:0xc0028b20
c000eddc:	0f b6 c0             	movzx  eax,al
c000eddf:	85 c0                	test   eax,eax
c000ede1:	74 79                	je     c000ee5c <loadACPITables(unsigned char*)+0xa4>
c000ede3:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ede7:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000edeb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000edef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000edf2:	83 e8 24             	sub    eax,0x24
c000edf5:	c1 e8 03             	shr    eax,0x3
c000edf8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000edfc:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000ee04:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ee08:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000ee0c:	0f 8d ba 00 00 00    	jge    c000eecc <loadACPITables(unsigned char*)+0x114>
c000ee12:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ee16:	83 c0 24             	add    eax,0x24
c000ee19:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ee1d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ee21:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ee25:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ee29:	c1 e0 03             	shl    eax,0x3
c000ee2c:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000ee30:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ee34:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ee37:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee39:	89 c1                	mov    ecx,eax
c000ee3b:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000ee40:	8d 50 01             	lea    edx,[eax+0x1]
c000ee43:	89 15 0c 89 02 c0    	mov    DWORD PTR ds:0xc002890c,edx
c000ee49:	89 ca                	mov    edx,ecx
c000ee4b:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000ee52:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000ee57:	eb ab                	jmp    c000ee04 <loadACPITables(unsigned char*)+0x4c>
c000ee59:	8d 76 00             	lea    esi,[esi+0x0]
c000ee5c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ee60:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ee64:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ee68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ee6b:	83 e8 24             	sub    eax,0x24
c000ee6e:	c1 e8 02             	shr    eax,0x2
c000ee71:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ee75:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000ee7d:	8d 76 00             	lea    esi,[esi+0x0]
c000ee80:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ee84:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000ee88:	7d 42                	jge    c000eecc <loadACPITables(unsigned char*)+0x114>
c000ee8a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ee8e:	83 c0 24             	add    eax,0x24
c000ee91:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ee95:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ee99:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ee9d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000eea1:	c1 e0 02             	shl    eax,0x2
c000eea4:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000eea8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eeac:	8b 08                	mov    ecx,DWORD PTR [eax]
c000eeae:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000eeb3:	8d 50 01             	lea    edx,[eax+0x1]
c000eeb6:	89 15 0c 89 02 c0    	mov    DWORD PTR ds:0xc002890c,edx
c000eebc:	89 ca                	mov    edx,ecx
c000eebe:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000eec5:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000eeca:	eb b4                	jmp    c000ee80 <loadACPITables(unsigned char*)+0xc8>
c000eecc:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000eed4:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000eed9:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000eedd:	0f 8d 39 01 00 00    	jge    c000f01c <loadACPITables(unsigned char*)+0x264>
c000eee3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000eee7:	8b 04 c5 24 89 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd76dc]
c000eeee:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000eef2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eef6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000eefa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eefe:	25 ff 0f 00 00       	and    eax,0xfff
c000ef03:	89 c6                	mov    esi,eax
c000ef05:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ef0b:	83 ec 0c             	sub    esp,0xc
c000ef0e:	6a 01                	push   0x1
c000ef10:	e8 e0 a6 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000ef15:	83 c4 10             	add    esp,0x10
c000ef18:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ef1c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ef22:	83 ec 0c             	sub    esp,0xc
c000ef25:	6a 01                	push   0x1
c000ef27:	6a 01                	push   0x1
c000ef29:	50                   	push   eax
c000ef2a:	52                   	push   edx
c000ef2b:	53                   	push   ebx
c000ef2c:	e8 d7 af ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef31:	83 c4 20             	add    esp,0x20
c000ef34:	09 f0                	or     eax,esi
c000ef36:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ef3a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ef3e:	c1 e0 03             	shl    eax,0x3
c000ef41:	05 20 89 02 c0       	add    eax,0xc0028920
c000ef46:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ef4a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef4e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ef52:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000ef5a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ef5e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ef62:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef66:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef6a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ef6e:	89 c6                	mov    esi,eax
c000ef70:	89 d7                	mov    edi,edx
c000ef72:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ef74:	89 c8                	mov    eax,ecx
c000ef76:	89 fa                	mov    edx,edi
c000ef78:	89 f3                	mov    ebx,esi
c000ef7a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ef7e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ef82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ef86:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ef8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ef91:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ef95:	05 00 10 00 00       	add    eax,0x1000
c000ef9a:	c1 e8 0c             	shr    eax,0xc
c000ef9d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000efa1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000efa5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000efa9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000efad:	25 ff 0f 00 00       	and    eax,0xfff
c000efb2:	89 c6                	mov    esi,eax
c000efb4:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000efba:	83 ec 0c             	sub    esp,0xc
c000efbd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000efc1:	e8 2f a6 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000efc6:	83 c4 10             	add    esp,0x10
c000efc9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000efcd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000efd3:	83 ec 0c             	sub    esp,0xc
c000efd6:	6a 01                	push   0x1
c000efd8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000efdc:	50                   	push   eax
c000efdd:	52                   	push   edx
c000efde:	53                   	push   ebx
c000efdf:	e8 24 af ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000efe4:	83 c4 20             	add    esp,0x20
c000efe7:	09 f0                	or     eax,esi
c000efe9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000efed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eff1:	83 ec 0c             	sub    esp,0xc
c000eff4:	50                   	push   eax
c000eff5:	e8 0f a9 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000effa:	83 c4 10             	add    esp,0x10
c000effd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f001:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f005:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000f00c:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000f011:	e9 be fe ff ff       	jmp    c000eed4 <loadACPITables(unsigned char*)+0x11c>
c000f016:	66 90                	xchg   ax,ax
c000f018:	90                   	nop
c000f019:	8d 76 00             	lea    esi,[esi+0x0]
c000f01c:	83 c4 60             	add    esp,0x60
c000f01f:	5b                   	pop    ebx
c000f020:	5e                   	pop    esi
c000f021:	5f                   	pop    edi
c000f022:	c3                   	ret    
c000f023:	90                   	nop

c000f024 <findRSDT(unsigned char*)>:
c000f024:	57                   	push   edi
c000f025:	56                   	push   esi
c000f026:	53                   	push   ebx
c000f027:	83 ec 50             	sub    esp,0x50
c000f02a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f02f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f035:	83 e0 04             	and    eax,0x4
c000f038:	0f b6 c0             	movzx  eax,al
c000f03b:	85 c0                	test   eax,eax
c000f03d:	75 0d                	jne    c000f04c <findRSDT(unsigned char*)+0x28>
c000f03f:	b8 00 00 00 00       	mov    eax,0x0
c000f044:	e9 2b 01 00 00       	jmp    c000f174 <findRSDT(unsigned char*)+0x150>
c000f049:	8d 76 00             	lea    esi,[esi+0x0]
c000f04c:	89 e0                	mov    eax,esp
c000f04e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f052:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f056:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f05a:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000f062:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f066:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f06a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f06e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f072:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000f076:	89 c6                	mov    esi,eax
c000f078:	89 d7                	mov    edi,edx
c000f07a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f07c:	89 c8                	mov    eax,ecx
c000f07e:	89 fa                	mov    edx,edi
c000f080:	89 f3                	mov    ebx,esi
c000f082:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000f086:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f08a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f08e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f092:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000f096:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f09e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f0a2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f0a6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f0aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0ae:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f0b2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f0b6:	25 ff 0f 00 00       	and    eax,0xfff
c000f0bb:	89 c6                	mov    esi,eax
c000f0bd:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000f0c3:	83 ec 0c             	sub    esp,0xc
c000f0c6:	6a 02                	push   0x2
c000f0c8:	e8 28 a5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f0cd:	83 c4 10             	add    esp,0x10
c000f0d0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f0d4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f0da:	83 ec 0c             	sub    esp,0xc
c000f0dd:	6a 01                	push   0x1
c000f0df:	6a 02                	push   0x2
c000f0e1:	50                   	push   eax
c000f0e2:	52                   	push   edx
c000f0e3:	53                   	push   ebx
c000f0e4:	e8 1f ae ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f0e9:	83 c4 20             	add    esp,0x20
c000f0ec:	09 f0                	or     eax,esi
c000f0ee:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f0f2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f0f6:	25 ff 0f 00 00       	and    eax,0xfff
c000f0fb:	89 c6                	mov    esi,eax
c000f0fd:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000f103:	83 ec 0c             	sub    esp,0xc
c000f106:	6a 02                	push   0x2
c000f108:	e8 e8 a4 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f10d:	83 c4 10             	add    esp,0x10
c000f110:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f114:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f11a:	83 ec 0c             	sub    esp,0xc
c000f11d:	6a 01                	push   0x1
c000f11f:	6a 02                	push   0x2
c000f121:	50                   	push   eax
c000f122:	52                   	push   edx
c000f123:	53                   	push   ebx
c000f124:	e8 df ad ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f129:	83 c4 20             	add    esp,0x20
c000f12c:	09 f0                	or     eax,esi
c000f12e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f132:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f137:	85 c0                	test   eax,eax
c000f139:	75 11                	jne    c000f14c <findRSDT(unsigned char*)+0x128>
c000f13b:	c6 05 20 8b 02 c0 00 	mov    BYTE PTR ds:0xc0028b20,0x0
c000f142:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f146:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f14a:	eb 24                	jmp    c000f170 <findRSDT(unsigned char*)+0x14c>
c000f14c:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f151:	83 f8 02             	cmp    eax,0x2
c000f154:	75 12                	jne    c000f168 <findRSDT(unsigned char*)+0x144>
c000f156:	c6 05 20 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b20,0x1
c000f15d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f161:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f165:	eb 09                	jmp    c000f170 <findRSDT(unsigned char*)+0x14c>
c000f167:	90                   	nop
c000f168:	b8 00 00 00 00       	mov    eax,0x0
c000f16d:	eb 05                	jmp    c000f174 <findRSDT(unsigned char*)+0x150>
c000f16f:	90                   	nop
c000f170:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f174:	83 c4 50             	add    esp,0x50
c000f177:	5b                   	pop    ebx
c000f178:	5e                   	pop    esi
c000f179:	5f                   	pop    edi
c000f17a:	c3                   	ret    
c000f17b:	90                   	nop

c000f17c <findDataTable(unsigned char*, char*)>:
c000f17c:	83 ec 1c             	sub    esp,0x1c
c000f17f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f184:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f18a:	83 e0 04             	and    eax,0x4
c000f18d:	0f b6 c0             	movzx  eax,al
c000f190:	85 c0                	test   eax,eax
c000f192:	75 08                	jne    c000f19c <findDataTable(unsigned char*, char*)+0x20>
c000f194:	b8 00 00 00 00       	mov    eax,0x0
c000f199:	eb 5d                	jmp    c000f1f8 <findDataTable(unsigned char*, char*)+0x7c>
c000f19b:	90                   	nop
c000f19c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f1a4:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000f1a9:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f1ad:	7d 41                	jge    c000f1f0 <findDataTable(unsigned char*, char*)+0x74>
c000f1af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f1b3:	c1 e0 03             	shl    eax,0x3
c000f1b6:	05 20 89 02 c0       	add    eax,0xc0028920
c000f1bb:	83 ec 04             	sub    esp,0x4
c000f1be:	6a 04                	push   0x4
c000f1c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f1c4:	50                   	push   eax
c000f1c5:	e8 b6 11 ff ff       	call   c0000380 <memcmp>
c000f1ca:	83 c4 10             	add    esp,0x10
c000f1cd:	85 c0                	test   eax,eax
c000f1cf:	0f 94 c0             	sete   al
c000f1d2:	0f b6 c0             	movzx  eax,al
c000f1d5:	85 c0                	test   eax,eax
c000f1d7:	74 0f                	je     c000f1e8 <findDataTable(unsigned char*, char*)+0x6c>
c000f1d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f1dd:	8b 04 c5 24 89 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd76dc]
c000f1e4:	eb 12                	jmp    c000f1f8 <findDataTable(unsigned char*, char*)+0x7c>
c000f1e6:	66 90                	xchg   ax,ax
c000f1e8:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f1ed:	eb b5                	jmp    c000f1a4 <findDataTable(unsigned char*, char*)+0x28>
c000f1ef:	90                   	nop
c000f1f0:	b8 00 00 00 00       	mov    eax,0x0
c000f1f5:	8d 76 00             	lea    esi,[esi+0x0]
c000f1f8:	83 c4 1c             	add    esp,0x1c
c000f1fb:	c3                   	ret    

c000f1fc <scanMADT()>:
c000f1fc:	53                   	push   ebx
c000f1fd:	83 ec 38             	sub    esp,0x38
c000f200:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c000f205:	25 00 04 00 00       	and    eax,0x400
c000f20a:	74 14                	je     c000f220 <scanMADT()+0x24>
c000f20c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f211:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f217:	83 e2 fb             	and    edx,0xfffffffb
c000f21a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f220:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f225:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f22b:	83 e0 04             	and    eax,0x4
c000f22e:	0f b6 c0             	movzx  eax,al
c000f231:	85 c0                	test   eax,eax
c000f233:	0f 84 6b 04 00 00    	je     c000f6a4 <scanMADT()+0x4a8>
c000f239:	e8 e2 fa ff ff       	call   c000ed20 <findRSDP()>
c000f23e:	a3 2c 8b 02 c0       	mov    ds:0xc0028b2c,eax
c000f243:	a1 2c 8b 02 c0       	mov    eax,ds:0xc0028b2c
c000f248:	85 c0                	test   eax,eax
c000f24a:	75 1c                	jne    c000f268 <scanMADT()+0x6c>
c000f24c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f251:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f257:	83 e2 fb             	and    edx,0xfffffffb
c000f25a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f260:	e9 47 04 00 00       	jmp    c000f6ac <scanMADT()+0x4b0>
c000f265:	8d 76 00             	lea    esi,[esi+0x0]
c000f268:	a1 2c 8b 02 c0       	mov    eax,ds:0xc0028b2c
c000f26d:	83 ec 0c             	sub    esp,0xc
c000f270:	50                   	push   eax
c000f271:	e8 ae fd ff ff       	call   c000f024 <findRSDT(unsigned char*)>
c000f276:	83 c4 10             	add    esp,0x10
c000f279:	a3 28 8b 02 c0       	mov    ds:0xc0028b28,eax
c000f27e:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f283:	85 c0                	test   eax,eax
c000f285:	75 19                	jne    c000f2a0 <scanMADT()+0xa4>
c000f287:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f28c:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f292:	83 e2 fb             	and    edx,0xfffffffb
c000f295:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f29b:	e9 0c 04 00 00       	jmp    c000f6ac <scanMADT()+0x4b0>
c000f2a0:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f2a5:	83 ec 0c             	sub    esp,0xc
c000f2a8:	50                   	push   eax
c000f2a9:	e8 0a fb ff ff       	call   c000edb8 <loadACPITables(unsigned char*)>
c000f2ae:	83 c4 10             	add    esp,0x10
c000f2b1:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f2b6:	83 ec 08             	sub    esp,0x8
c000f2b9:	68 ec 1a 02 c0       	push   0xc0021aec
c000f2be:	50                   	push   eax
c000f2bf:	e8 b8 fe ff ff       	call   c000f17c <findDataTable(unsigned char*, char*)>
c000f2c4:	83 c4 10             	add    esp,0x10
c000f2c7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f2cb:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f2d0:	75 1a                	jne    c000f2ec <scanMADT()+0xf0>
c000f2d2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f2d7:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f2dd:	83 e2 fe             	and    edx,0xfffffffe
c000f2e0:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f2e6:	e9 c1 03 00 00       	jmp    c000f6ac <scanMADT()+0x4b0>
c000f2eb:	90                   	nop
c000f2ec:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f2f4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f2fb:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f2ff:	0f 87 a7 03 00 00    	ja     c000f6ac <scanMADT()+0x4b0>
c000f305:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f30d:	0f 87 99 03 00 00    	ja     c000f6ac <scanMADT()+0x4b0>
c000f313:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f317:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f31b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f31f:	8d 50 01             	lea    edx,[eax+0x1]
c000f322:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f326:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f32a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f32e:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f332:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f336:	8d 50 01             	lea    edx,[eax+0x1]
c000f339:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f33d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f341:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f345:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f349:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f34e:	83 f8 02             	cmp    eax,0x2
c000f351:	0f 86 51 03 00 00    	jbe    c000f6a8 <scanMADT()+0x4ac>
c000f357:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f35c:	85 c0                	test   eax,eax
c000f35e:	75 58                	jne    c000f3b8 <scanMADT()+0x1bc>
c000f360:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f364:	8d 50 01             	lea    edx,[eax+0x1]
c000f367:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f36b:	8a 15 20 8d 02 c0    	mov    dl,BYTE PTR ds:0xc0028d20
c000f371:	0f b6 d2             	movzx  edx,dl
c000f374:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f378:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f37c:	88 82 60 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd72a0],al
c000f382:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f386:	8d 50 01             	lea    edx,[eax+0x1]
c000f389:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f38d:	8a 15 20 8d 02 c0    	mov    dl,BYTE PTR ds:0xc0028d20
c000f393:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f396:	88 0d 20 8d 02 c0    	mov    BYTE PTR ds:0xc0028d20,cl
c000f39c:	0f b6 d2             	movzx  edx,dl
c000f39f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f3a3:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f3a7:	88 82 40 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd72c0],al
c000f3ad:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f3b2:	e9 d9 02 00 00       	jmp    c000f690 <scanMADT()+0x494>
c000f3b7:	90                   	nop
c000f3b8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f3bd:	83 f8 01             	cmp    eax,0x1
c000f3c0:	0f 85 1a 01 00 00    	jne    c000f4e0 <scanMADT()+0x2e4>
c000f3c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3ca:	8d 50 01             	lea    edx,[eax+0x1]
c000f3cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f3d1:	8a 15 e0 8b 02 c0    	mov    dl,BYTE PTR ds:0xc0028be0
c000f3d7:	0f b6 d2             	movzx  edx,dl
c000f3da:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f3de:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f3e2:	88 82 00 8c 02 c0    	mov    BYTE PTR [edx-0x3ffd7400],al
c000f3e8:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f3ed:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f3f1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3f5:	01 d0                	add    eax,edx
c000f3f7:	83 c0 2c             	add    eax,0x2c
c000f3fa:	8a 00                	mov    al,BYTE PTR [eax]
c000f3fc:	0f b6 d0             	movzx  edx,al
c000f3ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f403:	8d 48 01             	lea    ecx,[eax+0x1]
c000f406:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f40a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f40e:	0f b6 c0             	movzx  eax,al
c000f411:	c1 e0 08             	shl    eax,0x8
c000f414:	89 d1                	mov    ecx,edx
c000f416:	09 c1                	or     ecx,eax
c000f418:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f41c:	8d 50 02             	lea    edx,[eax+0x2]
c000f41f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f423:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f427:	0f b6 c0             	movzx  eax,al
c000f42a:	c1 e0 10             	shl    eax,0x10
c000f42d:	09 c1                	or     ecx,eax
c000f42f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f433:	8d 50 03             	lea    edx,[eax+0x3]
c000f436:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f43a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f43e:	0f b6 c0             	movzx  eax,al
c000f441:	c1 e0 18             	shl    eax,0x18
c000f444:	09 c1                	or     ecx,eax
c000f446:	89 ca                	mov    edx,ecx
c000f448:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f44d:	0f b6 c0             	movzx  eax,al
c000f450:	89 14 85 20 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd73e0],edx
c000f457:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f45c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f460:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f464:	01 d0                	add    eax,edx
c000f466:	83 c0 2c             	add    eax,0x2c
c000f469:	8a 00                	mov    al,BYTE PTR [eax]
c000f46b:	0f b6 d0             	movzx  edx,al
c000f46e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f472:	8d 48 01             	lea    ecx,[eax+0x1]
c000f475:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f479:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f47d:	0f b6 c0             	movzx  eax,al
c000f480:	c1 e0 08             	shl    eax,0x8
c000f483:	89 d1                	mov    ecx,edx
c000f485:	09 c1                	or     ecx,eax
c000f487:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f48b:	8d 50 02             	lea    edx,[eax+0x2]
c000f48e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f492:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f496:	0f b6 c0             	movzx  eax,al
c000f499:	c1 e0 10             	shl    eax,0x10
c000f49c:	09 c1                	or     ecx,eax
c000f49e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4a2:	8d 50 03             	lea    edx,[eax+0x3]
c000f4a5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f4a9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f4ad:	0f b6 c0             	movzx  eax,al
c000f4b0:	c1 e0 18             	shl    eax,0x18
c000f4b3:	09 c1                	or     ecx,eax
c000f4b5:	89 ca                	mov    edx,ecx
c000f4b7:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f4bc:	0f b6 c0             	movzx  eax,al
c000f4bf:	89 14 85 a0 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7360],edx
c000f4c6:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f4cb:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f4d0:	83 c0 01             	add    eax,0x1
c000f4d3:	a2 e0 8b 02 c0       	mov    ds:0xc0028be0,al
c000f4d8:	e9 b3 01 00 00       	jmp    c000f690 <scanMADT()+0x494>
c000f4dd:	8d 76 00             	lea    esi,[esi+0x0]
c000f4e0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f4e5:	83 f8 02             	cmp    eax,0x2
c000f4e8:	0f 85 ea 00 00 00    	jne    c000f5d8 <scanMADT()+0x3dc>
c000f4ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4f2:	8d 50 01             	lea    edx,[eax+0x1]
c000f4f5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f4f9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4fd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f501:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f505:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f509:	8d 50 01             	lea    edx,[eax+0x1]
c000f50c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f510:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f514:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f518:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f51c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f520:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f524:	01 d0                	add    eax,edx
c000f526:	83 c0 2c             	add    eax,0x2c
c000f529:	8a 00                	mov    al,BYTE PTR [eax]
c000f52b:	0f b6 d0             	movzx  edx,al
c000f52e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f532:	8d 48 01             	lea    ecx,[eax+0x1]
c000f535:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f539:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f53d:	0f b6 c0             	movzx  eax,al
c000f540:	c1 e0 08             	shl    eax,0x8
c000f543:	89 d1                	mov    ecx,edx
c000f545:	09 c1                	or     ecx,eax
c000f547:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f54b:	8d 50 02             	lea    edx,[eax+0x2]
c000f54e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f552:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f556:	0f b6 c0             	movzx  eax,al
c000f559:	c1 e0 10             	shl    eax,0x10
c000f55c:	09 c1                	or     ecx,eax
c000f55e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f562:	8d 50 03             	lea    edx,[eax+0x3]
c000f565:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f569:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f56d:	0f b6 c0             	movzx  eax,al
c000f570:	c1 e0 18             	shl    eax,0x18
c000f573:	09 c8                	or     eax,ecx
c000f575:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f579:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f57e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f582:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f586:	01 d0                	add    eax,edx
c000f588:	83 c0 2c             	add    eax,0x2c
c000f58b:	8a 00                	mov    al,BYTE PTR [eax]
c000f58d:	0f b6 d0             	movzx  edx,al
c000f590:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f594:	8d 48 01             	lea    ecx,[eax+0x1]
c000f597:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f59b:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f59f:	0f b6 c0             	movzx  eax,al
c000f5a2:	c1 e0 08             	shl    eax,0x8
c000f5a5:	09 d0                	or     eax,edx
c000f5a7:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f5ac:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f5b1:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f5b6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f5ba:	88 90 e8 31 02 c0    	mov    BYTE PTR [eax-0x3ffdce18],dl
c000f5c0:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f5c5:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000f5ca:	66 89 94 00 c0 8b 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd7440],dx
c000f5d2:	e9 b9 00 00 00       	jmp    c000f690 <scanMADT()+0x494>
c000f5d7:	90                   	nop
c000f5d8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f5dd:	83 f8 04             	cmp    eax,0x4
c000f5e0:	0f 85 9a 00 00 00    	jne    c000f680 <scanMADT()+0x484>
c000f5e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5ea:	8d 50 01             	lea    edx,[eax+0x1]
c000f5ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5f1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f5f5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f5f9:	0f b6 c0             	movzx  eax,al
c000f5fc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f600:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f604:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f608:	01 d0                	add    eax,edx
c000f60a:	83 c0 2c             	add    eax,0x2c
c000f60d:	8a 00                	mov    al,BYTE PTR [eax]
c000f60f:	0f b6 d0             	movzx  edx,al
c000f612:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f616:	8d 48 01             	lea    ecx,[eax+0x1]
c000f619:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f61d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f621:	0f b6 c0             	movzx  eax,al
c000f624:	c1 e0 08             	shl    eax,0x8
c000f627:	09 d0                	or     eax,edx
c000f629:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f62d:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f632:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f636:	8d 50 01             	lea    edx,[eax+0x1]
c000f639:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f63d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f641:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f645:	0f b6 c0             	movzx  eax,al
c000f648:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f64c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f650:	c1 e0 08             	shl    eax,0x8
c000f653:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f657:	89 c1                	mov    ecx,eax
c000f659:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f65d:	c1 e0 18             	shl    eax,0x18
c000f660:	89 c3                	mov    ebx,eax
c000f662:	a1 30 8b 02 c0       	mov    eax,ds:0xc0028b30
c000f667:	8d 50 01             	lea    edx,[eax+0x1]
c000f66a:	89 15 30 8b 02 c0    	mov    DWORD PTR ds:0xc0028b30,edx
c000f670:	09 d9                	or     ecx,ebx
c000f672:	89 ca                	mov    edx,ecx
c000f674:	89 14 85 40 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd74c0],edx
c000f67b:	eb 13                	jmp    c000f690 <scanMADT()+0x494>
c000f67d:	8d 76 00             	lea    esi,[esi+0x0]
c000f680:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f685:	83 f8 05             	cmp    eax,0x5
c000f688:	75 06                	jne    c000f690 <scanMADT()+0x494>
c000f68a:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f68f:	90                   	nop
c000f690:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f695:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f699:	01 d0                	add    eax,edx
c000f69b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f69f:	e9 50 fc ff ff       	jmp    c000f2f4 <scanMADT()+0xf8>
c000f6a4:	90                   	nop
c000f6a5:	eb 05                	jmp    c000f6ac <scanMADT()+0x4b0>
c000f6a7:	90                   	nop
c000f6a8:	90                   	nop
c000f6a9:	8d 76 00             	lea    esi,[esi+0x0]
c000f6ac:	83 c4 38             	add    esp,0x38
c000f6af:	5b                   	pop    ebx
c000f6b0:	c3                   	ret    
c000f6b1:	90                   	nop
c000f6b2:	66 90                	xchg   ax,ax

c000f6b4 <ACPI::ACPI()>:
c000f6b4:	83 ec 0c             	sub    esp,0xc
c000f6b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6bb:	83 ec 08             	sub    esp,0x8
c000f6be:	68 f1 1a 02 c0       	push   0xc0021af1
c000f6c3:	50                   	push   eax
c000f6c4:	e8 3b d2 ff ff       	call   c000c904 <Device::Device(char const*)>
c000f6c9:	83 c4 10             	add    esp,0x10
c000f6cc:	ba 44 1c 02 c0       	mov    edx,0xc0021c44
c000f6d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6d5:	89 10                	mov    DWORD PTR [eax],edx
c000f6d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6db:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f6e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6e6:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f6f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6f4:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f6fe:	e8 f9 fa ff ff       	call   c000f1fc <scanMADT()>
c000f703:	90                   	nop
c000f704:	83 c4 0c             	add    esp,0xc
c000f707:	c3                   	ret    

c000f708 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f708:	83 ec 2c             	sub    esp,0x2c
c000f70b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f70f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f713:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000f717:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000f71b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f720:	88 c8                	mov    al,cl
c000f722:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f726:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f72b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f733:	90                   	nop
c000f734:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f738:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f73e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f742:	0f 8d b0 00 00 00    	jge    c000f7f8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f748:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f74c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f750:	83 c2 2a             	add    edx,0x2a
c000f753:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f757:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000f75c:	0f b7 c0             	movzx  eax,ax
c000f75f:	39 c2                	cmp    edx,eax
c000f761:	0f 85 85 00 00 00    	jne    c000f7ec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f767:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f76b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f76f:	83 c2 2a             	add    edx,0x2a
c000f772:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000f776:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000f77b:	0f b6 c0             	movzx  eax,al
c000f77e:	39 c2                	cmp    edx,eax
c000f780:	75 6a                	jne    c000f7ec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f782:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f787:	85 c0                	test   eax,eax
c000f789:	74 3d                	je     c000f7c8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000f78b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f78f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f793:	83 c2 2a             	add    edx,0x2a
c000f796:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000f79a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f79e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f7a1:	39 c2                	cmp    edx,eax
c000f7a3:	74 13                	je     c000f7b8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000f7a5:	83 ec 0c             	sub    esp,0xc
c000f7a8:	68 6c 1a 02 c0       	push   0xc0021a6c
c000f7ad:	e8 57 1b 00 00       	call   c0011309 <KePanic(char const*)>
c000f7b2:	83 c4 10             	add    esp,0x10
c000f7b5:	8d 76 00             	lea    esi,[esi+0x0]
c000f7b8:	83 ec 0c             	sub    esp,0xc
c000f7bb:	68 f6 1a 02 c0       	push   0xc0021af6
c000f7c0:	e8 44 1b 00 00       	call   c0011309 <KePanic(char const*)>
c000f7c5:	83 c4 10             	add    esp,0x10
c000f7c8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f7cc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f7d0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f7d4:	83 c2 2a             	add    edx,0x2a
c000f7d7:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000f7db:	8b 02                	mov    eax,DWORD PTR [edx]
c000f7dd:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f7e0:	89 01                	mov    DWORD PTR [ecx],eax
c000f7e2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f7e5:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f7ea:	66 90                	xchg   ax,ax
c000f7ec:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000f7f1:	e9 3e ff ff ff       	jmp    c000f734 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000f7f6:	66 90                	xchg   ax,ax
c000f7f8:	90                   	nop
c000f7f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f7fd:	83 c4 2c             	add    esp,0x2c
c000f800:	c2 04 00             	ret    0x4
c000f803:	90                   	nop

c000f804 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000f804:	83 ec 1c             	sub    esp,0x1c
c000f807:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f80b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000f80f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f813:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f818:	88 c8                	mov    al,cl
c000f81a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000f81e:	88 d0                	mov    al,dl
c000f820:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f824:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f828:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f82e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f832:	83 c2 2a             	add    edx,0x2a
c000f835:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000f839:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000f83d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f841:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f847:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f84b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f84e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f852:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000f857:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f85b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f861:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000f865:	83 c0 01             	add    eax,0x1
c000f868:	88 c1                	mov    cl,al
c000f86a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f86e:	83 c2 2a             	add    edx,0x2a
c000f871:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000f875:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f879:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f87f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f883:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f886:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f88a:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000f88e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f892:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f898:	8d 50 01             	lea    edx,[eax+0x1]
c000f89b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f89f:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000f8a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f8a9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f8af:	3d 00 02 00 00       	cmp    eax,0x200
c000f8b4:	75 12                	jne    c000f8c8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000f8b6:	83 ec 0c             	sub    esp,0xc
c000f8b9:	68 05 1b 02 c0       	push   0xc0021b05
c000f8be:	e8 46 1a 00 00       	call   c0011309 <KePanic(char const*)>
c000f8c3:	83 c4 10             	add    esp,0x10
c000f8c6:	66 90                	xchg   ax,ax
c000f8c8:	90                   	nop
c000f8c9:	83 c4 1c             	add    esp,0x1c
c000f8cc:	c3                   	ret    
c000f8cd:	90                   	nop
c000f8ce:	66 90                	xchg   ax,ax

c000f8d0 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000f8d0:	b8 00 00 00 00       	mov    eax,0x0
c000f8d5:	c3                   	ret    
c000f8d6:	66 90                	xchg   ax,ax

c000f8d8 <ACPI::detectPCI()>:
c000f8d8:	53                   	push   ebx
c000f8d9:	83 ec 28             	sub    esp,0x28
c000f8dc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f8e1:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000f8e6:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f8eb:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f8f1:	83 e0 04             	and    eax,0x4
c000f8f4:	0f b6 c0             	movzx  eax,al
c000f8f7:	85 c0                	test   eax,eax
c000f8f9:	74 2d                	je     c000f928 <ACPI::detectPCI()+0x50>
c000f8fb:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f900:	83 ec 08             	sub    esp,0x8
c000f903:	68 22 1b 02 c0       	push   0xc0021b22
c000f908:	50                   	push   eax
c000f909:	e8 6e f8 ff ff       	call   c000f17c <findDataTable(unsigned char*, char*)>
c000f90e:	83 c4 10             	add    esp,0x10
c000f911:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f915:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f91a:	74 0c                	je     c000f928 <ACPI::detectPCI()+0x50>
c000f91c:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f921:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f926:	66 90                	xchg   ax,ax
c000f928:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000f930:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f934:	8a 00                	mov    al,BYTE PTR [eax]
c000f936:	0f b6 c0             	movzx  eax,al
c000f939:	83 f8 01             	cmp    eax,0x1
c000f93c:	75 0e                	jne    c000f94c <ACPI::detectPCI()+0x74>
c000f93e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f943:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f948:	eb 2e                	jmp    c000f978 <ACPI::detectPCI()+0xa0>
c000f94a:	66 90                	xchg   ax,ax
c000f94c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f950:	8a 00                	mov    al,BYTE PTR [eax]
c000f952:	0f b6 c0             	movzx  eax,al
c000f955:	83 f8 02             	cmp    eax,0x2
c000f958:	75 1e                	jne    c000f978 <ACPI::detectPCI()+0xa0>
c000f95a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f95f:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f964:	85 c0                	test   eax,eax
c000f966:	74 10                	je     c000f978 <ACPI::detectPCI()+0xa0>
c000f968:	83 ec 0c             	sub    esp,0xc
c000f96b:	68 9c 1a 02 c0       	push   0xc0021a9c
c000f970:	e8 94 19 00 00       	call   c0011309 <KePanic(char const*)>
c000f975:	83 c4 10             	add    esp,0x10
c000f978:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000f97c:	83 f0 01             	xor    eax,0x1
c000f97f:	0f b6 c0             	movzx  eax,al
c000f982:	85 c0                	test   eax,eax
c000f984:	74 46                	je     c000f9cc <ACPI::detectPCI()+0xf4>
c000f986:	e8 a5 07 ff ff       	call   c0000130 <manualPCIProbe>
c000f98b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f98f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f994:	75 0e                	jne    c000f9a4 <ACPI::detectPCI()+0xcc>
c000f996:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f99b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f9a0:	eb 2a                	jmp    c000f9cc <ACPI::detectPCI()+0xf4>
c000f9a2:	66 90                	xchg   ax,ax
c000f9a4:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000f9a9:	75 21                	jne    c000f9cc <ACPI::detectPCI()+0xf4>
c000f9ab:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f9b0:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f9b5:	85 c0                	test   eax,eax
c000f9b7:	74 13                	je     c000f9cc <ACPI::detectPCI()+0xf4>
c000f9b9:	83 ec 0c             	sub    esp,0xc
c000f9bc:	68 9c 1a 02 c0       	push   0xc0021a9c
c000f9c1:	e8 43 19 00 00       	call   c0011309 <KePanic(char const*)>
c000f9c6:	83 c4 10             	add    esp,0x10
c000f9c9:	8d 76 00             	lea    esi,[esi+0x0]
c000f9cc:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f9d1:	85 c0                	test   eax,eax
c000f9d3:	0f 84 87 00 00 00    	je     c000fa60 <ACPI::detectPCI()+0x188>
c000f9d9:	83 ec 0c             	sub    esp,0xc
c000f9dc:	68 27 1b 02 c0       	push   0xc0021b27
c000f9e1:	e8 4f 12 00 00       	call   c0010c35 <KeSetBootMessage(char const*)>
c000f9e6:	83 c4 10             	add    esp,0x10
c000f9e9:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f9f1:	83 ec 0c             	sub    esp,0xc
c000f9f4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f9f8:	e8 d6 80 ff ff       	call   c0007ad3 <malloc>
c000f9fd:	83 c4 10             	add    esp,0x10
c000fa00:	89 c3                	mov    ebx,eax
c000fa02:	83 ec 0c             	sub    esp,0xc
c000fa05:	53                   	push   ebx
c000fa06:	e8 eb b2 00 00       	call   c001acf6 <PCI::PCI()>
c000fa0b:	83 c4 10             	add    esp,0x10
c000fa0e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000fa12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fa16:	83 ec 08             	sub    esp,0x8
c000fa19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fa1d:	50                   	push   eax
c000fa1e:	e8 49 cd ff ff       	call   c000c76c <Device::addChild(Device*)>
c000fa23:	83 c4 10             	add    esp,0x10
c000fa26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa2a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa2c:	83 c0 08             	add    eax,0x8
c000fa2f:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa31:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000fa36:	85 d2                	test   edx,edx
c000fa38:	74 0a                	je     c000fa44 <ACPI::detectPCI()+0x16c>
c000fa3a:	ba 01 00 00 00       	mov    edx,0x1
c000fa3f:	eb 0b                	jmp    c000fa4c <ACPI::detectPCI()+0x174>
c000fa41:	8d 76 00             	lea    esi,[esi+0x0]
c000fa44:	ba 02 00 00 00       	mov    edx,0x2
c000fa49:	8d 76 00             	lea    esi,[esi+0x0]
c000fa4c:	6a 00                	push   0x0
c000fa4e:	6a 00                	push   0x0
c000fa50:	52                   	push   edx
c000fa51:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fa55:	ff d0                	call   eax
c000fa57:	83 c4 10             	add    esp,0x10
c000fa5a:	e9 91 00 00 00       	jmp    c000faf0 <ACPI::detectPCI()+0x218>
c000fa5f:	90                   	nop
c000fa60:	83 ec 0c             	sub    esp,0xc
c000fa63:	68 3f 1b 02 c0       	push   0xc0021b3f
c000fa68:	e8 c8 11 00 00       	call   c0010c35 <KeSetBootMessage(char const*)>
c000fa6d:	83 c4 10             	add    esp,0x10
c000fa70:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000fa77:	83 ec 0c             	sub    esp,0xc
c000fa7a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fa7e:	e8 50 80 ff ff       	call   c0007ad3 <malloc>
c000fa83:	83 c4 10             	add    esp,0x10
c000fa86:	89 c3                	mov    ebx,eax
c000fa88:	83 ec 0c             	sub    esp,0xc
c000fa8b:	53                   	push   ebx
c000fa8c:	e8 0d be 00 00       	call   c001b89e <IDE::IDE()>
c000fa91:	83 c4 10             	add    esp,0x10
c000fa94:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fa98:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fa9c:	83 ec 08             	sub    esp,0x8
c000fa9f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000faa3:	50                   	push   eax
c000faa4:	e8 c3 cc ff ff       	call   c000c76c <Device::addChild(Device*)>
c000faa9:	83 c4 10             	add    esp,0x10
c000faac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fab0:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000faba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fabe:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000fac7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000facb:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000fad4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fad8:	8b 00                	mov    eax,DWORD PTR [eax]
c000fada:	83 c0 08             	add    eax,0x8
c000fadd:	8b 00                	mov    eax,DWORD PTR [eax]
c000fadf:	6a 00                	push   0x0
c000fae1:	6a 00                	push   0x0
c000fae3:	6a 00                	push   0x0
c000fae5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fae9:	ff d0                	call   eax
c000faeb:	83 c4 10             	add    esp,0x10
c000faee:	66 90                	xchg   ax,ax
c000faf0:	90                   	nop
c000faf1:	83 c4 28             	add    esp,0x28
c000faf4:	5b                   	pop    ebx
c000faf5:	c3                   	ret    
c000faf6:	66 90                	xchg   ax,ax

c000faf8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000faf8:	83 ec 1c             	sub    esp,0x1c
c000fafb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000faff:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fb02:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fb06:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fb0b:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fb10:	83 ec 08             	sub    esp,0x8
c000fb13:	52                   	push   edx
c000fb14:	50                   	push   eax
c000fb15:	e8 80 76 ff ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c000fb1a:	83 c4 10             	add    esp,0x10
c000fb1d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000fb21:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fb26:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fb2b:	83 ec 04             	sub    esp,0x4
c000fb2e:	6a 01                	push   0x1
c000fb30:	52                   	push   edx
c000fb31:	50                   	push   eax
c000fb32:	e8 7b 77 ff ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c000fb37:	83 c4 10             	add    esp,0x10
c000fb3a:	90                   	nop
c000fb3b:	83 c4 1c             	add    esp,0x1c
c000fb3e:	c3                   	ret    
c000fb3f:	90                   	nop

c000fb40 <ACPI::sleep()>:
c000fb40:	83 ec 0c             	sub    esp,0xc
c000fb43:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c000fb48:	85 c0                	test   eax,eax
c000fb4a:	74 08                	je     c000fb54 <ACPI::sleep()+0x14>
c000fb4c:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c000fb51:	ff d0                	call   eax
c000fb53:	90                   	nop
c000fb54:	90                   	nop
c000fb55:	83 c4 0c             	add    esp,0xc
c000fb58:	c3                   	ret    
c000fb59:	90                   	nop
c000fb5a:	66 90                	xchg   ax,ax

c000fb5c <ACPI::open(int, int, void*)>:
c000fb5c:	55                   	push   ebp
c000fb5d:	89 e5                	mov    ebp,esp
c000fb5f:	53                   	push   ebx
c000fb60:	81 ec 74 01 00 00    	sub    esp,0x174
c000fb66:	83 ec 0c             	sub    esp,0xc
c000fb69:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fb6c:	e8 67 fd ff ff       	call   c000f8d8 <ACPI::detectPCI()>
c000fb71:	83 c4 10             	add    esp,0x10
c000fb74:	83 ec 0c             	sub    esp,0xc
c000fb77:	68 c4 1a 02 c0       	push   0xc0021ac4
c000fb7c:	e8 b4 10 00 00       	call   c0010c35 <KeSetBootMessage(char const*)>
c000fb81:	83 c4 10             	add    esp,0x10
c000fb84:	b8 4c 05 00 00       	mov    eax,0x54c
c000fb89:	8a 00                	mov    al,BYTE PTR [eax]
c000fb8b:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000fb8e:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fb92:	83 f8 01             	cmp    eax,0x1
c000fb95:	75 15                	jne    c000fbac <ACPI::open(int, int, void*)+0x50>
c000fb97:	83 ec 0c             	sub    esp,0xc
c000fb9a:	68 f1 13 02 c0       	push   0xc00213f1
c000fb9f:	e8 76 4b 00 00       	call   c001471a <Thr::loadKernelSymbolTable(char const*)>
c000fba4:	83 c4 10             	add    esp,0x10
c000fba7:	eb 33                	jmp    c000fbdc <ACPI::open(int, int, void*)+0x80>
c000fba9:	8d 76 00             	lea    esi,[esi+0x0]
c000fbac:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fbb0:	3d bb 00 00 00       	cmp    eax,0xbb
c000fbb5:	75 15                	jne    c000fbcc <ACPI::open(int, int, void*)+0x70>
c000fbb7:	83 ec 0c             	sub    esp,0xc
c000fbba:	68 54 1b 02 c0       	push   0xc0021b54
c000fbbf:	e8 56 4b 00 00       	call   c001471a <Thr::loadKernelSymbolTable(char const*)>
c000fbc4:	83 c4 10             	add    esp,0x10
c000fbc7:	eb 13                	jmp    c000fbdc <ACPI::open(int, int, void*)+0x80>
c000fbc9:	8d 76 00             	lea    esi,[esi+0x0]
c000fbcc:	83 ec 0c             	sub    esp,0xc
c000fbcf:	68 72 1b 02 c0       	push   0xc0021b72
c000fbd4:	e8 30 17 00 00       	call   c0011309 <KePanic(char const*)>
c000fbd9:	83 c4 10             	add    esp,0x10
c000fbdc:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000fbe0:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000fbe7:	83 ec 0c             	sub    esp,0xc
c000fbea:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000fbed:	e8 e1 7e ff ff       	call   c0007ad3 <malloc>
c000fbf2:	83 c4 10             	add    esp,0x10
c000fbf5:	89 c3                	mov    ebx,eax
c000fbf7:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fbfc:	83 ec 04             	sub    esp,0x4
c000fbff:	50                   	push   eax
c000fc00:	68 8c 1b 02 c0       	push   0xc0021b8c
c000fc05:	53                   	push   ebx
c000fc06:	e8 39 bc ff ff       	call   c000b844 <File::File(char const*, Process*)>
c000fc0b:	83 c4 10             	add    esp,0x10
c000fc0e:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000fc11:	83 ec 08             	sub    esp,0x8
c000fc14:	6a 01                	push   0x1
c000fc16:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fc19:	e8 ee bc ff ff       	call   c000b90c <File::open(FileOpenMode)>
c000fc1e:	83 c4 10             	add    esp,0x10
c000fc21:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000fc24:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000fc28:	75 12                	jne    c000fc3c <ACPI::open(int, int, void*)+0xe0>
c000fc2a:	83 ec 0c             	sub    esp,0xc
c000fc2d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fc30:	e8 35 bd ff ff       	call   c000b96a <File::close()>
c000fc35:	83 c4 10             	add    esp,0x10
c000fc38:	eb 06                	jmp    c000fc40 <ACPI::open(int, int, void*)+0xe4>
c000fc3a:	66 90                	xchg   ax,ax
c000fc3c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fc40:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000fc44:	74 16                	je     c000fc5c <ACPI::open(int, int, void*)+0x100>
c000fc46:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fc49:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc4b:	83 c0 08             	add    eax,0x8
c000fc4e:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc50:	83 ec 0c             	sub    esp,0xc
c000fc53:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fc56:	ff d0                	call   eax
c000fc58:	83 c4 10             	add    esp,0x10
c000fc5b:	90                   	nop
c000fc5c:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000fc5f:	83 f0 01             	xor    eax,0x1
c000fc62:	0f b6 c0             	movzx  eax,al
c000fc65:	85 c0                	test   eax,eax
c000fc67:	74 3b                	je     c000fca4 <ACPI::open(int, int, void*)+0x148>
c000fc69:	83 ec 0c             	sub    esp,0xc
c000fc6c:	68 aa 1b 02 c0       	push   0xc0021baa
c000fc71:	e8 bf 0f 00 00       	call   c0010c35 <KeSetBootMessage(char const*)>
c000fc76:	83 c4 10             	add    esp,0x10
c000fc79:	83 ec 04             	sub    esp,0x4
c000fc7c:	6a 0c                	push   0xc
c000fc7e:	68 c5 1b 02 c0       	push   0xc0021bc5
c000fc83:	68 d6 1b 02 c0       	push   0xc0021bd6
c000fc88:	e8 39 3d 00 00       	call   c00139c6 <Reg::readIntWithDefault(char*, char*, int)>
c000fc8d:	83 c4 10             	add    esp,0x10
c000fc90:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000fc93:	83 ec 0c             	sub    esp,0xc
c000fc96:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000fc99:	e8 7c 9b ff ff       	call   c000981a <Virt::setupPageSwapping(int)>
c000fc9e:	83 c4 10             	add    esp,0x10
c000fca1:	8d 76 00             	lea    esi,[esi+0x0]
c000fca4:	83 ec 0c             	sub    esp,0xc
c000fca7:	68 b5 06 02 c0       	push   0xc00206b5
c000fcac:	e8 84 0f 00 00       	call   c0010c35 <KeSetBootMessage(char const*)>
c000fcb1:	83 c4 10             	add    esp,0x10
c000fcb4:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fcb7:	83 ec 08             	sub    esp,0x8
c000fcba:	6a 13                	push   0x13
c000fcbc:	50                   	push   eax
c000fcbd:	e8 c2 cd ff ff       	call   c000ca84 <getDevicesOfType(DeviceType)>
c000fcc2:	83 c4 0c             	add    esp,0xc
c000fcc5:	8d 76 00             	lea    esi,[esi+0x0]
c000fcc8:	83 ec 0c             	sub    esp,0xc
c000fccb:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fcce:	50                   	push   eax
c000fccf:	e8 cc fd 00 00       	call   c001faa0 <LinkedList<Device>::isEmpty()>
c000fcd4:	83 c4 10             	add    esp,0x10
c000fcd7:	83 f0 01             	xor    eax,0x1
c000fcda:	0f b6 c0             	movzx  eax,al
c000fcdd:	85 c0                	test   eax,eax
c000fcdf:	0f 84 1f 01 00 00    	je     c000fe04 <ACPI::open(int, int, void*)+0x2a8>
c000fce5:	83 ec 0c             	sub    esp,0xc
c000fce8:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fceb:	50                   	push   eax
c000fcec:	e8 cb fd 00 00       	call   c001fabc <LinkedList<Device>::getFirstElement()>
c000fcf1:	83 c4 10             	add    esp,0x10
c000fcf4:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000fcf7:	83 ec 0c             	sub    esp,0xc
c000fcfa:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fcfd:	50                   	push   eax
c000fcfe:	e8 c1 fd 00 00       	call   c001fac4 <LinkedList<Device>::removeFirst()>
c000fd03:	83 c4 10             	add    esp,0x10
c000fd06:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000fd09:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000fd0c:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000fd0f:	b8 24 00 00 00       	mov    eax,0x24
c000fd14:	83 e0 fc             	and    eax,0xfffffffc
c000fd17:	89 c3                	mov    ebx,eax
c000fd19:	b8 00 00 00 00       	mov    eax,0x0
c000fd1e:	66 90                	xchg   ax,ax
c000fd20:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000fd27:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000fd2e:	83 c0 04             	add    eax,0x4
c000fd31:	39 d8                	cmp    eax,ebx
c000fd33:	72 eb                	jb     c000fd20 <ACPI::open(int, int, void*)+0x1c4>
c000fd35:	83 ec 08             	sub    esp,0x8
c000fd38:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000fd3e:	50                   	push   eax
c000fd3f:	83 ec 24             	sub    esp,0x24
c000fd42:	89 e1                	mov    ecx,esp
c000fd44:	b8 24 00 00 00       	mov    eax,0x24
c000fd49:	83 e0 fc             	and    eax,0xfffffffc
c000fd4c:	89 c3                	mov    ebx,eax
c000fd4e:	b8 00 00 00 00       	mov    eax,0x0
c000fd53:	90                   	nop
c000fd54:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000fd5b:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000fd5e:	83 c0 04             	add    eax,0x4
c000fd61:	39 d8                	cmp    eax,ebx
c000fd63:	72 ef                	jb     c000fd54 <ACPI::open(int, int, void*)+0x1f8>
c000fd65:	e8 74 b4 00 00       	call   c001b1de <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000fd6a:	83 c4 30             	add    esp,0x30
c000fd6d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000fd70:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000fd74:	0f 84 4e ff ff ff    	je     c000fcc8 <ACPI::open(int, int, void*)+0x16c>
c000fd7a:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000fd81:	83 ec 0c             	sub    esp,0xc
c000fd84:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000fd87:	e8 47 7d ff ff       	call   c0007ad3 <malloc>
c000fd8c:	83 c4 10             	add    esp,0x10
c000fd8f:	89 c3                	mov    ebx,eax
c000fd91:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fd96:	83 ec 04             	sub    esp,0x4
c000fd99:	50                   	push   eax
c000fd9a:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000fd9d:	53                   	push   ebx
c000fd9e:	e8 a1 ba ff ff       	call   c000b844 <File::File(char const*, Process*)>
c000fda3:	83 c4 10             	add    esp,0x10
c000fda6:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000fda9:	83 ec 0c             	sub    esp,0xc
c000fdac:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000fdaf:	e8 1c be ff ff       	call   c000bbd0 <File::exists()>
c000fdb4:	83 c4 10             	add    esp,0x10
c000fdb7:	0f b6 c0             	movzx  eax,al
c000fdba:	85 c0                	test   eax,eax
c000fdbc:	74 22                	je     c000fde0 <ACPI::open(int, int, void*)+0x284>
c000fdbe:	83 ec 08             	sub    esp,0x8
c000fdc1:	6a 01                	push   0x1
c000fdc3:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000fdc6:	e8 d1 53 00 00       	call   c001519c <Thr::loadDLL(char const*, bool)>
c000fdcb:	83 c4 10             	add    esp,0x10
c000fdce:	83 ec 08             	sub    esp,0x8
c000fdd1:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000fdd4:	50                   	push   eax
c000fdd5:	e8 02 56 00 00       	call   c00153dc <Thr::executeDLL(unsigned long, void*)>
c000fdda:	83 c4 10             	add    esp,0x10
c000fddd:	8d 76 00             	lea    esi,[esi+0x0]
c000fde0:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000fde4:	0f 84 de fe ff ff    	je     c000fcc8 <ACPI::open(int, int, void*)+0x16c>
c000fdea:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000fded:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdef:	83 c0 08             	add    eax,0x8
c000fdf2:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdf4:	83 ec 0c             	sub    esp,0xc
c000fdf7:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000fdfa:	ff d0                	call   eax
c000fdfc:	83 c4 10             	add    esp,0x10
c000fdff:	e9 c4 fe ff ff       	jmp    c000fcc8 <ACPI::open(int, int, void*)+0x16c>
c000fe04:	83 ec 0c             	sub    esp,0xc
c000fe07:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fe0a:	50                   	push   eax
c000fe0b:	e8 8c fc 00 00       	call   c001fa9c <LinkedList<Device>::~LinkedList()>
c000fe10:	83 c4 10             	add    esp,0x10
c000fe13:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000fe19:	83 ec 08             	sub    esp,0x8
c000fe1c:	6a 01                	push   0x1
c000fe1e:	68 dd 1b 02 c0       	push   0xc0021bdd
c000fe23:	e8 74 53 00 00       	call   c001519c <Thr::loadDLL(char const*, bool)>
c000fe28:	83 c4 10             	add    esp,0x10
c000fe2b:	83 ec 08             	sub    esp,0x8
c000fe2e:	53                   	push   ebx
c000fe2f:	50                   	push   eax
c000fe30:	e8 a7 55 00 00       	call   c00153dc <Thr::executeDLL(unsigned long, void*)>
c000fe35:	83 c4 10             	add    esp,0x10
c000fe38:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fe3d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fe43:	83 e0 04             	and    eax,0x4
c000fe46:	0f b6 c0             	movzx  eax,al
c000fe49:	85 c0                	test   eax,eax
c000fe4b:	0f 84 e3 00 00 00    	je     c000ff34 <ACPI::open(int, int, void*)+0x3d8>
c000fe51:	83 ec 0c             	sub    esp,0xc
c000fe54:	68 fa 1b 02 c0       	push   0xc0021bfa
c000fe59:	e8 d7 0d 00 00       	call   c0010c35 <KeSetBootMessage(char const*)>
c000fe5e:	83 c4 10             	add    esp,0x10
c000fe61:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c000fe68:	83 ec 0c             	sub    esp,0xc
c000fe6b:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c000fe6e:	e8 60 7c ff ff       	call   c0007ad3 <malloc>
c000fe73:	83 c4 10             	add    esp,0x10
c000fe76:	89 c3                	mov    ebx,eax
c000fe78:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fe7d:	83 ec 04             	sub    esp,0x4
c000fe80:	50                   	push   eax
c000fe81:	68 17 1c 02 c0       	push   0xc0021c17
c000fe86:	53                   	push   ebx
c000fe87:	e8 b8 b9 ff ff       	call   c000b844 <File::File(char const*, Process*)>
c000fe8c:	83 c4 10             	add    esp,0x10
c000fe8f:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c000fe92:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000fe96:	74 1c                	je     c000feb4 <ACPI::open(int, int, void*)+0x358>
c000fe98:	83 ec 0c             	sub    esp,0xc
c000fe9b:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000fe9e:	e8 2d bd ff ff       	call   c000bbd0 <File::exists()>
c000fea3:	83 c4 10             	add    esp,0x10
c000fea6:	0f b6 c0             	movzx  eax,al
c000fea9:	85 c0                	test   eax,eax
c000feab:	74 07                	je     c000feb4 <ACPI::open(int, int, void*)+0x358>
c000fead:	b0 01                	mov    al,0x1
c000feaf:	eb 07                	jmp    c000feb8 <ACPI::open(int, int, void*)+0x35c>
c000feb1:	8d 76 00             	lea    esi,[esi+0x0]
c000feb4:	b0 00                	mov    al,0x0
c000feb6:	66 90                	xchg   ax,ax
c000feb8:	0f b6 c0             	movzx  eax,al
c000febb:	85 c0                	test   eax,eax
c000febd:	74 21                	je     c000fee0 <ACPI::open(int, int, void*)+0x384>
c000febf:	83 ec 08             	sub    esp,0x8
c000fec2:	6a 01                	push   0x1
c000fec4:	68 17 1c 02 c0       	push   0xc0021c17
c000fec9:	e8 ce 52 00 00       	call   c001519c <Thr::loadDLL(char const*, bool)>
c000fece:	83 c4 10             	add    esp,0x10
c000fed1:	83 ec 08             	sub    esp,0x8
c000fed4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fed7:	50                   	push   eax
c000fed8:	e8 ff 54 00 00       	call   c00153dc <Thr::executeDLL(unsigned long, void*)>
c000fedd:	83 c4 10             	add    esp,0x10
c000fee0:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000fee4:	74 1e                	je     c000ff04 <ACPI::open(int, int, void*)+0x3a8>
c000fee6:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000feea:	74 18                	je     c000ff04 <ACPI::open(int, int, void*)+0x3a8>
c000feec:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000feef:	8b 00                	mov    eax,DWORD PTR [eax]
c000fef1:	83 c0 08             	add    eax,0x8
c000fef4:	8b 00                	mov    eax,DWORD PTR [eax]
c000fef6:	83 ec 0c             	sub    esp,0xc
c000fef9:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000fefc:	ff d0                	call   eax
c000fefe:	83 c4 10             	add    esp,0x10
c000ff01:	8d 76 00             	lea    esi,[esi+0x0]
c000ff04:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000ff09:	83 ec 08             	sub    esp,0x8
c000ff0c:	68 34 1c 02 c0       	push   0xc0021c34
c000ff11:	50                   	push   eax
c000ff12:	e8 65 f2 ff ff       	call   c000f17c <findDataTable(unsigned char*, char*)>
c000ff17:	83 c4 10             	add    esp,0x10
c000ff1a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000ff1d:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c000ff21:	74 11                	je     c000ff34 <ACPI::open(int, int, void*)+0x3d8>
c000ff23:	83 ec 08             	sub    esp,0x8
c000ff26:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c000ff29:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000ff2c:	e8 c7 fb ff ff       	call   c000faf8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000ff31:	83 c4 10             	add    esp,0x10
c000ff34:	b8 00 00 00 00       	mov    eax,0x0
c000ff39:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000ff3c:	c9                   	leave  
c000ff3d:	c3                   	ret    

c000ff3e <CPU::close(int, int, void*)>:
c000ff3e:	31 c0                	xor    eax,eax
c000ff40:	c3                   	ret    
c000ff41:	90                   	nop

c000ff42 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000ff42:	60                   	pusha  
c000ff43:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ff47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ff4b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ff4f:	9c                   	pushf  
c000ff50:	fa                   	cli    
c000ff51:	0f 09                	wbinvd 
c000ff53:	0f 30                	wrmsr  
c000ff55:	9d                   	popf   
c000ff56:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ff5a:	89 02                	mov    DWORD PTR [edx],eax
c000ff5c:	61                   	popa   
c000ff5d:	c3                   	ret    

c000ff5e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000ff5e:	60                   	pusha  
c000ff5f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ff63:	9c                   	pushf  
c000ff64:	fa                   	cli    
c000ff65:	0f 09                	wbinvd 
c000ff67:	31 c0                	xor    eax,eax
c000ff69:	31 d2                	xor    edx,edx
c000ff6b:	0f 32                	rdmsr  
c000ff6d:	9d                   	popf   
c000ff6e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ff72:	89 02                	mov    DWORD PTR [edx],eax
c000ff74:	61                   	popa   
c000ff75:	c3                   	ret    

c000ff76 <CPU::AMD_K6_writeback(int, int, int)>:
c000ff76:	56                   	push   esi
c000ff77:	53                   	push   ebx
c000ff78:	83 ec 10             	sub    esp,0x10
c000ff7b:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000ff80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff84:	75 5d                	jne    c000ffe3 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ff86:	83 f8 08             	cmp    eax,0x8
c000ff89:	75 09                	jne    c000ff94 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000ff8b:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000ff90:	7e 13                	jle    c000ffa5 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ff92:	eb 30                	jmp    c000ffc4 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ff94:	83 f8 06             	cmp    eax,0x6
c000ff97:	7c 4a                	jl     c000ffe3 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ff99:	83 f8 07             	cmp    eax,0x7
c000ff9c:	7e 07                	jle    c000ffa5 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ff9e:	83 f8 09             	cmp    eax,0x9
c000ffa1:	74 21                	je     c000ffc4 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ffa3:	eb 3e                	jmp    c000ffe3 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ffa5:	8b 1d dc 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025edc
c000ffab:	89 e6                	mov    esi,esp
c000ffad:	56                   	push   esi
c000ffae:	68 82 00 00 c0       	push   0xc0000082
c000ffb3:	e8 a6 ff ff ff       	call   c000ff5e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ffb8:	c1 eb 15             	shr    ebx,0x15
c000ffbb:	56                   	push   esi
c000ffbc:	83 e3 7e             	and    ebx,0x7e
c000ffbf:	6a 00                	push   0x0
c000ffc1:	53                   	push   ebx
c000ffc2:	eb 12                	jmp    c000ffd6 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000ffc4:	89 e3                	mov    ebx,esp
c000ffc6:	53                   	push   ebx
c000ffc7:	68 82 00 00 c0       	push   0xc0000082
c000ffcc:	e8 8d ff ff ff       	call   c000ff5e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ffd1:	53                   	push   ebx
c000ffd2:	6a 00                	push   0x0
c000ffd4:	6a 00                	push   0x0
c000ffd6:	68 82 00 00 c0       	push   0xc0000082
c000ffdb:	e8 62 ff ff ff       	call   c000ff42 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000ffe0:	83 c4 18             	add    esp,0x18
c000ffe3:	83 c4 10             	add    esp,0x10
c000ffe6:	5b                   	pop    ebx
c000ffe7:	5e                   	pop    esi
c000ffe8:	c3                   	ret    
c000ffe9:	90                   	nop

c000ffea <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000ffea:	55                   	push   ebp
c000ffeb:	57                   	push   edi
c000ffec:	56                   	push   esi
c000ffed:	53                   	push   ebx
c000ffee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fff2:	39 05 f8 31 02 c0    	cmp    DWORD PTR ds:0xc00231f8,eax
c000fff8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000fffc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010000:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0010004:	75 23                	jne    c0010029 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0010006:	a1 8c 8d 02 c0       	mov    eax,ds:0xc0028d8c
c001000b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001000f:	89 06                	mov    DWORD PTR [esi],eax
c0010011:	a1 88 8d 02 c0       	mov    eax,ds:0xc0028d88
c0010016:	89 07                	mov    DWORD PTR [edi],eax
c0010018:	a1 84 8d 02 c0       	mov    eax,ds:0xc0028d84
c001001d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010020:	a1 80 8d 02 c0       	mov    eax,ds:0xc0028d80
c0010025:	89 02                	mov    DWORD PTR [edx],eax
c0010027:	eb 3f                	jmp    c0010068 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0010029:	31 c9                	xor    ecx,ecx
c001002b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001002f:	0f a2                	cpuid  
c0010031:	89 06                	mov    DWORD PTR [esi],eax
c0010033:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010037:	89 1f                	mov    DWORD PTR [edi],ebx
c0010039:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001003c:	89 10                	mov    DWORD PTR [eax],edx
c001003e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010042:	a3 f8 31 02 c0       	mov    ds:0xc00231f8,eax
c0010047:	8b 06                	mov    eax,DWORD PTR [esi]
c0010049:	a3 8c 8d 02 c0       	mov    ds:0xc0028d8c,eax
c001004e:	8b 07                	mov    eax,DWORD PTR [edi]
c0010050:	a3 88 8d 02 c0       	mov    ds:0xc0028d88,eax
c0010055:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010058:	a3 84 8d 02 c0       	mov    ds:0xc0028d84,eax
c001005d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010061:	8b 00                	mov    eax,DWORD PTR [eax]
c0010063:	a3 80 8d 02 c0       	mov    ds:0xc0028d80,eax
c0010068:	5b                   	pop    ebx
c0010069:	5e                   	pop    esi
c001006a:	5f                   	pop    edi
c001006b:	5d                   	pop    ebp
c001006c:	c3                   	ret    
c001006d:	90                   	nop

c001006e <CPU::cpuidCheckEDX(unsigned int)>:
c001006e:	83 ec 10             	sub    esp,0x10
c0010071:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010075:	50                   	push   eax
c0010076:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001007a:	50                   	push   eax
c001007b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001007f:	50                   	push   eax
c0010080:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010084:	50                   	push   eax
c0010085:	6a 01                	push   0x1
c0010087:	e8 5e ff ff ff       	call   c000ffea <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001008c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010090:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0010094:	0f 95 c0             	setne  al
c0010097:	83 c4 24             	add    esp,0x24
c001009a:	c3                   	ret    
c001009b:	90                   	nop

c001009c <CPU::cpuidCheckECX(unsigned int)>:
c001009c:	83 ec 10             	sub    esp,0x10
c001009f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100a3:	50                   	push   eax
c00100a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100a8:	50                   	push   eax
c00100a9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100ad:	50                   	push   eax
c00100ae:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100b2:	50                   	push   eax
c00100b3:	6a 01                	push   0x1
c00100b5:	e8 30 ff ff ff       	call   c000ffea <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00100ba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00100be:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00100c2:	0f 95 c0             	setne  al
c00100c5:	83 c4 24             	add    esp,0x24
c00100c8:	c3                   	ret    
c00100c9:	90                   	nop

c00100ca <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00100ca:	83 ec 10             	sub    esp,0x10
c00100cd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100d1:	50                   	push   eax
c00100d2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100d6:	50                   	push   eax
c00100d7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100db:	50                   	push   eax
c00100dc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100e0:	50                   	push   eax
c00100e1:	6a 07                	push   0x7
c00100e3:	e8 02 ff ff ff       	call   c000ffea <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00100e8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00100ec:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00100f0:	0f 95 c0             	setne  al
c00100f3:	83 c4 24             	add    esp,0x24
c00100f6:	c3                   	ret    
c00100f7:	90                   	nop

c00100f8 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00100f8:	83 ec 10             	sub    esp,0x10
c00100fb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100ff:	50                   	push   eax
c0010100:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010104:	50                   	push   eax
c0010105:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010109:	50                   	push   eax
c001010a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001010e:	50                   	push   eax
c001010f:	6a 07                	push   0x7
c0010111:	e8 d4 fe ff ff       	call   c000ffea <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010116:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001011a:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001011e:	0f 95 c0             	setne  al
c0010121:	83 c4 24             	add    esp,0x24
c0010124:	c3                   	ret    
c0010125:	90                   	nop

c0010126 <CPU::CPU()>:
c0010126:	83 ec 0c             	sub    esp,0xc
c0010129:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001012d:	83 ec 08             	sub    esp,0x8
c0010130:	68 59 1d 02 c0       	push   0xc0021d59
c0010135:	50                   	push   eax
c0010136:	e8 c9 c7 ff ff       	call   c000c904 <Device::Device(char const*)>
c001013b:	83 c4 10             	add    esp,0x10
c001013e:	ba ec 1d 02 c0       	mov    edx,0xc0021dec
c0010143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010147:	89 10                	mov    DWORD PTR [eax],edx
c0010149:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001014d:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0010157:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001015b:	05 78 01 00 00       	add    eax,0x178
c0010160:	83 ec 0c             	sub    esp,0xc
c0010163:	50                   	push   eax
c0010164:	e8 13 72 ff ff       	call   c000737c <GDT::GDT()>
c0010169:	83 c4 10             	add    esp,0x10
c001016c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010170:	05 7c 09 00 00       	add    eax,0x97c
c0010175:	83 ec 0c             	sub    esp,0xc
c0010178:	50                   	push   eax
c0010179:	e8 4e 74 ff ff       	call   c00075cc <IDT::IDT()>
c001017e:	83 c4 10             	add    esp,0x10
c0010181:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010185:	05 7c 11 00 00       	add    eax,0x117c
c001018a:	83 ec 0c             	sub    esp,0xc
c001018d:	50                   	push   eax
c001018e:	e8 99 8d ff ff       	call   c0008f2c <TSS::TSS()>
c0010193:	83 c4 10             	add    esp,0x10
c0010196:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001019a:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c00101a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101a5:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c00101af:	90                   	nop
c00101b0:	83 c4 0c             	add    esp,0xc
c00101b3:	c3                   	ret    

c00101b4 <CPU::displayFeatures()>:
c00101b4:	c3                   	ret    
c00101b5:	90                   	nop

c00101b6 <CPU::detectFeatures()>:
c00101b6:	55                   	push   ebp
c00101b7:	57                   	push   edi
c00101b8:	56                   	push   esi
c00101b9:	53                   	push   ebx
c00101ba:	83 ec 30             	sub    esp,0x30
c00101bd:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00101c1:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c00101cb:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c00101d1:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c00101d8:	6a 0d                	push   0xd
c00101da:	6a 00                	push   0x0
c00101dc:	55                   	push   ebp
c00101dd:	e8 0e 03 ff ff       	call   c00004f0 <memset>
c00101e2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00101e7:	83 c4 10             	add    esp,0x10
c00101ea:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c00101f1:	0f 84 db 05 00 00    	je     c00107d2 <CPU::detectFeatures()+0x61c>
c00101f7:	83 ec 0c             	sub    esp,0xc
c00101fa:	89 ef                	mov    edi,ebp
c00101fc:	6a 10                	push   0x10
c00101fe:	e8 6b fe ff ff       	call   c001006e <CPU::cpuidCheckEDX(unsigned int)>
c0010203:	83 e0 01             	and    eax,0x1
c0010206:	8d 14 00             	lea    edx,[eax+eax*1]
c0010209:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001020f:	83 e0 fd             	and    eax,0xfffffffd
c0010212:	09 d0                	or     eax,edx
c0010214:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001021a:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0010221:	e8 48 fe ff ff       	call   c001006e <CPU::cpuidCheckEDX(unsigned int)>
c0010226:	83 e0 01             	and    eax,0x1
c0010229:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010230:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010236:	83 e0 fb             	and    eax,0xfffffffb
c0010239:	09 d0                	or     eax,edx
c001023b:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010241:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0010248:	e8 21 fe ff ff       	call   c001006e <CPU::cpuidCheckEDX(unsigned int)>
c001024d:	83 e0 01             	and    eax,0x1
c0010250:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0010257:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001025d:	83 e0 f7             	and    eax,0xfffffff7
c0010260:	09 d0                	or     eax,edx
c0010262:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010268:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001026f:	e8 fa fd ff ff       	call   c001006e <CPU::cpuidCheckEDX(unsigned int)>
c0010274:	83 e0 01             	and    eax,0x1
c0010277:	c1 e0 04             	shl    eax,0x4
c001027a:	89 c2                	mov    edx,eax
c001027c:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010282:	83 e0 ef             	and    eax,0xffffffef
c0010285:	09 d0                	or     eax,edx
c0010287:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001028d:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0010294:	e8 d5 fd ff ff       	call   c001006e <CPU::cpuidCheckEDX(unsigned int)>
c0010299:	83 e0 01             	and    eax,0x1
c001029c:	c1 e0 05             	shl    eax,0x5
c001029f:	89 c2                	mov    edx,eax
c00102a1:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00102a7:	83 e0 df             	and    eax,0xffffffdf
c00102aa:	09 d0                	or     eax,edx
c00102ac:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00102b2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00102b9:	e8 b0 fd ff ff       	call   c001006e <CPU::cpuidCheckEDX(unsigned int)>
c00102be:	83 e0 01             	and    eax,0x1
c00102c1:	8d 14 00             	lea    edx,[eax+eax*1]
c00102c4:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00102ca:	83 e0 fd             	and    eax,0xfffffffd
c00102cd:	09 d0                	or     eax,edx
c00102cf:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00102d5:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00102dc:	e8 8d fd ff ff       	call   c001006e <CPU::cpuidCheckEDX(unsigned int)>
c00102e1:	83 e0 01             	and    eax,0x1
c00102e4:	c1 e0 06             	shl    eax,0x6
c00102e7:	89 c2                	mov    edx,eax
c00102e9:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00102ef:	83 e0 bf             	and    eax,0xffffffbf
c00102f2:	09 d0                	or     eax,edx
c00102f4:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00102fa:	58                   	pop    eax
c00102fb:	8d 44 24 28          	lea    eax,[esp+0x28]
c00102ff:	50                   	push   eax
c0010300:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010304:	50                   	push   eax
c0010305:	8d 74 24 28          	lea    esi,[esp+0x28]
c0010309:	56                   	push   esi
c001030a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001030e:	50                   	push   eax
c001030f:	6a 00                	push   0x0
c0010311:	e8 d4 fc ff ff       	call   c000ffea <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010316:	b8 04 00 00 00       	mov    eax,0x4
c001031b:	89 c1                	mov    ecx,eax
c001031d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001031f:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0010325:	89 c1                	mov    ecx,eax
c0010327:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001032b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001032d:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0010333:	89 c1                	mov    ecx,eax
c0010335:	8d 74 24 38          	lea    esi,[esp+0x38]
c0010339:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001033b:	83 c4 18             	add    esp,0x18
c001033e:	68 68 1c 02 c0       	push   0xc0021c68
c0010343:	55                   	push   ebp
c0010344:	e8 37 04 ff ff       	call   c0000780 <strcmp>
c0010349:	83 c4 10             	add    esp,0x10
c001034c:	85 c0                	test   eax,eax
c001034e:	75 0f                	jne    c001035f <CPU::detectFeatures()+0x1a9>
c0010350:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001035a:	e9 22 02 00 00       	jmp    c0010581 <CPU::detectFeatures()+0x3cb>
c001035f:	50                   	push   eax
c0010360:	50                   	push   eax
c0010361:	68 75 1c 02 c0       	push   0xc0021c75
c0010366:	55                   	push   ebp
c0010367:	e8 14 04 ff ff       	call   c0000780 <strcmp>
c001036c:	83 c4 10             	add    esp,0x10
c001036f:	85 c0                	test   eax,eax
c0010371:	74 dd                	je     c0010350 <CPU::detectFeatures()+0x19a>
c0010373:	50                   	push   eax
c0010374:	50                   	push   eax
c0010375:	68 82 1c 02 c0       	push   0xc0021c82
c001037a:	55                   	push   ebp
c001037b:	e8 00 04 ff ff       	call   c0000780 <strcmp>
c0010380:	83 c4 10             	add    esp,0x10
c0010383:	85 c0                	test   eax,eax
c0010385:	74 2a                	je     c00103b1 <CPU::detectFeatures()+0x1fb>
c0010387:	50                   	push   eax
c0010388:	50                   	push   eax
c0010389:	68 8f 1c 02 c0       	push   0xc0021c8f
c001038e:	55                   	push   ebp
c001038f:	e8 ec 03 ff ff       	call   c0000780 <strcmp>
c0010394:	83 c4 10             	add    esp,0x10
c0010397:	85 c0                	test   eax,eax
c0010399:	74 16                	je     c00103b1 <CPU::detectFeatures()+0x1fb>
c001039b:	50                   	push   eax
c001039c:	50                   	push   eax
c001039d:	68 9c 1c 02 c0       	push   0xc0021c9c
c00103a2:	55                   	push   ebp
c00103a3:	e8 d8 03 ff ff       	call   c0000780 <strcmp>
c00103a8:	83 c4 10             	add    esp,0x10
c00103ab:	85 c0                	test   eax,eax
c00103ad:	74 48                	je     c00103f7 <CPU::detectFeatures()+0x241>
c00103af:	eb 0f                	jmp    c00103c0 <CPU::detectFeatures()+0x20a>
c00103b1:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00103bb:	e9 c1 01 00 00       	jmp    c0010581 <CPU::detectFeatures()+0x3cb>
c00103c0:	50                   	push   eax
c00103c1:	50                   	push   eax
c00103c2:	68 a9 1c 02 c0       	push   0xc0021ca9
c00103c7:	55                   	push   ebp
c00103c8:	e8 b3 03 ff ff       	call   c0000780 <strcmp>
c00103cd:	83 c4 10             	add    esp,0x10
c00103d0:	85 c0                	test   eax,eax
c00103d2:	74 23                	je     c00103f7 <CPU::detectFeatures()+0x241>
c00103d4:	57                   	push   edi
c00103d5:	57                   	push   edi
c00103d6:	68 b6 1c 02 c0       	push   0xc0021cb6
c00103db:	55                   	push   ebp
c00103dc:	e8 9f 03 ff ff       	call   c0000780 <strcmp>
c00103e1:	83 c4 10             	add    esp,0x10
c00103e4:	85 c0                	test   eax,eax
c00103e6:	75 1e                	jne    c0010406 <CPU::detectFeatures()+0x250>
c00103e8:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00103f2:	e9 8a 01 00 00       	jmp    c0010581 <CPU::detectFeatures()+0x3cb>
c00103f7:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0010401:	e9 7b 01 00 00       	jmp    c0010581 <CPU::detectFeatures()+0x3cb>
c0010406:	56                   	push   esi
c0010407:	56                   	push   esi
c0010408:	68 c3 1c 02 c0       	push   0xc0021cc3
c001040d:	55                   	push   ebp
c001040e:	e8 6d 03 ff ff       	call   c0000780 <strcmp>
c0010413:	83 c4 10             	add    esp,0x10
c0010416:	85 c0                	test   eax,eax
c0010418:	75 0f                	jne    c0010429 <CPU::detectFeatures()+0x273>
c001041a:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0010424:	e9 58 01 00 00       	jmp    c0010581 <CPU::detectFeatures()+0x3cb>
c0010429:	51                   	push   ecx
c001042a:	51                   	push   ecx
c001042b:	68 82 1c 02 c0       	push   0xc0021c82
c0010430:	55                   	push   ebp
c0010431:	e8 4a 03 ff ff       	call   c0000780 <strcmp>
c0010436:	83 c4 10             	add    esp,0x10
c0010439:	85 c0                	test   eax,eax
c001043b:	75 0f                	jne    c001044c <CPU::detectFeatures()+0x296>
c001043d:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0010447:	e9 35 01 00 00       	jmp    c0010581 <CPU::detectFeatures()+0x3cb>
c001044c:	52                   	push   edx
c001044d:	52                   	push   edx
c001044e:	68 d0 1c 02 c0       	push   0xc0021cd0
c0010453:	55                   	push   ebp
c0010454:	e8 27 03 ff ff       	call   c0000780 <strcmp>
c0010459:	83 c4 10             	add    esp,0x10
c001045c:	85 c0                	test   eax,eax
c001045e:	75 0f                	jne    c001046f <CPU::detectFeatures()+0x2b9>
c0010460:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001046a:	e9 12 01 00 00       	jmp    c0010581 <CPU::detectFeatures()+0x3cb>
c001046f:	50                   	push   eax
c0010470:	50                   	push   eax
c0010471:	68 dd 1c 02 c0       	push   0xc0021cdd
c0010476:	55                   	push   ebp
c0010477:	e8 04 03 ff ff       	call   c0000780 <strcmp>
c001047c:	83 c4 10             	add    esp,0x10
c001047f:	85 c0                	test   eax,eax
c0010481:	75 0f                	jne    c0010492 <CPU::detectFeatures()+0x2dc>
c0010483:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001048d:	e9 ef 00 00 00       	jmp    c0010581 <CPU::detectFeatures()+0x3cb>
c0010492:	50                   	push   eax
c0010493:	50                   	push   eax
c0010494:	68 ea 1c 02 c0       	push   0xc0021cea
c0010499:	55                   	push   ebp
c001049a:	e8 e1 02 ff ff       	call   c0000780 <strcmp>
c001049f:	83 c4 10             	add    esp,0x10
c00104a2:	85 c0                	test   eax,eax
c00104a4:	75 0f                	jne    c00104b5 <CPU::detectFeatures()+0x2ff>
c00104a6:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00104b0:	e9 cc 00 00 00       	jmp    c0010581 <CPU::detectFeatures()+0x3cb>
c00104b5:	50                   	push   eax
c00104b6:	50                   	push   eax
c00104b7:	68 f7 1c 02 c0       	push   0xc0021cf7
c00104bc:	55                   	push   ebp
c00104bd:	e8 be 02 ff ff       	call   c0000780 <strcmp>
c00104c2:	83 c4 10             	add    esp,0x10
c00104c5:	85 c0                	test   eax,eax
c00104c7:	75 0f                	jne    c00104d8 <CPU::detectFeatures()+0x322>
c00104c9:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00104d3:	e9 a9 00 00 00       	jmp    c0010581 <CPU::detectFeatures()+0x3cb>
c00104d8:	50                   	push   eax
c00104d9:	50                   	push   eax
c00104da:	68 04 1d 02 c0       	push   0xc0021d04
c00104df:	55                   	push   ebp
c00104e0:	e8 9b 02 ff ff       	call   c0000780 <strcmp>
c00104e5:	83 c4 10             	add    esp,0x10
c00104e8:	85 c0                	test   eax,eax
c00104ea:	75 0f                	jne    c00104fb <CPU::detectFeatures()+0x345>
c00104ec:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00104f6:	e9 86 00 00 00       	jmp    c0010581 <CPU::detectFeatures()+0x3cb>
c00104fb:	50                   	push   eax
c00104fc:	50                   	push   eax
c00104fd:	68 11 1d 02 c0       	push   0xc0021d11
c0010502:	55                   	push   ebp
c0010503:	e8 78 02 ff ff       	call   c0000780 <strcmp>
c0010508:	83 c4 10             	add    esp,0x10
c001050b:	85 c0                	test   eax,eax
c001050d:	75 0c                	jne    c001051b <CPU::detectFeatures()+0x365>
c001050f:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0010519:	eb 66                	jmp    c0010581 <CPU::detectFeatures()+0x3cb>
c001051b:	50                   	push   eax
c001051c:	50                   	push   eax
c001051d:	68 1e 1d 02 c0       	push   0xc0021d1e
c0010522:	55                   	push   ebp
c0010523:	e8 58 02 ff ff       	call   c0000780 <strcmp>
c0010528:	83 c4 10             	add    esp,0x10
c001052b:	85 c0                	test   eax,eax
c001052d:	75 0c                	jne    c001053b <CPU::detectFeatures()+0x385>
c001052f:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0010539:	eb 46                	jmp    c0010581 <CPU::detectFeatures()+0x3cb>
c001053b:	57                   	push   edi
c001053c:	57                   	push   edi
c001053d:	68 2b 1d 02 c0       	push   0xc0021d2b
c0010542:	55                   	push   ebp
c0010543:	e8 38 02 ff ff       	call   c0000780 <strcmp>
c0010548:	83 c4 10             	add    esp,0x10
c001054b:	85 c0                	test   eax,eax
c001054d:	74 e0                	je     c001052f <CPU::detectFeatures()+0x379>
c001054f:	56                   	push   esi
c0010550:	56                   	push   esi
c0010551:	68 38 1d 02 c0       	push   0xc0021d38
c0010556:	55                   	push   ebp
c0010557:	e8 24 02 ff ff       	call   c0000780 <strcmp>
c001055c:	83 c4 10             	add    esp,0x10
c001055f:	85 c0                	test   eax,eax
c0010561:	74 cc                	je     c001052f <CPU::detectFeatures()+0x379>
c0010563:	51                   	push   ecx
c0010564:	51                   	push   ecx
c0010565:	68 45 1d 02 c0       	push   0xc0021d45
c001056a:	55                   	push   ebp
c001056b:	e8 10 02 ff ff       	call   c0000780 <strcmp>
c0010570:	83 c4 10             	add    esp,0x10
c0010573:	85 c0                	test   eax,eax
c0010575:	74 b8                	je     c001052f <CPU::detectFeatures()+0x379>
c0010577:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0010581:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0010586:	0f 86 be 00 00 00    	jbe    c001064a <CPU::detectFeatures()+0x494>
c001058c:	83 ec 0c             	sub    esp,0xc
c001058f:	68 80 00 00 00       	push   0x80
c0010594:	e8 31 fb ff ff       	call   c00100ca <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010599:	83 e0 01             	and    eax,0x1
c001059c:	c1 e0 06             	shl    eax,0x6
c001059f:	89 c2                	mov    edx,eax
c00105a1:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00105a7:	83 e0 bf             	and    eax,0xffffffbf
c00105aa:	09 d0                	or     eax,edx
c00105ac:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00105b2:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00105b9:	e8 0c fb ff ff       	call   c00100ca <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00105be:	83 e0 01             	and    eax,0x1
c00105c1:	c1 e0 04             	shl    eax,0x4
c00105c4:	89 c2                	mov    edx,eax
c00105c6:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00105cc:	83 e0 ef             	and    eax,0xffffffef
c00105cf:	09 d0                	or     eax,edx
c00105d1:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00105d7:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00105de:	e8 e7 fa ff ff       	call   c00100ca <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00105e3:	89 c2                	mov    edx,eax
c00105e5:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00105eb:	c1 e2 07             	shl    edx,0x7
c00105ee:	83 e0 7f             	and    eax,0x7f
c00105f1:	09 d0                	or     eax,edx
c00105f3:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00105f9:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0010600:	e8 f3 fa ff ff       	call   c00100f8 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0010605:	83 e0 01             	and    eax,0x1
c0010608:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001060f:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010615:	83 e0 f7             	and    eax,0xfffffff7
c0010618:	09 d0                	or     eax,edx
c001061a:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010620:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0010627:	e8 cc fa ff ff       	call   c00100f8 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001062c:	83 c4 10             	add    esp,0x10
c001062f:	83 e0 01             	and    eax,0x1
c0010632:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010639:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001063f:	83 e0 fb             	and    eax,0xfffffffb
c0010642:	09 d0                	or     eax,edx
c0010644:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001064a:	83 ec 0c             	sub    esp,0xc
c001064d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010651:	50                   	push   eax
c0010652:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010656:	50                   	push   eax
c0010657:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001065b:	57                   	push   edi
c001065c:	8d 74 24 28          	lea    esi,[esp+0x28]
c0010660:	56                   	push   esi
c0010661:	6a 01                	push   0x1
c0010663:	e8 82 f9 ff ff       	call   c000ffea <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010668:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001066c:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0010672:	89 c1                	mov    ecx,eax
c0010674:	83 e1 0f             	and    ecx,0xf
c0010677:	83 e2 f0             	and    edx,0xfffffff0
c001067a:	09 ca                	or     edx,ecx
c001067c:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0010682:	89 c2                	mov    edx,eax
c0010684:	c1 ea 04             	shr    edx,0x4
c0010687:	83 e2 0f             	and    edx,0xf
c001068a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001068e:	89 d1                	mov    ecx,edx
c0010690:	83 c4 20             	add    esp,0x20
c0010693:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0010699:	c1 e1 06             	shl    ecx,0x6
c001069c:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c00106a2:	09 ca                	or     edx,ecx
c00106a4:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00106ab:	89 c2                	mov    edx,eax
c00106ad:	c1 ea 08             	shr    edx,0x8
c00106b0:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c00106b6:	83 e2 0f             	and    edx,0xf
c00106b9:	89 d5                	mov    ebp,edx
c00106bb:	83 e5 03             	and    ebp,0x3
c00106be:	c1 e5 06             	shl    ebp,0x6
c00106c1:	83 e1 3f             	and    ecx,0x3f
c00106c4:	09 e9                	or     ecx,ebp
c00106c6:	89 d5                	mov    ebp,edx
c00106c8:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c00106ce:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c00106d4:	c1 ed 02             	shr    ebp,0x2
c00106d7:	83 e1 c0             	and    ecx,0xffffffc0
c00106da:	09 e9                	or     ecx,ebp
c00106dc:	89 c5                	mov    ebp,eax
c00106de:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00106e4:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c00106ea:	c1 ed 08             	shr    ebp,0x8
c00106ed:	83 e5 30             	and    ebp,0x30
c00106f0:	83 e1 cf             	and    ecx,0xffffffcf
c00106f3:	09 e9                	or     ecx,ebp
c00106f5:	83 fa 06             	cmp    edx,0x6
c00106f8:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c00106fe:	74 05                	je     c0010705 <CPU::detectFeatures()+0x54f>
c0010700:	83 fa 0f             	cmp    edx,0xf
c0010703:	75 64                	jne    c0010769 <CPU::detectFeatures()+0x5b3>
c0010705:	89 c1                	mov    ecx,eax
c0010707:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001070d:	c1 e9 10             	shr    ecx,0x10
c0010710:	c1 e1 04             	shl    ecx,0x4
c0010713:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0010717:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c001071d:	0f b6 c9             	movzx  ecx,cl
c0010720:	c1 e1 06             	shl    ecx,0x6
c0010723:	09 e9                	or     ecx,ebp
c0010725:	83 fa 0f             	cmp    edx,0xf
c0010728:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c001072f:	75 38                	jne    c0010769 <CPU::detectFeatures()+0x5b3>
c0010731:	c1 e8 14             	shr    eax,0x14
c0010734:	83 c0 0f             	add    eax,0xf
c0010737:	0f b6 c0             	movzx  eax,al
c001073a:	89 c2                	mov    edx,eax
c001073c:	c1 e8 02             	shr    eax,0x2
c001073f:	83 e2 03             	and    edx,0x3
c0010742:	89 d1                	mov    ecx,edx
c0010744:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001074a:	c1 e1 06             	shl    ecx,0x6
c001074d:	83 e2 3f             	and    edx,0x3f
c0010750:	09 ca                	or     edx,ecx
c0010752:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0010758:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001075e:	83 e2 c0             	and    edx,0xffffffc0
c0010761:	09 d0                	or     eax,edx
c0010763:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c0010769:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001076f:	83 ec 0c             	sub    esp,0xc
c0010772:	83 c8 07             	or     eax,0x7
c0010775:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001077b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001077f:	50                   	push   eax
c0010780:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0010784:	55                   	push   ebp
c0010785:	57                   	push   edi
c0010786:	56                   	push   esi
c0010787:	68 00 00 00 80       	push   0x80000000
c001078c:	e8 59 f8 ff ff       	call   c000ffea <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010791:	83 c4 20             	add    esp,0x20
c0010794:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001079c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00107a0:	76 1e                	jbe    c00107c0 <CPU::detectFeatures()+0x60a>
c00107a2:	83 ec 0c             	sub    esp,0xc
c00107a5:	50                   	push   eax
c00107a6:	55                   	push   ebp
c00107a7:	57                   	push   edi
c00107a8:	56                   	push   esi
c00107a9:	68 01 00 00 80       	push   0x80000001
c00107ae:	e8 37 f8 ff ff       	call   c000ffea <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00107b3:	83 c4 20             	add    esp,0x20
c00107b6:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c00107c0:	52                   	push   edx
c00107c1:	52                   	push   edx
c00107c2:	68 51 1d 02 c0       	push   0xc0021d51
c00107c7:	53                   	push   ebx
c00107c8:	e8 29 c1 ff ff       	call   c000c8f6 <Device::setName(char const*)>
c00107cd:	83 c4 10             	add    esp,0x10
c00107d0:	eb 69                	jmp    c001083b <CPU::detectFeatures()+0x685>
c00107d2:	50                   	push   eax
c00107d3:	50                   	push   eax
c00107d4:	68 b6 1c 02 c0       	push   0xc0021cb6
c00107d9:	55                   	push   ebp
c00107da:	e8 71 fe fe ff       	call   c0000650 <strcpy>
c00107df:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00107e9:	e8 d5 f9 fe ff       	call   c00001c3 <is486>
c00107ee:	83 c4 10             	add    esp,0x10
c00107f1:	85 c0                	test   eax,eax
c00107f3:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00107f9:	74 1f                	je     c001081a <CPU::detectFeatures()+0x664>
c00107fb:	83 c8 07             	or     eax,0x7
c00107fe:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010804:	0f 20 c0             	mov    eax,cr0
c0010807:	83 e0 14             	and    eax,0x14
c001080a:	83 f8 04             	cmp    eax,0x4
c001080d:	75 10                	jne    c001081f <CPU::detectFeatures()+0x669>
c001080f:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010815:	83 e0 fd             	and    eax,0xfffffffd
c0010818:	eb 1b                	jmp    c0010835 <CPU::detectFeatures()+0x67f>
c001081a:	83 e0 f8             	and    eax,0xfffffff8
c001081d:	eb df                	jmp    c00107fe <CPU::detectFeatures()+0x648>
c001081f:	e8 7a f9 fe ff       	call   c000019e <hasLegacyFPU>
c0010824:	83 e0 01             	and    eax,0x1
c0010827:	8d 14 00             	lea    edx,[eax+eax*1]
c001082a:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010830:	83 e0 fd             	and    eax,0xfffffffd
c0010833:	09 d0                	or     eax,edx
c0010835:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001083b:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c0010842:	74 17                	je     c001085b <CPU::detectFeatures()+0x6a5>
c0010844:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c001084a:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c0010850:	83 c8 10             	or     eax,0x10
c0010853:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c0010859:	eb 20                	jmp    c001087b <CPU::detectFeatures()+0x6c5>
c001085b:	e8 3e f9 fe ff       	call   c000019e <hasLegacyFPU>
c0010860:	83 e0 01             	and    eax,0x1
c0010863:	8d 14 00             	lea    edx,[eax+eax*1]
c0010866:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001086c:	83 e0 fd             	and    eax,0xfffffffd
c001086f:	09 d0                	or     eax,edx
c0010871:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010877:	a8 02                	test   al,0x2
c0010879:	75 c9                	jne    c0010844 <CPU::detectFeatures()+0x68e>
c001087b:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0010882:	83 c4 2c             	add    esp,0x2c
c0010885:	5b                   	pop    ebx
c0010886:	5e                   	pop    esi
c0010887:	5f                   	pop    edi
c0010888:	5d                   	pop    ebp
c0010889:	c3                   	ret    

c001088a <CPU::setupSMEP()>:
c001088a:	0f 20 e0             	mov    eax,cr4
c001088d:	0d 00 00 10 00       	or     eax,0x100000
c0010892:	0f 22 e0             	mov    cr4,eax
c0010895:	c3                   	ret    

c0010896 <CPU::setupUMIP()>:
c0010896:	0f 20 e0             	mov    eax,cr4
c0010899:	80 cc 08             	or     ah,0x8
c001089c:	0f 22 e0             	mov    cr4,eax
c001089f:	c3                   	ret    

c00108a0 <CPU::setupTSC()>:
c00108a0:	0f 20 e0             	mov    eax,cr4
c00108a3:	83 c8 04             	or     eax,0x4
c00108a6:	0f 22 e0             	mov    cr4,eax
c00108a9:	c3                   	ret    

c00108aa <CPU::setupLargePages()>:
c00108aa:	0f 20 e0             	mov    eax,cr4
c00108ad:	83 c8 10             	or     eax,0x10
c00108b0:	0f 22 e0             	mov    cr4,eax
c00108b3:	c3                   	ret    

c00108b4 <CPU::setupPAT()>:
c00108b4:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00108b9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00108c0:	74 2c                	je     c00108ee <CPU::setupPAT()+0x3a>
c00108c2:	53                   	push   ebx
c00108c3:	83 ec 10             	sub    esp,0x10
c00108c6:	68 77 02 00 00       	push   0x277
c00108cb:	50                   	push   eax
c00108cc:	e8 11 68 ff ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c00108d1:	83 e2 f8             	and    edx,0xfffffff8
c00108d4:	83 ca 01             	or     edx,0x1
c00108d7:	52                   	push   edx
c00108d8:	50                   	push   eax
c00108d9:	68 77 02 00 00       	push   0x277
c00108de:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00108e4:	e8 25 68 ff ff       	call   c000710e <Computer::wrmsr(unsigned int, unsigned long long)>
c00108e9:	83 c4 28             	add    esp,0x28
c00108ec:	5b                   	pop    ebx
c00108ed:	c3                   	ret    
c00108ee:	c3                   	ret    
c00108ef:	90                   	nop

c00108f0 <CPU::setupMTRR()>:
c00108f0:	c3                   	ret    
c00108f1:	90                   	nop

c00108f2 <CPU::setupGlobalPages()>:
c00108f2:	0f 20 e0             	mov    eax,cr4
c00108f5:	0c 80                	or     al,0x80
c00108f7:	0f 22 e0             	mov    cr4,eax
c00108fa:	c3                   	ret    
c00108fb:	90                   	nop

c00108fc <CPU::allowUsermodeDataAccess()>:
c00108fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010900:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010907:	74 03                	je     c001090c <CPU::allowUsermodeDataAccess()+0x10>
c0010909:	0f 01 cb             	stac   
c001090c:	c3                   	ret    
c001090d:	90                   	nop

c001090e <CPU::prohibitUsermodeDataAccess()>:
c001090e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010912:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010919:	74 03                	je     c001091e <CPU::prohibitUsermodeDataAccess()+0x10>
c001091b:	0f 01 ca             	clac   
c001091e:	c3                   	ret    
c001091f:	90                   	nop

c0010920 <CPU::setupSMAP()>:
c0010920:	0f 20 e0             	mov    eax,cr4
c0010923:	0d 00 00 20 00       	or     eax,0x200000
c0010928:	0f 22 e0             	mov    cr4,eax
c001092b:	eb e1                	jmp    c001090e <CPU::prohibitUsermodeDataAccess()>
c001092d:	90                   	nop

c001092e <CPU::setupFeatures()>:
c001092e:	53                   	push   ebx
c001092f:	83 ec 08             	sub    esp,0x8
c0010932:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010936:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c001093d:	74 18                	je     c0010957 <CPU::setupFeatures()+0x29>
c001093f:	83 ec 0c             	sub    esp,0xc
c0010942:	68 5d 1d 02 c0       	push   0xc0021d5d
c0010947:	e8 be 9f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001094c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001094f:	e8 42 ff ff ff       	call   c0010896 <CPU::setupUMIP()>
c0010954:	83 c4 10             	add    esp,0x10
c0010957:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c001095e:	74 18                	je     c0010978 <CPU::setupFeatures()+0x4a>
c0010960:	83 ec 0c             	sub    esp,0xc
c0010963:	68 67 1d 02 c0       	push   0xc0021d67
c0010968:	e8 9d 9f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001096d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010970:	e8 2b ff ff ff       	call   c00108a0 <CPU::setupTSC()>
c0010975:	83 c4 10             	add    esp,0x10
c0010978:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c001097f:	74 18                	je     c0010999 <CPU::setupFeatures()+0x6b>
c0010981:	83 ec 0c             	sub    esp,0xc
c0010984:	68 70 1d 02 c0       	push   0xc0021d70
c0010989:	e8 7c 9f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001098e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010991:	e8 14 ff ff ff       	call   c00108aa <CPU::setupLargePages()>
c0010996:	83 c4 10             	add    esp,0x10
c0010999:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c00109a0:	74 18                	je     c00109ba <CPU::setupFeatures()+0x8c>
c00109a2:	83 ec 0c             	sub    esp,0xc
c00109a5:	68 79 1d 02 c0       	push   0xc0021d79
c00109aa:	e8 5b 9f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00109af:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109b2:	e8 3b ff ff ff       	call   c00108f2 <CPU::setupGlobalPages()>
c00109b7:	83 c4 10             	add    esp,0x10
c00109ba:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c00109c1:	74 18                	je     c00109db <CPU::setupFeatures()+0xad>
c00109c3:	83 ec 0c             	sub    esp,0xc
c00109c6:	68 8b 1d 02 c0       	push   0xc0021d8b
c00109cb:	e8 3a 9f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00109d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109d3:	e8 dc fe ff ff       	call   c00108b4 <CPU::setupPAT()>
c00109d8:	83 c4 10             	add    esp,0x10
c00109db:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c00109e2:	74 11                	je     c00109f5 <CPU::setupFeatures()+0xc7>
c00109e4:	c7 44 24 10 94 1d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021d94
c00109ec:	83 c4 08             	add    esp,0x8
c00109ef:	5b                   	pop    ebx
c00109f0:	e9 15 9f ff ff       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>
c00109f5:	83 c4 08             	add    esp,0x8
c00109f8:	5b                   	pop    ebx
c00109f9:	c3                   	ret    

c00109fa <CPU::open(int, int, void*)>:
c00109fa:	55                   	push   ebp
c00109fb:	57                   	push   edi
c00109fc:	56                   	push   esi
c00109fd:	53                   	push   ebx
c00109fe:	83 ec 18             	sub    esp,0x18
c0010a01:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010a05:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0010a09:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010a0d:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010a13:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c0010a19:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c0010a1f:	50                   	push   eax
c0010a20:	e8 b9 69 ff ff       	call   c00073de <GDT::setup()>
c0010a25:	83 c4 0c             	add    esp,0xc
c0010a28:	6a 00                	push   0x0
c0010a2a:	68 ef be ad de       	push   0xdeadbeef
c0010a2f:	55                   	push   ebp
c0010a30:	e8 3b 85 ff ff       	call   c0008f70 <TSS::setup(unsigned long, unsigned long)>
c0010a35:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010a38:	e8 13 85 ff ff       	call   c0008f50 <TSS::flush()>
c0010a3d:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a46:	e8 f7 6b ff ff       	call   c0007642 <IDT::setup()>
c0010a4b:	b8 00 04 00 00       	mov    eax,0x400
c0010a50:	0f 23 f8             	mov    db7,eax
c0010a53:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010a5d:	e8 80 73 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0010a62:	83 c4 10             	add    esp,0x10
c0010a65:	85 f6                	test   esi,esi
c0010a67:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010a6d:	89 38                	mov    DWORD PTR [eax],edi
c0010a6f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010a75:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010a78:	74 10                	je     c0010a8a <CPU::open(int, int, void*)+0x90>
c0010a7a:	50                   	push   eax
c0010a7b:	50                   	push   eax
c0010a7c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010a82:	56                   	push   esi
c0010a83:	e8 04 8e ff ff       	call   c000988c <VAS::setCPUSpecific(unsigned long)>
c0010a88:	eb 0d                	jmp    c0010a97 <CPU::open(int, int, void*)+0x9d>
c0010a8a:	83 ec 0c             	sub    esp,0xc
c0010a8d:	68 9e 1d 02 c0       	push   0xc0021d9e
c0010a92:	e8 72 08 00 00       	call   c0011309 <KePanic(char const*)>
c0010a97:	83 c4 10             	add    esp,0x10
c0010a9a:	83 ec 0c             	sub    esp,0xc
c0010a9d:	68 ac 1d 02 c0       	push   0xc0021dac
c0010aa2:	e8 8e 01 00 00       	call   c0010c35 <KeSetBootMessage(char const*)>
c0010aa7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010aaa:	e8 07 f7 ff ff       	call   c00101b6 <CPU::detectFeatures()>
c0010aaf:	c7 04 24 cf 1d 02 c0 	mov    DWORD PTR [esp],0xc0021dcf
c0010ab6:	e8 7a 01 00 00       	call   c0010c35 <KeSetBootMessage(char const*)>
c0010abb:	e8 07 72 00 00       	call   c0017cc7 <HalInitialise()>
c0010ac0:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c0010ac5:	83 e0 10             	and    eax,0x10
c0010ac8:	83 f8 01             	cmp    eax,0x1
c0010acb:	19 c0                	sbb    eax,eax
c0010acd:	83 e0 46             	and    eax,0x46
c0010ad0:	83 c0 1e             	add    eax,0x1e
c0010ad3:	89 04 24             	mov    DWORD PTR [esp],eax
c0010ad6:	e8 c2 d6 ff ff       	call   c000e19d <setupTimer(int)>
c0010adb:	83 c4 10             	add    esp,0x10
c0010ade:	f6 05 d0 5e 02 c0 20 	test   BYTE PTR ds:0xc0025ed0,0x20
c0010ae5:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010aeb:	74 0c                	je     c0010af9 <CPU::open(int, int, void*)+0xff>
c0010aed:	83 ec 0c             	sub    esp,0xc
c0010af0:	53                   	push   ebx
c0010af1:	e8 38 fe ff ff       	call   c001092e <CPU::setupFeatures()>
c0010af6:	83 c4 10             	add    esp,0x10
c0010af9:	83 c4 0c             	add    esp,0xc
c0010afc:	31 c0                	xor    eax,eax
c0010afe:	5b                   	pop    ebx
c0010aff:	5e                   	pop    esi
c0010b00:	5f                   	pop    edi
c0010b01:	5d                   	pop    ebp
c0010b02:	c3                   	ret    

c0010b03 <KeInitialiseAtexit()>:
c0010b03:	83 ec 10             	sub    esp,0x10
c0010b06:	6a 60                	push   0x60
c0010b08:	6a 00                	push   0x0
c0010b0a:	68 20 8e 02 c0       	push   0xc0028e20
c0010b0f:	c7 05 a0 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028da0,0x0
c0010b19:	e8 d2 f9 fe ff       	call   c00004f0 <memset>
c0010b1e:	83 c4 1c             	add    esp,0x1c
c0010b21:	c3                   	ret    

c0010b22 <KeRegisterAtexit(void (*)(void*), void*)>:
c0010b22:	a1 a0 8d 02 c0       	mov    eax,ds:0xc0028da0
c0010b27:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010b2b:	89 14 85 20 8e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd71e0],edx
c0010b32:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b36:	89 14 85 c0 8d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7240],edx
c0010b3d:	40                   	inc    eax
c0010b3e:	a3 a0 8d 02 c0       	mov    ds:0xc0028da0,eax
c0010b43:	83 f8 17             	cmp    eax,0x17
c0010b46:	7e 0d                	jle    c0010b55 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010b48:	c7 44 24 04 10 1e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021e10
c0010b50:	e9 b4 07 00 00       	jmp    c0011309 <KePanic(char const*)>
c0010b55:	c3                   	ret    

c0010b56 <KeExecuteAtexit()>:
c0010b56:	53                   	push   ebx
c0010b57:	31 db                	xor    ebx,ebx
c0010b59:	83 ec 08             	sub    esp,0x8
c0010b5c:	39 1d a0 8d 02 c0    	cmp    DWORD PTR ds:0xc0028da0,ebx
c0010b62:	7e 50                	jle    c0010bb4 <KeExecuteAtexit()+0x5e>
c0010b64:	8b 04 9d 20 8e 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd71e0]
c0010b6b:	85 c0                	test   eax,eax
c0010b6d:	74 42                	je     c0010bb1 <KeExecuteAtexit()+0x5b>
c0010b6f:	51                   	push   ecx
c0010b70:	50                   	push   eax
c0010b71:	53                   	push   ebx
c0010b72:	68 29 1e 02 c0       	push   0xc0021e29
c0010b77:	e8 8e 9d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010b7c:	58                   	pop    eax
c0010b7d:	ff 34 9d c0 8d 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7240]
c0010b84:	ff 14 9d 20 8e 02 c0 	call   DWORD PTR [ebx*4-0x3ffd71e0]
c0010b8b:	c7 04 24 4b 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e4b
c0010b92:	e8 73 9d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010b97:	c7 04 24 ab 2f 02 c0 	mov    DWORD PTR [esp],0xc0022fab
c0010b9e:	c7 04 9d 20 8e 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd71e0],0x0
c0010ba9:	e8 5c 9d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010bae:	83 c4 10             	add    esp,0x10
c0010bb1:	43                   	inc    ebx
c0010bb2:	eb a8                	jmp    c0010b5c <KeExecuteAtexit()+0x6>
c0010bb4:	83 c4 08             	add    esp,0x8
c0010bb7:	5b                   	pop    ebx
c0010bb8:	c3                   	ret    

c0010bb9 <KeDisplaySplashScreen()>:
c0010bb9:	55                   	push   ebp
c0010bba:	bd 05 00 00 00       	mov    ebp,0x5
c0010bbf:	57                   	push   edi
c0010bc0:	bf 0a 00 00 00       	mov    edi,0xa
c0010bc5:	56                   	push   esi
c0010bc6:	31 f6                	xor    esi,esi
c0010bc8:	53                   	push   ebx
c0010bc9:	31 db                	xor    ebx,ebx
c0010bcb:	83 ec 0c             	sub    esp,0xc
c0010bce:	0f b6 96 00 32 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdce00]
c0010bd5:	85 d2                	test   edx,edx
c0010bd7:	89 d0                	mov    eax,edx
c0010bd9:	74 52                	je     c0010c2d <KeDisplaySplashScreen()+0x74>
c0010bdb:	80 bb 36 32 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdcdca],0xdb
c0010be2:	75 13                	jne    c0010bf7 <KeDisplaySplashScreen()+0x3e>
c0010be4:	0f b6 8b 35 32 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdcdcb]
c0010beb:	83 e1 fe             	and    ecx,0xfffffffe
c0010bee:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010bf4:	75 01                	jne    c0010bf7 <KeDisplaySplashScreen()+0x3e>
c0010bf6:	47                   	inc    edi
c0010bf7:	83 fa 0d             	cmp    edx,0xd
c0010bfa:	74 28                	je     c0010c24 <KeDisplaySplashScreen()+0x6b>
c0010bfc:	83 fa 0a             	cmp    edx,0xa
c0010bff:	75 0a                	jne    c0010c0b <KeDisplaySplashScreen()+0x52>
c0010c01:	45                   	inc    ebp
c0010c02:	bf 0a 00 00 00       	mov    edi,0xa
c0010c07:	31 db                	xor    ebx,ebx
c0010c09:	eb 19                	jmp    c0010c24 <KeDisplaySplashScreen()+0x6b>
c0010c0b:	83 ec 0c             	sub    esp,0xc
c0010c0e:	0f be c0             	movsx  eax,al
c0010c11:	55                   	push   ebp
c0010c12:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010c15:	43                   	inc    ebx
c0010c16:	52                   	push   edx
c0010c17:	6a 00                	push   0x0
c0010c19:	6a 0e                	push   0xe
c0010c1b:	50                   	push   eax
c0010c1c:	e8 23 7d 00 00       	call   c0018944 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010c21:	83 c4 20             	add    esp,0x20
c0010c24:	46                   	inc    esi
c0010c25:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010c2b:	75 a1                	jne    c0010bce <KeDisplaySplashScreen()+0x15>
c0010c2d:	83 c4 0c             	add    esp,0xc
c0010c30:	5b                   	pop    ebx
c0010c31:	5e                   	pop    esi
c0010c32:	5f                   	pop    edi
c0010c33:	5d                   	pop    ebp
c0010c34:	c3                   	ret    

c0010c35 <KeSetBootMessage(char const*)>:
c0010c35:	57                   	push   edi
c0010c36:	56                   	push   esi
c0010c37:	53                   	push   ebx
c0010c38:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010c3e:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010c45:	68 9e 00 00 00       	push   0x9e
c0010c4a:	6a 00                	push   0x0
c0010c4c:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010c50:	56                   	push   esi
c0010c51:	e8 9a f8 fe ff       	call   c00004f0 <memset>
c0010c56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c59:	e8 22 f9 fe ff       	call   c0000580 <strlen>
c0010c5e:	ba 50 00 00 00       	mov    edx,0x50
c0010c63:	83 c4 10             	add    esp,0x10
c0010c66:	31 c9                	xor    ecx,ecx
c0010c68:	29 c2                	sub    edx,eax
c0010c6a:	83 e2 fe             	and    edx,0xfffffffe
c0010c6d:	01 f2                	add    edx,esi
c0010c6f:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010c74:	84 c0                	test   al,al
c0010c76:	74 0a                	je     c0010c82 <KeSetBootMessage(char const*)+0x4d>
c0010c78:	80 cc 0f             	or     ah,0xf
c0010c7b:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010c7f:	41                   	inc    ecx
c0010c80:	eb ed                	jmp    c0010c6f <KeSetBootMessage(char const*)+0x3a>
c0010c82:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010c87:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010c8c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c8e:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010c94:	5b                   	pop    ebx
c0010c95:	5e                   	pop    esi
c0010c96:	5f                   	pop    edi
c0010c97:	c3                   	ret    

c0010c98 <Krnl::handlePowerButton()>:
c0010c98:	83 ec 0c             	sub    esp,0xc
c0010c9b:	e8 c4 06 00 00       	call   c0011364 <KeHandlePowerButton()>
c0010ca0:	90                   	nop
c0010ca1:	83 c4 0c             	add    esp,0xc
c0010ca4:	c3                   	ret    
c0010ca5:	8d 76 00             	lea    esi,[esi+0x0]

c0010ca8 <Krnl::handleSleepButton()>:
c0010ca8:	83 ec 0c             	sub    esp,0xc
c0010cab:	e8 e9 06 00 00       	call   c0011399 <KeHandleSleepButton()>
c0010cb0:	90                   	nop
c0010cb1:	83 c4 0c             	add    esp,0xc
c0010cb4:	c3                   	ret    
c0010cb5:	90                   	nop

c0010cb6 <EnvVarContainer::getEnv(char const*)>:
c0010cb6:	57                   	push   edi
c0010cb7:	56                   	push   esi
c0010cb8:	53                   	push   ebx
c0010cb9:	31 db                	xor    ebx,ebx
c0010cbb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010cbf:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010cc1:	7e 2b                	jle    c0010cee <EnvVarContainer::getEnv(char const*)+0x38>
c0010cc3:	50                   	push   eax
c0010cc4:	50                   	push   eax
c0010cc5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010cc8:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010ccf:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010cd2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010cd6:	e8 a5 fa fe ff       	call   c0000780 <strcmp>
c0010cdb:	83 c4 10             	add    esp,0x10
c0010cde:	85 c0                	test   eax,eax
c0010ce0:	75 09                	jne    c0010ceb <EnvVarContainer::getEnv(char const*)+0x35>
c0010ce2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010ce5:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010ce9:	eb 05                	jmp    c0010cf0 <EnvVarContainer::getEnv(char const*)+0x3a>
c0010ceb:	43                   	inc    ebx
c0010cec:	eb d1                	jmp    c0010cbf <EnvVarContainer::getEnv(char const*)+0x9>
c0010cee:	31 c0                	xor    eax,eax
c0010cf0:	5b                   	pop    ebx
c0010cf1:	5e                   	pop    esi
c0010cf2:	5f                   	pop    edi
c0010cf3:	c3                   	ret    

c0010cf4 <EnvVarContainer::setEnv(char const*, char const*)>:
c0010cf4:	55                   	push   ebp
c0010cf5:	57                   	push   edi
c0010cf6:	56                   	push   esi
c0010cf7:	53                   	push   ebx
c0010cf8:	83 ec 28             	sub    esp,0x28
c0010cfb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010cff:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010d03:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010d07:	56                   	push   esi
c0010d08:	e8 73 f8 fe ff       	call   c0000580 <strlen>
c0010d0d:	40                   	inc    eax
c0010d0e:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d11:	e8 bd 6d ff ff       	call   c0007ad3 <malloc>
c0010d16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d19:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010d1d:	e8 5e f8 fe ff       	call   c0000580 <strlen>
c0010d22:	40                   	inc    eax
c0010d23:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d26:	e8 a8 6d ff ff       	call   c0007ad3 <malloc>
c0010d2b:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d2e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010d32:	e8 49 f8 fe ff       	call   c0000580 <strlen>
c0010d37:	83 c4 0c             	add    esp,0xc
c0010d3a:	40                   	inc    eax
c0010d3b:	50                   	push   eax
c0010d3c:	6a 00                	push   0x0
c0010d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010d42:	e8 a9 f7 fe ff       	call   c00004f0 <memset>
c0010d47:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d4a:	e8 31 f8 fe ff       	call   c0000580 <strlen>
c0010d4f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010d53:	8d 48 01             	lea    ecx,[eax+0x1]
c0010d56:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d5b:	89 de                	mov    esi,ebx
c0010d5d:	e8 1e f8 fe ff       	call   c0000580 <strlen>
c0010d62:	83 c4 0c             	add    esp,0xc
c0010d65:	40                   	inc    eax
c0010d66:	50                   	push   eax
c0010d67:	6a 00                	push   0x0
c0010d69:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010d6d:	e8 7e f7 fe ff       	call   c00004f0 <memset>
c0010d72:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d75:	e8 06 f8 fe ff       	call   c0000580 <strlen>
c0010d7a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010d7e:	8d 48 01             	lea    ecx,[eax+0x1]
c0010d81:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d83:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010d86:	40                   	inc    eax
c0010d87:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010d8a:	c1 e0 03             	shl    eax,0x3
c0010d8d:	5a                   	pop    edx
c0010d8e:	59                   	pop    ecx
c0010d8f:	50                   	push   eax
c0010d90:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010d93:	e8 27 6d ff ff       	call   c0007abf <realloc>
c0010d98:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010d9b:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010d9f:	b9 08 00 00 00       	mov    ecx,0x8
c0010da4:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010da7:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010dab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010dad:	83 c4 2c             	add    esp,0x2c
c0010db0:	5b                   	pop    ebx
c0010db1:	5e                   	pop    esi
c0010db2:	5f                   	pop    edi
c0010db3:	5d                   	pop    ebp
c0010db4:	c3                   	ret    
c0010db5:	90                   	nop

c0010db6 <EnvVarContainer::deleteEnv(char const*)>:
c0010db6:	c3                   	ret    
c0010db7:	90                   	nop

c0010db8 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010db8:	55                   	push   ebp
c0010db9:	57                   	push   edi
c0010dba:	56                   	push   esi
c0010dbb:	53                   	push   ebx
c0010dbc:	81 ec 38 01 00 00    	sub    esp,0x138
c0010dc2:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010dc9:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010dd0:	68 14 01 00 00       	push   0x114
c0010dd5:	e8 f9 6c ff ff       	call   c0007ad3 <malloc>
c0010dda:	83 c4 0c             	add    esp,0xc
c0010ddd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010de0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010de7:	89 c3                	mov    ebx,eax
c0010de9:	50                   	push   eax
c0010dea:	e8 55 aa ff ff       	call   c000b844 <File::File(char const*, Process*)>
c0010def:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010df2:	e8 d9 ad ff ff       	call   c000bbd0 <File::exists()>
c0010df7:	83 c4 10             	add    esp,0x10
c0010dfa:	84 c0                	test   al,al
c0010dfc:	75 31                	jne    c0010e2f <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0010dfe:	50                   	push   eax
c0010dff:	50                   	push   eax
c0010e00:	6a 12                	push   0x12
c0010e02:	53                   	push   ebx
c0010e03:	e8 04 ab ff ff       	call   c000b90c <File::open(FileOpenMode)>
c0010e08:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010e0a:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0010e0d:	89 34 24             	mov    DWORD PTR [esp],esi
c0010e10:	e8 6b f7 fe ff       	call   c0000580 <strlen>
c0010e15:	5a                   	pop    edx
c0010e16:	8d 54 24 20          	lea    edx,[esp+0x20]
c0010e1a:	52                   	push   edx
c0010e1b:	31 d2                	xor    edx,edx
c0010e1d:	56                   	push   esi
c0010e1e:	52                   	push   edx
c0010e1f:	50                   	push   eax
c0010e20:	53                   	push   ebx
c0010e21:	ff d7                	call   edi
c0010e23:	83 c4 14             	add    esp,0x14
c0010e26:	53                   	push   ebx
c0010e27:	e8 3e ab ff ff       	call   c000b96a <File::close()>
c0010e2c:	83 c4 10             	add    esp,0x10
c0010e2f:	56                   	push   esi
c0010e30:	31 f6                	xor    esi,esi
c0010e32:	68 00 01 00 00       	push   0x100
c0010e37:	6a 00                	push   0x0
c0010e39:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010e3d:	50                   	push   eax
c0010e3e:	e8 ad f6 fe ff       	call   c00004f0 <memset>
c0010e43:	5f                   	pop    edi
c0010e44:	58                   	pop    eax
c0010e45:	6a 01                	push   0x1
c0010e47:	53                   	push   ebx
c0010e48:	e8 bf aa ff ff       	call   c000b90c <File::open(FileOpenMode)>
c0010e4d:	83 c4 10             	add    esp,0x10
c0010e50:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010e58:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010e60:	83 ec 0c             	sub    esp,0xc
c0010e63:	8d 54 24 20          	lea    edx,[esp+0x20]
c0010e67:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010e69:	52                   	push   edx
c0010e6a:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c0010e6e:	51                   	push   ecx
c0010e6f:	6a 00                	push   0x0
c0010e71:	6a 01                	push   0x1
c0010e73:	53                   	push   ebx
c0010e74:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010e77:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c0010e7c:	83 c4 20             	add    esp,0x20
c0010e7f:	85 c0                	test   eax,eax
c0010e81:	89 c1                	mov    ecx,eax
c0010e83:	0f 84 36 01 00 00    	je     c0010fbf <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c0010e89:	83 f8 0d             	cmp    eax,0xd
c0010e8c:	0f 84 22 01 00 00    	je     c0010fb4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010e92:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010e97:	0f 84 f0 00 00 00    	je     c0010f8d <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c0010e9d:	83 f8 0a             	cmp    eax,0xa
c0010ea0:	74 13                	je     c0010eb5 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010ea2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010ea7:	74 0c                	je     c0010eb5 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010ea9:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010eaf:	0f 8e f6 00 00 00    	jle    c0010fab <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c0010eb5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010eb9:	83 ec 0c             	sub    esp,0xc
c0010ebc:	8d 78 01             	lea    edi,[eax+0x1]
c0010ebf:	57                   	push   edi
c0010ec0:	e8 0e 6c ff ff       	call   c0007ad3 <malloc>
c0010ec5:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010ec9:	8d 56 04             	lea    edx,[esi+0x4]
c0010ecc:	89 14 24             	mov    DWORD PTR [esp],edx
c0010ecf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010ed3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010ed7:	e8 f7 6b ff ff       	call   c0007ad3 <malloc>
c0010edc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010ee0:	83 c4 0c             	add    esp,0xc
c0010ee3:	57                   	push   edi
c0010ee4:	6a 00                	push   0x0
c0010ee6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010eea:	e8 01 f6 fe ff       	call   c00004f0 <memset>
c0010eef:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010ef3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010ef7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010efb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010efd:	83 c4 0c             	add    esp,0xc
c0010f00:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010f04:	52                   	push   edx
c0010f05:	6a 00                	push   0x0
c0010f07:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010f0b:	e8 e0 f5 fe ff       	call   c00004f0 <memset>
c0010f10:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010f14:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010f18:	89 34 24             	mov    DWORD PTR [esp],esi
c0010f1b:	e8 60 f6 fe ff       	call   c0000580 <strlen>
c0010f20:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0010f24:	89 c1                	mov    ecx,eax
c0010f26:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f28:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010f2b:	83 c4 10             	add    esp,0x10
c0010f2e:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0010f31:	40                   	inc    eax
c0010f32:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010f35:	85 d2                	test   edx,edx
c0010f37:	75 0c                	jne    c0010f45 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c0010f39:	83 ec 0c             	sub    esp,0xc
c0010f3c:	6a 08                	push   0x8
c0010f3e:	e8 90 6b ff ff       	call   c0007ad3 <malloc>
c0010f43:	eb 0c                	jmp    c0010f51 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c0010f45:	51                   	push   ecx
c0010f46:	51                   	push   ecx
c0010f47:	c1 e0 03             	shl    eax,0x3
c0010f4a:	50                   	push   eax
c0010f4b:	52                   	push   edx
c0010f4c:	e8 6e 6b ff ff       	call   c0007abf <realloc>
c0010f51:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010f54:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010f57:	83 c4 10             	add    esp,0x10
c0010f5a:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0010f5d:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010f61:	b9 08 00 00 00       	mov    ecx,0x8
c0010f66:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010f6a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f6c:	50                   	push   eax
c0010f6d:	31 f6                	xor    esi,esi
c0010f6f:	68 00 01 00 00       	push   0x100
c0010f74:	6a 00                	push   0x0
c0010f76:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010f7a:	50                   	push   eax
c0010f7b:	e8 70 f5 fe ff       	call   c00004f0 <memset>
c0010f80:	83 c4 10             	add    esp,0x10
c0010f83:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010f8b:	eb 27                	jmp    c0010fb4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010f8d:	83 f8 3d             	cmp    eax,0x3d
c0010f90:	74 1e                	je     c0010fb0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0010f92:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010f98:	7f 07                	jg     c0010fa1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c0010f9a:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c0010f9e:	46                   	inc    esi
c0010f9f:	eb 13                	jmp    c0010fb4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010fa1:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0010fa9:	eb 09                	jmp    c0010fb4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010fab:	83 f8 3d             	cmp    eax,0x3d
c0010fae:	75 ea                	jne    c0010f9a <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c0010fb0:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0010fb4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010fb9:	0f 85 99 fe ff ff    	jne    c0010e58 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0010fbf:	83 ec 0c             	sub    esp,0xc
c0010fc2:	53                   	push   ebx
c0010fc3:	e8 a2 a9 ff ff       	call   c000b96a <File::close()>
c0010fc8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010fca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010fcd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010fd0:	81 c4 3c 01 00 00    	add    esp,0x13c
c0010fd6:	5b                   	pop    ebx
c0010fd7:	5e                   	pop    esi
c0010fd8:	5f                   	pop    edi
c0010fd9:	5d                   	pop    ebp
c0010fda:	c3                   	ret    
c0010fdb:	90                   	nop

c0010fdc <EnvVarContainer::__loadSystem()>:
c0010fdc:	83 ec 10             	sub    esp,0x10
c0010fdf:	68 60 33 02 c0       	push   0xc0023360
c0010fe4:	68 50 1e 02 c0       	push   0xc0021e50
c0010fe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fed:	e8 c6 fd ff ff       	call   c0010db8 <EnvVarContainer::loadFrom(char const*, char const*)>
c0010ff2:	83 c4 1c             	add    esp,0x1c
c0010ff5:	c3                   	ret    

c0010ff6 <EnvVarContainer::__loadUser()>:
c0010ff6:	c3                   	ret    
c0010ff7:	90                   	nop

c0010ff8 <EnvVarContainer::EnvVarContainer(Process*)>:
c0010ff8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ffc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011002:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011006:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001100a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001100d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011011:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011018:	90                   	nop
c0011019:	c3                   	ret    

c001101a <EnvVarContainer::~EnvVarContainer()>:
c001101a:	83 ec 0c             	sub    esp,0xc
c001101d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011021:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011024:	85 c0                	test   eax,eax
c0011026:	74 1d                	je     c0011045 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0011028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001102c:	8b 00                	mov    eax,DWORD PTR [eax]
c001102e:	85 c0                	test   eax,eax
c0011030:	74 13                	je     c0011045 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0011032:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011036:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011039:	83 ec 0c             	sub    esp,0xc
c001103c:	50                   	push   eax
c001103d:	e8 a1 6a ff ff       	call   c0007ae3 <free>
c0011042:	83 c4 10             	add    esp,0x10
c0011045:	90                   	nop
c0011046:	83 c4 0c             	add    esp,0xc
c0011049:	c3                   	ret    

c001104a <KeGetEnv(Process*, char const*)>:
c001104a:	53                   	push   ebx
c001104b:	83 ec 08             	sub    esp,0x8
c001104e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011052:	39 05 f0 96 02 c0    	cmp    DWORD PTR ds:0xc00296f0,eax
c0011058:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001105c:	74 04                	je     c0011062 <KeGetEnv(Process*, char const*)+0x18>
c001105e:	85 c0                	test   eax,eax
c0011060:	75 0b                	jne    c001106d <KeGetEnv(Process*, char const*)+0x23>
c0011062:	a1 80 8e 02 c0       	mov    eax,ds:0xc0028e80
c0011067:	85 c0                	test   eax,eax
c0011069:	75 19                	jne    c0011084 <KeGetEnv(Process*, char const*)+0x3a>
c001106b:	eb 27                	jmp    c0011094 <KeGetEnv(Process*, char const*)+0x4a>
c001106d:	52                   	push   edx
c001106e:	52                   	push   edx
c001106f:	53                   	push   ebx
c0011070:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0011076:	e8 3b fc ff ff       	call   c0010cb6 <EnvVarContainer::getEnv(char const*)>
c001107b:	83 c4 10             	add    esp,0x10
c001107e:	85 c0                	test   eax,eax
c0011080:	75 28                	jne    c00110aa <KeGetEnv(Process*, char const*)+0x60>
c0011082:	eb de                	jmp    c0011062 <KeGetEnv(Process*, char const*)+0x18>
c0011084:	52                   	push   edx
c0011085:	52                   	push   edx
c0011086:	53                   	push   ebx
c0011087:	50                   	push   eax
c0011088:	e8 29 fc ff ff       	call   c0010cb6 <EnvVarContainer::getEnv(char const*)>
c001108d:	83 c4 10             	add    esp,0x10
c0011090:	85 c0                	test   eax,eax
c0011092:	75 16                	jne    c00110aa <KeGetEnv(Process*, char const*)+0x60>
c0011094:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0011098:	a1 84 8e 02 c0       	mov    eax,ds:0xc0028e84
c001109d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00110a1:	83 c4 08             	add    esp,0x8
c00110a4:	5b                   	pop    ebx
c00110a5:	e9 0c fc ff ff       	jmp    c0010cb6 <EnvVarContainer::getEnv(char const*)>
c00110aa:	83 c4 08             	add    esp,0x8
c00110ad:	5b                   	pop    ebx
c00110ae:	c3                   	ret    

c00110af <KeSetEnvSystem(char const*, char const*)>:
c00110af:	83 ec 10             	sub    esp,0x10
c00110b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00110b6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00110ba:	ff 35 84 8e 02 c0    	push   DWORD PTR ds:0xc0028e84
c00110c0:	e8 2f fc ff ff       	call   c0010cf4 <EnvVarContainer::setEnv(char const*, char const*)>
c00110c5:	83 c4 1c             	add    esp,0x1c
c00110c8:	c3                   	ret    

c00110c9 <KeSetEnvUser(char const*, char const*)>:
c00110c9:	a1 80 8e 02 c0       	mov    eax,ds:0xc0028e80
c00110ce:	85 c0                	test   eax,eax
c00110d0:	74 15                	je     c00110e7 <KeSetEnvUser(char const*, char const*)+0x1e>
c00110d2:	83 ec 10             	sub    esp,0x10
c00110d5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00110d9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00110dd:	50                   	push   eax
c00110de:	e8 11 fc ff ff       	call   c0010cf4 <EnvVarContainer::setEnv(char const*, char const*)>
c00110e3:	83 c4 1c             	add    esp,0x1c
c00110e6:	c3                   	ret    
c00110e7:	c3                   	ret    

c00110e8 <KeSetEnvProcess(Process*, char const*, char const*)>:
c00110e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110ec:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00110f2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00110f6:	e9 f9 fb ff ff       	jmp    c0010cf4 <EnvVarContainer::setEnv(char const*, char const*)>

c00110fb <KeDeleteEnvSystem(char const*)>:
c00110fb:	c3                   	ret    

c00110fc <KeDeleteEnvUser(char const*)>:
c00110fc:	c3                   	ret    

c00110fd <KeDeleteEnvProcess(Process*, char const*)>:
c00110fd:	c3                   	ret    

c00110fe <KeNewProcessEnv(Process*)>:
c00110fe:	83 ec 28             	sub    esp,0x28
c0011101:	6a 0c                	push   0xc
c0011103:	e8 cb 69 ff ff       	call   c0007ad3 <malloc>
c0011108:	5a                   	pop    edx
c0011109:	59                   	pop    ecx
c001110a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001110e:	50                   	push   eax
c001110f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011113:	e8 e0 fe ff ff       	call   c0010ff8 <EnvVarContainer::EnvVarContainer(Process*)>
c0011118:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001111c:	83 c4 2c             	add    esp,0x2c
c001111f:	c3                   	ret    

c0011120 <KeCopyProcessEnv(Process*, Process*)>:
c0011120:	57                   	push   edi
c0011121:	56                   	push   esi
c0011122:	53                   	push   ebx
c0011123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011127:	83 ec 0c             	sub    esp,0xc
c001112a:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0011130:	6a 0c                	push   0xc
c0011132:	e8 9c 69 ff ff       	call   c0007ad3 <malloc>
c0011137:	89 c3                	mov    ebx,eax
c0011139:	58                   	pop    eax
c001113a:	5a                   	pop    edx
c001113b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001113f:	53                   	push   ebx
c0011140:	e8 b3 fe ff ff       	call   c0010ff8 <EnvVarContainer::EnvVarContainer(Process*)>
c0011145:	8b 07                	mov    eax,DWORD PTR [edi]
c0011147:	89 03                	mov    DWORD PTR [ebx],eax
c0011149:	c1 e0 03             	shl    eax,0x3
c001114c:	89 04 24             	mov    DWORD PTR [esp],eax
c001114f:	e8 7f 69 ff ff       	call   c0007ad3 <malloc>
c0011154:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0011157:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0011159:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001115c:	89 c7                	mov    edi,eax
c001115e:	c1 e1 03             	shl    ecx,0x3
c0011161:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011163:	83 c4 10             	add    esp,0x10
c0011166:	89 d8                	mov    eax,ebx
c0011168:	5b                   	pop    ebx
c0011169:	5e                   	pop    esi
c001116a:	5f                   	pop    edi
c001116b:	c3                   	ret    

c001116c <KeLoadSystemEnv()>:
c001116c:	53                   	push   ebx
c001116d:	83 ec 14             	sub    esp,0x14
c0011170:	6a 0c                	push   0xc
c0011172:	e8 5c 69 ff ff       	call   c0007ad3 <malloc>
c0011177:	89 c3                	mov    ebx,eax
c0011179:	58                   	pop    eax
c001117a:	5a                   	pop    edx
c001117b:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0011181:	53                   	push   ebx
c0011182:	e8 71 fe ff ff       	call   c0010ff8 <EnvVarContainer::EnvVarContainer(Process*)>
c0011187:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001118a:	89 1d 84 8e 02 c0    	mov    DWORD PTR ds:0xc0028e84,ebx
c0011190:	e8 47 fe ff ff       	call   c0010fdc <EnvVarContainer::__loadSystem()>
c0011195:	83 c4 18             	add    esp,0x18
c0011198:	5b                   	pop    ebx
c0011199:	c3                   	ret    

c001119a <KeLoadUserEnv()>:
c001119a:	53                   	push   ebx
c001119b:	83 ec 14             	sub    esp,0x14
c001119e:	6a 0c                	push   0xc
c00111a0:	e8 2e 69 ff ff       	call   c0007ad3 <malloc>
c00111a5:	89 c3                	mov    ebx,eax
c00111a7:	58                   	pop    eax
c00111a8:	5a                   	pop    edx
c00111a9:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c00111af:	53                   	push   ebx
c00111b0:	e8 43 fe ff ff       	call   c0010ff8 <EnvVarContainer::EnvVarContainer(Process*)>
c00111b5:	89 1d 80 8e 02 c0    	mov    DWORD PTR ds:0xc0028e80,ebx
c00111bb:	83 c4 18             	add    esp,0x18
c00111be:	5b                   	pop    ebx
c00111bf:	c3                   	ret    

c00111c0 <KeFlushEnv()>:
c00111c0:	c3                   	ret    

c00111c1 <KeGetProcessTotalEnvCount(Process*)>:
c00111c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111c5:	8b 15 80 8e 02 c0    	mov    edx,DWORD PTR ds:0xc0028e80
c00111cb:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00111d1:	a1 84 8e 02 c0       	mov    eax,ds:0xc0028e84
c00111d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00111d8:	03 01                	add    eax,DWORD PTR [ecx]
c00111da:	85 d2                	test   edx,edx
c00111dc:	74 02                	je     c00111e0 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c00111de:	03 02                	add    eax,DWORD PTR [edx]
c00111e0:	c3                   	ret    

c00111e1 <KeGetProcessEnvPair(Process*, int)>:
c00111e1:	57                   	push   edi
c00111e2:	56                   	push   esi
c00111e3:	8b 35 80 8e 02 c0    	mov    esi,DWORD PTR ds:0xc0028e80
c00111e9:	53                   	push   ebx
c00111ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00111ee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00111f2:	85 f6                	test   esi,esi
c00111f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00111f8:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00111fe:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011200:	75 16                	jne    c0011218 <KeGetProcessEnvPair(Process*, int)+0x37>
c0011202:	39 c2                	cmp    edx,eax
c0011204:	7c 16                	jl     c001121c <KeGetProcessEnvPair(Process*, int)+0x3b>
c0011206:	8b 0d 84 8e 02 c0    	mov    ecx,DWORD PTR ds:0xc0028e84
c001120c:	8b 31                	mov    esi,DWORD PTR [ecx]
c001120e:	01 c6                	add    esi,eax
c0011210:	39 d6                	cmp    esi,edx
c0011212:	7e 3c                	jle    c0011250 <KeGetProcessEnvPair(Process*, int)+0x6f>
c0011214:	29 c2                	sub    edx,eax
c0011216:	eb 04                	jmp    c001121c <KeGetProcessEnvPair(Process*, int)+0x3b>
c0011218:	39 c2                	cmp    edx,eax
c001121a:	7d 05                	jge    c0011221 <KeGetProcessEnvPair(Process*, int)+0x40>
c001121c:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001121f:	eb 20                	jmp    c0011241 <KeGetProcessEnvPair(Process*, int)+0x60>
c0011221:	8b 3e                	mov    edi,DWORD PTR [esi]
c0011223:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0011226:	39 d1                	cmp    ecx,edx
c0011228:	7e 04                	jle    c001122e <KeGetProcessEnvPair(Process*, int)+0x4d>
c001122a:	29 c2                	sub    edx,eax
c001122c:	eb 10                	jmp    c001123e <KeGetProcessEnvPair(Process*, int)+0x5d>
c001122e:	8b 35 84 8e 02 c0    	mov    esi,DWORD PTR ds:0xc0028e84
c0011234:	03 0e                	add    ecx,DWORD PTR [esi]
c0011236:	39 d1                	cmp    ecx,edx
c0011238:	7e 16                	jle    c0011250 <KeGetProcessEnvPair(Process*, int)+0x6f>
c001123a:	29 c2                	sub    edx,eax
c001123c:	29 fa                	sub    edx,edi
c001123e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0011241:	8d 14 d0             	lea    edx,[eax+edx*8]
c0011244:	8b 02                	mov    eax,DWORD PTR [edx]
c0011246:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0011249:	89 03                	mov    DWORD PTR [ebx],eax
c001124b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001124e:	eb 1d                	jmp    c001126d <KeGetProcessEnvPair(Process*, int)+0x8c>
c0011250:	83 ec 0c             	sub    esp,0xc
c0011253:	68 72 1e 02 c0       	push   0xc0021e72
c0011258:	e8 ac 00 00 00       	call   c0011309 <KePanic(char const*)>
c001125d:	83 c4 10             	add    esp,0x10
c0011260:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011266:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001126d:	89 d8                	mov    eax,ebx
c001126f:	5b                   	pop    ebx
c0011270:	5e                   	pop    esi
c0011271:	5f                   	pop    edi
c0011272:	c2 04 00             	ret    0x4

c0011275 <CPU::current()>:
c0011275:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001127a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011280:	c3                   	ret    

c0011281 <operator new(unsigned long)>:
c0011281:	e9 4d 68 ff ff       	jmp    c0007ad3 <malloc>

c0011286 <operator delete(void*)>:
c0011286:	e9 68 68 ff ff       	jmp    c0007af3 <rfree>

c001128b <disableIRQs()>:
c001128b:	fa                   	cli    
c001128c:	c3                   	ret    

c001128d <enableIRQs()>:
c001128d:	fb                   	sti    
c001128e:	c3                   	ret    

c001128f <lockScheduler()>:
c001128f:	fa                   	cli    
c0011290:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0011296:	c3                   	ret    

c0011297 <unlockScheduler()>:
c0011297:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001129c:	48                   	dec    eax
c001129d:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00112a2:	75 01                	jne    c00112a5 <unlockScheduler()+0xe>
c00112a4:	fb                   	sti    
c00112a5:	c3                   	ret    

c00112a6 <lockStuff()>:
c00112a6:	fa                   	cli    
c00112a7:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00112ad:	ff 05 c4 96 02 c0    	inc    DWORD PTR ds:0xc00296c4
c00112b3:	c3                   	ret    

c00112b4 <unlockStuff()>:
c00112b4:	83 ec 0c             	sub    esp,0xc
c00112b7:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c00112bc:	48                   	dec    eax
c00112bd:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c00112c2:	75 18                	jne    c00112dc <unlockStuff()+0x28>
c00112c4:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c00112cb:	74 0f                	je     c00112dc <unlockStuff()+0x28>
c00112cd:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c00112d7:	e8 2c 49 00 00       	call   c0015c08 <schedule()>
c00112dc:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00112e1:	48                   	dec    eax
c00112e2:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00112e7:	75 01                	jne    c00112ea <unlockStuff()+0x36>
c00112e9:	fb                   	sti    
c00112ea:	83 c4 0c             	add    esp,0xc
c00112ed:	c3                   	ret    

c00112ee <Virt::getAKernelVAS()>:
c00112ee:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c00112f3:	c3                   	ret    

c00112f4 <__not_memcpy>:
c00112f4:	57                   	push   edi
c00112f5:	56                   	push   esi
c00112f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00112fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00112fe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011302:	89 c7                	mov    edi,eax
c0011304:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011306:	5e                   	pop    esi
c0011307:	5f                   	pop    edi
c0011308:	c3                   	ret    

c0011309 <KePanic(char const*)>:
c0011309:	c6 05 88 8e 02 c0 01 	mov    BYTE PTR ds:0xc0028e88,0x1
c0011310:	e9 83 68 00 00       	jmp    c0017b98 <HalPanic(char const*)>

c0011315 <KePowerThread(void*)>:
c0011315:	83 ec 0c             	sub    esp,0xc
c0011318:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001131d:	48                   	dec    eax
c001131e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0011323:	75 01                	jne    c0011326 <KePowerThread(void*)+0x11>
c0011325:	fb                   	sti    
c0011326:	c6 05 a0 8e 02 c0 00 	mov    BYTE PTR ds:0xc0028ea0,0x0
c001132d:	83 ec 0c             	sub    esp,0xc
c0011330:	6a 0a                	push   0xa
c0011332:	e8 01 4c 00 00       	call   c0015f38 <sleep(unsigned int)>
c0011337:	83 c4 10             	add    esp,0x10
c001133a:	83 05 e4 8e 02 c0 0a 	add    DWORD PTR ds:0xc0028ee4,0xa
c0011341:	eb e3                	jmp    c0011326 <KePowerThread(void*)+0x11>

c0011343 <KeChangePowerSettings(PowerSettings)>:
c0011343:	57                   	push   edi
c0011344:	b9 09 00 00 00       	mov    ecx,0x9
c0011349:	56                   	push   esi
c001134a:	bf c0 8e 02 c0       	mov    edi,0xc0028ec0
c001134f:	fc                   	cld    
c0011350:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011354:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011356:	5e                   	pop    esi
c0011357:	5f                   	pop    edi
c0011358:	c3                   	ret    

c0011359 <KeUserIOReceived()>:
c0011359:	c7 05 e4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ee4,0x0
c0011363:	c3                   	ret    

c0011364 <KeHandlePowerButton()>:
c0011364:	83 ec 0c             	sub    esp,0xc
c0011367:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c001136c:	83 f8 02             	cmp    eax,0x2
c001136f:	75 10                	jne    c0011381 <KeHandlePowerButton()+0x1d>
c0011371:	83 ec 0c             	sub    esp,0xc
c0011374:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001137a:	e8 cb 5d ff ff       	call   c000714a <Computer::shutdown()>
c001137f:	eb 11                	jmp    c0011392 <KeHandlePowerButton()+0x2e>
c0011381:	48                   	dec    eax
c0011382:	75 11                	jne    c0011395 <KeHandlePowerButton()+0x31>
c0011384:	83 ec 0c             	sub    esp,0xc
c0011387:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001138d:	e8 e8 5d ff ff       	call   c000717a <Computer::sleep()>
c0011392:	83 c4 10             	add    esp,0x10
c0011395:	83 c4 0c             	add    esp,0xc
c0011398:	c3                   	ret    

c0011399 <KeHandleSleepButton()>:
c0011399:	83 ec 0c             	sub    esp,0xc
c001139c:	a1 c4 8e 02 c0       	mov    eax,ds:0xc0028ec4
c00113a1:	83 f8 02             	cmp    eax,0x2
c00113a4:	75 10                	jne    c00113b6 <KeHandleSleepButton()+0x1d>
c00113a6:	83 ec 0c             	sub    esp,0xc
c00113a9:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00113af:	e8 96 5d ff ff       	call   c000714a <Computer::shutdown()>
c00113b4:	eb 11                	jmp    c00113c7 <KeHandleSleepButton()+0x2e>
c00113b6:	48                   	dec    eax
c00113b7:	75 11                	jne    c00113ca <KeHandleSleepButton()+0x31>
c00113b9:	83 ec 0c             	sub    esp,0xc
c00113bc:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00113c2:	e8 b3 5d ff ff       	call   c000717a <Computer::sleep()>
c00113c7:	83 c4 10             	add    esp,0x10
c00113ca:	83 c4 0c             	add    esp,0xc
c00113cd:	c3                   	ret    

c00113ce <KeSetupPowerManager()>:
c00113ce:	83 ec 0c             	sub    esp,0xc
c00113d1:	68 f0 00 00 00       	push   0xf0
c00113d6:	6a 00                	push   0x0
c00113d8:	68 15 13 01 c0       	push   0xc0011315
c00113dd:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c00113e3:	c7 05 e4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ee4,0x0
c00113ed:	c6 05 a0 8e 02 c0 00 	mov    BYTE PTR ds:0xc0028ea0,0x0
c00113f4:	e8 c3 45 00 00       	call   c00159bc <Process::createThread(void (*)(void*), void*, int)>
c00113f9:	c7 05 c0 8e 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0028ec0,0x2
c0011403:	c7 05 c4 8e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028ec4,0x1
c001140d:	c7 05 c8 8e 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0028ec8,0x3
c0011417:	c7 05 cc 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ecc,0x0
c0011421:	c7 05 d8 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ed8,0x0
c001142b:	c7 05 d0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ed0,0x0
c0011435:	c7 05 dc 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028edc,0x0
c001143f:	c7 05 d4 8e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028ed4,0x3c
c0011449:	c7 05 e0 8e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028ee0,0x3c
c0011453:	83 c4 1c             	add    esp,0x1c
c0011456:	c3                   	ret    

c0011457 <KeRand()>:
c0011457:	69 05 e8 8e 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0028ee8,0x2875
c0011461:	69 0d ec 8e 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc0028eec,0xa2e7b175
c001146b:	53                   	push   ebx
c001146c:	01 c1                	add    ecx,eax
c001146e:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0011473:	f7 25 e8 8e 02 c0    	mul    DWORD PTR ds:0xc0028ee8
c0011479:	01 ca                	add    edx,ecx
c001147b:	05 ef 04 b5 00       	add    eax,0xb504ef
c0011480:	a3 e8 8e 02 c0       	mov    ds:0xc0028ee8,eax
c0011485:	83 d2 00             	adc    edx,0x0
c0011488:	0f b7 da             	movzx  ebx,dx
c001148b:	89 1d ec 8e 02 c0    	mov    DWORD PTR ds:0xc0028eec,ebx
c0011491:	0f ac d8 0e          	shrd   eax,ebx,0xe
c0011495:	5b                   	pop    ebx
c0011496:	c3                   	ret    

c0011497 <KeSeedRand(unsigned int)>:
c0011497:	53                   	push   ebx
c0011498:	83 ec 08             	sub    esp,0x8
c001149b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001149f:	e8 13 6a 00 00       	call   c0017eb7 <HalGetRand()>
c00114a4:	c7 05 ec 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028eec,0x0
c00114ae:	31 d8                	xor    eax,ebx
c00114b0:	a3 e8 8e 02 c0       	mov    ds:0xc0028ee8,eax
c00114b5:	e8 9d ff ff ff       	call   c0011457 <KeRand()>
c00114ba:	83 c4 08             	add    esp,0x8
c00114bd:	5b                   	pop    ebx
c00114be:	eb 97                	jmp    c0011457 <KeRand()>

c00114c0 <KeInitRand()>:
c00114c0:	83 ec 0c             	sub    esp,0xc
c00114c3:	e8 e4 67 00 00       	call   c0017cac <HalQueryPerformanceCounter()>
c00114c8:	0f 20 da             	mov    edx,cr3
c00114cb:	0f 22 da             	mov    cr3,edx
c00114ce:	0f 20 da             	mov    edx,cr3
c00114d1:	0f 22 da             	mov    cr3,edx
c00114d4:	0f 20 da             	mov    edx,cr3
c00114d7:	0f 22 da             	mov    cr3,edx
c00114da:	0f 20 da             	mov    edx,cr3
c00114dd:	0f 22 da             	mov    cr3,edx
c00114e0:	83 ec 0c             	sub    esp,0xc
c00114e3:	35 03 8a 95 38       	xor    eax,0x38958a03
c00114e8:	50                   	push   eax
c00114e9:	e8 a9 ff ff ff       	call   c0011497 <KeSeedRand(unsigned int)>
c00114ee:	83 c4 1c             	add    esp,0x1c
c00114f1:	c3                   	ret    
c00114f2:	66 90                	xchg   ax,ax

c00114f4 <KeResolveCompatibilitySymbol(char*)>:
c00114f4:	83 ec 0c             	sub    esp,0xc
c00114f7:	83 ec 08             	sub    esp,0x8
c00114fa:	68 8c 1e 02 c0       	push   0xc0021e8c
c00114ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011503:	e8 78 f2 fe ff       	call   c0000780 <strcmp>
c0011508:	83 c4 10             	add    esp,0x10
c001150b:	85 c0                	test   eax,eax
c001150d:	0f 94 c0             	sete   al
c0011510:	0f b6 c0             	movzx  eax,al
c0011513:	85 c0                	test   eax,eax
c0011515:	74 0d                	je     c0011524 <KeResolveCompatibilitySymbol(char*)+0x30>
c0011517:	b8 b8 5e 02 c0       	mov    eax,0xc0025eb8
c001151c:	e9 8b 01 00 00       	jmp    c00116ac <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011521:	8d 76 00             	lea    esi,[esi+0x0]
c0011524:	83 ec 08             	sub    esp,0x8
c0011527:	68 95 1e 02 c0       	push   0xc0021e95
c001152c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011530:	e8 4b f2 fe ff       	call   c0000780 <strcmp>
c0011535:	83 c4 10             	add    esp,0x10
c0011538:	85 c0                	test   eax,eax
c001153a:	0f 94 c0             	sete   al
c001153d:	0f b6 c0             	movzx  eax,al
c0011540:	85 c0                	test   eax,eax
c0011542:	74 0c                	je     c0011550 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0011544:	b8 c0 f2 01 c0       	mov    eax,0xc001f2c0
c0011549:	e9 5e 01 00 00       	jmp    c00116ac <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001154e:	66 90                	xchg   ax,ax
c0011550:	83 ec 08             	sub    esp,0x8
c0011553:	68 9f 1e 02 c0       	push   0xc0021e9f
c0011558:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001155c:	e8 1f f2 fe ff       	call   c0000780 <strcmp>
c0011561:	83 c4 10             	add    esp,0x10
c0011564:	85 c0                	test   eax,eax
c0011566:	0f 94 c0             	sete   al
c0011569:	0f b6 c0             	movzx  eax,al
c001156c:	85 c0                	test   eax,eax
c001156e:	74 0c                	je     c001157c <KeResolveCompatibilitySymbol(char*)+0x88>
c0011570:	b8 f4 ef 01 c0       	mov    eax,0xc001eff4
c0011575:	e9 32 01 00 00       	jmp    c00116ac <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001157a:	66 90                	xchg   ax,ax
c001157c:	83 ec 08             	sub    esp,0x8
c001157f:	68 a8 1e 02 c0       	push   0xc0021ea8
c0011584:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011588:	e8 f3 f1 fe ff       	call   c0000780 <strcmp>
c001158d:	83 c4 10             	add    esp,0x10
c0011590:	85 c0                	test   eax,eax
c0011592:	0f 94 c0             	sete   al
c0011595:	0f b6 c0             	movzx  eax,al
c0011598:	85 c0                	test   eax,eax
c001159a:	74 0c                	je     c00115a8 <KeResolveCompatibilitySymbol(char*)+0xb4>
c001159c:	b8 09 13 01 c0       	mov    eax,0xc0011309
c00115a1:	e9 06 01 00 00       	jmp    c00116ac <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00115a6:	66 90                	xchg   ax,ax
c00115a8:	83 ec 08             	sub    esp,0x8
c00115ab:	68 bb 1e 02 c0       	push   0xc0021ebb
c00115b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115b4:	e8 c7 f1 fe ff       	call   c0000780 <strcmp>
c00115b9:	83 c4 10             	add    esp,0x10
c00115bc:	85 c0                	test   eax,eax
c00115be:	0f 94 c0             	sete   al
c00115c1:	0f b6 c0             	movzx  eax,al
c00115c4:	85 c0                	test   eax,eax
c00115c6:	74 0c                	je     c00115d4 <KeResolveCompatibilitySymbol(char*)+0xe0>
c00115c8:	b8 35 0c 01 c0       	mov    eax,0xc0010c35
c00115cd:	e9 da 00 00 00       	jmp    c00116ac <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00115d2:	66 90                	xchg   ax,ax
c00115d4:	83 ec 08             	sub    esp,0x8
c00115d7:	68 d8 1e 02 c0       	push   0xc0021ed8
c00115dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115e0:	e8 9b f1 fe ff       	call   c0000780 <strcmp>
c00115e5:	83 c4 10             	add    esp,0x10
c00115e8:	85 c0                	test   eax,eax
c00115ea:	0f 94 c0             	sete   al
c00115ed:	0f b6 c0             	movzx  eax,al
c00115f0:	85 c0                	test   eax,eax
c00115f2:	74 0c                	je     c0011600 <KeResolveCompatibilitySymbol(char*)+0x10c>
c00115f4:	b8 c0 f3 01 c0       	mov    eax,0xc001f3c0
c00115f9:	e9 ae 00 00 00       	jmp    c00116ac <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00115fe:	66 90                	xchg   ax,ax
c0011600:	83 ec 08             	sub    esp,0x8
c0011603:	68 e2 1e 02 c0       	push   0xc0021ee2
c0011608:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001160c:	e8 6f f1 fe ff       	call   c0000780 <strcmp>
c0011611:	83 c4 10             	add    esp,0x10
c0011614:	85 c0                	test   eax,eax
c0011616:	0f 94 c0             	sete   al
c0011619:	0f b6 c0             	movzx  eax,al
c001161c:	85 c0                	test   eax,eax
c001161e:	74 0c                	je     c001162c <KeResolveCompatibilitySymbol(char*)+0x138>
c0011620:	b8 40 f1 01 c0       	mov    eax,0xc001f140
c0011625:	e9 82 00 00 00       	jmp    c00116ac <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001162a:	66 90                	xchg   ax,ax
c001162c:	83 ec 08             	sub    esp,0x8
c001162f:	68 eb 1e 02 c0       	push   0xc0021eeb
c0011634:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011638:	e8 43 f1 fe ff       	call   c0000780 <strcmp>
c001163d:	83 c4 10             	add    esp,0x10
c0011640:	85 c0                	test   eax,eax
c0011642:	0f 94 c0             	sete   al
c0011645:	0f b6 c0             	movzx  eax,al
c0011648:	85 c0                	test   eax,eax
c001164a:	74 08                	je     c0011654 <KeResolveCompatibilitySymbol(char*)+0x160>
c001164c:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c0011651:	eb 59                	jmp    c00116ac <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011653:	90                   	nop
c0011654:	83 ec 08             	sub    esp,0x8
c0011657:	68 03 1f 02 c0       	push   0xc0021f03
c001165c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011660:	e8 1b f1 fe ff       	call   c0000780 <strcmp>
c0011665:	83 c4 10             	add    esp,0x10
c0011668:	85 c0                	test   eax,eax
c001166a:	0f 94 c0             	sete   al
c001166d:	0f b6 c0             	movzx  eax,al
c0011670:	85 c0                	test   eax,eax
c0011672:	74 08                	je     c001167c <KeResolveCompatibilitySymbol(char*)+0x188>
c0011674:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c0011679:	eb 31                	jmp    c00116ac <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001167b:	90                   	nop
c001167c:	83 ec 08             	sub    esp,0x8
c001167f:	68 10 1f 02 c0       	push   0xc0021f10
c0011684:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011688:	e8 f3 f0 fe ff       	call   c0000780 <strcmp>
c001168d:	83 c4 10             	add    esp,0x10
c0011690:	85 c0                	test   eax,eax
c0011692:	0f 94 c0             	sete   al
c0011695:	0f b6 c0             	movzx  eax,al
c0011698:	85 c0                	test   eax,eax
c001169a:	74 08                	je     c00116a4 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c001169c:	b8 bd 5e 02 c0       	mov    eax,0xc0025ebd
c00116a1:	eb 09                	jmp    c00116ac <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00116a3:	90                   	nop
c00116a4:	b8 00 00 00 00       	mov    eax,0x0
c00116a9:	8d 76 00             	lea    esi,[esi+0x0]
c00116ac:	83 c4 0c             	add    esp,0xc
c00116af:	c3                   	ret    

c00116b0 <KiSigKill(int)>:
c00116b0:	83 ec 0c             	sub    esp,0xc
c00116b3:	6a 00                	push   0x0
c00116b5:	6a 00                	push   0x0
c00116b7:	6a ff                	push   0xffffffff
c00116b9:	6a 01                	push   0x1
c00116bb:	e8 92 29 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00116c0:	83 c4 1c             	add    esp,0x1c
c00116c3:	c3                   	ret    

c00116c4 <KiDefaultSignalHandlerIgnore(int)>:
c00116c4:	c3                   	ret    

c00116c5 <KiDefaultSignalHandlerPause(int)>:
c00116c5:	57                   	push   edi
c00116c6:	b9 07 00 00 00       	mov    ecx,0x7
c00116cb:	56                   	push   esi
c00116cc:	be 59 1f 02 c0       	mov    esi,0xc0021f59
c00116d1:	83 ec 24             	sub    esp,0x24
c00116d4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00116d8:	fc                   	cld    
c00116d9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00116db:	8d 44 24 04          	lea    eax,[esp+0x4]
c00116df:	50                   	push   eax
c00116e0:	6a 00                	push   0x0
c00116e2:	6a 00                	push   0x0
c00116e4:	6a 27                	push   0x27
c00116e6:	e8 67 29 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00116eb:	83 c4 34             	add    esp,0x34
c00116ee:	5e                   	pop    esi
c00116ef:	5f                   	pop    edi
c00116f0:	c3                   	ret    

c00116f1 <KiDefaultSignalHandlerResume(int)>:
c00116f1:	57                   	push   edi
c00116f2:	b9 1d 00 00 00       	mov    ecx,0x1d
c00116f7:	56                   	push   esi
c00116f8:	be 75 1f 02 c0       	mov    esi,0xc0021f75
c00116fd:	83 ec 24             	sub    esp,0x24
c0011700:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0011704:	fc                   	cld    
c0011705:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011707:	8d 44 24 03          	lea    eax,[esp+0x3]
c001170b:	50                   	push   eax
c001170c:	6a 00                	push   0x0
c001170e:	6a 00                	push   0x0
c0011710:	6a 27                	push   0x27
c0011712:	e8 3b 29 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011717:	83 c4 34             	add    esp,0x34
c001171a:	5e                   	pop    esi
c001171b:	5f                   	pop    edi
c001171c:	c3                   	ret    

c001171d <KeDeinitSignals(SigHandlerBlock*)>:
c001171d:	e9 c1 63 ff ff       	jmp    c0007ae3 <free>

c0011722 <KeInitSignals()>:
c0011722:	53                   	push   ebx
c0011723:	83 ec 14             	sub    esp,0x14
c0011726:	68 c8 00 00 00       	push   0xc8
c001172b:	e8 a3 63 ff ff       	call   c0007ad3 <malloc>
c0011730:	83 c4 0c             	add    esp,0xc
c0011733:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c001173d:	89 c3                	mov    ebx,eax
c001173f:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0011749:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c001174f:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c0011753:	6a 20                	push   0x20
c0011755:	6a 00                	push   0x0
c0011757:	50                   	push   eax
c0011758:	e8 93 ed fe ff       	call   c00004f0 <memset>
c001175d:	83 c4 0c             	add    esp,0xc
c0011760:	6a 44                	push   0x44
c0011762:	6a 00                	push   0x0
c0011764:	53                   	push   ebx
c0011765:	e8 86 ed fe ff       	call   c00004f0 <memset>
c001176a:	83 c4 18             	add    esp,0x18
c001176d:	89 d8                	mov    eax,ebx
c001176f:	5b                   	pop    ebx
c0011770:	c3                   	ret    

c0011771 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011771:	53                   	push   ebx
c0011772:	b8 01 00 00 00       	mov    eax,0x1
c0011777:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001177b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001177f:	83 f9 10             	cmp    ecx,0x10
c0011782:	7f 21                	jg     c00117a5 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0011784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011788:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c001178b:	89 03                	mov    DWORD PTR [ebx],eax
c001178d:	b8 01 00 00 00       	mov    eax,0x1
c0011792:	d3 e0                	shl    eax,cl
c0011794:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011798:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001179b:	31 c0                	xor    eax,eax
c001179d:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c00117a5:	5b                   	pop    ebx
c00117a6:	c3                   	ret    

c00117a7 <KeRaiseSignal(SigHandlerBlock*, int)>:
c00117a7:	55                   	push   ebp
c00117a8:	57                   	push   edi
c00117a9:	bf 08 00 00 00       	mov    edi,0x8
c00117ae:	56                   	push   esi
c00117af:	53                   	push   ebx
c00117b0:	83 ec 18             	sub    esp,0x18
c00117b3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00117b7:	68 92 1f 02 c0       	push   0xc0021f92
c00117bc:	e8 49 91 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00117c1:	83 c4 10             	add    esp,0x10
c00117c4:	31 c9                	xor    ecx,ecx
c00117c6:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00117cd:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c00117d3:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00117d7:	99                   	cdq    
c00117d8:	f7 ff                	idiv   edi
c00117da:	8d 42 24             	lea    eax,[edx+0x24]
c00117dd:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c00117e1:	85 f6                	test   esi,esi
c00117e3:	75 1a                	jne    c00117ff <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c00117e5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00117e9:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c00117ed:	50                   	push   eax
c00117ee:	50                   	push   eax
c00117ef:	52                   	push   edx
c00117f0:	68 a3 1f 02 c0       	push   0xc0021fa3
c00117f5:	e8 10 91 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00117fa:	83 c4 10             	add    esp,0x10
c00117fd:	eb 1b                	jmp    c001181a <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c00117ff:	41                   	inc    ecx
c0011800:	83 f9 08             	cmp    ecx,0x8
c0011803:	75 ce                	jne    c00117d3 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0011805:	83 ec 0c             	sub    esp,0xc
c0011808:	be 01 00 00 00       	mov    esi,0x1
c001180d:	68 c4 1f 02 c0       	push   0xc0021fc4
c0011812:	e8 f3 90 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0011817:	83 c4 10             	add    esp,0x10
c001181a:	83 c4 0c             	add    esp,0xc
c001181d:	89 f0                	mov    eax,esi
c001181f:	5b                   	pop    ebx
c0011820:	5e                   	pop    esi
c0011821:	5f                   	pop    edi
c0011822:	5d                   	pop    ebp
c0011823:	c3                   	ret    

c0011824 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0011824:	55                   	push   ebp
c0011825:	57                   	push   edi
c0011826:	56                   	push   esi
c0011827:	53                   	push   ebx
c0011828:	51                   	push   ecx
c0011829:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001182d:	85 db                	test   ebx,ebx
c001182f:	0f 84 bc 00 00 00    	je     c00118f1 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011835:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c001183c:	0f 84 af 00 00 00    	je     c00118f1 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011842:	31 c9                	xor    ecx,ecx
c0011844:	bf 08 00 00 00       	mov    edi,0x8
c0011849:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c001184f:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011852:	99                   	cdq    
c0011853:	f7 ff                	idiv   edi
c0011855:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c001185c:	85 ed                	test   ebp,ebp
c001185e:	0f 84 9e 00 00 00    	je     c0011902 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0011864:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c001186a:	89 e9                	mov    ecx,ebp
c001186c:	bf 01 00 00 00       	mov    edi,0x1
c0011871:	d3 e7                	shl    edi,cl
c0011873:	31 c9                	xor    ecx,ecx
c0011875:	89 04 24             	mov    DWORD PTR [esp],eax
c0011878:	b8 01 00 00 00       	mov    eax,0x1
c001187d:	d3 e0                	shl    eax,cl
c001187f:	85 04 24             	test   DWORD PTR [esp],eax
c0011882:	74 06                	je     c001188a <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0011884:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011888:	75 67                	jne    c00118f1 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c001188a:	41                   	inc    ecx
c001188b:	83 f9 11             	cmp    ecx,0x11
c001188e:	75 e8                	jne    c0011878 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0011890:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011893:	46                   	inc    esi
c0011894:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c001189a:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c00118a5:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c00118ac:	09 f8                	or     eax,edi
c00118ae:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c00118b4:	31 c0                	xor    eax,eax
c00118b6:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c00118be:	74 09                	je     c00118c9 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c00118c0:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00118c7:	eb 06                	jmp    c00118cf <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c00118c9:	40                   	inc    eax
c00118ca:	83 f8 08             	cmp    eax,0x8
c00118cd:	75 e7                	jne    c00118b6 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c00118cf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00118d3:	83 fd 09             	cmp    ebp,0x9
c00118d6:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c00118d9:	89 2a                	mov    DWORD PTR [edx],ebp
c00118db:	75 07                	jne    c00118e4 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c00118dd:	b8 b0 16 01 c0       	mov    eax,0xc00116b0
c00118e2:	eb 31                	jmp    c0011915 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00118e4:	83 f8 01             	cmp    eax,0x1
c00118e7:	75 0c                	jne    c00118f5 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c00118e9:	f7 d7                	not    edi
c00118eb:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c00118f1:	31 c0                	xor    eax,eax
c00118f3:	eb 20                	jmp    c0011915 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00118f5:	85 c0                	test   eax,eax
c00118f7:	75 1c                	jne    c0011915 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00118f9:	8b 04 ad c0 33 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdcc40]
c0011900:	eb 13                	jmp    c0011915 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011902:	41                   	inc    ecx
c0011903:	46                   	inc    esi
c0011904:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c001190a:	83 f9 08             	cmp    ecx,0x8
c001190d:	0f 85 36 ff ff ff    	jne    c0011849 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0011913:	eb dc                	jmp    c00118f1 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011915:	5a                   	pop    edx
c0011916:	5b                   	pop    ebx
c0011917:	5e                   	pop    esi
c0011918:	5f                   	pop    edi
c0011919:	5d                   	pop    ebp
c001191a:	c3                   	ret    

c001191b <KiCheckSignalZ>:
c001191b:	83 ec 10             	sub    esp,0x10
c001191e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011922:	50                   	push   eax
c0011923:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011928:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001192b:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011931:	e8 ee fe ff ff       	call   c0011824 <KeCheckSignal(SigHandlerBlock*, int*)>
c0011936:	5a                   	pop    edx
c0011937:	31 d2                	xor    edx,edx
c0011939:	59                   	pop    ecx
c001193a:	85 c0                	test   eax,eax
c001193c:	74 19                	je     c0011957 <KiCheckSignalZ+0x3c>
c001193e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011944:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011947:	89 02                	mov    DWORD PTR [edx],eax
c0011949:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011950:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011954:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0011957:	89 d0                	mov    eax,edx
c0011959:	83 c4 10             	add    esp,0x10
c001195c:	c3                   	ret    

c001195d <KeCompleteSignal(SigHandlerBlock*, int)>:
c001195d:	56                   	push   esi
c001195e:	53                   	push   ebx
c001195f:	bb 01 00 00 00       	mov    ebx,0x1
c0011964:	52                   	push   edx
c0011965:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011969:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001196d:	d3 e3                	shl    ebx,cl
c001196f:	83 f9 10             	cmp    ecx,0x10
c0011972:	7f 08                	jg     c001197c <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011974:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c001197a:	75 10                	jne    c001198c <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c001197c:	83 ec 0c             	sub    esp,0xc
c001197f:	68 d5 1f 02 c0       	push   0xc0021fd5
c0011984:	e8 80 f9 ff ff       	call   c0011309 <KePanic(char const*)>
c0011989:	83 c4 10             	add    esp,0x10
c001198c:	f7 d3                	not    ebx
c001198e:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011994:	58                   	pop    eax
c0011995:	5b                   	pop    ebx
c0011996:	5e                   	pop    esi
c0011997:	c3                   	ret    

c0011998 <KiFinishSignalZ>:
c0011998:	53                   	push   ebx
c0011999:	83 ec 10             	sub    esp,0x10
c001199c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00119a0:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c00119a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119a8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119ab:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00119b1:	e8 a7 ff ff ff       	call   c001195d <KeCompleteSignal(SigHandlerBlock*, int)>
c00119b6:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00119bc:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00119c3:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00119ca:	83 c4 18             	add    esp,0x18
c00119cd:	5b                   	pop    ebx
c00119ce:	c3                   	ret    

c00119cf <SysSeekDir(regs*)>:
c00119cf:	31 c0                	xor    eax,eax
c00119d1:	31 d2                	xor    edx,edx
c00119d3:	c3                   	ret    

c00119d4 <SysTellDir(regs*)>:
c00119d4:	31 c0                	xor    eax,eax
c00119d6:	31 d2                	xor    edx,edx
c00119d8:	c3                   	ret    

c00119d9 <SysVerify(regs*)>:
c00119d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00119dd:	31 d2                	xor    edx,edx
c00119df:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00119e2:	c3                   	ret    

c00119e3 <SysGetArgc(regs*)>:
c00119e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119e8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119eb:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c00119f1:	89 c2                	mov    edx,eax
c00119f3:	c1 fa 1f             	sar    edx,0x1f
c00119f6:	c3                   	ret    

c00119f7 <SysTTYName(regs*)>:
c00119f7:	b8 01 00 00 00       	mov    eax,0x1
c00119fc:	31 d2                	xor    edx,edx
c00119fe:	c3                   	ret    

c00119ff <SysFormatDisk(regs*)>:
c00119ff:	56                   	push   esi
c0011a00:	53                   	push   ebx
c0011a01:	83 ec 04             	sub    esp,0x4
c0011a04:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011a08:	8b 1d 04 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026404
c0011a0e:	eb 2a                	jmp    c0011a3a <SysFormatDisk(regs*)+0x3b>
c0011a10:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011a13:	83 ec 0c             	sub    esp,0xc
c0011a16:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011a19:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011a1b:	51                   	push   ecx
c0011a1c:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011a1f:	51                   	push   ecx
c0011a20:	50                   	push   eax
c0011a21:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c0011a28:	50                   	push   eax
c0011a29:	53                   	push   ebx
c0011a2a:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011a2d:	83 c4 20             	add    esp,0x20
c0011a30:	83 f8 08             	cmp    eax,0x8
c0011a33:	89 c1                	mov    ecx,eax
c0011a35:	75 14                	jne    c0011a4b <SysFormatDisk(regs*)+0x4c>
c0011a37:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011a3a:	85 db                	test   ebx,ebx
c0011a3c:	75 d2                	jne    c0011a10 <SysFormatDisk(regs*)+0x11>
c0011a3e:	b8 03 00 00 00       	mov    eax,0x3
c0011a43:	31 d2                	xor    edx,edx
c0011a45:	83 c4 04             	add    esp,0x4
c0011a48:	5b                   	pop    ebx
c0011a49:	5e                   	pop    esi
c0011a4a:	c3                   	ret    
c0011a4b:	85 c0                	test   eax,eax
c0011a4d:	74 13                	je     c0011a62 <SysFormatDisk(regs*)+0x63>
c0011a4f:	31 d2                	xor    edx,edx
c0011a51:	83 f9 09             	cmp    ecx,0x9
c0011a54:	b8 01 00 00 00       	mov    eax,0x1
c0011a59:	74 ea                	je     c0011a45 <SysFormatDisk(regs*)+0x46>
c0011a5b:	b8 02 00 00 00       	mov    eax,0x2
c0011a60:	eb e1                	jmp    c0011a43 <SysFormatDisk(regs*)+0x44>
c0011a62:	31 c0                	xor    eax,eax
c0011a64:	eb dd                	jmp    c0011a43 <SysFormatDisk(regs*)+0x44>

c0011a66 <SysSetDiskVolumeLabel(regs*)>:
c0011a66:	56                   	push   esi
c0011a67:	53                   	push   ebx
c0011a68:	83 ec 04             	sub    esp,0x4
c0011a6b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011a6f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011a72:	83 f8 19             	cmp    eax,0x19
c0011a75:	77 33                	ja     c0011aaa <SysSetDiskVolumeLabel(regs*)+0x44>
c0011a77:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0011a7e:	85 c9                	test   ecx,ecx
c0011a80:	74 28                	je     c0011aaa <SysSetDiskVolumeLabel(regs*)+0x44>
c0011a82:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011a85:	85 db                	test   ebx,ebx
c0011a87:	74 21                	je     c0011aaa <SysSetDiskVolumeLabel(regs*)+0x44>
c0011a89:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011a8f:	85 d2                	test   edx,edx
c0011a91:	74 17                	je     c0011aaa <SysSetDiskVolumeLabel(regs*)+0x44>
c0011a93:	8b 32                	mov    esi,DWORD PTR [edx]
c0011a95:	53                   	push   ebx
c0011a96:	50                   	push   eax
c0011a97:	51                   	push   ecx
c0011a98:	52                   	push   edx
c0011a99:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011a9c:	83 c4 10             	add    esp,0x10
c0011a9f:	83 c4 04             	add    esp,0x4
c0011aa2:	5b                   	pop    ebx
c0011aa3:	5e                   	pop    esi
c0011aa4:	89 c2                	mov    edx,eax
c0011aa6:	c1 fa 1f             	sar    edx,0x1f
c0011aa9:	c3                   	ret    
c0011aaa:	83 c4 04             	add    esp,0x4
c0011aad:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011ab2:	5b                   	pop    ebx
c0011ab3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ab8:	5e                   	pop    esi
c0011ab9:	c3                   	ret    

c0011aba <SysGetDiskVolumeLabel(regs*)>:
c0011aba:	57                   	push   edi
c0011abb:	56                   	push   esi
c0011abc:	53                   	push   ebx
c0011abd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ac1:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011ac4:	83 fa 19             	cmp    edx,0x19
c0011ac7:	77 3c                	ja     c0011b05 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011ac9:	8b 0c 95 80 88 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd7780]
c0011ad0:	85 c9                	test   ecx,ecx
c0011ad2:	74 31                	je     c0011b05 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011ad4:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011ad7:	85 db                	test   ebx,ebx
c0011ad9:	74 2a                	je     c0011b05 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011adb:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011ade:	85 f6                	test   esi,esi
c0011ae0:	74 23                	je     c0011b05 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011ae2:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011ae8:	85 c0                	test   eax,eax
c0011aea:	74 19                	je     c0011b05 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011aec:	83 ec 0c             	sub    esp,0xc
c0011aef:	8b 38                	mov    edi,DWORD PTR [eax]
c0011af1:	56                   	push   esi
c0011af2:	53                   	push   ebx
c0011af3:	52                   	push   edx
c0011af4:	51                   	push   ecx
c0011af5:	50                   	push   eax
c0011af6:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011af9:	83 c4 20             	add    esp,0x20
c0011afc:	5b                   	pop    ebx
c0011afd:	5e                   	pop    esi
c0011afe:	89 c2                	mov    edx,eax
c0011b00:	c1 fa 1f             	sar    edx,0x1f
c0011b03:	5f                   	pop    edi
c0011b04:	c3                   	ret    
c0011b05:	5b                   	pop    ebx
c0011b06:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011b0b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b10:	5e                   	pop    esi
c0011b11:	5f                   	pop    edi
c0011b12:	c3                   	ret    

c0011b13 <SysShutdown(regs*)>:
c0011b13:	57                   	push   edi
c0011b14:	56                   	push   esi
c0011b15:	83 ec 04             	sub    esp,0x4
c0011b18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b1c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011b1f:	85 c0                	test   eax,eax
c0011b21:	74 1e                	je     c0011b41 <SysShutdown(regs*)+0x2e>
c0011b23:	83 f8 01             	cmp    eax,0x1
c0011b26:	74 5f                	je     c0011b87 <SysShutdown(regs*)+0x74>
c0011b28:	83 f8 02             	cmp    eax,0x2
c0011b2b:	be ff ff ff ff       	mov    esi,0xffffffff
c0011b30:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011b35:	74 32                	je     c0011b69 <SysShutdown(regs*)+0x56>
c0011b37:	83 c4 04             	add    esp,0x4
c0011b3a:	89 f0                	mov    eax,esi
c0011b3c:	5e                   	pop    esi
c0011b3d:	89 fa                	mov    edx,edi
c0011b3f:	5f                   	pop    edi
c0011b40:	c3                   	ret    
c0011b41:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011b46:	be ff ff ff ff       	mov    esi,0xffffffff
c0011b4b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011b50:	8b 10                	mov    edx,DWORD PTR [eax]
c0011b52:	6a 00                	push   0x0
c0011b54:	6a 00                	push   0x0
c0011b56:	6a 00                	push   0x0
c0011b58:	50                   	push   eax
c0011b59:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011b5c:	83 c4 10             	add    esp,0x10
c0011b5f:	89 f0                	mov    eax,esi
c0011b61:	83 c4 04             	add    esp,0x4
c0011b64:	89 fa                	mov    edx,edi
c0011b66:	5e                   	pop    esi
c0011b67:	5f                   	pop    edi
c0011b68:	c3                   	ret    
c0011b69:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011b6e:	8b 10                	mov    edx,DWORD PTR [eax]
c0011b70:	6a 00                	push   0x0
c0011b72:	6a 00                	push   0x0
c0011b74:	6a 01                	push   0x1
c0011b76:	50                   	push   eax
c0011b77:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011b7a:	83 c4 10             	add    esp,0x10
c0011b7d:	89 f0                	mov    eax,esi
c0011b7f:	83 c4 04             	add    esp,0x4
c0011b82:	89 fa                	mov    edx,edi
c0011b84:	5e                   	pop    esi
c0011b85:	5f                   	pop    edi
c0011b86:	c3                   	ret    
c0011b87:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c0011b8c:	85 c0                	test   eax,eax
c0011b8e:	74 02                	je     c0011b92 <SysShutdown(regs*)+0x7f>
c0011b90:	ff d0                	call   eax
c0011b92:	31 f6                	xor    esi,esi
c0011b94:	83 c4 04             	add    esp,0x4
c0011b97:	89 f0                	mov    eax,esi
c0011b99:	31 ff                	xor    edi,edi
c0011b9b:	5e                   	pop    esi
c0011b9c:	89 fa                	mov    edx,edi
c0011b9e:	5f                   	pop    edi
c0011b9f:	c3                   	ret    

c0011ba0 <SysRealpath(regs*)>:
c0011ba0:	53                   	push   ebx
c0011ba1:	83 ec 08             	sub    esp,0x8
c0011ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ba8:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0011bab:	85 c9                	test   ecx,ecx
c0011bad:	74 36                	je     c0011be5 <SysRealpath(regs*)+0x45>
c0011baf:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011bb2:	31 d2                	xor    edx,edx
c0011bb4:	b8 01 00 00 00       	mov    eax,0x1
c0011bb9:	85 db                	test   ebx,ebx
c0011bbb:	75 05                	jne    c0011bc2 <SysRealpath(regs*)+0x22>
c0011bbd:	83 c4 08             	add    esp,0x8
c0011bc0:	5b                   	pop    ebx
c0011bc1:	c3                   	ret    
c0011bc2:	6a 00                	push   0x0
c0011bc4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bc9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011bcc:	05 0c 01 00 00       	add    eax,0x10c
c0011bd1:	50                   	push   eax
c0011bd2:	51                   	push   ecx
c0011bd3:	53                   	push   ebx
c0011bd4:	e8 d3 99 ff ff       	call   c000b5ac <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011bd9:	83 c4 10             	add    esp,0x10
c0011bdc:	31 c0                	xor    eax,eax
c0011bde:	31 d2                	xor    edx,edx
c0011be0:	83 c4 08             	add    esp,0x8
c0011be3:	5b                   	pop    ebx
c0011be4:	c3                   	ret    
c0011be5:	b8 01 00 00 00       	mov    eax,0x1
c0011bea:	31 d2                	xor    edx,edx
c0011bec:	eb f2                	jmp    c0011be0 <SysRealpath(regs*)+0x40>

c0011bee <SysReadDir(regs*)>:
c0011bee:	53                   	push   ebx
c0011bef:	83 ec 18             	sub    esp,0x18
c0011bf2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011bf6:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011bf9:	83 f8 02             	cmp    eax,0x2
c0011bfc:	76 4f                	jbe    c0011c4d <SysReadDir(regs*)+0x5f>
c0011bfe:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011c05:	77 52                	ja     c0011c59 <SysReadDir(regs*)+0x6b>
c0011c07:	83 ec 0c             	sub    esp,0xc
c0011c0a:	50                   	push   eax
c0011c0b:	e8 8b 78 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011c10:	83 c4 10             	add    esp,0x10
c0011c13:	85 c0                	test   eax,eax
c0011c15:	74 42                	je     c0011c59 <SysReadDir(regs*)+0x6b>
c0011c17:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011c1f:	83 ec 0c             	sub    esp,0xc
c0011c22:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011c26:	8b 10                	mov    edx,DWORD PTR [eax]
c0011c28:	51                   	push   ecx
c0011c29:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011c2c:	51                   	push   ecx
c0011c2d:	6a 00                	push   0x0
c0011c2f:	68 10 01 00 00       	push   0x110
c0011c34:	50                   	push   eax
c0011c35:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011c38:	83 c4 20             	add    esp,0x20
c0011c3b:	85 c0                	test   eax,eax
c0011c3d:	89 c1                	mov    ecx,eax
c0011c3f:	74 27                	je     c0011c68 <SysReadDir(regs*)+0x7a>
c0011c41:	31 d2                	xor    edx,edx
c0011c43:	83 f9 07             	cmp    ecx,0x7
c0011c46:	b8 02 00 00 00       	mov    eax,0x2
c0011c4b:	75 16                	jne    c0011c63 <SysReadDir(regs*)+0x75>
c0011c4d:	b8 01 00 00 00       	mov    eax,0x1
c0011c52:	31 d2                	xor    edx,edx
c0011c54:	83 c4 18             	add    esp,0x18
c0011c57:	5b                   	pop    ebx
c0011c58:	c3                   	ret    
c0011c59:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c5e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c63:	83 c4 18             	add    esp,0x18
c0011c66:	5b                   	pop    ebx
c0011c67:	c3                   	ret    
c0011c68:	31 c0                	xor    eax,eax
c0011c6a:	31 d2                	xor    edx,edx
c0011c6c:	eb e6                	jmp    c0011c54 <SysReadDir(regs*)+0x66>

c0011c6e <SysIsATTY(regs*)>:
c0011c6e:	83 ec 0c             	sub    esp,0xc
c0011c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c75:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011c78:	83 f8 02             	cmp    eax,0x2
c0011c7b:	76 07                	jbe    c0011c84 <SysIsATTY(regs*)+0x16>
c0011c7d:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011c82:	75 26                	jne    c0011caa <SysIsATTY(regs*)+0x3c>
c0011c84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c89:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c8c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011c92:	85 c0                	test   eax,eax
c0011c94:	74 24                	je     c0011cba <SysIsATTY(regs*)+0x4c>
c0011c96:	8b 10                	mov    edx,DWORD PTR [eax]
c0011c98:	83 ec 0c             	sub    esp,0xc
c0011c9b:	50                   	push   eax
c0011c9c:	ff 12                	call   DWORD PTR [edx]
c0011c9e:	83 c4 10             	add    esp,0x10
c0011ca1:	31 d2                	xor    edx,edx
c0011ca3:	83 c4 0c             	add    esp,0xc
c0011ca6:	0f b6 c0             	movzx  eax,al
c0011ca9:	c3                   	ret    
c0011caa:	83 ec 0c             	sub    esp,0xc
c0011cad:	50                   	push   eax
c0011cae:	e8 e8 77 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011cb3:	83 c4 10             	add    esp,0x10
c0011cb6:	85 c0                	test   eax,eax
c0011cb8:	75 dc                	jne    c0011c96 <SysIsATTY(regs*)+0x28>
c0011cba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011cbf:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011cc4:	83 c4 0c             	add    esp,0xc
c0011cc7:	c3                   	ret    

c0011cc8 <SysSeek(regs*)>:
c0011cc8:	56                   	push   esi
c0011cc9:	53                   	push   ebx
c0011cca:	83 ec 04             	sub    esp,0x4
c0011ccd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011cd1:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011cd4:	8d 71 fd             	lea    esi,[ecx-0x3]
c0011cd7:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c0011cdd:	77 33                	ja     c0011d12 <SysSeek(regs*)+0x4a>
c0011cdf:	83 ec 0c             	sub    esp,0xc
c0011ce2:	51                   	push   ecx
c0011ce3:	e8 b3 77 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011ce8:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011ceb:	83 c4 0c             	add    esp,0xc
c0011cee:	31 db                	xor    ebx,ebx
c0011cf0:	53                   	push   ebx
c0011cf1:	51                   	push   ecx
c0011cf2:	50                   	push   eax
c0011cf3:	e8 d2 9c ff ff       	call   c000b9ca <File::seek(unsigned long long)>
c0011cf8:	83 c4 10             	add    esp,0x10
c0011cfb:	85 c0                	test   eax,eax
c0011cfd:	0f 95 c0             	setne  al
c0011d00:	31 d2                	xor    edx,edx
c0011d02:	0f b6 c0             	movzx  eax,al
c0011d05:	f7 d8                	neg    eax
c0011d07:	83 d2 00             	adc    edx,0x0
c0011d0a:	83 c4 04             	add    esp,0x4
c0011d0d:	5b                   	pop    ebx
c0011d0e:	f7 da                	neg    edx
c0011d10:	5e                   	pop    esi
c0011d11:	c3                   	ret    
c0011d12:	83 c4 04             	add    esp,0x4
c0011d15:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d1a:	5b                   	pop    ebx
c0011d1b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d20:	5e                   	pop    esi
c0011d21:	c3                   	ret    

c0011d22 <SysTell(regs*)>:
c0011d22:	53                   	push   ebx
c0011d23:	83 ec 08             	sub    esp,0x8
c0011d26:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011d2a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d2d:	83 f8 02             	cmp    eax,0x2
c0011d30:	76 4e                	jbe    c0011d80 <SysTell(regs*)+0x5e>
c0011d32:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011d37:	76 19                	jbe    c0011d52 <SysTell(regs*)+0x30>
c0011d39:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011d3c:	31 d2                	xor    edx,edx
c0011d3e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011d44:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011d4b:	83 c4 08             	add    esp,0x8
c0011d4e:	31 c0                	xor    eax,eax
c0011d50:	5b                   	pop    ebx
c0011d51:	c3                   	ret    
c0011d52:	83 ec 0c             	sub    esp,0xc
c0011d55:	50                   	push   eax
c0011d56:	e8 40 77 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011d5b:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011d5e:	5a                   	pop    edx
c0011d5f:	59                   	pop    ecx
c0011d60:	53                   	push   ebx
c0011d61:	50                   	push   eax
c0011d62:	e8 0f 9d ff ff       	call   c000ba76 <File::tell(unsigned long long*)>
c0011d67:	83 c4 10             	add    esp,0x10
c0011d6a:	85 c0                	test   eax,eax
c0011d6c:	0f 95 c0             	setne  al
c0011d6f:	31 d2                	xor    edx,edx
c0011d71:	0f b6 c0             	movzx  eax,al
c0011d74:	f7 d8                	neg    eax
c0011d76:	83 d2 00             	adc    edx,0x0
c0011d79:	83 c4 08             	add    esp,0x8
c0011d7c:	5b                   	pop    ebx
c0011d7d:	f7 da                	neg    edx
c0011d7f:	c3                   	ret    
c0011d80:	83 c4 08             	add    esp,0x8
c0011d83:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d88:	5b                   	pop    ebx
c0011d89:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d8e:	c3                   	ret    

c0011d8f <SysSize(regs*)>:
c0011d8f:	53                   	push   ebx
c0011d90:	83 ec 18             	sub    esp,0x18
c0011d93:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011d97:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d9a:	83 f8 02             	cmp    eax,0x2
c0011d9d:	76 54                	jbe    c0011df3 <SysSize(regs*)+0x64>
c0011d9f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011da4:	76 19                	jbe    c0011dbf <SysSize(regs*)+0x30>
c0011da6:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011da9:	31 d2                	xor    edx,edx
c0011dab:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011db1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011db8:	83 c4 18             	add    esp,0x18
c0011dbb:	31 c0                	xor    eax,eax
c0011dbd:	5b                   	pop    ebx
c0011dbe:	c3                   	ret    
c0011dbf:	83 ec 0c             	sub    esp,0xc
c0011dc2:	50                   	push   eax
c0011dc3:	e8 d3 76 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011dc8:	83 c4 0c             	add    esp,0xc
c0011dcb:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011dcf:	52                   	push   edx
c0011dd0:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011dd3:	52                   	push   edx
c0011dd4:	50                   	push   eax
c0011dd5:	e8 34 9e ff ff       	call   c000bc0e <File::stat(unsigned long long*, bool*)>
c0011dda:	83 c4 10             	add    esp,0x10
c0011ddd:	85 c0                	test   eax,eax
c0011ddf:	0f 95 c0             	setne  al
c0011de2:	31 d2                	xor    edx,edx
c0011de4:	0f b6 c0             	movzx  eax,al
c0011de7:	f7 d8                	neg    eax
c0011de9:	83 d2 00             	adc    edx,0x0
c0011dec:	83 c4 18             	add    esp,0x18
c0011def:	5b                   	pop    ebx
c0011df0:	f7 da                	neg    edx
c0011df2:	c3                   	ret    
c0011df3:	83 c4 18             	add    esp,0x18
c0011df6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011dfb:	5b                   	pop    ebx
c0011dfc:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e01:	c3                   	ret    

c0011e02 <SysSizeFromFilename(regs*)>:
c0011e02:	57                   	push   edi
c0011e03:	56                   	push   esi
c0011e04:	53                   	push   ebx
c0011e05:	83 ec 10             	sub    esp,0x10
c0011e08:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011e0c:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0011e0f:	83 fb 02             	cmp    ebx,0x2
c0011e12:	0f 86 83 00 00 00    	jbe    c0011e9b <SysSizeFromFilename(regs*)+0x99>
c0011e18:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011e1e:	76 1b                	jbe    c0011e3b <SysSizeFromFilename(regs*)+0x39>
c0011e20:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011e23:	31 d2                	xor    edx,edx
c0011e25:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011e2b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e32:	83 c4 10             	add    esp,0x10
c0011e35:	31 c0                	xor    eax,eax
c0011e37:	5b                   	pop    ebx
c0011e38:	5e                   	pop    esi
c0011e39:	5f                   	pop    edi
c0011e3a:	c3                   	ret    
c0011e3b:	83 ec 0c             	sub    esp,0xc
c0011e3e:	68 14 01 00 00       	push   0x114
c0011e43:	e8 8b 5c ff ff       	call   c0007ad3 <malloc>
c0011e48:	83 c4 0c             	add    esp,0xc
c0011e4b:	89 c7                	mov    edi,eax
c0011e4d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e52:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e55:	50                   	push   eax
c0011e56:	53                   	push   ebx
c0011e57:	57                   	push   edi
c0011e58:	e8 e7 99 ff ff       	call   c000b844 <File::File(char const*, Process*)>
c0011e5d:	83 c4 0c             	add    esp,0xc
c0011e60:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011e64:	50                   	push   eax
c0011e65:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0011e68:	52                   	push   edx
c0011e69:	57                   	push   edi
c0011e6a:	e8 9f 9d ff ff       	call   c000bc0e <File::stat(unsigned long long*, bool*)>
c0011e6f:	83 c4 10             	add    esp,0x10
c0011e72:	85 ff                	test   edi,edi
c0011e74:	89 c3                	mov    ebx,eax
c0011e76:	74 0c                	je     c0011e84 <SysSizeFromFilename(regs*)+0x82>
c0011e78:	8b 07                	mov    eax,DWORD PTR [edi]
c0011e7a:	83 ec 0c             	sub    esp,0xc
c0011e7d:	57                   	push   edi
c0011e7e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011e81:	83 c4 10             	add    esp,0x10
c0011e84:	31 c0                	xor    eax,eax
c0011e86:	85 db                	test   ebx,ebx
c0011e88:	0f 95 c0             	setne  al
c0011e8b:	31 d2                	xor    edx,edx
c0011e8d:	f7 d8                	neg    eax
c0011e8f:	83 d2 00             	adc    edx,0x0
c0011e92:	83 c4 10             	add    esp,0x10
c0011e95:	5b                   	pop    ebx
c0011e96:	f7 da                	neg    edx
c0011e98:	5e                   	pop    esi
c0011e99:	5f                   	pop    edi
c0011e9a:	c3                   	ret    
c0011e9b:	83 c4 10             	add    esp,0x10
c0011e9e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ea3:	5b                   	pop    ebx
c0011ea4:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ea9:	5e                   	pop    esi
c0011eaa:	5f                   	pop    edi
c0011eab:	c3                   	ret    

c0011eac <SysClose(regs*)>:
c0011eac:	53                   	push   ebx
c0011ead:	83 ec 08             	sub    esp,0x8
c0011eb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011eb4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011eb7:	83 f8 02             	cmp    eax,0x2
c0011eba:	76 41                	jbe    c0011efd <SysClose(regs*)+0x51>
c0011ebc:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011ec2:	83 fa 01             	cmp    edx,0x1
c0011ec5:	76 2d                	jbe    c0011ef4 <SysClose(regs*)+0x48>
c0011ec7:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011ecc:	77 2f                	ja     c0011efd <SysClose(regs*)+0x51>
c0011ece:	83 ec 0c             	sub    esp,0xc
c0011ed1:	50                   	push   eax
c0011ed2:	e8 c4 75 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011ed7:	89 04 24             	mov    DWORD PTR [esp],eax
c0011eda:	89 c3                	mov    ebx,eax
c0011edc:	e8 89 9a ff ff       	call   c000b96a <File::close()>
c0011ee1:	83 c4 10             	add    esp,0x10
c0011ee4:	85 db                	test   ebx,ebx
c0011ee6:	74 0c                	je     c0011ef4 <SysClose(regs*)+0x48>
c0011ee8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011eea:	83 ec 0c             	sub    esp,0xc
c0011eed:	53                   	push   ebx
c0011eee:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011ef1:	83 c4 10             	add    esp,0x10
c0011ef4:	83 c4 08             	add    esp,0x8
c0011ef7:	31 c0                	xor    eax,eax
c0011ef9:	5b                   	pop    ebx
c0011efa:	31 d2                	xor    edx,edx
c0011efc:	c3                   	ret    
c0011efd:	83 c4 08             	add    esp,0x8
c0011f00:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f05:	5b                   	pop    ebx
c0011f06:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f0b:	c3                   	ret    

c0011f0c <SysOpenDir(regs*)>:
c0011f0c:	56                   	push   esi
c0011f0d:	53                   	push   ebx
c0011f0e:	83 ec 04             	sub    esp,0x4
c0011f11:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011f15:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011f18:	85 c9                	test   ecx,ecx
c0011f1a:	74 5d                	je     c0011f79 <SysOpenDir(regs*)+0x6d>
c0011f1c:	83 ec 0c             	sub    esp,0xc
c0011f1f:	68 14 01 00 00       	push   0x114
c0011f24:	e8 aa 5b ff ff       	call   c0007ad3 <malloc>
c0011f29:	83 c4 0c             	add    esp,0xc
c0011f2c:	89 c6                	mov    esi,eax
c0011f2e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f33:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f36:	50                   	push   eax
c0011f37:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011f3a:	52                   	push   edx
c0011f3b:	56                   	push   esi
c0011f3c:	e8 8d 9e ff ff       	call   c000bdce <Directory::Directory(char const*, Process*)>
c0011f41:	83 c4 10             	add    esp,0x10
c0011f44:	85 f6                	test   esi,esi
c0011f46:	74 31                	je     c0011f79 <SysOpenDir(regs*)+0x6d>
c0011f48:	83 ec 0c             	sub    esp,0xc
c0011f4b:	56                   	push   esi
c0011f4c:	e8 45 9f ff ff       	call   c000be96 <Directory::open()>
c0011f51:	83 c4 10             	add    esp,0x10
c0011f54:	85 c0                	test   eax,eax
c0011f56:	75 21                	jne    c0011f79 <SysOpenDir(regs*)+0x6d>
c0011f58:	83 ec 0c             	sub    esp,0xc
c0011f5b:	56                   	push   esi
c0011f5c:	e8 3d 72 ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c0011f61:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011f64:	83 c4 10             	add    esp,0x10
c0011f67:	89 02                	mov    DWORD PTR [edx],eax
c0011f69:	c1 f8 1f             	sar    eax,0x1f
c0011f6c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011f6f:	83 c4 04             	add    esp,0x4
c0011f72:	31 c0                	xor    eax,eax
c0011f74:	5b                   	pop    ebx
c0011f75:	31 d2                	xor    edx,edx
c0011f77:	5e                   	pop    esi
c0011f78:	c3                   	ret    
c0011f79:	83 c4 04             	add    esp,0x4
c0011f7c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f81:	5b                   	pop    ebx
c0011f82:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f87:	5e                   	pop    esi
c0011f88:	c3                   	ret    

c0011f89 <SysMakeDir(regs*)>:
c0011f89:	56                   	push   esi
c0011f8a:	53                   	push   ebx
c0011f8b:	83 ec 10             	sub    esp,0x10
c0011f8e:	68 14 01 00 00       	push   0x114
c0011f93:	e8 3b 5b ff ff       	call   c0007ad3 <malloc>
c0011f98:	83 c4 0c             	add    esp,0xc
c0011f9b:	89 c3                	mov    ebx,eax
c0011f9d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011fa2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011fa5:	50                   	push   eax
c0011fa6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011faa:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0011fad:	52                   	push   edx
c0011fae:	53                   	push   ebx
c0011faf:	e8 1a 9e ff ff       	call   c000bdce <Directory::Directory(char const*, Process*)>
c0011fb4:	83 c4 10             	add    esp,0x10
c0011fb7:	85 db                	test   ebx,ebx
c0011fb9:	74 2c                	je     c0011fe7 <SysMakeDir(regs*)+0x5e>
c0011fbb:	83 ec 0c             	sub    esp,0xc
c0011fbe:	53                   	push   ebx
c0011fbf:	e8 b2 a0 ff ff       	call   c000c076 <Directory::create()>
c0011fc4:	89 c6                	mov    esi,eax
c0011fc6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011fc8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011fcb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011fce:	83 c4 10             	add    esp,0x10
c0011fd1:	31 c0                	xor    eax,eax
c0011fd3:	85 f6                	test   esi,esi
c0011fd5:	0f 95 c0             	setne  al
c0011fd8:	31 d2                	xor    edx,edx
c0011fda:	f7 d8                	neg    eax
c0011fdc:	83 d2 00             	adc    edx,0x0
c0011fdf:	83 c4 04             	add    esp,0x4
c0011fe2:	5b                   	pop    ebx
c0011fe3:	f7 da                	neg    edx
c0011fe5:	5e                   	pop    esi
c0011fe6:	c3                   	ret    
c0011fe7:	83 c4 04             	add    esp,0x4
c0011fea:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011fef:	5b                   	pop    ebx
c0011ff0:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ff5:	5e                   	pop    esi
c0011ff6:	c3                   	ret    

c0011ff7 <SysCloseDir(regs*)>:
c0011ff7:	53                   	push   ebx
c0011ff8:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ffd:	83 ec 08             	sub    esp,0x8
c0012000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012004:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0012007:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001200c:	8d 59 fd             	lea    ebx,[ecx-0x3]
c001200f:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c0012015:	77 2a                	ja     c0012041 <SysCloseDir(regs*)+0x4a>
c0012017:	83 ec 0c             	sub    esp,0xc
c001201a:	51                   	push   ecx
c001201b:	e8 7b 74 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0012020:	89 04 24             	mov    DWORD PTR [esp],eax
c0012023:	89 c3                	mov    ebx,eax
c0012025:	e8 c8 9e ff ff       	call   c000bef2 <Directory::close()>
c001202a:	83 c4 10             	add    esp,0x10
c001202d:	85 db                	test   ebx,ebx
c001202f:	74 0c                	je     c001203d <SysCloseDir(regs*)+0x46>
c0012031:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012033:	83 ec 0c             	sub    esp,0xc
c0012036:	53                   	push   ebx
c0012037:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001203a:	83 c4 10             	add    esp,0x10
c001203d:	31 c0                	xor    eax,eax
c001203f:	31 d2                	xor    edx,edx
c0012041:	83 c4 08             	add    esp,0x8
c0012044:	5b                   	pop    ebx
c0012045:	c3                   	ret    

c0012046 <SysWait(regs*)>:
c0012046:	83 ec 10             	sub    esp,0x10
c0012049:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001204d:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0012050:	52                   	push   edx
c0012051:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0012054:	51                   	push   ecx
c0012055:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012058:	50                   	push   eax
c0012059:	e8 e2 3d 00 00       	call   c0015e40 <waitTask(int, int*, int)>
c001205e:	83 c4 1c             	add    esp,0x1c
c0012061:	89 c2                	mov    edx,eax
c0012063:	c1 fa 1f             	sar    edx,0x1f
c0012066:	c3                   	ret    

c0012067 <SysNotImpl(regs*)>:
c0012067:	83 ec 18             	sub    esp,0x18
c001206a:	68 e6 1f 02 c0       	push   0xc0021fe6
c001206f:	e8 95 f2 ff ff       	call   c0011309 <KePanic(char const*)>
c0012074:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012079:	ba ff ff ff ff       	mov    edx,0xffffffff
c001207e:	83 c4 1c             	add    esp,0x1c
c0012081:	c3                   	ret    

c0012082 <SysPanic(regs*)>:
c0012082:	83 ec 18             	sub    esp,0x18
c0012085:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012089:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001208c:	50                   	push   eax
c001208d:	e8 77 f2 ff ff       	call   c0011309 <KePanic(char const*)>
c0012092:	b8 01 00 00 00       	mov    eax,0x1
c0012097:	31 d2                	xor    edx,edx
c0012099:	83 c4 1c             	add    esp,0x1c
c001209c:	c3                   	ret    

c001209d <SysRmdir(regs*)>:
c001209d:	56                   	push   esi
c001209e:	53                   	push   ebx
c001209f:	83 ec 10             	sub    esp,0x10
c00120a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00120a6:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00120a9:	68 14 01 00 00       	push   0x114
c00120ae:	e8 20 5a ff ff       	call   c0007ad3 <malloc>
c00120b3:	83 c4 0c             	add    esp,0xc
c00120b6:	89 c3                	mov    ebx,eax
c00120b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00120bd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00120c0:	50                   	push   eax
c00120c1:	56                   	push   esi
c00120c2:	53                   	push   ebx
c00120c3:	e8 7c 97 ff ff       	call   c000b844 <File::File(char const*, Process*)>
c00120c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00120cb:	e8 0a 9a ff ff       	call   c000bada <File::unlink()>
c00120d0:	83 c4 10             	add    esp,0x10
c00120d3:	85 db                	test   ebx,ebx
c00120d5:	89 c6                	mov    esi,eax
c00120d7:	74 0c                	je     c00120e5 <SysRmdir(regs*)+0x48>
c00120d9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00120db:	83 ec 0c             	sub    esp,0xc
c00120de:	53                   	push   ebx
c00120df:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00120e2:	83 c4 10             	add    esp,0x10
c00120e5:	31 c0                	xor    eax,eax
c00120e7:	85 f6                	test   esi,esi
c00120e9:	0f 95 c0             	setne  al
c00120ec:	31 d2                	xor    edx,edx
c00120ee:	f7 d8                	neg    eax
c00120f0:	83 d2 00             	adc    edx,0x0
c00120f3:	83 c4 04             	add    esp,0x4
c00120f6:	5b                   	pop    ebx
c00120f7:	f7 da                	neg    edx
c00120f9:	5e                   	pop    esi
c00120fa:	c3                   	ret    

c00120fb <SysUnlink(regs*)>:
c00120fb:	56                   	push   esi
c00120fc:	53                   	push   ebx
c00120fd:	83 ec 10             	sub    esp,0x10
c0012100:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012104:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0012107:	68 14 01 00 00       	push   0x114
c001210c:	e8 c2 59 ff ff       	call   c0007ad3 <malloc>
c0012111:	83 c4 0c             	add    esp,0xc
c0012114:	89 c3                	mov    ebx,eax
c0012116:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001211b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001211e:	50                   	push   eax
c001211f:	56                   	push   esi
c0012120:	53                   	push   ebx
c0012121:	e8 1e 97 ff ff       	call   c000b844 <File::File(char const*, Process*)>
c0012126:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012129:	e8 ac 99 ff ff       	call   c000bada <File::unlink()>
c001212e:	83 c4 10             	add    esp,0x10
c0012131:	85 db                	test   ebx,ebx
c0012133:	89 c6                	mov    esi,eax
c0012135:	74 0c                	je     c0012143 <SysUnlink(regs*)+0x48>
c0012137:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012139:	83 ec 0c             	sub    esp,0xc
c001213c:	53                   	push   ebx
c001213d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012140:	83 c4 10             	add    esp,0x10
c0012143:	31 c0                	xor    eax,eax
c0012145:	85 f6                	test   esi,esi
c0012147:	0f 95 c0             	setne  al
c001214a:	31 d2                	xor    edx,edx
c001214c:	f7 d8                	neg    eax
c001214e:	83 d2 00             	adc    edx,0x0
c0012151:	83 c4 04             	add    esp,0x4
c0012154:	5b                   	pop    ebx
c0012155:	f7 da                	neg    edx
c0012157:	5e                   	pop    esi
c0012158:	c3                   	ret    

c0012159 <SysGetArgv(regs*)>:
c0012159:	83 ec 0c             	sub    esp,0xc
c001215c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012160:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0012163:	85 c0                	test   eax,eax
c0012165:	78 2c                	js     c0012193 <SysGetArgv(regs*)+0x3a>
c0012167:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001216d:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0012170:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0012176:	7d 1b                	jge    c0012193 <SysGetArgv(regs*)+0x3a>
c0012178:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c001217f:	85 c0                	test   eax,eax
c0012181:	74 18                	je     c001219b <SysGetArgv(regs*)+0x42>
c0012183:	83 ec 08             	sub    esp,0x8
c0012186:	50                   	push   eax
c0012187:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c001218a:	50                   	push   eax
c001218b:	e8 c0 e4 fe ff       	call   c0000650 <strcpy>
c0012190:	83 c4 10             	add    esp,0x10
c0012193:	31 c0                	xor    eax,eax
c0012195:	31 d2                	xor    edx,edx
c0012197:	83 c4 0c             	add    esp,0xc
c001219a:	c3                   	ret    
c001219b:	b8 01 00 00 00       	mov    eax,0x1
c00121a0:	31 d2                	xor    edx,edx
c00121a2:	83 c4 0c             	add    esp,0xc
c00121a5:	c3                   	ret    

c00121a6 <SysUSleep(regs*)>:
c00121a6:	83 ec 1c             	sub    esp,0x1c
c00121a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00121ad:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00121b0:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00121b3:	6a 00                	push   0x0
c00121b5:	6a 64                	push   0x64
c00121b7:	52                   	push   edx
c00121b8:	50                   	push   eax
c00121b9:	e8 02 d1 00 00       	call   c001f2c0 <__udivdi3>
c00121be:	83 c4 14             	add    esp,0x14
c00121c1:	50                   	push   eax
c00121c2:	e8 5d 3d 00 00       	call   c0015f24 <milliTenthSleep(unsigned int)>
c00121c7:	31 c0                	xor    eax,eax
c00121c9:	31 d2                	xor    edx,edx
c00121cb:	83 c4 1c             	add    esp,0x1c
c00121ce:	c3                   	ret    

c00121cf <SysSpawn(regs*)>:
c00121cf:	56                   	push   esi
c00121d0:	53                   	push   ebx
c00121d1:	83 ec 04             	sub    esp,0x4
c00121d4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00121d8:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00121db:	85 f6                	test   esi,esi
c00121dd:	75 0a                	jne    c00121e9 <SysSpawn(regs*)+0x1a>
c00121df:	83 c4 04             	add    esp,0x4
c00121e2:	31 c0                	xor    eax,eax
c00121e4:	5b                   	pop    ebx
c00121e5:	31 d2                	xor    edx,edx
c00121e7:	5e                   	pop    esi
c00121e8:	c3                   	ret    
c00121e9:	83 ec 0c             	sub    esp,0xc
c00121ec:	68 24 07 00 00       	push   0x724
c00121f1:	e8 dd 58 ff ff       	call   c0007ad3 <malloc>
c00121f6:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00121f9:	83 c4 10             	add    esp,0x10
c00121fc:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00121ff:	89 c6                	mov    esi,eax
c0012201:	31 c0                	xor    eax,eax
c0012203:	85 c9                	test   ecx,ecx
c0012205:	75 08                	jne    c001220f <SysSpawn(regs*)+0x40>
c0012207:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001220c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001220f:	52                   	push   edx
c0012210:	50                   	push   eax
c0012211:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012214:	50                   	push   eax
c0012215:	56                   	push   esi
c0012216:	e8 71 33 00 00       	call   c001558c <Process::Process(char const*, Process*, char**)>
c001221b:	83 c4 10             	add    esp,0x10
c001221e:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0012225:	75 b8                	jne    c00121df <SysSpawn(regs*)+0x10>
c0012227:	83 ec 0c             	sub    esp,0xc
c001222a:	56                   	push   esi
c001222b:	e8 94 38 00 00       	call   c0015ac4 <Process::createUserThread()>
c0012230:	8b 06                	mov    eax,DWORD PTR [esi]
c0012232:	83 c4 10             	add    esp,0x10
c0012235:	83 c4 04             	add    esp,0x4
c0012238:	5b                   	pop    ebx
c0012239:	89 c2                	mov    edx,eax
c001223b:	c1 fa 1f             	sar    edx,0x1f
c001223e:	5e                   	pop    esi
c001223f:	c3                   	ret    

c0012240 <SysGetEnv(regs*)>:
c0012240:	57                   	push   edi
c0012241:	56                   	push   esi
c0012242:	53                   	push   ebx
c0012243:	83 ec 1c             	sub    esp,0x1c
c0012246:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001224b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001224f:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0012252:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012255:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012258:	51                   	push   ecx
c0012259:	e8 63 ef ff ff       	call   c00111c1 <KeGetProcessTotalEnvCount(Process*)>
c001225e:	83 c4 10             	add    esp,0x10
c0012261:	39 c7                	cmp    edi,eax
c0012263:	7c 12                	jl     c0012277 <SysGetEnv(regs*)+0x37>
c0012265:	31 c0                	xor    eax,eax
c0012267:	31 d2                	xor    edx,edx
c0012269:	85 f6                	test   esi,esi
c001226b:	74 03                	je     c0012270 <SysGetEnv(regs*)+0x30>
c001226d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012270:	83 c4 10             	add    esp,0x10
c0012273:	5b                   	pop    ebx
c0012274:	5e                   	pop    esi
c0012275:	5f                   	pop    edi
c0012276:	c3                   	ret    
c0012277:	8d 44 24 08          	lea    eax,[esp+0x8]
c001227b:	83 ec 04             	sub    esp,0x4
c001227e:	57                   	push   edi
c001227f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012285:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0012288:	57                   	push   edi
c0012289:	50                   	push   eax
c001228a:	e8 52 ef ff ff       	call   c00111e1 <KeGetProcessEnvPair(Process*, int)>
c001228f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012292:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012296:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001229a:	83 c4 0c             	add    esp,0xc
c001229d:	85 d2                	test   edx,edx
c001229f:	75 23                	jne    c00122c4 <SysGetEnv(regs*)+0x84>
c00122a1:	83 ec 0c             	sub    esp,0xc
c00122a4:	50                   	push   eax
c00122a5:	e8 d6 e2 fe ff       	call   c0000580 <strlen>
c00122aa:	89 3c 24             	mov    DWORD PTR [esp],edi
c00122ad:	89 c3                	mov    ebx,eax
c00122af:	e8 cc e2 fe ff       	call   c0000580 <strlen>
c00122b4:	83 c4 10             	add    esp,0x10
c00122b7:	31 d2                	xor    edx,edx
c00122b9:	83 c4 10             	add    esp,0x10
c00122bc:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00122c0:	5b                   	pop    ebx
c00122c1:	5e                   	pop    esi
c00122c2:	5f                   	pop    edi
c00122c3:	c3                   	ret    
c00122c4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00122c7:	83 ec 08             	sub    esp,0x8
c00122ca:	50                   	push   eax
c00122cb:	56                   	push   esi
c00122cc:	e8 7f e3 fe ff       	call   c0000650 <strcpy>
c00122d1:	58                   	pop    eax
c00122d2:	5a                   	pop    edx
c00122d3:	68 00 20 02 c0       	push   0xc0022000
c00122d8:	56                   	push   esi
c00122d9:	e8 92 e5 fe ff       	call   c0000870 <strcat>
c00122de:	59                   	pop    ecx
c00122df:	5b                   	pop    ebx
c00122e0:	57                   	push   edi
c00122e1:	56                   	push   esi
c00122e2:	e8 89 e5 fe ff       	call   c0000870 <strcat>
c00122e7:	83 c4 10             	add    esp,0x10
c00122ea:	31 c0                	xor    eax,eax
c00122ec:	83 c4 10             	add    esp,0x10
c00122ef:	31 d2                	xor    edx,edx
c00122f1:	5b                   	pop    ebx
c00122f2:	5e                   	pop    esi
c00122f3:	5f                   	pop    edi
c00122f4:	c3                   	ret    

c00122f5 <SysSetFatAttrib(regs*)>:
c00122f5:	57                   	push   edi
c00122f6:	56                   	push   esi
c00122f7:	53                   	push   ebx
c00122f8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00122fc:	83 ec 0c             	sub    esp,0xc
c00122ff:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0012302:	68 14 01 00 00       	push   0x114
c0012307:	e8 c7 57 ff ff       	call   c0007ad3 <malloc>
c001230c:	83 c4 0c             	add    esp,0xc
c001230f:	89 c3                	mov    ebx,eax
c0012311:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012316:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012319:	50                   	push   eax
c001231a:	57                   	push   edi
c001231b:	53                   	push   ebx
c001231c:	e8 23 95 ff ff       	call   c000b844 <File::File(char const*, Process*)>
c0012321:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0012324:	83 c4 0c             	add    esp,0xc
c0012327:	0f b6 d4             	movzx  edx,ah
c001232a:	0f b6 c0             	movzx  eax,al
c001232d:	52                   	push   edx
c001232e:	50                   	push   eax
c001232f:	53                   	push   ebx
c0012330:	e8 3f 98 ff ff       	call   c000bb74 <File::chfatattr(unsigned char, unsigned char)>
c0012335:	83 c4 10             	add    esp,0x10
c0012338:	85 db                	test   ebx,ebx
c001233a:	89 c6                	mov    esi,eax
c001233c:	74 0c                	je     c001234a <SysSetFatAttrib(regs*)+0x55>
c001233e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012340:	83 ec 0c             	sub    esp,0xc
c0012343:	53                   	push   ebx
c0012344:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012347:	83 c4 10             	add    esp,0x10
c001234a:	5b                   	pop    ebx
c001234b:	31 c0                	xor    eax,eax
c001234d:	85 f6                	test   esi,esi
c001234f:	0f 95 c0             	setne  al
c0012352:	31 d2                	xor    edx,edx
c0012354:	5e                   	pop    esi
c0012355:	f7 d8                	neg    eax
c0012357:	83 d2 00             	adc    edx,0x0
c001235a:	f7 da                	neg    edx
c001235c:	5f                   	pop    edi
c001235d:	c3                   	ret    

c001235e <SysPipe(regs*)>:
c001235e:	57                   	push   edi
c001235f:	56                   	push   esi
c0012360:	53                   	push   ebx
c0012361:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012365:	83 ec 0c             	sub    esp,0xc
c0012368:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001236b:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001236e:	6a 20                	push   0x20
c0012370:	e8 5e 57 ff ff       	call   c0007ad3 <malloc>
c0012375:	89 c3                	mov    ebx,eax
c0012377:	58                   	pop    eax
c0012378:	5a                   	pop    edx
c0012379:	68 00 50 00 00       	push   0x5000
c001237e:	53                   	push   ebx
c001237f:	e8 ba 60 ff ff       	call   c000843e <Pipe::Pipe(int)>
c0012384:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012387:	e8 12 6e ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c001238c:	89 07                	mov    DWORD PTR [edi],eax
c001238e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012391:	e8 08 6e ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c0012396:	83 c4 10             	add    esp,0x10
c0012399:	31 d2                	xor    edx,edx
c001239b:	89 06                	mov    DWORD PTR [esi],eax
c001239d:	31 c0                	xor    eax,eax
c001239f:	5b                   	pop    ebx
c00123a0:	5e                   	pop    esi
c00123a1:	5f                   	pop    edi
c00123a2:	c3                   	ret    

c00123a3 <SysGetUnixTime(regs*)>:
c00123a3:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00123a8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00123ae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00123b2:	e9 03 9f ff ff       	jmp    c000c2ba <Clock::timeInSecondsLocal()>

c00123b7 <string_ends_with(char const*, char const*)>:
c00123b7:	57                   	push   edi
c00123b8:	56                   	push   esi
c00123b9:	53                   	push   ebx
c00123ba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00123be:	83 ec 0c             	sub    esp,0xc
c00123c1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00123c5:	53                   	push   ebx
c00123c6:	e8 b5 e1 fe ff       	call   c0000580 <strlen>
c00123cb:	89 3c 24             	mov    DWORD PTR [esp],edi
c00123ce:	89 c6                	mov    esi,eax
c00123d0:	e8 ab e1 fe ff       	call   c0000580 <strlen>
c00123d5:	83 c4 10             	add    esp,0x10
c00123d8:	31 d2                	xor    edx,edx
c00123da:	39 c6                	cmp    esi,eax
c00123dc:	7d 06                	jge    c00123e4 <string_ends_with(char const*, char const*)+0x2d>
c00123de:	5b                   	pop    ebx
c00123df:	89 d0                	mov    eax,edx
c00123e1:	5e                   	pop    esi
c00123e2:	5f                   	pop    edi
c00123e3:	c3                   	ret    
c00123e4:	83 ec 08             	sub    esp,0x8
c00123e7:	29 c6                	sub    esi,eax
c00123e9:	57                   	push   edi
c00123ea:	01 f3                	add    ebx,esi
c00123ec:	53                   	push   ebx
c00123ed:	e8 8e e3 fe ff       	call   c0000780 <strcmp>
c00123f2:	83 c4 10             	add    esp,0x10
c00123f5:	31 d2                	xor    edx,edx
c00123f7:	5b                   	pop    ebx
c00123f8:	5e                   	pop    esi
c00123f9:	85 c0                	test   eax,eax
c00123fb:	5f                   	pop    edi
c00123fc:	0f 94 c2             	sete   dl
c00123ff:	89 d0                	mov    eax,edx
c0012401:	c3                   	ret    

c0012402 <SysOpen(regs*)>:
c0012402:	56                   	push   esi
c0012403:	53                   	push   ebx
c0012404:	81 ec 04 01 00 00    	sub    esp,0x104
c001240a:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0012411:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012414:	85 c0                	test   eax,eax
c0012416:	0f 84 c4 01 00 00    	je     c00125e0 <SysOpen(regs*)+0x1de>
c001241c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001241f:	85 c0                	test   eax,eax
c0012421:	0f 84 b9 01 00 00    	je     c00125e0 <SysOpen(regs*)+0x1de>
c0012427:	6a 00                	push   0x0
c0012429:	68 02 20 02 c0       	push   0xc0022002
c001242e:	50                   	push   eax
c001242f:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012433:	56                   	push   esi
c0012434:	e8 73 91 ff ff       	call   c000b5ac <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0012439:	89 34 24             	mov    DWORD PTR [esp],esi
c001243c:	e8 3f e1 fe ff       	call   c0000580 <strlen>
c0012441:	83 c4 10             	add    esp,0x10
c0012444:	83 e8 01             	sub    eax,0x1
c0012447:	74 29                	je     c0012472 <SysOpen(regs*)+0x70>
c0012449:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c001244d:	83 fa 2e             	cmp    edx,0x2e
c0012450:	74 1c                	je     c001246e <SysOpen(regs*)+0x6c>
c0012452:	83 fa 3a             	cmp    edx,0x3a
c0012455:	74 17                	je     c001246e <SysOpen(regs*)+0x6c>
c0012457:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001245b:	83 e8 01             	sub    eax,0x1
c001245e:	74 12                	je     c0012472 <SysOpen(regs*)+0x70>
c0012460:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0012464:	83 fa 3a             	cmp    edx,0x3a
c0012467:	74 05                	je     c001246e <SysOpen(regs*)+0x6c>
c0012469:	83 fa 2e             	cmp    edx,0x2e
c001246c:	75 e9                	jne    c0012457 <SysOpen(regs*)+0x55>
c001246e:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0012472:	83 ec 08             	sub    esp,0x8
c0012475:	68 06 20 02 c0       	push   0xc0022006
c001247a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001247d:	50                   	push   eax
c001247e:	e8 34 ff ff ff       	call   c00123b7 <string_ends_with(char const*, char const*)>
c0012483:	83 c4 10             	add    esp,0x10
c0012486:	85 c0                	test   eax,eax
c0012488:	74 1d                	je     c00124a7 <SysOpen(regs*)+0xa5>
c001248a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001248d:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0012493:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001249a:	81 c4 04 01 00 00    	add    esp,0x104
c00124a0:	31 c0                	xor    eax,eax
c00124a2:	5b                   	pop    ebx
c00124a3:	31 d2                	xor    edx,edx
c00124a5:	5e                   	pop    esi
c00124a6:	c3                   	ret    
c00124a7:	83 ec 08             	sub    esp,0x8
c00124aa:	68 0b 20 02 c0       	push   0xc002200b
c00124af:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00124b2:	50                   	push   eax
c00124b3:	e8 ff fe ff ff       	call   c00123b7 <string_ends_with(char const*, char const*)>
c00124b8:	83 c4 10             	add    esp,0x10
c00124bb:	85 c0                	test   eax,eax
c00124bd:	75 cb                	jne    c001248a <SysOpen(regs*)+0x88>
c00124bf:	83 ec 08             	sub    esp,0x8
c00124c2:	68 07 20 02 c0       	push   0xc0022007
c00124c7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00124ca:	50                   	push   eax
c00124cb:	e8 b0 e2 fe ff       	call   c0000780 <strcmp>
c00124d0:	83 c4 10             	add    esp,0x10
c00124d3:	85 c0                	test   eax,eax
c00124d5:	74 b3                	je     c001248a <SysOpen(regs*)+0x88>
c00124d7:	83 ec 08             	sub    esp,0x8
c00124da:	68 06 20 02 c0       	push   0xc0022006
c00124df:	56                   	push   esi
c00124e0:	e8 d2 fe ff ff       	call   c00123b7 <string_ends_with(char const*, char const*)>
c00124e5:	83 c4 10             	add    esp,0x10
c00124e8:	85 c0                	test   eax,eax
c00124ea:	75 9e                	jne    c001248a <SysOpen(regs*)+0x88>
c00124ec:	83 ec 08             	sub    esp,0x8
c00124ef:	68 10 20 02 c0       	push   0xc0022010
c00124f4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00124f7:	50                   	push   eax
c00124f8:	e8 ba fe ff ff       	call   c00123b7 <string_ends_with(char const*, char const*)>
c00124fd:	83 c4 10             	add    esp,0x10
c0012500:	85 c0                	test   eax,eax
c0012502:	0f 85 eb 00 00 00    	jne    c00125f3 <SysOpen(regs*)+0x1f1>
c0012508:	83 ec 08             	sub    esp,0x8
c001250b:	68 15 20 02 c0       	push   0xc0022015
c0012510:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012513:	50                   	push   eax
c0012514:	e8 9e fe ff ff       	call   c00123b7 <string_ends_with(char const*, char const*)>
c0012519:	83 c4 10             	add    esp,0x10
c001251c:	85 c0                	test   eax,eax
c001251e:	0f 85 cf 00 00 00    	jne    c00125f3 <SysOpen(regs*)+0x1f1>
c0012524:	83 ec 08             	sub    esp,0x8
c0012527:	68 11 20 02 c0       	push   0xc0022011
c001252c:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001252f:	51                   	push   ecx
c0012530:	e8 4b e2 fe ff       	call   c0000780 <strcmp>
c0012535:	83 c4 10             	add    esp,0x10
c0012538:	85 c0                	test   eax,eax
c001253a:	0f 84 b3 00 00 00    	je     c00125f3 <SysOpen(regs*)+0x1f1>
c0012540:	83 ec 08             	sub    esp,0x8
c0012543:	68 10 20 02 c0       	push   0xc0022010
c0012548:	56                   	push   esi
c0012549:	e8 69 fe ff ff       	call   c00123b7 <string_ends_with(char const*, char const*)>
c001254e:	83 c4 10             	add    esp,0x10
c0012551:	85 c0                	test   eax,eax
c0012553:	0f 85 9a 00 00 00    	jne    c00125f3 <SysOpen(regs*)+0x1f1>
c0012559:	83 ec 0c             	sub    esp,0xc
c001255c:	68 14 01 00 00       	push   0x114
c0012561:	e8 6d 55 ff ff       	call   c0007ad3 <malloc>
c0012566:	83 c4 0c             	add    esp,0xc
c0012569:	89 c6                	mov    esi,eax
c001256b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012570:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012573:	50                   	push   eax
c0012574:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012577:	52                   	push   edx
c0012578:	56                   	push   esi
c0012579:	e8 c6 92 ff ff       	call   c000b844 <File::File(char const*, Process*)>
c001257e:	83 c4 10             	add    esp,0x10
c0012581:	85 f6                	test   esi,esi
c0012583:	74 5b                	je     c00125e0 <SysOpen(regs*)+0x1de>
c0012585:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012588:	0f b6 c2             	movzx  eax,dl
c001258b:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001258e:	89 d0                	mov    eax,edx
c0012590:	83 e0 01             	and    eax,0x1
c0012593:	f6 c2 02             	test   dl,0x2
c0012596:	74 03                	je     c001259b <SysOpen(regs*)+0x199>
c0012598:	83 c8 02             	or     eax,0x2
c001259b:	f6 c2 04             	test   dl,0x4
c001259e:	74 03                	je     c00125a3 <SysOpen(regs*)+0x1a1>
c00125a0:	83 c8 04             	or     eax,0x4
c00125a3:	f6 c2 08             	test   dl,0x8
c00125a6:	74 03                	je     c00125ab <SysOpen(regs*)+0x1a9>
c00125a8:	83 c8 0a             	or     eax,0xa
c00125ab:	80 e2 10             	and    dl,0x10
c00125ae:	74 03                	je     c00125b3 <SysOpen(regs*)+0x1b1>
c00125b0:	83 c8 12             	or     eax,0x12
c00125b3:	83 ec 08             	sub    esp,0x8
c00125b6:	50                   	push   eax
c00125b7:	56                   	push   esi
c00125b8:	e8 4f 93 ff ff       	call   c000b90c <File::open(FileOpenMode)>
c00125bd:	83 c4 10             	add    esp,0x10
c00125c0:	85 c0                	test   eax,eax
c00125c2:	75 1c                	jne    c00125e0 <SysOpen(regs*)+0x1de>
c00125c4:	83 ec 0c             	sub    esp,0xc
c00125c7:	56                   	push   esi
c00125c8:	e8 d1 6b ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c00125cd:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00125d0:	83 c4 10             	add    esp,0x10
c00125d3:	89 02                	mov    DWORD PTR [edx],eax
c00125d5:	c1 f8 1f             	sar    eax,0x1f
c00125d8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00125db:	e9 ba fe ff ff       	jmp    c001249a <SysOpen(regs*)+0x98>
c00125e0:	81 c4 04 01 00 00    	add    esp,0x104
c00125e6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00125eb:	5b                   	pop    ebx
c00125ec:	ba ff ff ff ff       	mov    edx,0xffffffff
c00125f1:	5e                   	pop    esi
c00125f2:	c3                   	ret    
c00125f3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00125f6:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00125fc:	e9 92 fe ff ff       	jmp    c0012493 <SysOpen(regs*)+0x91>

c0012601 <KeSystemCall(regs*, void*)>:
c0012601:	53                   	push   ebx
c0012602:	83 ec 08             	sub    esp,0x8
c0012605:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012609:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001260c:	83 f8 3b             	cmp    eax,0x3b
c001260f:	77 16                	ja     c0012627 <KeSystemCall(regs*, void*)+0x26>
c0012611:	8b 14 85 20 34 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcbe0]
c0012618:	85 d2                	test   edx,edx
c001261a:	74 0b                	je     c0012627 <KeSystemCall(regs*, void*)+0x26>
c001261c:	83 ec 0c             	sub    esp,0xc
c001261f:	53                   	push   ebx
c0012620:	ff d2                	call   edx
c0012622:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0012625:	eb 0d                	jmp    c0012634 <KeSystemCall(regs*, void*)+0x33>
c0012627:	52                   	push   edx
c0012628:	52                   	push   edx
c0012629:	50                   	push   eax
c001262a:	68 1a 20 02 c0       	push   0xc002201a
c001262f:	e8 d6 82 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0012634:	83 c4 10             	add    esp,0x10
c0012637:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001263c:	83 c4 08             	add    esp,0x8
c001263f:	31 d2                	xor    edx,edx
c0012641:	5b                   	pop    ebx
c0012642:	c3                   	ret    
c0012643:	90                   	nop

c0012644 <KeSwitchEndian16(unsigned short)>:
c0012644:	83 ec 04             	sub    esp,0x4
c0012647:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001264b:	66 89 04 24          	mov    WORD PTR [esp],ax
c001264f:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012653:	c1 f8 08             	sar    eax,0x8
c0012656:	89 c2                	mov    edx,eax
c0012658:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001265c:	c1 e0 08             	shl    eax,0x8
c001265f:	09 d0                	or     eax,edx
c0012661:	83 c4 04             	add    esp,0x4
c0012664:	c3                   	ret    
c0012665:	8d 76 00             	lea    esi,[esi+0x0]

c0012668 <KeSwitchEndian32(unsigned int)>:
c0012668:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001266c:	c1 e8 18             	shr    eax,0x18
c001266f:	89 c2                	mov    edx,eax
c0012671:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012675:	c1 e0 08             	shl    eax,0x8
c0012678:	25 00 00 ff 00       	and    eax,0xff0000
c001267d:	09 c2                	or     edx,eax
c001267f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012683:	c1 e8 08             	shr    eax,0x8
c0012686:	25 00 ff 00 00       	and    eax,0xff00
c001268b:	09 c2                	or     edx,eax
c001268d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012691:	c1 e0 18             	shl    eax,0x18
c0012694:	09 d0                	or     eax,edx
c0012696:	c3                   	ret    
c0012697:	90                   	nop

c0012698 <EthernetCRC32(unsigned char*, int)>:
c0012698:	83 ec 10             	sub    esp,0x10
c001269b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00126a0:	75 0a                	jne    c00126ac <EthernetCRC32(unsigned char*, int)+0x14>
c00126a2:	b8 00 00 00 00       	mov    eax,0x0
c00126a7:	e9 8c 00 00 00       	jmp    c0012738 <EthernetCRC32(unsigned char*, int)+0xa0>
c00126ac:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00126b1:	7f 09                	jg     c00126bc <EthernetCRC32(unsigned char*, int)+0x24>
c00126b3:	b8 00 00 00 00       	mov    eax,0x0
c00126b8:	eb 7e                	jmp    c0012738 <EthernetCRC32(unsigned char*, int)+0xa0>
c00126ba:	66 90                	xchg   ax,ax
c00126bc:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c00126c4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00126cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00126d0:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c00126d4:	7d 5a                	jge    c0012730 <EthernetCRC32(unsigned char*, int)+0x98>
c00126d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00126da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00126de:	01 d0                	add    eax,edx
c00126e0:	8a 00                	mov    al,BYTE PTR [eax]
c00126e2:	0f b6 c0             	movzx  eax,al
c00126e5:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c00126e9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00126f1:	8d 76 00             	lea    esi,[esi+0x0]
c00126f4:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c00126f9:	7f 2d                	jg     c0012728 <EthernetCRC32(unsigned char*, int)+0x90>
c00126fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126ff:	83 e0 01             	and    eax,0x1
c0012702:	74 10                	je     c0012714 <EthernetCRC32(unsigned char*, int)+0x7c>
c0012704:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012708:	d1 e8                	shr    eax,1
c001270a:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001270f:	eb 0b                	jmp    c001271c <EthernetCRC32(unsigned char*, int)+0x84>
c0012711:	8d 76 00             	lea    esi,[esi+0x0]
c0012714:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012718:	d1 e8                	shr    eax,1
c001271a:	66 90                	xchg   ax,ax
c001271c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012720:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0012725:	eb cd                	jmp    c00126f4 <EthernetCRC32(unsigned char*, int)+0x5c>
c0012727:	90                   	nop
c0012728:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c001272d:	eb 9d                	jmp    c00126cc <EthernetCRC32(unsigned char*, int)+0x34>
c001272f:	90                   	nop
c0012730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012734:	f7 d0                	not    eax
c0012736:	66 90                	xchg   ax,ax
c0012738:	83 c4 10             	add    esp,0x10
c001273b:	c3                   	ret    

c001273c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c001273c:	83 ec 2c             	sub    esp,0x2c
c001273f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012743:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012748:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001274c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012750:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012754:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012757:	0f b7 c0             	movzx  eax,ax
c001275a:	3d 06 08 00 00       	cmp    eax,0x806
c001275f:	75 13                	jne    c0012774 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0012761:	83 ec 0c             	sub    esp,0xc
c0012764:	68 2e 20 02 c0       	push   0xc002202e
c0012769:	e8 9c 81 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001276e:	83 c4 10             	add    esp,0x10
c0012771:	eb 25                	jmp    c0012798 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012773:	90                   	nop
c0012774:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012778:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001277b:	0f b7 c0             	movzx  eax,ax
c001277e:	3d 00 08 00 00       	cmp    eax,0x800
c0012783:	75 13                	jne    c0012798 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012785:	83 ec 0c             	sub    esp,0xc
c0012788:	68 44 20 02 c0       	push   0xc0022044
c001278d:	e8 78 81 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0012792:	83 c4 10             	add    esp,0x10
c0012795:	8d 76 00             	lea    esi,[esi+0x0]
c0012798:	90                   	nop
c0012799:	83 c4 2c             	add    esp,0x2c
c001279c:	c3                   	ret    

c001279d <CmOpen(char const*)>:
c001279d:	57                   	push   edi
c001279e:	56                   	push   esi
c001279f:	53                   	push   ebx
c00127a0:	83 ec 1c             	sub    esp,0x1c
c00127a3:	6a 30                	push   0x30
c00127a5:	e8 29 53 ff ff       	call   c0007ad3 <malloc>
c00127aa:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00127b1:	89 c3                	mov    ebx,eax
c00127b3:	e8 1b 53 ff ff       	call   c0007ad3 <malloc>
c00127b8:	83 c4 0c             	add    esp,0xc
c00127bb:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c00127c1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00127c5:	89 c6                	mov    esi,eax
c00127c7:	50                   	push   eax
c00127c8:	e8 77 90 ff ff       	call   c000b844 <File::File(char const*, Process*)>
c00127cd:	83 c4 0c             	add    esp,0xc
c00127d0:	89 33                	mov    DWORD PTR [ebx],esi
c00127d2:	8d 44 24 07          	lea    eax,[esp+0x7]
c00127d6:	50                   	push   eax
c00127d7:	8d 44 24 10          	lea    eax,[esp+0x10]
c00127db:	50                   	push   eax
c00127dc:	56                   	push   esi
c00127dd:	e8 2c 94 ff ff       	call   c000bc0e <File::stat(unsigned long long*, bool*)>
c00127e2:	5a                   	pop    edx
c00127e3:	59                   	pop    ecx
c00127e4:	6a 01                	push   0x1
c00127e6:	ff 33                	push   DWORD PTR [ebx]
c00127e8:	e8 1f 91 ff ff       	call   c000b90c <File::open(FileOpenMode)>
c00127ed:	5e                   	pop    esi
c00127ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00127f2:	e8 dc 52 ff ff       	call   c0007ad3 <malloc>
c00127f7:	5a                   	pop    edx
c00127f8:	8d 74 24 10          	lea    esi,[esp+0x10]
c00127fc:	89 c7                	mov    edi,eax
c00127fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012800:	8b 10                	mov    edx,DWORD PTR [eax]
c0012802:	56                   	push   esi
c0012803:	57                   	push   edi
c0012804:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012808:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001280c:	50                   	push   eax
c001280d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012810:	83 c4 14             	add    esp,0x14
c0012813:	ff 33                	push   DWORD PTR [ebx]
c0012815:	e8 50 91 ff ff       	call   c000b96a <File::close()>
c001281a:	59                   	pop    ecx
c001281b:	58                   	pop    eax
c001281c:	6a 13                	push   0x13
c001281e:	ff 33                	push   DWORD PTR [ebx]
c0012820:	e8 e7 90 ff ff       	call   c000b90c <File::open(FileOpenMode)>
c0012825:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012827:	8b 10                	mov    edx,DWORD PTR [eax]
c0012829:	89 34 24             	mov    DWORD PTR [esp],esi
c001282c:	57                   	push   edi
c001282d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012831:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012835:	50                   	push   eax
c0012836:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012839:	83 c4 14             	add    esp,0x14
c001283c:	57                   	push   edi
c001283d:	e8 a1 52 ff ff       	call   c0007ae3 <free>
c0012842:	83 c4 10             	add    esp,0x10
c0012845:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0012848:	75 10                	jne    c001285a <CmOpen(char const*)+0xbd>
c001284a:	83 ec 0c             	sub    esp,0xc
c001284d:	68 59 20 02 c0       	push   0xc0022059
c0012852:	e8 b2 ea ff ff       	call   c0011309 <KePanic(char const*)>
c0012857:	83 c4 10             	add    esp,0x10
c001285a:	50                   	push   eax
c001285b:	6a 00                	push   0x0
c001285d:	6a 00                	push   0x0
c001285f:	ff 33                	push   DWORD PTR [ebx]
c0012861:	8d 7b 05             	lea    edi,[ebx+0x5]
c0012864:	e8 61 91 ff ff       	call   c000b9ca <File::seek(unsigned long long)>
c0012869:	8b 03                	mov    eax,DWORD PTR [ebx]
c001286b:	8b 10                	mov    edx,DWORD PTR [eax]
c001286d:	89 34 24             	mov    DWORD PTR [esp],esi
c0012870:	57                   	push   edi
c0012871:	6a 00                	push   0x0
c0012873:	6a 2b                	push   0x2b
c0012875:	50                   	push   eax
c0012876:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012879:	83 c4 1c             	add    esp,0x1c
c001287c:	6a 00                	push   0x0
c001287e:	6a 00                	push   0x0
c0012880:	ff 33                	push   DWORD PTR [ebx]
c0012882:	e8 43 91 ff ff       	call   c000b9ca <File::seek(unsigned long long)>
c0012887:	83 c4 0c             	add    esp,0xc
c001288a:	6a 08                	push   0x8
c001288c:	68 6a 20 02 c0       	push   0xc002206a
c0012891:	57                   	push   edi
c0012892:	e8 e9 da fe ff       	call   c0000380 <memcmp>
c0012897:	83 c4 10             	add    esp,0x10
c001289a:	85 c0                	test   eax,eax
c001289c:	74 10                	je     c00128ae <CmOpen(char const*)+0x111>
c001289e:	83 ec 0c             	sub    esp,0xc
c00128a1:	68 73 20 02 c0       	push   0xc0022073
c00128a6:	e8 5e ea ff ff       	call   c0011309 <KePanic(char const*)>
c00128ab:	83 c4 10             	add    esp,0x10
c00128ae:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c00128b2:	83 c4 10             	add    esp,0x10
c00128b5:	89 d8                	mov    eax,ebx
c00128b7:	5b                   	pop    ebx
c00128b8:	5e                   	pop    esi
c00128b9:	5f                   	pop    edi
c00128ba:	c3                   	ret    

c00128bb <CmClose(Reghive_Tag*)>:
c00128bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128bf:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c00128c3:	74 0b                	je     c00128d0 <CmClose(Reghive_Tag*)+0x15>
c00128c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00128c7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00128cb:	e9 9a 90 ff ff       	jmp    c000b96a <File::close()>
c00128d0:	c3                   	ret    

c00128d1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c00128d1:	53                   	push   ebx
c00128d2:	83 ec 18             	sub    esp,0x18
c00128d5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00128d9:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00128dd:	74 29                	je     c0012908 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c00128df:	50                   	push   eax
c00128e0:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c00128e5:	99                   	cdq    
c00128e6:	52                   	push   edx
c00128e7:	50                   	push   eax
c00128e8:	ff 33                	push   DWORD PTR [ebx]
c00128ea:	e8 db 90 ff ff       	call   c000b9ca <File::seek(unsigned long long)>
c00128ef:	8b 03                	mov    eax,DWORD PTR [ebx]
c00128f1:	5a                   	pop    edx
c00128f2:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00128f6:	8b 10                	mov    edx,DWORD PTR [eax]
c00128f8:	51                   	push   ecx
c00128f9:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00128fd:	6a 00                	push   0x0
c00128ff:	6a 2b                	push   0x2b
c0012901:	50                   	push   eax
c0012902:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012905:	83 c4 20             	add    esp,0x20
c0012908:	83 c4 18             	add    esp,0x18
c001290b:	5b                   	pop    ebx
c001290c:	c3                   	ret    

c001290d <CmGetString(Reghive_Tag*, int, char*)>:
c001290d:	55                   	push   ebp
c001290e:	57                   	push   edi
c001290f:	56                   	push   esi
c0012910:	53                   	push   ebx
c0012911:	31 db                	xor    ebx,ebx
c0012913:	83 ec 70             	sub    esp,0x70
c0012916:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001291a:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0012921:	50                   	push   eax
c0012922:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012929:	55                   	push   ebp
c001292a:	e8 a2 ff ff ff       	call   c00128d1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001292f:	83 c4 10             	add    esp,0x10
c0012932:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0012937:	c1 e0 08             	shl    eax,0x8
c001293a:	89 c2                	mov    edx,eax
c001293c:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012941:	09 d0                	or     eax,edx
c0012943:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0012948:	c1 e0 08             	shl    eax,0x8
c001294b:	09 d0                	or     eax,edx
c001294d:	74 25                	je     c0012974 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c001294f:	52                   	push   edx
c0012950:	8d 54 24 39          	lea    edx,[esp+0x39]
c0012954:	52                   	push   edx
c0012955:	6b fb 0d             	imul   edi,ebx,0xd
c0012958:	50                   	push   eax
c0012959:	55                   	push   ebp
c001295a:	e8 72 ff ff ff       	call   c00128d1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001295f:	8d 74 24 49          	lea    esi,[esp+0x49]
c0012963:	b9 27 00 00 00       	mov    ecx,0x27
c0012968:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c001296f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012971:	83 c4 10             	add    esp,0x10
c0012974:	83 c3 03             	add    ebx,0x3
c0012977:	83 fb 15             	cmp    ebx,0x15
c001297a:	75 b6                	jne    c0012932 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c001297c:	83 c4 6c             	add    esp,0x6c
c001297f:	5b                   	pop    ebx
c0012980:	5e                   	pop    esi
c0012981:	5f                   	pop    edi
c0012982:	5d                   	pop    ebp
c0012983:	c3                   	ret    

c0012984 <CmEnterDirectory(Reghive_Tag*, int)>:
c0012984:	83 ec 40             	sub    esp,0x40
c0012987:	8d 44 24 09          	lea    eax,[esp+0x9]
c001298b:	50                   	push   eax
c001298c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012990:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012994:	e8 38 ff ff ff       	call   c00128d1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012999:	83 c4 10             	add    esp,0x10
c001299c:	83 c8 ff             	or     eax,0xffffffff
c001299f:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c00129a4:	75 19                	jne    c00129bf <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c00129a6:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00129ab:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c00129b0:	c1 e0 08             	shl    eax,0x8
c00129b3:	09 c2                	or     edx,eax
c00129b5:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c00129ba:	c1 e0 10             	shl    eax,0x10
c00129bd:	09 d0                	or     eax,edx
c00129bf:	83 c4 3c             	add    esp,0x3c
c00129c2:	c3                   	ret    

c00129c3 <CmGetNext(Reghive_Tag*, int)>:
c00129c3:	83 ec 40             	sub    esp,0x40
c00129c6:	8d 44 24 09          	lea    eax,[esp+0x9]
c00129ca:	50                   	push   eax
c00129cb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00129cf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00129d3:	e8 f9 fe ff ff       	call   c00128d1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00129d8:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00129dd:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c00129e2:	c1 e0 08             	shl    eax,0x8
c00129e5:	09 c2                	or     edx,eax
c00129e7:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c00129ec:	83 c4 4c             	add    esp,0x4c
c00129ef:	c1 e0 10             	shl    eax,0x10
c00129f2:	09 d0                	or     eax,edx
c00129f4:	c3                   	ret    

c00129f5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c00129f5:	53                   	push   ebx
c00129f6:	83 ec 18             	sub    esp,0x18
c00129f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00129fd:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012a01:	74 29                	je     c0012a2c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012a03:	50                   	push   eax
c0012a04:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012a09:	99                   	cdq    
c0012a0a:	52                   	push   edx
c0012a0b:	50                   	push   eax
c0012a0c:	ff 33                	push   DWORD PTR [ebx]
c0012a0e:	e8 b7 8f ff ff       	call   c000b9ca <File::seek(unsigned long long)>
c0012a13:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012a15:	5a                   	pop    edx
c0012a16:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012a1a:	8b 10                	mov    edx,DWORD PTR [eax]
c0012a1c:	51                   	push   ecx
c0012a1d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012a21:	6a 00                	push   0x0
c0012a23:	6a 2b                	push   0x2b
c0012a25:	50                   	push   eax
c0012a26:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012a29:	83 c4 20             	add    esp,0x20
c0012a2c:	83 c4 18             	add    esp,0x18
c0012a2f:	5b                   	pop    ebx
c0012a30:	c3                   	ret    

c0012a31 <CmFreeExtent(Reghive_Tag*, int)>:
c0012a31:	53                   	push   ebx
c0012a32:	83 ec 3c             	sub    esp,0x3c
c0012a35:	6a 2b                	push   0x2b
c0012a37:	6a 00                	push   0x0
c0012a39:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012a3d:	53                   	push   ebx
c0012a3e:	e8 ad da fe ff       	call   c00004f0 <memset>
c0012a43:	83 c4 0c             	add    esp,0xc
c0012a46:	53                   	push   ebx
c0012a47:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012a4b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012a4f:	e8 a1 ff ff ff       	call   c00129f5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012a54:	83 c4 48             	add    esp,0x48
c0012a57:	5b                   	pop    ebx
c0012a58:	c3                   	ret    

c0012a59 <CmUpdateHeader(Reghive_Tag*)>:
c0012a59:	83 ec 0c             	sub    esp,0xc
c0012a5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a60:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012a64:	74 10                	je     c0012a76 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0012a66:	52                   	push   edx
c0012a67:	8d 50 05             	lea    edx,[eax+0x5]
c0012a6a:	52                   	push   edx
c0012a6b:	6a 00                	push   0x0
c0012a6d:	50                   	push   eax
c0012a6e:	e8 82 ff ff ff       	call   c00129f5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012a73:	83 c4 10             	add    esp,0x10
c0012a76:	83 c4 0c             	add    esp,0xc
c0012a79:	c3                   	ret    

c0012a7a <CmExpand(Reghive_Tag*, int)>:
c0012a7a:	55                   	push   ebp
c0012a7b:	57                   	push   edi
c0012a7c:	83 cf ff             	or     edi,0xffffffff
c0012a7f:	56                   	push   esi
c0012a80:	53                   	push   ebx
c0012a81:	83 ec 3c             	sub    esp,0x3c
c0012a84:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012a88:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012a8c:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012a90:	74 59                	je     c0012aeb <CmExpand(Reghive_Tag*, int)+0x71>
c0012a92:	50                   	push   eax
c0012a93:	31 d2                	xor    edx,edx
c0012a95:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012a99:	31 ff                	xor    edi,edi
c0012a9b:	52                   	push   edx
c0012a9c:	50                   	push   eax
c0012a9d:	ff 33                	push   DWORD PTR [ebx]
c0012a9f:	e8 26 8f ff ff       	call   c000b9ca <File::seek(unsigned long long)>
c0012aa4:	83 c4 0c             	add    esp,0xc
c0012aa7:	6a 2b                	push   0x2b
c0012aa9:	6a 00                	push   0x0
c0012aab:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c0012aaf:	55                   	push   ebp
c0012ab0:	e8 3b da fe ff       	call   c00004f0 <memset>
c0012ab5:	83 c4 10             	add    esp,0x10
c0012ab8:	39 f7                	cmp    edi,esi
c0012aba:	7d 1b                	jge    c0012ad7 <CmExpand(Reghive_Tag*, int)+0x5d>
c0012abc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012abe:	83 ec 0c             	sub    esp,0xc
c0012ac1:	47                   	inc    edi
c0012ac2:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012ac6:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ac8:	51                   	push   ecx
c0012ac9:	55                   	push   ebp
c0012aca:	6a 00                	push   0x0
c0012acc:	6a 2b                	push   0x2b
c0012ace:	50                   	push   eax
c0012acf:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012ad2:	83 c4 20             	add    esp,0x20
c0012ad5:	eb e1                	jmp    c0012ab8 <CmExpand(Reghive_Tag*, int)+0x3e>
c0012ad7:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c0012ada:	83 ec 0c             	sub    esp,0xc
c0012add:	01 fe                	add    esi,edi
c0012adf:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c0012ae2:	53                   	push   ebx
c0012ae3:	e8 71 ff ff ff       	call   c0012a59 <CmUpdateHeader(Reghive_Tag*)>
c0012ae8:	83 c4 10             	add    esp,0x10
c0012aeb:	83 c4 3c             	add    esp,0x3c
c0012aee:	89 f8                	mov    eax,edi
c0012af0:	5b                   	pop    ebx
c0012af1:	5e                   	pop    esi
c0012af2:	5f                   	pop    edi
c0012af3:	5d                   	pop    ebp
c0012af4:	c3                   	ret    

c0012af5 <CmFindUnusedExtent(Reghive_Tag*)>:
c0012af5:	55                   	push   ebp
c0012af6:	57                   	push   edi
c0012af7:	56                   	push   esi
c0012af8:	53                   	push   ebx
c0012af9:	83 cb ff             	or     ebx,0xffffffff
c0012afc:	83 ec 1c             	sub    esp,0x1c
c0012aff:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012b03:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0012b07:	74 68                	je     c0012b71 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012b09:	51                   	push   ecx
c0012b0a:	be 2b 00 00 00       	mov    esi,0x2b
c0012b0f:	6a 00                	push   0x0
c0012b11:	31 ff                	xor    edi,edi
c0012b13:	6a 00                	push   0x0
c0012b15:	31 db                	xor    ebx,ebx
c0012b17:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012b1a:	e8 ab 8e ff ff       	call   c000b9ca <File::seek(unsigned long long)>
c0012b1f:	83 c4 10             	add    esp,0x10
c0012b22:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012b25:	76 3b                	jbe    c0012b62 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012b27:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012b2a:	83 ec 0c             	sub    esp,0xc
c0012b2d:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012b31:	8b 10                	mov    edx,DWORD PTR [eax]
c0012b33:	51                   	push   ecx
c0012b34:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012b38:	51                   	push   ecx
c0012b39:	6a 00                	push   0x0
c0012b3b:	6a 01                	push   0x1
c0012b3d:	50                   	push   eax
c0012b3e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012b41:	83 c4 20             	add    esp,0x20
c0012b44:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012b49:	74 26                	je     c0012b71 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012b4b:	52                   	push   edx
c0012b4c:	43                   	inc    ebx
c0012b4d:	57                   	push   edi
c0012b4e:	56                   	push   esi
c0012b4f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012b52:	e8 73 8e ff ff       	call   c000b9ca <File::seek(unsigned long long)>
c0012b57:	83 c6 2b             	add    esi,0x2b
c0012b5a:	83 d7 00             	adc    edi,0x0
c0012b5d:	83 c4 10             	add    esp,0x10
c0012b60:	eb c0                	jmp    c0012b22 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012b62:	50                   	push   eax
c0012b63:	50                   	push   eax
c0012b64:	6a 40                	push   0x40
c0012b66:	55                   	push   ebp
c0012b67:	e8 0e ff ff ff       	call   c0012a7a <CmExpand(Reghive_Tag*, int)>
c0012b6c:	83 c4 10             	add    esp,0x10
c0012b6f:	89 c3                	mov    ebx,eax
c0012b71:	83 c4 1c             	add    esp,0x1c
c0012b74:	89 d8                	mov    eax,ebx
c0012b76:	5b                   	pop    ebx
c0012b77:	5e                   	pop    esi
c0012b78:	5f                   	pop    edi
c0012b79:	5d                   	pop    ebp
c0012b7a:	c3                   	ret    

c0012b7b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0012b7b:	55                   	push   ebp
c0012b7c:	57                   	push   edi
c0012b7d:	56                   	push   esi
c0012b7e:	53                   	push   ebx
c0012b7f:	81 ec 88 00 00 00    	sub    esp,0x88
c0012b85:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0012b8c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012b93:	e8 5d ff ff ff       	call   c0012af5 <CmFindUnusedExtent(Reghive_Tag*)>
c0012b98:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012b9c:	83 c4 0c             	add    esp,0xc
c0012b9f:	6a 2b                	push   0x2b
c0012ba1:	6a 00                	push   0x0
c0012ba3:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0012ba7:	55                   	push   ebp
c0012ba8:	e8 43 d9 fe ff       	call   c00004f0 <memset>
c0012bad:	83 c4 10             	add    esp,0x10
c0012bb0:	85 db                	test   ebx,ebx
c0012bb2:	74 12                	je     c0012bc6 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0012bb4:	51                   	push   ecx
c0012bb5:	55                   	push   ebp
c0012bb6:	53                   	push   ebx
c0012bb7:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012bbe:	e8 0e fd ff ff       	call   c00128d1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012bc3:	83 c4 10             	add    esp,0x10
c0012bc6:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0012bca:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012bd1:	b9 2b 00 00 00       	mov    ecx,0x2b
c0012bd6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012bd8:	85 db                	test   ebx,ebx
c0012bda:	74 49                	je     c0012c25 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0012bdc:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0012be1:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0012be6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012bea:	c1 e0 08             	shl    eax,0x8
c0012bed:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0012bf3:	09 c8                	or     eax,ecx
c0012bf5:	74 11                	je     c0012c08 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0012bf7:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012bfb:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0012bff:	c1 e8 10             	shr    eax,0x10
c0012c02:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0012c06:	eb 0f                	jmp    c0012c17 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0012c08:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012c0d:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012c12:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012c17:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0012c1b:	c1 ea 08             	shr    edx,0x8
c0012c1e:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0012c23:	eb 0f                	jmp    c0012c34 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0012c25:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012c2a:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012c2f:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012c34:	52                   	push   edx
c0012c35:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012c39:	50                   	push   eax
c0012c3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012c3e:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012c45:	e8 ab fd ff ff       	call   c00129f5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012c4a:	83 c4 10             	add    esp,0x10
c0012c4d:	85 db                	test   ebx,ebx
c0012c4f:	74 12                	je     c0012c63 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0012c51:	50                   	push   eax
c0012c52:	55                   	push   ebp
c0012c53:	53                   	push   ebx
c0012c54:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012c5b:	e8 95 fd ff ff       	call   c00129f5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012c60:	83 c4 10             	add    esp,0x10
c0012c63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012c67:	83 c4 7c             	add    esp,0x7c
c0012c6a:	5b                   	pop    ebx
c0012c6b:	5e                   	pop    esi
c0012c6c:	5f                   	pop    edi
c0012c6d:	5d                   	pop    ebp
c0012c6e:	c3                   	ret    

c0012c6f <CmSetString(Reghive_Tag*, int, char const*)>:
c0012c6f:	55                   	push   ebp
c0012c70:	57                   	push   edi
c0012c71:	56                   	push   esi
c0012c72:	53                   	push   ebx
c0012c73:	bb 27 00 00 00       	mov    ebx,0x27
c0012c78:	81 ec 88 00 00 00    	sub    esp,0x88
c0012c7e:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c0012c85:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0012c8c:	e8 ef d8 fe ff       	call   c0000580 <strlen>
c0012c91:	8d 48 26             	lea    ecx,[eax+0x26]
c0012c94:	89 c8                	mov    eax,ecx
c0012c96:	99                   	cdq    
c0012c97:	f7 fb                	idiv   ebx
c0012c99:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012c9d:	83 c4 10             	add    esp,0x10
c0012ca0:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0012ca6:	7e 10                	jle    c0012cb8 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0012ca8:	83 ec 0c             	sub    esp,0xc
c0012cab:	68 84 20 02 c0       	push   0xc0022084
c0012cb0:	e8 54 e6 ff ff       	call   c0011309 <KePanic(char const*)>
c0012cb5:	83 c4 10             	add    esp,0x10
c0012cb8:	53                   	push   ebx
c0012cb9:	31 ed                	xor    ebp,ebp
c0012cbb:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0012cbf:	53                   	push   ebx
c0012cc0:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012cc7:	57                   	push   edi
c0012cc8:	e8 04 fc ff ff       	call   c00128d1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012ccd:	83 c4 10             	add    esp,0x10
c0012cd0:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c0012cd4:	89 f0                	mov    eax,esi
c0012cd6:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c0012cda:	c1 e0 08             	shl    eax,0x8
c0012cdd:	09 c6                	or     esi,eax
c0012cdf:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0012ce3:	c1 e6 08             	shl    esi,0x8
c0012ce6:	09 c6                	or     esi,eax
c0012ce8:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0012cec:	7e 72                	jle    c0012d60 <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c0012cee:	85 f6                	test   esi,esi
c0012cf0:	75 25                	jne    c0012d17 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0012cf2:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0012cf7:	8d 44 24 45          	lea    eax,[esp+0x45]
c0012cfb:	50                   	push   eax
c0012cfc:	6a 00                	push   0x0
c0012cfe:	6a 00                	push   0x0
c0012d00:	57                   	push   edi
c0012d01:	e8 75 fe ff ff       	call   c0012b7b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012d06:	83 c4 10             	add    esp,0x10
c0012d09:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0012d0c:	89 c6                	mov    esi,eax
c0012d0e:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0012d11:	c1 f8 10             	sar    eax,0x10
c0012d14:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0012d17:	51                   	push   ecx
c0012d18:	8d 54 24 49          	lea    edx,[esp+0x49]
c0012d1c:	52                   	push   edx
c0012d1d:	56                   	push   esi
c0012d1e:	57                   	push   edi
c0012d1f:	e8 ad fb ff ff       	call   c00128d1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012d24:	83 c4 0c             	add    esp,0xc
c0012d27:	6a 27                	push   0x27
c0012d29:	6a 00                	push   0x0
c0012d2b:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012d2f:	51                   	push   ecx
c0012d30:	e8 bb d7 fe ff       	call   c00004f0 <memset>
c0012d35:	6b c5 27             	imul   eax,ebp,0x27
c0012d38:	83 c4 0c             	add    esp,0xc
c0012d3b:	6a 27                	push   0x27
c0012d3d:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0012d44:	50                   	push   eax
c0012d45:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012d49:	51                   	push   ecx
c0012d4a:	e8 41 d9 fe ff       	call   c0000690 <strncpy>
c0012d4f:	83 c4 0c             	add    esp,0xc
c0012d52:	8d 54 24 49          	lea    edx,[esp+0x49]
c0012d56:	52                   	push   edx
c0012d57:	56                   	push   esi
c0012d58:	57                   	push   edi
c0012d59:	e8 97 fc ff ff       	call   c00129f5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012d5e:	eb 19                	jmp    c0012d79 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c0012d60:	85 f6                	test   esi,esi
c0012d62:	74 18                	je     c0012d7c <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c0012d64:	52                   	push   edx
c0012d65:	52                   	push   edx
c0012d66:	56                   	push   esi
c0012d67:	57                   	push   edi
c0012d68:	e8 c4 fc ff ff       	call   c0012a31 <CmFreeExtent(Reghive_Tag*, int)>
c0012d6d:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0012d71:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0012d75:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0012d79:	83 c4 10             	add    esp,0x10
c0012d7c:	45                   	inc    ebp
c0012d7d:	83 c3 03             	add    ebx,0x3
c0012d80:	83 fd 07             	cmp    ebp,0x7
c0012d83:	0f 85 47 ff ff ff    	jne    c0012cd0 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0012d89:	50                   	push   eax
c0012d8a:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0012d8e:	50                   	push   eax
c0012d8f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012d96:	57                   	push   edi
c0012d97:	e8 59 fc ff ff       	call   c00129f5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012d9c:	81 c4 8c 00 00 00    	add    esp,0x8c
c0012da2:	5b                   	pop    ebx
c0012da3:	5e                   	pop    esi
c0012da4:	5f                   	pop    edi
c0012da5:	5d                   	pop    ebp
c0012da6:	c3                   	ret    

c0012da7 <CmGetMatch(char*, char*, bool, bool*)>:
c0012da7:	56                   	push   esi
c0012da8:	53                   	push   ebx
c0012da9:	50                   	push   eax
c0012daa:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0012daf:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012db3:	74 25                	je     c0012dda <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0012db5:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012db8:	31 db                	xor    ebx,ebx
c0012dba:	50                   	push   eax
c0012dbb:	50                   	push   eax
c0012dbc:	8d 04 9d 20 35 02 c0 	lea    eax,[ebx*4-0x3ffdcae0]
c0012dc3:	50                   	push   eax
c0012dc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012dc8:	e8 b3 d9 fe ff       	call   c0000780 <strcmp>
c0012dcd:	83 c4 10             	add    esp,0x10
c0012dd0:	85 c0                	test   eax,eax
c0012dd2:	74 2e                	je     c0012e02 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012dd4:	43                   	inc    ebx
c0012dd5:	83 fb 3f             	cmp    ebx,0x3f
c0012dd8:	75 e0                	jne    c0012dba <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0012dda:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012ddd:	31 db                	xor    ebx,ebx
c0012ddf:	51                   	push   ecx
c0012de0:	51                   	push   ecx
c0012de1:	8d 04 9d 20 35 02 c0 	lea    eax,[ebx*4-0x3ffdcae0]
c0012de8:	50                   	push   eax
c0012de9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012ded:	e8 8e d9 fe ff       	call   c0000780 <strcmp>
c0012df2:	83 c4 10             	add    esp,0x10
c0012df5:	85 c0                	test   eax,eax
c0012df7:	74 09                	je     c0012e02 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012df9:	43                   	inc    ebx
c0012dfa:	83 fb 3f             	cmp    ebx,0x3f
c0012dfd:	75 e0                	jne    c0012ddf <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0012dff:	83 cb ff             	or     ebx,0xffffffff
c0012e02:	5a                   	pop    edx
c0012e03:	89 d8                	mov    eax,ebx
c0012e05:	5b                   	pop    ebx
c0012e06:	5e                   	pop    esi
c0012e07:	c3                   	ret    

c0012e08 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0012e08:	55                   	push   ebp
c0012e09:	31 c0                	xor    eax,eax
c0012e0b:	57                   	push   edi
c0012e0c:	56                   	push   esi
c0012e0d:	53                   	push   ebx
c0012e0e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012e12:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012e16:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012e1a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012e1e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012e20:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0012e23:	83 fd 1f             	cmp    ebp,0x1f
c0012e26:	7f 0b                	jg     c0012e33 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0012e28:	0f b6 c2             	movzx  eax,dl
c0012e2b:	d3 e0                	shl    eax,cl
c0012e2d:	09 07                	or     DWORD PTR [edi],eax
c0012e2f:	b0 01                	mov    al,0x1
c0012e31:	01 33                	add    DWORD PTR [ebx],esi
c0012e33:	5b                   	pop    ebx
c0012e34:	5e                   	pop    esi
c0012e35:	5f                   	pop    edi
c0012e36:	5d                   	pop    ebp
c0012e37:	c3                   	ret    

c0012e38 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0012e38:	57                   	push   edi
c0012e39:	56                   	push   esi
c0012e3a:	53                   	push   ebx
c0012e3b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012e3f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012e43:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0012e47:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012e4b:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0012e4d:	7c 17                	jl     c0012e66 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0012e4f:	8b 17                	mov    edx,DWORD PTR [edi]
c0012e51:	b8 01 00 00 00       	mov    eax,0x1
c0012e56:	d3 e0                	shl    eax,cl
c0012e58:	48                   	dec    eax
c0012e59:	21 d0                	and    eax,edx
c0012e5b:	d3 ea                	shr    edx,cl
c0012e5d:	89 17                	mov    DWORD PTR [edi],edx
c0012e5f:	29 0b                	sub    DWORD PTR [ebx],ecx
c0012e61:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012e64:	eb 05                	jmp    c0012e6b <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0012e66:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012e69:	31 c0                	xor    eax,eax
c0012e6b:	5b                   	pop    ebx
c0012e6c:	5e                   	pop    esi
c0012e6d:	5f                   	pop    edi
c0012e6e:	c3                   	ret    

c0012e6f <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0012e6f:	83 ec 40             	sub    esp,0x40
c0012e72:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012e76:	50                   	push   eax
c0012e77:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e7b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e7f:	e8 4d fa ff ff       	call   c00128d1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e84:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0012e88:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0012e8c:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0012e90:	89 10                	mov    DWORD PTR [eax],edx
c0012e92:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0012e95:	83 c4 4c             	add    esp,0x4c
c0012e98:	c3                   	ret    

c0012e99 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0012e99:	55                   	push   ebp
c0012e9a:	57                   	push   edi
c0012e9b:	56                   	push   esi
c0012e9c:	53                   	push   ebx
c0012e9d:	83 ec 40             	sub    esp,0x40
c0012ea0:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0012ea4:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0012ea8:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0012eac:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0012eb0:	53                   	push   ebx
c0012eb1:	56                   	push   esi
c0012eb2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012eb6:	e8 16 fa ff ff       	call   c00128d1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012ebb:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0012ebf:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0012ec3:	83 c4 0c             	add    esp,0xc
c0012ec6:	53                   	push   ebx
c0012ec7:	56                   	push   esi
c0012ec8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012ecc:	e8 24 fb ff ff       	call   c00129f5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012ed1:	83 c4 4c             	add    esp,0x4c
c0012ed4:	5b                   	pop    ebx
c0012ed5:	5e                   	pop    esi
c0012ed6:	5f                   	pop    edi
c0012ed7:	5d                   	pop    ebp
c0012ed8:	c3                   	ret    

c0012ed9 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0012ed9:	55                   	push   ebp
c0012eda:	57                   	push   edi
c0012edb:	56                   	push   esi
c0012edc:	31 f6                	xor    esi,esi
c0012ede:	53                   	push   ebx
c0012edf:	31 db                	xor    ebx,ebx
c0012ee1:	83 ec 40             	sub    esp,0x40
c0012ee4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012eec:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012ef4:	6a 12                	push   0x12
c0012ef6:	68 ee 00 00 00       	push   0xee
c0012efb:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012eff:	e8 ec d5 fe ff       	call   c00004f0 <memset>
c0012f04:	83 c4 10             	add    esp,0x10
c0012f07:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0012f0b:	6a 08                	push   0x8
c0012f0d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012f11:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0012f15:	50                   	push   eax
c0012f16:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012f1a:	55                   	push   ebp
c0012f1b:	57                   	push   edi
c0012f1c:	e8 e7 fe ff ff       	call   c0012e08 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012f21:	83 c4 10             	add    esp,0x10
c0012f24:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012f28:	50                   	push   eax
c0012f29:	6a 06                	push   0x6
c0012f2b:	55                   	push   ebp
c0012f2c:	57                   	push   edi
c0012f2d:	e8 06 ff ff ff       	call   c0012e38 <CmGetShift(unsigned int*, int*, int, bool*)>
c0012f32:	83 c4 10             	add    esp,0x10
c0012f35:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012f3a:	74 07                	je     c0012f43 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0012f3c:	46                   	inc    esi
c0012f3d:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0012f41:	eb e1                	jmp    c0012f24 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0012f43:	43                   	inc    ebx
c0012f44:	83 fb 12             	cmp    ebx,0x12
c0012f47:	75 c2                	jne    c0012f0b <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0012f49:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012f4d:	31 f6                	xor    esi,esi
c0012f4f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012f52:	50                   	push   eax
c0012f53:	50                   	push   eax
c0012f54:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c0012f59:	46                   	inc    esi
c0012f5a:	8d 04 85 20 35 02 c0 	lea    eax,[eax*4-0x3ffdcae0]
c0012f61:	50                   	push   eax
c0012f62:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012f66:	e8 05 d9 fe ff       	call   c0000870 <strcat>
c0012f6b:	83 c4 10             	add    esp,0x10
c0012f6e:	83 fe 18             	cmp    esi,0x18
c0012f71:	75 df                	jne    c0012f52 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0012f73:	83 c4 3c             	add    esp,0x3c
c0012f76:	31 c0                	xor    eax,eax
c0012f78:	5b                   	pop    ebx
c0012f79:	5e                   	pop    esi
c0012f7a:	5f                   	pop    edi
c0012f7b:	5d                   	pop    ebp
c0012f7c:	c3                   	ret    

c0012f7d <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0012f7d:	83 ec 40             	sub    esp,0x40
c0012f80:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012f84:	50                   	push   eax
c0012f85:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f89:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f8d:	e8 3f f9 ff ff       	call   c00128d1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012f92:	58                   	pop    eax
c0012f93:	5a                   	pop    edx
c0012f94:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0012f98:	8d 44 24 15          	lea    eax,[esp+0x15]
c0012f9c:	50                   	push   eax
c0012f9d:	e8 37 ff ff ff       	call   c0012ed9 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0012fa2:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0012fa7:	83 c4 4c             	add    esp,0x4c
c0012faa:	c3                   	ret    

c0012fab <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0012fab:	55                   	push   ebp
c0012fac:	57                   	push   edi
c0012fad:	56                   	push   esi
c0012fae:	53                   	push   ebx
c0012faf:	31 db                	xor    ebx,ebx
c0012fb1:	83 ec 70             	sub    esp,0x70
c0012fb4:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0012fbb:	6a 30                	push   0x30
c0012fbd:	6a 00                	push   0x0
c0012fbf:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0012fc3:	56                   	push   esi
c0012fc4:	e8 27 d5 fe ff       	call   c00004f0 <memset>
c0012fc9:	83 c4 10             	add    esp,0x10
c0012fcc:	83 ec 0c             	sub    esp,0xc
c0012fcf:	57                   	push   edi
c0012fd0:	e8 ab d5 fe ff       	call   c0000580 <strlen>
c0012fd5:	83 c4 10             	add    esp,0x10
c0012fd8:	39 d8                	cmp    eax,ebx
c0012fda:	76 16                	jbe    c0012ff2 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0012fdc:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0012fe0:	83 ec 0c             	sub    esp,0xc
c0012fe3:	50                   	push   eax
c0012fe4:	e8 77 d9 fe ff       	call   c0000960 <toupper>
c0012fe9:	83 c4 10             	add    esp,0x10
c0012fec:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0012fef:	43                   	inc    ebx
c0012ff0:	eb da                	jmp    c0012fcc <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0012ff2:	52                   	push   edx
c0012ff3:	31 db                	xor    ebx,ebx
c0012ff5:	6a 18                	push   0x18
c0012ff7:	31 ff                	xor    edi,edi
c0012ff9:	6a 3f                	push   0x3f
c0012ffb:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012fff:	50                   	push   eax
c0013000:	e8 eb d4 fe ff       	call   c00004f0 <memset>
c0013005:	83 c4 10             	add    esp,0x10
c0013008:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c001300c:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013010:	84 c0                	test   al,al
c0013012:	0f 84 af 00 00 00    	je     c00130c7 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0013018:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c001301c:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001301f:	83 ec 0c             	sub    esp,0xc
c0013022:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c0013027:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c001302b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001302f:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c0013034:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0013038:	56                   	push   esi
c0013039:	e8 42 d5 fe ff       	call   c0000580 <strlen>
c001303e:	83 c4 10             	add    esp,0x10
c0013041:	85 c0                	test   eax,eax
c0013043:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0013047:	74 0b                	je     c0013054 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0013049:	50                   	push   eax
c001304a:	6a 01                	push   0x1
c001304c:	56                   	push   esi
c001304d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013051:	50                   	push   eax
c0013052:	eb 0a                	jmp    c001305e <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0013054:	50                   	push   eax
c0013055:	6a 00                	push   0x0
c0013057:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001305b:	50                   	push   eax
c001305c:	6a 00                	push   0x0
c001305e:	e8 44 fd ff ff       	call   c0012da7 <CmGetMatch(char*, char*, bool, bool*)>
c0013063:	83 c4 10             	add    esp,0x10
c0013066:	83 f8 ff             	cmp    eax,0xffffffff
c0013069:	75 1a                	jne    c0013085 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c001306b:	83 ec 0c             	sub    esp,0xc
c001306e:	68 99 20 02 c0       	push   0xc0022099
c0013073:	e8 91 e2 ff ff       	call   c0011309 <KePanic(char const*)>
c0013078:	83 c4 10             	add    esp,0x10
c001307b:	b8 02 00 00 00       	mov    eax,0x2
c0013080:	e9 bb 00 00 00       	jmp    c0013140 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0013085:	83 ff 18             	cmp    edi,0x18
c0013088:	75 1a                	jne    c00130a4 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c001308a:	83 ec 0c             	sub    esp,0xc
c001308d:	68 ae 20 02 c0       	push   0xc00220ae
c0013092:	e8 72 e2 ff ff       	call   c0011309 <KePanic(char const*)>
c0013097:	83 c4 10             	add    esp,0x10
c001309a:	b8 01 00 00 00       	mov    eax,0x1
c001309f:	e9 9c 00 00 00       	jmp    c0013140 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c00130a4:	47                   	inc    edi
c00130a5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00130aa:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c00130ae:	0f 45 dd             	cmovne ebx,ebp
c00130b1:	83 ec 0c             	sub    esp,0xc
c00130b4:	56                   	push   esi
c00130b5:	e8 c6 d4 fe ff       	call   c0000580 <strlen>
c00130ba:	83 c4 10             	add    esp,0x10
c00130bd:	85 c0                	test   eax,eax
c00130bf:	74 06                	je     c00130c7 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c00130c1:	43                   	inc    ebx
c00130c2:	e9 41 ff ff ff       	jmp    c0013008 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c00130c7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00130cf:	31 db                	xor    ebx,ebx
c00130d1:	31 ff                	xor    edi,edi
c00130d3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00130db:	50                   	push   eax
c00130dc:	6a 12                	push   0x12
c00130de:	68 ee 00 00 00       	push   0xee
c00130e3:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00130ea:	e8 01 d4 fe ff       	call   c00004f0 <memset>
c00130ef:	83 c4 10             	add    esp,0x10
c00130f2:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c00130f6:	83 fb 17             	cmp    ebx,0x17
c00130f9:	7e 26                	jle    c0013121 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c00130fb:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00130ff:	50                   	push   eax
c0013100:	6a 08                	push   0x8
c0013102:	55                   	push   ebp
c0013103:	56                   	push   esi
c0013104:	e8 2f fd ff ff       	call   c0012e38 <CmGetShift(unsigned int*, int*, int, bool*)>
c0013109:	83 c4 10             	add    esp,0x10
c001310c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013111:	74 26                	je     c0013139 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c0013113:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c001311a:	4b                   	dec    ebx
c001311b:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c001311e:	47                   	inc    edi
c001311f:	eb 1c                	jmp    c001313d <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c0013121:	6a 06                	push   0x6
c0013123:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c0013128:	50                   	push   eax
c0013129:	55                   	push   ebp
c001312a:	56                   	push   esi
c001312b:	e8 d8 fc ff ff       	call   c0012e08 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0013130:	83 c4 10             	add    esp,0x10
c0013133:	84 c0                	test   al,al
c0013135:	75 06                	jne    c001313d <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c0013137:	eb c2                	jmp    c00130fb <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c0013139:	31 c0                	xor    eax,eax
c001313b:	eb 03                	jmp    c0013140 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c001313d:	43                   	inc    ebx
c001313e:	eb b2                	jmp    c00130f2 <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c0013140:	83 c4 6c             	add    esp,0x6c
c0013143:	5b                   	pop    ebx
c0013144:	5e                   	pop    esi
c0013145:	5f                   	pop    edi
c0013146:	5d                   	pop    ebp
c0013147:	c3                   	ret    

c0013148 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0013148:	53                   	push   ebx
c0013149:	83 ec 3c             	sub    esp,0x3c
c001314c:	6a 2b                	push   0x2b
c001314e:	6a 00                	push   0x0
c0013150:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0013154:	53                   	push   ebx
c0013155:	e8 96 d3 fe ff       	call   c00004f0 <memset>
c001315a:	58                   	pop    eax
c001315b:	5a                   	pop    edx
c001315c:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013160:	50                   	push   eax
c0013161:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013165:	e8 41 fe ff ff       	call   c0012fab <CmConvertToInternalFilename(char const*, unsigned char*)>
c001316a:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c001316f:	83 c4 0c             	add    esp,0xc
c0013172:	6a 15                	push   0x15
c0013174:	6a 00                	push   0x0
c0013176:	8d 44 24 27          	lea    eax,[esp+0x27]
c001317a:	50                   	push   eax
c001317b:	e8 70 d3 fe ff       	call   c00004f0 <memset>
c0013180:	53                   	push   ebx
c0013181:	6a 00                	push   0x0
c0013183:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013187:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001318b:	e8 eb f9 ff ff       	call   c0012b7b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013190:	83 c4 58             	add    esp,0x58
c0013193:	5b                   	pop    ebx
c0013194:	c3                   	ret    

c0013195 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0013195:	56                   	push   esi
c0013196:	53                   	push   ebx
c0013197:	83 ec 48             	sub    esp,0x48
c001319a:	6a 12                	push   0x12
c001319c:	68 ff 00 00 00       	push   0xff
c00131a1:	8d 74 24 0f          	lea    esi,[esp+0xf]
c00131a5:	56                   	push   esi
c00131a6:	e8 45 d3 fe ff       	call   c00004f0 <memset>
c00131ab:	5a                   	pop    edx
c00131ac:	59                   	pop    ecx
c00131ad:	56                   	push   esi
c00131ae:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00131b2:	e8 f4 fd ff ff       	call   c0012fab <CmConvertToInternalFilename(char const*, unsigned char*)>
c00131b7:	83 c4 10             	add    esp,0x10
c00131ba:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00131be:	85 db                	test   ebx,ebx
c00131c0:	74 42                	je     c0013204 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c00131c2:	50                   	push   eax
c00131c3:	8d 44 24 19          	lea    eax,[esp+0x19]
c00131c7:	50                   	push   eax
c00131c8:	53                   	push   ebx
c00131c9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00131cd:	e8 ff f6 ff ff       	call   c00128d1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00131d2:	83 c4 0c             	add    esp,0xc
c00131d5:	6a 12                	push   0x12
c00131d7:	8d 44 24 21          	lea    eax,[esp+0x21]
c00131db:	50                   	push   eax
c00131dc:	56                   	push   esi
c00131dd:	e8 9e d1 fe ff       	call   c0000380 <memcmp>
c00131e2:	83 c4 10             	add    esp,0x10
c00131e5:	85 c0                	test   eax,eax
c00131e7:	74 1e                	je     c0013207 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c00131e9:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c00131ee:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c00131f3:	c1 e3 08             	shl    ebx,0x8
c00131f6:	09 d8                	or     eax,ebx
c00131f8:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c00131fd:	c1 e3 10             	shl    ebx,0x10
c0013200:	09 c3                	or     ebx,eax
c0013202:	eb ba                	jmp    c00131be <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0013204:	83 cb ff             	or     ebx,0xffffffff
c0013207:	83 c4 44             	add    esp,0x44
c001320a:	89 d8                	mov    eax,ebx
c001320c:	5b                   	pop    ebx
c001320d:	5e                   	pop    esi
c001320e:	c3                   	ret    

c001320f <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c001320f:	57                   	push   edi
c0013210:	56                   	push   esi
c0013211:	53                   	push   ebx
c0013212:	83 ec 34             	sub    esp,0x34
c0013215:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0013219:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001321d:	6a 2b                	push   0x2b
c001321f:	6a 00                	push   0x0
c0013221:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0013225:	53                   	push   ebx
c0013226:	e8 c5 d2 fe ff       	call   c00004f0 <memset>
c001322b:	58                   	pop    eax
c001322c:	5a                   	pop    edx
c001322d:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013231:	50                   	push   eax
c0013232:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013236:	e8 70 fd ff ff       	call   c0012fab <CmConvertToInternalFilename(char const*, unsigned char*)>
c001323b:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c001323f:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c0013243:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0013247:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c001324b:	53                   	push   ebx
c001324c:	6a 00                	push   0x0
c001324e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013252:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013256:	e8 20 f9 ff ff       	call   c0012b7b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001325b:	83 c4 50             	add    esp,0x50
c001325e:	5b                   	pop    ebx
c001325f:	5e                   	pop    esi
c0013260:	5f                   	pop    edi
c0013261:	c3                   	ret    

c0013262 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c0013262:	55                   	push   ebp
c0013263:	57                   	push   edi
c0013264:	56                   	push   esi
c0013265:	53                   	push   ebx
c0013266:	83 ec 40             	sub    esp,0x40
c0013269:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c001326d:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0013271:	6a 2b                	push   0x2b
c0013273:	6a 00                	push   0x0
c0013275:	8d 74 24 11          	lea    esi,[esp+0x11]
c0013279:	56                   	push   esi
c001327a:	e8 71 d2 fe ff       	call   c00004f0 <memset>
c001327f:	5f                   	pop    edi
c0013280:	89 ef                	mov    edi,ebp
c0013282:	58                   	pop    eax
c0013283:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013287:	50                   	push   eax
c0013288:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c001328c:	e8 1a fd ff ff       	call   c0012fab <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013291:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c0013296:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c001329b:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c00132a0:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c00132a5:	83 c4 10             	add    esp,0x10
c00132a8:	85 ed                	test   ebp,ebp
c00132aa:	74 14                	je     c00132c0 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00132ac:	51                   	push   ecx
c00132ad:	51                   	push   ecx
c00132ae:	57                   	push   edi
c00132af:	53                   	push   ebx
c00132b0:	e8 0e f7 ff ff       	call   c00129c3 <CmGetNext(Reghive_Tag*, int)>
c00132b5:	83 c4 10             	add    esp,0x10
c00132b8:	85 c0                	test   eax,eax
c00132ba:	74 04                	je     c00132c0 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00132bc:	89 c7                	mov    edi,eax
c00132be:	eb e8                	jmp    c00132a8 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c00132c0:	56                   	push   esi
c00132c1:	6a 00                	push   0x0
c00132c3:	57                   	push   edi
c00132c4:	53                   	push   ebx
c00132c5:	e8 b1 f8 ff ff       	call   c0012b7b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00132ca:	83 c4 0c             	add    esp,0xc
c00132cd:	56                   	push   esi
c00132ce:	50                   	push   eax
c00132cf:	89 c7                	mov    edi,eax
c00132d1:	53                   	push   ebx
c00132d2:	e8 fa f5 ff ff       	call   c00128d1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00132d7:	58                   	pop    eax
c00132d8:	5a                   	pop    edx
c00132d9:	6a 6c                	push   0x6c
c00132db:	6a 00                	push   0x0
c00132dd:	6a 00                	push   0x0
c00132df:	68 bf 20 02 c0       	push   0xc00220bf
c00132e4:	57                   	push   edi
c00132e5:	53                   	push   ebx
c00132e6:	e8 24 ff ff ff       	call   c001320f <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c00132eb:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00132ef:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c00132f3:	c1 e8 10             	shr    eax,0x10
c00132f6:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00132fa:	83 c4 1c             	add    esp,0x1c
c00132fd:	56                   	push   esi
c00132fe:	57                   	push   edi
c00132ff:	53                   	push   ebx
c0013300:	e8 f0 f6 ff ff       	call   c00129f5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013305:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001330a:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c001330f:	c1 e0 08             	shl    eax,0x8
c0013312:	09 c2                	or     edx,eax
c0013314:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0013319:	83 c4 4c             	add    esp,0x4c
c001331c:	5b                   	pop    ebx
c001331d:	5e                   	pop    esi
c001331e:	c1 e0 10             	shl    eax,0x10
c0013321:	09 d0                	or     eax,edx
c0013323:	5f                   	pop    edi
c0013324:	5d                   	pop    ebp
c0013325:	c3                   	ret    

c0013326 <zStrtok(char*, char const*)>:
c0013326:	55                   	push   ebp
c0013327:	57                   	push   edi
c0013328:	56                   	push   esi
c0013329:	53                   	push   ebx
c001332a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001332e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013332:	85 db                	test   ebx,ebx
c0013334:	74 2f                	je     c0013365 <zStrtok(char*, char const*)+0x3f>
c0013336:	85 c0                	test   eax,eax
c0013338:	75 09                	jne    c0013343 <zStrtok(char*, char const*)+0x1d>
c001333a:	a1 f0 8e 02 c0       	mov    eax,ds:0xc0028ef0
c001333f:	85 c0                	test   eax,eax
c0013341:	74 50                	je     c0013393 <zStrtok(char*, char const*)+0x6d>
c0013343:	31 c9                	xor    ecx,ecx
c0013345:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0013349:	74 03                	je     c001334e <zStrtok(char*, char const*)+0x28>
c001334b:	41                   	inc    ecx
c001334c:	eb f7                	jmp    c0013345 <zStrtok(char*, char const*)+0x1f>
c001334e:	31 d2                	xor    edx,edx
c0013350:	39 ca                	cmp    edx,ecx
c0013352:	74 15                	je     c0013369 <zStrtok(char*, char const*)+0x43>
c0013354:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0013358:	8d 3c 10             	lea    edi,[eax+edx*1]
c001335b:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c001335e:	39 ee                	cmp    esi,ebp
c0013360:	74 13                	je     c0013375 <zStrtok(char*, char const*)+0x4f>
c0013362:	42                   	inc    edx
c0013363:	eb eb                	jmp    c0013350 <zStrtok(char*, char const*)+0x2a>
c0013365:	31 c0                	xor    eax,eax
c0013367:	eb 2a                	jmp    c0013393 <zStrtok(char*, char const*)+0x6d>
c0013369:	c7 05 f0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ef0,0x0
c0013373:	eb 1e                	jmp    c0013393 <zStrtok(char*, char const*)+0x6d>
c0013375:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013378:	39 ce                	cmp    esi,ecx
c001337a:	75 0a                	jne    c0013386 <zStrtok(char*, char const*)+0x60>
c001337c:	40                   	inc    eax
c001337d:	a3 f0 8e 02 c0       	mov    ds:0xc0028ef0,eax
c0013382:	89 d8                	mov    eax,ebx
c0013384:	eb 0d                	jmp    c0013393 <zStrtok(char*, char const*)+0x6d>
c0013386:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0013389:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c001338d:	89 15 f0 8e 02 c0    	mov    DWORD PTR ds:0xc0028ef0,edx
c0013393:	5b                   	pop    ebx
c0013394:	5e                   	pop    esi
c0013395:	5f                   	pop    edi
c0013396:	5d                   	pop    ebp
c0013397:	c3                   	ret    

c0013398 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0013398:	57                   	push   edi
c0013399:	56                   	push   esi
c001339a:	53                   	push   ebx
c001339b:	81 ec 08 01 00 00    	sub    esp,0x108
c00133a1:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c00133a8:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c00133af:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00133b3:	53                   	push   ebx
c00133b4:	e8 97 d2 fe ff       	call   c0000650 <strcpy>
c00133b9:	59                   	pop    ecx
c00133ba:	5e                   	pop    esi
c00133bb:	68 23 24 02 c0       	push   0xc0022423
c00133c0:	53                   	push   ebx
c00133c1:	bb 01 00 00 00       	mov    ebx,0x1
c00133c6:	e8 5b ff ff ff       	call   c0013326 <zStrtok(char*, char const*)>
c00133cb:	83 c4 10             	add    esp,0x10
c00133ce:	85 c0                	test   eax,eax
c00133d0:	74 3b                	je     c001340d <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00133d2:	52                   	push   edx
c00133d3:	50                   	push   eax
c00133d4:	6a 01                	push   0x1
c00133d6:	57                   	push   edi
c00133d7:	e8 b9 fd ff ff       	call   c0013195 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c00133dc:	59                   	pop    ecx
c00133dd:	5e                   	pop    esi
c00133de:	89 c3                	mov    ebx,eax
c00133e0:	68 23 24 02 c0       	push   0xc0022423
c00133e5:	6a 00                	push   0x0
c00133e7:	e8 3a ff ff ff       	call   c0013326 <zStrtok(char*, char const*)>
c00133ec:	83 c4 10             	add    esp,0x10
c00133ef:	85 c0                	test   eax,eax
c00133f1:	89 c6                	mov    esi,eax
c00133f3:	74 18                	je     c001340d <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00133f5:	52                   	push   edx
c00133f6:	52                   	push   edx
c00133f7:	53                   	push   ebx
c00133f8:	57                   	push   edi
c00133f9:	e8 86 f5 ff ff       	call   c0012984 <CmEnterDirectory(Reghive_Tag*, int)>
c00133fe:	83 c4 10             	add    esp,0x10
c0013401:	83 f8 ff             	cmp    eax,0xffffffff
c0013404:	89 c3                	mov    ebx,eax
c0013406:	74 05                	je     c001340d <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013408:	50                   	push   eax
c0013409:	56                   	push   esi
c001340a:	53                   	push   ebx
c001340b:	eb c9                	jmp    c00133d6 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c001340d:	81 c4 00 01 00 00    	add    esp,0x100
c0013413:	89 d8                	mov    eax,ebx
c0013415:	5b                   	pop    ebx
c0013416:	5e                   	pop    esi
c0013417:	5f                   	pop    edi
c0013418:	c3                   	ret    

c0013419 <CmDisplayTree(Reghive_Tag*, int, int)>:
c0013419:	55                   	push   ebp
c001341a:	57                   	push   edi
c001341b:	56                   	push   esi
c001341c:	53                   	push   ebx
c001341d:	83 ec 5c             	sub    esp,0x5c
c0013420:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0013424:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0013428:	85 db                	test   ebx,ebx
c001342a:	0f 8e 84 00 00 00    	jle    c00134b4 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0013430:	57                   	push   edi
c0013431:	31 ed                	xor    ebp,ebp
c0013433:	6a 32                	push   0x32
c0013435:	6a 00                	push   0x0
c0013437:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c001343b:	57                   	push   edi
c001343c:	e8 af d0 fe ff       	call   c00004f0 <memset>
c0013441:	83 c4 0c             	add    esp,0xc
c0013444:	57                   	push   edi
c0013445:	53                   	push   ebx
c0013446:	56                   	push   esi
c0013447:	e8 31 fb ff ff       	call   c0012f7d <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001344c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013450:	83 c4 10             	add    esp,0x10
c0013453:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0013457:	7d 13                	jge    c001346c <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0013459:	83 ec 0c             	sub    esp,0xc
c001345c:	45                   	inc    ebp
c001345d:	68 c7 27 02 c0       	push   0xc00227c7
c0013462:	e8 a3 74 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013467:	83 c4 10             	add    esp,0x10
c001346a:	eb e7                	jmp    c0013453 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c001346c:	51                   	push   ecx
c001346d:	57                   	push   edi
c001346e:	53                   	push   ebx
c001346f:	68 c5 20 02 c0       	push   0xc00220c5
c0013474:	e8 91 74 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013479:	83 c4 10             	add    esp,0x10
c001347c:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0013481:	75 1e                	jne    c00134a1 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0013483:	52                   	push   edx
c0013484:	52                   	push   edx
c0013485:	53                   	push   ebx
c0013486:	56                   	push   esi
c0013487:	e8 f8 f4 ff ff       	call   c0012984 <CmEnterDirectory(Reghive_Tag*, int)>
c001348c:	83 c4 0c             	add    esp,0xc
c001348f:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0013493:	8d 51 04             	lea    edx,[ecx+0x4]
c0013496:	52                   	push   edx
c0013497:	50                   	push   eax
c0013498:	56                   	push   esi
c0013499:	e8 7b ff ff ff       	call   c0013419 <CmDisplayTree(Reghive_Tag*, int, int)>
c001349e:	83 c4 10             	add    esp,0x10
c00134a1:	50                   	push   eax
c00134a2:	50                   	push   eax
c00134a3:	53                   	push   ebx
c00134a4:	56                   	push   esi
c00134a5:	e8 19 f5 ff ff       	call   c00129c3 <CmGetNext(Reghive_Tag*, int)>
c00134aa:	83 c4 10             	add    esp,0x10
c00134ad:	89 c3                	mov    ebx,eax
c00134af:	e9 74 ff ff ff       	jmp    c0013428 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c00134b4:	83 c4 5c             	add    esp,0x5c
c00134b7:	5b                   	pop    ebx
c00134b8:	5e                   	pop    esi
c00134b9:	5f                   	pop    edi
c00134ba:	5d                   	pop    ebp
c00134bb:	c3                   	ret    

c00134bc <CmSplitFinalSlashInPlace(char*)>:
c00134bc:	53                   	push   ebx
c00134bd:	83 ec 14             	sub    esp,0x14
c00134c0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00134c4:	53                   	push   ebx
c00134c5:	e8 b6 d0 fe ff       	call   c0000580 <strlen>
c00134ca:	83 c4 10             	add    esp,0x10
c00134cd:	48                   	dec    eax
c00134ce:	85 c0                	test   eax,eax
c00134d0:	74 15                	je     c00134e7 <CmSplitFinalSlashInPlace(char*)+0x2b>
c00134d2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00134d6:	8d 14 03             	lea    edx,[ebx+eax*1]
c00134d9:	75 09                	jne    c00134e4 <CmSplitFinalSlashInPlace(char*)+0x28>
c00134db:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00134de:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00134e2:	eb 05                	jmp    c00134e9 <CmSplitFinalSlashInPlace(char*)+0x2d>
c00134e4:	48                   	dec    eax
c00134e5:	eb e7                	jmp    c00134ce <CmSplitFinalSlashInPlace(char*)+0x12>
c00134e7:	31 c0                	xor    eax,eax
c00134e9:	83 c4 08             	add    esp,0x8
c00134ec:	5b                   	pop    ebx
c00134ed:	c3                   	ret    

c00134ee <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00134ee:	55                   	push   ebp
c00134ef:	57                   	push   edi
c00134f0:	56                   	push   esi
c00134f1:	53                   	push   ebx
c00134f2:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00134f8:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c00134ff:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0013502:	8d 43 01             	lea    eax,[ebx+0x1]
c0013505:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013509:	89 f0                	mov    eax,esi
c001350b:	3c 40                	cmp    al,0x40
c001350d:	75 1b                	jne    c001352a <Reg::findLineFromLoadedData(char*, char*, char*)+0x3c>
c001350f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0013512:	85 c0                	test   eax,eax
c0013514:	74 08                	je     c001351e <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c0013516:	83 f8 3a             	cmp    eax,0x3a
c0013519:	74 03                	je     c001351e <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c001351b:	43                   	inc    ebx
c001351c:	eb f1                	jmp    c001350f <Reg::findLineFromLoadedData(char*, char*, char*)+0x21>
c001351e:	85 c0                	test   eax,eax
c0013520:	0f 84 45 01 00 00    	je     c001366b <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013526:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013529:	43                   	inc    ebx
c001352a:	50                   	push   eax
c001352b:	6a 40                	push   0x40
c001352d:	6a 00                	push   0x0
c001352f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013533:	50                   	push   eax
c0013534:	e8 b7 cf fe ff       	call   c00004f0 <memset>
c0013539:	89 f1                	mov    ecx,esi
c001353b:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0013542:	31 c0                	xor    eax,eax
c0013544:	83 c4 10             	add    esp,0x10
c0013547:	0f be f1             	movsx  esi,cl
c001354a:	0f be 17             	movsx  edx,BYTE PTR [edi]
c001354d:	85 d2                	test   edx,edx
c001354f:	89 d1                	mov    ecx,edx
c0013551:	0f 84 14 01 00 00    	je     c001366b <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013557:	3d c7 00 00 00       	cmp    eax,0xc7
c001355c:	0f 8f 09 01 00 00    	jg     c001366b <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013562:	83 fa 0a             	cmp    edx,0xa
c0013565:	0f 85 f1 00 00 00    	jne    c001365c <Reg::findLineFromLoadedData(char*, char*, char*)+0x16e>
c001356b:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0013570:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0013575:	89 c8                	mov    eax,ecx
c0013577:	a8 df                	test   al,0xdf
c0013579:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c001357e:	83 f9 23             	cmp    ecx,0x23
c0013581:	0f 94 c2             	sete   dl
c0013584:	89 d5                	mov    ebp,edx
c0013586:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001358a:	09 ea                	or     edx,ebp
c001358c:	80 e2 01             	and    dl,0x1
c001358f:	75 47                	jne    c00135d8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013591:	83 e8 09             	sub    eax,0x9
c0013594:	3c 01                	cmp    al,0x1
c0013596:	76 40                	jbe    c00135d8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013598:	83 f9 5b             	cmp    ecx,0x5b
c001359b:	75 42                	jne    c00135df <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c001359d:	83 fe 40             	cmp    esi,0x40
c00135a0:	75 36                	jne    c00135d8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c00135a2:	83 ec 0c             	sub    esp,0xc
c00135a5:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c00135a9:	55                   	push   ebp
c00135aa:	e8 d1 cf fe ff       	call   c0000580 <strlen>
c00135af:	83 c4 10             	add    esp,0x10
c00135b2:	83 f8 3f             	cmp    eax,0x3f
c00135b5:	0f 87 b0 00 00 00    	ja     c001366b <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00135bb:	50                   	push   eax
c00135bc:	50                   	push   eax
c00135bd:	55                   	push   ebp
c00135be:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c00135c2:	55                   	push   ebp
c00135c3:	e8 88 d0 fe ff       	call   c0000650 <strcpy>
c00135c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00135cb:	e8 b0 cf fe ff       	call   c0000580 <strlen>
c00135d0:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c00135d5:	83 c4 10             	add    esp,0x10
c00135d8:	31 d2                	xor    edx,edx
c00135da:	e9 84 00 00 00       	jmp    c0013663 <Reg::findLineFromLoadedData(char*, char*, char*)+0x175>
c00135df:	83 fe 40             	cmp    esi,0x40
c00135e2:	74 06                	je     c00135ea <Reg::findLineFromLoadedData(char*, char*, char*)+0xfc>
c00135e4:	8d 54 24 58          	lea    edx,[esp+0x58]
c00135e8:	eb 19                	jmp    c0013603 <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c00135ea:	51                   	push   ecx
c00135eb:	51                   	push   ecx
c00135ec:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00135f0:	8d 44 24 24          	lea    eax,[esp+0x24]
c00135f4:	50                   	push   eax
c00135f5:	e8 86 d1 fe ff       	call   c0000780 <strcmp>
c00135fa:	83 c4 10             	add    esp,0x10
c00135fd:	85 c0                	test   eax,eax
c00135ff:	75 d7                	jne    c00135d8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013601:	eb e1                	jmp    c00135e4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf6>
c0013603:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c0013606:	85 c9                	test   ecx,ecx
c0013608:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c001360d:	83 f9 3d             	cmp    ecx,0x3d
c0013610:	0f 94 c0             	sete   al
c0013613:	89 c5                	mov    ebp,eax
c0013615:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013619:	09 e8                	or     eax,ebp
c001361b:	a8 01                	test   al,0x1
c001361d:	89 c5                	mov    ebp,eax
c001361f:	75 03                	jne    c0013624 <Reg::findLineFromLoadedData(char*, char*, char*)+0x136>
c0013621:	42                   	inc    edx
c0013622:	eb df                	jmp    c0013603 <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0013624:	85 c9                	test   ecx,ecx
c0013626:	74 43                	je     c001366b <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013628:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001362c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c001362f:	52                   	push   edx
c0013630:	52                   	push   edx
c0013631:	8d 44 24 60          	lea    eax,[esp+0x60]
c0013635:	50                   	push   eax
c0013636:	53                   	push   ebx
c0013637:	e8 44 d1 fe ff       	call   c0000780 <strcmp>
c001363c:	83 c4 10             	add    esp,0x10
c001363f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013643:	85 c0                	test   eax,eax
c0013645:	75 91                	jne    c00135d8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013647:	50                   	push   eax
c0013648:	42                   	inc    edx
c0013649:	50                   	push   eax
c001364a:	52                   	push   edx
c001364b:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0013652:	e8 f9 cf fe ff       	call   c0000650 <strcpy>
c0013657:	83 c4 10             	add    esp,0x10
c001365a:	eb 11                	jmp    c001366d <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c001365c:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0013660:	8d 50 01             	lea    edx,[eax+0x1]
c0013663:	47                   	inc    edi
c0013664:	89 d0                	mov    eax,edx
c0013666:	e9 df fe ff ff       	jmp    c001354a <Reg::findLineFromLoadedData(char*, char*, char*)+0x5c>
c001366b:	31 ed                	xor    ebp,ebp
c001366d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013673:	89 e8                	mov    eax,ebp
c0013675:	5b                   	pop    ebx
c0013676:	5e                   	pop    esi
c0013677:	5f                   	pop    edi
c0013678:	5d                   	pop    ebp
c0013679:	c3                   	ret    

c001367a <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001367a:	57                   	push   edi
c001367b:	56                   	push   esi
c001367c:	53                   	push   ebx
c001367d:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013683:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001368a:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0013691:	53                   	push   ebx
c0013692:	e8 e9 ce fe ff       	call   c0000580 <strlen>
c0013697:	89 34 24             	mov    DWORD PTR [esp],esi
c001369a:	89 c7                	mov    edi,eax
c001369c:	e8 df ce fe ff       	call   c0000580 <strlen>
c00136a1:	83 c4 10             	add    esp,0x10
c00136a4:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00136a8:	3d ff 00 00 00       	cmp    eax,0xff
c00136ad:	0f 87 d3 00 00 00    	ja     c0013786 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00136b3:	57                   	push   edi
c00136b4:	57                   	push   edi
c00136b5:	56                   	push   esi
c00136b6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00136ba:	56                   	push   esi
c00136bb:	e8 90 cf fe ff       	call   c0000650 <strcpy>
c00136c0:	58                   	pop    eax
c00136c1:	5a                   	pop    edx
c00136c2:	68 23 24 02 c0       	push   0xc0022423
c00136c7:	56                   	push   esi
c00136c8:	e8 a3 d1 fe ff       	call   c0000870 <strcat>
c00136cd:	59                   	pop    ecx
c00136ce:	5f                   	pop    edi
c00136cf:	53                   	push   ebx
c00136d0:	56                   	push   esi
c00136d1:	e8 9a d1 fe ff       	call   c0000870 <strcat>
c00136d6:	58                   	pop    eax
c00136d7:	5a                   	pop    edx
c00136d8:	68 cf 20 02 c0       	push   0xc00220cf
c00136dd:	56                   	push   esi
c00136de:	e8 8d d1 fe ff       	call   c0000870 <strcat>
c00136e3:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00136ea:	e8 e4 43 ff ff       	call   c0007ad3 <malloc>
c00136ef:	83 c4 0c             	add    esp,0xc
c00136f2:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c00136f8:	56                   	push   esi
c00136f9:	50                   	push   eax
c00136fa:	89 c3                	mov    ebx,eax
c00136fc:	e8 43 81 ff ff       	call   c000b844 <File::File(char const*, Process*)>
c0013701:	83 c4 10             	add    esp,0x10
c0013704:	85 db                	test   ebx,ebx
c0013706:	74 7e                	je     c0013786 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013708:	51                   	push   ecx
c0013709:	51                   	push   ecx
c001370a:	6a 01                	push   0x1
c001370c:	53                   	push   ebx
c001370d:	e8 fa 81 ff ff       	call   c000b90c <File::open(FileOpenMode)>
c0013712:	83 c4 10             	add    esp,0x10
c0013715:	85 c0                	test   eax,eax
c0013717:	74 08                	je     c0013721 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0013719:	83 ec 0c             	sub    esp,0xc
c001371c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001371e:	53                   	push   ebx
c001371f:	eb 5f                	jmp    c0013780 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0013721:	52                   	push   edx
c0013722:	8d 44 24 17          	lea    eax,[esp+0x17]
c0013726:	50                   	push   eax
c0013727:	8d 44 24 20          	lea    eax,[esp+0x20]
c001372b:	50                   	push   eax
c001372c:	53                   	push   ebx
c001372d:	e8 dc 84 ff ff       	call   c000bc0e <File::stat(unsigned long long*, bool*)>
c0013732:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013736:	83 c4 10             	add    esp,0x10
c0013739:	89 c1                	mov    ecx,eax
c001373b:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001373f:	74 31                	je     c0013772 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013741:	83 ec 0c             	sub    esp,0xc
c0013744:	50                   	push   eax
c0013745:	e8 89 43 ff ff       	call   c0007ad3 <malloc>
c001374a:	89 c6                	mov    esi,eax
c001374c:	58                   	pop    eax
c001374d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001374f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013753:	52                   	push   edx
c0013754:	56                   	push   esi
c0013755:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013759:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001375d:	53                   	push   ebx
c001375e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013761:	83 c4 20             	add    esp,0x20
c0013764:	85 c0                	test   eax,eax
c0013766:	75 0a                	jne    c0013772 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013768:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001376c:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013770:	74 18                	je     c001378a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0013772:	83 ec 0c             	sub    esp,0xc
c0013775:	53                   	push   ebx
c0013776:	e8 ef 81 ff ff       	call   c000b96a <File::close()>
c001377b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001377d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013780:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013783:	83 c4 10             	add    esp,0x10
c0013786:	31 c0                	xor    eax,eax
c0013788:	eb 3b                	jmp    c00137c5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001378a:	83 ec 0c             	sub    esp,0xc
c001378d:	53                   	push   ebx
c001378e:	e8 d7 81 ff ff       	call   c000b96a <File::close()>
c0013793:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013795:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013798:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001379b:	83 c4 0c             	add    esp,0xc
c001379e:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00137a5:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00137ac:	56                   	push   esi
c00137ad:	e8 3c fd ff ff       	call   c00134ee <Reg::findLineFromLoadedData(char*, char*, char*)>
c00137b2:	89 34 24             	mov    DWORD PTR [esp],esi
c00137b5:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00137b9:	e8 25 43 ff ff       	call   c0007ae3 <free>
c00137be:	83 c4 10             	add    esp,0x10
c00137c1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00137c5:	81 c4 20 01 00 00    	add    esp,0x120
c00137cb:	5b                   	pop    ebx
c00137cc:	5e                   	pop    esi
c00137cd:	5f                   	pop    edi
c00137ce:	c3                   	ret    

c00137cf <Reg::getLine(char*, char*, char*)>:
c00137cf:	57                   	push   edi
c00137d0:	56                   	push   esi
c00137d1:	53                   	push   ebx
c00137d2:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00137d6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00137da:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00137de:	57                   	push   edi
c00137df:	56                   	push   esi
c00137e0:	53                   	push   ebx
c00137e1:	68 d4 20 02 c0       	push   0xc00220d4
c00137e6:	e8 8f fe ff ff       	call   c001367a <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00137eb:	83 c4 10             	add    esp,0x10
c00137ee:	84 c0                	test   al,al
c00137f0:	75 10                	jne    c0013802 <Reg::getLine(char*, char*, char*)+0x33>
c00137f2:	57                   	push   edi
c00137f3:	56                   	push   esi
c00137f4:	53                   	push   ebx
c00137f5:	68 f9 20 02 c0       	push   0xc00220f9
c00137fa:	e8 7b fe ff ff       	call   c001367a <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00137ff:	83 c4 10             	add    esp,0x10
c0013802:	5b                   	pop    ebx
c0013803:	5e                   	pop    esi
c0013804:	5f                   	pop    edi
c0013805:	c3                   	ret    

c0013806 <Reg::readInt(char*, char*, int*)>:
c0013806:	55                   	push   ebp
c0013807:	57                   	push   edi
c0013808:	56                   	push   esi
c0013809:	53                   	push   ebx
c001380a:	81 ec f0 00 00 00    	sub    esp,0xf0
c0013810:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013814:	55                   	push   ebp
c0013815:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001381c:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013823:	e8 a7 ff ff ff       	call   c00137cf <Reg::getLine(char*, char*, char*)>
c0013828:	83 c4 10             	add    esp,0x10
c001382b:	84 c0                	test   al,al
c001382d:	0f 84 b6 00 00 00    	je     c00138e9 <Reg::readInt(char*, char*, int*)+0xe3>
c0013833:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0013838:	83 fa 2b             	cmp    edx,0x2b
c001383b:	74 0c                	je     c0013849 <Reg::readInt(char*, char*, int*)+0x43>
c001383d:	83 fa 2d             	cmp    edx,0x2d
c0013840:	75 0e                	jne    c0013850 <Reg::readInt(char*, char*, int*)+0x4a>
c0013842:	ba 01 00 00 00       	mov    edx,0x1
c0013847:	eb 0b                	jmp    c0013854 <Reg::readInt(char*, char*, int*)+0x4e>
c0013849:	ba 01 00 00 00       	mov    edx,0x1
c001384e:	eb 02                	jmp    c0013852 <Reg::readInt(char*, char*, int*)+0x4c>
c0013850:	31 d2                	xor    edx,edx
c0013852:	31 c0                	xor    eax,eax
c0013854:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0013859:	be 0a 00 00 00       	mov    esi,0xa
c001385e:	75 21                	jne    c0013881 <Reg::readInt(char*, char*, int*)+0x7b>
c0013860:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0013865:	83 f9 78             	cmp    ecx,0x78
c0013868:	75 0a                	jne    c0013874 <Reg::readInt(char*, char*, int*)+0x6e>
c001386a:	83 c2 02             	add    edx,0x2
c001386d:	be 10 00 00 00       	mov    esi,0x10
c0013872:	eb 0d                	jmp    c0013881 <Reg::readInt(char*, char*, int*)+0x7b>
c0013874:	83 f9 62             	cmp    ecx,0x62
c0013877:	75 08                	jne    c0013881 <Reg::readInt(char*, char*, int*)+0x7b>
c0013879:	83 c2 02             	add    edx,0x2
c001387c:	be 02 00 00 00       	mov    esi,0x2
c0013881:	01 d5                	add    ebp,edx
c0013883:	31 d2                	xor    edx,edx
c0013885:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0013889:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001388d:	85 c9                	test   ecx,ecx
c001388f:	0f 94 c3             	sete   bl
c0013892:	83 f9 0d             	cmp    ecx,0xd
c0013895:	89 df                	mov    edi,ebx
c0013897:	0f 94 c3             	sete   bl
c001389a:	09 df                	or     edi,ebx
c001389c:	89 fb                	mov    ebx,edi
c001389e:	83 e7 01             	and    edi,0x1
c00138a1:	75 35                	jne    c00138d8 <Reg::readInt(char*, char*, int*)+0xd2>
c00138a3:	0f af d6             	imul   edx,esi
c00138a6:	83 fe 10             	cmp    esi,0x10
c00138a9:	75 26                	jne    c00138d1 <Reg::readInt(char*, char*, int*)+0xcb>
c00138ab:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00138af:	83 ef 41             	sub    edi,0x41
c00138b2:	89 fb                	mov    ebx,edi
c00138b4:	80 fb 05             	cmp    bl,0x5
c00138b7:	77 06                	ja     c00138bf <Reg::readInt(char*, char*, int*)+0xb9>
c00138b9:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c00138bd:	eb 16                	jmp    c00138d5 <Reg::readInt(char*, char*, int*)+0xcf>
c00138bf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00138c3:	83 eb 61             	sub    ebx,0x61
c00138c6:	80 fb 05             	cmp    bl,0x5
c00138c9:	77 06                	ja     c00138d1 <Reg::readInt(char*, char*, int*)+0xcb>
c00138cb:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c00138cf:	eb 04                	jmp    c00138d5 <Reg::readInt(char*, char*, int*)+0xcf>
c00138d1:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c00138d5:	45                   	inc    ebp
c00138d6:	eb ad                	jmp    c0013885 <Reg::readInt(char*, char*, int*)+0x7f>
c00138d8:	84 c0                	test   al,al
c00138da:	74 02                	je     c00138de <Reg::readInt(char*, char*, int*)+0xd8>
c00138dc:	f7 da                	neg    edx
c00138de:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00138e5:	89 10                	mov    DWORD PTR [eax],edx
c00138e7:	88 d8                	mov    al,bl
c00138e9:	81 c4 ec 00 00 00    	add    esp,0xec
c00138ef:	5b                   	pop    ebx
c00138f0:	5e                   	pop    esi
c00138f1:	5f                   	pop    edi
c00138f2:	5d                   	pop    ebp
c00138f3:	c3                   	ret    

c00138f4 <Reg::readString(char*, char*, char*, int)>:
c00138f4:	57                   	push   edi
c00138f5:	56                   	push   esi
c00138f6:	53                   	push   ebx
c00138f7:	81 ec d4 00 00 00    	sub    esp,0xd4
c00138fd:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013901:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013908:	57                   	push   edi
c0013909:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013910:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013917:	e8 b3 fe ff ff       	call   c00137cf <Reg::getLine(char*, char*, char*)>
c001391c:	83 c4 10             	add    esp,0x10
c001391f:	84 c0                	test   al,al
c0013921:	89 c6                	mov    esi,eax
c0013923:	74 44                	je     c0013969 <Reg::readString(char*, char*, char*, int)+0x75>
c0013925:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001392c:	31 c0                	xor    eax,eax
c001392e:	4a                   	dec    edx
c001392f:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0013932:	84 c9                	test   cl,cl
c0013934:	74 0f                	je     c0013945 <Reg::readString(char*, char*, char*, int)+0x51>
c0013936:	39 c2                	cmp    edx,eax
c0013938:	7e 0b                	jle    c0013945 <Reg::readString(char*, char*, char*, int)+0x51>
c001393a:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001393d:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0013942:	40                   	inc    eax
c0013943:	eb ea                	jmp    c001392f <Reg::readString(char*, char*, char*, int)+0x3b>
c0013945:	83 ec 0c             	sub    esp,0xc
c0013948:	53                   	push   ebx
c0013949:	e8 32 cc fe ff       	call   c0000580 <strlen>
c001394e:	83 c4 10             	add    esp,0x10
c0013951:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0013956:	75 11                	jne    c0013969 <Reg::readString(char*, char*, char*, int)+0x75>
c0013958:	83 ec 0c             	sub    esp,0xc
c001395b:	53                   	push   ebx
c001395c:	e8 1f cc fe ff       	call   c0000580 <strlen>
c0013961:	83 c4 10             	add    esp,0x10
c0013964:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013969:	81 c4 d0 00 00 00    	add    esp,0xd0
c001396f:	89 f0                	mov    eax,esi
c0013971:	5b                   	pop    ebx
c0013972:	5e                   	pop    esi
c0013973:	5f                   	pop    edi
c0013974:	c3                   	ret    

c0013975 <Reg::readBool(char*, char*, bool*)>:
c0013975:	83 ec 20             	sub    esp,0x20
c0013978:	8d 44 24 10          	lea    eax,[esp+0x10]
c001397c:	50                   	push   eax
c001397d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013981:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013985:	e8 7c fe ff ff       	call   c0013806 <Reg::readInt(char*, char*, int*)>
c001398a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001398e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013993:	0f 95 02             	setne  BYTE PTR [edx]
c0013996:	83 c4 2c             	add    esp,0x2c
c0013999:	c3                   	ret    

c001399a <Reg::readBoolWithDefault(char*, char*, bool)>:
c001399a:	53                   	push   ebx
c001399b:	83 ec 1c             	sub    esp,0x1c
c001399e:	8d 44 24 13          	lea    eax,[esp+0x13]
c00139a2:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00139a6:	50                   	push   eax
c00139a7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139af:	e8 c1 ff ff ff       	call   c0013975 <Reg::readBool(char*, char*, bool*)>
c00139b4:	83 c4 10             	add    esp,0x10
c00139b7:	84 c0                	test   al,al
c00139b9:	74 04                	je     c00139bf <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00139bb:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00139bf:	83 c4 18             	add    esp,0x18
c00139c2:	88 d8                	mov    al,bl
c00139c4:	5b                   	pop    ebx
c00139c5:	c3                   	ret    

c00139c6 <Reg::readIntWithDefault(char*, char*, int)>:
c00139c6:	53                   	push   ebx
c00139c7:	83 ec 1c             	sub    esp,0x1c
c00139ca:	8d 44 24 10          	lea    eax,[esp+0x10]
c00139ce:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00139d2:	50                   	push   eax
c00139d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139db:	e8 26 fe ff ff       	call   c0013806 <Reg::readInt(char*, char*, int*)>
c00139e0:	83 c4 10             	add    esp,0x10
c00139e3:	84 c0                	test   al,al
c00139e5:	74 04                	je     c00139eb <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00139e7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00139eb:	83 c4 18             	add    esp,0x18
c00139ee:	89 d8                	mov    eax,ebx
c00139f0:	5b                   	pop    ebx
c00139f1:	c3                   	ret    

c00139f2 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00139f2:	57                   	push   edi
c00139f3:	56                   	push   esi
c00139f4:	53                   	push   ebx
c00139f5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00139f9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00139fd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013a01:	56                   	push   esi
c0013a02:	57                   	push   edi
c0013a03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a0b:	e8 e4 fe ff ff       	call   c00138f4 <Reg::readString(char*, char*, char*, int)>
c0013a10:	83 c4 10             	add    esp,0x10
c0013a13:	84 c0                	test   al,al
c0013a15:	75 16                	jne    c0013a2d <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013a17:	50                   	push   eax
c0013a18:	56                   	push   esi
c0013a19:	6a 00                	push   0x0
c0013a1b:	57                   	push   edi
c0013a1c:	e8 cf ca fe ff       	call   c00004f0 <memset>
c0013a21:	8d 4e ff             	lea    ecx,[esi-0x1]
c0013a24:	89 de                	mov    esi,ebx
c0013a26:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013a28:	83 c4 10             	add    esp,0x10
c0013a2b:	89 df                	mov    edi,ebx
c0013a2d:	5b                   	pop    ebx
c0013a2e:	89 f8                	mov    eax,edi
c0013a30:	5e                   	pop    esi
c0013a31:	5f                   	pop    edi
c0013a32:	c3                   	ret    

c0013a33 <SysEject(regs*)>:
c0013a33:	83 ec 0c             	sub    esp,0xc
c0013a36:	83 ca ff             	or     edx,0xffffffff
c0013a39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a3d:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013a40:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013a45:	83 e9 41             	sub    ecx,0x41
c0013a48:	83 f9 19             	cmp    ecx,0x19
c0013a4b:	77 18                	ja     c0013a65 <SysEject(regs*)+0x32>
c0013a4d:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c0013a54:	85 c9                	test   ecx,ecx
c0013a56:	74 0d                	je     c0013a65 <SysEject(regs*)+0x32>
c0013a58:	83 ec 0c             	sub    esp,0xc
c0013a5b:	51                   	push   ecx
c0013a5c:	e8 8b a0 ff ff       	call   c000daec <LogicalDisk::eject()>
c0013a61:	83 c4 10             	add    esp,0x10
c0013a64:	99                   	cdq    
c0013a65:	83 c4 0c             	add    esp,0xc
c0013a68:	c3                   	ret    

c0013a69 <SysExit(regs*)>:
c0013a69:	83 ec 18             	sub    esp,0x18
c0013a6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013a70:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013a73:	e8 10 2b 00 00       	call   c0016588 <terminateTask(int)>
c0013a78:	83 c8 ff             	or     eax,0xffffffff
c0013a7b:	83 c4 1c             	add    esp,0x1c
c0013a7e:	89 c2                	mov    edx,eax
c0013a80:	c3                   	ret    

c0013a81 <SysGetCwd(regs*)>:
c0013a81:	83 ec 10             	sub    esp,0x10
c0013a84:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013a88:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013a8b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013a8e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a93:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013a96:	e8 bd 7a ff ff       	call   c000b558 <Fs::getcwd(Process*, char*, int)>
c0013a9b:	83 c4 1c             	add    esp,0x1c
c0013a9e:	99                   	cdq    
c0013a9f:	c3                   	ret    

c0013aa0 <SysGetPID(regs*)>:
c0013aa0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013aa5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013aa8:	8b 00                	mov    eax,DWORD PTR [eax]
c0013aaa:	99                   	cdq    
c0013aab:	c3                   	ret    

c0013aac <SysGetRAMData(regs*)>:
c0013aac:	69 05 e4 5e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0025ee4,0xc8
c0013ab6:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0013abc:	99                   	cdq    
c0013abd:	f7 f9                	idiv   ecx
c0013abf:	c1 e0 18             	shl    eax,0x18
c0013ac2:	09 c8                	or     eax,ecx
c0013ac4:	99                   	cdq    
c0013ac5:	c3                   	ret    

c0013ac6 <SysGetVGAPtr(regs*)>:
c0013ac6:	55                   	push   ebp
c0013ac7:	57                   	push   edi
c0013ac8:	56                   	push   esi
c0013ac9:	53                   	push   ebx
c0013aca:	83 ec 18             	sub    esp,0x18
c0013acd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013ad1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013ad4:	e8 7b 25 00 00       	call   c0016054 <Thr::processFromPID(int)>
c0013ad9:	83 c4 10             	add    esp,0x10
c0013adc:	89 c1                	mov    ecx,eax
c0013ade:	b8 01 00 00 00       	mov    eax,0x1
c0013ae3:	85 c9                	test   ecx,ecx
c0013ae5:	74 57                	je     c0013b3e <SysGetVGAPtr(regs*)+0x78>
c0013ae7:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013aeb:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013af1:	74 0c                	je     c0013aff <SysGetVGAPtr(regs*)+0x39>
c0013af3:	83 ec 0c             	sub    esp,0xc
c0013af6:	55                   	push   ebp
c0013af7:	e8 73 4c ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0013afc:	83 c4 10             	add    esp,0x10
c0013aff:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013b02:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013b07:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013b0a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013b0c:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013b0f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013b12:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013b18:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013b1b:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013b1e:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013b24:	50                   	push   eax
c0013b25:	50                   	push   eax
c0013b26:	68 14 21 02 c0       	push   0xc0022114
c0013b2b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013b2e:	05 a8 0f 00 00       	add    eax,0xfa8
c0013b33:	50                   	push   eax
c0013b34:	e8 17 cb fe ff       	call   c0000650 <strcpy>
c0013b39:	83 c4 10             	add    esp,0x10
c0013b3c:	31 c0                	xor    eax,eax
c0013b3e:	83 c4 0c             	add    esp,0xc
c0013b41:	31 d2                	xor    edx,edx
c0013b43:	5b                   	pop    ebx
c0013b44:	5e                   	pop    esi
c0013b45:	5f                   	pop    edi
c0013b46:	5d                   	pop    ebp
c0013b47:	c3                   	ret    

c0013b48 <SysKill(regs*)>:
c0013b48:	53                   	push   ebx
c0013b49:	83 ec 08             	sub    esp,0x8
c0013b4c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013b50:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013b54:	75 16                	jne    c0013b6c <SysKill(regs*)+0x24>
c0013b56:	83 ec 0c             	sub    esp,0xc
c0013b59:	68 1e 21 02 c0       	push   0xc002211e
c0013b5e:	e8 a6 d7 ff ff       	call   c0011309 <KePanic(char const*)>
c0013b63:	83 c4 10             	add    esp,0x10
c0013b66:	e9 89 00 00 00       	jmp    c0013bf4 <SysKill(regs*)+0xac>
c0013b6b:	90                   	nop
c0013b6c:	83 ec 0c             	sub    esp,0xc
c0013b6f:	68 e4 96 02 c0       	push   0xc00296e4
c0013b74:	e8 33 bd 00 00       	call   c001f8ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013b79:	8d 76 00             	lea    esi,[esi+0x0]
c0013b7c:	83 c4 10             	add    esp,0x10
c0013b7f:	85 c0                	test   eax,eax
c0013b81:	74 19                	je     c0013b9c <SysKill(regs*)+0x54>
c0013b83:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013b86:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013b89:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013b8b:	74 33                	je     c0013bc0 <SysKill(regs*)+0x78>
c0013b8d:	52                   	push   edx
c0013b8e:	52                   	push   edx
c0013b8f:	50                   	push   eax
c0013b90:	68 e4 96 02 c0       	push   0xc00296e4
c0013b95:	e8 32 c0 00 00       	call   c001fbcc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013b9a:	eb e0                	jmp    c0013b7c <SysKill(regs*)+0x34>
c0013b9c:	83 ec 0c             	sub    esp,0xc
c0013b9f:	68 d8 96 02 c0       	push   0xc00296d8
c0013ba4:	e8 03 bd 00 00       	call   c001f8ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013ba9:	8d 76 00             	lea    esi,[esi+0x0]
c0013bac:	83 c4 10             	add    esp,0x10
c0013baf:	85 c0                	test   eax,eax
c0013bb1:	74 41                	je     c0013bf4 <SysKill(regs*)+0xac>
c0013bb3:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013bb6:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013bb9:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013bbb:	75 27                	jne    c0013be4 <SysKill(regs*)+0x9c>
c0013bbd:	8d 76 00             	lea    esi,[esi+0x0]
c0013bc0:	51                   	push   ecx
c0013bc1:	51                   	push   ecx
c0013bc2:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013bc5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013bca:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013bcd:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013bd3:	e8 cf db ff ff       	call   c00117a7 <KeRaiseSignal(SigHandlerBlock*, int)>
c0013bd8:	83 c4 10             	add    esp,0x10
c0013bdb:	31 c0                	xor    eax,eax
c0013bdd:	31 d2                	xor    edx,edx
c0013bdf:	eb 1b                	jmp    c0013bfc <SysKill(regs*)+0xb4>
c0013be1:	8d 76 00             	lea    esi,[esi+0x0]
c0013be4:	52                   	push   edx
c0013be5:	52                   	push   edx
c0013be6:	50                   	push   eax
c0013be7:	68 d8 96 02 c0       	push   0xc00296d8
c0013bec:	e8 db bf 00 00       	call   c001fbcc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013bf1:	eb b9                	jmp    c0013bac <SysKill(regs*)+0x64>
c0013bf3:	90                   	nop
c0013bf4:	83 c8 ff             	or     eax,0xffffffff
c0013bf7:	89 c2                	mov    edx,eax
c0013bf9:	8d 76 00             	lea    esi,[esi+0x0]
c0013bfc:	83 c4 08             	add    esp,0x8
c0013bff:	5b                   	pop    ebx
c0013c00:	c3                   	ret    

c0013c01 <SysLoadDLL(regs*)>:
c0013c01:	56                   	push   esi
c0013c02:	31 d2                	xor    edx,edx
c0013c04:	53                   	push   ebx
c0013c05:	b8 01 00 00 00       	mov    eax,0x1
c0013c0a:	51                   	push   ecx
c0013c0b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013c0f:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013c13:	0f 84 8c 00 00 00    	je     c0013ca5 <SysLoadDLL(regs*)+0xa4>
c0013c19:	83 ec 0c             	sub    esp,0xc
c0013c1c:	68 14 01 00 00       	push   0x114
c0013c21:	e8 ad 3e ff ff       	call   c0007ad3 <malloc>
c0013c26:	83 c4 0c             	add    esp,0xc
c0013c29:	89 c3                	mov    ebx,eax
c0013c2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c30:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013c33:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013c36:	53                   	push   ebx
c0013c37:	e8 08 7c ff ff       	call   c000b844 <File::File(char const*, Process*)>
c0013c3c:	83 c4 10             	add    esp,0x10
c0013c3f:	31 d2                	xor    edx,edx
c0013c41:	85 db                	test   ebx,ebx
c0013c43:	b8 02 00 00 00       	mov    eax,0x2
c0013c48:	74 5b                	je     c0013ca5 <SysLoadDLL(regs*)+0xa4>
c0013c4a:	83 ec 0c             	sub    esp,0xc
c0013c4d:	53                   	push   ebx
c0013c4e:	e8 7d 7f ff ff       	call   c000bbd0 <File::exists()>
c0013c53:	83 c4 10             	add    esp,0x10
c0013c56:	84 c0                	test   al,al
c0013c58:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c5a:	75 11                	jne    c0013c6d <SysLoadDLL(regs*)+0x6c>
c0013c5c:	83 ec 0c             	sub    esp,0xc
c0013c5f:	53                   	push   ebx
c0013c60:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013c63:	83 c4 10             	add    esp,0x10
c0013c66:	b8 03 00 00 00       	mov    eax,0x3
c0013c6b:	eb 36                	jmp    c0013ca3 <SysLoadDLL(regs*)+0xa2>
c0013c6d:	83 ec 0c             	sub    esp,0xc
c0013c70:	53                   	push   ebx
c0013c71:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013c74:	58                   	pop    eax
c0013c75:	5a                   	pop    edx
c0013c76:	6a 00                	push   0x0
c0013c78:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013c7b:	e8 1c 15 00 00       	call   c001519c <Thr::loadDLL(char const*, bool)>
c0013c80:	83 c4 10             	add    esp,0x10
c0013c83:	31 d2                	xor    edx,edx
c0013c85:	89 c1                	mov    ecx,eax
c0013c87:	b8 04 00 00 00       	mov    eax,0x4
c0013c8c:	85 c9                	test   ecx,ecx
c0013c8e:	74 15                	je     c0013ca5 <SysLoadDLL(regs*)+0xa4>
c0013c90:	53                   	push   ebx
c0013c91:	53                   	push   ebx
c0013c92:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0013c98:	51                   	push   ecx
c0013c99:	e8 3e 17 00 00       	call   c00153dc <Thr::executeDLL(unsigned long, void*)>
c0013c9e:	83 c4 10             	add    esp,0x10
c0013ca1:	31 c0                	xor    eax,eax
c0013ca3:	31 d2                	xor    edx,edx
c0013ca5:	59                   	pop    ecx
c0013ca6:	5b                   	pop    ebx
c0013ca7:	5e                   	pop    esi
c0013ca8:	c3                   	ret    

c0013ca9 <SysRead(regs*)>:
c0013ca9:	57                   	push   edi
c0013caa:	56                   	push   esi
c0013cab:	53                   	push   ebx
c0013cac:	83 ec 10             	sub    esp,0x10
c0013caf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013cb3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013cb6:	83 f8 02             	cmp    eax,0x2
c0013cb9:	77 10                	ja     c0013ccb <SysRead(regs*)+0x22>
c0013cbb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013cc0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013cc3:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013cc9:	eb 0e                	jmp    c0013cd9 <SysRead(regs*)+0x30>
c0013ccb:	83 ec 0c             	sub    esp,0xc
c0013cce:	50                   	push   eax
c0013ccf:	e8 c7 57 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0013cd4:	83 c4 10             	add    esp,0x10
c0013cd7:	89 c1                	mov    ecx,eax
c0013cd9:	83 c8 ff             	or     eax,0xffffffff
c0013cdc:	85 c9                	test   ecx,ecx
c0013cde:	89 c2                	mov    edx,eax
c0013ce0:	74 28                	je     c0013d0a <SysRead(regs*)+0x61>
c0013ce2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013cea:	83 ec 0c             	sub    esp,0xc
c0013ced:	31 ff                	xor    edi,edi
c0013cef:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013cf3:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013cf5:	52                   	push   edx
c0013cf6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013cf9:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013cfc:	57                   	push   edi
c0013cfd:	56                   	push   esi
c0013cfe:	51                   	push   ecx
c0013cff:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d02:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013d06:	83 c4 20             	add    esp,0x20
c0013d09:	99                   	cdq    
c0013d0a:	83 c4 10             	add    esp,0x10
c0013d0d:	5b                   	pop    ebx
c0013d0e:	5e                   	pop    esi
c0013d0f:	5f                   	pop    edi
c0013d10:	c3                   	ret    

c0013d11 <SysRegisterSignal(regs*)>:
c0013d11:	83 ec 18             	sub    esp,0x18
c0013d14:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d18:	6a 00                	push   0x0
c0013d1a:	6a 00                	push   0x0
c0013d1c:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013d1f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013d22:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d27:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013d2a:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013d30:	e8 3c da ff ff       	call   c0011771 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013d35:	83 c4 2c             	add    esp,0x2c
c0013d38:	99                   	cdq    
c0013d39:	c3                   	ret    

c0013d3a <SysRegistryGetTypeFromPath(regs*)>:
c0013d3a:	57                   	push   edi
c0013d3b:	56                   	push   esi
c0013d3c:	53                   	push   ebx
c0013d3d:	81 ec 38 01 00 00    	sub    esp,0x138
c0013d43:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0013d4a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013d4d:	68 3f 21 02 c0       	push   0xc002213f
c0013d52:	e8 b3 6b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013d57:	5a                   	pop    edx
c0013d58:	59                   	pop    ecx
c0013d59:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013d5c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013d5f:	e8 34 f6 ff ff       	call   c0013398 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013d64:	5f                   	pop    edi
c0013d65:	5a                   	pop    edx
c0013d66:	89 c6                	mov    esi,eax
c0013d68:	50                   	push   eax
c0013d69:	68 5f 21 02 c0       	push   0xc002215f
c0013d6e:	e8 97 6b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013d73:	83 c4 10             	add    esp,0x10
c0013d76:	85 f6                	test   esi,esi
c0013d78:	74 28                	je     c0013da2 <SysRegistryGetTypeFromPath(regs*)+0x68>
c0013d7a:	50                   	push   eax
c0013d7b:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013d7f:	57                   	push   edi
c0013d80:	56                   	push   esi
c0013d81:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013d84:	e8 f4 f1 ff ff       	call   c0012f7d <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013d89:	83 c4 0c             	add    esp,0xc
c0013d8c:	57                   	push   edi
c0013d8d:	50                   	push   eax
c0013d8e:	89 c3                	mov    ebx,eax
c0013d90:	68 67 21 02 c0       	push   0xc0022167
c0013d95:	e8 70 6b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013d9a:	89 d8                	mov    eax,ebx
c0013d9c:	83 c4 10             	add    esp,0x10
c0013d9f:	99                   	cdq    
c0013da0:	eb 05                	jmp    c0013da7 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0013da2:	83 c8 ff             	or     eax,0xffffffff
c0013da5:	89 c2                	mov    edx,eax
c0013da7:	81 c4 30 01 00 00    	add    esp,0x130
c0013dad:	5b                   	pop    ebx
c0013dae:	5e                   	pop    esi
c0013daf:	5f                   	pop    edi
c0013db0:	c3                   	ret    

c0013db1 <SysRegistryReadExtent(regs*)>:
c0013db1:	83 ec 1c             	sub    esp,0x1c
c0013db4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013db8:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013dbb:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0013dbe:	85 c0                	test   eax,eax
c0013dc0:	79 1f                	jns    c0013de1 <SysRegistryReadExtent(regs*)+0x30>
c0013dc2:	52                   	push   edx
c0013dc3:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0013dc8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013dcc:	52                   	push   edx
c0013dcd:	50                   	push   eax
c0013dce:	51                   	push   ecx
c0013dcf:	e8 9b f0 ff ff       	call   c0012e6f <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013dd4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013dd8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013ddc:	83 c4 10             	add    esp,0x10
c0013ddf:	eb 14                	jmp    c0013df5 <SysRegistryReadExtent(regs*)+0x44>
c0013de1:	83 ec 04             	sub    esp,0x4
c0013de4:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0013de7:	50                   	push   eax
c0013de8:	51                   	push   ecx
c0013de9:	e8 1f eb ff ff       	call   c001290d <CmGetString(Reghive_Tag*, int, char*)>
c0013dee:	83 c4 10             	add    esp,0x10
c0013df1:	31 c0                	xor    eax,eax
c0013df3:	31 d2                	xor    edx,edx
c0013df5:	83 c4 1c             	add    esp,0x1c
c0013df8:	c3                   	ret    

c0013df9 <SysRegistryPathToExtentLookup(regs*)>:
c0013df9:	53                   	push   ebx
c0013dfa:	83 ec 10             	sub    esp,0x10
c0013dfd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013e01:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013e04:	68 7d 21 02 c0       	push   0xc002217d
c0013e09:	e8 fc 6a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013e0e:	58                   	pop    eax
c0013e0f:	5a                   	pop    edx
c0013e10:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013e13:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013e16:	e8 7d f5 ff ff       	call   c0013398 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013e1b:	83 c4 18             	add    esp,0x18
c0013e1e:	5b                   	pop    ebx
c0013e1f:	99                   	cdq    
c0013e20:	c3                   	ret    

c0013e21 <SysRegistryEnterDirectory(regs*)>:
c0013e21:	53                   	push   ebx
c0013e22:	83 ec 10             	sub    esp,0x10
c0013e25:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013e29:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013e2c:	68 a0 21 02 c0       	push   0xc00221a0
c0013e31:	e8 d4 6a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013e36:	58                   	pop    eax
c0013e37:	5a                   	pop    edx
c0013e38:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013e3b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013e3e:	e8 41 eb ff ff       	call   c0012984 <CmEnterDirectory(Reghive_Tag*, int)>
c0013e43:	83 c4 18             	add    esp,0x18
c0013e46:	5b                   	pop    ebx
c0013e47:	99                   	cdq    
c0013e48:	c3                   	ret    

c0013e49 <SysRegistryGetNext(regs*)>:
c0013e49:	53                   	push   ebx
c0013e4a:	83 ec 10             	sub    esp,0x10
c0013e4d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013e51:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013e54:	68 be 21 02 c0       	push   0xc00221be
c0013e59:	e8 ac 6a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013e5e:	58                   	pop    eax
c0013e5f:	5a                   	pop    edx
c0013e60:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013e63:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013e66:	e8 58 eb ff ff       	call   c00129c3 <CmGetNext(Reghive_Tag*, int)>
c0013e6b:	83 c4 18             	add    esp,0x18
c0013e6e:	5b                   	pop    ebx
c0013e6f:	99                   	cdq    
c0013e70:	c3                   	ret    

c0013e71 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013e71:	57                   	push   edi
c0013e72:	56                   	push   esi
c0013e73:	53                   	push   ebx
c0013e74:	81 ec 34 01 00 00    	sub    esp,0x134
c0013e7a:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0013e81:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013e85:	57                   	push   edi
c0013e86:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013e89:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013e8c:	e8 ec f0 ff ff       	call   c0012f7d <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013e91:	89 c3                	mov    ebx,eax
c0013e93:	58                   	pop    eax
c0013e94:	5a                   	pop    edx
c0013e95:	57                   	push   edi
c0013e96:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013e99:	e8 b2 c7 fe ff       	call   c0000650 <strcpy>
c0013e9e:	81 c4 40 01 00 00    	add    esp,0x140
c0013ea4:	89 d8                	mov    eax,ebx
c0013ea6:	5b                   	pop    ebx
c0013ea7:	99                   	cdq    
c0013ea8:	5e                   	pop    esi
c0013ea9:	5f                   	pop    edi
c0013eaa:	c3                   	ret    

c0013eab <SysRegistryOpen(regs*)>:
c0013eab:	83 ec 18             	sub    esp,0x18
c0013eae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013eb2:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013eb5:	e8 e3 e8 ff ff       	call   c001279d <CmOpen(char const*)>
c0013eba:	83 c4 1c             	add    esp,0x1c
c0013ebd:	99                   	cdq    
c0013ebe:	c3                   	ret    

c0013ebf <SysRegistryClose(regs*)>:
c0013ebf:	83 ec 18             	sub    esp,0x18
c0013ec2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ec6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013ec9:	e8 ed e9 ff ff       	call   c00128bb <CmClose(Reghive_Tag*)>
c0013ece:	31 c0                	xor    eax,eax
c0013ed0:	31 d2                	xor    edx,edx
c0013ed2:	83 c4 1c             	add    esp,0x1c
c0013ed5:	c3                   	ret    

c0013ed6 <SysSbrk(regs*)>:
c0013ed6:	56                   	push   esi
c0013ed7:	53                   	push   ebx
c0013ed8:	50                   	push   eax
c0013ed9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ede:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013ee2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013ee5:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0013ee8:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0013eee:	85 db                	test   ebx,ebx
c0013ef0:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0013ef3:	74 02                	je     c0013ef7 <SysSbrk(regs*)+0x21>
c0013ef5:	79 06                	jns    c0013efd <SysSbrk(regs*)+0x27>
c0013ef7:	89 f0                	mov    eax,esi
c0013ef9:	31 d2                	xor    edx,edx
c0013efb:	eb 2a                	jmp    c0013f27 <SysSbrk(regs*)+0x51>
c0013efd:	83 c8 ff             	or     eax,0xffffffff
c0013f00:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0013f06:	89 c2                	mov    edx,eax
c0013f08:	77 1d                	ja     c0013f27 <SysSbrk(regs*)+0x51>
c0013f0a:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013f10:	50                   	push   eax
c0013f11:	68 07 0c 00 00       	push   0xc07
c0013f16:	c1 ea 0c             	shr    edx,0xc
c0013f19:	52                   	push   edx
c0013f1a:	51                   	push   ecx
c0013f1b:	e8 e6 5e ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c0013f20:	89 f0                	mov    eax,esi
c0013f22:	31 d2                	xor    edx,edx
c0013f24:	83 c4 10             	add    esp,0x10
c0013f27:	59                   	pop    ecx
c0013f28:	5b                   	pop    ebx
c0013f29:	5e                   	pop    esi
c0013f2a:	c3                   	ret    

c0013f2b <SysSetCwd(regs*)>:
c0013f2b:	83 ec 14             	sub    esp,0x14
c0013f2e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013f32:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013f35:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f3a:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013f3d:	e8 2d 7d ff ff       	call   c000bc6f <Fs::setcwd(Process*, char*)>
c0013f42:	83 c4 1c             	add    esp,0x1c
c0013f45:	99                   	cdq    
c0013f46:	c3                   	ret    

c0013f47 <SysSetTime(regs*)>:
c0013f47:	55                   	push   ebp
c0013f48:	31 c9                	xor    ecx,ecx
c0013f4a:	57                   	push   edi
c0013f4b:	bd 0c 00 00 00       	mov    ebp,0xc
c0013f50:	56                   	push   esi
c0013f51:	53                   	push   ebx
c0013f52:	31 db                	xor    ebx,ebx
c0013f54:	83 ec 10             	sub    esp,0x10
c0013f57:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013f5b:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013f5e:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0013f61:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0013f64:	89 c2                	mov    edx,eax
c0013f66:	c1 e8 05             	shr    eax,0x5
c0013f69:	83 e2 1f             	and    edx,0x1f
c0013f6c:	42                   	inc    edx
c0013f6d:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0013f73:	c1 e7 10             	shl    edi,0x10
c0013f76:	88 d1                	mov    cl,dl
c0013f78:	31 d2                	xor    edx,edx
c0013f7a:	f7 f5                	div    ebp
c0013f7c:	89 dd                	mov    ebp,ebx
c0013f7e:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0013f84:	88 d5                	mov    ch,dl
c0013f86:	31 d2                	xor    edx,edx
c0013f88:	0f b7 c1             	movzx  eax,cx
c0013f8b:	09 f8                	or     eax,edi
c0013f8d:	bf 3c 00 00 00       	mov    edi,0x3c
c0013f92:	89 c1                	mov    ecx,eax
c0013f94:	89 f0                	mov    eax,esi
c0013f96:	f7 f7                	div    edi
c0013f98:	c1 e2 10             	shl    edx,0x10
c0013f9b:	09 d5                	or     ebp,edx
c0013f9d:	31 d2                	xor    edx,edx
c0013f9f:	f7 f7                	div    edi
c0013fa1:	89 eb                	mov    ebx,ebp
c0013fa3:	bf 10 0e 00 00       	mov    edi,0xe10
c0013fa8:	89 f0                	mov    eax,esi
c0013faa:	88 d7                	mov    bh,dl
c0013fac:	31 d2                	xor    edx,edx
c0013fae:	f7 f7                	div    edi
c0013fb0:	bf 18 00 00 00       	mov    edi,0x18
c0013fb5:	31 d2                	xor    edx,edx
c0013fb7:	f7 f7                	div    edi
c0013fb9:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0013fbe:	88 d3                	mov    bl,dl
c0013fc0:	53                   	push   ebx
c0013fc1:	51                   	push   ecx
c0013fc2:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013fc8:	e8 b3 84 ff ff       	call   c000c480 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0013fcd:	83 c4 1c             	add    esp,0x1c
c0013fd0:	31 d2                	xor    edx,edx
c0013fd2:	5b                   	pop    ebx
c0013fd3:	5e                   	pop    esi
c0013fd4:	83 f0 01             	xor    eax,0x1
c0013fd7:	5f                   	pop    edi
c0013fd8:	0f b6 c0             	movzx  eax,al
c0013fdb:	5d                   	pop    ebp
c0013fdc:	c3                   	ret    

c0013fdd <SysTimezone(regs*)>:
c0013fdd:	53                   	push   ebx
c0013fde:	83 ec 08             	sub    esp,0x8
c0013fe1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013fe5:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0013fe9:	75 17                	jne    c0014002 <SysTimezone(regs*)+0x25>
c0013feb:	83 ec 0c             	sub    esp,0xc
c0013fee:	68 d5 21 02 c0       	push   0xc00221d5
c0013ff3:	e8 12 69 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013ff8:	83 c8 ff             	or     eax,0xffffffff
c0013ffb:	83 c4 10             	add    esp,0x10
c0013ffe:	89 c2                	mov    edx,eax
c0014000:	eb 20                	jmp    c0014022 <SysTimezone(regs*)+0x45>
c0014002:	83 ec 0c             	sub    esp,0xc
c0014005:	68 ea 21 02 c0       	push   0xc00221ea
c001400a:	e8 fb 68 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001400f:	58                   	pop    eax
c0014010:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014013:	e8 cc 81 ff ff       	call   c000c1e4 <User::loadClockSettings(int)>
c0014018:	83 c4 10             	add    esp,0x10
c001401b:	b8 01 00 00 00       	mov    eax,0x1
c0014020:	31 d2                	xor    edx,edx
c0014022:	83 c4 08             	add    esp,0x8
c0014025:	5b                   	pop    ebx
c0014026:	c3                   	ret    

c0014027 <SysTruncate(regs*)>:
c0014027:	55                   	push   ebp
c0014028:	57                   	push   edi
c0014029:	31 ff                	xor    edi,edi
c001402b:	56                   	push   esi
c001402c:	53                   	push   ebx
c001402d:	83 ec 0c             	sub    esp,0xc
c0014030:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014034:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014037:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c001403b:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c001403e:	89 ce                	mov    esi,ecx
c0014040:	0f 84 9a 00 00 00    	je     c00140e0 <SysTruncate(regs*)+0xb9>
c0014046:	83 ec 0c             	sub    esp,0xc
c0014049:	68 14 01 00 00       	push   0x114
c001404e:	e8 80 3a ff ff       	call   c0007ad3 <malloc>
c0014053:	83 c4 0c             	add    esp,0xc
c0014056:	89 c3                	mov    ebx,eax
c0014058:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001405d:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014060:	55                   	push   ebp
c0014061:	53                   	push   ebx
c0014062:	e8 dd 77 ff ff       	call   c000b844 <File::File(char const*, Process*)>
c0014067:	83 c4 10             	add    esp,0x10
c001406a:	31 d2                	xor    edx,edx
c001406c:	85 db                	test   ebx,ebx
c001406e:	b8 03 00 00 00       	mov    eax,0x3
c0014073:	0f 84 a2 00 00 00    	je     c001411b <SysTruncate(regs*)+0xf4>
c0014079:	51                   	push   ecx
c001407a:	51                   	push   ecx
c001407b:	6a 02                	push   0x2
c001407d:	53                   	push   ebx
c001407e:	e8 89 78 ff ff       	call   c000b90c <File::open(FileOpenMode)>
c0014083:	83 c4 10             	add    esp,0x10
c0014086:	85 c0                	test   eax,eax
c0014088:	74 13                	je     c001409d <SysTruncate(regs*)+0x76>
c001408a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001408c:	83 ec 0c             	sub    esp,0xc
c001408f:	53                   	push   ebx
c0014090:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014093:	83 c4 10             	add    esp,0x10
c0014096:	b8 04 00 00 00       	mov    eax,0x4
c001409b:	eb 7c                	jmp    c0014119 <SysTruncate(regs*)+0xf2>
c001409d:	52                   	push   edx
c001409e:	57                   	push   edi
c001409f:	56                   	push   esi
c00140a0:	53                   	push   ebx
c00140a1:	e8 7a 79 ff ff       	call   c000ba20 <File::truncate(unsigned long long)>
c00140a6:	83 c4 10             	add    esp,0x10
c00140a9:	85 c0                	test   eax,eax
c00140ab:	74 1b                	je     c00140c8 <SysTruncate(regs*)+0xa1>
c00140ad:	83 ec 0c             	sub    esp,0xc
c00140b0:	53                   	push   ebx
c00140b1:	e8 b4 78 ff ff       	call   c000b96a <File::close()>
c00140b6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00140b8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00140bb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00140be:	83 c4 10             	add    esp,0x10
c00140c1:	b8 05 00 00 00       	mov    eax,0x5
c00140c6:	eb 51                	jmp    c0014119 <SysTruncate(regs*)+0xf2>
c00140c8:	83 ec 0c             	sub    esp,0xc
c00140cb:	53                   	push   ebx
c00140cc:	e8 99 78 ff ff       	call   c000b96a <File::close()>
c00140d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00140d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00140d6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00140d9:	83 c4 10             	add    esp,0x10
c00140dc:	31 c0                	xor    eax,eax
c00140de:	eb 39                	jmp    c0014119 <SysTruncate(regs*)+0xf2>
c00140e0:	31 d2                	xor    edx,edx
c00140e2:	83 fd 02             	cmp    ebp,0x2
c00140e5:	b8 01 00 00 00       	mov    eax,0x1
c00140ea:	7e 2f                	jle    c001411b <SysTruncate(regs*)+0xf4>
c00140ec:	83 ec 0c             	sub    esp,0xc
c00140ef:	51                   	push   ecx
c00140f0:	e8 a6 53 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c00140f5:	83 c4 10             	add    esp,0x10
c00140f8:	31 d2                	xor    edx,edx
c00140fa:	89 c1                	mov    ecx,eax
c00140fc:	b8 02 00 00 00       	mov    eax,0x2
c0014101:	85 c9                	test   ecx,ecx
c0014103:	74 16                	je     c001411b <SysTruncate(regs*)+0xf4>
c0014105:	50                   	push   eax
c0014106:	57                   	push   edi
c0014107:	56                   	push   esi
c0014108:	51                   	push   ecx
c0014109:	e8 12 79 ff ff       	call   c000ba20 <File::truncate(unsigned long long)>
c001410e:	83 c4 10             	add    esp,0x10
c0014111:	85 c0                	test   eax,eax
c0014113:	0f 95 c0             	setne  al
c0014116:	0f b6 c0             	movzx  eax,al
c0014119:	31 d2                	xor    edx,edx
c001411b:	83 c4 0c             	add    esp,0xc
c001411e:	5b                   	pop    ebx
c001411f:	5e                   	pop    esi
c0014120:	5f                   	pop    edi
c0014121:	5d                   	pop    ebp
c0014122:	c3                   	ret    

c0014123 <SysWrite(regs*)>:
c0014123:	57                   	push   edi
c0014124:	56                   	push   esi
c0014125:	53                   	push   ebx
c0014126:	83 ec 10             	sub    esp,0x10
c0014129:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001412d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014130:	83 f8 02             	cmp    eax,0x2
c0014133:	77 10                	ja     c0014145 <SysWrite(regs*)+0x22>
c0014135:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001413a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001413d:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0014143:	eb 0e                	jmp    c0014153 <SysWrite(regs*)+0x30>
c0014145:	83 ec 0c             	sub    esp,0xc
c0014148:	50                   	push   eax
c0014149:	e8 4d 53 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c001414e:	83 c4 10             	add    esp,0x10
c0014151:	89 c1                	mov    ecx,eax
c0014153:	83 c8 ff             	or     eax,0xffffffff
c0014156:	85 c9                	test   ecx,ecx
c0014158:	89 c2                	mov    edx,eax
c001415a:	74 28                	je     c0014184 <SysWrite(regs*)+0x61>
c001415c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014164:	83 ec 0c             	sub    esp,0xc
c0014167:	31 ff                	xor    edi,edi
c0014169:	8d 54 24 18          	lea    edx,[esp+0x18]
c001416d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001416f:	52                   	push   edx
c0014170:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014173:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014176:	57                   	push   edi
c0014177:	56                   	push   esi
c0014178:	51                   	push   ecx
c0014179:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001417c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014180:	83 c4 20             	add    esp,0x20
c0014183:	99                   	cdq    
c0014184:	83 c4 10             	add    esp,0x10
c0014187:	5b                   	pop    ebx
c0014188:	5e                   	pop    esi
c0014189:	5f                   	pop    edi
c001418a:	c3                   	ret    

c001418b <SysWsbe(regs*)>:
c001418b:	57                   	push   edi
c001418c:	b9 0b 00 00 00       	mov    ecx,0xb
c0014191:	56                   	push   esi
c0014192:	be 29 22 02 c0       	mov    esi,0xc0022229
c0014197:	53                   	push   ebx
c0014198:	83 ec 30             	sub    esp,0x30
c001419b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001419f:	fc                   	cld    
c00141a0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00141a2:	83 ec 0c             	sub    esp,0xc
c00141a5:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00141a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141ae:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00141b1:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00141b7:	8b 06                	mov    eax,DWORD PTR [esi]
c00141b9:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00141bc:	57                   	push   edi
c00141bd:	e8 be c3 fe ff       	call   c0000580 <strlen>
c00141c2:	5a                   	pop    edx
c00141c3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00141c7:	52                   	push   edx
c00141c8:	31 d2                	xor    edx,edx
c00141ca:	57                   	push   edi
c00141cb:	52                   	push   edx
c00141cc:	50                   	push   eax
c00141cd:	56                   	push   esi
c00141ce:	ff d3                	call   ebx
c00141d0:	83 c4 14             	add    esp,0x14
c00141d3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00141d7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00141da:	e8 a9 23 00 00       	call   c0016588 <terminateTask(int)>
c00141df:	83 c4 40             	add    esp,0x40
c00141e2:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00141e7:	5b                   	pop    ebx
c00141e8:	31 d2                	xor    edx,edx
c00141ea:	5e                   	pop    esi
c00141eb:	5f                   	pop    edi
c00141ec:	c3                   	ret    

c00141ed <SysYield(regs*)>:
c00141ed:	83 ec 0c             	sub    esp,0xc
c00141f0:	fa                   	cli    
c00141f1:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00141f7:	e8 0c 1a 00 00       	call   c0015c08 <schedule()>
c00141fc:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0014201:	48                   	dec    eax
c0014202:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0014207:	75 01                	jne    c001420a <SysYield(regs*)+0x1d>
c0014209:	fb                   	sti    
c001420a:	31 c0                	xor    eax,eax
c001420c:	31 d2                	xor    edx,edx
c001420e:	83 c4 0c             	add    esp,0xc
c0014211:	c3                   	ret    

c0014212 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0014212:	55                   	push   ebp
c0014213:	57                   	push   edi
c0014214:	56                   	push   esi
c0014215:	53                   	push   ebx
c0014216:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001421c:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0014227:	74 3b                	je     c0014264 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0014229:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0014231:	74 31                	je     c0014264 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0014233:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001423b:	75 27                	jne    c0014264 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001423d:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0014244:	05 00 10 00 00       	add    eax,0x1000
c0014249:	89 c2                	mov    edx,eax
c001424b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014250:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0014257:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001425d:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0014264:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c001426b:	83 ec 0c             	sub    esp,0xc
c001426e:	6a 01                	push   0x1
c0014270:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0014276:	e8 7a 53 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001427b:	83 c4 10             	add    esp,0x10
c001427e:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0014284:	89 c3                	mov    ebx,eax
c0014286:	0f 86 26 01 00 00    	jbe    c00143b2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c001428c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014294:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001429b:	c1 ee 0c             	shr    esi,0xc
c001429e:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00142a2:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00142a9:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00142b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00142b4:	29 ef                	sub    edi,ebp
c00142b6:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00142ba:	0f 83 f9 00 00 00    	jae    c00143b9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c00142c0:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00142c6:	b8 00 10 00 00       	mov    eax,0x1000
c00142cb:	0f 47 f8             	cmova  edi,eax
c00142ce:	83 ec 0c             	sub    esp,0xc
c00142d1:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00142d8:	31 d2                	xor    edx,edx
c00142da:	8b 08                	mov    ecx,DWORD PTR [eax]
c00142dc:	8d 44 24 28          	lea    eax,[esp+0x28]
c00142e0:	50                   	push   eax
c00142e1:	8d 74 24 30          	lea    esi,[esp+0x30]
c00142e5:	56                   	push   esi
c00142e6:	52                   	push   edx
c00142e7:	57                   	push   edi
c00142e8:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00142ef:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00142f2:	83 c4 20             	add    esp,0x20
c00142f5:	85 c0                	test   eax,eax
c00142f7:	75 06                	jne    c00142ff <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c00142f9:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00142fd:	74 13                	je     c0014312 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c00142ff:	83 ec 0c             	sub    esp,0xc
c0014302:	53                   	push   ebx
c0014303:	e8 01 56 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0014308:	83 c4 10             	add    esp,0x10
c001430b:	31 c0                	xor    eax,eax
c001430d:	e9 7c 01 00 00       	jmp    c001448e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c0014312:	fa                   	cli    
c0014313:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0014319:	e8 c4 3a ff ff       	call   c0007de2 <Phys::allocatePage()>
c001431e:	6a 07                	push   0x7
c0014320:	53                   	push   ebx
c0014321:	50                   	push   eax
c0014322:	89 c7                	mov    edi,eax
c0014324:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014329:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001432c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014332:	e8 c7 59 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0014337:	83 c4 0c             	add    esp,0xc
c001433a:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014341:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014347:	6a 00                	push   0x0
c0014349:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001434e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014351:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014357:	e8 08 58 ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c001435c:	58                   	pop    eax
c001435d:	5a                   	pop    edx
c001435e:	68 07 0c 00 00       	push   0xc07
c0014363:	55                   	push   ebp
c0014364:	57                   	push   edi
c0014365:	89 df                	mov    edi,ebx
c0014367:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001436e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014374:	6a 00                	push   0x0
c0014376:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001437b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001437e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014384:	e8 d9 5b ff ff       	call   c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014389:	b9 00 10 00 00       	mov    ecx,0x1000
c001438e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014390:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0014395:	83 c4 20             	add    esp,0x20
c0014398:	48                   	dec    eax
c0014399:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001439e:	85 c0                	test   eax,eax
c00143a0:	75 01                	jne    c00143a3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c00143a2:	fb                   	sti    
c00143a3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00143a7:	81 c5 00 10 00 00    	add    ebp,0x1000
c00143ad:	e9 f0 fe ff ff       	jmp    c00142a2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c00143b2:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00143b9:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00143c0:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00143c6:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00143cc:	0f 86 ae 00 00 00    	jbe    c0014480 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c00143d2:	fa                   	cli    
c00143d3:	51                   	push   ecx
c00143d4:	31 ff                	xor    edi,edi
c00143d6:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00143dd:	c1 ee 0c             	shr    esi,0xc
c00143e0:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00143e6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00143ec:	6a 00                	push   0x0
c00143ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143f3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00143f6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00143fc:	e8 63 57 ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c0014401:	83 c4 10             	add    esp,0x10
c0014404:	e8 d9 39 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0014409:	47                   	inc    edi
c001440a:	6a 07                	push   0x7
c001440c:	53                   	push   ebx
c001440d:	50                   	push   eax
c001440e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014412:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014418:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001441b:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0014421:	e8 d8 58 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0014426:	58                   	pop    eax
c0014427:	5a                   	pop    edx
c0014428:	68 07 0c 00 00       	push   0xc07
c001442d:	55                   	push   ebp
c001442e:	81 c5 00 10 00 00    	add    ebp,0x1000
c0014434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014438:	50                   	push   eax
c0014439:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014440:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014446:	6a 00                	push   0x0
c0014448:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001444d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014450:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014456:	e8 07 5b ff ff       	call   c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001445b:	83 c4 1c             	add    esp,0x1c
c001445e:	68 00 10 00 00       	push   0x1000
c0014463:	6a 00                	push   0x0
c0014465:	53                   	push   ebx
c0014466:	e8 85 c0 fe ff       	call   c00004f0 <memset>
c001446b:	83 c4 10             	add    esp,0x10
c001446e:	39 fe                	cmp    esi,edi
c0014470:	77 92                	ja     c0014404 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c0014472:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0014477:	48                   	dec    eax
c0014478:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001447d:	75 01                	jne    c0014480 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c001447f:	fb                   	sti    
c0014480:	83 ec 0c             	sub    esp,0xc
c0014483:	53                   	push   ebx
c0014484:	e8 80 54 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0014489:	83 c4 10             	add    esp,0x10
c001448c:	b0 01                	mov    al,0x1
c001448e:	81 c4 2c 10 00 00    	add    esp,0x102c
c0014494:	5b                   	pop    ebx
c0014495:	5e                   	pop    esi
c0014496:	5f                   	pop    edi
c0014497:	5d                   	pop    ebp
c0014498:	c3                   	ret    

c0014499 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0014499:	55                   	push   ebp
c001449a:	57                   	push   edi
c001449b:	56                   	push   esi
c001449c:	53                   	push   ebx
c001449d:	83 ec 48             	sub    esp,0x48
c00144a0:	68 14 01 00 00       	push   0x114
c00144a5:	e8 29 36 ff ff       	call   c0007ad3 <malloc>
c00144aa:	83 c4 0c             	add    esp,0xc
c00144ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00144b1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00144b5:	89 c7                	mov    edi,eax
c00144b7:	50                   	push   eax
c00144b8:	e8 87 73 ff ff       	call   c000b844 <File::File(char const*, Process*)>
c00144bd:	58                   	pop    eax
c00144be:	5a                   	pop    edx
c00144bf:	6a 01                	push   0x1
c00144c1:	57                   	push   edi
c00144c2:	e8 45 74 ff ff       	call   c000b90c <File::open(FileOpenMode)>
c00144c7:	83 c4 10             	add    esp,0x10
c00144ca:	85 c0                	test   eax,eax
c00144cc:	0f 85 4c 01 00 00    	jne    c001461e <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00144d2:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00144da:	83 ec 0c             	sub    esp,0xc
c00144dd:	6a 34                	push   0x34
c00144df:	e8 ef 35 ff ff       	call   c0007ad3 <malloc>
c00144e4:	89 c3                	mov    ebx,eax
c00144e6:	58                   	pop    eax
c00144e7:	8b 07                	mov    eax,DWORD PTR [edi]
c00144e9:	8d 74 24 38          	lea    esi,[esp+0x38]
c00144ed:	56                   	push   esi
c00144ee:	53                   	push   ebx
c00144ef:	6a 00                	push   0x0
c00144f1:	6a 34                	push   0x34
c00144f3:	57                   	push   edi
c00144f4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00144f7:	83 c4 20             	add    esp,0x20
c00144fa:	85 c0                	test   eax,eax
c00144fc:	0f 85 1c 01 00 00    	jne    c001461e <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014502:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0014508:	0f 85 10 01 00 00    	jne    c001461e <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001450e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014511:	85 c0                	test   eax,eax
c0014513:	0f 84 05 01 00 00    	je     c001461e <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014519:	31 d2                	xor    edx,edx
c001451b:	55                   	push   ebp
c001451c:	52                   	push   edx
c001451d:	50                   	push   eax
c001451e:	57                   	push   edi
c001451f:	e8 a6 74 ff ff       	call   c000b9ca <File::seek(unsigned long long)>
c0014524:	83 c4 10             	add    esp,0x10
c0014527:	85 c0                	test   eax,eax
c0014529:	0f 85 ef 00 00 00    	jne    c001461e <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001452f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014532:	83 ec 0c             	sub    esp,0xc
c0014535:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014539:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001453d:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014541:	0f af c2             	imul   eax,edx
c0014544:	50                   	push   eax
c0014545:	e8 89 35 ff ff       	call   c0007ad3 <malloc>
c001454a:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001454c:	89 34 24             	mov    DWORD PTR [esp],esi
c001454f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014553:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014557:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001455b:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001455f:	0f af c2             	imul   eax,edx
c0014562:	99                   	cdq    
c0014563:	52                   	push   edx
c0014564:	50                   	push   eax
c0014565:	57                   	push   edi
c0014566:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014569:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001456c:	83 c4 20             	add    esp,0x20
c001456f:	85 c0                	test   eax,eax
c0014571:	0f 84 a7 00 00 00    	je     c001461e <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014577:	31 d2                	xor    edx,edx
c0014579:	51                   	push   ecx
c001457a:	52                   	push   edx
c001457b:	50                   	push   eax
c001457c:	57                   	push   edi
c001457d:	e8 48 74 ff ff       	call   c000b9ca <File::seek(unsigned long long)>
c0014582:	83 c4 10             	add    esp,0x10
c0014585:	85 c0                	test   eax,eax
c0014587:	0f 85 91 00 00 00    	jne    c001461e <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001458d:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014591:	83 ec 0c             	sub    esp,0xc
c0014594:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014598:	0f af c2             	imul   eax,edx
c001459b:	50                   	push   eax
c001459c:	e8 32 35 ff ff       	call   c0007ad3 <malloc>
c00145a1:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00145a3:	89 34 24             	mov    DWORD PTR [esp],esi
c00145a6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00145aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145ae:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00145b2:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00145b6:	0f af c2             	imul   eax,edx
c00145b9:	99                   	cdq    
c00145ba:	52                   	push   edx
c00145bb:	50                   	push   eax
c00145bc:	57                   	push   edi
c00145bd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00145c0:	83 c4 20             	add    esp,0x20
c00145c3:	31 c9                	xor    ecx,ecx
c00145c5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00145cd:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c00145d1:	0f b7 e9             	movzx  ebp,cx
c00145d4:	0f 83 86 00 00 00    	jae    c0014660 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c00145da:	c1 e5 05             	shl    ebp,0x5
c00145dd:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c00145e1:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c00145e5:	75 73                	jne    c001465a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c00145e7:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00145eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145ee:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c00145f1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00145f5:	52                   	push   edx
c00145f6:	31 d2                	xor    edx,edx
c00145f8:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00145fb:	52                   	push   edx
c00145fc:	50                   	push   eax
c00145fd:	57                   	push   edi
c00145fe:	e8 c7 73 ff ff       	call   c000b9ca <File::seek(unsigned long long)>
c0014603:	83 c4 10             	add    esp,0x10
c0014606:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001460a:	85 c0                	test   eax,eax
c001460c:	74 17                	je     c0014625 <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c001460e:	83 ec 0c             	sub    esp,0xc
c0014611:	68 55 22 02 c0       	push   0xc0022255
c0014616:	e8 ef 62 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001461b:	83 c4 10             	add    esp,0x10
c001461e:	31 c0                	xor    eax,eax
c0014620:	e9 8b 00 00 00       	jmp    c00146b0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c0014625:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014629:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001462c:	83 ec 0c             	sub    esp,0xc
c001462f:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0014632:	50                   	push   eax
c0014633:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014637:	56                   	push   esi
c0014638:	57                   	push   edi
c0014639:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001463d:	e8 d0 fb ff ff       	call   c0014212 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0014642:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0014646:	83 c4 20             	add    esp,0x20
c0014649:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001464d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014651:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0014656:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001465a:	41                   	inc    ecx
c001465b:	e9 6d ff ff ff       	jmp    c00145cd <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014660:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014664:	83 ec 0c             	sub    esp,0xc
c0014667:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001466b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001466f:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c0014675:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c001467b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014680:	05 00 10 00 00       	add    eax,0x1000
c0014685:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014688:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001468c:	e8 52 34 ff ff       	call   c0007ae3 <free>
c0014691:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014694:	e8 4a 34 ff ff       	call   c0007ae3 <free>
c0014699:	58                   	pop    eax
c001469a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001469e:	e8 40 34 ff ff       	call   c0007ae3 <free>
c00146a3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00146a6:	e8 bf 72 ff ff       	call   c000b96a <File::close()>
c00146ab:	83 c4 10             	add    esp,0x10
c00146ae:	b0 01                	mov    al,0x1
c00146b0:	83 c4 3c             	add    esp,0x3c
c00146b3:	5b                   	pop    ebx
c00146b4:	5e                   	pop    esi
c00146b5:	5f                   	pop    edi
c00146b6:	5d                   	pop    ebp
c00146b7:	c3                   	ret    

c00146b8 <Thr::runtimeReferenceHelper()>:
c00146b8:	83 ec 18             	sub    esp,0x18
c00146bb:	68 5d 22 02 c0       	push   0xc002225d
c00146c0:	e8 45 62 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00146c5:	fa                   	cli    
c00146c6:	83 c4 10             	add    esp,0x10
c00146c9:	eb fe                	jmp    c00146c9 <Thr::runtimeReferenceHelper()+0x11>

c00146cb <Thr::getAddressOfKernelSymbol(char const*)>:
c00146cb:	57                   	push   edi
c00146cc:	56                   	push   esi
c00146cd:	53                   	push   ebx
c00146ce:	31 db                	xor    ebx,ebx
c00146d0:	39 1d a0 96 02 c0    	cmp    DWORD PTR ds:0xc00296a0,ebx
c00146d6:	7e 3c                	jle    c0014714 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00146d8:	8b 34 9d 20 96 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd69e0]
c00146df:	31 ff                	xor    edi,edi
c00146e1:	39 3c 9d 20 95 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd6ae0],edi
c00146e8:	7e 27                	jle    c0014711 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00146ea:	50                   	push   eax
c00146eb:	50                   	push   eax
c00146ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00146f0:	8b 06                	mov    eax,DWORD PTR [esi]
c00146f2:	03 04 9d a0 95 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd6a60]
c00146f9:	50                   	push   eax
c00146fa:	e8 81 c0 fe ff       	call   c0000780 <strcmp>
c00146ff:	83 c4 10             	add    esp,0x10
c0014702:	85 c0                	test   eax,eax
c0014704:	75 05                	jne    c001470b <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0014706:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014709:	eb 0b                	jmp    c0014716 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001470b:	83 c6 10             	add    esi,0x10
c001470e:	47                   	inc    edi
c001470f:	eb d0                	jmp    c00146e1 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014711:	43                   	inc    ebx
c0014712:	eb bc                	jmp    c00146d0 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0014714:	31 c0                	xor    eax,eax
c0014716:	5b                   	pop    ebx
c0014717:	5e                   	pop    esi
c0014718:	5f                   	pop    edi
c0014719:	c3                   	ret    

c001471a <Thr::loadKernelSymbolTable(char const*)>:
c001471a:	55                   	push   ebp
c001471b:	57                   	push   edi
c001471c:	56                   	push   esi
c001471d:	53                   	push   ebx
c001471e:	83 ec 68             	sub    esp,0x68
c0014721:	68 14 01 00 00       	push   0x114
c0014726:	8b 35 f0 96 02 c0    	mov    esi,DWORD PTR ds:0xc00296f0
c001472c:	e8 a2 33 ff ff       	call   c0007ad3 <malloc>
c0014731:	83 c4 0c             	add    esp,0xc
c0014734:	56                   	push   esi
c0014735:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014739:	89 c3                	mov    ebx,eax
c001473b:	50                   	push   eax
c001473c:	e8 03 71 ff ff       	call   c000b844 <File::File(char const*, Process*)>
c0014741:	5e                   	pop    esi
c0014742:	5f                   	pop    edi
c0014743:	6a 01                	push   0x1
c0014745:	53                   	push   ebx
c0014746:	e8 c1 71 ff ff       	call   c000b90c <File::open(FileOpenMode)>
c001474b:	83 c4 10             	add    esp,0x10
c001474e:	85 c0                	test   eax,eax
c0014750:	74 0a                	je     c001475c <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014752:	83 ec 0c             	sub    esp,0xc
c0014755:	68 7f 22 02 c0       	push   0xc002227f
c001475a:	eb 34                	jmp    c0014790 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001475c:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014764:	83 ec 0c             	sub    esp,0xc
c0014767:	6a 34                	push   0x34
c0014769:	e8 65 33 ff ff       	call   c0007ad3 <malloc>
c001476e:	59                   	pop    ecx
c001476f:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014773:	89 c7                	mov    edi,eax
c0014775:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014777:	56                   	push   esi
c0014778:	57                   	push   edi
c0014779:	6a 00                	push   0x0
c001477b:	6a 34                	push   0x34
c001477d:	53                   	push   ebx
c001477e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014781:	83 c4 20             	add    esp,0x20
c0014784:	85 c0                	test   eax,eax
c0014786:	74 17                	je     c001479f <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014788:	83 ec 0c             	sub    esp,0xc
c001478b:	68 96 22 02 c0       	push   0xc0022296
c0014790:	e8 74 cb ff ff       	call   c0011309 <KePanic(char const*)>
c0014795:	83 c4 10             	add    esp,0x10
c0014798:	31 c0                	xor    eax,eax
c001479a:	e9 31 02 00 00       	jmp    c00149d0 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001479f:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00147a5:	75 e1                	jne    c0014788 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00147a7:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00147aa:	85 c0                	test   eax,eax
c00147ac:	74 da                	je     c0014788 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00147ae:	52                   	push   edx
c00147af:	31 d2                	xor    edx,edx
c00147b1:	52                   	push   edx
c00147b2:	50                   	push   eax
c00147b3:	53                   	push   ebx
c00147b4:	e8 11 72 ff ff       	call   c000b9ca <File::seek(unsigned long long)>
c00147b9:	83 c4 10             	add    esp,0x10
c00147bc:	85 c0                	test   eax,eax
c00147be:	75 c8                	jne    c0014788 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00147c0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00147c4:	83 ec 0c             	sub    esp,0xc
c00147c7:	31 ed                	xor    ebp,ebp
c00147c9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00147cd:	0f af c2             	imul   eax,edx
c00147d0:	50                   	push   eax
c00147d1:	e8 fd 32 ff ff       	call   c0007ad3 <malloc>
c00147d6:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00147d8:	89 34 24             	mov    DWORD PTR [esp],esi
c00147db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00147df:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00147e3:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00147e7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00147eb:	0f af c2             	imul   eax,edx
c00147ee:	99                   	cdq    
c00147ef:	52                   	push   edx
c00147f0:	50                   	push   eax
c00147f1:	53                   	push   ebx
c00147f2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00147f5:	83 c4 20             	add    esp,0x20
c00147f8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014800:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014808:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014810:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014818:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c001481c:	0f b7 f5             	movzx  esi,bp
c001481f:	0f 83 a7 00 00 00    	jae    c00148cc <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014825:	6b f6 28             	imul   esi,esi,0x28
c0014828:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001482c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001482f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014833:	50                   	push   eax
c0014834:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014838:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001483c:	8b 16                	mov    edx,DWORD PTR [esi]
c001483e:	6b c0 28             	imul   eax,eax,0x28
c0014841:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0014845:	89 d0                	mov    eax,edx
c0014847:	31 d2                	xor    edx,edx
c0014849:	52                   	push   edx
c001484a:	50                   	push   eax
c001484b:	53                   	push   ebx
c001484c:	e8 79 71 ff ff       	call   c000b9ca <File::seek(unsigned long long)>
c0014851:	83 c4 0c             	add    esp,0xc
c0014854:	6a 20                	push   0x20
c0014856:	6a 00                	push   0x0
c0014858:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001485c:	52                   	push   edx
c001485d:	e8 8e bc fe ff       	call   c00004f0 <memset>
c0014862:	58                   	pop    eax
c0014863:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014865:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014869:	51                   	push   ecx
c001486a:	8d 54 24 40          	lea    edx,[esp+0x40]
c001486e:	52                   	push   edx
c001486f:	6a 00                	push   0x0
c0014871:	6a 1f                	push   0x1f
c0014873:	53                   	push   ebx
c0014874:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014877:	83 c4 18             	add    esp,0x18
c001487a:	68 ad 22 02 c0       	push   0xc00222ad
c001487f:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014883:	52                   	push   edx
c0014884:	e8 f7 be fe ff       	call   c0000780 <strcmp>
c0014889:	83 c4 10             	add    esp,0x10
c001488c:	85 c0                	test   eax,eax
c001488e:	75 0f                	jne    c001489f <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014890:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014893:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014897:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001489b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001489f:	50                   	push   eax
c00148a0:	50                   	push   eax
c00148a1:	68 b5 22 02 c0       	push   0xc00222b5
c00148a6:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00148aa:	50                   	push   eax
c00148ab:	e8 d0 be fe ff       	call   c0000780 <strcmp>
c00148b0:	83 c4 10             	add    esp,0x10
c00148b3:	85 c0                	test   eax,eax
c00148b5:	75 0f                	jne    c00148c6 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00148b7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00148ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00148be:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00148c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00148c6:	45                   	inc    ebp
c00148c7:	e9 4c ff ff ff       	jmp    c0014818 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00148cc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00148d1:	75 10                	jne    c00148e3 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00148d3:	83 ec 0c             	sub    esp,0xc
c00148d6:	68 bd 22 02 c0       	push   0xc00222bd
c00148db:	e8 29 ca ff ff       	call   c0011309 <KePanic(char const*)>
c00148e0:	83 c4 10             	add    esp,0x10
c00148e3:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00148e8:	75 10                	jne    c00148fa <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00148ea:	83 ec 0c             	sub    esp,0xc
c00148ed:	68 bd 22 02 c0       	push   0xc00222bd
c00148f2:	e8 12 ca ff ff       	call   c0011309 <KePanic(char const*)>
c00148f7:	83 c4 10             	add    esp,0x10
c00148fa:	50                   	push   eax
c00148fb:	31 d2                	xor    edx,edx
c00148fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014901:	52                   	push   edx
c0014902:	50                   	push   eax
c0014903:	53                   	push   ebx
c0014904:	e8 c1 70 ff ff       	call   c000b9ca <File::seek(unsigned long long)>
c0014909:	5a                   	pop    edx
c001490a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001490e:	e8 c0 31 ff ff       	call   c0007ad3 <malloc>
c0014913:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014917:	31 c9                	xor    ecx,ecx
c0014919:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001491d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001491f:	5e                   	pop    esi
c0014920:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014924:	55                   	push   ebp
c0014925:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014929:	51                   	push   ecx
c001492a:	52                   	push   edx
c001492b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001492f:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014933:	53                   	push   ebx
c0014934:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014937:	83 c4 14             	add    esp,0x14
c001493a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001493e:	e8 90 31 ff ff       	call   c0007ad3 <malloc>
c0014943:	89 c6                	mov    esi,eax
c0014945:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014947:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001494a:	56                   	push   esi
c001494b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001494f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014953:	51                   	push   ecx
c0014954:	52                   	push   edx
c0014955:	53                   	push   ebx
c0014956:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014959:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001495d:	83 c4 1c             	add    esp,0x1c
c0014960:	8b 15 a0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296a0
c0014966:	c1 e8 04             	shr    eax,0x4
c0014969:	89 04 95 20 95 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6ae0],eax
c0014970:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014974:	31 d2                	xor    edx,edx
c0014976:	52                   	push   edx
c0014977:	50                   	push   eax
c0014978:	53                   	push   ebx
c0014979:	e8 4c 70 ff ff       	call   c000b9ca <File::seek(unsigned long long)>
c001497e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014980:	31 d2                	xor    edx,edx
c0014982:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014985:	56                   	push   esi
c0014986:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001498a:	52                   	push   edx
c001498b:	50                   	push   eax
c001498c:	53                   	push   ebx
c001498d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014990:	83 c4 14             	add    esp,0x14
c0014993:	53                   	push   ebx
c0014994:	e8 d1 6f ff ff       	call   c000b96a <File::close()>
c0014999:	5d                   	pop    ebp
c001499a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001499e:	e8 40 31 ff ff       	call   c0007ae3 <free>
c00149a3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00149a6:	e8 38 31 ff ff       	call   c0007ae3 <free>
c00149ab:	a1 a0 96 02 c0       	mov    eax,ds:0xc00296a0
c00149b0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00149b4:	83 c4 10             	add    esp,0x10
c00149b7:	89 34 85 a0 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6a60],esi
c00149be:	8d 50 01             	lea    edx,[eax+0x1]
c00149c1:	89 0c 85 20 96 02 c0 	mov    DWORD PTR [eax*4-0x3ffd69e0],ecx
c00149c8:	b0 01                	mov    al,0x1
c00149ca:	89 15 a0 96 02 c0    	mov    DWORD PTR ds:0xc00296a0,edx
c00149d0:	83 c4 5c             	add    esp,0x5c
c00149d3:	5b                   	pop    ebx
c00149d4:	5e                   	pop    esi
c00149d5:	5f                   	pop    edi
c00149d6:	5d                   	pop    ebp
c00149d7:	c3                   	ret    

c00149d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00149d8:	55                   	push   ebp
c00149d9:	57                   	push   edi
c00149da:	56                   	push   esi
c00149db:	53                   	push   ebx
c00149dc:	81 ec 68 03 00 00    	sub    esp,0x368
c00149e2:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00149e9:	8b 35 f0 96 02 c0    	mov    esi,DWORD PTR ds:0xc00296f0
c00149ef:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00149f3:	68 14 01 00 00       	push   0x114
c00149f8:	e8 d6 30 ff ff       	call   c0007ad3 <malloc>
c00149fd:	83 c4 0c             	add    esp,0xc
c0014a00:	56                   	push   esi
c0014a01:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014a08:	50                   	push   eax
c0014a09:	89 c3                	mov    ebx,eax
c0014a0b:	e8 34 6e ff ff       	call   c000b844 <File::File(char const*, Process*)>
c0014a10:	5f                   	pop    edi
c0014a11:	5d                   	pop    ebp
c0014a12:	6a 01                	push   0x1
c0014a14:	53                   	push   ebx
c0014a15:	e8 f2 6e ff ff       	call   c000b90c <File::open(FileOpenMode)>
c0014a1a:	83 c4 10             	add    esp,0x10
c0014a1d:	85 c0                	test   eax,eax
c0014a1f:	0f 85 b3 06 00 00    	jne    c00150d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014a25:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014a2d:	83 ec 0c             	sub    esp,0xc
c0014a30:	6a 34                	push   0x34
c0014a32:	e8 9c 30 ff ff       	call   c0007ad3 <malloc>
c0014a37:	5e                   	pop    esi
c0014a38:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014a3c:	89 c5                	mov    ebp,eax
c0014a3e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014a40:	56                   	push   esi
c0014a41:	55                   	push   ebp
c0014a42:	6a 00                	push   0x0
c0014a44:	6a 34                	push   0x34
c0014a46:	53                   	push   ebx
c0014a47:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014a4a:	83 c4 20             	add    esp,0x20
c0014a4d:	85 c0                	test   eax,eax
c0014a4f:	0f 85 83 06 00 00    	jne    c00150d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014a55:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0014a5c:	0f 85 76 06 00 00    	jne    c00150d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014a62:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0014a65:	85 c0                	test   eax,eax
c0014a67:	0f 84 6b 06 00 00    	je     c00150d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014a6d:	31 d2                	xor    edx,edx
c0014a6f:	51                   	push   ecx
c0014a70:	52                   	push   edx
c0014a71:	50                   	push   eax
c0014a72:	53                   	push   ebx
c0014a73:	e8 52 6f ff ff       	call   c000b9ca <File::seek(unsigned long long)>
c0014a78:	83 c4 10             	add    esp,0x10
c0014a7b:	85 c0                	test   eax,eax
c0014a7d:	0f 85 55 06 00 00    	jne    c00150d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014a83:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0014a86:	83 ec 0c             	sub    esp,0xc
c0014a89:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014a8d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014a91:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014a95:	0f af c2             	imul   eax,edx
c0014a98:	50                   	push   eax
c0014a99:	e8 35 30 ff ff       	call   c0007ad3 <malloc>
c0014a9e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014aa0:	89 34 24             	mov    DWORD PTR [esp],esi
c0014aa3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014aa7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014aab:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014aaf:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014ab3:	0f af c2             	imul   eax,edx
c0014ab6:	99                   	cdq    
c0014ab7:	52                   	push   edx
c0014ab8:	50                   	push   eax
c0014ab9:	53                   	push   ebx
c0014aba:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014abd:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0014ac0:	83 c4 20             	add    esp,0x20
c0014ac3:	85 c0                	test   eax,eax
c0014ac5:	0f 84 0d 06 00 00    	je     c00150d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014acb:	52                   	push   edx
c0014acc:	31 d2                	xor    edx,edx
c0014ace:	52                   	push   edx
c0014acf:	50                   	push   eax
c0014ad0:	53                   	push   ebx
c0014ad1:	e8 f4 6e ff ff       	call   c000b9ca <File::seek(unsigned long long)>
c0014ad6:	83 c4 10             	add    esp,0x10
c0014ad9:	85 c0                	test   eax,eax
c0014adb:	0f 85 f7 05 00 00    	jne    c00150d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014ae1:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014ae5:	83 ec 0c             	sub    esp,0xc
c0014ae8:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014aec:	0f af c2             	imul   eax,edx
c0014aef:	50                   	push   eax
c0014af0:	e8 de 2f ff ff       	call   c0007ad3 <malloc>
c0014af5:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014af7:	89 34 24             	mov    DWORD PTR [esp],esi
c0014afa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014afe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b02:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014b06:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014b0a:	0f af c2             	imul   eax,edx
c0014b0d:	99                   	cdq    
c0014b0e:	52                   	push   edx
c0014b0f:	50                   	push   eax
c0014b10:	53                   	push   ebx
c0014b11:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014b14:	83 c4 20             	add    esp,0x20
c0014b17:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0014b1d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014b20:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c0014b24:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c0014b28:	73 78                	jae    c0014ba2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0014b2a:	c1 e7 05             	shl    edi,0x5
c0014b2d:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0014b31:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014b34:	75 63                	jne    c0014b99 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c0014b36:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014b39:	31 d2                	xor    edx,edx
c0014b3b:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c0014b3e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014b42:	50                   	push   eax
c0014b43:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014b46:	52                   	push   edx
c0014b47:	50                   	push   eax
c0014b48:	53                   	push   ebx
c0014b49:	e8 7c 6e ff ff       	call   c000b9ca <File::seek(unsigned long long)>
c0014b4e:	83 c4 10             	add    esp,0x10
c0014b51:	85 c0                	test   eax,eax
c0014b53:	0f 85 7f 05 00 00    	jne    c00150d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014b59:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014b60:	83 ec 0c             	sub    esp,0xc
c0014b63:	31 d2                	xor    edx,edx
c0014b65:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0014b69:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014b6b:	01 c6                	add    esi,eax
c0014b6d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014b74:	50                   	push   eax
c0014b75:	56                   	push   esi
c0014b76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b7a:	52                   	push   edx
c0014b7b:	50                   	push   eax
c0014b7c:	53                   	push   ebx
c0014b7d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014b80:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014b83:	83 c4 1c             	add    esp,0x1c
c0014b86:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0014b89:	50                   	push   eax
c0014b8a:	6a 00                	push   0x0
c0014b8c:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0014b90:	56                   	push   esi
c0014b91:	e8 5a b9 fe ff       	call   c00004f0 <memset>
c0014b96:	83 c4 10             	add    esp,0x10
c0014b99:	66 ff 04 24          	inc    WORD PTR [esp]
c0014b9d:	e9 7b ff ff ff       	jmp    c0014b1d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c0014ba2:	50                   	push   eax
c0014ba3:	68 00 01 00 00       	push   0x100
c0014ba8:	6a 00                	push   0x0
c0014baa:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0014bae:	50                   	push   eax
c0014baf:	e8 3c b9 fe ff       	call   c00004f0 <memset>
c0014bb4:	83 c4 0c             	add    esp,0xc
c0014bb7:	68 00 01 00 00       	push   0x100
c0014bbc:	6a 00                	push   0x0
c0014bbe:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0014bc5:	50                   	push   eax
c0014bc6:	e8 25 b9 fe ff       	call   c00004f0 <memset>
c0014bcb:	83 c4 10             	add    esp,0x10
c0014bce:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c0014bd5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014bdc:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014be4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014bec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014bf4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014bfc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014c00:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c0014c04:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0014c09:	0f 83 16 01 00 00    	jae    c0014d25 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c0014c0f:	6b ff 28             	imul   edi,edi,0x28
c0014c12:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c0014c16:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0014c19:	51                   	push   ecx
c0014c1a:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0014c1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014c22:	8b 07                	mov    eax,DWORD PTR [edi]
c0014c24:	6b d2 28             	imul   edx,edx,0x28
c0014c27:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014c2b:	31 d2                	xor    edx,edx
c0014c2d:	52                   	push   edx
c0014c2e:	50                   	push   eax
c0014c2f:	53                   	push   ebx
c0014c30:	e8 95 6d ff ff       	call   c000b9ca <File::seek(unsigned long long)>
c0014c35:	83 c4 0c             	add    esp,0xc
c0014c38:	6a 20                	push   0x20
c0014c3a:	6a 00                	push   0x0
c0014c3c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014c43:	51                   	push   ecx
c0014c44:	e8 a7 b8 fe ff       	call   c00004f0 <memset>
c0014c49:	58                   	pop    eax
c0014c4a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014c4c:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014c50:	52                   	push   edx
c0014c51:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0014c58:	51                   	push   ecx
c0014c59:	6a 00                	push   0x0
c0014c5b:	6a 1f                	push   0x1f
c0014c5d:	53                   	push   ebx
c0014c5e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014c61:	83 c4 1c             	add    esp,0x1c
c0014c64:	6a 09                	push   0x9
c0014c66:	68 d7 22 02 c0       	push   0xc00222d7
c0014c6b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014c72:	51                   	push   ecx
c0014c73:	e8 08 b7 fe ff       	call   c0000380 <memcmp>
c0014c78:	83 c4 10             	add    esp,0x10
c0014c7b:	85 c0                	test   eax,eax
c0014c7d:	75 1a                	jne    c0014c99 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c0014c7f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014c82:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0014c85:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0014c89:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014c8c:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014c93:	89 d0                	mov    eax,edx
c0014c95:	40                   	inc    eax
c0014c96:	89 04 24             	mov    DWORD PTR [esp],eax
c0014c99:	52                   	push   edx
c0014c9a:	6a 09                	push   0x9
c0014c9c:	68 e1 22 02 c0       	push   0xc00222e1
c0014ca1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014ca8:	50                   	push   eax
c0014ca9:	e8 d2 b6 fe ff       	call   c0000380 <memcmp>
c0014cae:	83 c4 10             	add    esp,0x10
c0014cb1:	85 c0                	test   eax,eax
c0014cb3:	75 1a                	jne    c0014ccf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c0014cb5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014cb8:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0014cbb:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0014cbf:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014cc2:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0014cc9:	89 c8                	mov    eax,ecx
c0014ccb:	40                   	inc    eax
c0014ccc:	89 04 24             	mov    DWORD PTR [esp],eax
c0014ccf:	50                   	push   eax
c0014cd0:	50                   	push   eax
c0014cd1:	68 ad 22 02 c0       	push   0xc00222ad
c0014cd6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014cdd:	50                   	push   eax
c0014cde:	e8 9d ba fe ff       	call   c0000780 <strcmp>
c0014ce3:	83 c4 10             	add    esp,0x10
c0014ce6:	85 c0                	test   eax,eax
c0014ce8:	75 0b                	jne    c0014cf5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c0014cea:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0014cee:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014cf1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014cf5:	50                   	push   eax
c0014cf6:	50                   	push   eax
c0014cf7:	68 b5 22 02 c0       	push   0xc00222b5
c0014cfc:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014d03:	50                   	push   eax
c0014d04:	e8 77 ba fe ff       	call   c0000780 <strcmp>
c0014d09:	83 c4 10             	add    esp,0x10
c0014d0c:	85 c0                	test   eax,eax
c0014d0e:	75 0b                	jne    c0014d1b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c0014d10:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c0014d14:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014d17:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014d1b:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c0014d20:	e9 d7 fe ff ff       	jmp    c0014bfc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c0014d25:	50                   	push   eax
c0014d26:	31 d2                	xor    edx,edx
c0014d28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d2c:	52                   	push   edx
c0014d2d:	50                   	push   eax
c0014d2e:	53                   	push   ebx
c0014d2f:	e8 96 6c ff ff       	call   c000b9ca <File::seek(unsigned long long)>
c0014d34:	58                   	pop    eax
c0014d35:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014d39:	e8 95 2d ff ff       	call   c0007ad3 <malloc>
c0014d3e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014d40:	31 d2                	xor    edx,edx
c0014d42:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0014d46:	58                   	pop    eax
c0014d47:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014d4b:	56                   	push   esi
c0014d4c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014d50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d54:	52                   	push   edx
c0014d55:	50                   	push   eax
c0014d56:	53                   	push   ebx
c0014d57:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014d5a:	83 c4 14             	add    esp,0x14
c0014d5d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d61:	e8 6d 2d ff ff       	call   c0007ad3 <malloc>
c0014d66:	31 d2                	xor    edx,edx
c0014d68:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014d6c:	83 c4 0c             	add    esp,0xc
c0014d6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d73:	52                   	push   edx
c0014d74:	50                   	push   eax
c0014d75:	53                   	push   ebx
c0014d76:	e8 4f 6c ff ff       	call   c000b9ca <File::seek(unsigned long long)>
c0014d7b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014d7d:	31 d2                	xor    edx,edx
c0014d7f:	89 34 24             	mov    DWORD PTR [esp],esi
c0014d82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014d86:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014d8a:	52                   	push   edx
c0014d8b:	50                   	push   eax
c0014d8c:	53                   	push   ebx
c0014d8d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014d90:	83 c4 20             	add    esp,0x20
c0014d93:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c0014d98:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014da0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014da4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014da8:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0014dab:	0f 84 2b 03 00 00    	je     c00150dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c0014db1:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c0014db8:	31 d2                	xor    edx,edx
c0014dba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014dbe:	c1 e8 03             	shr    eax,0x3
c0014dc1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014dc5:	51                   	push   ecx
c0014dc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014dca:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0014dce:	52                   	push   edx
c0014dcf:	50                   	push   eax
c0014dd0:	53                   	push   ebx
c0014dd1:	e8 f4 6b ff ff       	call   c000b9ca <File::seek(unsigned long long)>
c0014dd6:	5e                   	pop    esi
c0014dd7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ddb:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0014de2:	e8 ec 2c ff ff       	call   c0007ad3 <malloc>
c0014de7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014de9:	31 d2                	xor    edx,edx
c0014deb:	89 c7                	mov    edi,eax
c0014ded:	58                   	pop    eax
c0014dee:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014df2:	50                   	push   eax
c0014df3:	57                   	push   edi
c0014df4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014df8:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0014dff:	52                   	push   edx
c0014e00:	50                   	push   eax
c0014e01:	53                   	push   ebx
c0014e02:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014e05:	83 c4 20             	add    esp,0x20
c0014e08:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014e10:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0014e14:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0014e18:	0f 8d a5 02 00 00    	jge    c00150c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c0014e1e:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0014e23:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e27:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c0014e2a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014e2e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e32:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c0014e36:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014e3a:	c1 e8 08             	shr    eax,0x8
c0014e3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014e41:	89 c2                	mov    edx,eax
c0014e43:	c1 e2 04             	shl    edx,0x4
c0014e46:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c0014e4a:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0014e4d:	85 f6                	test   esi,esi
c0014e4f:	0f 85 cf 00 00 00    	jne    c0014f24 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014e55:	83 ec 0c             	sub    esp,0xc
c0014e58:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0014e5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e60:	03 02                	add    eax,DWORD PTR [edx]
c0014e62:	50                   	push   eax
c0014e63:	e8 63 f8 ff ff       	call   c00146cb <Thr::getAddressOfKernelSymbol(char const*)>
c0014e68:	83 c4 10             	add    esp,0x10
c0014e6b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014e6f:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c0014e74:	85 c0                	test   eax,eax
c0014e76:	89 c6                	mov    esi,eax
c0014e78:	0f 85 a6 00 00 00    	jne    c0014f24 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014e7e:	83 ec 0c             	sub    esp,0xc
c0014e81:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0014e85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e89:	03 02                	add    eax,DWORD PTR [edx]
c0014e8b:	50                   	push   eax
c0014e8c:	e8 63 c6 ff ff       	call   c00114f4 <KeResolveCompatibilitySymbol(char*)>
c0014e91:	83 c4 10             	add    esp,0x10
c0014e94:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014e98:	85 c0                	test   eax,eax
c0014e9a:	89 c6                	mov    esi,eax
c0014e9c:	0f 85 82 00 00 00    	jne    c0014f24 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014ea2:	50                   	push   eax
c0014ea3:	50                   	push   eax
c0014ea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014ea8:	03 02                	add    eax,DWORD PTR [edx]
c0014eaa:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0014eae:	50                   	push   eax
c0014eaf:	68 eb 22 02 c0       	push   0xc00222eb
c0014eb4:	e8 51 5a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014eb9:	58                   	pop    eax
c0014eba:	5a                   	pop    edx
c0014ebb:	68 05 23 02 c0       	push   0xc0022305
c0014ec0:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014ec7:	51                   	push   ecx
c0014ec8:	e8 83 b7 fe ff       	call   c0000650 <strcpy>
c0014ecd:	59                   	pop    ecx
c0014ece:	58                   	pop    eax
c0014ecf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014ed3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014ed7:	03 02                	add    eax,DWORD PTR [edx]
c0014ed9:	50                   	push   eax
c0014eda:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014ee1:	51                   	push   ecx
c0014ee2:	e8 89 b9 fe ff       	call   c0000870 <strcat>
c0014ee7:	58                   	pop    eax
c0014ee8:	5a                   	pop    edx
c0014ee9:	68 9b 23 02 c0       	push   0xc002239b
c0014eee:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014ef5:	51                   	push   ecx
c0014ef6:	e8 75 b9 fe ff       	call   c0000870 <strcat>
c0014efb:	83 c4 10             	add    esp,0x10
c0014efe:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014f03:	0f 84 77 01 00 00    	je     c0015080 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014f09:	83 ec 0c             	sub    esp,0xc
c0014f0c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014f13:	51                   	push   ecx
c0014f14:	e8 f0 c3 ff ff       	call   c0011309 <KePanic(char const*)>
c0014f19:	83 c4 10             	add    esp,0x10
c0014f1c:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0014f20:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0014f24:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0014f29:	83 f8 01             	cmp    eax,0x1
c0014f2c:	0f 85 9b 00 00 00    	jne    c0014fcd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c0014f32:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014f36:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c0014f3d:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c0014f41:	01 d0                	add    eax,edx
c0014f43:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0014f4b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014f4f:	0f 94 c0             	sete   al
c0014f52:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014f5a:	0f 94 c1             	sete   cl
c0014f5d:	09 c1                	or     ecx,eax
c0014f5f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014f63:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014f68:	0f b6 c9             	movzx  ecx,cl
c0014f6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f6d:	74 41                	je     c0014fb0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c0014f6f:	8d 14 06             	lea    edx,[esi+eax*1]
c0014f72:	85 c9                	test   ecx,ecx
c0014f74:	75 15                	jne    c0014f8b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c0014f76:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014f7a:	66 83 f8 0c          	cmp    ax,0xc
c0014f7e:	76 05                	jbe    c0014f85 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c0014f80:	b8 0c 00 00 00       	mov    eax,0xc
c0014f85:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0014f89:	76 37                	jbe    c0014fc2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014f8b:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014f90:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014f94:	0f 84 e6 00 00 00    	je     c0015080 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014f9a:	83 ec 0c             	sub    esp,0xc
c0014f9d:	68 1c 23 02 c0       	push   0xc002231c
c0014fa2:	e8 62 c3 ff ff       	call   c0011309 <KePanic(char const*)>
c0014fa7:	83 c4 10             	add    esp,0x10
c0014faa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014fae:	eb 12                	jmp    c0014fc2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014fb0:	01 c2                	add    edx,eax
c0014fb2:	85 c9                	test   ecx,ecx
c0014fb4:	75 0c                	jne    c0014fc2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014fb6:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014fba:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0014fbe:	77 02                	ja     c0014fc2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014fc0:	01 f2                	add    edx,esi
c0014fc2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014fc6:	89 10                	mov    DWORD PTR [eax],edx
c0014fc8:	e9 ed 00 00 00       	jmp    c00150ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0014fcd:	83 f8 02             	cmp    eax,0x2
c0014fd0:	0f 85 81 00 00 00    	jne    c0015057 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c0014fd6:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014fdd:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c0014fe1:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0014fe5:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0014fed:	74 21                	je     c0015010 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0014fef:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014ff7:	74 17                	je     c0015010 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0014ff9:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c0014ffd:	ba 0a 00 00 00       	mov    edx,0xa
c0015002:	83 f9 0e             	cmp    ecx,0xe
c0015005:	77 03                	ja     c001500a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c0015007:	8d 51 fc             	lea    edx,[ecx-0x4]
c001500a:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c001500e:	76 1f                	jbe    c001502f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c0015010:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0015015:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015019:	74 65                	je     c0015080 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c001501b:	83 ec 0c             	sub    esp,0xc
c001501e:	68 38 23 02 c0       	push   0xc0022338
c0015023:	e8 e1 c2 ff ff       	call   c0011309 <KePanic(char const*)>
c0015028:	83 c4 10             	add    esp,0x10
c001502b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001502f:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0015034:	8b 10                	mov    edx,DWORD PTR [eax]
c0015036:	74 15                	je     c001504d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c0015038:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001503c:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0015043:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0015047:	01 d1                	add    ecx,edx
c0015049:	01 ce                	add    esi,ecx
c001504b:	eb 06                	jmp    c0015053 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c001504d:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c0015051:	01 d6                	add    esi,edx
c0015053:	89 30                	mov    DWORD PTR [eax],esi
c0015055:	eb 63                	jmp    c00150ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0015057:	56                   	push   esi
c0015058:	56                   	push   esi
c0015059:	50                   	push   eax
c001505a:	68 54 23 02 c0       	push   0xc0022354
c001505f:	e8 a6 58 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015064:	83 c4 10             	add    esp,0x10
c0015067:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001506c:	74 12                	je     c0015080 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c001506e:	83 ec 0c             	sub    esp,0xc
c0015071:	68 5f 23 02 c0       	push   0xc002235f
c0015076:	e8 8e c2 ff ff       	call   c0011309 <KePanic(char const*)>
c001507b:	83 c4 10             	add    esp,0x10
c001507e:	eb 3a                	jmp    c00150ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0015080:	83 ec 0c             	sub    esp,0xc
c0015083:	53                   	push   ebx
c0015084:	e8 e1 68 ff ff       	call   c000b96a <File::close()>
c0015089:	8b 03                	mov    eax,DWORD PTR [ebx]
c001508b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001508e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015091:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015094:	e8 4a 2a ff ff       	call   c0007ae3 <free>
c0015099:	59                   	pop    ecx
c001509a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001509e:	e8 40 2a ff ff       	call   c0007ae3 <free>
c00150a3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00150a6:	e8 38 2a ff ff       	call   c0007ae3 <free>
c00150ab:	5b                   	pop    ebx
c00150ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00150b0:	e8 2e 2a ff ff       	call   c0007ae3 <free>
c00150b5:	83 c4 10             	add    esp,0x10
c00150b8:	eb 1e                	jmp    c00150d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00150ba:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00150be:	e9 4d fd ff ff       	jmp    c0014e10 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c00150c3:	83 ec 0c             	sub    esp,0xc
c00150c6:	57                   	push   edi
c00150c7:	e8 17 2a ff ff       	call   c0007ae3 <free>
c00150cc:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00150d0:	83 c4 10             	add    esp,0x10
c00150d3:	e9 cc fc ff ff       	jmp    c0014da4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c00150d8:	31 c0                	xor    eax,eax
c00150da:	eb 32                	jmp    c001510e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c00150dc:	83 ec 0c             	sub    esp,0xc
c00150df:	53                   	push   ebx
c00150e0:	e8 85 68 ff ff       	call   c000b96a <File::close()>
c00150e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00150e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00150ea:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00150ed:	58                   	pop    eax
c00150ee:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00150f2:	e8 ec 29 ff ff       	call   c0007ae3 <free>
c00150f7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00150fa:	e8 e4 29 ff ff       	call   c0007ae3 <free>
c00150ff:	5a                   	pop    edx
c0015100:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015104:	e8 da 29 ff ff       	call   c0007ae3 <free>
c0015109:	83 c4 10             	add    esp,0x10
c001510c:	b0 01                	mov    al,0x1
c001510e:	81 c4 5c 03 00 00    	add    esp,0x35c
c0015114:	5b                   	pop    ebx
c0015115:	5e                   	pop    esi
c0015116:	5f                   	pop    edi
c0015117:	5d                   	pop    ebp
c0015118:	c3                   	ret    

c0015119 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0015119:	56                   	push   esi
c001511a:	31 d2                	xor    edx,edx
c001511c:	53                   	push   ebx
c001511d:	8b 1d 00 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028f00
c0015123:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015127:	39 d3                	cmp    ebx,edx
c0015129:	7e 1b                	jle    c0015146 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001512b:	8b 04 95 20 91 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6ee0]
c0015132:	39 c8                	cmp    eax,ecx
c0015134:	77 0d                	ja     c0015143 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0015136:	8b 34 95 20 8f 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd70e0]
c001513d:	01 c6                	add    esi,eax
c001513f:	39 ce                	cmp    esi,ecx
c0015141:	77 05                	ja     c0015148 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0015143:	42                   	inc    edx
c0015144:	eb e1                	jmp    c0015127 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0015146:	31 c0                	xor    eax,eax
c0015148:	5b                   	pop    ebx
c0015149:	5e                   	pop    esi
c001514a:	c3                   	ret    

c001514b <Thr::getDriverNameFromAddress(unsigned long)>:
c001514b:	53                   	push   ebx
c001514c:	8b 1d 00 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028f00
c0015152:	31 c0                	xor    eax,eax
c0015154:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015158:	39 c3                	cmp    ebx,eax
c001515a:	7e 22                	jle    c001517e <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001515c:	8b 14 85 20 91 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6ee0]
c0015163:	39 ca                	cmp    edx,ecx
c0015165:	77 14                	ja     c001517b <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015167:	03 14 85 20 8f 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd70e0]
c001516e:	39 ca                	cmp    edx,ecx
c0015170:	76 09                	jbe    c001517b <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015172:	8b 04 85 20 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ce0]
c0015179:	eb 05                	jmp    c0015180 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001517b:	40                   	inc    eax
c001517c:	eb da                	jmp    c0015158 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001517e:	31 c0                	xor    eax,eax
c0015180:	5b                   	pop    ebx
c0015181:	c3                   	ret    

c0015182 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0015182:	53                   	push   ebx
c0015183:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015187:	53                   	push   ebx
c0015188:	e8 8c ff ff ff       	call   c0015119 <Thr::getDriverBaseFromAddress(unsigned long)>
c001518d:	5a                   	pop    edx
c001518e:	31 d2                	xor    edx,edx
c0015190:	85 c0                	test   eax,eax
c0015192:	74 04                	je     c0015198 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0015194:	89 da                	mov    edx,ebx
c0015196:	29 c2                	sub    edx,eax
c0015198:	5b                   	pop    ebx
c0015199:	89 d0                	mov    eax,edx
c001519b:	c3                   	ret    

c001519c <Thr::loadDLL(char const*, bool)>:
c001519c:	55                   	push   ebp
c001519d:	57                   	push   edi
c001519e:	56                   	push   esi
c001519f:	53                   	push   ebx
c00151a0:	81 ec 34 01 00 00    	sub    esp,0x134
c00151a6:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00151ad:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00151b4:	56                   	push   esi
c00151b5:	68 77 23 02 c0       	push   0xc0022377
c00151ba:	e8 4b 57 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00151bf:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00151c6:	e8 08 29 ff ff       	call   c0007ad3 <malloc>
c00151cb:	83 c4 0c             	add    esp,0xc
c00151ce:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c00151d4:	56                   	push   esi
c00151d5:	50                   	push   eax
c00151d6:	89 c3                	mov    ebx,eax
c00151d8:	e8 67 66 ff ff       	call   c000b844 <File::File(char const*, Process*)>
c00151dd:	83 c4 10             	add    esp,0x10
c00151e0:	85 db                	test   ebx,ebx
c00151e2:	75 3c                	jne    c0015220 <Thr::loadDLL(char const*, bool)+0x84>
c00151e4:	89 e8                	mov    eax,ebp
c00151e6:	84 c0                	test   al,al
c00151e8:	0f 84 e1 01 00 00    	je     c00153cf <Thr::loadDLL(char const*, bool)+0x233>
c00151ee:	50                   	push   eax
c00151ef:	50                   	push   eax
c00151f0:	68 88 23 02 c0       	push   0xc0022388
c00151f5:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c00151f9:	57                   	push   edi
c00151fa:	e8 51 b4 fe ff       	call   c0000650 <strcpy>
c00151ff:	58                   	pop    eax
c0015200:	5a                   	pop    edx
c0015201:	56                   	push   esi
c0015202:	57                   	push   edi
c0015203:	e8 68 b6 fe ff       	call   c0000870 <strcat>
c0015208:	59                   	pop    ecx
c0015209:	58                   	pop    eax
c001520a:	68 9b 23 02 c0       	push   0xc002239b
c001520f:	57                   	push   edi
c0015210:	e8 5b b6 fe ff       	call   c0000870 <strcat>
c0015215:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015218:	e8 ec c0 ff ff       	call   c0011309 <KePanic(char const*)>
c001521d:	83 c4 10             	add    esp,0x10
c0015220:	50                   	push   eax
c0015221:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0015225:	50                   	push   eax
c0015226:	8d 44 24 20          	lea    eax,[esp+0x20]
c001522a:	50                   	push   eax
c001522b:	53                   	push   ebx
c001522c:	e8 dd 69 ff ff       	call   c000bc0e <File::stat(unsigned long long*, bool*)>
c0015231:	83 c4 10             	add    esp,0x10
c0015234:	85 db                	test   ebx,ebx
c0015236:	74 0c                	je     c0015244 <Thr::loadDLL(char const*, bool)+0xa8>
c0015238:	8b 03                	mov    eax,DWORD PTR [ebx]
c001523a:	83 ec 0c             	sub    esp,0xc
c001523d:	53                   	push   ebx
c001523e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015241:	83 c4 10             	add    esp,0x10
c0015244:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0015249:	75 0a                	jne    c0015255 <Thr::loadDLL(char const*, bool)+0xb9>
c001524b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001524f:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0015253:	75 3e                	jne    c0015293 <Thr::loadDLL(char const*, bool)+0xf7>
c0015255:	89 e8                	mov    eax,ebp
c0015257:	31 db                	xor    ebx,ebx
c0015259:	84 c0                	test   al,al
c001525b:	0f 84 6e 01 00 00    	je     c00153cf <Thr::loadDLL(char const*, bool)+0x233>
c0015261:	50                   	push   eax
c0015262:	50                   	push   eax
c0015263:	68 88 23 02 c0       	push   0xc0022388
c0015268:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001526c:	53                   	push   ebx
c001526d:	e8 de b3 fe ff       	call   c0000650 <strcpy>
c0015272:	58                   	pop    eax
c0015273:	5a                   	pop    edx
c0015274:	56                   	push   esi
c0015275:	53                   	push   ebx
c0015276:	e8 f5 b5 fe ff       	call   c0000870 <strcat>
c001527b:	59                   	pop    ecx
c001527c:	5f                   	pop    edi
c001527d:	68 9b 23 02 c0       	push   0xc002239b
c0015282:	53                   	push   ebx
c0015283:	e8 e8 b5 fe ff       	call   c0000870 <strcat>
c0015288:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001528b:	e8 79 c0 ff ff       	call   c0011309 <KePanic(char const*)>
c0015290:	83 c4 10             	add    esp,0x10
c0015293:	53                   	push   ebx
c0015294:	6a 03                	push   0x3
c0015296:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001529a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001529e:	05 ff 0f 00 00       	add    eax,0xfff
c00152a3:	83 d2 00             	adc    edx,0x0
c00152a6:	0f ac d0 0c          	shrd   eax,edx,0xc
c00152aa:	50                   	push   eax
c00152ab:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c00152b1:	e8 50 4b ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c00152b6:	89 c3                	mov    ebx,eax
c00152b8:	58                   	pop    eax
c00152b9:	5a                   	pop    edx
c00152ba:	53                   	push   ebx
c00152bb:	68 52 09 02 c0       	push   0xc0020952
c00152c0:	e8 45 56 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00152c5:	89 34 24             	mov    DWORD PTR [esp],esi
c00152c8:	e8 b3 b2 fe ff       	call   c0000580 <strlen>
c00152cd:	8b 3d 00 8f 02 c0    	mov    edi,DWORD PTR ds:0xc0028f00
c00152d3:	40                   	inc    eax
c00152d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00152d7:	e8 f7 27 ff ff       	call   c0007ad3 <malloc>
c00152dc:	59                   	pop    ecx
c00152dd:	89 04 bd 20 93 02 c0 	mov    DWORD PTR [edi*4-0x3ffd6ce0],eax
c00152e4:	a1 00 8f 02 c0       	mov    eax,ds:0xc0028f00
c00152e9:	5f                   	pop    edi
c00152ea:	56                   	push   esi
c00152eb:	ff 34 85 20 93 02 c0 	push   DWORD PTR [eax*4-0x3ffd6ce0]
c00152f2:	e8 59 b3 fe ff       	call   c0000650 <strcpy>
c00152f7:	a1 00 8f 02 c0       	mov    eax,ds:0xc0028f00
c00152fc:	89 1c 85 20 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ee0],ebx
c0015303:	8d 50 01             	lea    edx,[eax+0x1]
c0015306:	89 15 00 8f 02 c0    	mov    DWORD PTR ds:0xc0028f00,edx
c001530c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015310:	83 c4 0c             	add    esp,0xc
c0015313:	6a 01                	push   0x1
c0015315:	53                   	push   ebx
c0015316:	56                   	push   esi
c0015317:	89 14 85 20 8f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd70e0],edx
c001531e:	e8 b5 f6 ff ff       	call   c00149d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0015323:	83 c4 10             	add    esp,0x10
c0015326:	89 c7                	mov    edi,eax
c0015328:	89 f8                	mov    eax,edi
c001532a:	83 f0 01             	xor    eax,0x1
c001532d:	84 c0                	test   al,al
c001532f:	74 18                	je     c0015349 <Thr::loadDLL(char const*, bool)+0x1ad>
c0015331:	89 e8                	mov    eax,ebp
c0015333:	84 c0                	test   al,al
c0015335:	74 12                	je     c0015349 <Thr::loadDLL(char const*, bool)+0x1ad>
c0015337:	83 ec 0c             	sub    esp,0xc
c001533a:	68 9d 23 02 c0       	push   0xc002239d
c001533f:	e8 c5 bf ff ff       	call   c0011309 <KePanic(char const*)>
c0015344:	83 c4 10             	add    esp,0x10
c0015347:	eb 06                	jmp    c001534f <Thr::loadDLL(char const*, bool)+0x1b3>
c0015349:	89 f8                	mov    eax,edi
c001534b:	84 c0                	test   al,al
c001534d:	75 10                	jne    c001535f <Thr::loadDLL(char const*, bool)+0x1c3>
c001534f:	83 ec 0c             	sub    esp,0xc
c0015352:	68 bc 23 02 c0       	push   0xc00223bc
c0015357:	e8 ad bf ff ff       	call   c0011309 <KePanic(char const*)>
c001535c:	83 c4 10             	add    esp,0x10
c001535f:	31 f6                	xor    esi,esi
c0015361:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015365:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015369:	05 ff 0f 00 00       	add    eax,0xfff
c001536e:	83 d2 00             	adc    edx,0x0
c0015371:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015375:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015379:	c1 ea 0c             	shr    edx,0xc
c001537c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015380:	ba 00 00 00 00       	mov    edx,0x0
c0015385:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0015389:	89 d0                	mov    eax,edx
c001538b:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001538f:	73 32                	jae    c00153c3 <Thr::loadDLL(char const*, bool)+0x227>
c0015391:	50                   	push   eax
c0015392:	50                   	push   eax
c0015393:	89 f0                	mov    eax,esi
c0015395:	c1 e0 0c             	shl    eax,0xc
c0015398:	01 d8                	add    eax,ebx
c001539a:	50                   	push   eax
c001539b:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c00153a1:	e8 44 45 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c00153a6:	83 c4 10             	add    esp,0x10
c00153a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00153ab:	a8 60                	test   al,0x60
c00153ad:	75 11                	jne    c00153c0 <Thr::loadDLL(char const*, bool)+0x224>
c00153af:	83 ec 0c             	sub    esp,0xc
c00153b2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00153b7:	50                   	push   eax
c00153b8:	e8 bc 29 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c00153bd:	83 c4 10             	add    esp,0x10
c00153c0:	46                   	inc    esi
c00153c1:	eb 9e                	jmp    c0015361 <Thr::loadDLL(char const*, bool)+0x1c5>
c00153c3:	89 f8                	mov    eax,edi
c00153c5:	84 c0                	test   al,al
c00153c7:	b8 00 00 00 00       	mov    eax,0x0
c00153cc:	0f 44 d8             	cmove  ebx,eax
c00153cf:	81 c4 2c 01 00 00    	add    esp,0x12c
c00153d5:	89 d8                	mov    eax,ebx
c00153d7:	5b                   	pop    ebx
c00153d8:	5e                   	pop    esi
c00153d9:	5f                   	pop    edi
c00153da:	5d                   	pop    ebp
c00153db:	c3                   	ret    

c00153dc <Thr::executeDLL(unsigned long, void*)>:
c00153dc:	56                   	push   esi
c00153dd:	53                   	push   ebx
c00153de:	52                   	push   edx
c00153df:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00153e3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00153e7:	85 db                	test   ebx,ebx
c00153e9:	75 10                	jne    c00153fb <Thr::executeDLL(unsigned long, void*)+0x1f>
c00153eb:	83 ec 0c             	sub    esp,0xc
c00153ee:	68 d8 23 02 c0       	push   0xc00223d8
c00153f3:	e8 11 bf ff ff       	call   c0011309 <KePanic(char const*)>
c00153f8:	83 c4 10             	add    esp,0x10
c00153fb:	50                   	push   eax
c00153fc:	50                   	push   eax
c00153fd:	53                   	push   ebx
c00153fe:	68 02 24 02 c0       	push   0xc0022402
c0015403:	e8 02 55 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015408:	89 d8                	mov    eax,ebx
c001540a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001540e:	83 c4 14             	add    esp,0x14
c0015411:	5b                   	pop    ebx
c0015412:	5e                   	pop    esi
c0015413:	ff e0                	jmp    eax
c0015415:	66 90                	xchg   ax,ax
c0015417:	90                   	nop

c0015418 <userModeEntryPoint(void*)>:
c0015418:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001541d:	83 e8 01             	sub    eax,0x1
c0015420:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015425:	75 01                	jne    c0015428 <userModeEntryPoint(void*)+0x10>
c0015427:	fb                   	sti    
c0015428:	fb                   	sti    
c0015429:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001542e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015431:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0015437:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001543b:	e9 ff ad fe ff       	jmp    c000023f <goToUsermode>

c0015440 <changeTSS>:
c0015440:	83 ec 14             	sub    esp,0x14
c0015443:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015448:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001544b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0015450:	c1 e2 15             	shl    edx,0x15
c0015453:	29 d0                	sub    eax,edx
c0015455:	50                   	push   eax
c0015456:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001545b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015461:	05 7c 11 00 00       	add    eax,0x117c
c0015466:	50                   	push   eax
c0015467:	e8 d0 3a ff ff       	call   c0008f3c <TSS::setESP(unsigned long)>
c001546c:	83 c4 1c             	add    esp,0x1c
c001546f:	c3                   	ret    

c0015470 <switchToThread(ThreadControlBlock*)>:
c0015470:	57                   	push   edi
c0015471:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0015477:	56                   	push   esi
c0015478:	53                   	push   ebx
c0015479:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001547d:	85 c9                	test   ecx,ecx
c001547f:	0f 85 8b 00 00 00    	jne    c0015510 <switchToThread(ThreadControlBlock*)+0xa0>
c0015485:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0015489:	81 fa ff 00 00 00    	cmp    edx,0xff
c001548f:	74 7b                	je     c001550c <switchToThread(ThreadControlBlock*)+0x9c>
c0015491:	b8 00 04 00 00       	mov    eax,0x400
c0015496:	29 d0                	sub    eax,edx
c0015498:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c001549b:	d1 f8                	sar    eax,1
c001549d:	01 d0                	add    eax,edx
c001549f:	90                   	nop
c00154a0:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00154a3:	e8 04 28 00 00       	call   c0017cac <HalQueryPerformanceCounter()>
c00154a8:	a3 08 97 02 c0       	mov    ds:0xc0029708,eax
c00154ad:	89 c6                	mov    esi,eax
c00154af:	89 d7                	mov    edi,edx
c00154b1:	2b 35 f8 96 02 c0    	sub    esi,DWORD PTR ds:0xc00296f8
c00154b7:	a3 f8 96 02 c0       	mov    ds:0xc00296f8,eax
c00154bc:	1b 3d fc 96 02 c0    	sbb    edi,DWORD PTR ds:0xc00296fc
c00154c2:	89 35 00 97 02 c0    	mov    DWORD PTR ds:0xc0029700,esi
c00154c8:	89 15 0c 97 02 c0    	mov    DWORD PTR ds:0xc002970c,edx
c00154ce:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00154d4:	89 15 fc 96 02 c0    	mov    DWORD PTR ds:0xc00296fc,edx
c00154da:	89 3d 04 97 02 c0    	mov    DWORD PTR ds:0xc0029704,edi
c00154e0:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00154e3:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00154e6:	01 c6                	add    esi,eax
c00154e8:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00154eb:	11 d7                	adc    edi,edx
c00154ed:	83 ec 0c             	sub    esp,0xc
c00154f0:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00154f3:	53                   	push   ebx
c00154f4:	e8 7e ad fe ff       	call   c0000277 <switchToThreadASM>
c00154f9:	0f 20 c0             	mov    eax,cr0
c00154fc:	83 c8 08             	or     eax,0x8
c00154ff:	0f 22 c0             	mov    cr0,eax
c0015502:	83 c4 10             	add    esp,0x10
c0015505:	5b                   	pop    ebx
c0015506:	5e                   	pop    esi
c0015507:	5f                   	pop    edi
c0015508:	c3                   	ret    
c0015509:	8d 76 00             	lea    esi,[esi+0x0]
c001550c:	31 c0                	xor    eax,eax
c001550e:	eb 90                	jmp    c00154a0 <switchToThread(ThreadControlBlock*)+0x30>
c0015510:	5b                   	pop    ebx
c0015511:	c7 05 c0 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x1
c001551b:	5e                   	pop    esi
c001551c:	5f                   	pop    edi
c001551d:	c3                   	ret    
c001551e:	66 90                	xchg   ax,ax

c0015520 <Process::addArgs(char**)>:
c0015520:	57                   	push   edi
c0015521:	56                   	push   esi
c0015522:	53                   	push   ebx
c0015523:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015527:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001552b:	85 f6                	test   esi,esi
c001552d:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c0015537:	74 4f                	je     c0015588 <Process::addArgs(char**)+0x68>
c0015539:	8b 06                	mov    eax,DWORD PTR [esi]
c001553b:	85 c0                	test   eax,eax
c001553d:	74 49                	je     c0015588 <Process::addArgs(char**)+0x68>
c001553f:	31 db                	xor    ebx,ebx
c0015541:	8d 76 00             	lea    esi,[esi+0x0]
c0015544:	83 ec 0c             	sub    esp,0xc
c0015547:	50                   	push   eax
c0015548:	e8 33 b0 fe ff       	call   c0000580 <strlen>
c001554d:	83 c0 01             	add    eax,0x1
c0015550:	89 04 24             	mov    DWORD PTR [esp],eax
c0015553:	e8 7b 25 ff ff       	call   c0007ad3 <malloc>
c0015558:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c001555f:	5a                   	pop    edx
c0015560:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c0015563:	83 c3 01             	add    ebx,0x1
c0015566:	59                   	pop    ecx
c0015567:	52                   	push   edx
c0015568:	50                   	push   eax
c0015569:	e8 e2 b0 fe ff       	call   c0000650 <strcpy>
c001556e:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c0015574:	83 c4 10             	add    esp,0x10
c0015577:	83 c1 01             	add    ecx,0x1
c001557a:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c0015580:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0015583:	85 c0                	test   eax,eax
c0015585:	75 bd                	jne    c0015544 <Process::addArgs(char**)+0x24>
c0015587:	90                   	nop
c0015588:	5b                   	pop    ebx
c0015589:	5e                   	pop    esi
c001558a:	5f                   	pop    edi
c001558b:	c3                   	ret    

c001558c <Process::Process(char const*, Process*, char**)>:
c001558c:	56                   	push   esi
c001558d:	53                   	push   ebx
c001558e:	83 ec 14             	sub    esp,0x14
c0015591:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015595:	05 0c 02 00 00       	add    eax,0x20c
c001559a:	bb 07 00 00 00       	mov    ebx,0x7
c001559f:	89 c6                	mov    esi,eax
c00155a1:	8d 76 00             	lea    esi,[esi+0x0]
c00155a4:	85 db                	test   ebx,ebx
c00155a6:	78 14                	js     c00155bc <Process::Process(char const*, Process*, char**)+0x30>
c00155a8:	83 ec 0c             	sub    esp,0xc
c00155ab:	56                   	push   esi
c00155ac:	e8 27 a6 00 00       	call   c001fbd8 <ThreadControlBlock::ThreadControlBlock()>
c00155b1:	83 c4 10             	add    esp,0x10
c00155b4:	83 c6 5f             	add    esi,0x5f
c00155b7:	83 eb 01             	sub    ebx,0x1
c00155ba:	eb e8                	jmp    c00155a4 <Process::Process(char const*, Process*, char**)+0x18>
c00155bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155c0:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00155c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155cb:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00155d2:	83 ec 0c             	sub    esp,0xc
c00155d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155d9:	e8 20 bb ff ff       	call   c00110fe <KeNewProcessEnv(Process*)>
c00155de:	83 c4 10             	add    esp,0x10
c00155e1:	89 c2                	mov    edx,eax
c00155e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155e7:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00155ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155f1:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00155fa:	a1 20 36 02 c0       	mov    eax,ds:0xc0023620
c00155ff:	8d 50 01             	lea    edx,[eax+0x1]
c0015602:	89 15 20 36 02 c0    	mov    DWORD PTR ds:0xc0023620,edx
c0015608:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001560c:	89 02                	mov    DWORD PTR [edx],eax
c001560e:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0015616:	83 ec 0c             	sub    esp,0xc
c0015619:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001561d:	e8 b1 24 ff ff       	call   c0007ad3 <malloc>
c0015622:	83 c4 10             	add    esp,0x10
c0015625:	89 c3                	mov    ebx,eax
c0015627:	83 ec 08             	sub    esp,0x8
c001562a:	6a 00                	push   0x0
c001562c:	53                   	push   ebx
c001562d:	e8 20 4a ff ff       	call   c000a052 <VAS::VAS(bool)>
c0015632:	83 c4 10             	add    esp,0x10
c0015635:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015639:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c001563f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015643:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001564d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015651:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015655:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001565b:	e8 c2 c0 ff ff       	call   c0011722 <KeInitSignals()>
c0015660:	89 c2                	mov    edx,eax
c0015662:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015666:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c001566c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015670:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015676:	85 c0                	test   eax,eax
c0015678:	74 42                	je     c00156bc <Process::Process(char const*, Process*, char**)+0x130>
c001567a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001567e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015684:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001568a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001568e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015694:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015698:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001569e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00156a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156a8:	05 0c 01 00 00       	add    eax,0x10c
c00156ad:	83 ec 08             	sub    esp,0x8
c00156b0:	52                   	push   edx
c00156b1:	50                   	push   eax
c00156b2:	e8 99 af fe ff       	call   c0000650 <strcpy>
c00156b7:	83 c4 10             	add    esp,0x10
c00156ba:	eb 64                	jmp    c0015720 <Process::Process(char const*, Process*, char**)+0x194>
c00156bc:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c00156c4:	83 ec 0c             	sub    esp,0xc
c00156c7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00156cb:	e8 03 24 ff ff       	call   c0007ad3 <malloc>
c00156d0:	83 c4 10             	add    esp,0x10
c00156d3:	89 c3                	mov    ebx,eax
c00156d5:	83 ec 08             	sub    esp,0x8
c00156d8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00156dc:	53                   	push   ebx
c00156dd:	e8 8a 35 ff ff       	call   c0008c6c <VgaText::VgaText(char const*)>
c00156e2:	83 c4 10             	add    esp,0x10
c00156e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156e9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00156ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156f3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00156f9:	83 ec 0c             	sub    esp,0xc
c00156fc:	50                   	push   eax
c00156fd:	e8 18 2e ff ff       	call   c000851a <addToTerminalCycle(VgaText*)>
c0015702:	83 c4 10             	add    esp,0x10
c0015705:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015709:	05 0c 01 00 00       	add    eax,0x10c
c001570e:	83 ec 08             	sub    esp,0x8
c0015711:	68 21 24 02 c0       	push   0xc0022421
c0015716:	50                   	push   eax
c0015717:	e8 34 af fe ff       	call   c0000650 <strcpy>
c001571c:	83 c4 10             	add    esp,0x10
c001571f:	90                   	nop
c0015720:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015724:	83 c0 0c             	add    eax,0xc
c0015727:	83 ec 08             	sub    esp,0x8
c001572a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001572e:	50                   	push   eax
c001572f:	e8 1c af fe ff       	call   c0000650 <strcpy>
c0015734:	83 c4 10             	add    esp,0x10
c0015737:	83 ec 08             	sub    esp,0x8
c001573a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001573e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015742:	e8 d9 fd ff ff       	call   c0015520 <Process::addArgs(char**)>
c0015747:	83 c4 10             	add    esp,0x10
c001574a:	83 ec 08             	sub    esp,0x8
c001574d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015751:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015755:	e8 3f ed ff ff       	call   c0014499 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001575a:	83 c4 10             	add    esp,0x10
c001575d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015761:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015765:	83 f0 01             	xor    eax,0x1
c0015768:	88 c2                	mov    dl,al
c001576a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001576e:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015774:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015779:	83 ec 04             	sub    esp,0x4
c001577c:	50                   	push   eax
c001577d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015781:	68 78 24 02 c0       	push   0xc0022478
c0015786:	e8 7f 51 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001578b:	83 c4 10             	add    esp,0x10
c001578e:	90                   	nop
c001578f:	83 c4 14             	add    esp,0x14
c0015792:	5b                   	pop    ebx
c0015793:	5e                   	pop    esi
c0015794:	c3                   	ret    
c0015795:	90                   	nop
c0015796:	66 90                	xchg   ax,ax

c0015798 <Process::Process(bool, char const*, Process*, char**)>:
c0015798:	56                   	push   esi
c0015799:	53                   	push   ebx
c001579a:	83 ec 24             	sub    esp,0x24
c001579d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00157a1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00157a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157a9:	05 0c 02 00 00       	add    eax,0x20c
c00157ae:	bb 07 00 00 00       	mov    ebx,0x7
c00157b3:	89 c6                	mov    esi,eax
c00157b5:	8d 76 00             	lea    esi,[esi+0x0]
c00157b8:	85 db                	test   ebx,ebx
c00157ba:	78 14                	js     c00157d0 <Process::Process(bool, char const*, Process*, char**)+0x38>
c00157bc:	83 ec 0c             	sub    esp,0xc
c00157bf:	56                   	push   esi
c00157c0:	e8 13 a4 00 00       	call   c001fbd8 <ThreadControlBlock::ThreadControlBlock()>
c00157c5:	83 c4 10             	add    esp,0x10
c00157c8:	83 c6 5f             	add    esi,0x5f
c00157cb:	83 eb 01             	sub    ebx,0x1
c00157ce:	eb e8                	jmp    c00157b8 <Process::Process(bool, char const*, Process*, char**)+0x20>
c00157d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157d4:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00157db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157df:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00157e6:	83 ec 0c             	sub    esp,0xc
c00157e9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00157ed:	e8 0c b9 ff ff       	call   c00110fe <KeNewProcessEnv(Process*)>
c00157f2:	83 c4 10             	add    esp,0x10
c00157f5:	89 c2                	mov    edx,eax
c00157f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157fb:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015801:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015805:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001580e:	a1 20 36 02 c0       	mov    eax,ds:0xc0023620
c0015813:	8d 50 01             	lea    edx,[eax+0x1]
c0015816:	89 15 20 36 02 c0    	mov    DWORD PTR ds:0xc0023620,edx
c001581c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015820:	89 02                	mov    DWORD PTR [edx],eax
c0015822:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001582a:	83 ec 0c             	sub    esp,0xc
c001582d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015831:	e8 9d 22 ff ff       	call   c0007ad3 <malloc>
c0015836:	83 c4 10             	add    esp,0x10
c0015839:	89 c3                	mov    ebx,eax
c001583b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015840:	83 ec 08             	sub    esp,0x8
c0015843:	50                   	push   eax
c0015844:	53                   	push   ebx
c0015845:	e8 08 48 ff ff       	call   c000a052 <VAS::VAS(bool)>
c001584a:	83 c4 10             	add    esp,0x10
c001584d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015851:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015857:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001585b:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015865:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015869:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001586d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015873:	e8 aa be ff ff       	call   c0011722 <KeInitSignals()>
c0015878:	89 c2                	mov    edx,eax
c001587a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001587e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015884:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015888:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001588e:	85 c0                	test   eax,eax
c0015890:	74 42                	je     c00158d4 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015892:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015896:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001589c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00158a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00158a6:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00158ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00158b0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00158b6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00158bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00158c0:	05 0c 01 00 00       	add    eax,0x10c
c00158c5:	83 ec 08             	sub    esp,0x8
c00158c8:	52                   	push   edx
c00158c9:	50                   	push   eax
c00158ca:	e8 81 ad fe ff       	call   c0000650 <strcpy>
c00158cf:	83 c4 10             	add    esp,0x10
c00158d2:	eb 64                	jmp    c0015938 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c00158d4:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c00158dc:	83 ec 0c             	sub    esp,0xc
c00158df:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00158e3:	e8 eb 21 ff ff       	call   c0007ad3 <malloc>
c00158e8:	83 c4 10             	add    esp,0x10
c00158eb:	89 c3                	mov    ebx,eax
c00158ed:	83 ec 08             	sub    esp,0x8
c00158f0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00158f4:	53                   	push   ebx
c00158f5:	e8 72 33 ff ff       	call   c0008c6c <VgaText::VgaText(char const*)>
c00158fa:	83 c4 10             	add    esp,0x10
c00158fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015901:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015907:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001590b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015911:	83 ec 0c             	sub    esp,0xc
c0015914:	50                   	push   eax
c0015915:	e8 00 2c ff ff       	call   c000851a <addToTerminalCycle(VgaText*)>
c001591a:	83 c4 10             	add    esp,0x10
c001591d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015921:	05 0c 01 00 00       	add    eax,0x10c
c0015926:	83 ec 08             	sub    esp,0x8
c0015929:	68 21 24 02 c0       	push   0xc0022421
c001592e:	50                   	push   eax
c001592f:	e8 1c ad fe ff       	call   c0000650 <strcpy>
c0015934:	83 c4 10             	add    esp,0x10
c0015937:	90                   	nop
c0015938:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001593c:	83 c0 0c             	add    eax,0xc
c001593f:	83 ec 08             	sub    esp,0x8
c0015942:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015946:	50                   	push   eax
c0015947:	e8 04 ad fe ff       	call   c0000650 <strcpy>
c001594c:	83 c4 10             	add    esp,0x10
c001594f:	83 ec 08             	sub    esp,0x8
c0015952:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015956:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001595a:	e8 c1 fb ff ff       	call   c0015520 <Process::addArgs(char**)>
c001595f:	83 c4 10             	add    esp,0x10
c0015962:	90                   	nop
c0015963:	83 c4 24             	add    esp,0x24
c0015966:	5b                   	pop    ebx
c0015967:	5e                   	pop    esi
c0015968:	c3                   	ret    
c0015969:	8d 76 00             	lea    esi,[esi+0x0]

c001596c <taskStartupFunction>:
c001596c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015971:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015974:	c3                   	ret    
c0015975:	90                   	nop
c0015976:	66 90                	xchg   ax,ax

c0015978 <Semaphore::Semaphore(int)>:
c0015978:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001597c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015980:	89 10                	mov    DWORD PTR [eax],edx
c0015982:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015986:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001598d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015991:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015998:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001599c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00159a3:	90                   	nop
c00159a4:	c3                   	ret    
c00159a5:	90                   	nop
c00159a6:	66 90                	xchg   ax,ax

c00159a8 <Mutex::Mutex()>:
c00159a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00159ac:	6a 01                	push   0x1
c00159ae:	50                   	push   eax
c00159af:	e8 c4 ff ff ff       	call   c0015978 <Semaphore::Semaphore(int)>
c00159b4:	83 c4 08             	add    esp,0x8
c00159b7:	90                   	nop
c00159b8:	c3                   	ret    
c00159b9:	90                   	nop
c00159ba:	66 90                	xchg   ax,ax

c00159bc <Process::createThread(void (*)(void*), void*, int)>:
c00159bc:	57                   	push   edi
c00159bd:	31 c9                	xor    ecx,ecx
c00159bf:	56                   	push   esi
c00159c0:	53                   	push   ebx
c00159c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00159c5:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00159cc:	89 f2                	mov    edx,esi
c00159ce:	66 90                	xchg   ax,ax
c00159d0:	0f b7 c2             	movzx  eax,dx
c00159d3:	80 e2 01             	and    dl,0x1
c00159d6:	74 14                	je     c00159ec <Process::createThread(void (*)(void*), void*, int)+0x30>
c00159d8:	d1 f8                	sar    eax,1
c00159da:	83 c1 01             	add    ecx,0x1
c00159dd:	83 f9 10             	cmp    ecx,0x10
c00159e0:	89 c2                	mov    edx,eax
c00159e2:	75 ec                	jne    c00159d0 <Process::createThread(void (*)(void*), void*, int)+0x14>
c00159e4:	31 db                	xor    ebx,ebx
c00159e6:	89 d8                	mov    eax,ebx
c00159e8:	5b                   	pop    ebx
c00159e9:	5e                   	pop    esi
c00159ea:	5f                   	pop    edi
c00159eb:	c3                   	ret    
c00159ec:	b8 01 00 00 00       	mov    eax,0x1
c00159f1:	d3 e0                	shl    eax,cl
c00159f3:	09 c6                	or     esi,eax
c00159f5:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00159fc:	8d 04 49             	lea    eax,[ecx+ecx*2]
c00159ff:	c1 e0 05             	shl    eax,0x5
c0015a02:	29 c8                	sub    eax,ecx
c0015a04:	01 d8                	add    eax,ebx
c0015a06:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015a0d:	75 0d                	jne    c0015a1c <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015a0f:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015a19:	8d 76 00             	lea    esi,[esi+0x0]
c0015a1c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015a22:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0015a25:	83 ec 0c             	sub    esp,0xc
c0015a28:	c1 e6 05             	shl    esi,0x5
c0015a2b:	29 ce                	sub    esi,ecx
c0015a2d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015a30:	8d 04 33             	lea    eax,[ebx+esi*1]
c0015a33:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015a39:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0015a3f:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015a45:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0015a4c:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015a52:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015a56:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015a5c:	89 ca                	mov    edx,ecx
c0015a5e:	f7 da                	neg    edx
c0015a60:	c1 e2 15             	shl    edx,0x15
c0015a63:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015a69:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015a6f:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0015a73:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015a7d:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015a83:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015a87:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015a8d:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015a97:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015aa1:	68 00 01 00 00       	push   0x100
c0015aa6:	e8 28 20 ff ff       	call   c0007ad3 <malloc>
c0015aab:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0015aae:	58                   	pop    eax
c0015aaf:	5a                   	pop    edx
c0015ab0:	53                   	push   ebx
c0015ab1:	68 e4 96 02 c0       	push   0xc00296e4
c0015ab6:	e8 b5 9e 00 00       	call   c001f970 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015abb:	83 c4 10             	add    esp,0x10
c0015abe:	89 d8                	mov    eax,ebx
c0015ac0:	5b                   	pop    ebx
c0015ac1:	5e                   	pop    esi
c0015ac2:	5f                   	pop    edi
c0015ac3:	c3                   	ret    

c0015ac4 <Process::createUserThread()>:
c0015ac4:	83 ec 0c             	sub    esp,0xc
c0015ac7:	68 80 00 00 00       	push   0x80
c0015acc:	6a 00                	push   0x0
c0015ace:	68 18 54 01 c0       	push   0xc0015418
c0015ad3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015ad7:	50                   	push   eax
c0015ad8:	e8 df fe ff ff       	call   c00159bc <Process::createThread(void (*)(void*), void*, int)>
c0015add:	83 c4 1c             	add    esp,0x1c
c0015ae0:	c3                   	ret    
c0015ae1:	8d 76 00             	lea    esi,[esi+0x0]

c0015ae4 <setupMultitasking(void (*)())>:
c0015ae4:	56                   	push   esi
c0015ae5:	53                   	push   ebx
c0015ae6:	83 ec 04             	sub    esp,0x4
c0015ae9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015aed:	eb 11                	jmp    c0015b00 <setupMultitasking(void (*)())+0x1c>
c0015aef:	90                   	nop
c0015af0:	83 ec 0c             	sub    esp,0xc
c0015af3:	68 e4 96 02 c0       	push   0xc00296e4
c0015af8:	e8 b7 9d 00 00       	call   c001f8b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015afd:	83 c4 10             	add    esp,0x10
c0015b00:	83 ec 0c             	sub    esp,0xc
c0015b03:	68 e4 96 02 c0       	push   0xc00296e4
c0015b08:	e8 83 9d 00 00       	call   c001f890 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015b0d:	83 c4 10             	add    esp,0x10
c0015b10:	84 c0                	test   al,al
c0015b12:	74 dc                	je     c0015af0 <setupMultitasking(void (*)())+0xc>
c0015b14:	83 ec 0c             	sub    esp,0xc
c0015b17:	68 24 07 00 00       	push   0x724
c0015b1c:	e8 b2 1f ff ff       	call   c0007ad3 <malloc>
c0015b21:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015b28:	6a 00                	push   0x0
c0015b2a:	68 25 24 02 c0       	push   0xc0022425
c0015b2f:	6a 01                	push   0x1
c0015b31:	50                   	push   eax
c0015b32:	89 c3                	mov    ebx,eax
c0015b34:	e8 5f fc ff ff       	call   c0015798 <Process::Process(bool, char const*, Process*, char**)>
c0015b39:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0015b3f:	83 c4 14             	add    esp,0x14
c0015b42:	89 1d f0 96 02 c0    	mov    DWORD PTR ds:0xc00296f0,ebx
c0015b48:	50                   	push   eax
c0015b49:	e8 21 2c ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0015b4e:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0015b55:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015b5f:	83 c8 01             	or     eax,0x1
c0015b62:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015b69:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015b6f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015b72:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015b7c:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0015b82:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015b8c:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0015b92:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015b9c:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0015ba6:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015bac:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015bb2:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015bbc:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0015bc6:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015bcd:	e8 01 1f ff ff       	call   c0007ad3 <malloc>
c0015bd2:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0015bd8:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015bde:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015be4:	5a                   	pop    edx
c0015be5:	59                   	pop    ecx
c0015be6:	68 21 24 02 c0       	push   0xc0022421
c0015beb:	50                   	push   eax
c0015bec:	e8 5f aa fe ff       	call   c0000650 <strcpy>
c0015bf1:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015bf8:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015bfc:	83 c4 14             	add    esp,0x14
c0015bff:	5b                   	pop    ebx
c0015c00:	5e                   	pop    esi
c0015c01:	e9 63 a6 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0015c06:	66 90                	xchg   ax,ax

c0015c08 <schedule()>:
c0015c08:	8b 15 c4 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c4
c0015c0e:	85 d2                	test   edx,edx
c0015c10:	74 0e                	je     c0015c20 <schedule()+0x18>
c0015c12:	c7 05 c0 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x1
c0015c1c:	c3                   	ret    
c0015c1d:	8d 76 00             	lea    esi,[esi+0x0]
c0015c20:	53                   	push   ebx
c0015c21:	83 ec 14             	sub    esp,0x14
c0015c24:	68 e4 96 02 c0       	push   0xc00296e4
c0015c29:	e8 62 9c 00 00       	call   c001f890 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015c2e:	83 c4 10             	add    esp,0x10
c0015c31:	84 c0                	test   al,al
c0015c33:	75 3f                	jne    c0015c74 <schedule()+0x6c>
c0015c35:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c3a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015c3d:	83 fa 01             	cmp    edx,0x1
c0015c40:	74 3a                	je     c0015c7c <schedule()+0x74>
c0015c42:	66 90                	xchg   ax,ax
c0015c44:	83 ec 0c             	sub    esp,0xc
c0015c47:	68 e4 96 02 c0       	push   0xc00296e4
c0015c4c:	e8 5b 9c 00 00       	call   c001f8ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015c51:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0015c58:	89 c3                	mov    ebx,eax
c0015c5a:	e8 55 9c 00 00       	call   c001f8b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015c5f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0015c66:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015c69:	e8 02 f8 ff ff       	call   c0015470 <switchToThread(ThreadControlBlock*)>
c0015c6e:	83 c4 10             	add    esp,0x10
c0015c71:	8d 76 00             	lea    esi,[esi+0x0]
c0015c74:	83 c4 08             	add    esp,0x8
c0015c77:	5b                   	pop    ebx
c0015c78:	c3                   	ret    
c0015c79:	8d 76 00             	lea    esi,[esi+0x0]
c0015c7c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015c83:	83 ec 08             	sub    esp,0x8
c0015c86:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c8b:	50                   	push   eax
c0015c8c:	68 e4 96 02 c0       	push   0xc00296e4
c0015c91:	e8 da 9c 00 00       	call   c001f970 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015c96:	83 c4 10             	add    esp,0x10
c0015c99:	eb a9                	jmp    c0015c44 <schedule()+0x3c>
c0015c9b:	90                   	nop

c0015c9c <Semaphore::tryAcquire()>:
c0015c9c:	53                   	push   ebx
c0015c9d:	83 ec 08             	sub    esp,0x8
c0015ca0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015ca4:	fa                   	cli    
c0015ca5:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c0015cab:	8d 42 01             	lea    eax,[edx+0x1]
c0015cae:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015cb3:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015cb8:	8d 58 01             	lea    ebx,[eax+0x1]
c0015cbb:	89 1d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ebx
c0015cc1:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0015cc4:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0015cc6:	7c 2c                	jl     c0015cf4 <Semaphore::tryAcquire()+0x58>
c0015cc8:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015ccd:	85 c0                	test   eax,eax
c0015ccf:	75 0b                	jne    c0015cdc <Semaphore::tryAcquire()+0x40>
c0015cd1:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015cd6:	85 c0                	test   eax,eax
c0015cd8:	75 5a                	jne    c0015d34 <Semaphore::tryAcquire()+0x98>
c0015cda:	66 90                	xchg   ax,ax
c0015cdc:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015ce2:	31 c0                	xor    eax,eax
c0015ce4:	85 d2                	test   edx,edx
c0015ce6:	75 04                	jne    c0015cec <Semaphore::tryAcquire()+0x50>
c0015ce8:	fb                   	sti    
c0015ce9:	8d 76 00             	lea    esi,[esi+0x0]
c0015cec:	83 c4 08             	add    esp,0x8
c0015cef:	5b                   	pop    ebx
c0015cf0:	c3                   	ret    
c0015cf1:	8d 76 00             	lea    esi,[esi+0x0]
c0015cf4:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015cf9:	83 c3 01             	add    ebx,0x1
c0015cfc:	85 c0                	test   eax,eax
c0015cfe:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0015d01:	75 21                	jne    c0015d24 <Semaphore::tryAcquire()+0x88>
c0015d03:	8b 0d c0 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c0
c0015d09:	85 c9                	test   ecx,ecx
c0015d0b:	74 17                	je     c0015d24 <Semaphore::tryAcquire()+0x88>
c0015d0d:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015d17:	e8 ec fe ff ff       	call   c0015c08 <schedule()>
c0015d1c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015d21:	8d 50 ff             	lea    edx,[eax-0x1]
c0015d24:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015d2a:	85 d2                	test   edx,edx
c0015d2c:	b0 01                	mov    al,0x1
c0015d2e:	75 bc                	jne    c0015cec <Semaphore::tryAcquire()+0x50>
c0015d30:	eb b6                	jmp    c0015ce8 <Semaphore::tryAcquire()+0x4c>
c0015d32:	66 90                	xchg   ax,ax
c0015d34:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015d3e:	e8 c5 fe ff ff       	call   c0015c08 <schedule()>
c0015d43:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015d48:	8d 50 ff             	lea    edx,[eax-0x1]
c0015d4b:	31 c0                	xor    eax,eax
c0015d4d:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015d53:	85 d2                	test   edx,edx
c0015d55:	75 95                	jne    c0015cec <Semaphore::tryAcquire()+0x50>
c0015d57:	eb 8f                	jmp    c0015ce8 <Semaphore::tryAcquire()+0x4c>
c0015d59:	90                   	nop
c0015d5a:	66 90                	xchg   ax,ax

c0015d5c <Semaphore::assertLocked(char const*)>:
c0015d5c:	83 ec 0c             	sub    esp,0xc
c0015d5f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015d63:	fa                   	cli    
c0015d64:	8b 0d c8 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c8
c0015d6a:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015d6f:	83 c1 01             	add    ecx,0x1
c0015d72:	89 0d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ecx
c0015d78:	8d 48 01             	lea    ecx,[eax+0x1]
c0015d7b:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015d81:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0015d83:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0015d86:	7c 28                	jl     c0015db0 <Semaphore::assertLocked(char const*)+0x54>
c0015d88:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015d8d:	85 c0                	test   eax,eax
c0015d8f:	75 0b                	jne    c0015d9c <Semaphore::assertLocked(char const*)+0x40>
c0015d91:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015d96:	85 c0                	test   eax,eax
c0015d98:	75 32                	jne    c0015dcc <Semaphore::assertLocked(char const*)+0x70>
c0015d9a:	66 90                	xchg   ax,ax
c0015d9c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015da1:	83 e8 01             	sub    eax,0x1
c0015da4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015da9:	75 01                	jne    c0015dac <Semaphore::assertLocked(char const*)+0x50>
c0015dab:	fb                   	sti    
c0015dac:	83 c4 0c             	add    esp,0xc
c0015daf:	c3                   	ret    
c0015db0:	83 ec 0c             	sub    esp,0xc
c0015db3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015db7:	52                   	push   edx
c0015db8:	e8 4c b5 ff ff       	call   c0011309 <KePanic(char const*)>
c0015dbd:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015dc2:	83 c4 10             	add    esp,0x10
c0015dc5:	83 e8 01             	sub    eax,0x1
c0015dc8:	eb be                	jmp    c0015d88 <Semaphore::assertLocked(char const*)+0x2c>
c0015dca:	66 90                	xchg   ax,ax
c0015dcc:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015dd6:	e8 2d fe ff ff       	call   c0015c08 <schedule()>
c0015ddb:	eb bf                	jmp    c0015d9c <Semaphore::assertLocked(char const*)+0x40>
c0015ddd:	8d 76 00             	lea    esi,[esi+0x0]

c0015de0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015de0:	83 ec 0c             	sub    esp,0xc
c0015de3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015de8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015dec:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015def:	e8 14 fe ff ff       	call   c0015c08 <schedule()>
c0015df4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015df9:	83 e8 01             	sub    eax,0x1
c0015dfc:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015e01:	75 01                	jne    c0015e04 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0015e03:	fb                   	sti    
c0015e04:	83 c4 0c             	add    esp,0xc
c0015e07:	c3                   	ret    

c0015e08 <blockTask(TaskState)>:
c0015e08:	83 ec 0c             	sub    esp,0xc
c0015e0b:	fa                   	cli    
c0015e0c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015e11:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015e15:	83 c0 01             	add    eax,0x1
c0015e18:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015e1d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e22:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015e25:	e8 de fd ff ff       	call   c0015c08 <schedule()>
c0015e2a:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015e2f:	83 e8 01             	sub    eax,0x1
c0015e32:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015e37:	75 03                	jne    c0015e3c <blockTask(TaskState)+0x34>
c0015e39:	fb                   	sti    
c0015e3a:	66 90                	xchg   ax,ax
c0015e3c:	83 c4 0c             	add    esp,0xc
c0015e3f:	c3                   	ret    

c0015e40 <waitTask(int, int*, int)>:
c0015e40:	83 ec 18             	sub    esp,0x18
c0015e43:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e48:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015e4c:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0015e4f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015e53:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e58:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015e5b:	6a 07                	push   0x7
c0015e5d:	e8 a6 ff ff ff       	call   c0015e08 <blockTask(TaskState)>
c0015e62:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e67:	83 c4 10             	add    esp,0x10
c0015e6a:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0015e6d:	85 d2                	test   edx,edx
c0015e6f:	74 0b                	je     c0015e7c <waitTask(int, int*, int)+0x3c>
c0015e71:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0015e74:	89 02                	mov    DWORD PTR [edx],eax
c0015e76:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e7b:	90                   	nop
c0015e7c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0015e7f:	83 c4 0c             	add    esp,0xc
c0015e82:	c3                   	ret    
c0015e83:	90                   	nop

c0015e84 <milliTenthSleepUntil(unsigned int)>:
c0015e84:	83 ec 0c             	sub    esp,0xc
c0015e87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e8b:	39 05 ec 88 02 c0    	cmp    DWORD PTR ds:0xc00288ec,eax
c0015e91:	76 05                	jbe    c0015e98 <milliTenthSleepUntil(unsigned int)+0x14>
c0015e93:	90                   	nop
c0015e94:	83 c4 0c             	add    esp,0xc
c0015e97:	c3                   	ret    
c0015e98:	fa                   	cli    
c0015e99:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c0015e9f:	83 ec 08             	sub    esp,0x8
c0015ea2:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0015ea8:	83 c2 01             	add    edx,0x1
c0015eab:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015eb1:	83 c1 01             	add    ecx,0x1
c0015eb4:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015eba:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015ec0:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0015ec3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ec8:	50                   	push   eax
c0015ec9:	68 d8 96 02 c0       	push   0xc00296d8
c0015ece:	e8 9d 9a 00 00       	call   c001f970 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015ed3:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0015eda:	e8 29 ff ff ff       	call   c0015e08 <blockTask(TaskState)>
c0015edf:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015ee4:	83 c4 10             	add    esp,0x10
c0015ee7:	83 e8 01             	sub    eax,0x1
c0015eea:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015eef:	85 c0                	test   eax,eax
c0015ef1:	75 09                	jne    c0015efc <milliTenthSleepUntil(unsigned int)+0x78>
c0015ef3:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015ef8:	85 c0                	test   eax,eax
c0015efa:	75 14                	jne    c0015f10 <milliTenthSleepUntil(unsigned int)+0x8c>
c0015efc:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015f01:	83 e8 01             	sub    eax,0x1
c0015f04:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015f09:	75 89                	jne    c0015e94 <milliTenthSleepUntil(unsigned int)+0x10>
c0015f0b:	fb                   	sti    
c0015f0c:	83 c4 0c             	add    esp,0xc
c0015f0f:	c3                   	ret    
c0015f10:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015f1a:	e8 e9 fc ff ff       	call   c0015c08 <schedule()>
c0015f1f:	eb db                	jmp    c0015efc <milliTenthSleepUntil(unsigned int)+0x78>
c0015f21:	8d 76 00             	lea    esi,[esi+0x0]

c0015f24 <milliTenthSleep(unsigned int)>:
c0015f24:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015f28:	a1 ec 88 02 c0       	mov    eax,ds:0xc00288ec
c0015f2d:	01 c2                	add    edx,eax
c0015f2f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015f33:	e9 4c ff ff ff       	jmp    c0015e84 <milliTenthSleepUntil(unsigned int)>

c0015f38 <sleep(unsigned int)>:
c0015f38:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c0015f40:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015f44:	eb de                	jmp    c0015f24 <milliTenthSleep(unsigned int)>
c0015f46:	66 90                	xchg   ax,ax

c0015f48 <Semaphore::acquire()>:
c0015f48:	83 ec 0c             	sub    esp,0xc
c0015f4b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015f4f:	fa                   	cli    
c0015f50:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015f55:	83 c0 01             	add    eax,0x1
c0015f58:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015f5d:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015f62:	8d 48 01             	lea    ecx,[eax+0x1]
c0015f65:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015f6b:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015f6e:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0015f70:	7d 2e                	jge    c0015fa0 <Semaphore::acquire()+0x58>
c0015f72:	83 c1 01             	add    ecx,0x1
c0015f75:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015f78:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015f7d:	85 c0                	test   eax,eax
c0015f7f:	75 0b                	jne    c0015f8c <Semaphore::acquire()+0x44>
c0015f81:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015f86:	85 c0                	test   eax,eax
c0015f88:	75 66                	jne    c0015ff0 <Semaphore::acquire()+0xa8>
c0015f8a:	66 90                	xchg   ax,ax
c0015f8c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015f91:	83 e8 01             	sub    eax,0x1
c0015f94:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015f99:	75 01                	jne    c0015f9c <Semaphore::acquire()+0x54>
c0015f9b:	fb                   	sti    
c0015f9c:	83 c4 0c             	add    esp,0xc
c0015f9f:	c3                   	ret    
c0015fa0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fa5:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0015fac:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015faf:	85 c9                	test   ecx,ecx
c0015fb1:	74 51                	je     c0016004 <Semaphore::acquire()+0xbc>
c0015fb3:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0015fb6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015fbc:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0015fbf:	90                   	nop
c0015fc0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fc5:	83 ec 0c             	sub    esp,0xc
c0015fc8:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0015fcb:	68 a4 24 02 c0       	push   0xc00224a4
c0015fd0:	e8 35 49 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015fd5:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0015fdc:	e8 27 fe ff ff       	call   c0015e08 <blockTask(TaskState)>
c0015fe1:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015fe6:	83 c4 10             	add    esp,0x10
c0015fe9:	83 e8 01             	sub    eax,0x1
c0015fec:	eb 8a                	jmp    c0015f78 <Semaphore::acquire()+0x30>
c0015fee:	66 90                	xchg   ax,ax
c0015ff0:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015ffa:	e8 09 fc ff ff       	call   c0015c08 <schedule()>
c0015fff:	eb 8b                	jmp    c0015f8c <Semaphore::acquire()+0x44>
c0016001:	8d 76 00             	lea    esi,[esi+0x0]
c0016004:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016009:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001600c:	eb b2                	jmp    c0015fc0 <Semaphore::acquire()+0x78>
c001600e:	66 90                	xchg   ax,ax

c0016010 <taskReturned>:
c0016010:	83 ec 18             	sub    esp,0x18
c0016013:	68 c4 24 02 c0       	push   0xc00224c4
c0016018:	e8 ec b2 ff ff       	call   c0011309 <KePanic(char const*)>
c001601d:	83 c4 10             	add    esp,0x10
c0016020:	83 ec 0c             	sub    esp,0xc
c0016023:	6a 02                	push   0x2
c0016025:	e8 de fd ff ff       	call   c0015e08 <blockTask(TaskState)>
c001602a:	fa                   	cli    
c001602b:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016030:	83 c0 01             	add    eax,0x1
c0016033:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016038:	e8 cb fb ff ff       	call   c0015c08 <schedule()>
c001603d:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016042:	83 c4 10             	add    esp,0x10
c0016045:	83 e8 01             	sub    eax,0x1
c0016048:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001604d:	85 c0                	test   eax,eax
c001604f:	75 cf                	jne    c0016020 <taskReturned+0x10>
c0016051:	fb                   	sti    
c0016052:	eb cc                	jmp    c0016020 <taskReturned+0x10>

c0016054 <Thr::processFromPID(int)>:
c0016054:	57                   	push   edi
c0016055:	56                   	push   esi
c0016056:	53                   	push   ebx
c0016057:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001605b:	fa                   	cli    
c001605c:	8b 0d c8 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c8
c0016062:	83 ec 0c             	sub    esp,0xc
c0016065:	68 e4 96 02 c0       	push   0xc00296e4
c001606a:	83 c1 01             	add    ecx,0x1
c001606d:	89 0d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ecx
c0016073:	e8 34 98 00 00       	call   c001f8ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016078:	83 c4 10             	add    esp,0x10
c001607b:	89 c7                	mov    edi,eax
c001607d:	eb 15                	jmp    c0016094 <Thr::processFromPID(int)+0x40>
c001607f:	90                   	nop
c0016080:	83 ec 0c             	sub    esp,0xc
c0016083:	68 e4 96 02 c0       	push   0xc00296e4
c0016088:	e8 1f 98 00 00       	call   c001f8ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001608d:	83 c4 10             	add    esp,0x10
c0016090:	39 f8                	cmp    eax,edi
c0016092:	74 50                	je     c00160e4 <Thr::processFromPID(int)+0x90>
c0016094:	83 ec 0c             	sub    esp,0xc
c0016097:	68 e4 96 02 c0       	push   0xc00296e4
c001609c:	e8 0b 98 00 00       	call   c001f8ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00160a1:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c00160a8:	89 c3                	mov    ebx,eax
c00160aa:	e8 05 98 00 00       	call   c001f8b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00160af:	58                   	pop    eax
c00160b0:	5a                   	pop    edx
c00160b1:	53                   	push   ebx
c00160b2:	68 e4 96 02 c0       	push   0xc00296e4
c00160b7:	e8 b4 98 00 00       	call   c001f970 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00160bc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00160bf:	83 c4 10             	add    esp,0x10
c00160c2:	39 30                	cmp    DWORD PTR [eax],esi
c00160c4:	75 ba                	jne    c0016080 <Thr::processFromPID(int)+0x2c>
c00160c6:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00160cb:	83 e8 01             	sub    eax,0x1
c00160ce:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00160d3:	74 0b                	je     c00160e0 <Thr::processFromPID(int)+0x8c>
c00160d5:	8d 76 00             	lea    esi,[esi+0x0]
c00160d8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00160db:	90                   	nop
c00160dc:	5b                   	pop    ebx
c00160dd:	5e                   	pop    esi
c00160de:	5f                   	pop    edi
c00160df:	c3                   	ret    
c00160e0:	fb                   	sti    
c00160e1:	eb f5                	jmp    c00160d8 <Thr::processFromPID(int)+0x84>
c00160e3:	90                   	nop
c00160e4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00160e9:	8d 50 ff             	lea    edx,[eax-0x1]
c00160ec:	31 c0                	xor    eax,eax
c00160ee:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c00160f4:	85 d2                	test   edx,edx
c00160f6:	75 e4                	jne    c00160dc <Thr::processFromPID(int)+0x88>
c00160f8:	fb                   	sti    
c00160f9:	5b                   	pop    ebx
c00160fa:	5e                   	pop    esi
c00160fb:	5f                   	pop    edi
c00160fc:	c3                   	ret    
c00160fd:	8d 76 00             	lea    esi,[esi+0x0]

c0016100 <unblockTask(ThreadControlBlock*)>:
c0016100:	53                   	push   ebx
c0016101:	83 ec 08             	sub    esp,0x8
c0016104:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016108:	fa                   	cli    
c0016109:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001610e:	83 c0 01             	add    eax,0x1
c0016111:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016116:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016119:	85 c0                	test   eax,eax
c001611b:	74 67                	je     c0016184 <unblockTask(ThreadControlBlock*)+0x84>
c001611d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016120:	83 f8 01             	cmp    eax,0x1
c0016123:	74 37                	je     c001615c <unblockTask(ThreadControlBlock*)+0x5c>
c0016125:	83 ec 0c             	sub    esp,0xc
c0016128:	68 e4 96 02 c0       	push   0xc00296e4
c001612d:	e8 7a 97 00 00       	call   c001f8ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016132:	83 c4 10             	add    esp,0x10
c0016135:	85 c0                	test   eax,eax
c0016137:	75 1b                	jne    c0016154 <unblockTask(ThreadControlBlock*)+0x54>
c0016139:	eb 5d                	jmp    c0016198 <unblockTask(ThreadControlBlock*)+0x98>
c001613b:	90                   	nop
c001613c:	83 ec 08             	sub    esp,0x8
c001613f:	50                   	push   eax
c0016140:	68 e4 96 02 c0       	push   0xc00296e4
c0016145:	e8 82 9a 00 00       	call   c001fbcc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001614a:	83 c4 10             	add    esp,0x10
c001614d:	85 c0                	test   eax,eax
c001614f:	74 47                	je     c0016198 <unblockTask(ThreadControlBlock*)+0x98>
c0016151:	8d 76 00             	lea    esi,[esi+0x0]
c0016154:	39 c3                	cmp    ebx,eax
c0016156:	75 e4                	jne    c001613c <unblockTask(ThreadControlBlock*)+0x3c>
c0016158:	eb 12                	jmp    c001616c <unblockTask(ThreadControlBlock*)+0x6c>
c001615a:	66 90                	xchg   ax,ax
c001615c:	83 ec 0c             	sub    esp,0xc
c001615f:	68 43 24 02 c0       	push   0xc0022443
c0016164:	e8 a1 47 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016169:	83 c4 10             	add    esp,0x10
c001616c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016171:	83 e8 01             	sub    eax,0x1
c0016174:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016179:	75 01                	jne    c001617c <unblockTask(ThreadControlBlock*)+0x7c>
c001617b:	fb                   	sti    
c001617c:	83 c4 08             	add    esp,0x8
c001617f:	5b                   	pop    ebx
c0016180:	c3                   	ret    
c0016181:	8d 76 00             	lea    esi,[esi+0x0]
c0016184:	83 ec 0c             	sub    esp,0xc
c0016187:	68 2c 24 02 c0       	push   0xc002242c
c001618c:	e8 79 47 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016191:	83 c4 10             	add    esp,0x10
c0016194:	eb d6                	jmp    c001616c <unblockTask(ThreadControlBlock*)+0x6c>
c0016196:	66 90                	xchg   ax,ax
c0016198:	83 ec 08             	sub    esp,0x8
c001619b:	53                   	push   ebx
c001619c:	68 e4 96 02 c0       	push   0xc00296e4
c00161a1:	e8 ca 97 00 00       	call   c001f970 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00161a6:	83 c4 10             	add    esp,0x10
c00161a9:	eb c1                	jmp    c001616c <unblockTask(ThreadControlBlock*)+0x6c>
c00161ab:	90                   	nop

c00161ac <cleanupTerminatedTask(ThreadControlBlock*)>:
c00161ac:	55                   	push   ebp
c00161ad:	57                   	push   edi
c00161ae:	56                   	push   esi
c00161af:	53                   	push   ebx
c00161b0:	83 ec 1c             	sub    esp,0x1c
c00161b3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00161b7:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00161ba:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c00161c0:	85 ed                	test   ebp,ebp
c00161c2:	7e 28                	jle    c00161ec <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c00161c4:	31 f6                	xor    esi,esi
c00161c6:	66 90                	xchg   ax,ax
c00161c8:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c00161cf:	83 ec 0c             	sub    esp,0xc
c00161d2:	83 c6 01             	add    esi,0x1
c00161d5:	57                   	push   edi
c00161d6:	e8 08 19 ff ff       	call   c0007ae3 <free>
c00161db:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00161de:	83 c4 10             	add    esp,0x10
c00161e1:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00161e7:	7f df                	jg     c00161c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00161e9:	8d 76 00             	lea    esi,[esi+0x0]
c00161ec:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00161f6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00161fb:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00161fe:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0016201:	d3 c0                	rol    eax,cl
c0016203:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c001620a:	21 c8                	and    eax,ecx
c001620c:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c0016213:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016216:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c001621e:	89 f7                	mov    edi,esi
c0016220:	0f 85 72 01 00 00    	jne    c0016398 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0016226:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c001622c:	85 ed                	test   ebp,ebp
c001622e:	74 1c                	je     c001624c <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0016230:	83 ec 0c             	sub    esp,0xc
c0016233:	55                   	push   ebp
c0016234:	e8 e1 ad ff ff       	call   c001101a <EnvVarContainer::~EnvVarContainer()>
c0016239:	59                   	pop    ecx
c001623a:	5e                   	pop    esi
c001623b:	6a 0c                	push   0xc
c001623d:	55                   	push   ebp
c001623e:	e8 c9 45 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0016243:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016246:	83 c4 10             	add    esp,0x10
c0016249:	89 f7                	mov    edi,esi
c001624b:	90                   	nop
c001624c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016252:	85 c0                	test   eax,eax
c0016254:	0f 84 b2 00 00 00    	je     c001630c <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001625a:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c001625d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016261:	31 c9                	xor    ecx,ecx
c0016263:	eb 17                	jmp    c001627c <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0016265:	8d 76 00             	lea    esi,[esi+0x0]
c0016268:	83 c1 01             	add    ecx,0x1
c001626b:	83 f9 10             	cmp    ecx,0x10
c001626e:	0f 84 98 00 00 00    	je     c001630c <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0016274:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001627a:	66 90                	xchg   ax,ax
c001627c:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0016283:	d3 fa                	sar    edx,cl
c0016285:	80 e2 01             	and    dl,0x1
c0016288:	74 de                	je     c0016268 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001628a:	8d 14 49             	lea    edx,[ecx+ecx*2]
c001628d:	c1 e2 05             	shl    edx,0x5
c0016290:	29 ca                	sub    edx,ecx
c0016292:	01 d0                	add    eax,edx
c0016294:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001629a:	83 fd 07             	cmp    ebp,0x7
c001629d:	75 c9                	jne    c0016268 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001629f:	05 40 02 00 00       	add    eax,0x240
c00162a4:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00162a7:	83 fd ff             	cmp    ebp,0xffffffff
c00162aa:	0f 8c f0 00 00 00    	jl     c00163a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c00162b0:	0f 84 ae 01 00 00    	je     c0016464 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c00162b6:	85 ed                	test   ebp,ebp
c00162b8:	0f 84 92 01 00 00    	je     c0016450 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c00162be:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00162c0:	75 a6                	jne    c0016268 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00162c2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00162c6:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00162cc:	01 d0                	add    eax,edx
c00162ce:	66 90                	xchg   ax,ax
c00162d0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00162d4:	83 ec 0c             	sub    esp,0xc
c00162d7:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00162dd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00162e0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00162e6:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00162ed:	50                   	push   eax
c00162ee:	e8 0d fe ff ff       	call   c0016100 <unblockTask(ThreadControlBlock*)>
c00162f3:	83 c4 10             	add    esp,0x10
c00162f6:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00162f9:	89 f7                	mov    edi,esi
c00162fb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00162ff:	83 c1 01             	add    ecx,0x1
c0016302:	83 f9 10             	cmp    ecx,0x10
c0016305:	0f 85 69 ff ff ff    	jne    c0016274 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c001630b:	90                   	nop
c001630c:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0016312:	85 c0                	test   eax,eax
c0016314:	74 62                	je     c0016378 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0016316:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c001631c:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0016322:	74 54                	je     c0016378 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0016324:	83 ec 0c             	sub    esp,0xc
c0016327:	68 e4 96 02 c0       	push   0xc00296e4
c001632c:	e8 7b 95 00 00       	call   c001f8ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016331:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0016338:	89 c7                	mov    edi,eax
c001633a:	e8 51 95 00 00       	call   c001f890 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001633f:	83 c4 10             	add    esp,0x10
c0016342:	84 c0                	test   al,al
c0016344:	0f 84 ce 00 00 00    	je     c0016418 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c001634a:	66 90                	xchg   ax,ax
c001634c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001634f:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016355:	85 d2                	test   edx,edx
c0016357:	74 0f                	je     c0016368 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0016359:	8b 02                	mov    eax,DWORD PTR [edx]
c001635b:	83 ec 0c             	sub    esp,0xc
c001635e:	52                   	push   edx
c001635f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016362:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016365:	83 c4 10             	add    esp,0x10
c0016368:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0016372:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0016375:	8d 76 00             	lea    esi,[esi+0x0]
c0016378:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c001637e:	85 db                	test   ebx,ebx
c0016380:	74 16                	je     c0016398 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0016382:	83 ec 0c             	sub    esp,0xc
c0016385:	53                   	push   ebx
c0016386:	e8 05 38 ff ff       	call   c0009b90 <VAS::~VAS()>
c001638b:	58                   	pop    eax
c001638c:	5a                   	pop    edx
c001638d:	6a 14                	push   0x14
c001638f:	53                   	push   ebx
c0016390:	e8 77 44 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0016395:	83 c4 10             	add    esp,0x10
c0016398:	83 c4 1c             	add    esp,0x1c
c001639b:	5b                   	pop    ebx
c001639c:	5e                   	pop    esi
c001639d:	5f                   	pop    edi
c001639e:	5d                   	pop    ebp
c001639f:	c3                   	ret    
c00163a0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00163a4:	83 ec 0c             	sub    esp,0xc
c00163a7:	68 f8 24 02 c0       	push   0xc00224f8
c00163ac:	e8 58 af ff ff       	call   c0011309 <KePanic(char const*)>
c00163b1:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00163b4:	83 c4 10             	add    esp,0x10
c00163b7:	89 f7                	mov    edi,esi
c00163b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00163bd:	e9 a6 fe ff ff       	jmp    c0016268 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00163c2:	66 90                	xchg   ax,ax
c00163c4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00163ca:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00163d0:	75 1e                	jne    c00163f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00163d2:	83 ec 0c             	sub    esp,0xc
c00163d5:	68 60 25 02 c0       	push   0xc0022560
c00163da:	e8 2b 45 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00163df:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00163e6:	e8 1d fa ff ff       	call   c0015e08 <blockTask(TaskState)>
c00163eb:	83 c4 10             	add    esp,0x10
c00163ee:	66 90                	xchg   ax,ax
c00163f0:	83 ec 08             	sub    esp,0x8
c00163f3:	56                   	push   esi
c00163f4:	68 e4 96 02 c0       	push   0xc00296e4
c00163f9:	e8 72 95 00 00       	call   c001f970 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00163fe:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0016405:	e8 a2 94 00 00       	call   c001f8ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001640a:	83 c4 10             	add    esp,0x10
c001640d:	39 f8                	cmp    eax,edi
c001640f:	0f 84 37 ff ff ff    	je     c001634c <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0016415:	8d 76 00             	lea    esi,[esi+0x0]
c0016418:	83 ec 0c             	sub    esp,0xc
c001641b:	68 e4 96 02 c0       	push   0xc00296e4
c0016420:	e8 87 94 00 00       	call   c001f8ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016425:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c001642c:	89 c6                	mov    esi,eax
c001642e:	e8 81 94 00 00       	call   c001f8b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016433:	83 c4 10             	add    esp,0x10
c0016436:	39 f3                	cmp    ebx,esi
c0016438:	74 b6                	je     c00163f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001643a:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c001643d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016440:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0016446:	75 a8                	jne    c00163f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016448:	e9 77 ff ff ff       	jmp    c00163c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c001644d:	8d 76 00             	lea    esi,[esi+0x0]
c0016450:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016454:	83 ec 0c             	sub    esp,0xc
c0016457:	68 2c 25 02 c0       	push   0xc002252c
c001645c:	e9 4b ff ff ff       	jmp    c00163ac <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0016461:	8d 76 00             	lea    esi,[esi+0x0]
c0016464:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016468:	8b 36                	mov    esi,DWORD PTR [esi]
c001646a:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c001646d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016470:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0016476:	01 d7                	add    edi,edx
c0016478:	89 f8                	mov    eax,edi
c001647a:	e9 51 fe ff ff       	jmp    c00162d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c001647f:	90                   	nop

c0016480 <cleanerTaskFunction(void*)>:
c0016480:	53                   	push   ebx
c0016481:	83 ec 08             	sub    esp,0x8
c0016484:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016489:	83 e8 01             	sub    eax,0x1
c001648c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016491:	75 01                	jne    c0016494 <cleanerTaskFunction(void*)+0x14>
c0016493:	fb                   	sti    
c0016494:	fa                   	cli    
c0016495:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001649a:	80 3d ac 96 02 c0 00 	cmp    BYTE PTR ds:0xc00296ac,0x0
c00164a1:	8d 50 01             	lea    edx,[eax+0x1]
c00164a4:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c00164aa:	0f 84 c4 00 00 00    	je     c0016574 <cleanerTaskFunction(void*)+0xf4>
c00164b0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00164b5:	85 c0                	test   eax,eax
c00164b7:	75 03                	jne    c00164bc <cleanerTaskFunction(void*)+0x3c>
c00164b9:	fb                   	sti    
c00164ba:	66 90                	xchg   ax,ax
c00164bc:	c6 05 ac 96 02 c0 00 	mov    BYTE PTR ds:0xc00296ac,0x0
c00164c3:	fa                   	cli    
c00164c4:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c00164ca:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c00164d0:	83 c2 01             	add    edx,0x1
c00164d3:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c00164d9:	83 c1 01             	add    ecx,0x1
c00164dc:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c00164e2:	fa                   	cli    
c00164e3:	8b 1d c8 96 02 c0    	mov    ebx,DWORD PTR ds:0xc00296c8
c00164e9:	83 c3 01             	add    ebx,0x1
c00164ec:	89 1d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ebx
c00164f2:	eb 28                	jmp    c001651c <cleanerTaskFunction(void*)+0x9c>
c00164f4:	83 ec 0c             	sub    esp,0xc
c00164f7:	68 cc 96 02 c0       	push   0xc00296cc
c00164fc:	e8 ab 93 00 00       	call   c001f8ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016501:	c7 04 24 cc 96 02 c0 	mov    DWORD PTR [esp],0xc00296cc
c0016508:	89 c3                	mov    ebx,eax
c001650a:	e8 a5 93 00 00       	call   c001f8b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001650f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016512:	e8 95 fc ff ff       	call   c00161ac <cleanupTerminatedTask(ThreadControlBlock*)>
c0016517:	83 c4 10             	add    esp,0x10
c001651a:	66 90                	xchg   ax,ax
c001651c:	83 ec 0c             	sub    esp,0xc
c001651f:	68 cc 96 02 c0       	push   0xc00296cc
c0016524:	e8 67 93 00 00       	call   c001f890 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016529:	83 c4 10             	add    esp,0x10
c001652c:	84 c0                	test   al,al
c001652e:	74 c4                	je     c00164f4 <cleanerTaskFunction(void*)+0x74>
c0016530:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016535:	83 e8 01             	sub    eax,0x1
c0016538:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001653d:	75 01                	jne    c0016540 <cleanerTaskFunction(void*)+0xc0>
c001653f:	fb                   	sti    
c0016540:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0016545:	83 e8 01             	sub    eax,0x1
c0016548:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c001654d:	0f 85 31 ff ff ff    	jne    c0016484 <cleanerTaskFunction(void*)+0x4>
c0016553:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0016558:	85 c0                	test   eax,eax
c001655a:	0f 84 24 ff ff ff    	je     c0016484 <cleanerTaskFunction(void*)+0x4>
c0016560:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c001656a:	e8 99 f6 ff ff       	call   c0015c08 <schedule()>
c001656f:	e9 10 ff ff ff       	jmp    c0016484 <cleanerTaskFunction(void*)+0x4>
c0016574:	83 ec 0c             	sub    esp,0xc
c0016577:	6a 02                	push   0x2
c0016579:	e8 62 f8 ff ff       	call   c0015de0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001657e:	83 c4 10             	add    esp,0x10
c0016581:	e9 36 ff ff ff       	jmp    c00164bc <cleanerTaskFunction(void*)+0x3c>
c0016586:	66 90                	xchg   ax,ax

c0016588 <terminateTask(int)>:
c0016588:	83 ec 14             	sub    esp,0x14
c001658b:	fa                   	cli    
c001658c:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c0016592:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0016598:	83 c2 01             	add    edx,0x1
c001659b:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c00165a1:	83 c1 01             	add    ecx,0x1
c00165a4:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c00165aa:	fa                   	cli    
c00165ab:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00165b0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00165b4:	83 c0 01             	add    eax,0x1
c00165b7:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00165bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165c1:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00165c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165c9:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00165cc:	50                   	push   eax
c00165cd:	68 cc 96 02 c0       	push   0xc00296cc
c00165d2:	e8 99 93 00 00       	call   c001f970 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00165d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165dc:	83 c4 10             	add    esp,0x10
c00165df:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00165e6:	a1 a8 96 02 c0       	mov    eax,ds:0xc00296a8
c00165eb:	85 c0                	test   eax,eax
c00165ed:	74 65                	je     c0016654 <terminateTask(int)+0xcc>
c00165ef:	c6 05 ac 96 02 c0 01 	mov    BYTE PTR ds:0xc00296ac,0x1
c00165f6:	83 ec 0c             	sub    esp,0xc
c00165f9:	50                   	push   eax
c00165fa:	e8 01 fb ff ff       	call   c0016100 <unblockTask(ThreadControlBlock*)>
c00165ff:	83 c4 10             	add    esp,0x10
c0016602:	66 90                	xchg   ax,ax
c0016604:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016609:	83 e8 01             	sub    eax,0x1
c001660c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016611:	75 01                	jne    c0016614 <terminateTask(int)+0x8c>
c0016613:	fb                   	sti    
c0016614:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0016619:	83 e8 01             	sub    eax,0x1
c001661c:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0016621:	75 09                	jne    c001662c <terminateTask(int)+0xa4>
c0016623:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c001662a:	75 3c                	jne    c0016668 <terminateTask(int)+0xe0>
c001662c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016631:	83 e8 01             	sub    eax,0x1
c0016634:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016639:	75 01                	jne    c001663c <terminateTask(int)+0xb4>
c001663b:	fb                   	sti    
c001663c:	fa                   	cli    
c001663d:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016642:	83 c0 01             	add    eax,0x1
c0016645:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001664a:	66 90                	xchg   ax,ax
c001664c:	e8 b7 f5 ff ff       	call   c0015c08 <schedule()>
c0016651:	eb d9                	jmp    c001662c <terminateTask(int)+0xa4>
c0016653:	90                   	nop
c0016654:	83 ec 0c             	sub    esp,0xc
c0016657:	68 5a 24 02 c0       	push   0xc002245a
c001665c:	e8 a9 42 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016661:	83 c4 10             	add    esp,0x10
c0016664:	eb 9e                	jmp    c0016604 <terminateTask(int)+0x7c>
c0016666:	66 90                	xchg   ax,ax
c0016668:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0016672:	eb d8                	jmp    c001664c <terminateTask(int)+0xc4>

c0016674 <Thr::terminateFromIRQ(int)>:
c0016674:	83 ec 18             	sub    esp,0x18
c0016677:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001667b:	50                   	push   eax
c001667c:	e8 07 ff ff ff       	call   c0016588 <terminateTask(int)>
c0016681:	90                   	nop
c0016682:	66 90                	xchg   ax,ax

c0016684 <Semaphore::release()>:
c0016684:	83 ec 0c             	sub    esp,0xc
c0016687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001668b:	fa                   	cli    
c001668c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016691:	83 c0 01             	add    eax,0x1
c0016694:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016699:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c001669e:	8d 48 01             	lea    ecx,[eax+0x1]
c00166a1:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c00166a7:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00166aa:	85 c9                	test   ecx,ecx
c00166ac:	74 42                	je     c00166f0 <Semaphore::release()+0x6c>
c00166ae:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00166b1:	83 ec 0c             	sub    esp,0xc
c00166b4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00166b7:	51                   	push   ecx
c00166b8:	e8 43 fa ff ff       	call   c0016100 <unblockTask(ThreadControlBlock*)>
c00166bd:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c00166c2:	83 c4 10             	add    esp,0x10
c00166c5:	83 e8 01             	sub    eax,0x1
c00166c8:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c00166cd:	85 c0                	test   eax,eax
c00166cf:	75 0b                	jne    c00166dc <Semaphore::release()+0x58>
c00166d1:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c00166d6:	85 c0                	test   eax,eax
c00166d8:	75 22                	jne    c00166fc <Semaphore::release()+0x78>
c00166da:	66 90                	xchg   ax,ax
c00166dc:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00166e1:	83 e8 01             	sub    eax,0x1
c00166e4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00166e9:	75 01                	jne    c00166ec <Semaphore::release()+0x68>
c00166eb:	fb                   	sti    
c00166ec:	83 c4 0c             	add    esp,0xc
c00166ef:	c3                   	ret    
c00166f0:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00166f3:	83 e9 01             	sub    ecx,0x1
c00166f6:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00166f9:	eb cd                	jmp    c00166c8 <Semaphore::release()+0x44>
c00166fb:	90                   	nop
c00166fc:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0016706:	e8 fd f4 ff ff       	call   c0015c08 <schedule()>
c001670b:	eb cf                	jmp    c00166dc <Semaphore::release()+0x58>
c001670d:	8d 76 00             	lea    esi,[esi+0x0]

c0016710 <__static_initialization_and_destruction_0(int, int)>:
c0016710:	83 ec 0c             	sub    esp,0xc
c0016713:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016718:	0f 85 8e 00 00 00    	jne    c00167ac <__static_initialization_and_destruction_0(int, int)+0x9c>
c001671e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0016726:	0f 85 80 00 00 00    	jne    c00167ac <__static_initialization_and_destruction_0(int, int)+0x9c>
c001672c:	83 ec 0c             	sub    esp,0xc
c001672f:	68 e4 96 02 c0       	push   0xc00296e4
c0016734:	e8 eb 94 00 00       	call   c001fc24 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016739:	83 c4 10             	add    esp,0x10
c001673c:	83 ec 04             	sub    esp,0x4
c001673f:	68 30 31 02 c0       	push   0xc0023130
c0016744:	68 e4 96 02 c0       	push   0xc00296e4
c0016749:	68 d4 fb 01 c0       	push   0xc001fbd4
c001674e:	e8 69 40 ff ff       	call   c000a7bc <__cxa_atexit>
c0016753:	83 c4 10             	add    esp,0x10
c0016756:	83 ec 0c             	sub    esp,0xc
c0016759:	68 d8 96 02 c0       	push   0xc00296d8
c001675e:	e8 c1 94 00 00       	call   c001fc24 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016763:	83 c4 10             	add    esp,0x10
c0016766:	83 ec 04             	sub    esp,0x4
c0016769:	68 30 31 02 c0       	push   0xc0023130
c001676e:	68 d8 96 02 c0       	push   0xc00296d8
c0016773:	68 d4 fb 01 c0       	push   0xc001fbd4
c0016778:	e8 3f 40 ff ff       	call   c000a7bc <__cxa_atexit>
c001677d:	83 c4 10             	add    esp,0x10
c0016780:	83 ec 0c             	sub    esp,0xc
c0016783:	68 cc 96 02 c0       	push   0xc00296cc
c0016788:	e8 97 94 00 00       	call   c001fc24 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001678d:	83 c4 10             	add    esp,0x10
c0016790:	83 ec 04             	sub    esp,0x4
c0016793:	68 30 31 02 c0       	push   0xc0023130
c0016798:	68 cc 96 02 c0       	push   0xc00296cc
c001679d:	68 d4 fb 01 c0       	push   0xc001fbd4
c00167a2:	e8 15 40 ff ff       	call   c000a7bc <__cxa_atexit>
c00167a7:	83 c4 10             	add    esp,0x10
c00167aa:	66 90                	xchg   ax,ax
c00167ac:	90                   	nop
c00167ad:	83 c4 0c             	add    esp,0xc
c00167b0:	c3                   	ret    
c00167b1:	8d 76 00             	lea    esi,[esi+0x0]

c00167b4 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00167b4:	83 ec 0c             	sub    esp,0xc
c00167b7:	83 ec 08             	sub    esp,0x8
c00167ba:	68 ff ff 00 00       	push   0xffff
c00167bf:	6a 01                	push   0x1
c00167c1:	e8 4a ff ff ff       	call   c0016710 <__static_initialization_and_destruction_0(int, int)>
c00167c6:	83 c4 10             	add    esp,0x10
c00167c9:	83 c4 0c             	add    esp,0xc
c00167cc:	c3                   	ret    

c00167cd <Vm::inbv(unsigned short)>:
c00167cd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00167d1:	66 81 fa fe fe       	cmp    dx,0xfefe
c00167d6:	75 06                	jne    c00167de <Vm::inbv(unsigned short)+0x11>
c00167d8:	a0 2c 97 02 c0       	mov    al,ds:0xc002972c
c00167dd:	c3                   	ret    
c00167de:	ec                   	in     al,dx
c00167df:	c3                   	ret    

c00167e0 <Vm::outbv(unsigned short, unsigned char)>:
c00167e0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00167e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00167e8:	66 81 fa fe fe       	cmp    dx,0xfefe
c00167ed:	75 25                	jne    c0016814 <Vm::outbv(unsigned short, unsigned char)+0x34>
c00167ef:	8b 0d 2c 97 02 c0    	mov    ecx,DWORD PTR ds:0xc002972c
c00167f5:	88 81 40 97 02 c0    	mov    BYTE PTR [ecx-0x3ffd68c0],al
c00167fb:	8d 51 01             	lea    edx,[ecx+0x1]
c00167fe:	89 15 2c 97 02 c0    	mov    DWORD PTR ds:0xc002972c,edx
c0016804:	83 fa 20             	cmp    edx,0x20
c0016807:	75 0c                	jne    c0016815 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016809:	c7 05 2c 97 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x1f
c0016813:	c3                   	ret    
c0016814:	ee                   	out    dx,al
c0016815:	c3                   	ret    

c0016816 <Vm::realToLinear(unsigned short, unsigned short)>:
c0016816:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001681b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016820:	c1 e0 04             	shl    eax,0x4
c0016823:	01 d0                	add    eax,edx
c0016825:	c3                   	ret    

c0016826 <Vm::getSegment(unsigned int)>:
c0016826:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001682a:	c1 e8 10             	shr    eax,0x10
c001682d:	c3                   	ret    

c001682e <Vm::getOffset(unsigned int)>:
c001682e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016832:	c3                   	ret    

c0016833 <Vm::mainloop2()>:
c0016833:	83 ec 18             	sub    esp,0x18
c0016836:	fa                   	cli    
c0016837:	6a 02                	push   0x2
c0016839:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001683f:	c6 05 25 97 02 c0 01 	mov    BYTE PTR ds:0xc0029725,0x1
c0016846:	e8 95 f5 ff ff       	call   c0015de0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001684b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016850:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016854:	52                   	push   edx
c0016855:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016859:	52                   	push   edx
c001685a:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c001685e:	52                   	push   edx
c001685f:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016863:	50                   	push   eax
c0016864:	e8 a6 99 fe ff       	call   c000020f <goToVM86>
c0016869:	83 c4 2c             	add    esp,0x2c
c001686c:	c3                   	ret    

c001686d <Vm::mainVm8086Loop(void*)>:
c001686d:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016872:	48                   	dec    eax
c0016873:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016878:	75 01                	jne    c001687b <Vm::mainVm8086Loop(void*)+0xe>
c001687a:	fb                   	sti    
c001687b:	eb b6                	jmp    c0016833 <Vm::mainloop2()>

c001687d <Vm::mainloop3(unsigned long)>:
c001687d:	83 ec 18             	sub    esp,0x18
c0016880:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016884:	fa                   	cli    
c0016885:	6a 02                	push   0x2
c0016887:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001688d:	c6 05 24 97 02 c0 01 	mov    BYTE PTR ds:0xc0029724,0x1
c0016894:	a3 20 97 02 c0       	mov    ds:0xc0029720,eax
c0016899:	e8 42 f5 ff ff       	call   c0015de0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001689e:	83 c4 1c             	add    esp,0x1c
c00168a1:	eb 90                	jmp    c0016833 <Vm::mainloop2()>

c00168a3 <Vm::initialise8086()>:
c00168a3:	83 ec 0c             	sub    esp,0xc
c00168a6:	68 80 00 00 00       	push   0x80
c00168ab:	6a 00                	push   0x0
c00168ad:	68 6d 68 01 c0       	push   0xc001686d
c00168b2:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c00168b8:	e8 ff f0 ff ff       	call   c00159bc <Process::createThread(void (*)(void*), void*, int)>
c00168bd:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00168c4:	68 00 01 00 00       	push   0x100
c00168c9:	6a 00                	push   0x0
c00168cb:	6a 00                	push   0x0
c00168cd:	a3 28 97 02 c0       	mov    ds:0xc0029728,eax
c00168d2:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00168d7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00168dd:	e8 26 36 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00168e2:	83 c4 2c             	add    esp,0x2c
c00168e5:	c3                   	ret    

c00168e6 <Vm::finish8086()>:
c00168e6:	53                   	push   ebx
c00168e7:	83 ec 08             	sub    esp,0x8
c00168ea:	fa                   	cli    
c00168eb:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00168f1:	80 3d 24 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029724,0x0
c00168f8:	75 15                	jne    c001690f <Vm::finish8086()+0x29>
c00168fa:	e8 09 f3 ff ff       	call   c0015c08 <schedule()>
c00168ff:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016904:	48                   	dec    eax
c0016905:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001690a:	75 de                	jne    c00168ea <Vm::finish8086()+0x4>
c001690c:	fb                   	sti    
c001690d:	eb db                	jmp    c00168ea <Vm::finish8086()+0x4>
c001690f:	c6 05 24 97 02 c0 00 	mov    BYTE PTR ds:0xc0029724,0x0
c0016916:	83 ec 0c             	sub    esp,0xc
c0016919:	8b 1d 20 97 02 c0    	mov    ebx,DWORD PTR ds:0xc0029720
c001691f:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c0016925:	e8 d6 f7 ff ff       	call   c0016100 <unblockTask(ThreadControlBlock*)>
c001692a:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001692f:	83 c4 10             	add    esp,0x10
c0016932:	8d 50 ff             	lea    edx,[eax-0x1]
c0016935:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c001693b:	85 d2                	test   edx,edx
c001693d:	75 01                	jne    c0016940 <Vm::finish8086()+0x5a>
c001693f:	fb                   	sti    
c0016940:	83 c4 08             	add    esp,0x8
c0016943:	89 d8                	mov    eax,ebx
c0016945:	5b                   	pop    ebx
c0016946:	c3                   	ret    

c0016947 <Vm::getOutput8086(unsigned char*)>:
c0016947:	57                   	push   edi
c0016948:	8b 0d 2c 97 02 c0    	mov    ecx,DWORD PTR ds:0xc002972c
c001694e:	56                   	push   esi
c001694f:	be 40 97 02 c0       	mov    esi,0xc0029740
c0016954:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016958:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001695a:	5e                   	pop    esi
c001695b:	a1 2c 97 02 c0       	mov    eax,ds:0xc002972c
c0016960:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c001696a:	5f                   	pop    edi
c001696b:	c3                   	ret    

c001696c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001696c:	55                   	push   ebp
c001696d:	57                   	push   edi
c001696e:	56                   	push   esi
c001696f:	53                   	push   ebx
c0016970:	83 ec 0c             	sub    esp,0xc
c0016973:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016977:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001697b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001697f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016983:	fa                   	cli    
c0016984:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001698a:	80 3d 25 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029725,0x0
c0016991:	75 15                	jne    c00169a8 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016993:	e8 70 f2 ff ff       	call   c0015c08 <schedule()>
c0016998:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001699d:	48                   	dec    eax
c001699e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00169a3:	75 de                	jne    c0016983 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00169a5:	fb                   	sti    
c00169a6:	eb db                	jmp    c0016983 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00169a8:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c00169b2:	a1 28 97 02 c0       	mov    eax,ds:0xc0029728
c00169b7:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00169bb:	0f b7 ff             	movzx  edi,di
c00169be:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00169c2:	0f b7 f6             	movzx  esi,si
c00169c5:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00169c9:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00169cd:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00169d1:	50                   	push   eax
c00169d2:	6a 20                	push   0x20
c00169d4:	6a 00                	push   0x0
c00169d6:	68 40 97 02 c0       	push   0xc0029740
c00169db:	e8 10 9b fe ff       	call   c00004f0 <memset>
c00169e0:	5a                   	pop    edx
c00169e1:	59                   	pop    ecx
c00169e2:	57                   	push   edi
c00169e3:	56                   	push   esi
c00169e4:	e8 2d fe ff ff       	call   c0016816 <Vm::realToLinear(unsigned short, unsigned short)>
c00169e9:	83 c4 10             	add    esp,0x10
c00169ec:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00169f0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00169f4:	89 c7                	mov    edi,eax
c00169f6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00169f8:	c6 05 25 97 02 c0 00 	mov    BYTE PTR ds:0xc0029725,0x0
c00169ff:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016a04:	48                   	dec    eax
c0016a05:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016a0a:	75 01                	jne    c0016a0d <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016a0c:	fb                   	sti    
c0016a0d:	83 ec 0c             	sub    esp,0xc
c0016a10:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c0016a16:	e8 e5 f6 ff ff       	call   c0016100 <unblockTask(ThreadControlBlock*)>
c0016a1b:	83 c4 1c             	add    esp,0x1c
c0016a1e:	b0 01                	mov    al,0x1
c0016a20:	5b                   	pop    ebx
c0016a21:	5e                   	pop    esi
c0016a22:	5f                   	pop    edi
c0016a23:	5d                   	pop    ebp
c0016a24:	c3                   	ret    

c0016a25 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016a25:	55                   	push   ebp
c0016a26:	57                   	push   edi
c0016a27:	56                   	push   esi
c0016a28:	53                   	push   ebx
c0016a29:	83 ec 34             	sub    esp,0x34
c0016a2c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016a30:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016a34:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016a38:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016a3c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016a40:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016a44:	68 88 25 02 c0       	push   0xc0022588
c0016a49:	e8 bc 3e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016a4e:	83 c4 10             	add    esp,0x10
c0016a51:	fa                   	cli    
c0016a52:	8a 1d 25 97 02 c0    	mov    bl,BYTE PTR ds:0xc0029725
c0016a58:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016a5e:	84 db                	test   bl,bl
c0016a60:	75 15                	jne    c0016a77 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0016a62:	e8 a1 f1 ff ff       	call   c0015c08 <schedule()>
c0016a67:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016a6c:	48                   	dec    eax
c0016a6d:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016a72:	75 dd                	jne    c0016a51 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016a74:	fb                   	sti    
c0016a75:	eb da                	jmp    c0016a51 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016a77:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c0016a81:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016a85:	a1 28 97 02 c0       	mov    eax,ds:0xc0029728
c0016a8a:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016a8e:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016a92:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016a96:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016a9a:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016a9e:	50                   	push   eax
c0016a9f:	6a 20                	push   0x20
c0016aa1:	6a 00                	push   0x0
c0016aa3:	68 40 97 02 c0       	push   0xc0029740
c0016aa8:	e8 43 9a fe ff       	call   c00004f0 <memset>
c0016aad:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016ab4:	e8 1a 10 ff ff       	call   c0007ad3 <malloc>
c0016ab9:	83 c4 0c             	add    esp,0xc
c0016abc:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0016ac2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016ac6:	89 c5                	mov    ebp,eax
c0016ac8:	50                   	push   eax
c0016ac9:	e8 76 4d ff ff       	call   c000b844 <File::File(char const*, Process*)>
c0016ace:	83 c4 10             	add    esp,0x10
c0016ad1:	85 ed                	test   ebp,ebp
c0016ad3:	75 0a                	jne    c0016adf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0016ad5:	83 ec 0c             	sub    esp,0xc
c0016ad8:	68 aa 25 02 c0       	push   0xc00225aa
c0016add:	eb 2b                	jmp    c0016b0a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0016adf:	50                   	push   eax
c0016ae0:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016ae4:	50                   	push   eax
c0016ae5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016ae9:	50                   	push   eax
c0016aea:	55                   	push   ebp
c0016aeb:	e8 1e 51 ff ff       	call   c000bc0e <File::stat(unsigned long long*, bool*)>
c0016af0:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016af4:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016af8:	83 c4 10             	add    esp,0x10
c0016afb:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016b00:	74 27                	je     c0016b29 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0016b02:	83 ec 0c             	sub    esp,0xc
c0016b05:	68 be 25 02 c0       	push   0xc00225be
c0016b0a:	e8 fa a7 ff ff       	call   c0011309 <KePanic(char const*)>
c0016b0f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016b14:	83 c4 10             	add    esp,0x10
c0016b17:	48                   	dec    eax
c0016b18:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016b1d:	85 c0                	test   eax,eax
c0016b1f:	75 01                	jne    c0016b22 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016b21:	fb                   	sti    
c0016b22:	31 db                	xor    ebx,ebx
c0016b24:	e9 90 00 00 00       	jmp    c0016bb9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016b29:	51                   	push   ecx
c0016b2a:	51                   	push   ecx
c0016b2b:	6a 01                	push   0x1
c0016b2d:	55                   	push   ebp
c0016b2e:	e8 d9 4d ff ff       	call   c000b90c <File::open(FileOpenMode)>
c0016b33:	83 c4 10             	add    esp,0x10
c0016b36:	85 c0                	test   eax,eax
c0016b38:	74 26                	je     c0016b60 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0016b3a:	83 ec 0c             	sub    esp,0xc
c0016b3d:	68 d7 25 02 c0       	push   0xc00225d7
c0016b42:	e8 c2 a7 ff ff       	call   c0011309 <KePanic(char const*)>
c0016b47:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016b4c:	83 c4 10             	add    esp,0x10
c0016b4f:	48                   	dec    eax
c0016b50:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016b55:	85 c0                	test   eax,eax
c0016b57:	75 c9                	jne    c0016b22 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016b59:	fb                   	sti    
c0016b5a:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0016b5e:	eb 59                	jmp    c0016bb9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016b60:	50                   	push   eax
c0016b61:	0f b7 ff             	movzx  edi,di
c0016b64:	50                   	push   eax
c0016b65:	0f b7 f6             	movzx  esi,si
c0016b68:	57                   	push   edi
c0016b69:	56                   	push   esi
c0016b6a:	e8 a7 fc ff ff       	call   c0016816 <Vm::realToLinear(unsigned short, unsigned short)>
c0016b6f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016b72:	5a                   	pop    edx
c0016b73:	8d 74 24 20          	lea    esi,[esp+0x20]
c0016b77:	56                   	push   esi
c0016b78:	50                   	push   eax
c0016b79:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016b7d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016b81:	55                   	push   ebp
c0016b82:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016b85:	83 c4 14             	add    esp,0x14
c0016b88:	55                   	push   ebp
c0016b89:	e8 dc 4d ff ff       	call   c000b96a <File::close()>
c0016b8e:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016b93:	83 c4 10             	add    esp,0x10
c0016b96:	c6 05 25 97 02 c0 00 	mov    BYTE PTR ds:0xc0029725,0x0
c0016b9d:	48                   	dec    eax
c0016b9e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016ba3:	85 c0                	test   eax,eax
c0016ba5:	75 01                	jne    c0016ba8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0016ba7:	fb                   	sti    
c0016ba8:	83 ec 0c             	sub    esp,0xc
c0016bab:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c0016bb1:	e8 4a f5 ff ff       	call   c0016100 <unblockTask(ThreadControlBlock*)>
c0016bb6:	83 c4 10             	add    esp,0x10
c0016bb9:	83 c4 2c             	add    esp,0x2c
c0016bbc:	88 d8                	mov    al,bl
c0016bbe:	5b                   	pop    ebx
c0016bbf:	5e                   	pop    esi
c0016bc0:	5f                   	pop    edi
c0016bc1:	5d                   	pop    ebp
c0016bc2:	c3                   	ret    

c0016bc3 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0016bc3:	57                   	push   edi
c0016bc4:	56                   	push   esi
c0016bc5:	53                   	push   ebx
c0016bc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016bce:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016bd2:	83 e8 06             	sub    eax,0x6
c0016bd5:	0f b7 c0             	movzx  eax,ax
c0016bd8:	50                   	push   eax
c0016bd9:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016bde:	50                   	push   eax
c0016bdf:	e8 32 fc ff ff       	call   c0016816 <Vm::realToLinear(unsigned short, unsigned short)>
c0016be4:	5a                   	pop    edx
c0016be5:	59                   	pop    ecx
c0016be6:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0016be9:	8d 51 fa             	lea    edx,[ecx-0x6]
c0016bec:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016bef:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016bf5:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0016bf8:	8d 51 02             	lea    edx,[ecx+0x2]
c0016bfb:	66 89 10             	mov    WORD PTR [eax],dx
c0016bfe:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0016c02:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0016c06:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0016c0a:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0016c0d:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016c11:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016c17:	89 f1                	mov    ecx,esi
c0016c19:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0016c1d:	89 f2                	mov    edx,esi
c0016c1f:	0f b6 d6             	movzx  edx,dh
c0016c22:	0f b6 f1             	movzx  esi,cl
c0016c25:	74 0a                	je     c0016c31 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c0016c27:	c1 e2 08             	shl    edx,0x8
c0016c2a:	09 f2                	or     edx,esi
c0016c2c:	80 ce 02             	or     dh,0x2
c0016c2f:	eb 08                	jmp    c0016c39 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c0016c31:	c1 e2 08             	shl    edx,0x8
c0016c34:	09 f2                	or     edx,esi
c0016c36:	80 e6 fd             	and    dh,0xfd
c0016c39:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016c3d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c42:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016c46:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0016c4e:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0016c51:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0016c59:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016c5c:	5b                   	pop    ebx
c0016c5d:	5e                   	pop    esi
c0016c5e:	5f                   	pop    edi
c0016c5f:	c3                   	ret    

c0016c60 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016c60:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016c65:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016c6a:	c1 e0 04             	shl    eax,0x4
c0016c6d:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016c70:	c3                   	ret    

c0016c71 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016c71:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016c76:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016c7b:	c1 e0 04             	shl    eax,0x4
c0016c7e:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0016c82:	c3                   	ret    

c0016c83 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0016c83:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016c88:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016c8d:	c1 e0 04             	shl    eax,0x4
c0016c90:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016c93:	c3                   	ret    

c0016c94 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016c94:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016c99:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016c9e:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0016ca2:	c1 e0 04             	shl    eax,0x4
c0016ca5:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0016ca8:	c3                   	ret    

c0016ca9 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0016ca9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016cae:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016cb3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016cb7:	c1 e0 04             	shl    eax,0x4
c0016cba:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0016cbe:	c3                   	ret    

c0016cbf <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0016cbf:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016cc4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016cc9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016ccd:	c1 e0 04             	shl    eax,0x4
c0016cd0:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0016cd3:	c3                   	ret    

c0016cd4 <Vm::faultHandler(regs*)>:
c0016cd4:	55                   	push   ebp
c0016cd5:	57                   	push   edi
c0016cd6:	56                   	push   esi
c0016cd7:	53                   	push   ebx
c0016cd8:	83 ec 2c             	sub    esp,0x2c
c0016cdb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016cdf:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016ce2:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0016ce6:	0f b7 f8             	movzx  edi,ax
c0016ce9:	0f b7 c0             	movzx  eax,ax
c0016cec:	52                   	push   edx
c0016ced:	50                   	push   eax
c0016cee:	e8 23 fb ff ff       	call   c0016816 <Vm::realToLinear(unsigned short, unsigned short)>
c0016cf3:	5a                   	pop    edx
c0016cf4:	59                   	pop    ecx
c0016cf5:	89 c1                	mov    ecx,eax
c0016cf7:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016cfa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016cfe:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0016d03:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016d07:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0016d0a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016d0e:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0016d13:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016d17:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016d1b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016d1f:	e8 f2 fa ff ff       	call   c0016816 <Vm::realToLinear(unsigned short, unsigned short)>
c0016d24:	5e                   	pop    esi
c0016d25:	be 06 00 00 00       	mov    esi,0x6
c0016d2a:	5d                   	pop    ebp
c0016d2b:	31 ed                	xor    ebp,ebp
c0016d2d:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016d32:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0016d35:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0016d3b:	0f 84 74 02 00 00    	je     c0016fb5 <Vm::faultHandler(regs*)+0x2e1>
c0016d41:	0f 87 94 00 00 00    	ja     c0016ddb <Vm::faultHandler(regs*)+0x107>
c0016d47:	83 fa 66             	cmp    edx,0x66
c0016d4a:	0f 84 e2 01 00 00    	je     c0016f32 <Vm::faultHandler(regs*)+0x25e>
c0016d50:	77 47                	ja     c0016d99 <Vm::faultHandler(regs*)+0xc5>
c0016d52:	83 fa 36             	cmp    edx,0x36
c0016d55:	0f 84 ca 01 00 00    	je     c0016f25 <Vm::faultHandler(regs*)+0x251>
c0016d5b:	77 1a                	ja     c0016d77 <Vm::faultHandler(regs*)+0xa3>
c0016d5d:	83 fa 26             	cmp    edx,0x26
c0016d60:	0f 84 98 01 00 00    	je     c0016efe <Vm::faultHandler(regs*)+0x22a>
c0016d66:	83 fa 2e             	cmp    edx,0x2e
c0016d69:	0f 85 27 06 00 00    	jne    c0017396 <Vm::faultHandler(regs*)+0x6c2>
c0016d6f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016d72:	31 f6                	xor    esi,esi
c0016d74:	41                   	inc    ecx
c0016d75:	eb bb                	jmp    c0016d32 <Vm::faultHandler(regs*)+0x5e>
c0016d77:	83 fa 64             	cmp    edx,0x64
c0016d7a:	0f 84 8b 01 00 00    	je     c0016f0b <Vm::faultHandler(regs*)+0x237>
c0016d80:	0f 87 92 01 00 00    	ja     c0016f18 <Vm::faultHandler(regs*)+0x244>
c0016d86:	83 fa 3e             	cmp    edx,0x3e
c0016d89:	0f 85 07 06 00 00    	jne    c0017396 <Vm::faultHandler(regs*)+0x6c2>
c0016d8f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016d92:	be 01 00 00 00       	mov    esi,0x1
c0016d97:	eb db                	jmp    c0016d74 <Vm::faultHandler(regs*)+0xa0>
c0016d99:	83 fa 6d             	cmp    edx,0x6d
c0016d9c:	0f 84 34 03 00 00    	je     c00170d6 <Vm::faultHandler(regs*)+0x402>
c0016da2:	77 17                	ja     c0016dbb <Vm::faultHandler(regs*)+0xe7>
c0016da4:	83 fa 67             	cmp    edx,0x67
c0016da7:	0f 84 92 01 00 00    	je     c0016f3f <Vm::faultHandler(regs*)+0x26b>
c0016dad:	83 fa 6c             	cmp    edx,0x6c
c0016db0:	0f 84 b1 02 00 00    	je     c0017067 <Vm::faultHandler(regs*)+0x393>
c0016db6:	e9 db 05 00 00       	jmp    c0017396 <Vm::faultHandler(regs*)+0x6c2>
c0016dbb:	83 fa 6f             	cmp    edx,0x6f
c0016dbe:	0f 84 40 04 00 00    	je     c0017204 <Vm::faultHandler(regs*)+0x530>
c0016dc4:	0f 82 a2 03 00 00    	jb     c001716c <Vm::faultHandler(regs*)+0x498>
c0016dca:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0016dd0:	0f 84 76 01 00 00    	je     c0016f4c <Vm::faultHandler(regs*)+0x278>
c0016dd6:	e9 bb 05 00 00       	jmp    c0017396 <Vm::faultHandler(regs*)+0x6c2>
c0016ddb:	81 fa ec 00 00 00    	cmp    edx,0xec
c0016de1:	0f 84 57 05 00 00    	je     c001733e <Vm::faultHandler(regs*)+0x66a>
c0016de7:	0f 87 a9 00 00 00    	ja     c0016e96 <Vm::faultHandler(regs*)+0x1c2>
c0016ded:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0016df3:	0f 84 d6 04 00 00    	je     c00172cf <Vm::faultHandler(regs*)+0x5fb>
c0016df9:	77 78                	ja     c0016e73 <Vm::faultHandler(regs*)+0x19f>
c0016dfb:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0016e01:	0f 84 0e 02 00 00    	je     c0017015 <Vm::faultHandler(regs*)+0x341>
c0016e07:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0016e0d:	0f 85 83 05 00 00    	jne    c0017396 <Vm::faultHandler(regs*)+0x6c2>
c0016e13:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0016e17:	89 d1                	mov    ecx,edx
c0016e19:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0016e1c:	c1 e1 08             	shl    ecx,0x8
c0016e1f:	09 ca                	or     edx,ecx
c0016e21:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0016e24:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0016e28:	89 d1                	mov    ecx,edx
c0016e2a:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0016e2e:	c1 e1 08             	shl    ecx,0x8
c0016e31:	09 ca                	or     edx,ecx
c0016e33:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0016e36:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0016e3a:	89 d1                	mov    ecx,edx
c0016e3c:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0016e40:	c1 e1 08             	shl    ecx,0x8
c0016e43:	09 ca                	or     edx,ecx
c0016e45:	81 ca 00 02 02 00    	or     edx,0x20200
c0016e4b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016e4e:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0016e52:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016e58:	d1 e8                	shr    eax,1
c0016e5a:	83 e0 01             	and    eax,0x1
c0016e5d:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016e60:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016e63:	83 c0 06             	add    eax,0x6
c0016e66:	25 ff ff 00 00       	and    eax,0xffff
c0016e6b:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016e6e:	e9 1f 05 00 00       	jmp    c0017392 <Vm::faultHandler(regs*)+0x6be>
c0016e73:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0016e79:	0f 84 95 04 00 00    	je     c0017314 <Vm::faultHandler(regs*)+0x640>
c0016e7f:	0f 82 66 04 00 00    	jb     c00172eb <Vm::faultHandler(regs*)+0x617>
c0016e85:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0016e8b:	0f 84 9a 04 00 00    	je     c001732b <Vm::faultHandler(regs*)+0x657>
c0016e91:	e9 00 05 00 00       	jmp    c0017396 <Vm::faultHandler(regs*)+0x6c2>
c0016e96:	81 fa ef 00 00 00    	cmp    edx,0xef
c0016e9c:	0f 84 dd 04 00 00    	je     c001737f <Vm::faultHandler(regs*)+0x6ab>
c0016ea2:	77 2e                	ja     c0016ed2 <Vm::faultHandler(regs*)+0x1fe>
c0016ea4:	81 fa ed 00 00 00    	cmp    edx,0xed
c0016eaa:	0f 84 aa 04 00 00    	je     c001735a <Vm::faultHandler(regs*)+0x686>
c0016eb0:	81 fa ee 00 00 00    	cmp    edx,0xee
c0016eb6:	0f 85 da 04 00 00    	jne    c0017396 <Vm::faultHandler(regs*)+0x6c2>
c0016ebc:	50                   	push   eax
c0016ebd:	50                   	push   eax
c0016ebe:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016ec2:	50                   	push   eax
c0016ec3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016ec7:	50                   	push   eax
c0016ec8:	e8 13 f9 ff ff       	call   c00167e0 <Vm::outbv(unsigned short, unsigned char)>
c0016ecd:	e9 a5 04 00 00       	jmp    c0017377 <Vm::faultHandler(regs*)+0x6a3>
c0016ed2:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0016ed8:	0f 84 6d 01 00 00    	je     c001704b <Vm::faultHandler(regs*)+0x377>
c0016ede:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0016ee4:	0f 84 6f 01 00 00    	je     c0017059 <Vm::faultHandler(regs*)+0x385>
c0016eea:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0016ef0:	0f 85 a0 04 00 00    	jne    c0017396 <Vm::faultHandler(regs*)+0x6c2>
c0016ef6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016ef9:	e9 76 fe ff ff       	jmp    c0016d74 <Vm::faultHandler(regs*)+0xa0>
c0016efe:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016f01:	be 02 00 00 00       	mov    esi,0x2
c0016f06:	e9 69 fe ff ff       	jmp    c0016d74 <Vm::faultHandler(regs*)+0xa0>
c0016f0b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016f0e:	be 03 00 00 00       	mov    esi,0x3
c0016f13:	e9 5c fe ff ff       	jmp    c0016d74 <Vm::faultHandler(regs*)+0xa0>
c0016f18:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016f1b:	be 04 00 00 00       	mov    esi,0x4
c0016f20:	e9 4f fe ff ff       	jmp    c0016d74 <Vm::faultHandler(regs*)+0xa0>
c0016f25:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016f28:	be 05 00 00 00       	mov    esi,0x5
c0016f2d:	e9 42 fe ff ff       	jmp    c0016d74 <Vm::faultHandler(regs*)+0xa0>
c0016f32:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016f35:	bd 01 00 00 00       	mov    ebp,0x1
c0016f3a:	e9 35 fe ff ff       	jmp    c0016d74 <Vm::faultHandler(regs*)+0xa0>
c0016f3f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016f42:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0016f47:	e9 28 fe ff ff       	jmp    c0016d74 <Vm::faultHandler(regs*)+0xa0>
c0016f4c:	83 e5 01             	and    ebp,0x1
c0016f4f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016f52:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016f56:	74 30                	je     c0016f88 <Vm::faultHandler(regs*)+0x2b4>
c0016f58:	83 e9 04             	sub    ecx,0x4
c0016f5b:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016f61:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016f67:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016f6a:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016f6d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016f73:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016f77:	0f 84 12 04 00 00    	je     c001738f <Vm::faultHandler(regs*)+0x6bb>
c0016f7d:	80 ce 02             	or     dh,0x2
c0016f80:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016f83:	e9 07 04 00 00       	jmp    c001738f <Vm::faultHandler(regs*)+0x6bb>
c0016f88:	83 e9 02             	sub    ecx,0x2
c0016f8b:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016f91:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016f94:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016f98:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016f9e:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016fa2:	74 05                	je     c0016fa9 <Vm::faultHandler(regs*)+0x2d5>
c0016fa4:	80 ce 02             	or     dh,0x2
c0016fa7:	eb 03                	jmp    c0016fac <Vm::faultHandler(regs*)+0x2d8>
c0016fa9:	80 e6 fd             	and    dh,0xfd
c0016fac:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016fb0:	e9 da 03 00 00       	jmp    c001738f <Vm::faultHandler(regs*)+0x6bb>
c0016fb5:	83 e5 01             	and    ebp,0x1
c0016fb8:	74 2a                	je     c0016fe4 <Vm::faultHandler(regs*)+0x310>
c0016fba:	8b 10                	mov    edx,DWORD PTR [eax]
c0016fbc:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016fc2:	81 ca 00 02 02 00    	or     edx,0x20200
c0016fc8:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016fcb:	8b 00                	mov    eax,DWORD PTR [eax]
c0016fcd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016fd3:	c1 e8 09             	shr    eax,0x9
c0016fd6:	83 e0 01             	and    eax,0x1
c0016fd9:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016fdc:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016fdf:	83 c0 04             	add    eax,0x4
c0016fe2:	eb 24                	jmp    c0017008 <Vm::faultHandler(regs*)+0x334>
c0016fe4:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0016fe7:	81 ca 00 02 02 00    	or     edx,0x20200
c0016fed:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016ff0:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0016ff3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016ff9:	c1 e8 09             	shr    eax,0x9
c0016ffc:	83 e0 01             	and    eax,0x1
c0016fff:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017002:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017005:	83 c0 02             	add    eax,0x2
c0017008:	25 ff ff 00 00       	and    eax,0xffff
c001700d:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0017010:	e9 7a 03 00 00       	jmp    c001738f <Vm::faultHandler(regs*)+0x6bb>
c0017015:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017019:	3d ee 00 00 00       	cmp    eax,0xee
c001701e:	75 10                	jne    c0017030 <Vm::faultHandler(regs*)+0x35c>
c0017020:	83 ec 0c             	sub    esp,0xc
c0017023:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0017026:	e8 52 f8 ff ff       	call   c001687d <Vm::mainloop3(unsigned long)>
c001702b:	e9 4a 03 00 00       	jmp    c001737a <Vm::faultHandler(regs*)+0x6a6>
c0017030:	83 ec 0c             	sub    esp,0xc
c0017033:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017037:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001703b:	51                   	push   ecx
c001703c:	50                   	push   eax
c001703d:	53                   	push   ebx
c001703e:	e8 80 fb ff ff       	call   c0016bc3 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0017043:	83 c4 20             	add    esp,0x20
c0017046:	e9 47 03 00 00       	jmp    c0017392 <Vm::faultHandler(regs*)+0x6be>
c001704b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017050:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0017054:	e9 36 03 00 00       	jmp    c001738f <Vm::faultHandler(regs*)+0x6bb>
c0017059:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001705e:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0017062:	e9 28 03 00 00       	jmp    c001738f <Vm::faultHandler(regs*)+0x6bb>
c0017067:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001706c:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001706f:	74 2b                	je     c001709c <Vm::faultHandler(regs*)+0x3c8>
c0017071:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0017078:	76 22                	jbe    c001709c <Vm::faultHandler(regs*)+0x3c8>
c001707a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001707e:	50                   	push   eax
c001707f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017083:	50                   	push   eax
c0017084:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017088:	50                   	push   eax
c0017089:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001708d:	50                   	push   eax
c001708e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017092:	50                   	push   eax
c0017093:	6a 6c                	push   0x6c
c0017095:	6a 6c                	push   0x6c
c0017097:	e9 c0 01 00 00       	jmp    c001725c <Vm::faultHandler(regs*)+0x588>
c001709c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00170a0:	83 ec 0c             	sub    esp,0xc
c00170a3:	0f b7 f6             	movzx  esi,si
c00170a6:	50                   	push   eax
c00170a7:	e8 21 f7 ff ff       	call   c00167cd <Vm::inbv(unsigned short)>
c00170ac:	83 c4 0c             	add    esp,0xc
c00170af:	0f b6 c0             	movzx  eax,al
c00170b2:	50                   	push   eax
c00170b3:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00170b7:	50                   	push   eax
c00170b8:	56                   	push   esi
c00170b9:	e8 d6 fb ff ff       	call   c0016c94 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00170be:	83 c4 10             	add    esp,0x10
c00170c1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00170c4:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00170c8:	74 03                	je     c00170cd <Vm::faultHandler(regs*)+0x3f9>
c00170ca:	48                   	dec    eax
c00170cb:	eb 01                	jmp    c00170ce <Vm::faultHandler(regs*)+0x3fa>
c00170cd:	40                   	inc    eax
c00170ce:	0f b7 c0             	movzx  eax,ax
c00170d1:	e9 8e 00 00 00       	jmp    c0017164 <Vm::faultHandler(regs*)+0x490>
c00170d6:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00170db:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00170de:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00170e1:	74 29                	je     c001710c <Vm::faultHandler(regs*)+0x438>
c00170e3:	3d ff ff 00 00       	cmp    eax,0xffff
c00170e8:	76 22                	jbe    c001710c <Vm::faultHandler(regs*)+0x438>
c00170ea:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00170ee:	50                   	push   eax
c00170ef:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00170f3:	50                   	push   eax
c00170f4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00170f8:	50                   	push   eax
c00170f9:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00170fd:	50                   	push   eax
c00170fe:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017102:	50                   	push   eax
c0017103:	6a 6d                	push   0x6d
c0017105:	6a 6d                	push   0x6d
c0017107:	e9 50 01 00 00       	jmp    c001725c <Vm::faultHandler(regs*)+0x588>
c001710c:	83 e5 01             	and    ebp,0x1
c001710f:	0f b7 c8             	movzx  ecx,ax
c0017112:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017115:	0f b7 f6             	movzx  esi,si
c0017118:	74 1e                	je     c0017138 <Vm::faultHandler(regs*)+0x464>
c001711a:	ed                   	in     eax,dx
c001711b:	55                   	push   ebp
c001711c:	50                   	push   eax
c001711d:	51                   	push   ecx
c001711e:	56                   	push   esi
c001711f:	e8 9b fb ff ff       	call   c0016cbf <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0017124:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017127:	83 c4 10             	add    esp,0x10
c001712a:	8d 50 04             	lea    edx,[eax+0x4]
c001712d:	83 e8 04             	sub    eax,0x4
c0017130:	81 e2 ff ff 00 00    	and    edx,0xffff
c0017136:	eb 20                	jmp    c0017158 <Vm::faultHandler(regs*)+0x484>
c0017138:	66 ed                	in     ax,dx
c001713a:	57                   	push   edi
c001713b:	0f b7 c0             	movzx  eax,ax
c001713e:	50                   	push   eax
c001713f:	51                   	push   ecx
c0017140:	56                   	push   esi
c0017141:	e8 63 fb ff ff       	call   c0016ca9 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0017146:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017149:	83 c4 10             	add    esp,0x10
c001714c:	8d 50 02             	lea    edx,[eax+0x2]
c001714f:	83 e8 02             	sub    eax,0x2
c0017152:	81 e2 ff ff 00 00    	and    edx,0xffff
c0017158:	25 ff ff 00 00       	and    eax,0xffff
c001715d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017161:	0f 44 c2             	cmove  eax,edx
c0017164:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0017167:	e9 23 02 00 00       	jmp    c001738f <Vm::faultHandler(regs*)+0x6bb>
c001716c:	8d 46 ff             	lea    eax,[esi-0x1]
c001716f:	0f b6 f0             	movzx  esi,al
c0017172:	83 fe 05             	cmp    esi,0x5
c0017175:	77 23                	ja     c001719a <Vm::faultHandler(regs*)+0x4c6>
c0017177:	ff 24 b5 4c 26 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd9b4]
c001717e:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0017183:	eb 15                	jmp    c001719a <Vm::faultHandler(regs*)+0x4c6>
c0017185:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0017189:	eb 0f                	jmp    c001719a <Vm::faultHandler(regs*)+0x4c6>
c001718b:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001718f:	eb 09                	jmp    c001719a <Vm::faultHandler(regs*)+0x4c6>
c0017191:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0017195:	eb 03                	jmp    c001719a <Vm::faultHandler(regs*)+0x4c6>
c0017197:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001719a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001719f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00171a2:	74 29                	je     c00171cd <Vm::faultHandler(regs*)+0x4f9>
c00171a4:	3d ff ff 00 00       	cmp    eax,0xffff
c00171a9:	76 22                	jbe    c00171cd <Vm::faultHandler(regs*)+0x4f9>
c00171ab:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00171af:	50                   	push   eax
c00171b0:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00171b4:	50                   	push   eax
c00171b5:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00171b9:	50                   	push   eax
c00171ba:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00171be:	50                   	push   eax
c00171bf:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00171c3:	50                   	push   eax
c00171c4:	6a 6e                	push   0x6e
c00171c6:	6a 6e                	push   0x6e
c00171c8:	e9 8f 00 00 00       	jmp    c001725c <Vm::faultHandler(regs*)+0x588>
c00171cd:	52                   	push   edx
c00171ce:	0f b7 c0             	movzx  eax,ax
c00171d1:	52                   	push   edx
c00171d2:	50                   	push   eax
c00171d3:	57                   	push   edi
c00171d4:	e8 87 fa ff ff       	call   c0016c60 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00171d9:	59                   	pop    ecx
c00171da:	5e                   	pop    esi
c00171db:	0f b6 c0             	movzx  eax,al
c00171de:	50                   	push   eax
c00171df:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00171e3:	50                   	push   eax
c00171e4:	e8 f7 f5 ff ff       	call   c00167e0 <Vm::outbv(unsigned short, unsigned char)>
c00171e9:	83 c4 10             	add    esp,0x10
c00171ec:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00171ef:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00171f3:	74 03                	je     c00171f8 <Vm::faultHandler(regs*)+0x524>
c00171f5:	48                   	dec    eax
c00171f6:	eb 01                	jmp    c00171f9 <Vm::faultHandler(regs*)+0x525>
c00171f8:	40                   	inc    eax
c00171f9:	0f b7 c0             	movzx  eax,ax
c00171fc:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00171ff:	e9 8b 01 00 00       	jmp    c001738f <Vm::faultHandler(regs*)+0x6bb>
c0017204:	8d 46 ff             	lea    eax,[esi-0x1]
c0017207:	0f b6 f0             	movzx  esi,al
c001720a:	83 fe 05             	cmp    esi,0x5
c001720d:	77 1e                	ja     c001722d <Vm::faultHandler(regs*)+0x559>
c001720f:	ff 24 b5 64 26 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd99c]
c0017216:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001721a:	eb 11                	jmp    c001722d <Vm::faultHandler(regs*)+0x559>
c001721c:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001721f:	eb 0c                	jmp    c001722d <Vm::faultHandler(regs*)+0x559>
c0017221:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0017224:	eb 07                	jmp    c001722d <Vm::faultHandler(regs*)+0x559>
c0017226:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0017229:	eb 02                	jmp    c001722d <Vm::faultHandler(regs*)+0x559>
c001722b:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001722d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017232:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0017235:	74 37                	je     c001726e <Vm::faultHandler(regs*)+0x59a>
c0017237:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001723d:	76 2f                	jbe    c001726e <Vm::faultHandler(regs*)+0x59a>
c001723f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017243:	50                   	push   eax
c0017244:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017248:	50                   	push   eax
c0017249:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001724d:	50                   	push   eax
c001724e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017252:	50                   	push   eax
c0017253:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017257:	50                   	push   eax
c0017258:	6a 6f                	push   0x6f
c001725a:	6a 6f                	push   0x6f
c001725c:	68 f0 25 02 c0       	push   0xc00225f0
c0017261:	e8 a4 36 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017266:	83 c4 20             	add    esp,0x20
c0017269:	e9 86 01 00 00       	jmp    c00173f4 <Vm::faultHandler(regs*)+0x720>
c001726e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017271:	0f b7 d7             	movzx  edx,di
c0017274:	0f b7 c6             	movzx  eax,si
c0017277:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001727a:	81 e1 00 04 00 00    	and    ecx,0x400
c0017280:	83 e5 01             	and    ebp,0x1
c0017283:	74 1c                	je     c00172a1 <Vm::faultHandler(regs*)+0x5cd>
c0017285:	55                   	push   ebp
c0017286:	55                   	push   ebp
c0017287:	50                   	push   eax
c0017288:	52                   	push   edx
c0017289:	e8 f5 f9 ff ff       	call   c0016c83 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001728e:	83 c4 10             	add    esp,0x10
c0017291:	89 fa                	mov    edx,edi
c0017293:	ef                   	out    dx,eax
c0017294:	8d 46 04             	lea    eax,[esi+0x4]
c0017297:	83 ee 04             	sub    esi,0x4
c001729a:	25 ff ff 00 00       	and    eax,0xffff
c001729f:	eb 1b                	jmp    c00172bc <Vm::faultHandler(regs*)+0x5e8>
c00172a1:	55                   	push   ebp
c00172a2:	55                   	push   ebp
c00172a3:	50                   	push   eax
c00172a4:	52                   	push   edx
c00172a5:	e8 c7 f9 ff ff       	call   c0016c71 <Vm::readWordFromReal(unsigned short, unsigned short)>
c00172aa:	83 c4 10             	add    esp,0x10
c00172ad:	89 fa                	mov    edx,edi
c00172af:	66 ef                	out    dx,ax
c00172b1:	8d 46 02             	lea    eax,[esi+0x2]
c00172b4:	83 ee 02             	sub    esi,0x2
c00172b7:	25 ff ff 00 00       	and    eax,0xffff
c00172bc:	81 e6 ff ff 00 00    	and    esi,0xffff
c00172c2:	85 c9                	test   ecx,ecx
c00172c4:	0f 44 f0             	cmove  esi,eax
c00172c7:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00172ca:	e9 c0 00 00 00       	jmp    c001738f <Vm::faultHandler(regs*)+0x6bb>
c00172cf:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00172d6:	83 ec 0c             	sub    esp,0xc
c00172d9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00172dd:	50                   	push   eax
c00172de:	e8 ea f4 ff ff       	call   c00167cd <Vm::inbv(unsigned short)>
c00172e3:	0f b6 c0             	movzx  eax,al
c00172e6:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00172e9:	eb 3a                	jmp    c0017325 <Vm::faultHandler(regs*)+0x651>
c00172eb:	83 e5 01             	and    ebp,0x1
c00172ee:	74 07                	je     c00172f7 <Vm::faultHandler(regs*)+0x623>
c00172f0:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00172f4:	ed                   	in     eax,dx
c00172f5:	eb 14                	jmp    c001730b <Vm::faultHandler(regs*)+0x637>
c00172f7:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00172fa:	66 31 f6             	xor    si,si
c00172fd:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0017300:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017304:	66 ed                	in     ax,dx
c0017306:	0f b7 c0             	movzx  eax,ax
c0017309:	09 f0                	or     eax,esi
c001730b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001730e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017312:	eb 7e                	jmp    c0017392 <Vm::faultHandler(regs*)+0x6be>
c0017314:	52                   	push   edx
c0017315:	52                   	push   edx
c0017316:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001731a:	50                   	push   eax
c001731b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001731f:	50                   	push   eax
c0017320:	e8 bb f4 ff ff       	call   c00167e0 <Vm::outbv(unsigned short, unsigned char)>
c0017325:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017329:	eb 4f                	jmp    c001737a <Vm::faultHandler(regs*)+0x6a6>
c001732b:	83 e5 01             	and    ebp,0x1
c001732e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017331:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017335:	74 03                	je     c001733a <Vm::faultHandler(regs*)+0x666>
c0017337:	ef                   	out    dx,eax
c0017338:	eb d4                	jmp    c001730e <Vm::faultHandler(regs*)+0x63a>
c001733a:	66 ef                	out    dx,ax
c001733c:	eb d0                	jmp    c001730e <Vm::faultHandler(regs*)+0x63a>
c001733e:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017342:	83 ec 0c             	sub    esp,0xc
c0017345:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001734c:	50                   	push   eax
c001734d:	e8 7b f4 ff ff       	call   c00167cd <Vm::inbv(unsigned short)>
c0017352:	0f b6 c0             	movzx  eax,al
c0017355:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017358:	eb 1d                	jmp    c0017377 <Vm::faultHandler(regs*)+0x6a3>
c001735a:	83 e5 01             	and    ebp,0x1
c001735d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017360:	74 03                	je     c0017365 <Vm::faultHandler(regs*)+0x691>
c0017362:	ed                   	in     eax,dx
c0017363:	eb 0d                	jmp    c0017372 <Vm::faultHandler(regs*)+0x69e>
c0017365:	66 ed                	in     ax,dx
c0017367:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001736a:	0f b7 c0             	movzx  eax,ax
c001736d:	66 31 d2             	xor    dx,dx
c0017370:	09 d0                	or     eax,edx
c0017372:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017375:	eb 18                	jmp    c001738f <Vm::faultHandler(regs*)+0x6bb>
c0017377:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001737a:	83 c4 10             	add    esp,0x10
c001737d:	eb 13                	jmp    c0017392 <Vm::faultHandler(regs*)+0x6be>
c001737f:	83 e5 01             	and    ebp,0x1
c0017382:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017385:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017388:	74 03                	je     c001738d <Vm::faultHandler(regs*)+0x6b9>
c001738a:	ef                   	out    dx,eax
c001738b:	eb 02                	jmp    c001738f <Vm::faultHandler(regs*)+0x6bb>
c001738d:	66 ef                	out    dx,ax
c001738f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017392:	b0 01                	mov    al,0x1
c0017394:	eb 60                	jmp    c00173f6 <Vm::faultHandler(regs*)+0x722>
c0017396:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001739a:	50                   	push   eax
c001739b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001739f:	50                   	push   eax
c00173a0:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00173a4:	50                   	push   eax
c00173a5:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00173a9:	50                   	push   eax
c00173aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00173ae:	50                   	push   eax
c00173af:	52                   	push   edx
c00173b0:	52                   	push   edx
c00173b1:	68 1d 26 02 c0       	push   0xc002261d
c00173b6:	e8 4f 35 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00173bb:	83 c4 20             	add    esp,0x20
c00173be:	83 ec 0c             	sub    esp,0xc
c00173c1:	6a 60                	push   0x60
c00173c3:	e8 05 f4 ff ff       	call   c00167cd <Vm::inbv(unsigned short)>
c00173c8:	83 c4 10             	add    esp,0x10
c00173cb:	0f b6 d0             	movzx  edx,al
c00173ce:	83 fa 1c             	cmp    edx,0x1c
c00173d1:	74 05                	je     c00173d8 <Vm::faultHandler(regs*)+0x704>
c00173d3:	83 fa 5a             	cmp    edx,0x5a
c00173d6:	75 e6                	jne    c00173be <Vm::faultHandler(regs*)+0x6ea>
c00173d8:	0f b6 c0             	movzx  eax,al
c00173db:	83 f8 1c             	cmp    eax,0x1c
c00173de:	74 05                	je     c00173e5 <Vm::faultHandler(regs*)+0x711>
c00173e0:	83 f8 5a             	cmp    eax,0x5a
c00173e3:	75 0f                	jne    c00173f4 <Vm::faultHandler(regs*)+0x720>
c00173e5:	83 ec 0c             	sub    esp,0xc
c00173e8:	6a 60                	push   0x60
c00173ea:	e8 de f3 ff ff       	call   c00167cd <Vm::inbv(unsigned short)>
c00173ef:	83 c4 10             	add    esp,0x10
c00173f2:	eb e4                	jmp    c00173d8 <Vm::faultHandler(regs*)+0x704>
c00173f4:	31 c0                	xor    eax,eax
c00173f6:	83 c4 2c             	add    esp,0x2c
c00173f9:	5b                   	pop    ebx
c00173fa:	5e                   	pop    esi
c00173fb:	5f                   	pop    edi
c00173fc:	5d                   	pop    ebp
c00173fd:	c3                   	ret    

c00173fe <noCopro(unsigned long)>:
c00173fe:	c3                   	ret    

c00173ff <nmiHandler(regs*, void*)>:
c00173ff:	83 ec 0c             	sub    esp,0xc
c0017402:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017407:	83 ec 0c             	sub    esp,0xc
c001740a:	50                   	push   eax
c001740b:	e8 c6 fe fe ff       	call   c00072d6 <Computer::handleNMI()>
c0017410:	83 c4 10             	add    esp,0x10
c0017413:	90                   	nop
c0017414:	83 c4 0c             	add    esp,0xc
c0017417:	c3                   	ret    

c0017418 <doubleFault(regs*, void*)>:
c0017418:	55                   	push   ebp
c0017419:	89 e5                	mov    ebp,esp
c001741b:	83 ec 08             	sub    esp,0x8
c001741e:	83 ec 0c             	sub    esp,0xc
c0017421:	68 7c 26 02 c0       	push   0xc002267c
c0017426:	e8 de 9e ff ff       	call   c0011309 <KePanic(char const*)>
c001742b:	83 c4 10             	add    esp,0x10
c001742e:	90                   	nop
c001742f:	c9                   	leave  
c0017430:	c3                   	ret    

c0017431 <displayDebugInfo(regs*)>:
c0017431:	83 ec 1c             	sub    esp,0x1c
c0017434:	0f 20 c0             	mov    eax,cr0
c0017437:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001743b:	0f 20 d0             	mov    eax,cr2
c001743e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017442:	0f 20 d8             	mov    eax,cr3
c0017445:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017449:	0f 20 e0             	mov    eax,cr4
c001744c:	89 04 24             	mov    DWORD PTR [esp],eax
c001744f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017453:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0017456:	83 ec 08             	sub    esp,0x8
c0017459:	50                   	push   eax
c001745a:	68 98 26 02 c0       	push   0xc0022698
c001745f:	e8 a6 34 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017464:	83 c4 10             	add    esp,0x10
c0017467:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001746b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001746e:	83 ec 08             	sub    esp,0x8
c0017471:	50                   	push   eax
c0017472:	68 89 26 02 c0       	push   0xc0022689
c0017477:	e8 8e 34 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001747c:	83 c4 10             	add    esp,0x10
c001747f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017483:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017486:	83 ec 08             	sub    esp,0x8
c0017489:	50                   	push   eax
c001748a:	68 94 26 02 c0       	push   0xc0022694
c001748f:	e8 76 34 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017494:	83 c4 10             	add    esp,0x10
c0017497:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001749b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001749e:	83 ec 08             	sub    esp,0x8
c00174a1:	50                   	push   eax
c00174a2:	68 a3 26 02 c0       	push   0xc00226a3
c00174a7:	e8 5e 34 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00174ac:	83 c4 10             	add    esp,0x10
c00174af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00174b3:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00174b6:	83 ec 08             	sub    esp,0x8
c00174b9:	50                   	push   eax
c00174ba:	68 ae 26 02 c0       	push   0xc00226ae
c00174bf:	e8 46 34 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00174c4:	83 c4 10             	add    esp,0x10
c00174c7:	83 ec 08             	sub    esp,0x8
c00174ca:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00174ce:	68 b9 26 02 c0       	push   0xc00226b9
c00174d3:	e8 32 34 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00174d8:	83 c4 10             	add    esp,0x10
c00174db:	83 ec 08             	sub    esp,0x8
c00174de:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00174e2:	68 c4 26 02 c0       	push   0xc00226c4
c00174e7:	e8 1e 34 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00174ec:	83 c4 10             	add    esp,0x10
c00174ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00174f3:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00174f6:	c1 e0 05             	shl    eax,0x5
c00174f9:	8d 90 40 36 02 c0    	lea    edx,[eax-0x3ffdc9c0]
c00174ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017503:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017506:	83 ec 04             	sub    esp,0x4
c0017509:	52                   	push   edx
c001750a:	50                   	push   eax
c001750b:	68 cf 26 02 c0       	push   0xc00226cf
c0017510:	e8 f5 33 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017515:	83 c4 10             	add    esp,0x10
c0017518:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001751d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017523:	83 ec 0c             	sub    esp,0xc
c0017526:	50                   	push   eax
c0017527:	e8 43 12 ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c001752c:	83 c4 10             	add    esp,0x10
c001752f:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017534:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001753a:	83 ec 08             	sub    esp,0x8
c001753d:	68 de 26 02 c0       	push   0xc00226de
c0017542:	50                   	push   eax
c0017543:	e8 64 15 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017548:	83 c4 10             	add    esp,0x10
c001754b:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017550:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017556:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001755a:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c001755d:	83 ec 08             	sub    esp,0x8
c0017560:	52                   	push   edx
c0017561:	50                   	push   eax
c0017562:	e8 ff 14 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017567:	83 c4 10             	add    esp,0x10
c001756a:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001756f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017575:	83 ec 08             	sub    esp,0x8
c0017578:	68 ec 26 02 c0       	push   0xc00226ec
c001757d:	50                   	push   eax
c001757e:	e8 29 15 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017583:	83 c4 10             	add    esp,0x10
c0017586:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001758b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017591:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0017596:	8b 12                	mov    edx,DWORD PTR [edx]
c0017598:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001759b:	83 c2 0c             	add    edx,0xc
c001759e:	83 ec 08             	sub    esp,0x8
c00175a1:	52                   	push   edx
c00175a2:	50                   	push   eax
c00175a3:	e8 04 15 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00175a8:	83 c4 10             	add    esp,0x10
c00175ab:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175b0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175b6:	83 ec 08             	sub    esp,0x8
c00175b9:	68 f5 26 02 c0       	push   0xc00226f5
c00175be:	50                   	push   eax
c00175bf:	e8 e8 14 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00175c4:	83 c4 10             	add    esp,0x10
c00175c7:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175cc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175d2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00175d6:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c00175d9:	83 ec 08             	sub    esp,0x8
c00175dc:	52                   	push   edx
c00175dd:	50                   	push   eax
c00175de:	e8 83 14 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00175e3:	83 c4 10             	add    esp,0x10
c00175e6:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175eb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175f1:	83 ec 08             	sub    esp,0x8
c00175f4:	68 fd 26 02 c0       	push   0xc00226fd
c00175f9:	50                   	push   eax
c00175fa:	e8 ad 14 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00175ff:	83 c4 10             	add    esp,0x10
c0017602:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017607:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001760d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017611:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0017614:	83 ec 08             	sub    esp,0x8
c0017617:	52                   	push   edx
c0017618:	50                   	push   eax
c0017619:	e8 48 14 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c001761e:	83 c4 10             	add    esp,0x10
c0017621:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017626:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001762c:	83 ec 08             	sub    esp,0x8
c001762f:	68 05 27 02 c0       	push   0xc0022705
c0017634:	50                   	push   eax
c0017635:	e8 72 14 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001763a:	83 c4 10             	add    esp,0x10
c001763d:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017642:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017648:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001764c:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c001764f:	83 ec 08             	sub    esp,0x8
c0017652:	52                   	push   edx
c0017653:	50                   	push   eax
c0017654:	e8 0d 14 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017659:	83 c4 10             	add    esp,0x10
c001765c:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017661:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017667:	83 ec 08             	sub    esp,0x8
c001766a:	68 0d 27 02 c0       	push   0xc002270d
c001766f:	50                   	push   eax
c0017670:	e8 37 14 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017675:	83 c4 10             	add    esp,0x10
c0017678:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001767d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017683:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017687:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001768a:	83 ec 08             	sub    esp,0x8
c001768d:	52                   	push   edx
c001768e:	50                   	push   eax
c001768f:	e8 d2 13 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017694:	83 c4 10             	add    esp,0x10
c0017697:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001769c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176a2:	83 ec 08             	sub    esp,0x8
c00176a5:	68 15 27 02 c0       	push   0xc0022715
c00176aa:	50                   	push   eax
c00176ab:	e8 fc 13 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00176b0:	83 c4 10             	add    esp,0x10
c00176b3:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176b8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176be:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00176c2:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c00176c5:	83 ec 08             	sub    esp,0x8
c00176c8:	52                   	push   edx
c00176c9:	50                   	push   eax
c00176ca:	e8 97 13 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00176cf:	83 c4 10             	add    esp,0x10
c00176d2:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176d7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176dd:	83 ec 08             	sub    esp,0x8
c00176e0:	68 1d 27 02 c0       	push   0xc002271d
c00176e5:	50                   	push   eax
c00176e6:	e8 c1 13 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00176eb:	83 c4 10             	add    esp,0x10
c00176ee:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176f3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176f9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00176fd:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017700:	83 ec 08             	sub    esp,0x8
c0017703:	52                   	push   edx
c0017704:	50                   	push   eax
c0017705:	e8 5c 13 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c001770a:	83 c4 10             	add    esp,0x10
c001770d:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017712:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017718:	83 ec 08             	sub    esp,0x8
c001771b:	68 25 27 02 c0       	push   0xc0022725
c0017720:	50                   	push   eax
c0017721:	e8 86 13 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017726:	83 c4 10             	add    esp,0x10
c0017729:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001772e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017734:	83 ec 08             	sub    esp,0x8
c0017737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001773b:	50                   	push   eax
c001773c:	e8 25 13 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017741:	83 c4 10             	add    esp,0x10
c0017744:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017749:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001774f:	83 ec 08             	sub    esp,0x8
c0017752:	68 2e 27 02 c0       	push   0xc002272e
c0017757:	50                   	push   eax
c0017758:	e8 4f 13 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001775d:	83 c4 10             	add    esp,0x10
c0017760:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017765:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001776b:	83 ec 08             	sub    esp,0x8
c001776e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017772:	50                   	push   eax
c0017773:	e8 ee 12 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017778:	83 c4 10             	add    esp,0x10
c001777b:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017780:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017786:	83 ec 08             	sub    esp,0x8
c0017789:	68 36 27 02 c0       	push   0xc0022736
c001778e:	50                   	push   eax
c001778f:	e8 18 13 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017794:	83 c4 10             	add    esp,0x10
c0017797:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001779c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00177a2:	83 ec 08             	sub    esp,0x8
c00177a5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00177a9:	50                   	push   eax
c00177aa:	e8 b7 12 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00177af:	83 c4 10             	add    esp,0x10
c00177b2:	fa                   	cli    
c00177b3:	f4                   	hlt    
c00177b4:	eb fe                	jmp    c00177b4 <displayDebugInfo(regs*)+0x383>

c00177b6 <HalSystemIdle()>:
c00177b6:	56                   	push   esi
c00177b7:	53                   	push   ebx
c00177b8:	83 ec 14             	sub    esp,0x14
c00177bb:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00177c0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00177c6:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c00177cc:	83 e0 04             	and    eax,0x4
c00177cf:	0f b6 c0             	movzx  eax,al
c00177d2:	85 c0                	test   eax,eax
c00177d4:	0f 95 c0             	setne  al
c00177d7:	0f b6 c0             	movzx  eax,al
c00177da:	85 c0                	test   eax,eax
c00177dc:	74 4c                	je     c001782a <HalSystemIdle()+0x74>
c00177de:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00177e3:	83 ec 08             	sub    esp,0x8
c00177e6:	68 e1 00 00 00       	push   0xe1
c00177eb:	50                   	push   eax
c00177ec:	e8 f1 f8 fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c00177f1:	83 c4 10             	add    esp,0x10
c00177f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00177f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00177fc:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017801:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017805:	83 e2 02             	and    edx,0x2
c0017808:	89 d3                	mov    ebx,edx
c001780a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001780e:	83 e2 00             	and    edx,0x0
c0017811:	89 d6                	mov    esi,edx
c0017813:	56                   	push   esi
c0017814:	53                   	push   ebx
c0017815:	68 e1 00 00 00       	push   0xe1
c001781a:	50                   	push   eax
c001781b:	e8 ee f8 fe ff       	call   c000710e <Computer::wrmsr(unsigned int, unsigned long long)>
c0017820:	83 c4 10             	add    esp,0x10
c0017823:	e8 6c 89 fe ff       	call   c0000194 <doTPAUSE>
c0017828:	eb 01                	jmp    c001782b <HalSystemIdle()+0x75>
c001782a:	f4                   	hlt    
c001782b:	90                   	nop
c001782c:	83 c4 14             	add    esp,0x14
c001782f:	5b                   	pop    ebx
c0017830:	5e                   	pop    esi
c0017831:	c3                   	ret    

c0017832 <displayProgramFault(char const*)>:
c0017832:	83 ec 0c             	sub    esp,0xc
c0017835:	83 ec 0c             	sub    esp,0xc
c0017838:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001783c:	e8 c9 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017841:	83 c4 10             	add    esp,0x10
c0017844:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017849:	8b 00                	mov    eax,DWORD PTR [eax]
c001784b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001784e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017854:	85 c0                	test   eax,eax
c0017856:	74 21                	je     c0017879 <displayProgramFault(char const*)+0x47>
c0017858:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001785d:	8b 00                	mov    eax,DWORD PTR [eax]
c001785f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017862:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017868:	6a 04                	push   0x4
c001786a:	6a 0f                	push   0xf
c001786c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017870:	50                   	push   eax
c0017871:	e8 a8 12 ff ff       	call   c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017876:	83 c4 10             	add    esp,0x10
c0017879:	90                   	nop
c001787a:	83 c4 0c             	add    esp,0xc
c001787d:	c3                   	ret    

c001787e <gpFault(regs*, void*)>:
c001787e:	83 ec 1c             	sub    esp,0x1c
c0017881:	c7 05 74 97 02 c0 d4 6c 01 c0 	mov    DWORD PTR ds:0xc0029774,0xc0016cd4
c001788b:	a1 74 97 02 c0       	mov    eax,ds:0xc0029774
c0017890:	85 c0                	test   eax,eax
c0017892:	74 1e                	je     c00178b2 <gpFault(regs*, void*)+0x34>
c0017894:	a1 74 97 02 c0       	mov    eax,ds:0xc0029774
c0017899:	83 ec 0c             	sub    esp,0xc
c001789c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00178a0:	ff d0                	call   eax
c00178a2:	83 c4 10             	add    esp,0x10
c00178a5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00178a9:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00178ae:	85 c0                	test   eax,eax
c00178b0:	75 2e                	jne    c00178e0 <gpFault(regs*, void*)+0x62>
c00178b2:	83 ec 0c             	sub    esp,0xc
c00178b5:	68 3e 27 02 c0       	push   0xc002273e
c00178ba:	e8 73 ff ff ff       	call   c0017832 <displayProgramFault(char const*)>
c00178bf:	83 c4 10             	add    esp,0x10
c00178c2:	83 ec 0c             	sub    esp,0xc
c00178c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00178c9:	e8 63 fb ff ff       	call   c0017431 <displayDebugInfo(regs*)>
c00178ce:	83 c4 10             	add    esp,0x10
c00178d1:	83 ec 0c             	sub    esp,0xc
c00178d4:	6a 00                	push   0x0
c00178d6:	e8 99 ed ff ff       	call   c0016674 <Thr::terminateFromIRQ(int)>
c00178db:	83 c4 10             	add    esp,0x10
c00178de:	eb 01                	jmp    c00178e1 <gpFault(regs*, void*)+0x63>
c00178e0:	90                   	nop
c00178e1:	83 c4 1c             	add    esp,0x1c
c00178e4:	c3                   	ret    

c00178e5 <pgFault(regs*, void*)>:
c00178e5:	83 ec 1c             	sub    esp,0x1c
c00178e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178ec:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00178ef:	0f 20 d0             	mov    eax,cr2
c00178f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00178f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00178fa:	83 ec 04             	sub    esp,0x4
c00178fd:	52                   	push   edx
c00178fe:	50                   	push   eax
c00178ff:	68 1c 28 02 c0       	push   0xc002281c
c0017904:	e8 01 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017909:	83 c4 10             	add    esp,0x10
c001790c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017911:	8b 00                	mov    eax,DWORD PTR [eax]
c0017913:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017916:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c001791c:	0f 20 d2             	mov    edx,cr2
c001791f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017923:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017927:	83 ec 08             	sub    esp,0x8
c001792a:	52                   	push   edx
c001792b:	50                   	push   eax
c001792c:	e8 49 2a ff ff       	call   c000a37a <VAS::tryLoadBackOffDisk(unsigned long)>
c0017931:	83 c4 10             	add    esp,0x10
c0017934:	0f b6 c0             	movzx  eax,al
c0017937:	85 c0                	test   eax,eax
c0017939:	75 2e                	jne    c0017969 <pgFault(regs*, void*)+0x84>
c001793b:	83 ec 0c             	sub    esp,0xc
c001793e:	68 57 27 02 c0       	push   0xc0022757
c0017943:	e8 ea fe ff ff       	call   c0017832 <displayProgramFault(char const*)>
c0017948:	83 c4 10             	add    esp,0x10
c001794b:	83 ec 0c             	sub    esp,0xc
c001794e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017952:	e8 da fa ff ff       	call   c0017431 <displayDebugInfo(regs*)>
c0017957:	83 c4 10             	add    esp,0x10
c001795a:	83 ec 0c             	sub    esp,0xc
c001795d:	6a 00                	push   0x0
c001795f:	e8 10 ed ff ff       	call   c0016674 <Thr::terminateFromIRQ(int)>
c0017964:	83 c4 10             	add    esp,0x10
c0017967:	eb 01                	jmp    c001796a <pgFault(regs*, void*)+0x85>
c0017969:	90                   	nop
c001796a:	83 c4 1c             	add    esp,0x1c
c001796d:	c3                   	ret    

c001796e <otherISRHandler(regs*, void*)>:
c001796e:	83 ec 0c             	sub    esp,0xc
c0017971:	83 ec 0c             	sub    esp,0xc
c0017974:	68 44 28 02 c0       	push   0xc0022844
c0017979:	e8 b4 fe ff ff       	call   c0017832 <displayProgramFault(char const*)>
c001797e:	83 c4 10             	add    esp,0x10
c0017981:	83 ec 0c             	sub    esp,0xc
c0017984:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017988:	e8 a4 fa ff ff       	call   c0017431 <displayDebugInfo(regs*)>
c001798d:	83 c4 10             	add    esp,0x10
c0017990:	83 ec 0c             	sub    esp,0xc
c0017993:	6a 00                	push   0x0
c0017995:	e8 da ec ff ff       	call   c0016674 <Thr::terminateFromIRQ(int)>
c001799a:	83 c4 10             	add    esp,0x10
c001799d:	90                   	nop
c001799e:	83 c4 0c             	add    esp,0xc
c00179a1:	c3                   	ret    

c00179a2 <opcodeFault(regs*, void*)>:
c00179a2:	55                   	push   ebp
c00179a3:	89 e5                	mov    ebp,esp
c00179a5:	83 ec 08             	sub    esp,0x8
c00179a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00179ab:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00179ae:	83 ec 08             	sub    esp,0x8
c00179b1:	50                   	push   eax
c00179b2:	68 62 27 02 c0       	push   0xc0022762
c00179b7:	e8 4e 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00179bc:	83 c4 10             	add    esp,0x10
c00179bf:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00179c4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00179ca:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00179d0:	0f b6 c0             	movzx  eax,al
c00179d3:	85 c0                	test   eax,eax
c00179d5:	74 21                	je     c00179f8 <opcodeFault(regs*, void*)+0x56>
c00179d7:	83 ec 0c             	sub    esp,0xc
c00179da:	68 6c 28 02 c0       	push   0xc002286c
c00179df:	e8 26 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00179e4:	83 c4 10             	add    esp,0x10
c00179e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00179ea:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00179ed:	8d 50 19             	lea    edx,[eax+0x19]
c00179f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00179f3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00179f6:	eb 2b                	jmp    c0017a23 <opcodeFault(regs*, void*)+0x81>
c00179f8:	83 ec 0c             	sub    esp,0xc
c00179fb:	68 70 27 02 c0       	push   0xc0022770
c0017a00:	e8 2d fe ff ff       	call   c0017832 <displayProgramFault(char const*)>
c0017a05:	83 c4 10             	add    esp,0x10
c0017a08:	83 ec 0c             	sub    esp,0xc
c0017a0b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017a0e:	e8 1e fa ff ff       	call   c0017431 <displayDebugInfo(regs*)>
c0017a13:	83 c4 10             	add    esp,0x10
c0017a16:	83 ec 0c             	sub    esp,0xc
c0017a19:	6a 00                	push   0x0
c0017a1b:	e8 54 ec ff ff       	call   c0016674 <Thr::terminateFromIRQ(int)>
c0017a20:	83 c4 10             	add    esp,0x10
c0017a23:	c9                   	leave  
c0017a24:	c3                   	ret    

c0017a25 <i386SaveCoprocessor(void*)>:
c0017a25:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a29:	83 c0 3f             	add    eax,0x3f
c0017a2c:	83 e0 c0             	and    eax,0xffffffc0
c0017a2f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017a33:	ff 25 70 97 02 c0    	jmp    DWORD PTR ds:0xc0029770

c0017a39 <i386LoadCoprocessor(void*)>:
c0017a39:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a3d:	83 c0 3f             	add    eax,0x3f
c0017a40:	83 e0 c0             	and    eax,0xffffffc0
c0017a43:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017a47:	ff 25 6c 97 02 c0    	jmp    DWORD PTR ds:0xc002976c

c0017a4d <x87EmulHandler(regs*, void*)>:
c0017a4d:	53                   	push   ebx
c0017a4e:	83 ec 08             	sub    esp,0x8
c0017a51:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017a56:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017a5a:	74 10                	je     c0017a6c <x87EmulHandler(regs*, void*)+0x1f>
c0017a5c:	83 ec 0c             	sub    esp,0xc
c0017a5f:	68 7d 27 02 c0       	push   0xc002277d
c0017a64:	e8 a0 98 ff ff       	call   c0011309 <KePanic(char const*)>
c0017a69:	83 c4 10             	add    esp,0x10
c0017a6c:	0f 20 c0             	mov    eax,cr0
c0017a6f:	a8 08                	test   al,0x8
c0017a71:	74 59                	je     c0017acc <x87EmulHandler(regs*, void*)+0x7f>
c0017a73:	0f 06                	clts   
c0017a75:	a1 68 97 02 c0       	mov    eax,ds:0xc0029768
c0017a7a:	85 c0                	test   eax,eax
c0017a7c:	74 0e                	je     c0017a8c <x87EmulHandler(regs*, void*)+0x3f>
c0017a7e:	83 ec 0c             	sub    esp,0xc
c0017a81:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017a84:	e8 9c ff ff ff       	call   c0017a25 <i386SaveCoprocessor(void*)>
c0017a89:	83 c4 10             	add    esp,0x10
c0017a8c:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017a92:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0017a96:	75 12                	jne    c0017aaa <x87EmulHandler(regs*, void*)+0x5d>
c0017a98:	83 ec 0c             	sub    esp,0xc
c0017a9b:	68 40 02 00 00       	push   0x240
c0017aa0:	e8 2e 00 ff ff       	call   c0007ad3 <malloc>
c0017aa5:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0017aa8:	eb 10                	jmp    c0017aba <x87EmulHandler(regs*, void*)+0x6d>
c0017aaa:	a1 68 97 02 c0       	mov    eax,ds:0xc0029768
c0017aaf:	83 ec 0c             	sub    esp,0xc
c0017ab2:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017ab5:	e8 7f ff ff ff       	call   c0017a39 <i386LoadCoprocessor(void*)>
c0017aba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017abf:	83 c4 10             	add    esp,0x10
c0017ac2:	a3 68 97 02 c0       	mov    ds:0xc0029768,eax
c0017ac7:	83 c4 08             	add    esp,0x8
c0017aca:	5b                   	pop    ebx
c0017acb:	c3                   	ret    
c0017acc:	83 ec 0c             	sub    esp,0xc
c0017acf:	68 91 27 02 c0       	push   0xc0022791
c0017ad4:	e8 31 2e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017ad9:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017ae1:	83 c4 18             	add    esp,0x18
c0017ae4:	5b                   	pop    ebx
c0017ae5:	e9 8a eb ff ff       	jmp    c0016674 <Thr::terminateFromIRQ(int)>

c0017aea <HalInitialiseCoprocessor()>:
c0017aea:	83 ec 10             	sub    esp,0x10
c0017aed:	6a 00                	push   0x0
c0017aef:	68 4d 7a 01 c0       	push   0xc0017a4d
c0017af4:	6a 07                	push   0x7
c0017af6:	c7 05 68 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029768,0x0
c0017b00:	e8 9d 51 ff ff       	call   c000cca2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017b05:	e8 a6 70 00 00       	call   c001ebb0 <avxDetect>
c0017b0a:	83 c4 10             	add    esp,0x10
c0017b0d:	85 c0                	test   eax,eax
c0017b0f:	74 1c                	je     c0017b2d <HalInitialiseCoprocessor()+0x43>
c0017b11:	c7 05 70 97 02 c0 da eb 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001ebda
c0017b1b:	c7 05 6c 97 02 c0 eb eb 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001ebeb
c0017b25:	83 c4 0c             	add    esp,0xc
c0017b28:	e9 cf 70 00 00       	jmp    c001ebfc <avxInit>
c0017b2d:	e8 0e 74 00 00       	call   c001ef40 <absolutelyNoChanceInHell>
c0017b32:	85 c0                	test   eax,eax
c0017b34:	74 1c                	je     c0017b52 <HalInitialiseCoprocessor()+0x68>
c0017b36:	c7 05 70 97 02 c0 58 ef 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001ef58
c0017b40:	c7 05 6c 97 02 c0 60 ef 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001ef60
c0017b4a:	83 c4 0c             	add    esp,0xc
c0017b4d:	e9 16 74 00 00       	jmp    c001ef68 <sseInit>
c0017b52:	e8 2f 74 00 00       	call   c001ef86 <x87Detect>
c0017b57:	85 c0                	test   eax,eax
c0017b59:	74 1c                	je     c0017b77 <HalInitialiseCoprocessor()+0x8d>
c0017b5b:	c7 05 70 97 02 c0 a1 ef 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001efa1
c0017b65:	c7 05 6c 97 02 c0 a8 ef 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001efa8
c0017b6f:	83 c4 0c             	add    esp,0xc
c0017b72:	e9 38 74 00 00       	jmp    c001efaf <x87Init>
c0017b77:	c7 05 70 97 02 c0 fe 73 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc00173fe
c0017b81:	c7 05 6c 97 02 c0 fe 73 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc00173fe
c0017b8b:	0f 20 c0             	mov    eax,cr0
c0017b8e:	83 c8 04             	or     eax,0x4
c0017b91:	0f 22 c0             	mov    cr0,eax
c0017b94:	83 c4 0c             	add    esp,0xc
c0017b97:	c3                   	ret    

c0017b98 <HalPanic(char const*)>:
c0017b98:	53                   	push   ebx
c0017b99:	83 ec 10             	sub    esp,0x10
c0017b9c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017ba0:	fa                   	cli    
c0017ba1:	53                   	push   ebx
c0017ba2:	68 a7 27 02 c0       	push   0xc00227a7
c0017ba7:	e8 5e 2d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017bac:	a1 64 97 02 c0       	mov    eax,ds:0xc0029764
c0017bb1:	83 c4 10             	add    esp,0x10
c0017bb4:	85 c0                	test   eax,eax
c0017bb6:	74 09                	je     c0017bc1 <HalPanic(char const*)+0x29>
c0017bb8:	83 ec 0c             	sub    esp,0xc
c0017bbb:	53                   	push   ebx
c0017bbc:	ff d0                	call   eax
c0017bbe:	83 c4 10             	add    esp,0x10
c0017bc1:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c0017bc6:	85 c0                	test   eax,eax
c0017bc8:	0f 84 dc 00 00 00    	je     c0017caa <HalPanic(char const*)+0x112>
c0017bce:	52                   	push   edx
c0017bcf:	6a 01                	push   0x1
c0017bd1:	6a 0f                	push   0xf
c0017bd3:	50                   	push   eax
c0017bd4:	e8 f1 09 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017bd9:	59                   	pop    ecx
c0017bda:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017be0:	e8 d5 0b ff ff       	call   c00087ba <VgaText::clearScreen()>
c0017be5:	58                   	pop    eax
c0017be6:	5a                   	pop    edx
c0017be7:	68 04 0a 02 c0       	push   0xc0020a04
c0017bec:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017bf2:	e8 0b 0a ff ff       	call   c0008602 <VgaText::setTitle(char*)>
c0017bf7:	83 c4 0c             	add    esp,0xc
c0017bfa:	6a 01                	push   0x1
c0017bfc:	6a 0f                	push   0xf
c0017bfe:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c04:	e8 c1 09 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017c09:	59                   	pop    ecx
c0017c0a:	58                   	pop    eax
c0017c0b:	68 c0 27 02 c0       	push   0xc00227c0
c0017c10:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c16:	e8 91 0e ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017c1b:	83 c4 0c             	add    esp,0xc
c0017c1e:	6a 0f                	push   0xf
c0017c20:	6a 01                	push   0x1
c0017c22:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c28:	e8 9d 09 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017c2d:	58                   	pop    eax
c0017c2e:	5a                   	pop    edx
c0017c2f:	68 c9 27 02 c0       	push   0xc00227c9
c0017c34:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c3a:	e8 6d 0e ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017c3f:	83 c4 0c             	add    esp,0xc
c0017c42:	6a 01                	push   0x1
c0017c44:	6a 0f                	push   0xf
c0017c46:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c4c:	e8 79 09 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017c51:	59                   	pop    ecx
c0017c52:	58                   	pop    eax
c0017c53:	68 0d 28 02 c0       	push   0xc002280d
c0017c58:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c5e:	e8 49 0e ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017c63:	58                   	pop    eax
c0017c64:	5a                   	pop    edx
c0017c65:	68 d6 27 02 c0       	push   0xc00227d6
c0017c6a:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c70:	e8 37 0e ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017c75:	59                   	pop    ecx
c0017c76:	58                   	pop    eax
c0017c77:	68 10 28 02 c0       	push   0xc0022810
c0017c7c:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c82:	e8 25 0e ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017c87:	58                   	pop    eax
c0017c88:	5a                   	pop    edx
c0017c89:	53                   	push   ebx
c0017c8a:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c90:	e8 17 0e ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017c95:	59                   	pop    ecx
c0017c96:	5b                   	pop    ebx
c0017c97:	68 0d 28 02 c0       	push   0xc002280d
c0017c9c:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017ca2:	e8 05 0e ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017ca7:	83 c4 10             	add    esp,0x10
c0017caa:	eb fe                	jmp    c0017caa <HalPanic(char const*)+0x112>

c0017cac <HalQueryPerformanceCounter()>:
c0017cac:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017cb1:	31 d2                	xor    edx,edx
c0017cb3:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017cb9:	31 c0                	xor    eax,eax
c0017cbb:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0017cc2:	74 02                	je     c0017cc6 <HalQueryPerformanceCounter()+0x1a>
c0017cc4:	0f 31                	rdtsc  
c0017cc6:	c3                   	ret    

c0017cc7 <HalInitialise()>:
c0017cc7:	53                   	push   ebx
c0017cc8:	83 ec 08             	sub    esp,0x8
c0017ccb:	e8 09 52 ff ff       	call   c000ced9 <setupINTS()>
c0017cd0:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017cd5:	80 3d e0 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028be0,0x0
c0017cdc:	75 0f                	jne    c0017ced <HalInitialise()+0x26>
c0017cde:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017ce4:	83 e2 fe             	and    edx,0xfffffffe
c0017ce7:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017ced:	c6 05 60 97 02 c0 00 	mov    BYTE PTR ds:0xc0029760,0x0
c0017cf4:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017cfa:	83 e2 fe             	and    edx,0xfffffffe
c0017cfd:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017d03:	e8 a0 02 00 00       	call   c0017fa8 <picOpen()>
c0017d08:	80 3d 60 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029760,0x0
c0017d0f:	74 0a                	je     c0017d1b <HalInitialise()+0x54>
c0017d11:	e8 e2 01 00 00       	call   c0017ef8 <picDisable()>
c0017d16:	e8 0d 68 00 00       	call   c001e528 <apicOpen()>
c0017d1b:	50                   	push   eax
c0017d1c:	bb 0f 00 00 00       	mov    ebx,0xf
c0017d21:	6a 00                	push   0x0
c0017d23:	68 6e 79 01 c0       	push   0xc001796e
c0017d28:	6a 00                	push   0x0
c0017d2a:	e8 73 4f ff ff       	call   c000cca2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d2f:	83 c4 0c             	add    esp,0xc
c0017d32:	6a 00                	push   0x0
c0017d34:	68 6e 79 01 c0       	push   0xc001796e
c0017d39:	6a 01                	push   0x1
c0017d3b:	e8 62 4f ff ff       	call   c000cca2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d40:	83 c4 0c             	add    esp,0xc
c0017d43:	6a 00                	push   0x0
c0017d45:	68 ff 73 01 c0       	push   0xc00173ff
c0017d4a:	6a 02                	push   0x2
c0017d4c:	e8 51 4f ff ff       	call   c000cca2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d51:	83 c4 0c             	add    esp,0xc
c0017d54:	6a 00                	push   0x0
c0017d56:	68 6e 79 01 c0       	push   0xc001796e
c0017d5b:	6a 03                	push   0x3
c0017d5d:	e8 40 4f ff ff       	call   c000cca2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d62:	83 c4 0c             	add    esp,0xc
c0017d65:	6a 00                	push   0x0
c0017d67:	68 6e 79 01 c0       	push   0xc001796e
c0017d6c:	6a 04                	push   0x4
c0017d6e:	e8 2f 4f ff ff       	call   c000cca2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d73:	83 c4 0c             	add    esp,0xc
c0017d76:	6a 00                	push   0x0
c0017d78:	68 6e 79 01 c0       	push   0xc001796e
c0017d7d:	6a 05                	push   0x5
c0017d7f:	e8 1e 4f ff ff       	call   c000cca2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d84:	83 c4 0c             	add    esp,0xc
c0017d87:	6a 00                	push   0x0
c0017d89:	68 a2 79 01 c0       	push   0xc00179a2
c0017d8e:	6a 06                	push   0x6
c0017d90:	e8 0d 4f ff ff       	call   c000cca2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d95:	83 c4 0c             	add    esp,0xc
c0017d98:	6a 00                	push   0x0
c0017d9a:	68 18 74 01 c0       	push   0xc0017418
c0017d9f:	6a 08                	push   0x8
c0017da1:	e8 fc 4e ff ff       	call   c000cca2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017da6:	83 c4 0c             	add    esp,0xc
c0017da9:	6a 00                	push   0x0
c0017dab:	68 6e 79 01 c0       	push   0xc001796e
c0017db0:	6a 09                	push   0x9
c0017db2:	e8 eb 4e ff ff       	call   c000cca2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017db7:	83 c4 0c             	add    esp,0xc
c0017dba:	6a 00                	push   0x0
c0017dbc:	68 6e 79 01 c0       	push   0xc001796e
c0017dc1:	6a 0a                	push   0xa
c0017dc3:	e8 da 4e ff ff       	call   c000cca2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017dc8:	83 c4 0c             	add    esp,0xc
c0017dcb:	6a 00                	push   0x0
c0017dcd:	68 6e 79 01 c0       	push   0xc001796e
c0017dd2:	6a 0b                	push   0xb
c0017dd4:	e8 c9 4e ff ff       	call   c000cca2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017dd9:	83 c4 0c             	add    esp,0xc
c0017ddc:	6a 00                	push   0x0
c0017dde:	68 7e 78 01 c0       	push   0xc001787e
c0017de3:	6a 0d                	push   0xd
c0017de5:	e8 b8 4e ff ff       	call   c000cca2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017dea:	83 c4 0c             	add    esp,0xc
c0017ded:	6a 00                	push   0x0
c0017def:	68 e5 78 01 c0       	push   0xc00178e5
c0017df4:	6a 0e                	push   0xe
c0017df6:	e8 a7 4e ff ff       	call   c000cca2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017dfb:	83 c4 10             	add    esp,0x10
c0017dfe:	50                   	push   eax
c0017dff:	6a 00                	push   0x0
c0017e01:	68 6e 79 01 c0       	push   0xc001796e
c0017e06:	53                   	push   ebx
c0017e07:	43                   	inc    ebx
c0017e08:	e8 95 4e ff ff       	call   c000cca2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e0d:	83 c4 10             	add    esp,0x10
c0017e10:	83 fb 1e             	cmp    ebx,0x1e
c0017e13:	75 e9                	jne    c0017dfe <HalInitialise()+0x137>
c0017e15:	50                   	push   eax
c0017e16:	6a 00                	push   0x0
c0017e18:	68 01 26 01 c0       	push   0xc0012601
c0017e1d:	6a 60                	push   0x60
c0017e1f:	e8 7e 4e ff ff       	call   c000cca2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e24:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017e29:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0017e33:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0017e3a:	e8 94 fc fe ff       	call   c0007ad3 <malloc>
c0017e3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0017e42:	89 c3                	mov    ebx,eax
c0017e44:	e8 37 09 00 00       	call   c0018780 <RTC::RTC()>
c0017e49:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0017e53:	5a                   	pop    edx
c0017e54:	59                   	pop    ecx
c0017e55:	53                   	push   ebx
c0017e56:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017e5c:	e8 0b 49 ff ff       	call   c000c76c <Device::addChild(Device*)>
c0017e61:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017e63:	6a 00                	push   0x0
c0017e65:	6a 00                	push   0x0
c0017e67:	6a 00                	push   0x0
c0017e69:	53                   	push   ebx
c0017e6a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017e6d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017e72:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0017e78:	83 c4 28             	add    esp,0x28
c0017e7b:	5b                   	pop    ebx
c0017e7c:	c3                   	ret    

c0017e7d <HalMakeBeep(int)>:
c0017e7d:	53                   	push   ebx
c0017e7e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017e82:	85 db                	test   ebx,ebx
c0017e84:	75 07                	jne    c0017e8d <HalMakeBeep(int)+0x10>
c0017e86:	e4 61                	in     al,0x61
c0017e88:	83 e0 fc             	and    eax,0xfffffffc
c0017e8b:	eb 26                	jmp    c0017eb3 <HalMakeBeep(int)+0x36>
c0017e8d:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0017e92:	99                   	cdq    
c0017e93:	f7 fb                	idiv   ebx
c0017e95:	89 c1                	mov    ecx,eax
c0017e97:	b0 b6                	mov    al,0xb6
c0017e99:	e6 43                	out    0x43,al
c0017e9b:	88 c8                	mov    al,cl
c0017e9d:	e6 42                	out    0x42,al
c0017e9f:	89 c8                	mov    eax,ecx
c0017ea1:	c1 e8 08             	shr    eax,0x8
c0017ea4:	e6 42                	out    0x42,al
c0017ea6:	e4 61                	in     al,0x61
c0017ea8:	89 c2                	mov    edx,eax
c0017eaa:	83 ca 03             	or     edx,0x3
c0017ead:	38 d0                	cmp    al,dl
c0017eaf:	74 04                	je     c0017eb5 <HalMakeBeep(int)+0x38>
c0017eb1:	88 d0                	mov    al,dl
c0017eb3:	e6 61                	out    0x61,al
c0017eb5:	5b                   	pop    ebx
c0017eb6:	c3                   	ret    

c0017eb7 <HalGetRand()>:
c0017eb7:	31 c0                	xor    eax,eax
c0017eb9:	c3                   	ret    

c0017eba <HalEndOfInterrupt(int)>:
c0017eba:	80 3d 60 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029760,0x0
c0017ec1:	74 23                	je     c0017ee6 <HalEndOfInterrupt(int)+0x2c>
c0017ec3:	83 ec 14             	sub    esp,0x14
c0017ec6:	6a 1b                	push   0x1b
c0017ec8:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017ece:	e8 0f f2 fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c0017ed3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017ed8:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0017ee2:	83 c4 1c             	add    esp,0x1c
c0017ee5:	c3                   	ret    
c0017ee6:	e9 41 02 00 00       	jmp    c001812c <picEOI(int)>

c0017eeb <HalRestart()>:
c0017eeb:	c3                   	ret    

c0017eec <HalShutdown()>:
c0017eec:	c3                   	ret    

c0017eed <HalSleep()>:
c0017eed:	c3                   	ret    
c0017eee:	66 90                	xchg   ax,ax

c0017ef0 <picIoWait()>:
c0017ef0:	eb 00                	jmp    c0017ef2 <picIoWait()+0x2>
c0017ef2:	eb 00                	jmp    c0017ef4 <picIoWait()+0x4>
c0017ef4:	90                   	nop
c0017ef5:	c3                   	ret    
c0017ef6:	66 90                	xchg   ax,ax

c0017ef8 <picDisable()>:
c0017ef8:	83 ec 10             	sub    esp,0x10
c0017efb:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0017f02:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0017f07:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017f0b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0017f10:	ee                   	out    dx,al
c0017f11:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0017f18:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0017f1d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017f21:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0017f26:	ee                   	out    dx,al
c0017f27:	90                   	nop
c0017f28:	83 c4 10             	add    esp,0x10
c0017f2b:	c3                   	ret    

c0017f2c <picGetIRQReg(int)>:
c0017f2c:	83 ec 10             	sub    esp,0x10
c0017f2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017f33:	0f b6 c0             	movzx  eax,al
c0017f36:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0017f3d:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0017f41:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0017f45:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0017f4a:	ee                   	out    dx,al
c0017f4b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017f4f:	0f b6 c0             	movzx  eax,al
c0017f52:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017f59:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0017f5d:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0017f61:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0017f66:	ee                   	out    dx,al
c0017f67:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0017f6e:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0017f73:	89 c2                	mov    edx,eax
c0017f75:	ec                   	in     al,dx
c0017f76:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017f7a:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017f7e:	0f b6 c0             	movzx  eax,al
c0017f81:	c1 e0 08             	shl    eax,0x8
c0017f84:	89 c1                	mov    ecx,eax
c0017f86:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0017f8d:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0017f92:	89 c2                	mov    edx,eax
c0017f94:	ec                   	in     al,dx
c0017f95:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0017f99:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017f9d:	0f b6 c0             	movzx  eax,al
c0017fa0:	09 c8                	or     eax,ecx
c0017fa2:	83 c4 10             	add    esp,0x10
c0017fa5:	c3                   	ret    
c0017fa6:	66 90                	xchg   ax,ax

c0017fa8 <picOpen()>:
c0017fa8:	83 ec 50             	sub    esp,0x50
c0017fab:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0017fb2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0017fb7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017fbb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017fbf:	ee                   	out    dx,al
c0017fc0:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0017fc7:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0017fcc:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017fd0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017fd4:	ee                   	out    dx,al
c0017fd5:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0017fdd:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0017fe5:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0017fec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017ff0:	89 c2                	mov    edx,eax
c0017ff2:	ec                   	in     al,dx
c0017ff3:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0017ff7:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017ffb:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0017fff:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0018006:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001800a:	89 c2                	mov    edx,eax
c001800c:	ec                   	in     al,dx
c001800d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018011:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018015:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0018019:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0018020:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0018025:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0018029:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001802d:	ee                   	out    dx,al
c001802e:	e8 bd fe ff ff       	call   c0017ef0 <picIoWait()>
c0018033:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001803a:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001803f:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0018043:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018047:	ee                   	out    dx,al
c0018048:	e8 a3 fe ff ff       	call   c0017ef0 <picIoWait()>
c001804d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018051:	0f b6 c0             	movzx  eax,al
c0018054:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001805b:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001805f:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0018063:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018067:	ee                   	out    dx,al
c0018068:	e8 83 fe ff ff       	call   c0017ef0 <picIoWait()>
c001806d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018071:	0f b6 c0             	movzx  eax,al
c0018074:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001807b:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001807f:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0018083:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018087:	ee                   	out    dx,al
c0018088:	e8 63 fe ff ff       	call   c0017ef0 <picIoWait()>
c001808d:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0018094:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0018099:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c001809d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00180a1:	ee                   	out    dx,al
c00180a2:	e8 49 fe ff ff       	call   c0017ef0 <picIoWait()>
c00180a7:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c00180ae:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c00180b3:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00180b7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00180bb:	ee                   	out    dx,al
c00180bc:	e8 2f fe ff ff       	call   c0017ef0 <picIoWait()>
c00180c1:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00180c8:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00180cd:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00180d1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00180d5:	ee                   	out    dx,al
c00180d6:	e8 15 fe ff ff       	call   c0017ef0 <picIoWait()>
c00180db:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c00180e2:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c00180e7:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00180eb:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00180ef:	ee                   	out    dx,al
c00180f0:	e8 fb fd ff ff       	call   c0017ef0 <picIoWait()>
c00180f5:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c00180fa:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0018101:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0018105:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0018109:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001810d:	ee                   	out    dx,al
c001810e:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0018113:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001811a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001811e:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0018122:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0018126:	ee                   	out    dx,al
c0018127:	90                   	nop
c0018128:	83 c4 50             	add    esp,0x50
c001812b:	c3                   	ret    

c001812c <picEOI(int)>:
c001812c:	83 ec 10             	sub    esp,0x10
c001812f:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018134:	75 1e                	jne    c0018154 <picEOI(int)+0x28>
c0018136:	6a 0b                	push   0xb
c0018138:	e8 ef fd ff ff       	call   c0017f2c <picGetIRQReg(int)>
c001813d:	83 c4 04             	add    esp,0x4
c0018140:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0018145:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001814a:	25 80 00 00 00       	and    eax,0x80
c001814f:	74 73                	je     c00181c4 <picEOI(int)+0x98>
c0018151:	8d 76 00             	lea    esi,[esi+0x0]
c0018154:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0018159:	75 31                	jne    c001818c <picEOI(int)+0x60>
c001815b:	6a 0b                	push   0xb
c001815d:	e8 ca fd ff ff       	call   c0017f2c <picGetIRQReg(int)>
c0018162:	83 c4 04             	add    esp,0x4
c0018165:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001816a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001816e:	98                   	cwde   
c001816f:	85 c0                	test   eax,eax
c0018171:	78 19                	js     c001818c <picEOI(int)+0x60>
c0018173:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001817a:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001817f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018183:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018188:	ee                   	out    dx,al
c0018189:	eb 3d                	jmp    c00181c8 <picEOI(int)+0x9c>
c001818b:	90                   	nop
c001818c:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018191:	7e 19                	jle    c00181ac <picEOI(int)+0x80>
c0018193:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001819a:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001819f:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00181a3:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00181a8:	ee                   	out    dx,al
c00181a9:	8d 76 00             	lea    esi,[esi+0x0]
c00181ac:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00181b3:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c00181b8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00181bc:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00181c1:	ee                   	out    dx,al
c00181c2:	eb 04                	jmp    c00181c8 <picEOI(int)+0x9c>
c00181c4:	90                   	nop
c00181c5:	8d 76 00             	lea    esi,[esi+0x0]
c00181c8:	83 c4 10             	add    esp,0x10
c00181cb:	c3                   	ret    

c00181cc <RTC::open(int, int, void*)>:
c00181cc:	31 c0                	xor    eax,eax
c00181ce:	c3                   	ret    
c00181cf:	90                   	nop

c00181d0 <RTC::close(int, int, void*)>:
c00181d0:	31 c0                	xor    eax,eax
c00181d2:	c3                   	ret    
c00181d3:	90                   	nop

c00181d4 <RTC::timeInSecondsUTC()>:
c00181d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181d8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00181de:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00181e4:	c3                   	ret    
c00181e5:	90                   	nop

c00181e6 <RTC::timeInDatetimeUTC()>:
c00181e6:	53                   	push   ebx
c00181e7:	83 ec 14             	sub    esp,0x14
c00181ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181ee:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00181f2:	8b 10                	mov    edx,DWORD PTR [eax]
c00181f4:	50                   	push   eax
c00181f5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00181f8:	83 c4 0c             	add    esp,0xc
c00181fb:	52                   	push   edx
c00181fc:	50                   	push   eax
c00181fd:	53                   	push   ebx
c00181fe:	e8 dd 42 ff ff       	call   c000c4e0 <secondsToDatetime(unsigned long long)>
c0018203:	89 d8                	mov    eax,ebx
c0018205:	83 c4 14             	add    esp,0x14
c0018208:	5b                   	pop    ebx
c0018209:	c2 04 00             	ret    0x4

c001820c <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001820c:	56                   	push   esi
c001820d:	53                   	push   ebx
c001820e:	83 ec 14             	sub    esp,0x14
c0018211:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018215:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018217:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001821a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001821e:	52                   	push   edx
c001821f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018227:	50                   	push   eax
c0018228:	e8 b3 42 ff ff       	call   c000c4e0 <secondsToDatetime(unsigned long long)>
c001822d:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0018231:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018235:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018239:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001823d:	89 f0                	mov    eax,esi
c001823f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0018243:	83 c4 20             	add    esp,0x20
c0018246:	5b                   	pop    ebx
c0018247:	5e                   	pop    esi
c0018248:	ff e0                	jmp    eax

c001824a <RTC::~RTC()>:
c001824a:	83 ec 0c             	sub    esp,0xc
c001824d:	ba ac 28 02 c0       	mov    edx,0xc00228ac
c0018252:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018256:	89 10                	mov    DWORD PTR [eax],edx
c0018258:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001825c:	83 ec 0c             	sub    esp,0xc
c001825f:	50                   	push   eax
c0018260:	e8 07 40 ff ff       	call   c000c26c <Clock::~Clock()>
c0018265:	83 c4 10             	add    esp,0x10
c0018268:	90                   	nop
c0018269:	83 c4 0c             	add    esp,0xc
c001826c:	c3                   	ret    
c001826d:	90                   	nop

c001826e <RTC::~RTC()>:
c001826e:	83 ec 0c             	sub    esp,0xc
c0018271:	83 ec 0c             	sub    esp,0xc
c0018274:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018278:	e8 cd ff ff ff       	call   c001824a <RTC::~RTC()>
c001827d:	83 c4 10             	add    esp,0x10
c0018280:	83 ec 08             	sub    esp,0x8
c0018283:	68 60 01 00 00       	push   0x160
c0018288:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001828c:	e8 7b 25 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0018291:	83 c4 10             	add    esp,0x10
c0018294:	83 c4 0c             	add    esp,0xc
c0018297:	c3                   	ret    

c0018298 <RTC::get_update_in_progress_flag()>:
c0018298:	83 ec 14             	sub    esp,0x14
c001829b:	6a 0a                	push   0xa
c001829d:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00182a3:	e8 f2 ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00182a8:	83 c4 1c             	add    esp,0x1c
c00182ab:	0f b6 c0             	movzx  eax,al
c00182ae:	c1 e8 07             	shr    eax,0x7
c00182b1:	c3                   	ret    

c00182b2 <RTC::completeRTCRefresh()>:
c00182b2:	55                   	push   ebp
c00182b3:	57                   	push   edi
c00182b4:	56                   	push   esi
c00182b5:	53                   	push   ebx
c00182b6:	83 ec 3c             	sub    esp,0x3c
c00182b9:	8b 1d ec 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288ec
c00182bf:	83 ec 0c             	sub    esp,0xc
c00182c2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00182c6:	e8 cd ff ff ff       	call   c0018298 <RTC::get_update_in_progress_flag()>
c00182cb:	83 c4 10             	add    esp,0x10
c00182ce:	84 c0                	test   al,al
c00182d0:	74 0e                	je     c00182e0 <RTC::completeRTCRefresh()+0x2e>
c00182d2:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00182d8:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c00182de:	73 df                	jae    c00182bf <RTC::completeRTCRefresh()+0xd>
c00182e0:	50                   	push   eax
c00182e1:	50                   	push   eax
c00182e2:	6a 00                	push   0x0
c00182e4:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00182ea:	e8 ab ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00182ef:	89 c7                	mov    edi,eax
c00182f1:	58                   	pop    eax
c00182f2:	5a                   	pop    edx
c00182f3:	6a 02                	push   0x2
c00182f5:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00182fb:	e8 9a ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018300:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0018304:	59                   	pop    ecx
c0018305:	5b                   	pop    ebx
c0018306:	6a 04                	push   0x4
c0018308:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001830e:	e8 87 ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018313:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0018317:	5e                   	pop    esi
c0018318:	5d                   	pop    ebp
c0018319:	6a 07                	push   0x7
c001831b:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018321:	e8 74 ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018326:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001832a:	58                   	pop    eax
c001832b:	5a                   	pop    edx
c001832c:	6a 08                	push   0x8
c001832e:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018334:	e8 61 ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018339:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001833d:	59                   	pop    ecx
c001833e:	5b                   	pop    ebx
c001833f:	6a 09                	push   0x9
c0018341:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018347:	e8 4e ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001834c:	0f b6 c0             	movzx  eax,al
c001834f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0018353:	83 c4 10             	add    esp,0x10
c0018356:	8b 1d ec 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288ec
c001835c:	83 ec 0c             	sub    esp,0xc
c001835f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0018363:	e8 30 ff ff ff       	call   c0018298 <RTC::get_update_in_progress_flag()>
c0018368:	83 c4 10             	add    esp,0x10
c001836b:	84 c0                	test   al,al
c001836d:	74 0e                	je     c001837d <RTC::completeRTCRefresh()+0xcb>
c001836f:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018375:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c001837b:	73 df                	jae    c001835c <RTC::completeRTCRefresh()+0xaa>
c001837d:	51                   	push   ecx
c001837e:	51                   	push   ecx
c001837f:	6a 00                	push   0x0
c0018381:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018387:	e8 0e ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001838c:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018390:	5b                   	pop    ebx
c0018391:	5e                   	pop    esi
c0018392:	6a 02                	push   0x2
c0018394:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001839a:	e8 fb ed fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001839f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00183a3:	5d                   	pop    ebp
c00183a4:	58                   	pop    eax
c00183a5:	6a 04                	push   0x4
c00183a7:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00183ad:	e8 e8 ed fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00183b2:	88 c3                	mov    bl,al
c00183b4:	58                   	pop    eax
c00183b5:	5a                   	pop    edx
c00183b6:	6a 07                	push   0x7
c00183b8:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00183be:	e8 d7 ed fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00183c3:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00183c7:	59                   	pop    ecx
c00183c8:	5e                   	pop    esi
c00183c9:	6a 08                	push   0x8
c00183cb:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00183d1:	e8 c4 ed fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00183d6:	5d                   	pop    ebp
c00183d7:	89 c6                	mov    esi,eax
c00183d9:	58                   	pop    eax
c00183da:	6a 09                	push   0x9
c00183dc:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00183e2:	e8 b3 ed fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00183e7:	89 f9                	mov    ecx,edi
c00183e9:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00183ed:	83 c4 10             	add    esp,0x10
c00183f0:	0f b6 e8             	movzx  ebp,al
c00183f3:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00183f8:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c00183fc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018400:	74 27                	je     c0018429 <RTC::completeRTCRefresh()+0x177>
c0018402:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0018406:	89 f0                	mov    eax,esi
c0018408:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001840c:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0018410:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0018414:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0018418:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001841c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018420:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018424:	e9 2d ff ff ff       	jmp    c0018356 <RTC::completeRTCRefresh()+0xa4>
c0018429:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001842e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018432:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018436:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c001843a:	75 c6                	jne    c0018402 <RTC::completeRTCRefresh()+0x150>
c001843c:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0018441:	89 f1                	mov    ecx,esi
c0018443:	0f b6 fb             	movzx  edi,bl
c0018446:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001844a:	0f b6 c9             	movzx  ecx,cl
c001844d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0018451:	89 f1                	mov    ecx,esi
c0018453:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018457:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001845b:	0f 94 c2             	sete   dl
c001845e:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c0018462:	0f 94 c0             	sete   al
c0018465:	21 d0                	and    eax,edx
c0018467:	31 d2                	xor    edx,edx
c0018469:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c001846d:	0f 94 c2             	sete   dl
c0018470:	85 c2                	test   edx,eax
c0018472:	74 8e                	je     c0018402 <RTC::completeRTCRefresh()+0x150>
c0018474:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0018478:	75 88                	jne    c0018402 <RTC::completeRTCRefresh()+0x150>
c001847a:	52                   	push   edx
c001847b:	52                   	push   edx
c001847c:	6a 0b                	push   0xb
c001847e:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018484:	e8 11 ed fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018489:	83 c4 10             	add    esp,0x10
c001848c:	a8 04                	test   al,0x4
c001848e:	75 7a                	jne    c001850a <RTC::completeRTCRefresh()+0x258>
c0018490:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018494:	c1 ef 04             	shr    edi,0x4
c0018497:	83 e6 0f             	and    esi,0xf
c001849a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001849e:	c1 ed 04             	shr    ebp,0x4
c00184a1:	6b ed 0a             	imul   ebp,ebp,0xa
c00184a4:	c1 ea 04             	shr    edx,0x4
c00184a7:	6b d2 0a             	imul   edx,edx,0xa
c00184aa:	83 e1 0f             	and    ecx,0xf
c00184ad:	01 d1                	add    ecx,edx
c00184af:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00184b3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00184b7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00184bb:	c1 ea 04             	shr    edx,0x4
c00184be:	6b d2 0a             	imul   edx,edx,0xa
c00184c1:	83 e1 0f             	and    ecx,0xf
c00184c4:	01 d1                	add    ecx,edx
c00184c6:	89 fa                	mov    edx,edi
c00184c8:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00184cc:	83 e2 07             	and    edx,0x7
c00184cf:	89 d9                	mov    ecx,ebx
c00184d1:	6b d2 0a             	imul   edx,edx,0xa
c00184d4:	83 e1 0f             	and    ecx,0xf
c00184d7:	83 e3 80             	and    ebx,0xffffff80
c00184da:	01 d1                	add    ecx,edx
c00184dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00184e0:	09 cb                	or     ebx,ecx
c00184e2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00184e6:	c1 ea 04             	shr    edx,0x4
c00184e9:	6b d2 0a             	imul   edx,edx,0xa
c00184ec:	83 e1 0f             	and    ecx,0xf
c00184ef:	01 d1                	add    ecx,edx
c00184f1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00184f5:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00184f9:	c1 ea 04             	shr    edx,0x4
c00184fc:	6b d2 0a             	imul   edx,edx,0xa
c00184ff:	01 d6                	add    esi,edx
c0018501:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018505:	83 e2 0f             	and    edx,0xf
c0018508:	01 d5                	add    ebp,edx
c001850a:	a8 02                	test   al,0x2
c001850c:	75 15                	jne    c0018523 <RTC::completeRTCRefresh()+0x271>
c001850e:	f6 c3 80             	test   bl,0x80
c0018511:	74 10                	je     c0018523 <RTC::completeRTCRefresh()+0x271>
c0018513:	83 e3 7f             	and    ebx,0x7f
c0018516:	b9 18 00 00 00       	mov    ecx,0x18
c001851b:	8d 43 0c             	lea    eax,[ebx+0xc]
c001851e:	99                   	cdq    
c001851f:	f7 f9                	idiv   ecx
c0018521:	88 d3                	mov    bl,dl
c0018523:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0018529:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c001852f:	77 06                	ja     c0018537 <RTC::completeRTCRefresh()+0x285>
c0018531:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0018537:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001853c:	31 c9                	xor    ecx,ecx
c001853e:	31 d2                	xor    edx,edx
c0018540:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0018544:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0018548:	89 cd                	mov    ebp,ecx
c001854a:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c001854e:	c1 e7 10             	shl    edi,0x10
c0018551:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0018557:	c1 e0 10             	shl    eax,0x10
c001855a:	09 c5                	or     ebp,eax
c001855c:	89 e9                	mov    ecx,ebp
c001855e:	0f b7 c2             	movzx  eax,dx
c0018561:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0018565:	09 f8                	or     eax,edi
c0018567:	89 c2                	mov    edx,eax
c0018569:	50                   	push   eax
c001856a:	50                   	push   eax
c001856b:	88 d9                	mov    cl,bl
c001856d:	51                   	push   ecx
c001856e:	52                   	push   edx
c001856f:	e8 e7 3d ff ff       	call   c000c35b <datetimeToSeconds(datetime_t)>
c0018574:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0018578:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001857e:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0018584:	83 c4 4c             	add    esp,0x4c
c0018587:	5b                   	pop    ebx
c0018588:	5e                   	pop    esi
c0018589:	5f                   	pop    edi
c001858a:	5d                   	pop    ebp
c001858b:	c3                   	ret    

c001858c <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001858c:	55                   	push   ebp
c001858d:	57                   	push   edi
c001858e:	56                   	push   esi
c001858f:	53                   	push   ebx
c0018590:	83 ec 30             	sub    esp,0x30
c0018593:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0018597:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c001859b:	6a 00                	push   0x0
c001859d:	6a 00                	push   0x0
c001859f:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00185a5:	e8 08 ed fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00185aa:	83 c4 0c             	add    esp,0xc
c00185ad:	6a 00                	push   0x0
c00185af:	6a 02                	push   0x2
c00185b1:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00185b7:	e8 f6 ec fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00185bc:	89 f8                	mov    eax,edi
c00185be:	89 f9                	mov    ecx,edi
c00185c0:	0f b6 c4             	movzx  eax,ah
c00185c3:	31 d2                	xor    edx,edx
c00185c5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00185c9:	c1 e9 10             	shr    ecx,0x10
c00185cc:	89 f0                	mov    eax,esi
c00185ce:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00185d2:	89 f0                	mov    eax,esi
c00185d4:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c00185d8:	0f b6 c4             	movzx  eax,ah
c00185db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00185df:	89 f0                	mov    eax,esi
c00185e1:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00185e5:	c1 e8 10             	shr    eax,0x10
c00185e8:	b9 64 00 00 00       	mov    ecx,0x64
c00185ed:	f7 f1                	div    ecx
c00185ef:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00185f3:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00185f7:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00185fb:	59                   	pop    ecx
c00185fc:	5b                   	pop    ebx
c00185fd:	89 fb                	mov    ebx,edi
c00185ff:	6a 0b                	push   0xb
c0018601:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018607:	e8 8e eb fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001860c:	83 c4 10             	add    esp,0x10
c001860f:	a8 04                	test   al,0x4
c0018611:	89 c5                	mov    ebp,eax
c0018613:	75 6e                	jne    c0018683 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0018615:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018619:	31 d2                	xor    edx,edx
c001861b:	0f b6 c1             	movzx  eax,cl
c001861e:	b9 0a 00 00 00       	mov    ecx,0xa
c0018623:	f7 f1                	div    ecx
c0018625:	c1 e0 04             	shl    eax,0x4
c0018628:	09 d0                	or     eax,edx
c001862a:	31 d2                	xor    edx,edx
c001862c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018630:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0018635:	f7 f1                	div    ecx
c0018637:	c1 e0 04             	shl    eax,0x4
c001863a:	09 d0                	or     eax,edx
c001863c:	31 d2                	xor    edx,edx
c001863e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018642:	0f b6 c3             	movzx  eax,bl
c0018645:	f7 f1                	div    ecx
c0018647:	c1 e0 04             	shl    eax,0x4
c001864a:	09 d0                	or     eax,edx
c001864c:	31 d2                	xor    edx,edx
c001864e:	89 c3                	mov    ebx,eax
c0018650:	89 f0                	mov    eax,esi
c0018652:	0f b6 c0             	movzx  eax,al
c0018655:	f7 f1                	div    ecx
c0018657:	c1 e0 04             	shl    eax,0x4
c001865a:	09 d0                	or     eax,edx
c001865c:	31 d2                	xor    edx,edx
c001865e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018662:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018667:	f7 f1                	div    ecx
c0018669:	c1 e0 04             	shl    eax,0x4
c001866c:	09 d0                	or     eax,edx
c001866e:	31 d2                	xor    edx,edx
c0018670:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018674:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018678:	f7 f1                	div    ecx
c001867a:	c1 e0 04             	shl    eax,0x4
c001867d:	09 d0                	or     eax,edx
c001867f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018683:	83 e5 02             	and    ebp,0x2
c0018686:	75 1e                	jne    c00186a6 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018688:	0f b6 c3             	movzx  eax,bl
c001868b:	83 f8 0b             	cmp    eax,0xb
c001868e:	76 10                	jbe    c00186a0 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0018690:	8d 53 f4             	lea    edx,[ebx-0xc]
c0018693:	84 d2                	test   dl,dl
c0018695:	88 d3                	mov    bl,dl
c0018697:	75 02                	jne    c001869b <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0018699:	b3 0c                	mov    bl,0xc
c001869b:	83 cb 80             	or     ebx,0xffffff80
c001869e:	eb 06                	jmp    c00186a6 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c00186a0:	85 c0                	test   eax,eax
c00186a2:	75 02                	jne    c00186a6 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c00186a4:	b3 0c                	mov    bl,0xc
c00186a6:	50                   	push   eax
c00186a7:	0f b6 db             	movzx  ebx,bl
c00186aa:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00186af:	52                   	push   edx
c00186b0:	6a 00                	push   0x0
c00186b2:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00186b8:	e8 f5 eb fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00186bd:	83 c4 0c             	add    esp,0xc
c00186c0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00186c5:	50                   	push   eax
c00186c6:	6a 02                	push   0x2
c00186c8:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00186ce:	e8 df eb fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00186d3:	83 c4 0c             	add    esp,0xc
c00186d6:	53                   	push   ebx
c00186d7:	6a 04                	push   0x4
c00186d9:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00186df:	e8 ce eb fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00186e4:	83 c4 0c             	add    esp,0xc
c00186e7:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c00186ec:	52                   	push   edx
c00186ed:	6a 07                	push   0x7
c00186ef:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00186f5:	e8 b8 eb fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00186fa:	83 c4 0c             	add    esp,0xc
c00186fd:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018702:	50                   	push   eax
c0018703:	6a 08                	push   0x8
c0018705:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001870b:	e8 a2 eb fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018710:	83 c4 0c             	add    esp,0xc
c0018713:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0018718:	55                   	push   ebp
c0018719:	6a 09                	push   0x9
c001871b:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018721:	e8 8c eb fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018726:	5a                   	pop    edx
c0018727:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001872b:	e8 82 fb ff ff       	call   c00182b2 <RTC::completeRTCRefresh()>
c0018730:	83 c4 3c             	add    esp,0x3c
c0018733:	b0 01                	mov    al,0x1
c0018735:	5b                   	pop    ebx
c0018736:	5e                   	pop    esi
c0018737:	5f                   	pop    edi
c0018738:	5d                   	pop    ebp
c0018739:	c3                   	ret    

c001873a <rtcIRQHandler(regs*, void*)>:
c001873a:	53                   	push   ebx
c001873b:	83 ec 10             	sub    esp,0x10
c001873e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018742:	6a 0c                	push   0xc
c0018744:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001874a:	e8 4b ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001874f:	83 c4 10             	add    esp,0x10
c0018752:	a8 80                	test   al,0x80
c0018754:	74 24                	je     c001877a <rtcIRQHandler(regs*, void*)+0x40>
c0018756:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001875d:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0018764:	66 ff 05 78 97 02 c0 	inc    WORD PTR ds:0xc0029778
c001876b:	75 0d                	jne    c001877a <rtcIRQHandler(regs*, void*)+0x40>
c001876d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018771:	83 c4 08             	add    esp,0x8
c0018774:	5b                   	pop    ebx
c0018775:	e9 38 fb ff ff       	jmp    c00182b2 <RTC::completeRTCRefresh()>
c001877a:	83 c4 08             	add    esp,0x8
c001877d:	5b                   	pop    ebx
c001877e:	c3                   	ret    
c001877f:	90                   	nop

c0018780 <RTC::RTC()>:
c0018780:	83 ec 1c             	sub    esp,0x1c
c0018783:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018787:	83 ec 08             	sub    esp,0x8
c001878a:	68 8f 28 02 c0       	push   0xc002288f
c001878f:	50                   	push   eax
c0018790:	e8 a1 3a ff ff       	call   c000c236 <Clock::Clock(char const*)>
c0018795:	83 c4 10             	add    esp,0x10
c0018798:	ba ac 28 02 c0       	mov    edx,0xc00228ac
c001879d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187a1:	89 10                	mov    DWORD PTR [eax],edx
c00187a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187a7:	83 ec 0c             	sub    esp,0xc
c00187aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187ae:	6a 01                	push   0x1
c00187b0:	68 3a 87 01 c0       	push   0xc001873a
c00187b5:	6a 08                	push   0x8
c00187b7:	50                   	push   eax
c00187b8:	e8 5b 3f ff ff       	call   c000c718 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00187bd:	83 c4 20             	add    esp,0x20
c00187c0:	89 c2                	mov    edx,eax
c00187c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187c6:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00187cc:	fa                   	cli    
c00187cd:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00187d2:	83 c0 01             	add    eax,0x1
c00187d5:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00187da:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00187df:	83 ec 08             	sub    esp,0x8
c00187e2:	6a 0b                	push   0xb
c00187e4:	50                   	push   eax
c00187e5:	e8 b0 e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00187ea:	83 c4 10             	add    esp,0x10
c00187ed:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00187f1:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00187f6:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00187fa:	83 ca 10             	or     edx,0x10
c00187fd:	0f b6 d2             	movzx  edx,dl
c0018800:	83 ec 04             	sub    esp,0x4
c0018803:	52                   	push   edx
c0018804:	6a 0b                	push   0xb
c0018806:	50                   	push   eax
c0018807:	e8 a6 ea fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c001880c:	83 c4 10             	add    esp,0x10
c001880f:	83 ec 0c             	sub    esp,0xc
c0018812:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018816:	e8 97 fa ff ff       	call   c00182b2 <RTC::completeRTCRefresh()>
c001881b:	83 c4 10             	add    esp,0x10
c001881e:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0018823:	83 e8 01             	sub    eax,0x1
c0018826:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001882b:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0018830:	85 c0                	test   eax,eax
c0018832:	75 01                	jne    c0018835 <RTC::RTC()+0xb5>
c0018834:	fb                   	sti    
c0018835:	90                   	nop
c0018836:	83 c4 1c             	add    esp,0x1c
c0018839:	c3                   	ret    
c001883a:	66 90                	xchg   ax,ax

c001883c <HalConsoleScroll(int, int)>:
c001883c:	83 ec 10             	sub    esp,0x10
c001883f:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0018847:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001884f:	90                   	nop
c0018850:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018855:	0f 8f e1 00 00 00    	jg     c001893c <HalConsoleScroll(int, int)+0x100>
c001885b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018863:	90                   	nop
c0018864:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001886c:	0f 8f be 00 00 00    	jg     c0018930 <HalConsoleScroll(int, int)+0xf4>
c0018872:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018876:	89 d0                	mov    eax,edx
c0018878:	c1 e0 02             	shl    eax,0x2
c001887b:	01 d0                	add    eax,edx
c001887d:	c1 e0 05             	shl    eax,0x5
c0018880:	89 c2                	mov    edx,eax
c0018882:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018886:	01 d0                	add    eax,edx
c0018888:	89 c2                	mov    edx,eax
c001888a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001888e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018891:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018895:	89 d0                	mov    eax,edx
c0018897:	c1 e0 02             	shl    eax,0x2
c001889a:	01 d0                	add    eax,edx
c001889c:	c1 e0 05             	shl    eax,0x5
c001889f:	89 c2                	mov    edx,eax
c00188a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00188a5:	01 d0                	add    eax,edx
c00188a7:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c00188ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00188b1:	01 d0                	add    eax,edx
c00188b3:	8a 11                	mov    dl,BYTE PTR [ecx]
c00188b5:	88 10                	mov    BYTE PTR [eax],dl
c00188b7:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00188bc:	75 66                	jne    c0018924 <HalConsoleScroll(int, int)+0xe8>
c00188be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00188c2:	83 e0 01             	and    eax,0x1
c00188c5:	74 39                	je     c0018900 <HalConsoleScroll(int, int)+0xc4>
c00188c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00188cb:	83 e0 0f             	and    eax,0xf
c00188ce:	88 c2                	mov    dl,al
c00188d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00188d4:	c1 e0 04             	shl    eax,0x4
c00188d7:	09 d0                	or     eax,edx
c00188d9:	88 c1                	mov    cl,al
c00188db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00188df:	89 d0                	mov    eax,edx
c00188e1:	c1 e0 02             	shl    eax,0x2
c00188e4:	01 d0                	add    eax,edx
c00188e6:	c1 e0 05             	shl    eax,0x5
c00188e9:	89 c2                	mov    edx,eax
c00188eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00188ef:	01 d0                	add    eax,edx
c00188f1:	89 c2                	mov    edx,eax
c00188f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00188f7:	01 d0                	add    eax,edx
c00188f9:	88 ca                	mov    dl,cl
c00188fb:	88 10                	mov    BYTE PTR [eax],dl
c00188fd:	eb 25                	jmp    c0018924 <HalConsoleScroll(int, int)+0xe8>
c00188ff:	90                   	nop
c0018900:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018904:	89 d0                	mov    eax,edx
c0018906:	c1 e0 02             	shl    eax,0x2
c0018909:	01 d0                	add    eax,edx
c001890b:	c1 e0 05             	shl    eax,0x5
c001890e:	89 c2                	mov    edx,eax
c0018910:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018914:	01 d0                	add    eax,edx
c0018916:	89 c2                	mov    edx,eax
c0018918:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001891c:	01 d0                	add    eax,edx
c001891e:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0018921:	8d 76 00             	lea    esi,[esi+0x0]
c0018924:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018929:	e9 36 ff ff ff       	jmp    c0018864 <HalConsoleScroll(int, int)+0x28>
c001892e:	66 90                	xchg   ax,ax
c0018930:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018935:	e9 16 ff ff ff       	jmp    c0018850 <HalConsoleScroll(int, int)+0x14>
c001893a:	66 90                	xchg   ax,ax
c001893c:	90                   	nop
c001893d:	83 c4 10             	add    esp,0x10
c0018940:	c3                   	ret    
c0018941:	8d 76 00             	lea    esi,[esi+0x0]

c0018944 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0018944:	83 ec 14             	sub    esp,0x14
c0018947:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001894b:	88 04 24             	mov    BYTE PTR [esp],al
c001894e:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018951:	0f b6 c0             	movzx  eax,al
c0018954:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018958:	89 d1                	mov    ecx,edx
c001895a:	83 e1 0f             	and    ecx,0xf
c001895d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018961:	c1 e2 04             	shl    edx,0x4
c0018964:	0f b6 d2             	movzx  edx,dl
c0018967:	09 ca                	or     edx,ecx
c0018969:	c1 e2 08             	shl    edx,0x8
c001896c:	09 d0                	or     eax,edx
c001896e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0018973:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001897b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001897f:	89 d0                	mov    eax,edx
c0018981:	c1 e0 02             	shl    eax,0x2
c0018984:	01 d0                	add    eax,edx
c0018986:	c1 e0 04             	shl    eax,0x4
c0018989:	89 c2                	mov    edx,eax
c001898b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001898f:	01 d0                	add    eax,edx
c0018991:	d1 e0                	shl    eax,1
c0018993:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018997:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001899b:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c00189a0:	66 89 10             	mov    WORD PTR [eax],dx
c00189a3:	90                   	nop
c00189a4:	83 c4 14             	add    esp,0x14
c00189a7:	c3                   	ret    

c00189a8 <HalConsoleCursorUpdate(int, int)>:
c00189a8:	83 ec 20             	sub    esp,0x20
c00189ab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00189af:	89 c2                	mov    edx,eax
c00189b1:	c1 e2 02             	shl    edx,0x2
c00189b4:	01 d0                	add    eax,edx
c00189b6:	c1 e0 04             	shl    eax,0x4
c00189b9:	89 c2                	mov    edx,eax
c00189bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00189bf:	01 d0                	add    eax,edx
c00189c1:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00189c6:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c00189cd:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c00189d2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00189d6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00189da:	ee                   	out    dx,al
c00189db:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00189e0:	0f b6 c0             	movzx  eax,al
c00189e3:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c00189ea:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00189ee:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00189f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00189f6:	ee                   	out    dx,al
c00189f7:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c00189fe:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0018a03:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018a07:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018a0b:	ee                   	out    dx,al
c0018a0c:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018a11:	c1 e8 08             	shr    eax,0x8
c0018a14:	0f b6 c0             	movzx  eax,al
c0018a17:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0018a1e:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018a22:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018a26:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018a2a:	ee                   	out    dx,al
c0018a2b:	90                   	nop
c0018a2c:	83 c4 20             	add    esp,0x20
c0018a2f:	c3                   	ret    

c0018a30 <FAT::getName()>:
c0018a30:	b8 e0 28 02 c0       	mov    eax,0xc00228e0
c0018a35:	c3                   	ret    
c0018a36:	66 90                	xchg   ax,ax

c0018a38 <FAT::tell(void*, unsigned long long*)>:
c0018a38:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018a3d:	75 09                	jne    c0018a48 <FAT::tell(void*, unsigned long long*)+0x10>
c0018a3f:	b8 04 00 00 00       	mov    eax,0x4
c0018a44:	c3                   	ret    
c0018a45:	8d 76 00             	lea    esi,[esi+0x0]
c0018a48:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018a4d:	75 09                	jne    c0018a58 <FAT::tell(void*, unsigned long long*)+0x20>
c0018a4f:	b8 04 00 00 00       	mov    eax,0x4
c0018a54:	c3                   	ret    
c0018a55:	8d 76 00             	lea    esi,[esi+0x0]
c0018a58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a5c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018a5f:	ba 00 00 00 00       	mov    edx,0x0
c0018a64:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018a68:	89 01                	mov    DWORD PTR [ecx],eax
c0018a6a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018a6d:	b8 00 00 00 00       	mov    eax,0x0
c0018a72:	c3                   	ret    
c0018a73:	90                   	nop

c0018a74 <FAT::stat(void*, unsigned long long*)>:
c0018a74:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018a79:	75 09                	jne    c0018a84 <FAT::stat(void*, unsigned long long*)+0x10>
c0018a7b:	b8 04 00 00 00       	mov    eax,0x4
c0018a80:	c3                   	ret    
c0018a81:	8d 76 00             	lea    esi,[esi+0x0]
c0018a84:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018a89:	75 09                	jne    c0018a94 <FAT::stat(void*, unsigned long long*)+0x20>
c0018a8b:	b8 04 00 00 00       	mov    eax,0x4
c0018a90:	c3                   	ret    
c0018a91:	8d 76 00             	lea    esi,[esi+0x0]
c0018a94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a98:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018a9b:	ba 00 00 00 00       	mov    edx,0x0
c0018aa0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018aa4:	89 01                	mov    DWORD PTR [ecx],eax
c0018aa6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018aa9:	b8 00 00 00 00       	mov    eax,0x0
c0018aae:	c3                   	ret    
c0018aaf:	90                   	nop

c0018ab0 <FAT::~FAT()>:
c0018ab0:	83 ec 0c             	sub    esp,0xc
c0018ab3:	ba 2c 29 02 c0       	mov    edx,0xc002292c
c0018ab8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018abc:	89 10                	mov    DWORD PTR [eax],edx
c0018abe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ac2:	83 ec 0c             	sub    esp,0xc
c0018ac5:	50                   	push   eax
c0018ac6:	e8 5b 2a ff ff       	call   c000b526 <Filesystem::~Filesystem()>
c0018acb:	83 c4 10             	add    esp,0x10
c0018ace:	90                   	nop
c0018acf:	83 c4 0c             	add    esp,0xc
c0018ad2:	c3                   	ret    
c0018ad3:	90                   	nop

c0018ad4 <FAT::~FAT()>:
c0018ad4:	83 ec 0c             	sub    esp,0xc
c0018ad7:	83 ec 0c             	sub    esp,0xc
c0018ada:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018ade:	e8 cd ff ff ff       	call   c0018ab0 <FAT::~FAT()>
c0018ae3:	83 c4 10             	add    esp,0x10
c0018ae6:	83 ec 08             	sub    esp,0x8
c0018ae9:	6a 08                	push   0x8
c0018aeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018aef:	e8 18 1d ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0018af4:	83 c4 10             	add    esp,0x10
c0018af7:	83 c4 0c             	add    esp,0xc
c0018afa:	c3                   	ret    
c0018afb:	90                   	nop

c0018afc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018afc:	83 ec 1c             	sub    esp,0x1c
c0018aff:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018b06:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018b0b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018b0f:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018b16:	83 f8 ff             	cmp    eax,0xffffffff
c0018b19:	75 35                	jne    c0018b50 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0018b1b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018b1f:	88 c2                	mov    dl,al
c0018b21:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018b26:	01 d0                	add    eax,edx
c0018b28:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018b2c:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018b32:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018b36:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018b3d:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018b42:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018b46:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018b4d:	eb 19                	jmp    c0018b68 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0018b4f:	90                   	nop
c0018b50:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018b54:	88 c2                	mov    dl,al
c0018b56:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018b5a:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018b61:	01 d0                	add    eax,edx
c0018b63:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018b67:	90                   	nop
c0018b68:	83 ec 04             	sub    esp,0x4
c0018b6b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018b6f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018b73:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018b77:	50                   	push   eax
c0018b78:	e8 76 c4 fe ff       	call   c0004ff3 <f_getlabel>
c0018b7d:	83 c4 10             	add    esp,0x10
c0018b80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018b84:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018b89:	75 09                	jne    c0018b94 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0018b8b:	b8 00 00 00 00       	mov    eax,0x0
c0018b90:	eb 0a                	jmp    c0018b9c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0018b92:	66 90                	xchg   ax,ax
c0018b94:	b8 01 00 00 00       	mov    eax,0x1
c0018b99:	8d 76 00             	lea    esi,[esi+0x0]
c0018b9c:	83 c4 1c             	add    esp,0x1c
c0018b9f:	c3                   	ret    

c0018ba0 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018ba0:	53                   	push   ebx
c0018ba1:	83 ec 58             	sub    esp,0x58
c0018ba4:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018bac:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018bb0:	b9 00 00 00 00       	mov    ecx,0x0
c0018bb5:	b8 3c 00 00 00       	mov    eax,0x3c
c0018bba:	83 e0 f8             	and    eax,0xfffffff8
c0018bbd:	89 c3                	mov    ebx,eax
c0018bbf:	b8 00 00 00 00       	mov    eax,0x0
c0018bc4:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c0018bc8:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c0018bcc:	83 c0 08             	add    eax,0x8
c0018bcf:	39 d8                	cmp    eax,ebx
c0018bd1:	72 f1                	jb     c0018bc4 <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c0018bd3:	01 c2                	add    edx,eax
c0018bd5:	89 0a                	mov    DWORD PTR [edx],ecx
c0018bd7:	83 c2 04             	add    edx,0x4
c0018bda:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018bde:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018be5:	83 f8 ff             	cmp    eax,0xffffffff
c0018be8:	75 36                	jne    c0018c20 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c0018bea:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018bee:	88 c2                	mov    dl,al
c0018bf0:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018bf5:	01 d0                	add    eax,edx
c0018bf7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018bfb:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018c01:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018c05:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018c0c:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018c11:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018c15:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018c1c:	eb 1a                	jmp    c0018c38 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c0018c1e:	66 90                	xchg   ax,ax
c0018c20:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018c24:	88 c2                	mov    dl,al
c0018c26:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018c2a:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018c31:	01 d0                	add    eax,edx
c0018c33:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018c37:	90                   	nop
c0018c38:	83 ec 08             	sub    esp,0x8
c0018c3b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0018c3f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018c43:	50                   	push   eax
c0018c44:	e8 27 7c fe ff       	call   c0000870 <strcat>
c0018c49:	83 c4 10             	add    esp,0x10
c0018c4c:	83 ec 0c             	sub    esp,0xc
c0018c4f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018c53:	50                   	push   eax
c0018c54:	e8 ee c4 fe ff       	call   c0005147 <f_setlabel>
c0018c59:	83 c4 10             	add    esp,0x10
c0018c5c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018c60:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018c65:	75 09                	jne    c0018c70 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c0018c67:	b8 00 00 00 00       	mov    eax,0x0
c0018c6c:	eb 0a                	jmp    c0018c78 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c0018c6e:	66 90                	xchg   ax,ax
c0018c70:	b8 01 00 00 00       	mov    eax,0x1
c0018c75:	8d 76 00             	lea    esi,[esi+0x0]
c0018c78:	83 c4 58             	add    esp,0x58
c0018c7b:	5b                   	pop    ebx
c0018c7c:	c3                   	ret    
c0018c7d:	90                   	nop
c0018c7e:	66 90                	xchg   ax,ax

c0018c80 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018c80:	83 ec 2c             	sub    esp,0x2c
c0018c83:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018c8b:	83 ec 08             	sub    esp,0x8
c0018c8e:	68 04 29 02 c0       	push   0xc0022904
c0018c93:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018c97:	e8 e4 7a fe ff       	call   c0000780 <strcmp>
c0018c9c:	83 c4 10             	add    esp,0x10
c0018c9f:	85 c0                	test   eax,eax
c0018ca1:	0f 94 c0             	sete   al
c0018ca4:	0f b6 c0             	movzx  eax,al
c0018ca7:	85 c0                	test   eax,eax
c0018ca9:	74 0d                	je     c0018cb8 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0018cab:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018cb3:	e9 c0 00 00 00       	jmp    c0018d78 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018cb8:	83 ec 08             	sub    esp,0x8
c0018cbb:	68 f6 28 02 c0       	push   0xc00228f6
c0018cc0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018cc4:	e8 b7 7a fe ff       	call   c0000780 <strcmp>
c0018cc9:	83 c4 10             	add    esp,0x10
c0018ccc:	85 c0                	test   eax,eax
c0018cce:	0f 94 c0             	sete   al
c0018cd1:	0f b6 c0             	movzx  eax,al
c0018cd4:	85 c0                	test   eax,eax
c0018cd6:	74 10                	je     c0018ce8 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0018cd8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018ce0:	e9 93 00 00 00       	jmp    c0018d78 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018ce5:	8d 76 00             	lea    esi,[esi+0x0]
c0018ce8:	83 ec 08             	sub    esp,0x8
c0018ceb:	68 fc 28 02 c0       	push   0xc00228fc
c0018cf0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018cf4:	e8 87 7a fe ff       	call   c0000780 <strcmp>
c0018cf9:	83 c4 10             	add    esp,0x10
c0018cfc:	85 c0                	test   eax,eax
c0018cfe:	0f 94 c0             	sete   al
c0018d01:	0f b6 c0             	movzx  eax,al
c0018d04:	85 c0                	test   eax,eax
c0018d06:	74 0c                	je     c0018d14 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0018d08:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018d10:	eb 66                	jmp    c0018d78 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018d12:	66 90                	xchg   ax,ax
c0018d14:	83 ec 08             	sub    esp,0x8
c0018d17:	68 bc 00 02 c0       	push   0xc00200bc
c0018d1c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018d20:	e8 5b 7a fe ff       	call   c0000780 <strcmp>
c0018d25:	83 c4 10             	add    esp,0x10
c0018d28:	85 c0                	test   eax,eax
c0018d2a:	0f 94 c0             	sete   al
c0018d2d:	0f b6 c0             	movzx  eax,al
c0018d30:	85 c0                	test   eax,eax
c0018d32:	74 0c                	je     c0018d40 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0018d34:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0018d3c:	eb 3a                	jmp    c0018d78 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018d3e:	66 90                	xchg   ax,ax
c0018d40:	83 ec 08             	sub    esp,0x8
c0018d43:	68 02 29 02 c0       	push   0xc0022902
c0018d48:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018d4c:	e8 2f 7a fe ff       	call   c0000780 <strcmp>
c0018d51:	83 c4 10             	add    esp,0x10
c0018d54:	85 c0                	test   eax,eax
c0018d56:	0f 94 c0             	sete   al
c0018d59:	0f b6 c0             	movzx  eax,al
c0018d5c:	85 c0                	test   eax,eax
c0018d5e:	74 0c                	je     c0018d6c <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0018d60:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0018d68:	eb 0e                	jmp    c0018d78 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018d6a:	66 90                	xchg   ax,ax
c0018d6c:	b8 08 00 00 00       	mov    eax,0x8
c0018d71:	e9 ea 00 00 00       	jmp    c0018e60 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018d76:	66 90                	xchg   ax,ax
c0018d78:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0018d7f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018d84:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018d88:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018d8f:	83 f8 ff             	cmp    eax,0xffffffff
c0018d92:	75 34                	jne    c0018dc8 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0018d94:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018d98:	88 c2                	mov    dl,al
c0018d9a:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018d9f:	01 d0                	add    eax,edx
c0018da1:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018da5:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018dab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018daf:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018db6:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018dbb:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018dbf:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018dc6:	eb 18                	jmp    c0018de0 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0018dc8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018dcc:	88 c2                	mov    dl,al
c0018dce:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018dd2:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018dd9:	01 d0                	add    eax,edx
c0018ddb:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018ddf:	90                   	nop
c0018de0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018de4:	88 04 24             	mov    BYTE PTR [esp],al
c0018de7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018deb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018def:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018df7:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0018dfc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018e04:	83 ec 0c             	sub    esp,0xc
c0018e07:	68 00 20 00 00       	push   0x2000
c0018e0c:	e8 c2 ec fe ff       	call   c0007ad3 <malloc>
c0018e11:	83 c4 10             	add    esp,0x10
c0018e14:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018e18:	68 00 20 00 00       	push   0x2000
c0018e1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018e21:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018e25:	50                   	push   eax
c0018e26:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0018e2a:	50                   	push   eax
c0018e2b:	e8 14 c6 fe ff       	call   c0005444 <f_mkfs>
c0018e30:	83 c4 10             	add    esp,0x10
c0018e33:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018e37:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0018e3c:	75 0a                	jne    c0018e48 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0018e3e:	b8 00 00 00 00       	mov    eax,0x0
c0018e43:	eb 1b                	jmp    c0018e60 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018e45:	8d 76 00             	lea    esi,[esi+0x0]
c0018e48:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0018e4d:	75 09                	jne    c0018e58 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0018e4f:	b8 09 00 00 00       	mov    eax,0x9
c0018e54:	eb 0a                	jmp    c0018e60 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018e56:	66 90                	xchg   ax,ax
c0018e58:	b8 01 00 00 00       	mov    eax,0x1
c0018e5d:	8d 76 00             	lea    esi,[esi+0x0]
c0018e60:	83 c4 2c             	add    esp,0x2c
c0018e63:	c3                   	ret    

c0018e64 <FAT::tryMount(LogicalDisk*, int)>:
c0018e64:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0018e6a:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018e6f:	83 f8 14             	cmp    eax,0x14
c0018e72:	75 18                	jne    c0018e8c <FAT::tryMount(LogicalDisk*, int)+0x28>
c0018e74:	83 ec 0c             	sub    esp,0xc
c0018e77:	68 08 29 02 c0       	push   0xc0022908
c0018e7c:	e8 88 84 ff ff       	call   c0011309 <KePanic(char const*)>
c0018e81:	83 c4 10             	add    esp,0x10
c0018e84:	b0 00                	mov    al,0x0
c0018e86:	e9 ed 01 00 00       	jmp    c0019078 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018e8b:	90                   	nop
c0018e8c:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0018e93:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018e99:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018e9f:	3d 00 02 00 00       	cmp    eax,0x200
c0018ea4:	74 0a                	je     c0018eb0 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0018ea6:	b0 00                	mov    al,0x0
c0018ea8:	e9 cb 01 00 00       	jmp    c0019078 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018ead:	8d 76 00             	lea    esi,[esi+0x0]
c0018eb0:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0018eb8:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018ebf:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018ec6:	83 f8 ff             	cmp    eax,0xffffffff
c0018ec9:	74 09                	je     c0018ed4 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0018ecb:	b0 01                	mov    al,0x1
c0018ecd:	e9 a6 01 00 00       	jmp    c0019078 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018ed2:	66 90                	xchg   ax,ax
c0018ed4:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0018ede:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0018ee6:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0018eed:	88 c2                	mov    dl,al
c0018eef:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018ef4:	01 d0                	add    eax,edx
c0018ef6:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0018efd:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018f03:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018f0a:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018f11:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018f16:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0018f1d:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018f24:	83 ec 0c             	sub    esp,0xc
c0018f27:	68 34 02 00 00       	push   0x234
c0018f2c:	e8 a2 eb fe ff       	call   c0007ad3 <malloc>
c0018f31:	83 c4 10             	add    esp,0x10
c0018f34:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0018f3b:	83 ec 04             	sub    esp,0x4
c0018f3e:	6a 00                	push   0x0
c0018f40:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018f47:	50                   	push   eax
c0018f48:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018f4f:	e8 ea ac fe ff       	call   c0003c3e <f_mount>
c0018f54:	83 c4 10             	add    esp,0x10
c0018f57:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018f5e:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0018f66:	74 1c                	je     c0018f84 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0018f68:	83 ec 0c             	sub    esp,0xc
c0018f6b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018f72:	e8 7c eb fe ff       	call   c0007af3 <rfree>
c0018f77:	83 c4 10             	add    esp,0x10
c0018f7a:	b0 00                	mov    al,0x0
c0018f7c:	e9 f7 00 00 00       	jmp    c0019078 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018f81:	8d 76 00             	lea    esi,[esi+0x0]
c0018f84:	83 ec 04             	sub    esp,0x4
c0018f87:	68 00 01 00 00       	push   0x100
c0018f8c:	6a 00                	push   0x0
c0018f8e:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018f95:	50                   	push   eax
c0018f96:	e8 55 75 fe ff       	call   c00004f0 <memset>
c0018f9b:	83 c4 10             	add    esp,0x10
c0018f9e:	83 ec 08             	sub    esp,0x8
c0018fa1:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018fa8:	50                   	push   eax
c0018fa9:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018fb0:	50                   	push   eax
c0018fb1:	e8 ba 78 fe ff       	call   c0000870 <strcat>
c0018fb6:	83 c4 10             	add    esp,0x10
c0018fb9:	83 ec 08             	sub    esp,0x8
c0018fbc:	68 16 29 02 c0       	push   0xc0022916
c0018fc1:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018fc8:	50                   	push   eax
c0018fc9:	e8 a2 78 fe ff       	call   c0000870 <strcat>
c0018fce:	83 c4 10             	add    esp,0x10
c0018fd1:	83 ec 04             	sub    esp,0x4
c0018fd4:	6a 01                	push   0x1
c0018fd6:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0018fdd:	50                   	push   eax
c0018fde:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018fe2:	50                   	push   eax
c0018fe3:	e8 b8 ac fe ff       	call   c0003ca0 <f_open>
c0018fe8:	83 c4 10             	add    esp,0x10
c0018feb:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018ff2:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0018ff9:	85 c0                	test   eax,eax
c0018ffb:	74 0b                	je     c0019008 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0018ffd:	78 31                	js     c0019030 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018fff:	83 e8 04             	sub    eax,0x4
c0019002:	83 f8 01             	cmp    eax,0x1
c0019005:	77 29                	ja     c0019030 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019007:	90                   	nop
c0019008:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0019010:	83 ec 0c             	sub    esp,0xc
c0019013:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019017:	50                   	push   eax
c0019018:	e8 33 b4 fe ff       	call   c0004450 <f_close>
c001901d:	83 c4 10             	add    esp,0x10
c0019020:	90                   	nop
c0019021:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0019029:	85 c0                	test   eax,eax
c001902b:	74 43                	je     c0019070 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001902d:	eb 31                	jmp    c0019060 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001902f:	90                   	nop
c0019030:	83 ec 0c             	sub    esp,0xc
c0019033:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001903a:	e8 b4 ea fe ff       	call   c0007af3 <rfree>
c001903f:	83 c4 10             	add    esp,0x10
c0019042:	83 ec 04             	sub    esp,0x4
c0019045:	6a 00                	push   0x0
c0019047:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001904e:	50                   	push   eax
c001904f:	6a 00                	push   0x0
c0019051:	e8 e8 ab fe ff       	call   c0003c3e <f_mount>
c0019056:	83 c4 10             	add    esp,0x10
c0019059:	b0 00                	mov    al,0x0
c001905b:	eb 1b                	jmp    c0019078 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001905d:	8d 76 00             	lea    esi,[esi+0x0]
c0019060:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0019065:	83 c0 01             	add    eax,0x1
c0019068:	a3 80 97 02 c0       	mov    ds:0xc0029780,eax
c001906d:	8d 76 00             	lea    esi,[esi+0x0]
c0019070:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0019077:	90                   	nop
c0019078:	81 c4 4c 03 00 00    	add    esp,0x34c
c001907e:	c3                   	ret    
c001907f:	90                   	nop

c0019080 <FAT::allocateSwapfile(char const*, int)>:
c0019080:	55                   	push   ebp
c0019081:	57                   	push   edi
c0019082:	56                   	push   esi
c0019083:	53                   	push   ebx
c0019084:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001908a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0019095:	83 ec 0c             	sub    esp,0xc
c0019098:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001909f:	e8 2f ea fe ff       	call   c0007ad3 <malloc>
c00190a4:	83 c4 10             	add    esp,0x10
c00190a7:	89 c7                	mov    edi,eax
c00190a9:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00190ae:	83 ec 04             	sub    esp,0x4
c00190b1:	50                   	push   eax
c00190b2:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c00190b9:	57                   	push   edi
c00190ba:	e8 85 27 ff ff       	call   c000b844 <File::File(char const*, Process*)>
c00190bf:	83 c4 10             	add    esp,0x10
c00190c2:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c00190c9:	83 ec 04             	sub    esp,0x4
c00190cc:	8d 44 24 13          	lea    eax,[esp+0x13]
c00190d0:	50                   	push   eax
c00190d1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00190d5:	50                   	push   eax
c00190d6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00190dd:	e8 2c 2b ff ff       	call   c000bc0e <File::stat(unsigned long long*, bool*)>
c00190e2:	83 c4 10             	add    esp,0x10
c00190e5:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00190ec:	c1 e0 14             	shl    eax,0x14
c00190ef:	89 c7                	mov    edi,eax
c00190f1:	89 c5                	mov    ebp,eax
c00190f3:	c1 fd 1f             	sar    ebp,0x1f
c00190f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190fa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00190fe:	89 f9                	mov    ecx,edi
c0019100:	31 c1                	xor    ecx,eax
c0019102:	89 cb                	mov    ebx,ecx
c0019104:	89 e9                	mov    ecx,ebp
c0019106:	31 d1                	xor    ecx,edx
c0019108:	89 ce                	mov    esi,ecx
c001910a:	89 f0                	mov    eax,esi
c001910c:	09 d8                	or     eax,ebx
c001910e:	0f 84 9c 00 00 00    	je     c00191b0 <FAT::allocateSwapfile(char const*, int)+0x130>
c0019114:	83 ec 0c             	sub    esp,0xc
c0019117:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001911e:	e8 b7 29 ff ff       	call   c000bada <File::unlink()>
c0019123:	83 c4 10             	add    esp,0x10
c0019126:	83 ec 08             	sub    esp,0x8
c0019129:	6a 12                	push   0x12
c001912b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019132:	e8 d5 27 ff ff       	call   c000b90c <File::open(FileOpenMode)>
c0019137:	83 c4 10             	add    esp,0x10
c001913a:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019141:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019147:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001914e:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019155:	c1 e0 14             	shl    eax,0x14
c0019158:	83 ec 04             	sub    esp,0x4
c001915b:	6a 01                	push   0x1
c001915d:	50                   	push   eax
c001915e:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0019165:	e8 6d c1 fe ff       	call   c00052d7 <f_expand>
c001916a:	83 c4 10             	add    esp,0x10
c001916d:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019174:	8b 00                	mov    eax,DWORD PTR [eax]
c0019176:	83 c0 10             	add    eax,0x10
c0019179:	8b 00                	mov    eax,DWORD PTR [eax]
c001917b:	83 ec 0c             	sub    esp,0xc
c001917e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019182:	52                   	push   edx
c0019183:	8d 54 24 30          	lea    edx,[esp+0x30]
c0019187:	52                   	push   edx
c0019188:	6a 00                	push   0x0
c001918a:	68 00 04 00 00       	push   0x400
c001918f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019196:	ff d0                	call   eax
c0019198:	83 c4 20             	add    esp,0x20
c001919b:	83 ec 0c             	sub    esp,0xc
c001919e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00191a5:	e8 c0 27 ff ff       	call   c000b96a <File::close()>
c00191aa:	83 c4 10             	add    esp,0x10
c00191ad:	8d 76 00             	lea    esi,[esi+0x0]
c00191b0:	83 ec 08             	sub    esp,0x8
c00191b3:	6a 01                	push   0x1
c00191b5:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00191bc:	e8 4b 27 ff ff       	call   c000b90c <File::open(FileOpenMode)>
c00191c1:	83 c4 10             	add    esp,0x10
c00191c4:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00191cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00191cd:	83 c0 0c             	add    eax,0xc
c00191d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00191d2:	83 ec 0c             	sub    esp,0xc
c00191d5:	8d 54 24 24          	lea    edx,[esp+0x24]
c00191d9:	52                   	push   edx
c00191da:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00191de:	52                   	push   edx
c00191df:	6a 00                	push   0x0
c00191e1:	6a 04                	push   0x4
c00191e3:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00191ea:	ff d0                	call   eax
c00191ec:	83 c4 20             	add    esp,0x20
c00191ef:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00191f6:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00191fc:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019203:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001920a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001920d:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0019214:	83 ec 0c             	sub    esp,0xc
c0019217:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001921e:	e8 47 27 ff ff       	call   c000b96a <File::close()>
c0019223:	83 c4 10             	add    esp,0x10
c0019226:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001922d:	ba 00 00 00 00       	mov    edx,0x0
c0019232:	81 c4 3c 04 00 00    	add    esp,0x43c
c0019238:	5b                   	pop    ebx
c0019239:	5e                   	pop    esi
c001923a:	5f                   	pop    edi
c001923b:	5d                   	pop    ebp
c001923c:	c3                   	ret    
c001923d:	90                   	nop
c001923e:	66 90                	xchg   ax,ax

c0019240 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0019240:	57                   	push   edi
c0019241:	56                   	push   esi
c0019242:	53                   	push   ebx
c0019243:	81 ec 50 02 00 00    	sub    esp,0x250
c0019249:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0019251:	74 0d                	je     c0019260 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0019253:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001925b:	75 0f                	jne    c001926c <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001925d:	8d 76 00             	lea    esi,[esi+0x0]
c0019260:	b8 04 00 00 00       	mov    eax,0x4
c0019265:	e9 3a 01 00 00       	jmp    c00193a4 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001926a:	66 90                	xchg   ax,ax
c001926c:	83 ec 08             	sub    esp,0x8
c001926f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019276:	50                   	push   eax
c0019277:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001927e:	e8 99 b4 fe ff       	call   c000471c <f_readdir>
c0019283:	83 c4 10             	add    esp,0x10
c0019286:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001928d:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0019294:	83 ec 0c             	sub    esp,0xc
c0019297:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001929e:	83 c0 16             	add    eax,0x16
c00192a1:	50                   	push   eax
c00192a2:	e8 d9 72 fe ff       	call   c0000580 <strlen>
c00192a7:	83 c4 10             	add    esp,0x10
c00192aa:	ba 00 00 00 00       	mov    edx,0x0
c00192af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00192b3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00192b7:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00192be:	0f b6 c0             	movzx  eax,al
c00192c1:	83 e0 10             	and    eax,0x10
c00192c4:	74 0a                	je     c00192d0 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c00192c6:	b8 02 00 00 00       	mov    eax,0x2
c00192cb:	eb 0b                	jmp    c00192d8 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c00192cd:	8d 76 00             	lea    esi,[esi+0x0]
c00192d0:	b8 01 00 00 00       	mov    eax,0x1
c00192d5:	8d 76 00             	lea    esi,[esi+0x0]
c00192d8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00192dc:	83 ec 08             	sub    esp,0x8
c00192df:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00192e6:	83 c0 16             	add    eax,0x16
c00192e9:	50                   	push   eax
c00192ea:	8d 44 24 14          	lea    eax,[esp+0x14]
c00192ee:	83 c0 10             	add    eax,0x10
c00192f1:	50                   	push   eax
c00192f2:	e8 59 73 fe ff       	call   c0000650 <strcpy>
c00192f7:	83 c4 10             	add    esp,0x10
c00192fa:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0019301:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0019308:	8d 44 24 08          	lea    eax,[esp+0x8]
c001930c:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0019313:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001931a:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0019321:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0019328:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001932f:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0019336:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001933d:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0019344:	89 c6                	mov    esi,eax
c0019346:	89 d7                	mov    edi,edx
c0019348:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001934a:	89 c8                	mov    eax,ecx
c001934c:	89 fa                	mov    edx,edi
c001934e:	89 f3                	mov    ebx,esi
c0019350:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0019357:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001935e:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0019365:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001936c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0019372:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0019379:	0f be c0             	movsx  eax,al
c001937c:	85 c0                	test   eax,eax
c001937e:	75 08                	jne    c0019388 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0019380:	b8 07 00 00 00       	mov    eax,0x7
c0019385:	eb 1d                	jmp    c00193a4 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019387:	90                   	nop
c0019388:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001938f:	85 c0                	test   eax,eax
c0019391:	75 09                	jne    c001939c <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0019393:	b8 00 00 00 00       	mov    eax,0x0
c0019398:	eb 0a                	jmp    c00193a4 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001939a:	66 90                	xchg   ax,ax
c001939c:	b8 01 00 00 00       	mov    eax,0x1
c00193a1:	8d 76 00             	lea    esi,[esi+0x0]
c00193a4:	81 c4 50 02 00 00    	add    esp,0x250
c00193aa:	5b                   	pop    ebx
c00193ab:	5e                   	pop    esi
c00193ac:	5f                   	pop    edi
c00193ad:	c3                   	ret    
c00193ae:	66 90                	xchg   ax,ax

c00193b0 <FAT::read(void*, unsigned long, void*, int*)>:
c00193b0:	83 ec 1c             	sub    esp,0x1c
c00193b3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00193b8:	74 0a                	je     c00193c4 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c00193ba:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00193bf:	75 0b                	jne    c00193cc <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c00193c1:	8d 76 00             	lea    esi,[esi+0x0]
c00193c4:	b8 04 00 00 00       	mov    eax,0x4
c00193c9:	eb 41                	jmp    c001940c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00193cb:	90                   	nop
c00193cc:	8d 44 24 08          	lea    eax,[esp+0x8]
c00193d0:	50                   	push   eax
c00193d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00193d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00193d9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00193dd:	e8 81 ab fe ff       	call   c0003f63 <f_read>
c00193e2:	83 c4 10             	add    esp,0x10
c00193e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00193e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00193ed:	89 c2                	mov    edx,eax
c00193ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00193f3:	89 10                	mov    DWORD PTR [eax],edx
c00193f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00193f9:	85 c0                	test   eax,eax
c00193fb:	75 07                	jne    c0019404 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c00193fd:	b8 00 00 00 00       	mov    eax,0x0
c0019402:	eb 08                	jmp    c001940c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019404:	b8 01 00 00 00       	mov    eax,0x1
c0019409:	8d 76 00             	lea    esi,[esi+0x0]
c001940c:	83 c4 1c             	add    esp,0x1c
c001940f:	c3                   	ret    

c0019410 <FAT::write(void*, unsigned long, void*, int*)>:
c0019410:	83 ec 1c             	sub    esp,0x1c
c0019413:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019418:	74 0a                	je     c0019424 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001941a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001941f:	75 0b                	jne    c001942c <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0019421:	8d 76 00             	lea    esi,[esi+0x0]
c0019424:	b8 04 00 00 00       	mov    eax,0x4
c0019429:	eb 41                	jmp    c001946c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001942b:	90                   	nop
c001942c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019430:	50                   	push   eax
c0019431:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019435:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019439:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001943d:	e8 02 ad fe ff       	call   c0004144 <f_write>
c0019442:	83 c4 10             	add    esp,0x10
c0019445:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019449:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001944d:	89 c2                	mov    edx,eax
c001944f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019453:	89 10                	mov    DWORD PTR [eax],edx
c0019455:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019459:	85 c0                	test   eax,eax
c001945b:	75 07                	jne    c0019464 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001945d:	b8 00 00 00 00       	mov    eax,0x0
c0019462:	eb 08                	jmp    c001946c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019464:	b8 01 00 00 00       	mov    eax,0x1
c0019469:	8d 76 00             	lea    esi,[esi+0x0]
c001946c:	83 c4 1c             	add    esp,0x1c
c001946f:	c3                   	ret    

c0019470 <FAT::close(void*)>:
c0019470:	83 ec 1c             	sub    esp,0x1c
c0019473:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019478:	75 0a                	jne    c0019484 <FAT::close(void*)+0x14>
c001947a:	b8 04 00 00 00       	mov    eax,0x4
c001947f:	eb 3f                	jmp    c00194c0 <FAT::close(void*)+0x50>
c0019481:	8d 76 00             	lea    esi,[esi+0x0]
c0019484:	83 ec 0c             	sub    esp,0xc
c0019487:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001948b:	e8 c0 af fe ff       	call   c0004450 <f_close>
c0019490:	83 c4 10             	add    esp,0x10
c0019493:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019497:	83 ec 0c             	sub    esp,0xc
c001949a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001949e:	e8 40 e6 fe ff       	call   c0007ae3 <free>
c00194a3:	83 c4 10             	add    esp,0x10
c00194a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00194aa:	85 c0                	test   eax,eax
c00194ac:	75 0a                	jne    c00194b8 <FAT::close(void*)+0x48>
c00194ae:	b8 00 00 00 00       	mov    eax,0x0
c00194b3:	eb 0b                	jmp    c00194c0 <FAT::close(void*)+0x50>
c00194b5:	8d 76 00             	lea    esi,[esi+0x0]
c00194b8:	b8 01 00 00 00       	mov    eax,0x1
c00194bd:	8d 76 00             	lea    esi,[esi+0x0]
c00194c0:	83 c4 1c             	add    esp,0x1c
c00194c3:	c3                   	ret    

c00194c4 <FAT::closeDir(void*)>:
c00194c4:	83 ec 1c             	sub    esp,0x1c
c00194c7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00194cc:	75 0a                	jne    c00194d8 <FAT::closeDir(void*)+0x14>
c00194ce:	b8 04 00 00 00       	mov    eax,0x4
c00194d3:	eb 3f                	jmp    c0019514 <FAT::closeDir(void*)+0x50>
c00194d5:	8d 76 00             	lea    esi,[esi+0x0]
c00194d8:	83 ec 0c             	sub    esp,0xc
c00194db:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00194df:	e8 16 b2 fe ff       	call   c00046fa <f_closedir>
c00194e4:	83 c4 10             	add    esp,0x10
c00194e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00194eb:	83 ec 0c             	sub    esp,0xc
c00194ee:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00194f2:	e8 ec e5 fe ff       	call   c0007ae3 <free>
c00194f7:	83 c4 10             	add    esp,0x10
c00194fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00194fe:	85 c0                	test   eax,eax
c0019500:	75 0a                	jne    c001950c <FAT::closeDir(void*)+0x48>
c0019502:	b8 00 00 00 00       	mov    eax,0x0
c0019507:	eb 0b                	jmp    c0019514 <FAT::closeDir(void*)+0x50>
c0019509:	8d 76 00             	lea    esi,[esi+0x0]
c001950c:	b8 01 00 00 00       	mov    eax,0x1
c0019511:	8d 76 00             	lea    esi,[esi+0x0]
c0019514:	83 c4 1c             	add    esp,0x1c
c0019517:	c3                   	ret    

c0019518 <FAT::truncate(void*, unsigned long long)>:
c0019518:	83 ec 2c             	sub    esp,0x2c
c001951b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001951f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019523:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019527:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001952b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019530:	75 0a                	jne    c001953c <FAT::truncate(void*, unsigned long long)+0x24>
c0019532:	b8 04 00 00 00       	mov    eax,0x4
c0019537:	eb 47                	jmp    c0019580 <FAT::truncate(void*, unsigned long long)+0x68>
c0019539:	8d 76 00             	lea    esi,[esi+0x0]
c001953c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019540:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019543:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019547:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001954f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019553:	83 ec 08             	sub    esp,0x8
c0019556:	50                   	push   eax
c0019557:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001955b:	e8 1f af fe ff       	call   c000447f <f_lseek>
c0019560:	83 c4 10             	add    esp,0x10
c0019563:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019567:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001956b:	85 c0                	test   eax,eax
c001956d:	75 09                	jne    c0019578 <FAT::truncate(void*, unsigned long long)+0x60>
c001956f:	b8 00 00 00 00       	mov    eax,0x0
c0019574:	eb 0a                	jmp    c0019580 <FAT::truncate(void*, unsigned long long)+0x68>
c0019576:	66 90                	xchg   ax,ax
c0019578:	b8 01 00 00 00       	mov    eax,0x1
c001957d:	8d 76 00             	lea    esi,[esi+0x0]
c0019580:	83 c4 2c             	add    esp,0x2c
c0019583:	c3                   	ret    

c0019584 <FAT::seek(void*, unsigned long long)>:
c0019584:	83 ec 2c             	sub    esp,0x2c
c0019587:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001958b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001958f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019593:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019597:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001959c:	75 0a                	jne    c00195a8 <FAT::seek(void*, unsigned long long)+0x24>
c001959e:	b8 04 00 00 00       	mov    eax,0x4
c00195a3:	eb 33                	jmp    c00195d8 <FAT::seek(void*, unsigned long long)+0x54>
c00195a5:	8d 76 00             	lea    esi,[esi+0x0]
c00195a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00195ac:	83 ec 08             	sub    esp,0x8
c00195af:	50                   	push   eax
c00195b0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00195b4:	e8 c6 ae fe ff       	call   c000447f <f_lseek>
c00195b9:	83 c4 10             	add    esp,0x10
c00195bc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00195c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00195c4:	85 c0                	test   eax,eax
c00195c6:	75 08                	jne    c00195d0 <FAT::seek(void*, unsigned long long)+0x4c>
c00195c8:	b8 00 00 00 00       	mov    eax,0x0
c00195cd:	eb 09                	jmp    c00195d8 <FAT::seek(void*, unsigned long long)+0x54>
c00195cf:	90                   	nop
c00195d0:	b8 01 00 00 00       	mov    eax,0x1
c00195d5:	8d 76 00             	lea    esi,[esi+0x0]
c00195d8:	83 c4 2c             	add    esp,0x2c
c00195db:	c3                   	ret    

c00195dc <fatWrapperReadDisk>:
c00195dc:	53                   	push   ebx
c00195dd:	83 ec 18             	sub    esp,0x18
c00195e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00195e4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00195e8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00195ed:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c00195f4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00195f8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00195fc:	ba 00 00 00 00       	mov    edx,0x0
c0019601:	83 ec 0c             	sub    esp,0xc
c0019604:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019608:	53                   	push   ebx
c0019609:	52                   	push   edx
c001960a:	50                   	push   eax
c001960b:	51                   	push   ecx
c001960c:	e8 45 45 ff ff       	call   c000db56 <LogicalDisk::read(unsigned long long, int, void*)>
c0019611:	83 c4 20             	add    esp,0x20
c0019614:	83 c4 18             	add    esp,0x18
c0019617:	5b                   	pop    ebx
c0019618:	c3                   	ret    
c0019619:	8d 76 00             	lea    esi,[esi+0x0]

c001961c <fatWrapperWriteDisk>:
c001961c:	53                   	push   ebx
c001961d:	83 ec 18             	sub    esp,0x18
c0019620:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019624:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019628:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001962d:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0019634:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019638:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001963c:	ba 00 00 00 00       	mov    edx,0x0
c0019641:	83 ec 0c             	sub    esp,0xc
c0019644:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019648:	53                   	push   ebx
c0019649:	52                   	push   edx
c001964a:	50                   	push   eax
c001964b:	51                   	push   ecx
c001964c:	e8 71 45 ff ff       	call   c000dbc2 <LogicalDisk::write(unsigned long long, int, void*)>
c0019651:	83 c4 20             	add    esp,0x20
c0019654:	83 c4 18             	add    esp,0x18
c0019657:	5b                   	pop    ebx
c0019658:	c3                   	ret    
c0019659:	8d 76 00             	lea    esi,[esi+0x0]

c001965c <fatWrapperIoctl>:
c001965c:	53                   	push   ebx
c001965d:	83 ec 28             	sub    esp,0x28
c0019660:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019664:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019668:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001966c:	88 d0                	mov    al,dl
c001966e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019672:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019677:	83 f8 02             	cmp    eax,0x2
c001967a:	75 34                	jne    c00196b0 <fatWrapperIoctl+0x54>
c001967c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019680:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019684:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019689:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c0019690:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019696:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001969c:	89 c2                	mov    edx,eax
c001969e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00196a2:	66 89 10             	mov    WORD PTR [eax],dx
c00196a5:	b8 00 00 00 00       	mov    eax,0x0
c00196aa:	e9 c5 00 00 00       	jmp    c0019774 <fatWrapperIoctl+0x118>
c00196af:	90                   	nop
c00196b0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00196b5:	83 f8 01             	cmp    eax,0x1
c00196b8:	75 6a                	jne    c0019724 <fatWrapperIoctl+0xc8>
c00196ba:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00196be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00196c2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00196c7:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c00196ce:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00196d4:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00196da:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00196e0:	89 c8                	mov    eax,ecx
c00196e2:	89 da                	mov    edx,ebx
c00196e4:	0f a4 c2 0a          	shld   edx,eax,0xa
c00196e8:	c1 e0 0a             	shl    eax,0xa
c00196eb:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00196f0:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c00196f7:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00196fd:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019703:	89 cb                	mov    ebx,ecx
c0019705:	c1 fb 1f             	sar    ebx,0x1f
c0019708:	53                   	push   ebx
c0019709:	51                   	push   ecx
c001970a:	52                   	push   edx
c001970b:	50                   	push   eax
c001970c:	e8 af 5b 00 00       	call   c001f2c0 <__udivdi3>
c0019711:	83 c4 10             	add    esp,0x10
c0019714:	89 c2                	mov    edx,eax
c0019716:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001971a:	89 10                	mov    DWORD PTR [eax],edx
c001971c:	b8 00 00 00 00       	mov    eax,0x0
c0019721:	eb 51                	jmp    c0019774 <fatWrapperIoctl+0x118>
c0019723:	90                   	nop
c0019724:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019729:	85 c0                	test   eax,eax
c001972b:	75 07                	jne    c0019734 <fatWrapperIoctl+0xd8>
c001972d:	b8 00 00 00 00       	mov    eax,0x0
c0019732:	eb 40                	jmp    c0019774 <fatWrapperIoctl+0x118>
c0019734:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019739:	83 f8 03             	cmp    eax,0x3
c001973c:	75 1a                	jne    c0019758 <fatWrapperIoctl+0xfc>
c001973e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019742:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001974a:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019750:	b8 00 00 00 00       	mov    eax,0x0
c0019755:	eb 1d                	jmp    c0019774 <fatWrapperIoctl+0x118>
c0019757:	90                   	nop
c0019758:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001975d:	83 f8 04             	cmp    eax,0x4
c0019760:	75 0a                	jne    c001976c <fatWrapperIoctl+0x110>
c0019762:	b8 00 00 00 00       	mov    eax,0x0
c0019767:	eb 0b                	jmp    c0019774 <fatWrapperIoctl+0x118>
c0019769:	8d 76 00             	lea    esi,[esi+0x0]
c001976c:	b8 04 00 00 00       	mov    eax,0x4
c0019771:	8d 76 00             	lea    esi,[esi+0x0]
c0019774:	83 c4 28             	add    esp,0x28
c0019777:	5b                   	pop    ebx
c0019778:	c3                   	ret    
c0019779:	90                   	nop
c001977a:	66 90                	xchg   ax,ax

c001977c <FAT::FAT()>:
c001977c:	83 ec 1c             	sub    esp,0x1c
c001977f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019783:	83 ec 0c             	sub    esp,0xc
c0019786:	50                   	push   eax
c0019787:	e8 76 1d ff ff       	call   c000b502 <Filesystem::Filesystem()>
c001978c:	83 c4 10             	add    esp,0x10
c001978f:	ba 2c 29 02 c0       	mov    edx,0xc002292c
c0019794:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019798:	89 10                	mov    DWORD PTR [eax],edx
c001979a:	c7 05 80 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029780,0x0
c00197a4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00197ac:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00197b1:	7f 19                	jg     c00197cc <FAT::FAT()+0x50>
c00197b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00197b7:	c7 04 85 a0 97 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd6860],0xffffffff
c00197c2:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00197c7:	eb e3                	jmp    c00197ac <FAT::FAT()+0x30>
c00197c9:	8d 76 00             	lea    esi,[esi+0x0]
c00197cc:	90                   	nop
c00197cd:	83 c4 1c             	add    esp,0x1c
c00197d0:	c3                   	ret    
c00197d1:	90                   	nop
c00197d2:	66 90                	xchg   ax,ax

c00197d4 <FAT::fixFilepath(char*)>:
c00197d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197d8:	8a 00                	mov    al,BYTE PTR [eax]
c00197da:	0f be c0             	movsx  eax,al
c00197dd:	83 f8 40             	cmp    eax,0x40
c00197e0:	7e 2e                	jle    c0019810 <FAT::fixFilepath(char*)+0x3c>
c00197e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197e6:	8a 00                	mov    al,BYTE PTR [eax]
c00197e8:	83 e8 41             	sub    eax,0x41
c00197eb:	88 c2                	mov    dl,al
c00197ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197f1:	88 10                	mov    BYTE PTR [eax],dl
c00197f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197f7:	8a 00                	mov    al,BYTE PTR [eax]
c00197f9:	0f be c0             	movsx  eax,al
c00197fc:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0019803:	83 c0 30             	add    eax,0x30
c0019806:	88 c2                	mov    dl,al
c0019808:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001980c:	88 10                	mov    BYTE PTR [eax],dl
c001980e:	66 90                	xchg   ax,ax
c0019810:	90                   	nop
c0019811:	c3                   	ret    
c0019812:	66 90                	xchg   ax,ax

c0019814 <FAT::open(char const*, void**, FileOpenMode)>:
c0019814:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001981a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019822:	74 0c                	je     c0019830 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0019824:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001982c:	75 0e                	jne    c001983c <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001982e:	66 90                	xchg   ax,ax
c0019830:	b8 04 00 00 00       	mov    eax,0x4
c0019835:	e9 46 01 00 00       	jmp    c0019980 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001983a:	66 90                	xchg   ax,ax
c001983c:	83 ec 08             	sub    esp,0x8
c001983f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019846:	8d 44 24 14          	lea    eax,[esp+0x14]
c001984a:	50                   	push   eax
c001984b:	e8 00 6e fe ff       	call   c0000650 <strcpy>
c0019850:	83 c4 10             	add    esp,0x10
c0019853:	83 ec 08             	sub    esp,0x8
c0019856:	8d 44 24 10          	lea    eax,[esp+0x10]
c001985a:	50                   	push   eax
c001985b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019862:	e8 6d ff ff ff       	call   c00197d4 <FAT::fixFilepath(char*)>
c0019867:	83 c4 10             	add    esp,0x10
c001986a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019872:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019879:	83 e0 01             	and    eax,0x1
c001987c:	74 12                	je     c0019890 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001987e:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019885:	83 c8 01             	or     eax,0x1
c0019888:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001988f:	90                   	nop
c0019890:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019897:	83 e0 04             	and    eax,0x4
c001989a:	74 24                	je     c00198c0 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001989c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00198a3:	83 c8 30             	or     eax,0x30
c00198a6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00198ad:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00198b4:	83 c8 02             	or     eax,0x2
c00198b7:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00198be:	66 90                	xchg   ax,ax
c00198c0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00198c7:	83 e0 02             	and    eax,0x2
c00198ca:	74 14                	je     c00198e0 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c00198cc:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00198d3:	83 c8 02             	or     eax,0x2
c00198d6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00198dd:	8d 76 00             	lea    esi,[esi+0x0]
c00198e0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00198e7:	83 e0 08             	and    eax,0x8
c00198ea:	74 14                	je     c0019900 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c00198ec:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00198f3:	83 c8 04             	or     eax,0x4
c00198f6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00198fd:	8d 76 00             	lea    esi,[esi+0x0]
c0019900:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019907:	83 e0 10             	and    eax,0x10
c001990a:	74 14                	je     c0019920 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001990c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019913:	83 c8 08             	or     eax,0x8
c0019916:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001991d:	8d 76 00             	lea    esi,[esi+0x0]
c0019920:	83 ec 0c             	sub    esp,0xc
c0019923:	68 28 02 00 00       	push   0x228
c0019928:	e8 a6 e1 fe ff       	call   c0007ad3 <malloc>
c001992d:	83 c4 10             	add    esp,0x10
c0019930:	89 c2                	mov    edx,eax
c0019932:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019939:	89 10                	mov    DWORD PTR [eax],edx
c001993b:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019943:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001994a:	8b 00                	mov    eax,DWORD PTR [eax]
c001994c:	83 ec 04             	sub    esp,0x4
c001994f:	52                   	push   edx
c0019950:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019954:	52                   	push   edx
c0019955:	50                   	push   eax
c0019956:	e8 45 a3 fe ff       	call   c0003ca0 <f_open>
c001995b:	83 c4 10             	add    esp,0x10
c001995e:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019965:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001996d:	74 09                	je     c0019978 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001996f:	b8 01 00 00 00       	mov    eax,0x1
c0019974:	eb 0a                	jmp    c0019980 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019976:	66 90                	xchg   ax,ax
c0019978:	b8 00 00 00 00       	mov    eax,0x0
c001997d:	8d 76 00             	lea    esi,[esi+0x0]
c0019980:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019986:	c3                   	ret    
c0019987:	90                   	nop

c0019988 <FAT::openDir(char const*, void**)>:
c0019988:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001998e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019996:	74 0c                	je     c00199a4 <FAT::openDir(char const*, void**)+0x1c>
c0019998:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00199a0:	75 0e                	jne    c00199b0 <FAT::openDir(char const*, void**)+0x28>
c00199a2:	66 90                	xchg   ax,ax
c00199a4:	b8 04 00 00 00       	mov    eax,0x4
c00199a9:	e9 82 00 00 00       	jmp    c0019a30 <FAT::openDir(char const*, void**)+0xa8>
c00199ae:	66 90                	xchg   ax,ax
c00199b0:	83 ec 08             	sub    esp,0x8
c00199b3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00199ba:	8d 44 24 18          	lea    eax,[esp+0x18]
c00199be:	50                   	push   eax
c00199bf:	e8 8c 6c fe ff       	call   c0000650 <strcpy>
c00199c4:	83 c4 10             	add    esp,0x10
c00199c7:	83 ec 08             	sub    esp,0x8
c00199ca:	8d 44 24 14          	lea    eax,[esp+0x14]
c00199ce:	50                   	push   eax
c00199cf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00199d6:	e8 f9 fd ff ff       	call   c00197d4 <FAT::fixFilepath(char*)>
c00199db:	83 c4 10             	add    esp,0x10
c00199de:	83 ec 0c             	sub    esp,0xc
c00199e1:	6a 30                	push   0x30
c00199e3:	e8 eb e0 fe ff       	call   c0007ad3 <malloc>
c00199e8:	83 c4 10             	add    esp,0x10
c00199eb:	89 c2                	mov    edx,eax
c00199ed:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00199f4:	89 10                	mov    DWORD PTR [eax],edx
c00199f6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00199fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00199ff:	83 ec 08             	sub    esp,0x8
c0019a02:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019a06:	52                   	push   edx
c0019a07:	50                   	push   eax
c0019a08:	e8 22 ac fe ff       	call   c000462f <f_opendir>
c0019a0d:	83 c4 10             	add    esp,0x10
c0019a10:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019a17:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019a1f:	74 07                	je     c0019a28 <FAT::openDir(char const*, void**)+0xa0>
c0019a21:	b8 01 00 00 00       	mov    eax,0x1
c0019a26:	eb 08                	jmp    c0019a30 <FAT::openDir(char const*, void**)+0xa8>
c0019a28:	b8 00 00 00 00       	mov    eax,0x0
c0019a2d:	8d 76 00             	lea    esi,[esi+0x0]
c0019a30:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019a36:	c3                   	ret    
c0019a37:	90                   	nop

c0019a38 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019a38:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019a3e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019a46:	75 0c                	jne    c0019a54 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019a48:	b8 04 00 00 00       	mov    eax,0x4
c0019a4d:	e9 d6 00 00 00       	jmp    c0019b28 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019a52:	66 90                	xchg   ax,ax
c0019a54:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019a5c:	75 0a                	jne    c0019a68 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0019a5e:	b8 04 00 00 00       	mov    eax,0x4
c0019a63:	e9 c0 00 00 00       	jmp    c0019b28 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019a68:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019a70:	75 0a                	jne    c0019a7c <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0019a72:	b8 04 00 00 00       	mov    eax,0x4
c0019a77:	e9 ac 00 00 00       	jmp    c0019b28 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019a7c:	83 ec 08             	sub    esp,0x8
c0019a7f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019a86:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019a8d:	50                   	push   eax
c0019a8e:	e8 bd 6b fe ff       	call   c0000650 <strcpy>
c0019a93:	83 c4 10             	add    esp,0x10
c0019a96:	83 ec 08             	sub    esp,0x8
c0019a99:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019aa0:	50                   	push   eax
c0019aa1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019aa8:	e8 27 fd ff ff       	call   c00197d4 <FAT::fixFilepath(char*)>
c0019aad:	83 c4 10             	add    esp,0x10
c0019ab0:	83 ec 08             	sub    esp,0x8
c0019ab3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019ab7:	50                   	push   eax
c0019ab8:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019abf:	50                   	push   eax
c0019ac0:	e8 e9 ac fe ff       	call   c00047ae <f_stat>
c0019ac5:	83 c4 10             	add    esp,0x10
c0019ac8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019acf:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019ad6:	85 c0                	test   eax,eax
c0019ad8:	74 0a                	je     c0019ae4 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0019ada:	83 f8 04             	cmp    eax,0x4
c0019add:	74 39                	je     c0019b18 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019adf:	eb 3f                	jmp    c0019b20 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0019ae1:	8d 76 00             	lea    esi,[esi+0x0]
c0019ae4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019ae8:	0f b6 c0             	movzx  eax,al
c0019aeb:	83 e0 10             	and    eax,0x10
c0019aee:	0f 95 c2             	setne  dl
c0019af1:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019af8:	88 10                	mov    BYTE PTR [eax],dl
c0019afa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019afe:	ba 00 00 00 00       	mov    edx,0x0
c0019b03:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019b0a:	89 01                	mov    DWORD PTR [ecx],eax
c0019b0c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019b0f:	b8 00 00 00 00       	mov    eax,0x0
c0019b14:	eb 12                	jmp    c0019b28 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019b16:	66 90                	xchg   ax,ax
c0019b18:	b8 02 00 00 00       	mov    eax,0x2
c0019b1d:	eb 09                	jmp    c0019b28 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019b1f:	90                   	nop
c0019b20:	b8 01 00 00 00       	mov    eax,0x1
c0019b25:	8d 76 00             	lea    esi,[esi+0x0]
c0019b28:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019b2e:	c3                   	ret    
c0019b2f:	90                   	nop

c0019b30 <FAT::unlink(char const*)>:
c0019b30:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019b36:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019b3e:	75 08                	jne    c0019b48 <FAT::unlink(char const*)+0x18>
c0019b40:	b8 04 00 00 00       	mov    eax,0x4
c0019b45:	eb 61                	jmp    c0019ba8 <FAT::unlink(char const*)+0x78>
c0019b47:	90                   	nop
c0019b48:	83 ec 08             	sub    esp,0x8
c0019b4b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019b52:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019b56:	50                   	push   eax
c0019b57:	e8 f4 6a fe ff       	call   c0000650 <strcpy>
c0019b5c:	83 c4 10             	add    esp,0x10
c0019b5f:	83 ec 08             	sub    esp,0x8
c0019b62:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019b66:	50                   	push   eax
c0019b67:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019b6e:	e8 61 fc ff ff       	call   c00197d4 <FAT::fixFilepath(char*)>
c0019b73:	83 c4 10             	add    esp,0x10
c0019b76:	83 ec 0c             	sub    esp,0xc
c0019b79:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019b7d:	50                   	push   eax
c0019b7e:	e8 9d ae fe ff       	call   c0004a20 <f_unlink>
c0019b83:	83 c4 10             	add    esp,0x10
c0019b86:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019b8d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019b94:	85 c0                	test   eax,eax
c0019b96:	75 08                	jne    c0019ba0 <FAT::unlink(char const*)+0x70>
c0019b98:	b8 00 00 00 00       	mov    eax,0x0
c0019b9d:	eb 09                	jmp    c0019ba8 <FAT::unlink(char const*)+0x78>
c0019b9f:	90                   	nop
c0019ba0:	b8 01 00 00 00       	mov    eax,0x1
c0019ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0019ba8:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019bae:	c3                   	ret    
c0019baf:	90                   	nop

c0019bb0 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019bb0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019bb6:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0019bbd:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c0019bc4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019bc8:	88 d0                	mov    al,dl
c0019bca:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019bce:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019bd6:	75 0c                	jne    c0019be4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c0019bd8:	b8 04 00 00 00       	mov    eax,0x4
c0019bdd:	e9 7e 01 00 00       	jmp    c0019d60 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0019be2:	66 90                	xchg   ax,ax
c0019be4:	83 ec 08             	sub    esp,0x8
c0019be7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019bee:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019bf2:	50                   	push   eax
c0019bf3:	e8 58 6a fe ff       	call   c0000650 <strcpy>
c0019bf8:	83 c4 10             	add    esp,0x10
c0019bfb:	83 ec 08             	sub    esp,0x8
c0019bfe:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019c02:	50                   	push   eax
c0019c03:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019c0a:	e8 c5 fb ff ff       	call   c00197d4 <FAT::fixFilepath(char*)>
c0019c0f:	83 c4 10             	add    esp,0x10
c0019c12:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019c1a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0019c22:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c27:	83 e0 01             	and    eax,0x1
c0019c2a:	74 14                	je     c0019c40 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c0019c2c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019c33:	83 c8 01             	or     eax,0x1
c0019c36:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019c3d:	8d 76 00             	lea    esi,[esi+0x0]
c0019c40:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c45:	83 e0 02             	and    eax,0x2
c0019c48:	74 12                	je     c0019c5c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c0019c4a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019c51:	83 c8 20             	or     eax,0x20
c0019c54:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019c5b:	90                   	nop
c0019c5c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c61:	83 e0 04             	and    eax,0x4
c0019c64:	74 12                	je     c0019c78 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0019c66:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019c6d:	83 c8 04             	or     eax,0x4
c0019c70:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019c77:	90                   	nop
c0019c78:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c7d:	83 e0 08             	and    eax,0x8
c0019c80:	74 12                	je     c0019c94 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c0019c82:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019c89:	83 c8 02             	or     eax,0x2
c0019c8c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019c93:	90                   	nop
c0019c94:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c99:	83 e0 01             	and    eax,0x1
c0019c9c:	74 12                	je     c0019cb0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c0019c9e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019ca5:	83 c8 01             	or     eax,0x1
c0019ca8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019caf:	90                   	nop
c0019cb0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019cb5:	83 e0 02             	and    eax,0x2
c0019cb8:	74 12                	je     c0019ccc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c0019cba:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019cc1:	83 c8 20             	or     eax,0x20
c0019cc4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019ccb:	90                   	nop
c0019ccc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019cd1:	83 e0 04             	and    eax,0x4
c0019cd4:	74 12                	je     c0019ce8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c0019cd6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019cdd:	83 c8 04             	or     eax,0x4
c0019ce0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019ce7:	90                   	nop
c0019ce8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019ced:	83 e0 08             	and    eax,0x8
c0019cf0:	74 12                	je     c0019d04 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c0019cf2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019cf9:	83 c8 02             	or     eax,0x2
c0019cfc:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019d03:	90                   	nop
c0019d04:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0019d0b:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019d12:	09 d0                	or     eax,edx
c0019d14:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019d1b:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0019d23:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019d2b:	83 ec 04             	sub    esp,0x4
c0019d2e:	52                   	push   edx
c0019d2f:	50                   	push   eax
c0019d30:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019d34:	50                   	push   eax
c0019d35:	e8 59 b1 fe ff       	call   c0004e93 <f_chmod>
c0019d3a:	83 c4 10             	add    esp,0x10
c0019d3d:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019d44:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019d4b:	85 c0                	test   eax,eax
c0019d4d:	75 09                	jne    c0019d58 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c0019d4f:	b8 00 00 00 00       	mov    eax,0x0
c0019d54:	eb 0a                	jmp    c0019d60 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0019d56:	66 90                	xchg   ax,ax
c0019d58:	b8 01 00 00 00       	mov    eax,0x1
c0019d5d:	8d 76 00             	lea    esi,[esi+0x0]
c0019d60:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019d66:	c3                   	ret    
c0019d67:	90                   	nop

c0019d68 <FAT::rename(char const*, char const*)>:
c0019d68:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019d6e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019d76:	74 0c                	je     c0019d84 <FAT::rename(char const*, char const*)+0x1c>
c0019d78:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019d80:	75 0e                	jne    c0019d90 <FAT::rename(char const*, char const*)+0x28>
c0019d82:	66 90                	xchg   ax,ax
c0019d84:	b8 04 00 00 00       	mov    eax,0x4
c0019d89:	e9 9e 00 00 00       	jmp    c0019e2c <FAT::rename(char const*, char const*)+0xc4>
c0019d8e:	66 90                	xchg   ax,ax
c0019d90:	83 ec 08             	sub    esp,0x8
c0019d93:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019d9a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019da1:	50                   	push   eax
c0019da2:	e8 a9 68 fe ff       	call   c0000650 <strcpy>
c0019da7:	83 c4 10             	add    esp,0x10
c0019daa:	83 ec 08             	sub    esp,0x8
c0019dad:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019db4:	50                   	push   eax
c0019db5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019dbc:	e8 13 fa ff ff       	call   c00197d4 <FAT::fixFilepath(char*)>
c0019dc1:	83 c4 10             	add    esp,0x10
c0019dc4:	83 ec 08             	sub    esp,0x8
c0019dc7:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0019dce:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019dd2:	50                   	push   eax
c0019dd3:	e8 78 68 fe ff       	call   c0000650 <strcpy>
c0019dd8:	83 c4 10             	add    esp,0x10
c0019ddb:	83 ec 08             	sub    esp,0x8
c0019dde:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019de2:	50                   	push   eax
c0019de3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019dea:	e8 e5 f9 ff ff       	call   c00197d4 <FAT::fixFilepath(char*)>
c0019def:	83 c4 10             	add    esp,0x10
c0019df2:	83 ec 08             	sub    esp,0x8
c0019df5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019df9:	50                   	push   eax
c0019dfa:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019e01:	50                   	push   eax
c0019e02:	e8 d4 ae fe ff       	call   c0004cdb <f_rename>
c0019e07:	83 c4 10             	add    esp,0x10
c0019e0a:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019e11:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019e18:	85 c0                	test   eax,eax
c0019e1a:	75 08                	jne    c0019e24 <FAT::rename(char const*, char const*)+0xbc>
c0019e1c:	b8 00 00 00 00       	mov    eax,0x0
c0019e21:	eb 09                	jmp    c0019e2c <FAT::rename(char const*, char const*)+0xc4>
c0019e23:	90                   	nop
c0019e24:	b8 01 00 00 00       	mov    eax,0x1
c0019e29:	8d 76 00             	lea    esi,[esi+0x0]
c0019e2c:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019e32:	c3                   	ret    
c0019e33:	90                   	nop

c0019e34 <FAT::mkdir(char const*)>:
c0019e34:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019e3a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019e42:	75 08                	jne    c0019e4c <FAT::mkdir(char const*)+0x18>
c0019e44:	b8 04 00 00 00       	mov    eax,0x4
c0019e49:	eb 61                	jmp    c0019eac <FAT::mkdir(char const*)+0x78>
c0019e4b:	90                   	nop
c0019e4c:	83 ec 08             	sub    esp,0x8
c0019e4f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e56:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019e5a:	50                   	push   eax
c0019e5b:	e8 f0 67 fe ff       	call   c0000650 <strcpy>
c0019e60:	83 c4 10             	add    esp,0x10
c0019e63:	83 ec 08             	sub    esp,0x8
c0019e66:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019e6a:	50                   	push   eax
c0019e6b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e72:	e8 5d f9 ff ff       	call   c00197d4 <FAT::fixFilepath(char*)>
c0019e77:	83 c4 10             	add    esp,0x10
c0019e7a:	83 ec 0c             	sub    esp,0xc
c0019e7d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019e81:	50                   	push   eax
c0019e82:	e8 b9 ac fe ff       	call   c0004b40 <f_mkdir>
c0019e87:	83 c4 10             	add    esp,0x10
c0019e8a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019e91:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019e98:	85 c0                	test   eax,eax
c0019e9a:	75 08                	jne    c0019ea4 <FAT::mkdir(char const*)+0x70>
c0019e9c:	b8 00 00 00 00       	mov    eax,0x0
c0019ea1:	eb 09                	jmp    c0019eac <FAT::mkdir(char const*)+0x78>
c0019ea3:	90                   	nop
c0019ea4:	b8 01 00 00 00       	mov    eax,0x1
c0019ea9:	8d 76 00             	lea    esi,[esi+0x0]
c0019eac:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019eb2:	c3                   	ret    
c0019eb3:	90                   	nop

c0019eb4 <FAT::exists(char const*)>:
c0019eb4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019eba:	83 ec 08             	sub    esp,0x8
c0019ebd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019ec4:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019ec8:	50                   	push   eax
c0019ec9:	e8 82 67 fe ff       	call   c0000650 <strcpy>
c0019ece:	83 c4 10             	add    esp,0x10
c0019ed1:	83 ec 08             	sub    esp,0x8
c0019ed4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019ed8:	50                   	push   eax
c0019ed9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019ee0:	e8 ef f8 ff ff       	call   c00197d4 <FAT::fixFilepath(char*)>
c0019ee5:	83 c4 10             	add    esp,0x10
c0019ee8:	83 ec 08             	sub    esp,0x8
c0019eeb:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0019ef2:	50                   	push   eax
c0019ef3:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019ef7:	50                   	push   eax
c0019ef8:	e8 b1 a8 fe ff       	call   c00047ae <f_stat>
c0019efd:	83 c4 10             	add    esp,0x10
c0019f00:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019f07:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019f0e:	85 c0                	test   eax,eax
c0019f10:	75 06                	jne    c0019f18 <FAT::exists(char const*)+0x64>
c0019f12:	b0 01                	mov    al,0x1
c0019f14:	eb 06                	jmp    c0019f1c <FAT::exists(char const*)+0x68>
c0019f16:	66 90                	xchg   ax,ax
c0019f18:	b0 00                	mov    al,0x0
c0019f1a:	66 90                	xchg   ax,ax
c0019f1c:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019f22:	c3                   	ret    
c0019f23:	90                   	nop

c0019f24 <isoReadDiscSectorHelper>:
c0019f24:	83 ec 2c             	sub    esp,0x2c
c0019f27:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019f2b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019f2f:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0019f34:	83 e8 41             	sub    eax,0x41
c0019f37:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0019f3e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019f42:	ba 00 00 00 00       	mov    edx,0x0
c0019f47:	83 ec 0c             	sub    esp,0xc
c0019f4a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019f4e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019f52:	52                   	push   edx
c0019f53:	50                   	push   eax
c0019f54:	51                   	push   ecx
c0019f55:	e8 fc 3b ff ff       	call   c000db56 <LogicalDisk::read(unsigned long long, int, void*)>
c0019f5a:	83 c4 20             	add    esp,0x20
c0019f5d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019f61:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0019f66:	74 0c                	je     c0019f74 <isoReadDiscSectorHelper+0x50>
c0019f68:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019f6c:	c1 e0 0b             	shl    eax,0xb
c0019f6f:	eb 0b                	jmp    c0019f7c <isoReadDiscSectorHelper+0x58>
c0019f71:	8d 76 00             	lea    esi,[esi+0x0]
c0019f74:	b8 00 00 00 00       	mov    eax,0x0
c0019f79:	8d 76 00             	lea    esi,[esi+0x0]
c0019f7c:	83 c4 2c             	add    esp,0x2c
c0019f7f:	c3                   	ret    

c0019f80 <iso_kprintf>:
c0019f80:	83 ec 0c             	sub    esp,0xc
c0019f83:	83 ec 08             	sub    esp,0x8
c0019f86:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019f8a:	68 da 26 02 c0       	push   0xc00226da
c0019f8f:	e8 76 09 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0019f94:	83 c4 10             	add    esp,0x10
c0019f97:	90                   	nop
c0019f98:	83 c4 0c             	add    esp,0xc
c0019f9b:	c3                   	ret    

c0019f9c <iso_kprintfd>:
c0019f9c:	83 ec 0c             	sub    esp,0xc
c0019f9f:	83 ec 08             	sub    esp,0x8
c0019fa2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019fa6:	68 9a 0e 02 c0       	push   0xc0020e9a
c0019fab:	e8 5a 09 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0019fb0:	83 c4 10             	add    esp,0x10
c0019fb3:	90                   	nop
c0019fb4:	83 c4 0c             	add    esp,0xc
c0019fb7:	c3                   	ret    

c0019fb8 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019fb8:	b8 08 00 00 00       	mov    eax,0x8
c0019fbd:	c3                   	ret    

c0019fbe <ISO9660::truncate(void*, unsigned long long)>:
c0019fbe:	b8 01 00 00 00       	mov    eax,0x1
c0019fc3:	c3                   	ret    

c0019fc4 <ISO9660::getName()>:
c0019fc4:	b8 90 29 02 c0       	mov    eax,0xc0022990
c0019fc9:	c3                   	ret    

c0019fca <ISO9660::closeDir(void*)>:
c0019fca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019fce:	8b 00                	mov    eax,DWORD PTR [eax]
c0019fd0:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0019fd3:	90                   	nop

c0019fd4 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0019fd4:	b8 01 00 00 00       	mov    eax,0x1
c0019fd9:	c3                   	ret    

c0019fda <ISO9660::unlink(char const*)>:
c0019fda:	b8 01 00 00 00       	mov    eax,0x1
c0019fdf:	c3                   	ret    

c0019fe0 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0019fe0:	b8 03 00 00 00       	mov    eax,0x3
c0019fe5:	c3                   	ret    

c0019fe6 <ISO9660::rename(char const*, char const*)>:
c0019fe6:	b8 01 00 00 00       	mov    eax,0x1
c0019feb:	c3                   	ret    

c0019fec <ISO9660::mkdir(char const*)>:
c0019fec:	b8 01 00 00 00       	mov    eax,0x1
c0019ff1:	c3                   	ret    

c0019ff2 <ISO9660::~ISO9660()>:
c0019ff2:	83 ec 0c             	sub    esp,0xc
c0019ff5:	ba d0 2a 02 c0       	mov    edx,0xc0022ad0
c0019ffa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ffe:	89 10                	mov    DWORD PTR [eax],edx
c001a000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a004:	83 ec 0c             	sub    esp,0xc
c001a007:	50                   	push   eax
c001a008:	e8 19 15 ff ff       	call   c000b526 <Filesystem::~Filesystem()>
c001a00d:	83 c4 10             	add    esp,0x10
c001a010:	90                   	nop
c001a011:	83 c4 0c             	add    esp,0xc
c001a014:	c3                   	ret    
c001a015:	90                   	nop

c001a016 <ISO9660::~ISO9660()>:
c001a016:	83 ec 0c             	sub    esp,0xc
c001a019:	83 ec 0c             	sub    esp,0xc
c001a01c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a020:	e8 cd ff ff ff       	call   c0019ff2 <ISO9660::~ISO9660()>
c001a025:	83 c4 10             	add    esp,0x10
c001a028:	83 ec 08             	sub    esp,0x8
c001a02b:	6a 08                	push   0x8
c001a02d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a031:	e8 d6 07 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001a036:	83 c4 10             	add    esp,0x10
c001a039:	83 c4 0c             	add    esp,0xc
c001a03c:	c3                   	ret    
c001a03d:	90                   	nop

c001a03e <ISO9660::exists(char const*)>:
c001a03e:	83 ec 18             	sub    esp,0x18
c001a041:	68 ab 29 02 c0       	push   0xc00229ab
c001a046:	e8 be 72 ff ff       	call   c0011309 <KePanic(char const*)>
c001a04b:	31 c0                	xor    eax,eax
c001a04d:	83 c4 1c             	add    esp,0x1c
c001a050:	c3                   	ret    
c001a051:	90                   	nop

c001a052 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a052:	56                   	push   esi
c001a053:	53                   	push   ebx
c001a054:	53                   	push   ebx
c001a055:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a059:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a05d:	85 db                	test   ebx,ebx
c001a05f:	0f 84 ca 00 00 00    	je     c001a12f <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a065:	85 f6                	test   esi,esi
c001a067:	0f 84 c2 00 00 00    	je     c001a12f <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a06d:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001a072:	b8 03 00 00 00       	mov    eax,0x3
c001a077:	0f 85 b7 00 00 00    	jne    c001a134 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a07d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a07f:	38 0d 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,cl
c001a085:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a08c:	74 1b                	je     c001a0a9 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a08e:	85 c0                	test   eax,eax
c001a090:	74 10                	je     c001a0a2 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001a092:	83 ec 0c             	sub    esp,0xc
c001a095:	68 c9 29 02 c0       	push   0xc00229c9
c001a09a:	e8 6a 72 ff ff       	call   c0011309 <KePanic(char const*)>
c001a09f:	83 c4 10             	add    esp,0x10
c001a0a2:	8a 03                	mov    al,BYTE PTR [ebx]
c001a0a4:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a0a9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a0ac:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a0b3:	85 c0                	test   eax,eax
c001a0b5:	74 09                	je     c001a0c0 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001a0b7:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a0be:	74 48                	je     c001a108 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001a0c0:	83 ec 0c             	sub    esp,0xc
c001a0c3:	68 d9 29 02 c0       	push   0xc00229d9
c001a0c8:	e8 3d 08 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a0cd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a0d0:	83 c4 10             	add    esp,0x10
c001a0d3:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a0da:	85 c0                	test   eax,eax
c001a0dc:	74 17                	je     c001a0f5 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001a0de:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a0e5:	83 ec 0c             	sub    esp,0xc
c001a0e8:	68 f9 29 02 c0       	push   0xc00229f9
c001a0ed:	e8 18 08 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a0f2:	83 c4 10             	add    esp,0x10
c001a0f5:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a0fc:	83 ec 0c             	sub    esp,0xc
c001a0ff:	50                   	push   eax
c001a100:	e8 62 c9 fe ff       	call   c0006a67 <init_percd>
c001a105:	83 c4 10             	add    esp,0x10
c001a108:	51                   	push   ecx
c001a109:	83 c3 03             	add    ebx,0x3
c001a10c:	51                   	push   ecx
c001a10d:	6a 00                	push   0x0
c001a10f:	53                   	push   ebx
c001a110:	e8 15 c4 fe ff       	call   c000652a <iso_open>
c001a115:	83 c4 10             	add    esp,0x10
c001a118:	89 c2                	mov    edx,eax
c001a11a:	b8 01 00 00 00       	mov    eax,0x1
c001a11f:	83 fa ff             	cmp    edx,0xffffffff
c001a122:	74 10                	je     c001a134 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a124:	83 c2 32             	add    edx,0x32
c001a127:	31 c0                	xor    eax,eax
c001a129:	01 d2                	add    edx,edx
c001a12b:	89 16                	mov    DWORD PTR [esi],edx
c001a12d:	eb 05                	jmp    c001a134 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a12f:	b8 04 00 00 00       	mov    eax,0x4
c001a134:	5a                   	pop    edx
c001a135:	5b                   	pop    ebx
c001a136:	5e                   	pop    esi
c001a137:	c3                   	ret    

c001a138 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a138:	53                   	push   ebx
c001a139:	83 ec 08             	sub    esp,0x8
c001a13c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a140:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a144:	85 c0                	test   eax,eax
c001a146:	74 2d                	je     c001a175 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a148:	85 db                	test   ebx,ebx
c001a14a:	74 29                	je     c001a175 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a14c:	52                   	push   edx
c001a14d:	b9 02 00 00 00       	mov    ecx,0x2
c001a152:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a156:	99                   	cdq    
c001a157:	f7 f9                	idiv   ecx
c001a159:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a15d:	83 e8 32             	sub    eax,0x32
c001a160:	50                   	push   eax
c001a161:	e8 6c c4 fe ff       	call   c00065d2 <iso_read>
c001a166:	83 c4 10             	add    esp,0x10
c001a169:	89 03                	mov    DWORD PTR [ebx],eax
c001a16b:	09 d0                	or     eax,edx
c001a16d:	0f 94 c0             	sete   al
c001a170:	0f b6 c0             	movzx  eax,al
c001a173:	eb 05                	jmp    c001a17a <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a175:	b8 04 00 00 00       	mov    eax,0x4
c001a17a:	83 c4 08             	add    esp,0x8
c001a17d:	5b                   	pop    ebx
c001a17e:	c3                   	ret    
c001a17f:	90                   	nop

c001a180 <ISO9660::seek(void*, unsigned long long)>:
c001a180:	57                   	push   edi
c001a181:	b8 04 00 00 00       	mov    eax,0x4
c001a186:	56                   	push   esi
c001a187:	51                   	push   ecx
c001a188:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a18c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a190:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a194:	85 d2                	test   edx,edx
c001a196:	74 26                	je     c001a1be <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a198:	89 d0                	mov    eax,edx
c001a19a:	b9 02 00 00 00       	mov    ecx,0x2
c001a19f:	6a 00                	push   0x0
c001a1a1:	99                   	cdq    
c001a1a2:	f7 f9                	idiv   ecx
c001a1a4:	57                   	push   edi
c001a1a5:	56                   	push   esi
c001a1a6:	83 e8 32             	sub    eax,0x32
c001a1a9:	50                   	push   eax
c001a1aa:	e8 39 c5 fe ff       	call   c00066e8 <iso_seek>
c001a1af:	83 c4 10             	add    esp,0x10
c001a1b2:	31 f0                	xor    eax,esi
c001a1b4:	31 fa                	xor    edx,edi
c001a1b6:	09 d0                	or     eax,edx
c001a1b8:	0f 95 c0             	setne  al
c001a1bb:	0f b6 c0             	movzx  eax,al
c001a1be:	5a                   	pop    edx
c001a1bf:	5e                   	pop    esi
c001a1c0:	5f                   	pop    edi
c001a1c1:	c3                   	ret    

c001a1c2 <ISO9660::tell(void*, unsigned long long*)>:
c001a1c2:	53                   	push   ebx
c001a1c3:	83 ec 08             	sub    esp,0x8
c001a1c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a1ca:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a1ce:	85 c0                	test   eax,eax
c001a1d0:	74 24                	je     c001a1f6 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a1d2:	85 db                	test   ebx,ebx
c001a1d4:	74 20                	je     c001a1f6 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a1d6:	b9 02 00 00 00       	mov    ecx,0x2
c001a1db:	99                   	cdq    
c001a1dc:	f7 f9                	idiv   ecx
c001a1de:	83 ec 0c             	sub    esp,0xc
c001a1e1:	83 e8 32             	sub    eax,0x32
c001a1e4:	50                   	push   eax
c001a1e5:	e8 82 c5 fe ff       	call   c000676c <iso_tell>
c001a1ea:	83 c4 10             	add    esp,0x10
c001a1ed:	89 03                	mov    DWORD PTR [ebx],eax
c001a1ef:	31 c0                	xor    eax,eax
c001a1f1:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a1f4:	eb 05                	jmp    c001a1fb <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a1f6:	b8 04 00 00 00       	mov    eax,0x4
c001a1fb:	83 c4 08             	add    esp,0x8
c001a1fe:	5b                   	pop    ebx
c001a1ff:	c3                   	ret    

c001a200 <ISO9660::stat(void*, unsigned long long*)>:
c001a200:	56                   	push   esi
c001a201:	53                   	push   ebx
c001a202:	83 ec 10             	sub    esp,0x10
c001a205:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a209:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a20d:	68 1d 2a 02 c0       	push   0xc0022a1d
c001a212:	e8 f3 06 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a217:	83 c4 10             	add    esp,0x10
c001a21a:	85 db                	test   ebx,ebx
c001a21c:	74 2a                	je     c001a248 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a21e:	85 f6                	test   esi,esi
c001a220:	74 26                	je     c001a248 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a222:	89 d8                	mov    eax,ebx
c001a224:	b9 02 00 00 00       	mov    ecx,0x2
c001a229:	99                   	cdq    
c001a22a:	83 ec 0c             	sub    esp,0xc
c001a22d:	f7 f9                	idiv   ecx
c001a22f:	83 e8 32             	sub    eax,0x32
c001a232:	50                   	push   eax
c001a233:	e8 65 c5 fe ff       	call   c000679d <iso_total>
c001a238:	83 c4 10             	add    esp,0x10
c001a23b:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a242:	89 06                	mov    DWORD PTR [esi],eax
c001a244:	31 c0                	xor    eax,eax
c001a246:	eb 05                	jmp    c001a24d <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a248:	b8 04 00 00 00       	mov    eax,0x4
c001a24d:	5a                   	pop    edx
c001a24e:	5b                   	pop    ebx
c001a24f:	5e                   	pop    esi
c001a250:	c3                   	ret    
c001a251:	90                   	nop

c001a252 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a252:	55                   	push   ebp
c001a253:	57                   	push   edi
c001a254:	56                   	push   esi
c001a255:	53                   	push   ebx
c001a256:	83 ec 18             	sub    esp,0x18
c001a259:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a25d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a261:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a265:	68 25 2a 02 c0       	push   0xc0022a25
c001a26a:	e8 9b 06 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a26f:	83 c4 10             	add    esp,0x10
c001a272:	85 ff                	test   edi,edi
c001a274:	0f 94 c0             	sete   al
c001a277:	85 f6                	test   esi,esi
c001a279:	0f 94 c2             	sete   dl
c001a27c:	09 d0                	or     eax,edx
c001a27e:	a8 01                	test   al,0x1
c001a280:	0f 85 dd 00 00 00    	jne    c001a363 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a286:	85 db                	test   ebx,ebx
c001a288:	0f 84 d5 00 00 00    	je     c001a363 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a28e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a291:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a297:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a29e:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a2a5:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a2a7:	38 0d 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,cl
c001a2ad:	74 1b                	je     c001a2ca <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a2af:	85 c0                	test   eax,eax
c001a2b1:	74 10                	je     c001a2c3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a2b3:	83 ec 0c             	sub    esp,0xc
c001a2b6:	68 c9 29 02 c0       	push   0xc00229c9
c001a2bb:	e8 49 70 ff ff       	call   c0011309 <KePanic(char const*)>
c001a2c0:	83 c4 10             	add    esp,0x10
c001a2c3:	8a 03                	mov    al,BYTE PTR [ebx]
c001a2c5:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a2ca:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a2cd:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a2d4:	85 c0                	test   eax,eax
c001a2d6:	74 09                	je     c001a2e1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a2d8:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a2df:	74 51                	je     c001a332 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a2e1:	83 ec 0c             	sub    esp,0xc
c001a2e4:	68 2d 2a 02 c0       	push   0xc0022a2d
c001a2e9:	e8 1c 06 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a2ee:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a2f1:	83 c4 10             	add    esp,0x10
c001a2f4:	83 3c 85 7c 87 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd7884],0x0
c001a2fc:	74 21                	je     c001a31f <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a2fe:	83 ec 0c             	sub    esp,0xc
c001a301:	68 4d 2a 02 c0       	push   0xc0022a4d
c001a306:	e8 ff 05 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a30b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a30e:	83 c4 10             	add    esp,0x10
c001a311:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a318:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a31f:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a326:	83 ec 0c             	sub    esp,0xc
c001a329:	50                   	push   eax
c001a32a:	e8 38 c7 fe ff       	call   c0006a67 <init_percd>
c001a32f:	83 c4 10             	add    esp,0x10
c001a332:	52                   	push   edx
c001a333:	83 c3 03             	add    ebx,0x3
c001a336:	52                   	push   edx
c001a337:	6a 00                	push   0x0
c001a339:	53                   	push   ebx
c001a33a:	e8 eb c1 fe ff       	call   c000652a <iso_open>
c001a33f:	83 c4 10             	add    esp,0x10
c001a342:	83 f8 ff             	cmp    eax,0xffffffff
c001a345:	89 c5                	mov    ebp,eax
c001a347:	75 21                	jne    c001a36a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a349:	50                   	push   eax
c001a34a:	50                   	push   eax
c001a34b:	6a 01                	push   0x1
c001a34d:	53                   	push   ebx
c001a34e:	e8 d7 c1 fe ff       	call   c000652a <iso_open>
c001a353:	83 c4 10             	add    esp,0x10
c001a356:	ba 02 00 00 00       	mov    edx,0x2
c001a35b:	40                   	inc    eax
c001a35c:	74 2b                	je     c001a389 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a35e:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a361:	eb 24                	jmp    c001a387 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a363:	ba 04 00 00 00       	mov    edx,0x4
c001a368:	eb 1f                	jmp    c001a389 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a36a:	83 ec 0c             	sub    esp,0xc
c001a36d:	50                   	push   eax
c001a36e:	e8 2a c4 fe ff       	call   c000679d <iso_total>
c001a373:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a37a:	89 07                	mov    DWORD PTR [edi],eax
c001a37c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a37f:	e8 30 c2 fe ff       	call   c00065b4 <iso_close>
c001a384:	83 c4 10             	add    esp,0x10
c001a387:	31 d2                	xor    edx,edx
c001a389:	83 c4 0c             	add    esp,0xc
c001a38c:	89 d0                	mov    eax,edx
c001a38e:	5b                   	pop    ebx
c001a38f:	5e                   	pop    esi
c001a390:	5f                   	pop    edi
c001a391:	5d                   	pop    ebp
c001a392:	c3                   	ret    
c001a393:	90                   	nop

c001a394 <ISO9660::close(void*)>:
c001a394:	83 ec 0c             	sub    esp,0xc
c001a397:	b8 04 00 00 00       	mov    eax,0x4
c001a39c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a3a0:	85 d2                	test   edx,edx
c001a3a2:	74 1b                	je     c001a3bf <ISO9660::close(void*)+0x2b>
c001a3a4:	89 d0                	mov    eax,edx
c001a3a6:	b9 02 00 00 00       	mov    ecx,0x2
c001a3ab:	99                   	cdq    
c001a3ac:	83 ec 0c             	sub    esp,0xc
c001a3af:	f7 f9                	idiv   ecx
c001a3b1:	83 e8 32             	sub    eax,0x32
c001a3b4:	50                   	push   eax
c001a3b5:	e8 fa c1 fe ff       	call   c00065b4 <iso_close>
c001a3ba:	83 c4 10             	add    esp,0x10
c001a3bd:	31 c0                	xor    eax,eax
c001a3bf:	83 c4 0c             	add    esp,0xc
c001a3c2:	c3                   	ret    
c001a3c3:	90                   	nop

c001a3c4 <ISO9660::openDir(char const*, void**)>:
c001a3c4:	56                   	push   esi
c001a3c5:	53                   	push   ebx
c001a3c6:	50                   	push   eax
c001a3c7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a3cb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a3cf:	85 db                	test   ebx,ebx
c001a3d1:	0f 84 bd 00 00 00    	je     c001a494 <ISO9660::openDir(char const*, void**)+0xd0>
c001a3d7:	85 f6                	test   esi,esi
c001a3d9:	0f 84 b5 00 00 00    	je     c001a494 <ISO9660::openDir(char const*, void**)+0xd0>
c001a3df:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a3e1:	38 15 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,dl
c001a3e7:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a3ee:	74 1b                	je     c001a40b <ISO9660::openDir(char const*, void**)+0x47>
c001a3f0:	85 c0                	test   eax,eax
c001a3f2:	74 10                	je     c001a404 <ISO9660::openDir(char const*, void**)+0x40>
c001a3f4:	83 ec 0c             	sub    esp,0xc
c001a3f7:	68 c9 29 02 c0       	push   0xc00229c9
c001a3fc:	e8 08 6f ff ff       	call   c0011309 <KePanic(char const*)>
c001a401:	83 c4 10             	add    esp,0x10
c001a404:	8a 03                	mov    al,BYTE PTR [ebx]
c001a406:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a40b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a40e:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a415:	85 c0                	test   eax,eax
c001a417:	74 10                	je     c001a429 <ISO9660::openDir(char const*, void**)+0x65>
c001a419:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a420:	74 1a                	je     c001a43c <ISO9660::openDir(char const*, void**)+0x78>
c001a422:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a429:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a430:	83 ec 0c             	sub    esp,0xc
c001a433:	50                   	push   eax
c001a434:	e8 2e c6 fe ff       	call   c0006a67 <init_percd>
c001a439:	83 c4 10             	add    esp,0x10
c001a43c:	50                   	push   eax
c001a43d:	83 c3 03             	add    ebx,0x3
c001a440:	50                   	push   eax
c001a441:	6a 01                	push   0x1
c001a443:	53                   	push   ebx
c001a444:	e8 e1 c0 fe ff       	call   c000652a <iso_open>
c001a449:	83 c4 10             	add    esp,0x10
c001a44c:	83 f8 ff             	cmp    eax,0xffffffff
c001a44f:	89 c3                	mov    ebx,eax
c001a451:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a456:	75 1c                	jne    c001a474 <ISO9660::openDir(char const*, void**)+0xb0>
c001a458:	53                   	push   ebx
c001a459:	53                   	push   ebx
c001a45a:	68 71 2a 02 c0       	push   0xc0022a71
c001a45f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a465:	e8 42 e6 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a46a:	83 c4 10             	add    esp,0x10
c001a46d:	b8 01 00 00 00       	mov    eax,0x1
c001a472:	eb 25                	jmp    c001a499 <ISO9660::openDir(char const*, void**)+0xd5>
c001a474:	51                   	push   ecx
c001a475:	01 db                	add    ebx,ebx
c001a477:	51                   	push   ecx
c001a478:	83 c3 65             	add    ebx,0x65
c001a47b:	68 84 2a 02 c0       	push   0xc0022a84
c001a480:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a486:	e8 21 e6 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a48b:	83 c4 10             	add    esp,0x10
c001a48e:	31 c0                	xor    eax,eax
c001a490:	89 1e                	mov    DWORD PTR [esi],ebx
c001a492:	eb 05                	jmp    c001a499 <ISO9660::openDir(char const*, void**)+0xd5>
c001a494:	b8 04 00 00 00       	mov    eax,0x4
c001a499:	5a                   	pop    edx
c001a49a:	5b                   	pop    ebx
c001a49b:	5e                   	pop    esi
c001a49c:	c3                   	ret    
c001a49d:	90                   	nop

c001a49e <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a49e:	55                   	push   ebp
c001a49f:	57                   	push   edi
c001a4a0:	56                   	push   esi
c001a4a1:	53                   	push   ebx
c001a4a2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a4a8:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001a4af:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a4b6:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001a4bd:	85 db                	test   ebx,ebx
c001a4bf:	0f 84 e4 00 00 00    	je     c001a5a9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a4c5:	85 ed                	test   ebp,ebp
c001a4c7:	0f 84 dc 00 00 00    	je     c001a5a9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a4cd:	83 ec 0c             	sub    esp,0xc
c001a4d0:	68 97 2a 02 c0       	push   0xc0022a97
c001a4d5:	e8 30 04 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a4da:	89 d8                	mov    eax,ebx
c001a4dc:	b9 02 00 00 00       	mov    ecx,0x2
c001a4e1:	99                   	cdq    
c001a4e2:	f7 f9                	idiv   ecx
c001a4e4:	83 e8 32             	sub    eax,0x32
c001a4e7:	89 04 24             	mov    DWORD PTR [esp],eax
c001a4ea:	e8 00 c3 fe ff       	call   c00067ef <iso_readdir>
c001a4ef:	83 c4 10             	add    esp,0x10
c001a4f2:	85 c0                	test   eax,eax
c001a4f4:	89 c3                	mov    ebx,eax
c001a4f6:	75 38                	jne    c001a530 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001a4f8:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a4fd:	53                   	push   ebx
c001a4fe:	53                   	push   ebx
c001a4ff:	68 a2 2a 02 c0       	push   0xc0022aa2
c001a504:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a50a:	e8 9d e5 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a50f:	83 c4 0c             	add    esp,0xc
c001a512:	68 10 01 00 00       	push   0x110
c001a517:	6a 00                	push   0x0
c001a519:	57                   	push   edi
c001a51a:	e8 d1 5f fe ff       	call   c00004f0 <memset>
c001a51f:	83 c4 10             	add    esp,0x10
c001a522:	b8 01 00 00 00       	mov    eax,0x1
c001a527:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001a52e:	eb 7e                	jmp    c001a5ae <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001a530:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a536:	8d 70 08             	lea    esi,[eax+0x8]
c001a539:	83 ec 0c             	sub    esp,0xc
c001a53c:	56                   	push   esi
c001a53d:	e8 3e 60 fe ff       	call   c0000580 <strlen>
c001a542:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001a54a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a54e:	83 c4 10             	add    esp,0x10
c001a551:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001a555:	75 0a                	jne    c001a561 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001a557:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001a55a:	b8 02 00 00 00       	mov    eax,0x2
c001a55f:	74 05                	je     c001a566 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001a561:	b8 01 00 00 00       	mov    eax,0x1
c001a566:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a56a:	50                   	push   eax
c001a56b:	50                   	push   eax
c001a56c:	56                   	push   esi
c001a56d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a571:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001a575:	50                   	push   eax
c001a576:	e8 d5 60 fe ff       	call   c0000650 <strcpy>
c001a57b:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a582:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a584:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001a58b:	5a                   	pop    edx
c001a58c:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a591:	59                   	pop    ecx
c001a592:	68 b5 2a 02 c0       	push   0xc0022ab5
c001a597:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a59d:	e8 0a e5 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a5a2:	83 c4 10             	add    esp,0x10
c001a5a5:	31 c0                	xor    eax,eax
c001a5a7:	eb 05                	jmp    c001a5ae <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001a5a9:	b8 04 00 00 00       	mov    eax,0x4
c001a5ae:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a5b4:	5b                   	pop    ebx
c001a5b5:	5e                   	pop    esi
c001a5b6:	5f                   	pop    edi
c001a5b7:	5d                   	pop    ebp
c001a5b8:	c3                   	ret    

c001a5b9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001a5b9:	57                   	push   edi
c001a5ba:	56                   	push   esi
c001a5bb:	53                   	push   ebx
c001a5bc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a5c0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a5c4:	39 35 84 98 02 c0    	cmp    DWORD PTR ds:0xc0029884,esi
c001a5ca:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a5ce:	0f be cb             	movsx  ecx,bl
c001a5d1:	75 0b                	jne    c001a5de <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001a5d3:	0f be 05 e0 38 02 c0 	movsx  eax,BYTE PTR ds:0xc00238e0
c001a5da:	39 c8                	cmp    eax,ecx
c001a5dc:	74 47                	je     c001a625 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a5de:	83 ec 0c             	sub    esp,0xc
c001a5e1:	31 d2                	xor    edx,edx
c001a5e3:	68 a0 98 02 c0       	push   0xc00298a0
c001a5e8:	6a 01                	push   0x1
c001a5ea:	52                   	push   edx
c001a5eb:	56                   	push   esi
c001a5ec:	ff 34 8d 7c 87 02 c0 	push   DWORD PTR [ecx*4-0x3ffd7884]
c001a5f3:	e8 5e 35 ff ff       	call   c000db56 <LogicalDisk::read(unsigned long long, int, void*)>
c001a5f8:	83 c4 20             	add    esp,0x20
c001a5fb:	85 c0                	test   eax,eax
c001a5fd:	75 0e                	jne    c001a60d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001a5ff:	89 35 84 98 02 c0    	mov    DWORD PTR ds:0xc0029884,esi
c001a605:	88 1d e0 38 02 c0    	mov    BYTE PTR ds:0xc00238e0,bl
c001a60b:	eb 18                	jmp    c001a625 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a60d:	50                   	push   eax
c001a60e:	68 00 08 00 00       	push   0x800
c001a613:	6a 00                	push   0x0
c001a615:	57                   	push   edi
c001a616:	e8 d5 5e fe ff       	call   c00004f0 <memset>
c001a61b:	83 c4 10             	add    esp,0x10
c001a61e:	b8 01 00 00 00       	mov    eax,0x1
c001a623:	eb 0e                	jmp    c001a633 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001a625:	be a0 98 02 c0       	mov    esi,0xc00298a0
c001a62a:	b9 00 08 00 00       	mov    ecx,0x800
c001a62f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a631:	31 c0                	xor    eax,eax
c001a633:	5b                   	pop    ebx
c001a634:	5e                   	pop    esi
c001a635:	5f                   	pop    edi
c001a636:	c3                   	ret    
c001a637:	90                   	nop

c001a638 <ISO9660::tryMount(LogicalDisk*, int)>:
c001a638:	53                   	push   ebx
c001a639:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001a63f:	c7 05 84 98 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0029884,0xdeadbeef
c001a649:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001a650:	8d 58 41             	lea    ebx,[eax+0x41]
c001a653:	0f be db             	movsx  ebx,bl
c001a656:	53                   	push   ebx
c001a657:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a65b:	50                   	push   eax
c001a65c:	6a 10                	push   0x10
c001a65e:	e8 56 ff ff ff       	call   c001a5b9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a663:	83 c4 10             	add    esp,0x10
c001a666:	31 d2                	xor    edx,edx
c001a668:	85 c0                	test   eax,eax
c001a66a:	75 33                	jne    c001a69f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a66c:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001a671:	75 2c                	jne    c001a69f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a673:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001a678:	75 25                	jne    c001a69f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a67a:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001a67f:	75 1e                	jne    c001a69f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a681:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001a686:	75 17                	jne    c001a69f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a688:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001a68d:	75 10                	jne    c001a69f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a68f:	83 ec 0c             	sub    esp,0xc
c001a692:	53                   	push   ebx
c001a693:	e8 cf c3 fe ff       	call   c0006a67 <init_percd>
c001a698:	83 c4 10             	add    esp,0x10
c001a69b:	40                   	inc    eax
c001a69c:	0f 95 c2             	setne  dl
c001a69f:	81 c4 08 08 00 00    	add    esp,0x808
c001a6a5:	88 d0                	mov    al,dl
c001a6a7:	5b                   	pop    ebx
c001a6a8:	c3                   	ret    
c001a6a9:	90                   	nop

c001a6aa <ISO9660::ISO9660()>:
c001a6aa:	83 ec 0c             	sub    esp,0xc
c001a6ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a6b1:	83 ec 0c             	sub    esp,0xc
c001a6b4:	50                   	push   eax
c001a6b5:	e8 48 0e ff ff       	call   c000b502 <Filesystem::Filesystem()>
c001a6ba:	83 c4 10             	add    esp,0x10
c001a6bd:	ba d0 2a 02 c0       	mov    edx,0xc0022ad0
c001a6c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a6c6:	89 10                	mov    DWORD PTR [eax],edx
c001a6c8:	e8 ac c4 fe ff       	call   c0006b79 <fs_iso9660_init>
c001a6cd:	90                   	nop
c001a6ce:	83 c4 0c             	add    esp,0xc
c001a6d1:	c3                   	ret    

c001a6d2 <SoundCard::beginPlayback()>:
c001a6d2:	c7 44 24 04 34 2b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022b34
c001a6da:	e9 2a 6c ff ff       	jmp    c0011309 <KePanic(char const*)>
c001a6df:	90                   	nop

c001a6e0 <SoundCard::stopPlayback()>:
c001a6e0:	c7 44 24 04 34 2b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022b34
c001a6e8:	e9 1c 6c ff ff       	jmp    c0011309 <KePanic(char const*)>
c001a6ed:	90                   	nop

c001a6ee <SoundCard::SoundCard(char const*)>:
c001a6ee:	83 ec 1c             	sub    esp,0x1c
c001a6f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6f5:	83 ec 08             	sub    esp,0x8
c001a6f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a6fc:	50                   	push   eax
c001a6fd:	e8 02 22 ff ff       	call   c000c904 <Device::Device(char const*)>
c001a702:	83 c4 10             	add    esp,0x10
c001a705:	ba 80 2b 02 c0       	mov    edx,0xc0022b80
c001a70a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a70e:	89 10                	mov    DWORD PTR [eax],edx
c001a710:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a714:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a71b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a71f:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001a729:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a72d:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001a737:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a73b:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001a745:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a749:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001a753:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a75b:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001a760:	7f 1a                	jg     c001a77c <SoundCard::SoundCard(char const*)+0x8e>
c001a762:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a766:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a76a:	83 c2 54             	add    edx,0x54
c001a76d:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001a775:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001a77a:	eb df                	jmp    c001a75b <SoundCard::SoundCard(char const*)+0x6d>
c001a77c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a780:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a787:	90                   	nop
c001a788:	83 c4 1c             	add    esp,0x1c
c001a78b:	c3                   	ret    

c001a78c <SoundCard::~SoundCard()>:
c001a78c:	83 ec 0c             	sub    esp,0xc
c001a78f:	ba 80 2b 02 c0       	mov    edx,0xc0022b80
c001a794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a798:	89 10                	mov    DWORD PTR [eax],edx
c001a79a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a79e:	83 ec 0c             	sub    esp,0xc
c001a7a1:	50                   	push   eax
c001a7a2:	e8 c7 1e ff ff       	call   c000c66e <Device::~Device()>
c001a7a7:	83 c4 10             	add    esp,0x10
c001a7aa:	90                   	nop
c001a7ab:	83 c4 0c             	add    esp,0xc
c001a7ae:	c3                   	ret    
c001a7af:	90                   	nop

c001a7b0 <SoundCard::~SoundCard()>:
c001a7b0:	83 ec 0c             	sub    esp,0xc
c001a7b3:	83 ec 0c             	sub    esp,0xc
c001a7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a7ba:	e8 cd ff ff ff       	call   c001a78c <SoundCard::~SoundCard()>
c001a7bf:	83 c4 10             	add    esp,0x10
c001a7c2:	83 ec 08             	sub    esp,0x8
c001a7c5:	68 e8 01 00 00       	push   0x1e8
c001a7ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a7ce:	e8 39 00 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001a7d3:	83 c4 10             	add    esp,0x10
c001a7d6:	83 c4 0c             	add    esp,0xc
c001a7d9:	c3                   	ret    

c001a7da <SoundCard::configureRates(int, int, int)>:
c001a7da:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a7de:	31 c0                	xor    eax,eax
c001a7e0:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001a7e7:	75 20                	jne    c001a809 <SoundCard::configureRates(int, int, int)+0x2f>
c001a7e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a7ed:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001a7f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a7f7:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001a7fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a801:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001a807:	b0 01                	mov    al,0x1
c001a809:	c3                   	ret    

c001a80a <SoundCard::getSamples16(int, short*)>:
c001a80a:	55                   	push   ebp
c001a80b:	57                   	push   edi
c001a80c:	31 ff                	xor    edi,edi
c001a80e:	56                   	push   esi
c001a80f:	53                   	push   ebx
c001a810:	31 db                	xor    ebx,ebx
c001a812:	83 ec 10             	sub    esp,0x10
c001a815:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001a819:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a81d:	8d 04 36             	lea    eax,[esi+esi*1]
c001a820:	50                   	push   eax
c001a821:	6a 00                	push   0x0
c001a823:	55                   	push   ebp
c001a824:	e8 c7 5c fe ff       	call   c00004f0 <memset>
c001a829:	83 c4 10             	add    esp,0x10
c001a82c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a830:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001a837:	85 c0                	test   eax,eax
c001a839:	74 1a                	je     c001a855 <SoundCard::getSamples16(int, short*)+0x4b>
c001a83b:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a83f:	75 14                	jne    c001a855 <SoundCard::getSamples16(int, short*)+0x4b>
c001a841:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a845:	55                   	push   ebp
c001a846:	56                   	push   esi
c001a847:	50                   	push   eax
c001a848:	e8 f3 02 00 00       	call   c001ab40 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001a84d:	83 c4 10             	add    esp,0x10
c001a850:	39 c3                	cmp    ebx,eax
c001a852:	0f 4c d8             	cmovl  ebx,eax
c001a855:	47                   	inc    edi
c001a856:	83 ff 20             	cmp    edi,0x20
c001a859:	75 d1                	jne    c001a82c <SoundCard::getSamples16(int, short*)+0x22>
c001a85b:	83 c4 0c             	add    esp,0xc
c001a85e:	89 d8                	mov    eax,ebx
c001a860:	5b                   	pop    ebx
c001a861:	5e                   	pop    esi
c001a862:	5f                   	pop    edi
c001a863:	5d                   	pop    ebp
c001a864:	c3                   	ret    
c001a865:	90                   	nop

c001a866 <SoundCard::getSamples32(int, int*)>:
c001a866:	55                   	push   ebp
c001a867:	57                   	push   edi
c001a868:	31 ff                	xor    edi,edi
c001a86a:	56                   	push   esi
c001a86b:	31 f6                	xor    esi,esi
c001a86d:	53                   	push   ebx
c001a86e:	83 ec 10             	sub    esp,0x10
c001a871:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a875:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a879:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a87d:	c1 e0 02             	shl    eax,0x2
c001a880:	50                   	push   eax
c001a881:	6a 00                	push   0x0
c001a883:	55                   	push   ebp
c001a884:	e8 67 5c fe ff       	call   c00004f0 <memset>
c001a889:	83 c4 10             	add    esp,0x10
c001a88c:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001a893:	85 c0                	test   eax,eax
c001a895:	74 1a                	je     c001a8b1 <SoundCard::getSamples32(int, int*)+0x4b>
c001a897:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a89b:	75 14                	jne    c001a8b1 <SoundCard::getSamples32(int, int*)+0x4b>
c001a89d:	53                   	push   ebx
c001a89e:	55                   	push   ebp
c001a89f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a8a3:	50                   	push   eax
c001a8a4:	e8 67 03 00 00       	call   c001ac10 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001a8a9:	83 c4 10             	add    esp,0x10
c001a8ac:	39 c6                	cmp    esi,eax
c001a8ae:	0f 4c f0             	cmovl  esi,eax
c001a8b1:	47                   	inc    edi
c001a8b2:	83 ff 20             	cmp    edi,0x20
c001a8b5:	75 d5                	jne    c001a88c <SoundCard::getSamples32(int, int*)+0x26>
c001a8b7:	85 f6                	test   esi,esi
c001a8b9:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001a8c0:	75 0f                	jne    c001a8d1 <SoundCard::getSamples32(int, int*)+0x6b>
c001a8c2:	85 c0                	test   eax,eax
c001a8c4:	74 1b                	je     c001a8e1 <SoundCard::getSamples32(int, int*)+0x7b>
c001a8c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a8c8:	83 ec 0c             	sub    esp,0xc
c001a8cb:	53                   	push   ebx
c001a8cc:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a8cf:	eb 0d                	jmp    c001a8de <SoundCard::getSamples32(int, int*)+0x78>
c001a8d1:	85 c0                	test   eax,eax
c001a8d3:	75 0c                	jne    c001a8e1 <SoundCard::getSamples32(int, int*)+0x7b>
c001a8d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a8d7:	83 ec 0c             	sub    esp,0xc
c001a8da:	53                   	push   ebx
c001a8db:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001a8de:	83 c4 10             	add    esp,0x10
c001a8e1:	83 c4 0c             	add    esp,0xc
c001a8e4:	89 f0                	mov    eax,esi
c001a8e6:	5b                   	pop    ebx
c001a8e7:	5e                   	pop    esi
c001a8e8:	5f                   	pop    edi
c001a8e9:	5d                   	pop    ebp
c001a8ea:	c3                   	ret    
c001a8eb:	90                   	nop

c001a8ec <SoundCard::addChannel(SoundPort*)>:
c001a8ec:	83 ec 0c             	sub    esp,0xc
c001a8ef:	31 c0                	xor    eax,eax
c001a8f1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a8f5:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001a8fd:	74 1b                	je     c001a91a <SoundCard::addChannel(SoundPort*)+0x2e>
c001a8ff:	40                   	inc    eax
c001a900:	83 f8 20             	cmp    eax,0x20
c001a903:	75 f0                	jne    c001a8f5 <SoundCard::addChannel(SoundPort*)+0x9>
c001a905:	83 ec 0c             	sub    esp,0xc
c001a908:	68 59 2b 02 c0       	push   0xc0022b59
c001a90d:	e8 f7 69 ff ff       	call   c0011309 <KePanic(char const*)>
c001a912:	83 c4 10             	add    esp,0x10
c001a915:	83 c8 ff             	or     eax,0xffffffff
c001a918:	eb 0b                	jmp    c001a925 <SoundCard::addChannel(SoundPort*)+0x39>
c001a91a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a91e:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001a925:	83 c4 0c             	add    esp,0xc
c001a928:	c3                   	ret    
c001a929:	90                   	nop

c001a92a <SoundCard::removeChannel(int)>:
c001a92a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a92e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a932:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001a93d:	c3                   	ret    
c001a93e:	66 90                	xchg   ax,ax

c001a940 <SoundPort::SoundPort(int, int, int, int)>:
c001a940:	83 ec 0c             	sub    esp,0xc
c001a943:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a947:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a94e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a952:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a956:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a95a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a95e:	89 10                	mov    DWORD PTR [eax],edx
c001a960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a964:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a968:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a96b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a96f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a973:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a976:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001a97b:	75 13                	jne    c001a990 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001a97d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a981:	8b 00                	mov    eax,DWORD PTR [eax]
c001a983:	05 a0 0f 00 00       	add    eax,0xfa0
c001a988:	d1 e0                	shl    eax,1
c001a98a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a98e:	66 90                	xchg   ax,ax
c001a990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a994:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a998:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001a99b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a99f:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001a9a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9aa:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a9ad:	c1 e0 02             	shl    eax,0x2
c001a9b0:	83 ec 0c             	sub    esp,0xc
c001a9b3:	50                   	push   eax
c001a9b4:	e8 1a d1 fe ff       	call   c0007ad3 <malloc>
c001a9b9:	83 c4 10             	add    esp,0x10
c001a9bc:	89 c2                	mov    edx,eax
c001a9be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9c2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001a9c5:	90                   	nop
c001a9c6:	83 c4 0c             	add    esp,0xc
c001a9c9:	c3                   	ret    
c001a9ca:	66 90                	xchg   ax,ax

c001a9cc <SoundPort::~SoundPort()>:
c001a9cc:	83 ec 0c             	sub    esp,0xc
c001a9cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9d3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a9d6:	85 c0                	test   eax,eax
c001a9d8:	74 1e                	je     c001a9f8 <SoundPort::~SoundPort()+0x2c>
c001a9da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9de:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a9e1:	83 ec 0c             	sub    esp,0xc
c001a9e4:	50                   	push   eax
c001a9e5:	e8 f9 d0 fe ff       	call   c0007ae3 <free>
c001a9ea:	83 c4 10             	add    esp,0x10
c001a9ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9f1:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a9f8:	90                   	nop
c001a9f9:	83 c4 0c             	add    esp,0xc
c001a9fc:	c3                   	ret    
c001a9fd:	90                   	nop
c001a9fe:	66 90                	xchg   ax,ax

c001aa00 <SoundPort::unpause()>:
c001aa00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa04:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001aa08:	c3                   	ret    
c001aa09:	90                   	nop
c001aa0a:	66 90                	xchg   ax,ax

c001aa0c <SoundPort::pause()>:
c001aa0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa10:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001aa14:	c3                   	ret    
c001aa15:	90                   	nop
c001aa16:	66 90                	xchg   ax,ax

c001aa18 <SoundPort::getBufferUsed()>:
c001aa18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa1c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aa1f:	c3                   	ret    

c001aa20 <SoundPort::getBufferSize()>:
c001aa20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa24:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001aa27:	c3                   	ret    

c001aa28 <SoundPort::buffer16(short*, int)>:
c001aa28:	55                   	push   ebp
c001aa29:	57                   	push   edi
c001aa2a:	56                   	push   esi
c001aa2b:	53                   	push   ebx
c001aa2c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001aa30:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001aa34:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001aa37:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001aa3a:	74 68                	je     c001aaa4 <SoundPort::buffer16(short*, int)+0x7c>
c001aa3c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001aa40:	85 c9                	test   ecx,ecx
c001aa42:	7e 60                	jle    c001aaa4 <SoundPort::buffer16(short*, int)+0x7c>
c001aa44:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001aa48:	8d 70 01             	lea    esi,[eax+0x1]
c001aa4b:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001aa4e:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001aa51:	c1 e1 0f             	shl    ecx,0xf
c001aa54:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001aa57:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aa5a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aa5d:	74 4d                	je     c001aaac <SoundPort::buffer16(short*, int)+0x84>
c001aa5f:	31 f6                	xor    esi,esi
c001aa61:	eb 21                	jmp    c001aa84 <SoundPort::buffer16(short*, int)+0x5c>
c001aa63:	90                   	nop
c001aa64:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001aa69:	8d 79 01             	lea    edi,[ecx+0x1]
c001aa6c:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001aa6f:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001aa72:	c1 e3 0f             	shl    ebx,0xf
c001aa75:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001aa78:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aa7b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aa7e:	74 1c                	je     c001aa9c <SoundPort::buffer16(short*, int)+0x74>
c001aa80:	89 c6                	mov    esi,eax
c001aa82:	66 90                	xchg   ax,ax
c001aa84:	8d 46 01             	lea    eax,[esi+0x1]
c001aa87:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001aa8b:	75 d7                	jne    c001aa64 <SoundPort::buffer16(short*, int)+0x3c>
c001aa8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aa91:	8d 76 00             	lea    esi,[esi+0x0]
c001aa94:	5b                   	pop    ebx
c001aa95:	5e                   	pop    esi
c001aa96:	5f                   	pop    edi
c001aa97:	5d                   	pop    ebp
c001aa98:	c3                   	ret    
c001aa99:	8d 76 00             	lea    esi,[esi+0x0]
c001aa9c:	5b                   	pop    ebx
c001aa9d:	8d 46 02             	lea    eax,[esi+0x2]
c001aaa0:	5e                   	pop    esi
c001aaa1:	5f                   	pop    edi
c001aaa2:	5d                   	pop    ebp
c001aaa3:	c3                   	ret    
c001aaa4:	5b                   	pop    ebx
c001aaa5:	31 c0                	xor    eax,eax
c001aaa7:	5e                   	pop    esi
c001aaa8:	5f                   	pop    edi
c001aaa9:	5d                   	pop    ebp
c001aaaa:	c3                   	ret    
c001aaab:	90                   	nop
c001aaac:	b8 01 00 00 00       	mov    eax,0x1
c001aab1:	eb e1                	jmp    c001aa94 <SoundPort::buffer16(short*, int)+0x6c>
c001aab3:	90                   	nop

c001aab4 <SoundPort::buffer32(int*, int)>:
c001aab4:	55                   	push   ebp
c001aab5:	57                   	push   edi
c001aab6:	56                   	push   esi
c001aab7:	53                   	push   ebx
c001aab8:	83 ec 04             	sub    esp,0x4
c001aabb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aabf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aac3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001aac7:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aaca:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aacd:	89 04 24             	mov    DWORD PTR [esp],eax
c001aad0:	74 5a                	je     c001ab2c <SoundPort::buffer32(int*, int)+0x78>
c001aad2:	85 c0                	test   eax,eax
c001aad4:	7e 56                	jle    c001ab2c <SoundPort::buffer32(int*, int)+0x78>
c001aad6:	8d 71 01             	lea    esi,[ecx+0x1]
c001aad9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001aadc:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001aadf:	8b 37                	mov    esi,DWORD PTR [edi]
c001aae1:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001aae4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aae7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aaea:	74 4c                	je     c001ab38 <SoundPort::buffer32(int*, int)+0x84>
c001aaec:	31 f6                	xor    esi,esi
c001aaee:	eb 1c                	jmp    c001ab0c <SoundPort::buffer32(int*, int)+0x58>
c001aaf0:	8d 69 01             	lea    ebp,[ecx+0x1]
c001aaf3:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001aaf6:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001aaf9:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001aafc:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001ab00:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ab03:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ab06:	74 18                	je     c001ab20 <SoundPort::buffer32(int*, int)+0x6c>
c001ab08:	89 de                	mov    esi,ebx
c001ab0a:	66 90                	xchg   ax,ax
c001ab0c:	8d 5e 01             	lea    ebx,[esi+0x1]
c001ab0f:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001ab12:	75 dc                	jne    c001aaf0 <SoundPort::buffer32(int*, int)+0x3c>
c001ab14:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ab17:	90                   	nop
c001ab18:	83 c4 04             	add    esp,0x4
c001ab1b:	5b                   	pop    ebx
c001ab1c:	5e                   	pop    esi
c001ab1d:	5f                   	pop    edi
c001ab1e:	5d                   	pop    ebp
c001ab1f:	c3                   	ret    
c001ab20:	8d 46 02             	lea    eax,[esi+0x2]
c001ab23:	83 c4 04             	add    esp,0x4
c001ab26:	5b                   	pop    ebx
c001ab27:	5e                   	pop    esi
c001ab28:	5f                   	pop    edi
c001ab29:	5d                   	pop    ebp
c001ab2a:	c3                   	ret    
c001ab2b:	90                   	nop
c001ab2c:	83 c4 04             	add    esp,0x4
c001ab2f:	31 c0                	xor    eax,eax
c001ab31:	5b                   	pop    ebx
c001ab32:	5e                   	pop    esi
c001ab33:	5f                   	pop    edi
c001ab34:	5d                   	pop    ebp
c001ab35:	c3                   	ret    
c001ab36:	66 90                	xchg   ax,ax
c001ab38:	b8 01 00 00 00       	mov    eax,0x1
c001ab3d:	eb d9                	jmp    c001ab18 <SoundPort::buffer32(int*, int)+0x64>
c001ab3f:	90                   	nop

c001ab40 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001ab40:	55                   	push   ebp
c001ab41:	57                   	push   edi
c001ab42:	56                   	push   esi
c001ab43:	53                   	push   ebx
c001ab44:	83 ec 0c             	sub    esp,0xc
c001ab47:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ab4b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ab4f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ab53:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001ab57:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001ab5d:	39 03                	cmp    DWORD PTR [ebx],eax
c001ab5f:	74 13                	je     c001ab74 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001ab61:	83 ec 0c             	sub    esp,0xc
c001ab64:	68 ac 2b 02 c0       	push   0xc0022bac
c001ab69:	e8 9b 67 ff ff       	call   c0011309 <KePanic(char const*)>
c001ab6e:	83 c4 10             	add    esp,0x10
c001ab71:	8d 76 00             	lea    esi,[esi+0x0]
c001ab74:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001ab7a:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001ab7d:	74 11                	je     c001ab90 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001ab7f:	83 ec 0c             	sub    esp,0xc
c001ab82:	68 eb 2b 02 c0       	push   0xc0022beb
c001ab87:	e8 7d 67 ff ff       	call   c0011309 <KePanic(char const*)>
c001ab8c:	83 c4 10             	add    esp,0x10
c001ab8f:	90                   	nop
c001ab90:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001ab96:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001ab99:	74 11                	je     c001abac <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001ab9b:	83 ec 0c             	sub    esp,0xc
c001ab9e:	68 eb 2b 02 c0       	push   0xc0022beb
c001aba3:	e8 61 67 ff ff       	call   c0011309 <KePanic(char const*)>
c001aba8:	83 c4 10             	add    esp,0x10
c001abab:	90                   	nop
c001abac:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001abaf:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001abb3:	85 f6                	test   esi,esi
c001abb5:	7e 2d                	jle    c001abe4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001abb7:	31 c0                	xor    eax,eax
c001abb9:	8d 76 00             	lea    esi,[esi+0x0]
c001abbc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001abbf:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001abc2:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001abc8:	85 c9                	test   ecx,ecx
c001abca:	0f 49 d1             	cmovns edx,ecx
c001abcd:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001abd1:	c1 fa 0f             	sar    edx,0xf
c001abd4:	01 d1                	add    ecx,edx
c001abd6:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001abda:	83 c0 01             	add    eax,0x1
c001abdd:	39 f0                	cmp    eax,esi
c001abdf:	75 db                	jne    c001abbc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001abe1:	8d 76 00             	lea    esi,[esi+0x0]
c001abe4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001abe7:	83 ec 04             	sub    esp,0x4
c001abea:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001abed:	29 f0                	sub    eax,esi
c001abef:	c1 e0 02             	shl    eax,0x2
c001abf2:	50                   	push   eax
c001abf3:	8d 04 b2             	lea    eax,[edx+esi*4]
c001abf6:	50                   	push   eax
c001abf7:	52                   	push   edx
c001abf8:	e8 d3 57 fe ff       	call   c00003d0 <memmove>
c001abfd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ac00:	29 f0                	sub    eax,esi
c001ac02:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001ac05:	83 c4 1c             	add    esp,0x1c
c001ac08:	89 f0                	mov    eax,esi
c001ac0a:	5b                   	pop    ebx
c001ac0b:	5e                   	pop    esi
c001ac0c:	5f                   	pop    edi
c001ac0d:	5d                   	pop    ebp
c001ac0e:	c3                   	ret    
c001ac0f:	90                   	nop

c001ac10 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001ac10:	55                   	push   ebp
c001ac11:	57                   	push   edi
c001ac12:	56                   	push   esi
c001ac13:	53                   	push   ebx
c001ac14:	83 ec 0c             	sub    esp,0xc
c001ac17:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ac1b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ac1f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001ac23:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001ac27:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001ac2d:	39 03                	cmp    DWORD PTR [ebx],eax
c001ac2f:	74 13                	je     c001ac44 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001ac31:	83 ec 0c             	sub    esp,0xc
c001ac34:	68 cc 2b 02 c0       	push   0xc0022bcc
c001ac39:	e8 cb 66 ff ff       	call   c0011309 <KePanic(char const*)>
c001ac3e:	83 c4 10             	add    esp,0x10
c001ac41:	8d 76 00             	lea    esi,[esi+0x0]
c001ac44:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001ac4a:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001ac4d:	74 11                	je     c001ac60 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001ac4f:	83 ec 0c             	sub    esp,0xc
c001ac52:	68 07 2c 02 c0       	push   0xc0022c07
c001ac57:	e8 ad 66 ff ff       	call   c0011309 <KePanic(char const*)>
c001ac5c:	83 c4 10             	add    esp,0x10
c001ac5f:	90                   	nop
c001ac60:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001ac66:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001ac69:	74 11                	je     c001ac7c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001ac6b:	83 ec 0c             	sub    esp,0xc
c001ac6e:	68 07 2c 02 c0       	push   0xc0022c07
c001ac73:	e8 91 66 ff ff       	call   c0011309 <KePanic(char const*)>
c001ac78:	83 c4 10             	add    esp,0x10
c001ac7b:	90                   	nop
c001ac7c:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001ac7f:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001ac83:	85 ff                	test   edi,edi
c001ac85:	7e 21                	jle    c001aca8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001ac87:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001ac8e:	31 c0                	xor    eax,eax
c001ac90:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ac93:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001ac96:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001ac99:	01 d5                	add    ebp,edx
c001ac9b:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001ac9e:	83 c0 04             	add    eax,0x4
c001aca1:	39 c1                	cmp    ecx,eax
c001aca3:	75 eb                	jne    c001ac90 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001aca5:	8d 76 00             	lea    esi,[esi+0x0]
c001aca8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001acab:	83 ec 04             	sub    esp,0x4
c001acae:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001acb1:	29 f8                	sub    eax,edi
c001acb3:	c1 e0 02             	shl    eax,0x2
c001acb6:	50                   	push   eax
c001acb7:	8d 04 ba             	lea    eax,[edx+edi*4]
c001acba:	50                   	push   eax
c001acbb:	52                   	push   edx
c001acbc:	e8 0f 57 fe ff       	call   c00003d0 <memmove>
c001acc1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001acc4:	29 f8                	sub    eax,edi
c001acc6:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001acc9:	83 c4 1c             	add    esp,0x1c
c001accc:	89 f8                	mov    eax,edi
c001acce:	5b                   	pop    ebx
c001accf:	5e                   	pop    esi
c001acd0:	5f                   	pop    edi
c001acd1:	5d                   	pop    ebp
c001acd2:	c3                   	ret    
c001acd3:	90                   	nop

c001acd4 <PCI::open(int, int, void*)>:
c001acd4:	83 ec 18             	sub    esp,0x18
c001acd7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001acdb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001acdf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ace5:	8b 10                	mov    edx,DWORD PTR [eax]
c001ace7:	50                   	push   eax
c001ace8:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001aceb:	31 c0                	xor    eax,eax
c001aced:	83 c4 1c             	add    esp,0x1c
c001acf0:	c3                   	ret    
c001acf1:	90                   	nop

c001acf2 <PCI::close(int, int, void*)>:
c001acf2:	31 c0                	xor    eax,eax
c001acf4:	c3                   	ret    
c001acf5:	90                   	nop

c001acf6 <PCI::PCI()>:
c001acf6:	83 ec 0c             	sub    esp,0xc
c001acf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acfd:	83 ec 08             	sub    esp,0x8
c001ad00:	68 23 2c 02 c0       	push   0xc0022c23
c001ad05:	50                   	push   eax
c001ad06:	e8 bd 13 ff ff       	call   c000c0c8 <Bus::Bus(char const*)>
c001ad0b:	83 c4 10             	add    esp,0x10
c001ad0e:	ba cc 2c 02 c0       	mov    edx,0xc0022ccc
c001ad13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad17:	89 10                	mov    DWORD PTR [eax],edx
c001ad19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad1d:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001ad27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad2b:	a3 a0 a0 02 c0       	mov    ds:0xc002a0a0,eax
c001ad30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad34:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ad3a:	0f b6 d0             	movzx  edx,al
c001ad3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad41:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001ad48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad4c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ad52:	0f b6 d0             	movzx  edx,al
c001ad55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad59:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001ad5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad62:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ad68:	8d 50 01             	lea    edx,[eax+0x1]
c001ad6b:	88 d1                	mov    cl,dl
c001ad6d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ad71:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001ad77:	0f b6 d0             	movzx  edx,al
c001ad7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad7e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ad82:	83 c9 c0             	or     ecx,0xffffffc0
c001ad85:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ad89:	90                   	nop
c001ad8a:	83 c4 0c             	add    esp,0xc
c001ad8d:	c3                   	ret    

c001ad8e <PCI::readBAR8(unsigned int, int)>:
c001ad8e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ad92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad96:	f6 c2 01             	test   dl,0x1
c001ad99:	74 07                	je     c001ada2 <PCI::readBAR8(unsigned int, int)+0x14>
c001ad9b:	83 e2 fc             	and    edx,0xfffffffc
c001ad9e:	01 c2                	add    edx,eax
c001ada0:	ec                   	in     al,dx
c001ada1:	c3                   	ret    
c001ada2:	83 e2 f0             	and    edx,0xfffffff0
c001ada5:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001ada8:	c3                   	ret    
c001ada9:	90                   	nop

c001adaa <PCI::readBAR16(unsigned int, int)>:
c001adaa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001adae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001adb2:	f6 c2 01             	test   dl,0x1
c001adb5:	74 08                	je     c001adbf <PCI::readBAR16(unsigned int, int)+0x15>
c001adb7:	83 e2 fc             	and    edx,0xfffffffc
c001adba:	01 c2                	add    edx,eax
c001adbc:	66 ed                	in     ax,dx
c001adbe:	c3                   	ret    
c001adbf:	83 e2 f0             	and    edx,0xfffffff0
c001adc2:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001adc6:	c3                   	ret    
c001adc7:	90                   	nop

c001adc8 <PCI::readBAR32(unsigned int, int)>:
c001adc8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001adcc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001add0:	f6 c2 01             	test   dl,0x1
c001add3:	74 07                	je     c001addc <PCI::readBAR32(unsigned int, int)+0x14>
c001add5:	83 e2 fc             	and    edx,0xfffffffc
c001add8:	01 c2                	add    edx,eax
c001adda:	ed                   	in     eax,dx
c001addb:	c3                   	ret    
c001addc:	83 e2 f0             	and    edx,0xfffffff0
c001addf:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001ade2:	c3                   	ret    
c001ade3:	90                   	nop

c001ade4 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001ade4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ade8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001adec:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001adf0:	f6 c2 01             	test   dl,0x1
c001adf3:	74 07                	je     c001adfc <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001adf5:	83 e2 fc             	and    edx,0xfffffffc
c001adf8:	01 ca                	add    edx,ecx
c001adfa:	ee                   	out    dx,al
c001adfb:	c3                   	ret    
c001adfc:	83 e2 f0             	and    edx,0xfffffff0
c001adff:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001ae02:	c3                   	ret    
c001ae03:	90                   	nop

c001ae04 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001ae04:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae0c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ae10:	f6 c2 01             	test   dl,0x1
c001ae13:	74 08                	je     c001ae1d <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001ae15:	83 e2 fc             	and    edx,0xfffffffc
c001ae18:	01 ca                	add    edx,ecx
c001ae1a:	66 ef                	out    dx,ax
c001ae1c:	c3                   	ret    
c001ae1d:	83 e2 f0             	and    edx,0xfffffff0
c001ae20:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001ae24:	c3                   	ret    
c001ae25:	90                   	nop

c001ae26 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001ae26:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae2e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ae32:	f6 c2 01             	test   dl,0x1
c001ae35:	74 07                	je     c001ae3e <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001ae37:	83 e2 fc             	and    edx,0xfffffffc
c001ae3a:	01 ca                	add    edx,ecx
c001ae3c:	ef                   	out    dx,eax
c001ae3d:	c3                   	ret    
c001ae3e:	83 e2 f0             	and    edx,0xfffffff0
c001ae41:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001ae44:	c3                   	ret    
c001ae45:	90                   	nop

c001ae46 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ae46:	55                   	push   ebp
c001ae47:	57                   	push   edi
c001ae48:	56                   	push   esi
c001ae49:	53                   	push   ebx
c001ae4a:	83 ec 0c             	sub    esp,0xc
c001ae4d:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001ae52:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001ae56:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001ae5a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ae5e:	83 fe 07             	cmp    esi,0x7
c001ae61:	76 10                	jbe    c001ae73 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001ae63:	83 ec 0c             	sub    esp,0xc
c001ae66:	68 2b 2c 02 c0       	push   0xc0022c2b
c001ae6b:	e8 99 64 ff ff       	call   c0011309 <KePanic(char const*)>
c001ae70:	83 c4 10             	add    esp,0x10
c001ae73:	0f b6 db             	movzx  ebx,bl
c001ae76:	83 fb 0f             	cmp    ebx,0xf
c001ae79:	76 10                	jbe    c001ae8b <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001ae7b:	83 ec 0c             	sub    esp,0xc
c001ae7e:	68 5b 2c 02 c0       	push   0xc0022c5b
c001ae83:	e8 81 64 ff ff       	call   c0011309 <KePanic(char const*)>
c001ae88:	83 c4 10             	add    esp,0x10
c001ae8b:	8d 04 36             	lea    eax,[esi+esi*1]
c001ae8e:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ae93:	83 c8 f0             	or     eax,0xfffffff0
c001ae96:	ee                   	out    dx,al
c001ae97:	ba fa 0c 00 00       	mov    edx,0xcfa
c001ae9c:	89 e8                	mov    eax,ebp
c001ae9e:	ee                   	out    dx,al
c001ae9f:	89 f9                	mov    ecx,edi
c001aea1:	89 d8                	mov    eax,ebx
c001aea3:	0f b6 d9             	movzx  ebx,cl
c001aea6:	83 c4 0c             	add    esp,0xc
c001aea9:	c1 e0 08             	shl    eax,0x8
c001aeac:	83 e3 fc             	and    ebx,0xfffffffc
c001aeaf:	09 d8                	or     eax,ebx
c001aeb1:	5b                   	pop    ebx
c001aeb2:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001aeb7:	5e                   	pop    esi
c001aeb8:	5f                   	pop    edi
c001aeb9:	5d                   	pop    ebp
c001aeba:	c3                   	ret    
c001aebb:	90                   	nop

c001aebc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001aebc:	57                   	push   edi
c001aebd:	56                   	push   esi
c001aebe:	53                   	push   ebx
c001aebf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001aec3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aec7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aecb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001aecf:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001aed5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001aed9:	83 ff 01             	cmp    edi,0x1
c001aedc:	75 3f                	jne    c001af1d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001aede:	89 de                	mov    esi,ebx
c001aee0:	0f b6 c0             	movzx  eax,al
c001aee3:	c1 e0 10             	shl    eax,0x10
c001aee6:	81 e6 fc 00 00 00    	and    esi,0xfc
c001aeec:	0f b6 c9             	movzx  ecx,cl
c001aeef:	09 f0                	or     eax,esi
c001aef1:	c1 e1 08             	shl    ecx,0x8
c001aef4:	0f b6 d2             	movzx  edx,dl
c001aef7:	c1 e2 0b             	shl    edx,0xb
c001aefa:	09 c8                	or     eax,ecx
c001aefc:	09 d0                	or     eax,edx
c001aefe:	ba f8 0c 00 00       	mov    edx,0xcf8
c001af03:	0d 00 00 00 80       	or     eax,0x80000000
c001af08:	ef                   	out    dx,eax
c001af09:	ba fc 0c 00 00       	mov    edx,0xcfc
c001af0e:	ed                   	in     eax,dx
c001af0f:	83 e3 02             	and    ebx,0x2
c001af12:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001af19:	d3 e8                	shr    eax,cl
c001af1b:	eb 44                	jmp    c001af61 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001af1d:	83 ff 02             	cmp    edi,0x2
c001af20:	75 2d                	jne    c001af4f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001af22:	83 ec 0c             	sub    esp,0xc
c001af25:	0f b6 fb             	movzx  edi,bl
c001af28:	57                   	push   edi
c001af29:	0f b6 c9             	movzx  ecx,cl
c001af2c:	51                   	push   ecx
c001af2d:	0f b6 d2             	movzx  edx,dl
c001af30:	52                   	push   edx
c001af31:	0f b6 c0             	movzx  eax,al
c001af34:	50                   	push   eax
c001af35:	56                   	push   esi
c001af36:	e8 0b ff ff ff       	call   c001ae46 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af3b:	89 c2                	mov    edx,eax
c001af3d:	ed                   	in     eax,dx
c001af3e:	83 e3 02             	and    ebx,0x2
c001af41:	83 c4 20             	add    esp,0x20
c001af44:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001af4b:	d3 e8                	shr    eax,cl
c001af4d:	eb 12                	jmp    c001af61 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001af4f:	83 ec 0c             	sub    esp,0xc
c001af52:	68 8b 2c 02 c0       	push   0xc0022c8b
c001af57:	e8 ad 63 ff ff       	call   c0011309 <KePanic(char const*)>
c001af5c:	83 c4 10             	add    esp,0x10
c001af5f:	31 c0                	xor    eax,eax
c001af61:	5b                   	pop    ebx
c001af62:	5e                   	pop    esi
c001af63:	5f                   	pop    edi
c001af64:	c3                   	ret    
c001af65:	90                   	nop

c001af66 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001af66:	83 ec 18             	sub    esp,0x18
c001af69:	6a 00                	push   0x0
c001af6b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af70:	50                   	push   eax
c001af71:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af76:	50                   	push   eax
c001af77:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af7c:	50                   	push   eax
c001af7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af81:	e8 36 ff ff ff       	call   c001aebc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af86:	83 c4 2c             	add    esp,0x2c
c001af89:	c3                   	ret    

c001af8a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001af8a:	83 ec 18             	sub    esp,0x18
c001af8d:	6a 0e                	push   0xe
c001af8f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af94:	50                   	push   eax
c001af95:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af9a:	50                   	push   eax
c001af9b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001afa0:	50                   	push   eax
c001afa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001afa5:	e8 12 ff ff ff       	call   c001aebc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001afaa:	83 c4 2c             	add    esp,0x2c
c001afad:	0f b6 c0             	movzx  eax,al
c001afb0:	c3                   	ret    
c001afb1:	90                   	nop

c001afb2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001afb2:	55                   	push   ebp
c001afb3:	57                   	push   edi
c001afb4:	56                   	push   esi
c001afb5:	53                   	push   ebx
c001afb6:	83 ec 18             	sub    esp,0x18
c001afb9:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001afbe:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001afc3:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001afc8:	6a 0a                	push   0xa
c001afca:	56                   	push   esi
c001afcb:	55                   	push   ebp
c001afcc:	57                   	push   edi
c001afcd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001afd1:	e8 e6 fe ff ff       	call   c001aebc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001afd6:	83 c4 14             	add    esp,0x14
c001afd9:	6a 0a                	push   0xa
c001afdb:	56                   	push   esi
c001afdc:	55                   	push   ebp
c001afdd:	57                   	push   edi
c001afde:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001afe2:	89 c3                	mov    ebx,eax
c001afe4:	0f b6 db             	movzx  ebx,bl
c001afe7:	e8 d0 fe ff ff       	call   c001aebc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001afec:	83 c4 2c             	add    esp,0x2c
c001afef:	25 00 ff 00 00       	and    eax,0xff00
c001aff4:	09 d8                	or     eax,ebx
c001aff6:	5b                   	pop    ebx
c001aff7:	5e                   	pop    esi
c001aff8:	5f                   	pop    edi
c001aff9:	5d                   	pop    ebp
c001affa:	c3                   	ret    
c001affb:	90                   	nop

c001affc <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001affc:	83 ec 18             	sub    esp,0x18
c001afff:	6a 08                	push   0x8
c001b001:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b006:	50                   	push   eax
c001b007:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b00c:	50                   	push   eax
c001b00d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b012:	50                   	push   eax
c001b013:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b017:	e8 a0 fe ff ff       	call   c001aebc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b01c:	83 c4 2c             	add    esp,0x2c
c001b01f:	0f b6 c4             	movzx  eax,ah
c001b022:	c3                   	ret    
c001b023:	90                   	nop

c001b024 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b024:	83 ec 18             	sub    esp,0x18
c001b027:	6a 08                	push   0x8
c001b029:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b02e:	50                   	push   eax
c001b02f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b034:	50                   	push   eax
c001b035:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b03a:	50                   	push   eax
c001b03b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b03f:	e8 78 fe ff ff       	call   c001aebc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b044:	83 c4 2c             	add    esp,0x2c
c001b047:	c3                   	ret    

c001b048 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b048:	83 ec 18             	sub    esp,0x18
c001b04b:	6a 3c                	push   0x3c
c001b04d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b052:	50                   	push   eax
c001b053:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b058:	50                   	push   eax
c001b059:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b05e:	50                   	push   eax
c001b05f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b063:	e8 54 fe ff ff       	call   c001aebc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b068:	83 c4 2c             	add    esp,0x2c
c001b06b:	c3                   	ret    

c001b06c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b06c:	83 ec 18             	sub    esp,0x18
c001b06f:	6a 18                	push   0x18
c001b071:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b076:	50                   	push   eax
c001b077:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b07c:	50                   	push   eax
c001b07d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b082:	50                   	push   eax
c001b083:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b087:	e8 30 fe ff ff       	call   c001aebc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b08c:	83 c4 2c             	add    esp,0x2c
c001b08f:	0f b6 c4             	movzx  eax,ah
c001b092:	c3                   	ret    
c001b093:	90                   	nop

c001b094 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b094:	55                   	push   ebp
c001b095:	57                   	push   edi
c001b096:	56                   	push   esi
c001b097:	53                   	push   ebx
c001b098:	83 ec 28             	sub    esp,0x28
c001b09b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b09f:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001b0a4:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001b0a9:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001b0ae:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b0b5:	8d 43 12             	lea    eax,[ebx+0x12]
c001b0b8:	83 c3 10             	add    ebx,0x10
c001b0bb:	0f b6 c0             	movzx  eax,al
c001b0be:	0f b6 db             	movzx  ebx,bl
c001b0c1:	50                   	push   eax
c001b0c2:	51                   	push   ecx
c001b0c3:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001b0c7:	57                   	push   edi
c001b0c8:	55                   	push   ebp
c001b0c9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b0cd:	e8 ea fd ff ff       	call   c001aebc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0d2:	83 c4 14             	add    esp,0x14
c001b0d5:	53                   	push   ebx
c001b0d6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b0da:	51                   	push   ecx
c001b0db:	89 c6                	mov    esi,eax
c001b0dd:	57                   	push   edi
c001b0de:	55                   	push   ebp
c001b0df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b0e3:	c1 e6 10             	shl    esi,0x10
c001b0e6:	e8 d1 fd ff ff       	call   c001aebc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0eb:	83 c4 3c             	add    esp,0x3c
c001b0ee:	5b                   	pop    ebx
c001b0ef:	0f b7 c0             	movzx  eax,ax
c001b0f2:	09 f0                	or     eax,esi
c001b0f4:	5e                   	pop    esi
c001b0f5:	5f                   	pop    edi
c001b0f6:	5d                   	pop    ebp
c001b0f7:	c3                   	ret    

c001b0f8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b0f8:	55                   	push   ebp
c001b0f9:	57                   	push   edi
c001b0fa:	56                   	push   esi
c001b0fb:	53                   	push   ebx
c001b0fc:	83 ec 0c             	sub    esp,0xc
c001b0ff:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b103:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b107:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b10b:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001b10f:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001b115:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b119:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b11d:	83 f9 01             	cmp    ecx,0x1
c001b120:	75 5d                	jne    c001b17f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001b122:	0f b6 c8             	movzx  ecx,al
c001b125:	89 f0                	mov    eax,esi
c001b127:	25 fc 00 00 00       	and    eax,0xfc
c001b12c:	0f b6 d2             	movzx  edx,dl
c001b12f:	c1 e1 10             	shl    ecx,0x10
c001b132:	c1 e2 0b             	shl    edx,0xb
c001b135:	09 c1                	or     ecx,eax
c001b137:	89 f8                	mov    eax,edi
c001b139:	0f b6 f8             	movzx  edi,al
c001b13c:	c1 e7 08             	shl    edi,0x8
c001b13f:	09 f9                	or     ecx,edi
c001b141:	09 d1                	or     ecx,edx
c001b143:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b148:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b14e:	89 c8                	mov    eax,ecx
c001b150:	ef                   	out    dx,eax
c001b151:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b156:	ed                   	in     eax,dx
c001b157:	83 e6 02             	and    esi,0x2
c001b15a:	0f b7 db             	movzx  ebx,bx
c001b15d:	74 0a                	je     c001b169 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001b15f:	c1 e3 10             	shl    ebx,0x10
c001b162:	0f b7 d0             	movzx  edx,ax
c001b165:	09 d3                	or     ebx,edx
c001b167:	eb 05                	jmp    c001b16e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001b169:	66 31 c0             	xor    ax,ax
c001b16c:	09 c3                	or     ebx,eax
c001b16e:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b173:	89 c8                	mov    eax,ecx
c001b175:	ef                   	out    dx,eax
c001b176:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b17b:	89 d8                	mov    eax,ebx
c001b17d:	eb 41                	jmp    c001b1c0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b17f:	83 f9 02             	cmp    ecx,0x2
c001b182:	75 45                	jne    c001b1c9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001b184:	89 f1                	mov    ecx,esi
c001b186:	83 ec 0c             	sub    esp,0xc
c001b189:	0f b6 f1             	movzx  esi,cl
c001b18c:	89 f9                	mov    ecx,edi
c001b18e:	56                   	push   esi
c001b18f:	0f b6 f9             	movzx  edi,cl
c001b192:	57                   	push   edi
c001b193:	0f b6 d2             	movzx  edx,dl
c001b196:	52                   	push   edx
c001b197:	0f b6 c0             	movzx  eax,al
c001b19a:	50                   	push   eax
c001b19b:	55                   	push   ebp
c001b19c:	e8 a5 fc ff ff       	call   c001ae46 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b1a1:	89 c2                	mov    edx,eax
c001b1a3:	ed                   	in     eax,dx
c001b1a4:	83 c4 20             	add    esp,0x20
c001b1a7:	f6 c2 02             	test   dl,0x2
c001b1aa:	0f b7 db             	movzx  ebx,bx
c001b1ad:	74 0c                	je     c001b1bb <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001b1af:	0f b7 c8             	movzx  ecx,ax
c001b1b2:	89 d8                	mov    eax,ebx
c001b1b4:	c1 e0 10             	shl    eax,0x10
c001b1b7:	09 c8                	or     eax,ecx
c001b1b9:	eb 05                	jmp    c001b1c0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b1bb:	66 31 c0             	xor    ax,ax
c001b1be:	09 d8                	or     eax,ebx
c001b1c0:	ef                   	out    dx,eax
c001b1c1:	83 c4 0c             	add    esp,0xc
c001b1c4:	5b                   	pop    ebx
c001b1c5:	5e                   	pop    esi
c001b1c6:	5f                   	pop    edi
c001b1c7:	5d                   	pop    ebp
c001b1c8:	c3                   	ret    
c001b1c9:	c7 44 24 20 8b 2c 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022c8b
c001b1d1:	83 c4 0c             	add    esp,0xc
c001b1d4:	5b                   	pop    ebx
c001b1d5:	5e                   	pop    esi
c001b1d6:	5f                   	pop    edi
c001b1d7:	5d                   	pop    ebp
c001b1d8:	e9 2c 61 ff ff       	jmp    c0011309 <KePanic(char const*)>
c001b1dd:	90                   	nop

c001b1de <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b1de:	55                   	push   ebp
c001b1df:	57                   	push   edi
c001b1e0:	56                   	push   esi
c001b1e1:	53                   	push   ebx
c001b1e2:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b1e8:	80 3d ac a0 02 c0 00 	cmp    BYTE PTR ds:0xc002a0ac,0x0
c001b1ef:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001b1f6:	0f 85 bd 00 00 00    	jne    c001b2b9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b1fc:	83 ec 0c             	sub    esp,0xc
c001b1ff:	68 14 01 00 00       	push   0x114
c001b204:	e8 ca c8 fe ff       	call   c0007ad3 <malloc>
c001b209:	83 c4 0c             	add    esp,0xc
c001b20c:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001b212:	68 91 2c 02 c0       	push   0xc0022c91
c001b217:	50                   	push   eax
c001b218:	89 c3                	mov    ebx,eax
c001b21a:	e8 25 06 ff ff       	call   c000b844 <File::File(char const*, Process*)>
c001b21f:	83 c4 10             	add    esp,0x10
c001b222:	85 db                	test   ebx,ebx
c001b224:	0f 84 6b 02 00 00    	je     c001b495 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b22a:	57                   	push   edi
c001b22b:	57                   	push   edi
c001b22c:	6a 01                	push   0x1
c001b22e:	53                   	push   ebx
c001b22f:	e8 d8 06 ff ff       	call   c000b90c <File::open(FileOpenMode)>
c001b234:	83 c4 10             	add    esp,0x10
c001b237:	85 c0                	test   eax,eax
c001b239:	0f 85 56 02 00 00    	jne    c001b495 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b23f:	52                   	push   edx
c001b240:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b244:	50                   	push   eax
c001b245:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b249:	50                   	push   eax
c001b24a:	53                   	push   ebx
c001b24b:	e8 be 09 ff ff       	call   c000bc0e <File::stat(unsigned long long*, bool*)>
c001b250:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b254:	40                   	inc    eax
c001b255:	89 04 24             	mov    DWORD PTR [esp],eax
c001b258:	e8 76 c8 fe ff       	call   c0007ad3 <malloc>
c001b25d:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b261:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b265:	59                   	pop    ecx
c001b266:	a3 a8 a0 02 c0       	mov    ds:0xc002a0a8,eax
c001b26b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b26d:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b271:	51                   	push   ecx
c001b272:	50                   	push   eax
c001b273:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b277:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b27b:	53                   	push   ebx
c001b27c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b27f:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b283:	83 c4 20             	add    esp,0x20
c001b286:	89 c8                	mov    eax,ecx
c001b288:	99                   	cdq    
c001b289:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b28d:	0f 85 02 02 00 00    	jne    c001b495 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b293:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b297:	0f 85 f8 01 00 00    	jne    c001b495 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b29d:	83 ec 0c             	sub    esp,0xc
c001b2a0:	53                   	push   ebx
c001b2a1:	e8 c4 06 ff ff       	call   c000b96a <File::close()>
c001b2a6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b2aa:	83 c4 10             	add    esp,0x10
c001b2ad:	c6 05 ac a0 02 c0 01 	mov    BYTE PTR ds:0xc002a0ac,0x1
c001b2b4:	a3 a4 a0 02 c0       	mov    ds:0xc002a0a4,eax
c001b2b9:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b2c1:	31 c9                	xor    ecx,ecx
c001b2c3:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001b2ca:	8b 2d a4 a0 02 c0    	mov    ebp,DWORD PTR ds:0xc002a0a4
c001b2d0:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b2d7:	8b 15 a8 a0 02 c0    	mov    edx,DWORD PTR ds:0xc002a0a8
c001b2dd:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b2e2:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b2ea:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b2ef:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b2f7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b2fb:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b303:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b307:	39 cd                	cmp    ebp,ecx
c001b309:	0f 8e 86 01 00 00    	jle    c001b495 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b30f:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001b312:	d4 40                	aam    0x40
c001b314:	d5 39                	aad    0x39
c001b316:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b31a:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001b31e:	d4 40                	aam    0x40
c001b320:	d5 39                	aad    0x39
c001b322:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b326:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001b32a:	d4 40                	aam    0x40
c001b32c:	d5 39                	aad    0x39
c001b32e:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b332:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001b336:	d4 40                	aam    0x40
c001b338:	d5 39                	aad    0x39
c001b33a:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b33e:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001b342:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b346:	3c 56                	cmp    al,0x56
c001b348:	74 47                	je     c001b391 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001b34a:	d4 40                	aam    0x40
c001b34c:	d5 39                	aad    0x39
c001b34e:	8d 58 d0             	lea    ebx,[eax-0x30]
c001b351:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001b355:	0f b6 db             	movzx  ebx,bl
c001b358:	c1 e3 04             	shl    ebx,0x4
c001b35b:	d4 40                	aam    0x40
c001b35d:	d5 39                	aad    0x39
c001b35f:	83 e8 30             	sub    eax,0x30
c001b362:	0f b6 c0             	movzx  eax,al
c001b365:	09 c3                	or     ebx,eax
c001b367:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001b36b:	c1 e3 04             	shl    ebx,0x4
c001b36e:	d4 40                	aam    0x40
c001b370:	d5 39                	aad    0x39
c001b372:	83 e8 30             	sub    eax,0x30
c001b375:	0f b6 c0             	movzx  eax,al
c001b378:	09 c3                	or     ebx,eax
c001b37a:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001b37e:	c1 e3 04             	shl    ebx,0x4
c001b381:	d4 40                	aam    0x40
c001b383:	d5 39                	aad    0x39
c001b385:	83 e8 30             	sub    eax,0x30
c001b388:	0f b6 c0             	movzx  eax,al
c001b38b:	09 c3                	or     ebx,eax
c001b38d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001b391:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001b395:	80 fb 58             	cmp    bl,0x58
c001b398:	74 49                	je     c001b3e3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001b39a:	88 d8                	mov    al,bl
c001b39c:	d4 40                	aam    0x40
c001b39e:	d5 39                	aad    0x39
c001b3a0:	83 e8 30             	sub    eax,0x30
c001b3a3:	0f b6 f8             	movzx  edi,al
c001b3a6:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001b3aa:	c1 e7 04             	shl    edi,0x4
c001b3ad:	d4 40                	aam    0x40
c001b3af:	d5 39                	aad    0x39
c001b3b1:	83 e8 30             	sub    eax,0x30
c001b3b4:	0f b6 c0             	movzx  eax,al
c001b3b7:	09 c7                	or     edi,eax
c001b3b9:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001b3bd:	c1 e7 04             	shl    edi,0x4
c001b3c0:	d4 40                	aam    0x40
c001b3c2:	d5 39                	aad    0x39
c001b3c4:	83 e8 30             	sub    eax,0x30
c001b3c7:	0f b6 c0             	movzx  eax,al
c001b3ca:	09 c7                	or     edi,eax
c001b3cc:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001b3d0:	c1 e7 04             	shl    edi,0x4
c001b3d3:	d4 40                	aam    0x40
c001b3d5:	d5 39                	aad    0x39
c001b3d7:	83 e8 30             	sub    eax,0x30
c001b3da:	0f b6 c0             	movzx  eax,al
c001b3dd:	09 c7                	or     edi,eax
c001b3df:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001b3e3:	8d 41 10             	lea    eax,[ecx+0x10]
c001b3e6:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b3ea:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001b3ee:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b3f2:	83 f9 0a             	cmp    ecx,0xa
c001b3f5:	74 07                	je     c001b3fe <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001b3f7:	47                   	inc    edi
c001b3f8:	39 c5                	cmp    ebp,eax
c001b3fa:	75 16                	jne    c001b412 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001b3fc:	89 e8                	mov    eax,ebp
c001b3fe:	83 f9 0a             	cmp    ecx,0xa
c001b401:	0f 94 c1             	sete   cl
c001b404:	0f b6 c9             	movzx  ecx,cl
c001b407:	01 c1                	add    ecx,eax
c001b409:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b40e:	75 0f                	jne    c001b41f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001b410:	eb 1c                	jmp    c001b42e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001b412:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b415:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001b419:	40                   	inc    eax
c001b41a:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001b41d:	eb cb                	jmp    c001b3ea <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001b41f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b423:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b428:	0f 85 d9 fe ff ff    	jne    c001b307 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b42e:	80 fb 58             	cmp    bl,0x58
c001b431:	74 10                	je     c001b443 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001b433:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b438:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001b43d:	0f 85 c4 fe ff ff    	jne    c001b307 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b443:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b447:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b44b:	83 e8 30             	sub    eax,0x30
c001b44e:	c1 e0 04             	shl    eax,0x4
c001b451:	83 eb 30             	sub    ebx,0x30
c001b454:	09 d8                	or     eax,ebx
c001b456:	0f b6 c0             	movzx  eax,al
c001b459:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b45d:	0f 85 a4 fe ff ff    	jne    c001b307 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b463:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b467:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b46b:	83 e8 30             	sub    eax,0x30
c001b46e:	c1 e0 04             	shl    eax,0x4
c001b471:	83 eb 30             	sub    ebx,0x30
c001b474:	09 d8                	or     eax,ebx
c001b476:	0f b6 c0             	movzx  eax,al
c001b479:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b47d:	0f 85 84 fe ff ff    	jne    c001b307 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b483:	50                   	push   eax
c001b484:	50                   	push   eax
c001b485:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b489:	50                   	push   eax
c001b48a:	56                   	push   esi
c001b48b:	e8 c0 51 fe ff       	call   c0000650 <strcpy>
c001b490:	83 c4 10             	add    esp,0x10
c001b493:	eb 05                	jmp    c001b49a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001b495:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b498:	31 f6                	xor    esi,esi
c001b49a:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b4a0:	89 f0                	mov    eax,esi
c001b4a2:	5b                   	pop    ebx
c001b4a3:	5e                   	pop    esi
c001b4a4:	5f                   	pop    edi
c001b4a5:	5d                   	pop    ebp
c001b4a6:	c3                   	ret    
c001b4a7:	90                   	nop

c001b4a8 <PCI::checkBus(unsigned char)>:
c001b4a8:	56                   	push   esi
c001b4a9:	53                   	push   ebx
c001b4aa:	31 db                	xor    ebx,ebx
c001b4ac:	51                   	push   ecx
c001b4ad:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b4b2:	52                   	push   edx
c001b4b3:	53                   	push   ebx
c001b4b4:	43                   	inc    ebx
c001b4b5:	56                   	push   esi
c001b4b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b4ba:	e8 0f 03 00 00       	call   c001b7ce <PCI::checkDevice(unsigned char, unsigned char)>
c001b4bf:	83 c4 10             	add    esp,0x10
c001b4c2:	83 fb 20             	cmp    ebx,0x20
c001b4c5:	75 eb                	jne    c001b4b2 <PCI::checkBus(unsigned char)+0xa>
c001b4c7:	58                   	pop    eax
c001b4c8:	5b                   	pop    ebx
c001b4c9:	5e                   	pop    esi
c001b4ca:	c3                   	ret    
c001b4cb:	90                   	nop

c001b4cc <PCI::foundDevice(PCIDeviceInfo)>:
c001b4cc:	55                   	push   ebp
c001b4cd:	57                   	push   edi
c001b4ce:	56                   	push   esi
c001b4cf:	53                   	push   ebx
c001b4d0:	83 ec 1c             	sub    esp,0x1c
c001b4d3:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001b4d8:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b4dc:	3d ff ff 00 00       	cmp    eax,0xffff
c001b4e1:	0f 84 63 01 00 00    	je     c001b64a <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001b4e7:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001b4ec:	66 3d 06 04          	cmp    ax,0x406
c001b4f0:	75 2c                	jne    c001b51e <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001b4f2:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b4f7:	50                   	push   eax
c001b4f8:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b4fd:	50                   	push   eax
c001b4fe:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b503:	50                   	push   eax
c001b504:	53                   	push   ebx
c001b505:	e8 62 fb ff ff       	call   c001b06c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b50a:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b50e:	0f b6 c0             	movzx  eax,al
c001b511:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b515:	83 c4 2c             	add    esp,0x2c
c001b518:	5b                   	pop    ebx
c001b519:	5e                   	pop    esi
c001b51a:	5f                   	pop    edi
c001b51b:	5d                   	pop    ebp
c001b51c:	eb 8a                	jmp    c001b4a8 <PCI::checkBus(unsigned char)>
c001b51e:	0f b6 4c 24 54       	movzx  ecx,BYTE PTR [esp+0x54]
c001b523:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001b529:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001b52d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b531:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b535:	85 d2                	test   edx,edx
c001b537:	74 34                	je     c001b56d <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c001b539:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001b53c:	85 c9                	test   ecx,ecx
c001b53e:	74 29                	je     c001b569 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b540:	8b a9 18 01 00 00    	mov    ebp,DWORD PTR [ecx+0x118]
c001b546:	31 f5                	xor    ebp,esi
c001b548:	81 e5 ff 00 ff ff    	and    ebp,0xffff00ff
c001b54e:	75 19                	jne    c001b569 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b550:	39 b9 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],edi
c001b556:	75 11                	jne    c001b569 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b558:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001b55f:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001b563:	0f 84 e1 00 00 00    	je     c001b64a <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001b569:	8b 12                	mov    edx,DWORD PTR [edx]
c001b56b:	eb c8                	jmp    c001b535 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001b56d:	3d 01 06 00 00       	cmp    eax,0x601
c001b572:	75 19                	jne    c001b58d <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001b574:	83 ec 0c             	sub    esp,0xc
c001b577:	68 64 01 00 00       	push   0x164
c001b57c:	e8 52 c5 fe ff       	call   c0007ad3 <malloc>
c001b581:	89 04 24             	mov    DWORD PTR [esp],eax
c001b584:	89 c5                	mov    ebp,eax
c001b586:	e8 ab 0e 00 00       	call   c001c436 <SATABus::SATABus()>
c001b58b:	eb 1e                	jmp    c001b5ab <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001b58d:	3d 01 01 00 00       	cmp    eax,0x101
c001b592:	75 62                	jne    c001b5f6 <PCI::foundDevice(PCIDeviceInfo)+0x12a>
c001b594:	83 ec 0c             	sub    esp,0xc
c001b597:	68 70 02 00 00       	push   0x270
c001b59c:	e8 32 c5 fe ff       	call   c0007ad3 <malloc>
c001b5a1:	89 04 24             	mov    DWORD PTR [esp],eax
c001b5a4:	89 c5                	mov    ebp,eax
c001b5a6:	e8 f3 02 00 00       	call   c001b89e <IDE::IDE()>
c001b5ab:	58                   	pop    eax
c001b5ac:	5a                   	pop    edx
c001b5ad:	55                   	push   ebp
c001b5ae:	53                   	push   ebx
c001b5af:	e8 b8 11 ff ff       	call   c000c76c <Device::addChild(Device*)>
c001b5b4:	83 ec 1c             	sub    esp,0x1c
c001b5b7:	b9 09 00 00 00       	mov    ecx,0x9
c001b5bc:	fc                   	cld    
c001b5bd:	8d 74 24 60          	lea    esi,[esp+0x60]
c001b5c1:	89 e7                	mov    edi,esp
c001b5c3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b5c5:	55                   	push   ebp
c001b5c6:	e8 e7 10 ff ff       	call   c000c6b2 <Device::preOpenPCI(PCIDeviceInfo)>
c001b5cb:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001b5ce:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b5d2:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b5da:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b5e2:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b5ea:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001b5ed:	83 c4 4c             	add    esp,0x4c
c001b5f0:	5b                   	pop    ebx
c001b5f1:	5e                   	pop    esi
c001b5f2:	5f                   	pop    edi
c001b5f3:	5d                   	pop    ebp
c001b5f4:	ff e0                	jmp    eax
c001b5f6:	83 ec 0c             	sub    esp,0xc
c001b5f9:	68 58 01 00 00       	push   0x158
c001b5fe:	e8 d0 c4 fe ff       	call   c0007ad3 <malloc>
c001b603:	5a                   	pop    edx
c001b604:	59                   	pop    ecx
c001b605:	68 aa 2c 02 c0       	push   0xc0022caa
c001b60a:	50                   	push   eax
c001b60b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b60f:	e8 f6 13 ff ff       	call   c000ca0a <DriverlessDevice::DriverlessDevice(char const*)>
c001b614:	5e                   	pop    esi
c001b615:	5f                   	pop    edi
c001b616:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b61a:	50                   	push   eax
c001b61b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b61f:	53                   	push   ebx
c001b620:	e8 47 11 ff ff       	call   c000c76c <Device::addChild(Device*)>
c001b625:	83 c4 10             	add    esp,0x10
c001b628:	b9 09 00 00 00       	mov    ecx,0x9
c001b62d:	fc                   	cld    
c001b62e:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001b632:	89 fe                	mov    esi,edi
c001b634:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b636:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b63a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b63e:	83 c4 1c             	add    esp,0x1c
c001b641:	5b                   	pop    ebx
c001b642:	5e                   	pop    esi
c001b643:	5f                   	pop    edi
c001b644:	5d                   	pop    ebp
c001b645:	e9 68 10 ff ff       	jmp    c000c6b2 <Device::preOpenPCI(PCIDeviceInfo)>
c001b64a:	83 c4 1c             	add    esp,0x1c
c001b64d:	5b                   	pop    ebx
c001b64e:	5e                   	pop    esi
c001b64f:	5f                   	pop    edi
c001b650:	5d                   	pop    ebp
c001b651:	c3                   	ret    

c001b652 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b652:	55                   	push   ebp
c001b653:	57                   	push   edi
c001b654:	56                   	push   esi
c001b655:	53                   	push   ebx
c001b656:	83 ec 68             	sub    esp,0x68
c001b659:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b660:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001b664:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b668:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b66f:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001b674:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b678:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b67f:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001b684:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b688:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001b68d:	6a 0c                	push   0xc
c001b68f:	57                   	push   edi
c001b690:	53                   	push   ebx
c001b691:	56                   	push   esi
c001b692:	55                   	push   ebp
c001b693:	e8 24 f8 ff ff       	call   c001aebc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b698:	83 c4 20             	add    esp,0x20
c001b69b:	57                   	push   edi
c001b69c:	53                   	push   ebx
c001b69d:	56                   	push   esi
c001b69e:	55                   	push   ebp
c001b69f:	e8 0e f9 ff ff       	call   c001afb2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b6a4:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001b6a9:	57                   	push   edi
c001b6aa:	53                   	push   ebx
c001b6ab:	56                   	push   esi
c001b6ac:	55                   	push   ebp
c001b6ad:	e8 96 f9 ff ff       	call   c001b048 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b6b2:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b6b6:	83 c4 14             	add    esp,0x14
c001b6b9:	6a 3c                	push   0x3c
c001b6bb:	57                   	push   edi
c001b6bc:	53                   	push   ebx
c001b6bd:	56                   	push   esi
c001b6be:	55                   	push   ebp
c001b6bf:	e8 f8 f7 ff ff       	call   c001aebc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b6c4:	0f b6 c4             	movzx  eax,ah
c001b6c7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b6cb:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001b6cf:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001b6d3:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001b6d8:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001b6de:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001b6e4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b6e8:	83 c4 20             	add    esp,0x20
c001b6eb:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001b6f0:	74 30                	je     c001b722 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b6f2:	31 c0                	xor    eax,eax
c001b6f4:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001b6f8:	7e 28                	jle    c001b722 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b6fa:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001b702:	39 cb                	cmp    ebx,ecx
c001b704:	75 19                	jne    c001b71f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b706:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001b70e:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001b712:	75 0b                	jne    c001b71f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b714:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001b71b:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b71f:	40                   	inc    eax
c001b720:	eb d2                	jmp    c001b6f4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001b722:	31 d2                	xor    edx,edx
c001b724:	83 ec 0c             	sub    esp,0xc
c001b727:	57                   	push   edi
c001b728:	53                   	push   ebx
c001b729:	56                   	push   esi
c001b72a:	52                   	push   edx
c001b72b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001b72f:	55                   	push   ebp
c001b730:	e8 5f f9 ff ff       	call   c001b094 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b735:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b739:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001b73d:	42                   	inc    edx
c001b73e:	83 c4 20             	add    esp,0x20
c001b741:	83 fa 06             	cmp    edx,0x6
c001b744:	75 de                	jne    c001b724 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001b746:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b74a:	83 ec 0c             	sub    esp,0xc
c001b74d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b751:	c1 e2 08             	shl    edx,0x8
c001b754:	0f b6 c4             	movzx  eax,ah
c001b757:	09 d0                	or     eax,edx
c001b759:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001b75e:	6a 02                	push   0x2
c001b760:	57                   	push   edi
c001b761:	53                   	push   ebx
c001b762:	56                   	push   esi
c001b763:	55                   	push   ebp
c001b764:	e8 53 f7 ff ff       	call   c001aebc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b769:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001b76e:	83 c4 20             	add    esp,0x20
c001b771:	57                   	push   edi
c001b772:	53                   	push   ebx
c001b773:	56                   	push   esi
c001b774:	55                   	push   ebp
c001b775:	e8 82 f8 ff ff       	call   c001affc <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001b77a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b77e:	57                   	push   edi
c001b77f:	53                   	push   ebx
c001b780:	56                   	push   esi
c001b781:	55                   	push   ebp
c001b782:	e8 df f7 ff ff       	call   c001af66 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b787:	b9 09 00 00 00       	mov    ecx,0x9
c001b78c:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001b791:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001b795:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001b799:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001b79d:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001b7a1:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001b7a5:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001b7a9:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001b7ad:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001b7b1:	83 ec 0c             	sub    esp,0xc
c001b7b4:	fc                   	cld    
c001b7b5:	8d 74 24 58          	lea    esi,[esp+0x58]
c001b7b9:	89 e7                	mov    edi,esp
c001b7bb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b7bd:	55                   	push   ebp
c001b7be:	e8 09 fd ff ff       	call   c001b4cc <PCI::foundDevice(PCIDeviceInfo)>
c001b7c3:	81 c4 8c 00 00 00    	add    esp,0x8c
c001b7c9:	5b                   	pop    ebx
c001b7ca:	5e                   	pop    esi
c001b7cb:	5f                   	pop    edi
c001b7cc:	5d                   	pop    ebp
c001b7cd:	c3                   	ret    

c001b7ce <PCI::checkDevice(unsigned char, unsigned char)>:
c001b7ce:	55                   	push   ebp
c001b7cf:	57                   	push   edi
c001b7d0:	56                   	push   esi
c001b7d1:	53                   	push   ebx
c001b7d2:	83 ec 0c             	sub    esp,0xc
c001b7d5:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001b7da:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b7df:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b7e3:	6a 00                	push   0x0
c001b7e5:	56                   	push   esi
c001b7e6:	57                   	push   edi
c001b7e7:	55                   	push   ebp
c001b7e8:	e8 79 f7 ff ff       	call   c001af66 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b7ed:	6a 00                	push   0x0
c001b7ef:	56                   	push   esi
c001b7f0:	57                   	push   edi
c001b7f1:	55                   	push   ebp
c001b7f2:	e8 5b fe ff ff       	call   c001b652 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b7f7:	83 c4 20             	add    esp,0x20
c001b7fa:	6a 00                	push   0x0
c001b7fc:	56                   	push   esi
c001b7fd:	57                   	push   edi
c001b7fe:	55                   	push   ebp
c001b7ff:	e8 86 f7 ff ff       	call   c001af8a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b804:	83 c4 10             	add    esp,0x10
c001b807:	a8 80                	test   al,0x80
c001b809:	74 2d                	je     c001b838 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001b80b:	bb 01 00 00 00       	mov    ebx,0x1
c001b810:	53                   	push   ebx
c001b811:	56                   	push   esi
c001b812:	57                   	push   edi
c001b813:	55                   	push   ebp
c001b814:	e8 4d f7 ff ff       	call   c001af66 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b819:	83 c4 10             	add    esp,0x10
c001b81c:	0f b7 c0             	movzx  eax,ax
c001b81f:	3d ff ff 00 00       	cmp    eax,0xffff
c001b824:	74 0c                	je     c001b832 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001b826:	53                   	push   ebx
c001b827:	56                   	push   esi
c001b828:	57                   	push   edi
c001b829:	55                   	push   ebp
c001b82a:	e8 23 fe ff ff       	call   c001b652 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b82f:	83 c4 10             	add    esp,0x10
c001b832:	43                   	inc    ebx
c001b833:	83 fb 08             	cmp    ebx,0x8
c001b836:	75 d8                	jne    c001b810 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001b838:	83 c4 0c             	add    esp,0xc
c001b83b:	5b                   	pop    ebx
c001b83c:	5e                   	pop    esi
c001b83d:	5f                   	pop    edi
c001b83e:	5d                   	pop    ebp
c001b83f:	c3                   	ret    

c001b840 <PCI::detect()>:
c001b840:	56                   	push   esi
c001b841:	53                   	push   ebx
c001b842:	53                   	push   ebx
c001b843:	31 db                	xor    ebx,ebx
c001b845:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b849:	6a 00                	push   0x0
c001b84b:	6a 00                	push   0x0
c001b84d:	6a 00                	push   0x0
c001b84f:	56                   	push   esi
c001b850:	e8 35 f7 ff ff       	call   c001af8a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b855:	83 c4 10             	add    esp,0x10
c001b858:	a8 80                	test   al,0x80
c001b85a:	75 21                	jne    c001b87d <PCI::detect()+0x3d>
c001b85c:	51                   	push   ecx
c001b85d:	51                   	push   ecx
c001b85e:	6a 00                	push   0x0
c001b860:	56                   	push   esi
c001b861:	e8 42 fc ff ff       	call   c001b4a8 <PCI::checkBus(unsigned char)>
c001b866:	83 c4 10             	add    esp,0x10
c001b869:	eb 2a                	jmp    c001b895 <PCI::detect()+0x55>
c001b86b:	52                   	push   edx
c001b86c:	52                   	push   edx
c001b86d:	53                   	push   ebx
c001b86e:	43                   	inc    ebx
c001b86f:	56                   	push   esi
c001b870:	e8 33 fc ff ff       	call   c001b4a8 <PCI::checkBus(unsigned char)>
c001b875:	83 c4 10             	add    esp,0x10
c001b878:	83 fb 08             	cmp    ebx,0x8
c001b87b:	74 18                	je     c001b895 <PCI::detect()+0x55>
c001b87d:	53                   	push   ebx
c001b87e:	6a 00                	push   0x0
c001b880:	6a 00                	push   0x0
c001b882:	56                   	push   esi
c001b883:	e8 de f6 ff ff       	call   c001af66 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b888:	83 c4 10             	add    esp,0x10
c001b88b:	0f b7 c0             	movzx  eax,ax
c001b88e:	3d ff ff 00 00       	cmp    eax,0xffff
c001b893:	74 d6                	je     c001b86b <PCI::detect()+0x2b>
c001b895:	58                   	pop    eax
c001b896:	5b                   	pop    ebx
c001b897:	5e                   	pop    esi
c001b898:	c3                   	ret    
c001b899:	90                   	nop

c001b89a <IDE::close(int, int, void*)>:
c001b89a:	83 c8 ff             	or     eax,0xffffffff
c001b89d:	c3                   	ret    

c001b89e <IDE::IDE()>:
c001b89e:	83 ec 0c             	sub    esp,0xc
c001b8a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8a5:	83 ec 08             	sub    esp,0x8
c001b8a8:	68 f0 2c 02 c0       	push   0xc0022cf0
c001b8ad:	50                   	push   eax
c001b8ae:	e8 fd 11 ff ff       	call   c000cab0 <HardDiskController::HardDiskController(char const*)>
c001b8b3:	83 c4 10             	add    esp,0x10
c001b8b6:	ba 80 2d 02 c0       	mov    edx,0xc0022d80
c001b8bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8bf:	89 10                	mov    DWORD PTR [eax],edx
c001b8c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8c5:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001b8cc:	90                   	nop
c001b8cd:	83 c4 0c             	add    esp,0xc
c001b8d0:	c3                   	ret    
c001b8d1:	90                   	nop

c001b8d2 <IDE::prepareInterrupt(unsigned char)>:
c001b8d2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b8d7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b8db:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001b8e3:	c3                   	ret    

c001b8e4 <selectDrive(unsigned char, unsigned char)>:
c001b8e4:	c3                   	ret    
c001b8e5:	90                   	nop

c001b8e6 <IDE::getBase(unsigned char)>:
c001b8e6:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001b8eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b8ef:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001b8f7:	c3                   	ret    

c001b8f8 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001b8f8:	55                   	push   ebp
c001b8f9:	57                   	push   edi
c001b8fa:	56                   	push   esi
c001b8fb:	53                   	push   ebx
c001b8fc:	83 ec 1c             	sub    esp,0x1c
c001b8ff:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b903:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b907:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b90b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b90f:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001b912:	80 f9 03             	cmp    cl,0x3
c001b915:	77 4f                	ja     c001b966 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001b917:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b91b:	0f b6 f2             	movzx  esi,dl
c001b91e:	0f b6 db             	movzx  ebx,bl
c001b921:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001b924:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001b929:	80 ca 80             	or     dl,0x80
c001b92c:	52                   	push   edx
c001b92d:	6a 0c                	push   0xc
c001b92f:	56                   	push   esi
c001b930:	57                   	push   edi
c001b931:	e8 c2 ff ff ff       	call   c001b8f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b936:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001b93b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b93f:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001b943:	ee                   	out    dx,al
c001b944:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001b949:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001b94d:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001b951:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b959:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b95d:	83 c4 2c             	add    esp,0x2c
c001b960:	5b                   	pop    ebx
c001b961:	5e                   	pop    esi
c001b962:	5f                   	pop    edi
c001b963:	5d                   	pop    ebp
c001b964:	eb 92                	jmp    c001b8f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b966:	0f b6 cb             	movzx  ecx,bl
c001b969:	83 f9 07             	cmp    ecx,0x7
c001b96c:	77 12                	ja     c001b980 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001b96e:	0f b6 d2             	movzx  edx,dl
c001b971:	0f b6 db             	movzx  ebx,bl
c001b974:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001b97c:	01 da                	add    edx,ebx
c001b97e:	eb 2f                	jmp    c001b9af <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b980:	83 f9 0d             	cmp    ecx,0xd
c001b983:	77 13                	ja     c001b998 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001b985:	0f b6 d2             	movzx  edx,dl
c001b988:	0f b6 db             	movzx  ebx,bl
c001b98b:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001b992:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001b996:	eb 17                	jmp    c001b9af <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b998:	83 f9 15             	cmp    ecx,0x15
c001b99b:	77 13                	ja     c001b9b0 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001b99d:	0f b6 d2             	movzx  edx,dl
c001b9a0:	0f b6 db             	movzx  ebx,bl
c001b9a3:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001b9ab:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001b9af:	ee                   	out    dx,al
c001b9b0:	83 c4 1c             	add    esp,0x1c
c001b9b3:	5b                   	pop    ebx
c001b9b4:	5e                   	pop    esi
c001b9b5:	5f                   	pop    edi
c001b9b6:	5d                   	pop    ebp
c001b9b7:	c3                   	ret    

c001b9b8 <IDE::read(unsigned char, unsigned char)>:
c001b9b8:	57                   	push   edi
c001b9b9:	56                   	push   esi
c001b9ba:	53                   	push   ebx
c001b9bb:	83 ec 10             	sub    esp,0x10
c001b9be:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b9c2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b9c6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001b9ca:	8d 42 f8             	lea    eax,[edx-0x8]
c001b9cd:	3c 03                	cmp    al,0x3
c001b9cf:	77 48                	ja     c001ba19 <IDE::read(unsigned char, unsigned char)+0x61>
c001b9d1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b9d5:	0f b6 f1             	movzx  esi,cl
c001b9d8:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001b9db:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001b9e0:	0c 80                	or     al,0x80
c001b9e2:	50                   	push   eax
c001b9e3:	6a 0c                	push   0xc
c001b9e5:	56                   	push   esi
c001b9e6:	53                   	push   ebx
c001b9e7:	e8 0c ff ff ff       	call   c001b8f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b9ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b9f0:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001b9f5:	0f b6 d2             	movzx  edx,dl
c001b9f8:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b9fc:	ec                   	in     al,dx
c001b9fd:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001ba01:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001ba06:	52                   	push   edx
c001ba07:	6a 0c                	push   0xc
c001ba09:	56                   	push   esi
c001ba0a:	53                   	push   ebx
c001ba0b:	e8 e8 fe ff ff       	call   c001b8f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba10:	83 c4 20             	add    esp,0x20
c001ba13:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ba17:	eb 4c                	jmp    c001ba65 <IDE::read(unsigned char, unsigned char)+0xad>
c001ba19:	0f b6 f2             	movzx  esi,dl
c001ba1c:	83 fe 07             	cmp    esi,0x7
c001ba1f:	77 12                	ja     c001ba33 <IDE::read(unsigned char, unsigned char)+0x7b>
c001ba21:	0f b6 c9             	movzx  ecx,cl
c001ba24:	0f b6 d2             	movzx  edx,dl
c001ba27:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001ba2f:	01 c2                	add    edx,eax
c001ba31:	eb 31                	jmp    c001ba64 <IDE::read(unsigned char, unsigned char)+0xac>
c001ba33:	83 fe 0d             	cmp    esi,0xd
c001ba36:	77 13                	ja     c001ba4b <IDE::read(unsigned char, unsigned char)+0x93>
c001ba38:	0f b6 c9             	movzx  ecx,cl
c001ba3b:	0f b6 d2             	movzx  edx,dl
c001ba3e:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001ba45:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001ba49:	eb 19                	jmp    c001ba64 <IDE::read(unsigned char, unsigned char)+0xac>
c001ba4b:	31 c0                	xor    eax,eax
c001ba4d:	83 fe 15             	cmp    esi,0x15
c001ba50:	77 13                	ja     c001ba65 <IDE::read(unsigned char, unsigned char)+0xad>
c001ba52:	0f b6 c9             	movzx  ecx,cl
c001ba55:	0f b6 d2             	movzx  edx,dl
c001ba58:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001ba60:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ba64:	ec                   	in     al,dx
c001ba65:	83 c4 10             	add    esp,0x10
c001ba68:	5b                   	pop    ebx
c001ba69:	5e                   	pop    esi
c001ba6a:	5f                   	pop    edi
c001ba6b:	c3                   	ret    

c001ba6c <IDE::waitInterrupt(unsigned char)>:
c001ba6c:	55                   	push   ebp
c001ba6d:	57                   	push   edi
c001ba6e:	56                   	push   esi
c001ba6f:	53                   	push   ebx
c001ba70:	31 db                	xor    ebx,ebx
c001ba72:	83 ec 0c             	sub    esp,0xc
c001ba75:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ba79:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001ba7e:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001ba86:	89 e8                	mov    eax,ebp
c001ba88:	84 c0                	test   al,al
c001ba8a:	75 30                	jne    c001babc <IDE::waitInterrupt(unsigned char)+0x50>
c001ba8c:	50                   	push   eax
c001ba8d:	6a 0c                	push   0xc
c001ba8f:	56                   	push   esi
c001ba90:	57                   	push   edi
c001ba91:	e8 22 ff ff ff       	call   c001b9b8 <IDE::read(unsigned char, unsigned char)>
c001ba96:	83 c4 10             	add    esp,0x10
c001ba99:	a8 01                	test   al,0x1
c001ba9b:	75 27                	jne    c001bac4 <IDE::waitInterrupt(unsigned char)+0x58>
c001ba9d:	f6 c3 04             	test   bl,0x4
c001baa0:	75 12                	jne    c001bab4 <IDE::waitInterrupt(unsigned char)+0x48>
c001baa2:	83 fb 32             	cmp    ebx,0x32
c001baa5:	7e 0d                	jle    c001bab4 <IDE::waitInterrupt(unsigned char)+0x48>
c001baa7:	83 ec 0c             	sub    esp,0xc
c001baaa:	6a 64                	push   0x64
c001baac:	e8 73 a4 ff ff       	call   c0015f24 <milliTenthSleep(unsigned int)>
c001bab1:	83 c4 10             	add    esp,0x10
c001bab4:	83 fb 3c             	cmp    ebx,0x3c
c001bab7:	74 0b                	je     c001bac4 <IDE::waitInterrupt(unsigned char)+0x58>
c001bab9:	43                   	inc    ebx
c001baba:	eb c2                	jmp    c001ba7e <IDE::waitInterrupt(unsigned char)+0x12>
c001babc:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001bac4:	83 c4 0c             	add    esp,0xc
c001bac7:	89 e8                	mov    eax,ebp
c001bac9:	5b                   	pop    ebx
c001baca:	5e                   	pop    esi
c001bacb:	5f                   	pop    edi
c001bacc:	5d                   	pop    ebp
c001bacd:	c3                   	ret    

c001bace <ideChannel0IRQHandler(regs*, void*)>:
c001bace:	83 ec 10             	sub    esp,0x10
c001bad1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bad5:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001badc:	6a 07                	push   0x7
c001bade:	6a 00                	push   0x0
c001bae0:	50                   	push   eax
c001bae1:	e8 d2 fe ff ff       	call   c001b9b8 <IDE::read(unsigned char, unsigned char)>
c001bae6:	83 c4 1c             	add    esp,0x1c
c001bae9:	c3                   	ret    

c001baea <ideChannel1IRQHandler(regs*, void*)>:
c001baea:	83 ec 10             	sub    esp,0x10
c001baed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001baf1:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001baf8:	6a 07                	push   0x7
c001bafa:	6a 01                	push   0x1
c001bafc:	50                   	push   eax
c001bafd:	e8 b6 fe ff ff       	call   c001b9b8 <IDE::read(unsigned char, unsigned char)>
c001bb02:	83 c4 1c             	add    esp,0x1c
c001bb05:	c3                   	ret    

c001bb06 <IDE::enableIRQs(unsigned char, bool)>:
c001bb06:	57                   	push   edi
c001bb07:	b8 02 00 00 00       	mov    eax,0x2
c001bb0c:	56                   	push   esi
c001bb0d:	53                   	push   ebx
c001bb0e:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bb13:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bb17:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bb1b:	74 02                	je     c001bb1f <IDE::enableIRQs(unsigned char, bool)+0x19>
c001bb1d:	31 c0                	xor    eax,eax
c001bb1f:	0f b6 db             	movzx  ebx,bl
c001bb22:	bf 04 00 00 00       	mov    edi,0x4
c001bb27:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001bb2e:	50                   	push   eax
c001bb2f:	6a 0c                	push   0xc
c001bb31:	53                   	push   ebx
c001bb32:	56                   	push   esi
c001bb33:	e8 c0 fd ff ff       	call   c001b8f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bb38:	83 c4 10             	add    esp,0x10
c001bb3b:	50                   	push   eax
c001bb3c:	6a 0c                	push   0xc
c001bb3e:	53                   	push   ebx
c001bb3f:	56                   	push   esi
c001bb40:	e8 73 fe ff ff       	call   c001b9b8 <IDE::read(unsigned char, unsigned char)>
c001bb45:	83 c4 10             	add    esp,0x10
c001bb48:	4f                   	dec    edi
c001bb49:	75 f0                	jne    c001bb3b <IDE::enableIRQs(unsigned char, bool)+0x35>
c001bb4b:	5b                   	pop    ebx
c001bb4c:	5e                   	pop    esi
c001bb4d:	5f                   	pop    edi
c001bb4e:	c3                   	ret    
c001bb4f:	90                   	nop

c001bb50 <IDE::open(int, int, void*)>:
c001bb50:	55                   	push   ebp
c001bb51:	57                   	push   edi
c001bb52:	56                   	push   esi
c001bb53:	53                   	push   ebx
c001bb54:	83 ec 1c             	sub    esp,0x1c
c001bb57:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bb5b:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001bb62:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001bb6b:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001bb74:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001bb7b:	0f 85 da 02 00 00    	jne    c001be5b <IDE::open(int, int, void*)+0x30b>
c001bb81:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001bb87:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001bb8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb8f:	83 e0 7f             	and    eax,0x7f
c001bb92:	83 f8 05             	cmp    eax,0x5
c001bb95:	74 05                	je     c001bb9c <IDE::open(int, int, void*)+0x4c>
c001bb97:	83 f8 0f             	cmp    eax,0xf
c001bb9a:	75 32                	jne    c001bbce <IDE::open(int, int, void*)+0x7e>
c001bb9c:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001bba2:	83 e0 fc             	and    eax,0xfffffffc
c001bba5:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bbac:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001bbb2:	83 e0 fc             	and    eax,0xfffffffc
c001bbb5:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bbbc:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001bbc2:	83 e0 fc             	and    eax,0xfffffffc
c001bbc5:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bbcc:	eb 14                	jmp    c001bbe2 <IDE::open(int, int, void*)+0x92>
c001bbce:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001bbd8:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001bbe2:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c001bbe9:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bbee:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001bbf5:	89 fa                	mov    edx,edi
c001bbf7:	89 f1                	mov    ecx,esi
c001bbf9:	c1 e1 10             	shl    ecx,0x10
c001bbfc:	89 e8                	mov    eax,ebp
c001bbfe:	c1 e0 0b             	shl    eax,0xb
c001bc01:	09 c1                	or     ecx,eax
c001bc03:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bc0a:	c1 e0 08             	shl    eax,0x8
c001bc0d:	09 c1                	or     ecx,eax
c001bc0f:	89 c8                	mov    eax,ecx
c001bc11:	0d 08 00 00 80       	or     eax,0x80000008
c001bc16:	ef                   	out    dx,eax
c001bc17:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bc1c:	ed                   	in     eax,dx
c001bc1d:	c1 e8 10             	shr    eax,0x10
c001bc20:	3d ff ff 00 00       	cmp    eax,0xffff
c001bc25:	0f 84 f9 00 00 00    	je     c001bd24 <IDE::open(int, int, void*)+0x1d4>
c001bc2b:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bc31:	89 fa                	mov    edx,edi
c001bc33:	89 c8                	mov    eax,ecx
c001bc35:	ef                   	out    dx,eax
c001bc36:	b0 fe                	mov    al,0xfe
c001bc38:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bc3d:	ee                   	out    dx,al
c001bc3e:	89 c8                	mov    eax,ecx
c001bc40:	89 fa                	mov    edx,edi
c001bc42:	ef                   	out    dx,eax
c001bc43:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bc48:	ed                   	in     eax,dx
c001bc49:	3c fe                	cmp    al,0xfe
c001bc4b:	0f 85 a4 00 00 00    	jne    c001bcf5 <IDE::open(int, int, void*)+0x1a5>
c001bc51:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c001bc57:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001bc5e:	74 30                	je     c001bc90 <IDE::open(int, int, void*)+0x140>
c001bc60:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001bc66:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001bc6a:	83 ec 0c             	sub    esp,0xc
c001bc6d:	40                   	inc    eax
c001bc6e:	0f b6 c0             	movzx  eax,al
c001bc71:	50                   	push   eax
c001bc72:	55                   	push   ebp
c001bc73:	56                   	push   esi
c001bc74:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001bc7a:	51                   	push   ecx
c001bc7b:	e8 88 3a ff ff       	call   c000f708 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001bc80:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001bc85:	83 c4 1c             	add    esp,0x1c
c001bc88:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bc8e:	eb 0a                	jmp    c001bc9a <IDE::open(int, int, void*)+0x14a>
c001bc90:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001bc9a:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001bca1:	bd f8 0c 00 00       	mov    ebp,0xcf8
c001bca6:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bcad:	89 ea                	mov    edx,ebp
c001bcaf:	c1 e1 10             	shl    ecx,0x10
c001bcb2:	c1 e0 08             	shl    eax,0x8
c001bcb5:	09 c1                	or     ecx,eax
c001bcb7:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001bcbe:	c1 e0 0b             	shl    eax,0xb
c001bcc1:	09 c1                	or     ecx,eax
c001bcc3:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bcc9:	89 c8                	mov    eax,ecx
c001bccb:	ef                   	out    dx,eax
c001bccc:	8b bb 50 01 00 00    	mov    edi,DWORD PTR [ebx+0x150]
c001bcd2:	be fc 0c 00 00       	mov    esi,0xcfc
c001bcd7:	89 f2                	mov    edx,esi
c001bcd9:	89 f8                	mov    eax,edi
c001bcdb:	ee                   	out    dx,al
c001bcdc:	89 c8                	mov    eax,ecx
c001bcde:	89 ea                	mov    edx,ebp
c001bce0:	ef                   	out    dx,eax
c001bce1:	89 f2                	mov    edx,esi
c001bce3:	ed                   	in     eax,dx
c001bce4:	0f b6 c0             	movzx  eax,al
c001bce7:	39 f8                	cmp    eax,edi
c001bce9:	74 49                	je     c001bd34 <IDE::open(int, int, void*)+0x1e4>
c001bceb:	83 ec 0c             	sub    esp,0xc
c001bcee:	68 08 2d 02 c0       	push   0xc0022d08
c001bcf3:	eb 37                	jmp    c001bd2c <IDE::open(int, int, void*)+0x1dc>
c001bcf5:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001bcfe:	75 1a                	jne    c001bd1a <IDE::open(int, int, void*)+0x1ca>
c001bd00:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001bd05:	3d 8a 00 00 00       	cmp    eax,0x8a
c001bd0a:	74 05                	je     c001bd11 <IDE::open(int, int, void*)+0x1c1>
c001bd0c:	83 c0 80             	add    eax,0xffffff80
c001bd0f:	75 09                	jne    c001bd1a <IDE::open(int, int, void*)+0x1ca>
c001bd11:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bd18:	eb 1a                	jmp    c001bd34 <IDE::open(int, int, void*)+0x1e4>
c001bd1a:	83 ec 0c             	sub    esp,0xc
c001bd1d:	68 10 2d 02 c0       	push   0xc0022d10
c001bd22:	eb 08                	jmp    c001bd2c <IDE::open(int, int, void*)+0x1dc>
c001bd24:	83 ec 0c             	sub    esp,0xc
c001bd27:	68 41 2d 02 c0       	push   0xc0022d41
c001bd2c:	e8 d8 55 ff ff       	call   c0011309 <KePanic(char const*)>
c001bd31:	83 c4 10             	add    esp,0x10
c001bd34:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001bd3b:	74 1a                	je     c001bd57 <IDE::open(int, int, void*)+0x207>
c001bd3d:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001bd43:	83 e0 fc             	and    eax,0xfffffffc
c001bd46:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001bd4d:	83 c0 08             	add    eax,0x8
c001bd50:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001bd57:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001bd5d:	89 c2                	mov    edx,eax
c001bd5f:	83 e2 0f             	and    edx,0xf
c001bd62:	83 fa 08             	cmp    edx,0x8
c001bd65:	75 0a                	jne    c001bd71 <IDE::open(int, int, void*)+0x221>
c001bd67:	83 e8 02             	sub    eax,0x2
c001bd6a:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bd71:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001bd77:	89 c2                	mov    edx,eax
c001bd79:	83 e2 0f             	and    edx,0xf
c001bd7c:	83 fa 08             	cmp    edx,0x8
c001bd7f:	75 0a                	jne    c001bd8b <IDE::open(int, int, void*)+0x23b>
c001bd81:	83 e8 02             	sub    eax,0x2
c001bd84:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bd8b:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001bd92:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001bd99:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bd9c:	89 d0                	mov    eax,edx
c001bd9e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bda2:	8d 7a 01             	lea    edi,[edx+0x1]
c001bda5:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001bda9:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001bdad:	83 e1 3f             	and    ecx,0x3f
c001bdb0:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001bdb4:	89 f9                	mov    ecx,edi
c001bdb6:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001bdbd:	8d 78 02             	lea    edi,[eax+0x2]
c001bdc0:	0f b6 c9             	movzx  ecx,cl
c001bdc3:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bdc6:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001bdca:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bdce:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001bdd2:	83 e2 3f             	and    edx,0x3f
c001bdd5:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001bdd9:	89 f9                	mov    ecx,edi
c001bddb:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001bde1:	8d 78 03             	lea    edi,[eax+0x3]
c001bde4:	0f b6 d1             	movzx  edx,cl
c001bde7:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bdea:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001bdee:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bdf2:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001bdf6:	83 e1 3f             	and    ecx,0x3f
c001bdf9:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001bdfd:	89 f9                	mov    ecx,edi
c001bdff:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001be05:	8d 78 04             	lea    edi,[eax+0x4]
c001be08:	0f b6 c9             	movzx  ecx,cl
c001be0b:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001be0e:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001be12:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001be16:	89 fa                	mov    edx,edi
c001be18:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001be1e:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001be22:	83 e2 3f             	and    edx,0x3f
c001be25:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001be29:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001be30:	66 85 f6             	test   si,si
c001be33:	74 65                	je     c001be9a <IDE::open(int, int, void*)+0x34a>
c001be35:	89 f9                	mov    ecx,edi
c001be37:	83 c0 05             	add    eax,0x5
c001be3a:	0f b6 d1             	movzx  edx,cl
c001be3d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001be40:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001be44:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001be48:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001be4e:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001be52:	83 e0 3f             	and    eax,0x3f
c001be55:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001be59:	eb 3f                	jmp    c001be9a <IDE::open(int, int, void*)+0x34a>
c001be5b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001be62:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001be68:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001be6f:	05 06 02 00 00       	add    eax,0x206
c001be74:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001be7b:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001be82:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001be89:	05 06 02 00 00       	add    eax,0x206
c001be8e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001be95:	e9 bd fe ff ff       	jmp    c001bd57 <IDE::open(int, int, void*)+0x207>
c001be9a:	50                   	push   eax
c001be9b:	50                   	push   eax
c001be9c:	6a 00                	push   0x0
c001be9e:	53                   	push   ebx
c001be9f:	e8 2e fa ff ff       	call   c001b8d2 <IDE::prepareInterrupt(unsigned char)>
c001bea4:	5a                   	pop    edx
c001bea5:	59                   	pop    ecx
c001bea6:	6a 01                	push   0x1
c001bea8:	53                   	push   ebx
c001bea9:	e8 24 fa ff ff       	call   c001b8d2 <IDE::prepareInterrupt(unsigned char)>
c001beae:	83 c4 0c             	add    esp,0xc
c001beb1:	6a 00                	push   0x0
c001beb3:	6a 00                	push   0x0
c001beb5:	53                   	push   ebx
c001beb6:	e8 4b fc ff ff       	call   c001bb06 <IDE::enableIRQs(unsigned char, bool)>
c001bebb:	83 c4 0c             	add    esp,0xc
c001bebe:	6a 00                	push   0x0
c001bec0:	6a 01                	push   0x1
c001bec2:	53                   	push   ebx
c001bec3:	e8 3e fc ff ff       	call   c001bb06 <IDE::enableIRQs(unsigned char, bool)>
c001bec8:	83 c4 10             	add    esp,0x10
c001becb:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001bed2:	74 34                	je     c001bf08 <IDE::open(int, int, void*)+0x3b8>
c001bed4:	83 ec 0c             	sub    esp,0xc
c001bed7:	53                   	push   ebx
c001bed8:	6a 01                	push   0x1
c001beda:	68 ce ba 01 c0       	push   0xc001bace
c001bedf:	6a 0e                	push   0xe
c001bee1:	53                   	push   ebx
c001bee2:	e8 31 08 ff ff       	call   c000c718 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bee7:	83 c4 14             	add    esp,0x14
c001beea:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bef0:	53                   	push   ebx
c001bef1:	6a 01                	push   0x1
c001bef3:	68 ea ba 01 c0       	push   0xc001baea
c001bef8:	6a 0f                	push   0xf
c001befa:	53                   	push   ebx
c001befb:	e8 18 08 ff ff       	call   c000c718 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bf00:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001bf06:	eb 38                	jmp    c001bf40 <IDE::open(int, int, void*)+0x3f0>
c001bf08:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001bf12:	83 ec 0c             	sub    esp,0xc
c001bf15:	53                   	push   ebx
c001bf16:	6a 00                	push   0x0
c001bf18:	68 ce ba 01 c0       	push   0xc001bace
c001bf1d:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001bf23:	53                   	push   ebx
c001bf24:	e8 ef 07 ff ff       	call   c000c718 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bf29:	83 c4 14             	add    esp,0x14
c001bf2c:	53                   	push   ebx
c001bf2d:	6a 00                	push   0x0
c001bf2f:	68 ea ba 01 c0       	push   0xc001baea
c001bf34:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001bf3a:	53                   	push   ebx
c001bf3b:	e8 d8 07 ff ff       	call   c000c718 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bf40:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bf42:	83 c4 20             	add    esp,0x20
c001bf45:	83 ec 0c             	sub    esp,0xc
c001bf48:	53                   	push   ebx
c001bf49:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001bf4c:	83 c4 0c             	add    esp,0xc
c001bf4f:	6a 07                	push   0x7
c001bf51:	6a 00                	push   0x0
c001bf53:	53                   	push   ebx
c001bf54:	e8 5f fa ff ff       	call   c001b9b8 <IDE::read(unsigned char, unsigned char)>
c001bf59:	83 c4 0c             	add    esp,0xc
c001bf5c:	6a 07                	push   0x7
c001bf5e:	6a 01                	push   0x1
c001bf60:	53                   	push   ebx
c001bf61:	e8 52 fa ff ff       	call   c001b9b8 <IDE::read(unsigned char, unsigned char)>
c001bf66:	83 c4 0c             	add    esp,0xc
c001bf69:	6a 01                	push   0x1
c001bf6b:	6a 00                	push   0x0
c001bf6d:	53                   	push   ebx
c001bf6e:	e8 93 fb ff ff       	call   c001bb06 <IDE::enableIRQs(unsigned char, bool)>
c001bf73:	83 c4 0c             	add    esp,0xc
c001bf76:	6a 01                	push   0x1
c001bf78:	6a 01                	push   0x1
c001bf7a:	53                   	push   ebx
c001bf7b:	e8 86 fb ff ff       	call   c001bb06 <IDE::enableIRQs(unsigned char, bool)>
c001bf80:	83 c4 2c             	add    esp,0x2c
c001bf83:	31 c0                	xor    eax,eax
c001bf85:	5b                   	pop    ebx
c001bf86:	5e                   	pop    esi
c001bf87:	5f                   	pop    edi
c001bf88:	5d                   	pop    ebp
c001bf89:	c3                   	ret    

c001bf8a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001bf8a:	55                   	push   ebp
c001bf8b:	57                   	push   edi
c001bf8c:	56                   	push   esi
c001bf8d:	53                   	push   ebx
c001bf8e:	83 ec 1c             	sub    esp,0x1c
c001bf91:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001bf95:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bf99:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bf9d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001bfa1:	8d 42 f8             	lea    eax,[edx-0x8]
c001bfa4:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001bfa8:	3c 03                	cmp    al,0x3
c001bfaa:	77 5a                	ja     c001c006 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001bfac:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001bfb0:	0f b6 db             	movzx  ebx,bl
c001bfb3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001bfb7:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001bfba:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bfbf:	0c 80                	or     al,0x80
c001bfc1:	50                   	push   eax
c001bfc2:	6a 0c                	push   0xc
c001bfc4:	53                   	push   ebx
c001bfc5:	56                   	push   esi
c001bfc6:	e8 2d f9 ff ff       	call   c001b8f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bfcb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bfcf:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001bfd4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bfd8:	0f b6 d2             	movzx  edx,dl
c001bfdb:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001bfdf:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001bfe1:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bfe6:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001bfea:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001bfee:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bff6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bffa:	83 c4 2c             	add    esp,0x2c
c001bffd:	5b                   	pop    ebx
c001bffe:	5e                   	pop    esi
c001bfff:	5f                   	pop    edi
c001c000:	5d                   	pop    ebp
c001c001:	e9 f2 f8 ff ff       	jmp    c001b8f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c006:	0f b6 c2             	movzx  eax,dl
c001c009:	83 f8 07             	cmp    eax,0x7
c001c00c:	77 12                	ja     c001c020 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001c00e:	0f b6 db             	movzx  ebx,bl
c001c011:	0f b6 c2             	movzx  eax,dl
c001c014:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001c01c:	01 c2                	add    edx,eax
c001c01e:	eb 2f                	jmp    c001c04f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c020:	83 f8 0d             	cmp    eax,0xd
c001c023:	77 13                	ja     c001c038 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001c025:	0f b6 db             	movzx  ebx,bl
c001c028:	0f b6 d2             	movzx  edx,dl
c001c02b:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001c032:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c036:	eb 17                	jmp    c001c04f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c038:	83 f8 15             	cmp    eax,0x15
c001c03b:	77 14                	ja     c001c051 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001c03d:	0f b6 db             	movzx  ebx,bl
c001c040:	0f b6 d2             	movzx  edx,dl
c001c043:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001c04b:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c04f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c051:	83 c4 1c             	add    esp,0x1c
c001c054:	5b                   	pop    ebx
c001c055:	5e                   	pop    esi
c001c056:	5f                   	pop    edi
c001c057:	5d                   	pop    ebp
c001c058:	c3                   	ret    
c001c059:	90                   	nop

c001c05a <IDE::detect()>:
c001c05a:	55                   	push   ebp
c001c05b:	57                   	push   edi
c001c05c:	56                   	push   esi
c001c05d:	53                   	push   ebx
c001c05e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c064:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c06b:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c072:	0f 85 9e 02 00 00    	jne    c001c316 <IDE::detect()+0x2bc>
c001c078:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c07f:	31 f6                	xor    esi,esi
c001c081:	31 ff                	xor    edi,edi
c001c083:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c08b:	89 f8                	mov    eax,edi
c001c08d:	c1 e0 06             	shl    eax,0x6
c001c090:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c098:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c09c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c0a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c0a4:	c1 e0 04             	shl    eax,0x4
c001c0a7:	83 c8 a0             	or     eax,0xffffffa0
c001c0aa:	0f b6 c0             	movzx  eax,al
c001c0ad:	50                   	push   eax
c001c0ae:	6a 06                	push   0x6
c001c0b0:	56                   	push   esi
c001c0b1:	53                   	push   ebx
c001c0b2:	e8 41 f8 ff ff       	call   c001b8f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c0b7:	83 c4 0c             	add    esp,0xc
c001c0ba:	6a 0c                	push   0xc
c001c0bc:	56                   	push   esi
c001c0bd:	53                   	push   ebx
c001c0be:	e8 f5 f8 ff ff       	call   c001b9b8 <IDE::read(unsigned char, unsigned char)>
c001c0c3:	83 c4 0c             	add    esp,0xc
c001c0c6:	6a 0c                	push   0xc
c001c0c8:	56                   	push   esi
c001c0c9:	53                   	push   ebx
c001c0ca:	e8 e9 f8 ff ff       	call   c001b9b8 <IDE::read(unsigned char, unsigned char)>
c001c0cf:	83 c4 0c             	add    esp,0xc
c001c0d2:	6a 0c                	push   0xc
c001c0d4:	56                   	push   esi
c001c0d5:	53                   	push   ebx
c001c0d6:	e8 dd f8 ff ff       	call   c001b9b8 <IDE::read(unsigned char, unsigned char)>
c001c0db:	83 c4 0c             	add    esp,0xc
c001c0de:	6a 0c                	push   0xc
c001c0e0:	56                   	push   esi
c001c0e1:	53                   	push   ebx
c001c0e2:	e8 d1 f8 ff ff       	call   c001b9b8 <IDE::read(unsigned char, unsigned char)>
c001c0e7:	68 ec 00 00 00       	push   0xec
c001c0ec:	6a 07                	push   0x7
c001c0ee:	56                   	push   esi
c001c0ef:	53                   	push   ebx
c001c0f0:	e8 03 f8 ff ff       	call   c001b8f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c0f5:	83 c4 1c             	add    esp,0x1c
c001c0f8:	6a 0c                	push   0xc
c001c0fa:	56                   	push   esi
c001c0fb:	53                   	push   ebx
c001c0fc:	e8 b7 f8 ff ff       	call   c001b9b8 <IDE::read(unsigned char, unsigned char)>
c001c101:	83 c4 0c             	add    esp,0xc
c001c104:	6a 0c                	push   0xc
c001c106:	56                   	push   esi
c001c107:	53                   	push   ebx
c001c108:	e8 ab f8 ff ff       	call   c001b9b8 <IDE::read(unsigned char, unsigned char)>
c001c10d:	83 c4 0c             	add    esp,0xc
c001c110:	6a 0c                	push   0xc
c001c112:	56                   	push   esi
c001c113:	53                   	push   ebx
c001c114:	e8 9f f8 ff ff       	call   c001b9b8 <IDE::read(unsigned char, unsigned char)>
c001c119:	83 c4 0c             	add    esp,0xc
c001c11c:	6a 0c                	push   0xc
c001c11e:	56                   	push   esi
c001c11f:	53                   	push   ebx
c001c120:	e8 93 f8 ff ff       	call   c001b9b8 <IDE::read(unsigned char, unsigned char)>
c001c125:	83 c4 0c             	add    esp,0xc
c001c128:	6a 0c                	push   0xc
c001c12a:	56                   	push   esi
c001c12b:	53                   	push   ebx
c001c12c:	e8 87 f8 ff ff       	call   c001b9b8 <IDE::read(unsigned char, unsigned char)>
c001c131:	83 c4 10             	add    esp,0x10
c001c134:	84 c0                	test   al,al
c001c136:	0f 84 61 01 00 00    	je     c001c29d <IDE::detect()+0x243>
c001c13c:	31 ed                	xor    ebp,ebp
c001c13e:	50                   	push   eax
c001c13f:	6a 0c                	push   0xc
c001c141:	56                   	push   esi
c001c142:	53                   	push   ebx
c001c143:	e8 70 f8 ff ff       	call   c001b9b8 <IDE::read(unsigned char, unsigned char)>
c001c148:	83 c4 10             	add    esp,0x10
c001c14b:	a8 01                	test   al,0x1
c001c14d:	0f 85 6b 01 00 00    	jne    c001c2be <IDE::detect()+0x264>
c001c153:	a8 80                	test   al,0x80
c001c155:	75 04                	jne    c001c15b <IDE::detect()+0x101>
c001c157:	a8 08                	test   al,0x8
c001c159:	75 23                	jne    c001c17e <IDE::detect()+0x124>
c001c15b:	45                   	inc    ebp
c001c15c:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001c162:	7e da                	jle    c001c13e <IDE::detect()+0xe4>
c001c164:	83 ec 0c             	sub    esp,0xc
c001c167:	6a 32                	push   0x32
c001c169:	e8 b6 9d ff ff       	call   c0015f24 <milliTenthSleep(unsigned int)>
c001c16e:	83 c4 10             	add    esp,0x10
c001c171:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001c177:	75 c5                	jne    c001c13e <IDE::detect()+0xe4>
c001c179:	e9 40 01 00 00       	jmp    c001c2be <IDE::detect()+0x264>
c001c17e:	31 c9                	xor    ecx,ecx
c001c180:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c184:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c001c188:	83 ec 0c             	sub    esp,0xc
c001c18b:	68 80 00 00 00       	push   0x80
c001c190:	55                   	push   ebp
c001c191:	6a 00                	push   0x0
c001c193:	56                   	push   esi
c001c194:	53                   	push   ebx
c001c195:	e8 f0 fd ff ff       	call   c001bf8a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c19a:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c19f:	89 f8                	mov    eax,edi
c001c1a1:	c1 e0 06             	shl    eax,0x6
c001c1a4:	01 d8                	add    eax,ebx
c001c1a6:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c1ad:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c1b4:	89 d1                	mov    ecx,edx
c001c1b6:	89 f2                	mov    edx,esi
c001c1b8:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c1be:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c1c2:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c1c8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c1cc:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c1d3:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c1db:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c1e2:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c1ea:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c1f0:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c1f7:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c1fd:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c201:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c205:	83 c4 20             	add    esp,0x20
c001c208:	8a 55 37             	mov    dl,BYTE PTR [ebp+0x37]
c001c20b:	83 c5 02             	add    ebp,0x2
c001c20e:	83 c0 02             	add    eax,0x2
c001c211:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c217:	8a 55 34             	mov    dl,BYTE PTR [ebp+0x34]
c001c21a:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c220:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c001c224:	75 e2                	jne    c001c208 <IDE::detect()+0x1ae>
c001c226:	89 f8                	mov    eax,edi
c001c228:	c1 e0 06             	shl    eax,0x6
c001c22b:	01 d8                	add    eax,ebx
c001c22d:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c234:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c23b:	c1 ea 09             	shr    edx,0x9
c001c23e:	83 e2 01             	and    edx,0x1
c001c241:	80 e1 01             	and    cl,0x1
c001c244:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c24a:	75 22                	jne    c001c26e <IDE::detect()+0x214>
c001c24c:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c253:	74 47                	je     c001c29c <IDE::detect()+0x242>
c001c255:	83 ec 0c             	sub    esp,0xc
c001c258:	68 7c 01 00 00       	push   0x17c
c001c25d:	e8 71 b8 fe ff       	call   c0007ad3 <malloc>
c001c262:	89 04 24             	mov    DWORD PTR [esp],eax
c001c265:	89 c5                	mov    ebp,eax
c001c267:	e8 16 05 00 00       	call   c001c782 <ATA::ATA()>
c001c26c:	eb 17                	jmp    c001c285 <IDE::detect()+0x22b>
c001c26e:	83 ec 0c             	sub    esp,0xc
c001c271:	68 84 01 00 00       	push   0x184
c001c276:	e8 58 b8 fe ff       	call   c0007ad3 <malloc>
c001c27b:	89 04 24             	mov    DWORD PTR [esp],eax
c001c27e:	89 c5                	mov    ebp,eax
c001c280:	e8 6f 0e 00 00       	call   c001d0f4 <ATAPI::ATAPI()>
c001c285:	5a                   	pop    edx
c001c286:	59                   	pop    ecx
c001c287:	55                   	push   ebp
c001c288:	53                   	push   ebx
c001c289:	e8 de 04 ff ff       	call   c000c76c <Device::addChild(Device*)>
c001c28e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c291:	53                   	push   ebx
c001c292:	57                   	push   edi
c001c293:	6a 00                	push   0x0
c001c295:	55                   	push   ebp
c001c296:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c299:	83 c4 20             	add    esp,0x20
c001c29c:	47                   	inc    edi
c001c29d:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c2a2:	74 0d                	je     c001c2b1 <IDE::detect()+0x257>
c001c2a4:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c2ac:	e9 da fd ff ff       	jmp    c001c08b <IDE::detect()+0x31>
c001c2b1:	4e                   	dec    esi
c001c2b2:	74 62                	je     c001c316 <IDE::detect()+0x2bc>
c001c2b4:	be 01 00 00 00       	mov    esi,0x1
c001c2b9:	e9 c5 fd ff ff       	jmp    c001c083 <IDE::detect()+0x29>
c001c2be:	50                   	push   eax
c001c2bf:	6a 04                	push   0x4
c001c2c1:	56                   	push   esi
c001c2c2:	53                   	push   ebx
c001c2c3:	e8 f0 f6 ff ff       	call   c001b9b8 <IDE::read(unsigned char, unsigned char)>
c001c2c8:	83 c4 0c             	add    esp,0xc
c001c2cb:	6a 05                	push   0x5
c001c2cd:	56                   	push   esi
c001c2ce:	53                   	push   ebx
c001c2cf:	89 c5                	mov    ebp,eax
c001c2d1:	e8 e2 f6 ff ff       	call   c001b9b8 <IDE::read(unsigned char, unsigned char)>
c001c2d6:	89 e9                	mov    ecx,ebp
c001c2d8:	83 c4 10             	add    esp,0x10
c001c2db:	0f b6 e9             	movzx  ebp,cl
c001c2de:	83 fd 14             	cmp    ebp,0x14
c001c2e1:	74 2d                	je     c001c310 <IDE::detect()+0x2b6>
c001c2e3:	83 fd 69             	cmp    ebp,0x69
c001c2e6:	75 b5                	jne    c001c29d <IDE::detect()+0x243>
c001c2e8:	3c 96                	cmp    al,0x96
c001c2ea:	75 b1                	jne    c001c29d <IDE::detect()+0x243>
c001c2ec:	68 a1 00 00 00       	push   0xa1
c001c2f1:	6a 07                	push   0x7
c001c2f3:	56                   	push   esi
c001c2f4:	53                   	push   ebx
c001c2f5:	e8 fe f5 ff ff       	call   c001b8f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c2fa:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c301:	e8 1e 9c ff ff       	call   c0015f24 <milliTenthSleep(unsigned int)>
c001c306:	83 c4 10             	add    esp,0x10
c001c309:	b1 01                	mov    cl,0x1
c001c30b:	e9 70 fe ff ff       	jmp    c001c180 <IDE::detect()+0x126>
c001c310:	3c eb                	cmp    al,0xeb
c001c312:	75 cf                	jne    c001c2e3 <IDE::detect()+0x289>
c001c314:	eb d6                	jmp    c001c2ec <IDE::detect()+0x292>
c001c316:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c31c:	5b                   	pop    ebx
c001c31d:	5e                   	pop    esi
c001c31e:	5f                   	pop    edi
c001c31f:	5d                   	pop    ebp
c001c320:	c3                   	ret    
c001c321:	90                   	nop

c001c322 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c322:	55                   	push   ebp
c001c323:	57                   	push   edi
c001c324:	56                   	push   esi
c001c325:	53                   	push   ebx
c001c326:	83 ec 1c             	sub    esp,0x1c
c001c329:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c32d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c331:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c335:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c339:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c33d:	88 c3                	mov    bl,al
c001c33f:	25 ff 00 00 00       	and    eax,0xff
c001c344:	0f 84 88 00 00 00    	je     c001c3d2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c34a:	83 ec 0c             	sub    esp,0xc
c001c34d:	89 c7                	mov    edi,eax
c001c34f:	68 6b 2d 02 c0       	push   0xc0022d6b
c001c354:	e8 b1 e5 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001c359:	83 c4 10             	add    esp,0x10
c001c35c:	83 ff 01             	cmp    edi,0x1
c001c35f:	74 6b                	je     c001c3cc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c361:	83 ff 02             	cmp    edi,0x2
c001c364:	75 58                	jne    c001c3be <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c366:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c36b:	50                   	push   eax
c001c36c:	6a 01                	push   0x1
c001c36e:	01 ff                	add    edi,edi
c001c370:	09 fe                	or     esi,edi
c001c372:	89 f0                	mov    eax,esi
c001c374:	0f b6 f0             	movzx  esi,al
c001c377:	c1 e6 06             	shl    esi,0x6
c001c37a:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c382:	50                   	push   eax
c001c383:	55                   	push   ebp
c001c384:	e8 2f f6 ff ff       	call   c001b9b8 <IDE::read(unsigned char, unsigned char)>
c001c389:	83 c4 10             	add    esp,0x10
c001c38c:	a8 01                	test   al,0x1
c001c38e:	74 02                	je     c001c392 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c390:	b3 07                	mov    bl,0x7
c001c392:	a8 02                	test   al,0x2
c001c394:	74 02                	je     c001c398 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c396:	b3 03                	mov    bl,0x3
c001c398:	a8 04                	test   al,0x4
c001c39a:	74 02                	je     c001c39e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c39c:	b3 14                	mov    bl,0x14
c001c39e:	a8 08                	test   al,0x8
c001c3a0:	74 02                	je     c001c3a4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c3a2:	b3 03                	mov    bl,0x3
c001c3a4:	a8 10                	test   al,0x10
c001c3a6:	74 02                	je     c001c3aa <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c3a8:	b3 15                	mov    bl,0x15
c001c3aa:	a8 20                	test   al,0x20
c001c3ac:	74 02                	je     c001c3b0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c3ae:	b3 03                	mov    bl,0x3
c001c3b0:	a8 40                	test   al,0x40
c001c3b2:	74 02                	je     c001c3b6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c3b4:	b3 16                	mov    bl,0x16
c001c3b6:	a8 80                	test   al,0x80
c001c3b8:	74 18                	je     c001c3d2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c3ba:	b3 0d                	mov    bl,0xd
c001c3bc:	eb 14                	jmp    c001c3d2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c3be:	83 ff 03             	cmp    edi,0x3
c001c3c1:	74 0d                	je     c001c3d0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c3c3:	83 ff 04             	cmp    edi,0x4
c001c3c6:	75 0a                	jne    c001c3d2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c3c8:	b3 08                	mov    bl,0x8
c001c3ca:	eb 06                	jmp    c001c3d2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c3cc:	b3 13                	mov    bl,0x13
c001c3ce:	eb 02                	jmp    c001c3d2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c3d0:	b3 17                	mov    bl,0x17
c001c3d2:	83 c4 1c             	add    esp,0x1c
c001c3d5:	88 d8                	mov    al,bl
c001c3d7:	5b                   	pop    ebx
c001c3d8:	5e                   	pop    esi
c001c3d9:	5f                   	pop    edi
c001c3da:	5d                   	pop    ebp
c001c3db:	c3                   	ret    

c001c3dc <IDE::polling(unsigned char, unsigned int)>:
c001c3dc:	57                   	push   edi
c001c3dd:	56                   	push   esi
c001c3de:	53                   	push   ebx
c001c3df:	bb 04 00 00 00       	mov    ebx,0x4
c001c3e4:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c3e8:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c3ed:	52                   	push   edx
c001c3ee:	6a 0c                	push   0xc
c001c3f0:	56                   	push   esi
c001c3f1:	57                   	push   edi
c001c3f2:	e8 c1 f5 ff ff       	call   c001b9b8 <IDE::read(unsigned char, unsigned char)>
c001c3f7:	83 c4 10             	add    esp,0x10
c001c3fa:	4b                   	dec    ebx
c001c3fb:	75 f0                	jne    c001c3ed <IDE::polling(unsigned char, unsigned int)+0x11>
c001c3fd:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c402:	50                   	push   eax
c001c403:	6a 0c                	push   0xc
c001c405:	56                   	push   esi
c001c406:	57                   	push   edi
c001c407:	e8 ac f5 ff ff       	call   c001b9b8 <IDE::read(unsigned char, unsigned char)>
c001c40c:	83 c4 10             	add    esp,0x10
c001c40f:	a8 01                	test   al,0x1
c001c411:	75 17                	jne    c001c42a <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c413:	a8 20                	test   al,0x20
c001c415:	75 0f                	jne    c001c426 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c417:	4b                   	dec    ebx
c001c418:	74 10                	je     c001c42a <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c41a:	a8 80                	test   al,0x80
c001c41c:	75 e4                	jne    c001c402 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c41e:	a8 08                	test   al,0x8
c001c420:	74 e0                	je     c001c402 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c422:	31 c0                	xor    eax,eax
c001c424:	eb 06                	jmp    c001c42c <IDE::polling(unsigned char, unsigned int)+0x50>
c001c426:	b0 01                	mov    al,0x1
c001c428:	eb 02                	jmp    c001c42c <IDE::polling(unsigned char, unsigned int)+0x50>
c001c42a:	b0 02                	mov    al,0x2
c001c42c:	5b                   	pop    ebx
c001c42d:	5e                   	pop    esi
c001c42e:	5f                   	pop    edi
c001c42f:	c3                   	ret    

c001c430 <SATABus::close(int, int, void*)>:
c001c430:	31 c0                	xor    eax,eax
c001c432:	c3                   	ret    
c001c433:	90                   	nop

c001c434 <SATABus::detect()>:
c001c434:	c3                   	ret    
c001c435:	90                   	nop

c001c436 <SATABus::SATABus()>:
c001c436:	83 ec 0c             	sub    esp,0xc
c001c439:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c43d:	83 ec 08             	sub    esp,0x8
c001c440:	68 a4 2d 02 c0       	push   0xc0022da4
c001c445:	50                   	push   eax
c001c446:	e8 65 06 ff ff       	call   c000cab0 <HardDiskController::HardDiskController(char const*)>
c001c44b:	83 c4 10             	add    esp,0x10
c001c44e:	ba d0 2d 02 c0       	mov    edx,0xc0022dd0
c001c453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c457:	89 10                	mov    DWORD PTR [eax],edx
c001c459:	83 ec 0c             	sub    esp,0xc
c001c45c:	6a 50                	push   0x50
c001c45e:	e8 4e ba fe ff       	call   c0007eb1 <Phys::allocateContiguousPages(int)>
c001c463:	83 c4 10             	add    esp,0x10
c001c466:	89 c2                	mov    edx,eax
c001c468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c46c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c472:	83 ec 0c             	sub    esp,0xc
c001c475:	6a 50                	push   0x50
c001c477:	e8 79 d1 fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001c47c:	83 c4 10             	add    esp,0x10
c001c47f:	89 c2                	mov    edx,eax
c001c481:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c485:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c48b:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c001c490:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c494:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c49a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c49e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c4a4:	83 ec 0c             	sub    esp,0xc
c001c4a7:	6a 03                	push   0x3
c001c4a9:	6a 50                	push   0x50
c001c4ab:	51                   	push   ecx
c001c4ac:	52                   	push   edx
c001c4ad:	50                   	push   eax
c001c4ae:	e8 55 da fe ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c4b3:	83 c4 20             	add    esp,0x20
c001c4b6:	90                   	nop
c001c4b7:	83 c4 0c             	add    esp,0xc
c001c4ba:	c3                   	ret    
c001c4bb:	90                   	nop

c001c4bc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c4bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c4c0:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c4c3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c4c6:	09 c2                	or     edx,eax
c001c4c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4cc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c4d2:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c4d4:	31 c0                	xor    eax,eax
c001c4d6:	c1 e9 08             	shr    ecx,0x8
c001c4d9:	83 e1 0f             	and    ecx,0xf
c001c4dc:	39 c8                	cmp    eax,ecx
c001c4de:	74 0a                	je     c001c4ea <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001c4e0:	f6 c2 01             	test   dl,0x1
c001c4e3:	74 08                	je     c001c4ed <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001c4e5:	d1 ea                	shr    edx,1
c001c4e7:	40                   	inc    eax
c001c4e8:	eb f2                	jmp    c001c4dc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001c4ea:	83 c8 ff             	or     eax,0xffffffff
c001c4ed:	c3                   	ret    

c001c4ee <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001c4ee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c4f2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001c4f5:	89 c2                	mov    edx,eax
c001c4f7:	c1 ea 08             	shr    edx,0x8
c001c4fa:	83 e2 0f             	and    edx,0xf
c001c4fd:	4a                   	dec    edx
c001c4fe:	75 32                	jne    c001c532 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c500:	83 e0 0f             	and    eax,0xf
c001c503:	83 f8 03             	cmp    eax,0x3
c001c506:	75 2a                	jne    c001c532 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c508:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001c50b:	b8 02 00 00 00       	mov    eax,0x2
c001c510:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001c516:	74 1c                	je     c001c534 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c518:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001c51e:	b8 04 00 00 00       	mov    eax,0x4
c001c523:	74 0f                	je     c001c534 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c525:	31 c0                	xor    eax,eax
c001c527:	83 fa 03             	cmp    edx,0x3
c001c52a:	0f 94 c0             	sete   al
c001c52d:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001c531:	c3                   	ret    
c001c532:	31 c0                	xor    eax,eax
c001c534:	c3                   	ret    
c001c535:	90                   	nop

c001c536 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001c536:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c53a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c53d:	0f ba e2 0f          	bt     edx,0xf
c001c541:	72 f7                	jb     c001c53a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001c543:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c546:	83 ca 10             	or     edx,0x10
c001c549:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c54c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c54f:	83 ca 01             	or     edx,0x1
c001c552:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c555:	c3                   	ret    

c001c556 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001c556:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c55a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c55d:	83 e2 fe             	and    edx,0xfffffffe
c001c560:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c563:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c566:	83 e2 ef             	and    edx,0xffffffef
c001c569:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c56c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c56f:	0f ba e2 0e          	bt     edx,0xe
c001c573:	72 f7                	jb     c001c56c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c575:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c578:	0f ba e2 0f          	bt     edx,0xf
c001c57c:	72 ee                	jb     c001c56c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c57e:	c3                   	ret    
c001c57f:	90                   	nop

c001c580 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001c580:	55                   	push   ebp
c001c581:	57                   	push   edi
c001c582:	56                   	push   esi
c001c583:	53                   	push   ebx
c001c584:	83 ec 1c             	sub    esp,0x1c
c001c587:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c58b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c58f:	53                   	push   ebx
c001c590:	57                   	push   edi
c001c591:	e8 c0 ff ff ff       	call   c001c556 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001c596:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c59a:	83 ec 0c             	sub    esp,0xc
c001c59d:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c5a3:	c1 e5 0a             	shl    ebp,0xa
c001c5a6:	01 e8                	add    eax,ebp
c001c5a8:	89 03                	mov    DWORD PTR [ebx],eax
c001c5aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c5ac:	68 00 04 00 00       	push   0x400
c001c5b1:	6a 00                	push   0x0
c001c5b3:	50                   	push   eax
c001c5b4:	e8 37 3f fe ff       	call   c00004f0 <memset>
c001c5b9:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001c5bf:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001c5c3:	83 c4 1c             	add    esp,0x1c
c001c5c6:	01 e8                	add    eax,ebp
c001c5c8:	89 03                	mov    DWORD PTR [ebx],eax
c001c5ca:	c1 e6 08             	shl    esi,0x8
c001c5cd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c5d4:	81 c6 00 80 00 00    	add    esi,0x8000
c001c5da:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c5e0:	01 f0                	add    eax,esi
c001c5e2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c5e5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c5e8:	68 00 01 00 00       	push   0x100
c001c5ed:	6a 00                	push   0x0
c001c5ef:	50                   	push   eax
c001c5f0:	e8 fb 3e fe ff       	call   c00004f0 <memset>
c001c5f5:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001c5fb:	31 d2                	xor    edx,edx
c001c5fd:	01 f0                	add    eax,esi
c001c5ff:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c602:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c609:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001c60f:	01 ee                	add    esi,ebp
c001c611:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001c615:	83 c4 10             	add    esp,0x10
c001c618:	c1 e5 0d             	shl    ebp,0xd
c001c61b:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001c621:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001c627:	83 c6 20             	add    esi,0x20
c001c62a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c62e:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c634:	01 e8                	add    eax,ebp
c001c636:	01 d0                	add    eax,edx
c001c638:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001c63b:	52                   	push   edx
c001c63c:	68 00 01 00 00       	push   0x100
c001c641:	6a 00                	push   0x0
c001c643:	50                   	push   eax
c001c644:	e8 a7 3e fe ff       	call   c00004f0 <memset>
c001c649:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001c64f:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001c656:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c65a:	83 c4 10             	add    esp,0x10
c001c65d:	01 e8                	add    eax,ebp
c001c65f:	01 d0                	add    eax,edx
c001c661:	81 c2 00 01 00 00    	add    edx,0x100
c001c667:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001c66a:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001c670:	75 af                	jne    c001c621 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001c672:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c679:	50                   	push   eax
c001c67a:	50                   	push   eax
c001c67b:	53                   	push   ebx
c001c67c:	57                   	push   edi
c001c67d:	e8 b4 fe ff ff       	call   c001c536 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001c682:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c689:	83 c4 2c             	add    esp,0x2c
c001c68c:	5b                   	pop    ebx
c001c68d:	5e                   	pop    esi
c001c68e:	5f                   	pop    edi
c001c68f:	5d                   	pop    ebp
c001c690:	c3                   	ret    
c001c691:	90                   	nop

c001c692 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001c692:	55                   	push   ebp
c001c693:	57                   	push   edi
c001c694:	56                   	push   esi
c001c695:	53                   	push   ebx
c001c696:	31 db                	xor    ebx,ebx
c001c698:	83 ec 0c             	sub    esp,0xc
c001c69b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c69f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001c6a3:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001c6a6:	f7 c7 01 00 00 00    	test   edi,0x1
c001c6ac:	74 7a                	je     c001c728 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c6ae:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c6b2:	89 d8                	mov    eax,ebx
c001c6b4:	c1 e0 07             	shl    eax,0x7
c001c6b7:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001c6be:	55                   	push   ebp
c001c6bf:	56                   	push   esi
c001c6c0:	e8 29 fe ff ff       	call   c001c4ee <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001c6c5:	5a                   	pop    edx
c001c6c6:	59                   	pop    ecx
c001c6c7:	83 f8 01             	cmp    eax,0x1
c001c6ca:	75 21                	jne    c001c6ed <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001c6cc:	50                   	push   eax
c001c6cd:	53                   	push   ebx
c001c6ce:	55                   	push   ebp
c001c6cf:	56                   	push   esi
c001c6d0:	e8 ab fe ff ff       	call   c001c580 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c6d5:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001c6dc:	e8 f2 b3 fe ff       	call   c0007ad3 <malloc>
c001c6e1:	89 04 24             	mov    DWORD PTR [esp],eax
c001c6e4:	89 c5                	mov    ebp,eax
c001c6e6:	e8 c1 10 00 00       	call   c001d7ac <SATA::SATA()>
c001c6eb:	eb 24                	jmp    c001c711 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001c6ed:	83 f8 04             	cmp    eax,0x4
c001c6f0:	75 36                	jne    c001c728 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c6f2:	51                   	push   ecx
c001c6f3:	53                   	push   ebx
c001c6f4:	55                   	push   ebp
c001c6f5:	56                   	push   esi
c001c6f6:	e8 85 fe ff ff       	call   c001c580 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c6fb:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001c702:	e8 cc b3 fe ff       	call   c0007ad3 <malloc>
c001c707:	89 04 24             	mov    DWORD PTR [esp],eax
c001c70a:	89 c5                	mov    ebp,eax
c001c70c:	e8 f5 17 00 00       	call   c001df06 <SATAPI::SATAPI()>
c001c711:	58                   	pop    eax
c001c712:	5a                   	pop    edx
c001c713:	55                   	push   ebp
c001c714:	56                   	push   esi
c001c715:	e8 52 00 ff ff       	call   c000c76c <Device::addChild(Device*)>
c001c71a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001c71d:	56                   	push   esi
c001c71e:	6a 00                	push   0x0
c001c720:	53                   	push   ebx
c001c721:	55                   	push   ebp
c001c722:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c725:	83 c4 20             	add    esp,0x20
c001c728:	d1 ef                	shr    edi,1
c001c72a:	43                   	inc    ebx
c001c72b:	83 fb 20             	cmp    ebx,0x20
c001c72e:	0f 85 72 ff ff ff    	jne    c001c6a6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001c734:	83 c4 0c             	add    esp,0xc
c001c737:	5b                   	pop    ebx
c001c738:	5e                   	pop    esi
c001c739:	5f                   	pop    edi
c001c73a:	5d                   	pop    ebp
c001c73b:	c3                   	ret    

c001c73c <SATABus::open(int, int, void*)>:
c001c73c:	83 ec 14             	sub    esp,0x14
c001c73f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c743:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001c749:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001c74f:	52                   	push   edx
c001c750:	50                   	push   eax
c001c751:	e8 3c ff ff ff       	call   c001c692 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001c756:	31 c0                	xor    eax,eax
c001c758:	83 c4 1c             	add    esp,0x1c
c001c75b:	c3                   	ret    

c001c75c <ATA::close(int, int, void*)>:
c001c75c:	83 ec 0c             	sub    esp,0xc
c001c75f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c763:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c769:	85 c0                	test   eax,eax
c001c76b:	74 0c                	je     c001c779 <ATA::close(int, int, void*)+0x1d>
c001c76d:	8b 10                	mov    edx,DWORD PTR [eax]
c001c76f:	83 ec 0c             	sub    esp,0xc
c001c772:	50                   	push   eax
c001c773:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c776:	83 c4 10             	add    esp,0x10
c001c779:	31 c0                	xor    eax,eax
c001c77b:	83 c4 0c             	add    esp,0xc
c001c77e:	c3                   	ret    
c001c77f:	90                   	nop

c001c780 <ATA::powerSaving(PowerSavingLevel)>:
c001c780:	c3                   	ret    
c001c781:	90                   	nop

c001c782 <ATA::ATA()>:
c001c782:	83 ec 0c             	sub    esp,0xc
c001c785:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c789:	83 ec 04             	sub    esp,0x4
c001c78c:	68 00 02 00 00       	push   0x200
c001c791:	68 9d 2e 02 c0       	push   0xc0022e9d
c001c796:	50                   	push   eax
c001c797:	e8 9e 03 ff ff       	call   c000cb3a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c79c:	83 c4 10             	add    esp,0x10
c001c79f:	ba 10 2e 02 c0       	mov    edx,0xc0022e10
c001c7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7a8:	89 10                	mov    DWORD PTR [eax],edx
c001c7aa:	90                   	nop
c001c7ab:	83 c4 0c             	add    esp,0xc
c001c7ae:	c3                   	ret    
c001c7af:	90                   	nop

c001c7b0 <ATA::flush(bool)>:
c001c7b0:	53                   	push   ebx
c001c7b1:	83 ec 08             	sub    esp,0x8
c001c7b4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c7b9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c7bd:	83 f8 01             	cmp    eax,0x1
c001c7c0:	19 c0                	sbb    eax,eax
c001c7c2:	83 e0 fd             	and    eax,0xfffffffd
c001c7c5:	05 ea 00 00 00       	add    eax,0xea
c001c7ca:	50                   	push   eax
c001c7cb:	6a 07                	push   0x7
c001c7cd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c7d4:	50                   	push   eax
c001c7d5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c7db:	e8 18 f1 ff ff       	call   c001b8f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c7e0:	83 c4 0c             	add    esp,0xc
c001c7e3:	6a 00                	push   0x0
c001c7e5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c7ec:	50                   	push   eax
c001c7ed:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c7f3:	e8 e4 fb ff ff       	call   c001c3dc <IDE::polling(unsigned char, unsigned int)>
c001c7f8:	83 c4 18             	add    esp,0x18
c001c7fb:	5b                   	pop    ebx
c001c7fc:	c3                   	ret    
c001c7fd:	90                   	nop

c001c7fe <ATA::readyForCommand()>:
c001c7fe:	56                   	push   esi
c001c7ff:	53                   	push   ebx
c001c800:	53                   	push   ebx
c001c801:	31 db                	xor    ebx,ebx
c001c803:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c807:	51                   	push   ecx
c001c808:	6a 0c                	push   0xc
c001c80a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c811:	50                   	push   eax
c001c812:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c818:	e8 9b f1 ff ff       	call   c001b9b8 <IDE::read(unsigned char, unsigned char)>
c001c81d:	83 c4 10             	add    esp,0x10
c001c820:	a8 88                	test   al,0x88
c001c822:	74 1f                	je     c001c843 <ATA::readyForCommand()+0x45>
c001c824:	43                   	inc    ebx
c001c825:	83 fb 63             	cmp    ebx,0x63
c001c828:	7e dd                	jle    c001c807 <ATA::readyForCommand()+0x9>
c001c82a:	83 ec 0c             	sub    esp,0xc
c001c82d:	6a 0a                	push   0xa
c001c82f:	e8 f0 96 ff ff       	call   c0015f24 <milliTenthSleep(unsigned int)>
c001c834:	83 c4 10             	add    esp,0x10
c001c837:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c83d:	75 c8                	jne    c001c807 <ATA::readyForCommand()+0x9>
c001c83f:	31 c0                	xor    eax,eax
c001c841:	eb 02                	jmp    c001c845 <ATA::readyForCommand()+0x47>
c001c843:	b0 01                	mov    al,0x1
c001c845:	5a                   	pop    edx
c001c846:	5b                   	pop    ebx
c001c847:	5e                   	pop    esi
c001c848:	c3                   	ret    
c001c849:	90                   	nop

c001c84a <ATA::access(unsigned long long, int, void*, bool)>:
c001c84a:	55                   	push   ebp
c001c84b:	57                   	push   edi
c001c84c:	56                   	push   esi
c001c84d:	53                   	push   ebx
c001c84e:	83 ec 2c             	sub    esp,0x2c
c001c851:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c855:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c859:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c85d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c861:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c865:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c869:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001c86d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c873:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c877:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c87d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c881:	c1 e0 06             	shl    eax,0x6
c001c884:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c88c:	74 5b                	je     c001c8e9 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001c88e:	89 fa                	mov    edx,edi
c001c890:	89 f0                	mov    eax,esi
c001c892:	c1 ea 1c             	shr    edx,0x1c
c001c895:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001c899:	89 d1                	mov    ecx,edx
c001c89b:	09 c1                	or     ecx,eax
c001c89d:	74 25                	je     c001c8c4 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c89f:	31 ed                	xor    ebp,ebp
c001c8a1:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c8a8:	89 fa                	mov    edx,edi
c001c8aa:	89 f0                	mov    eax,esi
c001c8ac:	0f ad d0             	shrd   eax,edx,cl
c001c8af:	d3 ea                	shr    edx,cl
c001c8b1:	f6 c1 20             	test   cl,0x20
c001c8b4:	74 02                	je     c001c8b8 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c8b6:	89 d0                	mov    eax,edx
c001c8b8:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c8bc:	45                   	inc    ebp
c001c8bd:	83 fd 06             	cmp    ebp,0x6
c001c8c0:	75 df                	jne    c001c8a1 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c8c2:	eb 71                	jmp    c001c935 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001c8c4:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c8c9:	89 f0                	mov    eax,esi
c001c8cb:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c8d2:	0f ac f8 10          	shrd   eax,edi,0x10
c001c8d6:	bf 01 00 00 00       	mov    edi,0x1
c001c8db:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c8df:	c1 ee 18             	shr    esi,0x18
c001c8e2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c8e7:	eb 53                	jmp    c001c93c <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001c8e9:	6a 00                	push   0x0
c001c8eb:	6a 3f                	push   0x3f
c001c8ed:	57                   	push   edi
c001c8ee:	56                   	push   esi
c001c8ef:	e8 cc 2a 00 00       	call   c001f3c0 <__umoddi3>
c001c8f4:	83 c4 10             	add    esp,0x10
c001c8f7:	40                   	inc    eax
c001c8f8:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c8fc:	6a 00                	push   0x0
c001c8fe:	68 f0 03 00 00       	push   0x3f0
c001c903:	57                   	push   edi
c001c904:	56                   	push   esi
c001c905:	e8 b6 29 00 00       	call   c001f2c0 <__udivdi3>
c001c90a:	83 c4 10             	add    esp,0x10
c001c90d:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c912:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c919:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c91e:	6a 00                	push   0x0
c001c920:	6a 3f                	push   0x3f
c001c922:	57                   	push   edi
c001c923:	31 ff                	xor    edi,edi
c001c925:	56                   	push   esi
c001c926:	e8 95 29 00 00       	call   c001f2c0 <__udivdi3>
c001c92b:	83 c4 10             	add    esp,0x10
c001c92e:	83 e0 0f             	and    eax,0xf
c001c931:	89 c6                	mov    esi,eax
c001c933:	eb 07                	jmp    c001c93c <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001c935:	31 f6                	xor    esi,esi
c001c937:	bf 02 00 00 00       	mov    edi,0x2
c001c93c:	50                   	push   eax
c001c93d:	6a 00                	push   0x0
c001c93f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c946:	50                   	push   eax
c001c947:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c94b:	e8 b6 f1 ff ff       	call   c001bb06 <IDE::enableIRQs(unsigned char, bool)>
c001c950:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c953:	e8 a6 fe ff ff       	call   c001c7fe <ATA::readyForCommand()>
c001c958:	83 c4 10             	add    esp,0x10
c001c95b:	84 c0                	test   al,al
c001c95d:	75 0a                	jne    c001c969 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001c95f:	be 01 00 00 00       	mov    esi,0x1
c001c964:	e9 9b 02 00 00       	jmp    c001cc04 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001c969:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c96f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c975:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001c97c:	c1 e0 04             	shl    eax,0x4
c001c97f:	09 c6                	or     esi,eax
c001c981:	f7 c7 03 00 00 00    	test   edi,0x3
c001c987:	75 05                	jne    c001c98e <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001c989:	83 ce a0             	or     esi,0xffffffa0
c001c98c:	eb 03                	jmp    c001c991 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001c98e:	83 ce e0             	or     esi,0xffffffe0
c001c991:	89 f0                	mov    eax,esi
c001c993:	0f b6 f0             	movzx  esi,al
c001c996:	56                   	push   esi
c001c997:	6a 06                	push   0x6
c001c999:	51                   	push   ecx
c001c99a:	52                   	push   edx
c001c99b:	e8 58 ef ff ff       	call   c001b8f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9a0:	83 c4 10             	add    esp,0x10
c001c9a3:	6a 00                	push   0x0
c001c9a5:	6a 01                	push   0x1
c001c9a7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9ae:	50                   	push   eax
c001c9af:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9b5:	e8 3e ef ff ff       	call   c001b8f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9ba:	89 f8                	mov    eax,edi
c001c9bc:	83 c4 10             	add    esp,0x10
c001c9bf:	0f b6 f0             	movzx  esi,al
c001c9c2:	83 fe 02             	cmp    esi,0x2
c001c9c5:	75 6e                	jne    c001ca35 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001c9c7:	6a 00                	push   0x0
c001c9c9:	6a 08                	push   0x8
c001c9cb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9d2:	50                   	push   eax
c001c9d3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9d9:	e8 1a ef ff ff       	call   c001b8f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9de:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001c9e3:	50                   	push   eax
c001c9e4:	6a 09                	push   0x9
c001c9e6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9ed:	50                   	push   eax
c001c9ee:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9f4:	e8 ff ee ff ff       	call   c001b8f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9f9:	83 c4 20             	add    esp,0x20
c001c9fc:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001ca01:	50                   	push   eax
c001ca02:	6a 0a                	push   0xa
c001ca04:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca0b:	50                   	push   eax
c001ca0c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca12:	e8 e1 ee ff ff       	call   c001b8f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca17:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001ca1c:	50                   	push   eax
c001ca1d:	6a 0b                	push   0xb
c001ca1f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca26:	50                   	push   eax
c001ca27:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca2d:	e8 c6 ee ff ff       	call   c001b8f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca32:	83 c4 20             	add    esp,0x20
c001ca35:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001ca3a:	50                   	push   eax
c001ca3b:	6a 02                	push   0x2
c001ca3d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca44:	50                   	push   eax
c001ca45:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca4b:	e8 a8 ee ff ff       	call   c001b8f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca50:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001ca55:	50                   	push   eax
c001ca56:	6a 03                	push   0x3
c001ca58:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca5f:	50                   	push   eax
c001ca60:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca66:	e8 8d ee ff ff       	call   c001b8f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca6b:	83 c4 20             	add    esp,0x20
c001ca6e:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001ca73:	50                   	push   eax
c001ca74:	6a 04                	push   0x4
c001ca76:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca7d:	50                   	push   eax
c001ca7e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca84:	e8 6f ee ff ff       	call   c001b8f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca89:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ca8e:	50                   	push   eax
c001ca8f:	6a 05                	push   0x5
c001ca91:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca98:	50                   	push   eax
c001ca99:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca9f:	e8 54 ee ff ff       	call   c001b8f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001caa4:	83 c4 20             	add    esp,0x20
c001caa7:	83 fe 02             	cmp    esi,0x2
c001caaa:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001caaf:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001cab4:	85 c9                	test   ecx,ecx
c001cab6:	74 07                	je     c001cabf <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001cab8:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cabd:	75 47                	jne    c001cb06 <ATA::access(unsigned long long, int, void*, bool)+0x2bc>
c001cabf:	89 f8                	mov    eax,edi
c001cac1:	0f b6 f8             	movzx  edi,al
c001cac4:	31 c0                	xor    eax,eax
c001cac6:	83 ff 02             	cmp    edi,0x2
c001cac9:	0f 95 c0             	setne  al
c001cacc:	89 c6                	mov    esi,eax
c001cace:	74 0c                	je     c001cadc <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001cad0:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cad5:	b8 30 00 00 00       	mov    eax,0x30
c001cada:	75 2f                	jne    c001cb0b <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001cadc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cae0:	83 f2 01             	xor    edx,0x1
c001cae3:	85 c9                	test   ecx,ecx
c001cae5:	74 09                	je     c001caf0 <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001cae7:	84 d2                	test   dl,dl
c001cae9:	b8 24 00 00 00       	mov    eax,0x24
c001caee:	75 1b                	jne    c001cb0b <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001caf0:	85 f6                	test   esi,esi
c001caf2:	0f 84 67 fe ff ff    	je     c001c95f <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001caf8:	84 d2                	test   dl,dl
c001cafa:	b8 20 00 00 00       	mov    eax,0x20
c001caff:	75 0a                	jne    c001cb0b <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001cb01:	e9 59 fe ff ff       	jmp    c001c95f <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001cb06:	b8 34 00 00 00       	mov    eax,0x34
c001cb0b:	50                   	push   eax
c001cb0c:	6a 07                	push   0x7
c001cb0e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb15:	50                   	push   eax
c001cb16:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb1c:	e8 d7 ed ff ff       	call   c001b8f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb21:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001cb25:	83 c4 10             	add    esp,0x10
c001cb28:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001cb2d:	85 f6                	test   esi,esi
c001cb2f:	0f 84 b5 00 00 00    	je     c001cbea <ATA::access(unsigned long long, int, void*, bool)+0x3a0>
c001cb35:	50                   	push   eax
c001cb36:	6a 01                	push   0x1
c001cb38:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb3f:	50                   	push   eax
c001cb40:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb46:	e8 91 f8 ff ff       	call   c001c3dc <IDE::polling(unsigned char, unsigned int)>
c001cb4b:	83 c4 10             	add    esp,0x10
c001cb4e:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001cb54:	0f b6 c0             	movzx  eax,al
c001cb57:	85 c0                	test   eax,eax
c001cb59:	74 1f                	je     c001cb7a <ATA::access(unsigned long long, int, void*, bool)+0x330>
c001cb5b:	50                   	push   eax
c001cb5c:	89 c6                	mov    esi,eax
c001cb5e:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001cb65:	0f b6 d2             	movzx  edx,dl
c001cb68:	50                   	push   eax
c001cb69:	52                   	push   edx
c001cb6a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb70:	e8 ad f7 ff ff       	call   c001c322 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cb75:	e9 87 00 00 00       	jmp    c001cc01 <ATA::access(unsigned long long, int, void*, bool)+0x3b7>
c001cb7a:	85 ed                	test   ebp,ebp
c001cb7c:	74 3b                	je     c001cbb9 <ATA::access(unsigned long long, int, void*, bool)+0x36f>
c001cb7e:	31 ff                	xor    edi,edi
c001cb80:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001cb84:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001cb88:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001cb8d:	50                   	push   eax
c001cb8e:	50                   	push   eax
c001cb8f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb96:	50                   	push   eax
c001cb97:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb9d:	e8 44 ed ff ff       	call   c001b8e6 <IDE::getBase(unsigned char)>
c001cba2:	89 c2                	mov    edx,eax
c001cba4:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001cba9:	66 ef                	out    dx,ax
c001cbab:	47                   	inc    edi
c001cbac:	83 c4 10             	add    esp,0x10
c001cbaf:	81 ff 00 01 00 00    	cmp    edi,0x100
c001cbb5:	75 c9                	jne    c001cb80 <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001cbb7:	eb 23                	jmp    c001cbdc <ATA::access(unsigned long long, int, void*, bool)+0x392>
c001cbb9:	51                   	push   ecx
c001cbba:	0f b6 d2             	movzx  edx,dl
c001cbbd:	51                   	push   ecx
c001cbbe:	52                   	push   edx
c001cbbf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cbc5:	e8 1c ed ff ff       	call   c001b8e6 <IDE::getBase(unsigned char)>
c001cbca:	b9 00 01 00 00       	mov    ecx,0x100
c001cbcf:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001cbd3:	89 c2                	mov    edx,eax
c001cbd5:	fc                   	cld    
c001cbd6:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001cbd9:	83 c4 10             	add    esp,0x10
c001cbdc:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001cbe4:	4e                   	dec    esi
c001cbe5:	e9 43 ff ff ff       	jmp    c001cb2d <ATA::access(unsigned long long, int, void*, bool)+0x2e3>
c001cbea:	31 f6                	xor    esi,esi
c001cbec:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cbf1:	74 11                	je     c001cc04 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001cbf3:	50                   	push   eax
c001cbf4:	50                   	push   eax
c001cbf5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001cbfa:	50                   	push   eax
c001cbfb:	53                   	push   ebx
c001cbfc:	e8 af fb ff ff       	call   c001c7b0 <ATA::flush(bool)>
c001cc01:	83 c4 10             	add    esp,0x10
c001cc04:	83 c4 2c             	add    esp,0x2c
c001cc07:	89 f0                	mov    eax,esi
c001cc09:	5b                   	pop    ebx
c001cc0a:	5e                   	pop    esi
c001cc0b:	5f                   	pop    edi
c001cc0c:	5d                   	pop    ebp
c001cc0d:	c3                   	ret    

c001cc0e <ATA::detectCHS()>:
c001cc0e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cc12:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001cc18:	c1 e0 06             	shl    eax,0x6
c001cc1b:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001cc21:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001cc2b:	c7 44 24 04 f4 2d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022df4
c001cc33:	e9 d1 46 ff ff       	jmp    c0011309 <KePanic(char const*)>

c001cc38 <ATA::open(int, int, void*)>:
c001cc38:	53                   	push   ebx
c001cc39:	83 ec 08             	sub    esp,0x8
c001cc3c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cc40:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc44:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc48:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cc4e:	c1 e0 06             	shl    eax,0x6
c001cc51:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001cc57:	01 d0                	add    eax,edx
c001cc59:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001cc60:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001cc66:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001cc6d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001cc77:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001cc7e:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001cc84:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001cc8b:	75 0c                	jne    c001cc99 <ATA::open(int, int, void*)+0x61>
c001cc8d:	83 ec 0c             	sub    esp,0xc
c001cc90:	53                   	push   ebx
c001cc91:	e8 78 ff ff ff       	call   c001cc0e <ATA::detectCHS()>
c001cc96:	83 c4 10             	add    esp,0x10
c001cc99:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cc9f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cca5:	c1 e0 06             	shl    eax,0x6
c001cca8:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001ccaf:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ccb9:	d1 e8                	shr    eax,1
c001ccbb:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001ccc1:	6a 04                	push   0x4
c001ccc3:	6a 0c                	push   0xc
c001ccc5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cccc:	50                   	push   eax
c001cccd:	52                   	push   edx
c001ccce:	e8 25 ec ff ff       	call   c001b8f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ccd3:	90                   	nop
c001ccd4:	90                   	nop
c001ccd5:	6a 00                	push   0x0
c001ccd7:	6a 0c                	push   0xc
c001ccd9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cce0:	50                   	push   eax
c001cce1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cce7:	e8 0c ec ff ff       	call   c001b8f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ccec:	83 c4 14             	add    esp,0x14
c001ccef:	53                   	push   ebx
c001ccf0:	e8 ad fe fe ff       	call   c000cba2 <PhysicalDisk::startCache()>
c001ccf5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ccf8:	e8 f1 10 ff ff       	call   c000ddee <createPartitionsForDisk(PhysicalDisk*)>
c001ccfd:	83 c4 18             	add    esp,0x18
c001cd00:	31 c0                	xor    eax,eax
c001cd02:	5b                   	pop    ebx
c001cd03:	c3                   	ret    

c001cd04 <combineCharAndColour(char, unsigned char)>:
c001cd04:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cd09:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001cd0f:	c1 e0 08             	shl    eax,0x8
c001cd12:	09 d0                	or     eax,edx
c001cd14:	c3                   	ret    

c001cd15 <combineColours(unsigned char, unsigned char)>:
c001cd15:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cd1a:	c1 e0 04             	shl    eax,0x4
c001cd1d:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001cd21:	c3                   	ret    

c001cd22 <ATA::read(unsigned long long, int, void*)>:
c001cd22:	55                   	push   ebp
c001cd23:	57                   	push   edi
c001cd24:	56                   	push   esi
c001cd25:	be 04 00 00 00       	mov    esi,0x4
c001cd2a:	53                   	push   ebx
c001cd2b:	83 ec 0c             	sub    esp,0xc
c001cd2e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cd32:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd36:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cd3a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cd3e:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cd41:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cd47:	0f 87 a1 01 00 00    	ja     c001ceee <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cd4d:	85 c9                	test   ecx,ecx
c001cd4f:	be 06 00 00 00       	mov    esi,0x6
c001cd54:	0f 84 94 01 00 00    	je     c001ceee <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cd5a:	55                   	push   ebp
c001cd5b:	55                   	push   ebp
c001cd5c:	6a 00                	push   0x0
c001cd5e:	51                   	push   ecx
c001cd5f:	53                   	push   ebx
c001cd60:	52                   	push   edx
c001cd61:	50                   	push   eax
c001cd62:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cd66:	e8 df fa ff ff       	call   c001c84a <ATA::access(unsigned long long, int, void*, bool)>
c001cd6b:	83 c4 20             	add    esp,0x20
c001cd6e:	85 c0                	test   eax,eax
c001cd70:	89 c6                	mov    esi,eax
c001cd72:	0f 85 71 01 00 00    	jne    c001cee9 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001cd78:	50                   	push   eax
c001cd79:	bd 10 27 00 00       	mov    ebp,0x2710
c001cd7e:	50                   	push   eax
c001cd7f:	03 1d b4 a0 02 c0    	add    ebx,DWORD PTR ds:0xc002a0b4
c001cd85:	6a 0f                	push   0xf
c001cd87:	6a 00                	push   0x0
c001cd89:	89 da                	mov    edx,ebx
c001cd8b:	89 1d b4 a0 02 c0    	mov    DWORD PTR ds:0xc002a0b4,ebx
c001cd91:	e8 7f ff ff ff       	call   c001cd15 <combineColours(unsigned char, unsigned char)>
c001cd96:	59                   	pop    ecx
c001cd97:	b9 0a 00 00 00       	mov    ecx,0xa
c001cd9c:	5b                   	pop    ebx
c001cd9d:	0f b6 d8             	movzx  ebx,al
c001cda0:	89 d0                	mov    eax,edx
c001cda2:	53                   	push   ebx
c001cda3:	99                   	cdq    
c001cda4:	f7 fd                	idiv   ebp
c001cda6:	99                   	cdq    
c001cda7:	f7 f9                	idiv   ecx
c001cda9:	83 c2 30             	add    edx,0x30
c001cdac:	0f b6 d2             	movzx  edx,dl
c001cdaf:	52                   	push   edx
c001cdb0:	e8 4f ff ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001cdb5:	5f                   	pop    edi
c001cdb6:	bf e8 03 00 00       	mov    edi,0x3e8
c001cdbb:	5a                   	pop    edx
c001cdbc:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cdc2:	53                   	push   ebx
c001cdc3:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cdc8:	99                   	cdq    
c001cdc9:	f7 ff                	idiv   edi
c001cdcb:	99                   	cdq    
c001cdcc:	f7 f9                	idiv   ecx
c001cdce:	8d 42 30             	lea    eax,[edx+0x30]
c001cdd1:	0f b6 c0             	movzx  eax,al
c001cdd4:	50                   	push   eax
c001cdd5:	e8 2a ff ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001cdda:	5f                   	pop    edi
c001cddb:	bf 64 00 00 00       	mov    edi,0x64
c001cde0:	5a                   	pop    edx
c001cde1:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001cde7:	53                   	push   ebx
c001cde8:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cded:	99                   	cdq    
c001cdee:	f7 ff                	idiv   edi
c001cdf0:	99                   	cdq    
c001cdf1:	f7 f9                	idiv   ecx
c001cdf3:	8d 42 30             	lea    eax,[edx+0x30]
c001cdf6:	0f b6 c0             	movzx  eax,al
c001cdf9:	50                   	push   eax
c001cdfa:	e8 05 ff ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001cdff:	5a                   	pop    edx
c001ce00:	5a                   	pop    edx
c001ce01:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001ce07:	53                   	push   ebx
c001ce08:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ce0d:	99                   	cdq    
c001ce0e:	f7 f9                	idiv   ecx
c001ce10:	99                   	cdq    
c001ce11:	f7 f9                	idiv   ecx
c001ce13:	8d 42 30             	lea    eax,[edx+0x30]
c001ce16:	0f b6 c0             	movzx  eax,al
c001ce19:	50                   	push   eax
c001ce1a:	e8 e5 fe ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001ce1f:	5a                   	pop    edx
c001ce20:	5a                   	pop    edx
c001ce21:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001ce27:	53                   	push   ebx
c001ce28:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ce2d:	99                   	cdq    
c001ce2e:	f7 f9                	idiv   ecx
c001ce30:	83 c2 30             	add    edx,0x30
c001ce33:	0f b6 d2             	movzx  edx,dl
c001ce36:	52                   	push   edx
c001ce37:	e8 c8 fe ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001ce3c:	5a                   	pop    edx
c001ce3d:	5a                   	pop    edx
c001ce3e:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001ce44:	53                   	push   ebx
c001ce45:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001ce4a:	99                   	cdq    
c001ce4b:	f7 fd                	idiv   ebp
c001ce4d:	99                   	cdq    
c001ce4e:	f7 f9                	idiv   ecx
c001ce50:	8d 42 30             	lea    eax,[edx+0x30]
c001ce53:	0f b6 c0             	movzx  eax,al
c001ce56:	50                   	push   eax
c001ce57:	e8 a8 fe ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001ce5c:	5d                   	pop    ebp
c001ce5d:	bd e8 03 00 00       	mov    ebp,0x3e8
c001ce62:	5a                   	pop    edx
c001ce63:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001ce69:	53                   	push   ebx
c001ce6a:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001ce6f:	99                   	cdq    
c001ce70:	f7 fd                	idiv   ebp
c001ce72:	99                   	cdq    
c001ce73:	f7 f9                	idiv   ecx
c001ce75:	8d 42 30             	lea    eax,[edx+0x30]
c001ce78:	0f b6 c0             	movzx  eax,al
c001ce7b:	50                   	push   eax
c001ce7c:	e8 83 fe ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001ce81:	5d                   	pop    ebp
c001ce82:	5a                   	pop    edx
c001ce83:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001ce89:	53                   	push   ebx
c001ce8a:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001ce8f:	99                   	cdq    
c001ce90:	f7 ff                	idiv   edi
c001ce92:	99                   	cdq    
c001ce93:	f7 f9                	idiv   ecx
c001ce95:	8d 42 30             	lea    eax,[edx+0x30]
c001ce98:	0f b6 c0             	movzx  eax,al
c001ce9b:	50                   	push   eax
c001ce9c:	e8 63 fe ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001cea1:	5f                   	pop    edi
c001cea2:	5d                   	pop    ebp
c001cea3:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cea9:	53                   	push   ebx
c001ceaa:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001ceaf:	99                   	cdq    
c001ceb0:	f7 f9                	idiv   ecx
c001ceb2:	99                   	cdq    
c001ceb3:	f7 f9                	idiv   ecx
c001ceb5:	8d 42 30             	lea    eax,[edx+0x30]
c001ceb8:	0f b6 c0             	movzx  eax,al
c001cebb:	50                   	push   eax
c001cebc:	e8 43 fe ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001cec1:	5a                   	pop    edx
c001cec2:	5f                   	pop    edi
c001cec3:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cec9:	53                   	push   ebx
c001ceca:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cecf:	99                   	cdq    
c001ced0:	f7 f9                	idiv   ecx
c001ced2:	83 c2 30             	add    edx,0x30
c001ced5:	0f b6 d2             	movzx  edx,dl
c001ced8:	52                   	push   edx
c001ced9:	e8 26 fe ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001cede:	83 c4 10             	add    esp,0x10
c001cee1:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cee7:	eb 05                	jmp    c001ceee <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cee9:	be 01 00 00 00       	mov    esi,0x1
c001ceee:	83 c4 0c             	add    esp,0xc
c001cef1:	89 f0                	mov    eax,esi
c001cef3:	5b                   	pop    ebx
c001cef4:	5e                   	pop    esi
c001cef5:	5f                   	pop    edi
c001cef6:	5d                   	pop    ebp
c001cef7:	c3                   	ret    

c001cef8 <ATA::write(unsigned long long, int, void*)>:
c001cef8:	55                   	push   ebp
c001cef9:	57                   	push   edi
c001cefa:	56                   	push   esi
c001cefb:	be 04 00 00 00       	mov    esi,0x4
c001cf00:	53                   	push   ebx
c001cf01:	83 ec 0c             	sub    esp,0xc
c001cf04:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cf08:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf0c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cf10:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cf14:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cf17:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cf1d:	0f 87 9c 01 00 00    	ja     c001d0bf <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cf23:	85 c9                	test   ecx,ecx
c001cf25:	be 06 00 00 00       	mov    esi,0x6
c001cf2a:	0f 84 8f 01 00 00    	je     c001d0bf <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cf30:	55                   	push   ebp
c001cf31:	55                   	push   ebp
c001cf32:	6a 01                	push   0x1
c001cf34:	51                   	push   ecx
c001cf35:	53                   	push   ebx
c001cf36:	52                   	push   edx
c001cf37:	50                   	push   eax
c001cf38:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cf3c:	e8 09 f9 ff ff       	call   c001c84a <ATA::access(unsigned long long, int, void*, bool)>
c001cf41:	83 c4 20             	add    esp,0x20
c001cf44:	85 c0                	test   eax,eax
c001cf46:	89 c6                	mov    esi,eax
c001cf48:	0f 85 6c 01 00 00    	jne    c001d0ba <ATA::write(unsigned long long, int, void*)+0x1c2>
c001cf4e:	50                   	push   eax
c001cf4f:	bd 10 27 00 00       	mov    ebp,0x2710
c001cf54:	50                   	push   eax
c001cf55:	6a 0f                	push   0xf
c001cf57:	6a 00                	push   0x0
c001cf59:	01 1d b0 a0 02 c0    	add    DWORD PTR ds:0xc002a0b0,ebx
c001cf5f:	e8 b1 fd ff ff       	call   c001cd15 <combineColours(unsigned char, unsigned char)>
c001cf64:	5a                   	pop    edx
c001cf65:	59                   	pop    ecx
c001cf66:	b9 0a 00 00 00       	mov    ecx,0xa
c001cf6b:	0f b6 d8             	movzx  ebx,al
c001cf6e:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cf73:	53                   	push   ebx
c001cf74:	99                   	cdq    
c001cf75:	f7 fd                	idiv   ebp
c001cf77:	99                   	cdq    
c001cf78:	f7 f9                	idiv   ecx
c001cf7a:	8d 42 30             	lea    eax,[edx+0x30]
c001cf7d:	0f b6 c0             	movzx  eax,al
c001cf80:	50                   	push   eax
c001cf81:	e8 7e fd ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001cf86:	5f                   	pop    edi
c001cf87:	bf e8 03 00 00       	mov    edi,0x3e8
c001cf8c:	5a                   	pop    edx
c001cf8d:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cf93:	53                   	push   ebx
c001cf94:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cf99:	99                   	cdq    
c001cf9a:	f7 ff                	idiv   edi
c001cf9c:	99                   	cdq    
c001cf9d:	f7 f9                	idiv   ecx
c001cf9f:	8d 42 30             	lea    eax,[edx+0x30]
c001cfa2:	0f b6 c0             	movzx  eax,al
c001cfa5:	50                   	push   eax
c001cfa6:	e8 59 fd ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001cfab:	5f                   	pop    edi
c001cfac:	bf 64 00 00 00       	mov    edi,0x64
c001cfb1:	5a                   	pop    edx
c001cfb2:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001cfb8:	53                   	push   ebx
c001cfb9:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cfbe:	99                   	cdq    
c001cfbf:	f7 ff                	idiv   edi
c001cfc1:	99                   	cdq    
c001cfc2:	f7 f9                	idiv   ecx
c001cfc4:	8d 42 30             	lea    eax,[edx+0x30]
c001cfc7:	0f b6 c0             	movzx  eax,al
c001cfca:	50                   	push   eax
c001cfcb:	e8 34 fd ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001cfd0:	5a                   	pop    edx
c001cfd1:	5a                   	pop    edx
c001cfd2:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001cfd8:	53                   	push   ebx
c001cfd9:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cfde:	99                   	cdq    
c001cfdf:	f7 f9                	idiv   ecx
c001cfe1:	99                   	cdq    
c001cfe2:	f7 f9                	idiv   ecx
c001cfe4:	8d 42 30             	lea    eax,[edx+0x30]
c001cfe7:	0f b6 c0             	movzx  eax,al
c001cfea:	50                   	push   eax
c001cfeb:	e8 14 fd ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001cff0:	5a                   	pop    edx
c001cff1:	5a                   	pop    edx
c001cff2:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001cff8:	53                   	push   ebx
c001cff9:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cffe:	99                   	cdq    
c001cfff:	f7 f9                	idiv   ecx
c001d001:	83 c2 30             	add    edx,0x30
c001d004:	0f b6 d2             	movzx  edx,dl
c001d007:	52                   	push   edx
c001d008:	e8 f7 fc ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001d00d:	5a                   	pop    edx
c001d00e:	5a                   	pop    edx
c001d00f:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d015:	53                   	push   ebx
c001d016:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d01b:	99                   	cdq    
c001d01c:	f7 fd                	idiv   ebp
c001d01e:	99                   	cdq    
c001d01f:	f7 f9                	idiv   ecx
c001d021:	8d 42 30             	lea    eax,[edx+0x30]
c001d024:	0f b6 c0             	movzx  eax,al
c001d027:	50                   	push   eax
c001d028:	e8 d7 fc ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001d02d:	5d                   	pop    ebp
c001d02e:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d033:	5a                   	pop    edx
c001d034:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d03a:	53                   	push   ebx
c001d03b:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d040:	99                   	cdq    
c001d041:	f7 fd                	idiv   ebp
c001d043:	99                   	cdq    
c001d044:	f7 f9                	idiv   ecx
c001d046:	8d 42 30             	lea    eax,[edx+0x30]
c001d049:	0f b6 c0             	movzx  eax,al
c001d04c:	50                   	push   eax
c001d04d:	e8 b2 fc ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001d052:	5d                   	pop    ebp
c001d053:	5a                   	pop    edx
c001d054:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d05a:	53                   	push   ebx
c001d05b:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d060:	99                   	cdq    
c001d061:	f7 ff                	idiv   edi
c001d063:	99                   	cdq    
c001d064:	f7 f9                	idiv   ecx
c001d066:	8d 42 30             	lea    eax,[edx+0x30]
c001d069:	0f b6 c0             	movzx  eax,al
c001d06c:	50                   	push   eax
c001d06d:	e8 92 fc ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001d072:	5f                   	pop    edi
c001d073:	5d                   	pop    ebp
c001d074:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d07a:	53                   	push   ebx
c001d07b:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d080:	99                   	cdq    
c001d081:	f7 f9                	idiv   ecx
c001d083:	99                   	cdq    
c001d084:	f7 f9                	idiv   ecx
c001d086:	8d 42 30             	lea    eax,[edx+0x30]
c001d089:	0f b6 c0             	movzx  eax,al
c001d08c:	50                   	push   eax
c001d08d:	e8 72 fc ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001d092:	5a                   	pop    edx
c001d093:	5f                   	pop    edi
c001d094:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d09a:	53                   	push   ebx
c001d09b:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d0a0:	99                   	cdq    
c001d0a1:	f7 f9                	idiv   ecx
c001d0a3:	83 c2 30             	add    edx,0x30
c001d0a6:	0f b6 d2             	movzx  edx,dl
c001d0a9:	52                   	push   edx
c001d0aa:	e8 55 fc ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001d0af:	83 c4 10             	add    esp,0x10
c001d0b2:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d0b8:	eb 05                	jmp    c001d0bf <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d0ba:	be 01 00 00 00       	mov    esi,0x1
c001d0bf:	83 c4 0c             	add    esp,0xc
c001d0c2:	89 f0                	mov    eax,esi
c001d0c4:	5b                   	pop    ebx
c001d0c5:	5e                   	pop    esi
c001d0c6:	5f                   	pop    edi
c001d0c7:	5d                   	pop    ebp
c001d0c8:	c3                   	ret    
c001d0c9:	90                   	nop

c001d0ca <ATAPI::write(unsigned long long, int, void*)>:
c001d0ca:	b8 03 00 00 00       	mov    eax,0x3
c001d0cf:	c3                   	ret    

c001d0d0 <ATAPI::close(int, int, void*)>:
c001d0d0:	83 ec 0c             	sub    esp,0xc
c001d0d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0d7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d0dd:	85 c0                	test   eax,eax
c001d0df:	74 0c                	je     c001d0ed <ATAPI::close(int, int, void*)+0x1d>
c001d0e1:	8b 10                	mov    edx,DWORD PTR [eax]
c001d0e3:	83 ec 0c             	sub    esp,0xc
c001d0e6:	50                   	push   eax
c001d0e7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d0ea:	83 c4 10             	add    esp,0x10
c001d0ed:	31 c0                	xor    eax,eax
c001d0ef:	83 c4 0c             	add    esp,0xc
c001d0f2:	c3                   	ret    
c001d0f3:	90                   	nop

c001d0f4 <ATAPI::ATAPI()>:
c001d0f4:	83 ec 0c             	sub    esp,0xc
c001d0f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0fb:	83 ec 04             	sub    esp,0x4
c001d0fe:	68 00 08 00 00       	push   0x800
c001d103:	68 3d 2f 02 c0       	push   0xc0022f3d
c001d108:	50                   	push   eax
c001d109:	e8 2c fa fe ff       	call   c000cb3a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d10e:	83 c4 10             	add    esp,0x10
c001d111:	ba 58 2e 02 c0       	mov    edx,0xc0022e58
c001d116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d11a:	89 10                	mov    DWORD PTR [eax],edx
c001d11c:	90                   	nop
c001d11d:	83 c4 0c             	add    esp,0xc
c001d120:	c3                   	ret    
c001d121:	90                   	nop

c001d122 <ATAPI::readyForCommand()>:
c001d122:	56                   	push   esi
c001d123:	53                   	push   ebx
c001d124:	53                   	push   ebx
c001d125:	31 db                	xor    ebx,ebx
c001d127:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d12b:	51                   	push   ecx
c001d12c:	6a 0c                	push   0xc
c001d12e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d135:	50                   	push   eax
c001d136:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d13c:	e8 77 e8 ff ff       	call   c001b9b8 <IDE::read(unsigned char, unsigned char)>
c001d141:	83 c4 10             	add    esp,0x10
c001d144:	a8 88                	test   al,0x88
c001d146:	74 25                	je     c001d16d <ATAPI::readyForCommand()+0x4b>
c001d148:	43                   	inc    ebx
c001d149:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d14f:	7e da                	jle    c001d12b <ATAPI::readyForCommand()+0x9>
c001d151:	83 ec 0c             	sub    esp,0xc
c001d154:	68 5e 01 00 00       	push   0x15e
c001d159:	e8 c6 8d ff ff       	call   c0015f24 <milliTenthSleep(unsigned int)>
c001d15e:	83 c4 10             	add    esp,0x10
c001d161:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d167:	75 c2                	jne    c001d12b <ATAPI::readyForCommand()+0x9>
c001d169:	31 c0                	xor    eax,eax
c001d16b:	eb 02                	jmp    c001d16f <ATAPI::readyForCommand()+0x4d>
c001d16d:	b0 01                	mov    al,0x1
c001d16f:	5a                   	pop    edx
c001d170:	5b                   	pop    ebx
c001d171:	5e                   	pop    esi
c001d172:	c3                   	ret    
c001d173:	90                   	nop

c001d174 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d174:	55                   	push   ebp
c001d175:	57                   	push   edi
c001d176:	56                   	push   esi
c001d177:	53                   	push   ebx
c001d178:	83 ec 20             	sub    esp,0x20
c001d17b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d17f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d183:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001d187:	6a 01                	push   0x1
c001d189:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d190:	50                   	push   eax
c001d191:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d197:	e8 6a e9 ff ff       	call   c001bb06 <IDE::enableIRQs(unsigned char, bool)>
c001d19c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d1a3:	59                   	pop    ecx
c001d1a4:	5e                   	pop    esi
c001d1a5:	50                   	push   eax
c001d1a6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d1ac:	e8 21 e7 ff ff       	call   c001b8d2 <IDE::prepareInterrupt(unsigned char)>
c001d1b1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d1b4:	e8 69 ff ff ff       	call   c001d122 <ATAPI::readyForCommand()>
c001d1b9:	83 c4 10             	add    esp,0x10
c001d1bc:	84 c0                	test   al,al
c001d1be:	75 0a                	jne    c001d1ca <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001d1c0:	bb 01 00 00 00       	mov    ebx,0x1
c001d1c5:	e9 5f 02 00 00       	jmp    c001d429 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d1ca:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d1d0:	c1 e0 04             	shl    eax,0x4
c001d1d3:	0f b6 c0             	movzx  eax,al
c001d1d6:	50                   	push   eax
c001d1d7:	6a 06                	push   0x6
c001d1d9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d1e0:	50                   	push   eax
c001d1e1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d1e7:	e8 0c e7 ff ff       	call   c001b8f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d1ec:	6a 00                	push   0x0
c001d1ee:	6a 01                	push   0x1
c001d1f0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d1f7:	50                   	push   eax
c001d1f8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d1fe:	e8 f5 e6 ff ff       	call   c001b8f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d203:	83 c4 20             	add    esp,0x20
c001d206:	0f b6 c3             	movzx  eax,bl
c001d209:	50                   	push   eax
c001d20a:	0f b6 df             	movzx  ebx,bh
c001d20d:	6a 04                	push   0x4
c001d20f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d216:	50                   	push   eax
c001d217:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d21d:	e8 d6 e6 ff ff       	call   c001b8f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d222:	53                   	push   ebx
c001d223:	6a 05                	push   0x5
c001d225:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d22c:	50                   	push   eax
c001d22d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d233:	e8 c0 e6 ff ff       	call   c001b8f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d238:	83 c4 20             	add    esp,0x20
c001d23b:	68 a0 00 00 00       	push   0xa0
c001d240:	6a 07                	push   0x7
c001d242:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d249:	50                   	push   eax
c001d24a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d250:	e8 a3 e6 ff ff       	call   c001b8f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d255:	83 c4 0c             	add    esp,0xc
c001d258:	6a 01                	push   0x1
c001d25a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d261:	50                   	push   eax
c001d262:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d268:	e8 6f f1 ff ff       	call   c001c3dc <IDE::polling(unsigned char, unsigned int)>
c001d26d:	83 c4 10             	add    esp,0x10
c001d270:	0f b6 d8             	movzx  ebx,al
c001d273:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d279:	85 db                	test   ebx,ebx
c001d27b:	74 20                	je     c001d29d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001d27d:	53                   	push   ebx
c001d27e:	0f b6 c0             	movzx  eax,al
c001d281:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d288:	52                   	push   edx
c001d289:	50                   	push   eax
c001d28a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d290:	e8 8d f0 ff ff       	call   c001c322 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d295:	83 c4 10             	add    esp,0x10
c001d298:	e9 8c 01 00 00       	jmp    c001d429 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d29d:	52                   	push   edx
c001d29e:	0f b6 c0             	movzx  eax,al
c001d2a1:	52                   	push   edx
c001d2a2:	50                   	push   eax
c001d2a3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d2a9:	e8 38 e6 ff ff       	call   c001b8e6 <IDE::getBase(unsigned char)>
c001d2ae:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d2b2:	b9 06 00 00 00       	mov    ecx,0x6
c001d2b7:	89 c2                	mov    edx,eax
c001d2b9:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d2bc:	89 e8                	mov    eax,ebp
c001d2be:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d2c2:	83 c4 10             	add    esp,0x10
c001d2c5:	0f b6 c0             	movzx  eax,al
c001d2c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d2cc:	85 db                	test   ebx,ebx
c001d2ce:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d2d4:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d2db:	0f 84 eb 00 00 00    	je     c001d3cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001d2e1:	55                   	push   ebp
c001d2e2:	55                   	push   ebp
c001d2e3:	52                   	push   edx
c001d2e4:	50                   	push   eax
c001d2e5:	e8 82 e7 ff ff       	call   c001ba6c <IDE::waitInterrupt(unsigned char)>
c001d2ea:	83 c4 10             	add    esp,0x10
c001d2ed:	84 c0                	test   al,al
c001d2ef:	0f 84 cb fe ff ff    	je     c001d1c0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d2f5:	56                   	push   esi
c001d2f6:	56                   	push   esi
c001d2f7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d2fe:	50                   	push   eax
c001d2ff:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d305:	e8 c8 e5 ff ff       	call   c001b8d2 <IDE::prepareInterrupt(unsigned char)>
c001d30a:	83 c4 0c             	add    esp,0xc
c001d30d:	6a 04                	push   0x4
c001d30f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d316:	50                   	push   eax
c001d317:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d31d:	e8 96 e6 ff ff       	call   c001b9b8 <IDE::read(unsigned char, unsigned char)>
c001d322:	83 c4 0c             	add    esp,0xc
c001d325:	6a 05                	push   0x5
c001d327:	89 c6                	mov    esi,eax
c001d329:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d330:	50                   	push   eax
c001d331:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d337:	e8 7c e6 ff ff       	call   c001b9b8 <IDE::read(unsigned char, unsigned char)>
c001d33c:	83 c4 10             	add    esp,0x10
c001d33f:	0f b6 e8             	movzx  ebp,al
c001d342:	89 f0                	mov    eax,esi
c001d344:	c1 e5 08             	shl    ebp,0x8
c001d347:	0f b6 f0             	movzx  esi,al
c001d34a:	09 f5                	or     ebp,esi
c001d34c:	31 f6                	xor    esi,esi
c001d34e:	d1 fd                	sar    ebp,1
c001d350:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d355:	74 5c                	je     c001d3b3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001d357:	39 ee                	cmp    esi,ebp
c001d359:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d35f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d366:	75 0d                	jne    c001d375 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001d368:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001d36b:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001d36f:	4b                   	dec    ebx
c001d370:	e9 57 ff ff ff       	jmp    c001d2cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001d375:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001d379:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001d37d:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001d382:	51                   	push   ecx
c001d383:	51                   	push   ecx
c001d384:	52                   	push   edx
c001d385:	50                   	push   eax
c001d386:	e8 5b e5 ff ff       	call   c001b8e6 <IDE::getBase(unsigned char)>
c001d38b:	89 c2                	mov    edx,eax
c001d38d:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001d392:	66 ef                	out    dx,ax
c001d394:	46                   	inc    esi
c001d395:	83 c4 10             	add    esp,0x10
c001d398:	eb bd                	jmp    c001d357 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001d39a:	51                   	push   ecx
c001d39b:	51                   	push   ecx
c001d39c:	52                   	push   edx
c001d39d:	50                   	push   eax
c001d39e:	e8 43 e5 ff ff       	call   c001b8e6 <IDE::getBase(unsigned char)>
c001d3a3:	89 c2                	mov    edx,eax
c001d3a5:	66 ed                	in     ax,dx
c001d3a7:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001d3ab:	83 c4 10             	add    esp,0x10
c001d3ae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001d3b2:	46                   	inc    esi
c001d3b3:	39 ee                	cmp    esi,ebp
c001d3b5:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d3bb:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d3c2:	75 d6                	jne    c001d39a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001d3c4:	01 f6                	add    esi,esi
c001d3c6:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001d3ca:	eb a3                	jmp    c001d36f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001d3cc:	51                   	push   ecx
c001d3cd:	51                   	push   ecx
c001d3ce:	52                   	push   edx
c001d3cf:	50                   	push   eax
c001d3d0:	e8 97 e6 ff ff       	call   c001ba6c <IDE::waitInterrupt(unsigned char)>
c001d3d5:	83 c4 10             	add    esp,0x10
c001d3d8:	84 c0                	test   al,al
c001d3da:	0f 84 e0 fd ff ff    	je     c001d1c0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d3e0:	52                   	push   edx
c001d3e1:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d3e6:	52                   	push   edx
c001d3e7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d3ee:	50                   	push   eax
c001d3ef:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d3f5:	e8 d8 e4 ff ff       	call   c001b8d2 <IDE::prepareInterrupt(unsigned char)>
c001d3fa:	83 c4 10             	add    esp,0x10
c001d3fd:	50                   	push   eax
c001d3fe:	50                   	push   eax
c001d3ff:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d406:	50                   	push   eax
c001d407:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d40d:	e8 d4 e4 ff ff       	call   c001b8e6 <IDE::getBase(unsigned char)>
c001d412:	8d 50 07             	lea    edx,[eax+0x7]
c001d415:	ec                   	in     al,dx
c001d416:	83 c4 10             	add    esp,0x10
c001d419:	a8 88                	test   al,0x88
c001d41b:	74 0a                	je     c001d427 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001d41d:	4b                   	dec    ebx
c001d41e:	75 dd                	jne    c001d3fd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001d420:	bb 02 00 00 00       	mov    ebx,0x2
c001d425:	eb 02                	jmp    c001d429 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d427:	31 db                	xor    ebx,ebx
c001d429:	83 c4 1c             	add    esp,0x1c
c001d42c:	89 d8                	mov    eax,ebx
c001d42e:	5b                   	pop    ebx
c001d42f:	5e                   	pop    esi
c001d430:	5f                   	pop    edi
c001d431:	5d                   	pop    ebp
c001d432:	c3                   	ret    
c001d433:	90                   	nop

c001d434 <ATAPI::diskRemoved()>:
c001d434:	53                   	push   ebx
c001d435:	83 ec 14             	sub    esp,0x14
c001d438:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d43c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d443:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d449:	e8 8e 06 ff ff       	call   c000dadc <LogicalDisk::unmount()>
c001d44e:	58                   	pop    eax
c001d44f:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d455:	e8 66 10 ff ff       	call   c000e4c0 <VCache::writeWriteBuffer()>
c001d45a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d460:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d464:	83 c4 18             	add    esp,0x18
c001d467:	5b                   	pop    ebx
c001d468:	e9 43 10 ff ff       	jmp    c000e4b0 <VCache::invalidateReadBuffer()>
c001d46d:	90                   	nop

c001d46e <ATAPI::eject()>:
c001d46e:	57                   	push   edi
c001d46f:	b9 03 00 00 00       	mov    ecx,0x3
c001d474:	53                   	push   ebx
c001d475:	83 ec 14             	sub    esp,0x14
c001d478:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d47c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d480:	fc                   	cld    
c001d481:	31 c0                	xor    eax,eax
c001d483:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d485:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d48a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d48f:	50                   	push   eax
c001d490:	50                   	push   eax
c001d491:	6a 00                	push   0x0
c001d493:	6a 00                	push   0x0
c001d495:	6a 00                	push   0x0
c001d497:	6a 02                	push   0x2
c001d499:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d49d:	50                   	push   eax
c001d49e:	53                   	push   ebx
c001d49f:	e8 d0 fc ff ff       	call   c001d174 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d4a4:	83 c4 14             	add    esp,0x14
c001d4a7:	53                   	push   ebx
c001d4a8:	e8 87 ff ff ff       	call   c001d434 <ATAPI::diskRemoved()>
c001d4ad:	83 c4 24             	add    esp,0x24
c001d4b0:	31 c0                	xor    eax,eax
c001d4b2:	5b                   	pop    ebx
c001d4b3:	5f                   	pop    edi
c001d4b4:	c3                   	ret    
c001d4b5:	90                   	nop

c001d4b6 <ATAPI::diskInserted()>:
c001d4b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d4ba:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d4c1:	c3                   	ret    

c001d4c2 <ATAPI::detectMedia()>:
c001d4c2:	56                   	push   esi
c001d4c3:	53                   	push   ebx
c001d4c4:	83 ec 28             	sub    esp,0x28
c001d4c7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d4cb:	6a 0c                	push   0xc
c001d4cd:	6a 00                	push   0x0
c001d4cf:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d4d3:	56                   	push   esi
c001d4d4:	e8 17 30 fe ff       	call   c00004f0 <memset>
c001d4d9:	58                   	pop    eax
c001d4da:	5a                   	pop    edx
c001d4db:	6a 00                	push   0x0
c001d4dd:	6a 00                	push   0x0
c001d4df:	6a 00                	push   0x0
c001d4e1:	6a 00                	push   0x0
c001d4e3:	56                   	push   esi
c001d4e4:	53                   	push   ebx
c001d4e5:	e8 8a fc ff ff       	call   c001d174 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d4ea:	83 c4 1c             	add    esp,0x1c
c001d4ed:	6a 0c                	push   0xc
c001d4ef:	6a 00                	push   0x0
c001d4f1:	56                   	push   esi
c001d4f2:	e8 f9 2f fe ff       	call   c00004f0 <memset>
c001d4f7:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d4fc:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d501:	59                   	pop    ecx
c001d502:	58                   	pop    eax
c001d503:	6a 01                	push   0x1
c001d505:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d509:	50                   	push   eax
c001d50a:	6a 00                	push   0x0
c001d50c:	6a 12                	push   0x12
c001d50e:	56                   	push   esi
c001d50f:	53                   	push   ebx
c001d510:	e8 5f fc ff ff       	call   c001d174 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d515:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d519:	83 c4 20             	add    esp,0x20
c001d51c:	83 e0 7f             	and    eax,0x7f
c001d51f:	83 f8 70             	cmp    eax,0x70
c001d522:	74 15                	je     c001d539 <ATAPI::detectMedia()+0x77>
c001d524:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d52b:	75 0c                	jne    c001d539 <ATAPI::detectMedia()+0x77>
c001d52d:	83 ec 0c             	sub    esp,0xc
c001d530:	53                   	push   ebx
c001d531:	e8 80 ff ff ff       	call   c001d4b6 <ATAPI::diskInserted()>
c001d536:	83 c4 10             	add    esp,0x10
c001d539:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d53d:	83 e0 0f             	and    eax,0xf
c001d540:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d545:	0f b6 c0             	movzx  eax,al
c001d548:	75 19                	jne    c001d563 <ATAPI::detectMedia()+0xa1>
c001d54a:	83 f8 02             	cmp    eax,0x2
c001d54d:	75 14                	jne    c001d563 <ATAPI::detectMedia()+0xa1>
c001d54f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d556:	74 24                	je     c001d57c <ATAPI::detectMedia()+0xba>
c001d558:	83 ec 0c             	sub    esp,0xc
c001d55b:	53                   	push   ebx
c001d55c:	e8 d3 fe ff ff       	call   c001d434 <ATAPI::diskRemoved()>
c001d561:	eb 16                	jmp    c001d579 <ATAPI::detectMedia()+0xb7>
c001d563:	85 c0                	test   eax,eax
c001d565:	75 15                	jne    c001d57c <ATAPI::detectMedia()+0xba>
c001d567:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d56e:	75 0c                	jne    c001d57c <ATAPI::detectMedia()+0xba>
c001d570:	83 ec 0c             	sub    esp,0xc
c001d573:	53                   	push   ebx
c001d574:	e8 3d ff ff ff       	call   c001d4b6 <ATAPI::diskInserted()>
c001d579:	83 c4 10             	add    esp,0x10
c001d57c:	83 c4 24             	add    esp,0x24
c001d57f:	5b                   	pop    ebx
c001d580:	5e                   	pop    esi
c001d581:	c3                   	ret    

c001d582 <ATAPI::open(int, int, void*)>:
c001d582:	56                   	push   esi
c001d583:	53                   	push   ebx
c001d584:	50                   	push   eax
c001d585:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d589:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d58d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d591:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d597:	c1 e0 06             	shl    eax,0x6
c001d59a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d5a0:	01 d0                	add    eax,edx
c001d5a2:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d5a9:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d5af:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d5b6:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d5c0:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d5c7:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d5cd:	6a 04                	push   0x4
c001d5cf:	6a 0c                	push   0xc
c001d5d1:	51                   	push   ecx
c001d5d2:	52                   	push   edx
c001d5d3:	e8 20 e3 ff ff       	call   c001b8f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d5d8:	90                   	nop
c001d5d9:	90                   	nop
c001d5da:	6a 00                	push   0x0
c001d5dc:	6a 0c                	push   0xc
c001d5de:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d5e5:	50                   	push   eax
c001d5e6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d5ec:	e8 07 e3 ff ff       	call   c001b8f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d5f1:	83 c4 14             	add    esp,0x14
c001d5f4:	68 78 01 00 00       	push   0x178
c001d5f9:	e8 d5 a4 fe ff       	call   c0007ad3 <malloc>
c001d5fe:	83 c4 0c             	add    esp,0xc
c001d601:	6a 00                	push   0x0
c001d603:	68 ff ff ff 7f       	push   0x7fffffff
c001d608:	6a 00                	push   0x0
c001d60a:	6a 00                	push   0x0
c001d60c:	53                   	push   ebx
c001d60d:	68 ef 2f 02 c0       	push   0xc0022fef
c001d612:	89 c6                	mov    esi,eax
c001d614:	50                   	push   eax
c001d615:	e8 00 03 ff ff       	call   c000d91a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d61a:	83 c4 14             	add    esp,0x14
c001d61d:	56                   	push   esi
c001d61e:	e8 b7 03 ff ff       	call   c000d9da <LogicalDisk::assignDriveLetter()>
c001d623:	5a                   	pop    edx
c001d624:	59                   	pop    ecx
c001d625:	0f be c0             	movsx  eax,al
c001d628:	50                   	push   eax
c001d629:	68 40 2e 02 c0       	push   0xc0022e40
c001d62e:	e8 d7 d2 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001d633:	58                   	pop    eax
c001d634:	5a                   	pop    edx
c001d635:	56                   	push   esi
c001d636:	53                   	push   ebx
c001d637:	e8 30 f1 fe ff       	call   c000c76c <Device::addChild(Device*)>
c001d63c:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001d642:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d645:	e8 58 f5 fe ff       	call   c000cba2 <PhysicalDisk::startCache()>
c001d64a:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d651:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d654:	e8 69 fe ff ff       	call   c001d4c2 <ATAPI::detectMedia()>
c001d659:	83 c4 14             	add    esp,0x14
c001d65c:	31 c0                	xor    eax,eax
c001d65e:	5b                   	pop    ebx
c001d65f:	5e                   	pop    esi
c001d660:	c3                   	ret    
c001d661:	90                   	nop

c001d662 <ATAPI::read(unsigned long long, int, void*)>:
c001d662:	55                   	push   ebp
c001d663:	57                   	push   edi
c001d664:	56                   	push   esi
c001d665:	53                   	push   ebx
c001d666:	83 ec 1c             	sub    esp,0x1c
c001d669:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d66d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d671:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d675:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d67c:	74 3c                	je     c001d6ba <ATAPI::read(unsigned long long, int, void*)+0x58>
c001d67e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d682:	b9 03 00 00 00       	mov    ecx,0x3
c001d687:	fc                   	cld    
c001d688:	31 c0                	xor    eax,eax
c001d68a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d68c:	89 e8                	mov    eax,ebp
c001d68e:	0f ce                	bswap  esi
c001d690:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d694:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001d699:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001d69d:	50                   	push   eax
c001d69e:	50                   	push   eax
c001d69f:	55                   	push   ebp
c001d6a0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d6a4:	c1 e5 0b             	shl    ebp,0xb
c001d6a7:	6a 00                	push   0x0
c001d6a9:	55                   	push   ebp
c001d6aa:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d6ae:	50                   	push   eax
c001d6af:	53                   	push   ebx
c001d6b0:	e8 bf fa ff ff       	call   c001d174 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d6b5:	83 c4 20             	add    esp,0x20
c001d6b8:	eb 1a                	jmp    c001d6d4 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001d6ba:	83 ec 0c             	sub    esp,0xc
c001d6bd:	53                   	push   ebx
c001d6be:	e8 ff fd ff ff       	call   c001d4c2 <ATAPI::detectMedia()>
c001d6c3:	83 c4 10             	add    esp,0x10
c001d6c6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d6cd:	75 af                	jne    c001d67e <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001d6cf:	b8 02 00 00 00       	mov    eax,0x2
c001d6d4:	83 c4 1c             	add    esp,0x1c
c001d6d7:	5b                   	pop    ebx
c001d6d8:	5e                   	pop    esi
c001d6d9:	5f                   	pop    edi
c001d6da:	5d                   	pop    ebp
c001d6db:	c3                   	ret    

c001d6dc <SATA::close(int, int, void*)>:
c001d6dc:	83 ec 0c             	sub    esp,0xc
c001d6df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6e3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d6e9:	85 c0                	test   eax,eax
c001d6eb:	74 0c                	je     c001d6f9 <SATA::close(int, int, void*)+0x1d>
c001d6ed:	8b 10                	mov    edx,DWORD PTR [eax]
c001d6ef:	83 ec 0c             	sub    esp,0xc
c001d6f2:	50                   	push   eax
c001d6f3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d6f6:	83 c4 10             	add    esp,0x10
c001d6f9:	31 c0                	xor    eax,eax
c001d6fb:	83 c4 0c             	add    esp,0xc
c001d6fe:	c3                   	ret    
c001d6ff:	90                   	nop

c001d700 <SATA::powerSaving(PowerSavingLevel)>:
c001d700:	c3                   	ret    
c001d701:	90                   	nop

c001d702 <SATA::open(int, int, void*)>:
c001d702:	56                   	push   esi
c001d703:	53                   	push   ebx
c001d704:	50                   	push   eax
c001d705:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d709:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d70d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d717:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d71d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d721:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d72b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d735:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d73c:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d742:	e8 9b a6 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001d747:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d74d:	89 c6                	mov    esi,eax
c001d74f:	e8 8e a6 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001d754:	81 c6 00 10 00 00    	add    esi,0x1000
c001d75a:	39 c6                	cmp    esi,eax
c001d75c:	74 10                	je     c001d76e <SATA::open(int, int, void*)+0x6c>
c001d75e:	83 ec 0c             	sub    esp,0xc
c001d761:	68 88 2e 02 c0       	push   0xc0022e88
c001d766:	e8 9e 3b ff ff       	call   c0011309 <KePanic(char const*)>
c001d76b:	83 c4 10             	add    esp,0x10
c001d76e:	83 ec 0c             	sub    esp,0xc
c001d771:	6a 02                	push   0x2
c001d773:	e8 7d be fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001d778:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d77e:	6a 03                	push   0x3
c001d780:	50                   	push   eax
c001d781:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001d787:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001d78d:	e8 6c c5 fe ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001d792:	83 c4 14             	add    esp,0x14
c001d795:	53                   	push   ebx
c001d796:	e8 07 f4 fe ff       	call   c000cba2 <PhysicalDisk::startCache()>
c001d79b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d79e:	e8 4b 06 ff ff       	call   c000ddee <createPartitionsForDisk(PhysicalDisk*)>
c001d7a3:	83 c4 14             	add    esp,0x14
c001d7a6:	31 c0                	xor    eax,eax
c001d7a8:	5b                   	pop    ebx
c001d7a9:	5e                   	pop    esi
c001d7aa:	c3                   	ret    
c001d7ab:	90                   	nop

c001d7ac <SATA::SATA()>:
c001d7ac:	83 ec 0c             	sub    esp,0xc
c001d7af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7b3:	83 ec 04             	sub    esp,0x4
c001d7b6:	68 00 02 00 00       	push   0x200
c001d7bb:	68 9c 2e 02 c0       	push   0xc0022e9c
c001d7c0:	50                   	push   eax
c001d7c1:	e8 74 f3 fe ff       	call   c000cb3a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d7c6:	83 c4 10             	add    esp,0x10
c001d7c9:	ba 0c 2f 02 c0       	mov    edx,0xc0022f0c
c001d7ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7d2:	89 10                	mov    DWORD PTR [eax],edx
c001d7d4:	90                   	nop
c001d7d5:	83 c4 0c             	add    esp,0xc
c001d7d8:	c3                   	ret    
c001d7d9:	90                   	nop

c001d7da <SATA::access(unsigned long long, int, void*, bool)>:
c001d7da:	55                   	push   ebp
c001d7db:	57                   	push   edi
c001d7dc:	56                   	push   esi
c001d7dd:	53                   	push   ebx
c001d7de:	83 ec 2c             	sub    esp,0x2c
c001d7e1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d7e5:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001d7ea:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d7ee:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d7f2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d7f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d7fa:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d7fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d802:	7e 10                	jle    c001d814 <SATA::access(unsigned long long, int, void*, bool)+0x3a>
c001d804:	83 ec 0c             	sub    esp,0xc
c001d807:	68 ac 2e 02 c0       	push   0xc0022eac
c001d80c:	e8 f8 3a ff ff       	call   c0011309 <KePanic(char const*)>
c001d811:	83 c4 10             	add    esp,0x10
c001d814:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001d81a:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001d820:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d826:	89 e8                	mov    eax,ebp
c001d828:	c1 e0 07             	shl    eax,0x7
c001d82b:	01 d0                	add    eax,edx
c001d82d:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d837:	8d 45 02             	lea    eax,[ebp+0x2]
c001d83a:	51                   	push   ecx
c001d83b:	c1 e0 07             	shl    eax,0x7
c001d83e:	51                   	push   ecx
c001d83f:	01 d0                	add    eax,edx
c001d841:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001d845:	50                   	push   eax
c001d846:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001d84c:	e8 6b ec ff ff       	call   c001c4bc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d851:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d855:	83 c4 10             	add    esp,0x10
c001d858:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001d85d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d861:	0f 84 5b 01 00 00    	je     c001d9c2 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d867:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d86b:	c1 e0 09             	shl    eax,0x9
c001d86e:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001d873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d877:	74 0e                	je     c001d887 <SATA::access(unsigned long long, int, void*, bool)+0xad>
c001d879:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001d87f:	89 c1                	mov    ecx,eax
c001d881:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001d885:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d887:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d88b:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d891:	8d 45 02             	lea    eax,[ebp+0x2]
c001d894:	c1 e0 07             	shl    eax,0x7
c001d897:	01 d0                	add    eax,edx
c001d899:	8b 00                	mov    eax,DWORD PTR [eax]
c001d89b:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d8a1:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d8a7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d8ab:	c1 e1 05             	shl    ecx,0x5
c001d8ae:	01 c8                	add    eax,ecx
c001d8b0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d8b4:	83 e1 01             	and    ecx,0x1
c001d8b7:	89 ce                	mov    esi,ecx
c001d8b9:	8a 08                	mov    cl,BYTE PTR [eax]
c001d8bb:	c1 e6 06             	shl    esi,0x6
c001d8be:	83 e1 bf             	and    ecx,0xffffffbf
c001d8c1:	09 f1                	or     ecx,esi
c001d8c3:	88 08                	mov    BYTE PTR [eax],cl
c001d8c5:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d8c7:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001d8cd:	81 c9 05 00 01 00    	or     ecx,0x10005
c001d8d3:	89 08                	mov    DWORD PTR [eax],ecx
c001d8d5:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d8db:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001d8e1:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001d8e7:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001d8ea:	50                   	push   eax
c001d8eb:	68 90 00 00 00       	push   0x90
c001d8f0:	6a 00                	push   0x0
c001d8f2:	56                   	push   esi
c001d8f3:	e8 f8 2b fe ff       	call   c00004f0 <memset>
c001d8f8:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d8fe:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001d904:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d908:	83 c4 10             	add    esp,0x10
c001d90b:	48                   	dec    eax
c001d90c:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d911:	89 c1                	mov    ecx,eax
c001d913:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001d919:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d91e:	09 c8                	or     eax,ecx
c001d920:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001d926:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001d92c:	83 c8 80             	or     eax,0xffffff80
c001d92f:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001d935:	66 8b 06             	mov    ax,WORD PTR [esi]
c001d938:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d93c:	25 00 7f 00 00       	and    eax,0x7f00
c001d941:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d946:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001d94b:	66 89 06             	mov    WORD PTR [esi],ax
c001d94e:	b0 35                	mov    al,0x35
c001d950:	75 02                	jne    c001d954 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001d952:	b0 25                	mov    al,0x25
c001d954:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001d957:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d95b:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001d95f:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001d963:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d967:	c1 e8 10             	shr    eax,0x10
c001d96a:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001d96d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d971:	c1 e8 18             	shr    eax,0x18
c001d974:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001d977:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001d97b:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001d97e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d982:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001d985:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d989:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001d98d:	89 ee                	mov    esi,ebp
c001d98f:	31 c0                	xor    eax,eax
c001d991:	c1 e6 07             	shl    esi,0x7
c001d994:	01 d6                	add    esi,edx
c001d996:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001d99c:	80 e1 88             	and    cl,0x88
c001d99f:	74 0a                	je     c001d9ab <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001d9a1:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d9a6:	74 0a                	je     c001d9b2 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001d9a8:	40                   	inc    eax
c001d9a9:	eb eb                	jmp    c001d996 <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001d9ab:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d9b0:	75 17                	jne    c001d9c9 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001d9b2:	83 ec 0c             	sub    esp,0xc
c001d9b5:	68 e5 2e 02 c0       	push   0xc0022ee5
c001d9ba:	e8 4b cf fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001d9bf:	83 c4 10             	add    esp,0x10
c001d9c2:	b8 01 00 00 00       	mov    eax,0x1
c001d9c7:	eb 5b                	jmp    c001da24 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001d9c9:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001d9cd:	c1 e5 07             	shl    ebp,0x7
c001d9d0:	b8 01 00 00 00       	mov    eax,0x1
c001d9d5:	01 ea                	add    edx,ebp
c001d9d7:	d3 e0                	shl    eax,cl
c001d9d9:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001d9df:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001d9e5:	85 c8                	test   eax,ecx
c001d9e7:	74 16                	je     c001d9ff <SATA::access(unsigned long long, int, void*, bool)+0x225>
c001d9e9:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001d9ef:	0f ba e1 1e          	bt     ecx,0x1e
c001d9f3:	73 ea                	jae    c001d9df <SATA::access(unsigned long long, int, void*, bool)+0x205>
c001d9f5:	83 ec 0c             	sub    esp,0xc
c001d9f8:	68 f3 2e 02 c0       	push   0xc0022ef3
c001d9fd:	eb bb                	jmp    c001d9ba <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001d9ff:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001da05:	0f ba e0 1e          	bt     eax,0x1e
c001da09:	72 b7                	jb     c001d9c2 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001da0b:	31 c0                	xor    eax,eax
c001da0d:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001da12:	75 10                	jne    c001da24 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001da14:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001da1a:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001da1e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001da22:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001da24:	83 c4 2c             	add    esp,0x2c
c001da27:	5b                   	pop    ebx
c001da28:	5e                   	pop    esi
c001da29:	5f                   	pop    edi
c001da2a:	5d                   	pop    ebp
c001da2b:	c3                   	ret    

c001da2c <SATA::read(unsigned long long, int, void*)>:
c001da2c:	55                   	push   ebp
c001da2d:	57                   	push   edi
c001da2e:	56                   	push   esi
c001da2f:	be 04 00 00 00       	mov    esi,0x4
c001da34:	53                   	push   ebx
c001da35:	83 ec 0c             	sub    esp,0xc
c001da38:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001da3c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001da40:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001da44:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001da48:	8d 7b ff             	lea    edi,[ebx-0x1]
c001da4b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001da51:	0f 87 1a 02 00 00    	ja     c001dc71 <SATA::read(unsigned long long, int, void*)+0x245>
c001da57:	85 c9                	test   ecx,ecx
c001da59:	be 06 00 00 00       	mov    esi,0x6
c001da5e:	0f 84 0d 02 00 00    	je     c001dc71 <SATA::read(unsigned long long, int, void*)+0x245>
c001da64:	56                   	push   esi
c001da65:	56                   	push   esi
c001da66:	6a 00                	push   0x0
c001da68:	51                   	push   ecx
c001da69:	53                   	push   ebx
c001da6a:	52                   	push   edx
c001da6b:	50                   	push   eax
c001da6c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001da70:	e8 65 fd ff ff       	call   c001d7da <SATA::access(unsigned long long, int, void*, bool)>
c001da75:	83 c4 20             	add    esp,0x20
c001da78:	85 c0                	test   eax,eax
c001da7a:	89 c6                	mov    esi,eax
c001da7c:	0f 85 ea 01 00 00    	jne    c001dc6c <SATA::read(unsigned long long, int, void*)+0x240>
c001da82:	50                   	push   eax
c001da83:	50                   	push   eax
c001da84:	6a 0f                	push   0xf
c001da86:	6a 00                	push   0x0
c001da88:	01 1d b4 a0 02 c0    	add    DWORD PTR ds:0xc002a0b4,ebx
c001da8e:	bb 0a 00 00 00       	mov    ebx,0xa
c001da93:	e8 7d f2 ff ff       	call   c001cd15 <combineColours(unsigned char, unsigned char)>
c001da98:	5a                   	pop    edx
c001da99:	59                   	pop    ecx
c001da9a:	b9 10 27 00 00       	mov    ecx,0x2710
c001da9f:	0f b6 c0             	movzx  eax,al
c001daa2:	50                   	push   eax
c001daa3:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001daa8:	99                   	cdq    
c001daa9:	f7 f9                	idiv   ecx
c001daab:	99                   	cdq    
c001daac:	f7 fb                	idiv   ebx
c001daae:	8d 42 30             	lea    eax,[edx+0x30]
c001dab1:	0f b6 c0             	movzx  eax,al
c001dab4:	50                   	push   eax
c001dab5:	e8 4a f2 ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001daba:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001dac0:	5f                   	pop    edi
c001dac1:	5d                   	pop    ebp
c001dac2:	bd e8 03 00 00       	mov    ebp,0x3e8
c001dac7:	6a 0f                	push   0xf
c001dac9:	6a 00                	push   0x0
c001dacb:	e8 45 f2 ff ff       	call   c001cd15 <combineColours(unsigned char, unsigned char)>
c001dad0:	5a                   	pop    edx
c001dad1:	59                   	pop    ecx
c001dad2:	0f b6 c0             	movzx  eax,al
c001dad5:	50                   	push   eax
c001dad6:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dadb:	99                   	cdq    
c001dadc:	f7 fd                	idiv   ebp
c001dade:	99                   	cdq    
c001dadf:	f7 fb                	idiv   ebx
c001dae1:	8d 42 30             	lea    eax,[edx+0x30]
c001dae4:	0f b6 c0             	movzx  eax,al
c001dae7:	50                   	push   eax
c001dae8:	e8 17 f2 ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001daed:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001daf3:	5f                   	pop    edi
c001daf4:	bf 64 00 00 00       	mov    edi,0x64
c001daf9:	58                   	pop    eax
c001dafa:	6a 0f                	push   0xf
c001dafc:	6a 00                	push   0x0
c001dafe:	e8 12 f2 ff ff       	call   c001cd15 <combineColours(unsigned char, unsigned char)>
c001db03:	5a                   	pop    edx
c001db04:	59                   	pop    ecx
c001db05:	0f b6 c0             	movzx  eax,al
c001db08:	50                   	push   eax
c001db09:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001db0e:	99                   	cdq    
c001db0f:	f7 ff                	idiv   edi
c001db11:	99                   	cdq    
c001db12:	f7 fb                	idiv   ebx
c001db14:	8d 42 30             	lea    eax,[edx+0x30]
c001db17:	0f b6 c0             	movzx  eax,al
c001db1a:	50                   	push   eax
c001db1b:	e8 e4 f1 ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001db20:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001db26:	58                   	pop    eax
c001db27:	5a                   	pop    edx
c001db28:	6a 0f                	push   0xf
c001db2a:	6a 00                	push   0x0
c001db2c:	e8 e4 f1 ff ff       	call   c001cd15 <combineColours(unsigned char, unsigned char)>
c001db31:	59                   	pop    ecx
c001db32:	5a                   	pop    edx
c001db33:	0f b6 c0             	movzx  eax,al
c001db36:	50                   	push   eax
c001db37:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001db3c:	99                   	cdq    
c001db3d:	f7 fb                	idiv   ebx
c001db3f:	99                   	cdq    
c001db40:	f7 fb                	idiv   ebx
c001db42:	8d 42 30             	lea    eax,[edx+0x30]
c001db45:	0f b6 c0             	movzx  eax,al
c001db48:	50                   	push   eax
c001db49:	e8 b6 f1 ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001db4e:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001db54:	59                   	pop    ecx
c001db55:	58                   	pop    eax
c001db56:	6a 0f                	push   0xf
c001db58:	6a 00                	push   0x0
c001db5a:	e8 b6 f1 ff ff       	call   c001cd15 <combineColours(unsigned char, unsigned char)>
c001db5f:	5a                   	pop    edx
c001db60:	59                   	pop    ecx
c001db61:	0f b6 c0             	movzx  eax,al
c001db64:	50                   	push   eax
c001db65:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001db6a:	99                   	cdq    
c001db6b:	f7 fb                	idiv   ebx
c001db6d:	83 c2 30             	add    edx,0x30
c001db70:	0f b6 d2             	movzx  edx,dl
c001db73:	52                   	push   edx
c001db74:	e8 8b f1 ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001db79:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001db7f:	58                   	pop    eax
c001db80:	5a                   	pop    edx
c001db81:	6a 0f                	push   0xf
c001db83:	6a 00                	push   0x0
c001db85:	e8 8b f1 ff ff       	call   c001cd15 <combineColours(unsigned char, unsigned char)>
c001db8a:	59                   	pop    ecx
c001db8b:	b9 10 27 00 00       	mov    ecx,0x2710
c001db90:	5a                   	pop    edx
c001db91:	0f b6 c0             	movzx  eax,al
c001db94:	50                   	push   eax
c001db95:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001db9a:	99                   	cdq    
c001db9b:	f7 f9                	idiv   ecx
c001db9d:	99                   	cdq    
c001db9e:	f7 fb                	idiv   ebx
c001dba0:	8d 42 30             	lea    eax,[edx+0x30]
c001dba3:	0f b6 c0             	movzx  eax,al
c001dba6:	50                   	push   eax
c001dba7:	e8 58 f1 ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001dbac:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001dbb2:	59                   	pop    ecx
c001dbb3:	58                   	pop    eax
c001dbb4:	6a 0f                	push   0xf
c001dbb6:	6a 00                	push   0x0
c001dbb8:	e8 58 f1 ff ff       	call   c001cd15 <combineColours(unsigned char, unsigned char)>
c001dbbd:	5a                   	pop    edx
c001dbbe:	59                   	pop    ecx
c001dbbf:	0f b6 c0             	movzx  eax,al
c001dbc2:	50                   	push   eax
c001dbc3:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dbc8:	99                   	cdq    
c001dbc9:	f7 fd                	idiv   ebp
c001dbcb:	99                   	cdq    
c001dbcc:	f7 fb                	idiv   ebx
c001dbce:	8d 42 30             	lea    eax,[edx+0x30]
c001dbd1:	0f b6 c0             	movzx  eax,al
c001dbd4:	50                   	push   eax
c001dbd5:	e8 2a f1 ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001dbda:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001dbe0:	5d                   	pop    ebp
c001dbe1:	58                   	pop    eax
c001dbe2:	6a 0f                	push   0xf
c001dbe4:	6a 00                	push   0x0
c001dbe6:	e8 2a f1 ff ff       	call   c001cd15 <combineColours(unsigned char, unsigned char)>
c001dbeb:	5a                   	pop    edx
c001dbec:	59                   	pop    ecx
c001dbed:	0f b6 c0             	movzx  eax,al
c001dbf0:	50                   	push   eax
c001dbf1:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dbf6:	99                   	cdq    
c001dbf7:	f7 ff                	idiv   edi
c001dbf9:	99                   	cdq    
c001dbfa:	f7 fb                	idiv   ebx
c001dbfc:	8d 42 30             	lea    eax,[edx+0x30]
c001dbff:	0f b6 c0             	movzx  eax,al
c001dc02:	50                   	push   eax
c001dc03:	e8 fc f0 ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001dc08:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001dc0e:	5f                   	pop    edi
c001dc0f:	5d                   	pop    ebp
c001dc10:	6a 0f                	push   0xf
c001dc12:	6a 00                	push   0x0
c001dc14:	e8 fc f0 ff ff       	call   c001cd15 <combineColours(unsigned char, unsigned char)>
c001dc19:	5a                   	pop    edx
c001dc1a:	59                   	pop    ecx
c001dc1b:	0f b6 c0             	movzx  eax,al
c001dc1e:	50                   	push   eax
c001dc1f:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dc24:	99                   	cdq    
c001dc25:	f7 fb                	idiv   ebx
c001dc27:	99                   	cdq    
c001dc28:	f7 fb                	idiv   ebx
c001dc2a:	8d 42 30             	lea    eax,[edx+0x30]
c001dc2d:	0f b6 c0             	movzx  eax,al
c001dc30:	50                   	push   eax
c001dc31:	e8 ce f0 ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001dc36:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001dc3c:	5f                   	pop    edi
c001dc3d:	5d                   	pop    ebp
c001dc3e:	6a 0f                	push   0xf
c001dc40:	6a 00                	push   0x0
c001dc42:	e8 ce f0 ff ff       	call   c001cd15 <combineColours(unsigned char, unsigned char)>
c001dc47:	5a                   	pop    edx
c001dc48:	59                   	pop    ecx
c001dc49:	0f b6 c0             	movzx  eax,al
c001dc4c:	50                   	push   eax
c001dc4d:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dc52:	99                   	cdq    
c001dc53:	f7 fb                	idiv   ebx
c001dc55:	83 c2 30             	add    edx,0x30
c001dc58:	0f b6 d2             	movzx  edx,dl
c001dc5b:	52                   	push   edx
c001dc5c:	e8 a3 f0 ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001dc61:	83 c4 10             	add    esp,0x10
c001dc64:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001dc6a:	eb 05                	jmp    c001dc71 <SATA::read(unsigned long long, int, void*)+0x245>
c001dc6c:	be 01 00 00 00       	mov    esi,0x1
c001dc71:	83 c4 0c             	add    esp,0xc
c001dc74:	89 f0                	mov    eax,esi
c001dc76:	5b                   	pop    ebx
c001dc77:	5e                   	pop    esi
c001dc78:	5f                   	pop    edi
c001dc79:	5d                   	pop    ebp
c001dc7a:	c3                   	ret    
c001dc7b:	90                   	nop

c001dc7c <SATA::write(unsigned long long, int, void*)>:
c001dc7c:	55                   	push   ebp
c001dc7d:	57                   	push   edi
c001dc7e:	56                   	push   esi
c001dc7f:	53                   	push   ebx
c001dc80:	83 ec 0c             	sub    esp,0xc
c001dc83:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001dc87:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001dc8b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001dc8f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dc93:	8d 70 ff             	lea    esi,[eax-0x1]
c001dc96:	b8 04 00 00 00       	mov    eax,0x4
c001dc9b:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001dca1:	0f 87 2c 02 00 00    	ja     c001ded3 <SATA::write(unsigned long long, int, void*)+0x257>
c001dca7:	85 db                	test   ebx,ebx
c001dca9:	b8 06 00 00 00       	mov    eax,0x6
c001dcae:	0f 84 1f 02 00 00    	je     c001ded3 <SATA::write(unsigned long long, int, void*)+0x257>
c001dcb4:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001dcb8:	c1 e6 09             	shl    esi,0x9
c001dcbb:	01 de                	add    esi,ebx
c001dcbd:	50                   	push   eax
c001dcbe:	89 d7                	mov    edi,edx
c001dcc0:	50                   	push   eax
c001dcc1:	83 c7 01             	add    edi,0x1
c001dcc4:	6a 01                	push   0x1
c001dcc6:	89 cd                	mov    ebp,ecx
c001dcc8:	53                   	push   ebx
c001dcc9:	83 d5 00             	adc    ebp,0x0
c001dccc:	6a 01                	push   0x1
c001dcce:	81 c3 00 02 00 00    	add    ebx,0x200
c001dcd4:	51                   	push   ecx
c001dcd5:	52                   	push   edx
c001dcd6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dcda:	e8 fb fa ff ff       	call   c001d7da <SATA::access(unsigned long long, int, void*, bool)>
c001dcdf:	83 c4 20             	add    esp,0x20
c001dce2:	39 f3                	cmp    ebx,esi
c001dce4:	89 fa                	mov    edx,edi
c001dce6:	89 e9                	mov    ecx,ebp
c001dce8:	75 d3                	jne    c001dcbd <SATA::write(unsigned long long, int, void*)+0x41>
c001dcea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001dcee:	bd 10 27 00 00       	mov    ebp,0x2710
c001dcf3:	bb 0a 00 00 00       	mov    ebx,0xa
c001dcf8:	01 05 b0 a0 02 c0    	add    DWORD PTR ds:0xc002a0b0,eax
c001dcfe:	50                   	push   eax
c001dcff:	50                   	push   eax
c001dd00:	6a 0f                	push   0xf
c001dd02:	6a 00                	push   0x0
c001dd04:	e8 0c f0 ff ff       	call   c001cd15 <combineColours(unsigned char, unsigned char)>
c001dd09:	5a                   	pop    edx
c001dd0a:	59                   	pop    ecx
c001dd0b:	0f b6 c0             	movzx  eax,al
c001dd0e:	50                   	push   eax
c001dd0f:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dd14:	99                   	cdq    
c001dd15:	f7 fd                	idiv   ebp
c001dd17:	99                   	cdq    
c001dd18:	f7 fb                	idiv   ebx
c001dd1a:	8d 42 30             	lea    eax,[edx+0x30]
c001dd1d:	0f b6 c0             	movzx  eax,al
c001dd20:	50                   	push   eax
c001dd21:	e8 de ef ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001dd26:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001dd2c:	5e                   	pop    esi
c001dd2d:	5f                   	pop    edi
c001dd2e:	bf e8 03 00 00       	mov    edi,0x3e8
c001dd33:	6a 0f                	push   0xf
c001dd35:	6a 00                	push   0x0
c001dd37:	e8 d9 ef ff ff       	call   c001cd15 <combineColours(unsigned char, unsigned char)>
c001dd3c:	5a                   	pop    edx
c001dd3d:	59                   	pop    ecx
c001dd3e:	0f b6 c0             	movzx  eax,al
c001dd41:	50                   	push   eax
c001dd42:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dd47:	99                   	cdq    
c001dd48:	f7 ff                	idiv   edi
c001dd4a:	99                   	cdq    
c001dd4b:	f7 fb                	idiv   ebx
c001dd4d:	8d 42 30             	lea    eax,[edx+0x30]
c001dd50:	0f b6 c0             	movzx  eax,al
c001dd53:	50                   	push   eax
c001dd54:	e8 ab ef ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001dd59:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001dd5f:	5e                   	pop    esi
c001dd60:	be 64 00 00 00       	mov    esi,0x64
c001dd65:	58                   	pop    eax
c001dd66:	6a 0f                	push   0xf
c001dd68:	6a 00                	push   0x0
c001dd6a:	e8 a6 ef ff ff       	call   c001cd15 <combineColours(unsigned char, unsigned char)>
c001dd6f:	5a                   	pop    edx
c001dd70:	59                   	pop    ecx
c001dd71:	0f b6 c0             	movzx  eax,al
c001dd74:	50                   	push   eax
c001dd75:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dd7a:	99                   	cdq    
c001dd7b:	f7 fe                	idiv   esi
c001dd7d:	99                   	cdq    
c001dd7e:	f7 fb                	idiv   ebx
c001dd80:	8d 42 30             	lea    eax,[edx+0x30]
c001dd83:	0f b6 c0             	movzx  eax,al
c001dd86:	50                   	push   eax
c001dd87:	e8 78 ef ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001dd8c:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001dd92:	58                   	pop    eax
c001dd93:	5a                   	pop    edx
c001dd94:	6a 0f                	push   0xf
c001dd96:	6a 00                	push   0x0
c001dd98:	e8 78 ef ff ff       	call   c001cd15 <combineColours(unsigned char, unsigned char)>
c001dd9d:	59                   	pop    ecx
c001dd9e:	5a                   	pop    edx
c001dd9f:	0f b6 c0             	movzx  eax,al
c001dda2:	50                   	push   eax
c001dda3:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dda8:	99                   	cdq    
c001dda9:	f7 fb                	idiv   ebx
c001ddab:	99                   	cdq    
c001ddac:	f7 fb                	idiv   ebx
c001ddae:	8d 42 30             	lea    eax,[edx+0x30]
c001ddb1:	0f b6 c0             	movzx  eax,al
c001ddb4:	50                   	push   eax
c001ddb5:	e8 4a ef ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001ddba:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001ddc0:	59                   	pop    ecx
c001ddc1:	58                   	pop    eax
c001ddc2:	6a 0f                	push   0xf
c001ddc4:	6a 00                	push   0x0
c001ddc6:	e8 4a ef ff ff       	call   c001cd15 <combineColours(unsigned char, unsigned char)>
c001ddcb:	5a                   	pop    edx
c001ddcc:	59                   	pop    ecx
c001ddcd:	0f b6 c0             	movzx  eax,al
c001ddd0:	50                   	push   eax
c001ddd1:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ddd6:	99                   	cdq    
c001ddd7:	f7 fb                	idiv   ebx
c001ddd9:	83 c2 30             	add    edx,0x30
c001dddc:	0f b6 d2             	movzx  edx,dl
c001dddf:	52                   	push   edx
c001dde0:	e8 1f ef ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001dde5:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001ddeb:	58                   	pop    eax
c001ddec:	5a                   	pop    edx
c001dded:	6a 0f                	push   0xf
c001ddef:	6a 00                	push   0x0
c001ddf1:	e8 1f ef ff ff       	call   c001cd15 <combineColours(unsigned char, unsigned char)>
c001ddf6:	59                   	pop    ecx
c001ddf7:	5a                   	pop    edx
c001ddf8:	0f b6 c0             	movzx  eax,al
c001ddfb:	50                   	push   eax
c001ddfc:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001de01:	99                   	cdq    
c001de02:	f7 fd                	idiv   ebp
c001de04:	99                   	cdq    
c001de05:	f7 fb                	idiv   ebx
c001de07:	8d 42 30             	lea    eax,[edx+0x30]
c001de0a:	0f b6 c0             	movzx  eax,al
c001de0d:	50                   	push   eax
c001de0e:	e8 f1 ee ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001de13:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001de19:	59                   	pop    ecx
c001de1a:	5d                   	pop    ebp
c001de1b:	6a 0f                	push   0xf
c001de1d:	6a 00                	push   0x0
c001de1f:	e8 f1 ee ff ff       	call   c001cd15 <combineColours(unsigned char, unsigned char)>
c001de24:	5a                   	pop    edx
c001de25:	59                   	pop    ecx
c001de26:	0f b6 c0             	movzx  eax,al
c001de29:	50                   	push   eax
c001de2a:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001de2f:	99                   	cdq    
c001de30:	f7 ff                	idiv   edi
c001de32:	99                   	cdq    
c001de33:	f7 fb                	idiv   ebx
c001de35:	8d 42 30             	lea    eax,[edx+0x30]
c001de38:	0f b6 c0             	movzx  eax,al
c001de3b:	50                   	push   eax
c001de3c:	e8 c3 ee ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001de41:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001de47:	5f                   	pop    edi
c001de48:	5d                   	pop    ebp
c001de49:	6a 0f                	push   0xf
c001de4b:	6a 00                	push   0x0
c001de4d:	e8 c3 ee ff ff       	call   c001cd15 <combineColours(unsigned char, unsigned char)>
c001de52:	5a                   	pop    edx
c001de53:	59                   	pop    ecx
c001de54:	0f b6 c0             	movzx  eax,al
c001de57:	50                   	push   eax
c001de58:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001de5d:	99                   	cdq    
c001de5e:	f7 fe                	idiv   esi
c001de60:	99                   	cdq    
c001de61:	f7 fb                	idiv   ebx
c001de63:	8d 42 30             	lea    eax,[edx+0x30]
c001de66:	0f b6 c0             	movzx  eax,al
c001de69:	50                   	push   eax
c001de6a:	e8 95 ee ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001de6f:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001de75:	5e                   	pop    esi
c001de76:	5f                   	pop    edi
c001de77:	6a 0f                	push   0xf
c001de79:	6a 00                	push   0x0
c001de7b:	e8 95 ee ff ff       	call   c001cd15 <combineColours(unsigned char, unsigned char)>
c001de80:	5d                   	pop    ebp
c001de81:	5a                   	pop    edx
c001de82:	0f b6 c0             	movzx  eax,al
c001de85:	50                   	push   eax
c001de86:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001de8b:	99                   	cdq    
c001de8c:	f7 fb                	idiv   ebx
c001de8e:	99                   	cdq    
c001de8f:	f7 fb                	idiv   ebx
c001de91:	8d 42 30             	lea    eax,[edx+0x30]
c001de94:	0f b6 c0             	movzx  eax,al
c001de97:	50                   	push   eax
c001de98:	e8 67 ee ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001de9d:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001dea3:	59                   	pop    ecx
c001dea4:	5e                   	pop    esi
c001dea5:	6a 0f                	push   0xf
c001dea7:	6a 00                	push   0x0
c001dea9:	e8 67 ee ff ff       	call   c001cd15 <combineColours(unsigned char, unsigned char)>
c001deae:	5f                   	pop    edi
c001deaf:	5d                   	pop    ebp
c001deb0:	0f b6 c0             	movzx  eax,al
c001deb3:	50                   	push   eax
c001deb4:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001deb9:	99                   	cdq    
c001deba:	f7 fb                	idiv   ebx
c001debc:	83 c2 30             	add    edx,0x30
c001debf:	0f b6 d2             	movzx  edx,dl
c001dec2:	52                   	push   edx
c001dec3:	e8 3c ee ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001dec8:	83 c4 10             	add    esp,0x10
c001decb:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001ded1:	31 c0                	xor    eax,eax
c001ded3:	83 c4 0c             	add    esp,0xc
c001ded6:	5b                   	pop    ebx
c001ded7:	5e                   	pop    esi
c001ded8:	5f                   	pop    edi
c001ded9:	5d                   	pop    ebp
c001deda:	c3                   	ret    
c001dedb:	90                   	nop

c001dedc <SATAPI::write(unsigned long long, int, void*)>:
c001dedc:	b8 03 00 00 00       	mov    eax,0x3
c001dee1:	c3                   	ret    

c001dee2 <SATAPI::close(int, int, void*)>:
c001dee2:	83 ec 0c             	sub    esp,0xc
c001dee5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dee9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001deef:	85 c0                	test   eax,eax
c001def1:	74 0c                	je     c001deff <SATAPI::close(int, int, void*)+0x1d>
c001def3:	8b 10                	mov    edx,DWORD PTR [eax]
c001def5:	83 ec 0c             	sub    esp,0xc
c001def8:	50                   	push   eax
c001def9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001defc:	83 c4 10             	add    esp,0x10
c001deff:	31 c0                	xor    eax,eax
c001df01:	83 c4 0c             	add    esp,0xc
c001df04:	c3                   	ret    
c001df05:	90                   	nop

c001df06 <SATAPI::SATAPI()>:
c001df06:	83 ec 0c             	sub    esp,0xc
c001df09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df0d:	83 ec 04             	sub    esp,0x4
c001df10:	68 00 08 00 00       	push   0x800
c001df15:	68 3c 2f 02 c0       	push   0xc0022f3c
c001df1a:	50                   	push   eax
c001df1b:	e8 1a ec fe ff       	call   c000cb3a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001df20:	83 c4 10             	add    esp,0x10
c001df23:	ba 30 30 02 c0       	mov    edx,0xc0023030
c001df28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df2c:	89 10                	mov    DWORD PTR [eax],edx
c001df2e:	90                   	nop
c001df2f:	83 c4 0c             	add    esp,0xc
c001df32:	c3                   	ret    
c001df33:	90                   	nop

c001df34 <SATAPI::diskRemoved()>:
c001df34:	c3                   	ret    
c001df35:	90                   	nop

c001df36 <SATAPI::diskInserted()>:
c001df36:	83 ec 18             	sub    esp,0x18
c001df39:	68 48 2f 02 c0       	push   0xc0022f48
c001df3e:	e8 c7 c9 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001df43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df47:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001df4e:	83 c4 1c             	add    esp,0x1c
c001df51:	c3                   	ret    

c001df52 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001df52:	55                   	push   ebp
c001df53:	57                   	push   edi
c001df54:	56                   	push   esi
c001df55:	53                   	push   ebx
c001df56:	83 ec 34             	sub    esp,0x34
c001df59:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001df5d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001df65:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001df69:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001df6d:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001df73:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001df79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001df7d:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001df83:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001df87:	83 c0 02             	add    eax,0x2
c001df8a:	c1 e0 07             	shl    eax,0x7
c001df8d:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001df91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001df95:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001df99:	c1 e0 07             	shl    eax,0x7
c001df9c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001dfa0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001dfa4:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001dfae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001dfb2:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001dfb8:	e8 ff e4 ff ff       	call   c001c4bc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001dfbd:	83 c4 10             	add    esp,0x10
c001dfc0:	89 c2                	mov    edx,eax
c001dfc2:	b8 01 00 00 00       	mov    eax,0x1
c001dfc7:	83 fa ff             	cmp    edx,0xffffffff
c001dfca:	0f 84 5f 02 00 00    	je     c001e22f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001dfd0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001dfd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dfd8:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001dfde:	8b 00                	mov    eax,DWORD PTR [eax]
c001dfe0:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001dfe6:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001dfec:	89 d1                	mov    ecx,edx
c001dfee:	c1 e1 05             	shl    ecx,0x5
c001dff1:	01 c8                	add    eax,ecx
c001dff3:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dff5:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001dffb:	81 c9 25 00 01 00    	or     ecx,0x10025
c001e001:	89 08                	mov    DWORD PTR [eax],ecx
c001e003:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e009:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001e00f:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001e015:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001e018:	50                   	push   eax
c001e019:	68 90 00 00 00       	push   0x90
c001e01e:	6a 00                	push   0x0
c001e020:	53                   	push   ebx
c001e021:	e8 ca 24 fe ff       	call   c00004f0 <memset>
c001e026:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e029:	b9 0c 00 00 00       	mov    ecx,0xc
c001e02e:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e032:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e034:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e03a:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e03e:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e042:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e048:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e04c:	48                   	dec    eax
c001e04d:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e052:	89 c1                	mov    ecx,eax
c001e054:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e05a:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e05f:	09 c8                	or     eax,ecx
c001e061:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e067:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e06d:	83 c8 80             	or     eax,0xffffff80
c001e070:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e076:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e079:	25 00 7f 00 00       	and    eax,0x7f00
c001e07e:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e083:	66 89 03             	mov    WORD PTR [ebx],ax
c001e086:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e08a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001e08e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e092:	c1 e8 10             	shr    eax,0x10
c001e095:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e098:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e09c:	c1 e8 18             	shr    eax,0x18
c001e09f:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001e0a2:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e0a6:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e0a9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e0ad:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e0b0:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e0b4:	83 c4 10             	add    esp,0x10
c001e0b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e0bb:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e0bf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e0c3:	31 c0                	xor    eax,eax
c001e0c5:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001e0cb:	80 e1 88             	and    cl,0x88
c001e0ce:	74 0a                	je     c001e0da <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001e0d0:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e0d5:	74 0a                	je     c001e0e1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c001e0d7:	40                   	inc    eax
c001e0d8:	eb eb                	jmp    c001e0c5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c001e0da:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e0df:	75 43                	jne    c001e124 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c001e0e1:	83 ec 0c             	sub    esp,0xc
c001e0e4:	68 60 2f 02 c0       	push   0xc0022f60
c001e0e9:	e8 1c c8 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e0ee:	58                   	pop    eax
c001e0ef:	5a                   	pop    edx
c001e0f0:	68 75 2f 02 c0       	push   0xc0022f75
c001e0f5:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c001e0fb:	e8 ac a9 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001e100:	59                   	pop    ecx
c001e101:	5b                   	pop    ebx
c001e102:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e106:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e10c:	e8 45 e4 ff ff       	call   c001c556 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e111:	5e                   	pop    esi
c001e112:	5f                   	pop    edi
c001e113:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e117:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e11d:	e8 14 e4 ff ff       	call   c001c536 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e122:	eb 48                	jmp    c001e16c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c001e124:	b8 01 00 00 00       	mov    eax,0x1
c001e129:	88 d1                	mov    cl,dl
c001e12b:	d3 e0                	shl    eax,cl
c001e12d:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c001e132:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c001e138:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e13c:	89 c7                	mov    edi,eax
c001e13e:	c1 e3 07             	shl    ebx,0x7
c001e141:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001e145:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001e14b:	85 c7                	test   edi,eax
c001e14d:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001e153:	0f 84 a3 00 00 00    	je     c001e1fc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c001e159:	0f ba e0 1e          	bt     eax,0x1e
c001e15d:	73 1a                	jae    c001e179 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c001e15f:	83 ec 0c             	sub    esp,0xc
c001e162:	68 87 2f 02 c0       	push   0xc0022f87
c001e167:	e8 9e c7 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e16c:	83 c4 10             	add    esp,0x10
c001e16f:	b8 01 00 00 00       	mov    eax,0x1
c001e174:	e9 b6 00 00 00       	jmp    c001e22f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001e179:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c001e17f:	83 f8 0d             	cmp    eax,0xd
c001e182:	77 0a                	ja     c001e18e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c001e184:	83 ec 0c             	sub    esp,0xc
c001e187:	68 c8 00 00 00       	push   0xc8
c001e18c:	eb 28                	jmp    c001e1b6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e18e:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c001e194:	83 f8 0d             	cmp    eax,0xd
c001e197:	77 0a                	ja     c001e1a3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c001e199:	83 ec 0c             	sub    esp,0xc
c001e19c:	68 58 02 00 00       	push   0x258
c001e1a1:	eb 13                	jmp    c001e1b6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e1a3:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c001e1a9:	83 f8 06             	cmp    eax,0x6
c001e1ac:	77 10                	ja     c001e1be <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c001e1ae:	83 ec 0c             	sub    esp,0xc
c001e1b1:	68 dc 05 00 00       	push   0x5dc
c001e1b6:	e8 69 7d ff ff       	call   c0015f24 <milliTenthSleep(unsigned int)>
c001e1bb:	83 c4 10             	add    esp,0x10
c001e1be:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e1c2:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e1c5:	75 06                	jne    c001e1cd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c001e1c7:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e1cb:	74 15                	je     c001e1e2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e1cd:	83 fe 06             	cmp    esi,0x6
c001e1d0:	77 10                	ja     c001e1e2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e1d2:	83 ec 0c             	sub    esp,0xc
c001e1d5:	68 c4 09 00 00       	push   0x9c4
c001e1da:	e8 45 7d ff ff       	call   c0015f24 <milliTenthSleep(unsigned int)>
c001e1df:	83 c4 10             	add    esp,0x10
c001e1e2:	46                   	inc    esi
c001e1e3:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c001e1e9:	0f 85 56 ff ff ff    	jne    c001e145 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c001e1ef:	83 ec 0c             	sub    esp,0xc
c001e1f2:	68 9a 2f 02 c0       	push   0xc0022f9a
c001e1f7:	e9 6b ff ff ff       	jmp    c001e167 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e1fc:	0f ba e0 1e          	bt     eax,0x1e
c001e200:	73 0d                	jae    c001e20f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c001e202:	83 ec 0c             	sub    esp,0xc
c001e205:	68 ae 2f 02 c0       	push   0xc0022fae
c001e20a:	e9 58 ff ff ff       	jmp    c001e167 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e20f:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e214:	74 17                	je     c001e22d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e216:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e21b:	74 10                	je     c001e22d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e21d:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e223:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e227:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e22b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e22d:	31 c0                	xor    eax,eax
c001e22f:	83 c4 2c             	add    esp,0x2c
c001e232:	5b                   	pop    ebx
c001e233:	5e                   	pop    esi
c001e234:	5f                   	pop    edi
c001e235:	5d                   	pop    ebp
c001e236:	c3                   	ret    
c001e237:	90                   	nop

c001e238 <SATAPI::eject()>:
c001e238:	57                   	push   edi
c001e239:	b9 03 00 00 00       	mov    ecx,0x3
c001e23e:	83 ec 18             	sub    esp,0x18
c001e241:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e245:	fc                   	cld    
c001e246:	31 c0                	xor    eax,eax
c001e248:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e24a:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e24f:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e254:	50                   	push   eax
c001e255:	6a 00                	push   0x0
c001e257:	6a 00                	push   0x0
c001e259:	6a 00                	push   0x0
c001e25b:	6a 00                	push   0x0
c001e25d:	6a 02                	push   0x2
c001e25f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e263:	50                   	push   eax
c001e264:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e268:	e8 e5 fc ff ff       	call   c001df52 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e26d:	83 c4 38             	add    esp,0x38
c001e270:	31 c0                	xor    eax,eax
c001e272:	5f                   	pop    edi
c001e273:	c3                   	ret    

c001e274 <SATAPI::detectMedia()>:
c001e274:	53                   	push   ebx
c001e275:	83 ec 14             	sub    esp,0x14
c001e278:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e27c:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e282:	e8 39 02 ff ff       	call   c000e4c0 <VCache::writeWriteBuffer()>
c001e287:	59                   	pop    ecx
c001e288:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e28e:	e8 1d 02 ff ff       	call   c000e4b0 <VCache::invalidateReadBuffer()>
c001e293:	c7 04 24 c3 2f 02 c0 	mov    DWORD PTR [esp],0xc0022fc3
c001e29a:	e8 6b c6 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e29f:	83 c4 10             	add    esp,0x10
c001e2a2:	31 c0                	xor    eax,eax
c001e2a4:	8b 14 85 80 88 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7780]
c001e2ab:	85 d2                	test   edx,edx
c001e2ad:	74 0f                	je     c001e2be <SATAPI::detectMedia()+0x4a>
c001e2af:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e2b5:	75 07                	jne    c001e2be <SATAPI::detectMedia()+0x4a>
c001e2b7:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e2be:	40                   	inc    eax
c001e2bf:	83 f8 1a             	cmp    eax,0x1a
c001e2c2:	75 e0                	jne    c001e2a4 <SATAPI::detectMedia()+0x30>
c001e2c4:	83 c4 08             	add    esp,0x8
c001e2c7:	5b                   	pop    ebx
c001e2c8:	c3                   	ret    
c001e2c9:	90                   	nop

c001e2ca <SATAPI::open(int, int, void*)>:
c001e2ca:	56                   	push   esi
c001e2cb:	53                   	push   ebx
c001e2cc:	51                   	push   ecx
c001e2cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e2d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e2d5:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e2df:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e2e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e2e9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e2f3:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e2fd:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e304:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e30a:	e8 d3 9a fe ff       	call   c0007de2 <Phys::allocatePage()>
c001e30f:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e315:	89 c6                	mov    esi,eax
c001e317:	e8 c6 9a fe ff       	call   c0007de2 <Phys::allocatePage()>
c001e31c:	81 c6 00 10 00 00    	add    esi,0x1000
c001e322:	39 c6                	cmp    esi,eax
c001e324:	74 10                	je     c001e336 <SATAPI::open(int, int, void*)+0x6c>
c001e326:	83 ec 0c             	sub    esp,0xc
c001e329:	68 d8 2f 02 c0       	push   0xc0022fd8
c001e32e:	e8 d6 2f ff ff       	call   c0011309 <KePanic(char const*)>
c001e333:	83 c4 10             	add    esp,0x10
c001e336:	83 ec 0c             	sub    esp,0xc
c001e339:	6a 02                	push   0x2
c001e33b:	e8 b5 b2 fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001e340:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e346:	6a 03                	push   0x3
c001e348:	50                   	push   eax
c001e349:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e34f:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001e355:	e8 a4 b9 fe ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001e35a:	83 c4 14             	add    esp,0x14
c001e35d:	68 78 01 00 00       	push   0x178
c001e362:	e8 6c 97 fe ff       	call   c0007ad3 <malloc>
c001e367:	83 c4 0c             	add    esp,0xc
c001e36a:	6a 00                	push   0x0
c001e36c:	68 ff ff ff 7f       	push   0x7fffffff
c001e371:	6a 00                	push   0x0
c001e373:	6a 00                	push   0x0
c001e375:	53                   	push   ebx
c001e376:	68 ee 2f 02 c0       	push   0xc0022fee
c001e37b:	89 c6                	mov    esi,eax
c001e37d:	50                   	push   eax
c001e37e:	e8 97 f5 fe ff       	call   c000d91a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e383:	83 c4 14             	add    esp,0x14
c001e386:	56                   	push   esi
c001e387:	e8 4e f6 fe ff       	call   c000d9da <LogicalDisk::assignDriveLetter()>
c001e38c:	5a                   	pop    edx
c001e38d:	59                   	pop    ecx
c001e38e:	0f be c0             	movsx  eax,al
c001e391:	50                   	push   eax
c001e392:	68 40 2e 02 c0       	push   0xc0022e40
c001e397:	e8 6e c5 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e39c:	58                   	pop    eax
c001e39d:	5a                   	pop    edx
c001e39e:	56                   	push   esi
c001e39f:	53                   	push   ebx
c001e3a0:	e8 c7 e3 fe ff       	call   c000c76c <Device::addChild(Device*)>
c001e3a5:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e3ab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e3ae:	e8 ef e7 fe ff       	call   c000cba2 <PhysicalDisk::startCache()>
c001e3b3:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e3ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e3bd:	e8 b2 fe ff ff       	call   c001e274 <SATAPI::detectMedia()>
c001e3c2:	83 c4 14             	add    esp,0x14
c001e3c5:	31 c0                	xor    eax,eax
c001e3c7:	5b                   	pop    ebx
c001e3c8:	5e                   	pop    esi
c001e3c9:	c3                   	ret    

c001e3ca <SATAPI::read(unsigned long long, int, void*)>:
c001e3ca:	55                   	push   ebp
c001e3cb:	57                   	push   edi
c001e3cc:	56                   	push   esi
c001e3cd:	53                   	push   ebx
c001e3ce:	83 ec 3c             	sub    esp,0x3c
c001e3d1:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001e3d5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e3d9:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001e3dd:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e3e1:	83 fd 04             	cmp    ebp,0x4
c001e3e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e3e8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e3ec:	7e 10                	jle    c001e3fe <SATAPI::read(unsigned long long, int, void*)+0x34>
c001e3ee:	83 ec 0c             	sub    esp,0xc
c001e3f1:	68 fc 2f 02 c0       	push   0xc0022ffc
c001e3f6:	e8 0e 2f ff ff       	call   c0011309 <KePanic(char const*)>
c001e3fb:	83 c4 10             	add    esp,0x10
c001e3fe:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e404:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e40a:	51                   	push   ecx
c001e40b:	50                   	push   eax
c001e40c:	83 c0 02             	add    eax,0x2
c001e40f:	c1 e0 07             	shl    eax,0x7
c001e412:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e418:	50                   	push   eax
c001e419:	52                   	push   edx
c001e41a:	e8 61 e1 ff ff       	call   c001c580 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e41f:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e423:	b9 03 00 00 00       	mov    ecx,0x3
c001e428:	fc                   	cld    
c001e429:	31 c0                	xor    eax,eax
c001e42b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e42d:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e432:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e437:	83 c4 0c             	add    esp,0xc
c001e43a:	6a 00                	push   0x0
c001e43c:	6a 00                	push   0x0
c001e43e:	6a 00                	push   0x0
c001e440:	6a 00                	push   0x0
c001e442:	6a 02                	push   0x2
c001e444:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e448:	50                   	push   eax
c001e449:	53                   	push   ebx
c001e44a:	e8 03 fb ff ff       	call   c001df52 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e44f:	83 c4 20             	add    esp,0x20
c001e452:	85 c0                	test   eax,eax
c001e454:	89 c6                	mov    esi,eax
c001e456:	75 46                	jne    c001e49e <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001e458:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e45c:	b9 03 00 00 00       	mov    ecx,0x3
c001e461:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e463:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e467:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e46c:	0f c8                	bswap  eax
c001e46e:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e472:	89 e8                	mov    eax,ebp
c001e474:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e478:	50                   	push   eax
c001e479:	55                   	push   ebp
c001e47a:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001e47e:	c1 e5 0b             	shl    ebp,0xb
c001e481:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e485:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e489:	55                   	push   ebp
c001e48a:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e48e:	50                   	push   eax
c001e48f:	53                   	push   ebx
c001e490:	e8 bd fa ff ff       	call   c001df52 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e495:	83 c4 20             	add    esp,0x20
c001e498:	85 c0                	test   eax,eax
c001e49a:	89 c6                	mov    esi,eax
c001e49c:	74 0c                	je     c001e4aa <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001e49e:	83 ec 0c             	sub    esp,0xc
c001e4a1:	53                   	push   ebx
c001e4a2:	e8 cd fd ff ff       	call   c001e274 <SATAPI::detectMedia()>
c001e4a7:	83 c4 10             	add    esp,0x10
c001e4aa:	83 c4 3c             	add    esp,0x3c
c001e4ad:	89 f0                	mov    eax,esi
c001e4af:	5b                   	pop    ebx
c001e4b0:	5e                   	pop    esi
c001e4b1:	5f                   	pop    edi
c001e4b2:	5d                   	pop    ebp
c001e4b3:	c3                   	ret    

c001e4b4 <IOAPIC::close(int, int, void*)>:
c001e4b4:	b8 00 00 00 00       	mov    eax,0x0
c001e4b9:	c3                   	ret    

c001e4ba <apicGetBase()>:
c001e4ba:	55                   	push   ebp
c001e4bb:	89 e5                	mov    ebp,esp
c001e4bd:	83 ec 18             	sub    esp,0x18
c001e4c0:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e4c5:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e4cb:	83 e0 08             	and    eax,0x8
c001e4ce:	0f b6 c0             	movzx  eax,al
c001e4d1:	85 c0                	test   eax,eax
c001e4d3:	75 07                	jne    c001e4dc <apicGetBase()+0x22>
c001e4d5:	b8 00 00 00 00       	mov    eax,0x0
c001e4da:	eb 21                	jmp    c001e4fd <apicGetBase()+0x43>
c001e4dc:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e4e1:	83 ec 08             	sub    esp,0x8
c001e4e4:	6a 1b                	push   0x1b
c001e4e6:	50                   	push   eax
c001e4e7:	e8 f6 8b fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c001e4ec:	83 c4 10             	add    esp,0x10
c001e4ef:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e4f2:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e4f5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e4f8:	25 00 00 ff ff       	and    eax,0xffff0000
c001e4fd:	c9                   	leave  
c001e4fe:	c3                   	ret    
c001e4ff:	90                   	nop

c001e500 <IOAPIC::IOAPIC()>:
c001e500:	83 ec 0c             	sub    esp,0xc
c001e503:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e507:	83 ec 08             	sub    esp,0x8
c001e50a:	68 60 30 02 c0       	push   0xc0023060
c001e50f:	50                   	push   eax
c001e510:	e8 ef e3 fe ff       	call   c000c904 <Device::Device(char const*)>
c001e515:	83 c4 10             	add    esp,0x10
c001e518:	ba 70 30 02 c0       	mov    edx,0xc0023070
c001e51d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e521:	89 10                	mov    DWORD PTR [eax],edx
c001e523:	90                   	nop
c001e524:	83 c4 0c             	add    esp,0xc
c001e527:	c3                   	ret    

c001e528 <apicOpen()>:
c001e528:	55                   	push   ebp
c001e529:	89 e5                	mov    ebp,esp
c001e52b:	53                   	push   ebx
c001e52c:	83 ec 34             	sub    esp,0x34
c001e52f:	a0 00 a1 02 c0       	mov    al,ds:0xc002a100
c001e534:	83 f0 01             	xor    eax,0x1
c001e537:	0f b6 c0             	movzx  eax,al
c001e53a:	85 c0                	test   eax,eax
c001e53c:	0f 84 a3 00 00 00    	je     c001e5e5 <apicOpen()+0xbd>
c001e542:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e546:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c001e54b:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e54f:	0f b6 c0             	movzx  eax,al
c001e552:	39 c2                	cmp    edx,eax
c001e554:	0f 83 84 00 00 00    	jae    c001e5de <apicOpen()+0xb6>
c001e55a:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001e561:	83 ec 0c             	sub    esp,0xc
c001e564:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001e567:	e8 67 95 fe ff       	call   c0007ad3 <malloc>
c001e56c:	83 c4 10             	add    esp,0x10
c001e56f:	89 c3                	mov    ebx,eax
c001e571:	83 ec 0c             	sub    esp,0xc
c001e574:	53                   	push   ebx
c001e575:	e8 86 ff ff ff       	call   c001e500 <IOAPIC::IOAPIC()>
c001e57a:	83 c4 10             	add    esp,0x10
c001e57d:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001e580:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001e584:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e587:	89 14 85 e0 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5f20],edx
c001e58e:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c001e593:	83 c0 01             	add    eax,0x1
c001e596:	a3 c0 a0 02 c0       	mov    ds:0xc002a0c0,eax
c001e59b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e5a0:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001e5a6:	83 ec 08             	sub    esp,0x8
c001e5a9:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e5ac:	50                   	push   eax
c001e5ad:	e8 ba e1 fe ff       	call   c000c76c <Device::addChild(Device*)>
c001e5b2:	83 c4 10             	add    esp,0x10
c001e5b5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e5b8:	8b 00                	mov    eax,DWORD PTR [eax]
c001e5ba:	83 c0 08             	add    eax,0x8
c001e5bd:	8b 00                	mov    eax,DWORD PTR [eax]
c001e5bf:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e5c3:	6a 00                	push   0x0
c001e5c5:	6a 00                	push   0x0
c001e5c7:	52                   	push   edx
c001e5c8:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e5cb:	ff d0                	call   eax
c001e5cd:	83 c4 10             	add    esp,0x10
c001e5d0:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e5d3:	83 c0 01             	add    eax,0x1
c001e5d6:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001e5d9:	e9 68 ff ff ff       	jmp    c001e546 <apicOpen()+0x1e>
c001e5de:	c6 05 00 a1 02 c0 01 	mov    BYTE PTR ds:0xc002a100,0x1
c001e5e5:	e8 d0 fe ff ff       	call   c001e4ba <apicGetBase()>
c001e5ea:	05 f0 00 00 00       	add    eax,0xf0
c001e5ef:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e5f2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e5f5:	8b 00                	mov    eax,DWORD PTR [eax]
c001e5f7:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e5fa:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001e601:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001e608:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e60b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001e60e:	89 10                	mov    DWORD PTR [eax],edx
c001e610:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e617:	a1 30 8b 02 c0       	mov    eax,ds:0xc0028b30
c001e61c:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e61f:	7d 7c                	jge    c001e69d <apicOpen()+0x175>
c001e621:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e624:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e62b:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001e62e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e631:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e638:	c1 e8 08             	shr    eax,0x8
c001e63b:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001e63f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e642:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e649:	c1 e8 18             	shr    eax,0x18
c001e64c:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001e64f:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001e653:	3d ff 00 00 00       	cmp    eax,0xff
c001e658:	75 3a                	jne    c001e694 <apicOpen()+0x16c>
c001e65a:	e8 5b fe ff ff       	call   c001e4ba <apicGetBase()>
c001e65f:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001e663:	83 fa 01             	cmp    edx,0x1
c001e666:	75 07                	jne    c001e66f <apicOpen()+0x147>
c001e668:	ba 60 03 00 00       	mov    edx,0x360
c001e66d:	eb 05                	jmp    c001e674 <apicOpen()+0x14c>
c001e66f:	ba 50 03 00 00       	mov    edx,0x350
c001e674:	01 d0                	add    eax,edx
c001e676:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e679:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e67c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e67e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001e681:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001e688:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001e68c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e68f:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001e692:	89 10                	mov    DWORD PTR [eax],edx
c001e694:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001e698:	e9 7a ff ff ff       	jmp    c001e617 <apicOpen()+0xef>
c001e69d:	90                   	nop
c001e69e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e6a1:	c9                   	leave  
c001e6a2:	c3                   	ret    
c001e6a3:	90                   	nop

c001e6a4 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001e6a4:	55                   	push   ebp
c001e6a5:	89 e5                	mov    ebp,esp
c001e6a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6aa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e6b0:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e6b3:	72 1d                	jb     c001e6d2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e6b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6b8:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e6be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6c1:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e6c7:	01 d0                	add    eax,edx
c001e6c9:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e6cc:	73 04                	jae    c001e6d2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e6ce:	b0 01                	mov    al,0x1
c001e6d0:	eb 02                	jmp    c001e6d4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001e6d2:	b0 00                	mov    al,0x0
c001e6d4:	5d                   	pop    ebp
c001e6d5:	c3                   	ret    

c001e6d6 <IOAPIC::read(int)>:
c001e6d6:	55                   	push   ebp
c001e6d7:	89 e5                	mov    ebp,esp
c001e6d9:	83 ec 10             	sub    esp,0x10
c001e6dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6df:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e6e5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e6e8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e6eb:	0f b6 d0             	movzx  edx,al
c001e6ee:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e6f1:	89 10                	mov    DWORD PTR [eax],edx
c001e6f3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e6f6:	83 c0 10             	add    eax,0x10
c001e6f9:	8b 00                	mov    eax,DWORD PTR [eax]
c001e6fb:	c9                   	leave  
c001e6fc:	c3                   	ret    
c001e6fd:	90                   	nop

c001e6fe <IOAPIC::open(int, int, void*)>:
c001e6fe:	55                   	push   ebp
c001e6ff:	89 e5                	mov    ebp,esp
c001e701:	57                   	push   edi
c001e702:	56                   	push   esi
c001e703:	53                   	push   ebx
c001e704:	83 ec 04             	sub    esp,0x4
c001e707:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e70a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e70d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e713:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e716:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e71c:	8b 14 85 20 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd73e0]
c001e723:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e726:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e72c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e72f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e735:	8b 14 85 a0 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7360]
c001e73c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e73f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e745:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e748:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001e74e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e751:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e757:	0f b6 f0             	movzx  esi,al
c001e75a:	89 d0                	mov    eax,edx
c001e75c:	ba 00 00 00 00       	mov    edx,0x0
c001e761:	89 c7                	mov    edi,eax
c001e763:	83 e7 ff             	and    edi,0xffffffff
c001e766:	89 f9                	mov    ecx,edi
c001e768:	0f b6 da             	movzx  ebx,dl
c001e76b:	89 c8                	mov    eax,ecx
c001e76d:	89 da                	mov    edx,ebx
c001e76f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e772:	8d 5e 08             	lea    ebx,[esi+0x8]
c001e775:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e779:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e77d:	83 e0 00             	and    eax,0x0
c001e780:	09 d0                	or     eax,edx
c001e782:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e786:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e789:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e78f:	8d 50 01             	lea    edx,[eax+0x1]
c001e792:	88 d1                	mov    cl,dl
c001e794:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001e797:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001e79d:	0f b6 d0             	movzx  edx,al
c001e7a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e7a3:	83 c2 08             	add    edx,0x8
c001e7a6:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e7aa:	0f b6 c9             	movzx  ecx,cl
c001e7ad:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e7b3:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e7b7:	6a 01                	push   0x1
c001e7b9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e7bc:	e8 15 ff ff ff       	call   c001e6d6 <IOAPIC::read(int)>
c001e7c1:	83 c4 08             	add    esp,0x8
c001e7c4:	c1 f8 10             	sar    eax,0x10
c001e7c7:	0f b6 c0             	movzx  eax,al
c001e7ca:	8d 50 01             	lea    edx,[eax+0x1]
c001e7cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e7d0:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e7d6:	b8 00 00 00 00       	mov    eax,0x0
c001e7db:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e7de:	5b                   	pop    ebx
c001e7df:	5e                   	pop    esi
c001e7e0:	5f                   	pop    edi
c001e7e1:	5d                   	pop    ebp
c001e7e2:	c3                   	ret    
c001e7e3:	90                   	nop

c001e7e4 <IOAPIC::write(int, int)>:
c001e7e4:	55                   	push   ebp
c001e7e5:	89 e5                	mov    ebp,esp
c001e7e7:	83 ec 10             	sub    esp,0x10
c001e7ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e7ed:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e7f3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e7f6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e7f9:	0f b6 d0             	movzx  edx,al
c001e7fc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e7ff:	89 10                	mov    DWORD PTR [eax],edx
c001e801:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e804:	8d 50 10             	lea    edx,[eax+0x10]
c001e807:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e80a:	89 02                	mov    DWORD PTR [edx],eax
c001e80c:	90                   	nop
c001e80d:	c9                   	leave  
c001e80e:	c3                   	ret    
c001e80f:	90                   	nop

c001e810 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001e810:	55                   	push   ebp
c001e811:	89 e5                	mov    ebp,esp
c001e813:	53                   	push   ebx
c001e814:	83 ec 2c             	sub    esp,0x2c
c001e817:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e81a:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001e81d:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001e820:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001e823:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e826:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e829:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e82c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e82f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001e832:	88 d8                	mov    al,bl
c001e834:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001e837:	88 c8                	mov    al,cl
c001e839:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001e83c:	88 d0                	mov    al,dl
c001e83e:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001e841:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e845:	83 c0 08             	add    eax,0x8
c001e848:	d1 e0                	shl    eax,1
c001e84a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e84d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e851:	83 c0 08             	add    eax,0x8
c001e854:	d1 e0                	shl    eax,1
c001e856:	83 c0 01             	add    eax,0x1
c001e859:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001e85c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e85f:	50                   	push   eax
c001e860:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e863:	e8 6e fe ff ff       	call   c001e6d6 <IOAPIC::read(int)>
c001e868:	83 c4 08             	add    esp,0x8
c001e86b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e86e:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001e875:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e878:	c1 e0 18             	shl    eax,0x18
c001e87b:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001e87e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001e881:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e884:	52                   	push   edx
c001e885:	50                   	push   eax
c001e886:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e889:	e8 56 ff ff ff       	call   c001e7e4 <IOAPIC::write(int, int)>
c001e88e:	83 c4 0c             	add    esp,0xc
c001e891:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e894:	50                   	push   eax
c001e895:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e898:	e8 39 fe ff ff       	call   c001e6d6 <IOAPIC::read(int)>
c001e89d:	83 c4 08             	add    esp,0x8
c001e8a0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e8a3:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001e8aa:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001e8b1:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001e8b8:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001e8bc:	85 c0                	test   eax,eax
c001e8be:	74 09                	je     c001e8c9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001e8c0:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001e8c7:	eb 07                	jmp    c001e8d0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001e8c9:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001e8d0:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001e8d4:	85 c0                	test   eax,eax
c001e8d6:	74 09                	je     c001e8e1 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001e8d8:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001e8df:	eb 07                	jmp    c001e8e8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001e8e1:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001e8e8:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001e8ef:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001e8f3:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e8f6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e8f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e8fc:	52                   	push   edx
c001e8fd:	50                   	push   eax
c001e8fe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e901:	e8 de fe ff ff       	call   c001e7e4 <IOAPIC::write(int, int)>
c001e906:	83 c4 0c             	add    esp,0xc
c001e909:	90                   	nop
c001e90a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e90d:	c9                   	leave  
c001e90e:	c3                   	ret    
c001e90f:	90                   	nop

c001e910 <APICTimer::close(int, int, void*)>:
c001e910:	b8 00 00 00 00       	mov    eax,0x0
c001e915:	c3                   	ret    
c001e916:	66 90                	xchg   ax,ax

c001e918 <apicTimerHandler(regs*, void*)>:
c001e918:	83 ec 0c             	sub    esp,0xc
c001e91b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e91f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e921:	b8 10 27 00 00       	mov    eax,0x2710
c001e926:	ba 00 00 00 00       	mov    edx,0x0
c001e92b:	f7 f1                	div    ecx
c001e92d:	83 ec 0c             	sub    esp,0xc
c001e930:	50                   	push   eax
c001e931:	e8 a2 f8 fe ff       	call   c000e1d8 <timerHandler(unsigned int)>
c001e936:	83 c4 10             	add    esp,0x10
c001e939:	90                   	nop
c001e93a:	83 c4 0c             	add    esp,0xc
c001e93d:	c3                   	ret    
c001e93e:	66 90                	xchg   ax,ax

c001e940 <APICTimer::open(int, int, void*)>:
c001e940:	83 ec 0c             	sub    esp,0xc
c001e943:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e947:	8b 00                	mov    eax,DWORD PTR [eax]
c001e949:	83 c0 24             	add    eax,0x24
c001e94c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e94e:	83 ec 08             	sub    esp,0x8
c001e951:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e955:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e959:	ff d0                	call   eax
c001e95b:	83 c4 10             	add    esp,0x10
c001e95e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e962:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e966:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e970:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e974:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001e97a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e97e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e984:	83 ec 0c             	sub    esp,0xc
c001e987:	51                   	push   ecx
c001e988:	6a 01                	push   0x1
c001e98a:	68 18 e9 01 c0       	push   0xc001e918
c001e98f:	52                   	push   edx
c001e990:	50                   	push   eax
c001e991:	e8 82 dd fe ff       	call   c000c718 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e996:	83 c4 20             	add    esp,0x20
c001e999:	89 c2                	mov    edx,eax
c001e99b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e99f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e9a5:	b8 00 00 00 00       	mov    eax,0x0
c001e9aa:	83 c4 0c             	add    esp,0xc
c001e9ad:	c3                   	ret    
c001e9ae:	66 90                	xchg   ax,ax

c001e9b0 <APICTimer::write(int)>:
c001e9b0:	83 ec 0c             	sub    esp,0xc
c001e9b3:	83 ec 0c             	sub    esp,0xc
c001e9b6:	68 94 30 02 c0       	push   0xc0023094
c001e9bb:	e8 49 29 ff ff       	call   c0011309 <KePanic(char const*)>
c001e9c0:	83 c4 10             	add    esp,0x10
c001e9c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e9cb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e9d1:	90                   	nop
c001e9d2:	83 c4 0c             	add    esp,0xc
c001e9d5:	c3                   	ret    
c001e9d6:	66 90                	xchg   ax,ax

c001e9d8 <APICTimer::APICTimer()>:
c001e9d8:	83 ec 0c             	sub    esp,0xc
c001e9db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9df:	83 ec 08             	sub    esp,0x8
c001e9e2:	68 a4 30 02 c0       	push   0xc00230a4
c001e9e7:	50                   	push   eax
c001e9e8:	e8 1f f7 fe ff       	call   c000e10c <Timer::Timer(char const*)>
c001e9ed:	83 c4 10             	add    esp,0x10
c001e9f0:	ba b8 30 02 c0       	mov    edx,0xc00230b8
c001e9f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9f9:	89 10                	mov    DWORD PTR [eax],edx
c001e9fb:	90                   	nop
c001e9fc:	83 c4 0c             	add    esp,0xc
c001e9ff:	c3                   	ret    

c001ea00 <PIT::write(int)>:
c001ea00:	83 ec 10             	sub    esp,0x10
c001ea03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ea07:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ea0b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ea11:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ea15:	a3 04 a1 02 c0       	mov    ds:0xc002a104,eax
c001ea1a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ea1f:	89 c2                	mov    edx,eax
c001ea21:	c1 fa 1f             	sar    edx,0x1f
c001ea24:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ea28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea2c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001ea33:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001ea38:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ea3c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ea41:	ee                   	out    dx,al
c001ea42:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea46:	0f b6 c0             	movzx  eax,al
c001ea49:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ea50:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ea54:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ea58:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ea5d:	ee                   	out    dx,al
c001ea5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea62:	c1 f8 08             	sar    eax,0x8
c001ea65:	0f b6 c0             	movzx  eax,al
c001ea68:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001ea6f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ea73:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ea77:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ea7c:	ee                   	out    dx,al
c001ea7d:	90                   	nop
c001ea7e:	83 c4 10             	add    esp,0x10
c001ea81:	c3                   	ret    
c001ea82:	66 90                	xchg   ax,ax

c001ea84 <pitHandler(regs*, void*)>:
c001ea84:	83 ec 0c             	sub    esp,0xc
c001ea87:	8b 0d 04 a1 02 c0    	mov    ecx,DWORD PTR ds:0xc002a104
c001ea8d:	b8 10 27 00 00       	mov    eax,0x2710
c001ea92:	89 c2                	mov    edx,eax
c001ea94:	c1 fa 1f             	sar    edx,0x1f
c001ea97:	f7 f9                	idiv   ecx
c001ea99:	83 ec 0c             	sub    esp,0xc
c001ea9c:	50                   	push   eax
c001ea9d:	e8 36 f7 fe ff       	call   c000e1d8 <timerHandler(unsigned int)>
c001eaa2:	83 c4 10             	add    esp,0x10
c001eaa5:	90                   	nop
c001eaa6:	83 c4 0c             	add    esp,0xc
c001eaa9:	c3                   	ret    
c001eaaa:	66 90                	xchg   ax,ax

c001eaac <PIT::open(int, int, void*)>:
c001eaac:	83 ec 0c             	sub    esp,0xc
c001eaaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eab3:	8b 00                	mov    eax,DWORD PTR [eax]
c001eab5:	83 c0 24             	add    eax,0x24
c001eab8:	8b 00                	mov    eax,DWORD PTR [eax]
c001eaba:	83 ec 08             	sub    esp,0x8
c001eabd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eac1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eac5:	ff d0                	call   eax
c001eac7:	83 c4 10             	add    esp,0x10
c001eaca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eace:	83 ec 0c             	sub    esp,0xc
c001ead1:	6a 00                	push   0x0
c001ead3:	6a 01                	push   0x1
c001ead5:	68 84 ea 01 c0       	push   0xc001ea84
c001eada:	6a 00                	push   0x0
c001eadc:	50                   	push   eax
c001eadd:	e8 36 dc fe ff       	call   c000c718 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eae2:	83 c4 20             	add    esp,0x20
c001eae5:	89 c2                	mov    edx,eax
c001eae7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaeb:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001eaf1:	b8 00 00 00 00       	mov    eax,0x0
c001eaf6:	83 c4 0c             	add    esp,0xc
c001eaf9:	c3                   	ret    
c001eafa:	66 90                	xchg   ax,ax

c001eafc <PIT::close(int, int, void*)>:
c001eafc:	83 ec 0c             	sub    esp,0xc
c001eaff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb03:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001eb0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb11:	6a 01                	push   0x1
c001eb13:	68 84 ea 01 c0       	push   0xc001ea84
c001eb18:	6a 00                	push   0x0
c001eb1a:	50                   	push   eax
c001eb1b:	e8 2e dc fe ff       	call   c000c74e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001eb20:	83 c4 10             	add    esp,0x10
c001eb23:	b8 00 00 00 00       	mov    eax,0x0
c001eb28:	83 c4 0c             	add    esp,0xc
c001eb2b:	c3                   	ret    

c001eb2c <PIT::PIT()>:
c001eb2c:	83 ec 0c             	sub    esp,0xc
c001eb2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb33:	83 ec 08             	sub    esp,0x8
c001eb36:	68 e0 30 02 c0       	push   0xc00230e0
c001eb3b:	50                   	push   eax
c001eb3c:	e8 cb f5 fe ff       	call   c000e10c <Timer::Timer(char const*)>
c001eb41:	83 c4 10             	add    esp,0x10
c001eb44:	ba 08 31 02 c0       	mov    edx,0xc0023108
c001eb49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb4d:	89 10                	mov    DWORD PTR [eax],edx
c001eb4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb53:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001eb59:	0f b6 d0             	movzx  edx,al
c001eb5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb60:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001eb67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb6b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001eb71:	0f b6 d0             	movzx  edx,al
c001eb74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb78:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001eb7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb81:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001eb87:	8d 50 01             	lea    edx,[eax+0x1]
c001eb8a:	88 d1                	mov    cl,dl
c001eb8c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eb90:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001eb96:	0f b6 d0             	movzx  edx,al
c001eb99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb9d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001eba1:	83 e1 3f             	and    ecx,0x3f
c001eba4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001eba8:	90                   	nop
c001eba9:	83 c4 0c             	add    esp,0xc
c001ebac:	c3                   	ret    
c001ebad:	66 90                	xchg   ax,ax
c001ebaf:	90                   	nop

c001ebb0 <avxDetect>:
c001ebb0:	b8 01 00 00 00       	mov    eax,0x1
c001ebb5:	0f a2                	cpuid  
c001ebb7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001ebbd:	74 15                	je     c001ebd4 <avxDetect.noAVX>
c001ebbf:	b8 01 00 00 00       	mov    eax,0x1
c001ebc4:	0f a2                	cpuid  
c001ebc6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001ebcc:	74 06                	je     c001ebd4 <avxDetect.noAVX>
c001ebce:	b8 01 00 00 00       	mov    eax,0x1
c001ebd3:	c3                   	ret    

c001ebd4 <avxDetect.noAVX>:
c001ebd4:	b8 00 00 00 00       	mov    eax,0x0
c001ebd9:	c3                   	ret    

c001ebda <avxSave>:
c001ebda:	53                   	push   ebx
c001ebdb:	52                   	push   edx
c001ebdc:	31 c0                	xor    eax,eax
c001ebde:	48                   	dec    eax
c001ebdf:	89 c2                	mov    edx,eax
c001ebe1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ebe5:	0f ae 23             	xsave  [ebx]
c001ebe8:	5a                   	pop    edx
c001ebe9:	5b                   	pop    ebx
c001ebea:	c3                   	ret    

c001ebeb <avxLoad>:
c001ebeb:	53                   	push   ebx
c001ebec:	52                   	push   edx
c001ebed:	31 c0                	xor    eax,eax
c001ebef:	48                   	dec    eax
c001ebf0:	89 c2                	mov    edx,eax
c001ebf2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ebf6:	0f ae 2b             	xrstor [ebx]
c001ebf9:	5a                   	pop    edx
c001ebfa:	5b                   	pop    ebx
c001ebfb:	c3                   	ret    

c001ebfc <avxInit>:
c001ebfc:	e8 67 03 00 00       	call   c001ef68 <sseInit>
c001ec01:	50                   	push   eax
c001ec02:	51                   	push   ecx
c001ec03:	0f 20 e0             	mov    eax,cr4
c001ec06:	0d 00 00 04 00       	or     eax,0x40000
c001ec0b:	0f 22 e0             	mov    cr4,eax
c001ec0e:	31 c9                	xor    ecx,ecx
c001ec10:	0f 01 d0             	xgetbv 
c001ec13:	0d 07 00 00 00       	or     eax,0x7
c001ec18:	0f 01 d1             	xsetbv 
c001ec1b:	59                   	pop    ecx
c001ec1c:	58                   	pop    eax
c001ec1d:	c3                   	ret    

c001ec1e <avxClose>:
c001ec1e:	c3                   	ret    

c001ec1f <wouldSheSayYes>:
c001ec1f:	c3                   	ret    
c001ec20:	49                   	dec    ecx
c001ec21:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001ec25:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001ec29:	75 20                	jne    c001ec4b <isr0+0xb>
c001ec2b:	4e                   	dec    esi
c001ec2c:	79 61                	jns    c001ec8f <isr7+0x3>
c001ec2e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001ec33:	66 90                	xchg   ax,ax
c001ec35:	66 90                	xchg   ax,ax
c001ec37:	66 90                	xchg   ax,ax
c001ec39:	66 90                	xchg   ax,ax
c001ec3b:	66 90                	xchg   ax,ax
c001ec3d:	66 90                	xchg   ax,ax
c001ec3f:	90                   	nop

c001ec40 <isr0>:
c001ec40:	fa                   	cli    
c001ec41:	68 00 00 00 00       	push   0x0
c001ec46:	68 00 00 00 00       	push   0x0
c001ec4b:	e9 56 01 00 00       	jmp    c001eda6 <int_common_stub>

c001ec50 <isr1>:
c001ec50:	fa                   	cli    
c001ec51:	6a 00                	push   0x0
c001ec53:	6a 01                	push   0x1
c001ec55:	e9 4c 01 00 00       	jmp    c001eda6 <int_common_stub>

c001ec5a <isr2>:
c001ec5a:	fa                   	cli    
c001ec5b:	6a 00                	push   0x0
c001ec5d:	6a 02                	push   0x2
c001ec5f:	e9 42 01 00 00       	jmp    c001eda6 <int_common_stub>

c001ec64 <isr3>:
c001ec64:	fa                   	cli    
c001ec65:	6a 00                	push   0x0
c001ec67:	6a 03                	push   0x3
c001ec69:	e9 38 01 00 00       	jmp    c001eda6 <int_common_stub>

c001ec6e <isr4>:
c001ec6e:	fa                   	cli    
c001ec6f:	6a 00                	push   0x0
c001ec71:	6a 04                	push   0x4
c001ec73:	e9 2e 01 00 00       	jmp    c001eda6 <int_common_stub>

c001ec78 <isr5>:
c001ec78:	fa                   	cli    
c001ec79:	6a 00                	push   0x0
c001ec7b:	6a 05                	push   0x5
c001ec7d:	e9 24 01 00 00       	jmp    c001eda6 <int_common_stub>

c001ec82 <isr6>:
c001ec82:	fa                   	cli    
c001ec83:	6a 00                	push   0x0
c001ec85:	6a 06                	push   0x6
c001ec87:	e9 1a 01 00 00       	jmp    c001eda6 <int_common_stub>

c001ec8c <isr7>:
c001ec8c:	fa                   	cli    
c001ec8d:	6a 00                	push   0x0
c001ec8f:	6a 07                	push   0x7
c001ec91:	e9 10 01 00 00       	jmp    c001eda6 <int_common_stub>

c001ec96 <isr8>:
c001ec96:	fa                   	cli    
c001ec97:	6a 08                	push   0x8
c001ec99:	e9 08 01 00 00       	jmp    c001eda6 <int_common_stub>

c001ec9e <isr9>:
c001ec9e:	fa                   	cli    
c001ec9f:	6a 00                	push   0x0
c001eca1:	6a 09                	push   0x9
c001eca3:	e9 fe 00 00 00       	jmp    c001eda6 <int_common_stub>

c001eca8 <isr10>:
c001eca8:	fa                   	cli    
c001eca9:	6a 0a                	push   0xa
c001ecab:	e9 f6 00 00 00       	jmp    c001eda6 <int_common_stub>

c001ecb0 <isr11>:
c001ecb0:	fa                   	cli    
c001ecb1:	6a 0b                	push   0xb
c001ecb3:	e9 ee 00 00 00       	jmp    c001eda6 <int_common_stub>

c001ecb8 <isr12>:
c001ecb8:	fa                   	cli    
c001ecb9:	6a 0c                	push   0xc
c001ecbb:	e9 e6 00 00 00       	jmp    c001eda6 <int_common_stub>

c001ecc0 <isr13>:
c001ecc0:	fa                   	cli    
c001ecc1:	6a 0d                	push   0xd
c001ecc3:	53                   	push   ebx
c001ecc4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ecc8:	81 fb 96 ee 01 c0    	cmp    ebx,0xc001ee96
c001ecce:	5b                   	pop    ebx
c001eccf:	0f 84 c3 01 00 00    	je     c001ee98 <finishSignal2>
c001ecd5:	e9 cc 00 00 00       	jmp    c001eda6 <int_common_stub>

c001ecda <isr14>:
c001ecda:	fa                   	cli    
c001ecdb:	6a 0e                	push   0xe
c001ecdd:	e9 c4 00 00 00       	jmp    c001eda6 <int_common_stub>

c001ece2 <isr15>:
c001ece2:	fa                   	cli    
c001ece3:	6a 00                	push   0x0
c001ece5:	6a 0f                	push   0xf
c001ece7:	e9 ba 00 00 00       	jmp    c001eda6 <int_common_stub>

c001ecec <isr16>:
c001ecec:	fa                   	cli    
c001eced:	6a 00                	push   0x0
c001ecef:	6a 10                	push   0x10
c001ecf1:	e9 b0 00 00 00       	jmp    c001eda6 <int_common_stub>

c001ecf6 <isr17>:
c001ecf6:	fa                   	cli    
c001ecf7:	6a 00                	push   0x0
c001ecf9:	6a 11                	push   0x11
c001ecfb:	e9 a6 00 00 00       	jmp    c001eda6 <int_common_stub>

c001ed00 <isr18>:
c001ed00:	fa                   	cli    
c001ed01:	6a 00                	push   0x0
c001ed03:	6a 12                	push   0x12
c001ed05:	e9 9c 00 00 00       	jmp    c001eda6 <int_common_stub>

c001ed0a <irq3>:
c001ed0a:	fa                   	cli    
c001ed0b:	6a 00                	push   0x0
c001ed0d:	6a 23                	push   0x23
c001ed0f:	e9 92 00 00 00       	jmp    c001eda6 <int_common_stub>

c001ed14 <irq4>:
c001ed14:	fa                   	cli    
c001ed15:	6a 00                	push   0x0
c001ed17:	6a 24                	push   0x24
c001ed19:	e9 88 00 00 00       	jmp    c001eda6 <int_common_stub>

c001ed1e <irq5>:
c001ed1e:	fa                   	cli    
c001ed1f:	6a 00                	push   0x0
c001ed21:	6a 25                	push   0x25
c001ed23:	e9 7e 00 00 00       	jmp    c001eda6 <int_common_stub>

c001ed28 <irq6>:
c001ed28:	fa                   	cli    
c001ed29:	6a 00                	push   0x0
c001ed2b:	6a 26                	push   0x26
c001ed2d:	e9 74 00 00 00       	jmp    c001eda6 <int_common_stub>

c001ed32 <irq7>:
c001ed32:	fa                   	cli    
c001ed33:	6a 00                	push   0x0
c001ed35:	6a 27                	push   0x27
c001ed37:	e9 6a 00 00 00       	jmp    c001eda6 <int_common_stub>

c001ed3c <irq8>:
c001ed3c:	fa                   	cli    
c001ed3d:	6a 00                	push   0x0
c001ed3f:	6a 28                	push   0x28
c001ed41:	e9 60 00 00 00       	jmp    c001eda6 <int_common_stub>

c001ed46 <irq9>:
c001ed46:	fa                   	cli    
c001ed47:	6a 00                	push   0x0
c001ed49:	6a 29                	push   0x29
c001ed4b:	e9 56 00 00 00       	jmp    c001eda6 <int_common_stub>

c001ed50 <irq10>:
c001ed50:	fa                   	cli    
c001ed51:	6a 00                	push   0x0
c001ed53:	6a 2a                	push   0x2a
c001ed55:	e9 4c 00 00 00       	jmp    c001eda6 <int_common_stub>

c001ed5a <irq11>:
c001ed5a:	fa                   	cli    
c001ed5b:	6a 00                	push   0x0
c001ed5d:	6a 2b                	push   0x2b
c001ed5f:	e9 42 00 00 00       	jmp    c001eda6 <int_common_stub>

c001ed64 <irq12>:
c001ed64:	fa                   	cli    
c001ed65:	6a 00                	push   0x0
c001ed67:	6a 2c                	push   0x2c
c001ed69:	e9 38 00 00 00       	jmp    c001eda6 <int_common_stub>

c001ed6e <irq13>:
c001ed6e:	fa                   	cli    
c001ed6f:	6a 00                	push   0x0
c001ed71:	6a 2d                	push   0x2d
c001ed73:	e9 2e 00 00 00       	jmp    c001eda6 <int_common_stub>

c001ed78 <irq14>:
c001ed78:	fa                   	cli    
c001ed79:	6a 00                	push   0x0
c001ed7b:	6a 2e                	push   0x2e
c001ed7d:	e9 24 00 00 00       	jmp    c001eda6 <int_common_stub>

c001ed82 <irq15>:
c001ed82:	fa                   	cli    
c001ed83:	6a 00                	push   0x0
c001ed85:	6a 2f                	push   0x2f
c001ed87:	e9 1a 00 00 00       	jmp    c001eda6 <int_common_stub>

c001ed8c <irq1>:
c001ed8c:	fa                   	cli    
c001ed8d:	6a 00                	push   0x0
c001ed8f:	6a 21                	push   0x21
c001ed91:	eb 13                	jmp    c001eda6 <int_common_stub>

c001ed93 <irq2>:
c001ed93:	fa                   	cli    
c001ed94:	6a 00                	push   0x0
c001ed96:	6a 22                	push   0x22
c001ed98:	eb 0c                	jmp    c001eda6 <int_common_stub>

c001ed9a <isr96>:
c001ed9a:	6a 00                	push   0x0
c001ed9c:	6a 60                	push   0x60
c001ed9e:	fb                   	sti    
c001ed9f:	eb 37                	jmp    c001edd8 <syscall_common_stub>

c001eda1 <irq0>:
c001eda1:	fa                   	cli    
c001eda2:	6a 00                	push   0x0
c001eda4:	6a 20                	push   0x20

c001eda6 <int_common_stub>:
c001eda6:	60                   	pusha  
c001eda7:	1e                   	push   ds
c001eda8:	06                   	push   es
c001eda9:	0f a0                	push   fs
c001edab:	0f a8                	push   gs
c001edad:	66 b8 10 00          	mov    ax,0x10
c001edb1:	66 8e d8             	mov    ds,ax
c001edb4:	66 8e c0             	mov    es,ax
c001edb7:	66 8e e0             	mov    fs,ax
c001edba:	66 8e e8             	mov    gs,ax
c001edbd:	54                   	push   esp
c001edbe:	fc                   	cld    
c001edbf:	e8 54 de fe ff       	call   c000cc18 <int_handler>
c001edc4:	81 c4 04 00 00 00    	add    esp,0x4
c001edca:	0f a9                	pop    gs
c001edcc:	0f a1                	pop    fs
c001edce:	07                   	pop    es
c001edcf:	1f                   	pop    ds
c001edd0:	61                   	popa   
c001edd1:	81 c4 08 00 00 00    	add    esp,0x8
c001edd7:	cf                   	iret   

c001edd8 <syscall_common_stub>:
c001edd8:	60                   	pusha  
c001edd9:	1e                   	push   ds
c001edda:	06                   	push   es
c001eddb:	0f a0                	push   fs
c001eddd:	0f a8                	push   gs
c001eddf:	66 b8 10 00          	mov    ax,0x10
c001ede3:	66 8e d8             	mov    ds,ax
c001ede6:	66 8e c0             	mov    es,ax
c001ede9:	66 8e e0             	mov    fs,ax
c001edec:	66 8e e8             	mov    gs,ax
c001edef:	54                   	push   esp
c001edf0:	fc                   	cld    
c001edf1:	e8 22 de fe ff       	call   c000cc18 <int_handler>
c001edf6:	81 c4 04 00 00 00    	add    esp,0x4
c001edfc:	0f a9                	pop    gs
c001edfe:	0f a1                	pop    fs
c001ee00:	07                   	pop    es
c001ee01:	1f                   	pop    ds
c001ee02:	e8 14 2b ff ff       	call   c001191b <KiCheckSignalZ>
c001ee07:	3d 00 00 00 00       	cmp    eax,0x0
c001ee0c:	0f 84 c0 00 00 00    	je     c001eed2 <skipSignals>
c001ee12:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001ee17:	61                   	popa   
c001ee18:	53                   	push   ebx
c001ee19:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001ee1f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001ee22:	5b                   	pop    ebx
c001ee23:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001ee28:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001ee2b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001ee2e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ee31:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001ee34:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001ee37:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001ee3a:	81 c4 08 00 00 00    	add    esp,0x8
c001ee40:	5e                   	pop    esi
c001ee41:	5b                   	pop    ebx
c001ee42:	59                   	pop    ecx
c001ee43:	5a                   	pop    edx
c001ee44:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001ee47:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001ee4a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001ee4d:	52                   	push   edx
c001ee4e:	51                   	push   ecx
c001ee4f:	53                   	push   ebx
c001ee50:	56                   	push   esi
c001ee51:	81 ec 08 00 00 00    	sub    esp,0x8
c001ee57:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001ee5a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001ee5d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001ee60:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ee63:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ee66:	60                   	pusha  
c001ee67:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001ee6d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001ee70:	89 e3                	mov    ebx,esp
c001ee72:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001ee75:	52                   	push   edx
c001ee76:	68 96 ee 01 c0       	push   0xc001ee96
c001ee7b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001ee7e:	89 dc                	mov    esp,ebx
c001ee80:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001ee83:	68 23 00 00 00       	push   0x23
c001ee88:	51                   	push   ecx
c001ee89:	68 02 02 00 00       	push   0x202
c001ee8e:	68 1b 00 00 00       	push   0x1b
c001ee93:	ff 36                	push   DWORD PTR [esi]
c001ee95:	cf                   	iret   

c001ee96 <finishSignal>:
c001ee96:	cd 0f                	int    0xf

c001ee98 <finishSignal2>:
c001ee98:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001ee9e:	e8 f5 2a ff ff       	call   c0011998 <KiFinishSignalZ>
c001eea3:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001eea9:	68 23 00 00 00       	push   0x23
c001eeae:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001eeb1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001eeb4:	68 1b 00 00 00       	push   0x1b
c001eeb9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001eebc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001eebf:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001eec2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001eec5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001eec8:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001eecb:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001eece:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001eed1:	cf                   	iret   

c001eed2 <skipSignals>:
c001eed2:	61                   	popa   
c001eed3:	81 c4 08 00 00 00    	add    esp,0x8
c001eed9:	cf                   	iret   
c001eeda:	90                   	nop
c001eedb:	90                   	nop

c001eedc <irq16>:
c001eedc:	fa                   	cli    
c001eedd:	6a 00                	push   0x0
c001eedf:	6a 30                	push   0x30
c001eee1:	e9 c0 fe ff ff       	jmp    c001eda6 <int_common_stub>

c001eee6 <irq17>:
c001eee6:	fa                   	cli    
c001eee7:	6a 00                	push   0x0
c001eee9:	6a 31                	push   0x31
c001eeeb:	e9 b6 fe ff ff       	jmp    c001eda6 <int_common_stub>

c001eef0 <irq18>:
c001eef0:	fa                   	cli    
c001eef1:	6a 00                	push   0x0
c001eef3:	6a 32                	push   0x32
c001eef5:	e9 ac fe ff ff       	jmp    c001eda6 <int_common_stub>

c001eefa <irq19>:
c001eefa:	fa                   	cli    
c001eefb:	6a 00                	push   0x0
c001eefd:	6a 33                	push   0x33
c001eeff:	e9 a2 fe ff ff       	jmp    c001eda6 <int_common_stub>

c001ef04 <irq20>:
c001ef04:	fa                   	cli    
c001ef05:	6a 00                	push   0x0
c001ef07:	6a 34                	push   0x34
c001ef09:	e9 98 fe ff ff       	jmp    c001eda6 <int_common_stub>

c001ef0e <irq21>:
c001ef0e:	fa                   	cli    
c001ef0f:	6a 00                	push   0x0
c001ef11:	6a 35                	push   0x35
c001ef13:	e9 8e fe ff ff       	jmp    c001eda6 <int_common_stub>

c001ef18 <irq22>:
c001ef18:	fa                   	cli    
c001ef19:	6a 00                	push   0x0
c001ef1b:	6a 36                	push   0x36
c001ef1d:	e9 84 fe ff ff       	jmp    c001eda6 <int_common_stub>

c001ef22 <irq23>:
c001ef22:	fa                   	cli    
c001ef23:	6a 00                	push   0x0
c001ef25:	6a 37                	push   0x37
c001ef27:	e9 7a fe ff ff       	jmp    c001eda6 <int_common_stub>
c001ef2c:	66 90                	xchg   ax,ax
c001ef2e:	66 90                	xchg   ax,ax

c001ef30 <i386GetRDRAND>:
c001ef30:	b9 64 00 00 00       	mov    ecx,0x64

c001ef35 <retry>:
c001ef35:	0f c7 f0             	rdrand eax
c001ef38:	72 05                	jb     c001ef3f <retry.done>
c001ef3a:	e2 f9                	loop   c001ef35 <retry>

c001ef3c <retry.fail>:
c001ef3c:	31 c0                	xor    eax,eax
c001ef3e:	c3                   	ret    

c001ef3f <retry.done>:
c001ef3f:	c3                   	ret    

c001ef40 <absolutelyNoChanceInHell>:
c001ef40:	b8 01 00 00 00       	mov    eax,0x1
c001ef45:	0f a2                	cpuid  
c001ef47:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001ef4d:	74 06                	je     c001ef55 <sseDetect.noSSE>
c001ef4f:	b8 01 00 00 00       	mov    eax,0x1
c001ef54:	c3                   	ret    

c001ef55 <sseDetect.noSSE>:
c001ef55:	31 c0                	xor    eax,eax
c001ef57:	c3                   	ret    

c001ef58 <sseSave>:
c001ef58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef5c:	0f ae 00             	fxsave [eax]
c001ef5f:	c3                   	ret    

c001ef60 <sseLoad>:
c001ef60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef64:	0f ae 08             	fxrstor [eax]
c001ef67:	c3                   	ret    

c001ef68 <sseInit>:
c001ef68:	e8 42 00 00 00       	call   c001efaf <x87Init>
c001ef6d:	0f 20 e0             	mov    eax,cr4
c001ef70:	66 0d 00 06          	or     ax,0x600
c001ef74:	0f 22 e0             	mov    cr4,eax
c001ef77:	c3                   	ret    

c001ef78 <sseClose>:
c001ef78:	c3                   	ret    
c001ef79:	66 90                	xchg   ax,ax
c001ef7b:	66 90                	xchg   ax,ax
c001ef7d:	66 90                	xchg   ax,ax
c001ef7f:	90                   	nop

c001ef80 <value_37F>:
c001ef80:	7f 03                	jg     c001ef85 <value_37A+0x1>

c001ef82 <value_37E>:
c001ef82:	7e 03                	jle    c001ef87 <x87Detect+0x1>

c001ef84 <value_37A>:
c001ef84:	7a 03                	jp     c001ef89 <x87Detect+0x3>

c001ef86 <x87Detect>:
c001ef86:	b8 01 00 00 00       	mov    eax,0x1
c001ef8b:	0f a2                	cpuid  
c001ef8d:	f7 c2 01 00 00 00    	test   edx,0x1
c001ef93:	74 06                	je     c001ef9b <x87Detect.nox87>
c001ef95:	b8 01 00 00 00       	mov    eax,0x1
c001ef9a:	c3                   	ret    

c001ef9b <x87Detect.nox87>:
c001ef9b:	b8 00 00 00 00       	mov    eax,0x0
c001efa0:	c3                   	ret    

c001efa1 <x87Save>:
c001efa1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efa5:	dd 30                	fnsave [eax]
c001efa7:	c3                   	ret    

c001efa8 <x87Load>:
c001efa8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efac:	dd 20                	frstor [eax]
c001efae:	c3                   	ret    

c001efaf <x87Init>:
c001efaf:	0f 20 c0             	mov    eax,cr0
c001efb2:	66 25 fb ff          	and    ax,0xfffb
c001efb6:	66 0d 22 00          	or     ax,0x22
c001efba:	0f 22 c0             	mov    cr0,eax
c001efbd:	db e3                	fninit 
c001efbf:	0f 06                	clts   
c001efc1:	d9 2d 84 ef 01 c0    	fldcw  WORD PTR ds:0xc001ef84
c001efc7:	c3                   	ret    

c001efc8 <x87Close>:
c001efc8:	c3                   	ret    
c001efc9:	66 90                	xchg   ax,ax
c001efcb:	90                   	nop

c001efcc <__do_global_ctors_aux>:
c001efcc:	a1 80 ff 01 c0       	mov    eax,ds:0xc001ff80
c001efd1:	83 f8 ff             	cmp    eax,0xffffffff
c001efd4:	74 1a                	je     c001eff0 <__do_global_ctors_aux+0x24>
c001efd6:	55                   	push   ebp
c001efd7:	89 e5                	mov    ebp,esp
c001efd9:	53                   	push   ebx
c001efda:	52                   	push   edx
c001efdb:	bb 80 ff 01 c0       	mov    ebx,0xc001ff80
c001efe0:	ff d0                	call   eax
c001efe2:	83 eb 04             	sub    ebx,0x4
c001efe5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001efe7:	83 f8 ff             	cmp    eax,0xffffffff
c001efea:	75 f4                	jne    c001efe0 <__do_global_ctors_aux+0x14>
c001efec:	58                   	pop    eax
c001efed:	5b                   	pop    ebx
c001efee:	5d                   	pop    ebp
c001efef:	c3                   	ret    
c001eff0:	c3                   	ret    
c001eff1:	66 90                	xchg   ax,ax
c001eff3:	90                   	nop

c001eff4 <__divdi3>:
c001eff4:	55                   	push   ebp
c001eff5:	57                   	push   edi
c001eff6:	56                   	push   esi
c001eff7:	53                   	push   ebx
c001eff8:	83 ec 1c             	sub    esp,0x1c
c001effb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001efff:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f003:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f006:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f00a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f00e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f012:	85 db                	test   ebx,ebx
c001f014:	0f 88 8e 00 00 00    	js     c001f0a8 <__divdi3+0xb4>
c001f01a:	89 dd                	mov    ebp,ebx
c001f01c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f024:	89 d3                	mov    ebx,edx
c001f026:	85 d2                	test   edx,edx
c001f028:	79 0d                	jns    c001f037 <__divdi3+0x43>
c001f02a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f02e:	f7 d8                	neg    eax
c001f030:	83 d2 00             	adc    edx,0x0
c001f033:	f7 da                	neg    edx
c001f035:	89 d3                	mov    ebx,edx
c001f037:	89 c7                	mov    edi,eax
c001f039:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f03c:	85 db                	test   ebx,ebx
c001f03e:	75 48                	jne    c001f088 <__divdi3+0x94>
c001f040:	39 ef                	cmp    edi,ebp
c001f042:	76 24                	jbe    c001f068 <__divdi3+0x74>
c001f044:	89 ea                	mov    edx,ebp
c001f046:	f7 f7                	div    edi
c001f048:	89 c1                	mov    ecx,eax
c001f04a:	31 f6                	xor    esi,esi
c001f04c:	89 c8                	mov    eax,ecx
c001f04e:	89 f2                	mov    edx,esi
c001f050:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f054:	85 c9                	test   ecx,ecx
c001f056:	74 07                	je     c001f05f <__divdi3+0x6b>
c001f058:	f7 d8                	neg    eax
c001f05a:	83 d2 00             	adc    edx,0x0
c001f05d:	f7 da                	neg    edx
c001f05f:	83 c4 1c             	add    esp,0x1c
c001f062:	5b                   	pop    ebx
c001f063:	5e                   	pop    esi
c001f064:	5f                   	pop    edi
c001f065:	5d                   	pop    ebp
c001f066:	c3                   	ret    
c001f067:	90                   	nop
c001f068:	85 ff                	test   edi,edi
c001f06a:	75 0b                	jne    c001f077 <__divdi3+0x83>
c001f06c:	b8 01 00 00 00       	mov    eax,0x1
c001f071:	31 d2                	xor    edx,edx
c001f073:	f7 f3                	div    ebx
c001f075:	89 c7                	mov    edi,eax
c001f077:	31 d2                	xor    edx,edx
c001f079:	89 e8                	mov    eax,ebp
c001f07b:	f7 f7                	div    edi
c001f07d:	89 c6                	mov    esi,eax
c001f07f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f082:	f7 f7                	div    edi
c001f084:	89 c1                	mov    ecx,eax
c001f086:	eb c4                	jmp    c001f04c <__divdi3+0x58>
c001f088:	39 eb                	cmp    ebx,ebp
c001f08a:	77 3c                	ja     c001f0c8 <__divdi3+0xd4>
c001f08c:	0f bd f3             	bsr    esi,ebx
c001f08f:	83 f6 1f             	xor    esi,0x1f
c001f092:	75 40                	jne    c001f0d4 <__divdi3+0xe0>
c001f094:	39 eb                	cmp    ebx,ebp
c001f096:	72 09                	jb     c001f0a1 <__divdi3+0xad>
c001f098:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f09b:	0f 87 97 00 00 00    	ja     c001f138 <__divdi3+0x144>
c001f0a1:	b9 01 00 00 00       	mov    ecx,0x1
c001f0a6:	eb a4                	jmp    c001f04c <__divdi3+0x58>
c001f0a8:	f7 d9                	neg    ecx
c001f0aa:	83 d3 00             	adc    ebx,0x0
c001f0ad:	f7 db                	neg    ebx
c001f0af:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f0b2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f0b6:	89 dd                	mov    ebp,ebx
c001f0b8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f0c0:	e9 5f ff ff ff       	jmp    c001f024 <__divdi3+0x30>
c001f0c5:	8d 76 00             	lea    esi,[esi+0x0]
c001f0c8:	31 f6                	xor    esi,esi
c001f0ca:	31 c9                	xor    ecx,ecx
c001f0cc:	e9 7b ff ff ff       	jmp    c001f04c <__divdi3+0x58>
c001f0d1:	8d 76 00             	lea    esi,[esi+0x0]
c001f0d4:	b8 20 00 00 00       	mov    eax,0x20
c001f0d9:	29 f0                	sub    eax,esi
c001f0db:	89 f1                	mov    ecx,esi
c001f0dd:	d3 e3                	shl    ebx,cl
c001f0df:	89 fa                	mov    edx,edi
c001f0e1:	88 c1                	mov    cl,al
c001f0e3:	d3 ea                	shr    edx,cl
c001f0e5:	09 da                	or     edx,ebx
c001f0e7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f0eb:	89 f1                	mov    ecx,esi
c001f0ed:	d3 e7                	shl    edi,cl
c001f0ef:	89 eb                	mov    ebx,ebp
c001f0f1:	88 c1                	mov    cl,al
c001f0f3:	d3 eb                	shr    ebx,cl
c001f0f5:	89 f1                	mov    ecx,esi
c001f0f7:	d3 e5                	shl    ebp,cl
c001f0f9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f0fc:	88 c1                	mov    cl,al
c001f0fe:	d3 ea                	shr    edx,cl
c001f100:	09 d5                	or     ebp,edx
c001f102:	89 e8                	mov    eax,ebp
c001f104:	89 da                	mov    edx,ebx
c001f106:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f10a:	89 d3                	mov    ebx,edx
c001f10c:	89 c5                	mov    ebp,eax
c001f10e:	f7 e7                	mul    edi
c001f110:	39 d3                	cmp    ebx,edx
c001f112:	72 18                	jb     c001f12c <__divdi3+0x138>
c001f114:	74 0a                	je     c001f120 <__divdi3+0x12c>
c001f116:	89 e9                	mov    ecx,ebp
c001f118:	31 f6                	xor    esi,esi
c001f11a:	e9 2d ff ff ff       	jmp    c001f04c <__divdi3+0x58>
c001f11f:	90                   	nop
c001f120:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f123:	89 f1                	mov    ecx,esi
c001f125:	d3 e7                	shl    edi,cl
c001f127:	39 c7                	cmp    edi,eax
c001f129:	73 eb                	jae    c001f116 <__divdi3+0x122>
c001f12b:	90                   	nop
c001f12c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f12f:	31 f6                	xor    esi,esi
c001f131:	e9 16 ff ff ff       	jmp    c001f04c <__divdi3+0x58>
c001f136:	66 90                	xchg   ax,ax
c001f138:	31 c9                	xor    ecx,ecx
c001f13a:	e9 0d ff ff ff       	jmp    c001f04c <__divdi3+0x58>
c001f13f:	90                   	nop

c001f140 <__moddi3>:
c001f140:	55                   	push   ebp
c001f141:	57                   	push   edi
c001f142:	56                   	push   esi
c001f143:	53                   	push   ebx
c001f144:	83 ec 2c             	sub    esp,0x2c
c001f147:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f14b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f14f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f153:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f157:	85 db                	test   ebx,ebx
c001f159:	0f 88 85 00 00 00    	js     c001f1e4 <__moddi3+0xa4>
c001f15f:	89 de                	mov    esi,ebx
c001f161:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f169:	89 d7                	mov    edi,edx
c001f16b:	85 d2                	test   edx,edx
c001f16d:	79 09                	jns    c001f178 <__moddi3+0x38>
c001f16f:	f7 d8                	neg    eax
c001f171:	83 d2 00             	adc    edx,0x0
c001f174:	f7 da                	neg    edx
c001f176:	89 d7                	mov    edi,edx
c001f178:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f17c:	89 cd                	mov    ebp,ecx
c001f17e:	85 ff                	test   edi,edi
c001f180:	75 52                	jne    c001f1d4 <__moddi3+0x94>
c001f182:	89 c3                	mov    ebx,eax
c001f184:	39 f0                	cmp    eax,esi
c001f186:	76 24                	jbe    c001f1ac <__moddi3+0x6c>
c001f188:	89 c8                	mov    eax,ecx
c001f18a:	89 f2                	mov    edx,esi
c001f18c:	f7 f3                	div    ebx
c001f18e:	89 d6                	mov    esi,edx
c001f190:	89 f0                	mov    eax,esi
c001f192:	31 d2                	xor    edx,edx
c001f194:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f198:	85 c9                	test   ecx,ecx
c001f19a:	74 07                	je     c001f1a3 <__moddi3+0x63>
c001f19c:	f7 d8                	neg    eax
c001f19e:	83 d2 00             	adc    edx,0x0
c001f1a1:	f7 da                	neg    edx
c001f1a3:	83 c4 2c             	add    esp,0x2c
c001f1a6:	5b                   	pop    ebx
c001f1a7:	5e                   	pop    esi
c001f1a8:	5f                   	pop    edi
c001f1a9:	5d                   	pop    ebp
c001f1aa:	c3                   	ret    
c001f1ab:	90                   	nop
c001f1ac:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f1b0:	85 db                	test   ebx,ebx
c001f1b2:	75 0d                	jne    c001f1c1 <__moddi3+0x81>
c001f1b4:	b8 01 00 00 00       	mov    eax,0x1
c001f1b9:	31 d2                	xor    edx,edx
c001f1bb:	f7 f7                	div    edi
c001f1bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f1c1:	89 f0                	mov    eax,esi
c001f1c3:	31 d2                	xor    edx,edx
c001f1c5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f1c9:	f7 f7                	div    edi
c001f1cb:	89 e8                	mov    eax,ebp
c001f1cd:	f7 f7                	div    edi
c001f1cf:	89 d6                	mov    esi,edx
c001f1d1:	eb bd                	jmp    c001f190 <__moddi3+0x50>
c001f1d3:	90                   	nop
c001f1d4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f1d8:	39 f7                	cmp    edi,esi
c001f1da:	76 20                	jbe    c001f1fc <__moddi3+0xbc>
c001f1dc:	89 c8                	mov    eax,ecx
c001f1de:	89 f2                	mov    edx,esi
c001f1e0:	eb b2                	jmp    c001f194 <__moddi3+0x54>
c001f1e2:	66 90                	xchg   ax,ax
c001f1e4:	f7 d9                	neg    ecx
c001f1e6:	83 d3 00             	adc    ebx,0x0
c001f1e9:	f7 db                	neg    ebx
c001f1eb:	89 de                	mov    esi,ebx
c001f1ed:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f1f5:	e9 6f ff ff ff       	jmp    c001f169 <__moddi3+0x29>
c001f1fa:	66 90                	xchg   ax,ax
c001f1fc:	0f bd c7             	bsr    eax,edi
c001f1ff:	83 f0 1f             	xor    eax,0x1f
c001f202:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f206:	75 24                	jne    c001f22c <__moddi3+0xec>
c001f208:	39 f7                	cmp    edi,esi
c001f20a:	72 06                	jb     c001f212 <__moddi3+0xd2>
c001f20c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f210:	77 0c                	ja     c001f21e <__moddi3+0xde>
c001f212:	89 e9                	mov    ecx,ebp
c001f214:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f218:	19 fe                	sbb    esi,edi
c001f21a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f21e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f222:	89 f2                	mov    edx,esi
c001f224:	e9 6b ff ff ff       	jmp    c001f194 <__moddi3+0x54>
c001f229:	8d 76 00             	lea    esi,[esi+0x0]
c001f22c:	b8 20 00 00 00       	mov    eax,0x20
c001f231:	89 c2                	mov    edx,eax
c001f233:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f237:	29 da                	sub    edx,ebx
c001f239:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f23d:	88 d9                	mov    cl,bl
c001f23f:	d3 e7                	shl    edi,cl
c001f241:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f245:	88 d1                	mov    cl,dl
c001f247:	d3 e8                	shr    eax,cl
c001f249:	09 c7                	or     edi,eax
c001f24b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f24f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f253:	89 d8                	mov    eax,ebx
c001f255:	88 d9                	mov    cl,bl
c001f257:	d3 e7                	shl    edi,cl
c001f259:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f25d:	89 f3                	mov    ebx,esi
c001f25f:	88 d1                	mov    cl,dl
c001f261:	d3 eb                	shr    ebx,cl
c001f263:	89 c7                	mov    edi,eax
c001f265:	88 c1                	mov    cl,al
c001f267:	d3 e6                	shl    esi,cl
c001f269:	89 e8                	mov    eax,ebp
c001f26b:	88 d1                	mov    cl,dl
c001f26d:	d3 e8                	shr    eax,cl
c001f26f:	09 f0                	or     eax,esi
c001f271:	89 f9                	mov    ecx,edi
c001f273:	d3 e5                	shl    ebp,cl
c001f275:	89 da                	mov    edx,ebx
c001f277:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f27b:	89 d3                	mov    ebx,edx
c001f27d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f281:	89 c6                	mov    esi,eax
c001f283:	89 d1                	mov    ecx,edx
c001f285:	39 d3                	cmp    ebx,edx
c001f287:	72 27                	jb     c001f2b0 <__moddi3+0x170>
c001f289:	74 21                	je     c001f2ac <__moddi3+0x16c>
c001f28b:	29 f5                	sub    ebp,esi
c001f28d:	19 cb                	sbb    ebx,ecx
c001f28f:	89 de                	mov    esi,ebx
c001f291:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f295:	d3 e6                	shl    esi,cl
c001f297:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f29b:	89 f9                	mov    ecx,edi
c001f29d:	d3 ed                	shr    ebp,cl
c001f29f:	09 ee                	or     esi,ebp
c001f2a1:	89 f0                	mov    eax,esi
c001f2a3:	d3 eb                	shr    ebx,cl
c001f2a5:	89 da                	mov    edx,ebx
c001f2a7:	e9 e8 fe ff ff       	jmp    c001f194 <__moddi3+0x54>
c001f2ac:	39 c5                	cmp    ebp,eax
c001f2ae:	73 db                	jae    c001f28b <__moddi3+0x14b>
c001f2b0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f2b4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f2b8:	89 d1                	mov    ecx,edx
c001f2ba:	89 c6                	mov    esi,eax
c001f2bc:	eb cd                	jmp    c001f28b <__moddi3+0x14b>
c001f2be:	66 90                	xchg   ax,ax

c001f2c0 <__udivdi3>:
c001f2c0:	55                   	push   ebp
c001f2c1:	57                   	push   edi
c001f2c2:	56                   	push   esi
c001f2c3:	53                   	push   ebx
c001f2c4:	83 ec 1c             	sub    esp,0x1c
c001f2c7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f2cb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f2cf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f2d3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f2d7:	85 d2                	test   edx,edx
c001f2d9:	75 41                	jne    c001f31c <__udivdi3+0x5c>
c001f2db:	39 f7                	cmp    edi,esi
c001f2dd:	76 15                	jbe    c001f2f4 <__udivdi3+0x34>
c001f2df:	89 e8                	mov    eax,ebp
c001f2e1:	89 f2                	mov    edx,esi
c001f2e3:	f7 f7                	div    edi
c001f2e5:	31 db                	xor    ebx,ebx
c001f2e7:	89 da                	mov    edx,ebx
c001f2e9:	83 c4 1c             	add    esp,0x1c
c001f2ec:	5b                   	pop    ebx
c001f2ed:	5e                   	pop    esi
c001f2ee:	5f                   	pop    edi
c001f2ef:	5d                   	pop    ebp
c001f2f0:	c3                   	ret    
c001f2f1:	8d 76 00             	lea    esi,[esi+0x0]
c001f2f4:	89 f9                	mov    ecx,edi
c001f2f6:	85 ff                	test   edi,edi
c001f2f8:	75 0b                	jne    c001f305 <__udivdi3+0x45>
c001f2fa:	b8 01 00 00 00       	mov    eax,0x1
c001f2ff:	31 d2                	xor    edx,edx
c001f301:	f7 f7                	div    edi
c001f303:	89 c1                	mov    ecx,eax
c001f305:	31 d2                	xor    edx,edx
c001f307:	89 f0                	mov    eax,esi
c001f309:	f7 f1                	div    ecx
c001f30b:	89 c3                	mov    ebx,eax
c001f30d:	89 e8                	mov    eax,ebp
c001f30f:	f7 f1                	div    ecx
c001f311:	89 da                	mov    edx,ebx
c001f313:	83 c4 1c             	add    esp,0x1c
c001f316:	5b                   	pop    ebx
c001f317:	5e                   	pop    esi
c001f318:	5f                   	pop    edi
c001f319:	5d                   	pop    ebp
c001f31a:	c3                   	ret    
c001f31b:	90                   	nop
c001f31c:	39 f2                	cmp    edx,esi
c001f31e:	77 1c                	ja     c001f33c <__udivdi3+0x7c>
c001f320:	0f bd da             	bsr    ebx,edx
c001f323:	83 f3 1f             	xor    ebx,0x1f
c001f326:	75 24                	jne    c001f34c <__udivdi3+0x8c>
c001f328:	39 f2                	cmp    edx,esi
c001f32a:	72 08                	jb     c001f334 <__udivdi3+0x74>
c001f32c:	39 ef                	cmp    edi,ebp
c001f32e:	0f 87 84 00 00 00    	ja     c001f3b8 <__udivdi3+0xf8>
c001f334:	b8 01 00 00 00       	mov    eax,0x1
c001f339:	eb ac                	jmp    c001f2e7 <__udivdi3+0x27>
c001f33b:	90                   	nop
c001f33c:	31 db                	xor    ebx,ebx
c001f33e:	31 c0                	xor    eax,eax
c001f340:	89 da                	mov    edx,ebx
c001f342:	83 c4 1c             	add    esp,0x1c
c001f345:	5b                   	pop    ebx
c001f346:	5e                   	pop    esi
c001f347:	5f                   	pop    edi
c001f348:	5d                   	pop    ebp
c001f349:	c3                   	ret    
c001f34a:	66 90                	xchg   ax,ax
c001f34c:	b8 20 00 00 00       	mov    eax,0x20
c001f351:	29 d8                	sub    eax,ebx
c001f353:	88 d9                	mov    cl,bl
c001f355:	d3 e2                	shl    edx,cl
c001f357:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f35b:	89 fa                	mov    edx,edi
c001f35d:	88 c1                	mov    cl,al
c001f35f:	d3 ea                	shr    edx,cl
c001f361:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f365:	09 d1                	or     ecx,edx
c001f367:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f36b:	88 d9                	mov    cl,bl
c001f36d:	d3 e7                	shl    edi,cl
c001f36f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f373:	89 f7                	mov    edi,esi
c001f375:	88 c1                	mov    cl,al
c001f377:	d3 ef                	shr    edi,cl
c001f379:	88 d9                	mov    cl,bl
c001f37b:	d3 e6                	shl    esi,cl
c001f37d:	89 ea                	mov    edx,ebp
c001f37f:	88 c1                	mov    cl,al
c001f381:	d3 ea                	shr    edx,cl
c001f383:	09 d6                	or     esi,edx
c001f385:	89 f0                	mov    eax,esi
c001f387:	89 fa                	mov    edx,edi
c001f389:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f38d:	89 d7                	mov    edi,edx
c001f38f:	89 c6                	mov    esi,eax
c001f391:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f395:	39 d7                	cmp    edi,edx
c001f397:	72 13                	jb     c001f3ac <__udivdi3+0xec>
c001f399:	74 09                	je     c001f3a4 <__udivdi3+0xe4>
c001f39b:	89 f0                	mov    eax,esi
c001f39d:	31 db                	xor    ebx,ebx
c001f39f:	e9 43 ff ff ff       	jmp    c001f2e7 <__udivdi3+0x27>
c001f3a4:	88 d9                	mov    cl,bl
c001f3a6:	d3 e5                	shl    ebp,cl
c001f3a8:	39 c5                	cmp    ebp,eax
c001f3aa:	73 ef                	jae    c001f39b <__udivdi3+0xdb>
c001f3ac:	8d 46 ff             	lea    eax,[esi-0x1]
c001f3af:	31 db                	xor    ebx,ebx
c001f3b1:	e9 31 ff ff ff       	jmp    c001f2e7 <__udivdi3+0x27>
c001f3b6:	66 90                	xchg   ax,ax
c001f3b8:	31 c0                	xor    eax,eax
c001f3ba:	e9 28 ff ff ff       	jmp    c001f2e7 <__udivdi3+0x27>
c001f3bf:	90                   	nop

c001f3c0 <__umoddi3>:
c001f3c0:	55                   	push   ebp
c001f3c1:	57                   	push   edi
c001f3c2:	56                   	push   esi
c001f3c3:	53                   	push   ebx
c001f3c4:	83 ec 1c             	sub    esp,0x1c
c001f3c7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f3cb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f3cf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f3d3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f3d7:	89 da                	mov    edx,ebx
c001f3d9:	85 c0                	test   eax,eax
c001f3db:	75 37                	jne    c001f414 <__umoddi3+0x54>
c001f3dd:	39 df                	cmp    edi,ebx
c001f3df:	76 13                	jbe    c001f3f4 <__umoddi3+0x34>
c001f3e1:	89 f0                	mov    eax,esi
c001f3e3:	f7 f7                	div    edi
c001f3e5:	89 d0                	mov    eax,edx
c001f3e7:	31 d2                	xor    edx,edx
c001f3e9:	83 c4 1c             	add    esp,0x1c
c001f3ec:	5b                   	pop    ebx
c001f3ed:	5e                   	pop    esi
c001f3ee:	5f                   	pop    edi
c001f3ef:	5d                   	pop    ebp
c001f3f0:	c3                   	ret    
c001f3f1:	8d 76 00             	lea    esi,[esi+0x0]
c001f3f4:	89 fd                	mov    ebp,edi
c001f3f6:	85 ff                	test   edi,edi
c001f3f8:	75 0b                	jne    c001f405 <__umoddi3+0x45>
c001f3fa:	b8 01 00 00 00       	mov    eax,0x1
c001f3ff:	31 d2                	xor    edx,edx
c001f401:	f7 f7                	div    edi
c001f403:	89 c5                	mov    ebp,eax
c001f405:	89 d8                	mov    eax,ebx
c001f407:	31 d2                	xor    edx,edx
c001f409:	f7 f5                	div    ebp
c001f40b:	89 f0                	mov    eax,esi
c001f40d:	f7 f5                	div    ebp
c001f40f:	89 d0                	mov    eax,edx
c001f411:	eb d4                	jmp    c001f3e7 <__umoddi3+0x27>
c001f413:	90                   	nop
c001f414:	89 f1                	mov    ecx,esi
c001f416:	39 d8                	cmp    eax,ebx
c001f418:	76 0a                	jbe    c001f424 <__umoddi3+0x64>
c001f41a:	89 f0                	mov    eax,esi
c001f41c:	83 c4 1c             	add    esp,0x1c
c001f41f:	5b                   	pop    ebx
c001f420:	5e                   	pop    esi
c001f421:	5f                   	pop    edi
c001f422:	5d                   	pop    ebp
c001f423:	c3                   	ret    
c001f424:	0f bd e8             	bsr    ebp,eax
c001f427:	83 f5 1f             	xor    ebp,0x1f
c001f42a:	75 1c                	jne    c001f448 <__umoddi3+0x88>
c001f42c:	39 d8                	cmp    eax,ebx
c001f42e:	72 04                	jb     c001f434 <__umoddi3+0x74>
c001f430:	39 f7                	cmp    edi,esi
c001f432:	77 08                	ja     c001f43c <__umoddi3+0x7c>
c001f434:	89 da                	mov    edx,ebx
c001f436:	29 fe                	sub    esi,edi
c001f438:	19 c2                	sbb    edx,eax
c001f43a:	89 f1                	mov    ecx,esi
c001f43c:	89 c8                	mov    eax,ecx
c001f43e:	83 c4 1c             	add    esp,0x1c
c001f441:	5b                   	pop    ebx
c001f442:	5e                   	pop    esi
c001f443:	5f                   	pop    edi
c001f444:	5d                   	pop    ebp
c001f445:	c3                   	ret    
c001f446:	66 90                	xchg   ax,ax
c001f448:	ba 20 00 00 00       	mov    edx,0x20
c001f44d:	29 ea                	sub    edx,ebp
c001f44f:	89 e9                	mov    ecx,ebp
c001f451:	d3 e0                	shl    eax,cl
c001f453:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f457:	89 f8                	mov    eax,edi
c001f459:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f45d:	88 d1                	mov    cl,dl
c001f45f:	d3 e8                	shr    eax,cl
c001f461:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f465:	09 c1                	or     ecx,eax
c001f467:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f46b:	89 e9                	mov    ecx,ebp
c001f46d:	d3 e7                	shl    edi,cl
c001f46f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f473:	89 d8                	mov    eax,ebx
c001f475:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f479:	88 d1                	mov    cl,dl
c001f47b:	d3 e8                	shr    eax,cl
c001f47d:	89 c7                	mov    edi,eax
c001f47f:	89 e9                	mov    ecx,ebp
c001f481:	d3 e3                	shl    ebx,cl
c001f483:	89 f0                	mov    eax,esi
c001f485:	88 d1                	mov    cl,dl
c001f487:	d3 e8                	shr    eax,cl
c001f489:	09 d8                	or     eax,ebx
c001f48b:	89 e9                	mov    ecx,ebp
c001f48d:	d3 e6                	shl    esi,cl
c001f48f:	89 f3                	mov    ebx,esi
c001f491:	89 fa                	mov    edx,edi
c001f493:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f497:	89 d1                	mov    ecx,edx
c001f499:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f49d:	89 c6                	mov    esi,eax
c001f49f:	89 d7                	mov    edi,edx
c001f4a1:	39 d1                	cmp    ecx,edx
c001f4a3:	72 27                	jb     c001f4cc <__umoddi3+0x10c>
c001f4a5:	74 21                	je     c001f4c8 <__umoddi3+0x108>
c001f4a7:	89 ca                	mov    edx,ecx
c001f4a9:	29 f3                	sub    ebx,esi
c001f4ab:	19 fa                	sbb    edx,edi
c001f4ad:	89 d0                	mov    eax,edx
c001f4af:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f4b3:	d3 e0                	shl    eax,cl
c001f4b5:	89 e9                	mov    ecx,ebp
c001f4b7:	d3 eb                	shr    ebx,cl
c001f4b9:	09 d8                	or     eax,ebx
c001f4bb:	d3 ea                	shr    edx,cl
c001f4bd:	83 c4 1c             	add    esp,0x1c
c001f4c0:	5b                   	pop    ebx
c001f4c1:	5e                   	pop    esi
c001f4c2:	5f                   	pop    edi
c001f4c3:	5d                   	pop    ebp
c001f4c4:	c3                   	ret    
c001f4c5:	8d 76 00             	lea    esi,[esi+0x0]
c001f4c8:	39 c3                	cmp    ebx,eax
c001f4ca:	73 db                	jae    c001f4a7 <__umoddi3+0xe7>
c001f4cc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f4d0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f4d4:	89 d7                	mov    edi,edx
c001f4d6:	89 c6                	mov    esi,eax
c001f4d8:	eb cd                	jmp    c001f4a7 <__umoddi3+0xe7>

Disassembly of section .init:

c001f4da <_init>:
c001f4da:	55                   	push   ebp
c001f4db:	89 e5                	mov    ebp,esp
c001f4dd:	e8 12 0c fe ff       	call   c00000f4 <frame_dummy>
c001f4e2:	e8 e5 fa ff ff       	call   c001efcc <__do_global_ctors_aux>
c001f4e7:	5d                   	pop    ebp
c001f4e8:	c3                   	ret    

Disassembly of section .fini:

c001f4e9 <_fini>:
c001f4e9:	55                   	push   ebp
c001f4ea:	89 e5                	mov    ebp,esp
c001f4ec:	e8 93 0b fe ff       	call   c0000084 <__do_global_dtors_aux>
c001f4f1:	5d                   	pop    ebp
c001f4f2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f4f4 <Computer::~Computer()>:
c001f4f4:	83 ec 0c             	sub    esp,0xc
c001f4f7:	ba 14 08 02 c0       	mov    edx,0xc0020814
c001f4fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f500:	89 10                	mov    DWORD PTR [eax],edx
c001f502:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f506:	83 ec 0c             	sub    esp,0xc
c001f509:	50                   	push   eax
c001f50a:	e8 5f d1 fe ff       	call   c000c66e <Device::~Device()>
c001f50f:	83 c4 10             	add    esp,0x10
c001f512:	90                   	nop
c001f513:	83 c4 0c             	add    esp,0xc
c001f516:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f518 <Computer::~Computer()>:
c001f518:	83 ec 0c             	sub    esp,0xc
c001f51b:	83 ec 0c             	sub    esp,0xc
c001f51e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f522:	e8 cd ff ff ff       	call   c001f4f4 <Computer::~Computer()>
c001f527:	83 c4 10             	add    esp,0x10
c001f52a:	83 ec 08             	sub    esp,0x8
c001f52d:	68 70 01 00 00       	push   0x170
c001f532:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f536:	e8 d1 b2 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f53b:	83 c4 10             	add    esp,0x10
c001f53e:	83 c4 0c             	add    esp,0xc
c001f541:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f542 <idleCommon()>:
c001f542:	83 ec 0c             	sub    esp,0xc
c001f545:	fa                   	cli    
c001f546:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001f54c:	e8 b7 66 ff ff       	call   c0015c08 <schedule()>
c001f551:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001f556:	48                   	dec    eax
c001f557:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001f55c:	75 01                	jne    c001f55f <idleCommon()+0x1d>
c001f55e:	fb                   	sti    
c001f55f:	83 c4 0c             	add    esp,0xc
c001f562:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f564 <LinkedList<UnixFile>::~LinkedList()>:
c001f564:	90                   	nop
c001f565:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f566 <LinkedList<UnixFile>::LinkedList()>:
c001f566:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f56a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f570:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f574:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f57b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f57f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f586:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f58a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f590:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f594:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f59b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f59f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f5a6:	90                   	nop
c001f5a7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f5a8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f5a8:	83 ec 0c             	sub    esp,0xc
c001f5ab:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f5b0:	75 10                	jne    c001f5c2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f5b2:	83 ec 0c             	sub    esp,0xc
c001f5b5:	68 28 0a 02 c0       	push   0xc0020a28
c001f5ba:	e8 4a 1d ff ff       	call   c0011309 <KePanic(char const*)>
c001f5bf:	83 c4 10             	add    esp,0x10
c001f5c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5c6:	8b 00                	mov    eax,DWORD PTR [eax]
c001f5c8:	85 c0                	test   eax,eax
c001f5ca:	74 34                	je     c001f600 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f5cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f5d3:	85 c0                	test   eax,eax
c001f5d5:	74 29                	je     c001f600 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f5d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5db:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f5de:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f5e2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f5e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5e9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f5ed:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f5f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f5f7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f5fe:	eb 65                	jmp    c001f665 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f604:	8b 00                	mov    eax,DWORD PTR [eax]
c001f606:	85 c0                	test   eax,eax
c001f608:	75 4b                	jne    c001f655 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f60a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f60e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f611:	85 c0                	test   eax,eax
c001f613:	75 40                	jne    c001f655 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f615:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f619:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f61d:	89 10                	mov    DWORD PTR [eax],edx
c001f61f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f623:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f627:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f62a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f62e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f631:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f63c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f63f:	85 c0                	test   eax,eax
c001f641:	74 22                	je     c001f665 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f643:	83 ec 0c             	sub    esp,0xc
c001f646:	68 4a 0a 02 c0       	push   0xc0020a4a
c001f64b:	e8 b9 1c ff ff       	call   c0011309 <KePanic(char const*)>
c001f650:	83 c4 10             	add    esp,0x10
c001f653:	eb 10                	jmp    c001f665 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f655:	83 ec 0c             	sub    esp,0xc
c001f658:	68 54 0a 02 c0       	push   0xc0020a54
c001f65d:	e8 a7 1c ff ff       	call   c0011309 <KePanic(char const*)>
c001f662:	83 c4 10             	add    esp,0x10
c001f665:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f669:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f66c:	8d 50 01             	lea    edx,[eax+0x1]
c001f66f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f673:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f676:	90                   	nop
c001f677:	83 c4 0c             	add    esp,0xc
c001f67a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f67c <LinkedList<UnixFile>::getFirstElement()>:
c001f67c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f680:	8b 00                	mov    eax,DWORD PTR [eax]
c001f682:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f684 <LinkedList<UnixFile>::removeFirst()>:
c001f684:	83 ec 0c             	sub    esp,0xc
c001f687:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f68b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f68d:	85 c0                	test   eax,eax
c001f68f:	75 12                	jne    c001f6a3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f691:	83 ec 0c             	sub    esp,0xc
c001f694:	68 60 0a 02 c0       	push   0xc0020a60
c001f699:	e8 6b 1c ff ff       	call   c0011309 <KePanic(char const*)>
c001f69e:	83 c4 10             	add    esp,0x10
c001f6a1:	eb 7e                	jmp    c001f721 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f6a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6a7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f6aa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f6ad:	85 c0                	test   eax,eax
c001f6af:	74 10                	je     c001f6c1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f6b1:	83 ec 0c             	sub    esp,0xc
c001f6b4:	68 ab 0a 02 c0       	push   0xc0020aab
c001f6b9:	e8 4b 1c ff ff       	call   c0011309 <KePanic(char const*)>
c001f6be:	83 c4 10             	add    esp,0x10
c001f6c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6c5:	8b 00                	mov    eax,DWORD PTR [eax]
c001f6c7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f6ca:	85 c0                	test   eax,eax
c001f6cc:	75 33                	jne    c001f701 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f6ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f6d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6dc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f6e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6e7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f6ea:	83 f8 01             	cmp    eax,0x1
c001f6ed:	74 21                	je     c001f710 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f6ef:	83 ec 0c             	sub    esp,0xc
c001f6f2:	68 84 0a 02 c0       	push   0xc0020a84
c001f6f7:	e8 0d 1c ff ff       	call   c0011309 <KePanic(char const*)>
c001f6fc:	83 c4 10             	add    esp,0x10
c001f6ff:	eb 0f                	jmp    c001f710 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f701:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f705:	8b 00                	mov    eax,DWORD PTR [eax]
c001f707:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f70a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f70e:	89 10                	mov    DWORD PTR [eax],edx
c001f710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f714:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f717:	8d 50 ff             	lea    edx,[eax-0x1]
c001f71a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f71e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f721:	83 c4 0c             	add    esp,0xc
c001f724:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f726 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f726:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f72a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f72d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f72e <DriverlessDevice::~DriverlessDevice()>:
c001f72e:	ba 5c 16 02 c0       	mov    edx,0xc002165c
c001f733:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f737:	89 10                	mov    DWORD PTR [eax],edx
c001f739:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f73d:	50                   	push   eax
c001f73e:	e8 2b cf fe ff       	call   c000c66e <Device::~Device()>
c001f743:	83 c4 04             	add    esp,0x4
c001f746:	90                   	nop
c001f747:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f748 <DriverlessDevice::~DriverlessDevice()>:
c001f748:	83 ec 0c             	sub    esp,0xc
c001f74b:	83 ec 0c             	sub    esp,0xc
c001f74e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f752:	e8 d7 ff ff ff       	call   c001f72e <DriverlessDevice::~DriverlessDevice()>
c001f757:	83 c4 10             	add    esp,0x10
c001f75a:	83 ec 08             	sub    esp,0x8
c001f75d:	68 58 01 00 00       	push   0x158
c001f762:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f766:	e8 a1 b0 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f76b:	83 c4 10             	add    esp,0x10
c001f76e:	83 c4 0c             	add    esp,0xc
c001f771:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001f772 <LinkedList<Device>::addElement(Device*)>:
c001f772:	83 ec 0c             	sub    esp,0xc
c001f775:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f77a:	75 10                	jne    c001f78c <LinkedList<Device>::addElement(Device*)+0x1a>
c001f77c:	83 ec 0c             	sub    esp,0xc
c001f77f:	68 28 0a 02 c0       	push   0xc0020a28
c001f784:	e8 80 1b ff ff       	call   c0011309 <KePanic(char const*)>
c001f789:	83 c4 10             	add    esp,0x10
c001f78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f790:	8b 00                	mov    eax,DWORD PTR [eax]
c001f792:	85 c0                	test   eax,eax
c001f794:	74 3a                	je     c001f7d0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f796:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f79a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f79d:	85 c0                	test   eax,eax
c001f79f:	74 2f                	je     c001f7d0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f7a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7a5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f7a8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f7ac:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001f7b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7b6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f7ba:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f7bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7c1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f7c4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f7ce:	eb 68                	jmp    c001f838 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f7d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7d4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7d6:	85 c0                	test   eax,eax
c001f7d8:	75 4e                	jne    c001f828 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f7da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f7e1:	85 c0                	test   eax,eax
c001f7e3:	75 43                	jne    c001f828 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f7e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7e9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f7ed:	89 10                	mov    DWORD PTR [eax],edx
c001f7ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7f3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f7f7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f7fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f801:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f80b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f80f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f812:	85 c0                	test   eax,eax
c001f814:	74 22                	je     c001f838 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f816:	83 ec 0c             	sub    esp,0xc
c001f819:	68 4a 0a 02 c0       	push   0xc0020a4a
c001f81e:	e8 e6 1a ff ff       	call   c0011309 <KePanic(char const*)>
c001f823:	83 c4 10             	add    esp,0x10
c001f826:	eb 10                	jmp    c001f838 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f828:	83 ec 0c             	sub    esp,0xc
c001f82b:	68 54 0a 02 c0       	push   0xc0020a54
c001f830:	e8 d4 1a ff ff       	call   c0011309 <KePanic(char const*)>
c001f835:	83 c4 10             	add    esp,0x10
c001f838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f83c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f83f:	8d 50 01             	lea    edx,[eax+0x1]
c001f842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f846:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f849:	90                   	nop
c001f84a:	83 c4 0c             	add    esp,0xc
c001f84d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001f84e <LinkedList<Device>::LinkedList()>:
c001f84e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f852:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f858:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f85c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f863:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f867:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f86e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f872:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f878:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f87c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f883:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f887:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f88e:	90                   	nop
c001f88f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001f890 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001f890:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f894:	8b 00                	mov    eax,DWORD PTR [eax]
c001f896:	85 c0                	test   eax,eax
c001f898:	75 0e                	jne    c001f8a8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f89a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f89e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8a1:	85 c0                	test   eax,eax
c001f8a3:	75 03                	jne    c001f8a8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f8a5:	b0 01                	mov    al,0x1
c001f8a7:	c3                   	ret    
c001f8a8:	b0 00                	mov    al,0x0
c001f8aa:	90                   	nop
c001f8ab:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001f8ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001f8ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8b0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8b2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001f8b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001f8b4:	83 ec 0c             	sub    esp,0xc
c001f8b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8bb:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8bd:	85 c0                	test   eax,eax
c001f8bf:	75 17                	jne    c001f8d8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001f8c1:	83 ec 0c             	sub    esp,0xc
c001f8c4:	68 60 0a 02 c0       	push   0xc0020a60
c001f8c9:	e8 3b 1a ff ff       	call   c0011309 <KePanic(char const*)>
c001f8ce:	83 c4 10             	add    esp,0x10
c001f8d1:	e9 96 00 00 00       	jmp    c001f96c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001f8d6:	66 90                	xchg   ax,ax
c001f8d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8df:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f8e2:	85 c0                	test   eax,eax
c001f8e4:	0f 95 c0             	setne  al
c001f8e7:	0f b6 c0             	movzx  eax,al
c001f8ea:	85 c0                	test   eax,eax
c001f8ec:	74 12                	je     c001f900 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001f8ee:	83 ec 0c             	sub    esp,0xc
c001f8f1:	68 ab 0a 02 c0       	push   0xc0020aab
c001f8f6:	e8 0e 1a ff ff       	call   c0011309 <KePanic(char const*)>
c001f8fb:	83 c4 10             	add    esp,0x10
c001f8fe:	66 90                	xchg   ax,ax
c001f900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f904:	8b 00                	mov    eax,DWORD PTR [eax]
c001f906:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f909:	85 c0                	test   eax,eax
c001f90b:	0f 94 c0             	sete   al
c001f90e:	0f b6 c0             	movzx  eax,al
c001f911:	85 c0                	test   eax,eax
c001f913:	74 33                	je     c001f948 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001f915:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f919:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f91f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f923:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f92a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f92e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f931:	83 f8 01             	cmp    eax,0x1
c001f934:	74 22                	je     c001f958 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f936:	83 ec 0c             	sub    esp,0xc
c001f939:	68 84 0a 02 c0       	push   0xc0020a84
c001f93e:	e8 c6 19 ff ff       	call   c0011309 <KePanic(char const*)>
c001f943:	83 c4 10             	add    esp,0x10
c001f946:	eb 10                	jmp    c001f958 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f94c:	8b 00                	mov    eax,DWORD PTR [eax]
c001f94e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001f951:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f955:	89 10                	mov    DWORD PTR [eax],edx
c001f957:	90                   	nop
c001f958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f95c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f95f:	8d 50 ff             	lea    edx,[eax-0x1]
c001f962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f966:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f969:	8d 76 00             	lea    esi,[esi+0x0]
c001f96c:	83 c4 0c             	add    esp,0xc
c001f96f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001f970 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001f970:	83 ec 0c             	sub    esp,0xc
c001f973:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f978:	75 12                	jne    c001f98c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001f97a:	83 ec 0c             	sub    esp,0xc
c001f97d:	68 28 0a 02 c0       	push   0xc0020a28
c001f982:	e8 82 19 ff ff       	call   c0011309 <KePanic(char const*)>
c001f987:	83 c4 10             	add    esp,0x10
c001f98a:	66 90                	xchg   ax,ax
c001f98c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f990:	8b 00                	mov    eax,DWORD PTR [eax]
c001f992:	85 c0                	test   eax,eax
c001f994:	74 36                	je     c001f9cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f99a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f99d:	85 c0                	test   eax,eax
c001f99f:	74 2b                	je     c001f9cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f9a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9a5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9a8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f9ac:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001f9af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f9b7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f9ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9c1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f9c8:	eb 6a                	jmp    c001fa34 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f9ca:	66 90                	xchg   ax,ax
c001f9cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9d0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9d2:	85 c0                	test   eax,eax
c001f9d4:	75 4e                	jne    c001fa24 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f9d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9dd:	85 c0                	test   eax,eax
c001f9df:	75 43                	jne    c001fa24 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f9e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9e5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f9e9:	89 10                	mov    DWORD PTR [eax],edx
c001f9eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9ef:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f9f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f9f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9fd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fa04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa08:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa0b:	85 c0                	test   eax,eax
c001fa0d:	74 25                	je     c001fa34 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fa0f:	83 ec 0c             	sub    esp,0xc
c001fa12:	68 4a 0a 02 c0       	push   0xc0020a4a
c001fa17:	e8 ed 18 ff ff       	call   c0011309 <KePanic(char const*)>
c001fa1c:	83 c4 10             	add    esp,0x10
c001fa1f:	eb 13                	jmp    c001fa34 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fa21:	8d 76 00             	lea    esi,[esi+0x0]
c001fa24:	83 ec 0c             	sub    esp,0xc
c001fa27:	68 54 0a 02 c0       	push   0xc0020a54
c001fa2c:	e8 d8 18 ff ff       	call   c0011309 <KePanic(char const*)>
c001fa31:	83 c4 10             	add    esp,0x10
c001fa34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa38:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa3b:	8d 50 01             	lea    edx,[eax+0x1]
c001fa3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa42:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fa45:	90                   	nop
c001fa46:	83 c4 0c             	add    esp,0xc
c001fa49:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001fa4c <ACPI::~ACPI()>:
c001fa4c:	83 ec 0c             	sub    esp,0xc
c001fa4f:	ba 44 1c 02 c0       	mov    edx,0xc0021c44
c001fa54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa58:	89 10                	mov    DWORD PTR [eax],edx
c001fa5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa5e:	83 ec 0c             	sub    esp,0xc
c001fa61:	50                   	push   eax
c001fa62:	e8 07 cc fe ff       	call   c000c66e <Device::~Device()>
c001fa67:	83 c4 10             	add    esp,0x10
c001fa6a:	90                   	nop
c001fa6b:	83 c4 0c             	add    esp,0xc
c001fa6e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001fa70 <ACPI::~ACPI()>:
c001fa70:	83 ec 0c             	sub    esp,0xc
c001fa73:	83 ec 0c             	sub    esp,0xc
c001fa76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa7a:	e8 cd ff ff ff       	call   c001fa4c <ACPI::~ACPI()>
c001fa7f:	83 c4 10             	add    esp,0x10
c001fa82:	83 ec 08             	sub    esp,0x8
c001fa85:	68 64 12 00 00       	push   0x1264
c001fa8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa8e:	e8 79 ad fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fa93:	83 c4 10             	add    esp,0x10
c001fa96:	83 c4 0c             	add    esp,0xc
c001fa99:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001fa9c <LinkedList<Device>::~LinkedList()>:
c001fa9c:	90                   	nop
c001fa9d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001faa0 <LinkedList<Device>::isEmpty()>:
c001faa0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faa4:	8b 00                	mov    eax,DWORD PTR [eax]
c001faa6:	85 c0                	test   eax,eax
c001faa8:	75 0e                	jne    c001fab8 <LinkedList<Device>::isEmpty()+0x18>
c001faaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fab1:	85 c0                	test   eax,eax
c001fab3:	75 03                	jne    c001fab8 <LinkedList<Device>::isEmpty()+0x18>
c001fab5:	b0 01                	mov    al,0x1
c001fab7:	c3                   	ret    
c001fab8:	b0 00                	mov    al,0x0
c001faba:	90                   	nop
c001fabb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001fabc <LinkedList<Device>::getFirstElement()>:
c001fabc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fac0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fac2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001fac4 <LinkedList<Device>::removeFirst()>:
c001fac4:	83 ec 0c             	sub    esp,0xc
c001fac7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001facb:	8b 00                	mov    eax,DWORD PTR [eax]
c001facd:	85 c0                	test   eax,eax
c001facf:	75 17                	jne    c001fae8 <LinkedList<Device>::removeFirst()+0x24>
c001fad1:	83 ec 0c             	sub    esp,0xc
c001fad4:	68 60 0a 02 c0       	push   0xc0020a60
c001fad9:	e8 2b 18 ff ff       	call   c0011309 <KePanic(char const*)>
c001fade:	83 c4 10             	add    esp,0x10
c001fae1:	e9 92 00 00 00       	jmp    c001fb78 <LinkedList<Device>::removeFirst()+0xb4>
c001fae6:	66 90                	xchg   ax,ax
c001fae8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001faef:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001faf5:	85 c0                	test   eax,eax
c001faf7:	74 13                	je     c001fb0c <LinkedList<Device>::removeFirst()+0x48>
c001faf9:	83 ec 0c             	sub    esp,0xc
c001fafc:	68 ab 0a 02 c0       	push   0xc0020aab
c001fb01:	e8 03 18 ff ff       	call   c0011309 <KePanic(char const*)>
c001fb06:	83 c4 10             	add    esp,0x10
c001fb09:	8d 76 00             	lea    esi,[esi+0x0]
c001fb0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb10:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb12:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001fb18:	85 c0                	test   eax,eax
c001fb1a:	75 34                	jne    c001fb50 <LinkedList<Device>::removeFirst()+0x8c>
c001fb1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb20:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb2a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb35:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb38:	83 f8 01             	cmp    eax,0x1
c001fb3b:	74 27                	je     c001fb64 <LinkedList<Device>::removeFirst()+0xa0>
c001fb3d:	83 ec 0c             	sub    esp,0xc
c001fb40:	68 84 0a 02 c0       	push   0xc0020a84
c001fb45:	e8 bf 17 ff ff       	call   c0011309 <KePanic(char const*)>
c001fb4a:	83 c4 10             	add    esp,0x10
c001fb4d:	eb 15                	jmp    c001fb64 <LinkedList<Device>::removeFirst()+0xa0>
c001fb4f:	90                   	nop
c001fb50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb54:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb56:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001fb5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb60:	89 10                	mov    DWORD PTR [eax],edx
c001fb62:	66 90                	xchg   ax,ax
c001fb64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb68:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb6b:	8d 50 ff             	lea    edx,[eax-0x1]
c001fb6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb72:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fb75:	8d 76 00             	lea    esi,[esi+0x0]
c001fb78:	83 c4 0c             	add    esp,0xc
c001fb7b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001fb7c <CPU::~CPU()>:
c001fb7c:	83 ec 0c             	sub    esp,0xc
c001fb7f:	ba ec 1d 02 c0       	mov    edx,0xc0021dec
c001fb84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb88:	89 10                	mov    DWORD PTR [eax],edx
c001fb8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb8e:	83 ec 0c             	sub    esp,0xc
c001fb91:	50                   	push   eax
c001fb92:	e8 d7 ca fe ff       	call   c000c66e <Device::~Device()>
c001fb97:	83 c4 10             	add    esp,0x10
c001fb9a:	90                   	nop
c001fb9b:	83 c4 0c             	add    esp,0xc
c001fb9e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001fba0 <CPU::~CPU()>:
c001fba0:	83 ec 0c             	sub    esp,0xc
c001fba3:	83 ec 0c             	sub    esp,0xc
c001fba6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbaa:	e8 cd ff ff ff       	call   c001fb7c <CPU::~CPU()>
c001fbaf:	83 c4 10             	add    esp,0x10
c001fbb2:	83 ec 08             	sub    esp,0x8
c001fbb5:	68 94 11 00 00       	push   0x1194
c001fbba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbbe:	e8 49 ac fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fbc3:	83 c4 10             	add    esp,0x10
c001fbc6:	83 c4 0c             	add    esp,0xc
c001fbc9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001fbcc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001fbcc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fbd0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fbd3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001fbd4 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001fbd4:	90                   	nop
c001fbd5:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001fbd8 <ThreadControlBlock::ThreadControlBlock()>:
c001fbd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbdc:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fbe3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbe7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001fbee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbf2:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001fbf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbfd:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001fc04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc08:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001fc0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc13:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001fc17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc1b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001fc1f:	90                   	nop
c001fc20:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001fc24 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001fc24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc28:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fc2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc32:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fc39:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc3d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fc44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc48:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fc4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc52:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fc59:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc5d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fc64:	90                   	nop
c001fc65:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001fc66 <PCI::~PCI()>:
c001fc66:	83 ec 0c             	sub    esp,0xc
c001fc69:	ba cc 2c 02 c0       	mov    edx,0xc0022ccc
c001fc6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc72:	89 10                	mov    DWORD PTR [eax],edx
c001fc74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc78:	83 ec 0c             	sub    esp,0xc
c001fc7b:	50                   	push   eax
c001fc7c:	e8 7f c4 fe ff       	call   c000c100 <Bus::~Bus()>
c001fc81:	83 c4 10             	add    esp,0x10
c001fc84:	90                   	nop
c001fc85:	83 c4 0c             	add    esp,0xc
c001fc88:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001fc8a <PCI::~PCI()>:
c001fc8a:	83 ec 0c             	sub    esp,0xc
c001fc8d:	83 ec 0c             	sub    esp,0xc
c001fc90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc94:	e8 cd ff ff ff       	call   c001fc66 <PCI::~PCI()>
c001fc99:	83 c4 10             	add    esp,0x10
c001fc9c:	83 ec 08             	sub    esp,0x8
c001fc9f:	68 5c 01 00 00       	push   0x15c
c001fca4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fca8:	e8 5f ab fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fcad:	83 c4 10             	add    esp,0x10
c001fcb0:	83 c4 0c             	add    esp,0xc
c001fcb3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001fcb4 <IDE::~IDE()>:
c001fcb4:	83 ec 0c             	sub    esp,0xc
c001fcb7:	ba 80 2d 02 c0       	mov    edx,0xc0022d80
c001fcbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcc0:	89 10                	mov    DWORD PTR [eax],edx
c001fcc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcc6:	83 ec 0c             	sub    esp,0xc
c001fcc9:	50                   	push   eax
c001fcca:	e8 19 ce fe ff       	call   c000cae8 <HardDiskController::~HardDiskController()>
c001fccf:	83 c4 10             	add    esp,0x10
c001fcd2:	90                   	nop
c001fcd3:	83 c4 0c             	add    esp,0xc
c001fcd6:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001fcd8 <IDE::~IDE()>:
c001fcd8:	83 ec 0c             	sub    esp,0xc
c001fcdb:	83 ec 0c             	sub    esp,0xc
c001fcde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fce2:	e8 cd ff ff ff       	call   c001fcb4 <IDE::~IDE()>
c001fce7:	83 c4 10             	add    esp,0x10
c001fcea:	83 ec 08             	sub    esp,0x8
c001fced:	68 70 02 00 00       	push   0x270
c001fcf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcf6:	e8 11 ab fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fcfb:	83 c4 10             	add    esp,0x10
c001fcfe:	83 c4 0c             	add    esp,0xc
c001fd01:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001fd02 <SATABus::~SATABus()>:
c001fd02:	83 ec 0c             	sub    esp,0xc
c001fd05:	ba d0 2d 02 c0       	mov    edx,0xc0022dd0
c001fd0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd0e:	89 10                	mov    DWORD PTR [eax],edx
c001fd10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd14:	83 ec 0c             	sub    esp,0xc
c001fd17:	50                   	push   eax
c001fd18:	e8 cb cd fe ff       	call   c000cae8 <HardDiskController::~HardDiskController()>
c001fd1d:	83 c4 10             	add    esp,0x10
c001fd20:	90                   	nop
c001fd21:	83 c4 0c             	add    esp,0xc
c001fd24:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001fd26 <SATABus::~SATABus()>:
c001fd26:	83 ec 0c             	sub    esp,0xc
c001fd29:	83 ec 0c             	sub    esp,0xc
c001fd2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd30:	e8 cd ff ff ff       	call   c001fd02 <SATABus::~SATABus()>
c001fd35:	83 c4 10             	add    esp,0x10
c001fd38:	83 ec 08             	sub    esp,0x8
c001fd3b:	68 64 01 00 00       	push   0x164
c001fd40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd44:	e8 c3 aa fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fd49:	83 c4 10             	add    esp,0x10
c001fd4c:	83 c4 0c             	add    esp,0xc
c001fd4f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001fd50 <ATA::~ATA()>:
c001fd50:	83 ec 0c             	sub    esp,0xc
c001fd53:	ba 10 2e 02 c0       	mov    edx,0xc0022e10
c001fd58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd5c:	89 10                	mov    DWORD PTR [eax],edx
c001fd5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd62:	83 ec 0c             	sub    esp,0xc
c001fd65:	50                   	push   eax
c001fd66:	e8 5f ce fe ff       	call   c000cbca <PhysicalDisk::~PhysicalDisk()>
c001fd6b:	83 c4 10             	add    esp,0x10
c001fd6e:	90                   	nop
c001fd6f:	83 c4 0c             	add    esp,0xc
c001fd72:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001fd74 <ATA::~ATA()>:
c001fd74:	83 ec 0c             	sub    esp,0xc
c001fd77:	83 ec 0c             	sub    esp,0xc
c001fd7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd7e:	e8 cd ff ff ff       	call   c001fd50 <ATA::~ATA()>
c001fd83:	83 c4 10             	add    esp,0x10
c001fd86:	83 ec 08             	sub    esp,0x8
c001fd89:	68 7c 01 00 00       	push   0x17c
c001fd8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd92:	e8 75 aa fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fd97:	83 c4 10             	add    esp,0x10
c001fd9a:	83 c4 0c             	add    esp,0xc
c001fd9d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001fd9e <ATAPI::~ATAPI()>:
c001fd9e:	83 ec 0c             	sub    esp,0xc
c001fda1:	ba 58 2e 02 c0       	mov    edx,0xc0022e58
c001fda6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdaa:	89 10                	mov    DWORD PTR [eax],edx
c001fdac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdb0:	83 ec 0c             	sub    esp,0xc
c001fdb3:	50                   	push   eax
c001fdb4:	e8 11 ce fe ff       	call   c000cbca <PhysicalDisk::~PhysicalDisk()>
c001fdb9:	83 c4 10             	add    esp,0x10
c001fdbc:	90                   	nop
c001fdbd:	83 c4 0c             	add    esp,0xc
c001fdc0:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001fdc2 <ATAPI::~ATAPI()>:
c001fdc2:	83 ec 0c             	sub    esp,0xc
c001fdc5:	83 ec 0c             	sub    esp,0xc
c001fdc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdcc:	e8 cd ff ff ff       	call   c001fd9e <ATAPI::~ATAPI()>
c001fdd1:	83 c4 10             	add    esp,0x10
c001fdd4:	83 ec 08             	sub    esp,0x8
c001fdd7:	68 84 01 00 00       	push   0x184
c001fddc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fde0:	e8 27 aa fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fde5:	83 c4 10             	add    esp,0x10
c001fde8:	83 c4 0c             	add    esp,0xc
c001fdeb:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001fdec <SATA::~SATA()>:
c001fdec:	83 ec 0c             	sub    esp,0xc
c001fdef:	ba 0c 2f 02 c0       	mov    edx,0xc0022f0c
c001fdf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdf8:	89 10                	mov    DWORD PTR [eax],edx
c001fdfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdfe:	83 ec 0c             	sub    esp,0xc
c001fe01:	50                   	push   eax
c001fe02:	e8 c3 cd fe ff       	call   c000cbca <PhysicalDisk::~PhysicalDisk()>
c001fe07:	83 c4 10             	add    esp,0x10
c001fe0a:	90                   	nop
c001fe0b:	83 c4 0c             	add    esp,0xc
c001fe0e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001fe10 <SATA::~SATA()>:
c001fe10:	83 ec 0c             	sub    esp,0xc
c001fe13:	83 ec 0c             	sub    esp,0xc
c001fe16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe1a:	e8 cd ff ff ff       	call   c001fdec <SATA::~SATA()>
c001fe1f:	83 c4 10             	add    esp,0x10
c001fe22:	83 ec 08             	sub    esp,0x8
c001fe25:	68 7c 01 00 00       	push   0x17c
c001fe2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe2e:	e8 d9 a9 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fe33:	83 c4 10             	add    esp,0x10
c001fe36:	83 c4 0c             	add    esp,0xc
c001fe39:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001fe3a <SATAPI::~SATAPI()>:
c001fe3a:	83 ec 0c             	sub    esp,0xc
c001fe3d:	ba 30 30 02 c0       	mov    edx,0xc0023030
c001fe42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe46:	89 10                	mov    DWORD PTR [eax],edx
c001fe48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe4c:	83 ec 0c             	sub    esp,0xc
c001fe4f:	50                   	push   eax
c001fe50:	e8 75 cd fe ff       	call   c000cbca <PhysicalDisk::~PhysicalDisk()>
c001fe55:	83 c4 10             	add    esp,0x10
c001fe58:	90                   	nop
c001fe59:	83 c4 0c             	add    esp,0xc
c001fe5c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001fe5e <SATAPI::~SATAPI()>:
c001fe5e:	83 ec 0c             	sub    esp,0xc
c001fe61:	83 ec 0c             	sub    esp,0xc
c001fe64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe68:	e8 cd ff ff ff       	call   c001fe3a <SATAPI::~SATAPI()>
c001fe6d:	83 c4 10             	add    esp,0x10
c001fe70:	83 ec 08             	sub    esp,0x8
c001fe73:	68 84 01 00 00       	push   0x184
c001fe78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe7c:	e8 8b a9 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fe81:	83 c4 10             	add    esp,0x10
c001fe84:	83 c4 0c             	add    esp,0xc
c001fe87:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001fe88 <IOAPIC::~IOAPIC()>:
c001fe88:	83 ec 0c             	sub    esp,0xc
c001fe8b:	ba 70 30 02 c0       	mov    edx,0xc0023070
c001fe90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe94:	89 10                	mov    DWORD PTR [eax],edx
c001fe96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe9a:	83 ec 0c             	sub    esp,0xc
c001fe9d:	50                   	push   eax
c001fe9e:	e8 cb c7 fe ff       	call   c000c66e <Device::~Device()>
c001fea3:	83 c4 10             	add    esp,0x10
c001fea6:	90                   	nop
c001fea7:	83 c4 0c             	add    esp,0xc
c001feaa:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001feac <IOAPIC::~IOAPIC()>:
c001feac:	83 ec 0c             	sub    esp,0xc
c001feaf:	83 ec 0c             	sub    esp,0xc
c001feb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001feb6:	e8 cd ff ff ff       	call   c001fe88 <IOAPIC::~IOAPIC()>
c001febb:	83 c4 10             	add    esp,0x10
c001febe:	83 ec 08             	sub    esp,0x8
c001fec1:	68 68 01 00 00       	push   0x168
c001fec6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001feca:	e8 3d a9 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fecf:	83 c4 10             	add    esp,0x10
c001fed2:	83 c4 0c             	add    esp,0xc
c001fed5:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001fed8 <APICTimer::~APICTimer()>:
c001fed8:	83 ec 0c             	sub    esp,0xc
c001fedb:	ba b8 30 02 c0       	mov    edx,0xc00230b8
c001fee0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fee4:	89 10                	mov    DWORD PTR [eax],edx
c001fee6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feea:	83 ec 0c             	sub    esp,0xc
c001feed:	50                   	push   eax
c001feee:	e8 51 e2 fe ff       	call   c000e144 <Timer::~Timer()>
c001fef3:	83 c4 10             	add    esp,0x10
c001fef6:	90                   	nop
c001fef7:	83 c4 0c             	add    esp,0xc
c001fefa:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001fefc <APICTimer::~APICTimer()>:
c001fefc:	83 ec 0c             	sub    esp,0xc
c001feff:	83 ec 0c             	sub    esp,0xc
c001ff02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff06:	e8 cd ff ff ff       	call   c001fed8 <APICTimer::~APICTimer()>
c001ff0b:	83 c4 10             	add    esp,0x10
c001ff0e:	83 ec 08             	sub    esp,0x8
c001ff11:	68 60 01 00 00       	push   0x160
c001ff16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff1a:	e8 ed a8 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001ff1f:	83 c4 10             	add    esp,0x10
c001ff22:	83 c4 0c             	add    esp,0xc
c001ff25:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001ff28 <PIT::~PIT()>:
c001ff28:	83 ec 0c             	sub    esp,0xc
c001ff2b:	ba 08 31 02 c0       	mov    edx,0xc0023108
c001ff30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff34:	89 10                	mov    DWORD PTR [eax],edx
c001ff36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff3a:	83 ec 0c             	sub    esp,0xc
c001ff3d:	50                   	push   eax
c001ff3e:	e8 01 e2 fe ff       	call   c000e144 <Timer::~Timer()>
c001ff43:	83 c4 10             	add    esp,0x10
c001ff46:	90                   	nop
c001ff47:	83 c4 0c             	add    esp,0xc
c001ff4a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001ff4c <PIT::~PIT()>:
c001ff4c:	83 ec 0c             	sub    esp,0xc
c001ff4f:	83 ec 0c             	sub    esp,0xc
c001ff52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff56:	e8 cd ff ff ff       	call   c001ff28 <PIT::~PIT()>
c001ff5b:	83 c4 10             	add    esp,0x10
c001ff5e:	83 ec 08             	sub    esp,0x8
c001ff61:	68 5c 01 00 00       	push   0x15c
c001ff66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff6a:	e8 9d a8 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001ff6f:	83 c4 10             	add    esp,0x10
c001ff72:	83 c4 0c             	add    esp,0xc
c001ff75:	c3                   	ret    

Disassembly of section userkernel:

c0024000 <KiDefaultSignalHandlerAbort(int)>:
c0024000:	57                   	push   edi
c0024001:	b9 07 00 00 00       	mov    ecx,0x7
c0024006:	56                   	push   esi
c0024007:	be 1d 1f 02 c0       	mov    esi,0xc0021f1d
c002400c:	83 ec 24             	sub    esp,0x24
c002400f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024013:	fc                   	cld    
c0024014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002401a:	50                   	push   eax
c002401b:	6a 00                	push   0x0
c002401d:	6a 38                	push   0x38
c002401f:	6a 01                	push   0x1
c0024021:	e8 2c 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0024026:	83 c4 34             	add    esp,0x34
c0024029:	5e                   	pop    esi
c002402a:	5f                   	pop    edi
c002402b:	c3                   	ret    

c002402c <KiDefaultSignalHandlerTerminate(int)>:
c002402c:	57                   	push   edi
c002402d:	b9 08 00 00 00       	mov    ecx,0x8
c0024032:	56                   	push   esi
c0024033:	be 39 1f 02 c0       	mov    esi,0xc0021f39
c0024038:	83 ec 24             	sub    esp,0x24
c002403b:	89 e7                	mov    edi,esp
c002403d:	fc                   	cld    
c002403e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024040:	54                   	push   esp
c0024041:	6a 00                	push   0x0
c0024043:	6a 37                	push   0x37
c0024045:	6a 01                	push   0x1
c0024047:	e8 06 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002404c:	83 c4 34             	add    esp,0x34
c002404f:	5e                   	pop    esi
c0024050:	5f                   	pop    edi
c0024051:	c3                   	ret    

c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0024052:	53                   	push   ebx
c0024053:	83 ec 10             	sub    esp,0x10
c0024056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002405a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002405e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024066:	cd 60                	int    0x60
c0024068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002406c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0024074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024078:	83 c4 10             	add    esp,0x10
c002407b:	5b                   	pop    ebx
c002407c:	c3                   	ret    

Disassembly of section align_previous:

c0025000 <DO_NOT_DELETE()>:
c0025000:	c3                   	ret    
