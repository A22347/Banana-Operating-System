
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 05 7b 00 00       	call   c0007b25 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 a4 2f 02 c0       	mov    eax,0xc0022fa4
c0000025:	3d a4 2f 02 c0       	cmp    eax,0xc0022fa4
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 a4 2f 02 c0       	push   0xc0022fa4
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 a4 2f 02 c0       	mov    eax,0xc0022fa4
c0000051:	2d a4 2f 02 c0       	sub    eax,0xc0022fa4
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 a4 2f 02 c0       	push   0xc0022fa4
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 50 02 c0 00 	cmp    BYTE PTR ds:0xc00250c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb fc f7 01 c0       	mov    ebx,0xc001f7fc
c0000097:	81 eb f8 f7 01 c0    	sub    ebx,0xc001f7f8
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be f8 f7 01 c0       	mov    esi,0xc001f7f8
c00000a6:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 50 02 c0       	mov    ds:0xc00250c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 a4 2f 02 c0       	push   0xc0022fa4
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 50 02 c0 01 	mov    BYTE PTR ds:0xc00250c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 50 02 c0       	push   0xc00250c8
c0000108:	68 a4 2f 02 c0       	push   0xc0022fa4
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 ff 49 01 00       	call   c0014cac <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 f0 a3 00 00       	call   c000a6b5 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 dd 49 01 00       	call   c0014cac <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 ea 4e 01 00       	call   c00151d8 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 85 55 01 00       	call   c001587c <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 5e 02 c0 	lgdtd  ds:0xc0025ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 dd 07 01 00       	jmp    c0010b5c <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 50 02 c0       	mov    ds:0xc00250e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 50 02 c0    	mov    DWORD PTR ds:0xc00250e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 50 02 c0    	mov    ebx,DWORD PTR ds:0xc00250e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 00 f8 01 c0 02 	test   BYTE PTR [edx-0x3ffe0800],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 00 f8 01 c0 01 	test   BYTE PTR [edx-0x3ffe0800],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 00 f8 01 c0 08 	test   BYTE PTR [edx-0x3ffe0800],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 00 f8 01 c0 08 	test   BYTE PTR [edx-0x3ffe0800],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 00 f8 01 c0 04 	test   BYTE PTR [ecx-0x3ffe0800],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 00 f8 01 c0 01 	test   BYTE PTR [edx-0x3ffe0800],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d8d:	85 db                	test   ebx,ebx
c0000d8f:	0f 84 e2 00 00 00    	je     c0000e77 <dlfree+0xf1>
c0000d95:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d98:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d9b:	8b 0d 00 51 02 c0    	mov    ecx,DWORD PTR ds:0xc0025100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c1                	cmp    ecx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 c9 03             	or     ecx,0x3
c0000db0:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 0c 85 04 51 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdaefc]
c0000dc0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dc2:	89 14 85 04 51 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaefc],edx
c0000dc9:	e9 a9 00 00 00       	jmp    c0000e77 <dlfree+0xf1>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 c9 01             	or     ecx,0x1
c0000ddd:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000de3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000de6:	83 e1 fc             	and    ecx,0xfffffffc
c0000de9:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000df2:	29 da                	sub    edx,ebx
c0000df4:	01 d8                	add    eax,ebx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dfc:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dff:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e02:	39 35 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e0e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e11:	80 e3 01             	and    bl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 c8                	add    eax,ecx
c0000e1b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e1e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e21:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e24:	8b 0d 3c 51 02 c0    	mov    ecx,DWORD PTR ds:0xc002513c
c0000e2a:	c7 42 0c 34 51 02 c0 	mov    DWORD PTR [edx+0xc],0xc0025134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 c8                	add    eax,ecx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 16                	jbe    c0000e77 <dlfree+0xf1>
c0000e61:	f6 05 00 51 02 c0 02 	test   BYTE PTR ds:0xc0025100,0x2
c0000e68:	74 0d                	je     c0000e77 <dlfree+0xf1>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	5b                   	pop    ebx
c0000e78:	5e                   	pop    esi
c0000e79:	5f                   	pop    edi
c0000e7a:	c3                   	ret    

c0000e7b <sYSMALLOc>:
c0000e7b:	55                   	push   ebp
c0000e7c:	57                   	push   edi
c0000e7d:	56                   	push   esi
c0000e7e:	53                   	push   ebx
c0000e7f:	89 d3                	mov    ebx,edx
c0000e81:	83 ec 2c             	sub    esp,0x2c
c0000e84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000e88:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000e8e:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e91:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000e94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e98:	74 1f                	je     c0000eb9 <sYSMALLOc+0x3e>
c0000e9a:	89 d0                	mov    eax,edx
c0000e9c:	e8 fe fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ea1:	83 ec 0c             	sub    esp,0xc
c0000ea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000ea8:	83 e8 07             	sub    eax,0x7
c0000eab:	50                   	push   eax
c0000eac:	e8 33 02 00 00       	call   c00010e4 <dlmalloc>
c0000eb1:	83 c4 10             	add    esp,0x10
c0000eb4:	e9 23 02 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000eb9:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000ec0:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ec6:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000ec9:	83 c0 10             	add    eax,0x10
c0000ecc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	83 e5 fc             	and    ebp,0xfffffffc
c0000ed5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000edc:	74 02                	je     c0000ee0 <sYSMALLOc+0x65>
c0000ede:	29 ea                	sub    edx,ebp
c0000ee0:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000ee4:	f7 d9                	neg    ecx
c0000ee6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000eea:	21 ca                	and    edx,ecx
c0000eec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000ef0:	7f 07                	jg     c0000ef9 <sYSMALLOc+0x7e>
c0000ef2:	31 c0                	xor    eax,eax
c0000ef4:	e9 e3 01 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000ef9:	83 ec 0c             	sub    esp,0xc
c0000efc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f00:	e8 9b 6a 00 00       	call   c00079a0 <sbrk>
c0000f05:	83 c4 10             	add    esp,0x10
c0000f08:	83 f8 ff             	cmp    eax,0xffffffff
c0000f0b:	89 c6                	mov    esi,eax
c0000f0d:	74 e3                	je     c0000ef2 <sYSMALLOc+0x77>
c0000f0f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f13:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000f16:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000f1c:	39 c2                	cmp    edx,eax
c0000f1e:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f24:	75 11                	jne    c0000f37 <sYSMALLOc+0xbc>
c0000f26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2a:	01 e8                	add    eax,ebp
c0000f2c:	83 c8 01             	or     eax,0x1
c0000f2f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f32:	e9 93 00 00 00       	jmp    c0000fca <sYSMALLOc+0x14f>
c0000f37:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000f3d:	a8 01                	test   al,0x1
c0000f3f:	0f 84 73 01 00 00    	je     c00010b8 <sYSMALLOc+0x23d>
c0000f45:	85 ed                	test   ebp,ebp
c0000f47:	74 12                	je     c0000f5b <sYSMALLOc+0xe0>
c0000f49:	39 f2                	cmp    edx,esi
c0000f4b:	76 0e                	jbe    c0000f5b <sYSMALLOc+0xe0>
c0000f4d:	83 e0 fe             	and    eax,0xfffffffe
c0000f50:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000f56:	e9 5d 01 00 00       	jmp    c00010b8 <sYSMALLOc+0x23d>
c0000f5b:	85 ed                	test   ebp,ebp
c0000f5d:	74 0c                	je     c0000f6b <sYSMALLOc+0xf0>
c0000f5f:	89 f0                	mov    eax,esi
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	01 c1                	add    ecx,eax
c0000f65:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f6b:	89 f2                	mov    edx,esi
c0000f6d:	83 e2 07             	and    edx,0x7
c0000f70:	0f 84 b1 00 00 00    	je     c0001027 <sYSMALLOc+0x1ac>
c0000f76:	b8 08 00 00 00       	mov    eax,0x8
c0000f7b:	29 d0                	sub    eax,edx
c0000f7d:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000f80:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000f84:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f88:	01 e8                	add    eax,ebp
c0000f8a:	83 ec 0c             	sub    esp,0xc
c0000f8d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000f90:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000f94:	01 f2                	add    edx,esi
c0000f96:	29 d0                	sub    eax,edx
c0000f98:	01 d1                	add    ecx,edx
c0000f9a:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000f9e:	01 c1                	add    ecx,eax
c0000fa0:	51                   	push   ecx
c0000fa1:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000fa5:	e8 f6 69 00 00       	call   c00079a0 <sbrk>
c0000faa:	83 c4 10             	add    esp,0x10
c0000fad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000fb1:	83 f8 ff             	cmp    eax,0xffffffff
c0000fb4:	75 7c                	jne    c0001032 <sYSMALLOc+0x1b7>
c0000fb6:	83 ec 0c             	sub    esp,0xc
c0000fb9:	6a 00                	push   0x0
c0000fbb:	e8 e0 69 00 00       	call   c00079a0 <sbrk>
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	31 c9                	xor    ecx,ecx
c0000fc5:	83 f8 ff             	cmp    eax,0xffffffff
c0000fc8:	75 7e                	jne    c0001048 <sYSMALLOc+0x1cd>
c0000fca:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fd0:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fd6:	73 06                	jae    c0000fde <sYSMALLOc+0x163>
c0000fd8:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fde:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fe4:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fea:	73 06                	jae    c0000ff2 <sYSMALLOc+0x177>
c0000fec:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ff2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ff5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff8:	83 e2 fc             	and    edx,0xfffffffc
c0000ffb:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000fff:	0f 87 ed fe ff ff    	ja     c0000ef2 <sYSMALLOc+0x77>
c0001005:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0001009:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000100c:	29 fa                	sub    edx,edi
c000100e:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001011:	89 fb                	mov    ebx,edi
c0001013:	83 ca 01             	or     edx,0x1
c0001016:	83 cb 01             	or     ebx,0x1
c0001019:	83 c0 08             	add    eax,0x8
c000101c:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000101f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001022:	e9 b5 00 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0001027:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000102b:	31 c0                	xor    eax,eax
c000102d:	e9 52 ff ff ff       	jmp    c0000f84 <sYSMALLOc+0x109>
c0001032:	39 c6                	cmp    esi,eax
c0001034:	76 12                	jbe    c0001048 <sYSMALLOc+0x1cd>
c0001036:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000103a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001041:	01 f0                	add    eax,esi
c0001043:	e9 7b ff ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c0001048:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000104c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000104f:	29 f0                	sub    eax,esi
c0001051:	01 c8                	add    eax,ecx
c0001053:	83 c8 01             	or     eax,0x1
c0001056:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0001059:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c000105f:	85 ed                	test   ebp,ebp
c0001061:	0f 84 63 ff ff ff    	je     c0000fca <sYSMALLOc+0x14f>
c0001067:	8d 45 f4             	lea    eax,[ebp-0xc]
c000106a:	83 e0 f8             	and    eax,0xfffffff8
c000106d:	89 c2                	mov    edx,eax
c000106f:	83 ca 01             	or     edx,0x1
c0001072:	83 f8 0f             	cmp    eax,0xf
c0001075:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001078:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001080:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001088:	0f 86 3c ff ff ff    	jbe    c0000fca <sYSMALLOc+0x14f>
c000108e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001094:	83 ec 0c             	sub    esp,0xc
c0001097:	83 c7 08             	add    edi,0x8
c000109a:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a4:	57                   	push   edi
c00010a5:	e8 dc fc ff ff       	call   c0000d86 <dlfree>
c00010aa:	83 c4 10             	add    esp,0x10
c00010ad:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b3:	e9 12 ff ff ff       	jmp    c0000fca <sYSMALLOc+0x14f>
c00010b8:	83 ec 0c             	sub    esp,0xc
c00010bb:	6a 00                	push   0x0
c00010bd:	e8 de 68 00 00       	call   c00079a0 <sbrk>
c00010c2:	89 c2                	mov    edx,eax
c00010c4:	29 f2                	sub    edx,esi
c00010c6:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c00010ca:	83 c4 10             	add    esp,0x10
c00010cd:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010d3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00010d7:	e9 e7 fe ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c00010dc:	83 c4 2c             	add    esp,0x2c
c00010df:	5b                   	pop    ebx
c00010e0:	5e                   	pop    esi
c00010e1:	5f                   	pop    edi
c00010e2:	5d                   	pop    ebp
c00010e3:	c3                   	ret    

c00010e4 <dlmalloc>:
c00010e4:	55                   	push   ebp
c00010e5:	57                   	push   edi
c00010e6:	56                   	push   esi
c00010e7:	53                   	push   ebx
c00010e8:	83 ec 1c             	sub    esp,0x1c
c00010eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010ef:	83 f8 df             	cmp    eax,0xffffffdf
c00010f2:	0f 87 70 03 00 00    	ja     c0001468 <dlmalloc+0x384>
c00010f8:	83 c0 0b             	add    eax,0xb
c00010fb:	be 10 00 00 00       	mov    esi,0x10
c0001100:	83 f8 0f             	cmp    eax,0xf
c0001103:	76 05                	jbe    c000110a <dlmalloc+0x26>
c0001105:	83 e0 f8             	and    eax,0xfffffff8
c0001108:	89 c6                	mov    esi,eax
c000110a:	8b 3d 00 51 02 c0    	mov    edi,DWORD PTR ds:0xc0025100
c0001110:	f7 c7 01 00 00 00    	test   edi,0x1
c0001116:	75 17                	jne    c000112f <dlmalloc+0x4b>
c0001118:	85 ff                	test   edi,edi
c000111a:	0f 85 05 03 00 00    	jne    c0001425 <dlmalloc+0x341>
c0001120:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001125:	e8 75 fb ff ff       	call   c0000c9f <malloc_consolidate>
c000112a:	e9 f6 02 00 00       	jmp    c0001425 <dlmalloc+0x341>
c000112f:	39 f7                	cmp    edi,esi
c0001131:	72 1f                	jb     c0001152 <dlmalloc+0x6e>
c0001133:	89 f2                	mov    edx,esi
c0001135:	c1 ea 03             	shr    edx,0x3
c0001138:	83 ea 02             	sub    edx,0x2
c000113b:	8b 04 95 04 51 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdaefc]
c0001142:	85 c0                	test   eax,eax
c0001144:	74 0c                	je     c0001152 <dlmalloc+0x6e>
c0001146:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001149:	89 0c 95 04 51 02 c0 	mov    DWORD PTR [edx*4-0x3ffdaefc],ecx
c0001150:	eb 30                	jmp    c0001182 <dlmalloc+0x9e>
c0001152:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001158:	89 f0                	mov    eax,esi
c000115a:	77 2e                	ja     c000118a <dlmalloc+0xa6>
c000115c:	c1 e8 03             	shr    eax,0x3
c000115f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001163:	8d 14 c5 34 51 02 c0 	lea    edx,[eax*8-0x3ffdaecc]
c000116a:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000116d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001170:	39 c3                	cmp    ebx,eax
c0001172:	74 2e                	je     c00011a2 <dlmalloc+0xbe>
c0001174:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001177:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000117c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000117f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001182:	83 c0 08             	add    eax,0x8
c0001185:	e9 e0 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c000118a:	e8 8c fa ff ff       	call   c0000c1b <largebin_index>
c000118f:	83 e7 02             	and    edi,0x2
c0001192:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001196:	74 0a                	je     c00011a2 <dlmalloc+0xbe>
c0001198:	b8 00 51 02 c0       	mov    eax,0xc0025100
c000119d:	e8 fd fa ff ff       	call   c0000c9f <malloc_consolidate>
c00011a2:	8d 46 10             	lea    eax,[esi+0x10]
c00011a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011a9:	8b 1d 40 51 02 c0    	mov    ebx,DWORD PTR ds:0xc0025140
c00011af:	81 fb 34 51 02 c0    	cmp    ebx,0xc0025134
c00011b5:	0f 84 13 01 00 00    	je     c00012ce <dlmalloc+0x1ea>
c00011bb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011be:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011c1:	83 e7 fc             	and    edi,0xfffffffc
c00011c4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011ca:	77 4c                	ja     c0001218 <dlmalloc+0x134>
c00011cc:	3d 34 51 02 c0       	cmp    eax,0xc0025134
c00011d1:	75 45                	jne    c0001218 <dlmalloc+0x134>
c00011d3:	39 1d 30 51 02 c0    	cmp    DWORD PTR ds:0xc0025130,ebx
c00011d9:	75 3d                	jne    c0001218 <dlmalloc+0x134>
c00011db:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011df:	73 37                	jae    c0001218 <dlmalloc+0x134>
c00011e1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011e4:	89 fa                	mov    edx,edi
c00011e6:	a3 3c 51 02 c0       	mov    ds:0xc002513c,eax
c00011eb:	29 f2                	sub    edx,esi
c00011ed:	83 ce 01             	or     esi,0x1
c00011f0:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c00011f5:	89 d1                	mov    ecx,edx
c00011f7:	a3 30 51 02 c0       	mov    ds:0xc0025130,eax
c00011fc:	83 c9 01             	or     ecx,0x1
c00011ff:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c0001206:	c7 40 0c 34 51 02 c0 	mov    DWORD PTR [eax+0xc],0xc0025134
c000120d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001210:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001213:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001216:	eb 15                	jmp    c000122d <dlmalloc+0x149>
c0001218:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c000121d:	39 fe                	cmp    esi,edi
c000121f:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c0001226:	75 0d                	jne    c0001235 <dlmalloc+0x151>
c0001228:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000122d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001230:	e9 35 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001235:	81 ff ff 00 00 00    	cmp    edi,0xff
c000123b:	89 f8                	mov    eax,edi
c000123d:	77 19                	ja     c0001258 <dlmalloc+0x174>
c000123f:	c1 e8 03             	shr    eax,0x3
c0001242:	8d 14 00             	lea    edx,[eax+eax*1]
c0001245:	83 c2 0d             	add    edx,0xd
c0001248:	8d 2c 95 f8 50 02 c0 	lea    ebp,[edx*4-0x3ffdaf08]
c000124f:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c0001256:	eb 46                	jmp    c000129e <dlmalloc+0x1ba>
c0001258:	e8 be f9 ff ff       	call   c0000c1b <largebin_index>
c000125d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001260:	83 c2 0d             	add    edx,0xd
c0001263:	8d 0c 95 00 51 02 c0 	lea    ecx,[edx*4-0x3ffdaf00]
c000126a:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c0001271:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001274:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001278:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000127c:	89 d5                	mov    ebp,edx
c000127e:	74 1e                	je     c000129e <dlmalloc+0x1ba>
c0001280:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001283:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001286:	77 12                	ja     c000129a <dlmalloc+0x1b6>
c0001288:	83 cf 01             	or     edi,0x1
c000128b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000128e:	76 05                	jbe    c0001295 <dlmalloc+0x1b1>
c0001290:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001293:	eb f6                	jmp    c000128b <dlmalloc+0x1a7>
c0001295:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001298:	eb 04                	jmp    c000129e <dlmalloc+0x1ba>
c000129a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000129e:	89 c7                	mov    edi,eax
c00012a0:	88 c1                	mov    cl,al
c00012a2:	c1 ff 05             	sar    edi,0x5
c00012a5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012a9:	bf 01 00 00 00       	mov    edi,0x1
c00012ae:	d3 e7                	shl    edi,cl
c00012b0:	89 f8                	mov    eax,edi
c00012b2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012b6:	09 04 bd 34 54 02 c0 	or     DWORD PTR [edi*4-0x3ffdabcc],eax
c00012bd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012c0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012c3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012c6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012c9:	e9 db fe ff ff       	jmp    c00011a9 <dlmalloc+0xc5>
c00012ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012d4:	76 78                	jbe    c000134e <dlmalloc+0x26a>
c00012d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012da:	8d 04 c5 34 51 02 c0 	lea    eax,[eax*8-0x3ffdaecc]
c00012e1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012e4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012e7:	39 ca                	cmp    edx,ecx
c00012e9:	74 63                	je     c000134e <dlmalloc+0x26a>
c00012eb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012ee:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012f1:	83 e3 fc             	and    ebx,0xfffffffc
c00012f4:	39 de                	cmp    esi,ebx
c00012f6:	77 52                	ja     c000134a <dlmalloc+0x266>
c00012f8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012fb:	89 df                	mov    edi,ebx
c00012fd:	01 d3                	add    ebx,edx
c00012ff:	29 f7                	sub    edi,esi
c0001301:	83 ff 0f             	cmp    edi,0xf
c0001304:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001307:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000130a:	8d 42 08             	lea    eax,[edx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x234>
c000130f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001313:	e9 52 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001318:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000131b:	83 ce 01             	or     esi,0x1
c000131e:	89 0d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,ecx
c0001324:	89 0d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,ecx
c000132a:	c7 41 08 34 51 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0025134
c0001331:	c7 41 0c 34 51 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0025134
c0001338:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000133b:	89 fa                	mov    edx,edi
c000133d:	83 ca 01             	or     edx,0x1
c0001340:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001343:	89 3b                	mov    DWORD PTR [ebx],edi
c0001345:	e9 20 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c000134a:	89 c2                	mov    edx,eax
c000134c:	eb 99                	jmp    c00012e7 <dlmalloc+0x203>
c000134e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001352:	b8 01 00 00 00       	mov    eax,0x1
c0001357:	41                   	inc    ecx
c0001358:	8d 14 cd 2c 51 02 c0 	lea    edx,[ecx*8-0x3ffdaed4]
c000135f:	89 cb                	mov    ebx,ecx
c0001361:	c1 eb 05             	shr    ebx,0x5
c0001364:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c000136b:	d3 e0                	shl    eax,cl
c000136d:	39 f8                	cmp    eax,edi
c000136f:	77 04                	ja     c0001375 <dlmalloc+0x291>
c0001371:	85 c0                	test   eax,eax
c0001373:	75 26                	jne    c000139b <dlmalloc+0x2b7>
c0001375:	43                   	inc    ebx
c0001376:	83 fb 02             	cmp    ebx,0x2
c0001379:	0f 87 a6 00 00 00    	ja     c0001425 <dlmalloc+0x341>
c000137f:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c0001386:	85 ff                	test   edi,edi
c0001388:	74 eb                	je     c0001375 <dlmalloc+0x291>
c000138a:	89 d8                	mov    eax,ebx
c000138c:	c1 e0 06             	shl    eax,0x6
c000138f:	8d 14 85 2c 51 02 c0 	lea    edx,[eax*4-0x3ffdaed4]
c0001396:	b8 01 00 00 00       	mov    eax,0x1
c000139b:	85 f8                	test   eax,edi
c000139d:	75 07                	jne    c00013a6 <dlmalloc+0x2c2>
c000139f:	83 c2 08             	add    edx,0x8
c00013a2:	01 c0                	add    eax,eax
c00013a4:	eb f5                	jmp    c000139b <dlmalloc+0x2b7>
c00013a6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013a9:	39 ca                	cmp    edx,ecx
c00013ab:	75 14                	jne    c00013c1 <dlmalloc+0x2dd>
c00013ad:	89 c1                	mov    ecx,eax
c00013af:	83 c2 08             	add    edx,0x8
c00013b2:	f7 d1                	not    ecx
c00013b4:	01 c0                	add    eax,eax
c00013b6:	21 cf                	and    edi,ecx
c00013b8:	89 3c 9d 34 54 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdabcc],edi
c00013bf:	eb ac                	jmp    c000136d <dlmalloc+0x289>
c00013c1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013c4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013c7:	83 e0 fc             	and    eax,0xfffffffc
c00013ca:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013cd:	89 c3                	mov    ebx,eax
c00013cf:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013d2:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013d5:	29 f3                	sub    ebx,esi
c00013d7:	8d 41 08             	lea    eax,[ecx+0x8]
c00013da:	83 fb 0f             	cmp    ebx,0xf
c00013dd:	77 09                	ja     c00013e8 <dlmalloc+0x304>
c00013df:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013e3:	e9 82 00 00 00       	jmp    c000146a <dlmalloc+0x386>
c00013e8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013f1:	89 3d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edi
c00013f7:	89 3d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,edi
c00013fd:	c7 47 08 34 51 02 c0 	mov    DWORD PTR [edi+0x8],0xc0025134
c0001404:	c7 47 0c 34 51 02 c0 	mov    DWORD PTR [edi+0xc],0xc0025134
c000140b:	77 06                	ja     c0001413 <dlmalloc+0x32f>
c000140d:	89 3d 30 51 02 c0    	mov    DWORD PTR ds:0xc0025130,edi
c0001413:	83 ce 01             	or     esi,0x1
c0001416:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001419:	89 d9                	mov    ecx,ebx
c000141b:	83 c9 01             	or     ecx,0x1
c000141e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001421:	89 1a                	mov    DWORD PTR [edx],ebx
c0001423:	eb 45                	jmp    c000146a <dlmalloc+0x386>
c0001425:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c000142a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000142d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001430:	83 e2 fc             	and    edx,0xfffffffc
c0001433:	39 d1                	cmp    ecx,edx
c0001435:	77 1e                	ja     c0001455 <dlmalloc+0x371>
c0001437:	89 f3                	mov    ebx,esi
c0001439:	29 f2                	sub    edx,esi
c000143b:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000143e:	83 cb 01             	or     ebx,0x1
c0001441:	89 0d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,ecx
c0001447:	83 ca 01             	or     edx,0x1
c000144a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000144d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001450:	e9 2d fd ff ff       	jmp    c0001182 <dlmalloc+0x9e>
c0001455:	83 c4 1c             	add    esp,0x1c
c0001458:	89 f0                	mov    eax,esi
c000145a:	5b                   	pop    ebx
c000145b:	ba 00 51 02 c0       	mov    edx,0xc0025100
c0001460:	5e                   	pop    esi
c0001461:	5f                   	pop    edi
c0001462:	5d                   	pop    ebp
c0001463:	e9 13 fa ff ff       	jmp    c0000e7b <sYSMALLOc>
c0001468:	31 c0                	xor    eax,eax
c000146a:	83 c4 1c             	add    esp,0x1c
c000146d:	5b                   	pop    ebx
c000146e:	5e                   	pop    esi
c000146f:	5f                   	pop    edi
c0001470:	5d                   	pop    ebp
c0001471:	c3                   	ret    

c0001472 <iALLOc>:
c0001472:	55                   	push   ebp
c0001473:	89 c5                	mov    ebp,eax
c0001475:	57                   	push   edi
c0001476:	56                   	push   esi
c0001477:	53                   	push   ebx
c0001478:	83 ec 2c             	sub    esp,0x2c
c000147b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000147f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001483:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c000148a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000148e:	75 12                	jne    c00014a2 <iALLOc+0x30>
c0001490:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001494:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001499:	e8 01 f8 ff ff       	call   c0000c9f <malloc_consolidate>
c000149e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014a2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014a7:	74 12                	je     c00014bb <iALLOc+0x49>
c00014a9:	85 ed                	test   ebp,ebp
c00014ab:	0f 84 64 01 00 00    	je     c0001615 <iALLOc+0x1a3>
c00014b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014b9:	eb 33                	jmp    c00014ee <iALLOc+0x7c>
c00014bb:	85 ed                	test   ebp,ebp
c00014bd:	75 14                	jne    c00014d3 <iALLOc+0x61>
c00014bf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014c7:	83 c4 2c             	add    esp,0x2c
c00014ca:	5b                   	pop    ebx
c00014cb:	5e                   	pop    esi
c00014cc:	5f                   	pop    edi
c00014cd:	5d                   	pop    ebp
c00014ce:	e9 11 fc ff ff       	jmp    c00010e4 <dlmalloc>
c00014d3:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014db:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e2:	83 f8 0f             	cmp    eax,0xf
c00014e5:	76 07                	jbe    c00014ee <iALLOc+0x7c>
c00014e7:	83 e0 f8             	and    eax,0xfffffff8
c00014ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014ee:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014f3:	75 09                	jne    c00014fe <iALLOc+0x8c>
c00014f5:	89 d0                	mov    eax,edx
c00014f7:	31 f6                	xor    esi,esi
c00014f9:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014fc:	eb 3b                	jmp    c0001539 <iALLOc+0xc7>
c00014fe:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001506:	8b 02                	mov    eax,DWORD PTR [edx]
c0001508:	83 c0 0b             	add    eax,0xb
c000150b:	83 f8 0f             	cmp    eax,0xf
c000150e:	76 07                	jbe    c0001517 <iALLOc+0xa5>
c0001510:	83 e0 f8             	and    eax,0xfffffff8
c0001513:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001517:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000151b:	0f af f5             	imul   esi,ebp
c000151e:	eb 25                	jmp    c0001545 <iALLOc+0xd3>
c0001520:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001522:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001525:	bb 10 00 00 00       	mov    ebx,0x10
c000152a:	83 f9 0f             	cmp    ecx,0xf
c000152d:	76 05                	jbe    c0001534 <iALLOc+0xc2>
c000152f:	83 e1 f8             	and    ecx,0xfffffff8
c0001532:	89 cb                	mov    ebx,ecx
c0001534:	01 de                	add    esi,ebx
c0001536:	83 c0 04             	add    eax,0x4
c0001539:	39 c7                	cmp    edi,eax
c000153b:	75 e3                	jne    c0001520 <iALLOc+0xae>
c000153d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001545:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001549:	83 ec 0c             	sub    esp,0xc
c000154c:	8b 1d 54 54 02 c0    	mov    ebx,DWORD PTR ds:0xc0025454
c0001552:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c000155c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001560:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001564:	50                   	push   eax
c0001565:	e8 7a fb ff ff       	call   c00010e4 <dlmalloc>
c000156a:	83 c4 10             	add    esp,0x10
c000156d:	89 1d 54 54 02 c0    	mov    DWORD PTR ds:0xc0025454,ebx
c0001573:	85 c0                	test   eax,eax
c0001575:	0f 84 92 00 00 00    	je     c000160d <iALLOc+0x19b>
c000157b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000157e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001581:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001585:	83 e3 fc             	and    ebx,0xfffffffc
c0001588:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000158d:	74 1e                	je     c00015ad <iALLOc+0x13b>
c000158f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001593:	89 d9                	mov    ecx,ebx
c0001595:	52                   	push   edx
c0001596:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000159a:	83 e9 04             	sub    ecx,0x4
c000159d:	51                   	push   ecx
c000159e:	6a 00                	push   0x0
c00015a0:	50                   	push   eax
c00015a1:	e8 4a ef ff ff       	call   c00004f0 <memset>
c00015a6:	83 c4 10             	add    esp,0x10
c00015a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015b2:	75 14                	jne    c00015c8 <iALLOc+0x156>
c00015b4:	8d 04 37             	lea    eax,[edi+esi*1]
c00015b7:	29 f3                	sub    ebx,esi
c00015b9:	8d 48 08             	lea    ecx,[eax+0x8]
c00015bc:	83 cb 01             	or     ebx,0x1
c00015bf:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015c2:	89 f3                	mov    ebx,esi
c00015c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c8:	31 c0                	xor    eax,eax
c00015ca:	4d                   	dec    ebp
c00015cb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015cf:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d2:	39 c5                	cmp    ebp,eax
c00015d4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015d7:	74 2c                	je     c0001605 <iALLOc+0x193>
c00015d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015dd:	85 c9                	test   ecx,ecx
c00015df:	75 15                	jne    c00015f6 <iALLOc+0x184>
c00015e1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015e4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015e7:	b9 10 00 00 00       	mov    ecx,0x10
c00015ec:	83 fe 0f             	cmp    esi,0xf
c00015ef:	76 05                	jbe    c00015f6 <iALLOc+0x184>
c00015f1:	83 e6 f8             	and    esi,0xfffffff8
c00015f4:	89 f1                	mov    ecx,esi
c00015f6:	89 ce                	mov    esi,ecx
c00015f8:	29 cb                	sub    ebx,ecx
c00015fa:	83 ce 01             	or     esi,0x1
c00015fd:	40                   	inc    eax
c00015fe:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001601:	01 cf                	add    edi,ecx
c0001603:	eb c6                	jmp    c00015cb <iALLOc+0x159>
c0001605:	83 cb 01             	or     ebx,0x1
c0001608:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000160b:	eb 08                	jmp    c0001615 <iALLOc+0x1a3>
c000160d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001615:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001619:	83 c4 2c             	add    esp,0x2c
c000161c:	5b                   	pop    ebx
c000161d:	5e                   	pop    esi
c000161e:	5f                   	pop    edi
c000161f:	5d                   	pop    ebp
c0001620:	c3                   	ret    

c0001621 <dlrealloc>:
c0001621:	55                   	push   ebp
c0001622:	57                   	push   edi
c0001623:	56                   	push   esi
c0001624:	53                   	push   ebx
c0001625:	83 ec 1c             	sub    esp,0x1c
c0001628:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000162c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001630:	85 db                	test   ebx,ebx
c0001632:	75 10                	jne    c0001644 <dlrealloc+0x23>
c0001634:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001638:	83 c4 1c             	add    esp,0x1c
c000163b:	5b                   	pop    ebx
c000163c:	5e                   	pop    esi
c000163d:	5f                   	pop    edi
c000163e:	5d                   	pop    ebp
c000163f:	e9 a0 fa ff ff       	jmp    c00010e4 <dlmalloc>
c0001644:	83 f8 df             	cmp    eax,0xffffffdf
c0001647:	76 07                	jbe    c0001650 <dlrealloc+0x2f>
c0001649:	31 db                	xor    ebx,ebx
c000164b:	e9 6b 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c0001650:	83 c0 0b             	add    eax,0xb
c0001653:	bd 10 00 00 00       	mov    ebp,0x10
c0001658:	83 f8 0f             	cmp    eax,0xf
c000165b:	76 05                	jbe    c0001662 <dlrealloc+0x41>
c000165d:	83 e0 f8             	and    eax,0xfffffff8
c0001660:	89 c5                	mov    ebp,eax
c0001662:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001665:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001668:	89 ce                	mov    esi,ecx
c000166a:	83 e6 fc             	and    esi,0xfffffffc
c000166d:	f6 c1 02             	test   cl,0x2
c0001670:	75 d7                	jne    c0001649 <dlrealloc+0x28>
c0001672:	39 f5                	cmp    ebp,esi
c0001674:	0f 86 04 01 00 00    	jbe    c000177e <dlrealloc+0x15d>
c000167a:	8d 14 37             	lea    edx,[edi+esi*1]
c000167d:	39 15 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,edx
c0001683:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001686:	75 33                	jne    c00016bb <dlrealloc+0x9a>
c0001688:	83 e0 fc             	and    eax,0xfffffffc
c000168b:	01 f0                	add    eax,esi
c000168d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001691:	8d 45 10             	lea    eax,[ebp+0x10]
c0001694:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0001698:	77 49                	ja     c00016e3 <dlrealloc+0xc2>
c000169a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000169e:	83 e1 01             	and    ecx,0x1
c00016a1:	01 ef                	add    edi,ebp
c00016a3:	09 e9                	or     ecx,ebp
c00016a5:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00016a8:	89 3d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edi
c00016ae:	29 e8                	sub    eax,ebp
c00016b0:	83 c8 01             	or     eax,0x1
c00016b3:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016b6:	e9 00 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c00016bb:	89 c1                	mov    ecx,eax
c00016bd:	83 e1 fe             	and    ecx,0xfffffffe
c00016c0:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c00016c5:	75 1c                	jne    c00016e3 <dlrealloc+0xc2>
c00016c7:	83 e0 fc             	and    eax,0xfffffffc
c00016ca:	01 f0                	add    eax,esi
c00016cc:	39 c5                	cmp    ebp,eax
c00016ce:	77 13                	ja     c00016e3 <dlrealloc+0xc2>
c00016d0:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00016d3:	89 c6                	mov    esi,eax
c00016d5:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00016d8:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00016db:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00016de:	e9 9b 00 00 00       	jmp    c000177e <dlrealloc+0x15d>
c00016e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016e7:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016ea:	83 ec 0c             	sub    esp,0xc
c00016ed:	50                   	push   eax
c00016ee:	e8 f1 f9 ff ff       	call   c00010e4 <dlmalloc>
c00016f3:	83 c4 10             	add    esp,0x10
c00016f6:	85 c0                	test   eax,eax
c00016f8:	0f 84 4b ff ff ff    	je     c0001649 <dlrealloc+0x28>
c00016fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001702:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001705:	39 ca                	cmp    edx,ecx
c0001707:	75 0a                	jne    c0001713 <dlrealloc+0xf2>
c0001709:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000170c:	83 e0 fc             	and    eax,0xfffffffc
c000170f:	01 c6                	add    esi,eax
c0001711:	eb 6b                	jmp    c000177e <dlrealloc+0x15d>
c0001713:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001716:	83 f9 27             	cmp    ecx,0x27
c0001719:	76 08                	jbe    c0001723 <dlrealloc+0x102>
c000171b:	89 de                	mov    esi,ebx
c000171d:	89 c7                	mov    edi,eax
c000171f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001721:	eb 43                	jmp    c0001766 <dlrealloc+0x145>
c0001723:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001725:	83 f9 13             	cmp    ecx,0x13
c0001728:	89 10                	mov    DWORD PTR [eax],edx
c000172a:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000172d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001730:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001733:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001736:	76 2e                	jbe    c0001766 <dlrealloc+0x145>
c0001738:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000173b:	83 f9 1b             	cmp    ecx,0x1b
c000173e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001741:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001744:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001747:	76 1d                	jbe    c0001766 <dlrealloc+0x145>
c0001749:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000174c:	83 f9 23             	cmp    ecx,0x23
c000174f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001752:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001755:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001758:	76 0c                	jbe    c0001766 <dlrealloc+0x145>
c000175a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000175d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001760:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001763:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001766:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000176a:	83 ec 0c             	sub    esp,0xc
c000176d:	53                   	push   ebx
c000176e:	e8 13 f6 ff ff       	call   c0000d86 <dlfree>
c0001773:	83 c4 10             	add    esp,0x10
c0001776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177a:	89 c3                	mov    ebx,eax
c000177c:	eb 3d                	jmp    c00017bb <dlrealloc+0x19a>
c000177e:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001781:	8d 04 37             	lea    eax,[edi+esi*1]
c0001784:	89 f2                	mov    edx,esi
c0001786:	29 ea                	sub    edx,ebp
c0001788:	83 e1 01             	and    ecx,0x1
c000178b:	83 fa 0f             	cmp    edx,0xf
c000178e:	77 0b                	ja     c000179b <dlrealloc+0x17a>
c0001790:	09 ce                	or     esi,ecx
c0001792:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001795:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001799:	eb 20                	jmp    c00017bb <dlrealloc+0x19a>
c000179b:	01 ef                	add    edi,ebp
c000179d:	83 ca 01             	or     edx,0x1
c00017a0:	09 cd                	or     ebp,ecx
c00017a2:	83 ec 0c             	sub    esp,0xc
c00017a5:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017a8:	83 c7 08             	add    edi,0x8
c00017ab:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017ae:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017b2:	57                   	push   edi
c00017b3:	e8 ce f5 ff ff       	call   c0000d86 <dlfree>
c00017b8:	83 c4 10             	add    esp,0x10
c00017bb:	83 c4 1c             	add    esp,0x1c
c00017be:	89 d8                	mov    eax,ebx
c00017c0:	5b                   	pop    ebx
c00017c1:	5e                   	pop    esi
c00017c2:	5f                   	pop    edi
c00017c3:	5d                   	pop    ebp
c00017c4:	c3                   	ret    

c00017c5 <dlmemalign>:
c00017c5:	55                   	push   ebp
c00017c6:	57                   	push   edi
c00017c7:	56                   	push   esi
c00017c8:	53                   	push   ebx
c00017c9:	83 ec 0c             	sub    esp,0xc
c00017cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017d4:	83 fa 08             	cmp    edx,0x8
c00017d7:	77 10                	ja     c00017e9 <dlmemalign+0x24>
c00017d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017dd:	83 c4 0c             	add    esp,0xc
c00017e0:	5b                   	pop    ebx
c00017e1:	5e                   	pop    esi
c00017e2:	5f                   	pop    edi
c00017e3:	5d                   	pop    ebp
c00017e4:	e9 fb f8 ff ff       	jmp    c00010e4 <dlmalloc>
c00017e9:	83 fa 0f             	cmp    edx,0xf
c00017ec:	bf 10 00 00 00       	mov    edi,0x10
c00017f1:	76 13                	jbe    c0001806 <dlmemalign+0x41>
c00017f3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017f6:	85 d1                	test   ecx,edx
c00017f8:	75 04                	jne    c00017fe <dlmemalign+0x39>
c00017fa:	89 d7                	mov    edi,edx
c00017fc:	eb 08                	jmp    c0001806 <dlmemalign+0x41>
c00017fe:	39 d7                	cmp    edi,edx
c0001800:	73 04                	jae    c0001806 <dlmemalign+0x41>
c0001802:	01 ff                	add    edi,edi
c0001804:	eb f8                	jmp    c00017fe <dlmemalign+0x39>
c0001806:	83 f8 df             	cmp    eax,0xffffffdf
c0001809:	76 07                	jbe    c0001812 <dlmemalign+0x4d>
c000180b:	31 c0                	xor    eax,eax
c000180d:	e9 ce 00 00 00       	jmp    c00018e0 <dlmemalign+0x11b>
c0001812:	83 c0 0b             	add    eax,0xb
c0001815:	bd 10 00 00 00       	mov    ebp,0x10
c000181a:	83 f8 0f             	cmp    eax,0xf
c000181d:	76 05                	jbe    c0001824 <dlmemalign+0x5f>
c000181f:	83 e0 f8             	and    eax,0xfffffff8
c0001822:	89 c5                	mov    ebp,eax
c0001824:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001828:	83 ec 0c             	sub    esp,0xc
c000182b:	50                   	push   eax
c000182c:	e8 b3 f8 ff ff       	call   c00010e4 <dlmalloc>
c0001831:	83 c4 10             	add    esp,0x10
c0001834:	85 c0                	test   eax,eax
c0001836:	89 c1                	mov    ecx,eax
c0001838:	74 d1                	je     c000180b <dlmemalign+0x46>
c000183a:	8d 70 f8             	lea    esi,[eax-0x8]
c000183d:	31 d2                	xor    edx,edx
c000183f:	f7 f7                	div    edi
c0001841:	85 d2                	test   edx,edx
c0001843:	74 62                	je     c00018a7 <dlmemalign+0xe2>
c0001845:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001849:	89 f8                	mov    eax,edi
c000184b:	f7 d8                	neg    eax
c000184d:	21 c3                	and    ebx,eax
c000184f:	83 eb 08             	sub    ebx,0x8
c0001852:	89 d8                	mov    eax,ebx
c0001854:	29 f0                	sub    eax,esi
c0001856:	83 f8 0f             	cmp    eax,0xf
c0001859:	77 02                	ja     c000185d <dlmemalign+0x98>
c000185b:	01 fb                	add    ebx,edi
c000185d:	89 d8                	mov    eax,ebx
c000185f:	29 f0                	sub    eax,esi
c0001861:	89 c6                	mov    esi,eax
c0001863:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001866:	89 c2                	mov    edx,eax
c0001868:	83 e2 fc             	and    edx,0xfffffffc
c000186b:	29 f2                	sub    edx,esi
c000186d:	a8 02                	test   al,0x2
c000186f:	74 10                	je     c0001881 <dlmemalign+0xbc>
c0001871:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001874:	83 ca 02             	or     edx,0x2
c0001877:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000187a:	8d 43 08             	lea    eax,[ebx+0x8]
c000187d:	89 33                	mov    DWORD PTR [ebx],esi
c000187f:	eb 5f                	jmp    c00018e0 <dlmemalign+0x11b>
c0001881:	89 d0                	mov    eax,edx
c0001883:	83 ec 0c             	sub    esp,0xc
c0001886:	83 c8 01             	or     eax,0x1
c0001889:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000188c:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001891:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001894:	83 e0 01             	and    eax,0x1
c0001897:	09 f0                	or     eax,esi
c0001899:	89 de                	mov    esi,ebx
c000189b:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000189e:	51                   	push   ecx
c000189f:	e8 e2 f4 ff ff       	call   c0000d86 <dlfree>
c00018a4:	83 c4 10             	add    esp,0x10
c00018a7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018aa:	a8 02                	test   al,0x2
c00018ac:	75 2f                	jne    c00018dd <dlmemalign+0x118>
c00018ae:	8d 55 10             	lea    edx,[ebp+0x10]
c00018b1:	83 e0 fc             	and    eax,0xfffffffc
c00018b4:	39 c2                	cmp    edx,eax
c00018b6:	73 25                	jae    c00018dd <dlmemalign+0x118>
c00018b8:	29 e8                	sub    eax,ebp
c00018ba:	83 ec 0c             	sub    esp,0xc
c00018bd:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c0:	83 c8 01             	or     eax,0x1
c00018c3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00018c6:	83 c2 08             	add    edx,0x8
c00018c9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018cc:	83 e0 01             	and    eax,0x1
c00018cf:	09 c5                	or     ebp,eax
c00018d1:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018d4:	52                   	push   edx
c00018d5:	e8 ac f4 ff ff       	call   c0000d86 <dlfree>
c00018da:	83 c4 10             	add    esp,0x10
c00018dd:	8d 46 08             	lea    eax,[esi+0x8]
c00018e0:	83 c4 0c             	add    esp,0xc
c00018e3:	5b                   	pop    ebx
c00018e4:	5e                   	pop    esi
c00018e5:	5f                   	pop    edi
c00018e6:	5d                   	pop    ebp
c00018e7:	c3                   	ret    

c00018e8 <dlcalloc>:
c00018e8:	53                   	push   ebx
c00018e9:	83 ec 14             	sub    esp,0x14
c00018ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018f0:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018f5:	50                   	push   eax
c00018f6:	e8 e9 f7 ff ff       	call   c00010e4 <dlmalloc>
c00018fb:	83 c4 10             	add    esp,0x10
c00018fe:	85 c0                	test   eax,eax
c0001900:	89 c3                	mov    ebx,eax
c0001902:	74 77                	je     c000197b <dlcalloc+0x93>
c0001904:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001907:	89 d0                	mov    eax,edx
c0001909:	83 e0 fc             	and    eax,0xfffffffc
c000190c:	80 e2 02             	and    dl,0x2
c000190f:	75 5a                	jne    c000196b <dlcalloc+0x83>
c0001911:	83 e8 04             	sub    eax,0x4
c0001914:	83 f8 27             	cmp    eax,0x27
c0001917:	76 03                	jbe    c000191c <dlcalloc+0x34>
c0001919:	51                   	push   ecx
c000191a:	eb 53                	jmp    c000196f <dlcalloc+0x87>
c000191c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001922:	83 f8 13             	cmp    eax,0x13
c0001925:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000192c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001933:	76 46                	jbe    c000197b <dlcalloc+0x93>
c0001935:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000193c:	83 f8 1b             	cmp    eax,0x1b
c000193f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001946:	76 33                	jbe    c000197b <dlcalloc+0x93>
c0001948:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000194f:	83 f8 23             	cmp    eax,0x23
c0001952:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001959:	76 20                	jbe    c000197b <dlcalloc+0x93>
c000195b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001962:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001969:	eb 10                	jmp    c000197b <dlcalloc+0x93>
c000196b:	52                   	push   edx
c000196c:	83 e8 08             	sub    eax,0x8
c000196f:	50                   	push   eax
c0001970:	6a 00                	push   0x0
c0001972:	53                   	push   ebx
c0001973:	e8 78 eb ff ff       	call   c00004f0 <memset>
c0001978:	83 c4 10             	add    esp,0x10
c000197b:	83 c4 08             	add    esp,0x8
c000197e:	89 d8                	mov    eax,ebx
c0001980:	5b                   	pop    ebx
c0001981:	c3                   	ret    

c0001982 <dlcfree>:
c0001982:	e9 ff f3 ff ff       	jmp    c0000d86 <dlfree>

c0001987 <dlindependent_calloc>:
c0001987:	83 ec 28             	sub    esp,0x28
c000198a:	b9 03 00 00 00       	mov    ecx,0x3
c000198f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001993:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000199b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a3:	e8 ca fa ff ff       	call   c0001472 <iALLOc>
c00019a8:	83 c4 2c             	add    esp,0x2c
c00019ab:	c3                   	ret    

c00019ac <dlindependent_comalloc>:
c00019ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019b0:	31 c9                	xor    ecx,ecx
c00019b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019be:	e9 af fa ff ff       	jmp    c0001472 <iALLOc>

c00019c3 <dlvalloc>:
c00019c3:	83 ec 0c             	sub    esp,0xc
c00019c6:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c00019cd:	75 0a                	jne    c00019d9 <dlvalloc+0x16>
c00019cf:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019d4:	e8 c6 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c00019d9:	50                   	push   eax
c00019da:	50                   	push   eax
c00019db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019df:	ff 35 5c 54 02 c0    	push   DWORD PTR ds:0xc002545c
c00019e5:	e8 db fd ff ff       	call   c00017c5 <dlmemalign>
c00019ea:	83 c4 1c             	add    esp,0x1c
c00019ed:	c3                   	ret    

c00019ee <dlpvalloc>:
c00019ee:	83 ec 0c             	sub    esp,0xc
c00019f1:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c00019f8:	75 0a                	jne    c0001a04 <dlpvalloc+0x16>
c00019fa:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019ff:	e8 9b f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a04:	52                   	push   edx
c0001a05:	a1 5c 54 02 c0       	mov    eax,ds:0xc002545c
c0001a0a:	52                   	push   edx
c0001a0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a0f:	89 c1                	mov    ecx,eax
c0001a11:	f7 d9                	neg    ecx
c0001a13:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a17:	21 ca                	and    edx,ecx
c0001a19:	52                   	push   edx
c0001a1a:	50                   	push   eax
c0001a1b:	e8 a5 fd ff ff       	call   c00017c5 <dlmemalign>
c0001a20:	83 c4 1c             	add    esp,0x1c
c0001a23:	c3                   	ret    

c0001a24 <dlmalloc_trim>:
c0001a24:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001a29:	e8 71 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a2e:	31 c0                	xor    eax,eax
c0001a30:	c3                   	ret    

c0001a31 <dlmalloc_usable_size>:
c0001a31:	53                   	push   ebx
c0001a32:	31 c0                	xor    eax,eax
c0001a34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a38:	85 c9                	test   ecx,ecx
c0001a3a:	74 24                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a3c:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a3f:	f6 c2 02             	test   dl,0x2
c0001a42:	74 08                	je     c0001a4c <dlmalloc_usable_size+0x1b>
c0001a44:	83 e2 fc             	and    edx,0xfffffffc
c0001a47:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a4a:	eb 14                	jmp    c0001a60 <dlmalloc_usable_size+0x2f>
c0001a4c:	89 d3                	mov    ebx,edx
c0001a4e:	31 c0                	xor    eax,eax
c0001a50:	83 e3 fe             	and    ebx,0xfffffffe
c0001a53:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a58:	74 06                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a5a:	83 e2 fc             	and    edx,0xfffffffc
c0001a5d:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a60:	5b                   	pop    ebx
c0001a61:	c3                   	ret    

c0001a62 <dlmallinfo>:
c0001a62:	55                   	push   ebp
c0001a63:	57                   	push   edi
c0001a64:	56                   	push   esi
c0001a65:	53                   	push   ebx
c0001a66:	83 ec 08             	sub    esp,0x8
c0001a69:	83 3d 2c 51 02 c0 00 	cmp    DWORD PTR ds:0xc002512c,0x0
c0001a70:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a74:	75 0a                	jne    c0001a80 <dlmallinfo+0x1e>
c0001a76:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001a7b:	e8 1f f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a80:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c0001a85:	31 ed                	xor    ebp,ebp
c0001a87:	31 c9                	xor    ecx,ecx
c0001a89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a8c:	83 e0 fc             	and    eax,0xfffffffc
c0001a8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a93:	31 c0                	xor    eax,eax
c0001a95:	8b 14 85 04 51 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaefc]
c0001a9c:	85 d2                	test   edx,edx
c0001a9e:	74 0e                	je     c0001aae <dlmallinfo+0x4c>
c0001aa0:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aa3:	45                   	inc    ebp
c0001aa4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aa7:	83 e6 fc             	and    esi,0xfffffffc
c0001aaa:	01 f1                	add    ecx,esi
c0001aac:	eb ee                	jmp    c0001a9c <dlmallinfo+0x3a>
c0001aae:	40                   	inc    eax
c0001aaf:	83 f8 0a             	cmp    eax,0xa
c0001ab2:	75 e1                	jne    c0001a95 <dlmallinfo+0x33>
c0001ab4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001abb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001abf:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001ac2:	b8 34 51 02 c0       	mov    eax,0xc0025134
c0001ac7:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001aca:	39 f0                	cmp    eax,esi
c0001acc:	74 10                	je     c0001ade <dlmallinfo+0x7c>
c0001ace:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001ad1:	ff 04 24             	inc    DWORD PTR [esp]
c0001ad4:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ad7:	83 e7 fc             	and    edi,0xfffffffc
c0001ada:	01 fa                	add    edx,edi
c0001adc:	eb ec                	jmp    c0001aca <dlmallinfo+0x68>
c0001ade:	83 c0 08             	add    eax,0x8
c0001ae1:	3d 2c 54 02 c0       	cmp    eax,0xc002542c
c0001ae6:	75 df                	jne    c0001ac7 <dlmallinfo+0x65>
c0001ae8:	8b 35 50 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025450
c0001aee:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af1:	a1 68 54 02 c0       	mov    eax,ds:0xc0025468
c0001af6:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001afc:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001aff:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b02:	8b 35 64 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025464
c0001b08:	89 03                	mov    DWORD PTR [ebx],eax
c0001b0a:	29 d0                	sub    eax,edx
c0001b0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b13:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b16:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b19:	8b 35 74 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025474
c0001b1f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b22:	89 d8                	mov    eax,ebx
c0001b24:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b27:	83 c4 08             	add    esp,0x8
c0001b2a:	5b                   	pop    ebx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	5d                   	pop    ebp
c0001b2e:	c2 04 00             	ret    0x4

c0001b31 <dlmalloc_stats>:
c0001b31:	83 ec 30             	sub    esp,0x30
c0001b34:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b38:	50                   	push   eax
c0001b39:	e8 24 ff ff ff       	call   c0001a62 <dlmallinfo>
c0001b3e:	83 c4 30             	add    esp,0x30
c0001b41:	c3                   	ret    

c0001b42 <dlmallopt>:
c0001b42:	56                   	push   esi
c0001b43:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001b48:	53                   	push   ebx
c0001b49:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b51:	e8 49 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b56:	8d 46 04             	lea    eax,[esi+0x4]
c0001b59:	83 f8 05             	cmp    eax,0x5
c0001b5c:	77 67                	ja     c0001bc5 <dlmallopt+0x83>
c0001b5e:	ff 24 85 04 f9 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe06fc]
c0001b65:	83 fb 50             	cmp    ebx,0x50
c0001b68:	77 5b                	ja     c0001bc5 <dlmallopt+0x83>
c0001b6a:	85 db                	test   ebx,ebx
c0001b6c:	ba 08 00 00 00       	mov    edx,0x8
c0001b71:	74 12                	je     c0001b85 <dlmallopt+0x43>
c0001b73:	83 c3 0b             	add    ebx,0xb
c0001b76:	ba 10 00 00 00       	mov    edx,0x10
c0001b7b:	83 fb 0f             	cmp    ebx,0xf
c0001b7e:	76 05                	jbe    c0001b85 <dlmallopt+0x43>
c0001b80:	89 da                	mov    edx,ebx
c0001b82:	83 e2 f8             	and    edx,0xfffffff8
c0001b85:	a1 00 51 02 c0       	mov    eax,ds:0xc0025100
c0001b8a:	83 e0 03             	and    eax,0x3
c0001b8d:	09 d0                	or     eax,edx
c0001b8f:	a3 00 51 02 c0       	mov    ds:0xc0025100,eax
c0001b94:	eb 31                	jmp    c0001bc7 <dlmallopt+0x85>
c0001b96:	89 1d 44 54 02 c0    	mov    DWORD PTR ds:0xc0025444,ebx
c0001b9c:	eb 06                	jmp    c0001ba4 <dlmallopt+0x62>
c0001b9e:	89 1d 48 54 02 c0    	mov    DWORD PTR ds:0xc0025448,ebx
c0001ba4:	be 01 00 00 00       	mov    esi,0x1
c0001ba9:	eb 1c                	jmp    c0001bc7 <dlmallopt+0x85>
c0001bab:	89 1d 4c 54 02 c0    	mov    DWORD PTR ds:0xc002544c,ebx
c0001bb1:	eb f1                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bb3:	31 f6                	xor    esi,esi
c0001bb5:	85 db                	test   ebx,ebx
c0001bb7:	75 0e                	jne    c0001bc7 <dlmallopt+0x85>
c0001bb9:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c0001bc3:	eb df                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bc5:	31 f6                	xor    esi,esi
c0001bc7:	5b                   	pop    ebx
c0001bc8:	89 f0                	mov    eax,esi
c0001bca:	5e                   	pop    esi
c0001bcb:	c3                   	ret    

c0001bcc <isblank>:
c0001bcc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001bd1:	74 09                	je     c0001bdc <isblank+0x10>
c0001bd3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001bd8:	75 0a                	jne    c0001be4 <isblank+0x18>
c0001bda:	66 90                	xchg   ax,ax
c0001bdc:	b8 01 00 00 00       	mov    eax,0x1
c0001be1:	c3                   	ret    
c0001be2:	66 90                	xchg   ax,ax
c0001be4:	b8 00 00 00 00       	mov    eax,0x0
c0001be9:	c3                   	ret    
c0001bea:	66 90                	xchg   ax,ax

c0001bec <iscntrl>:
c0001bec:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bf1:	7e 09                	jle    c0001bfc <iscntrl+0x10>
c0001bf3:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bf8:	75 0a                	jne    c0001c04 <iscntrl+0x18>
c0001bfa:	66 90                	xchg   ax,ax
c0001bfc:	b8 01 00 00 00       	mov    eax,0x1
c0001c01:	c3                   	ret    
c0001c02:	66 90                	xchg   ax,ax
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isdigit>:
c0001c0c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001c11:	7e 0d                	jle    c0001c20 <isdigit+0x14>
c0001c13:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001c18:	7f 06                	jg     c0001c20 <isdigit+0x14>
c0001c1a:	b8 01 00 00 00       	mov    eax,0x1
c0001c1f:	c3                   	ret    
c0001c20:	b8 00 00 00 00       	mov    eax,0x0
c0001c25:	c3                   	ret    
c0001c26:	66 90                	xchg   ax,ax

c0001c28 <islower>:
c0001c28:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001c2d:	7e 0d                	jle    c0001c3c <islower+0x14>
c0001c2f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001c34:	7f 06                	jg     c0001c3c <islower+0x14>
c0001c36:	b8 01 00 00 00       	mov    eax,0x1
c0001c3b:	c3                   	ret    
c0001c3c:	b8 00 00 00 00       	mov    eax,0x0
c0001c41:	c3                   	ret    
c0001c42:	66 90                	xchg   ax,ax

c0001c44 <isspace>:
c0001c44:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c49:	7c 19                	jl     c0001c64 <isspace+0x20>
c0001c4b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c50:	7e 0a                	jle    c0001c5c <isspace+0x18>
c0001c52:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c57:	75 0b                	jne    c0001c64 <isspace+0x20>
c0001c59:	8d 76 00             	lea    esi,[esi+0x0]
c0001c5c:	b8 01 00 00 00       	mov    eax,0x1
c0001c61:	c3                   	ret    
c0001c62:	66 90                	xchg   ax,ax
c0001c64:	b8 00 00 00 00       	mov    eax,0x0
c0001c69:	c3                   	ret    
c0001c6a:	66 90                	xchg   ax,ax

c0001c6c <isupper>:
c0001c6c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c71:	7e 0d                	jle    c0001c80 <isupper+0x14>
c0001c73:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c78:	7f 06                	jg     c0001c80 <isupper+0x14>
c0001c7a:	b8 01 00 00 00       	mov    eax,0x1
c0001c7f:	c3                   	ret    
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isalpha>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 db ff ff ff       	call   c0001c6c <isupper>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 10                	jne    c0001ca8 <isalpha+0x20>
c0001c98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c9c:	e8 87 ff ff ff       	call   c0001c28 <islower>
c0001ca1:	83 c4 04             	add    esp,0x4
c0001ca4:	85 c0                	test   eax,eax
c0001ca6:	74 08                	je     c0001cb0 <isalpha+0x28>
c0001ca8:	b8 01 00 00 00       	mov    eax,0x1
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	b8 00 00 00 00       	mov    eax,0x0
c0001cb5:	c3                   	ret    
c0001cb6:	66 90                	xchg   ax,ax

c0001cb8 <isalnum>:
c0001cb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cbc:	e8 c7 ff ff ff       	call   c0001c88 <isalpha>
c0001cc1:	83 c4 04             	add    esp,0x4
c0001cc4:	85 c0                	test   eax,eax
c0001cc6:	75 10                	jne    c0001cd8 <isalnum+0x20>
c0001cc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ccc:	e8 3b ff ff ff       	call   c0001c0c <isdigit>
c0001cd1:	83 c4 04             	add    esp,0x4
c0001cd4:	85 c0                	test   eax,eax
c0001cd6:	74 08                	je     c0001ce0 <isalnum+0x28>
c0001cd8:	b8 01 00 00 00       	mov    eax,0x1
c0001cdd:	c3                   	ret    
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 00 00 00 00       	mov    eax,0x0
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax

c0001ce8 <ispunct>:
c0001ce8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cec:	e8 c7 ff ff ff       	call   c0001cb8 <isalnum>
c0001cf1:	83 c4 04             	add    esp,0x4
c0001cf4:	85 c0                	test   eax,eax
c0001cf6:	75 28                	jne    c0001d20 <ispunct+0x38>
c0001cf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cfc:	e8 43 ff ff ff       	call   c0001c44 <isspace>
c0001d01:	83 c4 04             	add    esp,0x4
c0001d04:	85 c0                	test   eax,eax
c0001d06:	75 18                	jne    c0001d20 <ispunct+0x38>
c0001d08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d0c:	e8 db fe ff ff       	call   c0001bec <iscntrl>
c0001d11:	83 c4 04             	add    esp,0x4
c0001d14:	85 c0                	test   eax,eax
c0001d16:	75 08                	jne    c0001d20 <ispunct+0x38>
c0001d18:	b8 01 00 00 00       	mov    eax,0x1
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax
c0001d20:	b8 00 00 00 00       	mov    eax,0x0
c0001d25:	c3                   	ret    
c0001d26:	66 90                	xchg   ax,ax

c0001d28 <isgraph>:
c0001d28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d2c:	e8 87 ff ff ff       	call   c0001cb8 <isalnum>
c0001d31:	83 c4 04             	add    esp,0x4
c0001d34:	85 c0                	test   eax,eax
c0001d36:	75 10                	jne    c0001d48 <isgraph+0x20>
c0001d38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d3c:	e8 a7 ff ff ff       	call   c0001ce8 <ispunct>
c0001d41:	83 c4 04             	add    esp,0x4
c0001d44:	85 c0                	test   eax,eax
c0001d46:	74 08                	je     c0001d50 <isgraph+0x28>
c0001d48:	b8 01 00 00 00       	mov    eax,0x1
c0001d4d:	c3                   	ret    
c0001d4e:	66 90                	xchg   ax,ax
c0001d50:	b8 00 00 00 00       	mov    eax,0x0
c0001d55:	c3                   	ret    
c0001d56:	66 90                	xchg   ax,ax

c0001d58 <isprint>:
c0001d58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d5c:	e8 c7 ff ff ff       	call   c0001d28 <isgraph>
c0001d61:	83 c4 04             	add    esp,0x4
c0001d64:	85 c0                	test   eax,eax
c0001d66:	75 08                	jne    c0001d70 <isprint+0x18>
c0001d68:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d6d:	75 09                	jne    c0001d78 <isprint+0x20>
c0001d6f:	90                   	nop
c0001d70:	b8 01 00 00 00       	mov    eax,0x1
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 00 00 00 00       	mov    eax,0x0
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax

c0001d80 <isxdigit>:
c0001d80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d84:	e8 83 fe ff ff       	call   c0001c0c <isdigit>
c0001d89:	83 c4 04             	add    esp,0x4
c0001d8c:	85 c0                	test   eax,eax
c0001d8e:	75 20                	jne    c0001db0 <isxdigit+0x30>
c0001d90:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d95:	7e 09                	jle    c0001da0 <isxdigit+0x20>
c0001d97:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d9c:	7e 12                	jle    c0001db0 <isxdigit+0x30>
c0001d9e:	66 90                	xchg   ax,ax
c0001da0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001da5:	7e 11                	jle    c0001db8 <isxdigit+0x38>
c0001da7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001dac:	7f 0a                	jg     c0001db8 <isxdigit+0x38>
c0001dae:	66 90                	xchg   ax,ax
c0001db0:	b8 01 00 00 00       	mov    eax,0x1
c0001db5:	c3                   	ret    
c0001db6:	66 90                	xchg   ax,ax
c0001db8:	b8 00 00 00 00       	mov    eax,0x0
c0001dbd:	c3                   	ret    

c0001dbe <disk_status>:
c0001dbe:	31 c0                	xor    eax,eax
c0001dc0:	c3                   	ret    

c0001dc1 <disk_initialize>:
c0001dc1:	31 c0                	xor    eax,eax
c0001dc3:	c3                   	ret    

c0001dc4 <disk_read>:
c0001dc4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc9:	0f b6 04 85 c0 92 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6d40]
c0001dd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd5:	e9 6e 70 01 00       	jmp    c0018e48 <fatWrapperReadDisk>

c0001dda <disk_write>:
c0001dda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001ddf:	0f b6 04 85 c0 92 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6d40]
c0001de7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001deb:	e9 98 70 01 00       	jmp    c0018e88 <fatWrapperWriteDisk>

c0001df0 <disk_ioctl>:
c0001df0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001df5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001df9:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dfe:	0f b6 04 85 c0 92 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6d40]
c0001e06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e0a:	e9 b9 70 01 00       	jmp    c0018ec8 <fatWrapperIoctl>

c0001e0f <ld_word>:
c0001e0f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e13:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e16:	c1 e2 08             	shl    edx,0x8
c0001e19:	09 d0                	or     eax,edx
c0001e1b:	c3                   	ret    

c0001e1c <ld_dword>:
c0001e1c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001e20:	89 d1                	mov    ecx,edx
c0001e22:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e26:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e29:	c1 e1 08             	shl    ecx,0x8
c0001e2c:	09 ca                	or     edx,ecx
c0001e2e:	c1 e2 08             	shl    edx,0x8
c0001e31:	09 d0                	or     eax,edx
c0001e33:	c3                   	ret    

c0001e34 <st_word>:
c0001e34:	66 89 10             	mov    WORD PTR [eax],dx
c0001e37:	c3                   	ret    

c0001e38 <st_dword>:
c0001e38:	89 10                	mov    DWORD PTR [eax],edx
c0001e3a:	c3                   	ret    

c0001e3b <mem_cpy>:
c0001e3b:	85 c9                	test   ecx,ecx
c0001e3d:	74 10                	je     c0001e4f <mem_cpy+0x14>
c0001e3f:	57                   	push   edi
c0001e40:	01 c1                	add    ecx,eax
c0001e42:	56                   	push   esi
c0001e43:	89 c7                	mov    edi,eax
c0001e45:	89 d6                	mov    esi,edx
c0001e47:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e48:	39 f9                	cmp    ecx,edi
c0001e4a:	75 fb                	jne    c0001e47 <mem_cpy+0xc>
c0001e4c:	5e                   	pop    esi
c0001e4d:	5f                   	pop    edi
c0001e4e:	c3                   	ret    
c0001e4f:	c3                   	ret    

c0001e50 <mem_set>:
c0001e50:	01 c1                	add    ecx,eax
c0001e52:	88 10                	mov    BYTE PTR [eax],dl
c0001e54:	40                   	inc    eax
c0001e55:	39 c8                	cmp    eax,ecx
c0001e57:	75 f9                	jne    c0001e52 <mem_set+0x2>
c0001e59:	c3                   	ret    

c0001e5a <mem_cmp>:
c0001e5a:	57                   	push   edi
c0001e5b:	56                   	push   esi
c0001e5c:	89 c6                	mov    esi,eax
c0001e5e:	53                   	push   ebx
c0001e5f:	46                   	inc    esi
c0001e60:	42                   	inc    edx
c0001e61:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e65:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e69:	29 fb                	sub    ebx,edi
c0001e6b:	89 cf                	mov    edi,ecx
c0001e6d:	29 f7                	sub    edi,esi
c0001e6f:	01 c7                	add    edi,eax
c0001e71:	74 04                	je     c0001e77 <mem_cmp+0x1d>
c0001e73:	85 db                	test   ebx,ebx
c0001e75:	74 e8                	je     c0001e5f <mem_cmp+0x5>
c0001e77:	89 d8                	mov    eax,ebx
c0001e79:	5b                   	pop    ebx
c0001e7a:	5e                   	pop    esi
c0001e7b:	5f                   	pop    edi
c0001e7c:	c3                   	ret    

c0001e7d <chk_chr>:
c0001e7d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e80:	85 c9                	test   ecx,ecx
c0001e82:	74 07                	je     c0001e8b <chk_chr+0xe>
c0001e84:	39 d1                	cmp    ecx,edx
c0001e86:	74 03                	je     c0001e8b <chk_chr+0xe>
c0001e88:	40                   	inc    eax
c0001e89:	eb f2                	jmp    c0001e7d <chk_chr>
c0001e8b:	89 c8                	mov    eax,ecx
c0001e8d:	c3                   	ret    

c0001e8e <dbc_1st>:
c0001e8e:	31 c0                	xor    eax,eax
c0001e90:	c3                   	ret    

c0001e91 <dbc_2nd>:
c0001e91:	31 c0                	xor    eax,eax
c0001e93:	c3                   	ret    

c0001e94 <tchar2uni>:
c0001e94:	57                   	push   edi
c0001e95:	56                   	push   esi
c0001e96:	53                   	push   ebx
c0001e97:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e99:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e9b:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e9e:	f6 c1 80             	test   cl,0x80
c0001ea1:	75 0a                	jne    c0001ead <tchar2uni+0x19>
c0001ea3:	0f b6 d1             	movzx  edx,cl
c0001ea6:	89 f3                	mov    ebx,esi
c0001ea8:	e9 b2 00 00 00       	jmp    c0001f5f <tchar2uni+0xcb>
c0001ead:	89 ca                	mov    edx,ecx
c0001eaf:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001eb5:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001ebb:	89 ca                	mov    edx,ecx
c0001ebd:	75 0a                	jne    c0001ec9 <tchar2uni+0x35>
c0001ebf:	83 e2 1f             	and    edx,0x1f
c0001ec2:	b9 01 00 00 00       	mov    ecx,0x1
c0001ec7:	eb 37                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ec9:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001ecf:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001ed5:	75 0c                	jne    c0001ee3 <tchar2uni+0x4f>
c0001ed7:	89 ca                	mov    edx,ecx
c0001ed9:	b9 02 00 00 00       	mov    ecx,0x2
c0001ede:	83 e2 0f             	and    edx,0xf
c0001ee1:	eb 1d                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ee3:	89 cf                	mov    edi,ecx
c0001ee5:	83 ca ff             	or     edx,0xffffffff
c0001ee8:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eee:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ef4:	75 70                	jne    c0001f66 <tchar2uni+0xd2>
c0001ef6:	89 ca                	mov    edx,ecx
c0001ef8:	b9 03 00 00 00       	mov    ecx,0x3
c0001efd:	83 e2 07             	and    edx,0x7
c0001f00:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001f04:	46                   	inc    esi
c0001f05:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001f08:	89 cf                	mov    edi,ecx
c0001f0a:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001f10:	83 c7 80             	add    edi,0xffffff80
c0001f13:	75 4e                	jne    c0001f63 <tchar2uni+0xcf>
c0001f15:	c1 e2 06             	shl    edx,0x6
c0001f18:	83 e1 3f             	and    ecx,0x3f
c0001f1b:	09 ca                	or     edx,ecx
c0001f1d:	39 de                	cmp    esi,ebx
c0001f1f:	75 e3                	jne    c0001f04 <tchar2uni+0x70>
c0001f21:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001f27:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f2d:	76 34                	jbe    c0001f63 <tchar2uni+0xcf>
c0001f2f:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001f32:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001f38:	77 29                	ja     c0001f63 <tchar2uni+0xcf>
c0001f3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f40:	76 1d                	jbe    c0001f5f <tchar2uni+0xcb>
c0001f42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f4e:	c1 e1 06             	shl    ecx,0x6
c0001f51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f57:	09 ca                	or     edx,ecx
c0001f59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f5f:	89 18                	mov    DWORD PTR [eax],ebx
c0001f61:	eb 03                	jmp    c0001f66 <tchar2uni+0xd2>
c0001f63:	83 ca ff             	or     edx,0xffffffff
c0001f66:	5b                   	pop    ebx
c0001f67:	89 d0                	mov    eax,edx
c0001f69:	5e                   	pop    esi
c0001f6a:	5f                   	pop    edi
c0001f6b:	c3                   	ret    

c0001f6c <put_utf>:
c0001f6c:	53                   	push   ebx
c0001f6d:	83 f8 7f             	cmp    eax,0x7f
c0001f70:	89 c3                	mov    ebx,eax
c0001f72:	b0 00                	mov    al,0x0
c0001f74:	77 11                	ja     c0001f87 <put_utf+0x1b>
c0001f76:	85 c9                	test   ecx,ecx
c0001f78:	0f 84 e5 00 00 00    	je     c0002063 <put_utf+0xf7>
c0001f7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001f80:	b0 01                	mov    al,0x1
c0001f82:	e9 dc 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001f87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f8d:	77 23                	ja     c0001fb2 <put_utf+0x46>
c0001f8f:	83 f9 01             	cmp    ecx,0x1
c0001f92:	0f 86 cb 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001f98:	89 d8                	mov    eax,ebx
c0001f9a:	83 e3 3f             	and    ebx,0x3f
c0001f9d:	c1 e8 06             	shr    eax,0x6
c0001fa0:	83 cb 80             	or     ebx,0xffffff80
c0001fa3:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001fa6:	83 c8 c0             	or     eax,0xffffffc0
c0001fa9:	88 02                	mov    BYTE PTR [edx],al
c0001fab:	b0 02                	mov    al,0x2
c0001fad:	e9 b1 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001fb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001fb8:	77 40                	ja     c0001ffa <put_utf+0x8e>
c0001fba:	83 f9 02             	cmp    ecx,0x2
c0001fbd:	0f 86 a0 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fc3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001fc9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001fcf:	0f 86 8e 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fd5:	89 d8                	mov    eax,ebx
c0001fd7:	c1 e8 0c             	shr    eax,0xc
c0001fda:	83 c8 e0             	or     eax,0xffffffe0
c0001fdd:	88 02                	mov    BYTE PTR [edx],al
c0001fdf:	89 d8                	mov    eax,ebx
c0001fe1:	83 e3 3f             	and    ebx,0x3f
c0001fe4:	c1 e8 06             	shr    eax,0x6
c0001fe7:	83 cb 80             	or     ebx,0xffffff80
c0001fea:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fed:	83 e0 3f             	and    eax,0x3f
c0001ff0:	83 c8 80             	or     eax,0xffffff80
c0001ff3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ff6:	b0 03                	mov    al,0x3
c0001ff8:	eb 69                	jmp    c0002063 <put_utf+0xf7>
c0001ffa:	83 f9 03             	cmp    ecx,0x3
c0001ffd:	76 64                	jbe    c0002063 <put_utf+0xf7>
c0001fff:	89 d9                	mov    ecx,ebx
c0002001:	0f b7 c3             	movzx  eax,bx
c0002004:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c000200a:	66 31 c9             	xor    cx,cx
c000200d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0002013:	c1 e9 06             	shr    ecx,0x6
c0002016:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c000201c:	77 43                	ja     c0002061 <put_utf+0xf5>
c000201e:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002024:	77 3b                	ja     c0002061 <put_utf+0xf5>
c0002026:	09 cb                	or     ebx,ecx
c0002028:	81 c3 00 00 01 00    	add    ebx,0x10000
c000202e:	89 d8                	mov    eax,ebx
c0002030:	c1 e8 12             	shr    eax,0x12
c0002033:	83 c8 f0             	or     eax,0xfffffff0
c0002036:	88 02                	mov    BYTE PTR [edx],al
c0002038:	89 d8                	mov    eax,ebx
c000203a:	c1 e8 0c             	shr    eax,0xc
c000203d:	83 e0 3f             	and    eax,0x3f
c0002040:	83 c8 80             	or     eax,0xffffff80
c0002043:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002046:	89 d8                	mov    eax,ebx
c0002048:	83 e3 3f             	and    ebx,0x3f
c000204b:	c1 e8 06             	shr    eax,0x6
c000204e:	83 cb 80             	or     ebx,0xffffff80
c0002051:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002054:	83 e0 3f             	and    eax,0x3f
c0002057:	83 c8 80             	or     eax,0xffffff80
c000205a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000205d:	b0 04                	mov    al,0x4
c000205f:	eb 02                	jmp    c0002063 <put_utf+0xf7>
c0002061:	31 c0                	xor    eax,eax
c0002063:	5b                   	pop    ebx
c0002064:	c3                   	ret    

c0002065 <clst2sect>:
c0002065:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002068:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000206b:	83 ea 02             	sub    edx,0x2
c000206e:	39 ca                	cmp    edx,ecx
c0002070:	76 0d                	jbe    c000207f <clst2sect+0x1a>
c0002072:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002076:	0f af d1             	imul   edx,ecx
c0002079:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000207c:	89 d0                	mov    eax,edx
c000207e:	c3                   	ret    
c000207f:	31 c0                	xor    eax,eax
c0002081:	c3                   	ret    

c0002082 <pick_lfn>:
c0002082:	55                   	push   ebp
c0002083:	57                   	push   edi
c0002084:	89 c7                	mov    edi,eax
c0002086:	56                   	push   esi
c0002087:	53                   	push   ebx
c0002088:	89 d3                	mov    ebx,edx
c000208a:	8d 42 1a             	lea    eax,[edx+0x1a]
c000208d:	e8 7d fd ff ff       	call   c0001e0f <ld_word>
c0002092:	66 85 c0             	test   ax,ax
c0002095:	74 04                	je     c000209b <pick_lfn+0x19>
c0002097:	31 c0                	xor    eax,eax
c0002099:	eb 62                	jmp    c00020fd <pick_lfn+0x7b>
c000209b:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000209e:	bd 01 00 00 00       	mov    ebp,0x1
c00020a3:	31 f6                	xor    esi,esi
c00020a5:	83 e1 bf             	and    ecx,0xffffffbf
c00020a8:	49                   	dec    ecx
c00020a9:	6b c9 0d             	imul   ecx,ecx,0xd
c00020ac:	0f b6 86 60 fa 01 c0 	movzx  eax,BYTE PTR [esi-0x3ffe05a0]
c00020b3:	01 d8                	add    eax,ebx
c00020b5:	e8 55 fd ff ff       	call   c0001e0f <ld_word>
c00020ba:	66 85 ed             	test   bp,bp
c00020bd:	74 11                	je     c00020d0 <pick_lfn+0x4e>
c00020bf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020c5:	77 d0                	ja     c0002097 <pick_lfn+0x15>
c00020c7:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00020cb:	89 c5                	mov    ebp,eax
c00020cd:	41                   	inc    ecx
c00020ce:	eb 0a                	jmp    c00020da <pick_lfn+0x58>
c00020d0:	0f b7 c0             	movzx  eax,ax
c00020d3:	3d ff ff 00 00       	cmp    eax,0xffff
c00020d8:	75 bd                	jne    c0002097 <pick_lfn+0x15>
c00020da:	46                   	inc    esi
c00020db:	83 fe 0d             	cmp    esi,0xd
c00020de:	75 cc                	jne    c00020ac <pick_lfn+0x2a>
c00020e0:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020e3:	74 13                	je     c00020f8 <pick_lfn+0x76>
c00020e5:	66 85 ed             	test   bp,bp
c00020e8:	74 0e                	je     c00020f8 <pick_lfn+0x76>
c00020ea:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020f0:	77 a5                	ja     c0002097 <pick_lfn+0x15>
c00020f2:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020f8:	b8 01 00 00 00       	mov    eax,0x1
c00020fd:	5b                   	pop    ebx
c00020fe:	5e                   	pop    esi
c00020ff:	5f                   	pop    edi
c0002100:	5d                   	pop    ebp
c0002101:	c3                   	ret    

c0002102 <put_lfn>:
c0002102:	55                   	push   ebp
c0002103:	57                   	push   edi
c0002104:	89 d7                	mov    edi,edx
c0002106:	56                   	push   esi
c0002107:	31 f6                	xor    esi,esi
c0002109:	53                   	push   ebx
c000210a:	83 ec 0c             	sub    esp,0xc
c000210d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002111:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0002115:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000211b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000211f:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002122:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002125:	31 d2                	xor    edx,edx
c0002127:	e8 08 fd ff ff       	call   c0001e34 <st_word>
c000212c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002133:	0f b6 d9             	movzx  ebx,cl
c0002136:	4b                   	dec    ebx
c0002137:	6b db 0d             	imul   ebx,ebx,0xd
c000213a:	0f b7 c6             	movzx  eax,si
c000213d:	3d ff ff 00 00       	cmp    eax,0xffff
c0002142:	74 09                	je     c000214d <put_lfn+0x4b>
c0002144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002148:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000214c:	43                   	inc    ebx
c000214d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002150:	0f b7 ee             	movzx  ebp,si
c0002153:	89 ea                	mov    edx,ebp
c0002155:	0f b6 80 60 fa 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe05a0]
c000215c:	01 f8                	add    eax,edi
c000215e:	e8 d1 fc ff ff       	call   c0001e34 <st_word>
c0002163:	85 ed                	test   ebp,ebp
c0002165:	75 05                	jne    c000216c <put_lfn+0x6a>
c0002167:	be ff ff 00 00       	mov    esi,0xffff
c000216c:	ff 04 24             	inc    DWORD PTR [esp]
c000216f:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002173:	75 c5                	jne    c000213a <put_lfn+0x38>
c0002175:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000217b:	74 0b                	je     c0002188 <put_lfn+0x86>
c000217d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002181:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002186:	75 07                	jne    c000218f <put_lfn+0x8d>
c0002188:	83 c9 40             	or     ecx,0x40
c000218b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000218f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002193:	88 07                	mov    BYTE PTR [edi],al
c0002195:	83 c4 0c             	add    esp,0xc
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	5f                   	pop    edi
c000219b:	5d                   	pop    ebp
c000219c:	c3                   	ret    

c000219d <gen_numname>:
c000219d:	57                   	push   edi
c000219e:	89 cf                	mov    edi,ecx
c00021a0:	56                   	push   esi
c00021a1:	b9 0b 00 00 00       	mov    ecx,0xb
c00021a6:	53                   	push   ebx
c00021a7:	89 c6                	mov    esi,eax
c00021a9:	83 ec 10             	sub    esp,0x10
c00021ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00021b0:	e8 86 fc ff ff       	call   c0001e3b <mem_cpy>
c00021b5:	83 fb 05             	cmp    ebx,0x5
c00021b8:	76 30                	jbe    c00021ea <gen_numname+0x4d>
c00021ba:	66 8b 07             	mov    ax,WORD PTR [edi]
c00021bd:	66 85 c0             	test   ax,ax
c00021c0:	74 28                	je     c00021ea <gen_numname+0x4d>
c00021c2:	83 c7 02             	add    edi,0x2
c00021c5:	ba 10 00 00 00       	mov    edx,0x10
c00021ca:	89 c1                	mov    ecx,eax
c00021cc:	01 db                	add    ebx,ebx
c00021ce:	c1 e0 10             	shl    eax,0x10
c00021d1:	83 e1 01             	and    ecx,0x1
c00021d4:	c1 e8 11             	shr    eax,0x11
c00021d7:	01 cb                	add    ebx,ecx
c00021d9:	0f ba e3 10          	bt     ebx,0x10
c00021dd:	73 06                	jae    c00021e5 <gen_numname+0x48>
c00021df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021e5:	4a                   	dec    edx
c00021e6:	75 e2                	jne    c00021ca <gen_numname+0x2d>
c00021e8:	eb d0                	jmp    c00021ba <gen_numname+0x1d>
c00021ea:	b8 07 00 00 00       	mov    eax,0x7
c00021ef:	89 d9                	mov    ecx,ebx
c00021f1:	83 e1 0f             	and    ecx,0xf
c00021f4:	8d 79 30             	lea    edi,[ecx+0x30]
c00021f7:	83 ff 39             	cmp    edi,0x39
c00021fa:	89 fa                	mov    edx,edi
c00021fc:	76 03                	jbe    c0002201 <gen_numname+0x64>
c00021fe:	8d 51 37             	lea    edx,[ecx+0x37]
c0002201:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002204:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002208:	89 da                	mov    edx,ebx
c000220a:	c1 ea 04             	shr    edx,0x4
c000220d:	83 fb 0f             	cmp    ebx,0xf
c0002210:	76 06                	jbe    c0002218 <gen_numname+0x7b>
c0002212:	89 c8                	mov    eax,ecx
c0002214:	89 d3                	mov    ebx,edx
c0002216:	eb d7                	jmp    c00021ef <gen_numname+0x52>
c0002218:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000221d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002220:	31 d2                	xor    edx,edx
c0002222:	8d 04 16             	lea    eax,[esi+edx*1]
c0002225:	39 ca                	cmp    edx,ecx
c0002227:	73 19                	jae    c0002242 <gen_numname+0xa5>
c0002229:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000222c:	83 f8 20             	cmp    eax,0x20
c000222f:	74 11                	je     c0002242 <gen_numname+0xa5>
c0002231:	e8 58 fc ff ff       	call   c0001e8e <dbc_1st>
c0002236:	85 c0                	test   eax,eax
c0002238:	74 05                	je     c000223f <gen_numname+0xa2>
c000223a:	39 d3                	cmp    ebx,edx
c000223c:	74 04                	je     c0002242 <gen_numname+0xa5>
c000223e:	42                   	inc    edx
c000223f:	42                   	inc    edx
c0002240:	eb e0                	jmp    c0002222 <gen_numname+0x85>
c0002242:	83 f9 07             	cmp    ecx,0x7
c0002245:	b0 20                	mov    al,0x20
c0002247:	77 05                	ja     c000224e <gen_numname+0xb1>
c0002249:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000224d:	41                   	inc    ecx
c000224e:	42                   	inc    edx
c000224f:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002253:	83 fa 07             	cmp    edx,0x7
c0002256:	76 ea                	jbe    c0002242 <gen_numname+0xa5>
c0002258:	83 c4 10             	add    esp,0x10
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	5f                   	pop    edi
c000225e:	c3                   	ret    

c000225f <sum_sfn>:
c000225f:	53                   	push   ebx
c0002260:	31 c9                	xor    ecx,ecx
c0002262:	31 db                	xor    ebx,ebx
c0002264:	0f b6 d1             	movzx  edx,cl
c0002267:	d1 ea                	shr    edx,1
c0002269:	c1 e1 07             	shl    ecx,0x7
c000226c:	09 ca                	or     edx,ecx
c000226e:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002271:	43                   	inc    ebx
c0002272:	01 ca                	add    edx,ecx
c0002274:	83 fb 0b             	cmp    ebx,0xb
c0002277:	88 d1                	mov    cl,dl
c0002279:	75 e9                	jne    c0002264 <sum_sfn+0x5>
c000227b:	5b                   	pop    ebx
c000227c:	88 d0                	mov    al,dl
c000227e:	c3                   	ret    

c000227f <get_ldnumber>:
c000227f:	55                   	push   ebp
c0002280:	57                   	push   edi
c0002281:	56                   	push   esi
c0002282:	83 ce ff             	or     esi,0xffffffff
c0002285:	53                   	push   ebx
c0002286:	8b 10                	mov    edx,DWORD PTR [eax]
c0002288:	85 d2                	test   edx,edx
c000228a:	74 38                	je     c00022c4 <get_ldnumber+0x45>
c000228c:	89 c5                	mov    ebp,eax
c000228e:	89 d1                	mov    ecx,edx
c0002290:	41                   	inc    ecx
c0002291:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002295:	80 fb 1f             	cmp    bl,0x1f
c0002298:	76 05                	jbe    c000229f <get_ldnumber+0x20>
c000229a:	83 fb 3a             	cmp    ebx,0x3a
c000229d:	75 f1                	jne    c0002290 <get_ldnumber+0x11>
c000229f:	31 f6                	xor    esi,esi
c00022a1:	83 fb 3a             	cmp    ebx,0x3a
c00022a4:	75 1e                	jne    c00022c4 <get_ldnumber+0x45>
c00022a6:	8a 1a                	mov    bl,BYTE PTR [edx]
c00022a8:	83 ce ff             	or     esi,0xffffffff
c00022ab:	8d 7b d0             	lea    edi,[ebx-0x30]
c00022ae:	89 f8                	mov    eax,edi
c00022b0:	3c 09                	cmp    al,0x9
c00022b2:	77 10                	ja     c00022c4 <get_ldnumber+0x45>
c00022b4:	83 c2 02             	add    edx,0x2
c00022b7:	39 d1                	cmp    ecx,edx
c00022b9:	75 09                	jne    c00022c4 <get_ldnumber+0x45>
c00022bb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00022be:	0f be f3             	movsx  esi,bl
c00022c1:	83 ee 30             	sub    esi,0x30
c00022c4:	5b                   	pop    ebx
c00022c5:	89 f0                	mov    eax,esi
c00022c7:	5e                   	pop    esi
c00022c8:	5f                   	pop    edi
c00022c9:	5d                   	pop    ebp
c00022ca:	c3                   	ret    

c00022cb <validate>:
c00022cb:	56                   	push   esi
c00022cc:	85 c0                	test   eax,eax
c00022ce:	53                   	push   ebx
c00022cf:	89 d6                	mov    esi,edx
c00022d1:	51                   	push   ecx
c00022d2:	75 09                	jne    c00022dd <validate+0x12>
c00022d4:	b8 09 00 00 00       	mov    eax,0x9
c00022d9:	31 c9                	xor    ecx,ecx
c00022db:	eb 2e                	jmp    c000230b <validate+0x40>
c00022dd:	89 c3                	mov    ebx,eax
c00022df:	8b 00                	mov    eax,DWORD PTR [eax]
c00022e1:	85 c0                	test   eax,eax
c00022e3:	74 ef                	je     c00022d4 <validate+0x9>
c00022e5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022e8:	74 ea                	je     c00022d4 <validate+0x9>
c00022ea:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022ed:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022f1:	75 e1                	jne    c00022d4 <validate+0x9>
c00022f3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f7:	83 ec 0c             	sub    esp,0xc
c00022fa:	50                   	push   eax
c00022fb:	e8 be fa ff ff       	call   c0001dbe <disk_status>
c0002300:	83 c4 10             	add    esp,0x10
c0002303:	a8 01                	test   al,0x1
c0002305:	75 cd                	jne    c00022d4 <validate+0x9>
c0002307:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002309:	31 c0                	xor    eax,eax
c000230b:	89 0e                	mov    DWORD PTR [esi],ecx
c000230d:	5a                   	pop    edx
c000230e:	5b                   	pop    ebx
c000230f:	5e                   	pop    esi
c0002310:	c3                   	ret    

c0002311 <sync_window>:
c0002311:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002315:	74 58                	je     c000236f <sync_window+0x5e>
c0002317:	56                   	push   esi
c0002318:	53                   	push   ebx
c0002319:	89 c3                	mov    ebx,eax
c000231b:	51                   	push   ecx
c000231c:	6a 01                	push   0x1
c000231e:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002321:	8d 70 34             	lea    esi,[eax+0x34]
c0002324:	56                   	push   esi
c0002325:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002329:	50                   	push   eax
c000232a:	e8 ab fa ff ff       	call   c0001dda <disk_write>
c000232f:	83 c4 10             	add    esp,0x10
c0002332:	ba 01 00 00 00       	mov    edx,0x1
c0002337:	85 c0                	test   eax,eax
c0002339:	75 2e                	jne    c0002369 <sync_window+0x58>
c000233b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000233f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002342:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002345:	89 c1                	mov    ecx,eax
c0002347:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000234a:	39 d1                	cmp    ecx,edx
c000234c:	73 19                	jae    c0002367 <sync_window+0x56>
c000234e:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002352:	75 13                	jne    c0002367 <sync_window+0x56>
c0002354:	6a 01                	push   0x1
c0002356:	01 d0                	add    eax,edx
c0002358:	50                   	push   eax
c0002359:	56                   	push   esi
c000235a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000235e:	50                   	push   eax
c000235f:	e8 76 fa ff ff       	call   c0001dda <disk_write>
c0002364:	83 c4 10             	add    esp,0x10
c0002367:	31 d2                	xor    edx,edx
c0002369:	89 d0                	mov    eax,edx
c000236b:	5a                   	pop    edx
c000236c:	5b                   	pop    ebx
c000236d:	5e                   	pop    esi
c000236e:	c3                   	ret    
c000236f:	31 d2                	xor    edx,edx
c0002371:	89 d0                	mov    eax,edx
c0002373:	c3                   	ret    

c0002374 <move_window>:
c0002374:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002377:	74 3a                	je     c00023b3 <move_window+0x3f>
c0002379:	56                   	push   esi
c000237a:	89 d6                	mov    esi,edx
c000237c:	53                   	push   ebx
c000237d:	89 c3                	mov    ebx,eax
c000237f:	51                   	push   ecx
c0002380:	e8 8c ff ff ff       	call   c0002311 <sync_window>
c0002385:	85 c0                	test   eax,eax
c0002387:	75 2d                	jne    c00023b6 <move_window+0x42>
c0002389:	6a 01                	push   0x1
c000238b:	56                   	push   esi
c000238c:	8d 43 34             	lea    eax,[ebx+0x34]
c000238f:	50                   	push   eax
c0002390:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 2a fa ff ff       	call   c0001dc4 <disk_read>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	89 c2                	mov    edx,eax
c000239f:	31 c0                	xor    eax,eax
c00023a1:	85 d2                	test   edx,edx
c00023a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00023a8:	0f 45 f2             	cmovne esi,edx
c00023ab:	0f 95 c0             	setne  al
c00023ae:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00023b1:	eb 03                	jmp    c00023b6 <move_window+0x42>
c00023b3:	31 c0                	xor    eax,eax
c00023b5:	c3                   	ret    
c00023b6:	5a                   	pop    edx
c00023b7:	5b                   	pop    ebx
c00023b8:	5e                   	pop    esi
c00023b9:	c3                   	ret    

c00023ba <check_fs>:
c00023ba:	53                   	push   ebx
c00023bb:	89 c3                	mov    ebx,eax
c00023bd:	83 ec 08             	sub    esp,0x8
c00023c0:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023c4:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00023cb:	e8 a4 ff ff ff       	call   c0002374 <move_window>
c00023d0:	ba 04 00 00 00       	mov    edx,0x4
c00023d5:	85 c0                	test   eax,eax
c00023d7:	75 68                	jne    c0002441 <check_fs+0x87>
c00023d9:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023df:	e8 2b fa ff ff       	call   c0001e0f <ld_word>
c00023e4:	ba 03 00 00 00       	mov    edx,0x3
c00023e9:	66 3d 55 aa          	cmp    ax,0xaa55
c00023ed:	75 52                	jne    c0002441 <check_fs+0x87>
c00023ef:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023f2:	8d 50 18             	lea    edx,[eax+0x18]
c00023f5:	80 fa 01             	cmp    dl,0x1
c00023f8:	76 09                	jbe    c0002403 <check_fs+0x49>
c00023fa:	3c eb                	cmp    al,0xeb
c00023fc:	ba 02 00 00 00       	mov    edx,0x2
c0002401:	75 3e                	jne    c0002441 <check_fs+0x87>
c0002403:	ba c0 1f 02 c0       	mov    edx,0xc0021fc0
c0002408:	b9 03 00 00 00       	mov    ecx,0x3
c000240d:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002410:	e8 45 fa ff ff       	call   c0001e5a <mem_cmp>
c0002415:	31 d2                	xor    edx,edx
c0002417:	85 c0                	test   eax,eax
c0002419:	74 26                	je     c0002441 <check_fs+0x87>
c000241b:	ba 1c f9 01 c0       	mov    edx,0xc001f91c
c0002420:	b9 05 00 00 00       	mov    ecx,0x5
c0002425:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000242b:	e8 2a fa ff ff       	call   c0001e5a <mem_cmp>
c0002430:	31 d2                	xor    edx,edx
c0002432:	85 c0                	test   eax,eax
c0002434:	74 0b                	je     c0002441 <check_fs+0x87>
c0002436:	31 d2                	xor    edx,edx
c0002438:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000243c:	0f 95 c2             	setne  dl
c000243f:	01 d2                	add    edx,edx
c0002441:	83 c4 08             	add    esp,0x8
c0002444:	89 d0                	mov    eax,edx
c0002446:	5b                   	pop    ebx
c0002447:	c3                   	ret    

c0002448 <find_volume>:
c0002448:	55                   	push   ebp
c0002449:	57                   	push   edi
c000244a:	56                   	push   esi
c000244b:	89 c6                	mov    esi,eax
c000244d:	53                   	push   ebx
c000244e:	89 d3                	mov    ebx,edx
c0002450:	83 ec 2c             	sub    esp,0x2c
c0002453:	31 d2                	xor    edx,edx
c0002455:	e8 60 ff ff ff       	call   c00023ba <check_fs>
c000245a:	85 db                	test   ebx,ebx
c000245c:	0f 94 c2             	sete   dl
c000245f:	83 f8 02             	cmp    eax,0x2
c0002462:	74 07                	je     c000246b <find_volume+0x23>
c0002464:	77 63                	ja     c00024c9 <find_volume+0x81>
c0002466:	f6 c2 01             	test   dl,0x1
c0002469:	75 5e                	jne    c00024c9 <find_volume+0x81>
c000246b:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002471:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002475:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000247b:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000247f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002483:	89 f8                	mov    eax,edi
c0002485:	83 c7 10             	add    edi,0x10
c0002488:	e8 8f f9 ff ff       	call   c0001e1c <ld_dword>
c000248d:	83 c5 04             	add    ebp,0x4
c0002490:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002494:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002497:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000249b:	75 e2                	jne    c000247f <find_volume+0x37>
c000249d:	83 fb 01             	cmp    ebx,0x1
c00024a0:	0f b6 fa             	movzx  edi,dl
c00024a3:	83 d3 ff             	adc    ebx,0xffffffff
c00024a6:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c00024aa:	b8 03 00 00 00       	mov    eax,0x3
c00024af:	85 d2                	test   edx,edx
c00024b1:	74 07                	je     c00024ba <find_volume+0x72>
c00024b3:	89 f0                	mov    eax,esi
c00024b5:	e8 00 ff ff ff       	call   c00023ba <check_fs>
c00024ba:	83 f8 01             	cmp    eax,0x1
c00024bd:	76 0a                	jbe    c00024c9 <find_volume+0x81>
c00024bf:	85 ff                	test   edi,edi
c00024c1:	74 06                	je     c00024c9 <find_volume+0x81>
c00024c3:	43                   	inc    ebx
c00024c4:	83 fb 03             	cmp    ebx,0x3
c00024c7:	76 dd                	jbe    c00024a6 <find_volume+0x5e>
c00024c9:	83 c4 2c             	add    esp,0x2c
c00024cc:	5b                   	pop    ebx
c00024cd:	5e                   	pop    esi
c00024ce:	5f                   	pop    edi
c00024cf:	5d                   	pop    ebp
c00024d0:	c3                   	ret    

c00024d1 <mount_volume>:
c00024d1:	55                   	push   ebp
c00024d2:	89 d5                	mov    ebp,edx
c00024d4:	57                   	push   edi
c00024d5:	89 cf                	mov    edi,ecx
c00024d7:	56                   	push   esi
c00024d8:	53                   	push   ebx
c00024d9:	bb 0b 00 00 00       	mov    ebx,0xb
c00024de:	83 ec 2c             	sub    esp,0x2c
c00024e1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024e7:	e8 93 fd ff ff       	call   c000227f <get_ldnumber>
c00024ec:	85 c0                	test   eax,eax
c00024ee:	0f 88 d0 02 00 00    	js     c00027c4 <mount_volume+0x2f3>
c00024f4:	8b 34 85 a0 54 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdab60]
c00024fb:	89 c2                	mov    edx,eax
c00024fd:	bb 0c 00 00 00       	mov    ebx,0xc
c0002502:	85 f6                	test   esi,esi
c0002504:	0f 84 ba 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000250a:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c000250d:	83 e7 fe             	and    edi,0xfffffffe
c0002510:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002513:	74 3c                	je     c0002551 <mount_volume+0x80>
c0002515:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002519:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	50                   	push   eax
c0002521:	e8 98 f8 ff ff       	call   c0001dbe <disk_status>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000252d:	a8 01                	test   al,0x1
c000252f:	75 20                	jne    c0002551 <mount_volume+0x80>
c0002531:	31 db                	xor    ebx,ebx
c0002533:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002539:	0f 84 85 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000253f:	a8 04                	test   al,0x4
c0002541:	0f 84 7d 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002547:	bb 0a 00 00 00       	mov    ebx,0xa
c000254c:	e9 73 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c0002551:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002554:	83 ec 0c             	sub    esp,0xc
c0002557:	0f b6 c2             	movzx  eax,dl
c000255a:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000255d:	bb 03 00 00 00       	mov    ebx,0x3
c0002562:	50                   	push   eax
c0002563:	e8 59 f8 ff ff       	call   c0001dc1 <disk_initialize>
c0002568:	83 c4 10             	add    esp,0x10
c000256b:	a8 01                	test   al,0x1
c000256d:	0f 85 51 02 00 00    	jne    c00027c4 <mount_volume+0x2f3>
c0002573:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002579:	74 04                	je     c000257f <mount_volume+0xae>
c000257b:	a8 04                	test   al,0x4
c000257d:	75 c8                	jne    c0002547 <mount_volume+0x76>
c000257f:	31 d2                	xor    edx,edx
c0002581:	89 f0                	mov    eax,esi
c0002583:	e8 c0 fe ff ff       	call   c0002448 <find_volume>
c0002588:	bb 01 00 00 00       	mov    ebx,0x1
c000258d:	83 f8 04             	cmp    eax,0x4
c0002590:	0f 84 2e 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002596:	83 f8 01             	cmp    eax,0x1
c0002599:	76 0a                	jbe    c00025a5 <mount_volume+0xd4>
c000259b:	bb 0d 00 00 00       	mov    ebx,0xd
c00025a0:	e9 1f 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c00025a5:	8d 46 3f             	lea    eax,[esi+0x3f]
c00025a8:	e8 62 f8 ff ff       	call   c0001e0f <ld_word>
c00025ad:	66 3d 00 02          	cmp    ax,0x200
c00025b1:	75 e8                	jne    c000259b <mount_volume+0xca>
c00025b3:	8d 46 4a             	lea    eax,[esi+0x4a]
c00025b6:	e8 54 f8 ff ff       	call   c0001e0f <ld_word>
c00025bb:	0f b7 c0             	movzx  eax,ax
c00025be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025c2:	85 c0                	test   eax,eax
c00025c4:	75 0c                	jne    c00025d2 <mount_volume+0x101>
c00025c6:	8d 46 58             	lea    eax,[esi+0x58]
c00025c9:	e8 4e f8 ff ff       	call   c0001e1c <ld_dword>
c00025ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025d2:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00025d5:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00025d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00025e0:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00025e3:	89 e8                	mov    eax,ebp
c00025e5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025e8:	8d 45 ff             	lea    eax,[ebp-0x1]
c00025eb:	3c 01                	cmp    al,0x1
c00025ed:	77 ac                	ja     c000259b <mount_volume+0xca>
c00025ef:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025f3:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025f7:	66 85 c0             	test   ax,ax
c00025fa:	89 c3                	mov    ebx,eax
c00025fc:	74 9d                	je     c000259b <mount_volume+0xca>
c00025fe:	8d 40 ff             	lea    eax,[eax-0x1]
c0002601:	85 d8                	test   eax,ebx
c0002603:	75 96                	jne    c000259b <mount_volume+0xca>
c0002605:	8d 46 45             	lea    eax,[esi+0x45]
c0002608:	e8 02 f8 ff ff       	call   c0001e0f <ld_word>
c000260d:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002611:	a8 0f                	test   al,0xf
c0002613:	89 c7                	mov    edi,eax
c0002615:	75 84                	jne    c000259b <mount_volume+0xca>
c0002617:	8d 46 47             	lea    eax,[esi+0x47]
c000261a:	e8 f0 f7 ff ff       	call   c0001e0f <ld_word>
c000261f:	0f b7 d0             	movzx  edx,ax
c0002622:	85 d2                	test   edx,edx
c0002624:	75 0a                	jne    c0002630 <mount_volume+0x15f>
c0002626:	8d 46 54             	lea    eax,[esi+0x54]
c0002629:	e8 ee f7 ff ff       	call   c0001e1c <ld_dword>
c000262e:	89 c2                	mov    edx,eax
c0002630:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002634:	8d 46 42             	lea    eax,[esi+0x42]
c0002637:	e8 d3 f7 ff ff       	call   c0001e0f <ld_word>
c000263c:	0f b7 c8             	movzx  ecx,ax
c000263f:	85 c9                	test   ecx,ecx
c0002641:	0f 84 54 ff ff ff    	je     c000259b <mount_volume+0xca>
c0002647:	89 e8                	mov    eax,ebp
c0002649:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000264d:	0f b6 e8             	movzx  ebp,al
c0002650:	0f b7 c7             	movzx  eax,di
c0002653:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002658:	c1 e8 04             	shr    eax,0x4
c000265b:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000265f:	01 e8                	add    eax,ebp
c0002661:	01 c8                	add    eax,ecx
c0002663:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002667:	39 c2                	cmp    edx,eax
c0002669:	0f 82 2c ff ff ff    	jb     c000259b <mount_volume+0xca>
c000266f:	29 c2                	sub    edx,eax
c0002671:	89 d5                	mov    ebp,edx
c0002673:	89 d0                	mov    eax,edx
c0002675:	31 d2                	xor    edx,edx
c0002677:	f7 f3                	div    ebx
c0002679:	39 dd                	cmp    ebp,ebx
c000267b:	0f 82 1a ff ff ff    	jb     c000259b <mount_volume+0xca>
c0002681:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002686:	0f 87 0f ff ff ff    	ja     c000259b <mount_volume+0xca>
c000268c:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002691:	0f 86 1e 01 00 00    	jbe    c00027b5 <mount_volume+0x2e4>
c0002697:	bb 03 00 00 00       	mov    ebx,0x3
c000269c:	8d 68 02             	lea    ebp,[eax+0x2]
c000269f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00026a3:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00026a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00026aa:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00026ae:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00026b1:	01 c8                	add    eax,ecx
c00026b3:	83 fb 03             	cmp    ebx,0x3
c00026b6:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00026b9:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00026bc:	75 23                	jne    c00026e1 <mount_volume+0x210>
c00026be:	8d 46 5e             	lea    eax,[esi+0x5e]
c00026c1:	e8 49 f7 ff ff       	call   c0001e0f <ld_word>
c00026c6:	09 c7                	or     edi,eax
c00026c8:	66 85 ff             	test   di,di
c00026cb:	0f 85 ca fe ff ff    	jne    c000259b <mount_volume+0xca>
c00026d1:	8d 46 60             	lea    eax,[esi+0x60]
c00026d4:	e8 43 f7 ff ff       	call   c0001e1c <ld_dword>
c00026d9:	c1 e5 02             	shl    ebp,0x2
c00026dc:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026df:	eb 25                	jmp    c0002706 <mount_volume+0x235>
c00026e1:	66 85 ff             	test   di,di
c00026e4:	0f 84 b1 fe ff ff    	je     c000259b <mount_volume+0xca>
c00026ea:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00026ee:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00026f2:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00026f6:	83 e5 01             	and    ebp,0x1
c00026f9:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026fc:	d1 ea                	shr    edx,1
c00026fe:	01 d5                	add    ebp,edx
c0002700:	83 fb 02             	cmp    ebx,0x2
c0002703:	0f 44 ef             	cmove  ebp,edi
c0002706:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c000270c:	c1 ed 09             	shr    ebp,0x9
c000270f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002713:	0f 87 82 fe ff ff    	ja     c000259b <mount_volume+0xca>
c0002719:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002720:	83 fb 03             	cmp    ebx,0x3
c0002723:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000272a:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000272e:	75 6e                	jne    c000279e <mount_volume+0x2cd>
c0002730:	8d 46 64             	lea    eax,[esi+0x64]
c0002733:	e8 d7 f6 ff ff       	call   c0001e0f <ld_word>
c0002738:	66 48                	dec    ax
c000273a:	75 62                	jne    c000279e <mount_volume+0x2cd>
c000273c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002740:	89 f0                	mov    eax,esi
c0002742:	42                   	inc    edx
c0002743:	e8 2c fc ff ff       	call   c0002374 <move_window>
c0002748:	85 c0                	test   eax,eax
c000274a:	75 52                	jne    c000279e <mount_volume+0x2cd>
c000274c:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002750:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002756:	e8 b4 f6 ff ff       	call   c0001e0f <ld_word>
c000275b:	66 3d 55 aa          	cmp    ax,0xaa55
c000275f:	75 3d                	jne    c000279e <mount_volume+0x2cd>
c0002761:	8d 46 34             	lea    eax,[esi+0x34]
c0002764:	e8 b3 f6 ff ff       	call   c0001e1c <ld_dword>
c0002769:	3d 52 52 61 41       	cmp    eax,0x41615252
c000276e:	75 2e                	jne    c000279e <mount_volume+0x2cd>
c0002770:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002776:	e8 a1 f6 ff ff       	call   c0001e1c <ld_dword>
c000277b:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002780:	75 1c                	jne    c000279e <mount_volume+0x2cd>
c0002782:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002788:	e8 8f f6 ff ff       	call   c0001e1c <ld_dword>
c000278d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002790:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002796:	e8 81 f6 ff ff       	call   c0001e1c <ld_dword>
c000279b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000279e:	88 1e                	mov    BYTE PTR [esi],bl
c00027a0:	66 a1 80 54 02 c0    	mov    ax,ds:0xc0025480
c00027a6:	31 db                	xor    ebx,ebx
c00027a8:	40                   	inc    eax
c00027a9:	66 a3 80 54 02 c0    	mov    ds:0xc0025480,ax
c00027af:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c00027b3:	eb 0f                	jmp    c00027c4 <mount_volume+0x2f3>
c00027b5:	3d f6 0f 00 00       	cmp    eax,0xff6
c00027ba:	19 db                	sbb    ebx,ebx
c00027bc:	83 c3 02             	add    ebx,0x2
c00027bf:	e9 d8 fe ff ff       	jmp    c000269c <mount_volume+0x1cb>
c00027c4:	83 c4 2c             	add    esp,0x2c
c00027c7:	89 d8                	mov    eax,ebx
c00027c9:	5b                   	pop    ebx
c00027ca:	5e                   	pop    esi
c00027cb:	5f                   	pop    edi
c00027cc:	5d                   	pop    ebp
c00027cd:	c3                   	ret    

c00027ce <put_fat>:
c00027ce:	55                   	push   ebp
c00027cf:	bd 02 00 00 00       	mov    ebp,0x2
c00027d4:	57                   	push   edi
c00027d5:	56                   	push   esi
c00027d6:	53                   	push   ebx
c00027d7:	83 ec 1c             	sub    esp,0x1c
c00027da:	83 fa 01             	cmp    edx,0x1
c00027dd:	0f 86 38 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027e3:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00027e6:	0f 86 2f 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027ec:	89 c6                	mov    esi,eax
c00027ee:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027f1:	89 cf                	mov    edi,ecx
c00027f3:	89 d3                	mov    ebx,edx
c00027f5:	83 f8 02             	cmp    eax,0x2
c00027f8:	0f 84 b1 00 00 00    	je     c00028af <put_fat+0xe1>
c00027fe:	83 f8 03             	cmp    eax,0x3
c0002801:	0f 84 d5 00 00 00    	je     c00028dc <put_fat+0x10e>
c0002807:	48                   	dec    eax
c0002808:	0f 85 0d 01 00 00    	jne    c000291b <put_fat+0x14d>
c000280e:	89 d1                	mov    ecx,edx
c0002810:	89 f0                	mov    eax,esi
c0002812:	d1 e9                	shr    ecx,1
c0002814:	01 d1                	add    ecx,edx
c0002816:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000281a:	89 ca                	mov    edx,ecx
c000281c:	c1 ea 09             	shr    edx,0x9
c000281f:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002822:	e8 4d fb ff ff       	call   c0002374 <move_window>
c0002827:	85 c0                	test   eax,eax
c0002829:	89 c5                	mov    ebp,eax
c000282b:	0f 85 ea 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002831:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002835:	8d 46 34             	lea    eax,[esi+0x34]
c0002838:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000283c:	8d 41 01             	lea    eax,[ecx+0x1]
c000283f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002845:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002849:	83 e3 01             	and    ebx,0x1
c000284c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002850:	89 f8                	mov    eax,edi
c0002852:	74 11                	je     c0002865 <put_fat+0x97>
c0002854:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002856:	89 f8                	mov    eax,edi
c0002858:	c1 e0 04             	shl    eax,0x4
c000285b:	25 f0 0f 00 00       	and    eax,0xff0
c0002860:	83 e2 0f             	and    edx,0xf
c0002863:	09 d0                	or     eax,edx
c0002865:	88 01                	mov    BYTE PTR [ecx],al
c0002867:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000286b:	89 f0                	mov    eax,esi
c000286d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002871:	c1 ea 09             	shr    edx,0x9
c0002874:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002877:	e8 f8 fa ff ff       	call   c0002374 <move_window>
c000287c:	85 c0                	test   eax,eax
c000287e:	89 c5                	mov    ebp,eax
c0002880:	0f 85 95 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000288a:	25 ff 01 00 00       	and    eax,0x1ff
c000288f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002893:	85 db                	test   ebx,ebx
c0002895:	74 07                	je     c000289e <put_fat+0xd0>
c0002897:	c1 ef 04             	shr    edi,0x4
c000289a:	89 f9                	mov    ecx,edi
c000289c:	eb 0d                	jmp    c00028ab <put_fat+0xdd>
c000289e:	8a 08                	mov    cl,BYTE PTR [eax]
c00028a0:	c1 ef 08             	shr    edi,0x8
c00028a3:	83 e7 0f             	and    edi,0xf
c00028a6:	83 e1 f0             	and    ecx,0xfffffff0
c00028a9:	09 f9                	or     ecx,edi
c00028ab:	88 08                	mov    BYTE PTR [eax],cl
c00028ad:	eb 27                	jmp    c00028d6 <put_fat+0x108>
c00028af:	c1 ea 08             	shr    edx,0x8
c00028b2:	89 f0                	mov    eax,esi
c00028b4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028b7:	e8 b8 fa ff ff       	call   c0002374 <move_window>
c00028bc:	85 c0                	test   eax,eax
c00028be:	89 c5                	mov    ebp,eax
c00028c0:	75 59                	jne    c000291b <put_fat+0x14d>
c00028c2:	01 db                	add    ebx,ebx
c00028c4:	0f b7 d7             	movzx  edx,di
c00028c7:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00028cd:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00028d1:	e8 5e f5 ff ff       	call   c0001e34 <st_word>
c00028d6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00028da:	eb 3f                	jmp    c000291b <put_fat+0x14d>
c00028dc:	c1 ea 07             	shr    edx,0x7
c00028df:	89 f0                	mov    eax,esi
c00028e1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028e4:	e8 8b fa ff ff       	call   c0002374 <move_window>
c00028e9:	85 c0                	test   eax,eax
c00028eb:	89 c5                	mov    ebp,eax
c00028ed:	75 2c                	jne    c000291b <put_fat+0x14d>
c00028ef:	c1 e3 02             	shl    ebx,0x2
c00028f2:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028f8:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028fe:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002902:	89 d8                	mov    eax,ebx
c0002904:	e8 13 f5 ff ff       	call   c0001e1c <ld_dword>
c0002909:	25 00 00 00 f0       	and    eax,0xf0000000
c000290e:	09 f8                	or     eax,edi
c0002910:	89 c2                	mov    edx,eax
c0002912:	89 d8                	mov    eax,ebx
c0002914:	e8 1f f5 ff ff       	call   c0001e38 <st_dword>
c0002919:	eb bb                	jmp    c00028d6 <put_fat+0x108>
c000291b:	83 c4 1c             	add    esp,0x1c
c000291e:	89 e8                	mov    eax,ebp
c0002920:	5b                   	pop    ebx
c0002921:	5e                   	pop    esi
c0002922:	5f                   	pop    edi
c0002923:	5d                   	pop    ebp
c0002924:	c3                   	ret    

c0002925 <dir_clear>:
c0002925:	55                   	push   ebp
c0002926:	57                   	push   edi
c0002927:	56                   	push   esi
c0002928:	89 c6                	mov    esi,eax
c000292a:	53                   	push   ebx
c000292b:	83 ec 1c             	sub    esp,0x1c
c000292e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002932:	e8 da f9 ff ff       	call   c0002311 <sync_window>
c0002937:	85 c0                	test   eax,eax
c0002939:	0f 85 c1 00 00 00    	jne    c0002a00 <dir_clear+0xdb>
c000293f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002943:	89 f0                	mov    eax,esi
c0002945:	e8 1b f7 ff ff       	call   c0002065 <clst2sect>
c000294a:	31 d2                	xor    edx,edx
c000294c:	b9 00 02 00 00       	mov    ecx,0x200
c0002951:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002954:	89 c5                	mov    ebp,eax
c0002956:	8d 46 34             	lea    eax,[esi+0x34]
c0002959:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000295d:	e8 ee f4 ff ff       	call   c0001e50 <mem_set>
c0002962:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002966:	b8 00 80 00 00       	mov    eax,0x8000
c000296b:	c1 e3 09             	shl    ebx,0x9
c000296e:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002974:	0f 47 d8             	cmova  ebx,eax
c0002977:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000297d:	76 16                	jbe    c0002995 <dir_clear+0x70>
c000297f:	83 ec 0c             	sub    esp,0xc
c0002982:	53                   	push   ebx
c0002983:	e8 cc 32 00 00       	call   c0005c54 <ff_memalloc>
c0002988:	83 c4 10             	add    esp,0x10
c000298b:	85 c0                	test   eax,eax
c000298d:	89 c7                	mov    edi,eax
c000298f:	75 76                	jne    c0002a07 <dir_clear+0xe2>
c0002991:	d1 eb                	shr    ebx,1
c0002993:	eb e2                	jmp    c0002977 <dir_clear+0x52>
c0002995:	31 db                	xor    ebx,ebx
c0002997:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000299b:	39 d8                	cmp    eax,ebx
c000299d:	76 53                	jbe    c00029f2 <dir_clear+0xcd>
c000299f:	6a 01                	push   0x1
c00029a1:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029a4:	50                   	push   eax
c00029a5:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00029ad:	50                   	push   eax
c00029ae:	e8 27 f4 ff ff       	call   c0001dda <disk_write>
c00029b3:	83 c4 10             	add    esp,0x10
c00029b6:	85 c0                	test   eax,eax
c00029b8:	75 38                	jne    c00029f2 <dir_clear+0xcd>
c00029ba:	43                   	inc    ebx
c00029bb:	eb da                	jmp    c0002997 <dir_clear+0x72>
c00029bd:	52                   	push   edx
c00029be:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029c1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00029c5:	50                   	push   eax
c00029c6:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029ca:	57                   	push   edi
c00029cb:	50                   	push   eax
c00029cc:	e8 09 f4 ff ff       	call   c0001dda <disk_write>
c00029d1:	83 c4 10             	add    esp,0x10
c00029d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029d8:	85 c0                	test   eax,eax
c00029da:	75 0a                	jne    c00029e6 <dir_clear+0xc1>
c00029dc:	01 d3                	add    ebx,edx
c00029de:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029e2:	39 d8                	cmp    eax,ebx
c00029e4:	77 d7                	ja     c00029bd <dir_clear+0x98>
c00029e6:	83 ec 0c             	sub    esp,0xc
c00029e9:	57                   	push   edi
c00029ea:	e8 7d 32 00 00       	call   c0005c6c <ff_memfree>
c00029ef:	83 c4 10             	add    esp,0x10
c00029f2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029f6:	39 d8                	cmp    eax,ebx
c00029f8:	0f 95 c0             	setne  al
c00029fb:	0f b6 c0             	movzx  eax,al
c00029fe:	eb 19                	jmp    c0002a19 <dir_clear+0xf4>
c0002a00:	b8 01 00 00 00       	mov    eax,0x1
c0002a05:	eb 12                	jmp    c0002a19 <dir_clear+0xf4>
c0002a07:	89 d9                	mov    ecx,ebx
c0002a09:	31 d2                	xor    edx,edx
c0002a0b:	e8 40 f4 ff ff       	call   c0001e50 <mem_set>
c0002a10:	89 da                	mov    edx,ebx
c0002a12:	31 db                	xor    ebx,ebx
c0002a14:	c1 ea 09             	shr    edx,0x9
c0002a17:	eb c5                	jmp    c00029de <dir_clear+0xb9>
c0002a19:	83 c4 1c             	add    esp,0x1c
c0002a1c:	5b                   	pop    ebx
c0002a1d:	5e                   	pop    esi
c0002a1e:	5f                   	pop    edi
c0002a1f:	5d                   	pop    ebp
c0002a20:	c3                   	ret    

c0002a21 <create_name>:
c0002a21:	55                   	push   ebp
c0002a22:	89 c5                	mov    ebp,eax
c0002a24:	57                   	push   edi
c0002a25:	89 d7                	mov    edi,edx
c0002a27:	56                   	push   esi
c0002a28:	31 f6                	xor    esi,esi
c0002a2a:	53                   	push   ebx
c0002a2b:	83 ec 3c             	sub    esp,0x3c
c0002a2e:	8b 02                	mov    eax,DWORD PTR [edx]
c0002a30:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a34:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002a37:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002a3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a3e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002a42:	e8 4d f4 ff ff       	call   c0001e94 <tchar2uni>
c0002a47:	83 f8 ff             	cmp    eax,0xffffffff
c0002a4a:	89 c3                	mov    ebx,eax
c0002a4c:	75 0a                	jne    c0002a58 <create_name+0x37>
c0002a4e:	b8 06 00 00 00       	mov    eax,0x6
c0002a53:	e9 7c 02 00 00       	jmp    c0002cd4 <create_name+0x2b3>
c0002a58:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a5d:	76 0c                	jbe    c0002a6b <create_name+0x4a>
c0002a5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a63:	c1 e8 10             	shr    eax,0x10
c0002a66:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002a6a:	46                   	inc    esi
c0002a6b:	0f b7 d3             	movzx  edx,bx
c0002a6e:	89 d8                	mov    eax,ebx
c0002a70:	83 fa 1f             	cmp    edx,0x1f
c0002a73:	76 30                	jbe    c0002aa5 <create_name+0x84>
c0002a75:	83 fa 2f             	cmp    edx,0x2f
c0002a78:	74 2b                	je     c0002aa5 <create_name+0x84>
c0002a7a:	83 fa 5c             	cmp    edx,0x5c
c0002a7d:	74 35                	je     c0002ab4 <create_name+0x93>
c0002a7f:	83 fa 7f             	cmp    edx,0x7f
c0002a82:	77 0e                	ja     c0002a92 <create_name+0x71>
c0002a84:	b8 22 f9 01 c0       	mov    eax,0xc001f922
c0002a89:	e8 ef f3 ff ff       	call   c0001e7d <chk_chr>
c0002a8e:	85 c0                	test   eax,eax
c0002a90:	75 bc                	jne    c0002a4e <create_name+0x2d>
c0002a92:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a98:	77 b4                	ja     c0002a4e <create_name+0x2d>
c0002a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9e:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002aa2:	46                   	inc    esi
c0002aa3:	eb 99                	jmp    c0002a3e <create_name+0x1d>
c0002aa5:	66 83 f8 1f          	cmp    ax,0x1f
c0002aa9:	b3 04                	mov    bl,0x4
c0002aab:	76 1a                	jbe    c0002ac7 <create_name+0xa6>
c0002aad:	eb 05                	jmp    c0002ab4 <create_name+0x93>
c0002aaf:	40                   	inc    eax
c0002ab0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002ab4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002ab8:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002abb:	83 fa 2f             	cmp    edx,0x2f
c0002abe:	74 ef                	je     c0002aaf <create_name+0x8e>
c0002ac0:	83 fa 5c             	cmp    edx,0x5c
c0002ac3:	74 ea                	je     c0002aaf <create_name+0x8e>
c0002ac5:	31 db                	xor    ebx,ebx
c0002ac7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002acb:	89 07                	mov    DWORD PTR [edi],eax
c0002acd:	85 f6                	test   esi,esi
c0002acf:	74 16                	je     c0002ae7 <create_name+0xc6>
c0002ad1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad5:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002ada:	83 f8 20             	cmp    eax,0x20
c0002add:	74 05                	je     c0002ae4 <create_name+0xc3>
c0002adf:	83 f8 2e             	cmp    eax,0x2e
c0002ae2:	75 03                	jne    c0002ae7 <create_name+0xc6>
c0002ae4:	4e                   	dec    esi
c0002ae5:	eb e6                	jmp    c0002acd <create_name+0xac>
c0002ae7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aeb:	31 ff                	xor    edi,edi
c0002aed:	85 f6                	test   esi,esi
c0002aef:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002af5:	0f 84 53 ff ff ff    	je     c0002a4e <create_name+0x2d>
c0002afb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aff:	8d 57 01             	lea    edx,[edi+0x1]
c0002b02:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b06:	83 f8 20             	cmp    eax,0x20
c0002b09:	75 04                	jne    c0002b0f <create_name+0xee>
c0002b0b:	89 d7                	mov    edi,edx
c0002b0d:	eb ec                	jmp    c0002afb <create_name+0xda>
c0002b0f:	85 ff                	test   edi,edi
c0002b11:	75 05                	jne    c0002b18 <create_name+0xf7>
c0002b13:	83 f8 2e             	cmp    eax,0x2e
c0002b16:	75 08                	jne    c0002b20 <create_name+0xff>
c0002b18:	83 cb 03             	or     ebx,0x3
c0002b1b:	eb 03                	jmp    c0002b20 <create_name+0xff>
c0002b1d:	4e                   	dec    esi
c0002b1e:	74 0c                	je     c0002b2c <create_name+0x10b>
c0002b20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b24:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002b2a:	75 f1                	jne    c0002b1d <create_name+0xfc>
c0002b2c:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b31:	ba 20 00 00 00       	mov    edx,0x20
c0002b36:	8d 45 20             	lea    eax,[ebp+0x20]
c0002b39:	e8 12 f3 ff ff       	call   c0001e50 <mem_set>
c0002b3e:	31 c9                	xor    ecx,ecx
c0002b40:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002b48:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002b4d:	8d 47 01             	lea    eax,[edi+0x1]
c0002b50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b58:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b5c:	85 c0                	test   eax,eax
c0002b5e:	89 c7                	mov    edi,eax
c0002b60:	0f 84 1d 01 00 00    	je     c0002c83 <create_name+0x262>
c0002b66:	83 f8 20             	cmp    eax,0x20
c0002b69:	74 0b                	je     c0002b76 <create_name+0x155>
c0002b6b:	83 f8 2e             	cmp    eax,0x2e
c0002b6e:	75 0f                	jne    c0002b7f <create_name+0x15e>
c0002b70:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b74:	74 09                	je     c0002b7f <create_name+0x15e>
c0002b76:	83 cb 03             	or     ebx,0x3
c0002b79:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002b7d:	eb ce                	jmp    c0002b4d <create_name+0x12c>
c0002b7f:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002b83:	73 06                	jae    c0002b8b <create_name+0x16a>
c0002b85:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b89:	75 3a                	jne    c0002bc5 <create_name+0x1a4>
c0002b8b:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002b90:	75 08                	jne    c0002b9a <create_name+0x179>
c0002b92:	83 cb 03             	or     ebx,0x3
c0002b95:	e9 e9 00 00 00       	jmp    c0002c83 <create_name+0x262>
c0002b9a:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b9e:	74 0d                	je     c0002bad <create_name+0x18c>
c0002ba0:	83 cb 03             	or     ebx,0x3
c0002ba3:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002ba7:	0f 87 d6 00 00 00    	ja     c0002c83 <create_name+0x262>
c0002bad:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002bb2:	b9 08 00 00 00       	mov    ecx,0x8
c0002bb7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002bbb:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002bc3:	eb b4                	jmp    c0002b79 <create_name+0x158>
c0002bc5:	0f b7 c7             	movzx  eax,di
c0002bc8:	83 f8 7f             	cmp    eax,0x7f
c0002bcb:	76 66                	jbe    c0002c33 <create_name+0x212>
c0002bcd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002bd1:	89 d9                	mov    ecx,ebx
c0002bd3:	83 c9 02             	or     ecx,0x2
c0002bd6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bda:	52                   	push   edx
c0002bdb:	52                   	push   edx
c0002bdc:	68 b5 01 00 00       	push   0x1b5
c0002be1:	50                   	push   eax
c0002be2:	e8 9d 30 00 00       	call   c0005c84 <ff_uni2oem>
c0002be7:	83 c4 10             	add    esp,0x10
c0002bea:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002bee:	a8 80                	test   al,0x80
c0002bf0:	89 c7                	mov    edi,eax
c0002bf2:	74 0c                	je     c0002c00 <create_name+0x1df>
c0002bf4:	83 e7 7f             	and    edi,0x7f
c0002bf7:	0f b6 bf e0 f9 01 c0 	movzx  edi,BYTE PTR [edi-0x3ffe0620]
c0002bfe:	eb 2a                	jmp    c0002c2a <create_name+0x209>
c0002c00:	0f b7 c0             	movzx  eax,ax
c0002c03:	3d ff 00 00 00       	cmp    eax,0xff
c0002c08:	76 20                	jbe    c0002c2a <create_name+0x209>
c0002c0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002c0e:	4a                   	dec    edx
c0002c0f:	39 ca                	cmp    edx,ecx
c0002c11:	77 0c                	ja     c0002c1f <create_name+0x1fe>
c0002c13:	83 cb 03             	or     ebx,0x3
c0002c16:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002c1a:	e9 5a ff ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c1f:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002c23:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c27:	41                   	inc    ecx
c0002c28:	eb 4d                	jmp    c0002c77 <create_name+0x256>
c0002c2a:	66 85 ff             	test   di,di
c0002c2d:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c31:	74 19                	je     c0002c4c <create_name+0x22b>
c0002c33:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002c37:	0f b7 d7             	movzx  edx,di
c0002c3a:	b8 2b f9 01 c0       	mov    eax,0xc001f92b
c0002c3f:	e8 39 f2 ff ff       	call   c0001e7d <chk_chr>
c0002c44:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002c48:	85 c0                	test   eax,eax
c0002c4a:	74 0a                	je     c0002c56 <create_name+0x235>
c0002c4c:	83 cb 03             	or     ebx,0x3
c0002c4f:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c54:	eb 21                	jmp    c0002c77 <create_name+0x256>
c0002c56:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c59:	66 83 f8 19          	cmp    ax,0x19
c0002c5d:	77 07                	ja     c0002c66 <create_name+0x245>
c0002c5f:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c64:	eb 11                	jmp    c0002c77 <create_name+0x256>
c0002c66:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c69:	66 83 f8 19          	cmp    ax,0x19
c0002c6d:	77 08                	ja     c0002c77 <create_name+0x256>
c0002c6f:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c74:	83 ef 20             	sub    edi,0x20
c0002c77:	89 f8                	mov    eax,edi
c0002c79:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002c7d:	41                   	inc    ecx
c0002c7e:	e9 f6 fe ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c83:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002c87:	75 04                	jne    c0002c8d <create_name+0x26c>
c0002c89:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002c8d:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002c92:	75 05                	jne    c0002c99 <create_name+0x278>
c0002c94:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c9d:	83 e0 0c             	and    eax,0xc
c0002ca0:	83 f8 0c             	cmp    eax,0xc
c0002ca3:	74 0c                	je     c0002cb1 <create_name+0x290>
c0002ca5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ca9:	83 e0 03             	and    eax,0x3
c0002cac:	83 f8 03             	cmp    eax,0x3
c0002caf:	75 05                	jne    c0002cb6 <create_name+0x295>
c0002cb1:	83 cb 02             	or     ebx,0x2
c0002cb4:	eb 19                	jmp    c0002ccf <create_name+0x2ae>
c0002cb6:	f6 c3 02             	test   bl,0x2
c0002cb9:	75 14                	jne    c0002ccf <create_name+0x2ae>
c0002cbb:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002cc0:	74 03                	je     c0002cc5 <create_name+0x2a4>
c0002cc2:	83 cb 10             	or     ebx,0x10
c0002cc5:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002cca:	74 03                	je     c0002ccf <create_name+0x2ae>
c0002ccc:	83 cb 08             	or     ebx,0x8
c0002ccf:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002cd2:	31 c0                	xor    eax,eax
c0002cd4:	83 c4 3c             	add    esp,0x3c
c0002cd7:	5b                   	pop    ebx
c0002cd8:	5e                   	pop    esi
c0002cd9:	5f                   	pop    edi
c0002cda:	5d                   	pop    ebp
c0002cdb:	c3                   	ret    

c0002cdc <cmp_lfn>:
c0002cdc:	55                   	push   ebp
c0002cdd:	57                   	push   edi
c0002cde:	89 d7                	mov    edi,edx
c0002ce0:	56                   	push   esi
c0002ce1:	53                   	push   ebx
c0002ce2:	83 ec 1c             	sub    esp,0x1c
c0002ce5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002ce9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cec:	e8 1e f1 ff ff       	call   c0001e0f <ld_word>
c0002cf1:	66 85 c0             	test   ax,ax
c0002cf4:	74 07                	je     c0002cfd <cmp_lfn+0x21>
c0002cf6:	31 c0                	xor    eax,eax
c0002cf8:	e9 a4 00 00 00       	jmp    c0002da1 <cmp_lfn+0xc5>
c0002cfd:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cff:	bd 01 00 00 00       	mov    ebp,0x1
c0002d04:	31 c9                	xor    ecx,ecx
c0002d06:	83 e3 3f             	and    ebx,0x3f
c0002d09:	4b                   	dec    ebx
c0002d0a:	6b db 0d             	imul   ebx,ebx,0xd
c0002d0d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d11:	0f b6 81 60 fa 01 c0 	movzx  eax,BYTE PTR [ecx-0x3ffe05a0]
c0002d18:	01 f8                	add    eax,edi
c0002d1a:	e8 f0 f0 ff ff       	call   c0001e0f <ld_word>
c0002d1f:	66 85 ed             	test   bp,bp
c0002d22:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d26:	0f b7 f0             	movzx  esi,ax
c0002d29:	74 44                	je     c0002d6f <cmp_lfn+0x93>
c0002d2b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002d2f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d35:	77 bf                	ja     c0002cf6 <cmp_lfn+0x1a>
c0002d37:	83 ec 0c             	sub    esp,0xc
c0002d3a:	0f b7 c6             	movzx  eax,si
c0002d3d:	50                   	push   eax
c0002d3e:	e8 55 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d43:	89 c5                	mov    ebp,eax
c0002d45:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002d4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002d50:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d54:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d57:	e8 3c 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d5c:	83 c4 10             	add    esp,0x10
c0002d5f:	39 c5                	cmp    ebp,eax
c0002d61:	75 93                	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d63:	89 f5                	mov    ebp,esi
c0002d65:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002d69:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002d6d:	eb 0c                	jmp    c0002d7b <cmp_lfn+0x9f>
c0002d6f:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002d75:	0f 85 7b ff ff ff    	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d7b:	41                   	inc    ecx
c0002d7c:	83 f9 0d             	cmp    ecx,0xd
c0002d7f:	75 8c                	jne    c0002d0d <cmp_lfn+0x31>
c0002d81:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d84:	74 16                	je     c0002d9c <cmp_lfn+0xc0>
c0002d86:	66 85 ed             	test   bp,bp
c0002d89:	74 11                	je     c0002d9c <cmp_lfn+0xc0>
c0002d8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d8f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d94:	0f 94 c0             	sete   al
c0002d97:	0f b6 c0             	movzx  eax,al
c0002d9a:	eb 05                	jmp    c0002da1 <cmp_lfn+0xc5>
c0002d9c:	b8 01 00 00 00       	mov    eax,0x1
c0002da1:	83 c4 1c             	add    esp,0x1c
c0002da4:	5b                   	pop    ebx
c0002da5:	5e                   	pop    esi
c0002da6:	5f                   	pop    edi
c0002da7:	5d                   	pop    ebp
c0002da8:	c3                   	ret    

c0002da9 <sync_fs>:
c0002da9:	56                   	push   esi
c0002daa:	53                   	push   ebx
c0002dab:	53                   	push   ebx
c0002dac:	89 c3                	mov    ebx,eax
c0002dae:	e8 5e f5 ff ff       	call   c0002311 <sync_window>
c0002db3:	85 c0                	test   eax,eax
c0002db5:	0f 85 9a 00 00 00    	jne    c0002e55 <sync_fs+0xac>
c0002dbb:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002dbe:	75 7b                	jne    c0002e3b <sync_fs+0x92>
c0002dc0:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002dc4:	75 75                	jne    c0002e3b <sync_fs+0x92>
c0002dc6:	8d 73 34             	lea    esi,[ebx+0x34]
c0002dc9:	b9 00 02 00 00       	mov    ecx,0x200
c0002dce:	31 d2                	xor    edx,edx
c0002dd0:	89 f0                	mov    eax,esi
c0002dd2:	e8 79 f0 ff ff       	call   c0001e50 <mem_set>
c0002dd7:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ddd:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002de2:	e8 4d f0 ff ff       	call   c0001e34 <st_word>
c0002de7:	ba 52 52 61 41       	mov    edx,0x41615252
c0002dec:	89 f0                	mov    eax,esi
c0002dee:	e8 45 f0 ff ff       	call   c0001e38 <st_dword>
c0002df3:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002df9:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dfe:	e8 35 f0 ff ff       	call   c0001e38 <st_dword>
c0002e03:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002e06:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002e0c:	e8 27 f0 ff ff       	call   c0001e38 <st_dword>
c0002e11:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e14:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002e1a:	e8 19 f0 ff ff       	call   c0001e38 <st_dword>
c0002e1f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002e22:	6a 01                	push   0x1
c0002e24:	40                   	inc    eax
c0002e25:	50                   	push   eax
c0002e26:	56                   	push   esi
c0002e27:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002e2a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e2e:	50                   	push   eax
c0002e2f:	e8 a6 ef ff ff       	call   c0001dda <disk_write>
c0002e34:	83 c4 10             	add    esp,0x10
c0002e37:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e3b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e3f:	51                   	push   ecx
c0002e40:	6a 00                	push   0x0
c0002e42:	6a 00                	push   0x0
c0002e44:	50                   	push   eax
c0002e45:	e8 a6 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e4a:	83 c4 10             	add    esp,0x10
c0002e4d:	85 c0                	test   eax,eax
c0002e4f:	0f 95 c0             	setne  al
c0002e52:	0f b6 c0             	movzx  eax,al
c0002e55:	5a                   	pop    edx
c0002e56:	5b                   	pop    ebx
c0002e57:	5e                   	pop    esi
c0002e58:	c3                   	ret    

c0002e59 <create_partition>:
c0002e59:	55                   	push   ebp
c0002e5a:	0f b6 c0             	movzx  eax,al
c0002e5d:	57                   	push   edi
c0002e5e:	56                   	push   esi
c0002e5f:	53                   	push   ebx
c0002e60:	83 ec 40             	sub    esp,0x40
c0002e63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e67:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e6b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e6f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e73:	50                   	push   eax
c0002e74:	6a 01                	push   0x1
c0002e76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e7a:	e8 71 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e7f:	83 c4 10             	add    esp,0x10
c0002e82:	85 c0                	test   eax,eax
c0002e84:	0f 85 68 01 00 00    	jne    c0002ff2 <create_partition+0x199>
c0002e8a:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0002e8e:	b9 05 00 00 00       	mov    ecx,0x5
c0002e93:	be 08 00 00 00       	mov    esi,0x8
c0002e98:	89 f0                	mov    eax,esi
c0002e9a:	31 d2                	xor    edx,edx
c0002e9c:	0f b6 d8             	movzx  ebx,al
c0002e9f:	89 e8                	mov    eax,ebp
c0002ea1:	f7 f3                	div    ebx
c0002ea3:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002ea8:	76 0a                	jbe    c0002eb4 <create_partition+0x5b>
c0002eaa:	d1 e6                	shl    esi,1
c0002eac:	49                   	dec    ecx
c0002ead:	75 e9                	jne    c0002e98 <create_partition+0x3f>
c0002eaf:	be ff ff ff ff       	mov    esi,0xffffffff
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	b9 00 02 00 00       	mov    ecx,0x200
c0002ebd:	31 d2                	xor    edx,edx
c0002ebf:	e8 8c ef ff ff       	call   c0001e50 <mem_set>
c0002ec4:	b9 64 00 00 00       	mov    ecx,0x64
c0002ec9:	89 e8                	mov    eax,ebp
c0002ecb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ed3:	31 d2                	xor    edx,edx
c0002ed5:	f7 f1                	div    ecx
c0002ed7:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002edc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002ee0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ee4:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002eea:	89 f0                	mov    eax,esi
c0002eec:	0f b6 c0             	movzx  eax,al
c0002eef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ef3:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0002ef8:	0f 96 c0             	setbe  al
c0002efb:	31 d2                	xor    edx,edx
c0002efd:	85 c9                	test   ecx,ecx
c0002eff:	0f 95 c2             	setne  dl
c0002f02:	85 c2                	test   edx,eax
c0002f04:	0f 84 b7 00 00 00    	je     c0002fc1 <create_partition+0x168>
c0002f0a:	39 e9                	cmp    ecx,ebp
c0002f0c:	0f 83 af 00 00 00    	jae    c0002fc1 <create_partition+0x168>
c0002f12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f16:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f1a:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f1d:	83 fe 64             	cmp    esi,0x64
c0002f20:	77 0b                	ja     c0002f2d <create_partition+0xd4>
c0002f22:	74 07                	je     c0002f2b <create_partition+0xd2>
c0002f24:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f29:	eb 02                	jmp    c0002f2d <create_partition+0xd4>
c0002f2b:	89 ee                	mov    esi,ebp
c0002f2d:	89 ca                	mov    edx,ecx
c0002f2f:	31 c0                	xor    eax,eax
c0002f31:	01 f2                	add    edx,esi
c0002f33:	0f 92 c0             	setb   al
c0002f36:	39 ea                	cmp    edx,ebp
c0002f38:	77 04                	ja     c0002f3e <create_partition+0xe5>
c0002f3a:	85 c0                	test   eax,eax
c0002f3c:	74 06                	je     c0002f44 <create_partition+0xeb>
c0002f3e:	89 ee                	mov    esi,ebp
c0002f40:	29 ce                	sub    esi,ecx
c0002f42:	eb 04                	jmp    c0002f48 <create_partition+0xef>
c0002f44:	85 f6                	test   esi,esi
c0002f46:	74 79                	je     c0002fc1 <create_partition+0x168>
c0002f48:	89 ca                	mov    edx,ecx
c0002f4a:	89 d8                	mov    eax,ebx
c0002f4c:	e8 e7 ee ff ff       	call   c0001e38 <st_dword>
c0002f51:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f54:	89 f2                	mov    edx,esi
c0002f56:	e8 dd ee ff ff       	call   c0001e38 <st_dword>
c0002f5b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f5f:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f64:	31 d2                	xor    edx,edx
c0002f66:	83 c3 10             	add    ebx,0x10
c0002f69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f6d:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f70:	89 c8                	mov    eax,ecx
c0002f72:	01 f1                	add    ecx,esi
c0002f74:	f7 f7                	div    edi
c0002f76:	89 d7                	mov    edi,edx
c0002f78:	31 d2                	xor    edx,edx
c0002f7a:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f7e:	47                   	inc    edi
c0002f7f:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f82:	89 c2                	mov    edx,eax
c0002f84:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f87:	c1 ea 02             	shr    edx,0x2
c0002f8a:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f8d:	83 e2 c0             	and    edx,0xffffffc0
c0002f90:	09 fa                	or     edx,edi
c0002f92:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f97:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f9a:	31 d2                	xor    edx,edx
c0002f9c:	f7 f7                	div    edi
c0002f9e:	89 d6                	mov    esi,edx
c0002fa0:	31 d2                	xor    edx,edx
c0002fa2:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002fa6:	46                   	inc    esi
c0002fa7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002faa:	89 c7                	mov    edi,eax
c0002fac:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002faf:	c1 ef 02             	shr    edi,0x2
c0002fb2:	83 e7 c0             	and    edi,0xffffffc0
c0002fb5:	09 fe                	or     esi,edi
c0002fb7:	89 f2                	mov    edx,esi
c0002fb9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fbc:	e9 32 ff ff ff       	jmp    c0002ef3 <create_partition+0x9a>
c0002fc1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002fc5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fca:	05 fe 01 00 00       	add    eax,0x1fe
c0002fcf:	e8 60 ee ff ff       	call   c0001e34 <st_word>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	6a 00                	push   0x0
c0002fd8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002fdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002fe0:	e8 f5 ed ff ff       	call   c0001dda <disk_write>
c0002fe5:	83 c4 10             	add    esp,0x10
c0002fe8:	85 c0                	test   eax,eax
c0002fea:	0f 95 c0             	setne  al
c0002fed:	0f b6 c0             	movzx  eax,al
c0002ff0:	eb 05                	jmp    c0002ff7 <create_partition+0x19e>
c0002ff2:	b8 01 00 00 00       	mov    eax,0x1
c0002ff7:	83 c4 3c             	add    esp,0x3c
c0002ffa:	5b                   	pop    ebx
c0002ffb:	5e                   	pop    esi
c0002ffc:	5f                   	pop    edi
c0002ffd:	5d                   	pop    ebp
c0002ffe:	c3                   	ret    

c0002fff <get_fileinfo>:
c0002fff:	55                   	push   ebp
c0003000:	57                   	push   edi
c0003001:	56                   	push   esi
c0003002:	53                   	push   ebx
c0003003:	83 ec 1c             	sub    esp,0x1c
c0003006:	8b 30                	mov    esi,DWORD PTR [eax]
c0003008:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c000300c:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003010:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003014:	0f 84 de 01 00 00    	je     c00031f8 <get_fileinfo+0x1f9>
c000301a:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c000301e:	89 d3                	mov    ebx,edx
c0003020:	89 c6                	mov    esi,eax
c0003022:	74 7d                	je     c00030a1 <get_fileinfo+0xa2>
c0003024:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000302c:	31 ff                	xor    edi,edi
c000302e:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003035:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003039:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000303d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003040:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003044:	85 c0                	test   eax,eax
c0003046:	89 c2                	mov    edx,eax
c0003048:	74 44                	je     c000308e <get_fileinfo+0x8f>
c000304a:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c000304f:	85 ed                	test   ebp,ebp
c0003051:	75 0d                	jne    c0003060 <get_fileinfo+0x61>
c0003053:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003059:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000305e:	76 20                	jbe    c0003080 <get_fileinfo+0x81>
c0003060:	c1 e5 10             	shl    ebp,0x10
c0003063:	b9 ff 00 00 00       	mov    ecx,0xff
c0003068:	29 f9                	sub    ecx,edi
c000306a:	09 e8                	or     eax,ebp
c000306c:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003070:	e8 f7 ee ff ff       	call   c0001f6c <put_utf>
c0003075:	0f b6 c0             	movzx  eax,al
c0003078:	85 c0                	test   eax,eax
c000307a:	74 10                	je     c000308c <get_fileinfo+0x8d>
c000307c:	01 c7                	add    edi,eax
c000307e:	31 d2                	xor    edx,edx
c0003080:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003085:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000308a:	eb a9                	jmp    c0003035 <get_fileinfo+0x36>
c000308c:	31 ff                	xor    edi,edi
c000308e:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003094:	b8 00 00 00 00       	mov    eax,0x0
c0003099:	0f 45 f8             	cmovne edi,eax
c000309c:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c00030a1:	31 ff                	xor    edi,edi
c00030a3:	31 c9                	xor    ecx,ecx
c00030a5:	83 f9 0a             	cmp    ecx,0xa
c00030a8:	0f 87 ac 00 00 00    	ja     c000315a <get_fileinfo+0x15b>
c00030ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b1:	8d 69 01             	lea    ebp,[ecx+0x1]
c00030b4:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00030b8:	83 f8 20             	cmp    eax,0x20
c00030bb:	89 c2                	mov    edx,eax
c00030bd:	0f 84 90 00 00 00    	je     c0003153 <get_fileinfo+0x154>
c00030c3:	83 f8 05             	cmp    eax,0x5
c00030c6:	75 05                	jne    c00030cd <get_fileinfo+0xce>
c00030c8:	ba e5 00 00 00       	mov    edx,0xe5
c00030cd:	83 fd 09             	cmp    ebp,0x9
c00030d0:	75 0b                	jne    c00030dd <get_fileinfo+0xde>
c00030d2:	83 ff 0b             	cmp    edi,0xb
c00030d5:	77 06                	ja     c00030dd <get_fileinfo+0xde>
c00030d7:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00030dc:	47                   	inc    edi
c00030dd:	0f b7 c2             	movzx  eax,dx
c00030e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030e4:	e8 a5 ed ff ff       	call   c0001e8e <dbc_1st>
c00030e9:	85 c0                	test   eax,eax
c00030eb:	74 2f                	je     c000311c <get_fileinfo+0x11d>
c00030ed:	83 fd 08             	cmp    ebp,0x8
c00030f0:	74 2a                	je     c000311c <get_fileinfo+0x11d>
c00030f2:	83 fd 0b             	cmp    ebp,0xb
c00030f5:	74 25                	je     c000311c <get_fileinfo+0x11d>
c00030f7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030fa:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030fe:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c0003102:	e8 8a ed ff ff       	call   c0001e91 <dbc_2nd>
c0003107:	85 c0                	test   eax,eax
c0003109:	74 11                	je     c000311c <get_fileinfo+0x11d>
c000310b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000310f:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003112:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c0003117:	c1 e0 08             	shl    eax,0x8
c000311a:	09 c2                	or     edx,eax
c000311c:	50                   	push   eax
c000311d:	0f b7 d2             	movzx  edx,dx
c0003120:	50                   	push   eax
c0003121:	68 b5 01 00 00       	push   0x1b5
c0003126:	52                   	push   edx
c0003127:	e8 f4 2b 00 00       	call   c0005d20 <ff_oem2uni>
c000312c:	83 c4 10             	add    esp,0x10
c000312f:	0f b7 c0             	movzx  eax,ax
c0003132:	85 c0                	test   eax,eax
c0003134:	75 04                	jne    c000313a <get_fileinfo+0x13b>
c0003136:	31 ff                	xor    edi,edi
c0003138:	eb 20                	jmp    c000315a <get_fileinfo+0x15b>
c000313a:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000313e:	b9 0c 00 00 00       	mov    ecx,0xc
c0003143:	29 f9                	sub    ecx,edi
c0003145:	e8 22 ee ff ff       	call   c0001f6c <put_utf>
c000314a:	0f b6 c0             	movzx  eax,al
c000314d:	85 c0                	test   eax,eax
c000314f:	74 e5                	je     c0003136 <get_fileinfo+0x137>
c0003151:	01 c7                	add    edi,eax
c0003153:	89 e9                	mov    ecx,ebp
c0003155:	e9 4b ff ff ff       	jmp    c00030a5 <get_fileinfo+0xa6>
c000315a:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000315f:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003163:	75 5f                	jne    c00031c4 <get_fileinfo+0x1c5>
c0003165:	85 ff                	test   edi,edi
c0003167:	75 0b                	jne    c0003174 <get_fileinfo+0x175>
c0003169:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000316d:	ba 01 00 00 00       	mov    edx,0x1
c0003172:	eb 3e                	jmp    c00031b2 <get_fileinfo+0x1b3>
c0003174:	bf 08 00 00 00       	mov    edi,0x8
c0003179:	31 d2                	xor    edx,edx
c000317b:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003181:	84 c0                	test   al,al
c0003183:	74 2d                	je     c00031b2 <get_fileinfo+0x1b3>
c0003185:	66 83 f8 2e          	cmp    ax,0x2e
c0003189:	74 1b                	je     c00031a6 <get_fileinfo+0x1a7>
c000318b:	8d 48 bf             	lea    ecx,[eax-0x41]
c000318e:	66 83 f9 19          	cmp    cx,0x19
c0003192:	77 17                	ja     c00031ab <get_fileinfo+0x1ac>
c0003194:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003197:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000319a:	21 f9                	and    ecx,edi
c000319c:	80 e1 18             	and    cl,0x18
c000319f:	74 0a                	je     c00031ab <get_fileinfo+0x1ac>
c00031a1:	83 c0 20             	add    eax,0x20
c00031a4:	eb 05                	jmp    c00031ab <get_fileinfo+0x1ac>
c00031a6:	bf 10 00 00 00       	mov    edi,0x10
c00031ab:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c00031af:	42                   	inc    edx
c00031b0:	eb c9                	jmp    c000317b <get_fileinfo+0x17c>
c00031b2:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c00031b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ba:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c00031be:	75 04                	jne    c00031c4 <get_fileinfo+0x1c5>
c00031c0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00031c4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031c7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00031ca:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00031cd:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031d0:	83 c0 1c             	add    eax,0x1c
c00031d3:	e8 44 ec ff ff       	call   c0001e1c <ld_dword>
c00031d8:	89 03                	mov    DWORD PTR [ebx],eax
c00031da:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031dd:	83 c0 16             	add    eax,0x16
c00031e0:	e8 2a ec ff ff       	call   c0001e0f <ld_word>
c00031e5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031e9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ec:	83 c0 18             	add    eax,0x18
c00031ef:	e8 1b ec ff ff       	call   c0001e0f <ld_word>
c00031f4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031f8:	83 c4 1c             	add    esp,0x1c
c00031fb:	5b                   	pop    ebx
c00031fc:	5e                   	pop    esi
c00031fd:	5f                   	pop    edi
c00031fe:	5d                   	pop    ebp
c00031ff:	c3                   	ret    

c0003200 <ld_clust.isra.0>:
c0003200:	56                   	push   esi
c0003201:	89 c6                	mov    esi,eax
c0003203:	53                   	push   ebx
c0003204:	89 d3                	mov    ebx,edx
c0003206:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003209:	e8 01 ec ff ff       	call   c0001e0f <ld_word>
c000320e:	0f b7 c8             	movzx  ecx,ax
c0003211:	89 f0                	mov    eax,esi
c0003213:	3c 03                	cmp    al,0x3
c0003215:	75 0d                	jne    c0003224 <ld_clust.isra.0+0x24>
c0003217:	8d 43 14             	lea    eax,[ebx+0x14]
c000321a:	e8 f0 eb ff ff       	call   c0001e0f <ld_word>
c000321f:	c1 e0 10             	shl    eax,0x10
c0003222:	09 c1                	or     ecx,eax
c0003224:	5b                   	pop    ebx
c0003225:	89 c8                	mov    eax,ecx
c0003227:	5e                   	pop    esi
c0003228:	c3                   	ret    

c0003229 <st_clust.isra.1>:
c0003229:	56                   	push   esi
c000322a:	89 c6                	mov    esi,eax
c000322c:	53                   	push   ebx
c000322d:	89 d3                	mov    ebx,edx
c000322f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003232:	0f b7 d1             	movzx  edx,cx
c0003235:	e8 fa eb ff ff       	call   c0001e34 <st_word>
c000323a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000323d:	75 0f                	jne    c000324e <st_clust.isra.1+0x25>
c000323f:	8d 43 14             	lea    eax,[ebx+0x14]
c0003242:	5b                   	pop    ebx
c0003243:	c1 e9 10             	shr    ecx,0x10
c0003246:	89 ca                	mov    edx,ecx
c0003248:	5e                   	pop    esi
c0003249:	e9 e6 eb ff ff       	jmp    c0001e34 <st_word>
c000324e:	5b                   	pop    ebx
c000324f:	5e                   	pop    esi
c0003250:	c3                   	ret    

c0003251 <get_fat.isra.2>:
c0003251:	83 fa 01             	cmp    edx,0x1
c0003254:	b9 01 00 00 00       	mov    ecx,0x1
c0003259:	0f 86 f4 00 00 00    	jbe    c0003353 <get_fat.isra.2+0x102>
c000325f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003262:	0f 83 eb 00 00 00    	jae    c0003353 <get_fat.isra.2+0x102>
c0003268:	55                   	push   ebp
c0003269:	57                   	push   edi
c000326a:	56                   	push   esi
c000326b:	89 c6                	mov    esi,eax
c000326d:	53                   	push   ebx
c000326e:	89 d3                	mov    ebx,edx
c0003270:	83 ec 0c             	sub    esp,0xc
c0003273:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003276:	83 f8 02             	cmp    eax,0x2
c0003279:	74 79                	je     c00032f4 <get_fat.isra.2+0xa3>
c000327b:	83 f8 03             	cmp    eax,0x3
c000327e:	0f 84 97 00 00 00    	je     c000331b <get_fat.isra.2+0xca>
c0003284:	48                   	dec    eax
c0003285:	0f 85 be 00 00 00    	jne    c0003349 <get_fat.isra.2+0xf8>
c000328b:	89 d7                	mov    edi,edx
c000328d:	89 f0                	mov    eax,esi
c000328f:	d1 ef                	shr    edi,1
c0003291:	01 d7                	add    edi,edx
c0003293:	89 fa                	mov    edx,edi
c0003295:	c1 ea 09             	shr    edx,0x9
c0003298:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000329b:	e8 d4 f0 ff ff       	call   c0002374 <move_window>
c00032a0:	85 c0                	test   eax,eax
c00032a2:	74 08                	je     c00032ac <get_fat.isra.2+0x5b>
c00032a4:	83 c9 ff             	or     ecx,0xffffffff
c00032a7:	e9 9d 00 00 00       	jmp    c0003349 <get_fat.isra.2+0xf8>
c00032ac:	8d 6f 01             	lea    ebp,[edi+0x1]
c00032af:	89 f0                	mov    eax,esi
c00032b1:	89 ea                	mov    edx,ebp
c00032b3:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00032b9:	c1 ea 09             	shr    edx,0x9
c00032bc:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00032c1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032c4:	e8 ab f0 ff ff       	call   c0002374 <move_window>
c00032c9:	85 c0                	test   eax,eax
c00032cb:	75 d7                	jne    c00032a4 <get_fat.isra.2+0x53>
c00032cd:	89 f8                	mov    eax,edi
c00032cf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00032d5:	0f b6 f8             	movzx  edi,al
c00032d8:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00032dd:	c1 e0 08             	shl    eax,0x8
c00032e0:	09 f8                	or     eax,edi
c00032e2:	89 c1                	mov    ecx,eax
c00032e4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032ea:	80 e3 01             	and    bl,0x1
c00032ed:	74 5a                	je     c0003349 <get_fat.isra.2+0xf8>
c00032ef:	c1 e8 04             	shr    eax,0x4
c00032f2:	eb 53                	jmp    c0003347 <get_fat.isra.2+0xf6>
c00032f4:	c1 ea 08             	shr    edx,0x8
c00032f7:	89 f0                	mov    eax,esi
c00032f9:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032fc:	e8 73 f0 ff ff       	call   c0002374 <move_window>
c0003301:	85 c0                	test   eax,eax
c0003303:	75 9f                	jne    c00032a4 <get_fat.isra.2+0x53>
c0003305:	01 db                	add    ebx,ebx
c0003307:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c000330d:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0003311:	e8 f9 ea ff ff       	call   c0001e0f <ld_word>
c0003316:	0f b7 c8             	movzx  ecx,ax
c0003319:	eb 2e                	jmp    c0003349 <get_fat.isra.2+0xf8>
c000331b:	c1 ea 07             	shr    edx,0x7
c000331e:	89 f0                	mov    eax,esi
c0003320:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003323:	e8 4c f0 ff ff       	call   c0002374 <move_window>
c0003328:	85 c0                	test   eax,eax
c000332a:	0f 85 74 ff ff ff    	jne    c00032a4 <get_fat.isra.2+0x53>
c0003330:	c1 e3 02             	shl    ebx,0x2
c0003333:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0003339:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000333d:	e8 da ea ff ff       	call   c0001e1c <ld_dword>
c0003342:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003347:	89 c1                	mov    ecx,eax
c0003349:	83 c4 0c             	add    esp,0xc
c000334c:	89 c8                	mov    eax,ecx
c000334e:	5b                   	pop    ebx
c000334f:	5e                   	pop    esi
c0003350:	5f                   	pop    edi
c0003351:	5d                   	pop    ebp
c0003352:	c3                   	ret    
c0003353:	89 c8                	mov    eax,ecx
c0003355:	c3                   	ret    

c0003356 <dir_sdi>:
c0003356:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000335c:	0f 87 b6 00 00 00    	ja     c0003418 <dir_sdi+0xc2>
c0003362:	55                   	push   ebp
c0003363:	57                   	push   edi
c0003364:	56                   	push   esi
c0003365:	53                   	push   ebx
c0003366:	89 d3                	mov    ebx,edx
c0003368:	83 ec 1c             	sub    esp,0x1c
c000336b:	f6 c2 1f             	test   dl,0x1f
c000336e:	74 0a                	je     c000337a <dir_sdi+0x24>
c0003370:	b8 02 00 00 00       	mov    eax,0x2
c0003375:	e9 96 00 00 00       	jmp    c0003410 <dir_sdi+0xba>
c000337a:	89 c6                	mov    esi,eax
c000337c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000337e:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003381:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003384:	85 ff                	test   edi,edi
c0003386:	75 21                	jne    c00033a9 <dir_sdi+0x53>
c0003388:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000338c:	76 07                	jbe    c0003395 <dir_sdi+0x3f>
c000338e:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003391:	85 c0                	test   eax,eax
c0003393:	75 12                	jne    c00033a7 <dir_sdi+0x51>
c0003395:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003399:	89 da                	mov    edx,ebx
c000339b:	c1 ea 05             	shr    edx,0x5
c000339e:	39 c2                	cmp    edx,eax
c00033a0:	73 ce                	jae    c0003370 <dir_sdi+0x1a>
c00033a2:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00033a5:	eb 3c                	jmp    c00033e3 <dir_sdi+0x8d>
c00033a7:	89 c7                	mov    edi,eax
c00033a9:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00033ad:	c1 e1 09             	shl    ecx,0x9
c00033b0:	39 cb                	cmp    ebx,ecx
c00033b2:	72 26                	jb     c00033da <dir_sdi+0x84>
c00033b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00033ba:	89 fa                	mov    edx,edi
c00033bc:	e8 90 fe ff ff       	call   c0003251 <get_fat.isra.2>
c00033c1:	83 f8 ff             	cmp    eax,0xffffffff
c00033c4:	89 c7                	mov    edi,eax
c00033c6:	74 43                	je     c000340b <dir_sdi+0xb5>
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 a3                	jbe    c0003370 <dir_sdi+0x1a>
c00033cd:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00033d0:	76 9e                	jbe    c0003370 <dir_sdi+0x1a>
c00033d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d6:	29 cb                	sub    ebx,ecx
c00033d8:	eb d6                	jmp    c00033b0 <dir_sdi+0x5a>
c00033da:	89 fa                	mov    edx,edi
c00033dc:	89 e8                	mov    eax,ebp
c00033de:	e8 82 ec ff ff       	call   c0002065 <clst2sect>
c00033e3:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033e6:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00033e9:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ec:	85 d2                	test   edx,edx
c00033ee:	74 80                	je     c0003370 <dir_sdi+0x1a>
c00033f0:	89 d8                	mov    eax,ebx
c00033f2:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033f8:	c1 e8 09             	shr    eax,0x9
c00033fb:	01 d0                	add    eax,edx
c00033fd:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003400:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c0003404:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003407:	31 c0                	xor    eax,eax
c0003409:	eb 05                	jmp    c0003410 <dir_sdi+0xba>
c000340b:	b8 01 00 00 00       	mov    eax,0x1
c0003410:	83 c4 1c             	add    esp,0x1c
c0003413:	5b                   	pop    ebx
c0003414:	5e                   	pop    esi
c0003415:	5f                   	pop    edi
c0003416:	5d                   	pop    ebp
c0003417:	c3                   	ret    
c0003418:	b8 02 00 00 00       	mov    eax,0x2
c000341d:	c3                   	ret    

c000341e <create_chain>:
c000341e:	55                   	push   ebp
c000341f:	89 c5                	mov    ebp,eax
c0003421:	57                   	push   edi
c0003422:	89 d7                	mov    edi,edx
c0003424:	56                   	push   esi
c0003425:	53                   	push   ebx
c0003426:	83 ec 1c             	sub    esp,0x1c
c0003429:	85 d2                	test   edx,edx
c000342b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000342d:	75 0e                	jne    c000343d <create_chain+0x1f>
c000342f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003432:	85 c9                	test   ecx,ecx
c0003434:	74 32                	je     c0003468 <create_chain+0x4a>
c0003436:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0003439:	77 32                	ja     c000346d <create_chain+0x4f>
c000343b:	eb 2b                	jmp    c0003468 <create_chain+0x4a>
c000343d:	89 d8                	mov    eax,ebx
c000343f:	e8 0d fe ff ff       	call   c0003251 <get_fat.isra.2>
c0003444:	83 f8 01             	cmp    eax,0x1
c0003447:	77 0a                	ja     c0003453 <create_chain+0x35>
c0003449:	b8 01 00 00 00       	mov    eax,0x1
c000344e:	e9 fd 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003453:	83 f8 ff             	cmp    eax,0xffffffff
c0003456:	0f 84 f1 00 00 00    	je     c000354d <create_chain+0x12f>
c000345c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000345f:	89 f9                	mov    ecx,edi
c0003461:	76 0a                	jbe    c000346d <create_chain+0x4f>
c0003463:	e9 e8 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003468:	b9 01 00 00 00       	mov    ecx,0x1
c000346d:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003471:	75 07                	jne    c000347a <create_chain+0x5c>
c0003473:	31 c0                	xor    eax,eax
c0003475:	e9 d6 00 00 00       	jmp    c0003550 <create_chain+0x132>
c000347a:	39 f9                	cmp    ecx,edi
c000347c:	75 49                	jne    c00034c7 <create_chain+0xa9>
c000347e:	8d 71 01             	lea    esi,[ecx+0x1]
c0003481:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003484:	77 05                	ja     c000348b <create_chain+0x6d>
c0003486:	be 02 00 00 00       	mov    esi,0x2
c000348b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000348f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003492:	89 f2                	mov    edx,esi
c0003494:	e8 b8 fd ff ff       	call   c0003251 <get_fat.isra.2>
c0003499:	83 f8 01             	cmp    eax,0x1
c000349c:	0f 84 ae 00 00 00    	je     c0003550 <create_chain+0x132>
c00034a2:	83 f8 ff             	cmp    eax,0xffffffff
c00034a5:	0f 84 a5 00 00 00    	je     c0003550 <create_chain+0x132>
c00034ab:	85 c0                	test   eax,eax
c00034ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034b1:	74 10                	je     c00034c3 <create_chain+0xa5>
c00034b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00034b6:	83 f8 01             	cmp    eax,0x1
c00034b9:	76 0c                	jbe    c00034c7 <create_chain+0xa9>
c00034bb:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c00034be:	0f 47 c8             	cmova  ecx,eax
c00034c1:	eb 04                	jmp    c00034c7 <create_chain+0xa9>
c00034c3:	85 f6                	test   esi,esi
c00034c5:	75 3b                	jne    c0003502 <create_chain+0xe4>
c00034c7:	89 ce                	mov    esi,ecx
c00034c9:	46                   	inc    esi
c00034ca:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00034cd:	77 0a                	ja     c00034d9 <create_chain+0xbb>
c00034cf:	83 f9 01             	cmp    ecx,0x1
c00034d2:	76 9f                	jbe    c0003473 <create_chain+0x55>
c00034d4:	be 02 00 00 00       	mov    esi,0x2
c00034d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00034dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034e0:	89 f2                	mov    edx,esi
c00034e2:	e8 6a fd ff ff       	call   c0003251 <get_fat.isra.2>
c00034e7:	85 c0                	test   eax,eax
c00034e9:	74 17                	je     c0003502 <create_chain+0xe4>
c00034eb:	83 f8 01             	cmp    eax,0x1
c00034ee:	74 60                	je     c0003550 <create_chain+0x132>
c00034f0:	83 f8 ff             	cmp    eax,0xffffffff
c00034f3:	74 5b                	je     c0003550 <create_chain+0x132>
c00034f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034f9:	39 ce                	cmp    esi,ecx
c00034fb:	75 cc                	jne    c00034c9 <create_chain+0xab>
c00034fd:	e9 71 ff ff ff       	jmp    c0003473 <create_chain+0x55>
c0003502:	83 c9 ff             	or     ecx,0xffffffff
c0003505:	89 f2                	mov    edx,esi
c0003507:	89 d8                	mov    eax,ebx
c0003509:	e8 c0 f2 ff ff       	call   c00027ce <put_fat>
c000350e:	85 c0                	test   eax,eax
c0003510:	75 0f                	jne    c0003521 <create_chain+0x103>
c0003512:	85 ff                	test   edi,edi
c0003514:	74 0b                	je     c0003521 <create_chain+0x103>
c0003516:	89 f1                	mov    ecx,esi
c0003518:	89 fa                	mov    edx,edi
c000351a:	89 d8                	mov    eax,ebx
c000351c:	e8 ad f2 ff ff       	call   c00027ce <put_fat>
c0003521:	85 c0                	test   eax,eax
c0003523:	75 21                	jne    c0003546 <create_chain+0x128>
c0003525:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003528:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000352b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000352e:	8d 57 fe             	lea    edx,[edi-0x2]
c0003531:	39 d0                	cmp    eax,edx
c0003533:	77 04                	ja     c0003539 <create_chain+0x11b>
c0003535:	48                   	dec    eax
c0003536:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003539:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000353c:	83 c8 01             	or     eax,0x1
c000353f:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003542:	89 f0                	mov    eax,esi
c0003544:	eb 0a                	jmp    c0003550 <create_chain+0x132>
c0003546:	48                   	dec    eax
c0003547:	0f 85 fc fe ff ff    	jne    c0003449 <create_chain+0x2b>
c000354d:	83 c8 ff             	or     eax,0xffffffff
c0003550:	83 c4 1c             	add    esp,0x1c
c0003553:	5b                   	pop    ebx
c0003554:	5e                   	pop    esi
c0003555:	5f                   	pop    edi
c0003556:	5d                   	pop    ebp
c0003557:	c3                   	ret    

c0003558 <remove_chain>:
c0003558:	55                   	push   ebp
c0003559:	57                   	push   edi
c000355a:	56                   	push   esi
c000355b:	89 d6                	mov    esi,edx
c000355d:	53                   	push   ebx
c000355e:	83 ec 0c             	sub    esp,0xc
c0003561:	83 fa 01             	cmp    edx,0x1
c0003564:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003566:	76 6a                	jbe    c00035d2 <remove_chain+0x7a>
c0003568:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000356b:	76 65                	jbe    c00035d2 <remove_chain+0x7a>
c000356d:	85 c9                	test   ecx,ecx
c000356f:	89 c5                	mov    ebp,eax
c0003571:	89 ca                	mov    edx,ecx
c0003573:	74 0e                	je     c0003583 <remove_chain+0x2b>
c0003575:	83 c9 ff             	or     ecx,0xffffffff
c0003578:	89 d8                	mov    eax,ebx
c000357a:	e8 4f f2 ff ff       	call   c00027ce <put_fat>
c000357f:	85 c0                	test   eax,eax
c0003581:	75 5b                	jne    c00035de <remove_chain+0x86>
c0003583:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003586:	89 f2                	mov    edx,esi
c0003588:	e8 c4 fc ff ff       	call   c0003251 <get_fat.isra.2>
c000358d:	85 c0                	test   eax,eax
c000358f:	89 c7                	mov    edi,eax
c0003591:	75 04                	jne    c0003597 <remove_chain+0x3f>
c0003593:	31 c0                	xor    eax,eax
c0003595:	eb 47                	jmp    c00035de <remove_chain+0x86>
c0003597:	83 f8 01             	cmp    eax,0x1
c000359a:	74 36                	je     c00035d2 <remove_chain+0x7a>
c000359c:	83 f8 ff             	cmp    eax,0xffffffff
c000359f:	74 38                	je     c00035d9 <remove_chain+0x81>
c00035a1:	31 c9                	xor    ecx,ecx
c00035a3:	89 f2                	mov    edx,esi
c00035a5:	89 d8                	mov    eax,ebx
c00035a7:	e8 22 f2 ff ff       	call   c00027ce <put_fat>
c00035ac:	85 c0                	test   eax,eax
c00035ae:	75 2e                	jne    c00035de <remove_chain+0x86>
c00035b0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00035b3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00035b6:	8d 4a fe             	lea    ecx,[edx-0x2]
c00035b9:	39 c8                	cmp    eax,ecx
c00035bb:	73 0d                	jae    c00035ca <remove_chain+0x72>
c00035bd:	40                   	inc    eax
c00035be:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00035c1:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00035c4:	83 c8 01             	or     eax,0x1
c00035c7:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00035ca:	39 fa                	cmp    edx,edi
c00035cc:	89 fe                	mov    esi,edi
c00035ce:	77 b3                	ja     c0003583 <remove_chain+0x2b>
c00035d0:	eb c1                	jmp    c0003593 <remove_chain+0x3b>
c00035d2:	b8 02 00 00 00       	mov    eax,0x2
c00035d7:	eb 05                	jmp    c00035de <remove_chain+0x86>
c00035d9:	b8 01 00 00 00       	mov    eax,0x1
c00035de:	83 c4 0c             	add    esp,0xc
c00035e1:	5b                   	pop    ebx
c00035e2:	5e                   	pop    esi
c00035e3:	5f                   	pop    edi
c00035e4:	5d                   	pop    ebp
c00035e5:	c3                   	ret    

c00035e6 <dir_next>:
c00035e6:	55                   	push   ebp
c00035e7:	57                   	push   edi
c00035e8:	56                   	push   esi
c00035e9:	53                   	push   ebx
c00035ea:	83 ec 1c             	sub    esp,0x1c
c00035ed:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035f0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035f2:	83 c7 20             	add    edi,0x20
c00035f5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035fb:	76 07                	jbe    c0003604 <dir_next+0x1e>
c00035fd:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003604:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c0003607:	b9 04 00 00 00       	mov    ecx,0x4
c000360c:	85 f6                	test   esi,esi
c000360e:	0f 84 cd 00 00 00    	je     c00036e1 <dir_next+0xfb>
c0003614:	89 c3                	mov    ebx,eax
c0003616:	89 f8                	mov    eax,edi
c0003618:	25 ff 01 00 00       	and    eax,0x1ff
c000361d:	89 d1                	mov    ecx,edx
c000361f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003623:	0f 85 a8 00 00 00    	jne    c00036d1 <dir_next+0xeb>
c0003629:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000362c:	46                   	inc    esi
c000362d:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003630:	85 d2                	test   edx,edx
c0003632:	75 22                	jne    c0003656 <dir_next+0x70>
c0003634:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003638:	89 fa                	mov    edx,edi
c000363a:	c1 ea 05             	shr    edx,0x5
c000363d:	39 c2                	cmp    edx,eax
c000363f:	0f 82 8c 00 00 00    	jb     c00036d1 <dir_next+0xeb>
c0003645:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000364c:	b9 04 00 00 00       	mov    ecx,0x4
c0003651:	e9 8b 00 00 00       	jmp    c00036e1 <dir_next+0xfb>
c0003656:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000365a:	89 fe                	mov    esi,edi
c000365c:	c1 ee 09             	shr    esi,0x9
c000365f:	48                   	dec    eax
c0003660:	85 f0                	test   eax,esi
c0003662:	75 6d                	jne    c00036d1 <dir_next+0xeb>
c0003664:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003668:	89 e8                	mov    eax,ebp
c000366a:	e8 e2 fb ff ff       	call   c0003251 <get_fat.isra.2>
c000366f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003673:	83 f8 01             	cmp    eax,0x1
c0003676:	89 c6                	mov    esi,eax
c0003678:	77 07                	ja     c0003681 <dir_next+0x9b>
c000367a:	b9 02 00 00 00       	mov    ecx,0x2
c000367f:	eb 60                	jmp    c00036e1 <dir_next+0xfb>
c0003681:	83 f8 ff             	cmp    eax,0xffffffff
c0003684:	75 07                	jne    c000368d <dir_next+0xa7>
c0003686:	b9 01 00 00 00       	mov    ecx,0x1
c000368b:	eb 54                	jmp    c00036e1 <dir_next+0xfb>
c000368d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003690:	77 30                	ja     c00036c2 <dir_next+0xdc>
c0003692:	85 c9                	test   ecx,ecx
c0003694:	74 af                	je     c0003645 <dir_next+0x5f>
c0003696:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003699:	89 d8                	mov    eax,ebx
c000369b:	e8 7e fd ff ff       	call   c000341e <create_chain>
c00036a0:	b9 07 00 00 00       	mov    ecx,0x7
c00036a5:	85 c0                	test   eax,eax
c00036a7:	89 c6                	mov    esi,eax
c00036a9:	74 36                	je     c00036e1 <dir_next+0xfb>
c00036ab:	83 f8 01             	cmp    eax,0x1
c00036ae:	74 ca                	je     c000367a <dir_next+0x94>
c00036b0:	83 f8 ff             	cmp    eax,0xffffffff
c00036b3:	74 d1                	je     c0003686 <dir_next+0xa0>
c00036b5:	89 c2                	mov    edx,eax
c00036b7:	89 e8                	mov    eax,ebp
c00036b9:	e8 67 f2 ff ff       	call   c0002925 <dir_clear>
c00036be:	85 c0                	test   eax,eax
c00036c0:	75 c4                	jne    c0003686 <dir_next+0xa0>
c00036c2:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00036c5:	89 f2                	mov    edx,esi
c00036c7:	89 e8                	mov    eax,ebp
c00036c9:	e8 97 e9 ff ff       	call   c0002065 <clst2sect>
c00036ce:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00036d1:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00036d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00036d8:	31 c9                	xor    ecx,ecx
c00036da:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036de:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036e1:	83 c4 1c             	add    esp,0x1c
c00036e4:	89 c8                	mov    eax,ecx
c00036e6:	5b                   	pop    ebx
c00036e7:	5e                   	pop    esi
c00036e8:	5f                   	pop    edi
c00036e9:	5d                   	pop    ebp
c00036ea:	c3                   	ret    

c00036eb <dir_alloc>:
c00036eb:	55                   	push   ebp
c00036ec:	89 c5                	mov    ebp,eax
c00036ee:	57                   	push   edi
c00036ef:	89 d7                	mov    edi,edx
c00036f1:	56                   	push   esi
c00036f2:	31 d2                	xor    edx,edx
c00036f4:	53                   	push   ebx
c00036f5:	83 ec 0c             	sub    esp,0xc
c00036f8:	8b 30                	mov    esi,DWORD PTR [eax]
c00036fa:	e8 57 fc ff ff       	call   c0003356 <dir_sdi>
c00036ff:	85 c0                	test   eax,eax
c0003701:	75 3b                	jne    c000373e <dir_alloc+0x53>
c0003703:	31 db                	xor    ebx,ebx
c0003705:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003708:	89 f0                	mov    eax,esi
c000370a:	e8 65 ec ff ff       	call   c0002374 <move_window>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 2b                	jne    c000373e <dir_alloc+0x53>
c0003713:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003716:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003719:	81 fa e5 00 00 00    	cmp    edx,0xe5
c000371f:	74 04                	je     c0003725 <dir_alloc+0x3a>
c0003721:	85 d2                	test   edx,edx
c0003723:	75 07                	jne    c000372c <dir_alloc+0x41>
c0003725:	43                   	inc    ebx
c0003726:	39 fb                	cmp    ebx,edi
c0003728:	75 04                	jne    c000372e <dir_alloc+0x43>
c000372a:	eb 1c                	jmp    c0003748 <dir_alloc+0x5d>
c000372c:	31 db                	xor    ebx,ebx
c000372e:	ba 01 00 00 00       	mov    edx,0x1
c0003733:	89 e8                	mov    eax,ebp
c0003735:	e8 ac fe ff ff       	call   c00035e6 <dir_next>
c000373a:	85 c0                	test   eax,eax
c000373c:	74 c7                	je     c0003705 <dir_alloc+0x1a>
c000373e:	83 f8 04             	cmp    eax,0x4
c0003741:	75 05                	jne    c0003748 <dir_alloc+0x5d>
c0003743:	b8 07 00 00 00       	mov    eax,0x7
c0003748:	83 c4 0c             	add    esp,0xc
c000374b:	5b                   	pop    ebx
c000374c:	5e                   	pop    esi
c000374d:	5f                   	pop    edi
c000374e:	5d                   	pop    ebp
c000374f:	c3                   	ret    

c0003750 <dir_read>:
c0003750:	55                   	push   ebp
c0003751:	57                   	push   edi
c0003752:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003757:	56                   	push   esi
c0003758:	be 04 00 00 00       	mov    esi,0x4
c000375d:	53                   	push   ebx
c000375e:	89 c3                	mov    ebx,eax
c0003760:	83 ec 1c             	sub    esp,0x1c
c0003763:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003767:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003769:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000376e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003771:	85 d2                	test   edx,edx
c0003773:	0f 84 e3 00 00 00    	je     c000385c <dir_read+0x10c>
c0003779:	89 e8                	mov    eax,ebp
c000377b:	e8 f4 eb ff ff       	call   c0002374 <move_window>
c0003780:	85 c0                	test   eax,eax
c0003782:	89 c6                	mov    esi,eax
c0003784:	0f 85 dd 00 00 00    	jne    c0003867 <dir_read+0x117>
c000378a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000378d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003790:	88 04 24             	mov    BYTE PTR [esp],al
c0003793:	85 c0                	test   eax,eax
c0003795:	0f 84 c7 00 00 00    	je     c0003862 <dir_read+0x112>
c000379b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000379e:	83 e1 3f             	and    ecx,0x3f
c00037a1:	3d e5 00 00 00       	cmp    eax,0xe5
c00037a6:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c00037a9:	0f 84 93 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037af:	83 f8 2e             	cmp    eax,0x2e
c00037b2:	0f 84 8a 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037b8:	0f b6 c9             	movzx  ecx,cl
c00037bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00037bf:	83 e1 df             	and    ecx,0xffffffdf
c00037c2:	83 f9 08             	cmp    ecx,0x8
c00037c5:	0f 94 c1             	sete   cl
c00037c8:	0f b6 c9             	movzx  ecx,cl
c00037cb:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00037cf:	75 71                	jne    c0003842 <dir_read+0xf2>
c00037d1:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00037d6:	75 4a                	jne    c0003822 <dir_read+0xd2>
c00037d8:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037dc:	74 16                	je     c00037f4 <dir_read+0xa4>
c00037de:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037e1:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037e8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037ef:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037f2:	eb 0e                	jmp    c0003802 <dir_read+0xb2>
c00037f4:	89 f9                	mov    ecx,edi
c00037f6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037fb:	0f b6 c9             	movzx  ecx,cl
c00037fe:	39 c1                	cmp    ecx,eax
c0003800:	75 45                	jne    c0003847 <dir_read+0xf7>
c0003802:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003806:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380b:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c000380e:	75 37                	jne    c0003847 <dir_read+0xf7>
c0003810:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0003813:	e8 6a e8 ff ff       	call   c0002082 <pick_lfn>
c0003818:	85 c0                	test   eax,eax
c000381a:	74 2b                	je     c0003847 <dir_read+0xf7>
c000381c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000381f:	4f                   	dec    edi
c0003820:	eb 25                	jmp    c0003847 <dir_read+0xf7>
c0003822:	89 f8                	mov    eax,edi
c0003824:	84 c0                	test   al,al
c0003826:	75 11                	jne    c0003839 <dir_read+0xe9>
c0003828:	89 d0                	mov    eax,edx
c000382a:	e8 30 ea ff ff       	call   c000225f <sum_sfn>
c000382f:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003833:	75 04                	jne    c0003839 <dir_read+0xe9>
c0003835:	31 f6                	xor    esi,esi
c0003837:	eb 35                	jmp    c000386e <dir_read+0x11e>
c0003839:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003840:	eb 2c                	jmp    c000386e <dir_read+0x11e>
c0003842:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003847:	31 d2                	xor    edx,edx
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 96 fd ff ff       	call   c00035e6 <dir_next>
c0003850:	85 c0                	test   eax,eax
c0003852:	89 c6                	mov    esi,eax
c0003854:	0f 84 14 ff ff ff    	je     c000376e <dir_read+0x1e>
c000385a:	eb 0b                	jmp    c0003867 <dir_read+0x117>
c000385c:	85 f6                	test   esi,esi
c000385e:	74 d5                	je     c0003835 <dir_read+0xe5>
c0003860:	eb 05                	jmp    c0003867 <dir_read+0x117>
c0003862:	be 04 00 00 00       	mov    esi,0x4
c0003867:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000386e:	83 c4 1c             	add    esp,0x1c
c0003871:	89 f0                	mov    eax,esi
c0003873:	5b                   	pop    ebx
c0003874:	5e                   	pop    esi
c0003875:	5f                   	pop    edi
c0003876:	5d                   	pop    ebp
c0003877:	c3                   	ret    

c0003878 <dir_remove>:
c0003878:	57                   	push   edi
c0003879:	56                   	push   esi
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003880:	8b 30                	mov    esi,DWORD PTR [eax]
c0003882:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003885:	83 fa ff             	cmp    edx,0xffffffff
c0003888:	74 09                	je     c0003893 <dir_remove+0x1b>
c000388a:	e8 c7 fa ff ff       	call   c0003356 <dir_sdi>
c000388f:	85 c0                	test   eax,eax
c0003891:	75 34                	jne    c00038c7 <dir_remove+0x4f>
c0003893:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003896:	89 f0                	mov    eax,esi
c0003898:	e8 d7 ea ff ff       	call   c0002374 <move_window>
c000389d:	85 c0                	test   eax,eax
c000389f:	75 1c                	jne    c00038bd <dir_remove+0x45>
c00038a1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00038a4:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00038a7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00038ab:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c00038ae:	73 17                	jae    c00038c7 <dir_remove+0x4f>
c00038b0:	31 d2                	xor    edx,edx
c00038b2:	89 d8                	mov    eax,ebx
c00038b4:	e8 2d fd ff ff       	call   c00035e6 <dir_next>
c00038b9:	85 c0                	test   eax,eax
c00038bb:	74 d6                	je     c0003893 <dir_remove+0x1b>
c00038bd:	83 f8 04             	cmp    eax,0x4
c00038c0:	75 05                	jne    c00038c7 <dir_remove+0x4f>
c00038c2:	b8 02 00 00 00       	mov    eax,0x2
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	c3                   	ret    

c00038cb <dir_find>:
c00038cb:	55                   	push   ebp
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	57                   	push   edi
c00038cf:	56                   	push   esi
c00038d0:	53                   	push   ebx
c00038d1:	89 c3                	mov    ebx,eax
c00038d3:	83 ec 1c             	sub    esp,0x1c
c00038d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00038d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038dc:	89 d8                	mov    eax,ebx
c00038de:	e8 73 fa ff ff       	call   c0003356 <dir_sdi>
c00038e3:	85 c0                	test   eax,eax
c00038e5:	89 c6                	mov    esi,eax
c00038e7:	0f 85 22 01 00 00    	jne    c0003a0f <dir_find+0x144>
c00038ed:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038f4:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00038f9:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038fe:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003905:	e8 6a ea ff ff       	call   c0002374 <move_window>
c000390a:	85 c0                	test   eax,eax
c000390c:	89 c6                	mov    esi,eax
c000390e:	0f 85 fb 00 00 00    	jne    c0003a0f <dir_find+0x144>
c0003914:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003917:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c000391a:	85 d2                	test   edx,edx
c000391c:	89 d1                	mov    ecx,edx
c000391e:	0f 84 e6 00 00 00    	je     c0003a0a <dir_find+0x13f>
c0003924:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003927:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000392b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000392f:	83 e0 3f             	and    eax,0x3f
c0003932:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003938:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000393b:	0f 84 a8 00 00 00    	je     c00039e9 <dir_find+0x11e>
c0003941:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003946:	0f b6 c0             	movzx  eax,al
c0003949:	74 0b                	je     c0003956 <dir_find+0x8b>
c000394b:	83 f8 0f             	cmp    eax,0xf
c000394e:	0f 85 95 00 00 00    	jne    c00039e9 <dir_find+0x11e>
c0003954:	eb 05                	jmp    c000395b <dir_find+0x90>
c0003956:	83 f8 0f             	cmp    eax,0xf
c0003959:	75 62                	jne    c00039bd <dir_find+0xf2>
c000395b:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c000395f:	0f 85 90 00 00 00    	jne    c00039f5 <dir_find+0x12a>
c0003965:	f6 c1 40             	test   cl,0x40
c0003968:	74 15                	je     c000397f <dir_find+0xb4>
c000396a:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c000396d:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003973:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003977:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000397a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000397d:	eb 11                	jmp    c0003990 <dir_find+0xc5>
c000397f:	89 e8                	mov    eax,ebp
c0003981:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003986:	0f b6 d0             	movzx  edx,al
c0003989:	0f b6 c1             	movzx  eax,cl
c000398c:	39 c2                	cmp    edx,eax
c000398e:	75 65                	jne    c00039f5 <dir_find+0x12a>
c0003990:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003994:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003999:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c000399c:	75 57                	jne    c00039f5 <dir_find+0x12a>
c000399e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039a6:	89 fa                	mov    edx,edi
c00039a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039ab:	e8 2c f3 ff ff       	call   c0002cdc <cmp_lfn>
c00039b0:	85 c0                	test   eax,eax
c00039b2:	74 41                	je     c00039f5 <dir_find+0x12a>
c00039b4:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039b8:	8d 69 ff             	lea    ebp,[ecx-0x1]
c00039bb:	eb 38                	jmp    c00039f5 <dir_find+0x12a>
c00039bd:	89 e8                	mov    eax,ebp
c00039bf:	84 c0                	test   al,al
c00039c1:	75 0d                	jne    c00039d0 <dir_find+0x105>
c00039c3:	89 f8                	mov    eax,edi
c00039c5:	e8 95 e8 ff ff       	call   c000225f <sum_sfn>
c00039ca:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039ce:	74 3f                	je     c0003a0f <dir_find+0x144>
c00039d0:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c00039d4:	75 13                	jne    c00039e9 <dir_find+0x11e>
c00039d6:	8d 53 20             	lea    edx,[ebx+0x20]
c00039d9:	b9 0b 00 00 00       	mov    ecx,0xb
c00039de:	89 f8                	mov    eax,edi
c00039e0:	e8 75 e4 ff ff       	call   c0001e5a <mem_cmp>
c00039e5:	85 c0                	test   eax,eax
c00039e7:	74 26                	je     c0003a0f <dir_find+0x144>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00039f5:	31 d2                	xor    edx,edx
c00039f7:	89 d8                	mov    eax,ebx
c00039f9:	e8 e8 fb ff ff       	call   c00035e6 <dir_next>
c00039fe:	85 c0                	test   eax,eax
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	0f 84 f6 fe ff ff    	je     c00038fe <dir_find+0x33>
c0003a08:	eb 05                	jmp    c0003a0f <dir_find+0x144>
c0003a0a:	be 04 00 00 00       	mov    esi,0x4
c0003a0f:	83 c4 1c             	add    esp,0x1c
c0003a12:	89 f0                	mov    eax,esi
c0003a14:	5b                   	pop    ebx
c0003a15:	5e                   	pop    esi
c0003a16:	5f                   	pop    edi
c0003a17:	5d                   	pop    ebp
c0003a18:	c3                   	ret    

c0003a19 <follow_path>:
c0003a19:	56                   	push   esi
c0003a1a:	53                   	push   ebx
c0003a1b:	89 c3                	mov    ebx,eax
c0003a1d:	83 ec 14             	sub    esp,0x14
c0003a20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a24:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a2a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003a2d:	83 fa 2f             	cmp    edx,0x2f
c0003a30:	75 07                	jne    c0003a39 <follow_path+0x20>
c0003a32:	40                   	inc    eax
c0003a33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a37:	eb ed                	jmp    c0003a26 <follow_path+0xd>
c0003a39:	83 fa 5c             	cmp    edx,0x5c
c0003a3c:	74 f4                	je     c0003a32 <follow_path+0x19>
c0003a3e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a45:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a48:	77 3e                	ja     c0003a88 <follow_path+0x6f>
c0003a4a:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a4e:	31 d2                	xor    edx,edx
c0003a50:	89 d8                	mov    eax,ebx
c0003a52:	e8 ff f8 ff ff       	call   c0003356 <dir_sdi>
c0003a57:	eb 57                	jmp    c0003ab0 <follow_path+0x97>
c0003a59:	89 d8                	mov    eax,ebx
c0003a5b:	e8 6b fe ff ff       	call   c00038cb <dir_find>
c0003a60:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a63:	85 c0                	test   eax,eax
c0003a65:	75 32                	jne    c0003a99 <follow_path+0x80>
c0003a67:	80 e2 04             	and    dl,0x4
c0003a6a:	75 44                	jne    c0003ab0 <follow_path+0x97>
c0003a6c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a70:	74 39                	je     c0003aab <follow_path+0x92>
c0003a72:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a75:	25 ff 01 00 00       	and    eax,0x1ff
c0003a7a:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a7e:	8a 06                	mov    al,BYTE PTR [esi]
c0003a80:	e8 7b f7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003a85:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a88:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 8e ef ff ff       	call   c0002a21 <create_name>
c0003a93:	85 c0                	test   eax,eax
c0003a95:	74 c2                	je     c0003a59 <follow_path+0x40>
c0003a97:	eb 17                	jmp    c0003ab0 <follow_path+0x97>
c0003a99:	83 f8 04             	cmp    eax,0x4
c0003a9c:	75 12                	jne    c0003ab0 <follow_path+0x97>
c0003a9e:	80 e2 04             	and    dl,0x4
c0003aa1:	ba 05 00 00 00       	mov    edx,0x5
c0003aa6:	0f 44 c2             	cmove  eax,edx
c0003aa9:	eb 05                	jmp    c0003ab0 <follow_path+0x97>
c0003aab:	b8 05 00 00 00       	mov    eax,0x5
c0003ab0:	83 c4 14             	add    esp,0x14
c0003ab3:	5b                   	pop    ebx
c0003ab4:	5e                   	pop    esi
c0003ab5:	c3                   	ret    

c0003ab6 <dir_register>:
c0003ab6:	55                   	push   ebp
c0003ab7:	57                   	push   edi
c0003ab8:	56                   	push   esi
c0003ab9:	be 06 00 00 00       	mov    esi,0x6
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 2c             	sub    esp,0x2c
c0003ac2:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ac5:	80 e2 a0             	and    dl,0xa0
c0003ac8:	0f 85 66 01 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ace:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003ad6:	8b 38                	mov    edi,DWORD PTR [eax]
c0003ad8:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003adb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003adf:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003ae4:	74 06                	je     c0003aec <dir_register+0x36>
c0003ae6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aea:	eb ef                	jmp    c0003adb <dir_register+0x25>
c0003aec:	89 c3                	mov    ebx,eax
c0003aee:	b9 0c 00 00 00       	mov    ecx,0xc
c0003af3:	8d 40 20             	lea    eax,[eax+0x20]
c0003af6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003afa:	89 c2                	mov    edx,eax
c0003afc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003b00:	e8 36 e3 ff ff       	call   c0001e3b <mem_cpy>
c0003b05:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003b0a:	74 48                	je     c0003b54 <dir_register+0x9e>
c0003b0c:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003b10:	bd 01 00 00 00       	mov    ebp,0x1
c0003b15:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003b18:	55                   	push   ebp
c0003b19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003b21:	e8 77 e6 ff ff       	call   c000219d <gen_numname>
c0003b26:	58                   	pop    eax
c0003b27:	89 d8                	mov    eax,ebx
c0003b29:	e8 9d fd ff ff       	call   c00038cb <dir_find>
c0003b2e:	85 c0                	test   eax,eax
c0003b30:	89 c6                	mov    esi,eax
c0003b32:	75 10                	jne    c0003b44 <dir_register+0x8e>
c0003b34:	45                   	inc    ebp
c0003b35:	83 fd 64             	cmp    ebp,0x64
c0003b38:	75 db                	jne    c0003b15 <dir_register+0x5f>
c0003b3a:	be 07 00 00 00       	mov    esi,0x7
c0003b3f:	e9 f0 00 00 00       	jmp    c0003c34 <dir_register+0x17e>
c0003b44:	83 f8 04             	cmp    eax,0x4
c0003b47:	0f 85 e7 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b4d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b51:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b54:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b59:	bd 01 00 00 00       	mov    ebp,0x1
c0003b5e:	74 13                	je     c0003b73 <dir_register+0xbd>
c0003b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b64:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b69:	31 d2                	xor    edx,edx
c0003b6b:	83 c0 0c             	add    eax,0xc
c0003b6e:	f7 f1                	div    ecx
c0003b70:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b73:	89 ea                	mov    edx,ebp
c0003b75:	89 d8                	mov    eax,ebx
c0003b77:	e8 6f fb ff ff       	call   c00036eb <dir_alloc>
c0003b7c:	85 c0                	test   eax,eax
c0003b7e:	89 c6                	mov    esi,eax
c0003b80:	0f 85 ae 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b86:	4d                   	dec    ebp
c0003b87:	74 6b                	je     c0003bf4 <dir_register+0x13e>
c0003b89:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b8c:	89 e8                	mov    eax,ebp
c0003b8e:	c1 e0 05             	shl    eax,0x5
c0003b91:	29 c2                	sub    edx,eax
c0003b93:	89 d8                	mov    eax,ebx
c0003b95:	e8 bc f7 ff ff       	call   c0003356 <dir_sdi>
c0003b9a:	85 c0                	test   eax,eax
c0003b9c:	89 c6                	mov    esi,eax
c0003b9e:	0f 85 90 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ba8:	e8 b2 e6 ff ff       	call   c000225f <sum_sfn>
c0003bad:	0f b6 c0             	movzx  eax,al
c0003bb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bb4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb7:	89 f8                	mov    eax,edi
c0003bb9:	e8 b6 e7 ff ff       	call   c0002374 <move_window>
c0003bbe:	85 c0                	test   eax,eax
c0003bc0:	89 c6                	mov    esi,eax
c0003bc2:	75 70                	jne    c0003c34 <dir_register+0x17e>
c0003bc4:	83 ec 0c             	sub    esp,0xc
c0003bc7:	89 e8                	mov    eax,ebp
c0003bc9:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003bcc:	0f b6 c8             	movzx  ecx,al
c0003bcf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003bd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003bd6:	e8 27 e5 ff ff       	call   c0002102 <put_lfn>
c0003bdb:	31 d2                	xor    edx,edx
c0003bdd:	89 d8                	mov    eax,ebx
c0003bdf:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003be3:	e8 fe f9 ff ff       	call   c00035e6 <dir_next>
c0003be8:	83 c4 10             	add    esp,0x10
c0003beb:	85 c0                	test   eax,eax
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	75 43                	jne    c0003c34 <dir_register+0x17e>
c0003bf1:	4d                   	dec    ebp
c0003bf2:	75 c0                	jne    c0003bb4 <dir_register+0xfe>
c0003bf4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bf7:	89 f8                	mov    eax,edi
c0003bf9:	e8 76 e7 ff ff       	call   c0002374 <move_window>
c0003bfe:	85 c0                	test   eax,eax
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	75 30                	jne    c0003c34 <dir_register+0x17e>
c0003c04:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c07:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0c:	31 d2                	xor    edx,edx
c0003c0e:	e8 3d e2 ff ff       	call   c0001e50 <mem_set>
c0003c13:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0003c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003c1f:	e8 17 e2 ff ff       	call   c0001e3b <mem_cpy>
c0003c24:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003c27:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003c2a:	83 e0 18             	and    eax,0x18
c0003c2d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003c30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003c34:	83 c4 2c             	add    esp,0x2c
c0003c37:	89 f0                	mov    eax,esi
c0003c39:	5b                   	pop    ebx
c0003c3a:	5e                   	pop    esi
c0003c3b:	5f                   	pop    edi
c0003c3c:	5d                   	pop    ebp
c0003c3d:	c3                   	ret    

c0003c3e <f_mount>:
c0003c3e:	53                   	push   ebx
c0003c3f:	83 ec 18             	sub    esp,0x18
c0003c42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c46:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c4e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c52:	e8 28 e6 ff ff       	call   c000227f <get_ldnumber>
c0003c57:	89 c2                	mov    edx,eax
c0003c59:	b8 0b 00 00 00       	mov    eax,0xb
c0003c5e:	85 d2                	test   edx,edx
c0003c60:	78 39                	js     c0003c9b <f_mount+0x5d>
c0003c62:	8b 04 95 a0 54 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdab60]
c0003c69:	85 c0                	test   eax,eax
c0003c6b:	74 03                	je     c0003c70 <f_mount+0x32>
c0003c6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 03                	je     c0003c7b <f_mount+0x3d>
c0003c78:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c7f:	89 04 95 a0 54 02 c0 	mov    DWORD PTR [edx*4-0x3ffdab60],eax
c0003c86:	31 c0                	xor    eax,eax
c0003c88:	84 db                	test   bl,bl
c0003c8a:	74 0f                	je     c0003c9b <f_mount+0x5d>
c0003c8c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c90:	31 c9                	xor    ecx,ecx
c0003c92:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c96:	e8 36 e8 ff ff       	call   c00024d1 <mount_volume>
c0003c9b:	83 c4 18             	add    esp,0x18
c0003c9e:	5b                   	pop    ebx
c0003c9f:	c3                   	ret    

c0003ca0 <f_open>:
c0003ca0:	55                   	push   ebp
c0003ca1:	b8 09 00 00 00       	mov    eax,0x9
c0003ca6:	57                   	push   edi
c0003ca7:	56                   	push   esi
c0003ca8:	53                   	push   ebx
c0003ca9:	83 ec 5c             	sub    esp,0x5c
c0003cac:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003cb0:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003cb4:	85 db                	test   ebx,ebx
c0003cb6:	0f 84 9f 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003cbc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003cc0:	89 fd                	mov    ebp,edi
c0003cc2:	83 e5 3f             	and    ebp,0x3f
c0003cc5:	89 e8                	mov    eax,ebp
c0003cc7:	89 ee                	mov    esi,ebp
c0003cc9:	0f b6 c8             	movzx  ecx,al
c0003ccc:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003cd0:	e8 fc e7 ff ff       	call   c00024d1 <mount_volume>
c0003cd5:	85 c0                	test   eax,eax
c0003cd7:	0f 85 78 02 00 00    	jne    c0003f55 <f_open+0x2b5>
c0003cdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ce1:	83 ec 0c             	sub    esp,0xc
c0003ce4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ce8:	68 00 02 00 00       	push   0x200
c0003ced:	e8 62 1f 00 00       	call   c0005c54 <ff_memalloc>
c0003cf2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cf6:	83 c4 10             	add    esp,0x10
c0003cf9:	b8 11 00 00 00       	mov    eax,0x11
c0003cfe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003d03:	0f 84 52 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003d09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003d11:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003d15:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003d18:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d1c:	e8 f8 fc ff ff       	call   c0003a19 <follow_path>
c0003d21:	85 c0                	test   eax,eax
c0003d23:	75 0d                	jne    c0003d32 <f_open+0x92>
c0003d25:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003d2a:	ba 06 00 00 00       	mov    edx,0x6
c0003d2f:	0f 45 c2             	cmovne eax,edx
c0003d32:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003d38:	0f 84 d5 00 00 00    	je     c0003e13 <f_open+0x173>
c0003d3e:	85 c0                	test   eax,eax
c0003d40:	74 21                	je     c0003d63 <f_open+0xc3>
c0003d42:	83 f8 04             	cmp    eax,0x4
c0003d45:	0f 85 ef 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d4b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d4f:	e8 62 fd ff ff       	call   c0003ab6 <dir_register>
c0003d54:	85 c0                	test   eax,eax
c0003d56:	0f 85 de 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d5c:	83 cd 08             	or     ebp,0x8
c0003d5f:	89 ee                	mov    esi,ebp
c0003d61:	eb 2c                	jmp    c0003d8f <f_open+0xef>
c0003d63:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d67:	b8 07 00 00 00       	mov    eax,0x7
c0003d6c:	80 e2 11             	and    dl,0x11
c0003d6f:	0f 85 c5 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d75:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d7b:	b8 08 00 00 00       	mov    eax,0x8
c0003d80:	0f 85 b4 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d86:	83 e7 08             	and    edi,0x8
c0003d89:	0f 84 b1 00 00 00    	je     c0003e40 <f_open+0x1a0>
c0003d8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d93:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d97:	8a 00                	mov    al,BYTE PTR [eax]
c0003d99:	89 ea                	mov    edx,ebp
c0003d9b:	e8 60 f4 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003da0:	ba 00 00 21 50       	mov    edx,0x50210000
c0003da5:	89 c7                	mov    edi,eax
c0003da7:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003daa:	e8 89 e0 ff ff       	call   c0001e38 <st_dword>
c0003daf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003db3:	31 c9                	xor    ecx,ecx
c0003db5:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003db9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003dc1:	e8 63 f4 ff ff       	call   c0003229 <st_clust.isra.1>
c0003dc6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003dca:	31 d2                	xor    edx,edx
c0003dcc:	83 c0 1c             	add    eax,0x1c
c0003dcf:	e8 64 e0 ff ff       	call   c0001e38 <st_dword>
c0003dd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dd8:	85 ff                	test   edi,edi
c0003dda:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003dde:	74 60                	je     c0003e40 <f_open+0x1a0>
c0003de0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003de4:	31 c9                	xor    ecx,ecx
c0003de6:	89 fa                	mov    edx,edi
c0003de8:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003deb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003def:	e8 64 f7 ff ff       	call   c0003558 <remove_chain>
c0003df4:	85 c0                	test   eax,eax
c0003df6:	0f 85 3e 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e00:	89 ea                	mov    edx,ebp
c0003e02:	4f                   	dec    edi
c0003e03:	e8 6c e5 ff ff       	call   c0002374 <move_window>
c0003e08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003e0c:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003e0f:	85 c0                	test   eax,eax
c0003e11:	eb 27                	jmp    c0003e3a <f_open+0x19a>
c0003e13:	85 c0                	test   eax,eax
c0003e15:	0f 85 1f 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e1b:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003e1f:	b8 04 00 00 00       	mov    eax,0x4
c0003e24:	f6 c2 10             	test   dl,0x10
c0003e27:	0f 85 0d 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e2d:	83 e7 02             	and    edi,0x2
c0003e30:	74 0e                	je     c0003e40 <f_open+0x1a0>
c0003e32:	b8 07 00 00 00       	mov    eax,0x7
c0003e37:	80 e2 01             	and    dl,0x1
c0003e3a:	0f 85 fa 00 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e40:	f7 c6 08 00 00 00    	test   esi,0x8
c0003e46:	74 03                	je     c0003e4b <f_open+0x1ab>
c0003e48:	83 ce 40             	or     esi,0x40
c0003e4b:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e4f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e53:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e56:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e59:	89 fa                	mov    edx,edi
c0003e5b:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e5e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e61:	e8 9a f3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003e66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e69:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e6c:	e8 ab df ff ff       	call   c0001e1c <ld_dword>
c0003e71:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e74:	31 d2                	xor    edx,edx
c0003e76:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e78:	b9 00 02 00 00       	mov    ecx,0x200
c0003e7d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e80:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e84:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e88:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e8f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e96:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e9a:	89 f0                	mov    eax,esi
c0003e9c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e9f:	89 f8                	mov    eax,edi
c0003ea1:	e8 aa df ff ff       	call   c0001e50 <mem_set>
c0003ea6:	83 e6 20             	and    esi,0x20
c0003ea9:	75 07                	jne    c0003eb2 <f_open+0x212>
c0003eab:	31 c0                	xor    eax,eax
c0003ead:	e9 88 00 00 00       	jmp    c0003f3a <f_open+0x29a>
c0003eb2:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0003eb5:	85 f6                	test   esi,esi
c0003eb7:	74 f2                	je     c0003eab <f_open+0x20b>
c0003eb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003ebc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003ec3:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0003ec7:	31 c0                	xor    eax,eax
c0003ec9:	c1 e5 09             	shl    ebp,0x9
c0003ecc:	85 c0                	test   eax,eax
c0003ece:	75 23                	jne    c0003ef3 <f_open+0x253>
c0003ed0:	39 ee                	cmp    esi,ebp
c0003ed2:	76 1f                	jbe    c0003ef3 <f_open+0x253>
c0003ed4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ed6:	e8 76 f3 ff ff       	call   c0003251 <get_fat.isra.2>
c0003edb:	89 c2                	mov    edx,eax
c0003edd:	b8 02 00 00 00       	mov    eax,0x2
c0003ee2:	83 fa 01             	cmp    edx,0x1
c0003ee5:	76 08                	jbe    c0003eef <f_open+0x24f>
c0003ee7:	31 c0                	xor    eax,eax
c0003ee9:	83 fa ff             	cmp    edx,0xffffffff
c0003eec:	0f 94 c0             	sete   al
c0003eef:	29 ee                	sub    esi,ebp
c0003ef1:	eb d9                	jmp    c0003ecc <f_open+0x22c>
c0003ef3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	75 40                	jne    c0003f3a <f_open+0x29a>
c0003efa:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0003f00:	74 a9                	je     c0003eab <f_open+0x20b>
c0003f02:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003f06:	89 e8                	mov    eax,ebp
c0003f08:	e8 58 e1 ff ff       	call   c0002065 <clst2sect>
c0003f0d:	89 c2                	mov    edx,eax
c0003f0f:	b8 02 00 00 00       	mov    eax,0x2
c0003f14:	85 d2                	test   edx,edx
c0003f16:	74 22                	je     c0003f3a <f_open+0x29a>
c0003f18:	c1 ee 09             	shr    esi,0x9
c0003f1b:	8d 04 16             	lea    eax,[esi+edx*1]
c0003f1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003f21:	6a 01                	push   0x1
c0003f23:	50                   	push   eax
c0003f24:	57                   	push   edi
c0003f25:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0003f29:	50                   	push   eax
c0003f2a:	e8 95 de ff ff       	call   c0001dc4 <disk_read>
c0003f2f:	83 c4 10             	add    esp,0x10
c0003f32:	85 c0                	test   eax,eax
c0003f34:	0f 95 c0             	setne  al
c0003f37:	0f b6 c0             	movzx  eax,al
c0003f3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f3e:	83 ec 0c             	sub    esp,0xc
c0003f41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003f45:	e8 22 1d 00 00       	call   c0005c6c <ff_memfree>
c0003f4a:	83 c4 10             	add    esp,0x10
c0003f4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f51:	85 c0                	test   eax,eax
c0003f53:	74 06                	je     c0003f5b <f_open+0x2bb>
c0003f55:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f5b:	83 c4 5c             	add    esp,0x5c
c0003f5e:	5b                   	pop    ebx
c0003f5f:	5e                   	pop    esi
c0003f60:	5f                   	pop    edi
c0003f61:	5d                   	pop    ebp
c0003f62:	c3                   	ret    

c0003f63 <f_read>:
c0003f63:	55                   	push   ebp
c0003f64:	57                   	push   edi
c0003f65:	56                   	push   esi
c0003f66:	53                   	push   ebx
c0003f67:	83 ec 2c             	sub    esp,0x2c
c0003f6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f6e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f72:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f76:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0003f7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f80:	89 d8                	mov    eax,ebx
c0003f82:	e8 44 e3 ff ff       	call   c00022cb <validate>
c0003f87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f8b:	85 c0                	test   eax,eax
c0003f8d:	0f 85 a5 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003f93:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0003f97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f9b:	85 c0                	test   eax,eax
c0003f9d:	0f 85 95 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003fa3:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003fa7:	0f 84 83 01 00 00    	je     c0004130 <f_read+0x1cd>
c0003fad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003fb0:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003fb3:	39 f8                	cmp    eax,edi
c0003fb5:	0f 46 f8             	cmovbe edi,eax
c0003fb8:	85 ff                	test   edi,edi
c0003fba:	0f 84 78 01 00 00    	je     c0004138 <f_read+0x1d5>
c0003fc0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fc3:	a9 ff 01 00 00       	test   eax,0x1ff
c0003fc8:	0f 85 2b 01 00 00    	jne    c00040f9 <f_read+0x196>
c0003fce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fd2:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0003fd6:	89 c2                	mov    edx,eax
c0003fd8:	c1 ea 09             	shr    edx,0x9
c0003fdb:	4d                   	dec    ebp
c0003fdc:	21 d5                	and    ebp,edx
c0003fde:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0003fe2:	75 42                	jne    c0004026 <f_read+0xc3>
c0003fe4:	85 c0                	test   eax,eax
c0003fe6:	75 05                	jne    c0003fed <f_read+0x8a>
c0003fe8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003feb:	eb 0a                	jmp    c0003ff7 <f_read+0x94>
c0003fed:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ff0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ff2:	e8 5a f2 ff ff       	call   c0003251 <get_fat.isra.2>
c0003ff7:	83 f8 01             	cmp    eax,0x1
c0003ffa:	77 11                	ja     c000400d <f_read+0xaa>
c0003ffc:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004000:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c0004008:	e9 2b 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c000400d:	83 f8 ff             	cmp    eax,0xffffffff
c0004010:	75 11                	jne    c0004023 <f_read+0xc0>
c0004012:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004016:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000401e:	e9 15 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c0004023:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004026:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000402a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000402d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004031:	89 c8                	mov    eax,ecx
c0004033:	e8 2d e0 ff ff       	call   c0002065 <clst2sect>
c0004038:	85 c0                	test   eax,eax
c000403a:	74 c0                	je     c0003ffc <f_read+0x99>
c000403c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004040:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004046:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0004049:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000404d:	76 58                	jbe    c00040a7 <f_read+0x144>
c000404f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004053:	89 fe                	mov    esi,edi
c0004055:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004059:	c1 ee 09             	shr    esi,0x9
c000405c:	01 f2                	add    edx,esi
c000405e:	39 c2                	cmp    edx,eax
c0004060:	76 06                	jbe    c0004068 <f_read+0x105>
c0004062:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004066:	89 c6                	mov    esi,eax
c0004068:	56                   	push   esi
c0004069:	55                   	push   ebp
c000406a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000406e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004072:	50                   	push   eax
c0004073:	e8 4c dd ff ff       	call   c0001dc4 <disk_read>
c0004078:	83 c4 10             	add    esp,0x10
c000407b:	85 c0                	test   eax,eax
c000407d:	75 93                	jne    c0004012 <f_read+0xaf>
c000407f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004083:	74 1d                	je     c00040a2 <f_read+0x13f>
c0004085:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004088:	29 e8                	sub    eax,ebp
c000408a:	39 f0                	cmp    eax,esi
c000408c:	73 14                	jae    c00040a2 <f_read+0x13f>
c000408e:	c1 e0 09             	shl    eax,0x9
c0004091:	b9 00 02 00 00       	mov    ecx,0x200
c0004096:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000409a:	8d 53 28             	lea    edx,[ebx+0x28]
c000409d:	e8 99 dd ff ff       	call   c0001e3b <mem_cpy>
c00040a2:	c1 e6 09             	shl    esi,0x9
c00040a5:	eb 75                	jmp    c000411c <f_read+0x1b9>
c00040a7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00040aa:	39 e8                	cmp    eax,ebp
c00040ac:	74 48                	je     c00040f6 <f_read+0x193>
c00040ae:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040b2:	8d 73 28             	lea    esi,[ebx+0x28]
c00040b5:	74 22                	je     c00040d9 <f_read+0x176>
c00040b7:	6a 01                	push   0x1
c00040b9:	50                   	push   eax
c00040ba:	56                   	push   esi
c00040bb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040bf:	50                   	push   eax
c00040c0:	e8 15 dd ff ff       	call   c0001dda <disk_write>
c00040c5:	83 c4 10             	add    esp,0x10
c00040c8:	85 c0                	test   eax,eax
c00040ca:	0f 85 42 ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040d0:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040d3:	83 e0 7f             	and    eax,0x7f
c00040d6:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040d9:	6a 01                	push   0x1
c00040db:	55                   	push   ebp
c00040dc:	56                   	push   esi
c00040dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040e5:	50                   	push   eax
c00040e6:	e8 d9 dc ff ff       	call   c0001dc4 <disk_read>
c00040eb:	83 c4 10             	add    esp,0x10
c00040ee:	85 c0                	test   eax,eax
c00040f0:	0f 85 1c ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040f6:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00040f9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040fc:	be 00 02 00 00       	mov    esi,0x200
c0004101:	25 ff 01 00 00       	and    eax,0x1ff
c0004106:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c000410a:	29 c6                	sub    esi,eax
c000410c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004110:	39 f7                	cmp    edi,esi
c0004112:	0f 46 f7             	cmovbe esi,edi
c0004115:	89 f1                	mov    ecx,esi
c0004117:	e8 1f dd ff ff       	call   c0001e3b <mem_cpy>
c000411c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004120:	29 f7                	sub    edi,esi
c0004122:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004126:	01 30                	add    DWORD PTR [eax],esi
c0004128:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000412b:	e9 88 fe ff ff       	jmp    c0003fb8 <f_read+0x55>
c0004130:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000413c:	83 c4 2c             	add    esp,0x2c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_write>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 67 e1 ff ff       	call   c00022cb <validate>
c0004164:	85 c0                	test   eax,eax
c0004166:	89 c7                	mov    edi,eax
c0004168:	0f 85 13 02 00 00    	jne    c0004381 <f_write+0x23d>
c000416e:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004172:	85 ff                	test   edi,edi
c0004174:	0f 85 07 02 00 00    	jne    c0004381 <f_write+0x23d>
c000417a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000417e:	0f 84 f8 01 00 00    	je     c000437c <f_write+0x238>
c0004184:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004187:	89 c1                	mov    ecx,eax
c0004189:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000418d:	0f 83 ed 00 00 00    	jae    c0004280 <f_write+0x13c>
c0004193:	f7 d0                	not    eax
c0004195:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004199:	e9 e2 00 00 00       	jmp    c0004280 <f_write+0x13c>
c000419e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a1:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a6:	0f 85 9b 01 00 00    	jne    c0004347 <f_write+0x203>
c00041ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b0:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b4:	89 c2                	mov    edx,eax
c00041b6:	c1 ea 09             	shr    edx,0x9
c00041b9:	4d                   	dec    ebp
c00041ba:	21 d5                	and    ebp,edx
c00041bc:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c0:	0f 84 c7 00 00 00    	je     c000428d <f_write+0x149>
c00041c6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041ca:	0f 85 23 01 00 00    	jne    c00042f3 <f_write+0x1af>
c00041d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041db:	89 c8                	mov    eax,ecx
c00041dd:	e8 83 de ff ff       	call   c0002065 <clst2sect>
c00041e2:	85 c0                	test   eax,eax
c00041e4:	0f 84 d3 00 00 00    	je     c00042bd <f_write+0x179>
c00041ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ee:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041f6:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00041f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041fd:	0f 86 1c 01 00 00    	jbe    c000431f <f_write+0x1db>
c0004203:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004207:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000420b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000420f:	c1 ee 09             	shr    esi,0x9
c0004212:	01 f2                	add    edx,esi
c0004214:	39 c2                	cmp    edx,eax
c0004216:	76 06                	jbe    c000421e <f_write+0xda>
c0004218:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000421c:	89 c6                	mov    esi,eax
c000421e:	56                   	push   esi
c000421f:	55                   	push   ebp
c0004220:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004224:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004228:	50                   	push   eax
c0004229:	e8 ac db ff ff       	call   c0001dda <disk_write>
c000422e:	83 c4 10             	add    esp,0x10
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 97 00 00 00    	jne    c00042d0 <f_write+0x18c>
c0004239:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000423c:	29 ea                	sub    edx,ebp
c000423e:	39 f2                	cmp    edx,esi
c0004240:	73 1d                	jae    c000425f <f_write+0x11b>
c0004242:	c1 e2 09             	shl    edx,0x9
c0004245:	b9 00 02 00 00       	mov    ecx,0x200
c000424a:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000424e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004251:	e8 e5 db ff ff       	call   c0001e3b <mem_cpy>
c0004256:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004259:	83 e0 7f             	and    eax,0x7f
c000425c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000425f:	c1 e6 09             	shl    esi,0x9
c0004262:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004266:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000426a:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000426e:	01 30                	add    DWORD PTR [eax],esi
c0004270:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004273:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004276:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004279:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000427d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004280:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004285:	0f 85 13 ff ff ff    	jne    c000419e <f_write+0x5a>
c000428b:	eb 1d                	jmp    c00042aa <f_write+0x166>
c000428d:	85 c0                	test   eax,eax
c000428f:	75 0b                	jne    c000429c <f_write+0x158>
c0004291:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004294:	31 d2                	xor    edx,edx
c0004296:	85 c0                	test   eax,eax
c0004298:	75 1e                	jne    c00042b8 <f_write+0x174>
c000429a:	eb 03                	jmp    c000429f <f_write+0x15b>
c000429c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000429f:	89 d8                	mov    eax,ebx
c00042a1:	e8 78 f1 ff ff       	call   c000341e <create_chain>
c00042a6:	85 c0                	test   eax,eax
c00042a8:	75 0e                	jne    c00042b8 <f_write+0x174>
c00042aa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ad:	83 c8 40             	or     eax,0x40
c00042b0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042b3:	e9 c9 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042b8:	83 f8 01             	cmp    eax,0x1
c00042bb:	75 0e                	jne    c00042cb <f_write+0x187>
c00042bd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00042c1:	bf 02 00 00 00       	mov    edi,0x2
c00042c6:	e9 b6 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042cb:	83 f8 ff             	cmp    eax,0xffffffff
c00042ce:	75 0e                	jne    c00042de <f_write+0x19a>
c00042d0:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042d4:	bf 01 00 00 00       	mov    edi,0x1
c00042d9:	e9 a3 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042de:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042e2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042e5:	0f 85 db fe ff ff    	jne    c00041c6 <f_write+0x82>
c00042eb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042ee:	e9 d3 fe ff ff       	jmp    c00041c6 <f_write+0x82>
c00042f3:	6a 01                	push   0x1
c00042f5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042f8:	8d 43 28             	lea    eax,[ebx+0x28]
c00042fb:	50                   	push   eax
c00042fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004300:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004304:	50                   	push   eax
c0004305:	e8 d0 da ff ff       	call   c0001dda <disk_write>
c000430a:	83 c4 10             	add    esp,0x10
c000430d:	85 c0                	test   eax,eax
c000430f:	75 bf                	jne    c00042d0 <f_write+0x18c>
c0004311:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004314:	83 e0 7f             	and    eax,0x7f
c0004317:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000431a:	e9 b1 fe ff ff       	jmp    c00041d0 <f_write+0x8c>
c000431f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004322:	74 20                	je     c0004344 <f_write+0x200>
c0004324:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004327:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000432a:	76 18                	jbe    c0004344 <f_write+0x200>
c000432c:	6a 01                	push   0x1
c000432e:	55                   	push   ebp
c000432f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004332:	50                   	push   eax
c0004333:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004337:	50                   	push   eax
c0004338:	e8 87 da ff ff       	call   c0001dc4 <disk_read>
c000433d:	83 c4 10             	add    esp,0x10
c0004340:	85 c0                	test   eax,eax
c0004342:	75 8c                	jne    c00042d0 <f_write+0x18c>
c0004344:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004347:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000434a:	be 00 02 00 00       	mov    esi,0x200
c000434f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004353:	25 ff 01 00 00       	and    eax,0x1ff
c0004358:	29 c6                	sub    esi,eax
c000435a:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000435e:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004362:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004367:	89 f1                	mov    ecx,esi
c0004369:	e8 cd da ff ff       	call   c0001e3b <mem_cpy>
c000436e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004371:	83 c8 80             	or     eax,0xffffff80
c0004374:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004377:	e9 e6 fe ff ff       	jmp    c0004262 <f_write+0x11e>
c000437c:	bf 07 00 00 00       	mov    edi,0x7
c0004381:	83 c4 2c             	add    esp,0x2c
c0004384:	89 f8                	mov    eax,edi
c0004386:	5b                   	pop    ebx
c0004387:	5e                   	pop    esi
c0004388:	5f                   	pop    edi
c0004389:	5d                   	pop    ebp
c000438a:	c3                   	ret    

c000438b <f_sync>:
c000438b:	56                   	push   esi
c000438c:	53                   	push   ebx
c000438d:	83 ec 14             	sub    esp,0x14
c0004390:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004394:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004398:	89 d8                	mov    eax,ebx
c000439a:	e8 2c df ff ff       	call   c00022cb <validate>
c000439f:	85 c0                	test   eax,eax
c00043a1:	0f 85 a3 00 00 00    	jne    c000444a <f_sync+0xbf>
c00043a7:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00043aa:	f6 c2 40             	test   dl,0x40
c00043ad:	0f 84 97 00 00 00    	je     c000444a <f_sync+0xbf>
c00043b3:	80 e2 80             	and    dl,0x80
c00043b6:	74 2e                	je     c00043e6 <f_sync+0x5b>
c00043b8:	6a 01                	push   0x1
c00043ba:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00043bd:	8d 43 28             	lea    eax,[ebx+0x28]
c00043c0:	50                   	push   eax
c00043c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043c5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043c9:	50                   	push   eax
c00043ca:	e8 0b da ff ff       	call   c0001dda <disk_write>
c00043cf:	83 c4 10             	add    esp,0x10
c00043d2:	89 c2                	mov    edx,eax
c00043d4:	b8 01 00 00 00       	mov    eax,0x1
c00043d9:	85 d2                	test   edx,edx
c00043db:	75 6d                	jne    c000444a <f_sync+0xbf>
c00043dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043e0:	83 e0 7f             	and    eax,0x7f
c00043e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043e6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043ed:	e8 82 df ff ff       	call   c0002374 <move_window>
c00043f2:	85 c0                	test   eax,eax
c00043f4:	75 54                	jne    c000444a <f_sync+0xbf>
c00043f6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043f9:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043fc:	89 f2                	mov    edx,esi
c00043fe:	83 c8 20             	or     eax,0x20
c0004401:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004404:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0004407:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004409:	e8 1b ee ff ff       	call   c0003229 <st_clust.isra.1>
c000440e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004411:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004414:	e8 1f da ff ff       	call   c0001e38 <st_dword>
c0004419:	8d 46 16             	lea    eax,[esi+0x16]
c000441c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004421:	e8 12 da ff ff       	call   c0001e38 <st_dword>
c0004426:	8d 46 12             	lea    eax,[esi+0x12]
c0004429:	31 d2                	xor    edx,edx
c000442b:	e8 04 da ff ff       	call   c0001e34 <st_word>
c0004430:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004434:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004438:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000443c:	e8 68 e9 ff ff       	call   c0002da9 <sync_fs>
c0004441:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004444:	83 e2 bf             	and    edx,0xffffffbf
c0004447:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000444a:	83 c4 14             	add    esp,0x14
c000444d:	5b                   	pop    ebx
c000444e:	5e                   	pop    esi
c000444f:	c3                   	ret    

c0004450 <f_close>:
c0004450:	53                   	push   ebx
c0004451:	83 ec 24             	sub    esp,0x24
c0004454:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004458:	53                   	push   ebx
c0004459:	e8 2d ff ff ff       	call   c000438b <f_sync>
c000445e:	83 c4 10             	add    esp,0x10
c0004461:	85 c0                	test   eax,eax
c0004463:	75 15                	jne    c000447a <f_close+0x2a>
c0004465:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004469:	89 d8                	mov    eax,ebx
c000446b:	e8 5b de ff ff       	call   c00022cb <validate>
c0004470:	85 c0                	test   eax,eax
c0004472:	75 06                	jne    c000447a <f_close+0x2a>
c0004474:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000447a:	83 c4 18             	add    esp,0x18
c000447d:	5b                   	pop    ebx
c000447e:	c3                   	ret    

c000447f <f_lseek>:
c000447f:	55                   	push   ebp
c0004480:	57                   	push   edi
c0004481:	56                   	push   esi
c0004482:	53                   	push   ebx
c0004483:	83 ec 2c             	sub    esp,0x2c
c0004486:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000448a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000448e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004492:	89 d8                	mov    eax,ebx
c0004494:	e8 32 de ff ff       	call   c00022cb <validate>
c0004499:	85 c0                	test   eax,eax
c000449b:	89 c5                	mov    ebp,eax
c000449d:	0f 85 82 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044a3:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00044a7:	85 ed                	test   ebp,ebp
c00044a9:	0f 85 76 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044af:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00044b2:	39 f0                	cmp    eax,esi
c00044b4:	73 07                	jae    c00044bd <f_lseek+0x3e>
c00044b6:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044ba:	0f 44 f0             	cmove  esi,eax
c00044bd:	85 f6                	test   esi,esi
c00044bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00044c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044c9:	75 07                	jne    c00044d2 <f_lseek+0x53>
c00044cb:	31 f6                	xor    esi,esi
c00044cd:	e9 e2 00 00 00       	jmp    c00045b4 <f_lseek+0x135>
c00044d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d6:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044da:	c1 e7 09             	shl    edi,0x9
c00044dd:	85 c9                	test   ecx,ecx
c00044df:	74 28                	je     c0004509 <f_lseek+0x8a>
c00044e1:	31 d2                	xor    edx,edx
c00044e3:	49                   	dec    ecx
c00044e4:	8d 46 ff             	lea    eax,[esi-0x1]
c00044e7:	f7 f7                	div    edi
c00044e9:	31 d2                	xor    edx,edx
c00044eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044ef:	89 c8                	mov    eax,ecx
c00044f1:	f7 f7                	div    edi
c00044f3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044f7:	72 10                	jb     c0004509 <f_lseek+0x8a>
c00044f9:	89 f8                	mov    eax,edi
c00044fb:	f7 d8                	neg    eax
c00044fd:	21 c1                	and    ecx,eax
c00044ff:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004502:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004505:	29 ce                	sub    esi,ecx
c0004507:	eb 3c                	jmp    c0004545 <f_lseek+0xc6>
c0004509:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000450c:	85 c0                	test   eax,eax
c000450e:	75 32                	jne    c0004542 <f_lseek+0xc3>
c0004510:	31 d2                	xor    edx,edx
c0004512:	89 d8                	mov    eax,ebx
c0004514:	e8 05 ef ff ff       	call   c000341e <create_chain>
c0004519:	83 f8 01             	cmp    eax,0x1
c000451c:	75 0e                	jne    c000452c <f_lseek+0xad>
c000451e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004522:	bd 02 00 00 00       	mov    ebp,0x2
c0004527:	e9 f9 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000452c:	83 f8 ff             	cmp    eax,0xffffffff
c000452f:	75 0e                	jne    c000453f <f_lseek+0xc0>
c0004531:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004535:	bd 01 00 00 00       	mov    ebp,0x1
c000453a:	e9 e6 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000453f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004542:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004545:	85 c0                	test   eax,eax
c0004547:	74 82                	je     c00044cb <f_lseek+0x4c>
c0004549:	39 fe                	cmp    esi,edi
c000454b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000454e:	76 3d                	jbe    c000458d <f_lseek+0x10e>
c0004550:	01 fa                	add    edx,edi
c0004552:	29 fe                	sub    esi,edi
c0004554:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004558:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000455b:	89 c2                	mov    edx,eax
c000455d:	74 0d                	je     c000456c <f_lseek+0xed>
c000455f:	89 d8                	mov    eax,ebx
c0004561:	e8 b8 ee ff ff       	call   c000341e <create_chain>
c0004566:	85 c0                	test   eax,eax
c0004568:	75 09                	jne    c0004573 <f_lseek+0xf4>
c000456a:	eb 1f                	jmp    c000458b <f_lseek+0x10c>
c000456c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000456e:	e8 de ec ff ff       	call   c0003251 <get_fat.isra.2>
c0004573:	83 f8 ff             	cmp    eax,0xffffffff
c0004576:	74 b9                	je     c0004531 <f_lseek+0xb2>
c0004578:	83 f8 01             	cmp    eax,0x1
c000457b:	76 a1                	jbe    c000451e <f_lseek+0x9f>
c000457d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004581:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004584:	76 98                	jbe    c000451e <f_lseek+0x9f>
c0004586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004589:	eb be                	jmp    c0004549 <f_lseek+0xca>
c000458b:	31 f6                	xor    esi,esi
c000458d:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004590:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004596:	0f 84 2f ff ff ff    	je     c00044cb <f_lseek+0x4c>
c000459c:	89 c2                	mov    edx,eax
c000459e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045a2:	e8 be da ff ff       	call   c0002065 <clst2sect>
c00045a7:	85 c0                	test   eax,eax
c00045a9:	0f 84 6f ff ff ff    	je     c000451e <f_lseek+0x9f>
c00045af:	c1 ee 09             	shr    esi,0x9
c00045b2:	01 c6                	add    esi,eax
c00045b4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00045b7:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00045ba:	76 0c                	jbe    c00045c8 <f_lseek+0x149>
c00045bc:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00045bf:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00045c2:	83 ca 40             	or     edx,0x40
c00045c5:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045c8:	a9 ff 01 00 00       	test   eax,0x1ff
c00045cd:	74 56                	je     c0004625 <f_lseek+0x1a6>
c00045cf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045d2:	39 f0                	cmp    eax,esi
c00045d4:	74 4f                	je     c0004625 <f_lseek+0x1a6>
c00045d6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045da:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045dd:	74 26                	je     c0004605 <f_lseek+0x186>
c00045df:	6a 01                	push   0x1
c00045e1:	50                   	push   eax
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 e9 d7 ff ff       	call   c0001dda <disk_write>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 35 ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c00045fc:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045ff:	83 e0 7f             	and    eax,0x7f
c0004602:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004605:	6a 01                	push   0x1
c0004607:	56                   	push   esi
c0004608:	57                   	push   edi
c0004609:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000460d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004611:	50                   	push   eax
c0004612:	e8 ad d7 ff ff       	call   c0001dc4 <disk_read>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	85 c0                	test   eax,eax
c000461c:	0f 85 0f ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c0004622:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004625:	83 c4 2c             	add    esp,0x2c
c0004628:	89 e8                	mov    eax,ebp
c000462a:	5b                   	pop    ebx
c000462b:	5e                   	pop    esi
c000462c:	5f                   	pop    edi
c000462d:	5d                   	pop    ebp
c000462e:	c3                   	ret    

c000462f <f_opendir>:
c000462f:	56                   	push   esi
c0004630:	b8 09 00 00 00       	mov    eax,0x9
c0004635:	53                   	push   ebx
c0004636:	83 ec 24             	sub    esp,0x24
c0004639:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000463d:	85 db                	test   ebx,ebx
c000463f:	0f 84 af 00 00 00    	je     c00046f4 <f_opendir+0xc5>
c0004645:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004649:	31 c9                	xor    ecx,ecx
c000464b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000464f:	e8 7d de ff ff       	call   c00024d1 <mount_volume>
c0004654:	85 c0                	test   eax,eax
c0004656:	0f 85 92 00 00 00    	jne    c00046ee <f_opendir+0xbf>
c000465c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004660:	83 ec 0c             	sub    esp,0xc
c0004663:	89 03                	mov    DWORD PTR [ebx],eax
c0004665:	68 00 02 00 00       	push   0x200
c000466a:	e8 e5 15 00 00       	call   c0005c54 <ff_memalloc>
c000466f:	83 c4 10             	add    esp,0x10
c0004672:	89 c6                	mov    esi,eax
c0004674:	b8 11 00 00 00       	mov    eax,0x11
c0004679:	85 f6                	test   esi,esi
c000467b:	74 77                	je     c00046f4 <f_opendir+0xc5>
c000467d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004681:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004685:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004688:	89 d8                	mov    eax,ebx
c000468a:	e8 8a f3 ff ff       	call   c0003a19 <follow_path>
c000468f:	85 c0                	test   eax,eax
c0004691:	75 37                	jne    c00046ca <f_opendir+0x9b>
c0004693:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004697:	75 1c                	jne    c00046b5 <f_opendir+0x86>
c0004699:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000469d:	b8 05 00 00 00       	mov    eax,0x5
c00046a2:	74 26                	je     c00046ca <f_opendir+0x9b>
c00046a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046a8:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00046ab:	8a 00                	mov    al,BYTE PTR [eax]
c00046ad:	e8 4e eb ff ff       	call   c0003200 <ld_clust.isra.0>
c00046b2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00046b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b9:	31 d2                	xor    edx,edx
c00046bb:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00046bf:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00046c3:	89 d8                	mov    eax,ebx
c00046c5:	e8 8c ec ff ff       	call   c0003356 <dir_sdi>
c00046ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046ce:	83 ec 0c             	sub    esp,0xc
c00046d1:	56                   	push   esi
c00046d2:	e8 95 15 00 00       	call   c0005c6c <ff_memfree>
c00046d7:	83 c4 10             	add    esp,0x10
c00046da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046de:	83 f8 04             	cmp    eax,0x4
c00046e1:	74 06                	je     c00046e9 <f_opendir+0xba>
c00046e3:	85 c0                	test   eax,eax
c00046e5:	74 0d                	je     c00046f4 <f_opendir+0xc5>
c00046e7:	eb 05                	jmp    c00046ee <f_opendir+0xbf>
c00046e9:	b8 05 00 00 00       	mov    eax,0x5
c00046ee:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f4:	83 c4 24             	add    esp,0x24
c00046f7:	5b                   	pop    ebx
c00046f8:	5e                   	pop    esi
c00046f9:	c3                   	ret    

c00046fa <f_closedir>:
c00046fa:	53                   	push   ebx
c00046fb:	83 ec 18             	sub    esp,0x18
c00046fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004702:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004706:	89 d8                	mov    eax,ebx
c0004708:	e8 be db ff ff       	call   c00022cb <validate>
c000470d:	85 c0                	test   eax,eax
c000470f:	75 06                	jne    c0004717 <f_closedir+0x1d>
c0004711:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004717:	83 c4 18             	add    esp,0x18
c000471a:	5b                   	pop    ebx
c000471b:	c3                   	ret    

c000471c <f_readdir>:
c000471c:	57                   	push   edi
c000471d:	56                   	push   esi
c000471e:	53                   	push   ebx
c000471f:	83 ec 20             	sub    esp,0x20
c0004722:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004726:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000472a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000472e:	89 d8                	mov    eax,ebx
c0004730:	e8 96 db ff ff       	call   c00022cb <validate>
c0004735:	85 c0                	test   eax,eax
c0004737:	75 6e                	jne    c00047a7 <f_readdir+0x8b>
c0004739:	85 ff                	test   edi,edi
c000473b:	75 0b                	jne    c0004748 <f_readdir+0x2c>
c000473d:	31 d2                	xor    edx,edx
c000473f:	89 d8                	mov    eax,ebx
c0004741:	e8 10 ec ff ff       	call   c0003356 <dir_sdi>
c0004746:	eb 5f                	jmp    c00047a7 <f_readdir+0x8b>
c0004748:	83 ec 0c             	sub    esp,0xc
c000474b:	68 00 02 00 00       	push   0x200
c0004750:	e8 ff 14 00 00       	call   c0005c54 <ff_memalloc>
c0004755:	83 c4 10             	add    esp,0x10
c0004758:	89 c6                	mov    esi,eax
c000475a:	b8 11 00 00 00       	mov    eax,0x11
c000475f:	85 f6                	test   esi,esi
c0004761:	74 44                	je     c00047a7 <f_readdir+0x8b>
c0004763:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004767:	31 d2                	xor    edx,edx
c0004769:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000476c:	89 d8                	mov    eax,ebx
c000476e:	e8 dd ef ff ff       	call   c0003750 <dir_read>
c0004773:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004778:	75 19                	jne    c0004793 <f_readdir+0x77>
c000477a:	89 fa                	mov    edx,edi
c000477c:	89 d8                	mov    eax,ebx
c000477e:	e8 7c e8 ff ff       	call   c0002fff <get_fileinfo>
c0004783:	31 d2                	xor    edx,edx
c0004785:	89 d8                	mov    eax,ebx
c0004787:	e8 5a ee ff ff       	call   c00035e6 <dir_next>
c000478c:	83 f8 04             	cmp    eax,0x4
c000478f:	75 02                	jne    c0004793 <f_readdir+0x77>
c0004791:	31 c0                	xor    eax,eax
c0004793:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004797:	83 ec 0c             	sub    esp,0xc
c000479a:	56                   	push   esi
c000479b:	e8 cc 14 00 00       	call   c0005c6c <ff_memfree>
c00047a0:	83 c4 10             	add    esp,0x10
c00047a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047a7:	83 c4 20             	add    esp,0x20
c00047aa:	5b                   	pop    ebx
c00047ab:	5e                   	pop    esi
c00047ac:	5f                   	pop    edi
c00047ad:	c3                   	ret    

c00047ae <f_stat>:
c00047ae:	57                   	push   edi
c00047af:	31 c9                	xor    ecx,ecx
c00047b1:	56                   	push   esi
c00047b2:	53                   	push   ebx
c00047b3:	83 ec 30             	sub    esp,0x30
c00047b6:	8d 44 24 40          	lea    eax,[esp+0x40]
c00047ba:	89 e2                	mov    edx,esp
c00047bc:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00047c0:	e8 0c dd ff ff       	call   c00024d1 <mount_volume>
c00047c5:	85 c0                	test   eax,eax
c00047c7:	89 c3                	mov    ebx,eax
c00047c9:	75 59                	jne    c0004824 <f_stat+0x76>
c00047cb:	83 ec 0c             	sub    esp,0xc
c00047ce:	bb 11 00 00 00       	mov    ebx,0x11
c00047d3:	68 00 02 00 00       	push   0x200
c00047d8:	e8 77 14 00 00       	call   c0005c54 <ff_memalloc>
c00047dd:	83 c4 10             	add    esp,0x10
c00047e0:	85 c0                	test   eax,eax
c00047e2:	89 c6                	mov    esi,eax
c00047e4:	74 3e                	je     c0004824 <f_stat+0x76>
c00047e6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047e9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047f0:	89 e0                	mov    eax,esp
c00047f2:	e8 22 f2 ff ff       	call   c0003a19 <follow_path>
c00047f7:	85 c0                	test   eax,eax
c00047f9:	89 c3                	mov    ebx,eax
c00047fb:	75 1b                	jne    c0004818 <f_stat+0x6a>
c00047fd:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c0004802:	75 0f                	jne    c0004813 <f_stat+0x65>
c0004804:	85 ff                	test   edi,edi
c0004806:	74 10                	je     c0004818 <f_stat+0x6a>
c0004808:	89 fa                	mov    edx,edi
c000480a:	89 e0                	mov    eax,esp
c000480c:	e8 ee e7 ff ff       	call   c0002fff <get_fileinfo>
c0004811:	eb 05                	jmp    c0004818 <f_stat+0x6a>
c0004813:	bb 06 00 00 00       	mov    ebx,0x6
c0004818:	83 ec 0c             	sub    esp,0xc
c000481b:	56                   	push   esi
c000481c:	e8 4b 14 00 00       	call   c0005c6c <ff_memfree>
c0004821:	83 c4 10             	add    esp,0x10
c0004824:	83 c4 30             	add    esp,0x30
c0004827:	89 d8                	mov    eax,ebx
c0004829:	5b                   	pop    ebx
c000482a:	5e                   	pop    esi
c000482b:	5f                   	pop    edi
c000482c:	c3                   	ret    

c000482d <f_getfree>:
c000482d:	55                   	push   ebp
c000482e:	31 c9                	xor    ecx,ecx
c0004830:	57                   	push   edi
c0004831:	56                   	push   esi
c0004832:	53                   	push   ebx
c0004833:	83 ec 2c             	sub    esp,0x2c
c0004836:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000483a:	8d 44 24 40          	lea    eax,[esp+0x40]
c000483e:	e8 8e dc ff ff       	call   c00024d1 <mount_volume>
c0004843:	85 c0                	test   eax,eax
c0004845:	89 c6                	mov    esi,eax
c0004847:	0f 85 df 00 00 00    	jne    c000492c <f_getfree+0xff>
c000484d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004851:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004855:	89 18                	mov    DWORD PTR [eax],ebx
c0004857:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000485a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000485d:	8d 57 fe             	lea    edx,[edi-0x2]
c0004860:	39 d0                	cmp    eax,edx
c0004862:	77 0b                	ja     c000486f <f_getfree+0x42>
c0004864:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004868:	89 01                	mov    DWORD PTR [ecx],eax
c000486a:	e9 bd 00 00 00       	jmp    c000492c <f_getfree+0xff>
c000486f:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004872:	75 29                	jne    c000489d <f_getfree+0x70>
c0004874:	bf 02 00 00 00       	mov    edi,0x2
c0004879:	31 ed                	xor    ebp,ebp
c000487b:	89 fa                	mov    edx,edi
c000487d:	89 d8                	mov    eax,ebx
c000487f:	e8 cd e9 ff ff       	call   c0003251 <get_fat.isra.2>
c0004884:	83 f8 ff             	cmp    eax,0xffffffff
c0004887:	74 7d                	je     c0004906 <f_getfree+0xd9>
c0004889:	83 f8 01             	cmp    eax,0x1
c000488c:	74 7f                	je     c000490d <f_getfree+0xe0>
c000488e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004892:	83 d5 00             	adc    ebp,0x0
c0004895:	47                   	inc    edi
c0004896:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004899:	77 e0                	ja     c000487b <f_getfree+0x4e>
c000489b:	eb 79                	jmp    c0004916 <f_getfree+0xe9>
c000489d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00048a0:	31 ed                	xor    ebp,ebp
c00048a2:	31 db                	xor    ebx,ebx
c00048a4:	85 db                	test   ebx,ebx
c00048a6:	75 18                	jne    c00048c0 <f_getfree+0x93>
c00048a8:	8d 42 01             	lea    eax,[edx+0x1]
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b3:	e8 bc da ff ff       	call   c0002374 <move_window>
c00048b8:	85 c0                	test   eax,eax
c00048ba:	75 58                	jne    c0004914 <f_getfree+0xe7>
c00048bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00048c8:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048cb:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c00048cf:	75 13                	jne    c00048e4 <f_getfree+0xb7>
c00048d1:	e8 39 d5 ff ff       	call   c0001e0f <ld_word>
c00048d6:	0f b7 c0             	movzx  eax,ax
c00048d9:	83 f8 01             	cmp    eax,0x1
c00048dc:	83 d5 00             	adc    ebp,0x0
c00048df:	83 c3 02             	add    ebx,0x2
c00048e2:	eb 13                	jmp    c00048f7 <f_getfree+0xca>
c00048e4:	e8 33 d5 ff ff       	call   c0001e1c <ld_dword>
c00048e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048ee:	83 f8 01             	cmp    eax,0x1
c00048f1:	83 d5 00             	adc    ebp,0x0
c00048f4:	83 c3 04             	add    ebx,0x4
c00048f7:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00048fd:	4f                   	dec    edi
c00048fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004902:	75 a0                	jne    c00048a4 <f_getfree+0x77>
c0004904:	eb 10                	jmp    c0004916 <f_getfree+0xe9>
c0004906:	be 01 00 00 00       	mov    esi,0x1
c000490b:	eb 09                	jmp    c0004916 <f_getfree+0xe9>
c000490d:	be 02 00 00 00       	mov    esi,0x2
c0004912:	eb 02                	jmp    c0004916 <f_getfree+0xe9>
c0004914:	89 c6                	mov    esi,eax
c0004916:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000491a:	89 28                	mov    DWORD PTR [eax],ebp
c000491c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004920:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004923:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004926:	83 ca 01             	or     edx,0x1
c0004929:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c000492c:	83 c4 2c             	add    esp,0x2c
c000492f:	89 f0                	mov    eax,esi
c0004931:	5b                   	pop    ebx
c0004932:	5e                   	pop    esi
c0004933:	5f                   	pop    edi
c0004934:	5d                   	pop    ebp
c0004935:	c3                   	ret    

c0004936 <f_truncate>:
c0004936:	56                   	push   esi
c0004937:	53                   	push   ebx
c0004938:	83 ec 14             	sub    esp,0x14
c000493b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000493f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004943:	89 d8                	mov    eax,ebx
c0004945:	e8 81 d9 ff ff       	call   c00022cb <validate>
c000494a:	85 c0                	test   eax,eax
c000494c:	89 c6                	mov    esi,eax
c000494e:	0f 85 c4 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004954:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004958:	85 f6                	test   esi,esi
c000495a:	0f 85 b8 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004960:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004964:	0f 84 a9 00 00 00    	je     c0004a13 <f_truncate+0xdd>
c000496a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000496d:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004970:	0f 83 a2 00 00 00    	jae    c0004a18 <f_truncate+0xe2>
c0004976:	85 c0                	test   eax,eax
c0004978:	75 15                	jne    c000498f <f_truncate+0x59>
c000497a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000497d:	31 c9                	xor    ecx,ecx
c000497f:	89 d8                	mov    eax,ebx
c0004981:	e8 d2 eb ff ff       	call   c0003558 <remove_chain>
c0004986:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000498d:	eb 35                	jmp    c00049c4 <f_truncate+0x8e>
c000498f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004994:	e8 b8 e8 ff ff       	call   c0003251 <get_fat.isra.2>
c0004999:	89 c2                	mov    edx,eax
c000499b:	b8 01 00 00 00       	mov    eax,0x1
c00049a0:	83 fa ff             	cmp    edx,0xffffffff
c00049a3:	74 1f                	je     c00049c4 <f_truncate+0x8e>
c00049a5:	83 fa 01             	cmp    edx,0x1
c00049a8:	b8 02 00 00 00       	mov    eax,0x2
c00049ad:	74 15                	je     c00049c4 <f_truncate+0x8e>
c00049af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049b3:	31 c0                	xor    eax,eax
c00049b5:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c00049b8:	76 0a                	jbe    c00049c4 <f_truncate+0x8e>
c00049ba:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c00049bd:	89 d8                	mov    eax,ebx
c00049bf:	e8 94 eb ff ff       	call   c0003558 <remove_chain>
c00049c4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049c7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049ca:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049cd:	83 ca 40             	or     edx,0x40
c00049d0:	85 c0                	test   eax,eax
c00049d2:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049d5:	75 35                	jne    c0004a0c <f_truncate+0xd6>
c00049d7:	80 e2 80             	and    dl,0x80
c00049da:	74 3c                	je     c0004a18 <f_truncate+0xe2>
c00049dc:	6a 01                	push   0x1
c00049de:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049e1:	8d 43 28             	lea    eax,[ebx+0x28]
c00049e4:	50                   	push   eax
c00049e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049e9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049ed:	50                   	push   eax
c00049ee:	e8 e7 d3 ff ff       	call   c0001dda <disk_write>
c00049f3:	83 c4 10             	add    esp,0x10
c00049f6:	85 c0                	test   eax,eax
c00049f8:	75 0d                	jne    c0004a07 <f_truncate+0xd1>
c00049fa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049fd:	31 f6                	xor    esi,esi
c00049ff:	83 e0 7f             	and    eax,0x7f
c0004a02:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004a05:	eb 11                	jmp    c0004a18 <f_truncate+0xe2>
c0004a07:	b8 01 00 00 00       	mov    eax,0x1
c0004a0c:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004a0f:	89 c6                	mov    esi,eax
c0004a11:	eb 05                	jmp    c0004a18 <f_truncate+0xe2>
c0004a13:	be 07 00 00 00       	mov    esi,0x7
c0004a18:	83 c4 14             	add    esp,0x14
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	5b                   	pop    ebx
c0004a1e:	5e                   	pop    esi
c0004a1f:	c3                   	ret    

c0004a20 <f_unlink>:
c0004a20:	55                   	push   ebp
c0004a21:	b9 02 00 00 00       	mov    ecx,0x2
c0004a26:	57                   	push   edi
c0004a27:	56                   	push   esi
c0004a28:	53                   	push   ebx
c0004a29:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a2f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a33:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a3a:	e8 92 da ff ff       	call   c00024d1 <mount_volume>
c0004a3f:	85 c0                	test   eax,eax
c0004a41:	0f 85 ee 00 00 00    	jne    c0004b35 <f_unlink+0x115>
c0004a47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4b:	83 ec 0c             	sub    esp,0xc
c0004a4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a52:	68 00 02 00 00       	push   0x200
c0004a57:	e8 f8 11 00 00       	call   c0005c54 <ff_memalloc>
c0004a5c:	83 c4 10             	add    esp,0x10
c0004a5f:	89 c3                	mov    ebx,eax
c0004a61:	b8 11 00 00 00       	mov    eax,0x11
c0004a66:	85 db                	test   ebx,ebx
c0004a68:	0f 84 c7 00 00 00    	je     c0004b35 <f_unlink+0x115>
c0004a6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a72:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a79:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a7c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a80:	e8 94 ef ff ff       	call   c0003a19 <follow_path>
c0004a85:	85 c0                	test   eax,eax
c0004a87:	0f 85 94 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a8d:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a92:	b8 06 00 00 00       	mov    eax,0x6
c0004a97:	0f 85 84 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a9d:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004aa2:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004aa8:	74 07                	je     c0004ab1 <f_unlink+0x91>
c0004aaa:	b8 07 00 00 00       	mov    eax,0x7
c0004aaf:	eb 70                	jmp    c0004b21 <f_unlink+0x101>
c0004ab1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ab5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ab9:	8a 07                	mov    al,BYTE PTR [edi]
c0004abb:	e8 40 e7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004ac0:	83 e5 10             	and    ebp,0x10
c0004ac3:	89 c6                	mov    esi,eax
c0004ac5:	75 20                	jne    c0004ae7 <f_unlink+0xc7>
c0004ac7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004acb:	e8 a8 ed ff ff       	call   c0003878 <dir_remove>
c0004ad0:	85 c0                	test   eax,eax
c0004ad2:	75 40                	jne    c0004b14 <f_unlink+0xf4>
c0004ad4:	85 f6                	test   esi,esi
c0004ad6:	74 3c                	je     c0004b14 <f_unlink+0xf4>
c0004ad8:	31 c9                	xor    ecx,ecx
c0004ada:	89 f2                	mov    edx,esi
c0004adc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ae0:	e8 73 ea ff ff       	call   c0003558 <remove_chain>
c0004ae5:	eb 2d                	jmp    c0004b14 <f_unlink+0xf4>
c0004ae7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004aeb:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004aef:	31 d2                	xor    edx,edx
c0004af1:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004af5:	e8 5c e8 ff ff       	call   c0003356 <dir_sdi>
c0004afa:	85 c0                	test   eax,eax
c0004afc:	75 23                	jne    c0004b21 <f_unlink+0x101>
c0004afe:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004b02:	31 d2                	xor    edx,edx
c0004b04:	e8 47 ec ff ff       	call   c0003750 <dir_read>
c0004b09:	85 c0                	test   eax,eax
c0004b0b:	74 9d                	je     c0004aaa <f_unlink+0x8a>
c0004b0d:	83 f8 04             	cmp    eax,0x4
c0004b10:	75 0f                	jne    c0004b21 <f_unlink+0x101>
c0004b12:	eb b3                	jmp    c0004ac7 <f_unlink+0xa7>
c0004b14:	85 c0                	test   eax,eax
c0004b16:	75 09                	jne    c0004b21 <f_unlink+0x101>
c0004b18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b1c:	e8 88 e2 ff ff       	call   c0002da9 <sync_fs>
c0004b21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b25:	83 ec 0c             	sub    esp,0xc
c0004b28:	53                   	push   ebx
c0004b29:	e8 3e 11 00 00       	call   c0005c6c <ff_memfree>
c0004b2e:	83 c4 10             	add    esp,0x10
c0004b31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b35:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b3b:	5b                   	pop    ebx
c0004b3c:	5e                   	pop    esi
c0004b3d:	5f                   	pop    edi
c0004b3e:	5d                   	pop    ebp
c0004b3f:	c3                   	ret    

c0004b40 <f_mkdir>:
c0004b40:	57                   	push   edi
c0004b41:	b9 02 00 00 00       	mov    ecx,0x2
c0004b46:	56                   	push   esi
c0004b47:	53                   	push   ebx
c0004b48:	83 ec 50             	sub    esp,0x50
c0004b4b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b4f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b53:	e8 79 d9 ff ff       	call   c00024d1 <mount_volume>
c0004b58:	85 c0                	test   eax,eax
c0004b5a:	89 c3                	mov    ebx,eax
c0004b5c:	0f 85 70 01 00 00    	jne    c0004cd2 <f_mkdir+0x192>
c0004b62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b66:	83 ec 0c             	sub    esp,0xc
c0004b69:	bb 11 00 00 00       	mov    ebx,0x11
c0004b6e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b72:	68 00 02 00 00       	push   0x200
c0004b77:	e8 d8 10 00 00       	call   c0005c54 <ff_memalloc>
c0004b7c:	83 c4 10             	add    esp,0x10
c0004b7f:	85 c0                	test   eax,eax
c0004b81:	89 c7                	mov    edi,eax
c0004b83:	0f 84 49 01 00 00    	je     c0004cd2 <f_mkdir+0x192>
c0004b89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b91:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b98:	e8 7c ee ff ff       	call   c0003a19 <follow_path>
c0004b9d:	85 c0                	test   eax,eax
c0004b9f:	89 c3                	mov    ebx,eax
c0004ba1:	74 3e                	je     c0004be1 <f_mkdir+0xa1>
c0004ba3:	83 f8 04             	cmp    eax,0x4
c0004ba6:	75 3e                	jne    c0004be6 <f_mkdir+0xa6>
c0004ba8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bac:	31 d2                	xor    edx,edx
c0004bae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 63 e8 ff ff       	call   c000341e <create_chain>
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	89 c6                	mov    esi,eax
c0004bbf:	74 0c                	je     c0004bcd <f_mkdir+0x8d>
c0004bc1:	83 f8 01             	cmp    eax,0x1
c0004bc4:	bb 02 00 00 00       	mov    ebx,0x2
c0004bc9:	74 07                	je     c0004bd2 <f_mkdir+0x92>
c0004bcb:	eb 2a                	jmp    c0004bf7 <f_mkdir+0xb7>
c0004bcd:	bb 07 00 00 00       	mov    ebx,0x7
c0004bd2:	31 c9                	xor    ecx,ecx
c0004bd4:	89 f2                	mov    edx,esi
c0004bd6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bda:	e8 79 e9 ff ff       	call   c0003558 <remove_chain>
c0004bdf:	eb 05                	jmp    c0004be6 <f_mkdir+0xa6>
c0004be1:	bb 08 00 00 00       	mov    ebx,0x8
c0004be6:	83 ec 0c             	sub    esp,0xc
c0004be9:	57                   	push   edi
c0004bea:	e8 7d 10 00 00       	call   c0005c6c <ff_memfree>
c0004bef:	83 c4 10             	add    esp,0x10
c0004bf2:	e9 db 00 00 00       	jmp    c0004cd2 <f_mkdir+0x192>
c0004bf7:	83 f8 ff             	cmp    eax,0xffffffff
c0004bfa:	bb 01 00 00 00       	mov    ebx,0x1
c0004bff:	74 d1                	je     c0004bd2 <f_mkdir+0x92>
c0004c01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c05:	89 f2                	mov    edx,esi
c0004c07:	e8 19 dd ff ff       	call   c0002925 <dir_clear>
c0004c0c:	85 c0                	test   eax,eax
c0004c0e:	89 c3                	mov    ebx,eax
c0004c10:	75 c0                	jne    c0004bd2 <f_mkdir+0x92>
c0004c12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0004c1b:	ba 20 00 00 00       	mov    edx,0x20
c0004c20:	83 c0 34             	add    eax,0x34
c0004c23:	e8 28 d2 ff ff       	call   c0001e50 <mem_set>
c0004c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c31:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c35:	83 c0 4a             	add    eax,0x4a
c0004c38:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004c3c:	e8 f7 d1 ff ff       	call   c0001e38 <st_dword>
c0004c41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c45:	89 f1                	mov    ecx,esi
c0004c47:	8d 50 34             	lea    edx,[eax+0x34]
c0004c4a:	e8 da e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c53:	b9 20 00 00 00       	mov    ecx,0x20
c0004c58:	8d 50 34             	lea    edx,[eax+0x34]
c0004c5b:	83 c0 54             	add    eax,0x54
c0004c5e:	e8 d8 d1 ff ff       	call   c0001e3b <mem_cpy>
c0004c63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c67:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c6b:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c6f:	8d 50 54             	lea    edx,[eax+0x54]
c0004c72:	e8 b2 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c7b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c7f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c83:	e8 2e ee ff ff       	call   c0003ab6 <dir_register>
c0004c88:	85 c0                	test   eax,eax
c0004c8a:	89 c3                	mov    ebx,eax
c0004c8c:	0f 85 40 ff ff ff    	jne    c0004bd2 <f_mkdir+0x92>
c0004c92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c96:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c9b:	83 c0 16             	add    eax,0x16
c0004c9e:	e8 95 d1 ff ff       	call   c0001e38 <st_dword>
c0004ca3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ca7:	89 f1                	mov    ecx,esi
c0004ca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cad:	e8 77 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004cb2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004cb6:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004cba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cbe:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cc6:	e8 de e0 ff ff       	call   c0002da9 <sync_fs>
c0004ccb:	89 c3                	mov    ebx,eax
c0004ccd:	e9 14 ff ff ff       	jmp    c0004be6 <f_mkdir+0xa6>
c0004cd2:	83 c4 50             	add    esp,0x50
c0004cd5:	89 d8                	mov    eax,ebx
c0004cd7:	5b                   	pop    ebx
c0004cd8:	5e                   	pop    esi
c0004cd9:	5f                   	pop    edi
c0004cda:	c3                   	ret    

c0004cdb <f_rename>:
c0004cdb:	57                   	push   edi
c0004cdc:	56                   	push   esi
c0004cdd:	53                   	push   ebx
c0004cde:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ce4:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ceb:	e8 8f d5 ff ff       	call   c000227f <get_ldnumber>
c0004cf0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cf4:	b9 02 00 00 00       	mov    ecx,0x2
c0004cf9:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004d00:	e8 cc d7 ff ff       	call   c00024d1 <mount_volume>
c0004d05:	85 c0                	test   eax,eax
c0004d07:	0f 85 7c 01 00 00    	jne    c0004e89 <f_rename+0x1ae>
c0004d0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004d18:	68 00 02 00 00       	push   0x200
c0004d1d:	e8 32 0f 00 00       	call   c0005c54 <ff_memalloc>
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	89 c6                	mov    esi,eax
c0004d27:	b8 11 00 00 00       	mov    eax,0x11
c0004d2c:	85 f6                	test   esi,esi
c0004d2e:	0f 84 55 01 00 00    	je     c0004e89 <f_rename+0x1ae>
c0004d34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d38:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d3f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d42:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d46:	e8 ce ec ff ff       	call   c0003a19 <follow_path>
c0004d4b:	85 c0                	test   eax,eax
c0004d4d:	0f 85 22 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d53:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d57:	b8 06 00 00 00       	mov    eax,0x6
c0004d5c:	80 e2 a0             	and    dl,0xa0
c0004d5f:	0f 85 10 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d65:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d69:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d6d:	b9 20 00 00 00       	mov    ecx,0x20
c0004d72:	e8 c4 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d77:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d7b:	b9 30 00 00 00       	mov    ecx,0x30
c0004d80:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d84:	e8 b2 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d89:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d90:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d94:	e8 80 ec ff ff       	call   c0003a19 <follow_path>
c0004d99:	85 c0                	test   eax,eax
c0004d9b:	75 20                	jne    c0004dbd <f_rename+0xe2>
c0004d9d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004da1:	b8 08 00 00 00       	mov    eax,0x8
c0004da6:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004daa:	0f 85 c5 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004db0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004db4:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004dbb:	eb 03                	jmp    c0004dc0 <f_rename+0xe5>
c0004dbd:	83 f8 04             	cmp    eax,0x4
c0004dc0:	0f 85 af 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dc6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004dca:	e8 e7 ec ff ff       	call   c0003ab6 <dir_register>
c0004dcf:	85 c0                	test   eax,eax
c0004dd1:	0f 85 9e 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dd7:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dde:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004de2:	b9 13 00 00 00       	mov    ecx,0x13
c0004de7:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dea:	e8 4c d0 ff ff       	call   c0001e3b <mem_cpy>
c0004def:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004df3:	a8 10                	test   al,0x10
c0004df5:	75 03                	jne    c0004dfa <f_rename+0x11f>
c0004df7:	83 c8 20             	or     eax,0x20
c0004dfa:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e01:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e05:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004e09:	74 54                	je     c0004e5f <f_rename+0x184>
c0004e0b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004e0f:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004e13:	74 4a                	je     c0004e5f <f_rename+0x184>
c0004e15:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004e19:	89 da                	mov    edx,ebx
c0004e1b:	8a 07                	mov    al,BYTE PTR [edi]
c0004e1d:	e8 de e3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004e22:	89 c2                	mov    edx,eax
c0004e24:	89 f8                	mov    eax,edi
c0004e26:	e8 3a d2 ff ff       	call   c0002065 <clst2sect>
c0004e2b:	89 c2                	mov    edx,eax
c0004e2d:	b8 02 00 00 00       	mov    eax,0x2
c0004e32:	85 d2                	test   edx,edx
c0004e34:	74 3f                	je     c0004e75 <f_rename+0x19a>
c0004e36:	89 f8                	mov    eax,edi
c0004e38:	e8 37 d5 ff ff       	call   c0002374 <move_window>
c0004e3d:	85 c0                	test   eax,eax
c0004e3f:	75 34                	jne    c0004e75 <f_rename+0x19a>
c0004e41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e45:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e49:	75 14                	jne    c0004e5f <f_rename+0x184>
c0004e4b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e4f:	8d 50 54             	lea    edx,[eax+0x54]
c0004e52:	e8 d2 e3 ff ff       	call   c0003229 <st_clust.isra.1>
c0004e57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e5b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e5f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e63:	e8 10 ea ff ff       	call   c0003878 <dir_remove>
c0004e68:	85 c0                	test   eax,eax
c0004e6a:	75 09                	jne    c0004e75 <f_rename+0x19a>
c0004e6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e70:	e8 34 df ff ff       	call   c0002da9 <sync_fs>
c0004e75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e79:	83 ec 0c             	sub    esp,0xc
c0004e7c:	56                   	push   esi
c0004e7d:	e8 ea 0d 00 00       	call   c0005c6c <ff_memfree>
c0004e82:	83 c4 10             	add    esp,0x10
c0004e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e89:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e8f:	5b                   	pop    ebx
c0004e90:	5e                   	pop    esi
c0004e91:	5f                   	pop    edi
c0004e92:	c3                   	ret    

c0004e93 <f_chmod>:
c0004e93:	57                   	push   edi
c0004e94:	b9 02 00 00 00       	mov    ecx,0x2
c0004e99:	56                   	push   esi
c0004e9a:	53                   	push   ebx
c0004e9b:	83 ec 50             	sub    esp,0x50
c0004e9e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ea2:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004ea6:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004eaa:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004eae:	e8 1e d6 ff ff       	call   c00024d1 <mount_volume>
c0004eb3:	85 c0                	test   eax,eax
c0004eb5:	0f 85 81 00 00 00    	jne    c0004f3c <f_chmod+0xa9>
c0004ebb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebf:	83 ec 0c             	sub    esp,0xc
c0004ec2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ec6:	68 00 02 00 00       	push   0x200
c0004ecb:	e8 84 0d 00 00       	call   c0005c54 <ff_memalloc>
c0004ed0:	83 c4 10             	add    esp,0x10
c0004ed3:	89 c6                	mov    esi,eax
c0004ed5:	b8 11 00 00 00       	mov    eax,0x11
c0004eda:	85 f6                	test   esi,esi
c0004edc:	74 5e                	je     c0004f3c <f_chmod+0xa9>
c0004ede:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ee2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ee6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ee9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eed:	e8 27 eb ff ff       	call   c0003a19 <follow_path>
c0004ef2:	85 c0                	test   eax,eax
c0004ef4:	75 32                	jne    c0004f28 <f_chmod+0x95>
c0004ef6:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004efa:	b8 06 00 00 00       	mov    eax,0x6
c0004eff:	80 e2 a0             	and    dl,0xa0
c0004f02:	75 24                	jne    c0004f28 <f_chmod+0x95>
c0004f04:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f08:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004f0b:	31 d7                	xor    edi,edx
c0004f0d:	21 fb                	and    ebx,edi
c0004f0f:	83 e3 27             	and    ebx,0x27
c0004f12:	31 d3                	xor    ebx,edx
c0004f14:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004f17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f23:	e8 81 de ff ff       	call   c0002da9 <sync_fs>
c0004f28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f2c:	83 ec 0c             	sub    esp,0xc
c0004f2f:	56                   	push   esi
c0004f30:	e8 37 0d 00 00       	call   c0005c6c <ff_memfree>
c0004f35:	83 c4 10             	add    esp,0x10
c0004f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f3c:	83 c4 50             	add    esp,0x50
c0004f3f:	5b                   	pop    ebx
c0004f40:	5e                   	pop    esi
c0004f41:	5f                   	pop    edi
c0004f42:	c3                   	ret    

c0004f43 <f_utime>:
c0004f43:	56                   	push   esi
c0004f44:	b9 02 00 00 00       	mov    ecx,0x2
c0004f49:	53                   	push   ebx
c0004f4a:	83 ec 54             	sub    esp,0x54
c0004f4d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f51:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f55:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f59:	e8 73 d5 ff ff       	call   c00024d1 <mount_volume>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	0f 85 87 00 00 00    	jne    c0004fed <f_utime+0xaa>
c0004f66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f6a:	83 ec 0c             	sub    esp,0xc
c0004f6d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f71:	68 00 02 00 00       	push   0x200
c0004f76:	e8 d9 0c 00 00       	call   c0005c54 <ff_memalloc>
c0004f7b:	83 c4 10             	add    esp,0x10
c0004f7e:	89 c3                	mov    ebx,eax
c0004f80:	b8 11 00 00 00       	mov    eax,0x11
c0004f85:	85 db                	test   ebx,ebx
c0004f87:	74 64                	je     c0004fed <f_utime+0xaa>
c0004f89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f91:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f98:	e8 7c ea ff ff       	call   c0003a19 <follow_path>
c0004f9d:	85 c0                	test   eax,eax
c0004f9f:	75 38                	jne    c0004fd9 <f_utime+0x96>
c0004fa1:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004fa5:	b8 06 00 00 00       	mov    eax,0x6
c0004faa:	80 e2 a0             	and    dl,0xa0
c0004fad:	75 2a                	jne    c0004fd9 <f_utime+0x96>
c0004faf:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004fb3:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004fb7:	c1 e2 10             	shl    edx,0x10
c0004fba:	09 c2                	or     edx,eax
c0004fbc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fc0:	83 c0 16             	add    eax,0x16
c0004fc3:	e8 70 ce ff ff       	call   c0001e38 <st_dword>
c0004fc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fcc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fd4:	e8 d0 dd ff ff       	call   c0002da9 <sync_fs>
c0004fd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fdd:	83 ec 0c             	sub    esp,0xc
c0004fe0:	53                   	push   ebx
c0004fe1:	e8 86 0c 00 00       	call   c0005c6c <ff_memfree>
c0004fe6:	83 c4 10             	add    esp,0x10
c0004fe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fed:	83 c4 54             	add    esp,0x54
c0004ff0:	5b                   	pop    ebx
c0004ff1:	5e                   	pop    esi
c0004ff2:	c3                   	ret    

c0004ff3 <f_getlabel>:
c0004ff3:	55                   	push   ebp
c0004ff4:	31 c9                	xor    ecx,ecx
c0004ff6:	57                   	push   edi
c0004ff7:	56                   	push   esi
c0004ff8:	53                   	push   ebx
c0004ff9:	83 ec 5c             	sub    esp,0x5c
c0004ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005000:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c0005004:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005008:	e8 c4 d4 ff ff       	call   c00024d1 <mount_volume>
c000500d:	85 c0                	test   eax,eax
c000500f:	89 c3                	mov    ebx,eax
c0005011:	0f 85 d9 00 00 00    	jne    c00050f0 <f_getlabel+0xfd>
c0005017:	85 ff                	test   edi,edi
c0005019:	0f 84 d1 00 00 00    	je     c00050f0 <f_getlabel+0xfd>
c000501f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005027:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000502b:	31 d2                	xor    edx,edx
c000502d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005031:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005035:	e8 1c e3 ff ff       	call   c0003356 <dir_sdi>
c000503a:	85 c0                	test   eax,eax
c000503c:	89 c3                	mov    ebx,eax
c000503e:	0f 85 a2 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c0005044:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005048:	ba 01 00 00 00       	mov    edx,0x1
c000504d:	e8 fe e6 ff ff       	call   c0003750 <dir_read>
c0005052:	85 c0                	test   eax,eax
c0005054:	89 c3                	mov    ebx,eax
c0005056:	0f 85 8a 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c000505c:	31 f6                	xor    esi,esi
c000505e:	31 d2                	xor    edx,edx
c0005060:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005064:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005067:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000506b:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c000506f:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005074:	89 c8                	mov    eax,ecx
c0005076:	e8 13 ce ff ff       	call   c0001e8e <dbc_1st>
c000507b:	85 c0                	test   eax,eax
c000507d:	74 19                	je     c0005098 <f_getlabel+0xa5>
c000507f:	83 fd 0b             	cmp    ebp,0xb
c0005082:	74 14                	je     c0005098 <f_getlabel+0xa5>
c0005084:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005088:	c1 e1 08             	shl    ecx,0x8
c000508b:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c000508f:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005092:	09 c1                	or     ecx,eax
c0005094:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005098:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000509d:	52                   	push   edx
c000509e:	52                   	push   edx
c000509f:	68 b5 01 00 00       	push   0x1b5
c00050a4:	50                   	push   eax
c00050a5:	e8 76 0c 00 00       	call   c0005d20 <ff_oem2uni>
c00050aa:	83 c4 10             	add    esp,0x10
c00050ad:	0f b7 c0             	movzx  eax,ax
c00050b0:	85 c0                	test   eax,eax
c00050b2:	74 1f                	je     c00050d3 <f_getlabel+0xe0>
c00050b4:	8d 14 37             	lea    edx,[edi+esi*1]
c00050b7:	b9 04 00 00 00       	mov    ecx,0x4
c00050bc:	e8 ab ce ff ff       	call   c0001f6c <put_utf>
c00050c1:	0f b6 c0             	movzx  eax,al
c00050c4:	85 c0                	test   eax,eax
c00050c6:	74 0b                	je     c00050d3 <f_getlabel+0xe0>
c00050c8:	01 c6                	add    esi,eax
c00050ca:	83 fd 0b             	cmp    ebp,0xb
c00050cd:	74 06                	je     c00050d5 <f_getlabel+0xe2>
c00050cf:	89 ea                	mov    edx,ebp
c00050d1:	eb 8d                	jmp    c0005060 <f_getlabel+0x6d>
c00050d3:	31 f6                	xor    esi,esi
c00050d5:	01 fe                	add    esi,edi
c00050d7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00050da:	39 f7                	cmp    edi,esi
c00050dc:	74 12                	je     c00050f0 <f_getlabel+0xfd>
c00050de:	4e                   	dec    esi
c00050df:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00050e2:	74 f3                	je     c00050d7 <f_getlabel+0xe4>
c00050e4:	eb 0a                	jmp    c00050f0 <f_getlabel+0xfd>
c00050e6:	83 fb 04             	cmp    ebx,0x4
c00050e9:	75 05                	jne    c00050f0 <f_getlabel+0xfd>
c00050eb:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00050ee:	31 db                	xor    ebx,ebx
c00050f0:	85 db                	test   ebx,ebx
c00050f2:	75 49                	jne    c000513d <f_getlabel+0x14a>
c00050f4:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050f9:	74 42                	je     c000513d <f_getlabel+0x14a>
c00050fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050ff:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0005102:	e8 6d d2 ff ff       	call   c0002374 <move_window>
c0005107:	85 c0                	test   eax,eax
c0005109:	89 c3                	mov    ebx,eax
c000510b:	75 30                	jne    c000513d <f_getlabel+0x14a>
c000510d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005111:	b8 43 00 00 00       	mov    eax,0x43
c0005116:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c0005119:	83 f9 03             	cmp    ecx,0x3
c000511c:	74 10                	je     c000512e <f_getlabel+0x13b>
c000511e:	83 f9 04             	cmp    ecx,0x4
c0005121:	b8 64 00 00 00       	mov    eax,0x64
c0005126:	b9 27 00 00 00       	mov    ecx,0x27
c000512b:	0f 45 c1             	cmovne eax,ecx
c000512e:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005132:	e8 e5 cc ff ff       	call   c0001e1c <ld_dword>
c0005137:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000513b:	89 07                	mov    DWORD PTR [edi],eax
c000513d:	83 c4 5c             	add    esp,0x5c
c0005140:	89 d8                	mov    eax,ebx
c0005142:	5b                   	pop    ebx
c0005143:	5e                   	pop    esi
c0005144:	5f                   	pop    edi
c0005145:	5d                   	pop    ebp
c0005146:	c3                   	ret    

c0005147 <f_setlabel>:
c0005147:	57                   	push   edi
c0005148:	b9 02 00 00 00       	mov    ecx,0x2
c000514d:	56                   	push   esi
c000514e:	53                   	push   ebx
c000514f:	83 ec 50             	sub    esp,0x50
c0005152:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005156:	8d 44 24 60          	lea    eax,[esp+0x60]
c000515a:	e8 72 d3 ff ff       	call   c00024d1 <mount_volume>
c000515f:	85 c0                	test   eax,eax
c0005161:	89 c6                	mov    esi,eax
c0005163:	0f 85 65 01 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005169:	b9 0b 00 00 00       	mov    ecx,0xb
c000516e:	ba 20 00 00 00       	mov    edx,0x20
c0005173:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005177:	31 db                	xor    ebx,ebx
c0005179:	e8 d2 cc ff ff       	call   c0001e50 <mem_set>
c000517e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005182:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005185:	76 5d                	jbe    c00051e4 <f_setlabel+0x9d>
c0005187:	8d 44 24 60          	lea    eax,[esp+0x60]
c000518b:	e8 04 cd ff ff       	call   c0001e94 <tchar2uni>
c0005190:	3d ff ff 00 00       	cmp    eax,0xffff
c0005195:	76 0a                	jbe    c00051a1 <f_setlabel+0x5a>
c0005197:	be 06 00 00 00       	mov    esi,0x6
c000519c:	e9 2d 01 00 00       	jmp    c00052ce <f_setlabel+0x187>
c00051a1:	83 ec 0c             	sub    esp,0xc
c00051a4:	50                   	push   eax
c00051a5:	e8 ee 0b 00 00       	call   c0005d98 <ff_wtoupper>
c00051aa:	5a                   	pop    edx
c00051ab:	59                   	pop    ecx
c00051ac:	68 b5 01 00 00       	push   0x1b5
c00051b1:	50                   	push   eax
c00051b2:	e8 cd 0a 00 00       	call   c0005c84 <ff_uni2oem>
c00051b7:	83 c4 10             	add    esp,0x10
c00051ba:	0f b7 f0             	movzx  esi,ax
c00051bd:	85 f6                	test   esi,esi
c00051bf:	89 f7                	mov    edi,esi
c00051c1:	74 d4                	je     c0005197 <f_setlabel+0x50>
c00051c3:	89 f2                	mov    edx,esi
c00051c5:	b8 b0 f9 01 c0       	mov    eax,0xc001f9b0
c00051ca:	e8 ae cc ff ff       	call   c0001e7d <chk_chr>
c00051cf:	85 c0                	test   eax,eax
c00051d1:	75 c4                	jne    c0005197 <f_setlabel+0x50>
c00051d3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051d9:	0f 87 c9 00 00 00    	ja     c00052a8 <f_setlabel+0x161>
c00051df:	e9 e0 00 00 00       	jmp    c00052c4 <f_setlabel+0x17d>
c00051e4:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051e9:	74 ac                	je     c0005197 <f_setlabel+0x50>
c00051eb:	85 db                	test   ebx,ebx
c00051ed:	74 0e                	je     c00051fd <f_setlabel+0xb6>
c00051ef:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051f4:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051f7:	75 04                	jne    c00051fd <f_setlabel+0xb6>
c00051f9:	89 c3                	mov    ebx,eax
c00051fb:	eb ee                	jmp    c00051eb <f_setlabel+0xa4>
c00051fd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005205:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005209:	31 d2                	xor    edx,edx
c000520b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000520f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005213:	e8 3e e1 ff ff       	call   c0003356 <dir_sdi>
c0005218:	85 c0                	test   eax,eax
c000521a:	89 c6                	mov    esi,eax
c000521c:	0f 85 ac 00 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005222:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005226:	ba 01 00 00 00       	mov    edx,0x1
c000522b:	e8 20 e5 ff ff       	call   c0003750 <dir_read>
c0005230:	85 c0                	test   eax,eax
c0005232:	75 18                	jne    c000524c <f_setlabel+0x105>
c0005234:	85 db                	test   ebx,ebx
c0005236:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000523a:	74 0b                	je     c0005247 <f_setlabel+0x100>
c000523c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005240:	b9 0b 00 00 00       	mov    ecx,0xb
c0005245:	eb 47                	jmp    c000528e <f_setlabel+0x147>
c0005247:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000524a:	eb 47                	jmp    c0005293 <f_setlabel+0x14c>
c000524c:	83 f8 04             	cmp    eax,0x4
c000524f:	75 53                	jne    c00052a4 <f_setlabel+0x15d>
c0005251:	85 db                	test   ebx,ebx
c0005253:	74 79                	je     c00052ce <f_setlabel+0x187>
c0005255:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005259:	ba 01 00 00 00       	mov    edx,0x1
c000525e:	e8 88 e4 ff ff       	call   c00036eb <dir_alloc>
c0005263:	85 c0                	test   eax,eax
c0005265:	89 c6                	mov    esi,eax
c0005267:	75 65                	jne    c00052ce <f_setlabel+0x187>
c0005269:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000526d:	b9 20 00 00 00       	mov    ecx,0x20
c0005272:	31 d2                	xor    edx,edx
c0005274:	e8 d7 cb ff ff       	call   c0001e50 <mem_set>
c0005279:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000527d:	b9 0b 00 00 00       	mov    ecx,0xb
c0005282:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005286:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000528a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000528e:	e8 a8 cb ff ff       	call   c0001e3b <mem_cpy>
c0005293:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005297:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000529b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000529f:	e8 05 db ff ff       	call   c0002da9 <sync_fs>
c00052a4:	89 c6                	mov    esi,eax
c00052a6:	eb 26                	jmp    c00052ce <f_setlabel+0x187>
c00052a8:	83 fb 09             	cmp    ebx,0x9
c00052ab:	0f 87 e6 fe ff ff    	ja     c0005197 <f_setlabel+0x50>
c00052b1:	89 f0                	mov    eax,esi
c00052b3:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c00052b7:	43                   	inc    ebx
c00052b8:	89 f8                	mov    eax,edi
c00052ba:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c00052be:	43                   	inc    ebx
c00052bf:	e9 ba fe ff ff       	jmp    c000517e <f_setlabel+0x37>
c00052c4:	83 fb 0a             	cmp    ebx,0xa
c00052c7:	76 ef                	jbe    c00052b8 <f_setlabel+0x171>
c00052c9:	e9 c9 fe ff ff       	jmp    c0005197 <f_setlabel+0x50>
c00052ce:	83 c4 50             	add    esp,0x50
c00052d1:	89 f0                	mov    eax,esi
c00052d3:	5b                   	pop    ebx
c00052d4:	5e                   	pop    esi
c00052d5:	5f                   	pop    edi
c00052d6:	c3                   	ret    

c00052d7 <f_expand>:
c00052d7:	55                   	push   ebp
c00052d8:	57                   	push   edi
c00052d9:	56                   	push   esi
c00052da:	53                   	push   ebx
c00052db:	83 ec 2c             	sub    esp,0x2c
c00052de:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052ee:	89 d8                	mov    eax,ebx
c00052f0:	e8 d6 cf ff ff       	call   c00022cb <validate>
c00052f5:	85 c0                	test   eax,eax
c00052f7:	89 c6                	mov    esi,eax
c00052f9:	0f 85 3b 01 00 00    	jne    c000543a <f_expand+0x163>
c00052ff:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005303:	85 f6                	test   esi,esi
c0005305:	0f 85 2f 01 00 00    	jne    c000543a <f_expand+0x163>
c000530b:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005310:	75 0a                	jne    c000531c <f_expand+0x45>
c0005312:	be 07 00 00 00       	mov    esi,0x7
c0005317:	e9 1e 01 00 00       	jmp    c000543a <f_expand+0x163>
c000531c:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005320:	75 f0                	jne    c0005312 <f_expand+0x3b>
c0005322:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005326:	74 ea                	je     c0005312 <f_expand+0x3b>
c0005328:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000532c:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8d 47 ff             	lea    eax,[edi-0x1]
c0005336:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000533a:	0f 95 c0             	setne  al
c000533d:	31 d2                	xor    edx,edx
c000533f:	0f b6 c0             	movzx  eax,al
c0005342:	89 c5                	mov    ebp,eax
c0005344:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005348:	f7 f7                	div    edi
c000534a:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000534d:	01 e8                	add    eax,ebp
c000534f:	83 ff 01             	cmp    edi,0x1
c0005352:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005356:	76 05                	jbe    c000535d <f_expand+0x86>
c0005358:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000535b:	77 05                	ja     c0005362 <f_expand+0x8b>
c000535d:	bf 02 00 00 00       	mov    edi,0x2
c0005362:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005365:	89 fd                	mov    ebp,edi
c0005367:	31 c9                	xor    ecx,ecx
c0005369:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000536d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000536f:	89 ea                	mov    edx,ebp
c0005371:	45                   	inc    ebp
c0005372:	e8 da de ff ff       	call   c0003251 <get_fat.isra.2>
c0005377:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000537b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000537f:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005382:	77 05                	ja     c0005389 <f_expand+0xb2>
c0005384:	bd 02 00 00 00       	mov    ebp,0x2
c0005389:	83 f8 01             	cmp    eax,0x1
c000538c:	74 20                	je     c00053ae <f_expand+0xd7>
c000538e:	83 f8 ff             	cmp    eax,0xffffffff
c0005391:	74 25                	je     c00053b8 <f_expand+0xe1>
c0005393:	85 c0                	test   eax,eax
c0005395:	75 09                	jne    c00053a0 <f_expand+0xc9>
c0005397:	41                   	inc    ecx
c0005398:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000539c:	75 07                	jne    c00053a5 <f_expand+0xce>
c000539e:	eb 1f                	jmp    c00053bf <f_expand+0xe8>
c00053a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00053a3:	31 c9                	xor    ecx,ecx
c00053a5:	39 fd                	cmp    ebp,edi
c00053a7:	75 c0                	jne    c0005369 <f_expand+0x92>
c00053a9:	e9 64 ff ff ff       	jmp    c0005312 <f_expand+0x3b>
c00053ae:	be 02 00 00 00       	mov    esi,0x2
c00053b3:	e9 82 00 00 00       	jmp    c000543a <f_expand+0x163>
c00053b8:	be 01 00 00 00       	mov    esi,0x1
c00053bd:	eb 7b                	jmp    c000543a <f_expand+0x163>
c00053bf:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053c4:	74 2b                	je     c00053f1 <f_expand+0x11a>
c00053c6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053c9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053cd:	85 ed                	test   ebp,ebp
c00053cf:	74 24                	je     c00053f5 <f_expand+0x11e>
c00053d1:	83 c9 ff             	or     ecx,0xffffffff
c00053d4:	83 fd 01             	cmp    ebp,0x1
c00053d7:	74 03                	je     c00053dc <f_expand+0x105>
c00053d9:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053e0:	89 fa                	mov    edx,edi
c00053e2:	e8 e7 d3 ff ff       	call   c00027ce <put_fat>
c00053e7:	85 c0                	test   eax,eax
c00053e9:	75 4d                	jne    c0005438 <f_expand+0x161>
c00053eb:	89 f8                	mov    eax,edi
c00053ed:	4d                   	dec    ebp
c00053ee:	47                   	inc    edi
c00053ef:	eb dc                	jmp    c00053cd <f_expand+0xf6>
c00053f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053f4:	48                   	dec    eax
c00053f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053f9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053fe:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005401:	74 37                	je     c000543a <f_expand+0x163>
c0005403:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005406:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005409:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000540d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005410:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0005413:	83 c8 40             	or     eax,0x40
c0005416:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005419:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c000541c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000541f:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005422:	39 c8                	cmp    eax,ecx
c0005424:	77 14                	ja     c000543a <f_expand+0x163>
c0005426:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000542a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000542d:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005430:	83 c8 01             	or     eax,0x1
c0005433:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005436:	eb 02                	jmp    c000543a <f_expand+0x163>
c0005438:	89 c6                	mov    esi,eax
c000543a:	83 c4 2c             	add    esp,0x2c
c000543d:	89 f0                	mov    eax,esi
c000543f:	5b                   	pop    ebx
c0005440:	5e                   	pop    esi
c0005441:	5f                   	pop    edi
c0005442:	5d                   	pop    ebp
c0005443:	c3                   	ret    

c0005444 <f_mkfs>:
c0005444:	55                   	push   ebp
c0005445:	57                   	push   edi
c0005446:	56                   	push   esi
c0005447:	be 0b 00 00 00       	mov    esi,0xb
c000544c:	53                   	push   ebx
c000544d:	83 ec 5c             	sub    esp,0x5c
c0005450:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005454:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005458:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000545c:	e8 1e ce ff ff       	call   c000227f <get_ldnumber>
c0005461:	85 c0                	test   eax,eax
c0005463:	0f 88 e0 07 00 00    	js     c0005c49 <f_mkfs+0x805>
c0005469:	8b 14 85 a0 54 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdab60]
c0005470:	85 d2                	test   edx,edx
c0005472:	74 03                	je     c0005477 <f_mkfs+0x33>
c0005474:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005477:	85 db                	test   ebx,ebx
c0005479:	75 05                	jne    c0005480 <f_mkfs+0x3c>
c000547b:	bb a0 f9 01 c0       	mov    ebx,0xc001f9a0
c0005480:	0f b6 c0             	movzx  eax,al
c0005483:	83 ec 0c             	sub    esp,0xc
c0005486:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000548a:	be 03 00 00 00       	mov    esi,0x3
c000548f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005493:	e8 29 c9 ff ff       	call   c0001dc1 <disk_initialize>
c0005498:	83 c4 10             	add    esp,0x10
c000549b:	a8 01                	test   al,0x1
c000549d:	0f 85 a6 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054a3:	a8 04                	test   al,0x4
c00054a5:	be 0a 00 00 00       	mov    esi,0xa
c00054aa:	0f 85 99 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054b0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00054b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00054b7:	85 c0                	test   eax,eax
c00054b9:	75 20                	jne    c00054db <f_mkfs+0x97>
c00054bb:	51                   	push   ecx
c00054bc:	8d 44 24 44          	lea    eax,[esp+0x44]
c00054c0:	50                   	push   eax
c00054c1:	6a 03                	push   0x3
c00054c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054c7:	e8 24 c9 ff ff       	call   c0001df0 <disk_ioctl>
c00054cc:	83 c4 10             	add    esp,0x10
c00054cf:	85 c0                	test   eax,eax
c00054d1:	74 08                	je     c00054db <f_mkfs+0x97>
c00054d3:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054db:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054df:	8d 42 ff             	lea    eax,[edx-0x1]
c00054e2:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054e7:	77 04                	ja     c00054ed <f_mkfs+0xa9>
c00054e9:	85 c2                	test   edx,eax
c00054eb:	74 08                	je     c00054f5 <f_mkfs+0xb1>
c00054ed:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054f5:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054f8:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005500:	48                   	dec    eax
c0005501:	3c 01                	cmp    al,0x1
c0005503:	76 05                	jbe    c000550a <f_mkfs+0xc6>
c0005505:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000550a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000550d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005511:	48                   	dec    eax
c0005512:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005517:	77 15                	ja     c000552e <f_mkfs+0xea>
c0005519:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c000551e:	b8 00 02 00 00       	mov    eax,0x200
c0005523:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005528:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000552c:	eb 08                	jmp    c0005536 <f_mkfs+0xf2>
c000552e:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005536:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005539:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000553f:	77 0f                	ja     c0005550 <f_mkfs+0x10c>
c0005541:	8d 47 ff             	lea    eax,[edi-0x1]
c0005544:	85 f8                	test   eax,edi
c0005546:	b8 00 00 00 00       	mov    eax,0x0
c000554b:	0f 45 f8             	cmovne edi,eax
c000554e:	eb 02                	jmp    c0005552 <f_mkfs+0x10e>
c0005550:	31 ff                	xor    edi,edi
c0005552:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000555a:	77 0a                	ja     c0005566 <f_mkfs+0x122>
c000555c:	be 11 00 00 00       	mov    esi,0x11
c0005561:	e9 e3 06 00 00       	jmp    c0005c49 <f_mkfs+0x805>
c0005566:	85 ed                	test   ebp,ebp
c0005568:	8b 33                	mov    esi,DWORD PTR [ebx]
c000556a:	89 eb                	mov    ebx,ebp
c000556c:	75 1e                	jne    c000558c <f_mkfs+0x148>
c000556e:	83 ec 0c             	sub    esp,0xc
c0005571:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005578:	25 00 fe ff ff       	and    eax,0xfffffe00
c000557d:	50                   	push   eax
c000557e:	e8 d1 06 00 00       	call   c0005c54 <ff_memalloc>
c0005583:	83 c4 10             	add    esp,0x10
c0005586:	85 c0                	test   eax,eax
c0005588:	89 c3                	mov    ebx,eax
c000558a:	74 d0                	je     c000555c <f_mkfs+0x118>
c000558c:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005594:	52                   	push   edx
c0005595:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005599:	50                   	push   eax
c000559a:	6a 01                	push   0x1
c000559c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00055a0:	e8 4b c8 ff ff       	call   c0001df0 <disk_ioctl>
c00055a5:	83 c4 10             	add    esp,0x10
c00055a8:	85 c0                	test   eax,eax
c00055aa:	0f 85 42 06 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00055b0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00055b8:	89 f0                	mov    eax,esi
c00055ba:	83 e0 08             	and    eax,0x8
c00055bd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00055c1:	75 18                	jne    c00055db <f_mkfs+0x197>
c00055c3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055c7:	83 f8 3f             	cmp    eax,0x3f
c00055ca:	76 0f                	jbe    c00055db <f_mkfs+0x197>
c00055cc:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00055d4:	83 e8 3f             	sub    eax,0x3f
c00055d7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00055db:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055e3:	83 f8 7f             	cmp    eax,0x7f
c00055e6:	0f 86 5f 02 00 00    	jbe    c000584b <f_mkfs+0x407>
c00055ec:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055f2:	b9 80 00 00 00       	mov    ecx,0x80
c00055f7:	77 05                	ja     c00055fe <f_mkfs+0x1ba>
c00055f9:	c1 ef 09             	shr    edi,0x9
c00055fc:	89 f9                	mov    ecx,edi
c00055fe:	89 f0                	mov    eax,esi
c0005600:	89 f7                	mov    edi,esi
c0005602:	83 e0 01             	and    eax,0x1
c0005605:	83 e7 02             	and    edi,0x2
c0005608:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000560c:	0f b6 c0             	movzx  eax,al
c000560f:	74 0a                	je     c000561b <f_mkfs+0x1d7>
c0005611:	85 c0                	test   eax,eax
c0005613:	0f 84 53 01 00 00    	je     c000576c <f_mkfs+0x328>
c0005619:	eb 37                	jmp    c0005652 <f_mkfs+0x20e>
c000561b:	85 c0                	test   eax,eax
c000561d:	be 13 00 00 00       	mov    esi,0x13
c0005622:	75 2e                	jne    c0005652 <f_mkfs+0x20e>
c0005624:	e9 e0 05 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005629:	83 f8 02             	cmp    eax,0x2
c000562c:	0f 85 11 02 00 00    	jne    c0005843 <f_mkfs+0x3ff>
c0005632:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005638:	0f 86 e8 01 00 00    	jbe    c0005826 <f_mkfs+0x3e2>
c000563e:	85 c9                	test   ecx,ecx
c0005640:	0f 85 d5 05 00 00    	jne    c0005c1b <f_mkfs+0x7d7>
c0005646:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005649:	83 f9 40             	cmp    ecx,0x40
c000564c:	0f 87 d9 05 00 00    	ja     c0005c2b <f_mkfs+0x7e7>
c0005652:	85 c9                	test   ecx,ecx
c0005654:	89 cf                	mov    edi,ecx
c0005656:	75 1c                	jne    c0005674 <f_mkfs+0x230>
c0005658:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000565c:	b8 80 f9 01 c0       	mov    eax,0xc001f980
c0005661:	bf 01 00 00 00       	mov    edi,0x1
c0005666:	c1 ee 0c             	shr    esi,0xc
c0005669:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000566c:	85 d2                	test   edx,edx
c000566e:	0f 85 67 01 00 00    	jne    c00057db <f_mkfs+0x397>
c0005674:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005678:	31 d2                	xor    edx,edx
c000567a:	f7 f7                	div    edi
c000567c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005681:	0f 86 66 01 00 00    	jbe    c00057ed <f_mkfs+0x3a9>
c0005687:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000568c:	83 c0 02             	add    eax,0x2
c000568f:	01 c0                	add    eax,eax
c0005691:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005699:	05 ff 01 00 00       	add    eax,0x1ff
c000569e:	c1 e8 09             	shr    eax,0x9
c00056a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00056a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056a9:	c1 e0 05             	shl    eax,0x5
c00056ac:	c1 e8 09             	shr    eax,0x9
c00056af:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00056b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00056b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00056bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00056c0:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00056c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00056c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00056cc:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00056d1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00056d5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00056d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056e1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e5:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056e9:	f7 d8                	neg    eax
c00056eb:	21 c6                	and    esi,eax
c00056ed:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056f2:	29 d6                	sub    esi,edx
c00056f4:	83 f8 03             	cmp    eax,0x3
c00056f7:	0f 85 03 01 00 00    	jne    c0005800 <f_mkfs+0x3bc>
c00056fd:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005701:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005705:	89 f8                	mov    eax,edi
c0005707:	c1 e0 04             	shl    eax,0x4
c000570a:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c000570e:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005712:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005716:	0f 82 2f 01 00 00    	jb     c000584b <f_mkfs+0x407>
c000571c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005720:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005724:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005728:	89 c2                	mov    edx,eax
c000572a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000572e:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005733:	29 c2                	sub    edx,eax
c0005735:	89 d0                	mov    eax,edx
c0005737:	31 d2                	xor    edx,edx
c0005739:	f7 f7                	div    edi
c000573b:	89 c6                	mov    esi,eax
c000573d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005742:	83 f8 03             	cmp    eax,0x3
c0005745:	0f 85 de fe ff ff    	jne    c0005629 <f_mkfs+0x1e5>
c000574b:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005751:	0f 87 03 01 00 00    	ja     c000585a <f_mkfs+0x416>
c0005757:	85 c9                	test   ecx,ecx
c0005759:	0f 85 ec 00 00 00    	jne    c000584b <f_mkfs+0x407>
c000575f:	83 ff 01             	cmp    edi,0x1
c0005762:	0f 86 e3 00 00 00    	jbe    c000584b <f_mkfs+0x407>
c0005768:	d1 ef                	shr    edi,1
c000576a:	89 f9                	mov    ecx,edi
c000576c:	85 c9                	test   ecx,ecx
c000576e:	89 ce                	mov    esi,ecx
c0005770:	75 25                	jne    c0005797 <f_mkfs+0x353>
c0005772:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005776:	b8 90 f9 01 c0       	mov    eax,0xc001f990
c000577b:	b9 01 00 00 00       	mov    ecx,0x1
c0005780:	c1 ee 11             	shr    esi,0x11
c0005783:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005786:	85 d2                	test   edx,edx
c0005788:	74 0b                	je     c0005795 <f_mkfs+0x351>
c000578a:	83 c0 02             	add    eax,0x2
c000578d:	39 f2                	cmp    edx,esi
c000578f:	77 04                	ja     c0005795 <f_mkfs+0x351>
c0005791:	01 c9                	add    ecx,ecx
c0005793:	eb ee                	jmp    c0005783 <f_mkfs+0x33f>
c0005795:	31 f6                	xor    esi,esi
c0005797:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000579b:	31 d2                	xor    edx,edx
c000579d:	f7 f1                	div    ecx
c000579f:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00057a6:	2d f6 ff 00 00       	sub    eax,0xfff6
c00057ab:	c1 ea 09             	shr    edx,0x9
c00057ae:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00057b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00057b7:	0f 87 8e 00 00 00    	ja     c000584b <f_mkfs+0x407>
c00057bd:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00057c5:	89 cf                	mov    edi,ecx
c00057c7:	89 f1                	mov    ecx,esi
c00057c9:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00057d1:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00057d6:	e9 d8 fe ff ff       	jmp    c00056b3 <f_mkfs+0x26f>
c00057db:	83 c0 02             	add    eax,0x2
c00057de:	39 f2                	cmp    edx,esi
c00057e0:	0f 87 8e fe ff ff    	ja     c0005674 <f_mkfs+0x230>
c00057e6:	01 ff                	add    edi,edi
c00057e8:	e9 7c fe ff ff       	jmp    c0005669 <f_mkfs+0x225>
c00057ed:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057f2:	8d 04 40             	lea    eax,[eax+eax*2]
c00057f5:	40                   	inc    eax
c00057f6:	d1 e8                	shr    eax,1
c00057f8:	83 c0 03             	add    eax,0x3
c00057fb:	e9 91 fe ff ff       	jmp    c0005691 <f_mkfs+0x24d>
c0005800:	31 d2                	xor    edx,edx
c0005802:	89 f0                	mov    eax,esi
c0005804:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005808:	85 d2                	test   edx,edx
c000580a:	74 09                	je     c0005815 <f_mkfs+0x3d1>
c000580c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005810:	4e                   	dec    esi
c0005811:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005815:	89 f0                	mov    eax,esi
c0005817:	31 d2                	xor    edx,edx
c0005819:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000581d:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005821:	e9 df fe ff ff       	jmp    c0005705 <f_mkfs+0x2c1>
c0005826:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c000582c:	77 2c                	ja     c000585a <f_mkfs+0x416>
c000582e:	85 c9                	test   ecx,ecx
c0005830:	75 19                	jne    c000584b <f_mkfs+0x407>
c0005832:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005835:	81 f9 80 00 00 00    	cmp    ecx,0x80
c000583b:	0f 86 11 fe ff ff    	jbe    c0005652 <f_mkfs+0x20e>
c0005841:	eb 08                	jmp    c000584b <f_mkfs+0x407>
c0005843:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005849:	76 0a                	jbe    c0005855 <f_mkfs+0x411>
c000584b:	be 0e 00 00 00       	mov    esi,0xe
c0005850:	e9 b4 03 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005855:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000585a:	31 d2                	xor    edx,edx
c000585c:	b9 00 02 00 00       	mov    ecx,0x200
c0005861:	89 d8                	mov    eax,ebx
c0005863:	e8 e8 c5 ff ff       	call   c0001e50 <mem_set>
c0005868:	b9 0b 00 00 00       	mov    ecx,0xb
c000586d:	ba 32 f9 01 c0       	mov    edx,0xc001f932
c0005872:	89 d8                	mov    eax,ebx
c0005874:	e8 c2 c5 ff ff       	call   c0001e3b <mem_cpy>
c0005879:	8d 43 0b             	lea    eax,[ebx+0xb]
c000587c:	ba 00 02 00 00       	mov    edx,0x200
c0005881:	e8 ae c5 ff ff       	call   c0001e34 <st_word>
c0005886:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000588b:	89 f8                	mov    eax,edi
c000588d:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005890:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005893:	e8 9c c5 ff ff       	call   c0001e34 <st_word>
c0005898:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000589c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000589f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058a4:	83 f8 03             	cmp    eax,0x3
c00058a7:	b8 00 00 00 00       	mov    eax,0x0
c00058ac:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c00058b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00058b5:	8d 43 11             	lea    eax,[ebx+0x11]
c00058b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bc:	e8 73 c5 ff ff       	call   c0001e34 <st_word>
c00058c1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058c5:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00058cb:	77 0a                	ja     c00058d7 <f_mkfs+0x493>
c00058cd:	8d 43 13             	lea    eax,[ebx+0x13]
c00058d0:	e8 5f c5 ff ff       	call   c0001e34 <st_word>
c00058d5:	eb 08                	jmp    c00058df <f_mkfs+0x49b>
c00058d7:	8d 43 20             	lea    eax,[ebx+0x20]
c00058da:	e8 59 c5 ff ff       	call   c0001e38 <st_dword>
c00058df:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058e3:	8d 43 18             	lea    eax,[ebx+0x18]
c00058e6:	ba 3f 00 00 00       	mov    edx,0x3f
c00058eb:	e8 44 c5 ff ff       	call   c0001e34 <st_word>
c00058f0:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058f3:	ba ff 00 00 00       	mov    edx,0xff
c00058f8:	e8 37 c5 ff ff       	call   c0001e34 <st_word>
c00058fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005901:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005904:	e8 2f c5 ff ff       	call   c0001e38 <st_dword>
c0005909:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000590e:	83 f8 03             	cmp    eax,0x3
c0005911:	75 57                	jne    c000596a <f_mkfs+0x526>
c0005913:	8d 43 43             	lea    eax,[ebx+0x43]
c0005916:	ba 00 00 21 50       	mov    edx,0x50210000
c000591b:	e8 18 c5 ff ff       	call   c0001e38 <st_dword>
c0005920:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005924:	8d 43 24             	lea    eax,[ebx+0x24]
c0005927:	e8 0c c5 ff ff       	call   c0001e38 <st_dword>
c000592c:	8d 43 2c             	lea    eax,[ebx+0x2c]
c000592f:	ba 02 00 00 00       	mov    edx,0x2
c0005934:	e8 ff c4 ff ff       	call   c0001e38 <st_dword>
c0005939:	8d 43 30             	lea    eax,[ebx+0x30]
c000593c:	ba 01 00 00 00       	mov    edx,0x1
c0005941:	e8 ee c4 ff ff       	call   c0001e34 <st_word>
c0005946:	8d 43 32             	lea    eax,[ebx+0x32]
c0005949:	ba 06 00 00 00       	mov    edx,0x6
c000594e:	e8 e1 c4 ff ff       	call   c0001e34 <st_word>
c0005953:	8d 43 47             	lea    eax,[ebx+0x47]
c0005956:	b9 13 00 00 00       	mov    ecx,0x13
c000595b:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c000595f:	ba 3e f9 01 c0       	mov    edx,0xc001f93e
c0005964:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005968:	eb 2f                	jmp    c0005999 <f_mkfs+0x555>
c000596a:	8d 43 27             	lea    eax,[ebx+0x27]
c000596d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005972:	e8 c1 c4 ff ff       	call   c0001e38 <st_dword>
c0005977:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000597c:	8d 43 16             	lea    eax,[ebx+0x16]
c000597f:	e8 b0 c4 ff ff       	call   c0001e34 <st_word>
c0005984:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005987:	b9 13 00 00 00       	mov    ecx,0x13
c000598c:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005990:	ba 52 f9 01 c0       	mov    edx,0xc001f952
c0005995:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005999:	e8 9d c4 ff ff       	call   c0001e3b <mem_cpy>
c000599e:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059a4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00059ad:	e8 82 c4 ff ff       	call   c0001e34 <st_word>
c00059b2:	6a 01                	push   0x1
c00059b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059b8:	53                   	push   ebx
c00059b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059bd:	e8 18 c4 ff ff       	call   c0001dda <disk_write>
c00059c2:	83 c4 10             	add    esp,0x10
c00059c5:	85 c0                	test   eax,eax
c00059c7:	0f 85 25 02 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00059cd:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00059d2:	83 f8 03             	cmp    eax,0x3
c00059d5:	0f 85 98 00 00 00    	jne    c0005a73 <f_mkfs+0x62f>
c00059db:	6a 01                	push   0x1
c00059dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00059e1:	83 c0 06             	add    eax,0x6
c00059e4:	50                   	push   eax
c00059e5:	53                   	push   ebx
c00059e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059ea:	e8 eb c3 ff ff       	call   c0001dda <disk_write>
c00059ef:	b9 00 02 00 00       	mov    ecx,0x200
c00059f4:	31 d2                	xor    edx,edx
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 53 c4 ff ff       	call   c0001e50 <mem_set>
c00059fd:	ba 52 52 61 41       	mov    edx,0x41615252
c0005a02:	89 d8                	mov    eax,ebx
c0005a04:	e8 2f c4 ff ff       	call   c0001e38 <st_dword>
c0005a09:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005a0f:	ba 72 72 41 61       	mov    edx,0x61417272
c0005a14:	e8 1f c4 ff ff       	call   c0001e38 <st_dword>
c0005a19:	8d 56 ff             	lea    edx,[esi-0x1]
c0005a1c:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005a22:	e8 11 c4 ff ff       	call   c0001e38 <st_dword>
c0005a27:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005a2d:	ba 02 00 00 00       	mov    edx,0x2
c0005a32:	e8 01 c4 ff ff       	call   c0001e38 <st_dword>
c0005a37:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005a3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005a42:	e8 ed c3 ff ff       	call   c0001e34 <st_word>
c0005a47:	6a 01                	push   0x1
c0005a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005a4d:	83 c0 07             	add    eax,0x7
c0005a50:	50                   	push   eax
c0005a51:	53                   	push   ebx
c0005a52:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a56:	e8 7f c3 ff ff       	call   c0001dda <disk_write>
c0005a5b:	83 c4 20             	add    esp,0x20
c0005a5e:	6a 01                	push   0x1
c0005a60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005a64:	40                   	inc    eax
c0005a65:	50                   	push   eax
c0005a66:	53                   	push   ebx
c0005a67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a6b:	e8 6a c3 ff ff       	call   c0001dda <disk_write>
c0005a70:	83 c4 10             	add    esp,0x10
c0005a73:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a77:	31 d2                	xor    edx,edx
c0005a79:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a7d:	c1 e8 09             	shr    eax,0x9
c0005a80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a84:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a8a:	89 d8                	mov    eax,ebx
c0005a8c:	e8 bf c3 ff ff       	call   c0001e50 <mem_set>
c0005a91:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a96:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005a9b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005aa3:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005aa8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005aac:	83 f8 01             	cmp    eax,0x1
c0005aaf:	0f 44 d1             	cmove  edx,ecx
c0005ab2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005ab6:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005abb:	75 21                	jne    c0005ade <f_mkfs+0x69a>
c0005abd:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 6f c3 ff ff       	call   c0001e38 <st_dword>
c0005ac9:	8d 43 04             	lea    eax,[ebx+0x4]
c0005acc:	83 ca ff             	or     edx,0xffffffff
c0005acf:	e8 64 c3 ff ff       	call   c0001e38 <st_dword>
c0005ad4:	8d 43 08             	lea    eax,[ebx+0x8]
c0005ad7:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005adc:	eb 06                	jmp    c0005ae4 <f_mkfs+0x6a0>
c0005ade:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005ae2:	89 d8                	mov    eax,ebx
c0005ae4:	e8 4f c3 ff ff       	call   c0001e38 <st_dword>
c0005ae9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005af1:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005af5:	0f 46 c6             	cmovbe eax,esi
c0005af8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005afc:	50                   	push   eax
c0005afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b01:	53                   	push   ebx
c0005b02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b06:	e8 cf c2 ff ff       	call   c0001dda <disk_write>
c0005b0b:	83 c4 10             	add    esp,0x10
c0005b0e:	85 c0                	test   eax,eax
c0005b10:	0f 85 dc 00 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b16:	b9 00 02 00 00       	mov    ecx,0x200
c0005b1b:	31 d2                	xor    edx,edx
c0005b1d:	89 d8                	mov    eax,ebx
c0005b1f:	e8 2c c3 ff ff       	call   c0001e50 <mem_set>
c0005b24:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005b28:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005b2c:	29 ce                	sub    esi,ecx
c0005b2e:	75 bd                	jne    c0005aed <f_mkfs+0x6a9>
c0005b30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b34:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005b3c:	40                   	inc    eax
c0005b3d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b41:	0f 87 6f ff ff ff    	ja     c0005ab6 <f_mkfs+0x672>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	83 f8 03             	cmp    eax,0x3
c0005b4f:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005b54:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b58:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b5c:	0f 46 f7             	cmovbe esi,edi
c0005b5f:	56                   	push   esi
c0005b60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b64:	53                   	push   ebx
c0005b65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b69:	e8 6c c2 ff ff       	call   c0001dda <disk_write>
c0005b6e:	83 c4 10             	add    esp,0x10
c0005b71:	85 c0                	test   eax,eax
c0005b73:	75 7d                	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b75:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b79:	29 f7                	sub    edi,esi
c0005b7b:	75 d7                	jne    c0005b54 <f_mkfs+0x710>
c0005b7d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b82:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b87:	83 f8 03             	cmp    eax,0x3
c0005b8a:	74 1e                	je     c0005baa <f_mkfs+0x766>
c0005b8c:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b94:	b9 06 00 00 00       	mov    ecx,0x6
c0005b99:	77 0f                	ja     c0005baa <f_mkfs+0x766>
c0005b9b:	83 f8 02             	cmp    eax,0x2
c0005b9e:	b9 04 00 00 00       	mov    ecx,0x4
c0005ba3:	74 05                	je     c0005baa <f_mkfs+0x766>
c0005ba5:	b9 01 00 00 00       	mov    ecx,0x1
c0005baa:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005baf:	75 2a                	jne    c0005bdb <f_mkfs+0x797>
c0005bb1:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005bb9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005bbd:	83 ec 0c             	sub    esp,0xc
c0005bc0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005bc4:	53                   	push   ebx
c0005bc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005bc9:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005bcd:	e8 87 d2 ff ff       	call   c0002e59 <create_partition>
c0005bd2:	83 c4 10             	add    esp,0x10
c0005bd5:	85 c0                	test   eax,eax
c0005bd7:	89 c6                	mov    esi,eax
c0005bd9:	75 2e                	jne    c0005c09 <f_mkfs+0x7c5>
c0005bdb:	50                   	push   eax
c0005bdc:	31 f6                	xor    esi,esi
c0005bde:	6a 00                	push   0x0
c0005be0:	6a 00                	push   0x0
c0005be2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005be6:	e8 05 c2 ff ff       	call   c0001df0 <disk_ioctl>
c0005beb:	83 c4 10             	add    esp,0x10
c0005bee:	85 c0                	test   eax,eax
c0005bf0:	74 17                	je     c0005c09 <f_mkfs+0x7c5>
c0005bf2:	85 ed                	test   ebp,ebp
c0005bf4:	75 0c                	jne    c0005c02 <f_mkfs+0x7be>
c0005bf6:	83 ec 0c             	sub    esp,0xc
c0005bf9:	53                   	push   ebx
c0005bfa:	e8 6d 00 00 00       	call   c0005c6c <ff_memfree>
c0005bff:	83 c4 10             	add    esp,0x10
c0005c02:	be 01 00 00 00       	mov    esi,0x1
c0005c07:	eb 40                	jmp    c0005c49 <f_mkfs+0x805>
c0005c09:	85 ed                	test   ebp,ebp
c0005c0b:	75 3c                	jne    c0005c49 <f_mkfs+0x805>
c0005c0d:	83 ec 0c             	sub    esp,0xc
c0005c10:	53                   	push   ebx
c0005c11:	e8 56 00 00 00       	call   c0005c6c <ff_memfree>
c0005c16:	83 c4 10             	add    esp,0x10
c0005c19:	eb 2e                	jmp    c0005c49 <f_mkfs+0x805>
c0005c1b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c20:	0f 85 46 fb ff ff    	jne    c000576c <f_mkfs+0x328>
c0005c26:	e9 20 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c2b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c30:	0f 85 3c fb ff ff    	jne    c0005772 <f_mkfs+0x32e>
c0005c36:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c3c:	89 cf                	mov    edi,ecx
c0005c3e:	0f 86 30 fa ff ff    	jbe    c0005674 <f_mkfs+0x230>
c0005c44:	e9 02 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c49:	83 c4 5c             	add    esp,0x5c
c0005c4c:	89 f0                	mov    eax,esi
c0005c4e:	5b                   	pop    ebx
c0005c4f:	5e                   	pop    esi
c0005c50:	5f                   	pop    edi
c0005c51:	5d                   	pop    ebp
c0005c52:	c3                   	ret    
c0005c53:	90                   	nop

c0005c54 <ff_memalloc>:
c0005c54:	83 ec 0c             	sub    esp,0xc
c0005c57:	83 ec 0c             	sub    esp,0xc
c0005c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c5e:	e8 68 1e 00 00       	call   c0007acb <malloc>
c0005c63:	83 c4 10             	add    esp,0x10
c0005c66:	83 c4 0c             	add    esp,0xc
c0005c69:	c3                   	ret    
c0005c6a:	66 90                	xchg   ax,ax

c0005c6c <ff_memfree>:
c0005c6c:	83 ec 0c             	sub    esp,0xc
c0005c6f:	83 ec 0c             	sub    esp,0xc
c0005c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c76:	e8 60 1e 00 00       	call   c0007adb <free>
c0005c7b:	83 c4 10             	add    esp,0x10
c0005c7e:	90                   	nop
c0005c7f:	83 c4 0c             	add    esp,0xc
c0005c82:	c3                   	ret    
c0005c83:	90                   	nop

c0005c84 <ff_uni2oem>:
c0005c84:	83 ec 14             	sub    esp,0x14
c0005c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c8b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c8f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c96:	c7 44 24 0c 80 fd 01 c0 	mov    DWORD PTR [esp+0xc],0xc001fd80
c0005c9e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005ca3:	77 0b                	ja     c0005cb0 <ff_uni2oem+0x2c>
c0005ca5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ca9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cae:	eb 64                	jmp    c0005d14 <ff_uni2oem+0x90>
c0005cb0:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005cb8:	77 5a                	ja     c0005d14 <ff_uni2oem+0x90>
c0005cba:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005cbe:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005cc3:	75 4f                	jne    c0005d14 <ff_uni2oem+0x90>
c0005cc5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ccc:	eb 12                	jmp    c0005ce0 <ff_uni2oem+0x5c>
c0005cce:	66 90                	xchg   ax,ax
c0005cd0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd5:	83 c0 01             	add    eax,0x1
c0005cd8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ce0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ce5:	83 f8 7f             	cmp    eax,0x7f
c0005ce8:	77 1a                	ja     c0005d04 <ff_uni2oem+0x80>
c0005cea:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cef:	8d 14 00             	lea    edx,[eax+eax*1]
c0005cf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cf6:	01 d0                	add    eax,edx
c0005cf8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cfb:	0f b7 c0             	movzx  eax,ax
c0005cfe:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005d02:	75 cc                	jne    c0005cd0 <ff_uni2oem+0x4c>
c0005d04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d09:	83 e8 80             	sub    eax,0xffffff80
c0005d0c:	0f b6 c0             	movzx  eax,al
c0005d0f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005d14:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d19:	83 c4 14             	add    esp,0x14
c0005d1c:	c3                   	ret    
c0005d1d:	8d 76 00             	lea    esi,[esi+0x0]

c0005d20 <ff_oem2uni>:
c0005d20:	83 ec 18             	sub    esp,0x18
c0005d23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005d27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005d2b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d30:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d34:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d3b:	c7 44 24 10 80 fd 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fd80
c0005d43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d48:	83 f8 7f             	cmp    eax,0x7f
c0005d4b:	77 0b                	ja     c0005d58 <ff_oem2uni+0x38>
c0005d4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d51:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d56:	eb 34                	jmp    c0005d8c <ff_oem2uni+0x6c>
c0005d58:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d5c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d61:	75 29                	jne    c0005d8c <ff_oem2uni+0x6c>
c0005d63:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d68:	3d ff 00 00 00       	cmp    eax,0xff
c0005d6d:	77 1d                	ja     c0005d8c <ff_oem2uni+0x6c>
c0005d6f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d74:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d79:	8d 14 00             	lea    edx,[eax+eax*1]
c0005d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d80:	01 d0                	add    eax,edx
c0005d82:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d85:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d8a:	66 90                	xchg   ax,ax
c0005d8c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d91:	83 c4 18             	add    esp,0x18
c0005d94:	c3                   	ret    
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]

c0005d98 <ff_wtoupper>:
c0005d98:	83 ec 10             	sub    esp,0x10
c0005d9b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005da3:	0f 87 a7 01 00 00    	ja     c0005f50 <ff_wtoupper+0x1b8>
c0005da9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005dad:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005db2:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005db7:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005dbc:	77 0a                	ja     c0005dc8 <ff_wtoupper+0x30>
c0005dbe:	b8 80 fb 01 c0       	mov    eax,0xc001fb80
c0005dc3:	eb 0b                	jmp    c0005dd0 <ff_wtoupper+0x38>
c0005dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005dc8:	b8 c0 fa 01 c0       	mov    eax,0xc001fac0
c0005dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0005dd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dd8:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ddf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005de7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dec:	85 c0                	test   eax,eax
c0005dee:	0f 84 50 01 00 00    	je     c0005f44 <ff_wtoupper+0x1ac>
c0005df4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005df9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dfe:	39 c2                	cmp    edx,eax
c0005e00:	0f 82 3e 01 00 00    	jb     c0005f44 <ff_wtoupper+0x1ac>
c0005e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e0a:	8d 50 02             	lea    edx,[eax+0x2]
c0005e0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005e11:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e14:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e19:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005e1e:	c1 e8 08             	shr    eax,0x8
c0005e21:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005e26:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005e2b:	0f b6 c0             	movzx  eax,al
c0005e2e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e33:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e38:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e3d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e42:	01 ca                	add    edx,ecx
c0005e44:	39 d0                	cmp    eax,edx
c0005e46:	0f 8d d4 00 00 00    	jge    c0005f20 <ff_wtoupper+0x188>
c0005e4c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e51:	83 f8 08             	cmp    eax,0x8
c0005e54:	0f 87 e6 00 00 00    	ja     c0005f40 <ff_wtoupper+0x1a8>
c0005e5a:	8b 04 85 80 fa 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0580]
c0005e61:	ff e0                	jmp    eax
c0005e63:	90                   	nop
c0005e64:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e69:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e6e:	29 c2                	sub    edx,eax
c0005e70:	89 d0                	mov    eax,edx
c0005e72:	8d 14 00             	lea    edx,[eax+eax*1]
c0005e75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e79:	01 d0                	add    eax,edx
c0005e7b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e7e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e83:	e9 94 00 00 00       	jmp    c0005f1c <ff_wtoupper+0x184>
c0005e88:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e91:	89 d1                	mov    ecx,edx
c0005e93:	29 c1                	sub    ecx,eax
c0005e95:	89 c8                	mov    eax,ecx
c0005e97:	83 e0 01             	and    eax,0x1
c0005e9a:	89 c2                	mov    edx,eax
c0005e9c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea1:	29 d0                	sub    eax,edx
c0005ea3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ea8:	eb 72                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eaa:	66 90                	xchg   ax,ax
c0005eac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb1:	83 e8 10             	sub    eax,0x10
c0005eb4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eb9:	eb 61                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ebb:	90                   	nop
c0005ebc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec1:	83 e8 20             	sub    eax,0x20
c0005ec4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ec9:	eb 51                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ecb:	90                   	nop
c0005ecc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed1:	83 e8 30             	sub    eax,0x30
c0005ed4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ed9:	eb 41                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005edb:	90                   	nop
c0005edc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee1:	83 e8 1a             	sub    eax,0x1a
c0005ee4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ee9:	eb 31                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eeb:	90                   	nop
c0005eec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ef1:	83 c0 08             	add    eax,0x8
c0005ef4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ef9:	eb 21                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005efb:	90                   	nop
c0005efc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f01:	83 e8 50             	sub    eax,0x50
c0005f04:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f09:	eb 11                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005f0b:	90                   	nop
c0005f0c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f11:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005f16:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f1b:	90                   	nop
c0005f1c:	eb 22                	jmp    c0005f40 <ff_wtoupper+0x1a8>
c0005f1e:	66 90                	xchg   ax,ax
c0005f20:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f25:	85 c0                	test   eax,eax
c0005f27:	0f 85 a7 fe ff ff    	jne    c0005dd4 <ff_wtoupper+0x3c>
c0005f2d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f32:	d1 e0                	shl    eax,1
c0005f34:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f38:	e9 97 fe ff ff       	jmp    c0005dd4 <ff_wtoupper+0x3c>
c0005f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f40:	90                   	nop
c0005f41:	8d 76 00             	lea    esi,[esi+0x0]
c0005f44:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f54:	83 c4 10             	add    esp,0x10
c0005f57:	c3                   	ret    

c0005f58 <utf2ucs>:
c0005f58:	57                   	push   edi
c0005f59:	31 c9                	xor    ecx,ecx
c0005f5b:	56                   	push   esi
c0005f5c:	89 d7                	mov    edi,edx
c0005f5e:	53                   	push   ebx
c0005f5f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f63:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f67:	89 de                	mov    esi,ebx
c0005f69:	c1 fe 08             	sar    esi,0x8
c0005f6c:	89 f2                	mov    edx,esi
c0005f6e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f71:	41                   	inc    ecx
c0005f72:	85 db                	test   ebx,ebx
c0005f74:	75 e9                	jne    c0005f5f <utf2ucs+0x7>
c0005f76:	5b                   	pop    ebx
c0005f77:	5e                   	pop    esi
c0005f78:	5f                   	pop    edi
c0005f79:	c3                   	ret    

c0005f7a <ucs2utfn>:
c0005f7a:	83 e1 fe             	and    ecx,0xfffffffe
c0005f7d:	01 d1                	add    ecx,edx
c0005f7f:	39 d1                	cmp    ecx,edx
c0005f81:	75 04                	jne    c0005f87 <ucs2utfn+0xd>
c0005f83:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f86:	c3                   	ret    
c0005f87:	57                   	push   edi
c0005f88:	56                   	push   esi
c0005f89:	53                   	push   ebx
c0005f8a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f8d:	83 c2 02             	add    edx,0x2
c0005f90:	89 de                	mov    esi,ebx
c0005f92:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f96:	c1 e6 08             	shl    esi,0x8
c0005f99:	09 f3                	or     ebx,esi
c0005f9b:	83 fb 3b             	cmp    ebx,0x3b
c0005f9e:	74 50                	je     c0005ff0 <ucs2utfn+0x76>
c0005fa0:	83 fb 7f             	cmp    ebx,0x7f
c0005fa3:	7f 05                	jg     c0005faa <ucs2utfn+0x30>
c0005fa5:	88 18                	mov    BYTE PTR [eax],bl
c0005fa7:	40                   	inc    eax
c0005fa8:	eb 42                	jmp    c0005fec <ucs2utfn+0x72>
c0005faa:	89 df                	mov    edi,ebx
c0005fac:	89 de                	mov    esi,ebx
c0005fae:	c1 fe 06             	sar    esi,0x6
c0005fb1:	83 e7 3f             	and    edi,0x3f
c0005fb4:	83 cf 80             	or     edi,0xffffff80
c0005fb7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005fbd:	7f 12                	jg     c0005fd1 <ucs2utfn+0x57>
c0005fbf:	83 ce c0             	or     esi,0xffffffc0
c0005fc2:	83 c0 02             	add    eax,0x2
c0005fc5:	89 f3                	mov    ebx,esi
c0005fc7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fca:	89 fb                	mov    ebx,edi
c0005fcc:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fcf:	eb 1b                	jmp    c0005fec <ucs2utfn+0x72>
c0005fd1:	c1 fb 0c             	sar    ebx,0xc
c0005fd4:	83 e6 3f             	and    esi,0x3f
c0005fd7:	83 cb e0             	or     ebx,0xffffffe0
c0005fda:	83 ce 80             	or     esi,0xffffff80
c0005fdd:	88 18                	mov    BYTE PTR [eax],bl
c0005fdf:	89 f3                	mov    ebx,esi
c0005fe1:	83 c0 03             	add    eax,0x3
c0005fe4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fe7:	89 fb                	mov    ebx,edi
c0005fe9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fec:	39 d1                	cmp    ecx,edx
c0005fee:	75 9a                	jne    c0005f8a <ucs2utfn+0x10>
c0005ff0:	5b                   	pop    ebx
c0005ff1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005ff4:	5e                   	pop    esi
c0005ff5:	5f                   	pop    edi
c0005ff6:	c3                   	ret    

c0005ff7 <isjoliet>:
c0005ff7:	31 d2                	xor    edx,edx
c0005ff9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005ffc:	75 26                	jne    c0006024 <isjoliet+0x2d>
c0005ffe:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0006002:	75 20                	jne    c0006024 <isjoliet+0x2d>
c0006004:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0006008:	ba 02 00 00 00       	mov    edx,0x2
c000600d:	83 f8 43             	cmp    eax,0x43
c0006010:	74 12                	je     c0006024 <isjoliet+0x2d>
c0006012:	83 f8 45             	cmp    eax,0x45
c0006015:	ba 03 00 00 00       	mov    edx,0x3
c000601a:	74 08                	je     c0006024 <isjoliet+0x2d>
c000601c:	31 d2                	xor    edx,edx
c000601e:	83 f8 40             	cmp    eax,0x40
c0006021:	0f 94 c2             	sete   dl
c0006024:	89 d0                	mov    eax,edx
c0006026:	c3                   	ret    

c0006027 <htohl_32>:
c0006027:	8b 00                	mov    eax,DWORD PTR [eax]
c0006029:	c3                   	ret    

c000602a <iso_733>:
c000602a:	eb fb                	jmp    c0006027 <htohl_32>

c000602c <bgrad_cache>:
c000602c:	83 fa 0e             	cmp    edx,0xe
c000602f:	77 16                	ja     c0006047 <bgrad_cache+0x1b>
c0006031:	53                   	push   ebx
c0006032:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006035:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006039:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000603c:	42                   	inc    edx
c000603d:	83 fa 0f             	cmp    edx,0xf
c0006040:	75 f3                	jne    c0006035 <bgrad_cache+0x9>
c0006042:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006045:	5b                   	pop    ebx
c0006046:	c3                   	ret    
c0006047:	c3                   	ret    

c0006048 <ucscompare>:
c0006048:	55                   	push   ebp
c0006049:	57                   	push   edi
c000604a:	89 c7                	mov    edi,eax
c000604c:	56                   	push   esi
c000604d:	89 d6                	mov    esi,edx
c000604f:	53                   	push   ebx
c0006050:	31 d2                	xor    edx,edx
c0006052:	83 ec 1c             	sub    esp,0x1c
c0006055:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006059:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000605e:	c1 e3 08             	shl    ebx,0x8
c0006061:	09 c3                	or     ebx,eax
c0006063:	39 ca                	cmp    edx,ecx
c0006065:	7d 42                	jge    c00060a9 <ucscompare+0x61>
c0006067:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000606b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000606f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006073:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006078:	c1 e0 08             	shl    eax,0x8
c000607b:	09 e8                	or     eax,ebp
c000607d:	83 f8 3b             	cmp    eax,0x3b
c0006080:	74 27                	je     c00060a9 <ucscompare+0x61>
c0006082:	83 ec 0c             	sub    esp,0xc
c0006085:	50                   	push   eax
c0006086:	e8 f5 a8 ff ff       	call   c0000980 <tolower>
c000608b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000608e:	89 c5                	mov    ebp,eax
c0006090:	e8 eb a8 ff ff       	call   c0000980 <tolower>
c0006095:	83 c4 10             	add    esp,0x10
c0006098:	39 c5                	cmp    ebp,eax
c000609a:	75 20                	jne    c00060bc <ucscompare+0x74>
c000609c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00060a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00060a4:	83 c2 02             	add    edx,0x2
c00060a7:	eb ac                	jmp    c0006055 <ucscompare+0xd>
c00060a9:	83 fb 2f             	cmp    ebx,0x2f
c00060ac:	0f 95 c2             	setne  dl
c00060af:	31 c0                	xor    eax,eax
c00060b1:	85 db                	test   ebx,ebx
c00060b3:	0f 95 c0             	setne  al
c00060b6:	21 d0                	and    eax,edx
c00060b8:	f7 d8                	neg    eax
c00060ba:	eb 03                	jmp    c00060bf <ucscompare+0x77>
c00060bc:	83 c8 ff             	or     eax,0xffffffff
c00060bf:	83 c4 1c             	add    esp,0x1c
c00060c2:	5b                   	pop    ebx
c00060c3:	5e                   	pop    esi
c00060c4:	5f                   	pop    edi
c00060c5:	5d                   	pop    ebp
c00060c6:	c3                   	ret    

c00060c7 <fncompare>:
c00060c7:	55                   	push   ebp
c00060c8:	57                   	push   edi
c00060c9:	89 c7                	mov    edi,eax
c00060cb:	56                   	push   esi
c00060cc:	89 ce                	mov    esi,ecx
c00060ce:	53                   	push   ebx
c00060cf:	31 db                	xor    ebx,ebx
c00060d1:	83 ec 1c             	sub    esp,0x1c
c00060d4:	39 d3                	cmp    ebx,edx
c00060d6:	7d 45                	jge    c000611d <fncompare+0x56>
c00060d8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060dc:	83 f8 3b             	cmp    eax,0x3b
c00060df:	74 3c                	je     c000611d <fncompare+0x56>
c00060e1:	83 f8 2e             	cmp    eax,0x2e
c00060e4:	75 0e                	jne    c00060f4 <fncompare+0x2d>
c00060e6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060e9:	39 d9                	cmp    ecx,ebx
c00060eb:	74 30                	je     c000611d <fncompare+0x56>
c00060ed:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060f2:	74 29                	je     c000611d <fncompare+0x56>
c00060f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060f8:	83 ec 0c             	sub    esp,0xc
c00060fb:	50                   	push   eax
c00060fc:	e8 7f a8 ff ff       	call   c0000980 <tolower>
c0006101:	89 c5                	mov    ebp,eax
c0006103:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0006107:	89 04 24             	mov    DWORD PTR [esp],eax
c000610a:	e8 71 a8 ff ff       	call   c0000980 <tolower>
c000610f:	83 c4 10             	add    esp,0x10
c0006112:	39 c5                	cmp    ebp,eax
c0006114:	75 1e                	jne    c0006134 <fncompare+0x6d>
c0006116:	43                   	inc    ebx
c0006117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000611b:	eb b7                	jmp    c00060d4 <fncompare+0xd>
c000611d:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006121:	83 fa 2f             	cmp    edx,0x2f
c0006124:	0f 95 c1             	setne  cl
c0006127:	31 c0                	xor    eax,eax
c0006129:	85 d2                	test   edx,edx
c000612b:	0f 95 c0             	setne  al
c000612e:	21 c8                	and    eax,ecx
c0006130:	f7 d8                	neg    eax
c0006132:	eb 03                	jmp    c0006137 <fncompare+0x70>
c0006134:	83 c8 ff             	or     eax,0xffffffff
c0006137:	83 c4 1c             	add    esp,0x1c
c000613a:	5b                   	pop    ebx
c000613b:	5e                   	pop    esi
c000613c:	5f                   	pop    edi
c000613d:	5d                   	pop    ebp
c000613e:	c3                   	ret    

c000613f <bclear_cache>:
c000613f:	83 ec 18             	sub    esp,0x18
c0006142:	68 80 fe 01 c0       	push   0xc001fe80
c0006147:	e8 a0 36 01 00       	call   c00197ec <iso_kprintf>
c000614c:	83 c4 10             	add    esp,0x10
c000614f:	31 c0                	xor    eax,eax
c0006151:	8b 14 85 20 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdafe0]
c0006158:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000615e:	8b 14 85 80 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaf80]
c0006165:	40                   	inc    eax
c0006166:	83 f8 10             	cmp    eax,0x10
c0006169:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000616f:	75 e0                	jne    c0006151 <bclear_cache+0x12>
c0006171:	83 c4 0c             	add    esp,0xc
c0006174:	c3                   	ret    

c0006175 <bclear>:
c0006175:	eb c8                	jmp    c000613f <bclear_cache>

c0006177 <iso_break_all>:
c0006177:	83 ec 18             	sub    esp,0x18
c000617a:	68 8e fe 01 c0       	push   0xc001fe8e
c000617f:	e8 68 36 01 00       	call   c00197ec <iso_kprintf>
c0006184:	83 c4 10             	add    esp,0x10
c0006187:	31 c0                	xor    eax,eax
c0006189:	c7 80 d0 55 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdaa30],0x1
c0006193:	05 94 00 00 00       	add    eax,0x94
c0006198:	3d 40 09 00 00       	cmp    eax,0x940
c000619d:	75 ea                	jne    c0006189 <iso_break_all+0x12>
c000619f:	83 c4 0c             	add    esp,0xc
c00061a2:	c3                   	ret    

c00061a3 <isoReadDiscSector>:
c00061a3:	83 ec 0c             	sub    esp,0xc
c00061a6:	0f be 05 60 50 02 c0 	movsx  eax,BYTE PTR ds:0xc0025060
c00061ad:	50                   	push   eax
c00061ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061ba:	e8 d1 35 01 00       	call   c0019790 <isoReadDiscSectorHelper>
c00061bf:	83 c4 1c             	add    esp,0x1c
c00061c2:	c3                   	ret    

c00061c3 <bread_cache>:
c00061c3:	55                   	push   ebp
c00061c4:	57                   	push   edi
c00061c5:	89 d7                	mov    edi,edx
c00061c7:	56                   	push   esi
c00061c8:	ba 0f 00 00 00       	mov    edx,0xf
c00061cd:	53                   	push   ebx
c00061ce:	89 c6                	mov    esi,eax
c00061d0:	83 ec 0c             	sub    esp,0xc
c00061d3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061d6:	39 38                	cmp    DWORD PTR [eax],edi
c00061d8:	74 3c                	je     c0006216 <bread_cache+0x53>
c00061da:	4a                   	dec    edx
c00061db:	83 fa ff             	cmp    edx,0xffffffff
c00061de:	75 f3                	jne    c00061d3 <bread_cache+0x10>
c00061e0:	31 db                	xor    ebx,ebx
c00061e2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061e5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061e8:	74 08                	je     c00061f2 <bread_cache+0x2f>
c00061ea:	43                   	inc    ebx
c00061eb:	83 fb 10             	cmp    ebx,0x10
c00061ee:	75 f2                	jne    c00061e2 <bread_cache+0x1f>
c00061f0:	31 db                	xor    ebx,ebx
c00061f2:	50                   	push   eax
c00061f3:	6a 01                	push   0x1
c00061f5:	57                   	push   edi
c00061f6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061fc:	83 c0 04             	add    eax,0x4
c00061ff:	50                   	push   eax
c0006200:	e8 9e ff ff ff       	call   c00061a3 <isoReadDiscSector>
c0006205:	83 c4 10             	add    esp,0x10
c0006208:	83 c9 ff             	or     ecx,0xffffffff
c000620b:	85 c0                	test   eax,eax
c000620d:	78 13                	js     c0006222 <bread_cache+0x5f>
c000620f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006212:	89 da                	mov    edx,ebx
c0006214:	89 38                	mov    DWORD PTR [eax],edi
c0006216:	89 f0                	mov    eax,esi
c0006218:	e8 0f fe ff ff       	call   c000602c <bgrad_cache>
c000621d:	b9 0f 00 00 00       	mov    ecx,0xf
c0006222:	83 c4 0c             	add    esp,0xc
c0006225:	89 c8                	mov    eax,ecx
c0006227:	5b                   	pop    ebx
c0006228:	5e                   	pop    esi
c0006229:	5f                   	pop    edi
c000622a:	5d                   	pop    ebp
c000622b:	c3                   	ret    

c000622c <biread>:
c000622c:	89 c2                	mov    edx,eax
c000622e:	b8 80 50 02 c0       	mov    eax,0xc0025080
c0006233:	eb 8e                	jmp    c00061c3 <bread_cache>

c0006235 <bdread>:
c0006235:	89 c2                	mov    edx,eax
c0006237:	b8 20 50 02 c0       	mov    eax,0xc0025020
c000623c:	eb 85                	jmp    c00061c3 <bread_cache>

c000623e <strnicmp>:
c000623e:	55                   	push   ebp
c000623f:	57                   	push   edi
c0006240:	31 ff                	xor    edi,edi
c0006242:	56                   	push   esi
c0006243:	53                   	push   ebx
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000624b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000624f:	74 43                	je     c0006294 <strnicmp+0x56>
c0006251:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006255:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006259:	85 c0                	test   eax,eax
c000625b:	74 37                	je     c0006294 <strnicmp+0x56>
c000625d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006261:	85 d2                	test   edx,edx
c0006263:	74 2f                	je     c0006294 <strnicmp+0x56>
c0006265:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006268:	39 d0                	cmp    eax,edx
c000626a:	75 04                	jne    c0006270 <strnicmp+0x32>
c000626c:	89 ef                	mov    edi,ebp
c000626e:	eb db                	jmp    c000624b <strnicmp+0xd>
c0006270:	83 ec 0c             	sub    esp,0xc
c0006273:	50                   	push   eax
c0006274:	e8 07 a7 ff ff       	call   c0000980 <tolower>
c0006279:	89 c3                	mov    ebx,eax
c000627b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000627f:	89 ef                	mov    edi,ebp
c0006281:	89 04 24             	mov    DWORD PTR [esp],eax
c0006284:	e8 f7 a6 ff ff       	call   c0000980 <tolower>
c0006289:	83 c4 10             	add    esp,0x10
c000628c:	29 c3                	sub    ebx,eax
c000628e:	89 d8                	mov    eax,ebx
c0006290:	74 b9                	je     c000624b <strnicmp+0xd>
c0006292:	eb 02                	jmp    c0006296 <strnicmp+0x58>
c0006294:	31 c0                	xor    eax,eax
c0006296:	83 c4 0c             	add    esp,0xc
c0006299:	5b                   	pop    ebx
c000629a:	5e                   	pop    esi
c000629b:	5f                   	pop    edi
c000629c:	5d                   	pop    ebp
c000629d:	c3                   	ret    

c000629e <find_object>:
c000629e:	55                   	push   ebp
c000629f:	57                   	push   edi
c00062a0:	89 c7                	mov    edi,eax
c00062a2:	56                   	push   esi
c00062a3:	53                   	push   ebx
c00062a4:	89 d3                	mov    ebx,edx
c00062a6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00062ac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00062b0:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00062b7:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c00062be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00062c2:	74 0b                	je     c00062cf <find_object+0x31>
c00062c4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00062c8:	89 fa                	mov    edx,edi
c00062ca:	e8 89 fc ff ff       	call   c0005f58 <utf2ucs>
c00062cf:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062d6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00062db:	7e 11                	jle    c00062ee <find_object+0x50>
c00062dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062e1:	e8 46 ff ff ff       	call   c000622c <biread>
c00062e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062ea:	85 c0                	test   eax,eax
c00062ec:	79 07                	jns    c00062f5 <find_object+0x57>
c00062ee:	31 db                	xor    ebx,ebx
c00062f0:	e9 47 01 00 00       	jmp    c000643c <find_object+0x19e>
c00062f5:	31 ed                	xor    ebp,ebp
c00062f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062fb:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c0006302:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c0006306:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0006309:	85 f6                	test   esi,esi
c000630b:	75 0e                	jne    c000631b <find_object+0x7d>
c000630d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006311:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c0006319:	eb bb                	jmp    c00062d6 <find_object+0x38>
c000631b:	8b 0d b4 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025eb4
c0006321:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006325:	85 c9                	test   ecx,ecx
c0006327:	89 d0                	mov    eax,edx
c0006329:	74 2b                	je     c0006356 <find_object+0xb8>
c000632b:	8d 43 21             	lea    eax,[ebx+0x21]
c000632e:	89 d1                	mov    ecx,edx
c0006330:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006334:	e8 0f fd ff ff       	call   c0006048 <ucscompare>
c0006339:	85 c0                	test   eax,eax
c000633b:	0f 84 cd 00 00 00    	je     c000640e <find_object+0x170>
c0006341:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006344:	01 c5                	add    ebp,eax
c0006346:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000634c:	7f bf                	jg     c000630d <find_object+0x6f>
c000634e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006352:	7f a3                	jg     c00062f7 <find_object+0x59>
c0006354:	eb b7                	jmp    c000630d <find_object+0x6f>
c0006356:	29 d6                	sub    esi,edx
c0006358:	a8 01                	test   al,0x1
c000635a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000635e:	74 05                	je     c0006365 <find_object+0xc7>
c0006360:	83 ee 21             	sub    esi,0x21
c0006363:	eb 6a                	jmp    c00063cf <find_object+0x131>
c0006365:	42                   	inc    edx
c0006366:	83 ee 22             	sub    esi,0x22
c0006369:	eb 64                	jmp    c00063cf <find_object+0x131>
c000636b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000636e:	48                   	dec    eax
c000636f:	3c 01                	cmp    al,0x1
c0006371:	77 61                	ja     c00063d4 <find_object+0x136>
c0006373:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006377:	50                   	push   eax
c0006378:	6a 02                	push   0x2
c000637a:	68 9d fe 01 c0       	push   0xc001fe9d
c000637f:	52                   	push   edx
c0006380:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006384:	e8 87 a4 ff ff       	call   c0000810 <strncmp>
c0006389:	83 c4 10             	add    esp,0x10
c000638c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006390:	85 c0                	test   eax,eax
c0006392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006396:	75 2f                	jne    c00063c7 <find_object+0x129>
c0006398:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000639c:	50                   	push   eax
c000639d:	8d 42 05             	lea    eax,[edx+0x5]
c00063a0:	83 e9 05             	sub    ecx,0x5
c00063a3:	51                   	push   ecx
c00063a4:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00063a8:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00063ac:	50                   	push   eax
c00063ad:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063b1:	50                   	push   eax
c00063b2:	e8 d9 a2 ff ff       	call   c0000690 <strncpy>
c00063b7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00063bb:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00063c0:	83 c4 10             	add    esp,0x10
c00063c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063c7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00063cb:	29 c6                	sub    esi,eax
c00063cd:	01 c2                	add    edx,eax
c00063cf:	83 fe 03             	cmp    esi,0x3
c00063d2:	7f 97                	jg     c000636b <find_object+0xcd>
c00063d4:	85 c9                	test   ecx,ecx
c00063d6:	7e 40                	jle    c0006418 <find_object+0x17a>
c00063d8:	51                   	push   ecx
c00063d9:	51                   	push   ecx
c00063da:	6a 2f                	push   0x2f
c00063dc:	57                   	push   edi
c00063dd:	e8 ee a3 ff ff       	call   c00007d0 <strchr>
c00063e2:	83 c4 10             	add    esp,0x10
c00063e5:	85 c0                	test   eax,eax
c00063e7:	74 04                	je     c00063ed <find_object+0x14f>
c00063e9:	29 f8                	sub    eax,edi
c00063eb:	eb 0c                	jmp    c00063f9 <find_object+0x15b>
c00063ed:	83 ec 0c             	sub    esp,0xc
c00063f0:	57                   	push   edi
c00063f1:	e8 8a a1 ff ff       	call   c0000580 <strlen>
c00063f6:	83 c4 10             	add    esp,0x10
c00063f9:	52                   	push   edx
c00063fa:	50                   	push   eax
c00063fb:	57                   	push   edi
c00063fc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006400:	50                   	push   eax
c0006401:	e8 38 fe ff ff       	call   c000623e <strnicmp>
c0006406:	83 c4 10             	add    esp,0x10
c0006409:	e9 2b ff ff ff       	jmp    c0006339 <find_object+0x9b>
c000640e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006412:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006416:	eb 1e                	jmp    c0006436 <find_object+0x198>
c0006418:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c000641c:	8d 43 21             	lea    eax,[ebx+0x21]
c000641f:	89 f9                	mov    ecx,edi
c0006421:	e8 a1 fc ff ff       	call   c00060c7 <fncompare>
c0006426:	85 c0                	test   eax,eax
c0006428:	0f 85 13 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000642e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006432:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006436:	0f 85 05 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000643c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006442:	89 d8                	mov    eax,ebx
c0006444:	5b                   	pop    ebx
c0006445:	5e                   	pop    esi
c0006446:	5f                   	pop    edi
c0006447:	5d                   	pop    ebp
c0006448:	c3                   	ret    

c0006449 <find_object_path>:
c0006449:	55                   	push   ebp
c000644a:	57                   	push   edi
c000644b:	89 d7                	mov    edi,edx
c000644d:	56                   	push   esi
c000644e:	89 c6                	mov    esi,eax
c0006450:	53                   	push   ebx
c0006451:	89 cb                	mov    ebx,ecx
c0006453:	83 ec 0c             	sub    esp,0xc
c0006456:	50                   	push   eax
c0006457:	50                   	push   eax
c0006458:	6a 2f                	push   0x2f
c000645a:	56                   	push   esi
c000645b:	e8 70 a3 ff ff       	call   c00007d0 <strchr>
c0006460:	83 c4 10             	add    esp,0x10
c0006463:	85 c0                	test   eax,eax
c0006465:	89 c5                	mov    ebp,eax
c0006467:	74 3a                	je     c00064a3 <find_object_path+0x5a>
c0006469:	39 ee                	cmp    esi,ebp
c000646b:	74 31                	je     c000649e <find_object_path+0x55>
c000646d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006470:	e8 b5 fb ff ff       	call   c000602a <iso_733>
c0006475:	89 c2                	mov    edx,eax
c0006477:	8d 43 02             	lea    eax,[ebx+0x2]
c000647a:	e8 ab fb ff ff       	call   c000602a <iso_733>
c000647f:	83 ec 0c             	sub    esp,0xc
c0006482:	52                   	push   edx
c0006483:	89 c1                	mov    ecx,eax
c0006485:	ba 01 00 00 00       	mov    edx,0x1
c000648a:	89 f0                	mov    eax,esi
c000648c:	e8 0d fe ff ff       	call   c000629e <find_object>
c0006491:	83 c4 10             	add    esp,0x10
c0006494:	85 c0                	test   eax,eax
c0006496:	89 c3                	mov    ebx,eax
c0006498:	75 04                	jne    c000649e <find_object_path+0x55>
c000649a:	31 db                	xor    ebx,ebx
c000649c:	eb 36                	jmp    c00064d4 <find_object_path+0x8b>
c000649e:	8d 75 01             	lea    esi,[ebp+0x1]
c00064a1:	eb b3                	jmp    c0006456 <find_object_path+0xd>
c00064a3:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00064a6:	74 28                	je     c00064d0 <find_object_path+0x87>
c00064a8:	8d 43 0a             	lea    eax,[ebx+0xa]
c00064ab:	e8 7a fb ff ff       	call   c000602a <iso_733>
c00064b0:	89 c2                	mov    edx,eax
c00064b2:	8d 43 02             	lea    eax,[ebx+0x2]
c00064b5:	e8 70 fb ff ff       	call   c000602a <iso_733>
c00064ba:	83 ec 0c             	sub    esp,0xc
c00064bd:	52                   	push   edx
c00064be:	89 c1                	mov    ecx,eax
c00064c0:	89 fa                	mov    edx,edi
c00064c2:	89 f0                	mov    eax,esi
c00064c4:	e8 d5 fd ff ff       	call   c000629e <find_object>
c00064c9:	83 c4 10             	add    esp,0x10
c00064cc:	89 c3                	mov    ebx,eax
c00064ce:	eb 04                	jmp    c00064d4 <find_object_path+0x8b>
c00064d0:	85 ff                	test   edi,edi
c00064d2:	74 c6                	je     c000649a <find_object_path+0x51>
c00064d4:	83 c4 0c             	add    esp,0xc
c00064d7:	89 d8                	mov    eax,ebx
c00064d9:	5b                   	pop    ebx
c00064da:	5e                   	pop    esi
c00064db:	5f                   	pop    edi
c00064dc:	5d                   	pop    ebp
c00064dd:	c3                   	ret    

c00064de <stricmp>:
c00064de:	57                   	push   edi
c00064df:	56                   	push   esi
c00064e0:	31 f6                	xor    esi,esi
c00064e2:	53                   	push   ebx
c00064e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064e7:	83 ec 0c             	sub    esp,0xc
c00064ea:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064f6:	46                   	inc    esi
c00064f7:	50                   	push   eax
c00064f8:	e8 63 a4 ff ff       	call   c0000960 <toupper>
c00064fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006500:	e8 7b a4 ff ff       	call   c0000980 <tolower>
c0006505:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006508:	89 c3                	mov    ebx,eax
c000650a:	e8 51 a4 ff ff       	call   c0000960 <toupper>
c000650f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006512:	e8 69 a4 ff ff       	call   c0000980 <tolower>
c0006517:	83 c4 10             	add    esp,0x10
c000651a:	39 c3                	cmp    ebx,eax
c000651c:	75 04                	jne    c0006522 <stricmp+0x44>
c000651e:	85 db                	test   ebx,ebx
c0006520:	75 c1                	jne    c00064e3 <stricmp+0x5>
c0006522:	29 c3                	sub    ebx,eax
c0006524:	89 d8                	mov    eax,ebx
c0006526:	5b                   	pop    ebx
c0006527:	5e                   	pop    esi
c0006528:	5f                   	pop    edi
c0006529:	c3                   	ret    

c000652a <iso_open>:
c000652a:	57                   	push   edi
c000652b:	31 c0                	xor    eax,eax
c000652d:	56                   	push   esi
c000652e:	b9 80 5e 02 c0       	mov    ecx,0xc0025e80
c0006533:	53                   	push   ebx
c0006534:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006539:	0f 95 c0             	setne  al
c000653c:	89 c2                	mov    edx,eax
c000653e:	89 c6                	mov    esi,eax
c0006540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006544:	e8 00 ff ff ff       	call   c0006449 <find_object_path>
c0006549:	83 ca ff             	or     edx,0xffffffff
c000654c:	85 c0                	test   eax,eax
c000654e:	74 5e                	je     c00065ae <iso_open+0x84>
c0006550:	89 c1                	mov    ecx,eax
c0006552:	31 d2                	xor    edx,edx
c0006554:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000655a:	83 bf 40 55 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdaac0],0x0
c0006561:	75 42                	jne    c00065a5 <iso_open+0x7b>
c0006563:	c7 87 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdaac0],0xffffffff
c000656d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006570:	e8 b5 fa ff ff       	call   c000602a <iso_733>
c0006575:	89 b7 44 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaabc],esi
c000657b:	c7 87 48 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaab8],0x0
c0006585:	89 87 40 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaac0],eax
c000658b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000658e:	e8 97 fa ff ff       	call   c000602a <iso_733>
c0006593:	c7 87 d0 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaa30],0x0
c000659d:	89 87 4c 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaab4],eax
c00065a3:	eb 09                	jmp    c00065ae <iso_open+0x84>
c00065a5:	42                   	inc    edx
c00065a6:	83 fa 10             	cmp    edx,0x10
c00065a9:	75 a9                	jne    c0006554 <iso_open+0x2a>
c00065ab:	83 ca ff             	or     edx,0xffffffff
c00065ae:	5b                   	pop    ebx
c00065af:	89 d0                	mov    eax,edx
c00065b1:	5e                   	pop    esi
c00065b2:	5f                   	pop    edi
c00065b3:	c3                   	ret    

c00065b4 <iso_close>:
c00065b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065b8:	83 f8 0f             	cmp    eax,0xf
c00065bb:	7f 10                	jg     c00065cd <iso_close+0x19>
c00065bd:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065c3:	c7 80 40 55 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdaac0],0x0
c00065cd:	e9 6d fb ff ff       	jmp    c000613f <bclear_cache>

c00065d2 <iso_read>:
c00065d2:	55                   	push   ebp
c00065d3:	57                   	push   edi
c00065d4:	56                   	push   esi
c00065d5:	53                   	push   ebx
c00065d6:	83 ec 1c             	sub    esp,0x1c
c00065d9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065dd:	83 fd 0f             	cmp    ebp,0xf
c00065e0:	7e 0a                	jle    c00065ec <iso_read+0x1a>
c00065e2:	83 c8 ff             	or     eax,0xffffffff
c00065e5:	89 c2                	mov    edx,eax
c00065e7:	e9 f4 00 00 00       	jmp    c00066e0 <iso_read+0x10e>
c00065ec:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065f2:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c00065f9:	74 e7                	je     c00065e2 <iso_read+0x10>
c00065fb:	8b 95 d0 55 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdaa30]
c0006601:	85 d2                	test   edx,edx
c0006603:	75 dd                	jne    c00065e2 <iso_read+0x10>
c0006605:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000660a:	0f 84 cd 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006610:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c0006616:	8b 9d 4c 55 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffdaab4]
c000661c:	29 c3                	sub    ebx,eax
c000661e:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006622:	89 d9                	mov    ecx,ebx
c0006624:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006629:	85 c9                	test   ecx,ecx
c000662b:	0f 84 ac 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006631:	89 c6                	mov    esi,eax
c0006633:	bb 00 08 00 00       	mov    ebx,0x800
c0006638:	c1 e8 0b             	shr    eax,0xb
c000663b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006641:	03 85 40 55 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdaac0]
c0006647:	29 f3                	sub    ebx,esi
c0006649:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000664f:	75 3f                	jne    c0006690 <iso_read+0xbe>
c0006651:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006657:	7e 37                	jle    c0006690 <iso_read+0xbe>
c0006659:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000665f:	be 20 00 00 00       	mov    esi,0x20
c0006664:	7f 05                	jg     c000666b <iso_read+0x99>
c0006666:	89 ce                	mov    esi,ecx
c0006668:	c1 fe 0b             	sar    esi,0xb
c000666b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000666f:	89 f3                	mov    ebx,esi
c0006671:	52                   	push   edx
c0006672:	56                   	push   esi
c0006673:	50                   	push   eax
c0006674:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006678:	c1 e3 0b             	shl    ebx,0xb
c000667b:	e8 23 fb ff ff       	call   c00061a3 <isoReadDiscSector>
c0006680:	83 c4 10             	add    esp,0x10
c0006683:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006687:	85 c0                	test   eax,eax
c0006689:	7f 3d                	jg     c00066c8 <iso_read+0xf6>
c000668b:	e9 52 ff ff ff       	jmp    c00065e2 <iso_read+0x10>
c0006690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006694:	39 d9                	cmp    ecx,ebx
c0006696:	0f 4e d9             	cmovle ebx,ecx
c0006699:	e8 97 fb ff ff       	call   c0006235 <bdread>
c000669e:	85 c0                	test   eax,eax
c00066a0:	0f 88 3c ff ff ff    	js     c00065e2 <iso_read+0x10>
c00066a6:	8b 0c 85 20 50 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdafe0]
c00066ad:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c00066b3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066b7:	25 ff 07 00 00       	and    eax,0x7ff
c00066bc:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066c0:	89 d9                	mov    ecx,ebx
c00066c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066c8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066cc:	01 da                	add    edx,ebx
c00066ce:	01 9d 48 55 02 c0    	add    DWORD PTR [ebp-0x3ffdaab8],ebx
c00066d4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066d8:	e9 28 ff ff ff       	jmp    c0006605 <iso_read+0x33>
c00066dd:	89 d0                	mov    eax,edx
c00066df:	99                   	cdq    
c00066e0:	83 c4 1c             	add    esp,0x1c
c00066e3:	5b                   	pop    ebx
c00066e4:	5e                   	pop    esi
c00066e5:	5f                   	pop    edi
c00066e6:	5d                   	pop    ebp
c00066e7:	c3                   	ret    

c00066e8 <iso_seek>:
c00066e8:	55                   	push   ebp
c00066e9:	83 c8 ff             	or     eax,0xffffffff
c00066ec:	57                   	push   edi
c00066ed:	89 c2                	mov    edx,eax
c00066ef:	56                   	push   esi
c00066f0:	53                   	push   ebx
c00066f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066fd:	83 fe 0f             	cmp    esi,0xf
c0006700:	7f 65                	jg     c0006767 <iso_seek+0x7f>
c0006702:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006708:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c000670f:	8d 8d 40 55 02 c0    	lea    ecx,[ebp-0x3ffdaac0]
c0006715:	74 50                	je     c0006767 <iso_seek+0x7f>
c0006717:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c000671e:	75 47                	jne    c0006767 <iso_seek+0x7f>
c0006720:	83 fb 01             	cmp    ebx,0x1
c0006723:	74 0e                	je     c0006733 <iso_seek+0x4b>
c0006725:	83 fb 02             	cmp    ebx,0x2
c0006728:	74 0e                	je     c0006738 <iso_seek+0x50>
c000672a:	85 db                	test   ebx,ebx
c000672c:	75 39                	jne    c0006767 <iso_seek+0x7f>
c000672e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006731:	eb 0d                	jmp    c0006740 <iso_seek+0x58>
c0006733:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006736:	eb 08                	jmp    c0006740 <iso_seek+0x58>
c0006738:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000673b:	01 f8                	add    eax,edi
c000673d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006740:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006746:	8b 88 4c 55 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdaab4]
c000674c:	05 40 55 02 c0       	add    eax,0xc0025540
c0006751:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006754:	76 03                	jbe    c0006759 <iso_seek+0x71>
c0006756:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006759:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000675f:	8b 82 48 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab8]
c0006765:	31 d2                	xor    edx,edx
c0006767:	5b                   	pop    ebx
c0006768:	5e                   	pop    esi
c0006769:	5f                   	pop    edi
c000676a:	5d                   	pop    ebp
c000676b:	c3                   	ret    

c000676c <iso_tell>:
c000676c:	53                   	push   ebx
c000676d:	83 c8 ff             	or     eax,0xffffffff
c0006770:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006774:	89 c2                	mov    edx,eax
c0006776:	83 f9 0f             	cmp    ecx,0xf
c0006779:	7f 20                	jg     c000679b <iso_tell+0x2f>
c000677b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006781:	83 bb 40 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaac0],0x0
c0006788:	74 11                	je     c000679b <iso_tell+0x2f>
c000678a:	83 bb d0 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaa30],0x0
c0006791:	75 08                	jne    c000679b <iso_tell+0x2f>
c0006793:	8b 83 48 55 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdaab8]
c0006799:	31 d2                	xor    edx,edx
c000679b:	5b                   	pop    ebx
c000679c:	c3                   	ret    

c000679d <iso_total>:
c000679d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067a1:	83 c8 ff             	or     eax,0xffffffff
c00067a4:	83 fa 0f             	cmp    edx,0xf
c00067a7:	7f 1e                	jg     c00067c7 <iso_total+0x2a>
c00067a9:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c00067af:	83 ba 40 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaac0],0x0
c00067b6:	74 0f                	je     c00067c7 <iso_total+0x2a>
c00067b8:	83 ba d0 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaa30],0x0
c00067bf:	75 06                	jne    c00067c7 <iso_total+0x2a>
c00067c1:	8b 82 4c 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab4]
c00067c7:	c3                   	ret    

c00067c8 <fn_postprocess>:
c00067c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067cc:	89 d0                	mov    eax,edx
c00067ce:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067d1:	85 c9                	test   ecx,ecx
c00067d3:	74 08                	je     c00067dd <fn_postprocess+0x15>
c00067d5:	83 f9 3b             	cmp    ecx,0x3b
c00067d8:	74 03                	je     c00067dd <fn_postprocess+0x15>
c00067da:	40                   	inc    eax
c00067db:	eb f1                	jmp    c00067ce <fn_postprocess+0x6>
c00067dd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067e0:	39 d0                	cmp    eax,edx
c00067e2:	76 0a                	jbe    c00067ee <fn_postprocess+0x26>
c00067e4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067e8:	75 04                	jne    c00067ee <fn_postprocess+0x26>
c00067ea:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067ee:	c3                   	ret    

c00067ef <iso_readdir>:
c00067ef:	55                   	push   ebp
c00067f0:	57                   	push   edi
c00067f1:	56                   	push   esi
c00067f2:	53                   	push   ebx
c00067f3:	83 ec 1c             	sub    esp,0x1c
c00067f6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067fa:	83 fb 0f             	cmp    ebx,0xf
c00067fd:	7f 28                	jg     c0006827 <iso_readdir+0x38>
c00067ff:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006805:	83 b8 40 55 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdaac0],0x0
c000680c:	8d b8 40 55 02 c0    	lea    edi,[eax-0x3ffdaac0]
c0006812:	74 13                	je     c0006827 <iso_readdir+0x38>
c0006814:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006818:	74 0d                	je     c0006827 <iso_readdir+0x38>
c000681a:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006821:	0f 84 b1 00 00 00    	je     c00068d8 <iso_readdir+0xe9>
c0006827:	83 ec 0c             	sub    esp,0xc
c000682a:	68 a0 fe 01 c0       	push   0xc001fea0
c000682f:	e8 b8 2f 01 00       	call   c00197ec <iso_kprintf>
c0006834:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006837:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000683d:	e8 c6 2f 01 00       	call   c0019808 <iso_kprintfd>
c0006842:	c7 04 24 a5 fe 01 c0 	mov    DWORD PTR [esp],0xc001fea5
c0006849:	e8 9e 2f 01 00       	call   c00197ec <iso_kprintf>
c000684e:	58                   	pop    eax
c000684f:	ff b3 40 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaac0]
c0006855:	e8 ae 2f 01 00       	call   c0019808 <iso_kprintfd>
c000685a:	c7 04 24 ab fe 01 c0 	mov    DWORD PTR [esp],0xc001feab
c0006861:	e8 86 2f 01 00       	call   c00197ec <iso_kprintf>
c0006866:	58                   	pop    eax
c0006867:	ff b3 44 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaabc]
c000686d:	e8 96 2f 01 00       	call   c0019808 <iso_kprintfd>
c0006872:	c7 04 24 b1 fe 01 c0 	mov    DWORD PTR [esp],0xc001feb1
c0006879:	e8 6e 2f 01 00       	call   c00197ec <iso_kprintf>
c000687e:	58                   	pop    eax
c000687f:	ff b3 d0 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaa30]
c0006885:	e8 7e 2f 01 00       	call   c0019808 <iso_kprintfd>
c000688a:	83 c4 10             	add    esp,0x10
c000688d:	eb 42                	jmp    c00068d1 <iso_readdir+0xe2>
c000688f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006892:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c0006899:	89 d1                	mov    ecx,edx
c000689b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00068a1:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c00068a5:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00068a8:	75 35                	jne    c00068df <iso_readdir+0xf0>
c00068aa:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c00068b0:	81 c2 00 08 00 00    	add    edx,0x800
c00068b6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00068b9:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00068bc:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068bf:	73 1e                	jae    c00068df <iso_readdir+0xf0>
c00068c1:	8b 07                	mov    eax,DWORD PTR [edi]
c00068c3:	c1 ea 0b             	shr    edx,0xb
c00068c6:	01 d0                	add    eax,edx
c00068c8:	e8 5f f9 ff ff       	call   c000622c <biread>
c00068cd:	85 c0                	test   eax,eax
c00068cf:	79 be                	jns    c000688f <iso_readdir+0xa0>
c00068d1:	31 c0                	xor    eax,eax
c00068d3:	e9 6a 01 00 00       	jmp    c0006a42 <iso_readdir+0x253>
c00068d8:	31 f6                	xor    esi,esi
c00068da:	83 c8 ff             	or     eax,0xffffffff
c00068dd:	eb da                	jmp    c00068b9 <iso_readdir+0xca>
c00068df:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068e5:	8b ba 48 55 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdaab8]
c00068eb:	81 c2 40 55 02 c0    	add    edx,0xc0025540
c00068f1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068f4:	73 db                	jae    c00068d1 <iso_readdir+0xe2>
c00068f6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068fa:	75 34                	jne    c0006930 <iso_readdir+0x141>
c00068fc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006900:	75 2e                	jne    c0006930 <iso_readdir+0x141>
c0006902:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006905:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c000690c:	01 f9                	add    ecx,edi
c000690e:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006911:	89 c8                	mov    eax,ecx
c0006913:	25 ff 07 00 00       	and    eax,0x7ff
c0006918:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c000691d:	01 c8                	add    eax,ecx
c000691f:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006922:	25 ff 07 00 00       	and    eax,0x7ff
c0006927:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000692b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000692e:	74 a1                	je     c00068d1 <iso_readdir+0xe2>
c0006930:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006936:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000693a:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006941:	8d 56 21             	lea    edx,[esi+0x21]
c0006944:	8d af 58 55 02 c0    	lea    ebp,[edi-0x3ffdaaa8]
c000694a:	74 0c                	je     c0006958 <iso_readdir+0x169>
c000694c:	89 e8                	mov    eax,ebp
c000694e:	e8 27 f6 ff ff       	call   c0005f7a <ucs2utfn>
c0006953:	e9 b1 00 00 00       	jmp    c0006a09 <iso_readdir+0x21a>
c0006958:	50                   	push   eax
c0006959:	51                   	push   ecx
c000695a:	52                   	push   edx
c000695b:	55                   	push   ebp
c000695c:	e8 2f 9d ff ff       	call   c0000690 <strncpy>
c0006961:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006965:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006968:	c6 84 07 58 55 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdaaa8],0x0
c0006970:	e8 53 fe ff ff       	call   c00067c8 <fn_postprocess>
c0006975:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000697f:	89 d1                	mov    ecx,edx
c0006981:	29 d0                	sub    eax,edx
c0006983:	80 e1 01             	and    cl,0x1
c0006986:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c000698a:	74 05                	je     c0006991 <iso_readdir+0x1a2>
c000698c:	83 e8 21             	sub    eax,0x21
c000698f:	eb 04                	jmp    c0006995 <iso_readdir+0x1a6>
c0006991:	42                   	inc    edx
c0006992:	83 e8 22             	sub    eax,0x22
c0006995:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006999:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000699f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00069a3:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c00069a8:	7e 5f                	jle    c0006a09 <iso_readdir+0x21a>
c00069aa:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c00069ad:	48                   	dec    eax
c00069ae:	3c 01                	cmp    al,0x1
c00069b0:	77 57                	ja     c0006a09 <iso_readdir+0x21a>
c00069b2:	51                   	push   ecx
c00069b3:	6a 02                	push   0x2
c00069b5:	68 9d fe 01 c0       	push   0xc001fe9d
c00069ba:	52                   	push   edx
c00069bb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00069bf:	e8 4c 9e ff ff       	call   c0000810 <strncmp>
c00069c4:	83 c4 10             	add    esp,0x10
c00069c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069cb:	85 c0                	test   eax,eax
c00069cd:	75 2e                	jne    c00069fd <iso_readdir+0x20e>
c00069cf:	50                   	push   eax
c00069d0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069d4:	83 e8 05             	sub    eax,0x5
c00069d7:	50                   	push   eax
c00069d8:	8d 42 05             	lea    eax,[edx+0x5]
c00069db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00069df:	50                   	push   eax
c00069e0:	55                   	push   ebp
c00069e1:	e8 aa 9c ff ff       	call   c0000690 <strncpy>
c00069e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00069ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00069ee:	83 c4 10             	add    esp,0x10
c00069f1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069f5:	c6 84 08 53 55 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdaaad],0x0
c00069fd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006a01:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006a05:	01 c2                	add    edx,eax
c0006a07:	eb 9a                	jmp    c00069a3 <iso_readdir+0x1b4>
c0006a09:	83 c8 ff             	or     eax,0xffffffff
c0006a0c:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006a10:	89 c2                	mov    edx,eax
c0006a12:	75 0a                	jne    c0006a1e <iso_readdir+0x22f>
c0006a14:	8d 46 0a             	lea    eax,[esi+0xa]
c0006a17:	e8 0e f6 ff ff       	call   c000602a <iso_733>
c0006a1c:	31 d2                	xor    edx,edx
c0006a1e:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a24:	89 83 50 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaab0],eax
c0006a2a:	89 93 54 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaaac],edx
c0006a30:	81 c3 40 55 02 c0    	add    ebx,0xc0025540
c0006a36:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a39:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a3c:	8d 87 50 55 02 c0    	lea    eax,[edi-0x3ffdaab0]
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	5b                   	pop    ebx
c0006a46:	5e                   	pop    esi
c0006a47:	5f                   	pop    edi
c0006a48:	5d                   	pop    ebp
c0006a49:	c3                   	ret    

c0006a4a <iso_reset>:
c0006a4a:	83 ec 18             	sub    esp,0x18
c0006a4d:	68 ba fe 01 c0       	push   0xc001feba
c0006a52:	e8 95 2d 01 00       	call   c00197ec <iso_kprintf>
c0006a57:	e8 1b f7 ff ff       	call   c0006177 <iso_break_all>
c0006a5c:	e8 14 f7 ff ff       	call   c0006175 <bclear>
c0006a61:	31 c0                	xor    eax,eax
c0006a63:	83 c4 1c             	add    esp,0x1c
c0006a66:	c3                   	ret    

c0006a67 <init_percd>:
c0006a67:	57                   	push   edi
c0006a68:	56                   	push   esi
c0006a69:	53                   	push   ebx
c0006a6a:	bb 01 00 00 00       	mov    ebx,0x1
c0006a6f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006a73:	a2 60 50 02 c0       	mov    ds:0xc0025060,al
c0006a78:	e8 cd ff ff ff       	call   c0006a4a <iso_reset>
c0006a7d:	c7 05 b4 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb4,0x0
c0006a87:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006a8c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a90:	e8 97 f7 ff ff       	call   c000622c <biread>
c0006a95:	85 c0                	test   eax,eax
c0006a97:	89 c6                	mov    esi,eax
c0006a99:	0f 88 ba 00 00 00    	js     c0006b59 <init_percd+0xf2>
c0006a9f:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c0006aa6:	52                   	push   edx
c0006aa7:	6a 06                	push   0x6
c0006aa9:	68 c5 fe 01 c0       	push   0xc001fec5
c0006aae:	83 c0 04             	add    eax,0x4
c0006ab1:	50                   	push   eax
c0006ab2:	e8 c9 98 ff ff       	call   c0000380 <memcmp>
c0006ab7:	83 c4 10             	add    esp,0x10
c0006aba:	85 c0                	test   eax,eax
c0006abc:	74 08                	je     c0006ac6 <init_percd+0x5f>
c0006abe:	43                   	inc    ebx
c0006abf:	83 fb 04             	cmp    ebx,0x4
c0006ac2:	75 c3                	jne    c0006a87 <init_percd+0x20>
c0006ac4:	eb 1a                	jmp    c0006ae0 <init_percd+0x79>
c0006ac6:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006acd:	83 c0 5c             	add    eax,0x5c
c0006ad0:	e8 22 f5 ff ff       	call   c0005ff7 <isjoliet>
c0006ad5:	a3 b4 5e 02 c0       	mov    ds:0xc0025eb4,eax
c0006ada:	85 c0                	test   eax,eax
c0006adc:	74 e0                	je     c0006abe <init_percd+0x57>
c0006ade:	eb 3e                	jmp    c0006b1e <init_percd+0xb7>
c0006ae0:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006ae7:	75 35                	jne    c0006b1e <init_percd+0xb7>
c0006ae9:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006aee:	83 c0 10             	add    eax,0x10
c0006af1:	e8 36 f7 ff ff       	call   c000622c <biread>
c0006af6:	85 c0                	test   eax,eax
c0006af8:	89 c6                	mov    esi,eax
c0006afa:	78 5f                	js     c0006b5b <init_percd+0xf4>
c0006afc:	50                   	push   eax
c0006afd:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006b04:	83 cb ff             	or     ebx,0xffffffff
c0006b07:	6a 06                	push   0x6
c0006b09:	68 cc fe 01 c0       	push   0xc001fecc
c0006b0e:	83 c0 04             	add    eax,0x4
c0006b11:	50                   	push   eax
c0006b12:	e8 69 98 ff ff       	call   c0000380 <memcmp>
c0006b17:	83 c4 10             	add    esp,0x10
c0006b1a:	85 c0                	test   eax,eax
c0006b1c:	75 3d                	jne    c0006b5b <init_percd+0xf4>
c0006b1e:	8b 34 b5 80 50 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdaf80]
c0006b25:	bf 80 5e 02 c0       	mov    edi,0xc0025e80
c0006b2a:	b9 22 00 00 00       	mov    ecx,0x22
c0006b2f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b37:	b8 82 5e 02 c0       	mov    eax,0xc0025e82
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	e8 e7 f4 ff ff       	call   c000602a <iso_733>
c0006b43:	a3 a8 5e 02 c0       	mov    ds:0xc0025ea8,eax
c0006b48:	b8 8a 5e 02 c0       	mov    eax,0xc0025e8a
c0006b4d:	e8 d8 f4 ff ff       	call   c000602a <iso_733>
c0006b52:	a3 a4 5e 02 c0       	mov    ds:0xc0025ea4,eax
c0006b57:	eb 02                	jmp    c0006b5b <init_percd+0xf4>
c0006b59:	89 c3                	mov    ebx,eax
c0006b5b:	89 d8                	mov    eax,ebx
c0006b5d:	5b                   	pop    ebx
c0006b5e:	5e                   	pop    esi
c0006b5f:	5f                   	pop    edi
c0006b60:	c3                   	ret    

c0006b61 <iso_ioctl>:
c0006b61:	83 ec 18             	sub    esp,0x18
c0006b64:	68 d3 fe 01 c0       	push   0xc001fed3
c0006b69:	e8 7e 2c 01 00       	call   c00197ec <iso_kprintf>
c0006b6e:	e8 d7 fe ff ff       	call   c0006a4a <iso_reset>
c0006b73:	31 c0                	xor    eax,eax
c0006b75:	83 c4 1c             	add    esp,0x1c
c0006b78:	c3                   	ret    

c0006b79 <fs_iso9660_init>:
c0006b79:	53                   	push   ebx
c0006b7a:	31 db                	xor    ebx,ebx
c0006b7c:	83 ec 14             	sub    esp,0x14
c0006b7f:	68 de fe 01 c0       	push   0xc001fede
c0006b84:	e8 63 2c 01 00       	call   c00197ec <iso_kprintf>
c0006b89:	83 c4 0c             	add    esp,0xc
c0006b8c:	68 40 09 00 00       	push   0x940
c0006b91:	6a 00                	push   0x0
c0006b93:	68 40 55 02 c0       	push   0xc0025540
c0006b98:	e8 53 99 ff ff       	call   c00004f0 <memset>
c0006b9d:	c7 05 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0025540,0xffffffff
c0006ba7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bae:	e8 18 0f 00 00       	call   c0007acb <malloc>
c0006bb3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bba:	a3 b0 5e 02 c0       	mov    ds:0xc0025eb0,eax
c0006bbf:	e8 07 0f 00 00       	call   c0007acb <malloc>
c0006bc4:	83 c4 10             	add    esp,0x10
c0006bc7:	a3 20 55 02 c0       	mov    ds:0xc0025520,eax
c0006bcc:	83 ec 0c             	sub    esp,0xc
c0006bcf:	68 04 08 00 00       	push   0x804
c0006bd4:	e8 f2 0e 00 00       	call   c0007acb <malloc>
c0006bd9:	89 04 9d 80 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdaf80],eax
c0006be0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bed:	e8 d9 0e 00 00       	call   c0007acb <malloc>
c0006bf2:	83 c4 10             	add    esp,0x10
c0006bf5:	89 04 9d 20 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdafe0],eax
c0006bfc:	43                   	inc    ebx
c0006bfd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006c03:	83 fb 10             	cmp    ebx,0x10
c0006c06:	75 c4                	jne    c0006bcc <fs_iso9660_init+0x53>
c0006c08:	83 c4 08             	add    esp,0x8
c0006c0b:	31 c0                	xor    eax,eax
c0006c0d:	5b                   	pop    ebx
c0006c0e:	c3                   	ret    

c0006c0f <fs_iso9660_shutdown>:
c0006c0f:	53                   	push   ebx
c0006c10:	31 db                	xor    ebx,ebx
c0006c12:	83 ec 08             	sub    esp,0x8
c0006c15:	83 ec 0c             	sub    esp,0xc
c0006c18:	ff 34 9d 80 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdaf80]
c0006c1f:	e8 b7 0e 00 00       	call   c0007adb <free>
c0006c24:	58                   	pop    eax
c0006c25:	ff 34 9d 20 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdafe0]
c0006c2c:	43                   	inc    ebx
c0006c2d:	e8 a9 0e 00 00       	call   c0007adb <free>
c0006c32:	83 c4 10             	add    esp,0x10
c0006c35:	83 fb 10             	cmp    ebx,0x10
c0006c38:	75 db                	jne    c0006c15 <fs_iso9660_shutdown+0x6>
c0006c3a:	a1 b0 5e 02 c0       	mov    eax,ds:0xc0025eb0
c0006c3f:	85 c0                	test   eax,eax
c0006c41:	74 0c                	je     c0006c4f <fs_iso9660_shutdown+0x40>
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	50                   	push   eax
c0006c47:	e8 8f 0e 00 00       	call   c0007adb <free>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	a1 20 55 02 c0       	mov    eax,ds:0xc0025520
c0006c54:	85 c0                	test   eax,eax
c0006c56:	74 0c                	je     c0006c64 <fs_iso9660_shutdown+0x55>
c0006c58:	83 ec 0c             	sub    esp,0xc
c0006c5b:	50                   	push   eax
c0006c5c:	e8 7a 0e 00 00       	call   c0007adb <free>
c0006c61:	83 c4 10             	add    esp,0x10
c0006c64:	c7 05 20 55 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025520,0x0
c0006c6e:	31 c0                	xor    eax,eax
c0006c70:	c7 05 b0 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb0,0x0
c0006c7a:	83 c4 08             	add    esp,0x8
c0006c7d:	5b                   	pop    ebx
c0006c7e:	c3                   	ret    
c0006c7f:	90                   	nop

c0006c80 <Computer::close(int, int, void*)>:
c0006c80:	57                   	push   edi
c0006c81:	56                   	push   esi
c0006c82:	53                   	push   ebx
c0006c83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c87:	83 ec 0c             	sub    esp,0xc
c0006c8a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0006c8e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0006c92:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c98:	50                   	push   eax
c0006c99:	e8 08 55 00 00       	call   c000c1a6 <Device::closeAll()>
c0006c9e:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006ca4:	83 c4 10             	add    esp,0x10
c0006ca7:	8b 10                	mov    edx,DWORD PTR [eax]
c0006ca9:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006cad:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006cb5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006cb9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006cbd:	5b                   	pop    ebx
c0006cbe:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006cc1:	5e                   	pop    esi
c0006cc2:	5f                   	pop    edi
c0006cc3:	ff e0                	jmp    eax

c0006cc5 <Krnl::firstTask()>:
c0006cc5:	53                   	push   ebx
c0006cc6:	83 ec 14             	sub    esp,0x14
c0006cc9:	fb                   	sti    
c0006cca:	68 ef fe 01 c0       	push   0xc001feef
c0006ccf:	e8 c7 97 00 00       	call   c001049b <KeSetBootMessage(char const*)>
c0006cd4:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006cdb:	e8 eb 0d 00 00       	call   c0007acb <malloc>
c0006ce0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006ce7:	89 c3                	mov    ebx,eax
c0006ce9:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0006cee:	50                   	push   eax
c0006cef:	68 08 ff 01 c0       	push   0xc001ff08
c0006cf4:	6a 01                	push   0x1
c0006cf6:	53                   	push   ebx
c0006cf7:	e8 08 e3 00 00       	call   c0015004 <Process::Process(bool, char const*, Process*, char**)>
c0006cfc:	83 c4 20             	add    esp,0x20
c0006cff:	68 ff 00 00 00       	push   0xff
c0006d04:	6a 00                	push   0x0
c0006d06:	68 15 75 00 c0       	push   0xc0007515
c0006d0b:	53                   	push   ebx
c0006d0c:	e8 17 e5 00 00       	call   c0015228 <Process::createThread(void (*)(void*), void*, int)>
c0006d11:	8b 15 90 91 02 c0    	mov    edx,DWORD PTR ds:0xc0029190
c0006d17:	6a 7a                	push   0x7a
c0006d19:	6a 00                	push   0x0
c0006d1b:	68 ec 5c 01 c0       	push   0xc0015cec
c0006d20:	52                   	push   edx
c0006d21:	e8 02 e5 00 00       	call   c0015228 <Process::createThread(void (*)(void*), void*, int)>
c0006d26:	83 c4 20             	add    esp,0x20
c0006d29:	c6 05 bd 5e 02 c0 01 	mov    BYTE PTR ds:0xc0025ebd,0x1
c0006d30:	a3 48 91 02 c0       	mov    ds:0xc0029148,eax
c0006d35:	e8 ee 9f 00 00       	call   c0010d28 <KeInitRand()>
c0006d3a:	83 ec 0c             	sub    esp,0xc
c0006d3d:	68 04 00 02 c0       	push   0xc0020004
c0006d42:	e8 54 97 00 00       	call   c001049b <KeSetBootMessage(char const*)>
c0006d47:	e8 c3 f3 00 00       	call   c001610f <Vm::initialise8086()>
c0006d4c:	e8 23 42 00 00       	call   c000af74 <Fs::initVFS()>
c0006d51:	c7 04 24 15 ff 01 c0 	mov    DWORD PTR [esp],0xc001ff15
c0006d58:	e8 3e 97 00 00       	call   c001049b <KeSetBootMessage(char const*)>
c0006d5d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006d62:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d68:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d6a:	6a 00                	push   0x0
c0006d6c:	6a 00                	push   0x0
c0006d6e:	6a 00                	push   0x0
c0006d70:	50                   	push   eax
c0006d71:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d74:	83 c4 14             	add    esp,0x14
c0006d77:	68 04 00 02 c0       	push   0xc0020004
c0006d7c:	e8 1a 97 00 00       	call   c001049b <KeSetBootMessage(char const*)>
c0006d81:	e8 4e 9c 00 00       	call   c00109d4 <KeLoadSystemEnv()>
c0006d86:	e8 ab 9e 00 00       	call   c0010c36 <KeSetupPowerManager()>
c0006d8b:	83 c4 0c             	add    esp,0xc
c0006d8e:	6a 3a                	push   0x3a
c0006d90:	68 2f ff 01 c0       	push   0xc001ff2f
c0006d95:	68 38 ff 01 c0       	push   0xc001ff38
c0006d9a:	e8 93 c4 00 00       	call   c0013232 <Reg::readIntWithDefault(char*, char*, int)>
c0006d9f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006da2:	e8 59 4d 00 00       	call   c000bb00 <User::loadClockSettings(int)>
c0006da7:	c7 04 24 28 00 02 c0 	mov    DWORD PTR [esp],0xc0020028
c0006dae:	e8 e8 96 00 00       	call   c001049b <KeSetBootMessage(char const*)>
c0006db3:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006db8:	59                   	pop    ecx
c0006db9:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006dbf:	53                   	push   ebx
c0006dc0:	e8 df 53 00 00       	call   c000c1a4 <Device::loadDriversForAll()>
c0006dc5:	c7 04 24 40 ff 01 c0 	mov    DWORD PTR [esp],0xc001ff40
c0006dcc:	e8 ca 96 00 00       	call   c001049b <KeSetBootMessage(char const*)>
c0006dd1:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c0006dd7:	58                   	pop    eax
c0006dd8:	5a                   	pop    edx
c0006dd9:	6a 01                	push   0x1
c0006ddb:	68 51 ff 01 c0       	push   0xc001ff51
c0006de0:	e8 23 dc 00 00       	call   c0014a08 <Thr::loadDLL(char const*, bool)>
c0006de5:	59                   	pop    ecx
c0006de6:	5a                   	pop    edx
c0006de7:	53                   	push   ebx
c0006de8:	50                   	push   eax
c0006de9:	e8 5a de 00 00       	call   c0014c48 <Thr::executeDLL(unsigned long, void*)>
c0006dee:	83 c4 10             	add    esp,0x10
c0006df1:	83 ec 0c             	sub    esp,0xc
c0006df4:	6a 02                	push   0x2
c0006df6:	e8 79 e8 00 00       	call   c0015674 <blockTask(TaskState)>
c0006dfb:	83 c4 10             	add    esp,0x10
c0006dfe:	eb f1                	jmp    c0006df1 <Krnl::firstTask()+0x12c>

c0006e00 <Computer::Computer()>:
c0006e00:	83 ec 0c             	sub    esp,0xc
c0006e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e07:	83 ec 08             	sub    esp,0x8
c0006e0a:	68 6d ff 01 c0       	push   0xc001ff6d
c0006e0f:	50                   	push   eax
c0006e10:	e8 0b 54 00 00       	call   c000c220 <Device::Device(char const*)>
c0006e15:	83 c4 10             	add    esp,0x10
c0006e18:	ba 74 00 02 c0       	mov    edx,0xc0020074
c0006e1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e21:	89 10                	mov    DWORD PTR [eax],edx
c0006e23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e27:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e35:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e43:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e49:	83 ca 04             	or     edx,0x4
c0006e4c:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e56:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e5c:	0f b6 d0             	movzx  edx,al
c0006e5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e63:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e74:	0f b6 d0             	movzx  edx,al
c0006e77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e7b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e84:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e8a:	8d 50 01             	lea    edx,[eax+0x1]
c0006e8d:	88 d1                	mov    cl,dl
c0006e8f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e93:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e99:	0f b6 d0             	movzx  edx,al
c0006e9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ea0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006ea4:	83 e1 3f             	and    ecx,0x3f
c0006ea7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006eab:	90                   	nop
c0006eac:	83 c4 0c             	add    esp,0xc
c0006eaf:	c3                   	ret    

c0006eb0 <Computer::setBootMessage(char const*)>:
c0006eb0:	c3                   	ret    
c0006eb1:	90                   	nop

c0006eb2 <Computer::detectFeatures()>:
c0006eb2:	55                   	push   ebp
c0006eb3:	57                   	push   edi
c0006eb4:	56                   	push   esi
c0006eb5:	53                   	push   ebx
c0006eb6:	83 ec 1c             	sub    esp,0x1c
c0006eb9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ebd:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ec3:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006ec9:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006ecf:	e8 25 93 ff ff       	call   c00001f9 <detectCPUID>
c0006ed4:	31 d2                	xor    edx,edx
c0006ed6:	85 c0                	test   eax,eax
c0006ed8:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ede:	0f 95 c2             	setne  dl
c0006ee1:	d1 e2                	shl    edx,1
c0006ee3:	83 e0 fd             	and    eax,0xfffffffd
c0006ee6:	09 d0                	or     eax,edx
c0006ee8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006eee:	a8 02                	test   al,0x2
c0006ef0:	75 51                	jne    c0006f43 <Computer::detectFeatures()+0x91>
c0006ef2:	f6 05 d1 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed1,0x4
c0006ef9:	74 0f                	je     c0006f0a <Computer::detectFeatures()+0x58>
c0006efb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f01:	83 e0 fb             	and    eax,0xfffffffb
c0006f04:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f0a:	e8 e7 78 01 00       	call   c001e7f6 <x87Detect>
c0006f0f:	83 e0 01             	and    eax,0x1
c0006f12:	c1 e0 04             	shl    eax,0x4
c0006f15:	89 c2                	mov    edx,eax
c0006f17:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f1d:	83 e0 ef             	and    eax,0xffffffef
c0006f20:	09 d0                	or     eax,edx
c0006f22:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f28:	a8 10                	test   al,0x10
c0006f2a:	88 c2                	mov    dl,al
c0006f2c:	0f 85 33 01 00 00    	jne    c0007065 <Computer::detectFeatures()+0x1b3>
c0006f32:	80 e2 80             	and    dl,0x80
c0006f35:	0f 85 4c 01 00 00    	jne    c0007087 <Computer::detectFeatures()+0x1d5>
c0006f3b:	83 c4 1c             	add    esp,0x1c
c0006f3e:	5b                   	pop    ebx
c0006f3f:	5e                   	pop    esi
c0006f40:	5f                   	pop    edi
c0006f41:	5d                   	pop    ebp
c0006f42:	c3                   	ret    
c0006f43:	83 ec 0c             	sub    esp,0xc
c0006f46:	6a 20                	push   0x20
c0006f48:	e8 3d 8a 00 00       	call   c000f98a <CPU::cpuidCheckEDX(unsigned int)>
c0006f4d:	83 e0 01             	and    eax,0x1
c0006f50:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f57:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f5d:	83 e0 f7             	and    eax,0xfffffff7
c0006f60:	09 d0                	or     eax,edx
c0006f62:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f68:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f6f:	e8 16 8a 00 00       	call   c000f98a <CPU::cpuidCheckEDX(unsigned int)>
c0006f74:	89 c2                	mov    edx,eax
c0006f76:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f7c:	83 e2 01             	and    edx,0x1
c0006f7f:	83 e0 fe             	and    eax,0xfffffffe
c0006f82:	09 d0                	or     eax,edx
c0006f84:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f8a:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f91:	e8 f4 89 00 00       	call   c000f98a <CPU::cpuidCheckEDX(unsigned int)>
c0006f96:	89 c2                	mov    edx,eax
c0006f98:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f9e:	c1 e2 07             	shl    edx,0x7
c0006fa1:	83 e0 7f             	and    eax,0x7f
c0006fa4:	09 d0                	or     eax,edx
c0006fa6:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006fac:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006fb3:	e8 d2 89 00 00       	call   c000f98a <CPU::cpuidCheckEDX(unsigned int)>
c0006fb8:	83 c4 10             	add    esp,0x10
c0006fbb:	83 e0 01             	and    eax,0x1
c0006fbe:	c1 e0 05             	shl    eax,0x5
c0006fc1:	89 c2                	mov    edx,eax
c0006fc3:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fc9:	83 e0 df             	and    eax,0xffffffdf
c0006fcc:	09 d0                	or     eax,edx
c0006fce:	f7 05 d0 5e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0025ed0,0x401
c0006fd8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fde:	0f 84 c9 00 00 00    	je     c00070ad <Computer::detectFeatures()+0x1fb>
c0006fe4:	83 e0 fe             	and    eax,0xfffffffe
c0006fe7:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fed:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ff3:	89 c2                	mov    edx,eax
c0006ff5:	83 e2 09             	and    edx,0x9
c0006ff8:	83 fa 01             	cmp    edx,0x1
c0006ffb:	75 09                	jne    c0007006 <Computer::detectFeatures()+0x154>
c0006ffd:	83 e0 fe             	and    eax,0xfffffffe
c0007000:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0007006:	83 ec 0c             	sub    esp,0xc
c0007009:	8d 44 24 18          	lea    eax,[esp+0x18]
c000700d:	50                   	push   eax
c000700e:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0007012:	55                   	push   ebp
c0007013:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007017:	57                   	push   edi
c0007018:	8d 74 24 18          	lea    esi,[esp+0x18]
c000701c:	56                   	push   esi
c000701d:	68 00 00 00 80       	push   0x80000000
c0007022:	e8 df 88 00 00       	call   c000f906 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007027:	83 c4 20             	add    esp,0x20
c000702a:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007031:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0007035:	0f 86 b7 fe ff ff    	jbe    c0006ef2 <Computer::detectFeatures()+0x40>
c000703b:	83 ec 0c             	sub    esp,0xc
c000703e:	50                   	push   eax
c000703f:	55                   	push   ebp
c0007040:	57                   	push   edi
c0007041:	56                   	push   esi
c0007042:	68 01 00 00 80       	push   0x80000001
c0007047:	e8 ba 88 00 00       	call   c000f906 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000704c:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0007052:	83 c4 20             	add    esp,0x20
c0007055:	25 bf ff fc ff       	and    eax,0xfffcffbf
c000705a:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007060:	e9 8d fe ff ff       	jmp    c0006ef2 <Computer::detectFeatures()+0x40>
c0007065:	e8 46 77 01 00       	call   c001e7b0 <absolutelyNoChanceInHell>
c000706a:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007070:	83 e2 7f             	and    edx,0x7f
c0007073:	c1 e0 07             	shl    eax,0x7
c0007076:	09 c2                	or     edx,eax
c0007078:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c000707e:	80 e2 80             	and    dl,0x80
c0007081:	0f 84 b4 fe ff ff    	je     c0006f3b <Computer::detectFeatures()+0x89>
c0007087:	e8 94 73 01 00       	call   c001e420 <avxDetect>
c000708c:	83 e0 01             	and    eax,0x1
c000708f:	c1 e0 05             	shl    eax,0x5
c0007092:	89 c2                	mov    edx,eax
c0007094:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c000709a:	83 e0 df             	and    eax,0xffffffdf
c000709d:	09 d0                	or     eax,edx
c000709f:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00070a5:	83 c4 1c             	add    esp,0x1c
c00070a8:	5b                   	pop    ebx
c00070a9:	5e                   	pop    esi
c00070aa:	5f                   	pop    edi
c00070ab:	5d                   	pop    ebp
c00070ac:	c3                   	ret    
c00070ad:	83 ec 0c             	sub    esp,0xc
c00070b0:	68 00 02 00 00       	push   0x200
c00070b5:	e8 d0 88 00 00       	call   c000f98a <CPU::cpuidCheckEDX(unsigned int)>
c00070ba:	83 c4 10             	add    esp,0x10
c00070bd:	89 c2                	mov    edx,eax
c00070bf:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070c5:	83 e2 01             	and    edx,0x1
c00070c8:	83 e0 fe             	and    eax,0xfffffffe
c00070cb:	09 d0                	or     eax,edx
c00070cd:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070d3:	e9 15 ff ff ff       	jmp    c0006fed <Computer::detectFeatures()+0x13b>

c00070d8 <Computer::displayFeatures()>:
c00070d8:	c3                   	ret    
c00070d9:	90                   	nop

c00070da <Computer::rdmsr(unsigned int)>:
c00070da:	83 ec 0c             	sub    esp,0xc
c00070dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070e1:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070e8:	74 0a                	je     c00070f4 <Computer::rdmsr(unsigned int)+0x1a>
c00070ea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070ee:	0f 32                	rdmsr  
c00070f0:	83 c4 0c             	add    esp,0xc
c00070f3:	c3                   	ret    
c00070f4:	83 ec 0c             	sub    esp,0xc
c00070f7:	68 76 ff 01 c0       	push   0xc001ff76
c00070fc:	e8 70 9a 00 00       	call   c0010b71 <KePanic(char const*)>
c0007101:	83 c4 10             	add    esp,0x10
c0007104:	eb e4                	jmp    c00070ea <Computer::rdmsr(unsigned int)+0x10>

c0007106 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0007106:	57                   	push   edi
c0007107:	56                   	push   esi
c0007108:	83 ec 04             	sub    esp,0x4
c000710b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000710f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0007113:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0007117:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000711e:	74 10                	je     c0007130 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007120:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007124:	89 f0                	mov    eax,esi
c0007126:	89 fa                	mov    edx,edi
c0007128:	0f 30                	wrmsr  
c000712a:	83 c4 04             	add    esp,0x4
c000712d:	5e                   	pop    esi
c000712e:	5f                   	pop    edi
c000712f:	c3                   	ret    
c0007130:	83 ec 0c             	sub    esp,0xc
c0007133:	68 7c ff 01 c0       	push   0xc001ff7c
c0007138:	e8 34 9a 00 00       	call   c0010b71 <KePanic(char const*)>
c000713d:	83 c4 10             	add    esp,0x10
c0007140:	eb de                	jmp    c0007120 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0007142 <Computer::shutdown()>:
c0007142:	83 ec 0c             	sub    esp,0xc
c0007145:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007149:	8b 10                	mov    edx,DWORD PTR [eax]
c000714b:	6a 00                	push   0x0
c000714d:	6a 00                	push   0x0
c000714f:	6a 00                	push   0x0
c0007151:	50                   	push   eax
c0007152:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007155:	83 c4 1c             	add    esp,0x1c
c0007158:	c3                   	ret    
c0007159:	90                   	nop

c000715a <Computer::restart()>:
c000715a:	83 ec 0c             	sub    esp,0xc
c000715d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007161:	8b 10                	mov    edx,DWORD PTR [eax]
c0007163:	6a 00                	push   0x0
c0007165:	6a 00                	push   0x0
c0007167:	6a 01                	push   0x1
c0007169:	50                   	push   eax
c000716a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000716d:	83 c4 1c             	add    esp,0x1c
c0007170:	c3                   	ret    
c0007171:	90                   	nop

c0007172 <Computer::sleep()>:
c0007172:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007176:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000717c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007180:	e9 d7 82 00 00       	jmp    c000f45c <ACPI::sleep()>
c0007185:	90                   	nop

c0007186 <Computer::nmiEnabled()>:
c0007186:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000718a:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007190:	c3                   	ret    
c0007191:	90                   	nop

c0007192 <Computer::readCMOS(unsigned char)>:
c0007192:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007196:	31 d2                	xor    edx,edx
c0007198:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000719c:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00071a3:	75 02                	jne    c00071a7 <Computer::readCMOS(unsigned char)+0x15>
c00071a5:	b2 80                	mov    dl,0x80
c00071a7:	09 d0                	or     eax,edx
c00071a9:	e6 70                	out    0x70,al
c00071ab:	e4 71                	in     al,0x71
c00071ad:	c3                   	ret    

c00071ae <Computer::enableNMI(bool)>:
c00071ae:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c00071b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071b6:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071bc:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071c4:	eb cc                	jmp    c0007192 <Computer::readCMOS(unsigned char)>

c00071c6 <Computer::open(int, int, void*)>:
c00071c6:	56                   	push   esi
c00071c7:	53                   	push   ebx
c00071c8:	83 ec 10             	sub    esp,0x10
c00071cb:	f6 05 d0 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed0,0x4
c00071d2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071d6:	68 82 ff 01 c0       	push   0xc001ff82
c00071db:	0f 94 05 00 28 02 c0 	sete   BYTE PTR ds:0xc0022800
c00071e2:	e8 b4 92 00 00       	call   c001049b <KeSetBootMessage(char const*)>
c00071e7:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071ee:	e8 d8 08 00 00       	call   c0007acb <malloc>
c00071f3:	89 04 24             	mov    DWORD PTR [esp],eax
c00071f6:	89 c6                	mov    esi,eax
c00071f8:	e8 d3 7d 00 00       	call   c000efd0 <ACPI::ACPI()>
c00071fd:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0007203:	58                   	pop    eax
c0007204:	5a                   	pop    edx
c0007205:	56                   	push   esi
c0007206:	53                   	push   ebx
c0007207:	e8 7c 4e 00 00       	call   c000c088 <Device::addChild(Device*)>
c000720c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000720f:	e8 9e fc ff ff       	call   c0006eb2 <Computer::detectFeatures()>
c0007214:	59                   	pop    ecx
c0007215:	5e                   	pop    esi
c0007216:	6a 01                	push   0x1
c0007218:	53                   	push   ebx
c0007219:	e8 90 ff ff ff       	call   c00071ae <Computer::enableNMI(bool)>
c000721e:	c7 04 24 9a ff 01 c0 	mov    DWORD PTR [esp],0xc001ff9a
c0007225:	e8 71 92 00 00       	call   c001049b <KeSetBootMessage(char const*)>
c000722a:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007231:	e8 95 08 00 00       	call   c0007acb <malloc>
c0007236:	89 04 24             	mov    DWORD PTR [esp],eax
c0007239:	89 c6                	mov    esi,eax
c000723b:	e8 02 88 00 00       	call   c000fa42 <CPU::CPU()>
c0007240:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0007246:	58                   	pop    eax
c0007247:	5a                   	pop    edx
c0007248:	56                   	push   esi
c0007249:	53                   	push   ebx
c000724a:	e8 39 4e 00 00       	call   c000c088 <Device::addChild(Device*)>
c000724f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0007255:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007259:	8b 10                	mov    edx,DWORD PTR [eax]
c000725b:	51                   	push   ecx
c000725c:	6a 00                	push   0x0
c000725e:	6a 00                	push   0x0
c0007260:	50                   	push   eax
c0007261:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007264:	83 c4 14             	add    esp,0x14
c0007267:	68 48 00 02 c0       	push   0xc0020048
c000726c:	e8 2a 92 00 00       	call   c001049b <KeSetBootMessage(char const*)>
c0007271:	e8 e0 00 01 00       	call   c0017356 <HalInitialiseCoprocessor()>
c0007276:	c7 04 24 b4 ff 01 c0 	mov    DWORD PTR [esp],0xc001ffb4
c000727d:	e8 19 92 00 00       	call   c001049b <KeSetBootMessage(char const*)>
c0007282:	c7 04 24 c5 6c 00 c0 	mov    DWORD PTR [esp],0xc0006cc5
c0007289:	e8 c2 e0 00 00       	call   c0015350 <setupMultitasking(void (*)())>
c000728e:	83 c4 14             	add    esp,0x14
c0007291:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007296:	5b                   	pop    ebx
c0007297:	5e                   	pop    esi
c0007298:	c3                   	ret    
c0007299:	90                   	nop

c000729a <Computer::disableNMI()>:
c000729a:	6a 00                	push   0x0
c000729c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a0:	50                   	push   eax
c00072a1:	e8 08 ff ff ff       	call   c00071ae <Computer::enableNMI(bool)>
c00072a6:	5a                   	pop    edx
c00072a7:	59                   	pop    ecx
c00072a8:	c3                   	ret    
c00072a9:	90                   	nop

c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>:
c00072aa:	53                   	push   ebx
c00072ab:	b2 80                	mov    dl,0x80
c00072ad:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00072b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072b5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00072b9:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00072c0:	74 02                	je     c00072c4 <Computer::writeCMOS(unsigned char, unsigned char)+0x1a>
c00072c2:	31 d2                	xor    edx,edx
c00072c4:	09 d0                	or     eax,edx
c00072c6:	e6 70                	out    0x70,al
c00072c8:	88 c8                	mov    al,cl
c00072ca:	e6 71                	out    0x71,al
c00072cc:	5b                   	pop    ebx
c00072cd:	c3                   	ret    

c00072ce <Computer::handleNMI()>:
c00072ce:	56                   	push   esi
c00072cf:	53                   	push   ebx
c00072d0:	83 ec 10             	sub    esp,0x10
c00072d3:	e4 92                	in     al,0x92
c00072d5:	89 c6                	mov    esi,eax
c00072d7:	e4 61                	in     al,0x61
c00072d9:	68 cf ff 01 c0       	push   0xc001ffcf
c00072de:	88 c3                	mov    bl,al
c00072e0:	e8 19 36 00 00       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c00072e5:	83 c4 10             	add    esp,0x10
c00072e8:	83 e6 10             	and    esi,0x10
c00072eb:	75 10                	jne    c00072fd <Computer::handleNMI()+0x2f>
c00072ed:	f6 c3 40             	test   bl,0x40
c00072f0:	75 20                	jne    c0007312 <Computer::handleNMI()+0x44>
c00072f2:	80 e3 80             	and    bl,0x80
c00072f5:	75 30                	jne    c0007327 <Computer::handleNMI()+0x59>
c00072f7:	83 c4 04             	add    esp,0x4
c00072fa:	5b                   	pop    ebx
c00072fb:	5e                   	pop    esi
c00072fc:	c3                   	ret    
c00072fd:	83 ec 0c             	sub    esp,0xc
c0007300:	68 e0 ff 01 c0       	push   0xc001ffe0
c0007305:	e8 67 98 00 00       	call   c0010b71 <KePanic(char const*)>
c000730a:	83 c4 10             	add    esp,0x10
c000730d:	f6 c3 40             	test   bl,0x40
c0007310:	74 e0                	je     c00072f2 <Computer::handleNMI()+0x24>
c0007312:	83 ec 0c             	sub    esp,0xc
c0007315:	68 ed ff 01 c0       	push   0xc001ffed
c000731a:	e8 52 98 00 00       	call   c0010b71 <KePanic(char const*)>
c000731f:	83 c4 10             	add    esp,0x10
c0007322:	80 e3 80             	and    bl,0x80
c0007325:	74 d0                	je     c00072f7 <Computer::handleNMI()+0x29>
c0007327:	c7 44 24 10 f7 ff 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fff7
c000732f:	83 c4 04             	add    esp,0x4
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	e9 38 98 00 00       	jmp    c0010b71 <KePanic(char const*)>
c0007339:	90                   	nop

c000733a <GDTEntry::setBase(unsigned int)>:
c000733a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000733e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007342:	89 c1                	mov    ecx,eax
c0007344:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007348:	c1 e9 10             	shr    ecx,0x10
c000734b:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000734e:	c1 e8 18             	shr    eax,0x18
c0007351:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0007354:	c3                   	ret    
c0007355:	90                   	nop

c0007356 <GDTEntry::setLimit(unsigned int)>:
c0007356:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000735a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000735e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007361:	66 89 01             	mov    WORD PTR [ecx],ax
c0007364:	c1 e8 10             	shr    eax,0x10
c0007367:	83 e0 0f             	and    eax,0xf
c000736a:	83 e2 f0             	and    edx,0xfffffff0
c000736d:	09 d0                	or     eax,edx
c000736f:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007372:	c3                   	ret    
c0007373:	90                   	nop

c0007374 <GDT::GDT()>:
c0007374:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007378:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000737e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007382:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007388:	90                   	nop
c0007389:	c3                   	ret    

c000738a <GDT::addEntry(GDTEntry)>:
c000738a:	53                   	push   ebx
c000738b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000738f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007393:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007397:	8b 02                	mov    eax,DWORD PTR [edx]
c0007399:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000739d:	8d 48 01             	lea    ecx,[eax+0x1]
c00073a0:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00073a4:	c1 e0 03             	shl    eax,0x3
c00073a7:	89 0a                	mov    DWORD PTR [edx],ecx
c00073a9:	5b                   	pop    ebx
c00073aa:	c3                   	ret    
c00073ab:	90                   	nop

c00073ac <GDT::getNumberOfEntries()>:
c00073ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00073b2:	c3                   	ret    
c00073b3:	90                   	nop

c00073b4 <GDT::flush()>:
c00073b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073b8:	8b 10                	mov    edx,DWORD PTR [eax]
c00073ba:	83 c0 04             	add    eax,0x4
c00073bd:	a3 c2 5e 02 c0       	mov    ds:0xc0025ec2,eax
c00073c2:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073c9:	66 89 15 c0 5e 02 c0 	mov    WORD PTR ds:0xc0025ec0,dx
c00073d0:	e9 85 8f ff ff       	jmp    c000035a <loadGDT>
c00073d5:	90                   	nop

c00073d6 <GDT::setup()>:
c00073d6:	57                   	push   edi
c00073d7:	56                   	push   esi
c00073d8:	53                   	push   ebx
c00073d9:	83 ec 30             	sub    esp,0x30
c00073dc:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073e0:	6a 00                	push   0x0
c00073e2:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073e6:	56                   	push   esi
c00073e7:	e8 4e ff ff ff       	call   c000733a <GDTEntry::setBase(unsigned int)>
c00073ec:	6a 00                	push   0x0
c00073ee:	56                   	push   esi
c00073ef:	e8 62 ff ff ff       	call   c0007356 <GDTEntry::setLimit(unsigned int)>
c00073f4:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00073fc:	6a 00                	push   0x0
c00073fe:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0007402:	56                   	push   esi
c0007403:	e8 32 ff ff ff       	call   c000733a <GDTEntry::setBase(unsigned int)>
c0007408:	68 ff ff ff 00       	push   0xffffff
c000740d:	56                   	push   esi
c000740e:	e8 43 ff ff ff       	call   c0007356 <GDTEntry::setLimit(unsigned int)>
c0007413:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007417:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000741b:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007420:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007424:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007429:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000742d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007431:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0007435:	89 f8                	mov    eax,edi
c0007437:	89 fa                	mov    edx,edi
c0007439:	80 e4 f7             	and    ah,0xf7
c000743c:	80 ce 60             	or     dh,0x60
c000743f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0007443:	89 c7                	mov    edi,eax
c0007445:	80 cc 60             	or     ah,0x60
c0007448:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000744c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007450:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007454:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007458:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000745c:	83 c4 20             	add    esp,0x20
c000745f:	6a 00                	push   0x0
c0007461:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007465:	50                   	push   eax
c0007466:	e8 cf fe ff ff       	call   c000733a <GDTEntry::setBase(unsigned int)>
c000746b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000746f:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007473:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007477:	83 e0 3f             	and    eax,0x3f
c000747a:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000747e:	6a 00                	push   0x0
c0007480:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007484:	50                   	push   eax
c0007485:	e8 b0 fe ff ff       	call   c000733a <GDTEntry::setBase(unsigned int)>
c000748a:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000748e:	83 e0 3f             	and    eax,0x3f
c0007491:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c0007495:	83 c4 0c             	add    esp,0xc
c0007498:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000749c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a0:	53                   	push   ebx
c00074a1:	e8 e4 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074a6:	83 c4 0c             	add    esp,0xc
c00074a9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b1:	53                   	push   ebx
c00074b2:	e8 d3 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074b7:	83 c4 0c             	add    esp,0xc
c00074ba:	57                   	push   edi
c00074bb:	56                   	push   esi
c00074bc:	53                   	push   ebx
c00074bd:	e8 c8 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074c2:	83 c4 0c             	add    esp,0xc
c00074c5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074c9:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074cd:	53                   	push   ebx
c00074ce:	e8 b7 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074d3:	83 c4 0c             	add    esp,0xc
c00074d6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074da:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074de:	53                   	push   ebx
c00074df:	e8 a6 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074e4:	83 c4 0c             	add    esp,0xc
c00074e7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074eb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074ef:	53                   	push   ebx
c00074f0:	e8 95 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074f5:	83 c4 0c             	add    esp,0xc
c00074f8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074fc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007500:	53                   	push   ebx
c0007501:	e8 84 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c0007506:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007509:	e8 a6 fe ff ff       	call   c00073b4 <GDT::flush()>
c000750e:	83 c4 40             	add    esp,0x40
c0007511:	5b                   	pop    ebx
c0007512:	5e                   	pop    esi
c0007513:	5f                   	pop    edi
c0007514:	c3                   	ret    

c0007515 <idleFunction(void*)>:
c0007515:	83 ec 0c             	sub    esp,0xc
c0007518:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000751d:	48                   	dec    eax
c000751e:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0007523:	75 01                	jne    c0007526 <idleFunction(void*)+0x11>
c0007525:	fb                   	sti    
c0007526:	e8 f7 fa 00 00       	call   c0017022 <HalSystemIdle()>
c000752b:	e8 82 78 01 00       	call   c001edb2 <idleCommon()>
c0007530:	eb f4                	jmp    c0007526 <idleFunction(void*)+0x11>
c0007532:	66 90                	xchg   ax,ax

c0007534 <IDTEntry::IDTEntry(bool)>:
c0007534:	53                   	push   ebx
c0007535:	83 ec 04             	sub    esp,0x4
c0007538:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000753c:	88 04 24             	mov    BYTE PTR [esp],al
c000753f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007543:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007549:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754d:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007555:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007558:	83 e2 f0             	and    edx,0xfffffff0
c000755b:	83 ca 0e             	or     edx,0xe
c000755e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007561:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007565:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007568:	83 e2 ef             	and    edx,0xffffffef
c000756b:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000756e:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0007572:	85 c0                	test   eax,eax
c0007574:	74 06                	je     c000757c <IDTEntry::IDTEntry(bool)+0x48>
c0007576:	b2 03                	mov    dl,0x3
c0007578:	eb 06                	jmp    c0007580 <IDTEntry::IDTEntry(bool)+0x4c>
c000757a:	66 90                	xchg   ax,ax
c000757c:	b2 00                	mov    dl,0x0
c000757e:	66 90                	xchg   ax,ax
c0007580:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007584:	83 e2 03             	and    edx,0x3
c0007587:	89 d3                	mov    ebx,edx
c0007589:	c1 e3 05             	shl    ebx,0x5
c000758c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000758f:	83 e2 9f             	and    edx,0xffffff9f
c0007592:	88 d1                	mov    cl,dl
c0007594:	88 da                	mov    dl,bl
c0007596:	09 ca                	or     edx,ecx
c0007598:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000759b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000759f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075a2:	83 ca 80             	or     edx,0xffffff80
c00075a5:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075a8:	90                   	nop
c00075a9:	83 c4 04             	add    esp,0x4
c00075ac:	5b                   	pop    ebx
c00075ad:	c3                   	ret    

c00075ae <IDTEntry::setOffset(unsigned int)>:
c00075ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00075b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075b6:	66 89 02             	mov    WORD PTR [edx],ax
c00075b9:	c1 e8 10             	shr    eax,0x10
c00075bc:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075c0:	c3                   	ret    
c00075c1:	90                   	nop
c00075c2:	66 90                	xchg   ax,ax

c00075c4 <IDT::IDT()>:
c00075c4:	90                   	nop
c00075c5:	c3                   	ret    

c00075c6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075ca:	83 c0 30             	add    eax,0x30
c00075cd:	c3                   	ret    

c00075ce <IDT::addEntry(IDTEntry, int)>:
c00075ce:	53                   	push   ebx
c00075cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075d3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075d7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075df:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075e2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075e6:	5b                   	pop    ebx
c00075e7:	c3                   	ret    

c00075e8 <IDT::addEntry(int, void (*)(), bool)>:
c00075e8:	53                   	push   ebx
c00075e9:	83 ec 10             	sub    esp,0x10
c00075ec:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075f1:	50                   	push   eax
c00075f2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075f6:	53                   	push   ebx
c00075f7:	e8 38 ff ff ff       	call   c0007534 <IDTEntry::IDTEntry(bool)>
c00075fc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007600:	53                   	push   ebx
c0007601:	e8 a8 ff ff ff       	call   c00075ae <IDTEntry::setOffset(unsigned int)>
c0007606:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000760a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000760e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007612:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007616:	e8 b3 ff ff ff       	call   c00075ce <IDT::addEntry(IDTEntry, int)>
c000761b:	83 c4 30             	add    esp,0x30
c000761e:	5b                   	pop    ebx
c000761f:	c3                   	ret    

c0007620 <IDT::flush()>:
c0007620:	66 c7 05 c8 5e 02 c0 ff 07 	mov    WORD PTR ds:0xc0025ec8,0x7ff
c0007629:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000762d:	a3 ca 5e 02 c0       	mov    ds:0xc0025eca,eax
c0007632:	0f 01 1d c8 5e 02 c0 	lidtd  ds:0xc0025ec8
c0007639:	c3                   	ret    

c000763a <IDT::setup()>:
c000763a:	57                   	push   edi
c000763b:	56                   	push   esi
c000763c:	53                   	push   ebx
c000763d:	83 ec 10             	sub    esp,0x10
c0007640:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007644:	6a 00                	push   0x0
c0007646:	68 b0 e4 01 c0       	push   0xc001e4b0
c000764b:	6a 00                	push   0x0
c000764d:	53                   	push   ebx
c000764e:	e8 95 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007653:	6a 00                	push   0x0
c0007655:	68 c0 e4 01 c0       	push   0xc001e4c0
c000765a:	6a 01                	push   0x1
c000765c:	53                   	push   ebx
c000765d:	e8 86 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007662:	83 c4 20             	add    esp,0x20
c0007665:	6a 00                	push   0x0
c0007667:	68 ca e4 01 c0       	push   0xc001e4ca
c000766c:	6a 02                	push   0x2
c000766e:	53                   	push   ebx
c000766f:	e8 74 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007674:	6a 00                	push   0x0
c0007676:	68 d4 e4 01 c0       	push   0xc001e4d4
c000767b:	6a 03                	push   0x3
c000767d:	53                   	push   ebx
c000767e:	e8 65 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007683:	83 c4 20             	add    esp,0x20
c0007686:	6a 00                	push   0x0
c0007688:	68 de e4 01 c0       	push   0xc001e4de
c000768d:	6a 04                	push   0x4
c000768f:	53                   	push   ebx
c0007690:	e8 53 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007695:	6a 00                	push   0x0
c0007697:	68 e8 e4 01 c0       	push   0xc001e4e8
c000769c:	6a 05                	push   0x5
c000769e:	53                   	push   ebx
c000769f:	e8 44 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076a4:	83 c4 20             	add    esp,0x20
c00076a7:	6a 00                	push   0x0
c00076a9:	68 f2 e4 01 c0       	push   0xc001e4f2
c00076ae:	6a 06                	push   0x6
c00076b0:	53                   	push   ebx
c00076b1:	e8 32 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076b6:	6a 00                	push   0x0
c00076b8:	68 fc e4 01 c0       	push   0xc001e4fc
c00076bd:	6a 07                	push   0x7
c00076bf:	53                   	push   ebx
c00076c0:	e8 23 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076c5:	83 c4 20             	add    esp,0x20
c00076c8:	6a 00                	push   0x0
c00076ca:	68 06 e5 01 c0       	push   0xc001e506
c00076cf:	6a 08                	push   0x8
c00076d1:	53                   	push   ebx
c00076d2:	e8 11 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076d7:	6a 00                	push   0x0
c00076d9:	68 0e e5 01 c0       	push   0xc001e50e
c00076de:	6a 09                	push   0x9
c00076e0:	53                   	push   ebx
c00076e1:	e8 02 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076e6:	83 c4 20             	add    esp,0x20
c00076e9:	6a 00                	push   0x0
c00076eb:	68 18 e5 01 c0       	push   0xc001e518
c00076f0:	6a 0a                	push   0xa
c00076f2:	53                   	push   ebx
c00076f3:	e8 f0 fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076f8:	6a 00                	push   0x0
c00076fa:	68 20 e5 01 c0       	push   0xc001e520
c00076ff:	6a 0b                	push   0xb
c0007701:	53                   	push   ebx
c0007702:	e8 e1 fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007707:	83 c4 20             	add    esp,0x20
c000770a:	6a 00                	push   0x0
c000770c:	68 28 e5 01 c0       	push   0xc001e528
c0007711:	6a 0c                	push   0xc
c0007713:	53                   	push   ebx
c0007714:	e8 cf fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007719:	6a 00                	push   0x0
c000771b:	68 30 e5 01 c0       	push   0xc001e530
c0007720:	6a 0d                	push   0xd
c0007722:	53                   	push   ebx
c0007723:	e8 c0 fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007728:	83 c4 20             	add    esp,0x20
c000772b:	6a 00                	push   0x0
c000772d:	68 4a e5 01 c0       	push   0xc001e54a
c0007732:	6a 0e                	push   0xe
c0007734:	53                   	push   ebx
c0007735:	e8 ae fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000773a:	6a 00                	push   0x0
c000773c:	68 52 e5 01 c0       	push   0xc001e552
c0007741:	6a 0f                	push   0xf
c0007743:	53                   	push   ebx
c0007744:	e8 9f fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007749:	83 c4 20             	add    esp,0x20
c000774c:	6a 00                	push   0x0
c000774e:	68 5c e5 01 c0       	push   0xc001e55c
c0007753:	6a 10                	push   0x10
c0007755:	53                   	push   ebx
c0007756:	e8 8d fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000775b:	6a 00                	push   0x0
c000775d:	68 66 e5 01 c0       	push   0xc001e566
c0007762:	6a 11                	push   0x11
c0007764:	53                   	push   ebx
c0007765:	e8 7e fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000776a:	83 c4 20             	add    esp,0x20
c000776d:	6a 00                	push   0x0
c000776f:	68 70 e5 01 c0       	push   0xc001e570
c0007774:	6a 12                	push   0x12
c0007776:	53                   	push   ebx
c0007777:	e8 6c fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000777c:	6a 01                	push   0x1
c000777e:	68 0a e6 01 c0       	push   0xc001e60a
c0007783:	6a 60                	push   0x60
c0007785:	53                   	push   ebx
c0007786:	e8 5d fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000778b:	83 c4 20             	add    esp,0x20
c000778e:	6a 00                	push   0x0
c0007790:	68 11 e6 01 c0       	push   0xc001e611
c0007795:	6a 20                	push   0x20
c0007797:	53                   	push   ebx
c0007798:	e8 4b fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000779d:	6a 00                	push   0x0
c000779f:	68 fc e5 01 c0       	push   0xc001e5fc
c00077a4:	6a 21                	push   0x21
c00077a6:	53                   	push   ebx
c00077a7:	e8 3c fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00077ac:	83 c4 20             	add    esp,0x20
c00077af:	6a 00                	push   0x0
c00077b1:	68 03 e6 01 c0       	push   0xc001e603
c00077b6:	6a 22                	push   0x22
c00077b8:	53                   	push   ebx
c00077b9:	e8 2a fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00077be:	6a 00                	push   0x0
c00077c0:	68 7a e5 01 c0       	push   0xc001e57a
c00077c5:	6a 23                	push   0x23
c00077c7:	53                   	push   ebx
c00077c8:	e8 1b fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00077cd:	83 c4 20             	add    esp,0x20
c00077d0:	6a 00                	push   0x0
c00077d2:	68 84 e5 01 c0       	push   0xc001e584
c00077d7:	6a 24                	push   0x24
c00077d9:	53                   	push   ebx
c00077da:	e8 09 fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00077df:	6a 00                	push   0x0
c00077e1:	68 8e e5 01 c0       	push   0xc001e58e
c00077e6:	6a 25                	push   0x25
c00077e8:	53                   	push   ebx
c00077e9:	e8 fa fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00077ee:	83 c4 20             	add    esp,0x20
c00077f1:	6a 00                	push   0x0
c00077f3:	68 98 e5 01 c0       	push   0xc001e598
c00077f8:	6a 26                	push   0x26
c00077fa:	53                   	push   ebx
c00077fb:	e8 e8 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007800:	6a 00                	push   0x0
c0007802:	68 a2 e5 01 c0       	push   0xc001e5a2
c0007807:	6a 27                	push   0x27
c0007809:	53                   	push   ebx
c000780a:	e8 d9 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000780f:	83 c4 20             	add    esp,0x20
c0007812:	6a 00                	push   0x0
c0007814:	68 ac e5 01 c0       	push   0xc001e5ac
c0007819:	6a 28                	push   0x28
c000781b:	53                   	push   ebx
c000781c:	e8 c7 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007821:	6a 00                	push   0x0
c0007823:	68 b6 e5 01 c0       	push   0xc001e5b6
c0007828:	6a 29                	push   0x29
c000782a:	53                   	push   ebx
c000782b:	e8 b8 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007830:	83 c4 20             	add    esp,0x20
c0007833:	6a 00                	push   0x0
c0007835:	68 c0 e5 01 c0       	push   0xc001e5c0
c000783a:	6a 2a                	push   0x2a
c000783c:	53                   	push   ebx
c000783d:	e8 a6 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007842:	6a 00                	push   0x0
c0007844:	68 ca e5 01 c0       	push   0xc001e5ca
c0007849:	6a 2b                	push   0x2b
c000784b:	53                   	push   ebx
c000784c:	e8 97 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007851:	83 c4 20             	add    esp,0x20
c0007854:	6a 00                	push   0x0
c0007856:	68 d4 e5 01 c0       	push   0xc001e5d4
c000785b:	6a 2c                	push   0x2c
c000785d:	53                   	push   ebx
c000785e:	e8 85 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007863:	6a 00                	push   0x0
c0007865:	68 de e5 01 c0       	push   0xc001e5de
c000786a:	6a 2d                	push   0x2d
c000786c:	53                   	push   ebx
c000786d:	e8 76 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007872:	83 c4 20             	add    esp,0x20
c0007875:	6a 00                	push   0x0
c0007877:	68 e8 e5 01 c0       	push   0xc001e5e8
c000787c:	6a 2e                	push   0x2e
c000787e:	53                   	push   ebx
c000787f:	e8 64 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007884:	6a 00                	push   0x0
c0007886:	68 f2 e5 01 c0       	push   0xc001e5f2
c000788b:	6a 2f                	push   0x2f
c000788d:	53                   	push   ebx
c000788e:	e8 55 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007893:	83 c4 20             	add    esp,0x20
c0007896:	6a 00                	push   0x0
c0007898:	68 4c e7 01 c0       	push   0xc001e74c
c000789d:	6a 30                	push   0x30
c000789f:	53                   	push   ebx
c00078a0:	e8 43 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078a5:	6a 00                	push   0x0
c00078a7:	68 56 e7 01 c0       	push   0xc001e756
c00078ac:	6a 31                	push   0x31
c00078ae:	53                   	push   ebx
c00078af:	e8 34 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078b4:	83 c4 20             	add    esp,0x20
c00078b7:	6a 00                	push   0x0
c00078b9:	68 60 e7 01 c0       	push   0xc001e760
c00078be:	6a 32                	push   0x32
c00078c0:	53                   	push   ebx
c00078c1:	e8 22 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078c6:	6a 00                	push   0x0
c00078c8:	68 6a e7 01 c0       	push   0xc001e76a
c00078cd:	6a 33                	push   0x33
c00078cf:	53                   	push   ebx
c00078d0:	e8 13 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078d5:	83 c4 20             	add    esp,0x20
c00078d8:	6a 00                	push   0x0
c00078da:	68 74 e7 01 c0       	push   0xc001e774
c00078df:	6a 34                	push   0x34
c00078e1:	53                   	push   ebx
c00078e2:	e8 01 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078e7:	6a 00                	push   0x0
c00078e9:	68 7e e7 01 c0       	push   0xc001e77e
c00078ee:	6a 35                	push   0x35
c00078f0:	53                   	push   ebx
c00078f1:	e8 f2 fc ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078f6:	83 c4 20             	add    esp,0x20
c00078f9:	6a 00                	push   0x0
c00078fb:	68 88 e7 01 c0       	push   0xc001e788
c0007900:	6a 36                	push   0x36
c0007902:	53                   	push   ebx
c0007903:	e8 e0 fc ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007908:	6a 00                	push   0x0
c000790a:	68 92 e7 01 c0       	push   0xc001e792
c000790f:	6a 37                	push   0x37
c0007911:	53                   	push   ebx
c0007912:	e8 d1 fc ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007917:	83 c4 1c             	add    esp,0x1c
c000791a:	6a 03                	push   0x3
c000791c:	6a 02                	push   0x2
c000791e:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007924:	e8 d1 24 00 00       	call   c0009dfa <VAS::allocatePages(int, int)>
c0007929:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007930:	89 c6                	mov    esi,eax
c0007932:	e8 94 01 00 00       	call   c0007acb <malloc>
c0007937:	81 c6 00 20 00 00    	add    esi,0x2000
c000793d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007940:	89 c7                	mov    edi,eax
c0007942:	e8 d9 15 00 00       	call   c0008f20 <TSS::TSS()>
c0007947:	83 c4 0c             	add    esp,0xc
c000794a:	68 06 e5 01 c0       	push   0xc001e506
c000794f:	56                   	push   esi
c0007950:	57                   	push   edi
c0007951:	e8 0e 16 00 00       	call   c0008f64 <TSS::setup(unsigned long, unsigned long)>
c0007956:	89 c6                	mov    esi,eax
c0007958:	58                   	pop    eax
c0007959:	5a                   	pop    edx
c000795a:	6a 00                	push   0x0
c000795c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007960:	50                   	push   eax
c0007961:	e8 ce fb ff ff       	call   c0007534 <IDTEntry::IDTEntry(bool)>
c0007966:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000796a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000796f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007976:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000797a:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007980:	80 ce 05             	or     dh,0x5
c0007983:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007987:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000798a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000798e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007991:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007994:	e8 87 fc ff ff       	call   c0007620 <IDT::flush()>
c0007999:	83 c4 20             	add    esp,0x20
c000799c:	5b                   	pop    ebx
c000799d:	5e                   	pop    esi
c000799e:	5f                   	pop    edi
c000799f:	c3                   	ret    

c00079a0 <sbrk>:
c00079a0:	55                   	push   ebp
c00079a1:	57                   	push   edi
c00079a2:	56                   	push   esi
c00079a3:	53                   	push   ebx
c00079a4:	83 ec 1c             	sub    esp,0x1c
c00079a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00079ab:	85 c0                	test   eax,eax
c00079ad:	74 66                	je     c0007a15 <sbrk+0x75>
c00079af:	78 6b                	js     c0007a1c <sbrk+0x7c>
c00079b1:	8b 15 f0 27 02 c0    	mov    edx,DWORD PTR ds:0xc00227f0
c00079b7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079bb:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c00079c1:	05 ff 0f 00 00       	add    eax,0xfff
c00079c6:	0f 49 e8             	cmovns ebp,eax
c00079c9:	c1 fd 0c             	sar    ebp,0xc
c00079cc:	bb 00 00 00 00       	mov    ebx,0x0
c00079d1:	8b 35 b0 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fb0
c00079d7:	8b 3d f0 27 02 c0    	mov    edi,DWORD PTR ds:0xc00227f0
c00079dd:	e8 f3 03 00 00       	call   c0007dd5 <Phys::allocatePage()>
c00079e2:	68 01 04 00 00       	push   0x401
c00079e7:	57                   	push   edi
c00079e8:	50                   	push   eax
c00079e9:	56                   	push   esi
c00079ea:	e8 03 23 00 00       	call   c0009cf2 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079ef:	81 05 f0 27 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00227f0,0x1000
c00079f9:	83 c3 01             	add    ebx,0x1
c00079fc:	83 c4 10             	add    esp,0x10
c00079ff:	39 dd                	cmp    ebp,ebx
c0007a01:	75 ce                	jne    c00079d1 <sbrk+0x31>
c0007a03:	0f 20 d8             	mov    eax,cr3
c0007a06:	0f 22 d8             	mov    cr3,eax
c0007a09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a0d:	83 c4 1c             	add    esp,0x1c
c0007a10:	5b                   	pop    ebx
c0007a11:	5e                   	pop    esi
c0007a12:	5f                   	pop    edi
c0007a13:	5d                   	pop    ebp
c0007a14:	c3                   	ret    
c0007a15:	a1 f0 27 02 c0       	mov    eax,ds:0xc00227f0
c0007a1a:	eb f1                	jmp    c0007a0d <sbrk+0x6d>
c0007a1c:	83 ec 08             	sub    esp,0x8
c0007a1f:	50                   	push   eax
c0007a20:	68 98 00 02 c0       	push   0xc0020098
c0007a25:	e8 d4 2e 00 00       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0007a2a:	83 c4 10             	add    esp,0x10
c0007a2d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a32:	eb d9                	jmp    c0007a0d <sbrk+0x6d>

c0007a34 <mmap>:
c0007a34:	83 ec 18             	sub    esp,0x18
c0007a37:	68 c8 00 02 c0       	push   0xc00200c8
c0007a3c:	e8 30 91 00 00       	call   c0010b71 <KePanic(char const*)>
c0007a41:	b8 00 00 00 00       	mov    eax,0x0
c0007a46:	83 c4 1c             	add    esp,0x1c
c0007a49:	c3                   	ret    

c0007a4a <munmap>:
c0007a4a:	83 ec 18             	sub    esp,0x18
c0007a4d:	68 cd 00 02 c0       	push   0xc00200cd
c0007a52:	e8 1a 91 00 00       	call   c0010b71 <KePanic(char const*)>
c0007a57:	b8 00 00 00 00       	mov    eax,0x0
c0007a5c:	83 c4 1c             	add    esp,0x1c
c0007a5f:	c3                   	ret    

c0007a60 <liballoc_lock()>:
c0007a60:	fa                   	cli    
c0007a61:	83 05 68 91 02 c0 01 	add    DWORD PTR ds:0xc0029168,0x1
c0007a68:	b8 00 00 00 00       	mov    eax,0x0
c0007a6d:	c3                   	ret    

c0007a6e <liballoc_unlock()>:
c0007a6e:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0007a73:	83 e8 01             	sub    eax,0x1
c0007a76:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0007a7b:	75 01                	jne    c0007a7e <liballoc_unlock()+0x10>
c0007a7d:	fb                   	sti    
c0007a7e:	b8 00 00 00 00       	mov    eax,0x0
c0007a83:	c3                   	ret    

c0007a84 <liballoc_alloc(int)>:
c0007a84:	83 ec 10             	sub    esp,0x10
c0007a87:	6a 01                	push   0x1
c0007a89:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a8d:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007a93:	e8 62 23 00 00       	call   c0009dfa <VAS::allocatePages(int, int)>
c0007a98:	83 c4 1c             	add    esp,0x1c
c0007a9b:	c3                   	ret    

c0007a9c <liballoc_free(void*, int)>:
c0007a9c:	83 ec 14             	sub    esp,0x14
c0007a9f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007aa3:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007aa9:	e8 8c 1f 00 00       	call   c0009a3a <VAS::freeAllocatedPages(unsigned long)>
c0007aae:	b8 00 00 00 00       	mov    eax,0x0
c0007ab3:	83 c4 1c             	add    esp,0x1c
c0007ab6:	c3                   	ret    

c0007ab7 <realloc>:
c0007ab7:	83 ec 14             	sub    esp,0x14
c0007aba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007abe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ac2:	e8 5a 9b ff ff       	call   c0001621 <dlrealloc>
c0007ac7:	83 c4 1c             	add    esp,0x1c
c0007aca:	c3                   	ret    

c0007acb <malloc>:
c0007acb:	83 ec 18             	sub    esp,0x18
c0007ace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ad2:	e8 0d 96 ff ff       	call   c00010e4 <dlmalloc>
c0007ad7:	83 c4 1c             	add    esp,0x1c
c0007ada:	c3                   	ret    

c0007adb <free>:
c0007adb:	83 ec 18             	sub    esp,0x18
c0007ade:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ae2:	e8 9f 92 ff ff       	call   c0000d86 <dlfree>
c0007ae7:	83 c4 1c             	add    esp,0x1c
c0007aea:	c3                   	ret    

c0007aeb <rfree>:
c0007aeb:	83 ec 18             	sub    esp,0x18
c0007aee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007af2:	e8 8f 92 ff ff       	call   c0000d86 <dlfree>
c0007af7:	83 c4 1c             	add    esp,0x1c
c0007afa:	c3                   	ret    

c0007afb <calloc>:
c0007afb:	56                   	push   esi
c0007afc:	53                   	push   ebx
c0007afd:	83 ec 10             	sub    esp,0x10
c0007b00:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007b04:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007b09:	53                   	push   ebx
c0007b0a:	e8 bc ff ff ff       	call   c0007acb <malloc>
c0007b0f:	89 c6                	mov    esi,eax
c0007b11:	83 c4 0c             	add    esp,0xc
c0007b14:	53                   	push   ebx
c0007b15:	6a 00                	push   0x0
c0007b17:	50                   	push   eax
c0007b18:	e8 d3 89 ff ff       	call   c00004f0 <memset>
c0007b1d:	89 f0                	mov    eax,esi
c0007b1f:	83 c4 14             	add    esp,0x14
c0007b22:	5b                   	pop    ebx
c0007b23:	5e                   	pop    esi
c0007b24:	c3                   	ret    

c0007b25 <KeEntryPoint>:
c0007b25:	57                   	push   edi
c0007b26:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b2b:	56                   	push   esi
c0007b2c:	31 f6                	xor    esi,esi
c0007b2e:	53                   	push   ebx
c0007b2f:	89 fa                	mov    edx,edi
c0007b31:	83 ec 2c             	sub    esp,0x2c
c0007b34:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b39:	a3 d0 5e 02 c0       	mov    ds:0xc0025ed0,eax
c0007b3e:	89 f0                	mov    eax,esi
c0007b40:	ee                   	out    dx,al
c0007b41:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b46:	b0 80                	mov    al,0x80
c0007b48:	89 da                	mov    edx,ebx
c0007b4a:	ee                   	out    dx,al
c0007b4b:	b1 03                	mov    cl,0x3
c0007b4d:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b52:	88 c8                	mov    al,cl
c0007b54:	ee                   	out    dx,al
c0007b55:	89 f0                	mov    eax,esi
c0007b57:	89 fa                	mov    edx,edi
c0007b59:	ee                   	out    dx,al
c0007b5a:	88 c8                	mov    al,cl
c0007b5c:	89 da                	mov    edx,ebx
c0007b5e:	ee                   	out    dx,al
c0007b5f:	b0 c7                	mov    al,0xc7
c0007b61:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b66:	ee                   	out    dx,al
c0007b67:	b0 0b                	mov    al,0xb
c0007b69:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b6e:	ee                   	out    dx,al
c0007b6f:	68 d4 00 02 c0       	push   0xc00200d4
c0007b74:	e8 85 2d 00 00       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0007b79:	e8 a1 88 00 00       	call   c001041f <KeDisplaySplashScreen()>
c0007b7e:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b83:	05 ff 0f 00 00       	add    eax,0xfff
c0007b88:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b8d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b90:	e8 ae 03 00 00       	call   c0007f43 <Phys::physicalMemorySetup(unsigned int)>
c0007b95:	e8 23 1c 00 00       	call   c00097bd <Virt::virtualMemorySetup()>
c0007b9a:	58                   	pop    eax
c0007b9b:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b9f:	53                   	push   ebx
c0007ba0:	e8 15 1f 00 00       	call   c0009aba <VAS::VAS()>
c0007ba5:	89 1d b0 5f 02 c0    	mov    DWORD PTR ds:0xc0025fb0,ebx
c0007bab:	e8 9a 71 01 00       	call   c001ed4a <_init>
c0007bb0:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007bb7:	e8 0f ff ff ff       	call   c0007acb <malloc>
c0007bbc:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bbf:	89 c6                	mov    esi,eax
c0007bc1:	e8 3a f2 ff ff       	call   c0006e00 <Computer::Computer()>
c0007bc6:	53                   	push   ebx
c0007bc7:	6a 00                	push   0x0
c0007bc9:	6a 00                	push   0x0
c0007bcb:	56                   	push   esi
c0007bcc:	89 35 b8 5e 02 c0    	mov    DWORD PTR ds:0xc0025eb8,esi
c0007bd2:	e8 ef f5 ff ff       	call   c00071c6 <Computer::open(int, int, void*)>
c0007bd7:	83 c4 14             	add    esp,0x14
c0007bda:	53                   	push   ebx
c0007bdb:	e8 a4 1f 00 00       	call   c0009b84 <VAS::~VAS()>
c0007be0:	83 c4 30             	add    esp,0x30
c0007be3:	5b                   	pop    ebx
c0007be4:	5e                   	pop    esi
c0007be5:	5f                   	pop    edi
c0007be6:	c3                   	ret    

c0007be7 <Phys::allocateDMA(unsigned long)>:
c0007be7:	55                   	push   ebp
c0007be8:	31 ed                	xor    ebp,ebp
c0007bea:	57                   	push   edi
c0007beb:	56                   	push   esi
c0007bec:	31 f6                	xor    esi,esi
c0007bee:	53                   	push   ebx
c0007bef:	31 db                	xor    ebx,ebx
c0007bf1:	83 ec 1c             	sub    esp,0x1c
c0007bf4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007bf8:	05 ff 0f 00 00       	add    eax,0xfff
c0007bfd:	c1 e8 0c             	shr    eax,0xc
c0007c00:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c04:	31 c0                	xor    eax,eax
c0007c06:	eb 1b                	jmp    c0007c23 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c08:	8d 78 01             	lea    edi,[eax+0x1]
c0007c0b:	85 c0                	test   eax,eax
c0007c0d:	0f 44 eb             	cmove  ebp,ebx
c0007c10:	0f 44 f3             	cmove  esi,ebx
c0007c13:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0007c17:	74 37                	je     c0007c50 <Phys::allocateDMA(unsigned long)+0x69>
c0007c19:	89 f8                	mov    eax,edi
c0007c1b:	83 c3 01             	add    ebx,0x1
c0007c1e:	83 fb 0f             	cmp    ebx,0xf
c0007c21:	7f 13                	jg     c0007c36 <Phys::allocateDMA(unsigned long)+0x4f>
c0007c23:	80 bb ec 5e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffda114],0x0
c0007c2a:	74 dc                	je     c0007c08 <Phys::allocateDMA(unsigned long)+0x21>
c0007c2c:	31 c0                	xor    eax,eax
c0007c2e:	83 c3 01             	add    ebx,0x1
c0007c31:	83 fb 0f             	cmp    ebx,0xf
c0007c34:	7e ed                	jle    c0007c23 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c36:	83 ec 0c             	sub    esp,0xc
c0007c39:	68 ec 00 02 c0       	push   0xc00200ec
c0007c3e:	e8 2e 8f 00 00       	call   c0010b71 <KePanic(char const*)>
c0007c43:	83 c4 10             	add    esp,0x10
c0007c46:	31 c0                	xor    eax,eax
c0007c48:	83 c4 1c             	add    esp,0x1c
c0007c4b:	5b                   	pop    ebx
c0007c4c:	5e                   	pop    esi
c0007c4d:	5f                   	pop    edi
c0007c4e:	5d                   	pop    ebp
c0007c4f:	c3                   	ret    
c0007c50:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007c54:	89 f2                	mov    edx,esi
c0007c56:	c1 fa 04             	sar    edx,0x4
c0007c59:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c5d:	01 f1                	add    ecx,esi
c0007c5f:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c62:	83 e9 01             	sub    ecx,0x1
c0007c65:	0f 48 ca             	cmovs  ecx,edx
c0007c68:	c1 f9 04             	sar    ecx,0x4
c0007c6b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0007c6f:	74 06                	je     c0007c77 <Phys::allocateDMA(unsigned long)+0x90>
c0007c71:	89 eb                	mov    ebx,ebp
c0007c73:	31 c0                	xor    eax,eax
c0007c75:	eb b7                	jmp    c0007c2e <Phys::allocateDMA(unsigned long)+0x47>
c0007c77:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c7b:	85 d2                	test   edx,edx
c0007c7d:	74 17                	je     c0007c96 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c7f:	8d 96 ec 5e 02 c0    	lea    edx,[esi-0x3ffda114]
c0007c85:	8d 84 06 ed 5e 02 c0 	lea    eax,[esi+eax*1-0x3ffda113]
c0007c8c:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c8f:	83 c2 01             	add    edx,0x1
c0007c92:	39 d0                	cmp    eax,edx
c0007c94:	75 f6                	jne    c0007c8c <Phys::allocateDMA(unsigned long)+0xa5>
c0007c96:	8b 15 e4 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee4
c0007c9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ca0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007ca4:	01 c2                	add    edx,eax
c0007ca6:	89 15 e4 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee4,edx
c0007cac:	85 c9                	test   ecx,ecx
c0007cae:	74 17                	je     c0007cc7 <Phys::allocateDMA(unsigned long)+0xe0>
c0007cb0:	83 ec 0c             	sub    esp,0xc
c0007cb3:	68 ec 00 02 c0       	push   0xc00200ec
c0007cb8:	e8 b4 8e 00 00       	call   c0010b71 <KePanic(char const*)>
c0007cbd:	83 c4 10             	add    esp,0x10
c0007cc0:	89 f8                	mov    eax,edi
c0007cc2:	e9 54 ff ff ff       	jmp    c0007c1b <Phys::allocateDMA(unsigned long)+0x34>
c0007cc7:	c1 e6 0c             	shl    esi,0xc
c0007cca:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c0007cd0:	e9 73 ff ff ff       	jmp    c0007c48 <Phys::allocateDMA(unsigned long)+0x61>

c0007cd5 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007cd5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cd9:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cdf:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007ce4:	c1 ea 0c             	shr    edx,0xc
c0007ce7:	29 d0                	sub    eax,edx
c0007ce9:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007cee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cf2:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007cf7:	c1 e8 0c             	shr    eax,0xc
c0007cfa:	85 d2                	test   edx,edx
c0007cfc:	74 11                	je     c0007d0f <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007cfe:	05 ec 5e 02 c0       	add    eax,0xc0025eec
c0007d03:	01 c2                	add    edx,eax
c0007d05:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007d08:	83 c0 01             	add    eax,0x1
c0007d0b:	39 d0                	cmp    eax,edx
c0007d0d:	75 f6                	jne    c0007d05 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007d0f:	c3                   	ret    

c0007d10 <Phys::setPageState(unsigned long, bool)>:
c0007d10:	57                   	push   edi
c0007d11:	56                   	push   esi
c0007d12:	8b 35 f4 27 02 c0    	mov    esi,DWORD PTR ds:0xc00227f4
c0007d18:	53                   	push   ebx
c0007d19:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d1e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d22:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d26:	89 ca                	mov    edx,ecx
c0007d28:	83 e1 07             	and    ecx,0x7
c0007d2b:	c1 ea 03             	shr    edx,0x3
c0007d2e:	0f b6 c0             	movzx  eax,al
c0007d31:	d3 c3                	rol    ebx,cl
c0007d33:	01 d6                	add    esi,edx
c0007d35:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d38:	d3 e0                	shl    eax,cl
c0007d3a:	21 fb                	and    ebx,edi
c0007d3c:	88 1e                	mov    BYTE PTR [esi],bl
c0007d3e:	8b 1d f4 27 02 c0    	mov    ebx,DWORD PTR ds:0xc00227f4
c0007d44:	01 da                	add    edx,ebx
c0007d46:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d48:	09 c8                	or     eax,ecx
c0007d4a:	88 02                	mov    BYTE PTR [edx],al
c0007d4c:	5b                   	pop    ebx
c0007d4d:	5e                   	pop    esi
c0007d4e:	5f                   	pop    edi
c0007d4f:	c3                   	ret    

c0007d50 <Phys::getPageState(unsigned long)>:
c0007d50:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d54:	8b 15 f4 27 02 c0    	mov    edx,DWORD PTR ds:0xc00227f4
c0007d5a:	89 c8                	mov    eax,ecx
c0007d5c:	83 e1 07             	and    ecx,0x7
c0007d5f:	c1 e8 03             	shr    eax,0x3
c0007d62:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d66:	d3 f8                	sar    eax,cl
c0007d68:	83 e0 01             	and    eax,0x1
c0007d6b:	c3                   	ret    

c0007d6c <Phys::freePage(unsigned long)>:
c0007d6c:	53                   	push   ebx
c0007d6d:	83 ec 08             	sub    esp,0x8
c0007d70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d74:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d7a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d80:	76 41                	jbe    c0007dc3 <Phys::freePage(unsigned long)+0x57>
c0007d82:	c1 e8 0c             	shr    eax,0xc
c0007d85:	50                   	push   eax
c0007d86:	89 c3                	mov    ebx,eax
c0007d88:	e8 c3 ff ff ff       	call   c0007d50 <Phys::getPageState(unsigned long)>
c0007d8d:	5a                   	pop    edx
c0007d8e:	84 c0                	test   al,al
c0007d90:	74 20                	je     c0007db2 <Phys::freePage(unsigned long)+0x46>
c0007d92:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007d97:	83 ec 08             	sub    esp,0x8
c0007d9a:	6a 00                	push   0x0
c0007d9c:	53                   	push   ebx
c0007d9d:	83 e8 01             	sub    eax,0x1
c0007da0:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007da5:	e8 66 ff ff ff       	call   c0007d10 <Phys::setPageState(unsigned long, bool)>
c0007daa:	83 c4 10             	add    esp,0x10
c0007dad:	83 c4 08             	add    esp,0x8
c0007db0:	5b                   	pop    ebx
c0007db1:	c3                   	ret    
c0007db2:	c7 44 24 10 91 01 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020191
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	e9 ae 8d 00 00       	jmp    c0010b71 <KePanic(char const*)>
c0007dc3:	68 00 10 00 00       	push   0x1000
c0007dc8:	50                   	push   eax
c0007dc9:	e8 07 ff ff ff       	call   c0007cd5 <Phys::freeDMA(unsigned long, unsigned long)>
c0007dce:	59                   	pop    ecx
c0007dcf:	5b                   	pop    ebx
c0007dd0:	83 c4 08             	add    esp,0x8
c0007dd3:	5b                   	pop    ebx
c0007dd4:	c3                   	ret    

c0007dd5 <Phys::allocatePage()>:
c0007dd5:	56                   	push   esi
c0007dd6:	53                   	push   ebx
c0007dd7:	83 ec 14             	sub    esp,0x14
c0007dda:	8b 35 d8 5e 02 c0    	mov    esi,DWORD PTR ds:0xc0025ed8
c0007de0:	89 f3                	mov    ebx,esi
c0007de2:	eb 0a                	jmp    c0007dee <Phys::allocatePage()+0x19>
c0007de4:	89 1d d8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ed8,ebx
c0007dea:	39 de                	cmp    esi,ebx
c0007dec:	74 26                	je     c0007e14 <Phys::allocatePage()+0x3f>
c0007dee:	53                   	push   ebx
c0007def:	e8 5c ff ff ff       	call   c0007d50 <Phys::getPageState(unsigned long)>
c0007df4:	5a                   	pop    edx
c0007df5:	84 c0                	test   al,al
c0007df7:	74 67                	je     c0007e60 <Phys::allocatePage()+0x8b>
c0007df9:	83 c3 01             	add    ebx,0x1
c0007dfc:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007e02:	75 e0                	jne    c0007de4 <Phys::allocatePage()+0xf>
c0007e04:	c7 05 d8 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025ed8,0x0
c0007e0e:	31 db                	xor    ebx,ebx
c0007e10:	39 de                	cmp    esi,ebx
c0007e12:	75 da                	jne    c0007dee <Phys::allocatePage()+0x19>
c0007e14:	a0 fc 5e 02 c0       	mov    al,ds:0xc0025efc
c0007e19:	83 ec 0c             	sub    esp,0xc
c0007e1c:	83 f0 01             	xor    eax,0x1
c0007e1f:	a2 fc 5e 02 c0       	mov    ds:0xc0025efc,al
c0007e24:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e29:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e2c:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e32:	50                   	push   eax
c0007e33:	e8 7a 27 00 00       	call   c000a5b2 <VAS::scanForEviction()>
c0007e38:	83 c4 10             	add    esp,0x10
c0007e3b:	85 c0                	test   eax,eax
c0007e3d:	75 48                	jne    c0007e87 <Phys::allocatePage()+0xb2>
c0007e3f:	83 ec 0c             	sub    esp,0xc
c0007e42:	68 14 01 02 c0       	push   0xc0020114
c0007e47:	e8 25 8d 00 00       	call   c0010b71 <KePanic(char const*)>
c0007e4c:	8b 1d d8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025ed8
c0007e52:	83 c4 10             	add    esp,0x10
c0007e55:	53                   	push   ebx
c0007e56:	e8 f5 fe ff ff       	call   c0007d50 <Phys::getPageState(unsigned long)>
c0007e5b:	5a                   	pop    edx
c0007e5c:	84 c0                	test   al,al
c0007e5e:	75 99                	jne    c0007df9 <Phys::allocatePage()+0x24>
c0007e60:	6a 01                	push   0x1
c0007e62:	53                   	push   ebx
c0007e63:	e8 a8 fe ff ff       	call   c0007d10 <Phys::setPageState(unsigned long, bool)>
c0007e68:	8b 15 e4 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee4
c0007e6e:	59                   	pop    ecx
c0007e6f:	a1 d8 5e 02 c0       	mov    eax,ds:0xc0025ed8
c0007e74:	5b                   	pop    ebx
c0007e75:	83 c2 01             	add    edx,0x1
c0007e78:	89 15 e4 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee4,edx
c0007e7e:	c1 e0 0c             	shl    eax,0xc
c0007e81:	83 c4 14             	add    esp,0x14
c0007e84:	5b                   	pop    ebx
c0007e85:	5e                   	pop    esi
c0007e86:	c3                   	ret    
c0007e87:	83 ec 08             	sub    esp,0x8
c0007e8a:	89 c2                	mov    edx,eax
c0007e8c:	6a 01                	push   0x1
c0007e8e:	c1 ea 0c             	shr    edx,0xc
c0007e91:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e95:	52                   	push   edx
c0007e96:	e8 75 fe ff ff       	call   c0007d10 <Phys::setPageState(unsigned long, bool)>
c0007e9b:	83 c4 10             	add    esp,0x10
c0007e9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ea2:	eb dd                	jmp    c0007e81 <Phys::allocatePage()+0xac>

c0007ea4 <Phys::allocateContiguousPages(int)>:
c0007ea4:	57                   	push   edi
c0007ea5:	56                   	push   esi
c0007ea6:	53                   	push   ebx
c0007ea7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007eab:	fa                   	cli    
c0007eac:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0007eb1:	31 db                	xor    ebx,ebx
c0007eb3:	83 c0 01             	add    eax,0x1
c0007eb6:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0007ebb:	85 db                	test   ebx,ebx
c0007ebd:	75 11                	jne    c0007ed0 <Phys::allocateContiguousPages(int)+0x2c>
c0007ebf:	e8 11 ff ff ff       	call   c0007dd5 <Phys::allocatePage()>
c0007ec4:	83 fe 01             	cmp    esi,0x1
c0007ec7:	89 c7                	mov    edi,eax
c0007ec9:	74 21                	je     c0007eec <Phys::allocateContiguousPages(int)+0x48>
c0007ecb:	bb 01 00 00 00       	mov    ebx,0x1
c0007ed0:	e8 00 ff ff ff       	call   c0007dd5 <Phys::allocatePage()>
c0007ed5:	89 da                	mov    edx,ebx
c0007ed7:	c1 e2 0c             	shl    edx,0xc
c0007eda:	01 fa                	add    edx,edi
c0007edc:	39 c2                	cmp    edx,eax
c0007ede:	74 22                	je     c0007f02 <Phys::allocateContiguousPages(int)+0x5e>
c0007ee0:	83 fe 01             	cmp    esi,0x1
c0007ee3:	bb 01 00 00 00       	mov    ebx,0x1
c0007ee8:	89 c7                	mov    edi,eax
c0007eea:	75 e4                	jne    c0007ed0 <Phys::allocateContiguousPages(int)+0x2c>
c0007eec:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0007ef1:	83 e8 01             	sub    eax,0x1
c0007ef4:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0007ef9:	75 01                	jne    c0007efc <Phys::allocateContiguousPages(int)+0x58>
c0007efb:	fb                   	sti    
c0007efc:	5b                   	pop    ebx
c0007efd:	89 f8                	mov    eax,edi
c0007eff:	5e                   	pop    esi
c0007f00:	5f                   	pop    edi
c0007f01:	c3                   	ret    
c0007f02:	83 c3 01             	add    ebx,0x1
c0007f05:	39 f3                	cmp    ebx,esi
c0007f07:	75 b2                	jne    c0007ebb <Phys::allocateContiguousPages(int)+0x17>
c0007f09:	eb e1                	jmp    c0007eec <Phys::allocateContiguousPages(int)+0x48>

c0007f0b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007f0b:	56                   	push   esi
c0007f0c:	53                   	push   ebx
c0007f0d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007f11:	39 1d dc 5e 02 c0    	cmp    DWORD PTR ds:0xc0025edc,ebx
c0007f17:	73 06                	jae    c0007f1f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f19:	89 1d dc 5e 02 c0    	mov    DWORD PTR ds:0xc0025edc,ebx
c0007f1f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f23:	c1 eb 0c             	shr    ebx,0xc
c0007f26:	c1 e8 0c             	shr    eax,0xc
c0007f29:	39 d8                	cmp    eax,ebx
c0007f2b:	73 13                	jae    c0007f40 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f2d:	6a 00                	push   0x0
c0007f2f:	50                   	push   eax
c0007f30:	8d 70 01             	lea    esi,[eax+0x1]
c0007f33:	e8 d8 fd ff ff       	call   c0007d10 <Phys::setPageState(unsigned long, bool)>
c0007f38:	39 f3                	cmp    ebx,esi
c0007f3a:	89 f0                	mov    eax,esi
c0007f3c:	5a                   	pop    edx
c0007f3d:	59                   	pop    ecx
c0007f3e:	75 ed                	jne    c0007f2d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f40:	5b                   	pop    ebx
c0007f41:	5e                   	pop    esi
c0007f42:	c3                   	ret    

c0007f43 <Phys::physicalMemorySetup(unsigned int)>:
c0007f43:	55                   	push   ebp
c0007f44:	57                   	push   edi
c0007f45:	56                   	push   esi
c0007f46:	53                   	push   ebx
c0007f47:	31 db                	xor    ebx,ebx
c0007f49:	83 ec 40             	sub    esp,0x40
c0007f4c:	6a 10                	push   0x10
c0007f4e:	6a 00                	push   0x0
c0007f50:	68 ec 5e 02 c0       	push   0xc0025eec
c0007f55:	e8 96 85 ff ff       	call   c00004f0 <memset>
c0007f5a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f5e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f63:	05 00 10 00 00       	add    eax,0x1000
c0007f68:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007f6c:	5a                   	pop    edx
c0007f6d:	59                   	pop    ecx
c0007f6e:	50                   	push   eax
c0007f6f:	68 a7 01 02 c0       	push   0xc00201a7
c0007f74:	e8 85 29 00 00       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0007f79:	83 c4 10             	add    esp,0x10
c0007f7c:	83 ec 08             	sub    esp,0x8
c0007f7f:	6a 01                	push   0x1
c0007f81:	53                   	push   ebx
c0007f82:	83 c3 01             	add    ebx,0x1
c0007f85:	e8 86 fd ff ff       	call   c0007d10 <Phys::setPageState(unsigned long, bool)>
c0007f8a:	83 c4 10             	add    esp,0x10
c0007f8d:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f93:	75 e7                	jne    c0007f7c <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f95:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007f9c:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007fa3:	c1 e0 08             	shl    eax,0x8
c0007fa6:	09 c2                	or     edx,eax
c0007fa8:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0007fac:	0f 84 43 01 00 00    	je     c00080f5 <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c0007fb2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fba:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fbf:	e9 82 00 00 00       	jmp    c0008046 <Phys::physicalMemorySetup(unsigned int)+0x103>
c0007fc4:	ba 00 00 08 00       	mov    edx,0x80000
c0007fc9:	89 c1                	mov    ecx,eax
c0007fcb:	39 f2                	cmp    edx,esi
c0007fcd:	19 f9                	sbb    ecx,edi
c0007fcf:	0f 82 c0 00 00 00    	jb     c0008095 <Phys::physicalMemorySetup(unsigned int)+0x152>
c0007fd5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007fd9:	89 c5                	mov    ebp,eax
c0007fdb:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007fdf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007fe3:	19 cd                	sbb    ebp,ecx
c0007fe5:	0f 83 af 00 00 00    	jae    c000809a <Phys::physicalMemorySetup(unsigned int)+0x157>
c0007feb:	89 d6                	mov    esi,edx
c0007fed:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007ff2:	39 f2                	cmp    edx,esi
c0007ff4:	89 cf                	mov    edi,ecx
c0007ff6:	19 c8                	sbb    eax,ecx
c0007ff8:	73 07                	jae    c0008001 <Phys::physicalMemorySetup(unsigned int)+0xbe>
c0007ffa:	be 00 00 0a 00       	mov    esi,0xa0000
c0007fff:	31 ff                	xor    edi,edi
c0008001:	89 f2                	mov    edx,esi
c0008003:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0008008:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000800e:	89 f9                	mov    ecx,edi
c0008010:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008014:	83 d1 ff             	adc    ecx,0xffffffff
c0008017:	39 d0                	cmp    eax,edx
c0008019:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000801d:	b8 00 00 00 00       	mov    eax,0x0
c0008022:	19 c8                	sbb    eax,ecx
c0008024:	0f 82 9d 01 00 00    	jb     c00081c7 <Phys::physicalMemorySetup(unsigned int)+0x284>
c000802a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000802e:	83 c3 18             	add    ebx,0x18
c0008031:	83 c6 01             	add    esi,0x1
c0008034:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008038:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000803c:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0008040:	0f 84 bf 00 00 00    	je     c0008105 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008046:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008048:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000804b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000804e:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008051:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0008055:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008058:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000805c:	01 f0                	add    eax,esi
c000805e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008062:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008066:	55                   	push   ebp
c0008067:	11 fa                	adc    edx,edi
c0008069:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000806d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008075:	50                   	push   eax
c0008076:	56                   	push   esi
c0008077:	68 44 01 02 c0       	push   0xc0020144
c000807c:	e8 7d 28 00 00       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0008081:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008085:	83 c4 10             	add    esp,0x10
c0008088:	09 f8                	or     eax,edi
c000808a:	75 79                	jne    c0008105 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c000808c:	83 fd 01             	cmp    ebp,0x1
c000808f:	0f 84 2f ff ff ff    	je     c0007fc4 <Phys::physicalMemorySetup(unsigned int)+0x81>
c0008095:	83 fd 01             	cmp    ebp,0x1
c0008098:	75 90                	jne    c000802a <Phys::physicalMemorySetup(unsigned int)+0xe7>
c000809a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000809e:	31 d2                	xor    edx,edx
c00080a0:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00080a4:	89 c8                	mov    eax,ecx
c00080a6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080aa:	19 d1                	sbb    ecx,edx
c00080ac:	0f 82 78 ff ff ff    	jb     c000802a <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080b2:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c00080b7:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c00080bb:	b9 00 00 00 00       	mov    ecx,0x0
c00080c0:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c00080c4:	0f 83 60 ff ff ff    	jae    c000802a <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080ca:	39 c6                	cmp    esi,eax
c00080cc:	19 d7                	sbb    edi,edx
c00080ce:	0f 83 ff 00 00 00    	jae    c00081d3 <Phys::physicalMemorySetup(unsigned int)+0x290>
c00080d4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080d8:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00080dc:	29 c7                	sub    edi,eax
c00080de:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00080e2:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00080e6:	19 d5                	sbb    ebp,edx
c00080e8:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00080ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00080f0:	e9 de 00 00 00       	jmp    c00081d3 <Phys::physicalMemorySetup(unsigned int)+0x290>
c00080f5:	83 ec 0c             	sub    esp,0xc
c00080f8:	68 bf 01 02 c0       	push   0xc00201bf
c00080fd:	e8 6f 8a 00 00       	call   c0010b71 <KePanic(char const*)>
c0008102:	83 c4 10             	add    esp,0x10
c0008105:	83 ec 08             	sub    esp,0x8
c0008108:	bb 60 00 00 00       	mov    ebx,0x60
c000810d:	6a 00                	push   0x0
c000810f:	6a 06                	push   0x6
c0008111:	e8 fa fb ff ff       	call   c0007d10 <Phys::setPageState(unsigned long, bool)>
c0008116:	58                   	pop    eax
c0008117:	5a                   	pop    edx
c0008118:	6a 00                	push   0x0
c000811a:	6a 07                	push   0x7
c000811c:	e8 ef fb ff ff       	call   c0007d10 <Phys::setPageState(unsigned long, bool)>
c0008121:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0008127:	83 c4 10             	add    esp,0x10
c000812a:	83 c1 02             	add    ecx,0x2
c000812d:	89 0d e8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee8,ecx
c0008133:	83 ec 08             	sub    esp,0x8
c0008136:	6a 00                	push   0x0
c0008138:	53                   	push   ebx
c0008139:	83 c3 01             	add    ebx,0x1
c000813c:	e8 cf fb ff ff       	call   c0007d10 <Phys::setPageState(unsigned long, bool)>
c0008141:	83 c4 10             	add    esp,0x10
c0008144:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000814a:	75 e7                	jne    c0008133 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c000814c:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c0008151:	bb 40 01 00 00       	mov    ebx,0x140
c0008156:	83 c0 20             	add    eax,0x20
c0008159:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c000815e:	eb 26                	jmp    c0008186 <Phys::physicalMemorySetup(unsigned int)+0x243>
c0008160:	83 ec 08             	sub    esp,0x8
c0008163:	6a 00                	push   0x0
c0008165:	53                   	push   ebx
c0008166:	83 c3 01             	add    ebx,0x1
c0008169:	e8 a2 fb ff ff       	call   c0007d10 <Phys::setPageState(unsigned long, bool)>
c000816e:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c0008173:	83 c4 10             	add    esp,0x10
c0008176:	83 c0 01             	add    eax,0x1
c0008179:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000817f:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c0008184:	74 07                	je     c000818d <Phys::physicalMemorySetup(unsigned int)+0x24a>
c0008186:	3d ff 03 00 00       	cmp    eax,0x3ff
c000818b:	7e d3                	jle    c0008160 <Phys::physicalMemorySetup(unsigned int)+0x21d>
c000818d:	bb d0 01 00 00       	mov    ebx,0x1d0
c0008192:	3d ff 07 00 00       	cmp    eax,0x7ff
c0008197:	7f 26                	jg     c00081bf <Phys::physicalMemorySetup(unsigned int)+0x27c>
c0008199:	83 ec 08             	sub    esp,0x8
c000819c:	6a 00                	push   0x0
c000819e:	53                   	push   ebx
c000819f:	83 c3 01             	add    ebx,0x1
c00081a2:	e8 69 fb ff ff       	call   c0007d10 <Phys::setPageState(unsigned long, bool)>
c00081a7:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c00081ac:	83 c4 10             	add    esp,0x10
c00081af:	83 c0 01             	add    eax,0x1
c00081b2:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081b8:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00081bd:	75 d3                	jne    c0008192 <Phys::physicalMemorySetup(unsigned int)+0x24f>
c00081bf:	83 c4 3c             	add    esp,0x3c
c00081c2:	5b                   	pop    ebx
c00081c3:	5e                   	pop    esi
c00081c4:	5f                   	pop    edi
c00081c5:	5d                   	pop    ebp
c00081c6:	c3                   	ret    
c00081c7:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00081cb:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c00081d3:	83 ec 04             	sub    esp,0x4
c00081d6:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00081da:	56                   	push   esi
c00081db:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00081df:	57                   	push   edi
c00081e0:	68 68 01 02 c0       	push   0xc0020168
c00081e5:	e8 14 27 00 00       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c00081ea:	5d                   	pop    ebp
c00081eb:	58                   	pop    eax
c00081ec:	56                   	push   esi
c00081ed:	57                   	push   edi
c00081ee:	e8 18 fd ff ff       	call   c0007f0b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00081f3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00081f7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00081fb:	83 c4 0c             	add    esp,0xc
c00081fe:	8b 35 e8 5e 02 c0    	mov    esi,DWORD PTR ds:0xc0025ee8
c0008204:	0f ac d0 0c          	shrd   eax,edx,0xc
c0008208:	01 f0                	add    eax,esi
c000820a:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c000820f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0008216:	52                   	push   edx
c0008217:	50                   	push   eax
c0008218:	68 cd 01 02 c0       	push   0xc00201cd
c000821d:	e8 dc 26 00 00       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0008222:	83 c4 10             	add    esp,0x10
c0008225:	e9 00 fe ff ff       	jmp    c000802a <Phys::physicalMemorySetup(unsigned int)+0xe7>

c000822a <Pipe::isAtty()>:
c000822a:	31 c0                	xor    eax,eax
c000822c:	c3                   	ret    
c000822d:	90                   	nop

c000822e <Pipe::~Pipe()>:
c000822e:	83 ec 0c             	sub    esp,0xc
c0008231:	ba 2c 02 02 c0       	mov    edx,0xc002022c
c0008236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000823a:	89 10                	mov    DWORD PTR [eax],edx
c000823c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008240:	83 ec 0c             	sub    esp,0xc
c0008243:	50                   	push   eax
c0008244:	e8 37 11 00 00       	call   c0009380 <UnixFile::~UnixFile()>
c0008249:	83 c4 10             	add    esp,0x10
c000824c:	90                   	nop
c000824d:	83 c4 0c             	add    esp,0xc
c0008250:	c3                   	ret    
c0008251:	90                   	nop

c0008252 <Pipe::~Pipe()>:
c0008252:	83 ec 0c             	sub    esp,0xc
c0008255:	83 ec 0c             	sub    esp,0xc
c0008258:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000825c:	e8 cd ff ff ff       	call   c000822e <Pipe::~Pipe()>
c0008261:	83 c4 10             	add    esp,0x10
c0008264:	83 ec 08             	sub    esp,0x8
c0008267:	6a 20                	push   0x20
c0008269:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000826d:	e8 8e 25 00 00       	call   c000a800 <operator delete(void*, unsigned long)>
c0008272:	83 c4 10             	add    esp,0x10
c0008275:	83 c4 0c             	add    esp,0xc
c0008278:	c3                   	ret    
c0008279:	90                   	nop

c000827a <Pipe::write(unsigned long long, void*, int*)>:
c000827a:	55                   	push   ebp
c000827b:	57                   	push   edi
c000827c:	56                   	push   esi
c000827d:	53                   	push   ebx
c000827e:	83 ec 1c             	sub    esp,0x1c
c0008281:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008285:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008289:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000828d:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0008290:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008294:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0008297:	89 04 24             	mov    DWORD PTR [esp],eax
c000829a:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000829e:	89 d8                	mov    eax,ebx
c00082a0:	89 d6                	mov    esi,edx
c00082a2:	89 d7                	mov    edi,edx
c00082a4:	c1 ff 1f             	sar    edi,0x1f
c00082a7:	03 34 24             	add    esi,DWORD PTR [esp]
c00082aa:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082ae:	c1 f8 1f             	sar    eax,0x1f
c00082b1:	39 f3                	cmp    ebx,esi
c00082b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082bb:	19 f8                	sbb    eax,edi
c00082bd:	b8 01 00 00 00       	mov    eax,0x1
c00082c2:	72 72                	jb     c0008336 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c00082c4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082c7:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00082cb:	01 d0                	add    eax,edx
c00082cd:	99                   	cdq    
c00082ce:	f7 fb                	idiv   ebx
c00082d0:	89 d8                	mov    eax,ebx
c00082d2:	29 d0                	sub    eax,edx
c00082d4:	89 d6                	mov    esi,edx
c00082d6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082d9:	89 c3                	mov    ebx,eax
c00082db:	c1 fb 1f             	sar    ebx,0x1f
c00082de:	39 c2                	cmp    edx,eax
c00082e0:	19 df                	sbb    edi,ebx
c00082e2:	bb 00 00 00 00       	mov    ebx,0x0
c00082e7:	72 04                	jb     c00082ed <Pipe::write(unsigned long long, void*, int*)+0x73>
c00082e9:	89 d3                	mov    ebx,edx
c00082eb:	29 c3                	sub    ebx,eax
c00082ed:	89 d0                	mov    eax,edx
c00082ef:	29 d8                	sub    eax,ebx
c00082f1:	74 0d                	je     c0008300 <Pipe::write(unsigned long long, void*, int*)+0x86>
c00082f3:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00082f6:	89 c1                	mov    ecx,eax
c00082f8:	01 f7                	add    edi,esi
c00082fa:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00082fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008300:	85 db                	test   ebx,ebx
c0008302:	74 0d                	je     c0008311 <Pipe::write(unsigned long long, void*, int*)+0x97>
c0008304:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008308:	89 d9                	mov    ecx,ebx
c000830a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000830d:	89 c6                	mov    esi,eax
c000830f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008311:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008314:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008319:	75 10                	jne    c000832b <Pipe::write(unsigned long long, void*, int*)+0xb1>
c000831b:	83 ec 0c             	sub    esp,0xc
c000831e:	68 e9 01 02 c0       	push   0xc00201e9
c0008323:	e8 49 88 00 00       	call   c0010b71 <KePanic(char const*)>
c0008328:	83 c4 10             	add    esp,0x10
c000832b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000832f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008332:	89 08                	mov    DWORD PTR [eax],ecx
c0008334:	31 c0                	xor    eax,eax
c0008336:	83 c4 1c             	add    esp,0x1c
c0008339:	5b                   	pop    ebx
c000833a:	5e                   	pop    esi
c000833b:	5f                   	pop    edi
c000833c:	5d                   	pop    ebp
c000833d:	c3                   	ret    

c000833e <Pipe::read(unsigned long long, void*, int*)>:
c000833e:	55                   	push   ebp
c000833f:	57                   	push   edi
c0008340:	56                   	push   esi
c0008341:	53                   	push   ebx
c0008342:	83 ec 1c             	sub    esp,0x1c
c0008345:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008349:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000834d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008351:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008354:	89 c8                	mov    eax,ecx
c0008356:	99                   	cdq    
c0008357:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000835b:	74 24                	je     c0008381 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000835d:	39 f9                	cmp    ecx,edi
c000835f:	89 d1                	mov    ecx,edx
c0008361:	19 f1                	sbb    ecx,esi
c0008363:	73 1c                	jae    c0008381 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008365:	fa                   	cli    
c0008366:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c000836c:	e8 03 d1 00 00       	call   c0015474 <schedule()>
c0008371:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0008376:	48                   	dec    eax
c0008377:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c000837c:	75 d3                	jne    c0008351 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000837e:	fb                   	sti    
c000837f:	eb d0                	jmp    c0008351 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008381:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008385:	39 f8                	cmp    eax,edi
c0008387:	89 d1                	mov    ecx,edx
c0008389:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000838d:	19 f1                	sbb    ecx,esi
c000838f:	73 08                	jae    c0008399 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c0008391:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008395:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008399:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000839c:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000839f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00083a3:	29 f7                	sub    edi,esi
c00083a5:	89 f8                	mov    eax,edi
c00083a7:	99                   	cdq    
c00083a8:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00083ac:	89 d0                	mov    eax,edx
c00083ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083b2:	19 c2                	sbb    edx,eax
c00083b4:	89 f8                	mov    eax,edi
c00083b6:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c00083bb:	89 ea                	mov    edx,ebp
c00083bd:	29 c2                	sub    edx,eax
c00083bf:	85 c0                	test   eax,eax
c00083c1:	74 0b                	je     c00083ce <Pipe::read(unsigned long long, void*, int*)+0x90>
c00083c3:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083c6:	89 c1                	mov    ecx,eax
c00083c8:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083cc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083ce:	85 d2                	test   edx,edx
c00083d0:	74 0d                	je     c00083df <Pipe::read(unsigned long long, void*, int*)+0xa1>
c00083d2:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083d6:	89 d1                	mov    ecx,edx
c00083d8:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083db:	89 c7                	mov    edi,eax
c00083dd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083df:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083e2:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083e5:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083e8:	99                   	cdq    
c00083e9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00083ed:	89 f7                	mov    edi,esi
c00083ef:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00083f3:	c1 ff 1f             	sar    edi,0x1f
c00083f6:	57                   	push   edi
c00083f7:	56                   	push   esi
c00083f8:	52                   	push   edx
c00083f9:	50                   	push   eax
c00083fa:	e8 31 68 01 00       	call   c001ec30 <__umoddi3>
c00083ff:	83 c4 10             	add    esp,0x10
c0008402:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008407:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000840a:	75 10                	jne    c000841c <Pipe::read(unsigned long long, void*, int*)+0xde>
c000840c:	83 ec 0c             	sub    esp,0xc
c000840f:	68 06 02 02 c0       	push   0xc0020206
c0008414:	e8 58 87 00 00       	call   c0010b71 <KePanic(char const*)>
c0008419:	83 c4 10             	add    esp,0x10
c000841c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008420:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008424:	89 10                	mov    DWORD PTR [eax],edx
c0008426:	83 c4 1c             	add    esp,0x1c
c0008429:	31 c0                	xor    eax,eax
c000842b:	5b                   	pop    ebx
c000842c:	5e                   	pop    esi
c000842d:	5f                   	pop    edi
c000842e:	5d                   	pop    ebp
c000842f:	c3                   	ret    

c0008430 <Pipe::Pipe(int)>:
c0008430:	83 ec 0c             	sub    esp,0xc
c0008433:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008437:	83 ec 08             	sub    esp,0x8
c000843a:	6a 00                	push   0x0
c000843c:	50                   	push   eax
c000843d:	e8 58 0d 00 00       	call   c000919a <UnixFile::UnixFile(int)>
c0008442:	83 c4 10             	add    esp,0x10
c0008445:	ba 2c 02 02 c0       	mov    edx,0xc002022c
c000844a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000844e:	89 10                	mov    DWORD PTR [eax],edx
c0008450:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008454:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008458:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000845b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000845f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000846a:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008471:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008475:	83 ec 0c             	sub    esp,0xc
c0008478:	50                   	push   eax
c0008479:	e8 4d f6 ff ff       	call   c0007acb <malloc>
c000847e:	83 c4 10             	add    esp,0x10
c0008481:	89 c2                	mov    edx,eax
c0008483:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008487:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000848a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000848e:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0008492:	90                   	nop
c0008493:	83 c4 0c             	add    esp,0xc
c0008496:	c3                   	ret    
c0008497:	90                   	nop

c0008498 <VgaText::isAtty()>:
c0008498:	b0 01                	mov    al,0x1
c000849a:	c3                   	ret    
c000849b:	90                   	nop

c000849c <VgaText::~VgaText()>:
c000849c:	83 ec 0c             	sub    esp,0xc
c000849f:	ba 74 02 02 c0       	mov    edx,0xc0020274
c00084a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a8:	89 10                	mov    DWORD PTR [eax],edx
c00084aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084ae:	83 ec 0c             	sub    esp,0xc
c00084b1:	50                   	push   eax
c00084b2:	e8 c9 0e 00 00       	call   c0009380 <UnixFile::~UnixFile()>
c00084b7:	83 c4 10             	add    esp,0x10
c00084ba:	90                   	nop
c00084bb:	83 c4 0c             	add    esp,0xc
c00084be:	c3                   	ret    
c00084bf:	90                   	nop

c00084c0 <VgaText::~VgaText()>:
c00084c0:	83 ec 0c             	sub    esp,0xc
c00084c3:	83 ec 0c             	sub    esp,0xc
c00084c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084ca:	e8 cd ff ff ff       	call   c000849c <VgaText::~VgaText()>
c00084cf:	83 c4 10             	add    esp,0x10
c00084d2:	83 ec 08             	sub    esp,0x8
c00084d5:	68 84 01 00 00       	push   0x184
c00084da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084de:	e8 1d 23 00 00       	call   c000a800 <operator delete(void*, unsigned long)>
c00084e3:	83 c4 10             	add    esp,0x10
c00084e6:	83 c4 0c             	add    esp,0xc
c00084e9:	c3                   	ret    

c00084ea <VgaText::read(unsigned long long, void*, int*)>:
c00084ea:	83 ec 10             	sub    esp,0x10
c00084ed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00084f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084f9:	e8 6c 4a 00 00       	call   c000cf6a <readKeyboard(VgaText*, char*, unsigned long)>
c00084fe:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008502:	89 02                	mov    DWORD PTR [edx],eax
c0008504:	31 c0                	xor    eax,eax
c0008506:	83 c4 1c             	add    esp,0x1c
c0008509:	c3                   	ret    

c000850a <setTerminalScrollLock(bool)>:
c000850a:	c3                   	ret    

c000850b <doTerminalCycle()>:
c000850b:	c3                   	ret    

c000850c <addToTerminalCycle(VgaText*)>:
c000850c:	c3                   	ret    

c000850d <scrollTerminalScrollLock(int)>:
c000850d:	c3                   	ret    

c000850e <VgaText::updateTitle()>:
c000850e:	c3                   	ret    
c000850f:	90                   	nop

c0008510 <VgaText::load()>:
c0008510:	c3                   	ret    
c0008511:	90                   	nop

c0008512 <VgaText::updateCursor()>:
c0008512:	83 ec 14             	sub    esp,0x14
c0008515:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008519:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000851c:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000851f:	e8 f0 fc 00 00       	call   c0018214 <HalConsoleCursorUpdate(int, int)>
c0008524:	83 c4 1c             	add    esp,0x1c
c0008527:	c3                   	ret    

c0008528 <VgaText::doANSI_SGR(int)>:
c0008528:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000852c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008530:	85 d2                	test   edx,edx
c0008532:	75 0b                	jne    c000853f <VgaText::doANSI_SGR(int)+0x17>
c0008534:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008537:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000853a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000853d:	eb 59                	jmp    c0008598 <VgaText::doANSI_SGR(int)+0x70>
c000853f:	83 fa 07             	cmp    edx,0x7
c0008542:	75 0b                	jne    c000854f <VgaText::doANSI_SGR(int)+0x27>
c0008544:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008547:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000854a:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000854d:	eb 49                	jmp    c0008598 <VgaText::doANSI_SGR(int)+0x70>
c000854f:	83 fa 1b             	cmp    edx,0x1b
c0008552:	74 e0                	je     c0008534 <VgaText::doANSI_SGR(int)+0xc>
c0008554:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008557:	83 f9 07             	cmp    ecx,0x7
c000855a:	77 09                	ja     c0008565 <VgaText::doANSI_SGR(int)+0x3d>
c000855c:	8b 14 8d 20 28 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd7e0]
c0008563:	eb 20                	jmp    c0008585 <VgaText::doANSI_SGR(int)+0x5d>
c0008565:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008568:	83 f9 07             	cmp    ecx,0x7
c000856b:	77 09                	ja     c0008576 <VgaText::doANSI_SGR(int)+0x4e>
c000856d:	8b 14 8d 20 28 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd7e0]
c0008574:	eb 22                	jmp    c0008598 <VgaText::doANSI_SGR(int)+0x70>
c0008576:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008579:	83 f9 07             	cmp    ecx,0x7
c000857c:	77 0b                	ja     c0008589 <VgaText::doANSI_SGR(int)+0x61>
c000857e:	8b 14 95 d8 26 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd928]
c0008585:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008588:	c3                   	ret    
c0008589:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000858c:	83 f9 07             	cmp    ecx,0x7
c000858f:	77 0a                	ja     c000859b <VgaText::doANSI_SGR(int)+0x73>
c0008591:	8b 14 95 b0 26 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd950]
c0008598:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000859b:	c3                   	ret    

c000859c <VgaText::setDefaultBgColour(VgaColour)>:
c000859c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085a4:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00085a7:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085aa:	c3                   	ret    
c00085ab:	90                   	nop

c00085ac <VgaText::setDefaultFgColour(VgaColour)>:
c00085ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085b4:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085b7:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085ba:	c3                   	ret    
c00085bb:	90                   	nop

c00085bc <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085bc:	53                   	push   ebx
c00085bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085c1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085c5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085c9:	51                   	push   ecx
c00085ca:	e8 cd ff ff ff       	call   c000859c <VgaText::setDefaultBgColour(VgaColour)>
c00085cf:	58                   	pop    eax
c00085d0:	5a                   	pop    edx
c00085d1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085d5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085d9:	5b                   	pop    ebx
c00085da:	eb d0                	jmp    c00085ac <VgaText::setDefaultFgColour(VgaColour)>

c00085dc <VgaText::setTitleTextColour(VgaColour)>:
c00085dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085e4:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085e7:	c3                   	ret    

c00085e8 <VgaText::setTitleColour(VgaColour)>:
c00085e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085f0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00085f3:	c3                   	ret    

c00085f4 <VgaText::setTitle(char*)>:
c00085f4:	c3                   	ret    
c00085f5:	90                   	nop

c00085f6 <VgaText::combineColours(unsigned char, unsigned char)>:
c00085f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085fa:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00085ff:	83 e0 0f             	and    eax,0xf
c0008602:	c1 e2 04             	shl    edx,0x4
c0008605:	09 d0                	or     eax,edx
c0008607:	c3                   	ret    

c0008608 <VgaText::scrollScreen()>:
c0008608:	55                   	push   ebp
c0008609:	57                   	push   edi
c000860a:	56                   	push   esi
c000860b:	be 01 00 00 00       	mov    esi,0x1
c0008610:	53                   	push   ebx
c0008611:	83 ec 0c             	sub    esp,0xc
c0008614:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008618:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000861b:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008621:	31 ff                	xor    edi,edi
c0008623:	01 e9                	add    ecx,ebp
c0008625:	8a 01                	mov    al,BYTE PTR [ecx]
c0008627:	83 fe 18             	cmp    esi,0x18
c000862a:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008630:	75 20                	jne    c0008652 <VgaText::scrollScreen()+0x4a>
c0008632:	f7 c7 01 00 00 00    	test   edi,0x1
c0008638:	74 15                	je     c000864f <VgaText::scrollScreen()+0x47>
c000863a:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000863e:	50                   	push   eax
c000863f:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008643:	50                   	push   eax
c0008644:	e8 ad ff ff ff       	call   c00085f6 <VgaText::combineColours(unsigned char, unsigned char)>
c0008649:	5a                   	pop    edx
c000864a:	5a                   	pop    edx
c000864b:	88 01                	mov    BYTE PTR [ecx],al
c000864d:	eb 03                	jmp    c0008652 <VgaText::scrollScreen()+0x4a>
c000864f:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0008652:	47                   	inc    edi
c0008653:	41                   	inc    ecx
c0008654:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000865a:	75 c9                	jne    c0008625 <VgaText::scrollScreen()+0x1d>
c000865c:	46                   	inc    esi
c000865d:	83 fe 19             	cmp    esi,0x19
c0008660:	75 b9                	jne    c000861b <VgaText::scrollScreen()+0x13>
c0008662:	39 1d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebx
c0008668:	75 1f                	jne    c0008689 <VgaText::scrollScreen()+0x81>
c000866a:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000866e:	74 05                	je     c0008675 <VgaText::scrollScreen()+0x6d>
c0008670:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008673:	eb 14                	jmp    c0008689 <VgaText::scrollScreen()+0x81>
c0008675:	50                   	push   eax
c0008676:	50                   	push   eax
c0008677:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000867b:	50                   	push   eax
c000867c:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008680:	50                   	push   eax
c0008681:	e8 22 fa 00 00       	call   c00180a8 <HalConsoleScroll(int, int)>
c0008686:	83 c4 10             	add    esp,0x10
c0008689:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000868d:	83 c4 0c             	add    esp,0xc
c0008690:	5b                   	pop    ebx
c0008691:	5e                   	pop    esi
c0008692:	5f                   	pop    edi
c0008693:	5d                   	pop    ebp
c0008694:	e9 79 fe ff ff       	jmp    c0008512 <VgaText::updateCursor()>
c0008699:	90                   	nop

c000869a <VgaText::combineCharAndColour(char, unsigned char)>:
c000869a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000869f:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00086a4:	c1 e0 08             	shl    eax,0x8
c00086a7:	09 d0                	or     eax,edx
c00086a9:	c3                   	ret    

c00086aa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086aa:	55                   	push   ebp
c00086ab:	57                   	push   edi
c00086ac:	56                   	push   esi
c00086ad:	53                   	push   ebx
c00086ae:	83 ec 1c             	sub    esp,0x1c
c00086b1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086b5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086b9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086bd:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086c5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086c9:	0f b6 c3             	movzx  eax,bl
c00086cc:	50                   	push   eax
c00086cd:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086d2:	50                   	push   eax
c00086d3:	e8 1e ff ff ff       	call   c00085f6 <VgaText::combineColours(unsigned char, unsigned char)>
c00086d8:	5a                   	pop    edx
c00086d9:	59                   	pop    ecx
c00086da:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086df:	0f b6 c0             	movzx  eax,al
c00086e2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086e6:	50                   	push   eax
c00086e7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086eb:	e8 aa ff ff ff       	call   c000869a <VgaText::combineCharAndColour(char, unsigned char)>
c00086f0:	5a                   	pop    edx
c00086f1:	6b d7 50             	imul   edx,edi,0x50
c00086f4:	59                   	pop    ecx
c00086f5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00086f8:	01 f2                	add    edx,esi
c00086fa:	0f b7 d2             	movzx  edx,dx
c00086fd:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008701:	39 2d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebp
c0008707:	75 28                	jne    c0008731 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008709:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c000870d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008711:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008715:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008719:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000871d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008721:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008725:	83 c4 1c             	add    esp,0x1c
c0008728:	5b                   	pop    ebx
c0008729:	5e                   	pop    esi
c000872a:	5f                   	pop    edi
c000872b:	5d                   	pop    ebp
c000872c:	e9 7f fa 00 00       	jmp    c00181b0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008731:	83 c4 1c             	add    esp,0x1c
c0008734:	5b                   	pop    ebx
c0008735:	5e                   	pop    esi
c0008736:	5f                   	pop    edi
c0008737:	5d                   	pop    ebp
c0008738:	c3                   	ret    
c0008739:	90                   	nop

c000873a <VgaText::getCursorX()>:
c000873a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000873e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008741:	c3                   	ret    

c0008742 <VgaText::getCursorY()>:
c0008742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008746:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008749:	c3                   	ret    

c000874a <VgaText::setCursor(int, int)>:
c000874a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000874e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008752:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008755:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008759:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000875c:	e9 b1 fd ff ff       	jmp    c0008512 <VgaText::updateCursor()>

c0008761 <setActiveTerminal(VgaText*)>:
c0008761:	53                   	push   ebx
c0008762:	83 ec 08             	sub    esp,0x8
c0008765:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008769:	85 db                	test   ebx,ebx
c000876b:	75 11                	jne    c000877e <setActiveTerminal(VgaText*)+0x1d>
c000876d:	c7 44 24 10 40 02 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020240
c0008775:	83 c4 08             	add    esp,0x8
c0008778:	5b                   	pop    ebx
c0008779:	e9 f3 83 00 00       	jmp    c0010b71 <KePanic(char const*)>
c000877e:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c0008783:	85 c0                	test   eax,eax
c0008785:	74 0c                	je     c0008793 <setActiveTerminal(VgaText*)+0x32>
c0008787:	83 ec 0c             	sub    esp,0xc
c000878a:	50                   	push   eax
c000878b:	e8 82 fd ff ff       	call   c0008512 <VgaText::updateCursor()>
c0008790:	83 c4 10             	add    esp,0x10
c0008793:	50                   	push   eax
c0008794:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008797:	89 1d 04 5f 02 c0    	mov    DWORD PTR ds:0xc0025f04,ebx
c000879d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00087a0:	53                   	push   ebx
c00087a1:	e8 a4 ff ff ff       	call   c000874a <VgaText::setCursor(int, int)>
c00087a6:	83 c4 18             	add    esp,0x18
c00087a9:	5b                   	pop    ebx
c00087aa:	c3                   	ret    
c00087ab:	90                   	nop

c00087ac <VgaText::clearScreen()>:
c00087ac:	57                   	push   edi
c00087ad:	56                   	push   esi
c00087ae:	31 f6                	xor    esi,esi
c00087b0:	53                   	push   ebx
c00087b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087b5:	52                   	push   edx
c00087b6:	6a 00                	push   0x0
c00087b8:	6a 00                	push   0x0
c00087ba:	53                   	push   ebx
c00087bb:	e8 8a ff ff ff       	call   c000874a <VgaText::setCursor(int, int)>
c00087c0:	83 c4 10             	add    esp,0x10
c00087c3:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087ca:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087cd:	7e 20                	jle    c00087ef <VgaText::clearScreen()+0x43>
c00087cf:	31 ff                	xor    edi,edi
c00087d1:	50                   	push   eax
c00087d2:	50                   	push   eax
c00087d3:	56                   	push   esi
c00087d4:	57                   	push   edi
c00087d5:	47                   	inc    edi
c00087d6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087d9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087dc:	6a 20                	push   0x20
c00087de:	53                   	push   ebx
c00087df:	e8 c6 fe ff ff       	call   c00086aa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087e4:	83 c4 20             	add    esp,0x20
c00087e7:	83 ff 50             	cmp    edi,0x50
c00087ea:	75 e5                	jne    c00087d1 <VgaText::clearScreen()+0x25>
c00087ec:	46                   	inc    esi
c00087ed:	eb db                	jmp    c00087ca <VgaText::clearScreen()+0x1e>
c00087ef:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00087f6:	5b                   	pop    ebx
c00087f7:	5e                   	pop    esi
c00087f8:	5f                   	pop    edi
c00087f9:	c3                   	ret    

c00087fa <VgaText::setCursorX(int)>:
c00087fa:	83 ec 10             	sub    esp,0x10
c00087fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008801:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008804:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008808:	50                   	push   eax
c0008809:	e8 3c ff ff ff       	call   c000874a <VgaText::setCursor(int, int)>
c000880e:	83 c4 1c             	add    esp,0x1c
c0008811:	c3                   	ret    

c0008812 <VgaText::setCursorY(int)>:
c0008812:	83 ec 10             	sub    esp,0x10
c0008815:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008819:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000881d:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008820:	50                   	push   eax
c0008821:	e8 24 ff ff ff       	call   c000874a <VgaText::setCursor(int, int)>
c0008826:	83 c4 1c             	add    esp,0x1c
c0008829:	c3                   	ret    

c000882a <VgaText::incrementCursor(bool)>:
c000882a:	56                   	push   esi
c000882b:	53                   	push   ebx
c000882c:	51                   	push   ecx
c000882d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008831:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008835:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008838:	40                   	inc    eax
c0008839:	83 f8 50             	cmp    eax,0x50
c000883c:	74 05                	je     c0008843 <VgaText::incrementCursor(bool)+0x19>
c000883e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008841:	eb 24                	jmp    c0008867 <VgaText::incrementCursor(bool)+0x3d>
c0008843:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000884a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000884d:	8d 50 01             	lea    edx,[eax+0x1]
c0008850:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008853:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008856:	75 0f                	jne    c0008867 <VgaText::incrementCursor(bool)+0x3d>
c0008858:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000885b:	83 ec 0c             	sub    esp,0xc
c000885e:	53                   	push   ebx
c000885f:	e8 a4 fd ff ff       	call   c0008608 <VgaText::scrollScreen()>
c0008864:	83 c4 10             	add    esp,0x10
c0008867:	89 f0                	mov    eax,esi
c0008869:	84 c0                	test   al,al
c000886b:	74 0c                	je     c0008879 <VgaText::incrementCursor(bool)+0x4f>
c000886d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008871:	5a                   	pop    edx
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	e9 99 fc ff ff       	jmp    c0008512 <VgaText::updateCursor()>
c0008879:	58                   	pop    eax
c000887a:	5b                   	pop    ebx
c000887b:	5e                   	pop    esi
c000887c:	c3                   	ret    
c000887d:	90                   	nop

c000887e <VgaText::decrementCursor(bool)>:
c000887e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008882:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008886:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008889:	85 c0                	test   eax,eax
c000888b:	74 04                	je     c0008891 <VgaText::decrementCursor(bool)+0x13>
c000888d:	48                   	dec    eax
c000888e:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008891:	84 c9                	test   cl,cl
c0008893:	74 09                	je     c000889e <VgaText::decrementCursor(bool)+0x20>
c0008895:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008899:	e9 74 fc ff ff       	jmp    c0008512 <VgaText::updateCursor()>
c000889e:	c3                   	ret    
c000889f:	90                   	nop

c00088a0 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00088a0:	53                   	push   ebx
c00088a1:	83 ec 08             	sub    esp,0x8
c00088a4:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088ad:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088b1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088b5:	83 f8 07             	cmp    eax,0x7
c00088b8:	75 21                	jne    c00088db <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088ba:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088c2:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088ca:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088d2:	83 c4 08             	add    esp,0x8
c00088d5:	5b                   	pop    ebx
c00088d6:	e9 cc 31 00 00       	jmp    c000baa7 <Krnl::beep(int, int, bool)>
c00088db:	83 f8 0d             	cmp    eax,0xd
c00088de:	75 09                	jne    c00088e9 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088e0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088e7:	eb 2d                	jmp    c0008916 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088e9:	83 f8 0a             	cmp    eax,0xa
c00088ec:	75 31                	jne    c000891f <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088ee:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088f8:	8d 50 01             	lea    edx,[eax+0x1]
c00088fb:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088fe:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008901:	75 0f                	jne    c0008912 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008903:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008906:	83 ec 0c             	sub    esp,0xc
c0008909:	53                   	push   ebx
c000890a:	e8 f9 fc ff ff       	call   c0008608 <VgaText::scrollScreen()>
c000890f:	83 c4 10             	add    esp,0x10
c0008912:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008916:	83 c4 08             	add    esp,0x8
c0008919:	5b                   	pop    ebx
c000891a:	e9 f3 fb ff ff       	jmp    c0008512 <VgaText::updateCursor()>
c000891f:	83 f8 08             	cmp    eax,0x8
c0008922:	75 25                	jne    c0008949 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0008924:	50                   	push   eax
c0008925:	50                   	push   eax
c0008926:	6a 01                	push   0x1
c0008928:	53                   	push   ebx
c0008929:	e8 50 ff ff ff       	call   c000887e <VgaText::decrementCursor(bool)>
c000892e:	5a                   	pop    edx
c000892f:	59                   	pop    ecx
c0008930:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008933:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008936:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008939:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000893c:	6a 20                	push   0x20
c000893e:	53                   	push   ebx
c000893f:	e8 66 fd ff ff       	call   c00086aa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008944:	83 c4 28             	add    esp,0x28
c0008947:	5b                   	pop    ebx
c0008948:	c3                   	ret    
c0008949:	83 ec 08             	sub    esp,0x8
c000894c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000894f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008952:	51                   	push   ecx
c0008953:	52                   	push   edx
c0008954:	50                   	push   eax
c0008955:	53                   	push   ebx
c0008956:	e8 4f fd ff ff       	call   c00086aa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000895b:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000895f:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008967:	83 c4 28             	add    esp,0x28
c000896a:	5b                   	pop    ebx
c000896b:	e9 ba fe ff ff       	jmp    c000882a <VgaText::incrementCursor(bool)>

c0008970 <VgaText::putchar(char)>:
c0008970:	57                   	push   edi
c0008971:	56                   	push   esi
c0008972:	53                   	push   ebx
c0008973:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008977:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000897b:	0f be c2             	movsx  eax,dl
c000897e:	83 f8 5b             	cmp    eax,0x5b
c0008981:	75 18                	jne    c000899b <VgaText::putchar(char)+0x2b>
c0008983:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008987:	74 20                	je     c00089a9 <VgaText::putchar(char)+0x39>
c0008989:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000898f:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008996:	e9 b8 00 00 00       	jmp    c0008a53 <VgaText::putchar(char)+0xe3>
c000899b:	83 f8 1b             	cmp    eax,0x1b
c000899e:	75 09                	jne    c00089a9 <VgaText::putchar(char)+0x39>
c00089a0:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089a4:	e9 aa 00 00 00       	jmp    c0008a53 <VgaText::putchar(char)+0xe3>
c00089a9:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00089ad:	89 f9                	mov    ecx,edi
c00089af:	84 c9                	test   cl,cl
c00089b1:	0f 84 8c 00 00 00    	je     c0008a43 <VgaText::putchar(char)+0xd3>
c00089b7:	8d 4a c0             	lea    ecx,[edx-0x40]
c00089ba:	80 f9 3e             	cmp    cl,0x3e
c00089bd:	77 70                	ja     c0008a2f <VgaText::putchar(char)+0xbf>
c00089bf:	83 f8 6d             	cmp    eax,0x6d
c00089c2:	75 3f                	jne    c0008a03 <VgaText::putchar(char)+0x93>
c00089c4:	31 f6                	xor    esi,esi
c00089c6:	31 d2                	xor    edx,edx
c00089c8:	31 c0                	xor    eax,eax
c00089ca:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089cd:	7e 25                	jle    c00089f4 <VgaText::putchar(char)+0x84>
c00089cf:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089d4:	83 fa 3b             	cmp    edx,0x3b
c00089d7:	75 0f                	jne    c00089e8 <VgaText::putchar(char)+0x78>
c00089d9:	50                   	push   eax
c00089da:	53                   	push   ebx
c00089db:	e8 48 fb ff ff       	call   c0008528 <VgaText::doANSI_SGR(int)>
c00089e0:	31 d2                	xor    edx,edx
c00089e2:	59                   	pop    ecx
c00089e3:	58                   	pop    eax
c00089e4:	31 c0                	xor    eax,eax
c00089e6:	eb 09                	jmp    c00089f1 <VgaText::putchar(char)+0x81>
c00089e8:	6b c0 0a             	imul   eax,eax,0xa
c00089eb:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089ef:	89 fa                	mov    edx,edi
c00089f1:	46                   	inc    esi
c00089f2:	eb d6                	jmp    c00089ca <VgaText::putchar(char)+0x5a>
c00089f4:	84 d2                	test   dl,dl
c00089f6:	74 2f                	je     c0008a27 <VgaText::putchar(char)+0xb7>
c00089f8:	50                   	push   eax
c00089f9:	53                   	push   ebx
c00089fa:	e8 29 fb ff ff       	call   c0008528 <VgaText::doANSI_SGR(int)>
c00089ff:	58                   	pop    eax
c0008a00:	5a                   	pop    edx
c0008a01:	eb 24                	jmp    c0008a27 <VgaText::putchar(char)+0xb7>
c0008a03:	83 f8 4a             	cmp    eax,0x4a
c0008a06:	75 1f                	jne    c0008a27 <VgaText::putchar(char)+0xb7>
c0008a08:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a0c:	75 19                	jne    c0008a27 <VgaText::putchar(char)+0xb7>
c0008a0e:	83 ec 0c             	sub    esp,0xc
c0008a11:	53                   	push   ebx
c0008a12:	e8 95 fd ff ff       	call   c00087ac <VgaText::clearScreen()>
c0008a17:	83 c4 0c             	add    esp,0xc
c0008a1a:	6a 00                	push   0x0
c0008a1c:	6a 00                	push   0x0
c0008a1e:	53                   	push   ebx
c0008a1f:	e8 26 fd ff ff       	call   c000874a <VgaText::setCursor(int, int)>
c0008a24:	83 c4 10             	add    esp,0x10
c0008a27:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a2d:	eb 24                	jmp    c0008a53 <VgaText::putchar(char)+0xe3>
c0008a2f:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a32:	83 f8 0e             	cmp    eax,0xe
c0008a35:	7f 1c                	jg     c0008a53 <VgaText::putchar(char)+0xe3>
c0008a37:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a3a:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a3d:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0008a41:	eb 10                	jmp    c0008a53 <VgaText::putchar(char)+0xe3>
c0008a43:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a46:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a49:	50                   	push   eax
c0008a4a:	53                   	push   ebx
c0008a4b:	e8 50 fe ff ff       	call   c00088a0 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a50:	83 c4 10             	add    esp,0x10
c0008a53:	5b                   	pop    ebx
c0008a54:	5e                   	pop    esi
c0008a55:	5f                   	pop    edi
c0008a56:	c3                   	ret    
c0008a57:	90                   	nop

c0008a58 <VgaText::putx(unsigned int)>:
c0008a58:	57                   	push   edi
c0008a59:	b9 11 00 00 00       	mov    ecx,0x11
c0008a5e:	56                   	push   esi
c0008a5f:	be 4e 02 02 c0       	mov    esi,0xc002024e
c0008a64:	53                   	push   ebx
c0008a65:	83 ec 20             	sub    esp,0x20
c0008a68:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a6c:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a70:	fc                   	cld    
c0008a71:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a73:	be 08 00 00 00       	mov    esi,0x8
c0008a78:	50                   	push   eax
c0008a79:	50                   	push   eax
c0008a7a:	89 d8                	mov    eax,ebx
c0008a7c:	c1 e8 1c             	shr    eax,0x1c
c0008a7f:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a84:	c1 e3 04             	shl    ebx,0x4
c0008a87:	50                   	push   eax
c0008a88:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a8c:	e8 df fe ff ff       	call   c0008970 <VgaText::putchar(char)>
c0008a91:	83 c4 10             	add    esp,0x10
c0008a94:	4e                   	dec    esi
c0008a95:	75 e1                	jne    c0008a78 <VgaText::putx(unsigned int)+0x20>
c0008a97:	83 c4 20             	add    esp,0x20
c0008a9a:	5b                   	pop    ebx
c0008a9b:	5e                   	pop    esi
c0008a9c:	5f                   	pop    edi
c0008a9d:	c3                   	ret    

c0008a9e <VgaText::puts(char const*)>:
c0008a9e:	53                   	push   ebx
c0008a9f:	83 ec 08             	sub    esp,0x8
c0008aa2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008aa6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008aa9:	85 c0                	test   eax,eax
c0008aab:	74 12                	je     c0008abf <VgaText::puts(char const*)+0x21>
c0008aad:	51                   	push   ecx
c0008aae:	43                   	inc    ebx
c0008aaf:	51                   	push   ecx
c0008ab0:	50                   	push   eax
c0008ab1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ab5:	e8 b6 fe ff ff       	call   c0008970 <VgaText::putchar(char)>
c0008aba:	83 c4 10             	add    esp,0x10
c0008abd:	eb e7                	jmp    c0008aa6 <VgaText::puts(char const*)+0x8>
c0008abf:	83 c4 08             	add    esp,0x8
c0008ac2:	5b                   	pop    ebx
c0008ac3:	c3                   	ret    

c0008ac4 <VgaText::write(unsigned long long, void*, int*)>:
c0008ac4:	55                   	push   ebp
c0008ac5:	57                   	push   edi
c0008ac6:	56                   	push   esi
c0008ac7:	53                   	push   ebx
c0008ac8:	83 ec 0c             	sub    esp,0xc
c0008acb:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008acf:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008ad3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008ad7:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008ade:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008ae1:	39 eb                	cmp    ebx,ebp
c0008ae3:	74 13                	je     c0008af8 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008ae5:	50                   	push   eax
c0008ae6:	43                   	inc    ebx
c0008ae7:	50                   	push   eax
c0008ae8:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008aec:	50                   	push   eax
c0008aed:	56                   	push   esi
c0008aee:	e8 7d fe ff ff       	call   c0008970 <VgaText::putchar(char)>
c0008af3:	83 c4 10             	add    esp,0x10
c0008af6:	eb e9                	jmp    c0008ae1 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008af8:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008aff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b03:	89 38                	mov    DWORD PTR [eax],edi
c0008b05:	83 c4 0c             	add    esp,0xc
c0008b08:	31 c0                	xor    eax,eax
c0008b0a:	5b                   	pop    ebx
c0008b0b:	5e                   	pop    esi
c0008b0c:	5f                   	pop    edi
c0008b0d:	5d                   	pop    ebp
c0008b0e:	c3                   	ret    
c0008b0f:	90                   	nop

c0008b10 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b10:	55                   	push   ebp
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	53                   	push   ebx
c0008b14:	83 ec 0c             	sub    esp,0xc
c0008b17:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0008b1b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b20:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c0008b27:	50                   	push   eax
c0008b28:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b2d:	50                   	push   eax
c0008b2e:	e8 c3 fa ff ff       	call   c00085f6 <VgaText::combineColours(unsigned char, unsigned char)>
c0008b33:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008b37:	5a                   	pop    edx
c0008b38:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008b3b:	59                   	pop    ecx
c0008b3c:	0f b6 f8             	movzx  edi,al
c0008b3f:	0f b7 db             	movzx  ebx,bx
c0008b42:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b46:	01 db                	add    ebx,ebx
c0008b48:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008b4b:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008b4e:	85 c0                	test   eax,eax
c0008b50:	0f 84 ef 00 00 00    	je     c0008c45 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b56:	83 f8 0d             	cmp    eax,0xd
c0008b59:	75 0c                	jne    c0008b67 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b5b:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b62:	e9 d8 00 00 00       	jmp    c0008c3f <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b67:	83 f8 0a             	cmp    eax,0xa
c0008b6a:	75 44                	jne    c0008bb0 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b6c:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b73:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0008b76:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b79:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c0008b7c:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0008b7f:	75 0f                	jne    c0008b90 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b81:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0008b84:	83 ec 0c             	sub    esp,0xc
c0008b87:	55                   	push   ebp
c0008b88:	e8 7b fa ff ff       	call   c0008608 <VgaText::scrollScreen()>
c0008b8d:	83 c4 10             	add    esp,0x10
c0008b90:	83 ec 0c             	sub    esp,0xc
c0008b93:	55                   	push   ebp
c0008b94:	e8 79 f9 ff ff       	call   c0008512 <VgaText::updateCursor()>
c0008b99:	83 c4 10             	add    esp,0x10
c0008b9c:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008ba0:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008ba3:	0f b7 db             	movzx  ebx,bx
c0008ba6:	01 db                	add    ebx,ebx
c0008ba8:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bab:	e9 8f 00 00 00       	jmp    c0008c3f <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bb0:	83 f8 08             	cmp    eax,0x8
c0008bb3:	75 34                	jne    c0008be9 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bb5:	51                   	push   ecx
c0008bb6:	51                   	push   ecx
c0008bb7:	6a 01                	push   0x1
c0008bb9:	55                   	push   ebp
c0008bba:	e8 bf fc ff ff       	call   c000887e <VgaText::decrementCursor(bool)>
c0008bbf:	5b                   	pop    ebx
c0008bc0:	58                   	pop    eax
c0008bc1:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008bc4:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008bc7:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0008bca:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c0008bcd:	6a 20                	push   0x20
c0008bcf:	55                   	push   ebp
c0008bd0:	e8 d5 fa ff ff       	call   c00086aa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bd5:	83 c4 20             	add    esp,0x20
c0008bd8:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bdc:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bdf:	0f b7 db             	movzx  ebx,bx
c0008be2:	01 db                	add    ebx,ebx
c0008be4:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008be7:	eb 56                	jmp    c0008c3f <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008be9:	52                   	push   edx
c0008bea:	52                   	push   edx
c0008beb:	57                   	push   edi
c0008bec:	50                   	push   eax
c0008bed:	e8 a8 fa ff ff       	call   c000869a <VgaText::combineCharAndColour(char, unsigned char)>
c0008bf2:	83 c4 10             	add    esp,0x10
c0008bf5:	66 89 03             	mov    WORD PTR [ebx],ax
c0008bf8:	39 2d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebp
c0008bfe:	75 1d                	jne    c0008c1d <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c00:	83 ec 0c             	sub    esp,0xc
c0008c03:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008c06:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008c09:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c0d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c11:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008c14:	50                   	push   eax
c0008c15:	e8 96 f5 00 00       	call   c00181b0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c1a:	83 c4 20             	add    esp,0x20
c0008c1d:	50                   	push   eax
c0008c1e:	83 c3 02             	add    ebx,0x2
c0008c21:	50                   	push   eax
c0008c22:	6a 00                	push   0x0
c0008c24:	55                   	push   ebp
c0008c25:	e8 00 fc ff ff       	call   c000882a <VgaText::incrementCursor(bool)>
c0008c2a:	83 c4 10             	add    esp,0x10
c0008c2d:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c0008c31:	75 0c                	jne    c0008c3f <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c33:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008c37:	0f b7 db             	movzx  ebx,bx
c0008c3a:	01 db                	add    ebx,ebx
c0008c3c:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008c3f:	46                   	inc    esi
c0008c40:	e9 06 ff ff ff       	jmp    c0008b4b <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c45:	83 ec 0c             	sub    esp,0xc
c0008c48:	55                   	push   ebp
c0008c49:	e8 c4 f8 ff ff       	call   c0008512 <VgaText::updateCursor()>
c0008c4e:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c0008c55:	83 c4 1c             	add    esp,0x1c
c0008c58:	5b                   	pop    ebx
c0008c59:	5e                   	pop    esi
c0008c5a:	5f                   	pop    edi
c0008c5b:	5d                   	pop    ebp
c0008c5c:	c3                   	ret    
c0008c5d:	90                   	nop

c0008c5e <VgaText::VgaText(char const*)>:
c0008c5e:	56                   	push   esi
c0008c5f:	53                   	push   ebx
c0008c60:	83 ec 04             	sub    esp,0x4
c0008c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c67:	83 ec 08             	sub    esp,0x8
c0008c6a:	6a 00                	push   0x0
c0008c6c:	50                   	push   eax
c0008c6d:	e8 28 05 00 00       	call   c000919a <UnixFile::UnixFile(int)>
c0008c72:	83 c4 10             	add    esp,0x10
c0008c75:	ba 74 02 02 c0       	mov    edx,0xc0020274
c0008c7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7e:	89 10                	mov    DWORD PTR [eax],edx
c0008c80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c84:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8f:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9a:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca2:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caa:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb5:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc0:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ccb:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd6:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008cdd:	83 ec 0c             	sub    esp,0xc
c0008ce0:	6a 01                	push   0x1
c0008ce2:	e8 02 09 00 00       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c0008ce7:	83 c4 10             	add    esp,0x10
c0008cea:	89 c2                	mov    edx,eax
c0008cec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf0:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008cf3:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c0008cf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cfd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d00:	89 c6                	mov    esi,eax
c0008d02:	e8 ce f0 ff ff       	call   c0007dd5 <Phys::allocatePage()>
c0008d07:	68 05 0c 00 00       	push   0xc05
c0008d0c:	56                   	push   esi
c0008d0d:	50                   	push   eax
c0008d0e:	53                   	push   ebx
c0008d0f:	e8 de 0f 00 00       	call   c0009cf2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d14:	83 c4 10             	add    esp,0x10
c0008d17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d1b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d1e:	83 ec 04             	sub    esp,0x4
c0008d21:	68 a0 0f 00 00       	push   0xfa0
c0008d26:	6a 00                	push   0x0
c0008d28:	50                   	push   eax
c0008d29:	e8 c2 77 ff ff       	call   c00004f0 <memset>
c0008d2e:	83 c4 10             	add    esp,0x10
c0008d31:	83 ec 04             	sub    esp,0x4
c0008d34:	6a 00                	push   0x0
c0008d36:	6a 07                	push   0x7
c0008d38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d3c:	e8 7b f8 ff ff       	call   c00085bc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d41:	83 c4 10             	add    esp,0x10
c0008d44:	83 ec 04             	sub    esp,0x4
c0008d47:	6a 00                	push   0x0
c0008d49:	6a 00                	push   0x0
c0008d4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d4f:	e8 f6 f9 ff ff       	call   c000874a <VgaText::setCursor(int, int)>
c0008d54:	83 c4 10             	add    esp,0x10
c0008d57:	83 ec 0c             	sub    esp,0xc
c0008d5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d5e:	e8 49 fa ff ff       	call   c00087ac <VgaText::clearScreen()>
c0008d63:	83 c4 10             	add    esp,0x10
c0008d66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d6a:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d72:	05 82 00 00 00       	add    eax,0x82
c0008d77:	83 ec 04             	sub    esp,0x4
c0008d7a:	68 80 00 00 00       	push   0x80
c0008d7f:	6a 00                	push   0x0
c0008d81:	50                   	push   eax
c0008d82:	e8 69 77 ff ff       	call   c00004f0 <memset>
c0008d87:	83 c4 10             	add    esp,0x10
c0008d8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d8e:	05 02 01 00 00       	add    eax,0x102
c0008d93:	83 ec 04             	sub    esp,0x4
c0008d96:	68 80 00 00 00       	push   0x80
c0008d9b:	6a 00                	push   0x0
c0008d9d:	50                   	push   eax
c0008d9e:	e8 4d 77 ff ff       	call   c00004f0 <memset>
c0008da3:	83 c4 10             	add    esp,0x10
c0008da6:	90                   	nop
c0008da7:	83 c4 04             	add    esp,0x4
c0008daa:	5b                   	pop    ebx
c0008dab:	5e                   	pop    esi
c0008dac:	c3                   	ret    
c0008dad:	90                   	nop

c0008dae <VgaText::receiveKey(unsigned char)>:
c0008dae:	55                   	push   ebp
c0008daf:	57                   	push   edi
c0008db0:	56                   	push   esi
c0008db1:	53                   	push   ebx
c0008db2:	83 ec 2c             	sub    esp,0x2c
c0008db5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008db9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dbd:	89 fd                	mov    ebp,edi
c0008dbf:	81 e5 ff 00 00 00    	and    ebp,0xff
c0008dc5:	0f 84 48 01 00 00    	je     c0008f13 <VgaText::receiveKey(unsigned char)+0x165>
c0008dcb:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008dd1:	83 fd 08             	cmp    ebp,0x8
c0008dd4:	75 6a                	jne    c0008e40 <VgaText::receiveKey(unsigned char)+0x92>
c0008dd6:	83 ec 0c             	sub    esp,0xc
c0008dd9:	56                   	push   esi
c0008dda:	e8 a1 77 ff ff       	call   c0000580 <strlen>
c0008ddf:	83 c4 10             	add    esp,0x10
c0008de2:	85 c0                	test   eax,eax
c0008de4:	0f 84 ef 00 00 00    	je     c0008ed9 <VgaText::receiveKey(unsigned char)+0x12b>
c0008dea:	50                   	push   eax
c0008deb:	50                   	push   eax
c0008dec:	6a 08                	push   0x8
c0008dee:	53                   	push   ebx
c0008def:	e8 7c fb ff ff       	call   c0008970 <VgaText::putchar(char)>
c0008df4:	89 34 24             	mov    DWORD PTR [esp],esi
c0008df7:	e8 84 77 ff ff       	call   c0000580 <strlen>
c0008dfc:	83 c4 10             	add    esp,0x10
c0008dff:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e07:	83 fa 1f             	cmp    edx,0x1f
c0008e0a:	89 d0                	mov    eax,edx
c0008e0c:	7f 1c                	jg     c0008e2a <VgaText::receiveKey(unsigned char)+0x7c>
c0008e0e:	83 e8 08             	sub    eax,0x8
c0008e11:	3c 02                	cmp    al,0x2
c0008e13:	76 15                	jbe    c0008e2a <VgaText::receiveKey(unsigned char)+0x7c>
c0008e15:	83 fa 0d             	cmp    edx,0xd
c0008e18:	74 10                	je     c0008e2a <VgaText::receiveKey(unsigned char)+0x7c>
c0008e1a:	57                   	push   edi
c0008e1b:	57                   	push   edi
c0008e1c:	68 5f 02 02 c0       	push   0xc002025f
c0008e21:	53                   	push   ebx
c0008e22:	e8 77 fc ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c0008e27:	83 c4 10             	add    esp,0x10
c0008e2a:	83 ec 0c             	sub    esp,0xc
c0008e2d:	56                   	push   esi
c0008e2e:	e8 4d 77 ff ff       	call   c0000580 <strlen>
c0008e33:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e3b:	e9 96 00 00 00       	jmp    c0008ed6 <VgaText::receiveKey(unsigned char)+0x128>
c0008e40:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e46:	83 ec 0c             	sub    esp,0xc
c0008e49:	50                   	push   eax
c0008e4a:	e8 31 77 ff ff       	call   c0000580 <strlen>
c0008e4f:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e52:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e56:	e8 25 77 ff ff       	call   c0000580 <strlen>
c0008e5b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e5f:	83 c4 10             	add    esp,0x10
c0008e62:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e66:	3d 80 00 00 00       	cmp    eax,0x80
c0008e6b:	0f 87 a2 00 00 00    	ja     c0008f13 <VgaText::receiveKey(unsigned char)+0x165>
c0008e71:	8d 47 ff             	lea    eax,[edi-0x1]
c0008e74:	3c 1e                	cmp    al,0x1e
c0008e76:	77 35                	ja     c0008ead <VgaText::receiveKey(unsigned char)+0xff>
c0008e78:	8d 47 f7             	lea    eax,[edi-0x9]
c0008e7b:	3c 01                	cmp    al,0x1
c0008e7d:	76 2e                	jbe    c0008ead <VgaText::receiveKey(unsigned char)+0xff>
c0008e7f:	83 fd 0d             	cmp    ebp,0xd
c0008e82:	74 29                	je     c0008ead <VgaText::receiveKey(unsigned char)+0xff>
c0008e84:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e87:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e8a:	68 65 02 02 c0       	push   0xc0020265
c0008e8f:	53                   	push   ebx
c0008e90:	e8 7b fc ff ff       	call   c0008b10 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008e95:	8d 47 40             	lea    eax,[edi+0x40]
c0008e98:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e9b:	0f b6 c0             	movzx  eax,al
c0008e9e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ea1:	50                   	push   eax
c0008ea2:	53                   	push   ebx
c0008ea3:	e8 f8 f9 ff ff       	call   c00088a0 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ea8:	83 c4 20             	add    esp,0x20
c0008eab:	eb 11                	jmp    c0008ebe <VgaText::receiveKey(unsigned char)+0x110>
c0008ead:	51                   	push   ecx
c0008eae:	89 f8                	mov    eax,edi
c0008eb0:	51                   	push   ecx
c0008eb1:	0f be c0             	movsx  eax,al
c0008eb4:	50                   	push   eax
c0008eb5:	53                   	push   ebx
c0008eb6:	e8 b5 fa ff ff       	call   c0008970 <VgaText::putchar(char)>
c0008ebb:	83 c4 10             	add    esp,0x10
c0008ebe:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ec3:	89 f8                	mov    eax,edi
c0008ec5:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ec9:	52                   	push   edx
c0008eca:	52                   	push   edx
c0008ecb:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008ecf:	50                   	push   eax
c0008ed0:	56                   	push   esi
c0008ed1:	e8 9a 79 ff ff       	call   c0000870 <strcat>
c0008ed6:	83 c4 10             	add    esp,0x10
c0008ed9:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008ee0:	75 0f                	jne    c0008ef1 <VgaText::receiveKey(unsigned char)+0x143>
c0008ee2:	83 fd 1c             	cmp    ebp,0x1c
c0008ee5:	77 2c                	ja     c0008f13 <VgaText::receiveKey(unsigned char)+0x165>
c0008ee7:	b8 08 04 00 10       	mov    eax,0x10000408
c0008eec:	0f a3 e8             	bt     eax,ebp
c0008eef:	73 22                	jae    c0008f13 <VgaText::receiveKey(unsigned char)+0x165>
c0008ef1:	50                   	push   eax
c0008ef2:	81 c3 02 01 00 00    	add    ebx,0x102
c0008ef8:	50                   	push   eax
c0008ef9:	56                   	push   esi
c0008efa:	53                   	push   ebx
c0008efb:	e8 70 79 ff ff       	call   c0000870 <strcat>
c0008f00:	83 c4 0c             	add    esp,0xc
c0008f03:	68 80 00 00 00       	push   0x80
c0008f08:	6a 00                	push   0x0
c0008f0a:	56                   	push   esi
c0008f0b:	e8 e0 75 ff ff       	call   c00004f0 <memset>
c0008f10:	83 c4 10             	add    esp,0x10
c0008f13:	83 c4 2c             	add    esp,0x2c
c0008f16:	5b                   	pop    ebx
c0008f17:	5e                   	pop    esi
c0008f18:	5f                   	pop    edi
c0008f19:	5d                   	pop    ebp
c0008f1a:	c3                   	ret    
c0008f1b:	90                   	nop

c0008f1c <VgaText::doUpdate()>:
c0008f1c:	c3                   	ret    
c0008f1d:	66 90                	xchg   ax,ax
c0008f1f:	90                   	nop

c0008f20 <TSS::TSS()>:
c0008f20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f24:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f2b:	90                   	nop
c0008f2c:	c3                   	ret    
c0008f2d:	90                   	nop
c0008f2e:	66 90                	xchg   ax,ax

c0008f30 <TSS::setESP(unsigned long)>:
c0008f30:	55                   	push   ebp
c0008f31:	89 e5                	mov    ebp,esp
c0008f33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f39:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f3c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f3f:	90                   	nop
c0008f40:	5d                   	pop    ebp
c0008f41:	c3                   	ret    
c0008f42:	66 90                	xchg   ax,ax

c0008f44 <TSS::flush()>:
c0008f44:	55                   	push   ebp
c0008f45:	89 e5                	mov    ebp,esp
c0008f47:	83 ec 10             	sub    esp,0x10
c0008f4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f4f:	83 c8 03             	or     eax,0x3
c0008f52:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f56:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f5a:	66 89 d0             	mov    ax,dx
c0008f5d:	0f 00 d8             	ltr    ax
c0008f60:	90                   	nop
c0008f61:	c9                   	leave  
c0008f62:	c3                   	ret    
c0008f63:	90                   	nop

c0008f64 <TSS::setup(unsigned long, unsigned long)>:
c0008f64:	55                   	push   ebp
c0008f65:	89 e5                	mov    ebp,esp
c0008f67:	83 ec 18             	sub    esp,0x18
c0008f6a:	83 ec 0c             	sub    esp,0xc
c0008f6d:	6a 68                	push   0x68
c0008f6f:	e8 57 eb ff ff       	call   c0007acb <malloc>
c0008f74:	83 c4 10             	add    esp,0x10
c0008f77:	89 c2                	mov    edx,eax
c0008f79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f7c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f82:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f85:	83 ec 04             	sub    esp,0x4
c0008f88:	6a 68                	push   0x68
c0008f8a:	6a 00                	push   0x0
c0008f8c:	50                   	push   eax
c0008f8d:	e8 5e 75 ff ff       	call   c00004f0 <memset>
c0008f92:	83 c4 10             	add    esp,0x10
c0008f95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f98:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f9b:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa7:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fb3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fb6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000900a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009016:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0009026:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009029:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902c:	0f 20 da             	mov    edx,cr3
c000902f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009032:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009035:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009038:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000903b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000903e:	83 ec 08             	sub    esp,0x8
c0009041:	50                   	push   eax
c0009042:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009045:	50                   	push   eax
c0009046:	e8 ef e2 ff ff       	call   c000733a <GDTEntry::setBase(unsigned int)>
c000904b:	83 c4 10             	add    esp,0x10
c000904e:	83 ec 08             	sub    esp,0x8
c0009051:	6a 68                	push   0x68
c0009053:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009056:	50                   	push   eax
c0009057:	e8 fa e2 ff ff       	call   c0007356 <GDTEntry::setLimit(unsigned int)>
c000905c:	83 c4 10             	add    esp,0x10
c000905f:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0009063:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009066:	83 e0 0f             	and    eax,0xf
c0009069:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000906c:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000906f:	83 c8 40             	or     eax,0x40
c0009072:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009075:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000907a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009080:	05 78 01 00 00       	add    eax,0x178
c0009085:	83 ec 04             	sub    esp,0x4
c0009088:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000908b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000908e:	50                   	push   eax
c000908f:	e8 f6 e2 ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c0009094:	83 c4 10             	add    esp,0x10
c0009097:	89 c2                	mov    edx,eax
c0009099:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000909c:	89 10                	mov    DWORD PTR [eax],edx
c000909e:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00090a3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090a9:	05 78 01 00 00       	add    eax,0x178
c00090ae:	83 ec 0c             	sub    esp,0xc
c00090b1:	50                   	push   eax
c00090b2:	e8 fd e2 ff ff       	call   c00073b4 <GDT::flush()>
c00090b7:	83 c4 10             	add    esp,0x10
c00090ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00090bf:	c9                   	leave  
c00090c0:	c3                   	ret    
c00090c1:	90                   	nop

c00090c2 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090cd:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090d2:	75 08                	jne    c00090dc <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090d4:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090da:	eb 38                	jmp    c0009114 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00090dc:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00090e1:	75 17                	jne    c00090fa <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00090e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00090e8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00090eb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00090f1:	8b 10                	mov    edx,DWORD PTR [eax]
c00090f3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00090f7:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00090fa:	89 c1                	mov    ecx,eax
c00090fc:	83 e1 fd             	and    ecx,0xfffffffd
c00090ff:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009105:	74 cd                	je     c00090d4 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009107:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000910c:	83 e0 ef             	and    eax,0xffffffef
c000910f:	83 f8 08             	cmp    eax,0x8
c0009112:	76 c0                	jbe    c00090d4 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009114:	31 c0                	xor    eax,eax
c0009116:	c3                   	ret    
c0009117:	90                   	nop

c0009118 <ReservedFilename::isAtty()>:
c0009118:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000911c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000911f:	31 c0                	xor    eax,eax
c0009121:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0009127:	74 09                	je     c0009132 <ReservedFilename::isAtty()+0x1a>
c0009129:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000912f:	0f 94 c0             	sete   al
c0009132:	c3                   	ret    
c0009133:	90                   	nop

c0009134 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009134:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009138:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000913c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009140:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009143:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009148:	75 08                	jne    c0009152 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000914a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009150:	eb 3d                	jmp    c000918f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009152:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009157:	75 17                	jne    c0009170 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009159:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000915e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009161:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009167:	8b 10                	mov    edx,DWORD PTR [eax]
c0009169:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000916d:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0009170:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009175:	75 04                	jne    c000917b <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0009177:	89 0a                	mov    DWORD PTR [edx],ecx
c0009179:	eb 14                	jmp    c000918f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000917b:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0009180:	74 c8                	je     c000914a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0009182:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009187:	83 e0 ef             	and    eax,0xffffffef
c000918a:	83 f8 08             	cmp    eax,0x8
c000918d:	76 bb                	jbe    c000914a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000918f:	31 c0                	xor    eax,eax
c0009191:	c3                   	ret    

c0009192 <UnixFile::getFileDescriptor()>:
c0009192:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009196:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009199:	c3                   	ret    

c000919a <UnixFile::UnixFile(int)>:
c000919a:	53                   	push   ebx
c000919b:	83 ec 28             	sub    esp,0x28
c000919e:	ba 3c 03 02 c0       	mov    edx,0xc002033c
c00091a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091a7:	89 10                	mov    DWORD PTR [eax],edx
c00091a9:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091b1:	0f 8f 90 01 00 00    	jg     c0009347 <UnixFile::UnixFile(int)+0x1ad>
c00091b7:	a1 60 28 02 c0       	mov    eax,ds:0xc0022860
c00091bc:	8d 50 01             	lea    edx,[eax+0x1]
c00091bf:	89 15 60 28 02 c0    	mov    DWORD PTR ds:0xc0022860,edx
c00091c5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091c9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091cc:	83 ec 08             	sub    esp,0x8
c00091cf:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091d3:	68 98 5f 02 c0       	push   0xc0025f98
c00091d8:	e8 3b 5c 01 00       	call   c001ee18 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00091dd:	83 c4 10             	add    esp,0x10
c00091e0:	a0 94 5f 02 c0       	mov    al,ds:0xc0025f94
c00091e5:	83 f0 01             	xor    eax,0x1
c00091e8:	0f b6 c0             	movzx  eax,al
c00091eb:	85 c0                	test   eax,eax
c00091ed:	0f 84 55 01 00 00    	je     c0009348 <UnixFile::UnixFile(int)+0x1ae>
c00091f3:	c6 05 94 5f 02 c0 01 	mov    BYTE PTR ds:0xc0025f94,0x1
c00091fa:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0009202:	83 ec 0c             	sub    esp,0xc
c0009205:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009209:	e8 bd e8 ff ff       	call   c0007acb <malloc>
c000920e:	83 c4 10             	add    esp,0x10
c0009211:	89 c3                	mov    ebx,eax
c0009213:	83 ec 08             	sub    esp,0x8
c0009216:	68 03 ff ff 0f       	push   0xfffff03
c000921b:	53                   	push   ebx
c000921c:	e8 2d 01 00 00       	call   c000934e <ReservedFilename::ReservedFilename(int)>
c0009221:	83 c4 10             	add    esp,0x10
c0009224:	89 1d 8c 5f 02 c0    	mov    DWORD PTR ds:0xc0025f8c,ebx
c000922a:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0009232:	83 ec 0c             	sub    esp,0xc
c0009235:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009239:	e8 8d e8 ff ff       	call   c0007acb <malloc>
c000923e:	83 c4 10             	add    esp,0x10
c0009241:	89 c3                	mov    ebx,eax
c0009243:	83 ec 08             	sub    esp,0x8
c0009246:	68 01 ff ff 0f       	push   0xfffff01
c000924b:	53                   	push   ebx
c000924c:	e8 fd 00 00 00       	call   c000934e <ReservedFilename::ReservedFilename(int)>
c0009251:	83 c4 10             	add    esp,0x10
c0009254:	89 1d 90 5f 02 c0    	mov    DWORD PTR ds:0xc0025f90,ebx
c000925a:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0009262:	83 ec 0c             	sub    esp,0xc
c0009265:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009269:	e8 5d e8 ff ff       	call   c0007acb <malloc>
c000926e:	83 c4 10             	add    esp,0x10
c0009271:	89 c3                	mov    ebx,eax
c0009273:	83 ec 08             	sub    esp,0x8
c0009276:	68 00 ff ff 0f       	push   0xfffff00
c000927b:	53                   	push   ebx
c000927c:	e8 cd 00 00 00       	call   c000934e <ReservedFilename::ReservedFilename(int)>
c0009281:	83 c4 10             	add    esp,0x10
c0009284:	89 1d 84 5f 02 c0    	mov    DWORD PTR ds:0xc0025f84,ebx
c000928a:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0009292:	83 ec 0c             	sub    esp,0xc
c0009295:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009299:	e8 2d e8 ff ff       	call   c0007acb <malloc>
c000929e:	83 c4 10             	add    esp,0x10
c00092a1:	89 c3                	mov    ebx,eax
c00092a3:	83 ec 08             	sub    esp,0x8
c00092a6:	68 02 ff ff 0f       	push   0xfffff02
c00092ab:	53                   	push   ebx
c00092ac:	e8 9d 00 00 00       	call   c000934e <ReservedFilename::ReservedFilename(int)>
c00092b1:	83 c4 10             	add    esp,0x10
c00092b4:	89 1d 88 5f 02 c0    	mov    DWORD PTR ds:0xc0025f88,ebx
c00092ba:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092c2:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092c7:	7f 7f                	jg     c0009348 <UnixFile::UnixFile(int)+0x1ae>
c00092c9:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092d1:	83 ec 0c             	sub    esp,0xc
c00092d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092d8:	e8 ee e7 ff ff       	call   c0007acb <malloc>
c00092dd:	83 c4 10             	add    esp,0x10
c00092e0:	89 c3                	mov    ebx,eax
c00092e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092e6:	05 10 ff ff 0f       	add    eax,0xfffff10
c00092eb:	83 ec 08             	sub    esp,0x8
c00092ee:	50                   	push   eax
c00092ef:	53                   	push   ebx
c00092f0:	e8 59 00 00 00       	call   c000934e <ReservedFilename::ReservedFilename(int)>
c00092f5:	83 c4 10             	add    esp,0x10
c00092f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092fc:	89 1c 85 60 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0a0],ebx
c0009303:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000930b:	83 ec 0c             	sub    esp,0xc
c000930e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009312:	e8 b4 e7 ff ff       	call   c0007acb <malloc>
c0009317:	83 c4 10             	add    esp,0x10
c000931a:	89 c3                	mov    ebx,eax
c000931c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009320:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009325:	83 ec 08             	sub    esp,0x8
c0009328:	50                   	push   eax
c0009329:	53                   	push   ebx
c000932a:	e8 1f 00 00 00       	call   c000934e <ReservedFilename::ReservedFilename(int)>
c000932f:	83 c4 10             	add    esp,0x10
c0009332:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009336:	89 1c 85 20 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0e0],ebx
c000933d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009342:	e9 7b ff ff ff       	jmp    c00092c2 <UnixFile::UnixFile(int)+0x128>
c0009347:	90                   	nop
c0009348:	83 c4 28             	add    esp,0x28
c000934b:	5b                   	pop    ebx
c000934c:	c3                   	ret    
c000934d:	90                   	nop

c000934e <ReservedFilename::ReservedFilename(int)>:
c000934e:	83 ec 0c             	sub    esp,0xc
c0009351:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009355:	83 ec 08             	sub    esp,0x8
c0009358:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000935c:	50                   	push   eax
c000935d:	e8 38 fe ff ff       	call   c000919a <UnixFile::UnixFile(int)>
c0009362:	83 c4 10             	add    esp,0x10
c0009365:	ba 58 03 02 c0       	mov    edx,0xc0020358
c000936a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000936e:	89 10                	mov    DWORD PTR [eax],edx
c0009370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009374:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009378:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000937b:	90                   	nop
c000937c:	83 c4 0c             	add    esp,0xc
c000937f:	c3                   	ret    

c0009380 <UnixFile::~UnixFile()>:
c0009380:	83 ec 1c             	sub    esp,0x1c
c0009383:	ba 3c 03 02 c0       	mov    edx,0xc002033c
c0009388:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000938c:	89 10                	mov    DWORD PTR [eax],edx
c000938e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009392:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009395:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000939a:	7f 76                	jg     c0009412 <UnixFile::~UnixFile()+0x92>
c000939c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093a4:	83 ec 0c             	sub    esp,0xc
c00093a7:	68 98 5f 02 c0       	push   0xc0025f98
c00093ac:	e8 3b 5b 01 00       	call   c001eeec <LinkedList<UnixFile>::getFirstElement()>
c00093b1:	83 c4 10             	add    esp,0x10
c00093b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093b8:	83 ec 0c             	sub    esp,0xc
c00093bb:	68 98 5f 02 c0       	push   0xc0025f98
c00093c0:	e8 2f 5b 01 00       	call   c001eef4 <LinkedList<UnixFile>::removeFirst()>
c00093c5:	83 c4 10             	add    esp,0x10
c00093c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093cc:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093d0:	74 43                	je     c0009415 <UnixFile::~UnixFile()+0x95>
c00093d2:	83 ec 08             	sub    esp,0x8
c00093d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093d9:	68 98 5f 02 c0       	push   0xc0025f98
c00093de:	e8 35 5a 01 00       	call   c001ee18 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00093e3:	83 c4 10             	add    esp,0x10
c00093e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00093ea:	8d 50 01             	lea    edx,[eax+0x1]
c00093ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00093f1:	3d 20 a1 07 00       	cmp    eax,0x7a120
c00093f6:	0f 94 c0             	sete   al
c00093f9:	0f b6 c0             	movzx  eax,al
c00093fc:	85 c0                	test   eax,eax
c00093fe:	74 a4                	je     c00093a4 <UnixFile::~UnixFile()+0x24>
c0009400:	83 ec 0c             	sub    esp,0xc
c0009403:	68 14 03 02 c0       	push   0xc0020314
c0009408:	e8 64 77 00 00       	call   c0010b71 <KePanic(char const*)>
c000940d:	83 c4 10             	add    esp,0x10
c0009410:	eb 92                	jmp    c00093a4 <UnixFile::~UnixFile()+0x24>
c0009412:	90                   	nop
c0009413:	eb 01                	jmp    c0009416 <UnixFile::~UnixFile()+0x96>
c0009415:	90                   	nop
c0009416:	90                   	nop
c0009417:	83 c4 1c             	add    esp,0x1c
c000941a:	c3                   	ret    
c000941b:	90                   	nop

c000941c <UnixFile::~UnixFile()>:
c000941c:	83 ec 0c             	sub    esp,0xc
c000941f:	83 ec 0c             	sub    esp,0xc
c0009422:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009426:	e8 55 ff ff ff       	call   c0009380 <UnixFile::~UnixFile()>
c000942b:	83 c4 10             	add    esp,0x10
c000942e:	83 ec 08             	sub    esp,0x8
c0009431:	6a 0c                	push   0xc
c0009433:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009437:	e8 c4 13 00 00       	call   c000a800 <operator delete(void*, unsigned long)>
c000943c:	83 c4 10             	add    esp,0x10
c000943f:	83 c4 0c             	add    esp,0xc
c0009442:	c3                   	ret    
c0009443:	90                   	nop

c0009444 <ReservedFilename::~ReservedFilename()>:
c0009444:	83 ec 0c             	sub    esp,0xc
c0009447:	ba 58 03 02 c0       	mov    edx,0xc0020358
c000944c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009450:	89 10                	mov    DWORD PTR [eax],edx
c0009452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009456:	83 ec 0c             	sub    esp,0xc
c0009459:	50                   	push   eax
c000945a:	e8 21 ff ff ff       	call   c0009380 <UnixFile::~UnixFile()>
c000945f:	83 c4 10             	add    esp,0x10
c0009462:	90                   	nop
c0009463:	83 c4 0c             	add    esp,0xc
c0009466:	c3                   	ret    
c0009467:	90                   	nop

c0009468 <ReservedFilename::~ReservedFilename()>:
c0009468:	83 ec 0c             	sub    esp,0xc
c000946b:	83 ec 0c             	sub    esp,0xc
c000946e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009472:	e8 cd ff ff ff       	call   c0009444 <ReservedFilename::~ReservedFilename()>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	83 ec 08             	sub    esp,0x8
c000947d:	6a 0c                	push   0xc
c000947f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009483:	e8 78 13 00 00       	call   c000a800 <operator delete(void*, unsigned long)>
c0009488:	83 c4 10             	add    esp,0x10
c000948b:	83 c4 0c             	add    esp,0xc
c000948e:	c3                   	ret    

c000948f <KeGetFileFromDescriptor(int)>:
c000948f:	53                   	push   ebx
c0009490:	83 ec 08             	sub    esp,0x8
c0009493:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009497:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000949d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094a3:	7f 2c                	jg     c00094d1 <KeGetFileFromDescriptor(int)+0x42>
c00094a5:	83 ec 0c             	sub    esp,0xc
c00094a8:	68 98 5f 02 c0       	push   0xc0025f98
c00094ad:	e8 3a 5a 01 00       	call   c001eeec <LinkedList<UnixFile>::getFirstElement()>
c00094b2:	83 c4 10             	add    esp,0x10
c00094b5:	85 c0                	test   eax,eax
c00094b7:	75 04                	jne    c00094bd <KeGetFileFromDescriptor(int)+0x2e>
c00094b9:	31 c0                	xor    eax,eax
c00094bb:	eb 6e                	jmp    c000952b <KeGetFileFromDescriptor(int)+0x9c>
c00094bd:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094c0:	74 69                	je     c000952b <KeGetFileFromDescriptor(int)+0x9c>
c00094c2:	52                   	push   edx
c00094c3:	52                   	push   edx
c00094c4:	50                   	push   eax
c00094c5:	68 98 5f 02 c0       	push   0xc0025f98
c00094ca:	e8 c7 5a 01 00       	call   c001ef96 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094cf:	eb e1                	jmp    c00094b2 <KeGetFileFromDescriptor(int)+0x23>
c00094d1:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00094d7:	a1 8c 5f 02 c0       	mov    eax,ds:0xc0025f8c
c00094dc:	74 4d                	je     c000952b <KeGetFileFromDescriptor(int)+0x9c>
c00094de:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00094e4:	a1 90 5f 02 c0       	mov    eax,ds:0xc0025f90
c00094e9:	74 40                	je     c000952b <KeGetFileFromDescriptor(int)+0x9c>
c00094eb:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00094f1:	a1 88 5f 02 c0       	mov    eax,ds:0xc0025f88
c00094f6:	74 33                	je     c000952b <KeGetFileFromDescriptor(int)+0x9c>
c00094f8:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00094fe:	a1 84 5f 02 c0       	mov    eax,ds:0xc0025f84
c0009503:	74 26                	je     c000952b <KeGetFileFromDescriptor(int)+0x9c>
c0009505:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000950b:	83 f8 08             	cmp    eax,0x8
c000950e:	77 09                	ja     c0009519 <KeGetFileFromDescriptor(int)+0x8a>
c0009510:	8b 04 85 60 5f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda0a0]
c0009517:	eb 12                	jmp    c000952b <KeGetFileFromDescriptor(int)+0x9c>
c0009519:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000951f:	83 fb 08             	cmp    ebx,0x8
c0009522:	77 95                	ja     c00094b9 <KeGetFileFromDescriptor(int)+0x2a>
c0009524:	8b 04 9d 20 5f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda0e0]
c000952b:	83 c4 08             	add    esp,0x8
c000952e:	5b                   	pop    ebx
c000952f:	c3                   	ret    

c0009530 <__static_initialization_and_destruction_0(int, int)>:
c0009530:	83 ec 0c             	sub    esp,0xc
c0009533:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009538:	75 34                	jne    c000956e <__static_initialization_and_destruction_0(int, int)+0x3e>
c000953a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0009542:	75 2a                	jne    c000956e <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009544:	83 ec 0c             	sub    esp,0xc
c0009547:	68 98 5f 02 c0       	push   0xc0025f98
c000954c:	e8 85 58 01 00       	call   c001edd6 <LinkedList<UnixFile>::LinkedList()>
c0009551:	83 c4 10             	add    esp,0x10
c0009554:	83 ec 04             	sub    esp,0x4
c0009557:	68 ec 27 02 c0       	push   0xc00227ec
c000955c:	68 98 5f 02 c0       	push   0xc0025f98
c0009561:	68 d4 ed 01 c0       	push   0xc001edd4
c0009566:	e8 45 12 00 00       	call   c000a7b0 <__cxa_atexit>
c000956b:	83 c4 10             	add    esp,0x10
c000956e:	90                   	nop
c000956f:	83 c4 0c             	add    esp,0xc
c0009572:	c3                   	ret    

c0009573 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009573:	83 ec 0c             	sub    esp,0xc
c0009576:	83 ec 08             	sub    esp,0x8
c0009579:	68 ff ff 00 00       	push   0xffff
c000957e:	6a 01                	push   0x1
c0009580:	e8 ab ff ff ff       	call   c0009530 <__static_initialization_and_destruction_0(int, int)>
c0009585:	83 c4 10             	add    esp,0x10
c0009588:	83 c4 0c             	add    esp,0xc
c000958b:	c3                   	ret    

c000958c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000958c:	53                   	push   ebx
c000958d:	8b 15 68 28 02 c0    	mov    edx,DWORD PTR ds:0xc0022868
c0009593:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009597:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000959b:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095a1:	89 d8                	mov    eax,ebx
c00095a3:	d1 e8                	shr    eax,1
c00095a5:	01 d0                	add    eax,edx
c00095a7:	80 e3 01             	and    bl,0x1
c00095aa:	8a 10                	mov    dl,BYTE PTR [eax]
c00095ac:	75 09                	jne    c00095b7 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095ae:	83 e2 f0             	and    edx,0xfffffff0
c00095b1:	09 ca                	or     edx,ecx
c00095b3:	88 10                	mov    BYTE PTR [eax],dl
c00095b5:	5b                   	pop    ebx
c00095b6:	c3                   	ret    
c00095b7:	0f b6 c9             	movzx  ecx,cl
c00095ba:	83 e2 0f             	and    edx,0xf
c00095bd:	c1 e1 04             	shl    ecx,0x4
c00095c0:	09 ca                	or     edx,ecx
c00095c2:	88 10                	mov    BYTE PTR [eax],dl
c00095c4:	5b                   	pop    ebx
c00095c5:	c3                   	ret    

c00095c6 <Virt::getPageState(unsigned long)>:
c00095c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095ca:	8b 0d 68 28 02 c0    	mov    ecx,DWORD PTR ds:0xc0022868
c00095d0:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095d6:	89 d0                	mov    eax,edx
c00095d8:	d1 e8                	shr    eax,1
c00095da:	80 e2 01             	and    dl,0x1
c00095dd:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00095e0:	74 03                	je     c00095e5 <Virt::getPageState(unsigned long)+0x1f>
c00095e2:	c1 e8 04             	shr    eax,0x4
c00095e5:	83 e0 0f             	and    eax,0xf
c00095e8:	c3                   	ret    

c00095e9 <Virt::allocateKernelVirtualPages(int)>:
c00095e9:	55                   	push   ebp
c00095ea:	57                   	push   edi
c00095eb:	56                   	push   esi
c00095ec:	31 f6                	xor    esi,esi
c00095ee:	53                   	push   ebx
c00095ef:	31 db                	xor    ebx,ebx
c00095f1:	83 ec 1c             	sub    esp,0x1c
c00095f4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00095f9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00095fd:	8b 2d 64 28 02 c0    	mov    ebp,DWORD PTR ds:0xc0022864
c0009603:	55                   	push   ebp
c0009604:	e8 bd ff ff ff       	call   c00095c6 <Virt::getPageState(unsigned long)>
c0009609:	5a                   	pop    edx
c000960a:	84 c0                	test   al,al
c000960c:	75 3d                	jne    c000964b <Virt::allocateKernelVirtualPages(int)+0x62>
c000960e:	85 db                	test   ebx,ebx
c0009610:	0f 44 f5             	cmove  esi,ebp
c0009613:	83 c3 01             	add    ebx,0x1
c0009616:	39 fb                	cmp    ebx,edi
c0009618:	74 5e                	je     c0009678 <Virt::allocateKernelVirtualPages(int)+0x8f>
c000961a:	83 c5 01             	add    ebp,0x1
c000961d:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0009623:	76 33                	jbe    c0009658 <Virt::allocateKernelVirtualPages(int)+0x6f>
c0009625:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c000962a:	c7 05 64 28 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0022864,0xc8000
c0009634:	75 2a                	jne    c0009660 <Virt::allocateKernelVirtualPages(int)+0x77>
c0009636:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000963b:	bd 00 80 0c 00       	mov    ebp,0xc8000
c0009640:	55                   	push   ebp
c0009641:	e8 80 ff ff ff       	call   c00095c6 <Virt::getPageState(unsigned long)>
c0009646:	5a                   	pop    edx
c0009647:	84 c0                	test   al,al
c0009649:	74 c3                	je     c000960e <Virt::allocateKernelVirtualPages(int)+0x25>
c000964b:	83 c5 01             	add    ebp,0x1
c000964e:	31 db                	xor    ebx,ebx
c0009650:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0009656:	77 cd                	ja     c0009625 <Virt::allocateKernelVirtualPages(int)+0x3c>
c0009658:	89 2d 64 28 02 c0    	mov    DWORD PTR ds:0xc0022864,ebp
c000965e:	eb a3                	jmp    c0009603 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009660:	83 ec 0c             	sub    esp,0xc
c0009663:	68 6c 03 02 c0       	push   0xc002036c
c0009668:	e8 04 75 00 00       	call   c0010b71 <KePanic(char const*)>
c000966d:	8b 2d 64 28 02 c0    	mov    ebp,DWORD PTR ds:0xc0022864
c0009673:	83 c4 10             	add    esp,0x10
c0009676:	eb 8b                	jmp    c0009603 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009678:	89 35 64 28 02 c0    	mov    DWORD PTR ds:0xc0022864,esi
c000967e:	83 fb 01             	cmp    ebx,0x1
c0009681:	74 63                	je     c00096e6 <Virt::allocateKernelVirtualPages(int)+0xfd>
c0009683:	85 ff                	test   edi,edi
c0009685:	74 41                	je     c00096c8 <Virt::allocateKernelVirtualPages(int)+0xdf>
c0009687:	89 f0                	mov    eax,esi
c0009689:	31 db                	xor    ebx,ebx
c000968b:	8d 6f ff             	lea    ebp,[edi-0x1]
c000968e:	eb 16                	jmp    c00096a6 <Virt::allocateKernelVirtualPages(int)+0xbd>
c0009690:	6a 01                	push   0x1
c0009692:	83 c3 01             	add    ebx,0x1
c0009695:	50                   	push   eax
c0009696:	e8 f1 fe ff ff       	call   c000958c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000969b:	39 fb                	cmp    ebx,edi
c000969d:	58                   	pop    eax
c000969e:	5a                   	pop    edx
c000969f:	74 27                	je     c00096c8 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00096a1:	a1 64 28 02 c0       	mov    eax,ds:0xc0022864
c00096a6:	8d 50 01             	lea    edx,[eax+0x1]
c00096a9:	85 db                	test   ebx,ebx
c00096ab:	89 15 64 28 02 c0    	mov    DWORD PTR ds:0xc0022864,edx
c00096b1:	74 22                	je     c00096d5 <Virt::allocateKernelVirtualPages(int)+0xec>
c00096b3:	39 dd                	cmp    ebp,ebx
c00096b5:	75 d9                	jne    c0009690 <Virt::allocateKernelVirtualPages(int)+0xa7>
c00096b7:	6a 03                	push   0x3
c00096b9:	83 c3 01             	add    ebx,0x1
c00096bc:	50                   	push   eax
c00096bd:	e8 ca fe ff ff       	call   c000958c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096c2:	39 fb                	cmp    ebx,edi
c00096c4:	59                   	pop    ecx
c00096c5:	58                   	pop    eax
c00096c6:	75 d9                	jne    c00096a1 <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096c8:	83 c4 1c             	add    esp,0x1c
c00096cb:	89 f0                	mov    eax,esi
c00096cd:	5b                   	pop    ebx
c00096ce:	c1 e0 0c             	shl    eax,0xc
c00096d1:	5e                   	pop    esi
c00096d2:	5f                   	pop    edi
c00096d3:	5d                   	pop    ebp
c00096d4:	c3                   	ret    
c00096d5:	6a 02                	push   0x2
c00096d7:	bb 01 00 00 00       	mov    ebx,0x1
c00096dc:	50                   	push   eax
c00096dd:	e8 aa fe ff ff       	call   c000958c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096e2:	58                   	pop    eax
c00096e3:	5a                   	pop    edx
c00096e4:	eb bb                	jmp    c00096a1 <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096e6:	6a 04                	push   0x4
c00096e8:	56                   	push   esi
c00096e9:	8d 46 01             	lea    eax,[esi+0x1]
c00096ec:	a3 64 28 02 c0       	mov    ds:0xc0022864,eax
c00096f1:	e8 96 fe ff ff       	call   c000958c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096f6:	89 f0                	mov    eax,esi
c00096f8:	59                   	pop    ecx
c00096f9:	c1 e0 0c             	shl    eax,0xc
c00096fc:	5b                   	pop    ebx
c00096fd:	83 c4 1c             	add    esp,0x1c
c0009700:	5b                   	pop    ebx
c0009701:	5e                   	pop    esi
c0009702:	5f                   	pop    edi
c0009703:	5d                   	pop    ebp
c0009704:	c3                   	ret    

c0009705 <Virt::freeSwapfilePage(unsigned long)>:
c0009705:	53                   	push   ebx
c0009706:	8b 15 ac 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fac
c000970c:	b8 01 00 00 00       	mov    eax,0x1
c0009711:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009715:	d3 e0                	shl    eax,cl
c0009717:	89 cb                	mov    ebx,ecx
c0009719:	c1 eb 05             	shr    ebx,0x5
c000971c:	f7 d0                	not    eax
c000971e:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c0009721:	21 c1                	and    ecx,eax
c0009723:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009726:	5b                   	pop    ebx
c0009727:	c3                   	ret    

c0009728 <Virt::swapIDToSector(unsigned long)>:
c0009728:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000972c:	8b 15 6c 28 02 c0    	mov    edx,DWORD PTR ds:0xc002286c
c0009732:	8b 0d 74 28 02 c0    	mov    ecx,DWORD PTR ds:0xc0022874
c0009738:	0f af c2             	imul   eax,edx
c000973b:	01 c8                	add    eax,ecx
c000973d:	c3                   	ret    

c000973e <Virt::allocateSwapfilePage()>:
c000973e:	55                   	push   ebp
c000973f:	31 d2                	xor    edx,edx
c0009741:	57                   	push   edi
c0009742:	56                   	push   esi
c0009743:	53                   	push   ebx
c0009744:	83 ec 0c             	sub    esp,0xc
c0009747:	8b 1d 70 28 02 c0    	mov    ebx,DWORD PTR ds:0xc0022870
c000974d:	8b 0d 6c 28 02 c0    	mov    ecx,DWORD PTR ds:0xc002286c
c0009753:	89 d8                	mov    eax,ebx
c0009755:	f7 f1                	div    ecx
c0009757:	39 cb                	cmp    ebx,ecx
c0009759:	72 2f                	jb     c000978a <Virt::allocateSwapfilePage()+0x4c>
c000975b:	8b 35 ac 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fac
c0009761:	8b 16                	mov    edx,DWORD PTR [esi]
c0009763:	f6 c2 01             	test   dl,0x1
c0009766:	74 3e                	je     c00097a6 <Virt::allocateSwapfilePage()+0x68>
c0009768:	31 c9                	xor    ecx,ecx
c000976a:	bf 01 00 00 00       	mov    edi,0x1
c000976f:	eb 12                	jmp    c0009783 <Virt::allocateSwapfilePage()+0x45>
c0009771:	89 ca                	mov    edx,ecx
c0009773:	89 fd                	mov    ebp,edi
c0009775:	c1 ea 05             	shr    edx,0x5
c0009778:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000977b:	8b 13                	mov    edx,DWORD PTR [ebx]
c000977d:	d3 e5                	shl    ebp,cl
c000977f:	85 ea                	test   edx,ebp
c0009781:	74 2c                	je     c00097af <Virt::allocateSwapfilePage()+0x71>
c0009783:	83 c1 01             	add    ecx,0x1
c0009786:	39 c8                	cmp    eax,ecx
c0009788:	77 e7                	ja     c0009771 <Virt::allocateSwapfilePage()+0x33>
c000978a:	83 ec 0c             	sub    esp,0xc
c000978d:	68 00 06 02 c0       	push   0xc0020600
c0009792:	e8 da 73 00 00       	call   c0010b71 <KePanic(char const*)>
c0009797:	83 c4 10             	add    esp,0x10
c000979a:	31 c9                	xor    ecx,ecx
c000979c:	83 c4 0c             	add    esp,0xc
c000979f:	89 c8                	mov    eax,ecx
c00097a1:	5b                   	pop    ebx
c00097a2:	5e                   	pop    esi
c00097a3:	5f                   	pop    edi
c00097a4:	5d                   	pop    ebp
c00097a5:	c3                   	ret    
c00097a6:	89 f3                	mov    ebx,esi
c00097a8:	bd 01 00 00 00       	mov    ebp,0x1
c00097ad:	31 c9                	xor    ecx,ecx
c00097af:	09 ea                	or     edx,ebp
c00097b1:	89 c8                	mov    eax,ecx
c00097b3:	89 13                	mov    DWORD PTR [ebx],edx
c00097b5:	83 c4 0c             	add    esp,0xc
c00097b8:	5b                   	pop    ebx
c00097b9:	5e                   	pop    esi
c00097ba:	5f                   	pop    edi
c00097bb:	5d                   	pop    ebp
c00097bc:	c3                   	ret    

c00097bd <Virt::virtualMemorySetup()>:
c00097bd:	53                   	push   ebx
c00097be:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097c3:	6a 0f                	push   0xf
c00097c5:	53                   	push   ebx
c00097c6:	83 c3 01             	add    ebx,0x1
c00097c9:	e8 be fd ff ff       	call   c000958c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097ce:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097d4:	58                   	pop    eax
c00097d5:	5a                   	pop    edx
c00097d6:	75 eb                	jne    c00097c3 <Virt::virtualMemorySetup()+0x6>
c00097d8:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097dd:	6a 00                	push   0x0
c00097df:	53                   	push   ebx
c00097e0:	83 c3 01             	add    ebx,0x1
c00097e3:	e8 a4 fd ff ff       	call   c000958c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097e8:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097ee:	59                   	pop    ecx
c00097ef:	58                   	pop    eax
c00097f0:	75 eb                	jne    c00097dd <Virt::virtualMemorySetup()+0x20>
c00097f2:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00097f7:	6a 0f                	push   0xf
c00097f9:	53                   	push   ebx
c00097fa:	83 c3 01             	add    ebx,0x1
c00097fd:	e8 8a fd ff ff       	call   c000958c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009802:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009808:	58                   	pop    eax
c0009809:	5a                   	pop    edx
c000980a:	75 eb                	jne    c00097f7 <Virt::virtualMemorySetup()+0x3a>
c000980c:	5b                   	pop    ebx
c000980d:	c3                   	ret    

c000980e <Virt::setupPageSwapping(int)>:
c000980e:	53                   	push   ebx
c000980f:	83 ec 0c             	sub    esp,0xc
c0009812:	a1 28 84 02 c0       	mov    eax,ds:0xc0028428
c0009817:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000981b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0009821:	8b 10                	mov    edx,DWORD PTR [eax]
c0009823:	53                   	push   ebx
c0009824:	68 17 06 02 c0       	push   0xc0020617
c0009829:	50                   	push   eax
c000982a:	ff 52 60             	call   DWORD PTR [edx+0x60]
c000982d:	c1 e3 0b             	shl    ebx,0xb
c0009830:	89 1d 70 28 02 c0    	mov    DWORD PTR ds:0xc0022870,ebx
c0009836:	c1 eb 08             	shr    ebx,0x8
c0009839:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000983c:	c6 05 78 28 02 c0 43 	mov    BYTE PTR ds:0xc0022878,0x43
c0009843:	c7 05 6c 28 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002286c,0x8
c000984d:	a3 74 28 02 c0       	mov    ds:0xc0022874,eax
c0009852:	e8 74 e2 ff ff       	call   c0007acb <malloc>
c0009857:	31 d2                	xor    edx,edx
c0009859:	83 c4 0c             	add    esp,0xc
c000985c:	a3 ac 5f 02 c0       	mov    ds:0xc0025fac,eax
c0009861:	89 c1                	mov    ecx,eax
c0009863:	a1 70 28 02 c0       	mov    eax,ds:0xc0022870
c0009868:	f7 35 6c 28 02 c0    	div    DWORD PTR ds:0xc002286c
c000986e:	c1 e8 05             	shr    eax,0x5
c0009871:	50                   	push   eax
c0009872:	6a 00                	push   0x0
c0009874:	51                   	push   ecx
c0009875:	e8 76 6c ff ff       	call   c00004f0 <memset>
c000987a:	83 c4 18             	add    esp,0x18
c000987d:	5b                   	pop    ebx
c000987e:	c3                   	ret    
c000987f:	90                   	nop

c0009880 <VAS::setCPUSpecific(unsigned long)>:
c0009880:	c3                   	ret    
c0009881:	90                   	nop

c0009882 <VAS::VAS(VAS*)>:
c0009882:	83 ec 0c             	sub    esp,0xc
c0009885:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009889:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009894:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000989b:	83 ec 0c             	sub    esp,0xc
c000989e:	68 8c 03 02 c0       	push   0xc002038c
c00098a3:	e8 c9 72 00 00       	call   c0010b71 <KePanic(char const*)>
c00098a8:	83 c4 10             	add    esp,0x10
c00098ab:	90                   	nop
c00098ac:	83 c4 0c             	add    esp,0xc
c00098af:	c3                   	ret    

c00098b0 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098b4:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098b9:	89 c2                	mov    edx,eax
c00098bb:	c1 ea 16             	shr    edx,0x16
c00098be:	c1 e8 0a             	shr    eax,0xa
c00098c1:	83 f9 01             	cmp    ecx,0x1
c00098c4:	19 c9                	sbb    ecx,ecx
c00098c6:	25 fc 0f 00 00       	and    eax,0xffc
c00098cb:	c1 e2 0c             	shl    edx,0xc
c00098ce:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098d4:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00098db:	01 d0                	add    eax,edx
c00098dd:	c3                   	ret    

c00098de <VAS::getPageTableEntry(unsigned long)>:
c00098de:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00098e2:	89 ca                	mov    edx,ecx
c00098e4:	c1 ea 16             	shr    edx,0x16
c00098e7:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00098ed:	c1 e9 0a             	shr    ecx,0xa
c00098f0:	c1 e0 0c             	shl    eax,0xc
c00098f3:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00098f9:	8d 04 08             	lea    eax,[eax+ecx*1]
c00098fc:	c3                   	ret    

c00098fd <Virt::freeKernelVirtualPages(unsigned long)>:
c00098fd:	55                   	push   ebp
c00098fe:	57                   	push   edi
c00098ff:	bf 01 00 00 00       	mov    edi,0x1
c0009904:	56                   	push   esi
c0009905:	53                   	push   ebx
c0009906:	83 ec 1c             	sub    esp,0x1c
c0009909:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000990d:	c1 ee 0c             	shr    esi,0xc
c0009910:	eb 48                	jmp    c000995a <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0009912:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c0009917:	83 ec 08             	sub    esp,0x8
c000991a:	55                   	push   ebp
c000991b:	50                   	push   eax
c000991c:	e8 bd ff ff ff       	call   c00098de <VAS::getPageTableEntry(unsigned long)>
c0009921:	83 c4 10             	add    esp,0x10
c0009924:	8b 10                	mov    edx,DWORD PTR [eax]
c0009926:	f6 c6 04             	test   dh,0x4
c0009929:	75 70                	jne    c000999b <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c000992b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009931:	83 fb 04             	cmp    ebx,0x4
c0009934:	0f 84 8a 00 00 00    	je     c00099c4 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000993a:	83 fb 02             	cmp    ebx,0x2
c000993d:	0f 84 9a 00 00 00    	je     c00099dd <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0009943:	83 fb 03             	cmp    ebx,0x3
c0009946:	0f 84 be 00 00 00    	je     c0009a0a <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000994c:	83 fb 01             	cmp    ebx,0x1
c000994f:	0f 84 a2 00 00 00    	je     c00099f7 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009955:	83 c6 01             	add    esi,0x1
c0009958:	31 ff                	xor    edi,edi
c000995a:	56                   	push   esi
c000995b:	89 f5                	mov    ebp,esi
c000995d:	e8 64 fc ff ff       	call   c00095c6 <Virt::getPageState(unsigned long)>
c0009962:	c1 e5 0c             	shl    ebp,0xc
c0009965:	5a                   	pop    edx
c0009966:	0f b6 d8             	movzx  ebx,al
c0009969:	85 db                	test   ebx,ebx
c000996b:	75 a5                	jne    c0009912 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c000996d:	83 ec 0c             	sub    esp,0xc
c0009970:	68 2e 06 02 c0       	push   0xc002062e
c0009975:	e8 f7 71 00 00       	call   c0010b71 <KePanic(char const*)>
c000997a:	5a                   	pop    edx
c000997b:	59                   	pop    ecx
c000997c:	55                   	push   ebp
c000997d:	8b 2d b0 5f 02 c0    	mov    ebp,DWORD PTR ds:0xc0025fb0
c0009983:	55                   	push   ebp
c0009984:	e8 55 ff ff ff       	call   c00098de <VAS::getPageTableEntry(unsigned long)>
c0009989:	83 c4 10             	add    esp,0x10
c000998c:	8b 10                	mov    edx,DWORD PTR [eax]
c000998e:	f6 c6 04             	test   dh,0x4
c0009991:	75 08                	jne    c000999b <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009993:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009999:	eb ba                	jmp    c0009955 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c000999b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000999f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099a5:	83 ec 0c             	sub    esp,0xc
c00099a8:	52                   	push   edx
c00099a9:	e8 be e3 ff ff       	call   c0007d6c <Phys::freePage(unsigned long)>
c00099ae:	83 c4 10             	add    esp,0x10
c00099b1:	83 fb 04             	cmp    ebx,0x4
c00099b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099b8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099be:	0f 85 76 ff ff ff    	jne    c000993a <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099c4:	83 e7 01             	and    edi,0x1
c00099c7:	75 46                	jne    c0009a0f <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099c9:	c7 44 24 30 b0 03 02 c0 	mov    DWORD PTR [esp+0x30],0xc00203b0
c00099d1:	83 c4 1c             	add    esp,0x1c
c00099d4:	5b                   	pop    ebx
c00099d5:	5e                   	pop    esi
c00099d6:	5f                   	pop    edi
c00099d7:	5d                   	pop    ebp
c00099d8:	e9 94 71 00 00       	jmp    c0010b71 <KePanic(char const*)>
c00099dd:	83 e7 01             	and    edi,0x1
c00099e0:	75 15                	jne    c00099f7 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00099e2:	83 ec 0c             	sub    esp,0xc
c00099e5:	68 4a 06 02 c0       	push   0xc002064a
c00099ea:	e8 82 71 00 00       	call   c0010b71 <KePanic(char const*)>
c00099ef:	83 c4 10             	add    esp,0x10
c00099f2:	e9 5e ff ff ff       	jmp    c0009955 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099f7:	83 ec 08             	sub    esp,0x8
c00099fa:	6a 00                	push   0x0
c00099fc:	56                   	push   esi
c00099fd:	e8 8a fb ff ff       	call   c000958c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	e9 4b ff ff ff       	jmp    c0009955 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a0a:	83 e7 01             	and    edi,0x1
c0009a0d:	75 16                	jne    c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a0f:	83 ec 08             	sub    esp,0x8
c0009a12:	6a 00                	push   0x0
c0009a14:	56                   	push   esi
c0009a15:	e8 72 fb ff ff       	call   c000958c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a1a:	83 c4 10             	add    esp,0x10
c0009a1d:	83 c4 1c             	add    esp,0x1c
c0009a20:	5b                   	pop    ebx
c0009a21:	5e                   	pop    esi
c0009a22:	5f                   	pop    edi
c0009a23:	5d                   	pop    ebp
c0009a24:	c3                   	ret    
c0009a25:	c7 44 24 30 66 06 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020666
c0009a2d:	83 c4 1c             	add    esp,0x1c
c0009a30:	5b                   	pop    ebx
c0009a31:	5e                   	pop    esi
c0009a32:	5f                   	pop    edi
c0009a33:	5d                   	pop    ebp
c0009a34:	e9 38 71 00 00       	jmp    c0010b71 <KePanic(char const*)>
c0009a39:	90                   	nop

c0009a3a <VAS::freeAllocatedPages(unsigned long)>:
c0009a3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a3e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a42:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a46:	74 09                	je     c0009a51 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a48:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a4c:	e9 ac fe ff ff       	jmp    c00098fd <Virt::freeKernelVirtualPages(unsigned long)>
c0009a51:	c7 44 24 04 d4 03 02 c0 	mov    DWORD PTR [esp+0x4],0xc00203d4
c0009a59:	e9 a0 0e 00 00       	jmp    c000a8fe <Dbg::kprintf(char const*, ...)>

c0009a5e <VAS::virtualToPhysical(unsigned long)>:
c0009a5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a62:	50                   	push   eax
c0009a63:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a67:	52                   	push   edx
c0009a68:	e8 71 fe ff ff       	call   c00098de <VAS::getPageTableEntry(unsigned long)>
c0009a6d:	59                   	pop    ecx
c0009a6e:	5a                   	pop    edx
c0009a6f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a71:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a76:	c3                   	ret    
c0009a77:	90                   	nop

c0009a78 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009a78:	55                   	push   ebp
c0009a79:	57                   	push   edi
c0009a7a:	56                   	push   esi
c0009a7b:	53                   	push   ebx
c0009a7c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a80:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009a84:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009a88:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009a8c:	85 db                	test   ebx,ebx
c0009a8e:	7e 24                	jle    c0009ab4 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009a90:	c1 e3 0c             	shl    ebx,0xc
c0009a93:	01 f3                	add    ebx,esi
c0009a95:	56                   	push   esi
c0009a96:	81 c6 00 10 00 00    	add    esi,0x1000
c0009a9c:	55                   	push   ebp
c0009a9d:	e8 3c fe ff ff       	call   c00098de <VAS::getPageTableEntry(unsigned long)>
c0009aa2:	5a                   	pop    edx
c0009aa3:	59                   	pop    ecx
c0009aa4:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009aa6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009aaa:	21 f9                	and    ecx,edi
c0009aac:	09 d1                	or     ecx,edx
c0009aae:	39 f3                	cmp    ebx,esi
c0009ab0:	89 08                	mov    DWORD PTR [eax],ecx
c0009ab2:	75 e1                	jne    c0009a95 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ab4:	5b                   	pop    ebx
c0009ab5:	5e                   	pop    esi
c0009ab6:	5f                   	pop    edi
c0009ab7:	5d                   	pop    ebp
c0009ab8:	c3                   	ret    
c0009ab9:	90                   	nop

c0009aba <VAS::VAS()>:
c0009aba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009abe:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ac5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ac9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009ad0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ad4:	a3 b0 5f 02 c0       	mov    ds:0xc0025fb0,eax
c0009ad9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009add:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009ae1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae5:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009ae8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aec:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009af3:	ba 7d 40 02 c0       	mov    edx,0xc002407d
c0009af8:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009afd:	29 c2                	sub    edx,eax
c0009aff:	89 d0                	mov    eax,edx
c0009b01:	05 ff 0f 00 00       	add    eax,0xfff
c0009b06:	c1 e8 0c             	shr    eax,0xc
c0009b09:	89 c2                	mov    edx,eax
c0009b0b:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b10:	6a 04                	push   0x4
c0009b12:	6a ff                	push   0xffffffff
c0009b14:	52                   	push   edx
c0009b15:	50                   	push   eax
c0009b16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b1a:	e8 59 ff ff ff       	call   c0009a78 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b1f:	83 c4 14             	add    esp,0x14
c0009b22:	90                   	nop
c0009b23:	c3                   	ret    

c0009b24 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b24:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009b29:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b2f:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b36:	75 01                	jne    c0009b39 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b38:	c3                   	ret    
c0009b39:	68 80 00 00 00       	push   0x80
c0009b3e:	6a ff                	push   0xffffffff
c0009b40:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b44:	50                   	push   eax
c0009b45:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b49:	52                   	push   edx
c0009b4a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b4e:	51                   	push   ecx
c0009b4f:	e8 24 ff ff ff       	call   c0009a78 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b54:	83 c4 14             	add    esp,0x14
c0009b57:	c3                   	ret    

c0009b58 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b5c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b5f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b63:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b66:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b6b:	83 f8 01             	cmp    eax,0x1
c0009b6e:	19 c0                	sbb    eax,eax
c0009b70:	83 ca 03             	or     edx,0x3
c0009b73:	83 e0 fc             	and    eax,0xfffffffc
c0009b76:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009b7d:	0f 20 d8             	mov    eax,cr3
c0009b80:	0f 22 d8             	mov    cr3,eax
c0009b83:	c3                   	ret    

c0009b84 <VAS::~VAS()>:
c0009b84:	83 ec 2c             	sub    esp,0x2c
c0009b87:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009b8f:	fa                   	cli    
c0009b90:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0009b95:	83 c0 01             	add    eax,0x1
c0009b98:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0009b9d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009ba2:	8b 00                	mov    eax,DWORD PTR [eax]
c0009ba4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009ba7:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bad:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bb1:	6a 01                	push   0x1
c0009bb3:	50                   	push   eax
c0009bb4:	e8 9f ff ff ff       	call   c0009b58 <VAS::mapOtherVASIn(bool, VAS*)>
c0009bb9:	83 c4 0c             	add    esp,0xc
c0009bbc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bc4:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bcc:	0f 8f d8 00 00 00    	jg     c0009caa <VAS::~VAS()+0x126>
c0009bd2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009bd6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009bd9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009bdd:	c1 e2 02             	shl    edx,0x2
c0009be0:	01 d0                	add    eax,edx
c0009be2:	8b 00                	mov    eax,DWORD PTR [eax]
c0009be4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009be8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bec:	83 e0 01             	and    eax,0x1
c0009bef:	0f 84 ab 00 00 00    	je     c0009ca0 <VAS::~VAS()+0x11c>
c0009bf5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009bfd:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c05:	7f 74                	jg     c0009c7b <VAS::~VAS()+0xf7>
c0009c07:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c0b:	c1 e0 0a             	shl    eax,0xa
c0009c0e:	89 c2                	mov    edx,eax
c0009c10:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c14:	01 d0                	add    eax,edx
c0009c16:	c1 e0 0c             	shl    eax,0xc
c0009c19:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c1d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c22:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c24:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c27:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c2d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c31:	6a 01                	push   0x1
c0009c33:	50                   	push   eax
c0009c34:	e8 77 fc ff ff       	call   c00098b0 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c39:	83 c4 0c             	add    esp,0xc
c0009c3c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c44:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c46:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c4e:	25 01 04 00 00       	and    eax,0x401
c0009c53:	3d 01 04 00 00       	cmp    eax,0x401
c0009c58:	75 1a                	jne    c0009c74 <VAS::~VAS()+0xf0>
c0009c5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c5e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c63:	83 ec 0c             	sub    esp,0xc
c0009c66:	50                   	push   eax
c0009c67:	e8 00 e1 ff ff       	call   c0007d6c <Phys::freePage(unsigned long)>
c0009c6c:	83 c4 10             	add    esp,0x10
c0009c6f:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c74:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009c79:	eb 82                	jmp    c0009bfd <VAS::~VAS()+0x79>
c0009c7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c7f:	25 00 04 00 00       	and    eax,0x400
c0009c84:	74 1a                	je     c0009ca0 <VAS::~VAS()+0x11c>
c0009c86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c8a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c8f:	83 ec 0c             	sub    esp,0xc
c0009c92:	50                   	push   eax
c0009c93:	e8 d4 e0 ff ff       	call   c0007d6c <Phys::freePage(unsigned long)>
c0009c98:	83 c4 10             	add    esp,0x10
c0009c9b:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ca0:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009ca5:	e9 1a ff ff ff       	jmp    c0009bc4 <VAS::~VAS()+0x40>
c0009caa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cae:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cb1:	83 ec 0c             	sub    esp,0xc
c0009cb4:	50                   	push   eax
c0009cb5:	e8 43 fc ff ff       	call   c00098fd <Virt::freeKernelVirtualPages(unsigned long)>
c0009cba:	83 c4 10             	add    esp,0x10
c0009cbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cc1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cc4:	83 ec 0c             	sub    esp,0xc
c0009cc7:	50                   	push   eax
c0009cc8:	e8 9f e0 ff ff       	call   c0007d6c <Phys::freePage(unsigned long)>
c0009ccd:	83 c4 10             	add    esp,0x10
c0009cd0:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cd5:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0009cda:	83 e8 01             	sub    eax,0x1
c0009cdd:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0009ce2:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0009ce7:	85 c0                	test   eax,eax
c0009ce9:	75 01                	jne    c0009cec <VAS::~VAS()+0x168>
c0009ceb:	fb                   	sti    
c0009cec:	90                   	nop
c0009ced:	83 c4 2c             	add    esp,0x2c
c0009cf0:	c3                   	ret    
c0009cf1:	90                   	nop

c0009cf2 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009cf2:	55                   	push   ebp
c0009cf3:	57                   	push   edi
c0009cf4:	56                   	push   esi
c0009cf5:	53                   	push   ebx
c0009cf6:	83 ec 1c             	sub    esp,0x1c
c0009cf9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009cfd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009d01:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009d05:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d0b:	77 08                	ja     c0009d15 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c0009d0d:	0f 20 d8             	mov    eax,cr3
c0009d10:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0009d13:	75 43                	jne    c0009d58 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0009d15:	89 d8                	mov    eax,ebx
c0009d17:	09 f8                	or     eax,edi
c0009d19:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d1e:	75 53                	jne    c0009d73 <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c0009d20:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009d23:	89 de                	mov    esi,ebx
c0009d25:	c1 ee 16             	shr    esi,0x16
c0009d28:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d2f:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d33:	74 50                	je     c0009d85 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c0009d35:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d39:	c1 eb 0a             	shr    ebx,0xa
c0009d3c:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d42:	c1 e6 0c             	shl    esi,0xc
c0009d45:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d4b:	09 c7                	or     edi,eax
c0009d4d:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0009d50:	83 c4 1c             	add    esp,0x1c
c0009d53:	5b                   	pop    ebx
c0009d54:	5e                   	pop    esi
c0009d55:	5f                   	pop    edi
c0009d56:	5d                   	pop    ebp
c0009d57:	c3                   	ret    
c0009d58:	83 ec 0c             	sub    esp,0xc
c0009d5b:	68 f8 03 02 c0       	push   0xc00203f8
c0009d60:	e8 99 0b 00 00       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0009d65:	89 d8                	mov    eax,ebx
c0009d67:	83 c4 10             	add    esp,0x10
c0009d6a:	09 f8                	or     eax,edi
c0009d6c:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d71:	74 ad                	je     c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d73:	83 ec 0c             	sub    esp,0xc
c0009d76:	68 60 04 02 c0       	push   0xc0020460
c0009d7b:	e8 f1 6d 00 00       	call   c0010b71 <KePanic(char const*)>
c0009d80:	83 c4 10             	add    esp,0x10
c0009d83:	eb 9b                	jmp    c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d85:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d89:	e8 47 e0 ff ff       	call   c0007dd5 <Phys::allocatePage()>
c0009d8e:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c0009d94:	83 ec 0c             	sub    esp,0xc
c0009d97:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009d9b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d9f:	6a 01                	push   0x1
c0009da1:	e8 43 f8 ff ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c0009da6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009dad:	6a 01                	push   0x1
c0009daf:	50                   	push   eax
c0009db0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009db4:	52                   	push   edx
c0009db5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009db9:	51                   	push   ecx
c0009dba:	e8 3d 01 00 00       	call   c0009efc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009dbf:	83 c4 1c             	add    esp,0x1c
c0009dc2:	68 00 10 00 00       	push   0x1000
c0009dc7:	6a 00                	push   0x0
c0009dc9:	50                   	push   eax
c0009dca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dce:	e8 1d 67 ff ff       	call   c00004f0 <memset>
c0009dd3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009dd7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009dda:	e8 1e fb ff ff       	call   c00098fd <Virt::freeKernelVirtualPages(unsigned long)>
c0009ddf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009de3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0009ded:	0d 07 04 00 00       	or     eax,0x407
c0009df2:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0009df5:	e9 3b ff ff ff       	jmp    c0009d35 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c0009dfa <VAS::allocatePages(int, int)>:
c0009dfa:	55                   	push   ebp
c0009dfb:	57                   	push   edi
c0009dfc:	56                   	push   esi
c0009dfd:	53                   	push   ebx
c0009dfe:	83 ec 1c             	sub    esp,0x1c
c0009e01:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e05:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e09:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e0d:	75 75                	jne    c0009e84 <VAS::allocatePages(int, int)+0x8a>
c0009e0f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e12:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e16:	85 c0                	test   eax,eax
c0009e18:	74 49                	je     c0009e63 <VAS::allocatePages(int, int)+0x69>
c0009e1a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e1e:	89 d5                	mov    ebp,edx
c0009e20:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e24:	c1 e5 0c             	shl    ebp,0xc
c0009e27:	01 dd                	add    ebp,ebx
c0009e29:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e2c:	81 cf 00 04 00 00    	or     edi,0x400
c0009e32:	85 d2                	test   edx,edx
c0009e34:	7e 1b                	jle    c0009e51 <VAS::allocatePages(int, int)+0x57>
c0009e36:	e8 9a df ff ff       	call   c0007dd5 <Phys::allocatePage()>
c0009e3b:	57                   	push   edi
c0009e3c:	53                   	push   ebx
c0009e3d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e43:	50                   	push   eax
c0009e44:	56                   	push   esi
c0009e45:	e8 a8 fe ff ff       	call   c0009cf2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e4a:	83 c4 10             	add    esp,0x10
c0009e4d:	39 dd                	cmp    ebp,ebx
c0009e4f:	75 e5                	jne    c0009e36 <VAS::allocatePages(int, int)+0x3c>
c0009e51:	0f 20 d8             	mov    eax,cr3
c0009e54:	0f 22 d8             	mov    cr3,eax
c0009e57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e5b:	83 c4 1c             	add    esp,0x1c
c0009e5e:	5b                   	pop    ebx
c0009e5f:	5e                   	pop    esi
c0009e60:	5f                   	pop    edi
c0009e61:	5d                   	pop    ebp
c0009e62:	c3                   	ret    
c0009e63:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e67:	83 ec 0c             	sub    esp,0xc
c0009e6a:	68 84 04 02 c0       	push   0xc0020484
c0009e6f:	e8 fd 6c 00 00       	call   c0010b71 <KePanic(char const*)>
c0009e74:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e77:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009e7b:	83 c4 10             	add    esp,0x10
c0009e7e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e82:	eb 96                	jmp    c0009e1a <VAS::allocatePages(int, int)+0x20>
c0009e84:	83 ec 0c             	sub    esp,0xc
c0009e87:	52                   	push   edx
c0009e88:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009e8c:	e8 58 f7 ff ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c0009e91:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009e95:	83 c4 10             	add    esp,0x10
c0009e98:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009e9d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009ea1:	77 38                	ja     c0009edb <VAS::allocatePages(int, int)+0xe1>
c0009ea3:	85 d2                	test   edx,edx
c0009ea5:	7e aa                	jle    c0009e51 <VAS::allocatePages(int, int)+0x57>
c0009ea7:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009eab:	c1 e2 0c             	shl    edx,0xc
c0009eae:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009eb2:	81 cf 00 04 00 00    	or     edi,0x400
c0009eb8:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c0009ebb:	e8 15 df ff ff       	call   c0007dd5 <Phys::allocatePage()>
c0009ec0:	57                   	push   edi
c0009ec1:	53                   	push   ebx
c0009ec2:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ec8:	50                   	push   eax
c0009ec9:	56                   	push   esi
c0009eca:	e8 23 fe ff ff       	call   c0009cf2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009ecf:	83 c4 10             	add    esp,0x10
c0009ed2:	39 dd                	cmp    ebp,ebx
c0009ed4:	75 e5                	jne    c0009ebb <VAS::allocatePages(int, int)+0xc1>
c0009ed6:	e9 76 ff ff ff       	jmp    c0009e51 <VAS::allocatePages(int, int)+0x57>
c0009edb:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009ee0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ee6:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009eed:	74 b4                	je     c0009ea3 <VAS::allocatePages(int, int)+0xa9>
c0009eef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009ef3:	80 cc 01             	or     ah,0x1
c0009ef6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009efa:	eb a7                	jmp    c0009ea3 <VAS::allocatePages(int, int)+0xa9>

c0009efc <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009efc:	55                   	push   ebp
c0009efd:	57                   	push   edi
c0009efe:	56                   	push   esi
c0009eff:	53                   	push   ebx
c0009f00:	83 ec 1c             	sub    esp,0x1c
c0009f03:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009f07:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009f0b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009f0f:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009f13:	85 db                	test   ebx,ebx
c0009f15:	7e 2c                	jle    c0009f43 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c0009f17:	c1 e3 0c             	shl    ebx,0xc
c0009f1a:	8d 04 33             	lea    eax,[ebx+esi*1]
c0009f1d:	89 f3                	mov    ebx,esi
c0009f1f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009f23:	55                   	push   ebp
c0009f24:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0009f28:	29 f2                	sub    edx,esi
c0009f2a:	01 da                	add    edx,ebx
c0009f2c:	52                   	push   edx
c0009f2d:	53                   	push   ebx
c0009f2e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f34:	57                   	push   edi
c0009f35:	e8 b8 fd ff ff       	call   c0009cf2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f3a:	83 c4 10             	add    esp,0x10
c0009f3d:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0009f41:	75 e0                	jne    c0009f23 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c0009f43:	0f 20 d8             	mov    eax,cr3
c0009f46:	0f 22 d8             	mov    cr3,eax
c0009f49:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009f4d:	83 c4 1c             	add    esp,0x1c
c0009f50:	5b                   	pop    ebx
c0009f51:	5e                   	pop    esi
c0009f52:	5f                   	pop    edi
c0009f53:	5d                   	pop    ebp
c0009f54:	c3                   	ret    
c0009f55:	90                   	nop

c0009f56 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	53                   	push   ebx
c0009f5a:	83 ec 1c             	sub    esp,0x1c
c0009f5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f61:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f65:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009f69:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f6d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009f71:	09 d8                	or     eax,ebx
c0009f73:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f78:	75 4b                	jne    c0009fc5 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f7a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009f7d:	89 de                	mov    esi,ebx
c0009f7f:	c1 ee 16             	shr    esi,0x16
c0009f82:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0009f89:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0009f8d:	74 48                	je     c0009fd7 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0009f8f:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0009f94:	c1 eb 0a             	shr    ebx,0xa
c0009f97:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0009f9b:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0009f9f:	83 ff 01             	cmp    edi,0x1
c0009fa2:	19 c0                	sbb    eax,eax
c0009fa4:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009faa:	c1 e6 0c             	shl    esi,0xc
c0009fad:	25 00 00 c0 ff       	and    eax,0xffc00000
c0009fb2:	01 f3                	add    ebx,esi
c0009fb4:	09 ca                	or     edx,ecx
c0009fb6:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0009fbd:	83 c4 1c             	add    esp,0x1c
c0009fc0:	5b                   	pop    ebx
c0009fc1:	5e                   	pop    esi
c0009fc2:	5f                   	pop    edi
c0009fc3:	5d                   	pop    ebp
c0009fc4:	c3                   	ret    
c0009fc5:	83 ec 0c             	sub    esp,0xc
c0009fc8:	68 b0 04 02 c0       	push   0xc00204b0
c0009fcd:	e8 9f 6b 00 00       	call   c0010b71 <KePanic(char const*)>
c0009fd2:	83 c4 10             	add    esp,0x10
c0009fd5:	eb a3                	jmp    c0009f7a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c0009fd7:	e8 f9 dd ff ff       	call   c0007dd5 <Phys::allocatePage()>
c0009fdc:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c0009fe2:	83 ec 0c             	sub    esp,0xc
c0009fe5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009fe9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0009fed:	6a 01                	push   0x1
c0009fef:	e8 f5 f5 ff ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c0009ff4:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009ffb:	6a 01                	push   0x1
c0009ffd:	50                   	push   eax
c0009ffe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a002:	50                   	push   eax
c000a003:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a007:	51                   	push   ecx
c000a008:	e8 ef fe ff ff       	call   c0009efc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a00d:	83 c4 1c             	add    esp,0x1c
c000a010:	68 00 10 00 00       	push   0x1000
c000a015:	6a 00                	push   0x0
c000a017:	50                   	push   eax
c000a018:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a01c:	e8 cf 64 ff ff       	call   c00004f0 <memset>
c000a021:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a025:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a028:	e8 d0 f8 ff ff       	call   c00098fd <Virt::freeKernelVirtualPages(unsigned long)>
c000a02d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a031:	83 c4 10             	add    esp,0x10
c000a034:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a037:	81 ca 07 04 00 00    	or     edx,0x407
c000a03d:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c000a040:	e9 4a ff ff ff       	jmp    c0009f8f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c000a045:	90                   	nop

c000a046 <VAS::VAS(bool)>:
c000a046:	53                   	push   ebx
c000a047:	83 ec 28             	sub    esp,0x28
c000a04a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a04e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a052:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a056:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a05d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a061:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a068:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a06c:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a070:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a073:	e8 5d dd ff ff       	call   c0007dd5 <Phys::allocatePage()>
c000a078:	89 c2                	mov    edx,eax
c000a07a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a07e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a081:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000a087:	83 ec 0c             	sub    esp,0xc
c000a08a:	6a 01                	push   0x1
c000a08c:	e8 58 f5 ff ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c000a091:	83 c4 10             	add    esp,0x10
c000a094:	89 c2                	mov    edx,eax
c000a096:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a09a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a09d:	83 ec 0c             	sub    esp,0xc
c000a0a0:	6a 03                	push   0x3
c000a0a2:	6a 01                	push   0x1
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	53                   	push   ebx
c000a0a7:	e8 50 fe ff ff       	call   c0009efc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0ac:	83 c4 20             	add    esp,0x20
c000a0af:	89 c2                	mov    edx,eax
c000a0b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0b5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0b8:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0c0:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0c8:	7f 1d                	jg     c000a0e7 <VAS::VAS(bool)+0xa1>
c000a0ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0ce:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0d1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0d5:	c1 e2 02             	shl    edx,0x2
c000a0d8:	01 d0                	add    eax,edx
c000a0da:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a0e0:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a0e5:	eb d9                	jmp    c000a0c0 <VAS::VAS(bool)+0x7a>
c000a0e7:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a0ef:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a0f7:	7f 7e                	jg     c000a177 <VAS::VAS(bool)+0x131>
c000a0f9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0fd:	2d 00 02 00 00       	sub    eax,0x200
c000a102:	c1 e0 0c             	shl    eax,0xc
c000a105:	83 c8 05             	or     eax,0x5
c000a108:	89 c2                	mov    edx,eax
c000a10a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a10f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a115:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a11b:	83 e0 10             	and    eax,0x10
c000a11e:	0f b6 c0             	movzx  eax,al
c000a121:	85 c0                	test   eax,eax
c000a123:	74 07                	je     c000a12c <VAS::VAS(bool)+0xe6>
c000a125:	b8 00 01 00 00       	mov    eax,0x100
c000a12a:	eb 05                	jmp    c000a131 <VAS::VAS(bool)+0xeb>
c000a12c:	b8 00 00 00 00       	mov    eax,0x0
c000a131:	09 d0                	or     eax,edx
c000a133:	89 c1                	mov    ecx,eax
c000a135:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a139:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a13c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a140:	c1 e2 02             	shl    edx,0x2
c000a143:	01 d0                	add    eax,edx
c000a145:	89 ca                	mov    edx,ecx
c000a147:	89 10                	mov    DWORD PTR [eax],edx
c000a149:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a14d:	2d 40 03 00 00       	sub    eax,0x340
c000a152:	83 f8 7f             	cmp    eax,0x7f
c000a155:	77 16                	ja     c000a16d <VAS::VAS(bool)+0x127>
c000a157:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a15b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a15e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a162:	c1 e2 02             	shl    edx,0x2
c000a165:	01 d0                	add    eax,edx
c000a167:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a16d:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a172:	e9 78 ff ff ff       	jmp    c000a0ef <VAS::VAS(bool)+0xa9>
c000a177:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a17c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a182:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a188:	83 e0 10             	and    eax,0x10
c000a18b:	0f b6 c0             	movzx  eax,al
c000a18e:	85 c0                	test   eax,eax
c000a190:	74 07                	je     c000a199 <VAS::VAS(bool)+0x153>
c000a192:	b8 03 41 00 00       	mov    eax,0x4103
c000a197:	eb 05                	jmp    c000a19e <VAS::VAS(bool)+0x158>
c000a199:	b8 03 40 00 00       	mov    eax,0x4003
c000a19e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1a2:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1a5:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1ab:	89 02                	mov    DWORD PTR [edx],eax
c000a1ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1b1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1b4:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a1b9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1bf:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1c5:	83 e0 10             	and    eax,0x10
c000a1c8:	0f b6 c0             	movzx  eax,al
c000a1cb:	85 c0                	test   eax,eax
c000a1cd:	74 07                	je     c000a1d6 <VAS::VAS(bool)+0x190>
c000a1cf:	b8 00 01 00 00       	mov    eax,0x100
c000a1d4:	eb 05                	jmp    c000a1db <VAS::VAS(bool)+0x195>
c000a1d6:	b8 00 00 00 00       	mov    eax,0x0
c000a1db:	09 c2                	or     edx,eax
c000a1dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1e1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a1e4:	05 fc 0f 00 00       	add    eax,0xffc
c000a1e9:	83 ca 03             	or     edx,0x3
c000a1ec:	89 10                	mov    DWORD PTR [eax],edx
c000a1ee:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a1f3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1f9:	83 ec 0c             	sub    esp,0xc
c000a1fc:	50                   	push   eax
c000a1fd:	e8 1a 21 00 00       	call   c000c31c <Device::getName()>
c000a202:	83 c4 10             	add    esp,0x10
c000a205:	83 ec 08             	sub    esp,0x8
c000a208:	68 80 06 02 c0       	push   0xc0020680
c000a20d:	50                   	push   eax
c000a20e:	e8 6d 65 ff ff       	call   c0000780 <strcmp>
c000a213:	83 c4 10             	add    esp,0x10
c000a216:	85 c0                	test   eax,eax
c000a218:	0f 94 c0             	sete   al
c000a21b:	0f b6 c0             	movzx  eax,al
c000a21e:	85 c0                	test   eax,eax
c000a220:	74 68                	je     c000a28a <VAS::VAS(bool)+0x244>
c000a222:	fa                   	cli    
c000a223:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a228:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a22e:	05 7c 09 00 00       	add    eax,0x97c
c000a233:	83 ec 0c             	sub    esp,0xc
c000a236:	50                   	push   eax
c000a237:	e8 8a d3 ff ff       	call   c00075c6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a23c:	83 c4 10             	add    esp,0x10
c000a23f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a244:	89 c3                	mov    ebx,eax
c000a246:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a24b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a251:	05 7c 09 00 00       	add    eax,0x97c
c000a256:	83 ec 0c             	sub    esp,0xc
c000a259:	50                   	push   eax
c000a25a:	e8 67 d3 ff ff       	call   c00075c6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a25f:	83 c4 10             	add    esp,0x10
c000a262:	83 ec 08             	sub    esp,0x8
c000a265:	50                   	push   eax
c000a266:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a26a:	e8 6f f6 ff ff       	call   c00098de <VAS::getPageTableEntry(unsigned long)>
c000a26f:	83 c4 10             	add    esp,0x10
c000a272:	8b 00                	mov    eax,DWORD PTR [eax]
c000a274:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a279:	6a 11                	push   0x11
c000a27b:	53                   	push   ebx
c000a27c:	50                   	push   eax
c000a27d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a281:	e8 6c fa ff ff       	call   c0009cf2 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a286:	83 c4 10             	add    esp,0x10
c000a289:	fb                   	sti    
c000a28a:	90                   	nop
c000a28b:	83 c4 28             	add    esp,0x28
c000a28e:	5b                   	pop    ebx
c000a28f:	c3                   	ret    

c000a290 <VAS::evict(unsigned long)>:
c000a290:	55                   	push   ebp
c000a291:	57                   	push   edi
c000a292:	56                   	push   esi
c000a293:	53                   	push   ebx
c000a294:	83 ec 1c             	sub    esp,0x1c
c000a297:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a29b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a29f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2a3:	e8 96 f4 ff ff       	call   c000973e <Virt::allocateSwapfilePage()>
c000a2a8:	89 c7                	mov    edi,eax
c000a2aa:	a1 6c 28 02 c0       	mov    eax,ds:0xc002286c
c000a2af:	85 c0                	test   eax,eax
c000a2b1:	7e 40                	jle    c000a2f3 <VAS::evict(unsigned long)+0x63>
c000a2b3:	89 ee                	mov    esi,ebp
c000a2b5:	31 db                	xor    ebx,ebx
c000a2b7:	83 ec 0c             	sub    esp,0xc
c000a2ba:	57                   	push   edi
c000a2bb:	e8 68 f4 ff ff       	call   c0009728 <Virt::swapIDToSector(unsigned long)>
c000a2c0:	31 d2                	xor    edx,edx
c000a2c2:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2c5:	81 c6 00 02 00 00    	add    esi,0x200
c000a2cb:	6a 01                	push   0x1
c000a2cd:	52                   	push   edx
c000a2ce:	01 d8                	add    eax,ebx
c000a2d0:	83 c3 01             	add    ebx,0x1
c000a2d3:	50                   	push   eax
c000a2d4:	0f be 05 78 28 02 c0 	movsx  eax,BYTE PTR ds:0xc0022878
c000a2db:	8b 04 85 1c 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ce4]
c000a2e2:	50                   	push   eax
c000a2e3:	e8 f6 31 00 00       	call   c000d4de <LogicalDisk::write(unsigned long long, int, void*)>
c000a2e8:	83 c4 20             	add    esp,0x20
c000a2eb:	39 1d 6c 28 02 c0    	cmp    DWORD PTR ds:0xc002286c,ebx
c000a2f1:	7f c4                	jg     c000a2b7 <VAS::evict(unsigned long)+0x27>
c000a2f3:	c1 e7 0c             	shl    edi,0xc
c000a2f6:	83 ec 08             	sub    esp,0x8
c000a2f9:	55                   	push   ebp
c000a2fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a2fe:	50                   	push   eax
c000a2ff:	e8 da f5 ff ff       	call   c00098de <VAS::getPageTableEntry(unsigned long)>
c000a304:	8b 10                	mov    edx,DWORD PTR [eax]
c000a306:	89 d3                	mov    ebx,edx
c000a308:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a30e:	09 d7                	or     edi,edx
c000a310:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a316:	89 38                	mov    DWORD PTR [eax],edi
c000a318:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a31b:	8b 15 a8 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fa8
c000a321:	83 c2 01             	add    edx,0x1
c000a324:	89 15 a8 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa8,edx
c000a32a:	e8 3d da ff ff       	call   c0007d6c <Phys::freePage(unsigned long)>
c000a32f:	0f 20 d8             	mov    eax,cr3
c000a332:	0f 22 d8             	mov    cr3,eax
c000a335:	8b 0d a8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fa8
c000a33b:	51                   	push   ecx
c000a33c:	55                   	push   ebp
c000a33d:	53                   	push   ebx
c000a33e:	68 d4 04 02 c0       	push   0xc00204d4
c000a343:	e8 b6 05 00 00       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c000a348:	a1 a4 5f 02 c0       	mov    eax,ds:0xc0025fa4
c000a34d:	c7 44 24 50 8e 06 02 c0 	mov    DWORD PTR [esp+0x50],0xc002068e
c000a355:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a359:	8d 50 01             	lea    edx,[eax+0x1]
c000a35c:	89 15 a4 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa4,edx
c000a362:	83 c4 3c             	add    esp,0x3c
c000a365:	5b                   	pop    ebx
c000a366:	5e                   	pop    esi
c000a367:	5f                   	pop    edi
c000a368:	5d                   	pop    ebp
c000a369:	e9 90 05 00 00       	jmp    c000a8fe <Dbg::kprintf(char const*, ...)>

c000a36e <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a36e:	55                   	push   ebp
c000a36f:	57                   	push   edi
c000a370:	56                   	push   esi
c000a371:	53                   	push   ebx
c000a372:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a378:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c000a37f:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c000a385:	77 78                	ja     c000a3ff <VAS::tryLoadBackOffDisk(unsigned long)+0x91>
c000a387:	83 ec 08             	sub    esp,0x8
c000a38a:	53                   	push   ebx
c000a38b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a391:	68 b1 06 02 c0       	push   0xc00206b1
c000a396:	e8 63 05 00 00       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c000a39b:	58                   	pop    eax
c000a39c:	5a                   	pop    edx
c000a39d:	53                   	push   ebx
c000a39e:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3a5:	51                   	push   ecx
c000a3a6:	e8 33 f5 ff ff       	call   c00098de <VAS::getPageTableEntry(unsigned long)>
c000a3ab:	83 c4 10             	add    esp,0x10
c000a3ae:	85 c0                	test   eax,eax
c000a3b0:	89 c5                	mov    ebp,eax
c000a3b2:	0f 95 c0             	setne  al
c000a3b5:	85 db                	test   ebx,ebx
c000a3b7:	0f 95 c2             	setne  dl
c000a3ba:	21 d0                	and    eax,edx
c000a3bc:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a3c0:	a8 01                	test   al,0x1
c000a3c2:	75 0f                	jne    c000a3d3 <VAS::tryLoadBackOffDisk(unsigned long)+0x65>
c000a3c4:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a3c8:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3ce:	5b                   	pop    ebx
c000a3cf:	5e                   	pop    esi
c000a3d0:	5f                   	pop    edi
c000a3d1:	5d                   	pop    ebp
c000a3d2:	c3                   	ret    
c000a3d3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a3d6:	f6 c4 02             	test   ah,0x2
c000a3d9:	75 39                	jne    c000a414 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c000a3db:	89 c2                	mov    edx,eax
c000a3dd:	81 e2 01 04 00 00    	and    edx,0x401
c000a3e3:	81 fa 00 04 00 00    	cmp    edx,0x400
c000a3e9:	74 73                	je     c000a45e <VAS::tryLoadBackOffDisk(unsigned long)+0xf0>
c000a3eb:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c000a3f0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a3f4:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3fa:	5b                   	pop    ebx
c000a3fb:	5e                   	pop    esi
c000a3fc:	5f                   	pop    edi
c000a3fd:	5d                   	pop    ebp
c000a3fe:	c3                   	ret    
c000a3ff:	83 ec 0c             	sub    esp,0xc
c000a402:	68 9f 06 02 c0       	push   0xc002069f
c000a407:	e8 65 67 00 00       	call   c0010b71 <KePanic(char const*)>
c000a40c:	83 c4 10             	add    esp,0x10
c000a40f:	e9 73 ff ff ff       	jmp    c000a387 <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c000a414:	83 ec 0c             	sub    esp,0xc
c000a417:	89 de                	mov    esi,ebx
c000a419:	68 04 05 02 c0       	push   0xc0020504
c000a41e:	e8 db 04 00 00       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c000a423:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a427:	e8 a9 d9 ff ff       	call   c0007dd5 <Phys::allocatePage()>
c000a42c:	ba 00 10 00 00       	mov    edx,0x1000
c000a431:	89 d1                	mov    ecx,edx
c000a433:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a435:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000a438:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a43e:	09 c8                	or     eax,ecx
c000a440:	83 c8 02             	or     eax,0x2
c000a443:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000a446:	0f 20 d8             	mov    eax,cr3
c000a449:	0f 22 d8             	mov    cr3,eax
c000a44c:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a450:	89 df                	mov    edi,ebx
c000a452:	89 d1                	mov    ecx,edx
c000a454:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a456:	83 c4 10             	add    esp,0x10
c000a459:	e9 66 ff ff ff       	jmp    c000a3c4 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c000a45e:	c1 e8 0c             	shr    eax,0xc
c000a461:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a465:	e8 6b d9 ff ff       	call   c0007dd5 <Phys::allocatePage()>
c000a46a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000a46d:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a473:	09 c2                	or     edx,eax
c000a475:	81 ca 01 08 00 00    	or     edx,0x801
c000a47b:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c000a47e:	a1 6c 28 02 c0       	mov    eax,ds:0xc002286c
c000a483:	85 c0                	test   eax,eax
c000a485:	7e 44                	jle    c000a4cb <VAS::tryLoadBackOffDisk(unsigned long)+0x15d>
c000a487:	89 df                	mov    edi,ebx
c000a489:	31 f6                	xor    esi,esi
c000a48b:	83 ec 0c             	sub    esp,0xc
c000a48e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a492:	51                   	push   ecx
c000a493:	e8 90 f2 ff ff       	call   c0009728 <Virt::swapIDToSector(unsigned long)>
c000a498:	31 d2                	xor    edx,edx
c000a49a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a49d:	81 c7 00 02 00 00    	add    edi,0x200
c000a4a3:	6a 01                	push   0x1
c000a4a5:	52                   	push   edx
c000a4a6:	01 f0                	add    eax,esi
c000a4a8:	83 c6 01             	add    esi,0x1
c000a4ab:	50                   	push   eax
c000a4ac:	0f be 05 78 28 02 c0 	movsx  eax,BYTE PTR ds:0xc0022878
c000a4b3:	8b 2c 85 1c 83 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd7ce4]
c000a4ba:	55                   	push   ebp
c000a4bb:	e8 b2 2f 00 00       	call   c000d472 <LogicalDisk::read(unsigned long long, int, void*)>
c000a4c0:	83 c4 20             	add    esp,0x20
c000a4c3:	39 35 6c 28 02 c0    	cmp    DWORD PTR ds:0xc002286c,esi
c000a4c9:	7f c0                	jg     c000a48b <VAS::tryLoadBackOffDisk(unsigned long)+0x11d>
c000a4cb:	a1 a8 5f 02 c0       	mov    eax,ds:0xc0025fa8
c000a4d0:	83 ec 04             	sub    esp,0x4
c000a4d3:	83 e8 01             	sub    eax,0x1
c000a4d6:	50                   	push   eax
c000a4d7:	53                   	push   ebx
c000a4d8:	68 c4 06 02 c0       	push   0xc00206c4
c000a4dd:	a3 a8 5f 02 c0       	mov    ds:0xc0025fa8,eax
c000a4e2:	e8 17 04 00 00       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c000a4e7:	58                   	pop    eax
c000a4e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a4ec:	52                   	push   edx
c000a4ed:	e8 13 f2 ff ff       	call   c0009705 <Virt::freeSwapfilePage(unsigned long)>
c000a4f2:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000a4f7:	83 c4 10             	add    esp,0x10
c000a4fa:	83 e8 01             	sub    eax,0x1
c000a4fd:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c000a502:	85 c0                	test   eax,eax
c000a504:	75 01                	jne    c000a507 <VAS::tryLoadBackOffDisk(unsigned long)+0x199>
c000a506:	fb                   	sti    
c000a507:	0f 20 d8             	mov    eax,cr3
c000a50a:	0f 22 d8             	mov    cr3,eax
c000a50d:	e9 b2 fe ff ff       	jmp    c000a3c4 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>

c000a512 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a512:	55                   	push   ebp
c000a513:	57                   	push   edi
c000a514:	56                   	push   esi
c000a515:	53                   	push   ebx
c000a516:	83 ec 28             	sub    esp,0x28
c000a519:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a51d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a521:	50                   	push   eax
c000a522:	e8 c2 f0 ff ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c000a527:	83 c4 0c             	add    esp,0xc
c000a52a:	6a 07                	push   0x7
c000a52c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a530:	52                   	push   edx
c000a531:	89 c5                	mov    ebp,eax
c000a533:	53                   	push   ebx
c000a534:	e8 c1 f8 ff ff       	call   c0009dfa <VAS::allocatePages(int, int)>
c000a539:	83 c4 10             	add    esp,0x10
c000a53c:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a540:	89 c7                	mov    edi,eax
c000a542:	85 c9                	test   ecx,ecx
c000a544:	74 2f                	je     c000a575 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a546:	31 f6                	xor    esi,esi
c000a548:	e8 88 d8 ff ff       	call   c0007dd5 <Phys::allocatePage()>
c000a54d:	83 c6 01             	add    esi,0x1
c000a550:	6a 03                	push   0x3
c000a552:	55                   	push   ebp
c000a553:	50                   	push   eax
c000a554:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a558:	53                   	push   ebx
c000a559:	e8 94 f7 ff ff       	call   c0009cf2 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a55e:	6a 07                	push   0x7
c000a560:	57                   	push   edi
c000a561:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a565:	50                   	push   eax
c000a566:	53                   	push   ebx
c000a567:	e8 86 f7 ff ff       	call   c0009cf2 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a56c:	83 c4 20             	add    esp,0x20
c000a56f:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c000a573:	75 d3                	jne    c000a548 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a575:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a579:	89 28                	mov    DWORD PTR [eax],ebp
c000a57b:	83 c4 1c             	add    esp,0x1c
c000a57e:	89 f8                	mov    eax,edi
c000a580:	5b                   	pop    ebx
c000a581:	5e                   	pop    esi
c000a582:	5f                   	pop    edi
c000a583:	5d                   	pop    ebp
c000a584:	c3                   	ret    
c000a585:	90                   	nop

c000a586 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a586:	53                   	push   ebx
c000a587:	83 ec 14             	sub    esp,0x14
c000a58a:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a58e:	68 24 05 02 c0       	push   0xc0020524
c000a593:	e8 66 03 00 00       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c000a598:	c7 04 24 84 05 02 c0 	mov    DWORD PTR [esp],0xc0020584
c000a59f:	e8 5a 03 00 00       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c000a5a4:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5a8:	83 c4 18             	add    esp,0x18
c000a5ab:	5b                   	pop    ebx
c000a5ac:	e9 4c f3 ff ff       	jmp    c00098fd <Virt::freeKernelVirtualPages(unsigned long)>
c000a5b1:	90                   	nop

c000a5b2 <VAS::scanForEviction()>:
c000a5b2:	57                   	push   edi
c000a5b3:	56                   	push   esi
c000a5b4:	31 f6                	xor    esi,esi
c000a5b6:	53                   	push   ebx
c000a5b7:	83 ec 10             	sub    esp,0x10
c000a5ba:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5be:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5c1:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5c7:	75 0e                	jne    c000a5d7 <VAS::scanForEviction()+0x25>
c000a5c9:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5cc:	89 da                	mov    edx,ebx
c000a5ce:	c1 ea 16             	shr    edx,0x16
c000a5d1:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5d5:	74 57                	je     c000a62e <VAS::scanForEviction()+0x7c>
c000a5d7:	53                   	push   ebx
c000a5d8:	57                   	push   edi
c000a5d9:	e8 00 f3 ff ff       	call   c00098de <VAS::getPageTableEntry(unsigned long)>
c000a5de:	5a                   	pop    edx
c000a5df:	59                   	pop    ecx
c000a5e0:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5e2:	89 d1                	mov    ecx,edx
c000a5e4:	c1 e9 0c             	shr    ecx,0xc
c000a5e7:	74 10                	je     c000a5f9 <VAS::scanForEviction()+0x47>
c000a5e9:	89 d1                	mov    ecx,edx
c000a5eb:	81 e1 01 08 00 00    	and    ecx,0x801
c000a5f1:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a5f7:	74 40                	je     c000a639 <VAS::scanForEviction()+0x87>
c000a5f9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a5ff:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a605:	76 2d                	jbe    c000a634 <VAS::scanForEviction()+0x82>
c000a607:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a60e:	83 c6 01             	add    esi,0x1
c000a611:	83 fe 03             	cmp    esi,0x3
c000a614:	74 32                	je     c000a648 <VAS::scanForEviction()+0x96>
c000a616:	31 db                	xor    ebx,ebx
c000a618:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a61e:	75 b7                	jne    c000a5d7 <VAS::scanForEviction()+0x25>
c000a620:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a623:	89 da                	mov    edx,ebx
c000a625:	c1 ea 16             	shr    edx,0x16
c000a628:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a62c:	75 a9                	jne    c000a5d7 <VAS::scanForEviction()+0x25>
c000a62e:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a634:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a637:	eb 88                	jmp    c000a5c1 <VAS::scanForEviction()+0xf>
c000a639:	f6 c2 20             	test   dl,0x20
c000a63c:	74 13                	je     c000a651 <VAS::scanForEviction()+0x9f>
c000a63e:	83 e2 df             	and    edx,0xffffffdf
c000a641:	89 10                	mov    DWORD PTR [eax],edx
c000a643:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a646:	eb b1                	jmp    c000a5f9 <VAS::scanForEviction()+0x47>
c000a648:	83 c4 10             	add    esp,0x10
c000a64b:	31 c0                	xor    eax,eax
c000a64d:	5b                   	pop    ebx
c000a64e:	5e                   	pop    esi
c000a64f:	5f                   	pop    edi
c000a650:	c3                   	ret    
c000a651:	89 d0                	mov    eax,edx
c000a653:	83 ec 08             	sub    esp,0x8
c000a656:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a65b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a65f:	53                   	push   ebx
c000a660:	68 d9 06 02 c0       	push   0xc00206d9
c000a665:	e8 94 02 00 00       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c000a66a:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a66d:	58                   	pop    eax
c000a66e:	5a                   	pop    edx
c000a66f:	51                   	push   ecx
c000a670:	57                   	push   edi
c000a671:	e8 1a fc ff ff       	call   c000a290 <VAS::evict(unsigned long)>
c000a676:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a679:	5b                   	pop    ebx
c000a67a:	5e                   	pop    esi
c000a67b:	50                   	push   eax
c000a67c:	68 ed 06 02 c0       	push   0xc00206ed
c000a681:	e8 78 02 00 00       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c000a686:	58                   	pop    eax
c000a687:	5a                   	pop    edx
c000a688:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a68c:	50                   	push   eax
c000a68d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a691:	68 00 07 02 c0       	push   0xc0020700
c000a696:	e8 63 02 00 00       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c000a69b:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a69e:	83 c4 10             	add    esp,0x10
c000a6a1:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6a7:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6ae:	83 c4 10             	add    esp,0x10
c000a6b1:	5b                   	pop    ebx
c000a6b2:	5e                   	pop    esi
c000a6b3:	5f                   	pop    edi
c000a6b4:	c3                   	ret    

c000a6b5 <mapVASFirstTime>:
c000a6b5:	55                   	push   ebp
c000a6b6:	57                   	push   edi
c000a6b7:	56                   	push   esi
c000a6b8:	53                   	push   ebx
c000a6b9:	83 ec 0c             	sub    esp,0xc
c000a6bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6c1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6c4:	83 fa 01             	cmp    edx,0x1
c000a6c7:	0f 84 cb 00 00 00    	je     c000a798 <mapVASFirstTime+0xe3>
c000a6cd:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6d0:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6d5:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6da:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6dd:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6e3:	c1 e5 15             	shl    ebp,0x15
c000a6e6:	29 eb                	sub    ebx,ebp
c000a6e8:	29 ef                	sub    edi,ebp
c000a6ea:	e8 e6 d6 ff ff       	call   c0007dd5 <Phys::allocatePage()>
c000a6ef:	83 ec 0c             	sub    esp,0xc
c000a6f2:	68 03 04 00 00       	push   0x403
c000a6f7:	6a 01                	push   0x1
c000a6f9:	53                   	push   ebx
c000a6fa:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a700:	50                   	push   eax
c000a701:	56                   	push   esi
c000a702:	e8 f5 f7 ff ff       	call   c0009efc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a707:	83 c4 20             	add    esp,0x20
c000a70a:	39 fb                	cmp    ebx,edi
c000a70c:	75 dc                	jne    c000a6ea <mapVASFirstTime+0x35>
c000a70e:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a713:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a718:	29 eb                	sub    ebx,ebp
c000a71a:	29 ef                	sub    edi,ebp
c000a71c:	e8 b4 d6 ff ff       	call   c0007dd5 <Phys::allocatePage()>
c000a721:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a725:	83 fa 01             	cmp    edx,0x1
c000a728:	19 d2                	sbb    edx,edx
c000a72a:	83 ec 0c             	sub    esp,0xc
c000a72d:	83 e2 04             	and    edx,0x4
c000a730:	81 c2 03 04 00 00    	add    edx,0x403
c000a736:	52                   	push   edx
c000a737:	6a 01                	push   0x1
c000a739:	53                   	push   ebx
c000a73a:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a740:	50                   	push   eax
c000a741:	56                   	push   esi
c000a742:	e8 b5 f7 ff ff       	call   c0009efc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a747:	83 c4 20             	add    esp,0x20
c000a74a:	39 df                	cmp    edi,ebx
c000a74c:	75 ce                	jne    c000a71c <mapVASFirstTime+0x67>
c000a74e:	83 ec 0c             	sub    esp,0xc
c000a751:	bb 7c 50 02 c0       	mov    ebx,0xc002507c
c000a756:	6a 04                	push   0x4
c000a758:	81 eb 00 40 02 c0    	sub    ebx,0xc0024000
c000a75e:	6a ff                	push   0xffffffff
c000a760:	c1 eb 0c             	shr    ebx,0xc
c000a763:	53                   	push   ebx
c000a764:	68 00 40 02 c0       	push   0xc0024000
c000a769:	56                   	push   esi
c000a76a:	e8 09 f3 ff ff       	call   c0009a78 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a76f:	83 c4 14             	add    esp,0x14
c000a772:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c000a777:	6a 04                	push   0x4
c000a779:	6a ff                	push   0xffffffff
c000a77b:	53                   	push   ebx
c000a77c:	68 00 40 02 c0       	push   0xc0024000
c000a781:	50                   	push   eax
c000a782:	e8 f1 f2 ff ff       	call   c0009a78 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a787:	0f 20 d8             	mov    eax,cr3
c000a78a:	0f 22 d8             	mov    cr3,eax
c000a78d:	83 c4 20             	add    esp,0x20
c000a790:	83 c4 0c             	add    esp,0xc
c000a793:	5b                   	pop    ebx
c000a794:	5e                   	pop    esi
c000a795:	5f                   	pop    edi
c000a796:	5d                   	pop    ebp
c000a797:	c3                   	ret    
c000a798:	83 ec 0c             	sub    esp,0xc
c000a79b:	68 0d 07 02 c0       	push   0xc002070d
c000a7a0:	e8 59 01 00 00       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c000a7a5:	83 c4 10             	add    esp,0x10
c000a7a8:	83 c4 0c             	add    esp,0xc
c000a7ab:	5b                   	pop    ebx
c000a7ac:	5e                   	pop    esi
c000a7ad:	5f                   	pop    edi
c000a7ae:	5d                   	pop    ebp
c000a7af:	c3                   	ret    

c000a7b0 <__cxa_atexit>:
c000a7b0:	31 c0                	xor    eax,eax
c000a7b2:	c3                   	ret    

c000a7b3 <__cxa_finalize>:
c000a7b3:	c3                   	ret    

c000a7b4 <__stack_chk_fail>:
c000a7b4:	55                   	push   ebp
c000a7b5:	89 e5                	mov    ebp,esp
c000a7b7:	83 ec 10             	sub    esp,0x10
c000a7ba:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7bd:	68 26 07 02 c0       	push   0xc0020726
c000a7c2:	e8 37 01 00 00       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c000a7c7:	58                   	pop    eax
c000a7c8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7cb:	5a                   	pop    edx
c000a7cc:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7cf:	68 26 07 02 c0       	push   0xc0020726
c000a7d4:	e8 25 01 00 00       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c000a7d9:	c7 04 24 2e 07 02 c0 	mov    DWORD PTR [esp],0xc002072e
c000a7e0:	e8 8c 63 00 00       	call   c0010b71 <KePanic(char const*)>
c000a7e5:	83 c4 10             	add    esp,0x10
c000a7e8:	c9                   	leave  
c000a7e9:	c3                   	ret    

c000a7ea <__cxa_pure_virtual>:
c000a7ea:	83 ec 18             	sub    esp,0x18
c000a7ed:	68 46 07 02 c0       	push   0xc0020746
c000a7f2:	e8 7a 63 00 00       	call   c0010b71 <KePanic(char const*)>
c000a7f7:	83 c4 1c             	add    esp,0x1c
c000a7fa:	c3                   	ret    

c000a7fb <operator new[](unsigned long)>:
c000a7fb:	e9 cb d2 ff ff       	jmp    c0007acb <malloc>

c000a800 <operator delete(void*, unsigned long)>:
c000a800:	e9 e6 d2 ff ff       	jmp    c0007aeb <rfree>

c000a805 <operator delete[](void*)>:
c000a805:	e9 e1 d2 ff ff       	jmp    c0007aeb <rfree>

c000a80a <operator delete[](void*, unsigned long)>:
c000a80a:	e9 dc d2 ff ff       	jmp    c0007aeb <rfree>

c000a80f <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a80f:	55                   	push   ebp
c000a810:	57                   	push   edi
c000a811:	56                   	push   esi
c000a812:	53                   	push   ebx
c000a813:	83 ec 20             	sub    esp,0x20
c000a816:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a81a:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c000a822:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a826:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c000a82e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a832:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c000a83a:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c000a842:	89 f7                	mov    edi,esi
c000a844:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a849:	89 eb                	mov    ebx,ebp
c000a84b:	eb 02                	jmp    c000a84f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c000a84d:	89 c7                	mov    edi,eax
c000a84f:	31 d2                	xor    edx,edx
c000a851:	89 f8                	mov    eax,edi
c000a853:	f7 f1                	div    ecx
c000a855:	83 c3 01             	add    ebx,0x1
c000a858:	39 cf                	cmp    edi,ecx
c000a85a:	73 f1                	jae    c000a84d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c000a85c:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a85f:	eb 02                	jmp    c000a863 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c000a861:	89 c6                	mov    esi,eax
c000a863:	31 d2                	xor    edx,edx
c000a865:	89 f0                	mov    eax,esi
c000a867:	f7 f1                	div    ecx
c000a869:	83 eb 01             	sub    ebx,0x1
c000a86c:	39 ce                	cmp    esi,ecx
c000a86e:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a872:	88 13                	mov    BYTE PTR [ebx],dl
c000a874:	73 eb                	jae    c000a861 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c000a876:	83 c4 20             	add    esp,0x20
c000a879:	89 e8                	mov    eax,ebp
c000a87b:	5b                   	pop    ebx
c000a87c:	5e                   	pop    esi
c000a87d:	5f                   	pop    edi
c000a87e:	5d                   	pop    ebp
c000a87f:	c3                   	ret    

c000a880 <Dbg::logc(char)>:
c000a880:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a887:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a88b:	75 12                	jne    c000a89f <Dbg::logc(char)+0x1f>
c000a88d:	ba fd 03 00 00       	mov    edx,0x3fd
c000a892:	ec                   	in     al,dx
c000a893:	a8 20                	test   al,0x20
c000a895:	74 fb                	je     c000a892 <Dbg::logc(char)+0x12>
c000a897:	ba f8 03 00 00       	mov    edx,0x3f8
c000a89c:	88 c8                	mov    al,cl
c000a89e:	ee                   	out    dx,al
c000a89f:	c3                   	ret    

c000a8a0 <Dbg::logs(char*)>:
c000a8a0:	53                   	push   ebx
c000a8a1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8a5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8a8:	85 c0                	test   eax,eax
c000a8aa:	74 11                	je     c000a8bd <Dbg::logs(char*)+0x1d>
c000a8ac:	50                   	push   eax
c000a8ad:	83 c3 01             	add    ebx,0x1
c000a8b0:	e8 cb ff ff ff       	call   c000a880 <Dbg::logc(char)>
c000a8b5:	58                   	pop    eax
c000a8b6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8b9:	85 c0                	test   eax,eax
c000a8bb:	75 ef                	jne    c000a8ac <Dbg::logs(char*)+0xc>
c000a8bd:	5b                   	pop    ebx
c000a8be:	c3                   	ret    

c000a8bf <Dbg::logWriteInt(unsigned int)>:
c000a8bf:	83 ec 10             	sub    esp,0x10
c000a8c2:	6a 0a                	push   0xa
c000a8c4:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8c8:	50                   	push   eax
c000a8c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8cd:	50                   	push   eax
c000a8ce:	e8 3c ff ff ff       	call   c000a80f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a8d3:	50                   	push   eax
c000a8d4:	e8 c7 ff ff ff       	call   c000a8a0 <Dbg::logs(char*)>
c000a8d9:	83 c4 20             	add    esp,0x20
c000a8dc:	c3                   	ret    

c000a8dd <Dbg::logWriteIntBase(unsigned int, int)>:
c000a8dd:	83 ec 10             	sub    esp,0x10
c000a8e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a8e4:	50                   	push   eax
c000a8e5:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8e9:	50                   	push   eax
c000a8ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a8ee:	52                   	push   edx
c000a8ef:	e8 1b ff ff ff       	call   c000a80f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a8f4:	50                   	push   eax
c000a8f5:	e8 a6 ff ff ff       	call   c000a8a0 <Dbg::logs(char*)>
c000a8fa:	83 c4 20             	add    esp,0x20
c000a8fd:	c3                   	ret    

c000a8fe <Dbg::kprintf(char const*, ...)>:
c000a8fe:	55                   	push   ebp
c000a8ff:	57                   	push   edi
c000a900:	56                   	push   esi
c000a901:	53                   	push   ebx
c000a902:	83 ec 0c             	sub    esp,0xc
c000a905:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a90c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a910:	74 08                	je     c000a91a <Dbg::kprintf(char const*, ...)+0x1c>
c000a912:	83 c4 0c             	add    esp,0xc
c000a915:	5b                   	pop    ebx
c000a916:	5e                   	pop    esi
c000a917:	5f                   	pop    edi
c000a918:	5d                   	pop    ebp
c000a919:	c3                   	ret    
c000a91a:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a91e:	31 ff                	xor    edi,edi
c000a920:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a924:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a927:	85 c0                	test   eax,eax
c000a929:	74 e7                	je     c000a912 <Dbg::kprintf(char const*, ...)+0x14>
c000a92b:	8d 77 01             	lea    esi,[edi+0x1]
c000a92e:	83 f8 25             	cmp    eax,0x25
c000a931:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a934:	75 47                	jne    c000a97d <Dbg::kprintf(char const*, ...)+0x7f>
c000a936:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a939:	83 c7 02             	add    edi,0x2
c000a93c:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a93f:	83 e8 25             	sub    eax,0x25
c000a942:	0f b6 c0             	movzx  eax,al
c000a945:	83 f8 53             	cmp    eax,0x53
c000a948:	0f 87 ce 00 00 00    	ja     c000aa1c <Dbg::kprintf(char const*, ...)+0x11e>
c000a94e:	ff 24 85 5c 07 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf8a4]
c000a955:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a959:	89 c8                	mov    eax,ecx
c000a95b:	83 c1 04             	add    ecx,0x4
c000a95e:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a962:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a964:	55                   	push   ebp
c000a965:	e8 55 ff ff ff       	call   c000a8bf <Dbg::logWriteInt(unsigned int)>
c000a96a:	58                   	pop    eax
c000a96b:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a96e:	85 c0                	test   eax,eax
c000a970:	74 a0                	je     c000a912 <Dbg::kprintf(char const*, ...)+0x14>
c000a972:	8d 77 01             	lea    esi,[edi+0x1]
c000a975:	83 f8 25             	cmp    eax,0x25
c000a978:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a97b:	74 b9                	je     c000a936 <Dbg::kprintf(char const*, ...)+0x38>
c000a97d:	50                   	push   eax
c000a97e:	89 f7                	mov    edi,esi
c000a980:	e8 fb fe ff ff       	call   c000a880 <Dbg::logc(char)>
c000a985:	89 ee                	mov    esi,ebp
c000a987:	58                   	pop    eax
c000a988:	eb e1                	jmp    c000a96b <Dbg::kprintf(char const*, ...)+0x6d>
c000a98a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a98e:	89 c8                	mov    eax,ecx
c000a990:	83 c1 04             	add    ecx,0x4
c000a993:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a997:	8b 00                	mov    eax,DWORD PTR [eax]
c000a999:	50                   	push   eax
c000a99a:	e8 01 ff ff ff       	call   c000a8a0 <Dbg::logs(char*)>
c000a99f:	58                   	pop    eax
c000a9a0:	eb c9                	jmp    c000a96b <Dbg::kprintf(char const*, ...)+0x6d>
c000a9a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9a6:	89 d0                	mov    eax,edx
c000a9a8:	83 c2 04             	add    edx,0x4
c000a9ab:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9af:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9b1:	50                   	push   eax
c000a9b2:	e8 08 ff ff ff       	call   c000a8bf <Dbg::logWriteInt(unsigned int)>
c000a9b7:	58                   	pop    eax
c000a9b8:	eb b1                	jmp    c000a96b <Dbg::kprintf(char const*, ...)+0x6d>
c000a9ba:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9be:	89 d0                	mov    eax,edx
c000a9c0:	83 c2 04             	add    edx,0x4
c000a9c3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9c7:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a9ca:	50                   	push   eax
c000a9cb:	e8 b0 fe ff ff       	call   c000a880 <Dbg::logc(char)>
c000a9d0:	58                   	pop    eax
c000a9d1:	eb 98                	jmp    c000a96b <Dbg::kprintf(char const*, ...)+0x6d>
c000a9d3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9d7:	89 c8                	mov    eax,ecx
c000a9d9:	83 c1 04             	add    ecx,0x4
c000a9dc:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9e0:	6a 10                	push   0x10
c000a9e2:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a9e4:	51                   	push   ecx
c000a9e5:	e8 f3 fe ff ff       	call   c000a8dd <Dbg::logWriteIntBase(unsigned int, int)>
c000a9ea:	5d                   	pop    ebp
c000a9eb:	58                   	pop    eax
c000a9ec:	e9 7a ff ff ff       	jmp    c000a96b <Dbg::kprintf(char const*, ...)+0x6d>
c000a9f1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9f5:	89 d0                	mov    eax,edx
c000a9f7:	83 c2 08             	add    edx,0x8
c000a9fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9fe:	6a 10                	push   0x10
c000aa00:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa02:	50                   	push   eax
c000aa03:	e8 d5 fe ff ff       	call   c000a8dd <Dbg::logWriteIntBase(unsigned int, int)>
c000aa08:	58                   	pop    eax
c000aa09:	5a                   	pop    edx
c000aa0a:	e9 5c ff ff ff       	jmp    c000a96b <Dbg::kprintf(char const*, ...)+0x6d>
c000aa0f:	6a 25                	push   0x25
c000aa11:	e8 6a fe ff ff       	call   c000a880 <Dbg::logc(char)>
c000aa16:	5a                   	pop    edx
c000aa17:	e9 4f ff ff ff       	jmp    c000a96b <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1c:	6a 25                	push   0x25
c000aa1e:	e8 5d fe ff ff       	call   c000a880 <Dbg::logc(char)>
c000aa23:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa27:	50                   	push   eax
c000aa28:	e8 53 fe ff ff       	call   c000a880 <Dbg::logc(char)>
c000aa2d:	5a                   	pop    edx
c000aa2e:	59                   	pop    ecx
c000aa2f:	e9 37 ff ff ff       	jmp    c000a96b <Dbg::kprintf(char const*, ...)+0x6d>

c000aa34 <KiUbsanPrintDetails(char const*, void*)>:
c000aa34:	83 ec 1c             	sub    esp,0x1c
c000aa37:	83 ec 08             	sub    esp,0x8
c000aa3a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa3e:	68 ac 08 02 c0       	push   0xc00208ac
c000aa43:	e8 b6 fe ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c000aa48:	83 c4 10             	add    esp,0x10
c000aa4b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa4f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa57:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa59:	83 ec 08             	sub    esp,0x8
c000aa5c:	50                   	push   eax
c000aa5d:	68 c0 08 02 c0       	push   0xc00208c0
c000aa62:	e8 97 fe ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c000aa67:	83 c4 10             	add    esp,0x10
c000aa6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aa71:	83 ec 08             	sub    esp,0x8
c000aa74:	50                   	push   eax
c000aa75:	68 ca 08 02 c0       	push   0xc00208ca
c000aa7a:	e8 7f fe ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c000aa7f:	83 c4 10             	add    esp,0x10
c000aa82:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa86:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aa89:	83 ec 08             	sub    esp,0x8
c000aa8c:	50                   	push   eax
c000aa8d:	68 d4 08 02 c0       	push   0xc00208d4
c000aa92:	e8 67 fe ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c000aa97:	83 c4 10             	add    esp,0x10
c000aa9a:	90                   	nop
c000aa9b:	83 c4 1c             	add    esp,0x1c
c000aa9e:	c3                   	ret    
c000aa9f:	90                   	nop

c000aaa0 <__ubsan_handle_type_mismatch_v1>:
c000aaa0:	83 ec 0c             	sub    esp,0xc
c000aaa3:	83 ec 08             	sub    esp,0x8
c000aaa6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aaaa:	68 18 0a 02 c0       	push   0xc0020a18
c000aaaf:	e8 80 ff ff ff       	call   c000aa34 <KiUbsanPrintDetails(char const*, void*)>
c000aab4:	83 c4 10             	add    esp,0x10
c000aab7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000aabc:	75 16                	jne    c000aad4 <__ubsan_handle_type_mismatch_v1+0x34>
c000aabe:	83 ec 0c             	sub    esp,0xc
c000aac1:	68 de 08 02 c0       	push   0xc00208de
c000aac6:	e8 33 fe ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c000aacb:	83 c4 10             	add    esp,0x10
c000aace:	e9 91 00 00 00       	jmp    c000ab64 <__ubsan_handle_type_mismatch_v1+0xc4>
c000aad3:	90                   	nop
c000aad4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aad8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aadb:	85 c0                	test   eax,eax
c000aadd:	74 29                	je     c000ab08 <__ubsan_handle_type_mismatch_v1+0x68>
c000aadf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aae3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aae6:	83 e8 01             	sub    eax,0x1
c000aae9:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000aaed:	75 19                	jne    c000ab08 <__ubsan_handle_type_mismatch_v1+0x68>
c000aaef:	83 ec 08             	sub    esp,0x8
c000aaf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aaf6:	68 38 0a 02 c0       	push   0xc0020a38
c000aafb:	e8 fe fd ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	eb 5f                	jmp    c000ab64 <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab05:	8d 76 00             	lea    esi,[esi+0x0]
c000ab08:	83 ec 0c             	sub    esp,0xc
c000ab0b:	68 f3 08 02 c0       	push   0xc00208f3
c000ab10:	e8 e9 fd ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c000ab15:	83 c4 10             	add    esp,0x10
c000ab18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab1c:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab1f:	0f b6 c0             	movzx  eax,al
c000ab22:	83 ec 08             	sub    esp,0x8
c000ab25:	50                   	push   eax
c000ab26:	68 0d 09 02 c0       	push   0xc002090d
c000ab2b:	e8 ce fd ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c000ab30:	83 c4 10             	add    esp,0x10
c000ab33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab37:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab3a:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab3d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab45:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab48:	0f b6 c0             	movzx  eax,al
c000ab4b:	8b 04 85 80 28 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd780]
c000ab52:	51                   	push   ecx
c000ab53:	52                   	push   edx
c000ab54:	50                   	push   eax
c000ab55:	68 60 0a 02 c0       	push   0xc0020a60
c000ab5a:	e8 9f fd ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c000ab5f:	83 c4 10             	add    esp,0x10
c000ab62:	66 90                	xchg   ax,ax
c000ab64:	83 ec 0c             	sub    esp,0xc
c000ab67:	68 18 0a 02 c0       	push   0xc0020a18
c000ab6c:	e8 00 60 00 00       	call   c0010b71 <KePanic(char const*)>
c000ab71:	83 c4 10             	add    esp,0x10
c000ab74:	90                   	nop
c000ab75:	83 c4 0c             	add    esp,0xc
c000ab78:	c3                   	ret    
c000ab79:	8d 76 00             	lea    esi,[esi+0x0]

c000ab7c <__ubsan_handle_pointer_overflow>:
c000ab7c:	83 ec 0c             	sub    esp,0xc
c000ab7f:	83 ec 08             	sub    esp,0x8
c000ab82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ab86:	68 a8 0a 02 c0       	push   0xc0020aa8
c000ab8b:	e8 a4 fe ff ff       	call   c000aa34 <KiUbsanPrintDetails(char const*, void*)>
c000ab90:	83 c4 10             	add    esp,0x10
c000ab93:	83 ec 0c             	sub    esp,0xc
c000ab96:	68 a8 0a 02 c0       	push   0xc0020aa8
c000ab9b:	e8 d1 5f 00 00       	call   c0010b71 <KePanic(char const*)>
c000aba0:	83 c4 10             	add    esp,0x10
c000aba3:	90                   	nop
c000aba4:	83 c4 0c             	add    esp,0xc
c000aba7:	c3                   	ret    

c000aba8 <__ubsan_handle_out_of_bounds>:
c000aba8:	83 ec 0c             	sub    esp,0xc
c000abab:	83 ec 08             	sub    esp,0x8
c000abae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abb2:	68 18 09 02 c0       	push   0xc0020918
c000abb7:	e8 78 fe ff ff       	call   c000aa34 <KiUbsanPrintDetails(char const*, void*)>
c000abbc:	83 c4 10             	add    esp,0x10
c000abbf:	83 ec 0c             	sub    esp,0xc
c000abc2:	68 18 09 02 c0       	push   0xc0020918
c000abc7:	e8 a5 5f 00 00       	call   c0010b71 <KePanic(char const*)>
c000abcc:	83 c4 10             	add    esp,0x10
c000abcf:	90                   	nop
c000abd0:	83 c4 0c             	add    esp,0xc
c000abd3:	c3                   	ret    

c000abd4 <__ubsan_handle_add_overflow>:
c000abd4:	83 ec 0c             	sub    esp,0xc
c000abd7:	83 ec 08             	sub    esp,0x8
c000abda:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abde:	68 35 09 02 c0       	push   0xc0020935
c000abe3:	e8 4c fe ff ff       	call   c000aa34 <KiUbsanPrintDetails(char const*, void*)>
c000abe8:	83 c4 10             	add    esp,0x10
c000abeb:	83 ec 0c             	sub    esp,0xc
c000abee:	68 35 09 02 c0       	push   0xc0020935
c000abf3:	e8 79 5f 00 00       	call   c0010b71 <KePanic(char const*)>
c000abf8:	83 c4 10             	add    esp,0x10
c000abfb:	90                   	nop
c000abfc:	83 c4 0c             	add    esp,0xc
c000abff:	c3                   	ret    

c000ac00 <__ubsan_handle_load_invalid_value>:
c000ac00:	83 ec 0c             	sub    esp,0xc
c000ac03:	83 ec 08             	sub    esp,0x8
c000ac06:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac0a:	68 c8 0a 02 c0       	push   0xc0020ac8
c000ac0f:	e8 20 fe ff ff       	call   c000aa34 <KiUbsanPrintDetails(char const*, void*)>
c000ac14:	83 c4 10             	add    esp,0x10
c000ac17:	83 ec 0c             	sub    esp,0xc
c000ac1a:	68 c8 0a 02 c0       	push   0xc0020ac8
c000ac1f:	e8 4d 5f 00 00       	call   c0010b71 <KePanic(char const*)>
c000ac24:	83 c4 10             	add    esp,0x10
c000ac27:	90                   	nop
c000ac28:	83 c4 0c             	add    esp,0xc
c000ac2b:	c3                   	ret    

c000ac2c <__ubsan_handle_divrem_overflow>:
c000ac2c:	83 ec 0c             	sub    esp,0xc
c000ac2f:	83 ec 08             	sub    esp,0x8
c000ac32:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac36:	68 ec 0a 02 c0       	push   0xc0020aec
c000ac3b:	e8 f4 fd ff ff       	call   c000aa34 <KiUbsanPrintDetails(char const*, void*)>
c000ac40:	83 c4 10             	add    esp,0x10
c000ac43:	83 ec 0c             	sub    esp,0xc
c000ac46:	68 ec 0a 02 c0       	push   0xc0020aec
c000ac4b:	e8 21 5f 00 00       	call   c0010b71 <KePanic(char const*)>
c000ac50:	83 c4 10             	add    esp,0x10
c000ac53:	90                   	nop
c000ac54:	83 c4 0c             	add    esp,0xc
c000ac57:	c3                   	ret    

c000ac58 <__ubsan_handle_mul_overflow>:
c000ac58:	83 ec 0c             	sub    esp,0xc
c000ac5b:	83 ec 08             	sub    esp,0x8
c000ac5e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac62:	68 51 09 02 c0       	push   0xc0020951
c000ac67:	e8 c8 fd ff ff       	call   c000aa34 <KiUbsanPrintDetails(char const*, void*)>
c000ac6c:	83 c4 10             	add    esp,0x10
c000ac6f:	83 ec 0c             	sub    esp,0xc
c000ac72:	68 51 09 02 c0       	push   0xc0020951
c000ac77:	e8 f5 5e 00 00       	call   c0010b71 <KePanic(char const*)>
c000ac7c:	83 c4 10             	add    esp,0x10
c000ac7f:	90                   	nop
c000ac80:	83 c4 0c             	add    esp,0xc
c000ac83:	c3                   	ret    

c000ac84 <__ubsan_handle_sub_overflow>:
c000ac84:	83 ec 0c             	sub    esp,0xc
c000ac87:	83 ec 08             	sub    esp,0x8
c000ac8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac8e:	68 6d 09 02 c0       	push   0xc002096d
c000ac93:	e8 9c fd ff ff       	call   c000aa34 <KiUbsanPrintDetails(char const*, void*)>
c000ac98:	83 c4 10             	add    esp,0x10
c000ac9b:	83 ec 0c             	sub    esp,0xc
c000ac9e:	68 6d 09 02 c0       	push   0xc002096d
c000aca3:	e8 c9 5e 00 00       	call   c0010b71 <KePanic(char const*)>
c000aca8:	83 c4 10             	add    esp,0x10
c000acab:	90                   	nop
c000acac:	83 c4 0c             	add    esp,0xc
c000acaf:	c3                   	ret    

c000acb0 <__ubsan_handle_shift_out_of_bounds>:
c000acb0:	83 ec 0c             	sub    esp,0xc
c000acb3:	83 ec 08             	sub    esp,0x8
c000acb6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acba:	68 0c 0b 02 c0       	push   0xc0020b0c
c000acbf:	e8 70 fd ff ff       	call   c000aa34 <KiUbsanPrintDetails(char const*, void*)>
c000acc4:	83 c4 10             	add    esp,0x10
c000acc7:	83 ec 0c             	sub    esp,0xc
c000acca:	68 0c 0b 02 c0       	push   0xc0020b0c
c000accf:	e8 9d 5e 00 00       	call   c0010b71 <KePanic(char const*)>
c000acd4:	83 c4 10             	add    esp,0x10
c000acd7:	90                   	nop
c000acd8:	83 c4 0c             	add    esp,0xc
c000acdb:	c3                   	ret    

c000acdc <__ubsan_handle_negate_overflow>:
c000acdc:	83 ec 0c             	sub    esp,0xc
c000acdf:	83 ec 08             	sub    esp,0x8
c000ace2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ace6:	68 30 0b 02 c0       	push   0xc0020b30
c000aceb:	e8 44 fd ff ff       	call   c000aa34 <KiUbsanPrintDetails(char const*, void*)>
c000acf0:	83 c4 10             	add    esp,0x10
c000acf3:	83 ec 0c             	sub    esp,0xc
c000acf6:	68 30 0b 02 c0       	push   0xc0020b30
c000acfb:	e8 71 5e 00 00       	call   c0010b71 <KePanic(char const*)>
c000ad00:	83 c4 10             	add    esp,0x10
c000ad03:	90                   	nop
c000ad04:	83 c4 0c             	add    esp,0xc
c000ad07:	c3                   	ret    

c000ad08 <File::read(unsigned long long, void*, int*)>:
c000ad08:	53                   	push   ebx
c000ad09:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad0d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ad11:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ad18:	83 f8 19             	cmp    eax,0x19
c000ad1b:	77 35                	ja     c000ad52 <File::read(unsigned long long, void*, int*)+0x4a>
c000ad1d:	8b 04 85 20 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7be0]
c000ad24:	85 c0                	test   eax,eax
c000ad26:	74 2a                	je     c000ad52 <File::read(unsigned long long, void*, int*)+0x4a>
c000ad28:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ad2e:	85 c0                	test   eax,eax
c000ad30:	74 20                	je     c000ad52 <File::read(unsigned long long, void*, int*)+0x4a>
c000ad32:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad36:	74 21                	je     c000ad59 <File::read(unsigned long long, void*, int*)+0x51>
c000ad38:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ad3a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ad3e:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ad44:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad4c:	5b                   	pop    ebx
c000ad4d:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000ad50:	ff e0                	jmp    eax
c000ad52:	b8 0b 00 00 00       	mov    eax,0xb
c000ad57:	eb 05                	jmp    c000ad5e <File::read(unsigned long long, void*, int*)+0x56>
c000ad59:	b8 05 00 00 00       	mov    eax,0x5
c000ad5e:	5b                   	pop    ebx
c000ad5f:	c3                   	ret    

c000ad60 <File::write(unsigned long long, void*, int*)>:
c000ad60:	53                   	push   ebx
c000ad61:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad65:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ad69:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ad70:	83 f8 19             	cmp    eax,0x19
c000ad73:	77 35                	ja     c000adaa <File::write(unsigned long long, void*, int*)+0x4a>
c000ad75:	8b 04 85 20 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7be0]
c000ad7c:	85 c0                	test   eax,eax
c000ad7e:	74 2a                	je     c000adaa <File::write(unsigned long long, void*, int*)+0x4a>
c000ad80:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ad86:	85 c0                	test   eax,eax
c000ad88:	74 20                	je     c000adaa <File::write(unsigned long long, void*, int*)+0x4a>
c000ad8a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad8e:	74 21                	je     c000adb1 <File::write(unsigned long long, void*, int*)+0x51>
c000ad90:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ad92:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ad96:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ad9c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ada0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ada4:	5b                   	pop    ebx
c000ada5:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000ada8:	ff e0                	jmp    eax
c000adaa:	b8 0b 00 00 00       	mov    eax,0xb
c000adaf:	eb 05                	jmp    c000adb6 <File::write(unsigned long long, void*, int*)+0x56>
c000adb1:	b8 05 00 00 00       	mov    eax,0x5
c000adb6:	5b                   	pop    ebx
c000adb7:	c3                   	ret    

c000adb8 <Directory::read(unsigned long long, void*, int*)>:
c000adb8:	53                   	push   ebx
c000adb9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000adbd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000adc1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000adc8:	83 f8 19             	cmp    eax,0x19
c000adcb:	77 35                	ja     c000ae02 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000adcd:	8b 04 85 20 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7be0]
c000add4:	85 c0                	test   eax,eax
c000add6:	74 2a                	je     c000ae02 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000add8:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000adde:	85 c0                	test   eax,eax
c000ade0:	74 20                	je     c000ae02 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000ade2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ade6:	74 21                	je     c000ae09 <Directory::read(unsigned long long, void*, int*)+0x51>
c000ade8:	8b 08                	mov    ecx,DWORD PTR [eax]
c000adea:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000adee:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000adf4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000adf8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000adfc:	5b                   	pop    ebx
c000adfd:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000ae00:	ff e0                	jmp    eax
c000ae02:	b8 0b 00 00 00       	mov    eax,0xb
c000ae07:	eb 05                	jmp    c000ae0e <Directory::read(unsigned long long, void*, int*)+0x56>
c000ae09:	b8 05 00 00 00       	mov    eax,0x5
c000ae0e:	5b                   	pop    ebx
c000ae0f:	c3                   	ret    

c000ae10 <Directory::write(unsigned long long, void*, int*)>:
c000ae10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae14:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000ae1b:	b8 0b 00 00 00       	mov    eax,0xb
c000ae20:	83 fa 19             	cmp    edx,0x19
c000ae23:	77 18                	ja     c000ae3d <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ae25:	8b 14 95 20 84 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7be0]
c000ae2c:	85 d2                	test   edx,edx
c000ae2e:	74 0d                	je     c000ae3d <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ae30:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000ae37:	19 c0                	sbb    eax,eax
c000ae39:	83 e0 0a             	and    eax,0xa
c000ae3c:	40                   	inc    eax
c000ae3d:	c3                   	ret    

c000ae3e <File::isAtty()>:
c000ae3e:	31 c0                	xor    eax,eax
c000ae40:	c3                   	ret    
c000ae41:	90                   	nop

c000ae42 <Directory::isAtty()>:
c000ae42:	31 c0                	xor    eax,eax
c000ae44:	c3                   	ret    
c000ae45:	90                   	nop

c000ae46 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000ae46:	b8 0a 00 00 00       	mov    eax,0xa
c000ae4b:	c3                   	ret    

c000ae4c <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000ae4c:	b8 0a 00 00 00       	mov    eax,0xa
c000ae51:	c3                   	ret    

c000ae52 <Filesystem::allocateSwapfile(char const*, int)>:
c000ae52:	31 c0                	xor    eax,eax
c000ae54:	31 d2                	xor    edx,edx
c000ae56:	c3                   	ret    
c000ae57:	90                   	nop

c000ae58 <File::~File()>:
c000ae58:	83 ec 0c             	sub    esp,0xc
c000ae5b:	ba c4 0b 02 c0       	mov    edx,0xc0020bc4
c000ae60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae64:	89 10                	mov    DWORD PTR [eax],edx
c000ae66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae6a:	83 ec 0c             	sub    esp,0xc
c000ae6d:	50                   	push   eax
c000ae6e:	e8 0d e5 ff ff       	call   c0009380 <UnixFile::~UnixFile()>
c000ae73:	83 c4 10             	add    esp,0x10
c000ae76:	90                   	nop
c000ae77:	83 c4 0c             	add    esp,0xc
c000ae7a:	c3                   	ret    
c000ae7b:	90                   	nop

c000ae7c <File::~File()>:
c000ae7c:	83 ec 0c             	sub    esp,0xc
c000ae7f:	83 ec 0c             	sub    esp,0xc
c000ae82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae86:	e8 cd ff ff ff       	call   c000ae58 <File::~File()>
c000ae8b:	83 c4 10             	add    esp,0x10
c000ae8e:	83 ec 08             	sub    esp,0x8
c000ae91:	68 14 01 00 00       	push   0x114
c000ae96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae9a:	e8 61 f9 ff ff       	call   c000a800 <operator delete(void*, unsigned long)>
c000ae9f:	83 c4 10             	add    esp,0x10
c000aea2:	83 c4 0c             	add    esp,0xc
c000aea5:	c3                   	ret    

c000aea6 <Directory::~Directory()>:
c000aea6:	83 ec 0c             	sub    esp,0xc
c000aea9:	ba e0 0b 02 c0       	mov    edx,0xc0020be0
c000aeae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeb2:	89 10                	mov    DWORD PTR [eax],edx
c000aeb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeb8:	83 ec 0c             	sub    esp,0xc
c000aebb:	50                   	push   eax
c000aebc:	e8 bf e4 ff ff       	call   c0009380 <UnixFile::~UnixFile()>
c000aec1:	83 c4 10             	add    esp,0x10
c000aec4:	90                   	nop
c000aec5:	83 c4 0c             	add    esp,0xc
c000aec8:	c3                   	ret    
c000aec9:	90                   	nop

c000aeca <Directory::~Directory()>:
c000aeca:	83 ec 0c             	sub    esp,0xc
c000aecd:	83 ec 0c             	sub    esp,0xc
c000aed0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aed4:	e8 cd ff ff ff       	call   c000aea6 <Directory::~Directory()>
c000aed9:	83 c4 10             	add    esp,0x10
c000aedc:	83 ec 08             	sub    esp,0x8
c000aedf:	68 14 01 00 00       	push   0x114
c000aee4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aee8:	e8 13 f9 ff ff       	call   c000a800 <operator delete(void*, unsigned long)>
c000aeed:	83 c4 10             	add    esp,0x10
c000aef0:	83 c4 0c             	add    esp,0xc
c000aef3:	c3                   	ret    

c000aef4 <Filesystem::Filesystem()>:
c000aef4:	ba 58 0b 02 c0       	mov    edx,0xc0020b58
c000aef9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aefd:	89 10                	mov    DWORD PTR [eax],edx
c000aeff:	8b 15 b4 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fb4
c000af05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af09:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000af0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af10:	a3 b4 5f 02 c0       	mov    ds:0xc0025fb4,eax
c000af15:	90                   	nop
c000af16:	c3                   	ret    
c000af17:	90                   	nop

c000af18 <Filesystem::~Filesystem()>:
c000af18:	ba 58 0b 02 c0       	mov    edx,0xc0020b58
c000af1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af21:	89 10                	mov    DWORD PTR [eax],edx
c000af23:	90                   	nop
c000af24:	c3                   	ret    
c000af25:	90                   	nop

c000af26 <Filesystem::~Filesystem()>:
c000af26:	83 ec 0c             	sub    esp,0xc
c000af29:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000af2d:	e8 e6 ff ff ff       	call   c000af18 <Filesystem::~Filesystem()>
c000af32:	83 c4 04             	add    esp,0x4
c000af35:	83 ec 08             	sub    esp,0x8
c000af38:	6a 08                	push   0x8
c000af3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af3e:	e8 bd f8 ff ff       	call   c000a800 <operator delete(void*, unsigned long)>
c000af43:	83 c4 10             	add    esp,0x10
c000af46:	83 c4 0c             	add    esp,0xc
c000af49:	c3                   	ret    

c000af4a <Fs::getcwd(Process*, char*, int)>:
c000af4a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000af4e:	31 c0                	xor    eax,eax
c000af50:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000af54:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000af57:	7d 15                	jge    c000af6e <Fs::getcwd(Process*, char*, int)+0x24>
c000af59:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000af5d:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000af64:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000af67:	84 c9                	test   cl,cl
c000af69:	74 06                	je     c000af71 <Fs::getcwd(Process*, char*, int)+0x27>
c000af6b:	40                   	inc    eax
c000af6c:	eb e2                	jmp    c000af50 <Fs::getcwd(Process*, char*, int)+0x6>
c000af6e:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000af71:	31 c0                	xor    eax,eax
c000af73:	c3                   	ret    

c000af74 <Fs::initVFS()>:
c000af74:	83 ec 18             	sub    esp,0x18
c000af77:	6a 08                	push   0x8
c000af79:	e8 4d cb ff ff       	call   c0007acb <malloc>
c000af7e:	89 04 24             	mov    DWORD PTR [esp],eax
c000af81:	e8 62 e0 00 00       	call   c0018fe8 <FAT::FAT()>
c000af86:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000af8d:	e8 39 cb ff ff       	call   c0007acb <malloc>
c000af92:	89 04 24             	mov    DWORD PTR [esp],eax
c000af95:	e8 7c ef 00 00       	call   c0019f16 <ISO9660::ISO9660()>
c000af9a:	83 c4 1c             	add    esp,0x1c
c000af9d:	c3                   	ret    

c000af9e <Fs::standardiseFiles(char*, char const*, char const*)>:
c000af9e:	55                   	push   ebp
c000af9f:	57                   	push   edi
c000afa0:	56                   	push   esi
c000afa1:	53                   	push   ebx
c000afa2:	81 ec 20 04 00 00    	sub    esp,0x420
c000afa8:	8b bc 24 38 04 00 00 	mov    edi,DWORD PTR [esp+0x438]
c000afaf:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c000afb6:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c000afbd:	68 00 04 00 00       	push   0x400
c000afc2:	6a 00                	push   0x0
c000afc4:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000afc8:	56                   	push   esi
c000afc9:	e8 22 55 ff ff       	call   c00004f0 <memset>
c000afce:	83 c4 10             	add    esp,0x10
c000afd1:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000afd5:	75 0b                	jne    c000afe2 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000afd7:	50                   	push   eax
c000afd8:	50                   	push   eax
c000afd9:	57                   	push   edi
c000afda:	56                   	push   esi
c000afdb:	e8 70 56 ff ff       	call   c0000650 <strcpy>
c000afe0:	eb 45                	jmp    c000b027 <Fs::standardiseFiles(char*, char const*, char const*)+0x89>
c000afe2:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000afe5:	83 f8 2f             	cmp    eax,0x2f
c000afe8:	74 05                	je     c000afef <Fs::standardiseFiles(char*, char const*, char const*)+0x51>
c000afea:	83 f8 5c             	cmp    eax,0x5c
c000afed:	75 19                	jne    c000b008 <Fs::standardiseFiles(char*, char const*, char const*)+0x6a>
c000afef:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000aff2:	3c 60                	cmp    al,0x60
c000aff4:	7e 03                	jle    c000aff9 <Fs::standardiseFiles(char*, char const*, char const*)+0x5b>
c000aff6:	83 e8 20             	sub    eax,0x20
c000aff9:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000affd:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b004:	50                   	push   eax
c000b005:	50                   	push   eax
c000b006:	eb 18                	jmp    c000b020 <Fs::standardiseFiles(char*, char const*, char const*)+0x82>
c000b008:	50                   	push   eax
c000b009:	50                   	push   eax
c000b00a:	55                   	push   ebp
c000b00b:	56                   	push   esi
c000b00c:	e8 3f 56 ff ff       	call   c0000650 <strcpy>
c000b011:	5a                   	pop    edx
c000b012:	59                   	pop    ecx
c000b013:	68 df 1a 02 c0       	push   0xc0021adf
c000b018:	56                   	push   esi
c000b019:	e8 52 58 ff ff       	call   c0000870 <strcat>
c000b01e:	5d                   	pop    ebp
c000b01f:	58                   	pop    eax
c000b020:	57                   	push   edi
c000b021:	56                   	push   esi
c000b022:	e8 49 58 ff ff       	call   c0000870 <strcat>
c000b027:	83 c4 10             	add    esp,0x10
c000b02a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c000b02e:	3c 60                	cmp    al,0x60
c000b030:	7e 03                	jle    c000b035 <Fs::standardiseFiles(char*, char const*, char const*)+0x97>
c000b032:	83 e8 20             	sub    eax,0x20
c000b035:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b039:	88 03                	mov    BYTE PTR [ebx],al
c000b03b:	b8 03 00 00 00       	mov    eax,0x3
c000b040:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b047:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b04d:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b051:	c7 44 24 0c 03 00 00 00 	mov    DWORD PTR [esp+0xc],0x3
c000b059:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b05d:	0f b6 7c 3c 10       	movzx  edi,BYTE PTR [esp+edi*1+0x10]
c000b062:	89 fa                	mov    edx,edi
c000b064:	0f be ea             	movsx  ebp,dl
c000b067:	85 ed                	test   ebp,ebp
c000b069:	0f 84 af 00 00 00    	je     c000b11e <Fs::standardiseFiles(char*, char const*, char const*)+0x180>
c000b06f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b073:	42                   	inc    edx
c000b074:	83 fd 2f             	cmp    ebp,0x2f
c000b077:	74 05                	je     c000b07e <Fs::standardiseFiles(char*, char const*, char const*)+0xe0>
c000b079:	83 fd 5c             	cmp    ebp,0x5c
c000b07c:	75 14                	jne    c000b092 <Fs::standardiseFiles(char*, char const*, char const*)+0xf4>
c000b07e:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b083:	89 c5                	mov    ebp,eax
c000b085:	74 0b                	je     c000b092 <Fs::standardiseFiles(char*, char const*, char const*)+0xf4>
c000b087:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b08b:	40                   	inc    eax
c000b08c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b090:	eb c7                	jmp    c000b059 <Fs::standardiseFiles(char*, char const*, char const*)+0xbb>
c000b092:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b096:	80 7c 0c 0f 2f       	cmp    BYTE PTR [esp+ecx*1+0xf],0x2f
c000b09b:	89 f9                	mov    ecx,edi
c000b09d:	0f be e9             	movsx  ebp,cl
c000b0a0:	75 63                	jne    c000b105 <Fs::standardiseFiles(char*, char const*, char const*)+0x167>
c000b0a2:	83 fd 2e             	cmp    ebp,0x2e
c000b0a5:	75 5e                	jne    c000b105 <Fs::standardiseFiles(char*, char const*, char const*)+0x167>
c000b0a7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b0ab:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c000b0b0:	0f be 6c 0c 12       	movsx  ebp,BYTE PTR [esp+ecx*1+0x12]
c000b0b5:	74 18                	je     c000b0cf <Fs::standardiseFiles(char*, char const*, char const*)+0x131>
c000b0b7:	83 fd 2e             	cmp    ebp,0x2e
c000b0ba:	74 57                	je     c000b113 <Fs::standardiseFiles(char*, char const*, char const*)+0x175>
c000b0bc:	89 ca                	mov    edx,ecx
c000b0be:	42                   	inc    edx
c000b0bf:	0f be 0c 16          	movsx  ecx,BYTE PTR [esi+edx*1]
c000b0c3:	83 f9 2f             	cmp    ecx,0x2f
c000b0c6:	74 f6                	je     c000b0be <Fs::standardiseFiles(char*, char const*, char const*)+0x120>
c000b0c8:	83 f9 5c             	cmp    ecx,0x5c
c000b0cb:	74 f1                	je     c000b0be <Fs::standardiseFiles(char*, char const*, char const*)+0x120>
c000b0cd:	eb bd                	jmp    c000b08c <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b0cf:	83 fd 2e             	cmp    ebp,0x2e
c000b0d2:	74 3f                	je     c000b113 <Fs::standardiseFiles(char*, char const*, char const*)+0x175>
c000b0d4:	83 f8 03             	cmp    eax,0x3
c000b0d7:	74 b3                	je     c000b08c <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b0d9:	42                   	inc    edx
c000b0da:	0f be 0c 16          	movsx  ecx,BYTE PTR [esi+edx*1]
c000b0de:	83 f9 2f             	cmp    ecx,0x2f
c000b0e1:	74 f6                	je     c000b0d9 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000b0e3:	83 f9 5c             	cmp    ecx,0x5c
c000b0e6:	74 f1                	je     c000b0d9 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000b0e8:	48                   	dec    eax
c000b0e9:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b0ed:	75 06                	jne    c000b0f5 <Fs::standardiseFiles(char*, char const*, char const*)+0x157>
c000b0ef:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b0f3:	eb f3                	jmp    c000b0e8 <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000b0f5:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b0f9:	74 07                	je     c000b102 <Fs::standardiseFiles(char*, char const*, char const*)+0x164>
c000b0fb:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b0ff:	48                   	dec    eax
c000b100:	eb f3                	jmp    c000b0f5 <Fs::standardiseFiles(char*, char const*, char const*)+0x157>
c000b102:	40                   	inc    eax
c000b103:	eb 87                	jmp    c000b08c <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b105:	83 fd 2f             	cmp    ebp,0x2f
c000b108:	74 82                	je     c000b08c <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b10a:	83 fd 5c             	cmp    ebp,0x5c
c000b10d:	0f 84 79 ff ff ff    	je     c000b08c <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b113:	89 f9                	mov    ecx,edi
c000b115:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000b118:	40                   	inc    eax
c000b119:	e9 6e ff ff ff       	jmp    c000b08c <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b11e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b122:	83 ec 0c             	sub    esp,0xc
c000b125:	53                   	push   ebx
c000b126:	e8 55 54 ff ff       	call   c0000580 <strlen>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000b133:	75 26                	jne    c000b15b <Fs::standardiseFiles(char*, char const*, char const*)+0x1bd>
c000b135:	83 ec 0c             	sub    esp,0xc
c000b138:	53                   	push   ebx
c000b139:	e8 42 54 ff ff       	call   c0000580 <strlen>
c000b13e:	83 c4 10             	add    esp,0x10
c000b141:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000b146:	74 26                	je     c000b16e <Fs::standardiseFiles(char*, char const*, char const*)+0x1d0>
c000b148:	83 ec 0c             	sub    esp,0xc
c000b14b:	53                   	push   ebx
c000b14c:	e8 2f 54 ff ff       	call   c0000580 <strlen>
c000b151:	83 c4 10             	add    esp,0x10
c000b154:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b159:	eb c7                	jmp    c000b122 <Fs::standardiseFiles(char*, char const*, char const*)+0x184>
c000b15b:	83 ec 0c             	sub    esp,0xc
c000b15e:	53                   	push   ebx
c000b15f:	e8 1c 54 ff ff       	call   c0000580 <strlen>
c000b164:	83 c4 10             	add    esp,0x10
c000b167:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b16c:	74 c7                	je     c000b135 <Fs::standardiseFiles(char*, char const*, char const*)+0x197>
c000b16e:	81 c4 1c 04 00 00    	add    esp,0x41c
c000b174:	5b                   	pop    ebx
c000b175:	5e                   	pop    esi
c000b176:	5f                   	pop    edi
c000b177:	5d                   	pop    ebp
c000b178:	c3                   	ret    
c000b179:	90                   	nop

c000b17a <File::File(char const*, Process*)>:
c000b17a:	83 ec 0c             	sub    esp,0xc
c000b17d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b181:	83 ec 08             	sub    esp,0x8
c000b184:	6a 00                	push   0x0
c000b186:	50                   	push   eax
c000b187:	e8 0e e0 ff ff       	call   c000919a <UnixFile::UnixFile(int)>
c000b18c:	83 c4 10             	add    esp,0x10
c000b18f:	ba c4 0b 02 c0       	mov    edx,0xc0020bc4
c000b194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b198:	89 10                	mov    DWORD PTR [eax],edx
c000b19a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b19e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b1a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1a8:	83 c0 0d             	add    eax,0xd
c000b1ab:	83 ec 04             	sub    esp,0x4
c000b1ae:	52                   	push   edx
c000b1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b1b3:	50                   	push   eax
c000b1b4:	e8 e5 fd ff ff       	call   c000af9e <Fs::standardiseFiles(char*, char const*, char const*)>
c000b1b9:	83 c4 10             	add    esp,0x10
c000b1bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1c0:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b1c3:	83 e8 41             	sub    eax,0x41
c000b1c6:	88 c2                	mov    dl,al
c000b1c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1cc:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b1d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1d6:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b1da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1de:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b1e4:	0f b6 c0             	movzx  eax,al
c000b1e7:	8b 04 85 20 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7be0]
c000b1ee:	85 c0                	test   eax,eax
c000b1f0:	74 3e                	je     c000b230 <File::File(char const*, Process*)+0xb6>
c000b1f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1f6:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b1fc:	0f b6 c0             	movzx  eax,al
c000b1ff:	8b 04 85 20 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7be0]
c000b206:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b20c:	85 c0                	test   eax,eax
c000b20e:	75 20                	jne    c000b230 <File::File(char const*, Process*)+0xb6>
c000b210:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b214:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b21a:	0f b6 c0             	movzx  eax,al
c000b21d:	8b 04 85 20 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7be0]
c000b224:	83 ec 0c             	sub    esp,0xc
c000b227:	50                   	push   eax
c000b228:	e8 83 21 00 00       	call   c000d3b0 <LogicalDisk::mount()>
c000b22d:	83 c4 10             	add    esp,0x10
c000b230:	90                   	nop
c000b231:	83 c4 0c             	add    esp,0xc
c000b234:	c3                   	ret    
c000b235:	90                   	nop

c000b236 <File::open(FileOpenMode)>:
c000b236:	53                   	push   ebx
c000b237:	b8 0b 00 00 00       	mov    eax,0xb
c000b23c:	83 ec 08             	sub    esp,0x8
c000b23f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b243:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b24a:	83 fa 19             	cmp    edx,0x19
c000b24d:	77 40                	ja     c000b28f <File::open(FileOpenMode)+0x59>
c000b24f:	8b 14 95 20 84 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7be0]
c000b256:	85 d2                	test   edx,edx
c000b258:	74 35                	je     c000b28f <File::open(FileOpenMode)+0x59>
c000b25a:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b260:	85 d2                	test   edx,edx
c000b262:	74 2b                	je     c000b28f <File::open(FileOpenMode)+0x59>
c000b264:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b268:	b8 06 00 00 00       	mov    eax,0x6
c000b26d:	75 20                	jne    c000b28f <File::open(FileOpenMode)+0x59>
c000b26f:	8b 02                	mov    eax,DWORD PTR [edx]
c000b271:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b277:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b27b:	51                   	push   ecx
c000b27c:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b27f:	51                   	push   ecx
c000b280:	52                   	push   edx
c000b281:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b284:	83 c4 10             	add    esp,0x10
c000b287:	85 c0                	test   eax,eax
c000b289:	75 04                	jne    c000b28f <File::open(FileOpenMode)+0x59>
c000b28b:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b28f:	83 c4 08             	add    esp,0x8
c000b292:	5b                   	pop    ebx
c000b293:	c3                   	ret    

c000b294 <File::close()>:
c000b294:	53                   	push   ebx
c000b295:	b8 0b 00 00 00       	mov    eax,0xb
c000b29a:	83 ec 08             	sub    esp,0x8
c000b29d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b2a1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b2a8:	83 f9 19             	cmp    ecx,0x19
c000b2ab:	77 41                	ja     c000b2ee <File::close()+0x5a>
c000b2ad:	8b 1c 8d 20 84 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7be0]
c000b2b4:	85 db                	test   ebx,ebx
c000b2b6:	74 36                	je     c000b2ee <File::close()+0x5a>
c000b2b8:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b2bf:	74 2d                	je     c000b2ee <File::close()+0x5a>
c000b2c1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2c5:	b8 05 00 00 00       	mov    eax,0x5
c000b2ca:	74 22                	je     c000b2ee <File::close()+0x5a>
c000b2cc:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b2d0:	8b 04 8d 20 84 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7be0]
c000b2d7:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b2dd:	53                   	push   ebx
c000b2de:	53                   	push   ebx
c000b2df:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b2e1:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b2e7:	50                   	push   eax
c000b2e8:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b2eb:	83 c4 10             	add    esp,0x10
c000b2ee:	83 c4 08             	add    esp,0x8
c000b2f1:	5b                   	pop    ebx
c000b2f2:	c3                   	ret    
c000b2f3:	90                   	nop

c000b2f4 <File::seek(unsigned long long)>:
c000b2f4:	56                   	push   esi
c000b2f5:	b8 0b 00 00 00       	mov    eax,0xb
c000b2fa:	53                   	push   ebx
c000b2fb:	51                   	push   ecx
c000b2fc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b300:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b304:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b308:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b30f:	83 fa 19             	cmp    edx,0x19
c000b312:	77 31                	ja     c000b345 <File::seek(unsigned long long)+0x51>
c000b314:	8b 14 95 20 84 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7be0]
c000b31b:	85 d2                	test   edx,edx
c000b31d:	74 26                	je     c000b345 <File::seek(unsigned long long)+0x51>
c000b31f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b325:	85 d2                	test   edx,edx
c000b327:	74 1c                	je     c000b345 <File::seek(unsigned long long)+0x51>
c000b329:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b32d:	b8 05 00 00 00       	mov    eax,0x5
c000b332:	74 11                	je     c000b345 <File::seek(unsigned long long)+0x51>
c000b334:	8b 02                	mov    eax,DWORD PTR [edx]
c000b336:	53                   	push   ebx
c000b337:	51                   	push   ecx
c000b338:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b33e:	52                   	push   edx
c000b33f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b342:	83 c4 10             	add    esp,0x10
c000b345:	5a                   	pop    edx
c000b346:	5b                   	pop    ebx
c000b347:	5e                   	pop    esi
c000b348:	c3                   	ret    
c000b349:	90                   	nop

c000b34a <File::truncate(unsigned long long)>:
c000b34a:	56                   	push   esi
c000b34b:	b8 0b 00 00 00       	mov    eax,0xb
c000b350:	53                   	push   ebx
c000b351:	51                   	push   ecx
c000b352:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b356:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b35a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b35e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b365:	83 fa 19             	cmp    edx,0x19
c000b368:	77 31                	ja     c000b39b <File::truncate(unsigned long long)+0x51>
c000b36a:	8b 14 95 20 84 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7be0]
c000b371:	85 d2                	test   edx,edx
c000b373:	74 26                	je     c000b39b <File::truncate(unsigned long long)+0x51>
c000b375:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b37b:	85 d2                	test   edx,edx
c000b37d:	74 1c                	je     c000b39b <File::truncate(unsigned long long)+0x51>
c000b37f:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b383:	b8 05 00 00 00       	mov    eax,0x5
c000b388:	74 11                	je     c000b39b <File::truncate(unsigned long long)+0x51>
c000b38a:	8b 02                	mov    eax,DWORD PTR [edx]
c000b38c:	53                   	push   ebx
c000b38d:	51                   	push   ecx
c000b38e:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b394:	52                   	push   edx
c000b395:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b398:	83 c4 10             	add    esp,0x10
c000b39b:	5a                   	pop    edx
c000b39c:	5b                   	pop    ebx
c000b39d:	5e                   	pop    esi
c000b39e:	c3                   	ret    
c000b39f:	90                   	nop

c000b3a0 <File::tell(unsigned long long*)>:
c000b3a0:	83 ec 0c             	sub    esp,0xc
c000b3a3:	b8 0b 00 00 00       	mov    eax,0xb
c000b3a8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b3ac:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b3b3:	83 fa 19             	cmp    edx,0x19
c000b3b6:	77 34                	ja     c000b3ec <File::tell(unsigned long long*)+0x4c>
c000b3b8:	8b 14 95 20 84 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7be0]
c000b3bf:	85 d2                	test   edx,edx
c000b3c1:	74 29                	je     c000b3ec <File::tell(unsigned long long*)+0x4c>
c000b3c3:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b3c9:	85 d2                	test   edx,edx
c000b3cb:	74 1f                	je     c000b3ec <File::tell(unsigned long long*)+0x4c>
c000b3cd:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b3d1:	b8 05 00 00 00       	mov    eax,0x5
c000b3d6:	74 14                	je     c000b3ec <File::tell(unsigned long long*)+0x4c>
c000b3d8:	50                   	push   eax
c000b3d9:	8b 02                	mov    eax,DWORD PTR [edx]
c000b3db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b3df:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b3e5:	52                   	push   edx
c000b3e6:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b3e9:	83 c4 10             	add    esp,0x10
c000b3ec:	83 c4 0c             	add    esp,0xc
c000b3ef:	c3                   	ret    

c000b3f0 <File::rewind()>:
c000b3f0:	83 ec 10             	sub    esp,0x10
c000b3f3:	6a 00                	push   0x0
c000b3f5:	6a 00                	push   0x0
c000b3f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3fb:	e8 f4 fe ff ff       	call   c000b2f4 <File::seek(unsigned long long)>
c000b400:	83 c4 1c             	add    esp,0x1c
c000b403:	c3                   	ret    

c000b404 <File::unlink()>:
c000b404:	83 ec 0c             	sub    esp,0xc
c000b407:	b8 0b 00 00 00       	mov    eax,0xb
c000b40c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b410:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b417:	83 f9 19             	cmp    ecx,0x19
c000b41a:	77 2f                	ja     c000b44b <File::unlink()+0x47>
c000b41c:	8b 0c 8d 20 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7be0]
c000b423:	85 c9                	test   ecx,ecx
c000b425:	74 24                	je     c000b44b <File::unlink()+0x47>
c000b427:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b42d:	85 c9                	test   ecx,ecx
c000b42f:	74 1a                	je     c000b44b <File::unlink()+0x47>
c000b431:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b435:	b8 06 00 00 00       	mov    eax,0x6
c000b43a:	75 0f                	jne    c000b44b <File::unlink()+0x47>
c000b43c:	50                   	push   eax
c000b43d:	83 c2 0d             	add    edx,0xd
c000b440:	50                   	push   eax
c000b441:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b443:	52                   	push   edx
c000b444:	51                   	push   ecx
c000b445:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b448:	83 c4 10             	add    esp,0x10
c000b44b:	83 c4 0c             	add    esp,0xc
c000b44e:	c3                   	ret    
c000b44f:	90                   	nop

c000b450 <File::rename(char const*)>:
c000b450:	83 ec 0c             	sub    esp,0xc
c000b453:	b8 0b 00 00 00       	mov    eax,0xb
c000b458:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b45c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b463:	83 f9 19             	cmp    ecx,0x19
c000b466:	77 32                	ja     c000b49a <File::rename(char const*)+0x4a>
c000b468:	8b 0c 8d 20 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7be0]
c000b46f:	85 c9                	test   ecx,ecx
c000b471:	74 27                	je     c000b49a <File::rename(char const*)+0x4a>
c000b473:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b479:	85 c9                	test   ecx,ecx
c000b47b:	74 1d                	je     c000b49a <File::rename(char const*)+0x4a>
c000b47d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b481:	b8 06 00 00 00       	mov    eax,0x6
c000b486:	75 12                	jne    c000b49a <File::rename(char const*)+0x4a>
c000b488:	50                   	push   eax
c000b489:	83 c2 0d             	add    edx,0xd
c000b48c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b48e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b492:	52                   	push   edx
c000b493:	51                   	push   ecx
c000b494:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b497:	83 c4 10             	add    esp,0x10
c000b49a:	83 c4 0c             	add    esp,0xc
c000b49d:	c3                   	ret    

c000b49e <File::chfatattr(unsigned char, unsigned char)>:
c000b49e:	57                   	push   edi
c000b49f:	b8 0b 00 00 00       	mov    eax,0xb
c000b4a4:	56                   	push   esi
c000b4a5:	53                   	push   ebx
c000b4a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b4aa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b4ae:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b4b2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b4b9:	83 f9 19             	cmp    ecx,0x19
c000b4bc:	77 37                	ja     c000b4f5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b4be:	8b 0c 8d 20 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7be0]
c000b4c5:	85 c9                	test   ecx,ecx
c000b4c7:	74 2c                	je     c000b4f5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b4c9:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b4cf:	85 c9                	test   ecx,ecx
c000b4d1:	74 22                	je     c000b4f5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b4d3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b4d7:	b8 06 00 00 00       	mov    eax,0x6
c000b4dc:	75 17                	jne    c000b4f5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b4de:	89 f0                	mov    eax,esi
c000b4e0:	8b 39                	mov    edi,DWORD PTR [ecx]
c000b4e2:	0f b6 db             	movzx  ebx,bl
c000b4e5:	0f b6 f0             	movzx  esi,al
c000b4e8:	83 c2 0d             	add    edx,0xd
c000b4eb:	56                   	push   esi
c000b4ec:	53                   	push   ebx
c000b4ed:	52                   	push   edx
c000b4ee:	51                   	push   ecx
c000b4ef:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000b4f2:	83 c4 10             	add    esp,0x10
c000b4f5:	5b                   	pop    ebx
c000b4f6:	5e                   	pop    esi
c000b4f7:	5f                   	pop    edi
c000b4f8:	c3                   	ret    
c000b4f9:	90                   	nop

c000b4fa <File::exists()>:
c000b4fa:	83 ec 0c             	sub    esp,0xc
c000b4fd:	31 c0                	xor    eax,eax
c000b4ff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b503:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b50a:	83 f9 19             	cmp    ecx,0x19
c000b50d:	77 24                	ja     c000b533 <File::exists()+0x39>
c000b50f:	8b 0c 8d 20 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7be0]
c000b516:	85 c9                	test   ecx,ecx
c000b518:	74 19                	je     c000b533 <File::exists()+0x39>
c000b51a:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b520:	85 c9                	test   ecx,ecx
c000b522:	74 0f                	je     c000b533 <File::exists()+0x39>
c000b524:	50                   	push   eax
c000b525:	83 c2 0d             	add    edx,0xd
c000b528:	50                   	push   eax
c000b529:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b52b:	52                   	push   edx
c000b52c:	51                   	push   ecx
c000b52d:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000b530:	83 c4 10             	add    esp,0x10
c000b533:	83 c4 0c             	add    esp,0xc
c000b536:	c3                   	ret    
c000b537:	90                   	nop

c000b538 <File::stat(unsigned long long*, bool*)>:
c000b538:	56                   	push   esi
c000b539:	53                   	push   ebx
c000b53a:	50                   	push   eax
c000b53b:	b8 0b 00 00 00       	mov    eax,0xb
c000b540:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b544:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b548:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b54c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b553:	83 f9 19             	cmp    ecx,0x19
c000b556:	77 3d                	ja     c000b595 <File::stat(unsigned long long*, bool*)+0x5d>
c000b558:	8b 0c 8d 20 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7be0]
c000b55f:	85 c9                	test   ecx,ecx
c000b561:	74 32                	je     c000b595 <File::stat(unsigned long long*, bool*)+0x5d>
c000b563:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b569:	85 c9                	test   ecx,ecx
c000b56b:	74 28                	je     c000b595 <File::stat(unsigned long long*, bool*)+0x5d>
c000b56d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b571:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b573:	74 13                	je     c000b588 <File::stat(unsigned long long*, bool*)+0x50>
c000b575:	83 ec 04             	sub    esp,0x4
c000b578:	56                   	push   esi
c000b579:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b57f:	51                   	push   ecx
c000b580:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000b583:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000b586:	eb 0a                	jmp    c000b592 <File::stat(unsigned long long*, bool*)+0x5a>
c000b588:	53                   	push   ebx
c000b589:	83 c2 0d             	add    edx,0xd
c000b58c:	56                   	push   esi
c000b58d:	52                   	push   edx
c000b58e:	51                   	push   ecx
c000b58f:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000b592:	83 c4 10             	add    esp,0x10
c000b595:	5a                   	pop    edx
c000b596:	5b                   	pop    ebx
c000b597:	5e                   	pop    esi
c000b598:	c3                   	ret    

c000b599 <Fs::setcwd(Process*, char*)>:
c000b599:	55                   	push   ebp
c000b59a:	57                   	push   edi
c000b59b:	56                   	push   esi
c000b59c:	53                   	push   ebx
c000b59d:	81 ec 20 02 00 00    	sub    esp,0x220
c000b5a3:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000b5aa:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000b5b0:	57                   	push   edi
c000b5b1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000b5b8:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b5bc:	56                   	push   esi
c000b5bd:	e8 dc f9 ff ff       	call   c000af9e <Fs::standardiseFiles(char*, char const*, char const*)>
c000b5c2:	89 34 24             	mov    DWORD PTR [esp],esi
c000b5c5:	e8 b6 4f ff ff       	call   c0000580 <strlen>
c000b5ca:	83 c4 10             	add    esp,0x10
c000b5cd:	83 f8 02             	cmp    eax,0x2
c000b5d0:	77 15                	ja     c000b5e7 <Fs::setcwd(Process*, char*)+0x4e>
c000b5d2:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000b5d7:	83 eb 41             	sub    ebx,0x41
c000b5da:	8b 04 9d 20 84 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7be0]
c000b5e1:	85 c0                	test   eax,eax
c000b5e3:	75 1c                	jne    c000b601 <Fs::setcwd(Process*, char*)+0x68>
c000b5e5:	eb 2f                	jmp    c000b616 <Fs::setcwd(Process*, char*)+0x7d>
c000b5e7:	83 ec 0c             	sub    esp,0xc
c000b5ea:	56                   	push   esi
c000b5eb:	e8 90 4f ff ff       	call   c0000580 <strlen>
c000b5f0:	83 c4 10             	add    esp,0x10
c000b5f3:	83 f8 03             	cmp    eax,0x3
c000b5f6:	75 57                	jne    c000b64f <Fs::setcwd(Process*, char*)+0xb6>
c000b5f8:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000b5fd:	75 50                	jne    c000b64f <Fs::setcwd(Process*, char*)+0xb6>
c000b5ff:	eb d1                	jmp    c000b5d2 <Fs::setcwd(Process*, char*)+0x39>
c000b601:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000b608:	75 0c                	jne    c000b616 <Fs::setcwd(Process*, char*)+0x7d>
c000b60a:	83 ec 0c             	sub    esp,0xc
c000b60d:	50                   	push   eax
c000b60e:	e8 9d 1d 00 00       	call   c000d3b0 <LogicalDisk::mount()>
c000b613:	83 c4 10             	add    esp,0x10
c000b616:	83 fb 19             	cmp    ebx,0x19
c000b619:	b8 03 00 00 00       	mov    eax,0x3
c000b61e:	0f 87 c6 00 00 00    	ja     c000b6ea <Fs::setcwd(Process*, char*)+0x151>
c000b624:	8b 14 9d 20 84 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd7be0]
c000b62b:	b8 05 00 00 00       	mov    eax,0x5
c000b630:	85 d2                	test   edx,edx
c000b632:	0f 84 b2 00 00 00    	je     c000b6ea <Fs::setcwd(Process*, char*)+0x151>
c000b638:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000b63f:	b8 06 00 00 00       	mov    eax,0x6
c000b644:	0f 85 92 00 00 00    	jne    c000b6dc <Fs::setcwd(Process*, char*)+0x143>
c000b64a:	e9 9b 00 00 00       	jmp    c000b6ea <Fs::setcwd(Process*, char*)+0x151>
c000b64f:	83 ec 0c             	sub    esp,0xc
c000b652:	68 14 01 00 00       	push   0x114
c000b657:	e8 6f c4 ff ff       	call   c0007acb <malloc>
c000b65c:	83 c4 0c             	add    esp,0xc
c000b65f:	55                   	push   ebp
c000b660:	56                   	push   esi
c000b661:	50                   	push   eax
c000b662:	89 c3                	mov    ebx,eax
c000b664:	e8 11 fb ff ff       	call   c000b17a <File::File(char const*, Process*)>
c000b669:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b66e:	83 c4 0c             	add    esp,0xc
c000b671:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b675:	50                   	push   eax
c000b676:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b67a:	50                   	push   eax
c000b67b:	53                   	push   ebx
c000b67c:	e8 b7 fe ff ff       	call   c000b538 <File::stat(unsigned long long*, bool*)>
c000b681:	83 c4 10             	add    esp,0x10
c000b684:	83 f8 02             	cmp    eax,0x2
c000b687:	74 27                	je     c000b6b0 <Fs::setcwd(Process*, char*)+0x117>
c000b689:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b68e:	75 1c                	jne    c000b6ac <Fs::setcwd(Process*, char*)+0x113>
c000b690:	85 db                	test   ebx,ebx
c000b692:	b8 02 00 00 00       	mov    eax,0x2
c000b697:	74 51                	je     c000b6ea <Fs::setcwd(Process*, char*)+0x151>
c000b699:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b69b:	83 ec 0c             	sub    esp,0xc
c000b69e:	53                   	push   ebx
c000b69f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b6a2:	83 c4 10             	add    esp,0x10
c000b6a5:	b8 02 00 00 00       	mov    eax,0x2
c000b6aa:	eb 3e                	jmp    c000b6ea <Fs::setcwd(Process*, char*)+0x151>
c000b6ac:	85 c0                	test   eax,eax
c000b6ae:	74 1c                	je     c000b6cc <Fs::setcwd(Process*, char*)+0x133>
c000b6b0:	85 db                	test   ebx,ebx
c000b6b2:	b8 01 00 00 00       	mov    eax,0x1
c000b6b7:	74 31                	je     c000b6ea <Fs::setcwd(Process*, char*)+0x151>
c000b6b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b6bb:	83 ec 0c             	sub    esp,0xc
c000b6be:	53                   	push   ebx
c000b6bf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b6c2:	83 c4 10             	add    esp,0x10
c000b6c5:	b8 01 00 00 00       	mov    eax,0x1
c000b6ca:	eb 1e                	jmp    c000b6ea <Fs::setcwd(Process*, char*)+0x151>
c000b6cc:	85 db                	test   ebx,ebx
c000b6ce:	74 0c                	je     c000b6dc <Fs::setcwd(Process*, char*)+0x143>
c000b6d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b6d2:	83 ec 0c             	sub    esp,0xc
c000b6d5:	53                   	push   ebx
c000b6d6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b6d9:	83 c4 10             	add    esp,0x10
c000b6dc:	50                   	push   eax
c000b6dd:	50                   	push   eax
c000b6de:	56                   	push   esi
c000b6df:	57                   	push   edi
c000b6e0:	e8 6b 4f ff ff       	call   c0000650 <strcpy>
c000b6e5:	83 c4 10             	add    esp,0x10
c000b6e8:	31 c0                	xor    eax,eax
c000b6ea:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b6f0:	5b                   	pop    ebx
c000b6f1:	5e                   	pop    esi
c000b6f2:	5f                   	pop    edi
c000b6f3:	5d                   	pop    ebp
c000b6f4:	c3                   	ret    
c000b6f5:	90                   	nop

c000b6f6 <Directory::Directory(char const*, Process*)>:
c000b6f6:	83 ec 0c             	sub    esp,0xc
c000b6f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6fd:	83 ec 08             	sub    esp,0x8
c000b700:	6a 00                	push   0x0
c000b702:	50                   	push   eax
c000b703:	e8 92 da ff ff       	call   c000919a <UnixFile::UnixFile(int)>
c000b708:	83 c4 10             	add    esp,0x10
c000b70b:	ba e0 0b 02 c0       	mov    edx,0xc0020be0
c000b710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b714:	89 10                	mov    DWORD PTR [eax],edx
c000b716:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b71a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b724:	83 c0 0d             	add    eax,0xd
c000b727:	83 ec 04             	sub    esp,0x4
c000b72a:	52                   	push   edx
c000b72b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b72f:	50                   	push   eax
c000b730:	e8 69 f8 ff ff       	call   c000af9e <Fs::standardiseFiles(char*, char const*, char const*)>
c000b735:	83 c4 10             	add    esp,0x10
c000b738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b73c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b73f:	83 e8 41             	sub    eax,0x41
c000b742:	88 c2                	mov    dl,al
c000b744:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b748:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b74e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b752:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b75a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b760:	0f b6 c0             	movzx  eax,al
c000b763:	8b 04 85 20 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7be0]
c000b76a:	85 c0                	test   eax,eax
c000b76c:	74 3e                	je     c000b7ac <Directory::Directory(char const*, Process*)+0xb6>
c000b76e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b772:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b778:	0f b6 c0             	movzx  eax,al
c000b77b:	8b 04 85 20 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7be0]
c000b782:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b788:	85 c0                	test   eax,eax
c000b78a:	75 20                	jne    c000b7ac <Directory::Directory(char const*, Process*)+0xb6>
c000b78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b790:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b796:	0f b6 c0             	movzx  eax,al
c000b799:	8b 04 85 20 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7be0]
c000b7a0:	83 ec 0c             	sub    esp,0xc
c000b7a3:	50                   	push   eax
c000b7a4:	e8 07 1c 00 00       	call   c000d3b0 <LogicalDisk::mount()>
c000b7a9:	83 c4 10             	add    esp,0x10
c000b7ac:	90                   	nop
c000b7ad:	83 c4 0c             	add    esp,0xc
c000b7b0:	c3                   	ret    
c000b7b1:	90                   	nop

c000b7b2 <Directory::open()>:
c000b7b2:	53                   	push   ebx
c000b7b3:	b8 0b 00 00 00       	mov    eax,0xb
c000b7b8:	83 ec 08             	sub    esp,0x8
c000b7bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b7bf:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b7c6:	83 fa 19             	cmp    edx,0x19
c000b7c9:	77 3d                	ja     c000b808 <Directory::open()+0x56>
c000b7cb:	8b 14 95 20 84 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7be0]
c000b7d2:	85 d2                	test   edx,edx
c000b7d4:	74 32                	je     c000b808 <Directory::open()+0x56>
c000b7d6:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b7dc:	85 d2                	test   edx,edx
c000b7de:	74 28                	je     c000b808 <Directory::open()+0x56>
c000b7e0:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b7e4:	b8 06 00 00 00       	mov    eax,0x6
c000b7e9:	75 1d                	jne    c000b808 <Directory::open()+0x56>
c000b7eb:	50                   	push   eax
c000b7ec:	8b 02                	mov    eax,DWORD PTR [edx]
c000b7ee:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b7f4:	51                   	push   ecx
c000b7f5:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b7f8:	51                   	push   ecx
c000b7f9:	52                   	push   edx
c000b7fa:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000b7fd:	83 c4 10             	add    esp,0x10
c000b800:	85 c0                	test   eax,eax
c000b802:	75 04                	jne    c000b808 <Directory::open()+0x56>
c000b804:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b808:	83 c4 08             	add    esp,0x8
c000b80b:	5b                   	pop    ebx
c000b80c:	c3                   	ret    
c000b80d:	90                   	nop

c000b80e <Directory::close()>:
c000b80e:	53                   	push   ebx
c000b80f:	b8 0b 00 00 00       	mov    eax,0xb
c000b814:	83 ec 08             	sub    esp,0x8
c000b817:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b81b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b822:	83 f9 19             	cmp    ecx,0x19
c000b825:	77 41                	ja     c000b868 <Directory::close()+0x5a>
c000b827:	8b 1c 8d 20 84 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7be0]
c000b82e:	85 db                	test   ebx,ebx
c000b830:	74 36                	je     c000b868 <Directory::close()+0x5a>
c000b832:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b839:	74 2d                	je     c000b868 <Directory::close()+0x5a>
c000b83b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b83f:	b8 05 00 00 00       	mov    eax,0x5
c000b844:	74 22                	je     c000b868 <Directory::close()+0x5a>
c000b846:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b84a:	8b 04 8d 20 84 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7be0]
c000b851:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b857:	53                   	push   ebx
c000b858:	53                   	push   ebx
c000b859:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b85b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b861:	50                   	push   eax
c000b862:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000b865:	83 c4 10             	add    esp,0x10
c000b868:	83 c4 08             	add    esp,0x8
c000b86b:	5b                   	pop    ebx
c000b86c:	c3                   	ret    
c000b86d:	90                   	nop

c000b86e <Directory::unlink()>:
c000b86e:	83 ec 0c             	sub    esp,0xc
c000b871:	b8 0b 00 00 00       	mov    eax,0xb
c000b876:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b87a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b881:	83 f9 19             	cmp    ecx,0x19
c000b884:	77 2f                	ja     c000b8b5 <Directory::unlink()+0x47>
c000b886:	8b 0c 8d 20 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7be0]
c000b88d:	85 c9                	test   ecx,ecx
c000b88f:	74 24                	je     c000b8b5 <Directory::unlink()+0x47>
c000b891:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b897:	85 c9                	test   ecx,ecx
c000b899:	74 1a                	je     c000b8b5 <Directory::unlink()+0x47>
c000b89b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b89f:	b8 06 00 00 00       	mov    eax,0x6
c000b8a4:	75 0f                	jne    c000b8b5 <Directory::unlink()+0x47>
c000b8a6:	50                   	push   eax
c000b8a7:	83 c2 0d             	add    edx,0xd
c000b8aa:	50                   	push   eax
c000b8ab:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b8ad:	52                   	push   edx
c000b8ae:	51                   	push   ecx
c000b8af:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b8b2:	83 c4 10             	add    esp,0x10
c000b8b5:	83 c4 0c             	add    esp,0xc
c000b8b8:	c3                   	ret    
c000b8b9:	90                   	nop

c000b8ba <Directory::rename(char const*)>:
c000b8ba:	83 ec 0c             	sub    esp,0xc
c000b8bd:	b8 0b 00 00 00       	mov    eax,0xb
c000b8c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b8c6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b8cd:	83 f9 19             	cmp    ecx,0x19
c000b8d0:	77 32                	ja     c000b904 <Directory::rename(char const*)+0x4a>
c000b8d2:	8b 0c 8d 20 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7be0]
c000b8d9:	85 c9                	test   ecx,ecx
c000b8db:	74 27                	je     c000b904 <Directory::rename(char const*)+0x4a>
c000b8dd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b8e3:	85 c9                	test   ecx,ecx
c000b8e5:	74 1d                	je     c000b904 <Directory::rename(char const*)+0x4a>
c000b8e7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b8eb:	b8 06 00 00 00       	mov    eax,0x6
c000b8f0:	75 12                	jne    c000b904 <Directory::rename(char const*)+0x4a>
c000b8f2:	50                   	push   eax
c000b8f3:	83 c2 0d             	add    edx,0xd
c000b8f6:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b8f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b8fc:	52                   	push   edx
c000b8fd:	51                   	push   ecx
c000b8fe:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b901:	83 c4 10             	add    esp,0x10
c000b904:	83 c4 0c             	add    esp,0xc
c000b907:	c3                   	ret    

c000b908 <Directory::exists()>:
c000b908:	83 ec 0c             	sub    esp,0xc
c000b90b:	31 c0                	xor    eax,eax
c000b90d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b911:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b918:	83 f9 19             	cmp    ecx,0x19
c000b91b:	77 24                	ja     c000b941 <Directory::exists()+0x39>
c000b91d:	8b 0c 8d 20 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7be0]
c000b924:	85 c9                	test   ecx,ecx
c000b926:	74 19                	je     c000b941 <Directory::exists()+0x39>
c000b928:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b92e:	85 c9                	test   ecx,ecx
c000b930:	74 0f                	je     c000b941 <Directory::exists()+0x39>
c000b932:	50                   	push   eax
c000b933:	83 c2 0d             	add    edx,0xd
c000b936:	50                   	push   eax
c000b937:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b939:	52                   	push   edx
c000b93a:	51                   	push   ecx
c000b93b:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000b93e:	83 c4 10             	add    esp,0x10
c000b941:	83 c4 0c             	add    esp,0xc
c000b944:	c3                   	ret    
c000b945:	90                   	nop

c000b946 <Directory::read(dirent*)>:
c000b946:	83 ec 1c             	sub    esp,0x1c
c000b949:	b8 0b 00 00 00       	mov    eax,0xb
c000b94e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b952:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b959:	83 f9 19             	cmp    ecx,0x19
c000b95c:	77 30                	ja     c000b98e <Directory::read(dirent*)+0x48>
c000b95e:	8b 0c 8d 20 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7be0]
c000b965:	85 c9                	test   ecx,ecx
c000b967:	74 25                	je     c000b98e <Directory::read(dirent*)+0x48>
c000b969:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000b970:	74 1c                	je     c000b98e <Directory::read(dirent*)+0x48>
c000b972:	83 ec 0c             	sub    esp,0xc
c000b975:	8b 02                	mov    eax,DWORD PTR [edx]
c000b977:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000b97b:	51                   	push   ecx
c000b97c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b980:	6a 00                	push   0x0
c000b982:	68 10 01 00 00       	push   0x110
c000b987:	52                   	push   edx
c000b988:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b98b:	83 c4 20             	add    esp,0x20
c000b98e:	83 c4 1c             	add    esp,0x1c
c000b991:	c3                   	ret    

c000b992 <Directory::create()>:
c000b992:	83 ec 0c             	sub    esp,0xc
c000b995:	b8 0b 00 00 00       	mov    eax,0xb
c000b99a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b99e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b9a5:	83 f9 19             	cmp    ecx,0x19
c000b9a8:	77 2f                	ja     c000b9d9 <Directory::create()+0x47>
c000b9aa:	8b 0c 8d 20 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7be0]
c000b9b1:	85 c9                	test   ecx,ecx
c000b9b3:	74 24                	je     c000b9d9 <Directory::create()+0x47>
c000b9b5:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b9bb:	85 c9                	test   ecx,ecx
c000b9bd:	74 1a                	je     c000b9d9 <Directory::create()+0x47>
c000b9bf:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b9c3:	b8 06 00 00 00       	mov    eax,0x6
c000b9c8:	75 0f                	jne    c000b9d9 <Directory::create()+0x47>
c000b9ca:	50                   	push   eax
c000b9cb:	83 c2 0d             	add    edx,0xd
c000b9ce:	50                   	push   eax
c000b9cf:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b9d1:	52                   	push   edx
c000b9d2:	51                   	push   ecx
c000b9d3:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b9d6:	83 c4 10             	add    esp,0x10
c000b9d9:	83 c4 0c             	add    esp,0xc
c000b9dc:	c3                   	ret    
c000b9dd:	90                   	nop

c000b9de <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b9de:	b8 0a 00 00 00       	mov    eax,0xa
c000b9e3:	c3                   	ret    

c000b9e4 <Bus::Bus(char const*)>:
c000b9e4:	83 ec 0c             	sub    esp,0xc
c000b9e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9eb:	83 ec 08             	sub    esp,0x8
c000b9ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9f2:	50                   	push   eax
c000b9f3:	e8 28 08 00 00       	call   c000c220 <Device::Device(char const*)>
c000b9f8:	83 c4 10             	add    esp,0x10
c000b9fb:	ba fc 0b 02 c0       	mov    edx,0xc0020bfc
c000ba00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba04:	89 10                	mov    DWORD PTR [eax],edx
c000ba06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba0a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000ba14:	90                   	nop
c000ba15:	83 c4 0c             	add    esp,0xc
c000ba18:	c3                   	ret    
c000ba19:	90                   	nop
c000ba1a:	66 90                	xchg   ax,ax

c000ba1c <Bus::~Bus()>:
c000ba1c:	83 ec 0c             	sub    esp,0xc
c000ba1f:	ba fc 0b 02 c0       	mov    edx,0xc0020bfc
c000ba24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba28:	89 10                	mov    DWORD PTR [eax],edx
c000ba2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba2e:	83 ec 0c             	sub    esp,0xc
c000ba31:	50                   	push   eax
c000ba32:	e8 53 05 00 00       	call   c000bf8a <Device::~Device()>
c000ba37:	83 c4 10             	add    esp,0x10
c000ba3a:	90                   	nop
c000ba3b:	83 c4 0c             	add    esp,0xc
c000ba3e:	c3                   	ret    
c000ba3f:	90                   	nop

c000ba40 <Bus::~Bus()>:
c000ba40:	83 ec 0c             	sub    esp,0xc
c000ba43:	83 ec 0c             	sub    esp,0xc
c000ba46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba4a:	e8 cd ff ff ff       	call   c000ba1c <Bus::~Bus()>
c000ba4f:	83 c4 10             	add    esp,0x10
c000ba52:	83 ec 08             	sub    esp,0x8
c000ba55:	68 58 01 00 00       	push   0x158
c000ba5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba5e:	e8 9d ed ff ff       	call   c000a800 <operator delete(void*, unsigned long)>
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	83 c4 0c             	add    esp,0xc
c000ba69:	c3                   	ret    

c000ba6a <beepThread(void*)>:
c000ba6a:	83 ec 0c             	sub    esp,0xc
c000ba6d:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000ba72:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba76:	48                   	dec    eax
c000ba77:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c000ba7c:	75 01                	jne    c000ba7f <beepThread(void*)+0x15>
c000ba7e:	fb                   	sti    
c000ba7f:	6b c2 0a             	imul   eax,edx,0xa
c000ba82:	83 ec 0c             	sub    esp,0xc
c000ba85:	50                   	push   eax
c000ba86:	e8 05 9d 00 00       	call   c0015790 <milliTenthSleep(unsigned int)>
c000ba8b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000ba92:	e8 52 bc 00 00       	call   c00176e9 <HalMakeBeep(int)>
c000ba97:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000ba9f:	83 c4 1c             	add    esp,0x1c
c000baa2:	e9 cd 9b 00 00       	jmp    c0015674 <blockTask(TaskState)>

c000baa7 <Krnl::beep(int, int, bool)>:
c000baa7:	56                   	push   esi
c000baa8:	53                   	push   ebx
c000baa9:	83 ec 10             	sub    esp,0x10
c000baac:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000bab0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab8:	e8 2c bc 00 00       	call   c00176e9 <HalMakeBeep(int)>
c000babd:	89 f0                	mov    eax,esi
c000babf:	83 c4 10             	add    esp,0x10
c000bac2:	84 c0                	test   al,al
c000bac4:	74 1e                	je     c000bae4 <Krnl::beep(int, int, bool)+0x3d>
c000bac6:	6b db 0a             	imul   ebx,ebx,0xa
c000bac9:	83 ec 0c             	sub    esp,0xc
c000bacc:	53                   	push   ebx
c000bacd:	e8 be 9c 00 00       	call   c0015790 <milliTenthSleep(unsigned int)>
c000bad2:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000bada:	83 c4 14             	add    esp,0x14
c000badd:	5b                   	pop    ebx
c000bade:	5e                   	pop    esi
c000badf:	e9 05 bc 00 00       	jmp    c00176e9 <HalMakeBeep(int)>
c000bae4:	68 e6 00 00 00       	push   0xe6
c000bae9:	53                   	push   ebx
c000baea:	68 6a ba 00 c0       	push   0xc000ba6a
c000baef:	ff 35 90 91 02 c0    	push   DWORD PTR ds:0xc0029190
c000baf5:	e8 2e 97 00 00       	call   c0015228 <Process::createThread(void (*)(void*), void*, int)>
c000bafa:	83 c4 14             	add    esp,0x14
c000bafd:	5b                   	pop    ebx
c000bafe:	5e                   	pop    esi
c000baff:	c3                   	ret    

c000bb00 <User::loadClockSettings(int)>:
c000bb00:	53                   	push   ebx
c000bb01:	83 ec 14             	sub    esp,0x14
c000bb04:	68 14 01 00 00       	push   0x114
c000bb09:	e8 bd bf ff ff       	call   c0007acb <malloc>
c000bb0e:	83 c4 0c             	add    esp,0xc
c000bb11:	ff 35 90 91 02 c0    	push   DWORD PTR ds:0xc0029190
c000bb17:	68 20 0c 02 c0       	push   0xc0020c20
c000bb1c:	50                   	push   eax
c000bb1d:	89 c3                	mov    ebx,eax
c000bb1f:	e8 56 f6 ff ff       	call   c000b17a <File::File(char const*, Process*)>
c000bb24:	58                   	pop    eax
c000bb25:	5a                   	pop    edx
c000bb26:	6a 01                	push   0x1
c000bb28:	53                   	push   ebx
c000bb29:	e8 08 f7 ff ff       	call   c000b236 <File::open(FileOpenMode)>
c000bb2e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bb31:	e8 5e f7 ff ff       	call   c000b294 <File::close()>
c000bb36:	83 c4 10             	add    esp,0x10
c000bb39:	85 db                	test   ebx,ebx
c000bb3b:	74 0f                	je     c000bb4c <User::loadClockSettings(int)+0x4c>
c000bb3d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb3f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000bb43:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bb46:	83 c4 08             	add    esp,0x8
c000bb49:	5b                   	pop    ebx
c000bb4a:	ff e0                	jmp    eax
c000bb4c:	83 c4 08             	add    esp,0x8
c000bb4f:	5b                   	pop    ebx
c000bb50:	c3                   	ret    
c000bb51:	90                   	nop

c000bb52 <Clock::Clock(char const*)>:
c000bb52:	83 ec 0c             	sub    esp,0xc
c000bb55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb59:	83 ec 08             	sub    esp,0x8
c000bb5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb60:	50                   	push   eax
c000bb61:	e8 ba 06 00 00       	call   c000c220 <Device::Device(char const*)>
c000bb66:	83 c4 10             	add    esp,0x10
c000bb69:	ba 48 0c 02 c0       	mov    edx,0xc0020c48
c000bb6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb72:	89 10                	mov    DWORD PTR [eax],edx
c000bb74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb78:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000bb82:	90                   	nop
c000bb83:	83 c4 0c             	add    esp,0xc
c000bb86:	c3                   	ret    
c000bb87:	90                   	nop

c000bb88 <Clock::~Clock()>:
c000bb88:	83 ec 0c             	sub    esp,0xc
c000bb8b:	ba 48 0c 02 c0       	mov    edx,0xc0020c48
c000bb90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb94:	89 10                	mov    DWORD PTR [eax],edx
c000bb96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb9a:	83 ec 0c             	sub    esp,0xc
c000bb9d:	50                   	push   eax
c000bb9e:	e8 e7 03 00 00       	call   c000bf8a <Device::~Device()>
c000bba3:	83 c4 10             	add    esp,0x10
c000bba6:	90                   	nop
c000bba7:	83 c4 0c             	add    esp,0xc
c000bbaa:	c3                   	ret    
c000bbab:	90                   	nop

c000bbac <Clock::~Clock()>:
c000bbac:	83 ec 0c             	sub    esp,0xc
c000bbaf:	83 ec 0c             	sub    esp,0xc
c000bbb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbb6:	e8 cd ff ff ff       	call   c000bb88 <Clock::~Clock()>
c000bbbb:	83 c4 10             	add    esp,0x10
c000bbbe:	83 ec 08             	sub    esp,0x8
c000bbc1:	68 58 01 00 00       	push   0x158
c000bbc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbca:	e8 31 ec ff ff       	call   c000a800 <operator delete(void*, unsigned long)>
c000bbcf:	83 c4 10             	add    esp,0x10
c000bbd2:	83 c4 0c             	add    esp,0xc
c000bbd5:	c3                   	ret    

c000bbd6 <Clock::timeInSecondsLocal()>:
c000bbd6:	53                   	push   ebx
c000bbd7:	83 ec 14             	sub    esp,0x14
c000bbda:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bbde:	8b 10                	mov    edx,DWORD PTR [eax]
c000bbe0:	50                   	push   eax
c000bbe1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000bbe4:	0f b6 0d b8 5f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0025fb8
c000bbeb:	03 0d bc 5f 02 c0    	add    ecx,DWORD PTR ds:0xc0025fbc
c000bbf1:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bbf7:	89 cb                	mov    ebx,ecx
c000bbf9:	c1 fb 1f             	sar    ebx,0x1f
c000bbfc:	01 c8                	add    eax,ecx
c000bbfe:	11 da                	adc    edx,ebx
c000bc00:	83 c4 10             	add    esp,0x10
c000bc03:	31 c9                	xor    ecx,ecx
c000bc05:	80 3d b9 5f 02 c0 00 	cmp    BYTE PTR ds:0xc0025fb9,0x0
c000bc0c:	74 05                	je     c000bc13 <Clock::timeInSecondsLocal()+0x3d>
c000bc0e:	b9 08 07 00 00       	mov    ecx,0x708
c000bc13:	31 db                	xor    ebx,ebx
c000bc15:	01 c8                	add    eax,ecx
c000bc17:	11 da                	adc    edx,ebx
c000bc19:	83 c4 08             	add    esp,0x8
c000bc1c:	5b                   	pop    ebx
c000bc1d:	c3                   	ret    

c000bc1e <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000bc1e:	57                   	push   edi
c000bc1f:	56                   	push   esi
c000bc20:	53                   	push   ebx
c000bc21:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bc25:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bc29:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bc2d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bc2f:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000bc32:	0f b6 05 b8 5f 02 c0 	movzx  eax,BYTE PTR ds:0xc0025fb8
c000bc39:	03 05 bc 5f 02 c0    	add    eax,DWORD PTR ds:0xc0025fbc
c000bc3f:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000bc45:	99                   	cdq    
c000bc46:	29 c6                	sub    esi,eax
c000bc48:	19 d7                	sbb    edi,edx
c000bc4a:	89 f0                	mov    eax,esi
c000bc4c:	31 f6                	xor    esi,esi
c000bc4e:	89 fa                	mov    edx,edi
c000bc50:	80 3d b9 5f 02 c0 00 	cmp    BYTE PTR ds:0xc0025fb9,0x0
c000bc57:	74 05                	je     c000bc5e <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000bc59:	be 08 07 00 00       	mov    esi,0x708
c000bc5e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000bc62:	31 ff                	xor    edi,edi
c000bc64:	29 f0                	sub    eax,esi
c000bc66:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bc6a:	19 fa                	sbb    edx,edi
c000bc6c:	89 d8                	mov    eax,ebx
c000bc6e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bc72:	5b                   	pop    ebx
c000bc73:	5e                   	pop    esi
c000bc74:	5f                   	pop    edi
c000bc75:	ff e0                	jmp    eax

c000bc77 <datetimeToSeconds(datetime_t)>:
c000bc77:	55                   	push   ebp
c000bc78:	57                   	push   edi
c000bc79:	56                   	push   esi
c000bc7a:	53                   	push   ebx
c000bc7b:	83 ec 0c             	sub    esp,0xc
c000bc7e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000bc82:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bc86:	89 f7                	mov    edi,esi
c000bc88:	89 f0                	mov    eax,esi
c000bc8a:	0f b6 cf             	movzx  ecx,bh
c000bc8d:	0f b6 c4             	movzx  eax,ah
c000bc90:	c1 ef 10             	shr    edi,0x10
c000bc93:	89 da                	mov    edx,ebx
c000bc95:	8d 69 ff             	lea    ebp,[ecx-0x1]
c000bc98:	89 f9                	mov    ecx,edi
c000bc9a:	0f b6 f9             	movzx  edi,cl
c000bc9d:	89 f1                	mov    ecx,esi
c000bc9f:	6b c0 3c             	imul   eax,eax,0x3c
c000bca2:	0f b6 f1             	movzx  esi,cl
c000bca5:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c000bcab:	0f b6 db             	movzx  ebx,bl
c000bcae:	c1 ea 10             	shr    edx,0x10
c000bcb1:	81 ea 6c 07 00 00    	sub    edx,0x76c
c000bcb7:	01 f8                	add    eax,edi
c000bcb9:	01 f0                	add    eax,esi
c000bcbb:	89 04 24             	mov    DWORD PTR [esp],eax
c000bcbe:	c1 f8 1f             	sar    eax,0x1f
c000bcc1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bcc5:	89 e8                	mov    eax,ebp
c000bcc7:	0f b6 c0             	movzx  eax,al
c000bcca:	8b 0c 85 80 0c 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdf380]
c000bcd1:	83 f8 01             	cmp    eax,0x1
c000bcd4:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c000bcd8:	0f b7 da             	movzx  ebx,dx
c000bcdb:	76 27                	jbe    c000bd04 <datetimeToSeconds(datetime_t)+0x8d>
c000bcdd:	80 e2 03             	and    dl,0x3
c000bce0:	75 22                	jne    c000bd04 <datetimeToSeconds(datetime_t)+0x8d>
c000bce2:	31 d2                	xor    edx,edx
c000bce4:	be 64 00 00 00       	mov    esi,0x64
c000bce9:	89 d8                	mov    eax,ebx
c000bceb:	f7 f6                	div    esi
c000bced:	85 d2                	test   edx,edx
c000bcef:	75 12                	jne    c000bd03 <datetimeToSeconds(datetime_t)+0x8c>
c000bcf1:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000bcf7:	be 90 01 00 00       	mov    esi,0x190
c000bcfc:	99                   	cdq    
c000bcfd:	f7 fe                	idiv   esi
c000bcff:	85 d2                	test   edx,edx
c000bd01:	75 01                	jne    c000bd04 <datetimeToSeconds(datetime_t)+0x8d>
c000bd03:	41                   	inc    ecx
c000bd04:	83 fb 46             	cmp    ebx,0x46
c000bd07:	76 48                	jbe    c000bd51 <datetimeToSeconds(datetime_t)+0xda>
c000bd09:	be 46 00 00 00       	mov    esi,0x46
c000bd0e:	bf 64 00 00 00       	mov    edi,0x64
c000bd13:	bd 90 01 00 00       	mov    ebp,0x190
c000bd18:	f7 c6 03 00 00 00    	test   esi,0x3
c000bd1e:	b8 6d 01 00 00       	mov    eax,0x16d
c000bd23:	75 23                	jne    c000bd48 <datetimeToSeconds(datetime_t)+0xd1>
c000bd25:	89 f0                	mov    eax,esi
c000bd27:	99                   	cdq    
c000bd28:	f7 ff                	idiv   edi
c000bd2a:	b8 6e 01 00 00       	mov    eax,0x16e
c000bd2f:	85 d2                	test   edx,edx
c000bd31:	75 15                	jne    c000bd48 <datetimeToSeconds(datetime_t)+0xd1>
c000bd33:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000bd39:	99                   	cdq    
c000bd3a:	f7 fd                	idiv   ebp
c000bd3c:	83 fa 01             	cmp    edx,0x1
c000bd3f:	19 c0                	sbb    eax,eax
c000bd41:	f7 d0                	not    eax
c000bd43:	05 6e 01 00 00       	add    eax,0x16e
c000bd48:	46                   	inc    esi
c000bd49:	01 c1                	add    ecx,eax
c000bd4b:	39 de                	cmp    esi,ebx
c000bd4d:	7c c9                	jl     c000bd18 <datetimeToSeconds(datetime_t)+0xa1>
c000bd4f:	eb 34                	jmp    c000bd85 <datetimeToSeconds(datetime_t)+0x10e>
c000bd51:	74 32                	je     c000bd85 <datetimeToSeconds(datetime_t)+0x10e>
c000bd53:	b8 45 00 00 00       	mov    eax,0x45
c000bd58:	89 c2                	mov    edx,eax
c000bd5a:	83 e2 03             	and    edx,0x3
c000bd5d:	39 d8                	cmp    eax,ebx
c000bd5f:	7e 0f                	jle    c000bd70 <datetimeToSeconds(datetime_t)+0xf9>
c000bd61:	83 fa 01             	cmp    edx,0x1
c000bd64:	19 d2                	sbb    edx,edx
c000bd66:	48                   	dec    eax
c000bd67:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000bd6e:	eb e8                	jmp    c000bd58 <datetimeToSeconds(datetime_t)+0xe1>
c000bd70:	85 d2                	test   edx,edx
c000bd72:	b8 6d 01 00 00       	mov    eax,0x16d
c000bd77:	75 0a                	jne    c000bd83 <datetimeToSeconds(datetime_t)+0x10c>
c000bd79:	83 fb 01             	cmp    ebx,0x1
c000bd7c:	19 c0                	sbb    eax,eax
c000bd7e:	05 6e 01 00 00       	add    eax,0x16e
c000bd83:	29 c1                	sub    ecx,eax
c000bd85:	b8 80 51 01 00       	mov    eax,0x15180
c000bd8a:	f7 e9                	imul   ecx
c000bd8c:	03 04 24             	add    eax,DWORD PTR [esp]
c000bd8f:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000bd93:	83 c4 0c             	add    esp,0xc
c000bd96:	5b                   	pop    ebx
c000bd97:	5e                   	pop    esi
c000bd98:	5f                   	pop    edi
c000bd99:	5d                   	pop    ebp
c000bd9a:	c3                   	ret    
c000bd9b:	90                   	nop

c000bd9c <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000bd9c:	57                   	push   edi
c000bd9d:	56                   	push   esi
c000bd9e:	53                   	push   ebx
c000bd9f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bda3:	8b 06                	mov    eax,DWORD PTR [esi]
c000bda5:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000bda8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bdac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bdb0:	e8 c2 fe ff ff       	call   c000bc77 <datetimeToSeconds(datetime_t)>
c000bdb5:	59                   	pop    ecx
c000bdb6:	0f b6 0d b8 5f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0025fb8
c000bdbd:	5b                   	pop    ebx
c000bdbe:	03 0d bc 5f 02 c0    	add    ecx,DWORD PTR ds:0xc0025fbc
c000bdc4:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bdca:	89 cb                	mov    ebx,ecx
c000bdcc:	c1 fb 1f             	sar    ebx,0x1f
c000bdcf:	29 c8                	sub    eax,ecx
c000bdd1:	19 da                	sbb    edx,ebx
c000bdd3:	31 c9                	xor    ecx,ecx
c000bdd5:	80 3d b9 5f 02 c0 00 	cmp    BYTE PTR ds:0xc0025fb9,0x0
c000bddc:	74 05                	je     c000bde3 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000bdde:	b9 08 07 00 00       	mov    ecx,0x708
c000bde3:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000bde7:	31 db                	xor    ebx,ebx
c000bde9:	29 c8                	sub    eax,ecx
c000bdeb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bdef:	19 da                	sbb    edx,ebx
c000bdf1:	89 f8                	mov    eax,edi
c000bdf3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bdf7:	5b                   	pop    ebx
c000bdf8:	5e                   	pop    esi
c000bdf9:	5f                   	pop    edi
c000bdfa:	ff e0                	jmp    eax

c000bdfc <secondsToDatetime(unsigned long long)>:
c000bdfc:	55                   	push   ebp
c000bdfd:	57                   	push   edi
c000bdfe:	56                   	push   esi
c000bdff:	53                   	push   ebx
c000be00:	83 ec 1c             	sub    esp,0x1c
c000be03:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000be07:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000be0b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000be0f:	6a 00                	push   0x0
c000be11:	68 80 51 01 00       	push   0x15180
c000be16:	55                   	push   ebp
c000be17:	57                   	push   edi
c000be18:	e8 13 2d 01 00       	call   c001eb30 <__udivdi3>
c000be1d:	83 c4 10             	add    esp,0x10
c000be20:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be24:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000be2a:	6a 00                	push   0x0
c000be2c:	68 80 51 01 00       	push   0x15180
c000be31:	55                   	push   ebp
c000be32:	57                   	push   edi
c000be33:	bf 10 0e 00 00       	mov    edi,0xe10
c000be38:	e8 f3 2d 01 00       	call   c001ec30 <__umoddi3>
c000be3d:	83 c4 10             	add    esp,0x10
c000be40:	99                   	cdq    
c000be41:	f7 ff                	idiv   edi
c000be43:	bf 3c 00 00 00       	mov    edi,0x3c
c000be48:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000be4b:	89 d0                	mov    eax,edx
c000be4d:	99                   	cdq    
c000be4e:	f7 ff                	idiv   edi
c000be50:	85 db                	test   ebx,ebx
c000be52:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000be55:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000be58:	79 11                	jns    c000be6b <secondsToDatetime(unsigned long long)+0x6f>
c000be5a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000be5e:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000be64:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000be69:	eb 07                	jmp    c000be72 <secondsToDatetime(unsigned long long)+0x76>
c000be6b:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000be70:	89 d8                	mov    eax,ebx
c000be72:	99                   	cdq    
c000be73:	bf b4 05 00 00       	mov    edi,0x5b4
c000be78:	f7 f9                	idiv   ecx
c000be7a:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000be7f:	31 d2                	xor    edx,edx
c000be81:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000be86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be8a:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000be92:	01 c3                	add    ebx,eax
c000be94:	89 d8                	mov    eax,ebx
c000be96:	f7 f1                	div    ecx
c000be98:	31 d2                	xor    edx,edx
c000be9a:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000be9d:	89 d8                	mov    eax,ebx
c000be9f:	f7 f7                	div    edi
c000bea1:	31 d2                	xor    edx,edx
c000bea3:	29 c1                	sub    ecx,eax
c000bea5:	89 d8                	mov    eax,ebx
c000bea7:	f7 f5                	div    ebp
c000bea9:	bd 6d 01 00 00       	mov    ebp,0x16d
c000beae:	31 d2                	xor    edx,edx
c000beb0:	29 c1                	sub    ecx,eax
c000beb2:	89 c8                	mov    eax,ecx
c000beb4:	f7 f5                	div    ebp
c000beb6:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000bebb:	31 d2                	xor    edx,edx
c000bebd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bec1:	89 c8                	mov    eax,ecx
c000bec3:	f7 f5                	div    ebp
c000bec5:	31 d2                	xor    edx,edx
c000bec7:	01 c3                	add    ebx,eax
c000bec9:	89 c8                	mov    eax,ecx
c000becb:	f7 f7                	div    edi
c000becd:	bf 99 00 00 00       	mov    edi,0x99
c000bed2:	31 d2                	xor    edx,edx
c000bed4:	29 c3                	sub    ebx,eax
c000bed6:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000bede:	29 c3                	sub    ebx,eax
c000bee0:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000bee3:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000bee6:	83 c1 02             	add    ecx,0x2
c000bee9:	89 c8                	mov    eax,ecx
c000beeb:	bb 05 00 00 00       	mov    ebx,0x5
c000bef0:	f7 f7                	div    edi
c000bef2:	31 d2                	xor    edx,edx
c000bef4:	89 c7                	mov    edi,eax
c000bef6:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000befc:	83 c0 02             	add    eax,0x2
c000beff:	f7 f3                	div    ebx
c000bf01:	89 eb                	mov    ebx,ebp
c000bf03:	29 c3                	sub    ebx,eax
c000bf05:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000bf0b:	88 1e                	mov    BYTE PTR [esi],bl
c000bf0d:	19 c0                	sbb    eax,eax
c000bf0f:	31 d2                	xor    edx,edx
c000bf11:	83 e0 0c             	and    eax,0xc
c000bf14:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000bf18:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000bf20:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bf24:	83 f9 01             	cmp    ecx,0x1
c000bf27:	0f 96 c2             	setbe  dl
c000bf2a:	41                   	inc    ecx
c000bf2b:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000bf2e:	01 d0                	add    eax,edx
c000bf30:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000bf34:	83 c4 1c             	add    esp,0x1c
c000bf37:	89 f0                	mov    eax,esi
c000bf39:	5b                   	pop    ebx
c000bf3a:	5e                   	pop    esi
c000bf3b:	5f                   	pop    edi
c000bf3c:	5d                   	pop    ebp
c000bf3d:	c2 04 00             	ret    0x4

c000bf40 <Clock::timeInDatetimeLocal()>:
c000bf40:	53                   	push   ebx
c000bf41:	83 ec 14             	sub    esp,0x14
c000bf44:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bf48:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bf4c:	e8 85 fc ff ff       	call   c000bbd6 <Clock::timeInSecondsLocal()>
c000bf51:	83 c4 0c             	add    esp,0xc
c000bf54:	52                   	push   edx
c000bf55:	50                   	push   eax
c000bf56:	53                   	push   ebx
c000bf57:	e8 a0 fe ff ff       	call   c000bdfc <secondsToDatetime(unsigned long long)>
c000bf5c:	89 d8                	mov    eax,ebx
c000bf5e:	83 c4 14             	add    esp,0x14
c000bf61:	5b                   	pop    ebx
c000bf62:	c2 04 00             	ret    0x4
c000bf65:	90                   	nop

c000bf66 <Device::hibernate()>:
c000bf66:	c3                   	ret    
c000bf67:	90                   	nop

c000bf68 <Device::wake()>:
c000bf68:	c3                   	ret    
c000bf69:	90                   	nop

c000bf6a <Device::detect()>:
c000bf6a:	c3                   	ret    
c000bf6b:	90                   	nop

c000bf6c <Device::disableLegacy()>:
c000bf6c:	c3                   	ret    
c000bf6d:	90                   	nop

c000bf6e <Device::powerSaving(PowerSavingLevel)>:
c000bf6e:	c3                   	ret    
c000bf6f:	90                   	nop

c000bf70 <DriverlessDevice::close(int, int, void*)>:
c000bf70:	31 c0                	xor    eax,eax
c000bf72:	c3                   	ret    
c000bf73:	90                   	nop

c000bf74 <DriverlessDevice::detect()>:
c000bf74:	c3                   	ret    
c000bf75:	90                   	nop

c000bf76 <DriverlessDevice::open(int, int, void*)>:
c000bf76:	83 ec 18             	sub    esp,0x18
c000bf79:	68 b0 0c 02 c0       	push   0xc0020cb0
c000bf7e:	e8 ee 4b 00 00       	call   c0010b71 <KePanic(char const*)>
c000bf83:	83 c8 ff             	or     eax,0xffffffff
c000bf86:	83 c4 1c             	add    esp,0x1c
c000bf89:	c3                   	ret    

c000bf8a <Device::~Device()>:
c000bf8a:	ba 10 0d 02 c0       	mov    edx,0xc0020d10
c000bf8f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf93:	89 10                	mov    DWORD PTR [eax],edx
c000bf95:	90                   	nop
c000bf96:	c3                   	ret    
c000bf97:	90                   	nop

c000bf98 <Device::~Device()>:
c000bf98:	83 ec 0c             	sub    esp,0xc
c000bf9b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bf9f:	e8 e6 ff ff ff       	call   c000bf8a <Device::~Device()>
c000bfa4:	83 c4 04             	add    esp,0x4
c000bfa7:	83 ec 08             	sub    esp,0x8
c000bfaa:	68 58 01 00 00       	push   0x158
c000bfaf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfb3:	e8 48 e8 ff ff       	call   c000a800 <operator delete(void*, unsigned long)>
c000bfb8:	83 c4 10             	add    esp,0x10
c000bfbb:	83 c4 0c             	add    esp,0xc
c000bfbe:	c3                   	ret    
c000bfbf:	90                   	nop

c000bfc0 <Device::findAndLoadDriver()>:
c000bfc0:	c7 44 24 04 ce 0c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020cce
c000bfc8:	e9 31 e9 ff ff       	jmp    c000a8fe <Dbg::kprintf(char const*, ...)>
c000bfcd:	90                   	nop

c000bfce <Device::preOpenPCI(PCIDeviceInfo)>:
c000bfce:	57                   	push   edi
c000bfcf:	b9 09 00 00 00       	mov    ecx,0x9
c000bfd4:	56                   	push   esi
c000bfd5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000bfd9:	8d 74 24 10          	lea    esi,[esp+0x10]
c000bfdd:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000bfe7:	81 c7 18 01 00 00    	add    edi,0x118
c000bfed:	fc                   	cld    
c000bfee:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000bff0:	5e                   	pop    esi
c000bff1:	5f                   	pop    edi
c000bff2:	c3                   	ret    
c000bff3:	90                   	nop

c000bff4 <Device::preOpenACPI(void*, char*, char*)>:
c000bff4:	57                   	push   edi
c000bff5:	b9 1e 00 00 00       	mov    ecx,0x1e
c000bffa:	56                   	push   esi
c000bffb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bfff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c003:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c007:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c011:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c017:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c01d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c01f:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c025:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c029:	b9 0e 00 00 00       	mov    ecx,0xe
c000c02e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c030:	5e                   	pop    esi
c000c031:	5f                   	pop    edi
c000c032:	c3                   	ret    
c000c033:	90                   	nop

c000c034 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c034:	53                   	push   ebx
c000c035:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c039:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c03d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c041:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c045:	0f b6 c0             	movzx  eax,al
c000c048:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c04c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c050:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c054:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c058:	5b                   	pop    ebx
c000c059:	e9 aa 05 00 00       	jmp    c000c608 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c05e <Device::getParent()>:
c000c05e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c062:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c068:	c3                   	ret    
c000c069:	90                   	nop

c000c06a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c06a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c06e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c072:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c077:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c07b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c07f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c083:	e9 f7 06 00 00       	jmp    c000c77f <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c088 <Device::addChild(Device*)>:
c000c088:	53                   	push   ebx
c000c089:	83 ec 08             	sub    esp,0x8
c000c08c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c090:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c094:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c09a:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c0a0:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c0a2:	85 d2                	test   edx,edx
c000c0a4:	74 04                	je     c000c0aa <Device::addChild(Device*)+0x22>
c000c0a6:	89 d3                	mov    ebx,edx
c000c0a8:	eb f6                	jmp    c000c0a0 <Device::addChild(Device*)+0x18>
c000c0aa:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c0ad:	83 ec 0c             	sub    esp,0xc
c000c0b0:	6a 08                	push   0x8
c000c0b2:	e8 14 ba ff ff       	call   c0007acb <malloc>
c000c0b7:	89 03                	mov    DWORD PTR [ebx],eax
c000c0b9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c0bf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c0c6:	83 c4 18             	add    esp,0x18
c000c0c9:	5b                   	pop    ebx
c000c0ca:	c3                   	ret    
c000c0cb:	90                   	nop

c000c0cc <Device::removeAllChildren()>:
c000c0cc:	56                   	push   esi
c000c0cd:	53                   	push   ebx
c000c0ce:	52                   	push   edx
c000c0cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c0d3:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c0d9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c0dc:	74 17                	je     c000c0f5 <Device::removeAllChildren()+0x29>
c000c0de:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c0e1:	85 c0                	test   eax,eax
c000c0e3:	74 0c                	je     c000c0f1 <Device::removeAllChildren()+0x25>
c000c0e5:	8b 10                	mov    edx,DWORD PTR [eax]
c000c0e7:	83 ec 0c             	sub    esp,0xc
c000c0ea:	50                   	push   eax
c000c0eb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c0ee:	83 c4 10             	add    esp,0x10
c000c0f1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c0f3:	eb e4                	jmp    c000c0d9 <Device::removeAllChildren()+0xd>
c000c0f5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c0fb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c101:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c107:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c10e:	58                   	pop    eax
c000c10f:	5b                   	pop    ebx
c000c110:	5e                   	pop    esi
c000c111:	c3                   	ret    

c000c112 <Device::hibernateAll()>:
c000c112:	53                   	push   ebx
c000c113:	83 ec 14             	sub    esp,0x14
c000c116:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c11a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c11c:	53                   	push   ebx
c000c11d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c120:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c126:	83 c4 10             	add    esp,0x10
c000c129:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c12c:	74 0f                	je     c000c13d <Device::hibernateAll()+0x2b>
c000c12e:	83 ec 0c             	sub    esp,0xc
c000c131:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c134:	e8 d9 ff ff ff       	call   c000c112 <Device::hibernateAll()>
c000c139:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c13b:	eb e9                	jmp    c000c126 <Device::hibernateAll()+0x14>
c000c13d:	83 c4 08             	add    esp,0x8
c000c140:	5b                   	pop    ebx
c000c141:	c3                   	ret    

c000c142 <Device::wakeAll()>:
c000c142:	53                   	push   ebx
c000c143:	83 ec 14             	sub    esp,0x14
c000c146:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c14a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c14c:	53                   	push   ebx
c000c14d:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000c150:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c156:	83 c4 10             	add    esp,0x10
c000c159:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c15c:	74 0f                	je     c000c16d <Device::wakeAll()+0x2b>
c000c15e:	83 ec 0c             	sub    esp,0xc
c000c161:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c164:	e8 d9 ff ff ff       	call   c000c142 <Device::wakeAll()>
c000c169:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c16b:	eb e9                	jmp    c000c156 <Device::wakeAll()+0x14>
c000c16d:	83 c4 08             	add    esp,0x8
c000c170:	5b                   	pop    ebx
c000c171:	c3                   	ret    

c000c172 <Device::detectAll()>:
c000c172:	53                   	push   ebx
c000c173:	83 ec 14             	sub    esp,0x14
c000c176:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c17a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c17c:	53                   	push   ebx
c000c17d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000c180:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c186:	83 c4 10             	add    esp,0x10
c000c189:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c18c:	74 0f                	je     c000c19d <Device::detectAll()+0x2b>
c000c18e:	83 ec 0c             	sub    esp,0xc
c000c191:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c194:	e8 d9 ff ff ff       	call   c000c172 <Device::detectAll()>
c000c199:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c19b:	eb e9                	jmp    c000c186 <Device::detectAll()+0x14>
c000c19d:	83 c4 08             	add    esp,0x8
c000c1a0:	5b                   	pop    ebx
c000c1a1:	c3                   	ret    

c000c1a2 <Device::disableLegacyAll()>:
c000c1a2:	c3                   	ret    
c000c1a3:	90                   	nop

c000c1a4 <Device::loadDriversForAll()>:
c000c1a4:	c3                   	ret    
c000c1a5:	90                   	nop

c000c1a6 <Device::closeAll()>:
c000c1a6:	53                   	push   ebx
c000c1a7:	83 ec 08             	sub    esp,0x8
c000c1aa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c1ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c1b0:	6a 00                	push   0x0
c000c1b2:	6a 00                	push   0x0
c000c1b4:	6a 00                	push   0x0
c000c1b6:	53                   	push   ebx
c000c1b7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c1ba:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c1c0:	83 c4 10             	add    esp,0x10
c000c1c3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c1c6:	74 0f                	je     c000c1d7 <Device::closeAll()+0x31>
c000c1c8:	83 ec 0c             	sub    esp,0xc
c000c1cb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c1ce:	e8 d3 ff ff ff       	call   c000c1a6 <Device::closeAll()>
c000c1d3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c1d5:	eb e9                	jmp    c000c1c0 <Device::closeAll()+0x1a>
c000c1d7:	83 c4 08             	add    esp,0x8
c000c1da:	5b                   	pop    ebx
c000c1db:	c3                   	ret    

c000c1dc <Device::powerSavingAll(PowerSavingLevel)>:
c000c1dc:	56                   	push   esi
c000c1dd:	53                   	push   ebx
c000c1de:	83 ec 0c             	sub    esp,0xc
c000c1e1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c1e5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c1e9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c1eb:	56                   	push   esi
c000c1ec:	53                   	push   ebx
c000c1ed:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c1f0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c1f6:	83 c4 10             	add    esp,0x10
c000c1f9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c1fc:	74 0f                	je     c000c20d <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c1fe:	52                   	push   edx
c000c1ff:	52                   	push   edx
c000c200:	56                   	push   esi
c000c201:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c204:	e8 d3 ff ff ff       	call   c000c1dc <Device::powerSavingAll(PowerSavingLevel)>
c000c209:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c20b:	eb e9                	jmp    c000c1f6 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c20d:	58                   	pop    eax
c000c20e:	5b                   	pop    ebx
c000c20f:	5e                   	pop    esi
c000c210:	c3                   	ret    
c000c211:	90                   	nop

c000c212 <Device::setName(char const*)>:
c000c212:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c21a:	e9 31 44 ff ff       	jmp    c0000650 <strcpy>
c000c21f:	90                   	nop

c000c220 <Device::Device(char const*)>:
c000c220:	83 ec 1c             	sub    esp,0x1c
c000c223:	ba 10 0d 02 c0       	mov    edx,0xc0020d10
c000c228:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c22c:	89 10                	mov    DWORD PTR [eax],edx
c000c22e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c232:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c23c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c240:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c24a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c24e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c258:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c25c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c266:	83 ec 08             	sub    esp,0x8
c000c269:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c271:	e8 9c ff ff ff       	call   c000c212 <Device::setName(char const*)>
c000c276:	83 c4 10             	add    esp,0x10
c000c279:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c281:	83 ec 0c             	sub    esp,0xc
c000c284:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c288:	e8 3e b8 ff ff       	call   c0007acb <malloc>
c000c28d:	83 c4 10             	add    esp,0x10
c000c290:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c296:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c29d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c2a1:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c2a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2ab:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c2b1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c2b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2bb:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c2c1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c2c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2cc:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c2d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2d7:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c2de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2e2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c2ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2f0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c2fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2fe:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c308:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c30c:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c316:	90                   	nop
c000c317:	83 c4 1c             	add    esp,0x1c
c000c31a:	c3                   	ret    
c000c31b:	90                   	nop

c000c31c <Device::getName()>:
c000c31c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c320:	05 d0 00 00 00       	add    eax,0xd0
c000c325:	c3                   	ret    

c000c326 <DriverlessDevice::DriverlessDevice(char const*)>:
c000c326:	83 ec 0c             	sub    esp,0xc
c000c329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c32d:	83 ec 08             	sub    esp,0x8
c000c330:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c334:	50                   	push   eax
c000c335:	e8 e6 fe ff ff       	call   c000c220 <Device::Device(char const*)>
c000c33a:	83 c4 10             	add    esp,0x10
c000c33d:	ba 3c 0d 02 c0       	mov    edx,0xc0020d3c
c000c342:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c346:	89 10                	mov    DWORD PTR [eax],edx
c000c348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c34c:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c356:	90                   	nop
c000c357:	83 c4 0c             	add    esp,0xc
c000c35a:	c3                   	ret    
c000c35b:	90                   	nop

c000c35c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c35c:	57                   	push   edi
c000c35d:	56                   	push   esi
c000c35e:	53                   	push   ebx
c000c35f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c363:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c367:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c36b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c371:	75 0c                	jne    c000c37f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c373:	52                   	push   edx
c000c374:	52                   	push   edx
c000c375:	53                   	push   ebx
c000c376:	56                   	push   esi
c000c377:	e8 66 2c 01 00       	call   c001efe2 <LinkedList<Device>::addElement(Device*)>
c000c37c:	83 c4 10             	add    esp,0x10
c000c37f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c385:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c388:	74 12                	je     c000c39c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c38a:	50                   	push   eax
c000c38b:	57                   	push   edi
c000c38c:	56                   	push   esi
c000c38d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c390:	e8 c7 ff ff ff       	call   c000c35c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c395:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c397:	83 c4 10             	add    esp,0x10
c000c39a:	eb e9                	jmp    c000c385 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c39c:	5b                   	pop    ebx
c000c39d:	5e                   	pop    esi
c000c39e:	5f                   	pop    edi
c000c39f:	c3                   	ret    

c000c3a0 <getDevicesOfType(DeviceType)>:
c000c3a0:	53                   	push   ebx
c000c3a1:	83 ec 14             	sub    esp,0x14
c000c3a4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c3a8:	53                   	push   ebx
c000c3a9:	e8 10 2d 01 00       	call   c001f0be <LinkedList<Device>::LinkedList()>
c000c3ae:	83 c4 0c             	add    esp,0xc
c000c3b1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c3b5:	53                   	push   ebx
c000c3b6:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000c3bc:	e8 9b ff ff ff       	call   c000c35c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c3c1:	83 c4 18             	add    esp,0x18
c000c3c4:	89 d8                	mov    eax,ebx
c000c3c6:	5b                   	pop    ebx
c000c3c7:	c2 04 00             	ret    0x4
c000c3ca:	66 90                	xchg   ax,ax

c000c3cc <HardDiskController::HardDiskController(char const*)>:
c000c3cc:	83 ec 0c             	sub    esp,0xc
c000c3cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3d3:	83 ec 08             	sub    esp,0x8
c000c3d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3da:	50                   	push   eax
c000c3db:	e8 40 fe ff ff       	call   c000c220 <Device::Device(char const*)>
c000c3e0:	83 c4 10             	add    esp,0x10
c000c3e3:	ba 68 0d 02 c0       	mov    edx,0xc0020d68
c000c3e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3ec:	89 10                	mov    DWORD PTR [eax],edx
c000c3ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3f2:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c3fc:	90                   	nop
c000c3fd:	83 c4 0c             	add    esp,0xc
c000c400:	c3                   	ret    
c000c401:	90                   	nop
c000c402:	66 90                	xchg   ax,ax

c000c404 <HardDiskController::~HardDiskController()>:
c000c404:	83 ec 0c             	sub    esp,0xc
c000c407:	ba 68 0d 02 c0       	mov    edx,0xc0020d68
c000c40c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c410:	89 10                	mov    DWORD PTR [eax],edx
c000c412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c416:	83 ec 0c             	sub    esp,0xc
c000c419:	50                   	push   eax
c000c41a:	e8 6b fb ff ff       	call   c000bf8a <Device::~Device()>
c000c41f:	83 c4 10             	add    esp,0x10
c000c422:	90                   	nop
c000c423:	83 c4 0c             	add    esp,0xc
c000c426:	c3                   	ret    
c000c427:	90                   	nop

c000c428 <HardDiskController::~HardDiskController()>:
c000c428:	83 ec 0c             	sub    esp,0xc
c000c42b:	83 ec 0c             	sub    esp,0xc
c000c42e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c432:	e8 cd ff ff ff       	call   c000c404 <HardDiskController::~HardDiskController()>
c000c437:	83 c4 10             	add    esp,0x10
c000c43a:	83 ec 08             	sub    esp,0x8
c000c43d:	68 58 01 00 00       	push   0x158
c000c442:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c446:	e8 b5 e3 ff ff       	call   c000a800 <operator delete(void*, unsigned long)>
c000c44b:	83 c4 10             	add    esp,0x10
c000c44e:	83 c4 0c             	add    esp,0xc
c000c451:	c3                   	ret    

c000c452 <PhysicalDisk::eject()>:
c000c452:	83 c8 ff             	or     eax,0xffffffff
c000c455:	c3                   	ret    

c000c456 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c456:	83 ec 0c             	sub    esp,0xc
c000c459:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c45d:	83 ec 08             	sub    esp,0x8
c000c460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c464:	50                   	push   eax
c000c465:	e8 b6 fd ff ff       	call   c000c220 <Device::Device(char const*)>
c000c46a:	83 c4 10             	add    esp,0x10
c000c46d:	ba 94 0d 02 c0       	mov    edx,0xc0020d94
c000c472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c476:	89 10                	mov    DWORD PTR [eax],edx
c000c478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c47c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c483:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c487:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000c48e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c492:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000c49c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4a0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c4a4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000c4aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4ae:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000c4b8:	90                   	nop
c000c4b9:	83 c4 0c             	add    esp,0xc
c000c4bc:	c3                   	ret    
c000c4bd:	90                   	nop

c000c4be <PhysicalDisk::startCache()>:
c000c4be:	56                   	push   esi
c000c4bf:	53                   	push   ebx
c000c4c0:	83 ec 10             	sub    esp,0x10
c000c4c3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c4c7:	6a 44                	push   0x44
c000c4c9:	e8 fd b5 ff ff       	call   c0007acb <malloc>
c000c4ce:	89 c6                	mov    esi,eax
c000c4d0:	58                   	pop    eax
c000c4d1:	5a                   	pop    edx
c000c4d2:	53                   	push   ebx
c000c4d3:	56                   	push   esi
c000c4d4:	e8 83 17 00 00       	call   c000dc5c <VCache::VCache(PhysicalDisk*)>
c000c4d9:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000c4df:	83 c4 14             	add    esp,0x14
c000c4e2:	5b                   	pop    ebx
c000c4e3:	5e                   	pop    esi
c000c4e4:	c3                   	ret    
c000c4e5:	90                   	nop

c000c4e6 <PhysicalDisk::~PhysicalDisk()>:
c000c4e6:	83 ec 0c             	sub    esp,0xc
c000c4e9:	ba 94 0d 02 c0       	mov    edx,0xc0020d94
c000c4ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4f2:	89 10                	mov    DWORD PTR [eax],edx
c000c4f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4f8:	83 ec 0c             	sub    esp,0xc
c000c4fb:	50                   	push   eax
c000c4fc:	e8 89 fa ff ff       	call   c000bf8a <Device::~Device()>
c000c501:	83 c4 10             	add    esp,0x10
c000c504:	90                   	nop
c000c505:	83 c4 0c             	add    esp,0xc
c000c508:	c3                   	ret    
c000c509:	90                   	nop

c000c50a <PhysicalDisk::~PhysicalDisk()>:
c000c50a:	83 ec 0c             	sub    esp,0xc
c000c50d:	83 ec 0c             	sub    esp,0xc
c000c510:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c514:	e8 cd ff ff ff       	call   c000c4e6 <PhysicalDisk::~PhysicalDisk()>
c000c519:	83 c4 10             	add    esp,0x10
c000c51c:	83 ec 08             	sub    esp,0x8
c000c51f:	68 6c 01 00 00       	push   0x16c
c000c524:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c528:	e8 d3 e2 ff ff       	call   c000a800 <operator delete(void*, unsigned long)>
c000c52d:	83 c4 10             	add    esp,0x10
c000c530:	83 c4 0c             	add    esp,0xc
c000c533:	c3                   	ret    

c000c534 <int_handler>:
c000c534:	55                   	push   ebp
c000c535:	57                   	push   edi
c000c536:	56                   	push   esi
c000c537:	53                   	push   ebx
c000c538:	83 ec 0c             	sub    esp,0xc
c000c53b:	80 3d 38 89 02 c0 00 	cmp    BYTE PTR ds:0xc0028938,0x0
c000c542:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c546:	74 0b                	je     c000c553 <int_handler+0x1f>
c000c548:	fa                   	cli    
c000c549:	f4                   	hlt    
c000c54a:	80 3d 38 89 02 c0 00 	cmp    BYTE PTR ds:0xc0028938,0x0
c000c551:	75 f5                	jne    c000c548 <int_handler+0x14>
c000c553:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000c556:	8d 46 e0             	lea    eax,[esi-0x20]
c000c559:	83 f8 17             	cmp    eax,0x17
c000c55c:	76 40                	jbe    c000c59e <int_handler+0x6a>
c000c55e:	c1 e6 04             	shl    esi,0x4
c000c561:	31 db                	xor    ebx,ebx
c000c563:	8d ae c0 6f 02 c0    	lea    ebp,[esi-0x3ffd9040]
c000c569:	81 c6 c0 5f 02 c0    	add    esi,0xc0025fc0
c000c56f:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000c573:	85 c0                	test   eax,eax
c000c575:	74 13                	je     c000c58a <int_handler+0x56>
c000c577:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000c57b:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000c57e:	74 2c                	je     c000c5ac <int_handler+0x78>
c000c580:	83 ec 08             	sub    esp,0x8
c000c583:	52                   	push   edx
c000c584:	57                   	push   edi
c000c585:	ff d0                	call   eax
c000c587:	83 c4 10             	add    esp,0x10
c000c58a:	83 c3 01             	add    ebx,0x1
c000c58d:	83 fb 04             	cmp    ebx,0x4
c000c590:	75 dd                	jne    c000c56f <int_handler+0x3b>
c000c592:	83 c4 0c             	add    esp,0xc
c000c595:	31 c0                	xor    eax,eax
c000c597:	5b                   	pop    ebx
c000c598:	31 d2                	xor    edx,edx
c000c59a:	5e                   	pop    esi
c000c59b:	5f                   	pop    edi
c000c59c:	5d                   	pop    ebp
c000c59d:	c3                   	ret    
c000c59e:	83 ec 0c             	sub    esp,0xc
c000c5a1:	50                   	push   eax
c000c5a2:	e8 7f b1 00 00       	call   c0017726 <HalEndOfInterrupt(int)>
c000c5a7:	83 c4 10             	add    esp,0x10
c000c5aa:	eb b2                	jmp    c000c55e <int_handler+0x2a>
c000c5ac:	83 ec 08             	sub    esp,0x8
c000c5af:	52                   	push   edx
c000c5b0:	57                   	push   edi
c000c5b1:	ff d0                	call   eax
c000c5b3:	83 c4 10             	add    esp,0x10
c000c5b6:	83 c4 0c             	add    esp,0xc
c000c5b9:	5b                   	pop    ebx
c000c5ba:	5e                   	pop    esi
c000c5bb:	5f                   	pop    edi
c000c5bc:	5d                   	pop    ebp
c000c5bd:	c3                   	ret    

c000c5be <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000c5be:	56                   	push   esi
c000c5bf:	31 c0                	xor    eax,eax
c000c5c1:	53                   	push   ebx
c000c5c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c5c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c5ca:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c5ce:	89 ca                	mov    edx,ecx
c000c5d0:	c1 e2 04             	shl    edx,0x4
c000c5d3:	83 bc 82 c0 6f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd9040],0x0
c000c5db:	74 17                	je     c000c5f4 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000c5dd:	83 c0 01             	add    eax,0x1
c000c5e0:	83 f8 04             	cmp    eax,0x4
c000c5e3:	75 ee                	jne    c000c5d3 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000c5e5:	c7 44 24 0c c4 0d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020dc4
c000c5ed:	5b                   	pop    ebx
c000c5ee:	5e                   	pop    esi
c000c5ef:	e9 7d 45 00 00       	jmp    c0010b71 <KePanic(char const*)>
c000c5f4:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c5f7:	89 1c 85 c0 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9040],ebx
c000c5fe:	5b                   	pop    ebx
c000c5ff:	89 34 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],esi
c000c606:	5e                   	pop    esi
c000c607:	c3                   	ret    

c000c608 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c608:	55                   	push   ebp
c000c609:	57                   	push   edi
c000c60a:	56                   	push   esi
c000c60b:	53                   	push   ebx
c000c60c:	83 ec 0c             	sub    esp,0xc
c000c60f:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000c615:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c619:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c61d:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c624:	8d 6e 20             	lea    ebp,[esi+0x20]
c000c627:	74 57                	je     c000c680 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000c629:	84 c0                	test   al,al
c000c62b:	89 c7                	mov    edi,eax
c000c62d:	74 1d                	je     c000c64c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c62f:	83 fe 0f             	cmp    esi,0xf
c000c632:	0f 8f d9 00 00 00    	jg     c000c711 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c000c638:	0f b6 b6 a8 28 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdd758]
c000c63f:	0f b7 bc 36 60 87 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd78a0]
c000c647:	d1 ef                	shr    edi,1
c000c649:	83 e7 01             	and    edi,0x1
c000c64c:	a1 60 9b 02 c0       	mov    eax,ds:0xc0029b60
c000c651:	83 ec 08             	sub    esp,0x8
c000c654:	31 db                	xor    ebx,ebx
c000c656:	50                   	push   eax
c000c657:	68 d1 0d 02 c0       	push   0xc0020dd1
c000c65c:	e8 9d e2 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c000c661:	a1 60 9b 02 c0       	mov    eax,ds:0xc0029b60
c000c666:	83 c4 10             	add    esp,0x10
c000c669:	85 c0                	test   eax,eax
c000c66b:	7f 59                	jg     c000c6c6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbe>
c000c66d:	8d 6e 20             	lea    ebp,[esi+0x20]
c000c670:	83 ec 0c             	sub    esp,0xc
c000c673:	68 e8 0d 02 c0       	push   0xc0020de8
c000c678:	e8 f4 44 00 00       	call   c0010b71 <KePanic(char const*)>
c000c67d:	83 c4 10             	add    esp,0x10
c000c680:	89 e8                	mov    eax,ebp
c000c682:	31 d2                	xor    edx,edx
c000c684:	c1 e0 04             	shl    eax,0x4
c000c687:	8b 8c 90 c0 6f 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd9040]
c000c68e:	85 c9                	test   ecx,ecx
c000c690:	0f 84 92 00 00 00    	je     c000c728 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x120>
c000c696:	83 c2 01             	add    edx,0x1
c000c699:	83 fa 04             	cmp    edx,0x4
c000c69c:	75 e9                	jne    c000c687 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000c69e:	83 ec 0c             	sub    esp,0xc
c000c6a1:	68 3c 0e 02 c0       	push   0xc0020e3c
c000c6a6:	e8 c6 44 00 00       	call   c0010b71 <KePanic(char const*)>
c000c6ab:	83 c4 10             	add    esp,0x10
c000c6ae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c6b3:	83 c4 0c             	add    esp,0xc
c000c6b6:	5b                   	pop    ebx
c000c6b7:	5e                   	pop    esi
c000c6b8:	5f                   	pop    edi
c000c6b9:	5d                   	pop    ebp
c000c6ba:	c3                   	ret    
c000c6bb:	83 c3 01             	add    ebx,0x1
c000c6be:	39 1d 60 9b 02 c0    	cmp    DWORD PTR ds:0xc0029b60,ebx
c000c6c4:	7e a7                	jle    c000c66d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000c6c6:	8b 2c 9d 80 9b 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd6480]
c000c6cd:	83 ec 08             	sub    esp,0x8
c000c6d0:	56                   	push   esi
c000c6d1:	55                   	push   ebp
c000c6d2:	e8 39 18 01 00       	call   c001df10 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c6d7:	83 c4 10             	add    esp,0x10
c000c6da:	84 c0                	test   al,al
c000c6dc:	74 dd                	je     c000c6bb <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000c6de:	89 f8                	mov    eax,edi
c000c6e0:	83 ec 04             	sub    esp,0x4
c000c6e3:	8b 1c 9d 80 9b 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd6480]
c000c6ea:	8d 6e 20             	lea    ebp,[esi+0x20]
c000c6ed:	0f b6 f8             	movzx  edi,al
c000c6f0:	57                   	push   edi
c000c6f1:	89 e8                	mov    eax,ebp
c000c6f3:	6a 00                	push   0x0
c000c6f5:	0f b6 c0             	movzx  eax,al
c000c6f8:	50                   	push   eax
c000c6f9:	89 f0                	mov    eax,esi
c000c6fb:	6a 00                	push   0x0
c000c6fd:	0f b6 c0             	movzx  eax,al
c000c700:	6a 00                	push   0x0
c000c702:	50                   	push   eax
c000c703:	53                   	push   ebx
c000c704:	e8 73 19 01 00       	call   c001e07c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c709:	83 c4 20             	add    esp,0x20
c000c70c:	e9 6f ff ff ff       	jmp    c000c680 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000c711:	83 ec 0c             	sub    esp,0xc
c000c714:	31 ff                	xor    edi,edi
c000c716:	68 04 0e 02 c0       	push   0xc0020e04
c000c71b:	e8 51 44 00 00       	call   c0010b71 <KePanic(char const*)>
c000c720:	83 c4 10             	add    esp,0x10
c000c723:	e9 24 ff ff ff       	jmp    c000c64c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c728:	8d 04 aa             	lea    eax,[edx+ebp*4]
c000c72b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c72f:	89 14 85 c0 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9040],edx
c000c736:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c73a:	89 14 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],edx
c000c741:	83 c4 0c             	add    esp,0xc
c000c744:	89 f0                	mov    eax,esi
c000c746:	5b                   	pop    ebx
c000c747:	5e                   	pop    esi
c000c748:	5f                   	pop    edi
c000c749:	5d                   	pop    ebp
c000c74a:	c3                   	ret    

c000c74b <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c74f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c753:	c1 e0 04             	shl    eax,0x4
c000c756:	8d 50 10             	lea    edx,[eax+0x10]
c000c759:	39 88 c0 6f 02 c0    	cmp    DWORD PTR [eax-0x3ffd9040],ecx
c000c75f:	74 08                	je     c000c769 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c761:	83 c0 04             	add    eax,0x4
c000c764:	39 d0                	cmp    eax,edx
c000c766:	75 f1                	jne    c000c759 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c768:	c3                   	ret    
c000c769:	c7 80 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9040],0x0
c000c773:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c77d:	eb e2                	jmp    c000c761 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c77f <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c77f:	56                   	push   esi
c000c780:	53                   	push   ebx
c000c781:	83 ec 04             	sub    esp,0x4
c000c784:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c789:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c78d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c791:	74 0e                	je     c000c7a1 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000c793:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000c798:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c79f:	75 34                	jne    c000c7d5 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x56>
c000c7a1:	8d 43 20             	lea    eax,[ebx+0x20]
c000c7a4:	c1 e0 04             	shl    eax,0x4
c000c7a7:	8d 50 10             	lea    edx,[eax+0x10]
c000c7aa:	39 b0 c0 6f 02 c0    	cmp    DWORD PTR [eax-0x3ffd9040],esi
c000c7b0:	74 0d                	je     c000c7bf <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c000c7b2:	83 c0 04             	add    eax,0x4
c000c7b5:	39 d0                	cmp    eax,edx
c000c7b7:	75 f1                	jne    c000c7aa <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000c7b9:	83 c4 04             	add    esp,0x4
c000c7bc:	5b                   	pop    ebx
c000c7bd:	5e                   	pop    esi
c000c7be:	c3                   	ret    
c000c7bf:	c7 80 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9040],0x0
c000c7c9:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c7d3:	eb dd                	jmp    c000c7b2 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c000c7d5:	83 fb 0f             	cmp    ebx,0xf
c000c7d8:	7f 09                	jg     c000c7e3 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x64>
c000c7da:	0f b6 9b a8 28 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdd758]
c000c7e1:	eb be                	jmp    c000c7a1 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000c7e3:	83 ec 0c             	sub    esp,0xc
c000c7e6:	68 f5 0d 02 c0       	push   0xc0020df5
c000c7eb:	e8 81 43 00 00       	call   c0010b71 <KePanic(char const*)>
c000c7f0:	83 c4 10             	add    esp,0x10
c000c7f3:	eb ac                	jmp    c000c7a1 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c000c7f5 <setupINTS()>:
c000c7f5:	31 c0                	xor    eax,eax
c000c7f7:	c7 80 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9040],0x0
c000c801:	83 c0 10             	add    eax,0x10
c000c804:	c7 80 b0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda050],0x0
c000c80e:	c7 80 b4 6f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd904c],0x0
c000c818:	c7 80 b4 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda04c],0x0
c000c822:	c7 80 b8 6f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9048],0x0
c000c82c:	c7 80 b8 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda048],0x0
c000c836:	c7 80 bc 6f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9044],0x0
c000c840:	c7 80 bc 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda044],0x0
c000c84a:	3d 00 10 00 00       	cmp    eax,0x1000
c000c84f:	75 a6                	jne    c000c7f7 <setupINTS()+0x2>
c000c851:	c3                   	ret    

c000c852 <convertLegacyIRQNumber(int)>:
c000c852:	83 ec 0c             	sub    esp,0xc
c000c855:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000c85b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c85f:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c866:	74 0c                	je     c000c874 <convertLegacyIRQNumber(int)+0x22>
c000c868:	83 f8 0f             	cmp    eax,0xf
c000c86b:	7f 0b                	jg     c000c878 <convertLegacyIRQNumber(int)+0x26>
c000c86d:	0f b6 80 a8 28 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd758]
c000c874:	83 c4 0c             	add    esp,0xc
c000c877:	c3                   	ret    
c000c878:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c87c:	83 ec 0c             	sub    esp,0xc
c000c87f:	68 04 0e 02 c0       	push   0xc0020e04
c000c884:	e8 e8 42 00 00       	call   c0010b71 <KePanic(char const*)>
c000c889:	83 c4 10             	add    esp,0x10
c000c88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c890:	83 c4 0c             	add    esp,0xc
c000c893:	c3                   	ret    

c000c894 <startGUI(void*)>:
c000c894:	55                   	push   ebp
c000c895:	89 e5                	mov    ebp,esp
c000c897:	53                   	push   ebx
c000c898:	83 ec 04             	sub    esp,0x4
c000c89b:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000c8a0:	83 e8 01             	sub    eax,0x1
c000c8a3:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c000c8a8:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000c8ad:	85 c0                	test   eax,eax
c000c8af:	75 01                	jne    c000c8b2 <startGUI(void*)+0x1e>
c000c8b1:	fb                   	sti    
c000c8b2:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000c8b8:	83 ec 08             	sub    esp,0x8
c000c8bb:	6a 01                	push   0x1
c000c8bd:	68 61 0e 02 c0       	push   0xc0020e61
c000c8c2:	e8 41 81 00 00       	call   c0014a08 <Thr::loadDLL(char const*, bool)>
c000c8c7:	83 c4 10             	add    esp,0x10
c000c8ca:	83 ec 08             	sub    esp,0x8
c000c8cd:	53                   	push   ebx
c000c8ce:	50                   	push   eax
c000c8cf:	e8 74 83 00 00       	call   c0014c48 <Thr::executeDLL(unsigned long, void*)>
c000c8d4:	83 c4 10             	add    esp,0x10
c000c8d7:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000c8dd:	83 ec 08             	sub    esp,0x8
c000c8e0:	6a 01                	push   0x1
c000c8e2:	68 7b 0e 02 c0       	push   0xc0020e7b
c000c8e7:	e8 1c 81 00 00       	call   c0014a08 <Thr::loadDLL(char const*, bool)>
c000c8ec:	83 c4 10             	add    esp,0x10
c000c8ef:	83 ec 08             	sub    esp,0x8
c000c8f2:	53                   	push   ebx
c000c8f3:	50                   	push   eax
c000c8f4:	e8 4f 83 00 00       	call   c0014c48 <Thr::executeDLL(unsigned long, void*)>
c000c8f9:	83 c4 10             	add    esp,0x10
c000c8fc:	90                   	nop
c000c8fd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c900:	c9                   	leave  
c000c901:	c3                   	ret    

c000c902 <startGUIVESA(void*)>:
c000c902:	55                   	push   ebp
c000c903:	89 e5                	mov    ebp,esp
c000c905:	53                   	push   ebx
c000c906:	83 ec 04             	sub    esp,0x4
c000c909:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000c90e:	83 e8 01             	sub    eax,0x1
c000c911:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c000c916:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000c91b:	85 c0                	test   eax,eax
c000c91d:	75 01                	jne    c000c920 <startGUIVESA(void*)+0x1e>
c000c91f:	fb                   	sti    
c000c920:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000c926:	83 ec 08             	sub    esp,0x8
c000c929:	6a 01                	push   0x1
c000c92b:	68 99 0e 02 c0       	push   0xc0020e99
c000c930:	e8 d3 80 00 00       	call   c0014a08 <Thr::loadDLL(char const*, bool)>
c000c935:	83 c4 10             	add    esp,0x10
c000c938:	83 ec 08             	sub    esp,0x8
c000c93b:	53                   	push   ebx
c000c93c:	50                   	push   eax
c000c93d:	e8 06 83 00 00       	call   c0014c48 <Thr::executeDLL(unsigned long, void*)>
c000c942:	83 c4 10             	add    esp,0x10
c000c945:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000c94b:	83 ec 08             	sub    esp,0x8
c000c94e:	6a 01                	push   0x1
c000c950:	68 7b 0e 02 c0       	push   0xc0020e7b
c000c955:	e8 ae 80 00 00       	call   c0014a08 <Thr::loadDLL(char const*, bool)>
c000c95a:	83 c4 10             	add    esp,0x10
c000c95d:	83 ec 08             	sub    esp,0x8
c000c960:	53                   	push   ebx
c000c961:	50                   	push   eax
c000c962:	e8 e1 82 00 00       	call   c0014c48 <Thr::executeDLL(unsigned long, void*)>
c000c967:	83 c4 10             	add    esp,0x10
c000c96a:	90                   	nop
c000c96b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c96e:	c9                   	leave  
c000c96f:	c3                   	ret    

c000c970 <sendKeyToTerminal(unsigned char)>:
c000c970:	55                   	push   ebp
c000c971:	89 e5                	mov    ebp,esp
c000c973:	83 ec 28             	sub    esp,0x28
c000c976:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c979:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c97c:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c000c981:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000c985:	83 ec 08             	sub    esp,0x8
c000c988:	52                   	push   edx
c000c989:	50                   	push   eax
c000c98a:	e8 1f c4 ff ff       	call   c0008dae <VgaText::receiveKey(unsigned char)>
c000c98f:	83 c4 10             	add    esp,0x10
c000c992:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c996:	83 f8 0a             	cmp    eax,0xa
c000c999:	74 16                	je     c000c9b1 <sendKeyToTerminal(unsigned char)+0x41>
c000c99b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c99f:	83 f8 03             	cmp    eax,0x3
c000c9a2:	74 0d                	je     c000c9b1 <sendKeyToTerminal(unsigned char)+0x41>
c000c9a4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c9a8:	83 f8 1c             	cmp    eax,0x1c
c000c9ab:	0f 85 97 00 00 00    	jne    c000ca48 <sendKeyToTerminal(unsigned char)+0xd8>
c000c9b1:	fa                   	cli    
c000c9b2:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000c9b7:	83 c0 01             	add    eax,0x1
c000c9ba:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c000c9bf:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c000c9c4:	83 c0 01             	add    eax,0x1
c000c9c7:	a3 64 91 02 c0       	mov    ds:0xc0029164,eax
c000c9cc:	a1 c0 7f 02 c0       	mov    eax,ds:0xc0027fc0
c000c9d1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c9d4:	c7 05 c0 7f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027fc0,0x0
c000c9de:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c9e2:	74 1f                	je     c000ca03 <sendKeyToTerminal(unsigned char)+0x93>
c000c9e4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c9e7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c9ea:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c9ed:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c9f0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c9f3:	83 ec 0c             	sub    esp,0xc
c000c9f6:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c9f9:	e8 6e 8f 00 00       	call   c001596c <unblockTask(ThreadControlBlock*)>
c000c9fe:	83 c4 10             	add    esp,0x10
c000ca01:	eb db                	jmp    c000c9de <sendKeyToTerminal(unsigned char)+0x6e>
c000ca03:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c000ca08:	83 e8 01             	sub    eax,0x1
c000ca0b:	a3 64 91 02 c0       	mov    ds:0xc0029164,eax
c000ca10:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c000ca15:	85 c0                	test   eax,eax
c000ca17:	75 18                	jne    c000ca31 <sendKeyToTerminal(unsigned char)+0xc1>
c000ca19:	a1 60 91 02 c0       	mov    eax,ds:0xc0029160
c000ca1e:	85 c0                	test   eax,eax
c000ca20:	74 0f                	je     c000ca31 <sendKeyToTerminal(unsigned char)+0xc1>
c000ca22:	c7 05 60 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x0
c000ca2c:	e8 43 8a 00 00       	call   c0015474 <schedule()>
c000ca31:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000ca36:	83 e8 01             	sub    eax,0x1
c000ca39:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c000ca3e:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000ca43:	85 c0                	test   eax,eax
c000ca45:	75 01                	jne    c000ca48 <sendKeyToTerminal(unsigned char)+0xd8>
c000ca47:	fb                   	sti    
c000ca48:	90                   	nop
c000ca49:	c9                   	leave  
c000ca4a:	c3                   	ret    

c000ca4b <sendKeyboardToken(KeyboardToken)>:
c000ca4b:	55                   	push   ebp
c000ca4c:	89 e5                	mov    ebp,esp
c000ca4e:	83 ec 18             	sub    esp,0x18
c000ca51:	e8 6b 41 00 00       	call   c0010bc1 <KeUserIOReceived()>
c000ca56:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000ca59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca5c:	0f b7 c0             	movzx  eax,ax
c000ca5f:	83 f2 01             	xor    edx,0x1
c000ca62:	88 90 e0 7f 02 c0    	mov    BYTE PTR [eax-0x3ffd8020],dl
c000ca68:	a1 c8 7f 02 c0       	mov    eax,ds:0xc0027fc8
c000ca6d:	85 c0                	test   eax,eax
c000ca6f:	74 24                	je     c000ca95 <sendKeyboardToken(KeyboardToken)+0x4a>
c000ca71:	8b 15 c8 7f 02 c0    	mov    edx,DWORD PTR ds:0xc0027fc8
c000ca77:	83 ec 04             	sub    esp,0x4
c000ca7a:	68 e0 7f 02 c0       	push   0xc0027fe0
c000ca7f:	83 ec 08             	sub    esp,0x8
c000ca82:	89 e0                	mov    eax,esp
c000ca84:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000ca87:	89 08                	mov    DWORD PTR [eax],ecx
c000ca89:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000ca8c:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000ca90:	ff d2                	call   edx
c000ca92:	83 c4 10             	add    esp,0x10
c000ca95:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000ca99:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000ca9c:	a0 e8 83 02 c0       	mov    al,ds:0xc00283e8
c000caa1:	0f b6 d2             	movzx  edx,dl
c000caa4:	0f b6 c0             	movzx  eax,al
c000caa7:	39 c2                	cmp    edx,eax
c000caa9:	74 1c                	je     c000cac7 <sendKeyboardToken(KeyboardToken)+0x7c>
c000caab:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000caae:	a2 e8 83 02 c0       	mov    ds:0xc00283e8,al
c000cab3:	a0 e8 83 02 c0       	mov    al,ds:0xc00283e8
c000cab8:	0f b6 c0             	movzx  eax,al
c000cabb:	83 ec 0c             	sub    esp,0xc
c000cabe:	50                   	push   eax
c000cabf:	e8 46 ba ff ff       	call   c000850a <setTerminalScrollLock(bool)>
c000cac4:	83 c4 10             	add    esp,0x10
c000cac7:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000caca:	0f b6 c0             	movzx  eax,al
c000cacd:	85 c0                	test   eax,eax
c000cacf:	0f 84 da 00 00 00    	je     c000cbaf <sendKeyboardToken(KeyboardToken)+0x164>
c000cad5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cad8:	0f b7 c0             	movzx  eax,ax
c000cadb:	3d 18 03 00 00       	cmp    eax,0x318
c000cae0:	75 06                	jne    c000cae8 <sendKeyboardToken(KeyboardToken)+0x9d>
c000cae2:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000cae8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caeb:	0f b7 c0             	movzx  eax,ax
c000caee:	3d 19 03 00 00       	cmp    eax,0x319
c000caf3:	75 06                	jne    c000cafb <sendKeyboardToken(KeyboardToken)+0xb0>
c000caf5:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000cafb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cafe:	0f b7 c0             	movzx  eax,ax
c000cb01:	3d 1a 03 00 00       	cmp    eax,0x31a
c000cb06:	75 06                	jne    c000cb0e <sendKeyboardToken(KeyboardToken)+0xc3>
c000cb08:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000cb0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb11:	0f b7 c0             	movzx  eax,ax
c000cb14:	3d 1b 03 00 00       	cmp    eax,0x31b
c000cb19:	75 06                	jne    c000cb21 <sendKeyboardToken(KeyboardToken)+0xd6>
c000cb1b:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000cb21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb24:	0f b7 c0             	movzx  eax,ax
c000cb27:	3d 1c 03 00 00       	cmp    eax,0x31c
c000cb2c:	75 06                	jne    c000cb34 <sendKeyboardToken(KeyboardToken)+0xe9>
c000cb2e:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000cb34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb37:	0f b7 c0             	movzx  eax,ax
c000cb3a:	3d 1d 03 00 00       	cmp    eax,0x31d
c000cb3f:	75 06                	jne    c000cb47 <sendKeyboardToken(KeyboardToken)+0xfc>
c000cb41:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000cb47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb4a:	0f b7 c0             	movzx  eax,ax
c000cb4d:	3d 1e 03 00 00       	cmp    eax,0x31e
c000cb52:	75 06                	jne    c000cb5a <sendKeyboardToken(KeyboardToken)+0x10f>
c000cb54:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000cb5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb5d:	0f b7 c0             	movzx  eax,ax
c000cb60:	3d 1f 03 00 00       	cmp    eax,0x31f
c000cb65:	75 06                	jne    c000cb6d <sendKeyboardToken(KeyboardToken)+0x122>
c000cb67:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000cb6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb70:	0f b7 c0             	movzx  eax,ax
c000cb73:	3d 20 03 00 00       	cmp    eax,0x320
c000cb78:	75 06                	jne    c000cb80 <sendKeyboardToken(KeyboardToken)+0x135>
c000cb7a:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000cb80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb83:	0f b7 c0             	movzx  eax,ax
c000cb86:	3d 21 03 00 00       	cmp    eax,0x321
c000cb8b:	75 06                	jne    c000cb93 <sendKeyboardToken(KeyboardToken)+0x148>
c000cb8d:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000cb93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb96:	0f b7 c0             	movzx  eax,ax
c000cb99:	3d 22 03 00 00       	cmp    eax,0x322
c000cb9e:	0f 85 f1 00 00 00    	jne    c000cc95 <sendKeyboardToken(KeyboardToken)+0x24a>
c000cba4:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000cbaa:	e9 e6 00 00 00       	jmp    c000cc95 <sendKeyboardToken(KeyboardToken)+0x24a>
c000cbaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbb2:	0f b7 c0             	movzx  eax,ax
c000cbb5:	3d 18 03 00 00       	cmp    eax,0x318
c000cbba:	75 0a                	jne    c000cbc6 <sendKeyboardToken(KeyboardToken)+0x17b>
c000cbbc:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000cbc2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cbc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbc9:	0f b7 c0             	movzx  eax,ax
c000cbcc:	3d 19 03 00 00       	cmp    eax,0x319
c000cbd1:	75 0a                	jne    c000cbdd <sendKeyboardToken(KeyboardToken)+0x192>
c000cbd3:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000cbd9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cbdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbe0:	0f b7 c0             	movzx  eax,ax
c000cbe3:	3d 1a 03 00 00       	cmp    eax,0x31a
c000cbe8:	75 0a                	jne    c000cbf4 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000cbea:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000cbf0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cbf4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbf7:	0f b7 c0             	movzx  eax,ax
c000cbfa:	3d 1b 03 00 00       	cmp    eax,0x31b
c000cbff:	75 0a                	jne    c000cc0b <sendKeyboardToken(KeyboardToken)+0x1c0>
c000cc01:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000cc07:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cc0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc0e:	0f b7 c0             	movzx  eax,ax
c000cc11:	3d 1c 03 00 00       	cmp    eax,0x31c
c000cc16:	75 0a                	jne    c000cc22 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000cc18:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000cc1e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cc22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc25:	0f b7 c0             	movzx  eax,ax
c000cc28:	3d 1d 03 00 00       	cmp    eax,0x31d
c000cc2d:	75 0a                	jne    c000cc39 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000cc2f:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000cc35:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cc39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc3c:	0f b7 c0             	movzx  eax,ax
c000cc3f:	3d 1e 03 00 00       	cmp    eax,0x31e
c000cc44:	75 0a                	jne    c000cc50 <sendKeyboardToken(KeyboardToken)+0x205>
c000cc46:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000cc4c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cc50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc53:	0f b7 c0             	movzx  eax,ax
c000cc56:	3d 1f 03 00 00       	cmp    eax,0x31f
c000cc5b:	75 0a                	jne    c000cc67 <sendKeyboardToken(KeyboardToken)+0x21c>
c000cc5d:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000cc63:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cc67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc6a:	0f b7 c0             	movzx  eax,ax
c000cc6d:	3d 20 03 00 00       	cmp    eax,0x320
c000cc72:	75 0a                	jne    c000cc7e <sendKeyboardToken(KeyboardToken)+0x233>
c000cc74:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000cc7a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cc7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc81:	0f b7 c0             	movzx  eax,ax
c000cc84:	3d 21 03 00 00       	cmp    eax,0x321
c000cc89:	75 0a                	jne    c000cc95 <sendKeyboardToken(KeyboardToken)+0x24a>
c000cc8b:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000cc91:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cc95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc98:	0f b7 c0             	movzx  eax,ax
c000cc9b:	3d 00 02 00 00       	cmp    eax,0x200
c000cca0:	75 2f                	jne    c000ccd1 <sendKeyboardToken(KeyboardToken)+0x286>
c000cca2:	a0 e0 83 02 c0       	mov    al,ds:0xc00283e0
c000cca7:	83 f0 01             	xor    eax,0x1
c000ccaa:	0f b6 c0             	movzx  eax,al
c000ccad:	85 c0                	test   eax,eax
c000ccaf:	74 20                	je     c000ccd1 <sendKeyboardToken(KeyboardToken)+0x286>
c000ccb1:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c000ccb6:	6a 01                	push   0x1
c000ccb8:	6a 00                	push   0x0
c000ccba:	68 94 c8 00 c0       	push   0xc000c894
c000ccbf:	50                   	push   eax
c000ccc0:	e8 63 85 00 00       	call   c0015228 <Process::createThread(void (*)(void*), void*, int)>
c000ccc5:	83 c4 10             	add    esp,0x10
c000ccc8:	c6 05 e0 83 02 c0 01 	mov    BYTE PTR ds:0xc00283e0,0x1
c000cccf:	eb 3a                	jmp    c000cd0b <sendKeyboardToken(KeyboardToken)+0x2c0>
c000ccd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ccd4:	0f b7 c0             	movzx  eax,ax
c000ccd7:	3d 01 02 00 00       	cmp    eax,0x201
c000ccdc:	75 2d                	jne    c000cd0b <sendKeyboardToken(KeyboardToken)+0x2c0>
c000ccde:	a0 e0 83 02 c0       	mov    al,ds:0xc00283e0
c000cce3:	83 f0 01             	xor    eax,0x1
c000cce6:	0f b6 c0             	movzx  eax,al
c000cce9:	85 c0                	test   eax,eax
c000cceb:	74 1e                	je     c000cd0b <sendKeyboardToken(KeyboardToken)+0x2c0>
c000cced:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c000ccf2:	6a 01                	push   0x1
c000ccf4:	6a 00                	push   0x0
c000ccf6:	68 02 c9 00 c0       	push   0xc000c902
c000ccfb:	50                   	push   eax
c000ccfc:	e8 27 85 00 00       	call   c0015228 <Process::createThread(void (*)(void*), void*, int)>
c000cd01:	83 c4 10             	add    esp,0x10
c000cd04:	c6 05 e0 83 02 c0 01 	mov    BYTE PTR ds:0xc00283e0,0x1
c000cd0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd0e:	0f b7 c0             	movzx  eax,ax
c000cd11:	3d 25 03 00 00       	cmp    eax,0x325
c000cd16:	75 06                	jne    c000cd1e <sendKeyboardToken(KeyboardToken)+0x2d3>
c000cd18:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000cd1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd21:	0f b7 c0             	movzx  eax,ax
c000cd24:	3d 24 03 00 00       	cmp    eax,0x324
c000cd29:	75 06                	jne    c000cd31 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000cd2b:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000cd31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd34:	0f b7 c0             	movzx  eax,ax
c000cd37:	3d 23 03 00 00       	cmp    eax,0x323
c000cd3c:	75 06                	jne    c000cd44 <sendKeyboardToken(KeyboardToken)+0x2f9>
c000cd3e:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000cd44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd47:	0f b7 c0             	movzx  eax,ax
c000cd4a:	3d 26 03 00 00       	cmp    eax,0x326
c000cd4f:	75 06                	jne    c000cd57 <sendKeyboardToken(KeyboardToken)+0x30c>
c000cd51:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000cd57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd5a:	0f b7 c0             	movzx  eax,ax
c000cd5d:	3d 27 03 00 00       	cmp    eax,0x327
c000cd62:	75 06                	jne    c000cd6a <sendKeyboardToken(KeyboardToken)+0x31f>
c000cd64:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000cd6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd6d:	0f b7 c0             	movzx  eax,ax
c000cd70:	3d 22 03 00 00       	cmp    eax,0x322
c000cd75:	75 06                	jne    c000cd7d <sendKeyboardToken(KeyboardToken)+0x332>
c000cd77:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000cd7d:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000cd81:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cd84:	83 f0 01             	xor    eax,0x1
c000cd87:	0f b6 c0             	movzx  eax,al
c000cd8a:	85 c0                	test   eax,eax
c000cd8c:	74 7c                	je     c000ce0a <sendKeyboardToken(KeyboardToken)+0x3bf>
c000cd8e:	a0 e1 80 02 c0       	mov    al,ds:0xc00280e1
c000cd93:	0f b6 c0             	movzx  eax,al
c000cd96:	85 c0                	test   eax,eax
c000cd98:	74 43                	je     c000cddd <sendKeyboardToken(KeyboardToken)+0x392>
c000cd9a:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cd9e:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000cda2:	85 c0                	test   eax,eax
c000cda4:	74 2b                	je     c000cdd1 <sendKeyboardToken(KeyboardToken)+0x386>
c000cda6:	8b 15 e4 83 02 c0    	mov    edx,DWORD PTR ds:0xc00283e4
c000cdac:	89 d0                	mov    eax,edx
c000cdae:	c1 e0 02             	shl    eax,0x2
c000cdb1:	01 d0                	add    eax,edx
c000cdb3:	d1 e0                	shl    eax,1
c000cdb5:	a3 e4 83 02 c0       	mov    ds:0xc00283e4,eax
c000cdba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdbd:	0f b7 c0             	movzx  eax,ax
c000cdc0:	8d 50 d0             	lea    edx,[eax-0x30]
c000cdc3:	a1 e4 83 02 c0       	mov    eax,ds:0xc00283e4
c000cdc8:	01 d0                	add    eax,edx
c000cdca:	a3 e4 83 02 c0       	mov    ds:0xc00283e4,eax
c000cdcf:	eb 71                	jmp    c000ce42 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cdd1:	c7 05 e4 83 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00283e4,0x0
c000cddb:	eb 65                	jmp    c000ce42 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cddd:	a1 e4 83 02 c0       	mov    eax,ds:0xc00283e4
c000cde2:	85 c0                	test   eax,eax
c000cde4:	74 18                	je     c000cdfe <sendKeyboardToken(KeyboardToken)+0x3b3>
c000cde6:	a1 e4 83 02 c0       	mov    eax,ds:0xc00283e4
c000cdeb:	0f b6 c0             	movzx  eax,al
c000cdee:	83 ec 0c             	sub    esp,0xc
c000cdf1:	50                   	push   eax
c000cdf2:	e8 79 fb ff ff       	call   c000c970 <sendKeyToTerminal(unsigned char)>
c000cdf7:	83 c4 10             	add    esp,0x10
c000cdfa:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cdfe:	c7 05 e4 83 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00283e4,0x0
c000ce08:	eb 38                	jmp    c000ce42 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000ce0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce0d:	0f b7 c0             	movzx  eax,ax
c000ce10:	3d 01 01 00 00       	cmp    eax,0x101
c000ce15:	75 2b                	jne    c000ce42 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000ce17:	a1 e4 83 02 c0       	mov    eax,ds:0xc00283e4
c000ce1c:	85 c0                	test   eax,eax
c000ce1e:	74 18                	je     c000ce38 <sendKeyboardToken(KeyboardToken)+0x3ed>
c000ce20:	a1 e4 83 02 c0       	mov    eax,ds:0xc00283e4
c000ce25:	0f b6 c0             	movzx  eax,al
c000ce28:	83 ec 0c             	sub    esp,0xc
c000ce2b:	50                   	push   eax
c000ce2c:	e8 3f fb ff ff       	call   c000c970 <sendKeyToTerminal(unsigned char)>
c000ce31:	83 c4 10             	add    esp,0x10
c000ce34:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ce38:	c7 05 e4 83 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00283e4,0x0
c000ce42:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000ce45:	83 f0 01             	xor    eax,0x1
c000ce48:	0f b6 c0             	movzx  eax,al
c000ce4b:	85 c0                	test   eax,eax
c000ce4d:	74 5a                	je     c000cea9 <sendKeyboardToken(KeyboardToken)+0x45e>
c000ce4f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ce52:	83 f0 01             	xor    eax,0x1
c000ce55:	0f b6 c0             	movzx  eax,al
c000ce58:	85 c0                	test   eax,eax
c000ce5a:	74 4d                	je     c000cea9 <sendKeyboardToken(KeyboardToken)+0x45e>
c000ce5c:	a0 e0 80 02 c0       	mov    al,ds:0xc00280e0
c000ce61:	83 f0 01             	xor    eax,0x1
c000ce64:	0f b6 c0             	movzx  eax,al
c000ce67:	85 c0                	test   eax,eax
c000ce69:	74 3e                	je     c000cea9 <sendKeyboardToken(KeyboardToken)+0x45e>
c000ce6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce6e:	0f b7 c0             	movzx  eax,ax
c000ce71:	83 f8 1f             	cmp    eax,0x1f
c000ce74:	76 0b                	jbe    c000ce81 <sendKeyboardToken(KeyboardToken)+0x436>
c000ce76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce79:	0f b7 c0             	movzx  eax,ax
c000ce7c:	83 f8 7e             	cmp    eax,0x7e
c000ce7f:	76 16                	jbe    c000ce97 <sendKeyboardToken(KeyboardToken)+0x44c>
c000ce81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce84:	0f b7 c0             	movzx  eax,ax
c000ce87:	83 f8 0a             	cmp    eax,0xa
c000ce8a:	74 0b                	je     c000ce97 <sendKeyboardToken(KeyboardToken)+0x44c>
c000ce8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce8f:	0f b7 c0             	movzx  eax,ax
c000ce92:	83 f8 08             	cmp    eax,0x8
c000ce95:	75 12                	jne    c000cea9 <sendKeyboardToken(KeyboardToken)+0x45e>
c000ce97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce9a:	0f b6 c0             	movzx  eax,al
c000ce9d:	83 ec 0c             	sub    esp,0xc
c000cea0:	50                   	push   eax
c000cea1:	e8 ca fa ff ff       	call   c000c970 <sendKeyToTerminal(unsigned char)>
c000cea6:	83 c4 10             	add    esp,0x10
c000cea9:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000ceac:	83 f0 01             	xor    eax,0x1
c000ceaf:	0f b6 c0             	movzx  eax,al
c000ceb2:	85 c0                	test   eax,eax
c000ceb4:	74 5d                	je     c000cf13 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000ceb6:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ceb9:	83 f0 01             	xor    eax,0x1
c000cebc:	0f b6 c0             	movzx  eax,al
c000cebf:	85 c0                	test   eax,eax
c000cec1:	74 50                	je     c000cf13 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cec3:	a0 e0 80 02 c0       	mov    al,ds:0xc00280e0
c000cec8:	0f b6 c0             	movzx  eax,al
c000cecb:	85 c0                	test   eax,eax
c000cecd:	74 44                	je     c000cf13 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cecf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ced2:	0f b7 c0             	movzx  eax,ax
c000ced5:	83 f8 3f             	cmp    eax,0x3f
c000ced8:	76 39                	jbe    c000cf13 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000ceda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cedd:	0f b7 c0             	movzx  eax,ax
c000cee0:	83 f8 7f             	cmp    eax,0x7f
c000cee3:	77 2e                	ja     c000cf13 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cee5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cee8:	88 c2                	mov    dl,al
c000ceea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ceed:	0f b7 c0             	movzx  eax,ax
c000cef0:	83 f8 5f             	cmp    eax,0x5f
c000cef3:	76 04                	jbe    c000cef9 <sendKeyboardToken(KeyboardToken)+0x4ae>
c000cef5:	b0 20                	mov    al,0x20
c000cef7:	eb 02                	jmp    c000cefb <sendKeyboardToken(KeyboardToken)+0x4b0>
c000cef9:	b0 00                	mov    al,0x0
c000cefb:	89 d1                	mov    ecx,edx
c000cefd:	29 c1                	sub    ecx,eax
c000ceff:	89 c8                	mov    eax,ecx
c000cf01:	83 e8 40             	sub    eax,0x40
c000cf04:	0f b6 c0             	movzx  eax,al
c000cf07:	83 ec 0c             	sub    esp,0xc
c000cf0a:	50                   	push   eax
c000cf0b:	e8 60 fa ff ff       	call   c000c970 <sendKeyToTerminal(unsigned char)>
c000cf10:	83 c4 10             	add    esp,0x10
c000cf13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cf16:	0f b7 c0             	movzx  eax,ax
c000cf19:	3d 00 03 00 00       	cmp    eax,0x300
c000cf1e:	75 12                	jne    c000cf32 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000cf20:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cf23:	83 f0 01             	xor    eax,0x1
c000cf26:	0f b6 c0             	movzx  eax,al
c000cf29:	85 c0                	test   eax,eax
c000cf2b:	74 05                	je     c000cf32 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000cf2d:	e8 d9 b5 ff ff       	call   c000850b <doTerminalCycle()>
c000cf32:	90                   	nop
c000cf33:	c9                   	leave  
c000cf34:	c3                   	ret    

c000cf35 <clearInternalKeybuffer(VgaText*)>:
c000cf35:	55                   	push   ebp
c000cf36:	89 e5                	mov    ebp,esp
c000cf38:	83 ec 08             	sub    esp,0x8
c000cf3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cf3e:	05 02 01 00 00       	add    eax,0x102
c000cf43:	83 ec 0c             	sub    esp,0xc
c000cf46:	50                   	push   eax
c000cf47:	e8 34 36 ff ff       	call   c0000580 <strlen>
c000cf4c:	83 c4 10             	add    esp,0x10
c000cf4f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cf52:	81 c2 02 01 00 00    	add    edx,0x102
c000cf58:	83 ec 04             	sub    esp,0x4
c000cf5b:	50                   	push   eax
c000cf5c:	6a 00                	push   0x0
c000cf5e:	52                   	push   edx
c000cf5f:	e8 8c 35 ff ff       	call   c00004f0 <memset>
c000cf64:	83 c4 10             	add    esp,0x10
c000cf67:	90                   	nop
c000cf68:	c9                   	leave  
c000cf69:	c3                   	ret    

c000cf6a <readKeyboard(VgaText*, char*, unsigned long)>:
c000cf6a:	55                   	push   ebp
c000cf6b:	89 e5                	mov    ebp,esp
c000cf6d:	83 ec 18             	sub    esp,0x18
c000cf70:	a1 c8 7f 02 c0       	mov    eax,ds:0xc0027fc8
c000cf75:	85 c0                	test   eax,eax
c000cf77:	74 2a                	je     c000cfa3 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000cf79:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000cf7f:	8b 15 c8 7f 02 c0    	mov    edx,DWORD PTR ds:0xc0027fc8
c000cf85:	83 ec 04             	sub    esp,0x4
c000cf88:	68 e0 7f 02 c0       	push   0xc0027fe0
c000cf8d:	83 ec 08             	sub    esp,0x8
c000cf90:	89 e0                	mov    eax,esp
c000cf92:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000cf95:	89 08                	mov    DWORD PTR [eax],ecx
c000cf97:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000cf9a:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000cf9e:	ff d2                	call   edx
c000cfa0:	83 c4 10             	add    esp,0x10
c000cfa3:	fb                   	sti    
c000cfa4:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000cfab:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000cfaf:	0f 84 0d 01 00 00    	je     c000d0c2 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000cfb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cfb8:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000cfbe:	0f be c0             	movsx  eax,al
c000cfc1:	85 c0                	test   eax,eax
c000cfc3:	75 2c                	jne    c000cff1 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000cfc5:	fa                   	cli    
c000cfc6:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000cfcb:	83 c0 01             	add    eax,0x1
c000cfce:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c000cfd3:	e8 9c 84 00 00       	call   c0015474 <schedule()>
c000cfd8:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000cfdd:	83 e8 01             	sub    eax,0x1
c000cfe0:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c000cfe5:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000cfea:	85 c0                	test   eax,eax
c000cfec:	75 c7                	jne    c000cfb5 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cfee:	fb                   	sti    
c000cfef:	eb c4                	jmp    c000cfb5 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cff1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000cff4:	8d 50 01             	lea    edx,[eax+0x1]
c000cff7:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cffa:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cffd:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d003:	88 10                	mov    BYTE PTR [eax],dl
c000d005:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d008:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d00e:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d011:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d015:	83 f8 03             	cmp    eax,0x3
c000d018:	75 1e                	jne    c000d038 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d01a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d01f:	8b 00                	mov    eax,DWORD PTR [eax]
c000d021:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d024:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d02a:	83 ec 08             	sub    esp,0x8
c000d02d:	6a 02                	push   0x2
c000d02f:	50                   	push   eax
c000d030:	e8 da 3f 00 00       	call   c001100f <KeRaiseSignal(SigHandlerBlock*, int)>
c000d035:	83 c4 10             	add    esp,0x10
c000d038:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d03c:	83 f8 1c             	cmp    eax,0x1c
c000d03f:	75 1e                	jne    c000d05f <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d041:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d046:	8b 00                	mov    eax,DWORD PTR [eax]
c000d048:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d04b:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d051:	83 ec 08             	sub    esp,0x8
c000d054:	6a 09                	push   0x9
c000d056:	50                   	push   eax
c000d057:	e8 b3 3f 00 00       	call   c001100f <KeRaiseSignal(SigHandlerBlock*, int)>
c000d05c:	83 c4 10             	add    esp,0x10
c000d05f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d062:	05 02 01 00 00       	add    eax,0x102
c000d067:	83 ec 0c             	sub    esp,0xc
c000d06a:	50                   	push   eax
c000d06b:	e8 10 35 ff ff       	call   c0000580 <strlen>
c000d070:	83 c4 10             	add    esp,0x10
c000d073:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d076:	81 c2 02 01 00 00    	add    edx,0x102
c000d07c:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d07f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d082:	81 c2 02 01 00 00    	add    edx,0x102
c000d088:	83 ec 04             	sub    esp,0x4
c000d08b:	50                   	push   eax
c000d08c:	51                   	push   ecx
c000d08d:	52                   	push   edx
c000d08e:	e8 3d 33 ff ff       	call   c00003d0 <memmove>
c000d093:	83 c4 10             	add    esp,0x10
c000d096:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d09a:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d09e:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d0a2:	83 f8 0a             	cmp    eax,0xa
c000d0a5:	74 16                	je     c000d0bd <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d0a7:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d0ab:	83 f8 03             	cmp    eax,0x3
c000d0ae:	74 0d                	je     c000d0bd <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d0b0:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d0b4:	83 f8 1c             	cmp    eax,0x1c
c000d0b7:	0f 85 ee fe ff ff    	jne    c000cfab <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000d0bd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d0c0:	eb 03                	jmp    c000d0c5 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000d0c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d0c5:	c9                   	leave  
c000d0c6:	c3                   	ret    
c000d0c7:	90                   	nop

c000d0c8 <Keyboard::Keyboard(char const*)>:
c000d0c8:	83 ec 0c             	sub    esp,0xc
c000d0cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0cf:	83 ec 08             	sub    esp,0x8
c000d0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0d6:	50                   	push   eax
c000d0d7:	e8 44 f1 ff ff       	call   c000c220 <Device::Device(char const*)>
c000d0dc:	83 c4 10             	add    esp,0x10
c000d0df:	ba bc 0e 02 c0       	mov    edx,0xc0020ebc
c000d0e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0e8:	89 10                	mov    DWORD PTR [eax],edx
c000d0ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0ee:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000d0f8:	c6 05 c4 7f 02 c0 01 	mov    BYTE PTR ds:0xc0027fc4,0x1
c000d0ff:	90                   	nop
c000d100:	83 c4 0c             	add    esp,0xc
c000d103:	c3                   	ret    

c000d104 <Keyboard::~Keyboard()>:
c000d104:	83 ec 0c             	sub    esp,0xc
c000d107:	ba bc 0e 02 c0       	mov    edx,0xc0020ebc
c000d10c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d110:	89 10                	mov    DWORD PTR [eax],edx
c000d112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d116:	83 ec 0c             	sub    esp,0xc
c000d119:	50                   	push   eax
c000d11a:	e8 6b ee ff ff       	call   c000bf8a <Device::~Device()>
c000d11f:	83 c4 10             	add    esp,0x10
c000d122:	90                   	nop
c000d123:	83 c4 0c             	add    esp,0xc
c000d126:	c3                   	ret    
c000d127:	90                   	nop

c000d128 <Keyboard::~Keyboard()>:
c000d128:	83 ec 0c             	sub    esp,0xc
c000d12b:	83 ec 0c             	sub    esp,0xc
c000d12e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d132:	e8 cd ff ff ff       	call   c000d104 <Keyboard::~Keyboard()>
c000d137:	83 c4 10             	add    esp,0x10
c000d13a:	83 ec 08             	sub    esp,0x8
c000d13d:	68 5c 01 00 00       	push   0x15c
c000d142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d146:	e8 b5 d6 ff ff       	call   c000a800 <operator delete(void*, unsigned long)>
c000d14b:	83 c4 10             	add    esp,0x10
c000d14e:	83 c4 0c             	add    esp,0xc
c000d151:	c3                   	ret    

c000d152 <LogicalDisk::close(int, int, void*)>:
c000d152:	83 c8 ff             	or     eax,0xffffffff
c000d155:	c3                   	ret    

c000d156 <LogicalDisk::~LogicalDisk()>:
c000d156:	83 ec 0c             	sub    esp,0xc
c000d159:	ba 34 0f 02 c0       	mov    edx,0xc0020f34
c000d15e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d162:	89 10                	mov    DWORD PTR [eax],edx
c000d164:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d168:	83 ec 0c             	sub    esp,0xc
c000d16b:	50                   	push   eax
c000d16c:	e8 19 ee ff ff       	call   c000bf8a <Device::~Device()>
c000d171:	83 c4 10             	add    esp,0x10
c000d174:	90                   	nop
c000d175:	83 c4 0c             	add    esp,0xc
c000d178:	c3                   	ret    
c000d179:	90                   	nop

c000d17a <LogicalDisk::~LogicalDisk()>:
c000d17a:	83 ec 0c             	sub    esp,0xc
c000d17d:	83 ec 0c             	sub    esp,0xc
c000d180:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d184:	e8 cd ff ff ff       	call   c000d156 <LogicalDisk::~LogicalDisk()>
c000d189:	83 c4 10             	add    esp,0x10
c000d18c:	83 ec 08             	sub    esp,0x8
c000d18f:	68 78 01 00 00       	push   0x178
c000d194:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d198:	e8 63 d6 ff ff       	call   c000a800 <operator delete(void*, unsigned long)>
c000d19d:	83 c4 10             	add    esp,0x10
c000d1a0:	83 c4 0c             	add    esp,0xc
c000d1a3:	c3                   	ret    

c000d1a4 <LogicalDisk::open(int, int, void*)>:
c000d1a4:	83 ec 18             	sub    esp,0x18
c000d1a7:	68 e8 0e 02 c0       	push   0xc0020ee8
c000d1ac:	e8 c0 39 00 00       	call   c0010b71 <KePanic(char const*)>
c000d1b1:	83 c8 ff             	or     eax,0xffffffff
c000d1b4:	83 c4 1c             	add    esp,0x1c
c000d1b7:	c3                   	ret    

c000d1b8 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000d1b8:	53                   	push   ebx
c000d1b9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d1bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d1c1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d1c5:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000d1cb:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000d1d1:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000d1d7:	77 10                	ja     c000d1e9 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000d1d9:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000d1df:	89 d3                	mov    ebx,edx
c000d1e1:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000d1e7:	72 05                	jb     c000d1ee <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000d1e9:	83 c8 ff             	or     eax,0xffffffff
c000d1ec:	89 c2                	mov    edx,eax
c000d1ee:	5b                   	pop    ebx
c000d1ef:	c3                   	ret    

c000d1f0 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000d1f0:	56                   	push   esi
c000d1f1:	83 c8 ff             	or     eax,0xffffffff
c000d1f4:	53                   	push   ebx
c000d1f5:	89 c2                	mov    edx,eax
c000d1f7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d1fb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d1ff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d203:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d209:	77 27                	ja     c000d232 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d20b:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000d211:	89 d8                	mov    eax,ebx
c000d213:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000d219:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d21e:	89 c2                	mov    edx,eax
c000d220:	73 10                	jae    c000d232 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d222:	89 c8                	mov    eax,ecx
c000d224:	89 da                	mov    edx,ebx
c000d226:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000d22c:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000d232:	5b                   	pop    ebx
c000d233:	5e                   	pop    esi
c000d234:	c3                   	ret    
c000d235:	90                   	nop

c000d236 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d236:	83 ec 1c             	sub    esp,0x1c
c000d239:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d23d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d241:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d245:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d249:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d24d:	89 04 24             	mov    DWORD PTR [esp],eax
c000d250:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d254:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d258:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d25c:	83 ec 08             	sub    esp,0x8
c000d25f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d263:	50                   	push   eax
c000d264:	e8 b7 ef ff ff       	call   c000c220 <Device::Device(char const*)>
c000d269:	83 c4 10             	add    esp,0x10
c000d26c:	ba 34 0f 02 c0       	mov    edx,0xc0020f34
c000d271:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d275:	89 10                	mov    DWORD PTR [eax],edx
c000d277:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d27b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d282:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d286:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000d28d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d291:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d298:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d29c:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d2a6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d2aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d2ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d2b2:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d2b8:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d2be:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d2c2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d2c5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d2c9:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d2cf:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d2d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2d9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d2dd:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d2e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2e7:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d2f1:	90                   	nop
c000d2f2:	83 c4 1c             	add    esp,0x1c
c000d2f5:	c3                   	ret    

c000d2f6 <LogicalDisk::assignDriveLetter()>:
c000d2f6:	55                   	push   ebp
c000d2f7:	57                   	push   edi
c000d2f8:	56                   	push   esi
c000d2f9:	53                   	push   ebx
c000d2fa:	83 ec 14             	sub    esp,0x14
c000d2fd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d301:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d307:	b0 41                	mov    al,0x41
c000d309:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000d30f:	84 d2                	test   dl,dl
c000d311:	75 02                	jne    c000d315 <LogicalDisk::assignDriveLetter()+0x1f>
c000d313:	b0 43                	mov    al,0x43
c000d315:	8b 3d 00 84 02 c0    	mov    edi,DWORD PTR ds:0xc0028400
c000d31b:	0f b6 ca             	movzx  ecx,dl
c000d31e:	0f be e8             	movsx  ebp,al
c000d321:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d325:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000d329:	8b 3d 04 84 02 c0    	mov    edi,DWORD PTR ds:0xc0028404
c000d32f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d333:	3c 43                	cmp    al,0x43
c000d335:	75 10                	jne    c000d347 <LogicalDisk::assignDriveLetter()+0x51>
c000d337:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d33e:	75 5a                	jne    c000d39a <LogicalDisk::assignDriveLetter()+0xa4>
c000d340:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d345:	75 53                	jne    c000d39a <LogicalDisk::assignDriveLetter()+0xa4>
c000d347:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d34a:	ba 01 00 00 00       	mov    edx,0x1
c000d34f:	89 34 24             	mov    DWORD PTR [esp],esi
c000d352:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000d355:	d3 e2                	shl    edx,cl
c000d357:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d35b:	89 d7                	mov    edi,edx
c000d35d:	89 d6                	mov    esi,edx
c000d35f:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000d363:	c1 ff 1f             	sar    edi,0x1f
c000d366:	21 f9                	and    ecx,edi
c000d368:	09 d1                	or     ecx,edx
c000d36a:	75 2e                	jne    c000d39a <LogicalDisk::assignDriveLetter()+0xa4>
c000d36c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d370:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d374:	09 f2                	or     edx,esi
c000d376:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000d379:	89 15 00 84 02 c0    	mov    DWORD PTR ds:0xc0028400,edx
c000d37f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d383:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d389:	89 1c b5 20 84 02 c0 	mov    DWORD PTR [esi*4-0x3ffd7be0],ebx
c000d390:	09 fa                	or     edx,edi
c000d392:	89 15 04 84 02 c0    	mov    DWORD PTR ds:0xc0028404,edx
c000d398:	eb 0d                	jmp    c000d3a7 <LogicalDisk::assignDriveLetter()+0xb1>
c000d39a:	8d 50 01             	lea    edx,[eax+0x1]
c000d39d:	45                   	inc    ebp
c000d39e:	80 fa 5b             	cmp    dl,0x5b
c000d3a1:	88 d0                	mov    al,dl
c000d3a3:	75 8e                	jne    c000d333 <LogicalDisk::assignDriveLetter()+0x3d>
c000d3a5:	31 c0                	xor    eax,eax
c000d3a7:	83 c4 14             	add    esp,0x14
c000d3aa:	5b                   	pop    ebx
c000d3ab:	5e                   	pop    esi
c000d3ac:	5f                   	pop    edi
c000d3ad:	5d                   	pop    ebp
c000d3ae:	c3                   	ret    
c000d3af:	90                   	nop

c000d3b0 <LogicalDisk::mount()>:
c000d3b0:	56                   	push   esi
c000d3b1:	53                   	push   ebx
c000d3b2:	53                   	push   ebx
c000d3b3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d3b7:	8b 1d b4 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb4
c000d3bd:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000d3c7:	85 db                	test   ebx,ebx
c000d3c9:	74 27                	je     c000d3f2 <LogicalDisk::mount()+0x42>
c000d3cb:	51                   	push   ecx
c000d3cc:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d3d3:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d3d5:	83 e8 41             	sub    eax,0x41
c000d3d8:	50                   	push   eax
c000d3d9:	56                   	push   esi
c000d3da:	53                   	push   ebx
c000d3db:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d3de:	83 c4 10             	add    esp,0x10
c000d3e1:	84 c0                	test   al,al
c000d3e3:	74 08                	je     c000d3ed <LogicalDisk::mount()+0x3d>
c000d3e5:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000d3eb:	eb 07                	jmp    c000d3f4 <LogicalDisk::mount()+0x44>
c000d3ed:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d3f0:	eb d5                	jmp    c000d3c7 <LogicalDisk::mount()+0x17>
c000d3f2:	31 c0                	xor    eax,eax
c000d3f4:	5a                   	pop    edx
c000d3f5:	5b                   	pop    ebx
c000d3f6:	5e                   	pop    esi
c000d3f7:	c3                   	ret    

c000d3f8 <LogicalDisk::unmount()>:
c000d3f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d3fc:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d406:	c3                   	ret    
c000d407:	90                   	nop

c000d408 <LogicalDisk::eject()>:
c000d408:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d40c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d412:	8b 10                	mov    edx,DWORD PTR [eax]
c000d414:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d418:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d41b:	90                   	nop

c000d41c <LogicalDisk::unassignDriveLetter()>:
c000d41c:	57                   	push   edi
c000d41d:	56                   	push   esi
c000d41e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d422:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000d429:	85 c9                	test   ecx,ecx
c000d42b:	75 0f                	jne    c000d43c <LogicalDisk::unassignDriveLetter()+0x20>
c000d42d:	c7 44 24 0c 0c 0f 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020f0c
c000d435:	5e                   	pop    esi
c000d436:	5f                   	pop    edi
c000d437:	e9 35 37 00 00       	jmp    c0010b71 <KePanic(char const*)>
c000d43c:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000d443:	83 e9 41             	sub    ecx,0x41
c000d446:	b8 01 00 00 00       	mov    eax,0x1
c000d44b:	c7 04 8d 20 84 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd7be0],0x0
c000d456:	d3 e0                	shl    eax,cl
c000d458:	89 c7                	mov    edi,eax
c000d45a:	f7 d0                	not    eax
c000d45c:	c1 ff 1f             	sar    edi,0x1f
c000d45f:	21 05 00 84 02 c0    	and    DWORD PTR ds:0xc0028400,eax
c000d465:	89 fe                	mov    esi,edi
c000d467:	f7 d6                	not    esi
c000d469:	21 35 04 84 02 c0    	and    DWORD PTR ds:0xc0028404,esi
c000d46f:	5e                   	pop    esi
c000d470:	5f                   	pop    edi
c000d471:	c3                   	ret    

c000d472 <LogicalDisk::read(unsigned long long, int, void*)>:
c000d472:	57                   	push   edi
c000d473:	56                   	push   esi
c000d474:	53                   	push   ebx
c000d475:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d479:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d47d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d481:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d485:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d48b:	77 41                	ja     c000d4ce <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000d48d:	99                   	cdq    
c000d48e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d494:	01 c8                	add    eax,ecx
c000d496:	11 da                	adc    edx,ebx
c000d498:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d49e:	19 d7                	sbb    edi,edx
c000d4a0:	72 33                	jb     c000d4d5 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000d4a2:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d4a8:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d4ae:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d4b2:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d4b6:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d4bc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d4c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d4c6:	5b                   	pop    ebx
c000d4c7:	5e                   	pop    esi
c000d4c8:	5f                   	pop    edi
c000d4c9:	e9 d4 0a 00 00       	jmp    c000dfa2 <VCache::read(unsigned long long, int, void*)>
c000d4ce:	b8 05 00 00 00       	mov    eax,0x5
c000d4d3:	eb 05                	jmp    c000d4da <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000d4d5:	b8 07 00 00 00       	mov    eax,0x7
c000d4da:	5b                   	pop    ebx
c000d4db:	5e                   	pop    esi
c000d4dc:	5f                   	pop    edi
c000d4dd:	c3                   	ret    

c000d4de <LogicalDisk::write(unsigned long long, int, void*)>:
c000d4de:	57                   	push   edi
c000d4df:	56                   	push   esi
c000d4e0:	53                   	push   ebx
c000d4e1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d4e5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d4e9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d4ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d4f1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d4f7:	77 41                	ja     c000d53a <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000d4f9:	99                   	cdq    
c000d4fa:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d500:	01 c8                	add    eax,ecx
c000d502:	11 da                	adc    edx,ebx
c000d504:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d50a:	19 d7                	sbb    edi,edx
c000d50c:	72 33                	jb     c000d541 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000d50e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d514:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d51a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d51e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d522:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d528:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d52e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d532:	5b                   	pop    ebx
c000d533:	5e                   	pop    esi
c000d534:	5f                   	pop    edi
c000d535:	e9 6e 09 00 00       	jmp    c000dea8 <VCache::write(unsigned long long, int, void*)>
c000d53a:	b8 05 00 00 00       	mov    eax,0x5
c000d53f:	eb 05                	jmp    c000d546 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000d541:	b8 07 00 00 00       	mov    eax,0x7
c000d546:	5b                   	pop    ebx
c000d547:	5e                   	pop    esi
c000d548:	5f                   	pop    edi
c000d549:	c3                   	ret    
c000d54a:	66 90                	xchg   ax,ax

c000d54c <Mouse::Mouse(char const*)>:
c000d54c:	83 ec 0c             	sub    esp,0xc
c000d54f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d553:	83 ec 08             	sub    esp,0x8
c000d556:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d55a:	50                   	push   eax
c000d55b:	e8 c0 ec ff ff       	call   c000c220 <Device::Device(char const*)>
c000d560:	83 c4 10             	add    esp,0x10
c000d563:	ba 60 0f 02 c0       	mov    edx,0xc0020f60
c000d568:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d56c:	89 10                	mov    DWORD PTR [eax],edx
c000d56e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d572:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000d57c:	90                   	nop
c000d57d:	83 c4 0c             	add    esp,0xc
c000d580:	c3                   	ret    
c000d581:	90                   	nop
c000d582:	66 90                	xchg   ax,ax

c000d584 <Mouse::~Mouse()>:
c000d584:	83 ec 0c             	sub    esp,0xc
c000d587:	ba 60 0f 02 c0       	mov    edx,0xc0020f60
c000d58c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d590:	89 10                	mov    DWORD PTR [eax],edx
c000d592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d596:	83 ec 0c             	sub    esp,0xc
c000d599:	50                   	push   eax
c000d59a:	e8 eb e9 ff ff       	call   c000bf8a <Device::~Device()>
c000d59f:	83 c4 10             	add    esp,0x10
c000d5a2:	90                   	nop
c000d5a3:	83 c4 0c             	add    esp,0xc
c000d5a6:	c3                   	ret    
c000d5a7:	90                   	nop

c000d5a8 <Mouse::~Mouse()>:
c000d5a8:	83 ec 0c             	sub    esp,0xc
c000d5ab:	83 ec 0c             	sub    esp,0xc
c000d5ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5b2:	e8 cd ff ff ff       	call   c000d584 <Mouse::~Mouse()>
c000d5b7:	83 c4 10             	add    esp,0x10
c000d5ba:	83 ec 08             	sub    esp,0x8
c000d5bd:	68 58 01 00 00       	push   0x158
c000d5c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5c6:	e8 35 d2 ff ff       	call   c000a800 <operator delete(void*, unsigned long)>
c000d5cb:	83 c4 10             	add    esp,0x10
c000d5ce:	83 c4 0c             	add    esp,0xc
c000d5d1:	c3                   	ret    

c000d5d2 <NIC::getMAC()>:
c000d5d2:	31 c0                	xor    eax,eax
c000d5d4:	31 d2                	xor    edx,edx
c000d5d6:	c3                   	ret    
c000d5d7:	90                   	nop

c000d5d8 <NIC::write(int, unsigned char*, int*)>:
c000d5d8:	b8 01 00 00 00       	mov    eax,0x1
c000d5dd:	c3                   	ret    

c000d5de <NIC::NIC(char const*)>:
c000d5de:	83 ec 0c             	sub    esp,0xc
c000d5e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5e5:	83 ec 08             	sub    esp,0x8
c000d5e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ec:	50                   	push   eax
c000d5ed:	e8 2e ec ff ff       	call   c000c220 <Device::Device(char const*)>
c000d5f2:	83 c4 10             	add    esp,0x10
c000d5f5:	ba 8c 0f 02 c0       	mov    edx,0xc0020f8c
c000d5fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5fe:	89 10                	mov    DWORD PTR [eax],edx
c000d600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d604:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000d60e:	90                   	nop
c000d60f:	83 c4 0c             	add    esp,0xc
c000d612:	c3                   	ret    
c000d613:	90                   	nop

c000d614 <NIC::~NIC()>:
c000d614:	83 ec 0c             	sub    esp,0xc
c000d617:	ba 8c 0f 02 c0       	mov    edx,0xc0020f8c
c000d61c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d620:	89 10                	mov    DWORD PTR [eax],edx
c000d622:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d626:	83 ec 0c             	sub    esp,0xc
c000d629:	50                   	push   eax
c000d62a:	e8 5b e9 ff ff       	call   c000bf8a <Device::~Device()>
c000d62f:	83 c4 10             	add    esp,0x10
c000d632:	90                   	nop
c000d633:	83 c4 0c             	add    esp,0xc
c000d636:	c3                   	ret    
c000d637:	90                   	nop

c000d638 <NIC::~NIC()>:
c000d638:	83 ec 0c             	sub    esp,0xc
c000d63b:	83 ec 0c             	sub    esp,0xc
c000d63e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d642:	e8 cd ff ff ff       	call   c000d614 <NIC::~NIC()>
c000d647:	83 c4 10             	add    esp,0x10
c000d64a:	83 ec 08             	sub    esp,0x8
c000d64d:	68 58 01 00 00       	push   0x158
c000d652:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d656:	e8 a5 d1 ff ff       	call   c000a800 <operator delete(void*, unsigned long)>
c000d65b:	83 c4 10             	add    esp,0x10
c000d65e:	83 c4 0c             	add    esp,0xc
c000d661:	c3                   	ret    

c000d662 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d662:	55                   	push   ebp
c000d663:	57                   	push   edi
c000d664:	56                   	push   esi
c000d665:	53                   	push   ebx
c000d666:	81 ec 28 01 00 00    	sub    esp,0x128
c000d66c:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000d673:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000d67a:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000d681:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000d688:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d68c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d690:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d697:	e8 80 ec ff ff       	call   c000c31c <Device::getName()>
c000d69c:	5a                   	pop    edx
c000d69d:	59                   	pop    ecx
c000d69e:	50                   	push   eax
c000d69f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000d6a3:	55                   	push   ebp
c000d6a4:	e8 a7 2f ff ff       	call   c0000650 <strcpy>
c000d6a9:	5b                   	pop    ebx
c000d6aa:	58                   	pop    eax
c000d6ab:	68 b8 0f 02 c0       	push   0xc0020fb8
c000d6b0:	55                   	push   ebp
c000d6b1:	e8 ba 31 ff ff       	call   c0000870 <strcat>
c000d6b6:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000d6bd:	e8 09 a4 ff ff       	call   c0007acb <malloc>
c000d6c2:	83 c4 0c             	add    esp,0xc
c000d6c5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d6c9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d6cd:	89 c3                	mov    ebx,eax
c000d6cf:	57                   	push   edi
c000d6d0:	56                   	push   esi
c000d6d1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000d6d8:	55                   	push   ebp
c000d6d9:	50                   	push   eax
c000d6da:	e8 57 fb ff ff       	call   c000d236 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000d6df:	83 c4 14             	add    esp,0x14
c000d6e2:	53                   	push   ebx
c000d6e3:	e8 0e fc ff ff       	call   c000d2f6 <LogicalDisk::assignDriveLetter()>
c000d6e8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d6eb:	e8 c0 fc ff ff       	call   c000d3b0 <LogicalDisk::mount()>
c000d6f0:	58                   	pop    eax
c000d6f1:	5a                   	pop    edx
c000d6f2:	53                   	push   ebx
c000d6f3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d6fa:	e8 89 e9 ff ff       	call   c000c088 <Device::addChild(Device*)>
c000d6ff:	81 c4 2c 01 00 00    	add    esp,0x12c
c000d705:	5b                   	pop    ebx
c000d706:	5e                   	pop    esi
c000d707:	5f                   	pop    edi
c000d708:	5d                   	pop    ebp
c000d709:	c3                   	ret    

c000d70a <createPartitionsForDisk(PhysicalDisk*)>:
c000d70a:	55                   	push   ebp
c000d70b:	57                   	push   edi
c000d70c:	56                   	push   esi
c000d70d:	53                   	push   ebx
c000d70e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000d714:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000d71b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d721:	3d 00 02 00 00       	cmp    eax,0x200
c000d726:	74 27                	je     c000d74f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000d728:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000d72e:	83 ec 10             	sub    esp,0x10
c000d731:	99                   	cdq    
c000d732:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000d738:	52                   	push   edx
c000d739:	50                   	push   eax
c000d73a:	0f a4 f7 0a          	shld   edi,esi,0xa
c000d73e:	c1 e6 0a             	shl    esi,0xa
c000d741:	89 fd                	mov    ebp,edi
c000d743:	55                   	push   ebp
c000d744:	56                   	push   esi
c000d745:	e8 e6 13 01 00       	call   c001eb30 <__udivdi3>
c000d74a:	e9 b9 00 00 00       	jmp    c000d808 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000d74f:	83 ec 0c             	sub    esp,0xc
c000d752:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d754:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000d758:	56                   	push   esi
c000d759:	6a 01                	push   0x1
c000d75b:	6a 00                	push   0x0
c000d75d:	6a 00                	push   0x0
c000d75f:	53                   	push   ebx
c000d760:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d763:	83 c4 20             	add    esp,0x20
c000d766:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d76e:	75 0a                	jne    c000d77a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000d770:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d778:	74 2c                	je     c000d7a6 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000d77a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d780:	83 ec 10             	sub    esp,0x10
c000d783:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d789:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d78f:	89 f7                	mov    edi,esi
c000d791:	c1 ff 1f             	sar    edi,0x1f
c000d794:	57                   	push   edi
c000d795:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d799:	56                   	push   esi
c000d79a:	c1 e0 0a             	shl    eax,0xa
c000d79d:	52                   	push   edx
c000d79e:	50                   	push   eax
c000d79f:	e8 8c 13 01 00       	call   c001eb30 <__udivdi3>
c000d7a4:	eb 62                	jmp    c000d808 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000d7a6:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000d7ad:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000d7b4:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000d7bb:	89 cf                	mov    edi,ecx
c000d7bd:	83 e2 7f             	and    edx,0x7f
c000d7c0:	83 e7 7f             	and    edi,0x7f
c000d7c3:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000d7c6:	83 e0 7f             	and    eax,0x7f
c000d7c9:	8d 14 01             	lea    edx,[ecx+eax*1]
c000d7cc:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d7d3:	83 e0 7f             	and    eax,0x7f
c000d7d6:	01 d0                	add    eax,edx
c000d7d8:	84 c0                	test   al,al
c000d7da:	89 c5                	mov    ebp,eax
c000d7dc:	74 41                	je     c000d81f <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000d7de:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d7e4:	83 ec 10             	sub    esp,0x10
c000d7e7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d7ed:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d7f3:	89 f7                	mov    edi,esi
c000d7f5:	c1 ff 1f             	sar    edi,0x1f
c000d7f8:	57                   	push   edi
c000d7f9:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d7fd:	56                   	push   esi
c000d7fe:	c1 e0 0a             	shl    eax,0xa
c000d801:	52                   	push   edx
c000d802:	50                   	push   eax
c000d803:	e8 28 13 01 00       	call   c001eb30 <__udivdi3>
c000d808:	83 c4 14             	add    esp,0x14
c000d80b:	52                   	push   edx
c000d80c:	50                   	push   eax
c000d80d:	6a 00                	push   0x0
c000d80f:	6a 00                	push   0x0
c000d811:	53                   	push   ebx
c000d812:	e8 4b fe ff ff       	call   c000d662 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d817:	83 c4 20             	add    esp,0x20
c000d81a:	e9 73 01 00 00       	jmp    c000d992 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000d81f:	89 f0                	mov    eax,esi
c000d821:	31 c9                	xor    ecx,ecx
c000d823:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d82a:	75 02                	jne    c000d82e <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000d82c:	89 cd                	mov    ebp,ecx
c000d82e:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000d836:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d83d:	83 c0 10             	add    eax,0x10
c000d840:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000d848:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000d84f:	c1 e2 08             	shl    edx,0x8
c000d852:	c1 e6 10             	shl    esi,0x10
c000d855:	09 f2                	or     edx,esi
c000d857:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000d85e:	09 f2                	or     edx,esi
c000d860:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000d867:	c1 e6 18             	shl    esi,0x18
c000d86a:	09 f2                	or     edx,esi
c000d86c:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000d873:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000d877:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d87e:	c1 e6 10             	shl    esi,0x10
c000d881:	c1 e2 08             	shl    edx,0x8
c000d884:	09 f2                	or     edx,esi
c000d886:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000d88d:	09 f2                	or     edx,esi
c000d88f:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000d896:	c1 e6 18             	shl    esi,0x18
c000d899:	09 f2                	or     edx,esi
c000d89b:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000d89f:	41                   	inc    ecx
c000d8a0:	83 f9 04             	cmp    ecx,0x4
c000d8a3:	0f 85 7a ff ff ff    	jne    c000d823 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000d8a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8ad:	83 f0 01             	xor    eax,0x1
c000d8b0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d8b4:	75 4f                	jne    c000d905 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d8b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d8ba:	83 f0 01             	xor    eax,0x1
c000d8bd:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d8c1:	75 42                	jne    c000d905 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d8c3:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d8c9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d8d1:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d8d7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d8df:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d8e5:	89 f7                	mov    edi,esi
c000d8e7:	c1 ff 1f             	sar    edi,0x1f
c000d8ea:	57                   	push   edi
c000d8eb:	56                   	push   esi
c000d8ec:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d8f0:	52                   	push   edx
c000d8f1:	c1 e0 0a             	shl    eax,0xa
c000d8f4:	50                   	push   eax
c000d8f5:	e8 36 12 01 00       	call   c001eb30 <__udivdi3>
c000d8fa:	83 c4 10             	add    esp,0x10
c000d8fd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d901:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d905:	89 e8                	mov    eax,ebp
c000d907:	0f b6 e8             	movzx  ebp,al
c000d90a:	85 ed                	test   ebp,ebp
c000d90c:	74 50                	je     c000d95e <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d90e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d912:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d916:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d91a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000d91e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d922:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d926:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d92a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d92e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d932:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d936:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d93a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d93e:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000d942:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d946:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000d94a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d94e:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000d952:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000d956:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000d95a:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000d95e:	31 ed                	xor    ebp,ebp
c000d960:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d964:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d968:	89 f8                	mov    eax,edi
c000d96a:	09 f0                	or     eax,esi
c000d96c:	74 1e                	je     c000d98c <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000d96e:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d972:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d976:	89 d1                	mov    ecx,edx
c000d978:	09 c1                	or     ecx,eax
c000d97a:	74 10                	je     c000d98c <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000d97c:	83 ec 0c             	sub    esp,0xc
c000d97f:	57                   	push   edi
c000d980:	56                   	push   esi
c000d981:	52                   	push   edx
c000d982:	50                   	push   eax
c000d983:	53                   	push   ebx
c000d984:	e8 d9 fc ff ff       	call   c000d662 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d989:	83 c4 20             	add    esp,0x20
c000d98c:	45                   	inc    ebp
c000d98d:	83 fd 04             	cmp    ebp,0x4
c000d990:	75 ce                	jne    c000d960 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000d992:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d998:	5b                   	pop    ebx
c000d999:	5e                   	pop    esi
c000d99a:	5f                   	pop    edi
c000d99b:	5d                   	pop    ebp
c000d99c:	c3                   	ret    
c000d99d:	66 90                	xchg   ax,ax
c000d99f:	90                   	nop

c000d9a0 <Serial::Serial(char const*)>:
c000d9a0:	83 ec 0c             	sub    esp,0xc
c000d9a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9a7:	83 ec 08             	sub    esp,0x8
c000d9aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9ae:	50                   	push   eax
c000d9af:	e8 6c e8 ff ff       	call   c000c220 <Device::Device(char const*)>
c000d9b4:	83 c4 10             	add    esp,0x10
c000d9b7:	ba cc 0f 02 c0       	mov    edx,0xc0020fcc
c000d9bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9c0:	89 10                	mov    DWORD PTR [eax],edx
c000d9c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9c6:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d9d0:	90                   	nop
c000d9d1:	83 c4 0c             	add    esp,0xc
c000d9d4:	c3                   	ret    
c000d9d5:	90                   	nop
c000d9d6:	66 90                	xchg   ax,ax

c000d9d8 <Serial::~Serial()>:
c000d9d8:	83 ec 0c             	sub    esp,0xc
c000d9db:	ba cc 0f 02 c0       	mov    edx,0xc0020fcc
c000d9e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9e4:	89 10                	mov    DWORD PTR [eax],edx
c000d9e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9ea:	83 ec 0c             	sub    esp,0xc
c000d9ed:	50                   	push   eax
c000d9ee:	e8 97 e5 ff ff       	call   c000bf8a <Device::~Device()>
c000d9f3:	83 c4 10             	add    esp,0x10
c000d9f6:	90                   	nop
c000d9f7:	83 c4 0c             	add    esp,0xc
c000d9fa:	c3                   	ret    
c000d9fb:	90                   	nop

c000d9fc <Serial::~Serial()>:
c000d9fc:	83 ec 0c             	sub    esp,0xc
c000d9ff:	83 ec 0c             	sub    esp,0xc
c000da02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da06:	e8 cd ff ff ff       	call   c000d9d8 <Serial::~Serial()>
c000da0b:	83 c4 10             	add    esp,0x10
c000da0e:	83 ec 08             	sub    esp,0x8
c000da11:	68 58 01 00 00       	push   0x158
c000da16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da1a:	e8 e1 cd ff ff       	call   c000a800 <operator delete(void*, unsigned long)>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	83 c4 0c             	add    esp,0xc
c000da25:	c3                   	ret    
c000da26:	66 90                	xchg   ax,ax

c000da28 <Timer::Timer(char const*)>:
c000da28:	83 ec 0c             	sub    esp,0xc
c000da2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da2f:	83 ec 08             	sub    esp,0x8
c000da32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da36:	50                   	push   eax
c000da37:	e8 e4 e7 ff ff       	call   c000c220 <Device::Device(char const*)>
c000da3c:	83 c4 10             	add    esp,0x10
c000da3f:	ba 10 10 02 c0       	mov    edx,0xc0021010
c000da44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da48:	89 10                	mov    DWORD PTR [eax],edx
c000da4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da4e:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000da58:	90                   	nop
c000da59:	83 c4 0c             	add    esp,0xc
c000da5c:	c3                   	ret    
c000da5d:	90                   	nop
c000da5e:	66 90                	xchg   ax,ax

c000da60 <Timer::~Timer()>:
c000da60:	83 ec 0c             	sub    esp,0xc
c000da63:	ba 10 10 02 c0       	mov    edx,0xc0021010
c000da68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da6c:	89 10                	mov    DWORD PTR [eax],edx
c000da6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da72:	83 ec 0c             	sub    esp,0xc
c000da75:	50                   	push   eax
c000da76:	e8 0f e5 ff ff       	call   c000bf8a <Device::~Device()>
c000da7b:	83 c4 10             	add    esp,0x10
c000da7e:	90                   	nop
c000da7f:	83 c4 0c             	add    esp,0xc
c000da82:	c3                   	ret    
c000da83:	90                   	nop

c000da84 <Timer::~Timer()>:
c000da84:	83 ec 0c             	sub    esp,0xc
c000da87:	83 ec 0c             	sub    esp,0xc
c000da8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da8e:	e8 cd ff ff ff       	call   c000da60 <Timer::~Timer()>
c000da93:	83 c4 10             	add    esp,0x10
c000da96:	83 ec 08             	sub    esp,0x8
c000da99:	68 5c 01 00 00       	push   0x15c
c000da9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000daa2:	e8 59 cd ff ff       	call   c000a800 <operator delete(void*, unsigned long)>
c000daa7:	83 c4 10             	add    esp,0x10
c000daaa:	83 c4 0c             	add    esp,0xc
c000daad:	c3                   	ret    

c000daae <Timer::read()>:
c000daae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dab2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000dab8:	c3                   	ret    

c000dab9 <setupTimer(int)>:
c000dab9:	53                   	push   ebx
c000daba:	83 ec 14             	sub    esp,0x14
c000dabd:	68 5c 01 00 00       	push   0x15c
c000dac2:	e8 04 a0 ff ff       	call   c0007acb <malloc>
c000dac7:	89 04 24             	mov    DWORD PTR [esp],eax
c000daca:	89 c3                	mov    ebx,eax
c000dacc:	e8 c7 08 01 00       	call   c001e398 <PIT::PIT()>
c000dad1:	58                   	pop    eax
c000dad2:	5a                   	pop    edx
c000dad3:	53                   	push   ebx
c000dad4:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000dada:	e8 a9 e5 ff ff       	call   c000c088 <Device::addChild(Device*)>
c000dadf:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dae1:	6a 00                	push   0x0
c000dae3:	6a 00                	push   0x0
c000dae5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000dae9:	53                   	push   ebx
c000daea:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000daed:	83 c4 28             	add    esp,0x28
c000daf0:	89 d8                	mov    eax,ebx
c000daf2:	5b                   	pop    ebx
c000daf3:	c3                   	ret    

c000daf4 <timerHandler(unsigned int)>:
c000daf4:	56                   	push   esi
c000daf5:	53                   	push   ebx
c000daf6:	51                   	push   ecx
c000daf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dafb:	01 05 8c 84 02 c0    	add    DWORD PTR ds:0xc002848c,eax
c000db01:	80 3d bd 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebd,0x0
c000db08:	0f 84 4a 01 00 00    	je     c000dc58 <timerHandler(unsigned int)+0x164>
c000db0e:	fa                   	cli    
c000db0f:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c000db15:	83 ec 0c             	sub    esp,0xc
c000db18:	68 78 91 02 c0       	push   0xc0029178
c000db1d:	ff 05 64 91 02 c0    	inc    DWORD PTR ds:0xc0029164
c000db23:	e8 d8 15 01 00       	call   c001f100 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	84 c0                	test   al,al
c000db2d:	0f 85 a1 00 00 00    	jne    c000dbd4 <timerHandler(unsigned int)+0xe0>
c000db33:	83 ec 0c             	sub    esp,0xc
c000db36:	68 78 91 02 c0       	push   0xc0029178
c000db3b:	e8 dc 15 01 00       	call   c001f11c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000db40:	83 c4 10             	add    esp,0x10
c000db43:	89 c6                	mov    esi,eax
c000db45:	8d 76 00             	lea    esi,[esi+0x0]
c000db48:	83 ec 0c             	sub    esp,0xc
c000db4b:	68 78 91 02 c0       	push   0xc0029178
c000db50:	e8 c7 15 01 00       	call   c001f11c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000db55:	c7 04 24 78 91 02 c0 	mov    DWORD PTR [esp],0xc0029178
c000db5c:	89 c3                	mov    ebx,eax
c000db5e:	e8 c1 15 01 00       	call   c001f124 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000db63:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000db66:	83 c4 10             	add    esp,0x10
c000db69:	3b 05 8c 84 02 c0    	cmp    eax,DWORD PTR ds:0xc002848c
c000db6f:	77 23                	ja     c000db94 <timerHandler(unsigned int)+0xa0>
c000db71:	83 ec 0c             	sub    esp,0xc
c000db74:	53                   	push   ebx
c000db75:	e8 f2 7d 00 00       	call   c001596c <unblockTask(ThreadControlBlock*)>
c000db7a:	83 c4 10             	add    esp,0x10
c000db7d:	39 de                	cmp    esi,ebx
c000db7f:	75 27                	jne    c000dba8 <timerHandler(unsigned int)+0xb4>
c000db81:	83 ec 0c             	sub    esp,0xc
c000db84:	68 78 91 02 c0       	push   0xc0029178
c000db89:	e8 8e 15 01 00       	call   c001f11c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000db8e:	89 c6                	mov    esi,eax
c000db90:	eb 12                	jmp    c000dba4 <timerHandler(unsigned int)+0xb0>
c000db92:	66 90                	xchg   ax,ax
c000db94:	52                   	push   edx
c000db95:	52                   	push   edx
c000db96:	53                   	push   ebx
c000db97:	68 78 91 02 c0       	push   0xc0029178
c000db9c:	e8 3f 16 01 00       	call   c001f1e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000dba1:	8d 76 00             	lea    esi,[esi+0x0]
c000dba4:	83 c4 10             	add    esp,0x10
c000dba7:	90                   	nop
c000dba8:	83 ec 0c             	sub    esp,0xc
c000dbab:	68 78 91 02 c0       	push   0xc0029178
c000dbb0:	e8 4b 15 01 00       	call   c001f100 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000dbb5:	83 c4 10             	add    esp,0x10
c000dbb8:	84 c0                	test   al,al
c000dbba:	75 18                	jne    c000dbd4 <timerHandler(unsigned int)+0xe0>
c000dbbc:	83 ec 0c             	sub    esp,0xc
c000dbbf:	68 78 91 02 c0       	push   0xc0029178
c000dbc4:	e8 53 15 01 00       	call   c001f11c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000dbc9:	83 c4 10             	add    esp,0x10
c000dbcc:	39 f0                	cmp    eax,esi
c000dbce:	0f 85 74 ff ff ff    	jne    c000db48 <timerHandler(unsigned int)+0x54>
c000dbd4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dbd9:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000dbdd:	74 41                	je     c000dc20 <timerHandler(unsigned int)+0x12c>
c000dbdf:	80 3d bc 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebc,0x0
c000dbe6:	74 38                	je     c000dc20 <timerHandler(unsigned int)+0x12c>
c000dbe8:	fa                   	cli    
c000dbe9:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c000dbef:	a1 8c 84 02 c0       	mov    eax,ds:0xc002848c
c000dbf4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000dbfa:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000dbfd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000dc03:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000dc06:	72 08                	jb     c000dc10 <timerHandler(unsigned int)+0x11c>
c000dc08:	e8 67 78 00 00       	call   c0015474 <schedule()>
c000dc0d:	8d 76 00             	lea    esi,[esi+0x0]
c000dc10:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000dc15:	48                   	dec    eax
c000dc16:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c000dc1b:	75 03                	jne    c000dc20 <timerHandler(unsigned int)+0x12c>
c000dc1d:	fb                   	sti    
c000dc1e:	66 90                	xchg   ax,ax
c000dc20:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c000dc25:	48                   	dec    eax
c000dc26:	a3 64 91 02 c0       	mov    ds:0xc0029164,eax
c000dc2b:	75 1b                	jne    c000dc48 <timerHandler(unsigned int)+0x154>
c000dc2d:	83 3d 60 91 02 c0 00 	cmp    DWORD PTR ds:0xc0029160,0x0
c000dc34:	74 12                	je     c000dc48 <timerHandler(unsigned int)+0x154>
c000dc36:	c7 05 60 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x0
c000dc40:	e8 2f 78 00 00       	call   c0015474 <schedule()>
c000dc45:	8d 76 00             	lea    esi,[esi+0x0]
c000dc48:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000dc4d:	48                   	dec    eax
c000dc4e:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c000dc53:	75 03                	jne    c000dc58 <timerHandler(unsigned int)+0x164>
c000dc55:	fb                   	sti    
c000dc56:	66 90                	xchg   ax,ax
c000dc58:	58                   	pop    eax
c000dc59:	5b                   	pop    ebx
c000dc5a:	5e                   	pop    esi
c000dc5b:	c3                   	ret    

c000dc5c <VCache::VCache(PhysicalDisk*)>:
c000dc5c:	53                   	push   ebx
c000dc5d:	83 ec 18             	sub    esp,0x18
c000dc60:	ba 40 10 02 c0       	mov    edx,0xc0021040
c000dc65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc69:	89 10                	mov    DWORD PTR [eax],edx
c000dc6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc6f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000dc76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc7a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000dc81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc85:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000dc8c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000dc93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc97:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000dc9e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000dca5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dca9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000dcb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcb4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000dcb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcbc:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000dcc3:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000dcca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcce:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000dcd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcd6:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000dcda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcde:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000dce2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dce6:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000dced:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000dcf5:	83 ec 0c             	sub    esp,0xc
c000dcf8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dcfc:	e8 ca 9d ff ff       	call   c0007acb <malloc>
c000dd01:	83 c4 10             	add    esp,0x10
c000dd04:	89 c3                	mov    ebx,eax
c000dd06:	83 ec 0c             	sub    esp,0xc
c000dd09:	53                   	push   ebx
c000dd0a:	e8 05 75 00 00       	call   c0015214 <Mutex::Mutex()>
c000dd0f:	83 c4 10             	add    esp,0x10
c000dd12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd16:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000dd19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd1d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000dd21:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000dd24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd28:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000dd2f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dd33:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000dd39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd3d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dd40:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dd44:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000dd4a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000dd50:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dd54:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000dd57:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000dd5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd5e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000dd62:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dd66:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000dd6c:	05 00 02 00 00       	add    eax,0x200
c000dd71:	c1 e0 03             	shl    eax,0x3
c000dd74:	83 ec 0c             	sub    esp,0xc
c000dd77:	50                   	push   eax
c000dd78:	e8 4e 9d ff ff       	call   c0007acb <malloc>
c000dd7d:	83 c4 10             	add    esp,0x10
c000dd80:	89 c2                	mov    edx,eax
c000dd82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd86:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000dd89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd8d:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000dd94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd98:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000dd9c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dda0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000dda6:	89 d0                	mov    eax,edx
c000dda8:	c1 e0 02             	shl    eax,0x2
c000ddab:	01 d0                	add    eax,edx
c000ddad:	c1 e0 04             	shl    eax,0x4
c000ddb0:	83 ec 0c             	sub    esp,0xc
c000ddb3:	50                   	push   eax
c000ddb4:	e8 12 9d ff ff       	call   c0007acb <malloc>
c000ddb9:	83 c4 10             	add    esp,0x10
c000ddbc:	89 c2                	mov    edx,eax
c000ddbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddc2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000ddc5:	90                   	nop
c000ddc6:	83 c4 18             	add    esp,0x18
c000ddc9:	5b                   	pop    ebx
c000ddca:	c3                   	ret    
c000ddcb:	90                   	nop

c000ddcc <VCache::invalidateReadBuffer()>:
c000ddcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ddd0:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000ddd6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000ddda:	c3                   	ret    
c000dddb:	90                   	nop

c000dddc <VCache::writeWriteBuffer()>:
c000dddc:	53                   	push   ebx
c000dddd:	83 ec 08             	sub    esp,0x8
c000dde0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dde4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dde8:	74 1e                	je     c000de08 <VCache::writeWriteBuffer()+0x2c>
c000ddea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dded:	83 ec 0c             	sub    esp,0xc
c000ddf0:	8b 10                	mov    edx,DWORD PTR [eax]
c000ddf2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000ddf5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000ddf8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000ddfb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ddfe:	50                   	push   eax
c000ddff:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000de02:	83 c4 20             	add    esp,0x20
c000de05:	8d 76 00             	lea    esi,[esi+0x0]
c000de08:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000de0f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000de16:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000de1a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000de21:	83 c4 08             	add    esp,0x8
c000de24:	5b                   	pop    ebx
c000de25:	c3                   	ret    
c000de26:	66 90                	xchg   ax,ax

c000de28 <VCache::~VCache()>:
c000de28:	83 ec 0c             	sub    esp,0xc
c000de2b:	ba 40 10 02 c0       	mov    edx,0xc0021040
c000de30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de34:	89 10                	mov    DWORD PTR [eax],edx
c000de36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de3a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000de3d:	0f b6 c0             	movzx  eax,al
c000de40:	85 c0                	test   eax,eax
c000de42:	74 10                	je     c000de54 <VCache::~VCache()+0x2c>
c000de44:	83 ec 0c             	sub    esp,0xc
c000de47:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de4b:	e8 8c ff ff ff       	call   c000dddc <VCache::writeWriteBuffer()>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	90                   	nop
c000de54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de58:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000de5b:	83 ec 0c             	sub    esp,0xc
c000de5e:	50                   	push   eax
c000de5f:	e8 77 9c ff ff       	call   c0007adb <free>
c000de64:	83 c4 10             	add    esp,0x10
c000de67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de6b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000de6e:	83 ec 0c             	sub    esp,0xc
c000de71:	50                   	push   eax
c000de72:	e8 64 9c ff ff       	call   c0007adb <free>
c000de77:	83 c4 10             	add    esp,0x10
c000de7a:	90                   	nop
c000de7b:	83 c4 0c             	add    esp,0xc
c000de7e:	c3                   	ret    
c000de7f:	90                   	nop

c000de80 <VCache::~VCache()>:
c000de80:	83 ec 0c             	sub    esp,0xc
c000de83:	83 ec 0c             	sub    esp,0xc
c000de86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de8a:	e8 99 ff ff ff       	call   c000de28 <VCache::~VCache()>
c000de8f:	83 c4 10             	add    esp,0x10
c000de92:	83 ec 08             	sub    esp,0x8
c000de95:	6a 44                	push   0x44
c000de97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de9b:	e8 60 c9 ff ff       	call   c000a800 <operator delete(void*, unsigned long)>
c000dea0:	83 c4 10             	add    esp,0x10
c000dea3:	83 c4 0c             	add    esp,0xc
c000dea6:	c3                   	ret    
c000dea7:	90                   	nop

c000dea8 <VCache::write(unsigned long long, int, void*)>:
c000dea8:	55                   	push   ebp
c000dea9:	57                   	push   edi
c000deaa:	56                   	push   esi
c000deab:	53                   	push   ebx
c000deac:	83 ec 1c             	sub    esp,0x1c
c000deaf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000deb3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000deb7:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000debb:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000debf:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000dec3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec7:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000decb:	74 0f                	je     c000dedc <VCache::write(unsigned long long, int, void*)+0x34>
c000decd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ded1:	53                   	push   ebx
c000ded2:	e8 f5 fe ff ff       	call   c000ddcc <VCache::invalidateReadBuffer()>
c000ded7:	58                   	pop    eax
c000ded8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dedc:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dee0:	74 66                	je     c000df48 <VCache::write(unsigned long long, int, void*)+0xa0>
c000dee2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dee5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dee9:	99                   	cdq    
c000deea:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000deed:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000def0:	89 c6                	mov    esi,eax
c000def2:	31 ce                	xor    esi,ecx
c000def4:	89 d0                	mov    eax,edx
c000def6:	31 e8                	xor    eax,ebp
c000def8:	09 c6                	or     esi,eax
c000defa:	75 38                	jne    c000df34 <VCache::write(unsigned long long, int, void*)+0x8c>
c000defc:	83 ff 01             	cmp    edi,0x1
c000deff:	75 33                	jne    c000df34 <VCache::write(unsigned long long, int, void*)+0x8c>
c000df01:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000df04:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000df08:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000df0c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000df12:	0f af f9             	imul   edi,ecx
c000df15:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000df18:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000df1a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000df1d:	40                   	inc    eax
c000df1e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000df21:	83 f8 50             	cmp    eax,0x50
c000df24:	75 72                	jne    c000df98 <VCache::write(unsigned long long, int, void*)+0xf0>
c000df26:	83 ec 0c             	sub    esp,0xc
c000df29:	53                   	push   ebx
c000df2a:	e8 ad fe ff ff       	call   c000dddc <VCache::writeWriteBuffer()>
c000df2f:	83 c4 10             	add    esp,0x10
c000df32:	eb 64                	jmp    c000df98 <VCache::write(unsigned long long, int, void*)+0xf0>
c000df34:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000df38:	83 ec 0c             	sub    esp,0xc
c000df3b:	53                   	push   ebx
c000df3c:	e8 9b fe ff ff       	call   c000dddc <VCache::writeWriteBuffer()>
c000df41:	83 c4 10             	add    esp,0x10
c000df44:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000df48:	83 ff 4f             	cmp    edi,0x4f
c000df4b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000df4e:	7f 20                	jg     c000df70 <VCache::write(unsigned long long, int, void*)+0xc8>
c000df50:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000df53:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000df57:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c000df5a:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000df5d:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000df60:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000df64:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000df6a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000df6c:	eb 2a                	jmp    c000df98 <VCache::write(unsigned long long, int, void*)+0xf0>
c000df6e:	66 90                	xchg   ax,ax
c000df70:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000df74:	8b 10                	mov    edx,DWORD PTR [eax]
c000df76:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000df7a:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000df7e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000df82:	89 4c 24 34          	mov    DWORD PTR [esp+0x34],ecx
c000df86:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000df8a:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000df8d:	83 c4 1c             	add    esp,0x1c
c000df90:	5b                   	pop    ebx
c000df91:	5e                   	pop    esi
c000df92:	5f                   	pop    edi
c000df93:	5d                   	pop    ebp
c000df94:	ff e0                	jmp    eax
c000df96:	66 90                	xchg   ax,ax
c000df98:	83 c4 1c             	add    esp,0x1c
c000df9b:	31 c0                	xor    eax,eax
c000df9d:	5b                   	pop    ebx
c000df9e:	5e                   	pop    esi
c000df9f:	5f                   	pop    edi
c000dfa0:	5d                   	pop    ebp
c000dfa1:	c3                   	ret    

c000dfa2 <VCache::read(unsigned long long, int, void*)>:
c000dfa2:	55                   	push   ebp
c000dfa3:	57                   	push   edi
c000dfa4:	56                   	push   esi
c000dfa5:	53                   	push   ebx
c000dfa6:	83 ec 1c             	sub    esp,0x1c
c000dfa9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000dfad:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dfb1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000dfb5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000dfb9:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000dfbd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dfc1:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000dfc5:	74 0d                	je     c000dfd4 <VCache::read(unsigned long long, int, void*)+0x32>
c000dfc7:	83 ec 0c             	sub    esp,0xc
c000dfca:	57                   	push   edi
c000dfcb:	e8 0c fe ff ff       	call   c000dddc <VCache::writeWriteBuffer()>
c000dfd0:	83 c4 10             	add    esp,0x10
c000dfd3:	90                   	nop
c000dfd4:	83 fd 01             	cmp    ebp,0x1
c000dfd7:	0f 85 93 00 00 00    	jne    c000e070 <VCache::read(unsigned long long, int, void*)+0xce>
c000dfdd:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dfe0:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000dfe7:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfea:	0f 85 80 00 00 00    	jne    c000e070 <VCache::read(unsigned long long, int, void*)+0xce>
c000dff0:	8b 4f 40             	mov    ecx,DWORD PTR [edi+0x40]
c000dff3:	89 cd                	mov    ebp,ecx
c000dff5:	f7 dd                	neg    ebp
c000dff7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000dffb:	89 e8                	mov    eax,ebp
c000dffd:	21 dd                	and    ebp,ebx
c000dfff:	c1 f8 1f             	sar    eax,0x1f
c000e002:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e006:	89 e8                	mov    eax,ebp
c000e008:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000e00c:	21 f5                	and    ebp,esi
c000e00e:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e012:	89 ea                	mov    edx,ebp
c000e014:	74 2e                	je     c000e044 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e016:	39 6f 34             	cmp    DWORD PTR [edi+0x34],ebp
c000e019:	75 29                	jne    c000e044 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e01b:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e01e:	75 24                	jne    c000e044 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e020:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e023:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e029:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e02c:	8d 70 ff             	lea    esi,[eax-0x1]
c000e02f:	21 f3                	and    ebx,esi
c000e031:	0f af d9             	imul   ebx,ecx
c000e034:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e037:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e03b:	89 de                	mov    esi,ebx
c000e03d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e03f:	31 c0                	xor    eax,eax
c000e041:	eb 61                	jmp    c000e0a4 <VCache::read(unsigned long long, int, void*)+0x102>
c000e043:	90                   	nop
c000e044:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e048:	83 ec 0c             	sub    esp,0xc
c000e04b:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e04e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e052:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e055:	8b 36                	mov    esi,DWORD PTR [esi]
c000e057:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e05a:	51                   	push   ecx
c000e05b:	52                   	push   edx
c000e05c:	50                   	push   eax
c000e05d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e061:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000e064:	83 c4 20             	add    esp,0x20
c000e067:	85 c0                	test   eax,eax
c000e069:	75 39                	jne    c000e0a4 <VCache::read(unsigned long long, int, void*)+0x102>
c000e06b:	eb b3                	jmp    c000e020 <VCache::read(unsigned long long, int, void*)+0x7e>
c000e06d:	8d 76 00             	lea    esi,[esi+0x0]
c000e070:	83 ec 0c             	sub    esp,0xc
c000e073:	57                   	push   edi
c000e074:	e8 53 fd ff ff       	call   c000ddcc <VCache::invalidateReadBuffer()>
c000e079:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e07c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e080:	8b 10                	mov    edx,DWORD PTR [eax]
c000e082:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e086:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e08a:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e08e:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e092:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e096:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e099:	83 c4 2c             	add    esp,0x2c
c000e09c:	5b                   	pop    ebx
c000e09d:	5e                   	pop    esi
c000e09e:	5f                   	pop    edi
c000e09f:	5d                   	pop    ebp
c000e0a0:	ff e0                	jmp    eax
c000e0a2:	66 90                	xchg   ax,ax
c000e0a4:	83 c4 1c             	add    esp,0x1c
c000e0a7:	5b                   	pop    ebx
c000e0a8:	5e                   	pop    esi
c000e0a9:	5f                   	pop    edi
c000e0aa:	5d                   	pop    ebp
c000e0ab:	c3                   	ret    

c000e0ac <Video::putrect(int, int, int, int, unsigned int)>:
c000e0ac:	55                   	push   ebp
c000e0ad:	57                   	push   edi
c000e0ae:	56                   	push   esi
c000e0af:	53                   	push   ebx
c000e0b0:	83 ec 1c             	sub    esp,0x1c
c000e0b3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e0b7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e0bb:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e0bf:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e0c3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e0c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e0cb:	01 df                	add    edi,ebx
c000e0cd:	39 fb                	cmp    ebx,edi
c000e0cf:	7d 1f                	jge    c000e0f0 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000e0d1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e0d5:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e0d9:	7d 12                	jge    c000e0ed <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000e0db:	8b 16                	mov    edx,DWORD PTR [esi]
c000e0dd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e0e1:	53                   	push   ebx
c000e0e2:	55                   	push   ebp
c000e0e3:	45                   	inc    ebp
c000e0e4:	56                   	push   esi
c000e0e5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e0e8:	83 c4 10             	add    esp,0x10
c000e0eb:	eb e8                	jmp    c000e0d5 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000e0ed:	43                   	inc    ebx
c000e0ee:	eb dd                	jmp    c000e0cd <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000e0f0:	83 c4 1c             	add    esp,0x1c
c000e0f3:	5b                   	pop    ebx
c000e0f4:	5e                   	pop    esi
c000e0f5:	5f                   	pop    edi
c000e0f6:	5d                   	pop    ebp
c000e0f7:	c3                   	ret    

c000e0f8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000e0f8:	55                   	push   ebp
c000e0f9:	57                   	push   edi
c000e0fa:	31 ff                	xor    edi,edi
c000e0fc:	56                   	push   esi
c000e0fd:	53                   	push   ebx
c000e0fe:	83 ec 1c             	sub    esp,0x1c
c000e101:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000e105:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000e109:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000e110:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000e115:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e119:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e11d:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000e121:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000e124:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e128:	01 f9                	add    ecx,edi
c000e12a:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000e12e:	7d 2f                	jge    c000e15f <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000e130:	31 f6                	xor    esi,esi
c000e132:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e136:	01 f2                	add    edx,esi
c000e138:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000e13c:	7d 1a                	jge    c000e158 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000e13e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e141:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000e144:	46                   	inc    esi
c000e145:	51                   	push   ecx
c000e146:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000e14a:	52                   	push   edx
c000e14b:	55                   	push   ebp
c000e14c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e14f:	83 c4 10             	add    esp,0x10
c000e152:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e156:	eb da                	jmp    c000e132 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000e158:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000e15c:	47                   	inc    edi
c000e15d:	eb c5                	jmp    c000e124 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000e15f:	83 c4 1c             	add    esp,0x1c
c000e162:	5b                   	pop    ebx
c000e163:	5e                   	pop    esi
c000e164:	5f                   	pop    edi
c000e165:	5d                   	pop    ebp
c000e166:	c3                   	ret    
c000e167:	90                   	nop

c000e168 <Video::blit(unsigned int*, int, int, int, int)>:
c000e168:	55                   	push   ebp
c000e169:	ba 00 00 00 00       	mov    edx,0x0
c000e16e:	57                   	push   edi
c000e16f:	56                   	push   esi
c000e170:	53                   	push   ebx
c000e171:	83 ec 1c             	sub    esp,0x1c
c000e174:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e178:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e17c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e180:	85 c0                	test   eax,eax
c000e182:	0f 49 d0             	cmovns edx,eax
c000e185:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000e18c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000e190:	89 eb                	mov    ebx,ebp
c000e192:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e196:	01 ea                	add    edx,ebp
c000e198:	39 da                	cmp    edx,ebx
c000e19a:	7e 54                	jle    c000e1f0 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000e19c:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e1a2:	7c 4c                	jl     c000e1f0 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000e1a4:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000e1a8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e1ac:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e1b0:	01 c1                	add    ecx,eax
c000e1b2:	39 f9                	cmp    ecx,edi
c000e1b4:	7e 2f                	jle    c000e1e5 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000e1b6:	83 c2 04             	add    edx,0x4
c000e1b9:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e1bf:	7c 21                	jl     c000e1e2 <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000e1c1:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e1c5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e1c7:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000e1ca:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e1ce:	55                   	push   ebp
c000e1cf:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e1d3:	56                   	push   esi
c000e1d4:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e1d7:	83 c4 10             	add    esp,0x10
c000e1da:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e1de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e1e2:	47                   	inc    edi
c000e1e3:	eb c7                	jmp    c000e1ac <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000e1e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000e1e9:	43                   	inc    ebx
c000e1ea:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000e1ee:	eb a2                	jmp    c000e192 <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000e1f0:	83 c4 1c             	add    esp,0x1c
c000e1f3:	5b                   	pop    ebx
c000e1f4:	5e                   	pop    esi
c000e1f5:	5f                   	pop    edi
c000e1f6:	5d                   	pop    ebp
c000e1f7:	c3                   	ret    

c000e1f8 <Video::clearScreen(unsigned int)>:
c000e1f8:	57                   	push   edi
c000e1f9:	56                   	push   esi
c000e1fa:	53                   	push   ebx
c000e1fb:	31 db                	xor    ebx,ebx
c000e1fd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e201:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e207:	7e 1f                	jle    c000e228 <Video::clearScreen(unsigned int)+0x30>
c000e209:	31 ff                	xor    edi,edi
c000e20b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e211:	7e 12                	jle    c000e225 <Video::clearScreen(unsigned int)+0x2d>
c000e213:	8b 06                	mov    eax,DWORD PTR [esi]
c000e215:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e219:	53                   	push   ebx
c000e21a:	57                   	push   edi
c000e21b:	47                   	inc    edi
c000e21c:	56                   	push   esi
c000e21d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	eb e6                	jmp    c000e20b <Video::clearScreen(unsigned int)+0x13>
c000e225:	43                   	inc    ebx
c000e226:	eb d9                	jmp    c000e201 <Video::clearScreen(unsigned int)+0x9>
c000e228:	5b                   	pop    ebx
c000e229:	5e                   	pop    esi
c000e22a:	5f                   	pop    edi
c000e22b:	c3                   	ret    

c000e22c <Video::putpixel(int, int, unsigned int)>:
c000e22c:	c7 44 24 04 48 10 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021048
c000e234:	e9 38 29 00 00       	jmp    c0010b71 <KePanic(char const*)>
c000e239:	90                   	nop

c000e23a <Video::readPixelApprox(int, int)>:
c000e23a:	83 ec 18             	sub    esp,0x18
c000e23d:	68 69 10 02 c0       	push   0xc0021069
c000e242:	e8 2a 29 00 00       	call   c0010b71 <KePanic(char const*)>
c000e247:	31 c0                	xor    eax,eax
c000e249:	83 c4 1c             	add    esp,0x1c
c000e24c:	c3                   	ret    
c000e24d:	90                   	nop

c000e24e <Video::Video(char const*)>:
c000e24e:	83 ec 0c             	sub    esp,0xc
c000e251:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e255:	83 ec 08             	sub    esp,0x8
c000e258:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e25c:	50                   	push   eax
c000e25d:	e8 be df ff ff       	call   c000c220 <Device::Device(char const*)>
c000e262:	83 c4 10             	add    esp,0x10
c000e265:	ba e4 10 02 c0       	mov    edx,0xc00210e4
c000e26a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e26e:	89 10                	mov    DWORD PTR [eax],edx
c000e270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e274:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000e27e:	90                   	nop
c000e27f:	83 c4 0c             	add    esp,0xc
c000e282:	c3                   	ret    
c000e283:	90                   	nop

c000e284 <Video::~Video()>:
c000e284:	83 ec 0c             	sub    esp,0xc
c000e287:	ba e4 10 02 c0       	mov    edx,0xc00210e4
c000e28c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e290:	89 10                	mov    DWORD PTR [eax],edx
c000e292:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e296:	83 ec 0c             	sub    esp,0xc
c000e299:	50                   	push   eax
c000e29a:	e8 eb dc ff ff       	call   c000bf8a <Device::~Device()>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	90                   	nop
c000e2a3:	83 c4 0c             	add    esp,0xc
c000e2a6:	c3                   	ret    
c000e2a7:	90                   	nop

c000e2a8 <Video::~Video()>:
c000e2a8:	83 ec 0c             	sub    esp,0xc
c000e2ab:	83 ec 0c             	sub    esp,0xc
c000e2ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b2:	e8 cd ff ff ff       	call   c000e284 <Video::~Video()>
c000e2b7:	83 c4 10             	add    esp,0x10
c000e2ba:	83 ec 08             	sub    esp,0x8
c000e2bd:	68 64 01 00 00       	push   0x164
c000e2c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2c6:	e8 35 c5 ff ff       	call   c000a800 <operator delete(void*, unsigned long)>
c000e2cb:	83 c4 10             	add    esp,0x10
c000e2ce:	83 c4 0c             	add    esp,0xc
c000e2d1:	c3                   	ret    

c000e2d2 <Video::isMonochrome()>:
c000e2d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e2d6:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e2dc:	c3                   	ret    
c000e2dd:	90                   	nop

c000e2de <Video::getWidth()>:
c000e2de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e2e2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e2e8:	c3                   	ret    
c000e2e9:	90                   	nop

c000e2ea <Video::getHeight()>:
c000e2ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e2ee:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e2f4:	c3                   	ret    
c000e2f5:	90                   	nop

c000e2f6 <Video::drawCursor(int, int, unsigned int*, int)>:
c000e2f6:	55                   	push   ebp
c000e2f7:	57                   	push   edi
c000e2f8:	56                   	push   esi
c000e2f9:	53                   	push   ebx
c000e2fa:	83 ec 2c             	sub    esp,0x2c
c000e2fd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e301:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e305:	83 f8 01             	cmp    eax,0x1
c000e308:	19 c9                	sbb    ecx,ecx
c000e30a:	31 db                	xor    ebx,ebx
c000e30c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e310:	89 ce                	mov    esi,ecx
c000e312:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e31a:	f7 d6                	not    esi
c000e31c:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000e322:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e326:	01 d8                	add    eax,ebx
c000e328:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e32c:	57                   	push   edi
c000e32d:	e8 b8 ff ff ff       	call   c000e2ea <Video::getHeight()>
c000e332:	59                   	pop    ecx
c000e333:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e337:	7e 70                	jle    c000e3a9 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e339:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e33d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000e341:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e344:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e348:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e34c:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e353:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e357:	89 e8                	mov    eax,ebp
c000e359:	83 c0 20             	add    eax,0x20
c000e35c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e360:	57                   	push   edi
c000e361:	e8 78 ff ff ff       	call   c000e2de <Video::getWidth()>
c000e366:	5a                   	pop    edx
c000e367:	39 c5                	cmp    ebp,eax
c000e369:	7d 34                	jge    c000e39f <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000e36b:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e370:	74 05                	je     c000e377 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000e372:	8b 07                	mov    eax,DWORD PTR [edi]
c000e374:	56                   	push   esi
c000e375:	eb 0d                	jmp    c000e384 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000e377:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e37c:	74 12                	je     c000e390 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000e37e:	8b 07                	mov    eax,DWORD PTR [edi]
c000e380:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e384:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e388:	55                   	push   ebp
c000e389:	57                   	push   edi
c000e38a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e394:	45                   	inc    ebp
c000e395:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e399:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000e39d:	75 c1                	jne    c000e360 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000e39f:	43                   	inc    ebx
c000e3a0:	83 fb 20             	cmp    ebx,0x20
c000e3a3:	0f 85 79 ff ff ff    	jne    c000e322 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000e3a9:	83 c4 2c             	add    esp,0x2c
c000e3ac:	5b                   	pop    ebx
c000e3ad:	5e                   	pop    esi
c000e3ae:	5f                   	pop    edi
c000e3af:	5d                   	pop    ebp
c000e3b0:	c3                   	ret    
c000e3b1:	90                   	nop

c000e3b2 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e3b2:	55                   	push   ebp
c000e3b3:	57                   	push   edi
c000e3b4:	56                   	push   esi
c000e3b5:	53                   	push   ebx
c000e3b6:	83 ec 28             	sub    esp,0x28
c000e3b9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e3bd:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c000e3c1:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e3c5:	0f b6 73 0f          	movzx  esi,BYTE PTR [ebx+0xf]
c000e3c9:	c1 e7 08             	shl    edi,0x8
c000e3cc:	01 c7                	add    edi,eax
c000e3ce:	0f b6 43 0e          	movzx  eax,BYTE PTR [ebx+0xe]
c000e3d2:	c1 e6 08             	shl    esi,0x8
c000e3d5:	01 f0                	add    eax,esi
c000e3d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e3db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3df:	0f af c7             	imul   eax,edi
c000e3e2:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e3e9:	50                   	push   eax
c000e3ea:	e8 dc 96 ff ff       	call   c0007acb <malloc>
c000e3ef:	83 c4 10             	add    esp,0x10
c000e3f2:	85 c0                	test   eax,eax
c000e3f4:	89 c5                	mov    ebp,eax
c000e3f6:	75 10                	jne    c000e408 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000e3f8:	83 ec 0c             	sub    esp,0xc
c000e3fb:	68 94 10 02 c0       	push   0xc0021094
c000e400:	e8 6c 27 00 00       	call   c0010b71 <KePanic(char const*)>
c000e405:	83 c4 10             	add    esp,0x10
c000e408:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000e40c:	ba 12 00 00 00       	mov    edx,0x12
c000e411:	85 c0                	test   eax,eax
c000e413:	74 11                	je     c000e426 <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000e415:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e419:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e41d:	c1 fa 03             	sar    edx,0x3
c000e420:	0f af d1             	imul   edx,ecx
c000e423:	83 c2 12             	add    edx,0x12
c000e426:	85 ff                	test   edi,edi
c000e428:	74 06                	je     c000e430 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000e42a:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000e42e:	75 12                	jne    c000e442 <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000e430:	83 ec 0c             	sub    esp,0xc
c000e433:	68 a4 10 02 c0       	push   0xc00210a4
c000e438:	e8 c1 c4 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c000e43d:	e9 b8 00 00 00       	jmp    c000e4fa <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000e442:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e446:	83 f9 02             	cmp    ecx,0x2
c000e449:	0f 85 96 00 00 00    	jne    c000e4e5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000e44f:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e454:	75 0e                	jne    c000e464 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e456:	85 c0                	test   eax,eax
c000e458:	75 0a                	jne    c000e464 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e45a:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000e45d:	83 e8 18             	sub    eax,0x18
c000e460:	a8 f7                	test   al,0xf7
c000e462:	74 0a                	je     c000e46e <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000e464:	83 ec 0c             	sub    esp,0xc
c000e467:	68 b9 10 02 c0       	push   0xc00210b9
c000e46c:	eb 7f                	jmp    c000e4ed <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000e46e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e476:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000e47e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000e482:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000e486:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e48e:	75 0c                	jne    c000e49c <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000e490:	0f b6 4c 13 03       	movzx  ecx,BYTE PTR [ebx+edx*1+0x3]
c000e495:	c1 e1 18             	shl    ecx,0x18
c000e498:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e49c:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000e4a1:	46                   	inc    esi
c000e4a2:	89 c8                	mov    eax,ecx
c000e4a4:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000e4a9:	c1 e0 10             	shl    eax,0x10
c000e4ac:	c1 e1 08             	shl    ecx,0x8
c000e4af:	09 c1                	or     ecx,eax
c000e4b1:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000e4b5:	09 c1                	or     ecx,eax
c000e4b7:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000e4bb:	89 4c b5 fc          	mov    DWORD PTR [ebp+esi*4-0x4],ecx
c000e4bf:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000e4c3:	c1 f8 03             	sar    eax,0x3
c000e4c6:	01 c2                	add    edx,eax
c000e4c8:	89 f0                	mov    eax,esi
c000e4ca:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000e4ce:	39 c7                	cmp    edi,eax
c000e4d0:	7f b0                	jg     c000e482 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000e4d2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e4d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e4da:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000e4dd:	7e 22                	jle    c000e501 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000e4df:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000e4e3:	eb 99                	jmp    c000e47e <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000e4e5:	50                   	push   eax
c000e4e6:	50                   	push   eax
c000e4e7:	51                   	push   ecx
c000e4e8:	68 c7 10 02 c0       	push   0xc00210c7
c000e4ed:	e8 0c c4 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c000e4f2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e4f5:	e8 e1 95 ff ff       	call   c0007adb <free>
c000e4fa:	83 c4 10             	add    esp,0x10
c000e4fd:	31 ed                	xor    ebp,ebp
c000e4ff:	eb 0f                	jmp    c000e510 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000e501:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e505:	89 38                	mov    DWORD PTR [eax],edi
c000e507:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e50b:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000e50e:	89 38                	mov    DWORD PTR [eax],edi
c000e510:	83 c4 1c             	add    esp,0x1c
c000e513:	89 e8                	mov    eax,ebp
c000e515:	5b                   	pop    ebx
c000e516:	5e                   	pop    esi
c000e517:	5f                   	pop    edi
c000e518:	5d                   	pop    ebp
c000e519:	c3                   	ret    

c000e51a <Video::putTGA(int, int, unsigned char*, int)>:
c000e51a:	55                   	push   ebp
c000e51b:	57                   	push   edi
c000e51c:	56                   	push   esi
c000e51d:	53                   	push   ebx
c000e51e:	83 ec 28             	sub    esp,0x28
c000e521:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e525:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e529:	50                   	push   eax
c000e52a:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e52e:	50                   	push   eax
c000e52f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e533:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e537:	57                   	push   edi
c000e538:	e8 75 fe ff ff       	call   c000e3b2 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000e53d:	83 c4 20             	add    esp,0x20
c000e540:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e544:	85 c0                	test   eax,eax
c000e546:	74 35                	je     c000e57d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e548:	89 c6                	mov    esi,eax
c000e54a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e54e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e552:	39 d8                	cmp    eax,ebx
c000e554:	7e 27                	jle    c000e57d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e556:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e55a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e55e:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000e562:	39 e9                	cmp    ecx,ebp
c000e564:	7e 14                	jle    c000e57a <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000e566:	83 c6 04             	add    esi,0x4
c000e569:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000e56b:	ff 76 fc             	push   DWORD PTR [esi-0x4]
c000e56e:	53                   	push   ebx
c000e56f:	55                   	push   ebp
c000e570:	45                   	inc    ebp
c000e571:	57                   	push   edi
c000e572:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e575:	83 c4 10             	add    esp,0x10
c000e578:	eb e0                	jmp    c000e55a <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000e57a:	43                   	inc    ebx
c000e57b:	eb cd                	jmp    c000e54a <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000e57d:	83 c4 1c             	add    esp,0x1c
c000e580:	5b                   	pop    ebx
c000e581:	5e                   	pop    esi
c000e582:	5f                   	pop    edi
c000e583:	5d                   	pop    ebp
c000e584:	c3                   	ret    
c000e585:	66 90                	xchg   ax,ax
c000e587:	90                   	nop

c000e588 <ACPI::close(int, int, void*)>:
c000e588:	83 ec 1c             	sub    esp,0x1c
c000e58b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000e593:	74 0b                	je     c000e5a0 <ACPI::close(int, int, void*)+0x18>
c000e595:	b8 00 00 00 00       	mov    eax,0x0
c000e59a:	e9 99 00 00 00       	jmp    c000e638 <ACPI::close(int, int, void*)+0xb0>
c000e59f:	90                   	nop
c000e5a0:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000e5a5:	75 29                	jne    c000e5d0 <ACPI::close(int, int, void*)+0x48>
c000e5a7:	a1 a8 84 02 c0       	mov    eax,ds:0xc00284a8
c000e5ac:	85 c0                	test   eax,eax
c000e5ae:	74 08                	je     c000e5b8 <ACPI::close(int, int, void*)+0x30>
c000e5b0:	a1 a8 84 02 c0       	mov    eax,ds:0xc00284a8
c000e5b5:	ff d0                	call   eax
c000e5b7:	90                   	nop
c000e5b8:	83 ec 0c             	sub    esp,0xc
c000e5bb:	68 28 11 02 c0       	push   0xc0021128
c000e5c0:	e8 ac 25 00 00       	call   c0010b71 <KePanic(char const*)>
c000e5c5:	83 c4 10             	add    esp,0x10
c000e5c8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e5cd:	eb 69                	jmp    c000e638 <ACPI::close(int, int, void*)+0xb0>
c000e5cf:	90                   	nop
c000e5d0:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000e5d5:	75 59                	jne    c000e630 <ACPI::close(int, int, void*)+0xa8>
c000e5d7:	a1 a4 84 02 c0       	mov    eax,ds:0xc00284a4
c000e5dc:	85 c0                	test   eax,eax
c000e5de:	74 08                	je     c000e5e8 <ACPI::close(int, int, void*)+0x60>
c000e5e0:	a1 a4 84 02 c0       	mov    eax,ds:0xc00284a4
c000e5e5:	ff d0                	call   eax
c000e5e7:	90                   	nop
c000e5e8:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000e5ed:	8d 76 00             	lea    esi,[esi+0x0]
c000e5f0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000e5f5:	83 e0 02             	and    eax,0x2
c000e5f8:	74 1e                	je     c000e618 <ACPI::close(int, int, void*)+0x90>
c000e5fa:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000e601:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e605:	89 c2                	mov    edx,eax
c000e607:	ec                   	in     al,dx
c000e608:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e60c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000e610:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e614:	eb da                	jmp    c000e5f0 <ACPI::close(int, int, void*)+0x68>
c000e616:	66 90                	xchg   ax,ax
c000e618:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000e61f:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000e624:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000e628:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e62c:	ee                   	out    dx,al
c000e62d:	8d 76 00             	lea    esi,[esi+0x0]
c000e630:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e635:	8d 76 00             	lea    esi,[esi+0x0]
c000e638:	83 c4 1c             	add    esp,0x1c
c000e63b:	c3                   	ret    

c000e63c <findRSDP()>:
c000e63c:	83 ec 1c             	sub    esp,0x1c
c000e63f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000e644:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e64a:	83 e0 04             	and    eax,0x4
c000e64d:	0f b6 c0             	movzx  eax,al
c000e650:	85 c0                	test   eax,eax
c000e652:	75 08                	jne    c000e65c <findRSDP()+0x20>
c000e654:	b8 00 00 00 00       	mov    eax,0x0
c000e659:	eb 75                	jmp    c000e6d0 <findRSDP()+0x94>
c000e65b:	90                   	nop
c000e65c:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c000e661:	3d ff 07 00 00       	cmp    eax,0x7ff
c000e666:	7f 1c                	jg     c000e684 <findRSDP()+0x48>
c000e668:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000e66d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e673:	83 e2 fb             	and    edx,0xfffffffb
c000e676:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e67c:	b8 00 00 00 00       	mov    eax,0x0
c000e681:	eb 4d                	jmp    c000e6d0 <findRSDP()+0x94>
c000e683:	90                   	nop
c000e684:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000e68c:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000e694:	77 32                	ja     c000e6c8 <findRSDP()+0x8c>
c000e696:	83 ec 04             	sub    esp,0x4
c000e699:	6a 08                	push   0x8
c000e69b:	68 c3 11 02 c0       	push   0xc00211c3
c000e6a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e6a4:	e8 d7 1c ff ff       	call   c0000380 <memcmp>
c000e6a9:	83 c4 10             	add    esp,0x10
c000e6ac:	85 c0                	test   eax,eax
c000e6ae:	0f 94 c0             	sete   al
c000e6b1:	0f b6 c0             	movzx  eax,al
c000e6b4:	85 c0                	test   eax,eax
c000e6b6:	74 08                	je     c000e6c0 <findRSDP()+0x84>
c000e6b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e6bc:	eb 12                	jmp    c000e6d0 <findRSDP()+0x94>
c000e6be:	66 90                	xchg   ax,ax
c000e6c0:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000e6c5:	eb c5                	jmp    c000e68c <findRSDP()+0x50>
c000e6c7:	90                   	nop
c000e6c8:	b8 00 00 00 00       	mov    eax,0x0
c000e6cd:	8d 76 00             	lea    esi,[esi+0x0]
c000e6d0:	83 c4 1c             	add    esp,0x1c
c000e6d3:	c3                   	ret    

c000e6d4 <loadACPITables(unsigned char*)>:
c000e6d4:	57                   	push   edi
c000e6d5:	56                   	push   esi
c000e6d6:	53                   	push   ebx
c000e6d7:	83 ec 60             	sub    esp,0x60
c000e6da:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000e6df:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e6e5:	83 e0 04             	and    eax,0x4
c000e6e8:	0f b6 c0             	movzx  eax,al
c000e6eb:	85 c0                	test   eax,eax
c000e6ed:	0f 84 41 02 00 00    	je     c000e934 <loadACPITables(unsigned char*)+0x260>
c000e6f3:	a0 c0 86 02 c0       	mov    al,ds:0xc00286c0
c000e6f8:	0f b6 c0             	movzx  eax,al
c000e6fb:	85 c0                	test   eax,eax
c000e6fd:	74 79                	je     c000e778 <loadACPITables(unsigned char*)+0xa4>
c000e6ff:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e703:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e707:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e70b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e70e:	83 e8 24             	sub    eax,0x24
c000e711:	c1 e8 03             	shr    eax,0x3
c000e714:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e718:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000e720:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e724:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000e728:	0f 8d ba 00 00 00    	jge    c000e7e8 <loadACPITables(unsigned char*)+0x114>
c000e72e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e732:	83 c0 24             	add    eax,0x24
c000e735:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000e739:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e73d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e741:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e745:	c1 e0 03             	shl    eax,0x3
c000e748:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000e74c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e750:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e753:	8b 00                	mov    eax,DWORD PTR [eax]
c000e755:	89 c1                	mov    ecx,eax
c000e757:	a1 ac 84 02 c0       	mov    eax,ds:0xc00284ac
c000e75c:	8d 50 01             	lea    edx,[eax+0x1]
c000e75f:	89 15 ac 84 02 c0    	mov    DWORD PTR ds:0xc00284ac,edx
c000e765:	89 ca                	mov    edx,ecx
c000e767:	89 14 c5 c4 84 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7b3c],edx
c000e76e:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000e773:	eb ab                	jmp    c000e720 <loadACPITables(unsigned char*)+0x4c>
c000e775:	8d 76 00             	lea    esi,[esi+0x0]
c000e778:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e77c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e780:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e784:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e787:	83 e8 24             	sub    eax,0x24
c000e78a:	c1 e8 02             	shr    eax,0x2
c000e78d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e791:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000e799:	8d 76 00             	lea    esi,[esi+0x0]
c000e79c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e7a0:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000e7a4:	7d 42                	jge    c000e7e8 <loadACPITables(unsigned char*)+0x114>
c000e7a6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e7aa:	83 c0 24             	add    eax,0x24
c000e7ad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e7b1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e7b5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e7b9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e7bd:	c1 e0 02             	shl    eax,0x2
c000e7c0:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e7c4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e7c8:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e7ca:	a1 ac 84 02 c0       	mov    eax,ds:0xc00284ac
c000e7cf:	8d 50 01             	lea    edx,[eax+0x1]
c000e7d2:	89 15 ac 84 02 c0    	mov    DWORD PTR ds:0xc00284ac,edx
c000e7d8:	89 ca                	mov    edx,ecx
c000e7da:	89 14 c5 c4 84 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7b3c],edx
c000e7e1:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000e7e6:	eb b4                	jmp    c000e79c <loadACPITables(unsigned char*)+0xc8>
c000e7e8:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000e7f0:	a1 ac 84 02 c0       	mov    eax,ds:0xc00284ac
c000e7f5:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000e7f9:	0f 8d 39 01 00 00    	jge    c000e938 <loadACPITables(unsigned char*)+0x264>
c000e7ff:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e803:	8b 04 c5 c4 84 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd7b3c]
c000e80a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e80e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e812:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e816:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e81a:	25 ff 0f 00 00       	and    eax,0xfff
c000e81f:	89 c6                	mov    esi,eax
c000e821:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000e827:	83 ec 0c             	sub    esp,0xc
c000e82a:	6a 01                	push   0x1
c000e82c:	e8 b8 ad ff ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c000e831:	83 c4 10             	add    esp,0x10
c000e834:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e838:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e83e:	83 ec 0c             	sub    esp,0xc
c000e841:	6a 01                	push   0x1
c000e843:	6a 01                	push   0x1
c000e845:	50                   	push   eax
c000e846:	52                   	push   edx
c000e847:	53                   	push   ebx
c000e848:	e8 af b6 ff ff       	call   c0009efc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e84d:	83 c4 20             	add    esp,0x20
c000e850:	09 f0                	or     eax,esi
c000e852:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e856:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e85a:	c1 e0 03             	shl    eax,0x3
c000e85d:	05 c0 84 02 c0       	add    eax,0xc00284c0
c000e862:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e866:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e86a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e86e:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e876:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e87a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e87e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e882:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e886:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e88a:	89 c6                	mov    esi,eax
c000e88c:	89 d7                	mov    edi,edx
c000e88e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e890:	89 c8                	mov    eax,ecx
c000e892:	89 fa                	mov    edx,edi
c000e894:	89 f3                	mov    ebx,esi
c000e896:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e89a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e89e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e8a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e8a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e8a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e8ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e8b1:	05 00 10 00 00       	add    eax,0x1000
c000e8b6:	c1 e8 0c             	shr    eax,0xc
c000e8b9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e8bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e8c1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e8c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e8c9:	25 ff 0f 00 00       	and    eax,0xfff
c000e8ce:	89 c6                	mov    esi,eax
c000e8d0:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000e8d6:	83 ec 0c             	sub    esp,0xc
c000e8d9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e8dd:	e8 07 ad ff ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c000e8e2:	83 c4 10             	add    esp,0x10
c000e8e5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e8e9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e8ef:	83 ec 0c             	sub    esp,0xc
c000e8f2:	6a 01                	push   0x1
c000e8f4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e8f8:	50                   	push   eax
c000e8f9:	52                   	push   edx
c000e8fa:	53                   	push   ebx
c000e8fb:	e8 fc b5 ff ff       	call   c0009efc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e900:	83 c4 20             	add    esp,0x20
c000e903:	09 f0                	or     eax,esi
c000e905:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e909:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e90d:	83 ec 0c             	sub    esp,0xc
c000e910:	50                   	push   eax
c000e911:	e8 e7 af ff ff       	call   c00098fd <Virt::freeKernelVirtualPages(unsigned long)>
c000e916:	83 c4 10             	add    esp,0x10
c000e919:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e91d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e921:	89 14 c5 c4 84 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7b3c],edx
c000e928:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000e92d:	e9 be fe ff ff       	jmp    c000e7f0 <loadACPITables(unsigned char*)+0x11c>
c000e932:	66 90                	xchg   ax,ax
c000e934:	90                   	nop
c000e935:	8d 76 00             	lea    esi,[esi+0x0]
c000e938:	83 c4 60             	add    esp,0x60
c000e93b:	5b                   	pop    ebx
c000e93c:	5e                   	pop    esi
c000e93d:	5f                   	pop    edi
c000e93e:	c3                   	ret    
c000e93f:	90                   	nop

c000e940 <findRSDT(unsigned char*)>:
c000e940:	57                   	push   edi
c000e941:	56                   	push   esi
c000e942:	53                   	push   ebx
c000e943:	83 ec 50             	sub    esp,0x50
c000e946:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000e94b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e951:	83 e0 04             	and    eax,0x4
c000e954:	0f b6 c0             	movzx  eax,al
c000e957:	85 c0                	test   eax,eax
c000e959:	75 0d                	jne    c000e968 <findRSDT(unsigned char*)+0x28>
c000e95b:	b8 00 00 00 00       	mov    eax,0x0
c000e960:	e9 2b 01 00 00       	jmp    c000ea90 <findRSDT(unsigned char*)+0x150>
c000e965:	8d 76 00             	lea    esi,[esi+0x0]
c000e968:	89 e0                	mov    eax,esp
c000e96a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e96e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e972:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e976:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e97e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e982:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e986:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e98a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e98e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e992:	89 c6                	mov    esi,eax
c000e994:	89 d7                	mov    edi,edx
c000e996:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e998:	89 c8                	mov    eax,ecx
c000e99a:	89 fa                	mov    edx,edi
c000e99c:	89 f3                	mov    ebx,esi
c000e99e:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e9a2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e9a6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e9aa:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e9ae:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e9b2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e9ba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e9be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e9c2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e9c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e9ce:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e9d2:	25 ff 0f 00 00       	and    eax,0xfff
c000e9d7:	89 c6                	mov    esi,eax
c000e9d9:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000e9df:	83 ec 0c             	sub    esp,0xc
c000e9e2:	6a 02                	push   0x2
c000e9e4:	e8 00 ac ff ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c000e9e9:	83 c4 10             	add    esp,0x10
c000e9ec:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e9f0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e9f6:	83 ec 0c             	sub    esp,0xc
c000e9f9:	6a 01                	push   0x1
c000e9fb:	6a 02                	push   0x2
c000e9fd:	50                   	push   eax
c000e9fe:	52                   	push   edx
c000e9ff:	53                   	push   ebx
c000ea00:	e8 f7 b4 ff ff       	call   c0009efc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ea05:	83 c4 20             	add    esp,0x20
c000ea08:	09 f0                	or     eax,esi
c000ea0a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ea0e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ea12:	25 ff 0f 00 00       	and    eax,0xfff
c000ea17:	89 c6                	mov    esi,eax
c000ea19:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ea1f:	83 ec 0c             	sub    esp,0xc
c000ea22:	6a 02                	push   0x2
c000ea24:	e8 c0 ab ff ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c000ea29:	83 c4 10             	add    esp,0x10
c000ea2c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000ea30:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ea36:	83 ec 0c             	sub    esp,0xc
c000ea39:	6a 01                	push   0x1
c000ea3b:	6a 02                	push   0x2
c000ea3d:	50                   	push   eax
c000ea3e:	52                   	push   edx
c000ea3f:	53                   	push   ebx
c000ea40:	e8 b7 b4 ff ff       	call   c0009efc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ea45:	83 c4 20             	add    esp,0x20
c000ea48:	09 f0                	or     eax,esi
c000ea4a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ea4e:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000ea53:	85 c0                	test   eax,eax
c000ea55:	75 11                	jne    c000ea68 <findRSDT(unsigned char*)+0x128>
c000ea57:	c6 05 c0 86 02 c0 00 	mov    BYTE PTR ds:0xc00286c0,0x0
c000ea5e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ea62:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000ea66:	eb 24                	jmp    c000ea8c <findRSDT(unsigned char*)+0x14c>
c000ea68:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000ea6d:	83 f8 02             	cmp    eax,0x2
c000ea70:	75 12                	jne    c000ea84 <findRSDT(unsigned char*)+0x144>
c000ea72:	c6 05 c0 86 02 c0 01 	mov    BYTE PTR ds:0xc00286c0,0x1
c000ea79:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ea7d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000ea81:	eb 09                	jmp    c000ea8c <findRSDT(unsigned char*)+0x14c>
c000ea83:	90                   	nop
c000ea84:	b8 00 00 00 00       	mov    eax,0x0
c000ea89:	eb 05                	jmp    c000ea90 <findRSDT(unsigned char*)+0x150>
c000ea8b:	90                   	nop
c000ea8c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ea90:	83 c4 50             	add    esp,0x50
c000ea93:	5b                   	pop    ebx
c000ea94:	5e                   	pop    esi
c000ea95:	5f                   	pop    edi
c000ea96:	c3                   	ret    
c000ea97:	90                   	nop

c000ea98 <findDataTable(unsigned char*, char*)>:
c000ea98:	83 ec 1c             	sub    esp,0x1c
c000ea9b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000eaa0:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000eaa6:	83 e0 04             	and    eax,0x4
c000eaa9:	0f b6 c0             	movzx  eax,al
c000eaac:	85 c0                	test   eax,eax
c000eaae:	75 08                	jne    c000eab8 <findDataTable(unsigned char*, char*)+0x20>
c000eab0:	b8 00 00 00 00       	mov    eax,0x0
c000eab5:	eb 5d                	jmp    c000eb14 <findDataTable(unsigned char*, char*)+0x7c>
c000eab7:	90                   	nop
c000eab8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000eac0:	a1 ac 84 02 c0       	mov    eax,ds:0xc00284ac
c000eac5:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000eac9:	7d 41                	jge    c000eb0c <findDataTable(unsigned char*, char*)+0x74>
c000eacb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eacf:	c1 e0 03             	shl    eax,0x3
c000ead2:	05 c0 84 02 c0       	add    eax,0xc00284c0
c000ead7:	83 ec 04             	sub    esp,0x4
c000eada:	6a 04                	push   0x4
c000eadc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eae0:	50                   	push   eax
c000eae1:	e8 9a 18 ff ff       	call   c0000380 <memcmp>
c000eae6:	83 c4 10             	add    esp,0x10
c000eae9:	85 c0                	test   eax,eax
c000eaeb:	0f 94 c0             	sete   al
c000eaee:	0f b6 c0             	movzx  eax,al
c000eaf1:	85 c0                	test   eax,eax
c000eaf3:	74 0f                	je     c000eb04 <findDataTable(unsigned char*, char*)+0x6c>
c000eaf5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eaf9:	8b 04 c5 c4 84 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd7b3c]
c000eb00:	eb 12                	jmp    c000eb14 <findDataTable(unsigned char*, char*)+0x7c>
c000eb02:	66 90                	xchg   ax,ax
c000eb04:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000eb09:	eb b5                	jmp    c000eac0 <findDataTable(unsigned char*, char*)+0x28>
c000eb0b:	90                   	nop
c000eb0c:	b8 00 00 00 00       	mov    eax,0x0
c000eb11:	8d 76 00             	lea    esi,[esi+0x0]
c000eb14:	83 c4 1c             	add    esp,0x1c
c000eb17:	c3                   	ret    

c000eb18 <scanMADT()>:
c000eb18:	53                   	push   ebx
c000eb19:	83 ec 38             	sub    esp,0x38
c000eb1c:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c000eb21:	25 00 04 00 00       	and    eax,0x400
c000eb26:	74 14                	je     c000eb3c <scanMADT()+0x24>
c000eb28:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000eb2d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000eb33:	83 e2 fb             	and    edx,0xfffffffb
c000eb36:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000eb3c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000eb41:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000eb47:	83 e0 04             	and    eax,0x4
c000eb4a:	0f b6 c0             	movzx  eax,al
c000eb4d:	85 c0                	test   eax,eax
c000eb4f:	0f 84 6b 04 00 00    	je     c000efc0 <scanMADT()+0x4a8>
c000eb55:	e8 e2 fa ff ff       	call   c000e63c <findRSDP()>
c000eb5a:	a3 cc 86 02 c0       	mov    ds:0xc00286cc,eax
c000eb5f:	a1 cc 86 02 c0       	mov    eax,ds:0xc00286cc
c000eb64:	85 c0                	test   eax,eax
c000eb66:	75 1c                	jne    c000eb84 <scanMADT()+0x6c>
c000eb68:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000eb6d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000eb73:	83 e2 fb             	and    edx,0xfffffffb
c000eb76:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000eb7c:	e9 47 04 00 00       	jmp    c000efc8 <scanMADT()+0x4b0>
c000eb81:	8d 76 00             	lea    esi,[esi+0x0]
c000eb84:	a1 cc 86 02 c0       	mov    eax,ds:0xc00286cc
c000eb89:	83 ec 0c             	sub    esp,0xc
c000eb8c:	50                   	push   eax
c000eb8d:	e8 ae fd ff ff       	call   c000e940 <findRSDT(unsigned char*)>
c000eb92:	83 c4 10             	add    esp,0x10
c000eb95:	a3 c8 86 02 c0       	mov    ds:0xc00286c8,eax
c000eb9a:	a1 c8 86 02 c0       	mov    eax,ds:0xc00286c8
c000eb9f:	85 c0                	test   eax,eax
c000eba1:	75 19                	jne    c000ebbc <scanMADT()+0xa4>
c000eba3:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000eba8:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000ebae:	83 e2 fb             	and    edx,0xfffffffb
c000ebb1:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000ebb7:	e9 0c 04 00 00       	jmp    c000efc8 <scanMADT()+0x4b0>
c000ebbc:	a1 c8 86 02 c0       	mov    eax,ds:0xc00286c8
c000ebc1:	83 ec 0c             	sub    esp,0xc
c000ebc4:	50                   	push   eax
c000ebc5:	e8 0a fb ff ff       	call   c000e6d4 <loadACPITables(unsigned char*)>
c000ebca:	83 c4 10             	add    esp,0x10
c000ebcd:	a1 c8 86 02 c0       	mov    eax,ds:0xc00286c8
c000ebd2:	83 ec 08             	sub    esp,0x8
c000ebd5:	68 cc 11 02 c0       	push   0xc00211cc
c000ebda:	50                   	push   eax
c000ebdb:	e8 b8 fe ff ff       	call   c000ea98 <findDataTable(unsigned char*, char*)>
c000ebe0:	83 c4 10             	add    esp,0x10
c000ebe3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ebe7:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000ebec:	75 1a                	jne    c000ec08 <scanMADT()+0xf0>
c000ebee:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ebf3:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000ebf9:	83 e2 fe             	and    edx,0xfffffffe
c000ebfc:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000ec02:	e9 c1 03 00 00       	jmp    c000efc8 <scanMADT()+0x4b0>
c000ec07:	90                   	nop
c000ec08:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000ec10:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ec14:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ec17:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000ec1b:	0f 87 a7 03 00 00    	ja     c000efc8 <scanMADT()+0x4b0>
c000ec21:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000ec29:	0f 87 99 03 00 00    	ja     c000efc8 <scanMADT()+0x4b0>
c000ec2f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec33:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ec37:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec3b:	8d 50 01             	lea    edx,[eax+0x1]
c000ec3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec42:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec46:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ec4a:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000ec4e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec52:	8d 50 01             	lea    edx,[eax+0x1]
c000ec55:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec59:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec5d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ec61:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000ec65:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000ec6a:	83 f8 02             	cmp    eax,0x2
c000ec6d:	0f 86 51 03 00 00    	jbe    c000efc4 <scanMADT()+0x4ac>
c000ec73:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ec78:	85 c0                	test   eax,eax
c000ec7a:	75 58                	jne    c000ecd4 <scanMADT()+0x1bc>
c000ec7c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec80:	8d 50 01             	lea    edx,[eax+0x1]
c000ec83:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec87:	8a 15 c0 88 02 c0    	mov    dl,BYTE PTR ds:0xc00288c0
c000ec8d:	0f b6 d2             	movzx  edx,dl
c000ec90:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ec94:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ec98:	88 82 00 89 02 c0    	mov    BYTE PTR [edx-0x3ffd7700],al
c000ec9e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eca2:	8d 50 01             	lea    edx,[eax+0x1]
c000eca5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eca9:	8a 15 c0 88 02 c0    	mov    dl,BYTE PTR ds:0xc00288c0
c000ecaf:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ecb2:	88 0d c0 88 02 c0    	mov    BYTE PTR ds:0xc00288c0,cl
c000ecb8:	0f b6 d2             	movzx  edx,dl
c000ecbb:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ecbf:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ecc3:	88 82 e0 88 02 c0    	mov    BYTE PTR [edx-0x3ffd7720],al
c000ecc9:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ecce:	e9 d9 02 00 00       	jmp    c000efac <scanMADT()+0x494>
c000ecd3:	90                   	nop
c000ecd4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ecd9:	83 f8 01             	cmp    eax,0x1
c000ecdc:	0f 85 1a 01 00 00    	jne    c000edfc <scanMADT()+0x2e4>
c000ece2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ece6:	8d 50 01             	lea    edx,[eax+0x1]
c000ece9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eced:	8a 15 80 87 02 c0    	mov    dl,BYTE PTR ds:0xc0028780
c000ecf3:	0f b6 d2             	movzx  edx,dl
c000ecf6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ecfa:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ecfe:	88 82 a0 87 02 c0    	mov    BYTE PTR [edx-0x3ffd7860],al
c000ed04:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000ed09:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ed0d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ed11:	01 d0                	add    eax,edx
c000ed13:	83 c0 2c             	add    eax,0x2c
c000ed16:	8a 00                	mov    al,BYTE PTR [eax]
c000ed18:	0f b6 d0             	movzx  edx,al
c000ed1b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ed1f:	8d 48 01             	lea    ecx,[eax+0x1]
c000ed22:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ed26:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ed2a:	0f b6 c0             	movzx  eax,al
c000ed2d:	c1 e0 08             	shl    eax,0x8
c000ed30:	89 d1                	mov    ecx,edx
c000ed32:	09 c1                	or     ecx,eax
c000ed34:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ed38:	8d 50 02             	lea    edx,[eax+0x2]
c000ed3b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ed3f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ed43:	0f b6 c0             	movzx  eax,al
c000ed46:	c1 e0 10             	shl    eax,0x10
c000ed49:	09 c1                	or     ecx,eax
c000ed4b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ed4f:	8d 50 03             	lea    edx,[eax+0x3]
c000ed52:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ed56:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ed5a:	0f b6 c0             	movzx  eax,al
c000ed5d:	c1 e0 18             	shl    eax,0x18
c000ed60:	09 c1                	or     ecx,eax
c000ed62:	89 ca                	mov    edx,ecx
c000ed64:	a0 80 87 02 c0       	mov    al,ds:0xc0028780
c000ed69:	0f b6 c0             	movzx  eax,al
c000ed6c:	89 14 85 c0 87 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7840],edx
c000ed73:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ed78:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ed7c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ed80:	01 d0                	add    eax,edx
c000ed82:	83 c0 2c             	add    eax,0x2c
c000ed85:	8a 00                	mov    al,BYTE PTR [eax]
c000ed87:	0f b6 d0             	movzx  edx,al
c000ed8a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ed8e:	8d 48 01             	lea    ecx,[eax+0x1]
c000ed91:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ed95:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ed99:	0f b6 c0             	movzx  eax,al
c000ed9c:	c1 e0 08             	shl    eax,0x8
c000ed9f:	89 d1                	mov    ecx,edx
c000eda1:	09 c1                	or     ecx,eax
c000eda3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eda7:	8d 50 02             	lea    edx,[eax+0x2]
c000edaa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000edae:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000edb2:	0f b6 c0             	movzx  eax,al
c000edb5:	c1 e0 10             	shl    eax,0x10
c000edb8:	09 c1                	or     ecx,eax
c000edba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000edbe:	8d 50 03             	lea    edx,[eax+0x3]
c000edc1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000edc5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000edc9:	0f b6 c0             	movzx  eax,al
c000edcc:	c1 e0 18             	shl    eax,0x18
c000edcf:	09 c1                	or     ecx,eax
c000edd1:	89 ca                	mov    edx,ecx
c000edd3:	a0 80 87 02 c0       	mov    al,ds:0xc0028780
c000edd8:	0f b6 c0             	movzx  eax,al
c000eddb:	89 14 85 40 88 02 c0 	mov    DWORD PTR [eax*4-0x3ffd77c0],edx
c000ede2:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ede7:	a0 80 87 02 c0       	mov    al,ds:0xc0028780
c000edec:	83 c0 01             	add    eax,0x1
c000edef:	a2 80 87 02 c0       	mov    ds:0xc0028780,al
c000edf4:	e9 b3 01 00 00       	jmp    c000efac <scanMADT()+0x494>
c000edf9:	8d 76 00             	lea    esi,[esi+0x0]
c000edfc:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ee01:	83 f8 02             	cmp    eax,0x2
c000ee04:	0f 85 ea 00 00 00    	jne    c000eef4 <scanMADT()+0x3dc>
c000ee0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ee0e:	8d 50 01             	lea    edx,[eax+0x1]
c000ee11:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ee15:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ee19:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ee1d:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000ee21:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ee25:	8d 50 01             	lea    edx,[eax+0x1]
c000ee28:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ee2c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ee30:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ee34:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000ee38:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ee3c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ee40:	01 d0                	add    eax,edx
c000ee42:	83 c0 2c             	add    eax,0x2c
c000ee45:	8a 00                	mov    al,BYTE PTR [eax]
c000ee47:	0f b6 d0             	movzx  edx,al
c000ee4a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ee4e:	8d 48 01             	lea    ecx,[eax+0x1]
c000ee51:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ee55:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ee59:	0f b6 c0             	movzx  eax,al
c000ee5c:	c1 e0 08             	shl    eax,0x8
c000ee5f:	89 d1                	mov    ecx,edx
c000ee61:	09 c1                	or     ecx,eax
c000ee63:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ee67:	8d 50 02             	lea    edx,[eax+0x2]
c000ee6a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ee6e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ee72:	0f b6 c0             	movzx  eax,al
c000ee75:	c1 e0 10             	shl    eax,0x10
c000ee78:	09 c1                	or     ecx,eax
c000ee7a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ee7e:	8d 50 03             	lea    edx,[eax+0x3]
c000ee81:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ee85:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ee89:	0f b6 c0             	movzx  eax,al
c000ee8c:	c1 e0 18             	shl    eax,0x18
c000ee8f:	09 c8                	or     eax,ecx
c000ee91:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ee95:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ee9a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ee9e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eea2:	01 d0                	add    eax,edx
c000eea4:	83 c0 2c             	add    eax,0x2c
c000eea7:	8a 00                	mov    al,BYTE PTR [eax]
c000eea9:	0f b6 d0             	movzx  edx,al
c000eeac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eeb0:	8d 48 01             	lea    ecx,[eax+0x1]
c000eeb3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eeb7:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000eebb:	0f b6 c0             	movzx  eax,al
c000eebe:	c1 e0 08             	shl    eax,0x8
c000eec1:	09 d0                	or     eax,edx
c000eec3:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000eec8:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000eecd:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000eed2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000eed6:	88 90 a8 28 02 c0    	mov    BYTE PTR [eax-0x3ffdd758],dl
c000eedc:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000eee1:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000eee6:	66 89 94 00 60 87 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd78a0],dx
c000eeee:	e9 b9 00 00 00       	jmp    c000efac <scanMADT()+0x494>
c000eef3:	90                   	nop
c000eef4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000eef9:	83 f8 04             	cmp    eax,0x4
c000eefc:	0f 85 9a 00 00 00    	jne    c000ef9c <scanMADT()+0x484>
c000ef02:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ef06:	8d 50 01             	lea    edx,[eax+0x1]
c000ef09:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ef0d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ef11:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ef15:	0f b6 c0             	movzx  eax,al
c000ef18:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ef1c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ef20:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ef24:	01 d0                	add    eax,edx
c000ef26:	83 c0 2c             	add    eax,0x2c
c000ef29:	8a 00                	mov    al,BYTE PTR [eax]
c000ef2b:	0f b6 d0             	movzx  edx,al
c000ef2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ef32:	8d 48 01             	lea    ecx,[eax+0x1]
c000ef35:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ef39:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ef3d:	0f b6 c0             	movzx  eax,al
c000ef40:	c1 e0 08             	shl    eax,0x8
c000ef43:	09 d0                	or     eax,edx
c000ef45:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ef49:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ef4e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ef52:	8d 50 01             	lea    edx,[eax+0x1]
c000ef55:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ef59:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ef5d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ef61:	0f b6 c0             	movzx  eax,al
c000ef64:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ef68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef6c:	c1 e0 08             	shl    eax,0x8
c000ef6f:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ef73:	89 c1                	mov    ecx,eax
c000ef75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef79:	c1 e0 18             	shl    eax,0x18
c000ef7c:	89 c3                	mov    ebx,eax
c000ef7e:	a1 d0 86 02 c0       	mov    eax,ds:0xc00286d0
c000ef83:	8d 50 01             	lea    edx,[eax+0x1]
c000ef86:	89 15 d0 86 02 c0    	mov    DWORD PTR ds:0xc00286d0,edx
c000ef8c:	09 d9                	or     ecx,ebx
c000ef8e:	89 ca                	mov    edx,ecx
c000ef90:	89 14 85 e0 86 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7920],edx
c000ef97:	eb 13                	jmp    c000efac <scanMADT()+0x494>
c000ef99:	8d 76 00             	lea    esi,[esi+0x0]
c000ef9c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000efa1:	83 f8 05             	cmp    eax,0x5
c000efa4:	75 06                	jne    c000efac <scanMADT()+0x494>
c000efa6:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000efab:	90                   	nop
c000efac:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000efb1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000efb5:	01 d0                	add    eax,edx
c000efb7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000efbb:	e9 50 fc ff ff       	jmp    c000ec10 <scanMADT()+0xf8>
c000efc0:	90                   	nop
c000efc1:	eb 05                	jmp    c000efc8 <scanMADT()+0x4b0>
c000efc3:	90                   	nop
c000efc4:	90                   	nop
c000efc5:	8d 76 00             	lea    esi,[esi+0x0]
c000efc8:	83 c4 38             	add    esp,0x38
c000efcb:	5b                   	pop    ebx
c000efcc:	c3                   	ret    
c000efcd:	90                   	nop
c000efce:	66 90                	xchg   ax,ax

c000efd0 <ACPI::ACPI()>:
c000efd0:	83 ec 0c             	sub    esp,0xc
c000efd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000efd7:	83 ec 08             	sub    esp,0x8
c000efda:	68 d1 11 02 c0       	push   0xc00211d1
c000efdf:	50                   	push   eax
c000efe0:	e8 3b d2 ff ff       	call   c000c220 <Device::Device(char const*)>
c000efe5:	83 c4 10             	add    esp,0x10
c000efe8:	ba 40 13 02 c0       	mov    edx,0xc0021340
c000efed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eff1:	89 10                	mov    DWORD PTR [eax],edx
c000eff3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eff7:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000effe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f002:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f00c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f010:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f01a:	e8 f9 fa ff ff       	call   c000eb18 <scanMADT()>
c000f01f:	90                   	nop
c000f020:	83 c4 0c             	add    esp,0xc
c000f023:	c3                   	ret    

c000f024 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f024:	83 ec 2c             	sub    esp,0x2c
c000f027:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f02b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f02f:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000f033:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000f037:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f03c:	88 c8                	mov    al,cl
c000f03e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f042:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f047:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f04f:	90                   	nop
c000f050:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f054:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f05a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f05e:	0f 8d b0 00 00 00    	jge    c000f114 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f064:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f068:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f06c:	83 c2 2a             	add    edx,0x2a
c000f06f:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f073:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000f078:	0f b7 c0             	movzx  eax,ax
c000f07b:	39 c2                	cmp    edx,eax
c000f07d:	0f 85 85 00 00 00    	jne    c000f108 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f083:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f087:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f08b:	83 c2 2a             	add    edx,0x2a
c000f08e:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000f092:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000f097:	0f b6 c0             	movzx  eax,al
c000f09a:	39 c2                	cmp    edx,eax
c000f09c:	75 6a                	jne    c000f108 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f09e:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f0a3:	85 c0                	test   eax,eax
c000f0a5:	74 3d                	je     c000f0e4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000f0a7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f0ab:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f0af:	83 c2 2a             	add    edx,0x2a
c000f0b2:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000f0b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f0ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f0bd:	39 c2                	cmp    edx,eax
c000f0bf:	74 13                	je     c000f0d4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000f0c1:	83 ec 0c             	sub    esp,0xc
c000f0c4:	68 4c 11 02 c0       	push   0xc002114c
c000f0c9:	e8 a3 1a 00 00       	call   c0010b71 <KePanic(char const*)>
c000f0ce:	83 c4 10             	add    esp,0x10
c000f0d1:	8d 76 00             	lea    esi,[esi+0x0]
c000f0d4:	83 ec 0c             	sub    esp,0xc
c000f0d7:	68 d6 11 02 c0       	push   0xc00211d6
c000f0dc:	e8 90 1a 00 00       	call   c0010b71 <KePanic(char const*)>
c000f0e1:	83 c4 10             	add    esp,0x10
c000f0e4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f0e8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f0ec:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f0f0:	83 c2 2a             	add    edx,0x2a
c000f0f3:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000f0f7:	8b 02                	mov    eax,DWORD PTR [edx]
c000f0f9:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f0fc:	89 01                	mov    DWORD PTR [ecx],eax
c000f0fe:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f101:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f106:	66 90                	xchg   ax,ax
c000f108:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000f10d:	e9 3e ff ff ff       	jmp    c000f050 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000f112:	66 90                	xchg   ax,ax
c000f114:	90                   	nop
c000f115:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f119:	83 c4 2c             	add    esp,0x2c
c000f11c:	c2 04 00             	ret    0x4
c000f11f:	90                   	nop

c000f120 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000f120:	83 ec 1c             	sub    esp,0x1c
c000f123:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f127:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000f12b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f12f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f134:	88 c8                	mov    al,cl
c000f136:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000f13a:	88 d0                	mov    al,dl
c000f13c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f140:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f144:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f14a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f14e:	83 c2 2a             	add    edx,0x2a
c000f151:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000f155:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000f159:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f15d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f163:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f167:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f16a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f16e:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000f173:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f177:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f17d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000f181:	83 c0 01             	add    eax,0x1
c000f184:	88 c1                	mov    cl,al
c000f186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f18a:	83 c2 2a             	add    edx,0x2a
c000f18d:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000f191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f195:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f19b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f19f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f1a2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f1a6:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000f1aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f1ae:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f1b4:	8d 50 01             	lea    edx,[eax+0x1]
c000f1b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f1bb:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000f1c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f1c5:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f1cb:	3d 00 02 00 00       	cmp    eax,0x200
c000f1d0:	75 12                	jne    c000f1e4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000f1d2:	83 ec 0c             	sub    esp,0xc
c000f1d5:	68 e5 11 02 c0       	push   0xc00211e5
c000f1da:	e8 92 19 00 00       	call   c0010b71 <KePanic(char const*)>
c000f1df:	83 c4 10             	add    esp,0x10
c000f1e2:	66 90                	xchg   ax,ax
c000f1e4:	90                   	nop
c000f1e5:	83 c4 1c             	add    esp,0x1c
c000f1e8:	c3                   	ret    
c000f1e9:	90                   	nop
c000f1ea:	66 90                	xchg   ax,ax

c000f1ec <ACPI::setScreenBrightnessLevel(void*, int)>:
c000f1ec:	b8 00 00 00 00       	mov    eax,0x0
c000f1f1:	c3                   	ret    
c000f1f2:	66 90                	xchg   ax,ax

c000f1f4 <ACPI::detectPCI()>:
c000f1f4:	53                   	push   ebx
c000f1f5:	83 ec 28             	sub    esp,0x28
c000f1f8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f1fd:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000f202:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f207:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f20d:	83 e0 04             	and    eax,0x4
c000f210:	0f b6 c0             	movzx  eax,al
c000f213:	85 c0                	test   eax,eax
c000f215:	74 2d                	je     c000f244 <ACPI::detectPCI()+0x50>
c000f217:	a1 c8 86 02 c0       	mov    eax,ds:0xc00286c8
c000f21c:	83 ec 08             	sub    esp,0x8
c000f21f:	68 02 12 02 c0       	push   0xc0021202
c000f224:	50                   	push   eax
c000f225:	e8 6e f8 ff ff       	call   c000ea98 <findDataTable(unsigned char*, char*)>
c000f22a:	83 c4 10             	add    esp,0x10
c000f22d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f231:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f236:	74 0c                	je     c000f244 <ACPI::detectPCI()+0x50>
c000f238:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f23d:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f242:	66 90                	xchg   ax,ax
c000f244:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000f24c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f250:	8a 00                	mov    al,BYTE PTR [eax]
c000f252:	0f b6 c0             	movzx  eax,al
c000f255:	83 f8 01             	cmp    eax,0x1
c000f258:	75 0e                	jne    c000f268 <ACPI::detectPCI()+0x74>
c000f25a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f25f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f264:	eb 2e                	jmp    c000f294 <ACPI::detectPCI()+0xa0>
c000f266:	66 90                	xchg   ax,ax
c000f268:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f26c:	8a 00                	mov    al,BYTE PTR [eax]
c000f26e:	0f b6 c0             	movzx  eax,al
c000f271:	83 f8 02             	cmp    eax,0x2
c000f274:	75 1e                	jne    c000f294 <ACPI::detectPCI()+0xa0>
c000f276:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f27b:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f280:	85 c0                	test   eax,eax
c000f282:	74 10                	je     c000f294 <ACPI::detectPCI()+0xa0>
c000f284:	83 ec 0c             	sub    esp,0xc
c000f287:	68 7c 11 02 c0       	push   0xc002117c
c000f28c:	e8 e0 18 00 00       	call   c0010b71 <KePanic(char const*)>
c000f291:	83 c4 10             	add    esp,0x10
c000f294:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000f298:	83 f0 01             	xor    eax,0x1
c000f29b:	0f b6 c0             	movzx  eax,al
c000f29e:	85 c0                	test   eax,eax
c000f2a0:	74 46                	je     c000f2e8 <ACPI::detectPCI()+0xf4>
c000f2a2:	e8 89 0e ff ff       	call   c0000130 <manualPCIProbe>
c000f2a7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f2ab:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f2b0:	75 0e                	jne    c000f2c0 <ACPI::detectPCI()+0xcc>
c000f2b2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f2b7:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f2bc:	eb 2a                	jmp    c000f2e8 <ACPI::detectPCI()+0xf4>
c000f2be:	66 90                	xchg   ax,ax
c000f2c0:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000f2c5:	75 21                	jne    c000f2e8 <ACPI::detectPCI()+0xf4>
c000f2c7:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f2cc:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f2d1:	85 c0                	test   eax,eax
c000f2d3:	74 13                	je     c000f2e8 <ACPI::detectPCI()+0xf4>
c000f2d5:	83 ec 0c             	sub    esp,0xc
c000f2d8:	68 7c 11 02 c0       	push   0xc002117c
c000f2dd:	e8 8f 18 00 00       	call   c0010b71 <KePanic(char const*)>
c000f2e2:	83 c4 10             	add    esp,0x10
c000f2e5:	8d 76 00             	lea    esi,[esi+0x0]
c000f2e8:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f2ed:	85 c0                	test   eax,eax
c000f2ef:	0f 84 87 00 00 00    	je     c000f37c <ACPI::detectPCI()+0x188>
c000f2f5:	83 ec 0c             	sub    esp,0xc
c000f2f8:	68 07 12 02 c0       	push   0xc0021207
c000f2fd:	e8 99 11 00 00       	call   c001049b <KeSetBootMessage(char const*)>
c000f302:	83 c4 10             	add    esp,0x10
c000f305:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f30d:	83 ec 0c             	sub    esp,0xc
c000f310:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f314:	e8 b2 87 ff ff       	call   c0007acb <malloc>
c000f319:	83 c4 10             	add    esp,0x10
c000f31c:	89 c3                	mov    ebx,eax
c000f31e:	83 ec 0c             	sub    esp,0xc
c000f321:	53                   	push   ebx
c000f322:	e8 3b b2 00 00       	call   c001a562 <PCI::PCI()>
c000f327:	83 c4 10             	add    esp,0x10
c000f32a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f32e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f332:	83 ec 08             	sub    esp,0x8
c000f335:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f339:	50                   	push   eax
c000f33a:	e8 49 cd ff ff       	call   c000c088 <Device::addChild(Device*)>
c000f33f:	83 c4 10             	add    esp,0x10
c000f342:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f346:	8b 00                	mov    eax,DWORD PTR [eax]
c000f348:	83 c0 08             	add    eax,0x8
c000f34b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f34d:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000f352:	85 d2                	test   edx,edx
c000f354:	74 0a                	je     c000f360 <ACPI::detectPCI()+0x16c>
c000f356:	ba 01 00 00 00       	mov    edx,0x1
c000f35b:	eb 0b                	jmp    c000f368 <ACPI::detectPCI()+0x174>
c000f35d:	8d 76 00             	lea    esi,[esi+0x0]
c000f360:	ba 02 00 00 00       	mov    edx,0x2
c000f365:	8d 76 00             	lea    esi,[esi+0x0]
c000f368:	6a 00                	push   0x0
c000f36a:	6a 00                	push   0x0
c000f36c:	52                   	push   edx
c000f36d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f371:	ff d0                	call   eax
c000f373:	83 c4 10             	add    esp,0x10
c000f376:	e9 91 00 00 00       	jmp    c000f40c <ACPI::detectPCI()+0x218>
c000f37b:	90                   	nop
c000f37c:	83 ec 0c             	sub    esp,0xc
c000f37f:	68 1f 12 02 c0       	push   0xc002121f
c000f384:	e8 12 11 00 00       	call   c001049b <KeSetBootMessage(char const*)>
c000f389:	83 c4 10             	add    esp,0x10
c000f38c:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000f393:	83 ec 0c             	sub    esp,0xc
c000f396:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f39a:	e8 2c 87 ff ff       	call   c0007acb <malloc>
c000f39f:	83 c4 10             	add    esp,0x10
c000f3a2:	89 c3                	mov    ebx,eax
c000f3a4:	83 ec 0c             	sub    esp,0xc
c000f3a7:	53                   	push   ebx
c000f3a8:	e8 5d bd 00 00       	call   c001b10a <IDE::IDE()>
c000f3ad:	83 c4 10             	add    esp,0x10
c000f3b0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f3b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f3b8:	83 ec 08             	sub    esp,0x8
c000f3bb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f3bf:	50                   	push   eax
c000f3c0:	e8 c3 cc ff ff       	call   c000c088 <Device::addChild(Device*)>
c000f3c5:	83 c4 10             	add    esp,0x10
c000f3c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f3cc:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f3d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f3da:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f3e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f3e7:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f3f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f3f4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3f6:	83 c0 08             	add    eax,0x8
c000f3f9:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3fb:	6a 00                	push   0x0
c000f3fd:	6a 00                	push   0x0
c000f3ff:	6a 00                	push   0x0
c000f401:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f405:	ff d0                	call   eax
c000f407:	83 c4 10             	add    esp,0x10
c000f40a:	66 90                	xchg   ax,ax
c000f40c:	90                   	nop
c000f40d:	83 c4 28             	add    esp,0x28
c000f410:	5b                   	pop    ebx
c000f411:	c3                   	ret    
c000f412:	66 90                	xchg   ax,ax

c000f414 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f414:	83 ec 1c             	sub    esp,0x1c
c000f417:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f41b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f41e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f422:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f427:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f42c:	83 ec 08             	sub    esp,0x8
c000f42f:	52                   	push   edx
c000f430:	50                   	push   eax
c000f431:	e8 5c 7d ff ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c000f436:	83 c4 10             	add    esp,0x10
c000f439:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000f43d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f442:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f447:	83 ec 04             	sub    esp,0x4
c000f44a:	6a 01                	push   0x1
c000f44c:	52                   	push   edx
c000f44d:	50                   	push   eax
c000f44e:	e8 57 7e ff ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c000f453:	83 c4 10             	add    esp,0x10
c000f456:	90                   	nop
c000f457:	83 c4 1c             	add    esp,0x1c
c000f45a:	c3                   	ret    
c000f45b:	90                   	nop

c000f45c <ACPI::sleep()>:
c000f45c:	83 ec 0c             	sub    esp,0xc
c000f45f:	a1 a0 84 02 c0       	mov    eax,ds:0xc00284a0
c000f464:	85 c0                	test   eax,eax
c000f466:	74 08                	je     c000f470 <ACPI::sleep()+0x14>
c000f468:	a1 a0 84 02 c0       	mov    eax,ds:0xc00284a0
c000f46d:	ff d0                	call   eax
c000f46f:	90                   	nop
c000f470:	90                   	nop
c000f471:	83 c4 0c             	add    esp,0xc
c000f474:	c3                   	ret    
c000f475:	90                   	nop
c000f476:	66 90                	xchg   ax,ax

c000f478 <ACPI::open(int, int, void*)>:
c000f478:	55                   	push   ebp
c000f479:	89 e5                	mov    ebp,esp
c000f47b:	53                   	push   ebx
c000f47c:	81 ec 74 01 00 00    	sub    esp,0x174
c000f482:	83 ec 0c             	sub    esp,0xc
c000f485:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f488:	e8 67 fd ff ff       	call   c000f1f4 <ACPI::detectPCI()>
c000f48d:	83 c4 10             	add    esp,0x10
c000f490:	83 ec 0c             	sub    esp,0xc
c000f493:	68 a4 11 02 c0       	push   0xc00211a4
c000f498:	e8 fe 0f 00 00       	call   c001049b <KeSetBootMessage(char const*)>
c000f49d:	83 c4 10             	add    esp,0x10
c000f4a0:	b8 4c 05 00 00       	mov    eax,0x54c
c000f4a5:	8a 00                	mov    al,BYTE PTR [eax]
c000f4a7:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000f4aa:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000f4ae:	83 f8 01             	cmp    eax,0x1
c000f4b1:	75 15                	jne    c000f4c8 <ACPI::open(int, int, void*)+0x50>
c000f4b3:	83 ec 0c             	sub    esp,0xc
c000f4b6:	68 34 12 02 c0       	push   0xc0021234
c000f4bb:	e8 c6 4a 00 00       	call   c0013f86 <Thr::loadKernelSymbolTable(char const*)>
c000f4c0:	83 c4 10             	add    esp,0x10
c000f4c3:	eb 33                	jmp    c000f4f8 <ACPI::open(int, int, void*)+0x80>
c000f4c5:	8d 76 00             	lea    esi,[esi+0x0]
c000f4c8:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000f4cc:	3d bb 00 00 00       	cmp    eax,0xbb
c000f4d1:	75 15                	jne    c000f4e8 <ACPI::open(int, int, void*)+0x70>
c000f4d3:	83 ec 0c             	sub    esp,0xc
c000f4d6:	68 52 12 02 c0       	push   0xc0021252
c000f4db:	e8 a6 4a 00 00       	call   c0013f86 <Thr::loadKernelSymbolTable(char const*)>
c000f4e0:	83 c4 10             	add    esp,0x10
c000f4e3:	eb 13                	jmp    c000f4f8 <ACPI::open(int, int, void*)+0x80>
c000f4e5:	8d 76 00             	lea    esi,[esi+0x0]
c000f4e8:	83 ec 0c             	sub    esp,0xc
c000f4eb:	68 70 12 02 c0       	push   0xc0021270
c000f4f0:	e8 7c 16 00 00       	call   c0010b71 <KePanic(char const*)>
c000f4f5:	83 c4 10             	add    esp,0x10
c000f4f8:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000f4fc:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000f503:	83 ec 0c             	sub    esp,0xc
c000f506:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000f509:	e8 bd 85 ff ff       	call   c0007acb <malloc>
c000f50e:	83 c4 10             	add    esp,0x10
c000f511:	89 c3                	mov    ebx,eax
c000f513:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c000f518:	83 ec 04             	sub    esp,0x4
c000f51b:	50                   	push   eax
c000f51c:	68 8a 12 02 c0       	push   0xc002128a
c000f521:	53                   	push   ebx
c000f522:	e8 53 bc ff ff       	call   c000b17a <File::File(char const*, Process*)>
c000f527:	83 c4 10             	add    esp,0x10
c000f52a:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000f52d:	83 ec 08             	sub    esp,0x8
c000f530:	6a 01                	push   0x1
c000f532:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f535:	e8 fc bc ff ff       	call   c000b236 <File::open(FileOpenMode)>
c000f53a:	83 c4 10             	add    esp,0x10
c000f53d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000f540:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000f544:	75 12                	jne    c000f558 <ACPI::open(int, int, void*)+0xe0>
c000f546:	83 ec 0c             	sub    esp,0xc
c000f549:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f54c:	e8 43 bd ff ff       	call   c000b294 <File::close()>
c000f551:	83 c4 10             	add    esp,0x10
c000f554:	eb 06                	jmp    c000f55c <ACPI::open(int, int, void*)+0xe4>
c000f556:	66 90                	xchg   ax,ax
c000f558:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f55c:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000f560:	74 16                	je     c000f578 <ACPI::open(int, int, void*)+0x100>
c000f562:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f565:	8b 00                	mov    eax,DWORD PTR [eax]
c000f567:	83 c0 08             	add    eax,0x8
c000f56a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f56c:	83 ec 0c             	sub    esp,0xc
c000f56f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f572:	ff d0                	call   eax
c000f574:	83 c4 10             	add    esp,0x10
c000f577:	90                   	nop
c000f578:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000f57b:	83 f0 01             	xor    eax,0x1
c000f57e:	0f b6 c0             	movzx  eax,al
c000f581:	85 c0                	test   eax,eax
c000f583:	74 3b                	je     c000f5c0 <ACPI::open(int, int, void*)+0x148>
c000f585:	83 ec 0c             	sub    esp,0xc
c000f588:	68 a8 12 02 c0       	push   0xc00212a8
c000f58d:	e8 09 0f 00 00       	call   c001049b <KeSetBootMessage(char const*)>
c000f592:	83 c4 10             	add    esp,0x10
c000f595:	83 ec 04             	sub    esp,0x4
c000f598:	6a 0c                	push   0xc
c000f59a:	68 c3 12 02 c0       	push   0xc00212c3
c000f59f:	68 d4 12 02 c0       	push   0xc00212d4
c000f5a4:	e8 89 3c 00 00       	call   c0013232 <Reg::readIntWithDefault(char*, char*, int)>
c000f5a9:	83 c4 10             	add    esp,0x10
c000f5ac:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000f5af:	83 ec 0c             	sub    esp,0xc
c000f5b2:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000f5b5:	e8 54 a2 ff ff       	call   c000980e <Virt::setupPageSwapping(int)>
c000f5ba:	83 c4 10             	add    esp,0x10
c000f5bd:	8d 76 00             	lea    esi,[esi+0x0]
c000f5c0:	83 ec 0c             	sub    esp,0xc
c000f5c3:	68 15 ff 01 c0       	push   0xc001ff15
c000f5c8:	e8 ce 0e 00 00       	call   c001049b <KeSetBootMessage(char const*)>
c000f5cd:	83 c4 10             	add    esp,0x10
c000f5d0:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f5d3:	83 ec 08             	sub    esp,0x8
c000f5d6:	6a 13                	push   0x13
c000f5d8:	50                   	push   eax
c000f5d9:	e8 c2 cd ff ff       	call   c000c3a0 <getDevicesOfType(DeviceType)>
c000f5de:	83 c4 0c             	add    esp,0xc
c000f5e1:	8d 76 00             	lea    esi,[esi+0x0]
c000f5e4:	83 ec 0c             	sub    esp,0xc
c000f5e7:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f5ea:	50                   	push   eax
c000f5eb:	e8 20 fd 00 00       	call   c001f310 <LinkedList<Device>::isEmpty()>
c000f5f0:	83 c4 10             	add    esp,0x10
c000f5f3:	83 f0 01             	xor    eax,0x1
c000f5f6:	0f b6 c0             	movzx  eax,al
c000f5f9:	85 c0                	test   eax,eax
c000f5fb:	0f 84 1f 01 00 00    	je     c000f720 <ACPI::open(int, int, void*)+0x2a8>
c000f601:	83 ec 0c             	sub    esp,0xc
c000f604:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f607:	50                   	push   eax
c000f608:	e8 1f fd 00 00       	call   c001f32c <LinkedList<Device>::getFirstElement()>
c000f60d:	83 c4 10             	add    esp,0x10
c000f610:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000f613:	83 ec 0c             	sub    esp,0xc
c000f616:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f619:	50                   	push   eax
c000f61a:	e8 15 fd 00 00       	call   c001f334 <LinkedList<Device>::removeFirst()>
c000f61f:	83 c4 10             	add    esp,0x10
c000f622:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000f625:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f628:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000f62b:	b8 24 00 00 00       	mov    eax,0x24
c000f630:	83 e0 fc             	and    eax,0xfffffffc
c000f633:	89 c3                	mov    ebx,eax
c000f635:	b8 00 00 00 00       	mov    eax,0x0
c000f63a:	66 90                	xchg   ax,ax
c000f63c:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000f643:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000f64a:	83 c0 04             	add    eax,0x4
c000f64d:	39 d8                	cmp    eax,ebx
c000f64f:	72 eb                	jb     c000f63c <ACPI::open(int, int, void*)+0x1c4>
c000f651:	83 ec 08             	sub    esp,0x8
c000f654:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000f65a:	50                   	push   eax
c000f65b:	83 ec 24             	sub    esp,0x24
c000f65e:	89 e1                	mov    ecx,esp
c000f660:	b8 24 00 00 00       	mov    eax,0x24
c000f665:	83 e0 fc             	and    eax,0xfffffffc
c000f668:	89 c3                	mov    ebx,eax
c000f66a:	b8 00 00 00 00       	mov    eax,0x0
c000f66f:	90                   	nop
c000f670:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000f677:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000f67a:	83 c0 04             	add    eax,0x4
c000f67d:	39 d8                	cmp    eax,ebx
c000f67f:	72 ef                	jb     c000f670 <ACPI::open(int, int, void*)+0x1f8>
c000f681:	e8 c4 b3 00 00       	call   c001aa4a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000f686:	83 c4 30             	add    esp,0x30
c000f689:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000f68c:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000f690:	0f 84 4e ff ff ff    	je     c000f5e4 <ACPI::open(int, int, void*)+0x16c>
c000f696:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000f69d:	83 ec 0c             	sub    esp,0xc
c000f6a0:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000f6a3:	e8 23 84 ff ff       	call   c0007acb <malloc>
c000f6a8:	83 c4 10             	add    esp,0x10
c000f6ab:	89 c3                	mov    ebx,eax
c000f6ad:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c000f6b2:	83 ec 04             	sub    esp,0x4
c000f6b5:	50                   	push   eax
c000f6b6:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000f6b9:	53                   	push   ebx
c000f6ba:	e8 bb ba ff ff       	call   c000b17a <File::File(char const*, Process*)>
c000f6bf:	83 c4 10             	add    esp,0x10
c000f6c2:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000f6c5:	83 ec 0c             	sub    esp,0xc
c000f6c8:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000f6cb:	e8 2a be ff ff       	call   c000b4fa <File::exists()>
c000f6d0:	83 c4 10             	add    esp,0x10
c000f6d3:	0f b6 c0             	movzx  eax,al
c000f6d6:	85 c0                	test   eax,eax
c000f6d8:	74 22                	je     c000f6fc <ACPI::open(int, int, void*)+0x284>
c000f6da:	83 ec 08             	sub    esp,0x8
c000f6dd:	6a 01                	push   0x1
c000f6df:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000f6e2:	e8 21 53 00 00       	call   c0014a08 <Thr::loadDLL(char const*, bool)>
c000f6e7:	83 c4 10             	add    esp,0x10
c000f6ea:	83 ec 08             	sub    esp,0x8
c000f6ed:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000f6f0:	50                   	push   eax
c000f6f1:	e8 52 55 00 00       	call   c0014c48 <Thr::executeDLL(unsigned long, void*)>
c000f6f6:	83 c4 10             	add    esp,0x10
c000f6f9:	8d 76 00             	lea    esi,[esi+0x0]
c000f6fc:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000f700:	0f 84 de fe ff ff    	je     c000f5e4 <ACPI::open(int, int, void*)+0x16c>
c000f706:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f709:	8b 00                	mov    eax,DWORD PTR [eax]
c000f70b:	83 c0 08             	add    eax,0x8
c000f70e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f710:	83 ec 0c             	sub    esp,0xc
c000f713:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000f716:	ff d0                	call   eax
c000f718:	83 c4 10             	add    esp,0x10
c000f71b:	e9 c4 fe ff ff       	jmp    c000f5e4 <ACPI::open(int, int, void*)+0x16c>
c000f720:	83 ec 0c             	sub    esp,0xc
c000f723:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f726:	50                   	push   eax
c000f727:	e8 e0 fb 00 00       	call   c001f30c <LinkedList<Device>::~LinkedList()>
c000f72c:	83 c4 10             	add    esp,0x10
c000f72f:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000f735:	83 ec 08             	sub    esp,0x8
c000f738:	6a 01                	push   0x1
c000f73a:	68 db 12 02 c0       	push   0xc00212db
c000f73f:	e8 c4 52 00 00       	call   c0014a08 <Thr::loadDLL(char const*, bool)>
c000f744:	83 c4 10             	add    esp,0x10
c000f747:	83 ec 08             	sub    esp,0x8
c000f74a:	53                   	push   ebx
c000f74b:	50                   	push   eax
c000f74c:	e8 f7 54 00 00       	call   c0014c48 <Thr::executeDLL(unsigned long, void*)>
c000f751:	83 c4 10             	add    esp,0x10
c000f754:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f759:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f75f:	83 e0 04             	and    eax,0x4
c000f762:	0f b6 c0             	movzx  eax,al
c000f765:	85 c0                	test   eax,eax
c000f767:	0f 84 e3 00 00 00    	je     c000f850 <ACPI::open(int, int, void*)+0x3d8>
c000f76d:	83 ec 0c             	sub    esp,0xc
c000f770:	68 f8 12 02 c0       	push   0xc00212f8
c000f775:	e8 21 0d 00 00       	call   c001049b <KeSetBootMessage(char const*)>
c000f77a:	83 c4 10             	add    esp,0x10
c000f77d:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c000f784:	83 ec 0c             	sub    esp,0xc
c000f787:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c000f78a:	e8 3c 83 ff ff       	call   c0007acb <malloc>
c000f78f:	83 c4 10             	add    esp,0x10
c000f792:	89 c3                	mov    ebx,eax
c000f794:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c000f799:	83 ec 04             	sub    esp,0x4
c000f79c:	50                   	push   eax
c000f79d:	68 15 13 02 c0       	push   0xc0021315
c000f7a2:	53                   	push   ebx
c000f7a3:	e8 d2 b9 ff ff       	call   c000b17a <File::File(char const*, Process*)>
c000f7a8:	83 c4 10             	add    esp,0x10
c000f7ab:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c000f7ae:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000f7b2:	74 1c                	je     c000f7d0 <ACPI::open(int, int, void*)+0x358>
c000f7b4:	83 ec 0c             	sub    esp,0xc
c000f7b7:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000f7ba:	e8 3b bd ff ff       	call   c000b4fa <File::exists()>
c000f7bf:	83 c4 10             	add    esp,0x10
c000f7c2:	0f b6 c0             	movzx  eax,al
c000f7c5:	85 c0                	test   eax,eax
c000f7c7:	74 07                	je     c000f7d0 <ACPI::open(int, int, void*)+0x358>
c000f7c9:	b0 01                	mov    al,0x1
c000f7cb:	eb 07                	jmp    c000f7d4 <ACPI::open(int, int, void*)+0x35c>
c000f7cd:	8d 76 00             	lea    esi,[esi+0x0]
c000f7d0:	b0 00                	mov    al,0x0
c000f7d2:	66 90                	xchg   ax,ax
c000f7d4:	0f b6 c0             	movzx  eax,al
c000f7d7:	85 c0                	test   eax,eax
c000f7d9:	74 21                	je     c000f7fc <ACPI::open(int, int, void*)+0x384>
c000f7db:	83 ec 08             	sub    esp,0x8
c000f7de:	6a 01                	push   0x1
c000f7e0:	68 15 13 02 c0       	push   0xc0021315
c000f7e5:	e8 1e 52 00 00       	call   c0014a08 <Thr::loadDLL(char const*, bool)>
c000f7ea:	83 c4 10             	add    esp,0x10
c000f7ed:	83 ec 08             	sub    esp,0x8
c000f7f0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f7f3:	50                   	push   eax
c000f7f4:	e8 4f 54 00 00       	call   c0014c48 <Thr::executeDLL(unsigned long, void*)>
c000f7f9:	83 c4 10             	add    esp,0x10
c000f7fc:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000f800:	74 1e                	je     c000f820 <ACPI::open(int, int, void*)+0x3a8>
c000f802:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000f806:	74 18                	je     c000f820 <ACPI::open(int, int, void*)+0x3a8>
c000f808:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000f80b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f80d:	83 c0 08             	add    eax,0x8
c000f810:	8b 00                	mov    eax,DWORD PTR [eax]
c000f812:	83 ec 0c             	sub    esp,0xc
c000f815:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000f818:	ff d0                	call   eax
c000f81a:	83 c4 10             	add    esp,0x10
c000f81d:	8d 76 00             	lea    esi,[esi+0x0]
c000f820:	a1 c8 86 02 c0       	mov    eax,ds:0xc00286c8
c000f825:	83 ec 08             	sub    esp,0x8
c000f828:	68 32 13 02 c0       	push   0xc0021332
c000f82d:	50                   	push   eax
c000f82e:	e8 65 f2 ff ff       	call   c000ea98 <findDataTable(unsigned char*, char*)>
c000f833:	83 c4 10             	add    esp,0x10
c000f836:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000f839:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c000f83d:	74 11                	je     c000f850 <ACPI::open(int, int, void*)+0x3d8>
c000f83f:	83 ec 08             	sub    esp,0x8
c000f842:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c000f845:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f848:	e8 c7 fb ff ff       	call   c000f414 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f84d:	83 c4 10             	add    esp,0x10
c000f850:	b8 00 00 00 00       	mov    eax,0x0
c000f855:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f858:	c9                   	leave  
c000f859:	c3                   	ret    

c000f85a <CPU::close(int, int, void*)>:
c000f85a:	31 c0                	xor    eax,eax
c000f85c:	c3                   	ret    
c000f85d:	90                   	nop

c000f85e <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f85e:	60                   	pusha  
c000f85f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f863:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f867:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f86b:	9c                   	pushf  
c000f86c:	fa                   	cli    
c000f86d:	0f 09                	wbinvd 
c000f86f:	0f 30                	wrmsr  
c000f871:	9d                   	popf   
c000f872:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f876:	89 02                	mov    DWORD PTR [edx],eax
c000f878:	61                   	popa   
c000f879:	c3                   	ret    

c000f87a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f87a:	60                   	pusha  
c000f87b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f87f:	9c                   	pushf  
c000f880:	fa                   	cli    
c000f881:	0f 09                	wbinvd 
c000f883:	31 c0                	xor    eax,eax
c000f885:	31 d2                	xor    edx,edx
c000f887:	0f 32                	rdmsr  
c000f889:	9d                   	popf   
c000f88a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f88e:	89 02                	mov    DWORD PTR [edx],eax
c000f890:	61                   	popa   
c000f891:	c3                   	ret    

c000f892 <CPU::AMD_K6_writeback(int, int, int)>:
c000f892:	56                   	push   esi
c000f893:	53                   	push   ebx
c000f894:	83 ec 10             	sub    esp,0x10
c000f897:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f89c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f8a0:	75 5d                	jne    c000f8ff <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f8a2:	83 f8 08             	cmp    eax,0x8
c000f8a5:	75 09                	jne    c000f8b0 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f8a7:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f8ac:	7e 13                	jle    c000f8c1 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f8ae:	eb 30                	jmp    c000f8e0 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f8b0:	83 f8 06             	cmp    eax,0x6
c000f8b3:	7c 4a                	jl     c000f8ff <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f8b5:	83 f8 07             	cmp    eax,0x7
c000f8b8:	7e 07                	jle    c000f8c1 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f8ba:	83 f8 09             	cmp    eax,0x9
c000f8bd:	74 21                	je     c000f8e0 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f8bf:	eb 3e                	jmp    c000f8ff <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f8c1:	8b 1d dc 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025edc
c000f8c7:	89 e6                	mov    esi,esp
c000f8c9:	56                   	push   esi
c000f8ca:	68 82 00 00 c0       	push   0xc0000082
c000f8cf:	e8 a6 ff ff ff       	call   c000f87a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f8d4:	c1 eb 15             	shr    ebx,0x15
c000f8d7:	56                   	push   esi
c000f8d8:	83 e3 7e             	and    ebx,0x7e
c000f8db:	6a 00                	push   0x0
c000f8dd:	53                   	push   ebx
c000f8de:	eb 12                	jmp    c000f8f2 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f8e0:	89 e3                	mov    ebx,esp
c000f8e2:	53                   	push   ebx
c000f8e3:	68 82 00 00 c0       	push   0xc0000082
c000f8e8:	e8 8d ff ff ff       	call   c000f87a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f8ed:	53                   	push   ebx
c000f8ee:	6a 00                	push   0x0
c000f8f0:	6a 00                	push   0x0
c000f8f2:	68 82 00 00 c0       	push   0xc0000082
c000f8f7:	e8 62 ff ff ff       	call   c000f85e <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f8fc:	83 c4 18             	add    esp,0x18
c000f8ff:	83 c4 10             	add    esp,0x10
c000f902:	5b                   	pop    ebx
c000f903:	5e                   	pop    esi
c000f904:	c3                   	ret    
c000f905:	90                   	nop

c000f906 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f906:	55                   	push   ebp
c000f907:	57                   	push   edi
c000f908:	56                   	push   esi
c000f909:	53                   	push   ebx
c000f90a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f90e:	39 05 b8 28 02 c0    	cmp    DWORD PTR ds:0xc00228b8,eax
c000f914:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f918:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f91c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f920:	75 23                	jne    c000f945 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f922:	a1 2c 89 02 c0       	mov    eax,ds:0xc002892c
c000f927:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f92b:	89 06                	mov    DWORD PTR [esi],eax
c000f92d:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c000f932:	89 07                	mov    DWORD PTR [edi],eax
c000f934:	a1 24 89 02 c0       	mov    eax,ds:0xc0028924
c000f939:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f93c:	a1 20 89 02 c0       	mov    eax,ds:0xc0028920
c000f941:	89 02                	mov    DWORD PTR [edx],eax
c000f943:	eb 3f                	jmp    c000f984 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f945:	31 c9                	xor    ecx,ecx
c000f947:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f94b:	0f a2                	cpuid  
c000f94d:	89 06                	mov    DWORD PTR [esi],eax
c000f94f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f953:	89 1f                	mov    DWORD PTR [edi],ebx
c000f955:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f958:	89 10                	mov    DWORD PTR [eax],edx
c000f95a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f95e:	a3 b8 28 02 c0       	mov    ds:0xc00228b8,eax
c000f963:	8b 06                	mov    eax,DWORD PTR [esi]
c000f965:	a3 2c 89 02 c0       	mov    ds:0xc002892c,eax
c000f96a:	8b 07                	mov    eax,DWORD PTR [edi]
c000f96c:	a3 28 89 02 c0       	mov    ds:0xc0028928,eax
c000f971:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f974:	a3 24 89 02 c0       	mov    ds:0xc0028924,eax
c000f979:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f97d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f97f:	a3 20 89 02 c0       	mov    ds:0xc0028920,eax
c000f984:	5b                   	pop    ebx
c000f985:	5e                   	pop    esi
c000f986:	5f                   	pop    edi
c000f987:	5d                   	pop    ebp
c000f988:	c3                   	ret    
c000f989:	90                   	nop

c000f98a <CPU::cpuidCheckEDX(unsigned int)>:
c000f98a:	83 ec 10             	sub    esp,0x10
c000f98d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f991:	50                   	push   eax
c000f992:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f996:	50                   	push   eax
c000f997:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f99b:	50                   	push   eax
c000f99c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f9a0:	50                   	push   eax
c000f9a1:	6a 01                	push   0x1
c000f9a3:	e8 5e ff ff ff       	call   c000f906 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f9a8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f9ac:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f9b0:	0f 95 c0             	setne  al
c000f9b3:	83 c4 24             	add    esp,0x24
c000f9b6:	c3                   	ret    
c000f9b7:	90                   	nop

c000f9b8 <CPU::cpuidCheckECX(unsigned int)>:
c000f9b8:	83 ec 10             	sub    esp,0x10
c000f9bb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f9bf:	50                   	push   eax
c000f9c0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f9c4:	50                   	push   eax
c000f9c5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f9c9:	50                   	push   eax
c000f9ca:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f9ce:	50                   	push   eax
c000f9cf:	6a 01                	push   0x1
c000f9d1:	e8 30 ff ff ff       	call   c000f906 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f9d6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f9da:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f9de:	0f 95 c0             	setne  al
c000f9e1:	83 c4 24             	add    esp,0x24
c000f9e4:	c3                   	ret    
c000f9e5:	90                   	nop

c000f9e6 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f9e6:	83 ec 10             	sub    esp,0x10
c000f9e9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f9ed:	50                   	push   eax
c000f9ee:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f9f2:	50                   	push   eax
c000f9f3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f9f7:	50                   	push   eax
c000f9f8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f9fc:	50                   	push   eax
c000f9fd:	6a 07                	push   0x7
c000f9ff:	e8 02 ff ff ff       	call   c000f906 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fa04:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fa08:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000fa0c:	0f 95 c0             	setne  al
c000fa0f:	83 c4 24             	add    esp,0x24
c000fa12:	c3                   	ret    
c000fa13:	90                   	nop

c000fa14 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000fa14:	83 ec 10             	sub    esp,0x10
c000fa17:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa1b:	50                   	push   eax
c000fa1c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa20:	50                   	push   eax
c000fa21:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa25:	50                   	push   eax
c000fa26:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa2a:	50                   	push   eax
c000fa2b:	6a 07                	push   0x7
c000fa2d:	e8 d4 fe ff ff       	call   c000f906 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fa32:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fa36:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000fa3a:	0f 95 c0             	setne  al
c000fa3d:	83 c4 24             	add    esp,0x24
c000fa40:	c3                   	ret    
c000fa41:	90                   	nop

c000fa42 <CPU::CPU()>:
c000fa42:	83 ec 0c             	sub    esp,0xc
c000fa45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa49:	83 ec 08             	sub    esp,0x8
c000fa4c:	68 55 14 02 c0       	push   0xc0021455
c000fa51:	50                   	push   eax
c000fa52:	e8 c9 c7 ff ff       	call   c000c220 <Device::Device(char const*)>
c000fa57:	83 c4 10             	add    esp,0x10
c000fa5a:	ba e8 14 02 c0       	mov    edx,0xc00214e8
c000fa5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa63:	89 10                	mov    DWORD PTR [eax],edx
c000fa65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa69:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000fa73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa77:	05 78 01 00 00       	add    eax,0x178
c000fa7c:	83 ec 0c             	sub    esp,0xc
c000fa7f:	50                   	push   eax
c000fa80:	e8 ef 78 ff ff       	call   c0007374 <GDT::GDT()>
c000fa85:	83 c4 10             	add    esp,0x10
c000fa88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa8c:	05 7c 09 00 00       	add    eax,0x97c
c000fa91:	83 ec 0c             	sub    esp,0xc
c000fa94:	50                   	push   eax
c000fa95:	e8 2a 7b ff ff       	call   c00075c4 <IDT::IDT()>
c000fa9a:	83 c4 10             	add    esp,0x10
c000fa9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000faa1:	05 7c 11 00 00       	add    eax,0x117c
c000faa6:	83 ec 0c             	sub    esp,0xc
c000faa9:	50                   	push   eax
c000faaa:	e8 71 94 ff ff       	call   c0008f20 <TSS::TSS()>
c000faaf:	83 c4 10             	add    esp,0x10
c000fab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fab6:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000fabd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fac1:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c000facb:	90                   	nop
c000facc:	83 c4 0c             	add    esp,0xc
c000facf:	c3                   	ret    

c000fad0 <CPU::displayFeatures()>:
c000fad0:	c3                   	ret    
c000fad1:	90                   	nop

c000fad2 <CPU::detectFeatures()>:
c000fad2:	55                   	push   ebp
c000fad3:	57                   	push   edi
c000fad4:	56                   	push   esi
c000fad5:	53                   	push   ebx
c000fad6:	83 ec 30             	sub    esp,0x30
c000fad9:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fadd:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000fae7:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000faed:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000faf4:	6a 0d                	push   0xd
c000faf6:	6a 00                	push   0x0
c000faf8:	55                   	push   ebp
c000faf9:	e8 f2 09 ff ff       	call   c00004f0 <memset>
c000fafe:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fb03:	83 c4 10             	add    esp,0x10
c000fb06:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000fb0d:	0f 84 db 05 00 00    	je     c00100ee <CPU::detectFeatures()+0x61c>
c000fb13:	83 ec 0c             	sub    esp,0xc
c000fb16:	89 ef                	mov    edi,ebp
c000fb18:	6a 10                	push   0x10
c000fb1a:	e8 6b fe ff ff       	call   c000f98a <CPU::cpuidCheckEDX(unsigned int)>
c000fb1f:	83 e0 01             	and    eax,0x1
c000fb22:	8d 14 00             	lea    edx,[eax+eax*1]
c000fb25:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fb2b:	83 e0 fd             	and    eax,0xfffffffd
c000fb2e:	09 d0                	or     eax,edx
c000fb30:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fb36:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000fb3d:	e8 48 fe ff ff       	call   c000f98a <CPU::cpuidCheckEDX(unsigned int)>
c000fb42:	83 e0 01             	and    eax,0x1
c000fb45:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fb4c:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fb52:	83 e0 fb             	and    eax,0xfffffffb
c000fb55:	09 d0                	or     eax,edx
c000fb57:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fb5d:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000fb64:	e8 21 fe ff ff       	call   c000f98a <CPU::cpuidCheckEDX(unsigned int)>
c000fb69:	83 e0 01             	and    eax,0x1
c000fb6c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000fb73:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fb79:	83 e0 f7             	and    eax,0xfffffff7
c000fb7c:	09 d0                	or     eax,edx
c000fb7e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fb84:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000fb8b:	e8 fa fd ff ff       	call   c000f98a <CPU::cpuidCheckEDX(unsigned int)>
c000fb90:	83 e0 01             	and    eax,0x1
c000fb93:	c1 e0 04             	shl    eax,0x4
c000fb96:	89 c2                	mov    edx,eax
c000fb98:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fb9e:	83 e0 ef             	and    eax,0xffffffef
c000fba1:	09 d0                	or     eax,edx
c000fba3:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fba9:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000fbb0:	e8 d5 fd ff ff       	call   c000f98a <CPU::cpuidCheckEDX(unsigned int)>
c000fbb5:	83 e0 01             	and    eax,0x1
c000fbb8:	c1 e0 05             	shl    eax,0x5
c000fbbb:	89 c2                	mov    edx,eax
c000fbbd:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fbc3:	83 e0 df             	and    eax,0xffffffdf
c000fbc6:	09 d0                	or     eax,edx
c000fbc8:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fbce:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000fbd5:	e8 b0 fd ff ff       	call   c000f98a <CPU::cpuidCheckEDX(unsigned int)>
c000fbda:	83 e0 01             	and    eax,0x1
c000fbdd:	8d 14 00             	lea    edx,[eax+eax*1]
c000fbe0:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fbe6:	83 e0 fd             	and    eax,0xfffffffd
c000fbe9:	09 d0                	or     eax,edx
c000fbeb:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fbf1:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000fbf8:	e8 8d fd ff ff       	call   c000f98a <CPU::cpuidCheckEDX(unsigned int)>
c000fbfd:	83 e0 01             	and    eax,0x1
c000fc00:	c1 e0 06             	shl    eax,0x6
c000fc03:	89 c2                	mov    edx,eax
c000fc05:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fc0b:	83 e0 bf             	and    eax,0xffffffbf
c000fc0e:	09 d0                	or     eax,edx
c000fc10:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fc16:	58                   	pop    eax
c000fc17:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fc1b:	50                   	push   eax
c000fc1c:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fc20:	50                   	push   eax
c000fc21:	8d 74 24 28          	lea    esi,[esp+0x28]
c000fc25:	56                   	push   esi
c000fc26:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fc2a:	50                   	push   eax
c000fc2b:	6a 00                	push   0x0
c000fc2d:	e8 d4 fc ff ff       	call   c000f906 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fc32:	b8 04 00 00 00       	mov    eax,0x4
c000fc37:	89 c1                	mov    ecx,eax
c000fc39:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc3b:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000fc41:	89 c1                	mov    ecx,eax
c000fc43:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000fc47:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc49:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000fc4f:	89 c1                	mov    ecx,eax
c000fc51:	8d 74 24 38          	lea    esi,[esp+0x38]
c000fc55:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc57:	83 c4 18             	add    esp,0x18
c000fc5a:	68 64 13 02 c0       	push   0xc0021364
c000fc5f:	55                   	push   ebp
c000fc60:	e8 1b 0b ff ff       	call   c0000780 <strcmp>
c000fc65:	83 c4 10             	add    esp,0x10
c000fc68:	85 c0                	test   eax,eax
c000fc6a:	75 0f                	jne    c000fc7b <CPU::detectFeatures()+0x1a9>
c000fc6c:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000fc76:	e9 22 02 00 00       	jmp    c000fe9d <CPU::detectFeatures()+0x3cb>
c000fc7b:	50                   	push   eax
c000fc7c:	50                   	push   eax
c000fc7d:	68 71 13 02 c0       	push   0xc0021371
c000fc82:	55                   	push   ebp
c000fc83:	e8 f8 0a ff ff       	call   c0000780 <strcmp>
c000fc88:	83 c4 10             	add    esp,0x10
c000fc8b:	85 c0                	test   eax,eax
c000fc8d:	74 dd                	je     c000fc6c <CPU::detectFeatures()+0x19a>
c000fc8f:	50                   	push   eax
c000fc90:	50                   	push   eax
c000fc91:	68 7e 13 02 c0       	push   0xc002137e
c000fc96:	55                   	push   ebp
c000fc97:	e8 e4 0a ff ff       	call   c0000780 <strcmp>
c000fc9c:	83 c4 10             	add    esp,0x10
c000fc9f:	85 c0                	test   eax,eax
c000fca1:	74 2a                	je     c000fccd <CPU::detectFeatures()+0x1fb>
c000fca3:	50                   	push   eax
c000fca4:	50                   	push   eax
c000fca5:	68 8b 13 02 c0       	push   0xc002138b
c000fcaa:	55                   	push   ebp
c000fcab:	e8 d0 0a ff ff       	call   c0000780 <strcmp>
c000fcb0:	83 c4 10             	add    esp,0x10
c000fcb3:	85 c0                	test   eax,eax
c000fcb5:	74 16                	je     c000fccd <CPU::detectFeatures()+0x1fb>
c000fcb7:	50                   	push   eax
c000fcb8:	50                   	push   eax
c000fcb9:	68 98 13 02 c0       	push   0xc0021398
c000fcbe:	55                   	push   ebp
c000fcbf:	e8 bc 0a ff ff       	call   c0000780 <strcmp>
c000fcc4:	83 c4 10             	add    esp,0x10
c000fcc7:	85 c0                	test   eax,eax
c000fcc9:	74 48                	je     c000fd13 <CPU::detectFeatures()+0x241>
c000fccb:	eb 0f                	jmp    c000fcdc <CPU::detectFeatures()+0x20a>
c000fccd:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000fcd7:	e9 c1 01 00 00       	jmp    c000fe9d <CPU::detectFeatures()+0x3cb>
c000fcdc:	50                   	push   eax
c000fcdd:	50                   	push   eax
c000fcde:	68 a5 13 02 c0       	push   0xc00213a5
c000fce3:	55                   	push   ebp
c000fce4:	e8 97 0a ff ff       	call   c0000780 <strcmp>
c000fce9:	83 c4 10             	add    esp,0x10
c000fcec:	85 c0                	test   eax,eax
c000fcee:	74 23                	je     c000fd13 <CPU::detectFeatures()+0x241>
c000fcf0:	57                   	push   edi
c000fcf1:	57                   	push   edi
c000fcf2:	68 b2 13 02 c0       	push   0xc00213b2
c000fcf7:	55                   	push   ebp
c000fcf8:	e8 83 0a ff ff       	call   c0000780 <strcmp>
c000fcfd:	83 c4 10             	add    esp,0x10
c000fd00:	85 c0                	test   eax,eax
c000fd02:	75 1e                	jne    c000fd22 <CPU::detectFeatures()+0x250>
c000fd04:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fd0e:	e9 8a 01 00 00       	jmp    c000fe9d <CPU::detectFeatures()+0x3cb>
c000fd13:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000fd1d:	e9 7b 01 00 00       	jmp    c000fe9d <CPU::detectFeatures()+0x3cb>
c000fd22:	56                   	push   esi
c000fd23:	56                   	push   esi
c000fd24:	68 bf 13 02 c0       	push   0xc00213bf
c000fd29:	55                   	push   ebp
c000fd2a:	e8 51 0a ff ff       	call   c0000780 <strcmp>
c000fd2f:	83 c4 10             	add    esp,0x10
c000fd32:	85 c0                	test   eax,eax
c000fd34:	75 0f                	jne    c000fd45 <CPU::detectFeatures()+0x273>
c000fd36:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000fd40:	e9 58 01 00 00       	jmp    c000fe9d <CPU::detectFeatures()+0x3cb>
c000fd45:	51                   	push   ecx
c000fd46:	51                   	push   ecx
c000fd47:	68 7e 13 02 c0       	push   0xc002137e
c000fd4c:	55                   	push   ebp
c000fd4d:	e8 2e 0a ff ff       	call   c0000780 <strcmp>
c000fd52:	83 c4 10             	add    esp,0x10
c000fd55:	85 c0                	test   eax,eax
c000fd57:	75 0f                	jne    c000fd68 <CPU::detectFeatures()+0x296>
c000fd59:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000fd63:	e9 35 01 00 00       	jmp    c000fe9d <CPU::detectFeatures()+0x3cb>
c000fd68:	52                   	push   edx
c000fd69:	52                   	push   edx
c000fd6a:	68 cc 13 02 c0       	push   0xc00213cc
c000fd6f:	55                   	push   ebp
c000fd70:	e8 0b 0a ff ff       	call   c0000780 <strcmp>
c000fd75:	83 c4 10             	add    esp,0x10
c000fd78:	85 c0                	test   eax,eax
c000fd7a:	75 0f                	jne    c000fd8b <CPU::detectFeatures()+0x2b9>
c000fd7c:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000fd86:	e9 12 01 00 00       	jmp    c000fe9d <CPU::detectFeatures()+0x3cb>
c000fd8b:	50                   	push   eax
c000fd8c:	50                   	push   eax
c000fd8d:	68 d9 13 02 c0       	push   0xc00213d9
c000fd92:	55                   	push   ebp
c000fd93:	e8 e8 09 ff ff       	call   c0000780 <strcmp>
c000fd98:	83 c4 10             	add    esp,0x10
c000fd9b:	85 c0                	test   eax,eax
c000fd9d:	75 0f                	jne    c000fdae <CPU::detectFeatures()+0x2dc>
c000fd9f:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000fda9:	e9 ef 00 00 00       	jmp    c000fe9d <CPU::detectFeatures()+0x3cb>
c000fdae:	50                   	push   eax
c000fdaf:	50                   	push   eax
c000fdb0:	68 e6 13 02 c0       	push   0xc00213e6
c000fdb5:	55                   	push   ebp
c000fdb6:	e8 c5 09 ff ff       	call   c0000780 <strcmp>
c000fdbb:	83 c4 10             	add    esp,0x10
c000fdbe:	85 c0                	test   eax,eax
c000fdc0:	75 0f                	jne    c000fdd1 <CPU::detectFeatures()+0x2ff>
c000fdc2:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000fdcc:	e9 cc 00 00 00       	jmp    c000fe9d <CPU::detectFeatures()+0x3cb>
c000fdd1:	50                   	push   eax
c000fdd2:	50                   	push   eax
c000fdd3:	68 f3 13 02 c0       	push   0xc00213f3
c000fdd8:	55                   	push   ebp
c000fdd9:	e8 a2 09 ff ff       	call   c0000780 <strcmp>
c000fdde:	83 c4 10             	add    esp,0x10
c000fde1:	85 c0                	test   eax,eax
c000fde3:	75 0f                	jne    c000fdf4 <CPU::detectFeatures()+0x322>
c000fde5:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000fdef:	e9 a9 00 00 00       	jmp    c000fe9d <CPU::detectFeatures()+0x3cb>
c000fdf4:	50                   	push   eax
c000fdf5:	50                   	push   eax
c000fdf6:	68 00 14 02 c0       	push   0xc0021400
c000fdfb:	55                   	push   ebp
c000fdfc:	e8 7f 09 ff ff       	call   c0000780 <strcmp>
c000fe01:	83 c4 10             	add    esp,0x10
c000fe04:	85 c0                	test   eax,eax
c000fe06:	75 0f                	jne    c000fe17 <CPU::detectFeatures()+0x345>
c000fe08:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000fe12:	e9 86 00 00 00       	jmp    c000fe9d <CPU::detectFeatures()+0x3cb>
c000fe17:	50                   	push   eax
c000fe18:	50                   	push   eax
c000fe19:	68 0d 14 02 c0       	push   0xc002140d
c000fe1e:	55                   	push   ebp
c000fe1f:	e8 5c 09 ff ff       	call   c0000780 <strcmp>
c000fe24:	83 c4 10             	add    esp,0x10
c000fe27:	85 c0                	test   eax,eax
c000fe29:	75 0c                	jne    c000fe37 <CPU::detectFeatures()+0x365>
c000fe2b:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000fe35:	eb 66                	jmp    c000fe9d <CPU::detectFeatures()+0x3cb>
c000fe37:	50                   	push   eax
c000fe38:	50                   	push   eax
c000fe39:	68 1a 14 02 c0       	push   0xc002141a
c000fe3e:	55                   	push   ebp
c000fe3f:	e8 3c 09 ff ff       	call   c0000780 <strcmp>
c000fe44:	83 c4 10             	add    esp,0x10
c000fe47:	85 c0                	test   eax,eax
c000fe49:	75 0c                	jne    c000fe57 <CPU::detectFeatures()+0x385>
c000fe4b:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000fe55:	eb 46                	jmp    c000fe9d <CPU::detectFeatures()+0x3cb>
c000fe57:	57                   	push   edi
c000fe58:	57                   	push   edi
c000fe59:	68 27 14 02 c0       	push   0xc0021427
c000fe5e:	55                   	push   ebp
c000fe5f:	e8 1c 09 ff ff       	call   c0000780 <strcmp>
c000fe64:	83 c4 10             	add    esp,0x10
c000fe67:	85 c0                	test   eax,eax
c000fe69:	74 e0                	je     c000fe4b <CPU::detectFeatures()+0x379>
c000fe6b:	56                   	push   esi
c000fe6c:	56                   	push   esi
c000fe6d:	68 34 14 02 c0       	push   0xc0021434
c000fe72:	55                   	push   ebp
c000fe73:	e8 08 09 ff ff       	call   c0000780 <strcmp>
c000fe78:	83 c4 10             	add    esp,0x10
c000fe7b:	85 c0                	test   eax,eax
c000fe7d:	74 cc                	je     c000fe4b <CPU::detectFeatures()+0x379>
c000fe7f:	51                   	push   ecx
c000fe80:	51                   	push   ecx
c000fe81:	68 41 14 02 c0       	push   0xc0021441
c000fe86:	55                   	push   ebp
c000fe87:	e8 f4 08 ff ff       	call   c0000780 <strcmp>
c000fe8c:	83 c4 10             	add    esp,0x10
c000fe8f:	85 c0                	test   eax,eax
c000fe91:	74 b8                	je     c000fe4b <CPU::detectFeatures()+0x379>
c000fe93:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000fe9d:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000fea2:	0f 86 be 00 00 00    	jbe    c000ff66 <CPU::detectFeatures()+0x494>
c000fea8:	83 ec 0c             	sub    esp,0xc
c000feab:	68 80 00 00 00       	push   0x80
c000feb0:	e8 31 fb ff ff       	call   c000f9e6 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000feb5:	83 e0 01             	and    eax,0x1
c000feb8:	c1 e0 06             	shl    eax,0x6
c000febb:	89 c2                	mov    edx,eax
c000febd:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fec3:	83 e0 bf             	and    eax,0xffffffbf
c000fec6:	09 d0                	or     eax,edx
c000fec8:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fece:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000fed5:	e8 0c fb ff ff       	call   c000f9e6 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000feda:	83 e0 01             	and    eax,0x1
c000fedd:	c1 e0 04             	shl    eax,0x4
c000fee0:	89 c2                	mov    edx,eax
c000fee2:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fee8:	83 e0 ef             	and    eax,0xffffffef
c000feeb:	09 d0                	or     eax,edx
c000feed:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fef3:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000fefa:	e8 e7 fa ff ff       	call   c000f9e6 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000feff:	89 c2                	mov    edx,eax
c000ff01:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000ff07:	c1 e2 07             	shl    edx,0x7
c000ff0a:	83 e0 7f             	and    eax,0x7f
c000ff0d:	09 d0                	or     eax,edx
c000ff0f:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000ff15:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000ff1c:	e8 f3 fa ff ff       	call   c000fa14 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000ff21:	83 e0 01             	and    eax,0x1
c000ff24:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ff2b:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000ff31:	83 e0 f7             	and    eax,0xfffffff7
c000ff34:	09 d0                	or     eax,edx
c000ff36:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000ff3c:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000ff43:	e8 cc fa ff ff       	call   c000fa14 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000ff48:	83 c4 10             	add    esp,0x10
c000ff4b:	83 e0 01             	and    eax,0x1
c000ff4e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ff55:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ff5b:	83 e0 fb             	and    eax,0xfffffffb
c000ff5e:	09 d0                	or     eax,edx
c000ff60:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000ff66:	83 ec 0c             	sub    esp,0xc
c000ff69:	8d 44 24 28          	lea    eax,[esp+0x28]
c000ff6d:	50                   	push   eax
c000ff6e:	8d 44 24 28          	lea    eax,[esp+0x28]
c000ff72:	50                   	push   eax
c000ff73:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000ff77:	57                   	push   edi
c000ff78:	8d 74 24 28          	lea    esi,[esp+0x28]
c000ff7c:	56                   	push   esi
c000ff7d:	6a 01                	push   0x1
c000ff7f:	e8 82 f9 ff ff       	call   c000f906 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ff84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff88:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c000ff8e:	89 c1                	mov    ecx,eax
c000ff90:	83 e1 0f             	and    ecx,0xf
c000ff93:	83 e2 f0             	and    edx,0xfffffff0
c000ff96:	09 ca                	or     edx,ecx
c000ff98:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000ff9e:	89 c2                	mov    edx,eax
c000ffa0:	c1 ea 04             	shr    edx,0x4
c000ffa3:	83 e2 0f             	and    edx,0xf
c000ffa6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ffaa:	89 d1                	mov    ecx,edx
c000ffac:	83 c4 20             	add    esp,0x20
c000ffaf:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c000ffb5:	c1 e1 06             	shl    ecx,0x6
c000ffb8:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c000ffbe:	09 ca                	or     edx,ecx
c000ffc0:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000ffc7:	89 c2                	mov    edx,eax
c000ffc9:	c1 ea 08             	shr    edx,0x8
c000ffcc:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c000ffd2:	83 e2 0f             	and    edx,0xf
c000ffd5:	89 d5                	mov    ebp,edx
c000ffd7:	83 e5 03             	and    ebp,0x3
c000ffda:	c1 e5 06             	shl    ebp,0x6
c000ffdd:	83 e1 3f             	and    ecx,0x3f
c000ffe0:	09 e9                	or     ecx,ebp
c000ffe2:	89 d5                	mov    ebp,edx
c000ffe4:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c000ffea:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c000fff0:	c1 ed 02             	shr    ebp,0x2
c000fff3:	83 e1 c0             	and    ecx,0xffffffc0
c000fff6:	09 e9                	or     ecx,ebp
c000fff8:	89 c5                	mov    ebp,eax
c000fffa:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0010000:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c0010006:	c1 ed 08             	shr    ebp,0x8
c0010009:	83 e5 30             	and    ebp,0x30
c001000c:	83 e1 cf             	and    ecx,0xffffffcf
c001000f:	09 e9                	or     ecx,ebp
c0010011:	83 fa 06             	cmp    edx,0x6
c0010014:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c001001a:	74 05                	je     c0010021 <CPU::detectFeatures()+0x54f>
c001001c:	83 fa 0f             	cmp    edx,0xf
c001001f:	75 64                	jne    c0010085 <CPU::detectFeatures()+0x5b3>
c0010021:	89 c1                	mov    ecx,eax
c0010023:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0010029:	c1 e9 10             	shr    ecx,0x10
c001002c:	c1 e1 04             	shl    ecx,0x4
c001002f:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0010033:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c0010039:	0f b6 c9             	movzx  ecx,cl
c001003c:	c1 e1 06             	shl    ecx,0x6
c001003f:	09 e9                	or     ecx,ebp
c0010041:	83 fa 0f             	cmp    edx,0xf
c0010044:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c001004b:	75 38                	jne    c0010085 <CPU::detectFeatures()+0x5b3>
c001004d:	c1 e8 14             	shr    eax,0x14
c0010050:	83 c0 0f             	add    eax,0xf
c0010053:	0f b6 c0             	movzx  eax,al
c0010056:	89 c2                	mov    edx,eax
c0010058:	c1 e8 02             	shr    eax,0x2
c001005b:	83 e2 03             	and    edx,0x3
c001005e:	89 d1                	mov    ecx,edx
c0010060:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0010066:	c1 e1 06             	shl    ecx,0x6
c0010069:	83 e2 3f             	and    edx,0x3f
c001006c:	09 ca                	or     edx,ecx
c001006e:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0010074:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001007a:	83 e2 c0             	and    edx,0xffffffc0
c001007d:	09 d0                	or     eax,edx
c001007f:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c0010085:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001008b:	83 ec 0c             	sub    esp,0xc
c001008e:	83 c8 07             	or     eax,0x7
c0010091:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010097:	8d 44 24 28          	lea    eax,[esp+0x28]
c001009b:	50                   	push   eax
c001009c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00100a0:	55                   	push   ebp
c00100a1:	57                   	push   edi
c00100a2:	56                   	push   esi
c00100a3:	68 00 00 00 80       	push   0x80000000
c00100a8:	e8 59 f8 ff ff       	call   c000f906 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00100ad:	83 c4 20             	add    esp,0x20
c00100b0:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00100b8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00100bc:	76 1e                	jbe    c00100dc <CPU::detectFeatures()+0x60a>
c00100be:	83 ec 0c             	sub    esp,0xc
c00100c1:	50                   	push   eax
c00100c2:	55                   	push   ebp
c00100c3:	57                   	push   edi
c00100c4:	56                   	push   esi
c00100c5:	68 01 00 00 80       	push   0x80000001
c00100ca:	e8 37 f8 ff ff       	call   c000f906 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00100cf:	83 c4 20             	add    esp,0x20
c00100d2:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c00100dc:	52                   	push   edx
c00100dd:	52                   	push   edx
c00100de:	68 4d 14 02 c0       	push   0xc002144d
c00100e3:	53                   	push   ebx
c00100e4:	e8 29 c1 ff ff       	call   c000c212 <Device::setName(char const*)>
c00100e9:	83 c4 10             	add    esp,0x10
c00100ec:	eb 69                	jmp    c0010157 <CPU::detectFeatures()+0x685>
c00100ee:	50                   	push   eax
c00100ef:	50                   	push   eax
c00100f0:	68 b2 13 02 c0       	push   0xc00213b2
c00100f5:	55                   	push   ebp
c00100f6:	e8 55 05 ff ff       	call   c0000650 <strcpy>
c00100fb:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010105:	e8 b9 00 ff ff       	call   c00001c3 <is486>
c001010a:	83 c4 10             	add    esp,0x10
c001010d:	85 c0                	test   eax,eax
c001010f:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010115:	74 1f                	je     c0010136 <CPU::detectFeatures()+0x664>
c0010117:	83 c8 07             	or     eax,0x7
c001011a:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010120:	0f 20 c0             	mov    eax,cr0
c0010123:	83 e0 14             	and    eax,0x14
c0010126:	83 f8 04             	cmp    eax,0x4
c0010129:	75 10                	jne    c001013b <CPU::detectFeatures()+0x669>
c001012b:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010131:	83 e0 fd             	and    eax,0xfffffffd
c0010134:	eb 1b                	jmp    c0010151 <CPU::detectFeatures()+0x67f>
c0010136:	83 e0 f8             	and    eax,0xfffffff8
c0010139:	eb df                	jmp    c001011a <CPU::detectFeatures()+0x648>
c001013b:	e8 5e 00 ff ff       	call   c000019e <hasLegacyFPU>
c0010140:	83 e0 01             	and    eax,0x1
c0010143:	8d 14 00             	lea    edx,[eax+eax*1]
c0010146:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001014c:	83 e0 fd             	and    eax,0xfffffffd
c001014f:	09 d0                	or     eax,edx
c0010151:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010157:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c001015e:	74 17                	je     c0010177 <CPU::detectFeatures()+0x6a5>
c0010160:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c0010166:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c001016c:	83 c8 10             	or     eax,0x10
c001016f:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c0010175:	eb 20                	jmp    c0010197 <CPU::detectFeatures()+0x6c5>
c0010177:	e8 22 00 ff ff       	call   c000019e <hasLegacyFPU>
c001017c:	83 e0 01             	and    eax,0x1
c001017f:	8d 14 00             	lea    edx,[eax+eax*1]
c0010182:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010188:	83 e0 fd             	and    eax,0xfffffffd
c001018b:	09 d0                	or     eax,edx
c001018d:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010193:	a8 02                	test   al,0x2
c0010195:	75 c9                	jne    c0010160 <CPU::detectFeatures()+0x68e>
c0010197:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c001019e:	83 c4 2c             	add    esp,0x2c
c00101a1:	5b                   	pop    ebx
c00101a2:	5e                   	pop    esi
c00101a3:	5f                   	pop    edi
c00101a4:	5d                   	pop    ebp
c00101a5:	c3                   	ret    

c00101a6 <CPU::setupSMEP()>:
c00101a6:	0f 20 e0             	mov    eax,cr4
c00101a9:	0d 00 00 10 00       	or     eax,0x100000
c00101ae:	0f 22 e0             	mov    cr4,eax
c00101b1:	c3                   	ret    

c00101b2 <CPU::setupUMIP()>:
c00101b2:	0f 20 e0             	mov    eax,cr4
c00101b5:	80 cc 08             	or     ah,0x8
c00101b8:	0f 22 e0             	mov    cr4,eax
c00101bb:	c3                   	ret    

c00101bc <CPU::setupTSC()>:
c00101bc:	0f 20 e0             	mov    eax,cr4
c00101bf:	83 c8 04             	or     eax,0x4
c00101c2:	0f 22 e0             	mov    cr4,eax
c00101c5:	c3                   	ret    

c00101c6 <CPU::setupLargePages()>:
c00101c6:	0f 20 e0             	mov    eax,cr4
c00101c9:	83 c8 10             	or     eax,0x10
c00101cc:	0f 22 e0             	mov    cr4,eax
c00101cf:	c3                   	ret    

c00101d0 <CPU::setupPAT()>:
c00101d0:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00101d5:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00101dc:	74 2c                	je     c001020a <CPU::setupPAT()+0x3a>
c00101de:	53                   	push   ebx
c00101df:	83 ec 10             	sub    esp,0x10
c00101e2:	68 77 02 00 00       	push   0x277
c00101e7:	50                   	push   eax
c00101e8:	e8 ed 6e ff ff       	call   c00070da <Computer::rdmsr(unsigned int)>
c00101ed:	83 e2 f8             	and    edx,0xfffffff8
c00101f0:	83 ca 01             	or     edx,0x1
c00101f3:	52                   	push   edx
c00101f4:	50                   	push   eax
c00101f5:	68 77 02 00 00       	push   0x277
c00101fa:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0010200:	e8 01 6f ff ff       	call   c0007106 <Computer::wrmsr(unsigned int, unsigned long long)>
c0010205:	83 c4 28             	add    esp,0x28
c0010208:	5b                   	pop    ebx
c0010209:	c3                   	ret    
c001020a:	c3                   	ret    
c001020b:	90                   	nop

c001020c <CPU::setupMTRR()>:
c001020c:	c3                   	ret    
c001020d:	90                   	nop

c001020e <CPU::setupGlobalPages()>:
c001020e:	0f 20 e0             	mov    eax,cr4
c0010211:	0c 80                	or     al,0x80
c0010213:	0f 22 e0             	mov    cr4,eax
c0010216:	c3                   	ret    
c0010217:	90                   	nop

c0010218 <CPU::allowUsermodeDataAccess()>:
c0010218:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001021c:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010223:	74 03                	je     c0010228 <CPU::allowUsermodeDataAccess()+0x10>
c0010225:	0f 01 cb             	stac   
c0010228:	c3                   	ret    
c0010229:	90                   	nop

c001022a <CPU::prohibitUsermodeDataAccess()>:
c001022a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001022e:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010235:	74 03                	je     c001023a <CPU::prohibitUsermodeDataAccess()+0x10>
c0010237:	0f 01 ca             	clac   
c001023a:	c3                   	ret    
c001023b:	90                   	nop

c001023c <CPU::setupSMAP()>:
c001023c:	0f 20 e0             	mov    eax,cr4
c001023f:	0d 00 00 20 00       	or     eax,0x200000
c0010244:	0f 22 e0             	mov    cr4,eax
c0010247:	eb e1                	jmp    c001022a <CPU::prohibitUsermodeDataAccess()>
c0010249:	90                   	nop

c001024a <CPU::setupFeatures()>:
c001024a:	53                   	push   ebx
c001024b:	83 ec 08             	sub    esp,0x8
c001024e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010252:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0010259:	74 18                	je     c0010273 <CPU::setupFeatures()+0x29>
c001025b:	83 ec 0c             	sub    esp,0xc
c001025e:	68 59 14 02 c0       	push   0xc0021459
c0010263:	e8 96 a6 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0010268:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001026b:	e8 42 ff ff ff       	call   c00101b2 <CPU::setupUMIP()>
c0010270:	83 c4 10             	add    esp,0x10
c0010273:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c001027a:	74 18                	je     c0010294 <CPU::setupFeatures()+0x4a>
c001027c:	83 ec 0c             	sub    esp,0xc
c001027f:	68 63 14 02 c0       	push   0xc0021463
c0010284:	e8 75 a6 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0010289:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001028c:	e8 2b ff ff ff       	call   c00101bc <CPU::setupTSC()>
c0010291:	83 c4 10             	add    esp,0x10
c0010294:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c001029b:	74 18                	je     c00102b5 <CPU::setupFeatures()+0x6b>
c001029d:	83 ec 0c             	sub    esp,0xc
c00102a0:	68 6c 14 02 c0       	push   0xc002146c
c00102a5:	e8 54 a6 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c00102aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102ad:	e8 14 ff ff ff       	call   c00101c6 <CPU::setupLargePages()>
c00102b2:	83 c4 10             	add    esp,0x10
c00102b5:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c00102bc:	74 18                	je     c00102d6 <CPU::setupFeatures()+0x8c>
c00102be:	83 ec 0c             	sub    esp,0xc
c00102c1:	68 75 14 02 c0       	push   0xc0021475
c00102c6:	e8 33 a6 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c00102cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102ce:	e8 3b ff ff ff       	call   c001020e <CPU::setupGlobalPages()>
c00102d3:	83 c4 10             	add    esp,0x10
c00102d6:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c00102dd:	74 18                	je     c00102f7 <CPU::setupFeatures()+0xad>
c00102df:	83 ec 0c             	sub    esp,0xc
c00102e2:	68 87 14 02 c0       	push   0xc0021487
c00102e7:	e8 12 a6 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c00102ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102ef:	e8 dc fe ff ff       	call   c00101d0 <CPU::setupPAT()>
c00102f4:	83 c4 10             	add    esp,0x10
c00102f7:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c00102fe:	74 11                	je     c0010311 <CPU::setupFeatures()+0xc7>
c0010300:	c7 44 24 10 90 14 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021490
c0010308:	83 c4 08             	add    esp,0x8
c001030b:	5b                   	pop    ebx
c001030c:	e9 ed a5 ff ff       	jmp    c000a8fe <Dbg::kprintf(char const*, ...)>
c0010311:	83 c4 08             	add    esp,0x8
c0010314:	5b                   	pop    ebx
c0010315:	c3                   	ret    

c0010316 <CPU::open(int, int, void*)>:
c0010316:	55                   	push   ebp
c0010317:	57                   	push   edi
c0010318:	56                   	push   esi
c0010319:	53                   	push   ebx
c001031a:	83 ec 18             	sub    esp,0x18
c001031d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010321:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0010325:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010329:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001032f:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c0010335:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c001033b:	50                   	push   eax
c001033c:	e8 95 70 ff ff       	call   c00073d6 <GDT::setup()>
c0010341:	83 c4 0c             	add    esp,0xc
c0010344:	6a 00                	push   0x0
c0010346:	68 ef be ad de       	push   0xdeadbeef
c001034b:	55                   	push   ebp
c001034c:	e8 13 8c ff ff       	call   c0008f64 <TSS::setup(unsigned long, unsigned long)>
c0010351:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010354:	e8 eb 8b ff ff       	call   c0008f44 <TSS::flush()>
c0010359:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001035f:	89 04 24             	mov    DWORD PTR [esp],eax
c0010362:	e8 d3 72 ff ff       	call   c000763a <IDT::setup()>
c0010367:	b8 00 04 00 00       	mov    eax,0x400
c001036c:	0f 23 f8             	mov    db7,eax
c001036f:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010379:	e8 57 7a ff ff       	call   c0007dd5 <Phys::allocatePage()>
c001037e:	83 c4 10             	add    esp,0x10
c0010381:	85 f6                	test   esi,esi
c0010383:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010389:	89 38                	mov    DWORD PTR [eax],edi
c001038b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010391:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010394:	74 10                	je     c00103a6 <CPU::open(int, int, void*)+0x90>
c0010396:	50                   	push   eax
c0010397:	50                   	push   eax
c0010398:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001039e:	56                   	push   esi
c001039f:	e8 dc 94 ff ff       	call   c0009880 <VAS::setCPUSpecific(unsigned long)>
c00103a4:	eb 0d                	jmp    c00103b3 <CPU::open(int, int, void*)+0x9d>
c00103a6:	83 ec 0c             	sub    esp,0xc
c00103a9:	68 9a 14 02 c0       	push   0xc002149a
c00103ae:	e8 be 07 00 00       	call   c0010b71 <KePanic(char const*)>
c00103b3:	83 c4 10             	add    esp,0x10
c00103b6:	83 ec 0c             	sub    esp,0xc
c00103b9:	68 a8 14 02 c0       	push   0xc00214a8
c00103be:	e8 d8 00 00 00       	call   c001049b <KeSetBootMessage(char const*)>
c00103c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00103c6:	e8 07 f7 ff ff       	call   c000fad2 <CPU::detectFeatures()>
c00103cb:	c7 04 24 cb 14 02 c0 	mov    DWORD PTR [esp],0xc00214cb
c00103d2:	e8 c4 00 00 00       	call   c001049b <KeSetBootMessage(char const*)>
c00103d7:	e8 57 71 00 00       	call   c0017533 <HalInitialise()>
c00103dc:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c00103e1:	83 e0 10             	and    eax,0x10
c00103e4:	83 f8 01             	cmp    eax,0x1
c00103e7:	19 c0                	sbb    eax,eax
c00103e9:	83 e0 46             	and    eax,0x46
c00103ec:	83 c0 1e             	add    eax,0x1e
c00103ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00103f2:	e8 c2 d6 ff ff       	call   c000dab9 <setupTimer(int)>
c00103f7:	83 c4 10             	add    esp,0x10
c00103fa:	f6 05 d0 5e 02 c0 20 	test   BYTE PTR ds:0xc0025ed0,0x20
c0010401:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010407:	74 0c                	je     c0010415 <CPU::open(int, int, void*)+0xff>
c0010409:	83 ec 0c             	sub    esp,0xc
c001040c:	53                   	push   ebx
c001040d:	e8 38 fe ff ff       	call   c001024a <CPU::setupFeatures()>
c0010412:	83 c4 10             	add    esp,0x10
c0010415:	83 c4 0c             	add    esp,0xc
c0010418:	31 c0                	xor    eax,eax
c001041a:	5b                   	pop    ebx
c001041b:	5e                   	pop    esi
c001041c:	5f                   	pop    edi
c001041d:	5d                   	pop    ebp
c001041e:	c3                   	ret    

c001041f <KeDisplaySplashScreen()>:
c001041f:	55                   	push   ebp
c0010420:	bd 05 00 00 00       	mov    ebp,0x5
c0010425:	57                   	push   edi
c0010426:	bf 0a 00 00 00       	mov    edi,0xa
c001042b:	56                   	push   esi
c001042c:	31 f6                	xor    esi,esi
c001042e:	53                   	push   ebx
c001042f:	31 db                	xor    ebx,ebx
c0010431:	83 ec 0c             	sub    esp,0xc
c0010434:	0f b6 96 c0 28 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdd740]
c001043b:	85 d2                	test   edx,edx
c001043d:	89 d0                	mov    eax,edx
c001043f:	74 52                	je     c0010493 <KeDisplaySplashScreen()+0x74>
c0010441:	80 bb f6 28 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdd70a],0xdb
c0010448:	75 13                	jne    c001045d <KeDisplaySplashScreen()+0x3e>
c001044a:	0f b6 8b f5 28 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdd70b]
c0010451:	83 e1 fe             	and    ecx,0xfffffffe
c0010454:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c001045a:	75 01                	jne    c001045d <KeDisplaySplashScreen()+0x3e>
c001045c:	47                   	inc    edi
c001045d:	83 fa 0d             	cmp    edx,0xd
c0010460:	74 28                	je     c001048a <KeDisplaySplashScreen()+0x6b>
c0010462:	83 fa 0a             	cmp    edx,0xa
c0010465:	75 0a                	jne    c0010471 <KeDisplaySplashScreen()+0x52>
c0010467:	45                   	inc    ebp
c0010468:	bf 0a 00 00 00       	mov    edi,0xa
c001046d:	31 db                	xor    ebx,ebx
c001046f:	eb 19                	jmp    c001048a <KeDisplaySplashScreen()+0x6b>
c0010471:	83 ec 0c             	sub    esp,0xc
c0010474:	0f be c0             	movsx  eax,al
c0010477:	55                   	push   ebp
c0010478:	8d 14 1f             	lea    edx,[edi+ebx*1]
c001047b:	43                   	inc    ebx
c001047c:	52                   	push   edx
c001047d:	6a 00                	push   0x0
c001047f:	6a 0e                	push   0xe
c0010481:	50                   	push   eax
c0010482:	e8 29 7d 00 00       	call   c00181b0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010487:	83 c4 20             	add    esp,0x20
c001048a:	46                   	inc    esi
c001048b:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010491:	75 a1                	jne    c0010434 <KeDisplaySplashScreen()+0x15>
c0010493:	83 c4 0c             	add    esp,0xc
c0010496:	5b                   	pop    ebx
c0010497:	5e                   	pop    esi
c0010498:	5f                   	pop    edi
c0010499:	5d                   	pop    ebp
c001049a:	c3                   	ret    

c001049b <KeSetBootMessage(char const*)>:
c001049b:	57                   	push   edi
c001049c:	56                   	push   esi
c001049d:	53                   	push   ebx
c001049e:	81 ec a4 00 00 00    	sub    esp,0xa4
c00104a4:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c00104ab:	68 9e 00 00 00       	push   0x9e
c00104b0:	6a 00                	push   0x0
c00104b2:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00104b6:	56                   	push   esi
c00104b7:	e8 34 00 ff ff       	call   c00004f0 <memset>
c00104bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00104bf:	e8 bc 00 ff ff       	call   c0000580 <strlen>
c00104c4:	ba 50 00 00 00       	mov    edx,0x50
c00104c9:	83 c4 10             	add    esp,0x10
c00104cc:	31 c9                	xor    ecx,ecx
c00104ce:	29 c2                	sub    edx,eax
c00104d0:	83 e2 fe             	and    edx,0xfffffffe
c00104d3:	01 f2                	add    edx,esi
c00104d5:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c00104da:	84 c0                	test   al,al
c00104dc:	74 0a                	je     c00104e8 <KeSetBootMessage(char const*)+0x4d>
c00104de:	80 cc 0f             	or     ah,0xf
c00104e1:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c00104e5:	41                   	inc    ecx
c00104e6:	eb ed                	jmp    c00104d5 <KeSetBootMessage(char const*)+0x3a>
c00104e8:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c00104ed:	b9 9e 00 00 00       	mov    ecx,0x9e
c00104f2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00104f4:	81 c4 a0 00 00 00    	add    esp,0xa0
c00104fa:	5b                   	pop    ebx
c00104fb:	5e                   	pop    esi
c00104fc:	5f                   	pop    edi
c00104fd:	c3                   	ret    
c00104fe:	66 90                	xchg   ax,ax

c0010500 <Krnl::handlePowerButton()>:
c0010500:	83 ec 0c             	sub    esp,0xc
c0010503:	e8 c4 06 00 00       	call   c0010bcc <KeHandlePowerButton()>
c0010508:	90                   	nop
c0010509:	83 c4 0c             	add    esp,0xc
c001050c:	c3                   	ret    
c001050d:	8d 76 00             	lea    esi,[esi+0x0]

c0010510 <Krnl::handleSleepButton()>:
c0010510:	83 ec 0c             	sub    esp,0xc
c0010513:	e8 e9 06 00 00       	call   c0010c01 <KeHandleSleepButton()>
c0010518:	90                   	nop
c0010519:	83 c4 0c             	add    esp,0xc
c001051c:	c3                   	ret    
c001051d:	90                   	nop

c001051e <EnvVarContainer::getEnv(char const*)>:
c001051e:	57                   	push   edi
c001051f:	56                   	push   esi
c0010520:	53                   	push   ebx
c0010521:	31 db                	xor    ebx,ebx
c0010523:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010527:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010529:	7e 2b                	jle    c0010556 <EnvVarContainer::getEnv(char const*)+0x38>
c001052b:	50                   	push   eax
c001052c:	50                   	push   eax
c001052d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010530:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010537:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001053a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001053e:	e8 3d 02 ff ff       	call   c0000780 <strcmp>
c0010543:	83 c4 10             	add    esp,0x10
c0010546:	85 c0                	test   eax,eax
c0010548:	75 09                	jne    c0010553 <EnvVarContainer::getEnv(char const*)+0x35>
c001054a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001054d:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010551:	eb 05                	jmp    c0010558 <EnvVarContainer::getEnv(char const*)+0x3a>
c0010553:	43                   	inc    ebx
c0010554:	eb d1                	jmp    c0010527 <EnvVarContainer::getEnv(char const*)+0x9>
c0010556:	31 c0                	xor    eax,eax
c0010558:	5b                   	pop    ebx
c0010559:	5e                   	pop    esi
c001055a:	5f                   	pop    edi
c001055b:	c3                   	ret    

c001055c <EnvVarContainer::setEnv(char const*, char const*)>:
c001055c:	55                   	push   ebp
c001055d:	57                   	push   edi
c001055e:	56                   	push   esi
c001055f:	53                   	push   ebx
c0010560:	83 ec 28             	sub    esp,0x28
c0010563:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010567:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001056b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001056f:	56                   	push   esi
c0010570:	e8 0b 00 ff ff       	call   c0000580 <strlen>
c0010575:	40                   	inc    eax
c0010576:	89 04 24             	mov    DWORD PTR [esp],eax
c0010579:	e8 4d 75 ff ff       	call   c0007acb <malloc>
c001057e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010581:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010585:	e8 f6 ff fe ff       	call   c0000580 <strlen>
c001058a:	40                   	inc    eax
c001058b:	89 04 24             	mov    DWORD PTR [esp],eax
c001058e:	e8 38 75 ff ff       	call   c0007acb <malloc>
c0010593:	89 34 24             	mov    DWORD PTR [esp],esi
c0010596:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001059a:	e8 e1 ff fe ff       	call   c0000580 <strlen>
c001059f:	83 c4 0c             	add    esp,0xc
c00105a2:	40                   	inc    eax
c00105a3:	50                   	push   eax
c00105a4:	6a 00                	push   0x0
c00105a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00105aa:	e8 41 ff fe ff       	call   c00004f0 <memset>
c00105af:	89 34 24             	mov    DWORD PTR [esp],esi
c00105b2:	e8 c9 ff fe ff       	call   c0000580 <strlen>
c00105b7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00105bb:	8d 48 01             	lea    ecx,[eax+0x1]
c00105be:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00105c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00105c3:	89 de                	mov    esi,ebx
c00105c5:	e8 b6 ff fe ff       	call   c0000580 <strlen>
c00105ca:	83 c4 0c             	add    esp,0xc
c00105cd:	40                   	inc    eax
c00105ce:	50                   	push   eax
c00105cf:	6a 00                	push   0x0
c00105d1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105d5:	e8 16 ff fe ff       	call   c00004f0 <memset>
c00105da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00105dd:	e8 9e ff fe ff       	call   c0000580 <strlen>
c00105e2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00105e6:	8d 48 01             	lea    ecx,[eax+0x1]
c00105e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00105eb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00105ee:	40                   	inc    eax
c00105ef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00105f2:	c1 e0 03             	shl    eax,0x3
c00105f5:	5a                   	pop    edx
c00105f6:	59                   	pop    ecx
c00105f7:	50                   	push   eax
c00105f8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00105fb:	e8 b7 74 ff ff       	call   c0007ab7 <realloc>
c0010600:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010603:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010607:	b9 08 00 00 00       	mov    ecx,0x8
c001060c:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001060f:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010613:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010615:	83 c4 2c             	add    esp,0x2c
c0010618:	5b                   	pop    ebx
c0010619:	5e                   	pop    esi
c001061a:	5f                   	pop    edi
c001061b:	5d                   	pop    ebp
c001061c:	c3                   	ret    
c001061d:	90                   	nop

c001061e <EnvVarContainer::deleteEnv(char const*)>:
c001061e:	c3                   	ret    
c001061f:	90                   	nop

c0010620 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010620:	55                   	push   ebp
c0010621:	57                   	push   edi
c0010622:	56                   	push   esi
c0010623:	53                   	push   ebx
c0010624:	81 ec 38 01 00 00    	sub    esp,0x138
c001062a:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010631:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010638:	68 14 01 00 00       	push   0x114
c001063d:	e8 89 74 ff ff       	call   c0007acb <malloc>
c0010642:	83 c4 0c             	add    esp,0xc
c0010645:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010648:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001064f:	89 c3                	mov    ebx,eax
c0010651:	50                   	push   eax
c0010652:	e8 23 ab ff ff       	call   c000b17a <File::File(char const*, Process*)>
c0010657:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001065a:	e8 9b ae ff ff       	call   c000b4fa <File::exists()>
c001065f:	83 c4 10             	add    esp,0x10
c0010662:	84 c0                	test   al,al
c0010664:	75 31                	jne    c0010697 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0010666:	50                   	push   eax
c0010667:	50                   	push   eax
c0010668:	6a 12                	push   0x12
c001066a:	53                   	push   ebx
c001066b:	e8 c6 ab ff ff       	call   c000b236 <File::open(FileOpenMode)>
c0010670:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010672:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0010675:	89 34 24             	mov    DWORD PTR [esp],esi
c0010678:	e8 03 ff fe ff       	call   c0000580 <strlen>
c001067d:	5a                   	pop    edx
c001067e:	8d 54 24 20          	lea    edx,[esp+0x20]
c0010682:	52                   	push   edx
c0010683:	31 d2                	xor    edx,edx
c0010685:	56                   	push   esi
c0010686:	52                   	push   edx
c0010687:	50                   	push   eax
c0010688:	53                   	push   ebx
c0010689:	ff d7                	call   edi
c001068b:	83 c4 14             	add    esp,0x14
c001068e:	53                   	push   ebx
c001068f:	e8 00 ac ff ff       	call   c000b294 <File::close()>
c0010694:	83 c4 10             	add    esp,0x10
c0010697:	56                   	push   esi
c0010698:	31 f6                	xor    esi,esi
c001069a:	68 00 01 00 00       	push   0x100
c001069f:	6a 00                	push   0x0
c00106a1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00106a5:	50                   	push   eax
c00106a6:	e8 45 fe fe ff       	call   c00004f0 <memset>
c00106ab:	5f                   	pop    edi
c00106ac:	58                   	pop    eax
c00106ad:	6a 01                	push   0x1
c00106af:	53                   	push   ebx
c00106b0:	e8 81 ab ff ff       	call   c000b236 <File::open(FileOpenMode)>
c00106b5:	83 c4 10             	add    esp,0x10
c00106b8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00106c0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00106c8:	83 ec 0c             	sub    esp,0xc
c00106cb:	8d 54 24 20          	lea    edx,[esp+0x20]
c00106cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106d1:	52                   	push   edx
c00106d2:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c00106d6:	51                   	push   ecx
c00106d7:	6a 00                	push   0x0
c00106d9:	6a 01                	push   0x1
c00106db:	53                   	push   ebx
c00106dc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00106df:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c00106e4:	83 c4 20             	add    esp,0x20
c00106e7:	85 c0                	test   eax,eax
c00106e9:	89 c1                	mov    ecx,eax
c00106eb:	0f 84 36 01 00 00    	je     c0010827 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c00106f1:	83 f8 0d             	cmp    eax,0xd
c00106f4:	0f 84 22 01 00 00    	je     c001081c <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00106fa:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00106ff:	0f 84 f0 00 00 00    	je     c00107f5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c0010705:	83 f8 0a             	cmp    eax,0xa
c0010708:	74 13                	je     c001071d <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c001070a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001070f:	74 0c                	je     c001071d <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010711:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010717:	0f 8e f6 00 00 00    	jle    c0010813 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c001071d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010721:	83 ec 0c             	sub    esp,0xc
c0010724:	8d 78 01             	lea    edi,[eax+0x1]
c0010727:	57                   	push   edi
c0010728:	e8 9e 73 ff ff       	call   c0007acb <malloc>
c001072d:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010731:	8d 56 04             	lea    edx,[esi+0x4]
c0010734:	89 14 24             	mov    DWORD PTR [esp],edx
c0010737:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001073b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001073f:	e8 87 73 ff ff       	call   c0007acb <malloc>
c0010744:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010748:	83 c4 0c             	add    esp,0xc
c001074b:	57                   	push   edi
c001074c:	6a 00                	push   0x0
c001074e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010752:	e8 99 fd fe ff       	call   c00004f0 <memset>
c0010757:	8d 74 24 30          	lea    esi,[esp+0x30]
c001075b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001075f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010763:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010765:	83 c4 0c             	add    esp,0xc
c0010768:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001076c:	52                   	push   edx
c001076d:	6a 00                	push   0x0
c001076f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010773:	e8 78 fd fe ff       	call   c00004f0 <memset>
c0010778:	8d 74 24 30          	lea    esi,[esp+0x30]
c001077c:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010780:	89 34 24             	mov    DWORD PTR [esp],esi
c0010783:	e8 f8 fd fe ff       	call   c0000580 <strlen>
c0010788:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001078c:	89 c1                	mov    ecx,eax
c001078e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010790:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010793:	83 c4 10             	add    esp,0x10
c0010796:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0010799:	40                   	inc    eax
c001079a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001079d:	85 d2                	test   edx,edx
c001079f:	75 0c                	jne    c00107ad <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c00107a1:	83 ec 0c             	sub    esp,0xc
c00107a4:	6a 08                	push   0x8
c00107a6:	e8 20 73 ff ff       	call   c0007acb <malloc>
c00107ab:	eb 0c                	jmp    c00107b9 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c00107ad:	51                   	push   ecx
c00107ae:	51                   	push   ecx
c00107af:	c1 e0 03             	shl    eax,0x3
c00107b2:	50                   	push   eax
c00107b3:	52                   	push   edx
c00107b4:	e8 fe 72 ff ff       	call   c0007ab7 <realloc>
c00107b9:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00107bc:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00107bf:	83 c4 10             	add    esp,0x10
c00107c2:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00107c5:	8d 74 24 18          	lea    esi,[esp+0x18]
c00107c9:	b9 08 00 00 00       	mov    ecx,0x8
c00107ce:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00107d2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00107d4:	50                   	push   eax
c00107d5:	31 f6                	xor    esi,esi
c00107d7:	68 00 01 00 00       	push   0x100
c00107dc:	6a 00                	push   0x0
c00107de:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00107e2:	50                   	push   eax
c00107e3:	e8 08 fd fe ff       	call   c00004f0 <memset>
c00107e8:	83 c4 10             	add    esp,0x10
c00107eb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00107f3:	eb 27                	jmp    c001081c <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00107f5:	83 f8 3d             	cmp    eax,0x3d
c00107f8:	74 1e                	je     c0010818 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c00107fa:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010800:	7f 07                	jg     c0010809 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c0010802:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c0010806:	46                   	inc    esi
c0010807:	eb 13                	jmp    c001081c <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010809:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0010811:	eb 09                	jmp    c001081c <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010813:	83 f8 3d             	cmp    eax,0x3d
c0010816:	75 ea                	jne    c0010802 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c0010818:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001081c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010821:	0f 85 99 fe ff ff    	jne    c00106c0 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0010827:	83 ec 0c             	sub    esp,0xc
c001082a:	53                   	push   ebx
c001082b:	e8 64 aa ff ff       	call   c000b294 <File::close()>
c0010830:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010832:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010835:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010838:	81 c4 3c 01 00 00    	add    esp,0x13c
c001083e:	5b                   	pop    ebx
c001083f:	5e                   	pop    esi
c0010840:	5f                   	pop    edi
c0010841:	5d                   	pop    ebp
c0010842:	c3                   	ret    
c0010843:	90                   	nop

c0010844 <EnvVarContainer::__loadSystem()>:
c0010844:	83 ec 10             	sub    esp,0x10
c0010847:	68 20 2a 02 c0       	push   0xc0022a20
c001084c:	68 0c 15 02 c0       	push   0xc002150c
c0010851:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010855:	e8 c6 fd ff ff       	call   c0010620 <EnvVarContainer::loadFrom(char const*, char const*)>
c001085a:	83 c4 1c             	add    esp,0x1c
c001085d:	c3                   	ret    

c001085e <EnvVarContainer::__loadUser()>:
c001085e:	c3                   	ret    
c001085f:	90                   	nop

c0010860 <EnvVarContainer::EnvVarContainer(Process*)>:
c0010860:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010864:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001086a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001086e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010872:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010875:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010879:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010880:	90                   	nop
c0010881:	c3                   	ret    

c0010882 <EnvVarContainer::~EnvVarContainer()>:
c0010882:	83 ec 0c             	sub    esp,0xc
c0010885:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010889:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001088c:	85 c0                	test   eax,eax
c001088e:	74 1d                	je     c00108ad <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010894:	8b 00                	mov    eax,DWORD PTR [eax]
c0010896:	85 c0                	test   eax,eax
c0010898:	74 13                	je     c00108ad <EnvVarContainer::~EnvVarContainer()+0x2b>
c001089a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001089e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00108a1:	83 ec 0c             	sub    esp,0xc
c00108a4:	50                   	push   eax
c00108a5:	e8 31 72 ff ff       	call   c0007adb <free>
c00108aa:	83 c4 10             	add    esp,0x10
c00108ad:	90                   	nop
c00108ae:	83 c4 0c             	add    esp,0xc
c00108b1:	c3                   	ret    

c00108b2 <KeGetEnv(Process*, char const*)>:
c00108b2:	53                   	push   ebx
c00108b3:	83 ec 08             	sub    esp,0x8
c00108b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108ba:	39 05 90 91 02 c0    	cmp    DWORD PTR ds:0xc0029190,eax
c00108c0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00108c4:	74 04                	je     c00108ca <KeGetEnv(Process*, char const*)+0x18>
c00108c6:	85 c0                	test   eax,eax
c00108c8:	75 0b                	jne    c00108d5 <KeGetEnv(Process*, char const*)+0x23>
c00108ca:	a1 30 89 02 c0       	mov    eax,ds:0xc0028930
c00108cf:	85 c0                	test   eax,eax
c00108d1:	75 19                	jne    c00108ec <KeGetEnv(Process*, char const*)+0x3a>
c00108d3:	eb 27                	jmp    c00108fc <KeGetEnv(Process*, char const*)+0x4a>
c00108d5:	52                   	push   edx
c00108d6:	52                   	push   edx
c00108d7:	53                   	push   ebx
c00108d8:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c00108de:	e8 3b fc ff ff       	call   c001051e <EnvVarContainer::getEnv(char const*)>
c00108e3:	83 c4 10             	add    esp,0x10
c00108e6:	85 c0                	test   eax,eax
c00108e8:	75 28                	jne    c0010912 <KeGetEnv(Process*, char const*)+0x60>
c00108ea:	eb de                	jmp    c00108ca <KeGetEnv(Process*, char const*)+0x18>
c00108ec:	52                   	push   edx
c00108ed:	52                   	push   edx
c00108ee:	53                   	push   ebx
c00108ef:	50                   	push   eax
c00108f0:	e8 29 fc ff ff       	call   c001051e <EnvVarContainer::getEnv(char const*)>
c00108f5:	83 c4 10             	add    esp,0x10
c00108f8:	85 c0                	test   eax,eax
c00108fa:	75 16                	jne    c0010912 <KeGetEnv(Process*, char const*)+0x60>
c00108fc:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010900:	a1 34 89 02 c0       	mov    eax,ds:0xc0028934
c0010905:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010909:	83 c4 08             	add    esp,0x8
c001090c:	5b                   	pop    ebx
c001090d:	e9 0c fc ff ff       	jmp    c001051e <EnvVarContainer::getEnv(char const*)>
c0010912:	83 c4 08             	add    esp,0x8
c0010915:	5b                   	pop    ebx
c0010916:	c3                   	ret    

c0010917 <KeSetEnvSystem(char const*, char const*)>:
c0010917:	83 ec 10             	sub    esp,0x10
c001091a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001091e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010922:	ff 35 34 89 02 c0    	push   DWORD PTR ds:0xc0028934
c0010928:	e8 2f fc ff ff       	call   c001055c <EnvVarContainer::setEnv(char const*, char const*)>
c001092d:	83 c4 1c             	add    esp,0x1c
c0010930:	c3                   	ret    

c0010931 <KeSetEnvUser(char const*, char const*)>:
c0010931:	a1 30 89 02 c0       	mov    eax,ds:0xc0028930
c0010936:	85 c0                	test   eax,eax
c0010938:	74 15                	je     c001094f <KeSetEnvUser(char const*, char const*)+0x1e>
c001093a:	83 ec 10             	sub    esp,0x10
c001093d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010941:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010945:	50                   	push   eax
c0010946:	e8 11 fc ff ff       	call   c001055c <EnvVarContainer::setEnv(char const*, char const*)>
c001094b:	83 c4 1c             	add    esp,0x1c
c001094e:	c3                   	ret    
c001094f:	c3                   	ret    

c0010950 <KeSetEnvProcess(Process*, char const*, char const*)>:
c0010950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010954:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c001095a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001095e:	e9 f9 fb ff ff       	jmp    c001055c <EnvVarContainer::setEnv(char const*, char const*)>

c0010963 <KeDeleteEnvSystem(char const*)>:
c0010963:	c3                   	ret    

c0010964 <KeDeleteEnvUser(char const*)>:
c0010964:	c3                   	ret    

c0010965 <KeDeleteEnvProcess(Process*, char const*)>:
c0010965:	c3                   	ret    

c0010966 <KeNewProcessEnv(Process*)>:
c0010966:	83 ec 28             	sub    esp,0x28
c0010969:	6a 0c                	push   0xc
c001096b:	e8 5b 71 ff ff       	call   c0007acb <malloc>
c0010970:	5a                   	pop    edx
c0010971:	59                   	pop    ecx
c0010972:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010976:	50                   	push   eax
c0010977:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001097b:	e8 e0 fe ff ff       	call   c0010860 <EnvVarContainer::EnvVarContainer(Process*)>
c0010980:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010984:	83 c4 2c             	add    esp,0x2c
c0010987:	c3                   	ret    

c0010988 <KeCopyProcessEnv(Process*, Process*)>:
c0010988:	57                   	push   edi
c0010989:	56                   	push   esi
c001098a:	53                   	push   ebx
c001098b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001098f:	83 ec 0c             	sub    esp,0xc
c0010992:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0010998:	6a 0c                	push   0xc
c001099a:	e8 2c 71 ff ff       	call   c0007acb <malloc>
c001099f:	89 c3                	mov    ebx,eax
c00109a1:	58                   	pop    eax
c00109a2:	5a                   	pop    edx
c00109a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109a7:	53                   	push   ebx
c00109a8:	e8 b3 fe ff ff       	call   c0010860 <EnvVarContainer::EnvVarContainer(Process*)>
c00109ad:	8b 07                	mov    eax,DWORD PTR [edi]
c00109af:	89 03                	mov    DWORD PTR [ebx],eax
c00109b1:	c1 e0 03             	shl    eax,0x3
c00109b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00109b7:	e8 0f 71 ff ff       	call   c0007acb <malloc>
c00109bc:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00109bf:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00109c1:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00109c4:	89 c7                	mov    edi,eax
c00109c6:	c1 e1 03             	shl    ecx,0x3
c00109c9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00109cb:	83 c4 10             	add    esp,0x10
c00109ce:	89 d8                	mov    eax,ebx
c00109d0:	5b                   	pop    ebx
c00109d1:	5e                   	pop    esi
c00109d2:	5f                   	pop    edi
c00109d3:	c3                   	ret    

c00109d4 <KeLoadSystemEnv()>:
c00109d4:	53                   	push   ebx
c00109d5:	83 ec 14             	sub    esp,0x14
c00109d8:	6a 0c                	push   0xc
c00109da:	e8 ec 70 ff ff       	call   c0007acb <malloc>
c00109df:	89 c3                	mov    ebx,eax
c00109e1:	58                   	pop    eax
c00109e2:	5a                   	pop    edx
c00109e3:	ff 35 90 91 02 c0    	push   DWORD PTR ds:0xc0029190
c00109e9:	53                   	push   ebx
c00109ea:	e8 71 fe ff ff       	call   c0010860 <EnvVarContainer::EnvVarContainer(Process*)>
c00109ef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109f2:	89 1d 34 89 02 c0    	mov    DWORD PTR ds:0xc0028934,ebx
c00109f8:	e8 47 fe ff ff       	call   c0010844 <EnvVarContainer::__loadSystem()>
c00109fd:	83 c4 18             	add    esp,0x18
c0010a00:	5b                   	pop    ebx
c0010a01:	c3                   	ret    

c0010a02 <KeLoadUserEnv()>:
c0010a02:	53                   	push   ebx
c0010a03:	83 ec 14             	sub    esp,0x14
c0010a06:	6a 0c                	push   0xc
c0010a08:	e8 be 70 ff ff       	call   c0007acb <malloc>
c0010a0d:	89 c3                	mov    ebx,eax
c0010a0f:	58                   	pop    eax
c0010a10:	5a                   	pop    edx
c0010a11:	ff 35 90 91 02 c0    	push   DWORD PTR ds:0xc0029190
c0010a17:	53                   	push   ebx
c0010a18:	e8 43 fe ff ff       	call   c0010860 <EnvVarContainer::EnvVarContainer(Process*)>
c0010a1d:	89 1d 30 89 02 c0    	mov    DWORD PTR ds:0xc0028930,ebx
c0010a23:	83 c4 18             	add    esp,0x18
c0010a26:	5b                   	pop    ebx
c0010a27:	c3                   	ret    

c0010a28 <KeFlushEnv()>:
c0010a28:	c3                   	ret    

c0010a29 <KeGetProcessTotalEnvCount(Process*)>:
c0010a29:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a2d:	8b 15 30 89 02 c0    	mov    edx,DWORD PTR ds:0xc0028930
c0010a33:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010a39:	a1 34 89 02 c0       	mov    eax,ds:0xc0028934
c0010a3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0010a40:	03 01                	add    eax,DWORD PTR [ecx]
c0010a42:	85 d2                	test   edx,edx
c0010a44:	74 02                	je     c0010a48 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c0010a46:	03 02                	add    eax,DWORD PTR [edx]
c0010a48:	c3                   	ret    

c0010a49 <KeGetProcessEnvPair(Process*, int)>:
c0010a49:	57                   	push   edi
c0010a4a:	56                   	push   esi
c0010a4b:	8b 35 30 89 02 c0    	mov    esi,DWORD PTR ds:0xc0028930
c0010a51:	53                   	push   ebx
c0010a52:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010a56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010a5a:	85 f6                	test   esi,esi
c0010a5c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010a60:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010a66:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010a68:	75 16                	jne    c0010a80 <KeGetProcessEnvPair(Process*, int)+0x37>
c0010a6a:	39 c2                	cmp    edx,eax
c0010a6c:	7c 16                	jl     c0010a84 <KeGetProcessEnvPair(Process*, int)+0x3b>
c0010a6e:	8b 0d 34 89 02 c0    	mov    ecx,DWORD PTR ds:0xc0028934
c0010a74:	8b 31                	mov    esi,DWORD PTR [ecx]
c0010a76:	01 c6                	add    esi,eax
c0010a78:	39 d6                	cmp    esi,edx
c0010a7a:	7e 3c                	jle    c0010ab8 <KeGetProcessEnvPair(Process*, int)+0x6f>
c0010a7c:	29 c2                	sub    edx,eax
c0010a7e:	eb 04                	jmp    c0010a84 <KeGetProcessEnvPair(Process*, int)+0x3b>
c0010a80:	39 c2                	cmp    edx,eax
c0010a82:	7d 05                	jge    c0010a89 <KeGetProcessEnvPair(Process*, int)+0x40>
c0010a84:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0010a87:	eb 20                	jmp    c0010aa9 <KeGetProcessEnvPair(Process*, int)+0x60>
c0010a89:	8b 3e                	mov    edi,DWORD PTR [esi]
c0010a8b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0010a8e:	39 d1                	cmp    ecx,edx
c0010a90:	7e 04                	jle    c0010a96 <KeGetProcessEnvPair(Process*, int)+0x4d>
c0010a92:	29 c2                	sub    edx,eax
c0010a94:	eb 10                	jmp    c0010aa6 <KeGetProcessEnvPair(Process*, int)+0x5d>
c0010a96:	8b 35 34 89 02 c0    	mov    esi,DWORD PTR ds:0xc0028934
c0010a9c:	03 0e                	add    ecx,DWORD PTR [esi]
c0010a9e:	39 d1                	cmp    ecx,edx
c0010aa0:	7e 16                	jle    c0010ab8 <KeGetProcessEnvPair(Process*, int)+0x6f>
c0010aa2:	29 c2                	sub    edx,eax
c0010aa4:	29 fa                	sub    edx,edi
c0010aa6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010aa9:	8d 14 d0             	lea    edx,[eax+edx*8]
c0010aac:	8b 02                	mov    eax,DWORD PTR [edx]
c0010aae:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0010ab1:	89 03                	mov    DWORD PTR [ebx],eax
c0010ab3:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0010ab6:	eb 1d                	jmp    c0010ad5 <KeGetProcessEnvPair(Process*, int)+0x8c>
c0010ab8:	83 ec 0c             	sub    esp,0xc
c0010abb:	68 2e 15 02 c0       	push   0xc002152e
c0010ac0:	e8 ac 00 00 00       	call   c0010b71 <KePanic(char const*)>
c0010ac5:	83 c4 10             	add    esp,0x10
c0010ac8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010ace:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010ad5:	89 d8                	mov    eax,ebx
c0010ad7:	5b                   	pop    ebx
c0010ad8:	5e                   	pop    esi
c0010ad9:	5f                   	pop    edi
c0010ada:	c2 04 00             	ret    0x4

c0010add <CPU::current()>:
c0010add:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0010ae2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010ae8:	c3                   	ret    

c0010ae9 <operator new(unsigned long)>:
c0010ae9:	e9 dd 6f ff ff       	jmp    c0007acb <malloc>

c0010aee <operator delete(void*)>:
c0010aee:	e9 f8 6f ff ff       	jmp    c0007aeb <rfree>

c0010af3 <disableIRQs()>:
c0010af3:	fa                   	cli    
c0010af4:	c3                   	ret    

c0010af5 <enableIRQs()>:
c0010af5:	fb                   	sti    
c0010af6:	c3                   	ret    

c0010af7 <lockScheduler()>:
c0010af7:	fa                   	cli    
c0010af8:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c0010afe:	c3                   	ret    

c0010aff <unlockScheduler()>:
c0010aff:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0010b04:	48                   	dec    eax
c0010b05:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0010b0a:	75 01                	jne    c0010b0d <unlockScheduler()+0xe>
c0010b0c:	fb                   	sti    
c0010b0d:	c3                   	ret    

c0010b0e <lockStuff()>:
c0010b0e:	fa                   	cli    
c0010b0f:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c0010b15:	ff 05 64 91 02 c0    	inc    DWORD PTR ds:0xc0029164
c0010b1b:	c3                   	ret    

c0010b1c <unlockStuff()>:
c0010b1c:	83 ec 0c             	sub    esp,0xc
c0010b1f:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c0010b24:	48                   	dec    eax
c0010b25:	a3 64 91 02 c0       	mov    ds:0xc0029164,eax
c0010b2a:	75 18                	jne    c0010b44 <unlockStuff()+0x28>
c0010b2c:	83 3d 60 91 02 c0 00 	cmp    DWORD PTR ds:0xc0029160,0x0
c0010b33:	74 0f                	je     c0010b44 <unlockStuff()+0x28>
c0010b35:	c7 05 60 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x0
c0010b3f:	e8 30 49 00 00       	call   c0015474 <schedule()>
c0010b44:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0010b49:	48                   	dec    eax
c0010b4a:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0010b4f:	75 01                	jne    c0010b52 <unlockStuff()+0x36>
c0010b51:	fb                   	sti    
c0010b52:	83 c4 0c             	add    esp,0xc
c0010b55:	c3                   	ret    

c0010b56 <Virt::getAKernelVAS()>:
c0010b56:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c0010b5b:	c3                   	ret    

c0010b5c <__not_memcpy>:
c0010b5c:	57                   	push   edi
c0010b5d:	56                   	push   esi
c0010b5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010b62:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010b66:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010b6a:	89 c7                	mov    edi,eax
c0010b6c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010b6e:	5e                   	pop    esi
c0010b6f:	5f                   	pop    edi
c0010b70:	c3                   	ret    

c0010b71 <KePanic(char const*)>:
c0010b71:	c6 05 38 89 02 c0 01 	mov    BYTE PTR ds:0xc0028938,0x1
c0010b78:	e9 87 68 00 00       	jmp    c0017404 <HalPanic(char const*)>

c0010b7d <KePowerThread(void*)>:
c0010b7d:	83 ec 0c             	sub    esp,0xc
c0010b80:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0010b85:	48                   	dec    eax
c0010b86:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0010b8b:	75 01                	jne    c0010b8e <KePowerThread(void*)+0x11>
c0010b8d:	fb                   	sti    
c0010b8e:	c6 05 40 89 02 c0 00 	mov    BYTE PTR ds:0xc0028940,0x0
c0010b95:	83 ec 0c             	sub    esp,0xc
c0010b98:	6a 0a                	push   0xa
c0010b9a:	e8 05 4c 00 00       	call   c00157a4 <sleep(unsigned int)>
c0010b9f:	83 c4 10             	add    esp,0x10
c0010ba2:	83 05 84 89 02 c0 0a 	add    DWORD PTR ds:0xc0028984,0xa
c0010ba9:	eb e3                	jmp    c0010b8e <KePowerThread(void*)+0x11>

c0010bab <KeChangePowerSettings(PowerSettings)>:
c0010bab:	57                   	push   edi
c0010bac:	b9 09 00 00 00       	mov    ecx,0x9
c0010bb1:	56                   	push   esi
c0010bb2:	bf 60 89 02 c0       	mov    edi,0xc0028960
c0010bb7:	fc                   	cld    
c0010bb8:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010bbc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010bbe:	5e                   	pop    esi
c0010bbf:	5f                   	pop    edi
c0010bc0:	c3                   	ret    

c0010bc1 <KeUserIOReceived()>:
c0010bc1:	c7 05 84 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028984,0x0
c0010bcb:	c3                   	ret    

c0010bcc <KeHandlePowerButton()>:
c0010bcc:	83 ec 0c             	sub    esp,0xc
c0010bcf:	a1 60 89 02 c0       	mov    eax,ds:0xc0028960
c0010bd4:	83 f8 02             	cmp    eax,0x2
c0010bd7:	75 10                	jne    c0010be9 <KeHandlePowerButton()+0x1d>
c0010bd9:	83 ec 0c             	sub    esp,0xc
c0010bdc:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0010be2:	e8 5b 65 ff ff       	call   c0007142 <Computer::shutdown()>
c0010be7:	eb 11                	jmp    c0010bfa <KeHandlePowerButton()+0x2e>
c0010be9:	48                   	dec    eax
c0010bea:	75 11                	jne    c0010bfd <KeHandlePowerButton()+0x31>
c0010bec:	83 ec 0c             	sub    esp,0xc
c0010bef:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0010bf5:	e8 78 65 ff ff       	call   c0007172 <Computer::sleep()>
c0010bfa:	83 c4 10             	add    esp,0x10
c0010bfd:	83 c4 0c             	add    esp,0xc
c0010c00:	c3                   	ret    

c0010c01 <KeHandleSleepButton()>:
c0010c01:	83 ec 0c             	sub    esp,0xc
c0010c04:	a1 64 89 02 c0       	mov    eax,ds:0xc0028964
c0010c09:	83 f8 02             	cmp    eax,0x2
c0010c0c:	75 10                	jne    c0010c1e <KeHandleSleepButton()+0x1d>
c0010c0e:	83 ec 0c             	sub    esp,0xc
c0010c11:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0010c17:	e8 26 65 ff ff       	call   c0007142 <Computer::shutdown()>
c0010c1c:	eb 11                	jmp    c0010c2f <KeHandleSleepButton()+0x2e>
c0010c1e:	48                   	dec    eax
c0010c1f:	75 11                	jne    c0010c32 <KeHandleSleepButton()+0x31>
c0010c21:	83 ec 0c             	sub    esp,0xc
c0010c24:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0010c2a:	e8 43 65 ff ff       	call   c0007172 <Computer::sleep()>
c0010c2f:	83 c4 10             	add    esp,0x10
c0010c32:	83 c4 0c             	add    esp,0xc
c0010c35:	c3                   	ret    

c0010c36 <KeSetupPowerManager()>:
c0010c36:	83 ec 0c             	sub    esp,0xc
c0010c39:	68 f0 00 00 00       	push   0xf0
c0010c3e:	6a 00                	push   0x0
c0010c40:	68 7d 0b 01 c0       	push   0xc0010b7d
c0010c45:	ff 35 90 91 02 c0    	push   DWORD PTR ds:0xc0029190
c0010c4b:	c7 05 84 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028984,0x0
c0010c55:	c6 05 40 89 02 c0 00 	mov    BYTE PTR ds:0xc0028940,0x0
c0010c5c:	e8 c7 45 00 00       	call   c0015228 <Process::createThread(void (*)(void*), void*, int)>
c0010c61:	c7 05 60 89 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0028960,0x2
c0010c6b:	c7 05 64 89 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028964,0x1
c0010c75:	c7 05 68 89 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0028968,0x3
c0010c7f:	c7 05 6c 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002896c,0x0
c0010c89:	c7 05 78 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028978,0x0
c0010c93:	c7 05 70 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028970,0x0
c0010c9d:	c7 05 7c 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002897c,0x0
c0010ca7:	c7 05 74 89 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028974,0x3c
c0010cb1:	c7 05 80 89 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028980,0x3c
c0010cbb:	83 c4 1c             	add    esp,0x1c
c0010cbe:	c3                   	ret    

c0010cbf <KeRand()>:
c0010cbf:	69 05 88 89 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0028988,0x2875
c0010cc9:	69 0d 8c 89 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002898c,0xa2e7b175
c0010cd3:	53                   	push   ebx
c0010cd4:	01 c1                	add    ecx,eax
c0010cd6:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0010cdb:	f7 25 88 89 02 c0    	mul    DWORD PTR ds:0xc0028988
c0010ce1:	01 ca                	add    edx,ecx
c0010ce3:	05 ef 04 b5 00       	add    eax,0xb504ef
c0010ce8:	a3 88 89 02 c0       	mov    ds:0xc0028988,eax
c0010ced:	83 d2 00             	adc    edx,0x0
c0010cf0:	0f b7 da             	movzx  ebx,dx
c0010cf3:	89 1d 8c 89 02 c0    	mov    DWORD PTR ds:0xc002898c,ebx
c0010cf9:	0f ac d8 0e          	shrd   eax,ebx,0xe
c0010cfd:	5b                   	pop    ebx
c0010cfe:	c3                   	ret    

c0010cff <KeSeedRand(unsigned int)>:
c0010cff:	53                   	push   ebx
c0010d00:	83 ec 08             	sub    esp,0x8
c0010d03:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d07:	e8 17 6a 00 00       	call   c0017723 <HalGetRand()>
c0010d0c:	c7 05 8c 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002898c,0x0
c0010d16:	31 d8                	xor    eax,ebx
c0010d18:	a3 88 89 02 c0       	mov    ds:0xc0028988,eax
c0010d1d:	e8 9d ff ff ff       	call   c0010cbf <KeRand()>
c0010d22:	83 c4 08             	add    esp,0x8
c0010d25:	5b                   	pop    ebx
c0010d26:	eb 97                	jmp    c0010cbf <KeRand()>

c0010d28 <KeInitRand()>:
c0010d28:	83 ec 0c             	sub    esp,0xc
c0010d2b:	e8 e8 67 00 00       	call   c0017518 <HalQueryPerformanceCounter()>
c0010d30:	0f 20 da             	mov    edx,cr3
c0010d33:	0f 22 da             	mov    cr3,edx
c0010d36:	0f 20 da             	mov    edx,cr3
c0010d39:	0f 22 da             	mov    cr3,edx
c0010d3c:	0f 20 da             	mov    edx,cr3
c0010d3f:	0f 22 da             	mov    cr3,edx
c0010d42:	0f 20 da             	mov    edx,cr3
c0010d45:	0f 22 da             	mov    cr3,edx
c0010d48:	83 ec 0c             	sub    esp,0xc
c0010d4b:	35 03 8a 95 38       	xor    eax,0x38958a03
c0010d50:	50                   	push   eax
c0010d51:	e8 a9 ff ff ff       	call   c0010cff <KeSeedRand(unsigned int)>
c0010d56:	83 c4 1c             	add    esp,0x1c
c0010d59:	c3                   	ret    
c0010d5a:	66 90                	xchg   ax,ax

c0010d5c <KeResolveCompatibilitySymbol(char*)>:
c0010d5c:	83 ec 0c             	sub    esp,0xc
c0010d5f:	83 ec 08             	sub    esp,0x8
c0010d62:	68 48 15 02 c0       	push   0xc0021548
c0010d67:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d6b:	e8 10 fa fe ff       	call   c0000780 <strcmp>
c0010d70:	83 c4 10             	add    esp,0x10
c0010d73:	85 c0                	test   eax,eax
c0010d75:	0f 94 c0             	sete   al
c0010d78:	0f b6 c0             	movzx  eax,al
c0010d7b:	85 c0                	test   eax,eax
c0010d7d:	74 0d                	je     c0010d8c <KeResolveCompatibilitySymbol(char*)+0x30>
c0010d7f:	b8 b8 5e 02 c0       	mov    eax,0xc0025eb8
c0010d84:	e9 8b 01 00 00       	jmp    c0010f14 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010d89:	8d 76 00             	lea    esi,[esi+0x0]
c0010d8c:	83 ec 08             	sub    esp,0x8
c0010d8f:	68 51 15 02 c0       	push   0xc0021551
c0010d94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d98:	e8 e3 f9 fe ff       	call   c0000780 <strcmp>
c0010d9d:	83 c4 10             	add    esp,0x10
c0010da0:	85 c0                	test   eax,eax
c0010da2:	0f 94 c0             	sete   al
c0010da5:	0f b6 c0             	movzx  eax,al
c0010da8:	85 c0                	test   eax,eax
c0010daa:	74 0c                	je     c0010db8 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0010dac:	b8 30 eb 01 c0       	mov    eax,0xc001eb30
c0010db1:	e9 5e 01 00 00       	jmp    c0010f14 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010db6:	66 90                	xchg   ax,ax
c0010db8:	83 ec 08             	sub    esp,0x8
c0010dbb:	68 5b 15 02 c0       	push   0xc002155b
c0010dc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dc4:	e8 b7 f9 fe ff       	call   c0000780 <strcmp>
c0010dc9:	83 c4 10             	add    esp,0x10
c0010dcc:	85 c0                	test   eax,eax
c0010dce:	0f 94 c0             	sete   al
c0010dd1:	0f b6 c0             	movzx  eax,al
c0010dd4:	85 c0                	test   eax,eax
c0010dd6:	74 0c                	je     c0010de4 <KeResolveCompatibilitySymbol(char*)+0x88>
c0010dd8:	b8 64 e8 01 c0       	mov    eax,0xc001e864
c0010ddd:	e9 32 01 00 00       	jmp    c0010f14 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010de2:	66 90                	xchg   ax,ax
c0010de4:	83 ec 08             	sub    esp,0x8
c0010de7:	68 64 15 02 c0       	push   0xc0021564
c0010dec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010df0:	e8 8b f9 fe ff       	call   c0000780 <strcmp>
c0010df5:	83 c4 10             	add    esp,0x10
c0010df8:	85 c0                	test   eax,eax
c0010dfa:	0f 94 c0             	sete   al
c0010dfd:	0f b6 c0             	movzx  eax,al
c0010e00:	85 c0                	test   eax,eax
c0010e02:	74 0c                	je     c0010e10 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0010e04:	b8 71 0b 01 c0       	mov    eax,0xc0010b71
c0010e09:	e9 06 01 00 00       	jmp    c0010f14 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010e0e:	66 90                	xchg   ax,ax
c0010e10:	83 ec 08             	sub    esp,0x8
c0010e13:	68 77 15 02 c0       	push   0xc0021577
c0010e18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e1c:	e8 5f f9 fe ff       	call   c0000780 <strcmp>
c0010e21:	83 c4 10             	add    esp,0x10
c0010e24:	85 c0                	test   eax,eax
c0010e26:	0f 94 c0             	sete   al
c0010e29:	0f b6 c0             	movzx  eax,al
c0010e2c:	85 c0                	test   eax,eax
c0010e2e:	74 0c                	je     c0010e3c <KeResolveCompatibilitySymbol(char*)+0xe0>
c0010e30:	b8 9b 04 01 c0       	mov    eax,0xc001049b
c0010e35:	e9 da 00 00 00       	jmp    c0010f14 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010e3a:	66 90                	xchg   ax,ax
c0010e3c:	83 ec 08             	sub    esp,0x8
c0010e3f:	68 94 15 02 c0       	push   0xc0021594
c0010e44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e48:	e8 33 f9 fe ff       	call   c0000780 <strcmp>
c0010e4d:	83 c4 10             	add    esp,0x10
c0010e50:	85 c0                	test   eax,eax
c0010e52:	0f 94 c0             	sete   al
c0010e55:	0f b6 c0             	movzx  eax,al
c0010e58:	85 c0                	test   eax,eax
c0010e5a:	74 0c                	je     c0010e68 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0010e5c:	b8 30 ec 01 c0       	mov    eax,0xc001ec30
c0010e61:	e9 ae 00 00 00       	jmp    c0010f14 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010e66:	66 90                	xchg   ax,ax
c0010e68:	83 ec 08             	sub    esp,0x8
c0010e6b:	68 9e 15 02 c0       	push   0xc002159e
c0010e70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e74:	e8 07 f9 fe ff       	call   c0000780 <strcmp>
c0010e79:	83 c4 10             	add    esp,0x10
c0010e7c:	85 c0                	test   eax,eax
c0010e7e:	0f 94 c0             	sete   al
c0010e81:	0f b6 c0             	movzx  eax,al
c0010e84:	85 c0                	test   eax,eax
c0010e86:	74 0c                	je     c0010e94 <KeResolveCompatibilitySymbol(char*)+0x138>
c0010e88:	b8 b0 e9 01 c0       	mov    eax,0xc001e9b0
c0010e8d:	e9 82 00 00 00       	jmp    c0010f14 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010e92:	66 90                	xchg   ax,ax
c0010e94:	83 ec 08             	sub    esp,0x8
c0010e97:	68 a7 15 02 c0       	push   0xc00215a7
c0010e9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ea0:	e8 db f8 fe ff       	call   c0000780 <strcmp>
c0010ea5:	83 c4 10             	add    esp,0x10
c0010ea8:	85 c0                	test   eax,eax
c0010eaa:	0f 94 c0             	sete   al
c0010ead:	0f b6 c0             	movzx  eax,al
c0010eb0:	85 c0                	test   eax,eax
c0010eb2:	74 08                	je     c0010ebc <KeResolveCompatibilitySymbol(char*)+0x160>
c0010eb4:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c0010eb9:	eb 59                	jmp    c0010f14 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010ebb:	90                   	nop
c0010ebc:	83 ec 08             	sub    esp,0x8
c0010ebf:	68 bf 15 02 c0       	push   0xc00215bf
c0010ec4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ec8:	e8 b3 f8 fe ff       	call   c0000780 <strcmp>
c0010ecd:	83 c4 10             	add    esp,0x10
c0010ed0:	85 c0                	test   eax,eax
c0010ed2:	0f 94 c0             	sete   al
c0010ed5:	0f b6 c0             	movzx  eax,al
c0010ed8:	85 c0                	test   eax,eax
c0010eda:	74 08                	je     c0010ee4 <KeResolveCompatibilitySymbol(char*)+0x188>
c0010edc:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c0010ee1:	eb 31                	jmp    c0010f14 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010ee3:	90                   	nop
c0010ee4:	83 ec 08             	sub    esp,0x8
c0010ee7:	68 cc 15 02 c0       	push   0xc00215cc
c0010eec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ef0:	e8 8b f8 fe ff       	call   c0000780 <strcmp>
c0010ef5:	83 c4 10             	add    esp,0x10
c0010ef8:	85 c0                	test   eax,eax
c0010efa:	0f 94 c0             	sete   al
c0010efd:	0f b6 c0             	movzx  eax,al
c0010f00:	85 c0                	test   eax,eax
c0010f02:	74 08                	je     c0010f0c <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0010f04:	b8 bd 5e 02 c0       	mov    eax,0xc0025ebd
c0010f09:	eb 09                	jmp    c0010f14 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010f0b:	90                   	nop
c0010f0c:	b8 00 00 00 00       	mov    eax,0x0
c0010f11:	8d 76 00             	lea    esi,[esi+0x0]
c0010f14:	83 c4 0c             	add    esp,0xc
c0010f17:	c3                   	ret    

c0010f18 <KiSigKill(int)>:
c0010f18:	83 ec 0c             	sub    esp,0xc
c0010f1b:	6a 00                	push   0x0
c0010f1d:	6a 00                	push   0x0
c0010f1f:	6a ff                	push   0xffffffff
c0010f21:	6a 01                	push   0x1
c0010f23:	e8 2a 31 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010f28:	83 c4 1c             	add    esp,0x1c
c0010f2b:	c3                   	ret    

c0010f2c <KiDefaultSignalHandlerIgnore(int)>:
c0010f2c:	c3                   	ret    

c0010f2d <KiDefaultSignalHandlerPause(int)>:
c0010f2d:	57                   	push   edi
c0010f2e:	b9 07 00 00 00       	mov    ecx,0x7
c0010f33:	56                   	push   esi
c0010f34:	be 15 16 02 c0       	mov    esi,0xc0021615
c0010f39:	83 ec 24             	sub    esp,0x24
c0010f3c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010f40:	fc                   	cld    
c0010f41:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010f43:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010f47:	50                   	push   eax
c0010f48:	6a 00                	push   0x0
c0010f4a:	6a 00                	push   0x0
c0010f4c:	6a 27                	push   0x27
c0010f4e:	e8 ff 30 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010f53:	83 c4 34             	add    esp,0x34
c0010f56:	5e                   	pop    esi
c0010f57:	5f                   	pop    edi
c0010f58:	c3                   	ret    

c0010f59 <KiDefaultSignalHandlerResume(int)>:
c0010f59:	57                   	push   edi
c0010f5a:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010f5f:	56                   	push   esi
c0010f60:	be 31 16 02 c0       	mov    esi,0xc0021631
c0010f65:	83 ec 24             	sub    esp,0x24
c0010f68:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010f6c:	fc                   	cld    
c0010f6d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f6f:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010f73:	50                   	push   eax
c0010f74:	6a 00                	push   0x0
c0010f76:	6a 00                	push   0x0
c0010f78:	6a 27                	push   0x27
c0010f7a:	e8 d3 30 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010f7f:	83 c4 34             	add    esp,0x34
c0010f82:	5e                   	pop    esi
c0010f83:	5f                   	pop    edi
c0010f84:	c3                   	ret    

c0010f85 <KeDeinitSignals(SigHandlerBlock*)>:
c0010f85:	e9 51 6b ff ff       	jmp    c0007adb <free>

c0010f8a <KeInitSignals()>:
c0010f8a:	53                   	push   ebx
c0010f8b:	83 ec 14             	sub    esp,0x14
c0010f8e:	68 c8 00 00 00       	push   0xc8
c0010f93:	e8 33 6b ff ff       	call   c0007acb <malloc>
c0010f98:	83 c4 0c             	add    esp,0xc
c0010f9b:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010fa5:	89 c3                	mov    ebx,eax
c0010fa7:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0010fb1:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0010fb7:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c0010fbb:	6a 20                	push   0x20
c0010fbd:	6a 00                	push   0x0
c0010fbf:	50                   	push   eax
c0010fc0:	e8 2b f5 fe ff       	call   c00004f0 <memset>
c0010fc5:	83 c4 0c             	add    esp,0xc
c0010fc8:	6a 44                	push   0x44
c0010fca:	6a 00                	push   0x0
c0010fcc:	53                   	push   ebx
c0010fcd:	e8 1e f5 fe ff       	call   c00004f0 <memset>
c0010fd2:	83 c4 18             	add    esp,0x18
c0010fd5:	89 d8                	mov    eax,ebx
c0010fd7:	5b                   	pop    ebx
c0010fd8:	c3                   	ret    

c0010fd9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010fd9:	53                   	push   ebx
c0010fda:	b8 01 00 00 00       	mov    eax,0x1
c0010fdf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010fe3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010fe7:	83 f9 10             	cmp    ecx,0x10
c0010fea:	7f 21                	jg     c001100d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010fec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ff0:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0010ff3:	89 03                	mov    DWORD PTR [ebx],eax
c0010ff5:	b8 01 00 00 00       	mov    eax,0x1
c0010ffa:	d3 e0                	shl    eax,cl
c0010ffc:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011000:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0011003:	31 c0                	xor    eax,eax
c0011005:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c001100d:	5b                   	pop    ebx
c001100e:	c3                   	ret    

c001100f <KeRaiseSignal(SigHandlerBlock*, int)>:
c001100f:	55                   	push   ebp
c0011010:	57                   	push   edi
c0011011:	bf 08 00 00 00       	mov    edi,0x8
c0011016:	56                   	push   esi
c0011017:	53                   	push   ebx
c0011018:	83 ec 18             	sub    esp,0x18
c001101b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001101f:	68 4e 16 02 c0       	push   0xc002164e
c0011024:	e8 d5 98 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0011029:	83 c4 10             	add    esp,0x10
c001102c:	31 c9                	xor    ecx,ecx
c001102e:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011035:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c001103b:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001103f:	99                   	cdq    
c0011040:	f7 ff                	idiv   edi
c0011042:	8d 42 24             	lea    eax,[edx+0x24]
c0011045:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011049:	85 f6                	test   esi,esi
c001104b:	75 1a                	jne    c0011067 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c001104d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011051:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0011055:	50                   	push   eax
c0011056:	50                   	push   eax
c0011057:	52                   	push   edx
c0011058:	68 5f 16 02 c0       	push   0xc002165f
c001105d:	e8 9c 98 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0011062:	83 c4 10             	add    esp,0x10
c0011065:	eb 1b                	jmp    c0011082 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0011067:	41                   	inc    ecx
c0011068:	83 f9 08             	cmp    ecx,0x8
c001106b:	75 ce                	jne    c001103b <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c001106d:	83 ec 0c             	sub    esp,0xc
c0011070:	be 01 00 00 00       	mov    esi,0x1
c0011075:	68 80 16 02 c0       	push   0xc0021680
c001107a:	e8 7f 98 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c001107f:	83 c4 10             	add    esp,0x10
c0011082:	83 c4 0c             	add    esp,0xc
c0011085:	89 f0                	mov    eax,esi
c0011087:	5b                   	pop    ebx
c0011088:	5e                   	pop    esi
c0011089:	5f                   	pop    edi
c001108a:	5d                   	pop    ebp
c001108b:	c3                   	ret    

c001108c <KeCheckSignal(SigHandlerBlock*, int*)>:
c001108c:	55                   	push   ebp
c001108d:	57                   	push   edi
c001108e:	56                   	push   esi
c001108f:	53                   	push   ebx
c0011090:	51                   	push   ecx
c0011091:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011095:	85 db                	test   ebx,ebx
c0011097:	0f 84 bc 00 00 00    	je     c0011159 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c001109d:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c00110a4:	0f 84 af 00 00 00    	je     c0011159 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00110aa:	31 c9                	xor    ecx,ecx
c00110ac:	bf 08 00 00 00       	mov    edi,0x8
c00110b1:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c00110b7:	8d 04 0e             	lea    eax,[esi+ecx*1]
c00110ba:	99                   	cdq    
c00110bb:	f7 ff                	idiv   edi
c00110bd:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c00110c4:	85 ed                	test   ebp,ebp
c00110c6:	0f 84 9e 00 00 00    	je     c001116a <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c00110cc:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c00110d2:	89 e9                	mov    ecx,ebp
c00110d4:	bf 01 00 00 00       	mov    edi,0x1
c00110d9:	d3 e7                	shl    edi,cl
c00110db:	31 c9                	xor    ecx,ecx
c00110dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00110e0:	b8 01 00 00 00       	mov    eax,0x1
c00110e5:	d3 e0                	shl    eax,cl
c00110e7:	85 04 24             	test   DWORD PTR [esp],eax
c00110ea:	74 06                	je     c00110f2 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c00110ec:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c00110f0:	75 67                	jne    c0011159 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00110f2:	41                   	inc    ecx
c00110f3:	83 f9 11             	cmp    ecx,0x11
c00110f6:	75 e8                	jne    c00110e0 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c00110f8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00110fb:	46                   	inc    esi
c00110fc:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011102:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c001110d:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011114:	09 f8                	or     eax,edi
c0011116:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c001111c:	31 c0                	xor    eax,eax
c001111e:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011126:	74 09                	je     c0011131 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011128:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001112f:	eb 06                	jmp    c0011137 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0011131:	40                   	inc    eax
c0011132:	83 f8 08             	cmp    eax,0x8
c0011135:	75 e7                	jne    c001111e <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0011137:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001113b:	83 fd 09             	cmp    ebp,0x9
c001113e:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011141:	89 2a                	mov    DWORD PTR [edx],ebp
c0011143:	75 07                	jne    c001114c <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011145:	b8 18 0f 01 c0       	mov    eax,0xc0010f18
c001114a:	eb 31                	jmp    c001117d <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c001114c:	83 f8 01             	cmp    eax,0x1
c001114f:	75 0c                	jne    c001115d <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0011151:	f7 d7                	not    edi
c0011153:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011159:	31 c0                	xor    eax,eax
c001115b:	eb 20                	jmp    c001117d <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c001115d:	85 c0                	test   eax,eax
c001115f:	75 1c                	jne    c001117d <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011161:	8b 04 ad 80 2a 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdd580]
c0011168:	eb 13                	jmp    c001117d <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c001116a:	41                   	inc    ecx
c001116b:	46                   	inc    esi
c001116c:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011172:	83 f9 08             	cmp    ecx,0x8
c0011175:	0f 85 36 ff ff ff    	jne    c00110b1 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c001117b:	eb dc                	jmp    c0011159 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c001117d:	5a                   	pop    edx
c001117e:	5b                   	pop    ebx
c001117f:	5e                   	pop    esi
c0011180:	5f                   	pop    edi
c0011181:	5d                   	pop    ebp
c0011182:	c3                   	ret    

c0011183 <KiCheckSignalZ>:
c0011183:	83 ec 10             	sub    esp,0x10
c0011186:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001118a:	50                   	push   eax
c001118b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011190:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011193:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011199:	e8 ee fe ff ff       	call   c001108c <KeCheckSignal(SigHandlerBlock*, int*)>
c001119e:	5a                   	pop    edx
c001119f:	31 d2                	xor    edx,edx
c00111a1:	59                   	pop    ecx
c00111a2:	85 c0                	test   eax,eax
c00111a4:	74 19                	je     c00111bf <KiCheckSignalZ+0x3c>
c00111a6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00111ac:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00111af:	89 02                	mov    DWORD PTR [edx],eax
c00111b1:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c00111b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00111bc:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00111bf:	89 d0                	mov    eax,edx
c00111c1:	83 c4 10             	add    esp,0x10
c00111c4:	c3                   	ret    

c00111c5 <KeCompleteSignal(SigHandlerBlock*, int)>:
c00111c5:	56                   	push   esi
c00111c6:	53                   	push   ebx
c00111c7:	bb 01 00 00 00       	mov    ebx,0x1
c00111cc:	52                   	push   edx
c00111cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00111d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00111d5:	d3 e3                	shl    ebx,cl
c00111d7:	83 f9 10             	cmp    ecx,0x10
c00111da:	7f 08                	jg     c00111e4 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c00111dc:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c00111e2:	75 10                	jne    c00111f4 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c00111e4:	83 ec 0c             	sub    esp,0xc
c00111e7:	68 91 16 02 c0       	push   0xc0021691
c00111ec:	e8 80 f9 ff ff       	call   c0010b71 <KePanic(char const*)>
c00111f1:	83 c4 10             	add    esp,0x10
c00111f4:	f7 d3                	not    ebx
c00111f6:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c00111fc:	58                   	pop    eax
c00111fd:	5b                   	pop    ebx
c00111fe:	5e                   	pop    esi
c00111ff:	c3                   	ret    

c0011200 <KiFinishSignalZ>:
c0011200:	53                   	push   ebx
c0011201:	83 ec 10             	sub    esp,0x10
c0011204:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011208:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c001120b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011210:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011213:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011219:	e8 a7 ff ff ff       	call   c00111c5 <KeCompleteSignal(SigHandlerBlock*, int)>
c001121e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011224:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001122b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011232:	83 c4 18             	add    esp,0x18
c0011235:	5b                   	pop    ebx
c0011236:	c3                   	ret    

c0011237 <SysSeekDir(regs*)>:
c0011237:	31 c0                	xor    eax,eax
c0011239:	31 d2                	xor    edx,edx
c001123b:	c3                   	ret    

c001123c <SysTellDir(regs*)>:
c001123c:	31 c0                	xor    eax,eax
c001123e:	31 d2                	xor    edx,edx
c0011240:	c3                   	ret    

c0011241 <SysVerify(regs*)>:
c0011241:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011245:	31 d2                	xor    edx,edx
c0011247:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001124a:	c3                   	ret    

c001124b <SysGetArgc(regs*)>:
c001124b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011250:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011253:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011259:	89 c2                	mov    edx,eax
c001125b:	c1 fa 1f             	sar    edx,0x1f
c001125e:	c3                   	ret    

c001125f <SysTTYName(regs*)>:
c001125f:	b8 01 00 00 00       	mov    eax,0x1
c0011264:	31 d2                	xor    edx,edx
c0011266:	c3                   	ret    

c0011267 <SysFormatDisk(regs*)>:
c0011267:	56                   	push   esi
c0011268:	53                   	push   ebx
c0011269:	83 ec 04             	sub    esp,0x4
c001126c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011270:	8b 1d b4 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb4
c0011276:	eb 2a                	jmp    c00112a2 <SysFormatDisk(regs*)+0x3b>
c0011278:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c001127b:	83 ec 0c             	sub    esp,0xc
c001127e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011281:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011283:	51                   	push   ecx
c0011284:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011287:	51                   	push   ecx
c0011288:	50                   	push   eax
c0011289:	8b 04 85 20 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7be0]
c0011290:	50                   	push   eax
c0011291:	53                   	push   ebx
c0011292:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011295:	83 c4 20             	add    esp,0x20
c0011298:	83 f8 08             	cmp    eax,0x8
c001129b:	89 c1                	mov    ecx,eax
c001129d:	75 14                	jne    c00112b3 <SysFormatDisk(regs*)+0x4c>
c001129f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00112a2:	85 db                	test   ebx,ebx
c00112a4:	75 d2                	jne    c0011278 <SysFormatDisk(regs*)+0x11>
c00112a6:	b8 03 00 00 00       	mov    eax,0x3
c00112ab:	31 d2                	xor    edx,edx
c00112ad:	83 c4 04             	add    esp,0x4
c00112b0:	5b                   	pop    ebx
c00112b1:	5e                   	pop    esi
c00112b2:	c3                   	ret    
c00112b3:	85 c0                	test   eax,eax
c00112b5:	74 13                	je     c00112ca <SysFormatDisk(regs*)+0x63>
c00112b7:	31 d2                	xor    edx,edx
c00112b9:	83 f9 09             	cmp    ecx,0x9
c00112bc:	b8 01 00 00 00       	mov    eax,0x1
c00112c1:	74 ea                	je     c00112ad <SysFormatDisk(regs*)+0x46>
c00112c3:	b8 02 00 00 00       	mov    eax,0x2
c00112c8:	eb e1                	jmp    c00112ab <SysFormatDisk(regs*)+0x44>
c00112ca:	31 c0                	xor    eax,eax
c00112cc:	eb dd                	jmp    c00112ab <SysFormatDisk(regs*)+0x44>

c00112ce <SysSetDiskVolumeLabel(regs*)>:
c00112ce:	56                   	push   esi
c00112cf:	53                   	push   ebx
c00112d0:	83 ec 04             	sub    esp,0x4
c00112d3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00112d7:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00112da:	83 f8 19             	cmp    eax,0x19
c00112dd:	77 33                	ja     c0011312 <SysSetDiskVolumeLabel(regs*)+0x44>
c00112df:	8b 0c 85 20 84 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7be0]
c00112e6:	85 c9                	test   ecx,ecx
c00112e8:	74 28                	je     c0011312 <SysSetDiskVolumeLabel(regs*)+0x44>
c00112ea:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00112ed:	85 db                	test   ebx,ebx
c00112ef:	74 21                	je     c0011312 <SysSetDiskVolumeLabel(regs*)+0x44>
c00112f1:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c00112f7:	85 d2                	test   edx,edx
c00112f9:	74 17                	je     c0011312 <SysSetDiskVolumeLabel(regs*)+0x44>
c00112fb:	8b 32                	mov    esi,DWORD PTR [edx]
c00112fd:	53                   	push   ebx
c00112fe:	50                   	push   eax
c00112ff:	51                   	push   ecx
c0011300:	52                   	push   edx
c0011301:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011304:	83 c4 10             	add    esp,0x10
c0011307:	83 c4 04             	add    esp,0x4
c001130a:	5b                   	pop    ebx
c001130b:	5e                   	pop    esi
c001130c:	89 c2                	mov    edx,eax
c001130e:	c1 fa 1f             	sar    edx,0x1f
c0011311:	c3                   	ret    
c0011312:	83 c4 04             	add    esp,0x4
c0011315:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001131a:	5b                   	pop    ebx
c001131b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011320:	5e                   	pop    esi
c0011321:	c3                   	ret    

c0011322 <SysGetDiskVolumeLabel(regs*)>:
c0011322:	57                   	push   edi
c0011323:	56                   	push   esi
c0011324:	53                   	push   ebx
c0011325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011329:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001132c:	83 fa 19             	cmp    edx,0x19
c001132f:	77 3c                	ja     c001136d <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011331:	8b 0c 95 20 84 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd7be0]
c0011338:	85 c9                	test   ecx,ecx
c001133a:	74 31                	je     c001136d <SysGetDiskVolumeLabel(regs*)+0x4b>
c001133c:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001133f:	85 db                	test   ebx,ebx
c0011341:	74 2a                	je     c001136d <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011343:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011346:	85 f6                	test   esi,esi
c0011348:	74 23                	je     c001136d <SysGetDiskVolumeLabel(regs*)+0x4b>
c001134a:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011350:	85 c0                	test   eax,eax
c0011352:	74 19                	je     c001136d <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011354:	83 ec 0c             	sub    esp,0xc
c0011357:	8b 38                	mov    edi,DWORD PTR [eax]
c0011359:	56                   	push   esi
c001135a:	53                   	push   ebx
c001135b:	52                   	push   edx
c001135c:	51                   	push   ecx
c001135d:	50                   	push   eax
c001135e:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011361:	83 c4 20             	add    esp,0x20
c0011364:	5b                   	pop    ebx
c0011365:	5e                   	pop    esi
c0011366:	89 c2                	mov    edx,eax
c0011368:	c1 fa 1f             	sar    edx,0x1f
c001136b:	5f                   	pop    edi
c001136c:	c3                   	ret    
c001136d:	5b                   	pop    ebx
c001136e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011373:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011378:	5e                   	pop    esi
c0011379:	5f                   	pop    edi
c001137a:	c3                   	ret    

c001137b <SysShutdown(regs*)>:
c001137b:	57                   	push   edi
c001137c:	56                   	push   esi
c001137d:	83 ec 04             	sub    esp,0x4
c0011380:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011384:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011387:	85 c0                	test   eax,eax
c0011389:	74 1e                	je     c00113a9 <SysShutdown(regs*)+0x2e>
c001138b:	83 f8 01             	cmp    eax,0x1
c001138e:	74 5f                	je     c00113ef <SysShutdown(regs*)+0x74>
c0011390:	83 f8 02             	cmp    eax,0x2
c0011393:	be ff ff ff ff       	mov    esi,0xffffffff
c0011398:	bf ff ff ff ff       	mov    edi,0xffffffff
c001139d:	74 32                	je     c00113d1 <SysShutdown(regs*)+0x56>
c001139f:	83 c4 04             	add    esp,0x4
c00113a2:	89 f0                	mov    eax,esi
c00113a4:	5e                   	pop    esi
c00113a5:	89 fa                	mov    edx,edi
c00113a7:	5f                   	pop    edi
c00113a8:	c3                   	ret    
c00113a9:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00113ae:	be ff ff ff ff       	mov    esi,0xffffffff
c00113b3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00113b8:	8b 10                	mov    edx,DWORD PTR [eax]
c00113ba:	6a 00                	push   0x0
c00113bc:	6a 00                	push   0x0
c00113be:	6a 00                	push   0x0
c00113c0:	50                   	push   eax
c00113c1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00113c4:	83 c4 10             	add    esp,0x10
c00113c7:	89 f0                	mov    eax,esi
c00113c9:	83 c4 04             	add    esp,0x4
c00113cc:	89 fa                	mov    edx,edi
c00113ce:	5e                   	pop    esi
c00113cf:	5f                   	pop    edi
c00113d0:	c3                   	ret    
c00113d1:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00113d6:	8b 10                	mov    edx,DWORD PTR [eax]
c00113d8:	6a 00                	push   0x0
c00113da:	6a 00                	push   0x0
c00113dc:	6a 01                	push   0x1
c00113de:	50                   	push   eax
c00113df:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00113e2:	83 c4 10             	add    esp,0x10
c00113e5:	89 f0                	mov    eax,esi
c00113e7:	83 c4 04             	add    esp,0x4
c00113ea:	89 fa                	mov    edx,edi
c00113ec:	5e                   	pop    esi
c00113ed:	5f                   	pop    edi
c00113ee:	c3                   	ret    
c00113ef:	a1 a0 84 02 c0       	mov    eax,ds:0xc00284a0
c00113f4:	85 c0                	test   eax,eax
c00113f6:	74 02                	je     c00113fa <SysShutdown(regs*)+0x7f>
c00113f8:	ff d0                	call   eax
c00113fa:	31 f6                	xor    esi,esi
c00113fc:	83 c4 04             	add    esp,0x4
c00113ff:	89 f0                	mov    eax,esi
c0011401:	31 ff                	xor    edi,edi
c0011403:	5e                   	pop    esi
c0011404:	89 fa                	mov    edx,edi
c0011406:	5f                   	pop    edi
c0011407:	c3                   	ret    

c0011408 <SysRealpath(regs*)>:
c0011408:	53                   	push   ebx
c0011409:	83 ec 08             	sub    esp,0x8
c001140c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011410:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0011413:	85 c9                	test   ecx,ecx
c0011415:	74 37                	je     c001144e <SysRealpath(regs*)+0x46>
c0011417:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001141a:	31 d2                	xor    edx,edx
c001141c:	b8 01 00 00 00       	mov    eax,0x1
c0011421:	85 db                	test   ebx,ebx
c0011423:	75 05                	jne    c001142a <SysRealpath(regs*)+0x22>
c0011425:	83 c4 08             	add    esp,0x8
c0011428:	5b                   	pop    ebx
c0011429:	c3                   	ret    
c001142a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001142f:	83 ec 04             	sub    esp,0x4
c0011432:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011435:	05 0c 01 00 00       	add    eax,0x10c
c001143a:	50                   	push   eax
c001143b:	51                   	push   ecx
c001143c:	53                   	push   ebx
c001143d:	e8 5c 9b ff ff       	call   c000af9e <Fs::standardiseFiles(char*, char const*, char const*)>
c0011442:	83 c4 10             	add    esp,0x10
c0011445:	31 c0                	xor    eax,eax
c0011447:	31 d2                	xor    edx,edx
c0011449:	83 c4 08             	add    esp,0x8
c001144c:	5b                   	pop    ebx
c001144d:	c3                   	ret    
c001144e:	b8 01 00 00 00       	mov    eax,0x1
c0011453:	31 d2                	xor    edx,edx
c0011455:	eb f2                	jmp    c0011449 <SysRealpath(regs*)+0x41>

c0011457 <SysReadDir(regs*)>:
c0011457:	53                   	push   ebx
c0011458:	83 ec 18             	sub    esp,0x18
c001145b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001145f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011462:	83 f8 02             	cmp    eax,0x2
c0011465:	76 4f                	jbe    c00114b6 <SysReadDir(regs*)+0x5f>
c0011467:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001146e:	77 52                	ja     c00114c2 <SysReadDir(regs*)+0x6b>
c0011470:	83 ec 0c             	sub    esp,0xc
c0011473:	50                   	push   eax
c0011474:	e8 16 80 ff ff       	call   c000948f <KeGetFileFromDescriptor(int)>
c0011479:	83 c4 10             	add    esp,0x10
c001147c:	85 c0                	test   eax,eax
c001147e:	74 42                	je     c00114c2 <SysReadDir(regs*)+0x6b>
c0011480:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011488:	83 ec 0c             	sub    esp,0xc
c001148b:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001148f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011491:	51                   	push   ecx
c0011492:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011495:	51                   	push   ecx
c0011496:	6a 00                	push   0x0
c0011498:	68 10 01 00 00       	push   0x110
c001149d:	50                   	push   eax
c001149e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00114a1:	83 c4 20             	add    esp,0x20
c00114a4:	85 c0                	test   eax,eax
c00114a6:	89 c1                	mov    ecx,eax
c00114a8:	74 27                	je     c00114d1 <SysReadDir(regs*)+0x7a>
c00114aa:	31 d2                	xor    edx,edx
c00114ac:	83 f9 07             	cmp    ecx,0x7
c00114af:	b8 02 00 00 00       	mov    eax,0x2
c00114b4:	75 16                	jne    c00114cc <SysReadDir(regs*)+0x75>
c00114b6:	b8 01 00 00 00       	mov    eax,0x1
c00114bb:	31 d2                	xor    edx,edx
c00114bd:	83 c4 18             	add    esp,0x18
c00114c0:	5b                   	pop    ebx
c00114c1:	c3                   	ret    
c00114c2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00114c7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114cc:	83 c4 18             	add    esp,0x18
c00114cf:	5b                   	pop    ebx
c00114d0:	c3                   	ret    
c00114d1:	31 c0                	xor    eax,eax
c00114d3:	31 d2                	xor    edx,edx
c00114d5:	eb e6                	jmp    c00114bd <SysReadDir(regs*)+0x66>

c00114d7 <SysIsATTY(regs*)>:
c00114d7:	83 ec 0c             	sub    esp,0xc
c00114da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114de:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00114e1:	83 f8 02             	cmp    eax,0x2
c00114e4:	76 07                	jbe    c00114ed <SysIsATTY(regs*)+0x16>
c00114e6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00114eb:	75 26                	jne    c0011513 <SysIsATTY(regs*)+0x3c>
c00114ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00114f2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00114f5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00114fb:	85 c0                	test   eax,eax
c00114fd:	74 24                	je     c0011523 <SysIsATTY(regs*)+0x4c>
c00114ff:	8b 10                	mov    edx,DWORD PTR [eax]
c0011501:	83 ec 0c             	sub    esp,0xc
c0011504:	50                   	push   eax
c0011505:	ff 12                	call   DWORD PTR [edx]
c0011507:	83 c4 10             	add    esp,0x10
c001150a:	31 d2                	xor    edx,edx
c001150c:	83 c4 0c             	add    esp,0xc
c001150f:	0f b6 c0             	movzx  eax,al
c0011512:	c3                   	ret    
c0011513:	83 ec 0c             	sub    esp,0xc
c0011516:	50                   	push   eax
c0011517:	e8 73 7f ff ff       	call   c000948f <KeGetFileFromDescriptor(int)>
c001151c:	83 c4 10             	add    esp,0x10
c001151f:	85 c0                	test   eax,eax
c0011521:	75 dc                	jne    c00114ff <SysIsATTY(regs*)+0x28>
c0011523:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011528:	ba ff ff ff ff       	mov    edx,0xffffffff
c001152d:	83 c4 0c             	add    esp,0xc
c0011530:	c3                   	ret    

c0011531 <SysSeek(regs*)>:
c0011531:	56                   	push   esi
c0011532:	53                   	push   ebx
c0011533:	83 ec 04             	sub    esp,0x4
c0011536:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001153a:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001153d:	8d 71 fd             	lea    esi,[ecx-0x3]
c0011540:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c0011546:	77 33                	ja     c001157b <SysSeek(regs*)+0x4a>
c0011548:	83 ec 0c             	sub    esp,0xc
c001154b:	51                   	push   ecx
c001154c:	e8 3e 7f ff ff       	call   c000948f <KeGetFileFromDescriptor(int)>
c0011551:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011554:	83 c4 0c             	add    esp,0xc
c0011557:	31 db                	xor    ebx,ebx
c0011559:	53                   	push   ebx
c001155a:	51                   	push   ecx
c001155b:	50                   	push   eax
c001155c:	e8 93 9d ff ff       	call   c000b2f4 <File::seek(unsigned long long)>
c0011561:	83 c4 10             	add    esp,0x10
c0011564:	85 c0                	test   eax,eax
c0011566:	0f 95 c0             	setne  al
c0011569:	31 d2                	xor    edx,edx
c001156b:	0f b6 c0             	movzx  eax,al
c001156e:	f7 d8                	neg    eax
c0011570:	83 d2 00             	adc    edx,0x0
c0011573:	83 c4 04             	add    esp,0x4
c0011576:	5b                   	pop    ebx
c0011577:	f7 da                	neg    edx
c0011579:	5e                   	pop    esi
c001157a:	c3                   	ret    
c001157b:	83 c4 04             	add    esp,0x4
c001157e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011583:	5b                   	pop    ebx
c0011584:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011589:	5e                   	pop    esi
c001158a:	c3                   	ret    

c001158b <SysTell(regs*)>:
c001158b:	53                   	push   ebx
c001158c:	83 ec 08             	sub    esp,0x8
c001158f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011593:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011596:	83 f8 02             	cmp    eax,0x2
c0011599:	76 4e                	jbe    c00115e9 <SysTell(regs*)+0x5e>
c001159b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00115a0:	76 19                	jbe    c00115bb <SysTell(regs*)+0x30>
c00115a2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00115a5:	31 d2                	xor    edx,edx
c00115a7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00115ad:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00115b4:	83 c4 08             	add    esp,0x8
c00115b7:	31 c0                	xor    eax,eax
c00115b9:	5b                   	pop    ebx
c00115ba:	c3                   	ret    
c00115bb:	83 ec 0c             	sub    esp,0xc
c00115be:	50                   	push   eax
c00115bf:	e8 cb 7e ff ff       	call   c000948f <KeGetFileFromDescriptor(int)>
c00115c4:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00115c7:	5a                   	pop    edx
c00115c8:	59                   	pop    ecx
c00115c9:	53                   	push   ebx
c00115ca:	50                   	push   eax
c00115cb:	e8 d0 9d ff ff       	call   c000b3a0 <File::tell(unsigned long long*)>
c00115d0:	83 c4 10             	add    esp,0x10
c00115d3:	85 c0                	test   eax,eax
c00115d5:	0f 95 c0             	setne  al
c00115d8:	31 d2                	xor    edx,edx
c00115da:	0f b6 c0             	movzx  eax,al
c00115dd:	f7 d8                	neg    eax
c00115df:	83 d2 00             	adc    edx,0x0
c00115e2:	83 c4 08             	add    esp,0x8
c00115e5:	5b                   	pop    ebx
c00115e6:	f7 da                	neg    edx
c00115e8:	c3                   	ret    
c00115e9:	83 c4 08             	add    esp,0x8
c00115ec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00115f1:	5b                   	pop    ebx
c00115f2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00115f7:	c3                   	ret    

c00115f8 <SysSize(regs*)>:
c00115f8:	53                   	push   ebx
c00115f9:	83 ec 18             	sub    esp,0x18
c00115fc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011600:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011603:	83 f8 02             	cmp    eax,0x2
c0011606:	76 54                	jbe    c001165c <SysSize(regs*)+0x64>
c0011608:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001160d:	76 19                	jbe    c0011628 <SysSize(regs*)+0x30>
c001160f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011612:	31 d2                	xor    edx,edx
c0011614:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001161a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011621:	83 c4 18             	add    esp,0x18
c0011624:	31 c0                	xor    eax,eax
c0011626:	5b                   	pop    ebx
c0011627:	c3                   	ret    
c0011628:	83 ec 0c             	sub    esp,0xc
c001162b:	50                   	push   eax
c001162c:	e8 5e 7e ff ff       	call   c000948f <KeGetFileFromDescriptor(int)>
c0011631:	83 c4 0c             	add    esp,0xc
c0011634:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011638:	52                   	push   edx
c0011639:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001163c:	52                   	push   edx
c001163d:	50                   	push   eax
c001163e:	e8 f5 9e ff ff       	call   c000b538 <File::stat(unsigned long long*, bool*)>
c0011643:	83 c4 10             	add    esp,0x10
c0011646:	85 c0                	test   eax,eax
c0011648:	0f 95 c0             	setne  al
c001164b:	31 d2                	xor    edx,edx
c001164d:	0f b6 c0             	movzx  eax,al
c0011650:	f7 d8                	neg    eax
c0011652:	83 d2 00             	adc    edx,0x0
c0011655:	83 c4 18             	add    esp,0x18
c0011658:	5b                   	pop    ebx
c0011659:	f7 da                	neg    edx
c001165b:	c3                   	ret    
c001165c:	83 c4 18             	add    esp,0x18
c001165f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011664:	5b                   	pop    ebx
c0011665:	ba ff ff ff ff       	mov    edx,0xffffffff
c001166a:	c3                   	ret    

c001166b <SysSizeFromFilename(regs*)>:
c001166b:	57                   	push   edi
c001166c:	56                   	push   esi
c001166d:	53                   	push   ebx
c001166e:	83 ec 10             	sub    esp,0x10
c0011671:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011675:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0011678:	83 fb 02             	cmp    ebx,0x2
c001167b:	0f 86 83 00 00 00    	jbe    c0011704 <SysSizeFromFilename(regs*)+0x99>
c0011681:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011687:	76 1b                	jbe    c00116a4 <SysSizeFromFilename(regs*)+0x39>
c0011689:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001168c:	31 d2                	xor    edx,edx
c001168e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011694:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001169b:	83 c4 10             	add    esp,0x10
c001169e:	31 c0                	xor    eax,eax
c00116a0:	5b                   	pop    ebx
c00116a1:	5e                   	pop    esi
c00116a2:	5f                   	pop    edi
c00116a3:	c3                   	ret    
c00116a4:	83 ec 0c             	sub    esp,0xc
c00116a7:	68 14 01 00 00       	push   0x114
c00116ac:	e8 1a 64 ff ff       	call   c0007acb <malloc>
c00116b1:	83 c4 0c             	add    esp,0xc
c00116b4:	89 c7                	mov    edi,eax
c00116b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116bb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00116be:	50                   	push   eax
c00116bf:	53                   	push   ebx
c00116c0:	57                   	push   edi
c00116c1:	e8 b4 9a ff ff       	call   c000b17a <File::File(char const*, Process*)>
c00116c6:	83 c4 0c             	add    esp,0xc
c00116c9:	8d 44 24 13          	lea    eax,[esp+0x13]
c00116cd:	50                   	push   eax
c00116ce:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c00116d1:	52                   	push   edx
c00116d2:	57                   	push   edi
c00116d3:	e8 60 9e ff ff       	call   c000b538 <File::stat(unsigned long long*, bool*)>
c00116d8:	83 c4 10             	add    esp,0x10
c00116db:	85 ff                	test   edi,edi
c00116dd:	89 c3                	mov    ebx,eax
c00116df:	74 0c                	je     c00116ed <SysSizeFromFilename(regs*)+0x82>
c00116e1:	8b 07                	mov    eax,DWORD PTR [edi]
c00116e3:	83 ec 0c             	sub    esp,0xc
c00116e6:	57                   	push   edi
c00116e7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00116ea:	83 c4 10             	add    esp,0x10
c00116ed:	31 c0                	xor    eax,eax
c00116ef:	85 db                	test   ebx,ebx
c00116f1:	0f 95 c0             	setne  al
c00116f4:	31 d2                	xor    edx,edx
c00116f6:	f7 d8                	neg    eax
c00116f8:	83 d2 00             	adc    edx,0x0
c00116fb:	83 c4 10             	add    esp,0x10
c00116fe:	5b                   	pop    ebx
c00116ff:	f7 da                	neg    edx
c0011701:	5e                   	pop    esi
c0011702:	5f                   	pop    edi
c0011703:	c3                   	ret    
c0011704:	83 c4 10             	add    esp,0x10
c0011707:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001170c:	5b                   	pop    ebx
c001170d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011712:	5e                   	pop    esi
c0011713:	5f                   	pop    edi
c0011714:	c3                   	ret    

c0011715 <SysClose(regs*)>:
c0011715:	53                   	push   ebx
c0011716:	83 ec 08             	sub    esp,0x8
c0011719:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001171d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011720:	83 f8 02             	cmp    eax,0x2
c0011723:	76 41                	jbe    c0011766 <SysClose(regs*)+0x51>
c0011725:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001172b:	83 fa 01             	cmp    edx,0x1
c001172e:	76 2d                	jbe    c001175d <SysClose(regs*)+0x48>
c0011730:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011735:	77 2f                	ja     c0011766 <SysClose(regs*)+0x51>
c0011737:	83 ec 0c             	sub    esp,0xc
c001173a:	50                   	push   eax
c001173b:	e8 4f 7d ff ff       	call   c000948f <KeGetFileFromDescriptor(int)>
c0011740:	89 04 24             	mov    DWORD PTR [esp],eax
c0011743:	89 c3                	mov    ebx,eax
c0011745:	e8 4a 9b ff ff       	call   c000b294 <File::close()>
c001174a:	83 c4 10             	add    esp,0x10
c001174d:	85 db                	test   ebx,ebx
c001174f:	74 0c                	je     c001175d <SysClose(regs*)+0x48>
c0011751:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011753:	83 ec 0c             	sub    esp,0xc
c0011756:	53                   	push   ebx
c0011757:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001175a:	83 c4 10             	add    esp,0x10
c001175d:	83 c4 08             	add    esp,0x8
c0011760:	31 c0                	xor    eax,eax
c0011762:	5b                   	pop    ebx
c0011763:	31 d2                	xor    edx,edx
c0011765:	c3                   	ret    
c0011766:	83 c4 08             	add    esp,0x8
c0011769:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001176e:	5b                   	pop    ebx
c001176f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011774:	c3                   	ret    

c0011775 <SysOpenDir(regs*)>:
c0011775:	56                   	push   esi
c0011776:	53                   	push   ebx
c0011777:	83 ec 04             	sub    esp,0x4
c001177a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001177e:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011781:	85 c9                	test   ecx,ecx
c0011783:	74 5d                	je     c00117e2 <SysOpenDir(regs*)+0x6d>
c0011785:	83 ec 0c             	sub    esp,0xc
c0011788:	68 14 01 00 00       	push   0x114
c001178d:	e8 39 63 ff ff       	call   c0007acb <malloc>
c0011792:	83 c4 0c             	add    esp,0xc
c0011795:	89 c6                	mov    esi,eax
c0011797:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001179c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001179f:	50                   	push   eax
c00117a0:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00117a3:	52                   	push   edx
c00117a4:	56                   	push   esi
c00117a5:	e8 4c 9f ff ff       	call   c000b6f6 <Directory::Directory(char const*, Process*)>
c00117aa:	83 c4 10             	add    esp,0x10
c00117ad:	85 f6                	test   esi,esi
c00117af:	74 31                	je     c00117e2 <SysOpenDir(regs*)+0x6d>
c00117b1:	83 ec 0c             	sub    esp,0xc
c00117b4:	56                   	push   esi
c00117b5:	e8 f8 9f ff ff       	call   c000b7b2 <Directory::open()>
c00117ba:	83 c4 10             	add    esp,0x10
c00117bd:	85 c0                	test   eax,eax
c00117bf:	75 21                	jne    c00117e2 <SysOpenDir(regs*)+0x6d>
c00117c1:	83 ec 0c             	sub    esp,0xc
c00117c4:	56                   	push   esi
c00117c5:	e8 c8 79 ff ff       	call   c0009192 <UnixFile::getFileDescriptor()>
c00117ca:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00117cd:	83 c4 10             	add    esp,0x10
c00117d0:	89 02                	mov    DWORD PTR [edx],eax
c00117d2:	c1 f8 1f             	sar    eax,0x1f
c00117d5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00117d8:	83 c4 04             	add    esp,0x4
c00117db:	31 c0                	xor    eax,eax
c00117dd:	5b                   	pop    ebx
c00117de:	31 d2                	xor    edx,edx
c00117e0:	5e                   	pop    esi
c00117e1:	c3                   	ret    
c00117e2:	83 c4 04             	add    esp,0x4
c00117e5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00117ea:	5b                   	pop    ebx
c00117eb:	ba ff ff ff ff       	mov    edx,0xffffffff
c00117f0:	5e                   	pop    esi
c00117f1:	c3                   	ret    

c00117f2 <SysMakeDir(regs*)>:
c00117f2:	56                   	push   esi
c00117f3:	53                   	push   ebx
c00117f4:	83 ec 10             	sub    esp,0x10
c00117f7:	68 14 01 00 00       	push   0x114
c00117fc:	e8 ca 62 ff ff       	call   c0007acb <malloc>
c0011801:	83 c4 0c             	add    esp,0xc
c0011804:	89 c3                	mov    ebx,eax
c0011806:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001180b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001180e:	50                   	push   eax
c001180f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011813:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0011816:	52                   	push   edx
c0011817:	53                   	push   ebx
c0011818:	e8 d9 9e ff ff       	call   c000b6f6 <Directory::Directory(char const*, Process*)>
c001181d:	83 c4 10             	add    esp,0x10
c0011820:	85 db                	test   ebx,ebx
c0011822:	74 2c                	je     c0011850 <SysMakeDir(regs*)+0x5e>
c0011824:	83 ec 0c             	sub    esp,0xc
c0011827:	53                   	push   ebx
c0011828:	e8 65 a1 ff ff       	call   c000b992 <Directory::create()>
c001182d:	89 c6                	mov    esi,eax
c001182f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011831:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011834:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011837:	83 c4 10             	add    esp,0x10
c001183a:	31 c0                	xor    eax,eax
c001183c:	85 f6                	test   esi,esi
c001183e:	0f 95 c0             	setne  al
c0011841:	31 d2                	xor    edx,edx
c0011843:	f7 d8                	neg    eax
c0011845:	83 d2 00             	adc    edx,0x0
c0011848:	83 c4 04             	add    esp,0x4
c001184b:	5b                   	pop    ebx
c001184c:	f7 da                	neg    edx
c001184e:	5e                   	pop    esi
c001184f:	c3                   	ret    
c0011850:	83 c4 04             	add    esp,0x4
c0011853:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011858:	5b                   	pop    ebx
c0011859:	ba ff ff ff ff       	mov    edx,0xffffffff
c001185e:	5e                   	pop    esi
c001185f:	c3                   	ret    

c0011860 <SysCloseDir(regs*)>:
c0011860:	53                   	push   ebx
c0011861:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011866:	83 ec 08             	sub    esp,0x8
c0011869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001186d:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011870:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011875:	8d 59 fd             	lea    ebx,[ecx-0x3]
c0011878:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c001187e:	77 2a                	ja     c00118aa <SysCloseDir(regs*)+0x4a>
c0011880:	83 ec 0c             	sub    esp,0xc
c0011883:	51                   	push   ecx
c0011884:	e8 06 7c ff ff       	call   c000948f <KeGetFileFromDescriptor(int)>
c0011889:	89 04 24             	mov    DWORD PTR [esp],eax
c001188c:	89 c3                	mov    ebx,eax
c001188e:	e8 7b 9f ff ff       	call   c000b80e <Directory::close()>
c0011893:	83 c4 10             	add    esp,0x10
c0011896:	85 db                	test   ebx,ebx
c0011898:	74 0c                	je     c00118a6 <SysCloseDir(regs*)+0x46>
c001189a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001189c:	83 ec 0c             	sub    esp,0xc
c001189f:	53                   	push   ebx
c00118a0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00118a3:	83 c4 10             	add    esp,0x10
c00118a6:	31 c0                	xor    eax,eax
c00118a8:	31 d2                	xor    edx,edx
c00118aa:	83 c4 08             	add    esp,0x8
c00118ad:	5b                   	pop    ebx
c00118ae:	c3                   	ret    

c00118af <SysWait(regs*)>:
c00118af:	83 ec 10             	sub    esp,0x10
c00118b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00118b6:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00118b9:	52                   	push   edx
c00118ba:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00118bd:	51                   	push   ecx
c00118be:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00118c1:	50                   	push   eax
c00118c2:	e8 e5 3d 00 00       	call   c00156ac <waitTask(int, int*, int)>
c00118c7:	83 c4 1c             	add    esp,0x1c
c00118ca:	89 c2                	mov    edx,eax
c00118cc:	c1 fa 1f             	sar    edx,0x1f
c00118cf:	c3                   	ret    

c00118d0 <SysNotImpl(regs*)>:
c00118d0:	83 ec 18             	sub    esp,0x18
c00118d3:	68 a2 16 02 c0       	push   0xc00216a2
c00118d8:	e8 94 f2 ff ff       	call   c0010b71 <KePanic(char const*)>
c00118dd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00118e2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00118e7:	83 c4 1c             	add    esp,0x1c
c00118ea:	c3                   	ret    

c00118eb <SysPanic(regs*)>:
c00118eb:	83 ec 18             	sub    esp,0x18
c00118ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118f2:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00118f5:	50                   	push   eax
c00118f6:	e8 76 f2 ff ff       	call   c0010b71 <KePanic(char const*)>
c00118fb:	b8 01 00 00 00       	mov    eax,0x1
c0011900:	31 d2                	xor    edx,edx
c0011902:	83 c4 1c             	add    esp,0x1c
c0011905:	c3                   	ret    

c0011906 <SysRmdir(regs*)>:
c0011906:	56                   	push   esi
c0011907:	53                   	push   ebx
c0011908:	83 ec 10             	sub    esp,0x10
c001190b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001190f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011912:	68 14 01 00 00       	push   0x114
c0011917:	e8 af 61 ff ff       	call   c0007acb <malloc>
c001191c:	83 c4 0c             	add    esp,0xc
c001191f:	89 c3                	mov    ebx,eax
c0011921:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011926:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011929:	50                   	push   eax
c001192a:	56                   	push   esi
c001192b:	53                   	push   ebx
c001192c:	e8 49 98 ff ff       	call   c000b17a <File::File(char const*, Process*)>
c0011931:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011934:	e8 cb 9a ff ff       	call   c000b404 <File::unlink()>
c0011939:	83 c4 10             	add    esp,0x10
c001193c:	85 db                	test   ebx,ebx
c001193e:	89 c6                	mov    esi,eax
c0011940:	74 0c                	je     c001194e <SysRmdir(regs*)+0x48>
c0011942:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011944:	83 ec 0c             	sub    esp,0xc
c0011947:	53                   	push   ebx
c0011948:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001194b:	83 c4 10             	add    esp,0x10
c001194e:	31 c0                	xor    eax,eax
c0011950:	85 f6                	test   esi,esi
c0011952:	0f 95 c0             	setne  al
c0011955:	31 d2                	xor    edx,edx
c0011957:	f7 d8                	neg    eax
c0011959:	83 d2 00             	adc    edx,0x0
c001195c:	83 c4 04             	add    esp,0x4
c001195f:	5b                   	pop    ebx
c0011960:	f7 da                	neg    edx
c0011962:	5e                   	pop    esi
c0011963:	c3                   	ret    

c0011964 <SysUnlink(regs*)>:
c0011964:	56                   	push   esi
c0011965:	53                   	push   ebx
c0011966:	83 ec 10             	sub    esp,0x10
c0011969:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001196d:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011970:	68 14 01 00 00       	push   0x114
c0011975:	e8 51 61 ff ff       	call   c0007acb <malloc>
c001197a:	83 c4 0c             	add    esp,0xc
c001197d:	89 c3                	mov    ebx,eax
c001197f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011984:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011987:	50                   	push   eax
c0011988:	56                   	push   esi
c0011989:	53                   	push   ebx
c001198a:	e8 eb 97 ff ff       	call   c000b17a <File::File(char const*, Process*)>
c001198f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011992:	e8 6d 9a ff ff       	call   c000b404 <File::unlink()>
c0011997:	83 c4 10             	add    esp,0x10
c001199a:	85 db                	test   ebx,ebx
c001199c:	89 c6                	mov    esi,eax
c001199e:	74 0c                	je     c00119ac <SysUnlink(regs*)+0x48>
c00119a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00119a2:	83 ec 0c             	sub    esp,0xc
c00119a5:	53                   	push   ebx
c00119a6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00119a9:	83 c4 10             	add    esp,0x10
c00119ac:	31 c0                	xor    eax,eax
c00119ae:	85 f6                	test   esi,esi
c00119b0:	0f 95 c0             	setne  al
c00119b3:	31 d2                	xor    edx,edx
c00119b5:	f7 d8                	neg    eax
c00119b7:	83 d2 00             	adc    edx,0x0
c00119ba:	83 c4 04             	add    esp,0x4
c00119bd:	5b                   	pop    ebx
c00119be:	f7 da                	neg    edx
c00119c0:	5e                   	pop    esi
c00119c1:	c3                   	ret    

c00119c2 <SysGetArgv(regs*)>:
c00119c2:	83 ec 0c             	sub    esp,0xc
c00119c5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00119c9:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00119cc:	85 c0                	test   eax,eax
c00119ce:	78 2c                	js     c00119fc <SysGetArgv(regs*)+0x3a>
c00119d0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00119d6:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00119d9:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00119df:	7d 1b                	jge    c00119fc <SysGetArgv(regs*)+0x3a>
c00119e1:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00119e8:	85 c0                	test   eax,eax
c00119ea:	74 18                	je     c0011a04 <SysGetArgv(regs*)+0x42>
c00119ec:	83 ec 08             	sub    esp,0x8
c00119ef:	50                   	push   eax
c00119f0:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00119f3:	50                   	push   eax
c00119f4:	e8 57 ec fe ff       	call   c0000650 <strcpy>
c00119f9:	83 c4 10             	add    esp,0x10
c00119fc:	31 c0                	xor    eax,eax
c00119fe:	31 d2                	xor    edx,edx
c0011a00:	83 c4 0c             	add    esp,0xc
c0011a03:	c3                   	ret    
c0011a04:	b8 01 00 00 00       	mov    eax,0x1
c0011a09:	31 d2                	xor    edx,edx
c0011a0b:	83 c4 0c             	add    esp,0xc
c0011a0e:	c3                   	ret    

c0011a0f <SysUSleep(regs*)>:
c0011a0f:	83 ec 1c             	sub    esp,0x1c
c0011a12:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011a16:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011a19:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011a1c:	6a 00                	push   0x0
c0011a1e:	6a 64                	push   0x64
c0011a20:	52                   	push   edx
c0011a21:	50                   	push   eax
c0011a22:	e8 09 d1 00 00       	call   c001eb30 <__udivdi3>
c0011a27:	83 c4 14             	add    esp,0x14
c0011a2a:	50                   	push   eax
c0011a2b:	e8 60 3d 00 00       	call   c0015790 <milliTenthSleep(unsigned int)>
c0011a30:	31 c0                	xor    eax,eax
c0011a32:	31 d2                	xor    edx,edx
c0011a34:	83 c4 1c             	add    esp,0x1c
c0011a37:	c3                   	ret    

c0011a38 <SysSpawn(regs*)>:
c0011a38:	56                   	push   esi
c0011a39:	53                   	push   ebx
c0011a3a:	83 ec 04             	sub    esp,0x4
c0011a3d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011a41:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011a44:	85 f6                	test   esi,esi
c0011a46:	75 0a                	jne    c0011a52 <SysSpawn(regs*)+0x1a>
c0011a48:	83 c4 04             	add    esp,0x4
c0011a4b:	31 c0                	xor    eax,eax
c0011a4d:	5b                   	pop    ebx
c0011a4e:	31 d2                	xor    edx,edx
c0011a50:	5e                   	pop    esi
c0011a51:	c3                   	ret    
c0011a52:	83 ec 0c             	sub    esp,0xc
c0011a55:	68 24 07 00 00       	push   0x724
c0011a5a:	e8 6c 60 ff ff       	call   c0007acb <malloc>
c0011a5f:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011a62:	83 c4 10             	add    esp,0x10
c0011a65:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011a68:	89 c6                	mov    esi,eax
c0011a6a:	31 c0                	xor    eax,eax
c0011a6c:	85 c9                	test   ecx,ecx
c0011a6e:	75 08                	jne    c0011a78 <SysSpawn(regs*)+0x40>
c0011a70:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a75:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a78:	52                   	push   edx
c0011a79:	50                   	push   eax
c0011a7a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011a7d:	50                   	push   eax
c0011a7e:	56                   	push   esi
c0011a7f:	e8 74 33 00 00       	call   c0014df8 <Process::Process(char const*, Process*, char**)>
c0011a84:	83 c4 10             	add    esp,0x10
c0011a87:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0011a8e:	75 b8                	jne    c0011a48 <SysSpawn(regs*)+0x10>
c0011a90:	83 ec 0c             	sub    esp,0xc
c0011a93:	56                   	push   esi
c0011a94:	e8 97 38 00 00       	call   c0015330 <Process::createUserThread()>
c0011a99:	8b 06                	mov    eax,DWORD PTR [esi]
c0011a9b:	83 c4 10             	add    esp,0x10
c0011a9e:	83 c4 04             	add    esp,0x4
c0011aa1:	5b                   	pop    ebx
c0011aa2:	89 c2                	mov    edx,eax
c0011aa4:	c1 fa 1f             	sar    edx,0x1f
c0011aa7:	5e                   	pop    esi
c0011aa8:	c3                   	ret    

c0011aa9 <SysGetEnv(regs*)>:
c0011aa9:	57                   	push   edi
c0011aaa:	56                   	push   esi
c0011aab:	53                   	push   ebx
c0011aac:	83 ec 1c             	sub    esp,0x1c
c0011aaf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ab4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011ab8:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0011abb:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011abe:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011ac1:	51                   	push   ecx
c0011ac2:	e8 62 ef ff ff       	call   c0010a29 <KeGetProcessTotalEnvCount(Process*)>
c0011ac7:	83 c4 10             	add    esp,0x10
c0011aca:	39 c7                	cmp    edi,eax
c0011acc:	7c 12                	jl     c0011ae0 <SysGetEnv(regs*)+0x37>
c0011ace:	31 c0                	xor    eax,eax
c0011ad0:	31 d2                	xor    edx,edx
c0011ad2:	85 f6                	test   esi,esi
c0011ad4:	74 03                	je     c0011ad9 <SysGetEnv(regs*)+0x30>
c0011ad6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011ad9:	83 c4 10             	add    esp,0x10
c0011adc:	5b                   	pop    ebx
c0011add:	5e                   	pop    esi
c0011ade:	5f                   	pop    edi
c0011adf:	c3                   	ret    
c0011ae0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011ae4:	83 ec 04             	sub    esp,0x4
c0011ae7:	57                   	push   edi
c0011ae8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011aee:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0011af1:	57                   	push   edi
c0011af2:	50                   	push   eax
c0011af3:	e8 51 ef ff ff       	call   c0010a49 <KeGetProcessEnvPair(Process*, int)>
c0011af8:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011afb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011aff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011b03:	83 c4 0c             	add    esp,0xc
c0011b06:	85 d2                	test   edx,edx
c0011b08:	75 23                	jne    c0011b2d <SysGetEnv(regs*)+0x84>
c0011b0a:	83 ec 0c             	sub    esp,0xc
c0011b0d:	50                   	push   eax
c0011b0e:	e8 6d ea fe ff       	call   c0000580 <strlen>
c0011b13:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011b16:	89 c3                	mov    ebx,eax
c0011b18:	e8 63 ea fe ff       	call   c0000580 <strlen>
c0011b1d:	83 c4 10             	add    esp,0x10
c0011b20:	31 d2                	xor    edx,edx
c0011b22:	83 c4 10             	add    esp,0x10
c0011b25:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011b29:	5b                   	pop    ebx
c0011b2a:	5e                   	pop    esi
c0011b2b:	5f                   	pop    edi
c0011b2c:	c3                   	ret    
c0011b2d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011b30:	83 ec 08             	sub    esp,0x8
c0011b33:	50                   	push   eax
c0011b34:	56                   	push   esi
c0011b35:	e8 16 eb fe ff       	call   c0000650 <strcpy>
c0011b3a:	58                   	pop    eax
c0011b3b:	5a                   	pop    edx
c0011b3c:	68 bc 16 02 c0       	push   0xc00216bc
c0011b41:	56                   	push   esi
c0011b42:	e8 29 ed fe ff       	call   c0000870 <strcat>
c0011b47:	59                   	pop    ecx
c0011b48:	5b                   	pop    ebx
c0011b49:	57                   	push   edi
c0011b4a:	56                   	push   esi
c0011b4b:	e8 20 ed fe ff       	call   c0000870 <strcat>
c0011b50:	83 c4 10             	add    esp,0x10
c0011b53:	31 c0                	xor    eax,eax
c0011b55:	83 c4 10             	add    esp,0x10
c0011b58:	31 d2                	xor    edx,edx
c0011b5a:	5b                   	pop    ebx
c0011b5b:	5e                   	pop    esi
c0011b5c:	5f                   	pop    edi
c0011b5d:	c3                   	ret    

c0011b5e <SysSetFatAttrib(regs*)>:
c0011b5e:	57                   	push   edi
c0011b5f:	56                   	push   esi
c0011b60:	53                   	push   ebx
c0011b61:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011b65:	83 ec 0c             	sub    esp,0xc
c0011b68:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011b6b:	68 14 01 00 00       	push   0x114
c0011b70:	e8 56 5f ff ff       	call   c0007acb <malloc>
c0011b75:	83 c4 0c             	add    esp,0xc
c0011b78:	89 c3                	mov    ebx,eax
c0011b7a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b7f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b82:	50                   	push   eax
c0011b83:	57                   	push   edi
c0011b84:	53                   	push   ebx
c0011b85:	e8 f0 95 ff ff       	call   c000b17a <File::File(char const*, Process*)>
c0011b8a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011b8d:	83 c4 0c             	add    esp,0xc
c0011b90:	0f b6 d4             	movzx  edx,ah
c0011b93:	0f b6 c0             	movzx  eax,al
c0011b96:	52                   	push   edx
c0011b97:	50                   	push   eax
c0011b98:	53                   	push   ebx
c0011b99:	e8 00 99 ff ff       	call   c000b49e <File::chfatattr(unsigned char, unsigned char)>
c0011b9e:	83 c4 10             	add    esp,0x10
c0011ba1:	85 db                	test   ebx,ebx
c0011ba3:	89 c6                	mov    esi,eax
c0011ba5:	74 0c                	je     c0011bb3 <SysSetFatAttrib(regs*)+0x55>
c0011ba7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011ba9:	83 ec 0c             	sub    esp,0xc
c0011bac:	53                   	push   ebx
c0011bad:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011bb0:	83 c4 10             	add    esp,0x10
c0011bb3:	5b                   	pop    ebx
c0011bb4:	31 c0                	xor    eax,eax
c0011bb6:	85 f6                	test   esi,esi
c0011bb8:	0f 95 c0             	setne  al
c0011bbb:	31 d2                	xor    edx,edx
c0011bbd:	5e                   	pop    esi
c0011bbe:	f7 d8                	neg    eax
c0011bc0:	83 d2 00             	adc    edx,0x0
c0011bc3:	f7 da                	neg    edx
c0011bc5:	5f                   	pop    edi
c0011bc6:	c3                   	ret    

c0011bc7 <SysPipe(regs*)>:
c0011bc7:	57                   	push   edi
c0011bc8:	56                   	push   esi
c0011bc9:	53                   	push   ebx
c0011bca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011bce:	83 ec 0c             	sub    esp,0xc
c0011bd1:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011bd4:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011bd7:	6a 20                	push   0x20
c0011bd9:	e8 ed 5e ff ff       	call   c0007acb <malloc>
c0011bde:	89 c3                	mov    ebx,eax
c0011be0:	58                   	pop    eax
c0011be1:	5a                   	pop    edx
c0011be2:	68 00 50 00 00       	push   0x5000
c0011be7:	53                   	push   ebx
c0011be8:	e8 43 68 ff ff       	call   c0008430 <Pipe::Pipe(int)>
c0011bed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011bf0:	e8 9d 75 ff ff       	call   c0009192 <UnixFile::getFileDescriptor()>
c0011bf5:	89 07                	mov    DWORD PTR [edi],eax
c0011bf7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011bfa:	e8 93 75 ff ff       	call   c0009192 <UnixFile::getFileDescriptor()>
c0011bff:	83 c4 10             	add    esp,0x10
c0011c02:	31 d2                	xor    edx,edx
c0011c04:	89 06                	mov    DWORD PTR [esi],eax
c0011c06:	31 c0                	xor    eax,eax
c0011c08:	5b                   	pop    ebx
c0011c09:	5e                   	pop    esi
c0011c0a:	5f                   	pop    edi
c0011c0b:	c3                   	ret    

c0011c0c <SysGetUnixTime(regs*)>:
c0011c0c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011c11:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011c17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011c1b:	e9 b6 9f ff ff       	jmp    c000bbd6 <Clock::timeInSecondsLocal()>

c0011c20 <string_ends_with(char const*, char const*)>:
c0011c20:	57                   	push   edi
c0011c21:	56                   	push   esi
c0011c22:	53                   	push   ebx
c0011c23:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011c27:	83 ec 0c             	sub    esp,0xc
c0011c2a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011c2e:	53                   	push   ebx
c0011c2f:	e8 4c e9 fe ff       	call   c0000580 <strlen>
c0011c34:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011c37:	89 c6                	mov    esi,eax
c0011c39:	e8 42 e9 fe ff       	call   c0000580 <strlen>
c0011c3e:	83 c4 10             	add    esp,0x10
c0011c41:	31 d2                	xor    edx,edx
c0011c43:	39 c6                	cmp    esi,eax
c0011c45:	7d 06                	jge    c0011c4d <string_ends_with(char const*, char const*)+0x2d>
c0011c47:	5b                   	pop    ebx
c0011c48:	89 d0                	mov    eax,edx
c0011c4a:	5e                   	pop    esi
c0011c4b:	5f                   	pop    edi
c0011c4c:	c3                   	ret    
c0011c4d:	83 ec 08             	sub    esp,0x8
c0011c50:	29 c6                	sub    esi,eax
c0011c52:	57                   	push   edi
c0011c53:	01 f3                	add    ebx,esi
c0011c55:	53                   	push   ebx
c0011c56:	e8 25 eb fe ff       	call   c0000780 <strcmp>
c0011c5b:	83 c4 10             	add    esp,0x10
c0011c5e:	31 d2                	xor    edx,edx
c0011c60:	5b                   	pop    ebx
c0011c61:	5e                   	pop    esi
c0011c62:	85 c0                	test   eax,eax
c0011c64:	5f                   	pop    edi
c0011c65:	0f 94 c2             	sete   dl
c0011c68:	89 d0                	mov    eax,edx
c0011c6a:	c3                   	ret    

c0011c6b <SysOpen(regs*)>:
c0011c6b:	56                   	push   esi
c0011c6c:	53                   	push   ebx
c0011c6d:	81 ec 04 01 00 00    	sub    esp,0x104
c0011c73:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011c7a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011c7d:	85 c0                	test   eax,eax
c0011c7f:	0f 84 c5 01 00 00    	je     c0011e4a <SysOpen(regs*)+0x1df>
c0011c85:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011c88:	85 c0                	test   eax,eax
c0011c8a:	0f 84 ba 01 00 00    	je     c0011e4a <SysOpen(regs*)+0x1df>
c0011c90:	83 ec 04             	sub    esp,0x4
c0011c93:	68 be 16 02 c0       	push   0xc00216be
c0011c98:	50                   	push   eax
c0011c99:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011c9d:	56                   	push   esi
c0011c9e:	e8 fb 92 ff ff       	call   c000af9e <Fs::standardiseFiles(char*, char const*, char const*)>
c0011ca3:	89 34 24             	mov    DWORD PTR [esp],esi
c0011ca6:	e8 d5 e8 fe ff       	call   c0000580 <strlen>
c0011cab:	83 c4 10             	add    esp,0x10
c0011cae:	83 e8 01             	sub    eax,0x1
c0011cb1:	74 29                	je     c0011cdc <SysOpen(regs*)+0x71>
c0011cb3:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0011cb7:	83 fa 2e             	cmp    edx,0x2e
c0011cba:	74 1c                	je     c0011cd8 <SysOpen(regs*)+0x6d>
c0011cbc:	83 fa 3a             	cmp    edx,0x3a
c0011cbf:	74 17                	je     c0011cd8 <SysOpen(regs*)+0x6d>
c0011cc1:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011cc5:	83 e8 01             	sub    eax,0x1
c0011cc8:	74 12                	je     c0011cdc <SysOpen(regs*)+0x71>
c0011cca:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0011cce:	83 fa 3a             	cmp    edx,0x3a
c0011cd1:	74 05                	je     c0011cd8 <SysOpen(regs*)+0x6d>
c0011cd3:	83 fa 2e             	cmp    edx,0x2e
c0011cd6:	75 e9                	jne    c0011cc1 <SysOpen(regs*)+0x56>
c0011cd8:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011cdc:	83 ec 08             	sub    esp,0x8
c0011cdf:	68 c2 16 02 c0       	push   0xc00216c2
c0011ce4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011ce7:	50                   	push   eax
c0011ce8:	e8 33 ff ff ff       	call   c0011c20 <string_ends_with(char const*, char const*)>
c0011ced:	83 c4 10             	add    esp,0x10
c0011cf0:	85 c0                	test   eax,eax
c0011cf2:	74 1d                	je     c0011d11 <SysOpen(regs*)+0xa6>
c0011cf4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011cf7:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011cfd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011d04:	81 c4 04 01 00 00    	add    esp,0x104
c0011d0a:	31 c0                	xor    eax,eax
c0011d0c:	5b                   	pop    ebx
c0011d0d:	31 d2                	xor    edx,edx
c0011d0f:	5e                   	pop    esi
c0011d10:	c3                   	ret    
c0011d11:	83 ec 08             	sub    esp,0x8
c0011d14:	68 c7 16 02 c0       	push   0xc00216c7
c0011d19:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d1c:	50                   	push   eax
c0011d1d:	e8 fe fe ff ff       	call   c0011c20 <string_ends_with(char const*, char const*)>
c0011d22:	83 c4 10             	add    esp,0x10
c0011d25:	85 c0                	test   eax,eax
c0011d27:	75 cb                	jne    c0011cf4 <SysOpen(regs*)+0x89>
c0011d29:	83 ec 08             	sub    esp,0x8
c0011d2c:	68 c3 16 02 c0       	push   0xc00216c3
c0011d31:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d34:	50                   	push   eax
c0011d35:	e8 46 ea fe ff       	call   c0000780 <strcmp>
c0011d3a:	83 c4 10             	add    esp,0x10
c0011d3d:	85 c0                	test   eax,eax
c0011d3f:	74 b3                	je     c0011cf4 <SysOpen(regs*)+0x89>
c0011d41:	83 ec 08             	sub    esp,0x8
c0011d44:	68 c2 16 02 c0       	push   0xc00216c2
c0011d49:	56                   	push   esi
c0011d4a:	e8 d1 fe ff ff       	call   c0011c20 <string_ends_with(char const*, char const*)>
c0011d4f:	83 c4 10             	add    esp,0x10
c0011d52:	85 c0                	test   eax,eax
c0011d54:	75 9e                	jne    c0011cf4 <SysOpen(regs*)+0x89>
c0011d56:	83 ec 08             	sub    esp,0x8
c0011d59:	68 cc 16 02 c0       	push   0xc00216cc
c0011d5e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d61:	50                   	push   eax
c0011d62:	e8 b9 fe ff ff       	call   c0011c20 <string_ends_with(char const*, char const*)>
c0011d67:	83 c4 10             	add    esp,0x10
c0011d6a:	85 c0                	test   eax,eax
c0011d6c:	0f 85 eb 00 00 00    	jne    c0011e5d <SysOpen(regs*)+0x1f2>
c0011d72:	83 ec 08             	sub    esp,0x8
c0011d75:	68 d1 16 02 c0       	push   0xc00216d1
c0011d7a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d7d:	50                   	push   eax
c0011d7e:	e8 9d fe ff ff       	call   c0011c20 <string_ends_with(char const*, char const*)>
c0011d83:	83 c4 10             	add    esp,0x10
c0011d86:	85 c0                	test   eax,eax
c0011d88:	0f 85 cf 00 00 00    	jne    c0011e5d <SysOpen(regs*)+0x1f2>
c0011d8e:	83 ec 08             	sub    esp,0x8
c0011d91:	68 cd 16 02 c0       	push   0xc00216cd
c0011d96:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011d99:	51                   	push   ecx
c0011d9a:	e8 e1 e9 fe ff       	call   c0000780 <strcmp>
c0011d9f:	83 c4 10             	add    esp,0x10
c0011da2:	85 c0                	test   eax,eax
c0011da4:	0f 84 b3 00 00 00    	je     c0011e5d <SysOpen(regs*)+0x1f2>
c0011daa:	83 ec 08             	sub    esp,0x8
c0011dad:	68 cc 16 02 c0       	push   0xc00216cc
c0011db2:	56                   	push   esi
c0011db3:	e8 68 fe ff ff       	call   c0011c20 <string_ends_with(char const*, char const*)>
c0011db8:	83 c4 10             	add    esp,0x10
c0011dbb:	85 c0                	test   eax,eax
c0011dbd:	0f 85 9a 00 00 00    	jne    c0011e5d <SysOpen(regs*)+0x1f2>
c0011dc3:	83 ec 0c             	sub    esp,0xc
c0011dc6:	68 14 01 00 00       	push   0x114
c0011dcb:	e8 fb 5c ff ff       	call   c0007acb <malloc>
c0011dd0:	83 c4 0c             	add    esp,0xc
c0011dd3:	89 c6                	mov    esi,eax
c0011dd5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011dda:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ddd:	50                   	push   eax
c0011dde:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011de1:	52                   	push   edx
c0011de2:	56                   	push   esi
c0011de3:	e8 92 93 ff ff       	call   c000b17a <File::File(char const*, Process*)>
c0011de8:	83 c4 10             	add    esp,0x10
c0011deb:	85 f6                	test   esi,esi
c0011ded:	74 5b                	je     c0011e4a <SysOpen(regs*)+0x1df>
c0011def:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011df2:	0f b6 c2             	movzx  eax,dl
c0011df5:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011df8:	89 d0                	mov    eax,edx
c0011dfa:	83 e0 01             	and    eax,0x1
c0011dfd:	f6 c2 02             	test   dl,0x2
c0011e00:	74 03                	je     c0011e05 <SysOpen(regs*)+0x19a>
c0011e02:	83 c8 02             	or     eax,0x2
c0011e05:	f6 c2 04             	test   dl,0x4
c0011e08:	74 03                	je     c0011e0d <SysOpen(regs*)+0x1a2>
c0011e0a:	83 c8 04             	or     eax,0x4
c0011e0d:	f6 c2 08             	test   dl,0x8
c0011e10:	74 03                	je     c0011e15 <SysOpen(regs*)+0x1aa>
c0011e12:	83 c8 0a             	or     eax,0xa
c0011e15:	80 e2 10             	and    dl,0x10
c0011e18:	74 03                	je     c0011e1d <SysOpen(regs*)+0x1b2>
c0011e1a:	83 c8 12             	or     eax,0x12
c0011e1d:	83 ec 08             	sub    esp,0x8
c0011e20:	50                   	push   eax
c0011e21:	56                   	push   esi
c0011e22:	e8 0f 94 ff ff       	call   c000b236 <File::open(FileOpenMode)>
c0011e27:	83 c4 10             	add    esp,0x10
c0011e2a:	85 c0                	test   eax,eax
c0011e2c:	75 1c                	jne    c0011e4a <SysOpen(regs*)+0x1df>
c0011e2e:	83 ec 0c             	sub    esp,0xc
c0011e31:	56                   	push   esi
c0011e32:	e8 5b 73 ff ff       	call   c0009192 <UnixFile::getFileDescriptor()>
c0011e37:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011e3a:	83 c4 10             	add    esp,0x10
c0011e3d:	89 02                	mov    DWORD PTR [edx],eax
c0011e3f:	c1 f8 1f             	sar    eax,0x1f
c0011e42:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011e45:	e9 ba fe ff ff       	jmp    c0011d04 <SysOpen(regs*)+0x99>
c0011e4a:	81 c4 04 01 00 00    	add    esp,0x104
c0011e50:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e55:	5b                   	pop    ebx
c0011e56:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e5b:	5e                   	pop    esi
c0011e5c:	c3                   	ret    
c0011e5d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011e60:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011e66:	e9 92 fe ff ff       	jmp    c0011cfd <SysOpen(regs*)+0x92>

c0011e6b <KeSystemCall(regs*, void*)>:
c0011e6b:	53                   	push   ebx
c0011e6c:	83 ec 08             	sub    esp,0x8
c0011e6f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011e73:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011e76:	83 f8 3b             	cmp    eax,0x3b
c0011e79:	77 16                	ja     c0011e91 <KeSystemCall(regs*, void*)+0x26>
c0011e7b:	8b 14 85 e0 2a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd520]
c0011e82:	85 d2                	test   edx,edx
c0011e84:	74 0b                	je     c0011e91 <KeSystemCall(regs*, void*)+0x26>
c0011e86:	83 ec 0c             	sub    esp,0xc
c0011e89:	53                   	push   ebx
c0011e8a:	ff d2                	call   edx
c0011e8c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011e8f:	eb 0d                	jmp    c0011e9e <KeSystemCall(regs*, void*)+0x33>
c0011e91:	52                   	push   edx
c0011e92:	52                   	push   edx
c0011e93:	50                   	push   eax
c0011e94:	68 d6 16 02 c0       	push   0xc00216d6
c0011e99:	e8 60 8a ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0011e9e:	83 c4 10             	add    esp,0x10
c0011ea1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011ea6:	83 c4 08             	add    esp,0x8
c0011ea9:	31 d2                	xor    edx,edx
c0011eab:	5b                   	pop    ebx
c0011eac:	c3                   	ret    
c0011ead:	66 90                	xchg   ax,ax
c0011eaf:	90                   	nop

c0011eb0 <KeSwitchEndian16(unsigned short)>:
c0011eb0:	83 ec 04             	sub    esp,0x4
c0011eb3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011eb7:	66 89 04 24          	mov    WORD PTR [esp],ax
c0011ebb:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011ebf:	c1 f8 08             	sar    eax,0x8
c0011ec2:	89 c2                	mov    edx,eax
c0011ec4:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011ec8:	c1 e0 08             	shl    eax,0x8
c0011ecb:	09 d0                	or     eax,edx
c0011ecd:	83 c4 04             	add    esp,0x4
c0011ed0:	c3                   	ret    
c0011ed1:	8d 76 00             	lea    esi,[esi+0x0]

c0011ed4 <KeSwitchEndian32(unsigned int)>:
c0011ed4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ed8:	c1 e8 18             	shr    eax,0x18
c0011edb:	89 c2                	mov    edx,eax
c0011edd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ee1:	c1 e0 08             	shl    eax,0x8
c0011ee4:	25 00 00 ff 00       	and    eax,0xff0000
c0011ee9:	09 c2                	or     edx,eax
c0011eeb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011eef:	c1 e8 08             	shr    eax,0x8
c0011ef2:	25 00 ff 00 00       	and    eax,0xff00
c0011ef7:	09 c2                	or     edx,eax
c0011ef9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011efd:	c1 e0 18             	shl    eax,0x18
c0011f00:	09 d0                	or     eax,edx
c0011f02:	c3                   	ret    
c0011f03:	90                   	nop

c0011f04 <EthernetCRC32(unsigned char*, int)>:
c0011f04:	83 ec 10             	sub    esp,0x10
c0011f07:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011f0c:	75 0a                	jne    c0011f18 <EthernetCRC32(unsigned char*, int)+0x14>
c0011f0e:	b8 00 00 00 00       	mov    eax,0x0
c0011f13:	e9 8c 00 00 00       	jmp    c0011fa4 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011f18:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0011f1d:	7f 09                	jg     c0011f28 <EthernetCRC32(unsigned char*, int)+0x24>
c0011f1f:	b8 00 00 00 00       	mov    eax,0x0
c0011f24:	eb 7e                	jmp    c0011fa4 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011f26:	66 90                	xchg   ax,ax
c0011f28:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0011f30:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011f38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011f3c:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0011f40:	7d 5a                	jge    c0011f9c <EthernetCRC32(unsigned char*, int)+0x98>
c0011f42:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011f46:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011f4a:	01 d0                	add    eax,edx
c0011f4c:	8a 00                	mov    al,BYTE PTR [eax]
c0011f4e:	0f b6 c0             	movzx  eax,al
c0011f51:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0011f55:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011f5d:	8d 76 00             	lea    esi,[esi+0x0]
c0011f60:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0011f65:	7f 2d                	jg     c0011f94 <EthernetCRC32(unsigned char*, int)+0x90>
c0011f67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f6b:	83 e0 01             	and    eax,0x1
c0011f6e:	74 10                	je     c0011f80 <EthernetCRC32(unsigned char*, int)+0x7c>
c0011f70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f74:	d1 e8                	shr    eax,1
c0011f76:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0011f7b:	eb 0b                	jmp    c0011f88 <EthernetCRC32(unsigned char*, int)+0x84>
c0011f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0011f80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f84:	d1 e8                	shr    eax,1
c0011f86:	66 90                	xchg   ax,ax
c0011f88:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011f8c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0011f91:	eb cd                	jmp    c0011f60 <EthernetCRC32(unsigned char*, int)+0x5c>
c0011f93:	90                   	nop
c0011f94:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0011f99:	eb 9d                	jmp    c0011f38 <EthernetCRC32(unsigned char*, int)+0x34>
c0011f9b:	90                   	nop
c0011f9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011fa0:	f7 d0                	not    eax
c0011fa2:	66 90                	xchg   ax,ax
c0011fa4:	83 c4 10             	add    esp,0x10
c0011fa7:	c3                   	ret    

c0011fa8 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0011fa8:	83 ec 2c             	sub    esp,0x2c
c0011fab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011faf:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011fb4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011fb8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011fc0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011fc3:	0f b7 c0             	movzx  eax,ax
c0011fc6:	3d 06 08 00 00       	cmp    eax,0x806
c0011fcb:	75 13                	jne    c0011fe0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0011fcd:	83 ec 0c             	sub    esp,0xc
c0011fd0:	68 ea 16 02 c0       	push   0xc00216ea
c0011fd5:	e8 24 89 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0011fda:	83 c4 10             	add    esp,0x10
c0011fdd:	eb 25                	jmp    c0012004 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0011fdf:	90                   	nop
c0011fe0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011fe4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011fe7:	0f b7 c0             	movzx  eax,ax
c0011fea:	3d 00 08 00 00       	cmp    eax,0x800
c0011fef:	75 13                	jne    c0012004 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0011ff1:	83 ec 0c             	sub    esp,0xc
c0011ff4:	68 00 17 02 c0       	push   0xc0021700
c0011ff9:	e8 00 89 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0011ffe:	83 c4 10             	add    esp,0x10
c0012001:	8d 76 00             	lea    esi,[esi+0x0]
c0012004:	90                   	nop
c0012005:	83 c4 2c             	add    esp,0x2c
c0012008:	c3                   	ret    

c0012009 <CmOpen(char const*)>:
c0012009:	57                   	push   edi
c001200a:	56                   	push   esi
c001200b:	53                   	push   ebx
c001200c:	83 ec 1c             	sub    esp,0x1c
c001200f:	6a 30                	push   0x30
c0012011:	e8 b5 5a ff ff       	call   c0007acb <malloc>
c0012016:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001201d:	89 c3                	mov    ebx,eax
c001201f:	e8 a7 5a ff ff       	call   c0007acb <malloc>
c0012024:	83 c4 0c             	add    esp,0xc
c0012027:	ff 35 90 91 02 c0    	push   DWORD PTR ds:0xc0029190
c001202d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012031:	89 c6                	mov    esi,eax
c0012033:	50                   	push   eax
c0012034:	e8 41 91 ff ff       	call   c000b17a <File::File(char const*, Process*)>
c0012039:	83 c4 0c             	add    esp,0xc
c001203c:	89 33                	mov    DWORD PTR [ebx],esi
c001203e:	8d 44 24 07          	lea    eax,[esp+0x7]
c0012042:	50                   	push   eax
c0012043:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012047:	50                   	push   eax
c0012048:	56                   	push   esi
c0012049:	e8 ea 94 ff ff       	call   c000b538 <File::stat(unsigned long long*, bool*)>
c001204e:	5a                   	pop    edx
c001204f:	59                   	pop    ecx
c0012050:	6a 01                	push   0x1
c0012052:	ff 33                	push   DWORD PTR [ebx]
c0012054:	e8 dd 91 ff ff       	call   c000b236 <File::open(FileOpenMode)>
c0012059:	5e                   	pop    esi
c001205a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001205e:	e8 68 5a ff ff       	call   c0007acb <malloc>
c0012063:	5a                   	pop    edx
c0012064:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012068:	89 c7                	mov    edi,eax
c001206a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001206c:	8b 10                	mov    edx,DWORD PTR [eax]
c001206e:	56                   	push   esi
c001206f:	57                   	push   edi
c0012070:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012074:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012078:	50                   	push   eax
c0012079:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001207c:	83 c4 14             	add    esp,0x14
c001207f:	ff 33                	push   DWORD PTR [ebx]
c0012081:	e8 0e 92 ff ff       	call   c000b294 <File::close()>
c0012086:	59                   	pop    ecx
c0012087:	58                   	pop    eax
c0012088:	6a 13                	push   0x13
c001208a:	ff 33                	push   DWORD PTR [ebx]
c001208c:	e8 a5 91 ff ff       	call   c000b236 <File::open(FileOpenMode)>
c0012091:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012093:	8b 10                	mov    edx,DWORD PTR [eax]
c0012095:	89 34 24             	mov    DWORD PTR [esp],esi
c0012098:	57                   	push   edi
c0012099:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001209d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00120a1:	50                   	push   eax
c00120a2:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00120a5:	83 c4 14             	add    esp,0x14
c00120a8:	57                   	push   edi
c00120a9:	e8 2d 5a ff ff       	call   c0007adb <free>
c00120ae:	83 c4 10             	add    esp,0x10
c00120b1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00120b4:	75 10                	jne    c00120c6 <CmOpen(char const*)+0xbd>
c00120b6:	83 ec 0c             	sub    esp,0xc
c00120b9:	68 15 17 02 c0       	push   0xc0021715
c00120be:	e8 ae ea ff ff       	call   c0010b71 <KePanic(char const*)>
c00120c3:	83 c4 10             	add    esp,0x10
c00120c6:	50                   	push   eax
c00120c7:	6a 00                	push   0x0
c00120c9:	6a 00                	push   0x0
c00120cb:	ff 33                	push   DWORD PTR [ebx]
c00120cd:	8d 7b 05             	lea    edi,[ebx+0x5]
c00120d0:	e8 1f 92 ff ff       	call   c000b2f4 <File::seek(unsigned long long)>
c00120d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00120d7:	8b 10                	mov    edx,DWORD PTR [eax]
c00120d9:	89 34 24             	mov    DWORD PTR [esp],esi
c00120dc:	57                   	push   edi
c00120dd:	6a 00                	push   0x0
c00120df:	6a 2b                	push   0x2b
c00120e1:	50                   	push   eax
c00120e2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00120e5:	83 c4 1c             	add    esp,0x1c
c00120e8:	6a 00                	push   0x0
c00120ea:	6a 00                	push   0x0
c00120ec:	ff 33                	push   DWORD PTR [ebx]
c00120ee:	e8 01 92 ff ff       	call   c000b2f4 <File::seek(unsigned long long)>
c00120f3:	83 c4 0c             	add    esp,0xc
c00120f6:	6a 08                	push   0x8
c00120f8:	68 26 17 02 c0       	push   0xc0021726
c00120fd:	57                   	push   edi
c00120fe:	e8 7d e2 fe ff       	call   c0000380 <memcmp>
c0012103:	83 c4 10             	add    esp,0x10
c0012106:	85 c0                	test   eax,eax
c0012108:	74 10                	je     c001211a <CmOpen(char const*)+0x111>
c001210a:	83 ec 0c             	sub    esp,0xc
c001210d:	68 2f 17 02 c0       	push   0xc002172f
c0012112:	e8 5a ea ff ff       	call   c0010b71 <KePanic(char const*)>
c0012117:	83 c4 10             	add    esp,0x10
c001211a:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c001211e:	83 c4 10             	add    esp,0x10
c0012121:	89 d8                	mov    eax,ebx
c0012123:	5b                   	pop    ebx
c0012124:	5e                   	pop    esi
c0012125:	5f                   	pop    edi
c0012126:	c3                   	ret    

c0012127 <CmClose(Reghive_Tag*)>:
c0012127:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001212b:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c001212f:	74 0b                	je     c001213c <CmClose(Reghive_Tag*)+0x15>
c0012131:	8b 00                	mov    eax,DWORD PTR [eax]
c0012133:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012137:	e9 58 91 ff ff       	jmp    c000b294 <File::close()>
c001213c:	c3                   	ret    

c001213d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c001213d:	53                   	push   ebx
c001213e:	83 ec 18             	sub    esp,0x18
c0012141:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012145:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012149:	74 29                	je     c0012174 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c001214b:	50                   	push   eax
c001214c:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012151:	99                   	cdq    
c0012152:	52                   	push   edx
c0012153:	50                   	push   eax
c0012154:	ff 33                	push   DWORD PTR [ebx]
c0012156:	e8 99 91 ff ff       	call   c000b2f4 <File::seek(unsigned long long)>
c001215b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001215d:	5a                   	pop    edx
c001215e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012162:	8b 10                	mov    edx,DWORD PTR [eax]
c0012164:	51                   	push   ecx
c0012165:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012169:	6a 00                	push   0x0
c001216b:	6a 2b                	push   0x2b
c001216d:	50                   	push   eax
c001216e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012171:	83 c4 20             	add    esp,0x20
c0012174:	83 c4 18             	add    esp,0x18
c0012177:	5b                   	pop    ebx
c0012178:	c3                   	ret    

c0012179 <CmGetString(Reghive_Tag*, int, char*)>:
c0012179:	55                   	push   ebp
c001217a:	57                   	push   edi
c001217b:	56                   	push   esi
c001217c:	53                   	push   ebx
c001217d:	31 db                	xor    ebx,ebx
c001217f:	83 ec 70             	sub    esp,0x70
c0012182:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0012186:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c001218d:	50                   	push   eax
c001218e:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012195:	55                   	push   ebp
c0012196:	e8 a2 ff ff ff       	call   c001213d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001219b:	83 c4 10             	add    esp,0x10
c001219e:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c00121a3:	c1 e0 08             	shl    eax,0x8
c00121a6:	89 c2                	mov    edx,eax
c00121a8:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c00121ad:	09 d0                	or     eax,edx
c00121af:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c00121b4:	c1 e0 08             	shl    eax,0x8
c00121b7:	09 d0                	or     eax,edx
c00121b9:	74 25                	je     c00121e0 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c00121bb:	52                   	push   edx
c00121bc:	8d 54 24 39          	lea    edx,[esp+0x39]
c00121c0:	52                   	push   edx
c00121c1:	6b fb 0d             	imul   edi,ebx,0xd
c00121c4:	50                   	push   eax
c00121c5:	55                   	push   ebp
c00121c6:	e8 72 ff ff ff       	call   c001213d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00121cb:	8d 74 24 49          	lea    esi,[esp+0x49]
c00121cf:	b9 27 00 00 00       	mov    ecx,0x27
c00121d4:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c00121db:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00121dd:	83 c4 10             	add    esp,0x10
c00121e0:	83 c3 03             	add    ebx,0x3
c00121e3:	83 fb 15             	cmp    ebx,0x15
c00121e6:	75 b6                	jne    c001219e <CmGetString(Reghive_Tag*, int, char*)+0x25>
c00121e8:	83 c4 6c             	add    esp,0x6c
c00121eb:	5b                   	pop    ebx
c00121ec:	5e                   	pop    esi
c00121ed:	5f                   	pop    edi
c00121ee:	5d                   	pop    ebp
c00121ef:	c3                   	ret    

c00121f0 <CmEnterDirectory(Reghive_Tag*, int)>:
c00121f0:	83 ec 40             	sub    esp,0x40
c00121f3:	8d 44 24 09          	lea    eax,[esp+0x9]
c00121f7:	50                   	push   eax
c00121f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00121fc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012200:	e8 38 ff ff ff       	call   c001213d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012205:	83 c4 10             	add    esp,0x10
c0012208:	83 c8 ff             	or     eax,0xffffffff
c001220b:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012210:	75 19                	jne    c001222b <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0012212:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012217:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c001221c:	c1 e0 08             	shl    eax,0x8
c001221f:	09 c2                	or     edx,eax
c0012221:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0012226:	c1 e0 10             	shl    eax,0x10
c0012229:	09 d0                	or     eax,edx
c001222b:	83 c4 3c             	add    esp,0x3c
c001222e:	c3                   	ret    

c001222f <CmGetNext(Reghive_Tag*, int)>:
c001222f:	83 ec 40             	sub    esp,0x40
c0012232:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012236:	50                   	push   eax
c0012237:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001223b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001223f:	e8 f9 fe ff ff       	call   c001213d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012244:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012249:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c001224e:	c1 e0 08             	shl    eax,0x8
c0012251:	09 c2                	or     edx,eax
c0012253:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012258:	83 c4 4c             	add    esp,0x4c
c001225b:	c1 e0 10             	shl    eax,0x10
c001225e:	09 d0                	or     eax,edx
c0012260:	c3                   	ret    

c0012261 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0012261:	53                   	push   ebx
c0012262:	83 ec 18             	sub    esp,0x18
c0012265:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012269:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c001226d:	74 29                	je     c0012298 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c001226f:	50                   	push   eax
c0012270:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012275:	99                   	cdq    
c0012276:	52                   	push   edx
c0012277:	50                   	push   eax
c0012278:	ff 33                	push   DWORD PTR [ebx]
c001227a:	e8 75 90 ff ff       	call   c000b2f4 <File::seek(unsigned long long)>
c001227f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012281:	5a                   	pop    edx
c0012282:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012286:	8b 10                	mov    edx,DWORD PTR [eax]
c0012288:	51                   	push   ecx
c0012289:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001228d:	6a 00                	push   0x0
c001228f:	6a 2b                	push   0x2b
c0012291:	50                   	push   eax
c0012292:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012295:	83 c4 20             	add    esp,0x20
c0012298:	83 c4 18             	add    esp,0x18
c001229b:	5b                   	pop    ebx
c001229c:	c3                   	ret    

c001229d <CmFreeExtent(Reghive_Tag*, int)>:
c001229d:	53                   	push   ebx
c001229e:	83 ec 3c             	sub    esp,0x3c
c00122a1:	6a 2b                	push   0x2b
c00122a3:	6a 00                	push   0x0
c00122a5:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00122a9:	53                   	push   ebx
c00122aa:	e8 41 e2 fe ff       	call   c00004f0 <memset>
c00122af:	83 c4 0c             	add    esp,0xc
c00122b2:	53                   	push   ebx
c00122b3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00122b7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00122bb:	e8 a1 ff ff ff       	call   c0012261 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00122c0:	83 c4 48             	add    esp,0x48
c00122c3:	5b                   	pop    ebx
c00122c4:	c3                   	ret    

c00122c5 <CmUpdateHeader(Reghive_Tag*)>:
c00122c5:	83 ec 0c             	sub    esp,0xc
c00122c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122cc:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c00122d0:	74 10                	je     c00122e2 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c00122d2:	52                   	push   edx
c00122d3:	8d 50 05             	lea    edx,[eax+0x5]
c00122d6:	52                   	push   edx
c00122d7:	6a 00                	push   0x0
c00122d9:	50                   	push   eax
c00122da:	e8 82 ff ff ff       	call   c0012261 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00122df:	83 c4 10             	add    esp,0x10
c00122e2:	83 c4 0c             	add    esp,0xc
c00122e5:	c3                   	ret    

c00122e6 <CmExpand(Reghive_Tag*, int)>:
c00122e6:	55                   	push   ebp
c00122e7:	57                   	push   edi
c00122e8:	83 cf ff             	or     edi,0xffffffff
c00122eb:	56                   	push   esi
c00122ec:	53                   	push   ebx
c00122ed:	83 ec 3c             	sub    esp,0x3c
c00122f0:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00122f4:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00122f8:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00122fc:	74 59                	je     c0012357 <CmExpand(Reghive_Tag*, int)+0x71>
c00122fe:	50                   	push   eax
c00122ff:	31 d2                	xor    edx,edx
c0012301:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012305:	31 ff                	xor    edi,edi
c0012307:	52                   	push   edx
c0012308:	50                   	push   eax
c0012309:	ff 33                	push   DWORD PTR [ebx]
c001230b:	e8 e4 8f ff ff       	call   c000b2f4 <File::seek(unsigned long long)>
c0012310:	83 c4 0c             	add    esp,0xc
c0012313:	6a 2b                	push   0x2b
c0012315:	6a 00                	push   0x0
c0012317:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c001231b:	55                   	push   ebp
c001231c:	e8 cf e1 fe ff       	call   c00004f0 <memset>
c0012321:	83 c4 10             	add    esp,0x10
c0012324:	39 f7                	cmp    edi,esi
c0012326:	7d 1b                	jge    c0012343 <CmExpand(Reghive_Tag*, int)+0x5d>
c0012328:	8b 03                	mov    eax,DWORD PTR [ebx]
c001232a:	83 ec 0c             	sub    esp,0xc
c001232d:	47                   	inc    edi
c001232e:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012332:	8b 10                	mov    edx,DWORD PTR [eax]
c0012334:	51                   	push   ecx
c0012335:	55                   	push   ebp
c0012336:	6a 00                	push   0x0
c0012338:	6a 2b                	push   0x2b
c001233a:	50                   	push   eax
c001233b:	ff 52 10             	call   DWORD PTR [edx+0x10]
c001233e:	83 c4 20             	add    esp,0x20
c0012341:	eb e1                	jmp    c0012324 <CmExpand(Reghive_Tag*, int)+0x3e>
c0012343:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c0012346:	83 ec 0c             	sub    esp,0xc
c0012349:	01 fe                	add    esi,edi
c001234b:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c001234e:	53                   	push   ebx
c001234f:	e8 71 ff ff ff       	call   c00122c5 <CmUpdateHeader(Reghive_Tag*)>
c0012354:	83 c4 10             	add    esp,0x10
c0012357:	83 c4 3c             	add    esp,0x3c
c001235a:	89 f8                	mov    eax,edi
c001235c:	5b                   	pop    ebx
c001235d:	5e                   	pop    esi
c001235e:	5f                   	pop    edi
c001235f:	5d                   	pop    ebp
c0012360:	c3                   	ret    

c0012361 <CmFindUnusedExtent(Reghive_Tag*)>:
c0012361:	55                   	push   ebp
c0012362:	57                   	push   edi
c0012363:	56                   	push   esi
c0012364:	53                   	push   ebx
c0012365:	83 cb ff             	or     ebx,0xffffffff
c0012368:	83 ec 1c             	sub    esp,0x1c
c001236b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001236f:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0012373:	74 68                	je     c00123dd <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012375:	51                   	push   ecx
c0012376:	be 2b 00 00 00       	mov    esi,0x2b
c001237b:	6a 00                	push   0x0
c001237d:	31 ff                	xor    edi,edi
c001237f:	6a 00                	push   0x0
c0012381:	31 db                	xor    ebx,ebx
c0012383:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012386:	e8 69 8f ff ff       	call   c000b2f4 <File::seek(unsigned long long)>
c001238b:	83 c4 10             	add    esp,0x10
c001238e:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012391:	76 3b                	jbe    c00123ce <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012393:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012396:	83 ec 0c             	sub    esp,0xc
c0012399:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001239d:	8b 10                	mov    edx,DWORD PTR [eax]
c001239f:	51                   	push   ecx
c00123a0:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c00123a4:	51                   	push   ecx
c00123a5:	6a 00                	push   0x0
c00123a7:	6a 01                	push   0x1
c00123a9:	50                   	push   eax
c00123aa:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00123ad:	83 c4 20             	add    esp,0x20
c00123b0:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00123b5:	74 26                	je     c00123dd <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c00123b7:	52                   	push   edx
c00123b8:	43                   	inc    ebx
c00123b9:	57                   	push   edi
c00123ba:	56                   	push   esi
c00123bb:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00123be:	e8 31 8f ff ff       	call   c000b2f4 <File::seek(unsigned long long)>
c00123c3:	83 c6 2b             	add    esi,0x2b
c00123c6:	83 d7 00             	adc    edi,0x0
c00123c9:	83 c4 10             	add    esp,0x10
c00123cc:	eb c0                	jmp    c001238e <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c00123ce:	50                   	push   eax
c00123cf:	50                   	push   eax
c00123d0:	6a 40                	push   0x40
c00123d2:	55                   	push   ebp
c00123d3:	e8 0e ff ff ff       	call   c00122e6 <CmExpand(Reghive_Tag*, int)>
c00123d8:	83 c4 10             	add    esp,0x10
c00123db:	89 c3                	mov    ebx,eax
c00123dd:	83 c4 1c             	add    esp,0x1c
c00123e0:	89 d8                	mov    eax,ebx
c00123e2:	5b                   	pop    ebx
c00123e3:	5e                   	pop    esi
c00123e4:	5f                   	pop    edi
c00123e5:	5d                   	pop    ebp
c00123e6:	c3                   	ret    

c00123e7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c00123e7:	55                   	push   ebp
c00123e8:	57                   	push   edi
c00123e9:	56                   	push   esi
c00123ea:	53                   	push   ebx
c00123eb:	81 ec 88 00 00 00    	sub    esp,0x88
c00123f1:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c00123f8:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00123ff:	e8 5d ff ff ff       	call   c0012361 <CmFindUnusedExtent(Reghive_Tag*)>
c0012404:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012408:	83 c4 0c             	add    esp,0xc
c001240b:	6a 2b                	push   0x2b
c001240d:	6a 00                	push   0x0
c001240f:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0012413:	55                   	push   ebp
c0012414:	e8 d7 e0 fe ff       	call   c00004f0 <memset>
c0012419:	83 c4 10             	add    esp,0x10
c001241c:	85 db                	test   ebx,ebx
c001241e:	74 12                	je     c0012432 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0012420:	51                   	push   ecx
c0012421:	55                   	push   ebp
c0012422:	53                   	push   ebx
c0012423:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001242a:	e8 0e fd ff ff       	call   c001213d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001242f:	83 c4 10             	add    esp,0x10
c0012432:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0012436:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c001243d:	b9 2b 00 00 00       	mov    ecx,0x2b
c0012442:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012444:	85 db                	test   ebx,ebx
c0012446:	74 49                	je     c0012491 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0012448:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c001244d:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0012452:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012456:	c1 e0 08             	shl    eax,0x8
c0012459:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001245f:	09 c8                	or     eax,ecx
c0012461:	74 11                	je     c0012474 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0012463:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012467:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c001246b:	c1 e8 10             	shr    eax,0x10
c001246e:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0012472:	eb 0f                	jmp    c0012483 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0012474:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012479:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c001247e:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012483:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0012487:	c1 ea 08             	shr    edx,0x8
c001248a:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c001248f:	eb 0f                	jmp    c00124a0 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0012491:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012496:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c001249b:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c00124a0:	52                   	push   edx
c00124a1:	8d 44 24 49          	lea    eax,[esp+0x49]
c00124a5:	50                   	push   eax
c00124a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00124aa:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00124b1:	e8 ab fd ff ff       	call   c0012261 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00124b6:	83 c4 10             	add    esp,0x10
c00124b9:	85 db                	test   ebx,ebx
c00124bb:	74 12                	je     c00124cf <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c00124bd:	50                   	push   eax
c00124be:	55                   	push   ebp
c00124bf:	53                   	push   ebx
c00124c0:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00124c7:	e8 95 fd ff ff       	call   c0012261 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00124cc:	83 c4 10             	add    esp,0x10
c00124cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124d3:	83 c4 7c             	add    esp,0x7c
c00124d6:	5b                   	pop    ebx
c00124d7:	5e                   	pop    esi
c00124d8:	5f                   	pop    edi
c00124d9:	5d                   	pop    ebp
c00124da:	c3                   	ret    

c00124db <CmSetString(Reghive_Tag*, int, char const*)>:
c00124db:	55                   	push   ebp
c00124dc:	57                   	push   edi
c00124dd:	56                   	push   esi
c00124de:	53                   	push   ebx
c00124df:	bb 27 00 00 00       	mov    ebx,0x27
c00124e4:	81 ec 88 00 00 00    	sub    esp,0x88
c00124ea:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c00124f1:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c00124f8:	e8 83 e0 fe ff       	call   c0000580 <strlen>
c00124fd:	8d 48 26             	lea    ecx,[eax+0x26]
c0012500:	89 c8                	mov    eax,ecx
c0012502:	99                   	cdq    
c0012503:	f7 fb                	idiv   ebx
c0012505:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012509:	83 c4 10             	add    esp,0x10
c001250c:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0012512:	7e 10                	jle    c0012524 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0012514:	83 ec 0c             	sub    esp,0xc
c0012517:	68 40 17 02 c0       	push   0xc0021740
c001251c:	e8 50 e6 ff ff       	call   c0010b71 <KePanic(char const*)>
c0012521:	83 c4 10             	add    esp,0x10
c0012524:	53                   	push   ebx
c0012525:	31 ed                	xor    ebp,ebp
c0012527:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c001252b:	53                   	push   ebx
c001252c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012533:	57                   	push   edi
c0012534:	e8 04 fc ff ff       	call   c001213d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012539:	83 c4 10             	add    esp,0x10
c001253c:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c0012540:	89 f0                	mov    eax,esi
c0012542:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c0012546:	c1 e0 08             	shl    eax,0x8
c0012549:	09 c6                	or     esi,eax
c001254b:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c001254f:	c1 e6 08             	shl    esi,0x8
c0012552:	09 c6                	or     esi,eax
c0012554:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0012558:	7e 72                	jle    c00125cc <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c001255a:	85 f6                	test   esi,esi
c001255c:	75 25                	jne    c0012583 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c001255e:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0012563:	8d 44 24 45          	lea    eax,[esp+0x45]
c0012567:	50                   	push   eax
c0012568:	6a 00                	push   0x0
c001256a:	6a 00                	push   0x0
c001256c:	57                   	push   edi
c001256d:	e8 75 fe ff ff       	call   c00123e7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012572:	83 c4 10             	add    esp,0x10
c0012575:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0012578:	89 c6                	mov    esi,eax
c001257a:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c001257d:	c1 f8 10             	sar    eax,0x10
c0012580:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0012583:	51                   	push   ecx
c0012584:	8d 54 24 49          	lea    edx,[esp+0x49]
c0012588:	52                   	push   edx
c0012589:	56                   	push   esi
c001258a:	57                   	push   edi
c001258b:	e8 ad fb ff ff       	call   c001213d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012590:	83 c4 0c             	add    esp,0xc
c0012593:	6a 27                	push   0x27
c0012595:	6a 00                	push   0x0
c0012597:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c001259b:	51                   	push   ecx
c001259c:	e8 4f df fe ff       	call   c00004f0 <memset>
c00125a1:	6b c5 27             	imul   eax,ebp,0x27
c00125a4:	83 c4 0c             	add    esp,0xc
c00125a7:	6a 27                	push   0x27
c00125a9:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c00125b0:	50                   	push   eax
c00125b1:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c00125b5:	51                   	push   ecx
c00125b6:	e8 d5 e0 fe ff       	call   c0000690 <strncpy>
c00125bb:	83 c4 0c             	add    esp,0xc
c00125be:	8d 54 24 49          	lea    edx,[esp+0x49]
c00125c2:	52                   	push   edx
c00125c3:	56                   	push   esi
c00125c4:	57                   	push   edi
c00125c5:	e8 97 fc ff ff       	call   c0012261 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00125ca:	eb 19                	jmp    c00125e5 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c00125cc:	85 f6                	test   esi,esi
c00125ce:	74 18                	je     c00125e8 <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c00125d0:	52                   	push   edx
c00125d1:	52                   	push   edx
c00125d2:	56                   	push   esi
c00125d3:	57                   	push   edi
c00125d4:	e8 c4 fc ff ff       	call   c001229d <CmFreeExtent(Reghive_Tag*, int)>
c00125d9:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c00125dd:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c00125e1:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00125e5:	83 c4 10             	add    esp,0x10
c00125e8:	45                   	inc    ebp
c00125e9:	83 c3 03             	add    ebx,0x3
c00125ec:	83 fd 07             	cmp    ebp,0x7
c00125ef:	0f 85 47 ff ff ff    	jne    c001253c <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c00125f5:	50                   	push   eax
c00125f6:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c00125fa:	50                   	push   eax
c00125fb:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012602:	57                   	push   edi
c0012603:	e8 59 fc ff ff       	call   c0012261 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012608:	81 c4 8c 00 00 00    	add    esp,0x8c
c001260e:	5b                   	pop    ebx
c001260f:	5e                   	pop    esi
c0012610:	5f                   	pop    edi
c0012611:	5d                   	pop    ebp
c0012612:	c3                   	ret    

c0012613 <CmGetMatch(char*, char*, bool, bool*)>:
c0012613:	56                   	push   esi
c0012614:	53                   	push   ebx
c0012615:	50                   	push   eax
c0012616:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001261b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001261f:	74 25                	je     c0012646 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0012621:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012624:	31 db                	xor    ebx,ebx
c0012626:	50                   	push   eax
c0012627:	50                   	push   eax
c0012628:	8d 04 9d e0 2b 02 c0 	lea    eax,[ebx*4-0x3ffdd420]
c001262f:	50                   	push   eax
c0012630:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012634:	e8 47 e1 fe ff       	call   c0000780 <strcmp>
c0012639:	83 c4 10             	add    esp,0x10
c001263c:	85 c0                	test   eax,eax
c001263e:	74 2e                	je     c001266e <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012640:	43                   	inc    ebx
c0012641:	83 fb 3f             	cmp    ebx,0x3f
c0012644:	75 e0                	jne    c0012626 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0012646:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012649:	31 db                	xor    ebx,ebx
c001264b:	51                   	push   ecx
c001264c:	51                   	push   ecx
c001264d:	8d 04 9d e0 2b 02 c0 	lea    eax,[ebx*4-0x3ffdd420]
c0012654:	50                   	push   eax
c0012655:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012659:	e8 22 e1 fe ff       	call   c0000780 <strcmp>
c001265e:	83 c4 10             	add    esp,0x10
c0012661:	85 c0                	test   eax,eax
c0012663:	74 09                	je     c001266e <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012665:	43                   	inc    ebx
c0012666:	83 fb 3f             	cmp    ebx,0x3f
c0012669:	75 e0                	jne    c001264b <CmGetMatch(char*, char*, bool, bool*)+0x38>
c001266b:	83 cb ff             	or     ebx,0xffffffff
c001266e:	5a                   	pop    edx
c001266f:	89 d8                	mov    eax,ebx
c0012671:	5b                   	pop    ebx
c0012672:	5e                   	pop    esi
c0012673:	c3                   	ret    

c0012674 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0012674:	55                   	push   ebp
c0012675:	31 c0                	xor    eax,eax
c0012677:	57                   	push   edi
c0012678:	56                   	push   esi
c0012679:	53                   	push   ebx
c001267a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001267e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012682:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012686:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001268a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001268c:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c001268f:	83 fd 1f             	cmp    ebp,0x1f
c0012692:	7f 0b                	jg     c001269f <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0012694:	0f b6 c2             	movzx  eax,dl
c0012697:	d3 e0                	shl    eax,cl
c0012699:	09 07                	or     DWORD PTR [edi],eax
c001269b:	b0 01                	mov    al,0x1
c001269d:	01 33                	add    DWORD PTR [ebx],esi
c001269f:	5b                   	pop    ebx
c00126a0:	5e                   	pop    esi
c00126a1:	5f                   	pop    edi
c00126a2:	5d                   	pop    ebp
c00126a3:	c3                   	ret    

c00126a4 <CmGetShift(unsigned int*, int*, int, bool*)>:
c00126a4:	57                   	push   edi
c00126a5:	56                   	push   esi
c00126a6:	53                   	push   ebx
c00126a7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00126ab:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00126af:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00126b3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00126b7:	39 0b                	cmp    DWORD PTR [ebx],ecx
c00126b9:	7c 17                	jl     c00126d2 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c00126bb:	8b 17                	mov    edx,DWORD PTR [edi]
c00126bd:	b8 01 00 00 00       	mov    eax,0x1
c00126c2:	d3 e0                	shl    eax,cl
c00126c4:	48                   	dec    eax
c00126c5:	21 d0                	and    eax,edx
c00126c7:	d3 ea                	shr    edx,cl
c00126c9:	89 17                	mov    DWORD PTR [edi],edx
c00126cb:	29 0b                	sub    DWORD PTR [ebx],ecx
c00126cd:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00126d0:	eb 05                	jmp    c00126d7 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c00126d2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00126d5:	31 c0                	xor    eax,eax
c00126d7:	5b                   	pop    ebx
c00126d8:	5e                   	pop    esi
c00126d9:	5f                   	pop    edi
c00126da:	c3                   	ret    

c00126db <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c00126db:	83 ec 40             	sub    esp,0x40
c00126de:	8d 44 24 09          	lea    eax,[esp+0x9]
c00126e2:	50                   	push   eax
c00126e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00126e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00126eb:	e8 4d fa ff ff       	call   c001213d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00126f0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00126f4:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c00126f8:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c00126fc:	89 10                	mov    DWORD PTR [eax],edx
c00126fe:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0012701:	83 c4 4c             	add    esp,0x4c
c0012704:	c3                   	ret    

c0012705 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0012705:	55                   	push   ebp
c0012706:	57                   	push   edi
c0012707:	56                   	push   esi
c0012708:	53                   	push   ebx
c0012709:	83 ec 40             	sub    esp,0x40
c001270c:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0012710:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0012714:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0012718:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c001271c:	53                   	push   ebx
c001271d:	56                   	push   esi
c001271e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012722:	e8 16 fa ff ff       	call   c001213d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012727:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c001272b:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c001272f:	83 c4 0c             	add    esp,0xc
c0012732:	53                   	push   ebx
c0012733:	56                   	push   esi
c0012734:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012738:	e8 24 fb ff ff       	call   c0012261 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001273d:	83 c4 4c             	add    esp,0x4c
c0012740:	5b                   	pop    ebx
c0012741:	5e                   	pop    esi
c0012742:	5f                   	pop    edi
c0012743:	5d                   	pop    ebp
c0012744:	c3                   	ret    

c0012745 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0012745:	55                   	push   ebp
c0012746:	57                   	push   edi
c0012747:	56                   	push   esi
c0012748:	31 f6                	xor    esi,esi
c001274a:	53                   	push   ebx
c001274b:	31 db                	xor    ebx,ebx
c001274d:	83 ec 40             	sub    esp,0x40
c0012750:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012758:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012760:	6a 12                	push   0x12
c0012762:	68 ee 00 00 00       	push   0xee
c0012767:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c001276b:	e8 80 dd fe ff       	call   c00004f0 <memset>
c0012770:	83 c4 10             	add    esp,0x10
c0012773:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0012777:	6a 08                	push   0x8
c0012779:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001277d:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0012781:	50                   	push   eax
c0012782:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012786:	55                   	push   ebp
c0012787:	57                   	push   edi
c0012788:	e8 e7 fe ff ff       	call   c0012674 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c001278d:	83 c4 10             	add    esp,0x10
c0012790:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012794:	50                   	push   eax
c0012795:	6a 06                	push   0x6
c0012797:	55                   	push   ebp
c0012798:	57                   	push   edi
c0012799:	e8 06 ff ff ff       	call   c00126a4 <CmGetShift(unsigned int*, int*, int, bool*)>
c001279e:	83 c4 10             	add    esp,0x10
c00127a1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00127a6:	74 07                	je     c00127af <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c00127a8:	46                   	inc    esi
c00127a9:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c00127ad:	eb e1                	jmp    c0012790 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c00127af:	43                   	inc    ebx
c00127b0:	83 fb 12             	cmp    ebx,0x12
c00127b3:	75 c2                	jne    c0012777 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c00127b5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00127b9:	31 f6                	xor    esi,esi
c00127bb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00127be:	50                   	push   eax
c00127bf:	50                   	push   eax
c00127c0:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c00127c5:	46                   	inc    esi
c00127c6:	8d 04 85 e0 2b 02 c0 	lea    eax,[eax*4-0x3ffdd420]
c00127cd:	50                   	push   eax
c00127ce:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00127d2:	e8 99 e0 fe ff       	call   c0000870 <strcat>
c00127d7:	83 c4 10             	add    esp,0x10
c00127da:	83 fe 18             	cmp    esi,0x18
c00127dd:	75 df                	jne    c00127be <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c00127df:	83 c4 3c             	add    esp,0x3c
c00127e2:	31 c0                	xor    eax,eax
c00127e4:	5b                   	pop    ebx
c00127e5:	5e                   	pop    esi
c00127e6:	5f                   	pop    edi
c00127e7:	5d                   	pop    ebp
c00127e8:	c3                   	ret    

c00127e9 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c00127e9:	83 ec 40             	sub    esp,0x40
c00127ec:	8d 44 24 09          	lea    eax,[esp+0x9]
c00127f0:	50                   	push   eax
c00127f1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00127f5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00127f9:	e8 3f f9 ff ff       	call   c001213d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00127fe:	58                   	pop    eax
c00127ff:	5a                   	pop    edx
c0012800:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0012804:	8d 44 24 15          	lea    eax,[esp+0x15]
c0012808:	50                   	push   eax
c0012809:	e8 37 ff ff ff       	call   c0012745 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c001280e:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0012813:	83 c4 4c             	add    esp,0x4c
c0012816:	c3                   	ret    

c0012817 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0012817:	55                   	push   ebp
c0012818:	57                   	push   edi
c0012819:	56                   	push   esi
c001281a:	53                   	push   ebx
c001281b:	31 db                	xor    ebx,ebx
c001281d:	83 ec 70             	sub    esp,0x70
c0012820:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0012827:	6a 30                	push   0x30
c0012829:	6a 00                	push   0x0
c001282b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001282f:	56                   	push   esi
c0012830:	e8 bb dc fe ff       	call   c00004f0 <memset>
c0012835:	83 c4 10             	add    esp,0x10
c0012838:	83 ec 0c             	sub    esp,0xc
c001283b:	57                   	push   edi
c001283c:	e8 3f dd fe ff       	call   c0000580 <strlen>
c0012841:	83 c4 10             	add    esp,0x10
c0012844:	39 d8                	cmp    eax,ebx
c0012846:	76 16                	jbe    c001285e <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0012848:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c001284c:	83 ec 0c             	sub    esp,0xc
c001284f:	50                   	push   eax
c0012850:	e8 0b e1 fe ff       	call   c0000960 <toupper>
c0012855:	83 c4 10             	add    esp,0x10
c0012858:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001285b:	43                   	inc    ebx
c001285c:	eb da                	jmp    c0012838 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c001285e:	52                   	push   edx
c001285f:	31 db                	xor    ebx,ebx
c0012861:	6a 18                	push   0x18
c0012863:	31 ff                	xor    edi,edi
c0012865:	6a 3f                	push   0x3f
c0012867:	8d 44 24 24          	lea    eax,[esp+0x24]
c001286b:	50                   	push   eax
c001286c:	e8 7f dc fe ff       	call   c00004f0 <memset>
c0012871:	83 c4 10             	add    esp,0x10
c0012874:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c0012878:	8d 74 24 10          	lea    esi,[esp+0x10]
c001287c:	84 c0                	test   al,al
c001287e:	0f 84 af 00 00 00    	je     c0012933 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0012884:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0012888:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001288b:	83 ec 0c             	sub    esp,0xc
c001288e:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c0012893:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0012897:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001289b:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c00128a0:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c00128a4:	56                   	push   esi
c00128a5:	e8 d6 dc fe ff       	call   c0000580 <strlen>
c00128aa:	83 c4 10             	add    esp,0x10
c00128ad:	85 c0                	test   eax,eax
c00128af:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00128b3:	74 0b                	je     c00128c0 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c00128b5:	50                   	push   eax
c00128b6:	6a 01                	push   0x1
c00128b8:	56                   	push   esi
c00128b9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00128bd:	50                   	push   eax
c00128be:	eb 0a                	jmp    c00128ca <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c00128c0:	50                   	push   eax
c00128c1:	6a 00                	push   0x0
c00128c3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00128c7:	50                   	push   eax
c00128c8:	6a 00                	push   0x0
c00128ca:	e8 44 fd ff ff       	call   c0012613 <CmGetMatch(char*, char*, bool, bool*)>
c00128cf:	83 c4 10             	add    esp,0x10
c00128d2:	83 f8 ff             	cmp    eax,0xffffffff
c00128d5:	75 1a                	jne    c00128f1 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c00128d7:	83 ec 0c             	sub    esp,0xc
c00128da:	68 55 17 02 c0       	push   0xc0021755
c00128df:	e8 8d e2 ff ff       	call   c0010b71 <KePanic(char const*)>
c00128e4:	83 c4 10             	add    esp,0x10
c00128e7:	b8 02 00 00 00       	mov    eax,0x2
c00128ec:	e9 bb 00 00 00       	jmp    c00129ac <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c00128f1:	83 ff 18             	cmp    edi,0x18
c00128f4:	75 1a                	jne    c0012910 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c00128f6:	83 ec 0c             	sub    esp,0xc
c00128f9:	68 6a 17 02 c0       	push   0xc002176a
c00128fe:	e8 6e e2 ff ff       	call   c0010b71 <KePanic(char const*)>
c0012903:	83 c4 10             	add    esp,0x10
c0012906:	b8 01 00 00 00       	mov    eax,0x1
c001290b:	e9 9c 00 00 00       	jmp    c00129ac <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0012910:	47                   	inc    edi
c0012911:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012916:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c001291a:	0f 45 dd             	cmovne ebx,ebp
c001291d:	83 ec 0c             	sub    esp,0xc
c0012920:	56                   	push   esi
c0012921:	e8 5a dc fe ff       	call   c0000580 <strlen>
c0012926:	83 c4 10             	add    esp,0x10
c0012929:	85 c0                	test   eax,eax
c001292b:	74 06                	je     c0012933 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c001292d:	43                   	inc    ebx
c001292e:	e9 41 ff ff ff       	jmp    c0012874 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c0012933:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001293b:	31 db                	xor    ebx,ebx
c001293d:	31 ff                	xor    edi,edi
c001293f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012947:	50                   	push   eax
c0012948:	6a 12                	push   0x12
c001294a:	68 ee 00 00 00       	push   0xee
c001294f:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0012956:	e8 95 db fe ff       	call   c00004f0 <memset>
c001295b:	83 c4 10             	add    esp,0x10
c001295e:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c0012962:	83 fb 17             	cmp    ebx,0x17
c0012965:	7e 26                	jle    c001298d <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c0012967:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001296b:	50                   	push   eax
c001296c:	6a 08                	push   0x8
c001296e:	55                   	push   ebp
c001296f:	56                   	push   esi
c0012970:	e8 2f fd ff ff       	call   c00126a4 <CmGetShift(unsigned int*, int*, int, bool*)>
c0012975:	83 c4 10             	add    esp,0x10
c0012978:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001297d:	74 26                	je     c00129a5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c001297f:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0012986:	4b                   	dec    ebx
c0012987:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c001298a:	47                   	inc    edi
c001298b:	eb 1c                	jmp    c00129a9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c001298d:	6a 06                	push   0x6
c001298f:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c0012994:	50                   	push   eax
c0012995:	55                   	push   ebp
c0012996:	56                   	push   esi
c0012997:	e8 d8 fc ff ff       	call   c0012674 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c001299c:	83 c4 10             	add    esp,0x10
c001299f:	84 c0                	test   al,al
c00129a1:	75 06                	jne    c00129a9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c00129a3:	eb c2                	jmp    c0012967 <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c00129a5:	31 c0                	xor    eax,eax
c00129a7:	eb 03                	jmp    c00129ac <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c00129a9:	43                   	inc    ebx
c00129aa:	eb b2                	jmp    c001295e <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c00129ac:	83 c4 6c             	add    esp,0x6c
c00129af:	5b                   	pop    ebx
c00129b0:	5e                   	pop    esi
c00129b1:	5f                   	pop    edi
c00129b2:	5d                   	pop    ebp
c00129b3:	c3                   	ret    

c00129b4 <CmCreateString(Reghive_Tag*, int, char const*)>:
c00129b4:	53                   	push   ebx
c00129b5:	83 ec 3c             	sub    esp,0x3c
c00129b8:	6a 2b                	push   0x2b
c00129ba:	6a 00                	push   0x0
c00129bc:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00129c0:	53                   	push   ebx
c00129c1:	e8 2a db fe ff       	call   c00004f0 <memset>
c00129c6:	58                   	pop    eax
c00129c7:	5a                   	pop    edx
c00129c8:	8d 44 24 11          	lea    eax,[esp+0x11]
c00129cc:	50                   	push   eax
c00129cd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00129d1:	e8 41 fe ff ff       	call   c0012817 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00129d6:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c00129db:	83 c4 0c             	add    esp,0xc
c00129de:	6a 15                	push   0x15
c00129e0:	6a 00                	push   0x0
c00129e2:	8d 44 24 27          	lea    eax,[esp+0x27]
c00129e6:	50                   	push   eax
c00129e7:	e8 04 db fe ff       	call   c00004f0 <memset>
c00129ec:	53                   	push   ebx
c00129ed:	6a 00                	push   0x0
c00129ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00129f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00129f7:	e8 eb f9 ff ff       	call   c00123e7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00129fc:	83 c4 58             	add    esp,0x58
c00129ff:	5b                   	pop    ebx
c0012a00:	c3                   	ret    

c0012a01 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0012a01:	56                   	push   esi
c0012a02:	53                   	push   ebx
c0012a03:	83 ec 48             	sub    esp,0x48
c0012a06:	6a 12                	push   0x12
c0012a08:	68 ff 00 00 00       	push   0xff
c0012a0d:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0012a11:	56                   	push   esi
c0012a12:	e8 d9 da fe ff       	call   c00004f0 <memset>
c0012a17:	5a                   	pop    edx
c0012a18:	59                   	pop    ecx
c0012a19:	56                   	push   esi
c0012a1a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0012a1e:	e8 f4 fd ff ff       	call   c0012817 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012a23:	83 c4 10             	add    esp,0x10
c0012a26:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0012a2a:	85 db                	test   ebx,ebx
c0012a2c:	74 42                	je     c0012a70 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c0012a2e:	50                   	push   eax
c0012a2f:	8d 44 24 19          	lea    eax,[esp+0x19]
c0012a33:	50                   	push   eax
c0012a34:	53                   	push   ebx
c0012a35:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012a39:	e8 ff f6 ff ff       	call   c001213d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012a3e:	83 c4 0c             	add    esp,0xc
c0012a41:	6a 12                	push   0x12
c0012a43:	8d 44 24 21          	lea    eax,[esp+0x21]
c0012a47:	50                   	push   eax
c0012a48:	56                   	push   esi
c0012a49:	e8 32 d9 fe ff       	call   c0000380 <memcmp>
c0012a4e:	83 c4 10             	add    esp,0x10
c0012a51:	85 c0                	test   eax,eax
c0012a53:	74 1e                	je     c0012a73 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0012a55:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0012a5a:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c0012a5f:	c1 e3 08             	shl    ebx,0x8
c0012a62:	09 d8                	or     eax,ebx
c0012a64:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0012a69:	c1 e3 10             	shl    ebx,0x10
c0012a6c:	09 c3                	or     ebx,eax
c0012a6e:	eb ba                	jmp    c0012a2a <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0012a70:	83 cb ff             	or     ebx,0xffffffff
c0012a73:	83 c4 44             	add    esp,0x44
c0012a76:	89 d8                	mov    eax,ebx
c0012a78:	5b                   	pop    ebx
c0012a79:	5e                   	pop    esi
c0012a7a:	c3                   	ret    

c0012a7b <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0012a7b:	57                   	push   edi
c0012a7c:	56                   	push   esi
c0012a7d:	53                   	push   ebx
c0012a7e:	83 ec 34             	sub    esp,0x34
c0012a81:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0012a85:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0012a89:	6a 2b                	push   0x2b
c0012a8b:	6a 00                	push   0x0
c0012a8d:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012a91:	53                   	push   ebx
c0012a92:	e8 59 da fe ff       	call   c00004f0 <memset>
c0012a97:	58                   	pop    eax
c0012a98:	5a                   	pop    edx
c0012a99:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012a9d:	50                   	push   eax
c0012a9e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012aa2:	e8 70 fd ff ff       	call   c0012817 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012aa7:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c0012aab:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c0012aaf:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0012ab3:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012ab7:	53                   	push   ebx
c0012ab8:	6a 00                	push   0x0
c0012aba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012abe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012ac2:	e8 20 f9 ff ff       	call   c00123e7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012ac7:	83 c4 50             	add    esp,0x50
c0012aca:	5b                   	pop    ebx
c0012acb:	5e                   	pop    esi
c0012acc:	5f                   	pop    edi
c0012acd:	c3                   	ret    

c0012ace <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c0012ace:	55                   	push   ebp
c0012acf:	57                   	push   edi
c0012ad0:	56                   	push   esi
c0012ad1:	53                   	push   ebx
c0012ad2:	83 ec 40             	sub    esp,0x40
c0012ad5:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0012ad9:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0012add:	6a 2b                	push   0x2b
c0012adf:	6a 00                	push   0x0
c0012ae1:	8d 74 24 11          	lea    esi,[esp+0x11]
c0012ae5:	56                   	push   esi
c0012ae6:	e8 05 da fe ff       	call   c00004f0 <memset>
c0012aeb:	5f                   	pop    edi
c0012aec:	89 ef                	mov    edi,ebp
c0012aee:	58                   	pop    eax
c0012aef:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012af3:	50                   	push   eax
c0012af4:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0012af8:	e8 1a fd ff ff       	call   c0012817 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012afd:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c0012b02:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0012b07:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0012b0c:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0012b11:	83 c4 10             	add    esp,0x10
c0012b14:	85 ed                	test   ebp,ebp
c0012b16:	74 14                	je     c0012b2c <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0012b18:	51                   	push   ecx
c0012b19:	51                   	push   ecx
c0012b1a:	57                   	push   edi
c0012b1b:	53                   	push   ebx
c0012b1c:	e8 0e f7 ff ff       	call   c001222f <CmGetNext(Reghive_Tag*, int)>
c0012b21:	83 c4 10             	add    esp,0x10
c0012b24:	85 c0                	test   eax,eax
c0012b26:	74 04                	je     c0012b2c <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0012b28:	89 c7                	mov    edi,eax
c0012b2a:	eb e8                	jmp    c0012b14 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0012b2c:	56                   	push   esi
c0012b2d:	6a 00                	push   0x0
c0012b2f:	57                   	push   edi
c0012b30:	53                   	push   ebx
c0012b31:	e8 b1 f8 ff ff       	call   c00123e7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012b36:	83 c4 0c             	add    esp,0xc
c0012b39:	56                   	push   esi
c0012b3a:	50                   	push   eax
c0012b3b:	89 c7                	mov    edi,eax
c0012b3d:	53                   	push   ebx
c0012b3e:	e8 fa f5 ff ff       	call   c001213d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012b43:	58                   	pop    eax
c0012b44:	5a                   	pop    edx
c0012b45:	6a 6c                	push   0x6c
c0012b47:	6a 00                	push   0x0
c0012b49:	6a 00                	push   0x0
c0012b4b:	68 7b 17 02 c0       	push   0xc002177b
c0012b50:	57                   	push   edi
c0012b51:	53                   	push   ebx
c0012b52:	e8 24 ff ff ff       	call   c0012a7b <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0012b57:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0012b5b:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c0012b5f:	c1 e8 10             	shr    eax,0x10
c0012b62:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0012b66:	83 c4 1c             	add    esp,0x1c
c0012b69:	56                   	push   esi
c0012b6a:	57                   	push   edi
c0012b6b:	53                   	push   ebx
c0012b6c:	e8 f0 f6 ff ff       	call   c0012261 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012b71:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0012b76:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0012b7b:	c1 e0 08             	shl    eax,0x8
c0012b7e:	09 c2                	or     edx,eax
c0012b80:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0012b85:	83 c4 4c             	add    esp,0x4c
c0012b88:	5b                   	pop    ebx
c0012b89:	5e                   	pop    esi
c0012b8a:	c1 e0 10             	shl    eax,0x10
c0012b8d:	09 d0                	or     eax,edx
c0012b8f:	5f                   	pop    edi
c0012b90:	5d                   	pop    ebp
c0012b91:	c3                   	ret    

c0012b92 <zStrtok(char*, char const*)>:
c0012b92:	55                   	push   ebp
c0012b93:	57                   	push   edi
c0012b94:	56                   	push   esi
c0012b95:	53                   	push   ebx
c0012b96:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012b9a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012b9e:	85 db                	test   ebx,ebx
c0012ba0:	74 2f                	je     c0012bd1 <zStrtok(char*, char const*)+0x3f>
c0012ba2:	85 c0                	test   eax,eax
c0012ba4:	75 09                	jne    c0012baf <zStrtok(char*, char const*)+0x1d>
c0012ba6:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c0012bab:	85 c0                	test   eax,eax
c0012bad:	74 50                	je     c0012bff <zStrtok(char*, char const*)+0x6d>
c0012baf:	31 c9                	xor    ecx,ecx
c0012bb1:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0012bb5:	74 03                	je     c0012bba <zStrtok(char*, char const*)+0x28>
c0012bb7:	41                   	inc    ecx
c0012bb8:	eb f7                	jmp    c0012bb1 <zStrtok(char*, char const*)+0x1f>
c0012bba:	31 d2                	xor    edx,edx
c0012bbc:	39 ca                	cmp    edx,ecx
c0012bbe:	74 15                	je     c0012bd5 <zStrtok(char*, char const*)+0x43>
c0012bc0:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0012bc4:	8d 3c 10             	lea    edi,[eax+edx*1]
c0012bc7:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0012bca:	39 ee                	cmp    esi,ebp
c0012bcc:	74 13                	je     c0012be1 <zStrtok(char*, char const*)+0x4f>
c0012bce:	42                   	inc    edx
c0012bcf:	eb eb                	jmp    c0012bbc <zStrtok(char*, char const*)+0x2a>
c0012bd1:	31 c0                	xor    eax,eax
c0012bd3:	eb 2a                	jmp    c0012bff <zStrtok(char*, char const*)+0x6d>
c0012bd5:	c7 05 90 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028990,0x0
c0012bdf:	eb 1e                	jmp    c0012bff <zStrtok(char*, char const*)+0x6d>
c0012be1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0012be4:	39 ce                	cmp    esi,ecx
c0012be6:	75 0a                	jne    c0012bf2 <zStrtok(char*, char const*)+0x60>
c0012be8:	40                   	inc    eax
c0012be9:	a3 90 89 02 c0       	mov    ds:0xc0028990,eax
c0012bee:	89 d8                	mov    eax,ebx
c0012bf0:	eb 0d                	jmp    c0012bff <zStrtok(char*, char const*)+0x6d>
c0012bf2:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0012bf5:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0012bf9:	89 15 90 89 02 c0    	mov    DWORD PTR ds:0xc0028990,edx
c0012bff:	5b                   	pop    ebx
c0012c00:	5e                   	pop    esi
c0012c01:	5f                   	pop    edi
c0012c02:	5d                   	pop    ebp
c0012c03:	c3                   	ret    

c0012c04 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0012c04:	57                   	push   edi
c0012c05:	56                   	push   esi
c0012c06:	53                   	push   ebx
c0012c07:	81 ec 08 01 00 00    	sub    esp,0x108
c0012c0d:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0012c14:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0012c1b:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0012c1f:	53                   	push   ebx
c0012c20:	e8 2b da fe ff       	call   c0000650 <strcpy>
c0012c25:	59                   	pop    ecx
c0012c26:	5e                   	pop    esi
c0012c27:	68 df 1a 02 c0       	push   0xc0021adf
c0012c2c:	53                   	push   ebx
c0012c2d:	bb 01 00 00 00       	mov    ebx,0x1
c0012c32:	e8 5b ff ff ff       	call   c0012b92 <zStrtok(char*, char const*)>
c0012c37:	83 c4 10             	add    esp,0x10
c0012c3a:	85 c0                	test   eax,eax
c0012c3c:	74 3b                	je     c0012c79 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012c3e:	52                   	push   edx
c0012c3f:	50                   	push   eax
c0012c40:	6a 01                	push   0x1
c0012c42:	57                   	push   edi
c0012c43:	e8 b9 fd ff ff       	call   c0012a01 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0012c48:	59                   	pop    ecx
c0012c49:	5e                   	pop    esi
c0012c4a:	89 c3                	mov    ebx,eax
c0012c4c:	68 df 1a 02 c0       	push   0xc0021adf
c0012c51:	6a 00                	push   0x0
c0012c53:	e8 3a ff ff ff       	call   c0012b92 <zStrtok(char*, char const*)>
c0012c58:	83 c4 10             	add    esp,0x10
c0012c5b:	85 c0                	test   eax,eax
c0012c5d:	89 c6                	mov    esi,eax
c0012c5f:	74 18                	je     c0012c79 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012c61:	52                   	push   edx
c0012c62:	52                   	push   edx
c0012c63:	53                   	push   ebx
c0012c64:	57                   	push   edi
c0012c65:	e8 86 f5 ff ff       	call   c00121f0 <CmEnterDirectory(Reghive_Tag*, int)>
c0012c6a:	83 c4 10             	add    esp,0x10
c0012c6d:	83 f8 ff             	cmp    eax,0xffffffff
c0012c70:	89 c3                	mov    ebx,eax
c0012c72:	74 05                	je     c0012c79 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012c74:	50                   	push   eax
c0012c75:	56                   	push   esi
c0012c76:	53                   	push   ebx
c0012c77:	eb c9                	jmp    c0012c42 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0012c79:	81 c4 00 01 00 00    	add    esp,0x100
c0012c7f:	89 d8                	mov    eax,ebx
c0012c81:	5b                   	pop    ebx
c0012c82:	5e                   	pop    esi
c0012c83:	5f                   	pop    edi
c0012c84:	c3                   	ret    

c0012c85 <CmDisplayTree(Reghive_Tag*, int, int)>:
c0012c85:	55                   	push   ebp
c0012c86:	57                   	push   edi
c0012c87:	56                   	push   esi
c0012c88:	53                   	push   ebx
c0012c89:	83 ec 5c             	sub    esp,0x5c
c0012c8c:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0012c90:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0012c94:	85 db                	test   ebx,ebx
c0012c96:	0f 8e 84 00 00 00    	jle    c0012d20 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0012c9c:	57                   	push   edi
c0012c9d:	31 ed                	xor    ebp,ebp
c0012c9f:	6a 32                	push   0x32
c0012ca1:	6a 00                	push   0x0
c0012ca3:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0012ca7:	57                   	push   edi
c0012ca8:	e8 43 d8 fe ff       	call   c00004f0 <memset>
c0012cad:	83 c4 0c             	add    esp,0xc
c0012cb0:	57                   	push   edi
c0012cb1:	53                   	push   ebx
c0012cb2:	56                   	push   esi
c0012cb3:	e8 31 fb ff ff       	call   c00127e9 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0012cb8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012cbc:	83 c4 10             	add    esp,0x10
c0012cbf:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0012cc3:	7d 13                	jge    c0012cd8 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0012cc5:	83 ec 0c             	sub    esp,0xc
c0012cc8:	45                   	inc    ebp
c0012cc9:	68 83 1e 02 c0       	push   0xc0021e83
c0012cce:	e8 2b 7c ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0012cd3:	83 c4 10             	add    esp,0x10
c0012cd6:	eb e7                	jmp    c0012cbf <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0012cd8:	51                   	push   ecx
c0012cd9:	57                   	push   edi
c0012cda:	53                   	push   ebx
c0012cdb:	68 81 17 02 c0       	push   0xc0021781
c0012ce0:	e8 19 7c ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0012ce5:	83 c4 10             	add    esp,0x10
c0012ce8:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0012ced:	75 1e                	jne    c0012d0d <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0012cef:	52                   	push   edx
c0012cf0:	52                   	push   edx
c0012cf1:	53                   	push   ebx
c0012cf2:	56                   	push   esi
c0012cf3:	e8 f8 f4 ff ff       	call   c00121f0 <CmEnterDirectory(Reghive_Tag*, int)>
c0012cf8:	83 c4 0c             	add    esp,0xc
c0012cfb:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0012cff:	8d 51 04             	lea    edx,[ecx+0x4]
c0012d02:	52                   	push   edx
c0012d03:	50                   	push   eax
c0012d04:	56                   	push   esi
c0012d05:	e8 7b ff ff ff       	call   c0012c85 <CmDisplayTree(Reghive_Tag*, int, int)>
c0012d0a:	83 c4 10             	add    esp,0x10
c0012d0d:	50                   	push   eax
c0012d0e:	50                   	push   eax
c0012d0f:	53                   	push   ebx
c0012d10:	56                   	push   esi
c0012d11:	e8 19 f5 ff ff       	call   c001222f <CmGetNext(Reghive_Tag*, int)>
c0012d16:	83 c4 10             	add    esp,0x10
c0012d19:	89 c3                	mov    ebx,eax
c0012d1b:	e9 74 ff ff ff       	jmp    c0012c94 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0012d20:	83 c4 5c             	add    esp,0x5c
c0012d23:	5b                   	pop    ebx
c0012d24:	5e                   	pop    esi
c0012d25:	5f                   	pop    edi
c0012d26:	5d                   	pop    ebp
c0012d27:	c3                   	ret    

c0012d28 <CmSplitFinalSlashInPlace(char*)>:
c0012d28:	53                   	push   ebx
c0012d29:	83 ec 14             	sub    esp,0x14
c0012d2c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012d30:	53                   	push   ebx
c0012d31:	e8 4a d8 fe ff       	call   c0000580 <strlen>
c0012d36:	83 c4 10             	add    esp,0x10
c0012d39:	48                   	dec    eax
c0012d3a:	85 c0                	test   eax,eax
c0012d3c:	74 15                	je     c0012d53 <CmSplitFinalSlashInPlace(char*)+0x2b>
c0012d3e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012d42:	8d 14 03             	lea    edx,[ebx+eax*1]
c0012d45:	75 09                	jne    c0012d50 <CmSplitFinalSlashInPlace(char*)+0x28>
c0012d47:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0012d4a:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012d4e:	eb 05                	jmp    c0012d55 <CmSplitFinalSlashInPlace(char*)+0x2d>
c0012d50:	48                   	dec    eax
c0012d51:	eb e7                	jmp    c0012d3a <CmSplitFinalSlashInPlace(char*)+0x12>
c0012d53:	31 c0                	xor    eax,eax
c0012d55:	83 c4 08             	add    esp,0x8
c0012d58:	5b                   	pop    ebx
c0012d59:	c3                   	ret    

c0012d5a <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0012d5a:	55                   	push   ebp
c0012d5b:	57                   	push   edi
c0012d5c:	56                   	push   esi
c0012d5d:	53                   	push   ebx
c0012d5e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012d64:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0012d6b:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0012d6e:	8d 43 01             	lea    eax,[ebx+0x1]
c0012d71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012d75:	89 f0                	mov    eax,esi
c0012d77:	3c 40                	cmp    al,0x40
c0012d79:	75 1b                	jne    c0012d96 <Reg::findLineFromLoadedData(char*, char*, char*)+0x3c>
c0012d7b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012d7e:	85 c0                	test   eax,eax
c0012d80:	74 08                	je     c0012d8a <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c0012d82:	83 f8 3a             	cmp    eax,0x3a
c0012d85:	74 03                	je     c0012d8a <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c0012d87:	43                   	inc    ebx
c0012d88:	eb f1                	jmp    c0012d7b <Reg::findLineFromLoadedData(char*, char*, char*)+0x21>
c0012d8a:	85 c0                	test   eax,eax
c0012d8c:	0f 84 45 01 00 00    	je     c0012ed7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012d92:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012d95:	43                   	inc    ebx
c0012d96:	50                   	push   eax
c0012d97:	6a 40                	push   0x40
c0012d99:	6a 00                	push   0x0
c0012d9b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012d9f:	50                   	push   eax
c0012da0:	e8 4b d7 fe ff       	call   c00004f0 <memset>
c0012da5:	89 f1                	mov    ecx,esi
c0012da7:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0012dae:	31 c0                	xor    eax,eax
c0012db0:	83 c4 10             	add    esp,0x10
c0012db3:	0f be f1             	movsx  esi,cl
c0012db6:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0012db9:	85 d2                	test   edx,edx
c0012dbb:	89 d1                	mov    ecx,edx
c0012dbd:	0f 84 14 01 00 00    	je     c0012ed7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012dc3:	3d c7 00 00 00       	cmp    eax,0xc7
c0012dc8:	0f 8f 09 01 00 00    	jg     c0012ed7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012dce:	83 fa 0a             	cmp    edx,0xa
c0012dd1:	0f 85 f1 00 00 00    	jne    c0012ec8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x16e>
c0012dd7:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0012ddc:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0012de1:	89 c8                	mov    eax,ecx
c0012de3:	a8 df                	test   al,0xdf
c0012de5:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0012dea:	83 f9 23             	cmp    ecx,0x23
c0012ded:	0f 94 c2             	sete   dl
c0012df0:	89 d5                	mov    ebp,edx
c0012df2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012df6:	09 ea                	or     edx,ebp
c0012df8:	80 e2 01             	and    dl,0x1
c0012dfb:	75 47                	jne    c0012e44 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012dfd:	83 e8 09             	sub    eax,0x9
c0012e00:	3c 01                	cmp    al,0x1
c0012e02:	76 40                	jbe    c0012e44 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012e04:	83 f9 5b             	cmp    ecx,0x5b
c0012e07:	75 42                	jne    c0012e4b <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0012e09:	83 fe 40             	cmp    esi,0x40
c0012e0c:	75 36                	jne    c0012e44 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012e0e:	83 ec 0c             	sub    esp,0xc
c0012e11:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0012e15:	55                   	push   ebp
c0012e16:	e8 65 d7 fe ff       	call   c0000580 <strlen>
c0012e1b:	83 c4 10             	add    esp,0x10
c0012e1e:	83 f8 3f             	cmp    eax,0x3f
c0012e21:	0f 87 b0 00 00 00    	ja     c0012ed7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012e27:	50                   	push   eax
c0012e28:	50                   	push   eax
c0012e29:	55                   	push   ebp
c0012e2a:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c0012e2e:	55                   	push   ebp
c0012e2f:	e8 1c d8 fe ff       	call   c0000650 <strcpy>
c0012e34:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012e37:	e8 44 d7 fe ff       	call   c0000580 <strlen>
c0012e3c:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0012e41:	83 c4 10             	add    esp,0x10
c0012e44:	31 d2                	xor    edx,edx
c0012e46:	e9 84 00 00 00       	jmp    c0012ecf <Reg::findLineFromLoadedData(char*, char*, char*)+0x175>
c0012e4b:	83 fe 40             	cmp    esi,0x40
c0012e4e:	74 06                	je     c0012e56 <Reg::findLineFromLoadedData(char*, char*, char*)+0xfc>
c0012e50:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012e54:	eb 19                	jmp    c0012e6f <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0012e56:	51                   	push   ecx
c0012e57:	51                   	push   ecx
c0012e58:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012e5c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012e60:	50                   	push   eax
c0012e61:	e8 1a d9 fe ff       	call   c0000780 <strcmp>
c0012e66:	83 c4 10             	add    esp,0x10
c0012e69:	85 c0                	test   eax,eax
c0012e6b:	75 d7                	jne    c0012e44 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012e6d:	eb e1                	jmp    c0012e50 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf6>
c0012e6f:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c0012e72:	85 c9                	test   ecx,ecx
c0012e74:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0012e79:	83 f9 3d             	cmp    ecx,0x3d
c0012e7c:	0f 94 c0             	sete   al
c0012e7f:	89 c5                	mov    ebp,eax
c0012e81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012e85:	09 e8                	or     eax,ebp
c0012e87:	a8 01                	test   al,0x1
c0012e89:	89 c5                	mov    ebp,eax
c0012e8b:	75 03                	jne    c0012e90 <Reg::findLineFromLoadedData(char*, char*, char*)+0x136>
c0012e8d:	42                   	inc    edx
c0012e8e:	eb df                	jmp    c0012e6f <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0012e90:	85 c9                	test   ecx,ecx
c0012e92:	74 43                	je     c0012ed7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012e94:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012e98:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0012e9b:	52                   	push   edx
c0012e9c:	52                   	push   edx
c0012e9d:	8d 44 24 60          	lea    eax,[esp+0x60]
c0012ea1:	50                   	push   eax
c0012ea2:	53                   	push   ebx
c0012ea3:	e8 d8 d8 fe ff       	call   c0000780 <strcmp>
c0012ea8:	83 c4 10             	add    esp,0x10
c0012eab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012eaf:	85 c0                	test   eax,eax
c0012eb1:	75 91                	jne    c0012e44 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012eb3:	50                   	push   eax
c0012eb4:	42                   	inc    edx
c0012eb5:	50                   	push   eax
c0012eb6:	52                   	push   edx
c0012eb7:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0012ebe:	e8 8d d7 fe ff       	call   c0000650 <strcpy>
c0012ec3:	83 c4 10             	add    esp,0x10
c0012ec6:	eb 11                	jmp    c0012ed9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c0012ec8:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0012ecc:	8d 50 01             	lea    edx,[eax+0x1]
c0012ecf:	47                   	inc    edi
c0012ed0:	89 d0                	mov    eax,edx
c0012ed2:	e9 df fe ff ff       	jmp    c0012db6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5c>
c0012ed7:	31 ed                	xor    ebp,ebp
c0012ed9:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012edf:	89 e8                	mov    eax,ebp
c0012ee1:	5b                   	pop    ebx
c0012ee2:	5e                   	pop    esi
c0012ee3:	5f                   	pop    edi
c0012ee4:	5d                   	pop    ebp
c0012ee5:	c3                   	ret    

c0012ee6 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0012ee6:	57                   	push   edi
c0012ee7:	56                   	push   esi
c0012ee8:	53                   	push   ebx
c0012ee9:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012eef:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0012ef6:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0012efd:	53                   	push   ebx
c0012efe:	e8 7d d6 fe ff       	call   c0000580 <strlen>
c0012f03:	89 34 24             	mov    DWORD PTR [esp],esi
c0012f06:	89 c7                	mov    edi,eax
c0012f08:	e8 73 d6 fe ff       	call   c0000580 <strlen>
c0012f0d:	83 c4 10             	add    esp,0x10
c0012f10:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0012f14:	3d ff 00 00 00       	cmp    eax,0xff
c0012f19:	0f 87 d3 00 00 00    	ja     c0012ff2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012f1f:	57                   	push   edi
c0012f20:	57                   	push   edi
c0012f21:	56                   	push   esi
c0012f22:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0012f26:	56                   	push   esi
c0012f27:	e8 24 d7 fe ff       	call   c0000650 <strcpy>
c0012f2c:	58                   	pop    eax
c0012f2d:	5a                   	pop    edx
c0012f2e:	68 df 1a 02 c0       	push   0xc0021adf
c0012f33:	56                   	push   esi
c0012f34:	e8 37 d9 fe ff       	call   c0000870 <strcat>
c0012f39:	59                   	pop    ecx
c0012f3a:	5f                   	pop    edi
c0012f3b:	53                   	push   ebx
c0012f3c:	56                   	push   esi
c0012f3d:	e8 2e d9 fe ff       	call   c0000870 <strcat>
c0012f42:	58                   	pop    eax
c0012f43:	5a                   	pop    edx
c0012f44:	68 8b 17 02 c0       	push   0xc002178b
c0012f49:	56                   	push   esi
c0012f4a:	e8 21 d9 fe ff       	call   c0000870 <strcat>
c0012f4f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012f56:	e8 70 4b ff ff       	call   c0007acb <malloc>
c0012f5b:	83 c4 0c             	add    esp,0xc
c0012f5e:	ff 35 90 91 02 c0    	push   DWORD PTR ds:0xc0029190
c0012f64:	56                   	push   esi
c0012f65:	50                   	push   eax
c0012f66:	89 c3                	mov    ebx,eax
c0012f68:	e8 0d 82 ff ff       	call   c000b17a <File::File(char const*, Process*)>
c0012f6d:	83 c4 10             	add    esp,0x10
c0012f70:	85 db                	test   ebx,ebx
c0012f72:	74 7e                	je     c0012ff2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012f74:	51                   	push   ecx
c0012f75:	51                   	push   ecx
c0012f76:	6a 01                	push   0x1
c0012f78:	53                   	push   ebx
c0012f79:	e8 b8 82 ff ff       	call   c000b236 <File::open(FileOpenMode)>
c0012f7e:	83 c4 10             	add    esp,0x10
c0012f81:	85 c0                	test   eax,eax
c0012f83:	74 08                	je     c0012f8d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0012f85:	83 ec 0c             	sub    esp,0xc
c0012f88:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f8a:	53                   	push   ebx
c0012f8b:	eb 5f                	jmp    c0012fec <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0012f8d:	52                   	push   edx
c0012f8e:	8d 44 24 17          	lea    eax,[esp+0x17]
c0012f92:	50                   	push   eax
c0012f93:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012f97:	50                   	push   eax
c0012f98:	53                   	push   ebx
c0012f99:	e8 9a 85 ff ff       	call   c000b538 <File::stat(unsigned long long*, bool*)>
c0012f9e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012fa2:	83 c4 10             	add    esp,0x10
c0012fa5:	89 c1                	mov    ecx,eax
c0012fa7:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0012fab:	74 31                	je     c0012fde <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012fad:	83 ec 0c             	sub    esp,0xc
c0012fb0:	50                   	push   eax
c0012fb1:	e8 15 4b ff ff       	call   c0007acb <malloc>
c0012fb6:	89 c6                	mov    esi,eax
c0012fb8:	58                   	pop    eax
c0012fb9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012fbb:	8d 54 24 20          	lea    edx,[esp+0x20]
c0012fbf:	52                   	push   edx
c0012fc0:	56                   	push   esi
c0012fc1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012fc5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012fc9:	53                   	push   ebx
c0012fca:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012fcd:	83 c4 20             	add    esp,0x20
c0012fd0:	85 c0                	test   eax,eax
c0012fd2:	75 0a                	jne    c0012fde <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012fd4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012fd8:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0012fdc:	74 18                	je     c0012ff6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0012fde:	83 ec 0c             	sub    esp,0xc
c0012fe1:	53                   	push   ebx
c0012fe2:	e8 ad 82 ff ff       	call   c000b294 <File::close()>
c0012fe7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012fe9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012fec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012fef:	83 c4 10             	add    esp,0x10
c0012ff2:	31 c0                	xor    eax,eax
c0012ff4:	eb 3b                	jmp    c0013031 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0012ff6:	83 ec 0c             	sub    esp,0xc
c0012ff9:	53                   	push   ebx
c0012ffa:	e8 95 82 ff ff       	call   c000b294 <File::close()>
c0012fff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013001:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013004:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013007:	83 c4 0c             	add    esp,0xc
c001300a:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013011:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013018:	56                   	push   esi
c0013019:	e8 3c fd ff ff       	call   c0012d5a <Reg::findLineFromLoadedData(char*, char*, char*)>
c001301e:	89 34 24             	mov    DWORD PTR [esp],esi
c0013021:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013025:	e8 b1 4a ff ff       	call   c0007adb <free>
c001302a:	83 c4 10             	add    esp,0x10
c001302d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013031:	81 c4 20 01 00 00    	add    esp,0x120
c0013037:	5b                   	pop    ebx
c0013038:	5e                   	pop    esi
c0013039:	5f                   	pop    edi
c001303a:	c3                   	ret    

c001303b <Reg::getLine(char*, char*, char*)>:
c001303b:	57                   	push   edi
c001303c:	56                   	push   esi
c001303d:	53                   	push   ebx
c001303e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013042:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013046:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001304a:	57                   	push   edi
c001304b:	56                   	push   esi
c001304c:	53                   	push   ebx
c001304d:	68 90 17 02 c0       	push   0xc0021790
c0013052:	e8 8f fe ff ff       	call   c0012ee6 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013057:	83 c4 10             	add    esp,0x10
c001305a:	84 c0                	test   al,al
c001305c:	75 10                	jne    c001306e <Reg::getLine(char*, char*, char*)+0x33>
c001305e:	57                   	push   edi
c001305f:	56                   	push   esi
c0013060:	53                   	push   ebx
c0013061:	68 b5 17 02 c0       	push   0xc00217b5
c0013066:	e8 7b fe ff ff       	call   c0012ee6 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001306b:	83 c4 10             	add    esp,0x10
c001306e:	5b                   	pop    ebx
c001306f:	5e                   	pop    esi
c0013070:	5f                   	pop    edi
c0013071:	c3                   	ret    

c0013072 <Reg::readInt(char*, char*, int*)>:
c0013072:	55                   	push   ebp
c0013073:	57                   	push   edi
c0013074:	56                   	push   esi
c0013075:	53                   	push   ebx
c0013076:	81 ec f0 00 00 00    	sub    esp,0xf0
c001307c:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013080:	55                   	push   ebp
c0013081:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013088:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001308f:	e8 a7 ff ff ff       	call   c001303b <Reg::getLine(char*, char*, char*)>
c0013094:	83 c4 10             	add    esp,0x10
c0013097:	84 c0                	test   al,al
c0013099:	0f 84 b6 00 00 00    	je     c0013155 <Reg::readInt(char*, char*, int*)+0xe3>
c001309f:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c00130a4:	83 fa 2b             	cmp    edx,0x2b
c00130a7:	74 0c                	je     c00130b5 <Reg::readInt(char*, char*, int*)+0x43>
c00130a9:	83 fa 2d             	cmp    edx,0x2d
c00130ac:	75 0e                	jne    c00130bc <Reg::readInt(char*, char*, int*)+0x4a>
c00130ae:	ba 01 00 00 00       	mov    edx,0x1
c00130b3:	eb 0b                	jmp    c00130c0 <Reg::readInt(char*, char*, int*)+0x4e>
c00130b5:	ba 01 00 00 00       	mov    edx,0x1
c00130ba:	eb 02                	jmp    c00130be <Reg::readInt(char*, char*, int*)+0x4c>
c00130bc:	31 d2                	xor    edx,edx
c00130be:	31 c0                	xor    eax,eax
c00130c0:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00130c5:	be 0a 00 00 00       	mov    esi,0xa
c00130ca:	75 21                	jne    c00130ed <Reg::readInt(char*, char*, int*)+0x7b>
c00130cc:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c00130d1:	83 f9 78             	cmp    ecx,0x78
c00130d4:	75 0a                	jne    c00130e0 <Reg::readInt(char*, char*, int*)+0x6e>
c00130d6:	83 c2 02             	add    edx,0x2
c00130d9:	be 10 00 00 00       	mov    esi,0x10
c00130de:	eb 0d                	jmp    c00130ed <Reg::readInt(char*, char*, int*)+0x7b>
c00130e0:	83 f9 62             	cmp    ecx,0x62
c00130e3:	75 08                	jne    c00130ed <Reg::readInt(char*, char*, int*)+0x7b>
c00130e5:	83 c2 02             	add    edx,0x2
c00130e8:	be 02 00 00 00       	mov    esi,0x2
c00130ed:	01 d5                	add    ebp,edx
c00130ef:	31 d2                	xor    edx,edx
c00130f1:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c00130f5:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00130f9:	85 c9                	test   ecx,ecx
c00130fb:	0f 94 c3             	sete   bl
c00130fe:	83 f9 0d             	cmp    ecx,0xd
c0013101:	89 df                	mov    edi,ebx
c0013103:	0f 94 c3             	sete   bl
c0013106:	09 df                	or     edi,ebx
c0013108:	89 fb                	mov    ebx,edi
c001310a:	83 e7 01             	and    edi,0x1
c001310d:	75 35                	jne    c0013144 <Reg::readInt(char*, char*, int*)+0xd2>
c001310f:	0f af d6             	imul   edx,esi
c0013112:	83 fe 10             	cmp    esi,0x10
c0013115:	75 26                	jne    c001313d <Reg::readInt(char*, char*, int*)+0xcb>
c0013117:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001311b:	83 ef 41             	sub    edi,0x41
c001311e:	89 fb                	mov    ebx,edi
c0013120:	80 fb 05             	cmp    bl,0x5
c0013123:	77 06                	ja     c001312b <Reg::readInt(char*, char*, int*)+0xb9>
c0013125:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0013129:	eb 16                	jmp    c0013141 <Reg::readInt(char*, char*, int*)+0xcf>
c001312b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001312f:	83 eb 61             	sub    ebx,0x61
c0013132:	80 fb 05             	cmp    bl,0x5
c0013135:	77 06                	ja     c001313d <Reg::readInt(char*, char*, int*)+0xcb>
c0013137:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c001313b:	eb 04                	jmp    c0013141 <Reg::readInt(char*, char*, int*)+0xcf>
c001313d:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0013141:	45                   	inc    ebp
c0013142:	eb ad                	jmp    c00130f1 <Reg::readInt(char*, char*, int*)+0x7f>
c0013144:	84 c0                	test   al,al
c0013146:	74 02                	je     c001314a <Reg::readInt(char*, char*, int*)+0xd8>
c0013148:	f7 da                	neg    edx
c001314a:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0013151:	89 10                	mov    DWORD PTR [eax],edx
c0013153:	88 d8                	mov    al,bl
c0013155:	81 c4 ec 00 00 00    	add    esp,0xec
c001315b:	5b                   	pop    ebx
c001315c:	5e                   	pop    esi
c001315d:	5f                   	pop    edi
c001315e:	5d                   	pop    ebp
c001315f:	c3                   	ret    

c0013160 <Reg::readString(char*, char*, char*, int)>:
c0013160:	57                   	push   edi
c0013161:	56                   	push   esi
c0013162:	53                   	push   ebx
c0013163:	81 ec d4 00 00 00    	sub    esp,0xd4
c0013169:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001316d:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013174:	57                   	push   edi
c0013175:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001317c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013183:	e8 b3 fe ff ff       	call   c001303b <Reg::getLine(char*, char*, char*)>
c0013188:	83 c4 10             	add    esp,0x10
c001318b:	84 c0                	test   al,al
c001318d:	89 c6                	mov    esi,eax
c001318f:	74 44                	je     c00131d5 <Reg::readString(char*, char*, char*, int)+0x75>
c0013191:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013198:	31 c0                	xor    eax,eax
c001319a:	4a                   	dec    edx
c001319b:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001319e:	84 c9                	test   cl,cl
c00131a0:	74 0f                	je     c00131b1 <Reg::readString(char*, char*, char*, int)+0x51>
c00131a2:	39 c2                	cmp    edx,eax
c00131a4:	7e 0b                	jle    c00131b1 <Reg::readString(char*, char*, char*, int)+0x51>
c00131a6:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00131a9:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00131ae:	40                   	inc    eax
c00131af:	eb ea                	jmp    c001319b <Reg::readString(char*, char*, char*, int)+0x3b>
c00131b1:	83 ec 0c             	sub    esp,0xc
c00131b4:	53                   	push   ebx
c00131b5:	e8 c6 d3 fe ff       	call   c0000580 <strlen>
c00131ba:	83 c4 10             	add    esp,0x10
c00131bd:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00131c2:	75 11                	jne    c00131d5 <Reg::readString(char*, char*, char*, int)+0x75>
c00131c4:	83 ec 0c             	sub    esp,0xc
c00131c7:	53                   	push   ebx
c00131c8:	e8 b3 d3 fe ff       	call   c0000580 <strlen>
c00131cd:	83 c4 10             	add    esp,0x10
c00131d0:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00131d5:	81 c4 d0 00 00 00    	add    esp,0xd0
c00131db:	89 f0                	mov    eax,esi
c00131dd:	5b                   	pop    ebx
c00131de:	5e                   	pop    esi
c00131df:	5f                   	pop    edi
c00131e0:	c3                   	ret    

c00131e1 <Reg::readBool(char*, char*, bool*)>:
c00131e1:	83 ec 20             	sub    esp,0x20
c00131e4:	8d 44 24 10          	lea    eax,[esp+0x10]
c00131e8:	50                   	push   eax
c00131e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00131ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00131f1:	e8 7c fe ff ff       	call   c0013072 <Reg::readInt(char*, char*, int*)>
c00131f6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00131fa:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00131ff:	0f 95 02             	setne  BYTE PTR [edx]
c0013202:	83 c4 2c             	add    esp,0x2c
c0013205:	c3                   	ret    

c0013206 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013206:	53                   	push   ebx
c0013207:	83 ec 1c             	sub    esp,0x1c
c001320a:	8d 44 24 13          	lea    eax,[esp+0x13]
c001320e:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013212:	50                   	push   eax
c0013213:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013217:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001321b:	e8 c1 ff ff ff       	call   c00131e1 <Reg::readBool(char*, char*, bool*)>
c0013220:	83 c4 10             	add    esp,0x10
c0013223:	84 c0                	test   al,al
c0013225:	74 04                	je     c001322b <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013227:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001322b:	83 c4 18             	add    esp,0x18
c001322e:	88 d8                	mov    al,bl
c0013230:	5b                   	pop    ebx
c0013231:	c3                   	ret    

c0013232 <Reg::readIntWithDefault(char*, char*, int)>:
c0013232:	53                   	push   ebx
c0013233:	83 ec 1c             	sub    esp,0x1c
c0013236:	8d 44 24 10          	lea    eax,[esp+0x10]
c001323a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001323e:	50                   	push   eax
c001323f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013247:	e8 26 fe ff ff       	call   c0013072 <Reg::readInt(char*, char*, int*)>
c001324c:	83 c4 10             	add    esp,0x10
c001324f:	84 c0                	test   al,al
c0013251:	74 04                	je     c0013257 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013253:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013257:	83 c4 18             	add    esp,0x18
c001325a:	89 d8                	mov    eax,ebx
c001325c:	5b                   	pop    ebx
c001325d:	c3                   	ret    

c001325e <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001325e:	57                   	push   edi
c001325f:	56                   	push   esi
c0013260:	53                   	push   ebx
c0013261:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013265:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013269:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001326d:	56                   	push   esi
c001326e:	57                   	push   edi
c001326f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013273:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013277:	e8 e4 fe ff ff       	call   c0013160 <Reg::readString(char*, char*, char*, int)>
c001327c:	83 c4 10             	add    esp,0x10
c001327f:	84 c0                	test   al,al
c0013281:	75 16                	jne    c0013299 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013283:	50                   	push   eax
c0013284:	56                   	push   esi
c0013285:	6a 00                	push   0x0
c0013287:	57                   	push   edi
c0013288:	e8 63 d2 fe ff       	call   c00004f0 <memset>
c001328d:	8d 4e ff             	lea    ecx,[esi-0x1]
c0013290:	89 de                	mov    esi,ebx
c0013292:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013294:	83 c4 10             	add    esp,0x10
c0013297:	89 df                	mov    edi,ebx
c0013299:	5b                   	pop    ebx
c001329a:	89 f8                	mov    eax,edi
c001329c:	5e                   	pop    esi
c001329d:	5f                   	pop    edi
c001329e:	c3                   	ret    

c001329f <SysEject(regs*)>:
c001329f:	83 ec 0c             	sub    esp,0xc
c00132a2:	83 ca ff             	or     edx,0xffffffff
c00132a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132a9:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00132ac:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00132b1:	83 e9 41             	sub    ecx,0x41
c00132b4:	83 f9 19             	cmp    ecx,0x19
c00132b7:	77 18                	ja     c00132d1 <SysEject(regs*)+0x32>
c00132b9:	8b 0c 8d 20 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7be0]
c00132c0:	85 c9                	test   ecx,ecx
c00132c2:	74 0d                	je     c00132d1 <SysEject(regs*)+0x32>
c00132c4:	83 ec 0c             	sub    esp,0xc
c00132c7:	51                   	push   ecx
c00132c8:	e8 3b a1 ff ff       	call   c000d408 <LogicalDisk::eject()>
c00132cd:	83 c4 10             	add    esp,0x10
c00132d0:	99                   	cdq    
c00132d1:	83 c4 0c             	add    esp,0xc
c00132d4:	c3                   	ret    

c00132d5 <SysExit(regs*)>:
c00132d5:	83 ec 18             	sub    esp,0x18
c00132d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132dc:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00132df:	e8 10 2b 00 00       	call   c0015df4 <terminateTask(int)>
c00132e4:	83 c8 ff             	or     eax,0xffffffff
c00132e7:	83 c4 1c             	add    esp,0x1c
c00132ea:	89 c2                	mov    edx,eax
c00132ec:	c3                   	ret    

c00132ed <SysGetCwd(regs*)>:
c00132ed:	83 ec 10             	sub    esp,0x10
c00132f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00132f4:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00132f7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00132fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00132ff:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013302:	e8 43 7c ff ff       	call   c000af4a <Fs::getcwd(Process*, char*, int)>
c0013307:	83 c4 1c             	add    esp,0x1c
c001330a:	99                   	cdq    
c001330b:	c3                   	ret    

c001330c <SysGetPID(regs*)>:
c001330c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013311:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013314:	8b 00                	mov    eax,DWORD PTR [eax]
c0013316:	99                   	cdq    
c0013317:	c3                   	ret    

c0013318 <SysGetRAMData(regs*)>:
c0013318:	69 05 e4 5e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0025ee4,0xc8
c0013322:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0013328:	99                   	cdq    
c0013329:	f7 f9                	idiv   ecx
c001332b:	c1 e0 18             	shl    eax,0x18
c001332e:	09 c8                	or     eax,ecx
c0013330:	99                   	cdq    
c0013331:	c3                   	ret    

c0013332 <SysGetVGAPtr(regs*)>:
c0013332:	55                   	push   ebp
c0013333:	57                   	push   edi
c0013334:	56                   	push   esi
c0013335:	53                   	push   ebx
c0013336:	83 ec 18             	sub    esp,0x18
c0013339:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001333d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013340:	e8 7b 25 00 00       	call   c00158c0 <Thr::processFromPID(int)>
c0013345:	83 c4 10             	add    esp,0x10
c0013348:	89 c1                	mov    ecx,eax
c001334a:	b8 01 00 00 00       	mov    eax,0x1
c001334f:	85 c9                	test   ecx,ecx
c0013351:	74 57                	je     c00133aa <SysGetVGAPtr(regs*)+0x78>
c0013353:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013357:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c001335d:	74 0c                	je     c001336b <SysGetVGAPtr(regs*)+0x39>
c001335f:	83 ec 0c             	sub    esp,0xc
c0013362:	55                   	push   ebp
c0013363:	e8 f9 53 ff ff       	call   c0008761 <setActiveTerminal(VgaText*)>
c0013368:	83 c4 10             	add    esp,0x10
c001336b:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c001336e:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013373:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013376:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013378:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001337b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001337e:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013384:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013387:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001338a:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013390:	50                   	push   eax
c0013391:	50                   	push   eax
c0013392:	68 d0 17 02 c0       	push   0xc00217d0
c0013397:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001339a:	05 a8 0f 00 00       	add    eax,0xfa8
c001339f:	50                   	push   eax
c00133a0:	e8 ab d2 fe ff       	call   c0000650 <strcpy>
c00133a5:	83 c4 10             	add    esp,0x10
c00133a8:	31 c0                	xor    eax,eax
c00133aa:	83 c4 0c             	add    esp,0xc
c00133ad:	31 d2                	xor    edx,edx
c00133af:	5b                   	pop    ebx
c00133b0:	5e                   	pop    esi
c00133b1:	5f                   	pop    edi
c00133b2:	5d                   	pop    ebp
c00133b3:	c3                   	ret    

c00133b4 <SysKill(regs*)>:
c00133b4:	53                   	push   ebx
c00133b5:	83 ec 08             	sub    esp,0x8
c00133b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00133bc:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c00133c0:	75 16                	jne    c00133d8 <SysKill(regs*)+0x24>
c00133c2:	83 ec 0c             	sub    esp,0xc
c00133c5:	68 da 17 02 c0       	push   0xc00217da
c00133ca:	e8 a2 d7 ff ff       	call   c0010b71 <KePanic(char const*)>
c00133cf:	83 c4 10             	add    esp,0x10
c00133d2:	e9 89 00 00 00       	jmp    c0013460 <SysKill(regs*)+0xac>
c00133d7:	90                   	nop
c00133d8:	83 ec 0c             	sub    esp,0xc
c00133db:	68 84 91 02 c0       	push   0xc0029184
c00133e0:	e8 37 bd 00 00       	call   c001f11c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00133e5:	8d 76 00             	lea    esi,[esi+0x0]
c00133e8:	83 c4 10             	add    esp,0x10
c00133eb:	85 c0                	test   eax,eax
c00133ed:	74 19                	je     c0013408 <SysKill(regs*)+0x54>
c00133ef:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00133f2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00133f5:	39 0a                	cmp    DWORD PTR [edx],ecx
c00133f7:	74 33                	je     c001342c <SysKill(regs*)+0x78>
c00133f9:	52                   	push   edx
c00133fa:	52                   	push   edx
c00133fb:	50                   	push   eax
c00133fc:	68 84 91 02 c0       	push   0xc0029184
c0013401:	e8 36 c0 00 00       	call   c001f43c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013406:	eb e0                	jmp    c00133e8 <SysKill(regs*)+0x34>
c0013408:	83 ec 0c             	sub    esp,0xc
c001340b:	68 78 91 02 c0       	push   0xc0029178
c0013410:	e8 07 bd 00 00       	call   c001f11c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013415:	8d 76 00             	lea    esi,[esi+0x0]
c0013418:	83 c4 10             	add    esp,0x10
c001341b:	85 c0                	test   eax,eax
c001341d:	74 41                	je     c0013460 <SysKill(regs*)+0xac>
c001341f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013422:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013425:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013427:	75 27                	jne    c0013450 <SysKill(regs*)+0x9c>
c0013429:	8d 76 00             	lea    esi,[esi+0x0]
c001342c:	51                   	push   ecx
c001342d:	51                   	push   ecx
c001342e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013431:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013436:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013439:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001343f:	e8 cb db ff ff       	call   c001100f <KeRaiseSignal(SigHandlerBlock*, int)>
c0013444:	83 c4 10             	add    esp,0x10
c0013447:	31 c0                	xor    eax,eax
c0013449:	31 d2                	xor    edx,edx
c001344b:	eb 1b                	jmp    c0013468 <SysKill(regs*)+0xb4>
c001344d:	8d 76 00             	lea    esi,[esi+0x0]
c0013450:	52                   	push   edx
c0013451:	52                   	push   edx
c0013452:	50                   	push   eax
c0013453:	68 78 91 02 c0       	push   0xc0029178
c0013458:	e8 df bf 00 00       	call   c001f43c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001345d:	eb b9                	jmp    c0013418 <SysKill(regs*)+0x64>
c001345f:	90                   	nop
c0013460:	83 c8 ff             	or     eax,0xffffffff
c0013463:	89 c2                	mov    edx,eax
c0013465:	8d 76 00             	lea    esi,[esi+0x0]
c0013468:	83 c4 08             	add    esp,0x8
c001346b:	5b                   	pop    ebx
c001346c:	c3                   	ret    

c001346d <SysLoadDLL(regs*)>:
c001346d:	56                   	push   esi
c001346e:	31 d2                	xor    edx,edx
c0013470:	53                   	push   ebx
c0013471:	b8 01 00 00 00       	mov    eax,0x1
c0013476:	51                   	push   ecx
c0013477:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001347b:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001347f:	0f 84 8c 00 00 00    	je     c0013511 <SysLoadDLL(regs*)+0xa4>
c0013485:	83 ec 0c             	sub    esp,0xc
c0013488:	68 14 01 00 00       	push   0x114
c001348d:	e8 39 46 ff ff       	call   c0007acb <malloc>
c0013492:	83 c4 0c             	add    esp,0xc
c0013495:	89 c3                	mov    ebx,eax
c0013497:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001349c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001349f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00134a2:	53                   	push   ebx
c00134a3:	e8 d2 7c ff ff       	call   c000b17a <File::File(char const*, Process*)>
c00134a8:	83 c4 10             	add    esp,0x10
c00134ab:	31 d2                	xor    edx,edx
c00134ad:	85 db                	test   ebx,ebx
c00134af:	b8 02 00 00 00       	mov    eax,0x2
c00134b4:	74 5b                	je     c0013511 <SysLoadDLL(regs*)+0xa4>
c00134b6:	83 ec 0c             	sub    esp,0xc
c00134b9:	53                   	push   ebx
c00134ba:	e8 3b 80 ff ff       	call   c000b4fa <File::exists()>
c00134bf:	83 c4 10             	add    esp,0x10
c00134c2:	84 c0                	test   al,al
c00134c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00134c6:	75 11                	jne    c00134d9 <SysLoadDLL(regs*)+0x6c>
c00134c8:	83 ec 0c             	sub    esp,0xc
c00134cb:	53                   	push   ebx
c00134cc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00134cf:	83 c4 10             	add    esp,0x10
c00134d2:	b8 03 00 00 00       	mov    eax,0x3
c00134d7:	eb 36                	jmp    c001350f <SysLoadDLL(regs*)+0xa2>
c00134d9:	83 ec 0c             	sub    esp,0xc
c00134dc:	53                   	push   ebx
c00134dd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00134e0:	58                   	pop    eax
c00134e1:	5a                   	pop    edx
c00134e2:	6a 00                	push   0x0
c00134e4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00134e7:	e8 1c 15 00 00       	call   c0014a08 <Thr::loadDLL(char const*, bool)>
c00134ec:	83 c4 10             	add    esp,0x10
c00134ef:	31 d2                	xor    edx,edx
c00134f1:	89 c1                	mov    ecx,eax
c00134f3:	b8 04 00 00 00       	mov    eax,0x4
c00134f8:	85 c9                	test   ecx,ecx
c00134fa:	74 15                	je     c0013511 <SysLoadDLL(regs*)+0xa4>
c00134fc:	53                   	push   ebx
c00134fd:	53                   	push   ebx
c00134fe:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0013504:	51                   	push   ecx
c0013505:	e8 3e 17 00 00       	call   c0014c48 <Thr::executeDLL(unsigned long, void*)>
c001350a:	83 c4 10             	add    esp,0x10
c001350d:	31 c0                	xor    eax,eax
c001350f:	31 d2                	xor    edx,edx
c0013511:	59                   	pop    ecx
c0013512:	5b                   	pop    ebx
c0013513:	5e                   	pop    esi
c0013514:	c3                   	ret    

c0013515 <SysRead(regs*)>:
c0013515:	57                   	push   edi
c0013516:	56                   	push   esi
c0013517:	53                   	push   ebx
c0013518:	83 ec 10             	sub    esp,0x10
c001351b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001351f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013522:	83 f8 02             	cmp    eax,0x2
c0013525:	77 10                	ja     c0013537 <SysRead(regs*)+0x22>
c0013527:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001352c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001352f:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013535:	eb 0e                	jmp    c0013545 <SysRead(regs*)+0x30>
c0013537:	83 ec 0c             	sub    esp,0xc
c001353a:	50                   	push   eax
c001353b:	e8 4f 5f ff ff       	call   c000948f <KeGetFileFromDescriptor(int)>
c0013540:	83 c4 10             	add    esp,0x10
c0013543:	89 c1                	mov    ecx,eax
c0013545:	83 c8 ff             	or     eax,0xffffffff
c0013548:	85 c9                	test   ecx,ecx
c001354a:	89 c2                	mov    edx,eax
c001354c:	74 28                	je     c0013576 <SysRead(regs*)+0x61>
c001354e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013556:	83 ec 0c             	sub    esp,0xc
c0013559:	31 ff                	xor    edi,edi
c001355b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001355f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013561:	52                   	push   edx
c0013562:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013565:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013568:	57                   	push   edi
c0013569:	56                   	push   esi
c001356a:	51                   	push   ecx
c001356b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001356e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013572:	83 c4 20             	add    esp,0x20
c0013575:	99                   	cdq    
c0013576:	83 c4 10             	add    esp,0x10
c0013579:	5b                   	pop    ebx
c001357a:	5e                   	pop    esi
c001357b:	5f                   	pop    edi
c001357c:	c3                   	ret    

c001357d <SysRegisterSignal(regs*)>:
c001357d:	83 ec 18             	sub    esp,0x18
c0013580:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013584:	6a 00                	push   0x0
c0013586:	6a 00                	push   0x0
c0013588:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001358b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001358e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013593:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013596:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001359c:	e8 38 da ff ff       	call   c0010fd9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c00135a1:	83 c4 2c             	add    esp,0x2c
c00135a4:	99                   	cdq    
c00135a5:	c3                   	ret    

c00135a6 <SysRegistryGetTypeFromPath(regs*)>:
c00135a6:	57                   	push   edi
c00135a7:	56                   	push   esi
c00135a8:	53                   	push   ebx
c00135a9:	81 ec 38 01 00 00    	sub    esp,0x138
c00135af:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c00135b6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00135b9:	68 fb 17 02 c0       	push   0xc00217fb
c00135be:	e8 3b 73 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c00135c3:	5a                   	pop    edx
c00135c4:	59                   	pop    ecx
c00135c5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00135c8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00135cb:	e8 34 f6 ff ff       	call   c0012c04 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00135d0:	5f                   	pop    edi
c00135d1:	5a                   	pop    edx
c00135d2:	89 c6                	mov    esi,eax
c00135d4:	50                   	push   eax
c00135d5:	68 1b 18 02 c0       	push   0xc002181b
c00135da:	e8 1f 73 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c00135df:	83 c4 10             	add    esp,0x10
c00135e2:	85 f6                	test   esi,esi
c00135e4:	74 28                	je     c001360e <SysRegistryGetTypeFromPath(regs*)+0x68>
c00135e6:	50                   	push   eax
c00135e7:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00135eb:	57                   	push   edi
c00135ec:	56                   	push   esi
c00135ed:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00135f0:	e8 f4 f1 ff ff       	call   c00127e9 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00135f5:	83 c4 0c             	add    esp,0xc
c00135f8:	57                   	push   edi
c00135f9:	50                   	push   eax
c00135fa:	89 c3                	mov    ebx,eax
c00135fc:	68 23 18 02 c0       	push   0xc0021823
c0013601:	e8 f8 72 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0013606:	89 d8                	mov    eax,ebx
c0013608:	83 c4 10             	add    esp,0x10
c001360b:	99                   	cdq    
c001360c:	eb 05                	jmp    c0013613 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c001360e:	83 c8 ff             	or     eax,0xffffffff
c0013611:	89 c2                	mov    edx,eax
c0013613:	81 c4 30 01 00 00    	add    esp,0x130
c0013619:	5b                   	pop    ebx
c001361a:	5e                   	pop    esi
c001361b:	5f                   	pop    edi
c001361c:	c3                   	ret    

c001361d <SysRegistryReadExtent(regs*)>:
c001361d:	83 ec 1c             	sub    esp,0x1c
c0013620:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013624:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013627:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001362a:	85 c0                	test   eax,eax
c001362c:	79 1f                	jns    c001364d <SysRegistryReadExtent(regs*)+0x30>
c001362e:	52                   	push   edx
c001362f:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0013634:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013638:	52                   	push   edx
c0013639:	50                   	push   eax
c001363a:	51                   	push   ecx
c001363b:	e8 9b f0 ff ff       	call   c00126db <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013640:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013644:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013648:	83 c4 10             	add    esp,0x10
c001364b:	eb 14                	jmp    c0013661 <SysRegistryReadExtent(regs*)+0x44>
c001364d:	83 ec 04             	sub    esp,0x4
c0013650:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0013653:	50                   	push   eax
c0013654:	51                   	push   ecx
c0013655:	e8 1f eb ff ff       	call   c0012179 <CmGetString(Reghive_Tag*, int, char*)>
c001365a:	83 c4 10             	add    esp,0x10
c001365d:	31 c0                	xor    eax,eax
c001365f:	31 d2                	xor    edx,edx
c0013661:	83 c4 1c             	add    esp,0x1c
c0013664:	c3                   	ret    

c0013665 <SysRegistryPathToExtentLookup(regs*)>:
c0013665:	53                   	push   ebx
c0013666:	83 ec 10             	sub    esp,0x10
c0013669:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001366d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013670:	68 39 18 02 c0       	push   0xc0021839
c0013675:	e8 84 72 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c001367a:	58                   	pop    eax
c001367b:	5a                   	pop    edx
c001367c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001367f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013682:	e8 7d f5 ff ff       	call   c0012c04 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013687:	83 c4 18             	add    esp,0x18
c001368a:	5b                   	pop    ebx
c001368b:	99                   	cdq    
c001368c:	c3                   	ret    

c001368d <SysRegistryEnterDirectory(regs*)>:
c001368d:	53                   	push   ebx
c001368e:	83 ec 10             	sub    esp,0x10
c0013691:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013695:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013698:	68 5c 18 02 c0       	push   0xc002185c
c001369d:	e8 5c 72 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c00136a2:	58                   	pop    eax
c00136a3:	5a                   	pop    edx
c00136a4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00136a7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00136aa:	e8 41 eb ff ff       	call   c00121f0 <CmEnterDirectory(Reghive_Tag*, int)>
c00136af:	83 c4 18             	add    esp,0x18
c00136b2:	5b                   	pop    ebx
c00136b3:	99                   	cdq    
c00136b4:	c3                   	ret    

c00136b5 <SysRegistryGetNext(regs*)>:
c00136b5:	53                   	push   ebx
c00136b6:	83 ec 10             	sub    esp,0x10
c00136b9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00136bd:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00136c0:	68 7a 18 02 c0       	push   0xc002187a
c00136c5:	e8 34 72 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c00136ca:	58                   	pop    eax
c00136cb:	5a                   	pop    edx
c00136cc:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00136cf:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00136d2:	e8 58 eb ff ff       	call   c001222f <CmGetNext(Reghive_Tag*, int)>
c00136d7:	83 c4 18             	add    esp,0x18
c00136da:	5b                   	pop    ebx
c00136db:	99                   	cdq    
c00136dc:	c3                   	ret    

c00136dd <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c00136dd:	57                   	push   edi
c00136de:	56                   	push   esi
c00136df:	53                   	push   ebx
c00136e0:	81 ec 34 01 00 00    	sub    esp,0x134
c00136e6:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00136ed:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00136f1:	57                   	push   edi
c00136f2:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00136f5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00136f8:	e8 ec f0 ff ff       	call   c00127e9 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00136fd:	89 c3                	mov    ebx,eax
c00136ff:	58                   	pop    eax
c0013700:	5a                   	pop    edx
c0013701:	57                   	push   edi
c0013702:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013705:	e8 46 cf fe ff       	call   c0000650 <strcpy>
c001370a:	81 c4 40 01 00 00    	add    esp,0x140
c0013710:	89 d8                	mov    eax,ebx
c0013712:	5b                   	pop    ebx
c0013713:	99                   	cdq    
c0013714:	5e                   	pop    esi
c0013715:	5f                   	pop    edi
c0013716:	c3                   	ret    

c0013717 <SysRegistryOpen(regs*)>:
c0013717:	83 ec 18             	sub    esp,0x18
c001371a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001371e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013721:	e8 e3 e8 ff ff       	call   c0012009 <CmOpen(char const*)>
c0013726:	83 c4 1c             	add    esp,0x1c
c0013729:	99                   	cdq    
c001372a:	c3                   	ret    

c001372b <SysRegistryClose(regs*)>:
c001372b:	83 ec 18             	sub    esp,0x18
c001372e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013732:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013735:	e8 ed e9 ff ff       	call   c0012127 <CmClose(Reghive_Tag*)>
c001373a:	31 c0                	xor    eax,eax
c001373c:	31 d2                	xor    edx,edx
c001373e:	83 c4 1c             	add    esp,0x1c
c0013741:	c3                   	ret    

c0013742 <SysSbrk(regs*)>:
c0013742:	56                   	push   esi
c0013743:	53                   	push   ebx
c0013744:	50                   	push   eax
c0013745:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001374a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001374e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013751:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0013754:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c001375a:	85 db                	test   ebx,ebx
c001375c:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001375f:	74 02                	je     c0013763 <SysSbrk(regs*)+0x21>
c0013761:	79 06                	jns    c0013769 <SysSbrk(regs*)+0x27>
c0013763:	89 f0                	mov    eax,esi
c0013765:	31 d2                	xor    edx,edx
c0013767:	eb 2a                	jmp    c0013793 <SysSbrk(regs*)+0x51>
c0013769:	83 c8 ff             	or     eax,0xffffffff
c001376c:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0013772:	89 c2                	mov    edx,eax
c0013774:	77 1d                	ja     c0013793 <SysSbrk(regs*)+0x51>
c0013776:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001377c:	50                   	push   eax
c001377d:	68 07 0c 00 00       	push   0xc07
c0013782:	c1 ea 0c             	shr    edx,0xc
c0013785:	52                   	push   edx
c0013786:	51                   	push   ecx
c0013787:	e8 6e 66 ff ff       	call   c0009dfa <VAS::allocatePages(int, int)>
c001378c:	89 f0                	mov    eax,esi
c001378e:	31 d2                	xor    edx,edx
c0013790:	83 c4 10             	add    esp,0x10
c0013793:	59                   	pop    ecx
c0013794:	5b                   	pop    ebx
c0013795:	5e                   	pop    esi
c0013796:	c3                   	ret    

c0013797 <SysSetCwd(regs*)>:
c0013797:	83 ec 14             	sub    esp,0x14
c001379a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001379e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00137a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00137a6:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00137a9:	e8 eb 7d ff ff       	call   c000b599 <Fs::setcwd(Process*, char*)>
c00137ae:	83 c4 1c             	add    esp,0x1c
c00137b1:	99                   	cdq    
c00137b2:	c3                   	ret    

c00137b3 <SysSetTime(regs*)>:
c00137b3:	55                   	push   ebp
c00137b4:	31 c9                	xor    ecx,ecx
c00137b6:	57                   	push   edi
c00137b7:	bd 0c 00 00 00       	mov    ebp,0xc
c00137bc:	56                   	push   esi
c00137bd:	53                   	push   ebx
c00137be:	31 db                	xor    ebx,ebx
c00137c0:	83 ec 10             	sub    esp,0x10
c00137c3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00137c7:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00137ca:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00137cd:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c00137d0:	89 c2                	mov    edx,eax
c00137d2:	c1 e8 05             	shr    eax,0x5
c00137d5:	83 e2 1f             	and    edx,0x1f
c00137d8:	42                   	inc    edx
c00137d9:	81 ef 6c 07 00 00    	sub    edi,0x76c
c00137df:	c1 e7 10             	shl    edi,0x10
c00137e2:	88 d1                	mov    cl,dl
c00137e4:	31 d2                	xor    edx,edx
c00137e6:	f7 f5                	div    ebp
c00137e8:	89 dd                	mov    ebp,ebx
c00137ea:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00137f0:	88 d5                	mov    ch,dl
c00137f2:	31 d2                	xor    edx,edx
c00137f4:	0f b7 c1             	movzx  eax,cx
c00137f7:	09 f8                	or     eax,edi
c00137f9:	bf 3c 00 00 00       	mov    edi,0x3c
c00137fe:	89 c1                	mov    ecx,eax
c0013800:	89 f0                	mov    eax,esi
c0013802:	f7 f7                	div    edi
c0013804:	c1 e2 10             	shl    edx,0x10
c0013807:	09 d5                	or     ebp,edx
c0013809:	31 d2                	xor    edx,edx
c001380b:	f7 f7                	div    edi
c001380d:	89 eb                	mov    ebx,ebp
c001380f:	bf 10 0e 00 00       	mov    edi,0xe10
c0013814:	89 f0                	mov    eax,esi
c0013816:	88 d7                	mov    bh,dl
c0013818:	31 d2                	xor    edx,edx
c001381a:	f7 f7                	div    edi
c001381c:	bf 18 00 00 00       	mov    edi,0x18
c0013821:	31 d2                	xor    edx,edx
c0013823:	f7 f7                	div    edi
c0013825:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001382a:	88 d3                	mov    bl,dl
c001382c:	53                   	push   ebx
c001382d:	51                   	push   ecx
c001382e:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013834:	e8 63 85 ff ff       	call   c000bd9c <Clock::setTimeInDatetimeLocal(datetime_t)>
c0013839:	83 c4 1c             	add    esp,0x1c
c001383c:	31 d2                	xor    edx,edx
c001383e:	5b                   	pop    ebx
c001383f:	5e                   	pop    esi
c0013840:	83 f0 01             	xor    eax,0x1
c0013843:	5f                   	pop    edi
c0013844:	0f b6 c0             	movzx  eax,al
c0013847:	5d                   	pop    ebp
c0013848:	c3                   	ret    

c0013849 <SysTimezone(regs*)>:
c0013849:	53                   	push   ebx
c001384a:	83 ec 08             	sub    esp,0x8
c001384d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013851:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0013855:	75 17                	jne    c001386e <SysTimezone(regs*)+0x25>
c0013857:	83 ec 0c             	sub    esp,0xc
c001385a:	68 91 18 02 c0       	push   0xc0021891
c001385f:	e8 9a 70 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0013864:	83 c8 ff             	or     eax,0xffffffff
c0013867:	83 c4 10             	add    esp,0x10
c001386a:	89 c2                	mov    edx,eax
c001386c:	eb 20                	jmp    c001388e <SysTimezone(regs*)+0x45>
c001386e:	83 ec 0c             	sub    esp,0xc
c0013871:	68 a6 18 02 c0       	push   0xc00218a6
c0013876:	e8 83 70 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c001387b:	58                   	pop    eax
c001387c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001387f:	e8 7c 82 ff ff       	call   c000bb00 <User::loadClockSettings(int)>
c0013884:	83 c4 10             	add    esp,0x10
c0013887:	b8 01 00 00 00       	mov    eax,0x1
c001388c:	31 d2                	xor    edx,edx
c001388e:	83 c4 08             	add    esp,0x8
c0013891:	5b                   	pop    ebx
c0013892:	c3                   	ret    

c0013893 <SysTruncate(regs*)>:
c0013893:	55                   	push   ebp
c0013894:	57                   	push   edi
c0013895:	31 ff                	xor    edi,edi
c0013897:	56                   	push   esi
c0013898:	53                   	push   ebx
c0013899:	83 ec 0c             	sub    esp,0xc
c001389c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00138a0:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00138a3:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c00138a7:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c00138aa:	89 ce                	mov    esi,ecx
c00138ac:	0f 84 9a 00 00 00    	je     c001394c <SysTruncate(regs*)+0xb9>
c00138b2:	83 ec 0c             	sub    esp,0xc
c00138b5:	68 14 01 00 00       	push   0x114
c00138ba:	e8 0c 42 ff ff       	call   c0007acb <malloc>
c00138bf:	83 c4 0c             	add    esp,0xc
c00138c2:	89 c3                	mov    ebx,eax
c00138c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00138c9:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00138cc:	55                   	push   ebp
c00138cd:	53                   	push   ebx
c00138ce:	e8 a7 78 ff ff       	call   c000b17a <File::File(char const*, Process*)>
c00138d3:	83 c4 10             	add    esp,0x10
c00138d6:	31 d2                	xor    edx,edx
c00138d8:	85 db                	test   ebx,ebx
c00138da:	b8 03 00 00 00       	mov    eax,0x3
c00138df:	0f 84 a2 00 00 00    	je     c0013987 <SysTruncate(regs*)+0xf4>
c00138e5:	51                   	push   ecx
c00138e6:	51                   	push   ecx
c00138e7:	6a 02                	push   0x2
c00138e9:	53                   	push   ebx
c00138ea:	e8 47 79 ff ff       	call   c000b236 <File::open(FileOpenMode)>
c00138ef:	83 c4 10             	add    esp,0x10
c00138f2:	85 c0                	test   eax,eax
c00138f4:	74 13                	je     c0013909 <SysTruncate(regs*)+0x76>
c00138f6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138f8:	83 ec 0c             	sub    esp,0xc
c00138fb:	53                   	push   ebx
c00138fc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138ff:	83 c4 10             	add    esp,0x10
c0013902:	b8 04 00 00 00       	mov    eax,0x4
c0013907:	eb 7c                	jmp    c0013985 <SysTruncate(regs*)+0xf2>
c0013909:	52                   	push   edx
c001390a:	57                   	push   edi
c001390b:	56                   	push   esi
c001390c:	53                   	push   ebx
c001390d:	e8 38 7a ff ff       	call   c000b34a <File::truncate(unsigned long long)>
c0013912:	83 c4 10             	add    esp,0x10
c0013915:	85 c0                	test   eax,eax
c0013917:	74 1b                	je     c0013934 <SysTruncate(regs*)+0xa1>
c0013919:	83 ec 0c             	sub    esp,0xc
c001391c:	53                   	push   ebx
c001391d:	e8 72 79 ff ff       	call   c000b294 <File::close()>
c0013922:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013924:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013927:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001392a:	83 c4 10             	add    esp,0x10
c001392d:	b8 05 00 00 00       	mov    eax,0x5
c0013932:	eb 51                	jmp    c0013985 <SysTruncate(regs*)+0xf2>
c0013934:	83 ec 0c             	sub    esp,0xc
c0013937:	53                   	push   ebx
c0013938:	e8 57 79 ff ff       	call   c000b294 <File::close()>
c001393d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001393f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013942:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013945:	83 c4 10             	add    esp,0x10
c0013948:	31 c0                	xor    eax,eax
c001394a:	eb 39                	jmp    c0013985 <SysTruncate(regs*)+0xf2>
c001394c:	31 d2                	xor    edx,edx
c001394e:	83 fd 02             	cmp    ebp,0x2
c0013951:	b8 01 00 00 00       	mov    eax,0x1
c0013956:	7e 2f                	jle    c0013987 <SysTruncate(regs*)+0xf4>
c0013958:	83 ec 0c             	sub    esp,0xc
c001395b:	51                   	push   ecx
c001395c:	e8 2e 5b ff ff       	call   c000948f <KeGetFileFromDescriptor(int)>
c0013961:	83 c4 10             	add    esp,0x10
c0013964:	31 d2                	xor    edx,edx
c0013966:	89 c1                	mov    ecx,eax
c0013968:	b8 02 00 00 00       	mov    eax,0x2
c001396d:	85 c9                	test   ecx,ecx
c001396f:	74 16                	je     c0013987 <SysTruncate(regs*)+0xf4>
c0013971:	50                   	push   eax
c0013972:	57                   	push   edi
c0013973:	56                   	push   esi
c0013974:	51                   	push   ecx
c0013975:	e8 d0 79 ff ff       	call   c000b34a <File::truncate(unsigned long long)>
c001397a:	83 c4 10             	add    esp,0x10
c001397d:	85 c0                	test   eax,eax
c001397f:	0f 95 c0             	setne  al
c0013982:	0f b6 c0             	movzx  eax,al
c0013985:	31 d2                	xor    edx,edx
c0013987:	83 c4 0c             	add    esp,0xc
c001398a:	5b                   	pop    ebx
c001398b:	5e                   	pop    esi
c001398c:	5f                   	pop    edi
c001398d:	5d                   	pop    ebp
c001398e:	c3                   	ret    

c001398f <SysWrite(regs*)>:
c001398f:	57                   	push   edi
c0013990:	56                   	push   esi
c0013991:	53                   	push   ebx
c0013992:	83 ec 10             	sub    esp,0x10
c0013995:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013999:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001399c:	83 f8 02             	cmp    eax,0x2
c001399f:	77 10                	ja     c00139b1 <SysWrite(regs*)+0x22>
c00139a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139a6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00139a9:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00139af:	eb 0e                	jmp    c00139bf <SysWrite(regs*)+0x30>
c00139b1:	83 ec 0c             	sub    esp,0xc
c00139b4:	50                   	push   eax
c00139b5:	e8 d5 5a ff ff       	call   c000948f <KeGetFileFromDescriptor(int)>
c00139ba:	83 c4 10             	add    esp,0x10
c00139bd:	89 c1                	mov    ecx,eax
c00139bf:	83 c8 ff             	or     eax,0xffffffff
c00139c2:	85 c9                	test   ecx,ecx
c00139c4:	89 c2                	mov    edx,eax
c00139c6:	74 28                	je     c00139f0 <SysWrite(regs*)+0x61>
c00139c8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00139d0:	83 ec 0c             	sub    esp,0xc
c00139d3:	31 ff                	xor    edi,edi
c00139d5:	8d 54 24 18          	lea    edx,[esp+0x18]
c00139d9:	8b 01                	mov    eax,DWORD PTR [ecx]
c00139db:	52                   	push   edx
c00139dc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00139df:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00139e2:	57                   	push   edi
c00139e3:	56                   	push   esi
c00139e4:	51                   	push   ecx
c00139e5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00139e8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00139ec:	83 c4 20             	add    esp,0x20
c00139ef:	99                   	cdq    
c00139f0:	83 c4 10             	add    esp,0x10
c00139f3:	5b                   	pop    ebx
c00139f4:	5e                   	pop    esi
c00139f5:	5f                   	pop    edi
c00139f6:	c3                   	ret    

c00139f7 <SysWsbe(regs*)>:
c00139f7:	57                   	push   edi
c00139f8:	b9 0b 00 00 00       	mov    ecx,0xb
c00139fd:	56                   	push   esi
c00139fe:	be e5 18 02 c0       	mov    esi,0xc00218e5
c0013a03:	53                   	push   ebx
c0013a04:	83 ec 30             	sub    esp,0x30
c0013a07:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0013a0b:	fc                   	cld    
c0013a0c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013a0e:	83 ec 0c             	sub    esp,0xc
c0013a11:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0013a15:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a1a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013a1d:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0013a23:	8b 06                	mov    eax,DWORD PTR [esi]
c0013a25:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0013a28:	57                   	push   edi
c0013a29:	e8 52 cb fe ff       	call   c0000580 <strlen>
c0013a2e:	5a                   	pop    edx
c0013a2f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013a33:	52                   	push   edx
c0013a34:	31 d2                	xor    edx,edx
c0013a36:	57                   	push   edi
c0013a37:	52                   	push   edx
c0013a38:	50                   	push   eax
c0013a39:	56                   	push   esi
c0013a3a:	ff d3                	call   ebx
c0013a3c:	83 c4 14             	add    esp,0x14
c0013a3f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0013a43:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013a46:	e8 a9 23 00 00       	call   c0015df4 <terminateTask(int)>
c0013a4b:	83 c4 40             	add    esp,0x40
c0013a4e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0013a53:	5b                   	pop    ebx
c0013a54:	31 d2                	xor    edx,edx
c0013a56:	5e                   	pop    esi
c0013a57:	5f                   	pop    edi
c0013a58:	c3                   	ret    

c0013a59 <SysYield(regs*)>:
c0013a59:	83 ec 0c             	sub    esp,0xc
c0013a5c:	fa                   	cli    
c0013a5d:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c0013a63:	e8 0c 1a 00 00       	call   c0015474 <schedule()>
c0013a68:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0013a6d:	48                   	dec    eax
c0013a6e:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0013a73:	75 01                	jne    c0013a76 <SysYield(regs*)+0x1d>
c0013a75:	fb                   	sti    
c0013a76:	31 c0                	xor    eax,eax
c0013a78:	31 d2                	xor    edx,edx
c0013a7a:	83 c4 0c             	add    esp,0xc
c0013a7d:	c3                   	ret    

c0013a7e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0013a7e:	55                   	push   ebp
c0013a7f:	57                   	push   edi
c0013a80:	56                   	push   esi
c0013a81:	53                   	push   ebx
c0013a82:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0013a88:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0013a93:	74 3b                	je     c0013ad0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013a95:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0013a9d:	74 31                	je     c0013ad0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013a9f:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0013aa7:	75 27                	jne    c0013ad0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013aa9:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0013ab0:	05 00 10 00 00       	add    eax,0x1000
c0013ab5:	89 c2                	mov    edx,eax
c0013ab7:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013abc:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0013ac3:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0013ac9:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0013ad0:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0013ad7:	83 ec 0c             	sub    esp,0xc
c0013ada:	6a 01                	push   0x1
c0013adc:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013ae2:	e8 02 5b ff ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c0013ae7:	83 c4 10             	add    esp,0x10
c0013aea:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013af0:	89 c3                	mov    ebx,eax
c0013af2:	0f 86 26 01 00 00    	jbe    c0013c1e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c0013af8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013b00:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013b07:	c1 ee 0c             	shr    esi,0xc
c0013b0a:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0013b0e:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0013b15:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0013b1c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013b20:	29 ef                	sub    edi,ebp
c0013b22:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0013b26:	0f 83 f9 00 00 00    	jae    c0013c25 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0013b2c:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0013b32:	b8 00 10 00 00       	mov    eax,0x1000
c0013b37:	0f 47 f8             	cmova  edi,eax
c0013b3a:	83 ec 0c             	sub    esp,0xc
c0013b3d:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013b44:	31 d2                	xor    edx,edx
c0013b46:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013b48:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013b4c:	50                   	push   eax
c0013b4d:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013b51:	56                   	push   esi
c0013b52:	52                   	push   edx
c0013b53:	57                   	push   edi
c0013b54:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0013b5b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013b5e:	83 c4 20             	add    esp,0x20
c0013b61:	85 c0                	test   eax,eax
c0013b63:	75 06                	jne    c0013b6b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0013b65:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0013b69:	74 13                	je     c0013b7e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c0013b6b:	83 ec 0c             	sub    esp,0xc
c0013b6e:	53                   	push   ebx
c0013b6f:	e8 89 5d ff ff       	call   c00098fd <Virt::freeKernelVirtualPages(unsigned long)>
c0013b74:	83 c4 10             	add    esp,0x10
c0013b77:	31 c0                	xor    eax,eax
c0013b79:	e9 7c 01 00 00       	jmp    c0013cfa <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c0013b7e:	fa                   	cli    
c0013b7f:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c0013b85:	e8 4b 42 ff ff       	call   c0007dd5 <Phys::allocatePage()>
c0013b8a:	6a 07                	push   0x7
c0013b8c:	53                   	push   ebx
c0013b8d:	50                   	push   eax
c0013b8e:	89 c7                	mov    edi,eax
c0013b90:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b95:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b98:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013b9e:	e8 4f 61 ff ff       	call   c0009cf2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013ba3:	83 c4 0c             	add    esp,0xc
c0013ba6:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013bad:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013bb3:	6a 00                	push   0x0
c0013bb5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013bba:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013bbd:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013bc3:	e8 90 5f ff ff       	call   c0009b58 <VAS::mapOtherVASIn(bool, VAS*)>
c0013bc8:	58                   	pop    eax
c0013bc9:	5a                   	pop    edx
c0013bca:	68 07 0c 00 00       	push   0xc07
c0013bcf:	55                   	push   ebp
c0013bd0:	57                   	push   edi
c0013bd1:	89 df                	mov    edi,ebx
c0013bd3:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013bda:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013be0:	6a 00                	push   0x0
c0013be2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013be7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013bea:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013bf0:	e8 61 63 ff ff       	call   c0009f56 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013bf5:	b9 00 10 00 00       	mov    ecx,0x1000
c0013bfa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013bfc:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0013c01:	83 c4 20             	add    esp,0x20
c0013c04:	48                   	dec    eax
c0013c05:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0013c0a:	85 c0                	test   eax,eax
c0013c0c:	75 01                	jne    c0013c0f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c0013c0e:	fb                   	sti    
c0013c0f:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0013c13:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013c19:	e9 f0 fe ff ff       	jmp    c0013b0e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c0013c1e:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013c25:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013c2c:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013c32:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013c38:	0f 86 ae 00 00 00    	jbe    c0013cec <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0013c3e:	fa                   	cli    
c0013c3f:	51                   	push   ecx
c0013c40:	31 ff                	xor    edi,edi
c0013c42:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013c49:	c1 ee 0c             	shr    esi,0xc
c0013c4c:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c0013c52:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013c58:	6a 00                	push   0x0
c0013c5a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c5f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013c62:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013c68:	e8 eb 5e ff ff       	call   c0009b58 <VAS::mapOtherVASIn(bool, VAS*)>
c0013c6d:	83 c4 10             	add    esp,0x10
c0013c70:	e8 60 41 ff ff       	call   c0007dd5 <Phys::allocatePage()>
c0013c75:	47                   	inc    edi
c0013c76:	6a 07                	push   0x7
c0013c78:	53                   	push   ebx
c0013c79:	50                   	push   eax
c0013c7a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013c7e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013c84:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0013c87:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0013c8d:	e8 60 60 ff ff       	call   c0009cf2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013c92:	58                   	pop    eax
c0013c93:	5a                   	pop    edx
c0013c94:	68 07 0c 00 00       	push   0xc07
c0013c99:	55                   	push   ebp
c0013c9a:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013ca0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ca4:	50                   	push   eax
c0013ca5:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013cac:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013cb2:	6a 00                	push   0x0
c0013cb4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013cb9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013cbc:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013cc2:	e8 8f 62 ff ff       	call   c0009f56 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013cc7:	83 c4 1c             	add    esp,0x1c
c0013cca:	68 00 10 00 00       	push   0x1000
c0013ccf:	6a 00                	push   0x0
c0013cd1:	53                   	push   ebx
c0013cd2:	e8 19 c8 fe ff       	call   c00004f0 <memset>
c0013cd7:	83 c4 10             	add    esp,0x10
c0013cda:	39 fe                	cmp    esi,edi
c0013cdc:	77 92                	ja     c0013c70 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c0013cde:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0013ce3:	48                   	dec    eax
c0013ce4:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0013ce9:	75 01                	jne    c0013cec <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0013ceb:	fb                   	sti    
c0013cec:	83 ec 0c             	sub    esp,0xc
c0013cef:	53                   	push   ebx
c0013cf0:	e8 08 5c ff ff       	call   c00098fd <Virt::freeKernelVirtualPages(unsigned long)>
c0013cf5:	83 c4 10             	add    esp,0x10
c0013cf8:	b0 01                	mov    al,0x1
c0013cfa:	81 c4 2c 10 00 00    	add    esp,0x102c
c0013d00:	5b                   	pop    ebx
c0013d01:	5e                   	pop    esi
c0013d02:	5f                   	pop    edi
c0013d03:	5d                   	pop    ebp
c0013d04:	c3                   	ret    

c0013d05 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0013d05:	55                   	push   ebp
c0013d06:	57                   	push   edi
c0013d07:	56                   	push   esi
c0013d08:	53                   	push   ebx
c0013d09:	83 ec 48             	sub    esp,0x48
c0013d0c:	68 14 01 00 00       	push   0x114
c0013d11:	e8 b5 3d ff ff       	call   c0007acb <malloc>
c0013d16:	83 c4 0c             	add    esp,0xc
c0013d19:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013d1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013d21:	89 c7                	mov    edi,eax
c0013d23:	50                   	push   eax
c0013d24:	e8 51 74 ff ff       	call   c000b17a <File::File(char const*, Process*)>
c0013d29:	58                   	pop    eax
c0013d2a:	5a                   	pop    edx
c0013d2b:	6a 01                	push   0x1
c0013d2d:	57                   	push   edi
c0013d2e:	e8 03 75 ff ff       	call   c000b236 <File::open(FileOpenMode)>
c0013d33:	83 c4 10             	add    esp,0x10
c0013d36:	85 c0                	test   eax,eax
c0013d38:	0f 85 4c 01 00 00    	jne    c0013e8a <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013d3e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0013d46:	83 ec 0c             	sub    esp,0xc
c0013d49:	6a 34                	push   0x34
c0013d4b:	e8 7b 3d ff ff       	call   c0007acb <malloc>
c0013d50:	89 c3                	mov    ebx,eax
c0013d52:	58                   	pop    eax
c0013d53:	8b 07                	mov    eax,DWORD PTR [edi]
c0013d55:	8d 74 24 38          	lea    esi,[esp+0x38]
c0013d59:	56                   	push   esi
c0013d5a:	53                   	push   ebx
c0013d5b:	6a 00                	push   0x0
c0013d5d:	6a 34                	push   0x34
c0013d5f:	57                   	push   edi
c0013d60:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d63:	83 c4 20             	add    esp,0x20
c0013d66:	85 c0                	test   eax,eax
c0013d68:	0f 85 1c 01 00 00    	jne    c0013e8a <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013d6e:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0013d74:	0f 85 10 01 00 00    	jne    c0013e8a <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013d7a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013d7d:	85 c0                	test   eax,eax
c0013d7f:	0f 84 05 01 00 00    	je     c0013e8a <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013d85:	31 d2                	xor    edx,edx
c0013d87:	55                   	push   ebp
c0013d88:	52                   	push   edx
c0013d89:	50                   	push   eax
c0013d8a:	57                   	push   edi
c0013d8b:	e8 64 75 ff ff       	call   c000b2f4 <File::seek(unsigned long long)>
c0013d90:	83 c4 10             	add    esp,0x10
c0013d93:	85 c0                	test   eax,eax
c0013d95:	0f 85 ef 00 00 00    	jne    c0013e8a <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013d9b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013d9e:	83 ec 0c             	sub    esp,0xc
c0013da1:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013da5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0013da9:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013dad:	0f af c2             	imul   eax,edx
c0013db0:	50                   	push   eax
c0013db1:	e8 15 3d ff ff       	call   c0007acb <malloc>
c0013db6:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0013db8:	89 34 24             	mov    DWORD PTR [esp],esi
c0013dbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013dbf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013dc3:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013dc7:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013dcb:	0f af c2             	imul   eax,edx
c0013dce:	99                   	cdq    
c0013dcf:	52                   	push   edx
c0013dd0:	50                   	push   eax
c0013dd1:	57                   	push   edi
c0013dd2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013dd5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0013dd8:	83 c4 20             	add    esp,0x20
c0013ddb:	85 c0                	test   eax,eax
c0013ddd:	0f 84 a7 00 00 00    	je     c0013e8a <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013de3:	31 d2                	xor    edx,edx
c0013de5:	51                   	push   ecx
c0013de6:	52                   	push   edx
c0013de7:	50                   	push   eax
c0013de8:	57                   	push   edi
c0013de9:	e8 06 75 ff ff       	call   c000b2f4 <File::seek(unsigned long long)>
c0013dee:	83 c4 10             	add    esp,0x10
c0013df1:	85 c0                	test   eax,eax
c0013df3:	0f 85 91 00 00 00    	jne    c0013e8a <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013df9:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013dfd:	83 ec 0c             	sub    esp,0xc
c0013e00:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013e04:	0f af c2             	imul   eax,edx
c0013e07:	50                   	push   eax
c0013e08:	e8 be 3c ff ff       	call   c0007acb <malloc>
c0013e0d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0013e0f:	89 34 24             	mov    DWORD PTR [esp],esi
c0013e12:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013e16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e1a:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013e1e:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013e22:	0f af c2             	imul   eax,edx
c0013e25:	99                   	cdq    
c0013e26:	52                   	push   edx
c0013e27:	50                   	push   eax
c0013e28:	57                   	push   edi
c0013e29:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013e2c:	83 c4 20             	add    esp,0x20
c0013e2f:	31 c9                	xor    ecx,ecx
c0013e31:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013e39:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c0013e3d:	0f b7 e9             	movzx  ebp,cx
c0013e40:	0f 83 86 00 00 00    	jae    c0013ecc <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c0013e46:	c1 e5 05             	shl    ebp,0x5
c0013e49:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0013e4d:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c0013e51:	75 73                	jne    c0013ec6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c0013e53:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0013e57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013e5a:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0013e5d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013e61:	52                   	push   edx
c0013e62:	31 d2                	xor    edx,edx
c0013e64:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0013e67:	52                   	push   edx
c0013e68:	50                   	push   eax
c0013e69:	57                   	push   edi
c0013e6a:	e8 85 74 ff ff       	call   c000b2f4 <File::seek(unsigned long long)>
c0013e6f:	83 c4 10             	add    esp,0x10
c0013e72:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013e76:	85 c0                	test   eax,eax
c0013e78:	74 17                	je     c0013e91 <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c0013e7a:	83 ec 0c             	sub    esp,0xc
c0013e7d:	68 11 19 02 c0       	push   0xc0021911
c0013e82:	e8 77 6a ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0013e87:	83 c4 10             	add    esp,0x10
c0013e8a:	31 c0                	xor    eax,eax
c0013e8c:	e9 8b 00 00 00       	jmp    c0013f1c <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c0013e91:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0013e95:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0013e98:	83 ec 0c             	sub    esp,0xc
c0013e9b:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0013e9e:	50                   	push   eax
c0013e9f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013ea3:	56                   	push   esi
c0013ea4:	57                   	push   edi
c0013ea5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0013ea9:	e8 d0 fb ff ff       	call   c0013a7e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0013eae:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0013eb2:	83 c4 20             	add    esp,0x20
c0013eb5:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0013eb9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013ebd:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0013ec2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0013ec6:	41                   	inc    ecx
c0013ec7:	e9 6d ff ff ff       	jmp    c0013e39 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0013ecc:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0013ed0:	83 ec 0c             	sub    esp,0xc
c0013ed3:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013ed7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013edb:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c0013ee1:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0013ee7:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013eec:	05 00 10 00 00       	add    eax,0x1000
c0013ef1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013ef4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ef8:	e8 de 3b ff ff       	call   c0007adb <free>
c0013efd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f00:	e8 d6 3b ff ff       	call   c0007adb <free>
c0013f05:	58                   	pop    eax
c0013f06:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f0a:	e8 cc 3b ff ff       	call   c0007adb <free>
c0013f0f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013f12:	e8 7d 73 ff ff       	call   c000b294 <File::close()>
c0013f17:	83 c4 10             	add    esp,0x10
c0013f1a:	b0 01                	mov    al,0x1
c0013f1c:	83 c4 3c             	add    esp,0x3c
c0013f1f:	5b                   	pop    ebx
c0013f20:	5e                   	pop    esi
c0013f21:	5f                   	pop    edi
c0013f22:	5d                   	pop    ebp
c0013f23:	c3                   	ret    

c0013f24 <Thr::runtimeReferenceHelper()>:
c0013f24:	83 ec 18             	sub    esp,0x18
c0013f27:	68 19 19 02 c0       	push   0xc0021919
c0013f2c:	e8 cd 69 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0013f31:	fa                   	cli    
c0013f32:	83 c4 10             	add    esp,0x10
c0013f35:	eb fe                	jmp    c0013f35 <Thr::runtimeReferenceHelper()+0x11>

c0013f37 <Thr::getAddressOfKernelSymbol(char const*)>:
c0013f37:	57                   	push   edi
c0013f38:	56                   	push   esi
c0013f39:	53                   	push   ebx
c0013f3a:	31 db                	xor    ebx,ebx
c0013f3c:	39 1d 40 91 02 c0    	cmp    DWORD PTR ds:0xc0029140,ebx
c0013f42:	7e 3c                	jle    c0013f80 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0013f44:	8b 34 9d c0 90 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd6f40]
c0013f4b:	31 ff                	xor    edi,edi
c0013f4d:	39 3c 9d c0 8f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd7040],edi
c0013f54:	7e 27                	jle    c0013f7d <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0013f56:	50                   	push   eax
c0013f57:	50                   	push   eax
c0013f58:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f5c:	8b 06                	mov    eax,DWORD PTR [esi]
c0013f5e:	03 04 9d 40 90 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd6fc0]
c0013f65:	50                   	push   eax
c0013f66:	e8 15 c8 fe ff       	call   c0000780 <strcmp>
c0013f6b:	83 c4 10             	add    esp,0x10
c0013f6e:	85 c0                	test   eax,eax
c0013f70:	75 05                	jne    c0013f77 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0013f72:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013f75:	eb 0b                	jmp    c0013f82 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0013f77:	83 c6 10             	add    esi,0x10
c0013f7a:	47                   	inc    edi
c0013f7b:	eb d0                	jmp    c0013f4d <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0013f7d:	43                   	inc    ebx
c0013f7e:	eb bc                	jmp    c0013f3c <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0013f80:	31 c0                	xor    eax,eax
c0013f82:	5b                   	pop    ebx
c0013f83:	5e                   	pop    esi
c0013f84:	5f                   	pop    edi
c0013f85:	c3                   	ret    

c0013f86 <Thr::loadKernelSymbolTable(char const*)>:
c0013f86:	55                   	push   ebp
c0013f87:	57                   	push   edi
c0013f88:	56                   	push   esi
c0013f89:	53                   	push   ebx
c0013f8a:	83 ec 68             	sub    esp,0x68
c0013f8d:	68 14 01 00 00       	push   0x114
c0013f92:	8b 35 90 91 02 c0    	mov    esi,DWORD PTR ds:0xc0029190
c0013f98:	e8 2e 3b ff ff       	call   c0007acb <malloc>
c0013f9d:	83 c4 0c             	add    esp,0xc
c0013fa0:	56                   	push   esi
c0013fa1:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0013fa5:	89 c3                	mov    ebx,eax
c0013fa7:	50                   	push   eax
c0013fa8:	e8 cd 71 ff ff       	call   c000b17a <File::File(char const*, Process*)>
c0013fad:	5e                   	pop    esi
c0013fae:	5f                   	pop    edi
c0013faf:	6a 01                	push   0x1
c0013fb1:	53                   	push   ebx
c0013fb2:	e8 7f 72 ff ff       	call   c000b236 <File::open(FileOpenMode)>
c0013fb7:	83 c4 10             	add    esp,0x10
c0013fba:	85 c0                	test   eax,eax
c0013fbc:	74 0a                	je     c0013fc8 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0013fbe:	83 ec 0c             	sub    esp,0xc
c0013fc1:	68 3b 19 02 c0       	push   0xc002193b
c0013fc6:	eb 34                	jmp    c0013ffc <Thr::loadKernelSymbolTable(char const*)+0x76>
c0013fc8:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0013fd0:	83 ec 0c             	sub    esp,0xc
c0013fd3:	6a 34                	push   0x34
c0013fd5:	e8 f1 3a ff ff       	call   c0007acb <malloc>
c0013fda:	59                   	pop    ecx
c0013fdb:	8d 74 24 34          	lea    esi,[esp+0x34]
c0013fdf:	89 c7                	mov    edi,eax
c0013fe1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013fe3:	56                   	push   esi
c0013fe4:	57                   	push   edi
c0013fe5:	6a 00                	push   0x0
c0013fe7:	6a 34                	push   0x34
c0013fe9:	53                   	push   ebx
c0013fea:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013fed:	83 c4 20             	add    esp,0x20
c0013ff0:	85 c0                	test   eax,eax
c0013ff2:	74 17                	je     c001400b <Thr::loadKernelSymbolTable(char const*)+0x85>
c0013ff4:	83 ec 0c             	sub    esp,0xc
c0013ff7:	68 52 19 02 c0       	push   0xc0021952
c0013ffc:	e8 70 cb ff ff       	call   c0010b71 <KePanic(char const*)>
c0014001:	83 c4 10             	add    esp,0x10
c0014004:	31 c0                	xor    eax,eax
c0014006:	e9 31 02 00 00       	jmp    c001423c <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001400b:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014011:	75 e1                	jne    c0013ff4 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014013:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014016:	85 c0                	test   eax,eax
c0014018:	74 da                	je     c0013ff4 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001401a:	52                   	push   edx
c001401b:	31 d2                	xor    edx,edx
c001401d:	52                   	push   edx
c001401e:	50                   	push   eax
c001401f:	53                   	push   ebx
c0014020:	e8 cf 72 ff ff       	call   c000b2f4 <File::seek(unsigned long long)>
c0014025:	83 c4 10             	add    esp,0x10
c0014028:	85 c0                	test   eax,eax
c001402a:	75 c8                	jne    c0013ff4 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001402c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014030:	83 ec 0c             	sub    esp,0xc
c0014033:	31 ed                	xor    ebp,ebp
c0014035:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014039:	0f af c2             	imul   eax,edx
c001403c:	50                   	push   eax
c001403d:	e8 89 3a ff ff       	call   c0007acb <malloc>
c0014042:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014044:	89 34 24             	mov    DWORD PTR [esp],esi
c0014047:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001404b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001404f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014053:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014057:	0f af c2             	imul   eax,edx
c001405a:	99                   	cdq    
c001405b:	52                   	push   edx
c001405c:	50                   	push   eax
c001405d:	53                   	push   ebx
c001405e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014061:	83 c4 20             	add    esp,0x20
c0014064:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001406c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014074:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001407c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014084:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014088:	0f b7 f5             	movzx  esi,bp
c001408b:	0f 83 a7 00 00 00    	jae    c0014138 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014091:	6b f6 28             	imul   esi,esi,0x28
c0014094:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014098:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001409b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001409f:	50                   	push   eax
c00140a0:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00140a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00140a8:	8b 16                	mov    edx,DWORD PTR [esi]
c00140aa:	6b c0 28             	imul   eax,eax,0x28
c00140ad:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00140b1:	89 d0                	mov    eax,edx
c00140b3:	31 d2                	xor    edx,edx
c00140b5:	52                   	push   edx
c00140b6:	50                   	push   eax
c00140b7:	53                   	push   ebx
c00140b8:	e8 37 72 ff ff       	call   c000b2f4 <File::seek(unsigned long long)>
c00140bd:	83 c4 0c             	add    esp,0xc
c00140c0:	6a 20                	push   0x20
c00140c2:	6a 00                	push   0x0
c00140c4:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00140c8:	52                   	push   edx
c00140c9:	e8 22 c4 fe ff       	call   c00004f0 <memset>
c00140ce:	58                   	pop    eax
c00140cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00140d1:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00140d5:	51                   	push   ecx
c00140d6:	8d 54 24 40          	lea    edx,[esp+0x40]
c00140da:	52                   	push   edx
c00140db:	6a 00                	push   0x0
c00140dd:	6a 1f                	push   0x1f
c00140df:	53                   	push   ebx
c00140e0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00140e3:	83 c4 18             	add    esp,0x18
c00140e6:	68 69 19 02 c0       	push   0xc0021969
c00140eb:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00140ef:	52                   	push   edx
c00140f0:	e8 8b c6 fe ff       	call   c0000780 <strcmp>
c00140f5:	83 c4 10             	add    esp,0x10
c00140f8:	85 c0                	test   eax,eax
c00140fa:	75 0f                	jne    c001410b <Thr::loadKernelSymbolTable(char const*)+0x185>
c00140fc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00140ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014103:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014107:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001410b:	50                   	push   eax
c001410c:	50                   	push   eax
c001410d:	68 71 19 02 c0       	push   0xc0021971
c0014112:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014116:	50                   	push   eax
c0014117:	e8 64 c6 fe ff       	call   c0000780 <strcmp>
c001411c:	83 c4 10             	add    esp,0x10
c001411f:	85 c0                	test   eax,eax
c0014121:	75 0f                	jne    c0014132 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014123:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014126:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001412a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001412e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014132:	45                   	inc    ebp
c0014133:	e9 4c ff ff ff       	jmp    c0014084 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014138:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001413d:	75 10                	jne    c001414f <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001413f:	83 ec 0c             	sub    esp,0xc
c0014142:	68 79 19 02 c0       	push   0xc0021979
c0014147:	e8 25 ca ff ff       	call   c0010b71 <KePanic(char const*)>
c001414c:	83 c4 10             	add    esp,0x10
c001414f:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014154:	75 10                	jne    c0014166 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014156:	83 ec 0c             	sub    esp,0xc
c0014159:	68 79 19 02 c0       	push   0xc0021979
c001415e:	e8 0e ca ff ff       	call   c0010b71 <KePanic(char const*)>
c0014163:	83 c4 10             	add    esp,0x10
c0014166:	50                   	push   eax
c0014167:	31 d2                	xor    edx,edx
c0014169:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001416d:	52                   	push   edx
c001416e:	50                   	push   eax
c001416f:	53                   	push   ebx
c0014170:	e8 7f 71 ff ff       	call   c000b2f4 <File::seek(unsigned long long)>
c0014175:	5a                   	pop    edx
c0014176:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001417a:	e8 4c 39 ff ff       	call   c0007acb <malloc>
c001417f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014183:	31 c9                	xor    ecx,ecx
c0014185:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014189:	8b 03                	mov    eax,DWORD PTR [ebx]
c001418b:	5e                   	pop    esi
c001418c:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014190:	55                   	push   ebp
c0014191:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014195:	51                   	push   ecx
c0014196:	52                   	push   edx
c0014197:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001419b:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001419f:	53                   	push   ebx
c00141a0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00141a3:	83 c4 14             	add    esp,0x14
c00141a6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00141aa:	e8 1c 39 ff ff       	call   c0007acb <malloc>
c00141af:	89 c6                	mov    esi,eax
c00141b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00141b3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00141b6:	56                   	push   esi
c00141b7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00141bb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00141bf:	51                   	push   ecx
c00141c0:	52                   	push   edx
c00141c1:	53                   	push   ebx
c00141c2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00141c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00141c9:	83 c4 1c             	add    esp,0x1c
c00141cc:	8b 15 40 91 02 c0    	mov    edx,DWORD PTR ds:0xc0029140
c00141d2:	c1 e8 04             	shr    eax,0x4
c00141d5:	89 04 95 c0 8f 02 c0 	mov    DWORD PTR [edx*4-0x3ffd7040],eax
c00141dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00141e0:	31 d2                	xor    edx,edx
c00141e2:	52                   	push   edx
c00141e3:	50                   	push   eax
c00141e4:	53                   	push   ebx
c00141e5:	e8 0a 71 ff ff       	call   c000b2f4 <File::seek(unsigned long long)>
c00141ea:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00141ec:	31 d2                	xor    edx,edx
c00141ee:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00141f1:	56                   	push   esi
c00141f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00141f6:	52                   	push   edx
c00141f7:	50                   	push   eax
c00141f8:	53                   	push   ebx
c00141f9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00141fc:	83 c4 14             	add    esp,0x14
c00141ff:	53                   	push   ebx
c0014200:	e8 8f 70 ff ff       	call   c000b294 <File::close()>
c0014205:	5d                   	pop    ebp
c0014206:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001420a:	e8 cc 38 ff ff       	call   c0007adb <free>
c001420f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014212:	e8 c4 38 ff ff       	call   c0007adb <free>
c0014217:	a1 40 91 02 c0       	mov    eax,ds:0xc0029140
c001421c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014220:	83 c4 10             	add    esp,0x10
c0014223:	89 34 85 40 90 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6fc0],esi
c001422a:	8d 50 01             	lea    edx,[eax+0x1]
c001422d:	89 0c 85 c0 90 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6f40],ecx
c0014234:	b0 01                	mov    al,0x1
c0014236:	89 15 40 91 02 c0    	mov    DWORD PTR ds:0xc0029140,edx
c001423c:	83 c4 5c             	add    esp,0x5c
c001423f:	5b                   	pop    ebx
c0014240:	5e                   	pop    esi
c0014241:	5f                   	pop    edi
c0014242:	5d                   	pop    ebp
c0014243:	c3                   	ret    

c0014244 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014244:	55                   	push   ebp
c0014245:	57                   	push   edi
c0014246:	56                   	push   esi
c0014247:	53                   	push   ebx
c0014248:	81 ec 68 03 00 00    	sub    esp,0x368
c001424e:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014255:	8b 35 90 91 02 c0    	mov    esi,DWORD PTR ds:0xc0029190
c001425b:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001425f:	68 14 01 00 00       	push   0x114
c0014264:	e8 62 38 ff ff       	call   c0007acb <malloc>
c0014269:	83 c4 0c             	add    esp,0xc
c001426c:	56                   	push   esi
c001426d:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014274:	50                   	push   eax
c0014275:	89 c3                	mov    ebx,eax
c0014277:	e8 fe 6e ff ff       	call   c000b17a <File::File(char const*, Process*)>
c001427c:	5f                   	pop    edi
c001427d:	5d                   	pop    ebp
c001427e:	6a 01                	push   0x1
c0014280:	53                   	push   ebx
c0014281:	e8 b0 6f ff ff       	call   c000b236 <File::open(FileOpenMode)>
c0014286:	83 c4 10             	add    esp,0x10
c0014289:	85 c0                	test   eax,eax
c001428b:	0f 85 b3 06 00 00    	jne    c0014944 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014291:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014299:	83 ec 0c             	sub    esp,0xc
c001429c:	6a 34                	push   0x34
c001429e:	e8 28 38 ff ff       	call   c0007acb <malloc>
c00142a3:	5e                   	pop    esi
c00142a4:	8d 74 24 54          	lea    esi,[esp+0x54]
c00142a8:	89 c5                	mov    ebp,eax
c00142aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00142ac:	56                   	push   esi
c00142ad:	55                   	push   ebp
c00142ae:	6a 00                	push   0x0
c00142b0:	6a 34                	push   0x34
c00142b2:	53                   	push   ebx
c00142b3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00142b6:	83 c4 20             	add    esp,0x20
c00142b9:	85 c0                	test   eax,eax
c00142bb:	0f 85 83 06 00 00    	jne    c0014944 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00142c1:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c00142c8:	0f 85 76 06 00 00    	jne    c0014944 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00142ce:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00142d1:	85 c0                	test   eax,eax
c00142d3:	0f 84 6b 06 00 00    	je     c0014944 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00142d9:	31 d2                	xor    edx,edx
c00142db:	51                   	push   ecx
c00142dc:	52                   	push   edx
c00142dd:	50                   	push   eax
c00142de:	53                   	push   ebx
c00142df:	e8 10 70 ff ff       	call   c000b2f4 <File::seek(unsigned long long)>
c00142e4:	83 c4 10             	add    esp,0x10
c00142e7:	85 c0                	test   eax,eax
c00142e9:	0f 85 55 06 00 00    	jne    c0014944 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00142ef:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00142f2:	83 ec 0c             	sub    esp,0xc
c00142f5:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c00142f9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00142fd:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014301:	0f af c2             	imul   eax,edx
c0014304:	50                   	push   eax
c0014305:	e8 c1 37 ff ff       	call   c0007acb <malloc>
c001430a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001430c:	89 34 24             	mov    DWORD PTR [esp],esi
c001430f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014313:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014317:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c001431b:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001431f:	0f af c2             	imul   eax,edx
c0014322:	99                   	cdq    
c0014323:	52                   	push   edx
c0014324:	50                   	push   eax
c0014325:	53                   	push   ebx
c0014326:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014329:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c001432c:	83 c4 20             	add    esp,0x20
c001432f:	85 c0                	test   eax,eax
c0014331:	0f 84 0d 06 00 00    	je     c0014944 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014337:	52                   	push   edx
c0014338:	31 d2                	xor    edx,edx
c001433a:	52                   	push   edx
c001433b:	50                   	push   eax
c001433c:	53                   	push   ebx
c001433d:	e8 b2 6f ff ff       	call   c000b2f4 <File::seek(unsigned long long)>
c0014342:	83 c4 10             	add    esp,0x10
c0014345:	85 c0                	test   eax,eax
c0014347:	0f 85 f7 05 00 00    	jne    c0014944 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001434d:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014351:	83 ec 0c             	sub    esp,0xc
c0014354:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014358:	0f af c2             	imul   eax,edx
c001435b:	50                   	push   eax
c001435c:	e8 6a 37 ff ff       	call   c0007acb <malloc>
c0014361:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014363:	89 34 24             	mov    DWORD PTR [esp],esi
c0014366:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001436a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001436e:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014372:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014376:	0f af c2             	imul   eax,edx
c0014379:	99                   	cdq    
c001437a:	52                   	push   edx
c001437b:	50                   	push   eax
c001437c:	53                   	push   ebx
c001437d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014380:	83 c4 20             	add    esp,0x20
c0014383:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0014389:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001438c:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c0014390:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c0014394:	73 78                	jae    c001440e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0014396:	c1 e7 05             	shl    edi,0x5
c0014399:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001439d:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00143a0:	75 63                	jne    c0014405 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c00143a2:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00143a5:	31 d2                	xor    edx,edx
c00143a7:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c00143aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00143ae:	50                   	push   eax
c00143af:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00143b2:	52                   	push   edx
c00143b3:	50                   	push   eax
c00143b4:	53                   	push   ebx
c00143b5:	e8 3a 6f ff ff       	call   c000b2f4 <File::seek(unsigned long long)>
c00143ba:	83 c4 10             	add    esp,0x10
c00143bd:	85 c0                	test   eax,eax
c00143bf:	0f 85 7f 05 00 00    	jne    c0014944 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00143c5:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00143cc:	83 ec 0c             	sub    esp,0xc
c00143cf:	31 d2                	xor    edx,edx
c00143d1:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c00143d5:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00143d7:	01 c6                	add    esi,eax
c00143d9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00143e0:	50                   	push   eax
c00143e1:	56                   	push   esi
c00143e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143e6:	52                   	push   edx
c00143e7:	50                   	push   eax
c00143e8:	53                   	push   ebx
c00143e9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00143ec:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00143ef:	83 c4 1c             	add    esp,0x1c
c00143f2:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00143f5:	50                   	push   eax
c00143f6:	6a 00                	push   0x0
c00143f8:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00143fc:	56                   	push   esi
c00143fd:	e8 ee c0 fe ff       	call   c00004f0 <memset>
c0014402:	83 c4 10             	add    esp,0x10
c0014405:	66 ff 04 24          	inc    WORD PTR [esp]
c0014409:	e9 7b ff ff ff       	jmp    c0014389 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c001440e:	50                   	push   eax
c001440f:	68 00 01 00 00       	push   0x100
c0014414:	6a 00                	push   0x0
c0014416:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001441a:	50                   	push   eax
c001441b:	e8 d0 c0 fe ff       	call   c00004f0 <memset>
c0014420:	83 c4 0c             	add    esp,0xc
c0014423:	68 00 01 00 00       	push   0x100
c0014428:	6a 00                	push   0x0
c001442a:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0014431:	50                   	push   eax
c0014432:	e8 b9 c0 fe ff       	call   c00004f0 <memset>
c0014437:	83 c4 10             	add    esp,0x10
c001443a:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c0014441:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014448:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014450:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014458:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014460:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014468:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001446c:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c0014470:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0014475:	0f 83 16 01 00 00    	jae    c0014591 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c001447b:	6b ff 28             	imul   edi,edi,0x28
c001447e:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c0014482:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0014485:	51                   	push   ecx
c0014486:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c001448a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001448e:	8b 07                	mov    eax,DWORD PTR [edi]
c0014490:	6b d2 28             	imul   edx,edx,0x28
c0014493:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014497:	31 d2                	xor    edx,edx
c0014499:	52                   	push   edx
c001449a:	50                   	push   eax
c001449b:	53                   	push   ebx
c001449c:	e8 53 6e ff ff       	call   c000b2f4 <File::seek(unsigned long long)>
c00144a1:	83 c4 0c             	add    esp,0xc
c00144a4:	6a 20                	push   0x20
c00144a6:	6a 00                	push   0x0
c00144a8:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00144af:	51                   	push   ecx
c00144b0:	e8 3b c0 fe ff       	call   c00004f0 <memset>
c00144b5:	58                   	pop    eax
c00144b6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144b8:	8d 54 24 58          	lea    edx,[esp+0x58]
c00144bc:	52                   	push   edx
c00144bd:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00144c4:	51                   	push   ecx
c00144c5:	6a 00                	push   0x0
c00144c7:	6a 1f                	push   0x1f
c00144c9:	53                   	push   ebx
c00144ca:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00144cd:	83 c4 1c             	add    esp,0x1c
c00144d0:	6a 09                	push   0x9
c00144d2:	68 93 19 02 c0       	push   0xc0021993
c00144d7:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00144de:	51                   	push   ecx
c00144df:	e8 9c be fe ff       	call   c0000380 <memcmp>
c00144e4:	83 c4 10             	add    esp,0x10
c00144e7:	85 c0                	test   eax,eax
c00144e9:	75 1a                	jne    c0014505 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c00144eb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00144ee:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00144f1:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c00144f5:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00144f8:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00144ff:	89 d0                	mov    eax,edx
c0014501:	40                   	inc    eax
c0014502:	89 04 24             	mov    DWORD PTR [esp],eax
c0014505:	52                   	push   edx
c0014506:	6a 09                	push   0x9
c0014508:	68 9d 19 02 c0       	push   0xc002199d
c001450d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014514:	50                   	push   eax
c0014515:	e8 66 be fe ff       	call   c0000380 <memcmp>
c001451a:	83 c4 10             	add    esp,0x10
c001451d:	85 c0                	test   eax,eax
c001451f:	75 1a                	jne    c001453b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c0014521:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014524:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0014527:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c001452b:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001452e:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0014535:	89 c8                	mov    eax,ecx
c0014537:	40                   	inc    eax
c0014538:	89 04 24             	mov    DWORD PTR [esp],eax
c001453b:	50                   	push   eax
c001453c:	50                   	push   eax
c001453d:	68 69 19 02 c0       	push   0xc0021969
c0014542:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014549:	50                   	push   eax
c001454a:	e8 31 c2 fe ff       	call   c0000780 <strcmp>
c001454f:	83 c4 10             	add    esp,0x10
c0014552:	85 c0                	test   eax,eax
c0014554:	75 0b                	jne    c0014561 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c0014556:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001455a:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001455d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014561:	50                   	push   eax
c0014562:	50                   	push   eax
c0014563:	68 71 19 02 c0       	push   0xc0021971
c0014568:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001456f:	50                   	push   eax
c0014570:	e8 0b c2 fe ff       	call   c0000780 <strcmp>
c0014575:	83 c4 10             	add    esp,0x10
c0014578:	85 c0                	test   eax,eax
c001457a:	75 0b                	jne    c0014587 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c001457c:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c0014580:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014583:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014587:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c001458c:	e9 d7 fe ff ff       	jmp    c0014468 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c0014591:	50                   	push   eax
c0014592:	31 d2                	xor    edx,edx
c0014594:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014598:	52                   	push   edx
c0014599:	50                   	push   eax
c001459a:	53                   	push   ebx
c001459b:	e8 54 6d ff ff       	call   c000b2f4 <File::seek(unsigned long long)>
c00145a0:	58                   	pop    eax
c00145a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145a5:	e8 21 35 ff ff       	call   c0007acb <malloc>
c00145aa:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00145ac:	31 d2                	xor    edx,edx
c00145ae:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00145b2:	58                   	pop    eax
c00145b3:	8d 74 24 54          	lea    esi,[esp+0x54]
c00145b7:	56                   	push   esi
c00145b8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00145bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145c0:	52                   	push   edx
c00145c1:	50                   	push   eax
c00145c2:	53                   	push   ebx
c00145c3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00145c6:	83 c4 14             	add    esp,0x14
c00145c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145cd:	e8 f9 34 ff ff       	call   c0007acb <malloc>
c00145d2:	31 d2                	xor    edx,edx
c00145d4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00145d8:	83 c4 0c             	add    esp,0xc
c00145db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145df:	52                   	push   edx
c00145e0:	50                   	push   eax
c00145e1:	53                   	push   ebx
c00145e2:	e8 0d 6d ff ff       	call   c000b2f4 <File::seek(unsigned long long)>
c00145e7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00145e9:	31 d2                	xor    edx,edx
c00145eb:	89 34 24             	mov    DWORD PTR [esp],esi
c00145ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00145f2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00145f6:	52                   	push   edx
c00145f7:	50                   	push   eax
c00145f8:	53                   	push   ebx
c00145f9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00145fc:	83 c4 20             	add    esp,0x20
c00145ff:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c0014604:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001460c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014610:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014614:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0014617:	0f 84 2b 03 00 00    	je     c0014948 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c001461d:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c0014624:	31 d2                	xor    edx,edx
c0014626:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001462a:	c1 e8 03             	shr    eax,0x3
c001462d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014631:	51                   	push   ecx
c0014632:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014636:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001463a:	52                   	push   edx
c001463b:	50                   	push   eax
c001463c:	53                   	push   ebx
c001463d:	e8 b2 6c ff ff       	call   c000b2f4 <File::seek(unsigned long long)>
c0014642:	5e                   	pop    esi
c0014643:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014647:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001464e:	e8 78 34 ff ff       	call   c0007acb <malloc>
c0014653:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014655:	31 d2                	xor    edx,edx
c0014657:	89 c7                	mov    edi,eax
c0014659:	58                   	pop    eax
c001465a:	8d 44 24 58          	lea    eax,[esp+0x58]
c001465e:	50                   	push   eax
c001465f:	57                   	push   edi
c0014660:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014664:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001466b:	52                   	push   edx
c001466c:	50                   	push   eax
c001466d:	53                   	push   ebx
c001466e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014671:	83 c4 20             	add    esp,0x20
c0014674:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001467c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0014680:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0014684:	0f 8d a5 02 00 00    	jge    c001492f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c001468a:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c001468f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014693:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c0014696:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001469a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001469e:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c00146a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00146a6:	c1 e8 08             	shr    eax,0x8
c00146a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00146ad:	89 c2                	mov    edx,eax
c00146af:	c1 e2 04             	shl    edx,0x4
c00146b2:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c00146b6:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00146b9:	85 f6                	test   esi,esi
c00146bb:	0f 85 cf 00 00 00    	jne    c0014790 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00146c1:	83 ec 0c             	sub    esp,0xc
c00146c4:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c00146c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146cc:	03 02                	add    eax,DWORD PTR [edx]
c00146ce:	50                   	push   eax
c00146cf:	e8 63 f8 ff ff       	call   c0013f37 <Thr::getAddressOfKernelSymbol(char const*)>
c00146d4:	83 c4 10             	add    esp,0x10
c00146d7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00146db:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c00146e0:	85 c0                	test   eax,eax
c00146e2:	89 c6                	mov    esi,eax
c00146e4:	0f 85 a6 00 00 00    	jne    c0014790 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00146ea:	83 ec 0c             	sub    esp,0xc
c00146ed:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c00146f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146f5:	03 02                	add    eax,DWORD PTR [edx]
c00146f7:	50                   	push   eax
c00146f8:	e8 5f c6 ff ff       	call   c0010d5c <KeResolveCompatibilitySymbol(char*)>
c00146fd:	83 c4 10             	add    esp,0x10
c0014700:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014704:	85 c0                	test   eax,eax
c0014706:	89 c6                	mov    esi,eax
c0014708:	0f 85 82 00 00 00    	jne    c0014790 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c001470e:	50                   	push   eax
c001470f:	50                   	push   eax
c0014710:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014714:	03 02                	add    eax,DWORD PTR [edx]
c0014716:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001471a:	50                   	push   eax
c001471b:	68 a7 19 02 c0       	push   0xc00219a7
c0014720:	e8 d9 61 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0014725:	58                   	pop    eax
c0014726:	5a                   	pop    edx
c0014727:	68 c1 19 02 c0       	push   0xc00219c1
c001472c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014733:	51                   	push   ecx
c0014734:	e8 17 bf fe ff       	call   c0000650 <strcpy>
c0014739:	59                   	pop    ecx
c001473a:	58                   	pop    eax
c001473b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001473f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014743:	03 02                	add    eax,DWORD PTR [edx]
c0014745:	50                   	push   eax
c0014746:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001474d:	51                   	push   ecx
c001474e:	e8 1d c1 fe ff       	call   c0000870 <strcat>
c0014753:	58                   	pop    eax
c0014754:	5a                   	pop    edx
c0014755:	68 57 1a 02 c0       	push   0xc0021a57
c001475a:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014761:	51                   	push   ecx
c0014762:	e8 09 c1 fe ff       	call   c0000870 <strcat>
c0014767:	83 c4 10             	add    esp,0x10
c001476a:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001476f:	0f 84 77 01 00 00    	je     c00148ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014775:	83 ec 0c             	sub    esp,0xc
c0014778:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001477f:	51                   	push   ecx
c0014780:	e8 ec c3 ff ff       	call   c0010b71 <KePanic(char const*)>
c0014785:	83 c4 10             	add    esp,0x10
c0014788:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001478c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0014790:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0014795:	83 f8 01             	cmp    eax,0x1
c0014798:	0f 85 9b 00 00 00    	jne    c0014839 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c001479e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00147a2:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c00147a9:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c00147ad:	01 d0                	add    eax,edx
c00147af:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c00147b7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00147bb:	0f 94 c0             	sete   al
c00147be:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c00147c6:	0f 94 c1             	sete   cl
c00147c9:	09 c1                	or     ecx,eax
c00147cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00147cf:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00147d4:	0f b6 c9             	movzx  ecx,cl
c00147d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00147d9:	74 41                	je     c001481c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c00147db:	8d 14 06             	lea    edx,[esi+eax*1]
c00147de:	85 c9                	test   ecx,ecx
c00147e0:	75 15                	jne    c00147f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c00147e2:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00147e6:	66 83 f8 0c          	cmp    ax,0xc
c00147ea:	76 05                	jbe    c00147f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c00147ec:	b8 0c 00 00 00       	mov    eax,0xc
c00147f1:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c00147f5:	76 37                	jbe    c001482e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00147f7:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00147fc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014800:	0f 84 e6 00 00 00    	je     c00148ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014806:	83 ec 0c             	sub    esp,0xc
c0014809:	68 d8 19 02 c0       	push   0xc00219d8
c001480e:	e8 5e c3 ff ff       	call   c0010b71 <KePanic(char const*)>
c0014813:	83 c4 10             	add    esp,0x10
c0014816:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001481a:	eb 12                	jmp    c001482e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c001481c:	01 c2                	add    edx,eax
c001481e:	85 c9                	test   ecx,ecx
c0014820:	75 0c                	jne    c001482e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014822:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014826:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c001482a:	77 02                	ja     c001482e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c001482c:	01 f2                	add    edx,esi
c001482e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014832:	89 10                	mov    DWORD PTR [eax],edx
c0014834:	e9 ed 00 00 00       	jmp    c0014926 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0014839:	83 f8 02             	cmp    eax,0x2
c001483c:	0f 85 81 00 00 00    	jne    c00148c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c0014842:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014849:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c001484d:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0014851:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0014859:	74 21                	je     c001487c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c001485b:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014863:	74 17                	je     c001487c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0014865:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c0014869:	ba 0a 00 00 00       	mov    edx,0xa
c001486e:	83 f9 0e             	cmp    ecx,0xe
c0014871:	77 03                	ja     c0014876 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c0014873:	8d 51 fc             	lea    edx,[ecx-0x4]
c0014876:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c001487a:	76 1f                	jbe    c001489b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c001487c:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014881:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014885:	74 65                	je     c00148ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014887:	83 ec 0c             	sub    esp,0xc
c001488a:	68 f4 19 02 c0       	push   0xc00219f4
c001488f:	e8 dd c2 ff ff       	call   c0010b71 <KePanic(char const*)>
c0014894:	83 c4 10             	add    esp,0x10
c0014897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001489b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00148a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00148a2:	74 15                	je     c00148b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c00148a4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00148a8:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c00148af:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c00148b3:	01 d1                	add    ecx,edx
c00148b5:	01 ce                	add    esi,ecx
c00148b7:	eb 06                	jmp    c00148bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c00148b9:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c00148bd:	01 d6                	add    esi,edx
c00148bf:	89 30                	mov    DWORD PTR [eax],esi
c00148c1:	eb 63                	jmp    c0014926 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00148c3:	56                   	push   esi
c00148c4:	56                   	push   esi
c00148c5:	50                   	push   eax
c00148c6:	68 10 1a 02 c0       	push   0xc0021a10
c00148cb:	e8 2e 60 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c00148d0:	83 c4 10             	add    esp,0x10
c00148d3:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00148d8:	74 12                	je     c00148ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00148da:	83 ec 0c             	sub    esp,0xc
c00148dd:	68 1b 1a 02 c0       	push   0xc0021a1b
c00148e2:	e8 8a c2 ff ff       	call   c0010b71 <KePanic(char const*)>
c00148e7:	83 c4 10             	add    esp,0x10
c00148ea:	eb 3a                	jmp    c0014926 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00148ec:	83 ec 0c             	sub    esp,0xc
c00148ef:	53                   	push   ebx
c00148f0:	e8 9f 69 ff ff       	call   c000b294 <File::close()>
c00148f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00148f7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00148fa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00148fd:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014900:	e8 d6 31 ff ff       	call   c0007adb <free>
c0014905:	59                   	pop    ecx
c0014906:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001490a:	e8 cc 31 ff ff       	call   c0007adb <free>
c001490f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014912:	e8 c4 31 ff ff       	call   c0007adb <free>
c0014917:	5b                   	pop    ebx
c0014918:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001491c:	e8 ba 31 ff ff       	call   c0007adb <free>
c0014921:	83 c4 10             	add    esp,0x10
c0014924:	eb 1e                	jmp    c0014944 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014926:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001492a:	e9 4d fd ff ff       	jmp    c001467c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c001492f:	83 ec 0c             	sub    esp,0xc
c0014932:	57                   	push   edi
c0014933:	e8 a3 31 ff ff       	call   c0007adb <free>
c0014938:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001493c:	83 c4 10             	add    esp,0x10
c001493f:	e9 cc fc ff ff       	jmp    c0014610 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c0014944:	31 c0                	xor    eax,eax
c0014946:	eb 32                	jmp    c001497a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c0014948:	83 ec 0c             	sub    esp,0xc
c001494b:	53                   	push   ebx
c001494c:	e8 43 69 ff ff       	call   c000b294 <File::close()>
c0014951:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014953:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014956:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014959:	58                   	pop    eax
c001495a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001495e:	e8 78 31 ff ff       	call   c0007adb <free>
c0014963:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014966:	e8 70 31 ff ff       	call   c0007adb <free>
c001496b:	5a                   	pop    edx
c001496c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014970:	e8 66 31 ff ff       	call   c0007adb <free>
c0014975:	83 c4 10             	add    esp,0x10
c0014978:	b0 01                	mov    al,0x1
c001497a:	81 c4 5c 03 00 00    	add    esp,0x35c
c0014980:	5b                   	pop    ebx
c0014981:	5e                   	pop    esi
c0014982:	5f                   	pop    edi
c0014983:	5d                   	pop    ebp
c0014984:	c3                   	ret    

c0014985 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0014985:	56                   	push   esi
c0014986:	31 d2                	xor    edx,edx
c0014988:	53                   	push   ebx
c0014989:	8b 1d a0 89 02 c0    	mov    ebx,DWORD PTR ds:0xc00289a0
c001498f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014993:	39 d3                	cmp    ebx,edx
c0014995:	7e 1b                	jle    c00149b2 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0014997:	8b 04 95 c0 8b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7440]
c001499e:	39 c8                	cmp    eax,ecx
c00149a0:	77 0d                	ja     c00149af <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00149a2:	8b 34 95 c0 89 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd7640]
c00149a9:	01 c6                	add    esi,eax
c00149ab:	39 ce                	cmp    esi,ecx
c00149ad:	77 05                	ja     c00149b4 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00149af:	42                   	inc    edx
c00149b0:	eb e1                	jmp    c0014993 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00149b2:	31 c0                	xor    eax,eax
c00149b4:	5b                   	pop    ebx
c00149b5:	5e                   	pop    esi
c00149b6:	c3                   	ret    

c00149b7 <Thr::getDriverNameFromAddress(unsigned long)>:
c00149b7:	53                   	push   ebx
c00149b8:	8b 1d a0 89 02 c0    	mov    ebx,DWORD PTR ds:0xc00289a0
c00149be:	31 c0                	xor    eax,eax
c00149c0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00149c4:	39 c3                	cmp    ebx,eax
c00149c6:	7e 22                	jle    c00149ea <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00149c8:	8b 14 85 c0 8b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7440]
c00149cf:	39 ca                	cmp    edx,ecx
c00149d1:	77 14                	ja     c00149e7 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00149d3:	03 14 85 c0 89 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd7640]
c00149da:	39 ca                	cmp    edx,ecx
c00149dc:	76 09                	jbe    c00149e7 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00149de:	8b 04 85 c0 8d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7240]
c00149e5:	eb 05                	jmp    c00149ec <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00149e7:	40                   	inc    eax
c00149e8:	eb da                	jmp    c00149c4 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00149ea:	31 c0                	xor    eax,eax
c00149ec:	5b                   	pop    ebx
c00149ed:	c3                   	ret    

c00149ee <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00149ee:	53                   	push   ebx
c00149ef:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00149f3:	53                   	push   ebx
c00149f4:	e8 8c ff ff ff       	call   c0014985 <Thr::getDriverBaseFromAddress(unsigned long)>
c00149f9:	5a                   	pop    edx
c00149fa:	31 d2                	xor    edx,edx
c00149fc:	85 c0                	test   eax,eax
c00149fe:	74 04                	je     c0014a04 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0014a00:	89 da                	mov    edx,ebx
c0014a02:	29 c2                	sub    edx,eax
c0014a04:	5b                   	pop    ebx
c0014a05:	89 d0                	mov    eax,edx
c0014a07:	c3                   	ret    

c0014a08 <Thr::loadDLL(char const*, bool)>:
c0014a08:	55                   	push   ebp
c0014a09:	57                   	push   edi
c0014a0a:	56                   	push   esi
c0014a0b:	53                   	push   ebx
c0014a0c:	81 ec 34 01 00 00    	sub    esp,0x134
c0014a12:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0014a19:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0014a20:	56                   	push   esi
c0014a21:	68 33 1a 02 c0       	push   0xc0021a33
c0014a26:	e8 d3 5e ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0014a2b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014a32:	e8 94 30 ff ff       	call   c0007acb <malloc>
c0014a37:	83 c4 0c             	add    esp,0xc
c0014a3a:	ff 35 90 91 02 c0    	push   DWORD PTR ds:0xc0029190
c0014a40:	56                   	push   esi
c0014a41:	50                   	push   eax
c0014a42:	89 c3                	mov    ebx,eax
c0014a44:	e8 31 67 ff ff       	call   c000b17a <File::File(char const*, Process*)>
c0014a49:	83 c4 10             	add    esp,0x10
c0014a4c:	85 db                	test   ebx,ebx
c0014a4e:	75 3c                	jne    c0014a8c <Thr::loadDLL(char const*, bool)+0x84>
c0014a50:	89 e8                	mov    eax,ebp
c0014a52:	84 c0                	test   al,al
c0014a54:	0f 84 e1 01 00 00    	je     c0014c3b <Thr::loadDLL(char const*, bool)+0x233>
c0014a5a:	50                   	push   eax
c0014a5b:	50                   	push   eax
c0014a5c:	68 44 1a 02 c0       	push   0xc0021a44
c0014a61:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c0014a65:	57                   	push   edi
c0014a66:	e8 e5 bb fe ff       	call   c0000650 <strcpy>
c0014a6b:	58                   	pop    eax
c0014a6c:	5a                   	pop    edx
c0014a6d:	56                   	push   esi
c0014a6e:	57                   	push   edi
c0014a6f:	e8 fc bd fe ff       	call   c0000870 <strcat>
c0014a74:	59                   	pop    ecx
c0014a75:	58                   	pop    eax
c0014a76:	68 57 1a 02 c0       	push   0xc0021a57
c0014a7b:	57                   	push   edi
c0014a7c:	e8 ef bd fe ff       	call   c0000870 <strcat>
c0014a81:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014a84:	e8 e8 c0 ff ff       	call   c0010b71 <KePanic(char const*)>
c0014a89:	83 c4 10             	add    esp,0x10
c0014a8c:	50                   	push   eax
c0014a8d:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0014a91:	50                   	push   eax
c0014a92:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014a96:	50                   	push   eax
c0014a97:	53                   	push   ebx
c0014a98:	e8 9b 6a ff ff       	call   c000b538 <File::stat(unsigned long long*, bool*)>
c0014a9d:	83 c4 10             	add    esp,0x10
c0014aa0:	85 db                	test   ebx,ebx
c0014aa2:	74 0c                	je     c0014ab0 <Thr::loadDLL(char const*, bool)+0xa8>
c0014aa4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014aa6:	83 ec 0c             	sub    esp,0xc
c0014aa9:	53                   	push   ebx
c0014aaa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014aad:	83 c4 10             	add    esp,0x10
c0014ab0:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0014ab5:	75 0a                	jne    c0014ac1 <Thr::loadDLL(char const*, bool)+0xb9>
c0014ab7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014abb:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0014abf:	75 3e                	jne    c0014aff <Thr::loadDLL(char const*, bool)+0xf7>
c0014ac1:	89 e8                	mov    eax,ebp
c0014ac3:	31 db                	xor    ebx,ebx
c0014ac5:	84 c0                	test   al,al
c0014ac7:	0f 84 6e 01 00 00    	je     c0014c3b <Thr::loadDLL(char const*, bool)+0x233>
c0014acd:	50                   	push   eax
c0014ace:	50                   	push   eax
c0014acf:	68 44 1a 02 c0       	push   0xc0021a44
c0014ad4:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0014ad8:	53                   	push   ebx
c0014ad9:	e8 72 bb fe ff       	call   c0000650 <strcpy>
c0014ade:	58                   	pop    eax
c0014adf:	5a                   	pop    edx
c0014ae0:	56                   	push   esi
c0014ae1:	53                   	push   ebx
c0014ae2:	e8 89 bd fe ff       	call   c0000870 <strcat>
c0014ae7:	59                   	pop    ecx
c0014ae8:	5f                   	pop    edi
c0014ae9:	68 57 1a 02 c0       	push   0xc0021a57
c0014aee:	53                   	push   ebx
c0014aef:	e8 7c bd fe ff       	call   c0000870 <strcat>
c0014af4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014af7:	e8 75 c0 ff ff       	call   c0010b71 <KePanic(char const*)>
c0014afc:	83 c4 10             	add    esp,0x10
c0014aff:	53                   	push   ebx
c0014b00:	6a 03                	push   0x3
c0014b02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014b0a:	05 ff 0f 00 00       	add    eax,0xfff
c0014b0f:	83 d2 00             	adc    edx,0x0
c0014b12:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014b16:	50                   	push   eax
c0014b17:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0014b1d:	e8 d8 52 ff ff       	call   c0009dfa <VAS::allocatePages(int, int)>
c0014b22:	89 c3                	mov    ebx,eax
c0014b24:	58                   	pop    eax
c0014b25:	5a                   	pop    edx
c0014b26:	53                   	push   ebx
c0014b27:	68 b2 01 02 c0       	push   0xc00201b2
c0014b2c:	e8 cd 5d ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0014b31:	89 34 24             	mov    DWORD PTR [esp],esi
c0014b34:	e8 47 ba fe ff       	call   c0000580 <strlen>
c0014b39:	8b 3d a0 89 02 c0    	mov    edi,DWORD PTR ds:0xc00289a0
c0014b3f:	40                   	inc    eax
c0014b40:	89 04 24             	mov    DWORD PTR [esp],eax
c0014b43:	e8 83 2f ff ff       	call   c0007acb <malloc>
c0014b48:	59                   	pop    ecx
c0014b49:	89 04 bd c0 8d 02 c0 	mov    DWORD PTR [edi*4-0x3ffd7240],eax
c0014b50:	a1 a0 89 02 c0       	mov    eax,ds:0xc00289a0
c0014b55:	5f                   	pop    edi
c0014b56:	56                   	push   esi
c0014b57:	ff 34 85 c0 8d 02 c0 	push   DWORD PTR [eax*4-0x3ffd7240]
c0014b5e:	e8 ed ba fe ff       	call   c0000650 <strcpy>
c0014b63:	a1 a0 89 02 c0       	mov    eax,ds:0xc00289a0
c0014b68:	89 1c 85 c0 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7440],ebx
c0014b6f:	8d 50 01             	lea    edx,[eax+0x1]
c0014b72:	89 15 a0 89 02 c0    	mov    DWORD PTR ds:0xc00289a0,edx
c0014b78:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014b7c:	83 c4 0c             	add    esp,0xc
c0014b7f:	6a 01                	push   0x1
c0014b81:	53                   	push   ebx
c0014b82:	56                   	push   esi
c0014b83:	89 14 85 c0 89 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7640],edx
c0014b8a:	e8 b5 f6 ff ff       	call   c0014244 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0014b8f:	83 c4 10             	add    esp,0x10
c0014b92:	89 c7                	mov    edi,eax
c0014b94:	89 f8                	mov    eax,edi
c0014b96:	83 f0 01             	xor    eax,0x1
c0014b99:	84 c0                	test   al,al
c0014b9b:	74 18                	je     c0014bb5 <Thr::loadDLL(char const*, bool)+0x1ad>
c0014b9d:	89 e8                	mov    eax,ebp
c0014b9f:	84 c0                	test   al,al
c0014ba1:	74 12                	je     c0014bb5 <Thr::loadDLL(char const*, bool)+0x1ad>
c0014ba3:	83 ec 0c             	sub    esp,0xc
c0014ba6:	68 59 1a 02 c0       	push   0xc0021a59
c0014bab:	e8 c1 bf ff ff       	call   c0010b71 <KePanic(char const*)>
c0014bb0:	83 c4 10             	add    esp,0x10
c0014bb3:	eb 06                	jmp    c0014bbb <Thr::loadDLL(char const*, bool)+0x1b3>
c0014bb5:	89 f8                	mov    eax,edi
c0014bb7:	84 c0                	test   al,al
c0014bb9:	75 10                	jne    c0014bcb <Thr::loadDLL(char const*, bool)+0x1c3>
c0014bbb:	83 ec 0c             	sub    esp,0xc
c0014bbe:	68 78 1a 02 c0       	push   0xc0021a78
c0014bc3:	e8 a9 bf ff ff       	call   c0010b71 <KePanic(char const*)>
c0014bc8:	83 c4 10             	add    esp,0x10
c0014bcb:	31 f6                	xor    esi,esi
c0014bcd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014bd1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014bd5:	05 ff 0f 00 00       	add    eax,0xfff
c0014bda:	83 d2 00             	adc    edx,0x0
c0014bdd:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014be1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014be5:	c1 ea 0c             	shr    edx,0xc
c0014be8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014bec:	ba 00 00 00 00       	mov    edx,0x0
c0014bf1:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0014bf5:	89 d0                	mov    eax,edx
c0014bf7:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0014bfb:	73 32                	jae    c0014c2f <Thr::loadDLL(char const*, bool)+0x227>
c0014bfd:	50                   	push   eax
c0014bfe:	50                   	push   eax
c0014bff:	89 f0                	mov    eax,esi
c0014c01:	c1 e0 0c             	shl    eax,0xc
c0014c04:	01 d8                	add    eax,ebx
c0014c06:	50                   	push   eax
c0014c07:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0014c0d:	e8 cc 4c ff ff       	call   c00098de <VAS::getPageTableEntry(unsigned long)>
c0014c12:	83 c4 10             	add    esp,0x10
c0014c15:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c17:	a8 60                	test   al,0x60
c0014c19:	75 11                	jne    c0014c2c <Thr::loadDLL(char const*, bool)+0x224>
c0014c1b:	83 ec 0c             	sub    esp,0xc
c0014c1e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014c23:	50                   	push   eax
c0014c24:	e8 43 31 ff ff       	call   c0007d6c <Phys::freePage(unsigned long)>
c0014c29:	83 c4 10             	add    esp,0x10
c0014c2c:	46                   	inc    esi
c0014c2d:	eb 9e                	jmp    c0014bcd <Thr::loadDLL(char const*, bool)+0x1c5>
c0014c2f:	89 f8                	mov    eax,edi
c0014c31:	84 c0                	test   al,al
c0014c33:	b8 00 00 00 00       	mov    eax,0x0
c0014c38:	0f 44 d8             	cmove  ebx,eax
c0014c3b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014c41:	89 d8                	mov    eax,ebx
c0014c43:	5b                   	pop    ebx
c0014c44:	5e                   	pop    esi
c0014c45:	5f                   	pop    edi
c0014c46:	5d                   	pop    ebp
c0014c47:	c3                   	ret    

c0014c48 <Thr::executeDLL(unsigned long, void*)>:
c0014c48:	56                   	push   esi
c0014c49:	53                   	push   ebx
c0014c4a:	52                   	push   edx
c0014c4b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014c4f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014c53:	85 db                	test   ebx,ebx
c0014c55:	75 10                	jne    c0014c67 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0014c57:	83 ec 0c             	sub    esp,0xc
c0014c5a:	68 94 1a 02 c0       	push   0xc0021a94
c0014c5f:	e8 0d bf ff ff       	call   c0010b71 <KePanic(char const*)>
c0014c64:	83 c4 10             	add    esp,0x10
c0014c67:	50                   	push   eax
c0014c68:	50                   	push   eax
c0014c69:	53                   	push   ebx
c0014c6a:	68 be 1a 02 c0       	push   0xc0021abe
c0014c6f:	e8 8a 5c ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0014c74:	89 d8                	mov    eax,ebx
c0014c76:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0014c7a:	83 c4 14             	add    esp,0x14
c0014c7d:	5b                   	pop    ebx
c0014c7e:	5e                   	pop    esi
c0014c7f:	ff e0                	jmp    eax
c0014c81:	66 90                	xchg   ax,ax
c0014c83:	90                   	nop

c0014c84 <userModeEntryPoint(void*)>:
c0014c84:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0014c89:	83 e8 01             	sub    eax,0x1
c0014c8c:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0014c91:	75 01                	jne    c0014c94 <userModeEntryPoint(void*)+0x10>
c0014c93:	fb                   	sti    
c0014c94:	fb                   	sti    
c0014c95:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c9a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014c9d:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0014ca3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014ca7:	e9 93 b5 fe ff       	jmp    c000023f <goToUsermode>

c0014cac <changeTSS>:
c0014cac:	83 ec 14             	sub    esp,0x14
c0014caf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014cb4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014cb7:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0014cbc:	c1 e2 15             	shl    edx,0x15
c0014cbf:	29 d0                	sub    eax,edx
c0014cc1:	50                   	push   eax
c0014cc2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0014cc7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014ccd:	05 7c 11 00 00       	add    eax,0x117c
c0014cd2:	50                   	push   eax
c0014cd3:	e8 58 42 ff ff       	call   c0008f30 <TSS::setESP(unsigned long)>
c0014cd8:	83 c4 1c             	add    esp,0x1c
c0014cdb:	c3                   	ret    

c0014cdc <switchToThread(ThreadControlBlock*)>:
c0014cdc:	57                   	push   edi
c0014cdd:	8b 0d 64 91 02 c0    	mov    ecx,DWORD PTR ds:0xc0029164
c0014ce3:	56                   	push   esi
c0014ce4:	53                   	push   ebx
c0014ce5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014ce9:	85 c9                	test   ecx,ecx
c0014ceb:	0f 85 8b 00 00 00    	jne    c0014d7c <switchToThread(ThreadControlBlock*)+0xa0>
c0014cf1:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0014cf5:	81 fa ff 00 00 00    	cmp    edx,0xff
c0014cfb:	74 7b                	je     c0014d78 <switchToThread(ThreadControlBlock*)+0x9c>
c0014cfd:	b8 00 04 00 00       	mov    eax,0x400
c0014d02:	29 d0                	sub    eax,edx
c0014d04:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0014d07:	d1 f8                	sar    eax,1
c0014d09:	01 d0                	add    eax,edx
c0014d0b:	90                   	nop
c0014d0c:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0014d0f:	e8 04 28 00 00       	call   c0017518 <HalQueryPerformanceCounter()>
c0014d14:	a3 a8 91 02 c0       	mov    ds:0xc00291a8,eax
c0014d19:	89 c6                	mov    esi,eax
c0014d1b:	89 d7                	mov    edi,edx
c0014d1d:	2b 35 98 91 02 c0    	sub    esi,DWORD PTR ds:0xc0029198
c0014d23:	a3 98 91 02 c0       	mov    ds:0xc0029198,eax
c0014d28:	1b 3d 9c 91 02 c0    	sbb    edi,DWORD PTR ds:0xc002919c
c0014d2e:	89 35 a0 91 02 c0    	mov    DWORD PTR ds:0xc00291a0,esi
c0014d34:	89 15 ac 91 02 c0    	mov    DWORD PTR ds:0xc00291ac,edx
c0014d3a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014d40:	89 15 9c 91 02 c0    	mov    DWORD PTR ds:0xc002919c,edx
c0014d46:	89 3d a4 91 02 c0    	mov    DWORD PTR ds:0xc00291a4,edi
c0014d4c:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0014d4f:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0014d52:	01 c6                	add    esi,eax
c0014d54:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0014d57:	11 d7                	adc    edi,edx
c0014d59:	83 ec 0c             	sub    esp,0xc
c0014d5c:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0014d5f:	53                   	push   ebx
c0014d60:	e8 12 b5 fe ff       	call   c0000277 <switchToThreadASM>
c0014d65:	0f 20 c0             	mov    eax,cr0
c0014d68:	83 c8 08             	or     eax,0x8
c0014d6b:	0f 22 c0             	mov    cr0,eax
c0014d6e:	83 c4 10             	add    esp,0x10
c0014d71:	5b                   	pop    ebx
c0014d72:	5e                   	pop    esi
c0014d73:	5f                   	pop    edi
c0014d74:	c3                   	ret    
c0014d75:	8d 76 00             	lea    esi,[esi+0x0]
c0014d78:	31 c0                	xor    eax,eax
c0014d7a:	eb 90                	jmp    c0014d0c <switchToThread(ThreadControlBlock*)+0x30>
c0014d7c:	5b                   	pop    ebx
c0014d7d:	c7 05 60 91 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x1
c0014d87:	5e                   	pop    esi
c0014d88:	5f                   	pop    edi
c0014d89:	c3                   	ret    
c0014d8a:	66 90                	xchg   ax,ax

c0014d8c <Process::addArgs(char**)>:
c0014d8c:	57                   	push   edi
c0014d8d:	56                   	push   esi
c0014d8e:	53                   	push   ebx
c0014d8f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014d93:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0014d97:	85 f6                	test   esi,esi
c0014d99:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c0014da3:	74 4f                	je     c0014df4 <Process::addArgs(char**)+0x68>
c0014da5:	8b 06                	mov    eax,DWORD PTR [esi]
c0014da7:	85 c0                	test   eax,eax
c0014da9:	74 49                	je     c0014df4 <Process::addArgs(char**)+0x68>
c0014dab:	31 db                	xor    ebx,ebx
c0014dad:	8d 76 00             	lea    esi,[esi+0x0]
c0014db0:	83 ec 0c             	sub    esp,0xc
c0014db3:	50                   	push   eax
c0014db4:	e8 c7 b7 fe ff       	call   c0000580 <strlen>
c0014db9:	83 c0 01             	add    eax,0x1
c0014dbc:	89 04 24             	mov    DWORD PTR [esp],eax
c0014dbf:	e8 07 2d ff ff       	call   c0007acb <malloc>
c0014dc4:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c0014dcb:	5a                   	pop    edx
c0014dcc:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c0014dcf:	83 c3 01             	add    ebx,0x1
c0014dd2:	59                   	pop    ecx
c0014dd3:	52                   	push   edx
c0014dd4:	50                   	push   eax
c0014dd5:	e8 76 b8 fe ff       	call   c0000650 <strcpy>
c0014dda:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c0014de0:	83 c4 10             	add    esp,0x10
c0014de3:	83 c1 01             	add    ecx,0x1
c0014de6:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c0014dec:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0014def:	85 c0                	test   eax,eax
c0014df1:	75 bd                	jne    c0014db0 <Process::addArgs(char**)+0x24>
c0014df3:	90                   	nop
c0014df4:	5b                   	pop    ebx
c0014df5:	5e                   	pop    esi
c0014df6:	5f                   	pop    edi
c0014df7:	c3                   	ret    

c0014df8 <Process::Process(char const*, Process*, char**)>:
c0014df8:	56                   	push   esi
c0014df9:	53                   	push   ebx
c0014dfa:	83 ec 14             	sub    esp,0x14
c0014dfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e01:	05 0c 02 00 00       	add    eax,0x20c
c0014e06:	bb 07 00 00 00       	mov    ebx,0x7
c0014e0b:	89 c6                	mov    esi,eax
c0014e0d:	8d 76 00             	lea    esi,[esi+0x0]
c0014e10:	85 db                	test   ebx,ebx
c0014e12:	78 14                	js     c0014e28 <Process::Process(char const*, Process*, char**)+0x30>
c0014e14:	83 ec 0c             	sub    esp,0xc
c0014e17:	56                   	push   esi
c0014e18:	e8 2b a6 00 00       	call   c001f448 <ThreadControlBlock::ThreadControlBlock()>
c0014e1d:	83 c4 10             	add    esp,0x10
c0014e20:	83 c6 5f             	add    esi,0x5f
c0014e23:	83 eb 01             	sub    ebx,0x1
c0014e26:	eb e8                	jmp    c0014e10 <Process::Process(char const*, Process*, char**)+0x18>
c0014e28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e2c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014e33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e37:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014e3e:	83 ec 0c             	sub    esp,0xc
c0014e41:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014e45:	e8 1c bb ff ff       	call   c0010966 <KeNewProcessEnv(Process*)>
c0014e4a:	83 c4 10             	add    esp,0x10
c0014e4d:	89 c2                	mov    edx,eax
c0014e4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e53:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014e59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e5d:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014e66:	a1 e0 2c 02 c0       	mov    eax,ds:0xc0022ce0
c0014e6b:	8d 50 01             	lea    edx,[eax+0x1]
c0014e6e:	89 15 e0 2c 02 c0    	mov    DWORD PTR ds:0xc0022ce0,edx
c0014e74:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014e78:	89 02                	mov    DWORD PTR [edx],eax
c0014e7a:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0014e82:	83 ec 0c             	sub    esp,0xc
c0014e85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014e89:	e8 3d 2c ff ff       	call   c0007acb <malloc>
c0014e8e:	83 c4 10             	add    esp,0x10
c0014e91:	89 c3                	mov    ebx,eax
c0014e93:	83 ec 08             	sub    esp,0x8
c0014e96:	6a 00                	push   0x0
c0014e98:	53                   	push   ebx
c0014e99:	e8 a8 51 ff ff       	call   c000a046 <VAS::VAS(bool)>
c0014e9e:	83 c4 10             	add    esp,0x10
c0014ea1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ea5:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014eab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014eaf:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014eb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ebd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014ec1:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014ec7:	e8 be c0 ff ff       	call   c0010f8a <KeInitSignals()>
c0014ecc:	89 c2                	mov    edx,eax
c0014ece:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ed2:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014ed8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014edc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014ee2:	85 c0                	test   eax,eax
c0014ee4:	74 42                	je     c0014f28 <Process::Process(char const*, Process*, char**)+0x130>
c0014ee6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014eea:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014ef0:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014ef6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014efa:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014f00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f04:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014f0a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014f10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f14:	05 0c 01 00 00       	add    eax,0x10c
c0014f19:	83 ec 08             	sub    esp,0x8
c0014f1c:	52                   	push   edx
c0014f1d:	50                   	push   eax
c0014f1e:	e8 2d b7 fe ff       	call   c0000650 <strcpy>
c0014f23:	83 c4 10             	add    esp,0x10
c0014f26:	eb 64                	jmp    c0014f8c <Process::Process(char const*, Process*, char**)+0x194>
c0014f28:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0014f30:	83 ec 0c             	sub    esp,0xc
c0014f33:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014f37:	e8 8f 2b ff ff       	call   c0007acb <malloc>
c0014f3c:	83 c4 10             	add    esp,0x10
c0014f3f:	89 c3                	mov    ebx,eax
c0014f41:	83 ec 08             	sub    esp,0x8
c0014f44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014f48:	53                   	push   ebx
c0014f49:	e8 10 3d ff ff       	call   c0008c5e <VgaText::VgaText(char const*)>
c0014f4e:	83 c4 10             	add    esp,0x10
c0014f51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f55:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014f5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f5f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014f65:	83 ec 0c             	sub    esp,0xc
c0014f68:	50                   	push   eax
c0014f69:	e8 9e 35 ff ff       	call   c000850c <addToTerminalCycle(VgaText*)>
c0014f6e:	83 c4 10             	add    esp,0x10
c0014f71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f75:	05 0c 01 00 00       	add    eax,0x10c
c0014f7a:	83 ec 08             	sub    esp,0x8
c0014f7d:	68 dd 1a 02 c0       	push   0xc0021add
c0014f82:	50                   	push   eax
c0014f83:	e8 c8 b6 fe ff       	call   c0000650 <strcpy>
c0014f88:	83 c4 10             	add    esp,0x10
c0014f8b:	90                   	nop
c0014f8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f90:	83 c0 0c             	add    eax,0xc
c0014f93:	83 ec 08             	sub    esp,0x8
c0014f96:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014f9a:	50                   	push   eax
c0014f9b:	e8 b0 b6 fe ff       	call   c0000650 <strcpy>
c0014fa0:	83 c4 10             	add    esp,0x10
c0014fa3:	83 ec 08             	sub    esp,0x8
c0014fa6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0014faa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014fae:	e8 d9 fd ff ff       	call   c0014d8c <Process::addArgs(char**)>
c0014fb3:	83 c4 10             	add    esp,0x10
c0014fb6:	83 ec 08             	sub    esp,0x8
c0014fb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014fbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014fc1:	e8 3f ed ff ff       	call   c0013d05 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0014fc6:	83 c4 10             	add    esp,0x10
c0014fc9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014fcd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014fd1:	83 f0 01             	xor    eax,0x1
c0014fd4:	88 c2                	mov    dl,al
c0014fd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fda:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0014fe0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0014fe5:	83 ec 04             	sub    esp,0x4
c0014fe8:	50                   	push   eax
c0014fe9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014fed:	68 34 1b 02 c0       	push   0xc0021b34
c0014ff2:	e8 07 59 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0014ff7:	83 c4 10             	add    esp,0x10
c0014ffa:	90                   	nop
c0014ffb:	83 c4 14             	add    esp,0x14
c0014ffe:	5b                   	pop    ebx
c0014fff:	5e                   	pop    esi
c0015000:	c3                   	ret    
c0015001:	90                   	nop
c0015002:	66 90                	xchg   ax,ax

c0015004 <Process::Process(bool, char const*, Process*, char**)>:
c0015004:	56                   	push   esi
c0015005:	53                   	push   ebx
c0015006:	83 ec 24             	sub    esp,0x24
c0015009:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001500d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015011:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015015:	05 0c 02 00 00       	add    eax,0x20c
c001501a:	bb 07 00 00 00       	mov    ebx,0x7
c001501f:	89 c6                	mov    esi,eax
c0015021:	8d 76 00             	lea    esi,[esi+0x0]
c0015024:	85 db                	test   ebx,ebx
c0015026:	78 14                	js     c001503c <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015028:	83 ec 0c             	sub    esp,0xc
c001502b:	56                   	push   esi
c001502c:	e8 17 a4 00 00       	call   c001f448 <ThreadControlBlock::ThreadControlBlock()>
c0015031:	83 c4 10             	add    esp,0x10
c0015034:	83 c6 5f             	add    esi,0x5f
c0015037:	83 eb 01             	sub    ebx,0x1
c001503a:	eb e8                	jmp    c0015024 <Process::Process(bool, char const*, Process*, char**)+0x20>
c001503c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015040:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015047:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001504b:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015052:	83 ec 0c             	sub    esp,0xc
c0015055:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015059:	e8 08 b9 ff ff       	call   c0010966 <KeNewProcessEnv(Process*)>
c001505e:	83 c4 10             	add    esp,0x10
c0015061:	89 c2                	mov    edx,eax
c0015063:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015067:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001506d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015071:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001507a:	a1 e0 2c 02 c0       	mov    eax,ds:0xc0022ce0
c001507f:	8d 50 01             	lea    edx,[eax+0x1]
c0015082:	89 15 e0 2c 02 c0    	mov    DWORD PTR ds:0xc0022ce0,edx
c0015088:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001508c:	89 02                	mov    DWORD PTR [edx],eax
c001508e:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0015096:	83 ec 0c             	sub    esp,0xc
c0015099:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001509d:	e8 29 2a ff ff       	call   c0007acb <malloc>
c00150a2:	83 c4 10             	add    esp,0x10
c00150a5:	89 c3                	mov    ebx,eax
c00150a7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00150ac:	83 ec 08             	sub    esp,0x8
c00150af:	50                   	push   eax
c00150b0:	53                   	push   ebx
c00150b1:	e8 90 4f ff ff       	call   c000a046 <VAS::VAS(bool)>
c00150b6:	83 c4 10             	add    esp,0x10
c00150b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150bd:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00150c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150c7:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00150d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150d5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00150d9:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00150df:	e8 a6 be ff ff       	call   c0010f8a <KeInitSignals()>
c00150e4:	89 c2                	mov    edx,eax
c00150e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150ea:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00150f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150f4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00150fa:	85 c0                	test   eax,eax
c00150fc:	74 42                	je     c0015140 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c00150fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015102:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015108:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001510e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015112:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001511c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015122:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015128:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001512c:	05 0c 01 00 00       	add    eax,0x10c
c0015131:	83 ec 08             	sub    esp,0x8
c0015134:	52                   	push   edx
c0015135:	50                   	push   eax
c0015136:	e8 15 b5 fe ff       	call   c0000650 <strcpy>
c001513b:	83 c4 10             	add    esp,0x10
c001513e:	eb 64                	jmp    c00151a4 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015140:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015148:	83 ec 0c             	sub    esp,0xc
c001514b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001514f:	e8 77 29 ff ff       	call   c0007acb <malloc>
c0015154:	83 c4 10             	add    esp,0x10
c0015157:	89 c3                	mov    ebx,eax
c0015159:	83 ec 08             	sub    esp,0x8
c001515c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015160:	53                   	push   ebx
c0015161:	e8 f8 3a ff ff       	call   c0008c5e <VgaText::VgaText(char const*)>
c0015166:	83 c4 10             	add    esp,0x10
c0015169:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001516d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015173:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015177:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001517d:	83 ec 0c             	sub    esp,0xc
c0015180:	50                   	push   eax
c0015181:	e8 86 33 ff ff       	call   c000850c <addToTerminalCycle(VgaText*)>
c0015186:	83 c4 10             	add    esp,0x10
c0015189:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001518d:	05 0c 01 00 00       	add    eax,0x10c
c0015192:	83 ec 08             	sub    esp,0x8
c0015195:	68 dd 1a 02 c0       	push   0xc0021add
c001519a:	50                   	push   eax
c001519b:	e8 b0 b4 fe ff       	call   c0000650 <strcpy>
c00151a0:	83 c4 10             	add    esp,0x10
c00151a3:	90                   	nop
c00151a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00151a8:	83 c0 0c             	add    eax,0xc
c00151ab:	83 ec 08             	sub    esp,0x8
c00151ae:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00151b2:	50                   	push   eax
c00151b3:	e8 98 b4 fe ff       	call   c0000650 <strcpy>
c00151b8:	83 c4 10             	add    esp,0x10
c00151bb:	83 ec 08             	sub    esp,0x8
c00151be:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00151c2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00151c6:	e8 c1 fb ff ff       	call   c0014d8c <Process::addArgs(char**)>
c00151cb:	83 c4 10             	add    esp,0x10
c00151ce:	90                   	nop
c00151cf:	83 c4 24             	add    esp,0x24
c00151d2:	5b                   	pop    ebx
c00151d3:	5e                   	pop    esi
c00151d4:	c3                   	ret    
c00151d5:	8d 76 00             	lea    esi,[esi+0x0]

c00151d8 <taskStartupFunction>:
c00151d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151dd:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00151e0:	c3                   	ret    
c00151e1:	90                   	nop
c00151e2:	66 90                	xchg   ax,ax

c00151e4 <Semaphore::Semaphore(int)>:
c00151e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00151e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00151ec:	89 10                	mov    DWORD PTR [eax],edx
c00151ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00151f2:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00151f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00151fd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015204:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015208:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001520f:	90                   	nop
c0015210:	c3                   	ret    
c0015211:	90                   	nop
c0015212:	66 90                	xchg   ax,ax

c0015214 <Mutex::Mutex()>:
c0015214:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015218:	6a 01                	push   0x1
c001521a:	50                   	push   eax
c001521b:	e8 c4 ff ff ff       	call   c00151e4 <Semaphore::Semaphore(int)>
c0015220:	83 c4 08             	add    esp,0x8
c0015223:	90                   	nop
c0015224:	c3                   	ret    
c0015225:	90                   	nop
c0015226:	66 90                	xchg   ax,ax

c0015228 <Process::createThread(void (*)(void*), void*, int)>:
c0015228:	57                   	push   edi
c0015229:	31 c9                	xor    ecx,ecx
c001522b:	56                   	push   esi
c001522c:	53                   	push   ebx
c001522d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015231:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015238:	89 f2                	mov    edx,esi
c001523a:	66 90                	xchg   ax,ax
c001523c:	0f b7 c2             	movzx  eax,dx
c001523f:	80 e2 01             	and    dl,0x1
c0015242:	74 14                	je     c0015258 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015244:	d1 f8                	sar    eax,1
c0015246:	83 c1 01             	add    ecx,0x1
c0015249:	83 f9 10             	cmp    ecx,0x10
c001524c:	89 c2                	mov    edx,eax
c001524e:	75 ec                	jne    c001523c <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015250:	31 db                	xor    ebx,ebx
c0015252:	89 d8                	mov    eax,ebx
c0015254:	5b                   	pop    ebx
c0015255:	5e                   	pop    esi
c0015256:	5f                   	pop    edi
c0015257:	c3                   	ret    
c0015258:	b8 01 00 00 00       	mov    eax,0x1
c001525d:	d3 e0                	shl    eax,cl
c001525f:	09 c6                	or     esi,eax
c0015261:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015268:	8d 04 49             	lea    eax,[ecx+ecx*2]
c001526b:	c1 e0 05             	shl    eax,0x5
c001526e:	29 c8                	sub    eax,ecx
c0015270:	01 d8                	add    eax,ebx
c0015272:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015279:	75 0d                	jne    c0015288 <Process::createThread(void (*)(void*), void*, int)+0x60>
c001527b:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015285:	8d 76 00             	lea    esi,[esi+0x0]
c0015288:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001528e:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0015291:	83 ec 0c             	sub    esp,0xc
c0015294:	c1 e6 05             	shl    esi,0x5
c0015297:	29 ce                	sub    esi,ecx
c0015299:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001529c:	8d 04 33             	lea    eax,[ebx+esi*1]
c001529f:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00152a5:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c00152ab:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00152b1:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c00152b8:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00152be:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00152c2:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00152c8:	89 ca                	mov    edx,ecx
c00152ca:	f7 da                	neg    edx
c00152cc:	c1 e2 15             	shl    edx,0x15
c00152cf:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00152d5:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00152db:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00152df:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00152e9:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00152ef:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00152f3:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00152f9:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015303:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001530d:	68 00 01 00 00       	push   0x100
c0015312:	e8 b4 27 ff ff       	call   c0007acb <malloc>
c0015317:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001531a:	58                   	pop    eax
c001531b:	5a                   	pop    edx
c001531c:	53                   	push   ebx
c001531d:	68 84 91 02 c0       	push   0xc0029184
c0015322:	e8 b9 9e 00 00       	call   c001f1e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015327:	83 c4 10             	add    esp,0x10
c001532a:	89 d8                	mov    eax,ebx
c001532c:	5b                   	pop    ebx
c001532d:	5e                   	pop    esi
c001532e:	5f                   	pop    edi
c001532f:	c3                   	ret    

c0015330 <Process::createUserThread()>:
c0015330:	83 ec 0c             	sub    esp,0xc
c0015333:	68 80 00 00 00       	push   0x80
c0015338:	6a 00                	push   0x0
c001533a:	68 84 4c 01 c0       	push   0xc0014c84
c001533f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015343:	50                   	push   eax
c0015344:	e8 df fe ff ff       	call   c0015228 <Process::createThread(void (*)(void*), void*, int)>
c0015349:	83 c4 1c             	add    esp,0x1c
c001534c:	c3                   	ret    
c001534d:	8d 76 00             	lea    esi,[esi+0x0]

c0015350 <setupMultitasking(void (*)())>:
c0015350:	56                   	push   esi
c0015351:	53                   	push   ebx
c0015352:	83 ec 04             	sub    esp,0x4
c0015355:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015359:	eb 11                	jmp    c001536c <setupMultitasking(void (*)())+0x1c>
c001535b:	90                   	nop
c001535c:	83 ec 0c             	sub    esp,0xc
c001535f:	68 84 91 02 c0       	push   0xc0029184
c0015364:	e8 bb 9d 00 00       	call   c001f124 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015369:	83 c4 10             	add    esp,0x10
c001536c:	83 ec 0c             	sub    esp,0xc
c001536f:	68 84 91 02 c0       	push   0xc0029184
c0015374:	e8 87 9d 00 00       	call   c001f100 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015379:	83 c4 10             	add    esp,0x10
c001537c:	84 c0                	test   al,al
c001537e:	74 dc                	je     c001535c <setupMultitasking(void (*)())+0xc>
c0015380:	83 ec 0c             	sub    esp,0xc
c0015383:	68 24 07 00 00       	push   0x724
c0015388:	e8 3e 27 ff ff       	call   c0007acb <malloc>
c001538d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015394:	6a 00                	push   0x0
c0015396:	68 e1 1a 02 c0       	push   0xc0021ae1
c001539b:	6a 01                	push   0x1
c001539d:	50                   	push   eax
c001539e:	89 c3                	mov    ebx,eax
c00153a0:	e8 5f fc ff ff       	call   c0015004 <Process::Process(bool, char const*, Process*, char**)>
c00153a5:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00153ab:	83 c4 14             	add    esp,0x14
c00153ae:	89 1d 90 91 02 c0    	mov    DWORD PTR ds:0xc0029190,ebx
c00153b4:	50                   	push   eax
c00153b5:	e8 a7 33 ff ff       	call   c0008761 <setActiveTerminal(VgaText*)>
c00153ba:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c00153c1:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00153cb:	83 c8 01             	or     eax,0x1
c00153ce:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c00153d5:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00153db:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00153de:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00153e8:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00153ee:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00153f8:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00153fe:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015408:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0015412:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015418:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001541e:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015428:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0015432:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015439:	e8 8d 26 ff ff       	call   c0007acb <malloc>
c001543e:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0015444:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001544a:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015450:	5a                   	pop    edx
c0015451:	59                   	pop    ecx
c0015452:	68 dd 1a 02 c0       	push   0xc0021add
c0015457:	50                   	push   eax
c0015458:	e8 f3 b1 fe ff       	call   c0000650 <strcpy>
c001545d:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015464:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015468:	83 c4 14             	add    esp,0x14
c001546b:	5b                   	pop    ebx
c001546c:	5e                   	pop    esi
c001546d:	e9 f7 ad fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0015472:	66 90                	xchg   ax,ax

c0015474 <schedule()>:
c0015474:	8b 15 64 91 02 c0    	mov    edx,DWORD PTR ds:0xc0029164
c001547a:	85 d2                	test   edx,edx
c001547c:	74 0e                	je     c001548c <schedule()+0x18>
c001547e:	c7 05 60 91 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x1
c0015488:	c3                   	ret    
c0015489:	8d 76 00             	lea    esi,[esi+0x0]
c001548c:	53                   	push   ebx
c001548d:	83 ec 14             	sub    esp,0x14
c0015490:	68 84 91 02 c0       	push   0xc0029184
c0015495:	e8 66 9c 00 00       	call   c001f100 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001549a:	83 c4 10             	add    esp,0x10
c001549d:	84 c0                	test   al,al
c001549f:	75 3f                	jne    c00154e0 <schedule()+0x6c>
c00154a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154a6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00154a9:	83 fa 01             	cmp    edx,0x1
c00154ac:	74 3a                	je     c00154e8 <schedule()+0x74>
c00154ae:	66 90                	xchg   ax,ax
c00154b0:	83 ec 0c             	sub    esp,0xc
c00154b3:	68 84 91 02 c0       	push   0xc0029184
c00154b8:	e8 5f 9c 00 00       	call   c001f11c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00154bd:	c7 04 24 84 91 02 c0 	mov    DWORD PTR [esp],0xc0029184
c00154c4:	89 c3                	mov    ebx,eax
c00154c6:	e8 59 9c 00 00       	call   c001f124 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00154cb:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00154d2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00154d5:	e8 02 f8 ff ff       	call   c0014cdc <switchToThread(ThreadControlBlock*)>
c00154da:	83 c4 10             	add    esp,0x10
c00154dd:	8d 76 00             	lea    esi,[esi+0x0]
c00154e0:	83 c4 08             	add    esp,0x8
c00154e3:	5b                   	pop    ebx
c00154e4:	c3                   	ret    
c00154e5:	8d 76 00             	lea    esi,[esi+0x0]
c00154e8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00154ef:	83 ec 08             	sub    esp,0x8
c00154f2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154f7:	50                   	push   eax
c00154f8:	68 84 91 02 c0       	push   0xc0029184
c00154fd:	e8 de 9c 00 00       	call   c001f1e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015502:	83 c4 10             	add    esp,0x10
c0015505:	eb a9                	jmp    c00154b0 <schedule()+0x3c>
c0015507:	90                   	nop

c0015508 <Semaphore::tryAcquire()>:
c0015508:	53                   	push   ebx
c0015509:	83 ec 08             	sub    esp,0x8
c001550c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015510:	fa                   	cli    
c0015511:	8b 15 68 91 02 c0    	mov    edx,DWORD PTR ds:0xc0029168
c0015517:	8d 42 01             	lea    eax,[edx+0x1]
c001551a:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c001551f:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c0015524:	8d 58 01             	lea    ebx,[eax+0x1]
c0015527:	89 1d 64 91 02 c0    	mov    DWORD PTR ds:0xc0029164,ebx
c001552d:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0015530:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0015532:	7c 2c                	jl     c0015560 <Semaphore::tryAcquire()+0x58>
c0015534:	a3 64 91 02 c0       	mov    ds:0xc0029164,eax
c0015539:	85 c0                	test   eax,eax
c001553b:	75 0b                	jne    c0015548 <Semaphore::tryAcquire()+0x40>
c001553d:	a1 60 91 02 c0       	mov    eax,ds:0xc0029160
c0015542:	85 c0                	test   eax,eax
c0015544:	75 5a                	jne    c00155a0 <Semaphore::tryAcquire()+0x98>
c0015546:	66 90                	xchg   ax,ax
c0015548:	89 15 68 91 02 c0    	mov    DWORD PTR ds:0xc0029168,edx
c001554e:	31 c0                	xor    eax,eax
c0015550:	85 d2                	test   edx,edx
c0015552:	75 04                	jne    c0015558 <Semaphore::tryAcquire()+0x50>
c0015554:	fb                   	sti    
c0015555:	8d 76 00             	lea    esi,[esi+0x0]
c0015558:	83 c4 08             	add    esp,0x8
c001555b:	5b                   	pop    ebx
c001555c:	c3                   	ret    
c001555d:	8d 76 00             	lea    esi,[esi+0x0]
c0015560:	a3 64 91 02 c0       	mov    ds:0xc0029164,eax
c0015565:	83 c3 01             	add    ebx,0x1
c0015568:	85 c0                	test   eax,eax
c001556a:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001556d:	75 21                	jne    c0015590 <Semaphore::tryAcquire()+0x88>
c001556f:	8b 0d 60 91 02 c0    	mov    ecx,DWORD PTR ds:0xc0029160
c0015575:	85 c9                	test   ecx,ecx
c0015577:	74 17                	je     c0015590 <Semaphore::tryAcquire()+0x88>
c0015579:	c7 05 60 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x0
c0015583:	e8 ec fe ff ff       	call   c0015474 <schedule()>
c0015588:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c001558d:	8d 50 ff             	lea    edx,[eax-0x1]
c0015590:	89 15 68 91 02 c0    	mov    DWORD PTR ds:0xc0029168,edx
c0015596:	85 d2                	test   edx,edx
c0015598:	b0 01                	mov    al,0x1
c001559a:	75 bc                	jne    c0015558 <Semaphore::tryAcquire()+0x50>
c001559c:	eb b6                	jmp    c0015554 <Semaphore::tryAcquire()+0x4c>
c001559e:	66 90                	xchg   ax,ax
c00155a0:	c7 05 60 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x0
c00155aa:	e8 c5 fe ff ff       	call   c0015474 <schedule()>
c00155af:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c00155b4:	8d 50 ff             	lea    edx,[eax-0x1]
c00155b7:	31 c0                	xor    eax,eax
c00155b9:	89 15 68 91 02 c0    	mov    DWORD PTR ds:0xc0029168,edx
c00155bf:	85 d2                	test   edx,edx
c00155c1:	75 95                	jne    c0015558 <Semaphore::tryAcquire()+0x50>
c00155c3:	eb 8f                	jmp    c0015554 <Semaphore::tryAcquire()+0x4c>
c00155c5:	90                   	nop
c00155c6:	66 90                	xchg   ax,ax

c00155c8 <Semaphore::assertLocked(char const*)>:
c00155c8:	83 ec 0c             	sub    esp,0xc
c00155cb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00155cf:	fa                   	cli    
c00155d0:	8b 0d 68 91 02 c0    	mov    ecx,DWORD PTR ds:0xc0029168
c00155d6:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c00155db:	83 c1 01             	add    ecx,0x1
c00155de:	89 0d 68 91 02 c0    	mov    DWORD PTR ds:0xc0029168,ecx
c00155e4:	8d 48 01             	lea    ecx,[eax+0x1]
c00155e7:	89 0d 64 91 02 c0    	mov    DWORD PTR ds:0xc0029164,ecx
c00155ed:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00155ef:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00155f2:	7c 28                	jl     c001561c <Semaphore::assertLocked(char const*)+0x54>
c00155f4:	a3 64 91 02 c0       	mov    ds:0xc0029164,eax
c00155f9:	85 c0                	test   eax,eax
c00155fb:	75 0b                	jne    c0015608 <Semaphore::assertLocked(char const*)+0x40>
c00155fd:	a1 60 91 02 c0       	mov    eax,ds:0xc0029160
c0015602:	85 c0                	test   eax,eax
c0015604:	75 32                	jne    c0015638 <Semaphore::assertLocked(char const*)+0x70>
c0015606:	66 90                	xchg   ax,ax
c0015608:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c001560d:	83 e8 01             	sub    eax,0x1
c0015610:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015615:	75 01                	jne    c0015618 <Semaphore::assertLocked(char const*)+0x50>
c0015617:	fb                   	sti    
c0015618:	83 c4 0c             	add    esp,0xc
c001561b:	c3                   	ret    
c001561c:	83 ec 0c             	sub    esp,0xc
c001561f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015623:	52                   	push   edx
c0015624:	e8 48 b5 ff ff       	call   c0010b71 <KePanic(char const*)>
c0015629:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c001562e:	83 c4 10             	add    esp,0x10
c0015631:	83 e8 01             	sub    eax,0x1
c0015634:	eb be                	jmp    c00155f4 <Semaphore::assertLocked(char const*)+0x2c>
c0015636:	66 90                	xchg   ax,ax
c0015638:	c7 05 60 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x0
c0015642:	e8 2d fe ff ff       	call   c0015474 <schedule()>
c0015647:	eb bf                	jmp    c0015608 <Semaphore::assertLocked(char const*)+0x40>
c0015649:	8d 76 00             	lea    esi,[esi+0x0]

c001564c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001564c:	83 ec 0c             	sub    esp,0xc
c001564f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015654:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015658:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001565b:	e8 14 fe ff ff       	call   c0015474 <schedule()>
c0015660:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015665:	83 e8 01             	sub    eax,0x1
c0015668:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c001566d:	75 01                	jne    c0015670 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c001566f:	fb                   	sti    
c0015670:	83 c4 0c             	add    esp,0xc
c0015673:	c3                   	ret    

c0015674 <blockTask(TaskState)>:
c0015674:	83 ec 0c             	sub    esp,0xc
c0015677:	fa                   	cli    
c0015678:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c001567d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015681:	83 c0 01             	add    eax,0x1
c0015684:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015689:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001568e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015691:	e8 de fd ff ff       	call   c0015474 <schedule()>
c0015696:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c001569b:	83 e8 01             	sub    eax,0x1
c001569e:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c00156a3:	75 03                	jne    c00156a8 <blockTask(TaskState)+0x34>
c00156a5:	fb                   	sti    
c00156a6:	66 90                	xchg   ax,ax
c00156a8:	83 c4 0c             	add    esp,0xc
c00156ab:	c3                   	ret    

c00156ac <waitTask(int, int*, int)>:
c00156ac:	83 ec 18             	sub    esp,0x18
c00156af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00156b8:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00156bb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00156bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156c4:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00156c7:	6a 07                	push   0x7
c00156c9:	e8 a6 ff ff ff       	call   c0015674 <blockTask(TaskState)>
c00156ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156d3:	83 c4 10             	add    esp,0x10
c00156d6:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00156d9:	85 d2                	test   edx,edx
c00156db:	74 0b                	je     c00156e8 <waitTask(int, int*, int)+0x3c>
c00156dd:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00156e0:	89 02                	mov    DWORD PTR [edx],eax
c00156e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156e7:	90                   	nop
c00156e8:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00156eb:	83 c4 0c             	add    esp,0xc
c00156ee:	c3                   	ret    
c00156ef:	90                   	nop

c00156f0 <milliTenthSleepUntil(unsigned int)>:
c00156f0:	83 ec 0c             	sub    esp,0xc
c00156f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156f7:	39 05 8c 84 02 c0    	cmp    DWORD PTR ds:0xc002848c,eax
c00156fd:	76 05                	jbe    c0015704 <milliTenthSleepUntil(unsigned int)+0x14>
c00156ff:	90                   	nop
c0015700:	83 c4 0c             	add    esp,0xc
c0015703:	c3                   	ret    
c0015704:	fa                   	cli    
c0015705:	8b 15 68 91 02 c0    	mov    edx,DWORD PTR ds:0xc0029168
c001570b:	83 ec 08             	sub    esp,0x8
c001570e:	8b 0d 64 91 02 c0    	mov    ecx,DWORD PTR ds:0xc0029164
c0015714:	83 c2 01             	add    edx,0x1
c0015717:	89 15 68 91 02 c0    	mov    DWORD PTR ds:0xc0029168,edx
c001571d:	83 c1 01             	add    ecx,0x1
c0015720:	89 0d 64 91 02 c0    	mov    DWORD PTR ds:0xc0029164,ecx
c0015726:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001572c:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c001572f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015734:	50                   	push   eax
c0015735:	68 78 91 02 c0       	push   0xc0029178
c001573a:	e8 a1 9a 00 00       	call   c001f1e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001573f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0015746:	e8 29 ff ff ff       	call   c0015674 <blockTask(TaskState)>
c001574b:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c0015750:	83 c4 10             	add    esp,0x10
c0015753:	83 e8 01             	sub    eax,0x1
c0015756:	a3 64 91 02 c0       	mov    ds:0xc0029164,eax
c001575b:	85 c0                	test   eax,eax
c001575d:	75 09                	jne    c0015768 <milliTenthSleepUntil(unsigned int)+0x78>
c001575f:	a1 60 91 02 c0       	mov    eax,ds:0xc0029160
c0015764:	85 c0                	test   eax,eax
c0015766:	75 14                	jne    c001577c <milliTenthSleepUntil(unsigned int)+0x8c>
c0015768:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c001576d:	83 e8 01             	sub    eax,0x1
c0015770:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015775:	75 89                	jne    c0015700 <milliTenthSleepUntil(unsigned int)+0x10>
c0015777:	fb                   	sti    
c0015778:	83 c4 0c             	add    esp,0xc
c001577b:	c3                   	ret    
c001577c:	c7 05 60 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x0
c0015786:	e8 e9 fc ff ff       	call   c0015474 <schedule()>
c001578b:	eb db                	jmp    c0015768 <milliTenthSleepUntil(unsigned int)+0x78>
c001578d:	8d 76 00             	lea    esi,[esi+0x0]

c0015790 <milliTenthSleep(unsigned int)>:
c0015790:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015794:	a1 8c 84 02 c0       	mov    eax,ds:0xc002848c
c0015799:	01 c2                	add    edx,eax
c001579b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001579f:	e9 4c ff ff ff       	jmp    c00156f0 <milliTenthSleepUntil(unsigned int)>

c00157a4 <sleep(unsigned int)>:
c00157a4:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c00157ac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00157b0:	eb de                	jmp    c0015790 <milliTenthSleep(unsigned int)>
c00157b2:	66 90                	xchg   ax,ax

c00157b4 <Semaphore::acquire()>:
c00157b4:	83 ec 0c             	sub    esp,0xc
c00157b7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00157bb:	fa                   	cli    
c00157bc:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c00157c1:	83 c0 01             	add    eax,0x1
c00157c4:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c00157c9:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c00157ce:	8d 48 01             	lea    ecx,[eax+0x1]
c00157d1:	89 0d 64 91 02 c0    	mov    DWORD PTR ds:0xc0029164,ecx
c00157d7:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00157da:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c00157dc:	7d 2e                	jge    c001580c <Semaphore::acquire()+0x58>
c00157de:	83 c1 01             	add    ecx,0x1
c00157e1:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00157e4:	a3 64 91 02 c0       	mov    ds:0xc0029164,eax
c00157e9:	85 c0                	test   eax,eax
c00157eb:	75 0b                	jne    c00157f8 <Semaphore::acquire()+0x44>
c00157ed:	a1 60 91 02 c0       	mov    eax,ds:0xc0029160
c00157f2:	85 c0                	test   eax,eax
c00157f4:	75 66                	jne    c001585c <Semaphore::acquire()+0xa8>
c00157f6:	66 90                	xchg   ax,ax
c00157f8:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c00157fd:	83 e8 01             	sub    eax,0x1
c0015800:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015805:	75 01                	jne    c0015808 <Semaphore::acquire()+0x54>
c0015807:	fb                   	sti    
c0015808:	83 c4 0c             	add    esp,0xc
c001580b:	c3                   	ret    
c001580c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015811:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0015818:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001581b:	85 c9                	test   ecx,ecx
c001581d:	74 51                	je     c0015870 <Semaphore::acquire()+0xbc>
c001581f:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0015822:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015828:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001582b:	90                   	nop
c001582c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015831:	83 ec 0c             	sub    esp,0xc
c0015834:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0015837:	68 60 1b 02 c0       	push   0xc0021b60
c001583c:	e8 bd 50 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0015841:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0015848:	e8 27 fe ff ff       	call   c0015674 <blockTask(TaskState)>
c001584d:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c0015852:	83 c4 10             	add    esp,0x10
c0015855:	83 e8 01             	sub    eax,0x1
c0015858:	eb 8a                	jmp    c00157e4 <Semaphore::acquire()+0x30>
c001585a:	66 90                	xchg   ax,ax
c001585c:	c7 05 60 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x0
c0015866:	e8 09 fc ff ff       	call   c0015474 <schedule()>
c001586b:	eb 8b                	jmp    c00157f8 <Semaphore::acquire()+0x44>
c001586d:	8d 76 00             	lea    esi,[esi+0x0]
c0015870:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015875:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015878:	eb b2                	jmp    c001582c <Semaphore::acquire()+0x78>
c001587a:	66 90                	xchg   ax,ax

c001587c <taskReturned>:
c001587c:	83 ec 18             	sub    esp,0x18
c001587f:	68 80 1b 02 c0       	push   0xc0021b80
c0015884:	e8 e8 b2 ff ff       	call   c0010b71 <KePanic(char const*)>
c0015889:	83 c4 10             	add    esp,0x10
c001588c:	83 ec 0c             	sub    esp,0xc
c001588f:	6a 02                	push   0x2
c0015891:	e8 de fd ff ff       	call   c0015674 <blockTask(TaskState)>
c0015896:	fa                   	cli    
c0015897:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c001589c:	83 c0 01             	add    eax,0x1
c001589f:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c00158a4:	e8 cb fb ff ff       	call   c0015474 <schedule()>
c00158a9:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c00158ae:	83 c4 10             	add    esp,0x10
c00158b1:	83 e8 01             	sub    eax,0x1
c00158b4:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c00158b9:	85 c0                	test   eax,eax
c00158bb:	75 cf                	jne    c001588c <taskReturned+0x10>
c00158bd:	fb                   	sti    
c00158be:	eb cc                	jmp    c001588c <taskReturned+0x10>

c00158c0 <Thr::processFromPID(int)>:
c00158c0:	57                   	push   edi
c00158c1:	56                   	push   esi
c00158c2:	53                   	push   ebx
c00158c3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00158c7:	fa                   	cli    
c00158c8:	8b 0d 68 91 02 c0    	mov    ecx,DWORD PTR ds:0xc0029168
c00158ce:	83 ec 0c             	sub    esp,0xc
c00158d1:	68 84 91 02 c0       	push   0xc0029184
c00158d6:	83 c1 01             	add    ecx,0x1
c00158d9:	89 0d 68 91 02 c0    	mov    DWORD PTR ds:0xc0029168,ecx
c00158df:	e8 38 98 00 00       	call   c001f11c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00158e4:	83 c4 10             	add    esp,0x10
c00158e7:	89 c7                	mov    edi,eax
c00158e9:	eb 15                	jmp    c0015900 <Thr::processFromPID(int)+0x40>
c00158eb:	90                   	nop
c00158ec:	83 ec 0c             	sub    esp,0xc
c00158ef:	68 84 91 02 c0       	push   0xc0029184
c00158f4:	e8 23 98 00 00       	call   c001f11c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00158f9:	83 c4 10             	add    esp,0x10
c00158fc:	39 f8                	cmp    eax,edi
c00158fe:	74 50                	je     c0015950 <Thr::processFromPID(int)+0x90>
c0015900:	83 ec 0c             	sub    esp,0xc
c0015903:	68 84 91 02 c0       	push   0xc0029184
c0015908:	e8 0f 98 00 00       	call   c001f11c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001590d:	c7 04 24 84 91 02 c0 	mov    DWORD PTR [esp],0xc0029184
c0015914:	89 c3                	mov    ebx,eax
c0015916:	e8 09 98 00 00       	call   c001f124 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001591b:	58                   	pop    eax
c001591c:	5a                   	pop    edx
c001591d:	53                   	push   ebx
c001591e:	68 84 91 02 c0       	push   0xc0029184
c0015923:	e8 b8 98 00 00       	call   c001f1e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015928:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001592b:	83 c4 10             	add    esp,0x10
c001592e:	39 30                	cmp    DWORD PTR [eax],esi
c0015930:	75 ba                	jne    c00158ec <Thr::processFromPID(int)+0x2c>
c0015932:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015937:	83 e8 01             	sub    eax,0x1
c001593a:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c001593f:	74 0b                	je     c001594c <Thr::processFromPID(int)+0x8c>
c0015941:	8d 76 00             	lea    esi,[esi+0x0]
c0015944:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015947:	90                   	nop
c0015948:	5b                   	pop    ebx
c0015949:	5e                   	pop    esi
c001594a:	5f                   	pop    edi
c001594b:	c3                   	ret    
c001594c:	fb                   	sti    
c001594d:	eb f5                	jmp    c0015944 <Thr::processFromPID(int)+0x84>
c001594f:	90                   	nop
c0015950:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015955:	8d 50 ff             	lea    edx,[eax-0x1]
c0015958:	31 c0                	xor    eax,eax
c001595a:	89 15 68 91 02 c0    	mov    DWORD PTR ds:0xc0029168,edx
c0015960:	85 d2                	test   edx,edx
c0015962:	75 e4                	jne    c0015948 <Thr::processFromPID(int)+0x88>
c0015964:	fb                   	sti    
c0015965:	5b                   	pop    ebx
c0015966:	5e                   	pop    esi
c0015967:	5f                   	pop    edi
c0015968:	c3                   	ret    
c0015969:	8d 76 00             	lea    esi,[esi+0x0]

c001596c <unblockTask(ThreadControlBlock*)>:
c001596c:	53                   	push   ebx
c001596d:	83 ec 08             	sub    esp,0x8
c0015970:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015974:	fa                   	cli    
c0015975:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c001597a:	83 c0 01             	add    eax,0x1
c001597d:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015982:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015985:	85 c0                	test   eax,eax
c0015987:	74 67                	je     c00159f0 <unblockTask(ThreadControlBlock*)+0x84>
c0015989:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001598c:	83 f8 01             	cmp    eax,0x1
c001598f:	74 37                	je     c00159c8 <unblockTask(ThreadControlBlock*)+0x5c>
c0015991:	83 ec 0c             	sub    esp,0xc
c0015994:	68 84 91 02 c0       	push   0xc0029184
c0015999:	e8 7e 97 00 00       	call   c001f11c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001599e:	83 c4 10             	add    esp,0x10
c00159a1:	85 c0                	test   eax,eax
c00159a3:	75 1b                	jne    c00159c0 <unblockTask(ThreadControlBlock*)+0x54>
c00159a5:	eb 5d                	jmp    c0015a04 <unblockTask(ThreadControlBlock*)+0x98>
c00159a7:	90                   	nop
c00159a8:	83 ec 08             	sub    esp,0x8
c00159ab:	50                   	push   eax
c00159ac:	68 84 91 02 c0       	push   0xc0029184
c00159b1:	e8 86 9a 00 00       	call   c001f43c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00159b6:	83 c4 10             	add    esp,0x10
c00159b9:	85 c0                	test   eax,eax
c00159bb:	74 47                	je     c0015a04 <unblockTask(ThreadControlBlock*)+0x98>
c00159bd:	8d 76 00             	lea    esi,[esi+0x0]
c00159c0:	39 c3                	cmp    ebx,eax
c00159c2:	75 e4                	jne    c00159a8 <unblockTask(ThreadControlBlock*)+0x3c>
c00159c4:	eb 12                	jmp    c00159d8 <unblockTask(ThreadControlBlock*)+0x6c>
c00159c6:	66 90                	xchg   ax,ax
c00159c8:	83 ec 0c             	sub    esp,0xc
c00159cb:	68 ff 1a 02 c0       	push   0xc0021aff
c00159d0:	e8 29 4f ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c00159d5:	83 c4 10             	add    esp,0x10
c00159d8:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c00159dd:	83 e8 01             	sub    eax,0x1
c00159e0:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c00159e5:	75 01                	jne    c00159e8 <unblockTask(ThreadControlBlock*)+0x7c>
c00159e7:	fb                   	sti    
c00159e8:	83 c4 08             	add    esp,0x8
c00159eb:	5b                   	pop    ebx
c00159ec:	c3                   	ret    
c00159ed:	8d 76 00             	lea    esi,[esi+0x0]
c00159f0:	83 ec 0c             	sub    esp,0xc
c00159f3:	68 e8 1a 02 c0       	push   0xc0021ae8
c00159f8:	e8 01 4f ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c00159fd:	83 c4 10             	add    esp,0x10
c0015a00:	eb d6                	jmp    c00159d8 <unblockTask(ThreadControlBlock*)+0x6c>
c0015a02:	66 90                	xchg   ax,ax
c0015a04:	83 ec 08             	sub    esp,0x8
c0015a07:	53                   	push   ebx
c0015a08:	68 84 91 02 c0       	push   0xc0029184
c0015a0d:	e8 ce 97 00 00       	call   c001f1e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015a12:	83 c4 10             	add    esp,0x10
c0015a15:	eb c1                	jmp    c00159d8 <unblockTask(ThreadControlBlock*)+0x6c>
c0015a17:	90                   	nop

c0015a18 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0015a18:	55                   	push   ebp
c0015a19:	57                   	push   edi
c0015a1a:	56                   	push   esi
c0015a1b:	53                   	push   ebx
c0015a1c:	83 ec 1c             	sub    esp,0x1c
c0015a1f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0015a23:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015a26:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0015a2c:	85 ed                	test   ebp,ebp
c0015a2e:	7e 28                	jle    c0015a58 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0015a30:	31 f6                	xor    esi,esi
c0015a32:	66 90                	xchg   ax,ax
c0015a34:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0015a3b:	83 ec 0c             	sub    esp,0xc
c0015a3e:	83 c6 01             	add    esi,0x1
c0015a41:	57                   	push   edi
c0015a42:	e8 94 20 ff ff       	call   c0007adb <free>
c0015a47:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015a4a:	83 c4 10             	add    esp,0x10
c0015a4d:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0015a53:	7f df                	jg     c0015a34 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0015a55:	8d 76 00             	lea    esi,[esi+0x0]
c0015a58:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015a62:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015a67:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0015a6a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0015a6d:	d3 c0                	rol    eax,cl
c0015a6f:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c0015a76:	21 c8                	and    eax,ecx
c0015a78:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c0015a7f:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015a82:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0015a8a:	89 f7                	mov    edi,esi
c0015a8c:	0f 85 72 01 00 00    	jne    c0015c04 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0015a92:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0015a98:	85 ed                	test   ebp,ebp
c0015a9a:	74 1c                	je     c0015ab8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0015a9c:	83 ec 0c             	sub    esp,0xc
c0015a9f:	55                   	push   ebp
c0015aa0:	e8 dd ad ff ff       	call   c0010882 <EnvVarContainer::~EnvVarContainer()>
c0015aa5:	59                   	pop    ecx
c0015aa6:	5e                   	pop    esi
c0015aa7:	6a 0c                	push   0xc
c0015aa9:	55                   	push   ebp
c0015aaa:	e8 51 4d ff ff       	call   c000a800 <operator delete(void*, unsigned long)>
c0015aaf:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015ab2:	83 c4 10             	add    esp,0x10
c0015ab5:	89 f7                	mov    edi,esi
c0015ab7:	90                   	nop
c0015ab8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015abe:	85 c0                	test   eax,eax
c0015ac0:	0f 84 b2 00 00 00    	je     c0015b78 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0015ac6:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0015ac9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0015acd:	31 c9                	xor    ecx,ecx
c0015acf:	eb 17                	jmp    c0015ae8 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0015ad1:	8d 76 00             	lea    esi,[esi+0x0]
c0015ad4:	83 c1 01             	add    ecx,0x1
c0015ad7:	83 f9 10             	cmp    ecx,0x10
c0015ada:	0f 84 98 00 00 00    	je     c0015b78 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0015ae0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015ae6:	66 90                	xchg   ax,ax
c0015ae8:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0015aef:	d3 fa                	sar    edx,cl
c0015af1:	80 e2 01             	and    dl,0x1
c0015af4:	74 de                	je     c0015ad4 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015af6:	8d 14 49             	lea    edx,[ecx+ecx*2]
c0015af9:	c1 e2 05             	shl    edx,0x5
c0015afc:	29 ca                	sub    edx,ecx
c0015afe:	01 d0                	add    eax,edx
c0015b00:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0015b06:	83 fd 07             	cmp    ebp,0x7
c0015b09:	75 c9                	jne    c0015ad4 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015b0b:	05 40 02 00 00       	add    eax,0x240
c0015b10:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0015b13:	83 fd ff             	cmp    ebp,0xffffffff
c0015b16:	0f 8c f0 00 00 00    	jl     c0015c0c <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0015b1c:	0f 84 ae 01 00 00    	je     c0015cd0 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0015b22:	85 ed                	test   ebp,ebp
c0015b24:	0f 84 92 01 00 00    	je     c0015cbc <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0015b2a:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0015b2c:	75 a6                	jne    c0015ad4 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015b2e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015b32:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015b38:	01 d0                	add    eax,edx
c0015b3a:	66 90                	xchg   ax,ax
c0015b3c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0015b40:	83 ec 0c             	sub    esp,0xc
c0015b43:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0015b49:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015b4c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015b52:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0015b59:	50                   	push   eax
c0015b5a:	e8 0d fe ff ff       	call   c001596c <unblockTask(ThreadControlBlock*)>
c0015b5f:	83 c4 10             	add    esp,0x10
c0015b62:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015b65:	89 f7                	mov    edi,esi
c0015b67:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015b6b:	83 c1 01             	add    ecx,0x1
c0015b6e:	83 f9 10             	cmp    ecx,0x10
c0015b71:	0f 85 69 ff ff ff    	jne    c0015ae0 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0015b77:	90                   	nop
c0015b78:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0015b7e:	85 c0                	test   eax,eax
c0015b80:	74 62                	je     c0015be4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0015b82:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0015b88:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0015b8e:	74 54                	je     c0015be4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0015b90:	83 ec 0c             	sub    esp,0xc
c0015b93:	68 84 91 02 c0       	push   0xc0029184
c0015b98:	e8 7f 95 00 00       	call   c001f11c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015b9d:	c7 04 24 84 91 02 c0 	mov    DWORD PTR [esp],0xc0029184
c0015ba4:	89 c7                	mov    edi,eax
c0015ba6:	e8 55 95 00 00       	call   c001f100 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015bab:	83 c4 10             	add    esp,0x10
c0015bae:	84 c0                	test   al,al
c0015bb0:	0f 84 ce 00 00 00    	je     c0015c84 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0015bb6:	66 90                	xchg   ax,ax
c0015bb8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015bbb:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015bc1:	85 d2                	test   edx,edx
c0015bc3:	74 0f                	je     c0015bd4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0015bc5:	8b 02                	mov    eax,DWORD PTR [edx]
c0015bc7:	83 ec 0c             	sub    esp,0xc
c0015bca:	52                   	push   edx
c0015bcb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015bce:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015bd1:	83 c4 10             	add    esp,0x10
c0015bd4:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0015bde:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0015be1:	8d 76 00             	lea    esi,[esi+0x0]
c0015be4:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0015bea:	85 db                	test   ebx,ebx
c0015bec:	74 16                	je     c0015c04 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0015bee:	83 ec 0c             	sub    esp,0xc
c0015bf1:	53                   	push   ebx
c0015bf2:	e8 8d 3f ff ff       	call   c0009b84 <VAS::~VAS()>
c0015bf7:	58                   	pop    eax
c0015bf8:	5a                   	pop    edx
c0015bf9:	6a 14                	push   0x14
c0015bfb:	53                   	push   ebx
c0015bfc:	e8 ff 4b ff ff       	call   c000a800 <operator delete(void*, unsigned long)>
c0015c01:	83 c4 10             	add    esp,0x10
c0015c04:	83 c4 1c             	add    esp,0x1c
c0015c07:	5b                   	pop    ebx
c0015c08:	5e                   	pop    esi
c0015c09:	5f                   	pop    edi
c0015c0a:	5d                   	pop    ebp
c0015c0b:	c3                   	ret    
c0015c0c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015c10:	83 ec 0c             	sub    esp,0xc
c0015c13:	68 b4 1b 02 c0       	push   0xc0021bb4
c0015c18:	e8 54 af ff ff       	call   c0010b71 <KePanic(char const*)>
c0015c1d:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015c20:	83 c4 10             	add    esp,0x10
c0015c23:	89 f7                	mov    edi,esi
c0015c25:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015c29:	e9 a6 fe ff ff       	jmp    c0015ad4 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015c2e:	66 90                	xchg   ax,ax
c0015c30:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015c36:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0015c3c:	75 1e                	jne    c0015c5c <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015c3e:	83 ec 0c             	sub    esp,0xc
c0015c41:	68 1c 1c 02 c0       	push   0xc0021c1c
c0015c46:	e8 b3 4c ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0015c4b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0015c52:	e8 1d fa ff ff       	call   c0015674 <blockTask(TaskState)>
c0015c57:	83 c4 10             	add    esp,0x10
c0015c5a:	66 90                	xchg   ax,ax
c0015c5c:	83 ec 08             	sub    esp,0x8
c0015c5f:	56                   	push   esi
c0015c60:	68 84 91 02 c0       	push   0xc0029184
c0015c65:	e8 76 95 00 00       	call   c001f1e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015c6a:	c7 04 24 84 91 02 c0 	mov    DWORD PTR [esp],0xc0029184
c0015c71:	e8 a6 94 00 00       	call   c001f11c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015c76:	83 c4 10             	add    esp,0x10
c0015c79:	39 f8                	cmp    eax,edi
c0015c7b:	0f 84 37 ff ff ff    	je     c0015bb8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0015c81:	8d 76 00             	lea    esi,[esi+0x0]
c0015c84:	83 ec 0c             	sub    esp,0xc
c0015c87:	68 84 91 02 c0       	push   0xc0029184
c0015c8c:	e8 8b 94 00 00       	call   c001f11c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015c91:	c7 04 24 84 91 02 c0 	mov    DWORD PTR [esp],0xc0029184
c0015c98:	89 c6                	mov    esi,eax
c0015c9a:	e8 85 94 00 00       	call   c001f124 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015c9f:	83 c4 10             	add    esp,0x10
c0015ca2:	39 f3                	cmp    ebx,esi
c0015ca4:	74 b6                	je     c0015c5c <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015ca6:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0015ca9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015cac:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0015cb2:	75 a8                	jne    c0015c5c <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015cb4:	e9 77 ff ff ff       	jmp    c0015c30 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0015cb9:	8d 76 00             	lea    esi,[esi+0x0]
c0015cbc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015cc0:	83 ec 0c             	sub    esp,0xc
c0015cc3:	68 e8 1b 02 c0       	push   0xc0021be8
c0015cc8:	e9 4b ff ff ff       	jmp    c0015c18 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0015ccd:	8d 76 00             	lea    esi,[esi+0x0]
c0015cd0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015cd4:	8b 36                	mov    esi,DWORD PTR [esi]
c0015cd6:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0015cd9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015cdc:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0015ce2:	01 d7                	add    edi,edx
c0015ce4:	89 f8                	mov    eax,edi
c0015ce6:	e9 51 fe ff ff       	jmp    c0015b3c <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0015ceb:	90                   	nop

c0015cec <cleanerTaskFunction(void*)>:
c0015cec:	53                   	push   ebx
c0015ced:	83 ec 08             	sub    esp,0x8
c0015cf0:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015cf5:	83 e8 01             	sub    eax,0x1
c0015cf8:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015cfd:	75 01                	jne    c0015d00 <cleanerTaskFunction(void*)+0x14>
c0015cff:	fb                   	sti    
c0015d00:	fa                   	cli    
c0015d01:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015d06:	80 3d 4c 91 02 c0 00 	cmp    BYTE PTR ds:0xc002914c,0x0
c0015d0d:	8d 50 01             	lea    edx,[eax+0x1]
c0015d10:	89 15 68 91 02 c0    	mov    DWORD PTR ds:0xc0029168,edx
c0015d16:	0f 84 c4 00 00 00    	je     c0015de0 <cleanerTaskFunction(void*)+0xf4>
c0015d1c:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015d21:	85 c0                	test   eax,eax
c0015d23:	75 03                	jne    c0015d28 <cleanerTaskFunction(void*)+0x3c>
c0015d25:	fb                   	sti    
c0015d26:	66 90                	xchg   ax,ax
c0015d28:	c6 05 4c 91 02 c0 00 	mov    BYTE PTR ds:0xc002914c,0x0
c0015d2f:	fa                   	cli    
c0015d30:	8b 15 68 91 02 c0    	mov    edx,DWORD PTR ds:0xc0029168
c0015d36:	8b 0d 64 91 02 c0    	mov    ecx,DWORD PTR ds:0xc0029164
c0015d3c:	83 c2 01             	add    edx,0x1
c0015d3f:	89 15 68 91 02 c0    	mov    DWORD PTR ds:0xc0029168,edx
c0015d45:	83 c1 01             	add    ecx,0x1
c0015d48:	89 0d 64 91 02 c0    	mov    DWORD PTR ds:0xc0029164,ecx
c0015d4e:	fa                   	cli    
c0015d4f:	8b 1d 68 91 02 c0    	mov    ebx,DWORD PTR ds:0xc0029168
c0015d55:	83 c3 01             	add    ebx,0x1
c0015d58:	89 1d 68 91 02 c0    	mov    DWORD PTR ds:0xc0029168,ebx
c0015d5e:	eb 28                	jmp    c0015d88 <cleanerTaskFunction(void*)+0x9c>
c0015d60:	83 ec 0c             	sub    esp,0xc
c0015d63:	68 6c 91 02 c0       	push   0xc002916c
c0015d68:	e8 af 93 00 00       	call   c001f11c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015d6d:	c7 04 24 6c 91 02 c0 	mov    DWORD PTR [esp],0xc002916c
c0015d74:	89 c3                	mov    ebx,eax
c0015d76:	e8 a9 93 00 00       	call   c001f124 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015d7b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015d7e:	e8 95 fc ff ff       	call   c0015a18 <cleanupTerminatedTask(ThreadControlBlock*)>
c0015d83:	83 c4 10             	add    esp,0x10
c0015d86:	66 90                	xchg   ax,ax
c0015d88:	83 ec 0c             	sub    esp,0xc
c0015d8b:	68 6c 91 02 c0       	push   0xc002916c
c0015d90:	e8 6b 93 00 00       	call   c001f100 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015d95:	83 c4 10             	add    esp,0x10
c0015d98:	84 c0                	test   al,al
c0015d9a:	74 c4                	je     c0015d60 <cleanerTaskFunction(void*)+0x74>
c0015d9c:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015da1:	83 e8 01             	sub    eax,0x1
c0015da4:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015da9:	75 01                	jne    c0015dac <cleanerTaskFunction(void*)+0xc0>
c0015dab:	fb                   	sti    
c0015dac:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c0015db1:	83 e8 01             	sub    eax,0x1
c0015db4:	a3 64 91 02 c0       	mov    ds:0xc0029164,eax
c0015db9:	0f 85 31 ff ff ff    	jne    c0015cf0 <cleanerTaskFunction(void*)+0x4>
c0015dbf:	a1 60 91 02 c0       	mov    eax,ds:0xc0029160
c0015dc4:	85 c0                	test   eax,eax
c0015dc6:	0f 84 24 ff ff ff    	je     c0015cf0 <cleanerTaskFunction(void*)+0x4>
c0015dcc:	c7 05 60 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x0
c0015dd6:	e8 99 f6 ff ff       	call   c0015474 <schedule()>
c0015ddb:	e9 10 ff ff ff       	jmp    c0015cf0 <cleanerTaskFunction(void*)+0x4>
c0015de0:	83 ec 0c             	sub    esp,0xc
c0015de3:	6a 02                	push   0x2
c0015de5:	e8 62 f8 ff ff       	call   c001564c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015dea:	83 c4 10             	add    esp,0x10
c0015ded:	e9 36 ff ff ff       	jmp    c0015d28 <cleanerTaskFunction(void*)+0x3c>
c0015df2:	66 90                	xchg   ax,ax

c0015df4 <terminateTask(int)>:
c0015df4:	83 ec 14             	sub    esp,0x14
c0015df7:	fa                   	cli    
c0015df8:	8b 15 68 91 02 c0    	mov    edx,DWORD PTR ds:0xc0029168
c0015dfe:	8b 0d 64 91 02 c0    	mov    ecx,DWORD PTR ds:0xc0029164
c0015e04:	83 c2 01             	add    edx,0x1
c0015e07:	89 15 68 91 02 c0    	mov    DWORD PTR ds:0xc0029168,edx
c0015e0d:	83 c1 01             	add    ecx,0x1
c0015e10:	89 0d 64 91 02 c0    	mov    DWORD PTR ds:0xc0029164,ecx
c0015e16:	fa                   	cli    
c0015e17:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015e1c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015e20:	83 c0 01             	add    eax,0x1
c0015e23:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015e28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e2d:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0015e30:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e35:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015e38:	50                   	push   eax
c0015e39:	68 6c 91 02 c0       	push   0xc002916c
c0015e3e:	e8 9d 93 00 00       	call   c001f1e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015e43:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e48:	83 c4 10             	add    esp,0x10
c0015e4b:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0015e52:	a1 48 91 02 c0       	mov    eax,ds:0xc0029148
c0015e57:	85 c0                	test   eax,eax
c0015e59:	74 65                	je     c0015ec0 <terminateTask(int)+0xcc>
c0015e5b:	c6 05 4c 91 02 c0 01 	mov    BYTE PTR ds:0xc002914c,0x1
c0015e62:	83 ec 0c             	sub    esp,0xc
c0015e65:	50                   	push   eax
c0015e66:	e8 01 fb ff ff       	call   c001596c <unblockTask(ThreadControlBlock*)>
c0015e6b:	83 c4 10             	add    esp,0x10
c0015e6e:	66 90                	xchg   ax,ax
c0015e70:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015e75:	83 e8 01             	sub    eax,0x1
c0015e78:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015e7d:	75 01                	jne    c0015e80 <terminateTask(int)+0x8c>
c0015e7f:	fb                   	sti    
c0015e80:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c0015e85:	83 e8 01             	sub    eax,0x1
c0015e88:	a3 64 91 02 c0       	mov    ds:0xc0029164,eax
c0015e8d:	75 09                	jne    c0015e98 <terminateTask(int)+0xa4>
c0015e8f:	83 3d 60 91 02 c0 00 	cmp    DWORD PTR ds:0xc0029160,0x0
c0015e96:	75 3c                	jne    c0015ed4 <terminateTask(int)+0xe0>
c0015e98:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015e9d:	83 e8 01             	sub    eax,0x1
c0015ea0:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015ea5:	75 01                	jne    c0015ea8 <terminateTask(int)+0xb4>
c0015ea7:	fb                   	sti    
c0015ea8:	fa                   	cli    
c0015ea9:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015eae:	83 c0 01             	add    eax,0x1
c0015eb1:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015eb6:	66 90                	xchg   ax,ax
c0015eb8:	e8 b7 f5 ff ff       	call   c0015474 <schedule()>
c0015ebd:	eb d9                	jmp    c0015e98 <terminateTask(int)+0xa4>
c0015ebf:	90                   	nop
c0015ec0:	83 ec 0c             	sub    esp,0xc
c0015ec3:	68 16 1b 02 c0       	push   0xc0021b16
c0015ec8:	e8 31 4a ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0015ecd:	83 c4 10             	add    esp,0x10
c0015ed0:	eb 9e                	jmp    c0015e70 <terminateTask(int)+0x7c>
c0015ed2:	66 90                	xchg   ax,ax
c0015ed4:	c7 05 60 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x0
c0015ede:	eb d8                	jmp    c0015eb8 <terminateTask(int)+0xc4>

c0015ee0 <Thr::terminateFromIRQ(int)>:
c0015ee0:	83 ec 18             	sub    esp,0x18
c0015ee3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015ee7:	50                   	push   eax
c0015ee8:	e8 07 ff ff ff       	call   c0015df4 <terminateTask(int)>
c0015eed:	90                   	nop
c0015eee:	66 90                	xchg   ax,ax

c0015ef0 <Semaphore::release()>:
c0015ef0:	83 ec 0c             	sub    esp,0xc
c0015ef3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015ef7:	fa                   	cli    
c0015ef8:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015efd:	83 c0 01             	add    eax,0x1
c0015f00:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015f05:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c0015f0a:	8d 48 01             	lea    ecx,[eax+0x1]
c0015f0d:	89 0d 64 91 02 c0    	mov    DWORD PTR ds:0xc0029164,ecx
c0015f13:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015f16:	85 c9                	test   ecx,ecx
c0015f18:	74 42                	je     c0015f5c <Semaphore::release()+0x6c>
c0015f1a:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015f1d:	83 ec 0c             	sub    esp,0xc
c0015f20:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015f23:	51                   	push   ecx
c0015f24:	e8 43 fa ff ff       	call   c001596c <unblockTask(ThreadControlBlock*)>
c0015f29:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c0015f2e:	83 c4 10             	add    esp,0x10
c0015f31:	83 e8 01             	sub    eax,0x1
c0015f34:	a3 64 91 02 c0       	mov    ds:0xc0029164,eax
c0015f39:	85 c0                	test   eax,eax
c0015f3b:	75 0b                	jne    c0015f48 <Semaphore::release()+0x58>
c0015f3d:	a1 60 91 02 c0       	mov    eax,ds:0xc0029160
c0015f42:	85 c0                	test   eax,eax
c0015f44:	75 22                	jne    c0015f68 <Semaphore::release()+0x78>
c0015f46:	66 90                	xchg   ax,ax
c0015f48:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015f4d:	83 e8 01             	sub    eax,0x1
c0015f50:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015f55:	75 01                	jne    c0015f58 <Semaphore::release()+0x68>
c0015f57:	fb                   	sti    
c0015f58:	83 c4 0c             	add    esp,0xc
c0015f5b:	c3                   	ret    
c0015f5c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015f5f:	83 e9 01             	sub    ecx,0x1
c0015f62:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015f65:	eb cd                	jmp    c0015f34 <Semaphore::release()+0x44>
c0015f67:	90                   	nop
c0015f68:	c7 05 60 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x0
c0015f72:	e8 fd f4 ff ff       	call   c0015474 <schedule()>
c0015f77:	eb cf                	jmp    c0015f48 <Semaphore::release()+0x58>
c0015f79:	8d 76 00             	lea    esi,[esi+0x0]

c0015f7c <__static_initialization_and_destruction_0(int, int)>:
c0015f7c:	83 ec 0c             	sub    esp,0xc
c0015f7f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0015f84:	0f 85 8e 00 00 00    	jne    c0016018 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015f8a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0015f92:	0f 85 80 00 00 00    	jne    c0016018 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015f98:	83 ec 0c             	sub    esp,0xc
c0015f9b:	68 84 91 02 c0       	push   0xc0029184
c0015fa0:	e8 ef 94 00 00       	call   c001f494 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015fa5:	83 c4 10             	add    esp,0x10
c0015fa8:	83 ec 04             	sub    esp,0x4
c0015fab:	68 ec 27 02 c0       	push   0xc00227ec
c0015fb0:	68 84 91 02 c0       	push   0xc0029184
c0015fb5:	68 44 f4 01 c0       	push   0xc001f444
c0015fba:	e8 f1 47 ff ff       	call   c000a7b0 <__cxa_atexit>
c0015fbf:	83 c4 10             	add    esp,0x10
c0015fc2:	83 ec 0c             	sub    esp,0xc
c0015fc5:	68 78 91 02 c0       	push   0xc0029178
c0015fca:	e8 c5 94 00 00       	call   c001f494 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015fcf:	83 c4 10             	add    esp,0x10
c0015fd2:	83 ec 04             	sub    esp,0x4
c0015fd5:	68 ec 27 02 c0       	push   0xc00227ec
c0015fda:	68 78 91 02 c0       	push   0xc0029178
c0015fdf:	68 44 f4 01 c0       	push   0xc001f444
c0015fe4:	e8 c7 47 ff ff       	call   c000a7b0 <__cxa_atexit>
c0015fe9:	83 c4 10             	add    esp,0x10
c0015fec:	83 ec 0c             	sub    esp,0xc
c0015fef:	68 6c 91 02 c0       	push   0xc002916c
c0015ff4:	e8 9b 94 00 00       	call   c001f494 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015ff9:	83 c4 10             	add    esp,0x10
c0015ffc:	83 ec 04             	sub    esp,0x4
c0015fff:	68 ec 27 02 c0       	push   0xc00227ec
c0016004:	68 6c 91 02 c0       	push   0xc002916c
c0016009:	68 44 f4 01 c0       	push   0xc001f444
c001600e:	e8 9d 47 ff ff       	call   c000a7b0 <__cxa_atexit>
c0016013:	83 c4 10             	add    esp,0x10
c0016016:	66 90                	xchg   ax,ax
c0016018:	90                   	nop
c0016019:	83 c4 0c             	add    esp,0xc
c001601c:	c3                   	ret    
c001601d:	8d 76 00             	lea    esi,[esi+0x0]

c0016020 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016020:	83 ec 0c             	sub    esp,0xc
c0016023:	83 ec 08             	sub    esp,0x8
c0016026:	68 ff ff 00 00       	push   0xffff
c001602b:	6a 01                	push   0x1
c001602d:	e8 4a ff ff ff       	call   c0015f7c <__static_initialization_and_destruction_0(int, int)>
c0016032:	83 c4 10             	add    esp,0x10
c0016035:	83 c4 0c             	add    esp,0xc
c0016038:	c3                   	ret    

c0016039 <Vm::inbv(unsigned short)>:
c0016039:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001603d:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016042:	75 06                	jne    c001604a <Vm::inbv(unsigned short)+0x11>
c0016044:	a0 cc 91 02 c0       	mov    al,ds:0xc00291cc
c0016049:	c3                   	ret    
c001604a:	ec                   	in     al,dx
c001604b:	c3                   	ret    

c001604c <Vm::outbv(unsigned short, unsigned char)>:
c001604c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016050:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016054:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016059:	75 25                	jne    c0016080 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001605b:	8b 0d cc 91 02 c0    	mov    ecx,DWORD PTR ds:0xc00291cc
c0016061:	88 81 e0 91 02 c0    	mov    BYTE PTR [ecx-0x3ffd6e20],al
c0016067:	8d 51 01             	lea    edx,[ecx+0x1]
c001606a:	89 15 cc 91 02 c0    	mov    DWORD PTR ds:0xc00291cc,edx
c0016070:	83 fa 20             	cmp    edx,0x20
c0016073:	75 0c                	jne    c0016081 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016075:	c7 05 cc 91 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00291cc,0x1f
c001607f:	c3                   	ret    
c0016080:	ee                   	out    dx,al
c0016081:	c3                   	ret    

c0016082 <Vm::realToLinear(unsigned short, unsigned short)>:
c0016082:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016087:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001608c:	c1 e0 04             	shl    eax,0x4
c001608f:	01 d0                	add    eax,edx
c0016091:	c3                   	ret    

c0016092 <Vm::getSegment(unsigned int)>:
c0016092:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016096:	c1 e8 10             	shr    eax,0x10
c0016099:	c3                   	ret    

c001609a <Vm::getOffset(unsigned int)>:
c001609a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001609e:	c3                   	ret    

c001609f <Vm::mainloop2()>:
c001609f:	83 ec 18             	sub    esp,0x18
c00160a2:	fa                   	cli    
c00160a3:	6a 02                	push   0x2
c00160a5:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c00160ab:	c6 05 c5 91 02 c0 01 	mov    BYTE PTR ds:0xc00291c5,0x1
c00160b2:	e8 95 f5 ff ff       	call   c001564c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00160b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00160bc:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00160c0:	52                   	push   edx
c00160c1:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c00160c5:	52                   	push   edx
c00160c6:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c00160ca:	52                   	push   edx
c00160cb:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c00160cf:	50                   	push   eax
c00160d0:	e8 3a a1 fe ff       	call   c000020f <goToVM86>
c00160d5:	83 c4 2c             	add    esp,0x2c
c00160d8:	c3                   	ret    

c00160d9 <Vm::mainVm8086Loop(void*)>:
c00160d9:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c00160de:	48                   	dec    eax
c00160df:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c00160e4:	75 01                	jne    c00160e7 <Vm::mainVm8086Loop(void*)+0xe>
c00160e6:	fb                   	sti    
c00160e7:	eb b6                	jmp    c001609f <Vm::mainloop2()>

c00160e9 <Vm::mainloop3(unsigned long)>:
c00160e9:	83 ec 18             	sub    esp,0x18
c00160ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00160f0:	fa                   	cli    
c00160f1:	6a 02                	push   0x2
c00160f3:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c00160f9:	c6 05 c4 91 02 c0 01 	mov    BYTE PTR ds:0xc00291c4,0x1
c0016100:	a3 c0 91 02 c0       	mov    ds:0xc00291c0,eax
c0016105:	e8 42 f5 ff ff       	call   c001564c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001610a:	83 c4 1c             	add    esp,0x1c
c001610d:	eb 90                	jmp    c001609f <Vm::mainloop2()>

c001610f <Vm::initialise8086()>:
c001610f:	83 ec 0c             	sub    esp,0xc
c0016112:	68 80 00 00 00       	push   0x80
c0016117:	6a 00                	push   0x0
c0016119:	68 d9 60 01 c0       	push   0xc00160d9
c001611e:	ff 35 90 91 02 c0    	push   DWORD PTR ds:0xc0029190
c0016124:	e8 ff f0 ff ff       	call   c0015228 <Process::createThread(void (*)(void*), void*, int)>
c0016129:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016130:	68 00 01 00 00       	push   0x100
c0016135:	6a 00                	push   0x0
c0016137:	6a 00                	push   0x0
c0016139:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c001613e:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016143:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016149:	e8 ae 3d ff ff       	call   c0009efc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001614e:	83 c4 2c             	add    esp,0x2c
c0016151:	c3                   	ret    

c0016152 <Vm::finish8086()>:
c0016152:	53                   	push   ebx
c0016153:	83 ec 08             	sub    esp,0x8
c0016156:	fa                   	cli    
c0016157:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c001615d:	80 3d c4 91 02 c0 00 	cmp    BYTE PTR ds:0xc00291c4,0x0
c0016164:	75 15                	jne    c001617b <Vm::finish8086()+0x29>
c0016166:	e8 09 f3 ff ff       	call   c0015474 <schedule()>
c001616b:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0016170:	48                   	dec    eax
c0016171:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0016176:	75 de                	jne    c0016156 <Vm::finish8086()+0x4>
c0016178:	fb                   	sti    
c0016179:	eb db                	jmp    c0016156 <Vm::finish8086()+0x4>
c001617b:	c6 05 c4 91 02 c0 00 	mov    BYTE PTR ds:0xc00291c4,0x0
c0016182:	83 ec 0c             	sub    esp,0xc
c0016185:	8b 1d c0 91 02 c0    	mov    ebx,DWORD PTR ds:0xc00291c0
c001618b:	ff 35 c8 91 02 c0    	push   DWORD PTR ds:0xc00291c8
c0016191:	e8 d6 f7 ff ff       	call   c001596c <unblockTask(ThreadControlBlock*)>
c0016196:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c001619b:	83 c4 10             	add    esp,0x10
c001619e:	8d 50 ff             	lea    edx,[eax-0x1]
c00161a1:	89 15 68 91 02 c0    	mov    DWORD PTR ds:0xc0029168,edx
c00161a7:	85 d2                	test   edx,edx
c00161a9:	75 01                	jne    c00161ac <Vm::finish8086()+0x5a>
c00161ab:	fb                   	sti    
c00161ac:	83 c4 08             	add    esp,0x8
c00161af:	89 d8                	mov    eax,ebx
c00161b1:	5b                   	pop    ebx
c00161b2:	c3                   	ret    

c00161b3 <Vm::getOutput8086(unsigned char*)>:
c00161b3:	57                   	push   edi
c00161b4:	8b 0d cc 91 02 c0    	mov    ecx,DWORD PTR ds:0xc00291cc
c00161ba:	56                   	push   esi
c00161bb:	be e0 91 02 c0       	mov    esi,0xc00291e0
c00161c0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00161c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00161c6:	5e                   	pop    esi
c00161c7:	a1 cc 91 02 c0       	mov    eax,ds:0xc00291cc
c00161cc:	c7 05 cc 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00291cc,0x0
c00161d6:	5f                   	pop    edi
c00161d7:	c3                   	ret    

c00161d8 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00161d8:	55                   	push   ebp
c00161d9:	57                   	push   edi
c00161da:	56                   	push   esi
c00161db:	53                   	push   ebx
c00161dc:	83 ec 0c             	sub    esp,0xc
c00161df:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00161e3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00161e7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00161eb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00161ef:	fa                   	cli    
c00161f0:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c00161f6:	80 3d c5 91 02 c0 00 	cmp    BYTE PTR ds:0xc00291c5,0x0
c00161fd:	75 15                	jne    c0016214 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c00161ff:	e8 70 f2 ff ff       	call   c0015474 <schedule()>
c0016204:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0016209:	48                   	dec    eax
c001620a:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c001620f:	75 de                	jne    c00161ef <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016211:	fb                   	sti    
c0016212:	eb db                	jmp    c00161ef <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016214:	c7 05 cc 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00291cc,0x0
c001621e:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0016223:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016227:	0f b7 ff             	movzx  edi,di
c001622a:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001622e:	0f b7 f6             	movzx  esi,si
c0016231:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016235:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016239:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001623d:	50                   	push   eax
c001623e:	6a 20                	push   0x20
c0016240:	6a 00                	push   0x0
c0016242:	68 e0 91 02 c0       	push   0xc00291e0
c0016247:	e8 a4 a2 fe ff       	call   c00004f0 <memset>
c001624c:	5a                   	pop    edx
c001624d:	59                   	pop    ecx
c001624e:	57                   	push   edi
c001624f:	56                   	push   esi
c0016250:	e8 2d fe ff ff       	call   c0016082 <Vm::realToLinear(unsigned short, unsigned short)>
c0016255:	83 c4 10             	add    esp,0x10
c0016258:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001625c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016260:	89 c7                	mov    edi,eax
c0016262:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016264:	c6 05 c5 91 02 c0 00 	mov    BYTE PTR ds:0xc00291c5,0x0
c001626b:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0016270:	48                   	dec    eax
c0016271:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0016276:	75 01                	jne    c0016279 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016278:	fb                   	sti    
c0016279:	83 ec 0c             	sub    esp,0xc
c001627c:	ff 35 c8 91 02 c0    	push   DWORD PTR ds:0xc00291c8
c0016282:	e8 e5 f6 ff ff       	call   c001596c <unblockTask(ThreadControlBlock*)>
c0016287:	83 c4 1c             	add    esp,0x1c
c001628a:	b0 01                	mov    al,0x1
c001628c:	5b                   	pop    ebx
c001628d:	5e                   	pop    esi
c001628e:	5f                   	pop    edi
c001628f:	5d                   	pop    ebp
c0016290:	c3                   	ret    

c0016291 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016291:	55                   	push   ebp
c0016292:	57                   	push   edi
c0016293:	56                   	push   esi
c0016294:	53                   	push   ebx
c0016295:	83 ec 34             	sub    esp,0x34
c0016298:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001629c:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00162a0:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00162a4:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c00162a8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00162ac:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00162b0:	68 44 1c 02 c0       	push   0xc0021c44
c00162b5:	e8 44 46 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c00162ba:	83 c4 10             	add    esp,0x10
c00162bd:	fa                   	cli    
c00162be:	8a 1d c5 91 02 c0    	mov    bl,BYTE PTR ds:0xc00291c5
c00162c4:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c00162ca:	84 db                	test   bl,bl
c00162cc:	75 15                	jne    c00162e3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c00162ce:	e8 a1 f1 ff ff       	call   c0015474 <schedule()>
c00162d3:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c00162d8:	48                   	dec    eax
c00162d9:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c00162de:	75 dd                	jne    c00162bd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c00162e0:	fb                   	sti    
c00162e1:	eb da                	jmp    c00162bd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c00162e3:	c7 05 cc 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00291cc,0x0
c00162ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00162f1:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c00162f6:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c00162fa:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00162fe:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016302:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016306:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001630a:	50                   	push   eax
c001630b:	6a 20                	push   0x20
c001630d:	6a 00                	push   0x0
c001630f:	68 e0 91 02 c0       	push   0xc00291e0
c0016314:	e8 d7 a1 fe ff       	call   c00004f0 <memset>
c0016319:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016320:	e8 a6 17 ff ff       	call   c0007acb <malloc>
c0016325:	83 c4 0c             	add    esp,0xc
c0016328:	ff 35 90 91 02 c0    	push   DWORD PTR ds:0xc0029190
c001632e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016332:	89 c5                	mov    ebp,eax
c0016334:	50                   	push   eax
c0016335:	e8 40 4e ff ff       	call   c000b17a <File::File(char const*, Process*)>
c001633a:	83 c4 10             	add    esp,0x10
c001633d:	85 ed                	test   ebp,ebp
c001633f:	75 0a                	jne    c001634b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0016341:	83 ec 0c             	sub    esp,0xc
c0016344:	68 66 1c 02 c0       	push   0xc0021c66
c0016349:	eb 2b                	jmp    c0016376 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c001634b:	50                   	push   eax
c001634c:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016350:	50                   	push   eax
c0016351:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016355:	50                   	push   eax
c0016356:	55                   	push   ebp
c0016357:	e8 dc 51 ff ff       	call   c000b538 <File::stat(unsigned long long*, bool*)>
c001635c:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016360:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016364:	83 c4 10             	add    esp,0x10
c0016367:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001636c:	74 27                	je     c0016395 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c001636e:	83 ec 0c             	sub    esp,0xc
c0016371:	68 7a 1c 02 c0       	push   0xc0021c7a
c0016376:	e8 f6 a7 ff ff       	call   c0010b71 <KePanic(char const*)>
c001637b:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0016380:	83 c4 10             	add    esp,0x10
c0016383:	48                   	dec    eax
c0016384:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0016389:	85 c0                	test   eax,eax
c001638b:	75 01                	jne    c001638e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c001638d:	fb                   	sti    
c001638e:	31 db                	xor    ebx,ebx
c0016390:	e9 90 00 00 00       	jmp    c0016425 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016395:	51                   	push   ecx
c0016396:	51                   	push   ecx
c0016397:	6a 01                	push   0x1
c0016399:	55                   	push   ebp
c001639a:	e8 97 4e ff ff       	call   c000b236 <File::open(FileOpenMode)>
c001639f:	83 c4 10             	add    esp,0x10
c00163a2:	85 c0                	test   eax,eax
c00163a4:	74 26                	je     c00163cc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c00163a6:	83 ec 0c             	sub    esp,0xc
c00163a9:	68 93 1c 02 c0       	push   0xc0021c93
c00163ae:	e8 be a7 ff ff       	call   c0010b71 <KePanic(char const*)>
c00163b3:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c00163b8:	83 c4 10             	add    esp,0x10
c00163bb:	48                   	dec    eax
c00163bc:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c00163c1:	85 c0                	test   eax,eax
c00163c3:	75 c9                	jne    c001638e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c00163c5:	fb                   	sti    
c00163c6:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00163ca:	eb 59                	jmp    c0016425 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c00163cc:	50                   	push   eax
c00163cd:	0f b7 ff             	movzx  edi,di
c00163d0:	50                   	push   eax
c00163d1:	0f b7 f6             	movzx  esi,si
c00163d4:	57                   	push   edi
c00163d5:	56                   	push   esi
c00163d6:	e8 a7 fc ff ff       	call   c0016082 <Vm::realToLinear(unsigned short, unsigned short)>
c00163db:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00163de:	5a                   	pop    edx
c00163df:	8d 74 24 20          	lea    esi,[esp+0x20]
c00163e3:	56                   	push   esi
c00163e4:	50                   	push   eax
c00163e5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00163e9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00163ed:	55                   	push   ebp
c00163ee:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00163f1:	83 c4 14             	add    esp,0x14
c00163f4:	55                   	push   ebp
c00163f5:	e8 9a 4e ff ff       	call   c000b294 <File::close()>
c00163fa:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c00163ff:	83 c4 10             	add    esp,0x10
c0016402:	c6 05 c5 91 02 c0 00 	mov    BYTE PTR ds:0xc00291c5,0x0
c0016409:	48                   	dec    eax
c001640a:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c001640f:	85 c0                	test   eax,eax
c0016411:	75 01                	jne    c0016414 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0016413:	fb                   	sti    
c0016414:	83 ec 0c             	sub    esp,0xc
c0016417:	ff 35 c8 91 02 c0    	push   DWORD PTR ds:0xc00291c8
c001641d:	e8 4a f5 ff ff       	call   c001596c <unblockTask(ThreadControlBlock*)>
c0016422:	83 c4 10             	add    esp,0x10
c0016425:	83 c4 2c             	add    esp,0x2c
c0016428:	88 d8                	mov    al,bl
c001642a:	5b                   	pop    ebx
c001642b:	5e                   	pop    esi
c001642c:	5f                   	pop    edi
c001642d:	5d                   	pop    ebp
c001642e:	c3                   	ret    

c001642f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001642f:	57                   	push   edi
c0016430:	56                   	push   esi
c0016431:	53                   	push   ebx
c0016432:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016436:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001643a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001643e:	83 e8 06             	sub    eax,0x6
c0016441:	0f b7 c0             	movzx  eax,ax
c0016444:	50                   	push   eax
c0016445:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001644a:	50                   	push   eax
c001644b:	e8 32 fc ff ff       	call   c0016082 <Vm::realToLinear(unsigned short, unsigned short)>
c0016450:	5a                   	pop    edx
c0016451:	59                   	pop    ecx
c0016452:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0016455:	8d 51 fa             	lea    edx,[ecx-0x6]
c0016458:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001645b:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016461:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0016464:	8d 51 02             	lea    edx,[ecx+0x2]
c0016467:	66 89 10             	mov    WORD PTR [eax],dx
c001646a:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c001646e:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0016472:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0016476:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0016479:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001647d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016483:	89 f1                	mov    ecx,esi
c0016485:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0016489:	89 f2                	mov    edx,esi
c001648b:	0f b6 d6             	movzx  edx,dh
c001648e:	0f b6 f1             	movzx  esi,cl
c0016491:	74 0a                	je     c001649d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c0016493:	c1 e2 08             	shl    edx,0x8
c0016496:	09 f2                	or     edx,esi
c0016498:	80 ce 02             	or     dh,0x2
c001649b:	eb 08                	jmp    c00164a5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c001649d:	c1 e2 08             	shl    edx,0x8
c00164a0:	09 f2                	or     edx,esi
c00164a2:	80 e6 fd             	and    dh,0xfd
c00164a5:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00164a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164ae:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00164b2:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c00164ba:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c00164bd:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c00164c5:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00164c8:	5b                   	pop    ebx
c00164c9:	5e                   	pop    esi
c00164ca:	5f                   	pop    edi
c00164cb:	c3                   	ret    

c00164cc <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00164cc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00164d1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00164d6:	c1 e0 04             	shl    eax,0x4
c00164d9:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00164dc:	c3                   	ret    

c00164dd <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00164dd:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00164e2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00164e7:	c1 e0 04             	shl    eax,0x4
c00164ea:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00164ee:	c3                   	ret    

c00164ef <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00164ef:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00164f4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00164f9:	c1 e0 04             	shl    eax,0x4
c00164fc:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00164ff:	c3                   	ret    

c0016500 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016500:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016505:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001650a:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001650e:	c1 e0 04             	shl    eax,0x4
c0016511:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0016514:	c3                   	ret    

c0016515 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0016515:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001651a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001651f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016523:	c1 e0 04             	shl    eax,0x4
c0016526:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001652a:	c3                   	ret    

c001652b <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001652b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016530:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016535:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016539:	c1 e0 04             	shl    eax,0x4
c001653c:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001653f:	c3                   	ret    

c0016540 <Vm::faultHandler(regs*)>:
c0016540:	55                   	push   ebp
c0016541:	57                   	push   edi
c0016542:	56                   	push   esi
c0016543:	53                   	push   ebx
c0016544:	83 ec 2c             	sub    esp,0x2c
c0016547:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001654b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001654e:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0016552:	0f b7 f8             	movzx  edi,ax
c0016555:	0f b7 c0             	movzx  eax,ax
c0016558:	52                   	push   edx
c0016559:	50                   	push   eax
c001655a:	e8 23 fb ff ff       	call   c0016082 <Vm::realToLinear(unsigned short, unsigned short)>
c001655f:	5a                   	pop    edx
c0016560:	59                   	pop    ecx
c0016561:	89 c1                	mov    ecx,eax
c0016563:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016566:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001656a:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c001656f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016573:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0016576:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001657a:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c001657f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016583:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016587:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001658b:	e8 f2 fa ff ff       	call   c0016082 <Vm::realToLinear(unsigned short, unsigned short)>
c0016590:	5e                   	pop    esi
c0016591:	be 06 00 00 00       	mov    esi,0x6
c0016596:	5d                   	pop    ebp
c0016597:	31 ed                	xor    ebp,ebp
c0016599:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001659e:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00165a1:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c00165a7:	0f 84 74 02 00 00    	je     c0016821 <Vm::faultHandler(regs*)+0x2e1>
c00165ad:	0f 87 94 00 00 00    	ja     c0016647 <Vm::faultHandler(regs*)+0x107>
c00165b3:	83 fa 66             	cmp    edx,0x66
c00165b6:	0f 84 e2 01 00 00    	je     c001679e <Vm::faultHandler(regs*)+0x25e>
c00165bc:	77 47                	ja     c0016605 <Vm::faultHandler(regs*)+0xc5>
c00165be:	83 fa 36             	cmp    edx,0x36
c00165c1:	0f 84 ca 01 00 00    	je     c0016791 <Vm::faultHandler(regs*)+0x251>
c00165c7:	77 1a                	ja     c00165e3 <Vm::faultHandler(regs*)+0xa3>
c00165c9:	83 fa 26             	cmp    edx,0x26
c00165cc:	0f 84 98 01 00 00    	je     c001676a <Vm::faultHandler(regs*)+0x22a>
c00165d2:	83 fa 2e             	cmp    edx,0x2e
c00165d5:	0f 85 27 06 00 00    	jne    c0016c02 <Vm::faultHandler(regs*)+0x6c2>
c00165db:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00165de:	31 f6                	xor    esi,esi
c00165e0:	41                   	inc    ecx
c00165e1:	eb bb                	jmp    c001659e <Vm::faultHandler(regs*)+0x5e>
c00165e3:	83 fa 64             	cmp    edx,0x64
c00165e6:	0f 84 8b 01 00 00    	je     c0016777 <Vm::faultHandler(regs*)+0x237>
c00165ec:	0f 87 92 01 00 00    	ja     c0016784 <Vm::faultHandler(regs*)+0x244>
c00165f2:	83 fa 3e             	cmp    edx,0x3e
c00165f5:	0f 85 07 06 00 00    	jne    c0016c02 <Vm::faultHandler(regs*)+0x6c2>
c00165fb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00165fe:	be 01 00 00 00       	mov    esi,0x1
c0016603:	eb db                	jmp    c00165e0 <Vm::faultHandler(regs*)+0xa0>
c0016605:	83 fa 6d             	cmp    edx,0x6d
c0016608:	0f 84 34 03 00 00    	je     c0016942 <Vm::faultHandler(regs*)+0x402>
c001660e:	77 17                	ja     c0016627 <Vm::faultHandler(regs*)+0xe7>
c0016610:	83 fa 67             	cmp    edx,0x67
c0016613:	0f 84 92 01 00 00    	je     c00167ab <Vm::faultHandler(regs*)+0x26b>
c0016619:	83 fa 6c             	cmp    edx,0x6c
c001661c:	0f 84 b1 02 00 00    	je     c00168d3 <Vm::faultHandler(regs*)+0x393>
c0016622:	e9 db 05 00 00       	jmp    c0016c02 <Vm::faultHandler(regs*)+0x6c2>
c0016627:	83 fa 6f             	cmp    edx,0x6f
c001662a:	0f 84 40 04 00 00    	je     c0016a70 <Vm::faultHandler(regs*)+0x530>
c0016630:	0f 82 a2 03 00 00    	jb     c00169d8 <Vm::faultHandler(regs*)+0x498>
c0016636:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c001663c:	0f 84 76 01 00 00    	je     c00167b8 <Vm::faultHandler(regs*)+0x278>
c0016642:	e9 bb 05 00 00       	jmp    c0016c02 <Vm::faultHandler(regs*)+0x6c2>
c0016647:	81 fa ec 00 00 00    	cmp    edx,0xec
c001664d:	0f 84 57 05 00 00    	je     c0016baa <Vm::faultHandler(regs*)+0x66a>
c0016653:	0f 87 a9 00 00 00    	ja     c0016702 <Vm::faultHandler(regs*)+0x1c2>
c0016659:	81 fa e4 00 00 00    	cmp    edx,0xe4
c001665f:	0f 84 d6 04 00 00    	je     c0016b3b <Vm::faultHandler(regs*)+0x5fb>
c0016665:	77 78                	ja     c00166df <Vm::faultHandler(regs*)+0x19f>
c0016667:	81 fa cd 00 00 00    	cmp    edx,0xcd
c001666d:	0f 84 0e 02 00 00    	je     c0016881 <Vm::faultHandler(regs*)+0x341>
c0016673:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0016679:	0f 85 83 05 00 00    	jne    c0016c02 <Vm::faultHandler(regs*)+0x6c2>
c001667f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0016683:	89 d1                	mov    ecx,edx
c0016685:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0016688:	c1 e1 08             	shl    ecx,0x8
c001668b:	09 ca                	or     edx,ecx
c001668d:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0016690:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0016694:	89 d1                	mov    ecx,edx
c0016696:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c001669a:	c1 e1 08             	shl    ecx,0x8
c001669d:	09 ca                	or     edx,ecx
c001669f:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00166a2:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c00166a6:	89 d1                	mov    ecx,edx
c00166a8:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c00166ac:	c1 e1 08             	shl    ecx,0x8
c00166af:	09 ca                	or     edx,ecx
c00166b1:	81 ca 00 02 02 00    	or     edx,0x20200
c00166b7:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00166ba:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c00166be:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00166c4:	d1 e8                	shr    eax,1
c00166c6:	83 e0 01             	and    eax,0x1
c00166c9:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00166cc:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00166cf:	83 c0 06             	add    eax,0x6
c00166d2:	25 ff ff 00 00       	and    eax,0xffff
c00166d7:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00166da:	e9 1f 05 00 00       	jmp    c0016bfe <Vm::faultHandler(regs*)+0x6be>
c00166df:	81 fa e6 00 00 00    	cmp    edx,0xe6
c00166e5:	0f 84 95 04 00 00    	je     c0016b80 <Vm::faultHandler(regs*)+0x640>
c00166eb:	0f 82 66 04 00 00    	jb     c0016b57 <Vm::faultHandler(regs*)+0x617>
c00166f1:	81 fa e7 00 00 00    	cmp    edx,0xe7
c00166f7:	0f 84 9a 04 00 00    	je     c0016b97 <Vm::faultHandler(regs*)+0x657>
c00166fd:	e9 00 05 00 00       	jmp    c0016c02 <Vm::faultHandler(regs*)+0x6c2>
c0016702:	81 fa ef 00 00 00    	cmp    edx,0xef
c0016708:	0f 84 dd 04 00 00    	je     c0016beb <Vm::faultHandler(regs*)+0x6ab>
c001670e:	77 2e                	ja     c001673e <Vm::faultHandler(regs*)+0x1fe>
c0016710:	81 fa ed 00 00 00    	cmp    edx,0xed
c0016716:	0f 84 aa 04 00 00    	je     c0016bc6 <Vm::faultHandler(regs*)+0x686>
c001671c:	81 fa ee 00 00 00    	cmp    edx,0xee
c0016722:	0f 85 da 04 00 00    	jne    c0016c02 <Vm::faultHandler(regs*)+0x6c2>
c0016728:	50                   	push   eax
c0016729:	50                   	push   eax
c001672a:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001672e:	50                   	push   eax
c001672f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016733:	50                   	push   eax
c0016734:	e8 13 f9 ff ff       	call   c001604c <Vm::outbv(unsigned short, unsigned char)>
c0016739:	e9 a5 04 00 00       	jmp    c0016be3 <Vm::faultHandler(regs*)+0x6a3>
c001673e:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0016744:	0f 84 6d 01 00 00    	je     c00168b7 <Vm::faultHandler(regs*)+0x377>
c001674a:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0016750:	0f 84 6f 01 00 00    	je     c00168c5 <Vm::faultHandler(regs*)+0x385>
c0016756:	81 fa f3 00 00 00    	cmp    edx,0xf3
c001675c:	0f 85 a0 04 00 00    	jne    c0016c02 <Vm::faultHandler(regs*)+0x6c2>
c0016762:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016765:	e9 76 fe ff ff       	jmp    c00165e0 <Vm::faultHandler(regs*)+0xa0>
c001676a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001676d:	be 02 00 00 00       	mov    esi,0x2
c0016772:	e9 69 fe ff ff       	jmp    c00165e0 <Vm::faultHandler(regs*)+0xa0>
c0016777:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001677a:	be 03 00 00 00       	mov    esi,0x3
c001677f:	e9 5c fe ff ff       	jmp    c00165e0 <Vm::faultHandler(regs*)+0xa0>
c0016784:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016787:	be 04 00 00 00       	mov    esi,0x4
c001678c:	e9 4f fe ff ff       	jmp    c00165e0 <Vm::faultHandler(regs*)+0xa0>
c0016791:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016794:	be 05 00 00 00       	mov    esi,0x5
c0016799:	e9 42 fe ff ff       	jmp    c00165e0 <Vm::faultHandler(regs*)+0xa0>
c001679e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00167a1:	bd 01 00 00 00       	mov    ebp,0x1
c00167a6:	e9 35 fe ff ff       	jmp    c00165e0 <Vm::faultHandler(regs*)+0xa0>
c00167ab:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00167ae:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00167b3:	e9 28 fe ff ff       	jmp    c00165e0 <Vm::faultHandler(regs*)+0xa0>
c00167b8:	83 e5 01             	and    ebp,0x1
c00167bb:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00167be:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00167c2:	74 30                	je     c00167f4 <Vm::faultHandler(regs*)+0x2b4>
c00167c4:	83 e9 04             	sub    ecx,0x4
c00167c7:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00167cd:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00167d3:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00167d6:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00167d9:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00167df:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00167e3:	0f 84 12 04 00 00    	je     c0016bfb <Vm::faultHandler(regs*)+0x6bb>
c00167e9:	80 ce 02             	or     dh,0x2
c00167ec:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00167ef:	e9 07 04 00 00       	jmp    c0016bfb <Vm::faultHandler(regs*)+0x6bb>
c00167f4:	83 e9 02             	sub    ecx,0x2
c00167f7:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00167fd:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016800:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016804:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001680a:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001680e:	74 05                	je     c0016815 <Vm::faultHandler(regs*)+0x2d5>
c0016810:	80 ce 02             	or     dh,0x2
c0016813:	eb 03                	jmp    c0016818 <Vm::faultHandler(regs*)+0x2d8>
c0016815:	80 e6 fd             	and    dh,0xfd
c0016818:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001681c:	e9 da 03 00 00       	jmp    c0016bfb <Vm::faultHandler(regs*)+0x6bb>
c0016821:	83 e5 01             	and    ebp,0x1
c0016824:	74 2a                	je     c0016850 <Vm::faultHandler(regs*)+0x310>
c0016826:	8b 10                	mov    edx,DWORD PTR [eax]
c0016828:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001682e:	81 ca 00 02 02 00    	or     edx,0x20200
c0016834:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016837:	8b 00                	mov    eax,DWORD PTR [eax]
c0016839:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001683f:	c1 e8 09             	shr    eax,0x9
c0016842:	83 e0 01             	and    eax,0x1
c0016845:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016848:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001684b:	83 c0 04             	add    eax,0x4
c001684e:	eb 24                	jmp    c0016874 <Vm::faultHandler(regs*)+0x334>
c0016850:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0016853:	81 ca 00 02 02 00    	or     edx,0x20200
c0016859:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001685c:	0f b7 00             	movzx  eax,WORD PTR [eax]
c001685f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016865:	c1 e8 09             	shr    eax,0x9
c0016868:	83 e0 01             	and    eax,0x1
c001686b:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001686e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016871:	83 c0 02             	add    eax,0x2
c0016874:	25 ff ff 00 00       	and    eax,0xffff
c0016879:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001687c:	e9 7a 03 00 00       	jmp    c0016bfb <Vm::faultHandler(regs*)+0x6bb>
c0016881:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016885:	3d ee 00 00 00       	cmp    eax,0xee
c001688a:	75 10                	jne    c001689c <Vm::faultHandler(regs*)+0x35c>
c001688c:	83 ec 0c             	sub    esp,0xc
c001688f:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0016892:	e8 52 f8 ff ff       	call   c00160e9 <Vm::mainloop3(unsigned long)>
c0016897:	e9 4a 03 00 00       	jmp    c0016be6 <Vm::faultHandler(regs*)+0x6a6>
c001689c:	83 ec 0c             	sub    esp,0xc
c001689f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00168a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00168a7:	51                   	push   ecx
c00168a8:	50                   	push   eax
c00168a9:	53                   	push   ebx
c00168aa:	e8 80 fb ff ff       	call   c001642f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00168af:	83 c4 20             	add    esp,0x20
c00168b2:	e9 47 03 00 00       	jmp    c0016bfe <Vm::faultHandler(regs*)+0x6be>
c00168b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168bc:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00168c0:	e9 36 03 00 00       	jmp    c0016bfb <Vm::faultHandler(regs*)+0x6bb>
c00168c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168ca:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00168ce:	e9 28 03 00 00       	jmp    c0016bfb <Vm::faultHandler(regs*)+0x6bb>
c00168d3:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00168d8:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00168db:	74 2b                	je     c0016908 <Vm::faultHandler(regs*)+0x3c8>
c00168dd:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00168e4:	76 22                	jbe    c0016908 <Vm::faultHandler(regs*)+0x3c8>
c00168e6:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00168ea:	50                   	push   eax
c00168eb:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00168ef:	50                   	push   eax
c00168f0:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00168f4:	50                   	push   eax
c00168f5:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00168f9:	50                   	push   eax
c00168fa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00168fe:	50                   	push   eax
c00168ff:	6a 6c                	push   0x6c
c0016901:	6a 6c                	push   0x6c
c0016903:	e9 c0 01 00 00       	jmp    c0016ac8 <Vm::faultHandler(regs*)+0x588>
c0016908:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001690c:	83 ec 0c             	sub    esp,0xc
c001690f:	0f b7 f6             	movzx  esi,si
c0016912:	50                   	push   eax
c0016913:	e8 21 f7 ff ff       	call   c0016039 <Vm::inbv(unsigned short)>
c0016918:	83 c4 0c             	add    esp,0xc
c001691b:	0f b6 c0             	movzx  eax,al
c001691e:	50                   	push   eax
c001691f:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0016923:	50                   	push   eax
c0016924:	56                   	push   esi
c0016925:	e8 d6 fb ff ff       	call   c0016500 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001692a:	83 c4 10             	add    esp,0x10
c001692d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016930:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016934:	74 03                	je     c0016939 <Vm::faultHandler(regs*)+0x3f9>
c0016936:	48                   	dec    eax
c0016937:	eb 01                	jmp    c001693a <Vm::faultHandler(regs*)+0x3fa>
c0016939:	40                   	inc    eax
c001693a:	0f b7 c0             	movzx  eax,ax
c001693d:	e9 8e 00 00 00       	jmp    c00169d0 <Vm::faultHandler(regs*)+0x490>
c0016942:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016947:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001694a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001694d:	74 29                	je     c0016978 <Vm::faultHandler(regs*)+0x438>
c001694f:	3d ff ff 00 00       	cmp    eax,0xffff
c0016954:	76 22                	jbe    c0016978 <Vm::faultHandler(regs*)+0x438>
c0016956:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001695a:	50                   	push   eax
c001695b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001695f:	50                   	push   eax
c0016960:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016964:	50                   	push   eax
c0016965:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016969:	50                   	push   eax
c001696a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001696e:	50                   	push   eax
c001696f:	6a 6d                	push   0x6d
c0016971:	6a 6d                	push   0x6d
c0016973:	e9 50 01 00 00       	jmp    c0016ac8 <Vm::faultHandler(regs*)+0x588>
c0016978:	83 e5 01             	and    ebp,0x1
c001697b:	0f b7 c8             	movzx  ecx,ax
c001697e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016981:	0f b7 f6             	movzx  esi,si
c0016984:	74 1e                	je     c00169a4 <Vm::faultHandler(regs*)+0x464>
c0016986:	ed                   	in     eax,dx
c0016987:	55                   	push   ebp
c0016988:	50                   	push   eax
c0016989:	51                   	push   ecx
c001698a:	56                   	push   esi
c001698b:	e8 9b fb ff ff       	call   c001652b <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0016990:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016993:	83 c4 10             	add    esp,0x10
c0016996:	8d 50 04             	lea    edx,[eax+0x4]
c0016999:	83 e8 04             	sub    eax,0x4
c001699c:	81 e2 ff ff 00 00    	and    edx,0xffff
c00169a2:	eb 20                	jmp    c00169c4 <Vm::faultHandler(regs*)+0x484>
c00169a4:	66 ed                	in     ax,dx
c00169a6:	57                   	push   edi
c00169a7:	0f b7 c0             	movzx  eax,ax
c00169aa:	50                   	push   eax
c00169ab:	51                   	push   ecx
c00169ac:	56                   	push   esi
c00169ad:	e8 63 fb ff ff       	call   c0016515 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00169b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00169b5:	83 c4 10             	add    esp,0x10
c00169b8:	8d 50 02             	lea    edx,[eax+0x2]
c00169bb:	83 e8 02             	sub    eax,0x2
c00169be:	81 e2 ff ff 00 00    	and    edx,0xffff
c00169c4:	25 ff ff 00 00       	and    eax,0xffff
c00169c9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00169cd:	0f 44 c2             	cmove  eax,edx
c00169d0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00169d3:	e9 23 02 00 00       	jmp    c0016bfb <Vm::faultHandler(regs*)+0x6bb>
c00169d8:	8d 46 ff             	lea    eax,[esi-0x1]
c00169db:	0f b6 f0             	movzx  esi,al
c00169de:	83 fe 05             	cmp    esi,0x5
c00169e1:	77 23                	ja     c0016a06 <Vm::faultHandler(regs*)+0x4c6>
c00169e3:	ff 24 b5 08 1d 02 c0 	jmp    DWORD PTR [esi*4-0x3ffde2f8]
c00169ea:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c00169ef:	eb 15                	jmp    c0016a06 <Vm::faultHandler(regs*)+0x4c6>
c00169f1:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00169f5:	eb 0f                	jmp    c0016a06 <Vm::faultHandler(regs*)+0x4c6>
c00169f7:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00169fb:	eb 09                	jmp    c0016a06 <Vm::faultHandler(regs*)+0x4c6>
c00169fd:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0016a01:	eb 03                	jmp    c0016a06 <Vm::faultHandler(regs*)+0x4c6>
c0016a03:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0016a06:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016a0b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016a0e:	74 29                	je     c0016a39 <Vm::faultHandler(regs*)+0x4f9>
c0016a10:	3d ff ff 00 00       	cmp    eax,0xffff
c0016a15:	76 22                	jbe    c0016a39 <Vm::faultHandler(regs*)+0x4f9>
c0016a17:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016a1b:	50                   	push   eax
c0016a1c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016a20:	50                   	push   eax
c0016a21:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016a25:	50                   	push   eax
c0016a26:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016a2a:	50                   	push   eax
c0016a2b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016a2f:	50                   	push   eax
c0016a30:	6a 6e                	push   0x6e
c0016a32:	6a 6e                	push   0x6e
c0016a34:	e9 8f 00 00 00       	jmp    c0016ac8 <Vm::faultHandler(regs*)+0x588>
c0016a39:	52                   	push   edx
c0016a3a:	0f b7 c0             	movzx  eax,ax
c0016a3d:	52                   	push   edx
c0016a3e:	50                   	push   eax
c0016a3f:	57                   	push   edi
c0016a40:	e8 87 fa ff ff       	call   c00164cc <Vm::readByteFromReal(unsigned short, unsigned short)>
c0016a45:	59                   	pop    ecx
c0016a46:	5e                   	pop    esi
c0016a47:	0f b6 c0             	movzx  eax,al
c0016a4a:	50                   	push   eax
c0016a4b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016a4f:	50                   	push   eax
c0016a50:	e8 f7 f5 ff ff       	call   c001604c <Vm::outbv(unsigned short, unsigned char)>
c0016a55:	83 c4 10             	add    esp,0x10
c0016a58:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016a5b:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016a5f:	74 03                	je     c0016a64 <Vm::faultHandler(regs*)+0x524>
c0016a61:	48                   	dec    eax
c0016a62:	eb 01                	jmp    c0016a65 <Vm::faultHandler(regs*)+0x525>
c0016a64:	40                   	inc    eax
c0016a65:	0f b7 c0             	movzx  eax,ax
c0016a68:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0016a6b:	e9 8b 01 00 00       	jmp    c0016bfb <Vm::faultHandler(regs*)+0x6bb>
c0016a70:	8d 46 ff             	lea    eax,[esi-0x1]
c0016a73:	0f b6 f0             	movzx  esi,al
c0016a76:	83 fe 05             	cmp    esi,0x5
c0016a79:	77 1e                	ja     c0016a99 <Vm::faultHandler(regs*)+0x559>
c0016a7b:	ff 24 b5 20 1d 02 c0 	jmp    DWORD PTR [esi*4-0x3ffde2e0]
c0016a82:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016a86:	eb 11                	jmp    c0016a99 <Vm::faultHandler(regs*)+0x559>
c0016a88:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0016a8b:	eb 0c                	jmp    c0016a99 <Vm::faultHandler(regs*)+0x559>
c0016a8d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0016a90:	eb 07                	jmp    c0016a99 <Vm::faultHandler(regs*)+0x559>
c0016a92:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0016a95:	eb 02                	jmp    c0016a99 <Vm::faultHandler(regs*)+0x559>
c0016a97:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0016a99:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016a9e:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0016aa1:	74 37                	je     c0016ada <Vm::faultHandler(regs*)+0x59a>
c0016aa3:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0016aa9:	76 2f                	jbe    c0016ada <Vm::faultHandler(regs*)+0x59a>
c0016aab:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016aaf:	50                   	push   eax
c0016ab0:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016ab4:	50                   	push   eax
c0016ab5:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016ab9:	50                   	push   eax
c0016aba:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016abe:	50                   	push   eax
c0016abf:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016ac3:	50                   	push   eax
c0016ac4:	6a 6f                	push   0x6f
c0016ac6:	6a 6f                	push   0x6f
c0016ac8:	68 ac 1c 02 c0       	push   0xc0021cac
c0016acd:	e8 2c 3e ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0016ad2:	83 c4 20             	add    esp,0x20
c0016ad5:	e9 86 01 00 00       	jmp    c0016c60 <Vm::faultHandler(regs*)+0x720>
c0016ada:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0016add:	0f b7 d7             	movzx  edx,di
c0016ae0:	0f b7 c6             	movzx  eax,si
c0016ae3:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0016ae6:	81 e1 00 04 00 00    	and    ecx,0x400
c0016aec:	83 e5 01             	and    ebp,0x1
c0016aef:	74 1c                	je     c0016b0d <Vm::faultHandler(regs*)+0x5cd>
c0016af1:	55                   	push   ebp
c0016af2:	55                   	push   ebp
c0016af3:	50                   	push   eax
c0016af4:	52                   	push   edx
c0016af5:	e8 f5 f9 ff ff       	call   c00164ef <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0016afa:	83 c4 10             	add    esp,0x10
c0016afd:	89 fa                	mov    edx,edi
c0016aff:	ef                   	out    dx,eax
c0016b00:	8d 46 04             	lea    eax,[esi+0x4]
c0016b03:	83 ee 04             	sub    esi,0x4
c0016b06:	25 ff ff 00 00       	and    eax,0xffff
c0016b0b:	eb 1b                	jmp    c0016b28 <Vm::faultHandler(regs*)+0x5e8>
c0016b0d:	55                   	push   ebp
c0016b0e:	55                   	push   ebp
c0016b0f:	50                   	push   eax
c0016b10:	52                   	push   edx
c0016b11:	e8 c7 f9 ff ff       	call   c00164dd <Vm::readWordFromReal(unsigned short, unsigned short)>
c0016b16:	83 c4 10             	add    esp,0x10
c0016b19:	89 fa                	mov    edx,edi
c0016b1b:	66 ef                	out    dx,ax
c0016b1d:	8d 46 02             	lea    eax,[esi+0x2]
c0016b20:	83 ee 02             	sub    esi,0x2
c0016b23:	25 ff ff 00 00       	and    eax,0xffff
c0016b28:	81 e6 ff ff 00 00    	and    esi,0xffff
c0016b2e:	85 c9                	test   ecx,ecx
c0016b30:	0f 44 f0             	cmove  esi,eax
c0016b33:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0016b36:	e9 c0 00 00 00       	jmp    c0016bfb <Vm::faultHandler(regs*)+0x6bb>
c0016b3b:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016b42:	83 ec 0c             	sub    esp,0xc
c0016b45:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016b49:	50                   	push   eax
c0016b4a:	e8 ea f4 ff ff       	call   c0016039 <Vm::inbv(unsigned short)>
c0016b4f:	0f b6 c0             	movzx  eax,al
c0016b52:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016b55:	eb 3a                	jmp    c0016b91 <Vm::faultHandler(regs*)+0x651>
c0016b57:	83 e5 01             	and    ebp,0x1
c0016b5a:	74 07                	je     c0016b63 <Vm::faultHandler(regs*)+0x623>
c0016b5c:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016b60:	ed                   	in     eax,dx
c0016b61:	eb 14                	jmp    c0016b77 <Vm::faultHandler(regs*)+0x637>
c0016b63:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0016b66:	66 31 f6             	xor    si,si
c0016b69:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0016b6c:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016b70:	66 ed                	in     ax,dx
c0016b72:	0f b7 c0             	movzx  eax,ax
c0016b75:	09 f0                	or     eax,esi
c0016b77:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016b7a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016b7e:	eb 7e                	jmp    c0016bfe <Vm::faultHandler(regs*)+0x6be>
c0016b80:	52                   	push   edx
c0016b81:	52                   	push   edx
c0016b82:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016b86:	50                   	push   eax
c0016b87:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016b8b:	50                   	push   eax
c0016b8c:	e8 bb f4 ff ff       	call   c001604c <Vm::outbv(unsigned short, unsigned char)>
c0016b91:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016b95:	eb 4f                	jmp    c0016be6 <Vm::faultHandler(regs*)+0x6a6>
c0016b97:	83 e5 01             	and    ebp,0x1
c0016b9a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016b9d:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016ba1:	74 03                	je     c0016ba6 <Vm::faultHandler(regs*)+0x666>
c0016ba3:	ef                   	out    dx,eax
c0016ba4:	eb d4                	jmp    c0016b7a <Vm::faultHandler(regs*)+0x63a>
c0016ba6:	66 ef                	out    dx,ax
c0016ba8:	eb d0                	jmp    c0016b7a <Vm::faultHandler(regs*)+0x63a>
c0016baa:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016bae:	83 ec 0c             	sub    esp,0xc
c0016bb1:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016bb8:	50                   	push   eax
c0016bb9:	e8 7b f4 ff ff       	call   c0016039 <Vm::inbv(unsigned short)>
c0016bbe:	0f b6 c0             	movzx  eax,al
c0016bc1:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016bc4:	eb 1d                	jmp    c0016be3 <Vm::faultHandler(regs*)+0x6a3>
c0016bc6:	83 e5 01             	and    ebp,0x1
c0016bc9:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016bcc:	74 03                	je     c0016bd1 <Vm::faultHandler(regs*)+0x691>
c0016bce:	ed                   	in     eax,dx
c0016bcf:	eb 0d                	jmp    c0016bde <Vm::faultHandler(regs*)+0x69e>
c0016bd1:	66 ed                	in     ax,dx
c0016bd3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0016bd6:	0f b7 c0             	movzx  eax,ax
c0016bd9:	66 31 d2             	xor    dx,dx
c0016bdc:	09 d0                	or     eax,edx
c0016bde:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016be1:	eb 18                	jmp    c0016bfb <Vm::faultHandler(regs*)+0x6bb>
c0016be3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016be6:	83 c4 10             	add    esp,0x10
c0016be9:	eb 13                	jmp    c0016bfe <Vm::faultHandler(regs*)+0x6be>
c0016beb:	83 e5 01             	and    ebp,0x1
c0016bee:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016bf1:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016bf4:	74 03                	je     c0016bf9 <Vm::faultHandler(regs*)+0x6b9>
c0016bf6:	ef                   	out    dx,eax
c0016bf7:	eb 02                	jmp    c0016bfb <Vm::faultHandler(regs*)+0x6bb>
c0016bf9:	66 ef                	out    dx,ax
c0016bfb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016bfe:	b0 01                	mov    al,0x1
c0016c00:	eb 60                	jmp    c0016c62 <Vm::faultHandler(regs*)+0x722>
c0016c02:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016c06:	50                   	push   eax
c0016c07:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016c0b:	50                   	push   eax
c0016c0c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016c10:	50                   	push   eax
c0016c11:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016c15:	50                   	push   eax
c0016c16:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016c1a:	50                   	push   eax
c0016c1b:	52                   	push   edx
c0016c1c:	52                   	push   edx
c0016c1d:	68 d9 1c 02 c0       	push   0xc0021cd9
c0016c22:	e8 d7 3c ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0016c27:	83 c4 20             	add    esp,0x20
c0016c2a:	83 ec 0c             	sub    esp,0xc
c0016c2d:	6a 60                	push   0x60
c0016c2f:	e8 05 f4 ff ff       	call   c0016039 <Vm::inbv(unsigned short)>
c0016c34:	83 c4 10             	add    esp,0x10
c0016c37:	0f b6 d0             	movzx  edx,al
c0016c3a:	83 fa 1c             	cmp    edx,0x1c
c0016c3d:	74 05                	je     c0016c44 <Vm::faultHandler(regs*)+0x704>
c0016c3f:	83 fa 5a             	cmp    edx,0x5a
c0016c42:	75 e6                	jne    c0016c2a <Vm::faultHandler(regs*)+0x6ea>
c0016c44:	0f b6 c0             	movzx  eax,al
c0016c47:	83 f8 1c             	cmp    eax,0x1c
c0016c4a:	74 05                	je     c0016c51 <Vm::faultHandler(regs*)+0x711>
c0016c4c:	83 f8 5a             	cmp    eax,0x5a
c0016c4f:	75 0f                	jne    c0016c60 <Vm::faultHandler(regs*)+0x720>
c0016c51:	83 ec 0c             	sub    esp,0xc
c0016c54:	6a 60                	push   0x60
c0016c56:	e8 de f3 ff ff       	call   c0016039 <Vm::inbv(unsigned short)>
c0016c5b:	83 c4 10             	add    esp,0x10
c0016c5e:	eb e4                	jmp    c0016c44 <Vm::faultHandler(regs*)+0x704>
c0016c60:	31 c0                	xor    eax,eax
c0016c62:	83 c4 2c             	add    esp,0x2c
c0016c65:	5b                   	pop    ebx
c0016c66:	5e                   	pop    esi
c0016c67:	5f                   	pop    edi
c0016c68:	5d                   	pop    ebp
c0016c69:	c3                   	ret    

c0016c6a <noCopro(unsigned long)>:
c0016c6a:	c3                   	ret    

c0016c6b <nmiHandler(regs*, void*)>:
c0016c6b:	83 ec 0c             	sub    esp,0xc
c0016c6e:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0016c73:	83 ec 0c             	sub    esp,0xc
c0016c76:	50                   	push   eax
c0016c77:	e8 52 06 ff ff       	call   c00072ce <Computer::handleNMI()>
c0016c7c:	83 c4 10             	add    esp,0x10
c0016c7f:	90                   	nop
c0016c80:	83 c4 0c             	add    esp,0xc
c0016c83:	c3                   	ret    

c0016c84 <doubleFault(regs*, void*)>:
c0016c84:	55                   	push   ebp
c0016c85:	89 e5                	mov    ebp,esp
c0016c87:	83 ec 08             	sub    esp,0x8
c0016c8a:	83 ec 0c             	sub    esp,0xc
c0016c8d:	68 38 1d 02 c0       	push   0xc0021d38
c0016c92:	e8 da 9e ff ff       	call   c0010b71 <KePanic(char const*)>
c0016c97:	83 c4 10             	add    esp,0x10
c0016c9a:	90                   	nop
c0016c9b:	c9                   	leave  
c0016c9c:	c3                   	ret    

c0016c9d <displayDebugInfo(regs*)>:
c0016c9d:	83 ec 1c             	sub    esp,0x1c
c0016ca0:	0f 20 c0             	mov    eax,cr0
c0016ca3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ca7:	0f 20 d0             	mov    eax,cr2
c0016caa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016cae:	0f 20 d8             	mov    eax,cr3
c0016cb1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016cb5:	0f 20 e0             	mov    eax,cr4
c0016cb8:	89 04 24             	mov    DWORD PTR [esp],eax
c0016cbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016cbf:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016cc2:	83 ec 08             	sub    esp,0x8
c0016cc5:	50                   	push   eax
c0016cc6:	68 54 1d 02 c0       	push   0xc0021d54
c0016ccb:	e8 2e 3c ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0016cd0:	83 c4 10             	add    esp,0x10
c0016cd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016cd7:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0016cda:	83 ec 08             	sub    esp,0x8
c0016cdd:	50                   	push   eax
c0016cde:	68 45 1d 02 c0       	push   0xc0021d45
c0016ce3:	e8 16 3c ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0016ce8:	83 c4 10             	add    esp,0x10
c0016ceb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016cef:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0016cf2:	83 ec 08             	sub    esp,0x8
c0016cf5:	50                   	push   eax
c0016cf6:	68 50 1d 02 c0       	push   0xc0021d50
c0016cfb:	e8 fe 3b ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0016d00:	83 c4 10             	add    esp,0x10
c0016d03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d07:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016d0a:	83 ec 08             	sub    esp,0x8
c0016d0d:	50                   	push   eax
c0016d0e:	68 5f 1d 02 c0       	push   0xc0021d5f
c0016d13:	e8 e6 3b ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0016d18:	83 c4 10             	add    esp,0x10
c0016d1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d1f:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0016d22:	83 ec 08             	sub    esp,0x8
c0016d25:	50                   	push   eax
c0016d26:	68 6a 1d 02 c0       	push   0xc0021d6a
c0016d2b:	e8 ce 3b ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0016d30:	83 c4 10             	add    esp,0x10
c0016d33:	83 ec 08             	sub    esp,0x8
c0016d36:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016d3a:	68 75 1d 02 c0       	push   0xc0021d75
c0016d3f:	e8 ba 3b ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0016d44:	83 c4 10             	add    esp,0x10
c0016d47:	83 ec 08             	sub    esp,0x8
c0016d4a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016d4e:	68 80 1d 02 c0       	push   0xc0021d80
c0016d53:	e8 a6 3b ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0016d58:	83 c4 10             	add    esp,0x10
c0016d5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d5f:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0016d62:	c1 e0 05             	shl    eax,0x5
c0016d65:	8d 90 00 2d 02 c0    	lea    edx,[eax-0x3ffdd300]
c0016d6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d6f:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0016d72:	83 ec 04             	sub    esp,0x4
c0016d75:	52                   	push   edx
c0016d76:	50                   	push   eax
c0016d77:	68 8b 1d 02 c0       	push   0xc0021d8b
c0016d7c:	e8 7d 3b ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0016d81:	83 c4 10             	add    esp,0x10
c0016d84:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016d89:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016d8f:	83 ec 0c             	sub    esp,0xc
c0016d92:	50                   	push   eax
c0016d93:	e8 c9 19 ff ff       	call   c0008761 <setActiveTerminal(VgaText*)>
c0016d98:	83 c4 10             	add    esp,0x10
c0016d9b:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016da0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016da6:	83 ec 08             	sub    esp,0x8
c0016da9:	68 9a 1d 02 c0       	push   0xc0021d9a
c0016dae:	50                   	push   eax
c0016daf:	e8 ea 1c ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c0016db4:	83 c4 10             	add    esp,0x10
c0016db7:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016dbc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016dc2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016dc6:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0016dc9:	83 ec 08             	sub    esp,0x8
c0016dcc:	52                   	push   edx
c0016dcd:	50                   	push   eax
c0016dce:	e8 85 1c ff ff       	call   c0008a58 <VgaText::putx(unsigned int)>
c0016dd3:	83 c4 10             	add    esp,0x10
c0016dd6:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016ddb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016de1:	83 ec 08             	sub    esp,0x8
c0016de4:	68 a8 1d 02 c0       	push   0xc0021da8
c0016de9:	50                   	push   eax
c0016dea:	e8 af 1c ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c0016def:	83 c4 10             	add    esp,0x10
c0016df2:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016df7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016dfd:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0016e02:	8b 12                	mov    edx,DWORD PTR [edx]
c0016e04:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0016e07:	83 c2 0c             	add    edx,0xc
c0016e0a:	83 ec 08             	sub    esp,0x8
c0016e0d:	52                   	push   edx
c0016e0e:	50                   	push   eax
c0016e0f:	e8 8a 1c ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c0016e14:	83 c4 10             	add    esp,0x10
c0016e17:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016e1c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016e22:	83 ec 08             	sub    esp,0x8
c0016e25:	68 b1 1d 02 c0       	push   0xc0021db1
c0016e2a:	50                   	push   eax
c0016e2b:	e8 6e 1c ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c0016e30:	83 c4 10             	add    esp,0x10
c0016e33:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016e38:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016e3e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016e42:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0016e45:	83 ec 08             	sub    esp,0x8
c0016e48:	52                   	push   edx
c0016e49:	50                   	push   eax
c0016e4a:	e8 09 1c ff ff       	call   c0008a58 <VgaText::putx(unsigned int)>
c0016e4f:	83 c4 10             	add    esp,0x10
c0016e52:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016e57:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016e5d:	83 ec 08             	sub    esp,0x8
c0016e60:	68 b9 1d 02 c0       	push   0xc0021db9
c0016e65:	50                   	push   eax
c0016e66:	e8 33 1c ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c0016e6b:	83 c4 10             	add    esp,0x10
c0016e6e:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016e73:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016e79:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016e7d:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0016e80:	83 ec 08             	sub    esp,0x8
c0016e83:	52                   	push   edx
c0016e84:	50                   	push   eax
c0016e85:	e8 ce 1b ff ff       	call   c0008a58 <VgaText::putx(unsigned int)>
c0016e8a:	83 c4 10             	add    esp,0x10
c0016e8d:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016e92:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016e98:	83 ec 08             	sub    esp,0x8
c0016e9b:	68 c1 1d 02 c0       	push   0xc0021dc1
c0016ea0:	50                   	push   eax
c0016ea1:	e8 f8 1b ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c0016ea6:	83 c4 10             	add    esp,0x10
c0016ea9:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016eae:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016eb4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016eb8:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0016ebb:	83 ec 08             	sub    esp,0x8
c0016ebe:	52                   	push   edx
c0016ebf:	50                   	push   eax
c0016ec0:	e8 93 1b ff ff       	call   c0008a58 <VgaText::putx(unsigned int)>
c0016ec5:	83 c4 10             	add    esp,0x10
c0016ec8:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016ecd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ed3:	83 ec 08             	sub    esp,0x8
c0016ed6:	68 c9 1d 02 c0       	push   0xc0021dc9
c0016edb:	50                   	push   eax
c0016edc:	e8 bd 1b ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c0016ee1:	83 c4 10             	add    esp,0x10
c0016ee4:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016ee9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016eef:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016ef3:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0016ef6:	83 ec 08             	sub    esp,0x8
c0016ef9:	52                   	push   edx
c0016efa:	50                   	push   eax
c0016efb:	e8 58 1b ff ff       	call   c0008a58 <VgaText::putx(unsigned int)>
c0016f00:	83 c4 10             	add    esp,0x10
c0016f03:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016f08:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016f0e:	83 ec 08             	sub    esp,0x8
c0016f11:	68 d1 1d 02 c0       	push   0xc0021dd1
c0016f16:	50                   	push   eax
c0016f17:	e8 82 1b ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c0016f1c:	83 c4 10             	add    esp,0x10
c0016f1f:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016f24:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016f2a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016f2e:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0016f31:	83 ec 08             	sub    esp,0x8
c0016f34:	52                   	push   edx
c0016f35:	50                   	push   eax
c0016f36:	e8 1d 1b ff ff       	call   c0008a58 <VgaText::putx(unsigned int)>
c0016f3b:	83 c4 10             	add    esp,0x10
c0016f3e:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016f43:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016f49:	83 ec 08             	sub    esp,0x8
c0016f4c:	68 d9 1d 02 c0       	push   0xc0021dd9
c0016f51:	50                   	push   eax
c0016f52:	e8 47 1b ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c0016f57:	83 c4 10             	add    esp,0x10
c0016f5a:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016f5f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016f65:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016f69:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016f6c:	83 ec 08             	sub    esp,0x8
c0016f6f:	52                   	push   edx
c0016f70:	50                   	push   eax
c0016f71:	e8 e2 1a ff ff       	call   c0008a58 <VgaText::putx(unsigned int)>
c0016f76:	83 c4 10             	add    esp,0x10
c0016f79:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016f7e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016f84:	83 ec 08             	sub    esp,0x8
c0016f87:	68 e1 1d 02 c0       	push   0xc0021de1
c0016f8c:	50                   	push   eax
c0016f8d:	e8 0c 1b ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c0016f92:	83 c4 10             	add    esp,0x10
c0016f95:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016f9a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016fa0:	83 ec 08             	sub    esp,0x8
c0016fa3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016fa7:	50                   	push   eax
c0016fa8:	e8 ab 1a ff ff       	call   c0008a58 <VgaText::putx(unsigned int)>
c0016fad:	83 c4 10             	add    esp,0x10
c0016fb0:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016fb5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016fbb:	83 ec 08             	sub    esp,0x8
c0016fbe:	68 ea 1d 02 c0       	push   0xc0021dea
c0016fc3:	50                   	push   eax
c0016fc4:	e8 d5 1a ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c0016fc9:	83 c4 10             	add    esp,0x10
c0016fcc:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016fd1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016fd7:	83 ec 08             	sub    esp,0x8
c0016fda:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016fde:	50                   	push   eax
c0016fdf:	e8 74 1a ff ff       	call   c0008a58 <VgaText::putx(unsigned int)>
c0016fe4:	83 c4 10             	add    esp,0x10
c0016fe7:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016fec:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ff2:	83 ec 08             	sub    esp,0x8
c0016ff5:	68 f2 1d 02 c0       	push   0xc0021df2
c0016ffa:	50                   	push   eax
c0016ffb:	e8 9e 1a ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c0017000:	83 c4 10             	add    esp,0x10
c0017003:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0017008:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001700e:	83 ec 08             	sub    esp,0x8
c0017011:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017015:	50                   	push   eax
c0017016:	e8 3d 1a ff ff       	call   c0008a58 <VgaText::putx(unsigned int)>
c001701b:	83 c4 10             	add    esp,0x10
c001701e:	fa                   	cli    
c001701f:	f4                   	hlt    
c0017020:	eb fe                	jmp    c0017020 <displayDebugInfo(regs*)+0x383>

c0017022 <HalSystemIdle()>:
c0017022:	56                   	push   esi
c0017023:	53                   	push   ebx
c0017024:	83 ec 14             	sub    esp,0x14
c0017027:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001702c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017032:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0017038:	83 e0 04             	and    eax,0x4
c001703b:	0f b6 c0             	movzx  eax,al
c001703e:	85 c0                	test   eax,eax
c0017040:	0f 95 c0             	setne  al
c0017043:	0f b6 c0             	movzx  eax,al
c0017046:	85 c0                	test   eax,eax
c0017048:	74 4c                	je     c0017096 <HalSystemIdle()+0x74>
c001704a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001704f:	83 ec 08             	sub    esp,0x8
c0017052:	68 e1 00 00 00       	push   0xe1
c0017057:	50                   	push   eax
c0017058:	e8 7d 00 ff ff       	call   c00070da <Computer::rdmsr(unsigned int)>
c001705d:	83 c4 10             	add    esp,0x10
c0017060:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017064:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017068:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001706d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017071:	83 e2 02             	and    edx,0x2
c0017074:	89 d3                	mov    ebx,edx
c0017076:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001707a:	83 e2 00             	and    edx,0x0
c001707d:	89 d6                	mov    esi,edx
c001707f:	56                   	push   esi
c0017080:	53                   	push   ebx
c0017081:	68 e1 00 00 00       	push   0xe1
c0017086:	50                   	push   eax
c0017087:	e8 7a 00 ff ff       	call   c0007106 <Computer::wrmsr(unsigned int, unsigned long long)>
c001708c:	83 c4 10             	add    esp,0x10
c001708f:	e8 00 91 fe ff       	call   c0000194 <doTPAUSE>
c0017094:	eb 01                	jmp    c0017097 <HalSystemIdle()+0x75>
c0017096:	f4                   	hlt    
c0017097:	90                   	nop
c0017098:	83 c4 14             	add    esp,0x14
c001709b:	5b                   	pop    ebx
c001709c:	5e                   	pop    esi
c001709d:	c3                   	ret    

c001709e <displayProgramFault(char const*)>:
c001709e:	83 ec 0c             	sub    esp,0xc
c00170a1:	83 ec 0c             	sub    esp,0xc
c00170a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170a8:	e8 51 38 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c00170ad:	83 c4 10             	add    esp,0x10
c00170b0:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00170b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00170b7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00170ba:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00170c0:	85 c0                	test   eax,eax
c00170c2:	74 21                	je     c00170e5 <displayProgramFault(char const*)+0x47>
c00170c4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00170c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00170cb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00170ce:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00170d4:	6a 04                	push   0x4
c00170d6:	6a 0f                	push   0xf
c00170d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00170dc:	50                   	push   eax
c00170dd:	e8 2e 1a ff ff       	call   c0008b10 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00170e2:	83 c4 10             	add    esp,0x10
c00170e5:	90                   	nop
c00170e6:	83 c4 0c             	add    esp,0xc
c00170e9:	c3                   	ret    

c00170ea <gpFault(regs*, void*)>:
c00170ea:	83 ec 1c             	sub    esp,0x1c
c00170ed:	c7 05 14 92 02 c0 40 65 01 c0 	mov    DWORD PTR ds:0xc0029214,0xc0016540
c00170f7:	a1 14 92 02 c0       	mov    eax,ds:0xc0029214
c00170fc:	85 c0                	test   eax,eax
c00170fe:	74 1e                	je     c001711e <gpFault(regs*, void*)+0x34>
c0017100:	a1 14 92 02 c0       	mov    eax,ds:0xc0029214
c0017105:	83 ec 0c             	sub    esp,0xc
c0017108:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001710c:	ff d0                	call   eax
c001710e:	83 c4 10             	add    esp,0x10
c0017111:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017115:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001711a:	85 c0                	test   eax,eax
c001711c:	75 2e                	jne    c001714c <gpFault(regs*, void*)+0x62>
c001711e:	83 ec 0c             	sub    esp,0xc
c0017121:	68 fa 1d 02 c0       	push   0xc0021dfa
c0017126:	e8 73 ff ff ff       	call   c001709e <displayProgramFault(char const*)>
c001712b:	83 c4 10             	add    esp,0x10
c001712e:	83 ec 0c             	sub    esp,0xc
c0017131:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017135:	e8 63 fb ff ff       	call   c0016c9d <displayDebugInfo(regs*)>
c001713a:	83 c4 10             	add    esp,0x10
c001713d:	83 ec 0c             	sub    esp,0xc
c0017140:	6a 00                	push   0x0
c0017142:	e8 99 ed ff ff       	call   c0015ee0 <Thr::terminateFromIRQ(int)>
c0017147:	83 c4 10             	add    esp,0x10
c001714a:	eb 01                	jmp    c001714d <gpFault(regs*, void*)+0x63>
c001714c:	90                   	nop
c001714d:	83 c4 1c             	add    esp,0x1c
c0017150:	c3                   	ret    

c0017151 <pgFault(regs*, void*)>:
c0017151:	83 ec 1c             	sub    esp,0x1c
c0017154:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017158:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001715b:	0f 20 d0             	mov    eax,cr2
c001715e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017162:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017166:	83 ec 04             	sub    esp,0x4
c0017169:	52                   	push   edx
c001716a:	50                   	push   eax
c001716b:	68 d8 1e 02 c0       	push   0xc0021ed8
c0017170:	e8 89 37 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0017175:	83 c4 10             	add    esp,0x10
c0017178:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001717d:	8b 00                	mov    eax,DWORD PTR [eax]
c001717f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017182:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017188:	0f 20 d2             	mov    edx,cr2
c001718b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001718f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017193:	83 ec 08             	sub    esp,0x8
c0017196:	52                   	push   edx
c0017197:	50                   	push   eax
c0017198:	e8 d1 31 ff ff       	call   c000a36e <VAS::tryLoadBackOffDisk(unsigned long)>
c001719d:	83 c4 10             	add    esp,0x10
c00171a0:	0f b6 c0             	movzx  eax,al
c00171a3:	85 c0                	test   eax,eax
c00171a5:	75 2e                	jne    c00171d5 <pgFault(regs*, void*)+0x84>
c00171a7:	83 ec 0c             	sub    esp,0xc
c00171aa:	68 13 1e 02 c0       	push   0xc0021e13
c00171af:	e8 ea fe ff ff       	call   c001709e <displayProgramFault(char const*)>
c00171b4:	83 c4 10             	add    esp,0x10
c00171b7:	83 ec 0c             	sub    esp,0xc
c00171ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00171be:	e8 da fa ff ff       	call   c0016c9d <displayDebugInfo(regs*)>
c00171c3:	83 c4 10             	add    esp,0x10
c00171c6:	83 ec 0c             	sub    esp,0xc
c00171c9:	6a 00                	push   0x0
c00171cb:	e8 10 ed ff ff       	call   c0015ee0 <Thr::terminateFromIRQ(int)>
c00171d0:	83 c4 10             	add    esp,0x10
c00171d3:	eb 01                	jmp    c00171d6 <pgFault(regs*, void*)+0x85>
c00171d5:	90                   	nop
c00171d6:	83 c4 1c             	add    esp,0x1c
c00171d9:	c3                   	ret    

c00171da <otherISRHandler(regs*, void*)>:
c00171da:	83 ec 0c             	sub    esp,0xc
c00171dd:	83 ec 0c             	sub    esp,0xc
c00171e0:	68 00 1f 02 c0       	push   0xc0021f00
c00171e5:	e8 b4 fe ff ff       	call   c001709e <displayProgramFault(char const*)>
c00171ea:	83 c4 10             	add    esp,0x10
c00171ed:	83 ec 0c             	sub    esp,0xc
c00171f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171f4:	e8 a4 fa ff ff       	call   c0016c9d <displayDebugInfo(regs*)>
c00171f9:	83 c4 10             	add    esp,0x10
c00171fc:	83 ec 0c             	sub    esp,0xc
c00171ff:	6a 00                	push   0x0
c0017201:	e8 da ec ff ff       	call   c0015ee0 <Thr::terminateFromIRQ(int)>
c0017206:	83 c4 10             	add    esp,0x10
c0017209:	90                   	nop
c001720a:	83 c4 0c             	add    esp,0xc
c001720d:	c3                   	ret    

c001720e <opcodeFault(regs*, void*)>:
c001720e:	55                   	push   ebp
c001720f:	89 e5                	mov    ebp,esp
c0017211:	83 ec 08             	sub    esp,0x8
c0017214:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017217:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001721a:	83 ec 08             	sub    esp,0x8
c001721d:	50                   	push   eax
c001721e:	68 1e 1e 02 c0       	push   0xc0021e1e
c0017223:	e8 d6 36 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0017228:	83 c4 10             	add    esp,0x10
c001722b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017230:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017236:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001723c:	0f b6 c0             	movzx  eax,al
c001723f:	85 c0                	test   eax,eax
c0017241:	74 21                	je     c0017264 <opcodeFault(regs*, void*)+0x56>
c0017243:	83 ec 0c             	sub    esp,0xc
c0017246:	68 28 1f 02 c0       	push   0xc0021f28
c001724b:	e8 ae 36 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0017250:	83 c4 10             	add    esp,0x10
c0017253:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017256:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017259:	8d 50 19             	lea    edx,[eax+0x19]
c001725c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001725f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017262:	eb 2b                	jmp    c001728f <opcodeFault(regs*, void*)+0x81>
c0017264:	83 ec 0c             	sub    esp,0xc
c0017267:	68 2c 1e 02 c0       	push   0xc0021e2c
c001726c:	e8 2d fe ff ff       	call   c001709e <displayProgramFault(char const*)>
c0017271:	83 c4 10             	add    esp,0x10
c0017274:	83 ec 0c             	sub    esp,0xc
c0017277:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001727a:	e8 1e fa ff ff       	call   c0016c9d <displayDebugInfo(regs*)>
c001727f:	83 c4 10             	add    esp,0x10
c0017282:	83 ec 0c             	sub    esp,0xc
c0017285:	6a 00                	push   0x0
c0017287:	e8 54 ec ff ff       	call   c0015ee0 <Thr::terminateFromIRQ(int)>
c001728c:	83 c4 10             	add    esp,0x10
c001728f:	c9                   	leave  
c0017290:	c3                   	ret    

c0017291 <i386SaveCoprocessor(void*)>:
c0017291:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017295:	83 c0 3f             	add    eax,0x3f
c0017298:	83 e0 c0             	and    eax,0xffffffc0
c001729b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001729f:	ff 25 10 92 02 c0    	jmp    DWORD PTR ds:0xc0029210

c00172a5 <i386LoadCoprocessor(void*)>:
c00172a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00172a9:	83 c0 3f             	add    eax,0x3f
c00172ac:	83 e0 c0             	and    eax,0xffffffc0
c00172af:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00172b3:	ff 25 0c 92 02 c0    	jmp    DWORD PTR ds:0xc002920c

c00172b9 <x87EmulHandler(regs*, void*)>:
c00172b9:	53                   	push   ebx
c00172ba:	83 ec 08             	sub    esp,0x8
c00172bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00172c2:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00172c6:	74 10                	je     c00172d8 <x87EmulHandler(regs*, void*)+0x1f>
c00172c8:	83 ec 0c             	sub    esp,0xc
c00172cb:	68 39 1e 02 c0       	push   0xc0021e39
c00172d0:	e8 9c 98 ff ff       	call   c0010b71 <KePanic(char const*)>
c00172d5:	83 c4 10             	add    esp,0x10
c00172d8:	0f 20 c0             	mov    eax,cr0
c00172db:	a8 08                	test   al,0x8
c00172dd:	74 59                	je     c0017338 <x87EmulHandler(regs*, void*)+0x7f>
c00172df:	0f 06                	clts   
c00172e1:	a1 08 92 02 c0       	mov    eax,ds:0xc0029208
c00172e6:	85 c0                	test   eax,eax
c00172e8:	74 0e                	je     c00172f8 <x87EmulHandler(regs*, void*)+0x3f>
c00172ea:	83 ec 0c             	sub    esp,0xc
c00172ed:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00172f0:	e8 9c ff ff ff       	call   c0017291 <i386SaveCoprocessor(void*)>
c00172f5:	83 c4 10             	add    esp,0x10
c00172f8:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00172fe:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0017302:	75 12                	jne    c0017316 <x87EmulHandler(regs*, void*)+0x5d>
c0017304:	83 ec 0c             	sub    esp,0xc
c0017307:	68 40 02 00 00       	push   0x240
c001730c:	e8 ba 07 ff ff       	call   c0007acb <malloc>
c0017311:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0017314:	eb 10                	jmp    c0017326 <x87EmulHandler(regs*, void*)+0x6d>
c0017316:	a1 08 92 02 c0       	mov    eax,ds:0xc0029208
c001731b:	83 ec 0c             	sub    esp,0xc
c001731e:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017321:	e8 7f ff ff ff       	call   c00172a5 <i386LoadCoprocessor(void*)>
c0017326:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001732b:	83 c4 10             	add    esp,0x10
c001732e:	a3 08 92 02 c0       	mov    ds:0xc0029208,eax
c0017333:	83 c4 08             	add    esp,0x8
c0017336:	5b                   	pop    ebx
c0017337:	c3                   	ret    
c0017338:	83 ec 0c             	sub    esp,0xc
c001733b:	68 4d 1e 02 c0       	push   0xc0021e4d
c0017340:	e8 b9 35 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0017345:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001734d:	83 c4 18             	add    esp,0x18
c0017350:	5b                   	pop    ebx
c0017351:	e9 8a eb ff ff       	jmp    c0015ee0 <Thr::terminateFromIRQ(int)>

c0017356 <HalInitialiseCoprocessor()>:
c0017356:	83 ec 10             	sub    esp,0x10
c0017359:	6a 00                	push   0x0
c001735b:	68 b9 72 01 c0       	push   0xc00172b9
c0017360:	6a 07                	push   0x7
c0017362:	c7 05 08 92 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029208,0x0
c001736c:	e8 4d 52 ff ff       	call   c000c5be <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017371:	e8 aa 70 00 00       	call   c001e420 <avxDetect>
c0017376:	83 c4 10             	add    esp,0x10
c0017379:	85 c0                	test   eax,eax
c001737b:	74 1c                	je     c0017399 <HalInitialiseCoprocessor()+0x43>
c001737d:	c7 05 10 92 02 c0 4a e4 01 c0 	mov    DWORD PTR ds:0xc0029210,0xc001e44a
c0017387:	c7 05 0c 92 02 c0 5b e4 01 c0 	mov    DWORD PTR ds:0xc002920c,0xc001e45b
c0017391:	83 c4 0c             	add    esp,0xc
c0017394:	e9 d3 70 00 00       	jmp    c001e46c <avxInit>
c0017399:	e8 12 74 00 00       	call   c001e7b0 <absolutelyNoChanceInHell>
c001739e:	85 c0                	test   eax,eax
c00173a0:	74 1c                	je     c00173be <HalInitialiseCoprocessor()+0x68>
c00173a2:	c7 05 10 92 02 c0 c8 e7 01 c0 	mov    DWORD PTR ds:0xc0029210,0xc001e7c8
c00173ac:	c7 05 0c 92 02 c0 d0 e7 01 c0 	mov    DWORD PTR ds:0xc002920c,0xc001e7d0
c00173b6:	83 c4 0c             	add    esp,0xc
c00173b9:	e9 1a 74 00 00       	jmp    c001e7d8 <sseInit>
c00173be:	e8 33 74 00 00       	call   c001e7f6 <x87Detect>
c00173c3:	85 c0                	test   eax,eax
c00173c5:	74 1c                	je     c00173e3 <HalInitialiseCoprocessor()+0x8d>
c00173c7:	c7 05 10 92 02 c0 11 e8 01 c0 	mov    DWORD PTR ds:0xc0029210,0xc001e811
c00173d1:	c7 05 0c 92 02 c0 18 e8 01 c0 	mov    DWORD PTR ds:0xc002920c,0xc001e818
c00173db:	83 c4 0c             	add    esp,0xc
c00173de:	e9 3c 74 00 00       	jmp    c001e81f <x87Init>
c00173e3:	c7 05 10 92 02 c0 6a 6c 01 c0 	mov    DWORD PTR ds:0xc0029210,0xc0016c6a
c00173ed:	c7 05 0c 92 02 c0 6a 6c 01 c0 	mov    DWORD PTR ds:0xc002920c,0xc0016c6a
c00173f7:	0f 20 c0             	mov    eax,cr0
c00173fa:	83 c8 04             	or     eax,0x4
c00173fd:	0f 22 c0             	mov    cr0,eax
c0017400:	83 c4 0c             	add    esp,0xc
c0017403:	c3                   	ret    

c0017404 <HalPanic(char const*)>:
c0017404:	53                   	push   ebx
c0017405:	83 ec 10             	sub    esp,0x10
c0017408:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001740c:	fa                   	cli    
c001740d:	53                   	push   ebx
c001740e:	68 63 1e 02 c0       	push   0xc0021e63
c0017413:	e8 e6 34 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0017418:	a1 04 92 02 c0       	mov    eax,ds:0xc0029204
c001741d:	83 c4 10             	add    esp,0x10
c0017420:	85 c0                	test   eax,eax
c0017422:	74 09                	je     c001742d <HalPanic(char const*)+0x29>
c0017424:	83 ec 0c             	sub    esp,0xc
c0017427:	53                   	push   ebx
c0017428:	ff d0                	call   eax
c001742a:	83 c4 10             	add    esp,0x10
c001742d:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c0017432:	85 c0                	test   eax,eax
c0017434:	0f 84 dc 00 00 00    	je     c0017516 <HalPanic(char const*)+0x112>
c001743a:	52                   	push   edx
c001743b:	6a 01                	push   0x1
c001743d:	6a 0f                	push   0xf
c001743f:	50                   	push   eax
c0017440:	e8 77 11 ff ff       	call   c00085bc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017445:	59                   	pop    ecx
c0017446:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c001744c:	e8 5b 13 ff ff       	call   c00087ac <VgaText::clearScreen()>
c0017451:	58                   	pop    eax
c0017452:	5a                   	pop    edx
c0017453:	68 64 02 02 c0       	push   0xc0020264
c0017458:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c001745e:	e8 91 11 ff ff       	call   c00085f4 <VgaText::setTitle(char*)>
c0017463:	83 c4 0c             	add    esp,0xc
c0017466:	6a 01                	push   0x1
c0017468:	6a 0f                	push   0xf
c001746a:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017470:	e8 47 11 ff ff       	call   c00085bc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017475:	59                   	pop    ecx
c0017476:	58                   	pop    eax
c0017477:	68 7c 1e 02 c0       	push   0xc0021e7c
c001747c:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017482:	e8 17 16 ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c0017487:	83 c4 0c             	add    esp,0xc
c001748a:	6a 0f                	push   0xf
c001748c:	6a 01                	push   0x1
c001748e:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017494:	e8 23 11 ff ff       	call   c00085bc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017499:	58                   	pop    eax
c001749a:	5a                   	pop    edx
c001749b:	68 85 1e 02 c0       	push   0xc0021e85
c00174a0:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c00174a6:	e8 f3 15 ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c00174ab:	83 c4 0c             	add    esp,0xc
c00174ae:	6a 01                	push   0x1
c00174b0:	6a 0f                	push   0xf
c00174b2:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c00174b8:	e8 ff 10 ff ff       	call   c00085bc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00174bd:	59                   	pop    ecx
c00174be:	58                   	pop    eax
c00174bf:	68 c9 1e 02 c0       	push   0xc0021ec9
c00174c4:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c00174ca:	e8 cf 15 ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c00174cf:	58                   	pop    eax
c00174d0:	5a                   	pop    edx
c00174d1:	68 92 1e 02 c0       	push   0xc0021e92
c00174d6:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c00174dc:	e8 bd 15 ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c00174e1:	59                   	pop    ecx
c00174e2:	58                   	pop    eax
c00174e3:	68 cc 1e 02 c0       	push   0xc0021ecc
c00174e8:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c00174ee:	e8 ab 15 ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c00174f3:	58                   	pop    eax
c00174f4:	5a                   	pop    edx
c00174f5:	53                   	push   ebx
c00174f6:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c00174fc:	e8 9d 15 ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c0017501:	59                   	pop    ecx
c0017502:	5b                   	pop    ebx
c0017503:	68 c9 1e 02 c0       	push   0xc0021ec9
c0017508:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c001750e:	e8 8b 15 ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c0017513:	83 c4 10             	add    esp,0x10
c0017516:	eb fe                	jmp    c0017516 <HalPanic(char const*)+0x112>

c0017518 <HalQueryPerformanceCounter()>:
c0017518:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001751d:	31 d2                	xor    edx,edx
c001751f:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017525:	31 c0                	xor    eax,eax
c0017527:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c001752e:	74 02                	je     c0017532 <HalQueryPerformanceCounter()+0x1a>
c0017530:	0f 31                	rdtsc  
c0017532:	c3                   	ret    

c0017533 <HalInitialise()>:
c0017533:	53                   	push   ebx
c0017534:	83 ec 08             	sub    esp,0x8
c0017537:	e8 b9 52 ff ff       	call   c000c7f5 <setupINTS()>
c001753c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017541:	80 3d 80 87 02 c0 00 	cmp    BYTE PTR ds:0xc0028780,0x0
c0017548:	75 0f                	jne    c0017559 <HalInitialise()+0x26>
c001754a:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017550:	83 e2 fe             	and    edx,0xfffffffe
c0017553:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017559:	c6 05 00 92 02 c0 00 	mov    BYTE PTR ds:0xc0029200,0x0
c0017560:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017566:	83 e2 fe             	and    edx,0xfffffffe
c0017569:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001756f:	e8 a0 02 00 00       	call   c0017814 <picOpen()>
c0017574:	80 3d 00 92 02 c0 00 	cmp    BYTE PTR ds:0xc0029200,0x0
c001757b:	74 0a                	je     c0017587 <HalInitialise()+0x54>
c001757d:	e8 e2 01 00 00       	call   c0017764 <picDisable()>
c0017582:	e8 0d 68 00 00       	call   c001dd94 <apicOpen()>
c0017587:	50                   	push   eax
c0017588:	bb 0f 00 00 00       	mov    ebx,0xf
c001758d:	6a 00                	push   0x0
c001758f:	68 da 71 01 c0       	push   0xc00171da
c0017594:	6a 00                	push   0x0
c0017596:	e8 23 50 ff ff       	call   c000c5be <installISRHandler(int, void (*)(regs*, void*), void*)>
c001759b:	83 c4 0c             	add    esp,0xc
c001759e:	6a 00                	push   0x0
c00175a0:	68 da 71 01 c0       	push   0xc00171da
c00175a5:	6a 01                	push   0x1
c00175a7:	e8 12 50 ff ff       	call   c000c5be <installISRHandler(int, void (*)(regs*, void*), void*)>
c00175ac:	83 c4 0c             	add    esp,0xc
c00175af:	6a 00                	push   0x0
c00175b1:	68 6b 6c 01 c0       	push   0xc0016c6b
c00175b6:	6a 02                	push   0x2
c00175b8:	e8 01 50 ff ff       	call   c000c5be <installISRHandler(int, void (*)(regs*, void*), void*)>
c00175bd:	83 c4 0c             	add    esp,0xc
c00175c0:	6a 00                	push   0x0
c00175c2:	68 da 71 01 c0       	push   0xc00171da
c00175c7:	6a 03                	push   0x3
c00175c9:	e8 f0 4f ff ff       	call   c000c5be <installISRHandler(int, void (*)(regs*, void*), void*)>
c00175ce:	83 c4 0c             	add    esp,0xc
c00175d1:	6a 00                	push   0x0
c00175d3:	68 da 71 01 c0       	push   0xc00171da
c00175d8:	6a 04                	push   0x4
c00175da:	e8 df 4f ff ff       	call   c000c5be <installISRHandler(int, void (*)(regs*, void*), void*)>
c00175df:	83 c4 0c             	add    esp,0xc
c00175e2:	6a 00                	push   0x0
c00175e4:	68 da 71 01 c0       	push   0xc00171da
c00175e9:	6a 05                	push   0x5
c00175eb:	e8 ce 4f ff ff       	call   c000c5be <installISRHandler(int, void (*)(regs*, void*), void*)>
c00175f0:	83 c4 0c             	add    esp,0xc
c00175f3:	6a 00                	push   0x0
c00175f5:	68 0e 72 01 c0       	push   0xc001720e
c00175fa:	6a 06                	push   0x6
c00175fc:	e8 bd 4f ff ff       	call   c000c5be <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017601:	83 c4 0c             	add    esp,0xc
c0017604:	6a 00                	push   0x0
c0017606:	68 84 6c 01 c0       	push   0xc0016c84
c001760b:	6a 08                	push   0x8
c001760d:	e8 ac 4f ff ff       	call   c000c5be <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017612:	83 c4 0c             	add    esp,0xc
c0017615:	6a 00                	push   0x0
c0017617:	68 da 71 01 c0       	push   0xc00171da
c001761c:	6a 09                	push   0x9
c001761e:	e8 9b 4f ff ff       	call   c000c5be <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017623:	83 c4 0c             	add    esp,0xc
c0017626:	6a 00                	push   0x0
c0017628:	68 da 71 01 c0       	push   0xc00171da
c001762d:	6a 0a                	push   0xa
c001762f:	e8 8a 4f ff ff       	call   c000c5be <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017634:	83 c4 0c             	add    esp,0xc
c0017637:	6a 00                	push   0x0
c0017639:	68 da 71 01 c0       	push   0xc00171da
c001763e:	6a 0b                	push   0xb
c0017640:	e8 79 4f ff ff       	call   c000c5be <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017645:	83 c4 0c             	add    esp,0xc
c0017648:	6a 00                	push   0x0
c001764a:	68 ea 70 01 c0       	push   0xc00170ea
c001764f:	6a 0d                	push   0xd
c0017651:	e8 68 4f ff ff       	call   c000c5be <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017656:	83 c4 0c             	add    esp,0xc
c0017659:	6a 00                	push   0x0
c001765b:	68 51 71 01 c0       	push   0xc0017151
c0017660:	6a 0e                	push   0xe
c0017662:	e8 57 4f ff ff       	call   c000c5be <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017667:	83 c4 10             	add    esp,0x10
c001766a:	50                   	push   eax
c001766b:	6a 00                	push   0x0
c001766d:	68 da 71 01 c0       	push   0xc00171da
c0017672:	53                   	push   ebx
c0017673:	43                   	inc    ebx
c0017674:	e8 45 4f ff ff       	call   c000c5be <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017679:	83 c4 10             	add    esp,0x10
c001767c:	83 fb 1e             	cmp    ebx,0x1e
c001767f:	75 e9                	jne    c001766a <HalInitialise()+0x137>
c0017681:	50                   	push   eax
c0017682:	6a 00                	push   0x0
c0017684:	68 6b 1e 01 c0       	push   0xc0011e6b
c0017689:	6a 60                	push   0x60
c001768b:	e8 2e 4f ff ff       	call   c000c5be <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017690:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017695:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001769f:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00176a6:	e8 20 04 ff ff       	call   c0007acb <malloc>
c00176ab:	89 04 24             	mov    DWORD PTR [esp],eax
c00176ae:	89 c3                	mov    ebx,eax
c00176b0:	e8 37 09 00 00       	call   c0017fec <RTC::RTC()>
c00176b5:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c00176bf:	5a                   	pop    edx
c00176c0:	59                   	pop    ecx
c00176c1:	53                   	push   ebx
c00176c2:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00176c8:	e8 bb 49 ff ff       	call   c000c088 <Device::addChild(Device*)>
c00176cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00176cf:	6a 00                	push   0x0
c00176d1:	6a 00                	push   0x0
c00176d3:	6a 00                	push   0x0
c00176d5:	53                   	push   ebx
c00176d6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00176d9:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00176de:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00176e4:	83 c4 28             	add    esp,0x28
c00176e7:	5b                   	pop    ebx
c00176e8:	c3                   	ret    

c00176e9 <HalMakeBeep(int)>:
c00176e9:	53                   	push   ebx
c00176ea:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00176ee:	85 db                	test   ebx,ebx
c00176f0:	75 07                	jne    c00176f9 <HalMakeBeep(int)+0x10>
c00176f2:	e4 61                	in     al,0x61
c00176f4:	83 e0 fc             	and    eax,0xfffffffc
c00176f7:	eb 26                	jmp    c001771f <HalMakeBeep(int)+0x36>
c00176f9:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00176fe:	99                   	cdq    
c00176ff:	f7 fb                	idiv   ebx
c0017701:	89 c1                	mov    ecx,eax
c0017703:	b0 b6                	mov    al,0xb6
c0017705:	e6 43                	out    0x43,al
c0017707:	88 c8                	mov    al,cl
c0017709:	e6 42                	out    0x42,al
c001770b:	89 c8                	mov    eax,ecx
c001770d:	c1 e8 08             	shr    eax,0x8
c0017710:	e6 42                	out    0x42,al
c0017712:	e4 61                	in     al,0x61
c0017714:	89 c2                	mov    edx,eax
c0017716:	83 ca 03             	or     edx,0x3
c0017719:	38 d0                	cmp    al,dl
c001771b:	74 04                	je     c0017721 <HalMakeBeep(int)+0x38>
c001771d:	88 d0                	mov    al,dl
c001771f:	e6 61                	out    0x61,al
c0017721:	5b                   	pop    ebx
c0017722:	c3                   	ret    

c0017723 <HalGetRand()>:
c0017723:	31 c0                	xor    eax,eax
c0017725:	c3                   	ret    

c0017726 <HalEndOfInterrupt(int)>:
c0017726:	80 3d 00 92 02 c0 00 	cmp    BYTE PTR ds:0xc0029200,0x0
c001772d:	74 23                	je     c0017752 <HalEndOfInterrupt(int)+0x2c>
c001772f:	83 ec 14             	sub    esp,0x14
c0017732:	6a 1b                	push   0x1b
c0017734:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001773a:	e8 9b f9 fe ff       	call   c00070da <Computer::rdmsr(unsigned int)>
c001773f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017744:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001774e:	83 c4 1c             	add    esp,0x1c
c0017751:	c3                   	ret    
c0017752:	e9 41 02 00 00       	jmp    c0017998 <picEOI(int)>

c0017757 <HalRestart()>:
c0017757:	c3                   	ret    

c0017758 <HalShutdown()>:
c0017758:	c3                   	ret    

c0017759 <HalSleep()>:
c0017759:	c3                   	ret    
c001775a:	66 90                	xchg   ax,ax

c001775c <picIoWait()>:
c001775c:	eb 00                	jmp    c001775e <picIoWait()+0x2>
c001775e:	eb 00                	jmp    c0017760 <picIoWait()+0x4>
c0017760:	90                   	nop
c0017761:	c3                   	ret    
c0017762:	66 90                	xchg   ax,ax

c0017764 <picDisable()>:
c0017764:	83 ec 10             	sub    esp,0x10
c0017767:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001776e:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0017773:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017777:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001777c:	ee                   	out    dx,al
c001777d:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0017784:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0017789:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001778d:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0017792:	ee                   	out    dx,al
c0017793:	90                   	nop
c0017794:	83 c4 10             	add    esp,0x10
c0017797:	c3                   	ret    

c0017798 <picGetIRQReg(int)>:
c0017798:	83 ec 10             	sub    esp,0x10
c001779b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001779f:	0f b6 c0             	movzx  eax,al
c00177a2:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00177a9:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00177ad:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00177b1:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00177b6:	ee                   	out    dx,al
c00177b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00177bb:	0f b6 c0             	movzx  eax,al
c00177be:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00177c5:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00177c9:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00177cd:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00177d2:	ee                   	out    dx,al
c00177d3:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c00177da:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00177df:	89 c2                	mov    edx,eax
c00177e1:	ec                   	in     al,dx
c00177e2:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00177e6:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00177ea:	0f b6 c0             	movzx  eax,al
c00177ed:	c1 e0 08             	shl    eax,0x8
c00177f0:	89 c1                	mov    ecx,eax
c00177f2:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c00177f9:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00177fe:	89 c2                	mov    edx,eax
c0017800:	ec                   	in     al,dx
c0017801:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0017805:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017809:	0f b6 c0             	movzx  eax,al
c001780c:	09 c8                	or     eax,ecx
c001780e:	83 c4 10             	add    esp,0x10
c0017811:	c3                   	ret    
c0017812:	66 90                	xchg   ax,ax

c0017814 <picOpen()>:
c0017814:	83 ec 50             	sub    esp,0x50
c0017817:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001781e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0017823:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017827:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001782b:	ee                   	out    dx,al
c001782c:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0017833:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0017838:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001783c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017840:	ee                   	out    dx,al
c0017841:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0017849:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0017851:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0017858:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001785c:	89 c2                	mov    edx,eax
c001785e:	ec                   	in     al,dx
c001785f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0017863:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017867:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001786b:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0017872:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017876:	89 c2                	mov    edx,eax
c0017878:	ec                   	in     al,dx
c0017879:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001787d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017881:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0017885:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c001788c:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0017891:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017895:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017899:	ee                   	out    dx,al
c001789a:	e8 bd fe ff ff       	call   c001775c <picIoWait()>
c001789f:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c00178a6:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00178ab:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00178af:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00178b3:	ee                   	out    dx,al
c00178b4:	e8 a3 fe ff ff       	call   c001775c <picIoWait()>
c00178b9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00178bd:	0f b6 c0             	movzx  eax,al
c00178c0:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c00178c7:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c00178cb:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00178cf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00178d3:	ee                   	out    dx,al
c00178d4:	e8 83 fe ff ff       	call   c001775c <picIoWait()>
c00178d9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00178dd:	0f b6 c0             	movzx  eax,al
c00178e0:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c00178e7:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00178eb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c00178ef:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00178f3:	ee                   	out    dx,al
c00178f4:	e8 63 fe ff ff       	call   c001775c <picIoWait()>
c00178f9:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0017900:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0017905:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0017909:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001790d:	ee                   	out    dx,al
c001790e:	e8 49 fe ff ff       	call   c001775c <picIoWait()>
c0017913:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001791a:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001791f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0017923:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017927:	ee                   	out    dx,al
c0017928:	e8 2f fe ff ff       	call   c001775c <picIoWait()>
c001792d:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0017934:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0017939:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001793d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0017941:	ee                   	out    dx,al
c0017942:	e8 15 fe ff ff       	call   c001775c <picIoWait()>
c0017947:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001794e:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0017953:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0017957:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001795b:	ee                   	out    dx,al
c001795c:	e8 fb fd ff ff       	call   c001775c <picIoWait()>
c0017961:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0017966:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001796d:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0017971:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0017975:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017979:	ee                   	out    dx,al
c001797a:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001797f:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0017986:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001798a:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001798e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017992:	ee                   	out    dx,al
c0017993:	90                   	nop
c0017994:	83 c4 50             	add    esp,0x50
c0017997:	c3                   	ret    

c0017998 <picEOI(int)>:
c0017998:	83 ec 10             	sub    esp,0x10
c001799b:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00179a0:	75 1e                	jne    c00179c0 <picEOI(int)+0x28>
c00179a2:	6a 0b                	push   0xb
c00179a4:	e8 ef fd ff ff       	call   c0017798 <picGetIRQReg(int)>
c00179a9:	83 c4 04             	add    esp,0x4
c00179ac:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00179b1:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c00179b6:	25 80 00 00 00       	and    eax,0x80
c00179bb:	74 73                	je     c0017a30 <picEOI(int)+0x98>
c00179bd:	8d 76 00             	lea    esi,[esi+0x0]
c00179c0:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00179c5:	75 31                	jne    c00179f8 <picEOI(int)+0x60>
c00179c7:	6a 0b                	push   0xb
c00179c9:	e8 ca fd ff ff       	call   c0017798 <picGetIRQReg(int)>
c00179ce:	83 c4 04             	add    esp,0x4
c00179d1:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00179d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00179da:	98                   	cwde   
c00179db:	85 c0                	test   eax,eax
c00179dd:	78 19                	js     c00179f8 <picEOI(int)+0x60>
c00179df:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c00179e6:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c00179eb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00179ef:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00179f4:	ee                   	out    dx,al
c00179f5:	eb 3d                	jmp    c0017a34 <picEOI(int)+0x9c>
c00179f7:	90                   	nop
c00179f8:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00179fd:	7e 19                	jle    c0017a18 <picEOI(int)+0x80>
c00179ff:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017a06:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0017a0b:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0017a0f:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0017a14:	ee                   	out    dx,al
c0017a15:	8d 76 00             	lea    esi,[esi+0x0]
c0017a18:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0017a1f:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0017a24:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0017a28:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0017a2d:	ee                   	out    dx,al
c0017a2e:	eb 04                	jmp    c0017a34 <picEOI(int)+0x9c>
c0017a30:	90                   	nop
c0017a31:	8d 76 00             	lea    esi,[esi+0x0]
c0017a34:	83 c4 10             	add    esp,0x10
c0017a37:	c3                   	ret    

c0017a38 <RTC::open(int, int, void*)>:
c0017a38:	31 c0                	xor    eax,eax
c0017a3a:	c3                   	ret    
c0017a3b:	90                   	nop

c0017a3c <RTC::close(int, int, void*)>:
c0017a3c:	31 c0                	xor    eax,eax
c0017a3e:	c3                   	ret    
c0017a3f:	90                   	nop

c0017a40 <RTC::timeInSecondsUTC()>:
c0017a40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a44:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017a4a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017a50:	c3                   	ret    
c0017a51:	90                   	nop

c0017a52 <RTC::timeInDatetimeUTC()>:
c0017a52:	53                   	push   ebx
c0017a53:	83 ec 14             	sub    esp,0x14
c0017a56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a5a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017a5e:	8b 10                	mov    edx,DWORD PTR [eax]
c0017a60:	50                   	push   eax
c0017a61:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0017a64:	83 c4 0c             	add    esp,0xc
c0017a67:	52                   	push   edx
c0017a68:	50                   	push   eax
c0017a69:	53                   	push   ebx
c0017a6a:	e8 8d 43 ff ff       	call   c000bdfc <secondsToDatetime(unsigned long long)>
c0017a6f:	89 d8                	mov    eax,ebx
c0017a71:	83 c4 14             	add    esp,0x14
c0017a74:	5b                   	pop    ebx
c0017a75:	c2 04 00             	ret    0x4

c0017a78 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0017a78:	56                   	push   esi
c0017a79:	53                   	push   ebx
c0017a7a:	83 ec 14             	sub    esp,0x14
c0017a7d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017a81:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017a83:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0017a86:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017a8a:	52                   	push   edx
c0017a8b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a93:	50                   	push   eax
c0017a94:	e8 63 43 ff ff       	call   c000bdfc <secondsToDatetime(unsigned long long)>
c0017a99:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0017a9d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017aa1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017aa5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017aa9:	89 f0                	mov    eax,esi
c0017aab:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0017aaf:	83 c4 20             	add    esp,0x20
c0017ab2:	5b                   	pop    ebx
c0017ab3:	5e                   	pop    esi
c0017ab4:	ff e0                	jmp    eax

c0017ab6 <RTC::~RTC()>:
c0017ab6:	83 ec 0c             	sub    esp,0xc
c0017ab9:	ba 68 1f 02 c0       	mov    edx,0xc0021f68
c0017abe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ac2:	89 10                	mov    DWORD PTR [eax],edx
c0017ac4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ac8:	83 ec 0c             	sub    esp,0xc
c0017acb:	50                   	push   eax
c0017acc:	e8 b7 40 ff ff       	call   c000bb88 <Clock::~Clock()>
c0017ad1:	83 c4 10             	add    esp,0x10
c0017ad4:	90                   	nop
c0017ad5:	83 c4 0c             	add    esp,0xc
c0017ad8:	c3                   	ret    
c0017ad9:	90                   	nop

c0017ada <RTC::~RTC()>:
c0017ada:	83 ec 0c             	sub    esp,0xc
c0017add:	83 ec 0c             	sub    esp,0xc
c0017ae0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ae4:	e8 cd ff ff ff       	call   c0017ab6 <RTC::~RTC()>
c0017ae9:	83 c4 10             	add    esp,0x10
c0017aec:	83 ec 08             	sub    esp,0x8
c0017aef:	68 60 01 00 00       	push   0x160
c0017af4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017af8:	e8 03 2d ff ff       	call   c000a800 <operator delete(void*, unsigned long)>
c0017afd:	83 c4 10             	add    esp,0x10
c0017b00:	83 c4 0c             	add    esp,0xc
c0017b03:	c3                   	ret    

c0017b04 <RTC::get_update_in_progress_flag()>:
c0017b04:	83 ec 14             	sub    esp,0x14
c0017b07:	6a 0a                	push   0xa
c0017b09:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017b0f:	e8 7e f6 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017b14:	83 c4 1c             	add    esp,0x1c
c0017b17:	0f b6 c0             	movzx  eax,al
c0017b1a:	c1 e8 07             	shr    eax,0x7
c0017b1d:	c3                   	ret    

c0017b1e <RTC::completeRTCRefresh()>:
c0017b1e:	55                   	push   ebp
c0017b1f:	57                   	push   edi
c0017b20:	56                   	push   esi
c0017b21:	53                   	push   ebx
c0017b22:	83 ec 3c             	sub    esp,0x3c
c0017b25:	8b 1d 8c 84 02 c0    	mov    ebx,DWORD PTR ds:0xc002848c
c0017b2b:	83 ec 0c             	sub    esp,0xc
c0017b2e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0017b32:	e8 cd ff ff ff       	call   c0017b04 <RTC::get_update_in_progress_flag()>
c0017b37:	83 c4 10             	add    esp,0x10
c0017b3a:	84 c0                	test   al,al
c0017b3c:	74 0e                	je     c0017b4c <RTC::completeRTCRefresh()+0x2e>
c0017b3e:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0017b44:	3b 05 8c 84 02 c0    	cmp    eax,DWORD PTR ds:0xc002848c
c0017b4a:	73 df                	jae    c0017b2b <RTC::completeRTCRefresh()+0xd>
c0017b4c:	50                   	push   eax
c0017b4d:	50                   	push   eax
c0017b4e:	6a 00                	push   0x0
c0017b50:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017b56:	e8 37 f6 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017b5b:	89 c7                	mov    edi,eax
c0017b5d:	58                   	pop    eax
c0017b5e:	5a                   	pop    edx
c0017b5f:	6a 02                	push   0x2
c0017b61:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017b67:	e8 26 f6 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017b6c:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0017b70:	59                   	pop    ecx
c0017b71:	5b                   	pop    ebx
c0017b72:	6a 04                	push   0x4
c0017b74:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017b7a:	e8 13 f6 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017b7f:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0017b83:	5e                   	pop    esi
c0017b84:	5d                   	pop    ebp
c0017b85:	6a 07                	push   0x7
c0017b87:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017b8d:	e8 00 f6 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017b92:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0017b96:	58                   	pop    eax
c0017b97:	5a                   	pop    edx
c0017b98:	6a 08                	push   0x8
c0017b9a:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017ba0:	e8 ed f5 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017ba5:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0017ba9:	59                   	pop    ecx
c0017baa:	5b                   	pop    ebx
c0017bab:	6a 09                	push   0x9
c0017bad:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017bb3:	e8 da f5 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017bb8:	0f b6 c0             	movzx  eax,al
c0017bbb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017bbf:	83 c4 10             	add    esp,0x10
c0017bc2:	8b 1d 8c 84 02 c0    	mov    ebx,DWORD PTR ds:0xc002848c
c0017bc8:	83 ec 0c             	sub    esp,0xc
c0017bcb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0017bcf:	e8 30 ff ff ff       	call   c0017b04 <RTC::get_update_in_progress_flag()>
c0017bd4:	83 c4 10             	add    esp,0x10
c0017bd7:	84 c0                	test   al,al
c0017bd9:	74 0e                	je     c0017be9 <RTC::completeRTCRefresh()+0xcb>
c0017bdb:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0017be1:	3b 05 8c 84 02 c0    	cmp    eax,DWORD PTR ds:0xc002848c
c0017be7:	73 df                	jae    c0017bc8 <RTC::completeRTCRefresh()+0xaa>
c0017be9:	51                   	push   ecx
c0017bea:	51                   	push   ecx
c0017beb:	6a 00                	push   0x0
c0017bed:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017bf3:	e8 9a f5 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017bf8:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0017bfc:	5b                   	pop    ebx
c0017bfd:	5e                   	pop    esi
c0017bfe:	6a 02                	push   0x2
c0017c00:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017c06:	e8 87 f5 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017c0b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0017c0f:	5d                   	pop    ebp
c0017c10:	58                   	pop    eax
c0017c11:	6a 04                	push   0x4
c0017c13:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017c19:	e8 74 f5 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017c1e:	88 c3                	mov    bl,al
c0017c20:	58                   	pop    eax
c0017c21:	5a                   	pop    edx
c0017c22:	6a 07                	push   0x7
c0017c24:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017c2a:	e8 63 f5 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017c2f:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017c33:	59                   	pop    ecx
c0017c34:	5e                   	pop    esi
c0017c35:	6a 08                	push   0x8
c0017c37:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017c3d:	e8 50 f5 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017c42:	5d                   	pop    ebp
c0017c43:	89 c6                	mov    esi,eax
c0017c45:	58                   	pop    eax
c0017c46:	6a 09                	push   0x9
c0017c48:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017c4e:	e8 3f f5 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017c53:	89 f9                	mov    ecx,edi
c0017c55:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0017c59:	83 c4 10             	add    esp,0x10
c0017c5c:	0f b6 e8             	movzx  ebp,al
c0017c5f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017c64:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0017c68:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017c6c:	74 27                	je     c0017c95 <RTC::completeRTCRefresh()+0x177>
c0017c6e:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0017c72:	89 f0                	mov    eax,esi
c0017c74:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0017c78:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017c7c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0017c80:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0017c84:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017c88:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017c8c:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0017c90:	e9 2d ff ff ff       	jmp    c0017bc2 <RTC::completeRTCRefresh()+0xa4>
c0017c95:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017c9a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017c9e:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017ca2:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c0017ca6:	75 c6                	jne    c0017c6e <RTC::completeRTCRefresh()+0x150>
c0017ca8:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0017cad:	89 f1                	mov    ecx,esi
c0017caf:	0f b6 fb             	movzx  edi,bl
c0017cb2:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0017cb6:	0f b6 c9             	movzx  ecx,cl
c0017cb9:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0017cbd:	89 f1                	mov    ecx,esi
c0017cbf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017cc3:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0017cc7:	0f 94 c2             	sete   dl
c0017cca:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c0017cce:	0f 94 c0             	sete   al
c0017cd1:	21 d0                	and    eax,edx
c0017cd3:	31 d2                	xor    edx,edx
c0017cd5:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0017cd9:	0f 94 c2             	sete   dl
c0017cdc:	85 c2                	test   edx,eax
c0017cde:	74 8e                	je     c0017c6e <RTC::completeRTCRefresh()+0x150>
c0017ce0:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0017ce4:	75 88                	jne    c0017c6e <RTC::completeRTCRefresh()+0x150>
c0017ce6:	52                   	push   edx
c0017ce7:	52                   	push   edx
c0017ce8:	6a 0b                	push   0xb
c0017cea:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017cf0:	e8 9d f4 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017cf5:	83 c4 10             	add    esp,0x10
c0017cf8:	a8 04                	test   al,0x4
c0017cfa:	75 7a                	jne    c0017d76 <RTC::completeRTCRefresh()+0x258>
c0017cfc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d00:	c1 ef 04             	shr    edi,0x4
c0017d03:	83 e6 0f             	and    esi,0xf
c0017d06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017d0a:	c1 ed 04             	shr    ebp,0x4
c0017d0d:	6b ed 0a             	imul   ebp,ebp,0xa
c0017d10:	c1 ea 04             	shr    edx,0x4
c0017d13:	6b d2 0a             	imul   edx,edx,0xa
c0017d16:	83 e1 0f             	and    ecx,0xf
c0017d19:	01 d1                	add    ecx,edx
c0017d1b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017d1f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0017d23:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017d27:	c1 ea 04             	shr    edx,0x4
c0017d2a:	6b d2 0a             	imul   edx,edx,0xa
c0017d2d:	83 e1 0f             	and    ecx,0xf
c0017d30:	01 d1                	add    ecx,edx
c0017d32:	89 fa                	mov    edx,edi
c0017d34:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017d38:	83 e2 07             	and    edx,0x7
c0017d3b:	89 d9                	mov    ecx,ebx
c0017d3d:	6b d2 0a             	imul   edx,edx,0xa
c0017d40:	83 e1 0f             	and    ecx,0xf
c0017d43:	83 e3 80             	and    ebx,0xffffff80
c0017d46:	01 d1                	add    ecx,edx
c0017d48:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017d4c:	09 cb                	or     ebx,ecx
c0017d4e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017d52:	c1 ea 04             	shr    edx,0x4
c0017d55:	6b d2 0a             	imul   edx,edx,0xa
c0017d58:	83 e1 0f             	and    ecx,0xf
c0017d5b:	01 d1                	add    ecx,edx
c0017d5d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017d61:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0017d65:	c1 ea 04             	shr    edx,0x4
c0017d68:	6b d2 0a             	imul   edx,edx,0xa
c0017d6b:	01 d6                	add    esi,edx
c0017d6d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017d71:	83 e2 0f             	and    edx,0xf
c0017d74:	01 d5                	add    ebp,edx
c0017d76:	a8 02                	test   al,0x2
c0017d78:	75 15                	jne    c0017d8f <RTC::completeRTCRefresh()+0x271>
c0017d7a:	f6 c3 80             	test   bl,0x80
c0017d7d:	74 10                	je     c0017d8f <RTC::completeRTCRefresh()+0x271>
c0017d7f:	83 e3 7f             	and    ebx,0x7f
c0017d82:	b9 18 00 00 00       	mov    ecx,0x18
c0017d87:	8d 43 0c             	lea    eax,[ebx+0xc]
c0017d8a:	99                   	cdq    
c0017d8b:	f7 f9                	idiv   ecx
c0017d8d:	88 d3                	mov    bl,dl
c0017d8f:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0017d95:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0017d9b:	77 06                	ja     c0017da3 <RTC::completeRTCRefresh()+0x285>
c0017d9d:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0017da3:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017da8:	31 c9                	xor    ecx,ecx
c0017daa:	31 d2                	xor    edx,edx
c0017dac:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0017db0:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0017db4:	89 cd                	mov    ebp,ecx
c0017db6:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c0017dba:	c1 e7 10             	shl    edi,0x10
c0017dbd:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0017dc3:	c1 e0 10             	shl    eax,0x10
c0017dc6:	09 c5                	or     ebp,eax
c0017dc8:	89 e9                	mov    ecx,ebp
c0017dca:	0f b7 c2             	movzx  eax,dx
c0017dcd:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0017dd1:	09 f8                	or     eax,edi
c0017dd3:	89 c2                	mov    edx,eax
c0017dd5:	50                   	push   eax
c0017dd6:	50                   	push   eax
c0017dd7:	88 d9                	mov    cl,bl
c0017dd9:	51                   	push   ecx
c0017dda:	52                   	push   edx
c0017ddb:	e8 97 3e ff ff       	call   c000bc77 <datetimeToSeconds(datetime_t)>
c0017de0:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0017de4:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0017dea:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0017df0:	83 c4 4c             	add    esp,0x4c
c0017df3:	5b                   	pop    ebx
c0017df4:	5e                   	pop    esi
c0017df5:	5f                   	pop    edi
c0017df6:	5d                   	pop    ebp
c0017df7:	c3                   	ret    

c0017df8 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0017df8:	55                   	push   ebp
c0017df9:	57                   	push   edi
c0017dfa:	56                   	push   esi
c0017dfb:	53                   	push   ebx
c0017dfc:	83 ec 30             	sub    esp,0x30
c0017dff:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017e03:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0017e07:	6a 00                	push   0x0
c0017e09:	6a 00                	push   0x0
c0017e0b:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017e11:	e8 94 f4 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017e16:	83 c4 0c             	add    esp,0xc
c0017e19:	6a 00                	push   0x0
c0017e1b:	6a 02                	push   0x2
c0017e1d:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017e23:	e8 82 f4 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017e28:	89 f8                	mov    eax,edi
c0017e2a:	89 f9                	mov    ecx,edi
c0017e2c:	0f b6 c4             	movzx  eax,ah
c0017e2f:	31 d2                	xor    edx,edx
c0017e31:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017e35:	c1 e9 10             	shr    ecx,0x10
c0017e38:	89 f0                	mov    eax,esi
c0017e3a:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017e3e:	89 f0                	mov    eax,esi
c0017e40:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0017e44:	0f b6 c4             	movzx  eax,ah
c0017e47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017e4b:	89 f0                	mov    eax,esi
c0017e4d:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0017e51:	c1 e8 10             	shr    eax,0x10
c0017e54:	b9 64 00 00 00       	mov    ecx,0x64
c0017e59:	f7 f1                	div    ecx
c0017e5b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0017e5f:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0017e63:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0017e67:	59                   	pop    ecx
c0017e68:	5b                   	pop    ebx
c0017e69:	89 fb                	mov    ebx,edi
c0017e6b:	6a 0b                	push   0xb
c0017e6d:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017e73:	e8 1a f3 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017e78:	83 c4 10             	add    esp,0x10
c0017e7b:	a8 04                	test   al,0x4
c0017e7d:	89 c5                	mov    ebp,eax
c0017e7f:	75 6e                	jne    c0017eef <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0017e81:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017e85:	31 d2                	xor    edx,edx
c0017e87:	0f b6 c1             	movzx  eax,cl
c0017e8a:	b9 0a 00 00 00       	mov    ecx,0xa
c0017e8f:	f7 f1                	div    ecx
c0017e91:	c1 e0 04             	shl    eax,0x4
c0017e94:	09 d0                	or     eax,edx
c0017e96:	31 d2                	xor    edx,edx
c0017e98:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017e9c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0017ea1:	f7 f1                	div    ecx
c0017ea3:	c1 e0 04             	shl    eax,0x4
c0017ea6:	09 d0                	or     eax,edx
c0017ea8:	31 d2                	xor    edx,edx
c0017eaa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017eae:	0f b6 c3             	movzx  eax,bl
c0017eb1:	f7 f1                	div    ecx
c0017eb3:	c1 e0 04             	shl    eax,0x4
c0017eb6:	09 d0                	or     eax,edx
c0017eb8:	31 d2                	xor    edx,edx
c0017eba:	89 c3                	mov    ebx,eax
c0017ebc:	89 f0                	mov    eax,esi
c0017ebe:	0f b6 c0             	movzx  eax,al
c0017ec1:	f7 f1                	div    ecx
c0017ec3:	c1 e0 04             	shl    eax,0x4
c0017ec6:	09 d0                	or     eax,edx
c0017ec8:	31 d2                	xor    edx,edx
c0017eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017ece:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017ed3:	f7 f1                	div    ecx
c0017ed5:	c1 e0 04             	shl    eax,0x4
c0017ed8:	09 d0                	or     eax,edx
c0017eda:	31 d2                	xor    edx,edx
c0017edc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017ee0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017ee4:	f7 f1                	div    ecx
c0017ee6:	c1 e0 04             	shl    eax,0x4
c0017ee9:	09 d0                	or     eax,edx
c0017eeb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017eef:	83 e5 02             	and    ebp,0x2
c0017ef2:	75 1e                	jne    c0017f12 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017ef4:	0f b6 c3             	movzx  eax,bl
c0017ef7:	83 f8 0b             	cmp    eax,0xb
c0017efa:	76 10                	jbe    c0017f0c <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0017efc:	8d 53 f4             	lea    edx,[ebx-0xc]
c0017eff:	84 d2                	test   dl,dl
c0017f01:	88 d3                	mov    bl,dl
c0017f03:	75 02                	jne    c0017f07 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0017f05:	b3 0c                	mov    bl,0xc
c0017f07:	83 cb 80             	or     ebx,0xffffff80
c0017f0a:	eb 06                	jmp    c0017f12 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017f0c:	85 c0                	test   eax,eax
c0017f0e:	75 02                	jne    c0017f12 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017f10:	b3 0c                	mov    bl,0xc
c0017f12:	50                   	push   eax
c0017f13:	0f b6 db             	movzx  ebx,bl
c0017f16:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0017f1b:	52                   	push   edx
c0017f1c:	6a 00                	push   0x0
c0017f1e:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017f24:	e8 81 f3 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017f29:	83 c4 0c             	add    esp,0xc
c0017f2c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017f31:	50                   	push   eax
c0017f32:	6a 02                	push   0x2
c0017f34:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017f3a:	e8 6b f3 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017f3f:	83 c4 0c             	add    esp,0xc
c0017f42:	53                   	push   ebx
c0017f43:	6a 04                	push   0x4
c0017f45:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017f4b:	e8 5a f3 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017f50:	83 c4 0c             	add    esp,0xc
c0017f53:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0017f58:	52                   	push   edx
c0017f59:	6a 07                	push   0x7
c0017f5b:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017f61:	e8 44 f3 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017f66:	83 c4 0c             	add    esp,0xc
c0017f69:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017f6e:	50                   	push   eax
c0017f6f:	6a 08                	push   0x8
c0017f71:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017f77:	e8 2e f3 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017f7c:	83 c4 0c             	add    esp,0xc
c0017f7f:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0017f84:	55                   	push   ebp
c0017f85:	6a 09                	push   0x9
c0017f87:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017f8d:	e8 18 f3 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017f92:	5a                   	pop    edx
c0017f93:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017f97:	e8 82 fb ff ff       	call   c0017b1e <RTC::completeRTCRefresh()>
c0017f9c:	83 c4 3c             	add    esp,0x3c
c0017f9f:	b0 01                	mov    al,0x1
c0017fa1:	5b                   	pop    ebx
c0017fa2:	5e                   	pop    esi
c0017fa3:	5f                   	pop    edi
c0017fa4:	5d                   	pop    ebp
c0017fa5:	c3                   	ret    

c0017fa6 <rtcIRQHandler(regs*, void*)>:
c0017fa6:	53                   	push   ebx
c0017fa7:	83 ec 10             	sub    esp,0x10
c0017faa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017fae:	6a 0c                	push   0xc
c0017fb0:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017fb6:	e8 d7 f1 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017fbb:	83 c4 10             	add    esp,0x10
c0017fbe:	a8 80                	test   al,0x80
c0017fc0:	74 24                	je     c0017fe6 <rtcIRQHandler(regs*, void*)+0x40>
c0017fc2:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0017fc9:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0017fd0:	66 ff 05 18 92 02 c0 	inc    WORD PTR ds:0xc0029218
c0017fd7:	75 0d                	jne    c0017fe6 <rtcIRQHandler(regs*, void*)+0x40>
c0017fd9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017fdd:	83 c4 08             	add    esp,0x8
c0017fe0:	5b                   	pop    ebx
c0017fe1:	e9 38 fb ff ff       	jmp    c0017b1e <RTC::completeRTCRefresh()>
c0017fe6:	83 c4 08             	add    esp,0x8
c0017fe9:	5b                   	pop    ebx
c0017fea:	c3                   	ret    
c0017feb:	90                   	nop

c0017fec <RTC::RTC()>:
c0017fec:	83 ec 1c             	sub    esp,0x1c
c0017fef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ff3:	83 ec 08             	sub    esp,0x8
c0017ff6:	68 4b 1f 02 c0       	push   0xc0021f4b
c0017ffb:	50                   	push   eax
c0017ffc:	e8 51 3b ff ff       	call   c000bb52 <Clock::Clock(char const*)>
c0018001:	83 c4 10             	add    esp,0x10
c0018004:	ba 68 1f 02 c0       	mov    edx,0xc0021f68
c0018009:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001800d:	89 10                	mov    DWORD PTR [eax],edx
c001800f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018013:	83 ec 0c             	sub    esp,0xc
c0018016:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001801a:	6a 01                	push   0x1
c001801c:	68 a6 7f 01 c0       	push   0xc0017fa6
c0018021:	6a 08                	push   0x8
c0018023:	50                   	push   eax
c0018024:	e8 0b 40 ff ff       	call   c000c034 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018029:	83 c4 20             	add    esp,0x20
c001802c:	89 c2                	mov    edx,eax
c001802e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018032:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0018038:	fa                   	cli    
c0018039:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c001803e:	83 c0 01             	add    eax,0x1
c0018041:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0018046:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001804b:	83 ec 08             	sub    esp,0x8
c001804e:	6a 0b                	push   0xb
c0018050:	50                   	push   eax
c0018051:	e8 3c f1 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0018056:	83 c4 10             	add    esp,0x10
c0018059:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001805d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0018062:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018066:	83 ca 10             	or     edx,0x10
c0018069:	0f b6 d2             	movzx  edx,dl
c001806c:	83 ec 04             	sub    esp,0x4
c001806f:	52                   	push   edx
c0018070:	6a 0b                	push   0xb
c0018072:	50                   	push   eax
c0018073:	e8 32 f2 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0018078:	83 c4 10             	add    esp,0x10
c001807b:	83 ec 0c             	sub    esp,0xc
c001807e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018082:	e8 97 fa ff ff       	call   c0017b1e <RTC::completeRTCRefresh()>
c0018087:	83 c4 10             	add    esp,0x10
c001808a:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c001808f:	83 e8 01             	sub    eax,0x1
c0018092:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0018097:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c001809c:	85 c0                	test   eax,eax
c001809e:	75 01                	jne    c00180a1 <RTC::RTC()+0xb5>
c00180a0:	fb                   	sti    
c00180a1:	90                   	nop
c00180a2:	83 c4 1c             	add    esp,0x1c
c00180a5:	c3                   	ret    
c00180a6:	66 90                	xchg   ax,ax

c00180a8 <HalConsoleScroll(int, int)>:
c00180a8:	83 ec 10             	sub    esp,0x10
c00180ab:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c00180b3:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00180bb:	90                   	nop
c00180bc:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00180c1:	0f 8f e1 00 00 00    	jg     c00181a8 <HalConsoleScroll(int, int)+0x100>
c00180c7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00180cf:	90                   	nop
c00180d0:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c00180d8:	0f 8f be 00 00 00    	jg     c001819c <HalConsoleScroll(int, int)+0xf4>
c00180de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00180e2:	89 d0                	mov    eax,edx
c00180e4:	c1 e0 02             	shl    eax,0x2
c00180e7:	01 d0                	add    eax,edx
c00180e9:	c1 e0 05             	shl    eax,0x5
c00180ec:	89 c2                	mov    edx,eax
c00180ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00180f2:	01 d0                	add    eax,edx
c00180f4:	89 c2                	mov    edx,eax
c00180f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00180fa:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00180fd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018101:	89 d0                	mov    eax,edx
c0018103:	c1 e0 02             	shl    eax,0x2
c0018106:	01 d0                	add    eax,edx
c0018108:	c1 e0 05             	shl    eax,0x5
c001810b:	89 c2                	mov    edx,eax
c001810d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018111:	01 d0                	add    eax,edx
c0018113:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0018119:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001811d:	01 d0                	add    eax,edx
c001811f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0018121:	88 10                	mov    BYTE PTR [eax],dl
c0018123:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018128:	75 66                	jne    c0018190 <HalConsoleScroll(int, int)+0xe8>
c001812a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001812e:	83 e0 01             	and    eax,0x1
c0018131:	74 39                	je     c001816c <HalConsoleScroll(int, int)+0xc4>
c0018133:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018137:	83 e0 0f             	and    eax,0xf
c001813a:	88 c2                	mov    dl,al
c001813c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018140:	c1 e0 04             	shl    eax,0x4
c0018143:	09 d0                	or     eax,edx
c0018145:	88 c1                	mov    cl,al
c0018147:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001814b:	89 d0                	mov    eax,edx
c001814d:	c1 e0 02             	shl    eax,0x2
c0018150:	01 d0                	add    eax,edx
c0018152:	c1 e0 05             	shl    eax,0x5
c0018155:	89 c2                	mov    edx,eax
c0018157:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001815b:	01 d0                	add    eax,edx
c001815d:	89 c2                	mov    edx,eax
c001815f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018163:	01 d0                	add    eax,edx
c0018165:	88 ca                	mov    dl,cl
c0018167:	88 10                	mov    BYTE PTR [eax],dl
c0018169:	eb 25                	jmp    c0018190 <HalConsoleScroll(int, int)+0xe8>
c001816b:	90                   	nop
c001816c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018170:	89 d0                	mov    eax,edx
c0018172:	c1 e0 02             	shl    eax,0x2
c0018175:	01 d0                	add    eax,edx
c0018177:	c1 e0 05             	shl    eax,0x5
c001817a:	89 c2                	mov    edx,eax
c001817c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018180:	01 d0                	add    eax,edx
c0018182:	89 c2                	mov    edx,eax
c0018184:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018188:	01 d0                	add    eax,edx
c001818a:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001818d:	8d 76 00             	lea    esi,[esi+0x0]
c0018190:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018195:	e9 36 ff ff ff       	jmp    c00180d0 <HalConsoleScroll(int, int)+0x28>
c001819a:	66 90                	xchg   ax,ax
c001819c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00181a1:	e9 16 ff ff ff       	jmp    c00180bc <HalConsoleScroll(int, int)+0x14>
c00181a6:	66 90                	xchg   ax,ax
c00181a8:	90                   	nop
c00181a9:	83 c4 10             	add    esp,0x10
c00181ac:	c3                   	ret    
c00181ad:	8d 76 00             	lea    esi,[esi+0x0]

c00181b0 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c00181b0:	83 ec 14             	sub    esp,0x14
c00181b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00181b7:	88 04 24             	mov    BYTE PTR [esp],al
c00181ba:	8a 04 24             	mov    al,BYTE PTR [esp]
c00181bd:	0f b6 c0             	movzx  eax,al
c00181c0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00181c4:	89 d1                	mov    ecx,edx
c00181c6:	83 e1 0f             	and    ecx,0xf
c00181c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00181cd:	c1 e2 04             	shl    edx,0x4
c00181d0:	0f b6 d2             	movzx  edx,dl
c00181d3:	09 ca                	or     edx,ecx
c00181d5:	c1 e2 08             	shl    edx,0x8
c00181d8:	09 d0                	or     eax,edx
c00181da:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00181df:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c00181e7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181eb:	89 d0                	mov    eax,edx
c00181ed:	c1 e0 02             	shl    eax,0x2
c00181f0:	01 d0                	add    eax,edx
c00181f2:	c1 e0 04             	shl    eax,0x4
c00181f5:	89 c2                	mov    edx,eax
c00181f7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00181fb:	01 d0                	add    eax,edx
c00181fd:	d1 e0                	shl    eax,1
c00181ff:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018203:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018207:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c001820c:	66 89 10             	mov    WORD PTR [eax],dx
c001820f:	90                   	nop
c0018210:	83 c4 14             	add    esp,0x14
c0018213:	c3                   	ret    

c0018214 <HalConsoleCursorUpdate(int, int)>:
c0018214:	83 ec 20             	sub    esp,0x20
c0018217:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001821b:	89 c2                	mov    edx,eax
c001821d:	c1 e2 02             	shl    edx,0x2
c0018220:	01 d0                	add    eax,edx
c0018222:	c1 e0 04             	shl    eax,0x4
c0018225:	89 c2                	mov    edx,eax
c0018227:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001822b:	01 d0                	add    eax,edx
c001822d:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0018232:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018239:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001823e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018242:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018246:	ee                   	out    dx,al
c0018247:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001824c:	0f b6 c0             	movzx  eax,al
c001824f:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018256:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001825a:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001825e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018262:	ee                   	out    dx,al
c0018263:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001826a:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001826f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018273:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018277:	ee                   	out    dx,al
c0018278:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c001827d:	c1 e8 08             	shr    eax,0x8
c0018280:	0f b6 c0             	movzx  eax,al
c0018283:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001828a:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001828e:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018292:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018296:	ee                   	out    dx,al
c0018297:	90                   	nop
c0018298:	83 c4 20             	add    esp,0x20
c001829b:	c3                   	ret    

c001829c <FAT::getName()>:
c001829c:	b8 9c 1f 02 c0       	mov    eax,0xc0021f9c
c00182a1:	c3                   	ret    
c00182a2:	66 90                	xchg   ax,ax

c00182a4 <FAT::tell(void*, unsigned long long*)>:
c00182a4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00182a9:	75 09                	jne    c00182b4 <FAT::tell(void*, unsigned long long*)+0x10>
c00182ab:	b8 04 00 00 00       	mov    eax,0x4
c00182b0:	c3                   	ret    
c00182b1:	8d 76 00             	lea    esi,[esi+0x0]
c00182b4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00182b9:	75 09                	jne    c00182c4 <FAT::tell(void*, unsigned long long*)+0x20>
c00182bb:	b8 04 00 00 00       	mov    eax,0x4
c00182c0:	c3                   	ret    
c00182c1:	8d 76 00             	lea    esi,[esi+0x0]
c00182c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00182c8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00182cb:	ba 00 00 00 00       	mov    edx,0x0
c00182d0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00182d4:	89 01                	mov    DWORD PTR [ecx],eax
c00182d6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00182d9:	b8 00 00 00 00       	mov    eax,0x0
c00182de:	c3                   	ret    
c00182df:	90                   	nop

c00182e0 <FAT::stat(void*, unsigned long long*)>:
c00182e0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00182e5:	75 09                	jne    c00182f0 <FAT::stat(void*, unsigned long long*)+0x10>
c00182e7:	b8 04 00 00 00       	mov    eax,0x4
c00182ec:	c3                   	ret    
c00182ed:	8d 76 00             	lea    esi,[esi+0x0]
c00182f0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00182f5:	75 09                	jne    c0018300 <FAT::stat(void*, unsigned long long*)+0x20>
c00182f7:	b8 04 00 00 00       	mov    eax,0x4
c00182fc:	c3                   	ret    
c00182fd:	8d 76 00             	lea    esi,[esi+0x0]
c0018300:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018304:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018307:	ba 00 00 00 00       	mov    edx,0x0
c001830c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018310:	89 01                	mov    DWORD PTR [ecx],eax
c0018312:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018315:	b8 00 00 00 00       	mov    eax,0x0
c001831a:	c3                   	ret    
c001831b:	90                   	nop

c001831c <FAT::~FAT()>:
c001831c:	83 ec 0c             	sub    esp,0xc
c001831f:	ba e8 1f 02 c0       	mov    edx,0xc0021fe8
c0018324:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018328:	89 10                	mov    DWORD PTR [eax],edx
c001832a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001832e:	83 ec 0c             	sub    esp,0xc
c0018331:	50                   	push   eax
c0018332:	e8 e1 2b ff ff       	call   c000af18 <Filesystem::~Filesystem()>
c0018337:	83 c4 10             	add    esp,0x10
c001833a:	90                   	nop
c001833b:	83 c4 0c             	add    esp,0xc
c001833e:	c3                   	ret    
c001833f:	90                   	nop

c0018340 <FAT::~FAT()>:
c0018340:	83 ec 0c             	sub    esp,0xc
c0018343:	83 ec 0c             	sub    esp,0xc
c0018346:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001834a:	e8 cd ff ff ff       	call   c001831c <FAT::~FAT()>
c001834f:	83 c4 10             	add    esp,0x10
c0018352:	83 ec 08             	sub    esp,0x8
c0018355:	6a 08                	push   0x8
c0018357:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001835b:	e8 a0 24 ff ff       	call   c000a800 <operator delete(void*, unsigned long)>
c0018360:	83 c4 10             	add    esp,0x10
c0018363:	83 c4 0c             	add    esp,0xc
c0018366:	c3                   	ret    
c0018367:	90                   	nop

c0018368 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018368:	83 ec 1c             	sub    esp,0x1c
c001836b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018372:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018377:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001837b:	8b 04 85 40 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6dc0]
c0018382:	83 f8 ff             	cmp    eax,0xffffffff
c0018385:	75 35                	jne    c00183bc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0018387:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001838b:	88 c2                	mov    dl,al
c001838d:	a1 20 92 02 c0       	mov    eax,ds:0xc0029220
c0018392:	01 d0                	add    eax,edx
c0018394:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018398:	8b 15 20 92 02 c0    	mov    edx,DWORD PTR ds:0xc0029220
c001839e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00183a2:	89 14 85 40 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6dc0],edx
c00183a9:	a1 20 92 02 c0       	mov    eax,ds:0xc0029220
c00183ae:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00183b2:	89 14 85 c0 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6d40],edx
c00183b9:	eb 19                	jmp    c00183d4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c00183bb:	90                   	nop
c00183bc:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00183c0:	88 c2                	mov    dl,al
c00183c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00183c6:	8b 04 85 40 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6dc0]
c00183cd:	01 d0                	add    eax,edx
c00183cf:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00183d3:	90                   	nop
c00183d4:	83 ec 04             	sub    esp,0x4
c00183d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00183db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00183df:	8d 44 24 15          	lea    eax,[esp+0x15]
c00183e3:	50                   	push   eax
c00183e4:	e8 0a cc fe ff       	call   c0004ff3 <f_getlabel>
c00183e9:	83 c4 10             	add    esp,0x10
c00183ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00183f0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00183f5:	75 09                	jne    c0018400 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c00183f7:	b8 00 00 00 00       	mov    eax,0x0
c00183fc:	eb 0a                	jmp    c0018408 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c00183fe:	66 90                	xchg   ax,ax
c0018400:	b8 01 00 00 00       	mov    eax,0x1
c0018405:	8d 76 00             	lea    esi,[esi+0x0]
c0018408:	83 c4 1c             	add    esp,0x1c
c001840b:	c3                   	ret    

c001840c <FAT::setlabel(LogicalDisk*, int, char*)>:
c001840c:	53                   	push   ebx
c001840d:	83 ec 58             	sub    esp,0x58
c0018410:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018418:	8d 54 24 10          	lea    edx,[esp+0x10]
c001841c:	b9 00 00 00 00       	mov    ecx,0x0
c0018421:	b8 3c 00 00 00       	mov    eax,0x3c
c0018426:	83 e0 f8             	and    eax,0xfffffff8
c0018429:	89 c3                	mov    ebx,eax
c001842b:	b8 00 00 00 00       	mov    eax,0x0
c0018430:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c0018434:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c0018438:	83 c0 08             	add    eax,0x8
c001843b:	39 d8                	cmp    eax,ebx
c001843d:	72 f1                	jb     c0018430 <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c001843f:	01 c2                	add    edx,eax
c0018441:	89 0a                	mov    DWORD PTR [edx],ecx
c0018443:	83 c2 04             	add    edx,0x4
c0018446:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001844a:	8b 04 85 40 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6dc0]
c0018451:	83 f8 ff             	cmp    eax,0xffffffff
c0018454:	75 36                	jne    c001848c <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c0018456:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001845a:	88 c2                	mov    dl,al
c001845c:	a1 20 92 02 c0       	mov    eax,ds:0xc0029220
c0018461:	01 d0                	add    eax,edx
c0018463:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018467:	8b 15 20 92 02 c0    	mov    edx,DWORD PTR ds:0xc0029220
c001846d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018471:	89 14 85 40 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6dc0],edx
c0018478:	a1 20 92 02 c0       	mov    eax,ds:0xc0029220
c001847d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018481:	89 14 85 c0 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6d40],edx
c0018488:	eb 1a                	jmp    c00184a4 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c001848a:	66 90                	xchg   ax,ax
c001848c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018490:	88 c2                	mov    dl,al
c0018492:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018496:	8b 04 85 40 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6dc0]
c001849d:	01 d0                	add    eax,edx
c001849f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00184a3:	90                   	nop
c00184a4:	83 ec 08             	sub    esp,0x8
c00184a7:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00184ab:	8d 44 24 18          	lea    eax,[esp+0x18]
c00184af:	50                   	push   eax
c00184b0:	e8 bb 83 fe ff       	call   c0000870 <strcat>
c00184b5:	83 c4 10             	add    esp,0x10
c00184b8:	83 ec 0c             	sub    esp,0xc
c00184bb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00184bf:	50                   	push   eax
c00184c0:	e8 82 cc fe ff       	call   c0005147 <f_setlabel>
c00184c5:	83 c4 10             	add    esp,0x10
c00184c8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00184cc:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00184d1:	75 09                	jne    c00184dc <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c00184d3:	b8 00 00 00 00       	mov    eax,0x0
c00184d8:	eb 0a                	jmp    c00184e4 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c00184da:	66 90                	xchg   ax,ax
c00184dc:	b8 01 00 00 00       	mov    eax,0x1
c00184e1:	8d 76 00             	lea    esi,[esi+0x0]
c00184e4:	83 c4 58             	add    esp,0x58
c00184e7:	5b                   	pop    ebx
c00184e8:	c3                   	ret    
c00184e9:	90                   	nop
c00184ea:	66 90                	xchg   ax,ax

c00184ec <FAT::format(LogicalDisk*, int, char const*, int)>:
c00184ec:	83 ec 2c             	sub    esp,0x2c
c00184ef:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00184f7:	83 ec 08             	sub    esp,0x8
c00184fa:	68 c0 1f 02 c0       	push   0xc0021fc0
c00184ff:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018503:	e8 78 82 fe ff       	call   c0000780 <strcmp>
c0018508:	83 c4 10             	add    esp,0x10
c001850b:	85 c0                	test   eax,eax
c001850d:	0f 94 c0             	sete   al
c0018510:	0f b6 c0             	movzx  eax,al
c0018513:	85 c0                	test   eax,eax
c0018515:	74 0d                	je     c0018524 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0018517:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001851f:	e9 c0 00 00 00       	jmp    c00185e4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018524:	83 ec 08             	sub    esp,0x8
c0018527:	68 b2 1f 02 c0       	push   0xc0021fb2
c001852c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018530:	e8 4b 82 fe ff       	call   c0000780 <strcmp>
c0018535:	83 c4 10             	add    esp,0x10
c0018538:	85 c0                	test   eax,eax
c001853a:	0f 94 c0             	sete   al
c001853d:	0f b6 c0             	movzx  eax,al
c0018540:	85 c0                	test   eax,eax
c0018542:	74 10                	je     c0018554 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0018544:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001854c:	e9 93 00 00 00       	jmp    c00185e4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018551:	8d 76 00             	lea    esi,[esi+0x0]
c0018554:	83 ec 08             	sub    esp,0x8
c0018557:	68 b8 1f 02 c0       	push   0xc0021fb8
c001855c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018560:	e8 1b 82 fe ff       	call   c0000780 <strcmp>
c0018565:	83 c4 10             	add    esp,0x10
c0018568:	85 c0                	test   eax,eax
c001856a:	0f 94 c0             	sete   al
c001856d:	0f b6 c0             	movzx  eax,al
c0018570:	85 c0                	test   eax,eax
c0018572:	74 0c                	je     c0018580 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0018574:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001857c:	eb 66                	jmp    c00185e4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001857e:	66 90                	xchg   ax,ax
c0018580:	83 ec 08             	sub    esp,0x8
c0018583:	68 1c f9 01 c0       	push   0xc001f91c
c0018588:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001858c:	e8 ef 81 fe ff       	call   c0000780 <strcmp>
c0018591:	83 c4 10             	add    esp,0x10
c0018594:	85 c0                	test   eax,eax
c0018596:	0f 94 c0             	sete   al
c0018599:	0f b6 c0             	movzx  eax,al
c001859c:	85 c0                	test   eax,eax
c001859e:	74 0c                	je     c00185ac <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c00185a0:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00185a8:	eb 3a                	jmp    c00185e4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00185aa:	66 90                	xchg   ax,ax
c00185ac:	83 ec 08             	sub    esp,0x8
c00185af:	68 be 1f 02 c0       	push   0xc0021fbe
c00185b4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00185b8:	e8 c3 81 fe ff       	call   c0000780 <strcmp>
c00185bd:	83 c4 10             	add    esp,0x10
c00185c0:	85 c0                	test   eax,eax
c00185c2:	0f 94 c0             	sete   al
c00185c5:	0f b6 c0             	movzx  eax,al
c00185c8:	85 c0                	test   eax,eax
c00185ca:	74 0c                	je     c00185d8 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c00185cc:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00185d4:	eb 0e                	jmp    c00185e4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00185d6:	66 90                	xchg   ax,ax
c00185d8:	b8 08 00 00 00       	mov    eax,0x8
c00185dd:	e9 ea 00 00 00       	jmp    c00186cc <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00185e2:	66 90                	xchg   ax,ax
c00185e4:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00185eb:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00185f0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00185f4:	8b 04 85 40 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6dc0]
c00185fb:	83 f8 ff             	cmp    eax,0xffffffff
c00185fe:	75 34                	jne    c0018634 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0018600:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018604:	88 c2                	mov    dl,al
c0018606:	a1 20 92 02 c0       	mov    eax,ds:0xc0029220
c001860b:	01 d0                	add    eax,edx
c001860d:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018611:	8b 15 20 92 02 c0    	mov    edx,DWORD PTR ds:0xc0029220
c0018617:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001861b:	89 14 85 40 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6dc0],edx
c0018622:	a1 20 92 02 c0       	mov    eax,ds:0xc0029220
c0018627:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001862b:	89 14 85 c0 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6d40],edx
c0018632:	eb 18                	jmp    c001864c <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0018634:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018638:	88 c2                	mov    dl,al
c001863a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001863e:	8b 04 85 40 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6dc0]
c0018645:	01 d0                	add    eax,edx
c0018647:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001864b:	90                   	nop
c001864c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018650:	88 04 24             	mov    BYTE PTR [esp],al
c0018653:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018657:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001865b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018663:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0018668:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018670:	83 ec 0c             	sub    esp,0xc
c0018673:	68 00 20 00 00       	push   0x2000
c0018678:	e8 4e f4 fe ff       	call   c0007acb <malloc>
c001867d:	83 c4 10             	add    esp,0x10
c0018680:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018684:	68 00 20 00 00       	push   0x2000
c0018689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001868d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018691:	50                   	push   eax
c0018692:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0018696:	50                   	push   eax
c0018697:	e8 a8 cd fe ff       	call   c0005444 <f_mkfs>
c001869c:	83 c4 10             	add    esp,0x10
c001869f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00186a3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00186a8:	75 0a                	jne    c00186b4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00186aa:	b8 00 00 00 00       	mov    eax,0x0
c00186af:	eb 1b                	jmp    c00186cc <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00186b1:	8d 76 00             	lea    esi,[esi+0x0]
c00186b4:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00186b9:	75 09                	jne    c00186c4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c00186bb:	b8 09 00 00 00       	mov    eax,0x9
c00186c0:	eb 0a                	jmp    c00186cc <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00186c2:	66 90                	xchg   ax,ax
c00186c4:	b8 01 00 00 00       	mov    eax,0x1
c00186c9:	8d 76 00             	lea    esi,[esi+0x0]
c00186cc:	83 c4 2c             	add    esp,0x2c
c00186cf:	c3                   	ret    

c00186d0 <FAT::tryMount(LogicalDisk*, int)>:
c00186d0:	81 ec 4c 03 00 00    	sub    esp,0x34c
c00186d6:	a1 20 92 02 c0       	mov    eax,ds:0xc0029220
c00186db:	83 f8 14             	cmp    eax,0x14
c00186de:	75 18                	jne    c00186f8 <FAT::tryMount(LogicalDisk*, int)+0x28>
c00186e0:	83 ec 0c             	sub    esp,0xc
c00186e3:	68 c4 1f 02 c0       	push   0xc0021fc4
c00186e8:	e8 84 84 ff ff       	call   c0010b71 <KePanic(char const*)>
c00186ed:	83 c4 10             	add    esp,0x10
c00186f0:	b0 00                	mov    al,0x0
c00186f2:	e9 ed 01 00 00       	jmp    c00188e4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00186f7:	90                   	nop
c00186f8:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00186ff:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018705:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001870b:	3d 00 02 00 00       	cmp    eax,0x200
c0018710:	74 0a                	je     c001871c <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0018712:	b0 00                	mov    al,0x0
c0018714:	e9 cb 01 00 00       	jmp    c00188e4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018719:	8d 76 00             	lea    esi,[esi+0x0]
c001871c:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0018724:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001872b:	8b 04 85 40 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6dc0]
c0018732:	83 f8 ff             	cmp    eax,0xffffffff
c0018735:	74 09                	je     c0018740 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0018737:	b0 01                	mov    al,0x1
c0018739:	e9 a6 01 00 00       	jmp    c00188e4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001873e:	66 90                	xchg   ax,ax
c0018740:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001874a:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0018752:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0018759:	88 c2                	mov    dl,al
c001875b:	a1 20 92 02 c0       	mov    eax,ds:0xc0029220
c0018760:	01 d0                	add    eax,edx
c0018762:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0018769:	8b 15 20 92 02 c0    	mov    edx,DWORD PTR ds:0xc0029220
c001876f:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018776:	89 14 85 40 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6dc0],edx
c001877d:	a1 20 92 02 c0       	mov    eax,ds:0xc0029220
c0018782:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0018789:	89 14 85 c0 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6d40],edx
c0018790:	83 ec 0c             	sub    esp,0xc
c0018793:	68 34 02 00 00       	push   0x234
c0018798:	e8 2e f3 fe ff       	call   c0007acb <malloc>
c001879d:	83 c4 10             	add    esp,0x10
c00187a0:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c00187a7:	83 ec 04             	sub    esp,0x4
c00187aa:	6a 00                	push   0x0
c00187ac:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00187b3:	50                   	push   eax
c00187b4:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00187bb:	e8 7e b4 fe ff       	call   c0003c3e <f_mount>
c00187c0:	83 c4 10             	add    esp,0x10
c00187c3:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00187ca:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c00187d2:	74 1c                	je     c00187f0 <FAT::tryMount(LogicalDisk*, int)+0x120>
c00187d4:	83 ec 0c             	sub    esp,0xc
c00187d7:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00187de:	e8 08 f3 fe ff       	call   c0007aeb <rfree>
c00187e3:	83 c4 10             	add    esp,0x10
c00187e6:	b0 00                	mov    al,0x0
c00187e8:	e9 f7 00 00 00       	jmp    c00188e4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00187ed:	8d 76 00             	lea    esi,[esi+0x0]
c00187f0:	83 ec 04             	sub    esp,0x4
c00187f3:	68 00 01 00 00       	push   0x100
c00187f8:	6a 00                	push   0x0
c00187fa:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018801:	50                   	push   eax
c0018802:	e8 e9 7c fe ff       	call   c00004f0 <memset>
c0018807:	83 c4 10             	add    esp,0x10
c001880a:	83 ec 08             	sub    esp,0x8
c001880d:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018814:	50                   	push   eax
c0018815:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001881c:	50                   	push   eax
c001881d:	e8 4e 80 fe ff       	call   c0000870 <strcat>
c0018822:	83 c4 10             	add    esp,0x10
c0018825:	83 ec 08             	sub    esp,0x8
c0018828:	68 d2 1f 02 c0       	push   0xc0021fd2
c001882d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018834:	50                   	push   eax
c0018835:	e8 36 80 fe ff       	call   c0000870 <strcat>
c001883a:	83 c4 10             	add    esp,0x10
c001883d:	83 ec 04             	sub    esp,0x4
c0018840:	6a 01                	push   0x1
c0018842:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0018849:	50                   	push   eax
c001884a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001884e:	50                   	push   eax
c001884f:	e8 4c b4 fe ff       	call   c0003ca0 <f_open>
c0018854:	83 c4 10             	add    esp,0x10
c0018857:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001885e:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0018865:	85 c0                	test   eax,eax
c0018867:	74 0b                	je     c0018874 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0018869:	78 31                	js     c001889c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001886b:	83 e8 04             	sub    eax,0x4
c001886e:	83 f8 01             	cmp    eax,0x1
c0018871:	77 29                	ja     c001889c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018873:	90                   	nop
c0018874:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c001887c:	83 ec 0c             	sub    esp,0xc
c001887f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018883:	50                   	push   eax
c0018884:	e8 c7 bb fe ff       	call   c0004450 <f_close>
c0018889:	83 c4 10             	add    esp,0x10
c001888c:	90                   	nop
c001888d:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0018895:	85 c0                	test   eax,eax
c0018897:	74 43                	je     c00188dc <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0018899:	eb 31                	jmp    c00188cc <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001889b:	90                   	nop
c001889c:	83 ec 0c             	sub    esp,0xc
c001889f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00188a6:	e8 40 f2 fe ff       	call   c0007aeb <rfree>
c00188ab:	83 c4 10             	add    esp,0x10
c00188ae:	83 ec 04             	sub    esp,0x4
c00188b1:	6a 00                	push   0x0
c00188b3:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00188ba:	50                   	push   eax
c00188bb:	6a 00                	push   0x0
c00188bd:	e8 7c b3 fe ff       	call   c0003c3e <f_mount>
c00188c2:	83 c4 10             	add    esp,0x10
c00188c5:	b0 00                	mov    al,0x0
c00188c7:	eb 1b                	jmp    c00188e4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00188c9:	8d 76 00             	lea    esi,[esi+0x0]
c00188cc:	a1 20 92 02 c0       	mov    eax,ds:0xc0029220
c00188d1:	83 c0 01             	add    eax,0x1
c00188d4:	a3 20 92 02 c0       	mov    ds:0xc0029220,eax
c00188d9:	8d 76 00             	lea    esi,[esi+0x0]
c00188dc:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c00188e3:	90                   	nop
c00188e4:	81 c4 4c 03 00 00    	add    esp,0x34c
c00188ea:	c3                   	ret    
c00188eb:	90                   	nop

c00188ec <FAT::allocateSwapfile(char const*, int)>:
c00188ec:	55                   	push   ebp
c00188ed:	57                   	push   edi
c00188ee:	56                   	push   esi
c00188ef:	53                   	push   ebx
c00188f0:	81 ec 3c 04 00 00    	sub    esp,0x43c
c00188f6:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0018901:	83 ec 0c             	sub    esp,0xc
c0018904:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001890b:	e8 bb f1 fe ff       	call   c0007acb <malloc>
c0018910:	83 c4 10             	add    esp,0x10
c0018913:	89 c7                	mov    edi,eax
c0018915:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c001891a:	83 ec 04             	sub    esp,0x4
c001891d:	50                   	push   eax
c001891e:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0018925:	57                   	push   edi
c0018926:	e8 4f 28 ff ff       	call   c000b17a <File::File(char const*, Process*)>
c001892b:	83 c4 10             	add    esp,0x10
c001892e:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0018935:	83 ec 04             	sub    esp,0x4
c0018938:	8d 44 24 13          	lea    eax,[esp+0x13]
c001893c:	50                   	push   eax
c001893d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018941:	50                   	push   eax
c0018942:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018949:	e8 ea 2b ff ff       	call   c000b538 <File::stat(unsigned long long*, bool*)>
c001894e:	83 c4 10             	add    esp,0x10
c0018951:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0018958:	c1 e0 14             	shl    eax,0x14
c001895b:	89 c7                	mov    edi,eax
c001895d:	89 c5                	mov    ebp,eax
c001895f:	c1 fd 1f             	sar    ebp,0x1f
c0018962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018966:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001896a:	89 f9                	mov    ecx,edi
c001896c:	31 c1                	xor    ecx,eax
c001896e:	89 cb                	mov    ebx,ecx
c0018970:	89 e9                	mov    ecx,ebp
c0018972:	31 d1                	xor    ecx,edx
c0018974:	89 ce                	mov    esi,ecx
c0018976:	89 f0                	mov    eax,esi
c0018978:	09 d8                	or     eax,ebx
c001897a:	0f 84 9c 00 00 00    	je     c0018a1c <FAT::allocateSwapfile(char const*, int)+0x130>
c0018980:	83 ec 0c             	sub    esp,0xc
c0018983:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001898a:	e8 75 2a ff ff       	call   c000b404 <File::unlink()>
c001898f:	83 c4 10             	add    esp,0x10
c0018992:	83 ec 08             	sub    esp,0x8
c0018995:	6a 12                	push   0x12
c0018997:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001899e:	e8 93 28 ff ff       	call   c000b236 <File::open(FileOpenMode)>
c00189a3:	83 c4 10             	add    esp,0x10
c00189a6:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00189ad:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00189b3:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00189ba:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00189c1:	c1 e0 14             	shl    eax,0x14
c00189c4:	83 ec 04             	sub    esp,0x4
c00189c7:	6a 01                	push   0x1
c00189c9:	50                   	push   eax
c00189ca:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c00189d1:	e8 01 c9 fe ff       	call   c00052d7 <f_expand>
c00189d6:	83 c4 10             	add    esp,0x10
c00189d9:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00189e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00189e2:	83 c0 10             	add    eax,0x10
c00189e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00189e7:	83 ec 0c             	sub    esp,0xc
c00189ea:	8d 54 24 24          	lea    edx,[esp+0x24]
c00189ee:	52                   	push   edx
c00189ef:	8d 54 24 30          	lea    edx,[esp+0x30]
c00189f3:	52                   	push   edx
c00189f4:	6a 00                	push   0x0
c00189f6:	68 00 04 00 00       	push   0x400
c00189fb:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0018a02:	ff d0                	call   eax
c0018a04:	83 c4 20             	add    esp,0x20
c0018a07:	83 ec 0c             	sub    esp,0xc
c0018a0a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018a11:	e8 7e 28 ff ff       	call   c000b294 <File::close()>
c0018a16:	83 c4 10             	add    esp,0x10
c0018a19:	8d 76 00             	lea    esi,[esi+0x0]
c0018a1c:	83 ec 08             	sub    esp,0x8
c0018a1f:	6a 01                	push   0x1
c0018a21:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018a28:	e8 09 28 ff ff       	call   c000b236 <File::open(FileOpenMode)>
c0018a2d:	83 c4 10             	add    esp,0x10
c0018a30:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0018a37:	8b 00                	mov    eax,DWORD PTR [eax]
c0018a39:	83 c0 0c             	add    eax,0xc
c0018a3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0018a3e:	83 ec 0c             	sub    esp,0xc
c0018a41:	8d 54 24 24          	lea    edx,[esp+0x24]
c0018a45:	52                   	push   edx
c0018a46:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0018a4a:	52                   	push   edx
c0018a4b:	6a 00                	push   0x0
c0018a4d:	6a 04                	push   0x4
c0018a4f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0018a56:	ff d0                	call   eax
c0018a58:	83 c4 20             	add    esp,0x20
c0018a5b:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0018a62:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0018a68:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0018a6f:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0018a76:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0018a79:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0018a80:	83 ec 0c             	sub    esp,0xc
c0018a83:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018a8a:	e8 05 28 ff ff       	call   c000b294 <File::close()>
c0018a8f:	83 c4 10             	add    esp,0x10
c0018a92:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0018a99:	ba 00 00 00 00       	mov    edx,0x0
c0018a9e:	81 c4 3c 04 00 00    	add    esp,0x43c
c0018aa4:	5b                   	pop    ebx
c0018aa5:	5e                   	pop    esi
c0018aa6:	5f                   	pop    edi
c0018aa7:	5d                   	pop    ebp
c0018aa8:	c3                   	ret    
c0018aa9:	90                   	nop
c0018aaa:	66 90                	xchg   ax,ax

c0018aac <FAT::readDir(void*, unsigned long, void*, int*)>:
c0018aac:	57                   	push   edi
c0018aad:	56                   	push   esi
c0018aae:	53                   	push   ebx
c0018aaf:	81 ec 50 02 00 00    	sub    esp,0x250
c0018ab5:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0018abd:	74 0d                	je     c0018acc <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0018abf:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0018ac7:	75 0f                	jne    c0018ad8 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0018ac9:	8d 76 00             	lea    esi,[esi+0x0]
c0018acc:	b8 04 00 00 00       	mov    eax,0x4
c0018ad1:	e9 3a 01 00 00       	jmp    c0018c10 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0018ad6:	66 90                	xchg   ax,ax
c0018ad8:	83 ec 08             	sub    esp,0x8
c0018adb:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0018ae2:	50                   	push   eax
c0018ae3:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0018aea:	e8 2d bc fe ff       	call   c000471c <f_readdir>
c0018aef:	83 c4 10             	add    esp,0x10
c0018af2:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0018af9:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0018b00:	83 ec 0c             	sub    esp,0xc
c0018b03:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0018b0a:	83 c0 16             	add    eax,0x16
c0018b0d:	50                   	push   eax
c0018b0e:	e8 6d 7a fe ff       	call   c0000580 <strlen>
c0018b13:	83 c4 10             	add    esp,0x10
c0018b16:	ba 00 00 00 00       	mov    edx,0x0
c0018b1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018b1f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0018b23:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0018b2a:	0f b6 c0             	movzx  eax,al
c0018b2d:	83 e0 10             	and    eax,0x10
c0018b30:	74 0a                	je     c0018b3c <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0018b32:	b8 02 00 00 00       	mov    eax,0x2
c0018b37:	eb 0b                	jmp    c0018b44 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0018b39:	8d 76 00             	lea    esi,[esi+0x0]
c0018b3c:	b8 01 00 00 00       	mov    eax,0x1
c0018b41:	8d 76 00             	lea    esi,[esi+0x0]
c0018b44:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018b48:	83 ec 08             	sub    esp,0x8
c0018b4b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0018b52:	83 c0 16             	add    eax,0x16
c0018b55:	50                   	push   eax
c0018b56:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018b5a:	83 c0 10             	add    eax,0x10
c0018b5d:	50                   	push   eax
c0018b5e:	e8 ed 7a fe ff       	call   c0000650 <strcpy>
c0018b63:	83 c4 10             	add    esp,0x10
c0018b66:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0018b6d:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0018b74:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018b78:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0018b7f:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0018b86:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0018b8d:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0018b94:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0018b9b:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0018ba2:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0018ba9:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0018bb0:	89 c6                	mov    esi,eax
c0018bb2:	89 d7                	mov    edi,edx
c0018bb4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018bb6:	89 c8                	mov    eax,ecx
c0018bb8:	89 fa                	mov    edx,edi
c0018bba:	89 f3                	mov    ebx,esi
c0018bbc:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0018bc3:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0018bca:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0018bd1:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0018bd8:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0018bde:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0018be5:	0f be c0             	movsx  eax,al
c0018be8:	85 c0                	test   eax,eax
c0018bea:	75 08                	jne    c0018bf4 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0018bec:	b8 07 00 00 00       	mov    eax,0x7
c0018bf1:	eb 1d                	jmp    c0018c10 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0018bf3:	90                   	nop
c0018bf4:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0018bfb:	85 c0                	test   eax,eax
c0018bfd:	75 09                	jne    c0018c08 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0018bff:	b8 00 00 00 00       	mov    eax,0x0
c0018c04:	eb 0a                	jmp    c0018c10 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0018c06:	66 90                	xchg   ax,ax
c0018c08:	b8 01 00 00 00       	mov    eax,0x1
c0018c0d:	8d 76 00             	lea    esi,[esi+0x0]
c0018c10:	81 c4 50 02 00 00    	add    esp,0x250
c0018c16:	5b                   	pop    ebx
c0018c17:	5e                   	pop    esi
c0018c18:	5f                   	pop    edi
c0018c19:	c3                   	ret    
c0018c1a:	66 90                	xchg   ax,ax

c0018c1c <FAT::read(void*, unsigned long, void*, int*)>:
c0018c1c:	83 ec 1c             	sub    esp,0x1c
c0018c1f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018c24:	74 0a                	je     c0018c30 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0018c26:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0018c2b:	75 0b                	jne    c0018c38 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0018c2d:	8d 76 00             	lea    esi,[esi+0x0]
c0018c30:	b8 04 00 00 00       	mov    eax,0x4
c0018c35:	eb 41                	jmp    c0018c78 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0018c37:	90                   	nop
c0018c38:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018c3c:	50                   	push   eax
c0018c3d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018c41:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018c45:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018c49:	e8 15 b3 fe ff       	call   c0003f63 <f_read>
c0018c4e:	83 c4 10             	add    esp,0x10
c0018c51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018c55:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018c59:	89 c2                	mov    edx,eax
c0018c5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c5f:	89 10                	mov    DWORD PTR [eax],edx
c0018c61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018c65:	85 c0                	test   eax,eax
c0018c67:	75 07                	jne    c0018c70 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0018c69:	b8 00 00 00 00       	mov    eax,0x0
c0018c6e:	eb 08                	jmp    c0018c78 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0018c70:	b8 01 00 00 00       	mov    eax,0x1
c0018c75:	8d 76 00             	lea    esi,[esi+0x0]
c0018c78:	83 c4 1c             	add    esp,0x1c
c0018c7b:	c3                   	ret    

c0018c7c <FAT::write(void*, unsigned long, void*, int*)>:
c0018c7c:	83 ec 1c             	sub    esp,0x1c
c0018c7f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018c84:	74 0a                	je     c0018c90 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0018c86:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0018c8b:	75 0b                	jne    c0018c98 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0018c8d:	8d 76 00             	lea    esi,[esi+0x0]
c0018c90:	b8 04 00 00 00       	mov    eax,0x4
c0018c95:	eb 41                	jmp    c0018cd8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0018c97:	90                   	nop
c0018c98:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018c9c:	50                   	push   eax
c0018c9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018ca1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018ca5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018ca9:	e8 96 b4 fe ff       	call   c0004144 <f_write>
c0018cae:	83 c4 10             	add    esp,0x10
c0018cb1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018cb5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018cb9:	89 c2                	mov    edx,eax
c0018cbb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018cbf:	89 10                	mov    DWORD PTR [eax],edx
c0018cc1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018cc5:	85 c0                	test   eax,eax
c0018cc7:	75 07                	jne    c0018cd0 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0018cc9:	b8 00 00 00 00       	mov    eax,0x0
c0018cce:	eb 08                	jmp    c0018cd8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0018cd0:	b8 01 00 00 00       	mov    eax,0x1
c0018cd5:	8d 76 00             	lea    esi,[esi+0x0]
c0018cd8:	83 c4 1c             	add    esp,0x1c
c0018cdb:	c3                   	ret    

c0018cdc <FAT::close(void*)>:
c0018cdc:	83 ec 1c             	sub    esp,0x1c
c0018cdf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018ce4:	75 0a                	jne    c0018cf0 <FAT::close(void*)+0x14>
c0018ce6:	b8 04 00 00 00       	mov    eax,0x4
c0018ceb:	eb 3f                	jmp    c0018d2c <FAT::close(void*)+0x50>
c0018ced:	8d 76 00             	lea    esi,[esi+0x0]
c0018cf0:	83 ec 0c             	sub    esp,0xc
c0018cf3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018cf7:	e8 54 b7 fe ff       	call   c0004450 <f_close>
c0018cfc:	83 c4 10             	add    esp,0x10
c0018cff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018d03:	83 ec 0c             	sub    esp,0xc
c0018d06:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018d0a:	e8 cc ed fe ff       	call   c0007adb <free>
c0018d0f:	83 c4 10             	add    esp,0x10
c0018d12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018d16:	85 c0                	test   eax,eax
c0018d18:	75 0a                	jne    c0018d24 <FAT::close(void*)+0x48>
c0018d1a:	b8 00 00 00 00       	mov    eax,0x0
c0018d1f:	eb 0b                	jmp    c0018d2c <FAT::close(void*)+0x50>
c0018d21:	8d 76 00             	lea    esi,[esi+0x0]
c0018d24:	b8 01 00 00 00       	mov    eax,0x1
c0018d29:	8d 76 00             	lea    esi,[esi+0x0]
c0018d2c:	83 c4 1c             	add    esp,0x1c
c0018d2f:	c3                   	ret    

c0018d30 <FAT::closeDir(void*)>:
c0018d30:	83 ec 1c             	sub    esp,0x1c
c0018d33:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018d38:	75 0a                	jne    c0018d44 <FAT::closeDir(void*)+0x14>
c0018d3a:	b8 04 00 00 00       	mov    eax,0x4
c0018d3f:	eb 3f                	jmp    c0018d80 <FAT::closeDir(void*)+0x50>
c0018d41:	8d 76 00             	lea    esi,[esi+0x0]
c0018d44:	83 ec 0c             	sub    esp,0xc
c0018d47:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018d4b:	e8 aa b9 fe ff       	call   c00046fa <f_closedir>
c0018d50:	83 c4 10             	add    esp,0x10
c0018d53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018d57:	83 ec 0c             	sub    esp,0xc
c0018d5a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018d5e:	e8 78 ed fe ff       	call   c0007adb <free>
c0018d63:	83 c4 10             	add    esp,0x10
c0018d66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018d6a:	85 c0                	test   eax,eax
c0018d6c:	75 0a                	jne    c0018d78 <FAT::closeDir(void*)+0x48>
c0018d6e:	b8 00 00 00 00       	mov    eax,0x0
c0018d73:	eb 0b                	jmp    c0018d80 <FAT::closeDir(void*)+0x50>
c0018d75:	8d 76 00             	lea    esi,[esi+0x0]
c0018d78:	b8 01 00 00 00       	mov    eax,0x1
c0018d7d:	8d 76 00             	lea    esi,[esi+0x0]
c0018d80:	83 c4 1c             	add    esp,0x1c
c0018d83:	c3                   	ret    

c0018d84 <FAT::truncate(void*, unsigned long long)>:
c0018d84:	83 ec 2c             	sub    esp,0x2c
c0018d87:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018d8b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018d8f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018d93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018d97:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0018d9c:	75 0a                	jne    c0018da8 <FAT::truncate(void*, unsigned long long)+0x24>
c0018d9e:	b8 04 00 00 00       	mov    eax,0x4
c0018da3:	eb 47                	jmp    c0018dec <FAT::truncate(void*, unsigned long long)+0x68>
c0018da5:	8d 76 00             	lea    esi,[esi+0x0]
c0018da8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018dac:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018daf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018db3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018dbb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018dbf:	83 ec 08             	sub    esp,0x8
c0018dc2:	50                   	push   eax
c0018dc3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018dc7:	e8 b3 b6 fe ff       	call   c000447f <f_lseek>
c0018dcc:	83 c4 10             	add    esp,0x10
c0018dcf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018dd3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018dd7:	85 c0                	test   eax,eax
c0018dd9:	75 09                	jne    c0018de4 <FAT::truncate(void*, unsigned long long)+0x60>
c0018ddb:	b8 00 00 00 00       	mov    eax,0x0
c0018de0:	eb 0a                	jmp    c0018dec <FAT::truncate(void*, unsigned long long)+0x68>
c0018de2:	66 90                	xchg   ax,ax
c0018de4:	b8 01 00 00 00       	mov    eax,0x1
c0018de9:	8d 76 00             	lea    esi,[esi+0x0]
c0018dec:	83 c4 2c             	add    esp,0x2c
c0018def:	c3                   	ret    

c0018df0 <FAT::seek(void*, unsigned long long)>:
c0018df0:	83 ec 2c             	sub    esp,0x2c
c0018df3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018df7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018dfb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018dff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018e03:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0018e08:	75 0a                	jne    c0018e14 <FAT::seek(void*, unsigned long long)+0x24>
c0018e0a:	b8 04 00 00 00       	mov    eax,0x4
c0018e0f:	eb 33                	jmp    c0018e44 <FAT::seek(void*, unsigned long long)+0x54>
c0018e11:	8d 76 00             	lea    esi,[esi+0x0]
c0018e14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e18:	83 ec 08             	sub    esp,0x8
c0018e1b:	50                   	push   eax
c0018e1c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018e20:	e8 5a b6 fe ff       	call   c000447f <f_lseek>
c0018e25:	83 c4 10             	add    esp,0x10
c0018e28:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018e2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018e30:	85 c0                	test   eax,eax
c0018e32:	75 08                	jne    c0018e3c <FAT::seek(void*, unsigned long long)+0x4c>
c0018e34:	b8 00 00 00 00       	mov    eax,0x0
c0018e39:	eb 09                	jmp    c0018e44 <FAT::seek(void*, unsigned long long)+0x54>
c0018e3b:	90                   	nop
c0018e3c:	b8 01 00 00 00       	mov    eax,0x1
c0018e41:	8d 76 00             	lea    esi,[esi+0x0]
c0018e44:	83 c4 2c             	add    esp,0x2c
c0018e47:	c3                   	ret    

c0018e48 <fatWrapperReadDisk>:
c0018e48:	53                   	push   ebx
c0018e49:	83 ec 18             	sub    esp,0x18
c0018e4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018e50:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018e54:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018e59:	8b 0c 85 20 84 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7be0]
c0018e60:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018e64:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e68:	ba 00 00 00 00       	mov    edx,0x0
c0018e6d:	83 ec 0c             	sub    esp,0xc
c0018e70:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018e74:	53                   	push   ebx
c0018e75:	52                   	push   edx
c0018e76:	50                   	push   eax
c0018e77:	51                   	push   ecx
c0018e78:	e8 f5 45 ff ff       	call   c000d472 <LogicalDisk::read(unsigned long long, int, void*)>
c0018e7d:	83 c4 20             	add    esp,0x20
c0018e80:	83 c4 18             	add    esp,0x18
c0018e83:	5b                   	pop    ebx
c0018e84:	c3                   	ret    
c0018e85:	8d 76 00             	lea    esi,[esi+0x0]

c0018e88 <fatWrapperWriteDisk>:
c0018e88:	53                   	push   ebx
c0018e89:	83 ec 18             	sub    esp,0x18
c0018e8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018e90:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018e94:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018e99:	8b 0c 85 20 84 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7be0]
c0018ea0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018ea4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ea8:	ba 00 00 00 00       	mov    edx,0x0
c0018ead:	83 ec 0c             	sub    esp,0xc
c0018eb0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018eb4:	53                   	push   ebx
c0018eb5:	52                   	push   edx
c0018eb6:	50                   	push   eax
c0018eb7:	51                   	push   ecx
c0018eb8:	e8 21 46 ff ff       	call   c000d4de <LogicalDisk::write(unsigned long long, int, void*)>
c0018ebd:	83 c4 20             	add    esp,0x20
c0018ec0:	83 c4 18             	add    esp,0x18
c0018ec3:	5b                   	pop    ebx
c0018ec4:	c3                   	ret    
c0018ec5:	8d 76 00             	lea    esi,[esi+0x0]

c0018ec8 <fatWrapperIoctl>:
c0018ec8:	53                   	push   ebx
c0018ec9:	83 ec 28             	sub    esp,0x28
c0018ecc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018ed0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018ed4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018ed8:	88 d0                	mov    al,dl
c0018eda:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018ede:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018ee3:	83 f8 02             	cmp    eax,0x2
c0018ee6:	75 34                	jne    c0018f1c <fatWrapperIoctl+0x54>
c0018ee8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018eec:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018ef0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018ef5:	8b 04 85 20 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7be0]
c0018efc:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018f02:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018f08:	89 c2                	mov    edx,eax
c0018f0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018f0e:	66 89 10             	mov    WORD PTR [eax],dx
c0018f11:	b8 00 00 00 00       	mov    eax,0x0
c0018f16:	e9 c5 00 00 00       	jmp    c0018fe0 <fatWrapperIoctl+0x118>
c0018f1b:	90                   	nop
c0018f1c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018f21:	83 f8 01             	cmp    eax,0x1
c0018f24:	75 6a                	jne    c0018f90 <fatWrapperIoctl+0xc8>
c0018f26:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018f2a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018f2e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018f33:	8b 04 85 20 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7be0]
c0018f3a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018f40:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0018f46:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0018f4c:	89 c8                	mov    eax,ecx
c0018f4e:	89 da                	mov    edx,ebx
c0018f50:	0f a4 c2 0a          	shld   edx,eax,0xa
c0018f54:	c1 e0 0a             	shl    eax,0xa
c0018f57:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0018f5c:	8b 0c 8d 20 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7be0]
c0018f63:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0018f69:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0018f6f:	89 cb                	mov    ebx,ecx
c0018f71:	c1 fb 1f             	sar    ebx,0x1f
c0018f74:	53                   	push   ebx
c0018f75:	51                   	push   ecx
c0018f76:	52                   	push   edx
c0018f77:	50                   	push   eax
c0018f78:	e8 b3 5b 00 00       	call   c001eb30 <__udivdi3>
c0018f7d:	83 c4 10             	add    esp,0x10
c0018f80:	89 c2                	mov    edx,eax
c0018f82:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018f86:	89 10                	mov    DWORD PTR [eax],edx
c0018f88:	b8 00 00 00 00       	mov    eax,0x0
c0018f8d:	eb 51                	jmp    c0018fe0 <fatWrapperIoctl+0x118>
c0018f8f:	90                   	nop
c0018f90:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018f95:	85 c0                	test   eax,eax
c0018f97:	75 07                	jne    c0018fa0 <fatWrapperIoctl+0xd8>
c0018f99:	b8 00 00 00 00       	mov    eax,0x0
c0018f9e:	eb 40                	jmp    c0018fe0 <fatWrapperIoctl+0x118>
c0018fa0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018fa5:	83 f8 03             	cmp    eax,0x3
c0018fa8:	75 1a                	jne    c0018fc4 <fatWrapperIoctl+0xfc>
c0018faa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018fae:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018fb2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018fb6:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0018fbc:	b8 00 00 00 00       	mov    eax,0x0
c0018fc1:	eb 1d                	jmp    c0018fe0 <fatWrapperIoctl+0x118>
c0018fc3:	90                   	nop
c0018fc4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018fc9:	83 f8 04             	cmp    eax,0x4
c0018fcc:	75 0a                	jne    c0018fd8 <fatWrapperIoctl+0x110>
c0018fce:	b8 00 00 00 00       	mov    eax,0x0
c0018fd3:	eb 0b                	jmp    c0018fe0 <fatWrapperIoctl+0x118>
c0018fd5:	8d 76 00             	lea    esi,[esi+0x0]
c0018fd8:	b8 04 00 00 00       	mov    eax,0x4
c0018fdd:	8d 76 00             	lea    esi,[esi+0x0]
c0018fe0:	83 c4 28             	add    esp,0x28
c0018fe3:	5b                   	pop    ebx
c0018fe4:	c3                   	ret    
c0018fe5:	90                   	nop
c0018fe6:	66 90                	xchg   ax,ax

c0018fe8 <FAT::FAT()>:
c0018fe8:	83 ec 1c             	sub    esp,0x1c
c0018feb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018fef:	83 ec 0c             	sub    esp,0xc
c0018ff2:	50                   	push   eax
c0018ff3:	e8 fc 1e ff ff       	call   c000aef4 <Filesystem::Filesystem()>
c0018ff8:	83 c4 10             	add    esp,0x10
c0018ffb:	ba e8 1f 02 c0       	mov    edx,0xc0021fe8
c0019000:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019004:	89 10                	mov    DWORD PTR [eax],edx
c0019006:	c7 05 20 92 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029220,0x0
c0019010:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019018:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001901d:	7f 19                	jg     c0019038 <FAT::FAT()+0x50>
c001901f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019023:	c7 04 85 40 92 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd6dc0],0xffffffff
c001902e:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019033:	eb e3                	jmp    c0019018 <FAT::FAT()+0x30>
c0019035:	8d 76 00             	lea    esi,[esi+0x0]
c0019038:	90                   	nop
c0019039:	83 c4 1c             	add    esp,0x1c
c001903c:	c3                   	ret    
c001903d:	90                   	nop
c001903e:	66 90                	xchg   ax,ax

c0019040 <FAT::fixFilepath(char*)>:
c0019040:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019044:	8a 00                	mov    al,BYTE PTR [eax]
c0019046:	0f be c0             	movsx  eax,al
c0019049:	83 f8 40             	cmp    eax,0x40
c001904c:	7e 2e                	jle    c001907c <FAT::fixFilepath(char*)+0x3c>
c001904e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019052:	8a 00                	mov    al,BYTE PTR [eax]
c0019054:	83 e8 41             	sub    eax,0x41
c0019057:	88 c2                	mov    dl,al
c0019059:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001905d:	88 10                	mov    BYTE PTR [eax],dl
c001905f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019063:	8a 00                	mov    al,BYTE PTR [eax]
c0019065:	0f be c0             	movsx  eax,al
c0019068:	8b 04 85 40 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6dc0]
c001906f:	83 c0 30             	add    eax,0x30
c0019072:	88 c2                	mov    dl,al
c0019074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019078:	88 10                	mov    BYTE PTR [eax],dl
c001907a:	66 90                	xchg   ax,ax
c001907c:	90                   	nop
c001907d:	c3                   	ret    
c001907e:	66 90                	xchg   ax,ax

c0019080 <FAT::open(char const*, void**, FileOpenMode)>:
c0019080:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019086:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001908e:	74 0c                	je     c001909c <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0019090:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019098:	75 0e                	jne    c00190a8 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001909a:	66 90                	xchg   ax,ax
c001909c:	b8 04 00 00 00       	mov    eax,0x4
c00190a1:	e9 46 01 00 00       	jmp    c00191ec <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c00190a6:	66 90                	xchg   ax,ax
c00190a8:	83 ec 08             	sub    esp,0x8
c00190ab:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00190b2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00190b6:	50                   	push   eax
c00190b7:	e8 94 75 fe ff       	call   c0000650 <strcpy>
c00190bc:	83 c4 10             	add    esp,0x10
c00190bf:	83 ec 08             	sub    esp,0x8
c00190c2:	8d 44 24 10          	lea    eax,[esp+0x10]
c00190c6:	50                   	push   eax
c00190c7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00190ce:	e8 6d ff ff ff       	call   c0019040 <FAT::fixFilepath(char*)>
c00190d3:	83 c4 10             	add    esp,0x10
c00190d6:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00190de:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00190e5:	83 e0 01             	and    eax,0x1
c00190e8:	74 12                	je     c00190fc <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c00190ea:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00190f1:	83 c8 01             	or     eax,0x1
c00190f4:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00190fb:	90                   	nop
c00190fc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019103:	83 e0 04             	and    eax,0x4
c0019106:	74 24                	je     c001912c <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0019108:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001910f:	83 c8 30             	or     eax,0x30
c0019112:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019119:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019120:	83 c8 02             	or     eax,0x2
c0019123:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001912a:	66 90                	xchg   ax,ax
c001912c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019133:	83 e0 02             	and    eax,0x2
c0019136:	74 14                	je     c001914c <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0019138:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001913f:	83 c8 02             	or     eax,0x2
c0019142:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019149:	8d 76 00             	lea    esi,[esi+0x0]
c001914c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019153:	83 e0 08             	and    eax,0x8
c0019156:	74 14                	je     c001916c <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0019158:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001915f:	83 c8 04             	or     eax,0x4
c0019162:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019169:	8d 76 00             	lea    esi,[esi+0x0]
c001916c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019173:	83 e0 10             	and    eax,0x10
c0019176:	74 14                	je     c001918c <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0019178:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001917f:	83 c8 08             	or     eax,0x8
c0019182:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019189:	8d 76 00             	lea    esi,[esi+0x0]
c001918c:	83 ec 0c             	sub    esp,0xc
c001918f:	68 28 02 00 00       	push   0x228
c0019194:	e8 32 e9 fe ff       	call   c0007acb <malloc>
c0019199:	83 c4 10             	add    esp,0x10
c001919c:	89 c2                	mov    edx,eax
c001919e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00191a5:	89 10                	mov    DWORD PTR [eax],edx
c00191a7:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00191af:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00191b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00191b8:	83 ec 04             	sub    esp,0x4
c00191bb:	52                   	push   edx
c00191bc:	8d 54 24 10          	lea    edx,[esp+0x10]
c00191c0:	52                   	push   edx
c00191c1:	50                   	push   eax
c00191c2:	e8 d9 aa fe ff       	call   c0003ca0 <f_open>
c00191c7:	83 c4 10             	add    esp,0x10
c00191ca:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00191d1:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00191d9:	74 09                	je     c00191e4 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c00191db:	b8 01 00 00 00       	mov    eax,0x1
c00191e0:	eb 0a                	jmp    c00191ec <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c00191e2:	66 90                	xchg   ax,ax
c00191e4:	b8 00 00 00 00       	mov    eax,0x0
c00191e9:	8d 76 00             	lea    esi,[esi+0x0]
c00191ec:	81 c4 1c 01 00 00    	add    esp,0x11c
c00191f2:	c3                   	ret    
c00191f3:	90                   	nop

c00191f4 <FAT::openDir(char const*, void**)>:
c00191f4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00191fa:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019202:	74 0c                	je     c0019210 <FAT::openDir(char const*, void**)+0x1c>
c0019204:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001920c:	75 0e                	jne    c001921c <FAT::openDir(char const*, void**)+0x28>
c001920e:	66 90                	xchg   ax,ax
c0019210:	b8 04 00 00 00       	mov    eax,0x4
c0019215:	e9 82 00 00 00       	jmp    c001929c <FAT::openDir(char const*, void**)+0xa8>
c001921a:	66 90                	xchg   ax,ax
c001921c:	83 ec 08             	sub    esp,0x8
c001921f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019226:	8d 44 24 18          	lea    eax,[esp+0x18]
c001922a:	50                   	push   eax
c001922b:	e8 20 74 fe ff       	call   c0000650 <strcpy>
c0019230:	83 c4 10             	add    esp,0x10
c0019233:	83 ec 08             	sub    esp,0x8
c0019236:	8d 44 24 14          	lea    eax,[esp+0x14]
c001923a:	50                   	push   eax
c001923b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019242:	e8 f9 fd ff ff       	call   c0019040 <FAT::fixFilepath(char*)>
c0019247:	83 c4 10             	add    esp,0x10
c001924a:	83 ec 0c             	sub    esp,0xc
c001924d:	6a 30                	push   0x30
c001924f:	e8 77 e8 fe ff       	call   c0007acb <malloc>
c0019254:	83 c4 10             	add    esp,0x10
c0019257:	89 c2                	mov    edx,eax
c0019259:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019260:	89 10                	mov    DWORD PTR [eax],edx
c0019262:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019269:	8b 00                	mov    eax,DWORD PTR [eax]
c001926b:	83 ec 08             	sub    esp,0x8
c001926e:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019272:	52                   	push   edx
c0019273:	50                   	push   eax
c0019274:	e8 b6 b3 fe ff       	call   c000462f <f_opendir>
c0019279:	83 c4 10             	add    esp,0x10
c001927c:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019283:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001928b:	74 07                	je     c0019294 <FAT::openDir(char const*, void**)+0xa0>
c001928d:	b8 01 00 00 00       	mov    eax,0x1
c0019292:	eb 08                	jmp    c001929c <FAT::openDir(char const*, void**)+0xa8>
c0019294:	b8 00 00 00 00       	mov    eax,0x0
c0019299:	8d 76 00             	lea    esi,[esi+0x0]
c001929c:	81 c4 1c 01 00 00    	add    esp,0x11c
c00192a2:	c3                   	ret    
c00192a3:	90                   	nop

c00192a4 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00192a4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00192aa:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00192b2:	75 0c                	jne    c00192c0 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c00192b4:	b8 04 00 00 00       	mov    eax,0x4
c00192b9:	e9 d6 00 00 00       	jmp    c0019394 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00192be:	66 90                	xchg   ax,ax
c00192c0:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00192c8:	75 0a                	jne    c00192d4 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c00192ca:	b8 04 00 00 00       	mov    eax,0x4
c00192cf:	e9 c0 00 00 00       	jmp    c0019394 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00192d4:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00192dc:	75 0a                	jne    c00192e8 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c00192de:	b8 04 00 00 00       	mov    eax,0x4
c00192e3:	e9 ac 00 00 00       	jmp    c0019394 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00192e8:	83 ec 08             	sub    esp,0x8
c00192eb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00192f2:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00192f9:	50                   	push   eax
c00192fa:	e8 51 73 fe ff       	call   c0000650 <strcpy>
c00192ff:	83 c4 10             	add    esp,0x10
c0019302:	83 ec 08             	sub    esp,0x8
c0019305:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001930c:	50                   	push   eax
c001930d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019314:	e8 27 fd ff ff       	call   c0019040 <FAT::fixFilepath(char*)>
c0019319:	83 c4 10             	add    esp,0x10
c001931c:	83 ec 08             	sub    esp,0x8
c001931f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019323:	50                   	push   eax
c0019324:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001932b:	50                   	push   eax
c001932c:	e8 7d b4 fe ff       	call   c00047ae <f_stat>
c0019331:	83 c4 10             	add    esp,0x10
c0019334:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001933b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019342:	85 c0                	test   eax,eax
c0019344:	74 0a                	je     c0019350 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0019346:	83 f8 04             	cmp    eax,0x4
c0019349:	74 39                	je     c0019384 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001934b:	eb 3f                	jmp    c001938c <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001934d:	8d 76 00             	lea    esi,[esi+0x0]
c0019350:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019354:	0f b6 c0             	movzx  eax,al
c0019357:	83 e0 10             	and    eax,0x10
c001935a:	0f 95 c2             	setne  dl
c001935d:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019364:	88 10                	mov    BYTE PTR [eax],dl
c0019366:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001936a:	ba 00 00 00 00       	mov    edx,0x0
c001936f:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019376:	89 01                	mov    DWORD PTR [ecx],eax
c0019378:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001937b:	b8 00 00 00 00       	mov    eax,0x0
c0019380:	eb 12                	jmp    c0019394 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019382:	66 90                	xchg   ax,ax
c0019384:	b8 02 00 00 00       	mov    eax,0x2
c0019389:	eb 09                	jmp    c0019394 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001938b:	90                   	nop
c001938c:	b8 01 00 00 00       	mov    eax,0x1
c0019391:	8d 76 00             	lea    esi,[esi+0x0]
c0019394:	81 c4 2c 02 00 00    	add    esp,0x22c
c001939a:	c3                   	ret    
c001939b:	90                   	nop

c001939c <FAT::unlink(char const*)>:
c001939c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00193a2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00193aa:	75 08                	jne    c00193b4 <FAT::unlink(char const*)+0x18>
c00193ac:	b8 04 00 00 00       	mov    eax,0x4
c00193b1:	eb 61                	jmp    c0019414 <FAT::unlink(char const*)+0x78>
c00193b3:	90                   	nop
c00193b4:	83 ec 08             	sub    esp,0x8
c00193b7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00193be:	8d 44 24 18          	lea    eax,[esp+0x18]
c00193c2:	50                   	push   eax
c00193c3:	e8 88 72 fe ff       	call   c0000650 <strcpy>
c00193c8:	83 c4 10             	add    esp,0x10
c00193cb:	83 ec 08             	sub    esp,0x8
c00193ce:	8d 44 24 14          	lea    eax,[esp+0x14]
c00193d2:	50                   	push   eax
c00193d3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00193da:	e8 61 fc ff ff       	call   c0019040 <FAT::fixFilepath(char*)>
c00193df:	83 c4 10             	add    esp,0x10
c00193e2:	83 ec 0c             	sub    esp,0xc
c00193e5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00193e9:	50                   	push   eax
c00193ea:	e8 31 b6 fe ff       	call   c0004a20 <f_unlink>
c00193ef:	83 c4 10             	add    esp,0x10
c00193f2:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00193f9:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019400:	85 c0                	test   eax,eax
c0019402:	75 08                	jne    c001940c <FAT::unlink(char const*)+0x70>
c0019404:	b8 00 00 00 00       	mov    eax,0x0
c0019409:	eb 09                	jmp    c0019414 <FAT::unlink(char const*)+0x78>
c001940b:	90                   	nop
c001940c:	b8 01 00 00 00       	mov    eax,0x1
c0019411:	8d 76 00             	lea    esi,[esi+0x0]
c0019414:	81 c4 1c 01 00 00    	add    esp,0x11c
c001941a:	c3                   	ret    
c001941b:	90                   	nop

c001941c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001941c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019422:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0019429:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c0019430:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019434:	88 d0                	mov    al,dl
c0019436:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001943a:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019442:	75 0c                	jne    c0019450 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c0019444:	b8 04 00 00 00       	mov    eax,0x4
c0019449:	e9 7e 01 00 00       	jmp    c00195cc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001944e:	66 90                	xchg   ax,ax
c0019450:	83 ec 08             	sub    esp,0x8
c0019453:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001945a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001945e:	50                   	push   eax
c001945f:	e8 ec 71 fe ff       	call   c0000650 <strcpy>
c0019464:	83 c4 10             	add    esp,0x10
c0019467:	83 ec 08             	sub    esp,0x8
c001946a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001946e:	50                   	push   eax
c001946f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019476:	e8 c5 fb ff ff       	call   c0019040 <FAT::fixFilepath(char*)>
c001947b:	83 c4 10             	add    esp,0x10
c001947e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019486:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001948e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019493:	83 e0 01             	and    eax,0x1
c0019496:	74 14                	je     c00194ac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c0019498:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001949f:	83 c8 01             	or     eax,0x1
c00194a2:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c00194a9:	8d 76 00             	lea    esi,[esi+0x0]
c00194ac:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00194b1:	83 e0 02             	and    eax,0x2
c00194b4:	74 12                	je     c00194c8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c00194b6:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00194bd:	83 c8 20             	or     eax,0x20
c00194c0:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c00194c7:	90                   	nop
c00194c8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00194cd:	83 e0 04             	and    eax,0x4
c00194d0:	74 12                	je     c00194e4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c00194d2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00194d9:	83 c8 04             	or     eax,0x4
c00194dc:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c00194e3:	90                   	nop
c00194e4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00194e9:	83 e0 08             	and    eax,0x8
c00194ec:	74 12                	je     c0019500 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c00194ee:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00194f5:	83 c8 02             	or     eax,0x2
c00194f8:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c00194ff:	90                   	nop
c0019500:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019505:	83 e0 01             	and    eax,0x1
c0019508:	74 12                	je     c001951c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c001950a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019511:	83 c8 01             	or     eax,0x1
c0019514:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001951b:	90                   	nop
c001951c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019521:	83 e0 02             	and    eax,0x2
c0019524:	74 12                	je     c0019538 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c0019526:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001952d:	83 c8 20             	or     eax,0x20
c0019530:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019537:	90                   	nop
c0019538:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001953d:	83 e0 04             	and    eax,0x4
c0019540:	74 12                	je     c0019554 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c0019542:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019549:	83 c8 04             	or     eax,0x4
c001954c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019553:	90                   	nop
c0019554:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019559:	83 e0 08             	and    eax,0x8
c001955c:	74 12                	je     c0019570 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c001955e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019565:	83 c8 02             	or     eax,0x2
c0019568:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001956f:	90                   	nop
c0019570:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0019577:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001957e:	09 d0                	or     eax,edx
c0019580:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019587:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001958f:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019597:	83 ec 04             	sub    esp,0x4
c001959a:	52                   	push   edx
c001959b:	50                   	push   eax
c001959c:	8d 44 24 24          	lea    eax,[esp+0x24]
c00195a0:	50                   	push   eax
c00195a1:	e8 ed b8 fe ff       	call   c0004e93 <f_chmod>
c00195a6:	83 c4 10             	add    esp,0x10
c00195a9:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00195b0:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00195b7:	85 c0                	test   eax,eax
c00195b9:	75 09                	jne    c00195c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c00195bb:	b8 00 00 00 00       	mov    eax,0x0
c00195c0:	eb 0a                	jmp    c00195cc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c00195c2:	66 90                	xchg   ax,ax
c00195c4:	b8 01 00 00 00       	mov    eax,0x1
c00195c9:	8d 76 00             	lea    esi,[esi+0x0]
c00195cc:	81 c4 2c 01 00 00    	add    esp,0x12c
c00195d2:	c3                   	ret    
c00195d3:	90                   	nop

c00195d4 <FAT::rename(char const*, char const*)>:
c00195d4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00195da:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00195e2:	74 0c                	je     c00195f0 <FAT::rename(char const*, char const*)+0x1c>
c00195e4:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00195ec:	75 0e                	jne    c00195fc <FAT::rename(char const*, char const*)+0x28>
c00195ee:	66 90                	xchg   ax,ax
c00195f0:	b8 04 00 00 00       	mov    eax,0x4
c00195f5:	e9 9e 00 00 00       	jmp    c0019698 <FAT::rename(char const*, char const*)+0xc4>
c00195fa:	66 90                	xchg   ax,ax
c00195fc:	83 ec 08             	sub    esp,0x8
c00195ff:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019606:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001960d:	50                   	push   eax
c001960e:	e8 3d 70 fe ff       	call   c0000650 <strcpy>
c0019613:	83 c4 10             	add    esp,0x10
c0019616:	83 ec 08             	sub    esp,0x8
c0019619:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019620:	50                   	push   eax
c0019621:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019628:	e8 13 fa ff ff       	call   c0019040 <FAT::fixFilepath(char*)>
c001962d:	83 c4 10             	add    esp,0x10
c0019630:	83 ec 08             	sub    esp,0x8
c0019633:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001963a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001963e:	50                   	push   eax
c001963f:	e8 0c 70 fe ff       	call   c0000650 <strcpy>
c0019644:	83 c4 10             	add    esp,0x10
c0019647:	83 ec 08             	sub    esp,0x8
c001964a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001964e:	50                   	push   eax
c001964f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019656:	e8 e5 f9 ff ff       	call   c0019040 <FAT::fixFilepath(char*)>
c001965b:	83 c4 10             	add    esp,0x10
c001965e:	83 ec 08             	sub    esp,0x8
c0019661:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019665:	50                   	push   eax
c0019666:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001966d:	50                   	push   eax
c001966e:	e8 68 b6 fe ff       	call   c0004cdb <f_rename>
c0019673:	83 c4 10             	add    esp,0x10
c0019676:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001967d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019684:	85 c0                	test   eax,eax
c0019686:	75 08                	jne    c0019690 <FAT::rename(char const*, char const*)+0xbc>
c0019688:	b8 00 00 00 00       	mov    eax,0x0
c001968d:	eb 09                	jmp    c0019698 <FAT::rename(char const*, char const*)+0xc4>
c001968f:	90                   	nop
c0019690:	b8 01 00 00 00       	mov    eax,0x1
c0019695:	8d 76 00             	lea    esi,[esi+0x0]
c0019698:	81 c4 1c 02 00 00    	add    esp,0x21c
c001969e:	c3                   	ret    
c001969f:	90                   	nop

c00196a0 <FAT::mkdir(char const*)>:
c00196a0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00196a6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00196ae:	75 08                	jne    c00196b8 <FAT::mkdir(char const*)+0x18>
c00196b0:	b8 04 00 00 00       	mov    eax,0x4
c00196b5:	eb 61                	jmp    c0019718 <FAT::mkdir(char const*)+0x78>
c00196b7:	90                   	nop
c00196b8:	83 ec 08             	sub    esp,0x8
c00196bb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00196c2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00196c6:	50                   	push   eax
c00196c7:	e8 84 6f fe ff       	call   c0000650 <strcpy>
c00196cc:	83 c4 10             	add    esp,0x10
c00196cf:	83 ec 08             	sub    esp,0x8
c00196d2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00196d6:	50                   	push   eax
c00196d7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00196de:	e8 5d f9 ff ff       	call   c0019040 <FAT::fixFilepath(char*)>
c00196e3:	83 c4 10             	add    esp,0x10
c00196e6:	83 ec 0c             	sub    esp,0xc
c00196e9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00196ed:	50                   	push   eax
c00196ee:	e8 4d b4 fe ff       	call   c0004b40 <f_mkdir>
c00196f3:	83 c4 10             	add    esp,0x10
c00196f6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00196fd:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019704:	85 c0                	test   eax,eax
c0019706:	75 08                	jne    c0019710 <FAT::mkdir(char const*)+0x70>
c0019708:	b8 00 00 00 00       	mov    eax,0x0
c001970d:	eb 09                	jmp    c0019718 <FAT::mkdir(char const*)+0x78>
c001970f:	90                   	nop
c0019710:	b8 01 00 00 00       	mov    eax,0x1
c0019715:	8d 76 00             	lea    esi,[esi+0x0]
c0019718:	81 c4 1c 01 00 00    	add    esp,0x11c
c001971e:	c3                   	ret    
c001971f:	90                   	nop

c0019720 <FAT::exists(char const*)>:
c0019720:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019726:	83 ec 08             	sub    esp,0x8
c0019729:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019730:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019734:	50                   	push   eax
c0019735:	e8 16 6f fe ff       	call   c0000650 <strcpy>
c001973a:	83 c4 10             	add    esp,0x10
c001973d:	83 ec 08             	sub    esp,0x8
c0019740:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019744:	50                   	push   eax
c0019745:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001974c:	e8 ef f8 ff ff       	call   c0019040 <FAT::fixFilepath(char*)>
c0019751:	83 c4 10             	add    esp,0x10
c0019754:	83 ec 08             	sub    esp,0x8
c0019757:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001975e:	50                   	push   eax
c001975f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019763:	50                   	push   eax
c0019764:	e8 45 b0 fe ff       	call   c00047ae <f_stat>
c0019769:	83 c4 10             	add    esp,0x10
c001976c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019773:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001977a:	85 c0                	test   eax,eax
c001977c:	75 06                	jne    c0019784 <FAT::exists(char const*)+0x64>
c001977e:	b0 01                	mov    al,0x1
c0019780:	eb 06                	jmp    c0019788 <FAT::exists(char const*)+0x68>
c0019782:	66 90                	xchg   ax,ax
c0019784:	b0 00                	mov    al,0x0
c0019786:	66 90                	xchg   ax,ax
c0019788:	81 c4 2c 02 00 00    	add    esp,0x22c
c001978e:	c3                   	ret    
c001978f:	90                   	nop

c0019790 <isoReadDiscSectorHelper>:
c0019790:	83 ec 2c             	sub    esp,0x2c
c0019793:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019797:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001979b:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00197a0:	83 e8 41             	sub    eax,0x41
c00197a3:	8b 0c 85 20 84 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7be0]
c00197aa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00197ae:	ba 00 00 00 00       	mov    edx,0x0
c00197b3:	83 ec 0c             	sub    esp,0xc
c00197b6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00197ba:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00197be:	52                   	push   edx
c00197bf:	50                   	push   eax
c00197c0:	51                   	push   ecx
c00197c1:	e8 ac 3c ff ff       	call   c000d472 <LogicalDisk::read(unsigned long long, int, void*)>
c00197c6:	83 c4 20             	add    esp,0x20
c00197c9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00197cd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00197d2:	74 0c                	je     c00197e0 <isoReadDiscSectorHelper+0x50>
c00197d4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00197d8:	c1 e0 0b             	shl    eax,0xb
c00197db:	eb 0b                	jmp    c00197e8 <isoReadDiscSectorHelper+0x58>
c00197dd:	8d 76 00             	lea    esi,[esi+0x0]
c00197e0:	b8 00 00 00 00       	mov    eax,0x0
c00197e5:	8d 76 00             	lea    esi,[esi+0x0]
c00197e8:	83 c4 2c             	add    esp,0x2c
c00197eb:	c3                   	ret    

c00197ec <iso_kprintf>:
c00197ec:	83 ec 0c             	sub    esp,0xc
c00197ef:	83 ec 08             	sub    esp,0x8
c00197f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00197f6:	68 96 1d 02 c0       	push   0xc0021d96
c00197fb:	e8 fe 10 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0019800:	83 c4 10             	add    esp,0x10
c0019803:	90                   	nop
c0019804:	83 c4 0c             	add    esp,0xc
c0019807:	c3                   	ret    

c0019808 <iso_kprintfd>:
c0019808:	83 ec 0c             	sub    esp,0xc
c001980b:	83 ec 08             	sub    esp,0x8
c001980e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019812:	68 fa 06 02 c0       	push   0xc00206fa
c0019817:	e8 e2 10 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c001981c:	83 c4 10             	add    esp,0x10
c001981f:	90                   	nop
c0019820:	83 c4 0c             	add    esp,0xc
c0019823:	c3                   	ret    

c0019824 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019824:	b8 08 00 00 00       	mov    eax,0x8
c0019829:	c3                   	ret    

c001982a <ISO9660::truncate(void*, unsigned long long)>:
c001982a:	b8 01 00 00 00       	mov    eax,0x1
c001982f:	c3                   	ret    

c0019830 <ISO9660::getName()>:
c0019830:	b8 4c 20 02 c0       	mov    eax,0xc002204c
c0019835:	c3                   	ret    

c0019836 <ISO9660::closeDir(void*)>:
c0019836:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001983a:	8b 00                	mov    eax,DWORD PTR [eax]
c001983c:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001983f:	90                   	nop

c0019840 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0019840:	b8 01 00 00 00       	mov    eax,0x1
c0019845:	c3                   	ret    

c0019846 <ISO9660::unlink(char const*)>:
c0019846:	b8 01 00 00 00       	mov    eax,0x1
c001984b:	c3                   	ret    

c001984c <ISO9660::write(void*, unsigned long, void*, int*)>:
c001984c:	b8 03 00 00 00       	mov    eax,0x3
c0019851:	c3                   	ret    

c0019852 <ISO9660::rename(char const*, char const*)>:
c0019852:	b8 01 00 00 00       	mov    eax,0x1
c0019857:	c3                   	ret    

c0019858 <ISO9660::mkdir(char const*)>:
c0019858:	b8 01 00 00 00       	mov    eax,0x1
c001985d:	c3                   	ret    

c001985e <ISO9660::~ISO9660()>:
c001985e:	83 ec 0c             	sub    esp,0xc
c0019861:	ba 8c 21 02 c0       	mov    edx,0xc002218c
c0019866:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001986a:	89 10                	mov    DWORD PTR [eax],edx
c001986c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019870:	83 ec 0c             	sub    esp,0xc
c0019873:	50                   	push   eax
c0019874:	e8 9f 16 ff ff       	call   c000af18 <Filesystem::~Filesystem()>
c0019879:	83 c4 10             	add    esp,0x10
c001987c:	90                   	nop
c001987d:	83 c4 0c             	add    esp,0xc
c0019880:	c3                   	ret    
c0019881:	90                   	nop

c0019882 <ISO9660::~ISO9660()>:
c0019882:	83 ec 0c             	sub    esp,0xc
c0019885:	83 ec 0c             	sub    esp,0xc
c0019888:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001988c:	e8 cd ff ff ff       	call   c001985e <ISO9660::~ISO9660()>
c0019891:	83 c4 10             	add    esp,0x10
c0019894:	83 ec 08             	sub    esp,0x8
c0019897:	6a 08                	push   0x8
c0019899:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001989d:	e8 5e 0f ff ff       	call   c000a800 <operator delete(void*, unsigned long)>
c00198a2:	83 c4 10             	add    esp,0x10
c00198a5:	83 c4 0c             	add    esp,0xc
c00198a8:	c3                   	ret    
c00198a9:	90                   	nop

c00198aa <ISO9660::exists(char const*)>:
c00198aa:	83 ec 18             	sub    esp,0x18
c00198ad:	68 67 20 02 c0       	push   0xc0022067
c00198b2:	e8 ba 72 ff ff       	call   c0010b71 <KePanic(char const*)>
c00198b7:	31 c0                	xor    eax,eax
c00198b9:	83 c4 1c             	add    esp,0x1c
c00198bc:	c3                   	ret    
c00198bd:	90                   	nop

c00198be <ISO9660::open(char const*, void**, FileOpenMode)>:
c00198be:	56                   	push   esi
c00198bf:	53                   	push   ebx
c00198c0:	53                   	push   ebx
c00198c1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00198c5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00198c9:	85 db                	test   ebx,ebx
c00198cb:	0f 84 ca 00 00 00    	je     c001999b <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c00198d1:	85 f6                	test   esi,esi
c00198d3:	0f 84 c2 00 00 00    	je     c001999b <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c00198d9:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c00198de:	b8 03 00 00 00       	mov    eax,0x3
c00198e3:	0f 85 b7 00 00 00    	jne    c00199a0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c00198e9:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00198eb:	38 0d 20 93 02 c0    	cmp    BYTE PTR ds:0xc0029320,cl
c00198f1:	0f be 05 20 93 02 c0 	movsx  eax,BYTE PTR ds:0xc0029320
c00198f8:	74 1b                	je     c0019915 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c00198fa:	85 c0                	test   eax,eax
c00198fc:	74 10                	je     c001990e <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c00198fe:	83 ec 0c             	sub    esp,0xc
c0019901:	68 85 20 02 c0       	push   0xc0022085
c0019906:	e8 66 72 ff ff       	call   c0010b71 <KePanic(char const*)>
c001990b:	83 c4 10             	add    esp,0x10
c001990e:	8a 03                	mov    al,BYTE PTR [ebx]
c0019910:	a2 20 93 02 c0       	mov    ds:0xc0029320,al
c0019915:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019918:	8b 04 85 1c 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ce4]
c001991f:	85 c0                	test   eax,eax
c0019921:	74 09                	je     c001992c <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c0019923:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001992a:	74 48                	je     c0019974 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001992c:	83 ec 0c             	sub    esp,0xc
c001992f:	68 95 20 02 c0       	push   0xc0022095
c0019934:	e8 c5 0f ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0019939:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001993c:	83 c4 10             	add    esp,0x10
c001993f:	8b 04 85 1c 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ce4]
c0019946:	85 c0                	test   eax,eax
c0019948:	74 17                	je     c0019961 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001994a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019951:	83 ec 0c             	sub    esp,0xc
c0019954:	68 b5 20 02 c0       	push   0xc00220b5
c0019959:	e8 a0 0f ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c001995e:	83 c4 10             	add    esp,0x10
c0019961:	0f be 05 20 93 02 c0 	movsx  eax,BYTE PTR ds:0xc0029320
c0019968:	83 ec 0c             	sub    esp,0xc
c001996b:	50                   	push   eax
c001996c:	e8 f6 d0 fe ff       	call   c0006a67 <init_percd>
c0019971:	83 c4 10             	add    esp,0x10
c0019974:	51                   	push   ecx
c0019975:	83 c3 03             	add    ebx,0x3
c0019978:	51                   	push   ecx
c0019979:	6a 00                	push   0x0
c001997b:	53                   	push   ebx
c001997c:	e8 a9 cb fe ff       	call   c000652a <iso_open>
c0019981:	83 c4 10             	add    esp,0x10
c0019984:	89 c2                	mov    edx,eax
c0019986:	b8 01 00 00 00       	mov    eax,0x1
c001998b:	83 fa ff             	cmp    edx,0xffffffff
c001998e:	74 10                	je     c00199a0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019990:	83 c2 32             	add    edx,0x32
c0019993:	31 c0                	xor    eax,eax
c0019995:	01 d2                	add    edx,edx
c0019997:	89 16                	mov    DWORD PTR [esi],edx
c0019999:	eb 05                	jmp    c00199a0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001999b:	b8 04 00 00 00       	mov    eax,0x4
c00199a0:	5a                   	pop    edx
c00199a1:	5b                   	pop    ebx
c00199a2:	5e                   	pop    esi
c00199a3:	c3                   	ret    

c00199a4 <ISO9660::read(void*, unsigned long, void*, int*)>:
c00199a4:	53                   	push   ebx
c00199a5:	83 ec 08             	sub    esp,0x8
c00199a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00199ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00199b0:	85 c0                	test   eax,eax
c00199b2:	74 2d                	je     c00199e1 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c00199b4:	85 db                	test   ebx,ebx
c00199b6:	74 29                	je     c00199e1 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c00199b8:	52                   	push   edx
c00199b9:	b9 02 00 00 00       	mov    ecx,0x2
c00199be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00199c2:	99                   	cdq    
c00199c3:	f7 f9                	idiv   ecx
c00199c5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00199c9:	83 e8 32             	sub    eax,0x32
c00199cc:	50                   	push   eax
c00199cd:	e8 00 cc fe ff       	call   c00065d2 <iso_read>
c00199d2:	83 c4 10             	add    esp,0x10
c00199d5:	89 03                	mov    DWORD PTR [ebx],eax
c00199d7:	09 d0                	or     eax,edx
c00199d9:	0f 94 c0             	sete   al
c00199dc:	0f b6 c0             	movzx  eax,al
c00199df:	eb 05                	jmp    c00199e6 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c00199e1:	b8 04 00 00 00       	mov    eax,0x4
c00199e6:	83 c4 08             	add    esp,0x8
c00199e9:	5b                   	pop    ebx
c00199ea:	c3                   	ret    
c00199eb:	90                   	nop

c00199ec <ISO9660::seek(void*, unsigned long long)>:
c00199ec:	57                   	push   edi
c00199ed:	b8 04 00 00 00       	mov    eax,0x4
c00199f2:	56                   	push   esi
c00199f3:	51                   	push   ecx
c00199f4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00199f8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00199fc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019a00:	85 d2                	test   edx,edx
c0019a02:	74 26                	je     c0019a2a <ISO9660::seek(void*, unsigned long long)+0x3e>
c0019a04:	89 d0                	mov    eax,edx
c0019a06:	b9 02 00 00 00       	mov    ecx,0x2
c0019a0b:	6a 00                	push   0x0
c0019a0d:	99                   	cdq    
c0019a0e:	f7 f9                	idiv   ecx
c0019a10:	57                   	push   edi
c0019a11:	56                   	push   esi
c0019a12:	83 e8 32             	sub    eax,0x32
c0019a15:	50                   	push   eax
c0019a16:	e8 cd cc fe ff       	call   c00066e8 <iso_seek>
c0019a1b:	83 c4 10             	add    esp,0x10
c0019a1e:	31 f0                	xor    eax,esi
c0019a20:	31 fa                	xor    edx,edi
c0019a22:	09 d0                	or     eax,edx
c0019a24:	0f 95 c0             	setne  al
c0019a27:	0f b6 c0             	movzx  eax,al
c0019a2a:	5a                   	pop    edx
c0019a2b:	5e                   	pop    esi
c0019a2c:	5f                   	pop    edi
c0019a2d:	c3                   	ret    

c0019a2e <ISO9660::tell(void*, unsigned long long*)>:
c0019a2e:	53                   	push   ebx
c0019a2f:	83 ec 08             	sub    esp,0x8
c0019a32:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019a36:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019a3a:	85 c0                	test   eax,eax
c0019a3c:	74 24                	je     c0019a62 <ISO9660::tell(void*, unsigned long long*)+0x34>
c0019a3e:	85 db                	test   ebx,ebx
c0019a40:	74 20                	je     c0019a62 <ISO9660::tell(void*, unsigned long long*)+0x34>
c0019a42:	b9 02 00 00 00       	mov    ecx,0x2
c0019a47:	99                   	cdq    
c0019a48:	f7 f9                	idiv   ecx
c0019a4a:	83 ec 0c             	sub    esp,0xc
c0019a4d:	83 e8 32             	sub    eax,0x32
c0019a50:	50                   	push   eax
c0019a51:	e8 16 cd fe ff       	call   c000676c <iso_tell>
c0019a56:	83 c4 10             	add    esp,0x10
c0019a59:	89 03                	mov    DWORD PTR [ebx],eax
c0019a5b:	31 c0                	xor    eax,eax
c0019a5d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0019a60:	eb 05                	jmp    c0019a67 <ISO9660::tell(void*, unsigned long long*)+0x39>
c0019a62:	b8 04 00 00 00       	mov    eax,0x4
c0019a67:	83 c4 08             	add    esp,0x8
c0019a6a:	5b                   	pop    ebx
c0019a6b:	c3                   	ret    

c0019a6c <ISO9660::stat(void*, unsigned long long*)>:
c0019a6c:	56                   	push   esi
c0019a6d:	53                   	push   ebx
c0019a6e:	83 ec 10             	sub    esp,0x10
c0019a71:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019a75:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0019a79:	68 d9 20 02 c0       	push   0xc00220d9
c0019a7e:	e8 7b 0e ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0019a83:	83 c4 10             	add    esp,0x10
c0019a86:	85 db                	test   ebx,ebx
c0019a88:	74 2a                	je     c0019ab4 <ISO9660::stat(void*, unsigned long long*)+0x48>
c0019a8a:	85 f6                	test   esi,esi
c0019a8c:	74 26                	je     c0019ab4 <ISO9660::stat(void*, unsigned long long*)+0x48>
c0019a8e:	89 d8                	mov    eax,ebx
c0019a90:	b9 02 00 00 00       	mov    ecx,0x2
c0019a95:	99                   	cdq    
c0019a96:	83 ec 0c             	sub    esp,0xc
c0019a99:	f7 f9                	idiv   ecx
c0019a9b:	83 e8 32             	sub    eax,0x32
c0019a9e:	50                   	push   eax
c0019a9f:	e8 f9 cc fe ff       	call   c000679d <iso_total>
c0019aa4:	83 c4 10             	add    esp,0x10
c0019aa7:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0019aae:	89 06                	mov    DWORD PTR [esi],eax
c0019ab0:	31 c0                	xor    eax,eax
c0019ab2:	eb 05                	jmp    c0019ab9 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c0019ab4:	b8 04 00 00 00       	mov    eax,0x4
c0019ab9:	5a                   	pop    edx
c0019aba:	5b                   	pop    ebx
c0019abb:	5e                   	pop    esi
c0019abc:	c3                   	ret    
c0019abd:	90                   	nop

c0019abe <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0019abe:	55                   	push   ebp
c0019abf:	57                   	push   edi
c0019ac0:	56                   	push   esi
c0019ac1:	53                   	push   ebx
c0019ac2:	83 ec 18             	sub    esp,0x18
c0019ac5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0019ac9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0019acd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019ad1:	68 e1 20 02 c0       	push   0xc00220e1
c0019ad6:	e8 23 0e ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0019adb:	83 c4 10             	add    esp,0x10
c0019ade:	85 ff                	test   edi,edi
c0019ae0:	0f 94 c0             	sete   al
c0019ae3:	85 f6                	test   esi,esi
c0019ae5:	0f 94 c2             	sete   dl
c0019ae8:	09 d0                	or     eax,edx
c0019aea:	a8 01                	test   al,0x1
c0019aec:	0f 85 dd 00 00 00    	jne    c0019bcf <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c0019af2:	85 db                	test   ebx,ebx
c0019af4:	0f 84 d5 00 00 00    	je     c0019bcf <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c0019afa:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0019afd:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0019b03:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0019b0a:	0f be 05 20 93 02 c0 	movsx  eax,BYTE PTR ds:0xc0029320
c0019b11:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0019b13:	38 0d 20 93 02 c0    	cmp    BYTE PTR ds:0xc0029320,cl
c0019b19:	74 1b                	je     c0019b36 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c0019b1b:	85 c0                	test   eax,eax
c0019b1d:	74 10                	je     c0019b2f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c0019b1f:	83 ec 0c             	sub    esp,0xc
c0019b22:	68 85 20 02 c0       	push   0xc0022085
c0019b27:	e8 45 70 ff ff       	call   c0010b71 <KePanic(char const*)>
c0019b2c:	83 c4 10             	add    esp,0x10
c0019b2f:	8a 03                	mov    al,BYTE PTR [ebx]
c0019b31:	a2 20 93 02 c0       	mov    ds:0xc0029320,al
c0019b36:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019b39:	8b 04 85 1c 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ce4]
c0019b40:	85 c0                	test   eax,eax
c0019b42:	74 09                	je     c0019b4d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c0019b44:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019b4b:	74 51                	je     c0019b9e <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019b4d:	83 ec 0c             	sub    esp,0xc
c0019b50:	68 e9 20 02 c0       	push   0xc00220e9
c0019b55:	e8 a4 0d ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0019b5a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019b5d:	83 c4 10             	add    esp,0x10
c0019b60:	83 3c 85 1c 83 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd7ce4],0x0
c0019b68:	74 21                	je     c0019b8b <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c0019b6a:	83 ec 0c             	sub    esp,0xc
c0019b6d:	68 09 21 02 c0       	push   0xc0022109
c0019b72:	e8 87 0d ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0019b77:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019b7a:	83 c4 10             	add    esp,0x10
c0019b7d:	8b 04 85 1c 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ce4]
c0019b84:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019b8b:	0f be 05 20 93 02 c0 	movsx  eax,BYTE PTR ds:0xc0029320
c0019b92:	83 ec 0c             	sub    esp,0xc
c0019b95:	50                   	push   eax
c0019b96:	e8 cc ce fe ff       	call   c0006a67 <init_percd>
c0019b9b:	83 c4 10             	add    esp,0x10
c0019b9e:	52                   	push   edx
c0019b9f:	83 c3 03             	add    ebx,0x3
c0019ba2:	52                   	push   edx
c0019ba3:	6a 00                	push   0x0
c0019ba5:	53                   	push   ebx
c0019ba6:	e8 7f c9 fe ff       	call   c000652a <iso_open>
c0019bab:	83 c4 10             	add    esp,0x10
c0019bae:	83 f8 ff             	cmp    eax,0xffffffff
c0019bb1:	89 c5                	mov    ebp,eax
c0019bb3:	75 21                	jne    c0019bd6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c0019bb5:	50                   	push   eax
c0019bb6:	50                   	push   eax
c0019bb7:	6a 01                	push   0x1
c0019bb9:	53                   	push   ebx
c0019bba:	e8 6b c9 fe ff       	call   c000652a <iso_open>
c0019bbf:	83 c4 10             	add    esp,0x10
c0019bc2:	ba 02 00 00 00       	mov    edx,0x2
c0019bc7:	40                   	inc    eax
c0019bc8:	74 2b                	je     c0019bf5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0019bca:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0019bcd:	eb 24                	jmp    c0019bf3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c0019bcf:	ba 04 00 00 00       	mov    edx,0x4
c0019bd4:	eb 1f                	jmp    c0019bf5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0019bd6:	83 ec 0c             	sub    esp,0xc
c0019bd9:	50                   	push   eax
c0019bda:	e8 be cb fe ff       	call   c000679d <iso_total>
c0019bdf:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0019be6:	89 07                	mov    DWORD PTR [edi],eax
c0019be8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019beb:	e8 c4 c9 fe ff       	call   c00065b4 <iso_close>
c0019bf0:	83 c4 10             	add    esp,0x10
c0019bf3:	31 d2                	xor    edx,edx
c0019bf5:	83 c4 0c             	add    esp,0xc
c0019bf8:	89 d0                	mov    eax,edx
c0019bfa:	5b                   	pop    ebx
c0019bfb:	5e                   	pop    esi
c0019bfc:	5f                   	pop    edi
c0019bfd:	5d                   	pop    ebp
c0019bfe:	c3                   	ret    
c0019bff:	90                   	nop

c0019c00 <ISO9660::close(void*)>:
c0019c00:	83 ec 0c             	sub    esp,0xc
c0019c03:	b8 04 00 00 00       	mov    eax,0x4
c0019c08:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019c0c:	85 d2                	test   edx,edx
c0019c0e:	74 1b                	je     c0019c2b <ISO9660::close(void*)+0x2b>
c0019c10:	89 d0                	mov    eax,edx
c0019c12:	b9 02 00 00 00       	mov    ecx,0x2
c0019c17:	99                   	cdq    
c0019c18:	83 ec 0c             	sub    esp,0xc
c0019c1b:	f7 f9                	idiv   ecx
c0019c1d:	83 e8 32             	sub    eax,0x32
c0019c20:	50                   	push   eax
c0019c21:	e8 8e c9 fe ff       	call   c00065b4 <iso_close>
c0019c26:	83 c4 10             	add    esp,0x10
c0019c29:	31 c0                	xor    eax,eax
c0019c2b:	83 c4 0c             	add    esp,0xc
c0019c2e:	c3                   	ret    
c0019c2f:	90                   	nop

c0019c30 <ISO9660::openDir(char const*, void**)>:
c0019c30:	56                   	push   esi
c0019c31:	53                   	push   ebx
c0019c32:	50                   	push   eax
c0019c33:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019c37:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019c3b:	85 db                	test   ebx,ebx
c0019c3d:	0f 84 bd 00 00 00    	je     c0019d00 <ISO9660::openDir(char const*, void**)+0xd0>
c0019c43:	85 f6                	test   esi,esi
c0019c45:	0f 84 b5 00 00 00    	je     c0019d00 <ISO9660::openDir(char const*, void**)+0xd0>
c0019c4b:	8a 13                	mov    dl,BYTE PTR [ebx]
c0019c4d:	38 15 20 93 02 c0    	cmp    BYTE PTR ds:0xc0029320,dl
c0019c53:	0f be 05 20 93 02 c0 	movsx  eax,BYTE PTR ds:0xc0029320
c0019c5a:	74 1b                	je     c0019c77 <ISO9660::openDir(char const*, void**)+0x47>
c0019c5c:	85 c0                	test   eax,eax
c0019c5e:	74 10                	je     c0019c70 <ISO9660::openDir(char const*, void**)+0x40>
c0019c60:	83 ec 0c             	sub    esp,0xc
c0019c63:	68 85 20 02 c0       	push   0xc0022085
c0019c68:	e8 04 6f ff ff       	call   c0010b71 <KePanic(char const*)>
c0019c6d:	83 c4 10             	add    esp,0x10
c0019c70:	8a 03                	mov    al,BYTE PTR [ebx]
c0019c72:	a2 20 93 02 c0       	mov    ds:0xc0029320,al
c0019c77:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019c7a:	8b 04 85 1c 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ce4]
c0019c81:	85 c0                	test   eax,eax
c0019c83:	74 10                	je     c0019c95 <ISO9660::openDir(char const*, void**)+0x65>
c0019c85:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019c8c:	74 1a                	je     c0019ca8 <ISO9660::openDir(char const*, void**)+0x78>
c0019c8e:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019c95:	0f be 05 20 93 02 c0 	movsx  eax,BYTE PTR ds:0xc0029320
c0019c9c:	83 ec 0c             	sub    esp,0xc
c0019c9f:	50                   	push   eax
c0019ca0:	e8 c2 cd fe ff       	call   c0006a67 <init_percd>
c0019ca5:	83 c4 10             	add    esp,0x10
c0019ca8:	50                   	push   eax
c0019ca9:	83 c3 03             	add    ebx,0x3
c0019cac:	50                   	push   eax
c0019cad:	6a 01                	push   0x1
c0019caf:	53                   	push   ebx
c0019cb0:	e8 75 c8 fe ff       	call   c000652a <iso_open>
c0019cb5:	83 c4 10             	add    esp,0x10
c0019cb8:	83 f8 ff             	cmp    eax,0xffffffff
c0019cbb:	89 c3                	mov    ebx,eax
c0019cbd:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0019cc2:	75 1c                	jne    c0019ce0 <ISO9660::openDir(char const*, void**)+0xb0>
c0019cc4:	53                   	push   ebx
c0019cc5:	53                   	push   ebx
c0019cc6:	68 2d 21 02 c0       	push   0xc002212d
c0019ccb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019cd1:	e8 c8 ed fe ff       	call   c0008a9e <VgaText::puts(char const*)>
c0019cd6:	83 c4 10             	add    esp,0x10
c0019cd9:	b8 01 00 00 00       	mov    eax,0x1
c0019cde:	eb 25                	jmp    c0019d05 <ISO9660::openDir(char const*, void**)+0xd5>
c0019ce0:	51                   	push   ecx
c0019ce1:	01 db                	add    ebx,ebx
c0019ce3:	51                   	push   ecx
c0019ce4:	83 c3 65             	add    ebx,0x65
c0019ce7:	68 40 21 02 c0       	push   0xc0022140
c0019cec:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019cf2:	e8 a7 ed fe ff       	call   c0008a9e <VgaText::puts(char const*)>
c0019cf7:	83 c4 10             	add    esp,0x10
c0019cfa:	31 c0                	xor    eax,eax
c0019cfc:	89 1e                	mov    DWORD PTR [esi],ebx
c0019cfe:	eb 05                	jmp    c0019d05 <ISO9660::openDir(char const*, void**)+0xd5>
c0019d00:	b8 04 00 00 00       	mov    eax,0x4
c0019d05:	5a                   	pop    edx
c0019d06:	5b                   	pop    ebx
c0019d07:	5e                   	pop    esi
c0019d08:	c3                   	ret    
c0019d09:	90                   	nop

c0019d0a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0019d0a:	55                   	push   ebp
c0019d0b:	57                   	push   edi
c0019d0c:	56                   	push   esi
c0019d0d:	53                   	push   ebx
c0019d0e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019d14:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c0019d1b:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0019d22:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c0019d29:	85 db                	test   ebx,ebx
c0019d2b:	0f 84 e4 00 00 00    	je     c0019e15 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c0019d31:	85 ed                	test   ebp,ebp
c0019d33:	0f 84 dc 00 00 00    	je     c0019e15 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c0019d39:	83 ec 0c             	sub    esp,0xc
c0019d3c:	68 53 21 02 c0       	push   0xc0022153
c0019d41:	e8 b8 0b ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0019d46:	89 d8                	mov    eax,ebx
c0019d48:	b9 02 00 00 00       	mov    ecx,0x2
c0019d4d:	99                   	cdq    
c0019d4e:	f7 f9                	idiv   ecx
c0019d50:	83 e8 32             	sub    eax,0x32
c0019d53:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d56:	e8 94 ca fe ff       	call   c00067ef <iso_readdir>
c0019d5b:	83 c4 10             	add    esp,0x10
c0019d5e:	85 c0                	test   eax,eax
c0019d60:	89 c3                	mov    ebx,eax
c0019d62:	75 38                	jne    c0019d9c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c0019d64:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0019d69:	53                   	push   ebx
c0019d6a:	53                   	push   ebx
c0019d6b:	68 5e 21 02 c0       	push   0xc002215e
c0019d70:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019d76:	e8 23 ed fe ff       	call   c0008a9e <VgaText::puts(char const*)>
c0019d7b:	83 c4 0c             	add    esp,0xc
c0019d7e:	68 10 01 00 00       	push   0x110
c0019d83:	6a 00                	push   0x0
c0019d85:	57                   	push   edi
c0019d86:	e8 65 67 fe ff       	call   c00004f0 <memset>
c0019d8b:	83 c4 10             	add    esp,0x10
c0019d8e:	b8 01 00 00 00       	mov    eax,0x1
c0019d93:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c0019d9a:	eb 7e                	jmp    c0019e1a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c0019d9c:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0019da2:	8d 70 08             	lea    esi,[eax+0x8]
c0019da5:	83 ec 0c             	sub    esp,0xc
c0019da8:	56                   	push   esi
c0019da9:	e8 d2 67 fe ff       	call   c0000580 <strlen>
c0019dae:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0019db6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019dba:	83 c4 10             	add    esp,0x10
c0019dbd:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c0019dc1:	75 0a                	jne    c0019dcd <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c0019dc3:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c0019dc6:	b8 02 00 00 00       	mov    eax,0x2
c0019dcb:	74 05                	je     c0019dd2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c0019dcd:	b8 01 00 00 00       	mov    eax,0x1
c0019dd2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019dd6:	50                   	push   eax
c0019dd7:	50                   	push   eax
c0019dd8:	56                   	push   esi
c0019dd9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019ddd:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0019de1:	50                   	push   eax
c0019de2:	e8 69 68 fe ff       	call   c0000650 <strcpy>
c0019de7:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0019dee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019df0:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c0019df7:	5a                   	pop    edx
c0019df8:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0019dfd:	59                   	pop    ecx
c0019dfe:	68 71 21 02 c0       	push   0xc0022171
c0019e03:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019e09:	e8 90 ec fe ff       	call   c0008a9e <VgaText::puts(char const*)>
c0019e0e:	83 c4 10             	add    esp,0x10
c0019e11:	31 c0                	xor    eax,eax
c0019e13:	eb 05                	jmp    c0019e1a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c0019e15:	b8 04 00 00 00       	mov    eax,0x4
c0019e1a:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019e20:	5b                   	pop    ebx
c0019e21:	5e                   	pop    esi
c0019e22:	5f                   	pop    edi
c0019e23:	5d                   	pop    ebp
c0019e24:	c3                   	ret    

c0019e25 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0019e25:	57                   	push   edi
c0019e26:	56                   	push   esi
c0019e27:	53                   	push   ebx
c0019e28:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019e2c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019e30:	39 35 24 93 02 c0    	cmp    DWORD PTR ds:0xc0029324,esi
c0019e36:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019e3a:	0f be cb             	movsx  ecx,bl
c0019e3d:	75 0b                	jne    c0019e4a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c0019e3f:	0f be 05 a0 2f 02 c0 	movsx  eax,BYTE PTR ds:0xc0022fa0
c0019e46:	39 c8                	cmp    eax,ecx
c0019e48:	74 47                	je     c0019e91 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0019e4a:	83 ec 0c             	sub    esp,0xc
c0019e4d:	31 d2                	xor    edx,edx
c0019e4f:	68 40 93 02 c0       	push   0xc0029340
c0019e54:	6a 01                	push   0x1
c0019e56:	52                   	push   edx
c0019e57:	56                   	push   esi
c0019e58:	ff 34 8d 1c 83 02 c0 	push   DWORD PTR [ecx*4-0x3ffd7ce4]
c0019e5f:	e8 0e 36 ff ff       	call   c000d472 <LogicalDisk::read(unsigned long long, int, void*)>
c0019e64:	83 c4 20             	add    esp,0x20
c0019e67:	85 c0                	test   eax,eax
c0019e69:	75 0e                	jne    c0019e79 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c0019e6b:	89 35 24 93 02 c0    	mov    DWORD PTR ds:0xc0029324,esi
c0019e71:	88 1d a0 2f 02 c0    	mov    BYTE PTR ds:0xc0022fa0,bl
c0019e77:	eb 18                	jmp    c0019e91 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0019e79:	50                   	push   eax
c0019e7a:	68 00 08 00 00       	push   0x800
c0019e7f:	6a 00                	push   0x0
c0019e81:	57                   	push   edi
c0019e82:	e8 69 66 fe ff       	call   c00004f0 <memset>
c0019e87:	83 c4 10             	add    esp,0x10
c0019e8a:	b8 01 00 00 00       	mov    eax,0x1
c0019e8f:	eb 0e                	jmp    c0019e9f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c0019e91:	be 40 93 02 c0       	mov    esi,0xc0029340
c0019e96:	b9 00 08 00 00       	mov    ecx,0x800
c0019e9b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019e9d:	31 c0                	xor    eax,eax
c0019e9f:	5b                   	pop    ebx
c0019ea0:	5e                   	pop    esi
c0019ea1:	5f                   	pop    edi
c0019ea2:	c3                   	ret    
c0019ea3:	90                   	nop

c0019ea4 <ISO9660::tryMount(LogicalDisk*, int)>:
c0019ea4:	53                   	push   ebx
c0019ea5:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0019eab:	c7 05 24 93 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0029324,0xdeadbeef
c0019eb5:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c0019ebc:	8d 58 41             	lea    ebx,[eax+0x41]
c0019ebf:	0f be db             	movsx  ebx,bl
c0019ec2:	53                   	push   ebx
c0019ec3:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019ec7:	50                   	push   eax
c0019ec8:	6a 10                	push   0x10
c0019eca:	e8 56 ff ff ff       	call   c0019e25 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0019ecf:	83 c4 10             	add    esp,0x10
c0019ed2:	31 d2                	xor    edx,edx
c0019ed4:	85 c0                	test   eax,eax
c0019ed6:	75 33                	jne    c0019f0b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019ed8:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0019edd:	75 2c                	jne    c0019f0b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019edf:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0019ee4:	75 25                	jne    c0019f0b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019ee6:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0019eeb:	75 1e                	jne    c0019f0b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019eed:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0019ef2:	75 17                	jne    c0019f0b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019ef4:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0019ef9:	75 10                	jne    c0019f0b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019efb:	83 ec 0c             	sub    esp,0xc
c0019efe:	53                   	push   ebx
c0019eff:	e8 63 cb fe ff       	call   c0006a67 <init_percd>
c0019f04:	83 c4 10             	add    esp,0x10
c0019f07:	40                   	inc    eax
c0019f08:	0f 95 c2             	setne  dl
c0019f0b:	81 c4 08 08 00 00    	add    esp,0x808
c0019f11:	88 d0                	mov    al,dl
c0019f13:	5b                   	pop    ebx
c0019f14:	c3                   	ret    
c0019f15:	90                   	nop

c0019f16 <ISO9660::ISO9660()>:
c0019f16:	83 ec 0c             	sub    esp,0xc
c0019f19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f1d:	83 ec 0c             	sub    esp,0xc
c0019f20:	50                   	push   eax
c0019f21:	e8 ce 0f ff ff       	call   c000aef4 <Filesystem::Filesystem()>
c0019f26:	83 c4 10             	add    esp,0x10
c0019f29:	ba 8c 21 02 c0       	mov    edx,0xc002218c
c0019f2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f32:	89 10                	mov    DWORD PTR [eax],edx
c0019f34:	e8 40 cc fe ff       	call   c0006b79 <fs_iso9660_init>
c0019f39:	90                   	nop
c0019f3a:	83 c4 0c             	add    esp,0xc
c0019f3d:	c3                   	ret    

c0019f3e <SoundCard::beginPlayback()>:
c0019f3e:	c7 44 24 04 f0 21 02 c0 	mov    DWORD PTR [esp+0x4],0xc00221f0
c0019f46:	e9 26 6c ff ff       	jmp    c0010b71 <KePanic(char const*)>
c0019f4b:	90                   	nop

c0019f4c <SoundCard::stopPlayback()>:
c0019f4c:	c7 44 24 04 f0 21 02 c0 	mov    DWORD PTR [esp+0x4],0xc00221f0
c0019f54:	e9 18 6c ff ff       	jmp    c0010b71 <KePanic(char const*)>
c0019f59:	90                   	nop

c0019f5a <SoundCard::SoundCard(char const*)>:
c0019f5a:	83 ec 1c             	sub    esp,0x1c
c0019f5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019f61:	83 ec 08             	sub    esp,0x8
c0019f64:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019f68:	50                   	push   eax
c0019f69:	e8 b2 22 ff ff       	call   c000c220 <Device::Device(char const*)>
c0019f6e:	83 c4 10             	add    esp,0x10
c0019f71:	ba 3c 22 02 c0       	mov    edx,0xc002223c
c0019f76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019f7a:	89 10                	mov    DWORD PTR [eax],edx
c0019f7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019f80:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019f87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019f8b:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0019f95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019f99:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0019fa3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019fa7:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0019fb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019fb5:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0019fbf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019fc7:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0019fcc:	7f 1a                	jg     c0019fe8 <SoundCard::SoundCard(char const*)+0x8e>
c0019fce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019fd2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019fd6:	83 c2 54             	add    edx,0x54
c0019fd9:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0019fe1:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019fe6:	eb df                	jmp    c0019fc7 <SoundCard::SoundCard(char const*)+0x6d>
c0019fe8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019fec:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019ff3:	90                   	nop
c0019ff4:	83 c4 1c             	add    esp,0x1c
c0019ff7:	c3                   	ret    

c0019ff8 <SoundCard::~SoundCard()>:
c0019ff8:	83 ec 0c             	sub    esp,0xc
c0019ffb:	ba 3c 22 02 c0       	mov    edx,0xc002223c
c001a000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a004:	89 10                	mov    DWORD PTR [eax],edx
c001a006:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a00a:	83 ec 0c             	sub    esp,0xc
c001a00d:	50                   	push   eax
c001a00e:	e8 77 1f ff ff       	call   c000bf8a <Device::~Device()>
c001a013:	83 c4 10             	add    esp,0x10
c001a016:	90                   	nop
c001a017:	83 c4 0c             	add    esp,0xc
c001a01a:	c3                   	ret    
c001a01b:	90                   	nop

c001a01c <SoundCard::~SoundCard()>:
c001a01c:	83 ec 0c             	sub    esp,0xc
c001a01f:	83 ec 0c             	sub    esp,0xc
c001a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a026:	e8 cd ff ff ff       	call   c0019ff8 <SoundCard::~SoundCard()>
c001a02b:	83 c4 10             	add    esp,0x10
c001a02e:	83 ec 08             	sub    esp,0x8
c001a031:	68 e8 01 00 00       	push   0x1e8
c001a036:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a03a:	e8 c1 07 ff ff       	call   c000a800 <operator delete(void*, unsigned long)>
c001a03f:	83 c4 10             	add    esp,0x10
c001a042:	83 c4 0c             	add    esp,0xc
c001a045:	c3                   	ret    

c001a046 <SoundCard::configureRates(int, int, int)>:
c001a046:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a04a:	31 c0                	xor    eax,eax
c001a04c:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001a053:	75 20                	jne    c001a075 <SoundCard::configureRates(int, int, int)+0x2f>
c001a055:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a059:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001a05f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a063:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001a069:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a06d:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001a073:	b0 01                	mov    al,0x1
c001a075:	c3                   	ret    

c001a076 <SoundCard::getSamples16(int, short*)>:
c001a076:	55                   	push   ebp
c001a077:	57                   	push   edi
c001a078:	31 ff                	xor    edi,edi
c001a07a:	56                   	push   esi
c001a07b:	53                   	push   ebx
c001a07c:	31 db                	xor    ebx,ebx
c001a07e:	83 ec 10             	sub    esp,0x10
c001a081:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001a085:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a089:	8d 04 36             	lea    eax,[esi+esi*1]
c001a08c:	50                   	push   eax
c001a08d:	6a 00                	push   0x0
c001a08f:	55                   	push   ebp
c001a090:	e8 5b 64 fe ff       	call   c00004f0 <memset>
c001a095:	83 c4 10             	add    esp,0x10
c001a098:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a09c:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001a0a3:	85 c0                	test   eax,eax
c001a0a5:	74 1a                	je     c001a0c1 <SoundCard::getSamples16(int, short*)+0x4b>
c001a0a7:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a0ab:	75 14                	jne    c001a0c1 <SoundCard::getSamples16(int, short*)+0x4b>
c001a0ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a0b1:	55                   	push   ebp
c001a0b2:	56                   	push   esi
c001a0b3:	50                   	push   eax
c001a0b4:	e8 f3 02 00 00       	call   c001a3ac <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001a0b9:	83 c4 10             	add    esp,0x10
c001a0bc:	39 c3                	cmp    ebx,eax
c001a0be:	0f 4c d8             	cmovl  ebx,eax
c001a0c1:	47                   	inc    edi
c001a0c2:	83 ff 20             	cmp    edi,0x20
c001a0c5:	75 d1                	jne    c001a098 <SoundCard::getSamples16(int, short*)+0x22>
c001a0c7:	83 c4 0c             	add    esp,0xc
c001a0ca:	89 d8                	mov    eax,ebx
c001a0cc:	5b                   	pop    ebx
c001a0cd:	5e                   	pop    esi
c001a0ce:	5f                   	pop    edi
c001a0cf:	5d                   	pop    ebp
c001a0d0:	c3                   	ret    
c001a0d1:	90                   	nop

c001a0d2 <SoundCard::getSamples32(int, int*)>:
c001a0d2:	55                   	push   ebp
c001a0d3:	57                   	push   edi
c001a0d4:	31 ff                	xor    edi,edi
c001a0d6:	56                   	push   esi
c001a0d7:	31 f6                	xor    esi,esi
c001a0d9:	53                   	push   ebx
c001a0da:	83 ec 10             	sub    esp,0x10
c001a0dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a0e1:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a0e5:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a0e9:	c1 e0 02             	shl    eax,0x2
c001a0ec:	50                   	push   eax
c001a0ed:	6a 00                	push   0x0
c001a0ef:	55                   	push   ebp
c001a0f0:	e8 fb 63 fe ff       	call   c00004f0 <memset>
c001a0f5:	83 c4 10             	add    esp,0x10
c001a0f8:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001a0ff:	85 c0                	test   eax,eax
c001a101:	74 1a                	je     c001a11d <SoundCard::getSamples32(int, int*)+0x4b>
c001a103:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a107:	75 14                	jne    c001a11d <SoundCard::getSamples32(int, int*)+0x4b>
c001a109:	53                   	push   ebx
c001a10a:	55                   	push   ebp
c001a10b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a10f:	50                   	push   eax
c001a110:	e8 67 03 00 00       	call   c001a47c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001a115:	83 c4 10             	add    esp,0x10
c001a118:	39 c6                	cmp    esi,eax
c001a11a:	0f 4c f0             	cmovl  esi,eax
c001a11d:	47                   	inc    edi
c001a11e:	83 ff 20             	cmp    edi,0x20
c001a121:	75 d5                	jne    c001a0f8 <SoundCard::getSamples32(int, int*)+0x26>
c001a123:	85 f6                	test   esi,esi
c001a125:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001a12c:	75 0f                	jne    c001a13d <SoundCard::getSamples32(int, int*)+0x6b>
c001a12e:	85 c0                	test   eax,eax
c001a130:	74 1b                	je     c001a14d <SoundCard::getSamples32(int, int*)+0x7b>
c001a132:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a134:	83 ec 0c             	sub    esp,0xc
c001a137:	53                   	push   ebx
c001a138:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a13b:	eb 0d                	jmp    c001a14a <SoundCard::getSamples32(int, int*)+0x78>
c001a13d:	85 c0                	test   eax,eax
c001a13f:	75 0c                	jne    c001a14d <SoundCard::getSamples32(int, int*)+0x7b>
c001a141:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a143:	83 ec 0c             	sub    esp,0xc
c001a146:	53                   	push   ebx
c001a147:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001a14a:	83 c4 10             	add    esp,0x10
c001a14d:	83 c4 0c             	add    esp,0xc
c001a150:	89 f0                	mov    eax,esi
c001a152:	5b                   	pop    ebx
c001a153:	5e                   	pop    esi
c001a154:	5f                   	pop    edi
c001a155:	5d                   	pop    ebp
c001a156:	c3                   	ret    
c001a157:	90                   	nop

c001a158 <SoundCard::addChannel(SoundPort*)>:
c001a158:	83 ec 0c             	sub    esp,0xc
c001a15b:	31 c0                	xor    eax,eax
c001a15d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a161:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001a169:	74 1b                	je     c001a186 <SoundCard::addChannel(SoundPort*)+0x2e>
c001a16b:	40                   	inc    eax
c001a16c:	83 f8 20             	cmp    eax,0x20
c001a16f:	75 f0                	jne    c001a161 <SoundCard::addChannel(SoundPort*)+0x9>
c001a171:	83 ec 0c             	sub    esp,0xc
c001a174:	68 15 22 02 c0       	push   0xc0022215
c001a179:	e8 f3 69 ff ff       	call   c0010b71 <KePanic(char const*)>
c001a17e:	83 c4 10             	add    esp,0x10
c001a181:	83 c8 ff             	or     eax,0xffffffff
c001a184:	eb 0b                	jmp    c001a191 <SoundCard::addChannel(SoundPort*)+0x39>
c001a186:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a18a:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001a191:	83 c4 0c             	add    esp,0xc
c001a194:	c3                   	ret    
c001a195:	90                   	nop

c001a196 <SoundCard::removeChannel(int)>:
c001a196:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a19a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a19e:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001a1a9:	c3                   	ret    
c001a1aa:	66 90                	xchg   ax,ax

c001a1ac <SoundPort::SoundPort(int, int, int, int)>:
c001a1ac:	83 ec 0c             	sub    esp,0xc
c001a1af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a1b3:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a1ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a1be:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a1c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a1c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a1ca:	89 10                	mov    DWORD PTR [eax],edx
c001a1cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a1d0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a1d4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a1d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a1db:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a1df:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a1e2:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001a1e7:	75 13                	jne    c001a1fc <SoundPort::SoundPort(int, int, int, int)+0x50>
c001a1e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a1ed:	8b 00                	mov    eax,DWORD PTR [eax]
c001a1ef:	05 a0 0f 00 00       	add    eax,0xfa0
c001a1f4:	d1 e0                	shl    eax,1
c001a1f6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a1fa:	66 90                	xchg   ax,ax
c001a1fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a200:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a204:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001a207:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a20b:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001a212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a216:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a219:	c1 e0 02             	shl    eax,0x2
c001a21c:	83 ec 0c             	sub    esp,0xc
c001a21f:	50                   	push   eax
c001a220:	e8 a6 d8 fe ff       	call   c0007acb <malloc>
c001a225:	83 c4 10             	add    esp,0x10
c001a228:	89 c2                	mov    edx,eax
c001a22a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a22e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001a231:	90                   	nop
c001a232:	83 c4 0c             	add    esp,0xc
c001a235:	c3                   	ret    
c001a236:	66 90                	xchg   ax,ax

c001a238 <SoundPort::~SoundPort()>:
c001a238:	83 ec 0c             	sub    esp,0xc
c001a23b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a23f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a242:	85 c0                	test   eax,eax
c001a244:	74 1e                	je     c001a264 <SoundPort::~SoundPort()+0x2c>
c001a246:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a24a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a24d:	83 ec 0c             	sub    esp,0xc
c001a250:	50                   	push   eax
c001a251:	e8 85 d8 fe ff       	call   c0007adb <free>
c001a256:	83 c4 10             	add    esp,0x10
c001a259:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a25d:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a264:	90                   	nop
c001a265:	83 c4 0c             	add    esp,0xc
c001a268:	c3                   	ret    
c001a269:	90                   	nop
c001a26a:	66 90                	xchg   ax,ax

c001a26c <SoundPort::unpause()>:
c001a26c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a270:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001a274:	c3                   	ret    
c001a275:	90                   	nop
c001a276:	66 90                	xchg   ax,ax

c001a278 <SoundPort::pause()>:
c001a278:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a27c:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a280:	c3                   	ret    
c001a281:	90                   	nop
c001a282:	66 90                	xchg   ax,ax

c001a284 <SoundPort::getBufferUsed()>:
c001a284:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a288:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a28b:	c3                   	ret    

c001a28c <SoundPort::getBufferSize()>:
c001a28c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a290:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a293:	c3                   	ret    

c001a294 <SoundPort::buffer16(short*, int)>:
c001a294:	55                   	push   ebp
c001a295:	57                   	push   edi
c001a296:	56                   	push   esi
c001a297:	53                   	push   ebx
c001a298:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a29c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001a2a0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001a2a3:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001a2a6:	74 68                	je     c001a310 <SoundPort::buffer16(short*, int)+0x7c>
c001a2a8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a2ac:	85 c9                	test   ecx,ecx
c001a2ae:	7e 60                	jle    c001a310 <SoundPort::buffer16(short*, int)+0x7c>
c001a2b0:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001a2b4:	8d 70 01             	lea    esi,[eax+0x1]
c001a2b7:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001a2ba:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001a2bd:	c1 e1 0f             	shl    ecx,0xf
c001a2c0:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001a2c3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a2c6:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a2c9:	74 4d                	je     c001a318 <SoundPort::buffer16(short*, int)+0x84>
c001a2cb:	31 f6                	xor    esi,esi
c001a2cd:	eb 21                	jmp    c001a2f0 <SoundPort::buffer16(short*, int)+0x5c>
c001a2cf:	90                   	nop
c001a2d0:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001a2d5:	8d 79 01             	lea    edi,[ecx+0x1]
c001a2d8:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001a2db:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001a2de:	c1 e3 0f             	shl    ebx,0xf
c001a2e1:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001a2e4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a2e7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a2ea:	74 1c                	je     c001a308 <SoundPort::buffer16(short*, int)+0x74>
c001a2ec:	89 c6                	mov    esi,eax
c001a2ee:	66 90                	xchg   ax,ax
c001a2f0:	8d 46 01             	lea    eax,[esi+0x1]
c001a2f3:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001a2f7:	75 d7                	jne    c001a2d0 <SoundPort::buffer16(short*, int)+0x3c>
c001a2f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a2fd:	8d 76 00             	lea    esi,[esi+0x0]
c001a300:	5b                   	pop    ebx
c001a301:	5e                   	pop    esi
c001a302:	5f                   	pop    edi
c001a303:	5d                   	pop    ebp
c001a304:	c3                   	ret    
c001a305:	8d 76 00             	lea    esi,[esi+0x0]
c001a308:	5b                   	pop    ebx
c001a309:	8d 46 02             	lea    eax,[esi+0x2]
c001a30c:	5e                   	pop    esi
c001a30d:	5f                   	pop    edi
c001a30e:	5d                   	pop    ebp
c001a30f:	c3                   	ret    
c001a310:	5b                   	pop    ebx
c001a311:	31 c0                	xor    eax,eax
c001a313:	5e                   	pop    esi
c001a314:	5f                   	pop    edi
c001a315:	5d                   	pop    ebp
c001a316:	c3                   	ret    
c001a317:	90                   	nop
c001a318:	b8 01 00 00 00       	mov    eax,0x1
c001a31d:	eb e1                	jmp    c001a300 <SoundPort::buffer16(short*, int)+0x6c>
c001a31f:	90                   	nop

c001a320 <SoundPort::buffer32(int*, int)>:
c001a320:	55                   	push   ebp
c001a321:	57                   	push   edi
c001a322:	56                   	push   esi
c001a323:	53                   	push   ebx
c001a324:	83 ec 04             	sub    esp,0x4
c001a327:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a32b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a32f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a333:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a336:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a339:	89 04 24             	mov    DWORD PTR [esp],eax
c001a33c:	74 5a                	je     c001a398 <SoundPort::buffer32(int*, int)+0x78>
c001a33e:	85 c0                	test   eax,eax
c001a340:	7e 56                	jle    c001a398 <SoundPort::buffer32(int*, int)+0x78>
c001a342:	8d 71 01             	lea    esi,[ecx+0x1]
c001a345:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001a348:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001a34b:	8b 37                	mov    esi,DWORD PTR [edi]
c001a34d:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001a350:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a353:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a356:	74 4c                	je     c001a3a4 <SoundPort::buffer32(int*, int)+0x84>
c001a358:	31 f6                	xor    esi,esi
c001a35a:	eb 1c                	jmp    c001a378 <SoundPort::buffer32(int*, int)+0x58>
c001a35c:	8d 69 01             	lea    ebp,[ecx+0x1]
c001a35f:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001a362:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001a365:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001a368:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001a36c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a36f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a372:	74 18                	je     c001a38c <SoundPort::buffer32(int*, int)+0x6c>
c001a374:	89 de                	mov    esi,ebx
c001a376:	66 90                	xchg   ax,ax
c001a378:	8d 5e 01             	lea    ebx,[esi+0x1]
c001a37b:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001a37e:	75 dc                	jne    c001a35c <SoundPort::buffer32(int*, int)+0x3c>
c001a380:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001a383:	90                   	nop
c001a384:	83 c4 04             	add    esp,0x4
c001a387:	5b                   	pop    ebx
c001a388:	5e                   	pop    esi
c001a389:	5f                   	pop    edi
c001a38a:	5d                   	pop    ebp
c001a38b:	c3                   	ret    
c001a38c:	8d 46 02             	lea    eax,[esi+0x2]
c001a38f:	83 c4 04             	add    esp,0x4
c001a392:	5b                   	pop    ebx
c001a393:	5e                   	pop    esi
c001a394:	5f                   	pop    edi
c001a395:	5d                   	pop    ebp
c001a396:	c3                   	ret    
c001a397:	90                   	nop
c001a398:	83 c4 04             	add    esp,0x4
c001a39b:	31 c0                	xor    eax,eax
c001a39d:	5b                   	pop    ebx
c001a39e:	5e                   	pop    esi
c001a39f:	5f                   	pop    edi
c001a3a0:	5d                   	pop    ebp
c001a3a1:	c3                   	ret    
c001a3a2:	66 90                	xchg   ax,ax
c001a3a4:	b8 01 00 00 00       	mov    eax,0x1
c001a3a9:	eb d9                	jmp    c001a384 <SoundPort::buffer32(int*, int)+0x64>
c001a3ab:	90                   	nop

c001a3ac <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001a3ac:	55                   	push   ebp
c001a3ad:	57                   	push   edi
c001a3ae:	56                   	push   esi
c001a3af:	53                   	push   ebx
c001a3b0:	83 ec 0c             	sub    esp,0xc
c001a3b3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a3b7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a3bb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a3bf:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a3c3:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001a3c9:	39 03                	cmp    DWORD PTR [ebx],eax
c001a3cb:	74 13                	je     c001a3e0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001a3cd:	83 ec 0c             	sub    esp,0xc
c001a3d0:	68 68 22 02 c0       	push   0xc0022268
c001a3d5:	e8 97 67 ff ff       	call   c0010b71 <KePanic(char const*)>
c001a3da:	83 c4 10             	add    esp,0x10
c001a3dd:	8d 76 00             	lea    esi,[esi+0x0]
c001a3e0:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001a3e6:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001a3e9:	74 11                	je     c001a3fc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001a3eb:	83 ec 0c             	sub    esp,0xc
c001a3ee:	68 a7 22 02 c0       	push   0xc00222a7
c001a3f3:	e8 79 67 ff ff       	call   c0010b71 <KePanic(char const*)>
c001a3f8:	83 c4 10             	add    esp,0x10
c001a3fb:	90                   	nop
c001a3fc:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001a402:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001a405:	74 11                	je     c001a418 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001a407:	83 ec 0c             	sub    esp,0xc
c001a40a:	68 a7 22 02 c0       	push   0xc00222a7
c001a40f:	e8 5d 67 ff ff       	call   c0010b71 <KePanic(char const*)>
c001a414:	83 c4 10             	add    esp,0x10
c001a417:	90                   	nop
c001a418:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001a41b:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001a41f:	85 f6                	test   esi,esi
c001a421:	7e 2d                	jle    c001a450 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001a423:	31 c0                	xor    eax,eax
c001a425:	8d 76 00             	lea    esi,[esi+0x0]
c001a428:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001a42b:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001a42e:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001a434:	85 c9                	test   ecx,ecx
c001a436:	0f 49 d1             	cmovns edx,ecx
c001a439:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001a43d:	c1 fa 0f             	sar    edx,0xf
c001a440:	01 d1                	add    ecx,edx
c001a442:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001a446:	83 c0 01             	add    eax,0x1
c001a449:	39 f0                	cmp    eax,esi
c001a44b:	75 db                	jne    c001a428 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001a44d:	8d 76 00             	lea    esi,[esi+0x0]
c001a450:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a453:	83 ec 04             	sub    esp,0x4
c001a456:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001a459:	29 f0                	sub    eax,esi
c001a45b:	c1 e0 02             	shl    eax,0x2
c001a45e:	50                   	push   eax
c001a45f:	8d 04 b2             	lea    eax,[edx+esi*4]
c001a462:	50                   	push   eax
c001a463:	52                   	push   edx
c001a464:	e8 67 5f fe ff       	call   c00003d0 <memmove>
c001a469:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001a46c:	29 f0                	sub    eax,esi
c001a46e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001a471:	83 c4 1c             	add    esp,0x1c
c001a474:	89 f0                	mov    eax,esi
c001a476:	5b                   	pop    ebx
c001a477:	5e                   	pop    esi
c001a478:	5f                   	pop    edi
c001a479:	5d                   	pop    ebp
c001a47a:	c3                   	ret    
c001a47b:	90                   	nop

c001a47c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001a47c:	55                   	push   ebp
c001a47d:	57                   	push   edi
c001a47e:	56                   	push   esi
c001a47f:	53                   	push   ebx
c001a480:	83 ec 0c             	sub    esp,0xc
c001a483:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a487:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a48b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001a48f:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001a493:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001a499:	39 03                	cmp    DWORD PTR [ebx],eax
c001a49b:	74 13                	je     c001a4b0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001a49d:	83 ec 0c             	sub    esp,0xc
c001a4a0:	68 88 22 02 c0       	push   0xc0022288
c001a4a5:	e8 c7 66 ff ff       	call   c0010b71 <KePanic(char const*)>
c001a4aa:	83 c4 10             	add    esp,0x10
c001a4ad:	8d 76 00             	lea    esi,[esi+0x0]
c001a4b0:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001a4b6:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001a4b9:	74 11                	je     c001a4cc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001a4bb:	83 ec 0c             	sub    esp,0xc
c001a4be:	68 c3 22 02 c0       	push   0xc00222c3
c001a4c3:	e8 a9 66 ff ff       	call   c0010b71 <KePanic(char const*)>
c001a4c8:	83 c4 10             	add    esp,0x10
c001a4cb:	90                   	nop
c001a4cc:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001a4d2:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001a4d5:	74 11                	je     c001a4e8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001a4d7:	83 ec 0c             	sub    esp,0xc
c001a4da:	68 c3 22 02 c0       	push   0xc00222c3
c001a4df:	e8 8d 66 ff ff       	call   c0010b71 <KePanic(char const*)>
c001a4e4:	83 c4 10             	add    esp,0x10
c001a4e7:	90                   	nop
c001a4e8:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001a4eb:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001a4ef:	85 ff                	test   edi,edi
c001a4f1:	7e 21                	jle    c001a514 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001a4f3:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001a4fa:	31 c0                	xor    eax,eax
c001a4fc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001a4ff:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001a502:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001a505:	01 d5                	add    ebp,edx
c001a507:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001a50a:	83 c0 04             	add    eax,0x4
c001a50d:	39 c1                	cmp    ecx,eax
c001a50f:	75 eb                	jne    c001a4fc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001a511:	8d 76 00             	lea    esi,[esi+0x0]
c001a514:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a517:	83 ec 04             	sub    esp,0x4
c001a51a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001a51d:	29 f8                	sub    eax,edi
c001a51f:	c1 e0 02             	shl    eax,0x2
c001a522:	50                   	push   eax
c001a523:	8d 04 ba             	lea    eax,[edx+edi*4]
c001a526:	50                   	push   eax
c001a527:	52                   	push   edx
c001a528:	e8 a3 5e fe ff       	call   c00003d0 <memmove>
c001a52d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001a530:	29 f8                	sub    eax,edi
c001a532:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001a535:	83 c4 1c             	add    esp,0x1c
c001a538:	89 f8                	mov    eax,edi
c001a53a:	5b                   	pop    ebx
c001a53b:	5e                   	pop    esi
c001a53c:	5f                   	pop    edi
c001a53d:	5d                   	pop    ebp
c001a53e:	c3                   	ret    
c001a53f:	90                   	nop

c001a540 <PCI::open(int, int, void*)>:
c001a540:	83 ec 18             	sub    esp,0x18
c001a543:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a547:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a54b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001a551:	8b 10                	mov    edx,DWORD PTR [eax]
c001a553:	50                   	push   eax
c001a554:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001a557:	31 c0                	xor    eax,eax
c001a559:	83 c4 1c             	add    esp,0x1c
c001a55c:	c3                   	ret    
c001a55d:	90                   	nop

c001a55e <PCI::close(int, int, void*)>:
c001a55e:	31 c0                	xor    eax,eax
c001a560:	c3                   	ret    
c001a561:	90                   	nop

c001a562 <PCI::PCI()>:
c001a562:	83 ec 0c             	sub    esp,0xc
c001a565:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a569:	83 ec 08             	sub    esp,0x8
c001a56c:	68 df 22 02 c0       	push   0xc00222df
c001a571:	50                   	push   eax
c001a572:	e8 6d 14 ff ff       	call   c000b9e4 <Bus::Bus(char const*)>
c001a577:	83 c4 10             	add    esp,0x10
c001a57a:	ba 88 23 02 c0       	mov    edx,0xc0022388
c001a57f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a583:	89 10                	mov    DWORD PTR [eax],edx
c001a585:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a589:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001a593:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a597:	a3 40 9b 02 c0       	mov    ds:0xc0029b40,eax
c001a59c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5a0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a5a6:	0f b6 d0             	movzx  edx,al
c001a5a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5ad:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001a5b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5b8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a5be:	0f b6 d0             	movzx  edx,al
c001a5c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5c5:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001a5ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5ce:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a5d4:	8d 50 01             	lea    edx,[eax+0x1]
c001a5d7:	88 d1                	mov    cl,dl
c001a5d9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a5dd:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001a5e3:	0f b6 d0             	movzx  edx,al
c001a5e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5ea:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001a5ee:	83 c9 c0             	or     ecx,0xffffffc0
c001a5f1:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001a5f5:	90                   	nop
c001a5f6:	83 c4 0c             	add    esp,0xc
c001a5f9:	c3                   	ret    

c001a5fa <PCI::readBAR8(unsigned int, int)>:
c001a5fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a5fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a602:	f6 c2 01             	test   dl,0x1
c001a605:	74 07                	je     c001a60e <PCI::readBAR8(unsigned int, int)+0x14>
c001a607:	83 e2 fc             	and    edx,0xfffffffc
c001a60a:	01 c2                	add    edx,eax
c001a60c:	ec                   	in     al,dx
c001a60d:	c3                   	ret    
c001a60e:	83 e2 f0             	and    edx,0xfffffff0
c001a611:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001a614:	c3                   	ret    
c001a615:	90                   	nop

c001a616 <PCI::readBAR16(unsigned int, int)>:
c001a616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a61a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a61e:	f6 c2 01             	test   dl,0x1
c001a621:	74 08                	je     c001a62b <PCI::readBAR16(unsigned int, int)+0x15>
c001a623:	83 e2 fc             	and    edx,0xfffffffc
c001a626:	01 c2                	add    edx,eax
c001a628:	66 ed                	in     ax,dx
c001a62a:	c3                   	ret    
c001a62b:	83 e2 f0             	and    edx,0xfffffff0
c001a62e:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001a632:	c3                   	ret    
c001a633:	90                   	nop

c001a634 <PCI::readBAR32(unsigned int, int)>:
c001a634:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a638:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a63c:	f6 c2 01             	test   dl,0x1
c001a63f:	74 07                	je     c001a648 <PCI::readBAR32(unsigned int, int)+0x14>
c001a641:	83 e2 fc             	and    edx,0xfffffffc
c001a644:	01 c2                	add    edx,eax
c001a646:	ed                   	in     eax,dx
c001a647:	c3                   	ret    
c001a648:	83 e2 f0             	and    edx,0xfffffff0
c001a64b:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001a64e:	c3                   	ret    
c001a64f:	90                   	nop

c001a650 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001a650:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a654:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a658:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a65c:	f6 c2 01             	test   dl,0x1
c001a65f:	74 07                	je     c001a668 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001a661:	83 e2 fc             	and    edx,0xfffffffc
c001a664:	01 ca                	add    edx,ecx
c001a666:	ee                   	out    dx,al
c001a667:	c3                   	ret    
c001a668:	83 e2 f0             	and    edx,0xfffffff0
c001a66b:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001a66e:	c3                   	ret    
c001a66f:	90                   	nop

c001a670 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001a670:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a674:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a678:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a67c:	f6 c2 01             	test   dl,0x1
c001a67f:	74 08                	je     c001a689 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001a681:	83 e2 fc             	and    edx,0xfffffffc
c001a684:	01 ca                	add    edx,ecx
c001a686:	66 ef                	out    dx,ax
c001a688:	c3                   	ret    
c001a689:	83 e2 f0             	and    edx,0xfffffff0
c001a68c:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001a690:	c3                   	ret    
c001a691:	90                   	nop

c001a692 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001a692:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a696:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a69a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a69e:	f6 c2 01             	test   dl,0x1
c001a6a1:	74 07                	je     c001a6aa <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001a6a3:	83 e2 fc             	and    edx,0xfffffffc
c001a6a6:	01 ca                	add    edx,ecx
c001a6a8:	ef                   	out    dx,eax
c001a6a9:	c3                   	ret    
c001a6aa:	83 e2 f0             	and    edx,0xfffffff0
c001a6ad:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001a6b0:	c3                   	ret    
c001a6b1:	90                   	nop

c001a6b2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a6b2:	55                   	push   ebp
c001a6b3:	57                   	push   edi
c001a6b4:	56                   	push   esi
c001a6b5:	53                   	push   ebx
c001a6b6:	83 ec 0c             	sub    esp,0xc
c001a6b9:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001a6be:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001a6c2:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001a6c6:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a6ca:	83 fe 07             	cmp    esi,0x7
c001a6cd:	76 10                	jbe    c001a6df <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001a6cf:	83 ec 0c             	sub    esp,0xc
c001a6d2:	68 e7 22 02 c0       	push   0xc00222e7
c001a6d7:	e8 95 64 ff ff       	call   c0010b71 <KePanic(char const*)>
c001a6dc:	83 c4 10             	add    esp,0x10
c001a6df:	0f b6 db             	movzx  ebx,bl
c001a6e2:	83 fb 0f             	cmp    ebx,0xf
c001a6e5:	76 10                	jbe    c001a6f7 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001a6e7:	83 ec 0c             	sub    esp,0xc
c001a6ea:	68 17 23 02 c0       	push   0xc0022317
c001a6ef:	e8 7d 64 ff ff       	call   c0010b71 <KePanic(char const*)>
c001a6f4:	83 c4 10             	add    esp,0x10
c001a6f7:	8d 04 36             	lea    eax,[esi+esi*1]
c001a6fa:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a6ff:	83 c8 f0             	or     eax,0xfffffff0
c001a702:	ee                   	out    dx,al
c001a703:	ba fa 0c 00 00       	mov    edx,0xcfa
c001a708:	89 e8                	mov    eax,ebp
c001a70a:	ee                   	out    dx,al
c001a70b:	89 f9                	mov    ecx,edi
c001a70d:	89 d8                	mov    eax,ebx
c001a70f:	0f b6 d9             	movzx  ebx,cl
c001a712:	83 c4 0c             	add    esp,0xc
c001a715:	c1 e0 08             	shl    eax,0x8
c001a718:	83 e3 fc             	and    ebx,0xfffffffc
c001a71b:	09 d8                	or     eax,ebx
c001a71d:	5b                   	pop    ebx
c001a71e:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001a723:	5e                   	pop    esi
c001a724:	5f                   	pop    edi
c001a725:	5d                   	pop    ebp
c001a726:	c3                   	ret    
c001a727:	90                   	nop

c001a728 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a728:	57                   	push   edi
c001a729:	56                   	push   esi
c001a72a:	53                   	push   ebx
c001a72b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a72f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a733:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a737:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a73b:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001a741:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a745:	83 ff 01             	cmp    edi,0x1
c001a748:	75 3f                	jne    c001a789 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001a74a:	89 de                	mov    esi,ebx
c001a74c:	0f b6 c0             	movzx  eax,al
c001a74f:	c1 e0 10             	shl    eax,0x10
c001a752:	81 e6 fc 00 00 00    	and    esi,0xfc
c001a758:	0f b6 c9             	movzx  ecx,cl
c001a75b:	09 f0                	or     eax,esi
c001a75d:	c1 e1 08             	shl    ecx,0x8
c001a760:	0f b6 d2             	movzx  edx,dl
c001a763:	c1 e2 0b             	shl    edx,0xb
c001a766:	09 c8                	or     eax,ecx
c001a768:	09 d0                	or     eax,edx
c001a76a:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a76f:	0d 00 00 00 80       	or     eax,0x80000000
c001a774:	ef                   	out    dx,eax
c001a775:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a77a:	ed                   	in     eax,dx
c001a77b:	83 e3 02             	and    ebx,0x2
c001a77e:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a785:	d3 e8                	shr    eax,cl
c001a787:	eb 44                	jmp    c001a7cd <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a789:	83 ff 02             	cmp    edi,0x2
c001a78c:	75 2d                	jne    c001a7bb <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001a78e:	83 ec 0c             	sub    esp,0xc
c001a791:	0f b6 fb             	movzx  edi,bl
c001a794:	57                   	push   edi
c001a795:	0f b6 c9             	movzx  ecx,cl
c001a798:	51                   	push   ecx
c001a799:	0f b6 d2             	movzx  edx,dl
c001a79c:	52                   	push   edx
c001a79d:	0f b6 c0             	movzx  eax,al
c001a7a0:	50                   	push   eax
c001a7a1:	56                   	push   esi
c001a7a2:	e8 0b ff ff ff       	call   c001a6b2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a7a7:	89 c2                	mov    edx,eax
c001a7a9:	ed                   	in     eax,dx
c001a7aa:	83 e3 02             	and    ebx,0x2
c001a7ad:	83 c4 20             	add    esp,0x20
c001a7b0:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a7b7:	d3 e8                	shr    eax,cl
c001a7b9:	eb 12                	jmp    c001a7cd <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a7bb:	83 ec 0c             	sub    esp,0xc
c001a7be:	68 47 23 02 c0       	push   0xc0022347
c001a7c3:	e8 a9 63 ff ff       	call   c0010b71 <KePanic(char const*)>
c001a7c8:	83 c4 10             	add    esp,0x10
c001a7cb:	31 c0                	xor    eax,eax
c001a7cd:	5b                   	pop    ebx
c001a7ce:	5e                   	pop    esi
c001a7cf:	5f                   	pop    edi
c001a7d0:	c3                   	ret    
c001a7d1:	90                   	nop

c001a7d2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001a7d2:	83 ec 18             	sub    esp,0x18
c001a7d5:	6a 00                	push   0x0
c001a7d7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a7dc:	50                   	push   eax
c001a7dd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a7e2:	50                   	push   eax
c001a7e3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a7e8:	50                   	push   eax
c001a7e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a7ed:	e8 36 ff ff ff       	call   c001a728 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a7f2:	83 c4 2c             	add    esp,0x2c
c001a7f5:	c3                   	ret    

c001a7f6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001a7f6:	83 ec 18             	sub    esp,0x18
c001a7f9:	6a 0e                	push   0xe
c001a7fb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a800:	50                   	push   eax
c001a801:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a806:	50                   	push   eax
c001a807:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a80c:	50                   	push   eax
c001a80d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a811:	e8 12 ff ff ff       	call   c001a728 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a816:	83 c4 2c             	add    esp,0x2c
c001a819:	0f b6 c0             	movzx  eax,al
c001a81c:	c3                   	ret    
c001a81d:	90                   	nop

c001a81e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001a81e:	55                   	push   ebp
c001a81f:	57                   	push   edi
c001a820:	56                   	push   esi
c001a821:	53                   	push   ebx
c001a822:	83 ec 18             	sub    esp,0x18
c001a825:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001a82a:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001a82f:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001a834:	6a 0a                	push   0xa
c001a836:	56                   	push   esi
c001a837:	55                   	push   ebp
c001a838:	57                   	push   edi
c001a839:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a83d:	e8 e6 fe ff ff       	call   c001a728 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a842:	83 c4 14             	add    esp,0x14
c001a845:	6a 0a                	push   0xa
c001a847:	56                   	push   esi
c001a848:	55                   	push   ebp
c001a849:	57                   	push   edi
c001a84a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a84e:	89 c3                	mov    ebx,eax
c001a850:	0f b6 db             	movzx  ebx,bl
c001a853:	e8 d0 fe ff ff       	call   c001a728 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a858:	83 c4 2c             	add    esp,0x2c
c001a85b:	25 00 ff 00 00       	and    eax,0xff00
c001a860:	09 d8                	or     eax,ebx
c001a862:	5b                   	pop    ebx
c001a863:	5e                   	pop    esi
c001a864:	5f                   	pop    edi
c001a865:	5d                   	pop    ebp
c001a866:	c3                   	ret    
c001a867:	90                   	nop

c001a868 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001a868:	83 ec 18             	sub    esp,0x18
c001a86b:	6a 08                	push   0x8
c001a86d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a872:	50                   	push   eax
c001a873:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a878:	50                   	push   eax
c001a879:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a87e:	50                   	push   eax
c001a87f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a883:	e8 a0 fe ff ff       	call   c001a728 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a888:	83 c4 2c             	add    esp,0x2c
c001a88b:	0f b6 c4             	movzx  eax,ah
c001a88e:	c3                   	ret    
c001a88f:	90                   	nop

c001a890 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001a890:	83 ec 18             	sub    esp,0x18
c001a893:	6a 08                	push   0x8
c001a895:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a89a:	50                   	push   eax
c001a89b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a8a0:	50                   	push   eax
c001a8a1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a8a6:	50                   	push   eax
c001a8a7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a8ab:	e8 78 fe ff ff       	call   c001a728 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a8b0:	83 c4 2c             	add    esp,0x2c
c001a8b3:	c3                   	ret    

c001a8b4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001a8b4:	83 ec 18             	sub    esp,0x18
c001a8b7:	6a 3c                	push   0x3c
c001a8b9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a8be:	50                   	push   eax
c001a8bf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a8c4:	50                   	push   eax
c001a8c5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a8ca:	50                   	push   eax
c001a8cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a8cf:	e8 54 fe ff ff       	call   c001a728 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a8d4:	83 c4 2c             	add    esp,0x2c
c001a8d7:	c3                   	ret    

c001a8d8 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001a8d8:	83 ec 18             	sub    esp,0x18
c001a8db:	6a 18                	push   0x18
c001a8dd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a8e2:	50                   	push   eax
c001a8e3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a8e8:	50                   	push   eax
c001a8e9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a8ee:	50                   	push   eax
c001a8ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a8f3:	e8 30 fe ff ff       	call   c001a728 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a8f8:	83 c4 2c             	add    esp,0x2c
c001a8fb:	0f b6 c4             	movzx  eax,ah
c001a8fe:	c3                   	ret    
c001a8ff:	90                   	nop

c001a900 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a900:	55                   	push   ebp
c001a901:	57                   	push   edi
c001a902:	56                   	push   esi
c001a903:	53                   	push   ebx
c001a904:	83 ec 28             	sub    esp,0x28
c001a907:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a90b:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001a910:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001a915:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001a91a:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001a921:	8d 43 12             	lea    eax,[ebx+0x12]
c001a924:	83 c3 10             	add    ebx,0x10
c001a927:	0f b6 c0             	movzx  eax,al
c001a92a:	0f b6 db             	movzx  ebx,bl
c001a92d:	50                   	push   eax
c001a92e:	51                   	push   ecx
c001a92f:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001a933:	57                   	push   edi
c001a934:	55                   	push   ebp
c001a935:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a939:	e8 ea fd ff ff       	call   c001a728 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a93e:	83 c4 14             	add    esp,0x14
c001a941:	53                   	push   ebx
c001a942:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a946:	51                   	push   ecx
c001a947:	89 c6                	mov    esi,eax
c001a949:	57                   	push   edi
c001a94a:	55                   	push   ebp
c001a94b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a94f:	c1 e6 10             	shl    esi,0x10
c001a952:	e8 d1 fd ff ff       	call   c001a728 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a957:	83 c4 3c             	add    esp,0x3c
c001a95a:	5b                   	pop    ebx
c001a95b:	0f b7 c0             	movzx  eax,ax
c001a95e:	09 f0                	or     eax,esi
c001a960:	5e                   	pop    esi
c001a961:	5f                   	pop    edi
c001a962:	5d                   	pop    ebp
c001a963:	c3                   	ret    

c001a964 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001a964:	55                   	push   ebp
c001a965:	57                   	push   edi
c001a966:	56                   	push   esi
c001a967:	53                   	push   ebx
c001a968:	83 ec 0c             	sub    esp,0xc
c001a96b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001a96f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a973:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a977:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001a97b:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001a981:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001a985:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a989:	83 f9 01             	cmp    ecx,0x1
c001a98c:	75 5d                	jne    c001a9eb <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001a98e:	0f b6 c8             	movzx  ecx,al
c001a991:	89 f0                	mov    eax,esi
c001a993:	25 fc 00 00 00       	and    eax,0xfc
c001a998:	0f b6 d2             	movzx  edx,dl
c001a99b:	c1 e1 10             	shl    ecx,0x10
c001a99e:	c1 e2 0b             	shl    edx,0xb
c001a9a1:	09 c1                	or     ecx,eax
c001a9a3:	89 f8                	mov    eax,edi
c001a9a5:	0f b6 f8             	movzx  edi,al
c001a9a8:	c1 e7 08             	shl    edi,0x8
c001a9ab:	09 f9                	or     ecx,edi
c001a9ad:	09 d1                	or     ecx,edx
c001a9af:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a9b4:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001a9ba:	89 c8                	mov    eax,ecx
c001a9bc:	ef                   	out    dx,eax
c001a9bd:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a9c2:	ed                   	in     eax,dx
c001a9c3:	83 e6 02             	and    esi,0x2
c001a9c6:	0f b7 db             	movzx  ebx,bx
c001a9c9:	74 0a                	je     c001a9d5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001a9cb:	c1 e3 10             	shl    ebx,0x10
c001a9ce:	0f b7 d0             	movzx  edx,ax
c001a9d1:	09 d3                	or     ebx,edx
c001a9d3:	eb 05                	jmp    c001a9da <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001a9d5:	66 31 c0             	xor    ax,ax
c001a9d8:	09 c3                	or     ebx,eax
c001a9da:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a9df:	89 c8                	mov    eax,ecx
c001a9e1:	ef                   	out    dx,eax
c001a9e2:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a9e7:	89 d8                	mov    eax,ebx
c001a9e9:	eb 41                	jmp    c001aa2c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001a9eb:	83 f9 02             	cmp    ecx,0x2
c001a9ee:	75 45                	jne    c001aa35 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001a9f0:	89 f1                	mov    ecx,esi
c001a9f2:	83 ec 0c             	sub    esp,0xc
c001a9f5:	0f b6 f1             	movzx  esi,cl
c001a9f8:	89 f9                	mov    ecx,edi
c001a9fa:	56                   	push   esi
c001a9fb:	0f b6 f9             	movzx  edi,cl
c001a9fe:	57                   	push   edi
c001a9ff:	0f b6 d2             	movzx  edx,dl
c001aa02:	52                   	push   edx
c001aa03:	0f b6 c0             	movzx  eax,al
c001aa06:	50                   	push   eax
c001aa07:	55                   	push   ebp
c001aa08:	e8 a5 fc ff ff       	call   c001a6b2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aa0d:	89 c2                	mov    edx,eax
c001aa0f:	ed                   	in     eax,dx
c001aa10:	83 c4 20             	add    esp,0x20
c001aa13:	f6 c2 02             	test   dl,0x2
c001aa16:	0f b7 db             	movzx  ebx,bx
c001aa19:	74 0c                	je     c001aa27 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001aa1b:	0f b7 c8             	movzx  ecx,ax
c001aa1e:	89 d8                	mov    eax,ebx
c001aa20:	c1 e0 10             	shl    eax,0x10
c001aa23:	09 c8                	or     eax,ecx
c001aa25:	eb 05                	jmp    c001aa2c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001aa27:	66 31 c0             	xor    ax,ax
c001aa2a:	09 d8                	or     eax,ebx
c001aa2c:	ef                   	out    dx,eax
c001aa2d:	83 c4 0c             	add    esp,0xc
c001aa30:	5b                   	pop    ebx
c001aa31:	5e                   	pop    esi
c001aa32:	5f                   	pop    edi
c001aa33:	5d                   	pop    ebp
c001aa34:	c3                   	ret    
c001aa35:	c7 44 24 20 47 23 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022347
c001aa3d:	83 c4 0c             	add    esp,0xc
c001aa40:	5b                   	pop    ebx
c001aa41:	5e                   	pop    esi
c001aa42:	5f                   	pop    edi
c001aa43:	5d                   	pop    ebp
c001aa44:	e9 28 61 ff ff       	jmp    c0010b71 <KePanic(char const*)>
c001aa49:	90                   	nop

c001aa4a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001aa4a:	55                   	push   ebp
c001aa4b:	57                   	push   edi
c001aa4c:	56                   	push   esi
c001aa4d:	53                   	push   ebx
c001aa4e:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001aa54:	80 3d 4c 9b 02 c0 00 	cmp    BYTE PTR ds:0xc0029b4c,0x0
c001aa5b:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001aa62:	0f 85 bd 00 00 00    	jne    c001ab25 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001aa68:	83 ec 0c             	sub    esp,0xc
c001aa6b:	68 14 01 00 00       	push   0x114
c001aa70:	e8 56 d0 fe ff       	call   c0007acb <malloc>
c001aa75:	83 c4 0c             	add    esp,0xc
c001aa78:	ff 35 90 91 02 c0    	push   DWORD PTR ds:0xc0029190
c001aa7e:	68 4d 23 02 c0       	push   0xc002234d
c001aa83:	50                   	push   eax
c001aa84:	89 c3                	mov    ebx,eax
c001aa86:	e8 ef 06 ff ff       	call   c000b17a <File::File(char const*, Process*)>
c001aa8b:	83 c4 10             	add    esp,0x10
c001aa8e:	85 db                	test   ebx,ebx
c001aa90:	0f 84 6b 02 00 00    	je     c001ad01 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001aa96:	57                   	push   edi
c001aa97:	57                   	push   edi
c001aa98:	6a 01                	push   0x1
c001aa9a:	53                   	push   ebx
c001aa9b:	e8 96 07 ff ff       	call   c000b236 <File::open(FileOpenMode)>
c001aaa0:	83 c4 10             	add    esp,0x10
c001aaa3:	85 c0                	test   eax,eax
c001aaa5:	0f 85 56 02 00 00    	jne    c001ad01 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001aaab:	52                   	push   edx
c001aaac:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001aab0:	50                   	push   eax
c001aab1:	8d 44 24 48          	lea    eax,[esp+0x48]
c001aab5:	50                   	push   eax
c001aab6:	53                   	push   ebx
c001aab7:	e8 7c 0a ff ff       	call   c000b538 <File::stat(unsigned long long*, bool*)>
c001aabc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001aac0:	40                   	inc    eax
c001aac1:	89 04 24             	mov    DWORD PTR [esp],eax
c001aac4:	e8 02 d0 fe ff       	call   c0007acb <malloc>
c001aac9:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001aacd:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001aad1:	59                   	pop    ecx
c001aad2:	a3 48 9b 02 c0       	mov    ds:0xc0029b48,eax
c001aad7:	8b 13                	mov    edx,DWORD PTR [ebx]
c001aad9:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001aadd:	51                   	push   ecx
c001aade:	50                   	push   eax
c001aadf:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001aae3:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001aae7:	53                   	push   ebx
c001aae8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001aaeb:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001aaef:	83 c4 20             	add    esp,0x20
c001aaf2:	89 c8                	mov    eax,ecx
c001aaf4:	99                   	cdq    
c001aaf5:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001aaf9:	0f 85 02 02 00 00    	jne    c001ad01 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001aaff:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001ab03:	0f 85 f8 01 00 00    	jne    c001ad01 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001ab09:	83 ec 0c             	sub    esp,0xc
c001ab0c:	53                   	push   ebx
c001ab0d:	e8 82 07 ff ff       	call   c000b294 <File::close()>
c001ab12:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001ab16:	83 c4 10             	add    esp,0x10
c001ab19:	c6 05 4c 9b 02 c0 01 	mov    BYTE PTR ds:0xc0029b4c,0x1
c001ab20:	a3 44 9b 02 c0       	mov    ds:0xc0029b44,eax
c001ab25:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001ab2d:	31 c9                	xor    ecx,ecx
c001ab2f:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001ab36:	8b 2d 44 9b 02 c0    	mov    ebp,DWORD PTR ds:0xc0029b44
c001ab3c:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001ab43:	8b 15 48 9b 02 c0    	mov    edx,DWORD PTR ds:0xc0029b48
c001ab49:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001ab4e:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001ab56:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001ab5b:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001ab63:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ab67:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001ab6f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001ab73:	39 cd                	cmp    ebp,ecx
c001ab75:	0f 8e 86 01 00 00    	jle    c001ad01 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001ab7b:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001ab7e:	d4 40                	aam    0x40
c001ab80:	d5 39                	aad    0x39
c001ab82:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001ab86:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001ab8a:	d4 40                	aam    0x40
c001ab8c:	d5 39                	aad    0x39
c001ab8e:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001ab92:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001ab96:	d4 40                	aam    0x40
c001ab98:	d5 39                	aad    0x39
c001ab9a:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001ab9e:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001aba2:	d4 40                	aam    0x40
c001aba4:	d5 39                	aad    0x39
c001aba6:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001abaa:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001abae:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001abb2:	3c 56                	cmp    al,0x56
c001abb4:	74 47                	je     c001abfd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001abb6:	d4 40                	aam    0x40
c001abb8:	d5 39                	aad    0x39
c001abba:	8d 58 d0             	lea    ebx,[eax-0x30]
c001abbd:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001abc1:	0f b6 db             	movzx  ebx,bl
c001abc4:	c1 e3 04             	shl    ebx,0x4
c001abc7:	d4 40                	aam    0x40
c001abc9:	d5 39                	aad    0x39
c001abcb:	83 e8 30             	sub    eax,0x30
c001abce:	0f b6 c0             	movzx  eax,al
c001abd1:	09 c3                	or     ebx,eax
c001abd3:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001abd7:	c1 e3 04             	shl    ebx,0x4
c001abda:	d4 40                	aam    0x40
c001abdc:	d5 39                	aad    0x39
c001abde:	83 e8 30             	sub    eax,0x30
c001abe1:	0f b6 c0             	movzx  eax,al
c001abe4:	09 c3                	or     ebx,eax
c001abe6:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001abea:	c1 e3 04             	shl    ebx,0x4
c001abed:	d4 40                	aam    0x40
c001abef:	d5 39                	aad    0x39
c001abf1:	83 e8 30             	sub    eax,0x30
c001abf4:	0f b6 c0             	movzx  eax,al
c001abf7:	09 c3                	or     ebx,eax
c001abf9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001abfd:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001ac01:	80 fb 58             	cmp    bl,0x58
c001ac04:	74 49                	je     c001ac4f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001ac06:	88 d8                	mov    al,bl
c001ac08:	d4 40                	aam    0x40
c001ac0a:	d5 39                	aad    0x39
c001ac0c:	83 e8 30             	sub    eax,0x30
c001ac0f:	0f b6 f8             	movzx  edi,al
c001ac12:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001ac16:	c1 e7 04             	shl    edi,0x4
c001ac19:	d4 40                	aam    0x40
c001ac1b:	d5 39                	aad    0x39
c001ac1d:	83 e8 30             	sub    eax,0x30
c001ac20:	0f b6 c0             	movzx  eax,al
c001ac23:	09 c7                	or     edi,eax
c001ac25:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001ac29:	c1 e7 04             	shl    edi,0x4
c001ac2c:	d4 40                	aam    0x40
c001ac2e:	d5 39                	aad    0x39
c001ac30:	83 e8 30             	sub    eax,0x30
c001ac33:	0f b6 c0             	movzx  eax,al
c001ac36:	09 c7                	or     edi,eax
c001ac38:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001ac3c:	c1 e7 04             	shl    edi,0x4
c001ac3f:	d4 40                	aam    0x40
c001ac41:	d5 39                	aad    0x39
c001ac43:	83 e8 30             	sub    eax,0x30
c001ac46:	0f b6 c0             	movzx  eax,al
c001ac49:	09 c7                	or     edi,eax
c001ac4b:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001ac4f:	8d 41 10             	lea    eax,[ecx+0x10]
c001ac52:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001ac56:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001ac5a:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001ac5e:	83 f9 0a             	cmp    ecx,0xa
c001ac61:	74 07                	je     c001ac6a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001ac63:	47                   	inc    edi
c001ac64:	39 c5                	cmp    ebp,eax
c001ac66:	75 16                	jne    c001ac7e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001ac68:	89 e8                	mov    eax,ebp
c001ac6a:	83 f9 0a             	cmp    ecx,0xa
c001ac6d:	0f 94 c1             	sete   cl
c001ac70:	0f b6 c9             	movzx  ecx,cl
c001ac73:	01 c1                	add    ecx,eax
c001ac75:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001ac7a:	75 0f                	jne    c001ac8b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001ac7c:	eb 1c                	jmp    c001ac9a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001ac7e:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001ac81:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001ac85:	40                   	inc    eax
c001ac86:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001ac89:	eb cb                	jmp    c001ac56 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001ac8b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ac8f:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001ac94:	0f 85 d9 fe ff ff    	jne    c001ab73 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001ac9a:	80 fb 58             	cmp    bl,0x58
c001ac9d:	74 10                	je     c001acaf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001ac9f:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001aca4:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001aca9:	0f 85 c4 fe ff ff    	jne    c001ab73 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001acaf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001acb3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001acb7:	83 e8 30             	sub    eax,0x30
c001acba:	c1 e0 04             	shl    eax,0x4
c001acbd:	83 eb 30             	sub    ebx,0x30
c001acc0:	09 d8                	or     eax,ebx
c001acc2:	0f b6 c0             	movzx  eax,al
c001acc5:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001acc9:	0f 85 a4 fe ff ff    	jne    c001ab73 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001accf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acd3:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001acd7:	83 e8 30             	sub    eax,0x30
c001acda:	c1 e0 04             	shl    eax,0x4
c001acdd:	83 eb 30             	sub    ebx,0x30
c001ace0:	09 d8                	or     eax,ebx
c001ace2:	0f b6 c0             	movzx  eax,al
c001ace5:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001ace9:	0f 85 84 fe ff ff    	jne    c001ab73 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001acef:	50                   	push   eax
c001acf0:	50                   	push   eax
c001acf1:	8d 44 24 48          	lea    eax,[esp+0x48]
c001acf5:	50                   	push   eax
c001acf6:	56                   	push   esi
c001acf7:	e8 54 59 fe ff       	call   c0000650 <strcpy>
c001acfc:	83 c4 10             	add    esp,0x10
c001acff:	eb 05                	jmp    c001ad06 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001ad01:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ad04:	31 f6                	xor    esi,esi
c001ad06:	81 c4 4c 01 00 00    	add    esp,0x14c
c001ad0c:	89 f0                	mov    eax,esi
c001ad0e:	5b                   	pop    ebx
c001ad0f:	5e                   	pop    esi
c001ad10:	5f                   	pop    edi
c001ad11:	5d                   	pop    ebp
c001ad12:	c3                   	ret    
c001ad13:	90                   	nop

c001ad14 <PCI::checkBus(unsigned char)>:
c001ad14:	56                   	push   esi
c001ad15:	53                   	push   ebx
c001ad16:	31 db                	xor    ebx,ebx
c001ad18:	51                   	push   ecx
c001ad19:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001ad1e:	52                   	push   edx
c001ad1f:	53                   	push   ebx
c001ad20:	43                   	inc    ebx
c001ad21:	56                   	push   esi
c001ad22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad26:	e8 0f 03 00 00       	call   c001b03a <PCI::checkDevice(unsigned char, unsigned char)>
c001ad2b:	83 c4 10             	add    esp,0x10
c001ad2e:	83 fb 20             	cmp    ebx,0x20
c001ad31:	75 eb                	jne    c001ad1e <PCI::checkBus(unsigned char)+0xa>
c001ad33:	58                   	pop    eax
c001ad34:	5b                   	pop    ebx
c001ad35:	5e                   	pop    esi
c001ad36:	c3                   	ret    
c001ad37:	90                   	nop

c001ad38 <PCI::foundDevice(PCIDeviceInfo)>:
c001ad38:	55                   	push   ebp
c001ad39:	57                   	push   edi
c001ad3a:	56                   	push   esi
c001ad3b:	53                   	push   ebx
c001ad3c:	83 ec 1c             	sub    esp,0x1c
c001ad3f:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001ad44:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ad48:	3d ff ff 00 00       	cmp    eax,0xffff
c001ad4d:	0f 84 63 01 00 00    	je     c001aeb6 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001ad53:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001ad58:	66 3d 06 04          	cmp    ax,0x406
c001ad5c:	75 2c                	jne    c001ad8a <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001ad5e:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001ad63:	50                   	push   eax
c001ad64:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001ad69:	50                   	push   eax
c001ad6a:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001ad6f:	50                   	push   eax
c001ad70:	53                   	push   ebx
c001ad71:	e8 62 fb ff ff       	call   c001a8d8 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001ad76:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001ad7a:	0f b6 c0             	movzx  eax,al
c001ad7d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001ad81:	83 c4 2c             	add    esp,0x2c
c001ad84:	5b                   	pop    ebx
c001ad85:	5e                   	pop    esi
c001ad86:	5f                   	pop    edi
c001ad87:	5d                   	pop    ebp
c001ad88:	eb 8a                	jmp    c001ad14 <PCI::checkBus(unsigned char)>
c001ad8a:	0f b6 4c 24 54       	movzx  ecx,BYTE PTR [esp+0x54]
c001ad8f:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001ad95:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001ad99:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001ad9d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ada1:	85 d2                	test   edx,edx
c001ada3:	74 34                	je     c001add9 <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c001ada5:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001ada8:	85 c9                	test   ecx,ecx
c001adaa:	74 29                	je     c001add5 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001adac:	8b a9 18 01 00 00    	mov    ebp,DWORD PTR [ecx+0x118]
c001adb2:	31 f5                	xor    ebp,esi
c001adb4:	81 e5 ff 00 ff ff    	and    ebp,0xffff00ff
c001adba:	75 19                	jne    c001add5 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001adbc:	39 b9 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],edi
c001adc2:	75 11                	jne    c001add5 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001adc4:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001adcb:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001adcf:	0f 84 e1 00 00 00    	je     c001aeb6 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001add5:	8b 12                	mov    edx,DWORD PTR [edx]
c001add7:	eb c8                	jmp    c001ada1 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001add9:	3d 01 06 00 00       	cmp    eax,0x601
c001adde:	75 19                	jne    c001adf9 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001ade0:	83 ec 0c             	sub    esp,0xc
c001ade3:	68 64 01 00 00       	push   0x164
c001ade8:	e8 de cc fe ff       	call   c0007acb <malloc>
c001aded:	89 04 24             	mov    DWORD PTR [esp],eax
c001adf0:	89 c5                	mov    ebp,eax
c001adf2:	e8 ab 0e 00 00       	call   c001bca2 <SATABus::SATABus()>
c001adf7:	eb 1e                	jmp    c001ae17 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001adf9:	3d 01 01 00 00       	cmp    eax,0x101
c001adfe:	75 62                	jne    c001ae62 <PCI::foundDevice(PCIDeviceInfo)+0x12a>
c001ae00:	83 ec 0c             	sub    esp,0xc
c001ae03:	68 70 02 00 00       	push   0x270
c001ae08:	e8 be cc fe ff       	call   c0007acb <malloc>
c001ae0d:	89 04 24             	mov    DWORD PTR [esp],eax
c001ae10:	89 c5                	mov    ebp,eax
c001ae12:	e8 f3 02 00 00       	call   c001b10a <IDE::IDE()>
c001ae17:	58                   	pop    eax
c001ae18:	5a                   	pop    edx
c001ae19:	55                   	push   ebp
c001ae1a:	53                   	push   ebx
c001ae1b:	e8 68 12 ff ff       	call   c000c088 <Device::addChild(Device*)>
c001ae20:	83 ec 1c             	sub    esp,0x1c
c001ae23:	b9 09 00 00 00       	mov    ecx,0x9
c001ae28:	fc                   	cld    
c001ae29:	8d 74 24 60          	lea    esi,[esp+0x60]
c001ae2d:	89 e7                	mov    edi,esp
c001ae2f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ae31:	55                   	push   ebp
c001ae32:	e8 97 11 ff ff       	call   c000bfce <Device::preOpenPCI(PCIDeviceInfo)>
c001ae37:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ae3a:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001ae3e:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001ae46:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001ae4e:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001ae56:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001ae59:	83 c4 4c             	add    esp,0x4c
c001ae5c:	5b                   	pop    ebx
c001ae5d:	5e                   	pop    esi
c001ae5e:	5f                   	pop    edi
c001ae5f:	5d                   	pop    ebp
c001ae60:	ff e0                	jmp    eax
c001ae62:	83 ec 0c             	sub    esp,0xc
c001ae65:	68 58 01 00 00       	push   0x158
c001ae6a:	e8 5c cc fe ff       	call   c0007acb <malloc>
c001ae6f:	5a                   	pop    edx
c001ae70:	59                   	pop    ecx
c001ae71:	68 66 23 02 c0       	push   0xc0022366
c001ae76:	50                   	push   eax
c001ae77:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ae7b:	e8 a6 14 ff ff       	call   c000c326 <DriverlessDevice::DriverlessDevice(char const*)>
c001ae80:	5e                   	pop    esi
c001ae81:	5f                   	pop    edi
c001ae82:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ae86:	50                   	push   eax
c001ae87:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ae8b:	53                   	push   ebx
c001ae8c:	e8 f7 11 ff ff       	call   c000c088 <Device::addChild(Device*)>
c001ae91:	83 c4 10             	add    esp,0x10
c001ae94:	b9 09 00 00 00       	mov    ecx,0x9
c001ae99:	fc                   	cld    
c001ae9a:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001ae9e:	89 fe                	mov    esi,edi
c001aea0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001aea2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aea6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001aeaa:	83 c4 1c             	add    esp,0x1c
c001aead:	5b                   	pop    ebx
c001aeae:	5e                   	pop    esi
c001aeaf:	5f                   	pop    edi
c001aeb0:	5d                   	pop    ebp
c001aeb1:	e9 18 11 ff ff       	jmp    c000bfce <Device::preOpenPCI(PCIDeviceInfo)>
c001aeb6:	83 c4 1c             	add    esp,0x1c
c001aeb9:	5b                   	pop    ebx
c001aeba:	5e                   	pop    esi
c001aebb:	5f                   	pop    edi
c001aebc:	5d                   	pop    ebp
c001aebd:	c3                   	ret    

c001aebe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001aebe:	55                   	push   ebp
c001aebf:	57                   	push   edi
c001aec0:	56                   	push   esi
c001aec1:	53                   	push   ebx
c001aec2:	83 ec 68             	sub    esp,0x68
c001aec5:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aecc:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001aed0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aed4:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aedb:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001aee0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001aee4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aeeb:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001aef0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001aef4:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001aef9:	6a 0c                	push   0xc
c001aefb:	57                   	push   edi
c001aefc:	53                   	push   ebx
c001aefd:	56                   	push   esi
c001aefe:	55                   	push   ebp
c001aeff:	e8 24 f8 ff ff       	call   c001a728 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af04:	83 c4 20             	add    esp,0x20
c001af07:	57                   	push   edi
c001af08:	53                   	push   ebx
c001af09:	56                   	push   esi
c001af0a:	55                   	push   ebp
c001af0b:	e8 0e f9 ff ff       	call   c001a81e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001af10:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001af15:	57                   	push   edi
c001af16:	53                   	push   ebx
c001af17:	56                   	push   esi
c001af18:	55                   	push   ebp
c001af19:	e8 96 f9 ff ff       	call   c001a8b4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001af1e:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001af22:	83 c4 14             	add    esp,0x14
c001af25:	6a 3c                	push   0x3c
c001af27:	57                   	push   edi
c001af28:	53                   	push   ebx
c001af29:	56                   	push   esi
c001af2a:	55                   	push   ebp
c001af2b:	e8 f8 f7 ff ff       	call   c001a728 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af30:	0f b6 c4             	movzx  eax,ah
c001af33:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001af37:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001af3b:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001af3f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001af44:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001af4a:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001af50:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001af54:	83 c4 20             	add    esp,0x20
c001af57:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001af5c:	74 30                	je     c001af8e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001af5e:	31 c0                	xor    eax,eax
c001af60:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001af64:	7e 28                	jle    c001af8e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001af66:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001af6e:	39 cb                	cmp    ebx,ecx
c001af70:	75 19                	jne    c001af8b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001af72:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001af7a:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001af7e:	75 0b                	jne    c001af8b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001af80:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001af87:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001af8b:	40                   	inc    eax
c001af8c:	eb d2                	jmp    c001af60 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001af8e:	31 d2                	xor    edx,edx
c001af90:	83 ec 0c             	sub    esp,0xc
c001af93:	57                   	push   edi
c001af94:	53                   	push   ebx
c001af95:	56                   	push   esi
c001af96:	52                   	push   edx
c001af97:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001af9b:	55                   	push   ebp
c001af9c:	e8 5f f9 ff ff       	call   c001a900 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001afa1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001afa5:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001afa9:	42                   	inc    edx
c001afaa:	83 c4 20             	add    esp,0x20
c001afad:	83 fa 06             	cmp    edx,0x6
c001afb0:	75 de                	jne    c001af90 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001afb2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001afb6:	83 ec 0c             	sub    esp,0xc
c001afb9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001afbd:	c1 e2 08             	shl    edx,0x8
c001afc0:	0f b6 c4             	movzx  eax,ah
c001afc3:	09 d0                	or     eax,edx
c001afc5:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001afca:	6a 02                	push   0x2
c001afcc:	57                   	push   edi
c001afcd:	53                   	push   ebx
c001afce:	56                   	push   esi
c001afcf:	55                   	push   ebp
c001afd0:	e8 53 f7 ff ff       	call   c001a728 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001afd5:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001afda:	83 c4 20             	add    esp,0x20
c001afdd:	57                   	push   edi
c001afde:	53                   	push   ebx
c001afdf:	56                   	push   esi
c001afe0:	55                   	push   ebp
c001afe1:	e8 82 f8 ff ff       	call   c001a868 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001afe6:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001afea:	57                   	push   edi
c001afeb:	53                   	push   ebx
c001afec:	56                   	push   esi
c001afed:	55                   	push   ebp
c001afee:	e8 df f7 ff ff       	call   c001a7d2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001aff3:	b9 09 00 00 00       	mov    ecx,0x9
c001aff8:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001affd:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001b001:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001b005:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001b009:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001b00d:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001b011:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001b015:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001b019:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001b01d:	83 ec 0c             	sub    esp,0xc
c001b020:	fc                   	cld    
c001b021:	8d 74 24 58          	lea    esi,[esp+0x58]
c001b025:	89 e7                	mov    edi,esp
c001b027:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b029:	55                   	push   ebp
c001b02a:	e8 09 fd ff ff       	call   c001ad38 <PCI::foundDevice(PCIDeviceInfo)>
c001b02f:	81 c4 8c 00 00 00    	add    esp,0x8c
c001b035:	5b                   	pop    ebx
c001b036:	5e                   	pop    esi
c001b037:	5f                   	pop    edi
c001b038:	5d                   	pop    ebp
c001b039:	c3                   	ret    

c001b03a <PCI::checkDevice(unsigned char, unsigned char)>:
c001b03a:	55                   	push   ebp
c001b03b:	57                   	push   edi
c001b03c:	56                   	push   esi
c001b03d:	53                   	push   ebx
c001b03e:	83 ec 0c             	sub    esp,0xc
c001b041:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001b046:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b04b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b04f:	6a 00                	push   0x0
c001b051:	56                   	push   esi
c001b052:	57                   	push   edi
c001b053:	55                   	push   ebp
c001b054:	e8 79 f7 ff ff       	call   c001a7d2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b059:	6a 00                	push   0x0
c001b05b:	56                   	push   esi
c001b05c:	57                   	push   edi
c001b05d:	55                   	push   ebp
c001b05e:	e8 5b fe ff ff       	call   c001aebe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b063:	83 c4 20             	add    esp,0x20
c001b066:	6a 00                	push   0x0
c001b068:	56                   	push   esi
c001b069:	57                   	push   edi
c001b06a:	55                   	push   ebp
c001b06b:	e8 86 f7 ff ff       	call   c001a7f6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b070:	83 c4 10             	add    esp,0x10
c001b073:	a8 80                	test   al,0x80
c001b075:	74 2d                	je     c001b0a4 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001b077:	bb 01 00 00 00       	mov    ebx,0x1
c001b07c:	53                   	push   ebx
c001b07d:	56                   	push   esi
c001b07e:	57                   	push   edi
c001b07f:	55                   	push   ebp
c001b080:	e8 4d f7 ff ff       	call   c001a7d2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b085:	83 c4 10             	add    esp,0x10
c001b088:	0f b7 c0             	movzx  eax,ax
c001b08b:	3d ff ff 00 00       	cmp    eax,0xffff
c001b090:	74 0c                	je     c001b09e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001b092:	53                   	push   ebx
c001b093:	56                   	push   esi
c001b094:	57                   	push   edi
c001b095:	55                   	push   ebp
c001b096:	e8 23 fe ff ff       	call   c001aebe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b09b:	83 c4 10             	add    esp,0x10
c001b09e:	43                   	inc    ebx
c001b09f:	83 fb 08             	cmp    ebx,0x8
c001b0a2:	75 d8                	jne    c001b07c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001b0a4:	83 c4 0c             	add    esp,0xc
c001b0a7:	5b                   	pop    ebx
c001b0a8:	5e                   	pop    esi
c001b0a9:	5f                   	pop    edi
c001b0aa:	5d                   	pop    ebp
c001b0ab:	c3                   	ret    

c001b0ac <PCI::detect()>:
c001b0ac:	56                   	push   esi
c001b0ad:	53                   	push   ebx
c001b0ae:	53                   	push   ebx
c001b0af:	31 db                	xor    ebx,ebx
c001b0b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b0b5:	6a 00                	push   0x0
c001b0b7:	6a 00                	push   0x0
c001b0b9:	6a 00                	push   0x0
c001b0bb:	56                   	push   esi
c001b0bc:	e8 35 f7 ff ff       	call   c001a7f6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b0c1:	83 c4 10             	add    esp,0x10
c001b0c4:	a8 80                	test   al,0x80
c001b0c6:	75 21                	jne    c001b0e9 <PCI::detect()+0x3d>
c001b0c8:	51                   	push   ecx
c001b0c9:	51                   	push   ecx
c001b0ca:	6a 00                	push   0x0
c001b0cc:	56                   	push   esi
c001b0cd:	e8 42 fc ff ff       	call   c001ad14 <PCI::checkBus(unsigned char)>
c001b0d2:	83 c4 10             	add    esp,0x10
c001b0d5:	eb 2a                	jmp    c001b101 <PCI::detect()+0x55>
c001b0d7:	52                   	push   edx
c001b0d8:	52                   	push   edx
c001b0d9:	53                   	push   ebx
c001b0da:	43                   	inc    ebx
c001b0db:	56                   	push   esi
c001b0dc:	e8 33 fc ff ff       	call   c001ad14 <PCI::checkBus(unsigned char)>
c001b0e1:	83 c4 10             	add    esp,0x10
c001b0e4:	83 fb 08             	cmp    ebx,0x8
c001b0e7:	74 18                	je     c001b101 <PCI::detect()+0x55>
c001b0e9:	53                   	push   ebx
c001b0ea:	6a 00                	push   0x0
c001b0ec:	6a 00                	push   0x0
c001b0ee:	56                   	push   esi
c001b0ef:	e8 de f6 ff ff       	call   c001a7d2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b0f4:	83 c4 10             	add    esp,0x10
c001b0f7:	0f b7 c0             	movzx  eax,ax
c001b0fa:	3d ff ff 00 00       	cmp    eax,0xffff
c001b0ff:	74 d6                	je     c001b0d7 <PCI::detect()+0x2b>
c001b101:	58                   	pop    eax
c001b102:	5b                   	pop    ebx
c001b103:	5e                   	pop    esi
c001b104:	c3                   	ret    
c001b105:	90                   	nop

c001b106 <IDE::close(int, int, void*)>:
c001b106:	83 c8 ff             	or     eax,0xffffffff
c001b109:	c3                   	ret    

c001b10a <IDE::IDE()>:
c001b10a:	83 ec 0c             	sub    esp,0xc
c001b10d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b111:	83 ec 08             	sub    esp,0x8
c001b114:	68 ac 23 02 c0       	push   0xc00223ac
c001b119:	50                   	push   eax
c001b11a:	e8 ad 12 ff ff       	call   c000c3cc <HardDiskController::HardDiskController(char const*)>
c001b11f:	83 c4 10             	add    esp,0x10
c001b122:	ba 3c 24 02 c0       	mov    edx,0xc002243c
c001b127:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b12b:	89 10                	mov    DWORD PTR [eax],edx
c001b12d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b131:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001b138:	90                   	nop
c001b139:	83 c4 0c             	add    esp,0xc
c001b13c:	c3                   	ret    
c001b13d:	90                   	nop

c001b13e <IDE::prepareInterrupt(unsigned char)>:
c001b13e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b143:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b147:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001b14f:	c3                   	ret    

c001b150 <selectDrive(unsigned char, unsigned char)>:
c001b150:	c3                   	ret    
c001b151:	90                   	nop

c001b152 <IDE::getBase(unsigned char)>:
c001b152:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001b157:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b15b:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001b163:	c3                   	ret    

c001b164 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001b164:	55                   	push   ebp
c001b165:	57                   	push   edi
c001b166:	56                   	push   esi
c001b167:	53                   	push   ebx
c001b168:	83 ec 1c             	sub    esp,0x1c
c001b16b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b16f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b173:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b177:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b17b:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001b17e:	80 f9 03             	cmp    cl,0x3
c001b181:	77 4f                	ja     c001b1d2 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001b183:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b187:	0f b6 f2             	movzx  esi,dl
c001b18a:	0f b6 db             	movzx  ebx,bl
c001b18d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001b190:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001b195:	80 ca 80             	or     dl,0x80
c001b198:	52                   	push   edx
c001b199:	6a 0c                	push   0xc
c001b19b:	56                   	push   esi
c001b19c:	57                   	push   edi
c001b19d:	e8 c2 ff ff ff       	call   c001b164 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b1a2:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001b1a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b1ab:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001b1af:	ee                   	out    dx,al
c001b1b0:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001b1b5:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001b1b9:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001b1bd:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b1c5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b1c9:	83 c4 2c             	add    esp,0x2c
c001b1cc:	5b                   	pop    ebx
c001b1cd:	5e                   	pop    esi
c001b1ce:	5f                   	pop    edi
c001b1cf:	5d                   	pop    ebp
c001b1d0:	eb 92                	jmp    c001b164 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b1d2:	0f b6 cb             	movzx  ecx,bl
c001b1d5:	83 f9 07             	cmp    ecx,0x7
c001b1d8:	77 12                	ja     c001b1ec <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001b1da:	0f b6 d2             	movzx  edx,dl
c001b1dd:	0f b6 db             	movzx  ebx,bl
c001b1e0:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001b1e8:	01 da                	add    edx,ebx
c001b1ea:	eb 2f                	jmp    c001b21b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b1ec:	83 f9 0d             	cmp    ecx,0xd
c001b1ef:	77 13                	ja     c001b204 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001b1f1:	0f b6 d2             	movzx  edx,dl
c001b1f4:	0f b6 db             	movzx  ebx,bl
c001b1f7:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001b1fe:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001b202:	eb 17                	jmp    c001b21b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b204:	83 f9 15             	cmp    ecx,0x15
c001b207:	77 13                	ja     c001b21c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001b209:	0f b6 d2             	movzx  edx,dl
c001b20c:	0f b6 db             	movzx  ebx,bl
c001b20f:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001b217:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001b21b:	ee                   	out    dx,al
c001b21c:	83 c4 1c             	add    esp,0x1c
c001b21f:	5b                   	pop    ebx
c001b220:	5e                   	pop    esi
c001b221:	5f                   	pop    edi
c001b222:	5d                   	pop    ebp
c001b223:	c3                   	ret    

c001b224 <IDE::read(unsigned char, unsigned char)>:
c001b224:	57                   	push   edi
c001b225:	56                   	push   esi
c001b226:	53                   	push   ebx
c001b227:	83 ec 10             	sub    esp,0x10
c001b22a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b22e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b232:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001b236:	8d 42 f8             	lea    eax,[edx-0x8]
c001b239:	3c 03                	cmp    al,0x3
c001b23b:	77 48                	ja     c001b285 <IDE::read(unsigned char, unsigned char)+0x61>
c001b23d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b241:	0f b6 f1             	movzx  esi,cl
c001b244:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001b247:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001b24c:	0c 80                	or     al,0x80
c001b24e:	50                   	push   eax
c001b24f:	6a 0c                	push   0xc
c001b251:	56                   	push   esi
c001b252:	53                   	push   ebx
c001b253:	e8 0c ff ff ff       	call   c001b164 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b258:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b25c:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001b261:	0f b6 d2             	movzx  edx,dl
c001b264:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b268:	ec                   	in     al,dx
c001b269:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b26d:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001b272:	52                   	push   edx
c001b273:	6a 0c                	push   0xc
c001b275:	56                   	push   esi
c001b276:	53                   	push   ebx
c001b277:	e8 e8 fe ff ff       	call   c001b164 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b27c:	83 c4 20             	add    esp,0x20
c001b27f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b283:	eb 4c                	jmp    c001b2d1 <IDE::read(unsigned char, unsigned char)+0xad>
c001b285:	0f b6 f2             	movzx  esi,dl
c001b288:	83 fe 07             	cmp    esi,0x7
c001b28b:	77 12                	ja     c001b29f <IDE::read(unsigned char, unsigned char)+0x7b>
c001b28d:	0f b6 c9             	movzx  ecx,cl
c001b290:	0f b6 d2             	movzx  edx,dl
c001b293:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001b29b:	01 c2                	add    edx,eax
c001b29d:	eb 31                	jmp    c001b2d0 <IDE::read(unsigned char, unsigned char)+0xac>
c001b29f:	83 fe 0d             	cmp    esi,0xd
c001b2a2:	77 13                	ja     c001b2b7 <IDE::read(unsigned char, unsigned char)+0x93>
c001b2a4:	0f b6 c9             	movzx  ecx,cl
c001b2a7:	0f b6 d2             	movzx  edx,dl
c001b2aa:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001b2b1:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b2b5:	eb 19                	jmp    c001b2d0 <IDE::read(unsigned char, unsigned char)+0xac>
c001b2b7:	31 c0                	xor    eax,eax
c001b2b9:	83 fe 15             	cmp    esi,0x15
c001b2bc:	77 13                	ja     c001b2d1 <IDE::read(unsigned char, unsigned char)+0xad>
c001b2be:	0f b6 c9             	movzx  ecx,cl
c001b2c1:	0f b6 d2             	movzx  edx,dl
c001b2c4:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001b2cc:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b2d0:	ec                   	in     al,dx
c001b2d1:	83 c4 10             	add    esp,0x10
c001b2d4:	5b                   	pop    ebx
c001b2d5:	5e                   	pop    esi
c001b2d6:	5f                   	pop    edi
c001b2d7:	c3                   	ret    

c001b2d8 <IDE::waitInterrupt(unsigned char)>:
c001b2d8:	55                   	push   ebp
c001b2d9:	57                   	push   edi
c001b2da:	56                   	push   esi
c001b2db:	53                   	push   ebx
c001b2dc:	31 db                	xor    ebx,ebx
c001b2de:	83 ec 0c             	sub    esp,0xc
c001b2e1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b2e5:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001b2ea:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001b2f2:	89 e8                	mov    eax,ebp
c001b2f4:	84 c0                	test   al,al
c001b2f6:	75 30                	jne    c001b328 <IDE::waitInterrupt(unsigned char)+0x50>
c001b2f8:	50                   	push   eax
c001b2f9:	6a 0c                	push   0xc
c001b2fb:	56                   	push   esi
c001b2fc:	57                   	push   edi
c001b2fd:	e8 22 ff ff ff       	call   c001b224 <IDE::read(unsigned char, unsigned char)>
c001b302:	83 c4 10             	add    esp,0x10
c001b305:	a8 01                	test   al,0x1
c001b307:	75 27                	jne    c001b330 <IDE::waitInterrupt(unsigned char)+0x58>
c001b309:	f6 c3 04             	test   bl,0x4
c001b30c:	75 12                	jne    c001b320 <IDE::waitInterrupt(unsigned char)+0x48>
c001b30e:	83 fb 32             	cmp    ebx,0x32
c001b311:	7e 0d                	jle    c001b320 <IDE::waitInterrupt(unsigned char)+0x48>
c001b313:	83 ec 0c             	sub    esp,0xc
c001b316:	6a 64                	push   0x64
c001b318:	e8 73 a4 ff ff       	call   c0015790 <milliTenthSleep(unsigned int)>
c001b31d:	83 c4 10             	add    esp,0x10
c001b320:	83 fb 3c             	cmp    ebx,0x3c
c001b323:	74 0b                	je     c001b330 <IDE::waitInterrupt(unsigned char)+0x58>
c001b325:	43                   	inc    ebx
c001b326:	eb c2                	jmp    c001b2ea <IDE::waitInterrupt(unsigned char)+0x12>
c001b328:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001b330:	83 c4 0c             	add    esp,0xc
c001b333:	89 e8                	mov    eax,ebp
c001b335:	5b                   	pop    ebx
c001b336:	5e                   	pop    esi
c001b337:	5f                   	pop    edi
c001b338:	5d                   	pop    ebp
c001b339:	c3                   	ret    

c001b33a <ideChannel0IRQHandler(regs*, void*)>:
c001b33a:	83 ec 10             	sub    esp,0x10
c001b33d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b341:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001b348:	6a 07                	push   0x7
c001b34a:	6a 00                	push   0x0
c001b34c:	50                   	push   eax
c001b34d:	e8 d2 fe ff ff       	call   c001b224 <IDE::read(unsigned char, unsigned char)>
c001b352:	83 c4 1c             	add    esp,0x1c
c001b355:	c3                   	ret    

c001b356 <ideChannel1IRQHandler(regs*, void*)>:
c001b356:	83 ec 10             	sub    esp,0x10
c001b359:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b35d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001b364:	6a 07                	push   0x7
c001b366:	6a 01                	push   0x1
c001b368:	50                   	push   eax
c001b369:	e8 b6 fe ff ff       	call   c001b224 <IDE::read(unsigned char, unsigned char)>
c001b36e:	83 c4 1c             	add    esp,0x1c
c001b371:	c3                   	ret    

c001b372 <IDE::enableIRQs(unsigned char, bool)>:
c001b372:	57                   	push   edi
c001b373:	b8 02 00 00 00       	mov    eax,0x2
c001b378:	56                   	push   esi
c001b379:	53                   	push   ebx
c001b37a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001b37f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b383:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b387:	74 02                	je     c001b38b <IDE::enableIRQs(unsigned char, bool)+0x19>
c001b389:	31 c0                	xor    eax,eax
c001b38b:	0f b6 db             	movzx  ebx,bl
c001b38e:	bf 04 00 00 00       	mov    edi,0x4
c001b393:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001b39a:	50                   	push   eax
c001b39b:	6a 0c                	push   0xc
c001b39d:	53                   	push   ebx
c001b39e:	56                   	push   esi
c001b39f:	e8 c0 fd ff ff       	call   c001b164 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b3a4:	83 c4 10             	add    esp,0x10
c001b3a7:	50                   	push   eax
c001b3a8:	6a 0c                	push   0xc
c001b3aa:	53                   	push   ebx
c001b3ab:	56                   	push   esi
c001b3ac:	e8 73 fe ff ff       	call   c001b224 <IDE::read(unsigned char, unsigned char)>
c001b3b1:	83 c4 10             	add    esp,0x10
c001b3b4:	4f                   	dec    edi
c001b3b5:	75 f0                	jne    c001b3a7 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001b3b7:	5b                   	pop    ebx
c001b3b8:	5e                   	pop    esi
c001b3b9:	5f                   	pop    edi
c001b3ba:	c3                   	ret    
c001b3bb:	90                   	nop

c001b3bc <IDE::open(int, int, void*)>:
c001b3bc:	55                   	push   ebp
c001b3bd:	57                   	push   edi
c001b3be:	56                   	push   esi
c001b3bf:	53                   	push   ebx
c001b3c0:	83 ec 1c             	sub    esp,0x1c
c001b3c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b3c7:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001b3ce:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001b3d7:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001b3e0:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001b3e7:	0f 85 da 02 00 00    	jne    c001b6c7 <IDE::open(int, int, void*)+0x30b>
c001b3ed:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001b3f3:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001b3f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b3fb:	83 e0 7f             	and    eax,0x7f
c001b3fe:	83 f8 05             	cmp    eax,0x5
c001b401:	74 05                	je     c001b408 <IDE::open(int, int, void*)+0x4c>
c001b403:	83 f8 0f             	cmp    eax,0xf
c001b406:	75 32                	jne    c001b43a <IDE::open(int, int, void*)+0x7e>
c001b408:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001b40e:	83 e0 fc             	and    eax,0xfffffffc
c001b411:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001b418:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001b41e:	83 e0 fc             	and    eax,0xfffffffc
c001b421:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001b428:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001b42e:	83 e0 fc             	and    eax,0xfffffffc
c001b431:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b438:	eb 14                	jmp    c001b44e <IDE::open(int, int, void*)+0x92>
c001b43a:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001b444:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001b44e:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c001b455:	bf f8 0c 00 00       	mov    edi,0xcf8
c001b45a:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001b461:	89 fa                	mov    edx,edi
c001b463:	89 f1                	mov    ecx,esi
c001b465:	c1 e1 10             	shl    ecx,0x10
c001b468:	89 e8                	mov    eax,ebp
c001b46a:	c1 e0 0b             	shl    eax,0xb
c001b46d:	09 c1                	or     ecx,eax
c001b46f:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001b476:	c1 e0 08             	shl    eax,0x8
c001b479:	09 c1                	or     ecx,eax
c001b47b:	89 c8                	mov    eax,ecx
c001b47d:	0d 08 00 00 80       	or     eax,0x80000008
c001b482:	ef                   	out    dx,eax
c001b483:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b488:	ed                   	in     eax,dx
c001b489:	c1 e8 10             	shr    eax,0x10
c001b48c:	3d ff ff 00 00       	cmp    eax,0xffff
c001b491:	0f 84 f9 00 00 00    	je     c001b590 <IDE::open(int, int, void*)+0x1d4>
c001b497:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001b49d:	89 fa                	mov    edx,edi
c001b49f:	89 c8                	mov    eax,ecx
c001b4a1:	ef                   	out    dx,eax
c001b4a2:	b0 fe                	mov    al,0xfe
c001b4a4:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b4a9:	ee                   	out    dx,al
c001b4aa:	89 c8                	mov    eax,ecx
c001b4ac:	89 fa                	mov    edx,edi
c001b4ae:	ef                   	out    dx,eax
c001b4af:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b4b4:	ed                   	in     eax,dx
c001b4b5:	3c fe                	cmp    al,0xfe
c001b4b7:	0f 85 a4 00 00 00    	jne    c001b561 <IDE::open(int, int, void*)+0x1a5>
c001b4bd:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c001b4c3:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001b4ca:	74 30                	je     c001b4fc <IDE::open(int, int, void*)+0x140>
c001b4cc:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001b4d2:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001b4d6:	83 ec 0c             	sub    esp,0xc
c001b4d9:	40                   	inc    eax
c001b4da:	0f b6 c0             	movzx  eax,al
c001b4dd:	50                   	push   eax
c001b4de:	55                   	push   ebp
c001b4df:	56                   	push   esi
c001b4e0:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001b4e6:	51                   	push   ecx
c001b4e7:	e8 38 3b ff ff       	call   c000f024 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001b4ec:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001b4f1:	83 c4 1c             	add    esp,0x1c
c001b4f4:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001b4fa:	eb 0a                	jmp    c001b506 <IDE::open(int, int, void*)+0x14a>
c001b4fc:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001b506:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001b50d:	bd f8 0c 00 00       	mov    ebp,0xcf8
c001b512:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001b519:	89 ea                	mov    edx,ebp
c001b51b:	c1 e1 10             	shl    ecx,0x10
c001b51e:	c1 e0 08             	shl    eax,0x8
c001b521:	09 c1                	or     ecx,eax
c001b523:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001b52a:	c1 e0 0b             	shl    eax,0xb
c001b52d:	09 c1                	or     ecx,eax
c001b52f:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001b535:	89 c8                	mov    eax,ecx
c001b537:	ef                   	out    dx,eax
c001b538:	8b bb 50 01 00 00    	mov    edi,DWORD PTR [ebx+0x150]
c001b53e:	be fc 0c 00 00       	mov    esi,0xcfc
c001b543:	89 f2                	mov    edx,esi
c001b545:	89 f8                	mov    eax,edi
c001b547:	ee                   	out    dx,al
c001b548:	89 c8                	mov    eax,ecx
c001b54a:	89 ea                	mov    edx,ebp
c001b54c:	ef                   	out    dx,eax
c001b54d:	89 f2                	mov    edx,esi
c001b54f:	ed                   	in     eax,dx
c001b550:	0f b6 c0             	movzx  eax,al
c001b553:	39 f8                	cmp    eax,edi
c001b555:	74 49                	je     c001b5a0 <IDE::open(int, int, void*)+0x1e4>
c001b557:	83 ec 0c             	sub    esp,0xc
c001b55a:	68 c4 23 02 c0       	push   0xc00223c4
c001b55f:	eb 37                	jmp    c001b598 <IDE::open(int, int, void*)+0x1dc>
c001b561:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001b56a:	75 1a                	jne    c001b586 <IDE::open(int, int, void*)+0x1ca>
c001b56c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001b571:	3d 8a 00 00 00       	cmp    eax,0x8a
c001b576:	74 05                	je     c001b57d <IDE::open(int, int, void*)+0x1c1>
c001b578:	83 c0 80             	add    eax,0xffffff80
c001b57b:	75 09                	jne    c001b586 <IDE::open(int, int, void*)+0x1ca>
c001b57d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b584:	eb 1a                	jmp    c001b5a0 <IDE::open(int, int, void*)+0x1e4>
c001b586:	83 ec 0c             	sub    esp,0xc
c001b589:	68 cc 23 02 c0       	push   0xc00223cc
c001b58e:	eb 08                	jmp    c001b598 <IDE::open(int, int, void*)+0x1dc>
c001b590:	83 ec 0c             	sub    esp,0xc
c001b593:	68 fd 23 02 c0       	push   0xc00223fd
c001b598:	e8 d4 55 ff ff       	call   c0010b71 <KePanic(char const*)>
c001b59d:	83 c4 10             	add    esp,0x10
c001b5a0:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001b5a7:	74 1a                	je     c001b5c3 <IDE::open(int, int, void*)+0x207>
c001b5a9:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001b5af:	83 e0 fc             	and    eax,0xfffffffc
c001b5b2:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001b5b9:	83 c0 08             	add    eax,0x8
c001b5bc:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001b5c3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001b5c9:	89 c2                	mov    edx,eax
c001b5cb:	83 e2 0f             	and    edx,0xf
c001b5ce:	83 fa 08             	cmp    edx,0x8
c001b5d1:	75 0a                	jne    c001b5dd <IDE::open(int, int, void*)+0x221>
c001b5d3:	83 e8 02             	sub    eax,0x2
c001b5d6:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b5dd:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001b5e3:	89 c2                	mov    edx,eax
c001b5e5:	83 e2 0f             	and    edx,0xf
c001b5e8:	83 fa 08             	cmp    edx,0x8
c001b5eb:	75 0a                	jne    c001b5f7 <IDE::open(int, int, void*)+0x23b>
c001b5ed:	83 e8 02             	sub    eax,0x2
c001b5f0:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b5f7:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001b5fe:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001b605:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b608:	89 d0                	mov    eax,edx
c001b60a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b60e:	8d 7a 01             	lea    edi,[edx+0x1]
c001b611:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001b615:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001b619:	83 e1 3f             	and    ecx,0x3f
c001b61c:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001b620:	89 f9                	mov    ecx,edi
c001b622:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001b629:	8d 78 02             	lea    edi,[eax+0x2]
c001b62c:	0f b6 c9             	movzx  ecx,cl
c001b62f:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b632:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001b636:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b63a:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001b63e:	83 e2 3f             	and    edx,0x3f
c001b641:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001b645:	89 f9                	mov    ecx,edi
c001b647:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001b64d:	8d 78 03             	lea    edi,[eax+0x3]
c001b650:	0f b6 d1             	movzx  edx,cl
c001b653:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b656:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001b65a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b65e:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001b662:	83 e1 3f             	and    ecx,0x3f
c001b665:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001b669:	89 f9                	mov    ecx,edi
c001b66b:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001b671:	8d 78 04             	lea    edi,[eax+0x4]
c001b674:	0f b6 c9             	movzx  ecx,cl
c001b677:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b67a:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001b67e:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b682:	89 fa                	mov    edx,edi
c001b684:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001b68a:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001b68e:	83 e2 3f             	and    edx,0x3f
c001b691:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001b695:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001b69c:	66 85 f6             	test   si,si
c001b69f:	74 65                	je     c001b706 <IDE::open(int, int, void*)+0x34a>
c001b6a1:	89 f9                	mov    ecx,edi
c001b6a3:	83 c0 05             	add    eax,0x5
c001b6a6:	0f b6 d1             	movzx  edx,cl
c001b6a9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b6ac:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b6b0:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001b6b4:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001b6ba:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001b6be:	83 e0 3f             	and    eax,0x3f
c001b6c1:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001b6c5:	eb 3f                	jmp    c001b706 <IDE::open(int, int, void*)+0x34a>
c001b6c7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b6ce:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001b6d4:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001b6db:	05 06 02 00 00       	add    eax,0x206
c001b6e0:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b6e7:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001b6ee:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001b6f5:	05 06 02 00 00       	add    eax,0x206
c001b6fa:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b701:	e9 bd fe ff ff       	jmp    c001b5c3 <IDE::open(int, int, void*)+0x207>
c001b706:	50                   	push   eax
c001b707:	50                   	push   eax
c001b708:	6a 00                	push   0x0
c001b70a:	53                   	push   ebx
c001b70b:	e8 2e fa ff ff       	call   c001b13e <IDE::prepareInterrupt(unsigned char)>
c001b710:	5a                   	pop    edx
c001b711:	59                   	pop    ecx
c001b712:	6a 01                	push   0x1
c001b714:	53                   	push   ebx
c001b715:	e8 24 fa ff ff       	call   c001b13e <IDE::prepareInterrupt(unsigned char)>
c001b71a:	83 c4 0c             	add    esp,0xc
c001b71d:	6a 00                	push   0x0
c001b71f:	6a 00                	push   0x0
c001b721:	53                   	push   ebx
c001b722:	e8 4b fc ff ff       	call   c001b372 <IDE::enableIRQs(unsigned char, bool)>
c001b727:	83 c4 0c             	add    esp,0xc
c001b72a:	6a 00                	push   0x0
c001b72c:	6a 01                	push   0x1
c001b72e:	53                   	push   ebx
c001b72f:	e8 3e fc ff ff       	call   c001b372 <IDE::enableIRQs(unsigned char, bool)>
c001b734:	83 c4 10             	add    esp,0x10
c001b737:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001b73e:	74 34                	je     c001b774 <IDE::open(int, int, void*)+0x3b8>
c001b740:	83 ec 0c             	sub    esp,0xc
c001b743:	53                   	push   ebx
c001b744:	6a 01                	push   0x1
c001b746:	68 3a b3 01 c0       	push   0xc001b33a
c001b74b:	6a 0e                	push   0xe
c001b74d:	53                   	push   ebx
c001b74e:	e8 e1 08 ff ff       	call   c000c034 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b753:	83 c4 14             	add    esp,0x14
c001b756:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001b75c:	53                   	push   ebx
c001b75d:	6a 01                	push   0x1
c001b75f:	68 56 b3 01 c0       	push   0xc001b356
c001b764:	6a 0f                	push   0xf
c001b766:	53                   	push   ebx
c001b767:	e8 c8 08 ff ff       	call   c000c034 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b76c:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001b772:	eb 38                	jmp    c001b7ac <IDE::open(int, int, void*)+0x3f0>
c001b774:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001b77e:	83 ec 0c             	sub    esp,0xc
c001b781:	53                   	push   ebx
c001b782:	6a 00                	push   0x0
c001b784:	68 3a b3 01 c0       	push   0xc001b33a
c001b789:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001b78f:	53                   	push   ebx
c001b790:	e8 9f 08 ff ff       	call   c000c034 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b795:	83 c4 14             	add    esp,0x14
c001b798:	53                   	push   ebx
c001b799:	6a 00                	push   0x0
c001b79b:	68 56 b3 01 c0       	push   0xc001b356
c001b7a0:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001b7a6:	53                   	push   ebx
c001b7a7:	e8 88 08 ff ff       	call   c000c034 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b7ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b7ae:	83 c4 20             	add    esp,0x20
c001b7b1:	83 ec 0c             	sub    esp,0xc
c001b7b4:	53                   	push   ebx
c001b7b5:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001b7b8:	83 c4 0c             	add    esp,0xc
c001b7bb:	6a 07                	push   0x7
c001b7bd:	6a 00                	push   0x0
c001b7bf:	53                   	push   ebx
c001b7c0:	e8 5f fa ff ff       	call   c001b224 <IDE::read(unsigned char, unsigned char)>
c001b7c5:	83 c4 0c             	add    esp,0xc
c001b7c8:	6a 07                	push   0x7
c001b7ca:	6a 01                	push   0x1
c001b7cc:	53                   	push   ebx
c001b7cd:	e8 52 fa ff ff       	call   c001b224 <IDE::read(unsigned char, unsigned char)>
c001b7d2:	83 c4 0c             	add    esp,0xc
c001b7d5:	6a 01                	push   0x1
c001b7d7:	6a 00                	push   0x0
c001b7d9:	53                   	push   ebx
c001b7da:	e8 93 fb ff ff       	call   c001b372 <IDE::enableIRQs(unsigned char, bool)>
c001b7df:	83 c4 0c             	add    esp,0xc
c001b7e2:	6a 01                	push   0x1
c001b7e4:	6a 01                	push   0x1
c001b7e6:	53                   	push   ebx
c001b7e7:	e8 86 fb ff ff       	call   c001b372 <IDE::enableIRQs(unsigned char, bool)>
c001b7ec:	83 c4 2c             	add    esp,0x2c
c001b7ef:	31 c0                	xor    eax,eax
c001b7f1:	5b                   	pop    ebx
c001b7f2:	5e                   	pop    esi
c001b7f3:	5f                   	pop    edi
c001b7f4:	5d                   	pop    ebp
c001b7f5:	c3                   	ret    

c001b7f6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001b7f6:	55                   	push   ebp
c001b7f7:	57                   	push   edi
c001b7f8:	56                   	push   esi
c001b7f9:	53                   	push   ebx
c001b7fa:	83 ec 1c             	sub    esp,0x1c
c001b7fd:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b801:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b805:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b809:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b80d:	8d 42 f8             	lea    eax,[edx-0x8]
c001b810:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001b814:	3c 03                	cmp    al,0x3
c001b816:	77 5a                	ja     c001b872 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001b818:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b81c:	0f b6 db             	movzx  ebx,bl
c001b81f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b823:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001b826:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b82b:	0c 80                	or     al,0x80
c001b82d:	50                   	push   eax
c001b82e:	6a 0c                	push   0xc
c001b830:	53                   	push   ebx
c001b831:	56                   	push   esi
c001b832:	e8 2d f9 ff ff       	call   c001b164 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b837:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b83b:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001b840:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b844:	0f b6 d2             	movzx  edx,dl
c001b847:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b84b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b84d:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b852:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001b856:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b85a:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b862:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b866:	83 c4 2c             	add    esp,0x2c
c001b869:	5b                   	pop    ebx
c001b86a:	5e                   	pop    esi
c001b86b:	5f                   	pop    edi
c001b86c:	5d                   	pop    ebp
c001b86d:	e9 f2 f8 ff ff       	jmp    c001b164 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b872:	0f b6 c2             	movzx  eax,dl
c001b875:	83 f8 07             	cmp    eax,0x7
c001b878:	77 12                	ja     c001b88c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001b87a:	0f b6 db             	movzx  ebx,bl
c001b87d:	0f b6 c2             	movzx  eax,dl
c001b880:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001b888:	01 c2                	add    edx,eax
c001b88a:	eb 2f                	jmp    c001b8bb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001b88c:	83 f8 0d             	cmp    eax,0xd
c001b88f:	77 13                	ja     c001b8a4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001b891:	0f b6 db             	movzx  ebx,bl
c001b894:	0f b6 d2             	movzx  edx,dl
c001b897:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001b89e:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b8a2:	eb 17                	jmp    c001b8bb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001b8a4:	83 f8 15             	cmp    eax,0x15
c001b8a7:	77 14                	ja     c001b8bd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001b8a9:	0f b6 db             	movzx  ebx,bl
c001b8ac:	0f b6 d2             	movzx  edx,dl
c001b8af:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001b8b7:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b8bb:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b8bd:	83 c4 1c             	add    esp,0x1c
c001b8c0:	5b                   	pop    ebx
c001b8c1:	5e                   	pop    esi
c001b8c2:	5f                   	pop    edi
c001b8c3:	5d                   	pop    ebp
c001b8c4:	c3                   	ret    
c001b8c5:	90                   	nop

c001b8c6 <IDE::detect()>:
c001b8c6:	55                   	push   ebp
c001b8c7:	57                   	push   edi
c001b8c8:	56                   	push   esi
c001b8c9:	53                   	push   ebx
c001b8ca:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b8d0:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001b8d7:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001b8de:	0f 85 9e 02 00 00    	jne    c001bb82 <IDE::detect()+0x2bc>
c001b8e4:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001b8eb:	31 f6                	xor    esi,esi
c001b8ed:	31 ff                	xor    edi,edi
c001b8ef:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b8f7:	89 f8                	mov    eax,edi
c001b8f9:	c1 e0 06             	shl    eax,0x6
c001b8fc:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001b904:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b908:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b90c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b910:	c1 e0 04             	shl    eax,0x4
c001b913:	83 c8 a0             	or     eax,0xffffffa0
c001b916:	0f b6 c0             	movzx  eax,al
c001b919:	50                   	push   eax
c001b91a:	6a 06                	push   0x6
c001b91c:	56                   	push   esi
c001b91d:	53                   	push   ebx
c001b91e:	e8 41 f8 ff ff       	call   c001b164 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b923:	83 c4 0c             	add    esp,0xc
c001b926:	6a 0c                	push   0xc
c001b928:	56                   	push   esi
c001b929:	53                   	push   ebx
c001b92a:	e8 f5 f8 ff ff       	call   c001b224 <IDE::read(unsigned char, unsigned char)>
c001b92f:	83 c4 0c             	add    esp,0xc
c001b932:	6a 0c                	push   0xc
c001b934:	56                   	push   esi
c001b935:	53                   	push   ebx
c001b936:	e8 e9 f8 ff ff       	call   c001b224 <IDE::read(unsigned char, unsigned char)>
c001b93b:	83 c4 0c             	add    esp,0xc
c001b93e:	6a 0c                	push   0xc
c001b940:	56                   	push   esi
c001b941:	53                   	push   ebx
c001b942:	e8 dd f8 ff ff       	call   c001b224 <IDE::read(unsigned char, unsigned char)>
c001b947:	83 c4 0c             	add    esp,0xc
c001b94a:	6a 0c                	push   0xc
c001b94c:	56                   	push   esi
c001b94d:	53                   	push   ebx
c001b94e:	e8 d1 f8 ff ff       	call   c001b224 <IDE::read(unsigned char, unsigned char)>
c001b953:	68 ec 00 00 00       	push   0xec
c001b958:	6a 07                	push   0x7
c001b95a:	56                   	push   esi
c001b95b:	53                   	push   ebx
c001b95c:	e8 03 f8 ff ff       	call   c001b164 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b961:	83 c4 1c             	add    esp,0x1c
c001b964:	6a 0c                	push   0xc
c001b966:	56                   	push   esi
c001b967:	53                   	push   ebx
c001b968:	e8 b7 f8 ff ff       	call   c001b224 <IDE::read(unsigned char, unsigned char)>
c001b96d:	83 c4 0c             	add    esp,0xc
c001b970:	6a 0c                	push   0xc
c001b972:	56                   	push   esi
c001b973:	53                   	push   ebx
c001b974:	e8 ab f8 ff ff       	call   c001b224 <IDE::read(unsigned char, unsigned char)>
c001b979:	83 c4 0c             	add    esp,0xc
c001b97c:	6a 0c                	push   0xc
c001b97e:	56                   	push   esi
c001b97f:	53                   	push   ebx
c001b980:	e8 9f f8 ff ff       	call   c001b224 <IDE::read(unsigned char, unsigned char)>
c001b985:	83 c4 0c             	add    esp,0xc
c001b988:	6a 0c                	push   0xc
c001b98a:	56                   	push   esi
c001b98b:	53                   	push   ebx
c001b98c:	e8 93 f8 ff ff       	call   c001b224 <IDE::read(unsigned char, unsigned char)>
c001b991:	83 c4 0c             	add    esp,0xc
c001b994:	6a 0c                	push   0xc
c001b996:	56                   	push   esi
c001b997:	53                   	push   ebx
c001b998:	e8 87 f8 ff ff       	call   c001b224 <IDE::read(unsigned char, unsigned char)>
c001b99d:	83 c4 10             	add    esp,0x10
c001b9a0:	84 c0                	test   al,al
c001b9a2:	0f 84 61 01 00 00    	je     c001bb09 <IDE::detect()+0x243>
c001b9a8:	31 ed                	xor    ebp,ebp
c001b9aa:	50                   	push   eax
c001b9ab:	6a 0c                	push   0xc
c001b9ad:	56                   	push   esi
c001b9ae:	53                   	push   ebx
c001b9af:	e8 70 f8 ff ff       	call   c001b224 <IDE::read(unsigned char, unsigned char)>
c001b9b4:	83 c4 10             	add    esp,0x10
c001b9b7:	a8 01                	test   al,0x1
c001b9b9:	0f 85 6b 01 00 00    	jne    c001bb2a <IDE::detect()+0x264>
c001b9bf:	a8 80                	test   al,0x80
c001b9c1:	75 04                	jne    c001b9c7 <IDE::detect()+0x101>
c001b9c3:	a8 08                	test   al,0x8
c001b9c5:	75 23                	jne    c001b9ea <IDE::detect()+0x124>
c001b9c7:	45                   	inc    ebp
c001b9c8:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001b9ce:	7e da                	jle    c001b9aa <IDE::detect()+0xe4>
c001b9d0:	83 ec 0c             	sub    esp,0xc
c001b9d3:	6a 32                	push   0x32
c001b9d5:	e8 b6 9d ff ff       	call   c0015790 <milliTenthSleep(unsigned int)>
c001b9da:	83 c4 10             	add    esp,0x10
c001b9dd:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001b9e3:	75 c5                	jne    c001b9aa <IDE::detect()+0xe4>
c001b9e5:	e9 40 01 00 00       	jmp    c001bb2a <IDE::detect()+0x264>
c001b9ea:	31 c9                	xor    ecx,ecx
c001b9ec:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001b9f0:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c001b9f4:	83 ec 0c             	sub    esp,0xc
c001b9f7:	68 80 00 00 00       	push   0x80
c001b9fc:	55                   	push   ebp
c001b9fd:	6a 00                	push   0x0
c001b9ff:	56                   	push   esi
c001ba00:	53                   	push   ebx
c001ba01:	e8 f0 fd ff ff       	call   c001b7f6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001ba06:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001ba0b:	89 f8                	mov    eax,edi
c001ba0d:	c1 e0 06             	shl    eax,0x6
c001ba10:	01 d8                	add    eax,ebx
c001ba12:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001ba19:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001ba20:	89 d1                	mov    ecx,edx
c001ba22:	89 f2                	mov    edx,esi
c001ba24:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001ba2a:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001ba2e:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001ba34:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ba38:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001ba3f:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001ba47:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001ba4e:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001ba56:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001ba5c:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001ba63:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001ba69:	8d 54 24 58          	lea    edx,[esp+0x58]
c001ba6d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001ba71:	83 c4 20             	add    esp,0x20
c001ba74:	8a 55 37             	mov    dl,BYTE PTR [ebp+0x37]
c001ba77:	83 c5 02             	add    ebp,0x2
c001ba7a:	83 c0 02             	add    eax,0x2
c001ba7d:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001ba83:	8a 55 34             	mov    dl,BYTE PTR [ebp+0x34]
c001ba86:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001ba8c:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c001ba90:	75 e2                	jne    c001ba74 <IDE::detect()+0x1ae>
c001ba92:	89 f8                	mov    eax,edi
c001ba94:	c1 e0 06             	shl    eax,0x6
c001ba97:	01 d8                	add    eax,ebx
c001ba99:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001baa0:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001baa7:	c1 ea 09             	shr    edx,0x9
c001baaa:	83 e2 01             	and    edx,0x1
c001baad:	80 e1 01             	and    cl,0x1
c001bab0:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001bab6:	75 22                	jne    c001bada <IDE::detect()+0x214>
c001bab8:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001babf:	74 47                	je     c001bb08 <IDE::detect()+0x242>
c001bac1:	83 ec 0c             	sub    esp,0xc
c001bac4:	68 7c 01 00 00       	push   0x17c
c001bac9:	e8 fd bf fe ff       	call   c0007acb <malloc>
c001bace:	89 04 24             	mov    DWORD PTR [esp],eax
c001bad1:	89 c5                	mov    ebp,eax
c001bad3:	e8 16 05 00 00       	call   c001bfee <ATA::ATA()>
c001bad8:	eb 17                	jmp    c001baf1 <IDE::detect()+0x22b>
c001bada:	83 ec 0c             	sub    esp,0xc
c001badd:	68 84 01 00 00       	push   0x184
c001bae2:	e8 e4 bf fe ff       	call   c0007acb <malloc>
c001bae7:	89 04 24             	mov    DWORD PTR [esp],eax
c001baea:	89 c5                	mov    ebp,eax
c001baec:	e8 6f 0e 00 00       	call   c001c960 <ATAPI::ATAPI()>
c001baf1:	5a                   	pop    edx
c001baf2:	59                   	pop    ecx
c001baf3:	55                   	push   ebp
c001baf4:	53                   	push   ebx
c001baf5:	e8 8e 05 ff ff       	call   c000c088 <Device::addChild(Device*)>
c001bafa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bafd:	53                   	push   ebx
c001bafe:	57                   	push   edi
c001baff:	6a 00                	push   0x0
c001bb01:	55                   	push   ebp
c001bb02:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bb05:	83 c4 20             	add    esp,0x20
c001bb08:	47                   	inc    edi
c001bb09:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001bb0e:	74 0d                	je     c001bb1d <IDE::detect()+0x257>
c001bb10:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001bb18:	e9 da fd ff ff       	jmp    c001b8f7 <IDE::detect()+0x31>
c001bb1d:	4e                   	dec    esi
c001bb1e:	74 62                	je     c001bb82 <IDE::detect()+0x2bc>
c001bb20:	be 01 00 00 00       	mov    esi,0x1
c001bb25:	e9 c5 fd ff ff       	jmp    c001b8ef <IDE::detect()+0x29>
c001bb2a:	50                   	push   eax
c001bb2b:	6a 04                	push   0x4
c001bb2d:	56                   	push   esi
c001bb2e:	53                   	push   ebx
c001bb2f:	e8 f0 f6 ff ff       	call   c001b224 <IDE::read(unsigned char, unsigned char)>
c001bb34:	83 c4 0c             	add    esp,0xc
c001bb37:	6a 05                	push   0x5
c001bb39:	56                   	push   esi
c001bb3a:	53                   	push   ebx
c001bb3b:	89 c5                	mov    ebp,eax
c001bb3d:	e8 e2 f6 ff ff       	call   c001b224 <IDE::read(unsigned char, unsigned char)>
c001bb42:	89 e9                	mov    ecx,ebp
c001bb44:	83 c4 10             	add    esp,0x10
c001bb47:	0f b6 e9             	movzx  ebp,cl
c001bb4a:	83 fd 14             	cmp    ebp,0x14
c001bb4d:	74 2d                	je     c001bb7c <IDE::detect()+0x2b6>
c001bb4f:	83 fd 69             	cmp    ebp,0x69
c001bb52:	75 b5                	jne    c001bb09 <IDE::detect()+0x243>
c001bb54:	3c 96                	cmp    al,0x96
c001bb56:	75 b1                	jne    c001bb09 <IDE::detect()+0x243>
c001bb58:	68 a1 00 00 00       	push   0xa1
c001bb5d:	6a 07                	push   0x7
c001bb5f:	56                   	push   esi
c001bb60:	53                   	push   ebx
c001bb61:	e8 fe f5 ff ff       	call   c001b164 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bb66:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001bb6d:	e8 1e 9c ff ff       	call   c0015790 <milliTenthSleep(unsigned int)>
c001bb72:	83 c4 10             	add    esp,0x10
c001bb75:	b1 01                	mov    cl,0x1
c001bb77:	e9 70 fe ff ff       	jmp    c001b9ec <IDE::detect()+0x126>
c001bb7c:	3c eb                	cmp    al,0xeb
c001bb7e:	75 cf                	jne    c001bb4f <IDE::detect()+0x289>
c001bb80:	eb d6                	jmp    c001bb58 <IDE::detect()+0x292>
c001bb82:	81 c4 1c 02 00 00    	add    esp,0x21c
c001bb88:	5b                   	pop    ebx
c001bb89:	5e                   	pop    esi
c001bb8a:	5f                   	pop    edi
c001bb8b:	5d                   	pop    ebp
c001bb8c:	c3                   	ret    
c001bb8d:	90                   	nop

c001bb8e <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001bb8e:	55                   	push   ebp
c001bb8f:	57                   	push   edi
c001bb90:	56                   	push   esi
c001bb91:	53                   	push   ebx
c001bb92:	83 ec 1c             	sub    esp,0x1c
c001bb95:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001bb99:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001bb9d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001bba1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bba5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bba9:	88 c3                	mov    bl,al
c001bbab:	25 ff 00 00 00       	and    eax,0xff
c001bbb0:	0f 84 88 00 00 00    	je     c001bc3e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001bbb6:	83 ec 0c             	sub    esp,0xc
c001bbb9:	89 c7                	mov    edi,eax
c001bbbb:	68 27 24 02 c0       	push   0xc0022427
c001bbc0:	e8 39 ed fe ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c001bbc5:	83 c4 10             	add    esp,0x10
c001bbc8:	83 ff 01             	cmp    edi,0x1
c001bbcb:	74 6b                	je     c001bc38 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001bbcd:	83 ff 02             	cmp    edi,0x2
c001bbd0:	75 58                	jne    c001bc2a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001bbd2:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001bbd7:	50                   	push   eax
c001bbd8:	6a 01                	push   0x1
c001bbda:	01 ff                	add    edi,edi
c001bbdc:	09 fe                	or     esi,edi
c001bbde:	89 f0                	mov    eax,esi
c001bbe0:	0f b6 f0             	movzx  esi,al
c001bbe3:	c1 e6 06             	shl    esi,0x6
c001bbe6:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001bbee:	50                   	push   eax
c001bbef:	55                   	push   ebp
c001bbf0:	e8 2f f6 ff ff       	call   c001b224 <IDE::read(unsigned char, unsigned char)>
c001bbf5:	83 c4 10             	add    esp,0x10
c001bbf8:	a8 01                	test   al,0x1
c001bbfa:	74 02                	je     c001bbfe <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001bbfc:	b3 07                	mov    bl,0x7
c001bbfe:	a8 02                	test   al,0x2
c001bc00:	74 02                	je     c001bc04 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001bc02:	b3 03                	mov    bl,0x3
c001bc04:	a8 04                	test   al,0x4
c001bc06:	74 02                	je     c001bc0a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001bc08:	b3 14                	mov    bl,0x14
c001bc0a:	a8 08                	test   al,0x8
c001bc0c:	74 02                	je     c001bc10 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001bc0e:	b3 03                	mov    bl,0x3
c001bc10:	a8 10                	test   al,0x10
c001bc12:	74 02                	je     c001bc16 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001bc14:	b3 15                	mov    bl,0x15
c001bc16:	a8 20                	test   al,0x20
c001bc18:	74 02                	je     c001bc1c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001bc1a:	b3 03                	mov    bl,0x3
c001bc1c:	a8 40                	test   al,0x40
c001bc1e:	74 02                	je     c001bc22 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001bc20:	b3 16                	mov    bl,0x16
c001bc22:	a8 80                	test   al,0x80
c001bc24:	74 18                	je     c001bc3e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001bc26:	b3 0d                	mov    bl,0xd
c001bc28:	eb 14                	jmp    c001bc3e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001bc2a:	83 ff 03             	cmp    edi,0x3
c001bc2d:	74 0d                	je     c001bc3c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001bc2f:	83 ff 04             	cmp    edi,0x4
c001bc32:	75 0a                	jne    c001bc3e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001bc34:	b3 08                	mov    bl,0x8
c001bc36:	eb 06                	jmp    c001bc3e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001bc38:	b3 13                	mov    bl,0x13
c001bc3a:	eb 02                	jmp    c001bc3e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001bc3c:	b3 17                	mov    bl,0x17
c001bc3e:	83 c4 1c             	add    esp,0x1c
c001bc41:	88 d8                	mov    al,bl
c001bc43:	5b                   	pop    ebx
c001bc44:	5e                   	pop    esi
c001bc45:	5f                   	pop    edi
c001bc46:	5d                   	pop    ebp
c001bc47:	c3                   	ret    

c001bc48 <IDE::polling(unsigned char, unsigned int)>:
c001bc48:	57                   	push   edi
c001bc49:	56                   	push   esi
c001bc4a:	53                   	push   ebx
c001bc4b:	bb 04 00 00 00       	mov    ebx,0x4
c001bc50:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001bc54:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001bc59:	52                   	push   edx
c001bc5a:	6a 0c                	push   0xc
c001bc5c:	56                   	push   esi
c001bc5d:	57                   	push   edi
c001bc5e:	e8 c1 f5 ff ff       	call   c001b224 <IDE::read(unsigned char, unsigned char)>
c001bc63:	83 c4 10             	add    esp,0x10
c001bc66:	4b                   	dec    ebx
c001bc67:	75 f0                	jne    c001bc59 <IDE::polling(unsigned char, unsigned int)+0x11>
c001bc69:	bb a0 86 01 00       	mov    ebx,0x186a0
c001bc6e:	50                   	push   eax
c001bc6f:	6a 0c                	push   0xc
c001bc71:	56                   	push   esi
c001bc72:	57                   	push   edi
c001bc73:	e8 ac f5 ff ff       	call   c001b224 <IDE::read(unsigned char, unsigned char)>
c001bc78:	83 c4 10             	add    esp,0x10
c001bc7b:	a8 01                	test   al,0x1
c001bc7d:	75 17                	jne    c001bc96 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001bc7f:	a8 20                	test   al,0x20
c001bc81:	75 0f                	jne    c001bc92 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001bc83:	4b                   	dec    ebx
c001bc84:	74 10                	je     c001bc96 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001bc86:	a8 80                	test   al,0x80
c001bc88:	75 e4                	jne    c001bc6e <IDE::polling(unsigned char, unsigned int)+0x26>
c001bc8a:	a8 08                	test   al,0x8
c001bc8c:	74 e0                	je     c001bc6e <IDE::polling(unsigned char, unsigned int)+0x26>
c001bc8e:	31 c0                	xor    eax,eax
c001bc90:	eb 06                	jmp    c001bc98 <IDE::polling(unsigned char, unsigned int)+0x50>
c001bc92:	b0 01                	mov    al,0x1
c001bc94:	eb 02                	jmp    c001bc98 <IDE::polling(unsigned char, unsigned int)+0x50>
c001bc96:	b0 02                	mov    al,0x2
c001bc98:	5b                   	pop    ebx
c001bc99:	5e                   	pop    esi
c001bc9a:	5f                   	pop    edi
c001bc9b:	c3                   	ret    

c001bc9c <SATABus::close(int, int, void*)>:
c001bc9c:	31 c0                	xor    eax,eax
c001bc9e:	c3                   	ret    
c001bc9f:	90                   	nop

c001bca0 <SATABus::detect()>:
c001bca0:	c3                   	ret    
c001bca1:	90                   	nop

c001bca2 <SATABus::SATABus()>:
c001bca2:	83 ec 0c             	sub    esp,0xc
c001bca5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bca9:	83 ec 08             	sub    esp,0x8
c001bcac:	68 60 24 02 c0       	push   0xc0022460
c001bcb1:	50                   	push   eax
c001bcb2:	e8 15 07 ff ff       	call   c000c3cc <HardDiskController::HardDiskController(char const*)>
c001bcb7:	83 c4 10             	add    esp,0x10
c001bcba:	ba 8c 24 02 c0       	mov    edx,0xc002248c
c001bcbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcc3:	89 10                	mov    DWORD PTR [eax],edx
c001bcc5:	83 ec 0c             	sub    esp,0xc
c001bcc8:	6a 50                	push   0x50
c001bcca:	e8 d5 c1 fe ff       	call   c0007ea4 <Phys::allocateContiguousPages(int)>
c001bccf:	83 c4 10             	add    esp,0x10
c001bcd2:	89 c2                	mov    edx,eax
c001bcd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcd8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001bcde:	83 ec 0c             	sub    esp,0xc
c001bce1:	6a 50                	push   0x50
c001bce3:	e8 01 d9 fe ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c001bce8:	83 c4 10             	add    esp,0x10
c001bceb:	89 c2                	mov    edx,eax
c001bced:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcf1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001bcf7:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c001bcfc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bd00:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001bd06:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bd0a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001bd10:	83 ec 0c             	sub    esp,0xc
c001bd13:	6a 03                	push   0x3
c001bd15:	6a 50                	push   0x50
c001bd17:	51                   	push   ecx
c001bd18:	52                   	push   edx
c001bd19:	50                   	push   eax
c001bd1a:	e8 dd e1 fe ff       	call   c0009efc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001bd1f:	83 c4 20             	add    esp,0x20
c001bd22:	90                   	nop
c001bd23:	83 c4 0c             	add    esp,0xc
c001bd26:	c3                   	ret    
c001bd27:	90                   	nop

c001bd28 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001bd28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bd2c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001bd2f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001bd32:	09 c2                	or     edx,eax
c001bd34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd38:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001bd3e:	8b 08                	mov    ecx,DWORD PTR [eax]
c001bd40:	31 c0                	xor    eax,eax
c001bd42:	c1 e9 08             	shr    ecx,0x8
c001bd45:	83 e1 0f             	and    ecx,0xf
c001bd48:	39 c8                	cmp    eax,ecx
c001bd4a:	74 0a                	je     c001bd56 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001bd4c:	f6 c2 01             	test   dl,0x1
c001bd4f:	74 08                	je     c001bd59 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001bd51:	d1 ea                	shr    edx,1
c001bd53:	40                   	inc    eax
c001bd54:	eb f2                	jmp    c001bd48 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001bd56:	83 c8 ff             	or     eax,0xffffffff
c001bd59:	c3                   	ret    

c001bd5a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001bd5a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bd5e:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001bd61:	89 c2                	mov    edx,eax
c001bd63:	c1 ea 08             	shr    edx,0x8
c001bd66:	83 e2 0f             	and    edx,0xf
c001bd69:	4a                   	dec    edx
c001bd6a:	75 32                	jne    c001bd9e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001bd6c:	83 e0 0f             	and    eax,0xf
c001bd6f:	83 f8 03             	cmp    eax,0x3
c001bd72:	75 2a                	jne    c001bd9e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001bd74:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001bd77:	b8 02 00 00 00       	mov    eax,0x2
c001bd7c:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001bd82:	74 1c                	je     c001bda0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001bd84:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001bd8a:	b8 04 00 00 00       	mov    eax,0x4
c001bd8f:	74 0f                	je     c001bda0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001bd91:	31 c0                	xor    eax,eax
c001bd93:	83 fa 03             	cmp    edx,0x3
c001bd96:	0f 94 c0             	sete   al
c001bd99:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001bd9d:	c3                   	ret    
c001bd9e:	31 c0                	xor    eax,eax
c001bda0:	c3                   	ret    
c001bda1:	90                   	nop

c001bda2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001bda2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bda6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bda9:	0f ba e2 0f          	bt     edx,0xf
c001bdad:	72 f7                	jb     c001bda6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001bdaf:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bdb2:	83 ca 10             	or     edx,0x10
c001bdb5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001bdb8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bdbb:	83 ca 01             	or     edx,0x1
c001bdbe:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001bdc1:	c3                   	ret    

c001bdc2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001bdc2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bdc6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bdc9:	83 e2 fe             	and    edx,0xfffffffe
c001bdcc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001bdcf:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bdd2:	83 e2 ef             	and    edx,0xffffffef
c001bdd5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001bdd8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bddb:	0f ba e2 0e          	bt     edx,0xe
c001bddf:	72 f7                	jb     c001bdd8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001bde1:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bde4:	0f ba e2 0f          	bt     edx,0xf
c001bde8:	72 ee                	jb     c001bdd8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001bdea:	c3                   	ret    
c001bdeb:	90                   	nop

c001bdec <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001bdec:	55                   	push   ebp
c001bded:	57                   	push   edi
c001bdee:	56                   	push   esi
c001bdef:	53                   	push   ebx
c001bdf0:	83 ec 1c             	sub    esp,0x1c
c001bdf3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bdf7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bdfb:	53                   	push   ebx
c001bdfc:	57                   	push   edi
c001bdfd:	e8 c0 ff ff ff       	call   c001bdc2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001be02:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001be06:	83 ec 0c             	sub    esp,0xc
c001be09:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001be0f:	c1 e5 0a             	shl    ebp,0xa
c001be12:	01 e8                	add    eax,ebp
c001be14:	89 03                	mov    DWORD PTR [ebx],eax
c001be16:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be18:	68 00 04 00 00       	push   0x400
c001be1d:	6a 00                	push   0x0
c001be1f:	50                   	push   eax
c001be20:	e8 cb 46 fe ff       	call   c00004f0 <memset>
c001be25:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001be2b:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001be2f:	83 c4 1c             	add    esp,0x1c
c001be32:	01 e8                	add    eax,ebp
c001be34:	89 03                	mov    DWORD PTR [ebx],eax
c001be36:	c1 e6 08             	shl    esi,0x8
c001be39:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001be40:	81 c6 00 80 00 00    	add    esi,0x8000
c001be46:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001be4c:	01 f0                	add    eax,esi
c001be4e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001be51:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001be54:	68 00 01 00 00       	push   0x100
c001be59:	6a 00                	push   0x0
c001be5b:	50                   	push   eax
c001be5c:	e8 8f 46 fe ff       	call   c00004f0 <memset>
c001be61:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001be67:	31 d2                	xor    edx,edx
c001be69:	01 f0                	add    eax,esi
c001be6b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001be6e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001be75:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001be7b:	01 ee                	add    esi,ebp
c001be7d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001be81:	83 c4 10             	add    esp,0x10
c001be84:	c1 e5 0d             	shl    ebp,0xd
c001be87:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001be8d:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001be93:	83 c6 20             	add    esi,0x20
c001be96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001be9a:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001bea0:	01 e8                	add    eax,ebp
c001bea2:	01 d0                	add    eax,edx
c001bea4:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001bea7:	52                   	push   edx
c001bea8:	68 00 01 00 00       	push   0x100
c001bead:	6a 00                	push   0x0
c001beaf:	50                   	push   eax
c001beb0:	e8 3b 46 fe ff       	call   c00004f0 <memset>
c001beb5:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001bebb:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001bec2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bec6:	83 c4 10             	add    esp,0x10
c001bec9:	01 e8                	add    eax,ebp
c001becb:	01 d0                	add    eax,edx
c001becd:	81 c2 00 01 00 00    	add    edx,0x100
c001bed3:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001bed6:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001bedc:	75 af                	jne    c001be8d <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001bede:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001bee5:	50                   	push   eax
c001bee6:	50                   	push   eax
c001bee7:	53                   	push   ebx
c001bee8:	57                   	push   edi
c001bee9:	e8 b4 fe ff ff       	call   c001bda2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001beee:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001bef5:	83 c4 2c             	add    esp,0x2c
c001bef8:	5b                   	pop    ebx
c001bef9:	5e                   	pop    esi
c001befa:	5f                   	pop    edi
c001befb:	5d                   	pop    ebp
c001befc:	c3                   	ret    
c001befd:	90                   	nop

c001befe <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001befe:	55                   	push   ebp
c001beff:	57                   	push   edi
c001bf00:	56                   	push   esi
c001bf01:	53                   	push   ebx
c001bf02:	31 db                	xor    ebx,ebx
c001bf04:	83 ec 0c             	sub    esp,0xc
c001bf07:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bf0b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001bf0f:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001bf12:	f7 c7 01 00 00 00    	test   edi,0x1
c001bf18:	74 7a                	je     c001bf94 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001bf1a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001bf1e:	89 d8                	mov    eax,ebx
c001bf20:	c1 e0 07             	shl    eax,0x7
c001bf23:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001bf2a:	55                   	push   ebp
c001bf2b:	56                   	push   esi
c001bf2c:	e8 29 fe ff ff       	call   c001bd5a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001bf31:	5a                   	pop    edx
c001bf32:	59                   	pop    ecx
c001bf33:	83 f8 01             	cmp    eax,0x1
c001bf36:	75 21                	jne    c001bf59 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001bf38:	50                   	push   eax
c001bf39:	53                   	push   ebx
c001bf3a:	55                   	push   ebp
c001bf3b:	56                   	push   esi
c001bf3c:	e8 ab fe ff ff       	call   c001bdec <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001bf41:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001bf48:	e8 7e bb fe ff       	call   c0007acb <malloc>
c001bf4d:	89 04 24             	mov    DWORD PTR [esp],eax
c001bf50:	89 c5                	mov    ebp,eax
c001bf52:	e8 c1 10 00 00       	call   c001d018 <SATA::SATA()>
c001bf57:	eb 24                	jmp    c001bf7d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001bf59:	83 f8 04             	cmp    eax,0x4
c001bf5c:	75 36                	jne    c001bf94 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001bf5e:	51                   	push   ecx
c001bf5f:	53                   	push   ebx
c001bf60:	55                   	push   ebp
c001bf61:	56                   	push   esi
c001bf62:	e8 85 fe ff ff       	call   c001bdec <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001bf67:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001bf6e:	e8 58 bb fe ff       	call   c0007acb <malloc>
c001bf73:	89 04 24             	mov    DWORD PTR [esp],eax
c001bf76:	89 c5                	mov    ebp,eax
c001bf78:	e8 f5 17 00 00       	call   c001d772 <SATAPI::SATAPI()>
c001bf7d:	58                   	pop    eax
c001bf7e:	5a                   	pop    edx
c001bf7f:	55                   	push   ebp
c001bf80:	56                   	push   esi
c001bf81:	e8 02 01 ff ff       	call   c000c088 <Device::addChild(Device*)>
c001bf86:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001bf89:	56                   	push   esi
c001bf8a:	6a 00                	push   0x0
c001bf8c:	53                   	push   ebx
c001bf8d:	55                   	push   ebp
c001bf8e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bf91:	83 c4 20             	add    esp,0x20
c001bf94:	d1 ef                	shr    edi,1
c001bf96:	43                   	inc    ebx
c001bf97:	83 fb 20             	cmp    ebx,0x20
c001bf9a:	0f 85 72 ff ff ff    	jne    c001bf12 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001bfa0:	83 c4 0c             	add    esp,0xc
c001bfa3:	5b                   	pop    ebx
c001bfa4:	5e                   	pop    esi
c001bfa5:	5f                   	pop    edi
c001bfa6:	5d                   	pop    ebp
c001bfa7:	c3                   	ret    

c001bfa8 <SATABus::open(int, int, void*)>:
c001bfa8:	83 ec 14             	sub    esp,0x14
c001bfab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bfaf:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001bfb5:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001bfbb:	52                   	push   edx
c001bfbc:	50                   	push   eax
c001bfbd:	e8 3c ff ff ff       	call   c001befe <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001bfc2:	31 c0                	xor    eax,eax
c001bfc4:	83 c4 1c             	add    esp,0x1c
c001bfc7:	c3                   	ret    

c001bfc8 <ATA::close(int, int, void*)>:
c001bfc8:	83 ec 0c             	sub    esp,0xc
c001bfcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfcf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001bfd5:	85 c0                	test   eax,eax
c001bfd7:	74 0c                	je     c001bfe5 <ATA::close(int, int, void*)+0x1d>
c001bfd9:	8b 10                	mov    edx,DWORD PTR [eax]
c001bfdb:	83 ec 0c             	sub    esp,0xc
c001bfde:	50                   	push   eax
c001bfdf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001bfe2:	83 c4 10             	add    esp,0x10
c001bfe5:	31 c0                	xor    eax,eax
c001bfe7:	83 c4 0c             	add    esp,0xc
c001bfea:	c3                   	ret    
c001bfeb:	90                   	nop

c001bfec <ATA::powerSaving(PowerSavingLevel)>:
c001bfec:	c3                   	ret    
c001bfed:	90                   	nop

c001bfee <ATA::ATA()>:
c001bfee:	83 ec 0c             	sub    esp,0xc
c001bff1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bff5:	83 ec 04             	sub    esp,0x4
c001bff8:	68 00 02 00 00       	push   0x200
c001bffd:	68 59 25 02 c0       	push   0xc0022559
c001c002:	50                   	push   eax
c001c003:	e8 4e 04 ff ff       	call   c000c456 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c008:	83 c4 10             	add    esp,0x10
c001c00b:	ba cc 24 02 c0       	mov    edx,0xc00224cc
c001c010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c014:	89 10                	mov    DWORD PTR [eax],edx
c001c016:	90                   	nop
c001c017:	83 c4 0c             	add    esp,0xc
c001c01a:	c3                   	ret    
c001c01b:	90                   	nop

c001c01c <ATA::flush(bool)>:
c001c01c:	53                   	push   ebx
c001c01d:	83 ec 08             	sub    esp,0x8
c001c020:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c025:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c029:	83 f8 01             	cmp    eax,0x1
c001c02c:	19 c0                	sbb    eax,eax
c001c02e:	83 e0 fd             	and    eax,0xfffffffd
c001c031:	05 ea 00 00 00       	add    eax,0xea
c001c036:	50                   	push   eax
c001c037:	6a 07                	push   0x7
c001c039:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c040:	50                   	push   eax
c001c041:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c047:	e8 18 f1 ff ff       	call   c001b164 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c04c:	83 c4 0c             	add    esp,0xc
c001c04f:	6a 00                	push   0x0
c001c051:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c058:	50                   	push   eax
c001c059:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c05f:	e8 e4 fb ff ff       	call   c001bc48 <IDE::polling(unsigned char, unsigned int)>
c001c064:	83 c4 18             	add    esp,0x18
c001c067:	5b                   	pop    ebx
c001c068:	c3                   	ret    
c001c069:	90                   	nop

c001c06a <ATA::readyForCommand()>:
c001c06a:	56                   	push   esi
c001c06b:	53                   	push   ebx
c001c06c:	53                   	push   ebx
c001c06d:	31 db                	xor    ebx,ebx
c001c06f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c073:	51                   	push   ecx
c001c074:	6a 0c                	push   0xc
c001c076:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c07d:	50                   	push   eax
c001c07e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c084:	e8 9b f1 ff ff       	call   c001b224 <IDE::read(unsigned char, unsigned char)>
c001c089:	83 c4 10             	add    esp,0x10
c001c08c:	a8 88                	test   al,0x88
c001c08e:	74 1f                	je     c001c0af <ATA::readyForCommand()+0x45>
c001c090:	43                   	inc    ebx
c001c091:	83 fb 63             	cmp    ebx,0x63
c001c094:	7e dd                	jle    c001c073 <ATA::readyForCommand()+0x9>
c001c096:	83 ec 0c             	sub    esp,0xc
c001c099:	6a 0a                	push   0xa
c001c09b:	e8 f0 96 ff ff       	call   c0015790 <milliTenthSleep(unsigned int)>
c001c0a0:	83 c4 10             	add    esp,0x10
c001c0a3:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c0a9:	75 c8                	jne    c001c073 <ATA::readyForCommand()+0x9>
c001c0ab:	31 c0                	xor    eax,eax
c001c0ad:	eb 02                	jmp    c001c0b1 <ATA::readyForCommand()+0x47>
c001c0af:	b0 01                	mov    al,0x1
c001c0b1:	5a                   	pop    edx
c001c0b2:	5b                   	pop    ebx
c001c0b3:	5e                   	pop    esi
c001c0b4:	c3                   	ret    
c001c0b5:	90                   	nop

c001c0b6 <ATA::access(unsigned long long, int, void*, bool)>:
c001c0b6:	55                   	push   ebp
c001c0b7:	57                   	push   edi
c001c0b8:	56                   	push   esi
c001c0b9:	53                   	push   ebx
c001c0ba:	83 ec 2c             	sub    esp,0x2c
c001c0bd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c0c1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c0c5:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c0c9:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c0cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c0d1:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c0d5:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001c0d9:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c0df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c0e3:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c0e9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c0ed:	c1 e0 06             	shl    eax,0x6
c001c0f0:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c0f8:	74 5b                	je     c001c155 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001c0fa:	89 fa                	mov    edx,edi
c001c0fc:	89 f0                	mov    eax,esi
c001c0fe:	c1 ea 1c             	shr    edx,0x1c
c001c101:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001c105:	89 d1                	mov    ecx,edx
c001c107:	09 c1                	or     ecx,eax
c001c109:	74 25                	je     c001c130 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c10b:	31 ed                	xor    ebp,ebp
c001c10d:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c114:	89 fa                	mov    edx,edi
c001c116:	89 f0                	mov    eax,esi
c001c118:	0f ad d0             	shrd   eax,edx,cl
c001c11b:	d3 ea                	shr    edx,cl
c001c11d:	f6 c1 20             	test   cl,0x20
c001c120:	74 02                	je     c001c124 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c122:	89 d0                	mov    eax,edx
c001c124:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c128:	45                   	inc    ebp
c001c129:	83 fd 06             	cmp    ebp,0x6
c001c12c:	75 df                	jne    c001c10d <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c12e:	eb 71                	jmp    c001c1a1 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001c130:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c135:	89 f0                	mov    eax,esi
c001c137:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c13e:	0f ac f8 10          	shrd   eax,edi,0x10
c001c142:	bf 01 00 00 00       	mov    edi,0x1
c001c147:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c14b:	c1 ee 18             	shr    esi,0x18
c001c14e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c153:	eb 53                	jmp    c001c1a8 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001c155:	6a 00                	push   0x0
c001c157:	6a 3f                	push   0x3f
c001c159:	57                   	push   edi
c001c15a:	56                   	push   esi
c001c15b:	e8 d0 2a 00 00       	call   c001ec30 <__umoddi3>
c001c160:	83 c4 10             	add    esp,0x10
c001c163:	40                   	inc    eax
c001c164:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c168:	6a 00                	push   0x0
c001c16a:	68 f0 03 00 00       	push   0x3f0
c001c16f:	57                   	push   edi
c001c170:	56                   	push   esi
c001c171:	e8 ba 29 00 00       	call   c001eb30 <__udivdi3>
c001c176:	83 c4 10             	add    esp,0x10
c001c179:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c17e:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c185:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c18a:	6a 00                	push   0x0
c001c18c:	6a 3f                	push   0x3f
c001c18e:	57                   	push   edi
c001c18f:	31 ff                	xor    edi,edi
c001c191:	56                   	push   esi
c001c192:	e8 99 29 00 00       	call   c001eb30 <__udivdi3>
c001c197:	83 c4 10             	add    esp,0x10
c001c19a:	83 e0 0f             	and    eax,0xf
c001c19d:	89 c6                	mov    esi,eax
c001c19f:	eb 07                	jmp    c001c1a8 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001c1a1:	31 f6                	xor    esi,esi
c001c1a3:	bf 02 00 00 00       	mov    edi,0x2
c001c1a8:	50                   	push   eax
c001c1a9:	6a 00                	push   0x0
c001c1ab:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c1b2:	50                   	push   eax
c001c1b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c1b7:	e8 b6 f1 ff ff       	call   c001b372 <IDE::enableIRQs(unsigned char, bool)>
c001c1bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c1bf:	e8 a6 fe ff ff       	call   c001c06a <ATA::readyForCommand()>
c001c1c4:	83 c4 10             	add    esp,0x10
c001c1c7:	84 c0                	test   al,al
c001c1c9:	75 0a                	jne    c001c1d5 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001c1cb:	be 01 00 00 00       	mov    esi,0x1
c001c1d0:	e9 9b 02 00 00       	jmp    c001c470 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001c1d5:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c1db:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c1e1:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001c1e8:	c1 e0 04             	shl    eax,0x4
c001c1eb:	09 c6                	or     esi,eax
c001c1ed:	f7 c7 03 00 00 00    	test   edi,0x3
c001c1f3:	75 05                	jne    c001c1fa <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001c1f5:	83 ce a0             	or     esi,0xffffffa0
c001c1f8:	eb 03                	jmp    c001c1fd <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001c1fa:	83 ce e0             	or     esi,0xffffffe0
c001c1fd:	89 f0                	mov    eax,esi
c001c1ff:	0f b6 f0             	movzx  esi,al
c001c202:	56                   	push   esi
c001c203:	6a 06                	push   0x6
c001c205:	51                   	push   ecx
c001c206:	52                   	push   edx
c001c207:	e8 58 ef ff ff       	call   c001b164 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c20c:	83 c4 10             	add    esp,0x10
c001c20f:	6a 00                	push   0x0
c001c211:	6a 01                	push   0x1
c001c213:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c21a:	50                   	push   eax
c001c21b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c221:	e8 3e ef ff ff       	call   c001b164 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c226:	89 f8                	mov    eax,edi
c001c228:	83 c4 10             	add    esp,0x10
c001c22b:	0f b6 f0             	movzx  esi,al
c001c22e:	83 fe 02             	cmp    esi,0x2
c001c231:	75 6e                	jne    c001c2a1 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001c233:	6a 00                	push   0x0
c001c235:	6a 08                	push   0x8
c001c237:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c23e:	50                   	push   eax
c001c23f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c245:	e8 1a ef ff ff       	call   c001b164 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c24a:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001c24f:	50                   	push   eax
c001c250:	6a 09                	push   0x9
c001c252:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c259:	50                   	push   eax
c001c25a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c260:	e8 ff ee ff ff       	call   c001b164 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c265:	83 c4 20             	add    esp,0x20
c001c268:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001c26d:	50                   	push   eax
c001c26e:	6a 0a                	push   0xa
c001c270:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c277:	50                   	push   eax
c001c278:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c27e:	e8 e1 ee ff ff       	call   c001b164 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c283:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001c288:	50                   	push   eax
c001c289:	6a 0b                	push   0xb
c001c28b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c292:	50                   	push   eax
c001c293:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c299:	e8 c6 ee ff ff       	call   c001b164 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c29e:	83 c4 20             	add    esp,0x20
c001c2a1:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001c2a6:	50                   	push   eax
c001c2a7:	6a 02                	push   0x2
c001c2a9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c2b0:	50                   	push   eax
c001c2b1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c2b7:	e8 a8 ee ff ff       	call   c001b164 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c2bc:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001c2c1:	50                   	push   eax
c001c2c2:	6a 03                	push   0x3
c001c2c4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c2cb:	50                   	push   eax
c001c2cc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c2d2:	e8 8d ee ff ff       	call   c001b164 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c2d7:	83 c4 20             	add    esp,0x20
c001c2da:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001c2df:	50                   	push   eax
c001c2e0:	6a 04                	push   0x4
c001c2e2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c2e9:	50                   	push   eax
c001c2ea:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c2f0:	e8 6f ee ff ff       	call   c001b164 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c2f5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c2fa:	50                   	push   eax
c001c2fb:	6a 05                	push   0x5
c001c2fd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c304:	50                   	push   eax
c001c305:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c30b:	e8 54 ee ff ff       	call   c001b164 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c310:	83 c4 20             	add    esp,0x20
c001c313:	83 fe 02             	cmp    esi,0x2
c001c316:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001c31b:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001c320:	85 c9                	test   ecx,ecx
c001c322:	74 07                	je     c001c32b <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001c324:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c329:	75 47                	jne    c001c372 <ATA::access(unsigned long long, int, void*, bool)+0x2bc>
c001c32b:	89 f8                	mov    eax,edi
c001c32d:	0f b6 f8             	movzx  edi,al
c001c330:	31 c0                	xor    eax,eax
c001c332:	83 ff 02             	cmp    edi,0x2
c001c335:	0f 95 c0             	setne  al
c001c338:	89 c6                	mov    esi,eax
c001c33a:	74 0c                	je     c001c348 <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001c33c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c341:	b8 30 00 00 00       	mov    eax,0x30
c001c346:	75 2f                	jne    c001c377 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001c348:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c34c:	83 f2 01             	xor    edx,0x1
c001c34f:	85 c9                	test   ecx,ecx
c001c351:	74 09                	je     c001c35c <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001c353:	84 d2                	test   dl,dl
c001c355:	b8 24 00 00 00       	mov    eax,0x24
c001c35a:	75 1b                	jne    c001c377 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001c35c:	85 f6                	test   esi,esi
c001c35e:	0f 84 67 fe ff ff    	je     c001c1cb <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001c364:	84 d2                	test   dl,dl
c001c366:	b8 20 00 00 00       	mov    eax,0x20
c001c36b:	75 0a                	jne    c001c377 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001c36d:	e9 59 fe ff ff       	jmp    c001c1cb <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001c372:	b8 34 00 00 00       	mov    eax,0x34
c001c377:	50                   	push   eax
c001c378:	6a 07                	push   0x7
c001c37a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c381:	50                   	push   eax
c001c382:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c388:	e8 d7 ed ff ff       	call   c001b164 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c38d:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001c391:	83 c4 10             	add    esp,0x10
c001c394:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001c399:	85 f6                	test   esi,esi
c001c39b:	0f 84 b5 00 00 00    	je     c001c456 <ATA::access(unsigned long long, int, void*, bool)+0x3a0>
c001c3a1:	50                   	push   eax
c001c3a2:	6a 01                	push   0x1
c001c3a4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c3ab:	50                   	push   eax
c001c3ac:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c3b2:	e8 91 f8 ff ff       	call   c001bc48 <IDE::polling(unsigned char, unsigned int)>
c001c3b7:	83 c4 10             	add    esp,0x10
c001c3ba:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001c3c0:	0f b6 c0             	movzx  eax,al
c001c3c3:	85 c0                	test   eax,eax
c001c3c5:	74 1f                	je     c001c3e6 <ATA::access(unsigned long long, int, void*, bool)+0x330>
c001c3c7:	50                   	push   eax
c001c3c8:	89 c6                	mov    esi,eax
c001c3ca:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001c3d1:	0f b6 d2             	movzx  edx,dl
c001c3d4:	50                   	push   eax
c001c3d5:	52                   	push   edx
c001c3d6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c3dc:	e8 ad f7 ff ff       	call   c001bb8e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c3e1:	e9 87 00 00 00       	jmp    c001c46d <ATA::access(unsigned long long, int, void*, bool)+0x3b7>
c001c3e6:	85 ed                	test   ebp,ebp
c001c3e8:	74 3b                	je     c001c425 <ATA::access(unsigned long long, int, void*, bool)+0x36f>
c001c3ea:	31 ff                	xor    edi,edi
c001c3ec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001c3f0:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001c3f4:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001c3f9:	50                   	push   eax
c001c3fa:	50                   	push   eax
c001c3fb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c402:	50                   	push   eax
c001c403:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c409:	e8 44 ed ff ff       	call   c001b152 <IDE::getBase(unsigned char)>
c001c40e:	89 c2                	mov    edx,eax
c001c410:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001c415:	66 ef                	out    dx,ax
c001c417:	47                   	inc    edi
c001c418:	83 c4 10             	add    esp,0x10
c001c41b:	81 ff 00 01 00 00    	cmp    edi,0x100
c001c421:	75 c9                	jne    c001c3ec <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001c423:	eb 23                	jmp    c001c448 <ATA::access(unsigned long long, int, void*, bool)+0x392>
c001c425:	51                   	push   ecx
c001c426:	0f b6 d2             	movzx  edx,dl
c001c429:	51                   	push   ecx
c001c42a:	52                   	push   edx
c001c42b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c431:	e8 1c ed ff ff       	call   c001b152 <IDE::getBase(unsigned char)>
c001c436:	b9 00 01 00 00       	mov    ecx,0x100
c001c43b:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001c43f:	89 c2                	mov    edx,eax
c001c441:	fc                   	cld    
c001c442:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001c445:	83 c4 10             	add    esp,0x10
c001c448:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001c450:	4e                   	dec    esi
c001c451:	e9 43 ff ff ff       	jmp    c001c399 <ATA::access(unsigned long long, int, void*, bool)+0x2e3>
c001c456:	31 f6                	xor    esi,esi
c001c458:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c45d:	74 11                	je     c001c470 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001c45f:	50                   	push   eax
c001c460:	50                   	push   eax
c001c461:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001c466:	50                   	push   eax
c001c467:	53                   	push   ebx
c001c468:	e8 af fb ff ff       	call   c001c01c <ATA::flush(bool)>
c001c46d:	83 c4 10             	add    esp,0x10
c001c470:	83 c4 2c             	add    esp,0x2c
c001c473:	89 f0                	mov    eax,esi
c001c475:	5b                   	pop    ebx
c001c476:	5e                   	pop    esi
c001c477:	5f                   	pop    edi
c001c478:	5d                   	pop    ebp
c001c479:	c3                   	ret    

c001c47a <ATA::detectCHS()>:
c001c47a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c47e:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001c484:	c1 e0 06             	shl    eax,0x6
c001c487:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001c48d:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001c497:	c7 44 24 04 b0 24 02 c0 	mov    DWORD PTR [esp+0x4],0xc00224b0
c001c49f:	e9 cd 46 ff ff       	jmp    c0010b71 <KePanic(char const*)>

c001c4a4 <ATA::open(int, int, void*)>:
c001c4a4:	53                   	push   ebx
c001c4a5:	83 ec 08             	sub    esp,0x8
c001c4a8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c4ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c4b0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c4b4:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c4ba:	c1 e0 06             	shl    eax,0x6
c001c4bd:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001c4c3:	01 d0                	add    eax,edx
c001c4c5:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001c4cc:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001c4d2:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001c4d9:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001c4e3:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001c4ea:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001c4f0:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001c4f7:	75 0c                	jne    c001c505 <ATA::open(int, int, void*)+0x61>
c001c4f9:	83 ec 0c             	sub    esp,0xc
c001c4fc:	53                   	push   ebx
c001c4fd:	e8 78 ff ff ff       	call   c001c47a <ATA::detectCHS()>
c001c502:	83 c4 10             	add    esp,0x10
c001c505:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c50b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c511:	c1 e0 06             	shl    eax,0x6
c001c514:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001c51b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001c525:	d1 e8                	shr    eax,1
c001c527:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001c52d:	6a 04                	push   0x4
c001c52f:	6a 0c                	push   0xc
c001c531:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c538:	50                   	push   eax
c001c539:	52                   	push   edx
c001c53a:	e8 25 ec ff ff       	call   c001b164 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c53f:	90                   	nop
c001c540:	90                   	nop
c001c541:	6a 00                	push   0x0
c001c543:	6a 0c                	push   0xc
c001c545:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c54c:	50                   	push   eax
c001c54d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c553:	e8 0c ec ff ff       	call   c001b164 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c558:	83 c4 14             	add    esp,0x14
c001c55b:	53                   	push   ebx
c001c55c:	e8 5d ff fe ff       	call   c000c4be <PhysicalDisk::startCache()>
c001c561:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c564:	e8 a1 11 ff ff       	call   c000d70a <createPartitionsForDisk(PhysicalDisk*)>
c001c569:	83 c4 18             	add    esp,0x18
c001c56c:	31 c0                	xor    eax,eax
c001c56e:	5b                   	pop    ebx
c001c56f:	c3                   	ret    

c001c570 <combineCharAndColour(char, unsigned char)>:
c001c570:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c575:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001c57b:	c1 e0 08             	shl    eax,0x8
c001c57e:	09 d0                	or     eax,edx
c001c580:	c3                   	ret    

c001c581 <combineColours(unsigned char, unsigned char)>:
c001c581:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c586:	c1 e0 04             	shl    eax,0x4
c001c589:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001c58d:	c3                   	ret    

c001c58e <ATA::read(unsigned long long, int, void*)>:
c001c58e:	55                   	push   ebp
c001c58f:	57                   	push   edi
c001c590:	56                   	push   esi
c001c591:	be 04 00 00 00       	mov    esi,0x4
c001c596:	53                   	push   ebx
c001c597:	83 ec 0c             	sub    esp,0xc
c001c59a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c59e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c5a2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c5a6:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c5aa:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c5ad:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c5b3:	0f 87 a1 01 00 00    	ja     c001c75a <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c5b9:	85 c9                	test   ecx,ecx
c001c5bb:	be 06 00 00 00       	mov    esi,0x6
c001c5c0:	0f 84 94 01 00 00    	je     c001c75a <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c5c6:	55                   	push   ebp
c001c5c7:	55                   	push   ebp
c001c5c8:	6a 00                	push   0x0
c001c5ca:	51                   	push   ecx
c001c5cb:	53                   	push   ebx
c001c5cc:	52                   	push   edx
c001c5cd:	50                   	push   eax
c001c5ce:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c5d2:	e8 df fa ff ff       	call   c001c0b6 <ATA::access(unsigned long long, int, void*, bool)>
c001c5d7:	83 c4 20             	add    esp,0x20
c001c5da:	85 c0                	test   eax,eax
c001c5dc:	89 c6                	mov    esi,eax
c001c5de:	0f 85 71 01 00 00    	jne    c001c755 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001c5e4:	50                   	push   eax
c001c5e5:	bd 10 27 00 00       	mov    ebp,0x2710
c001c5ea:	50                   	push   eax
c001c5eb:	03 1d 54 9b 02 c0    	add    ebx,DWORD PTR ds:0xc0029b54
c001c5f1:	6a 0f                	push   0xf
c001c5f3:	6a 00                	push   0x0
c001c5f5:	89 da                	mov    edx,ebx
c001c5f7:	89 1d 54 9b 02 c0    	mov    DWORD PTR ds:0xc0029b54,ebx
c001c5fd:	e8 7f ff ff ff       	call   c001c581 <combineColours(unsigned char, unsigned char)>
c001c602:	59                   	pop    ecx
c001c603:	b9 0a 00 00 00       	mov    ecx,0xa
c001c608:	5b                   	pop    ebx
c001c609:	0f b6 d8             	movzx  ebx,al
c001c60c:	89 d0                	mov    eax,edx
c001c60e:	53                   	push   ebx
c001c60f:	99                   	cdq    
c001c610:	f7 fd                	idiv   ebp
c001c612:	99                   	cdq    
c001c613:	f7 f9                	idiv   ecx
c001c615:	83 c2 30             	add    edx,0x30
c001c618:	0f b6 d2             	movzx  edx,dl
c001c61b:	52                   	push   edx
c001c61c:	e8 4f ff ff ff       	call   c001c570 <combineCharAndColour(char, unsigned char)>
c001c621:	5f                   	pop    edi
c001c622:	bf e8 03 00 00       	mov    edi,0x3e8
c001c627:	5a                   	pop    edx
c001c628:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c62e:	53                   	push   ebx
c001c62f:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001c634:	99                   	cdq    
c001c635:	f7 ff                	idiv   edi
c001c637:	99                   	cdq    
c001c638:	f7 f9                	idiv   ecx
c001c63a:	8d 42 30             	lea    eax,[edx+0x30]
c001c63d:	0f b6 c0             	movzx  eax,al
c001c640:	50                   	push   eax
c001c641:	e8 2a ff ff ff       	call   c001c570 <combineCharAndColour(char, unsigned char)>
c001c646:	5f                   	pop    edi
c001c647:	bf 64 00 00 00       	mov    edi,0x64
c001c64c:	5a                   	pop    edx
c001c64d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c653:	53                   	push   ebx
c001c654:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001c659:	99                   	cdq    
c001c65a:	f7 ff                	idiv   edi
c001c65c:	99                   	cdq    
c001c65d:	f7 f9                	idiv   ecx
c001c65f:	8d 42 30             	lea    eax,[edx+0x30]
c001c662:	0f b6 c0             	movzx  eax,al
c001c665:	50                   	push   eax
c001c666:	e8 05 ff ff ff       	call   c001c570 <combineCharAndColour(char, unsigned char)>
c001c66b:	5a                   	pop    edx
c001c66c:	5a                   	pop    edx
c001c66d:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c673:	53                   	push   ebx
c001c674:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001c679:	99                   	cdq    
c001c67a:	f7 f9                	idiv   ecx
c001c67c:	99                   	cdq    
c001c67d:	f7 f9                	idiv   ecx
c001c67f:	8d 42 30             	lea    eax,[edx+0x30]
c001c682:	0f b6 c0             	movzx  eax,al
c001c685:	50                   	push   eax
c001c686:	e8 e5 fe ff ff       	call   c001c570 <combineCharAndColour(char, unsigned char)>
c001c68b:	5a                   	pop    edx
c001c68c:	5a                   	pop    edx
c001c68d:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c693:	53                   	push   ebx
c001c694:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001c699:	99                   	cdq    
c001c69a:	f7 f9                	idiv   ecx
c001c69c:	83 c2 30             	add    edx,0x30
c001c69f:	0f b6 d2             	movzx  edx,dl
c001c6a2:	52                   	push   edx
c001c6a3:	e8 c8 fe ff ff       	call   c001c570 <combineCharAndColour(char, unsigned char)>
c001c6a8:	5a                   	pop    edx
c001c6a9:	5a                   	pop    edx
c001c6aa:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c6b0:	53                   	push   ebx
c001c6b1:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001c6b6:	99                   	cdq    
c001c6b7:	f7 fd                	idiv   ebp
c001c6b9:	99                   	cdq    
c001c6ba:	f7 f9                	idiv   ecx
c001c6bc:	8d 42 30             	lea    eax,[edx+0x30]
c001c6bf:	0f b6 c0             	movzx  eax,al
c001c6c2:	50                   	push   eax
c001c6c3:	e8 a8 fe ff ff       	call   c001c570 <combineCharAndColour(char, unsigned char)>
c001c6c8:	5d                   	pop    ebp
c001c6c9:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c6ce:	5a                   	pop    edx
c001c6cf:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c6d5:	53                   	push   ebx
c001c6d6:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001c6db:	99                   	cdq    
c001c6dc:	f7 fd                	idiv   ebp
c001c6de:	99                   	cdq    
c001c6df:	f7 f9                	idiv   ecx
c001c6e1:	8d 42 30             	lea    eax,[edx+0x30]
c001c6e4:	0f b6 c0             	movzx  eax,al
c001c6e7:	50                   	push   eax
c001c6e8:	e8 83 fe ff ff       	call   c001c570 <combineCharAndColour(char, unsigned char)>
c001c6ed:	5d                   	pop    ebp
c001c6ee:	5a                   	pop    edx
c001c6ef:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c6f5:	53                   	push   ebx
c001c6f6:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001c6fb:	99                   	cdq    
c001c6fc:	f7 ff                	idiv   edi
c001c6fe:	99                   	cdq    
c001c6ff:	f7 f9                	idiv   ecx
c001c701:	8d 42 30             	lea    eax,[edx+0x30]
c001c704:	0f b6 c0             	movzx  eax,al
c001c707:	50                   	push   eax
c001c708:	e8 63 fe ff ff       	call   c001c570 <combineCharAndColour(char, unsigned char)>
c001c70d:	5f                   	pop    edi
c001c70e:	5d                   	pop    ebp
c001c70f:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c715:	53                   	push   ebx
c001c716:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001c71b:	99                   	cdq    
c001c71c:	f7 f9                	idiv   ecx
c001c71e:	99                   	cdq    
c001c71f:	f7 f9                	idiv   ecx
c001c721:	8d 42 30             	lea    eax,[edx+0x30]
c001c724:	0f b6 c0             	movzx  eax,al
c001c727:	50                   	push   eax
c001c728:	e8 43 fe ff ff       	call   c001c570 <combineCharAndColour(char, unsigned char)>
c001c72d:	5a                   	pop    edx
c001c72e:	5f                   	pop    edi
c001c72f:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c735:	53                   	push   ebx
c001c736:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001c73b:	99                   	cdq    
c001c73c:	f7 f9                	idiv   ecx
c001c73e:	83 c2 30             	add    edx,0x30
c001c741:	0f b6 d2             	movzx  edx,dl
c001c744:	52                   	push   edx
c001c745:	e8 26 fe ff ff       	call   c001c570 <combineCharAndColour(char, unsigned char)>
c001c74a:	83 c4 10             	add    esp,0x10
c001c74d:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c753:	eb 05                	jmp    c001c75a <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c755:	be 01 00 00 00       	mov    esi,0x1
c001c75a:	83 c4 0c             	add    esp,0xc
c001c75d:	89 f0                	mov    eax,esi
c001c75f:	5b                   	pop    ebx
c001c760:	5e                   	pop    esi
c001c761:	5f                   	pop    edi
c001c762:	5d                   	pop    ebp
c001c763:	c3                   	ret    

c001c764 <ATA::write(unsigned long long, int, void*)>:
c001c764:	55                   	push   ebp
c001c765:	57                   	push   edi
c001c766:	56                   	push   esi
c001c767:	be 04 00 00 00       	mov    esi,0x4
c001c76c:	53                   	push   ebx
c001c76d:	83 ec 0c             	sub    esp,0xc
c001c770:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c774:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c778:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c77c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c780:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c783:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c789:	0f 87 9c 01 00 00    	ja     c001c92b <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c78f:	85 c9                	test   ecx,ecx
c001c791:	be 06 00 00 00       	mov    esi,0x6
c001c796:	0f 84 8f 01 00 00    	je     c001c92b <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c79c:	55                   	push   ebp
c001c79d:	55                   	push   ebp
c001c79e:	6a 01                	push   0x1
c001c7a0:	51                   	push   ecx
c001c7a1:	53                   	push   ebx
c001c7a2:	52                   	push   edx
c001c7a3:	50                   	push   eax
c001c7a4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c7a8:	e8 09 f9 ff ff       	call   c001c0b6 <ATA::access(unsigned long long, int, void*, bool)>
c001c7ad:	83 c4 20             	add    esp,0x20
c001c7b0:	85 c0                	test   eax,eax
c001c7b2:	89 c6                	mov    esi,eax
c001c7b4:	0f 85 6c 01 00 00    	jne    c001c926 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001c7ba:	50                   	push   eax
c001c7bb:	bd 10 27 00 00       	mov    ebp,0x2710
c001c7c0:	50                   	push   eax
c001c7c1:	6a 0f                	push   0xf
c001c7c3:	6a 00                	push   0x0
c001c7c5:	01 1d 50 9b 02 c0    	add    DWORD PTR ds:0xc0029b50,ebx
c001c7cb:	e8 b1 fd ff ff       	call   c001c581 <combineColours(unsigned char, unsigned char)>
c001c7d0:	5a                   	pop    edx
c001c7d1:	59                   	pop    ecx
c001c7d2:	b9 0a 00 00 00       	mov    ecx,0xa
c001c7d7:	0f b6 d8             	movzx  ebx,al
c001c7da:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001c7df:	53                   	push   ebx
c001c7e0:	99                   	cdq    
c001c7e1:	f7 fd                	idiv   ebp
c001c7e3:	99                   	cdq    
c001c7e4:	f7 f9                	idiv   ecx
c001c7e6:	8d 42 30             	lea    eax,[edx+0x30]
c001c7e9:	0f b6 c0             	movzx  eax,al
c001c7ec:	50                   	push   eax
c001c7ed:	e8 7e fd ff ff       	call   c001c570 <combineCharAndColour(char, unsigned char)>
c001c7f2:	5f                   	pop    edi
c001c7f3:	bf e8 03 00 00       	mov    edi,0x3e8
c001c7f8:	5a                   	pop    edx
c001c7f9:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c7ff:	53                   	push   ebx
c001c800:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001c805:	99                   	cdq    
c001c806:	f7 ff                	idiv   edi
c001c808:	99                   	cdq    
c001c809:	f7 f9                	idiv   ecx
c001c80b:	8d 42 30             	lea    eax,[edx+0x30]
c001c80e:	0f b6 c0             	movzx  eax,al
c001c811:	50                   	push   eax
c001c812:	e8 59 fd ff ff       	call   c001c570 <combineCharAndColour(char, unsigned char)>
c001c817:	5f                   	pop    edi
c001c818:	bf 64 00 00 00       	mov    edi,0x64
c001c81d:	5a                   	pop    edx
c001c81e:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c824:	53                   	push   ebx
c001c825:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001c82a:	99                   	cdq    
c001c82b:	f7 ff                	idiv   edi
c001c82d:	99                   	cdq    
c001c82e:	f7 f9                	idiv   ecx
c001c830:	8d 42 30             	lea    eax,[edx+0x30]
c001c833:	0f b6 c0             	movzx  eax,al
c001c836:	50                   	push   eax
c001c837:	e8 34 fd ff ff       	call   c001c570 <combineCharAndColour(char, unsigned char)>
c001c83c:	5a                   	pop    edx
c001c83d:	5a                   	pop    edx
c001c83e:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c844:	53                   	push   ebx
c001c845:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001c84a:	99                   	cdq    
c001c84b:	f7 f9                	idiv   ecx
c001c84d:	99                   	cdq    
c001c84e:	f7 f9                	idiv   ecx
c001c850:	8d 42 30             	lea    eax,[edx+0x30]
c001c853:	0f b6 c0             	movzx  eax,al
c001c856:	50                   	push   eax
c001c857:	e8 14 fd ff ff       	call   c001c570 <combineCharAndColour(char, unsigned char)>
c001c85c:	5a                   	pop    edx
c001c85d:	5a                   	pop    edx
c001c85e:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c864:	53                   	push   ebx
c001c865:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001c86a:	99                   	cdq    
c001c86b:	f7 f9                	idiv   ecx
c001c86d:	83 c2 30             	add    edx,0x30
c001c870:	0f b6 d2             	movzx  edx,dl
c001c873:	52                   	push   edx
c001c874:	e8 f7 fc ff ff       	call   c001c570 <combineCharAndColour(char, unsigned char)>
c001c879:	5a                   	pop    edx
c001c87a:	5a                   	pop    edx
c001c87b:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c881:	53                   	push   ebx
c001c882:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001c887:	99                   	cdq    
c001c888:	f7 fd                	idiv   ebp
c001c88a:	99                   	cdq    
c001c88b:	f7 f9                	idiv   ecx
c001c88d:	8d 42 30             	lea    eax,[edx+0x30]
c001c890:	0f b6 c0             	movzx  eax,al
c001c893:	50                   	push   eax
c001c894:	e8 d7 fc ff ff       	call   c001c570 <combineCharAndColour(char, unsigned char)>
c001c899:	5d                   	pop    ebp
c001c89a:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c89f:	5a                   	pop    edx
c001c8a0:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c8a6:	53                   	push   ebx
c001c8a7:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001c8ac:	99                   	cdq    
c001c8ad:	f7 fd                	idiv   ebp
c001c8af:	99                   	cdq    
c001c8b0:	f7 f9                	idiv   ecx
c001c8b2:	8d 42 30             	lea    eax,[edx+0x30]
c001c8b5:	0f b6 c0             	movzx  eax,al
c001c8b8:	50                   	push   eax
c001c8b9:	e8 b2 fc ff ff       	call   c001c570 <combineCharAndColour(char, unsigned char)>
c001c8be:	5d                   	pop    ebp
c001c8bf:	5a                   	pop    edx
c001c8c0:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c8c6:	53                   	push   ebx
c001c8c7:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001c8cc:	99                   	cdq    
c001c8cd:	f7 ff                	idiv   edi
c001c8cf:	99                   	cdq    
c001c8d0:	f7 f9                	idiv   ecx
c001c8d2:	8d 42 30             	lea    eax,[edx+0x30]
c001c8d5:	0f b6 c0             	movzx  eax,al
c001c8d8:	50                   	push   eax
c001c8d9:	e8 92 fc ff ff       	call   c001c570 <combineCharAndColour(char, unsigned char)>
c001c8de:	5f                   	pop    edi
c001c8df:	5d                   	pop    ebp
c001c8e0:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c8e6:	53                   	push   ebx
c001c8e7:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001c8ec:	99                   	cdq    
c001c8ed:	f7 f9                	idiv   ecx
c001c8ef:	99                   	cdq    
c001c8f0:	f7 f9                	idiv   ecx
c001c8f2:	8d 42 30             	lea    eax,[edx+0x30]
c001c8f5:	0f b6 c0             	movzx  eax,al
c001c8f8:	50                   	push   eax
c001c8f9:	e8 72 fc ff ff       	call   c001c570 <combineCharAndColour(char, unsigned char)>
c001c8fe:	5a                   	pop    edx
c001c8ff:	5f                   	pop    edi
c001c900:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c906:	53                   	push   ebx
c001c907:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001c90c:	99                   	cdq    
c001c90d:	f7 f9                	idiv   ecx
c001c90f:	83 c2 30             	add    edx,0x30
c001c912:	0f b6 d2             	movzx  edx,dl
c001c915:	52                   	push   edx
c001c916:	e8 55 fc ff ff       	call   c001c570 <combineCharAndColour(char, unsigned char)>
c001c91b:	83 c4 10             	add    esp,0x10
c001c91e:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c924:	eb 05                	jmp    c001c92b <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c926:	be 01 00 00 00       	mov    esi,0x1
c001c92b:	83 c4 0c             	add    esp,0xc
c001c92e:	89 f0                	mov    eax,esi
c001c930:	5b                   	pop    ebx
c001c931:	5e                   	pop    esi
c001c932:	5f                   	pop    edi
c001c933:	5d                   	pop    ebp
c001c934:	c3                   	ret    
c001c935:	90                   	nop

c001c936 <ATAPI::write(unsigned long long, int, void*)>:
c001c936:	b8 03 00 00 00       	mov    eax,0x3
c001c93b:	c3                   	ret    

c001c93c <ATAPI::close(int, int, void*)>:
c001c93c:	83 ec 0c             	sub    esp,0xc
c001c93f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c943:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c949:	85 c0                	test   eax,eax
c001c94b:	74 0c                	je     c001c959 <ATAPI::close(int, int, void*)+0x1d>
c001c94d:	8b 10                	mov    edx,DWORD PTR [eax]
c001c94f:	83 ec 0c             	sub    esp,0xc
c001c952:	50                   	push   eax
c001c953:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c956:	83 c4 10             	add    esp,0x10
c001c959:	31 c0                	xor    eax,eax
c001c95b:	83 c4 0c             	add    esp,0xc
c001c95e:	c3                   	ret    
c001c95f:	90                   	nop

c001c960 <ATAPI::ATAPI()>:
c001c960:	83 ec 0c             	sub    esp,0xc
c001c963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c967:	83 ec 04             	sub    esp,0x4
c001c96a:	68 00 08 00 00       	push   0x800
c001c96f:	68 f9 25 02 c0       	push   0xc00225f9
c001c974:	50                   	push   eax
c001c975:	e8 dc fa fe ff       	call   c000c456 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c97a:	83 c4 10             	add    esp,0x10
c001c97d:	ba 14 25 02 c0       	mov    edx,0xc0022514
c001c982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c986:	89 10                	mov    DWORD PTR [eax],edx
c001c988:	90                   	nop
c001c989:	83 c4 0c             	add    esp,0xc
c001c98c:	c3                   	ret    
c001c98d:	90                   	nop

c001c98e <ATAPI::readyForCommand()>:
c001c98e:	56                   	push   esi
c001c98f:	53                   	push   ebx
c001c990:	53                   	push   ebx
c001c991:	31 db                	xor    ebx,ebx
c001c993:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c997:	51                   	push   ecx
c001c998:	6a 0c                	push   0xc
c001c99a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c9a1:	50                   	push   eax
c001c9a2:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c9a8:	e8 77 e8 ff ff       	call   c001b224 <IDE::read(unsigned char, unsigned char)>
c001c9ad:	83 c4 10             	add    esp,0x10
c001c9b0:	a8 88                	test   al,0x88
c001c9b2:	74 25                	je     c001c9d9 <ATAPI::readyForCommand()+0x4b>
c001c9b4:	43                   	inc    ebx
c001c9b5:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001c9bb:	7e da                	jle    c001c997 <ATAPI::readyForCommand()+0x9>
c001c9bd:	83 ec 0c             	sub    esp,0xc
c001c9c0:	68 5e 01 00 00       	push   0x15e
c001c9c5:	e8 c6 8d ff ff       	call   c0015790 <milliTenthSleep(unsigned int)>
c001c9ca:	83 c4 10             	add    esp,0x10
c001c9cd:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001c9d3:	75 c2                	jne    c001c997 <ATAPI::readyForCommand()+0x9>
c001c9d5:	31 c0                	xor    eax,eax
c001c9d7:	eb 02                	jmp    c001c9db <ATAPI::readyForCommand()+0x4d>
c001c9d9:	b0 01                	mov    al,0x1
c001c9db:	5a                   	pop    edx
c001c9dc:	5b                   	pop    ebx
c001c9dd:	5e                   	pop    esi
c001c9de:	c3                   	ret    
c001c9df:	90                   	nop

c001c9e0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001c9e0:	55                   	push   ebp
c001c9e1:	57                   	push   edi
c001c9e2:	56                   	push   esi
c001c9e3:	53                   	push   ebx
c001c9e4:	83 ec 20             	sub    esp,0x20
c001c9e7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c9eb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001c9ef:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c9f3:	6a 01                	push   0x1
c001c9f5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c9fc:	50                   	push   eax
c001c9fd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ca03:	e8 6a e9 ff ff       	call   c001b372 <IDE::enableIRQs(unsigned char, bool)>
c001ca08:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ca0f:	59                   	pop    ecx
c001ca10:	5e                   	pop    esi
c001ca11:	50                   	push   eax
c001ca12:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ca18:	e8 21 e7 ff ff       	call   c001b13e <IDE::prepareInterrupt(unsigned char)>
c001ca1d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ca20:	e8 69 ff ff ff       	call   c001c98e <ATAPI::readyForCommand()>
c001ca25:	83 c4 10             	add    esp,0x10
c001ca28:	84 c0                	test   al,al
c001ca2a:	75 0a                	jne    c001ca36 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001ca2c:	bb 01 00 00 00       	mov    ebx,0x1
c001ca31:	e9 5f 02 00 00       	jmp    c001cc95 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ca36:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001ca3c:	c1 e0 04             	shl    eax,0x4
c001ca3f:	0f b6 c0             	movzx  eax,al
c001ca42:	50                   	push   eax
c001ca43:	6a 06                	push   0x6
c001ca45:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ca4c:	50                   	push   eax
c001ca4d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ca53:	e8 0c e7 ff ff       	call   c001b164 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca58:	6a 00                	push   0x0
c001ca5a:	6a 01                	push   0x1
c001ca5c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ca63:	50                   	push   eax
c001ca64:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ca6a:	e8 f5 e6 ff ff       	call   c001b164 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca6f:	83 c4 20             	add    esp,0x20
c001ca72:	0f b6 c3             	movzx  eax,bl
c001ca75:	50                   	push   eax
c001ca76:	0f b6 df             	movzx  ebx,bh
c001ca79:	6a 04                	push   0x4
c001ca7b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ca82:	50                   	push   eax
c001ca83:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ca89:	e8 d6 e6 ff ff       	call   c001b164 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca8e:	53                   	push   ebx
c001ca8f:	6a 05                	push   0x5
c001ca91:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ca98:	50                   	push   eax
c001ca99:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ca9f:	e8 c0 e6 ff ff       	call   c001b164 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001caa4:	83 c4 20             	add    esp,0x20
c001caa7:	68 a0 00 00 00       	push   0xa0
c001caac:	6a 07                	push   0x7
c001caae:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cab5:	50                   	push   eax
c001cab6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cabc:	e8 a3 e6 ff ff       	call   c001b164 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cac1:	83 c4 0c             	add    esp,0xc
c001cac4:	6a 01                	push   0x1
c001cac6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cacd:	50                   	push   eax
c001cace:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cad4:	e8 6f f1 ff ff       	call   c001bc48 <IDE::polling(unsigned char, unsigned int)>
c001cad9:	83 c4 10             	add    esp,0x10
c001cadc:	0f b6 d8             	movzx  ebx,al
c001cadf:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001cae5:	85 db                	test   ebx,ebx
c001cae7:	74 20                	je     c001cb09 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001cae9:	53                   	push   ebx
c001caea:	0f b6 c0             	movzx  eax,al
c001caed:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001caf4:	52                   	push   edx
c001caf5:	50                   	push   eax
c001caf6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cafc:	e8 8d f0 ff ff       	call   c001bb8e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cb01:	83 c4 10             	add    esp,0x10
c001cb04:	e9 8c 01 00 00       	jmp    c001cc95 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001cb09:	52                   	push   edx
c001cb0a:	0f b6 c0             	movzx  eax,al
c001cb0d:	52                   	push   edx
c001cb0e:	50                   	push   eax
c001cb0f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cb15:	e8 38 e6 ff ff       	call   c001b152 <IDE::getBase(unsigned char)>
c001cb1a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001cb1e:	b9 06 00 00 00       	mov    ecx,0x6
c001cb23:	89 c2                	mov    edx,eax
c001cb25:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001cb28:	89 e8                	mov    eax,ebp
c001cb2a:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001cb2e:	83 c4 10             	add    esp,0x10
c001cb31:	0f b6 c0             	movzx  eax,al
c001cb34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cb38:	85 db                	test   ebx,ebx
c001cb3a:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001cb40:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001cb47:	0f 84 eb 00 00 00    	je     c001cc38 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001cb4d:	55                   	push   ebp
c001cb4e:	55                   	push   ebp
c001cb4f:	52                   	push   edx
c001cb50:	50                   	push   eax
c001cb51:	e8 82 e7 ff ff       	call   c001b2d8 <IDE::waitInterrupt(unsigned char)>
c001cb56:	83 c4 10             	add    esp,0x10
c001cb59:	84 c0                	test   al,al
c001cb5b:	0f 84 cb fe ff ff    	je     c001ca2c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001cb61:	56                   	push   esi
c001cb62:	56                   	push   esi
c001cb63:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cb6a:	50                   	push   eax
c001cb6b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cb71:	e8 c8 e5 ff ff       	call   c001b13e <IDE::prepareInterrupt(unsigned char)>
c001cb76:	83 c4 0c             	add    esp,0xc
c001cb79:	6a 04                	push   0x4
c001cb7b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cb82:	50                   	push   eax
c001cb83:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cb89:	e8 96 e6 ff ff       	call   c001b224 <IDE::read(unsigned char, unsigned char)>
c001cb8e:	83 c4 0c             	add    esp,0xc
c001cb91:	6a 05                	push   0x5
c001cb93:	89 c6                	mov    esi,eax
c001cb95:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cb9c:	50                   	push   eax
c001cb9d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cba3:	e8 7c e6 ff ff       	call   c001b224 <IDE::read(unsigned char, unsigned char)>
c001cba8:	83 c4 10             	add    esp,0x10
c001cbab:	0f b6 e8             	movzx  ebp,al
c001cbae:	89 f0                	mov    eax,esi
c001cbb0:	c1 e5 08             	shl    ebp,0x8
c001cbb3:	0f b6 f0             	movzx  esi,al
c001cbb6:	09 f5                	or     ebp,esi
c001cbb8:	31 f6                	xor    esi,esi
c001cbba:	d1 fd                	sar    ebp,1
c001cbbc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cbc1:	74 5c                	je     c001cc1f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001cbc3:	39 ee                	cmp    esi,ebp
c001cbc5:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001cbcb:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001cbd2:	75 0d                	jne    c001cbe1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001cbd4:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001cbd7:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001cbdb:	4b                   	dec    ebx
c001cbdc:	e9 57 ff ff ff       	jmp    c001cb38 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001cbe1:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001cbe5:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001cbe9:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001cbee:	51                   	push   ecx
c001cbef:	51                   	push   ecx
c001cbf0:	52                   	push   edx
c001cbf1:	50                   	push   eax
c001cbf2:	e8 5b e5 ff ff       	call   c001b152 <IDE::getBase(unsigned char)>
c001cbf7:	89 c2                	mov    edx,eax
c001cbf9:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001cbfe:	66 ef                	out    dx,ax
c001cc00:	46                   	inc    esi
c001cc01:	83 c4 10             	add    esp,0x10
c001cc04:	eb bd                	jmp    c001cbc3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001cc06:	51                   	push   ecx
c001cc07:	51                   	push   ecx
c001cc08:	52                   	push   edx
c001cc09:	50                   	push   eax
c001cc0a:	e8 43 e5 ff ff       	call   c001b152 <IDE::getBase(unsigned char)>
c001cc0f:	89 c2                	mov    edx,eax
c001cc11:	66 ed                	in     ax,dx
c001cc13:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cc17:	83 c4 10             	add    esp,0x10
c001cc1a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001cc1e:	46                   	inc    esi
c001cc1f:	39 ee                	cmp    esi,ebp
c001cc21:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001cc27:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001cc2e:	75 d6                	jne    c001cc06 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001cc30:	01 f6                	add    esi,esi
c001cc32:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001cc36:	eb a3                	jmp    c001cbdb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001cc38:	51                   	push   ecx
c001cc39:	51                   	push   ecx
c001cc3a:	52                   	push   edx
c001cc3b:	50                   	push   eax
c001cc3c:	e8 97 e6 ff ff       	call   c001b2d8 <IDE::waitInterrupt(unsigned char)>
c001cc41:	83 c4 10             	add    esp,0x10
c001cc44:	84 c0                	test   al,al
c001cc46:	0f 84 e0 fd ff ff    	je     c001ca2c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001cc4c:	52                   	push   edx
c001cc4d:	bb a0 86 01 00       	mov    ebx,0x186a0
c001cc52:	52                   	push   edx
c001cc53:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cc5a:	50                   	push   eax
c001cc5b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cc61:	e8 d8 e4 ff ff       	call   c001b13e <IDE::prepareInterrupt(unsigned char)>
c001cc66:	83 c4 10             	add    esp,0x10
c001cc69:	50                   	push   eax
c001cc6a:	50                   	push   eax
c001cc6b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cc72:	50                   	push   eax
c001cc73:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cc79:	e8 d4 e4 ff ff       	call   c001b152 <IDE::getBase(unsigned char)>
c001cc7e:	8d 50 07             	lea    edx,[eax+0x7]
c001cc81:	ec                   	in     al,dx
c001cc82:	83 c4 10             	add    esp,0x10
c001cc85:	a8 88                	test   al,0x88
c001cc87:	74 0a                	je     c001cc93 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001cc89:	4b                   	dec    ebx
c001cc8a:	75 dd                	jne    c001cc69 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001cc8c:	bb 02 00 00 00       	mov    ebx,0x2
c001cc91:	eb 02                	jmp    c001cc95 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001cc93:	31 db                	xor    ebx,ebx
c001cc95:	83 c4 1c             	add    esp,0x1c
c001cc98:	89 d8                	mov    eax,ebx
c001cc9a:	5b                   	pop    ebx
c001cc9b:	5e                   	pop    esi
c001cc9c:	5f                   	pop    edi
c001cc9d:	5d                   	pop    ebp
c001cc9e:	c3                   	ret    
c001cc9f:	90                   	nop

c001cca0 <ATAPI::diskRemoved()>:
c001cca0:	53                   	push   ebx
c001cca1:	83 ec 14             	sub    esp,0x14
c001cca4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001cca8:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001ccaf:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001ccb5:	e8 3e 07 ff ff       	call   c000d3f8 <LogicalDisk::unmount()>
c001ccba:	58                   	pop    eax
c001ccbb:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001ccc1:	e8 16 11 ff ff       	call   c000dddc <VCache::writeWriteBuffer()>
c001ccc6:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001cccc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ccd0:	83 c4 18             	add    esp,0x18
c001ccd3:	5b                   	pop    ebx
c001ccd4:	e9 f3 10 ff ff       	jmp    c000ddcc <VCache::invalidateReadBuffer()>
c001ccd9:	90                   	nop

c001ccda <ATAPI::eject()>:
c001ccda:	57                   	push   edi
c001ccdb:	b9 03 00 00 00       	mov    ecx,0x3
c001cce0:	53                   	push   ebx
c001cce1:	83 ec 14             	sub    esp,0x14
c001cce4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cce8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ccec:	fc                   	cld    
c001cced:	31 c0                	xor    eax,eax
c001ccef:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ccf1:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001ccf6:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001ccfb:	50                   	push   eax
c001ccfc:	50                   	push   eax
c001ccfd:	6a 00                	push   0x0
c001ccff:	6a 00                	push   0x0
c001cd01:	6a 00                	push   0x0
c001cd03:	6a 02                	push   0x2
c001cd05:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cd09:	50                   	push   eax
c001cd0a:	53                   	push   ebx
c001cd0b:	e8 d0 fc ff ff       	call   c001c9e0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cd10:	83 c4 14             	add    esp,0x14
c001cd13:	53                   	push   ebx
c001cd14:	e8 87 ff ff ff       	call   c001cca0 <ATAPI::diskRemoved()>
c001cd19:	83 c4 24             	add    esp,0x24
c001cd1c:	31 c0                	xor    eax,eax
c001cd1e:	5b                   	pop    ebx
c001cd1f:	5f                   	pop    edi
c001cd20:	c3                   	ret    
c001cd21:	90                   	nop

c001cd22 <ATAPI::diskInserted()>:
c001cd22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd26:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001cd2d:	c3                   	ret    

c001cd2e <ATAPI::detectMedia()>:
c001cd2e:	56                   	push   esi
c001cd2f:	53                   	push   ebx
c001cd30:	83 ec 28             	sub    esp,0x28
c001cd33:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cd37:	6a 0c                	push   0xc
c001cd39:	6a 00                	push   0x0
c001cd3b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001cd3f:	56                   	push   esi
c001cd40:	e8 ab 37 fe ff       	call   c00004f0 <memset>
c001cd45:	58                   	pop    eax
c001cd46:	5a                   	pop    edx
c001cd47:	6a 00                	push   0x0
c001cd49:	6a 00                	push   0x0
c001cd4b:	6a 00                	push   0x0
c001cd4d:	6a 00                	push   0x0
c001cd4f:	56                   	push   esi
c001cd50:	53                   	push   ebx
c001cd51:	e8 8a fc ff ff       	call   c001c9e0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cd56:	83 c4 1c             	add    esp,0x1c
c001cd59:	6a 0c                	push   0xc
c001cd5b:	6a 00                	push   0x0
c001cd5d:	56                   	push   esi
c001cd5e:	e8 8d 37 fe ff       	call   c00004f0 <memset>
c001cd63:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001cd68:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001cd6d:	59                   	pop    ecx
c001cd6e:	58                   	pop    eax
c001cd6f:	6a 01                	push   0x1
c001cd71:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001cd75:	50                   	push   eax
c001cd76:	6a 00                	push   0x0
c001cd78:	6a 12                	push   0x12
c001cd7a:	56                   	push   esi
c001cd7b:	53                   	push   ebx
c001cd7c:	e8 5f fc ff ff       	call   c001c9e0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cd81:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001cd85:	83 c4 20             	add    esp,0x20
c001cd88:	83 e0 7f             	and    eax,0x7f
c001cd8b:	83 f8 70             	cmp    eax,0x70
c001cd8e:	74 15                	je     c001cda5 <ATAPI::detectMedia()+0x77>
c001cd90:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cd97:	75 0c                	jne    c001cda5 <ATAPI::detectMedia()+0x77>
c001cd99:	83 ec 0c             	sub    esp,0xc
c001cd9c:	53                   	push   ebx
c001cd9d:	e8 80 ff ff ff       	call   c001cd22 <ATAPI::diskInserted()>
c001cda2:	83 c4 10             	add    esp,0x10
c001cda5:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001cda9:	83 e0 0f             	and    eax,0xf
c001cdac:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001cdb1:	0f b6 c0             	movzx  eax,al
c001cdb4:	75 19                	jne    c001cdcf <ATAPI::detectMedia()+0xa1>
c001cdb6:	83 f8 02             	cmp    eax,0x2
c001cdb9:	75 14                	jne    c001cdcf <ATAPI::detectMedia()+0xa1>
c001cdbb:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cdc2:	74 24                	je     c001cde8 <ATAPI::detectMedia()+0xba>
c001cdc4:	83 ec 0c             	sub    esp,0xc
c001cdc7:	53                   	push   ebx
c001cdc8:	e8 d3 fe ff ff       	call   c001cca0 <ATAPI::diskRemoved()>
c001cdcd:	eb 16                	jmp    c001cde5 <ATAPI::detectMedia()+0xb7>
c001cdcf:	85 c0                	test   eax,eax
c001cdd1:	75 15                	jne    c001cde8 <ATAPI::detectMedia()+0xba>
c001cdd3:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cdda:	75 0c                	jne    c001cde8 <ATAPI::detectMedia()+0xba>
c001cddc:	83 ec 0c             	sub    esp,0xc
c001cddf:	53                   	push   ebx
c001cde0:	e8 3d ff ff ff       	call   c001cd22 <ATAPI::diskInserted()>
c001cde5:	83 c4 10             	add    esp,0x10
c001cde8:	83 c4 24             	add    esp,0x24
c001cdeb:	5b                   	pop    ebx
c001cdec:	5e                   	pop    esi
c001cded:	c3                   	ret    

c001cdee <ATAPI::open(int, int, void*)>:
c001cdee:	56                   	push   esi
c001cdef:	53                   	push   ebx
c001cdf0:	50                   	push   eax
c001cdf1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cdf5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cdf9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cdfd:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ce03:	c1 e0 06             	shl    eax,0x6
c001ce06:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001ce0c:	01 d0                	add    eax,edx
c001ce0e:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001ce15:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001ce1b:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001ce22:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001ce2c:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001ce33:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001ce39:	6a 04                	push   0x4
c001ce3b:	6a 0c                	push   0xc
c001ce3d:	51                   	push   ecx
c001ce3e:	52                   	push   edx
c001ce3f:	e8 20 e3 ff ff       	call   c001b164 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce44:	90                   	nop
c001ce45:	90                   	nop
c001ce46:	6a 00                	push   0x0
c001ce48:	6a 0c                	push   0xc
c001ce4a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce51:	50                   	push   eax
c001ce52:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce58:	e8 07 e3 ff ff       	call   c001b164 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce5d:	83 c4 14             	add    esp,0x14
c001ce60:	68 78 01 00 00       	push   0x178
c001ce65:	e8 61 ac fe ff       	call   c0007acb <malloc>
c001ce6a:	83 c4 0c             	add    esp,0xc
c001ce6d:	6a 00                	push   0x0
c001ce6f:	68 ff ff ff 7f       	push   0x7fffffff
c001ce74:	6a 00                	push   0x0
c001ce76:	6a 00                	push   0x0
c001ce78:	53                   	push   ebx
c001ce79:	68 ab 26 02 c0       	push   0xc00226ab
c001ce7e:	89 c6                	mov    esi,eax
c001ce80:	50                   	push   eax
c001ce81:	e8 b0 03 ff ff       	call   c000d236 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001ce86:	83 c4 14             	add    esp,0x14
c001ce89:	56                   	push   esi
c001ce8a:	e8 67 04 ff ff       	call   c000d2f6 <LogicalDisk::assignDriveLetter()>
c001ce8f:	5a                   	pop    edx
c001ce90:	59                   	pop    ecx
c001ce91:	0f be c0             	movsx  eax,al
c001ce94:	50                   	push   eax
c001ce95:	68 fc 24 02 c0       	push   0xc00224fc
c001ce9a:	e8 5f da fe ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c001ce9f:	58                   	pop    eax
c001cea0:	5a                   	pop    edx
c001cea1:	56                   	push   esi
c001cea2:	53                   	push   ebx
c001cea3:	e8 e0 f1 fe ff       	call   c000c088 <Device::addChild(Device*)>
c001cea8:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001ceae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ceb1:	e8 08 f6 fe ff       	call   c000c4be <PhysicalDisk::startCache()>
c001ceb6:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001cebd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cec0:	e8 69 fe ff ff       	call   c001cd2e <ATAPI::detectMedia()>
c001cec5:	83 c4 14             	add    esp,0x14
c001cec8:	31 c0                	xor    eax,eax
c001ceca:	5b                   	pop    ebx
c001cecb:	5e                   	pop    esi
c001cecc:	c3                   	ret    
c001cecd:	90                   	nop

c001cece <ATAPI::read(unsigned long long, int, void*)>:
c001cece:	55                   	push   ebp
c001cecf:	57                   	push   edi
c001ced0:	56                   	push   esi
c001ced1:	53                   	push   ebx
c001ced2:	83 ec 1c             	sub    esp,0x1c
c001ced5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ced9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001cedd:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001cee1:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cee8:	74 3c                	je     c001cf26 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001ceea:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ceee:	b9 03 00 00 00       	mov    ecx,0x3
c001cef3:	fc                   	cld    
c001cef4:	31 c0                	xor    eax,eax
c001cef6:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001cef8:	89 e8                	mov    eax,ebp
c001cefa:	0f ce                	bswap  esi
c001cefc:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001cf00:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001cf05:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001cf09:	50                   	push   eax
c001cf0a:	50                   	push   eax
c001cf0b:	55                   	push   ebp
c001cf0c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cf10:	c1 e5 0b             	shl    ebp,0xb
c001cf13:	6a 00                	push   0x0
c001cf15:	55                   	push   ebp
c001cf16:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cf1a:	50                   	push   eax
c001cf1b:	53                   	push   ebx
c001cf1c:	e8 bf fa ff ff       	call   c001c9e0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cf21:	83 c4 20             	add    esp,0x20
c001cf24:	eb 1a                	jmp    c001cf40 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001cf26:	83 ec 0c             	sub    esp,0xc
c001cf29:	53                   	push   ebx
c001cf2a:	e8 ff fd ff ff       	call   c001cd2e <ATAPI::detectMedia()>
c001cf2f:	83 c4 10             	add    esp,0x10
c001cf32:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cf39:	75 af                	jne    c001ceea <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001cf3b:	b8 02 00 00 00       	mov    eax,0x2
c001cf40:	83 c4 1c             	add    esp,0x1c
c001cf43:	5b                   	pop    ebx
c001cf44:	5e                   	pop    esi
c001cf45:	5f                   	pop    edi
c001cf46:	5d                   	pop    ebp
c001cf47:	c3                   	ret    

c001cf48 <SATA::close(int, int, void*)>:
c001cf48:	83 ec 0c             	sub    esp,0xc
c001cf4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf4f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cf55:	85 c0                	test   eax,eax
c001cf57:	74 0c                	je     c001cf65 <SATA::close(int, int, void*)+0x1d>
c001cf59:	8b 10                	mov    edx,DWORD PTR [eax]
c001cf5b:	83 ec 0c             	sub    esp,0xc
c001cf5e:	50                   	push   eax
c001cf5f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cf62:	83 c4 10             	add    esp,0x10
c001cf65:	31 c0                	xor    eax,eax
c001cf67:	83 c4 0c             	add    esp,0xc
c001cf6a:	c3                   	ret    
c001cf6b:	90                   	nop

c001cf6c <SATA::powerSaving(PowerSavingLevel)>:
c001cf6c:	c3                   	ret    
c001cf6d:	90                   	nop

c001cf6e <SATA::open(int, int, void*)>:
c001cf6e:	56                   	push   esi
c001cf6f:	53                   	push   ebx
c001cf70:	50                   	push   eax
c001cf71:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cf75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cf79:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001cf83:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001cf89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cf8d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001cf97:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001cfa1:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001cfa8:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001cfae:	e8 22 ae fe ff       	call   c0007dd5 <Phys::allocatePage()>
c001cfb3:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001cfb9:	89 c6                	mov    esi,eax
c001cfbb:	e8 15 ae fe ff       	call   c0007dd5 <Phys::allocatePage()>
c001cfc0:	81 c6 00 10 00 00    	add    esi,0x1000
c001cfc6:	39 c6                	cmp    esi,eax
c001cfc8:	74 10                	je     c001cfda <SATA::open(int, int, void*)+0x6c>
c001cfca:	83 ec 0c             	sub    esp,0xc
c001cfcd:	68 44 25 02 c0       	push   0xc0022544
c001cfd2:	e8 9a 3b ff ff       	call   c0010b71 <KePanic(char const*)>
c001cfd7:	83 c4 10             	add    esp,0x10
c001cfda:	83 ec 0c             	sub    esp,0xc
c001cfdd:	6a 02                	push   0x2
c001cfdf:	e8 05 c6 fe ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c001cfe4:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cfea:	6a 03                	push   0x3
c001cfec:	50                   	push   eax
c001cfed:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001cff3:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001cff9:	e8 f4 cc fe ff       	call   c0009cf2 <VAS::mapPage(unsigned long, unsigned long, int)>
c001cffe:	83 c4 14             	add    esp,0x14
c001d001:	53                   	push   ebx
c001d002:	e8 b7 f4 fe ff       	call   c000c4be <PhysicalDisk::startCache()>
c001d007:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d00a:	e8 fb 06 ff ff       	call   c000d70a <createPartitionsForDisk(PhysicalDisk*)>
c001d00f:	83 c4 14             	add    esp,0x14
c001d012:	31 c0                	xor    eax,eax
c001d014:	5b                   	pop    ebx
c001d015:	5e                   	pop    esi
c001d016:	c3                   	ret    
c001d017:	90                   	nop

c001d018 <SATA::SATA()>:
c001d018:	83 ec 0c             	sub    esp,0xc
c001d01b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d01f:	83 ec 04             	sub    esp,0x4
c001d022:	68 00 02 00 00       	push   0x200
c001d027:	68 58 25 02 c0       	push   0xc0022558
c001d02c:	50                   	push   eax
c001d02d:	e8 24 f4 fe ff       	call   c000c456 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d032:	83 c4 10             	add    esp,0x10
c001d035:	ba c8 25 02 c0       	mov    edx,0xc00225c8
c001d03a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d03e:	89 10                	mov    DWORD PTR [eax],edx
c001d040:	90                   	nop
c001d041:	83 c4 0c             	add    esp,0xc
c001d044:	c3                   	ret    
c001d045:	90                   	nop

c001d046 <SATA::access(unsigned long long, int, void*, bool)>:
c001d046:	55                   	push   ebp
c001d047:	57                   	push   edi
c001d048:	56                   	push   esi
c001d049:	53                   	push   ebx
c001d04a:	83 ec 2c             	sub    esp,0x2c
c001d04d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d051:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001d056:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d05a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d05e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d062:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d066:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d06a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d06e:	7e 10                	jle    c001d080 <SATA::access(unsigned long long, int, void*, bool)+0x3a>
c001d070:	83 ec 0c             	sub    esp,0xc
c001d073:	68 68 25 02 c0       	push   0xc0022568
c001d078:	e8 f4 3a ff ff       	call   c0010b71 <KePanic(char const*)>
c001d07d:	83 c4 10             	add    esp,0x10
c001d080:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001d086:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001d08c:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d092:	89 e8                	mov    eax,ebp
c001d094:	c1 e0 07             	shl    eax,0x7
c001d097:	01 d0                	add    eax,edx
c001d099:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d0a3:	8d 45 02             	lea    eax,[ebp+0x2]
c001d0a6:	51                   	push   ecx
c001d0a7:	c1 e0 07             	shl    eax,0x7
c001d0aa:	51                   	push   ecx
c001d0ab:	01 d0                	add    eax,edx
c001d0ad:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001d0b1:	50                   	push   eax
c001d0b2:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001d0b8:	e8 6b ec ff ff       	call   c001bd28 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d0bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d0c1:	83 c4 10             	add    esp,0x10
c001d0c4:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001d0c9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d0cd:	0f 84 5b 01 00 00    	je     c001d22e <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d0d3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d0d7:	c1 e0 09             	shl    eax,0x9
c001d0da:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001d0df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d0e3:	74 0e                	je     c001d0f3 <SATA::access(unsigned long long, int, void*, bool)+0xad>
c001d0e5:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001d0eb:	89 c1                	mov    ecx,eax
c001d0ed:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001d0f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d0f3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d0f7:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d0fd:	8d 45 02             	lea    eax,[ebp+0x2]
c001d100:	c1 e0 07             	shl    eax,0x7
c001d103:	01 d0                	add    eax,edx
c001d105:	8b 00                	mov    eax,DWORD PTR [eax]
c001d107:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d10d:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d113:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d117:	c1 e1 05             	shl    ecx,0x5
c001d11a:	01 c8                	add    eax,ecx
c001d11c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d120:	83 e1 01             	and    ecx,0x1
c001d123:	89 ce                	mov    esi,ecx
c001d125:	8a 08                	mov    cl,BYTE PTR [eax]
c001d127:	c1 e6 06             	shl    esi,0x6
c001d12a:	83 e1 bf             	and    ecx,0xffffffbf
c001d12d:	09 f1                	or     ecx,esi
c001d12f:	88 08                	mov    BYTE PTR [eax],cl
c001d131:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d133:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001d139:	81 c9 05 00 01 00    	or     ecx,0x10005
c001d13f:	89 08                	mov    DWORD PTR [eax],ecx
c001d141:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d147:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001d14d:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001d153:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001d156:	50                   	push   eax
c001d157:	68 90 00 00 00       	push   0x90
c001d15c:	6a 00                	push   0x0
c001d15e:	56                   	push   esi
c001d15f:	e8 8c 33 fe ff       	call   c00004f0 <memset>
c001d164:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d16a:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001d170:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d174:	83 c4 10             	add    esp,0x10
c001d177:	48                   	dec    eax
c001d178:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d17d:	89 c1                	mov    ecx,eax
c001d17f:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001d185:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d18a:	09 c8                	or     eax,ecx
c001d18c:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001d192:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001d198:	83 c8 80             	or     eax,0xffffff80
c001d19b:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001d1a1:	66 8b 06             	mov    ax,WORD PTR [esi]
c001d1a4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d1a8:	25 00 7f 00 00       	and    eax,0x7f00
c001d1ad:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d1b2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001d1b7:	66 89 06             	mov    WORD PTR [esi],ax
c001d1ba:	b0 35                	mov    al,0x35
c001d1bc:	75 02                	jne    c001d1c0 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001d1be:	b0 25                	mov    al,0x25
c001d1c0:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001d1c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d1c7:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001d1cb:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001d1cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d1d3:	c1 e8 10             	shr    eax,0x10
c001d1d6:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001d1d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d1dd:	c1 e8 18             	shr    eax,0x18
c001d1e0:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001d1e3:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001d1e7:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001d1ea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d1ee:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001d1f1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d1f5:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001d1f9:	89 ee                	mov    esi,ebp
c001d1fb:	31 c0                	xor    eax,eax
c001d1fd:	c1 e6 07             	shl    esi,0x7
c001d200:	01 d6                	add    esi,edx
c001d202:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001d208:	80 e1 88             	and    cl,0x88
c001d20b:	74 0a                	je     c001d217 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001d20d:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d212:	74 0a                	je     c001d21e <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001d214:	40                   	inc    eax
c001d215:	eb eb                	jmp    c001d202 <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001d217:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d21c:	75 17                	jne    c001d235 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001d21e:	83 ec 0c             	sub    esp,0xc
c001d221:	68 a1 25 02 c0       	push   0xc00225a1
c001d226:	e8 d3 d6 fe ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c001d22b:	83 c4 10             	add    esp,0x10
c001d22e:	b8 01 00 00 00       	mov    eax,0x1
c001d233:	eb 5b                	jmp    c001d290 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001d235:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001d239:	c1 e5 07             	shl    ebp,0x7
c001d23c:	b8 01 00 00 00       	mov    eax,0x1
c001d241:	01 ea                	add    edx,ebp
c001d243:	d3 e0                	shl    eax,cl
c001d245:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001d24b:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001d251:	85 c8                	test   eax,ecx
c001d253:	74 16                	je     c001d26b <SATA::access(unsigned long long, int, void*, bool)+0x225>
c001d255:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001d25b:	0f ba e1 1e          	bt     ecx,0x1e
c001d25f:	73 ea                	jae    c001d24b <SATA::access(unsigned long long, int, void*, bool)+0x205>
c001d261:	83 ec 0c             	sub    esp,0xc
c001d264:	68 af 25 02 c0       	push   0xc00225af
c001d269:	eb bb                	jmp    c001d226 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001d26b:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001d271:	0f ba e0 1e          	bt     eax,0x1e
c001d275:	72 b7                	jb     c001d22e <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d277:	31 c0                	xor    eax,eax
c001d279:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001d27e:	75 10                	jne    c001d290 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001d280:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001d286:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001d28a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d28e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d290:	83 c4 2c             	add    esp,0x2c
c001d293:	5b                   	pop    ebx
c001d294:	5e                   	pop    esi
c001d295:	5f                   	pop    edi
c001d296:	5d                   	pop    ebp
c001d297:	c3                   	ret    

c001d298 <SATA::read(unsigned long long, int, void*)>:
c001d298:	55                   	push   ebp
c001d299:	57                   	push   edi
c001d29a:	56                   	push   esi
c001d29b:	be 04 00 00 00       	mov    esi,0x4
c001d2a0:	53                   	push   ebx
c001d2a1:	83 ec 0c             	sub    esp,0xc
c001d2a4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d2a8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d2ac:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d2b0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d2b4:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d2b7:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d2bd:	0f 87 1a 02 00 00    	ja     c001d4dd <SATA::read(unsigned long long, int, void*)+0x245>
c001d2c3:	85 c9                	test   ecx,ecx
c001d2c5:	be 06 00 00 00       	mov    esi,0x6
c001d2ca:	0f 84 0d 02 00 00    	je     c001d4dd <SATA::read(unsigned long long, int, void*)+0x245>
c001d2d0:	56                   	push   esi
c001d2d1:	56                   	push   esi
c001d2d2:	6a 00                	push   0x0
c001d2d4:	51                   	push   ecx
c001d2d5:	53                   	push   ebx
c001d2d6:	52                   	push   edx
c001d2d7:	50                   	push   eax
c001d2d8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d2dc:	e8 65 fd ff ff       	call   c001d046 <SATA::access(unsigned long long, int, void*, bool)>
c001d2e1:	83 c4 20             	add    esp,0x20
c001d2e4:	85 c0                	test   eax,eax
c001d2e6:	89 c6                	mov    esi,eax
c001d2e8:	0f 85 ea 01 00 00    	jne    c001d4d8 <SATA::read(unsigned long long, int, void*)+0x240>
c001d2ee:	50                   	push   eax
c001d2ef:	50                   	push   eax
c001d2f0:	6a 0f                	push   0xf
c001d2f2:	6a 00                	push   0x0
c001d2f4:	01 1d 54 9b 02 c0    	add    DWORD PTR ds:0xc0029b54,ebx
c001d2fa:	bb 0a 00 00 00       	mov    ebx,0xa
c001d2ff:	e8 7d f2 ff ff       	call   c001c581 <combineColours(unsigned char, unsigned char)>
c001d304:	5a                   	pop    edx
c001d305:	59                   	pop    ecx
c001d306:	b9 10 27 00 00       	mov    ecx,0x2710
c001d30b:	0f b6 c0             	movzx  eax,al
c001d30e:	50                   	push   eax
c001d30f:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001d314:	99                   	cdq    
c001d315:	f7 f9                	idiv   ecx
c001d317:	99                   	cdq    
c001d318:	f7 fb                	idiv   ebx
c001d31a:	8d 42 30             	lea    eax,[edx+0x30]
c001d31d:	0f b6 c0             	movzx  eax,al
c001d320:	50                   	push   eax
c001d321:	e8 4a f2 ff ff       	call   c001c570 <combineCharAndColour(char, unsigned char)>
c001d326:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d32c:	5f                   	pop    edi
c001d32d:	5d                   	pop    ebp
c001d32e:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d333:	6a 0f                	push   0xf
c001d335:	6a 00                	push   0x0
c001d337:	e8 45 f2 ff ff       	call   c001c581 <combineColours(unsigned char, unsigned char)>
c001d33c:	5a                   	pop    edx
c001d33d:	59                   	pop    ecx
c001d33e:	0f b6 c0             	movzx  eax,al
c001d341:	50                   	push   eax
c001d342:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001d347:	99                   	cdq    
c001d348:	f7 fd                	idiv   ebp
c001d34a:	99                   	cdq    
c001d34b:	f7 fb                	idiv   ebx
c001d34d:	8d 42 30             	lea    eax,[edx+0x30]
c001d350:	0f b6 c0             	movzx  eax,al
c001d353:	50                   	push   eax
c001d354:	e8 17 f2 ff ff       	call   c001c570 <combineCharAndColour(char, unsigned char)>
c001d359:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d35f:	5f                   	pop    edi
c001d360:	bf 64 00 00 00       	mov    edi,0x64
c001d365:	58                   	pop    eax
c001d366:	6a 0f                	push   0xf
c001d368:	6a 00                	push   0x0
c001d36a:	e8 12 f2 ff ff       	call   c001c581 <combineColours(unsigned char, unsigned char)>
c001d36f:	5a                   	pop    edx
c001d370:	59                   	pop    ecx
c001d371:	0f b6 c0             	movzx  eax,al
c001d374:	50                   	push   eax
c001d375:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001d37a:	99                   	cdq    
c001d37b:	f7 ff                	idiv   edi
c001d37d:	99                   	cdq    
c001d37e:	f7 fb                	idiv   ebx
c001d380:	8d 42 30             	lea    eax,[edx+0x30]
c001d383:	0f b6 c0             	movzx  eax,al
c001d386:	50                   	push   eax
c001d387:	e8 e4 f1 ff ff       	call   c001c570 <combineCharAndColour(char, unsigned char)>
c001d38c:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d392:	58                   	pop    eax
c001d393:	5a                   	pop    edx
c001d394:	6a 0f                	push   0xf
c001d396:	6a 00                	push   0x0
c001d398:	e8 e4 f1 ff ff       	call   c001c581 <combineColours(unsigned char, unsigned char)>
c001d39d:	59                   	pop    ecx
c001d39e:	5a                   	pop    edx
c001d39f:	0f b6 c0             	movzx  eax,al
c001d3a2:	50                   	push   eax
c001d3a3:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001d3a8:	99                   	cdq    
c001d3a9:	f7 fb                	idiv   ebx
c001d3ab:	99                   	cdq    
c001d3ac:	f7 fb                	idiv   ebx
c001d3ae:	8d 42 30             	lea    eax,[edx+0x30]
c001d3b1:	0f b6 c0             	movzx  eax,al
c001d3b4:	50                   	push   eax
c001d3b5:	e8 b6 f1 ff ff       	call   c001c570 <combineCharAndColour(char, unsigned char)>
c001d3ba:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d3c0:	59                   	pop    ecx
c001d3c1:	58                   	pop    eax
c001d3c2:	6a 0f                	push   0xf
c001d3c4:	6a 00                	push   0x0
c001d3c6:	e8 b6 f1 ff ff       	call   c001c581 <combineColours(unsigned char, unsigned char)>
c001d3cb:	5a                   	pop    edx
c001d3cc:	59                   	pop    ecx
c001d3cd:	0f b6 c0             	movzx  eax,al
c001d3d0:	50                   	push   eax
c001d3d1:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001d3d6:	99                   	cdq    
c001d3d7:	f7 fb                	idiv   ebx
c001d3d9:	83 c2 30             	add    edx,0x30
c001d3dc:	0f b6 d2             	movzx  edx,dl
c001d3df:	52                   	push   edx
c001d3e0:	e8 8b f1 ff ff       	call   c001c570 <combineCharAndColour(char, unsigned char)>
c001d3e5:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d3eb:	58                   	pop    eax
c001d3ec:	5a                   	pop    edx
c001d3ed:	6a 0f                	push   0xf
c001d3ef:	6a 00                	push   0x0
c001d3f1:	e8 8b f1 ff ff       	call   c001c581 <combineColours(unsigned char, unsigned char)>
c001d3f6:	59                   	pop    ecx
c001d3f7:	b9 10 27 00 00       	mov    ecx,0x2710
c001d3fc:	5a                   	pop    edx
c001d3fd:	0f b6 c0             	movzx  eax,al
c001d400:	50                   	push   eax
c001d401:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001d406:	99                   	cdq    
c001d407:	f7 f9                	idiv   ecx
c001d409:	99                   	cdq    
c001d40a:	f7 fb                	idiv   ebx
c001d40c:	8d 42 30             	lea    eax,[edx+0x30]
c001d40f:	0f b6 c0             	movzx  eax,al
c001d412:	50                   	push   eax
c001d413:	e8 58 f1 ff ff       	call   c001c570 <combineCharAndColour(char, unsigned char)>
c001d418:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d41e:	59                   	pop    ecx
c001d41f:	58                   	pop    eax
c001d420:	6a 0f                	push   0xf
c001d422:	6a 00                	push   0x0
c001d424:	e8 58 f1 ff ff       	call   c001c581 <combineColours(unsigned char, unsigned char)>
c001d429:	5a                   	pop    edx
c001d42a:	59                   	pop    ecx
c001d42b:	0f b6 c0             	movzx  eax,al
c001d42e:	50                   	push   eax
c001d42f:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001d434:	99                   	cdq    
c001d435:	f7 fd                	idiv   ebp
c001d437:	99                   	cdq    
c001d438:	f7 fb                	idiv   ebx
c001d43a:	8d 42 30             	lea    eax,[edx+0x30]
c001d43d:	0f b6 c0             	movzx  eax,al
c001d440:	50                   	push   eax
c001d441:	e8 2a f1 ff ff       	call   c001c570 <combineCharAndColour(char, unsigned char)>
c001d446:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d44c:	5d                   	pop    ebp
c001d44d:	58                   	pop    eax
c001d44e:	6a 0f                	push   0xf
c001d450:	6a 00                	push   0x0
c001d452:	e8 2a f1 ff ff       	call   c001c581 <combineColours(unsigned char, unsigned char)>
c001d457:	5a                   	pop    edx
c001d458:	59                   	pop    ecx
c001d459:	0f b6 c0             	movzx  eax,al
c001d45c:	50                   	push   eax
c001d45d:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001d462:	99                   	cdq    
c001d463:	f7 ff                	idiv   edi
c001d465:	99                   	cdq    
c001d466:	f7 fb                	idiv   ebx
c001d468:	8d 42 30             	lea    eax,[edx+0x30]
c001d46b:	0f b6 c0             	movzx  eax,al
c001d46e:	50                   	push   eax
c001d46f:	e8 fc f0 ff ff       	call   c001c570 <combineCharAndColour(char, unsigned char)>
c001d474:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d47a:	5f                   	pop    edi
c001d47b:	5d                   	pop    ebp
c001d47c:	6a 0f                	push   0xf
c001d47e:	6a 00                	push   0x0
c001d480:	e8 fc f0 ff ff       	call   c001c581 <combineColours(unsigned char, unsigned char)>
c001d485:	5a                   	pop    edx
c001d486:	59                   	pop    ecx
c001d487:	0f b6 c0             	movzx  eax,al
c001d48a:	50                   	push   eax
c001d48b:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001d490:	99                   	cdq    
c001d491:	f7 fb                	idiv   ebx
c001d493:	99                   	cdq    
c001d494:	f7 fb                	idiv   ebx
c001d496:	8d 42 30             	lea    eax,[edx+0x30]
c001d499:	0f b6 c0             	movzx  eax,al
c001d49c:	50                   	push   eax
c001d49d:	e8 ce f0 ff ff       	call   c001c570 <combineCharAndColour(char, unsigned char)>
c001d4a2:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d4a8:	5f                   	pop    edi
c001d4a9:	5d                   	pop    ebp
c001d4aa:	6a 0f                	push   0xf
c001d4ac:	6a 00                	push   0x0
c001d4ae:	e8 ce f0 ff ff       	call   c001c581 <combineColours(unsigned char, unsigned char)>
c001d4b3:	5a                   	pop    edx
c001d4b4:	59                   	pop    ecx
c001d4b5:	0f b6 c0             	movzx  eax,al
c001d4b8:	50                   	push   eax
c001d4b9:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001d4be:	99                   	cdq    
c001d4bf:	f7 fb                	idiv   ebx
c001d4c1:	83 c2 30             	add    edx,0x30
c001d4c4:	0f b6 d2             	movzx  edx,dl
c001d4c7:	52                   	push   edx
c001d4c8:	e8 a3 f0 ff ff       	call   c001c570 <combineCharAndColour(char, unsigned char)>
c001d4cd:	83 c4 10             	add    esp,0x10
c001d4d0:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d4d6:	eb 05                	jmp    c001d4dd <SATA::read(unsigned long long, int, void*)+0x245>
c001d4d8:	be 01 00 00 00       	mov    esi,0x1
c001d4dd:	83 c4 0c             	add    esp,0xc
c001d4e0:	89 f0                	mov    eax,esi
c001d4e2:	5b                   	pop    ebx
c001d4e3:	5e                   	pop    esi
c001d4e4:	5f                   	pop    edi
c001d4e5:	5d                   	pop    ebp
c001d4e6:	c3                   	ret    
c001d4e7:	90                   	nop

c001d4e8 <SATA::write(unsigned long long, int, void*)>:
c001d4e8:	55                   	push   ebp
c001d4e9:	57                   	push   edi
c001d4ea:	56                   	push   esi
c001d4eb:	53                   	push   ebx
c001d4ec:	83 ec 0c             	sub    esp,0xc
c001d4ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001d4f3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d4f7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d4fb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d4ff:	8d 70 ff             	lea    esi,[eax-0x1]
c001d502:	b8 04 00 00 00       	mov    eax,0x4
c001d507:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001d50d:	0f 87 2c 02 00 00    	ja     c001d73f <SATA::write(unsigned long long, int, void*)+0x257>
c001d513:	85 db                	test   ebx,ebx
c001d515:	b8 06 00 00 00       	mov    eax,0x6
c001d51a:	0f 84 1f 02 00 00    	je     c001d73f <SATA::write(unsigned long long, int, void*)+0x257>
c001d520:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d524:	c1 e6 09             	shl    esi,0x9
c001d527:	01 de                	add    esi,ebx
c001d529:	50                   	push   eax
c001d52a:	89 d7                	mov    edi,edx
c001d52c:	50                   	push   eax
c001d52d:	83 c7 01             	add    edi,0x1
c001d530:	6a 01                	push   0x1
c001d532:	89 cd                	mov    ebp,ecx
c001d534:	53                   	push   ebx
c001d535:	83 d5 00             	adc    ebp,0x0
c001d538:	6a 01                	push   0x1
c001d53a:	81 c3 00 02 00 00    	add    ebx,0x200
c001d540:	51                   	push   ecx
c001d541:	52                   	push   edx
c001d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d546:	e8 fb fa ff ff       	call   c001d046 <SATA::access(unsigned long long, int, void*, bool)>
c001d54b:	83 c4 20             	add    esp,0x20
c001d54e:	39 f3                	cmp    ebx,esi
c001d550:	89 fa                	mov    edx,edi
c001d552:	89 e9                	mov    ecx,ebp
c001d554:	75 d3                	jne    c001d529 <SATA::write(unsigned long long, int, void*)+0x41>
c001d556:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001d55a:	bd 10 27 00 00       	mov    ebp,0x2710
c001d55f:	bb 0a 00 00 00       	mov    ebx,0xa
c001d564:	01 05 50 9b 02 c0    	add    DWORD PTR ds:0xc0029b50,eax
c001d56a:	50                   	push   eax
c001d56b:	50                   	push   eax
c001d56c:	6a 0f                	push   0xf
c001d56e:	6a 00                	push   0x0
c001d570:	e8 0c f0 ff ff       	call   c001c581 <combineColours(unsigned char, unsigned char)>
c001d575:	5a                   	pop    edx
c001d576:	59                   	pop    ecx
c001d577:	0f b6 c0             	movzx  eax,al
c001d57a:	50                   	push   eax
c001d57b:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001d580:	99                   	cdq    
c001d581:	f7 fd                	idiv   ebp
c001d583:	99                   	cdq    
c001d584:	f7 fb                	idiv   ebx
c001d586:	8d 42 30             	lea    eax,[edx+0x30]
c001d589:	0f b6 c0             	movzx  eax,al
c001d58c:	50                   	push   eax
c001d58d:	e8 de ef ff ff       	call   c001c570 <combineCharAndColour(char, unsigned char)>
c001d592:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d598:	5e                   	pop    esi
c001d599:	5f                   	pop    edi
c001d59a:	bf e8 03 00 00       	mov    edi,0x3e8
c001d59f:	6a 0f                	push   0xf
c001d5a1:	6a 00                	push   0x0
c001d5a3:	e8 d9 ef ff ff       	call   c001c581 <combineColours(unsigned char, unsigned char)>
c001d5a8:	5a                   	pop    edx
c001d5a9:	59                   	pop    ecx
c001d5aa:	0f b6 c0             	movzx  eax,al
c001d5ad:	50                   	push   eax
c001d5ae:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001d5b3:	99                   	cdq    
c001d5b4:	f7 ff                	idiv   edi
c001d5b6:	99                   	cdq    
c001d5b7:	f7 fb                	idiv   ebx
c001d5b9:	8d 42 30             	lea    eax,[edx+0x30]
c001d5bc:	0f b6 c0             	movzx  eax,al
c001d5bf:	50                   	push   eax
c001d5c0:	e8 ab ef ff ff       	call   c001c570 <combineCharAndColour(char, unsigned char)>
c001d5c5:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d5cb:	5e                   	pop    esi
c001d5cc:	be 64 00 00 00       	mov    esi,0x64
c001d5d1:	58                   	pop    eax
c001d5d2:	6a 0f                	push   0xf
c001d5d4:	6a 00                	push   0x0
c001d5d6:	e8 a6 ef ff ff       	call   c001c581 <combineColours(unsigned char, unsigned char)>
c001d5db:	5a                   	pop    edx
c001d5dc:	59                   	pop    ecx
c001d5dd:	0f b6 c0             	movzx  eax,al
c001d5e0:	50                   	push   eax
c001d5e1:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001d5e6:	99                   	cdq    
c001d5e7:	f7 fe                	idiv   esi
c001d5e9:	99                   	cdq    
c001d5ea:	f7 fb                	idiv   ebx
c001d5ec:	8d 42 30             	lea    eax,[edx+0x30]
c001d5ef:	0f b6 c0             	movzx  eax,al
c001d5f2:	50                   	push   eax
c001d5f3:	e8 78 ef ff ff       	call   c001c570 <combineCharAndColour(char, unsigned char)>
c001d5f8:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d5fe:	58                   	pop    eax
c001d5ff:	5a                   	pop    edx
c001d600:	6a 0f                	push   0xf
c001d602:	6a 00                	push   0x0
c001d604:	e8 78 ef ff ff       	call   c001c581 <combineColours(unsigned char, unsigned char)>
c001d609:	59                   	pop    ecx
c001d60a:	5a                   	pop    edx
c001d60b:	0f b6 c0             	movzx  eax,al
c001d60e:	50                   	push   eax
c001d60f:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001d614:	99                   	cdq    
c001d615:	f7 fb                	idiv   ebx
c001d617:	99                   	cdq    
c001d618:	f7 fb                	idiv   ebx
c001d61a:	8d 42 30             	lea    eax,[edx+0x30]
c001d61d:	0f b6 c0             	movzx  eax,al
c001d620:	50                   	push   eax
c001d621:	e8 4a ef ff ff       	call   c001c570 <combineCharAndColour(char, unsigned char)>
c001d626:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d62c:	59                   	pop    ecx
c001d62d:	58                   	pop    eax
c001d62e:	6a 0f                	push   0xf
c001d630:	6a 00                	push   0x0
c001d632:	e8 4a ef ff ff       	call   c001c581 <combineColours(unsigned char, unsigned char)>
c001d637:	5a                   	pop    edx
c001d638:	59                   	pop    ecx
c001d639:	0f b6 c0             	movzx  eax,al
c001d63c:	50                   	push   eax
c001d63d:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001d642:	99                   	cdq    
c001d643:	f7 fb                	idiv   ebx
c001d645:	83 c2 30             	add    edx,0x30
c001d648:	0f b6 d2             	movzx  edx,dl
c001d64b:	52                   	push   edx
c001d64c:	e8 1f ef ff ff       	call   c001c570 <combineCharAndColour(char, unsigned char)>
c001d651:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d657:	58                   	pop    eax
c001d658:	5a                   	pop    edx
c001d659:	6a 0f                	push   0xf
c001d65b:	6a 00                	push   0x0
c001d65d:	e8 1f ef ff ff       	call   c001c581 <combineColours(unsigned char, unsigned char)>
c001d662:	59                   	pop    ecx
c001d663:	5a                   	pop    edx
c001d664:	0f b6 c0             	movzx  eax,al
c001d667:	50                   	push   eax
c001d668:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001d66d:	99                   	cdq    
c001d66e:	f7 fd                	idiv   ebp
c001d670:	99                   	cdq    
c001d671:	f7 fb                	idiv   ebx
c001d673:	8d 42 30             	lea    eax,[edx+0x30]
c001d676:	0f b6 c0             	movzx  eax,al
c001d679:	50                   	push   eax
c001d67a:	e8 f1 ee ff ff       	call   c001c570 <combineCharAndColour(char, unsigned char)>
c001d67f:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d685:	59                   	pop    ecx
c001d686:	5d                   	pop    ebp
c001d687:	6a 0f                	push   0xf
c001d689:	6a 00                	push   0x0
c001d68b:	e8 f1 ee ff ff       	call   c001c581 <combineColours(unsigned char, unsigned char)>
c001d690:	5a                   	pop    edx
c001d691:	59                   	pop    ecx
c001d692:	0f b6 c0             	movzx  eax,al
c001d695:	50                   	push   eax
c001d696:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001d69b:	99                   	cdq    
c001d69c:	f7 ff                	idiv   edi
c001d69e:	99                   	cdq    
c001d69f:	f7 fb                	idiv   ebx
c001d6a1:	8d 42 30             	lea    eax,[edx+0x30]
c001d6a4:	0f b6 c0             	movzx  eax,al
c001d6a7:	50                   	push   eax
c001d6a8:	e8 c3 ee ff ff       	call   c001c570 <combineCharAndColour(char, unsigned char)>
c001d6ad:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d6b3:	5f                   	pop    edi
c001d6b4:	5d                   	pop    ebp
c001d6b5:	6a 0f                	push   0xf
c001d6b7:	6a 00                	push   0x0
c001d6b9:	e8 c3 ee ff ff       	call   c001c581 <combineColours(unsigned char, unsigned char)>
c001d6be:	5a                   	pop    edx
c001d6bf:	59                   	pop    ecx
c001d6c0:	0f b6 c0             	movzx  eax,al
c001d6c3:	50                   	push   eax
c001d6c4:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001d6c9:	99                   	cdq    
c001d6ca:	f7 fe                	idiv   esi
c001d6cc:	99                   	cdq    
c001d6cd:	f7 fb                	idiv   ebx
c001d6cf:	8d 42 30             	lea    eax,[edx+0x30]
c001d6d2:	0f b6 c0             	movzx  eax,al
c001d6d5:	50                   	push   eax
c001d6d6:	e8 95 ee ff ff       	call   c001c570 <combineCharAndColour(char, unsigned char)>
c001d6db:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d6e1:	5e                   	pop    esi
c001d6e2:	5f                   	pop    edi
c001d6e3:	6a 0f                	push   0xf
c001d6e5:	6a 00                	push   0x0
c001d6e7:	e8 95 ee ff ff       	call   c001c581 <combineColours(unsigned char, unsigned char)>
c001d6ec:	5d                   	pop    ebp
c001d6ed:	5a                   	pop    edx
c001d6ee:	0f b6 c0             	movzx  eax,al
c001d6f1:	50                   	push   eax
c001d6f2:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001d6f7:	99                   	cdq    
c001d6f8:	f7 fb                	idiv   ebx
c001d6fa:	99                   	cdq    
c001d6fb:	f7 fb                	idiv   ebx
c001d6fd:	8d 42 30             	lea    eax,[edx+0x30]
c001d700:	0f b6 c0             	movzx  eax,al
c001d703:	50                   	push   eax
c001d704:	e8 67 ee ff ff       	call   c001c570 <combineCharAndColour(char, unsigned char)>
c001d709:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d70f:	59                   	pop    ecx
c001d710:	5e                   	pop    esi
c001d711:	6a 0f                	push   0xf
c001d713:	6a 00                	push   0x0
c001d715:	e8 67 ee ff ff       	call   c001c581 <combineColours(unsigned char, unsigned char)>
c001d71a:	5f                   	pop    edi
c001d71b:	5d                   	pop    ebp
c001d71c:	0f b6 c0             	movzx  eax,al
c001d71f:	50                   	push   eax
c001d720:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001d725:	99                   	cdq    
c001d726:	f7 fb                	idiv   ebx
c001d728:	83 c2 30             	add    edx,0x30
c001d72b:	0f b6 d2             	movzx  edx,dl
c001d72e:	52                   	push   edx
c001d72f:	e8 3c ee ff ff       	call   c001c570 <combineCharAndColour(char, unsigned char)>
c001d734:	83 c4 10             	add    esp,0x10
c001d737:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d73d:	31 c0                	xor    eax,eax
c001d73f:	83 c4 0c             	add    esp,0xc
c001d742:	5b                   	pop    ebx
c001d743:	5e                   	pop    esi
c001d744:	5f                   	pop    edi
c001d745:	5d                   	pop    ebp
c001d746:	c3                   	ret    
c001d747:	90                   	nop

c001d748 <SATAPI::write(unsigned long long, int, void*)>:
c001d748:	b8 03 00 00 00       	mov    eax,0x3
c001d74d:	c3                   	ret    

c001d74e <SATAPI::close(int, int, void*)>:
c001d74e:	83 ec 0c             	sub    esp,0xc
c001d751:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d755:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d75b:	85 c0                	test   eax,eax
c001d75d:	74 0c                	je     c001d76b <SATAPI::close(int, int, void*)+0x1d>
c001d75f:	8b 10                	mov    edx,DWORD PTR [eax]
c001d761:	83 ec 0c             	sub    esp,0xc
c001d764:	50                   	push   eax
c001d765:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d768:	83 c4 10             	add    esp,0x10
c001d76b:	31 c0                	xor    eax,eax
c001d76d:	83 c4 0c             	add    esp,0xc
c001d770:	c3                   	ret    
c001d771:	90                   	nop

c001d772 <SATAPI::SATAPI()>:
c001d772:	83 ec 0c             	sub    esp,0xc
c001d775:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d779:	83 ec 04             	sub    esp,0x4
c001d77c:	68 00 08 00 00       	push   0x800
c001d781:	68 f8 25 02 c0       	push   0xc00225f8
c001d786:	50                   	push   eax
c001d787:	e8 ca ec fe ff       	call   c000c456 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d78c:	83 c4 10             	add    esp,0x10
c001d78f:	ba ec 26 02 c0       	mov    edx,0xc00226ec
c001d794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d798:	89 10                	mov    DWORD PTR [eax],edx
c001d79a:	90                   	nop
c001d79b:	83 c4 0c             	add    esp,0xc
c001d79e:	c3                   	ret    
c001d79f:	90                   	nop

c001d7a0 <SATAPI::diskRemoved()>:
c001d7a0:	c3                   	ret    
c001d7a1:	90                   	nop

c001d7a2 <SATAPI::diskInserted()>:
c001d7a2:	83 ec 18             	sub    esp,0x18
c001d7a5:	68 04 26 02 c0       	push   0xc0022604
c001d7aa:	e8 4f d1 fe ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c001d7af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7b3:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001d7ba:	83 c4 1c             	add    esp,0x1c
c001d7bd:	c3                   	ret    

c001d7be <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001d7be:	55                   	push   ebp
c001d7bf:	57                   	push   edi
c001d7c0:	56                   	push   esi
c001d7c1:	53                   	push   ebx
c001d7c2:	83 ec 34             	sub    esp,0x34
c001d7c5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d7c9:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001d7cd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d7d1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d7d5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d7d9:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001d7df:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d7e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d7e9:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001d7ef:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d7f3:	83 c0 02             	add    eax,0x2
c001d7f6:	c1 e0 07             	shl    eax,0x7
c001d7f9:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d7fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d801:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d805:	c1 e0 07             	shl    eax,0x7
c001d808:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d80c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d810:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d81a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d81e:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d824:	e8 ff e4 ff ff       	call   c001bd28 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d829:	83 c4 10             	add    esp,0x10
c001d82c:	89 c2                	mov    edx,eax
c001d82e:	b8 01 00 00 00       	mov    eax,0x1
c001d833:	83 fa ff             	cmp    edx,0xffffffff
c001d836:	0f 84 5f 02 00 00    	je     c001da9b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001d83c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d840:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d844:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d84a:	8b 00                	mov    eax,DWORD PTR [eax]
c001d84c:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d852:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d858:	89 d1                	mov    ecx,edx
c001d85a:	c1 e1 05             	shl    ecx,0x5
c001d85d:	01 c8                	add    eax,ecx
c001d85f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d861:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001d867:	81 c9 25 00 01 00    	or     ecx,0x10025
c001d86d:	89 08                	mov    DWORD PTR [eax],ecx
c001d86f:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d875:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001d87b:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001d881:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001d884:	50                   	push   eax
c001d885:	68 90 00 00 00       	push   0x90
c001d88a:	6a 00                	push   0x0
c001d88c:	53                   	push   ebx
c001d88d:	e8 5e 2c fe ff       	call   c00004f0 <memset>
c001d892:	8d 7b 40             	lea    edi,[ebx+0x40]
c001d895:	b9 0c 00 00 00       	mov    ecx,0xc
c001d89a:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001d89e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d8a0:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001d8a6:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001d8aa:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001d8ae:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001d8b4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d8b8:	48                   	dec    eax
c001d8b9:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d8be:	89 c1                	mov    ecx,eax
c001d8c0:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001d8c6:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d8cb:	09 c8                	or     eax,ecx
c001d8cd:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001d8d3:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001d8d9:	83 c8 80             	or     eax,0xffffff80
c001d8dc:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001d8e2:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001d8e5:	25 00 7f 00 00       	and    eax,0x7f00
c001d8ea:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d8ef:	66 89 03             	mov    WORD PTR [ebx],ax
c001d8f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8f6:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001d8fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8fe:	c1 e8 10             	shr    eax,0x10
c001d901:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001d904:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d908:	c1 e8 18             	shr    eax,0x18
c001d90b:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001d90e:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001d912:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001d915:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d919:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001d91c:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001d920:	83 c4 10             	add    esp,0x10
c001d923:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d927:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001d92b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d92f:	31 c0                	xor    eax,eax
c001d931:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001d937:	80 e1 88             	and    cl,0x88
c001d93a:	74 0a                	je     c001d946 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001d93c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d941:	74 0a                	je     c001d94d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c001d943:	40                   	inc    eax
c001d944:	eb eb                	jmp    c001d931 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c001d946:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d94b:	75 43                	jne    c001d990 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c001d94d:	83 ec 0c             	sub    esp,0xc
c001d950:	68 1c 26 02 c0       	push   0xc002261c
c001d955:	e8 a4 cf fe ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c001d95a:	58                   	pop    eax
c001d95b:	5a                   	pop    edx
c001d95c:	68 31 26 02 c0       	push   0xc0022631
c001d961:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c001d967:	e8 32 b1 fe ff       	call   c0008a9e <VgaText::puts(char const*)>
c001d96c:	59                   	pop    ecx
c001d96d:	5b                   	pop    ebx
c001d96e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d972:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d978:	e8 45 e4 ff ff       	call   c001bdc2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001d97d:	5e                   	pop    esi
c001d97e:	5f                   	pop    edi
c001d97f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d983:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d989:	e8 14 e4 ff ff       	call   c001bda2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001d98e:	eb 48                	jmp    c001d9d8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c001d990:	b8 01 00 00 00       	mov    eax,0x1
c001d995:	88 d1                	mov    cl,dl
c001d997:	d3 e0                	shl    eax,cl
c001d999:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c001d99e:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c001d9a4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d9a8:	89 c7                	mov    edi,eax
c001d9aa:	c1 e3 07             	shl    ebx,0x7
c001d9ad:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001d9b1:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001d9b7:	85 c7                	test   edi,eax
c001d9b9:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001d9bf:	0f 84 a3 00 00 00    	je     c001da68 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c001d9c5:	0f ba e0 1e          	bt     eax,0x1e
c001d9c9:	73 1a                	jae    c001d9e5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c001d9cb:	83 ec 0c             	sub    esp,0xc
c001d9ce:	68 43 26 02 c0       	push   0xc0022643
c001d9d3:	e8 26 cf fe ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c001d9d8:	83 c4 10             	add    esp,0x10
c001d9db:	b8 01 00 00 00       	mov    eax,0x1
c001d9e0:	e9 b6 00 00 00       	jmp    c001da9b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001d9e5:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c001d9eb:	83 f8 0d             	cmp    eax,0xd
c001d9ee:	77 0a                	ja     c001d9fa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c001d9f0:	83 ec 0c             	sub    esp,0xc
c001d9f3:	68 c8 00 00 00       	push   0xc8
c001d9f8:	eb 28                	jmp    c001da22 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001d9fa:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c001da00:	83 f8 0d             	cmp    eax,0xd
c001da03:	77 0a                	ja     c001da0f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c001da05:	83 ec 0c             	sub    esp,0xc
c001da08:	68 58 02 00 00       	push   0x258
c001da0d:	eb 13                	jmp    c001da22 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001da0f:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c001da15:	83 f8 06             	cmp    eax,0x6
c001da18:	77 10                	ja     c001da2a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c001da1a:	83 ec 0c             	sub    esp,0xc
c001da1d:	68 dc 05 00 00       	push   0x5dc
c001da22:	e8 69 7d ff ff       	call   c0015790 <milliTenthSleep(unsigned int)>
c001da27:	83 c4 10             	add    esp,0x10
c001da2a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001da2e:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001da31:	75 06                	jne    c001da39 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c001da33:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001da37:	74 15                	je     c001da4e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001da39:	83 fe 06             	cmp    esi,0x6
c001da3c:	77 10                	ja     c001da4e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001da3e:	83 ec 0c             	sub    esp,0xc
c001da41:	68 c4 09 00 00       	push   0x9c4
c001da46:	e8 45 7d ff ff       	call   c0015790 <milliTenthSleep(unsigned int)>
c001da4b:	83 c4 10             	add    esp,0x10
c001da4e:	46                   	inc    esi
c001da4f:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c001da55:	0f 85 56 ff ff ff    	jne    c001d9b1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c001da5b:	83 ec 0c             	sub    esp,0xc
c001da5e:	68 56 26 02 c0       	push   0xc0022656
c001da63:	e9 6b ff ff ff       	jmp    c001d9d3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001da68:	0f ba e0 1e          	bt     eax,0x1e
c001da6c:	73 0d                	jae    c001da7b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c001da6e:	83 ec 0c             	sub    esp,0xc
c001da71:	68 6a 26 02 c0       	push   0xc002266a
c001da76:	e9 58 ff ff ff       	jmp    c001d9d3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001da7b:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001da80:	74 17                	je     c001da99 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001da82:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001da87:	74 10                	je     c001da99 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001da89:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001da8f:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001da93:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001da97:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001da99:	31 c0                	xor    eax,eax
c001da9b:	83 c4 2c             	add    esp,0x2c
c001da9e:	5b                   	pop    ebx
c001da9f:	5e                   	pop    esi
c001daa0:	5f                   	pop    edi
c001daa1:	5d                   	pop    ebp
c001daa2:	c3                   	ret    
c001daa3:	90                   	nop

c001daa4 <SATAPI::eject()>:
c001daa4:	57                   	push   edi
c001daa5:	b9 03 00 00 00       	mov    ecx,0x3
c001daaa:	83 ec 18             	sub    esp,0x18
c001daad:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001dab1:	fc                   	cld    
c001dab2:	31 c0                	xor    eax,eax
c001dab4:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001dab6:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001dabb:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001dac0:	50                   	push   eax
c001dac1:	6a 00                	push   0x0
c001dac3:	6a 00                	push   0x0
c001dac5:	6a 00                	push   0x0
c001dac7:	6a 00                	push   0x0
c001dac9:	6a 02                	push   0x2
c001dacb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001dacf:	50                   	push   eax
c001dad0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dad4:	e8 e5 fc ff ff       	call   c001d7be <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001dad9:	83 c4 38             	add    esp,0x38
c001dadc:	31 c0                	xor    eax,eax
c001dade:	5f                   	pop    edi
c001dadf:	c3                   	ret    

c001dae0 <SATAPI::detectMedia()>:
c001dae0:	53                   	push   ebx
c001dae1:	83 ec 14             	sub    esp,0x14
c001dae4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001dae8:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001daee:	e8 e9 02 ff ff       	call   c000dddc <VCache::writeWriteBuffer()>
c001daf3:	59                   	pop    ecx
c001daf4:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001dafa:	e8 cd 02 ff ff       	call   c000ddcc <VCache::invalidateReadBuffer()>
c001daff:	c7 04 24 7f 26 02 c0 	mov    DWORD PTR [esp],0xc002267f
c001db06:	e8 f3 cd fe ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c001db0b:	83 c4 10             	add    esp,0x10
c001db0e:	31 c0                	xor    eax,eax
c001db10:	8b 14 85 20 84 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7be0]
c001db17:	85 d2                	test   edx,edx
c001db19:	74 0f                	je     c001db2a <SATAPI::detectMedia()+0x4a>
c001db1b:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001db21:	75 07                	jne    c001db2a <SATAPI::detectMedia()+0x4a>
c001db23:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001db2a:	40                   	inc    eax
c001db2b:	83 f8 1a             	cmp    eax,0x1a
c001db2e:	75 e0                	jne    c001db10 <SATAPI::detectMedia()+0x30>
c001db30:	83 c4 08             	add    esp,0x8
c001db33:	5b                   	pop    ebx
c001db34:	c3                   	ret    
c001db35:	90                   	nop

c001db36 <SATAPI::open(int, int, void*)>:
c001db36:	56                   	push   esi
c001db37:	53                   	push   ebx
c001db38:	51                   	push   ecx
c001db39:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001db3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001db41:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001db4b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001db51:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001db55:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001db5f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001db69:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001db70:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001db76:	e8 5a a2 fe ff       	call   c0007dd5 <Phys::allocatePage()>
c001db7b:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001db81:	89 c6                	mov    esi,eax
c001db83:	e8 4d a2 fe ff       	call   c0007dd5 <Phys::allocatePage()>
c001db88:	81 c6 00 10 00 00    	add    esi,0x1000
c001db8e:	39 c6                	cmp    esi,eax
c001db90:	74 10                	je     c001dba2 <SATAPI::open(int, int, void*)+0x6c>
c001db92:	83 ec 0c             	sub    esp,0xc
c001db95:	68 94 26 02 c0       	push   0xc0022694
c001db9a:	e8 d2 2f ff ff       	call   c0010b71 <KePanic(char const*)>
c001db9f:	83 c4 10             	add    esp,0x10
c001dba2:	83 ec 0c             	sub    esp,0xc
c001dba5:	6a 02                	push   0x2
c001dba7:	e8 3d ba fe ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c001dbac:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001dbb2:	6a 03                	push   0x3
c001dbb4:	50                   	push   eax
c001dbb5:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001dbbb:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001dbc1:	e8 2c c1 fe ff       	call   c0009cf2 <VAS::mapPage(unsigned long, unsigned long, int)>
c001dbc6:	83 c4 14             	add    esp,0x14
c001dbc9:	68 78 01 00 00       	push   0x178
c001dbce:	e8 f8 9e fe ff       	call   c0007acb <malloc>
c001dbd3:	83 c4 0c             	add    esp,0xc
c001dbd6:	6a 00                	push   0x0
c001dbd8:	68 ff ff ff 7f       	push   0x7fffffff
c001dbdd:	6a 00                	push   0x0
c001dbdf:	6a 00                	push   0x0
c001dbe1:	53                   	push   ebx
c001dbe2:	68 aa 26 02 c0       	push   0xc00226aa
c001dbe7:	89 c6                	mov    esi,eax
c001dbe9:	50                   	push   eax
c001dbea:	e8 47 f6 fe ff       	call   c000d236 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001dbef:	83 c4 14             	add    esp,0x14
c001dbf2:	56                   	push   esi
c001dbf3:	e8 fe f6 fe ff       	call   c000d2f6 <LogicalDisk::assignDriveLetter()>
c001dbf8:	5a                   	pop    edx
c001dbf9:	59                   	pop    ecx
c001dbfa:	0f be c0             	movsx  eax,al
c001dbfd:	50                   	push   eax
c001dbfe:	68 fc 24 02 c0       	push   0xc00224fc
c001dc03:	e8 f6 cc fe ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c001dc08:	58                   	pop    eax
c001dc09:	5a                   	pop    edx
c001dc0a:	56                   	push   esi
c001dc0b:	53                   	push   ebx
c001dc0c:	e8 77 e4 fe ff       	call   c000c088 <Device::addChild(Device*)>
c001dc11:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001dc17:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dc1a:	e8 9f e8 fe ff       	call   c000c4be <PhysicalDisk::startCache()>
c001dc1f:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001dc26:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dc29:	e8 b2 fe ff ff       	call   c001dae0 <SATAPI::detectMedia()>
c001dc2e:	83 c4 14             	add    esp,0x14
c001dc31:	31 c0                	xor    eax,eax
c001dc33:	5b                   	pop    ebx
c001dc34:	5e                   	pop    esi
c001dc35:	c3                   	ret    

c001dc36 <SATAPI::read(unsigned long long, int, void*)>:
c001dc36:	55                   	push   ebp
c001dc37:	57                   	push   edi
c001dc38:	56                   	push   esi
c001dc39:	53                   	push   ebx
c001dc3a:	83 ec 3c             	sub    esp,0x3c
c001dc3d:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001dc41:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dc45:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001dc49:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001dc4d:	83 fd 04             	cmp    ebp,0x4
c001dc50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dc54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001dc58:	7e 10                	jle    c001dc6a <SATAPI::read(unsigned long long, int, void*)+0x34>
c001dc5a:	83 ec 0c             	sub    esp,0xc
c001dc5d:	68 b8 26 02 c0       	push   0xc00226b8
c001dc62:	e8 0a 2f ff ff       	call   c0010b71 <KePanic(char const*)>
c001dc67:	83 c4 10             	add    esp,0x10
c001dc6a:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001dc70:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001dc76:	51                   	push   ecx
c001dc77:	50                   	push   eax
c001dc78:	83 c0 02             	add    eax,0x2
c001dc7b:	c1 e0 07             	shl    eax,0x7
c001dc7e:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001dc84:	50                   	push   eax
c001dc85:	52                   	push   edx
c001dc86:	e8 61 e1 ff ff       	call   c001bdec <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001dc8b:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001dc8f:	b9 03 00 00 00       	mov    ecx,0x3
c001dc94:	fc                   	cld    
c001dc95:	31 c0                	xor    eax,eax
c001dc97:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001dc99:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001dc9e:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001dca3:	83 c4 0c             	add    esp,0xc
c001dca6:	6a 00                	push   0x0
c001dca8:	6a 00                	push   0x0
c001dcaa:	6a 00                	push   0x0
c001dcac:	6a 00                	push   0x0
c001dcae:	6a 02                	push   0x2
c001dcb0:	8d 44 24 30          	lea    eax,[esp+0x30]
c001dcb4:	50                   	push   eax
c001dcb5:	53                   	push   ebx
c001dcb6:	e8 03 fb ff ff       	call   c001d7be <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001dcbb:	83 c4 20             	add    esp,0x20
c001dcbe:	85 c0                	test   eax,eax
c001dcc0:	89 c6                	mov    esi,eax
c001dcc2:	75 46                	jne    c001dd0a <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001dcc4:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001dcc8:	b9 03 00 00 00       	mov    ecx,0x3
c001dccd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001dccf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001dcd3:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001dcd8:	0f c8                	bswap  eax
c001dcda:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001dcde:	89 e8                	mov    eax,ebp
c001dce0:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001dce4:	50                   	push   eax
c001dce5:	55                   	push   ebp
c001dce6:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001dcea:	c1 e5 0b             	shl    ebp,0xb
c001dced:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001dcf1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001dcf5:	55                   	push   ebp
c001dcf6:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001dcfa:	50                   	push   eax
c001dcfb:	53                   	push   ebx
c001dcfc:	e8 bd fa ff ff       	call   c001d7be <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001dd01:	83 c4 20             	add    esp,0x20
c001dd04:	85 c0                	test   eax,eax
c001dd06:	89 c6                	mov    esi,eax
c001dd08:	74 0c                	je     c001dd16 <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001dd0a:	83 ec 0c             	sub    esp,0xc
c001dd0d:	53                   	push   ebx
c001dd0e:	e8 cd fd ff ff       	call   c001dae0 <SATAPI::detectMedia()>
c001dd13:	83 c4 10             	add    esp,0x10
c001dd16:	83 c4 3c             	add    esp,0x3c
c001dd19:	89 f0                	mov    eax,esi
c001dd1b:	5b                   	pop    ebx
c001dd1c:	5e                   	pop    esi
c001dd1d:	5f                   	pop    edi
c001dd1e:	5d                   	pop    ebp
c001dd1f:	c3                   	ret    

c001dd20 <IOAPIC::close(int, int, void*)>:
c001dd20:	b8 00 00 00 00       	mov    eax,0x0
c001dd25:	c3                   	ret    

c001dd26 <apicGetBase()>:
c001dd26:	55                   	push   ebp
c001dd27:	89 e5                	mov    ebp,esp
c001dd29:	83 ec 18             	sub    esp,0x18
c001dd2c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001dd31:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001dd37:	83 e0 08             	and    eax,0x8
c001dd3a:	0f b6 c0             	movzx  eax,al
c001dd3d:	85 c0                	test   eax,eax
c001dd3f:	75 07                	jne    c001dd48 <apicGetBase()+0x22>
c001dd41:	b8 00 00 00 00       	mov    eax,0x0
c001dd46:	eb 21                	jmp    c001dd69 <apicGetBase()+0x43>
c001dd48:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001dd4d:	83 ec 08             	sub    esp,0x8
c001dd50:	6a 1b                	push   0x1b
c001dd52:	50                   	push   eax
c001dd53:	e8 82 93 fe ff       	call   c00070da <Computer::rdmsr(unsigned int)>
c001dd58:	83 c4 10             	add    esp,0x10
c001dd5b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001dd5e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001dd61:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dd64:	25 00 00 ff ff       	and    eax,0xffff0000
c001dd69:	c9                   	leave  
c001dd6a:	c3                   	ret    
c001dd6b:	90                   	nop

c001dd6c <IOAPIC::IOAPIC()>:
c001dd6c:	83 ec 0c             	sub    esp,0xc
c001dd6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd73:	83 ec 08             	sub    esp,0x8
c001dd76:	68 1c 27 02 c0       	push   0xc002271c
c001dd7b:	50                   	push   eax
c001dd7c:	e8 9f e4 fe ff       	call   c000c220 <Device::Device(char const*)>
c001dd81:	83 c4 10             	add    esp,0x10
c001dd84:	ba 2c 27 02 c0       	mov    edx,0xc002272c
c001dd89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd8d:	89 10                	mov    DWORD PTR [eax],edx
c001dd8f:	90                   	nop
c001dd90:	83 c4 0c             	add    esp,0xc
c001dd93:	c3                   	ret    

c001dd94 <apicOpen()>:
c001dd94:	55                   	push   ebp
c001dd95:	89 e5                	mov    ebp,esp
c001dd97:	53                   	push   ebx
c001dd98:	83 ec 34             	sub    esp,0x34
c001dd9b:	a0 a0 9b 02 c0       	mov    al,ds:0xc0029ba0
c001dda0:	83 f0 01             	xor    eax,0x1
c001dda3:	0f b6 c0             	movzx  eax,al
c001dda6:	85 c0                	test   eax,eax
c001dda8:	0f 84 a3 00 00 00    	je     c001de51 <apicOpen()+0xbd>
c001ddae:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001ddb2:	a0 80 87 02 c0       	mov    al,ds:0xc0028780
c001ddb7:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001ddbb:	0f b6 c0             	movzx  eax,al
c001ddbe:	39 c2                	cmp    edx,eax
c001ddc0:	0f 83 84 00 00 00    	jae    c001de4a <apicOpen()+0xb6>
c001ddc6:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001ddcd:	83 ec 0c             	sub    esp,0xc
c001ddd0:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001ddd3:	e8 f3 9c fe ff       	call   c0007acb <malloc>
c001ddd8:	83 c4 10             	add    esp,0x10
c001dddb:	89 c3                	mov    ebx,eax
c001dddd:	83 ec 0c             	sub    esp,0xc
c001dde0:	53                   	push   ebx
c001dde1:	e8 86 ff ff ff       	call   c001dd6c <IOAPIC::IOAPIC()>
c001dde6:	83 c4 10             	add    esp,0x10
c001dde9:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001ddec:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001ddf0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001ddf3:	89 14 85 80 9b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6480],edx
c001ddfa:	a1 60 9b 02 c0       	mov    eax,ds:0xc0029b60
c001ddff:	83 c0 01             	add    eax,0x1
c001de02:	a3 60 9b 02 c0       	mov    ds:0xc0029b60,eax
c001de07:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001de0c:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001de12:	83 ec 08             	sub    esp,0x8
c001de15:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001de18:	50                   	push   eax
c001de19:	e8 6a e2 fe ff       	call   c000c088 <Device::addChild(Device*)>
c001de1e:	83 c4 10             	add    esp,0x10
c001de21:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001de24:	8b 00                	mov    eax,DWORD PTR [eax]
c001de26:	83 c0 08             	add    eax,0x8
c001de29:	8b 00                	mov    eax,DWORD PTR [eax]
c001de2b:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001de2f:	6a 00                	push   0x0
c001de31:	6a 00                	push   0x0
c001de33:	52                   	push   edx
c001de34:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001de37:	ff d0                	call   eax
c001de39:	83 c4 10             	add    esp,0x10
c001de3c:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001de3f:	83 c0 01             	add    eax,0x1
c001de42:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001de45:	e9 68 ff ff ff       	jmp    c001ddb2 <apicOpen()+0x1e>
c001de4a:	c6 05 a0 9b 02 c0 01 	mov    BYTE PTR ds:0xc0029ba0,0x1
c001de51:	e8 d0 fe ff ff       	call   c001dd26 <apicGetBase()>
c001de56:	05 f0 00 00 00       	add    eax,0xf0
c001de5b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001de5e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001de61:	8b 00                	mov    eax,DWORD PTR [eax]
c001de63:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001de66:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001de6d:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001de74:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001de77:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001de7a:	89 10                	mov    DWORD PTR [eax],edx
c001de7c:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001de83:	a1 d0 86 02 c0       	mov    eax,ds:0xc00286d0
c001de88:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001de8b:	7d 7c                	jge    c001df09 <apicOpen()+0x175>
c001de8d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001de90:	8b 04 85 e0 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7920]
c001de97:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001de9a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001de9d:	8b 04 85 e0 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7920]
c001dea4:	c1 e8 08             	shr    eax,0x8
c001dea7:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001deab:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001deae:	8b 04 85 e0 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7920]
c001deb5:	c1 e8 18             	shr    eax,0x18
c001deb8:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001debb:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001debf:	3d ff 00 00 00       	cmp    eax,0xff
c001dec4:	75 3a                	jne    c001df00 <apicOpen()+0x16c>
c001dec6:	e8 5b fe ff ff       	call   c001dd26 <apicGetBase()>
c001decb:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001decf:	83 fa 01             	cmp    edx,0x1
c001ded2:	75 07                	jne    c001dedb <apicOpen()+0x147>
c001ded4:	ba 60 03 00 00       	mov    edx,0x360
c001ded9:	eb 05                	jmp    c001dee0 <apicOpen()+0x14c>
c001dedb:	ba 50 03 00 00       	mov    edx,0x350
c001dee0:	01 d0                	add    eax,edx
c001dee2:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001dee5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001dee8:	8b 00                	mov    eax,DWORD PTR [eax]
c001deea:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001deed:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001def4:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001def8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001defb:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001defe:	89 10                	mov    DWORD PTR [eax],edx
c001df00:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001df04:	e9 7a ff ff ff       	jmp    c001de83 <apicOpen()+0xef>
c001df09:	90                   	nop
c001df0a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001df0d:	c9                   	leave  
c001df0e:	c3                   	ret    
c001df0f:	90                   	nop

c001df10 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001df10:	55                   	push   ebp
c001df11:	89 e5                	mov    ebp,esp
c001df13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001df16:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001df1c:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001df1f:	72 1d                	jb     c001df3e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001df21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001df24:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001df2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001df2d:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001df33:	01 d0                	add    eax,edx
c001df35:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001df38:	73 04                	jae    c001df3e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001df3a:	b0 01                	mov    al,0x1
c001df3c:	eb 02                	jmp    c001df40 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001df3e:	b0 00                	mov    al,0x0
c001df40:	5d                   	pop    ebp
c001df41:	c3                   	ret    

c001df42 <IOAPIC::read(int)>:
c001df42:	55                   	push   ebp
c001df43:	89 e5                	mov    ebp,esp
c001df45:	83 ec 10             	sub    esp,0x10
c001df48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001df4b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001df51:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001df54:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001df57:	0f b6 d0             	movzx  edx,al
c001df5a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001df5d:	89 10                	mov    DWORD PTR [eax],edx
c001df5f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001df62:	83 c0 10             	add    eax,0x10
c001df65:	8b 00                	mov    eax,DWORD PTR [eax]
c001df67:	c9                   	leave  
c001df68:	c3                   	ret    
c001df69:	90                   	nop

c001df6a <IOAPIC::open(int, int, void*)>:
c001df6a:	55                   	push   ebp
c001df6b:	89 e5                	mov    ebp,esp
c001df6d:	57                   	push   edi
c001df6e:	56                   	push   esi
c001df6f:	53                   	push   ebx
c001df70:	83 ec 04             	sub    esp,0x4
c001df73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001df76:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001df79:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001df7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001df82:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001df88:	8b 14 85 c0 87 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7840]
c001df8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001df92:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001df98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001df9b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dfa1:	8b 14 85 40 88 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd77c0]
c001dfa8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dfab:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001dfb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dfb4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001dfba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dfbd:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001dfc3:	0f b6 f0             	movzx  esi,al
c001dfc6:	89 d0                	mov    eax,edx
c001dfc8:	ba 00 00 00 00       	mov    edx,0x0
c001dfcd:	89 c7                	mov    edi,eax
c001dfcf:	83 e7 ff             	and    edi,0xffffffff
c001dfd2:	89 f9                	mov    ecx,edi
c001dfd4:	0f b6 da             	movzx  ebx,dl
c001dfd7:	89 c8                	mov    eax,ecx
c001dfd9:	89 da                	mov    edx,ebx
c001dfdb:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001dfde:	8d 5e 08             	lea    ebx,[esi+0x8]
c001dfe1:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001dfe5:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001dfe9:	83 e0 00             	and    eax,0x0
c001dfec:	09 d0                	or     eax,edx
c001dfee:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001dff2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dff5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001dffb:	8d 50 01             	lea    edx,[eax+0x1]
c001dffe:	88 d1                	mov    cl,dl
c001e000:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001e003:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001e009:	0f b6 d0             	movzx  edx,al
c001e00c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e00f:	83 c2 08             	add    edx,0x8
c001e012:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e016:	0f b6 c9             	movzx  ecx,cl
c001e019:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e01f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e023:	6a 01                	push   0x1
c001e025:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e028:	e8 15 ff ff ff       	call   c001df42 <IOAPIC::read(int)>
c001e02d:	83 c4 08             	add    esp,0x8
c001e030:	c1 f8 10             	sar    eax,0x10
c001e033:	0f b6 c0             	movzx  eax,al
c001e036:	8d 50 01             	lea    edx,[eax+0x1]
c001e039:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e03c:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e042:	b8 00 00 00 00       	mov    eax,0x0
c001e047:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e04a:	5b                   	pop    ebx
c001e04b:	5e                   	pop    esi
c001e04c:	5f                   	pop    edi
c001e04d:	5d                   	pop    ebp
c001e04e:	c3                   	ret    
c001e04f:	90                   	nop

c001e050 <IOAPIC::write(int, int)>:
c001e050:	55                   	push   ebp
c001e051:	89 e5                	mov    ebp,esp
c001e053:	83 ec 10             	sub    esp,0x10
c001e056:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e059:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e05f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e062:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e065:	0f b6 d0             	movzx  edx,al
c001e068:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e06b:	89 10                	mov    DWORD PTR [eax],edx
c001e06d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e070:	8d 50 10             	lea    edx,[eax+0x10]
c001e073:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e076:	89 02                	mov    DWORD PTR [edx],eax
c001e078:	90                   	nop
c001e079:	c9                   	leave  
c001e07a:	c3                   	ret    
c001e07b:	90                   	nop

c001e07c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001e07c:	55                   	push   ebp
c001e07d:	89 e5                	mov    ebp,esp
c001e07f:	53                   	push   ebx
c001e080:	83 ec 2c             	sub    esp,0x2c
c001e083:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e086:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001e089:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001e08c:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001e08f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e092:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e095:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e098:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e09b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001e09e:	88 d8                	mov    al,bl
c001e0a0:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001e0a3:	88 c8                	mov    al,cl
c001e0a5:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001e0a8:	88 d0                	mov    al,dl
c001e0aa:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001e0ad:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e0b1:	83 c0 08             	add    eax,0x8
c001e0b4:	d1 e0                	shl    eax,1
c001e0b6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e0b9:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e0bd:	83 c0 08             	add    eax,0x8
c001e0c0:	d1 e0                	shl    eax,1
c001e0c2:	83 c0 01             	add    eax,0x1
c001e0c5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001e0c8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e0cb:	50                   	push   eax
c001e0cc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e0cf:	e8 6e fe ff ff       	call   c001df42 <IOAPIC::read(int)>
c001e0d4:	83 c4 08             	add    esp,0x8
c001e0d7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e0da:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001e0e1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e0e4:	c1 e0 18             	shl    eax,0x18
c001e0e7:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001e0ea:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001e0ed:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e0f0:	52                   	push   edx
c001e0f1:	50                   	push   eax
c001e0f2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e0f5:	e8 56 ff ff ff       	call   c001e050 <IOAPIC::write(int, int)>
c001e0fa:	83 c4 0c             	add    esp,0xc
c001e0fd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e100:	50                   	push   eax
c001e101:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e104:	e8 39 fe ff ff       	call   c001df42 <IOAPIC::read(int)>
c001e109:	83 c4 08             	add    esp,0x8
c001e10c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e10f:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001e116:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001e11d:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001e124:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001e128:	85 c0                	test   eax,eax
c001e12a:	74 09                	je     c001e135 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001e12c:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001e133:	eb 07                	jmp    c001e13c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001e135:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001e13c:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001e140:	85 c0                	test   eax,eax
c001e142:	74 09                	je     c001e14d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001e144:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001e14b:	eb 07                	jmp    c001e154 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001e14d:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001e154:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001e15b:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001e15f:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e162:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e165:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e168:	52                   	push   edx
c001e169:	50                   	push   eax
c001e16a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e16d:	e8 de fe ff ff       	call   c001e050 <IOAPIC::write(int, int)>
c001e172:	83 c4 0c             	add    esp,0xc
c001e175:	90                   	nop
c001e176:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e179:	c9                   	leave  
c001e17a:	c3                   	ret    
c001e17b:	90                   	nop

c001e17c <APICTimer::close(int, int, void*)>:
c001e17c:	b8 00 00 00 00       	mov    eax,0x0
c001e181:	c3                   	ret    
c001e182:	66 90                	xchg   ax,ax

c001e184 <apicTimerHandler(regs*, void*)>:
c001e184:	83 ec 0c             	sub    esp,0xc
c001e187:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e18b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e18d:	b8 10 27 00 00       	mov    eax,0x2710
c001e192:	ba 00 00 00 00       	mov    edx,0x0
c001e197:	f7 f1                	div    ecx
c001e199:	83 ec 0c             	sub    esp,0xc
c001e19c:	50                   	push   eax
c001e19d:	e8 52 f9 fe ff       	call   c000daf4 <timerHandler(unsigned int)>
c001e1a2:	83 c4 10             	add    esp,0x10
c001e1a5:	90                   	nop
c001e1a6:	83 c4 0c             	add    esp,0xc
c001e1a9:	c3                   	ret    
c001e1aa:	66 90                	xchg   ax,ax

c001e1ac <APICTimer::open(int, int, void*)>:
c001e1ac:	83 ec 0c             	sub    esp,0xc
c001e1af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1b3:	8b 00                	mov    eax,DWORD PTR [eax]
c001e1b5:	83 c0 24             	add    eax,0x24
c001e1b8:	8b 00                	mov    eax,DWORD PTR [eax]
c001e1ba:	83 ec 08             	sub    esp,0x8
c001e1bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e1c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e1c5:	ff d0                	call   eax
c001e1c7:	83 c4 10             	add    esp,0x10
c001e1ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1ce:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e1d2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e1d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1dc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e1e0:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001e1e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e1ea:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e1f0:	83 ec 0c             	sub    esp,0xc
c001e1f3:	51                   	push   ecx
c001e1f4:	6a 01                	push   0x1
c001e1f6:	68 84 e1 01 c0       	push   0xc001e184
c001e1fb:	52                   	push   edx
c001e1fc:	50                   	push   eax
c001e1fd:	e8 32 de fe ff       	call   c000c034 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e202:	83 c4 20             	add    esp,0x20
c001e205:	89 c2                	mov    edx,eax
c001e207:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e20b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e211:	b8 00 00 00 00       	mov    eax,0x0
c001e216:	83 c4 0c             	add    esp,0xc
c001e219:	c3                   	ret    
c001e21a:	66 90                	xchg   ax,ax

c001e21c <APICTimer::write(int)>:
c001e21c:	83 ec 0c             	sub    esp,0xc
c001e21f:	83 ec 0c             	sub    esp,0xc
c001e222:	68 50 27 02 c0       	push   0xc0022750
c001e227:	e8 45 29 ff ff       	call   c0010b71 <KePanic(char const*)>
c001e22c:	83 c4 10             	add    esp,0x10
c001e22f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e233:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e237:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e23d:	90                   	nop
c001e23e:	83 c4 0c             	add    esp,0xc
c001e241:	c3                   	ret    
c001e242:	66 90                	xchg   ax,ax

c001e244 <APICTimer::APICTimer()>:
c001e244:	83 ec 0c             	sub    esp,0xc
c001e247:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e24b:	83 ec 08             	sub    esp,0x8
c001e24e:	68 60 27 02 c0       	push   0xc0022760
c001e253:	50                   	push   eax
c001e254:	e8 cf f7 fe ff       	call   c000da28 <Timer::Timer(char const*)>
c001e259:	83 c4 10             	add    esp,0x10
c001e25c:	ba 74 27 02 c0       	mov    edx,0xc0022774
c001e261:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e265:	89 10                	mov    DWORD PTR [eax],edx
c001e267:	90                   	nop
c001e268:	83 c4 0c             	add    esp,0xc
c001e26b:	c3                   	ret    

c001e26c <PIT::write(int)>:
c001e26c:	83 ec 10             	sub    esp,0x10
c001e26f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e273:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e277:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e27d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e281:	a3 a4 9b 02 c0       	mov    ds:0xc0029ba4,eax
c001e286:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001e28b:	89 c2                	mov    edx,eax
c001e28d:	c1 fa 1f             	sar    edx,0x1f
c001e290:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001e294:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e298:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001e29f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001e2a4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001e2a8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001e2ad:	ee                   	out    dx,al
c001e2ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e2b2:	0f b6 c0             	movzx  eax,al
c001e2b5:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001e2bc:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001e2c0:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001e2c4:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001e2c9:	ee                   	out    dx,al
c001e2ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e2ce:	c1 f8 08             	sar    eax,0x8
c001e2d1:	0f b6 c0             	movzx  eax,al
c001e2d4:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001e2db:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e2df:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e2e3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001e2e8:	ee                   	out    dx,al
c001e2e9:	90                   	nop
c001e2ea:	83 c4 10             	add    esp,0x10
c001e2ed:	c3                   	ret    
c001e2ee:	66 90                	xchg   ax,ax

c001e2f0 <pitHandler(regs*, void*)>:
c001e2f0:	83 ec 0c             	sub    esp,0xc
c001e2f3:	8b 0d a4 9b 02 c0    	mov    ecx,DWORD PTR ds:0xc0029ba4
c001e2f9:	b8 10 27 00 00       	mov    eax,0x2710
c001e2fe:	89 c2                	mov    edx,eax
c001e300:	c1 fa 1f             	sar    edx,0x1f
c001e303:	f7 f9                	idiv   ecx
c001e305:	83 ec 0c             	sub    esp,0xc
c001e308:	50                   	push   eax
c001e309:	e8 e6 f7 fe ff       	call   c000daf4 <timerHandler(unsigned int)>
c001e30e:	83 c4 10             	add    esp,0x10
c001e311:	90                   	nop
c001e312:	83 c4 0c             	add    esp,0xc
c001e315:	c3                   	ret    
c001e316:	66 90                	xchg   ax,ax

c001e318 <PIT::open(int, int, void*)>:
c001e318:	83 ec 0c             	sub    esp,0xc
c001e31b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e31f:	8b 00                	mov    eax,DWORD PTR [eax]
c001e321:	83 c0 24             	add    eax,0x24
c001e324:	8b 00                	mov    eax,DWORD PTR [eax]
c001e326:	83 ec 08             	sub    esp,0x8
c001e329:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e32d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e331:	ff d0                	call   eax
c001e333:	83 c4 10             	add    esp,0x10
c001e336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e33a:	83 ec 0c             	sub    esp,0xc
c001e33d:	6a 00                	push   0x0
c001e33f:	6a 01                	push   0x1
c001e341:	68 f0 e2 01 c0       	push   0xc001e2f0
c001e346:	6a 00                	push   0x0
c001e348:	50                   	push   eax
c001e349:	e8 e6 dc fe ff       	call   c000c034 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e34e:	83 c4 20             	add    esp,0x20
c001e351:	89 c2                	mov    edx,eax
c001e353:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e357:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e35d:	b8 00 00 00 00       	mov    eax,0x0
c001e362:	83 c4 0c             	add    esp,0xc
c001e365:	c3                   	ret    
c001e366:	66 90                	xchg   ax,ax

c001e368 <PIT::close(int, int, void*)>:
c001e368:	83 ec 0c             	sub    esp,0xc
c001e36b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e36f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001e379:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e37d:	6a 01                	push   0x1
c001e37f:	68 f0 e2 01 c0       	push   0xc001e2f0
c001e384:	6a 00                	push   0x0
c001e386:	50                   	push   eax
c001e387:	e8 de dc fe ff       	call   c000c06a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001e38c:	83 c4 10             	add    esp,0x10
c001e38f:	b8 00 00 00 00       	mov    eax,0x0
c001e394:	83 c4 0c             	add    esp,0xc
c001e397:	c3                   	ret    

c001e398 <PIT::PIT()>:
c001e398:	83 ec 0c             	sub    esp,0xc
c001e39b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e39f:	83 ec 08             	sub    esp,0x8
c001e3a2:	68 9c 27 02 c0       	push   0xc002279c
c001e3a7:	50                   	push   eax
c001e3a8:	e8 7b f6 fe ff       	call   c000da28 <Timer::Timer(char const*)>
c001e3ad:	83 c4 10             	add    esp,0x10
c001e3b0:	ba c4 27 02 c0       	mov    edx,0xc00227c4
c001e3b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3b9:	89 10                	mov    DWORD PTR [eax],edx
c001e3bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3bf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e3c5:	0f b6 d0             	movzx  edx,al
c001e3c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3cc:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001e3d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3d7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e3dd:	0f b6 d0             	movzx  edx,al
c001e3e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3e4:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001e3e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3ed:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e3f3:	8d 50 01             	lea    edx,[eax+0x1]
c001e3f6:	88 d1                	mov    cl,dl
c001e3f8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e3fc:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001e402:	0f b6 d0             	movzx  edx,al
c001e405:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e409:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e40d:	83 e1 3f             	and    ecx,0x3f
c001e410:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e414:	90                   	nop
c001e415:	83 c4 0c             	add    esp,0xc
c001e418:	c3                   	ret    
c001e419:	66 90                	xchg   ax,ax
c001e41b:	66 90                	xchg   ax,ax
c001e41d:	66 90                	xchg   ax,ax
c001e41f:	90                   	nop

c001e420 <avxDetect>:
c001e420:	b8 01 00 00 00       	mov    eax,0x1
c001e425:	0f a2                	cpuid  
c001e427:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001e42d:	74 15                	je     c001e444 <avxDetect.noAVX>
c001e42f:	b8 01 00 00 00       	mov    eax,0x1
c001e434:	0f a2                	cpuid  
c001e436:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001e43c:	74 06                	je     c001e444 <avxDetect.noAVX>
c001e43e:	b8 01 00 00 00       	mov    eax,0x1
c001e443:	c3                   	ret    

c001e444 <avxDetect.noAVX>:
c001e444:	b8 00 00 00 00       	mov    eax,0x0
c001e449:	c3                   	ret    

c001e44a <avxSave>:
c001e44a:	53                   	push   ebx
c001e44b:	52                   	push   edx
c001e44c:	31 c0                	xor    eax,eax
c001e44e:	48                   	dec    eax
c001e44f:	89 c2                	mov    edx,eax
c001e451:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e455:	0f ae 23             	xsave  [ebx]
c001e458:	5a                   	pop    edx
c001e459:	5b                   	pop    ebx
c001e45a:	c3                   	ret    

c001e45b <avxLoad>:
c001e45b:	53                   	push   ebx
c001e45c:	52                   	push   edx
c001e45d:	31 c0                	xor    eax,eax
c001e45f:	48                   	dec    eax
c001e460:	89 c2                	mov    edx,eax
c001e462:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e466:	0f ae 2b             	xrstor [ebx]
c001e469:	5a                   	pop    edx
c001e46a:	5b                   	pop    ebx
c001e46b:	c3                   	ret    

c001e46c <avxInit>:
c001e46c:	e8 67 03 00 00       	call   c001e7d8 <sseInit>
c001e471:	50                   	push   eax
c001e472:	51                   	push   ecx
c001e473:	0f 20 e0             	mov    eax,cr4
c001e476:	0d 00 00 04 00       	or     eax,0x40000
c001e47b:	0f 22 e0             	mov    cr4,eax
c001e47e:	31 c9                	xor    ecx,ecx
c001e480:	0f 01 d0             	xgetbv 
c001e483:	0d 07 00 00 00       	or     eax,0x7
c001e488:	0f 01 d1             	xsetbv 
c001e48b:	59                   	pop    ecx
c001e48c:	58                   	pop    eax
c001e48d:	c3                   	ret    

c001e48e <avxClose>:
c001e48e:	c3                   	ret    

c001e48f <wouldSheSayYes>:
c001e48f:	c3                   	ret    
c001e490:	49                   	dec    ecx
c001e491:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001e495:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001e499:	75 20                	jne    c001e4bb <isr0+0xb>
c001e49b:	4e                   	dec    esi
c001e49c:	79 61                	jns    c001e4ff <isr7+0x3>
c001e49e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001e4a3:	66 90                	xchg   ax,ax
c001e4a5:	66 90                	xchg   ax,ax
c001e4a7:	66 90                	xchg   ax,ax
c001e4a9:	66 90                	xchg   ax,ax
c001e4ab:	66 90                	xchg   ax,ax
c001e4ad:	66 90                	xchg   ax,ax
c001e4af:	90                   	nop

c001e4b0 <isr0>:
c001e4b0:	fa                   	cli    
c001e4b1:	68 00 00 00 00       	push   0x0
c001e4b6:	68 00 00 00 00       	push   0x0
c001e4bb:	e9 56 01 00 00       	jmp    c001e616 <int_common_stub>

c001e4c0 <isr1>:
c001e4c0:	fa                   	cli    
c001e4c1:	6a 00                	push   0x0
c001e4c3:	6a 01                	push   0x1
c001e4c5:	e9 4c 01 00 00       	jmp    c001e616 <int_common_stub>

c001e4ca <isr2>:
c001e4ca:	fa                   	cli    
c001e4cb:	6a 00                	push   0x0
c001e4cd:	6a 02                	push   0x2
c001e4cf:	e9 42 01 00 00       	jmp    c001e616 <int_common_stub>

c001e4d4 <isr3>:
c001e4d4:	fa                   	cli    
c001e4d5:	6a 00                	push   0x0
c001e4d7:	6a 03                	push   0x3
c001e4d9:	e9 38 01 00 00       	jmp    c001e616 <int_common_stub>

c001e4de <isr4>:
c001e4de:	fa                   	cli    
c001e4df:	6a 00                	push   0x0
c001e4e1:	6a 04                	push   0x4
c001e4e3:	e9 2e 01 00 00       	jmp    c001e616 <int_common_stub>

c001e4e8 <isr5>:
c001e4e8:	fa                   	cli    
c001e4e9:	6a 00                	push   0x0
c001e4eb:	6a 05                	push   0x5
c001e4ed:	e9 24 01 00 00       	jmp    c001e616 <int_common_stub>

c001e4f2 <isr6>:
c001e4f2:	fa                   	cli    
c001e4f3:	6a 00                	push   0x0
c001e4f5:	6a 06                	push   0x6
c001e4f7:	e9 1a 01 00 00       	jmp    c001e616 <int_common_stub>

c001e4fc <isr7>:
c001e4fc:	fa                   	cli    
c001e4fd:	6a 00                	push   0x0
c001e4ff:	6a 07                	push   0x7
c001e501:	e9 10 01 00 00       	jmp    c001e616 <int_common_stub>

c001e506 <isr8>:
c001e506:	fa                   	cli    
c001e507:	6a 08                	push   0x8
c001e509:	e9 08 01 00 00       	jmp    c001e616 <int_common_stub>

c001e50e <isr9>:
c001e50e:	fa                   	cli    
c001e50f:	6a 00                	push   0x0
c001e511:	6a 09                	push   0x9
c001e513:	e9 fe 00 00 00       	jmp    c001e616 <int_common_stub>

c001e518 <isr10>:
c001e518:	fa                   	cli    
c001e519:	6a 0a                	push   0xa
c001e51b:	e9 f6 00 00 00       	jmp    c001e616 <int_common_stub>

c001e520 <isr11>:
c001e520:	fa                   	cli    
c001e521:	6a 0b                	push   0xb
c001e523:	e9 ee 00 00 00       	jmp    c001e616 <int_common_stub>

c001e528 <isr12>:
c001e528:	fa                   	cli    
c001e529:	6a 0c                	push   0xc
c001e52b:	e9 e6 00 00 00       	jmp    c001e616 <int_common_stub>

c001e530 <isr13>:
c001e530:	fa                   	cli    
c001e531:	6a 0d                	push   0xd
c001e533:	53                   	push   ebx
c001e534:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e538:	81 fb 06 e7 01 c0    	cmp    ebx,0xc001e706
c001e53e:	5b                   	pop    ebx
c001e53f:	0f 84 c3 01 00 00    	je     c001e708 <finishSignal2>
c001e545:	e9 cc 00 00 00       	jmp    c001e616 <int_common_stub>

c001e54a <isr14>:
c001e54a:	fa                   	cli    
c001e54b:	6a 0e                	push   0xe
c001e54d:	e9 c4 00 00 00       	jmp    c001e616 <int_common_stub>

c001e552 <isr15>:
c001e552:	fa                   	cli    
c001e553:	6a 00                	push   0x0
c001e555:	6a 0f                	push   0xf
c001e557:	e9 ba 00 00 00       	jmp    c001e616 <int_common_stub>

c001e55c <isr16>:
c001e55c:	fa                   	cli    
c001e55d:	6a 00                	push   0x0
c001e55f:	6a 10                	push   0x10
c001e561:	e9 b0 00 00 00       	jmp    c001e616 <int_common_stub>

c001e566 <isr17>:
c001e566:	fa                   	cli    
c001e567:	6a 00                	push   0x0
c001e569:	6a 11                	push   0x11
c001e56b:	e9 a6 00 00 00       	jmp    c001e616 <int_common_stub>

c001e570 <isr18>:
c001e570:	fa                   	cli    
c001e571:	6a 00                	push   0x0
c001e573:	6a 12                	push   0x12
c001e575:	e9 9c 00 00 00       	jmp    c001e616 <int_common_stub>

c001e57a <irq3>:
c001e57a:	fa                   	cli    
c001e57b:	6a 00                	push   0x0
c001e57d:	6a 23                	push   0x23
c001e57f:	e9 92 00 00 00       	jmp    c001e616 <int_common_stub>

c001e584 <irq4>:
c001e584:	fa                   	cli    
c001e585:	6a 00                	push   0x0
c001e587:	6a 24                	push   0x24
c001e589:	e9 88 00 00 00       	jmp    c001e616 <int_common_stub>

c001e58e <irq5>:
c001e58e:	fa                   	cli    
c001e58f:	6a 00                	push   0x0
c001e591:	6a 25                	push   0x25
c001e593:	e9 7e 00 00 00       	jmp    c001e616 <int_common_stub>

c001e598 <irq6>:
c001e598:	fa                   	cli    
c001e599:	6a 00                	push   0x0
c001e59b:	6a 26                	push   0x26
c001e59d:	e9 74 00 00 00       	jmp    c001e616 <int_common_stub>

c001e5a2 <irq7>:
c001e5a2:	fa                   	cli    
c001e5a3:	6a 00                	push   0x0
c001e5a5:	6a 27                	push   0x27
c001e5a7:	e9 6a 00 00 00       	jmp    c001e616 <int_common_stub>

c001e5ac <irq8>:
c001e5ac:	fa                   	cli    
c001e5ad:	6a 00                	push   0x0
c001e5af:	6a 28                	push   0x28
c001e5b1:	e9 60 00 00 00       	jmp    c001e616 <int_common_stub>

c001e5b6 <irq9>:
c001e5b6:	fa                   	cli    
c001e5b7:	6a 00                	push   0x0
c001e5b9:	6a 29                	push   0x29
c001e5bb:	e9 56 00 00 00       	jmp    c001e616 <int_common_stub>

c001e5c0 <irq10>:
c001e5c0:	fa                   	cli    
c001e5c1:	6a 00                	push   0x0
c001e5c3:	6a 2a                	push   0x2a
c001e5c5:	e9 4c 00 00 00       	jmp    c001e616 <int_common_stub>

c001e5ca <irq11>:
c001e5ca:	fa                   	cli    
c001e5cb:	6a 00                	push   0x0
c001e5cd:	6a 2b                	push   0x2b
c001e5cf:	e9 42 00 00 00       	jmp    c001e616 <int_common_stub>

c001e5d4 <irq12>:
c001e5d4:	fa                   	cli    
c001e5d5:	6a 00                	push   0x0
c001e5d7:	6a 2c                	push   0x2c
c001e5d9:	e9 38 00 00 00       	jmp    c001e616 <int_common_stub>

c001e5de <irq13>:
c001e5de:	fa                   	cli    
c001e5df:	6a 00                	push   0x0
c001e5e1:	6a 2d                	push   0x2d
c001e5e3:	e9 2e 00 00 00       	jmp    c001e616 <int_common_stub>

c001e5e8 <irq14>:
c001e5e8:	fa                   	cli    
c001e5e9:	6a 00                	push   0x0
c001e5eb:	6a 2e                	push   0x2e
c001e5ed:	e9 24 00 00 00       	jmp    c001e616 <int_common_stub>

c001e5f2 <irq15>:
c001e5f2:	fa                   	cli    
c001e5f3:	6a 00                	push   0x0
c001e5f5:	6a 2f                	push   0x2f
c001e5f7:	e9 1a 00 00 00       	jmp    c001e616 <int_common_stub>

c001e5fc <irq1>:
c001e5fc:	fa                   	cli    
c001e5fd:	6a 00                	push   0x0
c001e5ff:	6a 21                	push   0x21
c001e601:	eb 13                	jmp    c001e616 <int_common_stub>

c001e603 <irq2>:
c001e603:	fa                   	cli    
c001e604:	6a 00                	push   0x0
c001e606:	6a 22                	push   0x22
c001e608:	eb 0c                	jmp    c001e616 <int_common_stub>

c001e60a <isr96>:
c001e60a:	6a 00                	push   0x0
c001e60c:	6a 60                	push   0x60
c001e60e:	fb                   	sti    
c001e60f:	eb 37                	jmp    c001e648 <syscall_common_stub>

c001e611 <irq0>:
c001e611:	fa                   	cli    
c001e612:	6a 00                	push   0x0
c001e614:	6a 20                	push   0x20

c001e616 <int_common_stub>:
c001e616:	60                   	pusha  
c001e617:	1e                   	push   ds
c001e618:	06                   	push   es
c001e619:	0f a0                	push   fs
c001e61b:	0f a8                	push   gs
c001e61d:	66 b8 10 00          	mov    ax,0x10
c001e621:	66 8e d8             	mov    ds,ax
c001e624:	66 8e c0             	mov    es,ax
c001e627:	66 8e e0             	mov    fs,ax
c001e62a:	66 8e e8             	mov    gs,ax
c001e62d:	54                   	push   esp
c001e62e:	fc                   	cld    
c001e62f:	e8 00 df fe ff       	call   c000c534 <int_handler>
c001e634:	81 c4 04 00 00 00    	add    esp,0x4
c001e63a:	0f a9                	pop    gs
c001e63c:	0f a1                	pop    fs
c001e63e:	07                   	pop    es
c001e63f:	1f                   	pop    ds
c001e640:	61                   	popa   
c001e641:	81 c4 08 00 00 00    	add    esp,0x8
c001e647:	cf                   	iret   

c001e648 <syscall_common_stub>:
c001e648:	60                   	pusha  
c001e649:	1e                   	push   ds
c001e64a:	06                   	push   es
c001e64b:	0f a0                	push   fs
c001e64d:	0f a8                	push   gs
c001e64f:	66 b8 10 00          	mov    ax,0x10
c001e653:	66 8e d8             	mov    ds,ax
c001e656:	66 8e c0             	mov    es,ax
c001e659:	66 8e e0             	mov    fs,ax
c001e65c:	66 8e e8             	mov    gs,ax
c001e65f:	54                   	push   esp
c001e660:	fc                   	cld    
c001e661:	e8 ce de fe ff       	call   c000c534 <int_handler>
c001e666:	81 c4 04 00 00 00    	add    esp,0x4
c001e66c:	0f a9                	pop    gs
c001e66e:	0f a1                	pop    fs
c001e670:	07                   	pop    es
c001e671:	1f                   	pop    ds
c001e672:	e8 0c 2b ff ff       	call   c0011183 <KiCheckSignalZ>
c001e677:	3d 00 00 00 00       	cmp    eax,0x0
c001e67c:	0f 84 c0 00 00 00    	je     c001e742 <skipSignals>
c001e682:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001e687:	61                   	popa   
c001e688:	53                   	push   ebx
c001e689:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001e68f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001e692:	5b                   	pop    ebx
c001e693:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001e698:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001e69b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001e69e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e6a1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001e6a4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001e6a7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001e6aa:	81 c4 08 00 00 00    	add    esp,0x8
c001e6b0:	5e                   	pop    esi
c001e6b1:	5b                   	pop    ebx
c001e6b2:	59                   	pop    ecx
c001e6b3:	5a                   	pop    edx
c001e6b4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001e6b7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001e6ba:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001e6bd:	52                   	push   edx
c001e6be:	51                   	push   ecx
c001e6bf:	53                   	push   ebx
c001e6c0:	56                   	push   esi
c001e6c1:	81 ec 08 00 00 00    	sub    esp,0x8
c001e6c7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001e6ca:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001e6cd:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001e6d0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e6d3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e6d6:	60                   	pusha  
c001e6d7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001e6dd:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001e6e0:	89 e3                	mov    ebx,esp
c001e6e2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001e6e5:	52                   	push   edx
c001e6e6:	68 06 e7 01 c0       	push   0xc001e706
c001e6eb:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001e6ee:	89 dc                	mov    esp,ebx
c001e6f0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001e6f3:	68 23 00 00 00       	push   0x23
c001e6f8:	51                   	push   ecx
c001e6f9:	68 02 02 00 00       	push   0x202
c001e6fe:	68 1b 00 00 00       	push   0x1b
c001e703:	ff 36                	push   DWORD PTR [esi]
c001e705:	cf                   	iret   

c001e706 <finishSignal>:
c001e706:	cd 0f                	int    0xf

c001e708 <finishSignal2>:
c001e708:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001e70e:	e8 ed 2a ff ff       	call   c0011200 <KiFinishSignalZ>
c001e713:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001e719:	68 23 00 00 00       	push   0x23
c001e71e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001e721:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001e724:	68 1b 00 00 00       	push   0x1b
c001e729:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001e72c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e72f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001e732:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001e735:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e738:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001e73b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001e73e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001e741:	cf                   	iret   

c001e742 <skipSignals>:
c001e742:	61                   	popa   
c001e743:	81 c4 08 00 00 00    	add    esp,0x8
c001e749:	cf                   	iret   
c001e74a:	90                   	nop
c001e74b:	90                   	nop

c001e74c <irq16>:
c001e74c:	fa                   	cli    
c001e74d:	6a 00                	push   0x0
c001e74f:	6a 30                	push   0x30
c001e751:	e9 c0 fe ff ff       	jmp    c001e616 <int_common_stub>

c001e756 <irq17>:
c001e756:	fa                   	cli    
c001e757:	6a 00                	push   0x0
c001e759:	6a 31                	push   0x31
c001e75b:	e9 b6 fe ff ff       	jmp    c001e616 <int_common_stub>

c001e760 <irq18>:
c001e760:	fa                   	cli    
c001e761:	6a 00                	push   0x0
c001e763:	6a 32                	push   0x32
c001e765:	e9 ac fe ff ff       	jmp    c001e616 <int_common_stub>

c001e76a <irq19>:
c001e76a:	fa                   	cli    
c001e76b:	6a 00                	push   0x0
c001e76d:	6a 33                	push   0x33
c001e76f:	e9 a2 fe ff ff       	jmp    c001e616 <int_common_stub>

c001e774 <irq20>:
c001e774:	fa                   	cli    
c001e775:	6a 00                	push   0x0
c001e777:	6a 34                	push   0x34
c001e779:	e9 98 fe ff ff       	jmp    c001e616 <int_common_stub>

c001e77e <irq21>:
c001e77e:	fa                   	cli    
c001e77f:	6a 00                	push   0x0
c001e781:	6a 35                	push   0x35
c001e783:	e9 8e fe ff ff       	jmp    c001e616 <int_common_stub>

c001e788 <irq22>:
c001e788:	fa                   	cli    
c001e789:	6a 00                	push   0x0
c001e78b:	6a 36                	push   0x36
c001e78d:	e9 84 fe ff ff       	jmp    c001e616 <int_common_stub>

c001e792 <irq23>:
c001e792:	fa                   	cli    
c001e793:	6a 00                	push   0x0
c001e795:	6a 37                	push   0x37
c001e797:	e9 7a fe ff ff       	jmp    c001e616 <int_common_stub>
c001e79c:	66 90                	xchg   ax,ax
c001e79e:	66 90                	xchg   ax,ax

c001e7a0 <i386GetRDRAND>:
c001e7a0:	b9 64 00 00 00       	mov    ecx,0x64

c001e7a5 <retry>:
c001e7a5:	0f c7 f0             	rdrand eax
c001e7a8:	72 05                	jb     c001e7af <retry.done>
c001e7aa:	e2 f9                	loop   c001e7a5 <retry>

c001e7ac <retry.fail>:
c001e7ac:	31 c0                	xor    eax,eax
c001e7ae:	c3                   	ret    

c001e7af <retry.done>:
c001e7af:	c3                   	ret    

c001e7b0 <absolutelyNoChanceInHell>:
c001e7b0:	b8 01 00 00 00       	mov    eax,0x1
c001e7b5:	0f a2                	cpuid  
c001e7b7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001e7bd:	74 06                	je     c001e7c5 <sseDetect.noSSE>
c001e7bf:	b8 01 00 00 00       	mov    eax,0x1
c001e7c4:	c3                   	ret    

c001e7c5 <sseDetect.noSSE>:
c001e7c5:	31 c0                	xor    eax,eax
c001e7c7:	c3                   	ret    

c001e7c8 <sseSave>:
c001e7c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e7cc:	0f ae 00             	fxsave [eax]
c001e7cf:	c3                   	ret    

c001e7d0 <sseLoad>:
c001e7d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e7d4:	0f ae 08             	fxrstor [eax]
c001e7d7:	c3                   	ret    

c001e7d8 <sseInit>:
c001e7d8:	e8 42 00 00 00       	call   c001e81f <x87Init>
c001e7dd:	0f 20 e0             	mov    eax,cr4
c001e7e0:	66 0d 00 06          	or     ax,0x600
c001e7e4:	0f 22 e0             	mov    cr4,eax
c001e7e7:	c3                   	ret    

c001e7e8 <sseClose>:
c001e7e8:	c3                   	ret    
c001e7e9:	66 90                	xchg   ax,ax
c001e7eb:	66 90                	xchg   ax,ax
c001e7ed:	66 90                	xchg   ax,ax
c001e7ef:	90                   	nop

c001e7f0 <value_37F>:
c001e7f0:	7f 03                	jg     c001e7f5 <value_37A+0x1>

c001e7f2 <value_37E>:
c001e7f2:	7e 03                	jle    c001e7f7 <x87Detect+0x1>

c001e7f4 <value_37A>:
c001e7f4:	7a 03                	jp     c001e7f9 <x87Detect+0x3>

c001e7f6 <x87Detect>:
c001e7f6:	b8 01 00 00 00       	mov    eax,0x1
c001e7fb:	0f a2                	cpuid  
c001e7fd:	f7 c2 01 00 00 00    	test   edx,0x1
c001e803:	74 06                	je     c001e80b <x87Detect.nox87>
c001e805:	b8 01 00 00 00       	mov    eax,0x1
c001e80a:	c3                   	ret    

c001e80b <x87Detect.nox87>:
c001e80b:	b8 00 00 00 00       	mov    eax,0x0
c001e810:	c3                   	ret    

c001e811 <x87Save>:
c001e811:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e815:	dd 30                	fnsave [eax]
c001e817:	c3                   	ret    

c001e818 <x87Load>:
c001e818:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e81c:	dd 20                	frstor [eax]
c001e81e:	c3                   	ret    

c001e81f <x87Init>:
c001e81f:	0f 20 c0             	mov    eax,cr0
c001e822:	66 25 fb ff          	and    ax,0xfffb
c001e826:	66 0d 22 00          	or     ax,0x22
c001e82a:	0f 22 c0             	mov    cr0,eax
c001e82d:	db e3                	fninit 
c001e82f:	0f 06                	clts   
c001e831:	d9 2d f4 e7 01 c0    	fldcw  WORD PTR ds:0xc001e7f4
c001e837:	c3                   	ret    

c001e838 <x87Close>:
c001e838:	c3                   	ret    
c001e839:	66 90                	xchg   ax,ax
c001e83b:	90                   	nop

c001e83c <__do_global_ctors_aux>:
c001e83c:	a1 f0 f7 01 c0       	mov    eax,ds:0xc001f7f0
c001e841:	83 f8 ff             	cmp    eax,0xffffffff
c001e844:	74 1a                	je     c001e860 <__do_global_ctors_aux+0x24>
c001e846:	55                   	push   ebp
c001e847:	89 e5                	mov    ebp,esp
c001e849:	53                   	push   ebx
c001e84a:	52                   	push   edx
c001e84b:	bb f0 f7 01 c0       	mov    ebx,0xc001f7f0
c001e850:	ff d0                	call   eax
c001e852:	83 eb 04             	sub    ebx,0x4
c001e855:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e857:	83 f8 ff             	cmp    eax,0xffffffff
c001e85a:	75 f4                	jne    c001e850 <__do_global_ctors_aux+0x14>
c001e85c:	58                   	pop    eax
c001e85d:	5b                   	pop    ebx
c001e85e:	5d                   	pop    ebp
c001e85f:	c3                   	ret    
c001e860:	c3                   	ret    
c001e861:	66 90                	xchg   ax,ax
c001e863:	90                   	nop

c001e864 <__divdi3>:
c001e864:	55                   	push   ebp
c001e865:	57                   	push   edi
c001e866:	56                   	push   esi
c001e867:	53                   	push   ebx
c001e868:	83 ec 1c             	sub    esp,0x1c
c001e86b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e86f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e873:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e876:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e87a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e87e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e882:	85 db                	test   ebx,ebx
c001e884:	0f 88 8e 00 00 00    	js     c001e918 <__divdi3+0xb4>
c001e88a:	89 dd                	mov    ebp,ebx
c001e88c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e894:	89 d3                	mov    ebx,edx
c001e896:	85 d2                	test   edx,edx
c001e898:	79 0d                	jns    c001e8a7 <__divdi3+0x43>
c001e89a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001e89e:	f7 d8                	neg    eax
c001e8a0:	83 d2 00             	adc    edx,0x0
c001e8a3:	f7 da                	neg    edx
c001e8a5:	89 d3                	mov    ebx,edx
c001e8a7:	89 c7                	mov    edi,eax
c001e8a9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e8ac:	85 db                	test   ebx,ebx
c001e8ae:	75 48                	jne    c001e8f8 <__divdi3+0x94>
c001e8b0:	39 ef                	cmp    edi,ebp
c001e8b2:	76 24                	jbe    c001e8d8 <__divdi3+0x74>
c001e8b4:	89 ea                	mov    edx,ebp
c001e8b6:	f7 f7                	div    edi
c001e8b8:	89 c1                	mov    ecx,eax
c001e8ba:	31 f6                	xor    esi,esi
c001e8bc:	89 c8                	mov    eax,ecx
c001e8be:	89 f2                	mov    edx,esi
c001e8c0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e8c4:	85 c9                	test   ecx,ecx
c001e8c6:	74 07                	je     c001e8cf <__divdi3+0x6b>
c001e8c8:	f7 d8                	neg    eax
c001e8ca:	83 d2 00             	adc    edx,0x0
c001e8cd:	f7 da                	neg    edx
c001e8cf:	83 c4 1c             	add    esp,0x1c
c001e8d2:	5b                   	pop    ebx
c001e8d3:	5e                   	pop    esi
c001e8d4:	5f                   	pop    edi
c001e8d5:	5d                   	pop    ebp
c001e8d6:	c3                   	ret    
c001e8d7:	90                   	nop
c001e8d8:	85 ff                	test   edi,edi
c001e8da:	75 0b                	jne    c001e8e7 <__divdi3+0x83>
c001e8dc:	b8 01 00 00 00       	mov    eax,0x1
c001e8e1:	31 d2                	xor    edx,edx
c001e8e3:	f7 f3                	div    ebx
c001e8e5:	89 c7                	mov    edi,eax
c001e8e7:	31 d2                	xor    edx,edx
c001e8e9:	89 e8                	mov    eax,ebp
c001e8eb:	f7 f7                	div    edi
c001e8ed:	89 c6                	mov    esi,eax
c001e8ef:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e8f2:	f7 f7                	div    edi
c001e8f4:	89 c1                	mov    ecx,eax
c001e8f6:	eb c4                	jmp    c001e8bc <__divdi3+0x58>
c001e8f8:	39 eb                	cmp    ebx,ebp
c001e8fa:	77 3c                	ja     c001e938 <__divdi3+0xd4>
c001e8fc:	0f bd f3             	bsr    esi,ebx
c001e8ff:	83 f6 1f             	xor    esi,0x1f
c001e902:	75 40                	jne    c001e944 <__divdi3+0xe0>
c001e904:	39 eb                	cmp    ebx,ebp
c001e906:	72 09                	jb     c001e911 <__divdi3+0xad>
c001e908:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e90b:	0f 87 97 00 00 00    	ja     c001e9a8 <__divdi3+0x144>
c001e911:	b9 01 00 00 00       	mov    ecx,0x1
c001e916:	eb a4                	jmp    c001e8bc <__divdi3+0x58>
c001e918:	f7 d9                	neg    ecx
c001e91a:	83 d3 00             	adc    ebx,0x0
c001e91d:	f7 db                	neg    ebx
c001e91f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e922:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e926:	89 dd                	mov    ebp,ebx
c001e928:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e930:	e9 5f ff ff ff       	jmp    c001e894 <__divdi3+0x30>
c001e935:	8d 76 00             	lea    esi,[esi+0x0]
c001e938:	31 f6                	xor    esi,esi
c001e93a:	31 c9                	xor    ecx,ecx
c001e93c:	e9 7b ff ff ff       	jmp    c001e8bc <__divdi3+0x58>
c001e941:	8d 76 00             	lea    esi,[esi+0x0]
c001e944:	b8 20 00 00 00       	mov    eax,0x20
c001e949:	29 f0                	sub    eax,esi
c001e94b:	89 f1                	mov    ecx,esi
c001e94d:	d3 e3                	shl    ebx,cl
c001e94f:	89 fa                	mov    edx,edi
c001e951:	88 c1                	mov    cl,al
c001e953:	d3 ea                	shr    edx,cl
c001e955:	09 da                	or     edx,ebx
c001e957:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e95b:	89 f1                	mov    ecx,esi
c001e95d:	d3 e7                	shl    edi,cl
c001e95f:	89 eb                	mov    ebx,ebp
c001e961:	88 c1                	mov    cl,al
c001e963:	d3 eb                	shr    ebx,cl
c001e965:	89 f1                	mov    ecx,esi
c001e967:	d3 e5                	shl    ebp,cl
c001e969:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e96c:	88 c1                	mov    cl,al
c001e96e:	d3 ea                	shr    edx,cl
c001e970:	09 d5                	or     ebp,edx
c001e972:	89 e8                	mov    eax,ebp
c001e974:	89 da                	mov    edx,ebx
c001e976:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e97a:	89 d3                	mov    ebx,edx
c001e97c:	89 c5                	mov    ebp,eax
c001e97e:	f7 e7                	mul    edi
c001e980:	39 d3                	cmp    ebx,edx
c001e982:	72 18                	jb     c001e99c <__divdi3+0x138>
c001e984:	74 0a                	je     c001e990 <__divdi3+0x12c>
c001e986:	89 e9                	mov    ecx,ebp
c001e988:	31 f6                	xor    esi,esi
c001e98a:	e9 2d ff ff ff       	jmp    c001e8bc <__divdi3+0x58>
c001e98f:	90                   	nop
c001e990:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e993:	89 f1                	mov    ecx,esi
c001e995:	d3 e7                	shl    edi,cl
c001e997:	39 c7                	cmp    edi,eax
c001e999:	73 eb                	jae    c001e986 <__divdi3+0x122>
c001e99b:	90                   	nop
c001e99c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e99f:	31 f6                	xor    esi,esi
c001e9a1:	e9 16 ff ff ff       	jmp    c001e8bc <__divdi3+0x58>
c001e9a6:	66 90                	xchg   ax,ax
c001e9a8:	31 c9                	xor    ecx,ecx
c001e9aa:	e9 0d ff ff ff       	jmp    c001e8bc <__divdi3+0x58>
c001e9af:	90                   	nop

c001e9b0 <__moddi3>:
c001e9b0:	55                   	push   ebp
c001e9b1:	57                   	push   edi
c001e9b2:	56                   	push   esi
c001e9b3:	53                   	push   ebx
c001e9b4:	83 ec 2c             	sub    esp,0x2c
c001e9b7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e9bb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e9bf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e9c3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e9c7:	85 db                	test   ebx,ebx
c001e9c9:	0f 88 85 00 00 00    	js     c001ea54 <__moddi3+0xa4>
c001e9cf:	89 de                	mov    esi,ebx
c001e9d1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e9d9:	89 d7                	mov    edi,edx
c001e9db:	85 d2                	test   edx,edx
c001e9dd:	79 09                	jns    c001e9e8 <__moddi3+0x38>
c001e9df:	f7 d8                	neg    eax
c001e9e1:	83 d2 00             	adc    edx,0x0
c001e9e4:	f7 da                	neg    edx
c001e9e6:	89 d7                	mov    edi,edx
c001e9e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e9ec:	89 cd                	mov    ebp,ecx
c001e9ee:	85 ff                	test   edi,edi
c001e9f0:	75 52                	jne    c001ea44 <__moddi3+0x94>
c001e9f2:	89 c3                	mov    ebx,eax
c001e9f4:	39 f0                	cmp    eax,esi
c001e9f6:	76 24                	jbe    c001ea1c <__moddi3+0x6c>
c001e9f8:	89 c8                	mov    eax,ecx
c001e9fa:	89 f2                	mov    edx,esi
c001e9fc:	f7 f3                	div    ebx
c001e9fe:	89 d6                	mov    esi,edx
c001ea00:	89 f0                	mov    eax,esi
c001ea02:	31 d2                	xor    edx,edx
c001ea04:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ea08:	85 c9                	test   ecx,ecx
c001ea0a:	74 07                	je     c001ea13 <__moddi3+0x63>
c001ea0c:	f7 d8                	neg    eax
c001ea0e:	83 d2 00             	adc    edx,0x0
c001ea11:	f7 da                	neg    edx
c001ea13:	83 c4 2c             	add    esp,0x2c
c001ea16:	5b                   	pop    ebx
c001ea17:	5e                   	pop    esi
c001ea18:	5f                   	pop    edi
c001ea19:	5d                   	pop    ebp
c001ea1a:	c3                   	ret    
c001ea1b:	90                   	nop
c001ea1c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ea20:	85 db                	test   ebx,ebx
c001ea22:	75 0d                	jne    c001ea31 <__moddi3+0x81>
c001ea24:	b8 01 00 00 00       	mov    eax,0x1
c001ea29:	31 d2                	xor    edx,edx
c001ea2b:	f7 f7                	div    edi
c001ea2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea31:	89 f0                	mov    eax,esi
c001ea33:	31 d2                	xor    edx,edx
c001ea35:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001ea39:	f7 f7                	div    edi
c001ea3b:	89 e8                	mov    eax,ebp
c001ea3d:	f7 f7                	div    edi
c001ea3f:	89 d6                	mov    esi,edx
c001ea41:	eb bd                	jmp    c001ea00 <__moddi3+0x50>
c001ea43:	90                   	nop
c001ea44:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001ea48:	39 f7                	cmp    edi,esi
c001ea4a:	76 20                	jbe    c001ea6c <__moddi3+0xbc>
c001ea4c:	89 c8                	mov    eax,ecx
c001ea4e:	89 f2                	mov    edx,esi
c001ea50:	eb b2                	jmp    c001ea04 <__moddi3+0x54>
c001ea52:	66 90                	xchg   ax,ax
c001ea54:	f7 d9                	neg    ecx
c001ea56:	83 d3 00             	adc    ebx,0x0
c001ea59:	f7 db                	neg    ebx
c001ea5b:	89 de                	mov    esi,ebx
c001ea5d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001ea65:	e9 6f ff ff ff       	jmp    c001e9d9 <__moddi3+0x29>
c001ea6a:	66 90                	xchg   ax,ax
c001ea6c:	0f bd c7             	bsr    eax,edi
c001ea6f:	83 f0 1f             	xor    eax,0x1f
c001ea72:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ea76:	75 24                	jne    c001ea9c <__moddi3+0xec>
c001ea78:	39 f7                	cmp    edi,esi
c001ea7a:	72 06                	jb     c001ea82 <__moddi3+0xd2>
c001ea7c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001ea80:	77 0c                	ja     c001ea8e <__moddi3+0xde>
c001ea82:	89 e9                	mov    ecx,ebp
c001ea84:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001ea88:	19 fe                	sbb    esi,edi
c001ea8a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001ea8e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ea92:	89 f2                	mov    edx,esi
c001ea94:	e9 6b ff ff ff       	jmp    c001ea04 <__moddi3+0x54>
c001ea99:	8d 76 00             	lea    esi,[esi+0x0]
c001ea9c:	b8 20 00 00 00       	mov    eax,0x20
c001eaa1:	89 c2                	mov    edx,eax
c001eaa3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001eaa7:	29 da                	sub    edx,ebx
c001eaa9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001eaad:	88 d9                	mov    cl,bl
c001eaaf:	d3 e7                	shl    edi,cl
c001eab1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eab5:	88 d1                	mov    cl,dl
c001eab7:	d3 e8                	shr    eax,cl
c001eab9:	09 c7                	or     edi,eax
c001eabb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001eabf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001eac3:	89 d8                	mov    eax,ebx
c001eac5:	88 d9                	mov    cl,bl
c001eac7:	d3 e7                	shl    edi,cl
c001eac9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001eacd:	89 f3                	mov    ebx,esi
c001eacf:	88 d1                	mov    cl,dl
c001ead1:	d3 eb                	shr    ebx,cl
c001ead3:	89 c7                	mov    edi,eax
c001ead5:	88 c1                	mov    cl,al
c001ead7:	d3 e6                	shl    esi,cl
c001ead9:	89 e8                	mov    eax,ebp
c001eadb:	88 d1                	mov    cl,dl
c001eadd:	d3 e8                	shr    eax,cl
c001eadf:	09 f0                	or     eax,esi
c001eae1:	89 f9                	mov    ecx,edi
c001eae3:	d3 e5                	shl    ebp,cl
c001eae5:	89 da                	mov    edx,ebx
c001eae7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001eaeb:	89 d3                	mov    ebx,edx
c001eaed:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001eaf1:	89 c6                	mov    esi,eax
c001eaf3:	89 d1                	mov    ecx,edx
c001eaf5:	39 d3                	cmp    ebx,edx
c001eaf7:	72 27                	jb     c001eb20 <__moddi3+0x170>
c001eaf9:	74 21                	je     c001eb1c <__moddi3+0x16c>
c001eafb:	29 f5                	sub    ebp,esi
c001eafd:	19 cb                	sbb    ebx,ecx
c001eaff:	89 de                	mov    esi,ebx
c001eb01:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001eb05:	d3 e6                	shl    esi,cl
c001eb07:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001eb0b:	89 f9                	mov    ecx,edi
c001eb0d:	d3 ed                	shr    ebp,cl
c001eb0f:	09 ee                	or     esi,ebp
c001eb11:	89 f0                	mov    eax,esi
c001eb13:	d3 eb                	shr    ebx,cl
c001eb15:	89 da                	mov    edx,ebx
c001eb17:	e9 e8 fe ff ff       	jmp    c001ea04 <__moddi3+0x54>
c001eb1c:	39 c5                	cmp    ebp,eax
c001eb1e:	73 db                	jae    c001eafb <__moddi3+0x14b>
c001eb20:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001eb24:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001eb28:	89 d1                	mov    ecx,edx
c001eb2a:	89 c6                	mov    esi,eax
c001eb2c:	eb cd                	jmp    c001eafb <__moddi3+0x14b>
c001eb2e:	66 90                	xchg   ax,ax

c001eb30 <__udivdi3>:
c001eb30:	55                   	push   ebp
c001eb31:	57                   	push   edi
c001eb32:	56                   	push   esi
c001eb33:	53                   	push   ebx
c001eb34:	83 ec 1c             	sub    esp,0x1c
c001eb37:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001eb3b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001eb3f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001eb43:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001eb47:	85 d2                	test   edx,edx
c001eb49:	75 41                	jne    c001eb8c <__udivdi3+0x5c>
c001eb4b:	39 f7                	cmp    edi,esi
c001eb4d:	76 15                	jbe    c001eb64 <__udivdi3+0x34>
c001eb4f:	89 e8                	mov    eax,ebp
c001eb51:	89 f2                	mov    edx,esi
c001eb53:	f7 f7                	div    edi
c001eb55:	31 db                	xor    ebx,ebx
c001eb57:	89 da                	mov    edx,ebx
c001eb59:	83 c4 1c             	add    esp,0x1c
c001eb5c:	5b                   	pop    ebx
c001eb5d:	5e                   	pop    esi
c001eb5e:	5f                   	pop    edi
c001eb5f:	5d                   	pop    ebp
c001eb60:	c3                   	ret    
c001eb61:	8d 76 00             	lea    esi,[esi+0x0]
c001eb64:	89 f9                	mov    ecx,edi
c001eb66:	85 ff                	test   edi,edi
c001eb68:	75 0b                	jne    c001eb75 <__udivdi3+0x45>
c001eb6a:	b8 01 00 00 00       	mov    eax,0x1
c001eb6f:	31 d2                	xor    edx,edx
c001eb71:	f7 f7                	div    edi
c001eb73:	89 c1                	mov    ecx,eax
c001eb75:	31 d2                	xor    edx,edx
c001eb77:	89 f0                	mov    eax,esi
c001eb79:	f7 f1                	div    ecx
c001eb7b:	89 c3                	mov    ebx,eax
c001eb7d:	89 e8                	mov    eax,ebp
c001eb7f:	f7 f1                	div    ecx
c001eb81:	89 da                	mov    edx,ebx
c001eb83:	83 c4 1c             	add    esp,0x1c
c001eb86:	5b                   	pop    ebx
c001eb87:	5e                   	pop    esi
c001eb88:	5f                   	pop    edi
c001eb89:	5d                   	pop    ebp
c001eb8a:	c3                   	ret    
c001eb8b:	90                   	nop
c001eb8c:	39 f2                	cmp    edx,esi
c001eb8e:	77 1c                	ja     c001ebac <__udivdi3+0x7c>
c001eb90:	0f bd da             	bsr    ebx,edx
c001eb93:	83 f3 1f             	xor    ebx,0x1f
c001eb96:	75 24                	jne    c001ebbc <__udivdi3+0x8c>
c001eb98:	39 f2                	cmp    edx,esi
c001eb9a:	72 08                	jb     c001eba4 <__udivdi3+0x74>
c001eb9c:	39 ef                	cmp    edi,ebp
c001eb9e:	0f 87 84 00 00 00    	ja     c001ec28 <__udivdi3+0xf8>
c001eba4:	b8 01 00 00 00       	mov    eax,0x1
c001eba9:	eb ac                	jmp    c001eb57 <__udivdi3+0x27>
c001ebab:	90                   	nop
c001ebac:	31 db                	xor    ebx,ebx
c001ebae:	31 c0                	xor    eax,eax
c001ebb0:	89 da                	mov    edx,ebx
c001ebb2:	83 c4 1c             	add    esp,0x1c
c001ebb5:	5b                   	pop    ebx
c001ebb6:	5e                   	pop    esi
c001ebb7:	5f                   	pop    edi
c001ebb8:	5d                   	pop    ebp
c001ebb9:	c3                   	ret    
c001ebba:	66 90                	xchg   ax,ax
c001ebbc:	b8 20 00 00 00       	mov    eax,0x20
c001ebc1:	29 d8                	sub    eax,ebx
c001ebc3:	88 d9                	mov    cl,bl
c001ebc5:	d3 e2                	shl    edx,cl
c001ebc7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001ebcb:	89 fa                	mov    edx,edi
c001ebcd:	88 c1                	mov    cl,al
c001ebcf:	d3 ea                	shr    edx,cl
c001ebd1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ebd5:	09 d1                	or     ecx,edx
c001ebd7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001ebdb:	88 d9                	mov    cl,bl
c001ebdd:	d3 e7                	shl    edi,cl
c001ebdf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001ebe3:	89 f7                	mov    edi,esi
c001ebe5:	88 c1                	mov    cl,al
c001ebe7:	d3 ef                	shr    edi,cl
c001ebe9:	88 d9                	mov    cl,bl
c001ebeb:	d3 e6                	shl    esi,cl
c001ebed:	89 ea                	mov    edx,ebp
c001ebef:	88 c1                	mov    cl,al
c001ebf1:	d3 ea                	shr    edx,cl
c001ebf3:	09 d6                	or     esi,edx
c001ebf5:	89 f0                	mov    eax,esi
c001ebf7:	89 fa                	mov    edx,edi
c001ebf9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001ebfd:	89 d7                	mov    edi,edx
c001ebff:	89 c6                	mov    esi,eax
c001ec01:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001ec05:	39 d7                	cmp    edi,edx
c001ec07:	72 13                	jb     c001ec1c <__udivdi3+0xec>
c001ec09:	74 09                	je     c001ec14 <__udivdi3+0xe4>
c001ec0b:	89 f0                	mov    eax,esi
c001ec0d:	31 db                	xor    ebx,ebx
c001ec0f:	e9 43 ff ff ff       	jmp    c001eb57 <__udivdi3+0x27>
c001ec14:	88 d9                	mov    cl,bl
c001ec16:	d3 e5                	shl    ebp,cl
c001ec18:	39 c5                	cmp    ebp,eax
c001ec1a:	73 ef                	jae    c001ec0b <__udivdi3+0xdb>
c001ec1c:	8d 46 ff             	lea    eax,[esi-0x1]
c001ec1f:	31 db                	xor    ebx,ebx
c001ec21:	e9 31 ff ff ff       	jmp    c001eb57 <__udivdi3+0x27>
c001ec26:	66 90                	xchg   ax,ax
c001ec28:	31 c0                	xor    eax,eax
c001ec2a:	e9 28 ff ff ff       	jmp    c001eb57 <__udivdi3+0x27>
c001ec2f:	90                   	nop

c001ec30 <__umoddi3>:
c001ec30:	55                   	push   ebp
c001ec31:	57                   	push   edi
c001ec32:	56                   	push   esi
c001ec33:	53                   	push   ebx
c001ec34:	83 ec 1c             	sub    esp,0x1c
c001ec37:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ec3b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ec3f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001ec43:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ec47:	89 da                	mov    edx,ebx
c001ec49:	85 c0                	test   eax,eax
c001ec4b:	75 37                	jne    c001ec84 <__umoddi3+0x54>
c001ec4d:	39 df                	cmp    edi,ebx
c001ec4f:	76 13                	jbe    c001ec64 <__umoddi3+0x34>
c001ec51:	89 f0                	mov    eax,esi
c001ec53:	f7 f7                	div    edi
c001ec55:	89 d0                	mov    eax,edx
c001ec57:	31 d2                	xor    edx,edx
c001ec59:	83 c4 1c             	add    esp,0x1c
c001ec5c:	5b                   	pop    ebx
c001ec5d:	5e                   	pop    esi
c001ec5e:	5f                   	pop    edi
c001ec5f:	5d                   	pop    ebp
c001ec60:	c3                   	ret    
c001ec61:	8d 76 00             	lea    esi,[esi+0x0]
c001ec64:	89 fd                	mov    ebp,edi
c001ec66:	85 ff                	test   edi,edi
c001ec68:	75 0b                	jne    c001ec75 <__umoddi3+0x45>
c001ec6a:	b8 01 00 00 00       	mov    eax,0x1
c001ec6f:	31 d2                	xor    edx,edx
c001ec71:	f7 f7                	div    edi
c001ec73:	89 c5                	mov    ebp,eax
c001ec75:	89 d8                	mov    eax,ebx
c001ec77:	31 d2                	xor    edx,edx
c001ec79:	f7 f5                	div    ebp
c001ec7b:	89 f0                	mov    eax,esi
c001ec7d:	f7 f5                	div    ebp
c001ec7f:	89 d0                	mov    eax,edx
c001ec81:	eb d4                	jmp    c001ec57 <__umoddi3+0x27>
c001ec83:	90                   	nop
c001ec84:	89 f1                	mov    ecx,esi
c001ec86:	39 d8                	cmp    eax,ebx
c001ec88:	76 0a                	jbe    c001ec94 <__umoddi3+0x64>
c001ec8a:	89 f0                	mov    eax,esi
c001ec8c:	83 c4 1c             	add    esp,0x1c
c001ec8f:	5b                   	pop    ebx
c001ec90:	5e                   	pop    esi
c001ec91:	5f                   	pop    edi
c001ec92:	5d                   	pop    ebp
c001ec93:	c3                   	ret    
c001ec94:	0f bd e8             	bsr    ebp,eax
c001ec97:	83 f5 1f             	xor    ebp,0x1f
c001ec9a:	75 1c                	jne    c001ecb8 <__umoddi3+0x88>
c001ec9c:	39 d8                	cmp    eax,ebx
c001ec9e:	72 04                	jb     c001eca4 <__umoddi3+0x74>
c001eca0:	39 f7                	cmp    edi,esi
c001eca2:	77 08                	ja     c001ecac <__umoddi3+0x7c>
c001eca4:	89 da                	mov    edx,ebx
c001eca6:	29 fe                	sub    esi,edi
c001eca8:	19 c2                	sbb    edx,eax
c001ecaa:	89 f1                	mov    ecx,esi
c001ecac:	89 c8                	mov    eax,ecx
c001ecae:	83 c4 1c             	add    esp,0x1c
c001ecb1:	5b                   	pop    ebx
c001ecb2:	5e                   	pop    esi
c001ecb3:	5f                   	pop    edi
c001ecb4:	5d                   	pop    ebp
c001ecb5:	c3                   	ret    
c001ecb6:	66 90                	xchg   ax,ax
c001ecb8:	ba 20 00 00 00       	mov    edx,0x20
c001ecbd:	29 ea                	sub    edx,ebp
c001ecbf:	89 e9                	mov    ecx,ebp
c001ecc1:	d3 e0                	shl    eax,cl
c001ecc3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ecc7:	89 f8                	mov    eax,edi
c001ecc9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001eccd:	88 d1                	mov    cl,dl
c001eccf:	d3 e8                	shr    eax,cl
c001ecd1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ecd5:	09 c1                	or     ecx,eax
c001ecd7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001ecdb:	89 e9                	mov    ecx,ebp
c001ecdd:	d3 e7                	shl    edi,cl
c001ecdf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001ece3:	89 d8                	mov    eax,ebx
c001ece5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ece9:	88 d1                	mov    cl,dl
c001eceb:	d3 e8                	shr    eax,cl
c001eced:	89 c7                	mov    edi,eax
c001ecef:	89 e9                	mov    ecx,ebp
c001ecf1:	d3 e3                	shl    ebx,cl
c001ecf3:	89 f0                	mov    eax,esi
c001ecf5:	88 d1                	mov    cl,dl
c001ecf7:	d3 e8                	shr    eax,cl
c001ecf9:	09 d8                	or     eax,ebx
c001ecfb:	89 e9                	mov    ecx,ebp
c001ecfd:	d3 e6                	shl    esi,cl
c001ecff:	89 f3                	mov    ebx,esi
c001ed01:	89 fa                	mov    edx,edi
c001ed03:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001ed07:	89 d1                	mov    ecx,edx
c001ed09:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001ed0d:	89 c6                	mov    esi,eax
c001ed0f:	89 d7                	mov    edi,edx
c001ed11:	39 d1                	cmp    ecx,edx
c001ed13:	72 27                	jb     c001ed3c <__umoddi3+0x10c>
c001ed15:	74 21                	je     c001ed38 <__umoddi3+0x108>
c001ed17:	89 ca                	mov    edx,ecx
c001ed19:	29 f3                	sub    ebx,esi
c001ed1b:	19 fa                	sbb    edx,edi
c001ed1d:	89 d0                	mov    eax,edx
c001ed1f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001ed23:	d3 e0                	shl    eax,cl
c001ed25:	89 e9                	mov    ecx,ebp
c001ed27:	d3 eb                	shr    ebx,cl
c001ed29:	09 d8                	or     eax,ebx
c001ed2b:	d3 ea                	shr    edx,cl
c001ed2d:	83 c4 1c             	add    esp,0x1c
c001ed30:	5b                   	pop    ebx
c001ed31:	5e                   	pop    esi
c001ed32:	5f                   	pop    edi
c001ed33:	5d                   	pop    ebp
c001ed34:	c3                   	ret    
c001ed35:	8d 76 00             	lea    esi,[esi+0x0]
c001ed38:	39 c3                	cmp    ebx,eax
c001ed3a:	73 db                	jae    c001ed17 <__umoddi3+0xe7>
c001ed3c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001ed40:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001ed44:	89 d7                	mov    edi,edx
c001ed46:	89 c6                	mov    esi,eax
c001ed48:	eb cd                	jmp    c001ed17 <__umoddi3+0xe7>

Disassembly of section .init:

c001ed4a <_init>:
c001ed4a:	55                   	push   ebp
c001ed4b:	89 e5                	mov    ebp,esp
c001ed4d:	e8 a2 13 fe ff       	call   c00000f4 <frame_dummy>
c001ed52:	e8 e5 fa ff ff       	call   c001e83c <__do_global_ctors_aux>
c001ed57:	5d                   	pop    ebp
c001ed58:	c3                   	ret    

Disassembly of section .fini:

c001ed59 <_fini>:
c001ed59:	55                   	push   ebp
c001ed5a:	89 e5                	mov    ebp,esp
c001ed5c:	e8 23 13 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001ed61:	5d                   	pop    ebp
c001ed62:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001ed64 <Computer::~Computer()>:
c001ed64:	83 ec 0c             	sub    esp,0xc
c001ed67:	ba 74 00 02 c0       	mov    edx,0xc0020074
c001ed6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed70:	89 10                	mov    DWORD PTR [eax],edx
c001ed72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed76:	83 ec 0c             	sub    esp,0xc
c001ed79:	50                   	push   eax
c001ed7a:	e8 0b d2 fe ff       	call   c000bf8a <Device::~Device()>
c001ed7f:	83 c4 10             	add    esp,0x10
c001ed82:	90                   	nop
c001ed83:	83 c4 0c             	add    esp,0xc
c001ed86:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001ed88 <Computer::~Computer()>:
c001ed88:	83 ec 0c             	sub    esp,0xc
c001ed8b:	83 ec 0c             	sub    esp,0xc
c001ed8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed92:	e8 cd ff ff ff       	call   c001ed64 <Computer::~Computer()>
c001ed97:	83 c4 10             	add    esp,0x10
c001ed9a:	83 ec 08             	sub    esp,0x8
c001ed9d:	68 70 01 00 00       	push   0x170
c001eda2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eda6:	e8 55 ba fe ff       	call   c000a800 <operator delete(void*, unsigned long)>
c001edab:	83 c4 10             	add    esp,0x10
c001edae:	83 c4 0c             	add    esp,0xc
c001edb1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001edb2 <idleCommon()>:
c001edb2:	83 ec 0c             	sub    esp,0xc
c001edb5:	fa                   	cli    
c001edb6:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c001edbc:	e8 b3 66 ff ff       	call   c0015474 <schedule()>
c001edc1:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c001edc6:	48                   	dec    eax
c001edc7:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c001edcc:	75 01                	jne    c001edcf <idleCommon()+0x1d>
c001edce:	fb                   	sti    
c001edcf:	83 c4 0c             	add    esp,0xc
c001edd2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001edd4 <LinkedList<UnixFile>::~LinkedList()>:
c001edd4:	90                   	nop
c001edd5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001edd6 <LinkedList<UnixFile>::LinkedList()>:
c001edd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edda:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ede0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ede4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001edeb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edef:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001edf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edfa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ee00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee04:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ee0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee0f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ee16:	90                   	nop
c001ee17:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001ee18 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001ee18:	83 ec 0c             	sub    esp,0xc
c001ee1b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ee20:	75 10                	jne    c001ee32 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001ee22:	83 ec 0c             	sub    esp,0xc
c001ee25:	68 88 02 02 c0       	push   0xc0020288
c001ee2a:	e8 42 1d ff ff       	call   c0010b71 <KePanic(char const*)>
c001ee2f:	83 c4 10             	add    esp,0x10
c001ee32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee36:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee38:	85 c0                	test   eax,eax
c001ee3a:	74 34                	je     c001ee70 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001ee3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee43:	85 c0                	test   eax,eax
c001ee45:	74 29                	je     c001ee70 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001ee47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee4b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee4e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ee52:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ee55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ee5d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ee60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee67:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ee6e:	eb 65                	jmp    c001eed5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001ee70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee74:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee76:	85 c0                	test   eax,eax
c001ee78:	75 4b                	jne    c001eec5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001ee7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee81:	85 c0                	test   eax,eax
c001ee83:	75 40                	jne    c001eec5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001ee85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee89:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ee8d:	89 10                	mov    DWORD PTR [eax],edx
c001ee8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee93:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ee97:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ee9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eea1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eeaf:	85 c0                	test   eax,eax
c001eeb1:	74 22                	je     c001eed5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001eeb3:	83 ec 0c             	sub    esp,0xc
c001eeb6:	68 aa 02 02 c0       	push   0xc00202aa
c001eebb:	e8 b1 1c ff ff       	call   c0010b71 <KePanic(char const*)>
c001eec0:	83 c4 10             	add    esp,0x10
c001eec3:	eb 10                	jmp    c001eed5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001eec5:	83 ec 0c             	sub    esp,0xc
c001eec8:	68 b4 02 02 c0       	push   0xc00202b4
c001eecd:	e8 9f 1c ff ff       	call   c0010b71 <KePanic(char const*)>
c001eed2:	83 c4 10             	add    esp,0x10
c001eed5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eed9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eedc:	8d 50 01             	lea    edx,[eax+0x1]
c001eedf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eee3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eee6:	90                   	nop
c001eee7:	83 c4 0c             	add    esp,0xc
c001eeea:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001eeec <LinkedList<UnixFile>::getFirstElement()>:
c001eeec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eef0:	8b 00                	mov    eax,DWORD PTR [eax]
c001eef2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001eef4 <LinkedList<UnixFile>::removeFirst()>:
c001eef4:	83 ec 0c             	sub    esp,0xc
c001eef7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eefb:	8b 00                	mov    eax,DWORD PTR [eax]
c001eefd:	85 c0                	test   eax,eax
c001eeff:	75 12                	jne    c001ef13 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001ef01:	83 ec 0c             	sub    esp,0xc
c001ef04:	68 c0 02 02 c0       	push   0xc00202c0
c001ef09:	e8 63 1c ff ff       	call   c0010b71 <KePanic(char const*)>
c001ef0e:	83 c4 10             	add    esp,0x10
c001ef11:	eb 7e                	jmp    c001ef91 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001ef13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef17:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef1a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ef1d:	85 c0                	test   eax,eax
c001ef1f:	74 10                	je     c001ef31 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001ef21:	83 ec 0c             	sub    esp,0xc
c001ef24:	68 0b 03 02 c0       	push   0xc002030b
c001ef29:	e8 43 1c ff ff       	call   c0010b71 <KePanic(char const*)>
c001ef2e:	83 c4 10             	add    esp,0x10
c001ef31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef35:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef37:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ef3a:	85 c0                	test   eax,eax
c001ef3c:	75 33                	jne    c001ef71 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001ef3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef42:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ef48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef4c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ef53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef57:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ef5a:	83 f8 01             	cmp    eax,0x1
c001ef5d:	74 21                	je     c001ef80 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ef5f:	83 ec 0c             	sub    esp,0xc
c001ef62:	68 e4 02 02 c0       	push   0xc00202e4
c001ef67:	e8 05 1c ff ff       	call   c0010b71 <KePanic(char const*)>
c001ef6c:	83 c4 10             	add    esp,0x10
c001ef6f:	eb 0f                	jmp    c001ef80 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ef71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef75:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef77:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001ef7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef7e:	89 10                	mov    DWORD PTR [eax],edx
c001ef80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef84:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ef87:	8d 50 ff             	lea    edx,[eax-0x1]
c001ef8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef8e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ef91:	83 c4 0c             	add    esp,0xc
c001ef94:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001ef96 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001ef96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ef9a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ef9d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001ef9e <DriverlessDevice::~DriverlessDevice()>:
c001ef9e:	ba 3c 0d 02 c0       	mov    edx,0xc0020d3c
c001efa3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efa7:	89 10                	mov    DWORD PTR [eax],edx
c001efa9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efad:	50                   	push   eax
c001efae:	e8 d7 cf fe ff       	call   c000bf8a <Device::~Device()>
c001efb3:	83 c4 04             	add    esp,0x4
c001efb6:	90                   	nop
c001efb7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001efb8 <DriverlessDevice::~DriverlessDevice()>:
c001efb8:	83 ec 0c             	sub    esp,0xc
c001efbb:	83 ec 0c             	sub    esp,0xc
c001efbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efc2:	e8 d7 ff ff ff       	call   c001ef9e <DriverlessDevice::~DriverlessDevice()>
c001efc7:	83 c4 10             	add    esp,0x10
c001efca:	83 ec 08             	sub    esp,0x8
c001efcd:	68 58 01 00 00       	push   0x158
c001efd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efd6:	e8 25 b8 fe ff       	call   c000a800 <operator delete(void*, unsigned long)>
c001efdb:	83 c4 10             	add    esp,0x10
c001efde:	83 c4 0c             	add    esp,0xc
c001efe1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001efe2 <LinkedList<Device>::addElement(Device*)>:
c001efe2:	83 ec 0c             	sub    esp,0xc
c001efe5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001efea:	75 10                	jne    c001effc <LinkedList<Device>::addElement(Device*)+0x1a>
c001efec:	83 ec 0c             	sub    esp,0xc
c001efef:	68 88 02 02 c0       	push   0xc0020288
c001eff4:	e8 78 1b ff ff       	call   c0010b71 <KePanic(char const*)>
c001eff9:	83 c4 10             	add    esp,0x10
c001effc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f000:	8b 00                	mov    eax,DWORD PTR [eax]
c001f002:	85 c0                	test   eax,eax
c001f004:	74 3a                	je     c001f040 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f006:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f00a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f00d:	85 c0                	test   eax,eax
c001f00f:	74 2f                	je     c001f040 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f011:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f015:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f018:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f01c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001f022:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f026:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f02a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f02d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f031:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f034:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f03e:	eb 68                	jmp    c001f0a8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f044:	8b 00                	mov    eax,DWORD PTR [eax]
c001f046:	85 c0                	test   eax,eax
c001f048:	75 4e                	jne    c001f098 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f04a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f04e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f051:	85 c0                	test   eax,eax
c001f053:	75 43                	jne    c001f098 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f055:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f059:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f05d:	89 10                	mov    DWORD PTR [eax],edx
c001f05f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f063:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f067:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f06a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f06e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f071:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f07b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f07f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f082:	85 c0                	test   eax,eax
c001f084:	74 22                	je     c001f0a8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f086:	83 ec 0c             	sub    esp,0xc
c001f089:	68 aa 02 02 c0       	push   0xc00202aa
c001f08e:	e8 de 1a ff ff       	call   c0010b71 <KePanic(char const*)>
c001f093:	83 c4 10             	add    esp,0x10
c001f096:	eb 10                	jmp    c001f0a8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f098:	83 ec 0c             	sub    esp,0xc
c001f09b:	68 b4 02 02 c0       	push   0xc00202b4
c001f0a0:	e8 cc 1a ff ff       	call   c0010b71 <KePanic(char const*)>
c001f0a5:	83 c4 10             	add    esp,0x10
c001f0a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0ac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f0af:	8d 50 01             	lea    edx,[eax+0x1]
c001f0b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0b6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f0b9:	90                   	nop
c001f0ba:	83 c4 0c             	add    esp,0xc
c001f0bd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001f0be <LinkedList<Device>::LinkedList()>:
c001f0be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0c2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f0c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0cc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f0d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0d7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f0de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f0e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0ec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f0f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0f7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f0fe:	90                   	nop
c001f0ff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001f100 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001f100:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f104:	8b 00                	mov    eax,DWORD PTR [eax]
c001f106:	85 c0                	test   eax,eax
c001f108:	75 0e                	jne    c001f118 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f10a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f10e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f111:	85 c0                	test   eax,eax
c001f113:	75 03                	jne    c001f118 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f115:	b0 01                	mov    al,0x1
c001f117:	c3                   	ret    
c001f118:	b0 00                	mov    al,0x0
c001f11a:	90                   	nop
c001f11b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001f11c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001f11c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f120:	8b 00                	mov    eax,DWORD PTR [eax]
c001f122:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001f124 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001f124:	83 ec 0c             	sub    esp,0xc
c001f127:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f12b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f12d:	85 c0                	test   eax,eax
c001f12f:	75 17                	jne    c001f148 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001f131:	83 ec 0c             	sub    esp,0xc
c001f134:	68 c0 02 02 c0       	push   0xc00202c0
c001f139:	e8 33 1a ff ff       	call   c0010b71 <KePanic(char const*)>
c001f13e:	83 c4 10             	add    esp,0x10
c001f141:	e9 96 00 00 00       	jmp    c001f1dc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001f146:	66 90                	xchg   ax,ax
c001f148:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f14c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f14f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f152:	85 c0                	test   eax,eax
c001f154:	0f 95 c0             	setne  al
c001f157:	0f b6 c0             	movzx  eax,al
c001f15a:	85 c0                	test   eax,eax
c001f15c:	74 12                	je     c001f170 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001f15e:	83 ec 0c             	sub    esp,0xc
c001f161:	68 0b 03 02 c0       	push   0xc002030b
c001f166:	e8 06 1a ff ff       	call   c0010b71 <KePanic(char const*)>
c001f16b:	83 c4 10             	add    esp,0x10
c001f16e:	66 90                	xchg   ax,ax
c001f170:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f174:	8b 00                	mov    eax,DWORD PTR [eax]
c001f176:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f179:	85 c0                	test   eax,eax
c001f17b:	0f 94 c0             	sete   al
c001f17e:	0f b6 c0             	movzx  eax,al
c001f181:	85 c0                	test   eax,eax
c001f183:	74 33                	je     c001f1b8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001f185:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f189:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f18f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f193:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f19a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f19e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f1a1:	83 f8 01             	cmp    eax,0x1
c001f1a4:	74 22                	je     c001f1c8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f1a6:	83 ec 0c             	sub    esp,0xc
c001f1a9:	68 e4 02 02 c0       	push   0xc00202e4
c001f1ae:	e8 be 19 ff ff       	call   c0010b71 <KePanic(char const*)>
c001f1b3:	83 c4 10             	add    esp,0x10
c001f1b6:	eb 10                	jmp    c001f1c8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f1b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1bc:	8b 00                	mov    eax,DWORD PTR [eax]
c001f1be:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001f1c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1c5:	89 10                	mov    DWORD PTR [eax],edx
c001f1c7:	90                   	nop
c001f1c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1cc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f1cf:	8d 50 ff             	lea    edx,[eax-0x1]
c001f1d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1d6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f1d9:	8d 76 00             	lea    esi,[esi+0x0]
c001f1dc:	83 c4 0c             	add    esp,0xc
c001f1df:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001f1e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001f1e0:	83 ec 0c             	sub    esp,0xc
c001f1e3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f1e8:	75 12                	jne    c001f1fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001f1ea:	83 ec 0c             	sub    esp,0xc
c001f1ed:	68 88 02 02 c0       	push   0xc0020288
c001f1f2:	e8 7a 19 ff ff       	call   c0010b71 <KePanic(char const*)>
c001f1f7:	83 c4 10             	add    esp,0x10
c001f1fa:	66 90                	xchg   ax,ax
c001f1fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f200:	8b 00                	mov    eax,DWORD PTR [eax]
c001f202:	85 c0                	test   eax,eax
c001f204:	74 36                	je     c001f23c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f206:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f20a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f20d:	85 c0                	test   eax,eax
c001f20f:	74 2b                	je     c001f23c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f211:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f215:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f218:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f21c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001f21f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f223:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f227:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f22a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f22e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f231:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f238:	eb 6a                	jmp    c001f2a4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f23a:	66 90                	xchg   ax,ax
c001f23c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f240:	8b 00                	mov    eax,DWORD PTR [eax]
c001f242:	85 c0                	test   eax,eax
c001f244:	75 4e                	jne    c001f294 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f246:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f24a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f24d:	85 c0                	test   eax,eax
c001f24f:	75 43                	jne    c001f294 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f251:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f255:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f259:	89 10                	mov    DWORD PTR [eax],edx
c001f25b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f25f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f263:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f26a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f26d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f278:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f27b:	85 c0                	test   eax,eax
c001f27d:	74 25                	je     c001f2a4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f27f:	83 ec 0c             	sub    esp,0xc
c001f282:	68 aa 02 02 c0       	push   0xc00202aa
c001f287:	e8 e5 18 ff ff       	call   c0010b71 <KePanic(char const*)>
c001f28c:	83 c4 10             	add    esp,0x10
c001f28f:	eb 13                	jmp    c001f2a4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f291:	8d 76 00             	lea    esi,[esi+0x0]
c001f294:	83 ec 0c             	sub    esp,0xc
c001f297:	68 b4 02 02 c0       	push   0xc00202b4
c001f29c:	e8 d0 18 ff ff       	call   c0010b71 <KePanic(char const*)>
c001f2a1:	83 c4 10             	add    esp,0x10
c001f2a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2a8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f2ab:	8d 50 01             	lea    edx,[eax+0x1]
c001f2ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2b2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f2b5:	90                   	nop
c001f2b6:	83 c4 0c             	add    esp,0xc
c001f2b9:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001f2bc <ACPI::~ACPI()>:
c001f2bc:	83 ec 0c             	sub    esp,0xc
c001f2bf:	ba 40 13 02 c0       	mov    edx,0xc0021340
c001f2c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2c8:	89 10                	mov    DWORD PTR [eax],edx
c001f2ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2ce:	83 ec 0c             	sub    esp,0xc
c001f2d1:	50                   	push   eax
c001f2d2:	e8 b3 cc fe ff       	call   c000bf8a <Device::~Device()>
c001f2d7:	83 c4 10             	add    esp,0x10
c001f2da:	90                   	nop
c001f2db:	83 c4 0c             	add    esp,0xc
c001f2de:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001f2e0 <ACPI::~ACPI()>:
c001f2e0:	83 ec 0c             	sub    esp,0xc
c001f2e3:	83 ec 0c             	sub    esp,0xc
c001f2e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2ea:	e8 cd ff ff ff       	call   c001f2bc <ACPI::~ACPI()>
c001f2ef:	83 c4 10             	add    esp,0x10
c001f2f2:	83 ec 08             	sub    esp,0x8
c001f2f5:	68 64 12 00 00       	push   0x1264
c001f2fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2fe:	e8 fd b4 fe ff       	call   c000a800 <operator delete(void*, unsigned long)>
c001f303:	83 c4 10             	add    esp,0x10
c001f306:	83 c4 0c             	add    esp,0xc
c001f309:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001f30c <LinkedList<Device>::~LinkedList()>:
c001f30c:	90                   	nop
c001f30d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001f310 <LinkedList<Device>::isEmpty()>:
c001f310:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f314:	8b 00                	mov    eax,DWORD PTR [eax]
c001f316:	85 c0                	test   eax,eax
c001f318:	75 0e                	jne    c001f328 <LinkedList<Device>::isEmpty()+0x18>
c001f31a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f31e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f321:	85 c0                	test   eax,eax
c001f323:	75 03                	jne    c001f328 <LinkedList<Device>::isEmpty()+0x18>
c001f325:	b0 01                	mov    al,0x1
c001f327:	c3                   	ret    
c001f328:	b0 00                	mov    al,0x0
c001f32a:	90                   	nop
c001f32b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001f32c <LinkedList<Device>::getFirstElement()>:
c001f32c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f330:	8b 00                	mov    eax,DWORD PTR [eax]
c001f332:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001f334 <LinkedList<Device>::removeFirst()>:
c001f334:	83 ec 0c             	sub    esp,0xc
c001f337:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f33b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f33d:	85 c0                	test   eax,eax
c001f33f:	75 17                	jne    c001f358 <LinkedList<Device>::removeFirst()+0x24>
c001f341:	83 ec 0c             	sub    esp,0xc
c001f344:	68 c0 02 02 c0       	push   0xc00202c0
c001f349:	e8 23 18 ff ff       	call   c0010b71 <KePanic(char const*)>
c001f34e:	83 c4 10             	add    esp,0x10
c001f351:	e9 92 00 00 00       	jmp    c001f3e8 <LinkedList<Device>::removeFirst()+0xb4>
c001f356:	66 90                	xchg   ax,ax
c001f358:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f35c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f35f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001f365:	85 c0                	test   eax,eax
c001f367:	74 13                	je     c001f37c <LinkedList<Device>::removeFirst()+0x48>
c001f369:	83 ec 0c             	sub    esp,0xc
c001f36c:	68 0b 03 02 c0       	push   0xc002030b
c001f371:	e8 fb 17 ff ff       	call   c0010b71 <KePanic(char const*)>
c001f376:	83 c4 10             	add    esp,0x10
c001f379:	8d 76 00             	lea    esi,[esi+0x0]
c001f37c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f380:	8b 00                	mov    eax,DWORD PTR [eax]
c001f382:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001f388:	85 c0                	test   eax,eax
c001f38a:	75 34                	jne    c001f3c0 <LinkedList<Device>::removeFirst()+0x8c>
c001f38c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f390:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f396:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f39a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f3a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3a5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f3a8:	83 f8 01             	cmp    eax,0x1
c001f3ab:	74 27                	je     c001f3d4 <LinkedList<Device>::removeFirst()+0xa0>
c001f3ad:	83 ec 0c             	sub    esp,0xc
c001f3b0:	68 e4 02 02 c0       	push   0xc00202e4
c001f3b5:	e8 b7 17 ff ff       	call   c0010b71 <KePanic(char const*)>
c001f3ba:	83 c4 10             	add    esp,0x10
c001f3bd:	eb 15                	jmp    c001f3d4 <LinkedList<Device>::removeFirst()+0xa0>
c001f3bf:	90                   	nop
c001f3c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3c4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f3c6:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001f3cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3d0:	89 10                	mov    DWORD PTR [eax],edx
c001f3d2:	66 90                	xchg   ax,ax
c001f3d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3d8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f3db:	8d 50 ff             	lea    edx,[eax-0x1]
c001f3de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3e2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f3e5:	8d 76 00             	lea    esi,[esi+0x0]
c001f3e8:	83 c4 0c             	add    esp,0xc
c001f3eb:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001f3ec <CPU::~CPU()>:
c001f3ec:	83 ec 0c             	sub    esp,0xc
c001f3ef:	ba e8 14 02 c0       	mov    edx,0xc00214e8
c001f3f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3f8:	89 10                	mov    DWORD PTR [eax],edx
c001f3fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3fe:	83 ec 0c             	sub    esp,0xc
c001f401:	50                   	push   eax
c001f402:	e8 83 cb fe ff       	call   c000bf8a <Device::~Device()>
c001f407:	83 c4 10             	add    esp,0x10
c001f40a:	90                   	nop
c001f40b:	83 c4 0c             	add    esp,0xc
c001f40e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001f410 <CPU::~CPU()>:
c001f410:	83 ec 0c             	sub    esp,0xc
c001f413:	83 ec 0c             	sub    esp,0xc
c001f416:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f41a:	e8 cd ff ff ff       	call   c001f3ec <CPU::~CPU()>
c001f41f:	83 c4 10             	add    esp,0x10
c001f422:	83 ec 08             	sub    esp,0x8
c001f425:	68 94 11 00 00       	push   0x1194
c001f42a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f42e:	e8 cd b3 fe ff       	call   c000a800 <operator delete(void*, unsigned long)>
c001f433:	83 c4 10             	add    esp,0x10
c001f436:	83 c4 0c             	add    esp,0xc
c001f439:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001f43c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001f43c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f440:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f443:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001f444 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001f444:	90                   	nop
c001f445:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001f448 <ThreadControlBlock::ThreadControlBlock()>:
c001f448:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f44c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f453:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f457:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001f45e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f462:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001f469:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f46d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001f474:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f478:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001f47f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f483:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001f487:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f48b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001f48f:	90                   	nop
c001f490:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001f494 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001f494:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f498:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f49e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4a2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f4a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4ad:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f4b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4b8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f4be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4c2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f4c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4cd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f4d4:	90                   	nop
c001f4d5:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001f4d6 <PCI::~PCI()>:
c001f4d6:	83 ec 0c             	sub    esp,0xc
c001f4d9:	ba 88 23 02 c0       	mov    edx,0xc0022388
c001f4de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4e2:	89 10                	mov    DWORD PTR [eax],edx
c001f4e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4e8:	83 ec 0c             	sub    esp,0xc
c001f4eb:	50                   	push   eax
c001f4ec:	e8 2b c5 fe ff       	call   c000ba1c <Bus::~Bus()>
c001f4f1:	83 c4 10             	add    esp,0x10
c001f4f4:	90                   	nop
c001f4f5:	83 c4 0c             	add    esp,0xc
c001f4f8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001f4fa <PCI::~PCI()>:
c001f4fa:	83 ec 0c             	sub    esp,0xc
c001f4fd:	83 ec 0c             	sub    esp,0xc
c001f500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f504:	e8 cd ff ff ff       	call   c001f4d6 <PCI::~PCI()>
c001f509:	83 c4 10             	add    esp,0x10
c001f50c:	83 ec 08             	sub    esp,0x8
c001f50f:	68 5c 01 00 00       	push   0x15c
c001f514:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f518:	e8 e3 b2 fe ff       	call   c000a800 <operator delete(void*, unsigned long)>
c001f51d:	83 c4 10             	add    esp,0x10
c001f520:	83 c4 0c             	add    esp,0xc
c001f523:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001f524 <IDE::~IDE()>:
c001f524:	83 ec 0c             	sub    esp,0xc
c001f527:	ba 3c 24 02 c0       	mov    edx,0xc002243c
c001f52c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f530:	89 10                	mov    DWORD PTR [eax],edx
c001f532:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f536:	83 ec 0c             	sub    esp,0xc
c001f539:	50                   	push   eax
c001f53a:	e8 c5 ce fe ff       	call   c000c404 <HardDiskController::~HardDiskController()>
c001f53f:	83 c4 10             	add    esp,0x10
c001f542:	90                   	nop
c001f543:	83 c4 0c             	add    esp,0xc
c001f546:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001f548 <IDE::~IDE()>:
c001f548:	83 ec 0c             	sub    esp,0xc
c001f54b:	83 ec 0c             	sub    esp,0xc
c001f54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f552:	e8 cd ff ff ff       	call   c001f524 <IDE::~IDE()>
c001f557:	83 c4 10             	add    esp,0x10
c001f55a:	83 ec 08             	sub    esp,0x8
c001f55d:	68 70 02 00 00       	push   0x270
c001f562:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f566:	e8 95 b2 fe ff       	call   c000a800 <operator delete(void*, unsigned long)>
c001f56b:	83 c4 10             	add    esp,0x10
c001f56e:	83 c4 0c             	add    esp,0xc
c001f571:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001f572 <SATABus::~SATABus()>:
c001f572:	83 ec 0c             	sub    esp,0xc
c001f575:	ba 8c 24 02 c0       	mov    edx,0xc002248c
c001f57a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f57e:	89 10                	mov    DWORD PTR [eax],edx
c001f580:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f584:	83 ec 0c             	sub    esp,0xc
c001f587:	50                   	push   eax
c001f588:	e8 77 ce fe ff       	call   c000c404 <HardDiskController::~HardDiskController()>
c001f58d:	83 c4 10             	add    esp,0x10
c001f590:	90                   	nop
c001f591:	83 c4 0c             	add    esp,0xc
c001f594:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001f596 <SATABus::~SATABus()>:
c001f596:	83 ec 0c             	sub    esp,0xc
c001f599:	83 ec 0c             	sub    esp,0xc
c001f59c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f5a0:	e8 cd ff ff ff       	call   c001f572 <SATABus::~SATABus()>
c001f5a5:	83 c4 10             	add    esp,0x10
c001f5a8:	83 ec 08             	sub    esp,0x8
c001f5ab:	68 64 01 00 00       	push   0x164
c001f5b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f5b4:	e8 47 b2 fe ff       	call   c000a800 <operator delete(void*, unsigned long)>
c001f5b9:	83 c4 10             	add    esp,0x10
c001f5bc:	83 c4 0c             	add    esp,0xc
c001f5bf:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001f5c0 <ATA::~ATA()>:
c001f5c0:	83 ec 0c             	sub    esp,0xc
c001f5c3:	ba cc 24 02 c0       	mov    edx,0xc00224cc
c001f5c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5cc:	89 10                	mov    DWORD PTR [eax],edx
c001f5ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5d2:	83 ec 0c             	sub    esp,0xc
c001f5d5:	50                   	push   eax
c001f5d6:	e8 0b cf fe ff       	call   c000c4e6 <PhysicalDisk::~PhysicalDisk()>
c001f5db:	83 c4 10             	add    esp,0x10
c001f5de:	90                   	nop
c001f5df:	83 c4 0c             	add    esp,0xc
c001f5e2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001f5e4 <ATA::~ATA()>:
c001f5e4:	83 ec 0c             	sub    esp,0xc
c001f5e7:	83 ec 0c             	sub    esp,0xc
c001f5ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f5ee:	e8 cd ff ff ff       	call   c001f5c0 <ATA::~ATA()>
c001f5f3:	83 c4 10             	add    esp,0x10
c001f5f6:	83 ec 08             	sub    esp,0x8
c001f5f9:	68 7c 01 00 00       	push   0x17c
c001f5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f602:	e8 f9 b1 fe ff       	call   c000a800 <operator delete(void*, unsigned long)>
c001f607:	83 c4 10             	add    esp,0x10
c001f60a:	83 c4 0c             	add    esp,0xc
c001f60d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001f60e <ATAPI::~ATAPI()>:
c001f60e:	83 ec 0c             	sub    esp,0xc
c001f611:	ba 14 25 02 c0       	mov    edx,0xc0022514
c001f616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f61a:	89 10                	mov    DWORD PTR [eax],edx
c001f61c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f620:	83 ec 0c             	sub    esp,0xc
c001f623:	50                   	push   eax
c001f624:	e8 bd ce fe ff       	call   c000c4e6 <PhysicalDisk::~PhysicalDisk()>
c001f629:	83 c4 10             	add    esp,0x10
c001f62c:	90                   	nop
c001f62d:	83 c4 0c             	add    esp,0xc
c001f630:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001f632 <ATAPI::~ATAPI()>:
c001f632:	83 ec 0c             	sub    esp,0xc
c001f635:	83 ec 0c             	sub    esp,0xc
c001f638:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f63c:	e8 cd ff ff ff       	call   c001f60e <ATAPI::~ATAPI()>
c001f641:	83 c4 10             	add    esp,0x10
c001f644:	83 ec 08             	sub    esp,0x8
c001f647:	68 84 01 00 00       	push   0x184
c001f64c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f650:	e8 ab b1 fe ff       	call   c000a800 <operator delete(void*, unsigned long)>
c001f655:	83 c4 10             	add    esp,0x10
c001f658:	83 c4 0c             	add    esp,0xc
c001f65b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001f65c <SATA::~SATA()>:
c001f65c:	83 ec 0c             	sub    esp,0xc
c001f65f:	ba c8 25 02 c0       	mov    edx,0xc00225c8
c001f664:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f668:	89 10                	mov    DWORD PTR [eax],edx
c001f66a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f66e:	83 ec 0c             	sub    esp,0xc
c001f671:	50                   	push   eax
c001f672:	e8 6f ce fe ff       	call   c000c4e6 <PhysicalDisk::~PhysicalDisk()>
c001f677:	83 c4 10             	add    esp,0x10
c001f67a:	90                   	nop
c001f67b:	83 c4 0c             	add    esp,0xc
c001f67e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001f680 <SATA::~SATA()>:
c001f680:	83 ec 0c             	sub    esp,0xc
c001f683:	83 ec 0c             	sub    esp,0xc
c001f686:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f68a:	e8 cd ff ff ff       	call   c001f65c <SATA::~SATA()>
c001f68f:	83 c4 10             	add    esp,0x10
c001f692:	83 ec 08             	sub    esp,0x8
c001f695:	68 7c 01 00 00       	push   0x17c
c001f69a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f69e:	e8 5d b1 fe ff       	call   c000a800 <operator delete(void*, unsigned long)>
c001f6a3:	83 c4 10             	add    esp,0x10
c001f6a6:	83 c4 0c             	add    esp,0xc
c001f6a9:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001f6aa <SATAPI::~SATAPI()>:
c001f6aa:	83 ec 0c             	sub    esp,0xc
c001f6ad:	ba ec 26 02 c0       	mov    edx,0xc00226ec
c001f6b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6b6:	89 10                	mov    DWORD PTR [eax],edx
c001f6b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6bc:	83 ec 0c             	sub    esp,0xc
c001f6bf:	50                   	push   eax
c001f6c0:	e8 21 ce fe ff       	call   c000c4e6 <PhysicalDisk::~PhysicalDisk()>
c001f6c5:	83 c4 10             	add    esp,0x10
c001f6c8:	90                   	nop
c001f6c9:	83 c4 0c             	add    esp,0xc
c001f6cc:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001f6ce <SATAPI::~SATAPI()>:
c001f6ce:	83 ec 0c             	sub    esp,0xc
c001f6d1:	83 ec 0c             	sub    esp,0xc
c001f6d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f6d8:	e8 cd ff ff ff       	call   c001f6aa <SATAPI::~SATAPI()>
c001f6dd:	83 c4 10             	add    esp,0x10
c001f6e0:	83 ec 08             	sub    esp,0x8
c001f6e3:	68 84 01 00 00       	push   0x184
c001f6e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f6ec:	e8 0f b1 fe ff       	call   c000a800 <operator delete(void*, unsigned long)>
c001f6f1:	83 c4 10             	add    esp,0x10
c001f6f4:	83 c4 0c             	add    esp,0xc
c001f6f7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001f6f8 <IOAPIC::~IOAPIC()>:
c001f6f8:	83 ec 0c             	sub    esp,0xc
c001f6fb:	ba 2c 27 02 c0       	mov    edx,0xc002272c
c001f700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f704:	89 10                	mov    DWORD PTR [eax],edx
c001f706:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f70a:	83 ec 0c             	sub    esp,0xc
c001f70d:	50                   	push   eax
c001f70e:	e8 77 c8 fe ff       	call   c000bf8a <Device::~Device()>
c001f713:	83 c4 10             	add    esp,0x10
c001f716:	90                   	nop
c001f717:	83 c4 0c             	add    esp,0xc
c001f71a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001f71c <IOAPIC::~IOAPIC()>:
c001f71c:	83 ec 0c             	sub    esp,0xc
c001f71f:	83 ec 0c             	sub    esp,0xc
c001f722:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f726:	e8 cd ff ff ff       	call   c001f6f8 <IOAPIC::~IOAPIC()>
c001f72b:	83 c4 10             	add    esp,0x10
c001f72e:	83 ec 08             	sub    esp,0x8
c001f731:	68 68 01 00 00       	push   0x168
c001f736:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f73a:	e8 c1 b0 fe ff       	call   c000a800 <operator delete(void*, unsigned long)>
c001f73f:	83 c4 10             	add    esp,0x10
c001f742:	83 c4 0c             	add    esp,0xc
c001f745:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001f748 <APICTimer::~APICTimer()>:
c001f748:	83 ec 0c             	sub    esp,0xc
c001f74b:	ba 74 27 02 c0       	mov    edx,0xc0022774
c001f750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f754:	89 10                	mov    DWORD PTR [eax],edx
c001f756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f75a:	83 ec 0c             	sub    esp,0xc
c001f75d:	50                   	push   eax
c001f75e:	e8 fd e2 fe ff       	call   c000da60 <Timer::~Timer()>
c001f763:	83 c4 10             	add    esp,0x10
c001f766:	90                   	nop
c001f767:	83 c4 0c             	add    esp,0xc
c001f76a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001f76c <APICTimer::~APICTimer()>:
c001f76c:	83 ec 0c             	sub    esp,0xc
c001f76f:	83 ec 0c             	sub    esp,0xc
c001f772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f776:	e8 cd ff ff ff       	call   c001f748 <APICTimer::~APICTimer()>
c001f77b:	83 c4 10             	add    esp,0x10
c001f77e:	83 ec 08             	sub    esp,0x8
c001f781:	68 60 01 00 00       	push   0x160
c001f786:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f78a:	e8 71 b0 fe ff       	call   c000a800 <operator delete(void*, unsigned long)>
c001f78f:	83 c4 10             	add    esp,0x10
c001f792:	83 c4 0c             	add    esp,0xc
c001f795:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001f798 <PIT::~PIT()>:
c001f798:	83 ec 0c             	sub    esp,0xc
c001f79b:	ba c4 27 02 c0       	mov    edx,0xc00227c4
c001f7a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7a4:	89 10                	mov    DWORD PTR [eax],edx
c001f7a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7aa:	83 ec 0c             	sub    esp,0xc
c001f7ad:	50                   	push   eax
c001f7ae:	e8 ad e2 fe ff       	call   c000da60 <Timer::~Timer()>
c001f7b3:	83 c4 10             	add    esp,0x10
c001f7b6:	90                   	nop
c001f7b7:	83 c4 0c             	add    esp,0xc
c001f7ba:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001f7bc <PIT::~PIT()>:
c001f7bc:	83 ec 0c             	sub    esp,0xc
c001f7bf:	83 ec 0c             	sub    esp,0xc
c001f7c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7c6:	e8 cd ff ff ff       	call   c001f798 <PIT::~PIT()>
c001f7cb:	83 c4 10             	add    esp,0x10
c001f7ce:	83 ec 08             	sub    esp,0x8
c001f7d1:	68 5c 01 00 00       	push   0x15c
c001f7d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7da:	e8 21 b0 fe ff       	call   c000a800 <operator delete(void*, unsigned long)>
c001f7df:	83 c4 10             	add    esp,0x10
c001f7e2:	83 c4 0c             	add    esp,0xc
c001f7e5:	c3                   	ret    

Disassembly of section userkernel:

c0024000 <KiDefaultSignalHandlerAbort(int)>:
c0024000:	57                   	push   edi
c0024001:	b9 07 00 00 00       	mov    ecx,0x7
c0024006:	56                   	push   esi
c0024007:	be d9 15 02 c0       	mov    esi,0xc00215d9
c002400c:	83 ec 24             	sub    esp,0x24
c002400f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024013:	fc                   	cld    
c0024014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002401a:	50                   	push   eax
c002401b:	6a 00                	push   0x0
c002401d:	6a 38                	push   0x38
c002401f:	6a 01                	push   0x1
c0024021:	e8 2c 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0024026:	83 c4 34             	add    esp,0x34
c0024029:	5e                   	pop    esi
c002402a:	5f                   	pop    edi
c002402b:	c3                   	ret    

c002402c <KiDefaultSignalHandlerTerminate(int)>:
c002402c:	57                   	push   edi
c002402d:	b9 08 00 00 00       	mov    ecx,0x8
c0024032:	56                   	push   esi
c0024033:	be f5 15 02 c0       	mov    esi,0xc00215f5
c0024038:	83 ec 24             	sub    esp,0x24
c002403b:	89 e7                	mov    edi,esp
c002403d:	fc                   	cld    
c002403e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024040:	54                   	push   esp
c0024041:	6a 00                	push   0x0
c0024043:	6a 37                	push   0x37
c0024045:	6a 01                	push   0x1
c0024047:	e8 06 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002404c:	83 c4 34             	add    esp,0x34
c002404f:	5e                   	pop    esi
c0024050:	5f                   	pop    edi
c0024051:	c3                   	ret    

c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0024052:	53                   	push   ebx
c0024053:	83 ec 10             	sub    esp,0x10
c0024056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002405a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002405e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024066:	cd 60                	int    0x60
c0024068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002406c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0024074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024078:	83 c4 10             	add    esp,0x10
c002407b:	5b                   	pop    ebx
c002407c:	c3                   	ret    

Disassembly of section align_previous:

c0025000 <DO_NOT_DELETE()>:
c0025000:	c3                   	ret    
