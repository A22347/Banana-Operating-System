
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 0d 7b 00 00       	call   c0007b2d <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 64 42 02 c0       	mov    eax,0xc0024264
c0000025:	3d 64 42 02 c0       	cmp    eax,0xc0024264
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 64 42 02 c0       	push   0xc0024264
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 64 42 02 c0       	mov    eax,0xc0024264
c0000051:	2d 64 42 02 c0       	sub    eax,0xc0024264
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 64 42 02 c0       	push   0xc0024264
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 60 02 c0 00 	cmp    BYTE PTR ds:0xc00260c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 2c 04 02 c0       	mov    ebx,0xc002042c
c0000097:	81 eb 28 04 02 c0    	sub    ebx,0xc0020428
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 28 04 02 c0       	mov    esi,0xc0020428
c00000a6:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 60 02 c0       	mov    ds:0xc00260c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 64 42 02 c0       	push   0xc0024264
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 60 02 c0 01 	mov    BYTE PTR ds:0xc00260c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 60 02 c0       	push   0xc00260c8
c0000108:	68 64 42 02 c0       	push   0xc0024264
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 2f 56 01 00       	call   c00158dc <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 fc a3 00 00       	call   c000a6c1 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 0d 56 01 00       	call   c00158dc <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 1a 5b 01 00       	call   c0015e08 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 b5 61 01 00       	call   c00164ac <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 6e 02 c0 	lgdtd  ds:0xc0026ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 47 12 01 00       	jmp    c00115c6 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 60 02 c0       	mov    ds:0xc00260e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 60 02 c0    	mov    DWORD PTR ds:0xc00260e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 60 02 c0    	mov    ebx,DWORD PTR ds:0xc00260e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 40 04 02 c0 02 	test   BYTE PTR [edx-0x3ffdfbc0],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 40 04 02 c0 01 	test   BYTE PTR [edx-0x3ffdfbc0],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 40 04 02 c0 08 	test   BYTE PTR [edx-0x3ffdfbc0],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 40 04 02 c0 08 	test   BYTE PTR [edx-0x3ffdfbc0],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 40 04 02 c0 04 	test   BYTE PTR [ecx-0x3ffdfbc0],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 40 04 02 c0 01 	test   BYTE PTR [edx-0x3ffdfbc0],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d8d:	85 db                	test   ebx,ebx
c0000d8f:	0f 84 e2 00 00 00    	je     c0000e77 <dlfree+0xf1>
c0000d95:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d98:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d9b:	8b 0d 00 61 02 c0    	mov    ecx,DWORD PTR ds:0xc0026100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c1                	cmp    ecx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 c9 03             	or     ecx,0x3
c0000db0:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 0c 85 04 61 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9efc]
c0000dc0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dc2:	89 14 85 04 61 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9efc],edx
c0000dc9:	e9 a9 00 00 00       	jmp    c0000e77 <dlfree+0xf1>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 c9 01             	or     ecx,0x1
c0000ddd:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000de3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000de6:	83 e1 fc             	and    ecx,0xfffffffc
c0000de9:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000df2:	29 da                	sub    edx,ebx
c0000df4:	01 d8                	add    eax,ebx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dfc:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dff:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e02:	39 35 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e0e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e11:	80 e3 01             	and    bl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 c8                	add    eax,ecx
c0000e1b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e1e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e21:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e24:	8b 0d 3c 61 02 c0    	mov    ecx,DWORD PTR ds:0xc002613c
c0000e2a:	c7 42 0c 34 61 02 c0 	mov    DWORD PTR [edx+0xc],0xc0026134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 c8                	add    eax,ecx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 16                	jbe    c0000e77 <dlfree+0xf1>
c0000e61:	f6 05 00 61 02 c0 02 	test   BYTE PTR ds:0xc0026100,0x2
c0000e68:	74 0d                	je     c0000e77 <dlfree+0xf1>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	5b                   	pop    ebx
c0000e78:	5e                   	pop    esi
c0000e79:	5f                   	pop    edi
c0000e7a:	c3                   	ret    

c0000e7b <sYSMALLOc>:
c0000e7b:	55                   	push   ebp
c0000e7c:	57                   	push   edi
c0000e7d:	56                   	push   esi
c0000e7e:	53                   	push   ebx
c0000e7f:	89 d3                	mov    ebx,edx
c0000e81:	83 ec 2c             	sub    esp,0x2c
c0000e84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000e88:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000e8e:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e91:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000e94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e98:	74 1f                	je     c0000eb9 <sYSMALLOc+0x3e>
c0000e9a:	89 d0                	mov    eax,edx
c0000e9c:	e8 fe fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ea1:	83 ec 0c             	sub    esp,0xc
c0000ea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000ea8:	83 e8 07             	sub    eax,0x7
c0000eab:	50                   	push   eax
c0000eac:	e8 33 02 00 00       	call   c00010e4 <dlmalloc>
c0000eb1:	83 c4 10             	add    esp,0x10
c0000eb4:	e9 23 02 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000eb9:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000ec0:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ec6:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000ec9:	83 c0 10             	add    eax,0x10
c0000ecc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	83 e5 fc             	and    ebp,0xfffffffc
c0000ed5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000edc:	74 02                	je     c0000ee0 <sYSMALLOc+0x65>
c0000ede:	29 ea                	sub    edx,ebp
c0000ee0:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000ee4:	f7 d9                	neg    ecx
c0000ee6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000eea:	21 ca                	and    edx,ecx
c0000eec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000ef0:	7f 07                	jg     c0000ef9 <sYSMALLOc+0x7e>
c0000ef2:	31 c0                	xor    eax,eax
c0000ef4:	e9 e3 01 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000ef9:	83 ec 0c             	sub    esp,0xc
c0000efc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f00:	e8 a3 6a 00 00       	call   c00079a8 <sbrk>
c0000f05:	83 c4 10             	add    esp,0x10
c0000f08:	83 f8 ff             	cmp    eax,0xffffffff
c0000f0b:	89 c6                	mov    esi,eax
c0000f0d:	74 e3                	je     c0000ef2 <sYSMALLOc+0x77>
c0000f0f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f13:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000f16:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000f1c:	39 c2                	cmp    edx,eax
c0000f1e:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f24:	75 11                	jne    c0000f37 <sYSMALLOc+0xbc>
c0000f26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2a:	01 e8                	add    eax,ebp
c0000f2c:	83 c8 01             	or     eax,0x1
c0000f2f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f32:	e9 93 00 00 00       	jmp    c0000fca <sYSMALLOc+0x14f>
c0000f37:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000f3d:	a8 01                	test   al,0x1
c0000f3f:	0f 84 73 01 00 00    	je     c00010b8 <sYSMALLOc+0x23d>
c0000f45:	85 ed                	test   ebp,ebp
c0000f47:	74 12                	je     c0000f5b <sYSMALLOc+0xe0>
c0000f49:	39 f2                	cmp    edx,esi
c0000f4b:	76 0e                	jbe    c0000f5b <sYSMALLOc+0xe0>
c0000f4d:	83 e0 fe             	and    eax,0xfffffffe
c0000f50:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000f56:	e9 5d 01 00 00       	jmp    c00010b8 <sYSMALLOc+0x23d>
c0000f5b:	85 ed                	test   ebp,ebp
c0000f5d:	74 0c                	je     c0000f6b <sYSMALLOc+0xf0>
c0000f5f:	89 f0                	mov    eax,esi
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	01 c1                	add    ecx,eax
c0000f65:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f6b:	89 f2                	mov    edx,esi
c0000f6d:	83 e2 07             	and    edx,0x7
c0000f70:	0f 84 b1 00 00 00    	je     c0001027 <sYSMALLOc+0x1ac>
c0000f76:	b8 08 00 00 00       	mov    eax,0x8
c0000f7b:	29 d0                	sub    eax,edx
c0000f7d:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000f80:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000f84:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f88:	01 e8                	add    eax,ebp
c0000f8a:	83 ec 0c             	sub    esp,0xc
c0000f8d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000f90:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000f94:	01 f2                	add    edx,esi
c0000f96:	29 d0                	sub    eax,edx
c0000f98:	01 d1                	add    ecx,edx
c0000f9a:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000f9e:	01 c1                	add    ecx,eax
c0000fa0:	51                   	push   ecx
c0000fa1:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000fa5:	e8 fe 69 00 00       	call   c00079a8 <sbrk>
c0000faa:	83 c4 10             	add    esp,0x10
c0000fad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000fb1:	83 f8 ff             	cmp    eax,0xffffffff
c0000fb4:	75 7c                	jne    c0001032 <sYSMALLOc+0x1b7>
c0000fb6:	83 ec 0c             	sub    esp,0xc
c0000fb9:	6a 00                	push   0x0
c0000fbb:	e8 e8 69 00 00       	call   c00079a8 <sbrk>
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	31 c9                	xor    ecx,ecx
c0000fc5:	83 f8 ff             	cmp    eax,0xffffffff
c0000fc8:	75 7e                	jne    c0001048 <sYSMALLOc+0x1cd>
c0000fca:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fd0:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fd6:	73 06                	jae    c0000fde <sYSMALLOc+0x163>
c0000fd8:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fde:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fe4:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fea:	73 06                	jae    c0000ff2 <sYSMALLOc+0x177>
c0000fec:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ff2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ff5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff8:	83 e2 fc             	and    edx,0xfffffffc
c0000ffb:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000fff:	0f 87 ed fe ff ff    	ja     c0000ef2 <sYSMALLOc+0x77>
c0001005:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0001009:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000100c:	29 fa                	sub    edx,edi
c000100e:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001011:	89 fb                	mov    ebx,edi
c0001013:	83 ca 01             	or     edx,0x1
c0001016:	83 cb 01             	or     ebx,0x1
c0001019:	83 c0 08             	add    eax,0x8
c000101c:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000101f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001022:	e9 b5 00 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0001027:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000102b:	31 c0                	xor    eax,eax
c000102d:	e9 52 ff ff ff       	jmp    c0000f84 <sYSMALLOc+0x109>
c0001032:	39 c6                	cmp    esi,eax
c0001034:	76 12                	jbe    c0001048 <sYSMALLOc+0x1cd>
c0001036:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000103a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001041:	01 f0                	add    eax,esi
c0001043:	e9 7b ff ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c0001048:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000104c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000104f:	29 f0                	sub    eax,esi
c0001051:	01 c8                	add    eax,ecx
c0001053:	83 c8 01             	or     eax,0x1
c0001056:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0001059:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c000105f:	85 ed                	test   ebp,ebp
c0001061:	0f 84 63 ff ff ff    	je     c0000fca <sYSMALLOc+0x14f>
c0001067:	8d 45 f4             	lea    eax,[ebp-0xc]
c000106a:	83 e0 f8             	and    eax,0xfffffff8
c000106d:	89 c2                	mov    edx,eax
c000106f:	83 ca 01             	or     edx,0x1
c0001072:	83 f8 0f             	cmp    eax,0xf
c0001075:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001078:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001080:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001088:	0f 86 3c ff ff ff    	jbe    c0000fca <sYSMALLOc+0x14f>
c000108e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001094:	83 ec 0c             	sub    esp,0xc
c0001097:	83 c7 08             	add    edi,0x8
c000109a:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a4:	57                   	push   edi
c00010a5:	e8 dc fc ff ff       	call   c0000d86 <dlfree>
c00010aa:	83 c4 10             	add    esp,0x10
c00010ad:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b3:	e9 12 ff ff ff       	jmp    c0000fca <sYSMALLOc+0x14f>
c00010b8:	83 ec 0c             	sub    esp,0xc
c00010bb:	6a 00                	push   0x0
c00010bd:	e8 e6 68 00 00       	call   c00079a8 <sbrk>
c00010c2:	89 c2                	mov    edx,eax
c00010c4:	29 f2                	sub    edx,esi
c00010c6:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c00010ca:	83 c4 10             	add    esp,0x10
c00010cd:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010d3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00010d7:	e9 e7 fe ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c00010dc:	83 c4 2c             	add    esp,0x2c
c00010df:	5b                   	pop    ebx
c00010e0:	5e                   	pop    esi
c00010e1:	5f                   	pop    edi
c00010e2:	5d                   	pop    ebp
c00010e3:	c3                   	ret    

c00010e4 <dlmalloc>:
c00010e4:	55                   	push   ebp
c00010e5:	57                   	push   edi
c00010e6:	56                   	push   esi
c00010e7:	53                   	push   ebx
c00010e8:	83 ec 1c             	sub    esp,0x1c
c00010eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010ef:	83 f8 df             	cmp    eax,0xffffffdf
c00010f2:	0f 87 70 03 00 00    	ja     c0001468 <dlmalloc+0x384>
c00010f8:	83 c0 0b             	add    eax,0xb
c00010fb:	be 10 00 00 00       	mov    esi,0x10
c0001100:	83 f8 0f             	cmp    eax,0xf
c0001103:	76 05                	jbe    c000110a <dlmalloc+0x26>
c0001105:	83 e0 f8             	and    eax,0xfffffff8
c0001108:	89 c6                	mov    esi,eax
c000110a:	8b 3d 00 61 02 c0    	mov    edi,DWORD PTR ds:0xc0026100
c0001110:	f7 c7 01 00 00 00    	test   edi,0x1
c0001116:	75 17                	jne    c000112f <dlmalloc+0x4b>
c0001118:	85 ff                	test   edi,edi
c000111a:	0f 85 05 03 00 00    	jne    c0001425 <dlmalloc+0x341>
c0001120:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001125:	e8 75 fb ff ff       	call   c0000c9f <malloc_consolidate>
c000112a:	e9 f6 02 00 00       	jmp    c0001425 <dlmalloc+0x341>
c000112f:	39 f7                	cmp    edi,esi
c0001131:	72 1f                	jb     c0001152 <dlmalloc+0x6e>
c0001133:	89 f2                	mov    edx,esi
c0001135:	c1 ea 03             	shr    edx,0x3
c0001138:	83 ea 02             	sub    edx,0x2
c000113b:	8b 04 95 04 61 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9efc]
c0001142:	85 c0                	test   eax,eax
c0001144:	74 0c                	je     c0001152 <dlmalloc+0x6e>
c0001146:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001149:	89 0c 95 04 61 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9efc],ecx
c0001150:	eb 30                	jmp    c0001182 <dlmalloc+0x9e>
c0001152:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001158:	89 f0                	mov    eax,esi
c000115a:	77 2e                	ja     c000118a <dlmalloc+0xa6>
c000115c:	c1 e8 03             	shr    eax,0x3
c000115f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001163:	8d 14 c5 34 61 02 c0 	lea    edx,[eax*8-0x3ffd9ecc]
c000116a:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000116d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001170:	39 c3                	cmp    ebx,eax
c0001172:	74 2e                	je     c00011a2 <dlmalloc+0xbe>
c0001174:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001177:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000117c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000117f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001182:	83 c0 08             	add    eax,0x8
c0001185:	e9 e0 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c000118a:	e8 8c fa ff ff       	call   c0000c1b <largebin_index>
c000118f:	83 e7 02             	and    edi,0x2
c0001192:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001196:	74 0a                	je     c00011a2 <dlmalloc+0xbe>
c0001198:	b8 00 61 02 c0       	mov    eax,0xc0026100
c000119d:	e8 fd fa ff ff       	call   c0000c9f <malloc_consolidate>
c00011a2:	8d 46 10             	lea    eax,[esi+0x10]
c00011a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011a9:	8b 1d 40 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026140
c00011af:	81 fb 34 61 02 c0    	cmp    ebx,0xc0026134
c00011b5:	0f 84 13 01 00 00    	je     c00012ce <dlmalloc+0x1ea>
c00011bb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011be:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011c1:	83 e7 fc             	and    edi,0xfffffffc
c00011c4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011ca:	77 4c                	ja     c0001218 <dlmalloc+0x134>
c00011cc:	3d 34 61 02 c0       	cmp    eax,0xc0026134
c00011d1:	75 45                	jne    c0001218 <dlmalloc+0x134>
c00011d3:	39 1d 30 61 02 c0    	cmp    DWORD PTR ds:0xc0026130,ebx
c00011d9:	75 3d                	jne    c0001218 <dlmalloc+0x134>
c00011db:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011df:	73 37                	jae    c0001218 <dlmalloc+0x134>
c00011e1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011e4:	89 fa                	mov    edx,edi
c00011e6:	a3 3c 61 02 c0       	mov    ds:0xc002613c,eax
c00011eb:	29 f2                	sub    edx,esi
c00011ed:	83 ce 01             	or     esi,0x1
c00011f0:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c00011f5:	89 d1                	mov    ecx,edx
c00011f7:	a3 30 61 02 c0       	mov    ds:0xc0026130,eax
c00011fc:	83 c9 01             	or     ecx,0x1
c00011ff:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c0001206:	c7 40 0c 34 61 02 c0 	mov    DWORD PTR [eax+0xc],0xc0026134
c000120d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001210:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001213:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001216:	eb 15                	jmp    c000122d <dlmalloc+0x149>
c0001218:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c000121d:	39 fe                	cmp    esi,edi
c000121f:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c0001226:	75 0d                	jne    c0001235 <dlmalloc+0x151>
c0001228:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000122d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001230:	e9 35 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001235:	81 ff ff 00 00 00    	cmp    edi,0xff
c000123b:	89 f8                	mov    eax,edi
c000123d:	77 19                	ja     c0001258 <dlmalloc+0x174>
c000123f:	c1 e8 03             	shr    eax,0x3
c0001242:	8d 14 00             	lea    edx,[eax+eax*1]
c0001245:	83 c2 0d             	add    edx,0xd
c0001248:	8d 2c 95 f8 60 02 c0 	lea    ebp,[edx*4-0x3ffd9f08]
c000124f:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c0001256:	eb 46                	jmp    c000129e <dlmalloc+0x1ba>
c0001258:	e8 be f9 ff ff       	call   c0000c1b <largebin_index>
c000125d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001260:	83 c2 0d             	add    edx,0xd
c0001263:	8d 0c 95 00 61 02 c0 	lea    ecx,[edx*4-0x3ffd9f00]
c000126a:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c0001271:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001274:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001278:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000127c:	89 d5                	mov    ebp,edx
c000127e:	74 1e                	je     c000129e <dlmalloc+0x1ba>
c0001280:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001283:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001286:	77 12                	ja     c000129a <dlmalloc+0x1b6>
c0001288:	83 cf 01             	or     edi,0x1
c000128b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000128e:	76 05                	jbe    c0001295 <dlmalloc+0x1b1>
c0001290:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001293:	eb f6                	jmp    c000128b <dlmalloc+0x1a7>
c0001295:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001298:	eb 04                	jmp    c000129e <dlmalloc+0x1ba>
c000129a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000129e:	89 c7                	mov    edi,eax
c00012a0:	88 c1                	mov    cl,al
c00012a2:	c1 ff 05             	sar    edi,0x5
c00012a5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012a9:	bf 01 00 00 00       	mov    edi,0x1
c00012ae:	d3 e7                	shl    edi,cl
c00012b0:	89 f8                	mov    eax,edi
c00012b2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012b6:	09 04 bd 34 64 02 c0 	or     DWORD PTR [edi*4-0x3ffd9bcc],eax
c00012bd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012c0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012c3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012c6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012c9:	e9 db fe ff ff       	jmp    c00011a9 <dlmalloc+0xc5>
c00012ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012d4:	76 78                	jbe    c000134e <dlmalloc+0x26a>
c00012d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012da:	8d 04 c5 34 61 02 c0 	lea    eax,[eax*8-0x3ffd9ecc]
c00012e1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012e4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012e7:	39 ca                	cmp    edx,ecx
c00012e9:	74 63                	je     c000134e <dlmalloc+0x26a>
c00012eb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012ee:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012f1:	83 e3 fc             	and    ebx,0xfffffffc
c00012f4:	39 de                	cmp    esi,ebx
c00012f6:	77 52                	ja     c000134a <dlmalloc+0x266>
c00012f8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012fb:	89 df                	mov    edi,ebx
c00012fd:	01 d3                	add    ebx,edx
c00012ff:	29 f7                	sub    edi,esi
c0001301:	83 ff 0f             	cmp    edi,0xf
c0001304:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001307:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000130a:	8d 42 08             	lea    eax,[edx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x234>
c000130f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001313:	e9 52 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001318:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000131b:	83 ce 01             	or     esi,0x1
c000131e:	89 0d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,ecx
c0001324:	89 0d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,ecx
c000132a:	c7 41 08 34 61 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0026134
c0001331:	c7 41 0c 34 61 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0026134
c0001338:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000133b:	89 fa                	mov    edx,edi
c000133d:	83 ca 01             	or     edx,0x1
c0001340:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001343:	89 3b                	mov    DWORD PTR [ebx],edi
c0001345:	e9 20 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c000134a:	89 c2                	mov    edx,eax
c000134c:	eb 99                	jmp    c00012e7 <dlmalloc+0x203>
c000134e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001352:	b8 01 00 00 00       	mov    eax,0x1
c0001357:	41                   	inc    ecx
c0001358:	8d 14 cd 2c 61 02 c0 	lea    edx,[ecx*8-0x3ffd9ed4]
c000135f:	89 cb                	mov    ebx,ecx
c0001361:	c1 eb 05             	shr    ebx,0x5
c0001364:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c000136b:	d3 e0                	shl    eax,cl
c000136d:	39 f8                	cmp    eax,edi
c000136f:	77 04                	ja     c0001375 <dlmalloc+0x291>
c0001371:	85 c0                	test   eax,eax
c0001373:	75 26                	jne    c000139b <dlmalloc+0x2b7>
c0001375:	43                   	inc    ebx
c0001376:	83 fb 02             	cmp    ebx,0x2
c0001379:	0f 87 a6 00 00 00    	ja     c0001425 <dlmalloc+0x341>
c000137f:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c0001386:	85 ff                	test   edi,edi
c0001388:	74 eb                	je     c0001375 <dlmalloc+0x291>
c000138a:	89 d8                	mov    eax,ebx
c000138c:	c1 e0 06             	shl    eax,0x6
c000138f:	8d 14 85 2c 61 02 c0 	lea    edx,[eax*4-0x3ffd9ed4]
c0001396:	b8 01 00 00 00       	mov    eax,0x1
c000139b:	85 f8                	test   eax,edi
c000139d:	75 07                	jne    c00013a6 <dlmalloc+0x2c2>
c000139f:	83 c2 08             	add    edx,0x8
c00013a2:	01 c0                	add    eax,eax
c00013a4:	eb f5                	jmp    c000139b <dlmalloc+0x2b7>
c00013a6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013a9:	39 ca                	cmp    edx,ecx
c00013ab:	75 14                	jne    c00013c1 <dlmalloc+0x2dd>
c00013ad:	89 c1                	mov    ecx,eax
c00013af:	83 c2 08             	add    edx,0x8
c00013b2:	f7 d1                	not    ecx
c00013b4:	01 c0                	add    eax,eax
c00013b6:	21 cf                	and    edi,ecx
c00013b8:	89 3c 9d 34 64 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9bcc],edi
c00013bf:	eb ac                	jmp    c000136d <dlmalloc+0x289>
c00013c1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013c4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013c7:	83 e0 fc             	and    eax,0xfffffffc
c00013ca:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013cd:	89 c3                	mov    ebx,eax
c00013cf:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013d2:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013d5:	29 f3                	sub    ebx,esi
c00013d7:	8d 41 08             	lea    eax,[ecx+0x8]
c00013da:	83 fb 0f             	cmp    ebx,0xf
c00013dd:	77 09                	ja     c00013e8 <dlmalloc+0x304>
c00013df:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013e3:	e9 82 00 00 00       	jmp    c000146a <dlmalloc+0x386>
c00013e8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013f1:	89 3d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edi
c00013f7:	89 3d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,edi
c00013fd:	c7 47 08 34 61 02 c0 	mov    DWORD PTR [edi+0x8],0xc0026134
c0001404:	c7 47 0c 34 61 02 c0 	mov    DWORD PTR [edi+0xc],0xc0026134
c000140b:	77 06                	ja     c0001413 <dlmalloc+0x32f>
c000140d:	89 3d 30 61 02 c0    	mov    DWORD PTR ds:0xc0026130,edi
c0001413:	83 ce 01             	or     esi,0x1
c0001416:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001419:	89 d9                	mov    ecx,ebx
c000141b:	83 c9 01             	or     ecx,0x1
c000141e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001421:	89 1a                	mov    DWORD PTR [edx],ebx
c0001423:	eb 45                	jmp    c000146a <dlmalloc+0x386>
c0001425:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c000142a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000142d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001430:	83 e2 fc             	and    edx,0xfffffffc
c0001433:	39 d1                	cmp    ecx,edx
c0001435:	77 1e                	ja     c0001455 <dlmalloc+0x371>
c0001437:	89 f3                	mov    ebx,esi
c0001439:	29 f2                	sub    edx,esi
c000143b:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000143e:	83 cb 01             	or     ebx,0x1
c0001441:	89 0d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,ecx
c0001447:	83 ca 01             	or     edx,0x1
c000144a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000144d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001450:	e9 2d fd ff ff       	jmp    c0001182 <dlmalloc+0x9e>
c0001455:	83 c4 1c             	add    esp,0x1c
c0001458:	89 f0                	mov    eax,esi
c000145a:	5b                   	pop    ebx
c000145b:	ba 00 61 02 c0       	mov    edx,0xc0026100
c0001460:	5e                   	pop    esi
c0001461:	5f                   	pop    edi
c0001462:	5d                   	pop    ebp
c0001463:	e9 13 fa ff ff       	jmp    c0000e7b <sYSMALLOc>
c0001468:	31 c0                	xor    eax,eax
c000146a:	83 c4 1c             	add    esp,0x1c
c000146d:	5b                   	pop    ebx
c000146e:	5e                   	pop    esi
c000146f:	5f                   	pop    edi
c0001470:	5d                   	pop    ebp
c0001471:	c3                   	ret    

c0001472 <iALLOc>:
c0001472:	55                   	push   ebp
c0001473:	89 c5                	mov    ebp,eax
c0001475:	57                   	push   edi
c0001476:	56                   	push   esi
c0001477:	53                   	push   ebx
c0001478:	83 ec 2c             	sub    esp,0x2c
c000147b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000147f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001483:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c000148a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000148e:	75 12                	jne    c00014a2 <iALLOc+0x30>
c0001490:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001494:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001499:	e8 01 f8 ff ff       	call   c0000c9f <malloc_consolidate>
c000149e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014a2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014a7:	74 12                	je     c00014bb <iALLOc+0x49>
c00014a9:	85 ed                	test   ebp,ebp
c00014ab:	0f 84 64 01 00 00    	je     c0001615 <iALLOc+0x1a3>
c00014b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014b9:	eb 33                	jmp    c00014ee <iALLOc+0x7c>
c00014bb:	85 ed                	test   ebp,ebp
c00014bd:	75 14                	jne    c00014d3 <iALLOc+0x61>
c00014bf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014c7:	83 c4 2c             	add    esp,0x2c
c00014ca:	5b                   	pop    ebx
c00014cb:	5e                   	pop    esi
c00014cc:	5f                   	pop    edi
c00014cd:	5d                   	pop    ebp
c00014ce:	e9 11 fc ff ff       	jmp    c00010e4 <dlmalloc>
c00014d3:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014db:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e2:	83 f8 0f             	cmp    eax,0xf
c00014e5:	76 07                	jbe    c00014ee <iALLOc+0x7c>
c00014e7:	83 e0 f8             	and    eax,0xfffffff8
c00014ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014ee:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014f3:	75 09                	jne    c00014fe <iALLOc+0x8c>
c00014f5:	89 d0                	mov    eax,edx
c00014f7:	31 f6                	xor    esi,esi
c00014f9:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014fc:	eb 3b                	jmp    c0001539 <iALLOc+0xc7>
c00014fe:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001506:	8b 02                	mov    eax,DWORD PTR [edx]
c0001508:	83 c0 0b             	add    eax,0xb
c000150b:	83 f8 0f             	cmp    eax,0xf
c000150e:	76 07                	jbe    c0001517 <iALLOc+0xa5>
c0001510:	83 e0 f8             	and    eax,0xfffffff8
c0001513:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001517:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000151b:	0f af f5             	imul   esi,ebp
c000151e:	eb 25                	jmp    c0001545 <iALLOc+0xd3>
c0001520:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001522:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001525:	bb 10 00 00 00       	mov    ebx,0x10
c000152a:	83 f9 0f             	cmp    ecx,0xf
c000152d:	76 05                	jbe    c0001534 <iALLOc+0xc2>
c000152f:	83 e1 f8             	and    ecx,0xfffffff8
c0001532:	89 cb                	mov    ebx,ecx
c0001534:	01 de                	add    esi,ebx
c0001536:	83 c0 04             	add    eax,0x4
c0001539:	39 c7                	cmp    edi,eax
c000153b:	75 e3                	jne    c0001520 <iALLOc+0xae>
c000153d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001545:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001549:	83 ec 0c             	sub    esp,0xc
c000154c:	8b 1d 54 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026454
c0001552:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c000155c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001560:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001564:	50                   	push   eax
c0001565:	e8 7a fb ff ff       	call   c00010e4 <dlmalloc>
c000156a:	83 c4 10             	add    esp,0x10
c000156d:	89 1d 54 64 02 c0    	mov    DWORD PTR ds:0xc0026454,ebx
c0001573:	85 c0                	test   eax,eax
c0001575:	0f 84 92 00 00 00    	je     c000160d <iALLOc+0x19b>
c000157b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000157e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001581:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001585:	83 e3 fc             	and    ebx,0xfffffffc
c0001588:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000158d:	74 1e                	je     c00015ad <iALLOc+0x13b>
c000158f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001593:	89 d9                	mov    ecx,ebx
c0001595:	52                   	push   edx
c0001596:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000159a:	83 e9 04             	sub    ecx,0x4
c000159d:	51                   	push   ecx
c000159e:	6a 00                	push   0x0
c00015a0:	50                   	push   eax
c00015a1:	e8 4a ef ff ff       	call   c00004f0 <memset>
c00015a6:	83 c4 10             	add    esp,0x10
c00015a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015b2:	75 14                	jne    c00015c8 <iALLOc+0x156>
c00015b4:	8d 04 37             	lea    eax,[edi+esi*1]
c00015b7:	29 f3                	sub    ebx,esi
c00015b9:	8d 48 08             	lea    ecx,[eax+0x8]
c00015bc:	83 cb 01             	or     ebx,0x1
c00015bf:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015c2:	89 f3                	mov    ebx,esi
c00015c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c8:	31 c0                	xor    eax,eax
c00015ca:	4d                   	dec    ebp
c00015cb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015cf:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d2:	39 c5                	cmp    ebp,eax
c00015d4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015d7:	74 2c                	je     c0001605 <iALLOc+0x193>
c00015d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015dd:	85 c9                	test   ecx,ecx
c00015df:	75 15                	jne    c00015f6 <iALLOc+0x184>
c00015e1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015e4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015e7:	b9 10 00 00 00       	mov    ecx,0x10
c00015ec:	83 fe 0f             	cmp    esi,0xf
c00015ef:	76 05                	jbe    c00015f6 <iALLOc+0x184>
c00015f1:	83 e6 f8             	and    esi,0xfffffff8
c00015f4:	89 f1                	mov    ecx,esi
c00015f6:	89 ce                	mov    esi,ecx
c00015f8:	29 cb                	sub    ebx,ecx
c00015fa:	83 ce 01             	or     esi,0x1
c00015fd:	40                   	inc    eax
c00015fe:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001601:	01 cf                	add    edi,ecx
c0001603:	eb c6                	jmp    c00015cb <iALLOc+0x159>
c0001605:	83 cb 01             	or     ebx,0x1
c0001608:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000160b:	eb 08                	jmp    c0001615 <iALLOc+0x1a3>
c000160d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001615:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001619:	83 c4 2c             	add    esp,0x2c
c000161c:	5b                   	pop    ebx
c000161d:	5e                   	pop    esi
c000161e:	5f                   	pop    edi
c000161f:	5d                   	pop    ebp
c0001620:	c3                   	ret    

c0001621 <dlrealloc>:
c0001621:	55                   	push   ebp
c0001622:	57                   	push   edi
c0001623:	56                   	push   esi
c0001624:	53                   	push   ebx
c0001625:	83 ec 1c             	sub    esp,0x1c
c0001628:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000162c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001630:	85 db                	test   ebx,ebx
c0001632:	75 10                	jne    c0001644 <dlrealloc+0x23>
c0001634:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001638:	83 c4 1c             	add    esp,0x1c
c000163b:	5b                   	pop    ebx
c000163c:	5e                   	pop    esi
c000163d:	5f                   	pop    edi
c000163e:	5d                   	pop    ebp
c000163f:	e9 a0 fa ff ff       	jmp    c00010e4 <dlmalloc>
c0001644:	83 f8 df             	cmp    eax,0xffffffdf
c0001647:	76 07                	jbe    c0001650 <dlrealloc+0x2f>
c0001649:	31 db                	xor    ebx,ebx
c000164b:	e9 6b 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c0001650:	83 c0 0b             	add    eax,0xb
c0001653:	bd 10 00 00 00       	mov    ebp,0x10
c0001658:	83 f8 0f             	cmp    eax,0xf
c000165b:	76 05                	jbe    c0001662 <dlrealloc+0x41>
c000165d:	83 e0 f8             	and    eax,0xfffffff8
c0001660:	89 c5                	mov    ebp,eax
c0001662:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001665:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001668:	89 ce                	mov    esi,ecx
c000166a:	83 e6 fc             	and    esi,0xfffffffc
c000166d:	f6 c1 02             	test   cl,0x2
c0001670:	75 d7                	jne    c0001649 <dlrealloc+0x28>
c0001672:	39 f5                	cmp    ebp,esi
c0001674:	0f 86 04 01 00 00    	jbe    c000177e <dlrealloc+0x15d>
c000167a:	8d 14 37             	lea    edx,[edi+esi*1]
c000167d:	39 15 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,edx
c0001683:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001686:	75 33                	jne    c00016bb <dlrealloc+0x9a>
c0001688:	83 e0 fc             	and    eax,0xfffffffc
c000168b:	01 f0                	add    eax,esi
c000168d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001691:	8d 45 10             	lea    eax,[ebp+0x10]
c0001694:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0001698:	77 49                	ja     c00016e3 <dlrealloc+0xc2>
c000169a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000169e:	83 e1 01             	and    ecx,0x1
c00016a1:	01 ef                	add    edi,ebp
c00016a3:	09 e9                	or     ecx,ebp
c00016a5:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00016a8:	89 3d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edi
c00016ae:	29 e8                	sub    eax,ebp
c00016b0:	83 c8 01             	or     eax,0x1
c00016b3:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016b6:	e9 00 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c00016bb:	89 c1                	mov    ecx,eax
c00016bd:	83 e1 fe             	and    ecx,0xfffffffe
c00016c0:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c00016c5:	75 1c                	jne    c00016e3 <dlrealloc+0xc2>
c00016c7:	83 e0 fc             	and    eax,0xfffffffc
c00016ca:	01 f0                	add    eax,esi
c00016cc:	39 c5                	cmp    ebp,eax
c00016ce:	77 13                	ja     c00016e3 <dlrealloc+0xc2>
c00016d0:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00016d3:	89 c6                	mov    esi,eax
c00016d5:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00016d8:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00016db:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00016de:	e9 9b 00 00 00       	jmp    c000177e <dlrealloc+0x15d>
c00016e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016e7:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016ea:	83 ec 0c             	sub    esp,0xc
c00016ed:	50                   	push   eax
c00016ee:	e8 f1 f9 ff ff       	call   c00010e4 <dlmalloc>
c00016f3:	83 c4 10             	add    esp,0x10
c00016f6:	85 c0                	test   eax,eax
c00016f8:	0f 84 4b ff ff ff    	je     c0001649 <dlrealloc+0x28>
c00016fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001702:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001705:	39 ca                	cmp    edx,ecx
c0001707:	75 0a                	jne    c0001713 <dlrealloc+0xf2>
c0001709:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000170c:	83 e0 fc             	and    eax,0xfffffffc
c000170f:	01 c6                	add    esi,eax
c0001711:	eb 6b                	jmp    c000177e <dlrealloc+0x15d>
c0001713:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001716:	83 f9 27             	cmp    ecx,0x27
c0001719:	76 08                	jbe    c0001723 <dlrealloc+0x102>
c000171b:	89 de                	mov    esi,ebx
c000171d:	89 c7                	mov    edi,eax
c000171f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001721:	eb 43                	jmp    c0001766 <dlrealloc+0x145>
c0001723:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001725:	83 f9 13             	cmp    ecx,0x13
c0001728:	89 10                	mov    DWORD PTR [eax],edx
c000172a:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000172d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001730:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001733:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001736:	76 2e                	jbe    c0001766 <dlrealloc+0x145>
c0001738:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000173b:	83 f9 1b             	cmp    ecx,0x1b
c000173e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001741:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001744:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001747:	76 1d                	jbe    c0001766 <dlrealloc+0x145>
c0001749:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000174c:	83 f9 23             	cmp    ecx,0x23
c000174f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001752:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001755:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001758:	76 0c                	jbe    c0001766 <dlrealloc+0x145>
c000175a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000175d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001760:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001763:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001766:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000176a:	83 ec 0c             	sub    esp,0xc
c000176d:	53                   	push   ebx
c000176e:	e8 13 f6 ff ff       	call   c0000d86 <dlfree>
c0001773:	83 c4 10             	add    esp,0x10
c0001776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177a:	89 c3                	mov    ebx,eax
c000177c:	eb 3d                	jmp    c00017bb <dlrealloc+0x19a>
c000177e:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001781:	8d 04 37             	lea    eax,[edi+esi*1]
c0001784:	89 f2                	mov    edx,esi
c0001786:	29 ea                	sub    edx,ebp
c0001788:	83 e1 01             	and    ecx,0x1
c000178b:	83 fa 0f             	cmp    edx,0xf
c000178e:	77 0b                	ja     c000179b <dlrealloc+0x17a>
c0001790:	09 ce                	or     esi,ecx
c0001792:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001795:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001799:	eb 20                	jmp    c00017bb <dlrealloc+0x19a>
c000179b:	01 ef                	add    edi,ebp
c000179d:	83 ca 01             	or     edx,0x1
c00017a0:	09 cd                	or     ebp,ecx
c00017a2:	83 ec 0c             	sub    esp,0xc
c00017a5:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017a8:	83 c7 08             	add    edi,0x8
c00017ab:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017ae:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017b2:	57                   	push   edi
c00017b3:	e8 ce f5 ff ff       	call   c0000d86 <dlfree>
c00017b8:	83 c4 10             	add    esp,0x10
c00017bb:	83 c4 1c             	add    esp,0x1c
c00017be:	89 d8                	mov    eax,ebx
c00017c0:	5b                   	pop    ebx
c00017c1:	5e                   	pop    esi
c00017c2:	5f                   	pop    edi
c00017c3:	5d                   	pop    ebp
c00017c4:	c3                   	ret    

c00017c5 <dlmemalign>:
c00017c5:	55                   	push   ebp
c00017c6:	57                   	push   edi
c00017c7:	56                   	push   esi
c00017c8:	53                   	push   ebx
c00017c9:	83 ec 0c             	sub    esp,0xc
c00017cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017d4:	83 fa 08             	cmp    edx,0x8
c00017d7:	77 10                	ja     c00017e9 <dlmemalign+0x24>
c00017d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017dd:	83 c4 0c             	add    esp,0xc
c00017e0:	5b                   	pop    ebx
c00017e1:	5e                   	pop    esi
c00017e2:	5f                   	pop    edi
c00017e3:	5d                   	pop    ebp
c00017e4:	e9 fb f8 ff ff       	jmp    c00010e4 <dlmalloc>
c00017e9:	83 fa 0f             	cmp    edx,0xf
c00017ec:	bf 10 00 00 00       	mov    edi,0x10
c00017f1:	76 13                	jbe    c0001806 <dlmemalign+0x41>
c00017f3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017f6:	85 d1                	test   ecx,edx
c00017f8:	75 04                	jne    c00017fe <dlmemalign+0x39>
c00017fa:	89 d7                	mov    edi,edx
c00017fc:	eb 08                	jmp    c0001806 <dlmemalign+0x41>
c00017fe:	39 d7                	cmp    edi,edx
c0001800:	73 04                	jae    c0001806 <dlmemalign+0x41>
c0001802:	01 ff                	add    edi,edi
c0001804:	eb f8                	jmp    c00017fe <dlmemalign+0x39>
c0001806:	83 f8 df             	cmp    eax,0xffffffdf
c0001809:	76 07                	jbe    c0001812 <dlmemalign+0x4d>
c000180b:	31 c0                	xor    eax,eax
c000180d:	e9 ce 00 00 00       	jmp    c00018e0 <dlmemalign+0x11b>
c0001812:	83 c0 0b             	add    eax,0xb
c0001815:	bd 10 00 00 00       	mov    ebp,0x10
c000181a:	83 f8 0f             	cmp    eax,0xf
c000181d:	76 05                	jbe    c0001824 <dlmemalign+0x5f>
c000181f:	83 e0 f8             	and    eax,0xfffffff8
c0001822:	89 c5                	mov    ebp,eax
c0001824:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001828:	83 ec 0c             	sub    esp,0xc
c000182b:	50                   	push   eax
c000182c:	e8 b3 f8 ff ff       	call   c00010e4 <dlmalloc>
c0001831:	83 c4 10             	add    esp,0x10
c0001834:	85 c0                	test   eax,eax
c0001836:	89 c1                	mov    ecx,eax
c0001838:	74 d1                	je     c000180b <dlmemalign+0x46>
c000183a:	8d 70 f8             	lea    esi,[eax-0x8]
c000183d:	31 d2                	xor    edx,edx
c000183f:	f7 f7                	div    edi
c0001841:	85 d2                	test   edx,edx
c0001843:	74 62                	je     c00018a7 <dlmemalign+0xe2>
c0001845:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001849:	89 f8                	mov    eax,edi
c000184b:	f7 d8                	neg    eax
c000184d:	21 c3                	and    ebx,eax
c000184f:	83 eb 08             	sub    ebx,0x8
c0001852:	89 d8                	mov    eax,ebx
c0001854:	29 f0                	sub    eax,esi
c0001856:	83 f8 0f             	cmp    eax,0xf
c0001859:	77 02                	ja     c000185d <dlmemalign+0x98>
c000185b:	01 fb                	add    ebx,edi
c000185d:	89 d8                	mov    eax,ebx
c000185f:	29 f0                	sub    eax,esi
c0001861:	89 c6                	mov    esi,eax
c0001863:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001866:	89 c2                	mov    edx,eax
c0001868:	83 e2 fc             	and    edx,0xfffffffc
c000186b:	29 f2                	sub    edx,esi
c000186d:	a8 02                	test   al,0x2
c000186f:	74 10                	je     c0001881 <dlmemalign+0xbc>
c0001871:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001874:	83 ca 02             	or     edx,0x2
c0001877:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000187a:	8d 43 08             	lea    eax,[ebx+0x8]
c000187d:	89 33                	mov    DWORD PTR [ebx],esi
c000187f:	eb 5f                	jmp    c00018e0 <dlmemalign+0x11b>
c0001881:	89 d0                	mov    eax,edx
c0001883:	83 ec 0c             	sub    esp,0xc
c0001886:	83 c8 01             	or     eax,0x1
c0001889:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000188c:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001891:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001894:	83 e0 01             	and    eax,0x1
c0001897:	09 f0                	or     eax,esi
c0001899:	89 de                	mov    esi,ebx
c000189b:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000189e:	51                   	push   ecx
c000189f:	e8 e2 f4 ff ff       	call   c0000d86 <dlfree>
c00018a4:	83 c4 10             	add    esp,0x10
c00018a7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018aa:	a8 02                	test   al,0x2
c00018ac:	75 2f                	jne    c00018dd <dlmemalign+0x118>
c00018ae:	8d 55 10             	lea    edx,[ebp+0x10]
c00018b1:	83 e0 fc             	and    eax,0xfffffffc
c00018b4:	39 c2                	cmp    edx,eax
c00018b6:	73 25                	jae    c00018dd <dlmemalign+0x118>
c00018b8:	29 e8                	sub    eax,ebp
c00018ba:	83 ec 0c             	sub    esp,0xc
c00018bd:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c0:	83 c8 01             	or     eax,0x1
c00018c3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00018c6:	83 c2 08             	add    edx,0x8
c00018c9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018cc:	83 e0 01             	and    eax,0x1
c00018cf:	09 c5                	or     ebp,eax
c00018d1:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018d4:	52                   	push   edx
c00018d5:	e8 ac f4 ff ff       	call   c0000d86 <dlfree>
c00018da:	83 c4 10             	add    esp,0x10
c00018dd:	8d 46 08             	lea    eax,[esi+0x8]
c00018e0:	83 c4 0c             	add    esp,0xc
c00018e3:	5b                   	pop    ebx
c00018e4:	5e                   	pop    esi
c00018e5:	5f                   	pop    edi
c00018e6:	5d                   	pop    ebp
c00018e7:	c3                   	ret    

c00018e8 <dlcalloc>:
c00018e8:	53                   	push   ebx
c00018e9:	83 ec 14             	sub    esp,0x14
c00018ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018f0:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018f5:	50                   	push   eax
c00018f6:	e8 e9 f7 ff ff       	call   c00010e4 <dlmalloc>
c00018fb:	83 c4 10             	add    esp,0x10
c00018fe:	85 c0                	test   eax,eax
c0001900:	89 c3                	mov    ebx,eax
c0001902:	74 77                	je     c000197b <dlcalloc+0x93>
c0001904:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001907:	89 d0                	mov    eax,edx
c0001909:	83 e0 fc             	and    eax,0xfffffffc
c000190c:	80 e2 02             	and    dl,0x2
c000190f:	75 5a                	jne    c000196b <dlcalloc+0x83>
c0001911:	83 e8 04             	sub    eax,0x4
c0001914:	83 f8 27             	cmp    eax,0x27
c0001917:	76 03                	jbe    c000191c <dlcalloc+0x34>
c0001919:	51                   	push   ecx
c000191a:	eb 53                	jmp    c000196f <dlcalloc+0x87>
c000191c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001922:	83 f8 13             	cmp    eax,0x13
c0001925:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000192c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001933:	76 46                	jbe    c000197b <dlcalloc+0x93>
c0001935:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000193c:	83 f8 1b             	cmp    eax,0x1b
c000193f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001946:	76 33                	jbe    c000197b <dlcalloc+0x93>
c0001948:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000194f:	83 f8 23             	cmp    eax,0x23
c0001952:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001959:	76 20                	jbe    c000197b <dlcalloc+0x93>
c000195b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001962:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001969:	eb 10                	jmp    c000197b <dlcalloc+0x93>
c000196b:	52                   	push   edx
c000196c:	83 e8 08             	sub    eax,0x8
c000196f:	50                   	push   eax
c0001970:	6a 00                	push   0x0
c0001972:	53                   	push   ebx
c0001973:	e8 78 eb ff ff       	call   c00004f0 <memset>
c0001978:	83 c4 10             	add    esp,0x10
c000197b:	83 c4 08             	add    esp,0x8
c000197e:	89 d8                	mov    eax,ebx
c0001980:	5b                   	pop    ebx
c0001981:	c3                   	ret    

c0001982 <dlcfree>:
c0001982:	e9 ff f3 ff ff       	jmp    c0000d86 <dlfree>

c0001987 <dlindependent_calloc>:
c0001987:	83 ec 28             	sub    esp,0x28
c000198a:	b9 03 00 00 00       	mov    ecx,0x3
c000198f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001993:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000199b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a3:	e8 ca fa ff ff       	call   c0001472 <iALLOc>
c00019a8:	83 c4 2c             	add    esp,0x2c
c00019ab:	c3                   	ret    

c00019ac <dlindependent_comalloc>:
c00019ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019b0:	31 c9                	xor    ecx,ecx
c00019b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019be:	e9 af fa ff ff       	jmp    c0001472 <iALLOc>

c00019c3 <dlvalloc>:
c00019c3:	83 ec 0c             	sub    esp,0xc
c00019c6:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00019cd:	75 0a                	jne    c00019d9 <dlvalloc+0x16>
c00019cf:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019d4:	e8 c6 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c00019d9:	50                   	push   eax
c00019da:	50                   	push   eax
c00019db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019df:	ff 35 5c 64 02 c0    	push   DWORD PTR ds:0xc002645c
c00019e5:	e8 db fd ff ff       	call   c00017c5 <dlmemalign>
c00019ea:	83 c4 1c             	add    esp,0x1c
c00019ed:	c3                   	ret    

c00019ee <dlpvalloc>:
c00019ee:	83 ec 0c             	sub    esp,0xc
c00019f1:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00019f8:	75 0a                	jne    c0001a04 <dlpvalloc+0x16>
c00019fa:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019ff:	e8 9b f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a04:	52                   	push   edx
c0001a05:	a1 5c 64 02 c0       	mov    eax,ds:0xc002645c
c0001a0a:	52                   	push   edx
c0001a0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a0f:	89 c1                	mov    ecx,eax
c0001a11:	f7 d9                	neg    ecx
c0001a13:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a17:	21 ca                	and    edx,ecx
c0001a19:	52                   	push   edx
c0001a1a:	50                   	push   eax
c0001a1b:	e8 a5 fd ff ff       	call   c00017c5 <dlmemalign>
c0001a20:	83 c4 1c             	add    esp,0x1c
c0001a23:	c3                   	ret    

c0001a24 <dlmalloc_trim>:
c0001a24:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001a29:	e8 71 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a2e:	31 c0                	xor    eax,eax
c0001a30:	c3                   	ret    

c0001a31 <dlmalloc_usable_size>:
c0001a31:	53                   	push   ebx
c0001a32:	31 c0                	xor    eax,eax
c0001a34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a38:	85 c9                	test   ecx,ecx
c0001a3a:	74 24                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a3c:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a3f:	f6 c2 02             	test   dl,0x2
c0001a42:	74 08                	je     c0001a4c <dlmalloc_usable_size+0x1b>
c0001a44:	83 e2 fc             	and    edx,0xfffffffc
c0001a47:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a4a:	eb 14                	jmp    c0001a60 <dlmalloc_usable_size+0x2f>
c0001a4c:	89 d3                	mov    ebx,edx
c0001a4e:	31 c0                	xor    eax,eax
c0001a50:	83 e3 fe             	and    ebx,0xfffffffe
c0001a53:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a58:	74 06                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a5a:	83 e2 fc             	and    edx,0xfffffffc
c0001a5d:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a60:	5b                   	pop    ebx
c0001a61:	c3                   	ret    

c0001a62 <dlmallinfo>:
c0001a62:	55                   	push   ebp
c0001a63:	57                   	push   edi
c0001a64:	56                   	push   esi
c0001a65:	53                   	push   ebx
c0001a66:	83 ec 08             	sub    esp,0x8
c0001a69:	83 3d 2c 61 02 c0 00 	cmp    DWORD PTR ds:0xc002612c,0x0
c0001a70:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a74:	75 0a                	jne    c0001a80 <dlmallinfo+0x1e>
c0001a76:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001a7b:	e8 1f f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a80:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c0001a85:	31 ed                	xor    ebp,ebp
c0001a87:	31 c9                	xor    ecx,ecx
c0001a89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a8c:	83 e0 fc             	and    eax,0xfffffffc
c0001a8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a93:	31 c0                	xor    eax,eax
c0001a95:	8b 14 85 04 61 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9efc]
c0001a9c:	85 d2                	test   edx,edx
c0001a9e:	74 0e                	je     c0001aae <dlmallinfo+0x4c>
c0001aa0:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aa3:	45                   	inc    ebp
c0001aa4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aa7:	83 e6 fc             	and    esi,0xfffffffc
c0001aaa:	01 f1                	add    ecx,esi
c0001aac:	eb ee                	jmp    c0001a9c <dlmallinfo+0x3a>
c0001aae:	40                   	inc    eax
c0001aaf:	83 f8 0a             	cmp    eax,0xa
c0001ab2:	75 e1                	jne    c0001a95 <dlmallinfo+0x33>
c0001ab4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001abb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001abf:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001ac2:	b8 34 61 02 c0       	mov    eax,0xc0026134
c0001ac7:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001aca:	39 f0                	cmp    eax,esi
c0001acc:	74 10                	je     c0001ade <dlmallinfo+0x7c>
c0001ace:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001ad1:	ff 04 24             	inc    DWORD PTR [esp]
c0001ad4:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ad7:	83 e7 fc             	and    edi,0xfffffffc
c0001ada:	01 fa                	add    edx,edi
c0001adc:	eb ec                	jmp    c0001aca <dlmallinfo+0x68>
c0001ade:	83 c0 08             	add    eax,0x8
c0001ae1:	3d 2c 64 02 c0       	cmp    eax,0xc002642c
c0001ae6:	75 df                	jne    c0001ac7 <dlmallinfo+0x65>
c0001ae8:	8b 35 50 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026450
c0001aee:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af1:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0001af6:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001afc:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001aff:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b02:	8b 35 64 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026464
c0001b08:	89 03                	mov    DWORD PTR [ebx],eax
c0001b0a:	29 d0                	sub    eax,edx
c0001b0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b13:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b16:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b19:	8b 35 74 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026474
c0001b1f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b22:	89 d8                	mov    eax,ebx
c0001b24:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b27:	83 c4 08             	add    esp,0x8
c0001b2a:	5b                   	pop    ebx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	5d                   	pop    ebp
c0001b2e:	c2 04 00             	ret    0x4

c0001b31 <dlmalloc_stats>:
c0001b31:	83 ec 30             	sub    esp,0x30
c0001b34:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b38:	50                   	push   eax
c0001b39:	e8 24 ff ff ff       	call   c0001a62 <dlmallinfo>
c0001b3e:	83 c4 30             	add    esp,0x30
c0001b41:	c3                   	ret    

c0001b42 <dlmallopt>:
c0001b42:	56                   	push   esi
c0001b43:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b48:	53                   	push   ebx
c0001b49:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b51:	e8 49 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b56:	8d 46 04             	lea    eax,[esi+0x4]
c0001b59:	83 f8 05             	cmp    eax,0x5
c0001b5c:	77 67                	ja     c0001bc5 <dlmallopt+0x83>
c0001b5e:	ff 24 85 44 05 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfabc]
c0001b65:	83 fb 50             	cmp    ebx,0x50
c0001b68:	77 5b                	ja     c0001bc5 <dlmallopt+0x83>
c0001b6a:	85 db                	test   ebx,ebx
c0001b6c:	ba 08 00 00 00       	mov    edx,0x8
c0001b71:	74 12                	je     c0001b85 <dlmallopt+0x43>
c0001b73:	83 c3 0b             	add    ebx,0xb
c0001b76:	ba 10 00 00 00       	mov    edx,0x10
c0001b7b:	83 fb 0f             	cmp    ebx,0xf
c0001b7e:	76 05                	jbe    c0001b85 <dlmallopt+0x43>
c0001b80:	89 da                	mov    edx,ebx
c0001b82:	83 e2 f8             	and    edx,0xfffffff8
c0001b85:	a1 00 61 02 c0       	mov    eax,ds:0xc0026100
c0001b8a:	83 e0 03             	and    eax,0x3
c0001b8d:	09 d0                	or     eax,edx
c0001b8f:	a3 00 61 02 c0       	mov    ds:0xc0026100,eax
c0001b94:	eb 31                	jmp    c0001bc7 <dlmallopt+0x85>
c0001b96:	89 1d 44 64 02 c0    	mov    DWORD PTR ds:0xc0026444,ebx
c0001b9c:	eb 06                	jmp    c0001ba4 <dlmallopt+0x62>
c0001b9e:	89 1d 48 64 02 c0    	mov    DWORD PTR ds:0xc0026448,ebx
c0001ba4:	be 01 00 00 00       	mov    esi,0x1
c0001ba9:	eb 1c                	jmp    c0001bc7 <dlmallopt+0x85>
c0001bab:	89 1d 4c 64 02 c0    	mov    DWORD PTR ds:0xc002644c,ebx
c0001bb1:	eb f1                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bb3:	31 f6                	xor    esi,esi
c0001bb5:	85 db                	test   ebx,ebx
c0001bb7:	75 0e                	jne    c0001bc7 <dlmallopt+0x85>
c0001bb9:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001bc3:	eb df                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bc5:	31 f6                	xor    esi,esi
c0001bc7:	5b                   	pop    ebx
c0001bc8:	89 f0                	mov    eax,esi
c0001bca:	5e                   	pop    esi
c0001bcb:	c3                   	ret    

c0001bcc <isblank>:
c0001bcc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001bd1:	74 09                	je     c0001bdc <isblank+0x10>
c0001bd3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001bd8:	75 0a                	jne    c0001be4 <isblank+0x18>
c0001bda:	66 90                	xchg   ax,ax
c0001bdc:	b8 01 00 00 00       	mov    eax,0x1
c0001be1:	c3                   	ret    
c0001be2:	66 90                	xchg   ax,ax
c0001be4:	b8 00 00 00 00       	mov    eax,0x0
c0001be9:	c3                   	ret    
c0001bea:	66 90                	xchg   ax,ax

c0001bec <iscntrl>:
c0001bec:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bf1:	7e 09                	jle    c0001bfc <iscntrl+0x10>
c0001bf3:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bf8:	75 0a                	jne    c0001c04 <iscntrl+0x18>
c0001bfa:	66 90                	xchg   ax,ax
c0001bfc:	b8 01 00 00 00       	mov    eax,0x1
c0001c01:	c3                   	ret    
c0001c02:	66 90                	xchg   ax,ax
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isdigit>:
c0001c0c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001c11:	7e 0d                	jle    c0001c20 <isdigit+0x14>
c0001c13:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001c18:	7f 06                	jg     c0001c20 <isdigit+0x14>
c0001c1a:	b8 01 00 00 00       	mov    eax,0x1
c0001c1f:	c3                   	ret    
c0001c20:	b8 00 00 00 00       	mov    eax,0x0
c0001c25:	c3                   	ret    
c0001c26:	66 90                	xchg   ax,ax

c0001c28 <islower>:
c0001c28:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001c2d:	7e 0d                	jle    c0001c3c <islower+0x14>
c0001c2f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001c34:	7f 06                	jg     c0001c3c <islower+0x14>
c0001c36:	b8 01 00 00 00       	mov    eax,0x1
c0001c3b:	c3                   	ret    
c0001c3c:	b8 00 00 00 00       	mov    eax,0x0
c0001c41:	c3                   	ret    
c0001c42:	66 90                	xchg   ax,ax

c0001c44 <isspace>:
c0001c44:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c49:	7c 19                	jl     c0001c64 <isspace+0x20>
c0001c4b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c50:	7e 0a                	jle    c0001c5c <isspace+0x18>
c0001c52:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c57:	75 0b                	jne    c0001c64 <isspace+0x20>
c0001c59:	8d 76 00             	lea    esi,[esi+0x0]
c0001c5c:	b8 01 00 00 00       	mov    eax,0x1
c0001c61:	c3                   	ret    
c0001c62:	66 90                	xchg   ax,ax
c0001c64:	b8 00 00 00 00       	mov    eax,0x0
c0001c69:	c3                   	ret    
c0001c6a:	66 90                	xchg   ax,ax

c0001c6c <isupper>:
c0001c6c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c71:	7e 0d                	jle    c0001c80 <isupper+0x14>
c0001c73:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c78:	7f 06                	jg     c0001c80 <isupper+0x14>
c0001c7a:	b8 01 00 00 00       	mov    eax,0x1
c0001c7f:	c3                   	ret    
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isalpha>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 db ff ff ff       	call   c0001c6c <isupper>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 10                	jne    c0001ca8 <isalpha+0x20>
c0001c98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c9c:	e8 87 ff ff ff       	call   c0001c28 <islower>
c0001ca1:	83 c4 04             	add    esp,0x4
c0001ca4:	85 c0                	test   eax,eax
c0001ca6:	74 08                	je     c0001cb0 <isalpha+0x28>
c0001ca8:	b8 01 00 00 00       	mov    eax,0x1
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	b8 00 00 00 00       	mov    eax,0x0
c0001cb5:	c3                   	ret    
c0001cb6:	66 90                	xchg   ax,ax

c0001cb8 <isalnum>:
c0001cb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cbc:	e8 c7 ff ff ff       	call   c0001c88 <isalpha>
c0001cc1:	83 c4 04             	add    esp,0x4
c0001cc4:	85 c0                	test   eax,eax
c0001cc6:	75 10                	jne    c0001cd8 <isalnum+0x20>
c0001cc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ccc:	e8 3b ff ff ff       	call   c0001c0c <isdigit>
c0001cd1:	83 c4 04             	add    esp,0x4
c0001cd4:	85 c0                	test   eax,eax
c0001cd6:	74 08                	je     c0001ce0 <isalnum+0x28>
c0001cd8:	b8 01 00 00 00       	mov    eax,0x1
c0001cdd:	c3                   	ret    
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 00 00 00 00       	mov    eax,0x0
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax

c0001ce8 <ispunct>:
c0001ce8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cec:	e8 c7 ff ff ff       	call   c0001cb8 <isalnum>
c0001cf1:	83 c4 04             	add    esp,0x4
c0001cf4:	85 c0                	test   eax,eax
c0001cf6:	75 28                	jne    c0001d20 <ispunct+0x38>
c0001cf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cfc:	e8 43 ff ff ff       	call   c0001c44 <isspace>
c0001d01:	83 c4 04             	add    esp,0x4
c0001d04:	85 c0                	test   eax,eax
c0001d06:	75 18                	jne    c0001d20 <ispunct+0x38>
c0001d08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d0c:	e8 db fe ff ff       	call   c0001bec <iscntrl>
c0001d11:	83 c4 04             	add    esp,0x4
c0001d14:	85 c0                	test   eax,eax
c0001d16:	75 08                	jne    c0001d20 <ispunct+0x38>
c0001d18:	b8 01 00 00 00       	mov    eax,0x1
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax
c0001d20:	b8 00 00 00 00       	mov    eax,0x0
c0001d25:	c3                   	ret    
c0001d26:	66 90                	xchg   ax,ax

c0001d28 <isgraph>:
c0001d28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d2c:	e8 87 ff ff ff       	call   c0001cb8 <isalnum>
c0001d31:	83 c4 04             	add    esp,0x4
c0001d34:	85 c0                	test   eax,eax
c0001d36:	75 10                	jne    c0001d48 <isgraph+0x20>
c0001d38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d3c:	e8 a7 ff ff ff       	call   c0001ce8 <ispunct>
c0001d41:	83 c4 04             	add    esp,0x4
c0001d44:	85 c0                	test   eax,eax
c0001d46:	74 08                	je     c0001d50 <isgraph+0x28>
c0001d48:	b8 01 00 00 00       	mov    eax,0x1
c0001d4d:	c3                   	ret    
c0001d4e:	66 90                	xchg   ax,ax
c0001d50:	b8 00 00 00 00       	mov    eax,0x0
c0001d55:	c3                   	ret    
c0001d56:	66 90                	xchg   ax,ax

c0001d58 <isprint>:
c0001d58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d5c:	e8 c7 ff ff ff       	call   c0001d28 <isgraph>
c0001d61:	83 c4 04             	add    esp,0x4
c0001d64:	85 c0                	test   eax,eax
c0001d66:	75 08                	jne    c0001d70 <isprint+0x18>
c0001d68:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d6d:	75 09                	jne    c0001d78 <isprint+0x20>
c0001d6f:	90                   	nop
c0001d70:	b8 01 00 00 00       	mov    eax,0x1
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 00 00 00 00       	mov    eax,0x0
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax

c0001d80 <isxdigit>:
c0001d80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d84:	e8 83 fe ff ff       	call   c0001c0c <isdigit>
c0001d89:	83 c4 04             	add    esp,0x4
c0001d8c:	85 c0                	test   eax,eax
c0001d8e:	75 20                	jne    c0001db0 <isxdigit+0x30>
c0001d90:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d95:	7e 09                	jle    c0001da0 <isxdigit+0x20>
c0001d97:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d9c:	7e 12                	jle    c0001db0 <isxdigit+0x30>
c0001d9e:	66 90                	xchg   ax,ax
c0001da0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001da5:	7e 11                	jle    c0001db8 <isxdigit+0x38>
c0001da7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001dac:	7f 0a                	jg     c0001db8 <isxdigit+0x38>
c0001dae:	66 90                	xchg   ax,ax
c0001db0:	b8 01 00 00 00       	mov    eax,0x1
c0001db5:	c3                   	ret    
c0001db6:	66 90                	xchg   ax,ax
c0001db8:	b8 00 00 00 00       	mov    eax,0x0
c0001dbd:	c3                   	ret    

c0001dbe <disk_status>:
c0001dbe:	31 c0                	xor    eax,eax
c0001dc0:	c3                   	ret    

c0001dc1 <disk_initialize>:
c0001dc1:	31 c0                	xor    eax,eax
c0001dc3:	c3                   	ret    

c0001dc4 <disk_read>:
c0001dc4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc9:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001dd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd5:	e9 9e 7c 01 00       	jmp    c0019a78 <fatWrapperReadDisk>

c0001dda <disk_write>:
c0001dda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001ddf:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001de7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001deb:	e9 c8 7c 01 00       	jmp    c0019ab8 <fatWrapperWriteDisk>

c0001df0 <disk_ioctl>:
c0001df0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001df5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001df9:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dfe:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001e06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e0a:	e9 e9 7c 01 00       	jmp    c0019af8 <fatWrapperIoctl>

c0001e0f <ld_word>:
c0001e0f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e13:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e16:	c1 e2 08             	shl    edx,0x8
c0001e19:	09 d0                	or     eax,edx
c0001e1b:	c3                   	ret    

c0001e1c <ld_dword>:
c0001e1c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001e20:	89 d1                	mov    ecx,edx
c0001e22:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e26:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e29:	c1 e1 08             	shl    ecx,0x8
c0001e2c:	09 ca                	or     edx,ecx
c0001e2e:	c1 e2 08             	shl    edx,0x8
c0001e31:	09 d0                	or     eax,edx
c0001e33:	c3                   	ret    

c0001e34 <st_word>:
c0001e34:	66 89 10             	mov    WORD PTR [eax],dx
c0001e37:	c3                   	ret    

c0001e38 <st_dword>:
c0001e38:	89 10                	mov    DWORD PTR [eax],edx
c0001e3a:	c3                   	ret    

c0001e3b <mem_cpy>:
c0001e3b:	85 c9                	test   ecx,ecx
c0001e3d:	74 10                	je     c0001e4f <mem_cpy+0x14>
c0001e3f:	57                   	push   edi
c0001e40:	01 c1                	add    ecx,eax
c0001e42:	56                   	push   esi
c0001e43:	89 c7                	mov    edi,eax
c0001e45:	89 d6                	mov    esi,edx
c0001e47:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e48:	39 f9                	cmp    ecx,edi
c0001e4a:	75 fb                	jne    c0001e47 <mem_cpy+0xc>
c0001e4c:	5e                   	pop    esi
c0001e4d:	5f                   	pop    edi
c0001e4e:	c3                   	ret    
c0001e4f:	c3                   	ret    

c0001e50 <mem_set>:
c0001e50:	01 c1                	add    ecx,eax
c0001e52:	88 10                	mov    BYTE PTR [eax],dl
c0001e54:	40                   	inc    eax
c0001e55:	39 c8                	cmp    eax,ecx
c0001e57:	75 f9                	jne    c0001e52 <mem_set+0x2>
c0001e59:	c3                   	ret    

c0001e5a <mem_cmp>:
c0001e5a:	57                   	push   edi
c0001e5b:	56                   	push   esi
c0001e5c:	89 c6                	mov    esi,eax
c0001e5e:	53                   	push   ebx
c0001e5f:	46                   	inc    esi
c0001e60:	42                   	inc    edx
c0001e61:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e65:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e69:	29 fb                	sub    ebx,edi
c0001e6b:	89 cf                	mov    edi,ecx
c0001e6d:	29 f7                	sub    edi,esi
c0001e6f:	01 c7                	add    edi,eax
c0001e71:	74 04                	je     c0001e77 <mem_cmp+0x1d>
c0001e73:	85 db                	test   ebx,ebx
c0001e75:	74 e8                	je     c0001e5f <mem_cmp+0x5>
c0001e77:	89 d8                	mov    eax,ebx
c0001e79:	5b                   	pop    ebx
c0001e7a:	5e                   	pop    esi
c0001e7b:	5f                   	pop    edi
c0001e7c:	c3                   	ret    

c0001e7d <chk_chr>:
c0001e7d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e80:	85 c9                	test   ecx,ecx
c0001e82:	74 07                	je     c0001e8b <chk_chr+0xe>
c0001e84:	39 d1                	cmp    ecx,edx
c0001e86:	74 03                	je     c0001e8b <chk_chr+0xe>
c0001e88:	40                   	inc    eax
c0001e89:	eb f2                	jmp    c0001e7d <chk_chr>
c0001e8b:	89 c8                	mov    eax,ecx
c0001e8d:	c3                   	ret    

c0001e8e <dbc_1st>:
c0001e8e:	31 c0                	xor    eax,eax
c0001e90:	c3                   	ret    

c0001e91 <dbc_2nd>:
c0001e91:	31 c0                	xor    eax,eax
c0001e93:	c3                   	ret    

c0001e94 <tchar2uni>:
c0001e94:	57                   	push   edi
c0001e95:	56                   	push   esi
c0001e96:	53                   	push   ebx
c0001e97:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e99:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e9b:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e9e:	f6 c1 80             	test   cl,0x80
c0001ea1:	75 0a                	jne    c0001ead <tchar2uni+0x19>
c0001ea3:	0f b6 d1             	movzx  edx,cl
c0001ea6:	89 f3                	mov    ebx,esi
c0001ea8:	e9 b2 00 00 00       	jmp    c0001f5f <tchar2uni+0xcb>
c0001ead:	89 ca                	mov    edx,ecx
c0001eaf:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001eb5:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001ebb:	89 ca                	mov    edx,ecx
c0001ebd:	75 0a                	jne    c0001ec9 <tchar2uni+0x35>
c0001ebf:	83 e2 1f             	and    edx,0x1f
c0001ec2:	b9 01 00 00 00       	mov    ecx,0x1
c0001ec7:	eb 37                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ec9:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001ecf:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001ed5:	75 0c                	jne    c0001ee3 <tchar2uni+0x4f>
c0001ed7:	89 ca                	mov    edx,ecx
c0001ed9:	b9 02 00 00 00       	mov    ecx,0x2
c0001ede:	83 e2 0f             	and    edx,0xf
c0001ee1:	eb 1d                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ee3:	89 cf                	mov    edi,ecx
c0001ee5:	83 ca ff             	or     edx,0xffffffff
c0001ee8:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eee:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ef4:	75 70                	jne    c0001f66 <tchar2uni+0xd2>
c0001ef6:	89 ca                	mov    edx,ecx
c0001ef8:	b9 03 00 00 00       	mov    ecx,0x3
c0001efd:	83 e2 07             	and    edx,0x7
c0001f00:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001f04:	46                   	inc    esi
c0001f05:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001f08:	89 cf                	mov    edi,ecx
c0001f0a:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001f10:	83 c7 80             	add    edi,0xffffff80
c0001f13:	75 4e                	jne    c0001f63 <tchar2uni+0xcf>
c0001f15:	c1 e2 06             	shl    edx,0x6
c0001f18:	83 e1 3f             	and    ecx,0x3f
c0001f1b:	09 ca                	or     edx,ecx
c0001f1d:	39 de                	cmp    esi,ebx
c0001f1f:	75 e3                	jne    c0001f04 <tchar2uni+0x70>
c0001f21:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001f27:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f2d:	76 34                	jbe    c0001f63 <tchar2uni+0xcf>
c0001f2f:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001f32:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001f38:	77 29                	ja     c0001f63 <tchar2uni+0xcf>
c0001f3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f40:	76 1d                	jbe    c0001f5f <tchar2uni+0xcb>
c0001f42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f4e:	c1 e1 06             	shl    ecx,0x6
c0001f51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f57:	09 ca                	or     edx,ecx
c0001f59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f5f:	89 18                	mov    DWORD PTR [eax],ebx
c0001f61:	eb 03                	jmp    c0001f66 <tchar2uni+0xd2>
c0001f63:	83 ca ff             	or     edx,0xffffffff
c0001f66:	5b                   	pop    ebx
c0001f67:	89 d0                	mov    eax,edx
c0001f69:	5e                   	pop    esi
c0001f6a:	5f                   	pop    edi
c0001f6b:	c3                   	ret    

c0001f6c <put_utf>:
c0001f6c:	53                   	push   ebx
c0001f6d:	83 f8 7f             	cmp    eax,0x7f
c0001f70:	89 c3                	mov    ebx,eax
c0001f72:	b0 00                	mov    al,0x0
c0001f74:	77 11                	ja     c0001f87 <put_utf+0x1b>
c0001f76:	85 c9                	test   ecx,ecx
c0001f78:	0f 84 e5 00 00 00    	je     c0002063 <put_utf+0xf7>
c0001f7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001f80:	b0 01                	mov    al,0x1
c0001f82:	e9 dc 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001f87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f8d:	77 23                	ja     c0001fb2 <put_utf+0x46>
c0001f8f:	83 f9 01             	cmp    ecx,0x1
c0001f92:	0f 86 cb 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001f98:	89 d8                	mov    eax,ebx
c0001f9a:	83 e3 3f             	and    ebx,0x3f
c0001f9d:	c1 e8 06             	shr    eax,0x6
c0001fa0:	83 cb 80             	or     ebx,0xffffff80
c0001fa3:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001fa6:	83 c8 c0             	or     eax,0xffffffc0
c0001fa9:	88 02                	mov    BYTE PTR [edx],al
c0001fab:	b0 02                	mov    al,0x2
c0001fad:	e9 b1 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001fb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001fb8:	77 40                	ja     c0001ffa <put_utf+0x8e>
c0001fba:	83 f9 02             	cmp    ecx,0x2
c0001fbd:	0f 86 a0 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fc3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001fc9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001fcf:	0f 86 8e 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fd5:	89 d8                	mov    eax,ebx
c0001fd7:	c1 e8 0c             	shr    eax,0xc
c0001fda:	83 c8 e0             	or     eax,0xffffffe0
c0001fdd:	88 02                	mov    BYTE PTR [edx],al
c0001fdf:	89 d8                	mov    eax,ebx
c0001fe1:	83 e3 3f             	and    ebx,0x3f
c0001fe4:	c1 e8 06             	shr    eax,0x6
c0001fe7:	83 cb 80             	or     ebx,0xffffff80
c0001fea:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fed:	83 e0 3f             	and    eax,0x3f
c0001ff0:	83 c8 80             	or     eax,0xffffff80
c0001ff3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ff6:	b0 03                	mov    al,0x3
c0001ff8:	eb 69                	jmp    c0002063 <put_utf+0xf7>
c0001ffa:	83 f9 03             	cmp    ecx,0x3
c0001ffd:	76 64                	jbe    c0002063 <put_utf+0xf7>
c0001fff:	89 d9                	mov    ecx,ebx
c0002001:	0f b7 c3             	movzx  eax,bx
c0002004:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c000200a:	66 31 c9             	xor    cx,cx
c000200d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0002013:	c1 e9 06             	shr    ecx,0x6
c0002016:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c000201c:	77 43                	ja     c0002061 <put_utf+0xf5>
c000201e:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002024:	77 3b                	ja     c0002061 <put_utf+0xf5>
c0002026:	09 cb                	or     ebx,ecx
c0002028:	81 c3 00 00 01 00    	add    ebx,0x10000
c000202e:	89 d8                	mov    eax,ebx
c0002030:	c1 e8 12             	shr    eax,0x12
c0002033:	83 c8 f0             	or     eax,0xfffffff0
c0002036:	88 02                	mov    BYTE PTR [edx],al
c0002038:	89 d8                	mov    eax,ebx
c000203a:	c1 e8 0c             	shr    eax,0xc
c000203d:	83 e0 3f             	and    eax,0x3f
c0002040:	83 c8 80             	or     eax,0xffffff80
c0002043:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002046:	89 d8                	mov    eax,ebx
c0002048:	83 e3 3f             	and    ebx,0x3f
c000204b:	c1 e8 06             	shr    eax,0x6
c000204e:	83 cb 80             	or     ebx,0xffffff80
c0002051:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002054:	83 e0 3f             	and    eax,0x3f
c0002057:	83 c8 80             	or     eax,0xffffff80
c000205a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000205d:	b0 04                	mov    al,0x4
c000205f:	eb 02                	jmp    c0002063 <put_utf+0xf7>
c0002061:	31 c0                	xor    eax,eax
c0002063:	5b                   	pop    ebx
c0002064:	c3                   	ret    

c0002065 <clst2sect>:
c0002065:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002068:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000206b:	83 ea 02             	sub    edx,0x2
c000206e:	39 ca                	cmp    edx,ecx
c0002070:	76 0d                	jbe    c000207f <clst2sect+0x1a>
c0002072:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002076:	0f af d1             	imul   edx,ecx
c0002079:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000207c:	89 d0                	mov    eax,edx
c000207e:	c3                   	ret    
c000207f:	31 c0                	xor    eax,eax
c0002081:	c3                   	ret    

c0002082 <pick_lfn>:
c0002082:	55                   	push   ebp
c0002083:	57                   	push   edi
c0002084:	89 c7                	mov    edi,eax
c0002086:	56                   	push   esi
c0002087:	53                   	push   ebx
c0002088:	89 d3                	mov    ebx,edx
c000208a:	8d 42 1a             	lea    eax,[edx+0x1a]
c000208d:	e8 7d fd ff ff       	call   c0001e0f <ld_word>
c0002092:	66 85 c0             	test   ax,ax
c0002095:	74 04                	je     c000209b <pick_lfn+0x19>
c0002097:	31 c0                	xor    eax,eax
c0002099:	eb 62                	jmp    c00020fd <pick_lfn+0x7b>
c000209b:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000209e:	bd 01 00 00 00       	mov    ebp,0x1
c00020a3:	31 f6                	xor    esi,esi
c00020a5:	83 e1 bf             	and    ecx,0xffffffbf
c00020a8:	49                   	dec    ecx
c00020a9:	6b c9 0d             	imul   ecx,ecx,0xd
c00020ac:	0f b6 86 a0 06 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdf960]
c00020b3:	01 d8                	add    eax,ebx
c00020b5:	e8 55 fd ff ff       	call   c0001e0f <ld_word>
c00020ba:	66 85 ed             	test   bp,bp
c00020bd:	74 11                	je     c00020d0 <pick_lfn+0x4e>
c00020bf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020c5:	77 d0                	ja     c0002097 <pick_lfn+0x15>
c00020c7:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00020cb:	89 c5                	mov    ebp,eax
c00020cd:	41                   	inc    ecx
c00020ce:	eb 0a                	jmp    c00020da <pick_lfn+0x58>
c00020d0:	0f b7 c0             	movzx  eax,ax
c00020d3:	3d ff ff 00 00       	cmp    eax,0xffff
c00020d8:	75 bd                	jne    c0002097 <pick_lfn+0x15>
c00020da:	46                   	inc    esi
c00020db:	83 fe 0d             	cmp    esi,0xd
c00020de:	75 cc                	jne    c00020ac <pick_lfn+0x2a>
c00020e0:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020e3:	74 13                	je     c00020f8 <pick_lfn+0x76>
c00020e5:	66 85 ed             	test   bp,bp
c00020e8:	74 0e                	je     c00020f8 <pick_lfn+0x76>
c00020ea:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020f0:	77 a5                	ja     c0002097 <pick_lfn+0x15>
c00020f2:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020f8:	b8 01 00 00 00       	mov    eax,0x1
c00020fd:	5b                   	pop    ebx
c00020fe:	5e                   	pop    esi
c00020ff:	5f                   	pop    edi
c0002100:	5d                   	pop    ebp
c0002101:	c3                   	ret    

c0002102 <put_lfn>:
c0002102:	55                   	push   ebp
c0002103:	57                   	push   edi
c0002104:	89 d7                	mov    edi,edx
c0002106:	56                   	push   esi
c0002107:	31 f6                	xor    esi,esi
c0002109:	53                   	push   ebx
c000210a:	83 ec 0c             	sub    esp,0xc
c000210d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002111:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0002115:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000211b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000211f:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002122:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002125:	31 d2                	xor    edx,edx
c0002127:	e8 08 fd ff ff       	call   c0001e34 <st_word>
c000212c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002133:	0f b6 d9             	movzx  ebx,cl
c0002136:	4b                   	dec    ebx
c0002137:	6b db 0d             	imul   ebx,ebx,0xd
c000213a:	0f b7 c6             	movzx  eax,si
c000213d:	3d ff ff 00 00       	cmp    eax,0xffff
c0002142:	74 09                	je     c000214d <put_lfn+0x4b>
c0002144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002148:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000214c:	43                   	inc    ebx
c000214d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002150:	0f b7 ee             	movzx  ebp,si
c0002153:	89 ea                	mov    edx,ebp
c0002155:	0f b6 80 a0 06 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf960]
c000215c:	01 f8                	add    eax,edi
c000215e:	e8 d1 fc ff ff       	call   c0001e34 <st_word>
c0002163:	85 ed                	test   ebp,ebp
c0002165:	75 05                	jne    c000216c <put_lfn+0x6a>
c0002167:	be ff ff 00 00       	mov    esi,0xffff
c000216c:	ff 04 24             	inc    DWORD PTR [esp]
c000216f:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002173:	75 c5                	jne    c000213a <put_lfn+0x38>
c0002175:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000217b:	74 0b                	je     c0002188 <put_lfn+0x86>
c000217d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002181:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002186:	75 07                	jne    c000218f <put_lfn+0x8d>
c0002188:	83 c9 40             	or     ecx,0x40
c000218b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000218f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002193:	88 07                	mov    BYTE PTR [edi],al
c0002195:	83 c4 0c             	add    esp,0xc
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	5f                   	pop    edi
c000219b:	5d                   	pop    ebp
c000219c:	c3                   	ret    

c000219d <gen_numname>:
c000219d:	57                   	push   edi
c000219e:	89 cf                	mov    edi,ecx
c00021a0:	56                   	push   esi
c00021a1:	b9 0b 00 00 00       	mov    ecx,0xb
c00021a6:	53                   	push   ebx
c00021a7:	89 c6                	mov    esi,eax
c00021a9:	83 ec 10             	sub    esp,0x10
c00021ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00021b0:	e8 86 fc ff ff       	call   c0001e3b <mem_cpy>
c00021b5:	83 fb 05             	cmp    ebx,0x5
c00021b8:	76 30                	jbe    c00021ea <gen_numname+0x4d>
c00021ba:	66 8b 07             	mov    ax,WORD PTR [edi]
c00021bd:	66 85 c0             	test   ax,ax
c00021c0:	74 28                	je     c00021ea <gen_numname+0x4d>
c00021c2:	83 c7 02             	add    edi,0x2
c00021c5:	ba 10 00 00 00       	mov    edx,0x10
c00021ca:	89 c1                	mov    ecx,eax
c00021cc:	01 db                	add    ebx,ebx
c00021ce:	c1 e0 10             	shl    eax,0x10
c00021d1:	83 e1 01             	and    ecx,0x1
c00021d4:	c1 e8 11             	shr    eax,0x11
c00021d7:	01 cb                	add    ebx,ecx
c00021d9:	0f ba e3 10          	bt     ebx,0x10
c00021dd:	73 06                	jae    c00021e5 <gen_numname+0x48>
c00021df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021e5:	4a                   	dec    edx
c00021e6:	75 e2                	jne    c00021ca <gen_numname+0x2d>
c00021e8:	eb d0                	jmp    c00021ba <gen_numname+0x1d>
c00021ea:	b8 07 00 00 00       	mov    eax,0x7
c00021ef:	89 d9                	mov    ecx,ebx
c00021f1:	83 e1 0f             	and    ecx,0xf
c00021f4:	8d 79 30             	lea    edi,[ecx+0x30]
c00021f7:	83 ff 39             	cmp    edi,0x39
c00021fa:	89 fa                	mov    edx,edi
c00021fc:	76 03                	jbe    c0002201 <gen_numname+0x64>
c00021fe:	8d 51 37             	lea    edx,[ecx+0x37]
c0002201:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002204:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002208:	89 da                	mov    edx,ebx
c000220a:	c1 ea 04             	shr    edx,0x4
c000220d:	83 fb 0f             	cmp    ebx,0xf
c0002210:	76 06                	jbe    c0002218 <gen_numname+0x7b>
c0002212:	89 c8                	mov    eax,ecx
c0002214:	89 d3                	mov    ebx,edx
c0002216:	eb d7                	jmp    c00021ef <gen_numname+0x52>
c0002218:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000221d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002220:	31 d2                	xor    edx,edx
c0002222:	8d 04 16             	lea    eax,[esi+edx*1]
c0002225:	39 ca                	cmp    edx,ecx
c0002227:	73 19                	jae    c0002242 <gen_numname+0xa5>
c0002229:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000222c:	83 f8 20             	cmp    eax,0x20
c000222f:	74 11                	je     c0002242 <gen_numname+0xa5>
c0002231:	e8 58 fc ff ff       	call   c0001e8e <dbc_1st>
c0002236:	85 c0                	test   eax,eax
c0002238:	74 05                	je     c000223f <gen_numname+0xa2>
c000223a:	39 d3                	cmp    ebx,edx
c000223c:	74 04                	je     c0002242 <gen_numname+0xa5>
c000223e:	42                   	inc    edx
c000223f:	42                   	inc    edx
c0002240:	eb e0                	jmp    c0002222 <gen_numname+0x85>
c0002242:	83 f9 07             	cmp    ecx,0x7
c0002245:	b0 20                	mov    al,0x20
c0002247:	77 05                	ja     c000224e <gen_numname+0xb1>
c0002249:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000224d:	41                   	inc    ecx
c000224e:	42                   	inc    edx
c000224f:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002253:	83 fa 07             	cmp    edx,0x7
c0002256:	76 ea                	jbe    c0002242 <gen_numname+0xa5>
c0002258:	83 c4 10             	add    esp,0x10
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	5f                   	pop    edi
c000225e:	c3                   	ret    

c000225f <sum_sfn>:
c000225f:	53                   	push   ebx
c0002260:	31 c9                	xor    ecx,ecx
c0002262:	31 db                	xor    ebx,ebx
c0002264:	0f b6 d1             	movzx  edx,cl
c0002267:	d1 ea                	shr    edx,1
c0002269:	c1 e1 07             	shl    ecx,0x7
c000226c:	09 ca                	or     edx,ecx
c000226e:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002271:	43                   	inc    ebx
c0002272:	01 ca                	add    edx,ecx
c0002274:	83 fb 0b             	cmp    ebx,0xb
c0002277:	88 d1                	mov    cl,dl
c0002279:	75 e9                	jne    c0002264 <sum_sfn+0x5>
c000227b:	5b                   	pop    ebx
c000227c:	88 d0                	mov    al,dl
c000227e:	c3                   	ret    

c000227f <get_ldnumber>:
c000227f:	55                   	push   ebp
c0002280:	57                   	push   edi
c0002281:	56                   	push   esi
c0002282:	83 ce ff             	or     esi,0xffffffff
c0002285:	53                   	push   ebx
c0002286:	8b 10                	mov    edx,DWORD PTR [eax]
c0002288:	85 d2                	test   edx,edx
c000228a:	74 38                	je     c00022c4 <get_ldnumber+0x45>
c000228c:	89 c5                	mov    ebp,eax
c000228e:	89 d1                	mov    ecx,edx
c0002290:	41                   	inc    ecx
c0002291:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002295:	80 fb 1f             	cmp    bl,0x1f
c0002298:	76 05                	jbe    c000229f <get_ldnumber+0x20>
c000229a:	83 fb 3a             	cmp    ebx,0x3a
c000229d:	75 f1                	jne    c0002290 <get_ldnumber+0x11>
c000229f:	31 f6                	xor    esi,esi
c00022a1:	83 fb 3a             	cmp    ebx,0x3a
c00022a4:	75 1e                	jne    c00022c4 <get_ldnumber+0x45>
c00022a6:	8a 1a                	mov    bl,BYTE PTR [edx]
c00022a8:	83 ce ff             	or     esi,0xffffffff
c00022ab:	8d 7b d0             	lea    edi,[ebx-0x30]
c00022ae:	89 f8                	mov    eax,edi
c00022b0:	3c 09                	cmp    al,0x9
c00022b2:	77 10                	ja     c00022c4 <get_ldnumber+0x45>
c00022b4:	83 c2 02             	add    edx,0x2
c00022b7:	39 d1                	cmp    ecx,edx
c00022b9:	75 09                	jne    c00022c4 <get_ldnumber+0x45>
c00022bb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00022be:	0f be f3             	movsx  esi,bl
c00022c1:	83 ee 30             	sub    esi,0x30
c00022c4:	5b                   	pop    ebx
c00022c5:	89 f0                	mov    eax,esi
c00022c7:	5e                   	pop    esi
c00022c8:	5f                   	pop    edi
c00022c9:	5d                   	pop    ebp
c00022ca:	c3                   	ret    

c00022cb <validate>:
c00022cb:	56                   	push   esi
c00022cc:	85 c0                	test   eax,eax
c00022ce:	53                   	push   ebx
c00022cf:	89 d6                	mov    esi,edx
c00022d1:	51                   	push   ecx
c00022d2:	75 09                	jne    c00022dd <validate+0x12>
c00022d4:	b8 09 00 00 00       	mov    eax,0x9
c00022d9:	31 c9                	xor    ecx,ecx
c00022db:	eb 2e                	jmp    c000230b <validate+0x40>
c00022dd:	89 c3                	mov    ebx,eax
c00022df:	8b 00                	mov    eax,DWORD PTR [eax]
c00022e1:	85 c0                	test   eax,eax
c00022e3:	74 ef                	je     c00022d4 <validate+0x9>
c00022e5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022e8:	74 ea                	je     c00022d4 <validate+0x9>
c00022ea:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022ed:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022f1:	75 e1                	jne    c00022d4 <validate+0x9>
c00022f3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f7:	83 ec 0c             	sub    esp,0xc
c00022fa:	50                   	push   eax
c00022fb:	e8 be fa ff ff       	call   c0001dbe <disk_status>
c0002300:	83 c4 10             	add    esp,0x10
c0002303:	a8 01                	test   al,0x1
c0002305:	75 cd                	jne    c00022d4 <validate+0x9>
c0002307:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002309:	31 c0                	xor    eax,eax
c000230b:	89 0e                	mov    DWORD PTR [esi],ecx
c000230d:	5a                   	pop    edx
c000230e:	5b                   	pop    ebx
c000230f:	5e                   	pop    esi
c0002310:	c3                   	ret    

c0002311 <sync_window>:
c0002311:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002315:	74 58                	je     c000236f <sync_window+0x5e>
c0002317:	56                   	push   esi
c0002318:	53                   	push   ebx
c0002319:	89 c3                	mov    ebx,eax
c000231b:	51                   	push   ecx
c000231c:	6a 01                	push   0x1
c000231e:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002321:	8d 70 34             	lea    esi,[eax+0x34]
c0002324:	56                   	push   esi
c0002325:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002329:	50                   	push   eax
c000232a:	e8 ab fa ff ff       	call   c0001dda <disk_write>
c000232f:	83 c4 10             	add    esp,0x10
c0002332:	ba 01 00 00 00       	mov    edx,0x1
c0002337:	85 c0                	test   eax,eax
c0002339:	75 2e                	jne    c0002369 <sync_window+0x58>
c000233b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000233f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002342:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002345:	89 c1                	mov    ecx,eax
c0002347:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000234a:	39 d1                	cmp    ecx,edx
c000234c:	73 19                	jae    c0002367 <sync_window+0x56>
c000234e:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002352:	75 13                	jne    c0002367 <sync_window+0x56>
c0002354:	6a 01                	push   0x1
c0002356:	01 d0                	add    eax,edx
c0002358:	50                   	push   eax
c0002359:	56                   	push   esi
c000235a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000235e:	50                   	push   eax
c000235f:	e8 76 fa ff ff       	call   c0001dda <disk_write>
c0002364:	83 c4 10             	add    esp,0x10
c0002367:	31 d2                	xor    edx,edx
c0002369:	89 d0                	mov    eax,edx
c000236b:	5a                   	pop    edx
c000236c:	5b                   	pop    ebx
c000236d:	5e                   	pop    esi
c000236e:	c3                   	ret    
c000236f:	31 d2                	xor    edx,edx
c0002371:	89 d0                	mov    eax,edx
c0002373:	c3                   	ret    

c0002374 <move_window>:
c0002374:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002377:	74 3a                	je     c00023b3 <move_window+0x3f>
c0002379:	56                   	push   esi
c000237a:	89 d6                	mov    esi,edx
c000237c:	53                   	push   ebx
c000237d:	89 c3                	mov    ebx,eax
c000237f:	51                   	push   ecx
c0002380:	e8 8c ff ff ff       	call   c0002311 <sync_window>
c0002385:	85 c0                	test   eax,eax
c0002387:	75 2d                	jne    c00023b6 <move_window+0x42>
c0002389:	6a 01                	push   0x1
c000238b:	56                   	push   esi
c000238c:	8d 43 34             	lea    eax,[ebx+0x34]
c000238f:	50                   	push   eax
c0002390:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 2a fa ff ff       	call   c0001dc4 <disk_read>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	89 c2                	mov    edx,eax
c000239f:	31 c0                	xor    eax,eax
c00023a1:	85 d2                	test   edx,edx
c00023a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00023a8:	0f 45 f2             	cmovne esi,edx
c00023ab:	0f 95 c0             	setne  al
c00023ae:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00023b1:	eb 03                	jmp    c00023b6 <move_window+0x42>
c00023b3:	31 c0                	xor    eax,eax
c00023b5:	c3                   	ret    
c00023b6:	5a                   	pop    edx
c00023b7:	5b                   	pop    ebx
c00023b8:	5e                   	pop    esi
c00023b9:	c3                   	ret    

c00023ba <check_fs>:
c00023ba:	53                   	push   ebx
c00023bb:	89 c3                	mov    ebx,eax
c00023bd:	83 ec 08             	sub    esp,0x8
c00023c0:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023c4:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00023cb:	e8 a4 ff ff ff       	call   c0002374 <move_window>
c00023d0:	ba 04 00 00 00       	mov    edx,0x4
c00023d5:	85 c0                	test   eax,eax
c00023d7:	75 68                	jne    c0002441 <check_fs+0x87>
c00023d9:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023df:	e8 2b fa ff ff       	call   c0001e0f <ld_word>
c00023e4:	ba 03 00 00 00       	mov    edx,0x3
c00023e9:	66 3d 55 aa          	cmp    ax,0xaa55
c00023ed:	75 52                	jne    c0002441 <check_fs+0x87>
c00023ef:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023f2:	8d 50 18             	lea    edx,[eax+0x18]
c00023f5:	80 fa 01             	cmp    dl,0x1
c00023f8:	76 09                	jbe    c0002403 <check_fs+0x49>
c00023fa:	3c eb                	cmp    al,0xeb
c00023fc:	ba 02 00 00 00       	mov    edx,0x2
c0002401:	75 3e                	jne    c0002441 <check_fs+0x87>
c0002403:	ba 84 2e 02 c0       	mov    edx,0xc0022e84
c0002408:	b9 03 00 00 00       	mov    ecx,0x3
c000240d:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002410:	e8 45 fa ff ff       	call   c0001e5a <mem_cmp>
c0002415:	31 d2                	xor    edx,edx
c0002417:	85 c0                	test   eax,eax
c0002419:	74 26                	je     c0002441 <check_fs+0x87>
c000241b:	ba 5c 05 02 c0       	mov    edx,0xc002055c
c0002420:	b9 05 00 00 00       	mov    ecx,0x5
c0002425:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000242b:	e8 2a fa ff ff       	call   c0001e5a <mem_cmp>
c0002430:	31 d2                	xor    edx,edx
c0002432:	85 c0                	test   eax,eax
c0002434:	74 0b                	je     c0002441 <check_fs+0x87>
c0002436:	31 d2                	xor    edx,edx
c0002438:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000243c:	0f 95 c2             	setne  dl
c000243f:	01 d2                	add    edx,edx
c0002441:	83 c4 08             	add    esp,0x8
c0002444:	89 d0                	mov    eax,edx
c0002446:	5b                   	pop    ebx
c0002447:	c3                   	ret    

c0002448 <find_volume>:
c0002448:	55                   	push   ebp
c0002449:	57                   	push   edi
c000244a:	56                   	push   esi
c000244b:	89 c6                	mov    esi,eax
c000244d:	53                   	push   ebx
c000244e:	89 d3                	mov    ebx,edx
c0002450:	83 ec 2c             	sub    esp,0x2c
c0002453:	31 d2                	xor    edx,edx
c0002455:	e8 60 ff ff ff       	call   c00023ba <check_fs>
c000245a:	85 db                	test   ebx,ebx
c000245c:	0f 94 c2             	sete   dl
c000245f:	83 f8 02             	cmp    eax,0x2
c0002462:	74 07                	je     c000246b <find_volume+0x23>
c0002464:	77 63                	ja     c00024c9 <find_volume+0x81>
c0002466:	f6 c2 01             	test   dl,0x1
c0002469:	75 5e                	jne    c00024c9 <find_volume+0x81>
c000246b:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002471:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002475:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000247b:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000247f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002483:	89 f8                	mov    eax,edi
c0002485:	83 c7 10             	add    edi,0x10
c0002488:	e8 8f f9 ff ff       	call   c0001e1c <ld_dword>
c000248d:	83 c5 04             	add    ebp,0x4
c0002490:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002494:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002497:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000249b:	75 e2                	jne    c000247f <find_volume+0x37>
c000249d:	83 fb 01             	cmp    ebx,0x1
c00024a0:	0f b6 fa             	movzx  edi,dl
c00024a3:	83 d3 ff             	adc    ebx,0xffffffff
c00024a6:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c00024aa:	b8 03 00 00 00       	mov    eax,0x3
c00024af:	85 d2                	test   edx,edx
c00024b1:	74 07                	je     c00024ba <find_volume+0x72>
c00024b3:	89 f0                	mov    eax,esi
c00024b5:	e8 00 ff ff ff       	call   c00023ba <check_fs>
c00024ba:	83 f8 01             	cmp    eax,0x1
c00024bd:	76 0a                	jbe    c00024c9 <find_volume+0x81>
c00024bf:	85 ff                	test   edi,edi
c00024c1:	74 06                	je     c00024c9 <find_volume+0x81>
c00024c3:	43                   	inc    ebx
c00024c4:	83 fb 03             	cmp    ebx,0x3
c00024c7:	76 dd                	jbe    c00024a6 <find_volume+0x5e>
c00024c9:	83 c4 2c             	add    esp,0x2c
c00024cc:	5b                   	pop    ebx
c00024cd:	5e                   	pop    esi
c00024ce:	5f                   	pop    edi
c00024cf:	5d                   	pop    ebp
c00024d0:	c3                   	ret    

c00024d1 <mount_volume>:
c00024d1:	55                   	push   ebp
c00024d2:	89 d5                	mov    ebp,edx
c00024d4:	57                   	push   edi
c00024d5:	89 cf                	mov    edi,ecx
c00024d7:	56                   	push   esi
c00024d8:	53                   	push   ebx
c00024d9:	bb 0b 00 00 00       	mov    ebx,0xb
c00024de:	83 ec 2c             	sub    esp,0x2c
c00024e1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024e7:	e8 93 fd ff ff       	call   c000227f <get_ldnumber>
c00024ec:	85 c0                	test   eax,eax
c00024ee:	0f 88 d0 02 00 00    	js     c00027c4 <mount_volume+0x2f3>
c00024f4:	8b 34 85 a0 64 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9b60]
c00024fb:	89 c2                	mov    edx,eax
c00024fd:	bb 0c 00 00 00       	mov    ebx,0xc
c0002502:	85 f6                	test   esi,esi
c0002504:	0f 84 ba 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000250a:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c000250d:	83 e7 fe             	and    edi,0xfffffffe
c0002510:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002513:	74 3c                	je     c0002551 <mount_volume+0x80>
c0002515:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002519:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	50                   	push   eax
c0002521:	e8 98 f8 ff ff       	call   c0001dbe <disk_status>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000252d:	a8 01                	test   al,0x1
c000252f:	75 20                	jne    c0002551 <mount_volume+0x80>
c0002531:	31 db                	xor    ebx,ebx
c0002533:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002539:	0f 84 85 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000253f:	a8 04                	test   al,0x4
c0002541:	0f 84 7d 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002547:	bb 0a 00 00 00       	mov    ebx,0xa
c000254c:	e9 73 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c0002551:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002554:	83 ec 0c             	sub    esp,0xc
c0002557:	0f b6 c2             	movzx  eax,dl
c000255a:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000255d:	bb 03 00 00 00       	mov    ebx,0x3
c0002562:	50                   	push   eax
c0002563:	e8 59 f8 ff ff       	call   c0001dc1 <disk_initialize>
c0002568:	83 c4 10             	add    esp,0x10
c000256b:	a8 01                	test   al,0x1
c000256d:	0f 85 51 02 00 00    	jne    c00027c4 <mount_volume+0x2f3>
c0002573:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002579:	74 04                	je     c000257f <mount_volume+0xae>
c000257b:	a8 04                	test   al,0x4
c000257d:	75 c8                	jne    c0002547 <mount_volume+0x76>
c000257f:	31 d2                	xor    edx,edx
c0002581:	89 f0                	mov    eax,esi
c0002583:	e8 c0 fe ff ff       	call   c0002448 <find_volume>
c0002588:	bb 01 00 00 00       	mov    ebx,0x1
c000258d:	83 f8 04             	cmp    eax,0x4
c0002590:	0f 84 2e 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002596:	83 f8 01             	cmp    eax,0x1
c0002599:	76 0a                	jbe    c00025a5 <mount_volume+0xd4>
c000259b:	bb 0d 00 00 00       	mov    ebx,0xd
c00025a0:	e9 1f 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c00025a5:	8d 46 3f             	lea    eax,[esi+0x3f]
c00025a8:	e8 62 f8 ff ff       	call   c0001e0f <ld_word>
c00025ad:	66 3d 00 02          	cmp    ax,0x200
c00025b1:	75 e8                	jne    c000259b <mount_volume+0xca>
c00025b3:	8d 46 4a             	lea    eax,[esi+0x4a]
c00025b6:	e8 54 f8 ff ff       	call   c0001e0f <ld_word>
c00025bb:	0f b7 c0             	movzx  eax,ax
c00025be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025c2:	85 c0                	test   eax,eax
c00025c4:	75 0c                	jne    c00025d2 <mount_volume+0x101>
c00025c6:	8d 46 58             	lea    eax,[esi+0x58]
c00025c9:	e8 4e f8 ff ff       	call   c0001e1c <ld_dword>
c00025ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025d2:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00025d5:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00025d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00025e0:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00025e3:	89 e8                	mov    eax,ebp
c00025e5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025e8:	8d 45 ff             	lea    eax,[ebp-0x1]
c00025eb:	3c 01                	cmp    al,0x1
c00025ed:	77 ac                	ja     c000259b <mount_volume+0xca>
c00025ef:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025f3:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025f7:	66 85 c0             	test   ax,ax
c00025fa:	89 c3                	mov    ebx,eax
c00025fc:	74 9d                	je     c000259b <mount_volume+0xca>
c00025fe:	8d 40 ff             	lea    eax,[eax-0x1]
c0002601:	85 d8                	test   eax,ebx
c0002603:	75 96                	jne    c000259b <mount_volume+0xca>
c0002605:	8d 46 45             	lea    eax,[esi+0x45]
c0002608:	e8 02 f8 ff ff       	call   c0001e0f <ld_word>
c000260d:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002611:	a8 0f                	test   al,0xf
c0002613:	89 c7                	mov    edi,eax
c0002615:	75 84                	jne    c000259b <mount_volume+0xca>
c0002617:	8d 46 47             	lea    eax,[esi+0x47]
c000261a:	e8 f0 f7 ff ff       	call   c0001e0f <ld_word>
c000261f:	0f b7 d0             	movzx  edx,ax
c0002622:	85 d2                	test   edx,edx
c0002624:	75 0a                	jne    c0002630 <mount_volume+0x15f>
c0002626:	8d 46 54             	lea    eax,[esi+0x54]
c0002629:	e8 ee f7 ff ff       	call   c0001e1c <ld_dword>
c000262e:	89 c2                	mov    edx,eax
c0002630:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002634:	8d 46 42             	lea    eax,[esi+0x42]
c0002637:	e8 d3 f7 ff ff       	call   c0001e0f <ld_word>
c000263c:	0f b7 c8             	movzx  ecx,ax
c000263f:	85 c9                	test   ecx,ecx
c0002641:	0f 84 54 ff ff ff    	je     c000259b <mount_volume+0xca>
c0002647:	89 e8                	mov    eax,ebp
c0002649:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000264d:	0f b6 e8             	movzx  ebp,al
c0002650:	0f b7 c7             	movzx  eax,di
c0002653:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002658:	c1 e8 04             	shr    eax,0x4
c000265b:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000265f:	01 e8                	add    eax,ebp
c0002661:	01 c8                	add    eax,ecx
c0002663:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002667:	39 c2                	cmp    edx,eax
c0002669:	0f 82 2c ff ff ff    	jb     c000259b <mount_volume+0xca>
c000266f:	29 c2                	sub    edx,eax
c0002671:	89 d5                	mov    ebp,edx
c0002673:	89 d0                	mov    eax,edx
c0002675:	31 d2                	xor    edx,edx
c0002677:	f7 f3                	div    ebx
c0002679:	39 dd                	cmp    ebp,ebx
c000267b:	0f 82 1a ff ff ff    	jb     c000259b <mount_volume+0xca>
c0002681:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002686:	0f 87 0f ff ff ff    	ja     c000259b <mount_volume+0xca>
c000268c:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002691:	0f 86 1e 01 00 00    	jbe    c00027b5 <mount_volume+0x2e4>
c0002697:	bb 03 00 00 00       	mov    ebx,0x3
c000269c:	8d 68 02             	lea    ebp,[eax+0x2]
c000269f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00026a3:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00026a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00026aa:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00026ae:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00026b1:	01 c8                	add    eax,ecx
c00026b3:	83 fb 03             	cmp    ebx,0x3
c00026b6:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00026b9:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00026bc:	75 23                	jne    c00026e1 <mount_volume+0x210>
c00026be:	8d 46 5e             	lea    eax,[esi+0x5e]
c00026c1:	e8 49 f7 ff ff       	call   c0001e0f <ld_word>
c00026c6:	09 c7                	or     edi,eax
c00026c8:	66 85 ff             	test   di,di
c00026cb:	0f 85 ca fe ff ff    	jne    c000259b <mount_volume+0xca>
c00026d1:	8d 46 60             	lea    eax,[esi+0x60]
c00026d4:	e8 43 f7 ff ff       	call   c0001e1c <ld_dword>
c00026d9:	c1 e5 02             	shl    ebp,0x2
c00026dc:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026df:	eb 25                	jmp    c0002706 <mount_volume+0x235>
c00026e1:	66 85 ff             	test   di,di
c00026e4:	0f 84 b1 fe ff ff    	je     c000259b <mount_volume+0xca>
c00026ea:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00026ee:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00026f2:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00026f6:	83 e5 01             	and    ebp,0x1
c00026f9:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026fc:	d1 ea                	shr    edx,1
c00026fe:	01 d5                	add    ebp,edx
c0002700:	83 fb 02             	cmp    ebx,0x2
c0002703:	0f 44 ef             	cmove  ebp,edi
c0002706:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c000270c:	c1 ed 09             	shr    ebp,0x9
c000270f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002713:	0f 87 82 fe ff ff    	ja     c000259b <mount_volume+0xca>
c0002719:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002720:	83 fb 03             	cmp    ebx,0x3
c0002723:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000272a:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000272e:	75 6e                	jne    c000279e <mount_volume+0x2cd>
c0002730:	8d 46 64             	lea    eax,[esi+0x64]
c0002733:	e8 d7 f6 ff ff       	call   c0001e0f <ld_word>
c0002738:	66 48                	dec    ax
c000273a:	75 62                	jne    c000279e <mount_volume+0x2cd>
c000273c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002740:	89 f0                	mov    eax,esi
c0002742:	42                   	inc    edx
c0002743:	e8 2c fc ff ff       	call   c0002374 <move_window>
c0002748:	85 c0                	test   eax,eax
c000274a:	75 52                	jne    c000279e <mount_volume+0x2cd>
c000274c:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002750:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002756:	e8 b4 f6 ff ff       	call   c0001e0f <ld_word>
c000275b:	66 3d 55 aa          	cmp    ax,0xaa55
c000275f:	75 3d                	jne    c000279e <mount_volume+0x2cd>
c0002761:	8d 46 34             	lea    eax,[esi+0x34]
c0002764:	e8 b3 f6 ff ff       	call   c0001e1c <ld_dword>
c0002769:	3d 52 52 61 41       	cmp    eax,0x41615252
c000276e:	75 2e                	jne    c000279e <mount_volume+0x2cd>
c0002770:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002776:	e8 a1 f6 ff ff       	call   c0001e1c <ld_dword>
c000277b:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002780:	75 1c                	jne    c000279e <mount_volume+0x2cd>
c0002782:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002788:	e8 8f f6 ff ff       	call   c0001e1c <ld_dword>
c000278d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002790:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002796:	e8 81 f6 ff ff       	call   c0001e1c <ld_dword>
c000279b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000279e:	88 1e                	mov    BYTE PTR [esi],bl
c00027a0:	66 a1 80 64 02 c0    	mov    ax,ds:0xc0026480
c00027a6:	31 db                	xor    ebx,ebx
c00027a8:	40                   	inc    eax
c00027a9:	66 a3 80 64 02 c0    	mov    ds:0xc0026480,ax
c00027af:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c00027b3:	eb 0f                	jmp    c00027c4 <mount_volume+0x2f3>
c00027b5:	3d f6 0f 00 00       	cmp    eax,0xff6
c00027ba:	19 db                	sbb    ebx,ebx
c00027bc:	83 c3 02             	add    ebx,0x2
c00027bf:	e9 d8 fe ff ff       	jmp    c000269c <mount_volume+0x1cb>
c00027c4:	83 c4 2c             	add    esp,0x2c
c00027c7:	89 d8                	mov    eax,ebx
c00027c9:	5b                   	pop    ebx
c00027ca:	5e                   	pop    esi
c00027cb:	5f                   	pop    edi
c00027cc:	5d                   	pop    ebp
c00027cd:	c3                   	ret    

c00027ce <put_fat>:
c00027ce:	55                   	push   ebp
c00027cf:	bd 02 00 00 00       	mov    ebp,0x2
c00027d4:	57                   	push   edi
c00027d5:	56                   	push   esi
c00027d6:	53                   	push   ebx
c00027d7:	83 ec 1c             	sub    esp,0x1c
c00027da:	83 fa 01             	cmp    edx,0x1
c00027dd:	0f 86 38 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027e3:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00027e6:	0f 86 2f 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027ec:	89 c6                	mov    esi,eax
c00027ee:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027f1:	89 cf                	mov    edi,ecx
c00027f3:	89 d3                	mov    ebx,edx
c00027f5:	83 f8 02             	cmp    eax,0x2
c00027f8:	0f 84 b1 00 00 00    	je     c00028af <put_fat+0xe1>
c00027fe:	83 f8 03             	cmp    eax,0x3
c0002801:	0f 84 d5 00 00 00    	je     c00028dc <put_fat+0x10e>
c0002807:	48                   	dec    eax
c0002808:	0f 85 0d 01 00 00    	jne    c000291b <put_fat+0x14d>
c000280e:	89 d1                	mov    ecx,edx
c0002810:	89 f0                	mov    eax,esi
c0002812:	d1 e9                	shr    ecx,1
c0002814:	01 d1                	add    ecx,edx
c0002816:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000281a:	89 ca                	mov    edx,ecx
c000281c:	c1 ea 09             	shr    edx,0x9
c000281f:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002822:	e8 4d fb ff ff       	call   c0002374 <move_window>
c0002827:	85 c0                	test   eax,eax
c0002829:	89 c5                	mov    ebp,eax
c000282b:	0f 85 ea 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002831:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002835:	8d 46 34             	lea    eax,[esi+0x34]
c0002838:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000283c:	8d 41 01             	lea    eax,[ecx+0x1]
c000283f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002845:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002849:	83 e3 01             	and    ebx,0x1
c000284c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002850:	89 f8                	mov    eax,edi
c0002852:	74 11                	je     c0002865 <put_fat+0x97>
c0002854:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002856:	89 f8                	mov    eax,edi
c0002858:	c1 e0 04             	shl    eax,0x4
c000285b:	25 f0 0f 00 00       	and    eax,0xff0
c0002860:	83 e2 0f             	and    edx,0xf
c0002863:	09 d0                	or     eax,edx
c0002865:	88 01                	mov    BYTE PTR [ecx],al
c0002867:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000286b:	89 f0                	mov    eax,esi
c000286d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002871:	c1 ea 09             	shr    edx,0x9
c0002874:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002877:	e8 f8 fa ff ff       	call   c0002374 <move_window>
c000287c:	85 c0                	test   eax,eax
c000287e:	89 c5                	mov    ebp,eax
c0002880:	0f 85 95 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000288a:	25 ff 01 00 00       	and    eax,0x1ff
c000288f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002893:	85 db                	test   ebx,ebx
c0002895:	74 07                	je     c000289e <put_fat+0xd0>
c0002897:	c1 ef 04             	shr    edi,0x4
c000289a:	89 f9                	mov    ecx,edi
c000289c:	eb 0d                	jmp    c00028ab <put_fat+0xdd>
c000289e:	8a 08                	mov    cl,BYTE PTR [eax]
c00028a0:	c1 ef 08             	shr    edi,0x8
c00028a3:	83 e7 0f             	and    edi,0xf
c00028a6:	83 e1 f0             	and    ecx,0xfffffff0
c00028a9:	09 f9                	or     ecx,edi
c00028ab:	88 08                	mov    BYTE PTR [eax],cl
c00028ad:	eb 27                	jmp    c00028d6 <put_fat+0x108>
c00028af:	c1 ea 08             	shr    edx,0x8
c00028b2:	89 f0                	mov    eax,esi
c00028b4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028b7:	e8 b8 fa ff ff       	call   c0002374 <move_window>
c00028bc:	85 c0                	test   eax,eax
c00028be:	89 c5                	mov    ebp,eax
c00028c0:	75 59                	jne    c000291b <put_fat+0x14d>
c00028c2:	01 db                	add    ebx,ebx
c00028c4:	0f b7 d7             	movzx  edx,di
c00028c7:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00028cd:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00028d1:	e8 5e f5 ff ff       	call   c0001e34 <st_word>
c00028d6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00028da:	eb 3f                	jmp    c000291b <put_fat+0x14d>
c00028dc:	c1 ea 07             	shr    edx,0x7
c00028df:	89 f0                	mov    eax,esi
c00028e1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028e4:	e8 8b fa ff ff       	call   c0002374 <move_window>
c00028e9:	85 c0                	test   eax,eax
c00028eb:	89 c5                	mov    ebp,eax
c00028ed:	75 2c                	jne    c000291b <put_fat+0x14d>
c00028ef:	c1 e3 02             	shl    ebx,0x2
c00028f2:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028f8:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028fe:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002902:	89 d8                	mov    eax,ebx
c0002904:	e8 13 f5 ff ff       	call   c0001e1c <ld_dword>
c0002909:	25 00 00 00 f0       	and    eax,0xf0000000
c000290e:	09 f8                	or     eax,edi
c0002910:	89 c2                	mov    edx,eax
c0002912:	89 d8                	mov    eax,ebx
c0002914:	e8 1f f5 ff ff       	call   c0001e38 <st_dword>
c0002919:	eb bb                	jmp    c00028d6 <put_fat+0x108>
c000291b:	83 c4 1c             	add    esp,0x1c
c000291e:	89 e8                	mov    eax,ebp
c0002920:	5b                   	pop    ebx
c0002921:	5e                   	pop    esi
c0002922:	5f                   	pop    edi
c0002923:	5d                   	pop    ebp
c0002924:	c3                   	ret    

c0002925 <dir_clear>:
c0002925:	55                   	push   ebp
c0002926:	57                   	push   edi
c0002927:	56                   	push   esi
c0002928:	89 c6                	mov    esi,eax
c000292a:	53                   	push   ebx
c000292b:	83 ec 1c             	sub    esp,0x1c
c000292e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002932:	e8 da f9 ff ff       	call   c0002311 <sync_window>
c0002937:	85 c0                	test   eax,eax
c0002939:	0f 85 c1 00 00 00    	jne    c0002a00 <dir_clear+0xdb>
c000293f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002943:	89 f0                	mov    eax,esi
c0002945:	e8 1b f7 ff ff       	call   c0002065 <clst2sect>
c000294a:	31 d2                	xor    edx,edx
c000294c:	b9 00 02 00 00       	mov    ecx,0x200
c0002951:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002954:	89 c5                	mov    ebp,eax
c0002956:	8d 46 34             	lea    eax,[esi+0x34]
c0002959:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000295d:	e8 ee f4 ff ff       	call   c0001e50 <mem_set>
c0002962:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002966:	b8 00 80 00 00       	mov    eax,0x8000
c000296b:	c1 e3 09             	shl    ebx,0x9
c000296e:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002974:	0f 47 d8             	cmova  ebx,eax
c0002977:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000297d:	76 16                	jbe    c0002995 <dir_clear+0x70>
c000297f:	83 ec 0c             	sub    esp,0xc
c0002982:	53                   	push   ebx
c0002983:	e8 cc 32 00 00       	call   c0005c54 <ff_memalloc>
c0002988:	83 c4 10             	add    esp,0x10
c000298b:	85 c0                	test   eax,eax
c000298d:	89 c7                	mov    edi,eax
c000298f:	75 76                	jne    c0002a07 <dir_clear+0xe2>
c0002991:	d1 eb                	shr    ebx,1
c0002993:	eb e2                	jmp    c0002977 <dir_clear+0x52>
c0002995:	31 db                	xor    ebx,ebx
c0002997:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000299b:	39 d8                	cmp    eax,ebx
c000299d:	76 53                	jbe    c00029f2 <dir_clear+0xcd>
c000299f:	6a 01                	push   0x1
c00029a1:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029a4:	50                   	push   eax
c00029a5:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00029ad:	50                   	push   eax
c00029ae:	e8 27 f4 ff ff       	call   c0001dda <disk_write>
c00029b3:	83 c4 10             	add    esp,0x10
c00029b6:	85 c0                	test   eax,eax
c00029b8:	75 38                	jne    c00029f2 <dir_clear+0xcd>
c00029ba:	43                   	inc    ebx
c00029bb:	eb da                	jmp    c0002997 <dir_clear+0x72>
c00029bd:	52                   	push   edx
c00029be:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029c1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00029c5:	50                   	push   eax
c00029c6:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029ca:	57                   	push   edi
c00029cb:	50                   	push   eax
c00029cc:	e8 09 f4 ff ff       	call   c0001dda <disk_write>
c00029d1:	83 c4 10             	add    esp,0x10
c00029d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029d8:	85 c0                	test   eax,eax
c00029da:	75 0a                	jne    c00029e6 <dir_clear+0xc1>
c00029dc:	01 d3                	add    ebx,edx
c00029de:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029e2:	39 d8                	cmp    eax,ebx
c00029e4:	77 d7                	ja     c00029bd <dir_clear+0x98>
c00029e6:	83 ec 0c             	sub    esp,0xc
c00029e9:	57                   	push   edi
c00029ea:	e8 7d 32 00 00       	call   c0005c6c <ff_memfree>
c00029ef:	83 c4 10             	add    esp,0x10
c00029f2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029f6:	39 d8                	cmp    eax,ebx
c00029f8:	0f 95 c0             	setne  al
c00029fb:	0f b6 c0             	movzx  eax,al
c00029fe:	eb 19                	jmp    c0002a19 <dir_clear+0xf4>
c0002a00:	b8 01 00 00 00       	mov    eax,0x1
c0002a05:	eb 12                	jmp    c0002a19 <dir_clear+0xf4>
c0002a07:	89 d9                	mov    ecx,ebx
c0002a09:	31 d2                	xor    edx,edx
c0002a0b:	e8 40 f4 ff ff       	call   c0001e50 <mem_set>
c0002a10:	89 da                	mov    edx,ebx
c0002a12:	31 db                	xor    ebx,ebx
c0002a14:	c1 ea 09             	shr    edx,0x9
c0002a17:	eb c5                	jmp    c00029de <dir_clear+0xb9>
c0002a19:	83 c4 1c             	add    esp,0x1c
c0002a1c:	5b                   	pop    ebx
c0002a1d:	5e                   	pop    esi
c0002a1e:	5f                   	pop    edi
c0002a1f:	5d                   	pop    ebp
c0002a20:	c3                   	ret    

c0002a21 <create_name>:
c0002a21:	55                   	push   ebp
c0002a22:	89 c5                	mov    ebp,eax
c0002a24:	57                   	push   edi
c0002a25:	89 d7                	mov    edi,edx
c0002a27:	56                   	push   esi
c0002a28:	31 f6                	xor    esi,esi
c0002a2a:	53                   	push   ebx
c0002a2b:	83 ec 3c             	sub    esp,0x3c
c0002a2e:	8b 02                	mov    eax,DWORD PTR [edx]
c0002a30:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a34:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002a37:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002a3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a3e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002a42:	e8 4d f4 ff ff       	call   c0001e94 <tchar2uni>
c0002a47:	83 f8 ff             	cmp    eax,0xffffffff
c0002a4a:	89 c3                	mov    ebx,eax
c0002a4c:	75 0a                	jne    c0002a58 <create_name+0x37>
c0002a4e:	b8 06 00 00 00       	mov    eax,0x6
c0002a53:	e9 7c 02 00 00       	jmp    c0002cd4 <create_name+0x2b3>
c0002a58:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a5d:	76 0c                	jbe    c0002a6b <create_name+0x4a>
c0002a5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a63:	c1 e8 10             	shr    eax,0x10
c0002a66:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002a6a:	46                   	inc    esi
c0002a6b:	0f b7 d3             	movzx  edx,bx
c0002a6e:	89 d8                	mov    eax,ebx
c0002a70:	83 fa 1f             	cmp    edx,0x1f
c0002a73:	76 30                	jbe    c0002aa5 <create_name+0x84>
c0002a75:	83 fa 2f             	cmp    edx,0x2f
c0002a78:	74 2b                	je     c0002aa5 <create_name+0x84>
c0002a7a:	83 fa 5c             	cmp    edx,0x5c
c0002a7d:	74 35                	je     c0002ab4 <create_name+0x93>
c0002a7f:	83 fa 7f             	cmp    edx,0x7f
c0002a82:	77 0e                	ja     c0002a92 <create_name+0x71>
c0002a84:	b8 62 05 02 c0       	mov    eax,0xc0020562
c0002a89:	e8 ef f3 ff ff       	call   c0001e7d <chk_chr>
c0002a8e:	85 c0                	test   eax,eax
c0002a90:	75 bc                	jne    c0002a4e <create_name+0x2d>
c0002a92:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a98:	77 b4                	ja     c0002a4e <create_name+0x2d>
c0002a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9e:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002aa2:	46                   	inc    esi
c0002aa3:	eb 99                	jmp    c0002a3e <create_name+0x1d>
c0002aa5:	66 83 f8 1f          	cmp    ax,0x1f
c0002aa9:	b3 04                	mov    bl,0x4
c0002aab:	76 1a                	jbe    c0002ac7 <create_name+0xa6>
c0002aad:	eb 05                	jmp    c0002ab4 <create_name+0x93>
c0002aaf:	40                   	inc    eax
c0002ab0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002ab4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002ab8:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002abb:	83 fa 2f             	cmp    edx,0x2f
c0002abe:	74 ef                	je     c0002aaf <create_name+0x8e>
c0002ac0:	83 fa 5c             	cmp    edx,0x5c
c0002ac3:	74 ea                	je     c0002aaf <create_name+0x8e>
c0002ac5:	31 db                	xor    ebx,ebx
c0002ac7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002acb:	89 07                	mov    DWORD PTR [edi],eax
c0002acd:	85 f6                	test   esi,esi
c0002acf:	74 16                	je     c0002ae7 <create_name+0xc6>
c0002ad1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad5:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002ada:	83 f8 20             	cmp    eax,0x20
c0002add:	74 05                	je     c0002ae4 <create_name+0xc3>
c0002adf:	83 f8 2e             	cmp    eax,0x2e
c0002ae2:	75 03                	jne    c0002ae7 <create_name+0xc6>
c0002ae4:	4e                   	dec    esi
c0002ae5:	eb e6                	jmp    c0002acd <create_name+0xac>
c0002ae7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aeb:	31 ff                	xor    edi,edi
c0002aed:	85 f6                	test   esi,esi
c0002aef:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002af5:	0f 84 53 ff ff ff    	je     c0002a4e <create_name+0x2d>
c0002afb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aff:	8d 57 01             	lea    edx,[edi+0x1]
c0002b02:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b06:	83 f8 20             	cmp    eax,0x20
c0002b09:	75 04                	jne    c0002b0f <create_name+0xee>
c0002b0b:	89 d7                	mov    edi,edx
c0002b0d:	eb ec                	jmp    c0002afb <create_name+0xda>
c0002b0f:	85 ff                	test   edi,edi
c0002b11:	75 05                	jne    c0002b18 <create_name+0xf7>
c0002b13:	83 f8 2e             	cmp    eax,0x2e
c0002b16:	75 08                	jne    c0002b20 <create_name+0xff>
c0002b18:	83 cb 03             	or     ebx,0x3
c0002b1b:	eb 03                	jmp    c0002b20 <create_name+0xff>
c0002b1d:	4e                   	dec    esi
c0002b1e:	74 0c                	je     c0002b2c <create_name+0x10b>
c0002b20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b24:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002b2a:	75 f1                	jne    c0002b1d <create_name+0xfc>
c0002b2c:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b31:	ba 20 00 00 00       	mov    edx,0x20
c0002b36:	8d 45 20             	lea    eax,[ebp+0x20]
c0002b39:	e8 12 f3 ff ff       	call   c0001e50 <mem_set>
c0002b3e:	31 c9                	xor    ecx,ecx
c0002b40:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002b48:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002b4d:	8d 47 01             	lea    eax,[edi+0x1]
c0002b50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b58:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b5c:	85 c0                	test   eax,eax
c0002b5e:	89 c7                	mov    edi,eax
c0002b60:	0f 84 1d 01 00 00    	je     c0002c83 <create_name+0x262>
c0002b66:	83 f8 20             	cmp    eax,0x20
c0002b69:	74 0b                	je     c0002b76 <create_name+0x155>
c0002b6b:	83 f8 2e             	cmp    eax,0x2e
c0002b6e:	75 0f                	jne    c0002b7f <create_name+0x15e>
c0002b70:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b74:	74 09                	je     c0002b7f <create_name+0x15e>
c0002b76:	83 cb 03             	or     ebx,0x3
c0002b79:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002b7d:	eb ce                	jmp    c0002b4d <create_name+0x12c>
c0002b7f:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002b83:	73 06                	jae    c0002b8b <create_name+0x16a>
c0002b85:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b89:	75 3a                	jne    c0002bc5 <create_name+0x1a4>
c0002b8b:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002b90:	75 08                	jne    c0002b9a <create_name+0x179>
c0002b92:	83 cb 03             	or     ebx,0x3
c0002b95:	e9 e9 00 00 00       	jmp    c0002c83 <create_name+0x262>
c0002b9a:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b9e:	74 0d                	je     c0002bad <create_name+0x18c>
c0002ba0:	83 cb 03             	or     ebx,0x3
c0002ba3:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002ba7:	0f 87 d6 00 00 00    	ja     c0002c83 <create_name+0x262>
c0002bad:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002bb2:	b9 08 00 00 00       	mov    ecx,0x8
c0002bb7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002bbb:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002bc3:	eb b4                	jmp    c0002b79 <create_name+0x158>
c0002bc5:	0f b7 c7             	movzx  eax,di
c0002bc8:	83 f8 7f             	cmp    eax,0x7f
c0002bcb:	76 66                	jbe    c0002c33 <create_name+0x212>
c0002bcd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002bd1:	89 d9                	mov    ecx,ebx
c0002bd3:	83 c9 02             	or     ecx,0x2
c0002bd6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bda:	52                   	push   edx
c0002bdb:	52                   	push   edx
c0002bdc:	68 b5 01 00 00       	push   0x1b5
c0002be1:	50                   	push   eax
c0002be2:	e8 9d 30 00 00       	call   c0005c84 <ff_uni2oem>
c0002be7:	83 c4 10             	add    esp,0x10
c0002bea:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002bee:	a8 80                	test   al,0x80
c0002bf0:	89 c7                	mov    edi,eax
c0002bf2:	74 0c                	je     c0002c00 <create_name+0x1df>
c0002bf4:	83 e7 7f             	and    edi,0x7f
c0002bf7:	0f b6 bf 20 06 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdf9e0]
c0002bfe:	eb 2a                	jmp    c0002c2a <create_name+0x209>
c0002c00:	0f b7 c0             	movzx  eax,ax
c0002c03:	3d ff 00 00 00       	cmp    eax,0xff
c0002c08:	76 20                	jbe    c0002c2a <create_name+0x209>
c0002c0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002c0e:	4a                   	dec    edx
c0002c0f:	39 ca                	cmp    edx,ecx
c0002c11:	77 0c                	ja     c0002c1f <create_name+0x1fe>
c0002c13:	83 cb 03             	or     ebx,0x3
c0002c16:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002c1a:	e9 5a ff ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c1f:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002c23:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c27:	41                   	inc    ecx
c0002c28:	eb 4d                	jmp    c0002c77 <create_name+0x256>
c0002c2a:	66 85 ff             	test   di,di
c0002c2d:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c31:	74 19                	je     c0002c4c <create_name+0x22b>
c0002c33:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002c37:	0f b7 d7             	movzx  edx,di
c0002c3a:	b8 6b 05 02 c0       	mov    eax,0xc002056b
c0002c3f:	e8 39 f2 ff ff       	call   c0001e7d <chk_chr>
c0002c44:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002c48:	85 c0                	test   eax,eax
c0002c4a:	74 0a                	je     c0002c56 <create_name+0x235>
c0002c4c:	83 cb 03             	or     ebx,0x3
c0002c4f:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c54:	eb 21                	jmp    c0002c77 <create_name+0x256>
c0002c56:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c59:	66 83 f8 19          	cmp    ax,0x19
c0002c5d:	77 07                	ja     c0002c66 <create_name+0x245>
c0002c5f:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c64:	eb 11                	jmp    c0002c77 <create_name+0x256>
c0002c66:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c69:	66 83 f8 19          	cmp    ax,0x19
c0002c6d:	77 08                	ja     c0002c77 <create_name+0x256>
c0002c6f:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c74:	83 ef 20             	sub    edi,0x20
c0002c77:	89 f8                	mov    eax,edi
c0002c79:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002c7d:	41                   	inc    ecx
c0002c7e:	e9 f6 fe ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c83:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002c87:	75 04                	jne    c0002c8d <create_name+0x26c>
c0002c89:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002c8d:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002c92:	75 05                	jne    c0002c99 <create_name+0x278>
c0002c94:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c9d:	83 e0 0c             	and    eax,0xc
c0002ca0:	83 f8 0c             	cmp    eax,0xc
c0002ca3:	74 0c                	je     c0002cb1 <create_name+0x290>
c0002ca5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ca9:	83 e0 03             	and    eax,0x3
c0002cac:	83 f8 03             	cmp    eax,0x3
c0002caf:	75 05                	jne    c0002cb6 <create_name+0x295>
c0002cb1:	83 cb 02             	or     ebx,0x2
c0002cb4:	eb 19                	jmp    c0002ccf <create_name+0x2ae>
c0002cb6:	f6 c3 02             	test   bl,0x2
c0002cb9:	75 14                	jne    c0002ccf <create_name+0x2ae>
c0002cbb:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002cc0:	74 03                	je     c0002cc5 <create_name+0x2a4>
c0002cc2:	83 cb 10             	or     ebx,0x10
c0002cc5:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002cca:	74 03                	je     c0002ccf <create_name+0x2ae>
c0002ccc:	83 cb 08             	or     ebx,0x8
c0002ccf:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002cd2:	31 c0                	xor    eax,eax
c0002cd4:	83 c4 3c             	add    esp,0x3c
c0002cd7:	5b                   	pop    ebx
c0002cd8:	5e                   	pop    esi
c0002cd9:	5f                   	pop    edi
c0002cda:	5d                   	pop    ebp
c0002cdb:	c3                   	ret    

c0002cdc <cmp_lfn>:
c0002cdc:	55                   	push   ebp
c0002cdd:	57                   	push   edi
c0002cde:	89 d7                	mov    edi,edx
c0002ce0:	56                   	push   esi
c0002ce1:	53                   	push   ebx
c0002ce2:	83 ec 1c             	sub    esp,0x1c
c0002ce5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002ce9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cec:	e8 1e f1 ff ff       	call   c0001e0f <ld_word>
c0002cf1:	66 85 c0             	test   ax,ax
c0002cf4:	74 07                	je     c0002cfd <cmp_lfn+0x21>
c0002cf6:	31 c0                	xor    eax,eax
c0002cf8:	e9 a4 00 00 00       	jmp    c0002da1 <cmp_lfn+0xc5>
c0002cfd:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cff:	bd 01 00 00 00       	mov    ebp,0x1
c0002d04:	31 c9                	xor    ecx,ecx
c0002d06:	83 e3 3f             	and    ebx,0x3f
c0002d09:	4b                   	dec    ebx
c0002d0a:	6b db 0d             	imul   ebx,ebx,0xd
c0002d0d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d11:	0f b6 81 a0 06 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffdf960]
c0002d18:	01 f8                	add    eax,edi
c0002d1a:	e8 f0 f0 ff ff       	call   c0001e0f <ld_word>
c0002d1f:	66 85 ed             	test   bp,bp
c0002d22:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d26:	0f b7 f0             	movzx  esi,ax
c0002d29:	74 44                	je     c0002d6f <cmp_lfn+0x93>
c0002d2b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002d2f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d35:	77 bf                	ja     c0002cf6 <cmp_lfn+0x1a>
c0002d37:	83 ec 0c             	sub    esp,0xc
c0002d3a:	0f b7 c6             	movzx  eax,si
c0002d3d:	50                   	push   eax
c0002d3e:	e8 55 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d43:	89 c5                	mov    ebp,eax
c0002d45:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002d4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002d50:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d54:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d57:	e8 3c 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d5c:	83 c4 10             	add    esp,0x10
c0002d5f:	39 c5                	cmp    ebp,eax
c0002d61:	75 93                	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d63:	89 f5                	mov    ebp,esi
c0002d65:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002d69:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002d6d:	eb 0c                	jmp    c0002d7b <cmp_lfn+0x9f>
c0002d6f:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002d75:	0f 85 7b ff ff ff    	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d7b:	41                   	inc    ecx
c0002d7c:	83 f9 0d             	cmp    ecx,0xd
c0002d7f:	75 8c                	jne    c0002d0d <cmp_lfn+0x31>
c0002d81:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d84:	74 16                	je     c0002d9c <cmp_lfn+0xc0>
c0002d86:	66 85 ed             	test   bp,bp
c0002d89:	74 11                	je     c0002d9c <cmp_lfn+0xc0>
c0002d8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d8f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d94:	0f 94 c0             	sete   al
c0002d97:	0f b6 c0             	movzx  eax,al
c0002d9a:	eb 05                	jmp    c0002da1 <cmp_lfn+0xc5>
c0002d9c:	b8 01 00 00 00       	mov    eax,0x1
c0002da1:	83 c4 1c             	add    esp,0x1c
c0002da4:	5b                   	pop    ebx
c0002da5:	5e                   	pop    esi
c0002da6:	5f                   	pop    edi
c0002da7:	5d                   	pop    ebp
c0002da8:	c3                   	ret    

c0002da9 <sync_fs>:
c0002da9:	56                   	push   esi
c0002daa:	53                   	push   ebx
c0002dab:	53                   	push   ebx
c0002dac:	89 c3                	mov    ebx,eax
c0002dae:	e8 5e f5 ff ff       	call   c0002311 <sync_window>
c0002db3:	85 c0                	test   eax,eax
c0002db5:	0f 85 9a 00 00 00    	jne    c0002e55 <sync_fs+0xac>
c0002dbb:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002dbe:	75 7b                	jne    c0002e3b <sync_fs+0x92>
c0002dc0:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002dc4:	75 75                	jne    c0002e3b <sync_fs+0x92>
c0002dc6:	8d 73 34             	lea    esi,[ebx+0x34]
c0002dc9:	b9 00 02 00 00       	mov    ecx,0x200
c0002dce:	31 d2                	xor    edx,edx
c0002dd0:	89 f0                	mov    eax,esi
c0002dd2:	e8 79 f0 ff ff       	call   c0001e50 <mem_set>
c0002dd7:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ddd:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002de2:	e8 4d f0 ff ff       	call   c0001e34 <st_word>
c0002de7:	ba 52 52 61 41       	mov    edx,0x41615252
c0002dec:	89 f0                	mov    eax,esi
c0002dee:	e8 45 f0 ff ff       	call   c0001e38 <st_dword>
c0002df3:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002df9:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dfe:	e8 35 f0 ff ff       	call   c0001e38 <st_dword>
c0002e03:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002e06:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002e0c:	e8 27 f0 ff ff       	call   c0001e38 <st_dword>
c0002e11:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e14:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002e1a:	e8 19 f0 ff ff       	call   c0001e38 <st_dword>
c0002e1f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002e22:	6a 01                	push   0x1
c0002e24:	40                   	inc    eax
c0002e25:	50                   	push   eax
c0002e26:	56                   	push   esi
c0002e27:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002e2a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e2e:	50                   	push   eax
c0002e2f:	e8 a6 ef ff ff       	call   c0001dda <disk_write>
c0002e34:	83 c4 10             	add    esp,0x10
c0002e37:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e3b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e3f:	51                   	push   ecx
c0002e40:	6a 00                	push   0x0
c0002e42:	6a 00                	push   0x0
c0002e44:	50                   	push   eax
c0002e45:	e8 a6 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e4a:	83 c4 10             	add    esp,0x10
c0002e4d:	85 c0                	test   eax,eax
c0002e4f:	0f 95 c0             	setne  al
c0002e52:	0f b6 c0             	movzx  eax,al
c0002e55:	5a                   	pop    edx
c0002e56:	5b                   	pop    ebx
c0002e57:	5e                   	pop    esi
c0002e58:	c3                   	ret    

c0002e59 <create_partition>:
c0002e59:	55                   	push   ebp
c0002e5a:	0f b6 c0             	movzx  eax,al
c0002e5d:	57                   	push   edi
c0002e5e:	56                   	push   esi
c0002e5f:	53                   	push   ebx
c0002e60:	83 ec 40             	sub    esp,0x40
c0002e63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e67:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e6b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e6f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e73:	50                   	push   eax
c0002e74:	6a 01                	push   0x1
c0002e76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e7a:	e8 71 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e7f:	83 c4 10             	add    esp,0x10
c0002e82:	85 c0                	test   eax,eax
c0002e84:	0f 85 68 01 00 00    	jne    c0002ff2 <create_partition+0x199>
c0002e8a:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0002e8e:	b9 05 00 00 00       	mov    ecx,0x5
c0002e93:	be 08 00 00 00       	mov    esi,0x8
c0002e98:	89 f0                	mov    eax,esi
c0002e9a:	31 d2                	xor    edx,edx
c0002e9c:	0f b6 d8             	movzx  ebx,al
c0002e9f:	89 e8                	mov    eax,ebp
c0002ea1:	f7 f3                	div    ebx
c0002ea3:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002ea8:	76 0a                	jbe    c0002eb4 <create_partition+0x5b>
c0002eaa:	d1 e6                	shl    esi,1
c0002eac:	49                   	dec    ecx
c0002ead:	75 e9                	jne    c0002e98 <create_partition+0x3f>
c0002eaf:	be ff ff ff ff       	mov    esi,0xffffffff
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	b9 00 02 00 00       	mov    ecx,0x200
c0002ebd:	31 d2                	xor    edx,edx
c0002ebf:	e8 8c ef ff ff       	call   c0001e50 <mem_set>
c0002ec4:	b9 64 00 00 00       	mov    ecx,0x64
c0002ec9:	89 e8                	mov    eax,ebp
c0002ecb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ed3:	31 d2                	xor    edx,edx
c0002ed5:	f7 f1                	div    ecx
c0002ed7:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002edc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002ee0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ee4:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002eea:	89 f0                	mov    eax,esi
c0002eec:	0f b6 c0             	movzx  eax,al
c0002eef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ef3:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0002ef8:	0f 96 c0             	setbe  al
c0002efb:	31 d2                	xor    edx,edx
c0002efd:	85 c9                	test   ecx,ecx
c0002eff:	0f 95 c2             	setne  dl
c0002f02:	85 c2                	test   edx,eax
c0002f04:	0f 84 b7 00 00 00    	je     c0002fc1 <create_partition+0x168>
c0002f0a:	39 e9                	cmp    ecx,ebp
c0002f0c:	0f 83 af 00 00 00    	jae    c0002fc1 <create_partition+0x168>
c0002f12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f16:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f1a:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f1d:	83 fe 64             	cmp    esi,0x64
c0002f20:	77 0b                	ja     c0002f2d <create_partition+0xd4>
c0002f22:	74 07                	je     c0002f2b <create_partition+0xd2>
c0002f24:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f29:	eb 02                	jmp    c0002f2d <create_partition+0xd4>
c0002f2b:	89 ee                	mov    esi,ebp
c0002f2d:	89 ca                	mov    edx,ecx
c0002f2f:	31 c0                	xor    eax,eax
c0002f31:	01 f2                	add    edx,esi
c0002f33:	0f 92 c0             	setb   al
c0002f36:	39 ea                	cmp    edx,ebp
c0002f38:	77 04                	ja     c0002f3e <create_partition+0xe5>
c0002f3a:	85 c0                	test   eax,eax
c0002f3c:	74 06                	je     c0002f44 <create_partition+0xeb>
c0002f3e:	89 ee                	mov    esi,ebp
c0002f40:	29 ce                	sub    esi,ecx
c0002f42:	eb 04                	jmp    c0002f48 <create_partition+0xef>
c0002f44:	85 f6                	test   esi,esi
c0002f46:	74 79                	je     c0002fc1 <create_partition+0x168>
c0002f48:	89 ca                	mov    edx,ecx
c0002f4a:	89 d8                	mov    eax,ebx
c0002f4c:	e8 e7 ee ff ff       	call   c0001e38 <st_dword>
c0002f51:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f54:	89 f2                	mov    edx,esi
c0002f56:	e8 dd ee ff ff       	call   c0001e38 <st_dword>
c0002f5b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f5f:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f64:	31 d2                	xor    edx,edx
c0002f66:	83 c3 10             	add    ebx,0x10
c0002f69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f6d:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f70:	89 c8                	mov    eax,ecx
c0002f72:	01 f1                	add    ecx,esi
c0002f74:	f7 f7                	div    edi
c0002f76:	89 d7                	mov    edi,edx
c0002f78:	31 d2                	xor    edx,edx
c0002f7a:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f7e:	47                   	inc    edi
c0002f7f:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f82:	89 c2                	mov    edx,eax
c0002f84:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f87:	c1 ea 02             	shr    edx,0x2
c0002f8a:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f8d:	83 e2 c0             	and    edx,0xffffffc0
c0002f90:	09 fa                	or     edx,edi
c0002f92:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f97:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f9a:	31 d2                	xor    edx,edx
c0002f9c:	f7 f7                	div    edi
c0002f9e:	89 d6                	mov    esi,edx
c0002fa0:	31 d2                	xor    edx,edx
c0002fa2:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002fa6:	46                   	inc    esi
c0002fa7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002faa:	89 c7                	mov    edi,eax
c0002fac:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002faf:	c1 ef 02             	shr    edi,0x2
c0002fb2:	83 e7 c0             	and    edi,0xffffffc0
c0002fb5:	09 fe                	or     esi,edi
c0002fb7:	89 f2                	mov    edx,esi
c0002fb9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fbc:	e9 32 ff ff ff       	jmp    c0002ef3 <create_partition+0x9a>
c0002fc1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002fc5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fca:	05 fe 01 00 00       	add    eax,0x1fe
c0002fcf:	e8 60 ee ff ff       	call   c0001e34 <st_word>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	6a 00                	push   0x0
c0002fd8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002fdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002fe0:	e8 f5 ed ff ff       	call   c0001dda <disk_write>
c0002fe5:	83 c4 10             	add    esp,0x10
c0002fe8:	85 c0                	test   eax,eax
c0002fea:	0f 95 c0             	setne  al
c0002fed:	0f b6 c0             	movzx  eax,al
c0002ff0:	eb 05                	jmp    c0002ff7 <create_partition+0x19e>
c0002ff2:	b8 01 00 00 00       	mov    eax,0x1
c0002ff7:	83 c4 3c             	add    esp,0x3c
c0002ffa:	5b                   	pop    ebx
c0002ffb:	5e                   	pop    esi
c0002ffc:	5f                   	pop    edi
c0002ffd:	5d                   	pop    ebp
c0002ffe:	c3                   	ret    

c0002fff <get_fileinfo>:
c0002fff:	55                   	push   ebp
c0003000:	57                   	push   edi
c0003001:	56                   	push   esi
c0003002:	53                   	push   ebx
c0003003:	83 ec 1c             	sub    esp,0x1c
c0003006:	8b 30                	mov    esi,DWORD PTR [eax]
c0003008:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c000300c:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003010:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003014:	0f 84 de 01 00 00    	je     c00031f8 <get_fileinfo+0x1f9>
c000301a:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c000301e:	89 d3                	mov    ebx,edx
c0003020:	89 c6                	mov    esi,eax
c0003022:	74 7d                	je     c00030a1 <get_fileinfo+0xa2>
c0003024:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000302c:	31 ff                	xor    edi,edi
c000302e:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003035:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003039:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000303d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003040:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003044:	85 c0                	test   eax,eax
c0003046:	89 c2                	mov    edx,eax
c0003048:	74 44                	je     c000308e <get_fileinfo+0x8f>
c000304a:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c000304f:	85 ed                	test   ebp,ebp
c0003051:	75 0d                	jne    c0003060 <get_fileinfo+0x61>
c0003053:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003059:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000305e:	76 20                	jbe    c0003080 <get_fileinfo+0x81>
c0003060:	c1 e5 10             	shl    ebp,0x10
c0003063:	b9 ff 00 00 00       	mov    ecx,0xff
c0003068:	29 f9                	sub    ecx,edi
c000306a:	09 e8                	or     eax,ebp
c000306c:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003070:	e8 f7 ee ff ff       	call   c0001f6c <put_utf>
c0003075:	0f b6 c0             	movzx  eax,al
c0003078:	85 c0                	test   eax,eax
c000307a:	74 10                	je     c000308c <get_fileinfo+0x8d>
c000307c:	01 c7                	add    edi,eax
c000307e:	31 d2                	xor    edx,edx
c0003080:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003085:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000308a:	eb a9                	jmp    c0003035 <get_fileinfo+0x36>
c000308c:	31 ff                	xor    edi,edi
c000308e:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003094:	b8 00 00 00 00       	mov    eax,0x0
c0003099:	0f 45 f8             	cmovne edi,eax
c000309c:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c00030a1:	31 ff                	xor    edi,edi
c00030a3:	31 c9                	xor    ecx,ecx
c00030a5:	83 f9 0a             	cmp    ecx,0xa
c00030a8:	0f 87 ac 00 00 00    	ja     c000315a <get_fileinfo+0x15b>
c00030ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b1:	8d 69 01             	lea    ebp,[ecx+0x1]
c00030b4:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00030b8:	83 f8 20             	cmp    eax,0x20
c00030bb:	89 c2                	mov    edx,eax
c00030bd:	0f 84 90 00 00 00    	je     c0003153 <get_fileinfo+0x154>
c00030c3:	83 f8 05             	cmp    eax,0x5
c00030c6:	75 05                	jne    c00030cd <get_fileinfo+0xce>
c00030c8:	ba e5 00 00 00       	mov    edx,0xe5
c00030cd:	83 fd 09             	cmp    ebp,0x9
c00030d0:	75 0b                	jne    c00030dd <get_fileinfo+0xde>
c00030d2:	83 ff 0b             	cmp    edi,0xb
c00030d5:	77 06                	ja     c00030dd <get_fileinfo+0xde>
c00030d7:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00030dc:	47                   	inc    edi
c00030dd:	0f b7 c2             	movzx  eax,dx
c00030e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030e4:	e8 a5 ed ff ff       	call   c0001e8e <dbc_1st>
c00030e9:	85 c0                	test   eax,eax
c00030eb:	74 2f                	je     c000311c <get_fileinfo+0x11d>
c00030ed:	83 fd 08             	cmp    ebp,0x8
c00030f0:	74 2a                	je     c000311c <get_fileinfo+0x11d>
c00030f2:	83 fd 0b             	cmp    ebp,0xb
c00030f5:	74 25                	je     c000311c <get_fileinfo+0x11d>
c00030f7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030fa:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030fe:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c0003102:	e8 8a ed ff ff       	call   c0001e91 <dbc_2nd>
c0003107:	85 c0                	test   eax,eax
c0003109:	74 11                	je     c000311c <get_fileinfo+0x11d>
c000310b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000310f:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003112:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c0003117:	c1 e0 08             	shl    eax,0x8
c000311a:	09 c2                	or     edx,eax
c000311c:	50                   	push   eax
c000311d:	0f b7 d2             	movzx  edx,dx
c0003120:	50                   	push   eax
c0003121:	68 b5 01 00 00       	push   0x1b5
c0003126:	52                   	push   edx
c0003127:	e8 f4 2b 00 00       	call   c0005d20 <ff_oem2uni>
c000312c:	83 c4 10             	add    esp,0x10
c000312f:	0f b7 c0             	movzx  eax,ax
c0003132:	85 c0                	test   eax,eax
c0003134:	75 04                	jne    c000313a <get_fileinfo+0x13b>
c0003136:	31 ff                	xor    edi,edi
c0003138:	eb 20                	jmp    c000315a <get_fileinfo+0x15b>
c000313a:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000313e:	b9 0c 00 00 00       	mov    ecx,0xc
c0003143:	29 f9                	sub    ecx,edi
c0003145:	e8 22 ee ff ff       	call   c0001f6c <put_utf>
c000314a:	0f b6 c0             	movzx  eax,al
c000314d:	85 c0                	test   eax,eax
c000314f:	74 e5                	je     c0003136 <get_fileinfo+0x137>
c0003151:	01 c7                	add    edi,eax
c0003153:	89 e9                	mov    ecx,ebp
c0003155:	e9 4b ff ff ff       	jmp    c00030a5 <get_fileinfo+0xa6>
c000315a:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000315f:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003163:	75 5f                	jne    c00031c4 <get_fileinfo+0x1c5>
c0003165:	85 ff                	test   edi,edi
c0003167:	75 0b                	jne    c0003174 <get_fileinfo+0x175>
c0003169:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000316d:	ba 01 00 00 00       	mov    edx,0x1
c0003172:	eb 3e                	jmp    c00031b2 <get_fileinfo+0x1b3>
c0003174:	bf 08 00 00 00       	mov    edi,0x8
c0003179:	31 d2                	xor    edx,edx
c000317b:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003181:	84 c0                	test   al,al
c0003183:	74 2d                	je     c00031b2 <get_fileinfo+0x1b3>
c0003185:	66 83 f8 2e          	cmp    ax,0x2e
c0003189:	74 1b                	je     c00031a6 <get_fileinfo+0x1a7>
c000318b:	8d 48 bf             	lea    ecx,[eax-0x41]
c000318e:	66 83 f9 19          	cmp    cx,0x19
c0003192:	77 17                	ja     c00031ab <get_fileinfo+0x1ac>
c0003194:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003197:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000319a:	21 f9                	and    ecx,edi
c000319c:	80 e1 18             	and    cl,0x18
c000319f:	74 0a                	je     c00031ab <get_fileinfo+0x1ac>
c00031a1:	83 c0 20             	add    eax,0x20
c00031a4:	eb 05                	jmp    c00031ab <get_fileinfo+0x1ac>
c00031a6:	bf 10 00 00 00       	mov    edi,0x10
c00031ab:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c00031af:	42                   	inc    edx
c00031b0:	eb c9                	jmp    c000317b <get_fileinfo+0x17c>
c00031b2:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c00031b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ba:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c00031be:	75 04                	jne    c00031c4 <get_fileinfo+0x1c5>
c00031c0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00031c4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031c7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00031ca:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00031cd:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031d0:	83 c0 1c             	add    eax,0x1c
c00031d3:	e8 44 ec ff ff       	call   c0001e1c <ld_dword>
c00031d8:	89 03                	mov    DWORD PTR [ebx],eax
c00031da:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031dd:	83 c0 16             	add    eax,0x16
c00031e0:	e8 2a ec ff ff       	call   c0001e0f <ld_word>
c00031e5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031e9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ec:	83 c0 18             	add    eax,0x18
c00031ef:	e8 1b ec ff ff       	call   c0001e0f <ld_word>
c00031f4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031f8:	83 c4 1c             	add    esp,0x1c
c00031fb:	5b                   	pop    ebx
c00031fc:	5e                   	pop    esi
c00031fd:	5f                   	pop    edi
c00031fe:	5d                   	pop    ebp
c00031ff:	c3                   	ret    

c0003200 <ld_clust.isra.0>:
c0003200:	56                   	push   esi
c0003201:	89 c6                	mov    esi,eax
c0003203:	53                   	push   ebx
c0003204:	89 d3                	mov    ebx,edx
c0003206:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003209:	e8 01 ec ff ff       	call   c0001e0f <ld_word>
c000320e:	0f b7 c8             	movzx  ecx,ax
c0003211:	89 f0                	mov    eax,esi
c0003213:	3c 03                	cmp    al,0x3
c0003215:	75 0d                	jne    c0003224 <ld_clust.isra.0+0x24>
c0003217:	8d 43 14             	lea    eax,[ebx+0x14]
c000321a:	e8 f0 eb ff ff       	call   c0001e0f <ld_word>
c000321f:	c1 e0 10             	shl    eax,0x10
c0003222:	09 c1                	or     ecx,eax
c0003224:	5b                   	pop    ebx
c0003225:	89 c8                	mov    eax,ecx
c0003227:	5e                   	pop    esi
c0003228:	c3                   	ret    

c0003229 <st_clust.isra.1>:
c0003229:	56                   	push   esi
c000322a:	89 c6                	mov    esi,eax
c000322c:	53                   	push   ebx
c000322d:	89 d3                	mov    ebx,edx
c000322f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003232:	0f b7 d1             	movzx  edx,cx
c0003235:	e8 fa eb ff ff       	call   c0001e34 <st_word>
c000323a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000323d:	75 0f                	jne    c000324e <st_clust.isra.1+0x25>
c000323f:	8d 43 14             	lea    eax,[ebx+0x14]
c0003242:	5b                   	pop    ebx
c0003243:	c1 e9 10             	shr    ecx,0x10
c0003246:	89 ca                	mov    edx,ecx
c0003248:	5e                   	pop    esi
c0003249:	e9 e6 eb ff ff       	jmp    c0001e34 <st_word>
c000324e:	5b                   	pop    ebx
c000324f:	5e                   	pop    esi
c0003250:	c3                   	ret    

c0003251 <get_fat.isra.2>:
c0003251:	83 fa 01             	cmp    edx,0x1
c0003254:	b9 01 00 00 00       	mov    ecx,0x1
c0003259:	0f 86 f4 00 00 00    	jbe    c0003353 <get_fat.isra.2+0x102>
c000325f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003262:	0f 83 eb 00 00 00    	jae    c0003353 <get_fat.isra.2+0x102>
c0003268:	55                   	push   ebp
c0003269:	57                   	push   edi
c000326a:	56                   	push   esi
c000326b:	89 c6                	mov    esi,eax
c000326d:	53                   	push   ebx
c000326e:	89 d3                	mov    ebx,edx
c0003270:	83 ec 0c             	sub    esp,0xc
c0003273:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003276:	83 f8 02             	cmp    eax,0x2
c0003279:	74 79                	je     c00032f4 <get_fat.isra.2+0xa3>
c000327b:	83 f8 03             	cmp    eax,0x3
c000327e:	0f 84 97 00 00 00    	je     c000331b <get_fat.isra.2+0xca>
c0003284:	48                   	dec    eax
c0003285:	0f 85 be 00 00 00    	jne    c0003349 <get_fat.isra.2+0xf8>
c000328b:	89 d7                	mov    edi,edx
c000328d:	89 f0                	mov    eax,esi
c000328f:	d1 ef                	shr    edi,1
c0003291:	01 d7                	add    edi,edx
c0003293:	89 fa                	mov    edx,edi
c0003295:	c1 ea 09             	shr    edx,0x9
c0003298:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000329b:	e8 d4 f0 ff ff       	call   c0002374 <move_window>
c00032a0:	85 c0                	test   eax,eax
c00032a2:	74 08                	je     c00032ac <get_fat.isra.2+0x5b>
c00032a4:	83 c9 ff             	or     ecx,0xffffffff
c00032a7:	e9 9d 00 00 00       	jmp    c0003349 <get_fat.isra.2+0xf8>
c00032ac:	8d 6f 01             	lea    ebp,[edi+0x1]
c00032af:	89 f0                	mov    eax,esi
c00032b1:	89 ea                	mov    edx,ebp
c00032b3:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00032b9:	c1 ea 09             	shr    edx,0x9
c00032bc:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00032c1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032c4:	e8 ab f0 ff ff       	call   c0002374 <move_window>
c00032c9:	85 c0                	test   eax,eax
c00032cb:	75 d7                	jne    c00032a4 <get_fat.isra.2+0x53>
c00032cd:	89 f8                	mov    eax,edi
c00032cf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00032d5:	0f b6 f8             	movzx  edi,al
c00032d8:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00032dd:	c1 e0 08             	shl    eax,0x8
c00032e0:	09 f8                	or     eax,edi
c00032e2:	89 c1                	mov    ecx,eax
c00032e4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032ea:	80 e3 01             	and    bl,0x1
c00032ed:	74 5a                	je     c0003349 <get_fat.isra.2+0xf8>
c00032ef:	c1 e8 04             	shr    eax,0x4
c00032f2:	eb 53                	jmp    c0003347 <get_fat.isra.2+0xf6>
c00032f4:	c1 ea 08             	shr    edx,0x8
c00032f7:	89 f0                	mov    eax,esi
c00032f9:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032fc:	e8 73 f0 ff ff       	call   c0002374 <move_window>
c0003301:	85 c0                	test   eax,eax
c0003303:	75 9f                	jne    c00032a4 <get_fat.isra.2+0x53>
c0003305:	01 db                	add    ebx,ebx
c0003307:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c000330d:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0003311:	e8 f9 ea ff ff       	call   c0001e0f <ld_word>
c0003316:	0f b7 c8             	movzx  ecx,ax
c0003319:	eb 2e                	jmp    c0003349 <get_fat.isra.2+0xf8>
c000331b:	c1 ea 07             	shr    edx,0x7
c000331e:	89 f0                	mov    eax,esi
c0003320:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003323:	e8 4c f0 ff ff       	call   c0002374 <move_window>
c0003328:	85 c0                	test   eax,eax
c000332a:	0f 85 74 ff ff ff    	jne    c00032a4 <get_fat.isra.2+0x53>
c0003330:	c1 e3 02             	shl    ebx,0x2
c0003333:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0003339:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000333d:	e8 da ea ff ff       	call   c0001e1c <ld_dword>
c0003342:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003347:	89 c1                	mov    ecx,eax
c0003349:	83 c4 0c             	add    esp,0xc
c000334c:	89 c8                	mov    eax,ecx
c000334e:	5b                   	pop    ebx
c000334f:	5e                   	pop    esi
c0003350:	5f                   	pop    edi
c0003351:	5d                   	pop    ebp
c0003352:	c3                   	ret    
c0003353:	89 c8                	mov    eax,ecx
c0003355:	c3                   	ret    

c0003356 <dir_sdi>:
c0003356:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000335c:	0f 87 b6 00 00 00    	ja     c0003418 <dir_sdi+0xc2>
c0003362:	55                   	push   ebp
c0003363:	57                   	push   edi
c0003364:	56                   	push   esi
c0003365:	53                   	push   ebx
c0003366:	89 d3                	mov    ebx,edx
c0003368:	83 ec 1c             	sub    esp,0x1c
c000336b:	f6 c2 1f             	test   dl,0x1f
c000336e:	74 0a                	je     c000337a <dir_sdi+0x24>
c0003370:	b8 02 00 00 00       	mov    eax,0x2
c0003375:	e9 96 00 00 00       	jmp    c0003410 <dir_sdi+0xba>
c000337a:	89 c6                	mov    esi,eax
c000337c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000337e:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003381:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003384:	85 ff                	test   edi,edi
c0003386:	75 21                	jne    c00033a9 <dir_sdi+0x53>
c0003388:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000338c:	76 07                	jbe    c0003395 <dir_sdi+0x3f>
c000338e:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003391:	85 c0                	test   eax,eax
c0003393:	75 12                	jne    c00033a7 <dir_sdi+0x51>
c0003395:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003399:	89 da                	mov    edx,ebx
c000339b:	c1 ea 05             	shr    edx,0x5
c000339e:	39 c2                	cmp    edx,eax
c00033a0:	73 ce                	jae    c0003370 <dir_sdi+0x1a>
c00033a2:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00033a5:	eb 3c                	jmp    c00033e3 <dir_sdi+0x8d>
c00033a7:	89 c7                	mov    edi,eax
c00033a9:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00033ad:	c1 e1 09             	shl    ecx,0x9
c00033b0:	39 cb                	cmp    ebx,ecx
c00033b2:	72 26                	jb     c00033da <dir_sdi+0x84>
c00033b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00033ba:	89 fa                	mov    edx,edi
c00033bc:	e8 90 fe ff ff       	call   c0003251 <get_fat.isra.2>
c00033c1:	83 f8 ff             	cmp    eax,0xffffffff
c00033c4:	89 c7                	mov    edi,eax
c00033c6:	74 43                	je     c000340b <dir_sdi+0xb5>
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 a3                	jbe    c0003370 <dir_sdi+0x1a>
c00033cd:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00033d0:	76 9e                	jbe    c0003370 <dir_sdi+0x1a>
c00033d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d6:	29 cb                	sub    ebx,ecx
c00033d8:	eb d6                	jmp    c00033b0 <dir_sdi+0x5a>
c00033da:	89 fa                	mov    edx,edi
c00033dc:	89 e8                	mov    eax,ebp
c00033de:	e8 82 ec ff ff       	call   c0002065 <clst2sect>
c00033e3:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033e6:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00033e9:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ec:	85 d2                	test   edx,edx
c00033ee:	74 80                	je     c0003370 <dir_sdi+0x1a>
c00033f0:	89 d8                	mov    eax,ebx
c00033f2:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033f8:	c1 e8 09             	shr    eax,0x9
c00033fb:	01 d0                	add    eax,edx
c00033fd:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003400:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c0003404:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003407:	31 c0                	xor    eax,eax
c0003409:	eb 05                	jmp    c0003410 <dir_sdi+0xba>
c000340b:	b8 01 00 00 00       	mov    eax,0x1
c0003410:	83 c4 1c             	add    esp,0x1c
c0003413:	5b                   	pop    ebx
c0003414:	5e                   	pop    esi
c0003415:	5f                   	pop    edi
c0003416:	5d                   	pop    ebp
c0003417:	c3                   	ret    
c0003418:	b8 02 00 00 00       	mov    eax,0x2
c000341d:	c3                   	ret    

c000341e <create_chain>:
c000341e:	55                   	push   ebp
c000341f:	89 c5                	mov    ebp,eax
c0003421:	57                   	push   edi
c0003422:	89 d7                	mov    edi,edx
c0003424:	56                   	push   esi
c0003425:	53                   	push   ebx
c0003426:	83 ec 1c             	sub    esp,0x1c
c0003429:	85 d2                	test   edx,edx
c000342b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000342d:	75 0e                	jne    c000343d <create_chain+0x1f>
c000342f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003432:	85 c9                	test   ecx,ecx
c0003434:	74 32                	je     c0003468 <create_chain+0x4a>
c0003436:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0003439:	77 32                	ja     c000346d <create_chain+0x4f>
c000343b:	eb 2b                	jmp    c0003468 <create_chain+0x4a>
c000343d:	89 d8                	mov    eax,ebx
c000343f:	e8 0d fe ff ff       	call   c0003251 <get_fat.isra.2>
c0003444:	83 f8 01             	cmp    eax,0x1
c0003447:	77 0a                	ja     c0003453 <create_chain+0x35>
c0003449:	b8 01 00 00 00       	mov    eax,0x1
c000344e:	e9 fd 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003453:	83 f8 ff             	cmp    eax,0xffffffff
c0003456:	0f 84 f1 00 00 00    	je     c000354d <create_chain+0x12f>
c000345c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000345f:	89 f9                	mov    ecx,edi
c0003461:	76 0a                	jbe    c000346d <create_chain+0x4f>
c0003463:	e9 e8 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003468:	b9 01 00 00 00       	mov    ecx,0x1
c000346d:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003471:	75 07                	jne    c000347a <create_chain+0x5c>
c0003473:	31 c0                	xor    eax,eax
c0003475:	e9 d6 00 00 00       	jmp    c0003550 <create_chain+0x132>
c000347a:	39 f9                	cmp    ecx,edi
c000347c:	75 49                	jne    c00034c7 <create_chain+0xa9>
c000347e:	8d 71 01             	lea    esi,[ecx+0x1]
c0003481:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003484:	77 05                	ja     c000348b <create_chain+0x6d>
c0003486:	be 02 00 00 00       	mov    esi,0x2
c000348b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000348f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003492:	89 f2                	mov    edx,esi
c0003494:	e8 b8 fd ff ff       	call   c0003251 <get_fat.isra.2>
c0003499:	83 f8 01             	cmp    eax,0x1
c000349c:	0f 84 ae 00 00 00    	je     c0003550 <create_chain+0x132>
c00034a2:	83 f8 ff             	cmp    eax,0xffffffff
c00034a5:	0f 84 a5 00 00 00    	je     c0003550 <create_chain+0x132>
c00034ab:	85 c0                	test   eax,eax
c00034ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034b1:	74 10                	je     c00034c3 <create_chain+0xa5>
c00034b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00034b6:	83 f8 01             	cmp    eax,0x1
c00034b9:	76 0c                	jbe    c00034c7 <create_chain+0xa9>
c00034bb:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c00034be:	0f 47 c8             	cmova  ecx,eax
c00034c1:	eb 04                	jmp    c00034c7 <create_chain+0xa9>
c00034c3:	85 f6                	test   esi,esi
c00034c5:	75 3b                	jne    c0003502 <create_chain+0xe4>
c00034c7:	89 ce                	mov    esi,ecx
c00034c9:	46                   	inc    esi
c00034ca:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00034cd:	77 0a                	ja     c00034d9 <create_chain+0xbb>
c00034cf:	83 f9 01             	cmp    ecx,0x1
c00034d2:	76 9f                	jbe    c0003473 <create_chain+0x55>
c00034d4:	be 02 00 00 00       	mov    esi,0x2
c00034d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00034dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034e0:	89 f2                	mov    edx,esi
c00034e2:	e8 6a fd ff ff       	call   c0003251 <get_fat.isra.2>
c00034e7:	85 c0                	test   eax,eax
c00034e9:	74 17                	je     c0003502 <create_chain+0xe4>
c00034eb:	83 f8 01             	cmp    eax,0x1
c00034ee:	74 60                	je     c0003550 <create_chain+0x132>
c00034f0:	83 f8 ff             	cmp    eax,0xffffffff
c00034f3:	74 5b                	je     c0003550 <create_chain+0x132>
c00034f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034f9:	39 ce                	cmp    esi,ecx
c00034fb:	75 cc                	jne    c00034c9 <create_chain+0xab>
c00034fd:	e9 71 ff ff ff       	jmp    c0003473 <create_chain+0x55>
c0003502:	83 c9 ff             	or     ecx,0xffffffff
c0003505:	89 f2                	mov    edx,esi
c0003507:	89 d8                	mov    eax,ebx
c0003509:	e8 c0 f2 ff ff       	call   c00027ce <put_fat>
c000350e:	85 c0                	test   eax,eax
c0003510:	75 0f                	jne    c0003521 <create_chain+0x103>
c0003512:	85 ff                	test   edi,edi
c0003514:	74 0b                	je     c0003521 <create_chain+0x103>
c0003516:	89 f1                	mov    ecx,esi
c0003518:	89 fa                	mov    edx,edi
c000351a:	89 d8                	mov    eax,ebx
c000351c:	e8 ad f2 ff ff       	call   c00027ce <put_fat>
c0003521:	85 c0                	test   eax,eax
c0003523:	75 21                	jne    c0003546 <create_chain+0x128>
c0003525:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003528:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000352b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000352e:	8d 57 fe             	lea    edx,[edi-0x2]
c0003531:	39 d0                	cmp    eax,edx
c0003533:	77 04                	ja     c0003539 <create_chain+0x11b>
c0003535:	48                   	dec    eax
c0003536:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003539:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000353c:	83 c8 01             	or     eax,0x1
c000353f:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003542:	89 f0                	mov    eax,esi
c0003544:	eb 0a                	jmp    c0003550 <create_chain+0x132>
c0003546:	48                   	dec    eax
c0003547:	0f 85 fc fe ff ff    	jne    c0003449 <create_chain+0x2b>
c000354d:	83 c8 ff             	or     eax,0xffffffff
c0003550:	83 c4 1c             	add    esp,0x1c
c0003553:	5b                   	pop    ebx
c0003554:	5e                   	pop    esi
c0003555:	5f                   	pop    edi
c0003556:	5d                   	pop    ebp
c0003557:	c3                   	ret    

c0003558 <remove_chain>:
c0003558:	55                   	push   ebp
c0003559:	57                   	push   edi
c000355a:	56                   	push   esi
c000355b:	89 d6                	mov    esi,edx
c000355d:	53                   	push   ebx
c000355e:	83 ec 0c             	sub    esp,0xc
c0003561:	83 fa 01             	cmp    edx,0x1
c0003564:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003566:	76 6a                	jbe    c00035d2 <remove_chain+0x7a>
c0003568:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000356b:	76 65                	jbe    c00035d2 <remove_chain+0x7a>
c000356d:	85 c9                	test   ecx,ecx
c000356f:	89 c5                	mov    ebp,eax
c0003571:	89 ca                	mov    edx,ecx
c0003573:	74 0e                	je     c0003583 <remove_chain+0x2b>
c0003575:	83 c9 ff             	or     ecx,0xffffffff
c0003578:	89 d8                	mov    eax,ebx
c000357a:	e8 4f f2 ff ff       	call   c00027ce <put_fat>
c000357f:	85 c0                	test   eax,eax
c0003581:	75 5b                	jne    c00035de <remove_chain+0x86>
c0003583:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003586:	89 f2                	mov    edx,esi
c0003588:	e8 c4 fc ff ff       	call   c0003251 <get_fat.isra.2>
c000358d:	85 c0                	test   eax,eax
c000358f:	89 c7                	mov    edi,eax
c0003591:	75 04                	jne    c0003597 <remove_chain+0x3f>
c0003593:	31 c0                	xor    eax,eax
c0003595:	eb 47                	jmp    c00035de <remove_chain+0x86>
c0003597:	83 f8 01             	cmp    eax,0x1
c000359a:	74 36                	je     c00035d2 <remove_chain+0x7a>
c000359c:	83 f8 ff             	cmp    eax,0xffffffff
c000359f:	74 38                	je     c00035d9 <remove_chain+0x81>
c00035a1:	31 c9                	xor    ecx,ecx
c00035a3:	89 f2                	mov    edx,esi
c00035a5:	89 d8                	mov    eax,ebx
c00035a7:	e8 22 f2 ff ff       	call   c00027ce <put_fat>
c00035ac:	85 c0                	test   eax,eax
c00035ae:	75 2e                	jne    c00035de <remove_chain+0x86>
c00035b0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00035b3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00035b6:	8d 4a fe             	lea    ecx,[edx-0x2]
c00035b9:	39 c8                	cmp    eax,ecx
c00035bb:	73 0d                	jae    c00035ca <remove_chain+0x72>
c00035bd:	40                   	inc    eax
c00035be:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00035c1:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00035c4:	83 c8 01             	or     eax,0x1
c00035c7:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00035ca:	39 fa                	cmp    edx,edi
c00035cc:	89 fe                	mov    esi,edi
c00035ce:	77 b3                	ja     c0003583 <remove_chain+0x2b>
c00035d0:	eb c1                	jmp    c0003593 <remove_chain+0x3b>
c00035d2:	b8 02 00 00 00       	mov    eax,0x2
c00035d7:	eb 05                	jmp    c00035de <remove_chain+0x86>
c00035d9:	b8 01 00 00 00       	mov    eax,0x1
c00035de:	83 c4 0c             	add    esp,0xc
c00035e1:	5b                   	pop    ebx
c00035e2:	5e                   	pop    esi
c00035e3:	5f                   	pop    edi
c00035e4:	5d                   	pop    ebp
c00035e5:	c3                   	ret    

c00035e6 <dir_next>:
c00035e6:	55                   	push   ebp
c00035e7:	57                   	push   edi
c00035e8:	56                   	push   esi
c00035e9:	53                   	push   ebx
c00035ea:	83 ec 1c             	sub    esp,0x1c
c00035ed:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035f0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035f2:	83 c7 20             	add    edi,0x20
c00035f5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035fb:	76 07                	jbe    c0003604 <dir_next+0x1e>
c00035fd:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003604:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c0003607:	b9 04 00 00 00       	mov    ecx,0x4
c000360c:	85 f6                	test   esi,esi
c000360e:	0f 84 cd 00 00 00    	je     c00036e1 <dir_next+0xfb>
c0003614:	89 c3                	mov    ebx,eax
c0003616:	89 f8                	mov    eax,edi
c0003618:	25 ff 01 00 00       	and    eax,0x1ff
c000361d:	89 d1                	mov    ecx,edx
c000361f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003623:	0f 85 a8 00 00 00    	jne    c00036d1 <dir_next+0xeb>
c0003629:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000362c:	46                   	inc    esi
c000362d:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003630:	85 d2                	test   edx,edx
c0003632:	75 22                	jne    c0003656 <dir_next+0x70>
c0003634:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003638:	89 fa                	mov    edx,edi
c000363a:	c1 ea 05             	shr    edx,0x5
c000363d:	39 c2                	cmp    edx,eax
c000363f:	0f 82 8c 00 00 00    	jb     c00036d1 <dir_next+0xeb>
c0003645:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000364c:	b9 04 00 00 00       	mov    ecx,0x4
c0003651:	e9 8b 00 00 00       	jmp    c00036e1 <dir_next+0xfb>
c0003656:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000365a:	89 fe                	mov    esi,edi
c000365c:	c1 ee 09             	shr    esi,0x9
c000365f:	48                   	dec    eax
c0003660:	85 f0                	test   eax,esi
c0003662:	75 6d                	jne    c00036d1 <dir_next+0xeb>
c0003664:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003668:	89 e8                	mov    eax,ebp
c000366a:	e8 e2 fb ff ff       	call   c0003251 <get_fat.isra.2>
c000366f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003673:	83 f8 01             	cmp    eax,0x1
c0003676:	89 c6                	mov    esi,eax
c0003678:	77 07                	ja     c0003681 <dir_next+0x9b>
c000367a:	b9 02 00 00 00       	mov    ecx,0x2
c000367f:	eb 60                	jmp    c00036e1 <dir_next+0xfb>
c0003681:	83 f8 ff             	cmp    eax,0xffffffff
c0003684:	75 07                	jne    c000368d <dir_next+0xa7>
c0003686:	b9 01 00 00 00       	mov    ecx,0x1
c000368b:	eb 54                	jmp    c00036e1 <dir_next+0xfb>
c000368d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003690:	77 30                	ja     c00036c2 <dir_next+0xdc>
c0003692:	85 c9                	test   ecx,ecx
c0003694:	74 af                	je     c0003645 <dir_next+0x5f>
c0003696:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003699:	89 d8                	mov    eax,ebx
c000369b:	e8 7e fd ff ff       	call   c000341e <create_chain>
c00036a0:	b9 07 00 00 00       	mov    ecx,0x7
c00036a5:	85 c0                	test   eax,eax
c00036a7:	89 c6                	mov    esi,eax
c00036a9:	74 36                	je     c00036e1 <dir_next+0xfb>
c00036ab:	83 f8 01             	cmp    eax,0x1
c00036ae:	74 ca                	je     c000367a <dir_next+0x94>
c00036b0:	83 f8 ff             	cmp    eax,0xffffffff
c00036b3:	74 d1                	je     c0003686 <dir_next+0xa0>
c00036b5:	89 c2                	mov    edx,eax
c00036b7:	89 e8                	mov    eax,ebp
c00036b9:	e8 67 f2 ff ff       	call   c0002925 <dir_clear>
c00036be:	85 c0                	test   eax,eax
c00036c0:	75 c4                	jne    c0003686 <dir_next+0xa0>
c00036c2:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00036c5:	89 f2                	mov    edx,esi
c00036c7:	89 e8                	mov    eax,ebp
c00036c9:	e8 97 e9 ff ff       	call   c0002065 <clst2sect>
c00036ce:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00036d1:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00036d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00036d8:	31 c9                	xor    ecx,ecx
c00036da:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036de:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036e1:	83 c4 1c             	add    esp,0x1c
c00036e4:	89 c8                	mov    eax,ecx
c00036e6:	5b                   	pop    ebx
c00036e7:	5e                   	pop    esi
c00036e8:	5f                   	pop    edi
c00036e9:	5d                   	pop    ebp
c00036ea:	c3                   	ret    

c00036eb <dir_alloc>:
c00036eb:	55                   	push   ebp
c00036ec:	89 c5                	mov    ebp,eax
c00036ee:	57                   	push   edi
c00036ef:	89 d7                	mov    edi,edx
c00036f1:	56                   	push   esi
c00036f2:	31 d2                	xor    edx,edx
c00036f4:	53                   	push   ebx
c00036f5:	83 ec 0c             	sub    esp,0xc
c00036f8:	8b 30                	mov    esi,DWORD PTR [eax]
c00036fa:	e8 57 fc ff ff       	call   c0003356 <dir_sdi>
c00036ff:	85 c0                	test   eax,eax
c0003701:	75 3b                	jne    c000373e <dir_alloc+0x53>
c0003703:	31 db                	xor    ebx,ebx
c0003705:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003708:	89 f0                	mov    eax,esi
c000370a:	e8 65 ec ff ff       	call   c0002374 <move_window>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 2b                	jne    c000373e <dir_alloc+0x53>
c0003713:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003716:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003719:	81 fa e5 00 00 00    	cmp    edx,0xe5
c000371f:	74 04                	je     c0003725 <dir_alloc+0x3a>
c0003721:	85 d2                	test   edx,edx
c0003723:	75 07                	jne    c000372c <dir_alloc+0x41>
c0003725:	43                   	inc    ebx
c0003726:	39 fb                	cmp    ebx,edi
c0003728:	75 04                	jne    c000372e <dir_alloc+0x43>
c000372a:	eb 1c                	jmp    c0003748 <dir_alloc+0x5d>
c000372c:	31 db                	xor    ebx,ebx
c000372e:	ba 01 00 00 00       	mov    edx,0x1
c0003733:	89 e8                	mov    eax,ebp
c0003735:	e8 ac fe ff ff       	call   c00035e6 <dir_next>
c000373a:	85 c0                	test   eax,eax
c000373c:	74 c7                	je     c0003705 <dir_alloc+0x1a>
c000373e:	83 f8 04             	cmp    eax,0x4
c0003741:	75 05                	jne    c0003748 <dir_alloc+0x5d>
c0003743:	b8 07 00 00 00       	mov    eax,0x7
c0003748:	83 c4 0c             	add    esp,0xc
c000374b:	5b                   	pop    ebx
c000374c:	5e                   	pop    esi
c000374d:	5f                   	pop    edi
c000374e:	5d                   	pop    ebp
c000374f:	c3                   	ret    

c0003750 <dir_read>:
c0003750:	55                   	push   ebp
c0003751:	57                   	push   edi
c0003752:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003757:	56                   	push   esi
c0003758:	be 04 00 00 00       	mov    esi,0x4
c000375d:	53                   	push   ebx
c000375e:	89 c3                	mov    ebx,eax
c0003760:	83 ec 1c             	sub    esp,0x1c
c0003763:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003767:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003769:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000376e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003771:	85 d2                	test   edx,edx
c0003773:	0f 84 e3 00 00 00    	je     c000385c <dir_read+0x10c>
c0003779:	89 e8                	mov    eax,ebp
c000377b:	e8 f4 eb ff ff       	call   c0002374 <move_window>
c0003780:	85 c0                	test   eax,eax
c0003782:	89 c6                	mov    esi,eax
c0003784:	0f 85 dd 00 00 00    	jne    c0003867 <dir_read+0x117>
c000378a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000378d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003790:	88 04 24             	mov    BYTE PTR [esp],al
c0003793:	85 c0                	test   eax,eax
c0003795:	0f 84 c7 00 00 00    	je     c0003862 <dir_read+0x112>
c000379b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000379e:	83 e1 3f             	and    ecx,0x3f
c00037a1:	3d e5 00 00 00       	cmp    eax,0xe5
c00037a6:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c00037a9:	0f 84 93 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037af:	83 f8 2e             	cmp    eax,0x2e
c00037b2:	0f 84 8a 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037b8:	0f b6 c9             	movzx  ecx,cl
c00037bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00037bf:	83 e1 df             	and    ecx,0xffffffdf
c00037c2:	83 f9 08             	cmp    ecx,0x8
c00037c5:	0f 94 c1             	sete   cl
c00037c8:	0f b6 c9             	movzx  ecx,cl
c00037cb:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00037cf:	75 71                	jne    c0003842 <dir_read+0xf2>
c00037d1:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00037d6:	75 4a                	jne    c0003822 <dir_read+0xd2>
c00037d8:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037dc:	74 16                	je     c00037f4 <dir_read+0xa4>
c00037de:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037e1:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037e8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037ef:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037f2:	eb 0e                	jmp    c0003802 <dir_read+0xb2>
c00037f4:	89 f9                	mov    ecx,edi
c00037f6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037fb:	0f b6 c9             	movzx  ecx,cl
c00037fe:	39 c1                	cmp    ecx,eax
c0003800:	75 45                	jne    c0003847 <dir_read+0xf7>
c0003802:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003806:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380b:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c000380e:	75 37                	jne    c0003847 <dir_read+0xf7>
c0003810:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0003813:	e8 6a e8 ff ff       	call   c0002082 <pick_lfn>
c0003818:	85 c0                	test   eax,eax
c000381a:	74 2b                	je     c0003847 <dir_read+0xf7>
c000381c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000381f:	4f                   	dec    edi
c0003820:	eb 25                	jmp    c0003847 <dir_read+0xf7>
c0003822:	89 f8                	mov    eax,edi
c0003824:	84 c0                	test   al,al
c0003826:	75 11                	jne    c0003839 <dir_read+0xe9>
c0003828:	89 d0                	mov    eax,edx
c000382a:	e8 30 ea ff ff       	call   c000225f <sum_sfn>
c000382f:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003833:	75 04                	jne    c0003839 <dir_read+0xe9>
c0003835:	31 f6                	xor    esi,esi
c0003837:	eb 35                	jmp    c000386e <dir_read+0x11e>
c0003839:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003840:	eb 2c                	jmp    c000386e <dir_read+0x11e>
c0003842:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003847:	31 d2                	xor    edx,edx
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 96 fd ff ff       	call   c00035e6 <dir_next>
c0003850:	85 c0                	test   eax,eax
c0003852:	89 c6                	mov    esi,eax
c0003854:	0f 84 14 ff ff ff    	je     c000376e <dir_read+0x1e>
c000385a:	eb 0b                	jmp    c0003867 <dir_read+0x117>
c000385c:	85 f6                	test   esi,esi
c000385e:	74 d5                	je     c0003835 <dir_read+0xe5>
c0003860:	eb 05                	jmp    c0003867 <dir_read+0x117>
c0003862:	be 04 00 00 00       	mov    esi,0x4
c0003867:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000386e:	83 c4 1c             	add    esp,0x1c
c0003871:	89 f0                	mov    eax,esi
c0003873:	5b                   	pop    ebx
c0003874:	5e                   	pop    esi
c0003875:	5f                   	pop    edi
c0003876:	5d                   	pop    ebp
c0003877:	c3                   	ret    

c0003878 <dir_remove>:
c0003878:	57                   	push   edi
c0003879:	56                   	push   esi
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003880:	8b 30                	mov    esi,DWORD PTR [eax]
c0003882:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003885:	83 fa ff             	cmp    edx,0xffffffff
c0003888:	74 09                	je     c0003893 <dir_remove+0x1b>
c000388a:	e8 c7 fa ff ff       	call   c0003356 <dir_sdi>
c000388f:	85 c0                	test   eax,eax
c0003891:	75 34                	jne    c00038c7 <dir_remove+0x4f>
c0003893:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003896:	89 f0                	mov    eax,esi
c0003898:	e8 d7 ea ff ff       	call   c0002374 <move_window>
c000389d:	85 c0                	test   eax,eax
c000389f:	75 1c                	jne    c00038bd <dir_remove+0x45>
c00038a1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00038a4:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00038a7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00038ab:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c00038ae:	73 17                	jae    c00038c7 <dir_remove+0x4f>
c00038b0:	31 d2                	xor    edx,edx
c00038b2:	89 d8                	mov    eax,ebx
c00038b4:	e8 2d fd ff ff       	call   c00035e6 <dir_next>
c00038b9:	85 c0                	test   eax,eax
c00038bb:	74 d6                	je     c0003893 <dir_remove+0x1b>
c00038bd:	83 f8 04             	cmp    eax,0x4
c00038c0:	75 05                	jne    c00038c7 <dir_remove+0x4f>
c00038c2:	b8 02 00 00 00       	mov    eax,0x2
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	c3                   	ret    

c00038cb <dir_find>:
c00038cb:	55                   	push   ebp
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	57                   	push   edi
c00038cf:	56                   	push   esi
c00038d0:	53                   	push   ebx
c00038d1:	89 c3                	mov    ebx,eax
c00038d3:	83 ec 1c             	sub    esp,0x1c
c00038d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00038d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038dc:	89 d8                	mov    eax,ebx
c00038de:	e8 73 fa ff ff       	call   c0003356 <dir_sdi>
c00038e3:	85 c0                	test   eax,eax
c00038e5:	89 c6                	mov    esi,eax
c00038e7:	0f 85 22 01 00 00    	jne    c0003a0f <dir_find+0x144>
c00038ed:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038f4:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00038f9:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038fe:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003905:	e8 6a ea ff ff       	call   c0002374 <move_window>
c000390a:	85 c0                	test   eax,eax
c000390c:	89 c6                	mov    esi,eax
c000390e:	0f 85 fb 00 00 00    	jne    c0003a0f <dir_find+0x144>
c0003914:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003917:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c000391a:	85 d2                	test   edx,edx
c000391c:	89 d1                	mov    ecx,edx
c000391e:	0f 84 e6 00 00 00    	je     c0003a0a <dir_find+0x13f>
c0003924:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003927:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000392b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000392f:	83 e0 3f             	and    eax,0x3f
c0003932:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003938:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000393b:	0f 84 a8 00 00 00    	je     c00039e9 <dir_find+0x11e>
c0003941:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003946:	0f b6 c0             	movzx  eax,al
c0003949:	74 0b                	je     c0003956 <dir_find+0x8b>
c000394b:	83 f8 0f             	cmp    eax,0xf
c000394e:	0f 85 95 00 00 00    	jne    c00039e9 <dir_find+0x11e>
c0003954:	eb 05                	jmp    c000395b <dir_find+0x90>
c0003956:	83 f8 0f             	cmp    eax,0xf
c0003959:	75 62                	jne    c00039bd <dir_find+0xf2>
c000395b:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c000395f:	0f 85 90 00 00 00    	jne    c00039f5 <dir_find+0x12a>
c0003965:	f6 c1 40             	test   cl,0x40
c0003968:	74 15                	je     c000397f <dir_find+0xb4>
c000396a:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c000396d:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003973:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003977:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000397a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000397d:	eb 11                	jmp    c0003990 <dir_find+0xc5>
c000397f:	89 e8                	mov    eax,ebp
c0003981:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003986:	0f b6 d0             	movzx  edx,al
c0003989:	0f b6 c1             	movzx  eax,cl
c000398c:	39 c2                	cmp    edx,eax
c000398e:	75 65                	jne    c00039f5 <dir_find+0x12a>
c0003990:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003994:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003999:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c000399c:	75 57                	jne    c00039f5 <dir_find+0x12a>
c000399e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039a6:	89 fa                	mov    edx,edi
c00039a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039ab:	e8 2c f3 ff ff       	call   c0002cdc <cmp_lfn>
c00039b0:	85 c0                	test   eax,eax
c00039b2:	74 41                	je     c00039f5 <dir_find+0x12a>
c00039b4:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039b8:	8d 69 ff             	lea    ebp,[ecx-0x1]
c00039bb:	eb 38                	jmp    c00039f5 <dir_find+0x12a>
c00039bd:	89 e8                	mov    eax,ebp
c00039bf:	84 c0                	test   al,al
c00039c1:	75 0d                	jne    c00039d0 <dir_find+0x105>
c00039c3:	89 f8                	mov    eax,edi
c00039c5:	e8 95 e8 ff ff       	call   c000225f <sum_sfn>
c00039ca:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039ce:	74 3f                	je     c0003a0f <dir_find+0x144>
c00039d0:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c00039d4:	75 13                	jne    c00039e9 <dir_find+0x11e>
c00039d6:	8d 53 20             	lea    edx,[ebx+0x20]
c00039d9:	b9 0b 00 00 00       	mov    ecx,0xb
c00039de:	89 f8                	mov    eax,edi
c00039e0:	e8 75 e4 ff ff       	call   c0001e5a <mem_cmp>
c00039e5:	85 c0                	test   eax,eax
c00039e7:	74 26                	je     c0003a0f <dir_find+0x144>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00039f5:	31 d2                	xor    edx,edx
c00039f7:	89 d8                	mov    eax,ebx
c00039f9:	e8 e8 fb ff ff       	call   c00035e6 <dir_next>
c00039fe:	85 c0                	test   eax,eax
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	0f 84 f6 fe ff ff    	je     c00038fe <dir_find+0x33>
c0003a08:	eb 05                	jmp    c0003a0f <dir_find+0x144>
c0003a0a:	be 04 00 00 00       	mov    esi,0x4
c0003a0f:	83 c4 1c             	add    esp,0x1c
c0003a12:	89 f0                	mov    eax,esi
c0003a14:	5b                   	pop    ebx
c0003a15:	5e                   	pop    esi
c0003a16:	5f                   	pop    edi
c0003a17:	5d                   	pop    ebp
c0003a18:	c3                   	ret    

c0003a19 <follow_path>:
c0003a19:	56                   	push   esi
c0003a1a:	53                   	push   ebx
c0003a1b:	89 c3                	mov    ebx,eax
c0003a1d:	83 ec 14             	sub    esp,0x14
c0003a20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a24:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a2a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003a2d:	83 fa 2f             	cmp    edx,0x2f
c0003a30:	75 07                	jne    c0003a39 <follow_path+0x20>
c0003a32:	40                   	inc    eax
c0003a33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a37:	eb ed                	jmp    c0003a26 <follow_path+0xd>
c0003a39:	83 fa 5c             	cmp    edx,0x5c
c0003a3c:	74 f4                	je     c0003a32 <follow_path+0x19>
c0003a3e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a45:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a48:	77 3e                	ja     c0003a88 <follow_path+0x6f>
c0003a4a:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a4e:	31 d2                	xor    edx,edx
c0003a50:	89 d8                	mov    eax,ebx
c0003a52:	e8 ff f8 ff ff       	call   c0003356 <dir_sdi>
c0003a57:	eb 57                	jmp    c0003ab0 <follow_path+0x97>
c0003a59:	89 d8                	mov    eax,ebx
c0003a5b:	e8 6b fe ff ff       	call   c00038cb <dir_find>
c0003a60:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a63:	85 c0                	test   eax,eax
c0003a65:	75 32                	jne    c0003a99 <follow_path+0x80>
c0003a67:	80 e2 04             	and    dl,0x4
c0003a6a:	75 44                	jne    c0003ab0 <follow_path+0x97>
c0003a6c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a70:	74 39                	je     c0003aab <follow_path+0x92>
c0003a72:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a75:	25 ff 01 00 00       	and    eax,0x1ff
c0003a7a:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a7e:	8a 06                	mov    al,BYTE PTR [esi]
c0003a80:	e8 7b f7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003a85:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a88:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 8e ef ff ff       	call   c0002a21 <create_name>
c0003a93:	85 c0                	test   eax,eax
c0003a95:	74 c2                	je     c0003a59 <follow_path+0x40>
c0003a97:	eb 17                	jmp    c0003ab0 <follow_path+0x97>
c0003a99:	83 f8 04             	cmp    eax,0x4
c0003a9c:	75 12                	jne    c0003ab0 <follow_path+0x97>
c0003a9e:	80 e2 04             	and    dl,0x4
c0003aa1:	ba 05 00 00 00       	mov    edx,0x5
c0003aa6:	0f 44 c2             	cmove  eax,edx
c0003aa9:	eb 05                	jmp    c0003ab0 <follow_path+0x97>
c0003aab:	b8 05 00 00 00       	mov    eax,0x5
c0003ab0:	83 c4 14             	add    esp,0x14
c0003ab3:	5b                   	pop    ebx
c0003ab4:	5e                   	pop    esi
c0003ab5:	c3                   	ret    

c0003ab6 <dir_register>:
c0003ab6:	55                   	push   ebp
c0003ab7:	57                   	push   edi
c0003ab8:	56                   	push   esi
c0003ab9:	be 06 00 00 00       	mov    esi,0x6
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 2c             	sub    esp,0x2c
c0003ac2:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ac5:	80 e2 a0             	and    dl,0xa0
c0003ac8:	0f 85 66 01 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ace:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003ad6:	8b 38                	mov    edi,DWORD PTR [eax]
c0003ad8:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003adb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003adf:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003ae4:	74 06                	je     c0003aec <dir_register+0x36>
c0003ae6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aea:	eb ef                	jmp    c0003adb <dir_register+0x25>
c0003aec:	89 c3                	mov    ebx,eax
c0003aee:	b9 0c 00 00 00       	mov    ecx,0xc
c0003af3:	8d 40 20             	lea    eax,[eax+0x20]
c0003af6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003afa:	89 c2                	mov    edx,eax
c0003afc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003b00:	e8 36 e3 ff ff       	call   c0001e3b <mem_cpy>
c0003b05:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003b0a:	74 48                	je     c0003b54 <dir_register+0x9e>
c0003b0c:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003b10:	bd 01 00 00 00       	mov    ebp,0x1
c0003b15:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003b18:	55                   	push   ebp
c0003b19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003b21:	e8 77 e6 ff ff       	call   c000219d <gen_numname>
c0003b26:	58                   	pop    eax
c0003b27:	89 d8                	mov    eax,ebx
c0003b29:	e8 9d fd ff ff       	call   c00038cb <dir_find>
c0003b2e:	85 c0                	test   eax,eax
c0003b30:	89 c6                	mov    esi,eax
c0003b32:	75 10                	jne    c0003b44 <dir_register+0x8e>
c0003b34:	45                   	inc    ebp
c0003b35:	83 fd 64             	cmp    ebp,0x64
c0003b38:	75 db                	jne    c0003b15 <dir_register+0x5f>
c0003b3a:	be 07 00 00 00       	mov    esi,0x7
c0003b3f:	e9 f0 00 00 00       	jmp    c0003c34 <dir_register+0x17e>
c0003b44:	83 f8 04             	cmp    eax,0x4
c0003b47:	0f 85 e7 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b4d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b51:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b54:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b59:	bd 01 00 00 00       	mov    ebp,0x1
c0003b5e:	74 13                	je     c0003b73 <dir_register+0xbd>
c0003b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b64:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b69:	31 d2                	xor    edx,edx
c0003b6b:	83 c0 0c             	add    eax,0xc
c0003b6e:	f7 f1                	div    ecx
c0003b70:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b73:	89 ea                	mov    edx,ebp
c0003b75:	89 d8                	mov    eax,ebx
c0003b77:	e8 6f fb ff ff       	call   c00036eb <dir_alloc>
c0003b7c:	85 c0                	test   eax,eax
c0003b7e:	89 c6                	mov    esi,eax
c0003b80:	0f 85 ae 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b86:	4d                   	dec    ebp
c0003b87:	74 6b                	je     c0003bf4 <dir_register+0x13e>
c0003b89:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b8c:	89 e8                	mov    eax,ebp
c0003b8e:	c1 e0 05             	shl    eax,0x5
c0003b91:	29 c2                	sub    edx,eax
c0003b93:	89 d8                	mov    eax,ebx
c0003b95:	e8 bc f7 ff ff       	call   c0003356 <dir_sdi>
c0003b9a:	85 c0                	test   eax,eax
c0003b9c:	89 c6                	mov    esi,eax
c0003b9e:	0f 85 90 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ba8:	e8 b2 e6 ff ff       	call   c000225f <sum_sfn>
c0003bad:	0f b6 c0             	movzx  eax,al
c0003bb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bb4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb7:	89 f8                	mov    eax,edi
c0003bb9:	e8 b6 e7 ff ff       	call   c0002374 <move_window>
c0003bbe:	85 c0                	test   eax,eax
c0003bc0:	89 c6                	mov    esi,eax
c0003bc2:	75 70                	jne    c0003c34 <dir_register+0x17e>
c0003bc4:	83 ec 0c             	sub    esp,0xc
c0003bc7:	89 e8                	mov    eax,ebp
c0003bc9:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003bcc:	0f b6 c8             	movzx  ecx,al
c0003bcf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003bd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003bd6:	e8 27 e5 ff ff       	call   c0002102 <put_lfn>
c0003bdb:	31 d2                	xor    edx,edx
c0003bdd:	89 d8                	mov    eax,ebx
c0003bdf:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003be3:	e8 fe f9 ff ff       	call   c00035e6 <dir_next>
c0003be8:	83 c4 10             	add    esp,0x10
c0003beb:	85 c0                	test   eax,eax
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	75 43                	jne    c0003c34 <dir_register+0x17e>
c0003bf1:	4d                   	dec    ebp
c0003bf2:	75 c0                	jne    c0003bb4 <dir_register+0xfe>
c0003bf4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bf7:	89 f8                	mov    eax,edi
c0003bf9:	e8 76 e7 ff ff       	call   c0002374 <move_window>
c0003bfe:	85 c0                	test   eax,eax
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	75 30                	jne    c0003c34 <dir_register+0x17e>
c0003c04:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c07:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0c:	31 d2                	xor    edx,edx
c0003c0e:	e8 3d e2 ff ff       	call   c0001e50 <mem_set>
c0003c13:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0003c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003c1f:	e8 17 e2 ff ff       	call   c0001e3b <mem_cpy>
c0003c24:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003c27:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003c2a:	83 e0 18             	and    eax,0x18
c0003c2d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003c30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003c34:	83 c4 2c             	add    esp,0x2c
c0003c37:	89 f0                	mov    eax,esi
c0003c39:	5b                   	pop    ebx
c0003c3a:	5e                   	pop    esi
c0003c3b:	5f                   	pop    edi
c0003c3c:	5d                   	pop    ebp
c0003c3d:	c3                   	ret    

c0003c3e <f_mount>:
c0003c3e:	53                   	push   ebx
c0003c3f:	83 ec 18             	sub    esp,0x18
c0003c42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c46:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c4e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c52:	e8 28 e6 ff ff       	call   c000227f <get_ldnumber>
c0003c57:	89 c2                	mov    edx,eax
c0003c59:	b8 0b 00 00 00       	mov    eax,0xb
c0003c5e:	85 d2                	test   edx,edx
c0003c60:	78 39                	js     c0003c9b <f_mount+0x5d>
c0003c62:	8b 04 95 a0 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9b60]
c0003c69:	85 c0                	test   eax,eax
c0003c6b:	74 03                	je     c0003c70 <f_mount+0x32>
c0003c6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 03                	je     c0003c7b <f_mount+0x3d>
c0003c78:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c7f:	89 04 95 a0 64 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9b60],eax
c0003c86:	31 c0                	xor    eax,eax
c0003c88:	84 db                	test   bl,bl
c0003c8a:	74 0f                	je     c0003c9b <f_mount+0x5d>
c0003c8c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c90:	31 c9                	xor    ecx,ecx
c0003c92:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c96:	e8 36 e8 ff ff       	call   c00024d1 <mount_volume>
c0003c9b:	83 c4 18             	add    esp,0x18
c0003c9e:	5b                   	pop    ebx
c0003c9f:	c3                   	ret    

c0003ca0 <f_open>:
c0003ca0:	55                   	push   ebp
c0003ca1:	b8 09 00 00 00       	mov    eax,0x9
c0003ca6:	57                   	push   edi
c0003ca7:	56                   	push   esi
c0003ca8:	53                   	push   ebx
c0003ca9:	83 ec 5c             	sub    esp,0x5c
c0003cac:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003cb0:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003cb4:	85 db                	test   ebx,ebx
c0003cb6:	0f 84 9f 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003cbc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003cc0:	89 fd                	mov    ebp,edi
c0003cc2:	83 e5 3f             	and    ebp,0x3f
c0003cc5:	89 e8                	mov    eax,ebp
c0003cc7:	89 ee                	mov    esi,ebp
c0003cc9:	0f b6 c8             	movzx  ecx,al
c0003ccc:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003cd0:	e8 fc e7 ff ff       	call   c00024d1 <mount_volume>
c0003cd5:	85 c0                	test   eax,eax
c0003cd7:	0f 85 78 02 00 00    	jne    c0003f55 <f_open+0x2b5>
c0003cdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ce1:	83 ec 0c             	sub    esp,0xc
c0003ce4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ce8:	68 00 02 00 00       	push   0x200
c0003ced:	e8 62 1f 00 00       	call   c0005c54 <ff_memalloc>
c0003cf2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cf6:	83 c4 10             	add    esp,0x10
c0003cf9:	b8 11 00 00 00       	mov    eax,0x11
c0003cfe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003d03:	0f 84 52 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003d09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003d11:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003d15:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003d18:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d1c:	e8 f8 fc ff ff       	call   c0003a19 <follow_path>
c0003d21:	85 c0                	test   eax,eax
c0003d23:	75 0d                	jne    c0003d32 <f_open+0x92>
c0003d25:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003d2a:	ba 06 00 00 00       	mov    edx,0x6
c0003d2f:	0f 45 c2             	cmovne eax,edx
c0003d32:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003d38:	0f 84 d5 00 00 00    	je     c0003e13 <f_open+0x173>
c0003d3e:	85 c0                	test   eax,eax
c0003d40:	74 21                	je     c0003d63 <f_open+0xc3>
c0003d42:	83 f8 04             	cmp    eax,0x4
c0003d45:	0f 85 ef 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d4b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d4f:	e8 62 fd ff ff       	call   c0003ab6 <dir_register>
c0003d54:	85 c0                	test   eax,eax
c0003d56:	0f 85 de 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d5c:	83 cd 08             	or     ebp,0x8
c0003d5f:	89 ee                	mov    esi,ebp
c0003d61:	eb 2c                	jmp    c0003d8f <f_open+0xef>
c0003d63:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d67:	b8 07 00 00 00       	mov    eax,0x7
c0003d6c:	80 e2 11             	and    dl,0x11
c0003d6f:	0f 85 c5 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d75:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d7b:	b8 08 00 00 00       	mov    eax,0x8
c0003d80:	0f 85 b4 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d86:	83 e7 08             	and    edi,0x8
c0003d89:	0f 84 b1 00 00 00    	je     c0003e40 <f_open+0x1a0>
c0003d8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d93:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d97:	8a 00                	mov    al,BYTE PTR [eax]
c0003d99:	89 ea                	mov    edx,ebp
c0003d9b:	e8 60 f4 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003da0:	ba 00 00 21 50       	mov    edx,0x50210000
c0003da5:	89 c7                	mov    edi,eax
c0003da7:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003daa:	e8 89 e0 ff ff       	call   c0001e38 <st_dword>
c0003daf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003db3:	31 c9                	xor    ecx,ecx
c0003db5:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003db9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003dc1:	e8 63 f4 ff ff       	call   c0003229 <st_clust.isra.1>
c0003dc6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003dca:	31 d2                	xor    edx,edx
c0003dcc:	83 c0 1c             	add    eax,0x1c
c0003dcf:	e8 64 e0 ff ff       	call   c0001e38 <st_dword>
c0003dd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dd8:	85 ff                	test   edi,edi
c0003dda:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003dde:	74 60                	je     c0003e40 <f_open+0x1a0>
c0003de0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003de4:	31 c9                	xor    ecx,ecx
c0003de6:	89 fa                	mov    edx,edi
c0003de8:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003deb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003def:	e8 64 f7 ff ff       	call   c0003558 <remove_chain>
c0003df4:	85 c0                	test   eax,eax
c0003df6:	0f 85 3e 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e00:	89 ea                	mov    edx,ebp
c0003e02:	4f                   	dec    edi
c0003e03:	e8 6c e5 ff ff       	call   c0002374 <move_window>
c0003e08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003e0c:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003e0f:	85 c0                	test   eax,eax
c0003e11:	eb 27                	jmp    c0003e3a <f_open+0x19a>
c0003e13:	85 c0                	test   eax,eax
c0003e15:	0f 85 1f 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e1b:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003e1f:	b8 04 00 00 00       	mov    eax,0x4
c0003e24:	f6 c2 10             	test   dl,0x10
c0003e27:	0f 85 0d 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e2d:	83 e7 02             	and    edi,0x2
c0003e30:	74 0e                	je     c0003e40 <f_open+0x1a0>
c0003e32:	b8 07 00 00 00       	mov    eax,0x7
c0003e37:	80 e2 01             	and    dl,0x1
c0003e3a:	0f 85 fa 00 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e40:	f7 c6 08 00 00 00    	test   esi,0x8
c0003e46:	74 03                	je     c0003e4b <f_open+0x1ab>
c0003e48:	83 ce 40             	or     esi,0x40
c0003e4b:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e4f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e53:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e56:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e59:	89 fa                	mov    edx,edi
c0003e5b:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e5e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e61:	e8 9a f3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003e66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e69:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e6c:	e8 ab df ff ff       	call   c0001e1c <ld_dword>
c0003e71:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e74:	31 d2                	xor    edx,edx
c0003e76:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e78:	b9 00 02 00 00       	mov    ecx,0x200
c0003e7d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e80:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e84:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e88:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e8f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e96:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e9a:	89 f0                	mov    eax,esi
c0003e9c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e9f:	89 f8                	mov    eax,edi
c0003ea1:	e8 aa df ff ff       	call   c0001e50 <mem_set>
c0003ea6:	83 e6 20             	and    esi,0x20
c0003ea9:	75 07                	jne    c0003eb2 <f_open+0x212>
c0003eab:	31 c0                	xor    eax,eax
c0003ead:	e9 88 00 00 00       	jmp    c0003f3a <f_open+0x29a>
c0003eb2:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0003eb5:	85 f6                	test   esi,esi
c0003eb7:	74 f2                	je     c0003eab <f_open+0x20b>
c0003eb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003ebc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003ec3:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0003ec7:	31 c0                	xor    eax,eax
c0003ec9:	c1 e5 09             	shl    ebp,0x9
c0003ecc:	85 c0                	test   eax,eax
c0003ece:	75 23                	jne    c0003ef3 <f_open+0x253>
c0003ed0:	39 ee                	cmp    esi,ebp
c0003ed2:	76 1f                	jbe    c0003ef3 <f_open+0x253>
c0003ed4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ed6:	e8 76 f3 ff ff       	call   c0003251 <get_fat.isra.2>
c0003edb:	89 c2                	mov    edx,eax
c0003edd:	b8 02 00 00 00       	mov    eax,0x2
c0003ee2:	83 fa 01             	cmp    edx,0x1
c0003ee5:	76 08                	jbe    c0003eef <f_open+0x24f>
c0003ee7:	31 c0                	xor    eax,eax
c0003ee9:	83 fa ff             	cmp    edx,0xffffffff
c0003eec:	0f 94 c0             	sete   al
c0003eef:	29 ee                	sub    esi,ebp
c0003ef1:	eb d9                	jmp    c0003ecc <f_open+0x22c>
c0003ef3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	75 40                	jne    c0003f3a <f_open+0x29a>
c0003efa:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0003f00:	74 a9                	je     c0003eab <f_open+0x20b>
c0003f02:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003f06:	89 e8                	mov    eax,ebp
c0003f08:	e8 58 e1 ff ff       	call   c0002065 <clst2sect>
c0003f0d:	89 c2                	mov    edx,eax
c0003f0f:	b8 02 00 00 00       	mov    eax,0x2
c0003f14:	85 d2                	test   edx,edx
c0003f16:	74 22                	je     c0003f3a <f_open+0x29a>
c0003f18:	c1 ee 09             	shr    esi,0x9
c0003f1b:	8d 04 16             	lea    eax,[esi+edx*1]
c0003f1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003f21:	6a 01                	push   0x1
c0003f23:	50                   	push   eax
c0003f24:	57                   	push   edi
c0003f25:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0003f29:	50                   	push   eax
c0003f2a:	e8 95 de ff ff       	call   c0001dc4 <disk_read>
c0003f2f:	83 c4 10             	add    esp,0x10
c0003f32:	85 c0                	test   eax,eax
c0003f34:	0f 95 c0             	setne  al
c0003f37:	0f b6 c0             	movzx  eax,al
c0003f3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f3e:	83 ec 0c             	sub    esp,0xc
c0003f41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003f45:	e8 22 1d 00 00       	call   c0005c6c <ff_memfree>
c0003f4a:	83 c4 10             	add    esp,0x10
c0003f4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f51:	85 c0                	test   eax,eax
c0003f53:	74 06                	je     c0003f5b <f_open+0x2bb>
c0003f55:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f5b:	83 c4 5c             	add    esp,0x5c
c0003f5e:	5b                   	pop    ebx
c0003f5f:	5e                   	pop    esi
c0003f60:	5f                   	pop    edi
c0003f61:	5d                   	pop    ebp
c0003f62:	c3                   	ret    

c0003f63 <f_read>:
c0003f63:	55                   	push   ebp
c0003f64:	57                   	push   edi
c0003f65:	56                   	push   esi
c0003f66:	53                   	push   ebx
c0003f67:	83 ec 2c             	sub    esp,0x2c
c0003f6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f6e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f72:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f76:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0003f7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f80:	89 d8                	mov    eax,ebx
c0003f82:	e8 44 e3 ff ff       	call   c00022cb <validate>
c0003f87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f8b:	85 c0                	test   eax,eax
c0003f8d:	0f 85 a5 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003f93:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0003f97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f9b:	85 c0                	test   eax,eax
c0003f9d:	0f 85 95 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003fa3:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003fa7:	0f 84 83 01 00 00    	je     c0004130 <f_read+0x1cd>
c0003fad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003fb0:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003fb3:	39 f8                	cmp    eax,edi
c0003fb5:	0f 46 f8             	cmovbe edi,eax
c0003fb8:	85 ff                	test   edi,edi
c0003fba:	0f 84 78 01 00 00    	je     c0004138 <f_read+0x1d5>
c0003fc0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fc3:	a9 ff 01 00 00       	test   eax,0x1ff
c0003fc8:	0f 85 2b 01 00 00    	jne    c00040f9 <f_read+0x196>
c0003fce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fd2:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0003fd6:	89 c2                	mov    edx,eax
c0003fd8:	c1 ea 09             	shr    edx,0x9
c0003fdb:	4d                   	dec    ebp
c0003fdc:	21 d5                	and    ebp,edx
c0003fde:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0003fe2:	75 42                	jne    c0004026 <f_read+0xc3>
c0003fe4:	85 c0                	test   eax,eax
c0003fe6:	75 05                	jne    c0003fed <f_read+0x8a>
c0003fe8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003feb:	eb 0a                	jmp    c0003ff7 <f_read+0x94>
c0003fed:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ff0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ff2:	e8 5a f2 ff ff       	call   c0003251 <get_fat.isra.2>
c0003ff7:	83 f8 01             	cmp    eax,0x1
c0003ffa:	77 11                	ja     c000400d <f_read+0xaa>
c0003ffc:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004000:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c0004008:	e9 2b 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c000400d:	83 f8 ff             	cmp    eax,0xffffffff
c0004010:	75 11                	jne    c0004023 <f_read+0xc0>
c0004012:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004016:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000401e:	e9 15 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c0004023:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004026:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000402a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000402d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004031:	89 c8                	mov    eax,ecx
c0004033:	e8 2d e0 ff ff       	call   c0002065 <clst2sect>
c0004038:	85 c0                	test   eax,eax
c000403a:	74 c0                	je     c0003ffc <f_read+0x99>
c000403c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004040:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004046:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0004049:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000404d:	76 58                	jbe    c00040a7 <f_read+0x144>
c000404f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004053:	89 fe                	mov    esi,edi
c0004055:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004059:	c1 ee 09             	shr    esi,0x9
c000405c:	01 f2                	add    edx,esi
c000405e:	39 c2                	cmp    edx,eax
c0004060:	76 06                	jbe    c0004068 <f_read+0x105>
c0004062:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004066:	89 c6                	mov    esi,eax
c0004068:	56                   	push   esi
c0004069:	55                   	push   ebp
c000406a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000406e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004072:	50                   	push   eax
c0004073:	e8 4c dd ff ff       	call   c0001dc4 <disk_read>
c0004078:	83 c4 10             	add    esp,0x10
c000407b:	85 c0                	test   eax,eax
c000407d:	75 93                	jne    c0004012 <f_read+0xaf>
c000407f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004083:	74 1d                	je     c00040a2 <f_read+0x13f>
c0004085:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004088:	29 e8                	sub    eax,ebp
c000408a:	39 f0                	cmp    eax,esi
c000408c:	73 14                	jae    c00040a2 <f_read+0x13f>
c000408e:	c1 e0 09             	shl    eax,0x9
c0004091:	b9 00 02 00 00       	mov    ecx,0x200
c0004096:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000409a:	8d 53 28             	lea    edx,[ebx+0x28]
c000409d:	e8 99 dd ff ff       	call   c0001e3b <mem_cpy>
c00040a2:	c1 e6 09             	shl    esi,0x9
c00040a5:	eb 75                	jmp    c000411c <f_read+0x1b9>
c00040a7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00040aa:	39 e8                	cmp    eax,ebp
c00040ac:	74 48                	je     c00040f6 <f_read+0x193>
c00040ae:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040b2:	8d 73 28             	lea    esi,[ebx+0x28]
c00040b5:	74 22                	je     c00040d9 <f_read+0x176>
c00040b7:	6a 01                	push   0x1
c00040b9:	50                   	push   eax
c00040ba:	56                   	push   esi
c00040bb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040bf:	50                   	push   eax
c00040c0:	e8 15 dd ff ff       	call   c0001dda <disk_write>
c00040c5:	83 c4 10             	add    esp,0x10
c00040c8:	85 c0                	test   eax,eax
c00040ca:	0f 85 42 ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040d0:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040d3:	83 e0 7f             	and    eax,0x7f
c00040d6:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040d9:	6a 01                	push   0x1
c00040db:	55                   	push   ebp
c00040dc:	56                   	push   esi
c00040dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040e5:	50                   	push   eax
c00040e6:	e8 d9 dc ff ff       	call   c0001dc4 <disk_read>
c00040eb:	83 c4 10             	add    esp,0x10
c00040ee:	85 c0                	test   eax,eax
c00040f0:	0f 85 1c ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040f6:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00040f9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040fc:	be 00 02 00 00       	mov    esi,0x200
c0004101:	25 ff 01 00 00       	and    eax,0x1ff
c0004106:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c000410a:	29 c6                	sub    esi,eax
c000410c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004110:	39 f7                	cmp    edi,esi
c0004112:	0f 46 f7             	cmovbe esi,edi
c0004115:	89 f1                	mov    ecx,esi
c0004117:	e8 1f dd ff ff       	call   c0001e3b <mem_cpy>
c000411c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004120:	29 f7                	sub    edi,esi
c0004122:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004126:	01 30                	add    DWORD PTR [eax],esi
c0004128:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000412b:	e9 88 fe ff ff       	jmp    c0003fb8 <f_read+0x55>
c0004130:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000413c:	83 c4 2c             	add    esp,0x2c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_write>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 67 e1 ff ff       	call   c00022cb <validate>
c0004164:	85 c0                	test   eax,eax
c0004166:	89 c7                	mov    edi,eax
c0004168:	0f 85 13 02 00 00    	jne    c0004381 <f_write+0x23d>
c000416e:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004172:	85 ff                	test   edi,edi
c0004174:	0f 85 07 02 00 00    	jne    c0004381 <f_write+0x23d>
c000417a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000417e:	0f 84 f8 01 00 00    	je     c000437c <f_write+0x238>
c0004184:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004187:	89 c1                	mov    ecx,eax
c0004189:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000418d:	0f 83 ed 00 00 00    	jae    c0004280 <f_write+0x13c>
c0004193:	f7 d0                	not    eax
c0004195:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004199:	e9 e2 00 00 00       	jmp    c0004280 <f_write+0x13c>
c000419e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a1:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a6:	0f 85 9b 01 00 00    	jne    c0004347 <f_write+0x203>
c00041ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b0:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b4:	89 c2                	mov    edx,eax
c00041b6:	c1 ea 09             	shr    edx,0x9
c00041b9:	4d                   	dec    ebp
c00041ba:	21 d5                	and    ebp,edx
c00041bc:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c0:	0f 84 c7 00 00 00    	je     c000428d <f_write+0x149>
c00041c6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041ca:	0f 85 23 01 00 00    	jne    c00042f3 <f_write+0x1af>
c00041d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041db:	89 c8                	mov    eax,ecx
c00041dd:	e8 83 de ff ff       	call   c0002065 <clst2sect>
c00041e2:	85 c0                	test   eax,eax
c00041e4:	0f 84 d3 00 00 00    	je     c00042bd <f_write+0x179>
c00041ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ee:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041f6:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00041f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041fd:	0f 86 1c 01 00 00    	jbe    c000431f <f_write+0x1db>
c0004203:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004207:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000420b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000420f:	c1 ee 09             	shr    esi,0x9
c0004212:	01 f2                	add    edx,esi
c0004214:	39 c2                	cmp    edx,eax
c0004216:	76 06                	jbe    c000421e <f_write+0xda>
c0004218:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000421c:	89 c6                	mov    esi,eax
c000421e:	56                   	push   esi
c000421f:	55                   	push   ebp
c0004220:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004224:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004228:	50                   	push   eax
c0004229:	e8 ac db ff ff       	call   c0001dda <disk_write>
c000422e:	83 c4 10             	add    esp,0x10
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 97 00 00 00    	jne    c00042d0 <f_write+0x18c>
c0004239:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000423c:	29 ea                	sub    edx,ebp
c000423e:	39 f2                	cmp    edx,esi
c0004240:	73 1d                	jae    c000425f <f_write+0x11b>
c0004242:	c1 e2 09             	shl    edx,0x9
c0004245:	b9 00 02 00 00       	mov    ecx,0x200
c000424a:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000424e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004251:	e8 e5 db ff ff       	call   c0001e3b <mem_cpy>
c0004256:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004259:	83 e0 7f             	and    eax,0x7f
c000425c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000425f:	c1 e6 09             	shl    esi,0x9
c0004262:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004266:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000426a:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000426e:	01 30                	add    DWORD PTR [eax],esi
c0004270:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004273:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004276:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004279:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000427d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004280:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004285:	0f 85 13 ff ff ff    	jne    c000419e <f_write+0x5a>
c000428b:	eb 1d                	jmp    c00042aa <f_write+0x166>
c000428d:	85 c0                	test   eax,eax
c000428f:	75 0b                	jne    c000429c <f_write+0x158>
c0004291:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004294:	31 d2                	xor    edx,edx
c0004296:	85 c0                	test   eax,eax
c0004298:	75 1e                	jne    c00042b8 <f_write+0x174>
c000429a:	eb 03                	jmp    c000429f <f_write+0x15b>
c000429c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000429f:	89 d8                	mov    eax,ebx
c00042a1:	e8 78 f1 ff ff       	call   c000341e <create_chain>
c00042a6:	85 c0                	test   eax,eax
c00042a8:	75 0e                	jne    c00042b8 <f_write+0x174>
c00042aa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ad:	83 c8 40             	or     eax,0x40
c00042b0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042b3:	e9 c9 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042b8:	83 f8 01             	cmp    eax,0x1
c00042bb:	75 0e                	jne    c00042cb <f_write+0x187>
c00042bd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00042c1:	bf 02 00 00 00       	mov    edi,0x2
c00042c6:	e9 b6 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042cb:	83 f8 ff             	cmp    eax,0xffffffff
c00042ce:	75 0e                	jne    c00042de <f_write+0x19a>
c00042d0:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042d4:	bf 01 00 00 00       	mov    edi,0x1
c00042d9:	e9 a3 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042de:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042e2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042e5:	0f 85 db fe ff ff    	jne    c00041c6 <f_write+0x82>
c00042eb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042ee:	e9 d3 fe ff ff       	jmp    c00041c6 <f_write+0x82>
c00042f3:	6a 01                	push   0x1
c00042f5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042f8:	8d 43 28             	lea    eax,[ebx+0x28]
c00042fb:	50                   	push   eax
c00042fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004300:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004304:	50                   	push   eax
c0004305:	e8 d0 da ff ff       	call   c0001dda <disk_write>
c000430a:	83 c4 10             	add    esp,0x10
c000430d:	85 c0                	test   eax,eax
c000430f:	75 bf                	jne    c00042d0 <f_write+0x18c>
c0004311:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004314:	83 e0 7f             	and    eax,0x7f
c0004317:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000431a:	e9 b1 fe ff ff       	jmp    c00041d0 <f_write+0x8c>
c000431f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004322:	74 20                	je     c0004344 <f_write+0x200>
c0004324:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004327:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000432a:	76 18                	jbe    c0004344 <f_write+0x200>
c000432c:	6a 01                	push   0x1
c000432e:	55                   	push   ebp
c000432f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004332:	50                   	push   eax
c0004333:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004337:	50                   	push   eax
c0004338:	e8 87 da ff ff       	call   c0001dc4 <disk_read>
c000433d:	83 c4 10             	add    esp,0x10
c0004340:	85 c0                	test   eax,eax
c0004342:	75 8c                	jne    c00042d0 <f_write+0x18c>
c0004344:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004347:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000434a:	be 00 02 00 00       	mov    esi,0x200
c000434f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004353:	25 ff 01 00 00       	and    eax,0x1ff
c0004358:	29 c6                	sub    esi,eax
c000435a:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000435e:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004362:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004367:	89 f1                	mov    ecx,esi
c0004369:	e8 cd da ff ff       	call   c0001e3b <mem_cpy>
c000436e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004371:	83 c8 80             	or     eax,0xffffff80
c0004374:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004377:	e9 e6 fe ff ff       	jmp    c0004262 <f_write+0x11e>
c000437c:	bf 07 00 00 00       	mov    edi,0x7
c0004381:	83 c4 2c             	add    esp,0x2c
c0004384:	89 f8                	mov    eax,edi
c0004386:	5b                   	pop    ebx
c0004387:	5e                   	pop    esi
c0004388:	5f                   	pop    edi
c0004389:	5d                   	pop    ebp
c000438a:	c3                   	ret    

c000438b <f_sync>:
c000438b:	56                   	push   esi
c000438c:	53                   	push   ebx
c000438d:	83 ec 14             	sub    esp,0x14
c0004390:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004394:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004398:	89 d8                	mov    eax,ebx
c000439a:	e8 2c df ff ff       	call   c00022cb <validate>
c000439f:	85 c0                	test   eax,eax
c00043a1:	0f 85 a3 00 00 00    	jne    c000444a <f_sync+0xbf>
c00043a7:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00043aa:	f6 c2 40             	test   dl,0x40
c00043ad:	0f 84 97 00 00 00    	je     c000444a <f_sync+0xbf>
c00043b3:	80 e2 80             	and    dl,0x80
c00043b6:	74 2e                	je     c00043e6 <f_sync+0x5b>
c00043b8:	6a 01                	push   0x1
c00043ba:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00043bd:	8d 43 28             	lea    eax,[ebx+0x28]
c00043c0:	50                   	push   eax
c00043c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043c5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043c9:	50                   	push   eax
c00043ca:	e8 0b da ff ff       	call   c0001dda <disk_write>
c00043cf:	83 c4 10             	add    esp,0x10
c00043d2:	89 c2                	mov    edx,eax
c00043d4:	b8 01 00 00 00       	mov    eax,0x1
c00043d9:	85 d2                	test   edx,edx
c00043db:	75 6d                	jne    c000444a <f_sync+0xbf>
c00043dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043e0:	83 e0 7f             	and    eax,0x7f
c00043e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043e6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043ed:	e8 82 df ff ff       	call   c0002374 <move_window>
c00043f2:	85 c0                	test   eax,eax
c00043f4:	75 54                	jne    c000444a <f_sync+0xbf>
c00043f6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043f9:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043fc:	89 f2                	mov    edx,esi
c00043fe:	83 c8 20             	or     eax,0x20
c0004401:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004404:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0004407:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004409:	e8 1b ee ff ff       	call   c0003229 <st_clust.isra.1>
c000440e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004411:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004414:	e8 1f da ff ff       	call   c0001e38 <st_dword>
c0004419:	8d 46 16             	lea    eax,[esi+0x16]
c000441c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004421:	e8 12 da ff ff       	call   c0001e38 <st_dword>
c0004426:	8d 46 12             	lea    eax,[esi+0x12]
c0004429:	31 d2                	xor    edx,edx
c000442b:	e8 04 da ff ff       	call   c0001e34 <st_word>
c0004430:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004434:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004438:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000443c:	e8 68 e9 ff ff       	call   c0002da9 <sync_fs>
c0004441:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004444:	83 e2 bf             	and    edx,0xffffffbf
c0004447:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000444a:	83 c4 14             	add    esp,0x14
c000444d:	5b                   	pop    ebx
c000444e:	5e                   	pop    esi
c000444f:	c3                   	ret    

c0004450 <f_close>:
c0004450:	53                   	push   ebx
c0004451:	83 ec 24             	sub    esp,0x24
c0004454:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004458:	53                   	push   ebx
c0004459:	e8 2d ff ff ff       	call   c000438b <f_sync>
c000445e:	83 c4 10             	add    esp,0x10
c0004461:	85 c0                	test   eax,eax
c0004463:	75 15                	jne    c000447a <f_close+0x2a>
c0004465:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004469:	89 d8                	mov    eax,ebx
c000446b:	e8 5b de ff ff       	call   c00022cb <validate>
c0004470:	85 c0                	test   eax,eax
c0004472:	75 06                	jne    c000447a <f_close+0x2a>
c0004474:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000447a:	83 c4 18             	add    esp,0x18
c000447d:	5b                   	pop    ebx
c000447e:	c3                   	ret    

c000447f <f_lseek>:
c000447f:	55                   	push   ebp
c0004480:	57                   	push   edi
c0004481:	56                   	push   esi
c0004482:	53                   	push   ebx
c0004483:	83 ec 2c             	sub    esp,0x2c
c0004486:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000448a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000448e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004492:	89 d8                	mov    eax,ebx
c0004494:	e8 32 de ff ff       	call   c00022cb <validate>
c0004499:	85 c0                	test   eax,eax
c000449b:	89 c5                	mov    ebp,eax
c000449d:	0f 85 82 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044a3:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00044a7:	85 ed                	test   ebp,ebp
c00044a9:	0f 85 76 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044af:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00044b2:	39 f0                	cmp    eax,esi
c00044b4:	73 07                	jae    c00044bd <f_lseek+0x3e>
c00044b6:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044ba:	0f 44 f0             	cmove  esi,eax
c00044bd:	85 f6                	test   esi,esi
c00044bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00044c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044c9:	75 07                	jne    c00044d2 <f_lseek+0x53>
c00044cb:	31 f6                	xor    esi,esi
c00044cd:	e9 e2 00 00 00       	jmp    c00045b4 <f_lseek+0x135>
c00044d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d6:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044da:	c1 e7 09             	shl    edi,0x9
c00044dd:	85 c9                	test   ecx,ecx
c00044df:	74 28                	je     c0004509 <f_lseek+0x8a>
c00044e1:	31 d2                	xor    edx,edx
c00044e3:	49                   	dec    ecx
c00044e4:	8d 46 ff             	lea    eax,[esi-0x1]
c00044e7:	f7 f7                	div    edi
c00044e9:	31 d2                	xor    edx,edx
c00044eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044ef:	89 c8                	mov    eax,ecx
c00044f1:	f7 f7                	div    edi
c00044f3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044f7:	72 10                	jb     c0004509 <f_lseek+0x8a>
c00044f9:	89 f8                	mov    eax,edi
c00044fb:	f7 d8                	neg    eax
c00044fd:	21 c1                	and    ecx,eax
c00044ff:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004502:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004505:	29 ce                	sub    esi,ecx
c0004507:	eb 3c                	jmp    c0004545 <f_lseek+0xc6>
c0004509:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000450c:	85 c0                	test   eax,eax
c000450e:	75 32                	jne    c0004542 <f_lseek+0xc3>
c0004510:	31 d2                	xor    edx,edx
c0004512:	89 d8                	mov    eax,ebx
c0004514:	e8 05 ef ff ff       	call   c000341e <create_chain>
c0004519:	83 f8 01             	cmp    eax,0x1
c000451c:	75 0e                	jne    c000452c <f_lseek+0xad>
c000451e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004522:	bd 02 00 00 00       	mov    ebp,0x2
c0004527:	e9 f9 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000452c:	83 f8 ff             	cmp    eax,0xffffffff
c000452f:	75 0e                	jne    c000453f <f_lseek+0xc0>
c0004531:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004535:	bd 01 00 00 00       	mov    ebp,0x1
c000453a:	e9 e6 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000453f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004542:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004545:	85 c0                	test   eax,eax
c0004547:	74 82                	je     c00044cb <f_lseek+0x4c>
c0004549:	39 fe                	cmp    esi,edi
c000454b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000454e:	76 3d                	jbe    c000458d <f_lseek+0x10e>
c0004550:	01 fa                	add    edx,edi
c0004552:	29 fe                	sub    esi,edi
c0004554:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004558:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000455b:	89 c2                	mov    edx,eax
c000455d:	74 0d                	je     c000456c <f_lseek+0xed>
c000455f:	89 d8                	mov    eax,ebx
c0004561:	e8 b8 ee ff ff       	call   c000341e <create_chain>
c0004566:	85 c0                	test   eax,eax
c0004568:	75 09                	jne    c0004573 <f_lseek+0xf4>
c000456a:	eb 1f                	jmp    c000458b <f_lseek+0x10c>
c000456c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000456e:	e8 de ec ff ff       	call   c0003251 <get_fat.isra.2>
c0004573:	83 f8 ff             	cmp    eax,0xffffffff
c0004576:	74 b9                	je     c0004531 <f_lseek+0xb2>
c0004578:	83 f8 01             	cmp    eax,0x1
c000457b:	76 a1                	jbe    c000451e <f_lseek+0x9f>
c000457d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004581:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004584:	76 98                	jbe    c000451e <f_lseek+0x9f>
c0004586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004589:	eb be                	jmp    c0004549 <f_lseek+0xca>
c000458b:	31 f6                	xor    esi,esi
c000458d:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004590:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004596:	0f 84 2f ff ff ff    	je     c00044cb <f_lseek+0x4c>
c000459c:	89 c2                	mov    edx,eax
c000459e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045a2:	e8 be da ff ff       	call   c0002065 <clst2sect>
c00045a7:	85 c0                	test   eax,eax
c00045a9:	0f 84 6f ff ff ff    	je     c000451e <f_lseek+0x9f>
c00045af:	c1 ee 09             	shr    esi,0x9
c00045b2:	01 c6                	add    esi,eax
c00045b4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00045b7:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00045ba:	76 0c                	jbe    c00045c8 <f_lseek+0x149>
c00045bc:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00045bf:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00045c2:	83 ca 40             	or     edx,0x40
c00045c5:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045c8:	a9 ff 01 00 00       	test   eax,0x1ff
c00045cd:	74 56                	je     c0004625 <f_lseek+0x1a6>
c00045cf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045d2:	39 f0                	cmp    eax,esi
c00045d4:	74 4f                	je     c0004625 <f_lseek+0x1a6>
c00045d6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045da:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045dd:	74 26                	je     c0004605 <f_lseek+0x186>
c00045df:	6a 01                	push   0x1
c00045e1:	50                   	push   eax
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 e9 d7 ff ff       	call   c0001dda <disk_write>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 35 ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c00045fc:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045ff:	83 e0 7f             	and    eax,0x7f
c0004602:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004605:	6a 01                	push   0x1
c0004607:	56                   	push   esi
c0004608:	57                   	push   edi
c0004609:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000460d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004611:	50                   	push   eax
c0004612:	e8 ad d7 ff ff       	call   c0001dc4 <disk_read>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	85 c0                	test   eax,eax
c000461c:	0f 85 0f ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c0004622:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004625:	83 c4 2c             	add    esp,0x2c
c0004628:	89 e8                	mov    eax,ebp
c000462a:	5b                   	pop    ebx
c000462b:	5e                   	pop    esi
c000462c:	5f                   	pop    edi
c000462d:	5d                   	pop    ebp
c000462e:	c3                   	ret    

c000462f <f_opendir>:
c000462f:	56                   	push   esi
c0004630:	b8 09 00 00 00       	mov    eax,0x9
c0004635:	53                   	push   ebx
c0004636:	83 ec 24             	sub    esp,0x24
c0004639:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000463d:	85 db                	test   ebx,ebx
c000463f:	0f 84 af 00 00 00    	je     c00046f4 <f_opendir+0xc5>
c0004645:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004649:	31 c9                	xor    ecx,ecx
c000464b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000464f:	e8 7d de ff ff       	call   c00024d1 <mount_volume>
c0004654:	85 c0                	test   eax,eax
c0004656:	0f 85 92 00 00 00    	jne    c00046ee <f_opendir+0xbf>
c000465c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004660:	83 ec 0c             	sub    esp,0xc
c0004663:	89 03                	mov    DWORD PTR [ebx],eax
c0004665:	68 00 02 00 00       	push   0x200
c000466a:	e8 e5 15 00 00       	call   c0005c54 <ff_memalloc>
c000466f:	83 c4 10             	add    esp,0x10
c0004672:	89 c6                	mov    esi,eax
c0004674:	b8 11 00 00 00       	mov    eax,0x11
c0004679:	85 f6                	test   esi,esi
c000467b:	74 77                	je     c00046f4 <f_opendir+0xc5>
c000467d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004681:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004685:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004688:	89 d8                	mov    eax,ebx
c000468a:	e8 8a f3 ff ff       	call   c0003a19 <follow_path>
c000468f:	85 c0                	test   eax,eax
c0004691:	75 37                	jne    c00046ca <f_opendir+0x9b>
c0004693:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004697:	75 1c                	jne    c00046b5 <f_opendir+0x86>
c0004699:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000469d:	b8 05 00 00 00       	mov    eax,0x5
c00046a2:	74 26                	je     c00046ca <f_opendir+0x9b>
c00046a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046a8:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00046ab:	8a 00                	mov    al,BYTE PTR [eax]
c00046ad:	e8 4e eb ff ff       	call   c0003200 <ld_clust.isra.0>
c00046b2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00046b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b9:	31 d2                	xor    edx,edx
c00046bb:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00046bf:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00046c3:	89 d8                	mov    eax,ebx
c00046c5:	e8 8c ec ff ff       	call   c0003356 <dir_sdi>
c00046ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046ce:	83 ec 0c             	sub    esp,0xc
c00046d1:	56                   	push   esi
c00046d2:	e8 95 15 00 00       	call   c0005c6c <ff_memfree>
c00046d7:	83 c4 10             	add    esp,0x10
c00046da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046de:	83 f8 04             	cmp    eax,0x4
c00046e1:	74 06                	je     c00046e9 <f_opendir+0xba>
c00046e3:	85 c0                	test   eax,eax
c00046e5:	74 0d                	je     c00046f4 <f_opendir+0xc5>
c00046e7:	eb 05                	jmp    c00046ee <f_opendir+0xbf>
c00046e9:	b8 05 00 00 00       	mov    eax,0x5
c00046ee:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f4:	83 c4 24             	add    esp,0x24
c00046f7:	5b                   	pop    ebx
c00046f8:	5e                   	pop    esi
c00046f9:	c3                   	ret    

c00046fa <f_closedir>:
c00046fa:	53                   	push   ebx
c00046fb:	83 ec 18             	sub    esp,0x18
c00046fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004702:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004706:	89 d8                	mov    eax,ebx
c0004708:	e8 be db ff ff       	call   c00022cb <validate>
c000470d:	85 c0                	test   eax,eax
c000470f:	75 06                	jne    c0004717 <f_closedir+0x1d>
c0004711:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004717:	83 c4 18             	add    esp,0x18
c000471a:	5b                   	pop    ebx
c000471b:	c3                   	ret    

c000471c <f_readdir>:
c000471c:	57                   	push   edi
c000471d:	56                   	push   esi
c000471e:	53                   	push   ebx
c000471f:	83 ec 20             	sub    esp,0x20
c0004722:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004726:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000472a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000472e:	89 d8                	mov    eax,ebx
c0004730:	e8 96 db ff ff       	call   c00022cb <validate>
c0004735:	85 c0                	test   eax,eax
c0004737:	75 6e                	jne    c00047a7 <f_readdir+0x8b>
c0004739:	85 ff                	test   edi,edi
c000473b:	75 0b                	jne    c0004748 <f_readdir+0x2c>
c000473d:	31 d2                	xor    edx,edx
c000473f:	89 d8                	mov    eax,ebx
c0004741:	e8 10 ec ff ff       	call   c0003356 <dir_sdi>
c0004746:	eb 5f                	jmp    c00047a7 <f_readdir+0x8b>
c0004748:	83 ec 0c             	sub    esp,0xc
c000474b:	68 00 02 00 00       	push   0x200
c0004750:	e8 ff 14 00 00       	call   c0005c54 <ff_memalloc>
c0004755:	83 c4 10             	add    esp,0x10
c0004758:	89 c6                	mov    esi,eax
c000475a:	b8 11 00 00 00       	mov    eax,0x11
c000475f:	85 f6                	test   esi,esi
c0004761:	74 44                	je     c00047a7 <f_readdir+0x8b>
c0004763:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004767:	31 d2                	xor    edx,edx
c0004769:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000476c:	89 d8                	mov    eax,ebx
c000476e:	e8 dd ef ff ff       	call   c0003750 <dir_read>
c0004773:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004778:	75 19                	jne    c0004793 <f_readdir+0x77>
c000477a:	89 fa                	mov    edx,edi
c000477c:	89 d8                	mov    eax,ebx
c000477e:	e8 7c e8 ff ff       	call   c0002fff <get_fileinfo>
c0004783:	31 d2                	xor    edx,edx
c0004785:	89 d8                	mov    eax,ebx
c0004787:	e8 5a ee ff ff       	call   c00035e6 <dir_next>
c000478c:	83 f8 04             	cmp    eax,0x4
c000478f:	75 02                	jne    c0004793 <f_readdir+0x77>
c0004791:	31 c0                	xor    eax,eax
c0004793:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004797:	83 ec 0c             	sub    esp,0xc
c000479a:	56                   	push   esi
c000479b:	e8 cc 14 00 00       	call   c0005c6c <ff_memfree>
c00047a0:	83 c4 10             	add    esp,0x10
c00047a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047a7:	83 c4 20             	add    esp,0x20
c00047aa:	5b                   	pop    ebx
c00047ab:	5e                   	pop    esi
c00047ac:	5f                   	pop    edi
c00047ad:	c3                   	ret    

c00047ae <f_stat>:
c00047ae:	57                   	push   edi
c00047af:	31 c9                	xor    ecx,ecx
c00047b1:	56                   	push   esi
c00047b2:	53                   	push   ebx
c00047b3:	83 ec 30             	sub    esp,0x30
c00047b6:	8d 44 24 40          	lea    eax,[esp+0x40]
c00047ba:	89 e2                	mov    edx,esp
c00047bc:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00047c0:	e8 0c dd ff ff       	call   c00024d1 <mount_volume>
c00047c5:	85 c0                	test   eax,eax
c00047c7:	89 c3                	mov    ebx,eax
c00047c9:	75 59                	jne    c0004824 <f_stat+0x76>
c00047cb:	83 ec 0c             	sub    esp,0xc
c00047ce:	bb 11 00 00 00       	mov    ebx,0x11
c00047d3:	68 00 02 00 00       	push   0x200
c00047d8:	e8 77 14 00 00       	call   c0005c54 <ff_memalloc>
c00047dd:	83 c4 10             	add    esp,0x10
c00047e0:	85 c0                	test   eax,eax
c00047e2:	89 c6                	mov    esi,eax
c00047e4:	74 3e                	je     c0004824 <f_stat+0x76>
c00047e6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047e9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047f0:	89 e0                	mov    eax,esp
c00047f2:	e8 22 f2 ff ff       	call   c0003a19 <follow_path>
c00047f7:	85 c0                	test   eax,eax
c00047f9:	89 c3                	mov    ebx,eax
c00047fb:	75 1b                	jne    c0004818 <f_stat+0x6a>
c00047fd:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c0004802:	75 0f                	jne    c0004813 <f_stat+0x65>
c0004804:	85 ff                	test   edi,edi
c0004806:	74 10                	je     c0004818 <f_stat+0x6a>
c0004808:	89 fa                	mov    edx,edi
c000480a:	89 e0                	mov    eax,esp
c000480c:	e8 ee e7 ff ff       	call   c0002fff <get_fileinfo>
c0004811:	eb 05                	jmp    c0004818 <f_stat+0x6a>
c0004813:	bb 06 00 00 00       	mov    ebx,0x6
c0004818:	83 ec 0c             	sub    esp,0xc
c000481b:	56                   	push   esi
c000481c:	e8 4b 14 00 00       	call   c0005c6c <ff_memfree>
c0004821:	83 c4 10             	add    esp,0x10
c0004824:	83 c4 30             	add    esp,0x30
c0004827:	89 d8                	mov    eax,ebx
c0004829:	5b                   	pop    ebx
c000482a:	5e                   	pop    esi
c000482b:	5f                   	pop    edi
c000482c:	c3                   	ret    

c000482d <f_getfree>:
c000482d:	55                   	push   ebp
c000482e:	31 c9                	xor    ecx,ecx
c0004830:	57                   	push   edi
c0004831:	56                   	push   esi
c0004832:	53                   	push   ebx
c0004833:	83 ec 2c             	sub    esp,0x2c
c0004836:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000483a:	8d 44 24 40          	lea    eax,[esp+0x40]
c000483e:	e8 8e dc ff ff       	call   c00024d1 <mount_volume>
c0004843:	85 c0                	test   eax,eax
c0004845:	89 c6                	mov    esi,eax
c0004847:	0f 85 df 00 00 00    	jne    c000492c <f_getfree+0xff>
c000484d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004851:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004855:	89 18                	mov    DWORD PTR [eax],ebx
c0004857:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000485a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000485d:	8d 57 fe             	lea    edx,[edi-0x2]
c0004860:	39 d0                	cmp    eax,edx
c0004862:	77 0b                	ja     c000486f <f_getfree+0x42>
c0004864:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004868:	89 01                	mov    DWORD PTR [ecx],eax
c000486a:	e9 bd 00 00 00       	jmp    c000492c <f_getfree+0xff>
c000486f:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004872:	75 29                	jne    c000489d <f_getfree+0x70>
c0004874:	bf 02 00 00 00       	mov    edi,0x2
c0004879:	31 ed                	xor    ebp,ebp
c000487b:	89 fa                	mov    edx,edi
c000487d:	89 d8                	mov    eax,ebx
c000487f:	e8 cd e9 ff ff       	call   c0003251 <get_fat.isra.2>
c0004884:	83 f8 ff             	cmp    eax,0xffffffff
c0004887:	74 7d                	je     c0004906 <f_getfree+0xd9>
c0004889:	83 f8 01             	cmp    eax,0x1
c000488c:	74 7f                	je     c000490d <f_getfree+0xe0>
c000488e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004892:	83 d5 00             	adc    ebp,0x0
c0004895:	47                   	inc    edi
c0004896:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004899:	77 e0                	ja     c000487b <f_getfree+0x4e>
c000489b:	eb 79                	jmp    c0004916 <f_getfree+0xe9>
c000489d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00048a0:	31 ed                	xor    ebp,ebp
c00048a2:	31 db                	xor    ebx,ebx
c00048a4:	85 db                	test   ebx,ebx
c00048a6:	75 18                	jne    c00048c0 <f_getfree+0x93>
c00048a8:	8d 42 01             	lea    eax,[edx+0x1]
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b3:	e8 bc da ff ff       	call   c0002374 <move_window>
c00048b8:	85 c0                	test   eax,eax
c00048ba:	75 58                	jne    c0004914 <f_getfree+0xe7>
c00048bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00048c8:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048cb:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c00048cf:	75 13                	jne    c00048e4 <f_getfree+0xb7>
c00048d1:	e8 39 d5 ff ff       	call   c0001e0f <ld_word>
c00048d6:	0f b7 c0             	movzx  eax,ax
c00048d9:	83 f8 01             	cmp    eax,0x1
c00048dc:	83 d5 00             	adc    ebp,0x0
c00048df:	83 c3 02             	add    ebx,0x2
c00048e2:	eb 13                	jmp    c00048f7 <f_getfree+0xca>
c00048e4:	e8 33 d5 ff ff       	call   c0001e1c <ld_dword>
c00048e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048ee:	83 f8 01             	cmp    eax,0x1
c00048f1:	83 d5 00             	adc    ebp,0x0
c00048f4:	83 c3 04             	add    ebx,0x4
c00048f7:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00048fd:	4f                   	dec    edi
c00048fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004902:	75 a0                	jne    c00048a4 <f_getfree+0x77>
c0004904:	eb 10                	jmp    c0004916 <f_getfree+0xe9>
c0004906:	be 01 00 00 00       	mov    esi,0x1
c000490b:	eb 09                	jmp    c0004916 <f_getfree+0xe9>
c000490d:	be 02 00 00 00       	mov    esi,0x2
c0004912:	eb 02                	jmp    c0004916 <f_getfree+0xe9>
c0004914:	89 c6                	mov    esi,eax
c0004916:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000491a:	89 28                	mov    DWORD PTR [eax],ebp
c000491c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004920:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004923:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004926:	83 ca 01             	or     edx,0x1
c0004929:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c000492c:	83 c4 2c             	add    esp,0x2c
c000492f:	89 f0                	mov    eax,esi
c0004931:	5b                   	pop    ebx
c0004932:	5e                   	pop    esi
c0004933:	5f                   	pop    edi
c0004934:	5d                   	pop    ebp
c0004935:	c3                   	ret    

c0004936 <f_truncate>:
c0004936:	56                   	push   esi
c0004937:	53                   	push   ebx
c0004938:	83 ec 14             	sub    esp,0x14
c000493b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000493f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004943:	89 d8                	mov    eax,ebx
c0004945:	e8 81 d9 ff ff       	call   c00022cb <validate>
c000494a:	85 c0                	test   eax,eax
c000494c:	89 c6                	mov    esi,eax
c000494e:	0f 85 c4 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004954:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004958:	85 f6                	test   esi,esi
c000495a:	0f 85 b8 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004960:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004964:	0f 84 a9 00 00 00    	je     c0004a13 <f_truncate+0xdd>
c000496a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000496d:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004970:	0f 83 a2 00 00 00    	jae    c0004a18 <f_truncate+0xe2>
c0004976:	85 c0                	test   eax,eax
c0004978:	75 15                	jne    c000498f <f_truncate+0x59>
c000497a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000497d:	31 c9                	xor    ecx,ecx
c000497f:	89 d8                	mov    eax,ebx
c0004981:	e8 d2 eb ff ff       	call   c0003558 <remove_chain>
c0004986:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000498d:	eb 35                	jmp    c00049c4 <f_truncate+0x8e>
c000498f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004994:	e8 b8 e8 ff ff       	call   c0003251 <get_fat.isra.2>
c0004999:	89 c2                	mov    edx,eax
c000499b:	b8 01 00 00 00       	mov    eax,0x1
c00049a0:	83 fa ff             	cmp    edx,0xffffffff
c00049a3:	74 1f                	je     c00049c4 <f_truncate+0x8e>
c00049a5:	83 fa 01             	cmp    edx,0x1
c00049a8:	b8 02 00 00 00       	mov    eax,0x2
c00049ad:	74 15                	je     c00049c4 <f_truncate+0x8e>
c00049af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049b3:	31 c0                	xor    eax,eax
c00049b5:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c00049b8:	76 0a                	jbe    c00049c4 <f_truncate+0x8e>
c00049ba:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c00049bd:	89 d8                	mov    eax,ebx
c00049bf:	e8 94 eb ff ff       	call   c0003558 <remove_chain>
c00049c4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049c7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049ca:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049cd:	83 ca 40             	or     edx,0x40
c00049d0:	85 c0                	test   eax,eax
c00049d2:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049d5:	75 35                	jne    c0004a0c <f_truncate+0xd6>
c00049d7:	80 e2 80             	and    dl,0x80
c00049da:	74 3c                	je     c0004a18 <f_truncate+0xe2>
c00049dc:	6a 01                	push   0x1
c00049de:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049e1:	8d 43 28             	lea    eax,[ebx+0x28]
c00049e4:	50                   	push   eax
c00049e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049e9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049ed:	50                   	push   eax
c00049ee:	e8 e7 d3 ff ff       	call   c0001dda <disk_write>
c00049f3:	83 c4 10             	add    esp,0x10
c00049f6:	85 c0                	test   eax,eax
c00049f8:	75 0d                	jne    c0004a07 <f_truncate+0xd1>
c00049fa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049fd:	31 f6                	xor    esi,esi
c00049ff:	83 e0 7f             	and    eax,0x7f
c0004a02:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004a05:	eb 11                	jmp    c0004a18 <f_truncate+0xe2>
c0004a07:	b8 01 00 00 00       	mov    eax,0x1
c0004a0c:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004a0f:	89 c6                	mov    esi,eax
c0004a11:	eb 05                	jmp    c0004a18 <f_truncate+0xe2>
c0004a13:	be 07 00 00 00       	mov    esi,0x7
c0004a18:	83 c4 14             	add    esp,0x14
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	5b                   	pop    ebx
c0004a1e:	5e                   	pop    esi
c0004a1f:	c3                   	ret    

c0004a20 <f_unlink>:
c0004a20:	55                   	push   ebp
c0004a21:	b9 02 00 00 00       	mov    ecx,0x2
c0004a26:	57                   	push   edi
c0004a27:	56                   	push   esi
c0004a28:	53                   	push   ebx
c0004a29:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a2f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a33:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a3a:	e8 92 da ff ff       	call   c00024d1 <mount_volume>
c0004a3f:	85 c0                	test   eax,eax
c0004a41:	0f 85 ee 00 00 00    	jne    c0004b35 <f_unlink+0x115>
c0004a47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4b:	83 ec 0c             	sub    esp,0xc
c0004a4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a52:	68 00 02 00 00       	push   0x200
c0004a57:	e8 f8 11 00 00       	call   c0005c54 <ff_memalloc>
c0004a5c:	83 c4 10             	add    esp,0x10
c0004a5f:	89 c3                	mov    ebx,eax
c0004a61:	b8 11 00 00 00       	mov    eax,0x11
c0004a66:	85 db                	test   ebx,ebx
c0004a68:	0f 84 c7 00 00 00    	je     c0004b35 <f_unlink+0x115>
c0004a6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a72:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a79:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a7c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a80:	e8 94 ef ff ff       	call   c0003a19 <follow_path>
c0004a85:	85 c0                	test   eax,eax
c0004a87:	0f 85 94 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a8d:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a92:	b8 06 00 00 00       	mov    eax,0x6
c0004a97:	0f 85 84 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a9d:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004aa2:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004aa8:	74 07                	je     c0004ab1 <f_unlink+0x91>
c0004aaa:	b8 07 00 00 00       	mov    eax,0x7
c0004aaf:	eb 70                	jmp    c0004b21 <f_unlink+0x101>
c0004ab1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ab5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ab9:	8a 07                	mov    al,BYTE PTR [edi]
c0004abb:	e8 40 e7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004ac0:	83 e5 10             	and    ebp,0x10
c0004ac3:	89 c6                	mov    esi,eax
c0004ac5:	75 20                	jne    c0004ae7 <f_unlink+0xc7>
c0004ac7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004acb:	e8 a8 ed ff ff       	call   c0003878 <dir_remove>
c0004ad0:	85 c0                	test   eax,eax
c0004ad2:	75 40                	jne    c0004b14 <f_unlink+0xf4>
c0004ad4:	85 f6                	test   esi,esi
c0004ad6:	74 3c                	je     c0004b14 <f_unlink+0xf4>
c0004ad8:	31 c9                	xor    ecx,ecx
c0004ada:	89 f2                	mov    edx,esi
c0004adc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ae0:	e8 73 ea ff ff       	call   c0003558 <remove_chain>
c0004ae5:	eb 2d                	jmp    c0004b14 <f_unlink+0xf4>
c0004ae7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004aeb:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004aef:	31 d2                	xor    edx,edx
c0004af1:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004af5:	e8 5c e8 ff ff       	call   c0003356 <dir_sdi>
c0004afa:	85 c0                	test   eax,eax
c0004afc:	75 23                	jne    c0004b21 <f_unlink+0x101>
c0004afe:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004b02:	31 d2                	xor    edx,edx
c0004b04:	e8 47 ec ff ff       	call   c0003750 <dir_read>
c0004b09:	85 c0                	test   eax,eax
c0004b0b:	74 9d                	je     c0004aaa <f_unlink+0x8a>
c0004b0d:	83 f8 04             	cmp    eax,0x4
c0004b10:	75 0f                	jne    c0004b21 <f_unlink+0x101>
c0004b12:	eb b3                	jmp    c0004ac7 <f_unlink+0xa7>
c0004b14:	85 c0                	test   eax,eax
c0004b16:	75 09                	jne    c0004b21 <f_unlink+0x101>
c0004b18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b1c:	e8 88 e2 ff ff       	call   c0002da9 <sync_fs>
c0004b21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b25:	83 ec 0c             	sub    esp,0xc
c0004b28:	53                   	push   ebx
c0004b29:	e8 3e 11 00 00       	call   c0005c6c <ff_memfree>
c0004b2e:	83 c4 10             	add    esp,0x10
c0004b31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b35:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b3b:	5b                   	pop    ebx
c0004b3c:	5e                   	pop    esi
c0004b3d:	5f                   	pop    edi
c0004b3e:	5d                   	pop    ebp
c0004b3f:	c3                   	ret    

c0004b40 <f_mkdir>:
c0004b40:	57                   	push   edi
c0004b41:	b9 02 00 00 00       	mov    ecx,0x2
c0004b46:	56                   	push   esi
c0004b47:	53                   	push   ebx
c0004b48:	83 ec 50             	sub    esp,0x50
c0004b4b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b4f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b53:	e8 79 d9 ff ff       	call   c00024d1 <mount_volume>
c0004b58:	85 c0                	test   eax,eax
c0004b5a:	89 c3                	mov    ebx,eax
c0004b5c:	0f 85 70 01 00 00    	jne    c0004cd2 <f_mkdir+0x192>
c0004b62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b66:	83 ec 0c             	sub    esp,0xc
c0004b69:	bb 11 00 00 00       	mov    ebx,0x11
c0004b6e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b72:	68 00 02 00 00       	push   0x200
c0004b77:	e8 d8 10 00 00       	call   c0005c54 <ff_memalloc>
c0004b7c:	83 c4 10             	add    esp,0x10
c0004b7f:	85 c0                	test   eax,eax
c0004b81:	89 c7                	mov    edi,eax
c0004b83:	0f 84 49 01 00 00    	je     c0004cd2 <f_mkdir+0x192>
c0004b89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b91:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b98:	e8 7c ee ff ff       	call   c0003a19 <follow_path>
c0004b9d:	85 c0                	test   eax,eax
c0004b9f:	89 c3                	mov    ebx,eax
c0004ba1:	74 3e                	je     c0004be1 <f_mkdir+0xa1>
c0004ba3:	83 f8 04             	cmp    eax,0x4
c0004ba6:	75 3e                	jne    c0004be6 <f_mkdir+0xa6>
c0004ba8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bac:	31 d2                	xor    edx,edx
c0004bae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 63 e8 ff ff       	call   c000341e <create_chain>
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	89 c6                	mov    esi,eax
c0004bbf:	74 0c                	je     c0004bcd <f_mkdir+0x8d>
c0004bc1:	83 f8 01             	cmp    eax,0x1
c0004bc4:	bb 02 00 00 00       	mov    ebx,0x2
c0004bc9:	74 07                	je     c0004bd2 <f_mkdir+0x92>
c0004bcb:	eb 2a                	jmp    c0004bf7 <f_mkdir+0xb7>
c0004bcd:	bb 07 00 00 00       	mov    ebx,0x7
c0004bd2:	31 c9                	xor    ecx,ecx
c0004bd4:	89 f2                	mov    edx,esi
c0004bd6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bda:	e8 79 e9 ff ff       	call   c0003558 <remove_chain>
c0004bdf:	eb 05                	jmp    c0004be6 <f_mkdir+0xa6>
c0004be1:	bb 08 00 00 00       	mov    ebx,0x8
c0004be6:	83 ec 0c             	sub    esp,0xc
c0004be9:	57                   	push   edi
c0004bea:	e8 7d 10 00 00       	call   c0005c6c <ff_memfree>
c0004bef:	83 c4 10             	add    esp,0x10
c0004bf2:	e9 db 00 00 00       	jmp    c0004cd2 <f_mkdir+0x192>
c0004bf7:	83 f8 ff             	cmp    eax,0xffffffff
c0004bfa:	bb 01 00 00 00       	mov    ebx,0x1
c0004bff:	74 d1                	je     c0004bd2 <f_mkdir+0x92>
c0004c01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c05:	89 f2                	mov    edx,esi
c0004c07:	e8 19 dd ff ff       	call   c0002925 <dir_clear>
c0004c0c:	85 c0                	test   eax,eax
c0004c0e:	89 c3                	mov    ebx,eax
c0004c10:	75 c0                	jne    c0004bd2 <f_mkdir+0x92>
c0004c12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0004c1b:	ba 20 00 00 00       	mov    edx,0x20
c0004c20:	83 c0 34             	add    eax,0x34
c0004c23:	e8 28 d2 ff ff       	call   c0001e50 <mem_set>
c0004c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c31:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c35:	83 c0 4a             	add    eax,0x4a
c0004c38:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004c3c:	e8 f7 d1 ff ff       	call   c0001e38 <st_dword>
c0004c41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c45:	89 f1                	mov    ecx,esi
c0004c47:	8d 50 34             	lea    edx,[eax+0x34]
c0004c4a:	e8 da e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c53:	b9 20 00 00 00       	mov    ecx,0x20
c0004c58:	8d 50 34             	lea    edx,[eax+0x34]
c0004c5b:	83 c0 54             	add    eax,0x54
c0004c5e:	e8 d8 d1 ff ff       	call   c0001e3b <mem_cpy>
c0004c63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c67:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c6b:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c6f:	8d 50 54             	lea    edx,[eax+0x54]
c0004c72:	e8 b2 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c7b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c7f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c83:	e8 2e ee ff ff       	call   c0003ab6 <dir_register>
c0004c88:	85 c0                	test   eax,eax
c0004c8a:	89 c3                	mov    ebx,eax
c0004c8c:	0f 85 40 ff ff ff    	jne    c0004bd2 <f_mkdir+0x92>
c0004c92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c96:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c9b:	83 c0 16             	add    eax,0x16
c0004c9e:	e8 95 d1 ff ff       	call   c0001e38 <st_dword>
c0004ca3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ca7:	89 f1                	mov    ecx,esi
c0004ca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cad:	e8 77 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004cb2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004cb6:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004cba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cbe:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cc6:	e8 de e0 ff ff       	call   c0002da9 <sync_fs>
c0004ccb:	89 c3                	mov    ebx,eax
c0004ccd:	e9 14 ff ff ff       	jmp    c0004be6 <f_mkdir+0xa6>
c0004cd2:	83 c4 50             	add    esp,0x50
c0004cd5:	89 d8                	mov    eax,ebx
c0004cd7:	5b                   	pop    ebx
c0004cd8:	5e                   	pop    esi
c0004cd9:	5f                   	pop    edi
c0004cda:	c3                   	ret    

c0004cdb <f_rename>:
c0004cdb:	57                   	push   edi
c0004cdc:	56                   	push   esi
c0004cdd:	53                   	push   ebx
c0004cde:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ce4:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ceb:	e8 8f d5 ff ff       	call   c000227f <get_ldnumber>
c0004cf0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cf4:	b9 02 00 00 00       	mov    ecx,0x2
c0004cf9:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004d00:	e8 cc d7 ff ff       	call   c00024d1 <mount_volume>
c0004d05:	85 c0                	test   eax,eax
c0004d07:	0f 85 7c 01 00 00    	jne    c0004e89 <f_rename+0x1ae>
c0004d0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004d18:	68 00 02 00 00       	push   0x200
c0004d1d:	e8 32 0f 00 00       	call   c0005c54 <ff_memalloc>
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	89 c6                	mov    esi,eax
c0004d27:	b8 11 00 00 00       	mov    eax,0x11
c0004d2c:	85 f6                	test   esi,esi
c0004d2e:	0f 84 55 01 00 00    	je     c0004e89 <f_rename+0x1ae>
c0004d34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d38:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d3f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d42:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d46:	e8 ce ec ff ff       	call   c0003a19 <follow_path>
c0004d4b:	85 c0                	test   eax,eax
c0004d4d:	0f 85 22 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d53:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d57:	b8 06 00 00 00       	mov    eax,0x6
c0004d5c:	80 e2 a0             	and    dl,0xa0
c0004d5f:	0f 85 10 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d65:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d69:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d6d:	b9 20 00 00 00       	mov    ecx,0x20
c0004d72:	e8 c4 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d77:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d7b:	b9 30 00 00 00       	mov    ecx,0x30
c0004d80:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d84:	e8 b2 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d89:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d90:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d94:	e8 80 ec ff ff       	call   c0003a19 <follow_path>
c0004d99:	85 c0                	test   eax,eax
c0004d9b:	75 20                	jne    c0004dbd <f_rename+0xe2>
c0004d9d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004da1:	b8 08 00 00 00       	mov    eax,0x8
c0004da6:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004daa:	0f 85 c5 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004db0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004db4:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004dbb:	eb 03                	jmp    c0004dc0 <f_rename+0xe5>
c0004dbd:	83 f8 04             	cmp    eax,0x4
c0004dc0:	0f 85 af 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dc6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004dca:	e8 e7 ec ff ff       	call   c0003ab6 <dir_register>
c0004dcf:	85 c0                	test   eax,eax
c0004dd1:	0f 85 9e 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dd7:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dde:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004de2:	b9 13 00 00 00       	mov    ecx,0x13
c0004de7:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dea:	e8 4c d0 ff ff       	call   c0001e3b <mem_cpy>
c0004def:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004df3:	a8 10                	test   al,0x10
c0004df5:	75 03                	jne    c0004dfa <f_rename+0x11f>
c0004df7:	83 c8 20             	or     eax,0x20
c0004dfa:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e01:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e05:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004e09:	74 54                	je     c0004e5f <f_rename+0x184>
c0004e0b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004e0f:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004e13:	74 4a                	je     c0004e5f <f_rename+0x184>
c0004e15:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004e19:	89 da                	mov    edx,ebx
c0004e1b:	8a 07                	mov    al,BYTE PTR [edi]
c0004e1d:	e8 de e3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004e22:	89 c2                	mov    edx,eax
c0004e24:	89 f8                	mov    eax,edi
c0004e26:	e8 3a d2 ff ff       	call   c0002065 <clst2sect>
c0004e2b:	89 c2                	mov    edx,eax
c0004e2d:	b8 02 00 00 00       	mov    eax,0x2
c0004e32:	85 d2                	test   edx,edx
c0004e34:	74 3f                	je     c0004e75 <f_rename+0x19a>
c0004e36:	89 f8                	mov    eax,edi
c0004e38:	e8 37 d5 ff ff       	call   c0002374 <move_window>
c0004e3d:	85 c0                	test   eax,eax
c0004e3f:	75 34                	jne    c0004e75 <f_rename+0x19a>
c0004e41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e45:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e49:	75 14                	jne    c0004e5f <f_rename+0x184>
c0004e4b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e4f:	8d 50 54             	lea    edx,[eax+0x54]
c0004e52:	e8 d2 e3 ff ff       	call   c0003229 <st_clust.isra.1>
c0004e57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e5b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e5f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e63:	e8 10 ea ff ff       	call   c0003878 <dir_remove>
c0004e68:	85 c0                	test   eax,eax
c0004e6a:	75 09                	jne    c0004e75 <f_rename+0x19a>
c0004e6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e70:	e8 34 df ff ff       	call   c0002da9 <sync_fs>
c0004e75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e79:	83 ec 0c             	sub    esp,0xc
c0004e7c:	56                   	push   esi
c0004e7d:	e8 ea 0d 00 00       	call   c0005c6c <ff_memfree>
c0004e82:	83 c4 10             	add    esp,0x10
c0004e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e89:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e8f:	5b                   	pop    ebx
c0004e90:	5e                   	pop    esi
c0004e91:	5f                   	pop    edi
c0004e92:	c3                   	ret    

c0004e93 <f_chmod>:
c0004e93:	57                   	push   edi
c0004e94:	b9 02 00 00 00       	mov    ecx,0x2
c0004e99:	56                   	push   esi
c0004e9a:	53                   	push   ebx
c0004e9b:	83 ec 50             	sub    esp,0x50
c0004e9e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ea2:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004ea6:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004eaa:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004eae:	e8 1e d6 ff ff       	call   c00024d1 <mount_volume>
c0004eb3:	85 c0                	test   eax,eax
c0004eb5:	0f 85 81 00 00 00    	jne    c0004f3c <f_chmod+0xa9>
c0004ebb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebf:	83 ec 0c             	sub    esp,0xc
c0004ec2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ec6:	68 00 02 00 00       	push   0x200
c0004ecb:	e8 84 0d 00 00       	call   c0005c54 <ff_memalloc>
c0004ed0:	83 c4 10             	add    esp,0x10
c0004ed3:	89 c6                	mov    esi,eax
c0004ed5:	b8 11 00 00 00       	mov    eax,0x11
c0004eda:	85 f6                	test   esi,esi
c0004edc:	74 5e                	je     c0004f3c <f_chmod+0xa9>
c0004ede:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ee2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ee6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ee9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eed:	e8 27 eb ff ff       	call   c0003a19 <follow_path>
c0004ef2:	85 c0                	test   eax,eax
c0004ef4:	75 32                	jne    c0004f28 <f_chmod+0x95>
c0004ef6:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004efa:	b8 06 00 00 00       	mov    eax,0x6
c0004eff:	80 e2 a0             	and    dl,0xa0
c0004f02:	75 24                	jne    c0004f28 <f_chmod+0x95>
c0004f04:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f08:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004f0b:	31 d7                	xor    edi,edx
c0004f0d:	21 fb                	and    ebx,edi
c0004f0f:	83 e3 27             	and    ebx,0x27
c0004f12:	31 d3                	xor    ebx,edx
c0004f14:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004f17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f23:	e8 81 de ff ff       	call   c0002da9 <sync_fs>
c0004f28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f2c:	83 ec 0c             	sub    esp,0xc
c0004f2f:	56                   	push   esi
c0004f30:	e8 37 0d 00 00       	call   c0005c6c <ff_memfree>
c0004f35:	83 c4 10             	add    esp,0x10
c0004f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f3c:	83 c4 50             	add    esp,0x50
c0004f3f:	5b                   	pop    ebx
c0004f40:	5e                   	pop    esi
c0004f41:	5f                   	pop    edi
c0004f42:	c3                   	ret    

c0004f43 <f_utime>:
c0004f43:	56                   	push   esi
c0004f44:	b9 02 00 00 00       	mov    ecx,0x2
c0004f49:	53                   	push   ebx
c0004f4a:	83 ec 54             	sub    esp,0x54
c0004f4d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f51:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f55:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f59:	e8 73 d5 ff ff       	call   c00024d1 <mount_volume>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	0f 85 87 00 00 00    	jne    c0004fed <f_utime+0xaa>
c0004f66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f6a:	83 ec 0c             	sub    esp,0xc
c0004f6d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f71:	68 00 02 00 00       	push   0x200
c0004f76:	e8 d9 0c 00 00       	call   c0005c54 <ff_memalloc>
c0004f7b:	83 c4 10             	add    esp,0x10
c0004f7e:	89 c3                	mov    ebx,eax
c0004f80:	b8 11 00 00 00       	mov    eax,0x11
c0004f85:	85 db                	test   ebx,ebx
c0004f87:	74 64                	je     c0004fed <f_utime+0xaa>
c0004f89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f91:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f98:	e8 7c ea ff ff       	call   c0003a19 <follow_path>
c0004f9d:	85 c0                	test   eax,eax
c0004f9f:	75 38                	jne    c0004fd9 <f_utime+0x96>
c0004fa1:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004fa5:	b8 06 00 00 00       	mov    eax,0x6
c0004faa:	80 e2 a0             	and    dl,0xa0
c0004fad:	75 2a                	jne    c0004fd9 <f_utime+0x96>
c0004faf:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004fb3:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004fb7:	c1 e2 10             	shl    edx,0x10
c0004fba:	09 c2                	or     edx,eax
c0004fbc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fc0:	83 c0 16             	add    eax,0x16
c0004fc3:	e8 70 ce ff ff       	call   c0001e38 <st_dword>
c0004fc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fcc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fd4:	e8 d0 dd ff ff       	call   c0002da9 <sync_fs>
c0004fd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fdd:	83 ec 0c             	sub    esp,0xc
c0004fe0:	53                   	push   ebx
c0004fe1:	e8 86 0c 00 00       	call   c0005c6c <ff_memfree>
c0004fe6:	83 c4 10             	add    esp,0x10
c0004fe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fed:	83 c4 54             	add    esp,0x54
c0004ff0:	5b                   	pop    ebx
c0004ff1:	5e                   	pop    esi
c0004ff2:	c3                   	ret    

c0004ff3 <f_getlabel>:
c0004ff3:	55                   	push   ebp
c0004ff4:	31 c9                	xor    ecx,ecx
c0004ff6:	57                   	push   edi
c0004ff7:	56                   	push   esi
c0004ff8:	53                   	push   ebx
c0004ff9:	83 ec 5c             	sub    esp,0x5c
c0004ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005000:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c0005004:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005008:	e8 c4 d4 ff ff       	call   c00024d1 <mount_volume>
c000500d:	85 c0                	test   eax,eax
c000500f:	89 c3                	mov    ebx,eax
c0005011:	0f 85 d9 00 00 00    	jne    c00050f0 <f_getlabel+0xfd>
c0005017:	85 ff                	test   edi,edi
c0005019:	0f 84 d1 00 00 00    	je     c00050f0 <f_getlabel+0xfd>
c000501f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005027:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000502b:	31 d2                	xor    edx,edx
c000502d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005031:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005035:	e8 1c e3 ff ff       	call   c0003356 <dir_sdi>
c000503a:	85 c0                	test   eax,eax
c000503c:	89 c3                	mov    ebx,eax
c000503e:	0f 85 a2 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c0005044:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005048:	ba 01 00 00 00       	mov    edx,0x1
c000504d:	e8 fe e6 ff ff       	call   c0003750 <dir_read>
c0005052:	85 c0                	test   eax,eax
c0005054:	89 c3                	mov    ebx,eax
c0005056:	0f 85 8a 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c000505c:	31 f6                	xor    esi,esi
c000505e:	31 d2                	xor    edx,edx
c0005060:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005064:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005067:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000506b:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c000506f:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005074:	89 c8                	mov    eax,ecx
c0005076:	e8 13 ce ff ff       	call   c0001e8e <dbc_1st>
c000507b:	85 c0                	test   eax,eax
c000507d:	74 19                	je     c0005098 <f_getlabel+0xa5>
c000507f:	83 fd 0b             	cmp    ebp,0xb
c0005082:	74 14                	je     c0005098 <f_getlabel+0xa5>
c0005084:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005088:	c1 e1 08             	shl    ecx,0x8
c000508b:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c000508f:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005092:	09 c1                	or     ecx,eax
c0005094:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005098:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000509d:	52                   	push   edx
c000509e:	52                   	push   edx
c000509f:	68 b5 01 00 00       	push   0x1b5
c00050a4:	50                   	push   eax
c00050a5:	e8 76 0c 00 00       	call   c0005d20 <ff_oem2uni>
c00050aa:	83 c4 10             	add    esp,0x10
c00050ad:	0f b7 c0             	movzx  eax,ax
c00050b0:	85 c0                	test   eax,eax
c00050b2:	74 1f                	je     c00050d3 <f_getlabel+0xe0>
c00050b4:	8d 14 37             	lea    edx,[edi+esi*1]
c00050b7:	b9 04 00 00 00       	mov    ecx,0x4
c00050bc:	e8 ab ce ff ff       	call   c0001f6c <put_utf>
c00050c1:	0f b6 c0             	movzx  eax,al
c00050c4:	85 c0                	test   eax,eax
c00050c6:	74 0b                	je     c00050d3 <f_getlabel+0xe0>
c00050c8:	01 c6                	add    esi,eax
c00050ca:	83 fd 0b             	cmp    ebp,0xb
c00050cd:	74 06                	je     c00050d5 <f_getlabel+0xe2>
c00050cf:	89 ea                	mov    edx,ebp
c00050d1:	eb 8d                	jmp    c0005060 <f_getlabel+0x6d>
c00050d3:	31 f6                	xor    esi,esi
c00050d5:	01 fe                	add    esi,edi
c00050d7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00050da:	39 f7                	cmp    edi,esi
c00050dc:	74 12                	je     c00050f0 <f_getlabel+0xfd>
c00050de:	4e                   	dec    esi
c00050df:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00050e2:	74 f3                	je     c00050d7 <f_getlabel+0xe4>
c00050e4:	eb 0a                	jmp    c00050f0 <f_getlabel+0xfd>
c00050e6:	83 fb 04             	cmp    ebx,0x4
c00050e9:	75 05                	jne    c00050f0 <f_getlabel+0xfd>
c00050eb:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00050ee:	31 db                	xor    ebx,ebx
c00050f0:	85 db                	test   ebx,ebx
c00050f2:	75 49                	jne    c000513d <f_getlabel+0x14a>
c00050f4:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050f9:	74 42                	je     c000513d <f_getlabel+0x14a>
c00050fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050ff:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0005102:	e8 6d d2 ff ff       	call   c0002374 <move_window>
c0005107:	85 c0                	test   eax,eax
c0005109:	89 c3                	mov    ebx,eax
c000510b:	75 30                	jne    c000513d <f_getlabel+0x14a>
c000510d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005111:	b8 43 00 00 00       	mov    eax,0x43
c0005116:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c0005119:	83 f9 03             	cmp    ecx,0x3
c000511c:	74 10                	je     c000512e <f_getlabel+0x13b>
c000511e:	83 f9 04             	cmp    ecx,0x4
c0005121:	b8 64 00 00 00       	mov    eax,0x64
c0005126:	b9 27 00 00 00       	mov    ecx,0x27
c000512b:	0f 45 c1             	cmovne eax,ecx
c000512e:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005132:	e8 e5 cc ff ff       	call   c0001e1c <ld_dword>
c0005137:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000513b:	89 07                	mov    DWORD PTR [edi],eax
c000513d:	83 c4 5c             	add    esp,0x5c
c0005140:	89 d8                	mov    eax,ebx
c0005142:	5b                   	pop    ebx
c0005143:	5e                   	pop    esi
c0005144:	5f                   	pop    edi
c0005145:	5d                   	pop    ebp
c0005146:	c3                   	ret    

c0005147 <f_setlabel>:
c0005147:	57                   	push   edi
c0005148:	b9 02 00 00 00       	mov    ecx,0x2
c000514d:	56                   	push   esi
c000514e:	53                   	push   ebx
c000514f:	83 ec 50             	sub    esp,0x50
c0005152:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005156:	8d 44 24 60          	lea    eax,[esp+0x60]
c000515a:	e8 72 d3 ff ff       	call   c00024d1 <mount_volume>
c000515f:	85 c0                	test   eax,eax
c0005161:	89 c6                	mov    esi,eax
c0005163:	0f 85 65 01 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005169:	b9 0b 00 00 00       	mov    ecx,0xb
c000516e:	ba 20 00 00 00       	mov    edx,0x20
c0005173:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005177:	31 db                	xor    ebx,ebx
c0005179:	e8 d2 cc ff ff       	call   c0001e50 <mem_set>
c000517e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005182:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005185:	76 5d                	jbe    c00051e4 <f_setlabel+0x9d>
c0005187:	8d 44 24 60          	lea    eax,[esp+0x60]
c000518b:	e8 04 cd ff ff       	call   c0001e94 <tchar2uni>
c0005190:	3d ff ff 00 00       	cmp    eax,0xffff
c0005195:	76 0a                	jbe    c00051a1 <f_setlabel+0x5a>
c0005197:	be 06 00 00 00       	mov    esi,0x6
c000519c:	e9 2d 01 00 00       	jmp    c00052ce <f_setlabel+0x187>
c00051a1:	83 ec 0c             	sub    esp,0xc
c00051a4:	50                   	push   eax
c00051a5:	e8 ee 0b 00 00       	call   c0005d98 <ff_wtoupper>
c00051aa:	5a                   	pop    edx
c00051ab:	59                   	pop    ecx
c00051ac:	68 b5 01 00 00       	push   0x1b5
c00051b1:	50                   	push   eax
c00051b2:	e8 cd 0a 00 00       	call   c0005c84 <ff_uni2oem>
c00051b7:	83 c4 10             	add    esp,0x10
c00051ba:	0f b7 f0             	movzx  esi,ax
c00051bd:	85 f6                	test   esi,esi
c00051bf:	89 f7                	mov    edi,esi
c00051c1:	74 d4                	je     c0005197 <f_setlabel+0x50>
c00051c3:	89 f2                	mov    edx,esi
c00051c5:	b8 f0 05 02 c0       	mov    eax,0xc00205f0
c00051ca:	e8 ae cc ff ff       	call   c0001e7d <chk_chr>
c00051cf:	85 c0                	test   eax,eax
c00051d1:	75 c4                	jne    c0005197 <f_setlabel+0x50>
c00051d3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051d9:	0f 87 c9 00 00 00    	ja     c00052a8 <f_setlabel+0x161>
c00051df:	e9 e0 00 00 00       	jmp    c00052c4 <f_setlabel+0x17d>
c00051e4:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051e9:	74 ac                	je     c0005197 <f_setlabel+0x50>
c00051eb:	85 db                	test   ebx,ebx
c00051ed:	74 0e                	je     c00051fd <f_setlabel+0xb6>
c00051ef:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051f4:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051f7:	75 04                	jne    c00051fd <f_setlabel+0xb6>
c00051f9:	89 c3                	mov    ebx,eax
c00051fb:	eb ee                	jmp    c00051eb <f_setlabel+0xa4>
c00051fd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005205:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005209:	31 d2                	xor    edx,edx
c000520b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000520f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005213:	e8 3e e1 ff ff       	call   c0003356 <dir_sdi>
c0005218:	85 c0                	test   eax,eax
c000521a:	89 c6                	mov    esi,eax
c000521c:	0f 85 ac 00 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005222:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005226:	ba 01 00 00 00       	mov    edx,0x1
c000522b:	e8 20 e5 ff ff       	call   c0003750 <dir_read>
c0005230:	85 c0                	test   eax,eax
c0005232:	75 18                	jne    c000524c <f_setlabel+0x105>
c0005234:	85 db                	test   ebx,ebx
c0005236:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000523a:	74 0b                	je     c0005247 <f_setlabel+0x100>
c000523c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005240:	b9 0b 00 00 00       	mov    ecx,0xb
c0005245:	eb 47                	jmp    c000528e <f_setlabel+0x147>
c0005247:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000524a:	eb 47                	jmp    c0005293 <f_setlabel+0x14c>
c000524c:	83 f8 04             	cmp    eax,0x4
c000524f:	75 53                	jne    c00052a4 <f_setlabel+0x15d>
c0005251:	85 db                	test   ebx,ebx
c0005253:	74 79                	je     c00052ce <f_setlabel+0x187>
c0005255:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005259:	ba 01 00 00 00       	mov    edx,0x1
c000525e:	e8 88 e4 ff ff       	call   c00036eb <dir_alloc>
c0005263:	85 c0                	test   eax,eax
c0005265:	89 c6                	mov    esi,eax
c0005267:	75 65                	jne    c00052ce <f_setlabel+0x187>
c0005269:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000526d:	b9 20 00 00 00       	mov    ecx,0x20
c0005272:	31 d2                	xor    edx,edx
c0005274:	e8 d7 cb ff ff       	call   c0001e50 <mem_set>
c0005279:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000527d:	b9 0b 00 00 00       	mov    ecx,0xb
c0005282:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005286:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000528a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000528e:	e8 a8 cb ff ff       	call   c0001e3b <mem_cpy>
c0005293:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005297:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000529b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000529f:	e8 05 db ff ff       	call   c0002da9 <sync_fs>
c00052a4:	89 c6                	mov    esi,eax
c00052a6:	eb 26                	jmp    c00052ce <f_setlabel+0x187>
c00052a8:	83 fb 09             	cmp    ebx,0x9
c00052ab:	0f 87 e6 fe ff ff    	ja     c0005197 <f_setlabel+0x50>
c00052b1:	89 f0                	mov    eax,esi
c00052b3:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c00052b7:	43                   	inc    ebx
c00052b8:	89 f8                	mov    eax,edi
c00052ba:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c00052be:	43                   	inc    ebx
c00052bf:	e9 ba fe ff ff       	jmp    c000517e <f_setlabel+0x37>
c00052c4:	83 fb 0a             	cmp    ebx,0xa
c00052c7:	76 ef                	jbe    c00052b8 <f_setlabel+0x171>
c00052c9:	e9 c9 fe ff ff       	jmp    c0005197 <f_setlabel+0x50>
c00052ce:	83 c4 50             	add    esp,0x50
c00052d1:	89 f0                	mov    eax,esi
c00052d3:	5b                   	pop    ebx
c00052d4:	5e                   	pop    esi
c00052d5:	5f                   	pop    edi
c00052d6:	c3                   	ret    

c00052d7 <f_expand>:
c00052d7:	55                   	push   ebp
c00052d8:	57                   	push   edi
c00052d9:	56                   	push   esi
c00052da:	53                   	push   ebx
c00052db:	83 ec 2c             	sub    esp,0x2c
c00052de:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052ee:	89 d8                	mov    eax,ebx
c00052f0:	e8 d6 cf ff ff       	call   c00022cb <validate>
c00052f5:	85 c0                	test   eax,eax
c00052f7:	89 c6                	mov    esi,eax
c00052f9:	0f 85 3b 01 00 00    	jne    c000543a <f_expand+0x163>
c00052ff:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005303:	85 f6                	test   esi,esi
c0005305:	0f 85 2f 01 00 00    	jne    c000543a <f_expand+0x163>
c000530b:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005310:	75 0a                	jne    c000531c <f_expand+0x45>
c0005312:	be 07 00 00 00       	mov    esi,0x7
c0005317:	e9 1e 01 00 00       	jmp    c000543a <f_expand+0x163>
c000531c:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005320:	75 f0                	jne    c0005312 <f_expand+0x3b>
c0005322:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005326:	74 ea                	je     c0005312 <f_expand+0x3b>
c0005328:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000532c:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8d 47 ff             	lea    eax,[edi-0x1]
c0005336:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000533a:	0f 95 c0             	setne  al
c000533d:	31 d2                	xor    edx,edx
c000533f:	0f b6 c0             	movzx  eax,al
c0005342:	89 c5                	mov    ebp,eax
c0005344:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005348:	f7 f7                	div    edi
c000534a:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000534d:	01 e8                	add    eax,ebp
c000534f:	83 ff 01             	cmp    edi,0x1
c0005352:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005356:	76 05                	jbe    c000535d <f_expand+0x86>
c0005358:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000535b:	77 05                	ja     c0005362 <f_expand+0x8b>
c000535d:	bf 02 00 00 00       	mov    edi,0x2
c0005362:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005365:	89 fd                	mov    ebp,edi
c0005367:	31 c9                	xor    ecx,ecx
c0005369:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000536d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000536f:	89 ea                	mov    edx,ebp
c0005371:	45                   	inc    ebp
c0005372:	e8 da de ff ff       	call   c0003251 <get_fat.isra.2>
c0005377:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000537b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000537f:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005382:	77 05                	ja     c0005389 <f_expand+0xb2>
c0005384:	bd 02 00 00 00       	mov    ebp,0x2
c0005389:	83 f8 01             	cmp    eax,0x1
c000538c:	74 20                	je     c00053ae <f_expand+0xd7>
c000538e:	83 f8 ff             	cmp    eax,0xffffffff
c0005391:	74 25                	je     c00053b8 <f_expand+0xe1>
c0005393:	85 c0                	test   eax,eax
c0005395:	75 09                	jne    c00053a0 <f_expand+0xc9>
c0005397:	41                   	inc    ecx
c0005398:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000539c:	75 07                	jne    c00053a5 <f_expand+0xce>
c000539e:	eb 1f                	jmp    c00053bf <f_expand+0xe8>
c00053a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00053a3:	31 c9                	xor    ecx,ecx
c00053a5:	39 fd                	cmp    ebp,edi
c00053a7:	75 c0                	jne    c0005369 <f_expand+0x92>
c00053a9:	e9 64 ff ff ff       	jmp    c0005312 <f_expand+0x3b>
c00053ae:	be 02 00 00 00       	mov    esi,0x2
c00053b3:	e9 82 00 00 00       	jmp    c000543a <f_expand+0x163>
c00053b8:	be 01 00 00 00       	mov    esi,0x1
c00053bd:	eb 7b                	jmp    c000543a <f_expand+0x163>
c00053bf:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053c4:	74 2b                	je     c00053f1 <f_expand+0x11a>
c00053c6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053c9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053cd:	85 ed                	test   ebp,ebp
c00053cf:	74 24                	je     c00053f5 <f_expand+0x11e>
c00053d1:	83 c9 ff             	or     ecx,0xffffffff
c00053d4:	83 fd 01             	cmp    ebp,0x1
c00053d7:	74 03                	je     c00053dc <f_expand+0x105>
c00053d9:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053e0:	89 fa                	mov    edx,edi
c00053e2:	e8 e7 d3 ff ff       	call   c00027ce <put_fat>
c00053e7:	85 c0                	test   eax,eax
c00053e9:	75 4d                	jne    c0005438 <f_expand+0x161>
c00053eb:	89 f8                	mov    eax,edi
c00053ed:	4d                   	dec    ebp
c00053ee:	47                   	inc    edi
c00053ef:	eb dc                	jmp    c00053cd <f_expand+0xf6>
c00053f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053f4:	48                   	dec    eax
c00053f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053f9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053fe:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005401:	74 37                	je     c000543a <f_expand+0x163>
c0005403:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005406:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005409:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000540d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005410:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0005413:	83 c8 40             	or     eax,0x40
c0005416:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005419:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c000541c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000541f:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005422:	39 c8                	cmp    eax,ecx
c0005424:	77 14                	ja     c000543a <f_expand+0x163>
c0005426:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000542a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000542d:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005430:	83 c8 01             	or     eax,0x1
c0005433:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005436:	eb 02                	jmp    c000543a <f_expand+0x163>
c0005438:	89 c6                	mov    esi,eax
c000543a:	83 c4 2c             	add    esp,0x2c
c000543d:	89 f0                	mov    eax,esi
c000543f:	5b                   	pop    ebx
c0005440:	5e                   	pop    esi
c0005441:	5f                   	pop    edi
c0005442:	5d                   	pop    ebp
c0005443:	c3                   	ret    

c0005444 <f_mkfs>:
c0005444:	55                   	push   ebp
c0005445:	57                   	push   edi
c0005446:	56                   	push   esi
c0005447:	be 0b 00 00 00       	mov    esi,0xb
c000544c:	53                   	push   ebx
c000544d:	83 ec 5c             	sub    esp,0x5c
c0005450:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005454:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005458:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000545c:	e8 1e ce ff ff       	call   c000227f <get_ldnumber>
c0005461:	85 c0                	test   eax,eax
c0005463:	0f 88 e0 07 00 00    	js     c0005c49 <f_mkfs+0x805>
c0005469:	8b 14 85 a0 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9b60]
c0005470:	85 d2                	test   edx,edx
c0005472:	74 03                	je     c0005477 <f_mkfs+0x33>
c0005474:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005477:	85 db                	test   ebx,ebx
c0005479:	75 05                	jne    c0005480 <f_mkfs+0x3c>
c000547b:	bb e0 05 02 c0       	mov    ebx,0xc00205e0
c0005480:	0f b6 c0             	movzx  eax,al
c0005483:	83 ec 0c             	sub    esp,0xc
c0005486:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000548a:	be 03 00 00 00       	mov    esi,0x3
c000548f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005493:	e8 29 c9 ff ff       	call   c0001dc1 <disk_initialize>
c0005498:	83 c4 10             	add    esp,0x10
c000549b:	a8 01                	test   al,0x1
c000549d:	0f 85 a6 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054a3:	a8 04                	test   al,0x4
c00054a5:	be 0a 00 00 00       	mov    esi,0xa
c00054aa:	0f 85 99 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054b0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00054b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00054b7:	85 c0                	test   eax,eax
c00054b9:	75 20                	jne    c00054db <f_mkfs+0x97>
c00054bb:	51                   	push   ecx
c00054bc:	8d 44 24 44          	lea    eax,[esp+0x44]
c00054c0:	50                   	push   eax
c00054c1:	6a 03                	push   0x3
c00054c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054c7:	e8 24 c9 ff ff       	call   c0001df0 <disk_ioctl>
c00054cc:	83 c4 10             	add    esp,0x10
c00054cf:	85 c0                	test   eax,eax
c00054d1:	74 08                	je     c00054db <f_mkfs+0x97>
c00054d3:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054db:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054df:	8d 42 ff             	lea    eax,[edx-0x1]
c00054e2:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054e7:	77 04                	ja     c00054ed <f_mkfs+0xa9>
c00054e9:	85 c2                	test   edx,eax
c00054eb:	74 08                	je     c00054f5 <f_mkfs+0xb1>
c00054ed:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054f5:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054f8:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005500:	48                   	dec    eax
c0005501:	3c 01                	cmp    al,0x1
c0005503:	76 05                	jbe    c000550a <f_mkfs+0xc6>
c0005505:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000550a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000550d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005511:	48                   	dec    eax
c0005512:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005517:	77 15                	ja     c000552e <f_mkfs+0xea>
c0005519:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c000551e:	b8 00 02 00 00       	mov    eax,0x200
c0005523:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005528:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000552c:	eb 08                	jmp    c0005536 <f_mkfs+0xf2>
c000552e:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005536:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005539:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000553f:	77 0f                	ja     c0005550 <f_mkfs+0x10c>
c0005541:	8d 47 ff             	lea    eax,[edi-0x1]
c0005544:	85 f8                	test   eax,edi
c0005546:	b8 00 00 00 00       	mov    eax,0x0
c000554b:	0f 45 f8             	cmovne edi,eax
c000554e:	eb 02                	jmp    c0005552 <f_mkfs+0x10e>
c0005550:	31 ff                	xor    edi,edi
c0005552:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000555a:	77 0a                	ja     c0005566 <f_mkfs+0x122>
c000555c:	be 11 00 00 00       	mov    esi,0x11
c0005561:	e9 e3 06 00 00       	jmp    c0005c49 <f_mkfs+0x805>
c0005566:	85 ed                	test   ebp,ebp
c0005568:	8b 33                	mov    esi,DWORD PTR [ebx]
c000556a:	89 eb                	mov    ebx,ebp
c000556c:	75 1e                	jne    c000558c <f_mkfs+0x148>
c000556e:	83 ec 0c             	sub    esp,0xc
c0005571:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005578:	25 00 fe ff ff       	and    eax,0xfffffe00
c000557d:	50                   	push   eax
c000557e:	e8 d1 06 00 00       	call   c0005c54 <ff_memalloc>
c0005583:	83 c4 10             	add    esp,0x10
c0005586:	85 c0                	test   eax,eax
c0005588:	89 c3                	mov    ebx,eax
c000558a:	74 d0                	je     c000555c <f_mkfs+0x118>
c000558c:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005594:	52                   	push   edx
c0005595:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005599:	50                   	push   eax
c000559a:	6a 01                	push   0x1
c000559c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00055a0:	e8 4b c8 ff ff       	call   c0001df0 <disk_ioctl>
c00055a5:	83 c4 10             	add    esp,0x10
c00055a8:	85 c0                	test   eax,eax
c00055aa:	0f 85 42 06 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00055b0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00055b8:	89 f0                	mov    eax,esi
c00055ba:	83 e0 08             	and    eax,0x8
c00055bd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00055c1:	75 18                	jne    c00055db <f_mkfs+0x197>
c00055c3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055c7:	83 f8 3f             	cmp    eax,0x3f
c00055ca:	76 0f                	jbe    c00055db <f_mkfs+0x197>
c00055cc:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00055d4:	83 e8 3f             	sub    eax,0x3f
c00055d7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00055db:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055e3:	83 f8 7f             	cmp    eax,0x7f
c00055e6:	0f 86 5f 02 00 00    	jbe    c000584b <f_mkfs+0x407>
c00055ec:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055f2:	b9 80 00 00 00       	mov    ecx,0x80
c00055f7:	77 05                	ja     c00055fe <f_mkfs+0x1ba>
c00055f9:	c1 ef 09             	shr    edi,0x9
c00055fc:	89 f9                	mov    ecx,edi
c00055fe:	89 f0                	mov    eax,esi
c0005600:	89 f7                	mov    edi,esi
c0005602:	83 e0 01             	and    eax,0x1
c0005605:	83 e7 02             	and    edi,0x2
c0005608:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000560c:	0f b6 c0             	movzx  eax,al
c000560f:	74 0a                	je     c000561b <f_mkfs+0x1d7>
c0005611:	85 c0                	test   eax,eax
c0005613:	0f 84 53 01 00 00    	je     c000576c <f_mkfs+0x328>
c0005619:	eb 37                	jmp    c0005652 <f_mkfs+0x20e>
c000561b:	85 c0                	test   eax,eax
c000561d:	be 13 00 00 00       	mov    esi,0x13
c0005622:	75 2e                	jne    c0005652 <f_mkfs+0x20e>
c0005624:	e9 e0 05 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005629:	83 f8 02             	cmp    eax,0x2
c000562c:	0f 85 11 02 00 00    	jne    c0005843 <f_mkfs+0x3ff>
c0005632:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005638:	0f 86 e8 01 00 00    	jbe    c0005826 <f_mkfs+0x3e2>
c000563e:	85 c9                	test   ecx,ecx
c0005640:	0f 85 d5 05 00 00    	jne    c0005c1b <f_mkfs+0x7d7>
c0005646:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005649:	83 f9 40             	cmp    ecx,0x40
c000564c:	0f 87 d9 05 00 00    	ja     c0005c2b <f_mkfs+0x7e7>
c0005652:	85 c9                	test   ecx,ecx
c0005654:	89 cf                	mov    edi,ecx
c0005656:	75 1c                	jne    c0005674 <f_mkfs+0x230>
c0005658:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000565c:	b8 c0 05 02 c0       	mov    eax,0xc00205c0
c0005661:	bf 01 00 00 00       	mov    edi,0x1
c0005666:	c1 ee 0c             	shr    esi,0xc
c0005669:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000566c:	85 d2                	test   edx,edx
c000566e:	0f 85 67 01 00 00    	jne    c00057db <f_mkfs+0x397>
c0005674:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005678:	31 d2                	xor    edx,edx
c000567a:	f7 f7                	div    edi
c000567c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005681:	0f 86 66 01 00 00    	jbe    c00057ed <f_mkfs+0x3a9>
c0005687:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000568c:	83 c0 02             	add    eax,0x2
c000568f:	01 c0                	add    eax,eax
c0005691:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005699:	05 ff 01 00 00       	add    eax,0x1ff
c000569e:	c1 e8 09             	shr    eax,0x9
c00056a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00056a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056a9:	c1 e0 05             	shl    eax,0x5
c00056ac:	c1 e8 09             	shr    eax,0x9
c00056af:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00056b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00056b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00056bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00056c0:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00056c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00056c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00056cc:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00056d1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00056d5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00056d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056e1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e5:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056e9:	f7 d8                	neg    eax
c00056eb:	21 c6                	and    esi,eax
c00056ed:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056f2:	29 d6                	sub    esi,edx
c00056f4:	83 f8 03             	cmp    eax,0x3
c00056f7:	0f 85 03 01 00 00    	jne    c0005800 <f_mkfs+0x3bc>
c00056fd:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005701:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005705:	89 f8                	mov    eax,edi
c0005707:	c1 e0 04             	shl    eax,0x4
c000570a:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c000570e:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005712:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005716:	0f 82 2f 01 00 00    	jb     c000584b <f_mkfs+0x407>
c000571c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005720:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005724:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005728:	89 c2                	mov    edx,eax
c000572a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000572e:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005733:	29 c2                	sub    edx,eax
c0005735:	89 d0                	mov    eax,edx
c0005737:	31 d2                	xor    edx,edx
c0005739:	f7 f7                	div    edi
c000573b:	89 c6                	mov    esi,eax
c000573d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005742:	83 f8 03             	cmp    eax,0x3
c0005745:	0f 85 de fe ff ff    	jne    c0005629 <f_mkfs+0x1e5>
c000574b:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005751:	0f 87 03 01 00 00    	ja     c000585a <f_mkfs+0x416>
c0005757:	85 c9                	test   ecx,ecx
c0005759:	0f 85 ec 00 00 00    	jne    c000584b <f_mkfs+0x407>
c000575f:	83 ff 01             	cmp    edi,0x1
c0005762:	0f 86 e3 00 00 00    	jbe    c000584b <f_mkfs+0x407>
c0005768:	d1 ef                	shr    edi,1
c000576a:	89 f9                	mov    ecx,edi
c000576c:	85 c9                	test   ecx,ecx
c000576e:	89 ce                	mov    esi,ecx
c0005770:	75 25                	jne    c0005797 <f_mkfs+0x353>
c0005772:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005776:	b8 d0 05 02 c0       	mov    eax,0xc00205d0
c000577b:	b9 01 00 00 00       	mov    ecx,0x1
c0005780:	c1 ee 11             	shr    esi,0x11
c0005783:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005786:	85 d2                	test   edx,edx
c0005788:	74 0b                	je     c0005795 <f_mkfs+0x351>
c000578a:	83 c0 02             	add    eax,0x2
c000578d:	39 f2                	cmp    edx,esi
c000578f:	77 04                	ja     c0005795 <f_mkfs+0x351>
c0005791:	01 c9                	add    ecx,ecx
c0005793:	eb ee                	jmp    c0005783 <f_mkfs+0x33f>
c0005795:	31 f6                	xor    esi,esi
c0005797:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000579b:	31 d2                	xor    edx,edx
c000579d:	f7 f1                	div    ecx
c000579f:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00057a6:	2d f6 ff 00 00       	sub    eax,0xfff6
c00057ab:	c1 ea 09             	shr    edx,0x9
c00057ae:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00057b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00057b7:	0f 87 8e 00 00 00    	ja     c000584b <f_mkfs+0x407>
c00057bd:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00057c5:	89 cf                	mov    edi,ecx
c00057c7:	89 f1                	mov    ecx,esi
c00057c9:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00057d1:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00057d6:	e9 d8 fe ff ff       	jmp    c00056b3 <f_mkfs+0x26f>
c00057db:	83 c0 02             	add    eax,0x2
c00057de:	39 f2                	cmp    edx,esi
c00057e0:	0f 87 8e fe ff ff    	ja     c0005674 <f_mkfs+0x230>
c00057e6:	01 ff                	add    edi,edi
c00057e8:	e9 7c fe ff ff       	jmp    c0005669 <f_mkfs+0x225>
c00057ed:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057f2:	8d 04 40             	lea    eax,[eax+eax*2]
c00057f5:	40                   	inc    eax
c00057f6:	d1 e8                	shr    eax,1
c00057f8:	83 c0 03             	add    eax,0x3
c00057fb:	e9 91 fe ff ff       	jmp    c0005691 <f_mkfs+0x24d>
c0005800:	31 d2                	xor    edx,edx
c0005802:	89 f0                	mov    eax,esi
c0005804:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005808:	85 d2                	test   edx,edx
c000580a:	74 09                	je     c0005815 <f_mkfs+0x3d1>
c000580c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005810:	4e                   	dec    esi
c0005811:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005815:	89 f0                	mov    eax,esi
c0005817:	31 d2                	xor    edx,edx
c0005819:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000581d:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005821:	e9 df fe ff ff       	jmp    c0005705 <f_mkfs+0x2c1>
c0005826:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c000582c:	77 2c                	ja     c000585a <f_mkfs+0x416>
c000582e:	85 c9                	test   ecx,ecx
c0005830:	75 19                	jne    c000584b <f_mkfs+0x407>
c0005832:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005835:	81 f9 80 00 00 00    	cmp    ecx,0x80
c000583b:	0f 86 11 fe ff ff    	jbe    c0005652 <f_mkfs+0x20e>
c0005841:	eb 08                	jmp    c000584b <f_mkfs+0x407>
c0005843:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005849:	76 0a                	jbe    c0005855 <f_mkfs+0x411>
c000584b:	be 0e 00 00 00       	mov    esi,0xe
c0005850:	e9 b4 03 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005855:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000585a:	31 d2                	xor    edx,edx
c000585c:	b9 00 02 00 00       	mov    ecx,0x200
c0005861:	89 d8                	mov    eax,ebx
c0005863:	e8 e8 c5 ff ff       	call   c0001e50 <mem_set>
c0005868:	b9 0b 00 00 00       	mov    ecx,0xb
c000586d:	ba 72 05 02 c0       	mov    edx,0xc0020572
c0005872:	89 d8                	mov    eax,ebx
c0005874:	e8 c2 c5 ff ff       	call   c0001e3b <mem_cpy>
c0005879:	8d 43 0b             	lea    eax,[ebx+0xb]
c000587c:	ba 00 02 00 00       	mov    edx,0x200
c0005881:	e8 ae c5 ff ff       	call   c0001e34 <st_word>
c0005886:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000588b:	89 f8                	mov    eax,edi
c000588d:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005890:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005893:	e8 9c c5 ff ff       	call   c0001e34 <st_word>
c0005898:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000589c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000589f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058a4:	83 f8 03             	cmp    eax,0x3
c00058a7:	b8 00 00 00 00       	mov    eax,0x0
c00058ac:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c00058b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00058b5:	8d 43 11             	lea    eax,[ebx+0x11]
c00058b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bc:	e8 73 c5 ff ff       	call   c0001e34 <st_word>
c00058c1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058c5:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00058cb:	77 0a                	ja     c00058d7 <f_mkfs+0x493>
c00058cd:	8d 43 13             	lea    eax,[ebx+0x13]
c00058d0:	e8 5f c5 ff ff       	call   c0001e34 <st_word>
c00058d5:	eb 08                	jmp    c00058df <f_mkfs+0x49b>
c00058d7:	8d 43 20             	lea    eax,[ebx+0x20]
c00058da:	e8 59 c5 ff ff       	call   c0001e38 <st_dword>
c00058df:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058e3:	8d 43 18             	lea    eax,[ebx+0x18]
c00058e6:	ba 3f 00 00 00       	mov    edx,0x3f
c00058eb:	e8 44 c5 ff ff       	call   c0001e34 <st_word>
c00058f0:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058f3:	ba ff 00 00 00       	mov    edx,0xff
c00058f8:	e8 37 c5 ff ff       	call   c0001e34 <st_word>
c00058fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005901:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005904:	e8 2f c5 ff ff       	call   c0001e38 <st_dword>
c0005909:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000590e:	83 f8 03             	cmp    eax,0x3
c0005911:	75 57                	jne    c000596a <f_mkfs+0x526>
c0005913:	8d 43 43             	lea    eax,[ebx+0x43]
c0005916:	ba 00 00 21 50       	mov    edx,0x50210000
c000591b:	e8 18 c5 ff ff       	call   c0001e38 <st_dword>
c0005920:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005924:	8d 43 24             	lea    eax,[ebx+0x24]
c0005927:	e8 0c c5 ff ff       	call   c0001e38 <st_dword>
c000592c:	8d 43 2c             	lea    eax,[ebx+0x2c]
c000592f:	ba 02 00 00 00       	mov    edx,0x2
c0005934:	e8 ff c4 ff ff       	call   c0001e38 <st_dword>
c0005939:	8d 43 30             	lea    eax,[ebx+0x30]
c000593c:	ba 01 00 00 00       	mov    edx,0x1
c0005941:	e8 ee c4 ff ff       	call   c0001e34 <st_word>
c0005946:	8d 43 32             	lea    eax,[ebx+0x32]
c0005949:	ba 06 00 00 00       	mov    edx,0x6
c000594e:	e8 e1 c4 ff ff       	call   c0001e34 <st_word>
c0005953:	8d 43 47             	lea    eax,[ebx+0x47]
c0005956:	b9 13 00 00 00       	mov    ecx,0x13
c000595b:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c000595f:	ba 7e 05 02 c0       	mov    edx,0xc002057e
c0005964:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005968:	eb 2f                	jmp    c0005999 <f_mkfs+0x555>
c000596a:	8d 43 27             	lea    eax,[ebx+0x27]
c000596d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005972:	e8 c1 c4 ff ff       	call   c0001e38 <st_dword>
c0005977:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000597c:	8d 43 16             	lea    eax,[ebx+0x16]
c000597f:	e8 b0 c4 ff ff       	call   c0001e34 <st_word>
c0005984:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005987:	b9 13 00 00 00       	mov    ecx,0x13
c000598c:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005990:	ba 92 05 02 c0       	mov    edx,0xc0020592
c0005995:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005999:	e8 9d c4 ff ff       	call   c0001e3b <mem_cpy>
c000599e:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059a4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00059ad:	e8 82 c4 ff ff       	call   c0001e34 <st_word>
c00059b2:	6a 01                	push   0x1
c00059b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059b8:	53                   	push   ebx
c00059b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059bd:	e8 18 c4 ff ff       	call   c0001dda <disk_write>
c00059c2:	83 c4 10             	add    esp,0x10
c00059c5:	85 c0                	test   eax,eax
c00059c7:	0f 85 25 02 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00059cd:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00059d2:	83 f8 03             	cmp    eax,0x3
c00059d5:	0f 85 98 00 00 00    	jne    c0005a73 <f_mkfs+0x62f>
c00059db:	6a 01                	push   0x1
c00059dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00059e1:	83 c0 06             	add    eax,0x6
c00059e4:	50                   	push   eax
c00059e5:	53                   	push   ebx
c00059e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059ea:	e8 eb c3 ff ff       	call   c0001dda <disk_write>
c00059ef:	b9 00 02 00 00       	mov    ecx,0x200
c00059f4:	31 d2                	xor    edx,edx
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 53 c4 ff ff       	call   c0001e50 <mem_set>
c00059fd:	ba 52 52 61 41       	mov    edx,0x41615252
c0005a02:	89 d8                	mov    eax,ebx
c0005a04:	e8 2f c4 ff ff       	call   c0001e38 <st_dword>
c0005a09:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005a0f:	ba 72 72 41 61       	mov    edx,0x61417272
c0005a14:	e8 1f c4 ff ff       	call   c0001e38 <st_dword>
c0005a19:	8d 56 ff             	lea    edx,[esi-0x1]
c0005a1c:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005a22:	e8 11 c4 ff ff       	call   c0001e38 <st_dword>
c0005a27:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005a2d:	ba 02 00 00 00       	mov    edx,0x2
c0005a32:	e8 01 c4 ff ff       	call   c0001e38 <st_dword>
c0005a37:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005a3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005a42:	e8 ed c3 ff ff       	call   c0001e34 <st_word>
c0005a47:	6a 01                	push   0x1
c0005a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005a4d:	83 c0 07             	add    eax,0x7
c0005a50:	50                   	push   eax
c0005a51:	53                   	push   ebx
c0005a52:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a56:	e8 7f c3 ff ff       	call   c0001dda <disk_write>
c0005a5b:	83 c4 20             	add    esp,0x20
c0005a5e:	6a 01                	push   0x1
c0005a60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005a64:	40                   	inc    eax
c0005a65:	50                   	push   eax
c0005a66:	53                   	push   ebx
c0005a67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a6b:	e8 6a c3 ff ff       	call   c0001dda <disk_write>
c0005a70:	83 c4 10             	add    esp,0x10
c0005a73:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a77:	31 d2                	xor    edx,edx
c0005a79:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a7d:	c1 e8 09             	shr    eax,0x9
c0005a80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a84:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a8a:	89 d8                	mov    eax,ebx
c0005a8c:	e8 bf c3 ff ff       	call   c0001e50 <mem_set>
c0005a91:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a96:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005a9b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005aa3:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005aa8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005aac:	83 f8 01             	cmp    eax,0x1
c0005aaf:	0f 44 d1             	cmove  edx,ecx
c0005ab2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005ab6:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005abb:	75 21                	jne    c0005ade <f_mkfs+0x69a>
c0005abd:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 6f c3 ff ff       	call   c0001e38 <st_dword>
c0005ac9:	8d 43 04             	lea    eax,[ebx+0x4]
c0005acc:	83 ca ff             	or     edx,0xffffffff
c0005acf:	e8 64 c3 ff ff       	call   c0001e38 <st_dword>
c0005ad4:	8d 43 08             	lea    eax,[ebx+0x8]
c0005ad7:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005adc:	eb 06                	jmp    c0005ae4 <f_mkfs+0x6a0>
c0005ade:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005ae2:	89 d8                	mov    eax,ebx
c0005ae4:	e8 4f c3 ff ff       	call   c0001e38 <st_dword>
c0005ae9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005af1:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005af5:	0f 46 c6             	cmovbe eax,esi
c0005af8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005afc:	50                   	push   eax
c0005afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b01:	53                   	push   ebx
c0005b02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b06:	e8 cf c2 ff ff       	call   c0001dda <disk_write>
c0005b0b:	83 c4 10             	add    esp,0x10
c0005b0e:	85 c0                	test   eax,eax
c0005b10:	0f 85 dc 00 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b16:	b9 00 02 00 00       	mov    ecx,0x200
c0005b1b:	31 d2                	xor    edx,edx
c0005b1d:	89 d8                	mov    eax,ebx
c0005b1f:	e8 2c c3 ff ff       	call   c0001e50 <mem_set>
c0005b24:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005b28:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005b2c:	29 ce                	sub    esi,ecx
c0005b2e:	75 bd                	jne    c0005aed <f_mkfs+0x6a9>
c0005b30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b34:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005b3c:	40                   	inc    eax
c0005b3d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b41:	0f 87 6f ff ff ff    	ja     c0005ab6 <f_mkfs+0x672>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	83 f8 03             	cmp    eax,0x3
c0005b4f:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005b54:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b58:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b5c:	0f 46 f7             	cmovbe esi,edi
c0005b5f:	56                   	push   esi
c0005b60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b64:	53                   	push   ebx
c0005b65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b69:	e8 6c c2 ff ff       	call   c0001dda <disk_write>
c0005b6e:	83 c4 10             	add    esp,0x10
c0005b71:	85 c0                	test   eax,eax
c0005b73:	75 7d                	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b75:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b79:	29 f7                	sub    edi,esi
c0005b7b:	75 d7                	jne    c0005b54 <f_mkfs+0x710>
c0005b7d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b82:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b87:	83 f8 03             	cmp    eax,0x3
c0005b8a:	74 1e                	je     c0005baa <f_mkfs+0x766>
c0005b8c:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b94:	b9 06 00 00 00       	mov    ecx,0x6
c0005b99:	77 0f                	ja     c0005baa <f_mkfs+0x766>
c0005b9b:	83 f8 02             	cmp    eax,0x2
c0005b9e:	b9 04 00 00 00       	mov    ecx,0x4
c0005ba3:	74 05                	je     c0005baa <f_mkfs+0x766>
c0005ba5:	b9 01 00 00 00       	mov    ecx,0x1
c0005baa:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005baf:	75 2a                	jne    c0005bdb <f_mkfs+0x797>
c0005bb1:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005bb9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005bbd:	83 ec 0c             	sub    esp,0xc
c0005bc0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005bc4:	53                   	push   ebx
c0005bc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005bc9:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005bcd:	e8 87 d2 ff ff       	call   c0002e59 <create_partition>
c0005bd2:	83 c4 10             	add    esp,0x10
c0005bd5:	85 c0                	test   eax,eax
c0005bd7:	89 c6                	mov    esi,eax
c0005bd9:	75 2e                	jne    c0005c09 <f_mkfs+0x7c5>
c0005bdb:	50                   	push   eax
c0005bdc:	31 f6                	xor    esi,esi
c0005bde:	6a 00                	push   0x0
c0005be0:	6a 00                	push   0x0
c0005be2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005be6:	e8 05 c2 ff ff       	call   c0001df0 <disk_ioctl>
c0005beb:	83 c4 10             	add    esp,0x10
c0005bee:	85 c0                	test   eax,eax
c0005bf0:	74 17                	je     c0005c09 <f_mkfs+0x7c5>
c0005bf2:	85 ed                	test   ebp,ebp
c0005bf4:	75 0c                	jne    c0005c02 <f_mkfs+0x7be>
c0005bf6:	83 ec 0c             	sub    esp,0xc
c0005bf9:	53                   	push   ebx
c0005bfa:	e8 6d 00 00 00       	call   c0005c6c <ff_memfree>
c0005bff:	83 c4 10             	add    esp,0x10
c0005c02:	be 01 00 00 00       	mov    esi,0x1
c0005c07:	eb 40                	jmp    c0005c49 <f_mkfs+0x805>
c0005c09:	85 ed                	test   ebp,ebp
c0005c0b:	75 3c                	jne    c0005c49 <f_mkfs+0x805>
c0005c0d:	83 ec 0c             	sub    esp,0xc
c0005c10:	53                   	push   ebx
c0005c11:	e8 56 00 00 00       	call   c0005c6c <ff_memfree>
c0005c16:	83 c4 10             	add    esp,0x10
c0005c19:	eb 2e                	jmp    c0005c49 <f_mkfs+0x805>
c0005c1b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c20:	0f 85 46 fb ff ff    	jne    c000576c <f_mkfs+0x328>
c0005c26:	e9 20 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c2b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c30:	0f 85 3c fb ff ff    	jne    c0005772 <f_mkfs+0x32e>
c0005c36:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c3c:	89 cf                	mov    edi,ecx
c0005c3e:	0f 86 30 fa ff ff    	jbe    c0005674 <f_mkfs+0x230>
c0005c44:	e9 02 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c49:	83 c4 5c             	add    esp,0x5c
c0005c4c:	89 f0                	mov    eax,esi
c0005c4e:	5b                   	pop    ebx
c0005c4f:	5e                   	pop    esi
c0005c50:	5f                   	pop    edi
c0005c51:	5d                   	pop    ebp
c0005c52:	c3                   	ret    
c0005c53:	90                   	nop

c0005c54 <ff_memalloc>:
c0005c54:	83 ec 0c             	sub    esp,0xc
c0005c57:	83 ec 0c             	sub    esp,0xc
c0005c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c5e:	e8 70 1e 00 00       	call   c0007ad3 <malloc>
c0005c63:	83 c4 10             	add    esp,0x10
c0005c66:	83 c4 0c             	add    esp,0xc
c0005c69:	c3                   	ret    
c0005c6a:	66 90                	xchg   ax,ax

c0005c6c <ff_memfree>:
c0005c6c:	83 ec 0c             	sub    esp,0xc
c0005c6f:	83 ec 0c             	sub    esp,0xc
c0005c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c76:	e8 68 1e 00 00       	call   c0007ae3 <free>
c0005c7b:	83 c4 10             	add    esp,0x10
c0005c7e:	90                   	nop
c0005c7f:	83 c4 0c             	add    esp,0xc
c0005c82:	c3                   	ret    
c0005c83:	90                   	nop

c0005c84 <ff_uni2oem>:
c0005c84:	83 ec 14             	sub    esp,0x14
c0005c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c8b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c8f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c96:	c7 44 24 0c c0 09 02 c0 	mov    DWORD PTR [esp+0xc],0xc00209c0
c0005c9e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005ca3:	77 0b                	ja     c0005cb0 <ff_uni2oem+0x2c>
c0005ca5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ca9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cae:	eb 64                	jmp    c0005d14 <ff_uni2oem+0x90>
c0005cb0:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005cb8:	77 5a                	ja     c0005d14 <ff_uni2oem+0x90>
c0005cba:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005cbe:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005cc3:	75 4f                	jne    c0005d14 <ff_uni2oem+0x90>
c0005cc5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ccc:	eb 12                	jmp    c0005ce0 <ff_uni2oem+0x5c>
c0005cce:	66 90                	xchg   ax,ax
c0005cd0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd5:	83 c0 01             	add    eax,0x1
c0005cd8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ce0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ce5:	83 f8 7f             	cmp    eax,0x7f
c0005ce8:	77 1a                	ja     c0005d04 <ff_uni2oem+0x80>
c0005cea:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cef:	8d 14 00             	lea    edx,[eax+eax*1]
c0005cf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cf6:	01 d0                	add    eax,edx
c0005cf8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cfb:	0f b7 c0             	movzx  eax,ax
c0005cfe:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005d02:	75 cc                	jne    c0005cd0 <ff_uni2oem+0x4c>
c0005d04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d09:	83 e8 80             	sub    eax,0xffffff80
c0005d0c:	0f b6 c0             	movzx  eax,al
c0005d0f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005d14:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d19:	83 c4 14             	add    esp,0x14
c0005d1c:	c3                   	ret    
c0005d1d:	8d 76 00             	lea    esi,[esi+0x0]

c0005d20 <ff_oem2uni>:
c0005d20:	83 ec 18             	sub    esp,0x18
c0005d23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005d27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005d2b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d30:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d34:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d3b:	c7 44 24 10 c0 09 02 c0 	mov    DWORD PTR [esp+0x10],0xc00209c0
c0005d43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d48:	83 f8 7f             	cmp    eax,0x7f
c0005d4b:	77 0b                	ja     c0005d58 <ff_oem2uni+0x38>
c0005d4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d51:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d56:	eb 34                	jmp    c0005d8c <ff_oem2uni+0x6c>
c0005d58:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d5c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d61:	75 29                	jne    c0005d8c <ff_oem2uni+0x6c>
c0005d63:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d68:	3d ff 00 00 00       	cmp    eax,0xff
c0005d6d:	77 1d                	ja     c0005d8c <ff_oem2uni+0x6c>
c0005d6f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d74:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d79:	8d 14 00             	lea    edx,[eax+eax*1]
c0005d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d80:	01 d0                	add    eax,edx
c0005d82:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d85:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d8a:	66 90                	xchg   ax,ax
c0005d8c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d91:	83 c4 18             	add    esp,0x18
c0005d94:	c3                   	ret    
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]

c0005d98 <ff_wtoupper>:
c0005d98:	83 ec 10             	sub    esp,0x10
c0005d9b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005da3:	0f 87 a7 01 00 00    	ja     c0005f50 <ff_wtoupper+0x1b8>
c0005da9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005dad:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005db2:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005db7:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005dbc:	77 0a                	ja     c0005dc8 <ff_wtoupper+0x30>
c0005dbe:	b8 c0 07 02 c0       	mov    eax,0xc00207c0
c0005dc3:	eb 0b                	jmp    c0005dd0 <ff_wtoupper+0x38>
c0005dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005dc8:	b8 00 07 02 c0       	mov    eax,0xc0020700
c0005dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0005dd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dd8:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ddf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005de7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dec:	85 c0                	test   eax,eax
c0005dee:	0f 84 50 01 00 00    	je     c0005f44 <ff_wtoupper+0x1ac>
c0005df4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005df9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dfe:	39 c2                	cmp    edx,eax
c0005e00:	0f 82 3e 01 00 00    	jb     c0005f44 <ff_wtoupper+0x1ac>
c0005e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e0a:	8d 50 02             	lea    edx,[eax+0x2]
c0005e0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005e11:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e14:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e19:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005e1e:	c1 e8 08             	shr    eax,0x8
c0005e21:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005e26:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005e2b:	0f b6 c0             	movzx  eax,al
c0005e2e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e33:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e38:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e3d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e42:	01 ca                	add    edx,ecx
c0005e44:	39 d0                	cmp    eax,edx
c0005e46:	0f 8d d4 00 00 00    	jge    c0005f20 <ff_wtoupper+0x188>
c0005e4c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e51:	83 f8 08             	cmp    eax,0x8
c0005e54:	0f 87 e6 00 00 00    	ja     c0005f40 <ff_wtoupper+0x1a8>
c0005e5a:	8b 04 85 c0 06 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf940]
c0005e61:	ff e0                	jmp    eax
c0005e63:	90                   	nop
c0005e64:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e69:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e6e:	29 c2                	sub    edx,eax
c0005e70:	89 d0                	mov    eax,edx
c0005e72:	8d 14 00             	lea    edx,[eax+eax*1]
c0005e75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e79:	01 d0                	add    eax,edx
c0005e7b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e7e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e83:	e9 94 00 00 00       	jmp    c0005f1c <ff_wtoupper+0x184>
c0005e88:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e91:	89 d1                	mov    ecx,edx
c0005e93:	29 c1                	sub    ecx,eax
c0005e95:	89 c8                	mov    eax,ecx
c0005e97:	83 e0 01             	and    eax,0x1
c0005e9a:	89 c2                	mov    edx,eax
c0005e9c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea1:	29 d0                	sub    eax,edx
c0005ea3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ea8:	eb 72                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eaa:	66 90                	xchg   ax,ax
c0005eac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb1:	83 e8 10             	sub    eax,0x10
c0005eb4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eb9:	eb 61                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ebb:	90                   	nop
c0005ebc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec1:	83 e8 20             	sub    eax,0x20
c0005ec4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ec9:	eb 51                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ecb:	90                   	nop
c0005ecc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed1:	83 e8 30             	sub    eax,0x30
c0005ed4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ed9:	eb 41                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005edb:	90                   	nop
c0005edc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee1:	83 e8 1a             	sub    eax,0x1a
c0005ee4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ee9:	eb 31                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eeb:	90                   	nop
c0005eec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ef1:	83 c0 08             	add    eax,0x8
c0005ef4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ef9:	eb 21                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005efb:	90                   	nop
c0005efc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f01:	83 e8 50             	sub    eax,0x50
c0005f04:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f09:	eb 11                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005f0b:	90                   	nop
c0005f0c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f11:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005f16:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f1b:	90                   	nop
c0005f1c:	eb 22                	jmp    c0005f40 <ff_wtoupper+0x1a8>
c0005f1e:	66 90                	xchg   ax,ax
c0005f20:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f25:	85 c0                	test   eax,eax
c0005f27:	0f 85 a7 fe ff ff    	jne    c0005dd4 <ff_wtoupper+0x3c>
c0005f2d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f32:	d1 e0                	shl    eax,1
c0005f34:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f38:	e9 97 fe ff ff       	jmp    c0005dd4 <ff_wtoupper+0x3c>
c0005f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f40:	90                   	nop
c0005f41:	8d 76 00             	lea    esi,[esi+0x0]
c0005f44:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f54:	83 c4 10             	add    esp,0x10
c0005f57:	c3                   	ret    

c0005f58 <utf2ucs>:
c0005f58:	57                   	push   edi
c0005f59:	31 c9                	xor    ecx,ecx
c0005f5b:	56                   	push   esi
c0005f5c:	89 d7                	mov    edi,edx
c0005f5e:	53                   	push   ebx
c0005f5f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f63:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f67:	89 de                	mov    esi,ebx
c0005f69:	c1 fe 08             	sar    esi,0x8
c0005f6c:	89 f2                	mov    edx,esi
c0005f6e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f71:	41                   	inc    ecx
c0005f72:	85 db                	test   ebx,ebx
c0005f74:	75 e9                	jne    c0005f5f <utf2ucs+0x7>
c0005f76:	5b                   	pop    ebx
c0005f77:	5e                   	pop    esi
c0005f78:	5f                   	pop    edi
c0005f79:	c3                   	ret    

c0005f7a <ucs2utfn>:
c0005f7a:	83 e1 fe             	and    ecx,0xfffffffe
c0005f7d:	01 d1                	add    ecx,edx
c0005f7f:	39 d1                	cmp    ecx,edx
c0005f81:	75 04                	jne    c0005f87 <ucs2utfn+0xd>
c0005f83:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f86:	c3                   	ret    
c0005f87:	57                   	push   edi
c0005f88:	56                   	push   esi
c0005f89:	53                   	push   ebx
c0005f8a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f8d:	83 c2 02             	add    edx,0x2
c0005f90:	89 de                	mov    esi,ebx
c0005f92:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f96:	c1 e6 08             	shl    esi,0x8
c0005f99:	09 f3                	or     ebx,esi
c0005f9b:	83 fb 3b             	cmp    ebx,0x3b
c0005f9e:	74 50                	je     c0005ff0 <ucs2utfn+0x76>
c0005fa0:	83 fb 7f             	cmp    ebx,0x7f
c0005fa3:	7f 05                	jg     c0005faa <ucs2utfn+0x30>
c0005fa5:	88 18                	mov    BYTE PTR [eax],bl
c0005fa7:	40                   	inc    eax
c0005fa8:	eb 42                	jmp    c0005fec <ucs2utfn+0x72>
c0005faa:	89 df                	mov    edi,ebx
c0005fac:	89 de                	mov    esi,ebx
c0005fae:	c1 fe 06             	sar    esi,0x6
c0005fb1:	83 e7 3f             	and    edi,0x3f
c0005fb4:	83 cf 80             	or     edi,0xffffff80
c0005fb7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005fbd:	7f 12                	jg     c0005fd1 <ucs2utfn+0x57>
c0005fbf:	83 ce c0             	or     esi,0xffffffc0
c0005fc2:	83 c0 02             	add    eax,0x2
c0005fc5:	89 f3                	mov    ebx,esi
c0005fc7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fca:	89 fb                	mov    ebx,edi
c0005fcc:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fcf:	eb 1b                	jmp    c0005fec <ucs2utfn+0x72>
c0005fd1:	c1 fb 0c             	sar    ebx,0xc
c0005fd4:	83 e6 3f             	and    esi,0x3f
c0005fd7:	83 cb e0             	or     ebx,0xffffffe0
c0005fda:	83 ce 80             	or     esi,0xffffff80
c0005fdd:	88 18                	mov    BYTE PTR [eax],bl
c0005fdf:	89 f3                	mov    ebx,esi
c0005fe1:	83 c0 03             	add    eax,0x3
c0005fe4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fe7:	89 fb                	mov    ebx,edi
c0005fe9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fec:	39 d1                	cmp    ecx,edx
c0005fee:	75 9a                	jne    c0005f8a <ucs2utfn+0x10>
c0005ff0:	5b                   	pop    ebx
c0005ff1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005ff4:	5e                   	pop    esi
c0005ff5:	5f                   	pop    edi
c0005ff6:	c3                   	ret    

c0005ff7 <isjoliet>:
c0005ff7:	31 d2                	xor    edx,edx
c0005ff9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005ffc:	75 26                	jne    c0006024 <isjoliet+0x2d>
c0005ffe:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0006002:	75 20                	jne    c0006024 <isjoliet+0x2d>
c0006004:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0006008:	ba 02 00 00 00       	mov    edx,0x2
c000600d:	83 f8 43             	cmp    eax,0x43
c0006010:	74 12                	je     c0006024 <isjoliet+0x2d>
c0006012:	83 f8 45             	cmp    eax,0x45
c0006015:	ba 03 00 00 00       	mov    edx,0x3
c000601a:	74 08                	je     c0006024 <isjoliet+0x2d>
c000601c:	31 d2                	xor    edx,edx
c000601e:	83 f8 40             	cmp    eax,0x40
c0006021:	0f 94 c2             	sete   dl
c0006024:	89 d0                	mov    eax,edx
c0006026:	c3                   	ret    

c0006027 <htohl_32>:
c0006027:	8b 00                	mov    eax,DWORD PTR [eax]
c0006029:	c3                   	ret    

c000602a <iso_733>:
c000602a:	eb fb                	jmp    c0006027 <htohl_32>

c000602c <bgrad_cache>:
c000602c:	83 fa 0e             	cmp    edx,0xe
c000602f:	77 16                	ja     c0006047 <bgrad_cache+0x1b>
c0006031:	53                   	push   ebx
c0006032:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006035:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006039:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000603c:	42                   	inc    edx
c000603d:	83 fa 0f             	cmp    edx,0xf
c0006040:	75 f3                	jne    c0006035 <bgrad_cache+0x9>
c0006042:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006045:	5b                   	pop    ebx
c0006046:	c3                   	ret    
c0006047:	c3                   	ret    

c0006048 <ucscompare>:
c0006048:	55                   	push   ebp
c0006049:	57                   	push   edi
c000604a:	89 c7                	mov    edi,eax
c000604c:	56                   	push   esi
c000604d:	89 d6                	mov    esi,edx
c000604f:	53                   	push   ebx
c0006050:	31 d2                	xor    edx,edx
c0006052:	83 ec 1c             	sub    esp,0x1c
c0006055:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006059:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000605e:	c1 e3 08             	shl    ebx,0x8
c0006061:	09 c3                	or     ebx,eax
c0006063:	39 ca                	cmp    edx,ecx
c0006065:	7d 42                	jge    c00060a9 <ucscompare+0x61>
c0006067:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000606b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000606f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006073:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006078:	c1 e0 08             	shl    eax,0x8
c000607b:	09 e8                	or     eax,ebp
c000607d:	83 f8 3b             	cmp    eax,0x3b
c0006080:	74 27                	je     c00060a9 <ucscompare+0x61>
c0006082:	83 ec 0c             	sub    esp,0xc
c0006085:	50                   	push   eax
c0006086:	e8 f5 a8 ff ff       	call   c0000980 <tolower>
c000608b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000608e:	89 c5                	mov    ebp,eax
c0006090:	e8 eb a8 ff ff       	call   c0000980 <tolower>
c0006095:	83 c4 10             	add    esp,0x10
c0006098:	39 c5                	cmp    ebp,eax
c000609a:	75 20                	jne    c00060bc <ucscompare+0x74>
c000609c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00060a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00060a4:	83 c2 02             	add    edx,0x2
c00060a7:	eb ac                	jmp    c0006055 <ucscompare+0xd>
c00060a9:	83 fb 2f             	cmp    ebx,0x2f
c00060ac:	0f 95 c2             	setne  dl
c00060af:	31 c0                	xor    eax,eax
c00060b1:	85 db                	test   ebx,ebx
c00060b3:	0f 95 c0             	setne  al
c00060b6:	21 d0                	and    eax,edx
c00060b8:	f7 d8                	neg    eax
c00060ba:	eb 03                	jmp    c00060bf <ucscompare+0x77>
c00060bc:	83 c8 ff             	or     eax,0xffffffff
c00060bf:	83 c4 1c             	add    esp,0x1c
c00060c2:	5b                   	pop    ebx
c00060c3:	5e                   	pop    esi
c00060c4:	5f                   	pop    edi
c00060c5:	5d                   	pop    ebp
c00060c6:	c3                   	ret    

c00060c7 <fncompare>:
c00060c7:	55                   	push   ebp
c00060c8:	57                   	push   edi
c00060c9:	89 c7                	mov    edi,eax
c00060cb:	56                   	push   esi
c00060cc:	89 ce                	mov    esi,ecx
c00060ce:	53                   	push   ebx
c00060cf:	31 db                	xor    ebx,ebx
c00060d1:	83 ec 1c             	sub    esp,0x1c
c00060d4:	39 d3                	cmp    ebx,edx
c00060d6:	7d 45                	jge    c000611d <fncompare+0x56>
c00060d8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060dc:	83 f8 3b             	cmp    eax,0x3b
c00060df:	74 3c                	je     c000611d <fncompare+0x56>
c00060e1:	83 f8 2e             	cmp    eax,0x2e
c00060e4:	75 0e                	jne    c00060f4 <fncompare+0x2d>
c00060e6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060e9:	39 d9                	cmp    ecx,ebx
c00060eb:	74 30                	je     c000611d <fncompare+0x56>
c00060ed:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060f2:	74 29                	je     c000611d <fncompare+0x56>
c00060f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060f8:	83 ec 0c             	sub    esp,0xc
c00060fb:	50                   	push   eax
c00060fc:	e8 7f a8 ff ff       	call   c0000980 <tolower>
c0006101:	89 c5                	mov    ebp,eax
c0006103:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0006107:	89 04 24             	mov    DWORD PTR [esp],eax
c000610a:	e8 71 a8 ff ff       	call   c0000980 <tolower>
c000610f:	83 c4 10             	add    esp,0x10
c0006112:	39 c5                	cmp    ebp,eax
c0006114:	75 1e                	jne    c0006134 <fncompare+0x6d>
c0006116:	43                   	inc    ebx
c0006117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000611b:	eb b7                	jmp    c00060d4 <fncompare+0xd>
c000611d:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006121:	83 fa 2f             	cmp    edx,0x2f
c0006124:	0f 95 c1             	setne  cl
c0006127:	31 c0                	xor    eax,eax
c0006129:	85 d2                	test   edx,edx
c000612b:	0f 95 c0             	setne  al
c000612e:	21 c8                	and    eax,ecx
c0006130:	f7 d8                	neg    eax
c0006132:	eb 03                	jmp    c0006137 <fncompare+0x70>
c0006134:	83 c8 ff             	or     eax,0xffffffff
c0006137:	83 c4 1c             	add    esp,0x1c
c000613a:	5b                   	pop    ebx
c000613b:	5e                   	pop    esi
c000613c:	5f                   	pop    edi
c000613d:	5d                   	pop    ebp
c000613e:	c3                   	ret    

c000613f <bclear_cache>:
c000613f:	83 ec 18             	sub    esp,0x18
c0006142:	68 c0 0a 02 c0       	push   0xc0020ac0
c0006147:	e8 d0 42 01 00       	call   c001a41c <iso_kprintf>
c000614c:	83 c4 10             	add    esp,0x10
c000614f:	31 c0                	xor    eax,eax
c0006151:	8b 14 85 20 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9fe0]
c0006158:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000615e:	8b 14 85 80 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9f80]
c0006165:	40                   	inc    eax
c0006166:	83 f8 10             	cmp    eax,0x10
c0006169:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000616f:	75 e0                	jne    c0006151 <bclear_cache+0x12>
c0006171:	83 c4 0c             	add    esp,0xc
c0006174:	c3                   	ret    

c0006175 <bclear>:
c0006175:	eb c8                	jmp    c000613f <bclear_cache>

c0006177 <iso_break_all>:
c0006177:	83 ec 18             	sub    esp,0x18
c000617a:	68 ce 0a 02 c0       	push   0xc0020ace
c000617f:	e8 98 42 01 00       	call   c001a41c <iso_kprintf>
c0006184:	83 c4 10             	add    esp,0x10
c0006187:	31 c0                	xor    eax,eax
c0006189:	c7 80 d0 65 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd9a30],0x1
c0006193:	05 94 00 00 00       	add    eax,0x94
c0006198:	3d 40 09 00 00       	cmp    eax,0x940
c000619d:	75 ea                	jne    c0006189 <iso_break_all+0x12>
c000619f:	83 c4 0c             	add    esp,0xc
c00061a2:	c3                   	ret    

c00061a3 <isoReadDiscSector>:
c00061a3:	83 ec 0c             	sub    esp,0xc
c00061a6:	0f be 05 60 60 02 c0 	movsx  eax,BYTE PTR ds:0xc0026060
c00061ad:	50                   	push   eax
c00061ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061ba:	e8 01 42 01 00       	call   c001a3c0 <isoReadDiscSectorHelper>
c00061bf:	83 c4 1c             	add    esp,0x1c
c00061c2:	c3                   	ret    

c00061c3 <bread_cache>:
c00061c3:	55                   	push   ebp
c00061c4:	57                   	push   edi
c00061c5:	89 d7                	mov    edi,edx
c00061c7:	56                   	push   esi
c00061c8:	ba 0f 00 00 00       	mov    edx,0xf
c00061cd:	53                   	push   ebx
c00061ce:	89 c6                	mov    esi,eax
c00061d0:	83 ec 0c             	sub    esp,0xc
c00061d3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061d6:	39 38                	cmp    DWORD PTR [eax],edi
c00061d8:	74 3c                	je     c0006216 <bread_cache+0x53>
c00061da:	4a                   	dec    edx
c00061db:	83 fa ff             	cmp    edx,0xffffffff
c00061de:	75 f3                	jne    c00061d3 <bread_cache+0x10>
c00061e0:	31 db                	xor    ebx,ebx
c00061e2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061e5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061e8:	74 08                	je     c00061f2 <bread_cache+0x2f>
c00061ea:	43                   	inc    ebx
c00061eb:	83 fb 10             	cmp    ebx,0x10
c00061ee:	75 f2                	jne    c00061e2 <bread_cache+0x1f>
c00061f0:	31 db                	xor    ebx,ebx
c00061f2:	50                   	push   eax
c00061f3:	6a 01                	push   0x1
c00061f5:	57                   	push   edi
c00061f6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061fc:	83 c0 04             	add    eax,0x4
c00061ff:	50                   	push   eax
c0006200:	e8 9e ff ff ff       	call   c00061a3 <isoReadDiscSector>
c0006205:	83 c4 10             	add    esp,0x10
c0006208:	83 c9 ff             	or     ecx,0xffffffff
c000620b:	85 c0                	test   eax,eax
c000620d:	78 13                	js     c0006222 <bread_cache+0x5f>
c000620f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006212:	89 da                	mov    edx,ebx
c0006214:	89 38                	mov    DWORD PTR [eax],edi
c0006216:	89 f0                	mov    eax,esi
c0006218:	e8 0f fe ff ff       	call   c000602c <bgrad_cache>
c000621d:	b9 0f 00 00 00       	mov    ecx,0xf
c0006222:	83 c4 0c             	add    esp,0xc
c0006225:	89 c8                	mov    eax,ecx
c0006227:	5b                   	pop    ebx
c0006228:	5e                   	pop    esi
c0006229:	5f                   	pop    edi
c000622a:	5d                   	pop    ebp
c000622b:	c3                   	ret    

c000622c <biread>:
c000622c:	89 c2                	mov    edx,eax
c000622e:	b8 80 60 02 c0       	mov    eax,0xc0026080
c0006233:	eb 8e                	jmp    c00061c3 <bread_cache>

c0006235 <bdread>:
c0006235:	89 c2                	mov    edx,eax
c0006237:	b8 20 60 02 c0       	mov    eax,0xc0026020
c000623c:	eb 85                	jmp    c00061c3 <bread_cache>

c000623e <strnicmp>:
c000623e:	55                   	push   ebp
c000623f:	57                   	push   edi
c0006240:	31 ff                	xor    edi,edi
c0006242:	56                   	push   esi
c0006243:	53                   	push   ebx
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000624b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000624f:	74 43                	je     c0006294 <strnicmp+0x56>
c0006251:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006255:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006259:	85 c0                	test   eax,eax
c000625b:	74 37                	je     c0006294 <strnicmp+0x56>
c000625d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006261:	85 d2                	test   edx,edx
c0006263:	74 2f                	je     c0006294 <strnicmp+0x56>
c0006265:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006268:	39 d0                	cmp    eax,edx
c000626a:	75 04                	jne    c0006270 <strnicmp+0x32>
c000626c:	89 ef                	mov    edi,ebp
c000626e:	eb db                	jmp    c000624b <strnicmp+0xd>
c0006270:	83 ec 0c             	sub    esp,0xc
c0006273:	50                   	push   eax
c0006274:	e8 07 a7 ff ff       	call   c0000980 <tolower>
c0006279:	89 c3                	mov    ebx,eax
c000627b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000627f:	89 ef                	mov    edi,ebp
c0006281:	89 04 24             	mov    DWORD PTR [esp],eax
c0006284:	e8 f7 a6 ff ff       	call   c0000980 <tolower>
c0006289:	83 c4 10             	add    esp,0x10
c000628c:	29 c3                	sub    ebx,eax
c000628e:	89 d8                	mov    eax,ebx
c0006290:	74 b9                	je     c000624b <strnicmp+0xd>
c0006292:	eb 02                	jmp    c0006296 <strnicmp+0x58>
c0006294:	31 c0                	xor    eax,eax
c0006296:	83 c4 0c             	add    esp,0xc
c0006299:	5b                   	pop    ebx
c000629a:	5e                   	pop    esi
c000629b:	5f                   	pop    edi
c000629c:	5d                   	pop    ebp
c000629d:	c3                   	ret    

c000629e <find_object>:
c000629e:	55                   	push   ebp
c000629f:	57                   	push   edi
c00062a0:	89 c7                	mov    edi,eax
c00062a2:	56                   	push   esi
c00062a3:	53                   	push   ebx
c00062a4:	89 d3                	mov    ebx,edx
c00062a6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00062ac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00062b0:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00062b7:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c00062be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00062c2:	74 0b                	je     c00062cf <find_object+0x31>
c00062c4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00062c8:	89 fa                	mov    edx,edi
c00062ca:	e8 89 fc ff ff       	call   c0005f58 <utf2ucs>
c00062cf:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062d6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00062db:	7e 11                	jle    c00062ee <find_object+0x50>
c00062dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062e1:	e8 46 ff ff ff       	call   c000622c <biread>
c00062e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062ea:	85 c0                	test   eax,eax
c00062ec:	79 07                	jns    c00062f5 <find_object+0x57>
c00062ee:	31 db                	xor    ebx,ebx
c00062f0:	e9 47 01 00 00       	jmp    c000643c <find_object+0x19e>
c00062f5:	31 ed                	xor    ebp,ebp
c00062f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062fb:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006302:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c0006306:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0006309:	85 f6                	test   esi,esi
c000630b:	75 0e                	jne    c000631b <find_object+0x7d>
c000630d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006311:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c0006319:	eb bb                	jmp    c00062d6 <find_object+0x38>
c000631b:	8b 0d b4 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026eb4
c0006321:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006325:	85 c9                	test   ecx,ecx
c0006327:	89 d0                	mov    eax,edx
c0006329:	74 2b                	je     c0006356 <find_object+0xb8>
c000632b:	8d 43 21             	lea    eax,[ebx+0x21]
c000632e:	89 d1                	mov    ecx,edx
c0006330:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006334:	e8 0f fd ff ff       	call   c0006048 <ucscompare>
c0006339:	85 c0                	test   eax,eax
c000633b:	0f 84 cd 00 00 00    	je     c000640e <find_object+0x170>
c0006341:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006344:	01 c5                	add    ebp,eax
c0006346:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000634c:	7f bf                	jg     c000630d <find_object+0x6f>
c000634e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006352:	7f a3                	jg     c00062f7 <find_object+0x59>
c0006354:	eb b7                	jmp    c000630d <find_object+0x6f>
c0006356:	29 d6                	sub    esi,edx
c0006358:	a8 01                	test   al,0x1
c000635a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000635e:	74 05                	je     c0006365 <find_object+0xc7>
c0006360:	83 ee 21             	sub    esi,0x21
c0006363:	eb 6a                	jmp    c00063cf <find_object+0x131>
c0006365:	42                   	inc    edx
c0006366:	83 ee 22             	sub    esi,0x22
c0006369:	eb 64                	jmp    c00063cf <find_object+0x131>
c000636b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000636e:	48                   	dec    eax
c000636f:	3c 01                	cmp    al,0x1
c0006371:	77 61                	ja     c00063d4 <find_object+0x136>
c0006373:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006377:	50                   	push   eax
c0006378:	6a 02                	push   0x2
c000637a:	68 dd 0a 02 c0       	push   0xc0020add
c000637f:	52                   	push   edx
c0006380:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006384:	e8 87 a4 ff ff       	call   c0000810 <strncmp>
c0006389:	83 c4 10             	add    esp,0x10
c000638c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006390:	85 c0                	test   eax,eax
c0006392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006396:	75 2f                	jne    c00063c7 <find_object+0x129>
c0006398:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000639c:	50                   	push   eax
c000639d:	8d 42 05             	lea    eax,[edx+0x5]
c00063a0:	83 e9 05             	sub    ecx,0x5
c00063a3:	51                   	push   ecx
c00063a4:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00063a8:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00063ac:	50                   	push   eax
c00063ad:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063b1:	50                   	push   eax
c00063b2:	e8 d9 a2 ff ff       	call   c0000690 <strncpy>
c00063b7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00063bb:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00063c0:	83 c4 10             	add    esp,0x10
c00063c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063c7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00063cb:	29 c6                	sub    esi,eax
c00063cd:	01 c2                	add    edx,eax
c00063cf:	83 fe 03             	cmp    esi,0x3
c00063d2:	7f 97                	jg     c000636b <find_object+0xcd>
c00063d4:	85 c9                	test   ecx,ecx
c00063d6:	7e 40                	jle    c0006418 <find_object+0x17a>
c00063d8:	51                   	push   ecx
c00063d9:	51                   	push   ecx
c00063da:	6a 2f                	push   0x2f
c00063dc:	57                   	push   edi
c00063dd:	e8 ee a3 ff ff       	call   c00007d0 <strchr>
c00063e2:	83 c4 10             	add    esp,0x10
c00063e5:	85 c0                	test   eax,eax
c00063e7:	74 04                	je     c00063ed <find_object+0x14f>
c00063e9:	29 f8                	sub    eax,edi
c00063eb:	eb 0c                	jmp    c00063f9 <find_object+0x15b>
c00063ed:	83 ec 0c             	sub    esp,0xc
c00063f0:	57                   	push   edi
c00063f1:	e8 8a a1 ff ff       	call   c0000580 <strlen>
c00063f6:	83 c4 10             	add    esp,0x10
c00063f9:	52                   	push   edx
c00063fa:	50                   	push   eax
c00063fb:	57                   	push   edi
c00063fc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006400:	50                   	push   eax
c0006401:	e8 38 fe ff ff       	call   c000623e <strnicmp>
c0006406:	83 c4 10             	add    esp,0x10
c0006409:	e9 2b ff ff ff       	jmp    c0006339 <find_object+0x9b>
c000640e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006412:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006416:	eb 1e                	jmp    c0006436 <find_object+0x198>
c0006418:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c000641c:	8d 43 21             	lea    eax,[ebx+0x21]
c000641f:	89 f9                	mov    ecx,edi
c0006421:	e8 a1 fc ff ff       	call   c00060c7 <fncompare>
c0006426:	85 c0                	test   eax,eax
c0006428:	0f 85 13 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000642e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006432:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006436:	0f 85 05 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000643c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006442:	89 d8                	mov    eax,ebx
c0006444:	5b                   	pop    ebx
c0006445:	5e                   	pop    esi
c0006446:	5f                   	pop    edi
c0006447:	5d                   	pop    ebp
c0006448:	c3                   	ret    

c0006449 <find_object_path>:
c0006449:	55                   	push   ebp
c000644a:	57                   	push   edi
c000644b:	89 d7                	mov    edi,edx
c000644d:	56                   	push   esi
c000644e:	89 c6                	mov    esi,eax
c0006450:	53                   	push   ebx
c0006451:	89 cb                	mov    ebx,ecx
c0006453:	83 ec 0c             	sub    esp,0xc
c0006456:	50                   	push   eax
c0006457:	50                   	push   eax
c0006458:	6a 2f                	push   0x2f
c000645a:	56                   	push   esi
c000645b:	e8 70 a3 ff ff       	call   c00007d0 <strchr>
c0006460:	83 c4 10             	add    esp,0x10
c0006463:	85 c0                	test   eax,eax
c0006465:	89 c5                	mov    ebp,eax
c0006467:	74 3a                	je     c00064a3 <find_object_path+0x5a>
c0006469:	39 ee                	cmp    esi,ebp
c000646b:	74 31                	je     c000649e <find_object_path+0x55>
c000646d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006470:	e8 b5 fb ff ff       	call   c000602a <iso_733>
c0006475:	89 c2                	mov    edx,eax
c0006477:	8d 43 02             	lea    eax,[ebx+0x2]
c000647a:	e8 ab fb ff ff       	call   c000602a <iso_733>
c000647f:	83 ec 0c             	sub    esp,0xc
c0006482:	52                   	push   edx
c0006483:	89 c1                	mov    ecx,eax
c0006485:	ba 01 00 00 00       	mov    edx,0x1
c000648a:	89 f0                	mov    eax,esi
c000648c:	e8 0d fe ff ff       	call   c000629e <find_object>
c0006491:	83 c4 10             	add    esp,0x10
c0006494:	85 c0                	test   eax,eax
c0006496:	89 c3                	mov    ebx,eax
c0006498:	75 04                	jne    c000649e <find_object_path+0x55>
c000649a:	31 db                	xor    ebx,ebx
c000649c:	eb 36                	jmp    c00064d4 <find_object_path+0x8b>
c000649e:	8d 75 01             	lea    esi,[ebp+0x1]
c00064a1:	eb b3                	jmp    c0006456 <find_object_path+0xd>
c00064a3:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00064a6:	74 28                	je     c00064d0 <find_object_path+0x87>
c00064a8:	8d 43 0a             	lea    eax,[ebx+0xa]
c00064ab:	e8 7a fb ff ff       	call   c000602a <iso_733>
c00064b0:	89 c2                	mov    edx,eax
c00064b2:	8d 43 02             	lea    eax,[ebx+0x2]
c00064b5:	e8 70 fb ff ff       	call   c000602a <iso_733>
c00064ba:	83 ec 0c             	sub    esp,0xc
c00064bd:	52                   	push   edx
c00064be:	89 c1                	mov    ecx,eax
c00064c0:	89 fa                	mov    edx,edi
c00064c2:	89 f0                	mov    eax,esi
c00064c4:	e8 d5 fd ff ff       	call   c000629e <find_object>
c00064c9:	83 c4 10             	add    esp,0x10
c00064cc:	89 c3                	mov    ebx,eax
c00064ce:	eb 04                	jmp    c00064d4 <find_object_path+0x8b>
c00064d0:	85 ff                	test   edi,edi
c00064d2:	74 c6                	je     c000649a <find_object_path+0x51>
c00064d4:	83 c4 0c             	add    esp,0xc
c00064d7:	89 d8                	mov    eax,ebx
c00064d9:	5b                   	pop    ebx
c00064da:	5e                   	pop    esi
c00064db:	5f                   	pop    edi
c00064dc:	5d                   	pop    ebp
c00064dd:	c3                   	ret    

c00064de <stricmp>:
c00064de:	57                   	push   edi
c00064df:	56                   	push   esi
c00064e0:	31 f6                	xor    esi,esi
c00064e2:	53                   	push   ebx
c00064e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064e7:	83 ec 0c             	sub    esp,0xc
c00064ea:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064f6:	46                   	inc    esi
c00064f7:	50                   	push   eax
c00064f8:	e8 63 a4 ff ff       	call   c0000960 <toupper>
c00064fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006500:	e8 7b a4 ff ff       	call   c0000980 <tolower>
c0006505:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006508:	89 c3                	mov    ebx,eax
c000650a:	e8 51 a4 ff ff       	call   c0000960 <toupper>
c000650f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006512:	e8 69 a4 ff ff       	call   c0000980 <tolower>
c0006517:	83 c4 10             	add    esp,0x10
c000651a:	39 c3                	cmp    ebx,eax
c000651c:	75 04                	jne    c0006522 <stricmp+0x44>
c000651e:	85 db                	test   ebx,ebx
c0006520:	75 c1                	jne    c00064e3 <stricmp+0x5>
c0006522:	29 c3                	sub    ebx,eax
c0006524:	89 d8                	mov    eax,ebx
c0006526:	5b                   	pop    ebx
c0006527:	5e                   	pop    esi
c0006528:	5f                   	pop    edi
c0006529:	c3                   	ret    

c000652a <iso_open>:
c000652a:	57                   	push   edi
c000652b:	31 c0                	xor    eax,eax
c000652d:	56                   	push   esi
c000652e:	b9 80 6e 02 c0       	mov    ecx,0xc0026e80
c0006533:	53                   	push   ebx
c0006534:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006539:	0f 95 c0             	setne  al
c000653c:	89 c2                	mov    edx,eax
c000653e:	89 c6                	mov    esi,eax
c0006540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006544:	e8 00 ff ff ff       	call   c0006449 <find_object_path>
c0006549:	83 ca ff             	or     edx,0xffffffff
c000654c:	85 c0                	test   eax,eax
c000654e:	74 5e                	je     c00065ae <iso_open+0x84>
c0006550:	89 c1                	mov    ecx,eax
c0006552:	31 d2                	xor    edx,edx
c0006554:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000655a:	83 bf 40 65 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd9ac0],0x0
c0006561:	75 42                	jne    c00065a5 <iso_open+0x7b>
c0006563:	c7 87 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd9ac0],0xffffffff
c000656d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006570:	e8 b5 fa ff ff       	call   c000602a <iso_733>
c0006575:	89 b7 44 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9abc],esi
c000657b:	c7 87 48 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9ab8],0x0
c0006585:	89 87 40 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ac0],eax
c000658b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000658e:	e8 97 fa ff ff       	call   c000602a <iso_733>
c0006593:	c7 87 d0 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9a30],0x0
c000659d:	89 87 4c 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ab4],eax
c00065a3:	eb 09                	jmp    c00065ae <iso_open+0x84>
c00065a5:	42                   	inc    edx
c00065a6:	83 fa 10             	cmp    edx,0x10
c00065a9:	75 a9                	jne    c0006554 <iso_open+0x2a>
c00065ab:	83 ca ff             	or     edx,0xffffffff
c00065ae:	5b                   	pop    ebx
c00065af:	89 d0                	mov    eax,edx
c00065b1:	5e                   	pop    esi
c00065b2:	5f                   	pop    edi
c00065b3:	c3                   	ret    

c00065b4 <iso_close>:
c00065b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065b8:	83 f8 0f             	cmp    eax,0xf
c00065bb:	7f 10                	jg     c00065cd <iso_close+0x19>
c00065bd:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065c3:	c7 80 40 65 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9ac0],0x0
c00065cd:	e9 6d fb ff ff       	jmp    c000613f <bclear_cache>

c00065d2 <iso_read>:
c00065d2:	55                   	push   ebp
c00065d3:	57                   	push   edi
c00065d4:	56                   	push   esi
c00065d5:	53                   	push   ebx
c00065d6:	83 ec 1c             	sub    esp,0x1c
c00065d9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065dd:	83 fd 0f             	cmp    ebp,0xf
c00065e0:	7e 0a                	jle    c00065ec <iso_read+0x1a>
c00065e2:	83 c8 ff             	or     eax,0xffffffff
c00065e5:	89 c2                	mov    edx,eax
c00065e7:	e9 f4 00 00 00       	jmp    c00066e0 <iso_read+0x10e>
c00065ec:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065f2:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00065f9:	74 e7                	je     c00065e2 <iso_read+0x10>
c00065fb:	8b 95 d0 65 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd9a30]
c0006601:	85 d2                	test   edx,edx
c0006603:	75 dd                	jne    c00065e2 <iso_read+0x10>
c0006605:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000660a:	0f 84 cd 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006610:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c0006616:	8b 9d 4c 65 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffd9ab4]
c000661c:	29 c3                	sub    ebx,eax
c000661e:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006622:	89 d9                	mov    ecx,ebx
c0006624:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006629:	85 c9                	test   ecx,ecx
c000662b:	0f 84 ac 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006631:	89 c6                	mov    esi,eax
c0006633:	bb 00 08 00 00       	mov    ebx,0x800
c0006638:	c1 e8 0b             	shr    eax,0xb
c000663b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006641:	03 85 40 65 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd9ac0]
c0006647:	29 f3                	sub    ebx,esi
c0006649:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000664f:	75 3f                	jne    c0006690 <iso_read+0xbe>
c0006651:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006657:	7e 37                	jle    c0006690 <iso_read+0xbe>
c0006659:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000665f:	be 20 00 00 00       	mov    esi,0x20
c0006664:	7f 05                	jg     c000666b <iso_read+0x99>
c0006666:	89 ce                	mov    esi,ecx
c0006668:	c1 fe 0b             	sar    esi,0xb
c000666b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000666f:	89 f3                	mov    ebx,esi
c0006671:	52                   	push   edx
c0006672:	56                   	push   esi
c0006673:	50                   	push   eax
c0006674:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006678:	c1 e3 0b             	shl    ebx,0xb
c000667b:	e8 23 fb ff ff       	call   c00061a3 <isoReadDiscSector>
c0006680:	83 c4 10             	add    esp,0x10
c0006683:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006687:	85 c0                	test   eax,eax
c0006689:	7f 3d                	jg     c00066c8 <iso_read+0xf6>
c000668b:	e9 52 ff ff ff       	jmp    c00065e2 <iso_read+0x10>
c0006690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006694:	39 d9                	cmp    ecx,ebx
c0006696:	0f 4e d9             	cmovle ebx,ecx
c0006699:	e8 97 fb ff ff       	call   c0006235 <bdread>
c000669e:	85 c0                	test   eax,eax
c00066a0:	0f 88 3c ff ff ff    	js     c00065e2 <iso_read+0x10>
c00066a6:	8b 0c 85 20 60 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9fe0]
c00066ad:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c00066b3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066b7:	25 ff 07 00 00       	and    eax,0x7ff
c00066bc:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066c0:	89 d9                	mov    ecx,ebx
c00066c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066c8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066cc:	01 da                	add    edx,ebx
c00066ce:	01 9d 48 65 02 c0    	add    DWORD PTR [ebp-0x3ffd9ab8],ebx
c00066d4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066d8:	e9 28 ff ff ff       	jmp    c0006605 <iso_read+0x33>
c00066dd:	89 d0                	mov    eax,edx
c00066df:	99                   	cdq    
c00066e0:	83 c4 1c             	add    esp,0x1c
c00066e3:	5b                   	pop    ebx
c00066e4:	5e                   	pop    esi
c00066e5:	5f                   	pop    edi
c00066e6:	5d                   	pop    ebp
c00066e7:	c3                   	ret    

c00066e8 <iso_seek>:
c00066e8:	55                   	push   ebp
c00066e9:	83 c8 ff             	or     eax,0xffffffff
c00066ec:	57                   	push   edi
c00066ed:	89 c2                	mov    edx,eax
c00066ef:	56                   	push   esi
c00066f0:	53                   	push   ebx
c00066f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066fd:	83 fe 0f             	cmp    esi,0xf
c0006700:	7f 65                	jg     c0006767 <iso_seek+0x7f>
c0006702:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006708:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c000670f:	8d 8d 40 65 02 c0    	lea    ecx,[ebp-0x3ffd9ac0]
c0006715:	74 50                	je     c0006767 <iso_seek+0x7f>
c0006717:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c000671e:	75 47                	jne    c0006767 <iso_seek+0x7f>
c0006720:	83 fb 01             	cmp    ebx,0x1
c0006723:	74 0e                	je     c0006733 <iso_seek+0x4b>
c0006725:	83 fb 02             	cmp    ebx,0x2
c0006728:	74 0e                	je     c0006738 <iso_seek+0x50>
c000672a:	85 db                	test   ebx,ebx
c000672c:	75 39                	jne    c0006767 <iso_seek+0x7f>
c000672e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006731:	eb 0d                	jmp    c0006740 <iso_seek+0x58>
c0006733:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006736:	eb 08                	jmp    c0006740 <iso_seek+0x58>
c0006738:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000673b:	01 f8                	add    eax,edi
c000673d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006740:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006746:	8b 88 4c 65 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd9ab4]
c000674c:	05 40 65 02 c0       	add    eax,0xc0026540
c0006751:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006754:	76 03                	jbe    c0006759 <iso_seek+0x71>
c0006756:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006759:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000675f:	8b 82 48 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab8]
c0006765:	31 d2                	xor    edx,edx
c0006767:	5b                   	pop    ebx
c0006768:	5e                   	pop    esi
c0006769:	5f                   	pop    edi
c000676a:	5d                   	pop    ebp
c000676b:	c3                   	ret    

c000676c <iso_tell>:
c000676c:	53                   	push   ebx
c000676d:	83 c8 ff             	or     eax,0xffffffff
c0006770:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006774:	89 c2                	mov    edx,eax
c0006776:	83 f9 0f             	cmp    ecx,0xf
c0006779:	7f 20                	jg     c000679b <iso_tell+0x2f>
c000677b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006781:	83 bb 40 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9ac0],0x0
c0006788:	74 11                	je     c000679b <iso_tell+0x2f>
c000678a:	83 bb d0 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9a30],0x0
c0006791:	75 08                	jne    c000679b <iso_tell+0x2f>
c0006793:	8b 83 48 65 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd9ab8]
c0006799:	31 d2                	xor    edx,edx
c000679b:	5b                   	pop    ebx
c000679c:	c3                   	ret    

c000679d <iso_total>:
c000679d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067a1:	83 c8 ff             	or     eax,0xffffffff
c00067a4:	83 fa 0f             	cmp    edx,0xf
c00067a7:	7f 1e                	jg     c00067c7 <iso_total+0x2a>
c00067a9:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c00067af:	83 ba 40 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9ac0],0x0
c00067b6:	74 0f                	je     c00067c7 <iso_total+0x2a>
c00067b8:	83 ba d0 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9a30],0x0
c00067bf:	75 06                	jne    c00067c7 <iso_total+0x2a>
c00067c1:	8b 82 4c 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab4]
c00067c7:	c3                   	ret    

c00067c8 <fn_postprocess>:
c00067c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067cc:	89 d0                	mov    eax,edx
c00067ce:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067d1:	85 c9                	test   ecx,ecx
c00067d3:	74 08                	je     c00067dd <fn_postprocess+0x15>
c00067d5:	83 f9 3b             	cmp    ecx,0x3b
c00067d8:	74 03                	je     c00067dd <fn_postprocess+0x15>
c00067da:	40                   	inc    eax
c00067db:	eb f1                	jmp    c00067ce <fn_postprocess+0x6>
c00067dd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067e0:	39 d0                	cmp    eax,edx
c00067e2:	76 0a                	jbe    c00067ee <fn_postprocess+0x26>
c00067e4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067e8:	75 04                	jne    c00067ee <fn_postprocess+0x26>
c00067ea:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067ee:	c3                   	ret    

c00067ef <iso_readdir>:
c00067ef:	55                   	push   ebp
c00067f0:	57                   	push   edi
c00067f1:	56                   	push   esi
c00067f2:	53                   	push   ebx
c00067f3:	83 ec 1c             	sub    esp,0x1c
c00067f6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067fa:	83 fb 0f             	cmp    ebx,0xf
c00067fd:	7f 28                	jg     c0006827 <iso_readdir+0x38>
c00067ff:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006805:	83 b8 40 65 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd9ac0],0x0
c000680c:	8d b8 40 65 02 c0    	lea    edi,[eax-0x3ffd9ac0]
c0006812:	74 13                	je     c0006827 <iso_readdir+0x38>
c0006814:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006818:	74 0d                	je     c0006827 <iso_readdir+0x38>
c000681a:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006821:	0f 84 b1 00 00 00    	je     c00068d8 <iso_readdir+0xe9>
c0006827:	83 ec 0c             	sub    esp,0xc
c000682a:	68 e0 0a 02 c0       	push   0xc0020ae0
c000682f:	e8 e8 3b 01 00       	call   c001a41c <iso_kprintf>
c0006834:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006837:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000683d:	e8 f6 3b 01 00       	call   c001a438 <iso_kprintfd>
c0006842:	c7 04 24 e5 0a 02 c0 	mov    DWORD PTR [esp],0xc0020ae5
c0006849:	e8 ce 3b 01 00       	call   c001a41c <iso_kprintf>
c000684e:	58                   	pop    eax
c000684f:	ff b3 40 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9ac0]
c0006855:	e8 de 3b 01 00       	call   c001a438 <iso_kprintfd>
c000685a:	c7 04 24 eb 0a 02 c0 	mov    DWORD PTR [esp],0xc0020aeb
c0006861:	e8 b6 3b 01 00       	call   c001a41c <iso_kprintf>
c0006866:	58                   	pop    eax
c0006867:	ff b3 44 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9abc]
c000686d:	e8 c6 3b 01 00       	call   c001a438 <iso_kprintfd>
c0006872:	c7 04 24 f1 0a 02 c0 	mov    DWORD PTR [esp],0xc0020af1
c0006879:	e8 9e 3b 01 00       	call   c001a41c <iso_kprintf>
c000687e:	58                   	pop    eax
c000687f:	ff b3 d0 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9a30]
c0006885:	e8 ae 3b 01 00       	call   c001a438 <iso_kprintfd>
c000688a:	83 c4 10             	add    esp,0x10
c000688d:	eb 42                	jmp    c00068d1 <iso_readdir+0xe2>
c000688f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006892:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c0006899:	89 d1                	mov    ecx,edx
c000689b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00068a1:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c00068a5:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00068a8:	75 35                	jne    c00068df <iso_readdir+0xf0>
c00068aa:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c00068b0:	81 c2 00 08 00 00    	add    edx,0x800
c00068b6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00068b9:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00068bc:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068bf:	73 1e                	jae    c00068df <iso_readdir+0xf0>
c00068c1:	8b 07                	mov    eax,DWORD PTR [edi]
c00068c3:	c1 ea 0b             	shr    edx,0xb
c00068c6:	01 d0                	add    eax,edx
c00068c8:	e8 5f f9 ff ff       	call   c000622c <biread>
c00068cd:	85 c0                	test   eax,eax
c00068cf:	79 be                	jns    c000688f <iso_readdir+0xa0>
c00068d1:	31 c0                	xor    eax,eax
c00068d3:	e9 6a 01 00 00       	jmp    c0006a42 <iso_readdir+0x253>
c00068d8:	31 f6                	xor    esi,esi
c00068da:	83 c8 ff             	or     eax,0xffffffff
c00068dd:	eb da                	jmp    c00068b9 <iso_readdir+0xca>
c00068df:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068e5:	8b ba 48 65 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd9ab8]
c00068eb:	81 c2 40 65 02 c0    	add    edx,0xc0026540
c00068f1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068f4:	73 db                	jae    c00068d1 <iso_readdir+0xe2>
c00068f6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068fa:	75 34                	jne    c0006930 <iso_readdir+0x141>
c00068fc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006900:	75 2e                	jne    c0006930 <iso_readdir+0x141>
c0006902:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006905:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c000690c:	01 f9                	add    ecx,edi
c000690e:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006911:	89 c8                	mov    eax,ecx
c0006913:	25 ff 07 00 00       	and    eax,0x7ff
c0006918:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c000691d:	01 c8                	add    eax,ecx
c000691f:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006922:	25 ff 07 00 00       	and    eax,0x7ff
c0006927:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000692b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000692e:	74 a1                	je     c00068d1 <iso_readdir+0xe2>
c0006930:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006936:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000693a:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006941:	8d 56 21             	lea    edx,[esi+0x21]
c0006944:	8d af 58 65 02 c0    	lea    ebp,[edi-0x3ffd9aa8]
c000694a:	74 0c                	je     c0006958 <iso_readdir+0x169>
c000694c:	89 e8                	mov    eax,ebp
c000694e:	e8 27 f6 ff ff       	call   c0005f7a <ucs2utfn>
c0006953:	e9 b1 00 00 00       	jmp    c0006a09 <iso_readdir+0x21a>
c0006958:	50                   	push   eax
c0006959:	51                   	push   ecx
c000695a:	52                   	push   edx
c000695b:	55                   	push   ebp
c000695c:	e8 2f 9d ff ff       	call   c0000690 <strncpy>
c0006961:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006965:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006968:	c6 84 07 58 65 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffd9aa8],0x0
c0006970:	e8 53 fe ff ff       	call   c00067c8 <fn_postprocess>
c0006975:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000697f:	89 d1                	mov    ecx,edx
c0006981:	29 d0                	sub    eax,edx
c0006983:	80 e1 01             	and    cl,0x1
c0006986:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c000698a:	74 05                	je     c0006991 <iso_readdir+0x1a2>
c000698c:	83 e8 21             	sub    eax,0x21
c000698f:	eb 04                	jmp    c0006995 <iso_readdir+0x1a6>
c0006991:	42                   	inc    edx
c0006992:	83 e8 22             	sub    eax,0x22
c0006995:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006999:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000699f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00069a3:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c00069a8:	7e 5f                	jle    c0006a09 <iso_readdir+0x21a>
c00069aa:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c00069ad:	48                   	dec    eax
c00069ae:	3c 01                	cmp    al,0x1
c00069b0:	77 57                	ja     c0006a09 <iso_readdir+0x21a>
c00069b2:	51                   	push   ecx
c00069b3:	6a 02                	push   0x2
c00069b5:	68 dd 0a 02 c0       	push   0xc0020add
c00069ba:	52                   	push   edx
c00069bb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00069bf:	e8 4c 9e ff ff       	call   c0000810 <strncmp>
c00069c4:	83 c4 10             	add    esp,0x10
c00069c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069cb:	85 c0                	test   eax,eax
c00069cd:	75 2e                	jne    c00069fd <iso_readdir+0x20e>
c00069cf:	50                   	push   eax
c00069d0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069d4:	83 e8 05             	sub    eax,0x5
c00069d7:	50                   	push   eax
c00069d8:	8d 42 05             	lea    eax,[edx+0x5]
c00069db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00069df:	50                   	push   eax
c00069e0:	55                   	push   ebp
c00069e1:	e8 aa 9c ff ff       	call   c0000690 <strncpy>
c00069e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00069ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00069ee:	83 c4 10             	add    esp,0x10
c00069f1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069f5:	c6 84 08 53 65 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd9aad],0x0
c00069fd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006a01:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006a05:	01 c2                	add    edx,eax
c0006a07:	eb 9a                	jmp    c00069a3 <iso_readdir+0x1b4>
c0006a09:	83 c8 ff             	or     eax,0xffffffff
c0006a0c:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006a10:	89 c2                	mov    edx,eax
c0006a12:	75 0a                	jne    c0006a1e <iso_readdir+0x22f>
c0006a14:	8d 46 0a             	lea    eax,[esi+0xa]
c0006a17:	e8 0e f6 ff ff       	call   c000602a <iso_733>
c0006a1c:	31 d2                	xor    edx,edx
c0006a1e:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a24:	89 83 50 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9ab0],eax
c0006a2a:	89 93 54 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9aac],edx
c0006a30:	81 c3 40 65 02 c0    	add    ebx,0xc0026540
c0006a36:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a39:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a3c:	8d 87 50 65 02 c0    	lea    eax,[edi-0x3ffd9ab0]
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	5b                   	pop    ebx
c0006a46:	5e                   	pop    esi
c0006a47:	5f                   	pop    edi
c0006a48:	5d                   	pop    ebp
c0006a49:	c3                   	ret    

c0006a4a <iso_reset>:
c0006a4a:	83 ec 18             	sub    esp,0x18
c0006a4d:	68 fa 0a 02 c0       	push   0xc0020afa
c0006a52:	e8 c5 39 01 00       	call   c001a41c <iso_kprintf>
c0006a57:	e8 1b f7 ff ff       	call   c0006177 <iso_break_all>
c0006a5c:	e8 14 f7 ff ff       	call   c0006175 <bclear>
c0006a61:	31 c0                	xor    eax,eax
c0006a63:	83 c4 1c             	add    esp,0x1c
c0006a66:	c3                   	ret    

c0006a67 <init_percd>:
c0006a67:	57                   	push   edi
c0006a68:	56                   	push   esi
c0006a69:	53                   	push   ebx
c0006a6a:	bb 01 00 00 00       	mov    ebx,0x1
c0006a6f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006a73:	a2 60 60 02 c0       	mov    ds:0xc0026060,al
c0006a78:	e8 cd ff ff ff       	call   c0006a4a <iso_reset>
c0006a7d:	c7 05 b4 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb4,0x0
c0006a87:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006a8c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a90:	e8 97 f7 ff ff       	call   c000622c <biread>
c0006a95:	85 c0                	test   eax,eax
c0006a97:	89 c6                	mov    esi,eax
c0006a99:	0f 88 ba 00 00 00    	js     c0006b59 <init_percd+0xf2>
c0006a9f:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006aa6:	52                   	push   edx
c0006aa7:	6a 06                	push   0x6
c0006aa9:	68 05 0b 02 c0       	push   0xc0020b05
c0006aae:	83 c0 04             	add    eax,0x4
c0006ab1:	50                   	push   eax
c0006ab2:	e8 c9 98 ff ff       	call   c0000380 <memcmp>
c0006ab7:	83 c4 10             	add    esp,0x10
c0006aba:	85 c0                	test   eax,eax
c0006abc:	74 08                	je     c0006ac6 <init_percd+0x5f>
c0006abe:	43                   	inc    ebx
c0006abf:	83 fb 04             	cmp    ebx,0x4
c0006ac2:	75 c3                	jne    c0006a87 <init_percd+0x20>
c0006ac4:	eb 1a                	jmp    c0006ae0 <init_percd+0x79>
c0006ac6:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006acd:	83 c0 5c             	add    eax,0x5c
c0006ad0:	e8 22 f5 ff ff       	call   c0005ff7 <isjoliet>
c0006ad5:	a3 b4 6e 02 c0       	mov    ds:0xc0026eb4,eax
c0006ada:	85 c0                	test   eax,eax
c0006adc:	74 e0                	je     c0006abe <init_percd+0x57>
c0006ade:	eb 3e                	jmp    c0006b1e <init_percd+0xb7>
c0006ae0:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006ae7:	75 35                	jne    c0006b1e <init_percd+0xb7>
c0006ae9:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006aee:	83 c0 10             	add    eax,0x10
c0006af1:	e8 36 f7 ff ff       	call   c000622c <biread>
c0006af6:	85 c0                	test   eax,eax
c0006af8:	89 c6                	mov    esi,eax
c0006afa:	78 5f                	js     c0006b5b <init_percd+0xf4>
c0006afc:	50                   	push   eax
c0006afd:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006b04:	83 cb ff             	or     ebx,0xffffffff
c0006b07:	6a 06                	push   0x6
c0006b09:	68 0c 0b 02 c0       	push   0xc0020b0c
c0006b0e:	83 c0 04             	add    eax,0x4
c0006b11:	50                   	push   eax
c0006b12:	e8 69 98 ff ff       	call   c0000380 <memcmp>
c0006b17:	83 c4 10             	add    esp,0x10
c0006b1a:	85 c0                	test   eax,eax
c0006b1c:	75 3d                	jne    c0006b5b <init_percd+0xf4>
c0006b1e:	8b 34 b5 80 60 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd9f80]
c0006b25:	bf 80 6e 02 c0       	mov    edi,0xc0026e80
c0006b2a:	b9 22 00 00 00       	mov    ecx,0x22
c0006b2f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b37:	b8 82 6e 02 c0       	mov    eax,0xc0026e82
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	e8 e7 f4 ff ff       	call   c000602a <iso_733>
c0006b43:	a3 a8 6e 02 c0       	mov    ds:0xc0026ea8,eax
c0006b48:	b8 8a 6e 02 c0       	mov    eax,0xc0026e8a
c0006b4d:	e8 d8 f4 ff ff       	call   c000602a <iso_733>
c0006b52:	a3 a4 6e 02 c0       	mov    ds:0xc0026ea4,eax
c0006b57:	eb 02                	jmp    c0006b5b <init_percd+0xf4>
c0006b59:	89 c3                	mov    ebx,eax
c0006b5b:	89 d8                	mov    eax,ebx
c0006b5d:	5b                   	pop    ebx
c0006b5e:	5e                   	pop    esi
c0006b5f:	5f                   	pop    edi
c0006b60:	c3                   	ret    

c0006b61 <iso_ioctl>:
c0006b61:	83 ec 18             	sub    esp,0x18
c0006b64:	68 13 0b 02 c0       	push   0xc0020b13
c0006b69:	e8 ae 38 01 00       	call   c001a41c <iso_kprintf>
c0006b6e:	e8 d7 fe ff ff       	call   c0006a4a <iso_reset>
c0006b73:	31 c0                	xor    eax,eax
c0006b75:	83 c4 1c             	add    esp,0x1c
c0006b78:	c3                   	ret    

c0006b79 <fs_iso9660_init>:
c0006b79:	53                   	push   ebx
c0006b7a:	31 db                	xor    ebx,ebx
c0006b7c:	83 ec 14             	sub    esp,0x14
c0006b7f:	68 1e 0b 02 c0       	push   0xc0020b1e
c0006b84:	e8 93 38 01 00       	call   c001a41c <iso_kprintf>
c0006b89:	83 c4 0c             	add    esp,0xc
c0006b8c:	68 40 09 00 00       	push   0x940
c0006b91:	6a 00                	push   0x0
c0006b93:	68 40 65 02 c0       	push   0xc0026540
c0006b98:	e8 53 99 ff ff       	call   c00004f0 <memset>
c0006b9d:	c7 05 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0026540,0xffffffff
c0006ba7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bae:	e8 20 0f 00 00       	call   c0007ad3 <malloc>
c0006bb3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bba:	a3 b0 6e 02 c0       	mov    ds:0xc0026eb0,eax
c0006bbf:	e8 0f 0f 00 00       	call   c0007ad3 <malloc>
c0006bc4:	83 c4 10             	add    esp,0x10
c0006bc7:	a3 20 65 02 c0       	mov    ds:0xc0026520,eax
c0006bcc:	83 ec 0c             	sub    esp,0xc
c0006bcf:	68 04 08 00 00       	push   0x804
c0006bd4:	e8 fa 0e 00 00       	call   c0007ad3 <malloc>
c0006bd9:	89 04 9d 80 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9f80],eax
c0006be0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bed:	e8 e1 0e 00 00       	call   c0007ad3 <malloc>
c0006bf2:	83 c4 10             	add    esp,0x10
c0006bf5:	89 04 9d 20 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9fe0],eax
c0006bfc:	43                   	inc    ebx
c0006bfd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006c03:	83 fb 10             	cmp    ebx,0x10
c0006c06:	75 c4                	jne    c0006bcc <fs_iso9660_init+0x53>
c0006c08:	83 c4 08             	add    esp,0x8
c0006c0b:	31 c0                	xor    eax,eax
c0006c0d:	5b                   	pop    ebx
c0006c0e:	c3                   	ret    

c0006c0f <fs_iso9660_shutdown>:
c0006c0f:	53                   	push   ebx
c0006c10:	31 db                	xor    ebx,ebx
c0006c12:	83 ec 08             	sub    esp,0x8
c0006c15:	83 ec 0c             	sub    esp,0xc
c0006c18:	ff 34 9d 80 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9f80]
c0006c1f:	e8 bf 0e 00 00       	call   c0007ae3 <free>
c0006c24:	58                   	pop    eax
c0006c25:	ff 34 9d 20 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9fe0]
c0006c2c:	43                   	inc    ebx
c0006c2d:	e8 b1 0e 00 00       	call   c0007ae3 <free>
c0006c32:	83 c4 10             	add    esp,0x10
c0006c35:	83 fb 10             	cmp    ebx,0x10
c0006c38:	75 db                	jne    c0006c15 <fs_iso9660_shutdown+0x6>
c0006c3a:	a1 b0 6e 02 c0       	mov    eax,ds:0xc0026eb0
c0006c3f:	85 c0                	test   eax,eax
c0006c41:	74 0c                	je     c0006c4f <fs_iso9660_shutdown+0x40>
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	50                   	push   eax
c0006c47:	e8 97 0e 00 00       	call   c0007ae3 <free>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c0006c54:	85 c0                	test   eax,eax
c0006c56:	74 0c                	je     c0006c64 <fs_iso9660_shutdown+0x55>
c0006c58:	83 ec 0c             	sub    esp,0xc
c0006c5b:	50                   	push   eax
c0006c5c:	e8 82 0e 00 00       	call   c0007ae3 <free>
c0006c61:	83 c4 10             	add    esp,0x10
c0006c64:	c7 05 20 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026520,0x0
c0006c6e:	31 c0                	xor    eax,eax
c0006c70:	c7 05 b0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb0,0x0
c0006c7a:	83 c4 08             	add    esp,0x8
c0006c7d:	5b                   	pop    ebx
c0006c7e:	c3                   	ret    
c0006c7f:	90                   	nop

c0006c80 <Computer::close(int, int, void*)>:
c0006c80:	57                   	push   edi
c0006c81:	56                   	push   esi
c0006c82:	53                   	push   ebx
c0006c83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c87:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c8f:	e8 6a a1 00 00       	call   c0010dfe <KeExecuteAtexit()>
c0006c94:	83 ec 0c             	sub    esp,0xc
c0006c97:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c9d:	50                   	push   eax
c0006c9e:	e8 8f 5e 00 00       	call   c000cb32 <Device::closeAll()>
c0006ca3:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006ca9:	83 c4 10             	add    esp,0x10
c0006cac:	8b 10                	mov    edx,DWORD PTR [eax]
c0006cae:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006cb2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006cba:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006cbe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006cc2:	5b                   	pop    ebx
c0006cc3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006cc6:	5e                   	pop    esi
c0006cc7:	5f                   	pop    edi
c0006cc8:	ff e0                	jmp    eax

c0006cca <Krnl::firstTask()>:
c0006cca:	53                   	push   ebx
c0006ccb:	83 ec 14             	sub    esp,0x14
c0006cce:	fb                   	sti    
c0006ccf:	68 2f 0b 02 c0       	push   0xc0020b2f
c0006cd4:	e8 04 a2 00 00       	call   c0010edd <KeSetBootMessage(char const*)>
c0006cd9:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006ce0:	e8 ee 0d 00 00       	call   c0007ad3 <malloc>
c0006ce5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cec:	89 c3                	mov    ebx,eax
c0006cee:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0006cf3:	50                   	push   eax
c0006cf4:	68 48 0b 02 c0       	push   0xc0020b48
c0006cf9:	6a 01                	push   0x1
c0006cfb:	53                   	push   ebx
c0006cfc:	e8 33 ef 00 00       	call   c0015c34 <Process::Process(bool, char const*, Process*, char**)>
c0006d01:	83 c4 20             	add    esp,0x20
c0006d04:	68 ff 00 00 00       	push   0xff
c0006d09:	6a 00                	push   0x0
c0006d0b:	68 1d 75 00 c0       	push   0xc000751d
c0006d10:	53                   	push   ebx
c0006d11:	e8 42 f1 00 00       	call   c0015e58 <Process::createThread(void (*)(void*), void*, int)>
c0006d16:	8b 15 f0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6f0
c0006d1c:	6a 7a                	push   0x7a
c0006d1e:	6a 00                	push   0x0
c0006d20:	68 1c 69 01 c0       	push   0xc001691c
c0006d25:	52                   	push   edx
c0006d26:	e8 2d f1 00 00       	call   c0015e58 <Process::createThread(void (*)(void*), void*, int)>
c0006d2b:	83 c4 14             	add    esp,0x14
c0006d2e:	68 44 0c 02 c0       	push   0xc0020c44
c0006d33:	a3 a8 c6 02 c0       	mov    ds:0xc002c6a8,eax
c0006d38:	e8 a0 a1 00 00       	call   c0010edd <KeSetBootMessage(char const*)>
c0006d3d:	c6 05 bd 6e 02 c0 01 	mov    BYTE PTR ds:0xc0026ebd,0x1
c0006d44:	e8 49 aa 00 00       	call   c0011792 <KeInitRand()>
c0006d49:	e8 f1 ff 00 00       	call   c0016d3f <Vm::initialise8086()>
c0006d4e:	e8 1d 4b 00 00       	call   c000b870 <Fs::initVFS()>
c0006d53:	c7 04 24 55 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b55
c0006d5a:	e8 7e a1 00 00       	call   c0010edd <KeSetBootMessage(char const*)>
c0006d5f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006d64:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d6c:	6a 00                	push   0x0
c0006d6e:	6a 00                	push   0x0
c0006d70:	6a 00                	push   0x0
c0006d72:	50                   	push   eax
c0006d73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d76:	83 c4 14             	add    esp,0x14
c0006d79:	68 44 0c 02 c0       	push   0xc0020c44
c0006d7e:	e8 5a a1 00 00       	call   c0010edd <KeSetBootMessage(char const*)>
c0006d83:	e8 0b 47 00 00       	call   c000b493 <KeInitialiseSymlinks()>
c0006d88:	e8 b1 a6 00 00       	call   c001143e <KeLoadSystemEnv()>
c0006d8d:	e8 0e a9 00 00       	call   c00116a0 <KeSetupPowerManager()>
c0006d92:	83 c4 0c             	add    esp,0xc
c0006d95:	6a 3a                	push   0x3a
c0006d97:	68 6f 0b 02 c0       	push   0xc0020b6f
c0006d9c:	68 78 0b 02 c0       	push   0xc0020b78
c0006da1:	e8 90 d0 00 00       	call   c0013e36 <Reg::readIntWithDefault(char*, char*, int)>
c0006da6:	89 04 24             	mov    DWORD PTR [esp],eax
c0006da9:	e8 de 56 00 00       	call   c000c48c <User::loadClockSettings(int)>
c0006dae:	c7 04 24 68 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c68
c0006db5:	e8 23 a1 00 00       	call   c0010edd <KeSetBootMessage(char const*)>
c0006dba:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006dbf:	59                   	pop    ecx
c0006dc0:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006dc6:	53                   	push   ebx
c0006dc7:	e8 64 5d 00 00       	call   c000cb30 <Device::loadDriversForAll()>
c0006dcc:	c7 04 24 80 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b80
c0006dd3:	e8 05 a1 00 00       	call   c0010edd <KeSetBootMessage(char const*)>
c0006dd8:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c0006dde:	58                   	pop    eax
c0006ddf:	5a                   	pop    edx
c0006de0:	6a 01                	push   0x1
c0006de2:	68 91 0b 02 c0       	push   0xc0020b91
c0006de7:	e8 4d e8 00 00       	call   c0015639 <Thr::loadDLL(char const*, bool)>
c0006dec:	59                   	pop    ecx
c0006ded:	5a                   	pop    edx
c0006dee:	53                   	push   ebx
c0006def:	50                   	push   eax
c0006df0:	e8 84 ea 00 00       	call   c0015879 <Thr::executeDLL(unsigned long, void*)>
c0006df5:	83 c4 10             	add    esp,0x10
c0006df8:	83 ec 0c             	sub    esp,0xc
c0006dfb:	6a 02                	push   0x2
c0006dfd:	e8 a2 f4 00 00       	call   c00162a4 <blockTask(TaskState)>
c0006e02:	83 c4 10             	add    esp,0x10
c0006e05:	eb f1                	jmp    c0006df8 <Krnl::firstTask()+0x12e>
c0006e07:	90                   	nop

c0006e08 <Computer::Computer()>:
c0006e08:	83 ec 0c             	sub    esp,0xc
c0006e0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e0f:	83 ec 08             	sub    esp,0x8
c0006e12:	68 ad 0b 02 c0       	push   0xc0020bad
c0006e17:	50                   	push   eax
c0006e18:	e8 8f 5d 00 00       	call   c000cbac <Device::Device(char const*)>
c0006e1d:	83 c4 10             	add    esp,0x10
c0006e20:	ba b4 0c 02 c0       	mov    edx,0xc0020cb4
c0006e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e29:	89 10                	mov    DWORD PTR [eax],edx
c0006e2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e2f:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3d:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e4b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e51:	83 ca 04             	or     edx,0x4
c0006e54:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e64:	0f b6 d0             	movzx  edx,al
c0006e67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6b:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e76:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e7c:	0f b6 d0             	movzx  edx,al
c0006e7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e83:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e8c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e92:	8d 50 01             	lea    edx,[eax+0x1]
c0006e95:	88 d1                	mov    cl,dl
c0006e97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e9b:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006ea1:	0f b6 d0             	movzx  edx,al
c0006ea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ea8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006eac:	83 e1 3f             	and    ecx,0x3f
c0006eaf:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006eb3:	90                   	nop
c0006eb4:	83 c4 0c             	add    esp,0xc
c0006eb7:	c3                   	ret    

c0006eb8 <Computer::setBootMessage(char const*)>:
c0006eb8:	c3                   	ret    
c0006eb9:	90                   	nop

c0006eba <Computer::detectFeatures()>:
c0006eba:	55                   	push   ebp
c0006ebb:	57                   	push   edi
c0006ebc:	56                   	push   esi
c0006ebd:	53                   	push   ebx
c0006ebe:	83 ec 1c             	sub    esp,0x1c
c0006ec1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ec5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ecb:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006ed1:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006ed7:	e8 1d 93 ff ff       	call   c00001f9 <detectCPUID>
c0006edc:	31 d2                	xor    edx,edx
c0006ede:	85 c0                	test   eax,eax
c0006ee0:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ee6:	0f 95 c2             	setne  dl
c0006ee9:	d1 e2                	shl    edx,1
c0006eeb:	83 e0 fd             	and    eax,0xfffffffd
c0006eee:	09 d0                	or     eax,edx
c0006ef0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef6:	a8 02                	test   al,0x2
c0006ef8:	75 51                	jne    c0006f4b <Computer::detectFeatures()+0x91>
c0006efa:	f6 05 d1 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed1,0x4
c0006f01:	74 0f                	je     c0006f12 <Computer::detectFeatures()+0x58>
c0006f03:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f09:	83 e0 fb             	and    eax,0xfffffffb
c0006f0c:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f12:	e8 0f 85 01 00       	call   c001f426 <x87Detect>
c0006f17:	83 e0 01             	and    eax,0x1
c0006f1a:	c1 e0 04             	shl    eax,0x4
c0006f1d:	89 c2                	mov    edx,eax
c0006f1f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f25:	83 e0 ef             	and    eax,0xffffffef
c0006f28:	09 d0                	or     eax,edx
c0006f2a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f30:	a8 10                	test   al,0x10
c0006f32:	88 c2                	mov    dl,al
c0006f34:	0f 85 33 01 00 00    	jne    c000706d <Computer::detectFeatures()+0x1b3>
c0006f3a:	80 e2 80             	and    dl,0x80
c0006f3d:	0f 85 4c 01 00 00    	jne    c000708f <Computer::detectFeatures()+0x1d5>
c0006f43:	83 c4 1c             	add    esp,0x1c
c0006f46:	5b                   	pop    ebx
c0006f47:	5e                   	pop    esi
c0006f48:	5f                   	pop    edi
c0006f49:	5d                   	pop    ebp
c0006f4a:	c3                   	ret    
c0006f4b:	83 ec 0c             	sub    esp,0xc
c0006f4e:	6a 20                	push   0x20
c0006f50:	e8 c1 93 00 00       	call   c0010316 <CPU::cpuidCheckEDX(unsigned int)>
c0006f55:	83 e0 01             	and    eax,0x1
c0006f58:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f5f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f65:	83 e0 f7             	and    eax,0xfffffff7
c0006f68:	09 d0                	or     eax,edx
c0006f6a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f70:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f77:	e8 9a 93 00 00       	call   c0010316 <CPU::cpuidCheckEDX(unsigned int)>
c0006f7c:	89 c2                	mov    edx,eax
c0006f7e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f84:	83 e2 01             	and    edx,0x1
c0006f87:	83 e0 fe             	and    eax,0xfffffffe
c0006f8a:	09 d0                	or     eax,edx
c0006f8c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f92:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f99:	e8 78 93 00 00       	call   c0010316 <CPU::cpuidCheckEDX(unsigned int)>
c0006f9e:	89 c2                	mov    edx,eax
c0006fa0:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006fa6:	c1 e2 07             	shl    edx,0x7
c0006fa9:	83 e0 7f             	and    eax,0x7f
c0006fac:	09 d0                	or     eax,edx
c0006fae:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006fb4:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006fbb:	e8 56 93 00 00       	call   c0010316 <CPU::cpuidCheckEDX(unsigned int)>
c0006fc0:	83 c4 10             	add    esp,0x10
c0006fc3:	83 e0 01             	and    eax,0x1
c0006fc6:	c1 e0 05             	shl    eax,0x5
c0006fc9:	89 c2                	mov    edx,eax
c0006fcb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd1:	83 e0 df             	and    eax,0xffffffdf
c0006fd4:	09 d0                	or     eax,edx
c0006fd6:	f7 05 d0 6e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0026ed0,0x401
c0006fe0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fe6:	0f 84 c9 00 00 00    	je     c00070b5 <Computer::detectFeatures()+0x1fb>
c0006fec:	83 e0 fe             	and    eax,0xfffffffe
c0006fef:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ff5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ffb:	89 c2                	mov    edx,eax
c0006ffd:	83 e2 09             	and    edx,0x9
c0007000:	83 fa 01             	cmp    edx,0x1
c0007003:	75 09                	jne    c000700e <Computer::detectFeatures()+0x154>
c0007005:	83 e0 fe             	and    eax,0xfffffffe
c0007008:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000700e:	83 ec 0c             	sub    esp,0xc
c0007011:	8d 44 24 18          	lea    eax,[esp+0x18]
c0007015:	50                   	push   eax
c0007016:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000701a:	55                   	push   ebp
c000701b:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000701f:	57                   	push   edi
c0007020:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007024:	56                   	push   esi
c0007025:	68 00 00 00 80       	push   0x80000000
c000702a:	e8 63 92 00 00       	call   c0010292 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000702f:	83 c4 20             	add    esp,0x20
c0007032:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007039:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000703d:	0f 86 b7 fe ff ff    	jbe    c0006efa <Computer::detectFeatures()+0x40>
c0007043:	83 ec 0c             	sub    esp,0xc
c0007046:	50                   	push   eax
c0007047:	55                   	push   ebp
c0007048:	57                   	push   edi
c0007049:	56                   	push   esi
c000704a:	68 01 00 00 80       	push   0x80000001
c000704f:	e8 3e 92 00 00       	call   c0010292 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007054:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000705a:	83 c4 20             	add    esp,0x20
c000705d:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007062:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007068:	e9 8d fe ff ff       	jmp    c0006efa <Computer::detectFeatures()+0x40>
c000706d:	e8 6e 83 01 00       	call   c001f3e0 <absolutelyNoChanceInHell>
c0007072:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007078:	83 e2 7f             	and    edx,0x7f
c000707b:	c1 e0 07             	shl    eax,0x7
c000707e:	09 c2                	or     edx,eax
c0007080:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007086:	80 e2 80             	and    dl,0x80
c0007089:	0f 84 b4 fe ff ff    	je     c0006f43 <Computer::detectFeatures()+0x89>
c000708f:	e8 bc 7f 01 00       	call   c001f050 <avxDetect>
c0007094:	83 e0 01             	and    eax,0x1
c0007097:	c1 e0 05             	shl    eax,0x5
c000709a:	89 c2                	mov    edx,eax
c000709c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c00070a2:	83 e0 df             	and    eax,0xffffffdf
c00070a5:	09 d0                	or     eax,edx
c00070a7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00070ad:	83 c4 1c             	add    esp,0x1c
c00070b0:	5b                   	pop    ebx
c00070b1:	5e                   	pop    esi
c00070b2:	5f                   	pop    edi
c00070b3:	5d                   	pop    ebp
c00070b4:	c3                   	ret    
c00070b5:	83 ec 0c             	sub    esp,0xc
c00070b8:	68 00 02 00 00       	push   0x200
c00070bd:	e8 54 92 00 00       	call   c0010316 <CPU::cpuidCheckEDX(unsigned int)>
c00070c2:	83 c4 10             	add    esp,0x10
c00070c5:	89 c2                	mov    edx,eax
c00070c7:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070cd:	83 e2 01             	and    edx,0x1
c00070d0:	83 e0 fe             	and    eax,0xfffffffe
c00070d3:	09 d0                	or     eax,edx
c00070d5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070db:	e9 15 ff ff ff       	jmp    c0006ff5 <Computer::detectFeatures()+0x13b>

c00070e0 <Computer::displayFeatures()>:
c00070e0:	c3                   	ret    
c00070e1:	90                   	nop

c00070e2 <Computer::rdmsr(unsigned int)>:
c00070e2:	83 ec 0c             	sub    esp,0xc
c00070e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070e9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070f0:	74 0a                	je     c00070fc <Computer::rdmsr(unsigned int)+0x1a>
c00070f2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070f6:	0f 32                	rdmsr  
c00070f8:	83 c4 0c             	add    esp,0xc
c00070fb:	c3                   	ret    
c00070fc:	83 ec 0c             	sub    esp,0xc
c00070ff:	68 b6 0b 02 c0       	push   0xc0020bb6
c0007104:	e8 d2 a4 00 00       	call   c00115db <KePanic(char const*)>
c0007109:	83 c4 10             	add    esp,0x10
c000710c:	eb e4                	jmp    c00070f2 <Computer::rdmsr(unsigned int)+0x10>

c000710e <Computer::wrmsr(unsigned int, unsigned long long)>:
c000710e:	57                   	push   edi
c000710f:	56                   	push   esi
c0007110:	83 ec 04             	sub    esp,0x4
c0007113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007117:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000711b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000711f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007126:	74 10                	je     c0007138 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007128:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000712c:	89 f0                	mov    eax,esi
c000712e:	89 fa                	mov    edx,edi
c0007130:	0f 30                	wrmsr  
c0007132:	83 c4 04             	add    esp,0x4
c0007135:	5e                   	pop    esi
c0007136:	5f                   	pop    edi
c0007137:	c3                   	ret    
c0007138:	83 ec 0c             	sub    esp,0xc
c000713b:	68 bc 0b 02 c0       	push   0xc0020bbc
c0007140:	e8 96 a4 00 00       	call   c00115db <KePanic(char const*)>
c0007145:	83 c4 10             	add    esp,0x10
c0007148:	eb de                	jmp    c0007128 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c000714a <Computer::shutdown()>:
c000714a:	83 ec 0c             	sub    esp,0xc
c000714d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007151:	8b 10                	mov    edx,DWORD PTR [eax]
c0007153:	6a 00                	push   0x0
c0007155:	6a 00                	push   0x0
c0007157:	6a 00                	push   0x0
c0007159:	50                   	push   eax
c000715a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000715d:	83 c4 1c             	add    esp,0x1c
c0007160:	c3                   	ret    
c0007161:	90                   	nop

c0007162 <Computer::restart()>:
c0007162:	83 ec 0c             	sub    esp,0xc
c0007165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007169:	8b 10                	mov    edx,DWORD PTR [eax]
c000716b:	6a 00                	push   0x0
c000716d:	6a 00                	push   0x0
c000716f:	6a 01                	push   0x1
c0007171:	50                   	push   eax
c0007172:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007175:	83 c4 1c             	add    esp,0x1c
c0007178:	c3                   	ret    
c0007179:	90                   	nop

c000717a <Computer::sleep()>:
c000717a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000717e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007184:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007188:	e9 5b 8c 00 00       	jmp    c000fde8 <ACPI::sleep()>
c000718d:	90                   	nop

c000718e <Computer::nmiEnabled()>:
c000718e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007192:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007198:	c3                   	ret    
c0007199:	90                   	nop

c000719a <Computer::readCMOS(unsigned char)>:
c000719a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000719e:	31 d2                	xor    edx,edx
c00071a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00071a4:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00071ab:	75 02                	jne    c00071af <Computer::readCMOS(unsigned char)+0x15>
c00071ad:	b2 80                	mov    dl,0x80
c00071af:	09 d0                	or     eax,edx
c00071b1:	e6 70                	out    0x70,al
c00071b3:	e4 71                	in     al,0x71
c00071b5:	c3                   	ret    

c00071b6 <Computer::enableNMI(bool)>:
c00071b6:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c00071ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071be:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071c4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071cc:	eb cc                	jmp    c000719a <Computer::readCMOS(unsigned char)>

c00071ce <Computer::open(int, int, void*)>:
c00071ce:	56                   	push   esi
c00071cf:	53                   	push   ebx
c00071d0:	83 ec 10             	sub    esp,0x10
c00071d3:	f6 05 d0 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed0,0x4
c00071da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071de:	68 c2 0b 02 c0       	push   0xc0020bc2
c00071e3:	0f 94 05 c0 36 02 c0 	sete   BYTE PTR ds:0xc00236c0
c00071ea:	e8 ee 9c 00 00       	call   c0010edd <KeSetBootMessage(char const*)>
c00071ef:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071f6:	e8 d8 08 00 00       	call   c0007ad3 <malloc>
c00071fb:	89 04 24             	mov    DWORD PTR [esp],eax
c00071fe:	89 c6                	mov    esi,eax
c0007200:	e8 57 87 00 00       	call   c000f95c <ACPI::ACPI()>
c0007205:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000720b:	58                   	pop    eax
c000720c:	5a                   	pop    edx
c000720d:	56                   	push   esi
c000720e:	53                   	push   ebx
c000720f:	e8 00 58 00 00       	call   c000ca14 <Device::addChild(Device*)>
c0007214:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007217:	e8 9e fc ff ff       	call   c0006eba <Computer::detectFeatures()>
c000721c:	59                   	pop    ecx
c000721d:	5e                   	pop    esi
c000721e:	6a 01                	push   0x1
c0007220:	53                   	push   ebx
c0007221:	e8 90 ff ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c0007226:	c7 04 24 da 0b 02 c0 	mov    DWORD PTR [esp],0xc0020bda
c000722d:	e8 ab 9c 00 00       	call   c0010edd <KeSetBootMessage(char const*)>
c0007232:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007239:	e8 95 08 00 00       	call   c0007ad3 <malloc>
c000723e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007241:	89 c6                	mov    esi,eax
c0007243:	e8 86 91 00 00       	call   c00103ce <CPU::CPU()>
c0007248:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000724e:	58                   	pop    eax
c000724f:	5a                   	pop    edx
c0007250:	56                   	push   esi
c0007251:	53                   	push   ebx
c0007252:	e8 bd 57 00 00       	call   c000ca14 <Device::addChild(Device*)>
c0007257:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000725d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007261:	8b 10                	mov    edx,DWORD PTR [eax]
c0007263:	51                   	push   ecx
c0007264:	6a 00                	push   0x0
c0007266:	6a 00                	push   0x0
c0007268:	50                   	push   eax
c0007269:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000726c:	83 c4 14             	add    esp,0x14
c000726f:	68 88 0c 02 c0       	push   0xc0020c88
c0007274:	e8 64 9c 00 00       	call   c0010edd <KeSetBootMessage(char const*)>
c0007279:	e8 08 0d 01 00       	call   c0017f86 <HalInitialiseCoprocessor()>
c000727e:	c7 04 24 f4 0b 02 c0 	mov    DWORD PTR [esp],0xc0020bf4
c0007285:	e8 53 9c 00 00       	call   c0010edd <KeSetBootMessage(char const*)>
c000728a:	c7 04 24 ca 6c 00 c0 	mov    DWORD PTR [esp],0xc0006cca
c0007291:	e8 ea ec 00 00       	call   c0015f80 <setupMultitasking(void (*)())>
c0007296:	83 c4 14             	add    esp,0x14
c0007299:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000729e:	5b                   	pop    ebx
c000729f:	5e                   	pop    esi
c00072a0:	c3                   	ret    
c00072a1:	90                   	nop

c00072a2 <Computer::disableNMI()>:
c00072a2:	6a 00                	push   0x0
c00072a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a8:	50                   	push   eax
c00072a9:	e8 08 ff ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c00072ae:	5a                   	pop    edx
c00072af:	59                   	pop    ecx
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop

c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c00072b2:	53                   	push   ebx
c00072b3:	b2 80                	mov    dl,0x80
c00072b5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00072b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072bd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00072c1:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00072c8:	74 02                	je     c00072cc <Computer::writeCMOS(unsigned char, unsigned char)+0x1a>
c00072ca:	31 d2                	xor    edx,edx
c00072cc:	09 d0                	or     eax,edx
c00072ce:	e6 70                	out    0x70,al
c00072d0:	88 c8                	mov    al,cl
c00072d2:	e6 71                	out    0x71,al
c00072d4:	5b                   	pop    ebx
c00072d5:	c3                   	ret    

c00072d6 <Computer::handleNMI()>:
c00072d6:	56                   	push   esi
c00072d7:	53                   	push   ebx
c00072d8:	83 ec 10             	sub    esp,0x10
c00072db:	e4 92                	in     al,0x92
c00072dd:	89 c6                	mov    esi,eax
c00072df:	e4 61                	in     al,0x61
c00072e1:	68 0f 0c 02 c0       	push   0xc0020c0f
c00072e6:	88 c3                	mov    bl,al
c00072e8:	e8 1d 36 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00072ed:	83 c4 10             	add    esp,0x10
c00072f0:	83 e6 10             	and    esi,0x10
c00072f3:	75 10                	jne    c0007305 <Computer::handleNMI()+0x2f>
c00072f5:	f6 c3 40             	test   bl,0x40
c00072f8:	75 20                	jne    c000731a <Computer::handleNMI()+0x44>
c00072fa:	80 e3 80             	and    bl,0x80
c00072fd:	75 30                	jne    c000732f <Computer::handleNMI()+0x59>
c00072ff:	83 c4 04             	add    esp,0x4
c0007302:	5b                   	pop    ebx
c0007303:	5e                   	pop    esi
c0007304:	c3                   	ret    
c0007305:	83 ec 0c             	sub    esp,0xc
c0007308:	68 20 0c 02 c0       	push   0xc0020c20
c000730d:	e8 c9 a2 00 00       	call   c00115db <KePanic(char const*)>
c0007312:	83 c4 10             	add    esp,0x10
c0007315:	f6 c3 40             	test   bl,0x40
c0007318:	74 e0                	je     c00072fa <Computer::handleNMI()+0x24>
c000731a:	83 ec 0c             	sub    esp,0xc
c000731d:	68 2d 0c 02 c0       	push   0xc0020c2d
c0007322:	e8 b4 a2 00 00       	call   c00115db <KePanic(char const*)>
c0007327:	83 c4 10             	add    esp,0x10
c000732a:	80 e3 80             	and    bl,0x80
c000732d:	74 d0                	je     c00072ff <Computer::handleNMI()+0x29>
c000732f:	c7 44 24 10 37 0c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020c37
c0007337:	83 c4 04             	add    esp,0x4
c000733a:	5b                   	pop    ebx
c000733b:	5e                   	pop    esi
c000733c:	e9 9a a2 00 00       	jmp    c00115db <KePanic(char const*)>
c0007341:	90                   	nop

c0007342 <GDTEntry::setBase(unsigned int)>:
c0007342:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007346:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000734a:	89 c1                	mov    ecx,eax
c000734c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007350:	c1 e9 10             	shr    ecx,0x10
c0007353:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007356:	c1 e8 18             	shr    eax,0x18
c0007359:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000735c:	c3                   	ret    
c000735d:	90                   	nop

c000735e <GDTEntry::setLimit(unsigned int)>:
c000735e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007362:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007366:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007369:	66 89 01             	mov    WORD PTR [ecx],ax
c000736c:	c1 e8 10             	shr    eax,0x10
c000736f:	83 e0 0f             	and    eax,0xf
c0007372:	83 e2 f0             	and    edx,0xfffffff0
c0007375:	09 d0                	or     eax,edx
c0007377:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000737a:	c3                   	ret    
c000737b:	90                   	nop

c000737c <GDT::GDT()>:
c000737c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007380:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007386:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000738a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007390:	90                   	nop
c0007391:	c3                   	ret    

c0007392 <GDT::addEntry(GDTEntry)>:
c0007392:	53                   	push   ebx
c0007393:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007397:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000739f:	8b 02                	mov    eax,DWORD PTR [edx]
c00073a1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00073a5:	8d 48 01             	lea    ecx,[eax+0x1]
c00073a8:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00073ac:	c1 e0 03             	shl    eax,0x3
c00073af:	89 0a                	mov    DWORD PTR [edx],ecx
c00073b1:	5b                   	pop    ebx
c00073b2:	c3                   	ret    
c00073b3:	90                   	nop

c00073b4 <GDT::getNumberOfEntries()>:
c00073b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00073ba:	c3                   	ret    
c00073bb:	90                   	nop

c00073bc <GDT::flush()>:
c00073bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073c0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073c2:	83 c0 04             	add    eax,0x4
c00073c5:	a3 c2 6e 02 c0       	mov    ds:0xc0026ec2,eax
c00073ca:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073d1:	66 89 15 c0 6e 02 c0 	mov    WORD PTR ds:0xc0026ec0,dx
c00073d8:	e9 7d 8f ff ff       	jmp    c000035a <loadGDT>
c00073dd:	90                   	nop

c00073de <GDT::setup()>:
c00073de:	57                   	push   edi
c00073df:	56                   	push   esi
c00073e0:	53                   	push   ebx
c00073e1:	83 ec 30             	sub    esp,0x30
c00073e4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073e8:	6a 00                	push   0x0
c00073ea:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073ee:	56                   	push   esi
c00073ef:	e8 4e ff ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c00073f4:	6a 00                	push   0x0
c00073f6:	56                   	push   esi
c00073f7:	e8 62 ff ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c00073fc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007404:	6a 00                	push   0x0
c0007406:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000740a:	56                   	push   esi
c000740b:	e8 32 ff ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007410:	68 ff ff ff 00       	push   0xffffff
c0007415:	56                   	push   esi
c0007416:	e8 43 ff ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c000741b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000741f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007423:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007428:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000742c:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007431:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007435:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007439:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000743d:	89 f8                	mov    eax,edi
c000743f:	89 fa                	mov    edx,edi
c0007441:	80 e4 f7             	and    ah,0xf7
c0007444:	80 ce 60             	or     dh,0x60
c0007447:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000744b:	89 c7                	mov    edi,eax
c000744d:	80 cc 60             	or     ah,0x60
c0007450:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007454:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007458:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000745c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007460:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007464:	83 c4 20             	add    esp,0x20
c0007467:	6a 00                	push   0x0
c0007469:	8d 44 24 24          	lea    eax,[esp+0x24]
c000746d:	50                   	push   eax
c000746e:	e8 cf fe ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007473:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007477:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000747b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000747f:	83 e0 3f             	and    eax,0x3f
c0007482:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007486:	6a 00                	push   0x0
c0007488:	8d 44 24 34          	lea    eax,[esp+0x34]
c000748c:	50                   	push   eax
c000748d:	e8 b0 fe ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007492:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007496:	83 e0 3f             	and    eax,0x3f
c0007499:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000749d:	83 c4 0c             	add    esp,0xc
c00074a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a8:	53                   	push   ebx
c00074a9:	e8 e4 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ae:	83 c4 0c             	add    esp,0xc
c00074b1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b9:	53                   	push   ebx
c00074ba:	e8 d3 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074bf:	83 c4 0c             	add    esp,0xc
c00074c2:	57                   	push   edi
c00074c3:	56                   	push   esi
c00074c4:	53                   	push   ebx
c00074c5:	e8 c8 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ca:	83 c4 0c             	add    esp,0xc
c00074cd:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d5:	53                   	push   ebx
c00074d6:	e8 b7 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074db:	83 c4 0c             	add    esp,0xc
c00074de:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e6:	53                   	push   ebx
c00074e7:	e8 a6 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ec:	83 c4 0c             	add    esp,0xc
c00074ef:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f7:	53                   	push   ebx
c00074f8:	e8 95 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074fd:	83 c4 0c             	add    esp,0xc
c0007500:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007504:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007508:	53                   	push   ebx
c0007509:	e8 84 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c000750e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007511:	e8 a6 fe ff ff       	call   c00073bc <GDT::flush()>
c0007516:	83 c4 40             	add    esp,0x40
c0007519:	5b                   	pop    ebx
c000751a:	5e                   	pop    esi
c000751b:	5f                   	pop    edi
c000751c:	c3                   	ret    

c000751d <idleFunction(void*)>:
c000751d:	83 ec 0c             	sub    esp,0xc
c0007520:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007525:	48                   	dec    eax
c0007526:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000752b:	75 01                	jne    c000752e <idleFunction(void*)+0x11>
c000752d:	fb                   	sti    
c000752e:	e8 1f 07 01 00       	call   c0017c52 <HalSystemIdle()>
c0007533:	e8 aa 84 01 00       	call   c001f9e2 <idleCommon()>
c0007538:	eb f4                	jmp    c000752e <idleFunction(void*)+0x11>
c000753a:	66 90                	xchg   ax,ax

c000753c <IDTEntry::IDTEntry(bool)>:
c000753c:	53                   	push   ebx
c000753d:	83 ec 04             	sub    esp,0x4
c0007540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007544:	88 04 24             	mov    BYTE PTR [esp],al
c0007547:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007555:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007559:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000755d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007560:	83 e2 f0             	and    edx,0xfffffff0
c0007563:	83 ca 0e             	or     edx,0xe
c0007566:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007569:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007570:	83 e2 ef             	and    edx,0xffffffef
c0007573:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007576:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000757a:	85 c0                	test   eax,eax
c000757c:	74 06                	je     c0007584 <IDTEntry::IDTEntry(bool)+0x48>
c000757e:	b2 03                	mov    dl,0x3
c0007580:	eb 06                	jmp    c0007588 <IDTEntry::IDTEntry(bool)+0x4c>
c0007582:	66 90                	xchg   ax,ax
c0007584:	b2 00                	mov    dl,0x0
c0007586:	66 90                	xchg   ax,ax
c0007588:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000758c:	83 e2 03             	and    edx,0x3
c000758f:	89 d3                	mov    ebx,edx
c0007591:	c1 e3 05             	shl    ebx,0x5
c0007594:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007597:	83 e2 9f             	and    edx,0xffffff9f
c000759a:	88 d1                	mov    cl,dl
c000759c:	88 da                	mov    dl,bl
c000759e:	09 ca                	or     edx,ecx
c00075a0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00075a7:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075aa:	83 ca 80             	or     edx,0xffffff80
c00075ad:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075b0:	90                   	nop
c00075b1:	83 c4 04             	add    esp,0x4
c00075b4:	5b                   	pop    ebx
c00075b5:	c3                   	ret    

c00075b6 <IDTEntry::setOffset(unsigned int)>:
c00075b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00075ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075be:	66 89 02             	mov    WORD PTR [edx],ax
c00075c1:	c1 e8 10             	shr    eax,0x10
c00075c4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075c8:	c3                   	ret    
c00075c9:	90                   	nop
c00075ca:	66 90                	xchg   ax,ax

c00075cc <IDT::IDT()>:
c00075cc:	90                   	nop
c00075cd:	c3                   	ret    

c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075d2:	83 c0 30             	add    eax,0x30
c00075d5:	c3                   	ret    

c00075d6 <IDT::addEntry(IDTEntry, int)>:
c00075d6:	53                   	push   ebx
c00075d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075e7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ea:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075ee:	5b                   	pop    ebx
c00075ef:	c3                   	ret    

c00075f0 <IDT::addEntry(int, void (*)(), bool)>:
c00075f0:	53                   	push   ebx
c00075f1:	83 ec 10             	sub    esp,0x10
c00075f4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075f9:	50                   	push   eax
c00075fa:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075fe:	53                   	push   ebx
c00075ff:	e8 38 ff ff ff       	call   c000753c <IDTEntry::IDTEntry(bool)>
c0007604:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007608:	53                   	push   ebx
c0007609:	e8 a8 ff ff ff       	call   c00075b6 <IDTEntry::setOffset(unsigned int)>
c000760e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007612:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007616:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000761a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000761e:	e8 b3 ff ff ff       	call   c00075d6 <IDT::addEntry(IDTEntry, int)>
c0007623:	83 c4 30             	add    esp,0x30
c0007626:	5b                   	pop    ebx
c0007627:	c3                   	ret    

c0007628 <IDT::flush()>:
c0007628:	66 c7 05 c8 6e 02 c0 ff 07 	mov    WORD PTR ds:0xc0026ec8,0x7ff
c0007631:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007635:	a3 ca 6e 02 c0       	mov    ds:0xc0026eca,eax
c000763a:	0f 01 1d c8 6e 02 c0 	lidtd  ds:0xc0026ec8
c0007641:	c3                   	ret    

c0007642 <IDT::setup()>:
c0007642:	57                   	push   edi
c0007643:	56                   	push   esi
c0007644:	53                   	push   ebx
c0007645:	83 ec 10             	sub    esp,0x10
c0007648:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000764c:	6a 00                	push   0x0
c000764e:	68 e0 f0 01 c0       	push   0xc001f0e0
c0007653:	6a 00                	push   0x0
c0007655:	53                   	push   ebx
c0007656:	e8 95 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000765b:	6a 00                	push   0x0
c000765d:	68 f0 f0 01 c0       	push   0xc001f0f0
c0007662:	6a 01                	push   0x1
c0007664:	53                   	push   ebx
c0007665:	e8 86 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000766a:	83 c4 20             	add    esp,0x20
c000766d:	6a 00                	push   0x0
c000766f:	68 fa f0 01 c0       	push   0xc001f0fa
c0007674:	6a 02                	push   0x2
c0007676:	53                   	push   ebx
c0007677:	e8 74 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000767c:	6a 00                	push   0x0
c000767e:	68 04 f1 01 c0       	push   0xc001f104
c0007683:	6a 03                	push   0x3
c0007685:	53                   	push   ebx
c0007686:	e8 65 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000768b:	83 c4 20             	add    esp,0x20
c000768e:	6a 00                	push   0x0
c0007690:	68 0e f1 01 c0       	push   0xc001f10e
c0007695:	6a 04                	push   0x4
c0007697:	53                   	push   ebx
c0007698:	e8 53 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000769d:	6a 00                	push   0x0
c000769f:	68 18 f1 01 c0       	push   0xc001f118
c00076a4:	6a 05                	push   0x5
c00076a6:	53                   	push   ebx
c00076a7:	e8 44 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076ac:	83 c4 20             	add    esp,0x20
c00076af:	6a 00                	push   0x0
c00076b1:	68 22 f1 01 c0       	push   0xc001f122
c00076b6:	6a 06                	push   0x6
c00076b8:	53                   	push   ebx
c00076b9:	e8 32 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076be:	6a 00                	push   0x0
c00076c0:	68 2c f1 01 c0       	push   0xc001f12c
c00076c5:	6a 07                	push   0x7
c00076c7:	53                   	push   ebx
c00076c8:	e8 23 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076cd:	83 c4 20             	add    esp,0x20
c00076d0:	6a 00                	push   0x0
c00076d2:	68 36 f1 01 c0       	push   0xc001f136
c00076d7:	6a 08                	push   0x8
c00076d9:	53                   	push   ebx
c00076da:	e8 11 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076df:	6a 00                	push   0x0
c00076e1:	68 3e f1 01 c0       	push   0xc001f13e
c00076e6:	6a 09                	push   0x9
c00076e8:	53                   	push   ebx
c00076e9:	e8 02 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076ee:	83 c4 20             	add    esp,0x20
c00076f1:	6a 00                	push   0x0
c00076f3:	68 48 f1 01 c0       	push   0xc001f148
c00076f8:	6a 0a                	push   0xa
c00076fa:	53                   	push   ebx
c00076fb:	e8 f0 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007700:	6a 00                	push   0x0
c0007702:	68 50 f1 01 c0       	push   0xc001f150
c0007707:	6a 0b                	push   0xb
c0007709:	53                   	push   ebx
c000770a:	e8 e1 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000770f:	83 c4 20             	add    esp,0x20
c0007712:	6a 00                	push   0x0
c0007714:	68 58 f1 01 c0       	push   0xc001f158
c0007719:	6a 0c                	push   0xc
c000771b:	53                   	push   ebx
c000771c:	e8 cf fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007721:	6a 00                	push   0x0
c0007723:	68 60 f1 01 c0       	push   0xc001f160
c0007728:	6a 0d                	push   0xd
c000772a:	53                   	push   ebx
c000772b:	e8 c0 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007730:	83 c4 20             	add    esp,0x20
c0007733:	6a 00                	push   0x0
c0007735:	68 7a f1 01 c0       	push   0xc001f17a
c000773a:	6a 0e                	push   0xe
c000773c:	53                   	push   ebx
c000773d:	e8 ae fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007742:	6a 00                	push   0x0
c0007744:	68 82 f1 01 c0       	push   0xc001f182
c0007749:	6a 0f                	push   0xf
c000774b:	53                   	push   ebx
c000774c:	e8 9f fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007751:	83 c4 20             	add    esp,0x20
c0007754:	6a 00                	push   0x0
c0007756:	68 8c f1 01 c0       	push   0xc001f18c
c000775b:	6a 10                	push   0x10
c000775d:	53                   	push   ebx
c000775e:	e8 8d fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007763:	6a 00                	push   0x0
c0007765:	68 96 f1 01 c0       	push   0xc001f196
c000776a:	6a 11                	push   0x11
c000776c:	53                   	push   ebx
c000776d:	e8 7e fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007772:	83 c4 20             	add    esp,0x20
c0007775:	6a 00                	push   0x0
c0007777:	68 a0 f1 01 c0       	push   0xc001f1a0
c000777c:	6a 12                	push   0x12
c000777e:	53                   	push   ebx
c000777f:	e8 6c fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007784:	6a 01                	push   0x1
c0007786:	68 3a f2 01 c0       	push   0xc001f23a
c000778b:	6a 60                	push   0x60
c000778d:	53                   	push   ebx
c000778e:	e8 5d fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007793:	83 c4 20             	add    esp,0x20
c0007796:	6a 00                	push   0x0
c0007798:	68 41 f2 01 c0       	push   0xc001f241
c000779d:	6a 20                	push   0x20
c000779f:	53                   	push   ebx
c00077a0:	e8 4b fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077a5:	6a 00                	push   0x0
c00077a7:	68 2c f2 01 c0       	push   0xc001f22c
c00077ac:	6a 21                	push   0x21
c00077ae:	53                   	push   ebx
c00077af:	e8 3c fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077b4:	83 c4 20             	add    esp,0x20
c00077b7:	6a 00                	push   0x0
c00077b9:	68 33 f2 01 c0       	push   0xc001f233
c00077be:	6a 22                	push   0x22
c00077c0:	53                   	push   ebx
c00077c1:	e8 2a fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077c6:	6a 00                	push   0x0
c00077c8:	68 aa f1 01 c0       	push   0xc001f1aa
c00077cd:	6a 23                	push   0x23
c00077cf:	53                   	push   ebx
c00077d0:	e8 1b fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077d5:	83 c4 20             	add    esp,0x20
c00077d8:	6a 00                	push   0x0
c00077da:	68 b4 f1 01 c0       	push   0xc001f1b4
c00077df:	6a 24                	push   0x24
c00077e1:	53                   	push   ebx
c00077e2:	e8 09 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077e7:	6a 00                	push   0x0
c00077e9:	68 be f1 01 c0       	push   0xc001f1be
c00077ee:	6a 25                	push   0x25
c00077f0:	53                   	push   ebx
c00077f1:	e8 fa fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077f6:	83 c4 20             	add    esp,0x20
c00077f9:	6a 00                	push   0x0
c00077fb:	68 c8 f1 01 c0       	push   0xc001f1c8
c0007800:	6a 26                	push   0x26
c0007802:	53                   	push   ebx
c0007803:	e8 e8 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007808:	6a 00                	push   0x0
c000780a:	68 d2 f1 01 c0       	push   0xc001f1d2
c000780f:	6a 27                	push   0x27
c0007811:	53                   	push   ebx
c0007812:	e8 d9 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007817:	83 c4 20             	add    esp,0x20
c000781a:	6a 00                	push   0x0
c000781c:	68 dc f1 01 c0       	push   0xc001f1dc
c0007821:	6a 28                	push   0x28
c0007823:	53                   	push   ebx
c0007824:	e8 c7 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007829:	6a 00                	push   0x0
c000782b:	68 e6 f1 01 c0       	push   0xc001f1e6
c0007830:	6a 29                	push   0x29
c0007832:	53                   	push   ebx
c0007833:	e8 b8 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007838:	83 c4 20             	add    esp,0x20
c000783b:	6a 00                	push   0x0
c000783d:	68 f0 f1 01 c0       	push   0xc001f1f0
c0007842:	6a 2a                	push   0x2a
c0007844:	53                   	push   ebx
c0007845:	e8 a6 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000784a:	6a 00                	push   0x0
c000784c:	68 fa f1 01 c0       	push   0xc001f1fa
c0007851:	6a 2b                	push   0x2b
c0007853:	53                   	push   ebx
c0007854:	e8 97 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007859:	83 c4 20             	add    esp,0x20
c000785c:	6a 00                	push   0x0
c000785e:	68 04 f2 01 c0       	push   0xc001f204
c0007863:	6a 2c                	push   0x2c
c0007865:	53                   	push   ebx
c0007866:	e8 85 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000786b:	6a 00                	push   0x0
c000786d:	68 0e f2 01 c0       	push   0xc001f20e
c0007872:	6a 2d                	push   0x2d
c0007874:	53                   	push   ebx
c0007875:	e8 76 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000787a:	83 c4 20             	add    esp,0x20
c000787d:	6a 00                	push   0x0
c000787f:	68 18 f2 01 c0       	push   0xc001f218
c0007884:	6a 2e                	push   0x2e
c0007886:	53                   	push   ebx
c0007887:	e8 64 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000788c:	6a 00                	push   0x0
c000788e:	68 22 f2 01 c0       	push   0xc001f222
c0007893:	6a 2f                	push   0x2f
c0007895:	53                   	push   ebx
c0007896:	e8 55 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000789b:	83 c4 20             	add    esp,0x20
c000789e:	6a 00                	push   0x0
c00078a0:	68 7c f3 01 c0       	push   0xc001f37c
c00078a5:	6a 30                	push   0x30
c00078a7:	53                   	push   ebx
c00078a8:	e8 43 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ad:	6a 00                	push   0x0
c00078af:	68 86 f3 01 c0       	push   0xc001f386
c00078b4:	6a 31                	push   0x31
c00078b6:	53                   	push   ebx
c00078b7:	e8 34 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078bc:	83 c4 20             	add    esp,0x20
c00078bf:	6a 00                	push   0x0
c00078c1:	68 90 f3 01 c0       	push   0xc001f390
c00078c6:	6a 32                	push   0x32
c00078c8:	53                   	push   ebx
c00078c9:	e8 22 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ce:	6a 00                	push   0x0
c00078d0:	68 9a f3 01 c0       	push   0xc001f39a
c00078d5:	6a 33                	push   0x33
c00078d7:	53                   	push   ebx
c00078d8:	e8 13 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078dd:	83 c4 20             	add    esp,0x20
c00078e0:	6a 00                	push   0x0
c00078e2:	68 a4 f3 01 c0       	push   0xc001f3a4
c00078e7:	6a 34                	push   0x34
c00078e9:	53                   	push   ebx
c00078ea:	e8 01 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ef:	6a 00                	push   0x0
c00078f1:	68 ae f3 01 c0       	push   0xc001f3ae
c00078f6:	6a 35                	push   0x35
c00078f8:	53                   	push   ebx
c00078f9:	e8 f2 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078fe:	83 c4 20             	add    esp,0x20
c0007901:	6a 00                	push   0x0
c0007903:	68 b8 f3 01 c0       	push   0xc001f3b8
c0007908:	6a 36                	push   0x36
c000790a:	53                   	push   ebx
c000790b:	e8 e0 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007910:	6a 00                	push   0x0
c0007912:	68 c2 f3 01 c0       	push   0xc001f3c2
c0007917:	6a 37                	push   0x37
c0007919:	53                   	push   ebx
c000791a:	e8 d1 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000791f:	83 c4 1c             	add    esp,0x1c
c0007922:	6a 03                	push   0x3
c0007924:	6a 02                	push   0x2
c0007926:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c000792c:	e8 d5 24 00 00       	call   c0009e06 <VAS::allocatePages(int, int)>
c0007931:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007938:	89 c6                	mov    esi,eax
c000793a:	e8 94 01 00 00       	call   c0007ad3 <malloc>
c000793f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007945:	89 04 24             	mov    DWORD PTR [esp],eax
c0007948:	89 c7                	mov    edi,eax
c000794a:	e8 dd 15 00 00       	call   c0008f2c <TSS::TSS()>
c000794f:	83 c4 0c             	add    esp,0xc
c0007952:	68 36 f1 01 c0       	push   0xc001f136
c0007957:	56                   	push   esi
c0007958:	57                   	push   edi
c0007959:	e8 12 16 00 00       	call   c0008f70 <TSS::setup(unsigned long, unsigned long)>
c000795e:	89 c6                	mov    esi,eax
c0007960:	58                   	pop    eax
c0007961:	5a                   	pop    edx
c0007962:	6a 00                	push   0x0
c0007964:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007968:	50                   	push   eax
c0007969:	e8 ce fb ff ff       	call   c000753c <IDTEntry::IDTEntry(bool)>
c000796e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007972:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007977:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000797e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007982:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007988:	80 ce 05             	or     dh,0x5
c000798b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000798f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007992:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007996:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007999:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000799c:	e8 87 fc ff ff       	call   c0007628 <IDT::flush()>
c00079a1:	83 c4 20             	add    esp,0x20
c00079a4:	5b                   	pop    ebx
c00079a5:	5e                   	pop    esi
c00079a6:	5f                   	pop    edi
c00079a7:	c3                   	ret    

c00079a8 <sbrk>:
c00079a8:	55                   	push   ebp
c00079a9:	57                   	push   edi
c00079aa:	56                   	push   esi
c00079ab:	53                   	push   ebx
c00079ac:	83 ec 1c             	sub    esp,0x1c
c00079af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00079b3:	85 c0                	test   eax,eax
c00079b5:	74 66                	je     c0007a1d <sbrk+0x75>
c00079b7:	78 6b                	js     c0007a24 <sbrk+0x7c>
c00079b9:	8b 15 b4 36 02 c0    	mov    edx,DWORD PTR ds:0xc00236b4
c00079bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079c3:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c00079c9:	05 ff 0f 00 00       	add    eax,0xfff
c00079ce:	0f 49 e8             	cmovns ebp,eax
c00079d1:	c1 fd 0c             	sar    ebp,0xc
c00079d4:	bb 00 00 00 00       	mov    ebx,0x0
c00079d9:	8b 35 b0 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fb0
c00079df:	8b 3d b4 36 02 c0    	mov    edi,DWORD PTR ds:0xc00236b4
c00079e5:	e8 f8 03 00 00       	call   c0007de2 <Phys::allocatePage()>
c00079ea:	68 01 04 00 00       	push   0x401
c00079ef:	57                   	push   edi
c00079f0:	50                   	push   eax
c00079f1:	56                   	push   esi
c00079f2:	e8 07 23 00 00       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c00079f7:	81 05 b4 36 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00236b4,0x1000
c0007a01:	83 c3 01             	add    ebx,0x1
c0007a04:	83 c4 10             	add    esp,0x10
c0007a07:	39 dd                	cmp    ebp,ebx
c0007a09:	75 ce                	jne    c00079d9 <sbrk+0x31>
c0007a0b:	0f 20 d8             	mov    eax,cr3
c0007a0e:	0f 22 d8             	mov    cr3,eax
c0007a11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a15:	83 c4 1c             	add    esp,0x1c
c0007a18:	5b                   	pop    ebx
c0007a19:	5e                   	pop    esi
c0007a1a:	5f                   	pop    edi
c0007a1b:	5d                   	pop    ebp
c0007a1c:	c3                   	ret    
c0007a1d:	a1 b4 36 02 c0       	mov    eax,ds:0xc00236b4
c0007a22:	eb f1                	jmp    c0007a15 <sbrk+0x6d>
c0007a24:	83 ec 08             	sub    esp,0x8
c0007a27:	50                   	push   eax
c0007a28:	68 d8 0c 02 c0       	push   0xc0020cd8
c0007a2d:	e8 d8 2e 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007a32:	83 c4 10             	add    esp,0x10
c0007a35:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a3a:	eb d9                	jmp    c0007a15 <sbrk+0x6d>

c0007a3c <mmap>:
c0007a3c:	83 ec 18             	sub    esp,0x18
c0007a3f:	68 08 0d 02 c0       	push   0xc0020d08
c0007a44:	e8 92 9b 00 00       	call   c00115db <KePanic(char const*)>
c0007a49:	b8 00 00 00 00       	mov    eax,0x0
c0007a4e:	83 c4 1c             	add    esp,0x1c
c0007a51:	c3                   	ret    

c0007a52 <munmap>:
c0007a52:	83 ec 18             	sub    esp,0x18
c0007a55:	68 0d 0d 02 c0       	push   0xc0020d0d
c0007a5a:	e8 7c 9b 00 00       	call   c00115db <KePanic(char const*)>
c0007a5f:	b8 00 00 00 00       	mov    eax,0x0
c0007a64:	83 c4 1c             	add    esp,0x1c
c0007a67:	c3                   	ret    

c0007a68 <liballoc_lock()>:
c0007a68:	fa                   	cli    
c0007a69:	83 05 c8 c6 02 c0 01 	add    DWORD PTR ds:0xc002c6c8,0x1
c0007a70:	b8 00 00 00 00       	mov    eax,0x0
c0007a75:	c3                   	ret    

c0007a76 <liballoc_unlock()>:
c0007a76:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007a7b:	83 e8 01             	sub    eax,0x1
c0007a7e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007a83:	75 01                	jne    c0007a86 <liballoc_unlock()+0x10>
c0007a85:	fb                   	sti    
c0007a86:	b8 00 00 00 00       	mov    eax,0x0
c0007a8b:	c3                   	ret    

c0007a8c <liballoc_alloc(int)>:
c0007a8c:	83 ec 10             	sub    esp,0x10
c0007a8f:	6a 01                	push   0x1
c0007a91:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a95:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007a9b:	e8 66 23 00 00       	call   c0009e06 <VAS::allocatePages(int, int)>
c0007aa0:	83 c4 1c             	add    esp,0x1c
c0007aa3:	c3                   	ret    

c0007aa4 <liballoc_free(void*, int)>:
c0007aa4:	83 ec 14             	sub    esp,0x14
c0007aa7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007aab:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007ab1:	e8 90 1f 00 00       	call   c0009a46 <VAS::freeAllocatedPages(unsigned long)>
c0007ab6:	b8 00 00 00 00       	mov    eax,0x0
c0007abb:	83 c4 1c             	add    esp,0x1c
c0007abe:	c3                   	ret    

c0007abf <realloc>:
c0007abf:	83 ec 14             	sub    esp,0x14
c0007ac2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aca:	e8 52 9b ff ff       	call   c0001621 <dlrealloc>
c0007acf:	83 c4 1c             	add    esp,0x1c
c0007ad2:	c3                   	ret    

c0007ad3 <malloc>:
c0007ad3:	83 ec 18             	sub    esp,0x18
c0007ad6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ada:	e8 05 96 ff ff       	call   c00010e4 <dlmalloc>
c0007adf:	83 c4 1c             	add    esp,0x1c
c0007ae2:	c3                   	ret    

c0007ae3 <free>:
c0007ae3:	83 ec 18             	sub    esp,0x18
c0007ae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aea:	e8 97 92 ff ff       	call   c0000d86 <dlfree>
c0007aef:	83 c4 1c             	add    esp,0x1c
c0007af2:	c3                   	ret    

c0007af3 <rfree>:
c0007af3:	83 ec 18             	sub    esp,0x18
c0007af6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007afa:	e8 87 92 ff ff       	call   c0000d86 <dlfree>
c0007aff:	83 c4 1c             	add    esp,0x1c
c0007b02:	c3                   	ret    

c0007b03 <calloc>:
c0007b03:	56                   	push   esi
c0007b04:	53                   	push   ebx
c0007b05:	83 ec 10             	sub    esp,0x10
c0007b08:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007b0c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007b11:	53                   	push   ebx
c0007b12:	e8 bc ff ff ff       	call   c0007ad3 <malloc>
c0007b17:	89 c6                	mov    esi,eax
c0007b19:	83 c4 0c             	add    esp,0xc
c0007b1c:	53                   	push   ebx
c0007b1d:	6a 00                	push   0x0
c0007b1f:	50                   	push   eax
c0007b20:	e8 cb 89 ff ff       	call   c00004f0 <memset>
c0007b25:	89 f0                	mov    eax,esi
c0007b27:	83 c4 14             	add    esp,0x14
c0007b2a:	5b                   	pop    ebx
c0007b2b:	5e                   	pop    esi
c0007b2c:	c3                   	ret    

c0007b2d <KeEntryPoint>:
c0007b2d:	57                   	push   edi
c0007b2e:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b33:	56                   	push   esi
c0007b34:	31 f6                	xor    esi,esi
c0007b36:	53                   	push   ebx
c0007b37:	89 fa                	mov    edx,edi
c0007b39:	83 ec 2c             	sub    esp,0x2c
c0007b3c:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b41:	a3 d0 6e 02 c0       	mov    ds:0xc0026ed0,eax
c0007b46:	89 f0                	mov    eax,esi
c0007b48:	ee                   	out    dx,al
c0007b49:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b4e:	b0 80                	mov    al,0x80
c0007b50:	89 da                	mov    edx,ebx
c0007b52:	ee                   	out    dx,al
c0007b53:	b1 03                	mov    cl,0x3
c0007b55:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b5a:	88 c8                	mov    al,cl
c0007b5c:	ee                   	out    dx,al
c0007b5d:	89 f0                	mov    eax,esi
c0007b5f:	89 fa                	mov    edx,edi
c0007b61:	ee                   	out    dx,al
c0007b62:	88 c8                	mov    al,cl
c0007b64:	89 da                	mov    edx,ebx
c0007b66:	ee                   	out    dx,al
c0007b67:	b0 c7                	mov    al,0xc7
c0007b69:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b6e:	ee                   	out    dx,al
c0007b6f:	b0 0b                	mov    al,0xb
c0007b71:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b76:	ee                   	out    dx,al
c0007b77:	68 14 0d 02 c0       	push   0xc0020d14
c0007b7c:	e8 89 2d 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007b81:	e8 db 92 00 00       	call   c0010e61 <KeDisplaySplashScreen()>
c0007b86:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b8b:	05 ff 0f 00 00       	add    eax,0xfff
c0007b90:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b95:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b98:	e8 b3 03 00 00       	call   c0007f50 <Phys::physicalMemorySetup(unsigned int)>
c0007b9d:	e8 27 1c 00 00       	call   c00097c9 <Virt::virtualMemorySetup()>
c0007ba2:	e8 04 92 00 00       	call   c0010dab <KeInitialiseAtexit()>
c0007ba7:	58                   	pop    eax
c0007ba8:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007bac:	53                   	push   ebx
c0007bad:	e8 14 1f 00 00       	call   c0009ac6 <VAS::VAS()>
c0007bb2:	89 1d b0 6f 02 c0    	mov    DWORD PTR ds:0xc0026fb0,ebx
c0007bb8:	e8 bd 7d 01 00       	call   c001f97a <_init>
c0007bbd:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007bc4:	e8 0a ff ff ff       	call   c0007ad3 <malloc>
c0007bc9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bcc:	89 c6                	mov    esi,eax
c0007bce:	e8 35 f2 ff ff       	call   c0006e08 <Computer::Computer()>
c0007bd3:	53                   	push   ebx
c0007bd4:	6a 00                	push   0x0
c0007bd6:	6a 00                	push   0x0
c0007bd8:	56                   	push   esi
c0007bd9:	89 35 b8 6e 02 c0    	mov    DWORD PTR ds:0xc0026eb8,esi
c0007bdf:	e8 ea f5 ff ff       	call   c00071ce <Computer::open(int, int, void*)>
c0007be4:	83 c4 14             	add    esp,0x14
c0007be7:	53                   	push   ebx
c0007be8:	e8 a3 1f 00 00       	call   c0009b90 <VAS::~VAS()>
c0007bed:	83 c4 30             	add    esp,0x30
c0007bf0:	5b                   	pop    ebx
c0007bf1:	5e                   	pop    esi
c0007bf2:	5f                   	pop    edi
c0007bf3:	c3                   	ret    

c0007bf4 <Phys::allocateDMA(unsigned long)>:
c0007bf4:	55                   	push   ebp
c0007bf5:	31 ed                	xor    ebp,ebp
c0007bf7:	57                   	push   edi
c0007bf8:	56                   	push   esi
c0007bf9:	31 f6                	xor    esi,esi
c0007bfb:	53                   	push   ebx
c0007bfc:	31 db                	xor    ebx,ebx
c0007bfe:	83 ec 1c             	sub    esp,0x1c
c0007c01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007c05:	05 ff 0f 00 00       	add    eax,0xfff
c0007c0a:	c1 e8 0c             	shr    eax,0xc
c0007c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c11:	31 c0                	xor    eax,eax
c0007c13:	eb 1b                	jmp    c0007c30 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c15:	8d 78 01             	lea    edi,[eax+0x1]
c0007c18:	85 c0                	test   eax,eax
c0007c1a:	0f 44 eb             	cmove  ebp,ebx
c0007c1d:	0f 44 f3             	cmove  esi,ebx
c0007c20:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0007c24:	74 37                	je     c0007c5d <Phys::allocateDMA(unsigned long)+0x69>
c0007c26:	89 f8                	mov    eax,edi
c0007c28:	83 c3 01             	add    ebx,0x1
c0007c2b:	83 fb 0f             	cmp    ebx,0xf
c0007c2e:	7f 13                	jg     c0007c43 <Phys::allocateDMA(unsigned long)+0x4f>
c0007c30:	80 bb ec 6e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd9114],0x0
c0007c37:	74 dc                	je     c0007c15 <Phys::allocateDMA(unsigned long)+0x21>
c0007c39:	31 c0                	xor    eax,eax
c0007c3b:	83 c3 01             	add    ebx,0x1
c0007c3e:	83 fb 0f             	cmp    ebx,0xf
c0007c41:	7e ed                	jle    c0007c30 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c43:	83 ec 0c             	sub    esp,0xc
c0007c46:	68 2c 0d 02 c0       	push   0xc0020d2c
c0007c4b:	e8 8b 99 00 00       	call   c00115db <KePanic(char const*)>
c0007c50:	83 c4 10             	add    esp,0x10
c0007c53:	31 c0                	xor    eax,eax
c0007c55:	83 c4 1c             	add    esp,0x1c
c0007c58:	5b                   	pop    ebx
c0007c59:	5e                   	pop    esi
c0007c5a:	5f                   	pop    edi
c0007c5b:	5d                   	pop    ebp
c0007c5c:	c3                   	ret    
c0007c5d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007c61:	89 f2                	mov    edx,esi
c0007c63:	c1 fa 04             	sar    edx,0x4
c0007c66:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c6a:	01 f1                	add    ecx,esi
c0007c6c:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c6f:	83 e9 01             	sub    ecx,0x1
c0007c72:	0f 48 ca             	cmovs  ecx,edx
c0007c75:	c1 f9 04             	sar    ecx,0x4
c0007c78:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0007c7c:	74 06                	je     c0007c84 <Phys::allocateDMA(unsigned long)+0x90>
c0007c7e:	89 eb                	mov    ebx,ebp
c0007c80:	31 c0                	xor    eax,eax
c0007c82:	eb b7                	jmp    c0007c3b <Phys::allocateDMA(unsigned long)+0x47>
c0007c84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c88:	85 d2                	test   edx,edx
c0007c8a:	74 17                	je     c0007ca3 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c8c:	8d 96 ec 6e 02 c0    	lea    edx,[esi-0x3ffd9114]
c0007c92:	8d 84 06 ed 6e 02 c0 	lea    eax,[esi+eax*1-0x3ffd9113]
c0007c99:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c9c:	83 c2 01             	add    edx,0x1
c0007c9f:	39 d0                	cmp    eax,edx
c0007ca1:	75 f6                	jne    c0007c99 <Phys::allocateDMA(unsigned long)+0xa5>
c0007ca3:	8b 15 e4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee4
c0007ca9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007cb1:	01 c2                	add    edx,eax
c0007cb3:	89 15 e4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee4,edx
c0007cb9:	85 c9                	test   ecx,ecx
c0007cbb:	74 17                	je     c0007cd4 <Phys::allocateDMA(unsigned long)+0xe0>
c0007cbd:	83 ec 0c             	sub    esp,0xc
c0007cc0:	68 2c 0d 02 c0       	push   0xc0020d2c
c0007cc5:	e8 11 99 00 00       	call   c00115db <KePanic(char const*)>
c0007cca:	83 c4 10             	add    esp,0x10
c0007ccd:	89 f8                	mov    eax,edi
c0007ccf:	e9 54 ff ff ff       	jmp    c0007c28 <Phys::allocateDMA(unsigned long)+0x34>
c0007cd4:	c1 e6 0c             	shl    esi,0xc
c0007cd7:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c0007cdd:	e9 73 ff ff ff       	jmp    c0007c55 <Phys::allocateDMA(unsigned long)+0x61>

c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007ce2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ce6:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cec:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007cf1:	c1 ea 0c             	shr    edx,0xc
c0007cf4:	29 d0                	sub    eax,edx
c0007cf6:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007cfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cff:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007d04:	c1 e8 0c             	shr    eax,0xc
c0007d07:	85 d2                	test   edx,edx
c0007d09:	74 11                	je     c0007d1c <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007d0b:	05 ec 6e 02 c0       	add    eax,0xc0026eec
c0007d10:	01 c2                	add    edx,eax
c0007d12:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007d15:	83 c0 01             	add    eax,0x1
c0007d18:	39 d0                	cmp    eax,edx
c0007d1a:	75 f6                	jne    c0007d12 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007d1c:	c3                   	ret    

c0007d1d <Phys::setPageState(unsigned long, bool)>:
c0007d1d:	57                   	push   edi
c0007d1e:	56                   	push   esi
c0007d1f:	8b 35 b8 36 02 c0    	mov    esi,DWORD PTR ds:0xc00236b8
c0007d25:	53                   	push   ebx
c0007d26:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d2b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d33:	89 ca                	mov    edx,ecx
c0007d35:	83 e1 07             	and    ecx,0x7
c0007d38:	c1 ea 03             	shr    edx,0x3
c0007d3b:	0f b6 c0             	movzx  eax,al
c0007d3e:	d3 c3                	rol    ebx,cl
c0007d40:	01 d6                	add    esi,edx
c0007d42:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d45:	d3 e0                	shl    eax,cl
c0007d47:	21 fb                	and    ebx,edi
c0007d49:	88 1e                	mov    BYTE PTR [esi],bl
c0007d4b:	8b 1d b8 36 02 c0    	mov    ebx,DWORD PTR ds:0xc00236b8
c0007d51:	01 da                	add    edx,ebx
c0007d53:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d55:	09 c8                	or     eax,ecx
c0007d57:	88 02                	mov    BYTE PTR [edx],al
c0007d59:	5b                   	pop    ebx
c0007d5a:	5e                   	pop    esi
c0007d5b:	5f                   	pop    edi
c0007d5c:	c3                   	ret    

c0007d5d <Phys::getPageState(unsigned long)>:
c0007d5d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d61:	8b 15 b8 36 02 c0    	mov    edx,DWORD PTR ds:0xc00236b8
c0007d67:	89 c8                	mov    eax,ecx
c0007d69:	83 e1 07             	and    ecx,0x7
c0007d6c:	c1 e8 03             	shr    eax,0x3
c0007d6f:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d73:	d3 f8                	sar    eax,cl
c0007d75:	83 e0 01             	and    eax,0x1
c0007d78:	c3                   	ret    

c0007d79 <Phys::freePage(unsigned long)>:
c0007d79:	53                   	push   ebx
c0007d7a:	83 ec 08             	sub    esp,0x8
c0007d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d81:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d87:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d8d:	76 41                	jbe    c0007dd0 <Phys::freePage(unsigned long)+0x57>
c0007d8f:	c1 e8 0c             	shr    eax,0xc
c0007d92:	50                   	push   eax
c0007d93:	89 c3                	mov    ebx,eax
c0007d95:	e8 c3 ff ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007d9a:	5a                   	pop    edx
c0007d9b:	84 c0                	test   al,al
c0007d9d:	74 20                	je     c0007dbf <Phys::freePage(unsigned long)+0x46>
c0007d9f:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007da4:	83 ec 08             	sub    esp,0x8
c0007da7:	6a 00                	push   0x0
c0007da9:	53                   	push   ebx
c0007daa:	83 e8 01             	sub    eax,0x1
c0007dad:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007db2:	e8 66 ff ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007db7:	83 c4 10             	add    esp,0x10
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	c3                   	ret    
c0007dbf:	c7 44 24 10 d1 0d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020dd1
c0007dc7:	83 c4 08             	add    esp,0x8
c0007dca:	5b                   	pop    ebx
c0007dcb:	e9 0b 98 00 00       	jmp    c00115db <KePanic(char const*)>
c0007dd0:	68 00 10 00 00       	push   0x1000
c0007dd5:	50                   	push   eax
c0007dd6:	e8 07 ff ff ff       	call   c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)>
c0007ddb:	59                   	pop    ecx
c0007ddc:	5b                   	pop    ebx
c0007ddd:	83 c4 08             	add    esp,0x8
c0007de0:	5b                   	pop    ebx
c0007de1:	c3                   	ret    

c0007de2 <Phys::allocatePage()>:
c0007de2:	56                   	push   esi
c0007de3:	53                   	push   ebx
c0007de4:	83 ec 14             	sub    esp,0x14
c0007de7:	8b 35 d8 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ed8
c0007ded:	89 f3                	mov    ebx,esi
c0007def:	eb 0a                	jmp    c0007dfb <Phys::allocatePage()+0x19>
c0007df1:	89 1d d8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ed8,ebx
c0007df7:	39 de                	cmp    esi,ebx
c0007df9:	74 26                	je     c0007e21 <Phys::allocatePage()+0x3f>
c0007dfb:	53                   	push   ebx
c0007dfc:	e8 5c ff ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007e01:	5a                   	pop    edx
c0007e02:	84 c0                	test   al,al
c0007e04:	74 67                	je     c0007e6d <Phys::allocatePage()+0x8b>
c0007e06:	83 c3 01             	add    ebx,0x1
c0007e09:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007e0f:	75 e0                	jne    c0007df1 <Phys::allocatePage()+0xf>
c0007e11:	c7 05 d8 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026ed8,0x0
c0007e1b:	31 db                	xor    ebx,ebx
c0007e1d:	39 de                	cmp    esi,ebx
c0007e1f:	75 da                	jne    c0007dfb <Phys::allocatePage()+0x19>
c0007e21:	a0 fc 6e 02 c0       	mov    al,ds:0xc0026efc
c0007e26:	83 ec 0c             	sub    esp,0xc
c0007e29:	83 f0 01             	xor    eax,0x1
c0007e2c:	a2 fc 6e 02 c0       	mov    ds:0xc0026efc,al
c0007e31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e36:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e39:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e3f:	50                   	push   eax
c0007e40:	e8 79 27 00 00       	call   c000a5be <VAS::scanForEviction()>
c0007e45:	83 c4 10             	add    esp,0x10
c0007e48:	85 c0                	test   eax,eax
c0007e4a:	75 48                	jne    c0007e94 <Phys::allocatePage()+0xb2>
c0007e4c:	83 ec 0c             	sub    esp,0xc
c0007e4f:	68 54 0d 02 c0       	push   0xc0020d54
c0007e54:	e8 82 97 00 00       	call   c00115db <KePanic(char const*)>
c0007e59:	8b 1d d8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026ed8
c0007e5f:	83 c4 10             	add    esp,0x10
c0007e62:	53                   	push   ebx
c0007e63:	e8 f5 fe ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007e68:	5a                   	pop    edx
c0007e69:	84 c0                	test   al,al
c0007e6b:	75 99                	jne    c0007e06 <Phys::allocatePage()+0x24>
c0007e6d:	6a 01                	push   0x1
c0007e6f:	53                   	push   ebx
c0007e70:	e8 a8 fe ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007e75:	8b 15 e4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee4
c0007e7b:	59                   	pop    ecx
c0007e7c:	a1 d8 6e 02 c0       	mov    eax,ds:0xc0026ed8
c0007e81:	5b                   	pop    ebx
c0007e82:	83 c2 01             	add    edx,0x1
c0007e85:	89 15 e4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee4,edx
c0007e8b:	c1 e0 0c             	shl    eax,0xc
c0007e8e:	83 c4 14             	add    esp,0x14
c0007e91:	5b                   	pop    ebx
c0007e92:	5e                   	pop    esi
c0007e93:	c3                   	ret    
c0007e94:	83 ec 08             	sub    esp,0x8
c0007e97:	89 c2                	mov    edx,eax
c0007e99:	6a 01                	push   0x1
c0007e9b:	c1 ea 0c             	shr    edx,0xc
c0007e9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007ea2:	52                   	push   edx
c0007ea3:	e8 75 fe ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007ea8:	83 c4 10             	add    esp,0x10
c0007eab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007eaf:	eb dd                	jmp    c0007e8e <Phys::allocatePage()+0xac>

c0007eb1 <Phys::allocateContiguousPages(int)>:
c0007eb1:	57                   	push   edi
c0007eb2:	56                   	push   esi
c0007eb3:	53                   	push   ebx
c0007eb4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007eb8:	fa                   	cli    
c0007eb9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007ebe:	31 db                	xor    ebx,ebx
c0007ec0:	83 c0 01             	add    eax,0x1
c0007ec3:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007ec8:	85 db                	test   ebx,ebx
c0007eca:	75 11                	jne    c0007edd <Phys::allocateContiguousPages(int)+0x2c>
c0007ecc:	e8 11 ff ff ff       	call   c0007de2 <Phys::allocatePage()>
c0007ed1:	83 fe 01             	cmp    esi,0x1
c0007ed4:	89 c7                	mov    edi,eax
c0007ed6:	74 21                	je     c0007ef9 <Phys::allocateContiguousPages(int)+0x48>
c0007ed8:	bb 01 00 00 00       	mov    ebx,0x1
c0007edd:	e8 00 ff ff ff       	call   c0007de2 <Phys::allocatePage()>
c0007ee2:	89 da                	mov    edx,ebx
c0007ee4:	c1 e2 0c             	shl    edx,0xc
c0007ee7:	01 fa                	add    edx,edi
c0007ee9:	39 c2                	cmp    edx,eax
c0007eeb:	74 22                	je     c0007f0f <Phys::allocateContiguousPages(int)+0x5e>
c0007eed:	83 fe 01             	cmp    esi,0x1
c0007ef0:	bb 01 00 00 00       	mov    ebx,0x1
c0007ef5:	89 c7                	mov    edi,eax
c0007ef7:	75 e4                	jne    c0007edd <Phys::allocateContiguousPages(int)+0x2c>
c0007ef9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007efe:	83 e8 01             	sub    eax,0x1
c0007f01:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007f06:	75 01                	jne    c0007f09 <Phys::allocateContiguousPages(int)+0x58>
c0007f08:	fb                   	sti    
c0007f09:	5b                   	pop    ebx
c0007f0a:	89 f8                	mov    eax,edi
c0007f0c:	5e                   	pop    esi
c0007f0d:	5f                   	pop    edi
c0007f0e:	c3                   	ret    
c0007f0f:	83 c3 01             	add    ebx,0x1
c0007f12:	39 f3                	cmp    ebx,esi
c0007f14:	75 b2                	jne    c0007ec8 <Phys::allocateContiguousPages(int)+0x17>
c0007f16:	eb e1                	jmp    c0007ef9 <Phys::allocateContiguousPages(int)+0x48>

c0007f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007f18:	56                   	push   esi
c0007f19:	53                   	push   ebx
c0007f1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007f1e:	39 1d dc 6e 02 c0    	cmp    DWORD PTR ds:0xc0026edc,ebx
c0007f24:	73 06                	jae    c0007f2c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f26:	89 1d dc 6e 02 c0    	mov    DWORD PTR ds:0xc0026edc,ebx
c0007f2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f30:	c1 eb 0c             	shr    ebx,0xc
c0007f33:	c1 e8 0c             	shr    eax,0xc
c0007f36:	39 d8                	cmp    eax,ebx
c0007f38:	73 13                	jae    c0007f4d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f3a:	6a 00                	push   0x0
c0007f3c:	50                   	push   eax
c0007f3d:	8d 70 01             	lea    esi,[eax+0x1]
c0007f40:	e8 d8 fd ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007f45:	39 f3                	cmp    ebx,esi
c0007f47:	89 f0                	mov    eax,esi
c0007f49:	5a                   	pop    edx
c0007f4a:	59                   	pop    ecx
c0007f4b:	75 ed                	jne    c0007f3a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f4d:	5b                   	pop    ebx
c0007f4e:	5e                   	pop    esi
c0007f4f:	c3                   	ret    

c0007f50 <Phys::physicalMemorySetup(unsigned int)>:
c0007f50:	55                   	push   ebp
c0007f51:	57                   	push   edi
c0007f52:	56                   	push   esi
c0007f53:	53                   	push   ebx
c0007f54:	31 db                	xor    ebx,ebx
c0007f56:	83 ec 40             	sub    esp,0x40
c0007f59:	6a 10                	push   0x10
c0007f5b:	6a 00                	push   0x0
c0007f5d:	68 ec 6e 02 c0       	push   0xc0026eec
c0007f62:	e8 89 85 ff ff       	call   c00004f0 <memset>
c0007f67:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f6b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f70:	05 00 10 00 00       	add    eax,0x1000
c0007f75:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007f79:	5a                   	pop    edx
c0007f7a:	59                   	pop    ecx
c0007f7b:	50                   	push   eax
c0007f7c:	68 e7 0d 02 c0       	push   0xc0020de7
c0007f81:	e8 84 29 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007f86:	83 c4 10             	add    esp,0x10
c0007f89:	83 ec 08             	sub    esp,0x8
c0007f8c:	6a 01                	push   0x1
c0007f8e:	53                   	push   ebx
c0007f8f:	83 c3 01             	add    ebx,0x1
c0007f92:	e8 86 fd ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007f97:	83 c4 10             	add    esp,0x10
c0007f9a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007fa0:	75 e7                	jne    c0007f89 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007fa2:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007fa9:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007fb0:	c1 e0 08             	shl    eax,0x8
c0007fb3:	09 c2                	or     edx,eax
c0007fb5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0007fb9:	0f 84 43 01 00 00    	je     c0008102 <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c0007fbf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fc7:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fcc:	e9 82 00 00 00       	jmp    c0008053 <Phys::physicalMemorySetup(unsigned int)+0x103>
c0007fd1:	ba 00 00 08 00       	mov    edx,0x80000
c0007fd6:	89 c1                	mov    ecx,eax
c0007fd8:	39 f2                	cmp    edx,esi
c0007fda:	19 f9                	sbb    ecx,edi
c0007fdc:	0f 82 c0 00 00 00    	jb     c00080a2 <Phys::physicalMemorySetup(unsigned int)+0x152>
c0007fe2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007fe6:	89 c5                	mov    ebp,eax
c0007fe8:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007fec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007ff0:	19 cd                	sbb    ebp,ecx
c0007ff2:	0f 83 af 00 00 00    	jae    c00080a7 <Phys::physicalMemorySetup(unsigned int)+0x157>
c0007ff8:	89 d6                	mov    esi,edx
c0007ffa:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007fff:	39 f2                	cmp    edx,esi
c0008001:	89 cf                	mov    edi,ecx
c0008003:	19 c8                	sbb    eax,ecx
c0008005:	73 07                	jae    c000800e <Phys::physicalMemorySetup(unsigned int)+0xbe>
c0008007:	be 00 00 0a 00       	mov    esi,0xa0000
c000800c:	31 ff                	xor    edi,edi
c000800e:	89 f2                	mov    edx,esi
c0008010:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0008015:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000801b:	89 f9                	mov    ecx,edi
c000801d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008021:	83 d1 ff             	adc    ecx,0xffffffff
c0008024:	39 d0                	cmp    eax,edx
c0008026:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000802a:	b8 00 00 00 00       	mov    eax,0x0
c000802f:	19 c8                	sbb    eax,ecx
c0008031:	0f 82 9d 01 00 00    	jb     c00081d4 <Phys::physicalMemorySetup(unsigned int)+0x284>
c0008037:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000803b:	83 c3 18             	add    ebx,0x18
c000803e:	83 c6 01             	add    esi,0x1
c0008041:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008045:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008049:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000804d:	0f 84 bf 00 00 00    	je     c0008112 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008053:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000805b:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000805e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0008062:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008065:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008069:	01 f0                	add    eax,esi
c000806b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000806f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008073:	55                   	push   ebp
c0008074:	11 fa                	adc    edx,edi
c0008076:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000807a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000807e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008082:	50                   	push   eax
c0008083:	56                   	push   esi
c0008084:	68 84 0d 02 c0       	push   0xc0020d84
c0008089:	e8 7c 28 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000808e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008092:	83 c4 10             	add    esp,0x10
c0008095:	09 f8                	or     eax,edi
c0008097:	75 79                	jne    c0008112 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008099:	83 fd 01             	cmp    ebp,0x1
c000809c:	0f 84 2f ff ff ff    	je     c0007fd1 <Phys::physicalMemorySetup(unsigned int)+0x81>
c00080a2:	83 fd 01             	cmp    ebp,0x1
c00080a5:	75 90                	jne    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080a7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00080ab:	31 d2                	xor    edx,edx
c00080ad:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00080b1:	89 c8                	mov    eax,ecx
c00080b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080b7:	19 d1                	sbb    ecx,edx
c00080b9:	0f 82 78 ff ff ff    	jb     c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080bf:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c00080c4:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c00080c8:	b9 00 00 00 00       	mov    ecx,0x0
c00080cd:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c00080d1:	0f 83 60 ff ff ff    	jae    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080d7:	39 c6                	cmp    esi,eax
c00080d9:	19 d7                	sbb    edi,edx
c00080db:	0f 83 ff 00 00 00    	jae    c00081e0 <Phys::physicalMemorySetup(unsigned int)+0x290>
c00080e1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080e5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00080e9:	29 c7                	sub    edi,eax
c00080eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00080ef:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00080f3:	19 d5                	sbb    ebp,edx
c00080f5:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00080f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00080fd:	e9 de 00 00 00       	jmp    c00081e0 <Phys::physicalMemorySetup(unsigned int)+0x290>
c0008102:	83 ec 0c             	sub    esp,0xc
c0008105:	68 ff 0d 02 c0       	push   0xc0020dff
c000810a:	e8 cc 94 00 00       	call   c00115db <KePanic(char const*)>
c000810f:	83 c4 10             	add    esp,0x10
c0008112:	83 ec 08             	sub    esp,0x8
c0008115:	bb 60 00 00 00       	mov    ebx,0x60
c000811a:	6a 00                	push   0x0
c000811c:	6a 06                	push   0x6
c000811e:	e8 fa fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0008123:	58                   	pop    eax
c0008124:	5a                   	pop    edx
c0008125:	6a 00                	push   0x0
c0008127:	6a 07                	push   0x7
c0008129:	e8 ef fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000812e:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0008134:	83 c4 10             	add    esp,0x10
c0008137:	83 c1 02             	add    ecx,0x2
c000813a:	89 0d e8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee8,ecx
c0008140:	83 ec 08             	sub    esp,0x8
c0008143:	6a 00                	push   0x0
c0008145:	53                   	push   ebx
c0008146:	83 c3 01             	add    ebx,0x1
c0008149:	e8 cf fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000814e:	83 c4 10             	add    esp,0x10
c0008151:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008157:	75 e7                	jne    c0008140 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c0008159:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c000815e:	bb 40 01 00 00       	mov    ebx,0x140
c0008163:	83 c0 20             	add    eax,0x20
c0008166:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c000816b:	eb 26                	jmp    c0008193 <Phys::physicalMemorySetup(unsigned int)+0x243>
c000816d:	83 ec 08             	sub    esp,0x8
c0008170:	6a 00                	push   0x0
c0008172:	53                   	push   ebx
c0008173:	83 c3 01             	add    ebx,0x1
c0008176:	e8 a2 fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000817b:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	83 c0 01             	add    eax,0x1
c0008186:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000818c:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c0008191:	74 07                	je     c000819a <Phys::physicalMemorySetup(unsigned int)+0x24a>
c0008193:	3d ff 03 00 00       	cmp    eax,0x3ff
c0008198:	7e d3                	jle    c000816d <Phys::physicalMemorySetup(unsigned int)+0x21d>
c000819a:	bb d0 01 00 00       	mov    ebx,0x1d0
c000819f:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081a4:	7f 26                	jg     c00081cc <Phys::physicalMemorySetup(unsigned int)+0x27c>
c00081a6:	83 ec 08             	sub    esp,0x8
c00081a9:	6a 00                	push   0x0
c00081ab:	53                   	push   ebx
c00081ac:	83 c3 01             	add    ebx,0x1
c00081af:	e8 69 fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c00081b4:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c00081b9:	83 c4 10             	add    esp,0x10
c00081bc:	83 c0 01             	add    eax,0x1
c00081bf:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081c5:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00081ca:	75 d3                	jne    c000819f <Phys::physicalMemorySetup(unsigned int)+0x24f>
c00081cc:	83 c4 3c             	add    esp,0x3c
c00081cf:	5b                   	pop    ebx
c00081d0:	5e                   	pop    esi
c00081d1:	5f                   	pop    edi
c00081d2:	5d                   	pop    ebp
c00081d3:	c3                   	ret    
c00081d4:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00081d8:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c00081e0:	83 ec 04             	sub    esp,0x4
c00081e3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00081e7:	56                   	push   esi
c00081e8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00081ec:	57                   	push   edi
c00081ed:	68 a8 0d 02 c0       	push   0xc0020da8
c00081f2:	e8 13 27 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00081f7:	5d                   	pop    ebp
c00081f8:	58                   	pop    eax
c00081f9:	56                   	push   esi
c00081fa:	57                   	push   edi
c00081fb:	e8 18 fd ff ff       	call   c0007f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0008200:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008204:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008208:	83 c4 0c             	add    esp,0xc
c000820b:	8b 35 e8 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ee8
c0008211:	0f ac d0 0c          	shrd   eax,edx,0xc
c0008215:	01 f0                	add    eax,esi
c0008217:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c000821c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0008223:	52                   	push   edx
c0008224:	50                   	push   eax
c0008225:	68 0d 0e 02 c0       	push   0xc0020e0d
c000822a:	e8 db 26 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000822f:	83 c4 10             	add    esp,0x10
c0008232:	e9 00 fe ff ff       	jmp    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0008237:	90                   	nop

c0008238 <Pipe::isAtty()>:
c0008238:	31 c0                	xor    eax,eax
c000823a:	c3                   	ret    
c000823b:	90                   	nop

c000823c <Pipe::~Pipe()>:
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	ba 6c 0e 02 c0       	mov    edx,0xc0020e6c
c0008244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008248:	89 10                	mov    DWORD PTR [eax],edx
c000824a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000824e:	83 ec 0c             	sub    esp,0xc
c0008251:	50                   	push   eax
c0008252:	e8 35 11 00 00       	call   c000938c <UnixFile::~UnixFile()>
c0008257:	83 c4 10             	add    esp,0x10
c000825a:	90                   	nop
c000825b:	83 c4 0c             	add    esp,0xc
c000825e:	c3                   	ret    
c000825f:	90                   	nop

c0008260 <Pipe::~Pipe()>:
c0008260:	83 ec 0c             	sub    esp,0xc
c0008263:	83 ec 0c             	sub    esp,0xc
c0008266:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000826a:	e8 cd ff ff ff       	call   c000823c <Pipe::~Pipe()>
c000826f:	83 c4 10             	add    esp,0x10
c0008272:	83 ec 08             	sub    esp,0x8
c0008275:	6a 20                	push   0x20
c0008277:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000827b:	e8 8c 25 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0008280:	83 c4 10             	add    esp,0x10
c0008283:	83 c4 0c             	add    esp,0xc
c0008286:	c3                   	ret    
c0008287:	90                   	nop

c0008288 <Pipe::write(unsigned long long, void*, int*)>:
c0008288:	55                   	push   ebp
c0008289:	57                   	push   edi
c000828a:	56                   	push   esi
c000828b:	53                   	push   ebx
c000828c:	83 ec 1c             	sub    esp,0x1c
c000828f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008293:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008297:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000829b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000829e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00082a2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00082a5:	89 04 24             	mov    DWORD PTR [esp],eax
c00082a8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00082ac:	89 d8                	mov    eax,ebx
c00082ae:	89 d6                	mov    esi,edx
c00082b0:	89 d7                	mov    edi,edx
c00082b2:	c1 ff 1f             	sar    edi,0x1f
c00082b5:	03 34 24             	add    esi,DWORD PTR [esp]
c00082b8:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082bc:	c1 f8 1f             	sar    eax,0x1f
c00082bf:	39 f3                	cmp    ebx,esi
c00082c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082c9:	19 f8                	sbb    eax,edi
c00082cb:	b8 01 00 00 00       	mov    eax,0x1
c00082d0:	72 72                	jb     c0008344 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c00082d2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082d5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00082d9:	01 d0                	add    eax,edx
c00082db:	99                   	cdq    
c00082dc:	f7 fb                	idiv   ebx
c00082de:	89 d8                	mov    eax,ebx
c00082e0:	29 d0                	sub    eax,edx
c00082e2:	89 d6                	mov    esi,edx
c00082e4:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082e7:	89 c3                	mov    ebx,eax
c00082e9:	c1 fb 1f             	sar    ebx,0x1f
c00082ec:	39 c2                	cmp    edx,eax
c00082ee:	19 df                	sbb    edi,ebx
c00082f0:	bb 00 00 00 00       	mov    ebx,0x0
c00082f5:	72 04                	jb     c00082fb <Pipe::write(unsigned long long, void*, int*)+0x73>
c00082f7:	89 d3                	mov    ebx,edx
c00082f9:	29 c3                	sub    ebx,eax
c00082fb:	89 d0                	mov    eax,edx
c00082fd:	29 d8                	sub    eax,ebx
c00082ff:	74 0d                	je     c000830e <Pipe::write(unsigned long long, void*, int*)+0x86>
c0008301:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008304:	89 c1                	mov    ecx,eax
c0008306:	01 f7                	add    edi,esi
c0008308:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000830c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000830e:	85 db                	test   ebx,ebx
c0008310:	74 0d                	je     c000831f <Pipe::write(unsigned long long, void*, int*)+0x97>
c0008312:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008316:	89 d9                	mov    ecx,ebx
c0008318:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000831b:	89 c6                	mov    esi,eax
c000831d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000831f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008322:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008327:	75 10                	jne    c0008339 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	68 29 0e 02 c0       	push   0xc0020e29
c0008331:	e8 a5 92 00 00       	call   c00115db <KePanic(char const*)>
c0008336:	83 c4 10             	add    esp,0x10
c0008339:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000833d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008340:	89 08                	mov    DWORD PTR [eax],ecx
c0008342:	31 c0                	xor    eax,eax
c0008344:	83 c4 1c             	add    esp,0x1c
c0008347:	5b                   	pop    ebx
c0008348:	5e                   	pop    esi
c0008349:	5f                   	pop    edi
c000834a:	5d                   	pop    ebp
c000834b:	c3                   	ret    

c000834c <Pipe::read(unsigned long long, void*, int*)>:
c000834c:	55                   	push   ebp
c000834d:	57                   	push   edi
c000834e:	56                   	push   esi
c000834f:	53                   	push   ebx
c0008350:	83 ec 1c             	sub    esp,0x1c
c0008353:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008357:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000835b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000835f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008362:	89 c8                	mov    eax,ecx
c0008364:	99                   	cdq    
c0008365:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008369:	74 24                	je     c000838f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000836b:	39 f9                	cmp    ecx,edi
c000836d:	89 d1                	mov    ecx,edx
c000836f:	19 f1                	sbb    ecx,esi
c0008371:	73 1c                	jae    c000838f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008373:	fa                   	cli    
c0008374:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000837a:	e8 25 dd 00 00       	call   c00160a4 <schedule()>
c000837f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0008384:	48                   	dec    eax
c0008385:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000838a:	75 d3                	jne    c000835f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000838c:	fb                   	sti    
c000838d:	eb d0                	jmp    c000835f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000838f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008393:	39 f8                	cmp    eax,edi
c0008395:	89 d1                	mov    ecx,edx
c0008397:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000839b:	19 f1                	sbb    ecx,esi
c000839d:	73 08                	jae    c00083a7 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c000839f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00083a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083a7:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00083aa:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00083ad:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00083b1:	29 f7                	sub    edi,esi
c00083b3:	89 f8                	mov    eax,edi
c00083b5:	99                   	cdq    
c00083b6:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00083ba:	89 d0                	mov    eax,edx
c00083bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083c0:	19 c2                	sbb    edx,eax
c00083c2:	89 f8                	mov    eax,edi
c00083c4:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c00083c9:	89 ea                	mov    edx,ebp
c00083cb:	29 c2                	sub    edx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	74 0b                	je     c00083dc <Pipe::read(unsigned long long, void*, int*)+0x90>
c00083d1:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083d4:	89 c1                	mov    ecx,eax
c00083d6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083dc:	85 d2                	test   edx,edx
c00083de:	74 0d                	je     c00083ed <Pipe::read(unsigned long long, void*, int*)+0xa1>
c00083e0:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083e4:	89 d1                	mov    ecx,edx
c00083e6:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083e9:	89 c7                	mov    edi,eax
c00083eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083ed:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083f0:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083f3:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083f6:	99                   	cdq    
c00083f7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00083fb:	89 f7                	mov    edi,esi
c00083fd:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0008401:	c1 ff 1f             	sar    edi,0x1f
c0008404:	57                   	push   edi
c0008405:	56                   	push   esi
c0008406:	52                   	push   edx
c0008407:	50                   	push   eax
c0008408:	e8 53 74 01 00       	call   c001f860 <__umoddi3>
c000840d:	83 c4 10             	add    esp,0x10
c0008410:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008415:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008418:	75 10                	jne    c000842a <Pipe::read(unsigned long long, void*, int*)+0xde>
c000841a:	83 ec 0c             	sub    esp,0xc
c000841d:	68 46 0e 02 c0       	push   0xc0020e46
c0008422:	e8 b4 91 00 00       	call   c00115db <KePanic(char const*)>
c0008427:	83 c4 10             	add    esp,0x10
c000842a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000842e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008432:	89 10                	mov    DWORD PTR [eax],edx
c0008434:	83 c4 1c             	add    esp,0x1c
c0008437:	31 c0                	xor    eax,eax
c0008439:	5b                   	pop    ebx
c000843a:	5e                   	pop    esi
c000843b:	5f                   	pop    edi
c000843c:	5d                   	pop    ebp
c000843d:	c3                   	ret    

c000843e <Pipe::Pipe(int)>:
c000843e:	83 ec 0c             	sub    esp,0xc
c0008441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008445:	83 ec 08             	sub    esp,0x8
c0008448:	6a 00                	push   0x0
c000844a:	50                   	push   eax
c000844b:	e8 56 0d 00 00       	call   c00091a6 <UnixFile::UnixFile(int)>
c0008450:	83 c4 10             	add    esp,0x10
c0008453:	ba 6c 0e 02 c0       	mov    edx,0xc0020e6c
c0008458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000845c:	89 10                	mov    DWORD PTR [eax],edx
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008466:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008469:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000846d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008478:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000847f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008483:	83 ec 0c             	sub    esp,0xc
c0008486:	50                   	push   eax
c0008487:	e8 47 f6 ff ff       	call   c0007ad3 <malloc>
c000848c:	83 c4 10             	add    esp,0x10
c000848f:	89 c2                	mov    edx,eax
c0008491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008495:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000849c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00084a0:	90                   	nop
c00084a1:	83 c4 0c             	add    esp,0xc
c00084a4:	c3                   	ret    
c00084a5:	90                   	nop

c00084a6 <VgaText::isAtty()>:
c00084a6:	b0 01                	mov    al,0x1
c00084a8:	c3                   	ret    
c00084a9:	90                   	nop

c00084aa <VgaText::~VgaText()>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	ba b4 0e 02 c0       	mov    edx,0xc0020eb4
c00084b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084b6:	89 10                	mov    DWORD PTR [eax],edx
c00084b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084bc:	83 ec 0c             	sub    esp,0xc
c00084bf:	50                   	push   eax
c00084c0:	e8 c7 0e 00 00       	call   c000938c <UnixFile::~UnixFile()>
c00084c5:	83 c4 10             	add    esp,0x10
c00084c8:	90                   	nop
c00084c9:	83 c4 0c             	add    esp,0xc
c00084cc:	c3                   	ret    
c00084cd:	90                   	nop

c00084ce <VgaText::~VgaText()>:
c00084ce:	83 ec 0c             	sub    esp,0xc
c00084d1:	83 ec 0c             	sub    esp,0xc
c00084d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d8:	e8 cd ff ff ff       	call   c00084aa <VgaText::~VgaText()>
c00084dd:	83 c4 10             	add    esp,0x10
c00084e0:	83 ec 08             	sub    esp,0x8
c00084e3:	68 84 01 00 00       	push   0x184
c00084e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084ec:	e8 1b 23 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c00084f1:	83 c4 10             	add    esp,0x10
c00084f4:	83 c4 0c             	add    esp,0xc
c00084f7:	c3                   	ret    

c00084f8 <VgaText::read(unsigned long long, void*, int*)>:
c00084f8:	83 ec 10             	sub    esp,0x10
c00084fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008503:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008507:	e8 ea 53 00 00       	call   c000d8f6 <readKeyboard(VgaText*, char*, unsigned long)>
c000850c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008510:	89 02                	mov    DWORD PTR [edx],eax
c0008512:	31 c0                	xor    eax,eax
c0008514:	83 c4 1c             	add    esp,0x1c
c0008517:	c3                   	ret    

c0008518 <setTerminalScrollLock(bool)>:
c0008518:	c3                   	ret    

c0008519 <doTerminalCycle()>:
c0008519:	c3                   	ret    

c000851a <addToTerminalCycle(VgaText*)>:
c000851a:	c3                   	ret    

c000851b <scrollTerminalScrollLock(int)>:
c000851b:	c3                   	ret    

c000851c <VgaText::updateTitle()>:
c000851c:	c3                   	ret    
c000851d:	90                   	nop

c000851e <VgaText::load()>:
c000851e:	c3                   	ret    
c000851f:	90                   	nop

c0008520 <VgaText::updateCursor()>:
c0008520:	83 ec 14             	sub    esp,0x14
c0008523:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008527:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000852a:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000852d:	e8 12 09 01 00       	call   c0018e44 <HalConsoleCursorUpdate(int, int)>
c0008532:	83 c4 1c             	add    esp,0x1c
c0008535:	c3                   	ret    

c0008536 <VgaText::doANSI_SGR(int)>:
c0008536:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000853a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000853e:	85 d2                	test   edx,edx
c0008540:	75 0b                	jne    c000854d <VgaText::doANSI_SGR(int)+0x17>
c0008542:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008545:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008548:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000854b:	eb 59                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c000854d:	83 fa 07             	cmp    edx,0x7
c0008550:	75 0b                	jne    c000855d <VgaText::doANSI_SGR(int)+0x27>
c0008552:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008555:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008558:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000855b:	eb 49                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c000855d:	83 fa 1b             	cmp    edx,0x1b
c0008560:	74 e0                	je     c0008542 <VgaText::doANSI_SGR(int)+0xc>
c0008562:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008565:	83 f9 07             	cmp    ecx,0x7
c0008568:	77 09                	ja     c0008573 <VgaText::doANSI_SGR(int)+0x3d>
c000856a:	8b 14 8d e0 36 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc920]
c0008571:	eb 20                	jmp    c0008593 <VgaText::doANSI_SGR(int)+0x5d>
c0008573:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008576:	83 f9 07             	cmp    ecx,0x7
c0008579:	77 09                	ja     c0008584 <VgaText::doANSI_SGR(int)+0x4e>
c000857b:	8b 14 8d e0 36 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc920]
c0008582:	eb 22                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c0008584:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008587:	83 f9 07             	cmp    ecx,0x7
c000858a:	77 0b                	ja     c0008597 <VgaText::doANSI_SGR(int)+0x61>
c000858c:	8b 14 95 98 35 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdca68]
c0008593:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008596:	c3                   	ret    
c0008597:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000859a:	83 f9 07             	cmp    ecx,0x7
c000859d:	77 0a                	ja     c00085a9 <VgaText::doANSI_SGR(int)+0x73>
c000859f:	8b 14 95 70 35 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdca90]
c00085a6:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a9:	c3                   	ret    

c00085aa <VgaText::setDefaultBgColour(VgaColour)>:
c00085aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085b2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00085b5:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085b8:	c3                   	ret    
c00085b9:	90                   	nop

c00085ba <VgaText::setDefaultFgColour(VgaColour)>:
c00085ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085c2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085c8:	c3                   	ret    
c00085c9:	90                   	nop

c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085ca:	53                   	push   ebx
c00085cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085cf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085d7:	51                   	push   ecx
c00085d8:	e8 cd ff ff ff       	call   c00085aa <VgaText::setDefaultBgColour(VgaColour)>
c00085dd:	58                   	pop    eax
c00085de:	5a                   	pop    edx
c00085df:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085e3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085e7:	5b                   	pop    ebx
c00085e8:	eb d0                	jmp    c00085ba <VgaText::setDefaultFgColour(VgaColour)>

c00085ea <VgaText::setTitleTextColour(VgaColour)>:
c00085ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085f2:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085f5:	c3                   	ret    

c00085f6 <VgaText::setTitleColour(VgaColour)>:
c00085f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085fe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008601:	c3                   	ret    

c0008602 <VgaText::setTitle(char*)>:
c0008602:	c3                   	ret    
c0008603:	90                   	nop

c0008604 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008608:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000860d:	83 e0 0f             	and    eax,0xf
c0008610:	c1 e2 04             	shl    edx,0x4
c0008613:	09 d0                	or     eax,edx
c0008615:	c3                   	ret    

c0008616 <VgaText::scrollScreen()>:
c0008616:	55                   	push   ebp
c0008617:	57                   	push   edi
c0008618:	56                   	push   esi
c0008619:	be 01 00 00 00       	mov    esi,0x1
c000861e:	53                   	push   ebx
c000861f:	83 ec 0c             	sub    esp,0xc
c0008622:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008626:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008629:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000862f:	31 ff                	xor    edi,edi
c0008631:	01 e9                	add    ecx,ebp
c0008633:	8a 01                	mov    al,BYTE PTR [ecx]
c0008635:	83 fe 18             	cmp    esi,0x18
c0008638:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c000863e:	75 20                	jne    c0008660 <VgaText::scrollScreen()+0x4a>
c0008640:	f7 c7 01 00 00 00    	test   edi,0x1
c0008646:	74 15                	je     c000865d <VgaText::scrollScreen()+0x47>
c0008648:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000864c:	50                   	push   eax
c000864d:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008651:	50                   	push   eax
c0008652:	e8 ad ff ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c0008657:	5a                   	pop    edx
c0008658:	5a                   	pop    edx
c0008659:	88 01                	mov    BYTE PTR [ecx],al
c000865b:	eb 03                	jmp    c0008660 <VgaText::scrollScreen()+0x4a>
c000865d:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0008660:	47                   	inc    edi
c0008661:	41                   	inc    ecx
c0008662:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008668:	75 c9                	jne    c0008633 <VgaText::scrollScreen()+0x1d>
c000866a:	46                   	inc    esi
c000866b:	83 fe 19             	cmp    esi,0x19
c000866e:	75 b9                	jne    c0008629 <VgaText::scrollScreen()+0x13>
c0008670:	39 1d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebx
c0008676:	75 1f                	jne    c0008697 <VgaText::scrollScreen()+0x81>
c0008678:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000867c:	74 05                	je     c0008683 <VgaText::scrollScreen()+0x6d>
c000867e:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008681:	eb 14                	jmp    c0008697 <VgaText::scrollScreen()+0x81>
c0008683:	50                   	push   eax
c0008684:	50                   	push   eax
c0008685:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008689:	50                   	push   eax
c000868a:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000868e:	50                   	push   eax
c000868f:	e8 44 06 01 00       	call   c0018cd8 <HalConsoleScroll(int, int)>
c0008694:	83 c4 10             	add    esp,0x10
c0008697:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000869b:	83 c4 0c             	add    esp,0xc
c000869e:	5b                   	pop    ebx
c000869f:	5e                   	pop    esi
c00086a0:	5f                   	pop    edi
c00086a1:	5d                   	pop    ebp
c00086a2:	e9 79 fe ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c00086a7:	90                   	nop

c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>:
c00086a8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00086ad:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00086b2:	c1 e0 08             	shl    eax,0x8
c00086b5:	09 d0                	or     eax,edx
c00086b7:	c3                   	ret    

c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086b8:	55                   	push   ebp
c00086b9:	57                   	push   edi
c00086ba:	56                   	push   esi
c00086bb:	53                   	push   ebx
c00086bc:	83 ec 1c             	sub    esp,0x1c
c00086bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086c3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086c7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086cb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086d3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086d7:	0f b6 c3             	movzx  eax,bl
c00086da:	50                   	push   eax
c00086db:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086e0:	50                   	push   eax
c00086e1:	e8 1e ff ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c00086e6:	5a                   	pop    edx
c00086e7:	59                   	pop    ecx
c00086e8:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086ed:	0f b6 c0             	movzx  eax,al
c00086f0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086f4:	50                   	push   eax
c00086f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086f9:	e8 aa ff ff ff       	call   c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>
c00086fe:	5a                   	pop    edx
c00086ff:	6b d7 50             	imul   edx,edi,0x50
c0008702:	59                   	pop    ecx
c0008703:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008706:	01 f2                	add    edx,esi
c0008708:	0f b7 d2             	movzx  edx,dx
c000870b:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000870f:	39 2d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebp
c0008715:	75 28                	jne    c000873f <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008717:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c000871b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000871f:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008723:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008727:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000872b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000872f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008733:	83 c4 1c             	add    esp,0x1c
c0008736:	5b                   	pop    ebx
c0008737:	5e                   	pop    esi
c0008738:	5f                   	pop    edi
c0008739:	5d                   	pop    ebp
c000873a:	e9 a1 06 01 00       	jmp    c0018de0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000873f:	83 c4 1c             	add    esp,0x1c
c0008742:	5b                   	pop    ebx
c0008743:	5e                   	pop    esi
c0008744:	5f                   	pop    edi
c0008745:	5d                   	pop    ebp
c0008746:	c3                   	ret    
c0008747:	90                   	nop

c0008748 <VgaText::getCursorX()>:
c0008748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000874c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000874f:	c3                   	ret    

c0008750 <VgaText::getCursorY()>:
c0008750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008754:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008757:	c3                   	ret    

c0008758 <VgaText::setCursor(int, int)>:
c0008758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000875c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008760:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008763:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008767:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000876a:	e9 b1 fd ff ff       	jmp    c0008520 <VgaText::updateCursor()>

c000876f <setActiveTerminal(VgaText*)>:
c000876f:	53                   	push   ebx
c0008770:	83 ec 08             	sub    esp,0x8
c0008773:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008777:	85 db                	test   ebx,ebx
c0008779:	75 11                	jne    c000878c <setActiveTerminal(VgaText*)+0x1d>
c000877b:	c7 44 24 10 80 0e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020e80
c0008783:	83 c4 08             	add    esp,0x8
c0008786:	5b                   	pop    ebx
c0008787:	e9 4f 8e 00 00       	jmp    c00115db <KePanic(char const*)>
c000878c:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c0008791:	85 c0                	test   eax,eax
c0008793:	74 0c                	je     c00087a1 <setActiveTerminal(VgaText*)+0x32>
c0008795:	83 ec 0c             	sub    esp,0xc
c0008798:	50                   	push   eax
c0008799:	e8 82 fd ff ff       	call   c0008520 <VgaText::updateCursor()>
c000879e:	83 c4 10             	add    esp,0x10
c00087a1:	50                   	push   eax
c00087a2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00087a5:	89 1d 04 6f 02 c0    	mov    DWORD PTR ds:0xc0026f04,ebx
c00087ab:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00087ae:	53                   	push   ebx
c00087af:	e8 a4 ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c00087b4:	83 c4 18             	add    esp,0x18
c00087b7:	5b                   	pop    ebx
c00087b8:	c3                   	ret    
c00087b9:	90                   	nop

c00087ba <VgaText::clearScreen()>:
c00087ba:	57                   	push   edi
c00087bb:	56                   	push   esi
c00087bc:	31 f6                	xor    esi,esi
c00087be:	53                   	push   ebx
c00087bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087c3:	52                   	push   edx
c00087c4:	6a 00                	push   0x0
c00087c6:	6a 00                	push   0x0
c00087c8:	53                   	push   ebx
c00087c9:	e8 8a ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c00087ce:	83 c4 10             	add    esp,0x10
c00087d1:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087d8:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087db:	7e 20                	jle    c00087fd <VgaText::clearScreen()+0x43>
c00087dd:	31 ff                	xor    edi,edi
c00087df:	50                   	push   eax
c00087e0:	50                   	push   eax
c00087e1:	56                   	push   esi
c00087e2:	57                   	push   edi
c00087e3:	47                   	inc    edi
c00087e4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087e7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087ea:	6a 20                	push   0x20
c00087ec:	53                   	push   ebx
c00087ed:	e8 c6 fe ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087f2:	83 c4 20             	add    esp,0x20
c00087f5:	83 ff 50             	cmp    edi,0x50
c00087f8:	75 e5                	jne    c00087df <VgaText::clearScreen()+0x25>
c00087fa:	46                   	inc    esi
c00087fb:	eb db                	jmp    c00087d8 <VgaText::clearScreen()+0x1e>
c00087fd:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008804:	5b                   	pop    ebx
c0008805:	5e                   	pop    esi
c0008806:	5f                   	pop    edi
c0008807:	c3                   	ret    

c0008808 <VgaText::setCursorX(int)>:
c0008808:	83 ec 10             	sub    esp,0x10
c000880b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000880f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008816:	50                   	push   eax
c0008817:	e8 3c ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c000881c:	83 c4 1c             	add    esp,0x1c
c000881f:	c3                   	ret    

c0008820 <VgaText::setCursorY(int)>:
c0008820:	83 ec 10             	sub    esp,0x10
c0008823:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008827:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000882b:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000882e:	50                   	push   eax
c000882f:	e8 24 ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008834:	83 c4 1c             	add    esp,0x1c
c0008837:	c3                   	ret    

c0008838 <VgaText::incrementCursor(bool)>:
c0008838:	56                   	push   esi
c0008839:	53                   	push   ebx
c000883a:	51                   	push   ecx
c000883b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000883f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008843:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008846:	40                   	inc    eax
c0008847:	83 f8 50             	cmp    eax,0x50
c000884a:	74 05                	je     c0008851 <VgaText::incrementCursor(bool)+0x19>
c000884c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000884f:	eb 24                	jmp    c0008875 <VgaText::incrementCursor(bool)+0x3d>
c0008851:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008858:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000885b:	8d 50 01             	lea    edx,[eax+0x1]
c000885e:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008861:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008864:	75 0f                	jne    c0008875 <VgaText::incrementCursor(bool)+0x3d>
c0008866:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008869:	83 ec 0c             	sub    esp,0xc
c000886c:	53                   	push   ebx
c000886d:	e8 a4 fd ff ff       	call   c0008616 <VgaText::scrollScreen()>
c0008872:	83 c4 10             	add    esp,0x10
c0008875:	89 f0                	mov    eax,esi
c0008877:	84 c0                	test   al,al
c0008879:	74 0c                	je     c0008887 <VgaText::incrementCursor(bool)+0x4f>
c000887b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000887f:	5a                   	pop    edx
c0008880:	5b                   	pop    ebx
c0008881:	5e                   	pop    esi
c0008882:	e9 99 fc ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c0008887:	58                   	pop    eax
c0008888:	5b                   	pop    ebx
c0008889:	5e                   	pop    esi
c000888a:	c3                   	ret    
c000888b:	90                   	nop

c000888c <VgaText::decrementCursor(bool)>:
c000888c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008890:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008894:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008897:	85 c0                	test   eax,eax
c0008899:	74 04                	je     c000889f <VgaText::decrementCursor(bool)+0x13>
c000889b:	48                   	dec    eax
c000889c:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000889f:	84 c9                	test   cl,cl
c00088a1:	74 09                	je     c00088ac <VgaText::decrementCursor(bool)+0x20>
c00088a3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00088a7:	e9 74 fc ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c00088ac:	c3                   	ret    
c00088ad:	90                   	nop

c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>:
c00088ae:	53                   	push   ebx
c00088af:	83 ec 08             	sub    esp,0x8
c00088b2:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088bf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088c3:	83 f8 07             	cmp    eax,0x7
c00088c6:	75 21                	jne    c00088e9 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088c8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088d0:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088d8:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088e0:	83 c4 08             	add    esp,0x8
c00088e3:	5b                   	pop    ebx
c00088e4:	e9 4a 3b 00 00       	jmp    c000c433 <Krnl::beep(int, int, bool)>
c00088e9:	83 f8 0d             	cmp    eax,0xd
c00088ec:	75 09                	jne    c00088f7 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088ee:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f5:	eb 2d                	jmp    c0008924 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088f7:	83 f8 0a             	cmp    eax,0xa
c00088fa:	75 31                	jne    c000892d <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088fc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008903:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008906:	8d 50 01             	lea    edx,[eax+0x1]
c0008909:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000890c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000890f:	75 0f                	jne    c0008920 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008911:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008914:	83 ec 0c             	sub    esp,0xc
c0008917:	53                   	push   ebx
c0008918:	e8 f9 fc ff ff       	call   c0008616 <VgaText::scrollScreen()>
c000891d:	83 c4 10             	add    esp,0x10
c0008920:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008924:	83 c4 08             	add    esp,0x8
c0008927:	5b                   	pop    ebx
c0008928:	e9 f3 fb ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c000892d:	83 f8 08             	cmp    eax,0x8
c0008930:	75 25                	jne    c0008957 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0008932:	50                   	push   eax
c0008933:	50                   	push   eax
c0008934:	6a 01                	push   0x1
c0008936:	53                   	push   ebx
c0008937:	e8 50 ff ff ff       	call   c000888c <VgaText::decrementCursor(bool)>
c000893c:	5a                   	pop    edx
c000893d:	59                   	pop    ecx
c000893e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008941:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008944:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008947:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000894a:	6a 20                	push   0x20
c000894c:	53                   	push   ebx
c000894d:	e8 66 fd ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008952:	83 c4 28             	add    esp,0x28
c0008955:	5b                   	pop    ebx
c0008956:	c3                   	ret    
c0008957:	83 ec 08             	sub    esp,0x8
c000895a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000895d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008960:	51                   	push   ecx
c0008961:	52                   	push   edx
c0008962:	50                   	push   eax
c0008963:	53                   	push   ebx
c0008964:	e8 4f fd ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008969:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000896d:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008975:	83 c4 28             	add    esp,0x28
c0008978:	5b                   	pop    ebx
c0008979:	e9 ba fe ff ff       	jmp    c0008838 <VgaText::incrementCursor(bool)>

c000897e <VgaText::putchar(char)>:
c000897e:	57                   	push   edi
c000897f:	56                   	push   esi
c0008980:	53                   	push   ebx
c0008981:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008985:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008989:	0f be c2             	movsx  eax,dl
c000898c:	83 f8 5b             	cmp    eax,0x5b
c000898f:	75 18                	jne    c00089a9 <VgaText::putchar(char)+0x2b>
c0008991:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008995:	74 20                	je     c00089b7 <VgaText::putchar(char)+0x39>
c0008997:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000899d:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00089a4:	e9 b8 00 00 00       	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c00089a9:	83 f8 1b             	cmp    eax,0x1b
c00089ac:	75 09                	jne    c00089b7 <VgaText::putchar(char)+0x39>
c00089ae:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089b2:	e9 aa 00 00 00       	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c00089b7:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00089bb:	89 f9                	mov    ecx,edi
c00089bd:	84 c9                	test   cl,cl
c00089bf:	0f 84 8c 00 00 00    	je     c0008a51 <VgaText::putchar(char)+0xd3>
c00089c5:	8d 4a c0             	lea    ecx,[edx-0x40]
c00089c8:	80 f9 3e             	cmp    cl,0x3e
c00089cb:	77 70                	ja     c0008a3d <VgaText::putchar(char)+0xbf>
c00089cd:	83 f8 6d             	cmp    eax,0x6d
c00089d0:	75 3f                	jne    c0008a11 <VgaText::putchar(char)+0x93>
c00089d2:	31 f6                	xor    esi,esi
c00089d4:	31 d2                	xor    edx,edx
c00089d6:	31 c0                	xor    eax,eax
c00089d8:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089db:	7e 25                	jle    c0008a02 <VgaText::putchar(char)+0x84>
c00089dd:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089e2:	83 fa 3b             	cmp    edx,0x3b
c00089e5:	75 0f                	jne    c00089f6 <VgaText::putchar(char)+0x78>
c00089e7:	50                   	push   eax
c00089e8:	53                   	push   ebx
c00089e9:	e8 48 fb ff ff       	call   c0008536 <VgaText::doANSI_SGR(int)>
c00089ee:	31 d2                	xor    edx,edx
c00089f0:	59                   	pop    ecx
c00089f1:	58                   	pop    eax
c00089f2:	31 c0                	xor    eax,eax
c00089f4:	eb 09                	jmp    c00089ff <VgaText::putchar(char)+0x81>
c00089f6:	6b c0 0a             	imul   eax,eax,0xa
c00089f9:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089fd:	89 fa                	mov    edx,edi
c00089ff:	46                   	inc    esi
c0008a00:	eb d6                	jmp    c00089d8 <VgaText::putchar(char)+0x5a>
c0008a02:	84 d2                	test   dl,dl
c0008a04:	74 2f                	je     c0008a35 <VgaText::putchar(char)+0xb7>
c0008a06:	50                   	push   eax
c0008a07:	53                   	push   ebx
c0008a08:	e8 29 fb ff ff       	call   c0008536 <VgaText::doANSI_SGR(int)>
c0008a0d:	58                   	pop    eax
c0008a0e:	5a                   	pop    edx
c0008a0f:	eb 24                	jmp    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a11:	83 f8 4a             	cmp    eax,0x4a
c0008a14:	75 1f                	jne    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a16:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a1a:	75 19                	jne    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a1c:	83 ec 0c             	sub    esp,0xc
c0008a1f:	53                   	push   ebx
c0008a20:	e8 95 fd ff ff       	call   c00087ba <VgaText::clearScreen()>
c0008a25:	83 c4 0c             	add    esp,0xc
c0008a28:	6a 00                	push   0x0
c0008a2a:	6a 00                	push   0x0
c0008a2c:	53                   	push   ebx
c0008a2d:	e8 26 fd ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008a32:	83 c4 10             	add    esp,0x10
c0008a35:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a3b:	eb 24                	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c0008a3d:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a40:	83 f8 0e             	cmp    eax,0xe
c0008a43:	7f 1c                	jg     c0008a61 <VgaText::putchar(char)+0xe3>
c0008a45:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a48:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a4b:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0008a4f:	eb 10                	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c0008a51:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a54:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a57:	50                   	push   eax
c0008a58:	53                   	push   ebx
c0008a59:	e8 50 fe ff ff       	call   c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a5e:	83 c4 10             	add    esp,0x10
c0008a61:	5b                   	pop    ebx
c0008a62:	5e                   	pop    esi
c0008a63:	5f                   	pop    edi
c0008a64:	c3                   	ret    
c0008a65:	90                   	nop

c0008a66 <VgaText::putx(unsigned int)>:
c0008a66:	57                   	push   edi
c0008a67:	b9 11 00 00 00       	mov    ecx,0x11
c0008a6c:	56                   	push   esi
c0008a6d:	be 8e 0e 02 c0       	mov    esi,0xc0020e8e
c0008a72:	53                   	push   ebx
c0008a73:	83 ec 20             	sub    esp,0x20
c0008a76:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a7a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a7e:	fc                   	cld    
c0008a7f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a81:	be 08 00 00 00       	mov    esi,0x8
c0008a86:	50                   	push   eax
c0008a87:	50                   	push   eax
c0008a88:	89 d8                	mov    eax,ebx
c0008a8a:	c1 e8 1c             	shr    eax,0x1c
c0008a8d:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a92:	c1 e3 04             	shl    ebx,0x4
c0008a95:	50                   	push   eax
c0008a96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a9a:	e8 df fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008a9f:	83 c4 10             	add    esp,0x10
c0008aa2:	4e                   	dec    esi
c0008aa3:	75 e1                	jne    c0008a86 <VgaText::putx(unsigned int)+0x20>
c0008aa5:	83 c4 20             	add    esp,0x20
c0008aa8:	5b                   	pop    ebx
c0008aa9:	5e                   	pop    esi
c0008aaa:	5f                   	pop    edi
c0008aab:	c3                   	ret    

c0008aac <VgaText::puts(char const*)>:
c0008aac:	53                   	push   ebx
c0008aad:	83 ec 08             	sub    esp,0x8
c0008ab0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008ab4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ab7:	85 c0                	test   eax,eax
c0008ab9:	74 12                	je     c0008acd <VgaText::puts(char const*)+0x21>
c0008abb:	51                   	push   ecx
c0008abc:	43                   	inc    ebx
c0008abd:	51                   	push   ecx
c0008abe:	50                   	push   eax
c0008abf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ac3:	e8 b6 fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008ac8:	83 c4 10             	add    esp,0x10
c0008acb:	eb e7                	jmp    c0008ab4 <VgaText::puts(char const*)+0x8>
c0008acd:	83 c4 08             	add    esp,0x8
c0008ad0:	5b                   	pop    ebx
c0008ad1:	c3                   	ret    

c0008ad2 <VgaText::write(unsigned long long, void*, int*)>:
c0008ad2:	55                   	push   ebp
c0008ad3:	57                   	push   edi
c0008ad4:	56                   	push   esi
c0008ad5:	53                   	push   ebx
c0008ad6:	83 ec 0c             	sub    esp,0xc
c0008ad9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008add:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008ae1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008ae5:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008aec:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008aef:	39 eb                	cmp    ebx,ebp
c0008af1:	74 13                	je     c0008b06 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008af3:	50                   	push   eax
c0008af4:	43                   	inc    ebx
c0008af5:	50                   	push   eax
c0008af6:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008afa:	50                   	push   eax
c0008afb:	56                   	push   esi
c0008afc:	e8 7d fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008b01:	83 c4 10             	add    esp,0x10
c0008b04:	eb e9                	jmp    c0008aef <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b06:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b11:	89 38                	mov    DWORD PTR [eax],edi
c0008b13:	83 c4 0c             	add    esp,0xc
c0008b16:	31 c0                	xor    eax,eax
c0008b18:	5b                   	pop    ebx
c0008b19:	5e                   	pop    esi
c0008b1a:	5f                   	pop    edi
c0008b1b:	5d                   	pop    ebp
c0008b1c:	c3                   	ret    
c0008b1d:	90                   	nop

c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b1e:	55                   	push   ebp
c0008b1f:	57                   	push   edi
c0008b20:	56                   	push   esi
c0008b21:	53                   	push   ebx
c0008b22:	83 ec 0c             	sub    esp,0xc
c0008b25:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0008b29:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b2e:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c0008b35:	50                   	push   eax
c0008b36:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b3b:	50                   	push   eax
c0008b3c:	e8 c3 fa ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c0008b41:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008b45:	5a                   	pop    edx
c0008b46:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008b49:	59                   	pop    ecx
c0008b4a:	0f b6 f8             	movzx  edi,al
c0008b4d:	0f b7 db             	movzx  ebx,bx
c0008b50:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b54:	01 db                	add    ebx,ebx
c0008b56:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008b59:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008b5c:	85 c0                	test   eax,eax
c0008b5e:	0f 84 ef 00 00 00    	je     c0008c53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b64:	83 f8 0d             	cmp    eax,0xd
c0008b67:	75 0c                	jne    c0008b75 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b69:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b70:	e9 d8 00 00 00       	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b75:	83 f8 0a             	cmp    eax,0xa
c0008b78:	75 44                	jne    c0008bbe <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b7a:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b81:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0008b84:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b87:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c0008b8a:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0008b8d:	75 0f                	jne    c0008b9e <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b8f:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0008b92:	83 ec 0c             	sub    esp,0xc
c0008b95:	55                   	push   ebp
c0008b96:	e8 7b fa ff ff       	call   c0008616 <VgaText::scrollScreen()>
c0008b9b:	83 c4 10             	add    esp,0x10
c0008b9e:	83 ec 0c             	sub    esp,0xc
c0008ba1:	55                   	push   ebp
c0008ba2:	e8 79 f9 ff ff       	call   c0008520 <VgaText::updateCursor()>
c0008ba7:	83 c4 10             	add    esp,0x10
c0008baa:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bae:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bb1:	0f b7 db             	movzx  ebx,bx
c0008bb4:	01 db                	add    ebx,ebx
c0008bb6:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bb9:	e9 8f 00 00 00       	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bbe:	83 f8 08             	cmp    eax,0x8
c0008bc1:	75 34                	jne    c0008bf7 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bc3:	51                   	push   ecx
c0008bc4:	51                   	push   ecx
c0008bc5:	6a 01                	push   0x1
c0008bc7:	55                   	push   ebp
c0008bc8:	e8 bf fc ff ff       	call   c000888c <VgaText::decrementCursor(bool)>
c0008bcd:	5b                   	pop    ebx
c0008bce:	58                   	pop    eax
c0008bcf:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008bd2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008bd5:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0008bd8:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c0008bdb:	6a 20                	push   0x20
c0008bdd:	55                   	push   ebp
c0008bde:	e8 d5 fa ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008be3:	83 c4 20             	add    esp,0x20
c0008be6:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bea:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bed:	0f b7 db             	movzx  ebx,bx
c0008bf0:	01 db                	add    ebx,ebx
c0008bf2:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bf5:	eb 56                	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bf7:	52                   	push   edx
c0008bf8:	52                   	push   edx
c0008bf9:	57                   	push   edi
c0008bfa:	50                   	push   eax
c0008bfb:	e8 a8 fa ff ff       	call   c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>
c0008c00:	83 c4 10             	add    esp,0x10
c0008c03:	66 89 03             	mov    WORD PTR [ebx],ax
c0008c06:	39 2d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebp
c0008c0c:	75 1d                	jne    c0008c2b <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c0e:	83 ec 0c             	sub    esp,0xc
c0008c11:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008c14:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008c17:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c1b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c1f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008c22:	50                   	push   eax
c0008c23:	e8 b8 01 01 00       	call   c0018de0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c28:	83 c4 20             	add    esp,0x20
c0008c2b:	50                   	push   eax
c0008c2c:	83 c3 02             	add    ebx,0x2
c0008c2f:	50                   	push   eax
c0008c30:	6a 00                	push   0x0
c0008c32:	55                   	push   ebp
c0008c33:	e8 00 fc ff ff       	call   c0008838 <VgaText::incrementCursor(bool)>
c0008c38:	83 c4 10             	add    esp,0x10
c0008c3b:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c0008c3f:	75 0c                	jne    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c41:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008c45:	0f b7 db             	movzx  ebx,bx
c0008c48:	01 db                	add    ebx,ebx
c0008c4a:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008c4d:	46                   	inc    esi
c0008c4e:	e9 06 ff ff ff       	jmp    c0008b59 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c53:	83 ec 0c             	sub    esp,0xc
c0008c56:	55                   	push   ebp
c0008c57:	e8 c4 f8 ff ff       	call   c0008520 <VgaText::updateCursor()>
c0008c5c:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c0008c63:	83 c4 1c             	add    esp,0x1c
c0008c66:	5b                   	pop    ebx
c0008c67:	5e                   	pop    esi
c0008c68:	5f                   	pop    edi
c0008c69:	5d                   	pop    ebp
c0008c6a:	c3                   	ret    
c0008c6b:	90                   	nop

c0008c6c <VgaText::VgaText(char const*)>:
c0008c6c:	56                   	push   esi
c0008c6d:	53                   	push   ebx
c0008c6e:	83 ec 04             	sub    esp,0x4
c0008c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c75:	83 ec 08             	sub    esp,0x8
c0008c78:	6a 00                	push   0x0
c0008c7a:	50                   	push   eax
c0008c7b:	e8 26 05 00 00       	call   c00091a6 <UnixFile::UnixFile(int)>
c0008c80:	83 c4 10             	add    esp,0x10
c0008c83:	ba b4 0e 02 c0       	mov    edx,0xc0020eb4
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	89 10                	mov    DWORD PTR [eax],edx
c0008c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c92:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9d:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca8:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb0:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb8:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc3:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cce:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd9:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce4:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ceb:	83 ec 0c             	sub    esp,0xc
c0008cee:	6a 01                	push   0x1
c0008cf0:	e8 00 09 00 00       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0008cf5:	83 c4 10             	add    esp,0x10
c0008cf8:	89 c2                	mov    edx,eax
c0008cfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cfe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008d01:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c0008d07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d0b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d0e:	89 c6                	mov    esi,eax
c0008d10:	e8 cd f0 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0008d15:	68 05 0c 00 00       	push   0xc05
c0008d1a:	56                   	push   esi
c0008d1b:	50                   	push   eax
c0008d1c:	53                   	push   ebx
c0008d1d:	e8 dc 0f 00 00       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d22:	83 c4 10             	add    esp,0x10
c0008d25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d29:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d2c:	83 ec 04             	sub    esp,0x4
c0008d2f:	68 a0 0f 00 00       	push   0xfa0
c0008d34:	6a 00                	push   0x0
c0008d36:	50                   	push   eax
c0008d37:	e8 b4 77 ff ff       	call   c00004f0 <memset>
c0008d3c:	83 c4 10             	add    esp,0x10
c0008d3f:	83 ec 04             	sub    esp,0x4
c0008d42:	6a 00                	push   0x0
c0008d44:	6a 07                	push   0x7
c0008d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d4a:	e8 7b f8 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d4f:	83 c4 10             	add    esp,0x10
c0008d52:	83 ec 04             	sub    esp,0x4
c0008d55:	6a 00                	push   0x0
c0008d57:	6a 00                	push   0x0
c0008d59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d5d:	e8 f6 f9 ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008d62:	83 c4 10             	add    esp,0x10
c0008d65:	83 ec 0c             	sub    esp,0xc
c0008d68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d6c:	e8 49 fa ff ff       	call   c00087ba <VgaText::clearScreen()>
c0008d71:	83 c4 10             	add    esp,0x10
c0008d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d78:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d80:	05 82 00 00 00       	add    eax,0x82
c0008d85:	83 ec 04             	sub    esp,0x4
c0008d88:	68 80 00 00 00       	push   0x80
c0008d8d:	6a 00                	push   0x0
c0008d8f:	50                   	push   eax
c0008d90:	e8 5b 77 ff ff       	call   c00004f0 <memset>
c0008d95:	83 c4 10             	add    esp,0x10
c0008d98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d9c:	05 02 01 00 00       	add    eax,0x102
c0008da1:	83 ec 04             	sub    esp,0x4
c0008da4:	68 80 00 00 00       	push   0x80
c0008da9:	6a 00                	push   0x0
c0008dab:	50                   	push   eax
c0008dac:	e8 3f 77 ff ff       	call   c00004f0 <memset>
c0008db1:	83 c4 10             	add    esp,0x10
c0008db4:	90                   	nop
c0008db5:	83 c4 04             	add    esp,0x4
c0008db8:	5b                   	pop    ebx
c0008db9:	5e                   	pop    esi
c0008dba:	c3                   	ret    
c0008dbb:	90                   	nop

c0008dbc <VgaText::receiveKey(unsigned char)>:
c0008dbc:	55                   	push   ebp
c0008dbd:	57                   	push   edi
c0008dbe:	56                   	push   esi
c0008dbf:	53                   	push   ebx
c0008dc0:	83 ec 2c             	sub    esp,0x2c
c0008dc3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008dc7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dcb:	89 fd                	mov    ebp,edi
c0008dcd:	81 e5 ff 00 00 00    	and    ebp,0xff
c0008dd3:	0f 84 48 01 00 00    	je     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008dd9:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008ddf:	83 fd 08             	cmp    ebp,0x8
c0008de2:	75 6a                	jne    c0008e4e <VgaText::receiveKey(unsigned char)+0x92>
c0008de4:	83 ec 0c             	sub    esp,0xc
c0008de7:	56                   	push   esi
c0008de8:	e8 93 77 ff ff       	call   c0000580 <strlen>
c0008ded:	83 c4 10             	add    esp,0x10
c0008df0:	85 c0                	test   eax,eax
c0008df2:	0f 84 ef 00 00 00    	je     c0008ee7 <VgaText::receiveKey(unsigned char)+0x12b>
c0008df8:	50                   	push   eax
c0008df9:	50                   	push   eax
c0008dfa:	6a 08                	push   0x8
c0008dfc:	53                   	push   ebx
c0008dfd:	e8 7c fb ff ff       	call   c000897e <VgaText::putchar(char)>
c0008e02:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e05:	e8 76 77 ff ff       	call   c0000580 <strlen>
c0008e0a:	83 c4 10             	add    esp,0x10
c0008e0d:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e15:	83 fa 1f             	cmp    edx,0x1f
c0008e18:	89 d0                	mov    eax,edx
c0008e1a:	7f 1c                	jg     c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e1c:	83 e8 08             	sub    eax,0x8
c0008e1f:	3c 02                	cmp    al,0x2
c0008e21:	76 15                	jbe    c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e23:	83 fa 0d             	cmp    edx,0xd
c0008e26:	74 10                	je     c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e28:	57                   	push   edi
c0008e29:	57                   	push   edi
c0008e2a:	68 9f 0e 02 c0       	push   0xc0020e9f
c0008e2f:	53                   	push   ebx
c0008e30:	e8 77 fc ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0008e35:	83 c4 10             	add    esp,0x10
c0008e38:	83 ec 0c             	sub    esp,0xc
c0008e3b:	56                   	push   esi
c0008e3c:	e8 3f 77 ff ff       	call   c0000580 <strlen>
c0008e41:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e49:	e9 96 00 00 00       	jmp    c0008ee4 <VgaText::receiveKey(unsigned char)+0x128>
c0008e4e:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e54:	83 ec 0c             	sub    esp,0xc
c0008e57:	50                   	push   eax
c0008e58:	e8 23 77 ff ff       	call   c0000580 <strlen>
c0008e5d:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e60:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e64:	e8 17 77 ff ff       	call   c0000580 <strlen>
c0008e69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e6d:	83 c4 10             	add    esp,0x10
c0008e70:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e74:	3d 80 00 00 00       	cmp    eax,0x80
c0008e79:	0f 87 a2 00 00 00    	ja     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008e7f:	8d 47 ff             	lea    eax,[edi-0x1]
c0008e82:	3c 1e                	cmp    al,0x1e
c0008e84:	77 35                	ja     c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e86:	8d 47 f7             	lea    eax,[edi-0x9]
c0008e89:	3c 01                	cmp    al,0x1
c0008e8b:	76 2e                	jbe    c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e8d:	83 fd 0d             	cmp    ebp,0xd
c0008e90:	74 29                	je     c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e92:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e95:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e98:	68 a5 0e 02 c0       	push   0xc0020ea5
c0008e9d:	53                   	push   ebx
c0008e9e:	e8 7b fc ff ff       	call   c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008ea3:	8d 47 40             	lea    eax,[edi+0x40]
c0008ea6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea9:	0f b6 c0             	movzx  eax,al
c0008eac:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eaf:	50                   	push   eax
c0008eb0:	53                   	push   ebx
c0008eb1:	e8 f8 f9 ff ff       	call   c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>
c0008eb6:	83 c4 20             	add    esp,0x20
c0008eb9:	eb 11                	jmp    c0008ecc <VgaText::receiveKey(unsigned char)+0x110>
c0008ebb:	51                   	push   ecx
c0008ebc:	89 f8                	mov    eax,edi
c0008ebe:	51                   	push   ecx
c0008ebf:	0f be c0             	movsx  eax,al
c0008ec2:	50                   	push   eax
c0008ec3:	53                   	push   ebx
c0008ec4:	e8 b5 fa ff ff       	call   c000897e <VgaText::putchar(char)>
c0008ec9:	83 c4 10             	add    esp,0x10
c0008ecc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ed1:	89 f8                	mov    eax,edi
c0008ed3:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ed7:	52                   	push   edx
c0008ed8:	52                   	push   edx
c0008ed9:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008edd:	50                   	push   eax
c0008ede:	56                   	push   esi
c0008edf:	e8 8c 79 ff ff       	call   c0000870 <strcat>
c0008ee4:	83 c4 10             	add    esp,0x10
c0008ee7:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008eee:	75 0f                	jne    c0008eff <VgaText::receiveKey(unsigned char)+0x143>
c0008ef0:	83 fd 1c             	cmp    ebp,0x1c
c0008ef3:	77 2c                	ja     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008ef5:	b8 08 04 00 10       	mov    eax,0x10000408
c0008efa:	0f a3 e8             	bt     eax,ebp
c0008efd:	73 22                	jae    c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008eff:	50                   	push   eax
c0008f00:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f06:	50                   	push   eax
c0008f07:	56                   	push   esi
c0008f08:	53                   	push   ebx
c0008f09:	e8 62 79 ff ff       	call   c0000870 <strcat>
c0008f0e:	83 c4 0c             	add    esp,0xc
c0008f11:	68 80 00 00 00       	push   0x80
c0008f16:	6a 00                	push   0x0
c0008f18:	56                   	push   esi
c0008f19:	e8 d2 75 ff ff       	call   c00004f0 <memset>
c0008f1e:	83 c4 10             	add    esp,0x10
c0008f21:	83 c4 2c             	add    esp,0x2c
c0008f24:	5b                   	pop    ebx
c0008f25:	5e                   	pop    esi
c0008f26:	5f                   	pop    edi
c0008f27:	5d                   	pop    ebp
c0008f28:	c3                   	ret    
c0008f29:	90                   	nop

c0008f2a <VgaText::doUpdate()>:
c0008f2a:	c3                   	ret    
c0008f2b:	90                   	nop

c0008f2c <TSS::TSS()>:
c0008f2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f30:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f37:	90                   	nop
c0008f38:	c3                   	ret    
c0008f39:	90                   	nop
c0008f3a:	66 90                	xchg   ax,ax

c0008f3c <TSS::setESP(unsigned long)>:
c0008f3c:	55                   	push   ebp
c0008f3d:	89 e5                	mov    ebp,esp
c0008f3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f45:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f48:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f4b:	90                   	nop
c0008f4c:	5d                   	pop    ebp
c0008f4d:	c3                   	ret    
c0008f4e:	66 90                	xchg   ax,ax

c0008f50 <TSS::flush()>:
c0008f50:	55                   	push   ebp
c0008f51:	89 e5                	mov    ebp,esp
c0008f53:	83 ec 10             	sub    esp,0x10
c0008f56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f59:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f5b:	83 c8 03             	or     eax,0x3
c0008f5e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f62:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f66:	66 89 d0             	mov    ax,dx
c0008f69:	0f 00 d8             	ltr    ax
c0008f6c:	90                   	nop
c0008f6d:	c9                   	leave  
c0008f6e:	c3                   	ret    
c0008f6f:	90                   	nop

c0008f70 <TSS::setup(unsigned long, unsigned long)>:
c0008f70:	55                   	push   ebp
c0008f71:	89 e5                	mov    ebp,esp
c0008f73:	83 ec 18             	sub    esp,0x18
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	6a 68                	push   0x68
c0008f7b:	e8 53 eb ff ff       	call   c0007ad3 <malloc>
c0008f80:	83 c4 10             	add    esp,0x10
c0008f83:	89 c2                	mov    edx,eax
c0008f85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f88:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f91:	83 ec 04             	sub    esp,0x4
c0008f94:	6a 68                	push   0x68
c0008f96:	6a 00                	push   0x0
c0008f98:	50                   	push   eax
c0008f99:	e8 52 75 ff ff       	call   c00004f0 <memset>
c0008f9e:	83 c4 10             	add    esp,0x10
c0008fa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa7:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fb3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fc2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0009016:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009022:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0009032:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009035:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009038:	0f 20 da             	mov    edx,cr3
c000903b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000903e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009041:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009044:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009047:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000904a:	83 ec 08             	sub    esp,0x8
c000904d:	50                   	push   eax
c000904e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009051:	50                   	push   eax
c0009052:	e8 eb e2 ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0009057:	83 c4 10             	add    esp,0x10
c000905a:	83 ec 08             	sub    esp,0x8
c000905d:	6a 68                	push   0x68
c000905f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009062:	50                   	push   eax
c0009063:	e8 f6 e2 ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c0009068:	83 c4 10             	add    esp,0x10
c000906b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000906f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009072:	83 e0 0f             	and    eax,0xf
c0009075:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009078:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000907b:	83 c8 40             	or     eax,0x40
c000907e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009081:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009086:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000908c:	05 78 01 00 00       	add    eax,0x178
c0009091:	83 ec 04             	sub    esp,0x4
c0009094:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009097:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000909a:	50                   	push   eax
c000909b:	e8 f2 e2 ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00090a0:	83 c4 10             	add    esp,0x10
c00090a3:	89 c2                	mov    edx,eax
c00090a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090a8:	89 10                	mov    DWORD PTR [eax],edx
c00090aa:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00090af:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090b5:	05 78 01 00 00       	add    eax,0x178
c00090ba:	83 ec 0c             	sub    esp,0xc
c00090bd:	50                   	push   eax
c00090be:	e8 f9 e2 ff ff       	call   c00073bc <GDT::flush()>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00090cb:	c9                   	leave  
c00090cc:	c3                   	ret    
c00090cd:	90                   	nop

c00090ce <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090d9:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090de:	75 08                	jne    c00090e8 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090e0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090e6:	eb 38                	jmp    c0009120 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00090e8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00090ed:	75 17                	jne    c0009106 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00090ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00090f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00090f7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00090fd:	8b 10                	mov    edx,DWORD PTR [eax]
c00090ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009103:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0009106:	89 c1                	mov    ecx,eax
c0009108:	83 e1 fd             	and    ecx,0xfffffffd
c000910b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009111:	74 cd                	je     c00090e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009113:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009118:	83 e0 ef             	and    eax,0xffffffef
c000911b:	83 f8 08             	cmp    eax,0x8
c000911e:	76 c0                	jbe    c00090e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009120:	31 c0                	xor    eax,eax
c0009122:	c3                   	ret    
c0009123:	90                   	nop

c0009124 <ReservedFilename::isAtty()>:
c0009124:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009128:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000912b:	31 c0                	xor    eax,eax
c000912d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0009133:	74 09                	je     c000913e <ReservedFilename::isAtty()+0x1a>
c0009135:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000913b:	0f 94 c0             	sete   al
c000913e:	c3                   	ret    
c000913f:	90                   	nop

c0009140 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009144:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009148:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000914c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000914f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009154:	75 08                	jne    c000915e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009156:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000915c:	eb 3d                	jmp    c000919b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000915e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009163:	75 17                	jne    c000917c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009165:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000916a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000916d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009173:	8b 10                	mov    edx,DWORD PTR [eax]
c0009175:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009179:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000917c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009181:	75 04                	jne    c0009187 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0009183:	89 0a                	mov    DWORD PTR [edx],ecx
c0009185:	eb 14                	jmp    c000919b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009187:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000918c:	74 c8                	je     c0009156 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000918e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009193:	83 e0 ef             	and    eax,0xffffffef
c0009196:	83 f8 08             	cmp    eax,0x8
c0009199:	76 bb                	jbe    c0009156 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000919b:	31 c0                	xor    eax,eax
c000919d:	c3                   	ret    

c000919e <UnixFile::getFileDescriptor()>:
c000919e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091a5:	c3                   	ret    

c00091a6 <UnixFile::UnixFile(int)>:
c00091a6:	53                   	push   ebx
c00091a7:	83 ec 28             	sub    esp,0x28
c00091aa:	ba 7c 0f 02 c0       	mov    edx,0xc0020f7c
c00091af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091b3:	89 10                	mov    DWORD PTR [eax],edx
c00091b5:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091bd:	0f 8f 90 01 00 00    	jg     c0009353 <UnixFile::UnixFile(int)+0x1ad>
c00091c3:	a1 20 37 02 c0       	mov    eax,ds:0xc0023720
c00091c8:	8d 50 01             	lea    edx,[eax+0x1]
c00091cb:	89 15 20 37 02 c0    	mov    DWORD PTR ds:0xc0023720,edx
c00091d1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091d5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091d8:	83 ec 08             	sub    esp,0x8
c00091db:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091df:	68 98 6f 02 c0       	push   0xc0026f98
c00091e4:	e8 5f 68 01 00       	call   c001fa48 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00091e9:	83 c4 10             	add    esp,0x10
c00091ec:	a0 94 6f 02 c0       	mov    al,ds:0xc0026f94
c00091f1:	83 f0 01             	xor    eax,0x1
c00091f4:	0f b6 c0             	movzx  eax,al
c00091f7:	85 c0                	test   eax,eax
c00091f9:	0f 84 55 01 00 00    	je     c0009354 <UnixFile::UnixFile(int)+0x1ae>
c00091ff:	c6 05 94 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026f94,0x1
c0009206:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000920e:	83 ec 0c             	sub    esp,0xc
c0009211:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009215:	e8 b9 e8 ff ff       	call   c0007ad3 <malloc>
c000921a:	83 c4 10             	add    esp,0x10
c000921d:	89 c3                	mov    ebx,eax
c000921f:	83 ec 08             	sub    esp,0x8
c0009222:	68 03 ff ff 0f       	push   0xfffff03
c0009227:	53                   	push   ebx
c0009228:	e8 2d 01 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000922d:	83 c4 10             	add    esp,0x10
c0009230:	89 1d 8c 6f 02 c0    	mov    DWORD PTR ds:0xc0026f8c,ebx
c0009236:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000923e:	83 ec 0c             	sub    esp,0xc
c0009241:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009245:	e8 89 e8 ff ff       	call   c0007ad3 <malloc>
c000924a:	83 c4 10             	add    esp,0x10
c000924d:	89 c3                	mov    ebx,eax
c000924f:	83 ec 08             	sub    esp,0x8
c0009252:	68 01 ff ff 0f       	push   0xfffff01
c0009257:	53                   	push   ebx
c0009258:	e8 fd 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000925d:	83 c4 10             	add    esp,0x10
c0009260:	89 1d 90 6f 02 c0    	mov    DWORD PTR ds:0xc0026f90,ebx
c0009266:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000926e:	83 ec 0c             	sub    esp,0xc
c0009271:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009275:	e8 59 e8 ff ff       	call   c0007ad3 <malloc>
c000927a:	83 c4 10             	add    esp,0x10
c000927d:	89 c3                	mov    ebx,eax
c000927f:	83 ec 08             	sub    esp,0x8
c0009282:	68 00 ff ff 0f       	push   0xfffff00
c0009287:	53                   	push   ebx
c0009288:	e8 cd 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000928d:	83 c4 10             	add    esp,0x10
c0009290:	89 1d 84 6f 02 c0    	mov    DWORD PTR ds:0xc0026f84,ebx
c0009296:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000929e:	83 ec 0c             	sub    esp,0xc
c00092a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092a5:	e8 29 e8 ff ff       	call   c0007ad3 <malloc>
c00092aa:	83 c4 10             	add    esp,0x10
c00092ad:	89 c3                	mov    ebx,eax
c00092af:	83 ec 08             	sub    esp,0x8
c00092b2:	68 02 ff ff 0f       	push   0xfffff02
c00092b7:	53                   	push   ebx
c00092b8:	e8 9d 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c00092bd:	83 c4 10             	add    esp,0x10
c00092c0:	89 1d 88 6f 02 c0    	mov    DWORD PTR ds:0xc0026f88,ebx
c00092c6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092ce:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092d3:	7f 7f                	jg     c0009354 <UnixFile::UnixFile(int)+0x1ae>
c00092d5:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092dd:	83 ec 0c             	sub    esp,0xc
c00092e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092e4:	e8 ea e7 ff ff       	call   c0007ad3 <malloc>
c00092e9:	83 c4 10             	add    esp,0x10
c00092ec:	89 c3                	mov    ebx,eax
c00092ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092f2:	05 10 ff ff 0f       	add    eax,0xfffff10
c00092f7:	83 ec 08             	sub    esp,0x8
c00092fa:	50                   	push   eax
c00092fb:	53                   	push   ebx
c00092fc:	e8 59 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c0009301:	83 c4 10             	add    esp,0x10
c0009304:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009308:	89 1c 85 60 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90a0],ebx
c000930f:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009317:	83 ec 0c             	sub    esp,0xc
c000931a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000931e:	e8 b0 e7 ff ff       	call   c0007ad3 <malloc>
c0009323:	83 c4 10             	add    esp,0x10
c0009326:	89 c3                	mov    ebx,eax
c0009328:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000932c:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009331:	83 ec 08             	sub    esp,0x8
c0009334:	50                   	push   eax
c0009335:	53                   	push   ebx
c0009336:	e8 1f 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009342:	89 1c 85 20 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90e0],ebx
c0009349:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000934e:	e9 7b ff ff ff       	jmp    c00092ce <UnixFile::UnixFile(int)+0x128>
c0009353:	90                   	nop
c0009354:	83 c4 28             	add    esp,0x28
c0009357:	5b                   	pop    ebx
c0009358:	c3                   	ret    
c0009359:	90                   	nop

c000935a <ReservedFilename::ReservedFilename(int)>:
c000935a:	83 ec 0c             	sub    esp,0xc
c000935d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009361:	83 ec 08             	sub    esp,0x8
c0009364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009368:	50                   	push   eax
c0009369:	e8 38 fe ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000936e:	83 c4 10             	add    esp,0x10
c0009371:	ba 98 0f 02 c0       	mov    edx,0xc0020f98
c0009376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000937a:	89 10                	mov    DWORD PTR [eax],edx
c000937c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009380:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009384:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009387:	90                   	nop
c0009388:	83 c4 0c             	add    esp,0xc
c000938b:	c3                   	ret    

c000938c <UnixFile::~UnixFile()>:
c000938c:	83 ec 1c             	sub    esp,0x1c
c000938f:	ba 7c 0f 02 c0       	mov    edx,0xc0020f7c
c0009394:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009398:	89 10                	mov    DWORD PTR [eax],edx
c000939a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000939e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093a1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093a6:	7f 76                	jg     c000941e <UnixFile::~UnixFile()+0x92>
c00093a8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093b0:	83 ec 0c             	sub    esp,0xc
c00093b3:	68 98 6f 02 c0       	push   0xc0026f98
c00093b8:	e8 5f 67 01 00       	call   c001fb1c <LinkedList<UnixFile>::getFirstElement()>
c00093bd:	83 c4 10             	add    esp,0x10
c00093c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093c4:	83 ec 0c             	sub    esp,0xc
c00093c7:	68 98 6f 02 c0       	push   0xc0026f98
c00093cc:	e8 53 67 01 00       	call   c001fb24 <LinkedList<UnixFile>::removeFirst()>
c00093d1:	83 c4 10             	add    esp,0x10
c00093d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093d8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093dc:	74 43                	je     c0009421 <UnixFile::~UnixFile()+0x95>
c00093de:	83 ec 08             	sub    esp,0x8
c00093e1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093e5:	68 98 6f 02 c0       	push   0xc0026f98
c00093ea:	e8 59 66 01 00       	call   c001fa48 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00093ef:	83 c4 10             	add    esp,0x10
c00093f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00093f6:	8d 50 01             	lea    edx,[eax+0x1]
c00093f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00093fd:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009402:	0f 94 c0             	sete   al
c0009405:	0f b6 c0             	movzx  eax,al
c0009408:	85 c0                	test   eax,eax
c000940a:	74 a4                	je     c00093b0 <UnixFile::~UnixFile()+0x24>
c000940c:	83 ec 0c             	sub    esp,0xc
c000940f:	68 54 0f 02 c0       	push   0xc0020f54
c0009414:	e8 c2 81 00 00       	call   c00115db <KePanic(char const*)>
c0009419:	83 c4 10             	add    esp,0x10
c000941c:	eb 92                	jmp    c00093b0 <UnixFile::~UnixFile()+0x24>
c000941e:	90                   	nop
c000941f:	eb 01                	jmp    c0009422 <UnixFile::~UnixFile()+0x96>
c0009421:	90                   	nop
c0009422:	90                   	nop
c0009423:	83 c4 1c             	add    esp,0x1c
c0009426:	c3                   	ret    
c0009427:	90                   	nop

c0009428 <UnixFile::~UnixFile()>:
c0009428:	83 ec 0c             	sub    esp,0xc
c000942b:	83 ec 0c             	sub    esp,0xc
c000942e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009432:	e8 55 ff ff ff       	call   c000938c <UnixFile::~UnixFile()>
c0009437:	83 c4 10             	add    esp,0x10
c000943a:	83 ec 08             	sub    esp,0x8
c000943d:	6a 0c                	push   0xc
c000943f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009443:	e8 c4 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0009448:	83 c4 10             	add    esp,0x10
c000944b:	83 c4 0c             	add    esp,0xc
c000944e:	c3                   	ret    
c000944f:	90                   	nop

c0009450 <ReservedFilename::~ReservedFilename()>:
c0009450:	83 ec 0c             	sub    esp,0xc
c0009453:	ba 98 0f 02 c0       	mov    edx,0xc0020f98
c0009458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000945c:	89 10                	mov    DWORD PTR [eax],edx
c000945e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009462:	83 ec 0c             	sub    esp,0xc
c0009465:	50                   	push   eax
c0009466:	e8 21 ff ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000946b:	83 c4 10             	add    esp,0x10
c000946e:	90                   	nop
c000946f:	83 c4 0c             	add    esp,0xc
c0009472:	c3                   	ret    
c0009473:	90                   	nop

c0009474 <ReservedFilename::~ReservedFilename()>:
c0009474:	83 ec 0c             	sub    esp,0xc
c0009477:	83 ec 0c             	sub    esp,0xc
c000947a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000947e:	e8 cd ff ff ff       	call   c0009450 <ReservedFilename::~ReservedFilename()>
c0009483:	83 c4 10             	add    esp,0x10
c0009486:	83 ec 08             	sub    esp,0x8
c0009489:	6a 0c                	push   0xc
c000948b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000948f:	e8 78 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0009494:	83 c4 10             	add    esp,0x10
c0009497:	83 c4 0c             	add    esp,0xc
c000949a:	c3                   	ret    

c000949b <KeGetFileFromDescriptor(int)>:
c000949b:	53                   	push   ebx
c000949c:	83 ec 08             	sub    esp,0x8
c000949f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094a3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094a9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094af:	7f 2c                	jg     c00094dd <KeGetFileFromDescriptor(int)+0x42>
c00094b1:	83 ec 0c             	sub    esp,0xc
c00094b4:	68 98 6f 02 c0       	push   0xc0026f98
c00094b9:	e8 5e 66 01 00       	call   c001fb1c <LinkedList<UnixFile>::getFirstElement()>
c00094be:	83 c4 10             	add    esp,0x10
c00094c1:	85 c0                	test   eax,eax
c00094c3:	75 04                	jne    c00094c9 <KeGetFileFromDescriptor(int)+0x2e>
c00094c5:	31 c0                	xor    eax,eax
c00094c7:	eb 6e                	jmp    c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094c9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094cc:	74 69                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094ce:	52                   	push   edx
c00094cf:	52                   	push   edx
c00094d0:	50                   	push   eax
c00094d1:	68 98 6f 02 c0       	push   0xc0026f98
c00094d6:	e8 eb 66 01 00       	call   c001fbc6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094db:	eb e1                	jmp    c00094be <KeGetFileFromDescriptor(int)+0x23>
c00094dd:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00094e3:	a1 8c 6f 02 c0       	mov    eax,ds:0xc0026f8c
c00094e8:	74 4d                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094ea:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00094f0:	a1 90 6f 02 c0       	mov    eax,ds:0xc0026f90
c00094f5:	74 40                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094f7:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00094fd:	a1 88 6f 02 c0       	mov    eax,ds:0xc0026f88
c0009502:	74 33                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009504:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000950a:	a1 84 6f 02 c0       	mov    eax,ds:0xc0026f84
c000950f:	74 26                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009511:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009517:	83 f8 08             	cmp    eax,0x8
c000951a:	77 09                	ja     c0009525 <KeGetFileFromDescriptor(int)+0x8a>
c000951c:	8b 04 85 60 6f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd90a0]
c0009523:	eb 12                	jmp    c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009525:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000952b:	83 fb 08             	cmp    ebx,0x8
c000952e:	77 95                	ja     c00094c5 <KeGetFileFromDescriptor(int)+0x2a>
c0009530:	8b 04 9d 20 6f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd90e0]
c0009537:	83 c4 08             	add    esp,0x8
c000953a:	5b                   	pop    ebx
c000953b:	c3                   	ret    

c000953c <__static_initialization_and_destruction_0(int, int)>:
c000953c:	83 ec 0c             	sub    esp,0xc
c000953f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009544:	75 34                	jne    c000957a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009546:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000954e:	75 2a                	jne    c000957a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009550:	83 ec 0c             	sub    esp,0xc
c0009553:	68 98 6f 02 c0       	push   0xc0026f98
c0009558:	e8 a9 64 01 00       	call   c001fa06 <LinkedList<UnixFile>::LinkedList()>
c000955d:	83 c4 10             	add    esp,0x10
c0009560:	83 ec 04             	sub    esp,0x4
c0009563:	68 b0 36 02 c0       	push   0xc00236b0
c0009568:	68 98 6f 02 c0       	push   0xc0026f98
c000956d:	68 04 fa 01 c0       	push   0xc001fa04
c0009572:	e8 45 12 00 00       	call   c000a7bc <__cxa_atexit>
c0009577:	83 c4 10             	add    esp,0x10
c000957a:	90                   	nop
c000957b:	83 c4 0c             	add    esp,0xc
c000957e:	c3                   	ret    

c000957f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000957f:	83 ec 0c             	sub    esp,0xc
c0009582:	83 ec 08             	sub    esp,0x8
c0009585:	68 ff ff 00 00       	push   0xffff
c000958a:	6a 01                	push   0x1
c000958c:	e8 ab ff ff ff       	call   c000953c <__static_initialization_and_destruction_0(int, int)>
c0009591:	83 c4 10             	add    esp,0x10
c0009594:	83 c4 0c             	add    esp,0xc
c0009597:	c3                   	ret    

c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0009598:	53                   	push   ebx
c0009599:	8b 15 28 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023728
c000959f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095a7:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095ad:	89 d8                	mov    eax,ebx
c00095af:	d1 e8                	shr    eax,1
c00095b1:	01 d0                	add    eax,edx
c00095b3:	80 e3 01             	and    bl,0x1
c00095b6:	8a 10                	mov    dl,BYTE PTR [eax]
c00095b8:	75 09                	jne    c00095c3 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095ba:	83 e2 f0             	and    edx,0xfffffff0
c00095bd:	09 ca                	or     edx,ecx
c00095bf:	88 10                	mov    BYTE PTR [eax],dl
c00095c1:	5b                   	pop    ebx
c00095c2:	c3                   	ret    
c00095c3:	0f b6 c9             	movzx  ecx,cl
c00095c6:	83 e2 0f             	and    edx,0xf
c00095c9:	c1 e1 04             	shl    ecx,0x4
c00095cc:	09 ca                	or     edx,ecx
c00095ce:	88 10                	mov    BYTE PTR [eax],dl
c00095d0:	5b                   	pop    ebx
c00095d1:	c3                   	ret    

c00095d2 <Virt::getPageState(unsigned long)>:
c00095d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095d6:	8b 0d 28 37 02 c0    	mov    ecx,DWORD PTR ds:0xc0023728
c00095dc:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095e2:	89 d0                	mov    eax,edx
c00095e4:	d1 e8                	shr    eax,1
c00095e6:	80 e2 01             	and    dl,0x1
c00095e9:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00095ec:	74 03                	je     c00095f1 <Virt::getPageState(unsigned long)+0x1f>
c00095ee:	c1 e8 04             	shr    eax,0x4
c00095f1:	83 e0 0f             	and    eax,0xf
c00095f4:	c3                   	ret    

c00095f5 <Virt::allocateKernelVirtualPages(int)>:
c00095f5:	55                   	push   ebp
c00095f6:	57                   	push   edi
c00095f7:	56                   	push   esi
c00095f8:	31 f6                	xor    esi,esi
c00095fa:	53                   	push   ebx
c00095fb:	31 db                	xor    ebx,ebx
c00095fd:	83 ec 1c             	sub    esp,0x1c
c0009600:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0009605:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009609:	8b 2d 24 37 02 c0    	mov    ebp,DWORD PTR ds:0xc0023724
c000960f:	55                   	push   ebp
c0009610:	e8 bd ff ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c0009615:	5a                   	pop    edx
c0009616:	84 c0                	test   al,al
c0009618:	75 3d                	jne    c0009657 <Virt::allocateKernelVirtualPages(int)+0x62>
c000961a:	85 db                	test   ebx,ebx
c000961c:	0f 44 f5             	cmove  esi,ebp
c000961f:	83 c3 01             	add    ebx,0x1
c0009622:	39 fb                	cmp    ebx,edi
c0009624:	74 5e                	je     c0009684 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0009626:	83 c5 01             	add    ebp,0x1
c0009629:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c000962f:	76 33                	jbe    c0009664 <Virt::allocateKernelVirtualPages(int)+0x6f>
c0009631:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0009636:	c7 05 24 37 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023724,0xc8000
c0009640:	75 2a                	jne    c000966c <Virt::allocateKernelVirtualPages(int)+0x77>
c0009642:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0009647:	bd 00 80 0c 00       	mov    ebp,0xc8000
c000964c:	55                   	push   ebp
c000964d:	e8 80 ff ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c0009652:	5a                   	pop    edx
c0009653:	84 c0                	test   al,al
c0009655:	74 c3                	je     c000961a <Virt::allocateKernelVirtualPages(int)+0x25>
c0009657:	83 c5 01             	add    ebp,0x1
c000965a:	31 db                	xor    ebx,ebx
c000965c:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0009662:	77 cd                	ja     c0009631 <Virt::allocateKernelVirtualPages(int)+0x3c>
c0009664:	89 2d 24 37 02 c0    	mov    DWORD PTR ds:0xc0023724,ebp
c000966a:	eb a3                	jmp    c000960f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000966c:	83 ec 0c             	sub    esp,0xc
c000966f:	68 ac 0f 02 c0       	push   0xc0020fac
c0009674:	e8 62 7f 00 00       	call   c00115db <KePanic(char const*)>
c0009679:	8b 2d 24 37 02 c0    	mov    ebp,DWORD PTR ds:0xc0023724
c000967f:	83 c4 10             	add    esp,0x10
c0009682:	eb 8b                	jmp    c000960f <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009684:	89 35 24 37 02 c0    	mov    DWORD PTR ds:0xc0023724,esi
c000968a:	83 fb 01             	cmp    ebx,0x1
c000968d:	74 63                	je     c00096f2 <Virt::allocateKernelVirtualPages(int)+0xfd>
c000968f:	85 ff                	test   edi,edi
c0009691:	74 41                	je     c00096d4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c0009693:	89 f0                	mov    eax,esi
c0009695:	31 db                	xor    ebx,ebx
c0009697:	8d 6f ff             	lea    ebp,[edi-0x1]
c000969a:	eb 16                	jmp    c00096b2 <Virt::allocateKernelVirtualPages(int)+0xbd>
c000969c:	6a 01                	push   0x1
c000969e:	83 c3 01             	add    ebx,0x1
c00096a1:	50                   	push   eax
c00096a2:	e8 f1 fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096a7:	39 fb                	cmp    ebx,edi
c00096a9:	58                   	pop    eax
c00096aa:	5a                   	pop    edx
c00096ab:	74 27                	je     c00096d4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00096ad:	a1 24 37 02 c0       	mov    eax,ds:0xc0023724
c00096b2:	8d 50 01             	lea    edx,[eax+0x1]
c00096b5:	85 db                	test   ebx,ebx
c00096b7:	89 15 24 37 02 c0    	mov    DWORD PTR ds:0xc0023724,edx
c00096bd:	74 22                	je     c00096e1 <Virt::allocateKernelVirtualPages(int)+0xec>
c00096bf:	39 dd                	cmp    ebp,ebx
c00096c1:	75 d9                	jne    c000969c <Virt::allocateKernelVirtualPages(int)+0xa7>
c00096c3:	6a 03                	push   0x3
c00096c5:	83 c3 01             	add    ebx,0x1
c00096c8:	50                   	push   eax
c00096c9:	e8 ca fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ce:	39 fb                	cmp    ebx,edi
c00096d0:	59                   	pop    ecx
c00096d1:	58                   	pop    eax
c00096d2:	75 d9                	jne    c00096ad <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096d4:	83 c4 1c             	add    esp,0x1c
c00096d7:	89 f0                	mov    eax,esi
c00096d9:	5b                   	pop    ebx
c00096da:	c1 e0 0c             	shl    eax,0xc
c00096dd:	5e                   	pop    esi
c00096de:	5f                   	pop    edi
c00096df:	5d                   	pop    ebp
c00096e0:	c3                   	ret    
c00096e1:	6a 02                	push   0x2
c00096e3:	bb 01 00 00 00       	mov    ebx,0x1
c00096e8:	50                   	push   eax
c00096e9:	e8 aa fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ee:	58                   	pop    eax
c00096ef:	5a                   	pop    edx
c00096f0:	eb bb                	jmp    c00096ad <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096f2:	6a 04                	push   0x4
c00096f4:	56                   	push   esi
c00096f5:	8d 46 01             	lea    eax,[esi+0x1]
c00096f8:	a3 24 37 02 c0       	mov    ds:0xc0023724,eax
c00096fd:	e8 96 fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009702:	89 f0                	mov    eax,esi
c0009704:	59                   	pop    ecx
c0009705:	c1 e0 0c             	shl    eax,0xc
c0009708:	5b                   	pop    ebx
c0009709:	83 c4 1c             	add    esp,0x1c
c000970c:	5b                   	pop    ebx
c000970d:	5e                   	pop    esi
c000970e:	5f                   	pop    edi
c000970f:	5d                   	pop    ebp
c0009710:	c3                   	ret    

c0009711 <Virt::freeSwapfilePage(unsigned long)>:
c0009711:	53                   	push   ebx
c0009712:	8b 15 ac 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fac
c0009718:	b8 01 00 00 00       	mov    eax,0x1
c000971d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009721:	d3 e0                	shl    eax,cl
c0009723:	89 cb                	mov    ebx,ecx
c0009725:	c1 eb 05             	shr    ebx,0x5
c0009728:	f7 d0                	not    eax
c000972a:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000972d:	21 c1                	and    ecx,eax
c000972f:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009732:	5b                   	pop    ebx
c0009733:	c3                   	ret    

c0009734 <Virt::swapIDToSector(unsigned long)>:
c0009734:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009738:	8b 15 2c 37 02 c0    	mov    edx,DWORD PTR ds:0xc002372c
c000973e:	8b 0d 34 37 02 c0    	mov    ecx,DWORD PTR ds:0xc0023734
c0009744:	0f af c2             	imul   eax,edx
c0009747:	01 c8                	add    eax,ecx
c0009749:	c3                   	ret    

c000974a <Virt::allocateSwapfilePage()>:
c000974a:	55                   	push   ebp
c000974b:	31 d2                	xor    edx,edx
c000974d:	57                   	push   edi
c000974e:	56                   	push   esi
c000974f:	53                   	push   ebx
c0009750:	83 ec 0c             	sub    esp,0xc
c0009753:	8b 1d 30 37 02 c0    	mov    ebx,DWORD PTR ds:0xc0023730
c0009759:	8b 0d 2c 37 02 c0    	mov    ecx,DWORD PTR ds:0xc002372c
c000975f:	89 d8                	mov    eax,ebx
c0009761:	f7 f1                	div    ecx
c0009763:	39 cb                	cmp    ebx,ecx
c0009765:	72 2f                	jb     c0009796 <Virt::allocateSwapfilePage()+0x4c>
c0009767:	8b 35 ac 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fac
c000976d:	8b 16                	mov    edx,DWORD PTR [esi]
c000976f:	f6 c2 01             	test   dl,0x1
c0009772:	74 3e                	je     c00097b2 <Virt::allocateSwapfilePage()+0x68>
c0009774:	31 c9                	xor    ecx,ecx
c0009776:	bf 01 00 00 00       	mov    edi,0x1
c000977b:	eb 12                	jmp    c000978f <Virt::allocateSwapfilePage()+0x45>
c000977d:	89 ca                	mov    edx,ecx
c000977f:	89 fd                	mov    ebp,edi
c0009781:	c1 ea 05             	shr    edx,0x5
c0009784:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009787:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009789:	d3 e5                	shl    ebp,cl
c000978b:	85 ea                	test   edx,ebp
c000978d:	74 2c                	je     c00097bb <Virt::allocateSwapfilePage()+0x71>
c000978f:	83 c1 01             	add    ecx,0x1
c0009792:	39 c8                	cmp    eax,ecx
c0009794:	77 e7                	ja     c000977d <Virt::allocateSwapfilePage()+0x33>
c0009796:	83 ec 0c             	sub    esp,0xc
c0009799:	68 40 12 02 c0       	push   0xc0021240
c000979e:	e8 38 7e 00 00       	call   c00115db <KePanic(char const*)>
c00097a3:	83 c4 10             	add    esp,0x10
c00097a6:	31 c9                	xor    ecx,ecx
c00097a8:	83 c4 0c             	add    esp,0xc
c00097ab:	89 c8                	mov    eax,ecx
c00097ad:	5b                   	pop    ebx
c00097ae:	5e                   	pop    esi
c00097af:	5f                   	pop    edi
c00097b0:	5d                   	pop    ebp
c00097b1:	c3                   	ret    
c00097b2:	89 f3                	mov    ebx,esi
c00097b4:	bd 01 00 00 00       	mov    ebp,0x1
c00097b9:	31 c9                	xor    ecx,ecx
c00097bb:	09 ea                	or     edx,ebp
c00097bd:	89 c8                	mov    eax,ecx
c00097bf:	89 13                	mov    DWORD PTR [ebx],edx
c00097c1:	83 c4 0c             	add    esp,0xc
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <Virt::virtualMemorySetup()>:
c00097c9:	53                   	push   ebx
c00097ca:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097cf:	6a 0f                	push   0xf
c00097d1:	53                   	push   ebx
c00097d2:	83 c3 01             	add    ebx,0x1
c00097d5:	e8 be fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097da:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097e0:	58                   	pop    eax
c00097e1:	5a                   	pop    edx
c00097e2:	75 eb                	jne    c00097cf <Virt::virtualMemorySetup()+0x6>
c00097e4:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097e9:	6a 00                	push   0x0
c00097eb:	53                   	push   ebx
c00097ec:	83 c3 01             	add    ebx,0x1
c00097ef:	e8 a4 fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097f4:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097fa:	59                   	pop    ecx
c00097fb:	58                   	pop    eax
c00097fc:	75 eb                	jne    c00097e9 <Virt::virtualMemorySetup()+0x20>
c00097fe:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009803:	6a 0f                	push   0xf
c0009805:	53                   	push   ebx
c0009806:	83 c3 01             	add    ebx,0x1
c0009809:	e8 8a fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000980e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009814:	58                   	pop    eax
c0009815:	5a                   	pop    edx
c0009816:	75 eb                	jne    c0009803 <Virt::virtualMemorySetup()+0x3a>
c0009818:	5b                   	pop    ebx
c0009819:	c3                   	ret    

c000981a <Virt::setupPageSwapping(int)>:
c000981a:	53                   	push   ebx
c000981b:	83 ec 0c             	sub    esp,0xc
c000981e:	a1 88 b8 02 c0       	mov    eax,ds:0xc002b888
c0009823:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009827:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000982d:	8b 10                	mov    edx,DWORD PTR [eax]
c000982f:	53                   	push   ebx
c0009830:	68 57 12 02 c0       	push   0xc0021257
c0009835:	50                   	push   eax
c0009836:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0009839:	c1 e3 0b             	shl    ebx,0xb
c000983c:	89 1d 30 37 02 c0    	mov    DWORD PTR ds:0xc0023730,ebx
c0009842:	c1 eb 08             	shr    ebx,0x8
c0009845:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009848:	c6 05 38 37 02 c0 43 	mov    BYTE PTR ds:0xc0023738,0x43
c000984f:	c7 05 2c 37 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002372c,0x8
c0009859:	a3 34 37 02 c0       	mov    ds:0xc0023734,eax
c000985e:	e8 70 e2 ff ff       	call   c0007ad3 <malloc>
c0009863:	31 d2                	xor    edx,edx
c0009865:	83 c4 0c             	add    esp,0xc
c0009868:	a3 ac 6f 02 c0       	mov    ds:0xc0026fac,eax
c000986d:	89 c1                	mov    ecx,eax
c000986f:	a1 30 37 02 c0       	mov    eax,ds:0xc0023730
c0009874:	f7 35 2c 37 02 c0    	div    DWORD PTR ds:0xc002372c
c000987a:	c1 e8 05             	shr    eax,0x5
c000987d:	50                   	push   eax
c000987e:	6a 00                	push   0x0
c0009880:	51                   	push   ecx
c0009881:	e8 6a 6c ff ff       	call   c00004f0 <memset>
c0009886:	83 c4 18             	add    esp,0x18
c0009889:	5b                   	pop    ebx
c000988a:	c3                   	ret    
c000988b:	90                   	nop

c000988c <VAS::setCPUSpecific(unsigned long)>:
c000988c:	c3                   	ret    
c000988d:	90                   	nop

c000988e <VAS::VAS(VAS*)>:
c000988e:	83 ec 0c             	sub    esp,0xc
c0009891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009895:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000989c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098a0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098a7:	83 ec 0c             	sub    esp,0xc
c00098aa:	68 cc 0f 02 c0       	push   0xc0020fcc
c00098af:	e8 27 7d 00 00       	call   c00115db <KePanic(char const*)>
c00098b4:	83 c4 10             	add    esp,0x10
c00098b7:	90                   	nop
c00098b8:	83 c4 0c             	add    esp,0xc
c00098bb:	c3                   	ret    

c00098bc <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098c0:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098c5:	89 c2                	mov    edx,eax
c00098c7:	c1 ea 16             	shr    edx,0x16
c00098ca:	c1 e8 0a             	shr    eax,0xa
c00098cd:	83 f9 01             	cmp    ecx,0x1
c00098d0:	19 c9                	sbb    ecx,ecx
c00098d2:	25 fc 0f 00 00       	and    eax,0xffc
c00098d7:	c1 e2 0c             	shl    edx,0xc
c00098da:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098e0:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00098e7:	01 d0                	add    eax,edx
c00098e9:	c3                   	ret    

c00098ea <VAS::getPageTableEntry(unsigned long)>:
c00098ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00098ee:	89 ca                	mov    edx,ecx
c00098f0:	c1 ea 16             	shr    edx,0x16
c00098f3:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00098f9:	c1 e9 0a             	shr    ecx,0xa
c00098fc:	c1 e0 0c             	shl    eax,0xc
c00098ff:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009905:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009908:	c3                   	ret    

c0009909 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009909:	55                   	push   ebp
c000990a:	57                   	push   edi
c000990b:	bf 01 00 00 00       	mov    edi,0x1
c0009910:	56                   	push   esi
c0009911:	53                   	push   ebx
c0009912:	83 ec 1c             	sub    esp,0x1c
c0009915:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009919:	c1 ee 0c             	shr    esi,0xc
c000991c:	eb 48                	jmp    c0009966 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c000991e:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c0009923:	83 ec 08             	sub    esp,0x8
c0009926:	55                   	push   ebp
c0009927:	50                   	push   eax
c0009928:	e8 bd ff ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000992d:	83 c4 10             	add    esp,0x10
c0009930:	8b 10                	mov    edx,DWORD PTR [eax]
c0009932:	f6 c6 04             	test   dh,0x4
c0009935:	75 70                	jne    c00099a7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009937:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000993d:	83 fb 04             	cmp    ebx,0x4
c0009940:	0f 84 8a 00 00 00    	je     c00099d0 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009946:	83 fb 02             	cmp    ebx,0x2
c0009949:	0f 84 9a 00 00 00    	je     c00099e9 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c000994f:	83 fb 03             	cmp    ebx,0x3
c0009952:	0f 84 be 00 00 00    	je     c0009a16 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0009958:	83 fb 01             	cmp    ebx,0x1
c000995b:	0f 84 a2 00 00 00    	je     c0009a03 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009961:	83 c6 01             	add    esi,0x1
c0009964:	31 ff                	xor    edi,edi
c0009966:	56                   	push   esi
c0009967:	89 f5                	mov    ebp,esi
c0009969:	e8 64 fc ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c000996e:	c1 e5 0c             	shl    ebp,0xc
c0009971:	5a                   	pop    edx
c0009972:	0f b6 d8             	movzx  ebx,al
c0009975:	85 db                	test   ebx,ebx
c0009977:	75 a5                	jne    c000991e <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0009979:	83 ec 0c             	sub    esp,0xc
c000997c:	68 6e 12 02 c0       	push   0xc002126e
c0009981:	e8 55 7c 00 00       	call   c00115db <KePanic(char const*)>
c0009986:	5a                   	pop    edx
c0009987:	59                   	pop    ecx
c0009988:	55                   	push   ebp
c0009989:	8b 2d b0 6f 02 c0    	mov    ebp,DWORD PTR ds:0xc0026fb0
c000998f:	55                   	push   ebp
c0009990:	e8 55 ff ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009995:	83 c4 10             	add    esp,0x10
c0009998:	8b 10                	mov    edx,DWORD PTR [eax]
c000999a:	f6 c6 04             	test   dh,0x4
c000999d:	75 08                	jne    c00099a7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c000999f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099a5:	eb ba                	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099ab:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099b1:	83 ec 0c             	sub    esp,0xc
c00099b4:	52                   	push   edx
c00099b5:	e8 bf e3 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c00099ba:	83 c4 10             	add    esp,0x10
c00099bd:	83 fb 04             	cmp    ebx,0x4
c00099c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099c4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ca:	0f 85 76 ff ff ff    	jne    c0009946 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099d0:	83 e7 01             	and    edi,0x1
c00099d3:	75 46                	jne    c0009a1b <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099d5:	c7 44 24 30 f0 0f 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020ff0
c00099dd:	83 c4 1c             	add    esp,0x1c
c00099e0:	5b                   	pop    ebx
c00099e1:	5e                   	pop    esi
c00099e2:	5f                   	pop    edi
c00099e3:	5d                   	pop    ebp
c00099e4:	e9 f2 7b 00 00       	jmp    c00115db <KePanic(char const*)>
c00099e9:	83 e7 01             	and    edi,0x1
c00099ec:	75 15                	jne    c0009a03 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00099ee:	83 ec 0c             	sub    esp,0xc
c00099f1:	68 8a 12 02 c0       	push   0xc002128a
c00099f6:	e8 e0 7b 00 00       	call   c00115db <KePanic(char const*)>
c00099fb:	83 c4 10             	add    esp,0x10
c00099fe:	e9 5e ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a03:	83 ec 08             	sub    esp,0x8
c0009a06:	6a 00                	push   0x0
c0009a08:	56                   	push   esi
c0009a09:	e8 8a fb ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a0e:	83 c4 10             	add    esp,0x10
c0009a11:	e9 4b ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a16:	83 e7 01             	and    edi,0x1
c0009a19:	75 16                	jne    c0009a31 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a1b:	83 ec 08             	sub    esp,0x8
c0009a1e:	6a 00                	push   0x0
c0009a20:	56                   	push   esi
c0009a21:	e8 72 fb ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a26:	83 c4 10             	add    esp,0x10
c0009a29:	83 c4 1c             	add    esp,0x1c
c0009a2c:	5b                   	pop    ebx
c0009a2d:	5e                   	pop    esi
c0009a2e:	5f                   	pop    edi
c0009a2f:	5d                   	pop    ebp
c0009a30:	c3                   	ret    
c0009a31:	c7 44 24 30 a6 12 02 c0 	mov    DWORD PTR [esp+0x30],0xc00212a6
c0009a39:	83 c4 1c             	add    esp,0x1c
c0009a3c:	5b                   	pop    ebx
c0009a3d:	5e                   	pop    esi
c0009a3e:	5f                   	pop    edi
c0009a3f:	5d                   	pop    ebp
c0009a40:	e9 96 7b 00 00       	jmp    c00115db <KePanic(char const*)>
c0009a45:	90                   	nop

c0009a46 <VAS::freeAllocatedPages(unsigned long)>:
c0009a46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a4a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a4e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a52:	74 09                	je     c0009a5d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a54:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a58:	e9 ac fe ff ff       	jmp    c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a5d:	c7 44 24 04 14 10 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021014
c0009a65:	e9 a0 0e 00 00       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>

c0009a6a <VAS::virtualToPhysical(unsigned long)>:
c0009a6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a6e:	50                   	push   eax
c0009a6f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a73:	52                   	push   edx
c0009a74:	e8 71 fe ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009a79:	59                   	pop    ecx
c0009a7a:	5a                   	pop    edx
c0009a7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a7d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a82:	c3                   	ret    
c0009a83:	90                   	nop

c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009a84:	55                   	push   ebp
c0009a85:	57                   	push   edi
c0009a86:	56                   	push   esi
c0009a87:	53                   	push   ebx
c0009a88:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a8c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009a90:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009a94:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009a98:	85 db                	test   ebx,ebx
c0009a9a:	7e 24                	jle    c0009ac0 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009a9c:	c1 e3 0c             	shl    ebx,0xc
c0009a9f:	01 f3                	add    ebx,esi
c0009aa1:	56                   	push   esi
c0009aa2:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aa8:	55                   	push   ebp
c0009aa9:	e8 3c fe ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009aae:	5a                   	pop    edx
c0009aaf:	59                   	pop    ecx
c0009ab0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ab2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ab6:	21 f9                	and    ecx,edi
c0009ab8:	09 d1                	or     ecx,edx
c0009aba:	39 f3                	cmp    ebx,esi
c0009abc:	89 08                	mov    DWORD PTR [eax],ecx
c0009abe:	75 e1                	jne    c0009aa1 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ac0:	5b                   	pop    ebx
c0009ac1:	5e                   	pop    esi
c0009ac2:	5f                   	pop    edi
c0009ac3:	5d                   	pop    ebp
c0009ac4:	c3                   	ret    
c0009ac5:	90                   	nop

c0009ac6 <VAS::VAS()>:
c0009ac6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ad1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ad5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009adc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae0:	a3 b0 6f 02 c0       	mov    ds:0xc0026fb0,eax
c0009ae5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae9:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009aed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af1:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009af4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af8:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009aff:	ba 7d 50 02 c0       	mov    edx,0xc002507d
c0009b04:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b09:	29 c2                	sub    edx,eax
c0009b0b:	89 d0                	mov    eax,edx
c0009b0d:	05 ff 0f 00 00       	add    eax,0xfff
c0009b12:	c1 e8 0c             	shr    eax,0xc
c0009b15:	89 c2                	mov    edx,eax
c0009b17:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b1c:	6a 04                	push   0x4
c0009b1e:	6a ff                	push   0xffffffff
c0009b20:	52                   	push   edx
c0009b21:	50                   	push   eax
c0009b22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b26:	e8 59 ff ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b2b:	83 c4 14             	add    esp,0x14
c0009b2e:	90                   	nop
c0009b2f:	c3                   	ret    

c0009b30 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b30:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009b35:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b3b:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b42:	75 01                	jne    c0009b45 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b44:	c3                   	ret    
c0009b45:	68 80 00 00 00       	push   0x80
c0009b4a:	6a ff                	push   0xffffffff
c0009b4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b50:	50                   	push   eax
c0009b51:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b55:	52                   	push   edx
c0009b56:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b5a:	51                   	push   ecx
c0009b5b:	e8 24 ff ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b60:	83 c4 14             	add    esp,0x14
c0009b63:	c3                   	ret    

c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b68:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b6f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b72:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b77:	83 f8 01             	cmp    eax,0x1
c0009b7a:	19 c0                	sbb    eax,eax
c0009b7c:	83 ca 03             	or     edx,0x3
c0009b7f:	83 e0 fc             	and    eax,0xfffffffc
c0009b82:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009b89:	0f 20 d8             	mov    eax,cr3
c0009b8c:	0f 22 d8             	mov    cr3,eax
c0009b8f:	c3                   	ret    

c0009b90 <VAS::~VAS()>:
c0009b90:	83 ec 2c             	sub    esp,0x2c
c0009b93:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009b9b:	fa                   	cli    
c0009b9c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009ba1:	83 c0 01             	add    eax,0x1
c0009ba4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009ba9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bae:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bb0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bb3:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bb9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bbd:	6a 01                	push   0x1
c0009bbf:	50                   	push   eax
c0009bc0:	e8 9f ff ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c0009bc5:	83 c4 0c             	add    esp,0xc
c0009bc8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bd0:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bd8:	0f 8f d8 00 00 00    	jg     c0009cb6 <VAS::~VAS()+0x126>
c0009bde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009be2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009be5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009be9:	c1 e2 02             	shl    edx,0x2
c0009bec:	01 d0                	add    eax,edx
c0009bee:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bf0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bf8:	83 e0 01             	and    eax,0x1
c0009bfb:	0f 84 ab 00 00 00    	je     c0009cac <VAS::~VAS()+0x11c>
c0009c01:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c09:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c11:	7f 74                	jg     c0009c87 <VAS::~VAS()+0xf7>
c0009c13:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c17:	c1 e0 0a             	shl    eax,0xa
c0009c1a:	89 c2                	mov    edx,eax
c0009c1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c20:	01 d0                	add    eax,edx
c0009c22:	c1 e0 0c             	shl    eax,0xc
c0009c25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c29:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c30:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c33:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c3d:	6a 01                	push   0x1
c0009c3f:	50                   	push   eax
c0009c40:	e8 77 fc ff ff       	call   c00098bc <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c45:	83 c4 0c             	add    esp,0xc
c0009c48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c5a:	25 01 04 00 00       	and    eax,0x401
c0009c5f:	3d 01 04 00 00       	cmp    eax,0x401
c0009c64:	75 1a                	jne    c0009c80 <VAS::~VAS()+0xf0>
c0009c66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c6a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c6f:	83 ec 0c             	sub    esp,0xc
c0009c72:	50                   	push   eax
c0009c73:	e8 01 e1 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009c78:	83 c4 10             	add    esp,0x10
c0009c7b:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c80:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009c85:	eb 82                	jmp    c0009c09 <VAS::~VAS()+0x79>
c0009c87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c8b:	25 00 04 00 00       	and    eax,0x400
c0009c90:	74 1a                	je     c0009cac <VAS::~VAS()+0x11c>
c0009c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c96:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c9b:	83 ec 0c             	sub    esp,0xc
c0009c9e:	50                   	push   eax
c0009c9f:	e8 d5 e0 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009ca4:	83 c4 10             	add    esp,0x10
c0009ca7:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cac:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cb1:	e9 1a ff ff ff       	jmp    c0009bd0 <VAS::~VAS()+0x40>
c0009cb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cbd:	83 ec 0c             	sub    esp,0xc
c0009cc0:	50                   	push   eax
c0009cc1:	e8 43 fc ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ccd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cd0:	83 ec 0c             	sub    esp,0xc
c0009cd3:	50                   	push   eax
c0009cd4:	e8 a0 e0 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009cd9:	83 c4 10             	add    esp,0x10
c0009cdc:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ce1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009ce6:	83 e8 01             	sub    eax,0x1
c0009ce9:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009cee:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009cf3:	85 c0                	test   eax,eax
c0009cf5:	75 01                	jne    c0009cf8 <VAS::~VAS()+0x168>
c0009cf7:	fb                   	sti    
c0009cf8:	90                   	nop
c0009cf9:	83 c4 2c             	add    esp,0x2c
c0009cfc:	c3                   	ret    
c0009cfd:	90                   	nop

c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009cfe:	55                   	push   ebp
c0009cff:	57                   	push   edi
c0009d00:	56                   	push   esi
c0009d01:	53                   	push   ebx
c0009d02:	83 ec 1c             	sub    esp,0x1c
c0009d05:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d09:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009d0d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009d11:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d17:	77 08                	ja     c0009d21 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c0009d19:	0f 20 d8             	mov    eax,cr3
c0009d1c:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0009d1f:	75 43                	jne    c0009d64 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0009d21:	89 d8                	mov    eax,ebx
c0009d23:	09 f8                	or     eax,edi
c0009d25:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d2a:	75 53                	jne    c0009d7f <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c0009d2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009d2f:	89 de                	mov    esi,ebx
c0009d31:	c1 ee 16             	shr    esi,0x16
c0009d34:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d3b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d3f:	74 50                	je     c0009d91 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c0009d41:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d45:	c1 eb 0a             	shr    ebx,0xa
c0009d48:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d4e:	c1 e6 0c             	shl    esi,0xc
c0009d51:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d57:	09 c7                	or     edi,eax
c0009d59:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0009d5c:	83 c4 1c             	add    esp,0x1c
c0009d5f:	5b                   	pop    ebx
c0009d60:	5e                   	pop    esi
c0009d61:	5f                   	pop    edi
c0009d62:	5d                   	pop    ebp
c0009d63:	c3                   	ret    
c0009d64:	83 ec 0c             	sub    esp,0xc
c0009d67:	68 38 10 02 c0       	push   0xc0021038
c0009d6c:	e8 99 0b 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0009d71:	89 d8                	mov    eax,ebx
c0009d73:	83 c4 10             	add    esp,0x10
c0009d76:	09 f8                	or     eax,edi
c0009d78:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d7d:	74 ad                	je     c0009d2c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d7f:	83 ec 0c             	sub    esp,0xc
c0009d82:	68 a0 10 02 c0       	push   0xc00210a0
c0009d87:	e8 4f 78 00 00       	call   c00115db <KePanic(char const*)>
c0009d8c:	83 c4 10             	add    esp,0x10
c0009d8f:	eb 9b                	jmp    c0009d2c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d95:	e8 48 e0 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009d9a:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c0009da0:	83 ec 0c             	sub    esp,0xc
c0009da3:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009dab:	6a 01                	push   0x1
c0009dad:	e8 43 f8 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0009db2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009db9:	6a 01                	push   0x1
c0009dbb:	50                   	push   eax
c0009dbc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009dc0:	52                   	push   edx
c0009dc1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009dc5:	51                   	push   ecx
c0009dc6:	e8 3d 01 00 00       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009dcb:	83 c4 1c             	add    esp,0x1c
c0009dce:	68 00 10 00 00       	push   0x1000
c0009dd3:	6a 00                	push   0x0
c0009dd5:	50                   	push   eax
c0009dd6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dda:	e8 11 67 ff ff       	call   c00004f0 <memset>
c0009ddf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009de3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009de6:	e8 1e fb ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009deb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009def:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009df3:	83 c4 10             	add    esp,0x10
c0009df6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0009df9:	0d 07 04 00 00       	or     eax,0x407
c0009dfe:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0009e01:	e9 3b ff ff ff       	jmp    c0009d41 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c0009e06 <VAS::allocatePages(int, int)>:
c0009e06:	55                   	push   ebp
c0009e07:	57                   	push   edi
c0009e08:	56                   	push   esi
c0009e09:	53                   	push   ebx
c0009e0a:	83 ec 1c             	sub    esp,0x1c
c0009e0d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e11:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e15:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e19:	75 75                	jne    c0009e90 <VAS::allocatePages(int, int)+0x8a>
c0009e1b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e22:	85 c0                	test   eax,eax
c0009e24:	74 49                	je     c0009e6f <VAS::allocatePages(int, int)+0x69>
c0009e26:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e2a:	89 d5                	mov    ebp,edx
c0009e2c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e30:	c1 e5 0c             	shl    ebp,0xc
c0009e33:	01 dd                	add    ebp,ebx
c0009e35:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e38:	81 cf 00 04 00 00    	or     edi,0x400
c0009e3e:	85 d2                	test   edx,edx
c0009e40:	7e 1b                	jle    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009e42:	e8 9b df ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009e47:	57                   	push   edi
c0009e48:	53                   	push   ebx
c0009e49:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e4f:	50                   	push   eax
c0009e50:	56                   	push   esi
c0009e51:	e8 a8 fe ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e56:	83 c4 10             	add    esp,0x10
c0009e59:	39 dd                	cmp    ebp,ebx
c0009e5b:	75 e5                	jne    c0009e42 <VAS::allocatePages(int, int)+0x3c>
c0009e5d:	0f 20 d8             	mov    eax,cr3
c0009e60:	0f 22 d8             	mov    cr3,eax
c0009e63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e67:	83 c4 1c             	add    esp,0x1c
c0009e6a:	5b                   	pop    ebx
c0009e6b:	5e                   	pop    esi
c0009e6c:	5f                   	pop    edi
c0009e6d:	5d                   	pop    ebp
c0009e6e:	c3                   	ret    
c0009e6f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e73:	83 ec 0c             	sub    esp,0xc
c0009e76:	68 c4 10 02 c0       	push   0xc00210c4
c0009e7b:	e8 5b 77 00 00       	call   c00115db <KePanic(char const*)>
c0009e80:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e83:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009e87:	83 c4 10             	add    esp,0x10
c0009e8a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e8e:	eb 96                	jmp    c0009e26 <VAS::allocatePages(int, int)+0x20>
c0009e90:	83 ec 0c             	sub    esp,0xc
c0009e93:	52                   	push   edx
c0009e94:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009e98:	e8 58 f7 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0009e9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea1:	83 c4 10             	add    esp,0x10
c0009ea4:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ea9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009ead:	77 38                	ja     c0009ee7 <VAS::allocatePages(int, int)+0xe1>
c0009eaf:	85 d2                	test   edx,edx
c0009eb1:	7e aa                	jle    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009eb3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009eb7:	c1 e2 0c             	shl    edx,0xc
c0009eba:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009ebe:	81 cf 00 04 00 00    	or     edi,0x400
c0009ec4:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c0009ec7:	e8 16 df ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009ecc:	57                   	push   edi
c0009ecd:	53                   	push   ebx
c0009ece:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ed4:	50                   	push   eax
c0009ed5:	56                   	push   esi
c0009ed6:	e8 23 fe ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009edb:	83 c4 10             	add    esp,0x10
c0009ede:	39 dd                	cmp    ebp,ebx
c0009ee0:	75 e5                	jne    c0009ec7 <VAS::allocatePages(int, int)+0xc1>
c0009ee2:	e9 76 ff ff ff       	jmp    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009ee7:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009eec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ef2:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009ef9:	74 b4                	je     c0009eaf <VAS::allocatePages(int, int)+0xa9>
c0009efb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009eff:	80 cc 01             	or     ah,0x1
c0009f02:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f06:	eb a7                	jmp    c0009eaf <VAS::allocatePages(int, int)+0xa9>

c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f08:	55                   	push   ebp
c0009f09:	57                   	push   edi
c0009f0a:	56                   	push   esi
c0009f0b:	53                   	push   ebx
c0009f0c:	83 ec 1c             	sub    esp,0x1c
c0009f0f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009f13:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009f17:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009f1b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009f1f:	85 db                	test   ebx,ebx
c0009f21:	7e 2c                	jle    c0009f4f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c0009f23:	c1 e3 0c             	shl    ebx,0xc
c0009f26:	8d 04 33             	lea    eax,[ebx+esi*1]
c0009f29:	89 f3                	mov    ebx,esi
c0009f2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009f2f:	55                   	push   ebp
c0009f30:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0009f34:	29 f2                	sub    edx,esi
c0009f36:	01 da                	add    edx,ebx
c0009f38:	52                   	push   edx
c0009f39:	53                   	push   ebx
c0009f3a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f40:	57                   	push   edi
c0009f41:	e8 b8 fd ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f46:	83 c4 10             	add    esp,0x10
c0009f49:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0009f4d:	75 e0                	jne    c0009f2f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c0009f4f:	0f 20 d8             	mov    eax,cr3
c0009f52:	0f 22 d8             	mov    cr3,eax
c0009f55:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009f59:	83 c4 1c             	add    esp,0x1c
c0009f5c:	5b                   	pop    ebx
c0009f5d:	5e                   	pop    esi
c0009f5e:	5f                   	pop    edi
c0009f5f:	5d                   	pop    ebp
c0009f60:	c3                   	ret    
c0009f61:	90                   	nop

c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f62:	55                   	push   ebp
c0009f63:	57                   	push   edi
c0009f64:	56                   	push   esi
c0009f65:	53                   	push   ebx
c0009f66:	83 ec 1c             	sub    esp,0x1c
c0009f69:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f6d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f71:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009f75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f79:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009f7d:	09 d8                	or     eax,ebx
c0009f7f:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f84:	75 4b                	jne    c0009fd1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f86:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009f89:	89 de                	mov    esi,ebx
c0009f8b:	c1 ee 16             	shr    esi,0x16
c0009f8e:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0009f95:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0009f99:	74 48                	je     c0009fe3 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0009f9b:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0009fa0:	c1 eb 0a             	shr    ebx,0xa
c0009fa3:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0009fa7:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0009fab:	83 ff 01             	cmp    edi,0x1
c0009fae:	19 c0                	sbb    eax,eax
c0009fb0:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009fb6:	c1 e6 0c             	shl    esi,0xc
c0009fb9:	25 00 00 c0 ff       	and    eax,0xffc00000
c0009fbe:	01 f3                	add    ebx,esi
c0009fc0:	09 ca                	or     edx,ecx
c0009fc2:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0009fc9:	83 c4 1c             	add    esp,0x1c
c0009fcc:	5b                   	pop    ebx
c0009fcd:	5e                   	pop    esi
c0009fce:	5f                   	pop    edi
c0009fcf:	5d                   	pop    ebp
c0009fd0:	c3                   	ret    
c0009fd1:	83 ec 0c             	sub    esp,0xc
c0009fd4:	68 f0 10 02 c0       	push   0xc00210f0
c0009fd9:	e8 fd 75 00 00       	call   c00115db <KePanic(char const*)>
c0009fde:	83 c4 10             	add    esp,0x10
c0009fe1:	eb a3                	jmp    c0009f86 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c0009fe3:	e8 fa dd ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009fe8:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c0009fee:	83 ec 0c             	sub    esp,0xc
c0009ff1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009ff5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0009ff9:	6a 01                	push   0x1
c0009ffb:	e8 f5 f5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a000:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a007:	6a 01                	push   0x1
c000a009:	50                   	push   eax
c000a00a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a00e:	50                   	push   eax
c000a00f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a013:	51                   	push   ecx
c000a014:	e8 ef fe ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a019:	83 c4 1c             	add    esp,0x1c
c000a01c:	68 00 10 00 00       	push   0x1000
c000a021:	6a 00                	push   0x0
c000a023:	50                   	push   eax
c000a024:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a028:	e8 c3 64 ff ff       	call   c00004f0 <memset>
c000a02d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a031:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a034:	e8 d0 f8 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000a039:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a03d:	83 c4 10             	add    esp,0x10
c000a040:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a043:	81 ca 07 04 00 00    	or     edx,0x407
c000a049:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c000a04c:	e9 4a ff ff ff       	jmp    c0009f9b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c000a051:	90                   	nop

c000a052 <VAS::VAS(bool)>:
c000a052:	53                   	push   ebx
c000a053:	83 ec 28             	sub    esp,0x28
c000a056:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a05a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a05e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a062:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a069:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a06d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a078:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a07c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a07f:	e8 5e dd ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a084:	89 c2                	mov    edx,eax
c000a086:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a08d:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000a093:	83 ec 0c             	sub    esp,0xc
c000a096:	6a 01                	push   0x1
c000a098:	e8 58 f5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a09d:	83 c4 10             	add    esp,0x10
c000a0a0:	89 c2                	mov    edx,eax
c000a0a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0a9:	83 ec 0c             	sub    esp,0xc
c000a0ac:	6a 03                	push   0x3
c000a0ae:	6a 01                	push   0x1
c000a0b0:	52                   	push   edx
c000a0b1:	50                   	push   eax
c000a0b2:	53                   	push   ebx
c000a0b3:	e8 50 fe ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0b8:	83 c4 20             	add    esp,0x20
c000a0bb:	89 c2                	mov    edx,eax
c000a0bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0c1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0c4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0cc:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0d4:	7f 1d                	jg     c000a0f3 <VAS::VAS(bool)+0xa1>
c000a0d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0e1:	c1 e2 02             	shl    edx,0x2
c000a0e4:	01 d0                	add    eax,edx
c000a0e6:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a0ec:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a0f1:	eb d9                	jmp    c000a0cc <VAS::VAS(bool)+0x7a>
c000a0f3:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a0fb:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a103:	7f 7e                	jg     c000a183 <VAS::VAS(bool)+0x131>
c000a105:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a109:	2d 00 02 00 00       	sub    eax,0x200
c000a10e:	c1 e0 0c             	shl    eax,0xc
c000a111:	83 c8 05             	or     eax,0x5
c000a114:	89 c2                	mov    edx,eax
c000a116:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a11b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a121:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a127:	83 e0 10             	and    eax,0x10
c000a12a:	0f b6 c0             	movzx  eax,al
c000a12d:	85 c0                	test   eax,eax
c000a12f:	74 07                	je     c000a138 <VAS::VAS(bool)+0xe6>
c000a131:	b8 00 01 00 00       	mov    eax,0x100
c000a136:	eb 05                	jmp    c000a13d <VAS::VAS(bool)+0xeb>
c000a138:	b8 00 00 00 00       	mov    eax,0x0
c000a13d:	09 d0                	or     eax,edx
c000a13f:	89 c1                	mov    ecx,eax
c000a141:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a145:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a148:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a14c:	c1 e2 02             	shl    edx,0x2
c000a14f:	01 d0                	add    eax,edx
c000a151:	89 ca                	mov    edx,ecx
c000a153:	89 10                	mov    DWORD PTR [eax],edx
c000a155:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a159:	2d 40 03 00 00       	sub    eax,0x340
c000a15e:	83 f8 7f             	cmp    eax,0x7f
c000a161:	77 16                	ja     c000a179 <VAS::VAS(bool)+0x127>
c000a163:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a167:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a16a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a16e:	c1 e2 02             	shl    edx,0x2
c000a171:	01 d0                	add    eax,edx
c000a173:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a179:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a17e:	e9 78 ff ff ff       	jmp    c000a0fb <VAS::VAS(bool)+0xa9>
c000a183:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a188:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a18e:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a194:	83 e0 10             	and    eax,0x10
c000a197:	0f b6 c0             	movzx  eax,al
c000a19a:	85 c0                	test   eax,eax
c000a19c:	74 07                	je     c000a1a5 <VAS::VAS(bool)+0x153>
c000a19e:	b8 03 41 00 00       	mov    eax,0x4103
c000a1a3:	eb 05                	jmp    c000a1aa <VAS::VAS(bool)+0x158>
c000a1a5:	b8 03 40 00 00       	mov    eax,0x4003
c000a1aa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1ae:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1b1:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1b7:	89 02                	mov    DWORD PTR [edx],eax
c000a1b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1bd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1c0:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a1c5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1cb:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1d1:	83 e0 10             	and    eax,0x10
c000a1d4:	0f b6 c0             	movzx  eax,al
c000a1d7:	85 c0                	test   eax,eax
c000a1d9:	74 07                	je     c000a1e2 <VAS::VAS(bool)+0x190>
c000a1db:	b8 00 01 00 00       	mov    eax,0x100
c000a1e0:	eb 05                	jmp    c000a1e7 <VAS::VAS(bool)+0x195>
c000a1e2:	b8 00 00 00 00       	mov    eax,0x0
c000a1e7:	09 c2                	or     edx,eax
c000a1e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1ed:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a1f0:	05 fc 0f 00 00       	add    eax,0xffc
c000a1f5:	83 ca 03             	or     edx,0x3
c000a1f8:	89 10                	mov    DWORD PTR [eax],edx
c000a1fa:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a1ff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a205:	83 ec 0c             	sub    esp,0xc
c000a208:	50                   	push   eax
c000a209:	e8 9a 2a 00 00       	call   c000cca8 <Device::getName()>
c000a20e:	83 c4 10             	add    esp,0x10
c000a211:	83 ec 08             	sub    esp,0x8
c000a214:	68 c0 12 02 c0       	push   0xc00212c0
c000a219:	50                   	push   eax
c000a21a:	e8 61 65 ff ff       	call   c0000780 <strcmp>
c000a21f:	83 c4 10             	add    esp,0x10
c000a222:	85 c0                	test   eax,eax
c000a224:	0f 94 c0             	sete   al
c000a227:	0f b6 c0             	movzx  eax,al
c000a22a:	85 c0                	test   eax,eax
c000a22c:	74 68                	je     c000a296 <VAS::VAS(bool)+0x244>
c000a22e:	fa                   	cli    
c000a22f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a234:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a23a:	05 7c 09 00 00       	add    eax,0x97c
c000a23f:	83 ec 0c             	sub    esp,0xc
c000a242:	50                   	push   eax
c000a243:	e8 86 d3 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a248:	83 c4 10             	add    esp,0x10
c000a24b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a250:	89 c3                	mov    ebx,eax
c000a252:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a257:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a25d:	05 7c 09 00 00       	add    eax,0x97c
c000a262:	83 ec 0c             	sub    esp,0xc
c000a265:	50                   	push   eax
c000a266:	e8 63 d3 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a26b:	83 c4 10             	add    esp,0x10
c000a26e:	83 ec 08             	sub    esp,0x8
c000a271:	50                   	push   eax
c000a272:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a276:	e8 6f f6 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a27b:	83 c4 10             	add    esp,0x10
c000a27e:	8b 00                	mov    eax,DWORD PTR [eax]
c000a280:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a285:	6a 11                	push   0x11
c000a287:	53                   	push   ebx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28d:	e8 6c fa ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a292:	83 c4 10             	add    esp,0x10
c000a295:	fb                   	sti    
c000a296:	90                   	nop
c000a297:	83 c4 28             	add    esp,0x28
c000a29a:	5b                   	pop    ebx
c000a29b:	c3                   	ret    

c000a29c <VAS::evict(unsigned long)>:
c000a29c:	55                   	push   ebp
c000a29d:	57                   	push   edi
c000a29e:	56                   	push   esi
c000a29f:	53                   	push   ebx
c000a2a0:	83 ec 1c             	sub    esp,0x1c
c000a2a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2a7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2af:	e8 96 f4 ff ff       	call   c000974a <Virt::allocateSwapfilePage()>
c000a2b4:	89 c7                	mov    edi,eax
c000a2b6:	a1 2c 37 02 c0       	mov    eax,ds:0xc002372c
c000a2bb:	85 c0                	test   eax,eax
c000a2bd:	7e 40                	jle    c000a2ff <VAS::evict(unsigned long)+0x63>
c000a2bf:	89 ee                	mov    esi,ebp
c000a2c1:	31 db                	xor    ebx,ebx
c000a2c3:	83 ec 0c             	sub    esp,0xc
c000a2c6:	57                   	push   edi
c000a2c7:	e8 68 f4 ff ff       	call   c0009734 <Virt::swapIDToSector(unsigned long)>
c000a2cc:	31 d2                	xor    edx,edx
c000a2ce:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2d1:	81 c6 00 02 00 00    	add    esi,0x200
c000a2d7:	6a 01                	push   0x1
c000a2d9:	52                   	push   edx
c000a2da:	01 d8                	add    eax,ebx
c000a2dc:	83 c3 01             	add    ebx,0x1
c000a2df:	50                   	push   eax
c000a2e0:	0f be 05 38 37 02 c0 	movsx  eax,BYTE PTR ds:0xc0023738
c000a2e7:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c000a2ee:	50                   	push   eax
c000a2ef:	e8 76 3b 00 00       	call   c000de6a <LogicalDisk::write(unsigned long long, int, void*)>
c000a2f4:	83 c4 20             	add    esp,0x20
c000a2f7:	39 1d 2c 37 02 c0    	cmp    DWORD PTR ds:0xc002372c,ebx
c000a2fd:	7f c4                	jg     c000a2c3 <VAS::evict(unsigned long)+0x27>
c000a2ff:	c1 e7 0c             	shl    edi,0xc
c000a302:	83 ec 08             	sub    esp,0x8
c000a305:	55                   	push   ebp
c000a306:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a30a:	50                   	push   eax
c000a30b:	e8 da f5 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a310:	8b 10                	mov    edx,DWORD PTR [eax]
c000a312:	89 d3                	mov    ebx,edx
c000a314:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a31a:	09 d7                	or     edi,edx
c000a31c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a322:	89 38                	mov    DWORD PTR [eax],edi
c000a324:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a327:	8b 15 a8 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fa8
c000a32d:	83 c2 01             	add    edx,0x1
c000a330:	89 15 a8 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa8,edx
c000a336:	e8 3e da ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c000a33b:	0f 20 d8             	mov    eax,cr3
c000a33e:	0f 22 d8             	mov    cr3,eax
c000a341:	8b 0d a8 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fa8
c000a347:	51                   	push   ecx
c000a348:	55                   	push   ebp
c000a349:	53                   	push   ebx
c000a34a:	68 14 11 02 c0       	push   0xc0021114
c000a34f:	e8 b6 05 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a354:	a1 a4 6f 02 c0       	mov    eax,ds:0xc0026fa4
c000a359:	c7 44 24 50 ce 12 02 c0 	mov    DWORD PTR [esp+0x50],0xc00212ce
c000a361:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a365:	8d 50 01             	lea    edx,[eax+0x1]
c000a368:	89 15 a4 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa4,edx
c000a36e:	83 c4 3c             	add    esp,0x3c
c000a371:	5b                   	pop    ebx
c000a372:	5e                   	pop    esi
c000a373:	5f                   	pop    edi
c000a374:	5d                   	pop    ebp
c000a375:	e9 90 05 00 00       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>

c000a37a <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a37a:	55                   	push   ebp
c000a37b:	57                   	push   edi
c000a37c:	56                   	push   esi
c000a37d:	53                   	push   ebx
c000a37e:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a384:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c000a38b:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c000a391:	77 78                	ja     c000a40b <VAS::tryLoadBackOffDisk(unsigned long)+0x91>
c000a393:	83 ec 08             	sub    esp,0x8
c000a396:	53                   	push   ebx
c000a397:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a39d:	68 f1 12 02 c0       	push   0xc00212f1
c000a3a2:	e8 63 05 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a3a7:	58                   	pop    eax
c000a3a8:	5a                   	pop    edx
c000a3a9:	53                   	push   ebx
c000a3aa:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3b1:	51                   	push   ecx
c000a3b2:	e8 33 f5 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a3b7:	83 c4 10             	add    esp,0x10
c000a3ba:	85 c0                	test   eax,eax
c000a3bc:	89 c5                	mov    ebp,eax
c000a3be:	0f 95 c0             	setne  al
c000a3c1:	85 db                	test   ebx,ebx
c000a3c3:	0f 95 c2             	setne  dl
c000a3c6:	21 d0                	and    eax,edx
c000a3c8:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a3cc:	a8 01                	test   al,0x1
c000a3ce:	75 0f                	jne    c000a3df <VAS::tryLoadBackOffDisk(unsigned long)+0x65>
c000a3d0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a3d4:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3da:	5b                   	pop    ebx
c000a3db:	5e                   	pop    esi
c000a3dc:	5f                   	pop    edi
c000a3dd:	5d                   	pop    ebp
c000a3de:	c3                   	ret    
c000a3df:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a3e2:	f6 c4 02             	test   ah,0x2
c000a3e5:	75 39                	jne    c000a420 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c000a3e7:	89 c2                	mov    edx,eax
c000a3e9:	81 e2 01 04 00 00    	and    edx,0x401
c000a3ef:	81 fa 00 04 00 00    	cmp    edx,0x400
c000a3f5:	74 73                	je     c000a46a <VAS::tryLoadBackOffDisk(unsigned long)+0xf0>
c000a3f7:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c000a3fc:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a400:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a406:	5b                   	pop    ebx
c000a407:	5e                   	pop    esi
c000a408:	5f                   	pop    edi
c000a409:	5d                   	pop    ebp
c000a40a:	c3                   	ret    
c000a40b:	83 ec 0c             	sub    esp,0xc
c000a40e:	68 df 12 02 c0       	push   0xc00212df
c000a413:	e8 c3 71 00 00       	call   c00115db <KePanic(char const*)>
c000a418:	83 c4 10             	add    esp,0x10
c000a41b:	e9 73 ff ff ff       	jmp    c000a393 <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c000a420:	83 ec 0c             	sub    esp,0xc
c000a423:	89 de                	mov    esi,ebx
c000a425:	68 44 11 02 c0       	push   0xc0021144
c000a42a:	e8 db 04 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a42f:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a433:	e8 aa d9 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a438:	ba 00 10 00 00       	mov    edx,0x1000
c000a43d:	89 d1                	mov    ecx,edx
c000a43f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a441:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000a444:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a44a:	09 c8                	or     eax,ecx
c000a44c:	83 c8 02             	or     eax,0x2
c000a44f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000a452:	0f 20 d8             	mov    eax,cr3
c000a455:	0f 22 d8             	mov    cr3,eax
c000a458:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a45c:	89 df                	mov    edi,ebx
c000a45e:	89 d1                	mov    ecx,edx
c000a460:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a462:	83 c4 10             	add    esp,0x10
c000a465:	e9 66 ff ff ff       	jmp    c000a3d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c000a46a:	c1 e8 0c             	shr    eax,0xc
c000a46d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a471:	e8 6c d9 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a476:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000a479:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a47f:	09 c2                	or     edx,eax
c000a481:	81 ca 01 08 00 00    	or     edx,0x801
c000a487:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c000a48a:	a1 2c 37 02 c0       	mov    eax,ds:0xc002372c
c000a48f:	85 c0                	test   eax,eax
c000a491:	7e 44                	jle    c000a4d7 <VAS::tryLoadBackOffDisk(unsigned long)+0x15d>
c000a493:	89 df                	mov    edi,ebx
c000a495:	31 f6                	xor    esi,esi
c000a497:	83 ec 0c             	sub    esp,0xc
c000a49a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a49e:	51                   	push   ecx
c000a49f:	e8 90 f2 ff ff       	call   c0009734 <Virt::swapIDToSector(unsigned long)>
c000a4a4:	31 d2                	xor    edx,edx
c000a4a6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a4a9:	81 c7 00 02 00 00    	add    edi,0x200
c000a4af:	6a 01                	push   0x1
c000a4b1:	52                   	push   edx
c000a4b2:	01 f0                	add    eax,esi
c000a4b4:	83 c6 01             	add    esi,0x1
c000a4b7:	50                   	push   eax
c000a4b8:	0f be 05 38 37 02 c0 	movsx  eax,BYTE PTR ds:0xc0023738
c000a4bf:	8b 2c 85 7c b7 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd4884]
c000a4c6:	55                   	push   ebp
c000a4c7:	e8 32 39 00 00       	call   c000ddfe <LogicalDisk::read(unsigned long long, int, void*)>
c000a4cc:	83 c4 20             	add    esp,0x20
c000a4cf:	39 35 2c 37 02 c0    	cmp    DWORD PTR ds:0xc002372c,esi
c000a4d5:	7f c0                	jg     c000a497 <VAS::tryLoadBackOffDisk(unsigned long)+0x11d>
c000a4d7:	a1 a8 6f 02 c0       	mov    eax,ds:0xc0026fa8
c000a4dc:	83 ec 04             	sub    esp,0x4
c000a4df:	83 e8 01             	sub    eax,0x1
c000a4e2:	50                   	push   eax
c000a4e3:	53                   	push   ebx
c000a4e4:	68 04 13 02 c0       	push   0xc0021304
c000a4e9:	a3 a8 6f 02 c0       	mov    ds:0xc0026fa8,eax
c000a4ee:	e8 17 04 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a4f3:	58                   	pop    eax
c000a4f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a4f8:	52                   	push   edx
c000a4f9:	e8 13 f2 ff ff       	call   c0009711 <Virt::freeSwapfilePage(unsigned long)>
c000a4fe:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000a503:	83 c4 10             	add    esp,0x10
c000a506:	83 e8 01             	sub    eax,0x1
c000a509:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000a50e:	85 c0                	test   eax,eax
c000a510:	75 01                	jne    c000a513 <VAS::tryLoadBackOffDisk(unsigned long)+0x199>
c000a512:	fb                   	sti    
c000a513:	0f 20 d8             	mov    eax,cr3
c000a516:	0f 22 d8             	mov    cr3,eax
c000a519:	e9 b2 fe ff ff       	jmp    c000a3d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>

c000a51e <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a51e:	55                   	push   ebp
c000a51f:	57                   	push   edi
c000a520:	56                   	push   esi
c000a521:	53                   	push   ebx
c000a522:	83 ec 28             	sub    esp,0x28
c000a525:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a529:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a52d:	50                   	push   eax
c000a52e:	e8 c2 f0 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a533:	83 c4 0c             	add    esp,0xc
c000a536:	6a 07                	push   0x7
c000a538:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a53c:	52                   	push   edx
c000a53d:	89 c5                	mov    ebp,eax
c000a53f:	53                   	push   ebx
c000a540:	e8 c1 f8 ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c000a545:	83 c4 10             	add    esp,0x10
c000a548:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a54c:	89 c7                	mov    edi,eax
c000a54e:	85 c9                	test   ecx,ecx
c000a550:	74 2f                	je     c000a581 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a552:	31 f6                	xor    esi,esi
c000a554:	e8 89 d8 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a559:	83 c6 01             	add    esi,0x1
c000a55c:	6a 03                	push   0x3
c000a55e:	55                   	push   ebp
c000a55f:	50                   	push   eax
c000a560:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a564:	53                   	push   ebx
c000a565:	e8 94 f7 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a56a:	6a 07                	push   0x7
c000a56c:	57                   	push   edi
c000a56d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a571:	50                   	push   eax
c000a572:	53                   	push   ebx
c000a573:	e8 86 f7 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a578:	83 c4 20             	add    esp,0x20
c000a57b:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c000a57f:	75 d3                	jne    c000a554 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a581:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a585:	89 28                	mov    DWORD PTR [eax],ebp
c000a587:	83 c4 1c             	add    esp,0x1c
c000a58a:	89 f8                	mov    eax,edi
c000a58c:	5b                   	pop    ebx
c000a58d:	5e                   	pop    esi
c000a58e:	5f                   	pop    edi
c000a58f:	5d                   	pop    ebp
c000a590:	c3                   	ret    
c000a591:	90                   	nop

c000a592 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a592:	53                   	push   ebx
c000a593:	83 ec 14             	sub    esp,0x14
c000a596:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a59a:	68 64 11 02 c0       	push   0xc0021164
c000a59f:	e8 66 03 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a5a4:	c7 04 24 c4 11 02 c0 	mov    DWORD PTR [esp],0xc00211c4
c000a5ab:	e8 5a 03 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a5b0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5b4:	83 c4 18             	add    esp,0x18
c000a5b7:	5b                   	pop    ebx
c000a5b8:	e9 4c f3 ff ff       	jmp    c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000a5bd:	90                   	nop

c000a5be <VAS::scanForEviction()>:
c000a5be:	57                   	push   edi
c000a5bf:	56                   	push   esi
c000a5c0:	31 f6                	xor    esi,esi
c000a5c2:	53                   	push   ebx
c000a5c3:	83 ec 10             	sub    esp,0x10
c000a5c6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5ca:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5cd:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5d3:	75 0e                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a5d5:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5d8:	89 da                	mov    edx,ebx
c000a5da:	c1 ea 16             	shr    edx,0x16
c000a5dd:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5e1:	74 57                	je     c000a63a <VAS::scanForEviction()+0x7c>
c000a5e3:	53                   	push   ebx
c000a5e4:	57                   	push   edi
c000a5e5:	e8 00 f3 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a5ea:	5a                   	pop    edx
c000a5eb:	59                   	pop    ecx
c000a5ec:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5ee:	89 d1                	mov    ecx,edx
c000a5f0:	c1 e9 0c             	shr    ecx,0xc
c000a5f3:	74 10                	je     c000a605 <VAS::scanForEviction()+0x47>
c000a5f5:	89 d1                	mov    ecx,edx
c000a5f7:	81 e1 01 08 00 00    	and    ecx,0x801
c000a5fd:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a603:	74 40                	je     c000a645 <VAS::scanForEviction()+0x87>
c000a605:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a60b:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a611:	76 2d                	jbe    c000a640 <VAS::scanForEviction()+0x82>
c000a613:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a61a:	83 c6 01             	add    esi,0x1
c000a61d:	83 fe 03             	cmp    esi,0x3
c000a620:	74 32                	je     c000a654 <VAS::scanForEviction()+0x96>
c000a622:	31 db                	xor    ebx,ebx
c000a624:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a62a:	75 b7                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a62c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a62f:	89 da                	mov    edx,ebx
c000a631:	c1 ea 16             	shr    edx,0x16
c000a634:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a638:	75 a9                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a63a:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a640:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a643:	eb 88                	jmp    c000a5cd <VAS::scanForEviction()+0xf>
c000a645:	f6 c2 20             	test   dl,0x20
c000a648:	74 13                	je     c000a65d <VAS::scanForEviction()+0x9f>
c000a64a:	83 e2 df             	and    edx,0xffffffdf
c000a64d:	89 10                	mov    DWORD PTR [eax],edx
c000a64f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a652:	eb b1                	jmp    c000a605 <VAS::scanForEviction()+0x47>
c000a654:	83 c4 10             	add    esp,0x10
c000a657:	31 c0                	xor    eax,eax
c000a659:	5b                   	pop    ebx
c000a65a:	5e                   	pop    esi
c000a65b:	5f                   	pop    edi
c000a65c:	c3                   	ret    
c000a65d:	89 d0                	mov    eax,edx
c000a65f:	83 ec 08             	sub    esp,0x8
c000a662:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a667:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a66b:	53                   	push   ebx
c000a66c:	68 19 13 02 c0       	push   0xc0021319
c000a671:	e8 94 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a676:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a679:	58                   	pop    eax
c000a67a:	5a                   	pop    edx
c000a67b:	51                   	push   ecx
c000a67c:	57                   	push   edi
c000a67d:	e8 1a fc ff ff       	call   c000a29c <VAS::evict(unsigned long)>
c000a682:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a685:	5b                   	pop    ebx
c000a686:	5e                   	pop    esi
c000a687:	50                   	push   eax
c000a688:	68 2d 13 02 c0       	push   0xc002132d
c000a68d:	e8 78 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a692:	58                   	pop    eax
c000a693:	5a                   	pop    edx
c000a694:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a698:	50                   	push   eax
c000a699:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a69d:	68 40 13 02 c0       	push   0xc0021340
c000a6a2:	e8 63 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a6a7:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6aa:	83 c4 10             	add    esp,0x10
c000a6ad:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6b3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6ba:	83 c4 10             	add    esp,0x10
c000a6bd:	5b                   	pop    ebx
c000a6be:	5e                   	pop    esi
c000a6bf:	5f                   	pop    edi
c000a6c0:	c3                   	ret    

c000a6c1 <mapVASFirstTime>:
c000a6c1:	55                   	push   ebp
c000a6c2:	57                   	push   edi
c000a6c3:	56                   	push   esi
c000a6c4:	53                   	push   ebx
c000a6c5:	83 ec 0c             	sub    esp,0xc
c000a6c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6cd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6d0:	83 fa 01             	cmp    edx,0x1
c000a6d3:	0f 84 cb 00 00 00    	je     c000a7a4 <mapVASFirstTime+0xe3>
c000a6d9:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6dc:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6e1:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6e6:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6e9:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6ef:	c1 e5 15             	shl    ebp,0x15
c000a6f2:	29 eb                	sub    ebx,ebp
c000a6f4:	29 ef                	sub    edi,ebp
c000a6f6:	e8 e7 d6 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a6fb:	83 ec 0c             	sub    esp,0xc
c000a6fe:	68 03 04 00 00       	push   0x403
c000a703:	6a 01                	push   0x1
c000a705:	53                   	push   ebx
c000a706:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a70c:	50                   	push   eax
c000a70d:	56                   	push   esi
c000a70e:	e8 f5 f7 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a713:	83 c4 20             	add    esp,0x20
c000a716:	39 fb                	cmp    ebx,edi
c000a718:	75 dc                	jne    c000a6f6 <mapVASFirstTime+0x35>
c000a71a:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a71f:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a724:	29 eb                	sub    ebx,ebp
c000a726:	29 ef                	sub    edi,ebp
c000a728:	e8 b5 d6 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a72d:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a731:	83 fa 01             	cmp    edx,0x1
c000a734:	19 d2                	sbb    edx,edx
c000a736:	83 ec 0c             	sub    esp,0xc
c000a739:	83 e2 04             	and    edx,0x4
c000a73c:	81 c2 03 04 00 00    	add    edx,0x403
c000a742:	52                   	push   edx
c000a743:	6a 01                	push   0x1
c000a745:	53                   	push   ebx
c000a746:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a74c:	50                   	push   eax
c000a74d:	56                   	push   esi
c000a74e:	e8 b5 f7 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a753:	83 c4 20             	add    esp,0x20
c000a756:	39 df                	cmp    edi,ebx
c000a758:	75 ce                	jne    c000a728 <mapVASFirstTime+0x67>
c000a75a:	83 ec 0c             	sub    esp,0xc
c000a75d:	bb 7c 60 02 c0       	mov    ebx,0xc002607c
c000a762:	6a 04                	push   0x4
c000a764:	81 eb 00 50 02 c0    	sub    ebx,0xc0025000
c000a76a:	6a ff                	push   0xffffffff
c000a76c:	c1 eb 0c             	shr    ebx,0xc
c000a76f:	53                   	push   ebx
c000a770:	68 00 50 02 c0       	push   0xc0025000
c000a775:	56                   	push   esi
c000a776:	e8 09 f3 ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a77b:	83 c4 14             	add    esp,0x14
c000a77e:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c000a783:	6a 04                	push   0x4
c000a785:	6a ff                	push   0xffffffff
c000a787:	53                   	push   ebx
c000a788:	68 00 50 02 c0       	push   0xc0025000
c000a78d:	50                   	push   eax
c000a78e:	e8 f1 f2 ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a793:	0f 20 d8             	mov    eax,cr3
c000a796:	0f 22 d8             	mov    cr3,eax
c000a799:	83 c4 20             	add    esp,0x20
c000a79c:	83 c4 0c             	add    esp,0xc
c000a79f:	5b                   	pop    ebx
c000a7a0:	5e                   	pop    esi
c000a7a1:	5f                   	pop    edi
c000a7a2:	5d                   	pop    ebp
c000a7a3:	c3                   	ret    
c000a7a4:	83 ec 0c             	sub    esp,0xc
c000a7a7:	68 4d 13 02 c0       	push   0xc002134d
c000a7ac:	e8 59 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7b1:	83 c4 10             	add    esp,0x10
c000a7b4:	83 c4 0c             	add    esp,0xc
c000a7b7:	5b                   	pop    ebx
c000a7b8:	5e                   	pop    esi
c000a7b9:	5f                   	pop    edi
c000a7ba:	5d                   	pop    ebp
c000a7bb:	c3                   	ret    

c000a7bc <__cxa_atexit>:
c000a7bc:	31 c0                	xor    eax,eax
c000a7be:	c3                   	ret    

c000a7bf <__cxa_finalize>:
c000a7bf:	c3                   	ret    

c000a7c0 <__stack_chk_fail>:
c000a7c0:	55                   	push   ebp
c000a7c1:	89 e5                	mov    ebp,esp
c000a7c3:	83 ec 10             	sub    esp,0x10
c000a7c6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7c9:	68 66 13 02 c0       	push   0xc0021366
c000a7ce:	e8 37 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7d3:	58                   	pop    eax
c000a7d4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7d7:	5a                   	pop    edx
c000a7d8:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7db:	68 66 13 02 c0       	push   0xc0021366
c000a7e0:	e8 25 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7e5:	c7 04 24 6e 13 02 c0 	mov    DWORD PTR [esp],0xc002136e
c000a7ec:	e8 ea 6d 00 00       	call   c00115db <KePanic(char const*)>
c000a7f1:	83 c4 10             	add    esp,0x10
c000a7f4:	c9                   	leave  
c000a7f5:	c3                   	ret    

c000a7f6 <__cxa_pure_virtual>:
c000a7f6:	83 ec 18             	sub    esp,0x18
c000a7f9:	68 86 13 02 c0       	push   0xc0021386
c000a7fe:	e8 d8 6d 00 00       	call   c00115db <KePanic(char const*)>
c000a803:	83 c4 1c             	add    esp,0x1c
c000a806:	c3                   	ret    

c000a807 <operator new[](unsigned long)>:
c000a807:	e9 c7 d2 ff ff       	jmp    c0007ad3 <malloc>

c000a80c <operator delete(void*, unsigned long)>:
c000a80c:	e9 e2 d2 ff ff       	jmp    c0007af3 <rfree>

c000a811 <operator delete[](void*)>:
c000a811:	e9 dd d2 ff ff       	jmp    c0007af3 <rfree>

c000a816 <operator delete[](void*, unsigned long)>:
c000a816:	e9 d8 d2 ff ff       	jmp    c0007af3 <rfree>

c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a81b:	55                   	push   ebp
c000a81c:	57                   	push   edi
c000a81d:	56                   	push   esi
c000a81e:	53                   	push   ebx
c000a81f:	83 ec 20             	sub    esp,0x20
c000a822:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a826:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c000a82e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a832:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c000a83a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a83e:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c000a846:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c000a84e:	89 f7                	mov    edi,esi
c000a850:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a855:	89 eb                	mov    ebx,ebp
c000a857:	eb 02                	jmp    c000a85b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c000a859:	89 c7                	mov    edi,eax
c000a85b:	31 d2                	xor    edx,edx
c000a85d:	89 f8                	mov    eax,edi
c000a85f:	f7 f1                	div    ecx
c000a861:	83 c3 01             	add    ebx,0x1
c000a864:	39 cf                	cmp    edi,ecx
c000a866:	73 f1                	jae    c000a859 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c000a868:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a86b:	eb 02                	jmp    c000a86f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c000a86d:	89 c6                	mov    esi,eax
c000a86f:	31 d2                	xor    edx,edx
c000a871:	89 f0                	mov    eax,esi
c000a873:	f7 f1                	div    ecx
c000a875:	83 eb 01             	sub    ebx,0x1
c000a878:	39 ce                	cmp    esi,ecx
c000a87a:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a87e:	88 13                	mov    BYTE PTR [ebx],dl
c000a880:	73 eb                	jae    c000a86d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c000a882:	83 c4 20             	add    esp,0x20
c000a885:	89 e8                	mov    eax,ebp
c000a887:	5b                   	pop    ebx
c000a888:	5e                   	pop    esi
c000a889:	5f                   	pop    edi
c000a88a:	5d                   	pop    ebp
c000a88b:	c3                   	ret    

c000a88c <Dbg::logc(char)>:
c000a88c:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a893:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a897:	75 12                	jne    c000a8ab <Dbg::logc(char)+0x1f>
c000a899:	ba fd 03 00 00       	mov    edx,0x3fd
c000a89e:	ec                   	in     al,dx
c000a89f:	a8 20                	test   al,0x20
c000a8a1:	74 fb                	je     c000a89e <Dbg::logc(char)+0x12>
c000a8a3:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8a8:	88 c8                	mov    al,cl
c000a8aa:	ee                   	out    dx,al
c000a8ab:	c3                   	ret    

c000a8ac <Dbg::logs(char*)>:
c000a8ac:	53                   	push   ebx
c000a8ad:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8b1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8b4:	85 c0                	test   eax,eax
c000a8b6:	74 11                	je     c000a8c9 <Dbg::logs(char*)+0x1d>
c000a8b8:	50                   	push   eax
c000a8b9:	83 c3 01             	add    ebx,0x1
c000a8bc:	e8 cb ff ff ff       	call   c000a88c <Dbg::logc(char)>
c000a8c1:	58                   	pop    eax
c000a8c2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8c5:	85 c0                	test   eax,eax
c000a8c7:	75 ef                	jne    c000a8b8 <Dbg::logs(char*)+0xc>
c000a8c9:	5b                   	pop    ebx
c000a8ca:	c3                   	ret    

c000a8cb <Dbg::logWriteInt(unsigned int)>:
c000a8cb:	83 ec 10             	sub    esp,0x10
c000a8ce:	6a 0a                	push   0xa
c000a8d0:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8d4:	50                   	push   eax
c000a8d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8d9:	50                   	push   eax
c000a8da:	e8 3c ff ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a8df:	50                   	push   eax
c000a8e0:	e8 c7 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a8e5:	83 c4 20             	add    esp,0x20
c000a8e8:	c3                   	ret    

c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a8e9:	83 ec 10             	sub    esp,0x10
c000a8ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a8f0:	50                   	push   eax
c000a8f1:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8f5:	50                   	push   eax
c000a8f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a8fa:	52                   	push   edx
c000a8fb:	e8 1b ff ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a900:	50                   	push   eax
c000a901:	e8 a6 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a906:	83 c4 20             	add    esp,0x20
c000a909:	c3                   	ret    

c000a90a <Dbg::kprintf(char const*, ...)>:
c000a90a:	55                   	push   ebp
c000a90b:	57                   	push   edi
c000a90c:	56                   	push   esi
c000a90d:	53                   	push   ebx
c000a90e:	83 ec 0c             	sub    esp,0xc
c000a911:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a918:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a91c:	74 08                	je     c000a926 <Dbg::kprintf(char const*, ...)+0x1c>
c000a91e:	83 c4 0c             	add    esp,0xc
c000a921:	5b                   	pop    ebx
c000a922:	5e                   	pop    esi
c000a923:	5f                   	pop    edi
c000a924:	5d                   	pop    ebp
c000a925:	c3                   	ret    
c000a926:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a92a:	31 ff                	xor    edi,edi
c000a92c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a930:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a933:	85 c0                	test   eax,eax
c000a935:	74 e7                	je     c000a91e <Dbg::kprintf(char const*, ...)+0x14>
c000a937:	8d 77 01             	lea    esi,[edi+0x1]
c000a93a:	83 f8 25             	cmp    eax,0x25
c000a93d:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a940:	75 47                	jne    c000a989 <Dbg::kprintf(char const*, ...)+0x7f>
c000a942:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a945:	83 c7 02             	add    edi,0x2
c000a948:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a94b:	83 e8 25             	sub    eax,0x25
c000a94e:	0f b6 c0             	movzx  eax,al
c000a951:	83 f8 53             	cmp    eax,0x53
c000a954:	0f 87 ce 00 00 00    	ja     c000aa28 <Dbg::kprintf(char const*, ...)+0x11e>
c000a95a:	ff 24 85 9c 13 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdec64]
c000a961:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a965:	89 c8                	mov    eax,ecx
c000a967:	83 c1 04             	add    ecx,0x4
c000a96a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a96e:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a970:	55                   	push   ebp
c000a971:	e8 55 ff ff ff       	call   c000a8cb <Dbg::logWriteInt(unsigned int)>
c000a976:	58                   	pop    eax
c000a977:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a97a:	85 c0                	test   eax,eax
c000a97c:	74 a0                	je     c000a91e <Dbg::kprintf(char const*, ...)+0x14>
c000a97e:	8d 77 01             	lea    esi,[edi+0x1]
c000a981:	83 f8 25             	cmp    eax,0x25
c000a984:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a987:	74 b9                	je     c000a942 <Dbg::kprintf(char const*, ...)+0x38>
c000a989:	50                   	push   eax
c000a98a:	89 f7                	mov    edi,esi
c000a98c:	e8 fb fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000a991:	89 ee                	mov    esi,ebp
c000a993:	58                   	pop    eax
c000a994:	eb e1                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a996:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a99a:	89 c8                	mov    eax,ecx
c000a99c:	83 c1 04             	add    ecx,0x4
c000a99f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a3:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9a5:	50                   	push   eax
c000a9a6:	e8 01 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a9ab:	58                   	pop    eax
c000a9ac:	eb c9                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9b2:	89 d0                	mov    eax,edx
c000a9b4:	83 c2 04             	add    edx,0x4
c000a9b7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9bb:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9bd:	50                   	push   eax
c000a9be:	e8 08 ff ff ff       	call   c000a8cb <Dbg::logWriteInt(unsigned int)>
c000a9c3:	58                   	pop    eax
c000a9c4:	eb b1                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ca:	89 d0                	mov    eax,edx
c000a9cc:	83 c2 04             	add    edx,0x4
c000a9cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9d3:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a9d6:	50                   	push   eax
c000a9d7:	e8 b0 fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000a9dc:	58                   	pop    eax
c000a9dd:	eb 98                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9df:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9e3:	89 c8                	mov    eax,ecx
c000a9e5:	83 c1 04             	add    ecx,0x4
c000a9e8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9ec:	6a 10                	push   0x10
c000a9ee:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a9f0:	51                   	push   ecx
c000a9f1:	e8 f3 fe ff ff       	call   c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000a9f6:	5d                   	pop    ebp
c000a9f7:	58                   	pop    eax
c000a9f8:	e9 7a ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9fd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa01:	89 d0                	mov    eax,edx
c000aa03:	83 c2 08             	add    edx,0x8
c000aa06:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa0a:	6a 10                	push   0x10
c000aa0c:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa0e:	50                   	push   eax
c000aa0f:	e8 d5 fe ff ff       	call   c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa14:	58                   	pop    eax
c000aa15:	5a                   	pop    edx
c000aa16:	e9 5c ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1b:	6a 25                	push   0x25
c000aa1d:	e8 6a fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa22:	5a                   	pop    edx
c000aa23:	e9 4f ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa28:	6a 25                	push   0x25
c000aa2a:	e8 5d fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa2f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa33:	50                   	push   eax
c000aa34:	e8 53 fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa39:	5a                   	pop    edx
c000aa3a:	59                   	pop    ecx
c000aa3b:	e9 37 ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>

c000aa40 <KiUbsanPrintDetails(char const*, void*)>:
c000aa40:	83 ec 1c             	sub    esp,0x1c
c000aa43:	83 ec 08             	sub    esp,0x8
c000aa46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa4a:	68 ec 14 02 c0       	push   0xc00214ec
c000aa4f:	e8 b6 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa54:	83 c4 10             	add    esp,0x10
c000aa57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa63:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa65:	83 ec 08             	sub    esp,0x8
c000aa68:	50                   	push   eax
c000aa69:	68 00 15 02 c0       	push   0xc0021500
c000aa6e:	e8 97 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa73:	83 c4 10             	add    esp,0x10
c000aa76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aa7d:	83 ec 08             	sub    esp,0x8
c000aa80:	50                   	push   eax
c000aa81:	68 0a 15 02 c0       	push   0xc002150a
c000aa86:	e8 7f fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa8b:	83 c4 10             	add    esp,0x10
c000aa8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa92:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aa95:	83 ec 08             	sub    esp,0x8
c000aa98:	50                   	push   eax
c000aa99:	68 14 15 02 c0       	push   0xc0021514
c000aa9e:	e8 67 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aaa3:	83 c4 10             	add    esp,0x10
c000aaa6:	90                   	nop
c000aaa7:	83 c4 1c             	add    esp,0x1c
c000aaaa:	c3                   	ret    
c000aaab:	90                   	nop

c000aaac <__ubsan_handle_type_mismatch_v1>:
c000aaac:	83 ec 0c             	sub    esp,0xc
c000aaaf:	83 ec 08             	sub    esp,0x8
c000aab2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aab6:	68 58 16 02 c0       	push   0xc0021658
c000aabb:	e8 80 ff ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000aac0:	83 c4 10             	add    esp,0x10
c000aac3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000aac8:	75 16                	jne    c000aae0 <__ubsan_handle_type_mismatch_v1+0x34>
c000aaca:	83 ec 0c             	sub    esp,0xc
c000aacd:	68 1e 15 02 c0       	push   0xc002151e
c000aad2:	e8 33 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aad7:	83 c4 10             	add    esp,0x10
c000aada:	e9 91 00 00 00       	jmp    c000ab70 <__ubsan_handle_type_mismatch_v1+0xc4>
c000aadf:	90                   	nop
c000aae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aae4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aae7:	85 c0                	test   eax,eax
c000aae9:	74 29                	je     c000ab14 <__ubsan_handle_type_mismatch_v1+0x68>
c000aaeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aaf2:	83 e8 01             	sub    eax,0x1
c000aaf5:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000aaf9:	75 19                	jne    c000ab14 <__ubsan_handle_type_mismatch_v1+0x68>
c000aafb:	83 ec 08             	sub    esp,0x8
c000aafe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab02:	68 78 16 02 c0       	push   0xc0021678
c000ab07:	e8 fe fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab0c:	83 c4 10             	add    esp,0x10
c000ab0f:	eb 5f                	jmp    c000ab70 <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab11:	8d 76 00             	lea    esi,[esi+0x0]
c000ab14:	83 ec 0c             	sub    esp,0xc
c000ab17:	68 33 15 02 c0       	push   0xc0021533
c000ab1c:	e8 e9 fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab21:	83 c4 10             	add    esp,0x10
c000ab24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab28:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab2b:	0f b6 c0             	movzx  eax,al
c000ab2e:	83 ec 08             	sub    esp,0x8
c000ab31:	50                   	push   eax
c000ab32:	68 4d 15 02 c0       	push   0xc002154d
c000ab37:	e8 ce fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab3c:	83 c4 10             	add    esp,0x10
c000ab3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab43:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab46:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab49:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab51:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab54:	0f b6 c0             	movzx  eax,al
c000ab57:	8b 04 85 40 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc8c0]
c000ab5e:	51                   	push   ecx
c000ab5f:	52                   	push   edx
c000ab60:	50                   	push   eax
c000ab61:	68 a0 16 02 c0       	push   0xc00216a0
c000ab66:	e8 9f fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab6b:	83 c4 10             	add    esp,0x10
c000ab6e:	66 90                	xchg   ax,ax
c000ab70:	83 ec 0c             	sub    esp,0xc
c000ab73:	68 58 16 02 c0       	push   0xc0021658
c000ab78:	e8 5e 6a 00 00       	call   c00115db <KePanic(char const*)>
c000ab7d:	83 c4 10             	add    esp,0x10
c000ab80:	90                   	nop
c000ab81:	83 c4 0c             	add    esp,0xc
c000ab84:	c3                   	ret    
c000ab85:	8d 76 00             	lea    esi,[esi+0x0]

c000ab88 <__ubsan_handle_pointer_overflow>:
c000ab88:	83 ec 0c             	sub    esp,0xc
c000ab8b:	83 ec 08             	sub    esp,0x8
c000ab8e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ab92:	68 e8 16 02 c0       	push   0xc00216e8
c000ab97:	e8 a4 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	83 ec 0c             	sub    esp,0xc
c000aba2:	68 e8 16 02 c0       	push   0xc00216e8
c000aba7:	e8 2f 6a 00 00       	call   c00115db <KePanic(char const*)>
c000abac:	83 c4 10             	add    esp,0x10
c000abaf:	90                   	nop
c000abb0:	83 c4 0c             	add    esp,0xc
c000abb3:	c3                   	ret    

c000abb4 <__ubsan_handle_out_of_bounds>:
c000abb4:	83 ec 0c             	sub    esp,0xc
c000abb7:	83 ec 08             	sub    esp,0x8
c000abba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abbe:	68 58 15 02 c0       	push   0xc0021558
c000abc3:	e8 78 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000abc8:	83 c4 10             	add    esp,0x10
c000abcb:	83 ec 0c             	sub    esp,0xc
c000abce:	68 58 15 02 c0       	push   0xc0021558
c000abd3:	e8 03 6a 00 00       	call   c00115db <KePanic(char const*)>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	90                   	nop
c000abdc:	83 c4 0c             	add    esp,0xc
c000abdf:	c3                   	ret    

c000abe0 <__ubsan_handle_add_overflow>:
c000abe0:	83 ec 0c             	sub    esp,0xc
c000abe3:	83 ec 08             	sub    esp,0x8
c000abe6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abea:	68 75 15 02 c0       	push   0xc0021575
c000abef:	e8 4c fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	83 ec 0c             	sub    esp,0xc
c000abfa:	68 75 15 02 c0       	push   0xc0021575
c000abff:	e8 d7 69 00 00       	call   c00115db <KePanic(char const*)>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	90                   	nop
c000ac08:	83 c4 0c             	add    esp,0xc
c000ac0b:	c3                   	ret    

c000ac0c <__ubsan_handle_load_invalid_value>:
c000ac0c:	83 ec 0c             	sub    esp,0xc
c000ac0f:	83 ec 08             	sub    esp,0x8
c000ac12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac16:	68 08 17 02 c0       	push   0xc0021708
c000ac1b:	e8 20 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac20:	83 c4 10             	add    esp,0x10
c000ac23:	83 ec 0c             	sub    esp,0xc
c000ac26:	68 08 17 02 c0       	push   0xc0021708
c000ac2b:	e8 ab 69 00 00       	call   c00115db <KePanic(char const*)>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	90                   	nop
c000ac34:	83 c4 0c             	add    esp,0xc
c000ac37:	c3                   	ret    

c000ac38 <__ubsan_handle_divrem_overflow>:
c000ac38:	83 ec 0c             	sub    esp,0xc
c000ac3b:	83 ec 08             	sub    esp,0x8
c000ac3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac42:	68 2c 17 02 c0       	push   0xc002172c
c000ac47:	e8 f4 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	83 ec 0c             	sub    esp,0xc
c000ac52:	68 2c 17 02 c0       	push   0xc002172c
c000ac57:	e8 7f 69 00 00       	call   c00115db <KePanic(char const*)>
c000ac5c:	83 c4 10             	add    esp,0x10
c000ac5f:	90                   	nop
c000ac60:	83 c4 0c             	add    esp,0xc
c000ac63:	c3                   	ret    

c000ac64 <__ubsan_handle_mul_overflow>:
c000ac64:	83 ec 0c             	sub    esp,0xc
c000ac67:	83 ec 08             	sub    esp,0x8
c000ac6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac6e:	68 91 15 02 c0       	push   0xc0021591
c000ac73:	e8 c8 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac78:	83 c4 10             	add    esp,0x10
c000ac7b:	83 ec 0c             	sub    esp,0xc
c000ac7e:	68 91 15 02 c0       	push   0xc0021591
c000ac83:	e8 53 69 00 00       	call   c00115db <KePanic(char const*)>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	90                   	nop
c000ac8c:	83 c4 0c             	add    esp,0xc
c000ac8f:	c3                   	ret    

c000ac90 <__ubsan_handle_sub_overflow>:
c000ac90:	83 ec 0c             	sub    esp,0xc
c000ac93:	83 ec 08             	sub    esp,0x8
c000ac96:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac9a:	68 ad 15 02 c0       	push   0xc00215ad
c000ac9f:	e8 9c fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000aca4:	83 c4 10             	add    esp,0x10
c000aca7:	83 ec 0c             	sub    esp,0xc
c000acaa:	68 ad 15 02 c0       	push   0xc00215ad
c000acaf:	e8 27 69 00 00       	call   c00115db <KePanic(char const*)>
c000acb4:	83 c4 10             	add    esp,0x10
c000acb7:	90                   	nop
c000acb8:	83 c4 0c             	add    esp,0xc
c000acbb:	c3                   	ret    

c000acbc <__ubsan_handle_shift_out_of_bounds>:
c000acbc:	83 ec 0c             	sub    esp,0xc
c000acbf:	83 ec 08             	sub    esp,0x8
c000acc2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acc6:	68 4c 17 02 c0       	push   0xc002174c
c000accb:	e8 70 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000acd0:	83 c4 10             	add    esp,0x10
c000acd3:	83 ec 0c             	sub    esp,0xc
c000acd6:	68 4c 17 02 c0       	push   0xc002174c
c000acdb:	e8 fb 68 00 00       	call   c00115db <KePanic(char const*)>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	90                   	nop
c000ace4:	83 c4 0c             	add    esp,0xc
c000ace7:	c3                   	ret    

c000ace8 <__ubsan_handle_negate_overflow>:
c000ace8:	83 ec 0c             	sub    esp,0xc
c000aceb:	83 ec 08             	sub    esp,0x8
c000acee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acf2:	68 70 17 02 c0       	push   0xc0021770
c000acf7:	e8 44 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000acfc:	83 c4 10             	add    esp,0x10
c000acff:	83 ec 0c             	sub    esp,0xc
c000ad02:	68 70 17 02 c0       	push   0xc0021770
c000ad07:	e8 cf 68 00 00       	call   c00115db <KePanic(char const*)>
c000ad0c:	83 c4 10             	add    esp,0x10
c000ad0f:	90                   	nop
c000ad10:	83 c4 0c             	add    esp,0xc
c000ad13:	c3                   	ret    

c000ad14 <KiFlushSymlinkChanges()>:
c000ad14:	57                   	push   edi
c000ad15:	56                   	push   esi
c000ad16:	53                   	push   ebx
c000ad17:	83 ec 1c             	sub    esp,0x1c
c000ad1a:	68 14 01 00 00       	push   0x114
c000ad1f:	e8 af cd ff ff       	call   c0007ad3 <malloc>
c000ad24:	83 c4 0c             	add    esp,0xc
c000ad27:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000ad2d:	68 8f 17 02 c0       	push   0xc002178f
c000ad32:	50                   	push   eax
c000ad33:	89 c3                	mov    ebx,eax
c000ad35:	e8 5c 0e 00 00       	call   c000bb96 <File::File(char const*, Process*)>
c000ad3a:	83 c4 10             	add    esp,0x10
c000ad3d:	85 db                	test   ebx,ebx
c000ad3f:	75 10                	jne    c000ad51 <KiFlushSymlinkChanges()+0x3d>
c000ad41:	83 ec 0c             	sub    esp,0xc
c000ad44:	68 ad 17 02 c0       	push   0xc00217ad
c000ad49:	e8 8d 68 00 00       	call   c00115db <KePanic(char const*)>
c000ad4e:	83 c4 10             	add    esp,0x10
c000ad51:	50                   	push   eax
c000ad52:	50                   	push   eax
c000ad53:	6a 06                	push   0x6
c000ad55:	53                   	push   ebx
c000ad56:	e8 59 0e 00 00       	call   c000bbb4 <File::open(FileOpenMode)>
c000ad5b:	83 c4 10             	add    esp,0x10
c000ad5e:	85 c0                	test   eax,eax
c000ad60:	74 10                	je     c000ad72 <KiFlushSymlinkChanges()+0x5e>
c000ad62:	83 ec 0c             	sub    esp,0xc
c000ad65:	68 c7 17 02 c0       	push   0xc00217c7
c000ad6a:	e8 6c 68 00 00       	call   c00115db <KePanic(char const*)>
c000ad6f:	83 c4 10             	add    esp,0x10
c000ad72:	31 f6                	xor    esi,esi
c000ad74:	39 35 c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,esi
c000ad7a:	7e 70                	jle    c000adec <KiFlushSymlinkChanges()+0xd8>
c000ad7c:	83 ec 0c             	sub    esp,0xc
c000ad7f:	89 f0                	mov    eax,esi
c000ad81:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ad83:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ad87:	c1 e0 08             	shl    eax,0x8
c000ad8a:	57                   	push   edi
c000ad8b:	05 00 70 02 c0       	add    eax,0xc0027000
c000ad90:	50                   	push   eax
c000ad91:	6a 00                	push   0x0
c000ad93:	68 00 01 00 00       	push   0x100
c000ad98:	53                   	push   ebx
c000ad99:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ad9c:	83 c4 20             	add    esp,0x20
c000ad9f:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ada7:	74 10                	je     c000adb9 <KiFlushSymlinkChanges()+0xa5>
c000ada9:	83 ec 0c             	sub    esp,0xc
c000adac:	68 e1 17 02 c0       	push   0xc00217e1
c000adb1:	e8 25 68 00 00       	call   c00115db <KePanic(char const*)>
c000adb6:	83 c4 10             	add    esp,0x10
c000adb9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000adbb:	8d 14 f5 e0 6f 02 c0 	lea    edx,[esi*8-0x3ffd9020]
c000adc2:	83 ec 0c             	sub    esp,0xc
c000adc5:	57                   	push   edi
c000adc6:	52                   	push   edx
c000adc7:	6a 00                	push   0x0
c000adc9:	6a 08                	push   0x8
c000adcb:	53                   	push   ebx
c000adcc:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000adcf:	83 c4 20             	add    esp,0x20
c000add2:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000add7:	74 10                	je     c000ade9 <KiFlushSymlinkChanges()+0xd5>
c000add9:	83 ec 0c             	sub    esp,0xc
c000addc:	68 fb 17 02 c0       	push   0xc00217fb
c000ade1:	e8 f5 67 00 00       	call   c00115db <KePanic(char const*)>
c000ade6:	83 c4 10             	add    esp,0x10
c000ade9:	46                   	inc    esi
c000adea:	eb 88                	jmp    c000ad74 <KiFlushSymlinkChanges()+0x60>
c000adec:	83 ec 0c             	sub    esp,0xc
c000adef:	53                   	push   ebx
c000adf0:	e8 1d 0e 00 00       	call   c000bc12 <File::close()>
c000adf5:	83 c4 10             	add    esp,0x10
c000adf8:	85 db                	test   ebx,ebx
c000adfa:	74 0c                	je     c000ae08 <KiFlushSymlinkChanges()+0xf4>
c000adfc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000adfe:	83 ec 0c             	sub    esp,0xc
c000ae01:	53                   	push   ebx
c000ae02:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae05:	83 c4 10             	add    esp,0x10
c000ae08:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000ae12:	83 c4 10             	add    esp,0x10
c000ae15:	5b                   	pop    ebx
c000ae16:	5e                   	pop    esi
c000ae17:	5f                   	pop    edi
c000ae18:	c3                   	ret    

c000ae19 <KiDeinitialiseSymlinks(void*)>:
c000ae19:	e9 f6 fe ff ff       	jmp    c000ad14 <KiFlushSymlinkChanges()>

c000ae1e <KiGetSymlinkHash(char const*)>:
c000ae1e:	53                   	push   ebx
c000ae1f:	89 c3                	mov    ebx,eax
c000ae21:	83 ec 14             	sub    esp,0x14
c000ae24:	50                   	push   eax
c000ae25:	e8 56 57 ff ff       	call   c0000580 <strlen>
c000ae2a:	5a                   	pop    edx
c000ae2b:	59                   	pop    ecx
c000ae2c:	50                   	push   eax
c000ae2d:	53                   	push   ebx
c000ae2e:	e8 2a 61 00 00       	call   c0010f5d <KeCalculateCRC32(unsigned char*, int)>
c000ae33:	83 c4 18             	add    esp,0x18
c000ae36:	5b                   	pop    ebx
c000ae37:	89 c2                	mov    edx,eax
c000ae39:	c1 ea 10             	shr    edx,0x10
c000ae3c:	31 d0                	xor    eax,edx
c000ae3e:	c3                   	ret    

c000ae3f <KiSetHashInTable(unsigned short, bool)>:
c000ae3f:	57                   	push   edi
c000ae40:	89 c7                	mov    edi,eax
c000ae42:	56                   	push   esi
c000ae43:	0f b6 f2             	movzx  esi,dl
c000ae46:	53                   	push   ebx
c000ae47:	0f b7 d8             	movzx  ebx,ax
c000ae4a:	50                   	push   eax
c000ae4b:	56                   	push   esi
c000ae4c:	53                   	push   ebx
c000ae4d:	68 15 18 02 c0       	push   0xc0021815
c000ae52:	e8 b3 fa ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ae57:	89 f9                	mov    ecx,edi
c000ae59:	b8 01 00 00 00       	mov    eax,0x1
c000ae5e:	83 e1 07             	and    ecx,0x7
c000ae61:	83 c4 10             	add    esp,0x10
c000ae64:	c1 fb 03             	sar    ebx,0x3
c000ae67:	d3 e0                	shl    eax,cl
c000ae69:	85 f6                	test   esi,esi
c000ae6b:	8a 93 00 74 02 c0    	mov    dl,BYTE PTR [ebx-0x3ffd8c00]
c000ae71:	74 04                	je     c000ae77 <KiSetHashInTable(unsigned short, bool)+0x38>
c000ae73:	09 d0                	or     eax,edx
c000ae75:	eb 04                	jmp    c000ae7b <KiSetHashInTable(unsigned short, bool)+0x3c>
c000ae77:	f7 d0                	not    eax
c000ae79:	21 d0                	and    eax,edx
c000ae7b:	88 83 00 74 02 c0    	mov    BYTE PTR [ebx-0x3ffd8c00],al
c000ae81:	5b                   	pop    ebx
c000ae82:	5e                   	pop    esi
c000ae83:	5f                   	pop    edi
c000ae84:	c3                   	ret    

c000ae85 <KiIsHashInTable(unsigned short)>:
c000ae85:	56                   	push   esi
c000ae86:	0f b7 d0             	movzx  edx,ax
c000ae89:	53                   	push   ebx
c000ae8a:	89 d6                	mov    esi,edx
c000ae8c:	83 ec 08             	sub    esp,0x8
c000ae8f:	83 e0 07             	and    eax,0x7
c000ae92:	c1 fe 03             	sar    esi,0x3
c000ae95:	89 c3                	mov    ebx,eax
c000ae97:	0f b6 86 00 74 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffd8c00]
c000ae9e:	88 d9                	mov    cl,bl
c000aea0:	d3 f8                	sar    eax,cl
c000aea2:	83 e0 01             	and    eax,0x1
c000aea5:	50                   	push   eax
c000aea6:	52                   	push   edx
c000aea7:	68 2e 18 02 c0       	push   0xc002182e
c000aeac:	e8 59 fa ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aeb1:	0f b6 96 00 74 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffd8c00]
c000aeb8:	83 c4 14             	add    esp,0x14
c000aebb:	88 d9                	mov    cl,bl
c000aebd:	5b                   	pop    ebx
c000aebe:	89 d0                	mov    eax,edx
c000aec0:	d3 f8                	sar    eax,cl
c000aec2:	5e                   	pop    esi
c000aec3:	83 e0 01             	and    eax,0x1
c000aec6:	c3                   	ret    

c000aec7 <KiCreateSymlinkID()>:
c000aec7:	55                   	push   ebp
c000aec8:	57                   	push   edi
c000aec9:	56                   	push   esi
c000aeca:	53                   	push   ebx
c000aecb:	31 db                	xor    ebx,ebx
c000aecd:	83 ec 1c             	sub    esp,0x1c
c000aed0:	e8 54 68 00 00       	call   c0011729 <KeRand()>
c000aed5:	8b 2d 00 94 02 c0    	mov    ebp,DWORD PTR ds:0xc0029400
c000aedb:	31 d2                	xor    edx,edx
c000aedd:	43                   	inc    ebx
c000aede:	31 ff                	xor    edi,edi
c000aee0:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000aee3:	89 ee                	mov    esi,ebp
c000aee5:	89 0d 00 94 02 c0    	mov    DWORD PTR ds:0xc0029400,ecx
c000aeeb:	0f a4 c2 1b          	shld   edx,eax,0x1b
c000aeef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aef3:	c1 e0 1b             	shl    eax,0x1b
c000aef6:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000aefc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000af00:	75 10                	jne    c000af12 <KiCreateSymlinkID()+0x4b>
c000af02:	83 ec 0c             	sub    esp,0xc
c000af05:	68 4b 18 02 c0       	push   0xc002184b
c000af0a:	e8 cc 66 00 00       	call   c00115db <KePanic(char const*)>
c000af0f:	83 c4 10             	add    esp,0x10
c000af12:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000af16:	75 06                	jne    c000af1e <KiCreateSymlinkID()+0x57>
c000af18:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000af1c:	74 b2                	je     c000aed0 <KiCreateSymlinkID()+0x9>
c000af1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000af22:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af26:	83 c4 1c             	add    esp,0x1c
c000af29:	5b                   	pop    ebx
c000af2a:	31 f0                	xor    eax,esi
c000af2c:	5e                   	pop    esi
c000af2d:	31 fa                	xor    edx,edi
c000af2f:	5f                   	pop    edi
c000af30:	5d                   	pop    ebp
c000af31:	c3                   	ret    

c000af32 <KeRegisterSymlink(char const*, unsigned long long)>:
c000af32:	53                   	push   ebx
c000af33:	83 ec 0c             	sub    esp,0xc
c000af36:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000af3a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000af3e:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af43:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000af47:	68 00 01 00 00       	push   0x100
c000af4c:	6a 00                	push   0x0
c000af4e:	89 0c c5 e4 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd901c],ecx
c000af55:	89 14 c5 e0 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9020],edx
c000af5c:	c1 e0 08             	shl    eax,0x8
c000af5f:	05 00 70 02 c0       	add    eax,0xc0027000
c000af64:	50                   	push   eax
c000af65:	e8 86 55 ff ff       	call   c00004f0 <memset>
c000af6a:	58                   	pop    eax
c000af6b:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af70:	5a                   	pop    edx
c000af71:	c1 e0 08             	shl    eax,0x8
c000af74:	53                   	push   ebx
c000af75:	05 00 70 02 c0       	add    eax,0xc0027000
c000af7a:	50                   	push   eax
c000af7b:	e8 d0 56 ff ff       	call   c0000650 <strcpy>
c000af80:	89 d8                	mov    eax,ebx
c000af82:	e8 97 fe ff ff       	call   c000ae1e <KiGetSymlinkHash(char const*)>
c000af87:	ba 01 00 00 00       	mov    edx,0x1
c000af8c:	0f b7 c0             	movzx  eax,ax
c000af8f:	e8 ab fe ff ff       	call   c000ae3f <KiSetHashInTable(unsigned short, bool)>
c000af94:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af99:	83 c4 10             	add    esp,0x10
c000af9c:	40                   	inc    eax
c000af9d:	a3 c0 6f 02 c0       	mov    ds:0xc0026fc0,eax
c000afa2:	83 f8 03             	cmp    eax,0x3
c000afa5:	7e 09                	jle    c000afb0 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c000afa7:	83 c4 08             	add    esp,0x8
c000afaa:	5b                   	pop    ebx
c000afab:	e9 64 fd ff ff       	jmp    c000ad14 <KiFlushSymlinkChanges()>
c000afb0:	83 c4 08             	add    esp,0x8
c000afb3:	5b                   	pop    ebx
c000afb4:	c3                   	ret    

c000afb5 <KiIsSymlinkRegistered(char const*)>:
c000afb5:	55                   	push   ebp
c000afb6:	57                   	push   edi
c000afb7:	56                   	push   esi
c000afb8:	53                   	push   ebx
c000afb9:	81 ec 1c 01 00 00    	sub    esp,0x11c
c000afbf:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c000afc6:	89 f0                	mov    eax,esi
c000afc8:	e8 51 fe ff ff       	call   c000ae1e <KiGetSymlinkHash(char const*)>
c000afcd:	0f b7 c0             	movzx  eax,ax
c000afd0:	e8 b0 fe ff ff       	call   c000ae85 <KiIsHashInTable(unsigned short)>
c000afd5:	31 d2                	xor    edx,edx
c000afd7:	88 c1                	mov    cl,al
c000afd9:	31 c0                	xor    eax,eax
c000afdb:	84 c9                	test   cl,cl
c000afdd:	0f 84 4e 01 00 00    	je     c000b131 <KiIsSymlinkRegistered(char const*)+0x17c>
c000afe3:	50                   	push   eax
c000afe4:	31 db                	xor    ebx,ebx
c000afe6:	50                   	push   eax
c000afe7:	56                   	push   esi
c000afe8:	68 54 18 02 c0       	push   0xc0021854
c000afed:	e8 18 f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aff2:	83 c4 10             	add    esp,0x10
c000aff5:	39 1d c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,ebx
c000affb:	7e 30                	jle    c000b02d <KiIsSymlinkRegistered(char const*)+0x78>
c000affd:	89 d8                	mov    eax,ebx
c000afff:	c1 e0 08             	shl    eax,0x8
c000b002:	55                   	push   ebp
c000b003:	05 00 70 02 c0       	add    eax,0xc0027000
c000b008:	55                   	push   ebp
c000b009:	50                   	push   eax
c000b00a:	56                   	push   esi
c000b00b:	e8 70 57 ff ff       	call   c0000780 <strcmp>
c000b010:	83 c4 10             	add    esp,0x10
c000b013:	85 c0                	test   eax,eax
c000b015:	75 13                	jne    c000b02a <KiIsSymlinkRegistered(char const*)+0x75>
c000b017:	8b 04 dd e0 6f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd9020]
c000b01e:	8b 14 dd e4 6f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd901c]
c000b025:	e9 07 01 00 00       	jmp    c000b131 <KiIsSymlinkRegistered(char const*)+0x17c>
c000b02a:	43                   	inc    ebx
c000b02b:	eb c8                	jmp    c000aff5 <KiIsSymlinkRegistered(char const*)+0x40>
c000b02d:	83 ec 0c             	sub    esp,0xc
c000b030:	68 14 01 00 00       	push   0x114
c000b035:	e8 99 ca ff ff       	call   c0007ad3 <malloc>
c000b03a:	83 c4 0c             	add    esp,0xc
c000b03d:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b043:	68 8f 17 02 c0       	push   0xc002178f
c000b048:	50                   	push   eax
c000b049:	89 c3                	mov    ebx,eax
c000b04b:	e8 46 0b 00 00       	call   c000bb96 <File::File(char const*, Process*)>
c000b050:	83 c4 10             	add    esp,0x10
c000b053:	85 db                	test   ebx,ebx
c000b055:	75 12                	jne    c000b069 <KiIsSymlinkRegistered(char const*)+0xb4>
c000b057:	83 ec 0c             	sub    esp,0xc
c000b05a:	68 73 18 02 c0       	push   0xc0021873
c000b05f:	e8 77 65 00 00       	call   c00115db <KePanic(char const*)>
c000b064:	83 c4 10             	add    esp,0x10
c000b067:	eb 10                	jmp    c000b079 <KiIsSymlinkRegistered(char const*)+0xc4>
c000b069:	83 ec 0c             	sub    esp,0xc
c000b06c:	53                   	push   ebx
c000b06d:	e8 06 0e 00 00       	call   c000be78 <File::exists()>
c000b072:	83 c4 10             	add    esp,0x10
c000b075:	84 c0                	test   al,al
c000b077:	74 de                	je     c000b057 <KiIsSymlinkRegistered(char const*)+0xa2>
c000b079:	57                   	push   edi
c000b07a:	57                   	push   edi
c000b07b:	6a 01                	push   0x1
c000b07d:	53                   	push   ebx
c000b07e:	e8 31 0b 00 00       	call   c000bbb4 <File::open(FileOpenMode)>
c000b083:	83 c4 10             	add    esp,0x10
c000b086:	85 c0                	test   eax,eax
c000b088:	74 10                	je     c000b09a <KiIsSymlinkRegistered(char const*)+0xe5>
c000b08a:	83 ec 0c             	sub    esp,0xc
c000b08d:	68 8e 18 02 c0       	push   0xc002188e
c000b092:	e8 44 65 00 00       	call   c00115db <KePanic(char const*)>
c000b097:	83 c4 10             	add    esp,0x10
c000b09a:	83 ec 0c             	sub    esp,0xc
c000b09d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b09f:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000b0a3:	55                   	push   ebp
c000b0a4:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000b0a8:	57                   	push   edi
c000b0a9:	6a 00                	push   0x0
c000b0ab:	68 00 01 00 00       	push   0x100
c000b0b0:	53                   	push   ebx
c000b0b1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b0b4:	83 c4 20             	add    esp,0x20
c000b0b7:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b0bf:	75 58                	jne    c000b119 <KiIsSymlinkRegistered(char const*)+0x164>
c000b0c1:	83 ec 0c             	sub    esp,0xc
c000b0c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0c6:	55                   	push   ebp
c000b0c7:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b0cb:	52                   	push   edx
c000b0cc:	6a 00                	push   0x0
c000b0ce:	6a 08                	push   0x8
c000b0d0:	53                   	push   ebx
c000b0d1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b0d4:	83 c4 20             	add    esp,0x20
c000b0d7:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b0dc:	75 3b                	jne    c000b119 <KiIsSymlinkRegistered(char const*)+0x164>
c000b0de:	50                   	push   eax
c000b0df:	57                   	push   edi
c000b0e0:	56                   	push   esi
c000b0e1:	68 a9 18 02 c0       	push   0xc00218a9
c000b0e6:	e8 1f f8 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b0eb:	5a                   	pop    edx
c000b0ec:	59                   	pop    ecx
c000b0ed:	57                   	push   edi
c000b0ee:	56                   	push   esi
c000b0ef:	e8 8c 56 ff ff       	call   c0000780 <strcmp>
c000b0f4:	83 c4 10             	add    esp,0x10
c000b0f7:	85 c0                	test   eax,eax
c000b0f9:	75 9f                	jne    c000b09a <KiIsSymlinkRegistered(char const*)+0xe5>
c000b0fb:	83 ec 0c             	sub    esp,0xc
c000b0fe:	53                   	push   ebx
c000b0ff:	e8 0e 0b 00 00       	call   c000bc12 <File::close()>
c000b104:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b106:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b109:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b10c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b110:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b114:	83 c4 10             	add    esp,0x10
c000b117:	eb 18                	jmp    c000b131 <KiIsSymlinkRegistered(char const*)+0x17c>
c000b119:	83 ec 0c             	sub    esp,0xc
c000b11c:	53                   	push   ebx
c000b11d:	e8 f0 0a 00 00       	call   c000bc12 <File::close()>
c000b122:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b124:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b127:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b12a:	83 c4 10             	add    esp,0x10
c000b12d:	31 c0                	xor    eax,eax
c000b12f:	31 d2                	xor    edx,edx
c000b131:	81 c4 1c 01 00 00    	add    esp,0x11c
c000b137:	5b                   	pop    ebx
c000b138:	5e                   	pop    esi
c000b139:	5f                   	pop    edi
c000b13a:	5d                   	pop    ebp
c000b13b:	c3                   	ret    

c000b13c <KeDereferenceSymlink(char const*, char*)>:
c000b13c:	55                   	push   ebp
c000b13d:	57                   	push   edi
c000b13e:	56                   	push   esi
c000b13f:	53                   	push   ebx
c000b140:	83 ec 44             	sub    esp,0x44
c000b143:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000b147:	56                   	push   esi
c000b148:	68 b3 18 02 c0       	push   0xc00218b3
c000b14d:	e8 b8 f7 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b152:	89 34 24             	mov    DWORD PTR [esp],esi
c000b155:	e8 5b fe ff ff       	call   c000afb5 <KiIsSymlinkRegistered(char const*)>
c000b15a:	83 c4 10             	add    esp,0x10
c000b15d:	89 c7                	mov    edi,eax
c000b15f:	89 d0                	mov    eax,edx
c000b161:	09 f8                	or     eax,edi
c000b163:	75 07                	jne    c000b16c <KeDereferenceSymlink(char const*, char*)+0x30>
c000b165:	31 c0                	xor    eax,eax
c000b167:	e9 e3 01 00 00       	jmp    c000b34f <KeDereferenceSymlink(char const*, char*)+0x213>
c000b16c:	53                   	push   ebx
c000b16d:	89 d5                	mov    ebp,edx
c000b16f:	53                   	push   ebx
c000b170:	57                   	push   edi
c000b171:	68 cd 18 02 c0       	push   0xc00218cd
c000b176:	e8 8f f7 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b17b:	58                   	pop    eax
c000b17c:	5a                   	pop    edx
c000b17d:	55                   	push   ebp
c000b17e:	68 db 18 02 c0       	push   0xc00218db
c000b183:	e8 82 f7 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b188:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b18f:	e8 3f c9 ff ff       	call   c0007ad3 <malloc>
c000b194:	83 c4 0c             	add    esp,0xc
c000b197:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b19d:	56                   	push   esi
c000b19e:	50                   	push   eax
c000b19f:	89 c3                	mov    ebx,eax
c000b1a1:	e8 f0 09 00 00       	call   c000bb96 <File::File(char const*, Process*)>
c000b1a6:	83 c4 10             	add    esp,0x10
c000b1a9:	85 db                	test   ebx,ebx
c000b1ab:	0f 84 68 01 00 00    	je     c000b319 <KeDereferenceSymlink(char const*, char*)+0x1dd>
c000b1b1:	83 ec 0c             	sub    esp,0xc
c000b1b4:	68 20 25 02 c0       	push   0xc0022520
c000b1b9:	e8 4c f7 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b1be:	5a                   	pop    edx
c000b1bf:	59                   	pop    ecx
c000b1c0:	6a 01                	push   0x1
c000b1c2:	53                   	push   ebx
c000b1c3:	e8 ec 09 00 00       	call   c000bbb4 <File::open(FileOpenMode)>
c000b1c8:	83 c4 10             	add    esp,0x10
c000b1cb:	85 c0                	test   eax,eax
c000b1cd:	74 0b                	je     c000b1da <KeDereferenceSymlink(char const*, char*)+0x9e>
c000b1cf:	83 ec 0c             	sub    esp,0xc
c000b1d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1d4:	53                   	push   ebx
c000b1d5:	e9 39 01 00 00       	jmp    c000b313 <KeDereferenceSymlink(char const*, char*)+0x1d7>
c000b1da:	83 ec 0c             	sub    esp,0xc
c000b1dd:	68 26 0e 02 c0       	push   0xc0020e26
c000b1e2:	e8 23 f7 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b1e7:	58                   	pop    eax
c000b1e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1ea:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b1ee:	56                   	push   esi
c000b1ef:	8d 54 24 37          	lea    edx,[esp+0x37]
c000b1f3:	52                   	push   edx
c000b1f4:	6a 00                	push   0x0
c000b1f6:	6a 08                	push   0x8
c000b1f8:	53                   	push   ebx
c000b1f9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b1fc:	83 c4 20             	add    esp,0x20
c000b1ff:	85 c0                	test   eax,eax
c000b201:	0f 85 fe 00 00 00    	jne    c000b305 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b207:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b20c:	0f 85 f3 00 00 00    	jne    c000b305 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b212:	83 ec 0c             	sub    esp,0xc
c000b215:	68 52 25 02 c0       	push   0xc0022552
c000b21a:	e8 eb f6 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b21f:	8d 54 24 20          	lea    edx,[esp+0x20]
c000b223:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b225:	89 34 24             	mov    DWORD PTR [esp],esi
c000b228:	52                   	push   edx
c000b229:	6a 00                	push   0x0
c000b22b:	6a 08                	push   0x8
c000b22d:	53                   	push   ebx
c000b22e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b231:	83 c4 20             	add    esp,0x20
c000b234:	85 c0                	test   eax,eax
c000b236:	0f 85 c9 00 00 00    	jne    c000b305 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b23c:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b241:	0f 85 be 00 00 00    	jne    c000b305 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b247:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000b24b:	0f 85 14 ff ff ff    	jne    c000b165 <KeDereferenceSymlink(char const*, char*)+0x29>
c000b251:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000b255:	0f 85 0a ff ff ff    	jne    c000b165 <KeDereferenceSymlink(char const*, char*)+0x29>
c000b25b:	83 ec 0c             	sub    esp,0xc
c000b25e:	68 e9 18 02 c0       	push   0xc00218e9
c000b263:	e8 a2 f6 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b268:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000b270:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000b278:	83 c4 0c             	add    esp,0xc
c000b27b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000b27f:	50                   	push   eax
c000b280:	8d 44 24 20          	lea    eax,[esp+0x20]
c000b284:	50                   	push   eax
c000b285:	53                   	push   ebx
c000b286:	e8 2b 0c 00 00       	call   c000beb6 <File::stat(unsigned long long*, bool*)>
c000b28b:	83 c4 10             	add    esp,0x10
c000b28e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b293:	75 70                	jne    c000b305 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b295:	b8 0f 00 00 00       	mov    eax,0xf
c000b29a:	31 ff                	xor    edi,edi
c000b29c:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b2a0:	89 f8                	mov    eax,edi
c000b2a2:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000b2a6:	73 5d                	jae    c000b305 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b2a8:	83 ec 0c             	sub    esp,0xc
c000b2ab:	68 e9 18 02 c0       	push   0xc00218e9
c000b2b0:	e8 55 f6 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b2b5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b2b9:	b9 ff 00 00 00       	mov    ecx,0xff
c000b2be:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b2c2:	83 c0 f0             	add    eax,0xfffffff0
c000b2c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c9:	83 d2 ff             	adc    edx,0xffffffff
c000b2cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2d0:	83 c4 10             	add    esp,0x10
c000b2d3:	39 c1                	cmp    ecx,eax
c000b2d5:	19 d7                	sbb    edi,edx
c000b2d7:	72 40                	jb     c000b319 <KeDereferenceSymlink(char const*, char*)+0x1dd>
c000b2d9:	83 ec 0c             	sub    esp,0xc
c000b2dc:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000b2de:	56                   	push   esi
c000b2df:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b2e3:	52                   	push   edx
c000b2e4:	50                   	push   eax
c000b2e5:	53                   	push   ebx
c000b2e6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b2e9:	83 c4 20             	add    esp,0x20
c000b2ec:	85 c0                	test   eax,eax
c000b2ee:	75 15                	jne    c000b305 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b2f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b2f4:	89 c7                	mov    edi,eax
c000b2f6:	c1 ff 1f             	sar    edi,0x1f
c000b2f9:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b2fd:	75 06                	jne    c000b305 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b2ff:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b303:	74 19                	je     c000b31e <KeDereferenceSymlink(char const*, char*)+0x1e2>
c000b305:	83 ec 0c             	sub    esp,0xc
c000b308:	53                   	push   ebx
c000b309:	e8 04 09 00 00       	call   c000bc12 <File::close()>
c000b30e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b310:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b313:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b316:	83 c4 10             	add    esp,0x10
c000b319:	83 c8 ff             	or     eax,0xffffffff
c000b31c:	eb 31                	jmp    c000b34f <KeDereferenceSymlink(char const*, char*)+0x213>
c000b31e:	83 ec 0c             	sub    esp,0xc
c000b321:	68 32 30 02 c0       	push   0xc0023032
c000b326:	e8 df f5 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b32b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b32e:	e8 df 08 00 00       	call   c000bc12 <File::close()>
c000b333:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b335:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b338:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b33b:	c7 04 24 ec 18 02 c0 	mov    DWORD PTR [esp],0xc00218ec
c000b342:	e8 c3 f5 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b347:	83 c4 10             	add    esp,0x10
c000b34a:	b8 01 00 00 00       	mov    eax,0x1
c000b34f:	83 c4 3c             	add    esp,0x3c
c000b352:	5b                   	pop    ebx
c000b353:	5e                   	pop    esi
c000b354:	5f                   	pop    edi
c000b355:	5d                   	pop    ebp
c000b356:	c3                   	ret    

c000b357 <KeCreateSymlink(char const*, char const*)>:
c000b357:	55                   	push   ebp
c000b358:	57                   	push   edi
c000b359:	56                   	push   esi
c000b35a:	53                   	push   ebx
c000b35b:	83 ec 38             	sub    esp,0x38
c000b35e:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b362:	68 14 01 00 00       	push   0x114
c000b367:	e8 67 c7 ff ff       	call   c0007ad3 <malloc>
c000b36c:	6a 00                	push   0x0
c000b36e:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b374:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b378:	89 c3                	mov    ebx,eax
c000b37a:	50                   	push   eax
c000b37b:	e8 38 07 00 00       	call   c000bab8 <File::File(char const*, Process*, bool)>
c000b380:	83 c4 20             	add    esp,0x20
c000b383:	85 db                	test   ebx,ebx
c000b385:	b8 01 00 00 00       	mov    eax,0x1
c000b38a:	0f 84 fb 00 00 00    	je     c000b48b <KeCreateSymlink(char const*, char const*)+0x134>
c000b390:	52                   	push   edx
c000b391:	52                   	push   edx
c000b392:	6a 12                	push   0x12
c000b394:	53                   	push   ebx
c000b395:	e8 1a 08 00 00       	call   c000bbb4 <File::open(FileOpenMode)>
c000b39a:	83 c4 10             	add    esp,0x10
c000b39d:	85 c0                	test   eax,eax
c000b39f:	74 0b                	je     c000b3ac <KeCreateSymlink(char const*, char const*)+0x55>
c000b3a1:	83 ec 0c             	sub    esp,0xc
c000b3a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3a6:	53                   	push   ebx
c000b3a7:	e9 d4 00 00 00       	jmp    c000b480 <KeCreateSymlink(char const*, char const*)+0x129>
c000b3ac:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b3b0:	be ef 18 02 c0       	mov    esi,0xc00218ef
c000b3b5:	b9 09 00 00 00       	mov    ecx,0x9
c000b3ba:	fc                   	cld    
c000b3bb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b3bd:	83 ec 0c             	sub    esp,0xc
c000b3c0:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b3c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3c6:	56                   	push   esi
c000b3c7:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b3cb:	52                   	push   edx
c000b3cc:	6a 00                	push   0x0
c000b3ce:	6a 08                	push   0x8
c000b3d0:	53                   	push   ebx
c000b3d1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b3d4:	83 c4 20             	add    esp,0x20
c000b3d7:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b3dc:	0f 85 90 00 00 00    	jne    c000b472 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b3e2:	85 c0                	test   eax,eax
c000b3e4:	0f 85 88 00 00 00    	jne    c000b472 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b3ea:	e8 d8 fa ff ff       	call   c000aec7 <KiCreateSymlinkID()>
c000b3ef:	83 ec 0c             	sub    esp,0xc
c000b3f2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b3f6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b3fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3fc:	56                   	push   esi
c000b3fd:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b401:	52                   	push   edx
c000b402:	6a 00                	push   0x0
c000b404:	6a 08                	push   0x8
c000b406:	53                   	push   ebx
c000b407:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b40a:	83 c4 20             	add    esp,0x20
c000b40d:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b412:	75 5e                	jne    c000b472 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b414:	85 c0                	test   eax,eax
c000b416:	75 5a                	jne    c000b472 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b418:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b41a:	83 ec 0c             	sub    esp,0xc
c000b41d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b420:	55                   	push   ebp
c000b421:	e8 5a 51 ff ff       	call   c0000580 <strlen>
c000b426:	31 d2                	xor    edx,edx
c000b428:	89 34 24             	mov    DWORD PTR [esp],esi
c000b42b:	55                   	push   ebp
c000b42c:	52                   	push   edx
c000b42d:	50                   	push   eax
c000b42e:	53                   	push   ebx
c000b42f:	ff d7                	call   edi
c000b431:	83 c4 14             	add    esp,0x14
c000b434:	55                   	push   ebp
c000b435:	89 c6                	mov    esi,eax
c000b437:	e8 44 51 ff ff       	call   c0000580 <strlen>
c000b43c:	83 c4 10             	add    esp,0x10
c000b43f:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b443:	75 2d                	jne    c000b472 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b445:	85 f6                	test   esi,esi
c000b447:	75 29                	jne    c000b472 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b449:	50                   	push   eax
c000b44a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b44e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b452:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b456:	e8 d7 fa ff ff       	call   c000af32 <KeRegisterSymlink(char const*, unsigned long long)>
c000b45b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b45e:	e8 af 07 00 00       	call   c000bc12 <File::close()>
c000b463:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b465:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b468:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b46b:	83 c4 10             	add    esp,0x10
c000b46e:	31 c0                	xor    eax,eax
c000b470:	eb 19                	jmp    c000b48b <KeCreateSymlink(char const*, char const*)+0x134>
c000b472:	83 ec 0c             	sub    esp,0xc
c000b475:	53                   	push   ebx
c000b476:	e8 97 07 00 00       	call   c000bc12 <File::close()>
c000b47b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b47d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b480:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b483:	83 c4 10             	add    esp,0x10
c000b486:	b8 01 00 00 00       	mov    eax,0x1
c000b48b:	83 c4 2c             	add    esp,0x2c
c000b48e:	5b                   	pop    ebx
c000b48f:	5e                   	pop    esi
c000b490:	5f                   	pop    edi
c000b491:	5d                   	pop    ebp
c000b492:	c3                   	ret    

c000b493 <KeInitialiseSymlinks()>:
c000b493:	57                   	push   edi
c000b494:	56                   	push   esi
c000b495:	53                   	push   ebx
c000b496:	81 ec 14 01 00 00    	sub    esp,0x114
c000b49c:	68 00 20 00 00       	push   0x2000
c000b4a1:	6a 00                	push   0x0
c000b4a3:	68 00 74 02 c0       	push   0xc0027400
c000b4a8:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000b4b2:	e8 39 50 ff ff       	call   c00004f0 <memset>
c000b4b7:	5f                   	pop    edi
c000b4b8:	58                   	pop    eax
c000b4b9:	6a 00                	push   0x0
c000b4bb:	68 19 ae 00 c0       	push   0xc000ae19
c000b4c0:	e8 05 59 00 00       	call   c0010dca <KeRegisterAtexit(void (*)(void*), void*)>
c000b4c5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b4cc:	e8 02 c6 ff ff       	call   c0007ad3 <malloc>
c000b4d1:	83 c4 0c             	add    esp,0xc
c000b4d4:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b4da:	68 8f 17 02 c0       	push   0xc002178f
c000b4df:	50                   	push   eax
c000b4e0:	89 c3                	mov    ebx,eax
c000b4e2:	e8 af 06 00 00       	call   c000bb96 <File::File(char const*, Process*)>
c000b4e7:	83 c4 10             	add    esp,0x10
c000b4ea:	85 db                	test   ebx,ebx
c000b4ec:	75 10                	jne    c000b4fe <KeInitialiseSymlinks()+0x6b>
c000b4ee:	83 ec 0c             	sub    esp,0xc
c000b4f1:	68 f8 18 02 c0       	push   0xc00218f8
c000b4f6:	e8 e0 60 00 00       	call   c00115db <KePanic(char const*)>
c000b4fb:	83 c4 10             	add    esp,0x10
c000b4fe:	83 ec 0c             	sub    esp,0xc
c000b501:	53                   	push   ebx
c000b502:	e8 71 09 00 00       	call   c000be78 <File::exists()>
c000b507:	83 c4 10             	add    esp,0x10
c000b50a:	84 c0                	test   al,al
c000b50c:	75 3a                	jne    c000b548 <KeInitialiseSymlinks()+0xb5>
c000b50e:	56                   	push   esi
c000b50f:	56                   	push   esi
c000b510:	6a 12                	push   0x12
c000b512:	53                   	push   ebx
c000b513:	e8 9c 06 00 00       	call   c000bbb4 <File::open(FileOpenMode)>
c000b518:	83 c4 10             	add    esp,0x10
c000b51b:	85 c0                	test   eax,eax
c000b51d:	74 10                	je     c000b52f <KeInitialiseSymlinks()+0x9c>
c000b51f:	83 ec 0c             	sub    esp,0xc
c000b522:	68 15 19 02 c0       	push   0xc0021915
c000b527:	e8 af 60 00 00       	call   c00115db <KePanic(char const*)>
c000b52c:	83 c4 10             	add    esp,0x10
c000b52f:	83 ec 0c             	sub    esp,0xc
c000b532:	53                   	push   ebx
c000b533:	e8 da 06 00 00       	call   c000bc12 <File::close()>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	85 db                	test   ebx,ebx
c000b53d:	0f 84 a5 00 00 00    	je     c000b5e8 <KeInitialiseSymlinks()+0x155>
c000b543:	e9 94 00 00 00       	jmp    c000b5dc <KeInitialiseSymlinks()+0x149>
c000b548:	51                   	push   ecx
c000b549:	51                   	push   ecx
c000b54a:	6a 01                	push   0x1
c000b54c:	53                   	push   ebx
c000b54d:	e8 62 06 00 00       	call   c000bbb4 <File::open(FileOpenMode)>
c000b552:	83 c4 10             	add    esp,0x10
c000b555:	85 c0                	test   eax,eax
c000b557:	74 10                	je     c000b569 <KeInitialiseSymlinks()+0xd6>
c000b559:	83 ec 0c             	sub    esp,0xc
c000b55c:	68 32 19 02 c0       	push   0xc0021932
c000b561:	e8 75 60 00 00       	call   c00115db <KePanic(char const*)>
c000b566:	83 c4 10             	add    esp,0x10
c000b569:	83 ec 0c             	sub    esp,0xc
c000b56c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b56e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000b572:	57                   	push   edi
c000b573:	8d 74 24 20          	lea    esi,[esp+0x20]
c000b577:	56                   	push   esi
c000b578:	6a 00                	push   0x0
c000b57a:	68 00 01 00 00       	push   0x100
c000b57f:	53                   	push   ebx
c000b580:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b583:	83 c4 20             	add    esp,0x20
c000b586:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b58e:	75 40                	jne    c000b5d0 <KeInitialiseSymlinks()+0x13d>
c000b590:	83 ec 0c             	sub    esp,0xc
c000b593:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b595:	57                   	push   edi
c000b596:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b59a:	52                   	push   edx
c000b59b:	6a 00                	push   0x0
c000b59d:	6a 08                	push   0x8
c000b59f:	53                   	push   ebx
c000b5a0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b5a3:	83 c4 20             	add    esp,0x20
c000b5a6:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b5ab:	75 23                	jne    c000b5d0 <KeInitialiseSymlinks()+0x13d>
c000b5ad:	52                   	push   edx
c000b5ae:	52                   	push   edx
c000b5af:	56                   	push   esi
c000b5b0:	68 4d 19 02 c0       	push   0xc002194d
c000b5b5:	e8 50 f3 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b5ba:	89 f0                	mov    eax,esi
c000b5bc:	e8 5d f8 ff ff       	call   c000ae1e <KiGetSymlinkHash(char const*)>
c000b5c1:	ba 01 00 00 00       	mov    edx,0x1
c000b5c6:	0f b7 c0             	movzx  eax,ax
c000b5c9:	e8 71 f8 ff ff       	call   c000ae3f <KiSetHashInTable(unsigned short, bool)>
c000b5ce:	eb 96                	jmp    c000b566 <KeInitialiseSymlinks()+0xd3>
c000b5d0:	83 ec 0c             	sub    esp,0xc
c000b5d3:	53                   	push   ebx
c000b5d4:	e8 39 06 00 00       	call   c000bc12 <File::close()>
c000b5d9:	83 c4 10             	add    esp,0x10
c000b5dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b5de:	83 ec 0c             	sub    esp,0xc
c000b5e1:	53                   	push   ebx
c000b5e2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b5e5:	83 c4 10             	add    esp,0x10
c000b5e8:	50                   	push   eax
c000b5e9:	50                   	push   eax
c000b5ea:	68 85 19 02 c0       	push   0xc0021985
c000b5ef:	68 93 19 02 c0       	push   0xc0021993
c000b5f4:	e8 5e fd ff ff       	call   c000b357 <KeCreateSymlink(char const*, char const*)>
c000b5f9:	81 c4 20 01 00 00    	add    esp,0x120
c000b5ff:	5b                   	pop    ebx
c000b600:	5e                   	pop    esi
c000b601:	5f                   	pop    edi
c000b602:	c3                   	ret    
c000b603:	90                   	nop

c000b604 <File::read(unsigned long long, void*, int*)>:
c000b604:	53                   	push   ebx
c000b605:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b609:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b60d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b614:	83 f8 19             	cmp    eax,0x19
c000b617:	77 35                	ja     c000b64e <File::read(unsigned long long, void*, int*)+0x4a>
c000b619:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b620:	85 c0                	test   eax,eax
c000b622:	74 2a                	je     c000b64e <File::read(unsigned long long, void*, int*)+0x4a>
c000b624:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b62a:	85 c0                	test   eax,eax
c000b62c:	74 20                	je     c000b64e <File::read(unsigned long long, void*, int*)+0x4a>
c000b62e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b632:	74 21                	je     c000b655 <File::read(unsigned long long, void*, int*)+0x51>
c000b634:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b636:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b63a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b640:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b644:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b648:	5b                   	pop    ebx
c000b649:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b64c:	ff e0                	jmp    eax
c000b64e:	b8 0b 00 00 00       	mov    eax,0xb
c000b653:	eb 05                	jmp    c000b65a <File::read(unsigned long long, void*, int*)+0x56>
c000b655:	b8 05 00 00 00       	mov    eax,0x5
c000b65a:	5b                   	pop    ebx
c000b65b:	c3                   	ret    

c000b65c <File::write(unsigned long long, void*, int*)>:
c000b65c:	53                   	push   ebx
c000b65d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b661:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b665:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b66c:	83 f8 19             	cmp    eax,0x19
c000b66f:	77 35                	ja     c000b6a6 <File::write(unsigned long long, void*, int*)+0x4a>
c000b671:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b678:	85 c0                	test   eax,eax
c000b67a:	74 2a                	je     c000b6a6 <File::write(unsigned long long, void*, int*)+0x4a>
c000b67c:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b682:	85 c0                	test   eax,eax
c000b684:	74 20                	je     c000b6a6 <File::write(unsigned long long, void*, int*)+0x4a>
c000b686:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b68a:	74 21                	je     c000b6ad <File::write(unsigned long long, void*, int*)+0x51>
c000b68c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b68e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b692:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b698:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b69c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6a0:	5b                   	pop    ebx
c000b6a1:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b6a4:	ff e0                	jmp    eax
c000b6a6:	b8 0b 00 00 00       	mov    eax,0xb
c000b6ab:	eb 05                	jmp    c000b6b2 <File::write(unsigned long long, void*, int*)+0x56>
c000b6ad:	b8 05 00 00 00       	mov    eax,0x5
c000b6b2:	5b                   	pop    ebx
c000b6b3:	c3                   	ret    

c000b6b4 <Directory::read(unsigned long long, void*, int*)>:
c000b6b4:	53                   	push   ebx
c000b6b5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b6b9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b6bd:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b6c4:	83 f8 19             	cmp    eax,0x19
c000b6c7:	77 35                	ja     c000b6fe <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b6c9:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b6d0:	85 c0                	test   eax,eax
c000b6d2:	74 2a                	je     c000b6fe <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b6d4:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b6da:	85 c0                	test   eax,eax
c000b6dc:	74 20                	je     c000b6fe <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b6de:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b6e2:	74 21                	je     c000b705 <Directory::read(unsigned long long, void*, int*)+0x51>
c000b6e4:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b6e6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b6ea:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b6f0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6f8:	5b                   	pop    ebx
c000b6f9:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b6fc:	ff e0                	jmp    eax
c000b6fe:	b8 0b 00 00 00       	mov    eax,0xb
c000b703:	eb 05                	jmp    c000b70a <Directory::read(unsigned long long, void*, int*)+0x56>
c000b705:	b8 05 00 00 00       	mov    eax,0x5
c000b70a:	5b                   	pop    ebx
c000b70b:	c3                   	ret    

c000b70c <Directory::write(unsigned long long, void*, int*)>:
c000b70c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b710:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b717:	b8 0b 00 00 00       	mov    eax,0xb
c000b71c:	83 fa 19             	cmp    edx,0x19
c000b71f:	77 18                	ja     c000b739 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b721:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000b728:	85 d2                	test   edx,edx
c000b72a:	74 0d                	je     c000b739 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b72c:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b733:	19 c0                	sbb    eax,eax
c000b735:	83 e0 0a             	and    eax,0xa
c000b738:	40                   	inc    eax
c000b739:	c3                   	ret    

c000b73a <File::isAtty()>:
c000b73a:	31 c0                	xor    eax,eax
c000b73c:	c3                   	ret    
c000b73d:	90                   	nop

c000b73e <Directory::isAtty()>:
c000b73e:	31 c0                	xor    eax,eax
c000b740:	c3                   	ret    
c000b741:	90                   	nop

c000b742 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b742:	b8 0a 00 00 00       	mov    eax,0xa
c000b747:	c3                   	ret    

c000b748 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b748:	b8 0a 00 00 00       	mov    eax,0xa
c000b74d:	c3                   	ret    

c000b74e <Filesystem::allocateSwapfile(char const*, int)>:
c000b74e:	31 c0                	xor    eax,eax
c000b750:	31 d2                	xor    edx,edx
c000b752:	c3                   	ret    
c000b753:	90                   	nop

c000b754 <File::~File()>:
c000b754:	83 ec 0c             	sub    esp,0xc
c000b757:	ba 4c 1a 02 c0       	mov    edx,0xc0021a4c
c000b75c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b760:	89 10                	mov    DWORD PTR [eax],edx
c000b762:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b766:	83 ec 0c             	sub    esp,0xc
c000b769:	50                   	push   eax
c000b76a:	e8 1d dc ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000b76f:	83 c4 10             	add    esp,0x10
c000b772:	90                   	nop
c000b773:	83 c4 0c             	add    esp,0xc
c000b776:	c3                   	ret    
c000b777:	90                   	nop

c000b778 <File::~File()>:
c000b778:	83 ec 0c             	sub    esp,0xc
c000b77b:	83 ec 0c             	sub    esp,0xc
c000b77e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b782:	e8 cd ff ff ff       	call   c000b754 <File::~File()>
c000b787:	83 c4 10             	add    esp,0x10
c000b78a:	83 ec 08             	sub    esp,0x8
c000b78d:	68 14 01 00 00       	push   0x114
c000b792:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b796:	e8 71 f0 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b79b:	83 c4 10             	add    esp,0x10
c000b79e:	83 c4 0c             	add    esp,0xc
c000b7a1:	c3                   	ret    

c000b7a2 <Directory::~Directory()>:
c000b7a2:	83 ec 0c             	sub    esp,0xc
c000b7a5:	ba 68 1a 02 c0       	mov    edx,0xc0021a68
c000b7aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7ae:	89 10                	mov    DWORD PTR [eax],edx
c000b7b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7b4:	83 ec 0c             	sub    esp,0xc
c000b7b7:	50                   	push   eax
c000b7b8:	e8 cf db ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000b7bd:	83 c4 10             	add    esp,0x10
c000b7c0:	90                   	nop
c000b7c1:	83 c4 0c             	add    esp,0xc
c000b7c4:	c3                   	ret    
c000b7c5:	90                   	nop

c000b7c6 <Directory::~Directory()>:
c000b7c6:	83 ec 0c             	sub    esp,0xc
c000b7c9:	83 ec 0c             	sub    esp,0xc
c000b7cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d0:	e8 cd ff ff ff       	call   c000b7a2 <Directory::~Directory()>
c000b7d5:	83 c4 10             	add    esp,0x10
c000b7d8:	83 ec 08             	sub    esp,0x8
c000b7db:	68 14 01 00 00       	push   0x114
c000b7e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7e4:	e8 23 f0 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b7e9:	83 c4 10             	add    esp,0x10
c000b7ec:	83 c4 0c             	add    esp,0xc
c000b7ef:	c3                   	ret    

c000b7f0 <Filesystem::Filesystem()>:
c000b7f0:	ba e0 19 02 c0       	mov    edx,0xc00219e0
c000b7f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7f9:	89 10                	mov    DWORD PTR [eax],edx
c000b7fb:	8b 15 04 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029404
c000b801:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b805:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b808:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b80c:	a3 04 94 02 c0       	mov    ds:0xc0029404,eax
c000b811:	90                   	nop
c000b812:	c3                   	ret    
c000b813:	90                   	nop

c000b814 <Filesystem::~Filesystem()>:
c000b814:	ba e0 19 02 c0       	mov    edx,0xc00219e0
c000b819:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b81d:	89 10                	mov    DWORD PTR [eax],edx
c000b81f:	90                   	nop
c000b820:	c3                   	ret    
c000b821:	90                   	nop

c000b822 <Filesystem::~Filesystem()>:
c000b822:	83 ec 0c             	sub    esp,0xc
c000b825:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b829:	e8 e6 ff ff ff       	call   c000b814 <Filesystem::~Filesystem()>
c000b82e:	83 c4 04             	add    esp,0x4
c000b831:	83 ec 08             	sub    esp,0x8
c000b834:	6a 08                	push   0x8
c000b836:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b83a:	e8 cd ef ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b83f:	83 c4 10             	add    esp,0x10
c000b842:	83 c4 0c             	add    esp,0xc
c000b845:	c3                   	ret    

c000b846 <Fs::getcwd(Process*, char*, int)>:
c000b846:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b84a:	31 c0                	xor    eax,eax
c000b84c:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b850:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b853:	7d 15                	jge    c000b86a <Fs::getcwd(Process*, char*, int)+0x24>
c000b855:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b859:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b860:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b863:	84 c9                	test   cl,cl
c000b865:	74 06                	je     c000b86d <Fs::getcwd(Process*, char*, int)+0x27>
c000b867:	40                   	inc    eax
c000b868:	eb e2                	jmp    c000b84c <Fs::getcwd(Process*, char*, int)+0x6>
c000b86a:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b86d:	31 c0                	xor    eax,eax
c000b86f:	c3                   	ret    

c000b870 <Fs::initVFS()>:
c000b870:	83 ec 18             	sub    esp,0x18
c000b873:	6a 08                	push   0x8
c000b875:	e8 59 c2 ff ff       	call   c0007ad3 <malloc>
c000b87a:	89 04 24             	mov    DWORD PTR [esp],eax
c000b87d:	e8 96 e3 00 00       	call   c0019c18 <FAT::FAT()>
c000b882:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b889:	e8 45 c2 ff ff       	call   c0007ad3 <malloc>
c000b88e:	89 04 24             	mov    DWORD PTR [esp],eax
c000b891:	e8 b0 f2 00 00       	call   c001ab46 <ISO9660::ISO9660()>
c000b896:	83 c4 1c             	add    esp,0x1c
c000b899:	c3                   	ret    

c000b89a <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c000b89a:	55                   	push   ebp
c000b89b:	57                   	push   edi
c000b89c:	56                   	push   esi
c000b89d:	53                   	push   ebx
c000b89e:	81 ec 20 04 00 00    	sub    esp,0x420
c000b8a4:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c000b8ab:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c000b8b2:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c000b8b9:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c000b8c0:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b8c4:	68 00 04 00 00       	push   0x400
c000b8c9:	6a 00                	push   0x0
c000b8cb:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c000b8cf:	57                   	push   edi
c000b8d0:	e8 1b 4c ff ff       	call   c00004f0 <memset>
c000b8d5:	83 c4 10             	add    esp,0x10
c000b8d8:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c000b8dc:	75 0b                	jne    c000b8e9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c000b8de:	50                   	push   eax
c000b8df:	50                   	push   eax
c000b8e0:	56                   	push   esi
c000b8e1:	57                   	push   edi
c000b8e2:	e8 69 4d ff ff       	call   c0000650 <strcpy>
c000b8e7:	eb 45                	jmp    c000b92e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c000b8e9:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000b8ec:	83 f8 2f             	cmp    eax,0x2f
c000b8ef:	74 05                	je     c000b8f6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c000b8f1:	83 f8 5c             	cmp    eax,0x5c
c000b8f4:	75 19                	jne    c000b90f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c000b8f6:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000b8f9:	3c 60                	cmp    al,0x60
c000b8fb:	7e 03                	jle    c000b900 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c000b8fd:	83 e8 20             	sub    eax,0x20
c000b900:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b904:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b90b:	50                   	push   eax
c000b90c:	50                   	push   eax
c000b90d:	eb 18                	jmp    c000b927 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c000b90f:	50                   	push   eax
c000b910:	50                   	push   eax
c000b911:	55                   	push   ebp
c000b912:	57                   	push   edi
c000b913:	e8 38 4d ff ff       	call   c0000650 <strcpy>
c000b918:	58                   	pop    eax
c000b919:	5a                   	pop    edx
c000b91a:	68 a3 29 02 c0       	push   0xc00229a3
c000b91f:	57                   	push   edi
c000b920:	e8 4b 4f ff ff       	call   c0000870 <strcat>
c000b925:	59                   	pop    ecx
c000b926:	5d                   	pop    ebp
c000b927:	56                   	push   esi
c000b928:	57                   	push   edi
c000b929:	e8 42 4f ff ff       	call   c0000870 <strcat>
c000b92e:	83 c4 10             	add    esp,0x10
c000b931:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c000b935:	3c 60                	cmp    al,0x60
c000b937:	7e 03                	jle    c000b93c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c000b939:	83 e8 20             	sub    eax,0x20
c000b93c:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b940:	be 03 00 00 00       	mov    esi,0x3
c000b945:	88 03                	mov    BYTE PTR [ebx],al
c000b947:	b8 03 00 00 00       	mov    eax,0x3
c000b94c:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b953:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b959:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b95d:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c000b962:	89 fa                	mov    edx,edi
c000b964:	0f be ea             	movsx  ebp,dl
c000b967:	85 ed                	test   ebp,ebp
c000b969:	0f 84 a1 00 00 00    	je     c000ba10 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c000b96f:	8d 56 01             	lea    edx,[esi+0x1]
c000b972:	83 fd 2f             	cmp    ebp,0x2f
c000b975:	74 05                	je     c000b97c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c000b977:	83 fd 5c             	cmp    ebp,0x5c
c000b97a:	75 12                	jne    c000b98e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c000b97c:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b981:	89 c5                	mov    ebp,eax
c000b983:	74 09                	je     c000b98e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c000b985:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b989:	40                   	inc    eax
c000b98a:	89 d6                	mov    esi,edx
c000b98c:	eb cf                	jmp    c000b95d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c000b98e:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c000b993:	89 f9                	mov    ecx,edi
c000b995:	0f be e9             	movsx  ebp,cl
c000b998:	75 61                	jne    c000b9fb <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c000b99a:	83 fd 2e             	cmp    ebp,0x2e
c000b99d:	75 5c                	jne    c000b9fb <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c000b99f:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c000b9a4:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c000b9a9:	74 19                	je     c000b9c4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c000b9ab:	83 fd 2e             	cmp    ebp,0x2e
c000b9ae:	74 55                	je     c000ba05 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c000b9b0:	89 f2                	mov    edx,esi
c000b9b2:	42                   	inc    edx
c000b9b3:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c000b9b8:	83 f9 2f             	cmp    ecx,0x2f
c000b9bb:	74 f5                	je     c000b9b2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c000b9bd:	83 f9 5c             	cmp    ecx,0x5c
c000b9c0:	74 f0                	je     c000b9b2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c000b9c2:	eb c6                	jmp    c000b98a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b9c4:	83 fd 2e             	cmp    ebp,0x2e
c000b9c7:	74 3c                	je     c000ba05 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c000b9c9:	83 f8 03             	cmp    eax,0x3
c000b9cc:	74 bc                	je     c000b98a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b9ce:	42                   	inc    edx
c000b9cf:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c000b9d4:	83 f9 2f             	cmp    ecx,0x2f
c000b9d7:	74 f5                	je     c000b9ce <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c000b9d9:	83 f9 5c             	cmp    ecx,0x5c
c000b9dc:	74 f0                	je     c000b9ce <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c000b9de:	48                   	dec    eax
c000b9df:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b9e3:	75 06                	jne    c000b9eb <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c000b9e5:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b9e9:	eb f3                	jmp    c000b9de <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c000b9eb:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b9ef:	74 07                	je     c000b9f8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c000b9f1:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b9f5:	48                   	dec    eax
c000b9f6:	eb f3                	jmp    c000b9eb <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c000b9f8:	40                   	inc    eax
c000b9f9:	eb 8f                	jmp    c000b98a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b9fb:	83 fd 2f             	cmp    ebp,0x2f
c000b9fe:	74 8a                	je     c000b98a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000ba00:	83 fd 5c             	cmp    ebp,0x5c
c000ba03:	74 85                	je     c000b98a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000ba05:	89 f9                	mov    ecx,edi
c000ba07:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000ba0a:	40                   	inc    eax
c000ba0b:	e9 7a ff ff ff       	jmp    c000b98a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000ba10:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ba14:	83 ec 0c             	sub    esp,0xc
c000ba17:	53                   	push   ebx
c000ba18:	e8 63 4b ff ff       	call   c0000580 <strlen>
c000ba1d:	83 c4 10             	add    esp,0x10
c000ba20:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000ba25:	74 1c                	je     c000ba43 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c000ba27:	83 ec 0c             	sub    esp,0xc
c000ba2a:	53                   	push   ebx
c000ba2b:	e8 50 4b ff ff       	call   c0000580 <strlen>
c000ba30:	83 c4 10             	add    esp,0x10
c000ba33:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000ba38:	74 09                	je     c000ba43 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c000ba3a:	31 ff                	xor    edi,edi
c000ba3c:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c000ba41:	eb 4c                	jmp    c000ba8f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f5>
c000ba43:	83 ec 0c             	sub    esp,0xc
c000ba46:	53                   	push   ebx
c000ba47:	e8 34 4b ff ff       	call   c0000580 <strlen>
c000ba4c:	83 c4 10             	add    esp,0x10
c000ba4f:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000ba54:	74 e4                	je     c000ba3a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c000ba56:	83 ec 0c             	sub    esp,0xc
c000ba59:	53                   	push   ebx
c000ba5a:	e8 21 4b ff ff       	call   c0000580 <strlen>
c000ba5f:	83 c4 10             	add    esp,0x10
c000ba62:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000ba67:	eb ab                	jmp    c000ba14 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c000ba69:	50                   	push   eax
c000ba6a:	50                   	push   eax
c000ba6b:	53                   	push   ebx
c000ba6c:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000ba70:	55                   	push   ebp
c000ba71:	e8 da 4b ff ff       	call   c0000650 <strcpy>
c000ba76:	5a                   	pop    edx
c000ba77:	59                   	pop    ecx
c000ba78:	53                   	push   ebx
c000ba79:	55                   	push   ebp
c000ba7a:	e8 bd f6 ff ff       	call   c000b13c <KeDereferenceSymlink(char const*, char*)>
c000ba7f:	83 c4 10             	add    esp,0x10
c000ba82:	48                   	dec    eax
c000ba83:	75 27                	jne    c000baac <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x212>
c000ba85:	8d 47 01             	lea    eax,[edi+0x1]
c000ba88:	83 ff 14             	cmp    edi,0x14
c000ba8b:	74 08                	je     c000ba95 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1fb>
c000ba8d:	89 c7                	mov    edi,eax
c000ba8f:	85 f6                	test   esi,esi
c000ba91:	75 d6                	jne    c000ba69 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c000ba93:	eb 17                	jmp    c000baac <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x212>
c000ba95:	83 ec 0c             	sub    esp,0xc
c000ba98:	bf 15 00 00 00       	mov    edi,0x15
c000ba9d:	68 b1 19 02 c0       	push   0xc00219b1
c000baa2:	e8 34 5b 00 00       	call   c00115db <KePanic(char const*)>
c000baa7:	83 c4 10             	add    esp,0x10
c000baaa:	eb e3                	jmp    c000ba8f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f5>
c000baac:	81 c4 1c 04 00 00    	add    esp,0x41c
c000bab2:	5b                   	pop    ebx
c000bab3:	5e                   	pop    esi
c000bab4:	5f                   	pop    edi
c000bab5:	5d                   	pop    ebp
c000bab6:	c3                   	ret    
c000bab7:	90                   	nop

c000bab8 <File::File(char const*, Process*, bool)>:
c000bab8:	83 ec 1c             	sub    esp,0x1c
c000babb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000babf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000bac3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bac7:	83 ec 08             	sub    esp,0x8
c000baca:	6a 00                	push   0x0
c000bacc:	50                   	push   eax
c000bacd:	e8 d4 d6 ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000bad2:	83 c4 10             	add    esp,0x10
c000bad5:	ba 4c 1a 02 c0       	mov    edx,0xc0021a4c
c000bada:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bade:	89 10                	mov    DWORD PTR [eax],edx
c000bae0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000bae5:	85 c0                	test   eax,eax
c000bae7:	74 0f                	je     c000baf8 <File::File(char const*, Process*, bool)+0x40>
c000bae9:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000baee:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000baf2:	74 04                	je     c000baf8 <File::File(char const*, Process*, bool)+0x40>
c000baf4:	b0 01                	mov    al,0x1
c000baf6:	eb 02                	jmp    c000bafa <File::File(char const*, Process*, bool)+0x42>
c000baf8:	b0 00                	mov    al,0x0
c000bafa:	0f b6 c0             	movzx  eax,al
c000bafd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bb01:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000bb07:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bb0b:	83 c2 0d             	add    edx,0xd
c000bb0e:	50                   	push   eax
c000bb0f:	51                   	push   ecx
c000bb10:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb14:	52                   	push   edx
c000bb15:	e8 80 fd ff ff       	call   c000b89a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bb1a:	83 c4 10             	add    esp,0x10
c000bb1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb21:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000bb24:	83 e8 41             	sub    eax,0x41
c000bb27:	88 c2                	mov    dl,al
c000bb29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb2d:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000bb33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb37:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000bb3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb3f:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb45:	0f b6 c0             	movzx  eax,al
c000bb48:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb4f:	85 c0                	test   eax,eax
c000bb51:	74 3e                	je     c000bb91 <File::File(char const*, Process*, bool)+0xd9>
c000bb53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb57:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb5d:	0f b6 c0             	movzx  eax,al
c000bb60:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb67:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bb6d:	85 c0                	test   eax,eax
c000bb6f:	75 20                	jne    c000bb91 <File::File(char const*, Process*, bool)+0xd9>
c000bb71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb75:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb7b:	0f b6 c0             	movzx  eax,al
c000bb7e:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb85:	83 ec 0c             	sub    esp,0xc
c000bb88:	50                   	push   eax
c000bb89:	e8 ae 21 00 00       	call   c000dd3c <LogicalDisk::mount()>
c000bb8e:	83 c4 10             	add    esp,0x10
c000bb91:	90                   	nop
c000bb92:	83 c4 1c             	add    esp,0x1c
c000bb95:	c3                   	ret    

c000bb96 <File::File(char const*, Process*)>:
c000bb96:	83 ec 0c             	sub    esp,0xc
c000bb99:	6a 01                	push   0x1
c000bb9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba7:	e8 0c ff ff ff       	call   c000bab8 <File::File(char const*, Process*, bool)>
c000bbac:	83 c4 10             	add    esp,0x10
c000bbaf:	90                   	nop
c000bbb0:	83 c4 0c             	add    esp,0xc
c000bbb3:	c3                   	ret    

c000bbb4 <File::open(FileOpenMode)>:
c000bbb4:	53                   	push   ebx
c000bbb5:	b8 0b 00 00 00       	mov    eax,0xb
c000bbba:	83 ec 08             	sub    esp,0x8
c000bbbd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bbc1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000bbc8:	83 fa 19             	cmp    edx,0x19
c000bbcb:	77 40                	ja     c000bc0d <File::open(FileOpenMode)+0x59>
c000bbcd:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bbd4:	85 d2                	test   edx,edx
c000bbd6:	74 35                	je     c000bc0d <File::open(FileOpenMode)+0x59>
c000bbd8:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bbde:	85 d2                	test   edx,edx
c000bbe0:	74 2b                	je     c000bc0d <File::open(FileOpenMode)+0x59>
c000bbe2:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000bbe6:	b8 06 00 00 00       	mov    eax,0x6
c000bbeb:	75 20                	jne    c000bc0d <File::open(FileOpenMode)+0x59>
c000bbed:	8b 02                	mov    eax,DWORD PTR [edx]
c000bbef:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000bbf5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbf9:	51                   	push   ecx
c000bbfa:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000bbfd:	51                   	push   ecx
c000bbfe:	52                   	push   edx
c000bbff:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bc02:	83 c4 10             	add    esp,0x10
c000bc05:	85 c0                	test   eax,eax
c000bc07:	75 04                	jne    c000bc0d <File::open(FileOpenMode)+0x59>
c000bc09:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bc0d:	83 c4 08             	add    esp,0x8
c000bc10:	5b                   	pop    ebx
c000bc11:	c3                   	ret    

c000bc12 <File::close()>:
c000bc12:	53                   	push   ebx
c000bc13:	b8 0b 00 00 00       	mov    eax,0xb
c000bc18:	83 ec 08             	sub    esp,0x8
c000bc1b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bc1f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bc26:	83 f9 19             	cmp    ecx,0x19
c000bc29:	77 41                	ja     c000bc6c <File::close()+0x5a>
c000bc2b:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000bc32:	85 db                	test   ebx,ebx
c000bc34:	74 36                	je     c000bc6c <File::close()+0x5a>
c000bc36:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bc3d:	74 2d                	je     c000bc6c <File::close()+0x5a>
c000bc3f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bc43:	b8 05 00 00 00       	mov    eax,0x5
c000bc48:	74 22                	je     c000bc6c <File::close()+0x5a>
c000bc4a:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bc4e:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000bc55:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bc5b:	53                   	push   ebx
c000bc5c:	53                   	push   ebx
c000bc5d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bc5f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bc65:	50                   	push   eax
c000bc66:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000bc69:	83 c4 10             	add    esp,0x10
c000bc6c:	83 c4 08             	add    esp,0x8
c000bc6f:	5b                   	pop    ebx
c000bc70:	c3                   	ret    
c000bc71:	90                   	nop

c000bc72 <File::seek(unsigned long long)>:
c000bc72:	56                   	push   esi
c000bc73:	b8 0b 00 00 00       	mov    eax,0xb
c000bc78:	53                   	push   ebx
c000bc79:	51                   	push   ecx
c000bc7a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bc7e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bc82:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bc86:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bc8d:	83 fa 19             	cmp    edx,0x19
c000bc90:	77 31                	ja     c000bcc3 <File::seek(unsigned long long)+0x51>
c000bc92:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bc99:	85 d2                	test   edx,edx
c000bc9b:	74 26                	je     c000bcc3 <File::seek(unsigned long long)+0x51>
c000bc9d:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bca3:	85 d2                	test   edx,edx
c000bca5:	74 1c                	je     c000bcc3 <File::seek(unsigned long long)+0x51>
c000bca7:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bcab:	b8 05 00 00 00       	mov    eax,0x5
c000bcb0:	74 11                	je     c000bcc3 <File::seek(unsigned long long)+0x51>
c000bcb2:	8b 02                	mov    eax,DWORD PTR [edx]
c000bcb4:	53                   	push   ebx
c000bcb5:	51                   	push   ecx
c000bcb6:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bcbc:	52                   	push   edx
c000bcbd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bcc0:	83 c4 10             	add    esp,0x10
c000bcc3:	5a                   	pop    edx
c000bcc4:	5b                   	pop    ebx
c000bcc5:	5e                   	pop    esi
c000bcc6:	c3                   	ret    
c000bcc7:	90                   	nop

c000bcc8 <File::truncate(unsigned long long)>:
c000bcc8:	56                   	push   esi
c000bcc9:	b8 0b 00 00 00       	mov    eax,0xb
c000bcce:	53                   	push   ebx
c000bccf:	51                   	push   ecx
c000bcd0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bcd4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bcd8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bcdc:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bce3:	83 fa 19             	cmp    edx,0x19
c000bce6:	77 31                	ja     c000bd19 <File::truncate(unsigned long long)+0x51>
c000bce8:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bcef:	85 d2                	test   edx,edx
c000bcf1:	74 26                	je     c000bd19 <File::truncate(unsigned long long)+0x51>
c000bcf3:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bcf9:	85 d2                	test   edx,edx
c000bcfb:	74 1c                	je     c000bd19 <File::truncate(unsigned long long)+0x51>
c000bcfd:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bd01:	b8 05 00 00 00       	mov    eax,0x5
c000bd06:	74 11                	je     c000bd19 <File::truncate(unsigned long long)+0x51>
c000bd08:	8b 02                	mov    eax,DWORD PTR [edx]
c000bd0a:	53                   	push   ebx
c000bd0b:	51                   	push   ecx
c000bd0c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bd12:	52                   	push   edx
c000bd13:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000bd16:	83 c4 10             	add    esp,0x10
c000bd19:	5a                   	pop    edx
c000bd1a:	5b                   	pop    ebx
c000bd1b:	5e                   	pop    esi
c000bd1c:	c3                   	ret    
c000bd1d:	90                   	nop

c000bd1e <File::tell(unsigned long long*)>:
c000bd1e:	83 ec 0c             	sub    esp,0xc
c000bd21:	b8 0b 00 00 00       	mov    eax,0xb
c000bd26:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bd2a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000bd31:	83 fa 19             	cmp    edx,0x19
c000bd34:	77 34                	ja     c000bd6a <File::tell(unsigned long long*)+0x4c>
c000bd36:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bd3d:	85 d2                	test   edx,edx
c000bd3f:	74 29                	je     c000bd6a <File::tell(unsigned long long*)+0x4c>
c000bd41:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bd47:	85 d2                	test   edx,edx
c000bd49:	74 1f                	je     c000bd6a <File::tell(unsigned long long*)+0x4c>
c000bd4b:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000bd4f:	b8 05 00 00 00       	mov    eax,0x5
c000bd54:	74 14                	je     c000bd6a <File::tell(unsigned long long*)+0x4c>
c000bd56:	50                   	push   eax
c000bd57:	8b 02                	mov    eax,DWORD PTR [edx]
c000bd59:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd5d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000bd63:	52                   	push   edx
c000bd64:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000bd67:	83 c4 10             	add    esp,0x10
c000bd6a:	83 c4 0c             	add    esp,0xc
c000bd6d:	c3                   	ret    

c000bd6e <File::rewind()>:
c000bd6e:	83 ec 10             	sub    esp,0x10
c000bd71:	6a 00                	push   0x0
c000bd73:	6a 00                	push   0x0
c000bd75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd79:	e8 f4 fe ff ff       	call   c000bc72 <File::seek(unsigned long long)>
c000bd7e:	83 c4 1c             	add    esp,0x1c
c000bd81:	c3                   	ret    

c000bd82 <File::unlink()>:
c000bd82:	83 ec 0c             	sub    esp,0xc
c000bd85:	b8 0b 00 00 00       	mov    eax,0xb
c000bd8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd8e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bd95:	83 f9 19             	cmp    ecx,0x19
c000bd98:	77 2f                	ja     c000bdc9 <File::unlink()+0x47>
c000bd9a:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bda1:	85 c9                	test   ecx,ecx
c000bda3:	74 24                	je     c000bdc9 <File::unlink()+0x47>
c000bda5:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bdab:	85 c9                	test   ecx,ecx
c000bdad:	74 1a                	je     c000bdc9 <File::unlink()+0x47>
c000bdaf:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bdb3:	b8 06 00 00 00       	mov    eax,0x6
c000bdb8:	75 0f                	jne    c000bdc9 <File::unlink()+0x47>
c000bdba:	50                   	push   eax
c000bdbb:	83 c2 0d             	add    edx,0xd
c000bdbe:	50                   	push   eax
c000bdbf:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bdc1:	52                   	push   edx
c000bdc2:	51                   	push   ecx
c000bdc3:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bdc6:	83 c4 10             	add    esp,0x10
c000bdc9:	83 c4 0c             	add    esp,0xc
c000bdcc:	c3                   	ret    
c000bdcd:	90                   	nop

c000bdce <File::rename(char const*)>:
c000bdce:	83 ec 0c             	sub    esp,0xc
c000bdd1:	b8 0b 00 00 00       	mov    eax,0xb
c000bdd6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bdda:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bde1:	83 f9 19             	cmp    ecx,0x19
c000bde4:	77 32                	ja     c000be18 <File::rename(char const*)+0x4a>
c000bde6:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bded:	85 c9                	test   ecx,ecx
c000bdef:	74 27                	je     c000be18 <File::rename(char const*)+0x4a>
c000bdf1:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bdf7:	85 c9                	test   ecx,ecx
c000bdf9:	74 1d                	je     c000be18 <File::rename(char const*)+0x4a>
c000bdfb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bdff:	b8 06 00 00 00       	mov    eax,0x6
c000be04:	75 12                	jne    c000be18 <File::rename(char const*)+0x4a>
c000be06:	50                   	push   eax
c000be07:	83 c2 0d             	add    edx,0xd
c000be0a:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be0c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000be10:	52                   	push   edx
c000be11:	51                   	push   ecx
c000be12:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000be15:	83 c4 10             	add    esp,0x10
c000be18:	83 c4 0c             	add    esp,0xc
c000be1b:	c3                   	ret    

c000be1c <File::chfatattr(unsigned char, unsigned char)>:
c000be1c:	57                   	push   edi
c000be1d:	b8 0b 00 00 00       	mov    eax,0xb
c000be22:	56                   	push   esi
c000be23:	53                   	push   ebx
c000be24:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be28:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000be2c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000be30:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be37:	83 f9 19             	cmp    ecx,0x19
c000be3a:	77 37                	ja     c000be73 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be3c:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be43:	85 c9                	test   ecx,ecx
c000be45:	74 2c                	je     c000be73 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be47:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be4d:	85 c9                	test   ecx,ecx
c000be4f:	74 22                	je     c000be73 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be51:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be55:	b8 06 00 00 00       	mov    eax,0x6
c000be5a:	75 17                	jne    c000be73 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be5c:	89 f0                	mov    eax,esi
c000be5e:	8b 39                	mov    edi,DWORD PTR [ecx]
c000be60:	0f b6 db             	movzx  ebx,bl
c000be63:	0f b6 f0             	movzx  esi,al
c000be66:	83 c2 0d             	add    edx,0xd
c000be69:	56                   	push   esi
c000be6a:	53                   	push   ebx
c000be6b:	52                   	push   edx
c000be6c:	51                   	push   ecx
c000be6d:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000be70:	83 c4 10             	add    esp,0x10
c000be73:	5b                   	pop    ebx
c000be74:	5e                   	pop    esi
c000be75:	5f                   	pop    edi
c000be76:	c3                   	ret    
c000be77:	90                   	nop

c000be78 <File::exists()>:
c000be78:	83 ec 0c             	sub    esp,0xc
c000be7b:	31 c0                	xor    eax,eax
c000be7d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be81:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be88:	83 f9 19             	cmp    ecx,0x19
c000be8b:	77 24                	ja     c000beb1 <File::exists()+0x39>
c000be8d:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be94:	85 c9                	test   ecx,ecx
c000be96:	74 19                	je     c000beb1 <File::exists()+0x39>
c000be98:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be9e:	85 c9                	test   ecx,ecx
c000bea0:	74 0f                	je     c000beb1 <File::exists()+0x39>
c000bea2:	50                   	push   eax
c000bea3:	83 c2 0d             	add    edx,0xd
c000bea6:	50                   	push   eax
c000bea7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bea9:	52                   	push   edx
c000beaa:	51                   	push   ecx
c000beab:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000beae:	83 c4 10             	add    esp,0x10
c000beb1:	83 c4 0c             	add    esp,0xc
c000beb4:	c3                   	ret    
c000beb5:	90                   	nop

c000beb6 <File::stat(unsigned long long*, bool*)>:
c000beb6:	56                   	push   esi
c000beb7:	53                   	push   ebx
c000beb8:	50                   	push   eax
c000beb9:	b8 0b 00 00 00       	mov    eax,0xb
c000bebe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bec2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bec6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000beca:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bed1:	83 f9 19             	cmp    ecx,0x19
c000bed4:	77 3d                	ja     c000bf13 <File::stat(unsigned long long*, bool*)+0x5d>
c000bed6:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bedd:	85 c9                	test   ecx,ecx
c000bedf:	74 32                	je     c000bf13 <File::stat(unsigned long long*, bool*)+0x5d>
c000bee1:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bee7:	85 c9                	test   ecx,ecx
c000bee9:	74 28                	je     c000bf13 <File::stat(unsigned long long*, bool*)+0x5d>
c000beeb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000beef:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bef1:	74 13                	je     c000bf06 <File::stat(unsigned long long*, bool*)+0x50>
c000bef3:	83 ec 04             	sub    esp,0x4
c000bef6:	56                   	push   esi
c000bef7:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000befd:	51                   	push   ecx
c000befe:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000bf01:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000bf04:	eb 0a                	jmp    c000bf10 <File::stat(unsigned long long*, bool*)+0x5a>
c000bf06:	53                   	push   ebx
c000bf07:	83 c2 0d             	add    edx,0xd
c000bf0a:	56                   	push   esi
c000bf0b:	52                   	push   edx
c000bf0c:	51                   	push   ecx
c000bf0d:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000bf10:	83 c4 10             	add    esp,0x10
c000bf13:	5a                   	pop    edx
c000bf14:	5b                   	pop    ebx
c000bf15:	5e                   	pop    esi
c000bf16:	c3                   	ret    

c000bf17 <Fs::setcwd(Process*, char*)>:
c000bf17:	55                   	push   ebp
c000bf18:	57                   	push   edi
c000bf19:	56                   	push   esi
c000bf1a:	53                   	push   ebx
c000bf1b:	81 ec 1c 02 00 00    	sub    esp,0x21c
c000bf21:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000bf28:	6a 00                	push   0x0
c000bf2a:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bf30:	57                   	push   edi
c000bf31:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000bf38:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000bf3c:	56                   	push   esi
c000bf3d:	e8 58 f9 ff ff       	call   c000b89a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bf42:	89 34 24             	mov    DWORD PTR [esp],esi
c000bf45:	e8 36 46 ff ff       	call   c0000580 <strlen>
c000bf4a:	83 c4 10             	add    esp,0x10
c000bf4d:	83 f8 02             	cmp    eax,0x2
c000bf50:	77 15                	ja     c000bf67 <Fs::setcwd(Process*, char*)+0x50>
c000bf52:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bf57:	83 eb 41             	sub    ebx,0x41
c000bf5a:	8b 04 9d 80 b8 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd4780]
c000bf61:	85 c0                	test   eax,eax
c000bf63:	75 1c                	jne    c000bf81 <Fs::setcwd(Process*, char*)+0x6a>
c000bf65:	eb 2f                	jmp    c000bf96 <Fs::setcwd(Process*, char*)+0x7f>
c000bf67:	83 ec 0c             	sub    esp,0xc
c000bf6a:	56                   	push   esi
c000bf6b:	e8 10 46 ff ff       	call   c0000580 <strlen>
c000bf70:	83 c4 10             	add    esp,0x10
c000bf73:	83 f8 03             	cmp    eax,0x3
c000bf76:	75 57                	jne    c000bfcf <Fs::setcwd(Process*, char*)+0xb8>
c000bf78:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bf7d:	75 50                	jne    c000bfcf <Fs::setcwd(Process*, char*)+0xb8>
c000bf7f:	eb d1                	jmp    c000bf52 <Fs::setcwd(Process*, char*)+0x3b>
c000bf81:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bf88:	75 0c                	jne    c000bf96 <Fs::setcwd(Process*, char*)+0x7f>
c000bf8a:	83 ec 0c             	sub    esp,0xc
c000bf8d:	50                   	push   eax
c000bf8e:	e8 a9 1d 00 00       	call   c000dd3c <LogicalDisk::mount()>
c000bf93:	83 c4 10             	add    esp,0x10
c000bf96:	83 fb 19             	cmp    ebx,0x19
c000bf99:	b8 03 00 00 00       	mov    eax,0x3
c000bf9e:	0f 87 c6 00 00 00    	ja     c000c06a <Fs::setcwd(Process*, char*)+0x153>
c000bfa4:	8b 14 9d 80 b8 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd4780]
c000bfab:	b8 05 00 00 00       	mov    eax,0x5
c000bfb0:	85 d2                	test   edx,edx
c000bfb2:	0f 84 b2 00 00 00    	je     c000c06a <Fs::setcwd(Process*, char*)+0x153>
c000bfb8:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bfbf:	b8 06 00 00 00       	mov    eax,0x6
c000bfc4:	0f 85 92 00 00 00    	jne    c000c05c <Fs::setcwd(Process*, char*)+0x145>
c000bfca:	e9 9b 00 00 00       	jmp    c000c06a <Fs::setcwd(Process*, char*)+0x153>
c000bfcf:	83 ec 0c             	sub    esp,0xc
c000bfd2:	68 14 01 00 00       	push   0x114
c000bfd7:	e8 f7 ba ff ff       	call   c0007ad3 <malloc>
c000bfdc:	83 c4 0c             	add    esp,0xc
c000bfdf:	55                   	push   ebp
c000bfe0:	56                   	push   esi
c000bfe1:	50                   	push   eax
c000bfe2:	89 c3                	mov    ebx,eax
c000bfe4:	e8 ad fb ff ff       	call   c000bb96 <File::File(char const*, Process*)>
c000bfe9:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bfee:	83 c4 0c             	add    esp,0xc
c000bff1:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bff5:	50                   	push   eax
c000bff6:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bffa:	50                   	push   eax
c000bffb:	53                   	push   ebx
c000bffc:	e8 b5 fe ff ff       	call   c000beb6 <File::stat(unsigned long long*, bool*)>
c000c001:	83 c4 10             	add    esp,0x10
c000c004:	83 f8 02             	cmp    eax,0x2
c000c007:	74 27                	je     c000c030 <Fs::setcwd(Process*, char*)+0x119>
c000c009:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000c00e:	75 1c                	jne    c000c02c <Fs::setcwd(Process*, char*)+0x115>
c000c010:	85 db                	test   ebx,ebx
c000c012:	b8 02 00 00 00       	mov    eax,0x2
c000c017:	74 51                	je     c000c06a <Fs::setcwd(Process*, char*)+0x153>
c000c019:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c01b:	83 ec 0c             	sub    esp,0xc
c000c01e:	53                   	push   ebx
c000c01f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c022:	83 c4 10             	add    esp,0x10
c000c025:	b8 02 00 00 00       	mov    eax,0x2
c000c02a:	eb 3e                	jmp    c000c06a <Fs::setcwd(Process*, char*)+0x153>
c000c02c:	85 c0                	test   eax,eax
c000c02e:	74 1c                	je     c000c04c <Fs::setcwd(Process*, char*)+0x135>
c000c030:	85 db                	test   ebx,ebx
c000c032:	b8 01 00 00 00       	mov    eax,0x1
c000c037:	74 31                	je     c000c06a <Fs::setcwd(Process*, char*)+0x153>
c000c039:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c03b:	83 ec 0c             	sub    esp,0xc
c000c03e:	53                   	push   ebx
c000c03f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c042:	83 c4 10             	add    esp,0x10
c000c045:	b8 01 00 00 00       	mov    eax,0x1
c000c04a:	eb 1e                	jmp    c000c06a <Fs::setcwd(Process*, char*)+0x153>
c000c04c:	85 db                	test   ebx,ebx
c000c04e:	74 0c                	je     c000c05c <Fs::setcwd(Process*, char*)+0x145>
c000c050:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c052:	83 ec 0c             	sub    esp,0xc
c000c055:	53                   	push   ebx
c000c056:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c059:	83 c4 10             	add    esp,0x10
c000c05c:	50                   	push   eax
c000c05d:	50                   	push   eax
c000c05e:	56                   	push   esi
c000c05f:	57                   	push   edi
c000c060:	e8 eb 45 ff ff       	call   c0000650 <strcpy>
c000c065:	83 c4 10             	add    esp,0x10
c000c068:	31 c0                	xor    eax,eax
c000c06a:	81 c4 1c 02 00 00    	add    esp,0x21c
c000c070:	5b                   	pop    ebx
c000c071:	5e                   	pop    esi
c000c072:	5f                   	pop    edi
c000c073:	5d                   	pop    ebp
c000c074:	c3                   	ret    
c000c075:	90                   	nop

c000c076 <Directory::Directory(char const*, Process*)>:
c000c076:	83 ec 0c             	sub    esp,0xc
c000c079:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c07d:	83 ec 08             	sub    esp,0x8
c000c080:	6a 00                	push   0x0
c000c082:	50                   	push   eax
c000c083:	e8 1e d1 ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000c088:	83 c4 10             	add    esp,0x10
c000c08b:	ba 68 1a 02 c0       	mov    edx,0xc0021a68
c000c090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c094:	89 10                	mov    DWORD PTR [eax],edx
c000c096:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000c09b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c09f:	0f 95 c0             	setne  al
c000c0a2:	0f b6 c0             	movzx  eax,al
c000c0a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c0a9:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000c0af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c0b3:	83 c2 0d             	add    edx,0xd
c000c0b6:	50                   	push   eax
c000c0b7:	51                   	push   ecx
c000c0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0bc:	52                   	push   edx
c000c0bd:	e8 d8 f7 ff ff       	call   c000b89a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000c0c2:	83 c4 10             	add    esp,0x10
c000c0c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0c9:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000c0cc:	83 e8 41             	sub    eax,0x41
c000c0cf:	88 c2                	mov    dl,al
c000c0d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0d5:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000c0db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0df:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000c0e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0e7:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c0ed:	0f b6 c0             	movzx  eax,al
c000c0f0:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c0f7:	85 c0                	test   eax,eax
c000c0f9:	74 3e                	je     c000c139 <Directory::Directory(char const*, Process*)+0xc3>
c000c0fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0ff:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c105:	0f b6 c0             	movzx  eax,al
c000c108:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c10f:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c115:	85 c0                	test   eax,eax
c000c117:	75 20                	jne    c000c139 <Directory::Directory(char const*, Process*)+0xc3>
c000c119:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c11d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c123:	0f b6 c0             	movzx  eax,al
c000c126:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c12d:	83 ec 0c             	sub    esp,0xc
c000c130:	50                   	push   eax
c000c131:	e8 06 1c 00 00       	call   c000dd3c <LogicalDisk::mount()>
c000c136:	83 c4 10             	add    esp,0x10
c000c139:	90                   	nop
c000c13a:	83 c4 0c             	add    esp,0xc
c000c13d:	c3                   	ret    

c000c13e <Directory::open()>:
c000c13e:	53                   	push   ebx
c000c13f:	b8 0b 00 00 00       	mov    eax,0xb
c000c144:	83 ec 08             	sub    esp,0x8
c000c147:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c14b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000c152:	83 fa 19             	cmp    edx,0x19
c000c155:	77 3d                	ja     c000c194 <Directory::open()+0x56>
c000c157:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000c15e:	85 d2                	test   edx,edx
c000c160:	74 32                	je     c000c194 <Directory::open()+0x56>
c000c162:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000c168:	85 d2                	test   edx,edx
c000c16a:	74 28                	je     c000c194 <Directory::open()+0x56>
c000c16c:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000c170:	b8 06 00 00 00       	mov    eax,0x6
c000c175:	75 1d                	jne    c000c194 <Directory::open()+0x56>
c000c177:	50                   	push   eax
c000c178:	8b 02                	mov    eax,DWORD PTR [edx]
c000c17a:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000c180:	51                   	push   ecx
c000c181:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000c184:	51                   	push   ecx
c000c185:	52                   	push   edx
c000c186:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000c189:	83 c4 10             	add    esp,0x10
c000c18c:	85 c0                	test   eax,eax
c000c18e:	75 04                	jne    c000c194 <Directory::open()+0x56>
c000c190:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000c194:	83 c4 08             	add    esp,0x8
c000c197:	5b                   	pop    ebx
c000c198:	c3                   	ret    
c000c199:	90                   	nop

c000c19a <Directory::close()>:
c000c19a:	53                   	push   ebx
c000c19b:	b8 0b 00 00 00       	mov    eax,0xb
c000c1a0:	83 ec 08             	sub    esp,0x8
c000c1a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c1a7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c1ae:	83 f9 19             	cmp    ecx,0x19
c000c1b1:	77 41                	ja     c000c1f4 <Directory::close()+0x5a>
c000c1b3:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000c1ba:	85 db                	test   ebx,ebx
c000c1bc:	74 36                	je     c000c1f4 <Directory::close()+0x5a>
c000c1be:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000c1c5:	74 2d                	je     c000c1f4 <Directory::close()+0x5a>
c000c1c7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c1cb:	b8 05 00 00 00       	mov    eax,0x5
c000c1d0:	74 22                	je     c000c1f4 <Directory::close()+0x5a>
c000c1d2:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000c1d6:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000c1dd:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c1e3:	53                   	push   ebx
c000c1e4:	53                   	push   ebx
c000c1e5:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c1e7:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000c1ed:	50                   	push   eax
c000c1ee:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000c1f1:	83 c4 10             	add    esp,0x10
c000c1f4:	83 c4 08             	add    esp,0x8
c000c1f7:	5b                   	pop    ebx
c000c1f8:	c3                   	ret    
c000c1f9:	90                   	nop

c000c1fa <Directory::unlink()>:
c000c1fa:	83 ec 0c             	sub    esp,0xc
c000c1fd:	b8 0b 00 00 00       	mov    eax,0xb
c000c202:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c206:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c20d:	83 f9 19             	cmp    ecx,0x19
c000c210:	77 2f                	ja     c000c241 <Directory::unlink()+0x47>
c000c212:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c219:	85 c9                	test   ecx,ecx
c000c21b:	74 24                	je     c000c241 <Directory::unlink()+0x47>
c000c21d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c223:	85 c9                	test   ecx,ecx
c000c225:	74 1a                	je     c000c241 <Directory::unlink()+0x47>
c000c227:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c22b:	b8 06 00 00 00       	mov    eax,0x6
c000c230:	75 0f                	jne    c000c241 <Directory::unlink()+0x47>
c000c232:	50                   	push   eax
c000c233:	83 c2 0d             	add    edx,0xd
c000c236:	50                   	push   eax
c000c237:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c239:	52                   	push   edx
c000c23a:	51                   	push   ecx
c000c23b:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000c23e:	83 c4 10             	add    esp,0x10
c000c241:	83 c4 0c             	add    esp,0xc
c000c244:	c3                   	ret    
c000c245:	90                   	nop

c000c246 <Directory::rename(char const*)>:
c000c246:	83 ec 0c             	sub    esp,0xc
c000c249:	b8 0b 00 00 00       	mov    eax,0xb
c000c24e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c252:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c259:	83 f9 19             	cmp    ecx,0x19
c000c25c:	77 32                	ja     c000c290 <Directory::rename(char const*)+0x4a>
c000c25e:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c265:	85 c9                	test   ecx,ecx
c000c267:	74 27                	je     c000c290 <Directory::rename(char const*)+0x4a>
c000c269:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c26f:	85 c9                	test   ecx,ecx
c000c271:	74 1d                	je     c000c290 <Directory::rename(char const*)+0x4a>
c000c273:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c277:	b8 06 00 00 00       	mov    eax,0x6
c000c27c:	75 12                	jne    c000c290 <Directory::rename(char const*)+0x4a>
c000c27e:	50                   	push   eax
c000c27f:	83 c2 0d             	add    edx,0xd
c000c282:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c284:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c288:	52                   	push   edx
c000c289:	51                   	push   ecx
c000c28a:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000c28d:	83 c4 10             	add    esp,0x10
c000c290:	83 c4 0c             	add    esp,0xc
c000c293:	c3                   	ret    

c000c294 <Directory::exists()>:
c000c294:	83 ec 0c             	sub    esp,0xc
c000c297:	31 c0                	xor    eax,eax
c000c299:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c29d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c2a4:	83 f9 19             	cmp    ecx,0x19
c000c2a7:	77 24                	ja     c000c2cd <Directory::exists()+0x39>
c000c2a9:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c2b0:	85 c9                	test   ecx,ecx
c000c2b2:	74 19                	je     c000c2cd <Directory::exists()+0x39>
c000c2b4:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c2ba:	85 c9                	test   ecx,ecx
c000c2bc:	74 0f                	je     c000c2cd <Directory::exists()+0x39>
c000c2be:	50                   	push   eax
c000c2bf:	83 c2 0d             	add    edx,0xd
c000c2c2:	50                   	push   eax
c000c2c3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c2c5:	52                   	push   edx
c000c2c6:	51                   	push   ecx
c000c2c7:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000c2ca:	83 c4 10             	add    esp,0x10
c000c2cd:	83 c4 0c             	add    esp,0xc
c000c2d0:	c3                   	ret    
c000c2d1:	90                   	nop

c000c2d2 <Directory::read(dirent*)>:
c000c2d2:	83 ec 1c             	sub    esp,0x1c
c000c2d5:	b8 0b 00 00 00       	mov    eax,0xb
c000c2da:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c2de:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c2e5:	83 f9 19             	cmp    ecx,0x19
c000c2e8:	77 30                	ja     c000c31a <Directory::read(dirent*)+0x48>
c000c2ea:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c2f1:	85 c9                	test   ecx,ecx
c000c2f3:	74 25                	je     c000c31a <Directory::read(dirent*)+0x48>
c000c2f5:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000c2fc:	74 1c                	je     c000c31a <Directory::read(dirent*)+0x48>
c000c2fe:	83 ec 0c             	sub    esp,0xc
c000c301:	8b 02                	mov    eax,DWORD PTR [edx]
c000c303:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c307:	51                   	push   ecx
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	6a 00                	push   0x0
c000c30e:	68 10 01 00 00       	push   0x110
c000c313:	52                   	push   edx
c000c314:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c317:	83 c4 20             	add    esp,0x20
c000c31a:	83 c4 1c             	add    esp,0x1c
c000c31d:	c3                   	ret    

c000c31e <Directory::create()>:
c000c31e:	83 ec 0c             	sub    esp,0xc
c000c321:	b8 0b 00 00 00       	mov    eax,0xb
c000c326:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c32a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c331:	83 f9 19             	cmp    ecx,0x19
c000c334:	77 2f                	ja     c000c365 <Directory::create()+0x47>
c000c336:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c33d:	85 c9                	test   ecx,ecx
c000c33f:	74 24                	je     c000c365 <Directory::create()+0x47>
c000c341:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c347:	85 c9                	test   ecx,ecx
c000c349:	74 1a                	je     c000c365 <Directory::create()+0x47>
c000c34b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c34f:	b8 06 00 00 00       	mov    eax,0x6
c000c354:	75 0f                	jne    c000c365 <Directory::create()+0x47>
c000c356:	50                   	push   eax
c000c357:	83 c2 0d             	add    edx,0xd
c000c35a:	50                   	push   eax
c000c35b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c35d:	52                   	push   edx
c000c35e:	51                   	push   ecx
c000c35f:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000c362:	83 c4 10             	add    esp,0x10
c000c365:	83 c4 0c             	add    esp,0xc
c000c368:	c3                   	ret    
c000c369:	90                   	nop

c000c36a <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000c36a:	b8 0a 00 00 00       	mov    eax,0xa
c000c36f:	c3                   	ret    

c000c370 <Bus::Bus(char const*)>:
c000c370:	83 ec 0c             	sub    esp,0xc
c000c373:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c377:	83 ec 08             	sub    esp,0x8
c000c37a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c37e:	50                   	push   eax
c000c37f:	e8 28 08 00 00       	call   c000cbac <Device::Device(char const*)>
c000c384:	83 c4 10             	add    esp,0x10
c000c387:	ba 84 1a 02 c0       	mov    edx,0xc0021a84
c000c38c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c390:	89 10                	mov    DWORD PTR [eax],edx
c000c392:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c396:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000c3a0:	90                   	nop
c000c3a1:	83 c4 0c             	add    esp,0xc
c000c3a4:	c3                   	ret    
c000c3a5:	90                   	nop
c000c3a6:	66 90                	xchg   ax,ax

c000c3a8 <Bus::~Bus()>:
c000c3a8:	83 ec 0c             	sub    esp,0xc
c000c3ab:	ba 84 1a 02 c0       	mov    edx,0xc0021a84
c000c3b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3b4:	89 10                	mov    DWORD PTR [eax],edx
c000c3b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3ba:	83 ec 0c             	sub    esp,0xc
c000c3bd:	50                   	push   eax
c000c3be:	e8 53 05 00 00       	call   c000c916 <Device::~Device()>
c000c3c3:	83 c4 10             	add    esp,0x10
c000c3c6:	90                   	nop
c000c3c7:	83 c4 0c             	add    esp,0xc
c000c3ca:	c3                   	ret    
c000c3cb:	90                   	nop

c000c3cc <Bus::~Bus()>:
c000c3cc:	83 ec 0c             	sub    esp,0xc
c000c3cf:	83 ec 0c             	sub    esp,0xc
c000c3d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3d6:	e8 cd ff ff ff       	call   c000c3a8 <Bus::~Bus()>
c000c3db:	83 c4 10             	add    esp,0x10
c000c3de:	83 ec 08             	sub    esp,0x8
c000c3e1:	68 58 01 00 00       	push   0x158
c000c3e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3ea:	e8 1d e4 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c3ef:	83 c4 10             	add    esp,0x10
c000c3f2:	83 c4 0c             	add    esp,0xc
c000c3f5:	c3                   	ret    

c000c3f6 <beepThread(void*)>:
c000c3f6:	83 ec 0c             	sub    esp,0xc
c000c3f9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000c3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c402:	48                   	dec    eax
c000c403:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000c408:	75 01                	jne    c000c40b <beepThread(void*)+0x15>
c000c40a:	fb                   	sti    
c000c40b:	6b c2 0a             	imul   eax,edx,0xa
c000c40e:	83 ec 0c             	sub    esp,0xc
c000c411:	50                   	push   eax
c000c412:	e8 a9 9f 00 00       	call   c00163c0 <milliTenthSleep(unsigned int)>
c000c417:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c41e:	e8 f6 be 00 00       	call   c0018319 <HalMakeBeep(int)>
c000c423:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c42b:	83 c4 1c             	add    esp,0x1c
c000c42e:	e9 71 9e 00 00       	jmp    c00162a4 <blockTask(TaskState)>

c000c433 <Krnl::beep(int, int, bool)>:
c000c433:	56                   	push   esi
c000c434:	53                   	push   ebx
c000c435:	83 ec 10             	sub    esp,0x10
c000c438:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c43c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c440:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c444:	e8 d0 be 00 00       	call   c0018319 <HalMakeBeep(int)>
c000c449:	89 f0                	mov    eax,esi
c000c44b:	83 c4 10             	add    esp,0x10
c000c44e:	84 c0                	test   al,al
c000c450:	74 1e                	je     c000c470 <Krnl::beep(int, int, bool)+0x3d>
c000c452:	6b db 0a             	imul   ebx,ebx,0xa
c000c455:	83 ec 0c             	sub    esp,0xc
c000c458:	53                   	push   ebx
c000c459:	e8 62 9f 00 00       	call   c00163c0 <milliTenthSleep(unsigned int)>
c000c45e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c466:	83 c4 14             	add    esp,0x14
c000c469:	5b                   	pop    ebx
c000c46a:	5e                   	pop    esi
c000c46b:	e9 a9 be 00 00       	jmp    c0018319 <HalMakeBeep(int)>
c000c470:	68 e6 00 00 00       	push   0xe6
c000c475:	53                   	push   ebx
c000c476:	68 f6 c3 00 c0       	push   0xc000c3f6
c000c47b:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c481:	e8 d2 99 00 00       	call   c0015e58 <Process::createThread(void (*)(void*), void*, int)>
c000c486:	83 c4 14             	add    esp,0x14
c000c489:	5b                   	pop    ebx
c000c48a:	5e                   	pop    esi
c000c48b:	c3                   	ret    

c000c48c <User::loadClockSettings(int)>:
c000c48c:	53                   	push   ebx
c000c48d:	83 ec 14             	sub    esp,0x14
c000c490:	68 14 01 00 00       	push   0x114
c000c495:	e8 39 b6 ff ff       	call   c0007ad3 <malloc>
c000c49a:	83 c4 0c             	add    esp,0xc
c000c49d:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c4a3:	68 a8 1a 02 c0       	push   0xc0021aa8
c000c4a8:	50                   	push   eax
c000c4a9:	89 c3                	mov    ebx,eax
c000c4ab:	e8 e6 f6 ff ff       	call   c000bb96 <File::File(char const*, Process*)>
c000c4b0:	58                   	pop    eax
c000c4b1:	5a                   	pop    edx
c000c4b2:	6a 01                	push   0x1
c000c4b4:	53                   	push   ebx
c000c4b5:	e8 fa f6 ff ff       	call   c000bbb4 <File::open(FileOpenMode)>
c000c4ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c4bd:	e8 50 f7 ff ff       	call   c000bc12 <File::close()>
c000c4c2:	83 c4 10             	add    esp,0x10
c000c4c5:	85 db                	test   ebx,ebx
c000c4c7:	74 0f                	je     c000c4d8 <User::loadClockSettings(int)+0x4c>
c000c4c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c4cb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c4cf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c4d2:	83 c4 08             	add    esp,0x8
c000c4d5:	5b                   	pop    ebx
c000c4d6:	ff e0                	jmp    eax
c000c4d8:	83 c4 08             	add    esp,0x8
c000c4db:	5b                   	pop    ebx
c000c4dc:	c3                   	ret    
c000c4dd:	90                   	nop

c000c4de <Clock::Clock(char const*)>:
c000c4de:	83 ec 0c             	sub    esp,0xc
c000c4e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4e5:	83 ec 08             	sub    esp,0x8
c000c4e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4ec:	50                   	push   eax
c000c4ed:	e8 ba 06 00 00       	call   c000cbac <Device::Device(char const*)>
c000c4f2:	83 c4 10             	add    esp,0x10
c000c4f5:	ba d0 1a 02 c0       	mov    edx,0xc0021ad0
c000c4fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4fe:	89 10                	mov    DWORD PTR [eax],edx
c000c500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c504:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c50e:	90                   	nop
c000c50f:	83 c4 0c             	add    esp,0xc
c000c512:	c3                   	ret    
c000c513:	90                   	nop

c000c514 <Clock::~Clock()>:
c000c514:	83 ec 0c             	sub    esp,0xc
c000c517:	ba d0 1a 02 c0       	mov    edx,0xc0021ad0
c000c51c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c520:	89 10                	mov    DWORD PTR [eax],edx
c000c522:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c526:	83 ec 0c             	sub    esp,0xc
c000c529:	50                   	push   eax
c000c52a:	e8 e7 03 00 00       	call   c000c916 <Device::~Device()>
c000c52f:	83 c4 10             	add    esp,0x10
c000c532:	90                   	nop
c000c533:	83 c4 0c             	add    esp,0xc
c000c536:	c3                   	ret    
c000c537:	90                   	nop

c000c538 <Clock::~Clock()>:
c000c538:	83 ec 0c             	sub    esp,0xc
c000c53b:	83 ec 0c             	sub    esp,0xc
c000c53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c542:	e8 cd ff ff ff       	call   c000c514 <Clock::~Clock()>
c000c547:	83 c4 10             	add    esp,0x10
c000c54a:	83 ec 08             	sub    esp,0x8
c000c54d:	68 58 01 00 00       	push   0x158
c000c552:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c556:	e8 b1 e2 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c55b:	83 c4 10             	add    esp,0x10
c000c55e:	83 c4 0c             	add    esp,0xc
c000c561:	c3                   	ret    

c000c562 <Clock::timeInSecondsLocal()>:
c000c562:	53                   	push   ebx
c000c563:	83 ec 14             	sub    esp,0x14
c000c566:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c56a:	8b 10                	mov    edx,DWORD PTR [eax]
c000c56c:	50                   	push   eax
c000c56d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c570:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c577:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c57d:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c583:	89 cb                	mov    ebx,ecx
c000c585:	c1 fb 1f             	sar    ebx,0x1f
c000c588:	01 c8                	add    eax,ecx
c000c58a:	11 da                	adc    edx,ebx
c000c58c:	83 c4 10             	add    esp,0x10
c000c58f:	31 c9                	xor    ecx,ecx
c000c591:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c598:	74 05                	je     c000c59f <Clock::timeInSecondsLocal()+0x3d>
c000c59a:	b9 08 07 00 00       	mov    ecx,0x708
c000c59f:	31 db                	xor    ebx,ebx
c000c5a1:	01 c8                	add    eax,ecx
c000c5a3:	11 da                	adc    edx,ebx
c000c5a5:	83 c4 08             	add    esp,0x8
c000c5a8:	5b                   	pop    ebx
c000c5a9:	c3                   	ret    

c000c5aa <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c5aa:	57                   	push   edi
c000c5ab:	56                   	push   esi
c000c5ac:	53                   	push   ebx
c000c5ad:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c5b1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c5b5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c5b9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c5bb:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c5be:	0f b6 05 08 94 02 c0 	movzx  eax,BYTE PTR ds:0xc0029408
c000c5c5:	03 05 0c 94 02 c0    	add    eax,DWORD PTR ds:0xc002940c
c000c5cb:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c5d1:	99                   	cdq    
c000c5d2:	29 c6                	sub    esi,eax
c000c5d4:	19 d7                	sbb    edi,edx
c000c5d6:	89 f0                	mov    eax,esi
c000c5d8:	31 f6                	xor    esi,esi
c000c5da:	89 fa                	mov    edx,edi
c000c5dc:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c5e3:	74 05                	je     c000c5ea <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c5e5:	be 08 07 00 00       	mov    esi,0x708
c000c5ea:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c5ee:	31 ff                	xor    edi,edi
c000c5f0:	29 f0                	sub    eax,esi
c000c5f2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c5f6:	19 fa                	sbb    edx,edi
c000c5f8:	89 d8                	mov    eax,ebx
c000c5fa:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c5fe:	5b                   	pop    ebx
c000c5ff:	5e                   	pop    esi
c000c600:	5f                   	pop    edi
c000c601:	ff e0                	jmp    eax

c000c603 <datetimeToSeconds(datetime_t)>:
c000c603:	55                   	push   ebp
c000c604:	57                   	push   edi
c000c605:	56                   	push   esi
c000c606:	53                   	push   ebx
c000c607:	83 ec 0c             	sub    esp,0xc
c000c60a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c60e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c612:	89 f7                	mov    edi,esi
c000c614:	89 f0                	mov    eax,esi
c000c616:	0f b6 cf             	movzx  ecx,bh
c000c619:	0f b6 c4             	movzx  eax,ah
c000c61c:	c1 ef 10             	shr    edi,0x10
c000c61f:	89 da                	mov    edx,ebx
c000c621:	8d 69 ff             	lea    ebp,[ecx-0x1]
c000c624:	89 f9                	mov    ecx,edi
c000c626:	0f b6 f9             	movzx  edi,cl
c000c629:	89 f1                	mov    ecx,esi
c000c62b:	6b c0 3c             	imul   eax,eax,0x3c
c000c62e:	0f b6 f1             	movzx  esi,cl
c000c631:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c000c637:	0f b6 db             	movzx  ebx,bl
c000c63a:	c1 ea 10             	shr    edx,0x10
c000c63d:	81 ea 6c 07 00 00    	sub    edx,0x76c
c000c643:	01 f8                	add    eax,edi
c000c645:	01 f0                	add    eax,esi
c000c647:	89 04 24             	mov    DWORD PTR [esp],eax
c000c64a:	c1 f8 1f             	sar    eax,0x1f
c000c64d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c651:	89 e8                	mov    eax,ebp
c000c653:	0f b6 c0             	movzx  eax,al
c000c656:	8b 0c 85 20 1b 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde4e0]
c000c65d:	83 f8 01             	cmp    eax,0x1
c000c660:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c000c664:	0f b7 da             	movzx  ebx,dx
c000c667:	76 27                	jbe    c000c690 <datetimeToSeconds(datetime_t)+0x8d>
c000c669:	80 e2 03             	and    dl,0x3
c000c66c:	75 22                	jne    c000c690 <datetimeToSeconds(datetime_t)+0x8d>
c000c66e:	31 d2                	xor    edx,edx
c000c670:	be 64 00 00 00       	mov    esi,0x64
c000c675:	89 d8                	mov    eax,ebx
c000c677:	f7 f6                	div    esi
c000c679:	85 d2                	test   edx,edx
c000c67b:	75 12                	jne    c000c68f <datetimeToSeconds(datetime_t)+0x8c>
c000c67d:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c683:	be 90 01 00 00       	mov    esi,0x190
c000c688:	99                   	cdq    
c000c689:	f7 fe                	idiv   esi
c000c68b:	85 d2                	test   edx,edx
c000c68d:	75 01                	jne    c000c690 <datetimeToSeconds(datetime_t)+0x8d>
c000c68f:	41                   	inc    ecx
c000c690:	83 fb 46             	cmp    ebx,0x46
c000c693:	76 48                	jbe    c000c6dd <datetimeToSeconds(datetime_t)+0xda>
c000c695:	be 46 00 00 00       	mov    esi,0x46
c000c69a:	bf 64 00 00 00       	mov    edi,0x64
c000c69f:	bd 90 01 00 00       	mov    ebp,0x190
c000c6a4:	f7 c6 03 00 00 00    	test   esi,0x3
c000c6aa:	b8 6d 01 00 00       	mov    eax,0x16d
c000c6af:	75 23                	jne    c000c6d4 <datetimeToSeconds(datetime_t)+0xd1>
c000c6b1:	89 f0                	mov    eax,esi
c000c6b3:	99                   	cdq    
c000c6b4:	f7 ff                	idiv   edi
c000c6b6:	b8 6e 01 00 00       	mov    eax,0x16e
c000c6bb:	85 d2                	test   edx,edx
c000c6bd:	75 15                	jne    c000c6d4 <datetimeToSeconds(datetime_t)+0xd1>
c000c6bf:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c6c5:	99                   	cdq    
c000c6c6:	f7 fd                	idiv   ebp
c000c6c8:	83 fa 01             	cmp    edx,0x1
c000c6cb:	19 c0                	sbb    eax,eax
c000c6cd:	f7 d0                	not    eax
c000c6cf:	05 6e 01 00 00       	add    eax,0x16e
c000c6d4:	46                   	inc    esi
c000c6d5:	01 c1                	add    ecx,eax
c000c6d7:	39 de                	cmp    esi,ebx
c000c6d9:	7c c9                	jl     c000c6a4 <datetimeToSeconds(datetime_t)+0xa1>
c000c6db:	eb 34                	jmp    c000c711 <datetimeToSeconds(datetime_t)+0x10e>
c000c6dd:	74 32                	je     c000c711 <datetimeToSeconds(datetime_t)+0x10e>
c000c6df:	b8 45 00 00 00       	mov    eax,0x45
c000c6e4:	89 c2                	mov    edx,eax
c000c6e6:	83 e2 03             	and    edx,0x3
c000c6e9:	39 d8                	cmp    eax,ebx
c000c6eb:	7e 0f                	jle    c000c6fc <datetimeToSeconds(datetime_t)+0xf9>
c000c6ed:	83 fa 01             	cmp    edx,0x1
c000c6f0:	19 d2                	sbb    edx,edx
c000c6f2:	48                   	dec    eax
c000c6f3:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c6fa:	eb e8                	jmp    c000c6e4 <datetimeToSeconds(datetime_t)+0xe1>
c000c6fc:	85 d2                	test   edx,edx
c000c6fe:	b8 6d 01 00 00       	mov    eax,0x16d
c000c703:	75 0a                	jne    c000c70f <datetimeToSeconds(datetime_t)+0x10c>
c000c705:	83 fb 01             	cmp    ebx,0x1
c000c708:	19 c0                	sbb    eax,eax
c000c70a:	05 6e 01 00 00       	add    eax,0x16e
c000c70f:	29 c1                	sub    ecx,eax
c000c711:	b8 80 51 01 00       	mov    eax,0x15180
c000c716:	f7 e9                	imul   ecx
c000c718:	03 04 24             	add    eax,DWORD PTR [esp]
c000c71b:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c71f:	83 c4 0c             	add    esp,0xc
c000c722:	5b                   	pop    ebx
c000c723:	5e                   	pop    esi
c000c724:	5f                   	pop    edi
c000c725:	5d                   	pop    ebp
c000c726:	c3                   	ret    
c000c727:	90                   	nop

c000c728 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c728:	57                   	push   edi
c000c729:	56                   	push   esi
c000c72a:	53                   	push   ebx
c000c72b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c72f:	8b 06                	mov    eax,DWORD PTR [esi]
c000c731:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c734:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c738:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c73c:	e8 c2 fe ff ff       	call   c000c603 <datetimeToSeconds(datetime_t)>
c000c741:	59                   	pop    ecx
c000c742:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c749:	5b                   	pop    ebx
c000c74a:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c750:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c756:	89 cb                	mov    ebx,ecx
c000c758:	c1 fb 1f             	sar    ebx,0x1f
c000c75b:	29 c8                	sub    eax,ecx
c000c75d:	19 da                	sbb    edx,ebx
c000c75f:	31 c9                	xor    ecx,ecx
c000c761:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c768:	74 05                	je     c000c76f <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c76a:	b9 08 07 00 00       	mov    ecx,0x708
c000c76f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c773:	31 db                	xor    ebx,ebx
c000c775:	29 c8                	sub    eax,ecx
c000c777:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c77b:	19 da                	sbb    edx,ebx
c000c77d:	89 f8                	mov    eax,edi
c000c77f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c783:	5b                   	pop    ebx
c000c784:	5e                   	pop    esi
c000c785:	5f                   	pop    edi
c000c786:	ff e0                	jmp    eax

c000c788 <secondsToDatetime(unsigned long long)>:
c000c788:	55                   	push   ebp
c000c789:	57                   	push   edi
c000c78a:	56                   	push   esi
c000c78b:	53                   	push   ebx
c000c78c:	83 ec 1c             	sub    esp,0x1c
c000c78f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c793:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c797:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c79b:	6a 00                	push   0x0
c000c79d:	68 80 51 01 00       	push   0x15180
c000c7a2:	55                   	push   ebp
c000c7a3:	57                   	push   edi
c000c7a4:	e8 b7 2f 01 00       	call   c001f760 <__udivdi3>
c000c7a9:	83 c4 10             	add    esp,0x10
c000c7ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7b0:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c7b6:	6a 00                	push   0x0
c000c7b8:	68 80 51 01 00       	push   0x15180
c000c7bd:	55                   	push   ebp
c000c7be:	57                   	push   edi
c000c7bf:	bf 10 0e 00 00       	mov    edi,0xe10
c000c7c4:	e8 97 30 01 00       	call   c001f860 <__umoddi3>
c000c7c9:	83 c4 10             	add    esp,0x10
c000c7cc:	99                   	cdq    
c000c7cd:	f7 ff                	idiv   edi
c000c7cf:	bf 3c 00 00 00       	mov    edi,0x3c
c000c7d4:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c7d7:	89 d0                	mov    eax,edx
c000c7d9:	99                   	cdq    
c000c7da:	f7 ff                	idiv   edi
c000c7dc:	85 db                	test   ebx,ebx
c000c7de:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c7e1:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c7e4:	79 11                	jns    c000c7f7 <secondsToDatetime(unsigned long long)+0x6f>
c000c7e6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c7ea:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c7f0:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c7f5:	eb 07                	jmp    c000c7fe <secondsToDatetime(unsigned long long)+0x76>
c000c7f7:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c7fc:	89 d8                	mov    eax,ebx
c000c7fe:	99                   	cdq    
c000c7ff:	bf b4 05 00 00       	mov    edi,0x5b4
c000c804:	f7 f9                	idiv   ecx
c000c806:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c80b:	31 d2                	xor    edx,edx
c000c80d:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c812:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c816:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c81e:	01 c3                	add    ebx,eax
c000c820:	89 d8                	mov    eax,ebx
c000c822:	f7 f1                	div    ecx
c000c824:	31 d2                	xor    edx,edx
c000c826:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c829:	89 d8                	mov    eax,ebx
c000c82b:	f7 f7                	div    edi
c000c82d:	31 d2                	xor    edx,edx
c000c82f:	29 c1                	sub    ecx,eax
c000c831:	89 d8                	mov    eax,ebx
c000c833:	f7 f5                	div    ebp
c000c835:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c83a:	31 d2                	xor    edx,edx
c000c83c:	29 c1                	sub    ecx,eax
c000c83e:	89 c8                	mov    eax,ecx
c000c840:	f7 f5                	div    ebp
c000c842:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c847:	31 d2                	xor    edx,edx
c000c849:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c84d:	89 c8                	mov    eax,ecx
c000c84f:	f7 f5                	div    ebp
c000c851:	31 d2                	xor    edx,edx
c000c853:	01 c3                	add    ebx,eax
c000c855:	89 c8                	mov    eax,ecx
c000c857:	f7 f7                	div    edi
c000c859:	bf 99 00 00 00       	mov    edi,0x99
c000c85e:	31 d2                	xor    edx,edx
c000c860:	29 c3                	sub    ebx,eax
c000c862:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c86a:	29 c3                	sub    ebx,eax
c000c86c:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c86f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c872:	83 c1 02             	add    ecx,0x2
c000c875:	89 c8                	mov    eax,ecx
c000c877:	bb 05 00 00 00       	mov    ebx,0x5
c000c87c:	f7 f7                	div    edi
c000c87e:	31 d2                	xor    edx,edx
c000c880:	89 c7                	mov    edi,eax
c000c882:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c888:	83 c0 02             	add    eax,0x2
c000c88b:	f7 f3                	div    ebx
c000c88d:	89 eb                	mov    ebx,ebp
c000c88f:	29 c3                	sub    ebx,eax
c000c891:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c897:	88 1e                	mov    BYTE PTR [esi],bl
c000c899:	19 c0                	sbb    eax,eax
c000c89b:	31 d2                	xor    edx,edx
c000c89d:	83 e0 0c             	and    eax,0xc
c000c8a0:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c8a4:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c8ac:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c8b0:	83 f9 01             	cmp    ecx,0x1
c000c8b3:	0f 96 c2             	setbe  dl
c000c8b6:	41                   	inc    ecx
c000c8b7:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c8ba:	01 d0                	add    eax,edx
c000c8bc:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c8c0:	83 c4 1c             	add    esp,0x1c
c000c8c3:	89 f0                	mov    eax,esi
c000c8c5:	5b                   	pop    ebx
c000c8c6:	5e                   	pop    esi
c000c8c7:	5f                   	pop    edi
c000c8c8:	5d                   	pop    ebp
c000c8c9:	c2 04 00             	ret    0x4

c000c8cc <Clock::timeInDatetimeLocal()>:
c000c8cc:	53                   	push   ebx
c000c8cd:	83 ec 14             	sub    esp,0x14
c000c8d0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c8d4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c8d8:	e8 85 fc ff ff       	call   c000c562 <Clock::timeInSecondsLocal()>
c000c8dd:	83 c4 0c             	add    esp,0xc
c000c8e0:	52                   	push   edx
c000c8e1:	50                   	push   eax
c000c8e2:	53                   	push   ebx
c000c8e3:	e8 a0 fe ff ff       	call   c000c788 <secondsToDatetime(unsigned long long)>
c000c8e8:	89 d8                	mov    eax,ebx
c000c8ea:	83 c4 14             	add    esp,0x14
c000c8ed:	5b                   	pop    ebx
c000c8ee:	c2 04 00             	ret    0x4
c000c8f1:	90                   	nop

c000c8f2 <Device::hibernate()>:
c000c8f2:	c3                   	ret    
c000c8f3:	90                   	nop

c000c8f4 <Device::wake()>:
c000c8f4:	c3                   	ret    
c000c8f5:	90                   	nop

c000c8f6 <Device::detect()>:
c000c8f6:	c3                   	ret    
c000c8f7:	90                   	nop

c000c8f8 <Device::disableLegacy()>:
c000c8f8:	c3                   	ret    
c000c8f9:	90                   	nop

c000c8fa <Device::powerSaving(PowerSavingLevel)>:
c000c8fa:	c3                   	ret    
c000c8fb:	90                   	nop

c000c8fc <DriverlessDevice::close(int, int, void*)>:
c000c8fc:	31 c0                	xor    eax,eax
c000c8fe:	c3                   	ret    
c000c8ff:	90                   	nop

c000c900 <DriverlessDevice::detect()>:
c000c900:	c3                   	ret    
c000c901:	90                   	nop

c000c902 <DriverlessDevice::open(int, int, void*)>:
c000c902:	83 ec 18             	sub    esp,0x18
c000c905:	68 50 1b 02 c0       	push   0xc0021b50
c000c90a:	e8 cc 4c 00 00       	call   c00115db <KePanic(char const*)>
c000c90f:	83 c8 ff             	or     eax,0xffffffff
c000c912:	83 c4 1c             	add    esp,0x1c
c000c915:	c3                   	ret    

c000c916 <Device::~Device()>:
c000c916:	ba b0 1b 02 c0       	mov    edx,0xc0021bb0
c000c91b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c91f:	89 10                	mov    DWORD PTR [eax],edx
c000c921:	90                   	nop
c000c922:	c3                   	ret    
c000c923:	90                   	nop

c000c924 <Device::~Device()>:
c000c924:	83 ec 0c             	sub    esp,0xc
c000c927:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c92b:	e8 e6 ff ff ff       	call   c000c916 <Device::~Device()>
c000c930:	83 c4 04             	add    esp,0x4
c000c933:	83 ec 08             	sub    esp,0x8
c000c936:	68 58 01 00 00       	push   0x158
c000c93b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c93f:	e8 c8 de ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c944:	83 c4 10             	add    esp,0x10
c000c947:	83 c4 0c             	add    esp,0xc
c000c94a:	c3                   	ret    
c000c94b:	90                   	nop

c000c94c <Device::findAndLoadDriver()>:
c000c94c:	c7 44 24 04 6e 1b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021b6e
c000c954:	e9 b1 df ff ff       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>
c000c959:	90                   	nop

c000c95a <Device::preOpenPCI(PCIDeviceInfo)>:
c000c95a:	57                   	push   edi
c000c95b:	b9 09 00 00 00       	mov    ecx,0x9
c000c960:	56                   	push   esi
c000c961:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c965:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c969:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c973:	81 c7 18 01 00 00    	add    edi,0x118
c000c979:	fc                   	cld    
c000c97a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c97c:	5e                   	pop    esi
c000c97d:	5f                   	pop    edi
c000c97e:	c3                   	ret    
c000c97f:	90                   	nop

c000c980 <Device::preOpenACPI(void*, char*, char*)>:
c000c980:	57                   	push   edi
c000c981:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c986:	56                   	push   esi
c000c987:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c98b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c98f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c993:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c99d:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c9a3:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c9a9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c9ab:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c9b1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c9b5:	b9 0e 00 00 00       	mov    ecx,0xe
c000c9ba:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c9bc:	5e                   	pop    esi
c000c9bd:	5f                   	pop    edi
c000c9be:	c3                   	ret    
c000c9bf:	90                   	nop

c000c9c0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c9c0:	53                   	push   ebx
c000c9c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c9c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c9c9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c9cd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c9d1:	0f b6 c0             	movzx  eax,al
c000c9d4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c9d8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c9dc:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c9e0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c9e4:	5b                   	pop    ebx
c000c9e5:	e9 aa 05 00 00       	jmp    c000cf94 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c9ea <Device::getParent()>:
c000c9ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c9ee:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c9f4:	c3                   	ret    
c000c9f5:	90                   	nop

c000c9f6 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c9f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c9fa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c9fe:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000ca03:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ca07:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ca0b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ca0f:	e9 f7 06 00 00       	jmp    c000d10b <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000ca14 <Device::addChild(Device*)>:
c000ca14:	53                   	push   ebx
c000ca15:	83 ec 08             	sub    esp,0x8
c000ca18:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ca1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca20:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000ca26:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000ca2c:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ca2e:	85 d2                	test   edx,edx
c000ca30:	74 04                	je     c000ca36 <Device::addChild(Device*)+0x22>
c000ca32:	89 d3                	mov    ebx,edx
c000ca34:	eb f6                	jmp    c000ca2c <Device::addChild(Device*)+0x18>
c000ca36:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ca39:	83 ec 0c             	sub    esp,0xc
c000ca3c:	6a 08                	push   0x8
c000ca3e:	e8 90 b0 ff ff       	call   c0007ad3 <malloc>
c000ca43:	89 03                	mov    DWORD PTR [ebx],eax
c000ca45:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ca4b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ca52:	83 c4 18             	add    esp,0x18
c000ca55:	5b                   	pop    ebx
c000ca56:	c3                   	ret    
c000ca57:	90                   	nop

c000ca58 <Device::removeAllChildren()>:
c000ca58:	56                   	push   esi
c000ca59:	53                   	push   ebx
c000ca5a:	52                   	push   edx
c000ca5b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ca5f:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000ca65:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca68:	74 17                	je     c000ca81 <Device::removeAllChildren()+0x29>
c000ca6a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ca6d:	85 c0                	test   eax,eax
c000ca6f:	74 0c                	je     c000ca7d <Device::removeAllChildren()+0x25>
c000ca71:	8b 10                	mov    edx,DWORD PTR [eax]
c000ca73:	83 ec 0c             	sub    esp,0xc
c000ca76:	50                   	push   eax
c000ca77:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000ca7a:	83 c4 10             	add    esp,0x10
c000ca7d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca7f:	eb e4                	jmp    c000ca65 <Device::removeAllChildren()+0xd>
c000ca81:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ca87:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ca8d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ca93:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ca9a:	58                   	pop    eax
c000ca9b:	5b                   	pop    ebx
c000ca9c:	5e                   	pop    esi
c000ca9d:	c3                   	ret    

c000ca9e <Device::hibernateAll()>:
c000ca9e:	53                   	push   ebx
c000ca9f:	83 ec 14             	sub    esp,0x14
c000caa2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000caa6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000caa8:	53                   	push   ebx
c000caa9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000caac:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cab2:	83 c4 10             	add    esp,0x10
c000cab5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cab8:	74 0f                	je     c000cac9 <Device::hibernateAll()+0x2b>
c000caba:	83 ec 0c             	sub    esp,0xc
c000cabd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cac0:	e8 d9 ff ff ff       	call   c000ca9e <Device::hibernateAll()>
c000cac5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cac7:	eb e9                	jmp    c000cab2 <Device::hibernateAll()+0x14>
c000cac9:	83 c4 08             	add    esp,0x8
c000cacc:	5b                   	pop    ebx
c000cacd:	c3                   	ret    

c000cace <Device::wakeAll()>:
c000cace:	53                   	push   ebx
c000cacf:	83 ec 14             	sub    esp,0x14
c000cad2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cad6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cad8:	53                   	push   ebx
c000cad9:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000cadc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cae2:	83 c4 10             	add    esp,0x10
c000cae5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cae8:	74 0f                	je     c000caf9 <Device::wakeAll()+0x2b>
c000caea:	83 ec 0c             	sub    esp,0xc
c000caed:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000caf0:	e8 d9 ff ff ff       	call   c000cace <Device::wakeAll()>
c000caf5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000caf7:	eb e9                	jmp    c000cae2 <Device::wakeAll()+0x14>
c000caf9:	83 c4 08             	add    esp,0x8
c000cafc:	5b                   	pop    ebx
c000cafd:	c3                   	ret    

c000cafe <Device::detectAll()>:
c000cafe:	53                   	push   ebx
c000caff:	83 ec 14             	sub    esp,0x14
c000cb02:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cb06:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cb08:	53                   	push   ebx
c000cb09:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000cb0c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cb12:	83 c4 10             	add    esp,0x10
c000cb15:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cb18:	74 0f                	je     c000cb29 <Device::detectAll()+0x2b>
c000cb1a:	83 ec 0c             	sub    esp,0xc
c000cb1d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb20:	e8 d9 ff ff ff       	call   c000cafe <Device::detectAll()>
c000cb25:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb27:	eb e9                	jmp    c000cb12 <Device::detectAll()+0x14>
c000cb29:	83 c4 08             	add    esp,0x8
c000cb2c:	5b                   	pop    ebx
c000cb2d:	c3                   	ret    

c000cb2e <Device::disableLegacyAll()>:
c000cb2e:	c3                   	ret    
c000cb2f:	90                   	nop

c000cb30 <Device::loadDriversForAll()>:
c000cb30:	c3                   	ret    
c000cb31:	90                   	nop

c000cb32 <Device::closeAll()>:
c000cb32:	53                   	push   ebx
c000cb33:	83 ec 08             	sub    esp,0x8
c000cb36:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cb3a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cb3c:	6a 00                	push   0x0
c000cb3e:	6a 00                	push   0x0
c000cb40:	6a 00                	push   0x0
c000cb42:	53                   	push   ebx
c000cb43:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000cb46:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cb4c:	83 c4 10             	add    esp,0x10
c000cb4f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cb52:	74 0f                	je     c000cb63 <Device::closeAll()+0x31>
c000cb54:	83 ec 0c             	sub    esp,0xc
c000cb57:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb5a:	e8 d3 ff ff ff       	call   c000cb32 <Device::closeAll()>
c000cb5f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb61:	eb e9                	jmp    c000cb4c <Device::closeAll()+0x1a>
c000cb63:	83 c4 08             	add    esp,0x8
c000cb66:	5b                   	pop    ebx
c000cb67:	c3                   	ret    

c000cb68 <Device::powerSavingAll(PowerSavingLevel)>:
c000cb68:	56                   	push   esi
c000cb69:	53                   	push   ebx
c000cb6a:	83 ec 0c             	sub    esp,0xc
c000cb6d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cb71:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000cb75:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cb77:	56                   	push   esi
c000cb78:	53                   	push   ebx
c000cb79:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000cb7c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cb82:	83 c4 10             	add    esp,0x10
c000cb85:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cb88:	74 0f                	je     c000cb99 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000cb8a:	52                   	push   edx
c000cb8b:	52                   	push   edx
c000cb8c:	56                   	push   esi
c000cb8d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb90:	e8 d3 ff ff ff       	call   c000cb68 <Device::powerSavingAll(PowerSavingLevel)>
c000cb95:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb97:	eb e9                	jmp    c000cb82 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000cb99:	58                   	pop    eax
c000cb9a:	5b                   	pop    ebx
c000cb9b:	5e                   	pop    esi
c000cb9c:	c3                   	ret    
c000cb9d:	90                   	nop

c000cb9e <Device::setName(char const*)>:
c000cb9e:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000cba6:	e9 a5 3a ff ff       	jmp    c0000650 <strcpy>
c000cbab:	90                   	nop

c000cbac <Device::Device(char const*)>:
c000cbac:	83 ec 1c             	sub    esp,0x1c
c000cbaf:	ba b0 1b 02 c0       	mov    edx,0xc0021bb0
c000cbb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbb8:	89 10                	mov    DWORD PTR [eax],edx
c000cbba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbbe:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000cbc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbcc:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cbd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbda:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cbe4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbe8:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cbf2:	83 ec 08             	sub    esp,0x8
c000cbf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbfd:	e8 9c ff ff ff       	call   c000cb9e <Device::setName(char const*)>
c000cc02:	83 c4 10             	add    esp,0x10
c000cc05:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000cc0d:	83 ec 0c             	sub    esp,0xc
c000cc10:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cc14:	e8 ba ae ff ff       	call   c0007ad3 <malloc>
c000cc19:	83 c4 10             	add    esp,0x10
c000cc1c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cc22:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cc29:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000cc2d:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000cc33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc37:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cc3d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cc43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc47:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cc4d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cc54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc58:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000cc5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc63:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000cc6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc6e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cc78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc7c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cc86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc8a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cc94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc98:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000cca2:	90                   	nop
c000cca3:	83 c4 1c             	add    esp,0x1c
c000cca6:	c3                   	ret    
c000cca7:	90                   	nop

c000cca8 <Device::getName()>:
c000cca8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccac:	05 d0 00 00 00       	add    eax,0xd0
c000ccb1:	c3                   	ret    

c000ccb2 <DriverlessDevice::DriverlessDevice(char const*)>:
c000ccb2:	83 ec 0c             	sub    esp,0xc
c000ccb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccb9:	83 ec 08             	sub    esp,0x8
c000ccbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccc0:	50                   	push   eax
c000ccc1:	e8 e6 fe ff ff       	call   c000cbac <Device::Device(char const*)>
c000ccc6:	83 c4 10             	add    esp,0x10
c000ccc9:	ba dc 1b 02 c0       	mov    edx,0xc0021bdc
c000ccce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccd2:	89 10                	mov    DWORD PTR [eax],edx
c000ccd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccd8:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000cce2:	90                   	nop
c000cce3:	83 c4 0c             	add    esp,0xc
c000cce6:	c3                   	ret    
c000cce7:	90                   	nop

c000cce8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000cce8:	57                   	push   edi
c000cce9:	56                   	push   esi
c000ccea:	53                   	push   ebx
c000cceb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ccef:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000ccf3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ccf7:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000ccfd:	75 0c                	jne    c000cd0b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000ccff:	52                   	push   edx
c000cd00:	52                   	push   edx
c000cd01:	53                   	push   ebx
c000cd02:	56                   	push   esi
c000cd03:	e8 0a 2f 01 00       	call   c001fc12 <LinkedList<Device>::addElement(Device*)>
c000cd08:	83 c4 10             	add    esp,0x10
c000cd0b:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cd11:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cd14:	74 12                	je     c000cd28 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000cd16:	50                   	push   eax
c000cd17:	57                   	push   edi
c000cd18:	56                   	push   esi
c000cd19:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cd1c:	e8 c7 ff ff ff       	call   c000cce8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000cd21:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cd23:	83 c4 10             	add    esp,0x10
c000cd26:	eb e9                	jmp    c000cd11 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000cd28:	5b                   	pop    ebx
c000cd29:	5e                   	pop    esi
c000cd2a:	5f                   	pop    edi
c000cd2b:	c3                   	ret    

c000cd2c <getDevicesOfType(DeviceType)>:
c000cd2c:	53                   	push   ebx
c000cd2d:	83 ec 14             	sub    esp,0x14
c000cd30:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cd34:	53                   	push   ebx
c000cd35:	e8 b4 2f 01 00       	call   c001fcee <LinkedList<Device>::LinkedList()>
c000cd3a:	83 c4 0c             	add    esp,0xc
c000cd3d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cd41:	53                   	push   ebx
c000cd42:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000cd48:	e8 9b ff ff ff       	call   c000cce8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000cd4d:	83 c4 18             	add    esp,0x18
c000cd50:	89 d8                	mov    eax,ebx
c000cd52:	5b                   	pop    ebx
c000cd53:	c2 04 00             	ret    0x4
c000cd56:	66 90                	xchg   ax,ax

c000cd58 <HardDiskController::HardDiskController(char const*)>:
c000cd58:	83 ec 0c             	sub    esp,0xc
c000cd5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd5f:	83 ec 08             	sub    esp,0x8
c000cd62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd66:	50                   	push   eax
c000cd67:	e8 40 fe ff ff       	call   c000cbac <Device::Device(char const*)>
c000cd6c:	83 c4 10             	add    esp,0x10
c000cd6f:	ba 08 1c 02 c0       	mov    edx,0xc0021c08
c000cd74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd78:	89 10                	mov    DWORD PTR [eax],edx
c000cd7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd7e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000cd88:	90                   	nop
c000cd89:	83 c4 0c             	add    esp,0xc
c000cd8c:	c3                   	ret    
c000cd8d:	90                   	nop
c000cd8e:	66 90                	xchg   ax,ax

c000cd90 <HardDiskController::~HardDiskController()>:
c000cd90:	83 ec 0c             	sub    esp,0xc
c000cd93:	ba 08 1c 02 c0       	mov    edx,0xc0021c08
c000cd98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd9c:	89 10                	mov    DWORD PTR [eax],edx
c000cd9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cda2:	83 ec 0c             	sub    esp,0xc
c000cda5:	50                   	push   eax
c000cda6:	e8 6b fb ff ff       	call   c000c916 <Device::~Device()>
c000cdab:	83 c4 10             	add    esp,0x10
c000cdae:	90                   	nop
c000cdaf:	83 c4 0c             	add    esp,0xc
c000cdb2:	c3                   	ret    
c000cdb3:	90                   	nop

c000cdb4 <HardDiskController::~HardDiskController()>:
c000cdb4:	83 ec 0c             	sub    esp,0xc
c000cdb7:	83 ec 0c             	sub    esp,0xc
c000cdba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdbe:	e8 cd ff ff ff       	call   c000cd90 <HardDiskController::~HardDiskController()>
c000cdc3:	83 c4 10             	add    esp,0x10
c000cdc6:	83 ec 08             	sub    esp,0x8
c000cdc9:	68 58 01 00 00       	push   0x158
c000cdce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd2:	e8 35 da ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000cdd7:	83 c4 10             	add    esp,0x10
c000cdda:	83 c4 0c             	add    esp,0xc
c000cddd:	c3                   	ret    

c000cdde <PhysicalDisk::eject()>:
c000cdde:	83 c8 ff             	or     eax,0xffffffff
c000cde1:	c3                   	ret    

c000cde2 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000cde2:	83 ec 0c             	sub    esp,0xc
c000cde5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cde9:	83 ec 08             	sub    esp,0x8
c000cdec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdf0:	50                   	push   eax
c000cdf1:	e8 b6 fd ff ff       	call   c000cbac <Device::Device(char const*)>
c000cdf6:	83 c4 10             	add    esp,0x10
c000cdf9:	ba 34 1c 02 c0       	mov    edx,0xc0021c34
c000cdfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce02:	89 10                	mov    DWORD PTR [eax],edx
c000ce04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce08:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ce0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce13:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000ce1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce1e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000ce28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce2c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ce30:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000ce36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce3a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ce44:	90                   	nop
c000ce45:	83 c4 0c             	add    esp,0xc
c000ce48:	c3                   	ret    
c000ce49:	90                   	nop

c000ce4a <PhysicalDisk::startCache()>:
c000ce4a:	56                   	push   esi
c000ce4b:	53                   	push   ebx
c000ce4c:	83 ec 10             	sub    esp,0x10
c000ce4f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ce53:	6a 44                	push   0x44
c000ce55:	e8 79 ac ff ff       	call   c0007ad3 <malloc>
c000ce5a:	89 c6                	mov    esi,eax
c000ce5c:	58                   	pop    eax
c000ce5d:	5a                   	pop    edx
c000ce5e:	53                   	push   ebx
c000ce5f:	56                   	push   esi
c000ce60:	e8 83 17 00 00       	call   c000e5e8 <VCache::VCache(PhysicalDisk*)>
c000ce65:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000ce6b:	83 c4 14             	add    esp,0x14
c000ce6e:	5b                   	pop    ebx
c000ce6f:	5e                   	pop    esi
c000ce70:	c3                   	ret    
c000ce71:	90                   	nop

c000ce72 <PhysicalDisk::~PhysicalDisk()>:
c000ce72:	83 ec 0c             	sub    esp,0xc
c000ce75:	ba 34 1c 02 c0       	mov    edx,0xc0021c34
c000ce7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce7e:	89 10                	mov    DWORD PTR [eax],edx
c000ce80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce84:	83 ec 0c             	sub    esp,0xc
c000ce87:	50                   	push   eax
c000ce88:	e8 89 fa ff ff       	call   c000c916 <Device::~Device()>
c000ce8d:	83 c4 10             	add    esp,0x10
c000ce90:	90                   	nop
c000ce91:	83 c4 0c             	add    esp,0xc
c000ce94:	c3                   	ret    
c000ce95:	90                   	nop

c000ce96 <PhysicalDisk::~PhysicalDisk()>:
c000ce96:	83 ec 0c             	sub    esp,0xc
c000ce99:	83 ec 0c             	sub    esp,0xc
c000ce9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cea0:	e8 cd ff ff ff       	call   c000ce72 <PhysicalDisk::~PhysicalDisk()>
c000cea5:	83 c4 10             	add    esp,0x10
c000cea8:	83 ec 08             	sub    esp,0x8
c000ceab:	68 6c 01 00 00       	push   0x16c
c000ceb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ceb4:	e8 53 d9 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000ceb9:	83 c4 10             	add    esp,0x10
c000cebc:	83 c4 0c             	add    esp,0xc
c000cebf:	c3                   	ret    

c000cec0 <int_handler>:
c000cec0:	55                   	push   ebp
c000cec1:	57                   	push   edi
c000cec2:	56                   	push   esi
c000cec3:	53                   	push   ebx
c000cec4:	83 ec 0c             	sub    esp,0xc
c000cec7:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000cece:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000ced2:	74 0b                	je     c000cedf <int_handler+0x1f>
c000ced4:	fa                   	cli    
c000ced5:	f4                   	hlt    
c000ced6:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000cedd:	75 f5                	jne    c000ced4 <int_handler+0x14>
c000cedf:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000cee2:	8d 46 e0             	lea    eax,[esi-0x20]
c000cee5:	83 f8 17             	cmp    eax,0x17
c000cee8:	76 40                	jbe    c000cf2a <int_handler+0x6a>
c000ceea:	c1 e6 04             	shl    esi,0x4
c000ceed:	31 db                	xor    ebx,ebx
c000ceef:	8d ae 20 a4 02 c0    	lea    ebp,[esi-0x3ffd5be0]
c000cef5:	81 c6 20 94 02 c0    	add    esi,0xc0029420
c000cefb:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000ceff:	85 c0                	test   eax,eax
c000cf01:	74 13                	je     c000cf16 <int_handler+0x56>
c000cf03:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000cf07:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000cf0a:	74 2c                	je     c000cf38 <int_handler+0x78>
c000cf0c:	83 ec 08             	sub    esp,0x8
c000cf0f:	52                   	push   edx
c000cf10:	57                   	push   edi
c000cf11:	ff d0                	call   eax
c000cf13:	83 c4 10             	add    esp,0x10
c000cf16:	83 c3 01             	add    ebx,0x1
c000cf19:	83 fb 04             	cmp    ebx,0x4
c000cf1c:	75 dd                	jne    c000cefb <int_handler+0x3b>
c000cf1e:	83 c4 0c             	add    esp,0xc
c000cf21:	31 c0                	xor    eax,eax
c000cf23:	5b                   	pop    ebx
c000cf24:	31 d2                	xor    edx,edx
c000cf26:	5e                   	pop    esi
c000cf27:	5f                   	pop    edi
c000cf28:	5d                   	pop    ebp
c000cf29:	c3                   	ret    
c000cf2a:	83 ec 0c             	sub    esp,0xc
c000cf2d:	50                   	push   eax
c000cf2e:	e8 23 b4 00 00       	call   c0018356 <HalEndOfInterrupt(int)>
c000cf33:	83 c4 10             	add    esp,0x10
c000cf36:	eb b2                	jmp    c000ceea <int_handler+0x2a>
c000cf38:	83 ec 08             	sub    esp,0x8
c000cf3b:	52                   	push   edx
c000cf3c:	57                   	push   edi
c000cf3d:	ff d0                	call   eax
c000cf3f:	83 c4 10             	add    esp,0x10
c000cf42:	83 c4 0c             	add    esp,0xc
c000cf45:	5b                   	pop    ebx
c000cf46:	5e                   	pop    esi
c000cf47:	5f                   	pop    edi
c000cf48:	5d                   	pop    ebp
c000cf49:	c3                   	ret    

c000cf4a <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cf4a:	56                   	push   esi
c000cf4b:	31 c0                	xor    eax,eax
c000cf4d:	53                   	push   ebx
c000cf4e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cf52:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cf56:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cf5a:	89 ca                	mov    edx,ecx
c000cf5c:	c1 e2 04             	shl    edx,0x4
c000cf5f:	83 bc 82 20 a4 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd5be0],0x0
c000cf67:	74 17                	je     c000cf80 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cf69:	83 c0 01             	add    eax,0x1
c000cf6c:	83 f8 04             	cmp    eax,0x4
c000cf6f:	75 ee                	jne    c000cf5f <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cf71:	c7 44 24 0c 64 1c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021c64
c000cf79:	5b                   	pop    ebx
c000cf7a:	5e                   	pop    esi
c000cf7b:	e9 5b 46 00 00       	jmp    c00115db <KePanic(char const*)>
c000cf80:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cf83:	89 1c 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],ebx
c000cf8a:	5b                   	pop    ebx
c000cf8b:	89 34 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],esi
c000cf92:	5e                   	pop    esi
c000cf93:	c3                   	ret    

c000cf94 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cf94:	55                   	push   ebp
c000cf95:	57                   	push   edi
c000cf96:	56                   	push   esi
c000cf97:	53                   	push   ebx
c000cf98:	83 ec 0c             	sub    esp,0xc
c000cf9b:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000cfa1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cfa5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cfa9:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cfb0:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cfb3:	74 57                	je     c000d00c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cfb5:	84 c0                	test   al,al
c000cfb7:	89 c7                	mov    edi,eax
c000cfb9:	74 1d                	je     c000cfd8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000cfbb:	83 fe 0f             	cmp    esi,0xf
c000cfbe:	0f 8f d9 00 00 00    	jg     c000d09d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c000cfc4:	0f b6 b6 68 37 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc898]
c000cfcb:	0f b7 bc 36 c0 bb 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd4440]
c000cfd3:	d1 ef                	shr    edi,1
c000cfd5:	83 e7 01             	and    edi,0x1
c000cfd8:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cfdd:	83 ec 08             	sub    esp,0x8
c000cfe0:	31 db                	xor    ebx,ebx
c000cfe2:	50                   	push   eax
c000cfe3:	68 71 1c 02 c0       	push   0xc0021c71
c000cfe8:	e8 1d d9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000cfed:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cff2:	83 c4 10             	add    esp,0x10
c000cff5:	85 c0                	test   eax,eax
c000cff7:	7f 59                	jg     c000d052 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbe>
c000cff9:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cffc:	83 ec 0c             	sub    esp,0xc
c000cfff:	68 88 1c 02 c0       	push   0xc0021c88
c000d004:	e8 d2 45 00 00       	call   c00115db <KePanic(char const*)>
c000d009:	83 c4 10             	add    esp,0x10
c000d00c:	89 e8                	mov    eax,ebp
c000d00e:	31 d2                	xor    edx,edx
c000d010:	c1 e0 04             	shl    eax,0x4
c000d013:	8b 8c 90 20 a4 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd5be0]
c000d01a:	85 c9                	test   ecx,ecx
c000d01c:	0f 84 92 00 00 00    	je     c000d0b4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x120>
c000d022:	83 c2 01             	add    edx,0x1
c000d025:	83 fa 04             	cmp    edx,0x4
c000d028:	75 e9                	jne    c000d013 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000d02a:	83 ec 0c             	sub    esp,0xc
c000d02d:	68 dc 1c 02 c0       	push   0xc0021cdc
c000d032:	e8 a4 45 00 00       	call   c00115db <KePanic(char const*)>
c000d037:	83 c4 10             	add    esp,0x10
c000d03a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d03f:	83 c4 0c             	add    esp,0xc
c000d042:	5b                   	pop    ebx
c000d043:	5e                   	pop    esi
c000d044:	5f                   	pop    edi
c000d045:	5d                   	pop    ebp
c000d046:	c3                   	ret    
c000d047:	83 c3 01             	add    ebx,0x1
c000d04a:	39 1d c0 d0 02 c0    	cmp    DWORD PTR ds:0xc002d0c0,ebx
c000d050:	7e a7                	jle    c000cff9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000d052:	8b 2c 9d e0 d0 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd2f20]
c000d059:	83 ec 08             	sub    esp,0x8
c000d05c:	56                   	push   esi
c000d05d:	55                   	push   ebp
c000d05e:	e8 dd 1a 01 00       	call   c001eb40 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000d063:	83 c4 10             	add    esp,0x10
c000d066:	84 c0                	test   al,al
c000d068:	74 dd                	je     c000d047 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000d06a:	89 f8                	mov    eax,edi
c000d06c:	83 ec 04             	sub    esp,0x4
c000d06f:	8b 1c 9d e0 d0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd2f20]
c000d076:	8d 6e 20             	lea    ebp,[esi+0x20]
c000d079:	0f b6 f8             	movzx  edi,al
c000d07c:	57                   	push   edi
c000d07d:	89 e8                	mov    eax,ebp
c000d07f:	6a 00                	push   0x0
c000d081:	0f b6 c0             	movzx  eax,al
c000d084:	50                   	push   eax
c000d085:	89 f0                	mov    eax,esi
c000d087:	6a 00                	push   0x0
c000d089:	0f b6 c0             	movzx  eax,al
c000d08c:	6a 00                	push   0x0
c000d08e:	50                   	push   eax
c000d08f:	53                   	push   ebx
c000d090:	e8 17 1c 01 00       	call   c001ecac <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000d095:	83 c4 20             	add    esp,0x20
c000d098:	e9 6f ff ff ff       	jmp    c000d00c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000d09d:	83 ec 0c             	sub    esp,0xc
c000d0a0:	31 ff                	xor    edi,edi
c000d0a2:	68 a4 1c 02 c0       	push   0xc0021ca4
c000d0a7:	e8 2f 45 00 00       	call   c00115db <KePanic(char const*)>
c000d0ac:	83 c4 10             	add    esp,0x10
c000d0af:	e9 24 ff ff ff       	jmp    c000cfd8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000d0b4:	8d 04 aa             	lea    eax,[edx+ebp*4]
c000d0b7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d0bb:	89 14 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],edx
c000d0c2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d0c6:	89 14 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],edx
c000d0cd:	83 c4 0c             	add    esp,0xc
c000d0d0:	89 f0                	mov    eax,esi
c000d0d2:	5b                   	pop    ebx
c000d0d3:	5e                   	pop    esi
c000d0d4:	5f                   	pop    edi
c000d0d5:	5d                   	pop    ebp
c000d0d6:	c3                   	ret    

c000d0d7 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000d0d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d0db:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d0df:	c1 e0 04             	shl    eax,0x4
c000d0e2:	8d 50 10             	lea    edx,[eax+0x10]
c000d0e5:	39 88 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],ecx
c000d0eb:	74 08                	je     c000d0f5 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000d0ed:	83 c0 04             	add    eax,0x4
c000d0f0:	39 d0                	cmp    eax,edx
c000d0f2:	75 f1                	jne    c000d0e5 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000d0f4:	c3                   	ret    
c000d0f5:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d0ff:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d109:	eb e2                	jmp    c000d0ed <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000d10b <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000d10b:	56                   	push   esi
c000d10c:	53                   	push   ebx
c000d10d:	83 ec 04             	sub    esp,0x4
c000d110:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d115:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d119:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d11d:	74 0e                	je     c000d12d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000d11f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000d124:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000d12b:	75 34                	jne    c000d161 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x56>
c000d12d:	8d 43 20             	lea    eax,[ebx+0x20]
c000d130:	c1 e0 04             	shl    eax,0x4
c000d133:	8d 50 10             	lea    edx,[eax+0x10]
c000d136:	39 b0 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],esi
c000d13c:	74 0d                	je     c000d14b <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c000d13e:	83 c0 04             	add    eax,0x4
c000d141:	39 d0                	cmp    eax,edx
c000d143:	75 f1                	jne    c000d136 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000d145:	83 c4 04             	add    esp,0x4
c000d148:	5b                   	pop    ebx
c000d149:	5e                   	pop    esi
c000d14a:	c3                   	ret    
c000d14b:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d155:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d15f:	eb dd                	jmp    c000d13e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c000d161:	83 fb 0f             	cmp    ebx,0xf
c000d164:	7f 09                	jg     c000d16f <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x64>
c000d166:	0f b6 9b 68 37 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdc898]
c000d16d:	eb be                	jmp    c000d12d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000d16f:	83 ec 0c             	sub    esp,0xc
c000d172:	68 95 1c 02 c0       	push   0xc0021c95
c000d177:	e8 5f 44 00 00       	call   c00115db <KePanic(char const*)>
c000d17c:	83 c4 10             	add    esp,0x10
c000d17f:	eb ac                	jmp    c000d12d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c000d181 <setupINTS()>:
c000d181:	31 c0                	xor    eax,eax
c000d183:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d18d:	83 c0 10             	add    eax,0x10
c000d190:	c7 80 10 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bf0],0x0
c000d19a:	c7 80 14 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bec],0x0
c000d1a4:	c7 80 14 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bec],0x0
c000d1ae:	c7 80 18 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be8],0x0
c000d1b8:	c7 80 18 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be8],0x0
c000d1c2:	c7 80 1c a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be4],0x0
c000d1cc:	c7 80 1c 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be4],0x0
c000d1d6:	3d 00 10 00 00       	cmp    eax,0x1000
c000d1db:	75 a6                	jne    c000d183 <setupINTS()+0x2>
c000d1dd:	c3                   	ret    

c000d1de <convertLegacyIRQNumber(int)>:
c000d1de:	83 ec 0c             	sub    esp,0xc
c000d1e1:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000d1e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1eb:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000d1f2:	74 0c                	je     c000d200 <convertLegacyIRQNumber(int)+0x22>
c000d1f4:	83 f8 0f             	cmp    eax,0xf
c000d1f7:	7f 0b                	jg     c000d204 <convertLegacyIRQNumber(int)+0x26>
c000d1f9:	0f b6 80 68 37 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc898]
c000d200:	83 c4 0c             	add    esp,0xc
c000d203:	c3                   	ret    
c000d204:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d208:	83 ec 0c             	sub    esp,0xc
c000d20b:	68 a4 1c 02 c0       	push   0xc0021ca4
c000d210:	e8 c6 43 00 00       	call   c00115db <KePanic(char const*)>
c000d215:	83 c4 10             	add    esp,0x10
c000d218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d21c:	83 c4 0c             	add    esp,0xc
c000d21f:	c3                   	ret    

c000d220 <startGUI(void*)>:
c000d220:	55                   	push   ebp
c000d221:	89 e5                	mov    ebp,esp
c000d223:	53                   	push   ebx
c000d224:	83 ec 04             	sub    esp,0x4
c000d227:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d22c:	83 e8 01             	sub    eax,0x1
c000d22f:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d234:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d239:	85 c0                	test   eax,eax
c000d23b:	75 01                	jne    c000d23e <startGUI(void*)+0x1e>
c000d23d:	fb                   	sti    
c000d23e:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d244:	83 ec 08             	sub    esp,0x8
c000d247:	6a 01                	push   0x1
c000d249:	68 01 1d 02 c0       	push   0xc0021d01
c000d24e:	e8 e6 83 00 00       	call   c0015639 <Thr::loadDLL(char const*, bool)>
c000d253:	83 c4 10             	add    esp,0x10
c000d256:	83 ec 08             	sub    esp,0x8
c000d259:	53                   	push   ebx
c000d25a:	50                   	push   eax
c000d25b:	e8 19 86 00 00       	call   c0015879 <Thr::executeDLL(unsigned long, void*)>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d269:	83 ec 08             	sub    esp,0x8
c000d26c:	6a 01                	push   0x1
c000d26e:	68 1b 1d 02 c0       	push   0xc0021d1b
c000d273:	e8 c1 83 00 00       	call   c0015639 <Thr::loadDLL(char const*, bool)>
c000d278:	83 c4 10             	add    esp,0x10
c000d27b:	83 ec 08             	sub    esp,0x8
c000d27e:	53                   	push   ebx
c000d27f:	50                   	push   eax
c000d280:	e8 f4 85 00 00       	call   c0015879 <Thr::executeDLL(unsigned long, void*)>
c000d285:	83 c4 10             	add    esp,0x10
c000d288:	90                   	nop
c000d289:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d28c:	c9                   	leave  
c000d28d:	c3                   	ret    

c000d28e <startGUIVESA(void*)>:
c000d28e:	55                   	push   ebp
c000d28f:	89 e5                	mov    ebp,esp
c000d291:	53                   	push   ebx
c000d292:	83 ec 04             	sub    esp,0x4
c000d295:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d29a:	83 e8 01             	sub    eax,0x1
c000d29d:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d2a2:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d2a7:	85 c0                	test   eax,eax
c000d2a9:	75 01                	jne    c000d2ac <startGUIVESA(void*)+0x1e>
c000d2ab:	fb                   	sti    
c000d2ac:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d2b2:	83 ec 08             	sub    esp,0x8
c000d2b5:	6a 01                	push   0x1
c000d2b7:	68 39 1d 02 c0       	push   0xc0021d39
c000d2bc:	e8 78 83 00 00       	call   c0015639 <Thr::loadDLL(char const*, bool)>
c000d2c1:	83 c4 10             	add    esp,0x10
c000d2c4:	83 ec 08             	sub    esp,0x8
c000d2c7:	53                   	push   ebx
c000d2c8:	50                   	push   eax
c000d2c9:	e8 ab 85 00 00       	call   c0015879 <Thr::executeDLL(unsigned long, void*)>
c000d2ce:	83 c4 10             	add    esp,0x10
c000d2d1:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d2d7:	83 ec 08             	sub    esp,0x8
c000d2da:	6a 01                	push   0x1
c000d2dc:	68 1b 1d 02 c0       	push   0xc0021d1b
c000d2e1:	e8 53 83 00 00       	call   c0015639 <Thr::loadDLL(char const*, bool)>
c000d2e6:	83 c4 10             	add    esp,0x10
c000d2e9:	83 ec 08             	sub    esp,0x8
c000d2ec:	53                   	push   ebx
c000d2ed:	50                   	push   eax
c000d2ee:	e8 86 85 00 00       	call   c0015879 <Thr::executeDLL(unsigned long, void*)>
c000d2f3:	83 c4 10             	add    esp,0x10
c000d2f6:	90                   	nop
c000d2f7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d2fa:	c9                   	leave  
c000d2fb:	c3                   	ret    

c000d2fc <sendKeyToTerminal(unsigned char)>:
c000d2fc:	55                   	push   ebp
c000d2fd:	89 e5                	mov    ebp,esp
c000d2ff:	83 ec 28             	sub    esp,0x28
c000d302:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d305:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000d308:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c000d30d:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000d311:	83 ec 08             	sub    esp,0x8
c000d314:	52                   	push   edx
c000d315:	50                   	push   eax
c000d316:	e8 a1 ba ff ff       	call   c0008dbc <VgaText::receiveKey(unsigned char)>
c000d31b:	83 c4 10             	add    esp,0x10
c000d31e:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d322:	83 f8 0a             	cmp    eax,0xa
c000d325:	74 16                	je     c000d33d <sendKeyToTerminal(unsigned char)+0x41>
c000d327:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d32b:	83 f8 03             	cmp    eax,0x3
c000d32e:	74 0d                	je     c000d33d <sendKeyToTerminal(unsigned char)+0x41>
c000d330:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d334:	83 f8 1c             	cmp    eax,0x1c
c000d337:	0f 85 97 00 00 00    	jne    c000d3d4 <sendKeyToTerminal(unsigned char)+0xd8>
c000d33d:	fa                   	cli    
c000d33e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d343:	83 c0 01             	add    eax,0x1
c000d346:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d34b:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d350:	83 c0 01             	add    eax,0x1
c000d353:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d358:	a1 20 b4 02 c0       	mov    eax,ds:0xc002b420
c000d35d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d360:	c7 05 20 b4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b420,0x0
c000d36a:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000d36e:	74 1f                	je     c000d38f <sendKeyToTerminal(unsigned char)+0x93>
c000d370:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d373:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000d376:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d379:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d37c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d37f:	83 ec 0c             	sub    esp,0xc
c000d382:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d385:	e8 12 92 00 00       	call   c001659c <unblockTask(ThreadControlBlock*)>
c000d38a:	83 c4 10             	add    esp,0x10
c000d38d:	eb db                	jmp    c000d36a <sendKeyToTerminal(unsigned char)+0x6e>
c000d38f:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d394:	83 e8 01             	sub    eax,0x1
c000d397:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d39c:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d3a1:	85 c0                	test   eax,eax
c000d3a3:	75 18                	jne    c000d3bd <sendKeyToTerminal(unsigned char)+0xc1>
c000d3a5:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c000d3aa:	85 c0                	test   eax,eax
c000d3ac:	74 0f                	je     c000d3bd <sendKeyToTerminal(unsigned char)+0xc1>
c000d3ae:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000d3b8:	e8 e7 8c 00 00       	call   c00160a4 <schedule()>
c000d3bd:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d3c2:	83 e8 01             	sub    eax,0x1
c000d3c5:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d3ca:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d3cf:	85 c0                	test   eax,eax
c000d3d1:	75 01                	jne    c000d3d4 <sendKeyToTerminal(unsigned char)+0xd8>
c000d3d3:	fb                   	sti    
c000d3d4:	90                   	nop
c000d3d5:	c9                   	leave  
c000d3d6:	c3                   	ret    

c000d3d7 <sendKeyboardToken(KeyboardToken)>:
c000d3d7:	55                   	push   ebp
c000d3d8:	89 e5                	mov    ebp,esp
c000d3da:	83 ec 18             	sub    esp,0x18
c000d3dd:	e8 49 42 00 00       	call   c001162b <KeUserIOReceived()>
c000d3e2:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d3e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3e8:	0f b7 c0             	movzx  eax,ax
c000d3eb:	83 f2 01             	xor    edx,0x1
c000d3ee:	88 90 40 b4 02 c0    	mov    BYTE PTR [eax-0x3ffd4bc0],dl
c000d3f4:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d3f9:	85 c0                	test   eax,eax
c000d3fb:	74 24                	je     c000d421 <sendKeyboardToken(KeyboardToken)+0x4a>
c000d3fd:	8b 15 28 b4 02 c0    	mov    edx,DWORD PTR ds:0xc002b428
c000d403:	83 ec 04             	sub    esp,0x4
c000d406:	68 40 b4 02 c0       	push   0xc002b440
c000d40b:	83 ec 08             	sub    esp,0x8
c000d40e:	89 e0                	mov    eax,esp
c000d410:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000d413:	89 08                	mov    DWORD PTR [eax],ecx
c000d415:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000d418:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d41c:	ff d2                	call   edx
c000d41e:	83 c4 10             	add    esp,0x10
c000d421:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d425:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d428:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d42d:	0f b6 d2             	movzx  edx,dl
c000d430:	0f b6 c0             	movzx  eax,al
c000d433:	39 c2                	cmp    edx,eax
c000d435:	74 1c                	je     c000d453 <sendKeyboardToken(KeyboardToken)+0x7c>
c000d437:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d43a:	a2 48 b8 02 c0       	mov    ds:0xc002b848,al
c000d43f:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d444:	0f b6 c0             	movzx  eax,al
c000d447:	83 ec 0c             	sub    esp,0xc
c000d44a:	50                   	push   eax
c000d44b:	e8 c8 b0 ff ff       	call   c0008518 <setTerminalScrollLock(bool)>
c000d450:	83 c4 10             	add    esp,0x10
c000d453:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d456:	0f b6 c0             	movzx  eax,al
c000d459:	85 c0                	test   eax,eax
c000d45b:	0f 84 da 00 00 00    	je     c000d53b <sendKeyboardToken(KeyboardToken)+0x164>
c000d461:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d464:	0f b7 c0             	movzx  eax,ax
c000d467:	3d 18 03 00 00       	cmp    eax,0x318
c000d46c:	75 06                	jne    c000d474 <sendKeyboardToken(KeyboardToken)+0x9d>
c000d46e:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d474:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d477:	0f b7 c0             	movzx  eax,ax
c000d47a:	3d 19 03 00 00       	cmp    eax,0x319
c000d47f:	75 06                	jne    c000d487 <sendKeyboardToken(KeyboardToken)+0xb0>
c000d481:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d487:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d48a:	0f b7 c0             	movzx  eax,ax
c000d48d:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d492:	75 06                	jne    c000d49a <sendKeyboardToken(KeyboardToken)+0xc3>
c000d494:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d49a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d49d:	0f b7 c0             	movzx  eax,ax
c000d4a0:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d4a5:	75 06                	jne    c000d4ad <sendKeyboardToken(KeyboardToken)+0xd6>
c000d4a7:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d4ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4b0:	0f b7 c0             	movzx  eax,ax
c000d4b3:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d4b8:	75 06                	jne    c000d4c0 <sendKeyboardToken(KeyboardToken)+0xe9>
c000d4ba:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d4c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4c3:	0f b7 c0             	movzx  eax,ax
c000d4c6:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d4cb:	75 06                	jne    c000d4d3 <sendKeyboardToken(KeyboardToken)+0xfc>
c000d4cd:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d4d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4d6:	0f b7 c0             	movzx  eax,ax
c000d4d9:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d4de:	75 06                	jne    c000d4e6 <sendKeyboardToken(KeyboardToken)+0x10f>
c000d4e0:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d4e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4e9:	0f b7 c0             	movzx  eax,ax
c000d4ec:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d4f1:	75 06                	jne    c000d4f9 <sendKeyboardToken(KeyboardToken)+0x122>
c000d4f3:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d4f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4fc:	0f b7 c0             	movzx  eax,ax
c000d4ff:	3d 20 03 00 00       	cmp    eax,0x320
c000d504:	75 06                	jne    c000d50c <sendKeyboardToken(KeyboardToken)+0x135>
c000d506:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d50c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d50f:	0f b7 c0             	movzx  eax,ax
c000d512:	3d 21 03 00 00       	cmp    eax,0x321
c000d517:	75 06                	jne    c000d51f <sendKeyboardToken(KeyboardToken)+0x148>
c000d519:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d51f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d522:	0f b7 c0             	movzx  eax,ax
c000d525:	3d 22 03 00 00       	cmp    eax,0x322
c000d52a:	0f 85 f1 00 00 00    	jne    c000d621 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d530:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d536:	e9 e6 00 00 00       	jmp    c000d621 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d53b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d53e:	0f b7 c0             	movzx  eax,ax
c000d541:	3d 18 03 00 00       	cmp    eax,0x318
c000d546:	75 0a                	jne    c000d552 <sendKeyboardToken(KeyboardToken)+0x17b>
c000d548:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d54e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d552:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d555:	0f b7 c0             	movzx  eax,ax
c000d558:	3d 19 03 00 00       	cmp    eax,0x319
c000d55d:	75 0a                	jne    c000d569 <sendKeyboardToken(KeyboardToken)+0x192>
c000d55f:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d565:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d569:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d56c:	0f b7 c0             	movzx  eax,ax
c000d56f:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d574:	75 0a                	jne    c000d580 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d576:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d57c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d580:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d583:	0f b7 c0             	movzx  eax,ax
c000d586:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d58b:	75 0a                	jne    c000d597 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d58d:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d593:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d597:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d59a:	0f b7 c0             	movzx  eax,ax
c000d59d:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d5a2:	75 0a                	jne    c000d5ae <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d5a4:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d5aa:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5b1:	0f b7 c0             	movzx  eax,ax
c000d5b4:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d5b9:	75 0a                	jne    c000d5c5 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d5bb:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d5c1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5c8:	0f b7 c0             	movzx  eax,ax
c000d5cb:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d5d0:	75 0a                	jne    c000d5dc <sendKeyboardToken(KeyboardToken)+0x205>
c000d5d2:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d5d8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5df:	0f b7 c0             	movzx  eax,ax
c000d5e2:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d5e7:	75 0a                	jne    c000d5f3 <sendKeyboardToken(KeyboardToken)+0x21c>
c000d5e9:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d5ef:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5f6:	0f b7 c0             	movzx  eax,ax
c000d5f9:	3d 20 03 00 00       	cmp    eax,0x320
c000d5fe:	75 0a                	jne    c000d60a <sendKeyboardToken(KeyboardToken)+0x233>
c000d600:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d606:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d60a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d60d:	0f b7 c0             	movzx  eax,ax
c000d610:	3d 21 03 00 00       	cmp    eax,0x321
c000d615:	75 0a                	jne    c000d621 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d617:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d61d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d621:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d624:	0f b7 c0             	movzx  eax,ax
c000d627:	3d 00 02 00 00       	cmp    eax,0x200
c000d62c:	75 2f                	jne    c000d65d <sendKeyboardToken(KeyboardToken)+0x286>
c000d62e:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d633:	83 f0 01             	xor    eax,0x1
c000d636:	0f b6 c0             	movzx  eax,al
c000d639:	85 c0                	test   eax,eax
c000d63b:	74 20                	je     c000d65d <sendKeyboardToken(KeyboardToken)+0x286>
c000d63d:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d642:	6a 01                	push   0x1
c000d644:	6a 00                	push   0x0
c000d646:	68 20 d2 00 c0       	push   0xc000d220
c000d64b:	50                   	push   eax
c000d64c:	e8 07 88 00 00       	call   c0015e58 <Process::createThread(void (*)(void*), void*, int)>
c000d651:	83 c4 10             	add    esp,0x10
c000d654:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d65b:	eb 3a                	jmp    c000d697 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d65d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d660:	0f b7 c0             	movzx  eax,ax
c000d663:	3d 01 02 00 00       	cmp    eax,0x201
c000d668:	75 2d                	jne    c000d697 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d66a:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d66f:	83 f0 01             	xor    eax,0x1
c000d672:	0f b6 c0             	movzx  eax,al
c000d675:	85 c0                	test   eax,eax
c000d677:	74 1e                	je     c000d697 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d679:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d67e:	6a 01                	push   0x1
c000d680:	6a 00                	push   0x0
c000d682:	68 8e d2 00 c0       	push   0xc000d28e
c000d687:	50                   	push   eax
c000d688:	e8 cb 87 00 00       	call   c0015e58 <Process::createThread(void (*)(void*), void*, int)>
c000d68d:	83 c4 10             	add    esp,0x10
c000d690:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d697:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d69a:	0f b7 c0             	movzx  eax,ax
c000d69d:	3d 25 03 00 00       	cmp    eax,0x325
c000d6a2:	75 06                	jne    c000d6aa <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d6a4:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d6aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6ad:	0f b7 c0             	movzx  eax,ax
c000d6b0:	3d 24 03 00 00       	cmp    eax,0x324
c000d6b5:	75 06                	jne    c000d6bd <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d6b7:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d6bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6c0:	0f b7 c0             	movzx  eax,ax
c000d6c3:	3d 23 03 00 00       	cmp    eax,0x323
c000d6c8:	75 06                	jne    c000d6d0 <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d6ca:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d6d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6d3:	0f b7 c0             	movzx  eax,ax
c000d6d6:	3d 26 03 00 00       	cmp    eax,0x326
c000d6db:	75 06                	jne    c000d6e3 <sendKeyboardToken(KeyboardToken)+0x30c>
c000d6dd:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d6e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6e6:	0f b7 c0             	movzx  eax,ax
c000d6e9:	3d 27 03 00 00       	cmp    eax,0x327
c000d6ee:	75 06                	jne    c000d6f6 <sendKeyboardToken(KeyboardToken)+0x31f>
c000d6f0:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d6f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6f9:	0f b7 c0             	movzx  eax,ax
c000d6fc:	3d 22 03 00 00       	cmp    eax,0x322
c000d701:	75 06                	jne    c000d709 <sendKeyboardToken(KeyboardToken)+0x332>
c000d703:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d709:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d70d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d710:	83 f0 01             	xor    eax,0x1
c000d713:	0f b6 c0             	movzx  eax,al
c000d716:	85 c0                	test   eax,eax
c000d718:	74 7c                	je     c000d796 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d71a:	a0 41 b5 02 c0       	mov    al,ds:0xc002b541
c000d71f:	0f b6 c0             	movzx  eax,al
c000d722:	85 c0                	test   eax,eax
c000d724:	74 43                	je     c000d769 <sendKeyboardToken(KeyboardToken)+0x392>
c000d726:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d72a:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d72e:	85 c0                	test   eax,eax
c000d730:	74 2b                	je     c000d75d <sendKeyboardToken(KeyboardToken)+0x386>
c000d732:	8b 15 44 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b844
c000d738:	89 d0                	mov    eax,edx
c000d73a:	c1 e0 02             	shl    eax,0x2
c000d73d:	01 d0                	add    eax,edx
c000d73f:	d1 e0                	shl    eax,1
c000d741:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d746:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d749:	0f b7 c0             	movzx  eax,ax
c000d74c:	8d 50 d0             	lea    edx,[eax-0x30]
c000d74f:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d754:	01 d0                	add    eax,edx
c000d756:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d75b:	eb 71                	jmp    c000d7ce <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d75d:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d767:	eb 65                	jmp    c000d7ce <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d769:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d76e:	85 c0                	test   eax,eax
c000d770:	74 18                	je     c000d78a <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d772:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d777:	0f b6 c0             	movzx  eax,al
c000d77a:	83 ec 0c             	sub    esp,0xc
c000d77d:	50                   	push   eax
c000d77e:	e8 79 fb ff ff       	call   c000d2fc <sendKeyToTerminal(unsigned char)>
c000d783:	83 c4 10             	add    esp,0x10
c000d786:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d78a:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d794:	eb 38                	jmp    c000d7ce <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d796:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d799:	0f b7 c0             	movzx  eax,ax
c000d79c:	3d 01 01 00 00       	cmp    eax,0x101
c000d7a1:	75 2b                	jne    c000d7ce <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d7a3:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d7a8:	85 c0                	test   eax,eax
c000d7aa:	74 18                	je     c000d7c4 <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d7ac:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d7b1:	0f b6 c0             	movzx  eax,al
c000d7b4:	83 ec 0c             	sub    esp,0xc
c000d7b7:	50                   	push   eax
c000d7b8:	e8 3f fb ff ff       	call   c000d2fc <sendKeyToTerminal(unsigned char)>
c000d7bd:	83 c4 10             	add    esp,0x10
c000d7c0:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d7c4:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d7ce:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d7d1:	83 f0 01             	xor    eax,0x1
c000d7d4:	0f b6 c0             	movzx  eax,al
c000d7d7:	85 c0                	test   eax,eax
c000d7d9:	74 5a                	je     c000d835 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d7db:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d7de:	83 f0 01             	xor    eax,0x1
c000d7e1:	0f b6 c0             	movzx  eax,al
c000d7e4:	85 c0                	test   eax,eax
c000d7e6:	74 4d                	je     c000d835 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d7e8:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d7ed:	83 f0 01             	xor    eax,0x1
c000d7f0:	0f b6 c0             	movzx  eax,al
c000d7f3:	85 c0                	test   eax,eax
c000d7f5:	74 3e                	je     c000d835 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d7f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7fa:	0f b7 c0             	movzx  eax,ax
c000d7fd:	83 f8 1f             	cmp    eax,0x1f
c000d800:	76 0b                	jbe    c000d80d <sendKeyboardToken(KeyboardToken)+0x436>
c000d802:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d805:	0f b7 c0             	movzx  eax,ax
c000d808:	83 f8 7e             	cmp    eax,0x7e
c000d80b:	76 16                	jbe    c000d823 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d80d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d810:	0f b7 c0             	movzx  eax,ax
c000d813:	83 f8 0a             	cmp    eax,0xa
c000d816:	74 0b                	je     c000d823 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d818:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d81b:	0f b7 c0             	movzx  eax,ax
c000d81e:	83 f8 08             	cmp    eax,0x8
c000d821:	75 12                	jne    c000d835 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d823:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d826:	0f b6 c0             	movzx  eax,al
c000d829:	83 ec 0c             	sub    esp,0xc
c000d82c:	50                   	push   eax
c000d82d:	e8 ca fa ff ff       	call   c000d2fc <sendKeyToTerminal(unsigned char)>
c000d832:	83 c4 10             	add    esp,0x10
c000d835:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d838:	83 f0 01             	xor    eax,0x1
c000d83b:	0f b6 c0             	movzx  eax,al
c000d83e:	85 c0                	test   eax,eax
c000d840:	74 5d                	je     c000d89f <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d842:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d845:	83 f0 01             	xor    eax,0x1
c000d848:	0f b6 c0             	movzx  eax,al
c000d84b:	85 c0                	test   eax,eax
c000d84d:	74 50                	je     c000d89f <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d84f:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d854:	0f b6 c0             	movzx  eax,al
c000d857:	85 c0                	test   eax,eax
c000d859:	74 44                	je     c000d89f <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d85b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d85e:	0f b7 c0             	movzx  eax,ax
c000d861:	83 f8 3f             	cmp    eax,0x3f
c000d864:	76 39                	jbe    c000d89f <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d866:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d869:	0f b7 c0             	movzx  eax,ax
c000d86c:	83 f8 7f             	cmp    eax,0x7f
c000d86f:	77 2e                	ja     c000d89f <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d871:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d874:	88 c2                	mov    dl,al
c000d876:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d879:	0f b7 c0             	movzx  eax,ax
c000d87c:	83 f8 5f             	cmp    eax,0x5f
c000d87f:	76 04                	jbe    c000d885 <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d881:	b0 20                	mov    al,0x20
c000d883:	eb 02                	jmp    c000d887 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d885:	b0 00                	mov    al,0x0
c000d887:	89 d1                	mov    ecx,edx
c000d889:	29 c1                	sub    ecx,eax
c000d88b:	89 c8                	mov    eax,ecx
c000d88d:	83 e8 40             	sub    eax,0x40
c000d890:	0f b6 c0             	movzx  eax,al
c000d893:	83 ec 0c             	sub    esp,0xc
c000d896:	50                   	push   eax
c000d897:	e8 60 fa ff ff       	call   c000d2fc <sendKeyToTerminal(unsigned char)>
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d8a2:	0f b7 c0             	movzx  eax,ax
c000d8a5:	3d 00 03 00 00       	cmp    eax,0x300
c000d8aa:	75 12                	jne    c000d8be <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d8ac:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d8af:	83 f0 01             	xor    eax,0x1
c000d8b2:	0f b6 c0             	movzx  eax,al
c000d8b5:	85 c0                	test   eax,eax
c000d8b7:	74 05                	je     c000d8be <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d8b9:	e8 5b ac ff ff       	call   c0008519 <doTerminalCycle()>
c000d8be:	90                   	nop
c000d8bf:	c9                   	leave  
c000d8c0:	c3                   	ret    

c000d8c1 <clearInternalKeybuffer(VgaText*)>:
c000d8c1:	55                   	push   ebp
c000d8c2:	89 e5                	mov    ebp,esp
c000d8c4:	83 ec 08             	sub    esp,0x8
c000d8c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d8ca:	05 02 01 00 00       	add    eax,0x102
c000d8cf:	83 ec 0c             	sub    esp,0xc
c000d8d2:	50                   	push   eax
c000d8d3:	e8 a8 2c ff ff       	call   c0000580 <strlen>
c000d8d8:	83 c4 10             	add    esp,0x10
c000d8db:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d8de:	81 c2 02 01 00 00    	add    edx,0x102
c000d8e4:	83 ec 04             	sub    esp,0x4
c000d8e7:	50                   	push   eax
c000d8e8:	6a 00                	push   0x0
c000d8ea:	52                   	push   edx
c000d8eb:	e8 00 2c ff ff       	call   c00004f0 <memset>
c000d8f0:	83 c4 10             	add    esp,0x10
c000d8f3:	90                   	nop
c000d8f4:	c9                   	leave  
c000d8f5:	c3                   	ret    

c000d8f6 <readKeyboard(VgaText*, char*, unsigned long)>:
c000d8f6:	55                   	push   ebp
c000d8f7:	89 e5                	mov    ebp,esp
c000d8f9:	83 ec 18             	sub    esp,0x18
c000d8fc:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d901:	85 c0                	test   eax,eax
c000d903:	74 2a                	je     c000d92f <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d905:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d90b:	8b 15 28 b4 02 c0    	mov    edx,DWORD PTR ds:0xc002b428
c000d911:	83 ec 04             	sub    esp,0x4
c000d914:	68 40 b4 02 c0       	push   0xc002b440
c000d919:	83 ec 08             	sub    esp,0x8
c000d91c:	89 e0                	mov    eax,esp
c000d91e:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000d921:	89 08                	mov    DWORD PTR [eax],ecx
c000d923:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000d926:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d92a:	ff d2                	call   edx
c000d92c:	83 c4 10             	add    esp,0x10
c000d92f:	fb                   	sti    
c000d930:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d937:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d93b:	0f 84 0d 01 00 00    	je     c000da4e <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d941:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d944:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d94a:	0f be c0             	movsx  eax,al
c000d94d:	85 c0                	test   eax,eax
c000d94f:	75 2c                	jne    c000d97d <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d951:	fa                   	cli    
c000d952:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d957:	83 c0 01             	add    eax,0x1
c000d95a:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d95f:	e8 40 87 00 00       	call   c00160a4 <schedule()>
c000d964:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d969:	83 e8 01             	sub    eax,0x1
c000d96c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d971:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d976:	85 c0                	test   eax,eax
c000d978:	75 c7                	jne    c000d941 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d97a:	fb                   	sti    
c000d97b:	eb c4                	jmp    c000d941 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d97d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d980:	8d 50 01             	lea    edx,[eax+0x1]
c000d983:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d986:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d989:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d98f:	88 10                	mov    BYTE PTR [eax],dl
c000d991:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d994:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d99a:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d99d:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9a1:	83 f8 03             	cmp    eax,0x3
c000d9a4:	75 1e                	jne    c000d9c4 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d9a6:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d9ab:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9ad:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d9b0:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d9b6:	83 ec 08             	sub    esp,0x8
c000d9b9:	6a 02                	push   0x2
c000d9bb:	50                   	push   eax
c000d9bc:	e8 b6 40 00 00       	call   c0011a77 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d9c1:	83 c4 10             	add    esp,0x10
c000d9c4:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9c8:	83 f8 1c             	cmp    eax,0x1c
c000d9cb:	75 1e                	jne    c000d9eb <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d9cd:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d9d2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9d4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d9d7:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d9dd:	83 ec 08             	sub    esp,0x8
c000d9e0:	6a 09                	push   0x9
c000d9e2:	50                   	push   eax
c000d9e3:	e8 8f 40 00 00       	call   c0011a77 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d9e8:	83 c4 10             	add    esp,0x10
c000d9eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d9ee:	05 02 01 00 00       	add    eax,0x102
c000d9f3:	83 ec 0c             	sub    esp,0xc
c000d9f6:	50                   	push   eax
c000d9f7:	e8 84 2b ff ff       	call   c0000580 <strlen>
c000d9fc:	83 c4 10             	add    esp,0x10
c000d9ff:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000da02:	81 c2 02 01 00 00    	add    edx,0x102
c000da08:	8d 4a 01             	lea    ecx,[edx+0x1]
c000da0b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000da0e:	81 c2 02 01 00 00    	add    edx,0x102
c000da14:	83 ec 04             	sub    esp,0x4
c000da17:	50                   	push   eax
c000da18:	51                   	push   ecx
c000da19:	52                   	push   edx
c000da1a:	e8 b1 29 ff ff       	call   c00003d0 <memmove>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000da26:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000da2a:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000da2e:	83 f8 0a             	cmp    eax,0xa
c000da31:	74 16                	je     c000da49 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000da33:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000da37:	83 f8 03             	cmp    eax,0x3
c000da3a:	74 0d                	je     c000da49 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000da3c:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000da40:	83 f8 1c             	cmp    eax,0x1c
c000da43:	0f 85 ee fe ff ff    	jne    c000d937 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000da49:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000da4c:	eb 03                	jmp    c000da51 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000da4e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000da51:	c9                   	leave  
c000da52:	c3                   	ret    
c000da53:	90                   	nop

c000da54 <Keyboard::Keyboard(char const*)>:
c000da54:	83 ec 0c             	sub    esp,0xc
c000da57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da5b:	83 ec 08             	sub    esp,0x8
c000da5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da62:	50                   	push   eax
c000da63:	e8 44 f1 ff ff       	call   c000cbac <Device::Device(char const*)>
c000da68:	83 c4 10             	add    esp,0x10
c000da6b:	ba 5c 1d 02 c0       	mov    edx,0xc0021d5c
c000da70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da74:	89 10                	mov    DWORD PTR [eax],edx
c000da76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da7a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000da84:	c6 05 24 b4 02 c0 01 	mov    BYTE PTR ds:0xc002b424,0x1
c000da8b:	90                   	nop
c000da8c:	83 c4 0c             	add    esp,0xc
c000da8f:	c3                   	ret    

c000da90 <Keyboard::~Keyboard()>:
c000da90:	83 ec 0c             	sub    esp,0xc
c000da93:	ba 5c 1d 02 c0       	mov    edx,0xc0021d5c
c000da98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da9c:	89 10                	mov    DWORD PTR [eax],edx
c000da9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daa2:	83 ec 0c             	sub    esp,0xc
c000daa5:	50                   	push   eax
c000daa6:	e8 6b ee ff ff       	call   c000c916 <Device::~Device()>
c000daab:	83 c4 10             	add    esp,0x10
c000daae:	90                   	nop
c000daaf:	83 c4 0c             	add    esp,0xc
c000dab2:	c3                   	ret    
c000dab3:	90                   	nop

c000dab4 <Keyboard::~Keyboard()>:
c000dab4:	83 ec 0c             	sub    esp,0xc
c000dab7:	83 ec 0c             	sub    esp,0xc
c000daba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dabe:	e8 cd ff ff ff       	call   c000da90 <Keyboard::~Keyboard()>
c000dac3:	83 c4 10             	add    esp,0x10
c000dac6:	83 ec 08             	sub    esp,0x8
c000dac9:	68 5c 01 00 00       	push   0x15c
c000dace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dad2:	e8 35 cd ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000dad7:	83 c4 10             	add    esp,0x10
c000dada:	83 c4 0c             	add    esp,0xc
c000dadd:	c3                   	ret    

c000dade <LogicalDisk::close(int, int, void*)>:
c000dade:	83 c8 ff             	or     eax,0xffffffff
c000dae1:	c3                   	ret    

c000dae2 <LogicalDisk::~LogicalDisk()>:
c000dae2:	83 ec 0c             	sub    esp,0xc
c000dae5:	ba d4 1d 02 c0       	mov    edx,0xc0021dd4
c000daea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daee:	89 10                	mov    DWORD PTR [eax],edx
c000daf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daf4:	83 ec 0c             	sub    esp,0xc
c000daf7:	50                   	push   eax
c000daf8:	e8 19 ee ff ff       	call   c000c916 <Device::~Device()>
c000dafd:	83 c4 10             	add    esp,0x10
c000db00:	90                   	nop
c000db01:	83 c4 0c             	add    esp,0xc
c000db04:	c3                   	ret    
c000db05:	90                   	nop

c000db06 <LogicalDisk::~LogicalDisk()>:
c000db06:	83 ec 0c             	sub    esp,0xc
c000db09:	83 ec 0c             	sub    esp,0xc
c000db0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db10:	e8 cd ff ff ff       	call   c000dae2 <LogicalDisk::~LogicalDisk()>
c000db15:	83 c4 10             	add    esp,0x10
c000db18:	83 ec 08             	sub    esp,0x8
c000db1b:	68 78 01 00 00       	push   0x178
c000db20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db24:	e8 e3 cc ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000db29:	83 c4 10             	add    esp,0x10
c000db2c:	83 c4 0c             	add    esp,0xc
c000db2f:	c3                   	ret    

c000db30 <LogicalDisk::open(int, int, void*)>:
c000db30:	83 ec 18             	sub    esp,0x18
c000db33:	68 88 1d 02 c0       	push   0xc0021d88
c000db38:	e8 9e 3a 00 00       	call   c00115db <KePanic(char const*)>
c000db3d:	83 c8 ff             	or     eax,0xffffffff
c000db40:	83 c4 1c             	add    esp,0x1c
c000db43:	c3                   	ret    

c000db44 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000db44:	53                   	push   ebx
c000db45:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000db49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000db4d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000db51:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000db57:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000db5d:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000db63:	77 10                	ja     c000db75 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000db65:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000db6b:	89 d3                	mov    ebx,edx
c000db6d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000db73:	72 05                	jb     c000db7a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000db75:	83 c8 ff             	or     eax,0xffffffff
c000db78:	89 c2                	mov    edx,eax
c000db7a:	5b                   	pop    ebx
c000db7b:	c3                   	ret    

c000db7c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000db7c:	56                   	push   esi
c000db7d:	83 c8 ff             	or     eax,0xffffffff
c000db80:	53                   	push   ebx
c000db81:	89 c2                	mov    edx,eax
c000db83:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000db87:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000db8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000db8f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000db95:	77 27                	ja     c000dbbe <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000db97:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000db9d:	89 d8                	mov    eax,ebx
c000db9f:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000dba5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dbaa:	89 c2                	mov    edx,eax
c000dbac:	73 10                	jae    c000dbbe <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000dbae:	89 c8                	mov    eax,ecx
c000dbb0:	89 da                	mov    edx,ebx
c000dbb2:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000dbb8:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000dbbe:	5b                   	pop    ebx
c000dbbf:	5e                   	pop    esi
c000dbc0:	c3                   	ret    
c000dbc1:	90                   	nop

c000dbc2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dbc2:	83 ec 1c             	sub    esp,0x1c
c000dbc5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000dbc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbcd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dbd1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dbd5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dbd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000dbdc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dbe0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dbe4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbe8:	83 ec 08             	sub    esp,0x8
c000dbeb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dbef:	50                   	push   eax
c000dbf0:	e8 b7 ef ff ff       	call   c000cbac <Device::Device(char const*)>
c000dbf5:	83 c4 10             	add    esp,0x10
c000dbf8:	ba d4 1d 02 c0       	mov    edx,0xc0021dd4
c000dbfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc01:	89 10                	mov    DWORD PTR [eax],edx
c000dc03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc07:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000dc0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc12:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000dc19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc1d:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000dc24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc28:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000dc32:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dc36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dc3a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dc3e:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000dc44:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000dc4a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dc4e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000dc51:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc55:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000dc5b:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000dc61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc65:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000dc69:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000dc6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc73:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dc7d:	90                   	nop
c000dc7e:	83 c4 1c             	add    esp,0x1c
c000dc81:	c3                   	ret    

c000dc82 <LogicalDisk::assignDriveLetter()>:
c000dc82:	55                   	push   ebp
c000dc83:	57                   	push   edi
c000dc84:	56                   	push   esi
c000dc85:	53                   	push   ebx
c000dc86:	83 ec 14             	sub    esp,0x14
c000dc89:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000dc8d:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000dc93:	b0 41                	mov    al,0x41
c000dc95:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000dc9b:	84 d2                	test   dl,dl
c000dc9d:	75 02                	jne    c000dca1 <LogicalDisk::assignDriveLetter()+0x1f>
c000dc9f:	b0 43                	mov    al,0x43
c000dca1:	8b 3d 60 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b860
c000dca7:	0f b6 ca             	movzx  ecx,dl
c000dcaa:	0f be e8             	movsx  ebp,al
c000dcad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dcb1:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000dcb5:	8b 3d 64 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b864
c000dcbb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000dcbf:	3c 43                	cmp    al,0x43
c000dcc1:	75 10                	jne    c000dcd3 <LogicalDisk::assignDriveLetter()+0x51>
c000dcc3:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000dcca:	75 5a                	jne    c000dd26 <LogicalDisk::assignDriveLetter()+0xa4>
c000dccc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000dcd1:	75 53                	jne    c000dd26 <LogicalDisk::assignDriveLetter()+0xa4>
c000dcd3:	8d 75 bf             	lea    esi,[ebp-0x41]
c000dcd6:	ba 01 00 00 00       	mov    edx,0x1
c000dcdb:	89 34 24             	mov    DWORD PTR [esp],esi
c000dcde:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000dce1:	d3 e2                	shl    edx,cl
c000dce3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dce7:	89 d7                	mov    edi,edx
c000dce9:	89 d6                	mov    esi,edx
c000dceb:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000dcef:	c1 ff 1f             	sar    edi,0x1f
c000dcf2:	21 f9                	and    ecx,edi
c000dcf4:	09 d1                	or     ecx,edx
c000dcf6:	75 2e                	jne    c000dd26 <LogicalDisk::assignDriveLetter()+0xa4>
c000dcf8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dcfc:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000dd00:	09 f2                	or     edx,esi
c000dd02:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dd05:	89 15 60 b8 02 c0    	mov    DWORD PTR ds:0xc002b860,edx
c000dd0b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dd0f:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000dd15:	89 1c b5 80 b8 02 c0 	mov    DWORD PTR [esi*4-0x3ffd4780],ebx
c000dd1c:	09 fa                	or     edx,edi
c000dd1e:	89 15 64 b8 02 c0    	mov    DWORD PTR ds:0xc002b864,edx
c000dd24:	eb 0d                	jmp    c000dd33 <LogicalDisk::assignDriveLetter()+0xb1>
c000dd26:	8d 50 01             	lea    edx,[eax+0x1]
c000dd29:	45                   	inc    ebp
c000dd2a:	80 fa 5b             	cmp    dl,0x5b
c000dd2d:	88 d0                	mov    al,dl
c000dd2f:	75 8e                	jne    c000dcbf <LogicalDisk::assignDriveLetter()+0x3d>
c000dd31:	31 c0                	xor    eax,eax
c000dd33:	83 c4 14             	add    esp,0x14
c000dd36:	5b                   	pop    ebx
c000dd37:	5e                   	pop    esi
c000dd38:	5f                   	pop    edi
c000dd39:	5d                   	pop    ebp
c000dd3a:	c3                   	ret    
c000dd3b:	90                   	nop

c000dd3c <LogicalDisk::mount()>:
c000dd3c:	56                   	push   esi
c000dd3d:	53                   	push   ebx
c000dd3e:	53                   	push   ebx
c000dd3f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dd43:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c000dd49:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000dd53:	85 db                	test   ebx,ebx
c000dd55:	74 27                	je     c000dd7e <LogicalDisk::mount()+0x42>
c000dd57:	51                   	push   ecx
c000dd58:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000dd5f:	8b 13                	mov    edx,DWORD PTR [ebx]
c000dd61:	83 e8 41             	sub    eax,0x41
c000dd64:	50                   	push   eax
c000dd65:	56                   	push   esi
c000dd66:	53                   	push   ebx
c000dd67:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000dd6a:	83 c4 10             	add    esp,0x10
c000dd6d:	84 c0                	test   al,al
c000dd6f:	74 08                	je     c000dd79 <LogicalDisk::mount()+0x3d>
c000dd71:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000dd77:	eb 07                	jmp    c000dd80 <LogicalDisk::mount()+0x44>
c000dd79:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000dd7c:	eb d5                	jmp    c000dd53 <LogicalDisk::mount()+0x17>
c000dd7e:	31 c0                	xor    eax,eax
c000dd80:	5a                   	pop    edx
c000dd81:	5b                   	pop    ebx
c000dd82:	5e                   	pop    esi
c000dd83:	c3                   	ret    

c000dd84 <LogicalDisk::unmount()>:
c000dd84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd88:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dd92:	c3                   	ret    
c000dd93:	90                   	nop

c000dd94 <LogicalDisk::eject()>:
c000dd94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd98:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000dd9e:	8b 10                	mov    edx,DWORD PTR [eax]
c000dda0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dda4:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000dda7:	90                   	nop

c000dda8 <LogicalDisk::unassignDriveLetter()>:
c000dda8:	57                   	push   edi
c000dda9:	56                   	push   esi
c000ddaa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ddae:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000ddb5:	85 c9                	test   ecx,ecx
c000ddb7:	75 0f                	jne    c000ddc8 <LogicalDisk::unassignDriveLetter()+0x20>
c000ddb9:	c7 44 24 0c ac 1d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021dac
c000ddc1:	5e                   	pop    esi
c000ddc2:	5f                   	pop    edi
c000ddc3:	e9 13 38 00 00       	jmp    c00115db <KePanic(char const*)>
c000ddc8:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000ddcf:	83 e9 41             	sub    ecx,0x41
c000ddd2:	b8 01 00 00 00       	mov    eax,0x1
c000ddd7:	c7 04 8d 80 b8 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd4780],0x0
c000dde2:	d3 e0                	shl    eax,cl
c000dde4:	89 c7                	mov    edi,eax
c000dde6:	f7 d0                	not    eax
c000dde8:	c1 ff 1f             	sar    edi,0x1f
c000ddeb:	21 05 60 b8 02 c0    	and    DWORD PTR ds:0xc002b860,eax
c000ddf1:	89 fe                	mov    esi,edi
c000ddf3:	f7 d6                	not    esi
c000ddf5:	21 35 64 b8 02 c0    	and    DWORD PTR ds:0xc002b864,esi
c000ddfb:	5e                   	pop    esi
c000ddfc:	5f                   	pop    edi
c000ddfd:	c3                   	ret    

c000ddfe <LogicalDisk::read(unsigned long long, int, void*)>:
c000ddfe:	57                   	push   edi
c000ddff:	56                   	push   esi
c000de00:	53                   	push   ebx
c000de01:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000de05:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000de09:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000de0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de11:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000de17:	77 41                	ja     c000de5a <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000de19:	99                   	cdq    
c000de1a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000de20:	01 c8                	add    eax,ecx
c000de22:	11 da                	adc    edx,ebx
c000de24:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000de2a:	19 d7                	sbb    edi,edx
c000de2c:	72 33                	jb     c000de61 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000de2e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000de34:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000de3a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000de3e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000de42:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000de48:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000de4e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de52:	5b                   	pop    ebx
c000de53:	5e                   	pop    esi
c000de54:	5f                   	pop    edi
c000de55:	e9 d4 0a 00 00       	jmp    c000e92e <VCache::read(unsigned long long, int, void*)>
c000de5a:	b8 05 00 00 00       	mov    eax,0x5
c000de5f:	eb 05                	jmp    c000de66 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000de61:	b8 07 00 00 00       	mov    eax,0x7
c000de66:	5b                   	pop    ebx
c000de67:	5e                   	pop    esi
c000de68:	5f                   	pop    edi
c000de69:	c3                   	ret    

c000de6a <LogicalDisk::write(unsigned long long, int, void*)>:
c000de6a:	57                   	push   edi
c000de6b:	56                   	push   esi
c000de6c:	53                   	push   ebx
c000de6d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000de71:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000de75:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000de79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de7d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000de83:	77 41                	ja     c000dec6 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000de85:	99                   	cdq    
c000de86:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000de8c:	01 c8                	add    eax,ecx
c000de8e:	11 da                	adc    edx,ebx
c000de90:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000de96:	19 d7                	sbb    edi,edx
c000de98:	72 33                	jb     c000decd <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000de9a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000dea0:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000dea6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000deaa:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000deae:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000deb4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000deba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000debe:	5b                   	pop    ebx
c000debf:	5e                   	pop    esi
c000dec0:	5f                   	pop    edi
c000dec1:	e9 6e 09 00 00       	jmp    c000e834 <VCache::write(unsigned long long, int, void*)>
c000dec6:	b8 05 00 00 00       	mov    eax,0x5
c000decb:	eb 05                	jmp    c000ded2 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000decd:	b8 07 00 00 00       	mov    eax,0x7
c000ded2:	5b                   	pop    ebx
c000ded3:	5e                   	pop    esi
c000ded4:	5f                   	pop    edi
c000ded5:	c3                   	ret    
c000ded6:	66 90                	xchg   ax,ax

c000ded8 <Mouse::Mouse(char const*)>:
c000ded8:	83 ec 0c             	sub    esp,0xc
c000dedb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dedf:	83 ec 08             	sub    esp,0x8
c000dee2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dee6:	50                   	push   eax
c000dee7:	e8 c0 ec ff ff       	call   c000cbac <Device::Device(char const*)>
c000deec:	83 c4 10             	add    esp,0x10
c000deef:	ba 00 1e 02 c0       	mov    edx,0xc0021e00
c000def4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000def8:	89 10                	mov    DWORD PTR [eax],edx
c000defa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000defe:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000df08:	90                   	nop
c000df09:	83 c4 0c             	add    esp,0xc
c000df0c:	c3                   	ret    
c000df0d:	90                   	nop
c000df0e:	66 90                	xchg   ax,ax

c000df10 <Mouse::~Mouse()>:
c000df10:	83 ec 0c             	sub    esp,0xc
c000df13:	ba 00 1e 02 c0       	mov    edx,0xc0021e00
c000df18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df1c:	89 10                	mov    DWORD PTR [eax],edx
c000df1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df22:	83 ec 0c             	sub    esp,0xc
c000df25:	50                   	push   eax
c000df26:	e8 eb e9 ff ff       	call   c000c916 <Device::~Device()>
c000df2b:	83 c4 10             	add    esp,0x10
c000df2e:	90                   	nop
c000df2f:	83 c4 0c             	add    esp,0xc
c000df32:	c3                   	ret    
c000df33:	90                   	nop

c000df34 <Mouse::~Mouse()>:
c000df34:	83 ec 0c             	sub    esp,0xc
c000df37:	83 ec 0c             	sub    esp,0xc
c000df3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df3e:	e8 cd ff ff ff       	call   c000df10 <Mouse::~Mouse()>
c000df43:	83 c4 10             	add    esp,0x10
c000df46:	83 ec 08             	sub    esp,0x8
c000df49:	68 58 01 00 00       	push   0x158
c000df4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df52:	e8 b5 c8 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000df57:	83 c4 10             	add    esp,0x10
c000df5a:	83 c4 0c             	add    esp,0xc
c000df5d:	c3                   	ret    

c000df5e <NIC::getMAC()>:
c000df5e:	31 c0                	xor    eax,eax
c000df60:	31 d2                	xor    edx,edx
c000df62:	c3                   	ret    
c000df63:	90                   	nop

c000df64 <NIC::write(int, unsigned char*, int*)>:
c000df64:	b8 01 00 00 00       	mov    eax,0x1
c000df69:	c3                   	ret    

c000df6a <NIC::NIC(char const*)>:
c000df6a:	83 ec 0c             	sub    esp,0xc
c000df6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df71:	83 ec 08             	sub    esp,0x8
c000df74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df78:	50                   	push   eax
c000df79:	e8 2e ec ff ff       	call   c000cbac <Device::Device(char const*)>
c000df7e:	83 c4 10             	add    esp,0x10
c000df81:	ba 2c 1e 02 c0       	mov    edx,0xc0021e2c
c000df86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df8a:	89 10                	mov    DWORD PTR [eax],edx
c000df8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df90:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000df9a:	90                   	nop
c000df9b:	83 c4 0c             	add    esp,0xc
c000df9e:	c3                   	ret    
c000df9f:	90                   	nop

c000dfa0 <NIC::~NIC()>:
c000dfa0:	83 ec 0c             	sub    esp,0xc
c000dfa3:	ba 2c 1e 02 c0       	mov    edx,0xc0021e2c
c000dfa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfac:	89 10                	mov    DWORD PTR [eax],edx
c000dfae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfb2:	83 ec 0c             	sub    esp,0xc
c000dfb5:	50                   	push   eax
c000dfb6:	e8 5b e9 ff ff       	call   c000c916 <Device::~Device()>
c000dfbb:	83 c4 10             	add    esp,0x10
c000dfbe:	90                   	nop
c000dfbf:	83 c4 0c             	add    esp,0xc
c000dfc2:	c3                   	ret    
c000dfc3:	90                   	nop

c000dfc4 <NIC::~NIC()>:
c000dfc4:	83 ec 0c             	sub    esp,0xc
c000dfc7:	83 ec 0c             	sub    esp,0xc
c000dfca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfce:	e8 cd ff ff ff       	call   c000dfa0 <NIC::~NIC()>
c000dfd3:	83 c4 10             	add    esp,0x10
c000dfd6:	83 ec 08             	sub    esp,0x8
c000dfd9:	68 58 01 00 00       	push   0x158
c000dfde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe2:	e8 25 c8 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000dfe7:	83 c4 10             	add    esp,0x10
c000dfea:	83 c4 0c             	add    esp,0xc
c000dfed:	c3                   	ret    

c000dfee <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dfee:	55                   	push   ebp
c000dfef:	57                   	push   edi
c000dff0:	56                   	push   esi
c000dff1:	53                   	push   ebx
c000dff2:	81 ec 28 01 00 00    	sub    esp,0x128
c000dff8:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000dfff:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000e006:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000e00d:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000e014:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e018:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e01c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000e023:	e8 80 ec ff ff       	call   c000cca8 <Device::getName()>
c000e028:	5a                   	pop    edx
c000e029:	59                   	pop    ecx
c000e02a:	50                   	push   eax
c000e02b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000e02f:	55                   	push   ebp
c000e030:	e8 1b 26 ff ff       	call   c0000650 <strcpy>
c000e035:	5b                   	pop    ebx
c000e036:	58                   	pop    eax
c000e037:	68 58 1e 02 c0       	push   0xc0021e58
c000e03c:	55                   	push   ebp
c000e03d:	e8 2e 28 ff ff       	call   c0000870 <strcat>
c000e042:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000e049:	e8 85 9a ff ff       	call   c0007ad3 <malloc>
c000e04e:	83 c4 0c             	add    esp,0xc
c000e051:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e055:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e059:	89 c3                	mov    ebx,eax
c000e05b:	57                   	push   edi
c000e05c:	56                   	push   esi
c000e05d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000e064:	55                   	push   ebp
c000e065:	50                   	push   eax
c000e066:	e8 57 fb ff ff       	call   c000dbc2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000e06b:	83 c4 14             	add    esp,0x14
c000e06e:	53                   	push   ebx
c000e06f:	e8 0e fc ff ff       	call   c000dc82 <LogicalDisk::assignDriveLetter()>
c000e074:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e077:	e8 c0 fc ff ff       	call   c000dd3c <LogicalDisk::mount()>
c000e07c:	58                   	pop    eax
c000e07d:	5a                   	pop    edx
c000e07e:	53                   	push   ebx
c000e07f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000e086:	e8 89 e9 ff ff       	call   c000ca14 <Device::addChild(Device*)>
c000e08b:	81 c4 2c 01 00 00    	add    esp,0x12c
c000e091:	5b                   	pop    ebx
c000e092:	5e                   	pop    esi
c000e093:	5f                   	pop    edi
c000e094:	5d                   	pop    ebp
c000e095:	c3                   	ret    

c000e096 <createPartitionsForDisk(PhysicalDisk*)>:
c000e096:	55                   	push   ebp
c000e097:	57                   	push   edi
c000e098:	56                   	push   esi
c000e099:	53                   	push   ebx
c000e09a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000e0a0:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000e0a7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000e0ad:	3d 00 02 00 00       	cmp    eax,0x200
c000e0b2:	74 27                	je     c000e0db <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000e0b4:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000e0ba:	83 ec 10             	sub    esp,0x10
c000e0bd:	99                   	cdq    
c000e0be:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000e0c4:	52                   	push   edx
c000e0c5:	50                   	push   eax
c000e0c6:	0f a4 f7 0a          	shld   edi,esi,0xa
c000e0ca:	c1 e6 0a             	shl    esi,0xa
c000e0cd:	89 fd                	mov    ebp,edi
c000e0cf:	55                   	push   ebp
c000e0d0:	56                   	push   esi
c000e0d1:	e8 8a 16 01 00       	call   c001f760 <__udivdi3>
c000e0d6:	e9 b9 00 00 00       	jmp    c000e194 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e0db:	83 ec 0c             	sub    esp,0xc
c000e0de:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e0e0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000e0e4:	56                   	push   esi
c000e0e5:	6a 01                	push   0x1
c000e0e7:	6a 00                	push   0x0
c000e0e9:	6a 00                	push   0x0
c000e0eb:	53                   	push   ebx
c000e0ec:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000e0ef:	83 c4 20             	add    esp,0x20
c000e0f2:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000e0fa:	75 0a                	jne    c000e106 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000e0fc:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000e104:	74 2c                	je     c000e132 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000e106:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e10c:	83 ec 10             	sub    esp,0x10
c000e10f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e115:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e11b:	89 f7                	mov    edi,esi
c000e11d:	c1 ff 1f             	sar    edi,0x1f
c000e120:	57                   	push   edi
c000e121:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e125:	56                   	push   esi
c000e126:	c1 e0 0a             	shl    eax,0xa
c000e129:	52                   	push   edx
c000e12a:	50                   	push   eax
c000e12b:	e8 30 16 01 00       	call   c001f760 <__udivdi3>
c000e130:	eb 62                	jmp    c000e194 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e132:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000e139:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000e140:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000e147:	89 cf                	mov    edi,ecx
c000e149:	83 e2 7f             	and    edx,0x7f
c000e14c:	83 e7 7f             	and    edi,0x7f
c000e14f:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000e152:	83 e0 7f             	and    eax,0x7f
c000e155:	8d 14 01             	lea    edx,[ecx+eax*1]
c000e158:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000e15f:	83 e0 7f             	and    eax,0x7f
c000e162:	01 d0                	add    eax,edx
c000e164:	84 c0                	test   al,al
c000e166:	89 c5                	mov    ebp,eax
c000e168:	74 41                	je     c000e1ab <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000e16a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e170:	83 ec 10             	sub    esp,0x10
c000e173:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e179:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e17f:	89 f7                	mov    edi,esi
c000e181:	c1 ff 1f             	sar    edi,0x1f
c000e184:	57                   	push   edi
c000e185:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e189:	56                   	push   esi
c000e18a:	c1 e0 0a             	shl    eax,0xa
c000e18d:	52                   	push   edx
c000e18e:	50                   	push   eax
c000e18f:	e8 cc 15 01 00       	call   c001f760 <__udivdi3>
c000e194:	83 c4 14             	add    esp,0x14
c000e197:	52                   	push   edx
c000e198:	50                   	push   eax
c000e199:	6a 00                	push   0x0
c000e19b:	6a 00                	push   0x0
c000e19d:	53                   	push   ebx
c000e19e:	e8 4b fe ff ff       	call   c000dfee <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e1a3:	83 c4 20             	add    esp,0x20
c000e1a6:	e9 73 01 00 00       	jmp    c000e31e <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000e1ab:	89 f0                	mov    eax,esi
c000e1ad:	31 c9                	xor    ecx,ecx
c000e1af:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000e1b6:	75 02                	jne    c000e1ba <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000e1b8:	89 cd                	mov    ebp,ecx
c000e1ba:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000e1c2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000e1c9:	83 c0 10             	add    eax,0x10
c000e1cc:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000e1d4:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000e1db:	c1 e2 08             	shl    edx,0x8
c000e1de:	c1 e6 10             	shl    esi,0x10
c000e1e1:	09 f2                	or     edx,esi
c000e1e3:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000e1ea:	09 f2                	or     edx,esi
c000e1ec:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000e1f3:	c1 e6 18             	shl    esi,0x18
c000e1f6:	09 f2                	or     edx,esi
c000e1f8:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000e1ff:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000e203:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000e20a:	c1 e6 10             	shl    esi,0x10
c000e20d:	c1 e2 08             	shl    edx,0x8
c000e210:	09 f2                	or     edx,esi
c000e212:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000e219:	09 f2                	or     edx,esi
c000e21b:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000e222:	c1 e6 18             	shl    esi,0x18
c000e225:	09 f2                	or     edx,esi
c000e227:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000e22b:	41                   	inc    ecx
c000e22c:	83 f9 04             	cmp    ecx,0x4
c000e22f:	0f 85 7a ff ff ff    	jne    c000e1af <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000e235:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e239:	83 f0 01             	xor    eax,0x1
c000e23c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e240:	75 4f                	jne    c000e291 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e242:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e246:	83 f0 01             	xor    eax,0x1
c000e249:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000e24d:	75 42                	jne    c000e291 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e24f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e255:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000e25d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e263:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e26b:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e271:	89 f7                	mov    edi,esi
c000e273:	c1 ff 1f             	sar    edi,0x1f
c000e276:	57                   	push   edi
c000e277:	56                   	push   esi
c000e278:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e27c:	52                   	push   edx
c000e27d:	c1 e0 0a             	shl    eax,0xa
c000e280:	50                   	push   eax
c000e281:	e8 da 14 01 00       	call   c001f760 <__udivdi3>
c000e286:	83 c4 10             	add    esp,0x10
c000e289:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e28d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000e291:	89 e8                	mov    eax,ebp
c000e293:	0f b6 e8             	movzx  ebp,al
c000e296:	85 ed                	test   ebp,ebp
c000e298:	74 50                	je     c000e2ea <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000e29a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e29e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e2a2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e2a6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000e2aa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e2ae:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e2b2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e2b6:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e2ba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e2c2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2c6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e2ca:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000e2ce:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e2d2:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000e2d6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e2da:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e2de:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e2e2:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000e2e6:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000e2ea:	31 ed                	xor    ebp,ebp
c000e2ec:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e2f0:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e2f4:	89 f8                	mov    eax,edi
c000e2f6:	09 f0                	or     eax,esi
c000e2f8:	74 1e                	je     c000e318 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e2fa:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e2fe:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e302:	89 d1                	mov    ecx,edx
c000e304:	09 c1                	or     ecx,eax
c000e306:	74 10                	je     c000e318 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e308:	83 ec 0c             	sub    esp,0xc
c000e30b:	57                   	push   edi
c000e30c:	56                   	push   esi
c000e30d:	52                   	push   edx
c000e30e:	50                   	push   eax
c000e30f:	53                   	push   ebx
c000e310:	e8 d9 fc ff ff       	call   c000dfee <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e315:	83 c4 20             	add    esp,0x20
c000e318:	45                   	inc    ebp
c000e319:	83 fd 04             	cmp    ebp,0x4
c000e31c:	75 ce                	jne    c000e2ec <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000e31e:	81 c4 5c 02 00 00    	add    esp,0x25c
c000e324:	5b                   	pop    ebx
c000e325:	5e                   	pop    esi
c000e326:	5f                   	pop    edi
c000e327:	5d                   	pop    ebp
c000e328:	c3                   	ret    
c000e329:	66 90                	xchg   ax,ax
c000e32b:	90                   	nop

c000e32c <Serial::Serial(char const*)>:
c000e32c:	83 ec 0c             	sub    esp,0xc
c000e32f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e333:	83 ec 08             	sub    esp,0x8
c000e336:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e33a:	50                   	push   eax
c000e33b:	e8 6c e8 ff ff       	call   c000cbac <Device::Device(char const*)>
c000e340:	83 c4 10             	add    esp,0x10
c000e343:	ba 6c 1e 02 c0       	mov    edx,0xc0021e6c
c000e348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e34c:	89 10                	mov    DWORD PTR [eax],edx
c000e34e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e352:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000e35c:	90                   	nop
c000e35d:	83 c4 0c             	add    esp,0xc
c000e360:	c3                   	ret    
c000e361:	90                   	nop
c000e362:	66 90                	xchg   ax,ax

c000e364 <Serial::~Serial()>:
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	ba 6c 1e 02 c0       	mov    edx,0xc0021e6c
c000e36c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e370:	89 10                	mov    DWORD PTR [eax],edx
c000e372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e376:	83 ec 0c             	sub    esp,0xc
c000e379:	50                   	push   eax
c000e37a:	e8 97 e5 ff ff       	call   c000c916 <Device::~Device()>
c000e37f:	83 c4 10             	add    esp,0x10
c000e382:	90                   	nop
c000e383:	83 c4 0c             	add    esp,0xc
c000e386:	c3                   	ret    
c000e387:	90                   	nop

c000e388 <Serial::~Serial()>:
c000e388:	83 ec 0c             	sub    esp,0xc
c000e38b:	83 ec 0c             	sub    esp,0xc
c000e38e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e392:	e8 cd ff ff ff       	call   c000e364 <Serial::~Serial()>
c000e397:	83 c4 10             	add    esp,0x10
c000e39a:	83 ec 08             	sub    esp,0x8
c000e39d:	68 58 01 00 00       	push   0x158
c000e3a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3a6:	e8 61 c4 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e3ab:	83 c4 10             	add    esp,0x10
c000e3ae:	83 c4 0c             	add    esp,0xc
c000e3b1:	c3                   	ret    
c000e3b2:	66 90                	xchg   ax,ax

c000e3b4 <Timer::Timer(char const*)>:
c000e3b4:	83 ec 0c             	sub    esp,0xc
c000e3b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3bb:	83 ec 08             	sub    esp,0x8
c000e3be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3c2:	50                   	push   eax
c000e3c3:	e8 e4 e7 ff ff       	call   c000cbac <Device::Device(char const*)>
c000e3c8:	83 c4 10             	add    esp,0x10
c000e3cb:	ba b0 1e 02 c0       	mov    edx,0xc0021eb0
c000e3d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3d4:	89 10                	mov    DWORD PTR [eax],edx
c000e3d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3da:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e3e4:	90                   	nop
c000e3e5:	83 c4 0c             	add    esp,0xc
c000e3e8:	c3                   	ret    
c000e3e9:	90                   	nop
c000e3ea:	66 90                	xchg   ax,ax

c000e3ec <Timer::~Timer()>:
c000e3ec:	83 ec 0c             	sub    esp,0xc
c000e3ef:	ba b0 1e 02 c0       	mov    edx,0xc0021eb0
c000e3f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3f8:	89 10                	mov    DWORD PTR [eax],edx
c000e3fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3fe:	83 ec 0c             	sub    esp,0xc
c000e401:	50                   	push   eax
c000e402:	e8 0f e5 ff ff       	call   c000c916 <Device::~Device()>
c000e407:	83 c4 10             	add    esp,0x10
c000e40a:	90                   	nop
c000e40b:	83 c4 0c             	add    esp,0xc
c000e40e:	c3                   	ret    
c000e40f:	90                   	nop

c000e410 <Timer::~Timer()>:
c000e410:	83 ec 0c             	sub    esp,0xc
c000e413:	83 ec 0c             	sub    esp,0xc
c000e416:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e41a:	e8 cd ff ff ff       	call   c000e3ec <Timer::~Timer()>
c000e41f:	83 c4 10             	add    esp,0x10
c000e422:	83 ec 08             	sub    esp,0x8
c000e425:	68 5c 01 00 00       	push   0x15c
c000e42a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e42e:	e8 d9 c3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e433:	83 c4 10             	add    esp,0x10
c000e436:	83 c4 0c             	add    esp,0xc
c000e439:	c3                   	ret    

c000e43a <Timer::read()>:
c000e43a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e43e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e444:	c3                   	ret    

c000e445 <setupTimer(int)>:
c000e445:	53                   	push   ebx
c000e446:	83 ec 14             	sub    esp,0x14
c000e449:	68 5c 01 00 00       	push   0x15c
c000e44e:	e8 80 96 ff ff       	call   c0007ad3 <malloc>
c000e453:	89 04 24             	mov    DWORD PTR [esp],eax
c000e456:	89 c3                	mov    ebx,eax
c000e458:	e8 6b 0b 01 00       	call   c001efc8 <PIT::PIT()>
c000e45d:	58                   	pop    eax
c000e45e:	5a                   	pop    edx
c000e45f:	53                   	push   ebx
c000e460:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000e466:	e8 a9 e5 ff ff       	call   c000ca14 <Device::addChild(Device*)>
c000e46b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e46d:	6a 00                	push   0x0
c000e46f:	6a 00                	push   0x0
c000e471:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e475:	53                   	push   ebx
c000e476:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e479:	83 c4 28             	add    esp,0x28
c000e47c:	89 d8                	mov    eax,ebx
c000e47e:	5b                   	pop    ebx
c000e47f:	c3                   	ret    

c000e480 <timerHandler(unsigned int)>:
c000e480:	56                   	push   esi
c000e481:	53                   	push   ebx
c000e482:	51                   	push   ecx
c000e483:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e487:	01 05 ec b8 02 c0    	add    DWORD PTR ds:0xc002b8ec,eax
c000e48d:	80 3d bd 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebd,0x0
c000e494:	0f 84 4a 01 00 00    	je     c000e5e4 <timerHandler(unsigned int)+0x164>
c000e49a:	fa                   	cli    
c000e49b:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4a9:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c000e4af:	e8 7c 18 01 00       	call   c001fd30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e4b4:	83 c4 10             	add    esp,0x10
c000e4b7:	84 c0                	test   al,al
c000e4b9:	0f 85 a1 00 00 00    	jne    c000e560 <timerHandler(unsigned int)+0xe0>
c000e4bf:	83 ec 0c             	sub    esp,0xc
c000e4c2:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4c7:	e8 80 18 01 00       	call   c001fd4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e4cc:	83 c4 10             	add    esp,0x10
c000e4cf:	89 c6                	mov    esi,eax
c000e4d1:	8d 76 00             	lea    esi,[esi+0x0]
c000e4d4:	83 ec 0c             	sub    esp,0xc
c000e4d7:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4dc:	e8 6b 18 01 00       	call   c001fd4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e4e1:	c7 04 24 d8 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6d8
c000e4e8:	89 c3                	mov    ebx,eax
c000e4ea:	e8 65 18 01 00       	call   c001fd54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e4ef:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e4f2:	83 c4 10             	add    esp,0x10
c000e4f5:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c000e4fb:	77 23                	ja     c000e520 <timerHandler(unsigned int)+0xa0>
c000e4fd:	83 ec 0c             	sub    esp,0xc
c000e500:	53                   	push   ebx
c000e501:	e8 96 80 00 00       	call   c001659c <unblockTask(ThreadControlBlock*)>
c000e506:	83 c4 10             	add    esp,0x10
c000e509:	39 de                	cmp    esi,ebx
c000e50b:	75 27                	jne    c000e534 <timerHandler(unsigned int)+0xb4>
c000e50d:	83 ec 0c             	sub    esp,0xc
c000e510:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e515:	e8 32 18 01 00       	call   c001fd4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e51a:	89 c6                	mov    esi,eax
c000e51c:	eb 12                	jmp    c000e530 <timerHandler(unsigned int)+0xb0>
c000e51e:	66 90                	xchg   ax,ax
c000e520:	52                   	push   edx
c000e521:	52                   	push   edx
c000e522:	53                   	push   ebx
c000e523:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e528:	e8 e3 18 01 00       	call   c001fe10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e52d:	8d 76 00             	lea    esi,[esi+0x0]
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	90                   	nop
c000e534:	83 ec 0c             	sub    esp,0xc
c000e537:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e53c:	e8 ef 17 01 00       	call   c001fd30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e541:	83 c4 10             	add    esp,0x10
c000e544:	84 c0                	test   al,al
c000e546:	75 18                	jne    c000e560 <timerHandler(unsigned int)+0xe0>
c000e548:	83 ec 0c             	sub    esp,0xc
c000e54b:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e550:	e8 f7 17 01 00       	call   c001fd4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e555:	83 c4 10             	add    esp,0x10
c000e558:	39 f0                	cmp    eax,esi
c000e55a:	0f 85 74 ff ff ff    	jne    c000e4d4 <timerHandler(unsigned int)+0x54>
c000e560:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e565:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e569:	74 41                	je     c000e5ac <timerHandler(unsigned int)+0x12c>
c000e56b:	80 3d bc 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebc,0x0
c000e572:	74 38                	je     c000e5ac <timerHandler(unsigned int)+0x12c>
c000e574:	fa                   	cli    
c000e575:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e57b:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c000e580:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e586:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e589:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e58f:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e592:	72 08                	jb     c000e59c <timerHandler(unsigned int)+0x11c>
c000e594:	e8 0b 7b 00 00       	call   c00160a4 <schedule()>
c000e599:	8d 76 00             	lea    esi,[esi+0x0]
c000e59c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e5a1:	48                   	dec    eax
c000e5a2:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e5a7:	75 03                	jne    c000e5ac <timerHandler(unsigned int)+0x12c>
c000e5a9:	fb                   	sti    
c000e5aa:	66 90                	xchg   ax,ax
c000e5ac:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000e5b1:	48                   	dec    eax
c000e5b2:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000e5b7:	75 1b                	jne    c000e5d4 <timerHandler(unsigned int)+0x154>
c000e5b9:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c000e5c0:	74 12                	je     c000e5d4 <timerHandler(unsigned int)+0x154>
c000e5c2:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000e5cc:	e8 d3 7a 00 00       	call   c00160a4 <schedule()>
c000e5d1:	8d 76 00             	lea    esi,[esi+0x0]
c000e5d4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e5d9:	48                   	dec    eax
c000e5da:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e5df:	75 03                	jne    c000e5e4 <timerHandler(unsigned int)+0x164>
c000e5e1:	fb                   	sti    
c000e5e2:	66 90                	xchg   ax,ax
c000e5e4:	58                   	pop    eax
c000e5e5:	5b                   	pop    ebx
c000e5e6:	5e                   	pop    esi
c000e5e7:	c3                   	ret    

c000e5e8 <VCache::VCache(PhysicalDisk*)>:
c000e5e8:	53                   	push   ebx
c000e5e9:	83 ec 18             	sub    esp,0x18
c000e5ec:	ba e0 1e 02 c0       	mov    edx,0xc0021ee0
c000e5f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5f5:	89 10                	mov    DWORD PTR [eax],edx
c000e5f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5fb:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e602:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e606:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e60d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e611:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e618:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e61f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e623:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e62a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e631:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e635:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e63c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e640:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e644:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e648:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e64f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e656:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e65a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e65e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e662:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e666:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e66a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e66e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e672:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e679:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e681:	83 ec 0c             	sub    esp,0xc
c000e684:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e688:	e8 46 94 ff ff       	call   c0007ad3 <malloc>
c000e68d:	83 c4 10             	add    esp,0x10
c000e690:	89 c3                	mov    ebx,eax
c000e692:	83 ec 0c             	sub    esp,0xc
c000e695:	53                   	push   ebx
c000e696:	e8 a9 77 00 00       	call   c0015e44 <Mutex::Mutex()>
c000e69b:	83 c4 10             	add    esp,0x10
c000e69e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6a2:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e6a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6a9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e6ad:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e6b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6b4:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e6bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e6bf:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e6c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6c9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e6cc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e6d0:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e6d6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e6dc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e6e0:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e6e3:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e6e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6ea:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e6ee:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e6f2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e6f8:	05 00 02 00 00       	add    eax,0x200
c000e6fd:	c1 e0 03             	shl    eax,0x3
c000e700:	83 ec 0c             	sub    esp,0xc
c000e703:	50                   	push   eax
c000e704:	e8 ca 93 ff ff       	call   c0007ad3 <malloc>
c000e709:	83 c4 10             	add    esp,0x10
c000e70c:	89 c2                	mov    edx,eax
c000e70e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e712:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e715:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e719:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e720:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e724:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e728:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e72c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e732:	89 d0                	mov    eax,edx
c000e734:	c1 e0 02             	shl    eax,0x2
c000e737:	01 d0                	add    eax,edx
c000e739:	c1 e0 04             	shl    eax,0x4
c000e73c:	83 ec 0c             	sub    esp,0xc
c000e73f:	50                   	push   eax
c000e740:	e8 8e 93 ff ff       	call   c0007ad3 <malloc>
c000e745:	83 c4 10             	add    esp,0x10
c000e748:	89 c2                	mov    edx,eax
c000e74a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e74e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e751:	90                   	nop
c000e752:	83 c4 18             	add    esp,0x18
c000e755:	5b                   	pop    ebx
c000e756:	c3                   	ret    
c000e757:	90                   	nop

c000e758 <VCache::invalidateReadBuffer()>:
c000e758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e75c:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e762:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e766:	c3                   	ret    
c000e767:	90                   	nop

c000e768 <VCache::writeWriteBuffer()>:
c000e768:	53                   	push   ebx
c000e769:	83 ec 08             	sub    esp,0x8
c000e76c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e770:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e774:	74 1e                	je     c000e794 <VCache::writeWriteBuffer()+0x2c>
c000e776:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e779:	83 ec 0c             	sub    esp,0xc
c000e77c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e77e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e781:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e784:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e787:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e78a:	50                   	push   eax
c000e78b:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e78e:	83 c4 20             	add    esp,0x20
c000e791:	8d 76 00             	lea    esi,[esi+0x0]
c000e794:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e79b:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e7a2:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e7a6:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e7ad:	83 c4 08             	add    esp,0x8
c000e7b0:	5b                   	pop    ebx
c000e7b1:	c3                   	ret    
c000e7b2:	66 90                	xchg   ax,ax

c000e7b4 <VCache::~VCache()>:
c000e7b4:	83 ec 0c             	sub    esp,0xc
c000e7b7:	ba e0 1e 02 c0       	mov    edx,0xc0021ee0
c000e7bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c0:	89 10                	mov    DWORD PTR [eax],edx
c000e7c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c6:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e7c9:	0f b6 c0             	movzx  eax,al
c000e7cc:	85 c0                	test   eax,eax
c000e7ce:	74 10                	je     c000e7e0 <VCache::~VCache()+0x2c>
c000e7d0:	83 ec 0c             	sub    esp,0xc
c000e7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7d7:	e8 8c ff ff ff       	call   c000e768 <VCache::writeWriteBuffer()>
c000e7dc:	83 c4 10             	add    esp,0x10
c000e7df:	90                   	nop
c000e7e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e7e7:	83 ec 0c             	sub    esp,0xc
c000e7ea:	50                   	push   eax
c000e7eb:	e8 f3 92 ff ff       	call   c0007ae3 <free>
c000e7f0:	83 c4 10             	add    esp,0x10
c000e7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e7fa:	83 ec 0c             	sub    esp,0xc
c000e7fd:	50                   	push   eax
c000e7fe:	e8 e0 92 ff ff       	call   c0007ae3 <free>
c000e803:	83 c4 10             	add    esp,0x10
c000e806:	90                   	nop
c000e807:	83 c4 0c             	add    esp,0xc
c000e80a:	c3                   	ret    
c000e80b:	90                   	nop

c000e80c <VCache::~VCache()>:
c000e80c:	83 ec 0c             	sub    esp,0xc
c000e80f:	83 ec 0c             	sub    esp,0xc
c000e812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e816:	e8 99 ff ff ff       	call   c000e7b4 <VCache::~VCache()>
c000e81b:	83 c4 10             	add    esp,0x10
c000e81e:	83 ec 08             	sub    esp,0x8
c000e821:	6a 44                	push   0x44
c000e823:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e827:	e8 e0 bf ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e82c:	83 c4 10             	add    esp,0x10
c000e82f:	83 c4 0c             	add    esp,0xc
c000e832:	c3                   	ret    
c000e833:	90                   	nop

c000e834 <VCache::write(unsigned long long, int, void*)>:
c000e834:	55                   	push   ebp
c000e835:	57                   	push   edi
c000e836:	56                   	push   esi
c000e837:	53                   	push   ebx
c000e838:	83 ec 1c             	sub    esp,0x1c
c000e83b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e83f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e843:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e847:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e84b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e84f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e853:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e857:	74 0f                	je     c000e868 <VCache::write(unsigned long long, int, void*)+0x34>
c000e859:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e85d:	53                   	push   ebx
c000e85e:	e8 f5 fe ff ff       	call   c000e758 <VCache::invalidateReadBuffer()>
c000e863:	58                   	pop    eax
c000e864:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e868:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e86c:	74 66                	je     c000e8d4 <VCache::write(unsigned long long, int, void*)+0xa0>
c000e86e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e871:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e875:	99                   	cdq    
c000e876:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e879:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e87c:	89 c6                	mov    esi,eax
c000e87e:	31 ce                	xor    esi,ecx
c000e880:	89 d0                	mov    eax,edx
c000e882:	31 e8                	xor    eax,ebp
c000e884:	09 c6                	or     esi,eax
c000e886:	75 38                	jne    c000e8c0 <VCache::write(unsigned long long, int, void*)+0x8c>
c000e888:	83 ff 01             	cmp    edi,0x1
c000e88b:	75 33                	jne    c000e8c0 <VCache::write(unsigned long long, int, void*)+0x8c>
c000e88d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e890:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e894:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e898:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e89e:	0f af f9             	imul   edi,ecx
c000e8a1:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000e8a4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e8a6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e8a9:	40                   	inc    eax
c000e8aa:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e8ad:	83 f8 50             	cmp    eax,0x50
c000e8b0:	75 72                	jne    c000e924 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e8b2:	83 ec 0c             	sub    esp,0xc
c000e8b5:	53                   	push   ebx
c000e8b6:	e8 ad fe ff ff       	call   c000e768 <VCache::writeWriteBuffer()>
c000e8bb:	83 c4 10             	add    esp,0x10
c000e8be:	eb 64                	jmp    c000e924 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e8c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e8c4:	83 ec 0c             	sub    esp,0xc
c000e8c7:	53                   	push   ebx
c000e8c8:	e8 9b fe ff ff       	call   c000e768 <VCache::writeWriteBuffer()>
c000e8cd:	83 c4 10             	add    esp,0x10
c000e8d0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e8d4:	83 ff 4f             	cmp    edi,0x4f
c000e8d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e8da:	7f 20                	jg     c000e8fc <VCache::write(unsigned long long, int, void*)+0xc8>
c000e8dc:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e8df:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e8e3:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c000e8e6:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e8e9:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e8ec:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e8f0:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e8f6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e8f8:	eb 2a                	jmp    c000e924 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e8fa:	66 90                	xchg   ax,ax
c000e8fc:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e900:	8b 10                	mov    edx,DWORD PTR [eax]
c000e902:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e906:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e90a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e90e:	89 4c 24 34          	mov    DWORD PTR [esp+0x34],ecx
c000e912:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e916:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e919:	83 c4 1c             	add    esp,0x1c
c000e91c:	5b                   	pop    ebx
c000e91d:	5e                   	pop    esi
c000e91e:	5f                   	pop    edi
c000e91f:	5d                   	pop    ebp
c000e920:	ff e0                	jmp    eax
c000e922:	66 90                	xchg   ax,ax
c000e924:	83 c4 1c             	add    esp,0x1c
c000e927:	31 c0                	xor    eax,eax
c000e929:	5b                   	pop    ebx
c000e92a:	5e                   	pop    esi
c000e92b:	5f                   	pop    edi
c000e92c:	5d                   	pop    ebp
c000e92d:	c3                   	ret    

c000e92e <VCache::read(unsigned long long, int, void*)>:
c000e92e:	55                   	push   ebp
c000e92f:	57                   	push   edi
c000e930:	56                   	push   esi
c000e931:	53                   	push   ebx
c000e932:	83 ec 1c             	sub    esp,0x1c
c000e935:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e939:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e93d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e941:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e945:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e949:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e94d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e951:	74 0d                	je     c000e960 <VCache::read(unsigned long long, int, void*)+0x32>
c000e953:	83 ec 0c             	sub    esp,0xc
c000e956:	57                   	push   edi
c000e957:	e8 0c fe ff ff       	call   c000e768 <VCache::writeWriteBuffer()>
c000e95c:	83 c4 10             	add    esp,0x10
c000e95f:	90                   	nop
c000e960:	83 fd 01             	cmp    ebp,0x1
c000e963:	0f 85 93 00 00 00    	jne    c000e9fc <VCache::read(unsigned long long, int, void*)+0xce>
c000e969:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e96c:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e973:	89 04 24             	mov    DWORD PTR [esp],eax
c000e976:	0f 85 80 00 00 00    	jne    c000e9fc <VCache::read(unsigned long long, int, void*)+0xce>
c000e97c:	8b 4f 40             	mov    ecx,DWORD PTR [edi+0x40]
c000e97f:	89 cd                	mov    ebp,ecx
c000e981:	f7 dd                	neg    ebp
c000e983:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000e987:	89 e8                	mov    eax,ebp
c000e989:	21 dd                	and    ebp,ebx
c000e98b:	c1 f8 1f             	sar    eax,0x1f
c000e98e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e992:	89 e8                	mov    eax,ebp
c000e994:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000e998:	21 f5                	and    ebp,esi
c000e99a:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e99e:	89 ea                	mov    edx,ebp
c000e9a0:	74 2e                	je     c000e9d0 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e9a2:	39 6f 34             	cmp    DWORD PTR [edi+0x34],ebp
c000e9a5:	75 29                	jne    c000e9d0 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e9a7:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e9aa:	75 24                	jne    c000e9d0 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e9ac:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e9af:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e9b5:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e9b8:	8d 70 ff             	lea    esi,[eax-0x1]
c000e9bb:	21 f3                	and    ebx,esi
c000e9bd:	0f af d9             	imul   ebx,ecx
c000e9c0:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e9c3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e9c7:	89 de                	mov    esi,ebx
c000e9c9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e9cb:	31 c0                	xor    eax,eax
c000e9cd:	eb 61                	jmp    c000ea30 <VCache::read(unsigned long long, int, void*)+0x102>
c000e9cf:	90                   	nop
c000e9d0:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e9d4:	83 ec 0c             	sub    esp,0xc
c000e9d7:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e9da:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e9de:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e9e1:	8b 36                	mov    esi,DWORD PTR [esi]
c000e9e3:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e9e6:	51                   	push   ecx
c000e9e7:	52                   	push   edx
c000e9e8:	50                   	push   eax
c000e9e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9ed:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000e9f0:	83 c4 20             	add    esp,0x20
c000e9f3:	85 c0                	test   eax,eax
c000e9f5:	75 39                	jne    c000ea30 <VCache::read(unsigned long long, int, void*)+0x102>
c000e9f7:	eb b3                	jmp    c000e9ac <VCache::read(unsigned long long, int, void*)+0x7e>
c000e9f9:	8d 76 00             	lea    esi,[esi+0x0]
c000e9fc:	83 ec 0c             	sub    esp,0xc
c000e9ff:	57                   	push   edi
c000ea00:	e8 53 fd ff ff       	call   c000e758 <VCache::invalidateReadBuffer()>
c000ea05:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ea08:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ea0c:	8b 10                	mov    edx,DWORD PTR [eax]
c000ea0e:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000ea12:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000ea16:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000ea1a:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000ea1e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ea22:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000ea25:	83 c4 2c             	add    esp,0x2c
c000ea28:	5b                   	pop    ebx
c000ea29:	5e                   	pop    esi
c000ea2a:	5f                   	pop    edi
c000ea2b:	5d                   	pop    ebp
c000ea2c:	ff e0                	jmp    eax
c000ea2e:	66 90                	xchg   ax,ax
c000ea30:	83 c4 1c             	add    esp,0x1c
c000ea33:	5b                   	pop    ebx
c000ea34:	5e                   	pop    esi
c000ea35:	5f                   	pop    edi
c000ea36:	5d                   	pop    ebp
c000ea37:	c3                   	ret    

c000ea38 <Video::putrect(int, int, int, int, unsigned int)>:
c000ea38:	55                   	push   ebp
c000ea39:	57                   	push   edi
c000ea3a:	56                   	push   esi
c000ea3b:	53                   	push   ebx
c000ea3c:	83 ec 1c             	sub    esp,0x1c
c000ea3f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ea43:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ea47:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ea4b:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000ea4f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ea53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ea57:	01 df                	add    edi,ebx
c000ea59:	39 fb                	cmp    ebx,edi
c000ea5b:	7d 1f                	jge    c000ea7c <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000ea5d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ea61:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000ea65:	7d 12                	jge    c000ea79 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000ea67:	8b 16                	mov    edx,DWORD PTR [esi]
c000ea69:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ea6d:	53                   	push   ebx
c000ea6e:	55                   	push   ebp
c000ea6f:	45                   	inc    ebp
c000ea70:	56                   	push   esi
c000ea71:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ea74:	83 c4 10             	add    esp,0x10
c000ea77:	eb e8                	jmp    c000ea61 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000ea79:	43                   	inc    ebx
c000ea7a:	eb dd                	jmp    c000ea59 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000ea7c:	83 c4 1c             	add    esp,0x1c
c000ea7f:	5b                   	pop    ebx
c000ea80:	5e                   	pop    esi
c000ea81:	5f                   	pop    edi
c000ea82:	5d                   	pop    ebp
c000ea83:	c3                   	ret    

c000ea84 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000ea84:	55                   	push   ebp
c000ea85:	57                   	push   edi
c000ea86:	31 ff                	xor    edi,edi
c000ea88:	56                   	push   esi
c000ea89:	53                   	push   ebx
c000ea8a:	83 ec 1c             	sub    esp,0x1c
c000ea8d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000ea91:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ea95:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000ea9c:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000eaa1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000eaa5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000eaa9:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000eaad:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000eab0:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000eab4:	01 f9                	add    ecx,edi
c000eab6:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000eaba:	7d 2f                	jge    c000eaeb <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000eabc:	31 f6                	xor    esi,esi
c000eabe:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000eac2:	01 f2                	add    edx,esi
c000eac4:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000eac8:	7d 1a                	jge    c000eae4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000eaca:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000eacd:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000ead0:	46                   	inc    esi
c000ead1:	51                   	push   ecx
c000ead2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ead6:	52                   	push   edx
c000ead7:	55                   	push   ebp
c000ead8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eadb:	83 c4 10             	add    esp,0x10
c000eade:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eae2:	eb da                	jmp    c000eabe <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000eae4:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000eae8:	47                   	inc    edi
c000eae9:	eb c5                	jmp    c000eab0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000eaeb:	83 c4 1c             	add    esp,0x1c
c000eaee:	5b                   	pop    ebx
c000eaef:	5e                   	pop    esi
c000eaf0:	5f                   	pop    edi
c000eaf1:	5d                   	pop    ebp
c000eaf2:	c3                   	ret    
c000eaf3:	90                   	nop

c000eaf4 <Video::blit(unsigned int*, int, int, int, int)>:
c000eaf4:	55                   	push   ebp
c000eaf5:	ba 00 00 00 00       	mov    edx,0x0
c000eafa:	57                   	push   edi
c000eafb:	56                   	push   esi
c000eafc:	53                   	push   ebx
c000eafd:	83 ec 1c             	sub    esp,0x1c
c000eb00:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eb04:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000eb08:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000eb0c:	85 c0                	test   eax,eax
c000eb0e:	0f 49 d0             	cmovns edx,eax
c000eb11:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000eb18:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000eb1c:	89 eb                	mov    ebx,ebp
c000eb1e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000eb22:	01 ea                	add    edx,ebp
c000eb24:	39 da                	cmp    edx,ebx
c000eb26:	7e 54                	jle    c000eb7c <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000eb28:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000eb2e:	7c 4c                	jl     c000eb7c <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000eb30:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000eb34:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000eb38:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000eb3c:	01 c1                	add    ecx,eax
c000eb3e:	39 f9                	cmp    ecx,edi
c000eb40:	7e 2f                	jle    c000eb71 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000eb42:	83 c2 04             	add    edx,0x4
c000eb45:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000eb4b:	7c 21                	jl     c000eb6e <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000eb4d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000eb51:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000eb53:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000eb56:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000eb5a:	55                   	push   ebp
c000eb5b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eb5f:	56                   	push   esi
c000eb60:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000eb63:	83 c4 10             	add    esp,0x10
c000eb66:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eb6a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eb6e:	47                   	inc    edi
c000eb6f:	eb c7                	jmp    c000eb38 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000eb71:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000eb75:	43                   	inc    ebx
c000eb76:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000eb7a:	eb a2                	jmp    c000eb1e <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000eb7c:	83 c4 1c             	add    esp,0x1c
c000eb7f:	5b                   	pop    ebx
c000eb80:	5e                   	pop    esi
c000eb81:	5f                   	pop    edi
c000eb82:	5d                   	pop    ebp
c000eb83:	c3                   	ret    

c000eb84 <Video::clearScreen(unsigned int)>:
c000eb84:	57                   	push   edi
c000eb85:	56                   	push   esi
c000eb86:	53                   	push   ebx
c000eb87:	31 db                	xor    ebx,ebx
c000eb89:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eb8d:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000eb93:	7e 1f                	jle    c000ebb4 <Video::clearScreen(unsigned int)+0x30>
c000eb95:	31 ff                	xor    edi,edi
c000eb97:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000eb9d:	7e 12                	jle    c000ebb1 <Video::clearScreen(unsigned int)+0x2d>
c000eb9f:	8b 06                	mov    eax,DWORD PTR [esi]
c000eba1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000eba5:	53                   	push   ebx
c000eba6:	57                   	push   edi
c000eba7:	47                   	inc    edi
c000eba8:	56                   	push   esi
c000eba9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ebac:	83 c4 10             	add    esp,0x10
c000ebaf:	eb e6                	jmp    c000eb97 <Video::clearScreen(unsigned int)+0x13>
c000ebb1:	43                   	inc    ebx
c000ebb2:	eb d9                	jmp    c000eb8d <Video::clearScreen(unsigned int)+0x9>
c000ebb4:	5b                   	pop    ebx
c000ebb5:	5e                   	pop    esi
c000ebb6:	5f                   	pop    edi
c000ebb7:	c3                   	ret    

c000ebb8 <Video::putpixel(int, int, unsigned int)>:
c000ebb8:	c7 44 24 04 e8 1e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021ee8
c000ebc0:	e9 16 2a 00 00       	jmp    c00115db <KePanic(char const*)>
c000ebc5:	90                   	nop

c000ebc6 <Video::readPixelApprox(int, int)>:
c000ebc6:	83 ec 18             	sub    esp,0x18
c000ebc9:	68 09 1f 02 c0       	push   0xc0021f09
c000ebce:	e8 08 2a 00 00       	call   c00115db <KePanic(char const*)>
c000ebd3:	31 c0                	xor    eax,eax
c000ebd5:	83 c4 1c             	add    esp,0x1c
c000ebd8:	c3                   	ret    
c000ebd9:	90                   	nop

c000ebda <Video::Video(char const*)>:
c000ebda:	83 ec 0c             	sub    esp,0xc
c000ebdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebe1:	83 ec 08             	sub    esp,0x8
c000ebe4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebe8:	50                   	push   eax
c000ebe9:	e8 be df ff ff       	call   c000cbac <Device::Device(char const*)>
c000ebee:	83 c4 10             	add    esp,0x10
c000ebf1:	ba 84 1f 02 c0       	mov    edx,0xc0021f84
c000ebf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebfa:	89 10                	mov    DWORD PTR [eax],edx
c000ebfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec00:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000ec0a:	90                   	nop
c000ec0b:	83 c4 0c             	add    esp,0xc
c000ec0e:	c3                   	ret    
c000ec0f:	90                   	nop

c000ec10 <Video::~Video()>:
c000ec10:	83 ec 0c             	sub    esp,0xc
c000ec13:	ba 84 1f 02 c0       	mov    edx,0xc0021f84
c000ec18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec1c:	89 10                	mov    DWORD PTR [eax],edx
c000ec1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec22:	83 ec 0c             	sub    esp,0xc
c000ec25:	50                   	push   eax
c000ec26:	e8 eb dc ff ff       	call   c000c916 <Device::~Device()>
c000ec2b:	83 c4 10             	add    esp,0x10
c000ec2e:	90                   	nop
c000ec2f:	83 c4 0c             	add    esp,0xc
c000ec32:	c3                   	ret    
c000ec33:	90                   	nop

c000ec34 <Video::~Video()>:
c000ec34:	83 ec 0c             	sub    esp,0xc
c000ec37:	83 ec 0c             	sub    esp,0xc
c000ec3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec3e:	e8 cd ff ff ff       	call   c000ec10 <Video::~Video()>
c000ec43:	83 c4 10             	add    esp,0x10
c000ec46:	83 ec 08             	sub    esp,0x8
c000ec49:	68 64 01 00 00       	push   0x164
c000ec4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec52:	e8 b5 bb ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000ec57:	83 c4 10             	add    esp,0x10
c000ec5a:	83 c4 0c             	add    esp,0xc
c000ec5d:	c3                   	ret    

c000ec5e <Video::isMonochrome()>:
c000ec5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec62:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000ec68:	c3                   	ret    
c000ec69:	90                   	nop

c000ec6a <Video::getWidth()>:
c000ec6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec6e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ec74:	c3                   	ret    
c000ec75:	90                   	nop

c000ec76 <Video::getHeight()>:
c000ec76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec7a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ec80:	c3                   	ret    
c000ec81:	90                   	nop

c000ec82 <Video::drawCursor(int, int, unsigned int*, int)>:
c000ec82:	55                   	push   ebp
c000ec83:	57                   	push   edi
c000ec84:	56                   	push   esi
c000ec85:	53                   	push   ebx
c000ec86:	83 ec 2c             	sub    esp,0x2c
c000ec89:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ec8d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ec91:	83 f8 01             	cmp    eax,0x1
c000ec94:	19 c9                	sbb    ecx,ecx
c000ec96:	31 db                	xor    ebx,ebx
c000ec98:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ec9c:	89 ce                	mov    esi,ecx
c000ec9e:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000eca6:	f7 d6                	not    esi
c000eca8:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000ecae:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ecb2:	01 d8                	add    eax,ebx
c000ecb4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ecb8:	57                   	push   edi
c000ecb9:	e8 b8 ff ff ff       	call   c000ec76 <Video::getHeight()>
c000ecbe:	59                   	pop    ecx
c000ecbf:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ecc3:	7e 70                	jle    c000ed35 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000ecc5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ecc9:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000eccd:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000ecd0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ecd4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ecd8:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000ecdf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ece3:	89 e8                	mov    eax,ebp
c000ece5:	83 c0 20             	add    eax,0x20
c000ece8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ecec:	57                   	push   edi
c000eced:	e8 78 ff ff ff       	call   c000ec6a <Video::getWidth()>
c000ecf2:	5a                   	pop    edx
c000ecf3:	39 c5                	cmp    ebp,eax
c000ecf5:	7d 34                	jge    c000ed2b <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000ecf7:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000ecfc:	74 05                	je     c000ed03 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000ecfe:	8b 07                	mov    eax,DWORD PTR [edi]
c000ed00:	56                   	push   esi
c000ed01:	eb 0d                	jmp    c000ed10 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000ed03:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000ed08:	74 12                	je     c000ed1c <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000ed0a:	8b 07                	mov    eax,DWORD PTR [edi]
c000ed0c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ed10:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ed14:	55                   	push   ebp
c000ed15:	57                   	push   edi
c000ed16:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ed19:	83 c4 10             	add    esp,0x10
c000ed1c:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000ed20:	45                   	inc    ebp
c000ed21:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000ed25:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000ed29:	75 c1                	jne    c000ecec <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000ed2b:	43                   	inc    ebx
c000ed2c:	83 fb 20             	cmp    ebx,0x20
c000ed2f:	0f 85 79 ff ff ff    	jne    c000ecae <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000ed35:	83 c4 2c             	add    esp,0x2c
c000ed38:	5b                   	pop    ebx
c000ed39:	5e                   	pop    esi
c000ed3a:	5f                   	pop    edi
c000ed3b:	5d                   	pop    ebp
c000ed3c:	c3                   	ret    
c000ed3d:	90                   	nop

c000ed3e <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000ed3e:	55                   	push   ebp
c000ed3f:	57                   	push   edi
c000ed40:	56                   	push   esi
c000ed41:	53                   	push   ebx
c000ed42:	83 ec 28             	sub    esp,0x28
c000ed45:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ed49:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c000ed4d:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000ed51:	0f b6 73 0f          	movzx  esi,BYTE PTR [ebx+0xf]
c000ed55:	c1 e7 08             	shl    edi,0x8
c000ed58:	01 c7                	add    edi,eax
c000ed5a:	0f b6 43 0e          	movzx  eax,BYTE PTR [ebx+0xe]
c000ed5e:	c1 e6 08             	shl    esi,0x8
c000ed61:	01 f0                	add    eax,esi
c000ed63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ed67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed6b:	0f af c7             	imul   eax,edi
c000ed6e:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000ed75:	50                   	push   eax
c000ed76:	e8 58 8d ff ff       	call   c0007ad3 <malloc>
c000ed7b:	83 c4 10             	add    esp,0x10
c000ed7e:	85 c0                	test   eax,eax
c000ed80:	89 c5                	mov    ebp,eax
c000ed82:	75 10                	jne    c000ed94 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000ed84:	83 ec 0c             	sub    esp,0xc
c000ed87:	68 34 1f 02 c0       	push   0xc0021f34
c000ed8c:	e8 4a 28 00 00       	call   c00115db <KePanic(char const*)>
c000ed91:	83 c4 10             	add    esp,0x10
c000ed94:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000ed98:	ba 12 00 00 00       	mov    edx,0x12
c000ed9d:	85 c0                	test   eax,eax
c000ed9f:	74 11                	je     c000edb2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000eda1:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000eda5:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000eda9:	c1 fa 03             	sar    edx,0x3
c000edac:	0f af d1             	imul   edx,ecx
c000edaf:	83 c2 12             	add    edx,0x12
c000edb2:	85 ff                	test   edi,edi
c000edb4:	74 06                	je     c000edbc <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000edb6:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000edba:	75 12                	jne    c000edce <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000edbc:	83 ec 0c             	sub    esp,0xc
c000edbf:	68 44 1f 02 c0       	push   0xc0021f44
c000edc4:	e8 41 bb ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000edc9:	e9 b8 00 00 00       	jmp    c000ee86 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000edce:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000edd2:	83 f9 02             	cmp    ecx,0x2
c000edd5:	0f 85 96 00 00 00    	jne    c000ee71 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000eddb:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000ede0:	75 0e                	jne    c000edf0 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ede2:	85 c0                	test   eax,eax
c000ede4:	75 0a                	jne    c000edf0 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ede6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000ede9:	83 e8 18             	sub    eax,0x18
c000edec:	a8 f7                	test   al,0xf7
c000edee:	74 0a                	je     c000edfa <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000edf0:	83 ec 0c             	sub    esp,0xc
c000edf3:	68 59 1f 02 c0       	push   0xc0021f59
c000edf8:	eb 7f                	jmp    c000ee79 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000edfa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ee02:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000ee0a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000ee0e:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000ee12:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ee1a:	75 0c                	jne    c000ee28 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000ee1c:	0f b6 4c 13 03       	movzx  ecx,BYTE PTR [ebx+edx*1+0x3]
c000ee21:	c1 e1 18             	shl    ecx,0x18
c000ee24:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ee28:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000ee2d:	46                   	inc    esi
c000ee2e:	89 c8                	mov    eax,ecx
c000ee30:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000ee35:	c1 e0 10             	shl    eax,0x10
c000ee38:	c1 e1 08             	shl    ecx,0x8
c000ee3b:	09 c1                	or     ecx,eax
c000ee3d:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000ee41:	09 c1                	or     ecx,eax
c000ee43:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000ee47:	89 4c b5 fc          	mov    DWORD PTR [ebp+esi*4-0x4],ecx
c000ee4b:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000ee4f:	c1 f8 03             	sar    eax,0x3
c000ee52:	01 c2                	add    edx,eax
c000ee54:	89 f0                	mov    eax,esi
c000ee56:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000ee5a:	39 c7                	cmp    edi,eax
c000ee5c:	7f b0                	jg     c000ee0e <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000ee5e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ee62:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ee66:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000ee69:	7e 22                	jle    c000ee8d <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000ee6b:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000ee6f:	eb 99                	jmp    c000ee0a <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000ee71:	50                   	push   eax
c000ee72:	50                   	push   eax
c000ee73:	51                   	push   ecx
c000ee74:	68 67 1f 02 c0       	push   0xc0021f67
c000ee79:	e8 8c ba ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ee7e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ee81:	e8 5d 8c ff ff       	call   c0007ae3 <free>
c000ee86:	83 c4 10             	add    esp,0x10
c000ee89:	31 ed                	xor    ebp,ebp
c000ee8b:	eb 0f                	jmp    c000ee9c <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000ee8d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ee91:	89 38                	mov    DWORD PTR [eax],edi
c000ee93:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ee97:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000ee9a:	89 38                	mov    DWORD PTR [eax],edi
c000ee9c:	83 c4 1c             	add    esp,0x1c
c000ee9f:	89 e8                	mov    eax,ebp
c000eea1:	5b                   	pop    ebx
c000eea2:	5e                   	pop    esi
c000eea3:	5f                   	pop    edi
c000eea4:	5d                   	pop    ebp
c000eea5:	c3                   	ret    

c000eea6 <Video::putTGA(int, int, unsigned char*, int)>:
c000eea6:	55                   	push   ebp
c000eea7:	57                   	push   edi
c000eea8:	56                   	push   esi
c000eea9:	53                   	push   ebx
c000eeaa:	83 ec 28             	sub    esp,0x28
c000eead:	8d 44 24 18          	lea    eax,[esp+0x18]
c000eeb1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000eeb5:	50                   	push   eax
c000eeb6:	8d 44 24 18          	lea    eax,[esp+0x18]
c000eeba:	50                   	push   eax
c000eebb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000eebf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000eec3:	57                   	push   edi
c000eec4:	e8 75 fe ff ff       	call   c000ed3e <Video::tgaParse(unsigned char*, int, int*, int*)>
c000eec9:	83 c4 20             	add    esp,0x20
c000eecc:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000eed0:	85 c0                	test   eax,eax
c000eed2:	74 35                	je     c000ef09 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000eed4:	89 c6                	mov    esi,eax
c000eed6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eeda:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000eede:	39 d8                	cmp    eax,ebx
c000eee0:	7e 27                	jle    c000ef09 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000eee2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000eee6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000eeea:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000eeee:	39 e9                	cmp    ecx,ebp
c000eef0:	7e 14                	jle    c000ef06 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000eef2:	83 c6 04             	add    esi,0x4
c000eef5:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000eef7:	ff 76 fc             	push   DWORD PTR [esi-0x4]
c000eefa:	53                   	push   ebx
c000eefb:	55                   	push   ebp
c000eefc:	45                   	inc    ebp
c000eefd:	57                   	push   edi
c000eefe:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000ef01:	83 c4 10             	add    esp,0x10
c000ef04:	eb e0                	jmp    c000eee6 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000ef06:	43                   	inc    ebx
c000ef07:	eb cd                	jmp    c000eed6 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000ef09:	83 c4 1c             	add    esp,0x1c
c000ef0c:	5b                   	pop    ebx
c000ef0d:	5e                   	pop    esi
c000ef0e:	5f                   	pop    edi
c000ef0f:	5d                   	pop    ebp
c000ef10:	c3                   	ret    
c000ef11:	66 90                	xchg   ax,ax
c000ef13:	90                   	nop

c000ef14 <ACPI::close(int, int, void*)>:
c000ef14:	83 ec 1c             	sub    esp,0x1c
c000ef17:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000ef1f:	74 0b                	je     c000ef2c <ACPI::close(int, int, void*)+0x18>
c000ef21:	b8 00 00 00 00       	mov    eax,0x0
c000ef26:	e9 99 00 00 00       	jmp    c000efc4 <ACPI::close(int, int, void*)+0xb0>
c000ef2b:	90                   	nop
c000ef2c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000ef31:	75 29                	jne    c000ef5c <ACPI::close(int, int, void*)+0x48>
c000ef33:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ef38:	85 c0                	test   eax,eax
c000ef3a:	74 08                	je     c000ef44 <ACPI::close(int, int, void*)+0x30>
c000ef3c:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ef41:	ff d0                	call   eax
c000ef43:	90                   	nop
c000ef44:	83 ec 0c             	sub    esp,0xc
c000ef47:	68 c8 1f 02 c0       	push   0xc0021fc8
c000ef4c:	e8 8a 26 00 00       	call   c00115db <KePanic(char const*)>
c000ef51:	83 c4 10             	add    esp,0x10
c000ef54:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef59:	eb 69                	jmp    c000efc4 <ACPI::close(int, int, void*)+0xb0>
c000ef5b:	90                   	nop
c000ef5c:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000ef61:	75 59                	jne    c000efbc <ACPI::close(int, int, void*)+0xa8>
c000ef63:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000ef68:	85 c0                	test   eax,eax
c000ef6a:	74 08                	je     c000ef74 <ACPI::close(int, int, void*)+0x60>
c000ef6c:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000ef71:	ff d0                	call   eax
c000ef73:	90                   	nop
c000ef74:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000ef79:	8d 76 00             	lea    esi,[esi+0x0]
c000ef7c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ef81:	83 e0 02             	and    eax,0x2
c000ef84:	74 1e                	je     c000efa4 <ACPI::close(int, int, void*)+0x90>
c000ef86:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000ef8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef91:	89 c2                	mov    edx,eax
c000ef93:	ec                   	in     al,dx
c000ef94:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ef98:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000ef9c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000efa0:	eb da                	jmp    c000ef7c <ACPI::close(int, int, void*)+0x68>
c000efa2:	66 90                	xchg   ax,ax
c000efa4:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000efab:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000efb0:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000efb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000efb8:	ee                   	out    dx,al
c000efb9:	8d 76 00             	lea    esi,[esi+0x0]
c000efbc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000efc1:	8d 76 00             	lea    esi,[esi+0x0]
c000efc4:	83 c4 1c             	add    esp,0x1c
c000efc7:	c3                   	ret    

c000efc8 <findRSDP()>:
c000efc8:	83 ec 1c             	sub    esp,0x1c
c000efcb:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000efd0:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000efd6:	83 e0 04             	and    eax,0x4
c000efd9:	0f b6 c0             	movzx  eax,al
c000efdc:	85 c0                	test   eax,eax
c000efde:	75 08                	jne    c000efe8 <findRSDP()+0x20>
c000efe0:	b8 00 00 00 00       	mov    eax,0x0
c000efe5:	eb 75                	jmp    c000f05c <findRSDP()+0x94>
c000efe7:	90                   	nop
c000efe8:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c000efed:	3d ff 07 00 00       	cmp    eax,0x7ff
c000eff2:	7f 1c                	jg     c000f010 <findRSDP()+0x48>
c000eff4:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000eff9:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000efff:	83 e2 fb             	and    edx,0xfffffffb
c000f002:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f008:	b8 00 00 00 00       	mov    eax,0x0
c000f00d:	eb 4d                	jmp    c000f05c <findRSDP()+0x94>
c000f00f:	90                   	nop
c000f010:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000f018:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000f020:	77 32                	ja     c000f054 <findRSDP()+0x8c>
c000f022:	83 ec 04             	sub    esp,0x4
c000f025:	6a 08                	push   0x8
c000f027:	68 63 20 02 c0       	push   0xc0022063
c000f02c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f030:	e8 4b 13 ff ff       	call   c0000380 <memcmp>
c000f035:	83 c4 10             	add    esp,0x10
c000f038:	85 c0                	test   eax,eax
c000f03a:	0f 94 c0             	sete   al
c000f03d:	0f b6 c0             	movzx  eax,al
c000f040:	85 c0                	test   eax,eax
c000f042:	74 08                	je     c000f04c <findRSDP()+0x84>
c000f044:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f048:	eb 12                	jmp    c000f05c <findRSDP()+0x94>
c000f04a:	66 90                	xchg   ax,ax
c000f04c:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000f051:	eb c5                	jmp    c000f018 <findRSDP()+0x50>
c000f053:	90                   	nop
c000f054:	b8 00 00 00 00       	mov    eax,0x0
c000f059:	8d 76 00             	lea    esi,[esi+0x0]
c000f05c:	83 c4 1c             	add    esp,0x1c
c000f05f:	c3                   	ret    

c000f060 <loadACPITables(unsigned char*)>:
c000f060:	57                   	push   edi
c000f061:	56                   	push   esi
c000f062:	53                   	push   ebx
c000f063:	83 ec 60             	sub    esp,0x60
c000f066:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f06b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f071:	83 e0 04             	and    eax,0x4
c000f074:	0f b6 c0             	movzx  eax,al
c000f077:	85 c0                	test   eax,eax
c000f079:	0f 84 41 02 00 00    	je     c000f2c0 <loadACPITables(unsigned char*)+0x260>
c000f07f:	a0 20 bb 02 c0       	mov    al,ds:0xc002bb20
c000f084:	0f b6 c0             	movzx  eax,al
c000f087:	85 c0                	test   eax,eax
c000f089:	74 79                	je     c000f104 <loadACPITables(unsigned char*)+0xa4>
c000f08b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f08f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000f093:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000f097:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f09a:	83 e8 24             	sub    eax,0x24
c000f09d:	c1 e8 03             	shr    eax,0x3
c000f0a0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f0a4:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000f0ac:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f0b0:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000f0b4:	0f 8d ba 00 00 00    	jge    c000f174 <loadACPITables(unsigned char*)+0x114>
c000f0ba:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f0be:	83 c0 24             	add    eax,0x24
c000f0c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f0c5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f0c9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f0cd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f0d1:	c1 e0 03             	shl    eax,0x3
c000f0d4:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000f0d8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f0dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f0df:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0e1:	89 c1                	mov    ecx,eax
c000f0e3:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f0e8:	8d 50 01             	lea    edx,[eax+0x1]
c000f0eb:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f0f1:	89 ca                	mov    edx,ecx
c000f0f3:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f0fa:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000f0ff:	eb ab                	jmp    c000f0ac <loadACPITables(unsigned char*)+0x4c>
c000f101:	8d 76 00             	lea    esi,[esi+0x0]
c000f104:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f108:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f10c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f110:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f113:	83 e8 24             	sub    eax,0x24
c000f116:	c1 e8 02             	shr    eax,0x2
c000f119:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f11d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000f125:	8d 76 00             	lea    esi,[esi+0x0]
c000f128:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f12c:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000f130:	7d 42                	jge    c000f174 <loadACPITables(unsigned char*)+0x114>
c000f132:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f136:	83 c0 24             	add    eax,0x24
c000f139:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f13d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f141:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f145:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f149:	c1 e0 02             	shl    eax,0x2
c000f14c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000f150:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f154:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f156:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f15b:	8d 50 01             	lea    edx,[eax+0x1]
c000f15e:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f164:	89 ca                	mov    edx,ecx
c000f166:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f16d:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000f172:	eb b4                	jmp    c000f128 <loadACPITables(unsigned char*)+0xc8>
c000f174:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000f17c:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f181:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000f185:	0f 8d 39 01 00 00    	jge    c000f2c4 <loadACPITables(unsigned char*)+0x264>
c000f18b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f18f:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f196:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f19a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f19e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f1a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1a6:	25 ff 0f 00 00       	and    eax,0xfff
c000f1ab:	89 c6                	mov    esi,eax
c000f1ad:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f1b3:	83 ec 0c             	sub    esp,0xc
c000f1b6:	6a 01                	push   0x1
c000f1b8:	e8 38 a4 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f1bd:	83 c4 10             	add    esp,0x10
c000f1c0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f1c4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f1ca:	83 ec 0c             	sub    esp,0xc
c000f1cd:	6a 01                	push   0x1
c000f1cf:	6a 01                	push   0x1
c000f1d1:	50                   	push   eax
c000f1d2:	52                   	push   edx
c000f1d3:	53                   	push   ebx
c000f1d4:	e8 2f ad ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f1d9:	83 c4 20             	add    esp,0x20
c000f1dc:	09 f0                	or     eax,esi
c000f1de:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f1e2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f1e6:	c1 e0 03             	shl    eax,0x3
c000f1e9:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f1ee:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f1f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f1fa:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000f202:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f206:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f20a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f20e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f212:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f216:	89 c6                	mov    esi,eax
c000f218:	89 d7                	mov    edi,edx
c000f21a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f21c:	89 c8                	mov    eax,ecx
c000f21e:	89 fa                	mov    edx,edi
c000f220:	89 f3                	mov    ebx,esi
c000f222:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f226:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000f22a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f22e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f232:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f235:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f239:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f23d:	05 00 10 00 00       	add    eax,0x1000
c000f242:	c1 e8 0c             	shr    eax,0xc
c000f245:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f249:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f24d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f251:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f255:	25 ff 0f 00 00       	and    eax,0xfff
c000f25a:	89 c6                	mov    esi,eax
c000f25c:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f262:	83 ec 0c             	sub    esp,0xc
c000f265:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f269:	e8 87 a3 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f26e:	83 c4 10             	add    esp,0x10
c000f271:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f275:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f27b:	83 ec 0c             	sub    esp,0xc
c000f27e:	6a 01                	push   0x1
c000f280:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f284:	50                   	push   eax
c000f285:	52                   	push   edx
c000f286:	53                   	push   ebx
c000f287:	e8 7c ac ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f28c:	83 c4 20             	add    esp,0x20
c000f28f:	09 f0                	or     eax,esi
c000f291:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f295:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f299:	83 ec 0c             	sub    esp,0xc
c000f29c:	50                   	push   eax
c000f29d:	e8 67 a6 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000f2a2:	83 c4 10             	add    esp,0x10
c000f2a5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f2a9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f2ad:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f2b4:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000f2b9:	e9 be fe ff ff       	jmp    c000f17c <loadACPITables(unsigned char*)+0x11c>
c000f2be:	66 90                	xchg   ax,ax
c000f2c0:	90                   	nop
c000f2c1:	8d 76 00             	lea    esi,[esi+0x0]
c000f2c4:	83 c4 60             	add    esp,0x60
c000f2c7:	5b                   	pop    ebx
c000f2c8:	5e                   	pop    esi
c000f2c9:	5f                   	pop    edi
c000f2ca:	c3                   	ret    
c000f2cb:	90                   	nop

c000f2cc <findRSDT(unsigned char*)>:
c000f2cc:	57                   	push   edi
c000f2cd:	56                   	push   esi
c000f2ce:	53                   	push   ebx
c000f2cf:	83 ec 50             	sub    esp,0x50
c000f2d2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f2d7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f2dd:	83 e0 04             	and    eax,0x4
c000f2e0:	0f b6 c0             	movzx  eax,al
c000f2e3:	85 c0                	test   eax,eax
c000f2e5:	75 0d                	jne    c000f2f4 <findRSDT(unsigned char*)+0x28>
c000f2e7:	b8 00 00 00 00       	mov    eax,0x0
c000f2ec:	e9 2b 01 00 00       	jmp    c000f41c <findRSDT(unsigned char*)+0x150>
c000f2f1:	8d 76 00             	lea    esi,[esi+0x0]
c000f2f4:	89 e0                	mov    eax,esp
c000f2f6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f2fa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f2fe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f302:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000f30a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f30e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f312:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f316:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f31a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000f31e:	89 c6                	mov    esi,eax
c000f320:	89 d7                	mov    edi,edx
c000f322:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f324:	89 c8                	mov    eax,ecx
c000f326:	89 fa                	mov    edx,edi
c000f328:	89 f3                	mov    ebx,esi
c000f32a:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000f32e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f332:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f336:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f33a:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000f33e:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f346:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f34a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f34e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f352:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f356:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f35a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f35e:	25 ff 0f 00 00       	and    eax,0xfff
c000f363:	89 c6                	mov    esi,eax
c000f365:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f36b:	83 ec 0c             	sub    esp,0xc
c000f36e:	6a 02                	push   0x2
c000f370:	e8 80 a2 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f375:	83 c4 10             	add    esp,0x10
c000f378:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f37c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f382:	83 ec 0c             	sub    esp,0xc
c000f385:	6a 01                	push   0x1
c000f387:	6a 02                	push   0x2
c000f389:	50                   	push   eax
c000f38a:	52                   	push   edx
c000f38b:	53                   	push   ebx
c000f38c:	e8 77 ab ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f391:	83 c4 20             	add    esp,0x20
c000f394:	09 f0                	or     eax,esi
c000f396:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f39a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f39e:	25 ff 0f 00 00       	and    eax,0xfff
c000f3a3:	89 c6                	mov    esi,eax
c000f3a5:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f3ab:	83 ec 0c             	sub    esp,0xc
c000f3ae:	6a 02                	push   0x2
c000f3b0:	e8 40 a2 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f3b5:	83 c4 10             	add    esp,0x10
c000f3b8:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f3bc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f3c2:	83 ec 0c             	sub    esp,0xc
c000f3c5:	6a 01                	push   0x1
c000f3c7:	6a 02                	push   0x2
c000f3c9:	50                   	push   eax
c000f3ca:	52                   	push   edx
c000f3cb:	53                   	push   ebx
c000f3cc:	e8 37 ab ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f3d1:	83 c4 20             	add    esp,0x20
c000f3d4:	09 f0                	or     eax,esi
c000f3d6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f3da:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f3df:	85 c0                	test   eax,eax
c000f3e1:	75 11                	jne    c000f3f4 <findRSDT(unsigned char*)+0x128>
c000f3e3:	c6 05 20 bb 02 c0 00 	mov    BYTE PTR ds:0xc002bb20,0x0
c000f3ea:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f3ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f3f2:	eb 24                	jmp    c000f418 <findRSDT(unsigned char*)+0x14c>
c000f3f4:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f3f9:	83 f8 02             	cmp    eax,0x2
c000f3fc:	75 12                	jne    c000f410 <findRSDT(unsigned char*)+0x144>
c000f3fe:	c6 05 20 bb 02 c0 01 	mov    BYTE PTR ds:0xc002bb20,0x1
c000f405:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f409:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f40d:	eb 09                	jmp    c000f418 <findRSDT(unsigned char*)+0x14c>
c000f40f:	90                   	nop
c000f410:	b8 00 00 00 00       	mov    eax,0x0
c000f415:	eb 05                	jmp    c000f41c <findRSDT(unsigned char*)+0x150>
c000f417:	90                   	nop
c000f418:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f41c:	83 c4 50             	add    esp,0x50
c000f41f:	5b                   	pop    ebx
c000f420:	5e                   	pop    esi
c000f421:	5f                   	pop    edi
c000f422:	c3                   	ret    
c000f423:	90                   	nop

c000f424 <findDataTable(unsigned char*, char*)>:
c000f424:	83 ec 1c             	sub    esp,0x1c
c000f427:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f42c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f432:	83 e0 04             	and    eax,0x4
c000f435:	0f b6 c0             	movzx  eax,al
c000f438:	85 c0                	test   eax,eax
c000f43a:	75 08                	jne    c000f444 <findDataTable(unsigned char*, char*)+0x20>
c000f43c:	b8 00 00 00 00       	mov    eax,0x0
c000f441:	eb 5d                	jmp    c000f4a0 <findDataTable(unsigned char*, char*)+0x7c>
c000f443:	90                   	nop
c000f444:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f44c:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f451:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f455:	7d 41                	jge    c000f498 <findDataTable(unsigned char*, char*)+0x74>
c000f457:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f45b:	c1 e0 03             	shl    eax,0x3
c000f45e:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f463:	83 ec 04             	sub    esp,0x4
c000f466:	6a 04                	push   0x4
c000f468:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f46c:	50                   	push   eax
c000f46d:	e8 0e 0f ff ff       	call   c0000380 <memcmp>
c000f472:	83 c4 10             	add    esp,0x10
c000f475:	85 c0                	test   eax,eax
c000f477:	0f 94 c0             	sete   al
c000f47a:	0f b6 c0             	movzx  eax,al
c000f47d:	85 c0                	test   eax,eax
c000f47f:	74 0f                	je     c000f490 <findDataTable(unsigned char*, char*)+0x6c>
c000f481:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f485:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f48c:	eb 12                	jmp    c000f4a0 <findDataTable(unsigned char*, char*)+0x7c>
c000f48e:	66 90                	xchg   ax,ax
c000f490:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f495:	eb b5                	jmp    c000f44c <findDataTable(unsigned char*, char*)+0x28>
c000f497:	90                   	nop
c000f498:	b8 00 00 00 00       	mov    eax,0x0
c000f49d:	8d 76 00             	lea    esi,[esi+0x0]
c000f4a0:	83 c4 1c             	add    esp,0x1c
c000f4a3:	c3                   	ret    

c000f4a4 <scanMADT()>:
c000f4a4:	53                   	push   ebx
c000f4a5:	83 ec 38             	sub    esp,0x38
c000f4a8:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c000f4ad:	25 00 04 00 00       	and    eax,0x400
c000f4b2:	74 14                	je     c000f4c8 <scanMADT()+0x24>
c000f4b4:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f4b9:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f4bf:	83 e2 fb             	and    edx,0xfffffffb
c000f4c2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f4c8:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f4cd:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f4d3:	83 e0 04             	and    eax,0x4
c000f4d6:	0f b6 c0             	movzx  eax,al
c000f4d9:	85 c0                	test   eax,eax
c000f4db:	0f 84 6b 04 00 00    	je     c000f94c <scanMADT()+0x4a8>
c000f4e1:	e8 e2 fa ff ff       	call   c000efc8 <findRSDP()>
c000f4e6:	a3 2c bb 02 c0       	mov    ds:0xc002bb2c,eax
c000f4eb:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f4f0:	85 c0                	test   eax,eax
c000f4f2:	75 1c                	jne    c000f510 <scanMADT()+0x6c>
c000f4f4:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f4f9:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f4ff:	83 e2 fb             	and    edx,0xfffffffb
c000f502:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f508:	e9 47 04 00 00       	jmp    c000f954 <scanMADT()+0x4b0>
c000f50d:	8d 76 00             	lea    esi,[esi+0x0]
c000f510:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f515:	83 ec 0c             	sub    esp,0xc
c000f518:	50                   	push   eax
c000f519:	e8 ae fd ff ff       	call   c000f2cc <findRSDT(unsigned char*)>
c000f51e:	83 c4 10             	add    esp,0x10
c000f521:	a3 28 bb 02 c0       	mov    ds:0xc002bb28,eax
c000f526:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f52b:	85 c0                	test   eax,eax
c000f52d:	75 19                	jne    c000f548 <scanMADT()+0xa4>
c000f52f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f534:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f53a:	83 e2 fb             	and    edx,0xfffffffb
c000f53d:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f543:	e9 0c 04 00 00       	jmp    c000f954 <scanMADT()+0x4b0>
c000f548:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f54d:	83 ec 0c             	sub    esp,0xc
c000f550:	50                   	push   eax
c000f551:	e8 0a fb ff ff       	call   c000f060 <loadACPITables(unsigned char*)>
c000f556:	83 c4 10             	add    esp,0x10
c000f559:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f55e:	83 ec 08             	sub    esp,0x8
c000f561:	68 6c 20 02 c0       	push   0xc002206c
c000f566:	50                   	push   eax
c000f567:	e8 b8 fe ff ff       	call   c000f424 <findDataTable(unsigned char*, char*)>
c000f56c:	83 c4 10             	add    esp,0x10
c000f56f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f573:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f578:	75 1a                	jne    c000f594 <scanMADT()+0xf0>
c000f57a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f57f:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f585:	83 e2 fe             	and    edx,0xfffffffe
c000f588:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f58e:	e9 c1 03 00 00       	jmp    c000f954 <scanMADT()+0x4b0>
c000f593:	90                   	nop
c000f594:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f59c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f5a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f5a3:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f5a7:	0f 87 a7 03 00 00    	ja     c000f954 <scanMADT()+0x4b0>
c000f5ad:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f5b5:	0f 87 99 03 00 00    	ja     c000f954 <scanMADT()+0x4b0>
c000f5bb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5bf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f5c3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5c7:	8d 50 01             	lea    edx,[eax+0x1]
c000f5ca:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5ce:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f5d2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f5d6:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f5da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5de:	8d 50 01             	lea    edx,[eax+0x1]
c000f5e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5e5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f5e9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f5ed:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f5f1:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f5f6:	83 f8 02             	cmp    eax,0x2
c000f5f9:	0f 86 51 03 00 00    	jbe    c000f950 <scanMADT()+0x4ac>
c000f5ff:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f604:	85 c0                	test   eax,eax
c000f606:	75 58                	jne    c000f660 <scanMADT()+0x1bc>
c000f608:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f60c:	8d 50 01             	lea    edx,[eax+0x1]
c000f60f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f613:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f619:	0f b6 d2             	movzx  edx,dl
c000f61c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f620:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f624:	88 82 60 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42a0],al
c000f62a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f62e:	8d 50 01             	lea    edx,[eax+0x1]
c000f631:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f635:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f63b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f63e:	88 0d 20 bd 02 c0    	mov    BYTE PTR ds:0xc002bd20,cl
c000f644:	0f b6 d2             	movzx  edx,dl
c000f647:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f64b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f64f:	88 82 40 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42c0],al
c000f655:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f65a:	e9 d9 02 00 00       	jmp    c000f938 <scanMADT()+0x494>
c000f65f:	90                   	nop
c000f660:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f665:	83 f8 01             	cmp    eax,0x1
c000f668:	0f 85 1a 01 00 00    	jne    c000f788 <scanMADT()+0x2e4>
c000f66e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f672:	8d 50 01             	lea    edx,[eax+0x1]
c000f675:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f679:	8a 15 e0 bb 02 c0    	mov    dl,BYTE PTR ds:0xc002bbe0
c000f67f:	0f b6 d2             	movzx  edx,dl
c000f682:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f686:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f68a:	88 82 00 bc 02 c0    	mov    BYTE PTR [edx-0x3ffd4400],al
c000f690:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f695:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f699:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f69d:	01 d0                	add    eax,edx
c000f69f:	83 c0 2c             	add    eax,0x2c
c000f6a2:	8a 00                	mov    al,BYTE PTR [eax]
c000f6a4:	0f b6 d0             	movzx  edx,al
c000f6a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6ab:	8d 48 01             	lea    ecx,[eax+0x1]
c000f6ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6b2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f6b6:	0f b6 c0             	movzx  eax,al
c000f6b9:	c1 e0 08             	shl    eax,0x8
c000f6bc:	89 d1                	mov    ecx,edx
c000f6be:	09 c1                	or     ecx,eax
c000f6c0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6c4:	8d 50 02             	lea    edx,[eax+0x2]
c000f6c7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6cb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f6cf:	0f b6 c0             	movzx  eax,al
c000f6d2:	c1 e0 10             	shl    eax,0x10
c000f6d5:	09 c1                	or     ecx,eax
c000f6d7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6db:	8d 50 03             	lea    edx,[eax+0x3]
c000f6de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6e2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f6e6:	0f b6 c0             	movzx  eax,al
c000f6e9:	c1 e0 18             	shl    eax,0x18
c000f6ec:	09 c1                	or     ecx,eax
c000f6ee:	89 ca                	mov    edx,ecx
c000f6f0:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f6f5:	0f b6 c0             	movzx  eax,al
c000f6f8:	89 14 85 20 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd43e0],edx
c000f6ff:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f704:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f708:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f70c:	01 d0                	add    eax,edx
c000f70e:	83 c0 2c             	add    eax,0x2c
c000f711:	8a 00                	mov    al,BYTE PTR [eax]
c000f713:	0f b6 d0             	movzx  edx,al
c000f716:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f71a:	8d 48 01             	lea    ecx,[eax+0x1]
c000f71d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f721:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f725:	0f b6 c0             	movzx  eax,al
c000f728:	c1 e0 08             	shl    eax,0x8
c000f72b:	89 d1                	mov    ecx,edx
c000f72d:	09 c1                	or     ecx,eax
c000f72f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f733:	8d 50 02             	lea    edx,[eax+0x2]
c000f736:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f73a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f73e:	0f b6 c0             	movzx  eax,al
c000f741:	c1 e0 10             	shl    eax,0x10
c000f744:	09 c1                	or     ecx,eax
c000f746:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f74a:	8d 50 03             	lea    edx,[eax+0x3]
c000f74d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f751:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f755:	0f b6 c0             	movzx  eax,al
c000f758:	c1 e0 18             	shl    eax,0x18
c000f75b:	09 c1                	or     ecx,eax
c000f75d:	89 ca                	mov    edx,ecx
c000f75f:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f764:	0f b6 c0             	movzx  eax,al
c000f767:	89 14 85 a0 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4360],edx
c000f76e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f773:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f778:	83 c0 01             	add    eax,0x1
c000f77b:	a2 e0 bb 02 c0       	mov    ds:0xc002bbe0,al
c000f780:	e9 b3 01 00 00       	jmp    c000f938 <scanMADT()+0x494>
c000f785:	8d 76 00             	lea    esi,[esi+0x0]
c000f788:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f78d:	83 f8 02             	cmp    eax,0x2
c000f790:	0f 85 ea 00 00 00    	jne    c000f880 <scanMADT()+0x3dc>
c000f796:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f79a:	8d 50 01             	lea    edx,[eax+0x1]
c000f79d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f7a1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7a5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f7a9:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f7ad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7b1:	8d 50 01             	lea    edx,[eax+0x1]
c000f7b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f7b8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7bc:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f7c0:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f7c4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7c8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7cc:	01 d0                	add    eax,edx
c000f7ce:	83 c0 2c             	add    eax,0x2c
c000f7d1:	8a 00                	mov    al,BYTE PTR [eax]
c000f7d3:	0f b6 d0             	movzx  edx,al
c000f7d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7da:	8d 48 01             	lea    ecx,[eax+0x1]
c000f7dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7e1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f7e5:	0f b6 c0             	movzx  eax,al
c000f7e8:	c1 e0 08             	shl    eax,0x8
c000f7eb:	89 d1                	mov    ecx,edx
c000f7ed:	09 c1                	or     ecx,eax
c000f7ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7f3:	8d 50 02             	lea    edx,[eax+0x2]
c000f7f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7fa:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f7fe:	0f b6 c0             	movzx  eax,al
c000f801:	c1 e0 10             	shl    eax,0x10
c000f804:	09 c1                	or     ecx,eax
c000f806:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f80a:	8d 50 03             	lea    edx,[eax+0x3]
c000f80d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f811:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f815:	0f b6 c0             	movzx  eax,al
c000f818:	c1 e0 18             	shl    eax,0x18
c000f81b:	09 c8                	or     eax,ecx
c000f81d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f821:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f826:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f82a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f82e:	01 d0                	add    eax,edx
c000f830:	83 c0 2c             	add    eax,0x2c
c000f833:	8a 00                	mov    al,BYTE PTR [eax]
c000f835:	0f b6 d0             	movzx  edx,al
c000f838:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f83c:	8d 48 01             	lea    ecx,[eax+0x1]
c000f83f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f843:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f847:	0f b6 c0             	movzx  eax,al
c000f84a:	c1 e0 08             	shl    eax,0x8
c000f84d:	09 d0                	or     eax,edx
c000f84f:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f854:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f859:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f85e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f862:	88 90 68 37 02 c0    	mov    BYTE PTR [eax-0x3ffdc898],dl
c000f868:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f86d:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000f872:	66 89 94 00 c0 bb 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd4440],dx
c000f87a:	e9 b9 00 00 00       	jmp    c000f938 <scanMADT()+0x494>
c000f87f:	90                   	nop
c000f880:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f885:	83 f8 04             	cmp    eax,0x4
c000f888:	0f 85 9a 00 00 00    	jne    c000f928 <scanMADT()+0x484>
c000f88e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f892:	8d 50 01             	lea    edx,[eax+0x1]
c000f895:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f899:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f89d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f8a1:	0f b6 c0             	movzx  eax,al
c000f8a4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f8a8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f8ac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f8b0:	01 d0                	add    eax,edx
c000f8b2:	83 c0 2c             	add    eax,0x2c
c000f8b5:	8a 00                	mov    al,BYTE PTR [eax]
c000f8b7:	0f b6 d0             	movzx  edx,al
c000f8ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f8be:	8d 48 01             	lea    ecx,[eax+0x1]
c000f8c1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f8c5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f8c9:	0f b6 c0             	movzx  eax,al
c000f8cc:	c1 e0 08             	shl    eax,0x8
c000f8cf:	09 d0                	or     eax,edx
c000f8d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f8d5:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f8da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f8de:	8d 50 01             	lea    edx,[eax+0x1]
c000f8e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f8e5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f8e9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f8ed:	0f b6 c0             	movzx  eax,al
c000f8f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f8f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8f8:	c1 e0 08             	shl    eax,0x8
c000f8fb:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f8ff:	89 c1                	mov    ecx,eax
c000f901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f905:	c1 e0 18             	shl    eax,0x18
c000f908:	89 c3                	mov    ebx,eax
c000f90a:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c000f90f:	8d 50 01             	lea    edx,[eax+0x1]
c000f912:	89 15 30 bb 02 c0    	mov    DWORD PTR ds:0xc002bb30,edx
c000f918:	09 d9                	or     ecx,ebx
c000f91a:	89 ca                	mov    edx,ecx
c000f91c:	89 14 85 40 bb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd44c0],edx
c000f923:	eb 13                	jmp    c000f938 <scanMADT()+0x494>
c000f925:	8d 76 00             	lea    esi,[esi+0x0]
c000f928:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f92d:	83 f8 05             	cmp    eax,0x5
c000f930:	75 06                	jne    c000f938 <scanMADT()+0x494>
c000f932:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f937:	90                   	nop
c000f938:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f93d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f941:	01 d0                	add    eax,edx
c000f943:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f947:	e9 50 fc ff ff       	jmp    c000f59c <scanMADT()+0xf8>
c000f94c:	90                   	nop
c000f94d:	eb 05                	jmp    c000f954 <scanMADT()+0x4b0>
c000f94f:	90                   	nop
c000f950:	90                   	nop
c000f951:	8d 76 00             	lea    esi,[esi+0x0]
c000f954:	83 c4 38             	add    esp,0x38
c000f957:	5b                   	pop    ebx
c000f958:	c3                   	ret    
c000f959:	90                   	nop
c000f95a:	66 90                	xchg   ax,ax

c000f95c <ACPI::ACPI()>:
c000f95c:	83 ec 0c             	sub    esp,0xc
c000f95f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f963:	83 ec 08             	sub    esp,0x8
c000f966:	68 71 20 02 c0       	push   0xc0022071
c000f96b:	50                   	push   eax
c000f96c:	e8 3b d2 ff ff       	call   c000cbac <Device::Device(char const*)>
c000f971:	83 c4 10             	add    esp,0x10
c000f974:	ba c4 21 02 c0       	mov    edx,0xc00221c4
c000f979:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f97d:	89 10                	mov    DWORD PTR [eax],edx
c000f97f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f983:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f98a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f98e:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f99c:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f9a6:	e8 f9 fa ff ff       	call   c000f4a4 <scanMADT()>
c000f9ab:	90                   	nop
c000f9ac:	83 c4 0c             	add    esp,0xc
c000f9af:	c3                   	ret    

c000f9b0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f9b0:	83 ec 2c             	sub    esp,0x2c
c000f9b3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f9b7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f9bb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000f9bf:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000f9c3:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f9c8:	88 c8                	mov    al,cl
c000f9ca:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f9ce:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f9d3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f9db:	90                   	nop
c000f9dc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f9e0:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f9e6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f9ea:	0f 8d b0 00 00 00    	jge    c000faa0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f9f0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f9f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f9f8:	83 c2 2a             	add    edx,0x2a
c000f9fb:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f9ff:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000fa04:	0f b7 c0             	movzx  eax,ax
c000fa07:	39 c2                	cmp    edx,eax
c000fa09:	0f 85 85 00 00 00    	jne    c000fa94 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000fa0f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa13:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa17:	83 c2 2a             	add    edx,0x2a
c000fa1a:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000fa1e:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000fa23:	0f b6 c0             	movzx  eax,al
c000fa26:	39 c2                	cmp    edx,eax
c000fa28:	75 6a                	jne    c000fa94 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000fa2a:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000fa2f:	85 c0                	test   eax,eax
c000fa31:	74 3d                	je     c000fa70 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000fa33:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa37:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa3b:	83 c2 2a             	add    edx,0x2a
c000fa3e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000fa42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fa46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fa49:	39 c2                	cmp    edx,eax
c000fa4b:	74 13                	je     c000fa60 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000fa4d:	83 ec 0c             	sub    esp,0xc
c000fa50:	68 ec 1f 02 c0       	push   0xc0021fec
c000fa55:	e8 81 1b 00 00       	call   c00115db <KePanic(char const*)>
c000fa5a:	83 c4 10             	add    esp,0x10
c000fa5d:	8d 76 00             	lea    esi,[esi+0x0]
c000fa60:	83 ec 0c             	sub    esp,0xc
c000fa63:	68 76 20 02 c0       	push   0xc0022076
c000fa68:	e8 6e 1b 00 00       	call   c00115db <KePanic(char const*)>
c000fa6d:	83 c4 10             	add    esp,0x10
c000fa70:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa74:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa78:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa7c:	83 c2 2a             	add    edx,0x2a
c000fa7f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000fa83:	8b 02                	mov    eax,DWORD PTR [edx]
c000fa85:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000fa88:	89 01                	mov    DWORD PTR [ecx],eax
c000fa8a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000fa8d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fa92:	66 90                	xchg   ax,ax
c000fa94:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000fa99:	e9 3e ff ff ff       	jmp    c000f9dc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000fa9e:	66 90                	xchg   ax,ax
c000faa0:	90                   	nop
c000faa1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000faa5:	83 c4 2c             	add    esp,0x2c
c000faa8:	c2 04 00             	ret    0x4
c000faab:	90                   	nop

c000faac <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000faac:	83 ec 1c             	sub    esp,0x1c
c000faaf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fab3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000fab7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000fabb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000fac0:	88 c8                	mov    al,cl
c000fac2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000fac6:	88 d0                	mov    al,dl
c000fac8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000facc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fad0:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fad6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fada:	83 c2 2a             	add    edx,0x2a
c000fadd:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000fae1:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000fae5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fae9:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000faef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000faf3:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000faf6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fafa:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000faff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb03:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fb09:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000fb0d:	83 c0 01             	add    eax,0x1
c000fb10:	88 c1                	mov    cl,al
c000fb12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb16:	83 c2 2a             	add    edx,0x2a
c000fb19:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000fb1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb21:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fb27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb2b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fb2e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fb32:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000fb36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb3a:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fb40:	8d 50 01             	lea    edx,[eax+0x1]
c000fb43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb47:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000fb4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb51:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fb57:	3d 00 02 00 00       	cmp    eax,0x200
c000fb5c:	75 12                	jne    c000fb70 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000fb5e:	83 ec 0c             	sub    esp,0xc
c000fb61:	68 85 20 02 c0       	push   0xc0022085
c000fb66:	e8 70 1a 00 00       	call   c00115db <KePanic(char const*)>
c000fb6b:	83 c4 10             	add    esp,0x10
c000fb6e:	66 90                	xchg   ax,ax
c000fb70:	90                   	nop
c000fb71:	83 c4 1c             	add    esp,0x1c
c000fb74:	c3                   	ret    
c000fb75:	90                   	nop
c000fb76:	66 90                	xchg   ax,ax

c000fb78 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000fb78:	b8 00 00 00 00       	mov    eax,0x0
c000fb7d:	c3                   	ret    
c000fb7e:	66 90                	xchg   ax,ax

c000fb80 <ACPI::detectPCI()>:
c000fb80:	53                   	push   ebx
c000fb81:	83 ec 28             	sub    esp,0x28
c000fb84:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000fb89:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000fb8e:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fb93:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fb99:	83 e0 04             	and    eax,0x4
c000fb9c:	0f b6 c0             	movzx  eax,al
c000fb9f:	85 c0                	test   eax,eax
c000fba1:	74 2d                	je     c000fbd0 <ACPI::detectPCI()+0x50>
c000fba3:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000fba8:	83 ec 08             	sub    esp,0x8
c000fbab:	68 a2 20 02 c0       	push   0xc00220a2
c000fbb0:	50                   	push   eax
c000fbb1:	e8 6e f8 ff ff       	call   c000f424 <findDataTable(unsigned char*, char*)>
c000fbb6:	83 c4 10             	add    esp,0x10
c000fbb9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fbbd:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000fbc2:	74 0c                	je     c000fbd0 <ACPI::detectPCI()+0x50>
c000fbc4:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fbc9:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fbce:	66 90                	xchg   ax,ax
c000fbd0:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000fbd8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fbdc:	8a 00                	mov    al,BYTE PTR [eax]
c000fbde:	0f b6 c0             	movzx  eax,al
c000fbe1:	83 f8 01             	cmp    eax,0x1
c000fbe4:	75 0e                	jne    c000fbf4 <ACPI::detectPCI()+0x74>
c000fbe6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fbeb:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fbf0:	eb 2e                	jmp    c000fc20 <ACPI::detectPCI()+0xa0>
c000fbf2:	66 90                	xchg   ax,ax
c000fbf4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fbf8:	8a 00                	mov    al,BYTE PTR [eax]
c000fbfa:	0f b6 c0             	movzx  eax,al
c000fbfd:	83 f8 02             	cmp    eax,0x2
c000fc00:	75 1e                	jne    c000fc20 <ACPI::detectPCI()+0xa0>
c000fc02:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc07:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fc0c:	85 c0                	test   eax,eax
c000fc0e:	74 10                	je     c000fc20 <ACPI::detectPCI()+0xa0>
c000fc10:	83 ec 0c             	sub    esp,0xc
c000fc13:	68 1c 20 02 c0       	push   0xc002201c
c000fc18:	e8 be 19 00 00       	call   c00115db <KePanic(char const*)>
c000fc1d:	83 c4 10             	add    esp,0x10
c000fc20:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000fc24:	83 f0 01             	xor    eax,0x1
c000fc27:	0f b6 c0             	movzx  eax,al
c000fc2a:	85 c0                	test   eax,eax
c000fc2c:	74 46                	je     c000fc74 <ACPI::detectPCI()+0xf4>
c000fc2e:	e8 fd 04 ff ff       	call   c0000130 <manualPCIProbe>
c000fc33:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fc37:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000fc3c:	75 0e                	jne    c000fc4c <ACPI::detectPCI()+0xcc>
c000fc3e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc43:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fc48:	eb 2a                	jmp    c000fc74 <ACPI::detectPCI()+0xf4>
c000fc4a:	66 90                	xchg   ax,ax
c000fc4c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000fc51:	75 21                	jne    c000fc74 <ACPI::detectPCI()+0xf4>
c000fc53:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc58:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fc5d:	85 c0                	test   eax,eax
c000fc5f:	74 13                	je     c000fc74 <ACPI::detectPCI()+0xf4>
c000fc61:	83 ec 0c             	sub    esp,0xc
c000fc64:	68 1c 20 02 c0       	push   0xc002201c
c000fc69:	e8 6d 19 00 00       	call   c00115db <KePanic(char const*)>
c000fc6e:	83 c4 10             	add    esp,0x10
c000fc71:	8d 76 00             	lea    esi,[esi+0x0]
c000fc74:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000fc79:	85 c0                	test   eax,eax
c000fc7b:	0f 84 87 00 00 00    	je     c000fd08 <ACPI::detectPCI()+0x188>
c000fc81:	83 ec 0c             	sub    esp,0xc
c000fc84:	68 a7 20 02 c0       	push   0xc00220a7
c000fc89:	e8 4f 12 00 00       	call   c0010edd <KeSetBootMessage(char const*)>
c000fc8e:	83 c4 10             	add    esp,0x10
c000fc91:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000fc99:	83 ec 0c             	sub    esp,0xc
c000fc9c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fca0:	e8 2e 7e ff ff       	call   c0007ad3 <malloc>
c000fca5:	83 c4 10             	add    esp,0x10
c000fca8:	89 c3                	mov    ebx,eax
c000fcaa:	83 ec 0c             	sub    esp,0xc
c000fcad:	53                   	push   ebx
c000fcae:	e8 df b4 00 00       	call   c001b192 <PCI::PCI()>
c000fcb3:	83 c4 10             	add    esp,0x10
c000fcb6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000fcba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fcbe:	83 ec 08             	sub    esp,0x8
c000fcc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fcc5:	50                   	push   eax
c000fcc6:	e8 49 cd ff ff       	call   c000ca14 <Device::addChild(Device*)>
c000fccb:	83 c4 10             	add    esp,0x10
c000fcce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fcd2:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcd4:	83 c0 08             	add    eax,0x8
c000fcd7:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcd9:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000fcde:	85 d2                	test   edx,edx
c000fce0:	74 0a                	je     c000fcec <ACPI::detectPCI()+0x16c>
c000fce2:	ba 01 00 00 00       	mov    edx,0x1
c000fce7:	eb 0b                	jmp    c000fcf4 <ACPI::detectPCI()+0x174>
c000fce9:	8d 76 00             	lea    esi,[esi+0x0]
c000fcec:	ba 02 00 00 00       	mov    edx,0x2
c000fcf1:	8d 76 00             	lea    esi,[esi+0x0]
c000fcf4:	6a 00                	push   0x0
c000fcf6:	6a 00                	push   0x0
c000fcf8:	52                   	push   edx
c000fcf9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fcfd:	ff d0                	call   eax
c000fcff:	83 c4 10             	add    esp,0x10
c000fd02:	e9 91 00 00 00       	jmp    c000fd98 <ACPI::detectPCI()+0x218>
c000fd07:	90                   	nop
c000fd08:	83 ec 0c             	sub    esp,0xc
c000fd0b:	68 bf 20 02 c0       	push   0xc00220bf
c000fd10:	e8 c8 11 00 00       	call   c0010edd <KeSetBootMessage(char const*)>
c000fd15:	83 c4 10             	add    esp,0x10
c000fd18:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000fd1f:	83 ec 0c             	sub    esp,0xc
c000fd22:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fd26:	e8 a8 7d ff ff       	call   c0007ad3 <malloc>
c000fd2b:	83 c4 10             	add    esp,0x10
c000fd2e:	89 c3                	mov    ebx,eax
c000fd30:	83 ec 0c             	sub    esp,0xc
c000fd33:	53                   	push   ebx
c000fd34:	e8 01 c0 00 00       	call   c001bd3a <IDE::IDE()>
c000fd39:	83 c4 10             	add    esp,0x10
c000fd3c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fd40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fd44:	83 ec 08             	sub    esp,0x8
c000fd47:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fd4b:	50                   	push   eax
c000fd4c:	e8 c3 cc ff ff       	call   c000ca14 <Device::addChild(Device*)>
c000fd51:	83 c4 10             	add    esp,0x10
c000fd54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd58:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000fd62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd66:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000fd6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd73:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000fd7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd80:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd82:	83 c0 08             	add    eax,0x8
c000fd85:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd87:	6a 00                	push   0x0
c000fd89:	6a 00                	push   0x0
c000fd8b:	6a 00                	push   0x0
c000fd8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fd91:	ff d0                	call   eax
c000fd93:	83 c4 10             	add    esp,0x10
c000fd96:	66 90                	xchg   ax,ax
c000fd98:	90                   	nop
c000fd99:	83 c4 28             	add    esp,0x28
c000fd9c:	5b                   	pop    ebx
c000fd9d:	c3                   	ret    
c000fd9e:	66 90                	xchg   ax,ax

c000fda0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000fda0:	83 ec 1c             	sub    esp,0x1c
c000fda3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fda7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fdaa:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fdae:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fdb3:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fdb8:	83 ec 08             	sub    esp,0x8
c000fdbb:	52                   	push   edx
c000fdbc:	50                   	push   eax
c000fdbd:	e8 d8 73 ff ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c000fdc2:	83 c4 10             	add    esp,0x10
c000fdc5:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000fdc9:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fdce:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fdd3:	83 ec 04             	sub    esp,0x4
c000fdd6:	6a 01                	push   0x1
c000fdd8:	52                   	push   edx
c000fdd9:	50                   	push   eax
c000fdda:	e8 d3 74 ff ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c000fddf:	83 c4 10             	add    esp,0x10
c000fde2:	90                   	nop
c000fde3:	83 c4 1c             	add    esp,0x1c
c000fde6:	c3                   	ret    
c000fde7:	90                   	nop

c000fde8 <ACPI::sleep()>:
c000fde8:	83 ec 0c             	sub    esp,0xc
c000fdeb:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fdf0:	85 c0                	test   eax,eax
c000fdf2:	74 08                	je     c000fdfc <ACPI::sleep()+0x14>
c000fdf4:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fdf9:	ff d0                	call   eax
c000fdfb:	90                   	nop
c000fdfc:	90                   	nop
c000fdfd:	83 c4 0c             	add    esp,0xc
c000fe00:	c3                   	ret    
c000fe01:	90                   	nop
c000fe02:	66 90                	xchg   ax,ax

c000fe04 <ACPI::open(int, int, void*)>:
c000fe04:	55                   	push   ebp
c000fe05:	89 e5                	mov    ebp,esp
c000fe07:	53                   	push   ebx
c000fe08:	81 ec 74 01 00 00    	sub    esp,0x174
c000fe0e:	83 ec 0c             	sub    esp,0xc
c000fe11:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fe14:	e8 67 fd ff ff       	call   c000fb80 <ACPI::detectPCI()>
c000fe19:	83 c4 10             	add    esp,0x10
c000fe1c:	83 ec 0c             	sub    esp,0xc
c000fe1f:	68 44 20 02 c0       	push   0xc0022044
c000fe24:	e8 b4 10 00 00       	call   c0010edd <KeSetBootMessage(char const*)>
c000fe29:	83 c4 10             	add    esp,0x10
c000fe2c:	b8 4c 05 00 00       	mov    eax,0x54c
c000fe31:	8a 00                	mov    al,BYTE PTR [eax]
c000fe33:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000fe36:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fe3a:	83 f8 01             	cmp    eax,0x1
c000fe3d:	75 15                	jne    c000fe54 <ACPI::open(int, int, void*)+0x50>
c000fe3f:	83 ec 0c             	sub    esp,0xc
c000fe42:	68 93 19 02 c0       	push   0xc0021993
c000fe47:	e8 6b 4d 00 00       	call   c0014bb7 <Thr::loadKernelSymbolTable(char const*)>
c000fe4c:	83 c4 10             	add    esp,0x10
c000fe4f:	eb 33                	jmp    c000fe84 <ACPI::open(int, int, void*)+0x80>
c000fe51:	8d 76 00             	lea    esi,[esi+0x0]
c000fe54:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fe58:	3d bb 00 00 00       	cmp    eax,0xbb
c000fe5d:	75 15                	jne    c000fe74 <ACPI::open(int, int, void*)+0x70>
c000fe5f:	83 ec 0c             	sub    esp,0xc
c000fe62:	68 d4 20 02 c0       	push   0xc00220d4
c000fe67:	e8 4b 4d 00 00       	call   c0014bb7 <Thr::loadKernelSymbolTable(char const*)>
c000fe6c:	83 c4 10             	add    esp,0x10
c000fe6f:	eb 13                	jmp    c000fe84 <ACPI::open(int, int, void*)+0x80>
c000fe71:	8d 76 00             	lea    esi,[esi+0x0]
c000fe74:	83 ec 0c             	sub    esp,0xc
c000fe77:	68 f2 20 02 c0       	push   0xc00220f2
c000fe7c:	e8 5a 17 00 00       	call   c00115db <KePanic(char const*)>
c000fe81:	83 c4 10             	add    esp,0x10
c000fe84:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000fe88:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000fe8f:	83 ec 0c             	sub    esp,0xc
c000fe92:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000fe95:	e8 39 7c ff ff       	call   c0007ad3 <malloc>
c000fe9a:	83 c4 10             	add    esp,0x10
c000fe9d:	89 c3                	mov    ebx,eax
c000fe9f:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000fea4:	83 ec 04             	sub    esp,0x4
c000fea7:	50                   	push   eax
c000fea8:	68 0c 21 02 c0       	push   0xc002210c
c000fead:	53                   	push   ebx
c000feae:	e8 e3 bc ff ff       	call   c000bb96 <File::File(char const*, Process*)>
c000feb3:	83 c4 10             	add    esp,0x10
c000feb6:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000feb9:	83 ec 08             	sub    esp,0x8
c000febc:	6a 01                	push   0x1
c000febe:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fec1:	e8 ee bc ff ff       	call   c000bbb4 <File::open(FileOpenMode)>
c000fec6:	83 c4 10             	add    esp,0x10
c000fec9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000fecc:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000fed0:	75 12                	jne    c000fee4 <ACPI::open(int, int, void*)+0xe0>
c000fed2:	83 ec 0c             	sub    esp,0xc
c000fed5:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fed8:	e8 35 bd ff ff       	call   c000bc12 <File::close()>
c000fedd:	83 c4 10             	add    esp,0x10
c000fee0:	eb 06                	jmp    c000fee8 <ACPI::open(int, int, void*)+0xe4>
c000fee2:	66 90                	xchg   ax,ax
c000fee4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fee8:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000feec:	74 16                	je     c000ff04 <ACPI::open(int, int, void*)+0x100>
c000feee:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fef1:	8b 00                	mov    eax,DWORD PTR [eax]
c000fef3:	83 c0 08             	add    eax,0x8
c000fef6:	8b 00                	mov    eax,DWORD PTR [eax]
c000fef8:	83 ec 0c             	sub    esp,0xc
c000fefb:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fefe:	ff d0                	call   eax
c000ff00:	83 c4 10             	add    esp,0x10
c000ff03:	90                   	nop
c000ff04:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000ff07:	83 f0 01             	xor    eax,0x1
c000ff0a:	0f b6 c0             	movzx  eax,al
c000ff0d:	85 c0                	test   eax,eax
c000ff0f:	74 3b                	je     c000ff4c <ACPI::open(int, int, void*)+0x148>
c000ff11:	83 ec 0c             	sub    esp,0xc
c000ff14:	68 2a 21 02 c0       	push   0xc002212a
c000ff19:	e8 bf 0f 00 00       	call   c0010edd <KeSetBootMessage(char const*)>
c000ff1e:	83 c4 10             	add    esp,0x10
c000ff21:	83 ec 04             	sub    esp,0x4
c000ff24:	6a 0c                	push   0xc
c000ff26:	68 45 21 02 c0       	push   0xc0022145
c000ff2b:	68 56 21 02 c0       	push   0xc0022156
c000ff30:	e8 01 3f 00 00       	call   c0013e36 <Reg::readIntWithDefault(char*, char*, int)>
c000ff35:	83 c4 10             	add    esp,0x10
c000ff38:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000ff3b:	83 ec 0c             	sub    esp,0xc
c000ff3e:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000ff41:	e8 d4 98 ff ff       	call   c000981a <Virt::setupPageSwapping(int)>
c000ff46:	83 c4 10             	add    esp,0x10
c000ff49:	8d 76 00             	lea    esi,[esi+0x0]
c000ff4c:	83 ec 0c             	sub    esp,0xc
c000ff4f:	68 55 0b 02 c0       	push   0xc0020b55
c000ff54:	e8 84 0f 00 00       	call   c0010edd <KeSetBootMessage(char const*)>
c000ff59:	83 c4 10             	add    esp,0x10
c000ff5c:	8d 45 b8             	lea    eax,[ebp-0x48]
c000ff5f:	83 ec 08             	sub    esp,0x8
c000ff62:	6a 13                	push   0x13
c000ff64:	50                   	push   eax
c000ff65:	e8 c2 cd ff ff       	call   c000cd2c <getDevicesOfType(DeviceType)>
c000ff6a:	83 c4 0c             	add    esp,0xc
c000ff6d:	8d 76 00             	lea    esi,[esi+0x0]
c000ff70:	83 ec 0c             	sub    esp,0xc
c000ff73:	8d 45 b8             	lea    eax,[ebp-0x48]
c000ff76:	50                   	push   eax
c000ff77:	e8 c4 ff 00 00       	call   c001ff40 <LinkedList<Device>::isEmpty()>
c000ff7c:	83 c4 10             	add    esp,0x10
c000ff7f:	83 f0 01             	xor    eax,0x1
c000ff82:	0f b6 c0             	movzx  eax,al
c000ff85:	85 c0                	test   eax,eax
c000ff87:	0f 84 1f 01 00 00    	je     c00100ac <ACPI::open(int, int, void*)+0x2a8>
c000ff8d:	83 ec 0c             	sub    esp,0xc
c000ff90:	8d 45 b8             	lea    eax,[ebp-0x48]
c000ff93:	50                   	push   eax
c000ff94:	e8 c3 ff 00 00       	call   c001ff5c <LinkedList<Device>::getFirstElement()>
c000ff99:	83 c4 10             	add    esp,0x10
c000ff9c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000ff9f:	83 ec 0c             	sub    esp,0xc
c000ffa2:	8d 45 b8             	lea    eax,[ebp-0x48]
c000ffa5:	50                   	push   eax
c000ffa6:	e8 b9 ff 00 00       	call   c001ff64 <LinkedList<Device>::removeFirst()>
c000ffab:	83 c4 10             	add    esp,0x10
c000ffae:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000ffb1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000ffb4:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000ffb7:	b8 24 00 00 00       	mov    eax,0x24
c000ffbc:	83 e0 fc             	and    eax,0xfffffffc
c000ffbf:	89 c3                	mov    ebx,eax
c000ffc1:	b8 00 00 00 00       	mov    eax,0x0
c000ffc6:	66 90                	xchg   ax,ax
c000ffc8:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000ffcf:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000ffd6:	83 c0 04             	add    eax,0x4
c000ffd9:	39 d8                	cmp    eax,ebx
c000ffdb:	72 eb                	jb     c000ffc8 <ACPI::open(int, int, void*)+0x1c4>
c000ffdd:	83 ec 08             	sub    esp,0x8
c000ffe0:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000ffe6:	50                   	push   eax
c000ffe7:	83 ec 24             	sub    esp,0x24
c000ffea:	89 e1                	mov    ecx,esp
c000ffec:	b8 24 00 00 00       	mov    eax,0x24
c000fff1:	83 e0 fc             	and    eax,0xfffffffc
c000fff4:	89 c3                	mov    ebx,eax
c000fff6:	b8 00 00 00 00       	mov    eax,0x0
c000fffb:	90                   	nop
c000fffc:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c0010003:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c0010006:	83 c0 04             	add    eax,0x4
c0010009:	39 d8                	cmp    eax,ebx
c001000b:	72 ef                	jb     c000fffc <ACPI::open(int, int, void*)+0x1f8>
c001000d:	e8 68 b6 00 00       	call   c001b67a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0010012:	83 c4 30             	add    esp,0x30
c0010015:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0010018:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c001001c:	0f 84 4e ff ff ff    	je     c000ff70 <ACPI::open(int, int, void*)+0x16c>
c0010022:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c0010029:	83 ec 0c             	sub    esp,0xc
c001002c:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c001002f:	e8 9f 7a ff ff       	call   c0007ad3 <malloc>
c0010034:	83 c4 10             	add    esp,0x10
c0010037:	89 c3                	mov    ebx,eax
c0010039:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001003e:	83 ec 04             	sub    esp,0x4
c0010041:	50                   	push   eax
c0010042:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c0010045:	53                   	push   ebx
c0010046:	e8 4b bb ff ff       	call   c000bb96 <File::File(char const*, Process*)>
c001004b:	83 c4 10             	add    esp,0x10
c001004e:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0010051:	83 ec 0c             	sub    esp,0xc
c0010054:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c0010057:	e8 1c be ff ff       	call   c000be78 <File::exists()>
c001005c:	83 c4 10             	add    esp,0x10
c001005f:	0f b6 c0             	movzx  eax,al
c0010062:	85 c0                	test   eax,eax
c0010064:	74 22                	je     c0010088 <ACPI::open(int, int, void*)+0x284>
c0010066:	83 ec 08             	sub    esp,0x8
c0010069:	6a 01                	push   0x1
c001006b:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c001006e:	e8 c6 55 00 00       	call   c0015639 <Thr::loadDLL(char const*, bool)>
c0010073:	83 c4 10             	add    esp,0x10
c0010076:	83 ec 08             	sub    esp,0x8
c0010079:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001007c:	50                   	push   eax
c001007d:	e8 f7 57 00 00       	call   c0015879 <Thr::executeDLL(unsigned long, void*)>
c0010082:	83 c4 10             	add    esp,0x10
c0010085:	8d 76 00             	lea    esi,[esi+0x0]
c0010088:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c001008c:	0f 84 de fe ff ff    	je     c000ff70 <ACPI::open(int, int, void*)+0x16c>
c0010092:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0010095:	8b 00                	mov    eax,DWORD PTR [eax]
c0010097:	83 c0 08             	add    eax,0x8
c001009a:	8b 00                	mov    eax,DWORD PTR [eax]
c001009c:	83 ec 0c             	sub    esp,0xc
c001009f:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c00100a2:	ff d0                	call   eax
c00100a4:	83 c4 10             	add    esp,0x10
c00100a7:	e9 c4 fe ff ff       	jmp    c000ff70 <ACPI::open(int, int, void*)+0x16c>
c00100ac:	83 ec 0c             	sub    esp,0xc
c00100af:	8d 45 b8             	lea    eax,[ebp-0x48]
c00100b2:	50                   	push   eax
c00100b3:	e8 84 fe 00 00       	call   c001ff3c <LinkedList<Device>::~LinkedList()>
c00100b8:	83 c4 10             	add    esp,0x10
c00100bb:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c00100c1:	83 ec 08             	sub    esp,0x8
c00100c4:	6a 01                	push   0x1
c00100c6:	68 5d 21 02 c0       	push   0xc002215d
c00100cb:	e8 69 55 00 00       	call   c0015639 <Thr::loadDLL(char const*, bool)>
c00100d0:	83 c4 10             	add    esp,0x10
c00100d3:	83 ec 08             	sub    esp,0x8
c00100d6:	53                   	push   ebx
c00100d7:	50                   	push   eax
c00100d8:	e8 9c 57 00 00       	call   c0015879 <Thr::executeDLL(unsigned long, void*)>
c00100dd:	83 c4 10             	add    esp,0x10
c00100e0:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00100e5:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c00100eb:	83 e0 04             	and    eax,0x4
c00100ee:	0f b6 c0             	movzx  eax,al
c00100f1:	85 c0                	test   eax,eax
c00100f3:	0f 84 e3 00 00 00    	je     c00101dc <ACPI::open(int, int, void*)+0x3d8>
c00100f9:	83 ec 0c             	sub    esp,0xc
c00100fc:	68 7a 21 02 c0       	push   0xc002217a
c0010101:	e8 d7 0d 00 00       	call   c0010edd <KeSetBootMessage(char const*)>
c0010106:	83 c4 10             	add    esp,0x10
c0010109:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c0010110:	83 ec 0c             	sub    esp,0xc
c0010113:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c0010116:	e8 b8 79 ff ff       	call   c0007ad3 <malloc>
c001011b:	83 c4 10             	add    esp,0x10
c001011e:	89 c3                	mov    ebx,eax
c0010120:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0010125:	83 ec 04             	sub    esp,0x4
c0010128:	50                   	push   eax
c0010129:	68 97 21 02 c0       	push   0xc0022197
c001012e:	53                   	push   ebx
c001012f:	e8 62 ba ff ff       	call   c000bb96 <File::File(char const*, Process*)>
c0010134:	83 c4 10             	add    esp,0x10
c0010137:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c001013a:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c001013e:	74 1c                	je     c001015c <ACPI::open(int, int, void*)+0x358>
c0010140:	83 ec 0c             	sub    esp,0xc
c0010143:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c0010146:	e8 2d bd ff ff       	call   c000be78 <File::exists()>
c001014b:	83 c4 10             	add    esp,0x10
c001014e:	0f b6 c0             	movzx  eax,al
c0010151:	85 c0                	test   eax,eax
c0010153:	74 07                	je     c001015c <ACPI::open(int, int, void*)+0x358>
c0010155:	b0 01                	mov    al,0x1
c0010157:	eb 07                	jmp    c0010160 <ACPI::open(int, int, void*)+0x35c>
c0010159:	8d 76 00             	lea    esi,[esi+0x0]
c001015c:	b0 00                	mov    al,0x0
c001015e:	66 90                	xchg   ax,ax
c0010160:	0f b6 c0             	movzx  eax,al
c0010163:	85 c0                	test   eax,eax
c0010165:	74 21                	je     c0010188 <ACPI::open(int, int, void*)+0x384>
c0010167:	83 ec 08             	sub    esp,0x8
c001016a:	6a 01                	push   0x1
c001016c:	68 97 21 02 c0       	push   0xc0022197
c0010171:	e8 c3 54 00 00       	call   c0015639 <Thr::loadDLL(char const*, bool)>
c0010176:	83 c4 10             	add    esp,0x10
c0010179:	83 ec 08             	sub    esp,0x8
c001017c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001017f:	50                   	push   eax
c0010180:	e8 f4 56 00 00       	call   c0015879 <Thr::executeDLL(unsigned long, void*)>
c0010185:	83 c4 10             	add    esp,0x10
c0010188:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c001018c:	74 1e                	je     c00101ac <ACPI::open(int, int, void*)+0x3a8>
c001018e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0010192:	74 18                	je     c00101ac <ACPI::open(int, int, void*)+0x3a8>
c0010194:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0010197:	8b 00                	mov    eax,DWORD PTR [eax]
c0010199:	83 c0 08             	add    eax,0x8
c001019c:	8b 00                	mov    eax,DWORD PTR [eax]
c001019e:	83 ec 0c             	sub    esp,0xc
c00101a1:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c00101a4:	ff d0                	call   eax
c00101a6:	83 c4 10             	add    esp,0x10
c00101a9:	8d 76 00             	lea    esi,[esi+0x0]
c00101ac:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c00101b1:	83 ec 08             	sub    esp,0x8
c00101b4:	68 b4 21 02 c0       	push   0xc00221b4
c00101b9:	50                   	push   eax
c00101ba:	e8 65 f2 ff ff       	call   c000f424 <findDataTable(unsigned char*, char*)>
c00101bf:	83 c4 10             	add    esp,0x10
c00101c2:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00101c5:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00101c9:	74 11                	je     c00101dc <ACPI::open(int, int, void*)+0x3d8>
c00101cb:	83 ec 08             	sub    esp,0x8
c00101ce:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00101d1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00101d4:	e8 c7 fb ff ff       	call   c000fda0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00101d9:	83 c4 10             	add    esp,0x10
c00101dc:	b8 00 00 00 00       	mov    eax,0x0
c00101e1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00101e4:	c9                   	leave  
c00101e5:	c3                   	ret    

c00101e6 <CPU::close(int, int, void*)>:
c00101e6:	31 c0                	xor    eax,eax
c00101e8:	c3                   	ret    
c00101e9:	90                   	nop

c00101ea <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00101ea:	60                   	pusha  
c00101eb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00101ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00101f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00101f7:	9c                   	pushf  
c00101f8:	fa                   	cli    
c00101f9:	0f 09                	wbinvd 
c00101fb:	0f 30                	wrmsr  
c00101fd:	9d                   	popf   
c00101fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010202:	89 02                	mov    DWORD PTR [edx],eax
c0010204:	61                   	popa   
c0010205:	c3                   	ret    

c0010206 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0010206:	60                   	pusha  
c0010207:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001020b:	9c                   	pushf  
c001020c:	fa                   	cli    
c001020d:	0f 09                	wbinvd 
c001020f:	31 c0                	xor    eax,eax
c0010211:	31 d2                	xor    edx,edx
c0010213:	0f 32                	rdmsr  
c0010215:	9d                   	popf   
c0010216:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001021a:	89 02                	mov    DWORD PTR [edx],eax
c001021c:	61                   	popa   
c001021d:	c3                   	ret    

c001021e <CPU::AMD_K6_writeback(int, int, int)>:
c001021e:	56                   	push   esi
c001021f:	53                   	push   ebx
c0010220:	83 ec 10             	sub    esp,0x10
c0010223:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0010228:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001022c:	75 5d                	jne    c001028b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001022e:	83 f8 08             	cmp    eax,0x8
c0010231:	75 09                	jne    c001023c <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0010233:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0010238:	7e 13                	jle    c001024d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001023a:	eb 30                	jmp    c001026c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001023c:	83 f8 06             	cmp    eax,0x6
c001023f:	7c 4a                	jl     c001028b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0010241:	83 f8 07             	cmp    eax,0x7
c0010244:	7e 07                	jle    c001024d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0010246:	83 f8 09             	cmp    eax,0x9
c0010249:	74 21                	je     c001026c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001024b:	eb 3e                	jmp    c001028b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001024d:	8b 1d dc 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026edc
c0010253:	89 e6                	mov    esi,esp
c0010255:	56                   	push   esi
c0010256:	68 82 00 00 c0       	push   0xc0000082
c001025b:	e8 a6 ff ff ff       	call   c0010206 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0010260:	c1 eb 15             	shr    ebx,0x15
c0010263:	56                   	push   esi
c0010264:	83 e3 7e             	and    ebx,0x7e
c0010267:	6a 00                	push   0x0
c0010269:	53                   	push   ebx
c001026a:	eb 12                	jmp    c001027e <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001026c:	89 e3                	mov    ebx,esp
c001026e:	53                   	push   ebx
c001026f:	68 82 00 00 c0       	push   0xc0000082
c0010274:	e8 8d ff ff ff       	call   c0010206 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0010279:	53                   	push   ebx
c001027a:	6a 00                	push   0x0
c001027c:	6a 00                	push   0x0
c001027e:	68 82 00 00 c0       	push   0xc0000082
c0010283:	e8 62 ff ff ff       	call   c00101ea <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0010288:	83 c4 18             	add    esp,0x18
c001028b:	83 c4 10             	add    esp,0x10
c001028e:	5b                   	pop    ebx
c001028f:	5e                   	pop    esi
c0010290:	c3                   	ret    
c0010291:	90                   	nop

c0010292 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0010292:	55                   	push   ebp
c0010293:	57                   	push   edi
c0010294:	56                   	push   esi
c0010295:	53                   	push   ebx
c0010296:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001029a:	39 05 78 37 02 c0    	cmp    DWORD PTR ds:0xc0023778,eax
c00102a0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00102a4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00102a8:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00102ac:	75 23                	jne    c00102d1 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00102ae:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c00102b3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00102b7:	89 06                	mov    DWORD PTR [esi],eax
c00102b9:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c00102be:	89 07                	mov    DWORD PTR [edi],eax
c00102c0:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c00102c5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00102c8:	a1 80 bd 02 c0       	mov    eax,ds:0xc002bd80
c00102cd:	89 02                	mov    DWORD PTR [edx],eax
c00102cf:	eb 3f                	jmp    c0010310 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00102d1:	31 c9                	xor    ecx,ecx
c00102d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00102d7:	0f a2                	cpuid  
c00102d9:	89 06                	mov    DWORD PTR [esi],eax
c00102db:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00102df:	89 1f                	mov    DWORD PTR [edi],ebx
c00102e1:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00102e4:	89 10                	mov    DWORD PTR [eax],edx
c00102e6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00102ea:	a3 78 37 02 c0       	mov    ds:0xc0023778,eax
c00102ef:	8b 06                	mov    eax,DWORD PTR [esi]
c00102f1:	a3 8c bd 02 c0       	mov    ds:0xc002bd8c,eax
c00102f6:	8b 07                	mov    eax,DWORD PTR [edi]
c00102f8:	a3 88 bd 02 c0       	mov    ds:0xc002bd88,eax
c00102fd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010300:	a3 84 bd 02 c0       	mov    ds:0xc002bd84,eax
c0010305:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010309:	8b 00                	mov    eax,DWORD PTR [eax]
c001030b:	a3 80 bd 02 c0       	mov    ds:0xc002bd80,eax
c0010310:	5b                   	pop    ebx
c0010311:	5e                   	pop    esi
c0010312:	5f                   	pop    edi
c0010313:	5d                   	pop    ebp
c0010314:	c3                   	ret    
c0010315:	90                   	nop

c0010316 <CPU::cpuidCheckEDX(unsigned int)>:
c0010316:	83 ec 10             	sub    esp,0x10
c0010319:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001031d:	50                   	push   eax
c001031e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010322:	50                   	push   eax
c0010323:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010327:	50                   	push   eax
c0010328:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001032c:	50                   	push   eax
c001032d:	6a 01                	push   0x1
c001032f:	e8 5e ff ff ff       	call   c0010292 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010334:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010338:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001033c:	0f 95 c0             	setne  al
c001033f:	83 c4 24             	add    esp,0x24
c0010342:	c3                   	ret    
c0010343:	90                   	nop

c0010344 <CPU::cpuidCheckECX(unsigned int)>:
c0010344:	83 ec 10             	sub    esp,0x10
c0010347:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001034b:	50                   	push   eax
c001034c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010350:	50                   	push   eax
c0010351:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010355:	50                   	push   eax
c0010356:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001035a:	50                   	push   eax
c001035b:	6a 01                	push   0x1
c001035d:	e8 30 ff ff ff       	call   c0010292 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010362:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010366:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001036a:	0f 95 c0             	setne  al
c001036d:	83 c4 24             	add    esp,0x24
c0010370:	c3                   	ret    
c0010371:	90                   	nop

c0010372 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0010372:	83 ec 10             	sub    esp,0x10
c0010375:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010379:	50                   	push   eax
c001037a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001037e:	50                   	push   eax
c001037f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010383:	50                   	push   eax
c0010384:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010388:	50                   	push   eax
c0010389:	6a 07                	push   0x7
c001038b:	e8 02 ff ff ff       	call   c0010292 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010390:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010394:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0010398:	0f 95 c0             	setne  al
c001039b:	83 c4 24             	add    esp,0x24
c001039e:	c3                   	ret    
c001039f:	90                   	nop

c00103a0 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00103a0:	83 ec 10             	sub    esp,0x10
c00103a3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103a7:	50                   	push   eax
c00103a8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103ac:	50                   	push   eax
c00103ad:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103b1:	50                   	push   eax
c00103b2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103b6:	50                   	push   eax
c00103b7:	6a 07                	push   0x7
c00103b9:	e8 d4 fe ff ff       	call   c0010292 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00103be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00103c2:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00103c6:	0f 95 c0             	setne  al
c00103c9:	83 c4 24             	add    esp,0x24
c00103cc:	c3                   	ret    
c00103cd:	90                   	nop

c00103ce <CPU::CPU()>:
c00103ce:	83 ec 0c             	sub    esp,0xc
c00103d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103d5:	83 ec 08             	sub    esp,0x8
c00103d8:	68 d9 22 02 c0       	push   0xc00222d9
c00103dd:	50                   	push   eax
c00103de:	e8 c9 c7 ff ff       	call   c000cbac <Device::Device(char const*)>
c00103e3:	83 c4 10             	add    esp,0x10
c00103e6:	ba 6c 23 02 c0       	mov    edx,0xc002236c
c00103eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103ef:	89 10                	mov    DWORD PTR [eax],edx
c00103f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103f5:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00103ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010403:	05 78 01 00 00       	add    eax,0x178
c0010408:	83 ec 0c             	sub    esp,0xc
c001040b:	50                   	push   eax
c001040c:	e8 6b 6f ff ff       	call   c000737c <GDT::GDT()>
c0010411:	83 c4 10             	add    esp,0x10
c0010414:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010418:	05 7c 09 00 00       	add    eax,0x97c
c001041d:	83 ec 0c             	sub    esp,0xc
c0010420:	50                   	push   eax
c0010421:	e8 a6 71 ff ff       	call   c00075cc <IDT::IDT()>
c0010426:	83 c4 10             	add    esp,0x10
c0010429:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001042d:	05 7c 11 00 00       	add    eax,0x117c
c0010432:	83 ec 0c             	sub    esp,0xc
c0010435:	50                   	push   eax
c0010436:	e8 f1 8a ff ff       	call   c0008f2c <TSS::TSS()>
c001043b:	83 c4 10             	add    esp,0x10
c001043e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010442:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c0010449:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001044d:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c0010457:	90                   	nop
c0010458:	83 c4 0c             	add    esp,0xc
c001045b:	c3                   	ret    

c001045c <CPU::displayFeatures()>:
c001045c:	c3                   	ret    
c001045d:	90                   	nop

c001045e <CPU::detectFeatures()>:
c001045e:	55                   	push   ebp
c001045f:	57                   	push   edi
c0010460:	56                   	push   esi
c0010461:	53                   	push   ebx
c0010462:	83 ec 30             	sub    esp,0x30
c0010465:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010469:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c0010473:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0010479:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c0010480:	6a 0d                	push   0xd
c0010482:	6a 00                	push   0x0
c0010484:	55                   	push   ebp
c0010485:	e8 66 00 ff ff       	call   c00004f0 <memset>
c001048a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001048f:	83 c4 10             	add    esp,0x10
c0010492:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c0010499:	0f 84 db 05 00 00    	je     c0010a7a <CPU::detectFeatures()+0x61c>
c001049f:	83 ec 0c             	sub    esp,0xc
c00104a2:	89 ef                	mov    edi,ebp
c00104a4:	6a 10                	push   0x10
c00104a6:	e8 6b fe ff ff       	call   c0010316 <CPU::cpuidCheckEDX(unsigned int)>
c00104ab:	83 e0 01             	and    eax,0x1
c00104ae:	8d 14 00             	lea    edx,[eax+eax*1]
c00104b1:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00104b7:	83 e0 fd             	and    eax,0xfffffffd
c00104ba:	09 d0                	or     eax,edx
c00104bc:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00104c2:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00104c9:	e8 48 fe ff ff       	call   c0010316 <CPU::cpuidCheckEDX(unsigned int)>
c00104ce:	83 e0 01             	and    eax,0x1
c00104d1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00104d8:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00104de:	83 e0 fb             	and    eax,0xfffffffb
c00104e1:	09 d0                	or     eax,edx
c00104e3:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00104e9:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00104f0:	e8 21 fe ff ff       	call   c0010316 <CPU::cpuidCheckEDX(unsigned int)>
c00104f5:	83 e0 01             	and    eax,0x1
c00104f8:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00104ff:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010505:	83 e0 f7             	and    eax,0xfffffff7
c0010508:	09 d0                	or     eax,edx
c001050a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010510:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0010517:	e8 fa fd ff ff       	call   c0010316 <CPU::cpuidCheckEDX(unsigned int)>
c001051c:	83 e0 01             	and    eax,0x1
c001051f:	c1 e0 04             	shl    eax,0x4
c0010522:	89 c2                	mov    edx,eax
c0010524:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001052a:	83 e0 ef             	and    eax,0xffffffef
c001052d:	09 d0                	or     eax,edx
c001052f:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010535:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001053c:	e8 d5 fd ff ff       	call   c0010316 <CPU::cpuidCheckEDX(unsigned int)>
c0010541:	83 e0 01             	and    eax,0x1
c0010544:	c1 e0 05             	shl    eax,0x5
c0010547:	89 c2                	mov    edx,eax
c0010549:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001054f:	83 e0 df             	and    eax,0xffffffdf
c0010552:	09 d0                	or     eax,edx
c0010554:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001055a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0010561:	e8 b0 fd ff ff       	call   c0010316 <CPU::cpuidCheckEDX(unsigned int)>
c0010566:	83 e0 01             	and    eax,0x1
c0010569:	8d 14 00             	lea    edx,[eax+eax*1]
c001056c:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010572:	83 e0 fd             	and    eax,0xfffffffd
c0010575:	09 d0                	or     eax,edx
c0010577:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001057d:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0010584:	e8 8d fd ff ff       	call   c0010316 <CPU::cpuidCheckEDX(unsigned int)>
c0010589:	83 e0 01             	and    eax,0x1
c001058c:	c1 e0 06             	shl    eax,0x6
c001058f:	89 c2                	mov    edx,eax
c0010591:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010597:	83 e0 bf             	and    eax,0xffffffbf
c001059a:	09 d0                	or     eax,edx
c001059c:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00105a2:	58                   	pop    eax
c00105a3:	8d 44 24 28          	lea    eax,[esp+0x28]
c00105a7:	50                   	push   eax
c00105a8:	8d 44 24 28          	lea    eax,[esp+0x28]
c00105ac:	50                   	push   eax
c00105ad:	8d 74 24 28          	lea    esi,[esp+0x28]
c00105b1:	56                   	push   esi
c00105b2:	8d 44 24 28          	lea    eax,[esp+0x28]
c00105b6:	50                   	push   eax
c00105b7:	6a 00                	push   0x0
c00105b9:	e8 d4 fc ff ff       	call   c0010292 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00105be:	b8 04 00 00 00       	mov    eax,0x4
c00105c3:	89 c1                	mov    ecx,eax
c00105c5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00105c7:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c00105cd:	89 c1                	mov    ecx,eax
c00105cf:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00105d3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00105d5:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c00105db:	89 c1                	mov    ecx,eax
c00105dd:	8d 74 24 38          	lea    esi,[esp+0x38]
c00105e1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00105e3:	83 c4 18             	add    esp,0x18
c00105e6:	68 e8 21 02 c0       	push   0xc00221e8
c00105eb:	55                   	push   ebp
c00105ec:	e8 8f 01 ff ff       	call   c0000780 <strcmp>
c00105f1:	83 c4 10             	add    esp,0x10
c00105f4:	85 c0                	test   eax,eax
c00105f6:	75 0f                	jne    c0010607 <CPU::detectFeatures()+0x1a9>
c00105f8:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0010602:	e9 22 02 00 00       	jmp    c0010829 <CPU::detectFeatures()+0x3cb>
c0010607:	50                   	push   eax
c0010608:	50                   	push   eax
c0010609:	68 f5 21 02 c0       	push   0xc00221f5
c001060e:	55                   	push   ebp
c001060f:	e8 6c 01 ff ff       	call   c0000780 <strcmp>
c0010614:	83 c4 10             	add    esp,0x10
c0010617:	85 c0                	test   eax,eax
c0010619:	74 dd                	je     c00105f8 <CPU::detectFeatures()+0x19a>
c001061b:	50                   	push   eax
c001061c:	50                   	push   eax
c001061d:	68 02 22 02 c0       	push   0xc0022202
c0010622:	55                   	push   ebp
c0010623:	e8 58 01 ff ff       	call   c0000780 <strcmp>
c0010628:	83 c4 10             	add    esp,0x10
c001062b:	85 c0                	test   eax,eax
c001062d:	74 2a                	je     c0010659 <CPU::detectFeatures()+0x1fb>
c001062f:	50                   	push   eax
c0010630:	50                   	push   eax
c0010631:	68 0f 22 02 c0       	push   0xc002220f
c0010636:	55                   	push   ebp
c0010637:	e8 44 01 ff ff       	call   c0000780 <strcmp>
c001063c:	83 c4 10             	add    esp,0x10
c001063f:	85 c0                	test   eax,eax
c0010641:	74 16                	je     c0010659 <CPU::detectFeatures()+0x1fb>
c0010643:	50                   	push   eax
c0010644:	50                   	push   eax
c0010645:	68 1c 22 02 c0       	push   0xc002221c
c001064a:	55                   	push   ebp
c001064b:	e8 30 01 ff ff       	call   c0000780 <strcmp>
c0010650:	83 c4 10             	add    esp,0x10
c0010653:	85 c0                	test   eax,eax
c0010655:	74 48                	je     c001069f <CPU::detectFeatures()+0x241>
c0010657:	eb 0f                	jmp    c0010668 <CPU::detectFeatures()+0x20a>
c0010659:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0010663:	e9 c1 01 00 00       	jmp    c0010829 <CPU::detectFeatures()+0x3cb>
c0010668:	50                   	push   eax
c0010669:	50                   	push   eax
c001066a:	68 29 22 02 c0       	push   0xc0022229
c001066f:	55                   	push   ebp
c0010670:	e8 0b 01 ff ff       	call   c0000780 <strcmp>
c0010675:	83 c4 10             	add    esp,0x10
c0010678:	85 c0                	test   eax,eax
c001067a:	74 23                	je     c001069f <CPU::detectFeatures()+0x241>
c001067c:	57                   	push   edi
c001067d:	57                   	push   edi
c001067e:	68 36 22 02 c0       	push   0xc0022236
c0010683:	55                   	push   ebp
c0010684:	e8 f7 00 ff ff       	call   c0000780 <strcmp>
c0010689:	83 c4 10             	add    esp,0x10
c001068c:	85 c0                	test   eax,eax
c001068e:	75 1e                	jne    c00106ae <CPU::detectFeatures()+0x250>
c0010690:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001069a:	e9 8a 01 00 00       	jmp    c0010829 <CPU::detectFeatures()+0x3cb>
c001069f:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00106a9:	e9 7b 01 00 00       	jmp    c0010829 <CPU::detectFeatures()+0x3cb>
c00106ae:	56                   	push   esi
c00106af:	56                   	push   esi
c00106b0:	68 43 22 02 c0       	push   0xc0022243
c00106b5:	55                   	push   ebp
c00106b6:	e8 c5 00 ff ff       	call   c0000780 <strcmp>
c00106bb:	83 c4 10             	add    esp,0x10
c00106be:	85 c0                	test   eax,eax
c00106c0:	75 0f                	jne    c00106d1 <CPU::detectFeatures()+0x273>
c00106c2:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00106cc:	e9 58 01 00 00       	jmp    c0010829 <CPU::detectFeatures()+0x3cb>
c00106d1:	51                   	push   ecx
c00106d2:	51                   	push   ecx
c00106d3:	68 02 22 02 c0       	push   0xc0022202
c00106d8:	55                   	push   ebp
c00106d9:	e8 a2 00 ff ff       	call   c0000780 <strcmp>
c00106de:	83 c4 10             	add    esp,0x10
c00106e1:	85 c0                	test   eax,eax
c00106e3:	75 0f                	jne    c00106f4 <CPU::detectFeatures()+0x296>
c00106e5:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00106ef:	e9 35 01 00 00       	jmp    c0010829 <CPU::detectFeatures()+0x3cb>
c00106f4:	52                   	push   edx
c00106f5:	52                   	push   edx
c00106f6:	68 50 22 02 c0       	push   0xc0022250
c00106fb:	55                   	push   ebp
c00106fc:	e8 7f 00 ff ff       	call   c0000780 <strcmp>
c0010701:	83 c4 10             	add    esp,0x10
c0010704:	85 c0                	test   eax,eax
c0010706:	75 0f                	jne    c0010717 <CPU::detectFeatures()+0x2b9>
c0010708:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0010712:	e9 12 01 00 00       	jmp    c0010829 <CPU::detectFeatures()+0x3cb>
c0010717:	50                   	push   eax
c0010718:	50                   	push   eax
c0010719:	68 5d 22 02 c0       	push   0xc002225d
c001071e:	55                   	push   ebp
c001071f:	e8 5c 00 ff ff       	call   c0000780 <strcmp>
c0010724:	83 c4 10             	add    esp,0x10
c0010727:	85 c0                	test   eax,eax
c0010729:	75 0f                	jne    c001073a <CPU::detectFeatures()+0x2dc>
c001072b:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0010735:	e9 ef 00 00 00       	jmp    c0010829 <CPU::detectFeatures()+0x3cb>
c001073a:	50                   	push   eax
c001073b:	50                   	push   eax
c001073c:	68 6a 22 02 c0       	push   0xc002226a
c0010741:	55                   	push   ebp
c0010742:	e8 39 00 ff ff       	call   c0000780 <strcmp>
c0010747:	83 c4 10             	add    esp,0x10
c001074a:	85 c0                	test   eax,eax
c001074c:	75 0f                	jne    c001075d <CPU::detectFeatures()+0x2ff>
c001074e:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0010758:	e9 cc 00 00 00       	jmp    c0010829 <CPU::detectFeatures()+0x3cb>
c001075d:	50                   	push   eax
c001075e:	50                   	push   eax
c001075f:	68 77 22 02 c0       	push   0xc0022277
c0010764:	55                   	push   ebp
c0010765:	e8 16 00 ff ff       	call   c0000780 <strcmp>
c001076a:	83 c4 10             	add    esp,0x10
c001076d:	85 c0                	test   eax,eax
c001076f:	75 0f                	jne    c0010780 <CPU::detectFeatures()+0x322>
c0010771:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001077b:	e9 a9 00 00 00       	jmp    c0010829 <CPU::detectFeatures()+0x3cb>
c0010780:	50                   	push   eax
c0010781:	50                   	push   eax
c0010782:	68 84 22 02 c0       	push   0xc0022284
c0010787:	55                   	push   ebp
c0010788:	e8 f3 ff fe ff       	call   c0000780 <strcmp>
c001078d:	83 c4 10             	add    esp,0x10
c0010790:	85 c0                	test   eax,eax
c0010792:	75 0f                	jne    c00107a3 <CPU::detectFeatures()+0x345>
c0010794:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001079e:	e9 86 00 00 00       	jmp    c0010829 <CPU::detectFeatures()+0x3cb>
c00107a3:	50                   	push   eax
c00107a4:	50                   	push   eax
c00107a5:	68 91 22 02 c0       	push   0xc0022291
c00107aa:	55                   	push   ebp
c00107ab:	e8 d0 ff fe ff       	call   c0000780 <strcmp>
c00107b0:	83 c4 10             	add    esp,0x10
c00107b3:	85 c0                	test   eax,eax
c00107b5:	75 0c                	jne    c00107c3 <CPU::detectFeatures()+0x365>
c00107b7:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00107c1:	eb 66                	jmp    c0010829 <CPU::detectFeatures()+0x3cb>
c00107c3:	50                   	push   eax
c00107c4:	50                   	push   eax
c00107c5:	68 9e 22 02 c0       	push   0xc002229e
c00107ca:	55                   	push   ebp
c00107cb:	e8 b0 ff fe ff       	call   c0000780 <strcmp>
c00107d0:	83 c4 10             	add    esp,0x10
c00107d3:	85 c0                	test   eax,eax
c00107d5:	75 0c                	jne    c00107e3 <CPU::detectFeatures()+0x385>
c00107d7:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00107e1:	eb 46                	jmp    c0010829 <CPU::detectFeatures()+0x3cb>
c00107e3:	57                   	push   edi
c00107e4:	57                   	push   edi
c00107e5:	68 ab 22 02 c0       	push   0xc00222ab
c00107ea:	55                   	push   ebp
c00107eb:	e8 90 ff fe ff       	call   c0000780 <strcmp>
c00107f0:	83 c4 10             	add    esp,0x10
c00107f3:	85 c0                	test   eax,eax
c00107f5:	74 e0                	je     c00107d7 <CPU::detectFeatures()+0x379>
c00107f7:	56                   	push   esi
c00107f8:	56                   	push   esi
c00107f9:	68 b8 22 02 c0       	push   0xc00222b8
c00107fe:	55                   	push   ebp
c00107ff:	e8 7c ff fe ff       	call   c0000780 <strcmp>
c0010804:	83 c4 10             	add    esp,0x10
c0010807:	85 c0                	test   eax,eax
c0010809:	74 cc                	je     c00107d7 <CPU::detectFeatures()+0x379>
c001080b:	51                   	push   ecx
c001080c:	51                   	push   ecx
c001080d:	68 c5 22 02 c0       	push   0xc00222c5
c0010812:	55                   	push   ebp
c0010813:	e8 68 ff fe ff       	call   c0000780 <strcmp>
c0010818:	83 c4 10             	add    esp,0x10
c001081b:	85 c0                	test   eax,eax
c001081d:	74 b8                	je     c00107d7 <CPU::detectFeatures()+0x379>
c001081f:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0010829:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001082e:	0f 86 be 00 00 00    	jbe    c00108f2 <CPU::detectFeatures()+0x494>
c0010834:	83 ec 0c             	sub    esp,0xc
c0010837:	68 80 00 00 00       	push   0x80
c001083c:	e8 31 fb ff ff       	call   c0010372 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010841:	83 e0 01             	and    eax,0x1
c0010844:	c1 e0 06             	shl    eax,0x6
c0010847:	89 c2                	mov    edx,eax
c0010849:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001084f:	83 e0 bf             	and    eax,0xffffffbf
c0010852:	09 d0                	or     eax,edx
c0010854:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001085a:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0010861:	e8 0c fb ff ff       	call   c0010372 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010866:	83 e0 01             	and    eax,0x1
c0010869:	c1 e0 04             	shl    eax,0x4
c001086c:	89 c2                	mov    edx,eax
c001086e:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010874:	83 e0 ef             	and    eax,0xffffffef
c0010877:	09 d0                	or     eax,edx
c0010879:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001087f:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0010886:	e8 e7 fa ff ff       	call   c0010372 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001088b:	89 c2                	mov    edx,eax
c001088d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010893:	c1 e2 07             	shl    edx,0x7
c0010896:	83 e0 7f             	and    eax,0x7f
c0010899:	09 d0                	or     eax,edx
c001089b:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00108a1:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00108a8:	e8 f3 fa ff ff       	call   c00103a0 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00108ad:	83 e0 01             	and    eax,0x1
c00108b0:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00108b7:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00108bd:	83 e0 f7             	and    eax,0xfffffff7
c00108c0:	09 d0                	or     eax,edx
c00108c2:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00108c8:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00108cf:	e8 cc fa ff ff       	call   c00103a0 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00108d4:	83 c4 10             	add    esp,0x10
c00108d7:	83 e0 01             	and    eax,0x1
c00108da:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00108e1:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00108e7:	83 e0 fb             	and    eax,0xfffffffb
c00108ea:	09 d0                	or     eax,edx
c00108ec:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00108f2:	83 ec 0c             	sub    esp,0xc
c00108f5:	8d 44 24 28          	lea    eax,[esp+0x28]
c00108f9:	50                   	push   eax
c00108fa:	8d 44 24 28          	lea    eax,[esp+0x28]
c00108fe:	50                   	push   eax
c00108ff:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0010903:	57                   	push   edi
c0010904:	8d 74 24 28          	lea    esi,[esp+0x28]
c0010908:	56                   	push   esi
c0010909:	6a 01                	push   0x1
c001090b:	e8 82 f9 ff ff       	call   c0010292 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010910:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010914:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001091a:	89 c1                	mov    ecx,eax
c001091c:	83 e1 0f             	and    ecx,0xf
c001091f:	83 e2 f0             	and    edx,0xfffffff0
c0010922:	09 ca                	or     edx,ecx
c0010924:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001092a:	89 c2                	mov    edx,eax
c001092c:	c1 ea 04             	shr    edx,0x4
c001092f:	83 e2 0f             	and    edx,0xf
c0010932:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010936:	89 d1                	mov    ecx,edx
c0010938:	83 c4 20             	add    esp,0x20
c001093b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0010941:	c1 e1 06             	shl    ecx,0x6
c0010944:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c001094a:	09 ca                	or     edx,ecx
c001094c:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0010953:	89 c2                	mov    edx,eax
c0010955:	c1 ea 08             	shr    edx,0x8
c0010958:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c001095e:	83 e2 0f             	and    edx,0xf
c0010961:	89 d5                	mov    ebp,edx
c0010963:	83 e5 03             	and    ebp,0x3
c0010966:	c1 e5 06             	shl    ebp,0x6
c0010969:	83 e1 3f             	and    ecx,0x3f
c001096c:	09 e9                	or     ecx,ebp
c001096e:	89 d5                	mov    ebp,edx
c0010970:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c0010976:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c001097c:	c1 ed 02             	shr    ebp,0x2
c001097f:	83 e1 c0             	and    ecx,0xffffffc0
c0010982:	09 e9                	or     ecx,ebp
c0010984:	89 c5                	mov    ebp,eax
c0010986:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001098c:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c0010992:	c1 ed 08             	shr    ebp,0x8
c0010995:	83 e5 30             	and    ebp,0x30
c0010998:	83 e1 cf             	and    ecx,0xffffffcf
c001099b:	09 e9                	or     ecx,ebp
c001099d:	83 fa 06             	cmp    edx,0x6
c00109a0:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c00109a6:	74 05                	je     c00109ad <CPU::detectFeatures()+0x54f>
c00109a8:	83 fa 0f             	cmp    edx,0xf
c00109ab:	75 64                	jne    c0010a11 <CPU::detectFeatures()+0x5b3>
c00109ad:	89 c1                	mov    ecx,eax
c00109af:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00109b5:	c1 e9 10             	shr    ecx,0x10
c00109b8:	c1 e1 04             	shl    ecx,0x4
c00109bb:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c00109bf:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c00109c5:	0f b6 c9             	movzx  ecx,cl
c00109c8:	c1 e1 06             	shl    ecx,0x6
c00109cb:	09 e9                	or     ecx,ebp
c00109cd:	83 fa 0f             	cmp    edx,0xf
c00109d0:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c00109d7:	75 38                	jne    c0010a11 <CPU::detectFeatures()+0x5b3>
c00109d9:	c1 e8 14             	shr    eax,0x14
c00109dc:	83 c0 0f             	add    eax,0xf
c00109df:	0f b6 c0             	movzx  eax,al
c00109e2:	89 c2                	mov    edx,eax
c00109e4:	c1 e8 02             	shr    eax,0x2
c00109e7:	83 e2 03             	and    edx,0x3
c00109ea:	89 d1                	mov    ecx,edx
c00109ec:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00109f2:	c1 e1 06             	shl    ecx,0x6
c00109f5:	83 e2 3f             	and    edx,0x3f
c00109f8:	09 ca                	or     edx,ecx
c00109fa:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0010a00:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0010a06:	83 e2 c0             	and    edx,0xffffffc0
c0010a09:	09 d0                	or     eax,edx
c0010a0b:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c0010a11:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010a17:	83 ec 0c             	sub    esp,0xc
c0010a1a:	83 c8 07             	or     eax,0x7
c0010a1d:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010a23:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010a27:	50                   	push   eax
c0010a28:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0010a2c:	55                   	push   ebp
c0010a2d:	57                   	push   edi
c0010a2e:	56                   	push   esi
c0010a2f:	68 00 00 00 80       	push   0x80000000
c0010a34:	e8 59 f8 ff ff       	call   c0010292 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010a39:	83 c4 20             	add    esp,0x20
c0010a3c:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0010a44:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0010a48:	76 1e                	jbe    c0010a68 <CPU::detectFeatures()+0x60a>
c0010a4a:	83 ec 0c             	sub    esp,0xc
c0010a4d:	50                   	push   eax
c0010a4e:	55                   	push   ebp
c0010a4f:	57                   	push   edi
c0010a50:	56                   	push   esi
c0010a51:	68 01 00 00 80       	push   0x80000001
c0010a56:	e8 37 f8 ff ff       	call   c0010292 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010a5b:	83 c4 20             	add    esp,0x20
c0010a5e:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0010a68:	52                   	push   edx
c0010a69:	52                   	push   edx
c0010a6a:	68 d1 22 02 c0       	push   0xc00222d1
c0010a6f:	53                   	push   ebx
c0010a70:	e8 29 c1 ff ff       	call   c000cb9e <Device::setName(char const*)>
c0010a75:	83 c4 10             	add    esp,0x10
c0010a78:	eb 69                	jmp    c0010ae3 <CPU::detectFeatures()+0x685>
c0010a7a:	50                   	push   eax
c0010a7b:	50                   	push   eax
c0010a7c:	68 36 22 02 c0       	push   0xc0022236
c0010a81:	55                   	push   ebp
c0010a82:	e8 c9 fb fe ff       	call   c0000650 <strcpy>
c0010a87:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010a91:	e8 2d f7 fe ff       	call   c00001c3 <is486>
c0010a96:	83 c4 10             	add    esp,0x10
c0010a99:	85 c0                	test   eax,eax
c0010a9b:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010aa1:	74 1f                	je     c0010ac2 <CPU::detectFeatures()+0x664>
c0010aa3:	83 c8 07             	or     eax,0x7
c0010aa6:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010aac:	0f 20 c0             	mov    eax,cr0
c0010aaf:	83 e0 14             	and    eax,0x14
c0010ab2:	83 f8 04             	cmp    eax,0x4
c0010ab5:	75 10                	jne    c0010ac7 <CPU::detectFeatures()+0x669>
c0010ab7:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010abd:	83 e0 fd             	and    eax,0xfffffffd
c0010ac0:	eb 1b                	jmp    c0010add <CPU::detectFeatures()+0x67f>
c0010ac2:	83 e0 f8             	and    eax,0xfffffff8
c0010ac5:	eb df                	jmp    c0010aa6 <CPU::detectFeatures()+0x648>
c0010ac7:	e8 d2 f6 fe ff       	call   c000019e <hasLegacyFPU>
c0010acc:	83 e0 01             	and    eax,0x1
c0010acf:	8d 14 00             	lea    edx,[eax+eax*1]
c0010ad2:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010ad8:	83 e0 fd             	and    eax,0xfffffffd
c0010adb:	09 d0                	or     eax,edx
c0010add:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010ae3:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c0010aea:	74 17                	je     c0010b03 <CPU::detectFeatures()+0x6a5>
c0010aec:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c0010af2:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c0010af8:	83 c8 10             	or     eax,0x10
c0010afb:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c0010b01:	eb 20                	jmp    c0010b23 <CPU::detectFeatures()+0x6c5>
c0010b03:	e8 96 f6 fe ff       	call   c000019e <hasLegacyFPU>
c0010b08:	83 e0 01             	and    eax,0x1
c0010b0b:	8d 14 00             	lea    edx,[eax+eax*1]
c0010b0e:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010b14:	83 e0 fd             	and    eax,0xfffffffd
c0010b17:	09 d0                	or     eax,edx
c0010b19:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010b1f:	a8 02                	test   al,0x2
c0010b21:	75 c9                	jne    c0010aec <CPU::detectFeatures()+0x68e>
c0010b23:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0010b2a:	83 c4 2c             	add    esp,0x2c
c0010b2d:	5b                   	pop    ebx
c0010b2e:	5e                   	pop    esi
c0010b2f:	5f                   	pop    edi
c0010b30:	5d                   	pop    ebp
c0010b31:	c3                   	ret    

c0010b32 <CPU::setupSMEP()>:
c0010b32:	0f 20 e0             	mov    eax,cr4
c0010b35:	0d 00 00 10 00       	or     eax,0x100000
c0010b3a:	0f 22 e0             	mov    cr4,eax
c0010b3d:	c3                   	ret    

c0010b3e <CPU::setupUMIP()>:
c0010b3e:	0f 20 e0             	mov    eax,cr4
c0010b41:	80 cc 08             	or     ah,0x8
c0010b44:	0f 22 e0             	mov    cr4,eax
c0010b47:	c3                   	ret    

c0010b48 <CPU::setupTSC()>:
c0010b48:	0f 20 e0             	mov    eax,cr4
c0010b4b:	83 c8 04             	or     eax,0x4
c0010b4e:	0f 22 e0             	mov    cr4,eax
c0010b51:	c3                   	ret    

c0010b52 <CPU::setupLargePages()>:
c0010b52:	0f 20 e0             	mov    eax,cr4
c0010b55:	83 c8 10             	or     eax,0x10
c0010b58:	0f 22 e0             	mov    cr4,eax
c0010b5b:	c3                   	ret    

c0010b5c <CPU::setupPAT()>:
c0010b5c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010b61:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010b68:	74 2c                	je     c0010b96 <CPU::setupPAT()+0x3a>
c0010b6a:	53                   	push   ebx
c0010b6b:	83 ec 10             	sub    esp,0x10
c0010b6e:	68 77 02 00 00       	push   0x277
c0010b73:	50                   	push   eax
c0010b74:	e8 69 65 ff ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c0010b79:	83 e2 f8             	and    edx,0xfffffff8
c0010b7c:	83 ca 01             	or     edx,0x1
c0010b7f:	52                   	push   edx
c0010b80:	50                   	push   eax
c0010b81:	68 77 02 00 00       	push   0x277
c0010b86:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0010b8c:	e8 7d 65 ff ff       	call   c000710e <Computer::wrmsr(unsigned int, unsigned long long)>
c0010b91:	83 c4 28             	add    esp,0x28
c0010b94:	5b                   	pop    ebx
c0010b95:	c3                   	ret    
c0010b96:	c3                   	ret    
c0010b97:	90                   	nop

c0010b98 <CPU::setupMTRR()>:
c0010b98:	c3                   	ret    
c0010b99:	90                   	nop

c0010b9a <CPU::setupGlobalPages()>:
c0010b9a:	0f 20 e0             	mov    eax,cr4
c0010b9d:	0c 80                	or     al,0x80
c0010b9f:	0f 22 e0             	mov    cr4,eax
c0010ba2:	c3                   	ret    
c0010ba3:	90                   	nop

c0010ba4 <CPU::allowUsermodeDataAccess()>:
c0010ba4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ba8:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010baf:	74 03                	je     c0010bb4 <CPU::allowUsermodeDataAccess()+0x10>
c0010bb1:	0f 01 cb             	stac   
c0010bb4:	c3                   	ret    
c0010bb5:	90                   	nop

c0010bb6 <CPU::prohibitUsermodeDataAccess()>:
c0010bb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bba:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010bc1:	74 03                	je     c0010bc6 <CPU::prohibitUsermodeDataAccess()+0x10>
c0010bc3:	0f 01 ca             	clac   
c0010bc6:	c3                   	ret    
c0010bc7:	90                   	nop

c0010bc8 <CPU::setupSMAP()>:
c0010bc8:	0f 20 e0             	mov    eax,cr4
c0010bcb:	0d 00 00 20 00       	or     eax,0x200000
c0010bd0:	0f 22 e0             	mov    cr4,eax
c0010bd3:	eb e1                	jmp    c0010bb6 <CPU::prohibitUsermodeDataAccess()>
c0010bd5:	90                   	nop

c0010bd6 <CPU::setupFeatures()>:
c0010bd6:	53                   	push   ebx
c0010bd7:	83 ec 08             	sub    esp,0x8
c0010bda:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010bde:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0010be5:	74 18                	je     c0010bff <CPU::setupFeatures()+0x29>
c0010be7:	83 ec 0c             	sub    esp,0xc
c0010bea:	68 dd 22 02 c0       	push   0xc00222dd
c0010bef:	e8 16 9d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010bf4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010bf7:	e8 42 ff ff ff       	call   c0010b3e <CPU::setupUMIP()>
c0010bfc:	83 c4 10             	add    esp,0x10
c0010bff:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0010c06:	74 18                	je     c0010c20 <CPU::setupFeatures()+0x4a>
c0010c08:	83 ec 0c             	sub    esp,0xc
c0010c0b:	68 e7 22 02 c0       	push   0xc00222e7
c0010c10:	e8 f5 9c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010c15:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c18:	e8 2b ff ff ff       	call   c0010b48 <CPU::setupTSC()>
c0010c1d:	83 c4 10             	add    esp,0x10
c0010c20:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010c27:	74 18                	je     c0010c41 <CPU::setupFeatures()+0x6b>
c0010c29:	83 ec 0c             	sub    esp,0xc
c0010c2c:	68 f0 22 02 c0       	push   0xc00222f0
c0010c31:	e8 d4 9c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010c36:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c39:	e8 14 ff ff ff       	call   c0010b52 <CPU::setupLargePages()>
c0010c3e:	83 c4 10             	add    esp,0x10
c0010c41:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010c48:	74 18                	je     c0010c62 <CPU::setupFeatures()+0x8c>
c0010c4a:	83 ec 0c             	sub    esp,0xc
c0010c4d:	68 f9 22 02 c0       	push   0xc00222f9
c0010c52:	e8 b3 9c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010c57:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c5a:	e8 3b ff ff ff       	call   c0010b9a <CPU::setupGlobalPages()>
c0010c5f:	83 c4 10             	add    esp,0x10
c0010c62:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010c69:	74 18                	je     c0010c83 <CPU::setupFeatures()+0xad>
c0010c6b:	83 ec 0c             	sub    esp,0xc
c0010c6e:	68 0b 23 02 c0       	push   0xc002230b
c0010c73:	e8 92 9c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010c78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c7b:	e8 dc fe ff ff       	call   c0010b5c <CPU::setupPAT()>
c0010c80:	83 c4 10             	add    esp,0x10
c0010c83:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010c8a:	74 11                	je     c0010c9d <CPU::setupFeatures()+0xc7>
c0010c8c:	c7 44 24 10 14 23 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022314
c0010c94:	83 c4 08             	add    esp,0x8
c0010c97:	5b                   	pop    ebx
c0010c98:	e9 6d 9c ff ff       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>
c0010c9d:	83 c4 08             	add    esp,0x8
c0010ca0:	5b                   	pop    ebx
c0010ca1:	c3                   	ret    

c0010ca2 <CPU::open(int, int, void*)>:
c0010ca2:	55                   	push   ebp
c0010ca3:	57                   	push   edi
c0010ca4:	56                   	push   esi
c0010ca5:	53                   	push   ebx
c0010ca6:	83 ec 18             	sub    esp,0x18
c0010ca9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010cad:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0010cb1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010cb5:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010cbb:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c0010cc1:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c0010cc7:	50                   	push   eax
c0010cc8:	e8 11 67 ff ff       	call   c00073de <GDT::setup()>
c0010ccd:	83 c4 0c             	add    esp,0xc
c0010cd0:	6a 00                	push   0x0
c0010cd2:	68 ef be ad de       	push   0xdeadbeef
c0010cd7:	55                   	push   ebp
c0010cd8:	e8 93 82 ff ff       	call   c0008f70 <TSS::setup(unsigned long, unsigned long)>
c0010cdd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010ce0:	e8 6b 82 ff ff       	call   c0008f50 <TSS::flush()>
c0010ce5:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010ceb:	89 04 24             	mov    DWORD PTR [esp],eax
c0010cee:	e8 4f 69 ff ff       	call   c0007642 <IDT::setup()>
c0010cf3:	b8 00 04 00 00       	mov    eax,0x400
c0010cf8:	0f 23 f8             	mov    db7,eax
c0010cfb:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010d05:	e8 d8 70 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0010d0a:	83 c4 10             	add    esp,0x10
c0010d0d:	85 f6                	test   esi,esi
c0010d0f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010d15:	89 38                	mov    DWORD PTR [eax],edi
c0010d17:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010d1d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010d20:	74 10                	je     c0010d32 <CPU::open(int, int, void*)+0x90>
c0010d22:	50                   	push   eax
c0010d23:	50                   	push   eax
c0010d24:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010d2a:	56                   	push   esi
c0010d2b:	e8 5c 8b ff ff       	call   c000988c <VAS::setCPUSpecific(unsigned long)>
c0010d30:	eb 0d                	jmp    c0010d3f <CPU::open(int, int, void*)+0x9d>
c0010d32:	83 ec 0c             	sub    esp,0xc
c0010d35:	68 1e 23 02 c0       	push   0xc002231e
c0010d3a:	e8 9c 08 00 00       	call   c00115db <KePanic(char const*)>
c0010d3f:	83 c4 10             	add    esp,0x10
c0010d42:	83 ec 0c             	sub    esp,0xc
c0010d45:	68 2c 23 02 c0       	push   0xc002232c
c0010d4a:	e8 8e 01 00 00       	call   c0010edd <KeSetBootMessage(char const*)>
c0010d4f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d52:	e8 07 f7 ff ff       	call   c001045e <CPU::detectFeatures()>
c0010d57:	c7 04 24 4f 23 02 c0 	mov    DWORD PTR [esp],0xc002234f
c0010d5e:	e8 7a 01 00 00       	call   c0010edd <KeSetBootMessage(char const*)>
c0010d63:	e8 fb 73 00 00       	call   c0018163 <HalInitialise()>
c0010d68:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c0010d6d:	83 e0 10             	and    eax,0x10
c0010d70:	83 f8 01             	cmp    eax,0x1
c0010d73:	19 c0                	sbb    eax,eax
c0010d75:	83 e0 46             	and    eax,0x46
c0010d78:	83 c0 1e             	add    eax,0x1e
c0010d7b:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d7e:	e8 c2 d6 ff ff       	call   c000e445 <setupTimer(int)>
c0010d83:	83 c4 10             	add    esp,0x10
c0010d86:	f6 05 d0 6e 02 c0 20 	test   BYTE PTR ds:0xc0026ed0,0x20
c0010d8d:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010d93:	74 0c                	je     c0010da1 <CPU::open(int, int, void*)+0xff>
c0010d95:	83 ec 0c             	sub    esp,0xc
c0010d98:	53                   	push   ebx
c0010d99:	e8 38 fe ff ff       	call   c0010bd6 <CPU::setupFeatures()>
c0010d9e:	83 c4 10             	add    esp,0x10
c0010da1:	83 c4 0c             	add    esp,0xc
c0010da4:	31 c0                	xor    eax,eax
c0010da6:	5b                   	pop    ebx
c0010da7:	5e                   	pop    esi
c0010da8:	5f                   	pop    edi
c0010da9:	5d                   	pop    ebp
c0010daa:	c3                   	ret    

c0010dab <KeInitialiseAtexit()>:
c0010dab:	83 ec 10             	sub    esp,0x10
c0010dae:	6a 60                	push   0x60
c0010db0:	6a 00                	push   0x0
c0010db2:	68 20 be 02 c0       	push   0xc002be20
c0010db7:	c7 05 a0 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bda0,0x0
c0010dc1:	e8 2a f7 fe ff       	call   c00004f0 <memset>
c0010dc6:	83 c4 1c             	add    esp,0x1c
c0010dc9:	c3                   	ret    

c0010dca <KeRegisterAtexit(void (*)(void*), void*)>:
c0010dca:	a1 a0 bd 02 c0       	mov    eax,ds:0xc002bda0
c0010dcf:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010dd3:	89 14 85 20 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd41e0],edx
c0010dda:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010dde:	89 14 85 c0 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4240],edx
c0010de5:	40                   	inc    eax
c0010de6:	a3 a0 bd 02 c0       	mov    ds:0xc002bda0,eax
c0010deb:	83 f8 17             	cmp    eax,0x17
c0010dee:	7e 0d                	jle    c0010dfd <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010df0:	c7 44 24 04 90 23 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022390
c0010df8:	e9 de 07 00 00       	jmp    c00115db <KePanic(char const*)>
c0010dfd:	c3                   	ret    

c0010dfe <KeExecuteAtexit()>:
c0010dfe:	53                   	push   ebx
c0010dff:	31 db                	xor    ebx,ebx
c0010e01:	83 ec 08             	sub    esp,0x8
c0010e04:	39 1d a0 bd 02 c0    	cmp    DWORD PTR ds:0xc002bda0,ebx
c0010e0a:	7e 50                	jle    c0010e5c <KeExecuteAtexit()+0x5e>
c0010e0c:	8b 04 9d 20 be 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd41e0]
c0010e13:	85 c0                	test   eax,eax
c0010e15:	74 42                	je     c0010e59 <KeExecuteAtexit()+0x5b>
c0010e17:	51                   	push   ecx
c0010e18:	50                   	push   eax
c0010e19:	53                   	push   ebx
c0010e1a:	68 a9 23 02 c0       	push   0xc00223a9
c0010e1f:	e8 e6 9a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010e24:	58                   	pop    eax
c0010e25:	ff 34 9d c0 bd 02 c0 	push   DWORD PTR [ebx*4-0x3ffd4240]
c0010e2c:	ff 14 9d 20 be 02 c0 	call   DWORD PTR [ebx*4-0x3ffd41e0]
c0010e33:	c7 04 24 cb 23 02 c0 	mov    DWORD PTR [esp],0xc00223cb
c0010e3a:	e8 cb 9a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010e3f:	c7 04 24 2b 35 02 c0 	mov    DWORD PTR [esp],0xc002352b
c0010e46:	c7 04 9d 20 be 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd41e0],0x0
c0010e51:	e8 b4 9a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010e56:	83 c4 10             	add    esp,0x10
c0010e59:	43                   	inc    ebx
c0010e5a:	eb a8                	jmp    c0010e04 <KeExecuteAtexit()+0x6>
c0010e5c:	83 c4 08             	add    esp,0x8
c0010e5f:	5b                   	pop    ebx
c0010e60:	c3                   	ret    

c0010e61 <KeDisplaySplashScreen()>:
c0010e61:	55                   	push   ebp
c0010e62:	bd 05 00 00 00       	mov    ebp,0x5
c0010e67:	57                   	push   edi
c0010e68:	bf 0a 00 00 00       	mov    edi,0xa
c0010e6d:	56                   	push   esi
c0010e6e:	31 f6                	xor    esi,esi
c0010e70:	53                   	push   ebx
c0010e71:	31 db                	xor    ebx,ebx
c0010e73:	83 ec 0c             	sub    esp,0xc
c0010e76:	0f b6 96 80 37 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdc880]
c0010e7d:	85 d2                	test   edx,edx
c0010e7f:	89 d0                	mov    eax,edx
c0010e81:	74 52                	je     c0010ed5 <KeDisplaySplashScreen()+0x74>
c0010e83:	80 bb b6 37 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdc84a],0xdb
c0010e8a:	75 13                	jne    c0010e9f <KeDisplaySplashScreen()+0x3e>
c0010e8c:	0f b6 8b b5 37 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdc84b]
c0010e93:	83 e1 fe             	and    ecx,0xfffffffe
c0010e96:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010e9c:	75 01                	jne    c0010e9f <KeDisplaySplashScreen()+0x3e>
c0010e9e:	47                   	inc    edi
c0010e9f:	83 fa 0d             	cmp    edx,0xd
c0010ea2:	74 28                	je     c0010ecc <KeDisplaySplashScreen()+0x6b>
c0010ea4:	83 fa 0a             	cmp    edx,0xa
c0010ea7:	75 0a                	jne    c0010eb3 <KeDisplaySplashScreen()+0x52>
c0010ea9:	45                   	inc    ebp
c0010eaa:	bf 0a 00 00 00       	mov    edi,0xa
c0010eaf:	31 db                	xor    ebx,ebx
c0010eb1:	eb 19                	jmp    c0010ecc <KeDisplaySplashScreen()+0x6b>
c0010eb3:	83 ec 0c             	sub    esp,0xc
c0010eb6:	0f be c0             	movsx  eax,al
c0010eb9:	55                   	push   ebp
c0010eba:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010ebd:	43                   	inc    ebx
c0010ebe:	52                   	push   edx
c0010ebf:	6a 00                	push   0x0
c0010ec1:	6a 0e                	push   0xe
c0010ec3:	50                   	push   eax
c0010ec4:	e8 17 7f 00 00       	call   c0018de0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010ec9:	83 c4 20             	add    esp,0x20
c0010ecc:	46                   	inc    esi
c0010ecd:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010ed3:	75 a1                	jne    c0010e76 <KeDisplaySplashScreen()+0x15>
c0010ed5:	83 c4 0c             	add    esp,0xc
c0010ed8:	5b                   	pop    ebx
c0010ed9:	5e                   	pop    esi
c0010eda:	5f                   	pop    edi
c0010edb:	5d                   	pop    ebp
c0010edc:	c3                   	ret    

c0010edd <KeSetBootMessage(char const*)>:
c0010edd:	57                   	push   edi
c0010ede:	56                   	push   esi
c0010edf:	53                   	push   ebx
c0010ee0:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010ee6:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010eed:	68 9e 00 00 00       	push   0x9e
c0010ef2:	6a 00                	push   0x0
c0010ef4:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010ef8:	56                   	push   esi
c0010ef9:	e8 f2 f5 fe ff       	call   c00004f0 <memset>
c0010efe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f01:	e8 7a f6 fe ff       	call   c0000580 <strlen>
c0010f06:	ba 50 00 00 00       	mov    edx,0x50
c0010f0b:	83 c4 10             	add    esp,0x10
c0010f0e:	31 c9                	xor    ecx,ecx
c0010f10:	29 c2                	sub    edx,eax
c0010f12:	83 e2 fe             	and    edx,0xfffffffe
c0010f15:	01 f2                	add    edx,esi
c0010f17:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010f1c:	84 c0                	test   al,al
c0010f1e:	74 0a                	je     c0010f2a <KeSetBootMessage(char const*)+0x4d>
c0010f20:	80 cc 0f             	or     ah,0xf
c0010f23:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010f27:	41                   	inc    ecx
c0010f28:	eb ed                	jmp    c0010f17 <KeSetBootMessage(char const*)+0x3a>
c0010f2a:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010f2f:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010f34:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f36:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010f3c:	5b                   	pop    ebx
c0010f3d:	5e                   	pop    esi
c0010f3e:	5f                   	pop    edi
c0010f3f:	c3                   	ret    

c0010f40 <Krnl::handlePowerButton()>:
c0010f40:	83 ec 0c             	sub    esp,0xc
c0010f43:	e8 ee 06 00 00       	call   c0011636 <KeHandlePowerButton()>
c0010f48:	90                   	nop
c0010f49:	83 c4 0c             	add    esp,0xc
c0010f4c:	c3                   	ret    
c0010f4d:	8d 76 00             	lea    esi,[esi+0x0]

c0010f50 <Krnl::handleSleepButton()>:
c0010f50:	83 ec 0c             	sub    esp,0xc
c0010f53:	e8 13 07 00 00       	call   c001166b <KeHandleSleepButton()>
c0010f58:	90                   	nop
c0010f59:	83 c4 0c             	add    esp,0xc
c0010f5c:	c3                   	ret    

c0010f5d <KeCalculateCRC32(unsigned char*, int)>:
c0010f5d:	53                   	push   ebx
c0010f5e:	83 c8 ff             	or     eax,0xffffffff
c0010f61:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010f65:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010f69:	01 cb                	add    ebx,ecx
c0010f6b:	39 d9                	cmp    ecx,ebx
c0010f6d:	74 15                	je     c0010f84 <KeCalculateCRC32(unsigned char*, int)+0x27>
c0010f6f:	41                   	inc    ecx
c0010f70:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c0010f73:	31 c2                	xor    edx,eax
c0010f75:	c1 e8 08             	shr    eax,0x8
c0010f78:	0f b6 d2             	movzx  edx,dl
c0010f7b:	33 04 95 e0 38 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffdc720]
c0010f82:	eb e7                	jmp    c0010f6b <KeCalculateCRC32(unsigned char*, int)+0xe>
c0010f84:	5b                   	pop    ebx
c0010f85:	f7 d0                	not    eax
c0010f87:	c3                   	ret    

c0010f88 <EnvVarContainer::getEnv(char const*)>:
c0010f88:	57                   	push   edi
c0010f89:	56                   	push   esi
c0010f8a:	53                   	push   ebx
c0010f8b:	31 db                	xor    ebx,ebx
c0010f8d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010f91:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010f93:	7e 2b                	jle    c0010fc0 <EnvVarContainer::getEnv(char const*)+0x38>
c0010f95:	50                   	push   eax
c0010f96:	50                   	push   eax
c0010f97:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010f9a:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010fa1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010fa4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010fa8:	e8 d3 f7 fe ff       	call   c0000780 <strcmp>
c0010fad:	83 c4 10             	add    esp,0x10
c0010fb0:	85 c0                	test   eax,eax
c0010fb2:	75 09                	jne    c0010fbd <EnvVarContainer::getEnv(char const*)+0x35>
c0010fb4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010fb7:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010fbb:	eb 05                	jmp    c0010fc2 <EnvVarContainer::getEnv(char const*)+0x3a>
c0010fbd:	43                   	inc    ebx
c0010fbe:	eb d1                	jmp    c0010f91 <EnvVarContainer::getEnv(char const*)+0x9>
c0010fc0:	31 c0                	xor    eax,eax
c0010fc2:	5b                   	pop    ebx
c0010fc3:	5e                   	pop    esi
c0010fc4:	5f                   	pop    edi
c0010fc5:	c3                   	ret    

c0010fc6 <EnvVarContainer::setEnv(char const*, char const*)>:
c0010fc6:	55                   	push   ebp
c0010fc7:	57                   	push   edi
c0010fc8:	56                   	push   esi
c0010fc9:	53                   	push   ebx
c0010fca:	83 ec 28             	sub    esp,0x28
c0010fcd:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010fd1:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010fd5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010fd9:	56                   	push   esi
c0010fda:	e8 a1 f5 fe ff       	call   c0000580 <strlen>
c0010fdf:	40                   	inc    eax
c0010fe0:	89 04 24             	mov    DWORD PTR [esp],eax
c0010fe3:	e8 eb 6a ff ff       	call   c0007ad3 <malloc>
c0010fe8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010feb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010fef:	e8 8c f5 fe ff       	call   c0000580 <strlen>
c0010ff4:	40                   	inc    eax
c0010ff5:	89 04 24             	mov    DWORD PTR [esp],eax
c0010ff8:	e8 d6 6a ff ff       	call   c0007ad3 <malloc>
c0010ffd:	89 34 24             	mov    DWORD PTR [esp],esi
c0011000:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011004:	e8 77 f5 fe ff       	call   c0000580 <strlen>
c0011009:	83 c4 0c             	add    esp,0xc
c001100c:	40                   	inc    eax
c001100d:	50                   	push   eax
c001100e:	6a 00                	push   0x0
c0011010:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011014:	e8 d7 f4 fe ff       	call   c00004f0 <memset>
c0011019:	89 34 24             	mov    DWORD PTR [esp],esi
c001101c:	e8 5f f5 fe ff       	call   c0000580 <strlen>
c0011021:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011025:	8d 48 01             	lea    ecx,[eax+0x1]
c0011028:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001102a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001102d:	89 de                	mov    esi,ebx
c001102f:	e8 4c f5 fe ff       	call   c0000580 <strlen>
c0011034:	83 c4 0c             	add    esp,0xc
c0011037:	40                   	inc    eax
c0011038:	50                   	push   eax
c0011039:	6a 00                	push   0x0
c001103b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001103f:	e8 ac f4 fe ff       	call   c00004f0 <memset>
c0011044:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011047:	e8 34 f5 fe ff       	call   c0000580 <strlen>
c001104c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0011050:	8d 48 01             	lea    ecx,[eax+0x1]
c0011053:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011055:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011058:	40                   	inc    eax
c0011059:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001105c:	c1 e0 03             	shl    eax,0x3
c001105f:	5a                   	pop    edx
c0011060:	59                   	pop    ecx
c0011061:	50                   	push   eax
c0011062:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0011065:	e8 55 6a ff ff       	call   c0007abf <realloc>
c001106a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001106d:	8d 74 24 18          	lea    esi,[esp+0x18]
c0011071:	b9 08 00 00 00       	mov    ecx,0x8
c0011076:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0011079:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001107d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001107f:	83 c4 2c             	add    esp,0x2c
c0011082:	5b                   	pop    ebx
c0011083:	5e                   	pop    esi
c0011084:	5f                   	pop    edi
c0011085:	5d                   	pop    ebp
c0011086:	c3                   	ret    
c0011087:	90                   	nop

c0011088 <EnvVarContainer::deleteEnv(char const*)>:
c0011088:	c3                   	ret    
c0011089:	90                   	nop

c001108a <EnvVarContainer::loadFrom(char const*, char const*)>:
c001108a:	55                   	push   ebp
c001108b:	57                   	push   edi
c001108c:	56                   	push   esi
c001108d:	53                   	push   ebx
c001108e:	81 ec 38 01 00 00    	sub    esp,0x138
c0011094:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001109b:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c00110a2:	68 14 01 00 00       	push   0x114
c00110a7:	e8 27 6a ff ff       	call   c0007ad3 <malloc>
c00110ac:	83 c4 0c             	add    esp,0xc
c00110af:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00110b2:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00110b9:	89 c3                	mov    ebx,eax
c00110bb:	50                   	push   eax
c00110bc:	e8 d5 aa ff ff       	call   c000bb96 <File::File(char const*, Process*)>
c00110c1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00110c4:	e8 af ad ff ff       	call   c000be78 <File::exists()>
c00110c9:	83 c4 10             	add    esp,0x10
c00110cc:	84 c0                	test   al,al
c00110ce:	75 31                	jne    c0011101 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c00110d0:	50                   	push   eax
c00110d1:	50                   	push   eax
c00110d2:	6a 12                	push   0x12
c00110d4:	53                   	push   ebx
c00110d5:	e8 da aa ff ff       	call   c000bbb4 <File::open(FileOpenMode)>
c00110da:	8b 03                	mov    eax,DWORD PTR [ebx]
c00110dc:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00110df:	89 34 24             	mov    DWORD PTR [esp],esi
c00110e2:	e8 99 f4 fe ff       	call   c0000580 <strlen>
c00110e7:	5a                   	pop    edx
c00110e8:	8d 54 24 20          	lea    edx,[esp+0x20]
c00110ec:	52                   	push   edx
c00110ed:	31 d2                	xor    edx,edx
c00110ef:	56                   	push   esi
c00110f0:	52                   	push   edx
c00110f1:	50                   	push   eax
c00110f2:	53                   	push   ebx
c00110f3:	ff d7                	call   edi
c00110f5:	83 c4 14             	add    esp,0x14
c00110f8:	53                   	push   ebx
c00110f9:	e8 14 ab ff ff       	call   c000bc12 <File::close()>
c00110fe:	83 c4 10             	add    esp,0x10
c0011101:	56                   	push   esi
c0011102:	31 f6                	xor    esi,esi
c0011104:	68 00 01 00 00       	push   0x100
c0011109:	6a 00                	push   0x0
c001110b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001110f:	50                   	push   eax
c0011110:	e8 db f3 fe ff       	call   c00004f0 <memset>
c0011115:	5f                   	pop    edi
c0011116:	58                   	pop    eax
c0011117:	6a 01                	push   0x1
c0011119:	53                   	push   ebx
c001111a:	e8 95 aa ff ff       	call   c000bbb4 <File::open(FileOpenMode)>
c001111f:	83 c4 10             	add    esp,0x10
c0011122:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001112a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011132:	83 ec 0c             	sub    esp,0xc
c0011135:	8d 54 24 20          	lea    edx,[esp+0x20]
c0011139:	8b 03                	mov    eax,DWORD PTR [ebx]
c001113b:	52                   	push   edx
c001113c:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c0011140:	51                   	push   ecx
c0011141:	6a 00                	push   0x0
c0011143:	6a 01                	push   0x1
c0011145:	53                   	push   ebx
c0011146:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011149:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c001114e:	83 c4 20             	add    esp,0x20
c0011151:	85 c0                	test   eax,eax
c0011153:	89 c1                	mov    ecx,eax
c0011155:	0f 84 36 01 00 00    	je     c0011291 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c001115b:	83 f8 0d             	cmp    eax,0xd
c001115e:	0f 84 22 01 00 00    	je     c0011286 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011164:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0011169:	0f 84 f0 00 00 00    	je     c001125f <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c001116f:	83 f8 0a             	cmp    eax,0xa
c0011172:	74 13                	je     c0011187 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0011174:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011179:	74 0c                	je     c0011187 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c001117b:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0011181:	0f 8e f6 00 00 00    	jle    c001127d <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c0011187:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001118b:	83 ec 0c             	sub    esp,0xc
c001118e:	8d 78 01             	lea    edi,[eax+0x1]
c0011191:	57                   	push   edi
c0011192:	e8 3c 69 ff ff       	call   c0007ad3 <malloc>
c0011197:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001119b:	8d 56 04             	lea    edx,[esi+0x4]
c001119e:	89 14 24             	mov    DWORD PTR [esp],edx
c00111a1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00111a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00111a9:	e8 25 69 ff ff       	call   c0007ad3 <malloc>
c00111ae:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00111b2:	83 c4 0c             	add    esp,0xc
c00111b5:	57                   	push   edi
c00111b6:	6a 00                	push   0x0
c00111b8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00111bc:	e8 2f f3 fe ff       	call   c00004f0 <memset>
c00111c1:	8d 74 24 30          	lea    esi,[esp+0x30]
c00111c5:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00111c9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00111cd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00111cf:	83 c4 0c             	add    esp,0xc
c00111d2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00111d6:	52                   	push   edx
c00111d7:	6a 00                	push   0x0
c00111d9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00111dd:	e8 0e f3 fe ff       	call   c00004f0 <memset>
c00111e2:	8d 74 24 30          	lea    esi,[esp+0x30]
c00111e6:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00111ea:	89 34 24             	mov    DWORD PTR [esp],esi
c00111ed:	e8 8e f3 fe ff       	call   c0000580 <strlen>
c00111f2:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00111f6:	89 c1                	mov    ecx,eax
c00111f8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00111fa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00111fd:	83 c4 10             	add    esp,0x10
c0011200:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0011203:	40                   	inc    eax
c0011204:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0011207:	85 d2                	test   edx,edx
c0011209:	75 0c                	jne    c0011217 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c001120b:	83 ec 0c             	sub    esp,0xc
c001120e:	6a 08                	push   0x8
c0011210:	e8 be 68 ff ff       	call   c0007ad3 <malloc>
c0011215:	eb 0c                	jmp    c0011223 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c0011217:	51                   	push   ecx
c0011218:	51                   	push   ecx
c0011219:	c1 e0 03             	shl    eax,0x3
c001121c:	50                   	push   eax
c001121d:	52                   	push   edx
c001121e:	e8 9c 68 ff ff       	call   c0007abf <realloc>
c0011223:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0011226:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0011229:	83 c4 10             	add    esp,0x10
c001122c:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001122f:	8d 74 24 18          	lea    esi,[esp+0x18]
c0011233:	b9 08 00 00 00       	mov    ecx,0x8
c0011238:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001123c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001123e:	50                   	push   eax
c001123f:	31 f6                	xor    esi,esi
c0011241:	68 00 01 00 00       	push   0x100
c0011246:	6a 00                	push   0x0
c0011248:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001124c:	50                   	push   eax
c001124d:	e8 9e f2 fe ff       	call   c00004f0 <memset>
c0011252:	83 c4 10             	add    esp,0x10
c0011255:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001125d:	eb 27                	jmp    c0011286 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001125f:	83 f8 3d             	cmp    eax,0x3d
c0011262:	74 1e                	je     c0011282 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0011264:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001126a:	7f 07                	jg     c0011273 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c001126c:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c0011270:	46                   	inc    esi
c0011271:	eb 13                	jmp    c0011286 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011273:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001127b:	eb 09                	jmp    c0011286 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001127d:	83 f8 3d             	cmp    eax,0x3d
c0011280:	75 ea                	jne    c001126c <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c0011282:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0011286:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001128b:	0f 85 99 fe ff ff    	jne    c001112a <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0011291:	83 ec 0c             	sub    esp,0xc
c0011294:	53                   	push   ebx
c0011295:	e8 78 a9 ff ff       	call   c000bc12 <File::close()>
c001129a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001129c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001129f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00112a2:	81 c4 3c 01 00 00    	add    esp,0x13c
c00112a8:	5b                   	pop    ebx
c00112a9:	5e                   	pop    esi
c00112aa:	5f                   	pop    edi
c00112ab:	5d                   	pop    ebp
c00112ac:	c3                   	ret    
c00112ad:	90                   	nop

c00112ae <EnvVarContainer::__loadSystem()>:
c00112ae:	83 ec 10             	sub    esp,0x10
c00112b1:	68 e0 3c 02 c0       	push   0xc0023ce0
c00112b6:	68 d0 23 02 c0       	push   0xc00223d0
c00112bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112bf:	e8 c6 fd ff ff       	call   c001108a <EnvVarContainer::loadFrom(char const*, char const*)>
c00112c4:	83 c4 1c             	add    esp,0x1c
c00112c7:	c3                   	ret    

c00112c8 <EnvVarContainer::__loadUser()>:
c00112c8:	c3                   	ret    
c00112c9:	90                   	nop

c00112ca <EnvVarContainer::EnvVarContainer(Process*)>:
c00112ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112ce:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00112d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00112dc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00112df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112e3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00112ea:	90                   	nop
c00112eb:	c3                   	ret    

c00112ec <EnvVarContainer::~EnvVarContainer()>:
c00112ec:	83 ec 0c             	sub    esp,0xc
c00112ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112f6:	85 c0                	test   eax,eax
c00112f8:	74 1d                	je     c0011317 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00112fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0011300:	85 c0                	test   eax,eax
c0011302:	74 13                	je     c0011317 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0011304:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011308:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001130b:	83 ec 0c             	sub    esp,0xc
c001130e:	50                   	push   eax
c001130f:	e8 cf 67 ff ff       	call   c0007ae3 <free>
c0011314:	83 c4 10             	add    esp,0x10
c0011317:	90                   	nop
c0011318:	83 c4 0c             	add    esp,0xc
c001131b:	c3                   	ret    

c001131c <KeGetEnv(Process*, char const*)>:
c001131c:	53                   	push   ebx
c001131d:	83 ec 08             	sub    esp,0x8
c0011320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011324:	39 05 f0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6f0,eax
c001132a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001132e:	74 04                	je     c0011334 <KeGetEnv(Process*, char const*)+0x18>
c0011330:	85 c0                	test   eax,eax
c0011332:	75 0b                	jne    c001133f <KeGetEnv(Process*, char const*)+0x23>
c0011334:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c0011339:	85 c0                	test   eax,eax
c001133b:	75 19                	jne    c0011356 <KeGetEnv(Process*, char const*)+0x3a>
c001133d:	eb 27                	jmp    c0011366 <KeGetEnv(Process*, char const*)+0x4a>
c001133f:	52                   	push   edx
c0011340:	52                   	push   edx
c0011341:	53                   	push   ebx
c0011342:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0011348:	e8 3b fc ff ff       	call   c0010f88 <EnvVarContainer::getEnv(char const*)>
c001134d:	83 c4 10             	add    esp,0x10
c0011350:	85 c0                	test   eax,eax
c0011352:	75 28                	jne    c001137c <KeGetEnv(Process*, char const*)+0x60>
c0011354:	eb de                	jmp    c0011334 <KeGetEnv(Process*, char const*)+0x18>
c0011356:	52                   	push   edx
c0011357:	52                   	push   edx
c0011358:	53                   	push   ebx
c0011359:	50                   	push   eax
c001135a:	e8 29 fc ff ff       	call   c0010f88 <EnvVarContainer::getEnv(char const*)>
c001135f:	83 c4 10             	add    esp,0x10
c0011362:	85 c0                	test   eax,eax
c0011364:	75 16                	jne    c001137c <KeGetEnv(Process*, char const*)+0x60>
c0011366:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001136a:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c001136f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011373:	83 c4 08             	add    esp,0x8
c0011376:	5b                   	pop    ebx
c0011377:	e9 0c fc ff ff       	jmp    c0010f88 <EnvVarContainer::getEnv(char const*)>
c001137c:	83 c4 08             	add    esp,0x8
c001137f:	5b                   	pop    ebx
c0011380:	c3                   	ret    

c0011381 <KeSetEnvSystem(char const*, char const*)>:
c0011381:	83 ec 10             	sub    esp,0x10
c0011384:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011388:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001138c:	ff 35 84 be 02 c0    	push   DWORD PTR ds:0xc002be84
c0011392:	e8 2f fc ff ff       	call   c0010fc6 <EnvVarContainer::setEnv(char const*, char const*)>
c0011397:	83 c4 1c             	add    esp,0x1c
c001139a:	c3                   	ret    

c001139b <KeSetEnvUser(char const*, char const*)>:
c001139b:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c00113a0:	85 c0                	test   eax,eax
c00113a2:	74 15                	je     c00113b9 <KeSetEnvUser(char const*, char const*)+0x1e>
c00113a4:	83 ec 10             	sub    esp,0x10
c00113a7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113af:	50                   	push   eax
c00113b0:	e8 11 fc ff ff       	call   c0010fc6 <EnvVarContainer::setEnv(char const*, char const*)>
c00113b5:	83 c4 1c             	add    esp,0x1c
c00113b8:	c3                   	ret    
c00113b9:	c3                   	ret    

c00113ba <KeSetEnvProcess(Process*, char const*, char const*)>:
c00113ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113be:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00113c4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00113c8:	e9 f9 fb ff ff       	jmp    c0010fc6 <EnvVarContainer::setEnv(char const*, char const*)>

c00113cd <KeDeleteEnvSystem(char const*)>:
c00113cd:	c3                   	ret    

c00113ce <KeDeleteEnvUser(char const*)>:
c00113ce:	c3                   	ret    

c00113cf <KeDeleteEnvProcess(Process*, char const*)>:
c00113cf:	c3                   	ret    

c00113d0 <KeNewProcessEnv(Process*)>:
c00113d0:	83 ec 28             	sub    esp,0x28
c00113d3:	6a 0c                	push   0xc
c00113d5:	e8 f9 66 ff ff       	call   c0007ad3 <malloc>
c00113da:	5a                   	pop    edx
c00113db:	59                   	pop    ecx
c00113dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00113e0:	50                   	push   eax
c00113e1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00113e5:	e8 e0 fe ff ff       	call   c00112ca <EnvVarContainer::EnvVarContainer(Process*)>
c00113ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00113ee:	83 c4 2c             	add    esp,0x2c
c00113f1:	c3                   	ret    

c00113f2 <KeCopyProcessEnv(Process*, Process*)>:
c00113f2:	57                   	push   edi
c00113f3:	56                   	push   esi
c00113f4:	53                   	push   ebx
c00113f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113f9:	83 ec 0c             	sub    esp,0xc
c00113fc:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0011402:	6a 0c                	push   0xc
c0011404:	e8 ca 66 ff ff       	call   c0007ad3 <malloc>
c0011409:	89 c3                	mov    ebx,eax
c001140b:	58                   	pop    eax
c001140c:	5a                   	pop    edx
c001140d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011411:	53                   	push   ebx
c0011412:	e8 b3 fe ff ff       	call   c00112ca <EnvVarContainer::EnvVarContainer(Process*)>
c0011417:	8b 07                	mov    eax,DWORD PTR [edi]
c0011419:	89 03                	mov    DWORD PTR [ebx],eax
c001141b:	c1 e0 03             	shl    eax,0x3
c001141e:	89 04 24             	mov    DWORD PTR [esp],eax
c0011421:	e8 ad 66 ff ff       	call   c0007ad3 <malloc>
c0011426:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0011429:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001142b:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001142e:	89 c7                	mov    edi,eax
c0011430:	c1 e1 03             	shl    ecx,0x3
c0011433:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011435:	83 c4 10             	add    esp,0x10
c0011438:	89 d8                	mov    eax,ebx
c001143a:	5b                   	pop    ebx
c001143b:	5e                   	pop    esi
c001143c:	5f                   	pop    edi
c001143d:	c3                   	ret    

c001143e <KeLoadSystemEnv()>:
c001143e:	53                   	push   ebx
c001143f:	83 ec 14             	sub    esp,0x14
c0011442:	6a 0c                	push   0xc
c0011444:	e8 8a 66 ff ff       	call   c0007ad3 <malloc>
c0011449:	89 c3                	mov    ebx,eax
c001144b:	58                   	pop    eax
c001144c:	5a                   	pop    edx
c001144d:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0011453:	53                   	push   ebx
c0011454:	e8 71 fe ff ff       	call   c00112ca <EnvVarContainer::EnvVarContainer(Process*)>
c0011459:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001145c:	89 1d 84 be 02 c0    	mov    DWORD PTR ds:0xc002be84,ebx
c0011462:	e8 47 fe ff ff       	call   c00112ae <EnvVarContainer::__loadSystem()>
c0011467:	83 c4 18             	add    esp,0x18
c001146a:	5b                   	pop    ebx
c001146b:	c3                   	ret    

c001146c <KeLoadUserEnv()>:
c001146c:	53                   	push   ebx
c001146d:	83 ec 14             	sub    esp,0x14
c0011470:	6a 0c                	push   0xc
c0011472:	e8 5c 66 ff ff       	call   c0007ad3 <malloc>
c0011477:	89 c3                	mov    ebx,eax
c0011479:	58                   	pop    eax
c001147a:	5a                   	pop    edx
c001147b:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0011481:	53                   	push   ebx
c0011482:	e8 43 fe ff ff       	call   c00112ca <EnvVarContainer::EnvVarContainer(Process*)>
c0011487:	89 1d 80 be 02 c0    	mov    DWORD PTR ds:0xc002be80,ebx
c001148d:	83 c4 18             	add    esp,0x18
c0011490:	5b                   	pop    ebx
c0011491:	c3                   	ret    

c0011492 <KeFlushEnv()>:
c0011492:	c3                   	ret    

c0011493 <KeGetProcessTotalEnvCount(Process*)>:
c0011493:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011497:	8b 15 80 be 02 c0    	mov    edx,DWORD PTR ds:0xc002be80
c001149d:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00114a3:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c00114a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00114aa:	03 01                	add    eax,DWORD PTR [ecx]
c00114ac:	85 d2                	test   edx,edx
c00114ae:	74 02                	je     c00114b2 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c00114b0:	03 02                	add    eax,DWORD PTR [edx]
c00114b2:	c3                   	ret    

c00114b3 <KeGetProcessEnvPair(Process*, int)>:
c00114b3:	57                   	push   edi
c00114b4:	56                   	push   esi
c00114b5:	8b 35 80 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be80
c00114bb:	53                   	push   ebx
c00114bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00114c0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00114c4:	85 f6                	test   esi,esi
c00114c6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00114ca:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00114d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00114d2:	75 16                	jne    c00114ea <KeGetProcessEnvPair(Process*, int)+0x37>
c00114d4:	39 c2                	cmp    edx,eax
c00114d6:	7c 16                	jl     c00114ee <KeGetProcessEnvPair(Process*, int)+0x3b>
c00114d8:	8b 0d 84 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002be84
c00114de:	8b 31                	mov    esi,DWORD PTR [ecx]
c00114e0:	01 c6                	add    esi,eax
c00114e2:	39 d6                	cmp    esi,edx
c00114e4:	7e 3c                	jle    c0011522 <KeGetProcessEnvPair(Process*, int)+0x6f>
c00114e6:	29 c2                	sub    edx,eax
c00114e8:	eb 04                	jmp    c00114ee <KeGetProcessEnvPair(Process*, int)+0x3b>
c00114ea:	39 c2                	cmp    edx,eax
c00114ec:	7d 05                	jge    c00114f3 <KeGetProcessEnvPair(Process*, int)+0x40>
c00114ee:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00114f1:	eb 20                	jmp    c0011513 <KeGetProcessEnvPair(Process*, int)+0x60>
c00114f3:	8b 3e                	mov    edi,DWORD PTR [esi]
c00114f5:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00114f8:	39 d1                	cmp    ecx,edx
c00114fa:	7e 04                	jle    c0011500 <KeGetProcessEnvPair(Process*, int)+0x4d>
c00114fc:	29 c2                	sub    edx,eax
c00114fe:	eb 10                	jmp    c0011510 <KeGetProcessEnvPair(Process*, int)+0x5d>
c0011500:	8b 35 84 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be84
c0011506:	03 0e                	add    ecx,DWORD PTR [esi]
c0011508:	39 d1                	cmp    ecx,edx
c001150a:	7e 16                	jle    c0011522 <KeGetProcessEnvPair(Process*, int)+0x6f>
c001150c:	29 c2                	sub    edx,eax
c001150e:	29 fa                	sub    edx,edi
c0011510:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0011513:	8d 14 d0             	lea    edx,[eax+edx*8]
c0011516:	8b 02                	mov    eax,DWORD PTR [edx]
c0011518:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001151b:	89 03                	mov    DWORD PTR [ebx],eax
c001151d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0011520:	eb 1d                	jmp    c001153f <KeGetProcessEnvPair(Process*, int)+0x8c>
c0011522:	83 ec 0c             	sub    esp,0xc
c0011525:	68 f2 23 02 c0       	push   0xc00223f2
c001152a:	e8 ac 00 00 00       	call   c00115db <KePanic(char const*)>
c001152f:	83 c4 10             	add    esp,0x10
c0011532:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011538:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001153f:	89 d8                	mov    eax,ebx
c0011541:	5b                   	pop    ebx
c0011542:	5e                   	pop    esi
c0011543:	5f                   	pop    edi
c0011544:	c2 04 00             	ret    0x4

c0011547 <CPU::current()>:
c0011547:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001154c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011552:	c3                   	ret    

c0011553 <operator new(unsigned long)>:
c0011553:	e9 7b 65 ff ff       	jmp    c0007ad3 <malloc>

c0011558 <operator delete(void*)>:
c0011558:	e9 96 65 ff ff       	jmp    c0007af3 <rfree>

c001155d <disableIRQs()>:
c001155d:	fa                   	cli    
c001155e:	c3                   	ret    

c001155f <enableIRQs()>:
c001155f:	fb                   	sti    
c0011560:	c3                   	ret    

c0011561 <lockScheduler()>:
c0011561:	fa                   	cli    
c0011562:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0011568:	c3                   	ret    

c0011569 <unlockScheduler()>:
c0011569:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001156e:	48                   	dec    eax
c001156f:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0011574:	75 01                	jne    c0011577 <unlockScheduler()+0xe>
c0011576:	fb                   	sti    
c0011577:	c3                   	ret    

c0011578 <lockStuff()>:
c0011578:	fa                   	cli    
c0011579:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001157f:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c0011585:	c3                   	ret    

c0011586 <unlockStuff()>:
c0011586:	83 ec 0c             	sub    esp,0xc
c0011589:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001158e:	48                   	dec    eax
c001158f:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0011594:	75 18                	jne    c00115ae <unlockStuff()+0x28>
c0011596:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c001159d:	74 0f                	je     c00115ae <unlockStuff()+0x28>
c001159f:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00115a9:	e8 f6 4a 00 00       	call   c00160a4 <schedule()>
c00115ae:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00115b3:	48                   	dec    eax
c00115b4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00115b9:	75 01                	jne    c00115bc <unlockStuff()+0x36>
c00115bb:	fb                   	sti    
c00115bc:	83 c4 0c             	add    esp,0xc
c00115bf:	c3                   	ret    

c00115c0 <Virt::getAKernelVAS()>:
c00115c0:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c00115c5:	c3                   	ret    

c00115c6 <__not_memcpy>:
c00115c6:	57                   	push   edi
c00115c7:	56                   	push   esi
c00115c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00115cc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00115d0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00115d4:	89 c7                	mov    edi,eax
c00115d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00115d8:	5e                   	pop    esi
c00115d9:	5f                   	pop    edi
c00115da:	c3                   	ret    

c00115db <KePanic(char const*)>:
c00115db:	c6 05 88 be 02 c0 01 	mov    BYTE PTR ds:0xc002be88,0x1
c00115e2:	e9 4d 6a 00 00       	jmp    c0018034 <HalPanic(char const*)>

c00115e7 <KePowerThread(void*)>:
c00115e7:	83 ec 0c             	sub    esp,0xc
c00115ea:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00115ef:	48                   	dec    eax
c00115f0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00115f5:	75 01                	jne    c00115f8 <KePowerThread(void*)+0x11>
c00115f7:	fb                   	sti    
c00115f8:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c00115ff:	83 ec 0c             	sub    esp,0xc
c0011602:	6a 0a                	push   0xa
c0011604:	e8 cb 4d 00 00       	call   c00163d4 <sleep(unsigned int)>
c0011609:	83 c4 10             	add    esp,0x10
c001160c:	83 05 e4 be 02 c0 0a 	add    DWORD PTR ds:0xc002bee4,0xa
c0011613:	eb e3                	jmp    c00115f8 <KePowerThread(void*)+0x11>

c0011615 <KeChangePowerSettings(PowerSettings)>:
c0011615:	57                   	push   edi
c0011616:	b9 09 00 00 00       	mov    ecx,0x9
c001161b:	56                   	push   esi
c001161c:	bf c0 be 02 c0       	mov    edi,0xc002bec0
c0011621:	fc                   	cld    
c0011622:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011626:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011628:	5e                   	pop    esi
c0011629:	5f                   	pop    edi
c001162a:	c3                   	ret    

c001162b <KeUserIOReceived()>:
c001162b:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c0011635:	c3                   	ret    

c0011636 <KeHandlePowerButton()>:
c0011636:	83 ec 0c             	sub    esp,0xc
c0011639:	a1 c0 be 02 c0       	mov    eax,ds:0xc002bec0
c001163e:	83 f8 02             	cmp    eax,0x2
c0011641:	75 10                	jne    c0011653 <KeHandlePowerButton()+0x1d>
c0011643:	83 ec 0c             	sub    esp,0xc
c0011646:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001164c:	e8 f9 5a ff ff       	call   c000714a <Computer::shutdown()>
c0011651:	eb 11                	jmp    c0011664 <KeHandlePowerButton()+0x2e>
c0011653:	48                   	dec    eax
c0011654:	75 11                	jne    c0011667 <KeHandlePowerButton()+0x31>
c0011656:	83 ec 0c             	sub    esp,0xc
c0011659:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001165f:	e8 16 5b ff ff       	call   c000717a <Computer::sleep()>
c0011664:	83 c4 10             	add    esp,0x10
c0011667:	83 c4 0c             	add    esp,0xc
c001166a:	c3                   	ret    

c001166b <KeHandleSleepButton()>:
c001166b:	83 ec 0c             	sub    esp,0xc
c001166e:	a1 c4 be 02 c0       	mov    eax,ds:0xc002bec4
c0011673:	83 f8 02             	cmp    eax,0x2
c0011676:	75 10                	jne    c0011688 <KeHandleSleepButton()+0x1d>
c0011678:	83 ec 0c             	sub    esp,0xc
c001167b:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011681:	e8 c4 5a ff ff       	call   c000714a <Computer::shutdown()>
c0011686:	eb 11                	jmp    c0011699 <KeHandleSleepButton()+0x2e>
c0011688:	48                   	dec    eax
c0011689:	75 11                	jne    c001169c <KeHandleSleepButton()+0x31>
c001168b:	83 ec 0c             	sub    esp,0xc
c001168e:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011694:	e8 e1 5a ff ff       	call   c000717a <Computer::sleep()>
c0011699:	83 c4 10             	add    esp,0x10
c001169c:	83 c4 0c             	add    esp,0xc
c001169f:	c3                   	ret    

c00116a0 <KeSetupPowerManager()>:
c00116a0:	83 ec 0c             	sub    esp,0xc
c00116a3:	68 f0 00 00 00       	push   0xf0
c00116a8:	6a 00                	push   0x0
c00116aa:	68 e7 15 01 c0       	push   0xc00115e7
c00116af:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00116b5:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c00116bf:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c00116c6:	e8 8d 47 00 00       	call   c0015e58 <Process::createThread(void (*)(void*), void*, int)>
c00116cb:	c7 05 c0 be 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002bec0,0x2
c00116d5:	c7 05 c4 be 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002bec4,0x1
c00116df:	c7 05 c8 be 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002bec8,0x3
c00116e9:	c7 05 cc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002becc,0x0
c00116f3:	c7 05 d8 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed8,0x0
c00116fd:	c7 05 d0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed0,0x0
c0011707:	c7 05 dc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bedc,0x0
c0011711:	c7 05 d4 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bed4,0x3c
c001171b:	c7 05 e0 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bee0,0x3c
c0011725:	83 c4 1c             	add    esp,0x1c
c0011728:	c3                   	ret    

c0011729 <KeRand()>:
c0011729:	69 05 e8 be 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002bee8,0x2875
c0011733:	69 0d ec be 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002beec,0xa2e7b175
c001173d:	53                   	push   ebx
c001173e:	01 c1                	add    ecx,eax
c0011740:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0011745:	f7 25 e8 be 02 c0    	mul    DWORD PTR ds:0xc002bee8
c001174b:	01 ca                	add    edx,ecx
c001174d:	05 ef 04 b5 00       	add    eax,0xb504ef
c0011752:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c0011757:	83 d2 00             	adc    edx,0x0
c001175a:	0f b7 da             	movzx  ebx,dx
c001175d:	89 1d ec be 02 c0    	mov    DWORD PTR ds:0xc002beec,ebx
c0011763:	0f ac d8 0e          	shrd   eax,ebx,0xe
c0011767:	5b                   	pop    ebx
c0011768:	c3                   	ret    

c0011769 <KeSeedRand(unsigned int)>:
c0011769:	53                   	push   ebx
c001176a:	83 ec 08             	sub    esp,0x8
c001176d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011771:	e8 dd 6b 00 00       	call   c0018353 <HalGetRand()>
c0011776:	c7 05 ec be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002beec,0x0
c0011780:	31 d8                	xor    eax,ebx
c0011782:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c0011787:	e8 9d ff ff ff       	call   c0011729 <KeRand()>
c001178c:	83 c4 08             	add    esp,0x8
c001178f:	5b                   	pop    ebx
c0011790:	eb 97                	jmp    c0011729 <KeRand()>

c0011792 <KeInitRand()>:
c0011792:	83 ec 0c             	sub    esp,0xc
c0011795:	e8 ae 69 00 00       	call   c0018148 <HalQueryPerformanceCounter()>
c001179a:	0f 20 da             	mov    edx,cr3
c001179d:	0f 22 da             	mov    cr3,edx
c00117a0:	0f 20 da             	mov    edx,cr3
c00117a3:	0f 22 da             	mov    cr3,edx
c00117a6:	0f 20 da             	mov    edx,cr3
c00117a9:	0f 22 da             	mov    cr3,edx
c00117ac:	0f 20 da             	mov    edx,cr3
c00117af:	0f 22 da             	mov    cr3,edx
c00117b2:	83 ec 0c             	sub    esp,0xc
c00117b5:	35 03 8a 95 38       	xor    eax,0x38958a03
c00117ba:	50                   	push   eax
c00117bb:	e8 a9 ff ff ff       	call   c0011769 <KeSeedRand(unsigned int)>
c00117c0:	83 c4 1c             	add    esp,0x1c
c00117c3:	c3                   	ret    

c00117c4 <KeResolveCompatibilitySymbol(char*)>:
c00117c4:	83 ec 0c             	sub    esp,0xc
c00117c7:	83 ec 08             	sub    esp,0x8
c00117ca:	68 0c 24 02 c0       	push   0xc002240c
c00117cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117d3:	e8 a8 ef fe ff       	call   c0000780 <strcmp>
c00117d8:	83 c4 10             	add    esp,0x10
c00117db:	85 c0                	test   eax,eax
c00117dd:	0f 94 c0             	sete   al
c00117e0:	0f b6 c0             	movzx  eax,al
c00117e3:	85 c0                	test   eax,eax
c00117e5:	74 0d                	je     c00117f4 <KeResolveCompatibilitySymbol(char*)+0x30>
c00117e7:	b8 b8 6e 02 c0       	mov    eax,0xc0026eb8
c00117ec:	e9 8b 01 00 00       	jmp    c001197c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00117f1:	8d 76 00             	lea    esi,[esi+0x0]
c00117f4:	83 ec 08             	sub    esp,0x8
c00117f7:	68 15 24 02 c0       	push   0xc0022415
c00117fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011800:	e8 7b ef fe ff       	call   c0000780 <strcmp>
c0011805:	83 c4 10             	add    esp,0x10
c0011808:	85 c0                	test   eax,eax
c001180a:	0f 94 c0             	sete   al
c001180d:	0f b6 c0             	movzx  eax,al
c0011810:	85 c0                	test   eax,eax
c0011812:	74 0c                	je     c0011820 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0011814:	b8 60 f7 01 c0       	mov    eax,0xc001f760
c0011819:	e9 5e 01 00 00       	jmp    c001197c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001181e:	66 90                	xchg   ax,ax
c0011820:	83 ec 08             	sub    esp,0x8
c0011823:	68 1f 24 02 c0       	push   0xc002241f
c0011828:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001182c:	e8 4f ef fe ff       	call   c0000780 <strcmp>
c0011831:	83 c4 10             	add    esp,0x10
c0011834:	85 c0                	test   eax,eax
c0011836:	0f 94 c0             	sete   al
c0011839:	0f b6 c0             	movzx  eax,al
c001183c:	85 c0                	test   eax,eax
c001183e:	74 0c                	je     c001184c <KeResolveCompatibilitySymbol(char*)+0x88>
c0011840:	b8 94 f4 01 c0       	mov    eax,0xc001f494
c0011845:	e9 32 01 00 00       	jmp    c001197c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001184a:	66 90                	xchg   ax,ax
c001184c:	83 ec 08             	sub    esp,0x8
c001184f:	68 28 24 02 c0       	push   0xc0022428
c0011854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011858:	e8 23 ef fe ff       	call   c0000780 <strcmp>
c001185d:	83 c4 10             	add    esp,0x10
c0011860:	85 c0                	test   eax,eax
c0011862:	0f 94 c0             	sete   al
c0011865:	0f b6 c0             	movzx  eax,al
c0011868:	85 c0                	test   eax,eax
c001186a:	74 0c                	je     c0011878 <KeResolveCompatibilitySymbol(char*)+0xb4>
c001186c:	b8 db 15 01 c0       	mov    eax,0xc00115db
c0011871:	e9 06 01 00 00       	jmp    c001197c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011876:	66 90                	xchg   ax,ax
c0011878:	83 ec 08             	sub    esp,0x8
c001187b:	68 3b 24 02 c0       	push   0xc002243b
c0011880:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011884:	e8 f7 ee fe ff       	call   c0000780 <strcmp>
c0011889:	83 c4 10             	add    esp,0x10
c001188c:	85 c0                	test   eax,eax
c001188e:	0f 94 c0             	sete   al
c0011891:	0f b6 c0             	movzx  eax,al
c0011894:	85 c0                	test   eax,eax
c0011896:	74 0c                	je     c00118a4 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0011898:	b8 dd 0e 01 c0       	mov    eax,0xc0010edd
c001189d:	e9 da 00 00 00       	jmp    c001197c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118a2:	66 90                	xchg   ax,ax
c00118a4:	83 ec 08             	sub    esp,0x8
c00118a7:	68 58 24 02 c0       	push   0xc0022458
c00118ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118b0:	e8 cb ee fe ff       	call   c0000780 <strcmp>
c00118b5:	83 c4 10             	add    esp,0x10
c00118b8:	85 c0                	test   eax,eax
c00118ba:	0f 94 c0             	sete   al
c00118bd:	0f b6 c0             	movzx  eax,al
c00118c0:	85 c0                	test   eax,eax
c00118c2:	74 0c                	je     c00118d0 <KeResolveCompatibilitySymbol(char*)+0x10c>
c00118c4:	b8 60 f8 01 c0       	mov    eax,0xc001f860
c00118c9:	e9 ae 00 00 00       	jmp    c001197c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118ce:	66 90                	xchg   ax,ax
c00118d0:	83 ec 08             	sub    esp,0x8
c00118d3:	68 62 24 02 c0       	push   0xc0022462
c00118d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118dc:	e8 9f ee fe ff       	call   c0000780 <strcmp>
c00118e1:	83 c4 10             	add    esp,0x10
c00118e4:	85 c0                	test   eax,eax
c00118e6:	0f 94 c0             	sete   al
c00118e9:	0f b6 c0             	movzx  eax,al
c00118ec:	85 c0                	test   eax,eax
c00118ee:	74 0c                	je     c00118fc <KeResolveCompatibilitySymbol(char*)+0x138>
c00118f0:	b8 e0 f5 01 c0       	mov    eax,0xc001f5e0
c00118f5:	e9 82 00 00 00       	jmp    c001197c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118fa:	66 90                	xchg   ax,ax
c00118fc:	83 ec 08             	sub    esp,0x8
c00118ff:	68 6b 24 02 c0       	push   0xc002246b
c0011904:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011908:	e8 73 ee fe ff       	call   c0000780 <strcmp>
c001190d:	83 c4 10             	add    esp,0x10
c0011910:	85 c0                	test   eax,eax
c0011912:	0f 94 c0             	sete   al
c0011915:	0f b6 c0             	movzx  eax,al
c0011918:	85 c0                	test   eax,eax
c001191a:	74 08                	je     c0011924 <KeResolveCompatibilitySymbol(char*)+0x160>
c001191c:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c0011921:	eb 59                	jmp    c001197c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011923:	90                   	nop
c0011924:	83 ec 08             	sub    esp,0x8
c0011927:	68 83 24 02 c0       	push   0xc0022483
c001192c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011930:	e8 4b ee fe ff       	call   c0000780 <strcmp>
c0011935:	83 c4 10             	add    esp,0x10
c0011938:	85 c0                	test   eax,eax
c001193a:	0f 94 c0             	sete   al
c001193d:	0f b6 c0             	movzx  eax,al
c0011940:	85 c0                	test   eax,eax
c0011942:	74 08                	je     c001194c <KeResolveCompatibilitySymbol(char*)+0x188>
c0011944:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c0011949:	eb 31                	jmp    c001197c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001194b:	90                   	nop
c001194c:	83 ec 08             	sub    esp,0x8
c001194f:	68 90 24 02 c0       	push   0xc0022490
c0011954:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011958:	e8 23 ee fe ff       	call   c0000780 <strcmp>
c001195d:	83 c4 10             	add    esp,0x10
c0011960:	85 c0                	test   eax,eax
c0011962:	0f 94 c0             	sete   al
c0011965:	0f b6 c0             	movzx  eax,al
c0011968:	85 c0                	test   eax,eax
c001196a:	74 08                	je     c0011974 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c001196c:	b8 bd 6e 02 c0       	mov    eax,0xc0026ebd
c0011971:	eb 09                	jmp    c001197c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011973:	90                   	nop
c0011974:	b8 00 00 00 00       	mov    eax,0x0
c0011979:	8d 76 00             	lea    esi,[esi+0x0]
c001197c:	83 c4 0c             	add    esp,0xc
c001197f:	c3                   	ret    

c0011980 <KiSigKill(int)>:
c0011980:	83 ec 0c             	sub    esp,0xc
c0011983:	6a 00                	push   0x0
c0011985:	6a 00                	push   0x0
c0011987:	6a ff                	push   0xffffffff
c0011989:	6a 01                	push   0x1
c001198b:	e8 c2 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011990:	83 c4 1c             	add    esp,0x1c
c0011993:	c3                   	ret    

c0011994 <KiDefaultSignalHandlerIgnore(int)>:
c0011994:	c3                   	ret    

c0011995 <KiDefaultSignalHandlerPause(int)>:
c0011995:	57                   	push   edi
c0011996:	b9 07 00 00 00       	mov    ecx,0x7
c001199b:	56                   	push   esi
c001199c:	be d9 24 02 c0       	mov    esi,0xc00224d9
c00119a1:	83 ec 24             	sub    esp,0x24
c00119a4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00119a8:	fc                   	cld    
c00119a9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00119ab:	8d 44 24 04          	lea    eax,[esp+0x4]
c00119af:	50                   	push   eax
c00119b0:	6a 00                	push   0x0
c00119b2:	6a 00                	push   0x0
c00119b4:	6a 27                	push   0x27
c00119b6:	e8 97 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00119bb:	83 c4 34             	add    esp,0x34
c00119be:	5e                   	pop    esi
c00119bf:	5f                   	pop    edi
c00119c0:	c3                   	ret    

c00119c1 <KiDefaultSignalHandlerResume(int)>:
c00119c1:	57                   	push   edi
c00119c2:	b9 1d 00 00 00       	mov    ecx,0x1d
c00119c7:	56                   	push   esi
c00119c8:	be f5 24 02 c0       	mov    esi,0xc00224f5
c00119cd:	83 ec 24             	sub    esp,0x24
c00119d0:	8d 7c 24 03          	lea    edi,[esp+0x3]
c00119d4:	fc                   	cld    
c00119d5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00119d7:	8d 44 24 03          	lea    eax,[esp+0x3]
c00119db:	50                   	push   eax
c00119dc:	6a 00                	push   0x0
c00119de:	6a 00                	push   0x0
c00119e0:	6a 27                	push   0x27
c00119e2:	e8 6b 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00119e7:	83 c4 34             	add    esp,0x34
c00119ea:	5e                   	pop    esi
c00119eb:	5f                   	pop    edi
c00119ec:	c3                   	ret    

c00119ed <KeDeinitSignals(SigHandlerBlock*)>:
c00119ed:	e9 f1 60 ff ff       	jmp    c0007ae3 <free>

c00119f2 <KeInitSignals()>:
c00119f2:	53                   	push   ebx
c00119f3:	83 ec 14             	sub    esp,0x14
c00119f6:	68 c8 00 00 00       	push   0xc8
c00119fb:	e8 d3 60 ff ff       	call   c0007ad3 <malloc>
c0011a00:	83 c4 0c             	add    esp,0xc
c0011a03:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0011a0d:	89 c3                	mov    ebx,eax
c0011a0f:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0011a19:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0011a1f:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c0011a23:	6a 20                	push   0x20
c0011a25:	6a 00                	push   0x0
c0011a27:	50                   	push   eax
c0011a28:	e8 c3 ea fe ff       	call   c00004f0 <memset>
c0011a2d:	83 c4 0c             	add    esp,0xc
c0011a30:	6a 44                	push   0x44
c0011a32:	6a 00                	push   0x0
c0011a34:	53                   	push   ebx
c0011a35:	e8 b6 ea fe ff       	call   c00004f0 <memset>
c0011a3a:	83 c4 18             	add    esp,0x18
c0011a3d:	89 d8                	mov    eax,ebx
c0011a3f:	5b                   	pop    ebx
c0011a40:	c3                   	ret    

c0011a41 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011a41:	53                   	push   ebx
c0011a42:	b8 01 00 00 00       	mov    eax,0x1
c0011a47:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011a4b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011a4f:	83 f9 10             	cmp    ecx,0x10
c0011a52:	7f 21                	jg     c0011a75 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0011a54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a58:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0011a5b:	89 03                	mov    DWORD PTR [ebx],eax
c0011a5d:	b8 01 00 00 00       	mov    eax,0x1
c0011a62:	d3 e0                	shl    eax,cl
c0011a64:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011a68:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0011a6b:	31 c0                	xor    eax,eax
c0011a6d:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0011a75:	5b                   	pop    ebx
c0011a76:	c3                   	ret    

c0011a77 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0011a77:	55                   	push   ebp
c0011a78:	57                   	push   edi
c0011a79:	bf 08 00 00 00       	mov    edi,0x8
c0011a7e:	56                   	push   esi
c0011a7f:	53                   	push   ebx
c0011a80:	83 ec 18             	sub    esp,0x18
c0011a83:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011a87:	68 12 25 02 c0       	push   0xc0022512
c0011a8c:	e8 79 8e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0011a91:	83 c4 10             	add    esp,0x10
c0011a94:	31 c9                	xor    ecx,ecx
c0011a96:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011a9d:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011aa3:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0011aa7:	99                   	cdq    
c0011aa8:	f7 ff                	idiv   edi
c0011aaa:	8d 42 24             	lea    eax,[edx+0x24]
c0011aad:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011ab1:	85 f6                	test   esi,esi
c0011ab3:	75 1a                	jne    c0011acf <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0011ab5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011ab9:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0011abd:	50                   	push   eax
c0011abe:	50                   	push   eax
c0011abf:	52                   	push   edx
c0011ac0:	68 23 25 02 c0       	push   0xc0022523
c0011ac5:	e8 40 8e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0011aca:	83 c4 10             	add    esp,0x10
c0011acd:	eb 1b                	jmp    c0011aea <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0011acf:	41                   	inc    ecx
c0011ad0:	83 f9 08             	cmp    ecx,0x8
c0011ad3:	75 ce                	jne    c0011aa3 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0011ad5:	83 ec 0c             	sub    esp,0xc
c0011ad8:	be 01 00 00 00       	mov    esi,0x1
c0011add:	68 44 25 02 c0       	push   0xc0022544
c0011ae2:	e8 23 8e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0011ae7:	83 c4 10             	add    esp,0x10
c0011aea:	83 c4 0c             	add    esp,0xc
c0011aed:	89 f0                	mov    eax,esi
c0011aef:	5b                   	pop    ebx
c0011af0:	5e                   	pop    esi
c0011af1:	5f                   	pop    edi
c0011af2:	5d                   	pop    ebp
c0011af3:	c3                   	ret    

c0011af4 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0011af4:	55                   	push   ebp
c0011af5:	57                   	push   edi
c0011af6:	56                   	push   esi
c0011af7:	53                   	push   ebx
c0011af8:	51                   	push   ecx
c0011af9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011afd:	85 db                	test   ebx,ebx
c0011aff:	0f 84 bc 00 00 00    	je     c0011bc1 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011b05:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011b0c:	0f 84 af 00 00 00    	je     c0011bc1 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011b12:	31 c9                	xor    ecx,ecx
c0011b14:	bf 08 00 00 00       	mov    edi,0x8
c0011b19:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011b1f:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011b22:	99                   	cdq    
c0011b23:	f7 ff                	idiv   edi
c0011b25:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011b2c:	85 ed                	test   ebp,ebp
c0011b2e:	0f 84 9e 00 00 00    	je     c0011bd2 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0011b34:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011b3a:	89 e9                	mov    ecx,ebp
c0011b3c:	bf 01 00 00 00       	mov    edi,0x1
c0011b41:	d3 e7                	shl    edi,cl
c0011b43:	31 c9                	xor    ecx,ecx
c0011b45:	89 04 24             	mov    DWORD PTR [esp],eax
c0011b48:	b8 01 00 00 00       	mov    eax,0x1
c0011b4d:	d3 e0                	shl    eax,cl
c0011b4f:	85 04 24             	test   DWORD PTR [esp],eax
c0011b52:	74 06                	je     c0011b5a <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0011b54:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011b58:	75 67                	jne    c0011bc1 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011b5a:	41                   	inc    ecx
c0011b5b:	83 f9 11             	cmp    ecx,0x11
c0011b5e:	75 e8                	jne    c0011b48 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0011b60:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011b63:	46                   	inc    esi
c0011b64:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011b6a:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0011b75:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011b7c:	09 f8                	or     eax,edi
c0011b7e:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011b84:	31 c0                	xor    eax,eax
c0011b86:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011b8e:	74 09                	je     c0011b99 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011b90:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011b97:	eb 06                	jmp    c0011b9f <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0011b99:	40                   	inc    eax
c0011b9a:	83 f8 08             	cmp    eax,0x8
c0011b9d:	75 e7                	jne    c0011b86 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0011b9f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011ba3:	83 fd 09             	cmp    ebp,0x9
c0011ba6:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011ba9:	89 2a                	mov    DWORD PTR [edx],ebp
c0011bab:	75 07                	jne    c0011bb4 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011bad:	b8 80 19 01 c0       	mov    eax,0xc0011980
c0011bb2:	eb 31                	jmp    c0011be5 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011bb4:	83 f8 01             	cmp    eax,0x1
c0011bb7:	75 0c                	jne    c0011bc5 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0011bb9:	f7 d7                	not    edi
c0011bbb:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011bc1:	31 c0                	xor    eax,eax
c0011bc3:	eb 20                	jmp    c0011be5 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011bc5:	85 c0                	test   eax,eax
c0011bc7:	75 1c                	jne    c0011be5 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011bc9:	8b 04 ad 40 3d 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdc2c0]
c0011bd0:	eb 13                	jmp    c0011be5 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011bd2:	41                   	inc    ecx
c0011bd3:	46                   	inc    esi
c0011bd4:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011bda:	83 f9 08             	cmp    ecx,0x8
c0011bdd:	0f 85 36 ff ff ff    	jne    c0011b19 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0011be3:	eb dc                	jmp    c0011bc1 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011be5:	5a                   	pop    edx
c0011be6:	5b                   	pop    ebx
c0011be7:	5e                   	pop    esi
c0011be8:	5f                   	pop    edi
c0011be9:	5d                   	pop    ebp
c0011bea:	c3                   	ret    

c0011beb <KiCheckSignalZ>:
c0011beb:	83 ec 10             	sub    esp,0x10
c0011bee:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011bf2:	50                   	push   eax
c0011bf3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bf8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011bfb:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011c01:	e8 ee fe ff ff       	call   c0011af4 <KeCheckSignal(SigHandlerBlock*, int*)>
c0011c06:	5a                   	pop    edx
c0011c07:	31 d2                	xor    edx,edx
c0011c09:	59                   	pop    ecx
c0011c0a:	85 c0                	test   eax,eax
c0011c0c:	74 19                	je     c0011c27 <KiCheckSignalZ+0x3c>
c0011c0e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011c14:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011c17:	89 02                	mov    DWORD PTR [edx],eax
c0011c19:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011c20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c24:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0011c27:	89 d0                	mov    eax,edx
c0011c29:	83 c4 10             	add    esp,0x10
c0011c2c:	c3                   	ret    

c0011c2d <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011c2d:	56                   	push   esi
c0011c2e:	53                   	push   ebx
c0011c2f:	bb 01 00 00 00       	mov    ebx,0x1
c0011c34:	52                   	push   edx
c0011c35:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011c39:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011c3d:	d3 e3                	shl    ebx,cl
c0011c3f:	83 f9 10             	cmp    ecx,0x10
c0011c42:	7f 08                	jg     c0011c4c <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011c44:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011c4a:	75 10                	jne    c0011c5c <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011c4c:	83 ec 0c             	sub    esp,0xc
c0011c4f:	68 55 25 02 c0       	push   0xc0022555
c0011c54:	e8 82 f9 ff ff       	call   c00115db <KePanic(char const*)>
c0011c59:	83 c4 10             	add    esp,0x10
c0011c5c:	f7 d3                	not    ebx
c0011c5e:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011c64:	58                   	pop    eax
c0011c65:	5b                   	pop    ebx
c0011c66:	5e                   	pop    esi
c0011c67:	c3                   	ret    

c0011c68 <KiFinishSignalZ>:
c0011c68:	53                   	push   ebx
c0011c69:	83 ec 10             	sub    esp,0x10
c0011c6c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011c70:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011c73:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c78:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c7b:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011c81:	e8 a7 ff ff ff       	call   c0011c2d <KeCompleteSignal(SigHandlerBlock*, int)>
c0011c86:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011c8c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011c93:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011c9a:	83 c4 18             	add    esp,0x18
c0011c9d:	5b                   	pop    ebx
c0011c9e:	c3                   	ret    

c0011c9f <SysSeekDir(regs*)>:
c0011c9f:	31 c0                	xor    eax,eax
c0011ca1:	31 d2                	xor    edx,edx
c0011ca3:	c3                   	ret    

c0011ca4 <SysTellDir(regs*)>:
c0011ca4:	31 c0                	xor    eax,eax
c0011ca6:	31 d2                	xor    edx,edx
c0011ca8:	c3                   	ret    

c0011ca9 <SysVerify(regs*)>:
c0011ca9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cad:	31 d2                	xor    edx,edx
c0011caf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011cb2:	c3                   	ret    

c0011cb3 <SysGetArgc(regs*)>:
c0011cb3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011cb8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011cbb:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011cc1:	89 c2                	mov    edx,eax
c0011cc3:	c1 fa 1f             	sar    edx,0x1f
c0011cc6:	c3                   	ret    

c0011cc7 <SysTTYName(regs*)>:
c0011cc7:	b8 01 00 00 00       	mov    eax,0x1
c0011ccc:	31 d2                	xor    edx,edx
c0011cce:	c3                   	ret    

c0011ccf <SysFormatDisk(regs*)>:
c0011ccf:	56                   	push   esi
c0011cd0:	53                   	push   ebx
c0011cd1:	83 ec 04             	sub    esp,0x4
c0011cd4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011cd8:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c0011cde:	eb 2a                	jmp    c0011d0a <SysFormatDisk(regs*)+0x3b>
c0011ce0:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011ce3:	83 ec 0c             	sub    esp,0xc
c0011ce6:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011ce9:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011ceb:	51                   	push   ecx
c0011cec:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011cef:	51                   	push   ecx
c0011cf0:	50                   	push   eax
c0011cf1:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0011cf8:	50                   	push   eax
c0011cf9:	53                   	push   ebx
c0011cfa:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011cfd:	83 c4 20             	add    esp,0x20
c0011d00:	83 f8 08             	cmp    eax,0x8
c0011d03:	89 c1                	mov    ecx,eax
c0011d05:	75 14                	jne    c0011d1b <SysFormatDisk(regs*)+0x4c>
c0011d07:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011d0a:	85 db                	test   ebx,ebx
c0011d0c:	75 d2                	jne    c0011ce0 <SysFormatDisk(regs*)+0x11>
c0011d0e:	b8 03 00 00 00       	mov    eax,0x3
c0011d13:	31 d2                	xor    edx,edx
c0011d15:	83 c4 04             	add    esp,0x4
c0011d18:	5b                   	pop    ebx
c0011d19:	5e                   	pop    esi
c0011d1a:	c3                   	ret    
c0011d1b:	85 c0                	test   eax,eax
c0011d1d:	74 13                	je     c0011d32 <SysFormatDisk(regs*)+0x63>
c0011d1f:	31 d2                	xor    edx,edx
c0011d21:	83 f9 09             	cmp    ecx,0x9
c0011d24:	b8 01 00 00 00       	mov    eax,0x1
c0011d29:	74 ea                	je     c0011d15 <SysFormatDisk(regs*)+0x46>
c0011d2b:	b8 02 00 00 00       	mov    eax,0x2
c0011d30:	eb e1                	jmp    c0011d13 <SysFormatDisk(regs*)+0x44>
c0011d32:	31 c0                	xor    eax,eax
c0011d34:	eb dd                	jmp    c0011d13 <SysFormatDisk(regs*)+0x44>

c0011d36 <SysSetDiskVolumeLabel(regs*)>:
c0011d36:	56                   	push   esi
c0011d37:	53                   	push   ebx
c0011d38:	83 ec 04             	sub    esp,0x4
c0011d3b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011d3f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011d42:	83 f8 19             	cmp    eax,0x19
c0011d45:	77 33                	ja     c0011d7a <SysSetDiskVolumeLabel(regs*)+0x44>
c0011d47:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0011d4e:	85 c9                	test   ecx,ecx
c0011d50:	74 28                	je     c0011d7a <SysSetDiskVolumeLabel(regs*)+0x44>
c0011d52:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011d55:	85 db                	test   ebx,ebx
c0011d57:	74 21                	je     c0011d7a <SysSetDiskVolumeLabel(regs*)+0x44>
c0011d59:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011d5f:	85 d2                	test   edx,edx
c0011d61:	74 17                	je     c0011d7a <SysSetDiskVolumeLabel(regs*)+0x44>
c0011d63:	8b 32                	mov    esi,DWORD PTR [edx]
c0011d65:	53                   	push   ebx
c0011d66:	50                   	push   eax
c0011d67:	51                   	push   ecx
c0011d68:	52                   	push   edx
c0011d69:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011d6c:	83 c4 10             	add    esp,0x10
c0011d6f:	83 c4 04             	add    esp,0x4
c0011d72:	5b                   	pop    ebx
c0011d73:	5e                   	pop    esi
c0011d74:	89 c2                	mov    edx,eax
c0011d76:	c1 fa 1f             	sar    edx,0x1f
c0011d79:	c3                   	ret    
c0011d7a:	83 c4 04             	add    esp,0x4
c0011d7d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011d82:	5b                   	pop    ebx
c0011d83:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d88:	5e                   	pop    esi
c0011d89:	c3                   	ret    

c0011d8a <SysGetDiskVolumeLabel(regs*)>:
c0011d8a:	57                   	push   edi
c0011d8b:	56                   	push   esi
c0011d8c:	53                   	push   ebx
c0011d8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d91:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011d94:	83 fa 19             	cmp    edx,0x19
c0011d97:	77 3c                	ja     c0011dd5 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011d99:	8b 0c 95 80 b8 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd4780]
c0011da0:	85 c9                	test   ecx,ecx
c0011da2:	74 31                	je     c0011dd5 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011da4:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011da7:	85 db                	test   ebx,ebx
c0011da9:	74 2a                	je     c0011dd5 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011dab:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011dae:	85 f6                	test   esi,esi
c0011db0:	74 23                	je     c0011dd5 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011db2:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011db8:	85 c0                	test   eax,eax
c0011dba:	74 19                	je     c0011dd5 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011dbc:	83 ec 0c             	sub    esp,0xc
c0011dbf:	8b 38                	mov    edi,DWORD PTR [eax]
c0011dc1:	56                   	push   esi
c0011dc2:	53                   	push   ebx
c0011dc3:	52                   	push   edx
c0011dc4:	51                   	push   ecx
c0011dc5:	50                   	push   eax
c0011dc6:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011dc9:	83 c4 20             	add    esp,0x20
c0011dcc:	5b                   	pop    ebx
c0011dcd:	5e                   	pop    esi
c0011dce:	89 c2                	mov    edx,eax
c0011dd0:	c1 fa 1f             	sar    edx,0x1f
c0011dd3:	5f                   	pop    edi
c0011dd4:	c3                   	ret    
c0011dd5:	5b                   	pop    ebx
c0011dd6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011ddb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011de0:	5e                   	pop    esi
c0011de1:	5f                   	pop    edi
c0011de2:	c3                   	ret    

c0011de3 <SysShutdown(regs*)>:
c0011de3:	57                   	push   edi
c0011de4:	56                   	push   esi
c0011de5:	83 ec 04             	sub    esp,0x4
c0011de8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011dec:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011def:	85 c0                	test   eax,eax
c0011df1:	74 1e                	je     c0011e11 <SysShutdown(regs*)+0x2e>
c0011df3:	83 f8 01             	cmp    eax,0x1
c0011df6:	74 5f                	je     c0011e57 <SysShutdown(regs*)+0x74>
c0011df8:	83 f8 02             	cmp    eax,0x2
c0011dfb:	be ff ff ff ff       	mov    esi,0xffffffff
c0011e00:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011e05:	74 32                	je     c0011e39 <SysShutdown(regs*)+0x56>
c0011e07:	83 c4 04             	add    esp,0x4
c0011e0a:	89 f0                	mov    eax,esi
c0011e0c:	5e                   	pop    esi
c0011e0d:	89 fa                	mov    edx,edi
c0011e0f:	5f                   	pop    edi
c0011e10:	c3                   	ret    
c0011e11:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011e16:	be ff ff ff ff       	mov    esi,0xffffffff
c0011e1b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011e20:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e22:	6a 00                	push   0x0
c0011e24:	6a 00                	push   0x0
c0011e26:	6a 00                	push   0x0
c0011e28:	50                   	push   eax
c0011e29:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011e2c:	83 c4 10             	add    esp,0x10
c0011e2f:	89 f0                	mov    eax,esi
c0011e31:	83 c4 04             	add    esp,0x4
c0011e34:	89 fa                	mov    edx,edi
c0011e36:	5e                   	pop    esi
c0011e37:	5f                   	pop    edi
c0011e38:	c3                   	ret    
c0011e39:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011e3e:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e40:	6a 00                	push   0x0
c0011e42:	6a 00                	push   0x0
c0011e44:	6a 01                	push   0x1
c0011e46:	50                   	push   eax
c0011e47:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011e4a:	83 c4 10             	add    esp,0x10
c0011e4d:	89 f0                	mov    eax,esi
c0011e4f:	83 c4 04             	add    esp,0x4
c0011e52:	89 fa                	mov    edx,edi
c0011e54:	5e                   	pop    esi
c0011e55:	5f                   	pop    edi
c0011e56:	c3                   	ret    
c0011e57:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c0011e5c:	85 c0                	test   eax,eax
c0011e5e:	74 02                	je     c0011e62 <SysShutdown(regs*)+0x7f>
c0011e60:	ff d0                	call   eax
c0011e62:	31 f6                	xor    esi,esi
c0011e64:	83 c4 04             	add    esp,0x4
c0011e67:	89 f0                	mov    eax,esi
c0011e69:	31 ff                	xor    edi,edi
c0011e6b:	5e                   	pop    esi
c0011e6c:	89 fa                	mov    edx,edi
c0011e6e:	5f                   	pop    edi
c0011e6f:	c3                   	ret    

c0011e70 <SysRealpath(regs*)>:
c0011e70:	53                   	push   ebx
c0011e71:	83 ec 08             	sub    esp,0x8
c0011e74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e78:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0011e7b:	85 c9                	test   ecx,ecx
c0011e7d:	74 36                	je     c0011eb5 <SysRealpath(regs*)+0x45>
c0011e7f:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011e82:	31 d2                	xor    edx,edx
c0011e84:	b8 01 00 00 00       	mov    eax,0x1
c0011e89:	85 db                	test   ebx,ebx
c0011e8b:	75 05                	jne    c0011e92 <SysRealpath(regs*)+0x22>
c0011e8d:	83 c4 08             	add    esp,0x8
c0011e90:	5b                   	pop    ebx
c0011e91:	c3                   	ret    
c0011e92:	6a 00                	push   0x0
c0011e94:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e99:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e9c:	05 0c 01 00 00       	add    eax,0x10c
c0011ea1:	50                   	push   eax
c0011ea2:	51                   	push   ecx
c0011ea3:	53                   	push   ebx
c0011ea4:	e8 f1 99 ff ff       	call   c000b89a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011ea9:	83 c4 10             	add    esp,0x10
c0011eac:	31 c0                	xor    eax,eax
c0011eae:	31 d2                	xor    edx,edx
c0011eb0:	83 c4 08             	add    esp,0x8
c0011eb3:	5b                   	pop    ebx
c0011eb4:	c3                   	ret    
c0011eb5:	b8 01 00 00 00       	mov    eax,0x1
c0011eba:	31 d2                	xor    edx,edx
c0011ebc:	eb f2                	jmp    c0011eb0 <SysRealpath(regs*)+0x40>

c0011ebe <SysReadDir(regs*)>:
c0011ebe:	53                   	push   ebx
c0011ebf:	83 ec 18             	sub    esp,0x18
c0011ec2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ec6:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011ec9:	83 f8 02             	cmp    eax,0x2
c0011ecc:	76 4f                	jbe    c0011f1d <SysReadDir(regs*)+0x5f>
c0011ece:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011ed5:	77 52                	ja     c0011f29 <SysReadDir(regs*)+0x6b>
c0011ed7:	83 ec 0c             	sub    esp,0xc
c0011eda:	50                   	push   eax
c0011edb:	e8 bb 75 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011ee0:	83 c4 10             	add    esp,0x10
c0011ee3:	85 c0                	test   eax,eax
c0011ee5:	74 42                	je     c0011f29 <SysReadDir(regs*)+0x6b>
c0011ee7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011eef:	83 ec 0c             	sub    esp,0xc
c0011ef2:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011ef6:	8b 10                	mov    edx,DWORD PTR [eax]
c0011ef8:	51                   	push   ecx
c0011ef9:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011efc:	51                   	push   ecx
c0011efd:	6a 00                	push   0x0
c0011eff:	68 10 01 00 00       	push   0x110
c0011f04:	50                   	push   eax
c0011f05:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011f08:	83 c4 20             	add    esp,0x20
c0011f0b:	85 c0                	test   eax,eax
c0011f0d:	89 c1                	mov    ecx,eax
c0011f0f:	74 27                	je     c0011f38 <SysReadDir(regs*)+0x7a>
c0011f11:	31 d2                	xor    edx,edx
c0011f13:	83 f9 07             	cmp    ecx,0x7
c0011f16:	b8 02 00 00 00       	mov    eax,0x2
c0011f1b:	75 16                	jne    c0011f33 <SysReadDir(regs*)+0x75>
c0011f1d:	b8 01 00 00 00       	mov    eax,0x1
c0011f22:	31 d2                	xor    edx,edx
c0011f24:	83 c4 18             	add    esp,0x18
c0011f27:	5b                   	pop    ebx
c0011f28:	c3                   	ret    
c0011f29:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f2e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f33:	83 c4 18             	add    esp,0x18
c0011f36:	5b                   	pop    ebx
c0011f37:	c3                   	ret    
c0011f38:	31 c0                	xor    eax,eax
c0011f3a:	31 d2                	xor    edx,edx
c0011f3c:	eb e6                	jmp    c0011f24 <SysReadDir(regs*)+0x66>

c0011f3e <SysIsATTY(regs*)>:
c0011f3e:	83 ec 0c             	sub    esp,0xc
c0011f41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f45:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011f48:	83 f8 02             	cmp    eax,0x2
c0011f4b:	76 07                	jbe    c0011f54 <SysIsATTY(regs*)+0x16>
c0011f4d:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011f52:	75 26                	jne    c0011f7a <SysIsATTY(regs*)+0x3c>
c0011f54:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f59:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f5c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011f62:	85 c0                	test   eax,eax
c0011f64:	74 24                	je     c0011f8a <SysIsATTY(regs*)+0x4c>
c0011f66:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f68:	83 ec 0c             	sub    esp,0xc
c0011f6b:	50                   	push   eax
c0011f6c:	ff 12                	call   DWORD PTR [edx]
c0011f6e:	83 c4 10             	add    esp,0x10
c0011f71:	31 d2                	xor    edx,edx
c0011f73:	83 c4 0c             	add    esp,0xc
c0011f76:	0f b6 c0             	movzx  eax,al
c0011f79:	c3                   	ret    
c0011f7a:	83 ec 0c             	sub    esp,0xc
c0011f7d:	50                   	push   eax
c0011f7e:	e8 18 75 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011f83:	83 c4 10             	add    esp,0x10
c0011f86:	85 c0                	test   eax,eax
c0011f88:	75 dc                	jne    c0011f66 <SysIsATTY(regs*)+0x28>
c0011f8a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f8f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f94:	83 c4 0c             	add    esp,0xc
c0011f97:	c3                   	ret    

c0011f98 <SysSeek(regs*)>:
c0011f98:	56                   	push   esi
c0011f99:	53                   	push   ebx
c0011f9a:	83 ec 04             	sub    esp,0x4
c0011f9d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011fa1:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011fa4:	8d 71 fd             	lea    esi,[ecx-0x3]
c0011fa7:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c0011fad:	77 33                	ja     c0011fe2 <SysSeek(regs*)+0x4a>
c0011faf:	83 ec 0c             	sub    esp,0xc
c0011fb2:	51                   	push   ecx
c0011fb3:	e8 e3 74 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011fb8:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011fbb:	83 c4 0c             	add    esp,0xc
c0011fbe:	31 db                	xor    ebx,ebx
c0011fc0:	53                   	push   ebx
c0011fc1:	51                   	push   ecx
c0011fc2:	50                   	push   eax
c0011fc3:	e8 aa 9c ff ff       	call   c000bc72 <File::seek(unsigned long long)>
c0011fc8:	83 c4 10             	add    esp,0x10
c0011fcb:	85 c0                	test   eax,eax
c0011fcd:	0f 95 c0             	setne  al
c0011fd0:	31 d2                	xor    edx,edx
c0011fd2:	0f b6 c0             	movzx  eax,al
c0011fd5:	f7 d8                	neg    eax
c0011fd7:	83 d2 00             	adc    edx,0x0
c0011fda:	83 c4 04             	add    esp,0x4
c0011fdd:	5b                   	pop    ebx
c0011fde:	f7 da                	neg    edx
c0011fe0:	5e                   	pop    esi
c0011fe1:	c3                   	ret    
c0011fe2:	83 c4 04             	add    esp,0x4
c0011fe5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011fea:	5b                   	pop    ebx
c0011feb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ff0:	5e                   	pop    esi
c0011ff1:	c3                   	ret    

c0011ff2 <SysTell(regs*)>:
c0011ff2:	53                   	push   ebx
c0011ff3:	83 ec 08             	sub    esp,0x8
c0011ff6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011ffa:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011ffd:	83 f8 02             	cmp    eax,0x2
c0012000:	76 4e                	jbe    c0012050 <SysTell(regs*)+0x5e>
c0012002:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012007:	76 19                	jbe    c0012022 <SysTell(regs*)+0x30>
c0012009:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001200c:	31 d2                	xor    edx,edx
c001200e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012014:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001201b:	83 c4 08             	add    esp,0x8
c001201e:	31 c0                	xor    eax,eax
c0012020:	5b                   	pop    ebx
c0012021:	c3                   	ret    
c0012022:	83 ec 0c             	sub    esp,0xc
c0012025:	50                   	push   eax
c0012026:	e8 70 74 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c001202b:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001202e:	5a                   	pop    edx
c001202f:	59                   	pop    ecx
c0012030:	53                   	push   ebx
c0012031:	50                   	push   eax
c0012032:	e8 e7 9c ff ff       	call   c000bd1e <File::tell(unsigned long long*)>
c0012037:	83 c4 10             	add    esp,0x10
c001203a:	85 c0                	test   eax,eax
c001203c:	0f 95 c0             	setne  al
c001203f:	31 d2                	xor    edx,edx
c0012041:	0f b6 c0             	movzx  eax,al
c0012044:	f7 d8                	neg    eax
c0012046:	83 d2 00             	adc    edx,0x0
c0012049:	83 c4 08             	add    esp,0x8
c001204c:	5b                   	pop    ebx
c001204d:	f7 da                	neg    edx
c001204f:	c3                   	ret    
c0012050:	83 c4 08             	add    esp,0x8
c0012053:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012058:	5b                   	pop    ebx
c0012059:	ba ff ff ff ff       	mov    edx,0xffffffff
c001205e:	c3                   	ret    

c001205f <SysSize(regs*)>:
c001205f:	53                   	push   ebx
c0012060:	83 ec 18             	sub    esp,0x18
c0012063:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012067:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001206a:	83 f8 02             	cmp    eax,0x2
c001206d:	76 54                	jbe    c00120c3 <SysSize(regs*)+0x64>
c001206f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012074:	76 19                	jbe    c001208f <SysSize(regs*)+0x30>
c0012076:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012079:	31 d2                	xor    edx,edx
c001207b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012081:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012088:	83 c4 18             	add    esp,0x18
c001208b:	31 c0                	xor    eax,eax
c001208d:	5b                   	pop    ebx
c001208e:	c3                   	ret    
c001208f:	83 ec 0c             	sub    esp,0xc
c0012092:	50                   	push   eax
c0012093:	e8 03 74 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0012098:	83 c4 0c             	add    esp,0xc
c001209b:	8d 54 24 13          	lea    edx,[esp+0x13]
c001209f:	52                   	push   edx
c00120a0:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00120a3:	52                   	push   edx
c00120a4:	50                   	push   eax
c00120a5:	e8 0c 9e ff ff       	call   c000beb6 <File::stat(unsigned long long*, bool*)>
c00120aa:	83 c4 10             	add    esp,0x10
c00120ad:	85 c0                	test   eax,eax
c00120af:	0f 95 c0             	setne  al
c00120b2:	31 d2                	xor    edx,edx
c00120b4:	0f b6 c0             	movzx  eax,al
c00120b7:	f7 d8                	neg    eax
c00120b9:	83 d2 00             	adc    edx,0x0
c00120bc:	83 c4 18             	add    esp,0x18
c00120bf:	5b                   	pop    ebx
c00120c0:	f7 da                	neg    edx
c00120c2:	c3                   	ret    
c00120c3:	83 c4 18             	add    esp,0x18
c00120c6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00120cb:	5b                   	pop    ebx
c00120cc:	ba ff ff ff ff       	mov    edx,0xffffffff
c00120d1:	c3                   	ret    

c00120d2 <SysSizeFromFilename(regs*)>:
c00120d2:	55                   	push   ebp
c00120d3:	57                   	push   edi
c00120d4:	56                   	push   esi
c00120d5:	53                   	push   ebx
c00120d6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00120dc:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00120e3:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00120e6:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00120e9:	85 f6                	test   esi,esi
c00120eb:	89 f8                	mov    eax,edi
c00120ed:	74 09                	je     c00120f8 <SysSizeFromFilename(regs*)+0x26>
c00120ef:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00120f5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00120f8:	83 f8 02             	cmp    eax,0x2
c00120fb:	0f 86 ad 00 00 00    	jbe    c00121ae <SysSizeFromFilename(regs*)+0xdc>
c0012101:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012106:	76 1f                	jbe    c0012127 <SysSizeFromFilename(regs*)+0x55>
c0012108:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001210b:	31 d2                	xor    edx,edx
c001210d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012113:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001211a:	31 c0                	xor    eax,eax
c001211c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012122:	5b                   	pop    ebx
c0012123:	5e                   	pop    esi
c0012124:	5f                   	pop    edi
c0012125:	5d                   	pop    ebp
c0012126:	c3                   	ret    
c0012127:	83 ec 0c             	sub    esp,0xc
c001212a:	68 14 01 00 00       	push   0x114
c001212f:	e8 9f 59 ff ff       	call   c0007ad3 <malloc>
c0012134:	6a 01                	push   0x1
c0012136:	89 c5                	mov    ebp,eax
c0012138:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001213d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012140:	50                   	push   eax
c0012141:	57                   	push   edi
c0012142:	55                   	push   ebp
c0012143:	e8 70 99 ff ff       	call   c000bab8 <File::File(char const*, Process*, bool)>
c0012148:	83 c4 1c             	add    esp,0x1c
c001214b:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001214f:	50                   	push   eax
c0012150:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012153:	52                   	push   edx
c0012154:	55                   	push   ebp
c0012155:	e8 5c 9d ff ff       	call   c000beb6 <File::stat(unsigned long long*, bool*)>
c001215a:	83 c4 10             	add    esp,0x10
c001215d:	85 ed                	test   ebp,ebp
c001215f:	89 c3                	mov    ebx,eax
c0012161:	74 0d                	je     c0012170 <SysSizeFromFilename(regs*)+0x9e>
c0012163:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012166:	83 ec 0c             	sub    esp,0xc
c0012169:	55                   	push   ebp
c001216a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001216d:	83 c4 10             	add    esp,0x10
c0012170:	85 db                	test   ebx,ebx
c0012172:	75 3a                	jne    c00121ae <SysSizeFromFilename(regs*)+0xdc>
c0012174:	83 ec 08             	sub    esp,0x8
c0012177:	8d 44 24 10          	lea    eax,[esp+0x10]
c001217b:	50                   	push   eax
c001217c:	57                   	push   edi
c001217d:	e8 ba 8f ff ff       	call   c000b13c <KeDereferenceSymlink(char const*, char*)>
c0012182:	83 c4 10             	add    esp,0x10
c0012185:	ba 00 00 00 00       	mov    edx,0x0
c001218a:	83 f8 01             	cmp    eax,0x1
c001218d:	b8 00 00 00 00       	mov    eax,0x0
c0012192:	74 2f                	je     c00121c3 <SysSizeFromFilename(regs*)+0xf1>
c0012194:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0012199:	74 3b                	je     c00121d6 <SysSizeFromFilename(regs*)+0x104>
c001219b:	85 f6                	test   esi,esi
c001219d:	0f 84 79 ff ff ff    	je     c001211c <SysSizeFromFilename(regs*)+0x4a>
c00121a3:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00121a9:	e9 6e ff ff ff       	jmp    c001211c <SysSizeFromFilename(regs*)+0x4a>
c00121ae:	81 c4 2c 01 00 00    	add    esp,0x12c
c00121b4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00121b9:	5b                   	pop    ebx
c00121ba:	ba ff ff ff ff       	mov    edx,0xffffffff
c00121bf:	5e                   	pop    esi
c00121c0:	5f                   	pop    edi
c00121c1:	5d                   	pop    ebp
c00121c2:	c3                   	ret    
c00121c3:	85 f6                	test   esi,esi
c00121c5:	0f 84 51 ff ff ff    	je     c001211c <SysSizeFromFilename(regs*)+0x4a>
c00121cb:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00121d1:	e9 46 ff ff ff       	jmp    c001211c <SysSizeFromFilename(regs*)+0x4a>
c00121d6:	85 f6                	test   esi,esi
c00121d8:	0f 84 3e ff ff ff    	je     c001211c <SysSizeFromFilename(regs*)+0x4a>
c00121de:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00121e4:	e9 33 ff ff ff       	jmp    c001211c <SysSizeFromFilename(regs*)+0x4a>

c00121e9 <SysSizeFromFilenameNoSymlink(regs*)>:
c00121e9:	55                   	push   ebp
c00121ea:	57                   	push   edi
c00121eb:	56                   	push   esi
c00121ec:	53                   	push   ebx
c00121ed:	81 ec 4c 02 00 00    	sub    esp,0x24c
c00121f3:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c00121fa:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00121fd:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012200:	85 f6                	test   esi,esi
c0012202:	89 f8                	mov    eax,edi
c0012204:	74 09                	je     c001220f <SysSizeFromFilenameNoSymlink(regs*)+0x26>
c0012206:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001220c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001220f:	83 f8 02             	cmp    eax,0x2
c0012212:	0f 86 ca 00 00 00    	jbe    c00122e2 <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c0012218:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001221d:	76 1f                	jbe    c001223e <SysSizeFromFilenameNoSymlink(regs*)+0x55>
c001221f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012222:	31 d2                	xor    edx,edx
c0012224:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001222a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012231:	31 c0                	xor    eax,eax
c0012233:	81 c4 4c 02 00 00    	add    esp,0x24c
c0012239:	5b                   	pop    ebx
c001223a:	5e                   	pop    esi
c001223b:	5f                   	pop    edi
c001223c:	5d                   	pop    ebp
c001223d:	c3                   	ret    
c001223e:	83 ec 0c             	sub    esp,0xc
c0012241:	68 14 01 00 00       	push   0x114
c0012246:	e8 88 58 ff ff       	call   c0007ad3 <malloc>
c001224b:	6a 00                	push   0x0
c001224d:	89 c5                	mov    ebp,eax
c001224f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012254:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0012257:	51                   	push   ecx
c0012258:	57                   	push   edi
c0012259:	55                   	push   ebp
c001225a:	e8 59 98 ff ff       	call   c000bab8 <File::File(char const*, Process*, bool)>
c001225f:	83 c4 1c             	add    esp,0x1c
c0012262:	8d 44 24 13          	lea    eax,[esp+0x13]
c0012266:	50                   	push   eax
c0012267:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001226a:	53                   	push   ebx
c001226b:	55                   	push   ebp
c001226c:	e8 45 9c ff ff       	call   c000beb6 <File::stat(unsigned long long*, bool*)>
c0012271:	83 c4 10             	add    esp,0x10
c0012274:	85 ed                	test   ebp,ebp
c0012276:	89 c3                	mov    ebx,eax
c0012278:	74 0d                	je     c0012287 <SysSizeFromFilenameNoSymlink(regs*)+0x9e>
c001227a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001227d:	83 ec 0c             	sub    esp,0xc
c0012280:	55                   	push   ebp
c0012281:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012284:	83 c4 10             	add    esp,0x10
c0012287:	85 db                	test   ebx,ebx
c0012289:	75 57                	jne    c00122e2 <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c001228b:	6a 00                	push   0x0
c001228d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012292:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012295:	05 0c 01 00 00       	add    eax,0x10c
c001229a:	50                   	push   eax
c001229b:	57                   	push   edi
c001229c:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00122a3:	53                   	push   ebx
c00122a4:	e8 f1 95 ff ff       	call   c000b89a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00122a9:	58                   	pop    eax
c00122aa:	5a                   	pop    edx
c00122ab:	8d 44 24 18          	lea    eax,[esp+0x18]
c00122af:	50                   	push   eax
c00122b0:	53                   	push   ebx
c00122b1:	e8 86 8e ff ff       	call   c000b13c <KeDereferenceSymlink(char const*, char*)>
c00122b6:	83 c4 10             	add    esp,0x10
c00122b9:	ba 00 00 00 00       	mov    edx,0x0
c00122be:	83 f8 01             	cmp    eax,0x1
c00122c1:	b8 00 00 00 00       	mov    eax,0x0
c00122c6:	74 2f                	je     c00122f7 <SysSizeFromFilenameNoSymlink(regs*)+0x10e>
c00122c8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00122cd:	74 3b                	je     c001230a <SysSizeFromFilenameNoSymlink(regs*)+0x121>
c00122cf:	85 f6                	test   esi,esi
c00122d1:	0f 84 5c ff ff ff    	je     c0012233 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c00122d7:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00122dd:	e9 51 ff ff ff       	jmp    c0012233 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c00122e2:	81 c4 4c 02 00 00    	add    esp,0x24c
c00122e8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00122ed:	5b                   	pop    ebx
c00122ee:	ba ff ff ff ff       	mov    edx,0xffffffff
c00122f3:	5e                   	pop    esi
c00122f4:	5f                   	pop    edi
c00122f5:	5d                   	pop    ebp
c00122f6:	c3                   	ret    
c00122f7:	85 f6                	test   esi,esi
c00122f9:	0f 84 34 ff ff ff    	je     c0012233 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c00122ff:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0012305:	e9 29 ff ff ff       	jmp    c0012233 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001230a:	85 f6                	test   esi,esi
c001230c:	0f 84 21 ff ff ff    	je     c0012233 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0012312:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012318:	e9 16 ff ff ff       	jmp    c0012233 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>

c001231d <SysClose(regs*)>:
c001231d:	53                   	push   ebx
c001231e:	83 ec 08             	sub    esp,0x8
c0012321:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012325:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012328:	83 f8 02             	cmp    eax,0x2
c001232b:	76 41                	jbe    c001236e <SysClose(regs*)+0x51>
c001232d:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0012333:	83 fa 01             	cmp    edx,0x1
c0012336:	76 2d                	jbe    c0012365 <SysClose(regs*)+0x48>
c0012338:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001233d:	77 2f                	ja     c001236e <SysClose(regs*)+0x51>
c001233f:	83 ec 0c             	sub    esp,0xc
c0012342:	50                   	push   eax
c0012343:	e8 53 71 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0012348:	89 04 24             	mov    DWORD PTR [esp],eax
c001234b:	89 c3                	mov    ebx,eax
c001234d:	e8 c0 98 ff ff       	call   c000bc12 <File::close()>
c0012352:	83 c4 10             	add    esp,0x10
c0012355:	85 db                	test   ebx,ebx
c0012357:	74 0c                	je     c0012365 <SysClose(regs*)+0x48>
c0012359:	8b 03                	mov    eax,DWORD PTR [ebx]
c001235b:	83 ec 0c             	sub    esp,0xc
c001235e:	53                   	push   ebx
c001235f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012362:	83 c4 10             	add    esp,0x10
c0012365:	83 c4 08             	add    esp,0x8
c0012368:	31 c0                	xor    eax,eax
c001236a:	5b                   	pop    ebx
c001236b:	31 d2                	xor    edx,edx
c001236d:	c3                   	ret    
c001236e:	83 c4 08             	add    esp,0x8
c0012371:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012376:	5b                   	pop    ebx
c0012377:	ba ff ff ff ff       	mov    edx,0xffffffff
c001237c:	c3                   	ret    

c001237d <SysOpenDir(regs*)>:
c001237d:	56                   	push   esi
c001237e:	53                   	push   ebx
c001237f:	83 ec 04             	sub    esp,0x4
c0012382:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012386:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0012389:	85 c9                	test   ecx,ecx
c001238b:	74 5d                	je     c00123ea <SysOpenDir(regs*)+0x6d>
c001238d:	83 ec 0c             	sub    esp,0xc
c0012390:	68 14 01 00 00       	push   0x114
c0012395:	e8 39 57 ff ff       	call   c0007ad3 <malloc>
c001239a:	83 c4 0c             	add    esp,0xc
c001239d:	89 c6                	mov    esi,eax
c001239f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00123a4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00123a7:	50                   	push   eax
c00123a8:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00123ab:	52                   	push   edx
c00123ac:	56                   	push   esi
c00123ad:	e8 c4 9c ff ff       	call   c000c076 <Directory::Directory(char const*, Process*)>
c00123b2:	83 c4 10             	add    esp,0x10
c00123b5:	85 f6                	test   esi,esi
c00123b7:	74 31                	je     c00123ea <SysOpenDir(regs*)+0x6d>
c00123b9:	83 ec 0c             	sub    esp,0xc
c00123bc:	56                   	push   esi
c00123bd:	e8 7c 9d ff ff       	call   c000c13e <Directory::open()>
c00123c2:	83 c4 10             	add    esp,0x10
c00123c5:	85 c0                	test   eax,eax
c00123c7:	75 21                	jne    c00123ea <SysOpenDir(regs*)+0x6d>
c00123c9:	83 ec 0c             	sub    esp,0xc
c00123cc:	56                   	push   esi
c00123cd:	e8 cc 6d ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c00123d2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00123d5:	83 c4 10             	add    esp,0x10
c00123d8:	89 02                	mov    DWORD PTR [edx],eax
c00123da:	c1 f8 1f             	sar    eax,0x1f
c00123dd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00123e0:	83 c4 04             	add    esp,0x4
c00123e3:	31 c0                	xor    eax,eax
c00123e5:	5b                   	pop    ebx
c00123e6:	31 d2                	xor    edx,edx
c00123e8:	5e                   	pop    esi
c00123e9:	c3                   	ret    
c00123ea:	83 c4 04             	add    esp,0x4
c00123ed:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00123f2:	5b                   	pop    ebx
c00123f3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00123f8:	5e                   	pop    esi
c00123f9:	c3                   	ret    

c00123fa <SysMakeDir(regs*)>:
c00123fa:	56                   	push   esi
c00123fb:	53                   	push   ebx
c00123fc:	83 ec 10             	sub    esp,0x10
c00123ff:	68 14 01 00 00       	push   0x114
c0012404:	e8 ca 56 ff ff       	call   c0007ad3 <malloc>
c0012409:	83 c4 0c             	add    esp,0xc
c001240c:	89 c3                	mov    ebx,eax
c001240e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012413:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012416:	50                   	push   eax
c0012417:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001241b:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c001241e:	52                   	push   edx
c001241f:	53                   	push   ebx
c0012420:	e8 51 9c ff ff       	call   c000c076 <Directory::Directory(char const*, Process*)>
c0012425:	83 c4 10             	add    esp,0x10
c0012428:	85 db                	test   ebx,ebx
c001242a:	74 2c                	je     c0012458 <SysMakeDir(regs*)+0x5e>
c001242c:	83 ec 0c             	sub    esp,0xc
c001242f:	53                   	push   ebx
c0012430:	e8 e9 9e ff ff       	call   c000c31e <Directory::create()>
c0012435:	89 c6                	mov    esi,eax
c0012437:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012439:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001243c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001243f:	83 c4 10             	add    esp,0x10
c0012442:	31 c0                	xor    eax,eax
c0012444:	85 f6                	test   esi,esi
c0012446:	0f 95 c0             	setne  al
c0012449:	31 d2                	xor    edx,edx
c001244b:	f7 d8                	neg    eax
c001244d:	83 d2 00             	adc    edx,0x0
c0012450:	83 c4 04             	add    esp,0x4
c0012453:	5b                   	pop    ebx
c0012454:	f7 da                	neg    edx
c0012456:	5e                   	pop    esi
c0012457:	c3                   	ret    
c0012458:	83 c4 04             	add    esp,0x4
c001245b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012460:	5b                   	pop    ebx
c0012461:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012466:	5e                   	pop    esi
c0012467:	c3                   	ret    

c0012468 <SysCloseDir(regs*)>:
c0012468:	53                   	push   ebx
c0012469:	ba ff ff ff ff       	mov    edx,0xffffffff
c001246e:	83 ec 08             	sub    esp,0x8
c0012471:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012475:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0012478:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001247d:	8d 59 fd             	lea    ebx,[ecx-0x3]
c0012480:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c0012486:	77 2a                	ja     c00124b2 <SysCloseDir(regs*)+0x4a>
c0012488:	83 ec 0c             	sub    esp,0xc
c001248b:	51                   	push   ecx
c001248c:	e8 0a 70 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0012491:	89 04 24             	mov    DWORD PTR [esp],eax
c0012494:	89 c3                	mov    ebx,eax
c0012496:	e8 ff 9c ff ff       	call   c000c19a <Directory::close()>
c001249b:	83 c4 10             	add    esp,0x10
c001249e:	85 db                	test   ebx,ebx
c00124a0:	74 0c                	je     c00124ae <SysCloseDir(regs*)+0x46>
c00124a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00124a4:	83 ec 0c             	sub    esp,0xc
c00124a7:	53                   	push   ebx
c00124a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00124ab:	83 c4 10             	add    esp,0x10
c00124ae:	31 c0                	xor    eax,eax
c00124b0:	31 d2                	xor    edx,edx
c00124b2:	83 c4 08             	add    esp,0x8
c00124b5:	5b                   	pop    ebx
c00124b6:	c3                   	ret    

c00124b7 <SysWait(regs*)>:
c00124b7:	83 ec 10             	sub    esp,0x10
c00124ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00124be:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00124c1:	52                   	push   edx
c00124c2:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00124c5:	51                   	push   ecx
c00124c6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00124c9:	50                   	push   eax
c00124ca:	e8 0d 3e 00 00       	call   c00162dc <waitTask(int, int*, int)>
c00124cf:	83 c4 1c             	add    esp,0x1c
c00124d2:	89 c2                	mov    edx,eax
c00124d4:	c1 fa 1f             	sar    edx,0x1f
c00124d7:	c3                   	ret    

c00124d8 <SysNotImpl(regs*)>:
c00124d8:	83 ec 18             	sub    esp,0x18
c00124db:	68 66 25 02 c0       	push   0xc0022566
c00124e0:	e8 f6 f0 ff ff       	call   c00115db <KePanic(char const*)>
c00124e5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00124ea:	ba ff ff ff ff       	mov    edx,0xffffffff
c00124ef:	83 c4 1c             	add    esp,0x1c
c00124f2:	c3                   	ret    

c00124f3 <SysPanic(regs*)>:
c00124f3:	83 ec 18             	sub    esp,0x18
c00124f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00124fa:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00124fd:	50                   	push   eax
c00124fe:	e8 d8 f0 ff ff       	call   c00115db <KePanic(char const*)>
c0012503:	b8 01 00 00 00       	mov    eax,0x1
c0012508:	31 d2                	xor    edx,edx
c001250a:	83 c4 1c             	add    esp,0x1c
c001250d:	c3                   	ret    

c001250e <SysRmdir(regs*)>:
c001250e:	56                   	push   esi
c001250f:	53                   	push   ebx
c0012510:	83 ec 10             	sub    esp,0x10
c0012513:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012517:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001251a:	68 14 01 00 00       	push   0x114
c001251f:	e8 af 55 ff ff       	call   c0007ad3 <malloc>
c0012524:	6a 00                	push   0x0
c0012526:	89 c3                	mov    ebx,eax
c0012528:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001252d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012530:	50                   	push   eax
c0012531:	56                   	push   esi
c0012532:	53                   	push   ebx
c0012533:	e8 80 95 ff ff       	call   c000bab8 <File::File(char const*, Process*, bool)>
c0012538:	83 c4 14             	add    esp,0x14
c001253b:	53                   	push   ebx
c001253c:	e8 41 98 ff ff       	call   c000bd82 <File::unlink()>
c0012541:	83 c4 10             	add    esp,0x10
c0012544:	85 db                	test   ebx,ebx
c0012546:	89 c6                	mov    esi,eax
c0012548:	74 0c                	je     c0012556 <SysRmdir(regs*)+0x48>
c001254a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001254c:	83 ec 0c             	sub    esp,0xc
c001254f:	53                   	push   ebx
c0012550:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012553:	83 c4 10             	add    esp,0x10
c0012556:	31 c0                	xor    eax,eax
c0012558:	85 f6                	test   esi,esi
c001255a:	0f 95 c0             	setne  al
c001255d:	31 d2                	xor    edx,edx
c001255f:	f7 d8                	neg    eax
c0012561:	83 d2 00             	adc    edx,0x0
c0012564:	83 c4 04             	add    esp,0x4
c0012567:	5b                   	pop    ebx
c0012568:	f7 da                	neg    edx
c001256a:	5e                   	pop    esi
c001256b:	c3                   	ret    

c001256c <SysUnlink(regs*)>:
c001256c:	56                   	push   esi
c001256d:	53                   	push   ebx
c001256e:	83 ec 10             	sub    esp,0x10
c0012571:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012575:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0012578:	68 14 01 00 00       	push   0x114
c001257d:	e8 51 55 ff ff       	call   c0007ad3 <malloc>
c0012582:	6a 00                	push   0x0
c0012584:	89 c3                	mov    ebx,eax
c0012586:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001258b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001258e:	50                   	push   eax
c001258f:	56                   	push   esi
c0012590:	53                   	push   ebx
c0012591:	e8 22 95 ff ff       	call   c000bab8 <File::File(char const*, Process*, bool)>
c0012596:	83 c4 14             	add    esp,0x14
c0012599:	53                   	push   ebx
c001259a:	e8 e3 97 ff ff       	call   c000bd82 <File::unlink()>
c001259f:	83 c4 10             	add    esp,0x10
c00125a2:	85 db                	test   ebx,ebx
c00125a4:	89 c6                	mov    esi,eax
c00125a6:	74 0c                	je     c00125b4 <SysUnlink(regs*)+0x48>
c00125a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00125aa:	83 ec 0c             	sub    esp,0xc
c00125ad:	53                   	push   ebx
c00125ae:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00125b1:	83 c4 10             	add    esp,0x10
c00125b4:	31 c0                	xor    eax,eax
c00125b6:	85 f6                	test   esi,esi
c00125b8:	0f 95 c0             	setne  al
c00125bb:	31 d2                	xor    edx,edx
c00125bd:	f7 d8                	neg    eax
c00125bf:	83 d2 00             	adc    edx,0x0
c00125c2:	83 c4 04             	add    esp,0x4
c00125c5:	5b                   	pop    ebx
c00125c6:	f7 da                	neg    edx
c00125c8:	5e                   	pop    esi
c00125c9:	c3                   	ret    

c00125ca <SysGetArgv(regs*)>:
c00125ca:	83 ec 0c             	sub    esp,0xc
c00125cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00125d1:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00125d4:	85 c0                	test   eax,eax
c00125d6:	78 2c                	js     c0012604 <SysGetArgv(regs*)+0x3a>
c00125d8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00125de:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00125e1:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00125e7:	7d 1b                	jge    c0012604 <SysGetArgv(regs*)+0x3a>
c00125e9:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00125f0:	85 c0                	test   eax,eax
c00125f2:	74 18                	je     c001260c <SysGetArgv(regs*)+0x42>
c00125f4:	83 ec 08             	sub    esp,0x8
c00125f7:	50                   	push   eax
c00125f8:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00125fb:	50                   	push   eax
c00125fc:	e8 4f e0 fe ff       	call   c0000650 <strcpy>
c0012601:	83 c4 10             	add    esp,0x10
c0012604:	31 c0                	xor    eax,eax
c0012606:	31 d2                	xor    edx,edx
c0012608:	83 c4 0c             	add    esp,0xc
c001260b:	c3                   	ret    
c001260c:	b8 01 00 00 00       	mov    eax,0x1
c0012611:	31 d2                	xor    edx,edx
c0012613:	83 c4 0c             	add    esp,0xc
c0012616:	c3                   	ret    

c0012617 <SysUSleep(regs*)>:
c0012617:	83 ec 1c             	sub    esp,0x1c
c001261a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001261e:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0012621:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0012624:	6a 00                	push   0x0
c0012626:	6a 64                	push   0x64
c0012628:	52                   	push   edx
c0012629:	50                   	push   eax
c001262a:	e8 31 d1 00 00       	call   c001f760 <__udivdi3>
c001262f:	83 c4 14             	add    esp,0x14
c0012632:	50                   	push   eax
c0012633:	e8 88 3d 00 00       	call   c00163c0 <milliTenthSleep(unsigned int)>
c0012638:	31 c0                	xor    eax,eax
c001263a:	31 d2                	xor    edx,edx
c001263c:	83 c4 1c             	add    esp,0x1c
c001263f:	c3                   	ret    

c0012640 <SysSpawn(regs*)>:
c0012640:	56                   	push   esi
c0012641:	53                   	push   ebx
c0012642:	83 ec 04             	sub    esp,0x4
c0012645:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012649:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001264c:	85 f6                	test   esi,esi
c001264e:	75 0a                	jne    c001265a <SysSpawn(regs*)+0x1a>
c0012650:	83 c4 04             	add    esp,0x4
c0012653:	31 c0                	xor    eax,eax
c0012655:	5b                   	pop    ebx
c0012656:	31 d2                	xor    edx,edx
c0012658:	5e                   	pop    esi
c0012659:	c3                   	ret    
c001265a:	83 ec 0c             	sub    esp,0xc
c001265d:	68 24 07 00 00       	push   0x724
c0012662:	e8 6c 54 ff ff       	call   c0007ad3 <malloc>
c0012667:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001266a:	83 c4 10             	add    esp,0x10
c001266d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012670:	89 c6                	mov    esi,eax
c0012672:	31 c0                	xor    eax,eax
c0012674:	85 c9                	test   ecx,ecx
c0012676:	75 08                	jne    c0012680 <SysSpawn(regs*)+0x40>
c0012678:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001267d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012680:	52                   	push   edx
c0012681:	50                   	push   eax
c0012682:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012685:	50                   	push   eax
c0012686:	56                   	push   esi
c0012687:	e8 9c 33 00 00       	call   c0015a28 <Process::Process(char const*, Process*, char**)>
c001268c:	83 c4 10             	add    esp,0x10
c001268f:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0012696:	75 b8                	jne    c0012650 <SysSpawn(regs*)+0x10>
c0012698:	83 ec 0c             	sub    esp,0xc
c001269b:	56                   	push   esi
c001269c:	e8 bf 38 00 00       	call   c0015f60 <Process::createUserThread()>
c00126a1:	8b 06                	mov    eax,DWORD PTR [esi]
c00126a3:	83 c4 10             	add    esp,0x10
c00126a6:	83 c4 04             	add    esp,0x4
c00126a9:	5b                   	pop    ebx
c00126aa:	89 c2                	mov    edx,eax
c00126ac:	c1 fa 1f             	sar    edx,0x1f
c00126af:	5e                   	pop    esi
c00126b0:	c3                   	ret    

c00126b1 <SysGetEnv(regs*)>:
c00126b1:	57                   	push   edi
c00126b2:	56                   	push   esi
c00126b3:	53                   	push   ebx
c00126b4:	83 ec 1c             	sub    esp,0x1c
c00126b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00126bc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00126c0:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00126c3:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00126c6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00126c9:	51                   	push   ecx
c00126ca:	e8 c4 ed ff ff       	call   c0011493 <KeGetProcessTotalEnvCount(Process*)>
c00126cf:	83 c4 10             	add    esp,0x10
c00126d2:	39 c7                	cmp    edi,eax
c00126d4:	7c 12                	jl     c00126e8 <SysGetEnv(regs*)+0x37>
c00126d6:	31 c0                	xor    eax,eax
c00126d8:	31 d2                	xor    edx,edx
c00126da:	85 f6                	test   esi,esi
c00126dc:	74 03                	je     c00126e1 <SysGetEnv(regs*)+0x30>
c00126de:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00126e1:	83 c4 10             	add    esp,0x10
c00126e4:	5b                   	pop    ebx
c00126e5:	5e                   	pop    esi
c00126e6:	5f                   	pop    edi
c00126e7:	c3                   	ret    
c00126e8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00126ec:	83 ec 04             	sub    esp,0x4
c00126ef:	57                   	push   edi
c00126f0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00126f6:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c00126f9:	57                   	push   edi
c00126fa:	50                   	push   eax
c00126fb:	e8 b3 ed ff ff       	call   c00114b3 <KeGetProcessEnvPair(Process*, int)>
c0012700:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012703:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012707:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001270b:	83 c4 0c             	add    esp,0xc
c001270e:	85 d2                	test   edx,edx
c0012710:	75 23                	jne    c0012735 <SysGetEnv(regs*)+0x84>
c0012712:	83 ec 0c             	sub    esp,0xc
c0012715:	50                   	push   eax
c0012716:	e8 65 de fe ff       	call   c0000580 <strlen>
c001271b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001271e:	89 c3                	mov    ebx,eax
c0012720:	e8 5b de fe ff       	call   c0000580 <strlen>
c0012725:	83 c4 10             	add    esp,0x10
c0012728:	31 d2                	xor    edx,edx
c001272a:	83 c4 10             	add    esp,0x10
c001272d:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012731:	5b                   	pop    ebx
c0012732:	5e                   	pop    esi
c0012733:	5f                   	pop    edi
c0012734:	c3                   	ret    
c0012735:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012738:	83 ec 08             	sub    esp,0x8
c001273b:	50                   	push   eax
c001273c:	56                   	push   esi
c001273d:	e8 0e df fe ff       	call   c0000650 <strcpy>
c0012742:	58                   	pop    eax
c0012743:	5a                   	pop    edx
c0012744:	68 80 25 02 c0       	push   0xc0022580
c0012749:	56                   	push   esi
c001274a:	e8 21 e1 fe ff       	call   c0000870 <strcat>
c001274f:	59                   	pop    ecx
c0012750:	5b                   	pop    ebx
c0012751:	57                   	push   edi
c0012752:	56                   	push   esi
c0012753:	e8 18 e1 fe ff       	call   c0000870 <strcat>
c0012758:	83 c4 10             	add    esp,0x10
c001275b:	31 c0                	xor    eax,eax
c001275d:	83 c4 10             	add    esp,0x10
c0012760:	31 d2                	xor    edx,edx
c0012762:	5b                   	pop    ebx
c0012763:	5e                   	pop    esi
c0012764:	5f                   	pop    edi
c0012765:	c3                   	ret    

c0012766 <SysSetFatAttrib(regs*)>:
c0012766:	57                   	push   edi
c0012767:	56                   	push   esi
c0012768:	53                   	push   ebx
c0012769:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001276d:	83 ec 0c             	sub    esp,0xc
c0012770:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0012773:	68 14 01 00 00       	push   0x114
c0012778:	e8 56 53 ff ff       	call   c0007ad3 <malloc>
c001277d:	83 c4 0c             	add    esp,0xc
c0012780:	89 c3                	mov    ebx,eax
c0012782:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012787:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001278a:	50                   	push   eax
c001278b:	57                   	push   edi
c001278c:	53                   	push   ebx
c001278d:	e8 04 94 ff ff       	call   c000bb96 <File::File(char const*, Process*)>
c0012792:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0012795:	83 c4 0c             	add    esp,0xc
c0012798:	0f b6 d4             	movzx  edx,ah
c001279b:	0f b6 c0             	movzx  eax,al
c001279e:	52                   	push   edx
c001279f:	50                   	push   eax
c00127a0:	53                   	push   ebx
c00127a1:	e8 76 96 ff ff       	call   c000be1c <File::chfatattr(unsigned char, unsigned char)>
c00127a6:	83 c4 10             	add    esp,0x10
c00127a9:	85 db                	test   ebx,ebx
c00127ab:	89 c6                	mov    esi,eax
c00127ad:	74 0c                	je     c00127bb <SysSetFatAttrib(regs*)+0x55>
c00127af:	8b 03                	mov    eax,DWORD PTR [ebx]
c00127b1:	83 ec 0c             	sub    esp,0xc
c00127b4:	53                   	push   ebx
c00127b5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00127b8:	83 c4 10             	add    esp,0x10
c00127bb:	5b                   	pop    ebx
c00127bc:	31 c0                	xor    eax,eax
c00127be:	85 f6                	test   esi,esi
c00127c0:	0f 95 c0             	setne  al
c00127c3:	31 d2                	xor    edx,edx
c00127c5:	5e                   	pop    esi
c00127c6:	f7 d8                	neg    eax
c00127c8:	83 d2 00             	adc    edx,0x0
c00127cb:	f7 da                	neg    edx
c00127cd:	5f                   	pop    edi
c00127ce:	c3                   	ret    

c00127cf <SysPipe(regs*)>:
c00127cf:	57                   	push   edi
c00127d0:	56                   	push   esi
c00127d1:	53                   	push   ebx
c00127d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127d6:	83 ec 0c             	sub    esp,0xc
c00127d9:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00127dc:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00127df:	6a 20                	push   0x20
c00127e1:	e8 ed 52 ff ff       	call   c0007ad3 <malloc>
c00127e6:	89 c3                	mov    ebx,eax
c00127e8:	58                   	pop    eax
c00127e9:	5a                   	pop    edx
c00127ea:	68 00 50 00 00       	push   0x5000
c00127ef:	53                   	push   ebx
c00127f0:	e8 49 5c ff ff       	call   c000843e <Pipe::Pipe(int)>
c00127f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00127f8:	e8 a1 69 ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c00127fd:	89 07                	mov    DWORD PTR [edi],eax
c00127ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012802:	e8 97 69 ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c0012807:	83 c4 10             	add    esp,0x10
c001280a:	31 d2                	xor    edx,edx
c001280c:	89 06                	mov    DWORD PTR [esi],eax
c001280e:	31 c0                	xor    eax,eax
c0012810:	5b                   	pop    ebx
c0012811:	5e                   	pop    esi
c0012812:	5f                   	pop    edi
c0012813:	c3                   	ret    

c0012814 <SysGetUnixTime(regs*)>:
c0012814:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0012819:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001281f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012823:	e9 3a 9d ff ff       	jmp    c000c562 <Clock::timeInSecondsLocal()>

c0012828 <string_ends_with(char const*, char const*)>:
c0012828:	57                   	push   edi
c0012829:	56                   	push   esi
c001282a:	53                   	push   ebx
c001282b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001282f:	83 ec 0c             	sub    esp,0xc
c0012832:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012836:	53                   	push   ebx
c0012837:	e8 44 dd fe ff       	call   c0000580 <strlen>
c001283c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001283f:	89 c6                	mov    esi,eax
c0012841:	e8 3a dd fe ff       	call   c0000580 <strlen>
c0012846:	83 c4 10             	add    esp,0x10
c0012849:	31 d2                	xor    edx,edx
c001284b:	39 c6                	cmp    esi,eax
c001284d:	7d 06                	jge    c0012855 <string_ends_with(char const*, char const*)+0x2d>
c001284f:	5b                   	pop    ebx
c0012850:	89 d0                	mov    eax,edx
c0012852:	5e                   	pop    esi
c0012853:	5f                   	pop    edi
c0012854:	c3                   	ret    
c0012855:	83 ec 08             	sub    esp,0x8
c0012858:	29 c6                	sub    esi,eax
c001285a:	57                   	push   edi
c001285b:	01 f3                	add    ebx,esi
c001285d:	53                   	push   ebx
c001285e:	e8 1d df fe ff       	call   c0000780 <strcmp>
c0012863:	83 c4 10             	add    esp,0x10
c0012866:	31 d2                	xor    edx,edx
c0012868:	5b                   	pop    ebx
c0012869:	5e                   	pop    esi
c001286a:	85 c0                	test   eax,eax
c001286c:	5f                   	pop    edi
c001286d:	0f 94 c2             	sete   dl
c0012870:	89 d0                	mov    eax,edx
c0012872:	c3                   	ret    

c0012873 <SysOpen(regs*)>:
c0012873:	56                   	push   esi
c0012874:	53                   	push   ebx
c0012875:	81 ec 04 01 00 00    	sub    esp,0x104
c001287b:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0012882:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012885:	85 c0                	test   eax,eax
c0012887:	0f 84 c4 01 00 00    	je     c0012a51 <SysOpen(regs*)+0x1de>
c001288d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012890:	85 c0                	test   eax,eax
c0012892:	0f 84 b9 01 00 00    	je     c0012a51 <SysOpen(regs*)+0x1de>
c0012898:	6a 00                	push   0x0
c001289a:	68 82 25 02 c0       	push   0xc0022582
c001289f:	50                   	push   eax
c00128a0:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00128a4:	56                   	push   esi
c00128a5:	e8 f0 8f ff ff       	call   c000b89a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00128aa:	89 34 24             	mov    DWORD PTR [esp],esi
c00128ad:	e8 ce dc fe ff       	call   c0000580 <strlen>
c00128b2:	83 c4 10             	add    esp,0x10
c00128b5:	83 e8 01             	sub    eax,0x1
c00128b8:	74 29                	je     c00128e3 <SysOpen(regs*)+0x70>
c00128ba:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c00128be:	83 fa 2e             	cmp    edx,0x2e
c00128c1:	74 1c                	je     c00128df <SysOpen(regs*)+0x6c>
c00128c3:	83 fa 3a             	cmp    edx,0x3a
c00128c6:	74 17                	je     c00128df <SysOpen(regs*)+0x6c>
c00128c8:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00128cc:	83 e8 01             	sub    eax,0x1
c00128cf:	74 12                	je     c00128e3 <SysOpen(regs*)+0x70>
c00128d1:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c00128d5:	83 fa 3a             	cmp    edx,0x3a
c00128d8:	74 05                	je     c00128df <SysOpen(regs*)+0x6c>
c00128da:	83 fa 2e             	cmp    edx,0x2e
c00128dd:	75 e9                	jne    c00128c8 <SysOpen(regs*)+0x55>
c00128df:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00128e3:	83 ec 08             	sub    esp,0x8
c00128e6:	68 86 25 02 c0       	push   0xc0022586
c00128eb:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00128ee:	50                   	push   eax
c00128ef:	e8 34 ff ff ff       	call   c0012828 <string_ends_with(char const*, char const*)>
c00128f4:	83 c4 10             	add    esp,0x10
c00128f7:	85 c0                	test   eax,eax
c00128f9:	74 1d                	je     c0012918 <SysOpen(regs*)+0xa5>
c00128fb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00128fe:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0012904:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001290b:	81 c4 04 01 00 00    	add    esp,0x104
c0012911:	31 c0                	xor    eax,eax
c0012913:	5b                   	pop    ebx
c0012914:	31 d2                	xor    edx,edx
c0012916:	5e                   	pop    esi
c0012917:	c3                   	ret    
c0012918:	83 ec 08             	sub    esp,0x8
c001291b:	68 8b 25 02 c0       	push   0xc002258b
c0012920:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012923:	50                   	push   eax
c0012924:	e8 ff fe ff ff       	call   c0012828 <string_ends_with(char const*, char const*)>
c0012929:	83 c4 10             	add    esp,0x10
c001292c:	85 c0                	test   eax,eax
c001292e:	75 cb                	jne    c00128fb <SysOpen(regs*)+0x88>
c0012930:	83 ec 08             	sub    esp,0x8
c0012933:	68 87 25 02 c0       	push   0xc0022587
c0012938:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001293b:	50                   	push   eax
c001293c:	e8 3f de fe ff       	call   c0000780 <strcmp>
c0012941:	83 c4 10             	add    esp,0x10
c0012944:	85 c0                	test   eax,eax
c0012946:	74 b3                	je     c00128fb <SysOpen(regs*)+0x88>
c0012948:	83 ec 08             	sub    esp,0x8
c001294b:	68 86 25 02 c0       	push   0xc0022586
c0012950:	56                   	push   esi
c0012951:	e8 d2 fe ff ff       	call   c0012828 <string_ends_with(char const*, char const*)>
c0012956:	83 c4 10             	add    esp,0x10
c0012959:	85 c0                	test   eax,eax
c001295b:	75 9e                	jne    c00128fb <SysOpen(regs*)+0x88>
c001295d:	83 ec 08             	sub    esp,0x8
c0012960:	68 90 25 02 c0       	push   0xc0022590
c0012965:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012968:	50                   	push   eax
c0012969:	e8 ba fe ff ff       	call   c0012828 <string_ends_with(char const*, char const*)>
c001296e:	83 c4 10             	add    esp,0x10
c0012971:	85 c0                	test   eax,eax
c0012973:	0f 85 eb 00 00 00    	jne    c0012a64 <SysOpen(regs*)+0x1f1>
c0012979:	83 ec 08             	sub    esp,0x8
c001297c:	68 95 25 02 c0       	push   0xc0022595
c0012981:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012984:	50                   	push   eax
c0012985:	e8 9e fe ff ff       	call   c0012828 <string_ends_with(char const*, char const*)>
c001298a:	83 c4 10             	add    esp,0x10
c001298d:	85 c0                	test   eax,eax
c001298f:	0f 85 cf 00 00 00    	jne    c0012a64 <SysOpen(regs*)+0x1f1>
c0012995:	83 ec 08             	sub    esp,0x8
c0012998:	68 91 25 02 c0       	push   0xc0022591
c001299d:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00129a0:	51                   	push   ecx
c00129a1:	e8 da dd fe ff       	call   c0000780 <strcmp>
c00129a6:	83 c4 10             	add    esp,0x10
c00129a9:	85 c0                	test   eax,eax
c00129ab:	0f 84 b3 00 00 00    	je     c0012a64 <SysOpen(regs*)+0x1f1>
c00129b1:	83 ec 08             	sub    esp,0x8
c00129b4:	68 90 25 02 c0       	push   0xc0022590
c00129b9:	56                   	push   esi
c00129ba:	e8 69 fe ff ff       	call   c0012828 <string_ends_with(char const*, char const*)>
c00129bf:	83 c4 10             	add    esp,0x10
c00129c2:	85 c0                	test   eax,eax
c00129c4:	0f 85 9a 00 00 00    	jne    c0012a64 <SysOpen(regs*)+0x1f1>
c00129ca:	83 ec 0c             	sub    esp,0xc
c00129cd:	68 14 01 00 00       	push   0x114
c00129d2:	e8 fc 50 ff ff       	call   c0007ad3 <malloc>
c00129d7:	83 c4 0c             	add    esp,0xc
c00129da:	89 c6                	mov    esi,eax
c00129dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00129e1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00129e4:	50                   	push   eax
c00129e5:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00129e8:	52                   	push   edx
c00129e9:	56                   	push   esi
c00129ea:	e8 a7 91 ff ff       	call   c000bb96 <File::File(char const*, Process*)>
c00129ef:	83 c4 10             	add    esp,0x10
c00129f2:	85 f6                	test   esi,esi
c00129f4:	74 5b                	je     c0012a51 <SysOpen(regs*)+0x1de>
c00129f6:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00129f9:	0f b6 c2             	movzx  eax,dl
c00129fc:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00129ff:	89 d0                	mov    eax,edx
c0012a01:	83 e0 01             	and    eax,0x1
c0012a04:	f6 c2 02             	test   dl,0x2
c0012a07:	74 03                	je     c0012a0c <SysOpen(regs*)+0x199>
c0012a09:	83 c8 02             	or     eax,0x2
c0012a0c:	f6 c2 04             	test   dl,0x4
c0012a0f:	74 03                	je     c0012a14 <SysOpen(regs*)+0x1a1>
c0012a11:	83 c8 04             	or     eax,0x4
c0012a14:	f6 c2 08             	test   dl,0x8
c0012a17:	74 03                	je     c0012a1c <SysOpen(regs*)+0x1a9>
c0012a19:	83 c8 0a             	or     eax,0xa
c0012a1c:	80 e2 10             	and    dl,0x10
c0012a1f:	74 03                	je     c0012a24 <SysOpen(regs*)+0x1b1>
c0012a21:	83 c8 12             	or     eax,0x12
c0012a24:	83 ec 08             	sub    esp,0x8
c0012a27:	50                   	push   eax
c0012a28:	56                   	push   esi
c0012a29:	e8 86 91 ff ff       	call   c000bbb4 <File::open(FileOpenMode)>
c0012a2e:	83 c4 10             	add    esp,0x10
c0012a31:	85 c0                	test   eax,eax
c0012a33:	75 1c                	jne    c0012a51 <SysOpen(regs*)+0x1de>
c0012a35:	83 ec 0c             	sub    esp,0xc
c0012a38:	56                   	push   esi
c0012a39:	e8 60 67 ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c0012a3e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012a41:	83 c4 10             	add    esp,0x10
c0012a44:	89 02                	mov    DWORD PTR [edx],eax
c0012a46:	c1 f8 1f             	sar    eax,0x1f
c0012a49:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012a4c:	e9 ba fe ff ff       	jmp    c001290b <SysOpen(regs*)+0x98>
c0012a51:	81 c4 04 01 00 00    	add    esp,0x104
c0012a57:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012a5c:	5b                   	pop    ebx
c0012a5d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012a62:	5e                   	pop    esi
c0012a63:	c3                   	ret    
c0012a64:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012a67:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012a6d:	e9 92 fe ff ff       	jmp    c0012904 <SysOpen(regs*)+0x91>

c0012a72 <KeSystemCall(regs*, void*)>:
c0012a72:	53                   	push   ebx
c0012a73:	83 ec 08             	sub    esp,0x8
c0012a76:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012a7a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012a7d:	83 f8 3e             	cmp    eax,0x3e
c0012a80:	77 16                	ja     c0012a98 <KeSystemCall(regs*, void*)+0x26>
c0012a82:	8b 14 85 a0 3d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc260]
c0012a89:	85 d2                	test   edx,edx
c0012a8b:	74 0b                	je     c0012a98 <KeSystemCall(regs*, void*)+0x26>
c0012a8d:	83 ec 0c             	sub    esp,0xc
c0012a90:	53                   	push   ebx
c0012a91:	ff d2                	call   edx
c0012a93:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0012a96:	eb 0d                	jmp    c0012aa5 <KeSystemCall(regs*, void*)+0x33>
c0012a98:	52                   	push   edx
c0012a99:	52                   	push   edx
c0012a9a:	50                   	push   eax
c0012a9b:	68 9a 25 02 c0       	push   0xc002259a
c0012aa0:	e8 65 7e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0012aa5:	83 c4 10             	add    esp,0x10
c0012aa8:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012aad:	83 c4 08             	add    esp,0x8
c0012ab0:	31 d2                	xor    edx,edx
c0012ab2:	5b                   	pop    ebx
c0012ab3:	c3                   	ret    

c0012ab4 <KeSwitchEndian16(unsigned short)>:
c0012ab4:	83 ec 04             	sub    esp,0x4
c0012ab7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012abb:	66 89 04 24          	mov    WORD PTR [esp],ax
c0012abf:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012ac3:	c1 f8 08             	sar    eax,0x8
c0012ac6:	89 c2                	mov    edx,eax
c0012ac8:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012acc:	c1 e0 08             	shl    eax,0x8
c0012acf:	09 d0                	or     eax,edx
c0012ad1:	83 c4 04             	add    esp,0x4
c0012ad4:	c3                   	ret    
c0012ad5:	8d 76 00             	lea    esi,[esi+0x0]

c0012ad8 <KeSwitchEndian32(unsigned int)>:
c0012ad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012adc:	c1 e8 18             	shr    eax,0x18
c0012adf:	89 c2                	mov    edx,eax
c0012ae1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ae5:	c1 e0 08             	shl    eax,0x8
c0012ae8:	25 00 00 ff 00       	and    eax,0xff0000
c0012aed:	09 c2                	or     edx,eax
c0012aef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012af3:	c1 e8 08             	shr    eax,0x8
c0012af6:	25 00 ff 00 00       	and    eax,0xff00
c0012afb:	09 c2                	or     edx,eax
c0012afd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b01:	c1 e0 18             	shl    eax,0x18
c0012b04:	09 d0                	or     eax,edx
c0012b06:	c3                   	ret    
c0012b07:	90                   	nop

c0012b08 <EthernetCRC32(unsigned char*, int)>:
c0012b08:	83 ec 10             	sub    esp,0x10
c0012b0b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012b10:	75 0a                	jne    c0012b1c <EthernetCRC32(unsigned char*, int)+0x14>
c0012b12:	b8 00 00 00 00       	mov    eax,0x0
c0012b17:	e9 8c 00 00 00       	jmp    c0012ba8 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012b1c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012b21:	7f 09                	jg     c0012b2c <EthernetCRC32(unsigned char*, int)+0x24>
c0012b23:	b8 00 00 00 00       	mov    eax,0x0
c0012b28:	eb 7e                	jmp    c0012ba8 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012b2a:	66 90                	xchg   ax,ax
c0012b2c:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0012b34:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012b3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012b40:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0012b44:	7d 5a                	jge    c0012ba0 <EthernetCRC32(unsigned char*, int)+0x98>
c0012b46:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012b4a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012b4e:	01 d0                	add    eax,edx
c0012b50:	8a 00                	mov    al,BYTE PTR [eax]
c0012b52:	0f b6 c0             	movzx  eax,al
c0012b55:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0012b59:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012b61:	8d 76 00             	lea    esi,[esi+0x0]
c0012b64:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0012b69:	7f 2d                	jg     c0012b98 <EthernetCRC32(unsigned char*, int)+0x90>
c0012b6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b6f:	83 e0 01             	and    eax,0x1
c0012b72:	74 10                	je     c0012b84 <EthernetCRC32(unsigned char*, int)+0x7c>
c0012b74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b78:	d1 e8                	shr    eax,1
c0012b7a:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0012b7f:	eb 0b                	jmp    c0012b8c <EthernetCRC32(unsigned char*, int)+0x84>
c0012b81:	8d 76 00             	lea    esi,[esi+0x0]
c0012b84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b88:	d1 e8                	shr    eax,1
c0012b8a:	66 90                	xchg   ax,ax
c0012b8c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012b90:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0012b95:	eb cd                	jmp    c0012b64 <EthernetCRC32(unsigned char*, int)+0x5c>
c0012b97:	90                   	nop
c0012b98:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0012b9d:	eb 9d                	jmp    c0012b3c <EthernetCRC32(unsigned char*, int)+0x34>
c0012b9f:	90                   	nop
c0012ba0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ba4:	f7 d0                	not    eax
c0012ba6:	66 90                	xchg   ax,ax
c0012ba8:	83 c4 10             	add    esp,0x10
c0012bab:	c3                   	ret    

c0012bac <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0012bac:	83 ec 2c             	sub    esp,0x2c
c0012baf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012bb3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012bb8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012bbc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012bc0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012bc4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012bc7:	0f b7 c0             	movzx  eax,ax
c0012bca:	3d 06 08 00 00       	cmp    eax,0x806
c0012bcf:	75 13                	jne    c0012be4 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0012bd1:	83 ec 0c             	sub    esp,0xc
c0012bd4:	68 ae 25 02 c0       	push   0xc00225ae
c0012bd9:	e8 2c 7d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0012bde:	83 c4 10             	add    esp,0x10
c0012be1:	eb 25                	jmp    c0012c08 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012be3:	90                   	nop
c0012be4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012be8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012beb:	0f b7 c0             	movzx  eax,ax
c0012bee:	3d 00 08 00 00       	cmp    eax,0x800
c0012bf3:	75 13                	jne    c0012c08 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012bf5:	83 ec 0c             	sub    esp,0xc
c0012bf8:	68 c4 25 02 c0       	push   0xc00225c4
c0012bfd:	e8 08 7d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0012c02:	83 c4 10             	add    esp,0x10
c0012c05:	8d 76 00             	lea    esi,[esi+0x0]
c0012c08:	90                   	nop
c0012c09:	83 c4 2c             	add    esp,0x2c
c0012c0c:	c3                   	ret    

c0012c0d <CmOpen(char const*)>:
c0012c0d:	57                   	push   edi
c0012c0e:	56                   	push   esi
c0012c0f:	53                   	push   ebx
c0012c10:	83 ec 1c             	sub    esp,0x1c
c0012c13:	6a 30                	push   0x30
c0012c15:	e8 b9 4e ff ff       	call   c0007ad3 <malloc>
c0012c1a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012c21:	89 c3                	mov    ebx,eax
c0012c23:	e8 ab 4e ff ff       	call   c0007ad3 <malloc>
c0012c28:	83 c4 0c             	add    esp,0xc
c0012c2b:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0012c31:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012c35:	89 c6                	mov    esi,eax
c0012c37:	50                   	push   eax
c0012c38:	e8 59 8f ff ff       	call   c000bb96 <File::File(char const*, Process*)>
c0012c3d:	83 c4 0c             	add    esp,0xc
c0012c40:	89 33                	mov    DWORD PTR [ebx],esi
c0012c42:	8d 44 24 07          	lea    eax,[esp+0x7]
c0012c46:	50                   	push   eax
c0012c47:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012c4b:	50                   	push   eax
c0012c4c:	56                   	push   esi
c0012c4d:	e8 64 92 ff ff       	call   c000beb6 <File::stat(unsigned long long*, bool*)>
c0012c52:	5a                   	pop    edx
c0012c53:	59                   	pop    ecx
c0012c54:	6a 01                	push   0x1
c0012c56:	ff 33                	push   DWORD PTR [ebx]
c0012c58:	e8 57 8f ff ff       	call   c000bbb4 <File::open(FileOpenMode)>
c0012c5d:	5e                   	pop    esi
c0012c5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012c62:	e8 6c 4e ff ff       	call   c0007ad3 <malloc>
c0012c67:	5a                   	pop    edx
c0012c68:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012c6c:	89 c7                	mov    edi,eax
c0012c6e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c70:	8b 10                	mov    edx,DWORD PTR [eax]
c0012c72:	56                   	push   esi
c0012c73:	57                   	push   edi
c0012c74:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012c78:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012c7c:	50                   	push   eax
c0012c7d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012c80:	83 c4 14             	add    esp,0x14
c0012c83:	ff 33                	push   DWORD PTR [ebx]
c0012c85:	e8 88 8f ff ff       	call   c000bc12 <File::close()>
c0012c8a:	59                   	pop    ecx
c0012c8b:	58                   	pop    eax
c0012c8c:	6a 13                	push   0x13
c0012c8e:	ff 33                	push   DWORD PTR [ebx]
c0012c90:	e8 1f 8f ff ff       	call   c000bbb4 <File::open(FileOpenMode)>
c0012c95:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c97:	8b 10                	mov    edx,DWORD PTR [eax]
c0012c99:	89 34 24             	mov    DWORD PTR [esp],esi
c0012c9c:	57                   	push   edi
c0012c9d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012ca1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012ca5:	50                   	push   eax
c0012ca6:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012ca9:	83 c4 14             	add    esp,0x14
c0012cac:	57                   	push   edi
c0012cad:	e8 31 4e ff ff       	call   c0007ae3 <free>
c0012cb2:	83 c4 10             	add    esp,0x10
c0012cb5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0012cb8:	75 10                	jne    c0012cca <CmOpen(char const*)+0xbd>
c0012cba:	83 ec 0c             	sub    esp,0xc
c0012cbd:	68 d9 25 02 c0       	push   0xc00225d9
c0012cc2:	e8 14 e9 ff ff       	call   c00115db <KePanic(char const*)>
c0012cc7:	83 c4 10             	add    esp,0x10
c0012cca:	50                   	push   eax
c0012ccb:	6a 00                	push   0x0
c0012ccd:	6a 00                	push   0x0
c0012ccf:	ff 33                	push   DWORD PTR [ebx]
c0012cd1:	8d 7b 05             	lea    edi,[ebx+0x5]
c0012cd4:	e8 99 8f ff ff       	call   c000bc72 <File::seek(unsigned long long)>
c0012cd9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012cdb:	8b 10                	mov    edx,DWORD PTR [eax]
c0012cdd:	89 34 24             	mov    DWORD PTR [esp],esi
c0012ce0:	57                   	push   edi
c0012ce1:	6a 00                	push   0x0
c0012ce3:	6a 2b                	push   0x2b
c0012ce5:	50                   	push   eax
c0012ce6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012ce9:	83 c4 1c             	add    esp,0x1c
c0012cec:	6a 00                	push   0x0
c0012cee:	6a 00                	push   0x0
c0012cf0:	ff 33                	push   DWORD PTR [ebx]
c0012cf2:	e8 7b 8f ff ff       	call   c000bc72 <File::seek(unsigned long long)>
c0012cf7:	83 c4 0c             	add    esp,0xc
c0012cfa:	6a 08                	push   0x8
c0012cfc:	68 ea 25 02 c0       	push   0xc00225ea
c0012d01:	57                   	push   edi
c0012d02:	e8 79 d6 fe ff       	call   c0000380 <memcmp>
c0012d07:	83 c4 10             	add    esp,0x10
c0012d0a:	85 c0                	test   eax,eax
c0012d0c:	74 10                	je     c0012d1e <CmOpen(char const*)+0x111>
c0012d0e:	83 ec 0c             	sub    esp,0xc
c0012d11:	68 f3 25 02 c0       	push   0xc00225f3
c0012d16:	e8 c0 e8 ff ff       	call   c00115db <KePanic(char const*)>
c0012d1b:	83 c4 10             	add    esp,0x10
c0012d1e:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0012d22:	83 c4 10             	add    esp,0x10
c0012d25:	89 d8                	mov    eax,ebx
c0012d27:	5b                   	pop    ebx
c0012d28:	5e                   	pop    esi
c0012d29:	5f                   	pop    edi
c0012d2a:	c3                   	ret    

c0012d2b <CmClose(Reghive_Tag*)>:
c0012d2b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d2f:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012d33:	74 0b                	je     c0012d40 <CmClose(Reghive_Tag*)+0x15>
c0012d35:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d37:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012d3b:	e9 d2 8e ff ff       	jmp    c000bc12 <File::close()>
c0012d40:	c3                   	ret    

c0012d41 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012d41:	53                   	push   ebx
c0012d42:	83 ec 18             	sub    esp,0x18
c0012d45:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012d49:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012d4d:	74 29                	je     c0012d78 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012d4f:	50                   	push   eax
c0012d50:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012d55:	99                   	cdq    
c0012d56:	52                   	push   edx
c0012d57:	50                   	push   eax
c0012d58:	ff 33                	push   DWORD PTR [ebx]
c0012d5a:	e8 13 8f ff ff       	call   c000bc72 <File::seek(unsigned long long)>
c0012d5f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d61:	5a                   	pop    edx
c0012d62:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012d66:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d68:	51                   	push   ecx
c0012d69:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012d6d:	6a 00                	push   0x0
c0012d6f:	6a 2b                	push   0x2b
c0012d71:	50                   	push   eax
c0012d72:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012d75:	83 c4 20             	add    esp,0x20
c0012d78:	83 c4 18             	add    esp,0x18
c0012d7b:	5b                   	pop    ebx
c0012d7c:	c3                   	ret    

c0012d7d <CmGetString(Reghive_Tag*, int, char*)>:
c0012d7d:	55                   	push   ebp
c0012d7e:	57                   	push   edi
c0012d7f:	56                   	push   esi
c0012d80:	53                   	push   ebx
c0012d81:	31 db                	xor    ebx,ebx
c0012d83:	83 ec 70             	sub    esp,0x70
c0012d86:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0012d8a:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0012d91:	50                   	push   eax
c0012d92:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012d99:	55                   	push   ebp
c0012d9a:	e8 a2 ff ff ff       	call   c0012d41 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012d9f:	83 c4 10             	add    esp,0x10
c0012da2:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0012da7:	c1 e0 08             	shl    eax,0x8
c0012daa:	89 c2                	mov    edx,eax
c0012dac:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012db1:	09 d0                	or     eax,edx
c0012db3:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0012db8:	c1 e0 08             	shl    eax,0x8
c0012dbb:	09 d0                	or     eax,edx
c0012dbd:	74 25                	je     c0012de4 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0012dbf:	52                   	push   edx
c0012dc0:	8d 54 24 39          	lea    edx,[esp+0x39]
c0012dc4:	52                   	push   edx
c0012dc5:	6b fb 0d             	imul   edi,ebx,0xd
c0012dc8:	50                   	push   eax
c0012dc9:	55                   	push   ebp
c0012dca:	e8 72 ff ff ff       	call   c0012d41 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012dcf:	8d 74 24 49          	lea    esi,[esp+0x49]
c0012dd3:	b9 27 00 00 00       	mov    ecx,0x27
c0012dd8:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0012ddf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012de1:	83 c4 10             	add    esp,0x10
c0012de4:	83 c3 03             	add    ebx,0x3
c0012de7:	83 fb 15             	cmp    ebx,0x15
c0012dea:	75 b6                	jne    c0012da2 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0012dec:	83 c4 6c             	add    esp,0x6c
c0012def:	5b                   	pop    ebx
c0012df0:	5e                   	pop    esi
c0012df1:	5f                   	pop    edi
c0012df2:	5d                   	pop    ebp
c0012df3:	c3                   	ret    

c0012df4 <CmEnterDirectory(Reghive_Tag*, int)>:
c0012df4:	83 ec 40             	sub    esp,0x40
c0012df7:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012dfb:	50                   	push   eax
c0012dfc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e00:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e04:	e8 38 ff ff ff       	call   c0012d41 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e09:	83 c4 10             	add    esp,0x10
c0012e0c:	83 c8 ff             	or     eax,0xffffffff
c0012e0f:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012e14:	75 19                	jne    c0012e2f <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0012e16:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012e1b:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0012e20:	c1 e0 08             	shl    eax,0x8
c0012e23:	09 c2                	or     edx,eax
c0012e25:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0012e2a:	c1 e0 10             	shl    eax,0x10
c0012e2d:	09 d0                	or     eax,edx
c0012e2f:	83 c4 3c             	add    esp,0x3c
c0012e32:	c3                   	ret    

c0012e33 <CmGetNext(Reghive_Tag*, int)>:
c0012e33:	83 ec 40             	sub    esp,0x40
c0012e36:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012e3a:	50                   	push   eax
c0012e3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e3f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e43:	e8 f9 fe ff ff       	call   c0012d41 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e48:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012e4d:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0012e52:	c1 e0 08             	shl    eax,0x8
c0012e55:	09 c2                	or     edx,eax
c0012e57:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012e5c:	83 c4 4c             	add    esp,0x4c
c0012e5f:	c1 e0 10             	shl    eax,0x10
c0012e62:	09 d0                	or     eax,edx
c0012e64:	c3                   	ret    

c0012e65 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0012e65:	53                   	push   ebx
c0012e66:	83 ec 18             	sub    esp,0x18
c0012e69:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012e6d:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012e71:	74 29                	je     c0012e9c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012e73:	50                   	push   eax
c0012e74:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012e79:	99                   	cdq    
c0012e7a:	52                   	push   edx
c0012e7b:	50                   	push   eax
c0012e7c:	ff 33                	push   DWORD PTR [ebx]
c0012e7e:	e8 ef 8d ff ff       	call   c000bc72 <File::seek(unsigned long long)>
c0012e83:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012e85:	5a                   	pop    edx
c0012e86:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012e8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0012e8c:	51                   	push   ecx
c0012e8d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012e91:	6a 00                	push   0x0
c0012e93:	6a 2b                	push   0x2b
c0012e95:	50                   	push   eax
c0012e96:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012e99:	83 c4 20             	add    esp,0x20
c0012e9c:	83 c4 18             	add    esp,0x18
c0012e9f:	5b                   	pop    ebx
c0012ea0:	c3                   	ret    

c0012ea1 <CmFreeExtent(Reghive_Tag*, int)>:
c0012ea1:	53                   	push   ebx
c0012ea2:	83 ec 3c             	sub    esp,0x3c
c0012ea5:	6a 2b                	push   0x2b
c0012ea7:	6a 00                	push   0x0
c0012ea9:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012ead:	53                   	push   ebx
c0012eae:	e8 3d d6 fe ff       	call   c00004f0 <memset>
c0012eb3:	83 c4 0c             	add    esp,0xc
c0012eb6:	53                   	push   ebx
c0012eb7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ebb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ebf:	e8 a1 ff ff ff       	call   c0012e65 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012ec4:	83 c4 48             	add    esp,0x48
c0012ec7:	5b                   	pop    ebx
c0012ec8:	c3                   	ret    

c0012ec9 <CmUpdateHeader(Reghive_Tag*)>:
c0012ec9:	83 ec 0c             	sub    esp,0xc
c0012ecc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ed0:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012ed4:	74 10                	je     c0012ee6 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0012ed6:	52                   	push   edx
c0012ed7:	8d 50 05             	lea    edx,[eax+0x5]
c0012eda:	52                   	push   edx
c0012edb:	6a 00                	push   0x0
c0012edd:	50                   	push   eax
c0012ede:	e8 82 ff ff ff       	call   c0012e65 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012ee3:	83 c4 10             	add    esp,0x10
c0012ee6:	83 c4 0c             	add    esp,0xc
c0012ee9:	c3                   	ret    

c0012eea <CmExpand(Reghive_Tag*, int)>:
c0012eea:	55                   	push   ebp
c0012eeb:	57                   	push   edi
c0012eec:	83 cf ff             	or     edi,0xffffffff
c0012eef:	56                   	push   esi
c0012ef0:	53                   	push   ebx
c0012ef1:	83 ec 3c             	sub    esp,0x3c
c0012ef4:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012ef8:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012efc:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012f00:	74 59                	je     c0012f5b <CmExpand(Reghive_Tag*, int)+0x71>
c0012f02:	50                   	push   eax
c0012f03:	31 d2                	xor    edx,edx
c0012f05:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012f09:	31 ff                	xor    edi,edi
c0012f0b:	52                   	push   edx
c0012f0c:	50                   	push   eax
c0012f0d:	ff 33                	push   DWORD PTR [ebx]
c0012f0f:	e8 5e 8d ff ff       	call   c000bc72 <File::seek(unsigned long long)>
c0012f14:	83 c4 0c             	add    esp,0xc
c0012f17:	6a 2b                	push   0x2b
c0012f19:	6a 00                	push   0x0
c0012f1b:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c0012f1f:	55                   	push   ebp
c0012f20:	e8 cb d5 fe ff       	call   c00004f0 <memset>
c0012f25:	83 c4 10             	add    esp,0x10
c0012f28:	39 f7                	cmp    edi,esi
c0012f2a:	7d 1b                	jge    c0012f47 <CmExpand(Reghive_Tag*, int)+0x5d>
c0012f2c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f2e:	83 ec 0c             	sub    esp,0xc
c0012f31:	47                   	inc    edi
c0012f32:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012f36:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f38:	51                   	push   ecx
c0012f39:	55                   	push   ebp
c0012f3a:	6a 00                	push   0x0
c0012f3c:	6a 2b                	push   0x2b
c0012f3e:	50                   	push   eax
c0012f3f:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012f42:	83 c4 20             	add    esp,0x20
c0012f45:	eb e1                	jmp    c0012f28 <CmExpand(Reghive_Tag*, int)+0x3e>
c0012f47:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c0012f4a:	83 ec 0c             	sub    esp,0xc
c0012f4d:	01 fe                	add    esi,edi
c0012f4f:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c0012f52:	53                   	push   ebx
c0012f53:	e8 71 ff ff ff       	call   c0012ec9 <CmUpdateHeader(Reghive_Tag*)>
c0012f58:	83 c4 10             	add    esp,0x10
c0012f5b:	83 c4 3c             	add    esp,0x3c
c0012f5e:	89 f8                	mov    eax,edi
c0012f60:	5b                   	pop    ebx
c0012f61:	5e                   	pop    esi
c0012f62:	5f                   	pop    edi
c0012f63:	5d                   	pop    ebp
c0012f64:	c3                   	ret    

c0012f65 <CmFindUnusedExtent(Reghive_Tag*)>:
c0012f65:	55                   	push   ebp
c0012f66:	57                   	push   edi
c0012f67:	56                   	push   esi
c0012f68:	53                   	push   ebx
c0012f69:	83 cb ff             	or     ebx,0xffffffff
c0012f6c:	83 ec 1c             	sub    esp,0x1c
c0012f6f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012f73:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0012f77:	74 68                	je     c0012fe1 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012f79:	51                   	push   ecx
c0012f7a:	be 2b 00 00 00       	mov    esi,0x2b
c0012f7f:	6a 00                	push   0x0
c0012f81:	31 ff                	xor    edi,edi
c0012f83:	6a 00                	push   0x0
c0012f85:	31 db                	xor    ebx,ebx
c0012f87:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012f8a:	e8 e3 8c ff ff       	call   c000bc72 <File::seek(unsigned long long)>
c0012f8f:	83 c4 10             	add    esp,0x10
c0012f92:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012f95:	76 3b                	jbe    c0012fd2 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012f97:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012f9a:	83 ec 0c             	sub    esp,0xc
c0012f9d:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012fa1:	8b 10                	mov    edx,DWORD PTR [eax]
c0012fa3:	51                   	push   ecx
c0012fa4:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012fa8:	51                   	push   ecx
c0012fa9:	6a 00                	push   0x0
c0012fab:	6a 01                	push   0x1
c0012fad:	50                   	push   eax
c0012fae:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012fb1:	83 c4 20             	add    esp,0x20
c0012fb4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012fb9:	74 26                	je     c0012fe1 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012fbb:	52                   	push   edx
c0012fbc:	43                   	inc    ebx
c0012fbd:	57                   	push   edi
c0012fbe:	56                   	push   esi
c0012fbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012fc2:	e8 ab 8c ff ff       	call   c000bc72 <File::seek(unsigned long long)>
c0012fc7:	83 c6 2b             	add    esi,0x2b
c0012fca:	83 d7 00             	adc    edi,0x0
c0012fcd:	83 c4 10             	add    esp,0x10
c0012fd0:	eb c0                	jmp    c0012f92 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012fd2:	50                   	push   eax
c0012fd3:	50                   	push   eax
c0012fd4:	6a 40                	push   0x40
c0012fd6:	55                   	push   ebp
c0012fd7:	e8 0e ff ff ff       	call   c0012eea <CmExpand(Reghive_Tag*, int)>
c0012fdc:	83 c4 10             	add    esp,0x10
c0012fdf:	89 c3                	mov    ebx,eax
c0012fe1:	83 c4 1c             	add    esp,0x1c
c0012fe4:	89 d8                	mov    eax,ebx
c0012fe6:	5b                   	pop    ebx
c0012fe7:	5e                   	pop    esi
c0012fe8:	5f                   	pop    edi
c0012fe9:	5d                   	pop    ebp
c0012fea:	c3                   	ret    

c0012feb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0012feb:	55                   	push   ebp
c0012fec:	57                   	push   edi
c0012fed:	56                   	push   esi
c0012fee:	53                   	push   ebx
c0012fef:	81 ec 88 00 00 00    	sub    esp,0x88
c0012ff5:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0012ffc:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013003:	e8 5d ff ff ff       	call   c0012f65 <CmFindUnusedExtent(Reghive_Tag*)>
c0013008:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001300c:	83 c4 0c             	add    esp,0xc
c001300f:	6a 2b                	push   0x2b
c0013011:	6a 00                	push   0x0
c0013013:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0013017:	55                   	push   ebp
c0013018:	e8 d3 d4 fe ff       	call   c00004f0 <memset>
c001301d:	83 c4 10             	add    esp,0x10
c0013020:	85 db                	test   ebx,ebx
c0013022:	74 12                	je     c0013036 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0013024:	51                   	push   ecx
c0013025:	55                   	push   ebp
c0013026:	53                   	push   ebx
c0013027:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001302e:	e8 0e fd ff ff       	call   c0012d41 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013033:	83 c4 10             	add    esp,0x10
c0013036:	8d 7c 24 45          	lea    edi,[esp+0x45]
c001303a:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0013041:	b9 2b 00 00 00       	mov    ecx,0x2b
c0013046:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013048:	85 db                	test   ebx,ebx
c001304a:	74 49                	je     c0013095 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c001304c:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0013051:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0013056:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001305a:	c1 e0 08             	shl    eax,0x8
c001305d:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0013063:	09 c8                	or     eax,ecx
c0013065:	74 11                	je     c0013078 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0013067:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001306b:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c001306f:	c1 e8 10             	shr    eax,0x10
c0013072:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0013076:	eb 0f                	jmp    c0013087 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0013078:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c001307d:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0013082:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0013087:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c001308b:	c1 ea 08             	shr    edx,0x8
c001308e:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0013093:	eb 0f                	jmp    c00130a4 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0013095:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c001309a:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c001309f:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c00130a4:	52                   	push   edx
c00130a5:	8d 44 24 49          	lea    eax,[esp+0x49]
c00130a9:	50                   	push   eax
c00130aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00130ae:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00130b5:	e8 ab fd ff ff       	call   c0012e65 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00130ba:	83 c4 10             	add    esp,0x10
c00130bd:	85 db                	test   ebx,ebx
c00130bf:	74 12                	je     c00130d3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c00130c1:	50                   	push   eax
c00130c2:	55                   	push   ebp
c00130c3:	53                   	push   ebx
c00130c4:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00130cb:	e8 95 fd ff ff       	call   c0012e65 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00130d0:	83 c4 10             	add    esp,0x10
c00130d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00130d7:	83 c4 7c             	add    esp,0x7c
c00130da:	5b                   	pop    ebx
c00130db:	5e                   	pop    esi
c00130dc:	5f                   	pop    edi
c00130dd:	5d                   	pop    ebp
c00130de:	c3                   	ret    

c00130df <CmSetString(Reghive_Tag*, int, char const*)>:
c00130df:	55                   	push   ebp
c00130e0:	57                   	push   edi
c00130e1:	56                   	push   esi
c00130e2:	53                   	push   ebx
c00130e3:	bb 27 00 00 00       	mov    ebx,0x27
c00130e8:	81 ec 88 00 00 00    	sub    esp,0x88
c00130ee:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c00130f5:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c00130fc:	e8 7f d4 fe ff       	call   c0000580 <strlen>
c0013101:	8d 48 26             	lea    ecx,[eax+0x26]
c0013104:	89 c8                	mov    eax,ecx
c0013106:	99                   	cdq    
c0013107:	f7 fb                	idiv   ebx
c0013109:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001310d:	83 c4 10             	add    esp,0x10
c0013110:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0013116:	7e 10                	jle    c0013128 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0013118:	83 ec 0c             	sub    esp,0xc
c001311b:	68 04 26 02 c0       	push   0xc0022604
c0013120:	e8 b6 e4 ff ff       	call   c00115db <KePanic(char const*)>
c0013125:	83 c4 10             	add    esp,0x10
c0013128:	53                   	push   ebx
c0013129:	31 ed                	xor    ebp,ebp
c001312b:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c001312f:	53                   	push   ebx
c0013130:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013137:	57                   	push   edi
c0013138:	e8 04 fc ff ff       	call   c0012d41 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001313d:	83 c4 10             	add    esp,0x10
c0013140:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c0013144:	89 f0                	mov    eax,esi
c0013146:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c001314a:	c1 e0 08             	shl    eax,0x8
c001314d:	09 c6                	or     esi,eax
c001314f:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0013153:	c1 e6 08             	shl    esi,0x8
c0013156:	09 c6                	or     esi,eax
c0013158:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c001315c:	7e 72                	jle    c00131d0 <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c001315e:	85 f6                	test   esi,esi
c0013160:	75 25                	jne    c0013187 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0013162:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0013167:	8d 44 24 45          	lea    eax,[esp+0x45]
c001316b:	50                   	push   eax
c001316c:	6a 00                	push   0x0
c001316e:	6a 00                	push   0x0
c0013170:	57                   	push   edi
c0013171:	e8 75 fe ff ff       	call   c0012feb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013176:	83 c4 10             	add    esp,0x10
c0013179:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c001317c:	89 c6                	mov    esi,eax
c001317e:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0013181:	c1 f8 10             	sar    eax,0x10
c0013184:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0013187:	51                   	push   ecx
c0013188:	8d 54 24 49          	lea    edx,[esp+0x49]
c001318c:	52                   	push   edx
c001318d:	56                   	push   esi
c001318e:	57                   	push   edi
c001318f:	e8 ad fb ff ff       	call   c0012d41 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013194:	83 c4 0c             	add    esp,0xc
c0013197:	6a 27                	push   0x27
c0013199:	6a 00                	push   0x0
c001319b:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c001319f:	51                   	push   ecx
c00131a0:	e8 4b d3 fe ff       	call   c00004f0 <memset>
c00131a5:	6b c5 27             	imul   eax,ebp,0x27
c00131a8:	83 c4 0c             	add    esp,0xc
c00131ab:	6a 27                	push   0x27
c00131ad:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c00131b4:	50                   	push   eax
c00131b5:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c00131b9:	51                   	push   ecx
c00131ba:	e8 d1 d4 fe ff       	call   c0000690 <strncpy>
c00131bf:	83 c4 0c             	add    esp,0xc
c00131c2:	8d 54 24 49          	lea    edx,[esp+0x49]
c00131c6:	52                   	push   edx
c00131c7:	56                   	push   esi
c00131c8:	57                   	push   edi
c00131c9:	e8 97 fc ff ff       	call   c0012e65 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00131ce:	eb 19                	jmp    c00131e9 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c00131d0:	85 f6                	test   esi,esi
c00131d2:	74 18                	je     c00131ec <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c00131d4:	52                   	push   edx
c00131d5:	52                   	push   edx
c00131d6:	56                   	push   esi
c00131d7:	57                   	push   edi
c00131d8:	e8 c4 fc ff ff       	call   c0012ea1 <CmFreeExtent(Reghive_Tag*, int)>
c00131dd:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c00131e1:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c00131e5:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00131e9:	83 c4 10             	add    esp,0x10
c00131ec:	45                   	inc    ebp
c00131ed:	83 c3 03             	add    ebx,0x3
c00131f0:	83 fd 07             	cmp    ebp,0x7
c00131f3:	0f 85 47 ff ff ff    	jne    c0013140 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c00131f9:	50                   	push   eax
c00131fa:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c00131fe:	50                   	push   eax
c00131ff:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013206:	57                   	push   edi
c0013207:	e8 59 fc ff ff       	call   c0012e65 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001320c:	81 c4 8c 00 00 00    	add    esp,0x8c
c0013212:	5b                   	pop    ebx
c0013213:	5e                   	pop    esi
c0013214:	5f                   	pop    edi
c0013215:	5d                   	pop    ebp
c0013216:	c3                   	ret    

c0013217 <CmGetMatch(char*, char*, bool, bool*)>:
c0013217:	56                   	push   esi
c0013218:	53                   	push   ebx
c0013219:	50                   	push   eax
c001321a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001321f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013223:	74 25                	je     c001324a <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0013225:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0013228:	31 db                	xor    ebx,ebx
c001322a:	50                   	push   eax
c001322b:	50                   	push   eax
c001322c:	8d 04 9d a0 3e 02 c0 	lea    eax,[ebx*4-0x3ffdc160]
c0013233:	50                   	push   eax
c0013234:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013238:	e8 43 d5 fe ff       	call   c0000780 <strcmp>
c001323d:	83 c4 10             	add    esp,0x10
c0013240:	85 c0                	test   eax,eax
c0013242:	74 2e                	je     c0013272 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0013244:	43                   	inc    ebx
c0013245:	83 fb 3f             	cmp    ebx,0x3f
c0013248:	75 e0                	jne    c001322a <CmGetMatch(char*, char*, bool, bool*)+0x13>
c001324a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001324d:	31 db                	xor    ebx,ebx
c001324f:	51                   	push   ecx
c0013250:	51                   	push   ecx
c0013251:	8d 04 9d a0 3e 02 c0 	lea    eax,[ebx*4-0x3ffdc160]
c0013258:	50                   	push   eax
c0013259:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001325d:	e8 1e d5 fe ff       	call   c0000780 <strcmp>
c0013262:	83 c4 10             	add    esp,0x10
c0013265:	85 c0                	test   eax,eax
c0013267:	74 09                	je     c0013272 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0013269:	43                   	inc    ebx
c001326a:	83 fb 3f             	cmp    ebx,0x3f
c001326d:	75 e0                	jne    c001324f <CmGetMatch(char*, char*, bool, bool*)+0x38>
c001326f:	83 cb ff             	or     ebx,0xffffffff
c0013272:	5a                   	pop    edx
c0013273:	89 d8                	mov    eax,ebx
c0013275:	5b                   	pop    ebx
c0013276:	5e                   	pop    esi
c0013277:	c3                   	ret    

c0013278 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0013278:	55                   	push   ebp
c0013279:	31 c0                	xor    eax,eax
c001327b:	57                   	push   edi
c001327c:	56                   	push   esi
c001327d:	53                   	push   ebx
c001327e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013282:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013286:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001328a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001328e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013290:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0013293:	83 fd 1f             	cmp    ebp,0x1f
c0013296:	7f 0b                	jg     c00132a3 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0013298:	0f b6 c2             	movzx  eax,dl
c001329b:	d3 e0                	shl    eax,cl
c001329d:	09 07                	or     DWORD PTR [edi],eax
c001329f:	b0 01                	mov    al,0x1
c00132a1:	01 33                	add    DWORD PTR [ebx],esi
c00132a3:	5b                   	pop    ebx
c00132a4:	5e                   	pop    esi
c00132a5:	5f                   	pop    edi
c00132a6:	5d                   	pop    ebp
c00132a7:	c3                   	ret    

c00132a8 <CmGetShift(unsigned int*, int*, int, bool*)>:
c00132a8:	57                   	push   edi
c00132a9:	56                   	push   esi
c00132aa:	53                   	push   ebx
c00132ab:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00132af:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00132b3:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00132b7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00132bb:	39 0b                	cmp    DWORD PTR [ebx],ecx
c00132bd:	7c 17                	jl     c00132d6 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c00132bf:	8b 17                	mov    edx,DWORD PTR [edi]
c00132c1:	b8 01 00 00 00       	mov    eax,0x1
c00132c6:	d3 e0                	shl    eax,cl
c00132c8:	48                   	dec    eax
c00132c9:	21 d0                	and    eax,edx
c00132cb:	d3 ea                	shr    edx,cl
c00132cd:	89 17                	mov    DWORD PTR [edi],edx
c00132cf:	29 0b                	sub    DWORD PTR [ebx],ecx
c00132d1:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00132d4:	eb 05                	jmp    c00132db <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c00132d6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00132d9:	31 c0                	xor    eax,eax
c00132db:	5b                   	pop    ebx
c00132dc:	5e                   	pop    esi
c00132dd:	5f                   	pop    edi
c00132de:	c3                   	ret    

c00132df <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c00132df:	83 ec 40             	sub    esp,0x40
c00132e2:	8d 44 24 09          	lea    eax,[esp+0x9]
c00132e6:	50                   	push   eax
c00132e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00132eb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00132ef:	e8 4d fa ff ff       	call   c0012d41 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00132f4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00132f8:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c00132fc:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0013300:	89 10                	mov    DWORD PTR [eax],edx
c0013302:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0013305:	83 c4 4c             	add    esp,0x4c
c0013308:	c3                   	ret    

c0013309 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0013309:	55                   	push   ebp
c001330a:	57                   	push   edi
c001330b:	56                   	push   esi
c001330c:	53                   	push   ebx
c001330d:	83 ec 40             	sub    esp,0x40
c0013310:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0013314:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0013318:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c001331c:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0013320:	53                   	push   ebx
c0013321:	56                   	push   esi
c0013322:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013326:	e8 16 fa ff ff       	call   c0012d41 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001332b:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c001332f:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0013333:	83 c4 0c             	add    esp,0xc
c0013336:	53                   	push   ebx
c0013337:	56                   	push   esi
c0013338:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001333c:	e8 24 fb ff ff       	call   c0012e65 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013341:	83 c4 4c             	add    esp,0x4c
c0013344:	5b                   	pop    ebx
c0013345:	5e                   	pop    esi
c0013346:	5f                   	pop    edi
c0013347:	5d                   	pop    ebp
c0013348:	c3                   	ret    

c0013349 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0013349:	55                   	push   ebp
c001334a:	57                   	push   edi
c001334b:	56                   	push   esi
c001334c:	31 f6                	xor    esi,esi
c001334e:	53                   	push   ebx
c001334f:	31 db                	xor    ebx,ebx
c0013351:	83 ec 40             	sub    esp,0x40
c0013354:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001335c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013364:	6a 12                	push   0x12
c0013366:	68 ee 00 00 00       	push   0xee
c001336b:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c001336f:	e8 7c d1 fe ff       	call   c00004f0 <memset>
c0013374:	83 c4 10             	add    esp,0x10
c0013377:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001337b:	6a 08                	push   0x8
c001337d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0013381:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0013385:	50                   	push   eax
c0013386:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001338a:	55                   	push   ebp
c001338b:	57                   	push   edi
c001338c:	e8 e7 fe ff ff       	call   c0013278 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0013391:	83 c4 10             	add    esp,0x10
c0013394:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0013398:	50                   	push   eax
c0013399:	6a 06                	push   0x6
c001339b:	55                   	push   ebp
c001339c:	57                   	push   edi
c001339d:	e8 06 ff ff ff       	call   c00132a8 <CmGetShift(unsigned int*, int*, int, bool*)>
c00133a2:	83 c4 10             	add    esp,0x10
c00133a5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00133aa:	74 07                	je     c00133b3 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c00133ac:	46                   	inc    esi
c00133ad:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c00133b1:	eb e1                	jmp    c0013394 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c00133b3:	43                   	inc    ebx
c00133b4:	83 fb 12             	cmp    ebx,0x12
c00133b7:	75 c2                	jne    c001337b <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c00133b9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00133bd:	31 f6                	xor    esi,esi
c00133bf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00133c2:	50                   	push   eax
c00133c3:	50                   	push   eax
c00133c4:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c00133c9:	46                   	inc    esi
c00133ca:	8d 04 85 a0 3e 02 c0 	lea    eax,[eax*4-0x3ffdc160]
c00133d1:	50                   	push   eax
c00133d2:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00133d6:	e8 95 d4 fe ff       	call   c0000870 <strcat>
c00133db:	83 c4 10             	add    esp,0x10
c00133de:	83 fe 18             	cmp    esi,0x18
c00133e1:	75 df                	jne    c00133c2 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c00133e3:	83 c4 3c             	add    esp,0x3c
c00133e6:	31 c0                	xor    eax,eax
c00133e8:	5b                   	pop    ebx
c00133e9:	5e                   	pop    esi
c00133ea:	5f                   	pop    edi
c00133eb:	5d                   	pop    ebp
c00133ec:	c3                   	ret    

c00133ed <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c00133ed:	83 ec 40             	sub    esp,0x40
c00133f0:	8d 44 24 09          	lea    eax,[esp+0x9]
c00133f4:	50                   	push   eax
c00133f5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00133f9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00133fd:	e8 3f f9 ff ff       	call   c0012d41 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013402:	58                   	pop    eax
c0013403:	5a                   	pop    edx
c0013404:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0013408:	8d 44 24 15          	lea    eax,[esp+0x15]
c001340c:	50                   	push   eax
c001340d:	e8 37 ff ff ff       	call   c0013349 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0013412:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0013417:	83 c4 4c             	add    esp,0x4c
c001341a:	c3                   	ret    

c001341b <CmConvertToInternalFilename(char const*, unsigned char*)>:
c001341b:	55                   	push   ebp
c001341c:	57                   	push   edi
c001341d:	56                   	push   esi
c001341e:	53                   	push   ebx
c001341f:	31 db                	xor    ebx,ebx
c0013421:	83 ec 70             	sub    esp,0x70
c0013424:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c001342b:	6a 30                	push   0x30
c001342d:	6a 00                	push   0x0
c001342f:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0013433:	56                   	push   esi
c0013434:	e8 b7 d0 fe ff       	call   c00004f0 <memset>
c0013439:	83 c4 10             	add    esp,0x10
c001343c:	83 ec 0c             	sub    esp,0xc
c001343f:	57                   	push   edi
c0013440:	e8 3b d1 fe ff       	call   c0000580 <strlen>
c0013445:	83 c4 10             	add    esp,0x10
c0013448:	39 d8                	cmp    eax,ebx
c001344a:	76 16                	jbe    c0013462 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c001344c:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0013450:	83 ec 0c             	sub    esp,0xc
c0013453:	50                   	push   eax
c0013454:	e8 07 d5 fe ff       	call   c0000960 <toupper>
c0013459:	83 c4 10             	add    esp,0x10
c001345c:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001345f:	43                   	inc    ebx
c0013460:	eb da                	jmp    c001343c <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0013462:	52                   	push   edx
c0013463:	31 db                	xor    ebx,ebx
c0013465:	6a 18                	push   0x18
c0013467:	31 ff                	xor    edi,edi
c0013469:	6a 3f                	push   0x3f
c001346b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001346f:	50                   	push   eax
c0013470:	e8 7b d0 fe ff       	call   c00004f0 <memset>
c0013475:	83 c4 10             	add    esp,0x10
c0013478:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c001347c:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013480:	84 c0                	test   al,al
c0013482:	0f 84 af 00 00 00    	je     c0013537 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0013488:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c001348c:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001348f:	83 ec 0c             	sub    esp,0xc
c0013492:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c0013497:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c001349b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001349f:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c00134a4:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c00134a8:	56                   	push   esi
c00134a9:	e8 d2 d0 fe ff       	call   c0000580 <strlen>
c00134ae:	83 c4 10             	add    esp,0x10
c00134b1:	85 c0                	test   eax,eax
c00134b3:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00134b7:	74 0b                	je     c00134c4 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c00134b9:	50                   	push   eax
c00134ba:	6a 01                	push   0x1
c00134bc:	56                   	push   esi
c00134bd:	8d 44 24 20          	lea    eax,[esp+0x20]
c00134c1:	50                   	push   eax
c00134c2:	eb 0a                	jmp    c00134ce <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c00134c4:	50                   	push   eax
c00134c5:	6a 00                	push   0x0
c00134c7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00134cb:	50                   	push   eax
c00134cc:	6a 00                	push   0x0
c00134ce:	e8 44 fd ff ff       	call   c0013217 <CmGetMatch(char*, char*, bool, bool*)>
c00134d3:	83 c4 10             	add    esp,0x10
c00134d6:	83 f8 ff             	cmp    eax,0xffffffff
c00134d9:	75 1a                	jne    c00134f5 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c00134db:	83 ec 0c             	sub    esp,0xc
c00134de:	68 19 26 02 c0       	push   0xc0022619
c00134e3:	e8 f3 e0 ff ff       	call   c00115db <KePanic(char const*)>
c00134e8:	83 c4 10             	add    esp,0x10
c00134eb:	b8 02 00 00 00       	mov    eax,0x2
c00134f0:	e9 bb 00 00 00       	jmp    c00135b0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c00134f5:	83 ff 18             	cmp    edi,0x18
c00134f8:	75 1a                	jne    c0013514 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c00134fa:	83 ec 0c             	sub    esp,0xc
c00134fd:	68 2e 26 02 c0       	push   0xc002262e
c0013502:	e8 d4 e0 ff ff       	call   c00115db <KePanic(char const*)>
c0013507:	83 c4 10             	add    esp,0x10
c001350a:	b8 01 00 00 00       	mov    eax,0x1
c001350f:	e9 9c 00 00 00       	jmp    c00135b0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0013514:	47                   	inc    edi
c0013515:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001351a:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c001351e:	0f 45 dd             	cmovne ebx,ebp
c0013521:	83 ec 0c             	sub    esp,0xc
c0013524:	56                   	push   esi
c0013525:	e8 56 d0 fe ff       	call   c0000580 <strlen>
c001352a:	83 c4 10             	add    esp,0x10
c001352d:	85 c0                	test   eax,eax
c001352f:	74 06                	je     c0013537 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0013531:	43                   	inc    ebx
c0013532:	e9 41 ff ff ff       	jmp    c0013478 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c0013537:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001353f:	31 db                	xor    ebx,ebx
c0013541:	31 ff                	xor    edi,edi
c0013543:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001354b:	50                   	push   eax
c001354c:	6a 12                	push   0x12
c001354e:	68 ee 00 00 00       	push   0xee
c0013553:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c001355a:	e8 91 cf fe ff       	call   c00004f0 <memset>
c001355f:	83 c4 10             	add    esp,0x10
c0013562:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c0013566:	83 fb 17             	cmp    ebx,0x17
c0013569:	7e 26                	jle    c0013591 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c001356b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001356f:	50                   	push   eax
c0013570:	6a 08                	push   0x8
c0013572:	55                   	push   ebp
c0013573:	56                   	push   esi
c0013574:	e8 2f fd ff ff       	call   c00132a8 <CmGetShift(unsigned int*, int*, int, bool*)>
c0013579:	83 c4 10             	add    esp,0x10
c001357c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013581:	74 26                	je     c00135a9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c0013583:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c001358a:	4b                   	dec    ebx
c001358b:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c001358e:	47                   	inc    edi
c001358f:	eb 1c                	jmp    c00135ad <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c0013591:	6a 06                	push   0x6
c0013593:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c0013598:	50                   	push   eax
c0013599:	55                   	push   ebp
c001359a:	56                   	push   esi
c001359b:	e8 d8 fc ff ff       	call   c0013278 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00135a0:	83 c4 10             	add    esp,0x10
c00135a3:	84 c0                	test   al,al
c00135a5:	75 06                	jne    c00135ad <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c00135a7:	eb c2                	jmp    c001356b <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c00135a9:	31 c0                	xor    eax,eax
c00135ab:	eb 03                	jmp    c00135b0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c00135ad:	43                   	inc    ebx
c00135ae:	eb b2                	jmp    c0013562 <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c00135b0:	83 c4 6c             	add    esp,0x6c
c00135b3:	5b                   	pop    ebx
c00135b4:	5e                   	pop    esi
c00135b5:	5f                   	pop    edi
c00135b6:	5d                   	pop    ebp
c00135b7:	c3                   	ret    

c00135b8 <CmCreateString(Reghive_Tag*, int, char const*)>:
c00135b8:	53                   	push   ebx
c00135b9:	83 ec 3c             	sub    esp,0x3c
c00135bc:	6a 2b                	push   0x2b
c00135be:	6a 00                	push   0x0
c00135c0:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00135c4:	53                   	push   ebx
c00135c5:	e8 26 cf fe ff       	call   c00004f0 <memset>
c00135ca:	58                   	pop    eax
c00135cb:	5a                   	pop    edx
c00135cc:	8d 44 24 11          	lea    eax,[esp+0x11]
c00135d0:	50                   	push   eax
c00135d1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00135d5:	e8 41 fe ff ff       	call   c001341b <CmConvertToInternalFilename(char const*, unsigned char*)>
c00135da:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c00135df:	83 c4 0c             	add    esp,0xc
c00135e2:	6a 15                	push   0x15
c00135e4:	6a 00                	push   0x0
c00135e6:	8d 44 24 27          	lea    eax,[esp+0x27]
c00135ea:	50                   	push   eax
c00135eb:	e8 00 cf fe ff       	call   c00004f0 <memset>
c00135f0:	53                   	push   ebx
c00135f1:	6a 00                	push   0x0
c00135f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00135f7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00135fb:	e8 eb f9 ff ff       	call   c0012feb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013600:	83 c4 58             	add    esp,0x58
c0013603:	5b                   	pop    ebx
c0013604:	c3                   	ret    

c0013605 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0013605:	56                   	push   esi
c0013606:	53                   	push   ebx
c0013607:	83 ec 48             	sub    esp,0x48
c001360a:	6a 12                	push   0x12
c001360c:	68 ff 00 00 00       	push   0xff
c0013611:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0013615:	56                   	push   esi
c0013616:	e8 d5 ce fe ff       	call   c00004f0 <memset>
c001361b:	5a                   	pop    edx
c001361c:	59                   	pop    ecx
c001361d:	56                   	push   esi
c001361e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0013622:	e8 f4 fd ff ff       	call   c001341b <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013627:	83 c4 10             	add    esp,0x10
c001362a:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001362e:	85 db                	test   ebx,ebx
c0013630:	74 42                	je     c0013674 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c0013632:	50                   	push   eax
c0013633:	8d 44 24 19          	lea    eax,[esp+0x19]
c0013637:	50                   	push   eax
c0013638:	53                   	push   ebx
c0013639:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001363d:	e8 ff f6 ff ff       	call   c0012d41 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013642:	83 c4 0c             	add    esp,0xc
c0013645:	6a 12                	push   0x12
c0013647:	8d 44 24 21          	lea    eax,[esp+0x21]
c001364b:	50                   	push   eax
c001364c:	56                   	push   esi
c001364d:	e8 2e cd fe ff       	call   c0000380 <memcmp>
c0013652:	83 c4 10             	add    esp,0x10
c0013655:	85 c0                	test   eax,eax
c0013657:	74 1e                	je     c0013677 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0013659:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c001365e:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c0013663:	c1 e3 08             	shl    ebx,0x8
c0013666:	09 d8                	or     eax,ebx
c0013668:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c001366d:	c1 e3 10             	shl    ebx,0x10
c0013670:	09 c3                	or     ebx,eax
c0013672:	eb ba                	jmp    c001362e <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0013674:	83 cb ff             	or     ebx,0xffffffff
c0013677:	83 c4 44             	add    esp,0x44
c001367a:	89 d8                	mov    eax,ebx
c001367c:	5b                   	pop    ebx
c001367d:	5e                   	pop    esi
c001367e:	c3                   	ret    

c001367f <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c001367f:	57                   	push   edi
c0013680:	56                   	push   esi
c0013681:	53                   	push   ebx
c0013682:	83 ec 34             	sub    esp,0x34
c0013685:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0013689:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001368d:	6a 2b                	push   0x2b
c001368f:	6a 00                	push   0x0
c0013691:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0013695:	53                   	push   ebx
c0013696:	e8 55 ce fe ff       	call   c00004f0 <memset>
c001369b:	58                   	pop    eax
c001369c:	5a                   	pop    edx
c001369d:	8d 44 24 11          	lea    eax,[esp+0x11]
c00136a1:	50                   	push   eax
c00136a2:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00136a6:	e8 70 fd ff ff       	call   c001341b <CmConvertToInternalFilename(char const*, unsigned char*)>
c00136ab:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c00136af:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c00136b3:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c00136b7:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00136bb:	53                   	push   ebx
c00136bc:	6a 00                	push   0x0
c00136be:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00136c2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00136c6:	e8 20 f9 ff ff       	call   c0012feb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00136cb:	83 c4 50             	add    esp,0x50
c00136ce:	5b                   	pop    ebx
c00136cf:	5e                   	pop    esi
c00136d0:	5f                   	pop    edi
c00136d1:	c3                   	ret    

c00136d2 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c00136d2:	55                   	push   ebp
c00136d3:	57                   	push   edi
c00136d4:	56                   	push   esi
c00136d5:	53                   	push   ebx
c00136d6:	83 ec 40             	sub    esp,0x40
c00136d9:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c00136dd:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00136e1:	6a 2b                	push   0x2b
c00136e3:	6a 00                	push   0x0
c00136e5:	8d 74 24 11          	lea    esi,[esp+0x11]
c00136e9:	56                   	push   esi
c00136ea:	e8 01 ce fe ff       	call   c00004f0 <memset>
c00136ef:	5f                   	pop    edi
c00136f0:	89 ef                	mov    edi,ebp
c00136f2:	58                   	pop    eax
c00136f3:	8d 44 24 11          	lea    eax,[esp+0x11]
c00136f7:	50                   	push   eax
c00136f8:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00136fc:	e8 1a fd ff ff       	call   c001341b <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013701:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c0013706:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c001370b:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0013710:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0013715:	83 c4 10             	add    esp,0x10
c0013718:	85 ed                	test   ebp,ebp
c001371a:	74 14                	je     c0013730 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c001371c:	51                   	push   ecx
c001371d:	51                   	push   ecx
c001371e:	57                   	push   edi
c001371f:	53                   	push   ebx
c0013720:	e8 0e f7 ff ff       	call   c0012e33 <CmGetNext(Reghive_Tag*, int)>
c0013725:	83 c4 10             	add    esp,0x10
c0013728:	85 c0                	test   eax,eax
c001372a:	74 04                	je     c0013730 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c001372c:	89 c7                	mov    edi,eax
c001372e:	eb e8                	jmp    c0013718 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0013730:	56                   	push   esi
c0013731:	6a 00                	push   0x0
c0013733:	57                   	push   edi
c0013734:	53                   	push   ebx
c0013735:	e8 b1 f8 ff ff       	call   c0012feb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001373a:	83 c4 0c             	add    esp,0xc
c001373d:	56                   	push   esi
c001373e:	50                   	push   eax
c001373f:	89 c7                	mov    edi,eax
c0013741:	53                   	push   ebx
c0013742:	e8 fa f5 ff ff       	call   c0012d41 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013747:	58                   	pop    eax
c0013748:	5a                   	pop    edx
c0013749:	6a 6c                	push   0x6c
c001374b:	6a 00                	push   0x0
c001374d:	6a 00                	push   0x0
c001374f:	68 3f 26 02 c0       	push   0xc002263f
c0013754:	57                   	push   edi
c0013755:	53                   	push   ebx
c0013756:	e8 24 ff ff ff       	call   c001367f <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c001375b:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c001375f:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c0013763:	c1 e8 10             	shr    eax,0x10
c0013766:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001376a:	83 c4 1c             	add    esp,0x1c
c001376d:	56                   	push   esi
c001376e:	57                   	push   edi
c001376f:	53                   	push   ebx
c0013770:	e8 f0 f6 ff ff       	call   c0012e65 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013775:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001377a:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c001377f:	c1 e0 08             	shl    eax,0x8
c0013782:	09 c2                	or     edx,eax
c0013784:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0013789:	83 c4 4c             	add    esp,0x4c
c001378c:	5b                   	pop    ebx
c001378d:	5e                   	pop    esi
c001378e:	c1 e0 10             	shl    eax,0x10
c0013791:	09 d0                	or     eax,edx
c0013793:	5f                   	pop    edi
c0013794:	5d                   	pop    ebp
c0013795:	c3                   	ret    

c0013796 <zStrtok(char*, char const*)>:
c0013796:	55                   	push   ebp
c0013797:	57                   	push   edi
c0013798:	56                   	push   esi
c0013799:	53                   	push   ebx
c001379a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001379e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00137a2:	85 db                	test   ebx,ebx
c00137a4:	74 2f                	je     c00137d5 <zStrtok(char*, char const*)+0x3f>
c00137a6:	85 c0                	test   eax,eax
c00137a8:	75 09                	jne    c00137b3 <zStrtok(char*, char const*)+0x1d>
c00137aa:	a1 f0 be 02 c0       	mov    eax,ds:0xc002bef0
c00137af:	85 c0                	test   eax,eax
c00137b1:	74 50                	je     c0013803 <zStrtok(char*, char const*)+0x6d>
c00137b3:	31 c9                	xor    ecx,ecx
c00137b5:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c00137b9:	74 03                	je     c00137be <zStrtok(char*, char const*)+0x28>
c00137bb:	41                   	inc    ecx
c00137bc:	eb f7                	jmp    c00137b5 <zStrtok(char*, char const*)+0x1f>
c00137be:	31 d2                	xor    edx,edx
c00137c0:	39 ca                	cmp    edx,ecx
c00137c2:	74 15                	je     c00137d9 <zStrtok(char*, char const*)+0x43>
c00137c4:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c00137c8:	8d 3c 10             	lea    edi,[eax+edx*1]
c00137cb:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00137ce:	39 ee                	cmp    esi,ebp
c00137d0:	74 13                	je     c00137e5 <zStrtok(char*, char const*)+0x4f>
c00137d2:	42                   	inc    edx
c00137d3:	eb eb                	jmp    c00137c0 <zStrtok(char*, char const*)+0x2a>
c00137d5:	31 c0                	xor    eax,eax
c00137d7:	eb 2a                	jmp    c0013803 <zStrtok(char*, char const*)+0x6d>
c00137d9:	c7 05 f0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bef0,0x0
c00137e3:	eb 1e                	jmp    c0013803 <zStrtok(char*, char const*)+0x6d>
c00137e5:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00137e8:	39 ce                	cmp    esi,ecx
c00137ea:	75 0a                	jne    c00137f6 <zStrtok(char*, char const*)+0x60>
c00137ec:	40                   	inc    eax
c00137ed:	a3 f0 be 02 c0       	mov    ds:0xc002bef0,eax
c00137f2:	89 d8                	mov    eax,ebx
c00137f4:	eb 0d                	jmp    c0013803 <zStrtok(char*, char const*)+0x6d>
c00137f6:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00137f9:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c00137fd:	89 15 f0 be 02 c0    	mov    DWORD PTR ds:0xc002bef0,edx
c0013803:	5b                   	pop    ebx
c0013804:	5e                   	pop    esi
c0013805:	5f                   	pop    edi
c0013806:	5d                   	pop    ebp
c0013807:	c3                   	ret    

c0013808 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0013808:	57                   	push   edi
c0013809:	56                   	push   esi
c001380a:	53                   	push   ebx
c001380b:	81 ec 08 01 00 00    	sub    esp,0x108
c0013811:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0013818:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c001381f:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0013823:	53                   	push   ebx
c0013824:	e8 27 ce fe ff       	call   c0000650 <strcpy>
c0013829:	59                   	pop    ecx
c001382a:	5e                   	pop    esi
c001382b:	68 a3 29 02 c0       	push   0xc00229a3
c0013830:	53                   	push   ebx
c0013831:	bb 01 00 00 00       	mov    ebx,0x1
c0013836:	e8 5b ff ff ff       	call   c0013796 <zStrtok(char*, char const*)>
c001383b:	83 c4 10             	add    esp,0x10
c001383e:	85 c0                	test   eax,eax
c0013840:	74 3b                	je     c001387d <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013842:	52                   	push   edx
c0013843:	50                   	push   eax
c0013844:	6a 01                	push   0x1
c0013846:	57                   	push   edi
c0013847:	e8 b9 fd ff ff       	call   c0013605 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c001384c:	59                   	pop    ecx
c001384d:	5e                   	pop    esi
c001384e:	89 c3                	mov    ebx,eax
c0013850:	68 a3 29 02 c0       	push   0xc00229a3
c0013855:	6a 00                	push   0x0
c0013857:	e8 3a ff ff ff       	call   c0013796 <zStrtok(char*, char const*)>
c001385c:	83 c4 10             	add    esp,0x10
c001385f:	85 c0                	test   eax,eax
c0013861:	89 c6                	mov    esi,eax
c0013863:	74 18                	je     c001387d <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013865:	52                   	push   edx
c0013866:	52                   	push   edx
c0013867:	53                   	push   ebx
c0013868:	57                   	push   edi
c0013869:	e8 86 f5 ff ff       	call   c0012df4 <CmEnterDirectory(Reghive_Tag*, int)>
c001386e:	83 c4 10             	add    esp,0x10
c0013871:	83 f8 ff             	cmp    eax,0xffffffff
c0013874:	89 c3                	mov    ebx,eax
c0013876:	74 05                	je     c001387d <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013878:	50                   	push   eax
c0013879:	56                   	push   esi
c001387a:	53                   	push   ebx
c001387b:	eb c9                	jmp    c0013846 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c001387d:	81 c4 00 01 00 00    	add    esp,0x100
c0013883:	89 d8                	mov    eax,ebx
c0013885:	5b                   	pop    ebx
c0013886:	5e                   	pop    esi
c0013887:	5f                   	pop    edi
c0013888:	c3                   	ret    

c0013889 <CmDisplayTree(Reghive_Tag*, int, int)>:
c0013889:	55                   	push   ebp
c001388a:	57                   	push   edi
c001388b:	56                   	push   esi
c001388c:	53                   	push   ebx
c001388d:	83 ec 5c             	sub    esp,0x5c
c0013890:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0013894:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0013898:	85 db                	test   ebx,ebx
c001389a:	0f 8e 84 00 00 00    	jle    c0013924 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c00138a0:	57                   	push   edi
c00138a1:	31 ed                	xor    ebp,ebp
c00138a3:	6a 32                	push   0x32
c00138a5:	6a 00                	push   0x0
c00138a7:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c00138ab:	57                   	push   edi
c00138ac:	e8 3f cc fe ff       	call   c00004f0 <memset>
c00138b1:	83 c4 0c             	add    esp,0xc
c00138b4:	57                   	push   edi
c00138b5:	53                   	push   ebx
c00138b6:	56                   	push   esi
c00138b7:	e8 31 fb ff ff       	call   c00133ed <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00138bc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00138c0:	83 c4 10             	add    esp,0x10
c00138c3:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c00138c7:	7d 13                	jge    c00138dc <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c00138c9:	83 ec 0c             	sub    esp,0xc
c00138cc:	45                   	inc    ebp
c00138cd:	68 47 2d 02 c0       	push   0xc0022d47
c00138d2:	e8 33 70 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00138d7:	83 c4 10             	add    esp,0x10
c00138da:	eb e7                	jmp    c00138c3 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c00138dc:	51                   	push   ecx
c00138dd:	57                   	push   edi
c00138de:	53                   	push   ebx
c00138df:	68 45 26 02 c0       	push   0xc0022645
c00138e4:	e8 21 70 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00138e9:	83 c4 10             	add    esp,0x10
c00138ec:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c00138f1:	75 1e                	jne    c0013911 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c00138f3:	52                   	push   edx
c00138f4:	52                   	push   edx
c00138f5:	53                   	push   ebx
c00138f6:	56                   	push   esi
c00138f7:	e8 f8 f4 ff ff       	call   c0012df4 <CmEnterDirectory(Reghive_Tag*, int)>
c00138fc:	83 c4 0c             	add    esp,0xc
c00138ff:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0013903:	8d 51 04             	lea    edx,[ecx+0x4]
c0013906:	52                   	push   edx
c0013907:	50                   	push   eax
c0013908:	56                   	push   esi
c0013909:	e8 7b ff ff ff       	call   c0013889 <CmDisplayTree(Reghive_Tag*, int, int)>
c001390e:	83 c4 10             	add    esp,0x10
c0013911:	50                   	push   eax
c0013912:	50                   	push   eax
c0013913:	53                   	push   ebx
c0013914:	56                   	push   esi
c0013915:	e8 19 f5 ff ff       	call   c0012e33 <CmGetNext(Reghive_Tag*, int)>
c001391a:	83 c4 10             	add    esp,0x10
c001391d:	89 c3                	mov    ebx,eax
c001391f:	e9 74 ff ff ff       	jmp    c0013898 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0013924:	83 c4 5c             	add    esp,0x5c
c0013927:	5b                   	pop    ebx
c0013928:	5e                   	pop    esi
c0013929:	5f                   	pop    edi
c001392a:	5d                   	pop    ebp
c001392b:	c3                   	ret    

c001392c <CmSplitFinalSlashInPlace(char*)>:
c001392c:	53                   	push   ebx
c001392d:	83 ec 14             	sub    esp,0x14
c0013930:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013934:	53                   	push   ebx
c0013935:	e8 46 cc fe ff       	call   c0000580 <strlen>
c001393a:	83 c4 10             	add    esp,0x10
c001393d:	48                   	dec    eax
c001393e:	85 c0                	test   eax,eax
c0013940:	74 15                	je     c0013957 <CmSplitFinalSlashInPlace(char*)+0x2b>
c0013942:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013946:	8d 14 03             	lea    edx,[ebx+eax*1]
c0013949:	75 09                	jne    c0013954 <CmSplitFinalSlashInPlace(char*)+0x28>
c001394b:	c6 02 00             	mov    BYTE PTR [edx],0x0
c001394e:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0013952:	eb 05                	jmp    c0013959 <CmSplitFinalSlashInPlace(char*)+0x2d>
c0013954:	48                   	dec    eax
c0013955:	eb e7                	jmp    c001393e <CmSplitFinalSlashInPlace(char*)+0x12>
c0013957:	31 c0                	xor    eax,eax
c0013959:	83 c4 08             	add    esp,0x8
c001395c:	5b                   	pop    ebx
c001395d:	c3                   	ret    

c001395e <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001395e:	55                   	push   ebp
c001395f:	57                   	push   edi
c0013960:	56                   	push   esi
c0013961:	53                   	push   ebx
c0013962:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013968:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c001396f:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0013972:	8d 43 01             	lea    eax,[ebx+0x1]
c0013975:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013979:	89 f0                	mov    eax,esi
c001397b:	3c 40                	cmp    al,0x40
c001397d:	75 1b                	jne    c001399a <Reg::findLineFromLoadedData(char*, char*, char*)+0x3c>
c001397f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0013982:	85 c0                	test   eax,eax
c0013984:	74 08                	je     c001398e <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c0013986:	83 f8 3a             	cmp    eax,0x3a
c0013989:	74 03                	je     c001398e <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c001398b:	43                   	inc    ebx
c001398c:	eb f1                	jmp    c001397f <Reg::findLineFromLoadedData(char*, char*, char*)+0x21>
c001398e:	85 c0                	test   eax,eax
c0013990:	0f 84 45 01 00 00    	je     c0013adb <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013996:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013999:	43                   	inc    ebx
c001399a:	50                   	push   eax
c001399b:	6a 40                	push   0x40
c001399d:	6a 00                	push   0x0
c001399f:	8d 44 24 24          	lea    eax,[esp+0x24]
c00139a3:	50                   	push   eax
c00139a4:	e8 47 cb fe ff       	call   c00004f0 <memset>
c00139a9:	89 f1                	mov    ecx,esi
c00139ab:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00139b2:	31 c0                	xor    eax,eax
c00139b4:	83 c4 10             	add    esp,0x10
c00139b7:	0f be f1             	movsx  esi,cl
c00139ba:	0f be 17             	movsx  edx,BYTE PTR [edi]
c00139bd:	85 d2                	test   edx,edx
c00139bf:	89 d1                	mov    ecx,edx
c00139c1:	0f 84 14 01 00 00    	je     c0013adb <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00139c7:	3d c7 00 00 00       	cmp    eax,0xc7
c00139cc:	0f 8f 09 01 00 00    	jg     c0013adb <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00139d2:	83 fa 0a             	cmp    edx,0xa
c00139d5:	0f 85 f1 00 00 00    	jne    c0013acc <Reg::findLineFromLoadedData(char*, char*, char*)+0x16e>
c00139db:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00139e0:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c00139e5:	89 c8                	mov    eax,ecx
c00139e7:	a8 df                	test   al,0xdf
c00139e9:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c00139ee:	83 f9 23             	cmp    ecx,0x23
c00139f1:	0f 94 c2             	sete   dl
c00139f4:	89 d5                	mov    ebp,edx
c00139f6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00139fa:	09 ea                	or     edx,ebp
c00139fc:	80 e2 01             	and    dl,0x1
c00139ff:	75 47                	jne    c0013a48 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013a01:	83 e8 09             	sub    eax,0x9
c0013a04:	3c 01                	cmp    al,0x1
c0013a06:	76 40                	jbe    c0013a48 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013a08:	83 f9 5b             	cmp    ecx,0x5b
c0013a0b:	75 42                	jne    c0013a4f <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0013a0d:	83 fe 40             	cmp    esi,0x40
c0013a10:	75 36                	jne    c0013a48 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013a12:	83 ec 0c             	sub    esp,0xc
c0013a15:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0013a19:	55                   	push   ebp
c0013a1a:	e8 61 cb fe ff       	call   c0000580 <strlen>
c0013a1f:	83 c4 10             	add    esp,0x10
c0013a22:	83 f8 3f             	cmp    eax,0x3f
c0013a25:	0f 87 b0 00 00 00    	ja     c0013adb <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013a2b:	50                   	push   eax
c0013a2c:	50                   	push   eax
c0013a2d:	55                   	push   ebp
c0013a2e:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c0013a32:	55                   	push   ebp
c0013a33:	e8 18 cc fe ff       	call   c0000650 <strcpy>
c0013a38:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013a3b:	e8 40 cb fe ff       	call   c0000580 <strlen>
c0013a40:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0013a45:	83 c4 10             	add    esp,0x10
c0013a48:	31 d2                	xor    edx,edx
c0013a4a:	e9 84 00 00 00       	jmp    c0013ad3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x175>
c0013a4f:	83 fe 40             	cmp    esi,0x40
c0013a52:	74 06                	je     c0013a5a <Reg::findLineFromLoadedData(char*, char*, char*)+0xfc>
c0013a54:	8d 54 24 58          	lea    edx,[esp+0x58]
c0013a58:	eb 19                	jmp    c0013a73 <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0013a5a:	51                   	push   ecx
c0013a5b:	51                   	push   ecx
c0013a5c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013a60:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013a64:	50                   	push   eax
c0013a65:	e8 16 cd fe ff       	call   c0000780 <strcmp>
c0013a6a:	83 c4 10             	add    esp,0x10
c0013a6d:	85 c0                	test   eax,eax
c0013a6f:	75 d7                	jne    c0013a48 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013a71:	eb e1                	jmp    c0013a54 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf6>
c0013a73:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c0013a76:	85 c9                	test   ecx,ecx
c0013a78:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013a7d:	83 f9 3d             	cmp    ecx,0x3d
c0013a80:	0f 94 c0             	sete   al
c0013a83:	89 c5                	mov    ebp,eax
c0013a85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a89:	09 e8                	or     eax,ebp
c0013a8b:	a8 01                	test   al,0x1
c0013a8d:	89 c5                	mov    ebp,eax
c0013a8f:	75 03                	jne    c0013a94 <Reg::findLineFromLoadedData(char*, char*, char*)+0x136>
c0013a91:	42                   	inc    edx
c0013a92:	eb df                	jmp    c0013a73 <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0013a94:	85 c9                	test   ecx,ecx
c0013a96:	74 43                	je     c0013adb <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013a98:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013a9c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0013a9f:	52                   	push   edx
c0013aa0:	52                   	push   edx
c0013aa1:	8d 44 24 60          	lea    eax,[esp+0x60]
c0013aa5:	50                   	push   eax
c0013aa6:	53                   	push   ebx
c0013aa7:	e8 d4 cc fe ff       	call   c0000780 <strcmp>
c0013aac:	83 c4 10             	add    esp,0x10
c0013aaf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013ab3:	85 c0                	test   eax,eax
c0013ab5:	75 91                	jne    c0013a48 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013ab7:	50                   	push   eax
c0013ab8:	42                   	inc    edx
c0013ab9:	50                   	push   eax
c0013aba:	52                   	push   edx
c0013abb:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0013ac2:	e8 89 cb fe ff       	call   c0000650 <strcpy>
c0013ac7:	83 c4 10             	add    esp,0x10
c0013aca:	eb 11                	jmp    c0013add <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c0013acc:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0013ad0:	8d 50 01             	lea    edx,[eax+0x1]
c0013ad3:	47                   	inc    edi
c0013ad4:	89 d0                	mov    eax,edx
c0013ad6:	e9 df fe ff ff       	jmp    c00139ba <Reg::findLineFromLoadedData(char*, char*, char*)+0x5c>
c0013adb:	31 ed                	xor    ebp,ebp
c0013add:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013ae3:	89 e8                	mov    eax,ebp
c0013ae5:	5b                   	pop    ebx
c0013ae6:	5e                   	pop    esi
c0013ae7:	5f                   	pop    edi
c0013ae8:	5d                   	pop    ebp
c0013ae9:	c3                   	ret    

c0013aea <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0013aea:	57                   	push   edi
c0013aeb:	56                   	push   esi
c0013aec:	53                   	push   ebx
c0013aed:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013af3:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0013afa:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0013b01:	53                   	push   ebx
c0013b02:	e8 79 ca fe ff       	call   c0000580 <strlen>
c0013b07:	89 34 24             	mov    DWORD PTR [esp],esi
c0013b0a:	89 c7                	mov    edi,eax
c0013b0c:	e8 6f ca fe ff       	call   c0000580 <strlen>
c0013b11:	83 c4 10             	add    esp,0x10
c0013b14:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0013b18:	3d ff 00 00 00       	cmp    eax,0xff
c0013b1d:	0f 87 d3 00 00 00    	ja     c0013bf6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013b23:	57                   	push   edi
c0013b24:	57                   	push   edi
c0013b25:	56                   	push   esi
c0013b26:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013b2a:	56                   	push   esi
c0013b2b:	e8 20 cb fe ff       	call   c0000650 <strcpy>
c0013b30:	58                   	pop    eax
c0013b31:	5a                   	pop    edx
c0013b32:	68 a3 29 02 c0       	push   0xc00229a3
c0013b37:	56                   	push   esi
c0013b38:	e8 33 cd fe ff       	call   c0000870 <strcat>
c0013b3d:	59                   	pop    ecx
c0013b3e:	5f                   	pop    edi
c0013b3f:	53                   	push   ebx
c0013b40:	56                   	push   esi
c0013b41:	e8 2a cd fe ff       	call   c0000870 <strcat>
c0013b46:	58                   	pop    eax
c0013b47:	5a                   	pop    edx
c0013b48:	68 4f 26 02 c0       	push   0xc002264f
c0013b4d:	56                   	push   esi
c0013b4e:	e8 1d cd fe ff       	call   c0000870 <strcat>
c0013b53:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013b5a:	e8 74 3f ff ff       	call   c0007ad3 <malloc>
c0013b5f:	83 c4 0c             	add    esp,0xc
c0013b62:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0013b68:	56                   	push   esi
c0013b69:	50                   	push   eax
c0013b6a:	89 c3                	mov    ebx,eax
c0013b6c:	e8 25 80 ff ff       	call   c000bb96 <File::File(char const*, Process*)>
c0013b71:	83 c4 10             	add    esp,0x10
c0013b74:	85 db                	test   ebx,ebx
c0013b76:	74 7e                	je     c0013bf6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013b78:	51                   	push   ecx
c0013b79:	51                   	push   ecx
c0013b7a:	6a 01                	push   0x1
c0013b7c:	53                   	push   ebx
c0013b7d:	e8 32 80 ff ff       	call   c000bbb4 <File::open(FileOpenMode)>
c0013b82:	83 c4 10             	add    esp,0x10
c0013b85:	85 c0                	test   eax,eax
c0013b87:	74 08                	je     c0013b91 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0013b89:	83 ec 0c             	sub    esp,0xc
c0013b8c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b8e:	53                   	push   ebx
c0013b8f:	eb 5f                	jmp    c0013bf0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0013b91:	52                   	push   edx
c0013b92:	8d 44 24 17          	lea    eax,[esp+0x17]
c0013b96:	50                   	push   eax
c0013b97:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013b9b:	50                   	push   eax
c0013b9c:	53                   	push   ebx
c0013b9d:	e8 14 83 ff ff       	call   c000beb6 <File::stat(unsigned long long*, bool*)>
c0013ba2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013ba6:	83 c4 10             	add    esp,0x10
c0013ba9:	89 c1                	mov    ecx,eax
c0013bab:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0013baf:	74 31                	je     c0013be2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013bb1:	83 ec 0c             	sub    esp,0xc
c0013bb4:	50                   	push   eax
c0013bb5:	e8 19 3f ff ff       	call   c0007ad3 <malloc>
c0013bba:	89 c6                	mov    esi,eax
c0013bbc:	58                   	pop    eax
c0013bbd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bbf:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013bc3:	52                   	push   edx
c0013bc4:	56                   	push   esi
c0013bc5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013bc9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013bcd:	53                   	push   ebx
c0013bce:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013bd1:	83 c4 20             	add    esp,0x20
c0013bd4:	85 c0                	test   eax,eax
c0013bd6:	75 0a                	jne    c0013be2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013bd8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013bdc:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013be0:	74 18                	je     c0013bfa <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0013be2:	83 ec 0c             	sub    esp,0xc
c0013be5:	53                   	push   ebx
c0013be6:	e8 27 80 ff ff       	call   c000bc12 <File::close()>
c0013beb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013bf0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013bf3:	83 c4 10             	add    esp,0x10
c0013bf6:	31 c0                	xor    eax,eax
c0013bf8:	eb 3b                	jmp    c0013c35 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0013bfa:	83 ec 0c             	sub    esp,0xc
c0013bfd:	53                   	push   ebx
c0013bfe:	e8 0f 80 ff ff       	call   c000bc12 <File::close()>
c0013c03:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c05:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c08:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013c0b:	83 c4 0c             	add    esp,0xc
c0013c0e:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013c15:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013c1c:	56                   	push   esi
c0013c1d:	e8 3c fd ff ff       	call   c001395e <Reg::findLineFromLoadedData(char*, char*, char*)>
c0013c22:	89 34 24             	mov    DWORD PTR [esp],esi
c0013c25:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013c29:	e8 b5 3e ff ff       	call   c0007ae3 <free>
c0013c2e:	83 c4 10             	add    esp,0x10
c0013c31:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013c35:	81 c4 20 01 00 00    	add    esp,0x120
c0013c3b:	5b                   	pop    ebx
c0013c3c:	5e                   	pop    esi
c0013c3d:	5f                   	pop    edi
c0013c3e:	c3                   	ret    

c0013c3f <Reg::getLine(char*, char*, char*)>:
c0013c3f:	57                   	push   edi
c0013c40:	56                   	push   esi
c0013c41:	53                   	push   ebx
c0013c42:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013c46:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013c4a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c4e:	57                   	push   edi
c0013c4f:	56                   	push   esi
c0013c50:	53                   	push   ebx
c0013c51:	68 54 26 02 c0       	push   0xc0022654
c0013c56:	e8 8f fe ff ff       	call   c0013aea <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013c5b:	83 c4 10             	add    esp,0x10
c0013c5e:	84 c0                	test   al,al
c0013c60:	75 10                	jne    c0013c72 <Reg::getLine(char*, char*, char*)+0x33>
c0013c62:	57                   	push   edi
c0013c63:	56                   	push   esi
c0013c64:	53                   	push   ebx
c0013c65:	68 79 26 02 c0       	push   0xc0022679
c0013c6a:	e8 7b fe ff ff       	call   c0013aea <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013c6f:	83 c4 10             	add    esp,0x10
c0013c72:	5b                   	pop    ebx
c0013c73:	5e                   	pop    esi
c0013c74:	5f                   	pop    edi
c0013c75:	c3                   	ret    

c0013c76 <Reg::readInt(char*, char*, int*)>:
c0013c76:	55                   	push   ebp
c0013c77:	57                   	push   edi
c0013c78:	56                   	push   esi
c0013c79:	53                   	push   ebx
c0013c7a:	81 ec f0 00 00 00    	sub    esp,0xf0
c0013c80:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013c84:	55                   	push   ebp
c0013c85:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013c8c:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013c93:	e8 a7 ff ff ff       	call   c0013c3f <Reg::getLine(char*, char*, char*)>
c0013c98:	83 c4 10             	add    esp,0x10
c0013c9b:	84 c0                	test   al,al
c0013c9d:	0f 84 b6 00 00 00    	je     c0013d59 <Reg::readInt(char*, char*, int*)+0xe3>
c0013ca3:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0013ca8:	83 fa 2b             	cmp    edx,0x2b
c0013cab:	74 0c                	je     c0013cb9 <Reg::readInt(char*, char*, int*)+0x43>
c0013cad:	83 fa 2d             	cmp    edx,0x2d
c0013cb0:	75 0e                	jne    c0013cc0 <Reg::readInt(char*, char*, int*)+0x4a>
c0013cb2:	ba 01 00 00 00       	mov    edx,0x1
c0013cb7:	eb 0b                	jmp    c0013cc4 <Reg::readInt(char*, char*, int*)+0x4e>
c0013cb9:	ba 01 00 00 00       	mov    edx,0x1
c0013cbe:	eb 02                	jmp    c0013cc2 <Reg::readInt(char*, char*, int*)+0x4c>
c0013cc0:	31 d2                	xor    edx,edx
c0013cc2:	31 c0                	xor    eax,eax
c0013cc4:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0013cc9:	be 0a 00 00 00       	mov    esi,0xa
c0013cce:	75 21                	jne    c0013cf1 <Reg::readInt(char*, char*, int*)+0x7b>
c0013cd0:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0013cd5:	83 f9 78             	cmp    ecx,0x78
c0013cd8:	75 0a                	jne    c0013ce4 <Reg::readInt(char*, char*, int*)+0x6e>
c0013cda:	83 c2 02             	add    edx,0x2
c0013cdd:	be 10 00 00 00       	mov    esi,0x10
c0013ce2:	eb 0d                	jmp    c0013cf1 <Reg::readInt(char*, char*, int*)+0x7b>
c0013ce4:	83 f9 62             	cmp    ecx,0x62
c0013ce7:	75 08                	jne    c0013cf1 <Reg::readInt(char*, char*, int*)+0x7b>
c0013ce9:	83 c2 02             	add    edx,0x2
c0013cec:	be 02 00 00 00       	mov    esi,0x2
c0013cf1:	01 d5                	add    ebp,edx
c0013cf3:	31 d2                	xor    edx,edx
c0013cf5:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0013cf9:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013cfd:	85 c9                	test   ecx,ecx
c0013cff:	0f 94 c3             	sete   bl
c0013d02:	83 f9 0d             	cmp    ecx,0xd
c0013d05:	89 df                	mov    edi,ebx
c0013d07:	0f 94 c3             	sete   bl
c0013d0a:	09 df                	or     edi,ebx
c0013d0c:	89 fb                	mov    ebx,edi
c0013d0e:	83 e7 01             	and    edi,0x1
c0013d11:	75 35                	jne    c0013d48 <Reg::readInt(char*, char*, int*)+0xd2>
c0013d13:	0f af d6             	imul   edx,esi
c0013d16:	83 fe 10             	cmp    esi,0x10
c0013d19:	75 26                	jne    c0013d41 <Reg::readInt(char*, char*, int*)+0xcb>
c0013d1b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013d1f:	83 ef 41             	sub    edi,0x41
c0013d22:	89 fb                	mov    ebx,edi
c0013d24:	80 fb 05             	cmp    bl,0x5
c0013d27:	77 06                	ja     c0013d2f <Reg::readInt(char*, char*, int*)+0xb9>
c0013d29:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0013d2d:	eb 16                	jmp    c0013d45 <Reg::readInt(char*, char*, int*)+0xcf>
c0013d2f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013d33:	83 eb 61             	sub    ebx,0x61
c0013d36:	80 fb 05             	cmp    bl,0x5
c0013d39:	77 06                	ja     c0013d41 <Reg::readInt(char*, char*, int*)+0xcb>
c0013d3b:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0013d3f:	eb 04                	jmp    c0013d45 <Reg::readInt(char*, char*, int*)+0xcf>
c0013d41:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0013d45:	45                   	inc    ebp
c0013d46:	eb ad                	jmp    c0013cf5 <Reg::readInt(char*, char*, int*)+0x7f>
c0013d48:	84 c0                	test   al,al
c0013d4a:	74 02                	je     c0013d4e <Reg::readInt(char*, char*, int*)+0xd8>
c0013d4c:	f7 da                	neg    edx
c0013d4e:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0013d55:	89 10                	mov    DWORD PTR [eax],edx
c0013d57:	88 d8                	mov    al,bl
c0013d59:	81 c4 ec 00 00 00    	add    esp,0xec
c0013d5f:	5b                   	pop    ebx
c0013d60:	5e                   	pop    esi
c0013d61:	5f                   	pop    edi
c0013d62:	5d                   	pop    ebp
c0013d63:	c3                   	ret    

c0013d64 <Reg::readString(char*, char*, char*, int)>:
c0013d64:	57                   	push   edi
c0013d65:	56                   	push   esi
c0013d66:	53                   	push   ebx
c0013d67:	81 ec d4 00 00 00    	sub    esp,0xd4
c0013d6d:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013d71:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013d78:	57                   	push   edi
c0013d79:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013d80:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013d87:	e8 b3 fe ff ff       	call   c0013c3f <Reg::getLine(char*, char*, char*)>
c0013d8c:	83 c4 10             	add    esp,0x10
c0013d8f:	84 c0                	test   al,al
c0013d91:	89 c6                	mov    esi,eax
c0013d93:	74 44                	je     c0013dd9 <Reg::readString(char*, char*, char*, int)+0x75>
c0013d95:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013d9c:	31 c0                	xor    eax,eax
c0013d9e:	4a                   	dec    edx
c0013d9f:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0013da2:	84 c9                	test   cl,cl
c0013da4:	74 0f                	je     c0013db5 <Reg::readString(char*, char*, char*, int)+0x51>
c0013da6:	39 c2                	cmp    edx,eax
c0013da8:	7e 0b                	jle    c0013db5 <Reg::readString(char*, char*, char*, int)+0x51>
c0013daa:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0013dad:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0013db2:	40                   	inc    eax
c0013db3:	eb ea                	jmp    c0013d9f <Reg::readString(char*, char*, char*, int)+0x3b>
c0013db5:	83 ec 0c             	sub    esp,0xc
c0013db8:	53                   	push   ebx
c0013db9:	e8 c2 c7 fe ff       	call   c0000580 <strlen>
c0013dbe:	83 c4 10             	add    esp,0x10
c0013dc1:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0013dc6:	75 11                	jne    c0013dd9 <Reg::readString(char*, char*, char*, int)+0x75>
c0013dc8:	83 ec 0c             	sub    esp,0xc
c0013dcb:	53                   	push   ebx
c0013dcc:	e8 af c7 fe ff       	call   c0000580 <strlen>
c0013dd1:	83 c4 10             	add    esp,0x10
c0013dd4:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013dd9:	81 c4 d0 00 00 00    	add    esp,0xd0
c0013ddf:	89 f0                	mov    eax,esi
c0013de1:	5b                   	pop    ebx
c0013de2:	5e                   	pop    esi
c0013de3:	5f                   	pop    edi
c0013de4:	c3                   	ret    

c0013de5 <Reg::readBool(char*, char*, bool*)>:
c0013de5:	83 ec 20             	sub    esp,0x20
c0013de8:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013dec:	50                   	push   eax
c0013ded:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013df1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013df5:	e8 7c fe ff ff       	call   c0013c76 <Reg::readInt(char*, char*, int*)>
c0013dfa:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013dfe:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013e03:	0f 95 02             	setne  BYTE PTR [edx]
c0013e06:	83 c4 2c             	add    esp,0x2c
c0013e09:	c3                   	ret    

c0013e0a <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013e0a:	53                   	push   ebx
c0013e0b:	83 ec 1c             	sub    esp,0x1c
c0013e0e:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013e12:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013e16:	50                   	push   eax
c0013e17:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e1f:	e8 c1 ff ff ff       	call   c0013de5 <Reg::readBool(char*, char*, bool*)>
c0013e24:	83 c4 10             	add    esp,0x10
c0013e27:	84 c0                	test   al,al
c0013e29:	74 04                	je     c0013e2f <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013e2b:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013e2f:	83 c4 18             	add    esp,0x18
c0013e32:	88 d8                	mov    al,bl
c0013e34:	5b                   	pop    ebx
c0013e35:	c3                   	ret    

c0013e36 <Reg::readIntWithDefault(char*, char*, int)>:
c0013e36:	53                   	push   ebx
c0013e37:	83 ec 1c             	sub    esp,0x1c
c0013e3a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013e3e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013e42:	50                   	push   eax
c0013e43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e4b:	e8 26 fe ff ff       	call   c0013c76 <Reg::readInt(char*, char*, int*)>
c0013e50:	83 c4 10             	add    esp,0x10
c0013e53:	84 c0                	test   al,al
c0013e55:	74 04                	je     c0013e5b <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013e57:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013e5b:	83 c4 18             	add    esp,0x18
c0013e5e:	89 d8                	mov    eax,ebx
c0013e60:	5b                   	pop    ebx
c0013e61:	c3                   	ret    

c0013e62 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0013e62:	57                   	push   edi
c0013e63:	56                   	push   esi
c0013e64:	53                   	push   ebx
c0013e65:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013e69:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e6d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013e71:	56                   	push   esi
c0013e72:	57                   	push   edi
c0013e73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e77:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e7b:	e8 e4 fe ff ff       	call   c0013d64 <Reg::readString(char*, char*, char*, int)>
c0013e80:	83 c4 10             	add    esp,0x10
c0013e83:	84 c0                	test   al,al
c0013e85:	75 16                	jne    c0013e9d <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013e87:	50                   	push   eax
c0013e88:	56                   	push   esi
c0013e89:	6a 00                	push   0x0
c0013e8b:	57                   	push   edi
c0013e8c:	e8 5f c6 fe ff       	call   c00004f0 <memset>
c0013e91:	8d 4e ff             	lea    ecx,[esi-0x1]
c0013e94:	89 de                	mov    esi,ebx
c0013e96:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013e98:	83 c4 10             	add    esp,0x10
c0013e9b:	89 df                	mov    edi,ebx
c0013e9d:	5b                   	pop    ebx
c0013e9e:	89 f8                	mov    eax,edi
c0013ea0:	5e                   	pop    esi
c0013ea1:	5f                   	pop    edi
c0013ea2:	c3                   	ret    

c0013ea3 <SysEject(regs*)>:
c0013ea3:	83 ec 0c             	sub    esp,0xc
c0013ea6:	83 ca ff             	or     edx,0xffffffff
c0013ea9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ead:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013eb0:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013eb5:	83 e9 41             	sub    ecx,0x41
c0013eb8:	83 f9 19             	cmp    ecx,0x19
c0013ebb:	77 18                	ja     c0013ed5 <SysEject(regs*)+0x32>
c0013ebd:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0013ec4:	85 c9                	test   ecx,ecx
c0013ec6:	74 0d                	je     c0013ed5 <SysEject(regs*)+0x32>
c0013ec8:	83 ec 0c             	sub    esp,0xc
c0013ecb:	51                   	push   ecx
c0013ecc:	e8 c3 9e ff ff       	call   c000dd94 <LogicalDisk::eject()>
c0013ed1:	83 c4 10             	add    esp,0x10
c0013ed4:	99                   	cdq    
c0013ed5:	83 c4 0c             	add    esp,0xc
c0013ed8:	c3                   	ret    

c0013ed9 <SysExit(regs*)>:
c0013ed9:	83 ec 18             	sub    esp,0x18
c0013edc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ee0:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013ee3:	e8 3c 2b 00 00       	call   c0016a24 <terminateTask(int)>
c0013ee8:	83 c8 ff             	or     eax,0xffffffff
c0013eeb:	83 c4 1c             	add    esp,0x1c
c0013eee:	89 c2                	mov    edx,eax
c0013ef0:	c3                   	ret    

c0013ef1 <SysGetCwd(regs*)>:
c0013ef1:	83 ec 10             	sub    esp,0x10
c0013ef4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ef8:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013efb:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013efe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f03:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013f06:	e8 3b 79 ff ff       	call   c000b846 <Fs::getcwd(Process*, char*, int)>
c0013f0b:	83 c4 1c             	add    esp,0x1c
c0013f0e:	99                   	cdq    
c0013f0f:	c3                   	ret    

c0013f10 <SysGetPID(regs*)>:
c0013f10:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f15:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013f18:	8b 00                	mov    eax,DWORD PTR [eax]
c0013f1a:	99                   	cdq    
c0013f1b:	c3                   	ret    

c0013f1c <SysGetRAMData(regs*)>:
c0013f1c:	69 05 e4 6e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0026ee4,0xc8
c0013f26:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0013f2c:	99                   	cdq    
c0013f2d:	f7 f9                	idiv   ecx
c0013f2f:	c1 e0 18             	shl    eax,0x18
c0013f32:	09 c8                	or     eax,ecx
c0013f34:	99                   	cdq    
c0013f35:	c3                   	ret    

c0013f36 <SysGetVGAPtr(regs*)>:
c0013f36:	55                   	push   ebp
c0013f37:	57                   	push   edi
c0013f38:	56                   	push   esi
c0013f39:	53                   	push   ebx
c0013f3a:	83 ec 18             	sub    esp,0x18
c0013f3d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013f41:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013f44:	e8 a7 25 00 00       	call   c00164f0 <Thr::processFromPID(int)>
c0013f49:	83 c4 10             	add    esp,0x10
c0013f4c:	89 c1                	mov    ecx,eax
c0013f4e:	b8 01 00 00 00       	mov    eax,0x1
c0013f53:	85 c9                	test   ecx,ecx
c0013f55:	74 57                	je     c0013fae <SysGetVGAPtr(regs*)+0x78>
c0013f57:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013f5b:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013f61:	74 0c                	je     c0013f6f <SysGetVGAPtr(regs*)+0x39>
c0013f63:	83 ec 0c             	sub    esp,0xc
c0013f66:	55                   	push   ebp
c0013f67:	e8 03 48 ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0013f6c:	83 c4 10             	add    esp,0x10
c0013f6f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013f72:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013f77:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013f7a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013f7c:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013f7f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013f82:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013f88:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013f8b:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013f8e:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013f94:	50                   	push   eax
c0013f95:	50                   	push   eax
c0013f96:	68 94 26 02 c0       	push   0xc0022694
c0013f9b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013f9e:	05 a8 0f 00 00       	add    eax,0xfa8
c0013fa3:	50                   	push   eax
c0013fa4:	e8 a7 c6 fe ff       	call   c0000650 <strcpy>
c0013fa9:	83 c4 10             	add    esp,0x10
c0013fac:	31 c0                	xor    eax,eax
c0013fae:	83 c4 0c             	add    esp,0xc
c0013fb1:	31 d2                	xor    edx,edx
c0013fb3:	5b                   	pop    ebx
c0013fb4:	5e                   	pop    esi
c0013fb5:	5f                   	pop    edi
c0013fb6:	5d                   	pop    ebp
c0013fb7:	c3                   	ret    

c0013fb8 <SysKill(regs*)>:
c0013fb8:	53                   	push   ebx
c0013fb9:	83 ec 08             	sub    esp,0x8
c0013fbc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013fc0:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013fc4:	75 16                	jne    c0013fdc <SysKill(regs*)+0x24>
c0013fc6:	83 ec 0c             	sub    esp,0xc
c0013fc9:	68 9e 26 02 c0       	push   0xc002269e
c0013fce:	e8 08 d6 ff ff       	call   c00115db <KePanic(char const*)>
c0013fd3:	83 c4 10             	add    esp,0x10
c0013fd6:	e9 89 00 00 00       	jmp    c0014064 <SysKill(regs*)+0xac>
c0013fdb:	90                   	nop
c0013fdc:	83 ec 0c             	sub    esp,0xc
c0013fdf:	68 e4 c6 02 c0       	push   0xc002c6e4
c0013fe4:	e8 63 bd 00 00       	call   c001fd4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013fe9:	8d 76 00             	lea    esi,[esi+0x0]
c0013fec:	83 c4 10             	add    esp,0x10
c0013fef:	85 c0                	test   eax,eax
c0013ff1:	74 19                	je     c001400c <SysKill(regs*)+0x54>
c0013ff3:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013ff6:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013ff9:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013ffb:	74 33                	je     c0014030 <SysKill(regs*)+0x78>
c0013ffd:	52                   	push   edx
c0013ffe:	52                   	push   edx
c0013fff:	50                   	push   eax
c0014000:	68 e4 c6 02 c0       	push   0xc002c6e4
c0014005:	e8 62 c0 00 00       	call   c002006c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001400a:	eb e0                	jmp    c0013fec <SysKill(regs*)+0x34>
c001400c:	83 ec 0c             	sub    esp,0xc
c001400f:	68 d8 c6 02 c0       	push   0xc002c6d8
c0014014:	e8 33 bd 00 00       	call   c001fd4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014019:	8d 76 00             	lea    esi,[esi+0x0]
c001401c:	83 c4 10             	add    esp,0x10
c001401f:	85 c0                	test   eax,eax
c0014021:	74 41                	je     c0014064 <SysKill(regs*)+0xac>
c0014023:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0014026:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014029:	39 0a                	cmp    DWORD PTR [edx],ecx
c001402b:	75 27                	jne    c0014054 <SysKill(regs*)+0x9c>
c001402d:	8d 76 00             	lea    esi,[esi+0x0]
c0014030:	51                   	push   ecx
c0014031:	51                   	push   ecx
c0014032:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014035:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001403a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001403d:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0014043:	e8 2f da ff ff       	call   c0011a77 <KeRaiseSignal(SigHandlerBlock*, int)>
c0014048:	83 c4 10             	add    esp,0x10
c001404b:	31 c0                	xor    eax,eax
c001404d:	31 d2                	xor    edx,edx
c001404f:	eb 1b                	jmp    c001406c <SysKill(regs*)+0xb4>
c0014051:	8d 76 00             	lea    esi,[esi+0x0]
c0014054:	52                   	push   edx
c0014055:	52                   	push   edx
c0014056:	50                   	push   eax
c0014057:	68 d8 c6 02 c0       	push   0xc002c6d8
c001405c:	e8 0b c0 00 00       	call   c002006c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014061:	eb b9                	jmp    c001401c <SysKill(regs*)+0x64>
c0014063:	90                   	nop
c0014064:	83 c8 ff             	or     eax,0xffffffff
c0014067:	89 c2                	mov    edx,eax
c0014069:	8d 76 00             	lea    esi,[esi+0x0]
c001406c:	83 c4 08             	add    esp,0x8
c001406f:	5b                   	pop    ebx
c0014070:	c3                   	ret    

c0014071 <SysLoadDLL(regs*)>:
c0014071:	56                   	push   esi
c0014072:	31 d2                	xor    edx,edx
c0014074:	53                   	push   ebx
c0014075:	b8 01 00 00 00       	mov    eax,0x1
c001407a:	51                   	push   ecx
c001407b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001407f:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0014083:	0f 84 8c 00 00 00    	je     c0014115 <SysLoadDLL(regs*)+0xa4>
c0014089:	83 ec 0c             	sub    esp,0xc
c001408c:	68 14 01 00 00       	push   0x114
c0014091:	e8 3d 3a ff ff       	call   c0007ad3 <malloc>
c0014096:	83 c4 0c             	add    esp,0xc
c0014099:	89 c3                	mov    ebx,eax
c001409b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140a0:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00140a3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00140a6:	53                   	push   ebx
c00140a7:	e8 ea 7a ff ff       	call   c000bb96 <File::File(char const*, Process*)>
c00140ac:	83 c4 10             	add    esp,0x10
c00140af:	31 d2                	xor    edx,edx
c00140b1:	85 db                	test   ebx,ebx
c00140b3:	b8 02 00 00 00       	mov    eax,0x2
c00140b8:	74 5b                	je     c0014115 <SysLoadDLL(regs*)+0xa4>
c00140ba:	83 ec 0c             	sub    esp,0xc
c00140bd:	53                   	push   ebx
c00140be:	e8 b5 7d ff ff       	call   c000be78 <File::exists()>
c00140c3:	83 c4 10             	add    esp,0x10
c00140c6:	84 c0                	test   al,al
c00140c8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00140ca:	75 11                	jne    c00140dd <SysLoadDLL(regs*)+0x6c>
c00140cc:	83 ec 0c             	sub    esp,0xc
c00140cf:	53                   	push   ebx
c00140d0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00140d3:	83 c4 10             	add    esp,0x10
c00140d6:	b8 03 00 00 00       	mov    eax,0x3
c00140db:	eb 36                	jmp    c0014113 <SysLoadDLL(regs*)+0xa2>
c00140dd:	83 ec 0c             	sub    esp,0xc
c00140e0:	53                   	push   ebx
c00140e1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00140e4:	58                   	pop    eax
c00140e5:	5a                   	pop    edx
c00140e6:	6a 00                	push   0x0
c00140e8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00140eb:	e8 49 15 00 00       	call   c0015639 <Thr::loadDLL(char const*, bool)>
c00140f0:	83 c4 10             	add    esp,0x10
c00140f3:	31 d2                	xor    edx,edx
c00140f5:	89 c1                	mov    ecx,eax
c00140f7:	b8 04 00 00 00       	mov    eax,0x4
c00140fc:	85 c9                	test   ecx,ecx
c00140fe:	74 15                	je     c0014115 <SysLoadDLL(regs*)+0xa4>
c0014100:	53                   	push   ebx
c0014101:	53                   	push   ebx
c0014102:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0014108:	51                   	push   ecx
c0014109:	e8 6b 17 00 00       	call   c0015879 <Thr::executeDLL(unsigned long, void*)>
c001410e:	83 c4 10             	add    esp,0x10
c0014111:	31 c0                	xor    eax,eax
c0014113:	31 d2                	xor    edx,edx
c0014115:	59                   	pop    ecx
c0014116:	5b                   	pop    ebx
c0014117:	5e                   	pop    esi
c0014118:	c3                   	ret    

c0014119 <SysRead(regs*)>:
c0014119:	57                   	push   edi
c001411a:	56                   	push   esi
c001411b:	53                   	push   ebx
c001411c:	83 ec 10             	sub    esp,0x10
c001411f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014123:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014126:	83 f8 02             	cmp    eax,0x2
c0014129:	77 10                	ja     c001413b <SysRead(regs*)+0x22>
c001412b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014130:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014133:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0014139:	eb 0e                	jmp    c0014149 <SysRead(regs*)+0x30>
c001413b:	83 ec 0c             	sub    esp,0xc
c001413e:	50                   	push   eax
c001413f:	e8 57 53 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0014144:	83 c4 10             	add    esp,0x10
c0014147:	89 c1                	mov    ecx,eax
c0014149:	83 c8 ff             	or     eax,0xffffffff
c001414c:	85 c9                	test   ecx,ecx
c001414e:	89 c2                	mov    edx,eax
c0014150:	74 28                	je     c001417a <SysRead(regs*)+0x61>
c0014152:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001415a:	83 ec 0c             	sub    esp,0xc
c001415d:	31 ff                	xor    edi,edi
c001415f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014163:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014165:	52                   	push   edx
c0014166:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014169:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001416c:	57                   	push   edi
c001416d:	56                   	push   esi
c001416e:	51                   	push   ecx
c001416f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014172:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014176:	83 c4 20             	add    esp,0x20
c0014179:	99                   	cdq    
c001417a:	83 c4 10             	add    esp,0x10
c001417d:	5b                   	pop    ebx
c001417e:	5e                   	pop    esi
c001417f:	5f                   	pop    edi
c0014180:	c3                   	ret    

c0014181 <SysRegisterSignal(regs*)>:
c0014181:	83 ec 18             	sub    esp,0x18
c0014184:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014188:	6a 00                	push   0x0
c001418a:	6a 00                	push   0x0
c001418c:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001418f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014192:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014197:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001419a:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00141a0:	e8 9c d8 ff ff       	call   c0011a41 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c00141a5:	83 c4 2c             	add    esp,0x2c
c00141a8:	99                   	cdq    
c00141a9:	c3                   	ret    

c00141aa <SysRegistryGetTypeFromPath(regs*)>:
c00141aa:	57                   	push   edi
c00141ab:	56                   	push   esi
c00141ac:	53                   	push   ebx
c00141ad:	81 ec 38 01 00 00    	sub    esp,0x138
c00141b3:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c00141ba:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00141bd:	68 bf 26 02 c0       	push   0xc00226bf
c00141c2:	e8 43 67 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00141c7:	5a                   	pop    edx
c00141c8:	59                   	pop    ecx
c00141c9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00141cc:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00141cf:	e8 34 f6 ff ff       	call   c0013808 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00141d4:	5f                   	pop    edi
c00141d5:	5a                   	pop    edx
c00141d6:	89 c6                	mov    esi,eax
c00141d8:	50                   	push   eax
c00141d9:	68 df 26 02 c0       	push   0xc00226df
c00141de:	e8 27 67 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00141e3:	83 c4 10             	add    esp,0x10
c00141e6:	85 f6                	test   esi,esi
c00141e8:	74 28                	je     c0014212 <SysRegistryGetTypeFromPath(regs*)+0x68>
c00141ea:	50                   	push   eax
c00141eb:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00141ef:	57                   	push   edi
c00141f0:	56                   	push   esi
c00141f1:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00141f4:	e8 f4 f1 ff ff       	call   c00133ed <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00141f9:	83 c4 0c             	add    esp,0xc
c00141fc:	57                   	push   edi
c00141fd:	50                   	push   eax
c00141fe:	89 c3                	mov    ebx,eax
c0014200:	68 e7 26 02 c0       	push   0xc00226e7
c0014205:	e8 00 67 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001420a:	89 d8                	mov    eax,ebx
c001420c:	83 c4 10             	add    esp,0x10
c001420f:	99                   	cdq    
c0014210:	eb 05                	jmp    c0014217 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0014212:	83 c8 ff             	or     eax,0xffffffff
c0014215:	89 c2                	mov    edx,eax
c0014217:	81 c4 30 01 00 00    	add    esp,0x130
c001421d:	5b                   	pop    ebx
c001421e:	5e                   	pop    esi
c001421f:	5f                   	pop    edi
c0014220:	c3                   	ret    

c0014221 <SysRegistryReadExtent(regs*)>:
c0014221:	83 ec 1c             	sub    esp,0x1c
c0014224:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014228:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001422b:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001422e:	85 c0                	test   eax,eax
c0014230:	79 1f                	jns    c0014251 <SysRegistryReadExtent(regs*)+0x30>
c0014232:	52                   	push   edx
c0014233:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0014238:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001423c:	52                   	push   edx
c001423d:	50                   	push   eax
c001423e:	51                   	push   ecx
c001423f:	e8 9b f0 ff ff       	call   c00132df <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014244:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014248:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001424c:	83 c4 10             	add    esp,0x10
c001424f:	eb 14                	jmp    c0014265 <SysRegistryReadExtent(regs*)+0x44>
c0014251:	83 ec 04             	sub    esp,0x4
c0014254:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0014257:	50                   	push   eax
c0014258:	51                   	push   ecx
c0014259:	e8 1f eb ff ff       	call   c0012d7d <CmGetString(Reghive_Tag*, int, char*)>
c001425e:	83 c4 10             	add    esp,0x10
c0014261:	31 c0                	xor    eax,eax
c0014263:	31 d2                	xor    edx,edx
c0014265:	83 c4 1c             	add    esp,0x1c
c0014268:	c3                   	ret    

c0014269 <SysRegistryPathToExtentLookup(regs*)>:
c0014269:	53                   	push   ebx
c001426a:	83 ec 10             	sub    esp,0x10
c001426d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014271:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014274:	68 fd 26 02 c0       	push   0xc00226fd
c0014279:	e8 8c 66 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001427e:	58                   	pop    eax
c001427f:	5a                   	pop    edx
c0014280:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014283:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014286:	e8 7d f5 ff ff       	call   c0013808 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001428b:	83 c4 18             	add    esp,0x18
c001428e:	5b                   	pop    ebx
c001428f:	99                   	cdq    
c0014290:	c3                   	ret    

c0014291 <SysRegistryEnterDirectory(regs*)>:
c0014291:	53                   	push   ebx
c0014292:	83 ec 10             	sub    esp,0x10
c0014295:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014299:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001429c:	68 20 27 02 c0       	push   0xc0022720
c00142a1:	e8 64 66 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00142a6:	58                   	pop    eax
c00142a7:	5a                   	pop    edx
c00142a8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00142ab:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00142ae:	e8 41 eb ff ff       	call   c0012df4 <CmEnterDirectory(Reghive_Tag*, int)>
c00142b3:	83 c4 18             	add    esp,0x18
c00142b6:	5b                   	pop    ebx
c00142b7:	99                   	cdq    
c00142b8:	c3                   	ret    

c00142b9 <SysRegistryGetNext(regs*)>:
c00142b9:	53                   	push   ebx
c00142ba:	83 ec 10             	sub    esp,0x10
c00142bd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00142c1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00142c4:	68 3e 27 02 c0       	push   0xc002273e
c00142c9:	e8 3c 66 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00142ce:	58                   	pop    eax
c00142cf:	5a                   	pop    edx
c00142d0:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00142d3:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00142d6:	e8 58 eb ff ff       	call   c0012e33 <CmGetNext(Reghive_Tag*, int)>
c00142db:	83 c4 18             	add    esp,0x18
c00142de:	5b                   	pop    ebx
c00142df:	99                   	cdq    
c00142e0:	c3                   	ret    

c00142e1 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c00142e1:	57                   	push   edi
c00142e2:	56                   	push   esi
c00142e3:	53                   	push   ebx
c00142e4:	81 ec 34 01 00 00    	sub    esp,0x134
c00142ea:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00142f1:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00142f5:	57                   	push   edi
c00142f6:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00142f9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00142fc:	e8 ec f0 ff ff       	call   c00133ed <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014301:	89 c3                	mov    ebx,eax
c0014303:	58                   	pop    eax
c0014304:	5a                   	pop    edx
c0014305:	57                   	push   edi
c0014306:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014309:	e8 42 c3 fe ff       	call   c0000650 <strcpy>
c001430e:	81 c4 40 01 00 00    	add    esp,0x140
c0014314:	89 d8                	mov    eax,ebx
c0014316:	5b                   	pop    ebx
c0014317:	99                   	cdq    
c0014318:	5e                   	pop    esi
c0014319:	5f                   	pop    edi
c001431a:	c3                   	ret    

c001431b <SysRegistryOpen(regs*)>:
c001431b:	83 ec 18             	sub    esp,0x18
c001431e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014322:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014325:	e8 e3 e8 ff ff       	call   c0012c0d <CmOpen(char const*)>
c001432a:	83 c4 1c             	add    esp,0x1c
c001432d:	99                   	cdq    
c001432e:	c3                   	ret    

c001432f <SysRegistryClose(regs*)>:
c001432f:	83 ec 18             	sub    esp,0x18
c0014332:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014336:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014339:	e8 ed e9 ff ff       	call   c0012d2b <CmClose(Reghive_Tag*)>
c001433e:	31 c0                	xor    eax,eax
c0014340:	31 d2                	xor    edx,edx
c0014342:	83 c4 1c             	add    esp,0x1c
c0014345:	c3                   	ret    

c0014346 <SysSbrk(regs*)>:
c0014346:	56                   	push   esi
c0014347:	53                   	push   ebx
c0014348:	50                   	push   eax
c0014349:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001434e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014352:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014355:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0014358:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c001435e:	85 db                	test   ebx,ebx
c0014360:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0014363:	74 02                	je     c0014367 <SysSbrk(regs*)+0x21>
c0014365:	79 06                	jns    c001436d <SysSbrk(regs*)+0x27>
c0014367:	89 f0                	mov    eax,esi
c0014369:	31 d2                	xor    edx,edx
c001436b:	eb 2a                	jmp    c0014397 <SysSbrk(regs*)+0x51>
c001436d:	83 c8 ff             	or     eax,0xffffffff
c0014370:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0014376:	89 c2                	mov    edx,eax
c0014378:	77 1d                	ja     c0014397 <SysSbrk(regs*)+0x51>
c001437a:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0014380:	50                   	push   eax
c0014381:	68 07 0c 00 00       	push   0xc07
c0014386:	c1 ea 0c             	shr    edx,0xc
c0014389:	52                   	push   edx
c001438a:	51                   	push   ecx
c001438b:	e8 76 5a ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c0014390:	89 f0                	mov    eax,esi
c0014392:	31 d2                	xor    edx,edx
c0014394:	83 c4 10             	add    esp,0x10
c0014397:	59                   	pop    ecx
c0014398:	5b                   	pop    ebx
c0014399:	5e                   	pop    esi
c001439a:	c3                   	ret    

c001439b <SysSetCwd(regs*)>:
c001439b:	83 ec 14             	sub    esp,0x14
c001439e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00143a2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00143a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143aa:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00143ad:	e8 65 7b ff ff       	call   c000bf17 <Fs::setcwd(Process*, char*)>
c00143b2:	83 c4 1c             	add    esp,0x1c
c00143b5:	99                   	cdq    
c00143b6:	c3                   	ret    

c00143b7 <SysSetTime(regs*)>:
c00143b7:	55                   	push   ebp
c00143b8:	31 c9                	xor    ecx,ecx
c00143ba:	57                   	push   edi
c00143bb:	bd 0c 00 00 00       	mov    ebp,0xc
c00143c0:	56                   	push   esi
c00143c1:	53                   	push   ebx
c00143c2:	31 db                	xor    ebx,ebx
c00143c4:	83 ec 10             	sub    esp,0x10
c00143c7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00143cb:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00143ce:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00143d1:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c00143d4:	89 c2                	mov    edx,eax
c00143d6:	c1 e8 05             	shr    eax,0x5
c00143d9:	83 e2 1f             	and    edx,0x1f
c00143dc:	42                   	inc    edx
c00143dd:	81 ef 6c 07 00 00    	sub    edi,0x76c
c00143e3:	c1 e7 10             	shl    edi,0x10
c00143e6:	88 d1                	mov    cl,dl
c00143e8:	31 d2                	xor    edx,edx
c00143ea:	f7 f5                	div    ebp
c00143ec:	89 dd                	mov    ebp,ebx
c00143ee:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00143f4:	88 d5                	mov    ch,dl
c00143f6:	31 d2                	xor    edx,edx
c00143f8:	0f b7 c1             	movzx  eax,cx
c00143fb:	09 f8                	or     eax,edi
c00143fd:	bf 3c 00 00 00       	mov    edi,0x3c
c0014402:	89 c1                	mov    ecx,eax
c0014404:	89 f0                	mov    eax,esi
c0014406:	f7 f7                	div    edi
c0014408:	c1 e2 10             	shl    edx,0x10
c001440b:	09 d5                	or     ebp,edx
c001440d:	31 d2                	xor    edx,edx
c001440f:	f7 f7                	div    edi
c0014411:	89 eb                	mov    ebx,ebp
c0014413:	bf 10 0e 00 00       	mov    edi,0xe10
c0014418:	89 f0                	mov    eax,esi
c001441a:	88 d7                	mov    bh,dl
c001441c:	31 d2                	xor    edx,edx
c001441e:	f7 f7                	div    edi
c0014420:	bf 18 00 00 00       	mov    edi,0x18
c0014425:	31 d2                	xor    edx,edx
c0014427:	f7 f7                	div    edi
c0014429:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001442e:	88 d3                	mov    bl,dl
c0014430:	53                   	push   ebx
c0014431:	51                   	push   ecx
c0014432:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0014438:	e8 eb 82 ff ff       	call   c000c728 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001443d:	83 c4 1c             	add    esp,0x1c
c0014440:	31 d2                	xor    edx,edx
c0014442:	5b                   	pop    ebx
c0014443:	5e                   	pop    esi
c0014444:	83 f0 01             	xor    eax,0x1
c0014447:	5f                   	pop    edi
c0014448:	0f b6 c0             	movzx  eax,al
c001444b:	5d                   	pop    ebp
c001444c:	c3                   	ret    

c001444d <SysSymlink(regs*)>:
c001444d:	53                   	push   ebx
c001444e:	83 c8 ff             	or     eax,0xffffffff
c0014451:	83 ec 08             	sub    esp,0x8
c0014454:	89 c2                	mov    edx,eax
c0014456:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001445a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001445d:	85 c9                	test   ecx,ecx
c001445f:	74 14                	je     c0014475 <SysSymlink(regs*)+0x28>
c0014461:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0014464:	85 db                	test   ebx,ebx
c0014466:	74 0d                	je     c0014475 <SysSymlink(regs*)+0x28>
c0014468:	50                   	push   eax
c0014469:	50                   	push   eax
c001446a:	53                   	push   ebx
c001446b:	51                   	push   ecx
c001446c:	e8 e6 6e ff ff       	call   c000b357 <KeCreateSymlink(char const*, char const*)>
c0014471:	83 c4 10             	add    esp,0x10
c0014474:	99                   	cdq    
c0014475:	83 c4 08             	add    esp,0x8
c0014478:	5b                   	pop    ebx
c0014479:	c3                   	ret    

c001447a <SysTimezone(regs*)>:
c001447a:	53                   	push   ebx
c001447b:	83 ec 08             	sub    esp,0x8
c001447e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014482:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0014486:	75 17                	jne    c001449f <SysTimezone(regs*)+0x25>
c0014488:	83 ec 0c             	sub    esp,0xc
c001448b:	68 55 27 02 c0       	push   0xc0022755
c0014490:	e8 75 64 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014495:	83 c8 ff             	or     eax,0xffffffff
c0014498:	83 c4 10             	add    esp,0x10
c001449b:	89 c2                	mov    edx,eax
c001449d:	eb 20                	jmp    c00144bf <SysTimezone(regs*)+0x45>
c001449f:	83 ec 0c             	sub    esp,0xc
c00144a2:	68 6a 27 02 c0       	push   0xc002276a
c00144a7:	e8 5e 64 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00144ac:	58                   	pop    eax
c00144ad:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00144b0:	e8 d7 7f ff ff       	call   c000c48c <User::loadClockSettings(int)>
c00144b5:	83 c4 10             	add    esp,0x10
c00144b8:	b8 01 00 00 00       	mov    eax,0x1
c00144bd:	31 d2                	xor    edx,edx
c00144bf:	83 c4 08             	add    esp,0x8
c00144c2:	5b                   	pop    ebx
c00144c3:	c3                   	ret    

c00144c4 <SysTruncate(regs*)>:
c00144c4:	55                   	push   ebp
c00144c5:	57                   	push   edi
c00144c6:	31 ff                	xor    edi,edi
c00144c8:	56                   	push   esi
c00144c9:	53                   	push   ebx
c00144ca:	83 ec 0c             	sub    esp,0xc
c00144cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144d1:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00144d4:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c00144d8:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c00144db:	89 ce                	mov    esi,ecx
c00144dd:	0f 84 9a 00 00 00    	je     c001457d <SysTruncate(regs*)+0xb9>
c00144e3:	83 ec 0c             	sub    esp,0xc
c00144e6:	68 14 01 00 00       	push   0x114
c00144eb:	e8 e3 35 ff ff       	call   c0007ad3 <malloc>
c00144f0:	83 c4 0c             	add    esp,0xc
c00144f3:	89 c3                	mov    ebx,eax
c00144f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00144fa:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00144fd:	55                   	push   ebp
c00144fe:	53                   	push   ebx
c00144ff:	e8 92 76 ff ff       	call   c000bb96 <File::File(char const*, Process*)>
c0014504:	83 c4 10             	add    esp,0x10
c0014507:	31 d2                	xor    edx,edx
c0014509:	85 db                	test   ebx,ebx
c001450b:	b8 03 00 00 00       	mov    eax,0x3
c0014510:	0f 84 a2 00 00 00    	je     c00145b8 <SysTruncate(regs*)+0xf4>
c0014516:	51                   	push   ecx
c0014517:	51                   	push   ecx
c0014518:	6a 02                	push   0x2
c001451a:	53                   	push   ebx
c001451b:	e8 94 76 ff ff       	call   c000bbb4 <File::open(FileOpenMode)>
c0014520:	83 c4 10             	add    esp,0x10
c0014523:	85 c0                	test   eax,eax
c0014525:	74 13                	je     c001453a <SysTruncate(regs*)+0x76>
c0014527:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014529:	83 ec 0c             	sub    esp,0xc
c001452c:	53                   	push   ebx
c001452d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014530:	83 c4 10             	add    esp,0x10
c0014533:	b8 04 00 00 00       	mov    eax,0x4
c0014538:	eb 7c                	jmp    c00145b6 <SysTruncate(regs*)+0xf2>
c001453a:	52                   	push   edx
c001453b:	57                   	push   edi
c001453c:	56                   	push   esi
c001453d:	53                   	push   ebx
c001453e:	e8 85 77 ff ff       	call   c000bcc8 <File::truncate(unsigned long long)>
c0014543:	83 c4 10             	add    esp,0x10
c0014546:	85 c0                	test   eax,eax
c0014548:	74 1b                	je     c0014565 <SysTruncate(regs*)+0xa1>
c001454a:	83 ec 0c             	sub    esp,0xc
c001454d:	53                   	push   ebx
c001454e:	e8 bf 76 ff ff       	call   c000bc12 <File::close()>
c0014553:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014555:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014558:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001455b:	83 c4 10             	add    esp,0x10
c001455e:	b8 05 00 00 00       	mov    eax,0x5
c0014563:	eb 51                	jmp    c00145b6 <SysTruncate(regs*)+0xf2>
c0014565:	83 ec 0c             	sub    esp,0xc
c0014568:	53                   	push   ebx
c0014569:	e8 a4 76 ff ff       	call   c000bc12 <File::close()>
c001456e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014570:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014573:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014576:	83 c4 10             	add    esp,0x10
c0014579:	31 c0                	xor    eax,eax
c001457b:	eb 39                	jmp    c00145b6 <SysTruncate(regs*)+0xf2>
c001457d:	31 d2                	xor    edx,edx
c001457f:	83 fd 02             	cmp    ebp,0x2
c0014582:	b8 01 00 00 00       	mov    eax,0x1
c0014587:	7e 2f                	jle    c00145b8 <SysTruncate(regs*)+0xf4>
c0014589:	83 ec 0c             	sub    esp,0xc
c001458c:	51                   	push   ecx
c001458d:	e8 09 4f ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0014592:	83 c4 10             	add    esp,0x10
c0014595:	31 d2                	xor    edx,edx
c0014597:	89 c1                	mov    ecx,eax
c0014599:	b8 02 00 00 00       	mov    eax,0x2
c001459e:	85 c9                	test   ecx,ecx
c00145a0:	74 16                	je     c00145b8 <SysTruncate(regs*)+0xf4>
c00145a2:	50                   	push   eax
c00145a3:	57                   	push   edi
c00145a4:	56                   	push   esi
c00145a5:	51                   	push   ecx
c00145a6:	e8 1d 77 ff ff       	call   c000bcc8 <File::truncate(unsigned long long)>
c00145ab:	83 c4 10             	add    esp,0x10
c00145ae:	85 c0                	test   eax,eax
c00145b0:	0f 95 c0             	setne  al
c00145b3:	0f b6 c0             	movzx  eax,al
c00145b6:	31 d2                	xor    edx,edx
c00145b8:	83 c4 0c             	add    esp,0xc
c00145bb:	5b                   	pop    ebx
c00145bc:	5e                   	pop    esi
c00145bd:	5f                   	pop    edi
c00145be:	5d                   	pop    ebp
c00145bf:	c3                   	ret    

c00145c0 <SysWrite(regs*)>:
c00145c0:	57                   	push   edi
c00145c1:	56                   	push   esi
c00145c2:	53                   	push   ebx
c00145c3:	83 ec 10             	sub    esp,0x10
c00145c6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00145ca:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00145cd:	83 f8 02             	cmp    eax,0x2
c00145d0:	77 10                	ja     c00145e2 <SysWrite(regs*)+0x22>
c00145d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145d7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00145da:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00145e0:	eb 0e                	jmp    c00145f0 <SysWrite(regs*)+0x30>
c00145e2:	83 ec 0c             	sub    esp,0xc
c00145e5:	50                   	push   eax
c00145e6:	e8 b0 4e ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c00145eb:	83 c4 10             	add    esp,0x10
c00145ee:	89 c1                	mov    ecx,eax
c00145f0:	83 c8 ff             	or     eax,0xffffffff
c00145f3:	85 c9                	test   ecx,ecx
c00145f5:	89 c2                	mov    edx,eax
c00145f7:	74 28                	je     c0014621 <SysWrite(regs*)+0x61>
c00145f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014601:	83 ec 0c             	sub    esp,0xc
c0014604:	31 ff                	xor    edi,edi
c0014606:	8d 54 24 18          	lea    edx,[esp+0x18]
c001460a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001460c:	52                   	push   edx
c001460d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014610:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014613:	57                   	push   edi
c0014614:	56                   	push   esi
c0014615:	51                   	push   ecx
c0014616:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014619:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001461d:	83 c4 20             	add    esp,0x20
c0014620:	99                   	cdq    
c0014621:	83 c4 10             	add    esp,0x10
c0014624:	5b                   	pop    ebx
c0014625:	5e                   	pop    esi
c0014626:	5f                   	pop    edi
c0014627:	c3                   	ret    

c0014628 <SysWsbe(regs*)>:
c0014628:	57                   	push   edi
c0014629:	b9 0b 00 00 00       	mov    ecx,0xb
c001462e:	56                   	push   esi
c001462f:	be a9 27 02 c0       	mov    esi,0xc00227a9
c0014634:	53                   	push   ebx
c0014635:	83 ec 30             	sub    esp,0x30
c0014638:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001463c:	fc                   	cld    
c001463d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001463f:	83 ec 0c             	sub    esp,0xc
c0014642:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014646:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001464b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001464e:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0014654:	8b 06                	mov    eax,DWORD PTR [esi]
c0014656:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0014659:	57                   	push   edi
c001465a:	e8 21 bf fe ff       	call   c0000580 <strlen>
c001465f:	5a                   	pop    edx
c0014660:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014664:	52                   	push   edx
c0014665:	31 d2                	xor    edx,edx
c0014667:	57                   	push   edi
c0014668:	52                   	push   edx
c0014669:	50                   	push   eax
c001466a:	56                   	push   esi
c001466b:	ff d3                	call   ebx
c001466d:	83 c4 14             	add    esp,0x14
c0014670:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014674:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014677:	e8 a8 23 00 00       	call   c0016a24 <terminateTask(int)>
c001467c:	83 c4 40             	add    esp,0x40
c001467f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0014684:	5b                   	pop    ebx
c0014685:	31 d2                	xor    edx,edx
c0014687:	5e                   	pop    esi
c0014688:	5f                   	pop    edi
c0014689:	c3                   	ret    

c001468a <SysYield(regs*)>:
c001468a:	83 ec 0c             	sub    esp,0xc
c001468d:	fa                   	cli    
c001468e:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0014694:	e8 0b 1a 00 00       	call   c00160a4 <schedule()>
c0014699:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001469e:	48                   	dec    eax
c001469f:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00146a4:	75 01                	jne    c00146a7 <SysYield(regs*)+0x1d>
c00146a6:	fb                   	sti    
c00146a7:	31 c0                	xor    eax,eax
c00146a9:	31 d2                	xor    edx,edx
c00146ab:	83 c4 0c             	add    esp,0xc
c00146ae:	c3                   	ret    

c00146af <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00146af:	55                   	push   ebp
c00146b0:	57                   	push   edi
c00146b1:	56                   	push   esi
c00146b2:	53                   	push   ebx
c00146b3:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00146b9:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c00146c4:	74 3b                	je     c0014701 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00146c6:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c00146ce:	74 31                	je     c0014701 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00146d0:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00146d8:	75 27                	jne    c0014701 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00146da:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c00146e1:	05 00 10 00 00       	add    eax,0x1000
c00146e6:	89 c2                	mov    edx,eax
c00146e8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00146ed:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00146f4:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c00146fa:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0014701:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0014708:	83 ec 0c             	sub    esp,0xc
c001470b:	6a 01                	push   0x1
c001470d:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0014713:	e8 dd 4e ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0014718:	83 c4 10             	add    esp,0x10
c001471b:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0014721:	89 c3                	mov    ebx,eax
c0014723:	0f 86 26 01 00 00    	jbe    c001484f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c0014729:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014731:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014738:	c1 ee 0c             	shr    esi,0xc
c001473b:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001473f:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0014746:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c001474d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014751:	29 ef                	sub    edi,ebp
c0014753:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0014757:	0f 83 f9 00 00 00    	jae    c0014856 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c001475d:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0014763:	b8 00 10 00 00       	mov    eax,0x1000
c0014768:	0f 47 f8             	cmova  edi,eax
c001476b:	83 ec 0c             	sub    esp,0xc
c001476e:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014775:	31 d2                	xor    edx,edx
c0014777:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014779:	8d 44 24 28          	lea    eax,[esp+0x28]
c001477d:	50                   	push   eax
c001477e:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014782:	56                   	push   esi
c0014783:	52                   	push   edx
c0014784:	57                   	push   edi
c0014785:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001478c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001478f:	83 c4 20             	add    esp,0x20
c0014792:	85 c0                	test   eax,eax
c0014794:	75 06                	jne    c001479c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0014796:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001479a:	74 13                	je     c00147af <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c001479c:	83 ec 0c             	sub    esp,0xc
c001479f:	53                   	push   ebx
c00147a0:	e8 64 51 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c00147a5:	83 c4 10             	add    esp,0x10
c00147a8:	31 c0                	xor    eax,eax
c00147aa:	e9 7c 01 00 00       	jmp    c001492b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c00147af:	fa                   	cli    
c00147b0:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00147b6:	e8 27 36 ff ff       	call   c0007de2 <Phys::allocatePage()>
c00147bb:	6a 07                	push   0x7
c00147bd:	53                   	push   ebx
c00147be:	50                   	push   eax
c00147bf:	89 c7                	mov    edi,eax
c00147c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147c6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00147c9:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00147cf:	e8 2a 55 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c00147d4:	83 c4 0c             	add    esp,0xc
c00147d7:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00147de:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00147e4:	6a 00                	push   0x0
c00147e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147eb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00147ee:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00147f4:	e8 6b 53 ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c00147f9:	58                   	pop    eax
c00147fa:	5a                   	pop    edx
c00147fb:	68 07 0c 00 00       	push   0xc07
c0014800:	55                   	push   ebp
c0014801:	57                   	push   edi
c0014802:	89 df                	mov    edi,ebx
c0014804:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001480b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014811:	6a 00                	push   0x0
c0014813:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014818:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001481b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014821:	e8 3c 57 ff ff       	call   c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014826:	b9 00 10 00 00       	mov    ecx,0x1000
c001482b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001482d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0014832:	83 c4 20             	add    esp,0x20
c0014835:	48                   	dec    eax
c0014836:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001483b:	85 c0                	test   eax,eax
c001483d:	75 01                	jne    c0014840 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c001483f:	fb                   	sti    
c0014840:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014844:	81 c5 00 10 00 00    	add    ebp,0x1000
c001484a:	e9 f0 fe ff ff       	jmp    c001473f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c001484f:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014856:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001485d:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0014863:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0014869:	0f 86 ae 00 00 00    	jbe    c001491d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c001486f:	fa                   	cli    
c0014870:	51                   	push   ecx
c0014871:	31 ff                	xor    edi,edi
c0014873:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001487a:	c1 ee 0c             	shr    esi,0xc
c001487d:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0014883:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014889:	6a 00                	push   0x0
c001488b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014890:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014893:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014899:	e8 c6 52 ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c001489e:	83 c4 10             	add    esp,0x10
c00148a1:	e8 3c 35 ff ff       	call   c0007de2 <Phys::allocatePage()>
c00148a6:	47                   	inc    edi
c00148a7:	6a 07                	push   0x7
c00148a9:	53                   	push   ebx
c00148aa:	50                   	push   eax
c00148ab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00148af:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00148b5:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00148b8:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c00148be:	e8 3b 54 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c00148c3:	58                   	pop    eax
c00148c4:	5a                   	pop    edx
c00148c5:	68 07 0c 00 00       	push   0xc07
c00148ca:	55                   	push   ebp
c00148cb:	81 c5 00 10 00 00    	add    ebp,0x1000
c00148d1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00148d5:	50                   	push   eax
c00148d6:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00148dd:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148e3:	6a 00                	push   0x0
c00148e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148ea:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00148ed:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148f3:	e8 6a 56 ff ff       	call   c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00148f8:	83 c4 1c             	add    esp,0x1c
c00148fb:	68 00 10 00 00       	push   0x1000
c0014900:	6a 00                	push   0x0
c0014902:	53                   	push   ebx
c0014903:	e8 e8 bb fe ff       	call   c00004f0 <memset>
c0014908:	83 c4 10             	add    esp,0x10
c001490b:	39 fe                	cmp    esi,edi
c001490d:	77 92                	ja     c00148a1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c001490f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0014914:	48                   	dec    eax
c0014915:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001491a:	75 01                	jne    c001491d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c001491c:	fb                   	sti    
c001491d:	83 ec 0c             	sub    esp,0xc
c0014920:	53                   	push   ebx
c0014921:	e8 e3 4f ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0014926:	83 c4 10             	add    esp,0x10
c0014929:	b0 01                	mov    al,0x1
c001492b:	81 c4 2c 10 00 00    	add    esp,0x102c
c0014931:	5b                   	pop    ebx
c0014932:	5e                   	pop    esi
c0014933:	5f                   	pop    edi
c0014934:	5d                   	pop    ebp
c0014935:	c3                   	ret    

c0014936 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0014936:	55                   	push   ebp
c0014937:	57                   	push   edi
c0014938:	56                   	push   esi
c0014939:	53                   	push   ebx
c001493a:	83 ec 48             	sub    esp,0x48
c001493d:	68 14 01 00 00       	push   0x114
c0014942:	e8 8c 31 ff ff       	call   c0007ad3 <malloc>
c0014947:	83 c4 0c             	add    esp,0xc
c001494a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001494e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0014952:	89 c7                	mov    edi,eax
c0014954:	50                   	push   eax
c0014955:	e8 3c 72 ff ff       	call   c000bb96 <File::File(char const*, Process*)>
c001495a:	58                   	pop    eax
c001495b:	5a                   	pop    edx
c001495c:	6a 01                	push   0x1
c001495e:	57                   	push   edi
c001495f:	e8 50 72 ff ff       	call   c000bbb4 <File::open(FileOpenMode)>
c0014964:	83 c4 10             	add    esp,0x10
c0014967:	85 c0                	test   eax,eax
c0014969:	0f 85 4c 01 00 00    	jne    c0014abb <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001496f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0014977:	83 ec 0c             	sub    esp,0xc
c001497a:	6a 34                	push   0x34
c001497c:	e8 52 31 ff ff       	call   c0007ad3 <malloc>
c0014981:	89 c3                	mov    ebx,eax
c0014983:	58                   	pop    eax
c0014984:	8b 07                	mov    eax,DWORD PTR [edi]
c0014986:	8d 74 24 38          	lea    esi,[esp+0x38]
c001498a:	56                   	push   esi
c001498b:	53                   	push   ebx
c001498c:	6a 00                	push   0x0
c001498e:	6a 34                	push   0x34
c0014990:	57                   	push   edi
c0014991:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014994:	83 c4 20             	add    esp,0x20
c0014997:	85 c0                	test   eax,eax
c0014999:	0f 85 1c 01 00 00    	jne    c0014abb <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001499f:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00149a5:	0f 85 10 01 00 00    	jne    c0014abb <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00149ab:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00149ae:	85 c0                	test   eax,eax
c00149b0:	0f 84 05 01 00 00    	je     c0014abb <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00149b6:	31 d2                	xor    edx,edx
c00149b8:	55                   	push   ebp
c00149b9:	52                   	push   edx
c00149ba:	50                   	push   eax
c00149bb:	57                   	push   edi
c00149bc:	e8 b1 72 ff ff       	call   c000bc72 <File::seek(unsigned long long)>
c00149c1:	83 c4 10             	add    esp,0x10
c00149c4:	85 c0                	test   eax,eax
c00149c6:	0f 85 ef 00 00 00    	jne    c0014abb <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00149cc:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00149cf:	83 ec 0c             	sub    esp,0xc
c00149d2:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00149d6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00149da:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00149de:	0f af c2             	imul   eax,edx
c00149e1:	50                   	push   eax
c00149e2:	e8 ec 30 ff ff       	call   c0007ad3 <malloc>
c00149e7:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00149e9:	89 34 24             	mov    DWORD PTR [esp],esi
c00149ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00149f0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00149f4:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00149f8:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00149fc:	0f af c2             	imul   eax,edx
c00149ff:	99                   	cdq    
c0014a00:	52                   	push   edx
c0014a01:	50                   	push   eax
c0014a02:	57                   	push   edi
c0014a03:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014a06:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0014a09:	83 c4 20             	add    esp,0x20
c0014a0c:	85 c0                	test   eax,eax
c0014a0e:	0f 84 a7 00 00 00    	je     c0014abb <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014a14:	31 d2                	xor    edx,edx
c0014a16:	51                   	push   ecx
c0014a17:	52                   	push   edx
c0014a18:	50                   	push   eax
c0014a19:	57                   	push   edi
c0014a1a:	e8 53 72 ff ff       	call   c000bc72 <File::seek(unsigned long long)>
c0014a1f:	83 c4 10             	add    esp,0x10
c0014a22:	85 c0                	test   eax,eax
c0014a24:	0f 85 91 00 00 00    	jne    c0014abb <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014a2a:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014a2e:	83 ec 0c             	sub    esp,0xc
c0014a31:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014a35:	0f af c2             	imul   eax,edx
c0014a38:	50                   	push   eax
c0014a39:	e8 95 30 ff ff       	call   c0007ad3 <malloc>
c0014a3e:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014a40:	89 34 24             	mov    DWORD PTR [esp],esi
c0014a43:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014a47:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a4b:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014a4f:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014a53:	0f af c2             	imul   eax,edx
c0014a56:	99                   	cdq    
c0014a57:	52                   	push   edx
c0014a58:	50                   	push   eax
c0014a59:	57                   	push   edi
c0014a5a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014a5d:	83 c4 20             	add    esp,0x20
c0014a60:	31 c9                	xor    ecx,ecx
c0014a62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014a6a:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c0014a6e:	0f b7 e9             	movzx  ebp,cx
c0014a71:	0f 83 86 00 00 00    	jae    c0014afd <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c0014a77:	c1 e5 05             	shl    ebp,0x5
c0014a7a:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0014a7e:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c0014a82:	75 73                	jne    c0014af7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c0014a84:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014a88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a8b:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0014a8e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014a92:	52                   	push   edx
c0014a93:	31 d2                	xor    edx,edx
c0014a95:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0014a98:	52                   	push   edx
c0014a99:	50                   	push   eax
c0014a9a:	57                   	push   edi
c0014a9b:	e8 d2 71 ff ff       	call   c000bc72 <File::seek(unsigned long long)>
c0014aa0:	83 c4 10             	add    esp,0x10
c0014aa3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014aa7:	85 c0                	test   eax,eax
c0014aa9:	74 17                	je     c0014ac2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c0014aab:	83 ec 0c             	sub    esp,0xc
c0014aae:	68 d5 27 02 c0       	push   0xc00227d5
c0014ab3:	e8 52 5e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014ab8:	83 c4 10             	add    esp,0x10
c0014abb:	31 c0                	xor    eax,eax
c0014abd:	e9 8b 00 00 00       	jmp    c0014b4d <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c0014ac2:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014ac6:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0014ac9:	83 ec 0c             	sub    esp,0xc
c0014acc:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0014acf:	50                   	push   eax
c0014ad0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014ad4:	56                   	push   esi
c0014ad5:	57                   	push   edi
c0014ad6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014ada:	e8 d0 fb ff ff       	call   c00146af <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0014adf:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0014ae3:	83 c4 20             	add    esp,0x20
c0014ae6:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0014aea:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014aee:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0014af3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0014af7:	41                   	inc    ecx
c0014af8:	e9 6d ff ff ff       	jmp    c0014a6a <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014afd:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014b01:	83 ec 0c             	sub    esp,0xc
c0014b04:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0014b08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b0c:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c0014b12:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0014b18:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014b1d:	05 00 10 00 00       	add    eax,0x1000
c0014b22:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014b25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b29:	e8 b5 2f ff ff       	call   c0007ae3 <free>
c0014b2e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b31:	e8 ad 2f ff ff       	call   c0007ae3 <free>
c0014b36:	58                   	pop    eax
c0014b37:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b3b:	e8 a3 2f ff ff       	call   c0007ae3 <free>
c0014b40:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014b43:	e8 ca 70 ff ff       	call   c000bc12 <File::close()>
c0014b48:	83 c4 10             	add    esp,0x10
c0014b4b:	b0 01                	mov    al,0x1
c0014b4d:	83 c4 3c             	add    esp,0x3c
c0014b50:	5b                   	pop    ebx
c0014b51:	5e                   	pop    esi
c0014b52:	5f                   	pop    edi
c0014b53:	5d                   	pop    ebp
c0014b54:	c3                   	ret    

c0014b55 <Thr::runtimeReferenceHelper()>:
c0014b55:	83 ec 18             	sub    esp,0x18
c0014b58:	68 dd 27 02 c0       	push   0xc00227dd
c0014b5d:	e8 a8 5d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014b62:	fa                   	cli    
c0014b63:	83 c4 10             	add    esp,0x10
c0014b66:	eb fe                	jmp    c0014b66 <Thr::runtimeReferenceHelper()+0x11>

c0014b68 <Thr::getAddressOfKernelSymbol(char const*)>:
c0014b68:	57                   	push   edi
c0014b69:	56                   	push   esi
c0014b6a:	53                   	push   ebx
c0014b6b:	31 db                	xor    ebx,ebx
c0014b6d:	39 1d a0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6a0,ebx
c0014b73:	7e 3c                	jle    c0014bb1 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014b75:	8b 34 9d 20 c6 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd39e0]
c0014b7c:	31 ff                	xor    edi,edi
c0014b7e:	39 3c 9d 20 c5 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd3ae0],edi
c0014b85:	7e 27                	jle    c0014bae <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014b87:	50                   	push   eax
c0014b88:	50                   	push   eax
c0014b89:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b8d:	8b 06                	mov    eax,DWORD PTR [esi]
c0014b8f:	03 04 9d a0 c5 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd3a60]
c0014b96:	50                   	push   eax
c0014b97:	e8 e4 bb fe ff       	call   c0000780 <strcmp>
c0014b9c:	83 c4 10             	add    esp,0x10
c0014b9f:	85 c0                	test   eax,eax
c0014ba1:	75 05                	jne    c0014ba8 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0014ba3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014ba6:	eb 0b                	jmp    c0014bb3 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014ba8:	83 c6 10             	add    esi,0x10
c0014bab:	47                   	inc    edi
c0014bac:	eb d0                	jmp    c0014b7e <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014bae:	43                   	inc    ebx
c0014baf:	eb bc                	jmp    c0014b6d <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0014bb1:	31 c0                	xor    eax,eax
c0014bb3:	5b                   	pop    ebx
c0014bb4:	5e                   	pop    esi
c0014bb5:	5f                   	pop    edi
c0014bb6:	c3                   	ret    

c0014bb7 <Thr::loadKernelSymbolTable(char const*)>:
c0014bb7:	55                   	push   ebp
c0014bb8:	57                   	push   edi
c0014bb9:	56                   	push   esi
c0014bba:	53                   	push   ebx
c0014bbb:	83 ec 68             	sub    esp,0x68
c0014bbe:	68 14 01 00 00       	push   0x114
c0014bc3:	8b 35 f0 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6f0
c0014bc9:	e8 05 2f ff ff       	call   c0007ad3 <malloc>
c0014bce:	83 c4 0c             	add    esp,0xc
c0014bd1:	56                   	push   esi
c0014bd2:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014bd6:	89 c3                	mov    ebx,eax
c0014bd8:	50                   	push   eax
c0014bd9:	e8 b8 6f ff ff       	call   c000bb96 <File::File(char const*, Process*)>
c0014bde:	5e                   	pop    esi
c0014bdf:	5f                   	pop    edi
c0014be0:	6a 01                	push   0x1
c0014be2:	53                   	push   ebx
c0014be3:	e8 cc 6f ff ff       	call   c000bbb4 <File::open(FileOpenMode)>
c0014be8:	83 c4 10             	add    esp,0x10
c0014beb:	85 c0                	test   eax,eax
c0014bed:	74 0a                	je     c0014bf9 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014bef:	83 ec 0c             	sub    esp,0xc
c0014bf2:	68 ff 27 02 c0       	push   0xc00227ff
c0014bf7:	eb 34                	jmp    c0014c2d <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014bf9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014c01:	83 ec 0c             	sub    esp,0xc
c0014c04:	6a 34                	push   0x34
c0014c06:	e8 c8 2e ff ff       	call   c0007ad3 <malloc>
c0014c0b:	59                   	pop    ecx
c0014c0c:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014c10:	89 c7                	mov    edi,eax
c0014c12:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014c14:	56                   	push   esi
c0014c15:	57                   	push   edi
c0014c16:	6a 00                	push   0x0
c0014c18:	6a 34                	push   0x34
c0014c1a:	53                   	push   ebx
c0014c1b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014c1e:	83 c4 20             	add    esp,0x20
c0014c21:	85 c0                	test   eax,eax
c0014c23:	74 17                	je     c0014c3c <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014c25:	83 ec 0c             	sub    esp,0xc
c0014c28:	68 16 28 02 c0       	push   0xc0022816
c0014c2d:	e8 a9 c9 ff ff       	call   c00115db <KePanic(char const*)>
c0014c32:	83 c4 10             	add    esp,0x10
c0014c35:	31 c0                	xor    eax,eax
c0014c37:	e9 31 02 00 00       	jmp    c0014e6d <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014c3c:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014c42:	75 e1                	jne    c0014c25 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014c44:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014c47:	85 c0                	test   eax,eax
c0014c49:	74 da                	je     c0014c25 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014c4b:	52                   	push   edx
c0014c4c:	31 d2                	xor    edx,edx
c0014c4e:	52                   	push   edx
c0014c4f:	50                   	push   eax
c0014c50:	53                   	push   ebx
c0014c51:	e8 1c 70 ff ff       	call   c000bc72 <File::seek(unsigned long long)>
c0014c56:	83 c4 10             	add    esp,0x10
c0014c59:	85 c0                	test   eax,eax
c0014c5b:	75 c8                	jne    c0014c25 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014c5d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014c61:	83 ec 0c             	sub    esp,0xc
c0014c64:	31 ed                	xor    ebp,ebp
c0014c66:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014c6a:	0f af c2             	imul   eax,edx
c0014c6d:	50                   	push   eax
c0014c6e:	e8 60 2e ff ff       	call   c0007ad3 <malloc>
c0014c73:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014c75:	89 34 24             	mov    DWORD PTR [esp],esi
c0014c78:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014c7c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014c80:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014c84:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014c88:	0f af c2             	imul   eax,edx
c0014c8b:	99                   	cdq    
c0014c8c:	52                   	push   edx
c0014c8d:	50                   	push   eax
c0014c8e:	53                   	push   ebx
c0014c8f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014c92:	83 c4 20             	add    esp,0x20
c0014c95:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014c9d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014ca5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014cad:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014cb5:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014cb9:	0f b7 f5             	movzx  esi,bp
c0014cbc:	0f 83 a7 00 00 00    	jae    c0014d69 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014cc2:	6b f6 28             	imul   esi,esi,0x28
c0014cc5:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014cc9:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014ccc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014cd0:	50                   	push   eax
c0014cd1:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014cd5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014cd9:	8b 16                	mov    edx,DWORD PTR [esi]
c0014cdb:	6b c0 28             	imul   eax,eax,0x28
c0014cde:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0014ce2:	89 d0                	mov    eax,edx
c0014ce4:	31 d2                	xor    edx,edx
c0014ce6:	52                   	push   edx
c0014ce7:	50                   	push   eax
c0014ce8:	53                   	push   ebx
c0014ce9:	e8 84 6f ff ff       	call   c000bc72 <File::seek(unsigned long long)>
c0014cee:	83 c4 0c             	add    esp,0xc
c0014cf1:	6a 20                	push   0x20
c0014cf3:	6a 00                	push   0x0
c0014cf5:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014cf9:	52                   	push   edx
c0014cfa:	e8 f1 b7 fe ff       	call   c00004f0 <memset>
c0014cff:	58                   	pop    eax
c0014d00:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d02:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014d06:	51                   	push   ecx
c0014d07:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014d0b:	52                   	push   edx
c0014d0c:	6a 00                	push   0x0
c0014d0e:	6a 1f                	push   0x1f
c0014d10:	53                   	push   ebx
c0014d11:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014d14:	83 c4 18             	add    esp,0x18
c0014d17:	68 2d 28 02 c0       	push   0xc002282d
c0014d1c:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014d20:	52                   	push   edx
c0014d21:	e8 5a ba fe ff       	call   c0000780 <strcmp>
c0014d26:	83 c4 10             	add    esp,0x10
c0014d29:	85 c0                	test   eax,eax
c0014d2b:	75 0f                	jne    c0014d3c <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014d2d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014d30:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014d34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d38:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014d3c:	50                   	push   eax
c0014d3d:	50                   	push   eax
c0014d3e:	68 35 28 02 c0       	push   0xc0022835
c0014d43:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014d47:	50                   	push   eax
c0014d48:	e8 33 ba fe ff       	call   c0000780 <strcmp>
c0014d4d:	83 c4 10             	add    esp,0x10
c0014d50:	85 c0                	test   eax,eax
c0014d52:	75 0f                	jne    c0014d63 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014d54:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014d57:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014d5b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d5f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014d63:	45                   	inc    ebp
c0014d64:	e9 4c ff ff ff       	jmp    c0014cb5 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014d69:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014d6e:	75 10                	jne    c0014d80 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014d70:	83 ec 0c             	sub    esp,0xc
c0014d73:	68 3d 28 02 c0       	push   0xc002283d
c0014d78:	e8 5e c8 ff ff       	call   c00115db <KePanic(char const*)>
c0014d7d:	83 c4 10             	add    esp,0x10
c0014d80:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014d85:	75 10                	jne    c0014d97 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014d87:	83 ec 0c             	sub    esp,0xc
c0014d8a:	68 3d 28 02 c0       	push   0xc002283d
c0014d8f:	e8 47 c8 ff ff       	call   c00115db <KePanic(char const*)>
c0014d94:	83 c4 10             	add    esp,0x10
c0014d97:	50                   	push   eax
c0014d98:	31 d2                	xor    edx,edx
c0014d9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d9e:	52                   	push   edx
c0014d9f:	50                   	push   eax
c0014da0:	53                   	push   ebx
c0014da1:	e8 cc 6e ff ff       	call   c000bc72 <File::seek(unsigned long long)>
c0014da6:	5a                   	pop    edx
c0014da7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014dab:	e8 23 2d ff ff       	call   c0007ad3 <malloc>
c0014db0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014db4:	31 c9                	xor    ecx,ecx
c0014db6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014dba:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014dbc:	5e                   	pop    esi
c0014dbd:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014dc1:	55                   	push   ebp
c0014dc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014dc6:	51                   	push   ecx
c0014dc7:	52                   	push   edx
c0014dc8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014dcc:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014dd0:	53                   	push   ebx
c0014dd1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014dd4:	83 c4 14             	add    esp,0x14
c0014dd7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014ddb:	e8 f3 2c ff ff       	call   c0007ad3 <malloc>
c0014de0:	89 c6                	mov    esi,eax
c0014de2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014de4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014de7:	56                   	push   esi
c0014de8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014dec:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014df0:	51                   	push   ecx
c0014df1:	52                   	push   edx
c0014df2:	53                   	push   ebx
c0014df3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014df6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014dfa:	83 c4 1c             	add    esp,0x1c
c0014dfd:	8b 15 a0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6a0
c0014e03:	c1 e8 04             	shr    eax,0x4
c0014e06:	89 04 95 20 c5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3ae0],eax
c0014e0d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014e11:	31 d2                	xor    edx,edx
c0014e13:	52                   	push   edx
c0014e14:	50                   	push   eax
c0014e15:	53                   	push   ebx
c0014e16:	e8 57 6e ff ff       	call   c000bc72 <File::seek(unsigned long long)>
c0014e1b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014e1d:	31 d2                	xor    edx,edx
c0014e1f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014e22:	56                   	push   esi
c0014e23:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014e27:	52                   	push   edx
c0014e28:	50                   	push   eax
c0014e29:	53                   	push   ebx
c0014e2a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014e2d:	83 c4 14             	add    esp,0x14
c0014e30:	53                   	push   ebx
c0014e31:	e8 dc 6d ff ff       	call   c000bc12 <File::close()>
c0014e36:	5d                   	pop    ebp
c0014e37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014e3b:	e8 a3 2c ff ff       	call   c0007ae3 <free>
c0014e40:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014e43:	e8 9b 2c ff ff       	call   c0007ae3 <free>
c0014e48:	a1 a0 c6 02 c0       	mov    eax,ds:0xc002c6a0
c0014e4d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014e51:	83 c4 10             	add    esp,0x10
c0014e54:	89 34 85 a0 c5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a60],esi
c0014e5b:	8d 50 01             	lea    edx,[eax+0x1]
c0014e5e:	89 0c 85 20 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd39e0],ecx
c0014e65:	b0 01                	mov    al,0x1
c0014e67:	89 15 a0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6a0,edx
c0014e6d:	83 c4 5c             	add    esp,0x5c
c0014e70:	5b                   	pop    ebx
c0014e71:	5e                   	pop    esi
c0014e72:	5f                   	pop    edi
c0014e73:	5d                   	pop    ebp
c0014e74:	c3                   	ret    

c0014e75 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014e75:	55                   	push   ebp
c0014e76:	57                   	push   edi
c0014e77:	56                   	push   esi
c0014e78:	53                   	push   ebx
c0014e79:	81 ec 68 03 00 00    	sub    esp,0x368
c0014e7f:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014e86:	8b 35 f0 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6f0
c0014e8c:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0014e90:	68 14 01 00 00       	push   0x114
c0014e95:	e8 39 2c ff ff       	call   c0007ad3 <malloc>
c0014e9a:	83 c4 0c             	add    esp,0xc
c0014e9d:	56                   	push   esi
c0014e9e:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014ea5:	50                   	push   eax
c0014ea6:	89 c3                	mov    ebx,eax
c0014ea8:	e8 e9 6c ff ff       	call   c000bb96 <File::File(char const*, Process*)>
c0014ead:	5f                   	pop    edi
c0014eae:	5d                   	pop    ebp
c0014eaf:	6a 01                	push   0x1
c0014eb1:	53                   	push   ebx
c0014eb2:	e8 fd 6c ff ff       	call   c000bbb4 <File::open(FileOpenMode)>
c0014eb7:	83 c4 10             	add    esp,0x10
c0014eba:	85 c0                	test   eax,eax
c0014ebc:	0f 85 b3 06 00 00    	jne    c0015575 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014ec2:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014eca:	83 ec 0c             	sub    esp,0xc
c0014ecd:	6a 34                	push   0x34
c0014ecf:	e8 ff 2b ff ff       	call   c0007ad3 <malloc>
c0014ed4:	5e                   	pop    esi
c0014ed5:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014ed9:	89 c5                	mov    ebp,eax
c0014edb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014edd:	56                   	push   esi
c0014ede:	55                   	push   ebp
c0014edf:	6a 00                	push   0x0
c0014ee1:	6a 34                	push   0x34
c0014ee3:	53                   	push   ebx
c0014ee4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014ee7:	83 c4 20             	add    esp,0x20
c0014eea:	85 c0                	test   eax,eax
c0014eec:	0f 85 83 06 00 00    	jne    c0015575 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014ef2:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0014ef9:	0f 85 76 06 00 00    	jne    c0015575 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014eff:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0014f02:	85 c0                	test   eax,eax
c0014f04:	0f 84 6b 06 00 00    	je     c0015575 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014f0a:	31 d2                	xor    edx,edx
c0014f0c:	51                   	push   ecx
c0014f0d:	52                   	push   edx
c0014f0e:	50                   	push   eax
c0014f0f:	53                   	push   ebx
c0014f10:	e8 5d 6d ff ff       	call   c000bc72 <File::seek(unsigned long long)>
c0014f15:	83 c4 10             	add    esp,0x10
c0014f18:	85 c0                	test   eax,eax
c0014f1a:	0f 85 55 06 00 00    	jne    c0015575 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014f20:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0014f23:	83 ec 0c             	sub    esp,0xc
c0014f26:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014f2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014f2e:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014f32:	0f af c2             	imul   eax,edx
c0014f35:	50                   	push   eax
c0014f36:	e8 98 2b ff ff       	call   c0007ad3 <malloc>
c0014f3b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014f3d:	89 34 24             	mov    DWORD PTR [esp],esi
c0014f40:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014f44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014f48:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014f4c:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014f50:	0f af c2             	imul   eax,edx
c0014f53:	99                   	cdq    
c0014f54:	52                   	push   edx
c0014f55:	50                   	push   eax
c0014f56:	53                   	push   ebx
c0014f57:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014f5a:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0014f5d:	83 c4 20             	add    esp,0x20
c0014f60:	85 c0                	test   eax,eax
c0014f62:	0f 84 0d 06 00 00    	je     c0015575 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014f68:	52                   	push   edx
c0014f69:	31 d2                	xor    edx,edx
c0014f6b:	52                   	push   edx
c0014f6c:	50                   	push   eax
c0014f6d:	53                   	push   ebx
c0014f6e:	e8 ff 6c ff ff       	call   c000bc72 <File::seek(unsigned long long)>
c0014f73:	83 c4 10             	add    esp,0x10
c0014f76:	85 c0                	test   eax,eax
c0014f78:	0f 85 f7 05 00 00    	jne    c0015575 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014f7e:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014f82:	83 ec 0c             	sub    esp,0xc
c0014f85:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014f89:	0f af c2             	imul   eax,edx
c0014f8c:	50                   	push   eax
c0014f8d:	e8 41 2b ff ff       	call   c0007ad3 <malloc>
c0014f92:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014f94:	89 34 24             	mov    DWORD PTR [esp],esi
c0014f97:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014f9b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014f9f:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014fa3:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014fa7:	0f af c2             	imul   eax,edx
c0014faa:	99                   	cdq    
c0014fab:	52                   	push   edx
c0014fac:	50                   	push   eax
c0014fad:	53                   	push   ebx
c0014fae:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014fb1:	83 c4 20             	add    esp,0x20
c0014fb4:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0014fba:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014fbd:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c0014fc1:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c0014fc5:	73 78                	jae    c001503f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0014fc7:	c1 e7 05             	shl    edi,0x5
c0014fca:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0014fce:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014fd1:	75 63                	jne    c0015036 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c0014fd3:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014fd6:	31 d2                	xor    edx,edx
c0014fd8:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c0014fdb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014fdf:	50                   	push   eax
c0014fe0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014fe3:	52                   	push   edx
c0014fe4:	50                   	push   eax
c0014fe5:	53                   	push   ebx
c0014fe6:	e8 87 6c ff ff       	call   c000bc72 <File::seek(unsigned long long)>
c0014feb:	83 c4 10             	add    esp,0x10
c0014fee:	85 c0                	test   eax,eax
c0014ff0:	0f 85 7f 05 00 00    	jne    c0015575 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014ff6:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014ffd:	83 ec 0c             	sub    esp,0xc
c0015000:	31 d2                	xor    edx,edx
c0015002:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0015006:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015008:	01 c6                	add    esi,eax
c001500a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015011:	50                   	push   eax
c0015012:	56                   	push   esi
c0015013:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015017:	52                   	push   edx
c0015018:	50                   	push   eax
c0015019:	53                   	push   ebx
c001501a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001501d:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015020:	83 c4 1c             	add    esp,0x1c
c0015023:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0015026:	50                   	push   eax
c0015027:	6a 00                	push   0x0
c0015029:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001502d:	56                   	push   esi
c001502e:	e8 bd b4 fe ff       	call   c00004f0 <memset>
c0015033:	83 c4 10             	add    esp,0x10
c0015036:	66 ff 04 24          	inc    WORD PTR [esp]
c001503a:	e9 7b ff ff ff       	jmp    c0014fba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c001503f:	50                   	push   eax
c0015040:	68 00 01 00 00       	push   0x100
c0015045:	6a 00                	push   0x0
c0015047:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001504b:	50                   	push   eax
c001504c:	e8 9f b4 fe ff       	call   c00004f0 <memset>
c0015051:	83 c4 0c             	add    esp,0xc
c0015054:	68 00 01 00 00       	push   0x100
c0015059:	6a 00                	push   0x0
c001505b:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0015062:	50                   	push   eax
c0015063:	e8 88 b4 fe ff       	call   c00004f0 <memset>
c0015068:	83 c4 10             	add    esp,0x10
c001506b:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c0015072:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015079:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015081:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0015089:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015091:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0015099:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001509d:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c00150a1:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c00150a6:	0f 83 16 01 00 00    	jae    c00151c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c00150ac:	6b ff 28             	imul   edi,edi,0x28
c00150af:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c00150b3:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c00150b6:	51                   	push   ecx
c00150b7:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c00150bb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00150bf:	8b 07                	mov    eax,DWORD PTR [edi]
c00150c1:	6b d2 28             	imul   edx,edx,0x28
c00150c4:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00150c8:	31 d2                	xor    edx,edx
c00150ca:	52                   	push   edx
c00150cb:	50                   	push   eax
c00150cc:	53                   	push   ebx
c00150cd:	e8 a0 6b ff ff       	call   c000bc72 <File::seek(unsigned long long)>
c00150d2:	83 c4 0c             	add    esp,0xc
c00150d5:	6a 20                	push   0x20
c00150d7:	6a 00                	push   0x0
c00150d9:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00150e0:	51                   	push   ecx
c00150e1:	e8 0a b4 fe ff       	call   c00004f0 <memset>
c00150e6:	58                   	pop    eax
c00150e7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00150e9:	8d 54 24 58          	lea    edx,[esp+0x58]
c00150ed:	52                   	push   edx
c00150ee:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00150f5:	51                   	push   ecx
c00150f6:	6a 00                	push   0x0
c00150f8:	6a 1f                	push   0x1f
c00150fa:	53                   	push   ebx
c00150fb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00150fe:	83 c4 1c             	add    esp,0x1c
c0015101:	6a 09                	push   0x9
c0015103:	68 57 28 02 c0       	push   0xc0022857
c0015108:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001510f:	51                   	push   ecx
c0015110:	e8 6b b2 fe ff       	call   c0000380 <memcmp>
c0015115:	83 c4 10             	add    esp,0x10
c0015118:	85 c0                	test   eax,eax
c001511a:	75 1a                	jne    c0015136 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c001511c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001511f:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0015122:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0015126:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015129:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0015130:	89 d0                	mov    eax,edx
c0015132:	40                   	inc    eax
c0015133:	89 04 24             	mov    DWORD PTR [esp],eax
c0015136:	52                   	push   edx
c0015137:	6a 09                	push   0x9
c0015139:	68 61 28 02 c0       	push   0xc0022861
c001513e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015145:	50                   	push   eax
c0015146:	e8 35 b2 fe ff       	call   c0000380 <memcmp>
c001514b:	83 c4 10             	add    esp,0x10
c001514e:	85 c0                	test   eax,eax
c0015150:	75 1a                	jne    c001516c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c0015152:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015155:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0015158:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c001515c:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001515f:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0015166:	89 c8                	mov    eax,ecx
c0015168:	40                   	inc    eax
c0015169:	89 04 24             	mov    DWORD PTR [esp],eax
c001516c:	50                   	push   eax
c001516d:	50                   	push   eax
c001516e:	68 2d 28 02 c0       	push   0xc002282d
c0015173:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001517a:	50                   	push   eax
c001517b:	e8 00 b6 fe ff       	call   c0000780 <strcmp>
c0015180:	83 c4 10             	add    esp,0x10
c0015183:	85 c0                	test   eax,eax
c0015185:	75 0b                	jne    c0015192 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c0015187:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001518b:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001518e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015192:	50                   	push   eax
c0015193:	50                   	push   eax
c0015194:	68 35 28 02 c0       	push   0xc0022835
c0015199:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00151a0:	50                   	push   eax
c00151a1:	e8 da b5 fe ff       	call   c0000780 <strcmp>
c00151a6:	83 c4 10             	add    esp,0x10
c00151a9:	85 c0                	test   eax,eax
c00151ab:	75 0b                	jne    c00151b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c00151ad:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c00151b1:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00151b4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00151b8:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c00151bd:	e9 d7 fe ff ff       	jmp    c0015099 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c00151c2:	50                   	push   eax
c00151c3:	31 d2                	xor    edx,edx
c00151c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00151c9:	52                   	push   edx
c00151ca:	50                   	push   eax
c00151cb:	53                   	push   ebx
c00151cc:	e8 a1 6a ff ff       	call   c000bc72 <File::seek(unsigned long long)>
c00151d1:	58                   	pop    eax
c00151d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00151d6:	e8 f8 28 ff ff       	call   c0007ad3 <malloc>
c00151db:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00151dd:	31 d2                	xor    edx,edx
c00151df:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00151e3:	58                   	pop    eax
c00151e4:	8d 74 24 54          	lea    esi,[esp+0x54]
c00151e8:	56                   	push   esi
c00151e9:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00151ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151f1:	52                   	push   edx
c00151f2:	50                   	push   eax
c00151f3:	53                   	push   ebx
c00151f4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00151f7:	83 c4 14             	add    esp,0x14
c00151fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00151fe:	e8 d0 28 ff ff       	call   c0007ad3 <malloc>
c0015203:	31 d2                	xor    edx,edx
c0015205:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015209:	83 c4 0c             	add    esp,0xc
c001520c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015210:	52                   	push   edx
c0015211:	50                   	push   eax
c0015212:	53                   	push   ebx
c0015213:	e8 5a 6a ff ff       	call   c000bc72 <File::seek(unsigned long long)>
c0015218:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001521a:	31 d2                	xor    edx,edx
c001521c:	89 34 24             	mov    DWORD PTR [esp],esi
c001521f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015223:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015227:	52                   	push   edx
c0015228:	50                   	push   eax
c0015229:	53                   	push   ebx
c001522a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001522d:	83 c4 20             	add    esp,0x20
c0015230:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c0015235:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001523d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015241:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0015245:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0015248:	0f 84 2b 03 00 00    	je     c0015579 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c001524e:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c0015255:	31 d2                	xor    edx,edx
c0015257:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001525b:	c1 e8 03             	shr    eax,0x3
c001525e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0015262:	51                   	push   ecx
c0015263:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015267:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001526b:	52                   	push   edx
c001526c:	50                   	push   eax
c001526d:	53                   	push   ebx
c001526e:	e8 ff 69 ff ff       	call   c000bc72 <File::seek(unsigned long long)>
c0015273:	5e                   	pop    esi
c0015274:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015278:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001527f:	e8 4f 28 ff ff       	call   c0007ad3 <malloc>
c0015284:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015286:	31 d2                	xor    edx,edx
c0015288:	89 c7                	mov    edi,eax
c001528a:	58                   	pop    eax
c001528b:	8d 44 24 58          	lea    eax,[esp+0x58]
c001528f:	50                   	push   eax
c0015290:	57                   	push   edi
c0015291:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015295:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001529c:	52                   	push   edx
c001529d:	50                   	push   eax
c001529e:	53                   	push   ebx
c001529f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00152a2:	83 c4 20             	add    esp,0x20
c00152a5:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00152ad:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00152b1:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c00152b5:	0f 8d a5 02 00 00    	jge    c0015560 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c00152bb:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c00152c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00152c4:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c00152c7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00152cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00152cf:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c00152d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00152d7:	c1 e8 08             	shr    eax,0x8
c00152da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00152de:	89 c2                	mov    edx,eax
c00152e0:	c1 e2 04             	shl    edx,0x4
c00152e3:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c00152e7:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00152ea:	85 f6                	test   esi,esi
c00152ec:	0f 85 cf 00 00 00    	jne    c00153c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00152f2:	83 ec 0c             	sub    esp,0xc
c00152f5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c00152f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152fd:	03 02                	add    eax,DWORD PTR [edx]
c00152ff:	50                   	push   eax
c0015300:	e8 63 f8 ff ff       	call   c0014b68 <Thr::getAddressOfKernelSymbol(char const*)>
c0015305:	83 c4 10             	add    esp,0x10
c0015308:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001530c:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c0015311:	85 c0                	test   eax,eax
c0015313:	89 c6                	mov    esi,eax
c0015315:	0f 85 a6 00 00 00    	jne    c00153c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c001531b:	83 ec 0c             	sub    esp,0xc
c001531e:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0015322:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015326:	03 02                	add    eax,DWORD PTR [edx]
c0015328:	50                   	push   eax
c0015329:	e8 96 c4 ff ff       	call   c00117c4 <KeResolveCompatibilitySymbol(char*)>
c001532e:	83 c4 10             	add    esp,0x10
c0015331:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015335:	85 c0                	test   eax,eax
c0015337:	89 c6                	mov    esi,eax
c0015339:	0f 85 82 00 00 00    	jne    c00153c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c001533f:	50                   	push   eax
c0015340:	50                   	push   eax
c0015341:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015345:	03 02                	add    eax,DWORD PTR [edx]
c0015347:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001534b:	50                   	push   eax
c001534c:	68 6b 28 02 c0       	push   0xc002286b
c0015351:	e8 b4 55 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015356:	58                   	pop    eax
c0015357:	5a                   	pop    edx
c0015358:	68 85 28 02 c0       	push   0xc0022885
c001535d:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015364:	51                   	push   ecx
c0015365:	e8 e6 b2 fe ff       	call   c0000650 <strcpy>
c001536a:	59                   	pop    ecx
c001536b:	58                   	pop    eax
c001536c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015370:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015374:	03 02                	add    eax,DWORD PTR [edx]
c0015376:	50                   	push   eax
c0015377:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001537e:	51                   	push   ecx
c001537f:	e8 ec b4 fe ff       	call   c0000870 <strcat>
c0015384:	58                   	pop    eax
c0015385:	5a                   	pop    edx
c0015386:	68 1b 29 02 c0       	push   0xc002291b
c001538b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015392:	51                   	push   ecx
c0015393:	e8 d8 b4 fe ff       	call   c0000870 <strcat>
c0015398:	83 c4 10             	add    esp,0x10
c001539b:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00153a0:	0f 84 77 01 00 00    	je     c001551d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00153a6:	83 ec 0c             	sub    esp,0xc
c00153a9:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00153b0:	51                   	push   ecx
c00153b1:	e8 25 c2 ff ff       	call   c00115db <KePanic(char const*)>
c00153b6:	83 c4 10             	add    esp,0x10
c00153b9:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00153bd:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00153c1:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00153c6:	83 f8 01             	cmp    eax,0x1
c00153c9:	0f 85 9b 00 00 00    	jne    c001546a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c00153cf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00153d3:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c00153da:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c00153de:	01 d0                	add    eax,edx
c00153e0:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c00153e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00153ec:	0f 94 c0             	sete   al
c00153ef:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c00153f7:	0f 94 c1             	sete   cl
c00153fa:	09 c1                	or     ecx,eax
c00153fc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015400:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0015405:	0f b6 c9             	movzx  ecx,cl
c0015408:	8b 00                	mov    eax,DWORD PTR [eax]
c001540a:	74 41                	je     c001544d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c001540c:	8d 14 06             	lea    edx,[esi+eax*1]
c001540f:	85 c9                	test   ecx,ecx
c0015411:	75 15                	jne    c0015428 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c0015413:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0015417:	66 83 f8 0c          	cmp    ax,0xc
c001541b:	76 05                	jbe    c0015422 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001541d:	b8 0c 00 00 00       	mov    eax,0xc
c0015422:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0015426:	76 37                	jbe    c001545f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0015428:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001542d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0015431:	0f 84 e6 00 00 00    	je     c001551d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0015437:	83 ec 0c             	sub    esp,0xc
c001543a:	68 9c 28 02 c0       	push   0xc002289c
c001543f:	e8 97 c1 ff ff       	call   c00115db <KePanic(char const*)>
c0015444:	83 c4 10             	add    esp,0x10
c0015447:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001544b:	eb 12                	jmp    c001545f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c001544d:	01 c2                	add    edx,eax
c001544f:	85 c9                	test   ecx,ecx
c0015451:	75 0c                	jne    c001545f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0015453:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0015457:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c001545b:	77 02                	ja     c001545f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c001545d:	01 f2                	add    edx,esi
c001545f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015463:	89 10                	mov    DWORD PTR [eax],edx
c0015465:	e9 ed 00 00 00       	jmp    c0015557 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c001546a:	83 f8 02             	cmp    eax,0x2
c001546d:	0f 85 81 00 00 00    	jne    c00154f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c0015473:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001547a:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c001547e:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0015482:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c001548a:	74 21                	je     c00154ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c001548c:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0015494:	74 17                	je     c00154ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0015496:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c001549a:	ba 0a 00 00 00       	mov    edx,0xa
c001549f:	83 f9 0e             	cmp    ecx,0xe
c00154a2:	77 03                	ja     c00154a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c00154a4:	8d 51 fc             	lea    edx,[ecx-0x4]
c00154a7:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c00154ab:	76 1f                	jbe    c00154cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c00154ad:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00154b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00154b6:	74 65                	je     c001551d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00154b8:	83 ec 0c             	sub    esp,0xc
c00154bb:	68 b8 28 02 c0       	push   0xc00228b8
c00154c0:	e8 16 c1 ff ff       	call   c00115db <KePanic(char const*)>
c00154c5:	83 c4 10             	add    esp,0x10
c00154c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154cc:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00154d1:	8b 10                	mov    edx,DWORD PTR [eax]
c00154d3:	74 15                	je     c00154ea <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c00154d5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00154d9:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c00154e0:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c00154e4:	01 d1                	add    ecx,edx
c00154e6:	01 ce                	add    esi,ecx
c00154e8:	eb 06                	jmp    c00154f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c00154ea:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c00154ee:	01 d6                	add    esi,edx
c00154f0:	89 30                	mov    DWORD PTR [eax],esi
c00154f2:	eb 63                	jmp    c0015557 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00154f4:	56                   	push   esi
c00154f5:	56                   	push   esi
c00154f6:	50                   	push   eax
c00154f7:	68 d4 28 02 c0       	push   0xc00228d4
c00154fc:	e8 09 54 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015501:	83 c4 10             	add    esp,0x10
c0015504:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0015509:	74 12                	je     c001551d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c001550b:	83 ec 0c             	sub    esp,0xc
c001550e:	68 df 28 02 c0       	push   0xc00228df
c0015513:	e8 c3 c0 ff ff       	call   c00115db <KePanic(char const*)>
c0015518:	83 c4 10             	add    esp,0x10
c001551b:	eb 3a                	jmp    c0015557 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c001551d:	83 ec 0c             	sub    esp,0xc
c0015520:	53                   	push   ebx
c0015521:	e8 ec 66 ff ff       	call   c000bc12 <File::close()>
c0015526:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015528:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001552b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001552e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015531:	e8 ad 25 ff ff       	call   c0007ae3 <free>
c0015536:	59                   	pop    ecx
c0015537:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001553b:	e8 a3 25 ff ff       	call   c0007ae3 <free>
c0015540:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015543:	e8 9b 25 ff ff       	call   c0007ae3 <free>
c0015548:	5b                   	pop    ebx
c0015549:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001554d:	e8 91 25 ff ff       	call   c0007ae3 <free>
c0015552:	83 c4 10             	add    esp,0x10
c0015555:	eb 1e                	jmp    c0015575 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0015557:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001555b:	e9 4d fd ff ff       	jmp    c00152ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c0015560:	83 ec 0c             	sub    esp,0xc
c0015563:	57                   	push   edi
c0015564:	e8 7a 25 ff ff       	call   c0007ae3 <free>
c0015569:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001556d:	83 c4 10             	add    esp,0x10
c0015570:	e9 cc fc ff ff       	jmp    c0015241 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c0015575:	31 c0                	xor    eax,eax
c0015577:	eb 32                	jmp    c00155ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c0015579:	83 ec 0c             	sub    esp,0xc
c001557c:	53                   	push   ebx
c001557d:	e8 90 66 ff ff       	call   c000bc12 <File::close()>
c0015582:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015584:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015587:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001558a:	58                   	pop    eax
c001558b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001558f:	e8 4f 25 ff ff       	call   c0007ae3 <free>
c0015594:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015597:	e8 47 25 ff ff       	call   c0007ae3 <free>
c001559c:	5a                   	pop    edx
c001559d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00155a1:	e8 3d 25 ff ff       	call   c0007ae3 <free>
c00155a6:	83 c4 10             	add    esp,0x10
c00155a9:	b0 01                	mov    al,0x1
c00155ab:	81 c4 5c 03 00 00    	add    esp,0x35c
c00155b1:	5b                   	pop    ebx
c00155b2:	5e                   	pop    esi
c00155b3:	5f                   	pop    edi
c00155b4:	5d                   	pop    ebp
c00155b5:	c3                   	ret    

c00155b6 <Thr::getDriverBaseFromAddress(unsigned long)>:
c00155b6:	56                   	push   esi
c00155b7:	31 d2                	xor    edx,edx
c00155b9:	53                   	push   ebx
c00155ba:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c00155c0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00155c4:	39 d3                	cmp    ebx,edx
c00155c6:	7e 1b                	jle    c00155e3 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00155c8:	8b 04 95 20 c1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3ee0]
c00155cf:	39 c8                	cmp    eax,ecx
c00155d1:	77 0d                	ja     c00155e0 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00155d3:	8b 34 95 20 bf 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd40e0]
c00155da:	01 c6                	add    esi,eax
c00155dc:	39 ce                	cmp    esi,ecx
c00155de:	77 05                	ja     c00155e5 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00155e0:	42                   	inc    edx
c00155e1:	eb e1                	jmp    c00155c4 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00155e3:	31 c0                	xor    eax,eax
c00155e5:	5b                   	pop    ebx
c00155e6:	5e                   	pop    esi
c00155e7:	c3                   	ret    

c00155e8 <Thr::getDriverNameFromAddress(unsigned long)>:
c00155e8:	53                   	push   ebx
c00155e9:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c00155ef:	31 c0                	xor    eax,eax
c00155f1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00155f5:	39 c3                	cmp    ebx,eax
c00155f7:	7e 22                	jle    c001561b <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00155f9:	8b 14 85 20 c1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3ee0]
c0015600:	39 ca                	cmp    edx,ecx
c0015602:	77 14                	ja     c0015618 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015604:	03 14 85 20 bf 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd40e0]
c001560b:	39 ca                	cmp    edx,ecx
c001560d:	76 09                	jbe    c0015618 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001560f:	8b 04 85 20 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3ce0]
c0015616:	eb 05                	jmp    c001561d <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0015618:	40                   	inc    eax
c0015619:	eb da                	jmp    c00155f5 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001561b:	31 c0                	xor    eax,eax
c001561d:	5b                   	pop    ebx
c001561e:	c3                   	ret    

c001561f <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001561f:	53                   	push   ebx
c0015620:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015624:	53                   	push   ebx
c0015625:	e8 8c ff ff ff       	call   c00155b6 <Thr::getDriverBaseFromAddress(unsigned long)>
c001562a:	5a                   	pop    edx
c001562b:	31 d2                	xor    edx,edx
c001562d:	85 c0                	test   eax,eax
c001562f:	74 04                	je     c0015635 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0015631:	89 da                	mov    edx,ebx
c0015633:	29 c2                	sub    edx,eax
c0015635:	5b                   	pop    ebx
c0015636:	89 d0                	mov    eax,edx
c0015638:	c3                   	ret    

c0015639 <Thr::loadDLL(char const*, bool)>:
c0015639:	55                   	push   ebp
c001563a:	57                   	push   edi
c001563b:	56                   	push   esi
c001563c:	53                   	push   ebx
c001563d:	81 ec 34 01 00 00    	sub    esp,0x134
c0015643:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001564a:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0015651:	56                   	push   esi
c0015652:	68 f7 28 02 c0       	push   0xc00228f7
c0015657:	e8 ae 52 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001565c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015663:	e8 6b 24 ff ff       	call   c0007ad3 <malloc>
c0015668:	83 c4 0c             	add    esp,0xc
c001566b:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0015671:	56                   	push   esi
c0015672:	50                   	push   eax
c0015673:	89 c3                	mov    ebx,eax
c0015675:	e8 1c 65 ff ff       	call   c000bb96 <File::File(char const*, Process*)>
c001567a:	83 c4 10             	add    esp,0x10
c001567d:	85 db                	test   ebx,ebx
c001567f:	75 3c                	jne    c00156bd <Thr::loadDLL(char const*, bool)+0x84>
c0015681:	89 e8                	mov    eax,ebp
c0015683:	84 c0                	test   al,al
c0015685:	0f 84 e1 01 00 00    	je     c001586c <Thr::loadDLL(char const*, bool)+0x233>
c001568b:	50                   	push   eax
c001568c:	50                   	push   eax
c001568d:	68 08 29 02 c0       	push   0xc0022908
c0015692:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c0015696:	57                   	push   edi
c0015697:	e8 b4 af fe ff       	call   c0000650 <strcpy>
c001569c:	58                   	pop    eax
c001569d:	5a                   	pop    edx
c001569e:	56                   	push   esi
c001569f:	57                   	push   edi
c00156a0:	e8 cb b1 fe ff       	call   c0000870 <strcat>
c00156a5:	59                   	pop    ecx
c00156a6:	58                   	pop    eax
c00156a7:	68 1b 29 02 c0       	push   0xc002291b
c00156ac:	57                   	push   edi
c00156ad:	e8 be b1 fe ff       	call   c0000870 <strcat>
c00156b2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00156b5:	e8 21 bf ff ff       	call   c00115db <KePanic(char const*)>
c00156ba:	83 c4 10             	add    esp,0x10
c00156bd:	50                   	push   eax
c00156be:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00156c2:	50                   	push   eax
c00156c3:	8d 44 24 20          	lea    eax,[esp+0x20]
c00156c7:	50                   	push   eax
c00156c8:	53                   	push   ebx
c00156c9:	e8 e8 67 ff ff       	call   c000beb6 <File::stat(unsigned long long*, bool*)>
c00156ce:	83 c4 10             	add    esp,0x10
c00156d1:	85 db                	test   ebx,ebx
c00156d3:	74 0c                	je     c00156e1 <Thr::loadDLL(char const*, bool)+0xa8>
c00156d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00156d7:	83 ec 0c             	sub    esp,0xc
c00156da:	53                   	push   ebx
c00156db:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00156de:	83 c4 10             	add    esp,0x10
c00156e1:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00156e6:	75 0a                	jne    c00156f2 <Thr::loadDLL(char const*, bool)+0xb9>
c00156e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00156ec:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00156f0:	75 3e                	jne    c0015730 <Thr::loadDLL(char const*, bool)+0xf7>
c00156f2:	89 e8                	mov    eax,ebp
c00156f4:	31 db                	xor    ebx,ebx
c00156f6:	84 c0                	test   al,al
c00156f8:	0f 84 6e 01 00 00    	je     c001586c <Thr::loadDLL(char const*, bool)+0x233>
c00156fe:	50                   	push   eax
c00156ff:	50                   	push   eax
c0015700:	68 08 29 02 c0       	push   0xc0022908
c0015705:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0015709:	53                   	push   ebx
c001570a:	e8 41 af fe ff       	call   c0000650 <strcpy>
c001570f:	58                   	pop    eax
c0015710:	5a                   	pop    edx
c0015711:	56                   	push   esi
c0015712:	53                   	push   ebx
c0015713:	e8 58 b1 fe ff       	call   c0000870 <strcat>
c0015718:	59                   	pop    ecx
c0015719:	5f                   	pop    edi
c001571a:	68 1b 29 02 c0       	push   0xc002291b
c001571f:	53                   	push   ebx
c0015720:	e8 4b b1 fe ff       	call   c0000870 <strcat>
c0015725:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015728:	e8 ae be ff ff       	call   c00115db <KePanic(char const*)>
c001572d:	83 c4 10             	add    esp,0x10
c0015730:	53                   	push   ebx
c0015731:	6a 03                	push   0x3
c0015733:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015737:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001573b:	05 ff 0f 00 00       	add    eax,0xfff
c0015740:	83 d2 00             	adc    edx,0x0
c0015743:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015747:	50                   	push   eax
c0015748:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001574e:	e8 b3 46 ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c0015753:	89 c3                	mov    ebx,eax
c0015755:	58                   	pop    eax
c0015756:	5a                   	pop    edx
c0015757:	53                   	push   ebx
c0015758:	68 f2 0d 02 c0       	push   0xc0020df2
c001575d:	e8 a8 51 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015762:	89 34 24             	mov    DWORD PTR [esp],esi
c0015765:	e8 16 ae fe ff       	call   c0000580 <strlen>
c001576a:	8b 3d 00 bf 02 c0    	mov    edi,DWORD PTR ds:0xc002bf00
c0015770:	40                   	inc    eax
c0015771:	89 04 24             	mov    DWORD PTR [esp],eax
c0015774:	e8 5a 23 ff ff       	call   c0007ad3 <malloc>
c0015779:	59                   	pop    ecx
c001577a:	89 04 bd 20 c3 02 c0 	mov    DWORD PTR [edi*4-0x3ffd3ce0],eax
c0015781:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c0015786:	5f                   	pop    edi
c0015787:	56                   	push   esi
c0015788:	ff 34 85 20 c3 02 c0 	push   DWORD PTR [eax*4-0x3ffd3ce0]
c001578f:	e8 bc ae fe ff       	call   c0000650 <strcpy>
c0015794:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c0015799:	89 1c 85 20 c1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3ee0],ebx
c00157a0:	8d 50 01             	lea    edx,[eax+0x1]
c00157a3:	89 15 00 bf 02 c0    	mov    DWORD PTR ds:0xc002bf00,edx
c00157a9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00157ad:	83 c4 0c             	add    esp,0xc
c00157b0:	6a 01                	push   0x1
c00157b2:	53                   	push   ebx
c00157b3:	56                   	push   esi
c00157b4:	89 14 85 20 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd40e0],edx
c00157bb:	e8 b5 f6 ff ff       	call   c0014e75 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00157c0:	83 c4 10             	add    esp,0x10
c00157c3:	89 c7                	mov    edi,eax
c00157c5:	89 f8                	mov    eax,edi
c00157c7:	83 f0 01             	xor    eax,0x1
c00157ca:	84 c0                	test   al,al
c00157cc:	74 18                	je     c00157e6 <Thr::loadDLL(char const*, bool)+0x1ad>
c00157ce:	89 e8                	mov    eax,ebp
c00157d0:	84 c0                	test   al,al
c00157d2:	74 12                	je     c00157e6 <Thr::loadDLL(char const*, bool)+0x1ad>
c00157d4:	83 ec 0c             	sub    esp,0xc
c00157d7:	68 1d 29 02 c0       	push   0xc002291d
c00157dc:	e8 fa bd ff ff       	call   c00115db <KePanic(char const*)>
c00157e1:	83 c4 10             	add    esp,0x10
c00157e4:	eb 06                	jmp    c00157ec <Thr::loadDLL(char const*, bool)+0x1b3>
c00157e6:	89 f8                	mov    eax,edi
c00157e8:	84 c0                	test   al,al
c00157ea:	75 10                	jne    c00157fc <Thr::loadDLL(char const*, bool)+0x1c3>
c00157ec:	83 ec 0c             	sub    esp,0xc
c00157ef:	68 3c 29 02 c0       	push   0xc002293c
c00157f4:	e8 e2 bd ff ff       	call   c00115db <KePanic(char const*)>
c00157f9:	83 c4 10             	add    esp,0x10
c00157fc:	31 f6                	xor    esi,esi
c00157fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015802:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015806:	05 ff 0f 00 00       	add    eax,0xfff
c001580b:	83 d2 00             	adc    edx,0x0
c001580e:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015812:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015816:	c1 ea 0c             	shr    edx,0xc
c0015819:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001581d:	ba 00 00 00 00       	mov    edx,0x0
c0015822:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0015826:	89 d0                	mov    eax,edx
c0015828:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001582c:	73 32                	jae    c0015860 <Thr::loadDLL(char const*, bool)+0x227>
c001582e:	50                   	push   eax
c001582f:	50                   	push   eax
c0015830:	89 f0                	mov    eax,esi
c0015832:	c1 e0 0c             	shl    eax,0xc
c0015835:	01 d8                	add    eax,ebx
c0015837:	50                   	push   eax
c0015838:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001583e:	e8 a7 40 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0015843:	83 c4 10             	add    esp,0x10
c0015846:	8b 00                	mov    eax,DWORD PTR [eax]
c0015848:	a8 60                	test   al,0x60
c001584a:	75 11                	jne    c001585d <Thr::loadDLL(char const*, bool)+0x224>
c001584c:	83 ec 0c             	sub    esp,0xc
c001584f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015854:	50                   	push   eax
c0015855:	e8 1f 25 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c001585a:	83 c4 10             	add    esp,0x10
c001585d:	46                   	inc    esi
c001585e:	eb 9e                	jmp    c00157fe <Thr::loadDLL(char const*, bool)+0x1c5>
c0015860:	89 f8                	mov    eax,edi
c0015862:	84 c0                	test   al,al
c0015864:	b8 00 00 00 00       	mov    eax,0x0
c0015869:	0f 44 d8             	cmove  ebx,eax
c001586c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015872:	89 d8                	mov    eax,ebx
c0015874:	5b                   	pop    ebx
c0015875:	5e                   	pop    esi
c0015876:	5f                   	pop    edi
c0015877:	5d                   	pop    ebp
c0015878:	c3                   	ret    

c0015879 <Thr::executeDLL(unsigned long, void*)>:
c0015879:	56                   	push   esi
c001587a:	53                   	push   ebx
c001587b:	52                   	push   edx
c001587c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015880:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015884:	85 db                	test   ebx,ebx
c0015886:	75 10                	jne    c0015898 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0015888:	83 ec 0c             	sub    esp,0xc
c001588b:	68 58 29 02 c0       	push   0xc0022958
c0015890:	e8 46 bd ff ff       	call   c00115db <KePanic(char const*)>
c0015895:	83 c4 10             	add    esp,0x10
c0015898:	50                   	push   eax
c0015899:	50                   	push   eax
c001589a:	53                   	push   ebx
c001589b:	68 82 29 02 c0       	push   0xc0022982
c00158a0:	e8 65 50 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00158a5:	89 d8                	mov    eax,ebx
c00158a7:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00158ab:	83 c4 14             	add    esp,0x14
c00158ae:	5b                   	pop    ebx
c00158af:	5e                   	pop    esi
c00158b0:	ff e0                	jmp    eax
c00158b2:	66 90                	xchg   ax,ax

c00158b4 <userModeEntryPoint(void*)>:
c00158b4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00158b9:	83 e8 01             	sub    eax,0x1
c00158bc:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00158c1:	75 01                	jne    c00158c4 <userModeEntryPoint(void*)+0x10>
c00158c3:	fb                   	sti    
c00158c4:	fb                   	sti    
c00158c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158ca:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158cd:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00158d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00158d7:	e9 63 a9 fe ff       	jmp    c000023f <goToUsermode>

c00158dc <changeTSS>:
c00158dc:	83 ec 14             	sub    esp,0x14
c00158df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158e4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00158e7:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00158ec:	c1 e2 15             	shl    edx,0x15
c00158ef:	29 d0                	sub    eax,edx
c00158f1:	50                   	push   eax
c00158f2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00158f7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00158fd:	05 7c 11 00 00       	add    eax,0x117c
c0015902:	50                   	push   eax
c0015903:	e8 34 36 ff ff       	call   c0008f3c <TSS::setESP(unsigned long)>
c0015908:	83 c4 1c             	add    esp,0x1c
c001590b:	c3                   	ret    

c001590c <switchToThread(ThreadControlBlock*)>:
c001590c:	57                   	push   edi
c001590d:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0015913:	56                   	push   esi
c0015914:	53                   	push   ebx
c0015915:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015919:	85 c9                	test   ecx,ecx
c001591b:	0f 85 8b 00 00 00    	jne    c00159ac <switchToThread(ThreadControlBlock*)+0xa0>
c0015921:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0015925:	81 fa ff 00 00 00    	cmp    edx,0xff
c001592b:	74 7b                	je     c00159a8 <switchToThread(ThreadControlBlock*)+0x9c>
c001592d:	b8 00 04 00 00       	mov    eax,0x400
c0015932:	29 d0                	sub    eax,edx
c0015934:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0015937:	d1 f8                	sar    eax,1
c0015939:	01 d0                	add    eax,edx
c001593b:	90                   	nop
c001593c:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c001593f:	e8 04 28 00 00       	call   c0018148 <HalQueryPerformanceCounter()>
c0015944:	a3 08 c7 02 c0       	mov    ds:0xc002c708,eax
c0015949:	89 c6                	mov    esi,eax
c001594b:	89 d7                	mov    edi,edx
c001594d:	2b 35 f8 c6 02 c0    	sub    esi,DWORD PTR ds:0xc002c6f8
c0015953:	a3 f8 c6 02 c0       	mov    ds:0xc002c6f8,eax
c0015958:	1b 3d fc c6 02 c0    	sbb    edi,DWORD PTR ds:0xc002c6fc
c001595e:	89 35 00 c7 02 c0    	mov    DWORD PTR ds:0xc002c700,esi
c0015964:	89 15 0c c7 02 c0    	mov    DWORD PTR ds:0xc002c70c,edx
c001596a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015970:	89 15 fc c6 02 c0    	mov    DWORD PTR ds:0xc002c6fc,edx
c0015976:	89 3d 04 c7 02 c0    	mov    DWORD PTR ds:0xc002c704,edi
c001597c:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c001597f:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0015982:	01 c6                	add    esi,eax
c0015984:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0015987:	11 d7                	adc    edi,edx
c0015989:	83 ec 0c             	sub    esp,0xc
c001598c:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c001598f:	53                   	push   ebx
c0015990:	e8 e2 a8 fe ff       	call   c0000277 <switchToThreadASM>
c0015995:	0f 20 c0             	mov    eax,cr0
c0015998:	83 c8 08             	or     eax,0x8
c001599b:	0f 22 c0             	mov    cr0,eax
c001599e:	83 c4 10             	add    esp,0x10
c00159a1:	5b                   	pop    ebx
c00159a2:	5e                   	pop    esi
c00159a3:	5f                   	pop    edi
c00159a4:	c3                   	ret    
c00159a5:	8d 76 00             	lea    esi,[esi+0x0]
c00159a8:	31 c0                	xor    eax,eax
c00159aa:	eb 90                	jmp    c001593c <switchToThread(ThreadControlBlock*)+0x30>
c00159ac:	5b                   	pop    ebx
c00159ad:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c00159b7:	5e                   	pop    esi
c00159b8:	5f                   	pop    edi
c00159b9:	c3                   	ret    
c00159ba:	66 90                	xchg   ax,ax

c00159bc <Process::addArgs(char**)>:
c00159bc:	57                   	push   edi
c00159bd:	56                   	push   esi
c00159be:	53                   	push   ebx
c00159bf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00159c3:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00159c7:	85 f6                	test   esi,esi
c00159c9:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c00159d3:	74 4f                	je     c0015a24 <Process::addArgs(char**)+0x68>
c00159d5:	8b 06                	mov    eax,DWORD PTR [esi]
c00159d7:	85 c0                	test   eax,eax
c00159d9:	74 49                	je     c0015a24 <Process::addArgs(char**)+0x68>
c00159db:	31 db                	xor    ebx,ebx
c00159dd:	8d 76 00             	lea    esi,[esi+0x0]
c00159e0:	83 ec 0c             	sub    esp,0xc
c00159e3:	50                   	push   eax
c00159e4:	e8 97 ab fe ff       	call   c0000580 <strlen>
c00159e9:	83 c0 01             	add    eax,0x1
c00159ec:	89 04 24             	mov    DWORD PTR [esp],eax
c00159ef:	e8 df 20 ff ff       	call   c0007ad3 <malloc>
c00159f4:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c00159fb:	5a                   	pop    edx
c00159fc:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c00159ff:	83 c3 01             	add    ebx,0x1
c0015a02:	59                   	pop    ecx
c0015a03:	52                   	push   edx
c0015a04:	50                   	push   eax
c0015a05:	e8 46 ac fe ff       	call   c0000650 <strcpy>
c0015a0a:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c0015a10:	83 c4 10             	add    esp,0x10
c0015a13:	83 c1 01             	add    ecx,0x1
c0015a16:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c0015a1c:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0015a1f:	85 c0                	test   eax,eax
c0015a21:	75 bd                	jne    c00159e0 <Process::addArgs(char**)+0x24>
c0015a23:	90                   	nop
c0015a24:	5b                   	pop    ebx
c0015a25:	5e                   	pop    esi
c0015a26:	5f                   	pop    edi
c0015a27:	c3                   	ret    

c0015a28 <Process::Process(char const*, Process*, char**)>:
c0015a28:	56                   	push   esi
c0015a29:	53                   	push   ebx
c0015a2a:	83 ec 14             	sub    esp,0x14
c0015a2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a31:	05 0c 02 00 00       	add    eax,0x20c
c0015a36:	bb 07 00 00 00       	mov    ebx,0x7
c0015a3b:	89 c6                	mov    esi,eax
c0015a3d:	8d 76 00             	lea    esi,[esi+0x0]
c0015a40:	85 db                	test   ebx,ebx
c0015a42:	78 14                	js     c0015a58 <Process::Process(char const*, Process*, char**)+0x30>
c0015a44:	83 ec 0c             	sub    esp,0xc
c0015a47:	56                   	push   esi
c0015a48:	e8 2b a6 00 00       	call   c0020078 <ThreadControlBlock::ThreadControlBlock()>
c0015a4d:	83 c4 10             	add    esp,0x10
c0015a50:	83 c6 5f             	add    esi,0x5f
c0015a53:	83 eb 01             	sub    ebx,0x1
c0015a56:	eb e8                	jmp    c0015a40 <Process::Process(char const*, Process*, char**)+0x18>
c0015a58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a5c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015a63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a67:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015a6e:	83 ec 0c             	sub    esp,0xc
c0015a71:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015a75:	e8 56 b9 ff ff       	call   c00113d0 <KeNewProcessEnv(Process*)>
c0015a7a:	83 c4 10             	add    esp,0x10
c0015a7d:	89 c2                	mov    edx,eax
c0015a7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a83:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015a89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a8d:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015a96:	a1 a0 3f 02 c0       	mov    eax,ds:0xc0023fa0
c0015a9b:	8d 50 01             	lea    edx,[eax+0x1]
c0015a9e:	89 15 a0 3f 02 c0    	mov    DWORD PTR ds:0xc0023fa0,edx
c0015aa4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015aa8:	89 02                	mov    DWORD PTR [edx],eax
c0015aaa:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0015ab2:	83 ec 0c             	sub    esp,0xc
c0015ab5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015ab9:	e8 15 20 ff ff       	call   c0007ad3 <malloc>
c0015abe:	83 c4 10             	add    esp,0x10
c0015ac1:	89 c3                	mov    ebx,eax
c0015ac3:	83 ec 08             	sub    esp,0x8
c0015ac6:	6a 00                	push   0x0
c0015ac8:	53                   	push   ebx
c0015ac9:	e8 84 45 ff ff       	call   c000a052 <VAS::VAS(bool)>
c0015ace:	83 c4 10             	add    esp,0x10
c0015ad1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ad5:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015adb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015adf:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015ae9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015aed:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015af1:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015af7:	e8 f6 be ff ff       	call   c00119f2 <KeInitSignals()>
c0015afc:	89 c2                	mov    edx,eax
c0015afe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b02:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015b08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b0c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015b12:	85 c0                	test   eax,eax
c0015b14:	74 42                	je     c0015b58 <Process::Process(char const*, Process*, char**)+0x130>
c0015b16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b1a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015b20:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015b26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b2a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015b30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b34:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015b3a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015b40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b44:	05 0c 01 00 00       	add    eax,0x10c
c0015b49:	83 ec 08             	sub    esp,0x8
c0015b4c:	52                   	push   edx
c0015b4d:	50                   	push   eax
c0015b4e:	e8 fd aa fe ff       	call   c0000650 <strcpy>
c0015b53:	83 c4 10             	add    esp,0x10
c0015b56:	eb 64                	jmp    c0015bbc <Process::Process(char const*, Process*, char**)+0x194>
c0015b58:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015b60:	83 ec 0c             	sub    esp,0xc
c0015b63:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015b67:	e8 67 1f ff ff       	call   c0007ad3 <malloc>
c0015b6c:	83 c4 10             	add    esp,0x10
c0015b6f:	89 c3                	mov    ebx,eax
c0015b71:	83 ec 08             	sub    esp,0x8
c0015b74:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b78:	53                   	push   ebx
c0015b79:	e8 ee 30 ff ff       	call   c0008c6c <VgaText::VgaText(char const*)>
c0015b7e:	83 c4 10             	add    esp,0x10
c0015b81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b85:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015b8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b8f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015b95:	83 ec 0c             	sub    esp,0xc
c0015b98:	50                   	push   eax
c0015b99:	e8 7c 29 ff ff       	call   c000851a <addToTerminalCycle(VgaText*)>
c0015b9e:	83 c4 10             	add    esp,0x10
c0015ba1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ba5:	05 0c 01 00 00       	add    eax,0x10c
c0015baa:	83 ec 08             	sub    esp,0x8
c0015bad:	68 a1 29 02 c0       	push   0xc00229a1
c0015bb2:	50                   	push   eax
c0015bb3:	e8 98 aa fe ff       	call   c0000650 <strcpy>
c0015bb8:	83 c4 10             	add    esp,0x10
c0015bbb:	90                   	nop
c0015bbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bc0:	83 c0 0c             	add    eax,0xc
c0015bc3:	83 ec 08             	sub    esp,0x8
c0015bc6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015bca:	50                   	push   eax
c0015bcb:	e8 80 aa fe ff       	call   c0000650 <strcpy>
c0015bd0:	83 c4 10             	add    esp,0x10
c0015bd3:	83 ec 08             	sub    esp,0x8
c0015bd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015bda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015bde:	e8 d9 fd ff ff       	call   c00159bc <Process::addArgs(char**)>
c0015be3:	83 c4 10             	add    esp,0x10
c0015be6:	83 ec 08             	sub    esp,0x8
c0015be9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015bed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015bf1:	e8 40 ed ff ff       	call   c0014936 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015bf6:	83 c4 10             	add    esp,0x10
c0015bf9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015bfd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015c01:	83 f0 01             	xor    eax,0x1
c0015c04:	88 c2                	mov    dl,al
c0015c06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c0a:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015c10:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015c15:	83 ec 04             	sub    esp,0x4
c0015c18:	50                   	push   eax
c0015c19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c1d:	68 f8 29 02 c0       	push   0xc00229f8
c0015c22:	e8 e3 4c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015c27:	83 c4 10             	add    esp,0x10
c0015c2a:	90                   	nop
c0015c2b:	83 c4 14             	add    esp,0x14
c0015c2e:	5b                   	pop    ebx
c0015c2f:	5e                   	pop    esi
c0015c30:	c3                   	ret    
c0015c31:	90                   	nop
c0015c32:	66 90                	xchg   ax,ax

c0015c34 <Process::Process(bool, char const*, Process*, char**)>:
c0015c34:	56                   	push   esi
c0015c35:	53                   	push   ebx
c0015c36:	83 ec 24             	sub    esp,0x24
c0015c39:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015c3d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015c41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c45:	05 0c 02 00 00       	add    eax,0x20c
c0015c4a:	bb 07 00 00 00       	mov    ebx,0x7
c0015c4f:	89 c6                	mov    esi,eax
c0015c51:	8d 76 00             	lea    esi,[esi+0x0]
c0015c54:	85 db                	test   ebx,ebx
c0015c56:	78 14                	js     c0015c6c <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015c58:	83 ec 0c             	sub    esp,0xc
c0015c5b:	56                   	push   esi
c0015c5c:	e8 17 a4 00 00       	call   c0020078 <ThreadControlBlock::ThreadControlBlock()>
c0015c61:	83 c4 10             	add    esp,0x10
c0015c64:	83 c6 5f             	add    esi,0x5f
c0015c67:	83 eb 01             	sub    ebx,0x1
c0015c6a:	eb e8                	jmp    c0015c54 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015c6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c70:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015c77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c7b:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015c82:	83 ec 0c             	sub    esp,0xc
c0015c85:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015c89:	e8 42 b7 ff ff       	call   c00113d0 <KeNewProcessEnv(Process*)>
c0015c8e:	83 c4 10             	add    esp,0x10
c0015c91:	89 c2                	mov    edx,eax
c0015c93:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c97:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015c9d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ca1:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015caa:	a1 a0 3f 02 c0       	mov    eax,ds:0xc0023fa0
c0015caf:	8d 50 01             	lea    edx,[eax+0x1]
c0015cb2:	89 15 a0 3f 02 c0    	mov    DWORD PTR ds:0xc0023fa0,edx
c0015cb8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015cbc:	89 02                	mov    DWORD PTR [edx],eax
c0015cbe:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0015cc6:	83 ec 0c             	sub    esp,0xc
c0015cc9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015ccd:	e8 01 1e ff ff       	call   c0007ad3 <malloc>
c0015cd2:	83 c4 10             	add    esp,0x10
c0015cd5:	89 c3                	mov    ebx,eax
c0015cd7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015cdc:	83 ec 08             	sub    esp,0x8
c0015cdf:	50                   	push   eax
c0015ce0:	53                   	push   ebx
c0015ce1:	e8 6c 43 ff ff       	call   c000a052 <VAS::VAS(bool)>
c0015ce6:	83 c4 10             	add    esp,0x10
c0015ce9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ced:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015cf3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cf7:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015d01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d05:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015d09:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015d0f:	e8 de bc ff ff       	call   c00119f2 <KeInitSignals()>
c0015d14:	89 c2                	mov    edx,eax
c0015d16:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d1a:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015d20:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d24:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015d2a:	85 c0                	test   eax,eax
c0015d2c:	74 42                	je     c0015d70 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015d2e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d32:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015d38:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015d3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d42:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015d48:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d4c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015d52:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015d58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d5c:	05 0c 01 00 00       	add    eax,0x10c
c0015d61:	83 ec 08             	sub    esp,0x8
c0015d64:	52                   	push   edx
c0015d65:	50                   	push   eax
c0015d66:	e8 e5 a8 fe ff       	call   c0000650 <strcpy>
c0015d6b:	83 c4 10             	add    esp,0x10
c0015d6e:	eb 64                	jmp    c0015dd4 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015d70:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015d78:	83 ec 0c             	sub    esp,0xc
c0015d7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015d7f:	e8 4f 1d ff ff       	call   c0007ad3 <malloc>
c0015d84:	83 c4 10             	add    esp,0x10
c0015d87:	89 c3                	mov    ebx,eax
c0015d89:	83 ec 08             	sub    esp,0x8
c0015d8c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015d90:	53                   	push   ebx
c0015d91:	e8 d6 2e ff ff       	call   c0008c6c <VgaText::VgaText(char const*)>
c0015d96:	83 c4 10             	add    esp,0x10
c0015d99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d9d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015da3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015da7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015dad:	83 ec 0c             	sub    esp,0xc
c0015db0:	50                   	push   eax
c0015db1:	e8 64 27 ff ff       	call   c000851a <addToTerminalCycle(VgaText*)>
c0015db6:	83 c4 10             	add    esp,0x10
c0015db9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dbd:	05 0c 01 00 00       	add    eax,0x10c
c0015dc2:	83 ec 08             	sub    esp,0x8
c0015dc5:	68 a1 29 02 c0       	push   0xc00229a1
c0015dca:	50                   	push   eax
c0015dcb:	e8 80 a8 fe ff       	call   c0000650 <strcpy>
c0015dd0:	83 c4 10             	add    esp,0x10
c0015dd3:	90                   	nop
c0015dd4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dd8:	83 c0 0c             	add    eax,0xc
c0015ddb:	83 ec 08             	sub    esp,0x8
c0015dde:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015de2:	50                   	push   eax
c0015de3:	e8 68 a8 fe ff       	call   c0000650 <strcpy>
c0015de8:	83 c4 10             	add    esp,0x10
c0015deb:	83 ec 08             	sub    esp,0x8
c0015dee:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015df2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015df6:	e8 c1 fb ff ff       	call   c00159bc <Process::addArgs(char**)>
c0015dfb:	83 c4 10             	add    esp,0x10
c0015dfe:	90                   	nop
c0015dff:	83 c4 24             	add    esp,0x24
c0015e02:	5b                   	pop    ebx
c0015e03:	5e                   	pop    esi
c0015e04:	c3                   	ret    
c0015e05:	8d 76 00             	lea    esi,[esi+0x0]

c0015e08 <taskStartupFunction>:
c0015e08:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e0d:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015e10:	c3                   	ret    
c0015e11:	90                   	nop
c0015e12:	66 90                	xchg   ax,ax

c0015e14 <Semaphore::Semaphore(int)>:
c0015e14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e18:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015e1c:	89 10                	mov    DWORD PTR [eax],edx
c0015e1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e22:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0015e29:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e2d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015e34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e38:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015e3f:	90                   	nop
c0015e40:	c3                   	ret    
c0015e41:	90                   	nop
c0015e42:	66 90                	xchg   ax,ax

c0015e44 <Mutex::Mutex()>:
c0015e44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e48:	6a 01                	push   0x1
c0015e4a:	50                   	push   eax
c0015e4b:	e8 c4 ff ff ff       	call   c0015e14 <Semaphore::Semaphore(int)>
c0015e50:	83 c4 08             	add    esp,0x8
c0015e53:	90                   	nop
c0015e54:	c3                   	ret    
c0015e55:	90                   	nop
c0015e56:	66 90                	xchg   ax,ax

c0015e58 <Process::createThread(void (*)(void*), void*, int)>:
c0015e58:	57                   	push   edi
c0015e59:	31 c9                	xor    ecx,ecx
c0015e5b:	56                   	push   esi
c0015e5c:	53                   	push   ebx
c0015e5d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015e61:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015e68:	89 f2                	mov    edx,esi
c0015e6a:	66 90                	xchg   ax,ax
c0015e6c:	0f b7 c2             	movzx  eax,dx
c0015e6f:	80 e2 01             	and    dl,0x1
c0015e72:	74 14                	je     c0015e88 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015e74:	d1 f8                	sar    eax,1
c0015e76:	83 c1 01             	add    ecx,0x1
c0015e79:	83 f9 10             	cmp    ecx,0x10
c0015e7c:	89 c2                	mov    edx,eax
c0015e7e:	75 ec                	jne    c0015e6c <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015e80:	31 db                	xor    ebx,ebx
c0015e82:	89 d8                	mov    eax,ebx
c0015e84:	5b                   	pop    ebx
c0015e85:	5e                   	pop    esi
c0015e86:	5f                   	pop    edi
c0015e87:	c3                   	ret    
c0015e88:	b8 01 00 00 00       	mov    eax,0x1
c0015e8d:	d3 e0                	shl    eax,cl
c0015e8f:	09 c6                	or     esi,eax
c0015e91:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015e98:	8d 04 49             	lea    eax,[ecx+ecx*2]
c0015e9b:	c1 e0 05             	shl    eax,0x5
c0015e9e:	29 c8                	sub    eax,ecx
c0015ea0:	01 d8                	add    eax,ebx
c0015ea2:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015ea9:	75 0d                	jne    c0015eb8 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015eab:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015eb5:	8d 76 00             	lea    esi,[esi+0x0]
c0015eb8:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015ebe:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0015ec1:	83 ec 0c             	sub    esp,0xc
c0015ec4:	c1 e6 05             	shl    esi,0x5
c0015ec7:	29 ce                	sub    esi,ecx
c0015ec9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015ecc:	8d 04 33             	lea    eax,[ebx+esi*1]
c0015ecf:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015ed5:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0015edb:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015ee1:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0015ee8:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015eee:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015ef2:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015ef8:	89 ca                	mov    edx,ecx
c0015efa:	f7 da                	neg    edx
c0015efc:	c1 e2 15             	shl    edx,0x15
c0015eff:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015f05:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015f0b:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0015f0f:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015f19:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015f1f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015f23:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015f29:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015f33:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015f3d:	68 00 01 00 00       	push   0x100
c0015f42:	e8 8c 1b ff ff       	call   c0007ad3 <malloc>
c0015f47:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0015f4a:	58                   	pop    eax
c0015f4b:	5a                   	pop    edx
c0015f4c:	53                   	push   ebx
c0015f4d:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015f52:	e8 b9 9e 00 00       	call   c001fe10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015f57:	83 c4 10             	add    esp,0x10
c0015f5a:	89 d8                	mov    eax,ebx
c0015f5c:	5b                   	pop    ebx
c0015f5d:	5e                   	pop    esi
c0015f5e:	5f                   	pop    edi
c0015f5f:	c3                   	ret    

c0015f60 <Process::createUserThread()>:
c0015f60:	83 ec 0c             	sub    esp,0xc
c0015f63:	68 80 00 00 00       	push   0x80
c0015f68:	6a 00                	push   0x0
c0015f6a:	68 b4 58 01 c0       	push   0xc00158b4
c0015f6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015f73:	50                   	push   eax
c0015f74:	e8 df fe ff ff       	call   c0015e58 <Process::createThread(void (*)(void*), void*, int)>
c0015f79:	83 c4 1c             	add    esp,0x1c
c0015f7c:	c3                   	ret    
c0015f7d:	8d 76 00             	lea    esi,[esi+0x0]

c0015f80 <setupMultitasking(void (*)())>:
c0015f80:	56                   	push   esi
c0015f81:	53                   	push   ebx
c0015f82:	83 ec 04             	sub    esp,0x4
c0015f85:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f89:	eb 11                	jmp    c0015f9c <setupMultitasking(void (*)())+0x1c>
c0015f8b:	90                   	nop
c0015f8c:	83 ec 0c             	sub    esp,0xc
c0015f8f:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015f94:	e8 bb 9d 00 00       	call   c001fd54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015f99:	83 c4 10             	add    esp,0x10
c0015f9c:	83 ec 0c             	sub    esp,0xc
c0015f9f:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015fa4:	e8 87 9d 00 00       	call   c001fd30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015fa9:	83 c4 10             	add    esp,0x10
c0015fac:	84 c0                	test   al,al
c0015fae:	74 dc                	je     c0015f8c <setupMultitasking(void (*)())+0xc>
c0015fb0:	83 ec 0c             	sub    esp,0xc
c0015fb3:	68 24 07 00 00       	push   0x724
c0015fb8:	e8 16 1b ff ff       	call   c0007ad3 <malloc>
c0015fbd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015fc4:	6a 00                	push   0x0
c0015fc6:	68 a5 29 02 c0       	push   0xc00229a5
c0015fcb:	6a 01                	push   0x1
c0015fcd:	50                   	push   eax
c0015fce:	89 c3                	mov    ebx,eax
c0015fd0:	e8 5f fc ff ff       	call   c0015c34 <Process::Process(bool, char const*, Process*, char**)>
c0015fd5:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0015fdb:	83 c4 14             	add    esp,0x14
c0015fde:	89 1d f0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6f0,ebx
c0015fe4:	50                   	push   eax
c0015fe5:	e8 85 27 ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0015fea:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0015ff1:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015ffb:	83 c8 01             	or     eax,0x1
c0015ffe:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0016005:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001600b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001600e:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0016018:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c001601e:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0016028:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001602e:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0016038:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0016042:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0016048:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001604e:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0016058:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0016062:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0016069:	e8 65 1a ff ff       	call   c0007ad3 <malloc>
c001606e:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0016074:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001607a:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0016080:	5a                   	pop    edx
c0016081:	59                   	pop    ecx
c0016082:	68 a1 29 02 c0       	push   0xc00229a1
c0016087:	50                   	push   eax
c0016088:	e8 c3 a5 fe ff       	call   c0000650 <strcpy>
c001608d:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0016094:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0016098:	83 c4 14             	add    esp,0x14
c001609b:	5b                   	pop    ebx
c001609c:	5e                   	pop    esi
c001609d:	e9 c7 a1 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c00160a2:	66 90                	xchg   ax,ax

c00160a4 <schedule()>:
c00160a4:	8b 15 c4 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c4
c00160aa:	85 d2                	test   edx,edx
c00160ac:	74 0e                	je     c00160bc <schedule()+0x18>
c00160ae:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c00160b8:	c3                   	ret    
c00160b9:	8d 76 00             	lea    esi,[esi+0x0]
c00160bc:	53                   	push   ebx
c00160bd:	83 ec 14             	sub    esp,0x14
c00160c0:	68 e4 c6 02 c0       	push   0xc002c6e4
c00160c5:	e8 66 9c 00 00       	call   c001fd30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00160ca:	83 c4 10             	add    esp,0x10
c00160cd:	84 c0                	test   al,al
c00160cf:	75 3f                	jne    c0016110 <schedule()+0x6c>
c00160d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00160d6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00160d9:	83 fa 01             	cmp    edx,0x1
c00160dc:	74 3a                	je     c0016118 <schedule()+0x74>
c00160de:	66 90                	xchg   ax,ax
c00160e0:	83 ec 0c             	sub    esp,0xc
c00160e3:	68 e4 c6 02 c0       	push   0xc002c6e4
c00160e8:	e8 5f 9c 00 00       	call   c001fd4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00160ed:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00160f4:	89 c3                	mov    ebx,eax
c00160f6:	e8 59 9c 00 00       	call   c001fd54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00160fb:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0016102:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016105:	e8 02 f8 ff ff       	call   c001590c <switchToThread(ThreadControlBlock*)>
c001610a:	83 c4 10             	add    esp,0x10
c001610d:	8d 76 00             	lea    esi,[esi+0x0]
c0016110:	83 c4 08             	add    esp,0x8
c0016113:	5b                   	pop    ebx
c0016114:	c3                   	ret    
c0016115:	8d 76 00             	lea    esi,[esi+0x0]
c0016118:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001611f:	83 ec 08             	sub    esp,0x8
c0016122:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016127:	50                   	push   eax
c0016128:	68 e4 c6 02 c0       	push   0xc002c6e4
c001612d:	e8 de 9c 00 00       	call   c001fe10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016132:	83 c4 10             	add    esp,0x10
c0016135:	eb a9                	jmp    c00160e0 <schedule()+0x3c>
c0016137:	90                   	nop

c0016138 <Semaphore::tryAcquire()>:
c0016138:	53                   	push   ebx
c0016139:	83 ec 08             	sub    esp,0x8
c001613c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016140:	fa                   	cli    
c0016141:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016147:	8d 42 01             	lea    eax,[edx+0x1]
c001614a:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001614f:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016154:	8d 58 01             	lea    ebx,[eax+0x1]
c0016157:	89 1d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ebx
c001615d:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0016160:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0016162:	7c 2c                	jl     c0016190 <Semaphore::tryAcquire()+0x58>
c0016164:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016169:	85 c0                	test   eax,eax
c001616b:	75 0b                	jne    c0016178 <Semaphore::tryAcquire()+0x40>
c001616d:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016172:	85 c0                	test   eax,eax
c0016174:	75 5a                	jne    c00161d0 <Semaphore::tryAcquire()+0x98>
c0016176:	66 90                	xchg   ax,ax
c0016178:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c001617e:	31 c0                	xor    eax,eax
c0016180:	85 d2                	test   edx,edx
c0016182:	75 04                	jne    c0016188 <Semaphore::tryAcquire()+0x50>
c0016184:	fb                   	sti    
c0016185:	8d 76 00             	lea    esi,[esi+0x0]
c0016188:	83 c4 08             	add    esp,0x8
c001618b:	5b                   	pop    ebx
c001618c:	c3                   	ret    
c001618d:	8d 76 00             	lea    esi,[esi+0x0]
c0016190:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016195:	83 c3 01             	add    ebx,0x1
c0016198:	85 c0                	test   eax,eax
c001619a:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001619d:	75 21                	jne    c00161c0 <Semaphore::tryAcquire()+0x88>
c001619f:	8b 0d c0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c0
c00161a5:	85 c9                	test   ecx,ecx
c00161a7:	74 17                	je     c00161c0 <Semaphore::tryAcquire()+0x88>
c00161a9:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00161b3:	e8 ec fe ff ff       	call   c00160a4 <schedule()>
c00161b8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00161bd:	8d 50 ff             	lea    edx,[eax-0x1]
c00161c0:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00161c6:	85 d2                	test   edx,edx
c00161c8:	b0 01                	mov    al,0x1
c00161ca:	75 bc                	jne    c0016188 <Semaphore::tryAcquire()+0x50>
c00161cc:	eb b6                	jmp    c0016184 <Semaphore::tryAcquire()+0x4c>
c00161ce:	66 90                	xchg   ax,ax
c00161d0:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00161da:	e8 c5 fe ff ff       	call   c00160a4 <schedule()>
c00161df:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00161e4:	8d 50 ff             	lea    edx,[eax-0x1]
c00161e7:	31 c0                	xor    eax,eax
c00161e9:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00161ef:	85 d2                	test   edx,edx
c00161f1:	75 95                	jne    c0016188 <Semaphore::tryAcquire()+0x50>
c00161f3:	eb 8f                	jmp    c0016184 <Semaphore::tryAcquire()+0x4c>
c00161f5:	90                   	nop
c00161f6:	66 90                	xchg   ax,ax

c00161f8 <Semaphore::assertLocked(char const*)>:
c00161f8:	83 ec 0c             	sub    esp,0xc
c00161fb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00161ff:	fa                   	cli    
c0016200:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c0016206:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001620b:	83 c1 01             	add    ecx,0x1
c001620e:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c0016214:	8d 48 01             	lea    ecx,[eax+0x1]
c0016217:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c001621d:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001621f:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0016222:	7c 28                	jl     c001624c <Semaphore::assertLocked(char const*)+0x54>
c0016224:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016229:	85 c0                	test   eax,eax
c001622b:	75 0b                	jne    c0016238 <Semaphore::assertLocked(char const*)+0x40>
c001622d:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016232:	85 c0                	test   eax,eax
c0016234:	75 32                	jne    c0016268 <Semaphore::assertLocked(char const*)+0x70>
c0016236:	66 90                	xchg   ax,ax
c0016238:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001623d:	83 e8 01             	sub    eax,0x1
c0016240:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016245:	75 01                	jne    c0016248 <Semaphore::assertLocked(char const*)+0x50>
c0016247:	fb                   	sti    
c0016248:	83 c4 0c             	add    esp,0xc
c001624b:	c3                   	ret    
c001624c:	83 ec 0c             	sub    esp,0xc
c001624f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016253:	52                   	push   edx
c0016254:	e8 82 b3 ff ff       	call   c00115db <KePanic(char const*)>
c0016259:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001625e:	83 c4 10             	add    esp,0x10
c0016261:	83 e8 01             	sub    eax,0x1
c0016264:	eb be                	jmp    c0016224 <Semaphore::assertLocked(char const*)+0x2c>
c0016266:	66 90                	xchg   ax,ax
c0016268:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016272:	e8 2d fe ff ff       	call   c00160a4 <schedule()>
c0016277:	eb bf                	jmp    c0016238 <Semaphore::assertLocked(char const*)+0x40>
c0016279:	8d 76 00             	lea    esi,[esi+0x0]

c001627c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001627c:	83 ec 0c             	sub    esp,0xc
c001627f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016284:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016288:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001628b:	e8 14 fe ff ff       	call   c00160a4 <schedule()>
c0016290:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016295:	83 e8 01             	sub    eax,0x1
c0016298:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001629d:	75 01                	jne    c00162a0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c001629f:	fb                   	sti    
c00162a0:	83 c4 0c             	add    esp,0xc
c00162a3:	c3                   	ret    

c00162a4 <blockTask(TaskState)>:
c00162a4:	83 ec 0c             	sub    esp,0xc
c00162a7:	fa                   	cli    
c00162a8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00162ad:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00162b1:	83 c0 01             	add    eax,0x1
c00162b4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00162b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162be:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00162c1:	e8 de fd ff ff       	call   c00160a4 <schedule()>
c00162c6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00162cb:	83 e8 01             	sub    eax,0x1
c00162ce:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00162d3:	75 03                	jne    c00162d8 <blockTask(TaskState)+0x34>
c00162d5:	fb                   	sti    
c00162d6:	66 90                	xchg   ax,ax
c00162d8:	83 c4 0c             	add    esp,0xc
c00162db:	c3                   	ret    

c00162dc <waitTask(int, int*, int)>:
c00162dc:	83 ec 18             	sub    esp,0x18
c00162df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00162e8:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00162eb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00162ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162f4:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00162f7:	6a 07                	push   0x7
c00162f9:	e8 a6 ff ff ff       	call   c00162a4 <blockTask(TaskState)>
c00162fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016303:	83 c4 10             	add    esp,0x10
c0016306:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0016309:	85 d2                	test   edx,edx
c001630b:	74 0b                	je     c0016318 <waitTask(int, int*, int)+0x3c>
c001630d:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0016310:	89 02                	mov    DWORD PTR [edx],eax
c0016312:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016317:	90                   	nop
c0016318:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001631b:	83 c4 0c             	add    esp,0xc
c001631e:	c3                   	ret    
c001631f:	90                   	nop

c0016320 <milliTenthSleepUntil(unsigned int)>:
c0016320:	83 ec 0c             	sub    esp,0xc
c0016323:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016327:	39 05 ec b8 02 c0    	cmp    DWORD PTR ds:0xc002b8ec,eax
c001632d:	76 05                	jbe    c0016334 <milliTenthSleepUntil(unsigned int)+0x14>
c001632f:	90                   	nop
c0016330:	83 c4 0c             	add    esp,0xc
c0016333:	c3                   	ret    
c0016334:	fa                   	cli    
c0016335:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c001633b:	83 ec 08             	sub    esp,0x8
c001633e:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016344:	83 c2 01             	add    edx,0x1
c0016347:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c001634d:	83 c1 01             	add    ecx,0x1
c0016350:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016356:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001635c:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c001635f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016364:	50                   	push   eax
c0016365:	68 d8 c6 02 c0       	push   0xc002c6d8
c001636a:	e8 a1 9a 00 00       	call   c001fe10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001636f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0016376:	e8 29 ff ff ff       	call   c00162a4 <blockTask(TaskState)>
c001637b:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016380:	83 c4 10             	add    esp,0x10
c0016383:	83 e8 01             	sub    eax,0x1
c0016386:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c001638b:	85 c0                	test   eax,eax
c001638d:	75 09                	jne    c0016398 <milliTenthSleepUntil(unsigned int)+0x78>
c001638f:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016394:	85 c0                	test   eax,eax
c0016396:	75 14                	jne    c00163ac <milliTenthSleepUntil(unsigned int)+0x8c>
c0016398:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001639d:	83 e8 01             	sub    eax,0x1
c00163a0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00163a5:	75 89                	jne    c0016330 <milliTenthSleepUntil(unsigned int)+0x10>
c00163a7:	fb                   	sti    
c00163a8:	83 c4 0c             	add    esp,0xc
c00163ab:	c3                   	ret    
c00163ac:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00163b6:	e8 e9 fc ff ff       	call   c00160a4 <schedule()>
c00163bb:	eb db                	jmp    c0016398 <milliTenthSleepUntil(unsigned int)+0x78>
c00163bd:	8d 76 00             	lea    esi,[esi+0x0]

c00163c0 <milliTenthSleep(unsigned int)>:
c00163c0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00163c4:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c00163c9:	01 c2                	add    edx,eax
c00163cb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00163cf:	e9 4c ff ff ff       	jmp    c0016320 <milliTenthSleepUntil(unsigned int)>

c00163d4 <sleep(unsigned int)>:
c00163d4:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c00163dc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00163e0:	eb de                	jmp    c00163c0 <milliTenthSleep(unsigned int)>
c00163e2:	66 90                	xchg   ax,ax

c00163e4 <Semaphore::acquire()>:
c00163e4:	83 ec 0c             	sub    esp,0xc
c00163e7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00163eb:	fa                   	cli    
c00163ec:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00163f1:	83 c0 01             	add    eax,0x1
c00163f4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00163f9:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00163fe:	8d 48 01             	lea    ecx,[eax+0x1]
c0016401:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016407:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001640a:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001640c:	7d 2e                	jge    c001643c <Semaphore::acquire()+0x58>
c001640e:	83 c1 01             	add    ecx,0x1
c0016411:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016414:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016419:	85 c0                	test   eax,eax
c001641b:	75 0b                	jne    c0016428 <Semaphore::acquire()+0x44>
c001641d:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016422:	85 c0                	test   eax,eax
c0016424:	75 66                	jne    c001648c <Semaphore::acquire()+0xa8>
c0016426:	66 90                	xchg   ax,ax
c0016428:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001642d:	83 e8 01             	sub    eax,0x1
c0016430:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016435:	75 01                	jne    c0016438 <Semaphore::acquire()+0x54>
c0016437:	fb                   	sti    
c0016438:	83 c4 0c             	add    esp,0xc
c001643b:	c3                   	ret    
c001643c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016441:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016448:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001644b:	85 c9                	test   ecx,ecx
c001644d:	74 51                	je     c00164a0 <Semaphore::acquire()+0xbc>
c001644f:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0016452:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016458:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001645b:	90                   	nop
c001645c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016461:	83 ec 0c             	sub    esp,0xc
c0016464:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0016467:	68 24 2a 02 c0       	push   0xc0022a24
c001646c:	e8 99 44 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016471:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0016478:	e8 27 fe ff ff       	call   c00162a4 <blockTask(TaskState)>
c001647d:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016482:	83 c4 10             	add    esp,0x10
c0016485:	83 e8 01             	sub    eax,0x1
c0016488:	eb 8a                	jmp    c0016414 <Semaphore::acquire()+0x30>
c001648a:	66 90                	xchg   ax,ax
c001648c:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016496:	e8 09 fc ff ff       	call   c00160a4 <schedule()>
c001649b:	eb 8b                	jmp    c0016428 <Semaphore::acquire()+0x44>
c001649d:	8d 76 00             	lea    esi,[esi+0x0]
c00164a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164a5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00164a8:	eb b2                	jmp    c001645c <Semaphore::acquire()+0x78>
c00164aa:	66 90                	xchg   ax,ax

c00164ac <taskReturned>:
c00164ac:	83 ec 18             	sub    esp,0x18
c00164af:	68 44 2a 02 c0       	push   0xc0022a44
c00164b4:	e8 22 b1 ff ff       	call   c00115db <KePanic(char const*)>
c00164b9:	83 c4 10             	add    esp,0x10
c00164bc:	83 ec 0c             	sub    esp,0xc
c00164bf:	6a 02                	push   0x2
c00164c1:	e8 de fd ff ff       	call   c00162a4 <blockTask(TaskState)>
c00164c6:	fa                   	cli    
c00164c7:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00164cc:	83 c0 01             	add    eax,0x1
c00164cf:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00164d4:	e8 cb fb ff ff       	call   c00160a4 <schedule()>
c00164d9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00164de:	83 c4 10             	add    esp,0x10
c00164e1:	83 e8 01             	sub    eax,0x1
c00164e4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00164e9:	85 c0                	test   eax,eax
c00164eb:	75 cf                	jne    c00164bc <taskReturned+0x10>
c00164ed:	fb                   	sti    
c00164ee:	eb cc                	jmp    c00164bc <taskReturned+0x10>

c00164f0 <Thr::processFromPID(int)>:
c00164f0:	57                   	push   edi
c00164f1:	56                   	push   esi
c00164f2:	53                   	push   ebx
c00164f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00164f7:	fa                   	cli    
c00164f8:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c00164fe:	83 ec 0c             	sub    esp,0xc
c0016501:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016506:	83 c1 01             	add    ecx,0x1
c0016509:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c001650f:	e8 38 98 00 00       	call   c001fd4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016514:	83 c4 10             	add    esp,0x10
c0016517:	89 c7                	mov    edi,eax
c0016519:	eb 15                	jmp    c0016530 <Thr::processFromPID(int)+0x40>
c001651b:	90                   	nop
c001651c:	83 ec 0c             	sub    esp,0xc
c001651f:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016524:	e8 23 98 00 00       	call   c001fd4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016529:	83 c4 10             	add    esp,0x10
c001652c:	39 f8                	cmp    eax,edi
c001652e:	74 50                	je     c0016580 <Thr::processFromPID(int)+0x90>
c0016530:	83 ec 0c             	sub    esp,0xc
c0016533:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016538:	e8 0f 98 00 00       	call   c001fd4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001653d:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016544:	89 c3                	mov    ebx,eax
c0016546:	e8 09 98 00 00       	call   c001fd54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001654b:	58                   	pop    eax
c001654c:	5a                   	pop    edx
c001654d:	53                   	push   ebx
c001654e:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016553:	e8 b8 98 00 00       	call   c001fe10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016558:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001655b:	83 c4 10             	add    esp,0x10
c001655e:	39 30                	cmp    DWORD PTR [eax],esi
c0016560:	75 ba                	jne    c001651c <Thr::processFromPID(int)+0x2c>
c0016562:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016567:	83 e8 01             	sub    eax,0x1
c001656a:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001656f:	74 0b                	je     c001657c <Thr::processFromPID(int)+0x8c>
c0016571:	8d 76 00             	lea    esi,[esi+0x0]
c0016574:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016577:	90                   	nop
c0016578:	5b                   	pop    ebx
c0016579:	5e                   	pop    esi
c001657a:	5f                   	pop    edi
c001657b:	c3                   	ret    
c001657c:	fb                   	sti    
c001657d:	eb f5                	jmp    c0016574 <Thr::processFromPID(int)+0x84>
c001657f:	90                   	nop
c0016580:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016585:	8d 50 ff             	lea    edx,[eax-0x1]
c0016588:	31 c0                	xor    eax,eax
c001658a:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016590:	85 d2                	test   edx,edx
c0016592:	75 e4                	jne    c0016578 <Thr::processFromPID(int)+0x88>
c0016594:	fb                   	sti    
c0016595:	5b                   	pop    ebx
c0016596:	5e                   	pop    esi
c0016597:	5f                   	pop    edi
c0016598:	c3                   	ret    
c0016599:	8d 76 00             	lea    esi,[esi+0x0]

c001659c <unblockTask(ThreadControlBlock*)>:
c001659c:	53                   	push   ebx
c001659d:	83 ec 08             	sub    esp,0x8
c00165a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00165a4:	fa                   	cli    
c00165a5:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00165aa:	83 c0 01             	add    eax,0x1
c00165ad:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00165b2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00165b5:	85 c0                	test   eax,eax
c00165b7:	74 67                	je     c0016620 <unblockTask(ThreadControlBlock*)+0x84>
c00165b9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00165bc:	83 f8 01             	cmp    eax,0x1
c00165bf:	74 37                	je     c00165f8 <unblockTask(ThreadControlBlock*)+0x5c>
c00165c1:	83 ec 0c             	sub    esp,0xc
c00165c4:	68 e4 c6 02 c0       	push   0xc002c6e4
c00165c9:	e8 7e 97 00 00       	call   c001fd4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00165ce:	83 c4 10             	add    esp,0x10
c00165d1:	85 c0                	test   eax,eax
c00165d3:	75 1b                	jne    c00165f0 <unblockTask(ThreadControlBlock*)+0x54>
c00165d5:	eb 5d                	jmp    c0016634 <unblockTask(ThreadControlBlock*)+0x98>
c00165d7:	90                   	nop
c00165d8:	83 ec 08             	sub    esp,0x8
c00165db:	50                   	push   eax
c00165dc:	68 e4 c6 02 c0       	push   0xc002c6e4
c00165e1:	e8 86 9a 00 00       	call   c002006c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00165e6:	83 c4 10             	add    esp,0x10
c00165e9:	85 c0                	test   eax,eax
c00165eb:	74 47                	je     c0016634 <unblockTask(ThreadControlBlock*)+0x98>
c00165ed:	8d 76 00             	lea    esi,[esi+0x0]
c00165f0:	39 c3                	cmp    ebx,eax
c00165f2:	75 e4                	jne    c00165d8 <unblockTask(ThreadControlBlock*)+0x3c>
c00165f4:	eb 12                	jmp    c0016608 <unblockTask(ThreadControlBlock*)+0x6c>
c00165f6:	66 90                	xchg   ax,ax
c00165f8:	83 ec 0c             	sub    esp,0xc
c00165fb:	68 c3 29 02 c0       	push   0xc00229c3
c0016600:	e8 05 43 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016605:	83 c4 10             	add    esp,0x10
c0016608:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001660d:	83 e8 01             	sub    eax,0x1
c0016610:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016615:	75 01                	jne    c0016618 <unblockTask(ThreadControlBlock*)+0x7c>
c0016617:	fb                   	sti    
c0016618:	83 c4 08             	add    esp,0x8
c001661b:	5b                   	pop    ebx
c001661c:	c3                   	ret    
c001661d:	8d 76 00             	lea    esi,[esi+0x0]
c0016620:	83 ec 0c             	sub    esp,0xc
c0016623:	68 ac 29 02 c0       	push   0xc00229ac
c0016628:	e8 dd 42 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001662d:	83 c4 10             	add    esp,0x10
c0016630:	eb d6                	jmp    c0016608 <unblockTask(ThreadControlBlock*)+0x6c>
c0016632:	66 90                	xchg   ax,ax
c0016634:	83 ec 08             	sub    esp,0x8
c0016637:	53                   	push   ebx
c0016638:	68 e4 c6 02 c0       	push   0xc002c6e4
c001663d:	e8 ce 97 00 00       	call   c001fe10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016642:	83 c4 10             	add    esp,0x10
c0016645:	eb c1                	jmp    c0016608 <unblockTask(ThreadControlBlock*)+0x6c>
c0016647:	90                   	nop

c0016648 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0016648:	55                   	push   ebp
c0016649:	57                   	push   edi
c001664a:	56                   	push   esi
c001664b:	53                   	push   ebx
c001664c:	83 ec 1c             	sub    esp,0x1c
c001664f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0016653:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016656:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c001665c:	85 ed                	test   ebp,ebp
c001665e:	7e 28                	jle    c0016688 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0016660:	31 f6                	xor    esi,esi
c0016662:	66 90                	xchg   ax,ax
c0016664:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c001666b:	83 ec 0c             	sub    esp,0xc
c001666e:	83 c6 01             	add    esi,0x1
c0016671:	57                   	push   edi
c0016672:	e8 6c 14 ff ff       	call   c0007ae3 <free>
c0016677:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001667a:	83 c4 10             	add    esp,0x10
c001667d:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0016683:	7f df                	jg     c0016664 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0016685:	8d 76 00             	lea    esi,[esi+0x0]
c0016688:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0016692:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016697:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001669a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c001669d:	d3 c0                	rol    eax,cl
c001669f:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c00166a6:	21 c8                	and    eax,ecx
c00166a8:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c00166af:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00166b2:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00166ba:	89 f7                	mov    edi,esi
c00166bc:	0f 85 72 01 00 00    	jne    c0016834 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00166c2:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00166c8:	85 ed                	test   ebp,ebp
c00166ca:	74 1c                	je     c00166e8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00166cc:	83 ec 0c             	sub    esp,0xc
c00166cf:	55                   	push   ebp
c00166d0:	e8 17 ac ff ff       	call   c00112ec <EnvVarContainer::~EnvVarContainer()>
c00166d5:	59                   	pop    ecx
c00166d6:	5e                   	pop    esi
c00166d7:	6a 0c                	push   0xc
c00166d9:	55                   	push   ebp
c00166da:	e8 2d 41 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00166df:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00166e2:	83 c4 10             	add    esp,0x10
c00166e5:	89 f7                	mov    edi,esi
c00166e7:	90                   	nop
c00166e8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00166ee:	85 c0                	test   eax,eax
c00166f0:	0f 84 b2 00 00 00    	je     c00167a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00166f6:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00166f9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00166fd:	31 c9                	xor    ecx,ecx
c00166ff:	eb 17                	jmp    c0016718 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0016701:	8d 76 00             	lea    esi,[esi+0x0]
c0016704:	83 c1 01             	add    ecx,0x1
c0016707:	83 f9 10             	cmp    ecx,0x10
c001670a:	0f 84 98 00 00 00    	je     c00167a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0016710:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016716:	66 90                	xchg   ax,ax
c0016718:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001671f:	d3 fa                	sar    edx,cl
c0016721:	80 e2 01             	and    dl,0x1
c0016724:	74 de                	je     c0016704 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016726:	8d 14 49             	lea    edx,[ecx+ecx*2]
c0016729:	c1 e2 05             	shl    edx,0x5
c001672c:	29 ca                	sub    edx,ecx
c001672e:	01 d0                	add    eax,edx
c0016730:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0016736:	83 fd 07             	cmp    ebp,0x7
c0016739:	75 c9                	jne    c0016704 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001673b:	05 40 02 00 00       	add    eax,0x240
c0016740:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0016743:	83 fd ff             	cmp    ebp,0xffffffff
c0016746:	0f 8c f0 00 00 00    	jl     c001683c <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001674c:	0f 84 ae 01 00 00    	je     c0016900 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0016752:	85 ed                	test   ebp,ebp
c0016754:	0f 84 92 01 00 00    	je     c00168ec <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c001675a:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001675c:	75 a6                	jne    c0016704 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001675e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016762:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016768:	01 d0                	add    eax,edx
c001676a:	66 90                	xchg   ax,ax
c001676c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016770:	83 ec 0c             	sub    esp,0xc
c0016773:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0016779:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001677c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0016782:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0016789:	50                   	push   eax
c001678a:	e8 0d fe ff ff       	call   c001659c <unblockTask(ThreadControlBlock*)>
c001678f:	83 c4 10             	add    esp,0x10
c0016792:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016795:	89 f7                	mov    edi,esi
c0016797:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001679b:	83 c1 01             	add    ecx,0x1
c001679e:	83 f9 10             	cmp    ecx,0x10
c00167a1:	0f 85 69 ff ff ff    	jne    c0016710 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00167a7:	90                   	nop
c00167a8:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00167ae:	85 c0                	test   eax,eax
c00167b0:	74 62                	je     c0016814 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00167b2:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00167b8:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00167be:	74 54                	je     c0016814 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00167c0:	83 ec 0c             	sub    esp,0xc
c00167c3:	68 e4 c6 02 c0       	push   0xc002c6e4
c00167c8:	e8 7f 95 00 00       	call   c001fd4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00167cd:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00167d4:	89 c7                	mov    edi,eax
c00167d6:	e8 55 95 00 00       	call   c001fd30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00167db:	83 c4 10             	add    esp,0x10
c00167de:	84 c0                	test   al,al
c00167e0:	0f 84 ce 00 00 00    	je     c00168b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c00167e6:	66 90                	xchg   ax,ax
c00167e8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00167eb:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00167f1:	85 d2                	test   edx,edx
c00167f3:	74 0f                	je     c0016804 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c00167f5:	8b 02                	mov    eax,DWORD PTR [edx]
c00167f7:	83 ec 0c             	sub    esp,0xc
c00167fa:	52                   	push   edx
c00167fb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00167fe:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016801:	83 c4 10             	add    esp,0x10
c0016804:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001680e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0016811:	8d 76 00             	lea    esi,[esi+0x0]
c0016814:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c001681a:	85 db                	test   ebx,ebx
c001681c:	74 16                	je     c0016834 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001681e:	83 ec 0c             	sub    esp,0xc
c0016821:	53                   	push   ebx
c0016822:	e8 69 33 ff ff       	call   c0009b90 <VAS::~VAS()>
c0016827:	58                   	pop    eax
c0016828:	5a                   	pop    edx
c0016829:	6a 14                	push   0x14
c001682b:	53                   	push   ebx
c001682c:	e8 db 3f ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0016831:	83 c4 10             	add    esp,0x10
c0016834:	83 c4 1c             	add    esp,0x1c
c0016837:	5b                   	pop    ebx
c0016838:	5e                   	pop    esi
c0016839:	5f                   	pop    edi
c001683a:	5d                   	pop    ebp
c001683b:	c3                   	ret    
c001683c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016840:	83 ec 0c             	sub    esp,0xc
c0016843:	68 78 2a 02 c0       	push   0xc0022a78
c0016848:	e8 8e ad ff ff       	call   c00115db <KePanic(char const*)>
c001684d:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016850:	83 c4 10             	add    esp,0x10
c0016853:	89 f7                	mov    edi,esi
c0016855:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016859:	e9 a6 fe ff ff       	jmp    c0016704 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001685e:	66 90                	xchg   ax,ax
c0016860:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016866:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c001686c:	75 1e                	jne    c001688c <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001686e:	83 ec 0c             	sub    esp,0xc
c0016871:	68 e0 2a 02 c0       	push   0xc0022ae0
c0016876:	e8 8f 40 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001687b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0016882:	e8 1d fa ff ff       	call   c00162a4 <blockTask(TaskState)>
c0016887:	83 c4 10             	add    esp,0x10
c001688a:	66 90                	xchg   ax,ax
c001688c:	83 ec 08             	sub    esp,0x8
c001688f:	56                   	push   esi
c0016890:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016895:	e8 76 95 00 00       	call   c001fe10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001689a:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00168a1:	e8 a6 94 00 00       	call   c001fd4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00168a6:	83 c4 10             	add    esp,0x10
c00168a9:	39 f8                	cmp    eax,edi
c00168ab:	0f 84 37 ff ff ff    	je     c00167e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c00168b1:	8d 76 00             	lea    esi,[esi+0x0]
c00168b4:	83 ec 0c             	sub    esp,0xc
c00168b7:	68 e4 c6 02 c0       	push   0xc002c6e4
c00168bc:	e8 8b 94 00 00       	call   c001fd4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00168c1:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00168c8:	89 c6                	mov    esi,eax
c00168ca:	e8 85 94 00 00       	call   c001fd54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00168cf:	83 c4 10             	add    esp,0x10
c00168d2:	39 f3                	cmp    ebx,esi
c00168d4:	74 b6                	je     c001688c <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00168d6:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00168d9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00168dc:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00168e2:	75 a8                	jne    c001688c <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00168e4:	e9 77 ff ff ff       	jmp    c0016860 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c00168e9:	8d 76 00             	lea    esi,[esi+0x0]
c00168ec:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00168f0:	83 ec 0c             	sub    esp,0xc
c00168f3:	68 ac 2a 02 c0       	push   0xc0022aac
c00168f8:	e9 4b ff ff ff       	jmp    c0016848 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c00168fd:	8d 76 00             	lea    esi,[esi+0x0]
c0016900:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016904:	8b 36                	mov    esi,DWORD PTR [esi]
c0016906:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0016909:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001690c:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0016912:	01 d7                	add    edi,edx
c0016914:	89 f8                	mov    eax,edi
c0016916:	e9 51 fe ff ff       	jmp    c001676c <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c001691b:	90                   	nop

c001691c <cleanerTaskFunction(void*)>:
c001691c:	53                   	push   ebx
c001691d:	83 ec 08             	sub    esp,0x8
c0016920:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016925:	83 e8 01             	sub    eax,0x1
c0016928:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001692d:	75 01                	jne    c0016930 <cleanerTaskFunction(void*)+0x14>
c001692f:	fb                   	sti    
c0016930:	fa                   	cli    
c0016931:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016936:	80 3d ac c6 02 c0 00 	cmp    BYTE PTR ds:0xc002c6ac,0x0
c001693d:	8d 50 01             	lea    edx,[eax+0x1]
c0016940:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016946:	0f 84 c4 00 00 00    	je     c0016a10 <cleanerTaskFunction(void*)+0xf4>
c001694c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016951:	85 c0                	test   eax,eax
c0016953:	75 03                	jne    c0016958 <cleanerTaskFunction(void*)+0x3c>
c0016955:	fb                   	sti    
c0016956:	66 90                	xchg   ax,ax
c0016958:	c6 05 ac c6 02 c0 00 	mov    BYTE PTR ds:0xc002c6ac,0x0
c001695f:	fa                   	cli    
c0016960:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016966:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c001696c:	83 c2 01             	add    edx,0x1
c001696f:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016975:	83 c1 01             	add    ecx,0x1
c0016978:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c001697e:	fa                   	cli    
c001697f:	8b 1d c8 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6c8
c0016985:	83 c3 01             	add    ebx,0x1
c0016988:	89 1d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ebx
c001698e:	eb 28                	jmp    c00169b8 <cleanerTaskFunction(void*)+0x9c>
c0016990:	83 ec 0c             	sub    esp,0xc
c0016993:	68 cc c6 02 c0       	push   0xc002c6cc
c0016998:	e8 af 93 00 00       	call   c001fd4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001699d:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c00169a4:	89 c3                	mov    ebx,eax
c00169a6:	e8 a9 93 00 00       	call   c001fd54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00169ab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00169ae:	e8 95 fc ff ff       	call   c0016648 <cleanupTerminatedTask(ThreadControlBlock*)>
c00169b3:	83 c4 10             	add    esp,0x10
c00169b6:	66 90                	xchg   ax,ax
c00169b8:	83 ec 0c             	sub    esp,0xc
c00169bb:	68 cc c6 02 c0       	push   0xc002c6cc
c00169c0:	e8 6b 93 00 00       	call   c001fd30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00169c5:	83 c4 10             	add    esp,0x10
c00169c8:	84 c0                	test   al,al
c00169ca:	74 c4                	je     c0016990 <cleanerTaskFunction(void*)+0x74>
c00169cc:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00169d1:	83 e8 01             	sub    eax,0x1
c00169d4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00169d9:	75 01                	jne    c00169dc <cleanerTaskFunction(void*)+0xc0>
c00169db:	fb                   	sti    
c00169dc:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00169e1:	83 e8 01             	sub    eax,0x1
c00169e4:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00169e9:	0f 85 31 ff ff ff    	jne    c0016920 <cleanerTaskFunction(void*)+0x4>
c00169ef:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c00169f4:	85 c0                	test   eax,eax
c00169f6:	0f 84 24 ff ff ff    	je     c0016920 <cleanerTaskFunction(void*)+0x4>
c00169fc:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016a06:	e8 99 f6 ff ff       	call   c00160a4 <schedule()>
c0016a0b:	e9 10 ff ff ff       	jmp    c0016920 <cleanerTaskFunction(void*)+0x4>
c0016a10:	83 ec 0c             	sub    esp,0xc
c0016a13:	6a 02                	push   0x2
c0016a15:	e8 62 f8 ff ff       	call   c001627c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016a1a:	83 c4 10             	add    esp,0x10
c0016a1d:	e9 36 ff ff ff       	jmp    c0016958 <cleanerTaskFunction(void*)+0x3c>
c0016a22:	66 90                	xchg   ax,ax

c0016a24 <terminateTask(int)>:
c0016a24:	83 ec 14             	sub    esp,0x14
c0016a27:	fa                   	cli    
c0016a28:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016a2e:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016a34:	83 c2 01             	add    edx,0x1
c0016a37:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016a3d:	83 c1 01             	add    ecx,0x1
c0016a40:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016a46:	fa                   	cli    
c0016a47:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a4c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016a50:	83 c0 01             	add    eax,0x1
c0016a53:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a58:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a5d:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0016a60:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a65:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016a68:	50                   	push   eax
c0016a69:	68 cc c6 02 c0       	push   0xc002c6cc
c0016a6e:	e8 9d 93 00 00       	call   c001fe10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016a73:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a78:	83 c4 10             	add    esp,0x10
c0016a7b:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0016a82:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c0016a87:	85 c0                	test   eax,eax
c0016a89:	74 65                	je     c0016af0 <terminateTask(int)+0xcc>
c0016a8b:	c6 05 ac c6 02 c0 01 	mov    BYTE PTR ds:0xc002c6ac,0x1
c0016a92:	83 ec 0c             	sub    esp,0xc
c0016a95:	50                   	push   eax
c0016a96:	e8 01 fb ff ff       	call   c001659c <unblockTask(ThreadControlBlock*)>
c0016a9b:	83 c4 10             	add    esp,0x10
c0016a9e:	66 90                	xchg   ax,ax
c0016aa0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016aa5:	83 e8 01             	sub    eax,0x1
c0016aa8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016aad:	75 01                	jne    c0016ab0 <terminateTask(int)+0x8c>
c0016aaf:	fb                   	sti    
c0016ab0:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016ab5:	83 e8 01             	sub    eax,0x1
c0016ab8:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016abd:	75 09                	jne    c0016ac8 <terminateTask(int)+0xa4>
c0016abf:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c0016ac6:	75 3c                	jne    c0016b04 <terminateTask(int)+0xe0>
c0016ac8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016acd:	83 e8 01             	sub    eax,0x1
c0016ad0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016ad5:	75 01                	jne    c0016ad8 <terminateTask(int)+0xb4>
c0016ad7:	fb                   	sti    
c0016ad8:	fa                   	cli    
c0016ad9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016ade:	83 c0 01             	add    eax,0x1
c0016ae1:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016ae6:	66 90                	xchg   ax,ax
c0016ae8:	e8 b7 f5 ff ff       	call   c00160a4 <schedule()>
c0016aed:	eb d9                	jmp    c0016ac8 <terminateTask(int)+0xa4>
c0016aef:	90                   	nop
c0016af0:	83 ec 0c             	sub    esp,0xc
c0016af3:	68 da 29 02 c0       	push   0xc00229da
c0016af8:	e8 0d 3e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016afd:	83 c4 10             	add    esp,0x10
c0016b00:	eb 9e                	jmp    c0016aa0 <terminateTask(int)+0x7c>
c0016b02:	66 90                	xchg   ax,ax
c0016b04:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016b0e:	eb d8                	jmp    c0016ae8 <terminateTask(int)+0xc4>

c0016b10 <Thr::terminateFromIRQ(int)>:
c0016b10:	83 ec 18             	sub    esp,0x18
c0016b13:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b17:	50                   	push   eax
c0016b18:	e8 07 ff ff ff       	call   c0016a24 <terminateTask(int)>
c0016b1d:	90                   	nop
c0016b1e:	66 90                	xchg   ax,ax

c0016b20 <Semaphore::release()>:
c0016b20:	83 ec 0c             	sub    esp,0xc
c0016b23:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016b27:	fa                   	cli    
c0016b28:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b2d:	83 c0 01             	add    eax,0x1
c0016b30:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b35:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016b3a:	8d 48 01             	lea    ecx,[eax+0x1]
c0016b3d:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016b43:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016b46:	85 c9                	test   ecx,ecx
c0016b48:	74 42                	je     c0016b8c <Semaphore::release()+0x6c>
c0016b4a:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016b4d:	83 ec 0c             	sub    esp,0xc
c0016b50:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016b53:	51                   	push   ecx
c0016b54:	e8 43 fa ff ff       	call   c001659c <unblockTask(ThreadControlBlock*)>
c0016b59:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016b5e:	83 c4 10             	add    esp,0x10
c0016b61:	83 e8 01             	sub    eax,0x1
c0016b64:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016b69:	85 c0                	test   eax,eax
c0016b6b:	75 0b                	jne    c0016b78 <Semaphore::release()+0x58>
c0016b6d:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016b72:	85 c0                	test   eax,eax
c0016b74:	75 22                	jne    c0016b98 <Semaphore::release()+0x78>
c0016b76:	66 90                	xchg   ax,ax
c0016b78:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b7d:	83 e8 01             	sub    eax,0x1
c0016b80:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b85:	75 01                	jne    c0016b88 <Semaphore::release()+0x68>
c0016b87:	fb                   	sti    
c0016b88:	83 c4 0c             	add    esp,0xc
c0016b8b:	c3                   	ret    
c0016b8c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016b8f:	83 e9 01             	sub    ecx,0x1
c0016b92:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016b95:	eb cd                	jmp    c0016b64 <Semaphore::release()+0x44>
c0016b97:	90                   	nop
c0016b98:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016ba2:	e8 fd f4 ff ff       	call   c00160a4 <schedule()>
c0016ba7:	eb cf                	jmp    c0016b78 <Semaphore::release()+0x58>
c0016ba9:	8d 76 00             	lea    esi,[esi+0x0]

c0016bac <__static_initialization_and_destruction_0(int, int)>:
c0016bac:	83 ec 0c             	sub    esp,0xc
c0016baf:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016bb4:	0f 85 8e 00 00 00    	jne    c0016c48 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016bba:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0016bc2:	0f 85 80 00 00 00    	jne    c0016c48 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016bc8:	83 ec 0c             	sub    esp,0xc
c0016bcb:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016bd0:	e8 ef 94 00 00       	call   c00200c4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016bd5:	83 c4 10             	add    esp,0x10
c0016bd8:	83 ec 04             	sub    esp,0x4
c0016bdb:	68 b0 36 02 c0       	push   0xc00236b0
c0016be0:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016be5:	68 74 00 02 c0       	push   0xc0020074
c0016bea:	e8 cd 3b ff ff       	call   c000a7bc <__cxa_atexit>
c0016bef:	83 c4 10             	add    esp,0x10
c0016bf2:	83 ec 0c             	sub    esp,0xc
c0016bf5:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016bfa:	e8 c5 94 00 00       	call   c00200c4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016bff:	83 c4 10             	add    esp,0x10
c0016c02:	83 ec 04             	sub    esp,0x4
c0016c05:	68 b0 36 02 c0       	push   0xc00236b0
c0016c0a:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016c0f:	68 74 00 02 c0       	push   0xc0020074
c0016c14:	e8 a3 3b ff ff       	call   c000a7bc <__cxa_atexit>
c0016c19:	83 c4 10             	add    esp,0x10
c0016c1c:	83 ec 0c             	sub    esp,0xc
c0016c1f:	68 cc c6 02 c0       	push   0xc002c6cc
c0016c24:	e8 9b 94 00 00       	call   c00200c4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016c29:	83 c4 10             	add    esp,0x10
c0016c2c:	83 ec 04             	sub    esp,0x4
c0016c2f:	68 b0 36 02 c0       	push   0xc00236b0
c0016c34:	68 cc c6 02 c0       	push   0xc002c6cc
c0016c39:	68 74 00 02 c0       	push   0xc0020074
c0016c3e:	e8 79 3b ff ff       	call   c000a7bc <__cxa_atexit>
c0016c43:	83 c4 10             	add    esp,0x10
c0016c46:	66 90                	xchg   ax,ax
c0016c48:	90                   	nop
c0016c49:	83 c4 0c             	add    esp,0xc
c0016c4c:	c3                   	ret    
c0016c4d:	8d 76 00             	lea    esi,[esi+0x0]

c0016c50 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016c50:	83 ec 0c             	sub    esp,0xc
c0016c53:	83 ec 08             	sub    esp,0x8
c0016c56:	68 ff ff 00 00       	push   0xffff
c0016c5b:	6a 01                	push   0x1
c0016c5d:	e8 4a ff ff ff       	call   c0016bac <__static_initialization_and_destruction_0(int, int)>
c0016c62:	83 c4 10             	add    esp,0x10
c0016c65:	83 c4 0c             	add    esp,0xc
c0016c68:	c3                   	ret    

c0016c69 <Vm::inbv(unsigned short)>:
c0016c69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016c6d:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016c72:	75 06                	jne    c0016c7a <Vm::inbv(unsigned short)+0x11>
c0016c74:	a0 2c c7 02 c0       	mov    al,ds:0xc002c72c
c0016c79:	c3                   	ret    
c0016c7a:	ec                   	in     al,dx
c0016c7b:	c3                   	ret    

c0016c7c <Vm::outbv(unsigned short, unsigned char)>:
c0016c7c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016c80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c84:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016c89:	75 25                	jne    c0016cb0 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016c8b:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016c91:	88 81 40 c7 02 c0    	mov    BYTE PTR [ecx-0x3ffd38c0],al
c0016c97:	8d 51 01             	lea    edx,[ecx+0x1]
c0016c9a:	89 15 2c c7 02 c0    	mov    DWORD PTR ds:0xc002c72c,edx
c0016ca0:	83 fa 20             	cmp    edx,0x20
c0016ca3:	75 0c                	jne    c0016cb1 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016ca5:	c7 05 2c c7 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x1f
c0016caf:	c3                   	ret    
c0016cb0:	ee                   	out    dx,al
c0016cb1:	c3                   	ret    

c0016cb2 <Vm::realToLinear(unsigned short, unsigned short)>:
c0016cb2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016cb7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016cbc:	c1 e0 04             	shl    eax,0x4
c0016cbf:	01 d0                	add    eax,edx
c0016cc1:	c3                   	ret    

c0016cc2 <Vm::getSegment(unsigned int)>:
c0016cc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016cc6:	c1 e8 10             	shr    eax,0x10
c0016cc9:	c3                   	ret    

c0016cca <Vm::getOffset(unsigned int)>:
c0016cca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016cce:	c3                   	ret    

c0016ccf <Vm::mainloop2()>:
c0016ccf:	83 ec 18             	sub    esp,0x18
c0016cd2:	fa                   	cli    
c0016cd3:	6a 02                	push   0x2
c0016cd5:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016cdb:	c6 05 25 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c725,0x1
c0016ce2:	e8 95 f5 ff ff       	call   c001627c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016ce7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cec:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016cf0:	52                   	push   edx
c0016cf1:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016cf5:	52                   	push   edx
c0016cf6:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016cfa:	52                   	push   edx
c0016cfb:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016cff:	50                   	push   eax
c0016d00:	e8 0a 95 fe ff       	call   c000020f <goToVM86>
c0016d05:	83 c4 2c             	add    esp,0x2c
c0016d08:	c3                   	ret    

c0016d09 <Vm::mainVm8086Loop(void*)>:
c0016d09:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016d0e:	48                   	dec    eax
c0016d0f:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016d14:	75 01                	jne    c0016d17 <Vm::mainVm8086Loop(void*)+0xe>
c0016d16:	fb                   	sti    
c0016d17:	eb b6                	jmp    c0016ccf <Vm::mainloop2()>

c0016d19 <Vm::mainloop3(unsigned long)>:
c0016d19:	83 ec 18             	sub    esp,0x18
c0016d1c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d20:	fa                   	cli    
c0016d21:	6a 02                	push   0x2
c0016d23:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016d29:	c6 05 24 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c724,0x1
c0016d30:	a3 20 c7 02 c0       	mov    ds:0xc002c720,eax
c0016d35:	e8 42 f5 ff ff       	call   c001627c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016d3a:	83 c4 1c             	add    esp,0x1c
c0016d3d:	eb 90                	jmp    c0016ccf <Vm::mainloop2()>

c0016d3f <Vm::initialise8086()>:
c0016d3f:	83 ec 0c             	sub    esp,0xc
c0016d42:	68 80 00 00 00       	push   0x80
c0016d47:	6a 00                	push   0x0
c0016d49:	68 09 6d 01 c0       	push   0xc0016d09
c0016d4e:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016d54:	e8 ff f0 ff ff       	call   c0015e58 <Process::createThread(void (*)(void*), void*, int)>
c0016d59:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016d60:	68 00 01 00 00       	push   0x100
c0016d65:	6a 00                	push   0x0
c0016d67:	6a 00                	push   0x0
c0016d69:	a3 28 c7 02 c0       	mov    ds:0xc002c728,eax
c0016d6e:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0016d73:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016d79:	e8 8a 31 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016d7e:	83 c4 2c             	add    esp,0x2c
c0016d81:	c3                   	ret    

c0016d82 <Vm::finish8086()>:
c0016d82:	53                   	push   ebx
c0016d83:	83 ec 08             	sub    esp,0x8
c0016d86:	fa                   	cli    
c0016d87:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016d8d:	80 3d 24 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c724,0x0
c0016d94:	75 15                	jne    c0016dab <Vm::finish8086()+0x29>
c0016d96:	e8 09 f3 ff ff       	call   c00160a4 <schedule()>
c0016d9b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016da0:	48                   	dec    eax
c0016da1:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016da6:	75 de                	jne    c0016d86 <Vm::finish8086()+0x4>
c0016da8:	fb                   	sti    
c0016da9:	eb db                	jmp    c0016d86 <Vm::finish8086()+0x4>
c0016dab:	c6 05 24 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c724,0x0
c0016db2:	83 ec 0c             	sub    esp,0xc
c0016db5:	8b 1d 20 c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c720
c0016dbb:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016dc1:	e8 d6 f7 ff ff       	call   c001659c <unblockTask(ThreadControlBlock*)>
c0016dc6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016dcb:	83 c4 10             	add    esp,0x10
c0016dce:	8d 50 ff             	lea    edx,[eax-0x1]
c0016dd1:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016dd7:	85 d2                	test   edx,edx
c0016dd9:	75 01                	jne    c0016ddc <Vm::finish8086()+0x5a>
c0016ddb:	fb                   	sti    
c0016ddc:	83 c4 08             	add    esp,0x8
c0016ddf:	89 d8                	mov    eax,ebx
c0016de1:	5b                   	pop    ebx
c0016de2:	c3                   	ret    

c0016de3 <Vm::getOutput8086(unsigned char*)>:
c0016de3:	57                   	push   edi
c0016de4:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016dea:	56                   	push   esi
c0016deb:	be 40 c7 02 c0       	mov    esi,0xc002c740
c0016df0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016df4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016df6:	5e                   	pop    esi
c0016df7:	a1 2c c7 02 c0       	mov    eax,ds:0xc002c72c
c0016dfc:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016e06:	5f                   	pop    edi
c0016e07:	c3                   	ret    

c0016e08 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016e08:	55                   	push   ebp
c0016e09:	57                   	push   edi
c0016e0a:	56                   	push   esi
c0016e0b:	53                   	push   ebx
c0016e0c:	83 ec 0c             	sub    esp,0xc
c0016e0f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016e13:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016e17:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016e1b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016e1f:	fa                   	cli    
c0016e20:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016e26:	80 3d 25 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c725,0x0
c0016e2d:	75 15                	jne    c0016e44 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016e2f:	e8 70 f2 ff ff       	call   c00160a4 <schedule()>
c0016e34:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016e39:	48                   	dec    eax
c0016e3a:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016e3f:	75 de                	jne    c0016e1f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016e41:	fb                   	sti    
c0016e42:	eb db                	jmp    c0016e1f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016e44:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016e4e:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016e53:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016e57:	0f b7 ff             	movzx  edi,di
c0016e5a:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016e5e:	0f b7 f6             	movzx  esi,si
c0016e61:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016e65:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016e69:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016e6d:	50                   	push   eax
c0016e6e:	6a 20                	push   0x20
c0016e70:	6a 00                	push   0x0
c0016e72:	68 40 c7 02 c0       	push   0xc002c740
c0016e77:	e8 74 96 fe ff       	call   c00004f0 <memset>
c0016e7c:	5a                   	pop    edx
c0016e7d:	59                   	pop    ecx
c0016e7e:	57                   	push   edi
c0016e7f:	56                   	push   esi
c0016e80:	e8 2d fe ff ff       	call   c0016cb2 <Vm::realToLinear(unsigned short, unsigned short)>
c0016e85:	83 c4 10             	add    esp,0x10
c0016e88:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016e8c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016e90:	89 c7                	mov    edi,eax
c0016e92:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e94:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0016e9b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016ea0:	48                   	dec    eax
c0016ea1:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016ea6:	75 01                	jne    c0016ea9 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016ea8:	fb                   	sti    
c0016ea9:	83 ec 0c             	sub    esp,0xc
c0016eac:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016eb2:	e8 e5 f6 ff ff       	call   c001659c <unblockTask(ThreadControlBlock*)>
c0016eb7:	83 c4 1c             	add    esp,0x1c
c0016eba:	b0 01                	mov    al,0x1
c0016ebc:	5b                   	pop    ebx
c0016ebd:	5e                   	pop    esi
c0016ebe:	5f                   	pop    edi
c0016ebf:	5d                   	pop    ebp
c0016ec0:	c3                   	ret    

c0016ec1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016ec1:	55                   	push   ebp
c0016ec2:	57                   	push   edi
c0016ec3:	56                   	push   esi
c0016ec4:	53                   	push   ebx
c0016ec5:	83 ec 34             	sub    esp,0x34
c0016ec8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016ecc:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016ed0:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016ed4:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016ed8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016edc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016ee0:	68 08 2b 02 c0       	push   0xc0022b08
c0016ee5:	e8 20 3a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016eea:	83 c4 10             	add    esp,0x10
c0016eed:	fa                   	cli    
c0016eee:	8a 1d 25 c7 02 c0    	mov    bl,BYTE PTR ds:0xc002c725
c0016ef4:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016efa:	84 db                	test   bl,bl
c0016efc:	75 15                	jne    c0016f13 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0016efe:	e8 a1 f1 ff ff       	call   c00160a4 <schedule()>
c0016f03:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016f08:	48                   	dec    eax
c0016f09:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016f0e:	75 dd                	jne    c0016eed <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016f10:	fb                   	sti    
c0016f11:	eb da                	jmp    c0016eed <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016f13:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016f1d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016f21:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016f26:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016f2a:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016f2e:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016f32:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016f36:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016f3a:	50                   	push   eax
c0016f3b:	6a 20                	push   0x20
c0016f3d:	6a 00                	push   0x0
c0016f3f:	68 40 c7 02 c0       	push   0xc002c740
c0016f44:	e8 a7 95 fe ff       	call   c00004f0 <memset>
c0016f49:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016f50:	e8 7e 0b ff ff       	call   c0007ad3 <malloc>
c0016f55:	83 c4 0c             	add    esp,0xc
c0016f58:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016f5e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016f62:	89 c5                	mov    ebp,eax
c0016f64:	50                   	push   eax
c0016f65:	e8 2c 4c ff ff       	call   c000bb96 <File::File(char const*, Process*)>
c0016f6a:	83 c4 10             	add    esp,0x10
c0016f6d:	85 ed                	test   ebp,ebp
c0016f6f:	75 0a                	jne    c0016f7b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0016f71:	83 ec 0c             	sub    esp,0xc
c0016f74:	68 2a 2b 02 c0       	push   0xc0022b2a
c0016f79:	eb 2b                	jmp    c0016fa6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0016f7b:	50                   	push   eax
c0016f7c:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016f80:	50                   	push   eax
c0016f81:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016f85:	50                   	push   eax
c0016f86:	55                   	push   ebp
c0016f87:	e8 2a 4f ff ff       	call   c000beb6 <File::stat(unsigned long long*, bool*)>
c0016f8c:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016f90:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016f94:	83 c4 10             	add    esp,0x10
c0016f97:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016f9c:	74 27                	je     c0016fc5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0016f9e:	83 ec 0c             	sub    esp,0xc
c0016fa1:	68 3e 2b 02 c0       	push   0xc0022b3e
c0016fa6:	e8 30 a6 ff ff       	call   c00115db <KePanic(char const*)>
c0016fab:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016fb0:	83 c4 10             	add    esp,0x10
c0016fb3:	48                   	dec    eax
c0016fb4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016fb9:	85 c0                	test   eax,eax
c0016fbb:	75 01                	jne    c0016fbe <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016fbd:	fb                   	sti    
c0016fbe:	31 db                	xor    ebx,ebx
c0016fc0:	e9 90 00 00 00       	jmp    c0017055 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016fc5:	51                   	push   ecx
c0016fc6:	51                   	push   ecx
c0016fc7:	6a 01                	push   0x1
c0016fc9:	55                   	push   ebp
c0016fca:	e8 e5 4b ff ff       	call   c000bbb4 <File::open(FileOpenMode)>
c0016fcf:	83 c4 10             	add    esp,0x10
c0016fd2:	85 c0                	test   eax,eax
c0016fd4:	74 26                	je     c0016ffc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0016fd6:	83 ec 0c             	sub    esp,0xc
c0016fd9:	68 57 2b 02 c0       	push   0xc0022b57
c0016fde:	e8 f8 a5 ff ff       	call   c00115db <KePanic(char const*)>
c0016fe3:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016fe8:	83 c4 10             	add    esp,0x10
c0016feb:	48                   	dec    eax
c0016fec:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016ff1:	85 c0                	test   eax,eax
c0016ff3:	75 c9                	jne    c0016fbe <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016ff5:	fb                   	sti    
c0016ff6:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0016ffa:	eb 59                	jmp    c0017055 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016ffc:	50                   	push   eax
c0016ffd:	0f b7 ff             	movzx  edi,di
c0017000:	50                   	push   eax
c0017001:	0f b7 f6             	movzx  esi,si
c0017004:	57                   	push   edi
c0017005:	56                   	push   esi
c0017006:	e8 a7 fc ff ff       	call   c0016cb2 <Vm::realToLinear(unsigned short, unsigned short)>
c001700b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001700e:	5a                   	pop    edx
c001700f:	8d 74 24 20          	lea    esi,[esp+0x20]
c0017013:	56                   	push   esi
c0017014:	50                   	push   eax
c0017015:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017019:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001701d:	55                   	push   ebp
c001701e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017021:	83 c4 14             	add    esp,0x14
c0017024:	55                   	push   ebp
c0017025:	e8 e8 4b ff ff       	call   c000bc12 <File::close()>
c001702a:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001702f:	83 c4 10             	add    esp,0x10
c0017032:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0017039:	48                   	dec    eax
c001703a:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001703f:	85 c0                	test   eax,eax
c0017041:	75 01                	jne    c0017044 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0017043:	fb                   	sti    
c0017044:	83 ec 0c             	sub    esp,0xc
c0017047:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c001704d:	e8 4a f5 ff ff       	call   c001659c <unblockTask(ThreadControlBlock*)>
c0017052:	83 c4 10             	add    esp,0x10
c0017055:	83 c4 2c             	add    esp,0x2c
c0017058:	88 d8                	mov    al,bl
c001705a:	5b                   	pop    ebx
c001705b:	5e                   	pop    esi
c001705c:	5f                   	pop    edi
c001705d:	5d                   	pop    ebp
c001705e:	c3                   	ret    

c001705f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001705f:	57                   	push   edi
c0017060:	56                   	push   esi
c0017061:	53                   	push   ebx
c0017062:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017066:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001706a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001706e:	83 e8 06             	sub    eax,0x6
c0017071:	0f b7 c0             	movzx  eax,ax
c0017074:	50                   	push   eax
c0017075:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001707a:	50                   	push   eax
c001707b:	e8 32 fc ff ff       	call   c0016cb2 <Vm::realToLinear(unsigned short, unsigned short)>
c0017080:	5a                   	pop    edx
c0017081:	59                   	pop    ecx
c0017082:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0017085:	8d 51 fa             	lea    edx,[ecx-0x6]
c0017088:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001708b:	81 e2 ff ff 00 00    	and    edx,0xffff
c0017091:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0017094:	8d 51 02             	lea    edx,[ecx+0x2]
c0017097:	66 89 10             	mov    WORD PTR [eax],dx
c001709a:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c001709e:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00170a2:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c00170a6:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00170a9:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00170ad:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00170b3:	89 f1                	mov    ecx,esi
c00170b5:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c00170b9:	89 f2                	mov    edx,esi
c00170bb:	0f b6 d6             	movzx  edx,dh
c00170be:	0f b6 f1             	movzx  esi,cl
c00170c1:	74 0a                	je     c00170cd <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c00170c3:	c1 e2 08             	shl    edx,0x8
c00170c6:	09 f2                	or     edx,esi
c00170c8:	80 ce 02             	or     dh,0x2
c00170cb:	eb 08                	jmp    c00170d5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c00170cd:	c1 e2 08             	shl    edx,0x8
c00170d0:	09 f2                	or     edx,esi
c00170d2:	80 e6 fd             	and    dh,0xfd
c00170d5:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00170d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00170de:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00170e2:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c00170ea:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c00170ed:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c00170f5:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00170f8:	5b                   	pop    ebx
c00170f9:	5e                   	pop    esi
c00170fa:	5f                   	pop    edi
c00170fb:	c3                   	ret    

c00170fc <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00170fc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017101:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017106:	c1 e0 04             	shl    eax,0x4
c0017109:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001710c:	c3                   	ret    

c001710d <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001710d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017112:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017117:	c1 e0 04             	shl    eax,0x4
c001711a:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001711e:	c3                   	ret    

c001711f <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001711f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017124:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017129:	c1 e0 04             	shl    eax,0x4
c001712c:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001712f:	c3                   	ret    

c0017130 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0017130:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017135:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001713a:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001713e:	c1 e0 04             	shl    eax,0x4
c0017141:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0017144:	c3                   	ret    

c0017145 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0017145:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001714a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001714f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017153:	c1 e0 04             	shl    eax,0x4
c0017156:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001715a:	c3                   	ret    

c001715b <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001715b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017160:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017165:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017169:	c1 e0 04             	shl    eax,0x4
c001716c:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001716f:	c3                   	ret    

c0017170 <Vm::faultHandler(regs*)>:
c0017170:	55                   	push   ebp
c0017171:	57                   	push   edi
c0017172:	56                   	push   esi
c0017173:	53                   	push   ebx
c0017174:	83 ec 2c             	sub    esp,0x2c
c0017177:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001717b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001717e:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0017182:	0f b7 f8             	movzx  edi,ax
c0017185:	0f b7 c0             	movzx  eax,ax
c0017188:	52                   	push   edx
c0017189:	50                   	push   eax
c001718a:	e8 23 fb ff ff       	call   c0016cb2 <Vm::realToLinear(unsigned short, unsigned short)>
c001718f:	5a                   	pop    edx
c0017190:	59                   	pop    ecx
c0017191:	89 c1                	mov    ecx,eax
c0017193:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017196:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001719a:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c001719f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00171a3:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c00171a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00171aa:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c00171af:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00171b3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00171b7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00171bb:	e8 f2 fa ff ff       	call   c0016cb2 <Vm::realToLinear(unsigned short, unsigned short)>
c00171c0:	5e                   	pop    esi
c00171c1:	be 06 00 00 00       	mov    esi,0x6
c00171c6:	5d                   	pop    ebp
c00171c7:	31 ed                	xor    ebp,ebp
c00171c9:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00171ce:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00171d1:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c00171d7:	0f 84 74 02 00 00    	je     c0017451 <Vm::faultHandler(regs*)+0x2e1>
c00171dd:	0f 87 94 00 00 00    	ja     c0017277 <Vm::faultHandler(regs*)+0x107>
c00171e3:	83 fa 66             	cmp    edx,0x66
c00171e6:	0f 84 e2 01 00 00    	je     c00173ce <Vm::faultHandler(regs*)+0x25e>
c00171ec:	77 47                	ja     c0017235 <Vm::faultHandler(regs*)+0xc5>
c00171ee:	83 fa 36             	cmp    edx,0x36
c00171f1:	0f 84 ca 01 00 00    	je     c00173c1 <Vm::faultHandler(regs*)+0x251>
c00171f7:	77 1a                	ja     c0017213 <Vm::faultHandler(regs*)+0xa3>
c00171f9:	83 fa 26             	cmp    edx,0x26
c00171fc:	0f 84 98 01 00 00    	je     c001739a <Vm::faultHandler(regs*)+0x22a>
c0017202:	83 fa 2e             	cmp    edx,0x2e
c0017205:	0f 85 27 06 00 00    	jne    c0017832 <Vm::faultHandler(regs*)+0x6c2>
c001720b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001720e:	31 f6                	xor    esi,esi
c0017210:	41                   	inc    ecx
c0017211:	eb bb                	jmp    c00171ce <Vm::faultHandler(regs*)+0x5e>
c0017213:	83 fa 64             	cmp    edx,0x64
c0017216:	0f 84 8b 01 00 00    	je     c00173a7 <Vm::faultHandler(regs*)+0x237>
c001721c:	0f 87 92 01 00 00    	ja     c00173b4 <Vm::faultHandler(regs*)+0x244>
c0017222:	83 fa 3e             	cmp    edx,0x3e
c0017225:	0f 85 07 06 00 00    	jne    c0017832 <Vm::faultHandler(regs*)+0x6c2>
c001722b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001722e:	be 01 00 00 00       	mov    esi,0x1
c0017233:	eb db                	jmp    c0017210 <Vm::faultHandler(regs*)+0xa0>
c0017235:	83 fa 6d             	cmp    edx,0x6d
c0017238:	0f 84 34 03 00 00    	je     c0017572 <Vm::faultHandler(regs*)+0x402>
c001723e:	77 17                	ja     c0017257 <Vm::faultHandler(regs*)+0xe7>
c0017240:	83 fa 67             	cmp    edx,0x67
c0017243:	0f 84 92 01 00 00    	je     c00173db <Vm::faultHandler(regs*)+0x26b>
c0017249:	83 fa 6c             	cmp    edx,0x6c
c001724c:	0f 84 b1 02 00 00    	je     c0017503 <Vm::faultHandler(regs*)+0x393>
c0017252:	e9 db 05 00 00       	jmp    c0017832 <Vm::faultHandler(regs*)+0x6c2>
c0017257:	83 fa 6f             	cmp    edx,0x6f
c001725a:	0f 84 40 04 00 00    	je     c00176a0 <Vm::faultHandler(regs*)+0x530>
c0017260:	0f 82 a2 03 00 00    	jb     c0017608 <Vm::faultHandler(regs*)+0x498>
c0017266:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c001726c:	0f 84 76 01 00 00    	je     c00173e8 <Vm::faultHandler(regs*)+0x278>
c0017272:	e9 bb 05 00 00       	jmp    c0017832 <Vm::faultHandler(regs*)+0x6c2>
c0017277:	81 fa ec 00 00 00    	cmp    edx,0xec
c001727d:	0f 84 57 05 00 00    	je     c00177da <Vm::faultHandler(regs*)+0x66a>
c0017283:	0f 87 a9 00 00 00    	ja     c0017332 <Vm::faultHandler(regs*)+0x1c2>
c0017289:	81 fa e4 00 00 00    	cmp    edx,0xe4
c001728f:	0f 84 d6 04 00 00    	je     c001776b <Vm::faultHandler(regs*)+0x5fb>
c0017295:	77 78                	ja     c001730f <Vm::faultHandler(regs*)+0x19f>
c0017297:	81 fa cd 00 00 00    	cmp    edx,0xcd
c001729d:	0f 84 0e 02 00 00    	je     c00174b1 <Vm::faultHandler(regs*)+0x341>
c00172a3:	81 fa cf 00 00 00    	cmp    edx,0xcf
c00172a9:	0f 85 83 05 00 00    	jne    c0017832 <Vm::faultHandler(regs*)+0x6c2>
c00172af:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00172b3:	89 d1                	mov    ecx,edx
c00172b5:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00172b8:	c1 e1 08             	shl    ecx,0x8
c00172bb:	09 ca                	or     edx,ecx
c00172bd:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00172c0:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00172c4:	89 d1                	mov    ecx,edx
c00172c6:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00172ca:	c1 e1 08             	shl    ecx,0x8
c00172cd:	09 ca                	or     edx,ecx
c00172cf:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00172d2:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c00172d6:	89 d1                	mov    ecx,edx
c00172d8:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c00172dc:	c1 e1 08             	shl    ecx,0x8
c00172df:	09 ca                	or     edx,ecx
c00172e1:	81 ca 00 02 02 00    	or     edx,0x20200
c00172e7:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00172ea:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c00172ee:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00172f4:	d1 e8                	shr    eax,1
c00172f6:	83 e0 01             	and    eax,0x1
c00172f9:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00172fc:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00172ff:	83 c0 06             	add    eax,0x6
c0017302:	25 ff ff 00 00       	and    eax,0xffff
c0017307:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001730a:	e9 1f 05 00 00       	jmp    c001782e <Vm::faultHandler(regs*)+0x6be>
c001730f:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0017315:	0f 84 95 04 00 00    	je     c00177b0 <Vm::faultHandler(regs*)+0x640>
c001731b:	0f 82 66 04 00 00    	jb     c0017787 <Vm::faultHandler(regs*)+0x617>
c0017321:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0017327:	0f 84 9a 04 00 00    	je     c00177c7 <Vm::faultHandler(regs*)+0x657>
c001732d:	e9 00 05 00 00       	jmp    c0017832 <Vm::faultHandler(regs*)+0x6c2>
c0017332:	81 fa ef 00 00 00    	cmp    edx,0xef
c0017338:	0f 84 dd 04 00 00    	je     c001781b <Vm::faultHandler(regs*)+0x6ab>
c001733e:	77 2e                	ja     c001736e <Vm::faultHandler(regs*)+0x1fe>
c0017340:	81 fa ed 00 00 00    	cmp    edx,0xed
c0017346:	0f 84 aa 04 00 00    	je     c00177f6 <Vm::faultHandler(regs*)+0x686>
c001734c:	81 fa ee 00 00 00    	cmp    edx,0xee
c0017352:	0f 85 da 04 00 00    	jne    c0017832 <Vm::faultHandler(regs*)+0x6c2>
c0017358:	50                   	push   eax
c0017359:	50                   	push   eax
c001735a:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001735e:	50                   	push   eax
c001735f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017363:	50                   	push   eax
c0017364:	e8 13 f9 ff ff       	call   c0016c7c <Vm::outbv(unsigned short, unsigned char)>
c0017369:	e9 a5 04 00 00       	jmp    c0017813 <Vm::faultHandler(regs*)+0x6a3>
c001736e:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0017374:	0f 84 6d 01 00 00    	je     c00174e7 <Vm::faultHandler(regs*)+0x377>
c001737a:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0017380:	0f 84 6f 01 00 00    	je     c00174f5 <Vm::faultHandler(regs*)+0x385>
c0017386:	81 fa f3 00 00 00    	cmp    edx,0xf3
c001738c:	0f 85 a0 04 00 00    	jne    c0017832 <Vm::faultHandler(regs*)+0x6c2>
c0017392:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017395:	e9 76 fe ff ff       	jmp    c0017210 <Vm::faultHandler(regs*)+0xa0>
c001739a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001739d:	be 02 00 00 00       	mov    esi,0x2
c00173a2:	e9 69 fe ff ff       	jmp    c0017210 <Vm::faultHandler(regs*)+0xa0>
c00173a7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00173aa:	be 03 00 00 00       	mov    esi,0x3
c00173af:	e9 5c fe ff ff       	jmp    c0017210 <Vm::faultHandler(regs*)+0xa0>
c00173b4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00173b7:	be 04 00 00 00       	mov    esi,0x4
c00173bc:	e9 4f fe ff ff       	jmp    c0017210 <Vm::faultHandler(regs*)+0xa0>
c00173c1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00173c4:	be 05 00 00 00       	mov    esi,0x5
c00173c9:	e9 42 fe ff ff       	jmp    c0017210 <Vm::faultHandler(regs*)+0xa0>
c00173ce:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00173d1:	bd 01 00 00 00       	mov    ebp,0x1
c00173d6:	e9 35 fe ff ff       	jmp    c0017210 <Vm::faultHandler(regs*)+0xa0>
c00173db:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00173de:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00173e3:	e9 28 fe ff ff       	jmp    c0017210 <Vm::faultHandler(regs*)+0xa0>
c00173e8:	83 e5 01             	and    ebp,0x1
c00173eb:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00173ee:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00173f2:	74 30                	je     c0017424 <Vm::faultHandler(regs*)+0x2b4>
c00173f4:	83 e9 04             	sub    ecx,0x4
c00173f7:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00173fd:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0017403:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017406:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0017409:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001740f:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0017413:	0f 84 12 04 00 00    	je     c001782b <Vm::faultHandler(regs*)+0x6bb>
c0017419:	80 ce 02             	or     dh,0x2
c001741c:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001741f:	e9 07 04 00 00       	jmp    c001782b <Vm::faultHandler(regs*)+0x6bb>
c0017424:	83 e9 02             	sub    ecx,0x2
c0017427:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001742d:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017430:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017434:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001743a:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001743e:	74 05                	je     c0017445 <Vm::faultHandler(regs*)+0x2d5>
c0017440:	80 ce 02             	or     dh,0x2
c0017443:	eb 03                	jmp    c0017448 <Vm::faultHandler(regs*)+0x2d8>
c0017445:	80 e6 fd             	and    dh,0xfd
c0017448:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001744c:	e9 da 03 00 00       	jmp    c001782b <Vm::faultHandler(regs*)+0x6bb>
c0017451:	83 e5 01             	and    ebp,0x1
c0017454:	74 2a                	je     c0017480 <Vm::faultHandler(regs*)+0x310>
c0017456:	8b 10                	mov    edx,DWORD PTR [eax]
c0017458:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001745e:	81 ca 00 02 02 00    	or     edx,0x20200
c0017464:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017467:	8b 00                	mov    eax,DWORD PTR [eax]
c0017469:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001746f:	c1 e8 09             	shr    eax,0x9
c0017472:	83 e0 01             	and    eax,0x1
c0017475:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017478:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001747b:	83 c0 04             	add    eax,0x4
c001747e:	eb 24                	jmp    c00174a4 <Vm::faultHandler(regs*)+0x334>
c0017480:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0017483:	81 ca 00 02 02 00    	or     edx,0x20200
c0017489:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001748c:	0f b7 00             	movzx  eax,WORD PTR [eax]
c001748f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017495:	c1 e8 09             	shr    eax,0x9
c0017498:	83 e0 01             	and    eax,0x1
c001749b:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001749e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00174a1:	83 c0 02             	add    eax,0x2
c00174a4:	25 ff ff 00 00       	and    eax,0xffff
c00174a9:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00174ac:	e9 7a 03 00 00       	jmp    c001782b <Vm::faultHandler(regs*)+0x6bb>
c00174b1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00174b5:	3d ee 00 00 00       	cmp    eax,0xee
c00174ba:	75 10                	jne    c00174cc <Vm::faultHandler(regs*)+0x35c>
c00174bc:	83 ec 0c             	sub    esp,0xc
c00174bf:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00174c2:	e8 52 f8 ff ff       	call   c0016d19 <Vm::mainloop3(unsigned long)>
c00174c7:	e9 4a 03 00 00       	jmp    c0017816 <Vm::faultHandler(regs*)+0x6a6>
c00174cc:	83 ec 0c             	sub    esp,0xc
c00174cf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00174d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00174d7:	51                   	push   ecx
c00174d8:	50                   	push   eax
c00174d9:	53                   	push   ebx
c00174da:	e8 80 fb ff ff       	call   c001705f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00174df:	83 c4 20             	add    esp,0x20
c00174e2:	e9 47 03 00 00       	jmp    c001782e <Vm::faultHandler(regs*)+0x6be>
c00174e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00174ec:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00174f0:	e9 36 03 00 00       	jmp    c001782b <Vm::faultHandler(regs*)+0x6bb>
c00174f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00174fa:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00174fe:	e9 28 03 00 00       	jmp    c001782b <Vm::faultHandler(regs*)+0x6bb>
c0017503:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017508:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001750b:	74 2b                	je     c0017538 <Vm::faultHandler(regs*)+0x3c8>
c001750d:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0017514:	76 22                	jbe    c0017538 <Vm::faultHandler(regs*)+0x3c8>
c0017516:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001751a:	50                   	push   eax
c001751b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001751f:	50                   	push   eax
c0017520:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017524:	50                   	push   eax
c0017525:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017529:	50                   	push   eax
c001752a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001752e:	50                   	push   eax
c001752f:	6a 6c                	push   0x6c
c0017531:	6a 6c                	push   0x6c
c0017533:	e9 c0 01 00 00       	jmp    c00176f8 <Vm::faultHandler(regs*)+0x588>
c0017538:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001753c:	83 ec 0c             	sub    esp,0xc
c001753f:	0f b7 f6             	movzx  esi,si
c0017542:	50                   	push   eax
c0017543:	e8 21 f7 ff ff       	call   c0016c69 <Vm::inbv(unsigned short)>
c0017548:	83 c4 0c             	add    esp,0xc
c001754b:	0f b6 c0             	movzx  eax,al
c001754e:	50                   	push   eax
c001754f:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0017553:	50                   	push   eax
c0017554:	56                   	push   esi
c0017555:	e8 d6 fb ff ff       	call   c0017130 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001755a:	83 c4 10             	add    esp,0x10
c001755d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017560:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017564:	74 03                	je     c0017569 <Vm::faultHandler(regs*)+0x3f9>
c0017566:	48                   	dec    eax
c0017567:	eb 01                	jmp    c001756a <Vm::faultHandler(regs*)+0x3fa>
c0017569:	40                   	inc    eax
c001756a:	0f b7 c0             	movzx  eax,ax
c001756d:	e9 8e 00 00 00       	jmp    c0017600 <Vm::faultHandler(regs*)+0x490>
c0017572:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017577:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001757a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001757d:	74 29                	je     c00175a8 <Vm::faultHandler(regs*)+0x438>
c001757f:	3d ff ff 00 00       	cmp    eax,0xffff
c0017584:	76 22                	jbe    c00175a8 <Vm::faultHandler(regs*)+0x438>
c0017586:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001758a:	50                   	push   eax
c001758b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001758f:	50                   	push   eax
c0017590:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017594:	50                   	push   eax
c0017595:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017599:	50                   	push   eax
c001759a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001759e:	50                   	push   eax
c001759f:	6a 6d                	push   0x6d
c00175a1:	6a 6d                	push   0x6d
c00175a3:	e9 50 01 00 00       	jmp    c00176f8 <Vm::faultHandler(regs*)+0x588>
c00175a8:	83 e5 01             	and    ebp,0x1
c00175ab:	0f b7 c8             	movzx  ecx,ax
c00175ae:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00175b1:	0f b7 f6             	movzx  esi,si
c00175b4:	74 1e                	je     c00175d4 <Vm::faultHandler(regs*)+0x464>
c00175b6:	ed                   	in     eax,dx
c00175b7:	55                   	push   ebp
c00175b8:	50                   	push   eax
c00175b9:	51                   	push   ecx
c00175ba:	56                   	push   esi
c00175bb:	e8 9b fb ff ff       	call   c001715b <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00175c0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00175c3:	83 c4 10             	add    esp,0x10
c00175c6:	8d 50 04             	lea    edx,[eax+0x4]
c00175c9:	83 e8 04             	sub    eax,0x4
c00175cc:	81 e2 ff ff 00 00    	and    edx,0xffff
c00175d2:	eb 20                	jmp    c00175f4 <Vm::faultHandler(regs*)+0x484>
c00175d4:	66 ed                	in     ax,dx
c00175d6:	57                   	push   edi
c00175d7:	0f b7 c0             	movzx  eax,ax
c00175da:	50                   	push   eax
c00175db:	51                   	push   ecx
c00175dc:	56                   	push   esi
c00175dd:	e8 63 fb ff ff       	call   c0017145 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00175e2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00175e5:	83 c4 10             	add    esp,0x10
c00175e8:	8d 50 02             	lea    edx,[eax+0x2]
c00175eb:	83 e8 02             	sub    eax,0x2
c00175ee:	81 e2 ff ff 00 00    	and    edx,0xffff
c00175f4:	25 ff ff 00 00       	and    eax,0xffff
c00175f9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00175fd:	0f 44 c2             	cmove  eax,edx
c0017600:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0017603:	e9 23 02 00 00       	jmp    c001782b <Vm::faultHandler(regs*)+0x6bb>
c0017608:	8d 46 ff             	lea    eax,[esi-0x1]
c001760b:	0f b6 f0             	movzx  esi,al
c001760e:	83 fe 05             	cmp    esi,0x5
c0017611:	77 23                	ja     c0017636 <Vm::faultHandler(regs*)+0x4c6>
c0017613:	ff 24 b5 cc 2b 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd434]
c001761a:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c001761f:	eb 15                	jmp    c0017636 <Vm::faultHandler(regs*)+0x4c6>
c0017621:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0017625:	eb 0f                	jmp    c0017636 <Vm::faultHandler(regs*)+0x4c6>
c0017627:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001762b:	eb 09                	jmp    c0017636 <Vm::faultHandler(regs*)+0x4c6>
c001762d:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0017631:	eb 03                	jmp    c0017636 <Vm::faultHandler(regs*)+0x4c6>
c0017633:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0017636:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001763b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001763e:	74 29                	je     c0017669 <Vm::faultHandler(regs*)+0x4f9>
c0017640:	3d ff ff 00 00       	cmp    eax,0xffff
c0017645:	76 22                	jbe    c0017669 <Vm::faultHandler(regs*)+0x4f9>
c0017647:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001764b:	50                   	push   eax
c001764c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017650:	50                   	push   eax
c0017651:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017655:	50                   	push   eax
c0017656:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001765a:	50                   	push   eax
c001765b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001765f:	50                   	push   eax
c0017660:	6a 6e                	push   0x6e
c0017662:	6a 6e                	push   0x6e
c0017664:	e9 8f 00 00 00       	jmp    c00176f8 <Vm::faultHandler(regs*)+0x588>
c0017669:	52                   	push   edx
c001766a:	0f b7 c0             	movzx  eax,ax
c001766d:	52                   	push   edx
c001766e:	50                   	push   eax
c001766f:	57                   	push   edi
c0017670:	e8 87 fa ff ff       	call   c00170fc <Vm::readByteFromReal(unsigned short, unsigned short)>
c0017675:	59                   	pop    ecx
c0017676:	5e                   	pop    esi
c0017677:	0f b6 c0             	movzx  eax,al
c001767a:	50                   	push   eax
c001767b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001767f:	50                   	push   eax
c0017680:	e8 f7 f5 ff ff       	call   c0016c7c <Vm::outbv(unsigned short, unsigned char)>
c0017685:	83 c4 10             	add    esp,0x10
c0017688:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001768b:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001768f:	74 03                	je     c0017694 <Vm::faultHandler(regs*)+0x524>
c0017691:	48                   	dec    eax
c0017692:	eb 01                	jmp    c0017695 <Vm::faultHandler(regs*)+0x525>
c0017694:	40                   	inc    eax
c0017695:	0f b7 c0             	movzx  eax,ax
c0017698:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001769b:	e9 8b 01 00 00       	jmp    c001782b <Vm::faultHandler(regs*)+0x6bb>
c00176a0:	8d 46 ff             	lea    eax,[esi-0x1]
c00176a3:	0f b6 f0             	movzx  esi,al
c00176a6:	83 fe 05             	cmp    esi,0x5
c00176a9:	77 1e                	ja     c00176c9 <Vm::faultHandler(regs*)+0x559>
c00176ab:	ff 24 b5 e4 2b 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd41c]
c00176b2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00176b6:	eb 11                	jmp    c00176c9 <Vm::faultHandler(regs*)+0x559>
c00176b8:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00176bb:	eb 0c                	jmp    c00176c9 <Vm::faultHandler(regs*)+0x559>
c00176bd:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00176c0:	eb 07                	jmp    c00176c9 <Vm::faultHandler(regs*)+0x559>
c00176c2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00176c5:	eb 02                	jmp    c00176c9 <Vm::faultHandler(regs*)+0x559>
c00176c7:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00176c9:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00176ce:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00176d1:	74 37                	je     c001770a <Vm::faultHandler(regs*)+0x59a>
c00176d3:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00176d9:	76 2f                	jbe    c001770a <Vm::faultHandler(regs*)+0x59a>
c00176db:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00176df:	50                   	push   eax
c00176e0:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00176e4:	50                   	push   eax
c00176e5:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00176e9:	50                   	push   eax
c00176ea:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00176ee:	50                   	push   eax
c00176ef:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00176f3:	50                   	push   eax
c00176f4:	6a 6f                	push   0x6f
c00176f6:	6a 6f                	push   0x6f
c00176f8:	68 70 2b 02 c0       	push   0xc0022b70
c00176fd:	e8 08 32 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017702:	83 c4 20             	add    esp,0x20
c0017705:	e9 86 01 00 00       	jmp    c0017890 <Vm::faultHandler(regs*)+0x720>
c001770a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001770d:	0f b7 d7             	movzx  edx,di
c0017710:	0f b7 c6             	movzx  eax,si
c0017713:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0017716:	81 e1 00 04 00 00    	and    ecx,0x400
c001771c:	83 e5 01             	and    ebp,0x1
c001771f:	74 1c                	je     c001773d <Vm::faultHandler(regs*)+0x5cd>
c0017721:	55                   	push   ebp
c0017722:	55                   	push   ebp
c0017723:	50                   	push   eax
c0017724:	52                   	push   edx
c0017725:	e8 f5 f9 ff ff       	call   c001711f <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001772a:	83 c4 10             	add    esp,0x10
c001772d:	89 fa                	mov    edx,edi
c001772f:	ef                   	out    dx,eax
c0017730:	8d 46 04             	lea    eax,[esi+0x4]
c0017733:	83 ee 04             	sub    esi,0x4
c0017736:	25 ff ff 00 00       	and    eax,0xffff
c001773b:	eb 1b                	jmp    c0017758 <Vm::faultHandler(regs*)+0x5e8>
c001773d:	55                   	push   ebp
c001773e:	55                   	push   ebp
c001773f:	50                   	push   eax
c0017740:	52                   	push   edx
c0017741:	e8 c7 f9 ff ff       	call   c001710d <Vm::readWordFromReal(unsigned short, unsigned short)>
c0017746:	83 c4 10             	add    esp,0x10
c0017749:	89 fa                	mov    edx,edi
c001774b:	66 ef                	out    dx,ax
c001774d:	8d 46 02             	lea    eax,[esi+0x2]
c0017750:	83 ee 02             	sub    esi,0x2
c0017753:	25 ff ff 00 00       	and    eax,0xffff
c0017758:	81 e6 ff ff 00 00    	and    esi,0xffff
c001775e:	85 c9                	test   ecx,ecx
c0017760:	0f 44 f0             	cmove  esi,eax
c0017763:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0017766:	e9 c0 00 00 00       	jmp    c001782b <Vm::faultHandler(regs*)+0x6bb>
c001776b:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017772:	83 ec 0c             	sub    esp,0xc
c0017775:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017779:	50                   	push   eax
c001777a:	e8 ea f4 ff ff       	call   c0016c69 <Vm::inbv(unsigned short)>
c001777f:	0f b6 c0             	movzx  eax,al
c0017782:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017785:	eb 3a                	jmp    c00177c1 <Vm::faultHandler(regs*)+0x651>
c0017787:	83 e5 01             	and    ebp,0x1
c001778a:	74 07                	je     c0017793 <Vm::faultHandler(regs*)+0x623>
c001778c:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017790:	ed                   	in     eax,dx
c0017791:	eb 14                	jmp    c00177a7 <Vm::faultHandler(regs*)+0x637>
c0017793:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0017796:	66 31 f6             	xor    si,si
c0017799:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001779c:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00177a0:	66 ed                	in     ax,dx
c00177a2:	0f b7 c0             	movzx  eax,ax
c00177a5:	09 f0                	or     eax,esi
c00177a7:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00177aa:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00177ae:	eb 7e                	jmp    c001782e <Vm::faultHandler(regs*)+0x6be>
c00177b0:	52                   	push   edx
c00177b1:	52                   	push   edx
c00177b2:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00177b6:	50                   	push   eax
c00177b7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00177bb:	50                   	push   eax
c00177bc:	e8 bb f4 ff ff       	call   c0016c7c <Vm::outbv(unsigned short, unsigned char)>
c00177c1:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00177c5:	eb 4f                	jmp    c0017816 <Vm::faultHandler(regs*)+0x6a6>
c00177c7:	83 e5 01             	and    ebp,0x1
c00177ca:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00177cd:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00177d1:	74 03                	je     c00177d6 <Vm::faultHandler(regs*)+0x666>
c00177d3:	ef                   	out    dx,eax
c00177d4:	eb d4                	jmp    c00177aa <Vm::faultHandler(regs*)+0x63a>
c00177d6:	66 ef                	out    dx,ax
c00177d8:	eb d0                	jmp    c00177aa <Vm::faultHandler(regs*)+0x63a>
c00177da:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00177de:	83 ec 0c             	sub    esp,0xc
c00177e1:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00177e8:	50                   	push   eax
c00177e9:	e8 7b f4 ff ff       	call   c0016c69 <Vm::inbv(unsigned short)>
c00177ee:	0f b6 c0             	movzx  eax,al
c00177f1:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00177f4:	eb 1d                	jmp    c0017813 <Vm::faultHandler(regs*)+0x6a3>
c00177f6:	83 e5 01             	and    ebp,0x1
c00177f9:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00177fc:	74 03                	je     c0017801 <Vm::faultHandler(regs*)+0x691>
c00177fe:	ed                   	in     eax,dx
c00177ff:	eb 0d                	jmp    c001780e <Vm::faultHandler(regs*)+0x69e>
c0017801:	66 ed                	in     ax,dx
c0017803:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0017806:	0f b7 c0             	movzx  eax,ax
c0017809:	66 31 d2             	xor    dx,dx
c001780c:	09 d0                	or     eax,edx
c001780e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017811:	eb 18                	jmp    c001782b <Vm::faultHandler(regs*)+0x6bb>
c0017813:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017816:	83 c4 10             	add    esp,0x10
c0017819:	eb 13                	jmp    c001782e <Vm::faultHandler(regs*)+0x6be>
c001781b:	83 e5 01             	and    ebp,0x1
c001781e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017821:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017824:	74 03                	je     c0017829 <Vm::faultHandler(regs*)+0x6b9>
c0017826:	ef                   	out    dx,eax
c0017827:	eb 02                	jmp    c001782b <Vm::faultHandler(regs*)+0x6bb>
c0017829:	66 ef                	out    dx,ax
c001782b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001782e:	b0 01                	mov    al,0x1
c0017830:	eb 60                	jmp    c0017892 <Vm::faultHandler(regs*)+0x722>
c0017832:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017836:	50                   	push   eax
c0017837:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001783b:	50                   	push   eax
c001783c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017840:	50                   	push   eax
c0017841:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017845:	50                   	push   eax
c0017846:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001784a:	50                   	push   eax
c001784b:	52                   	push   edx
c001784c:	52                   	push   edx
c001784d:	68 9d 2b 02 c0       	push   0xc0022b9d
c0017852:	e8 b3 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017857:	83 c4 20             	add    esp,0x20
c001785a:	83 ec 0c             	sub    esp,0xc
c001785d:	6a 60                	push   0x60
c001785f:	e8 05 f4 ff ff       	call   c0016c69 <Vm::inbv(unsigned short)>
c0017864:	83 c4 10             	add    esp,0x10
c0017867:	0f b6 d0             	movzx  edx,al
c001786a:	83 fa 1c             	cmp    edx,0x1c
c001786d:	74 05                	je     c0017874 <Vm::faultHandler(regs*)+0x704>
c001786f:	83 fa 5a             	cmp    edx,0x5a
c0017872:	75 e6                	jne    c001785a <Vm::faultHandler(regs*)+0x6ea>
c0017874:	0f b6 c0             	movzx  eax,al
c0017877:	83 f8 1c             	cmp    eax,0x1c
c001787a:	74 05                	je     c0017881 <Vm::faultHandler(regs*)+0x711>
c001787c:	83 f8 5a             	cmp    eax,0x5a
c001787f:	75 0f                	jne    c0017890 <Vm::faultHandler(regs*)+0x720>
c0017881:	83 ec 0c             	sub    esp,0xc
c0017884:	6a 60                	push   0x60
c0017886:	e8 de f3 ff ff       	call   c0016c69 <Vm::inbv(unsigned short)>
c001788b:	83 c4 10             	add    esp,0x10
c001788e:	eb e4                	jmp    c0017874 <Vm::faultHandler(regs*)+0x704>
c0017890:	31 c0                	xor    eax,eax
c0017892:	83 c4 2c             	add    esp,0x2c
c0017895:	5b                   	pop    ebx
c0017896:	5e                   	pop    esi
c0017897:	5f                   	pop    edi
c0017898:	5d                   	pop    ebp
c0017899:	c3                   	ret    

c001789a <noCopro(unsigned long)>:
c001789a:	c3                   	ret    

c001789b <nmiHandler(regs*, void*)>:
c001789b:	83 ec 0c             	sub    esp,0xc
c001789e:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00178a3:	83 ec 0c             	sub    esp,0xc
c00178a6:	50                   	push   eax
c00178a7:	e8 2a fa fe ff       	call   c00072d6 <Computer::handleNMI()>
c00178ac:	83 c4 10             	add    esp,0x10
c00178af:	90                   	nop
c00178b0:	83 c4 0c             	add    esp,0xc
c00178b3:	c3                   	ret    

c00178b4 <doubleFault(regs*, void*)>:
c00178b4:	55                   	push   ebp
c00178b5:	89 e5                	mov    ebp,esp
c00178b7:	83 ec 08             	sub    esp,0x8
c00178ba:	83 ec 0c             	sub    esp,0xc
c00178bd:	68 fc 2b 02 c0       	push   0xc0022bfc
c00178c2:	e8 14 9d ff ff       	call   c00115db <KePanic(char const*)>
c00178c7:	83 c4 10             	add    esp,0x10
c00178ca:	90                   	nop
c00178cb:	c9                   	leave  
c00178cc:	c3                   	ret    

c00178cd <displayDebugInfo(regs*)>:
c00178cd:	83 ec 1c             	sub    esp,0x1c
c00178d0:	0f 20 c0             	mov    eax,cr0
c00178d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00178d7:	0f 20 d0             	mov    eax,cr2
c00178da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00178de:	0f 20 d8             	mov    eax,cr3
c00178e1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00178e5:	0f 20 e0             	mov    eax,cr4
c00178e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00178eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178ef:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00178f2:	83 ec 08             	sub    esp,0x8
c00178f5:	50                   	push   eax
c00178f6:	68 18 2c 02 c0       	push   0xc0022c18
c00178fb:	e8 0a 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017900:	83 c4 10             	add    esp,0x10
c0017903:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017907:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001790a:	83 ec 08             	sub    esp,0x8
c001790d:	50                   	push   eax
c001790e:	68 09 2c 02 c0       	push   0xc0022c09
c0017913:	e8 f2 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017918:	83 c4 10             	add    esp,0x10
c001791b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001791f:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017922:	83 ec 08             	sub    esp,0x8
c0017925:	50                   	push   eax
c0017926:	68 14 2c 02 c0       	push   0xc0022c14
c001792b:	e8 da 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017930:	83 c4 10             	add    esp,0x10
c0017933:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017937:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001793a:	83 ec 08             	sub    esp,0x8
c001793d:	50                   	push   eax
c001793e:	68 23 2c 02 c0       	push   0xc0022c23
c0017943:	e8 c2 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017948:	83 c4 10             	add    esp,0x10
c001794b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001794f:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0017952:	83 ec 08             	sub    esp,0x8
c0017955:	50                   	push   eax
c0017956:	68 2e 2c 02 c0       	push   0xc0022c2e
c001795b:	e8 aa 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017960:	83 c4 10             	add    esp,0x10
c0017963:	83 ec 08             	sub    esp,0x8
c0017966:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001796a:	68 39 2c 02 c0       	push   0xc0022c39
c001796f:	e8 96 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017974:	83 c4 10             	add    esp,0x10
c0017977:	83 ec 08             	sub    esp,0x8
c001797a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001797e:	68 44 2c 02 c0       	push   0xc0022c44
c0017983:	e8 82 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017988:	83 c4 10             	add    esp,0x10
c001798b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001798f:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017992:	c1 e0 05             	shl    eax,0x5
c0017995:	8d 90 c0 3f 02 c0    	lea    edx,[eax-0x3ffdc040]
c001799b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001799f:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00179a2:	83 ec 04             	sub    esp,0x4
c00179a5:	52                   	push   edx
c00179a6:	50                   	push   eax
c00179a7:	68 4f 2c 02 c0       	push   0xc0022c4f
c00179ac:	e8 59 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00179b1:	83 c4 10             	add    esp,0x10
c00179b4:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00179b9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00179bf:	83 ec 0c             	sub    esp,0xc
c00179c2:	50                   	push   eax
c00179c3:	e8 a7 0d ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c00179c8:	83 c4 10             	add    esp,0x10
c00179cb:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00179d0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00179d6:	83 ec 08             	sub    esp,0x8
c00179d9:	68 5e 2c 02 c0       	push   0xc0022c5e
c00179de:	50                   	push   eax
c00179df:	e8 c8 10 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00179e4:	83 c4 10             	add    esp,0x10
c00179e7:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00179ec:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00179f2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00179f6:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c00179f9:	83 ec 08             	sub    esp,0x8
c00179fc:	52                   	push   edx
c00179fd:	50                   	push   eax
c00179fe:	e8 63 10 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017a03:	83 c4 10             	add    esp,0x10
c0017a06:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a0b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a11:	83 ec 08             	sub    esp,0x8
c0017a14:	68 6c 2c 02 c0       	push   0xc0022c6c
c0017a19:	50                   	push   eax
c0017a1a:	e8 8d 10 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017a1f:	83 c4 10             	add    esp,0x10
c0017a22:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a27:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a2d:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0017a32:	8b 12                	mov    edx,DWORD PTR [edx]
c0017a34:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017a37:	83 c2 0c             	add    edx,0xc
c0017a3a:	83 ec 08             	sub    esp,0x8
c0017a3d:	52                   	push   edx
c0017a3e:	50                   	push   eax
c0017a3f:	e8 68 10 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017a44:	83 c4 10             	add    esp,0x10
c0017a47:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a4c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a52:	83 ec 08             	sub    esp,0x8
c0017a55:	68 75 2c 02 c0       	push   0xc0022c75
c0017a5a:	50                   	push   eax
c0017a5b:	e8 4c 10 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017a60:	83 c4 10             	add    esp,0x10
c0017a63:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a68:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a6e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017a72:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017a75:	83 ec 08             	sub    esp,0x8
c0017a78:	52                   	push   edx
c0017a79:	50                   	push   eax
c0017a7a:	e8 e7 0f ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017a7f:	83 c4 10             	add    esp,0x10
c0017a82:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a87:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a8d:	83 ec 08             	sub    esp,0x8
c0017a90:	68 7d 2c 02 c0       	push   0xc0022c7d
c0017a95:	50                   	push   eax
c0017a96:	e8 11 10 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017a9b:	83 c4 10             	add    esp,0x10
c0017a9e:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017aa3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017aa9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017aad:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0017ab0:	83 ec 08             	sub    esp,0x8
c0017ab3:	52                   	push   edx
c0017ab4:	50                   	push   eax
c0017ab5:	e8 ac 0f ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017aba:	83 c4 10             	add    esp,0x10
c0017abd:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ac2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ac8:	83 ec 08             	sub    esp,0x8
c0017acb:	68 85 2c 02 c0       	push   0xc0022c85
c0017ad0:	50                   	push   eax
c0017ad1:	e8 d6 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017ad6:	83 c4 10             	add    esp,0x10
c0017ad9:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ade:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ae4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017ae8:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0017aeb:	83 ec 08             	sub    esp,0x8
c0017aee:	52                   	push   edx
c0017aef:	50                   	push   eax
c0017af0:	e8 71 0f ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017af5:	83 c4 10             	add    esp,0x10
c0017af8:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017afd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b03:	83 ec 08             	sub    esp,0x8
c0017b06:	68 8d 2c 02 c0       	push   0xc0022c8d
c0017b0b:	50                   	push   eax
c0017b0c:	e8 9b 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017b11:	83 c4 10             	add    esp,0x10
c0017b14:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b19:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b1f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b23:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017b26:	83 ec 08             	sub    esp,0x8
c0017b29:	52                   	push   edx
c0017b2a:	50                   	push   eax
c0017b2b:	e8 36 0f ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017b30:	83 c4 10             	add    esp,0x10
c0017b33:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b38:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b3e:	83 ec 08             	sub    esp,0x8
c0017b41:	68 95 2c 02 c0       	push   0xc0022c95
c0017b46:	50                   	push   eax
c0017b47:	e8 60 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017b4c:	83 c4 10             	add    esp,0x10
c0017b4f:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b54:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b5a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b5e:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0017b61:	83 ec 08             	sub    esp,0x8
c0017b64:	52                   	push   edx
c0017b65:	50                   	push   eax
c0017b66:	e8 fb 0e ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017b6b:	83 c4 10             	add    esp,0x10
c0017b6e:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b73:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b79:	83 ec 08             	sub    esp,0x8
c0017b7c:	68 9d 2c 02 c0       	push   0xc0022c9d
c0017b81:	50                   	push   eax
c0017b82:	e8 25 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017b87:	83 c4 10             	add    esp,0x10
c0017b8a:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b8f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b95:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b99:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017b9c:	83 ec 08             	sub    esp,0x8
c0017b9f:	52                   	push   edx
c0017ba0:	50                   	push   eax
c0017ba1:	e8 c0 0e ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017ba6:	83 c4 10             	add    esp,0x10
c0017ba9:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bae:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bb4:	83 ec 08             	sub    esp,0x8
c0017bb7:	68 a5 2c 02 c0       	push   0xc0022ca5
c0017bbc:	50                   	push   eax
c0017bbd:	e8 ea 0e ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017bc2:	83 c4 10             	add    esp,0x10
c0017bc5:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bca:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bd0:	83 ec 08             	sub    esp,0x8
c0017bd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017bd7:	50                   	push   eax
c0017bd8:	e8 89 0e ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017bdd:	83 c4 10             	add    esp,0x10
c0017be0:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017be5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017beb:	83 ec 08             	sub    esp,0x8
c0017bee:	68 ae 2c 02 c0       	push   0xc0022cae
c0017bf3:	50                   	push   eax
c0017bf4:	e8 b3 0e ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017bf9:	83 c4 10             	add    esp,0x10
c0017bfc:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c01:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c07:	83 ec 08             	sub    esp,0x8
c0017c0a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017c0e:	50                   	push   eax
c0017c0f:	e8 52 0e ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017c14:	83 c4 10             	add    esp,0x10
c0017c17:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c1c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c22:	83 ec 08             	sub    esp,0x8
c0017c25:	68 b6 2c 02 c0       	push   0xc0022cb6
c0017c2a:	50                   	push   eax
c0017c2b:	e8 7c 0e ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017c30:	83 c4 10             	add    esp,0x10
c0017c33:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c38:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c3e:	83 ec 08             	sub    esp,0x8
c0017c41:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017c45:	50                   	push   eax
c0017c46:	e8 1b 0e ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017c4b:	83 c4 10             	add    esp,0x10
c0017c4e:	fa                   	cli    
c0017c4f:	f4                   	hlt    
c0017c50:	eb fe                	jmp    c0017c50 <displayDebugInfo(regs*)+0x383>

c0017c52 <HalSystemIdle()>:
c0017c52:	56                   	push   esi
c0017c53:	53                   	push   ebx
c0017c54:	83 ec 14             	sub    esp,0x14
c0017c57:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017c5c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017c62:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0017c68:	83 e0 04             	and    eax,0x4
c0017c6b:	0f b6 c0             	movzx  eax,al
c0017c6e:	85 c0                	test   eax,eax
c0017c70:	0f 95 c0             	setne  al
c0017c73:	0f b6 c0             	movzx  eax,al
c0017c76:	85 c0                	test   eax,eax
c0017c78:	74 4c                	je     c0017cc6 <HalSystemIdle()+0x74>
c0017c7a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017c7f:	83 ec 08             	sub    esp,0x8
c0017c82:	68 e1 00 00 00       	push   0xe1
c0017c87:	50                   	push   eax
c0017c88:	e8 55 f4 fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c0017c8d:	83 c4 10             	add    esp,0x10
c0017c90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017c94:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017c98:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017c9d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017ca1:	83 e2 02             	and    edx,0x2
c0017ca4:	89 d3                	mov    ebx,edx
c0017ca6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017caa:	83 e2 00             	and    edx,0x0
c0017cad:	89 d6                	mov    esi,edx
c0017caf:	56                   	push   esi
c0017cb0:	53                   	push   ebx
c0017cb1:	68 e1 00 00 00       	push   0xe1
c0017cb6:	50                   	push   eax
c0017cb7:	e8 52 f4 fe ff       	call   c000710e <Computer::wrmsr(unsigned int, unsigned long long)>
c0017cbc:	83 c4 10             	add    esp,0x10
c0017cbf:	e8 d0 84 fe ff       	call   c0000194 <doTPAUSE>
c0017cc4:	eb 01                	jmp    c0017cc7 <HalSystemIdle()+0x75>
c0017cc6:	f4                   	hlt    
c0017cc7:	90                   	nop
c0017cc8:	83 c4 14             	add    esp,0x14
c0017ccb:	5b                   	pop    ebx
c0017ccc:	5e                   	pop    esi
c0017ccd:	c3                   	ret    

c0017cce <displayProgramFault(char const*)>:
c0017cce:	83 ec 0c             	sub    esp,0xc
c0017cd1:	83 ec 0c             	sub    esp,0xc
c0017cd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017cd8:	e8 2d 2c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017cdd:	83 c4 10             	add    esp,0x10
c0017ce0:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017ce5:	8b 00                	mov    eax,DWORD PTR [eax]
c0017ce7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017cea:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017cf0:	85 c0                	test   eax,eax
c0017cf2:	74 21                	je     c0017d15 <displayProgramFault(char const*)+0x47>
c0017cf4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017cf9:	8b 00                	mov    eax,DWORD PTR [eax]
c0017cfb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017cfe:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d04:	6a 04                	push   0x4
c0017d06:	6a 0f                	push   0xf
c0017d08:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017d0c:	50                   	push   eax
c0017d0d:	e8 0c 0e ff ff       	call   c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017d12:	83 c4 10             	add    esp,0x10
c0017d15:	90                   	nop
c0017d16:	83 c4 0c             	add    esp,0xc
c0017d19:	c3                   	ret    

c0017d1a <gpFault(regs*, void*)>:
c0017d1a:	83 ec 1c             	sub    esp,0x1c
c0017d1d:	c7 05 74 c7 02 c0 70 71 01 c0 	mov    DWORD PTR ds:0xc002c774,0xc0017170
c0017d27:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017d2c:	85 c0                	test   eax,eax
c0017d2e:	74 1e                	je     c0017d4e <gpFault(regs*, void*)+0x34>
c0017d30:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017d35:	83 ec 0c             	sub    esp,0xc
c0017d38:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d3c:	ff d0                	call   eax
c0017d3e:	83 c4 10             	add    esp,0x10
c0017d41:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017d45:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017d4a:	85 c0                	test   eax,eax
c0017d4c:	75 2e                	jne    c0017d7c <gpFault(regs*, void*)+0x62>
c0017d4e:	83 ec 0c             	sub    esp,0xc
c0017d51:	68 be 2c 02 c0       	push   0xc0022cbe
c0017d56:	e8 73 ff ff ff       	call   c0017cce <displayProgramFault(char const*)>
c0017d5b:	83 c4 10             	add    esp,0x10
c0017d5e:	83 ec 0c             	sub    esp,0xc
c0017d61:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d65:	e8 63 fb ff ff       	call   c00178cd <displayDebugInfo(regs*)>
c0017d6a:	83 c4 10             	add    esp,0x10
c0017d6d:	83 ec 0c             	sub    esp,0xc
c0017d70:	6a 00                	push   0x0
c0017d72:	e8 99 ed ff ff       	call   c0016b10 <Thr::terminateFromIRQ(int)>
c0017d77:	83 c4 10             	add    esp,0x10
c0017d7a:	eb 01                	jmp    c0017d7d <gpFault(regs*, void*)+0x63>
c0017d7c:	90                   	nop
c0017d7d:	83 c4 1c             	add    esp,0x1c
c0017d80:	c3                   	ret    

c0017d81 <pgFault(regs*, void*)>:
c0017d81:	83 ec 1c             	sub    esp,0x1c
c0017d84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d88:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017d8b:	0f 20 d0             	mov    eax,cr2
c0017d8e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017d92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d96:	83 ec 04             	sub    esp,0x4
c0017d99:	52                   	push   edx
c0017d9a:	50                   	push   eax
c0017d9b:	68 9c 2d 02 c0       	push   0xc0022d9c
c0017da0:	e8 65 2b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017da5:	83 c4 10             	add    esp,0x10
c0017da8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017dad:	8b 00                	mov    eax,DWORD PTR [eax]
c0017daf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017db2:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017db8:	0f 20 d2             	mov    edx,cr2
c0017dbb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017dbf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017dc3:	83 ec 08             	sub    esp,0x8
c0017dc6:	52                   	push   edx
c0017dc7:	50                   	push   eax
c0017dc8:	e8 ad 25 ff ff       	call   c000a37a <VAS::tryLoadBackOffDisk(unsigned long)>
c0017dcd:	83 c4 10             	add    esp,0x10
c0017dd0:	0f b6 c0             	movzx  eax,al
c0017dd3:	85 c0                	test   eax,eax
c0017dd5:	75 2e                	jne    c0017e05 <pgFault(regs*, void*)+0x84>
c0017dd7:	83 ec 0c             	sub    esp,0xc
c0017dda:	68 d7 2c 02 c0       	push   0xc0022cd7
c0017ddf:	e8 ea fe ff ff       	call   c0017cce <displayProgramFault(char const*)>
c0017de4:	83 c4 10             	add    esp,0x10
c0017de7:	83 ec 0c             	sub    esp,0xc
c0017dea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017dee:	e8 da fa ff ff       	call   c00178cd <displayDebugInfo(regs*)>
c0017df3:	83 c4 10             	add    esp,0x10
c0017df6:	83 ec 0c             	sub    esp,0xc
c0017df9:	6a 00                	push   0x0
c0017dfb:	e8 10 ed ff ff       	call   c0016b10 <Thr::terminateFromIRQ(int)>
c0017e00:	83 c4 10             	add    esp,0x10
c0017e03:	eb 01                	jmp    c0017e06 <pgFault(regs*, void*)+0x85>
c0017e05:	90                   	nop
c0017e06:	83 c4 1c             	add    esp,0x1c
c0017e09:	c3                   	ret    

c0017e0a <otherISRHandler(regs*, void*)>:
c0017e0a:	83 ec 0c             	sub    esp,0xc
c0017e0d:	83 ec 0c             	sub    esp,0xc
c0017e10:	68 c4 2d 02 c0       	push   0xc0022dc4
c0017e15:	e8 b4 fe ff ff       	call   c0017cce <displayProgramFault(char const*)>
c0017e1a:	83 c4 10             	add    esp,0x10
c0017e1d:	83 ec 0c             	sub    esp,0xc
c0017e20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e24:	e8 a4 fa ff ff       	call   c00178cd <displayDebugInfo(regs*)>
c0017e29:	83 c4 10             	add    esp,0x10
c0017e2c:	83 ec 0c             	sub    esp,0xc
c0017e2f:	6a 00                	push   0x0
c0017e31:	e8 da ec ff ff       	call   c0016b10 <Thr::terminateFromIRQ(int)>
c0017e36:	83 c4 10             	add    esp,0x10
c0017e39:	90                   	nop
c0017e3a:	83 c4 0c             	add    esp,0xc
c0017e3d:	c3                   	ret    

c0017e3e <opcodeFault(regs*, void*)>:
c0017e3e:	55                   	push   ebp
c0017e3f:	89 e5                	mov    ebp,esp
c0017e41:	83 ec 08             	sub    esp,0x8
c0017e44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e47:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017e4a:	83 ec 08             	sub    esp,0x8
c0017e4d:	50                   	push   eax
c0017e4e:	68 e2 2c 02 c0       	push   0xc0022ce2
c0017e53:	e8 b2 2a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017e58:	83 c4 10             	add    esp,0x10
c0017e5b:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017e60:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017e66:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0017e6c:	0f b6 c0             	movzx  eax,al
c0017e6f:	85 c0                	test   eax,eax
c0017e71:	74 21                	je     c0017e94 <opcodeFault(regs*, void*)+0x56>
c0017e73:	83 ec 0c             	sub    esp,0xc
c0017e76:	68 ec 2d 02 c0       	push   0xc0022dec
c0017e7b:	e8 8a 2a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017e80:	83 c4 10             	add    esp,0x10
c0017e83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e86:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017e89:	8d 50 19             	lea    edx,[eax+0x19]
c0017e8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e8f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017e92:	eb 2b                	jmp    c0017ebf <opcodeFault(regs*, void*)+0x81>
c0017e94:	83 ec 0c             	sub    esp,0xc
c0017e97:	68 f0 2c 02 c0       	push   0xc0022cf0
c0017e9c:	e8 2d fe ff ff       	call   c0017cce <displayProgramFault(char const*)>
c0017ea1:	83 c4 10             	add    esp,0x10
c0017ea4:	83 ec 0c             	sub    esp,0xc
c0017ea7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017eaa:	e8 1e fa ff ff       	call   c00178cd <displayDebugInfo(regs*)>
c0017eaf:	83 c4 10             	add    esp,0x10
c0017eb2:	83 ec 0c             	sub    esp,0xc
c0017eb5:	6a 00                	push   0x0
c0017eb7:	e8 54 ec ff ff       	call   c0016b10 <Thr::terminateFromIRQ(int)>
c0017ebc:	83 c4 10             	add    esp,0x10
c0017ebf:	c9                   	leave  
c0017ec0:	c3                   	ret    

c0017ec1 <i386SaveCoprocessor(void*)>:
c0017ec1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ec5:	83 c0 3f             	add    eax,0x3f
c0017ec8:	83 e0 c0             	and    eax,0xffffffc0
c0017ecb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017ecf:	ff 25 70 c7 02 c0    	jmp    DWORD PTR ds:0xc002c770

c0017ed5 <i386LoadCoprocessor(void*)>:
c0017ed5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ed9:	83 c0 3f             	add    eax,0x3f
c0017edc:	83 e0 c0             	and    eax,0xffffffc0
c0017edf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017ee3:	ff 25 6c c7 02 c0    	jmp    DWORD PTR ds:0xc002c76c

c0017ee9 <x87EmulHandler(regs*, void*)>:
c0017ee9:	53                   	push   ebx
c0017eea:	83 ec 08             	sub    esp,0x8
c0017eed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017ef2:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017ef6:	74 10                	je     c0017f08 <x87EmulHandler(regs*, void*)+0x1f>
c0017ef8:	83 ec 0c             	sub    esp,0xc
c0017efb:	68 fd 2c 02 c0       	push   0xc0022cfd
c0017f00:	e8 d6 96 ff ff       	call   c00115db <KePanic(char const*)>
c0017f05:	83 c4 10             	add    esp,0x10
c0017f08:	0f 20 c0             	mov    eax,cr0
c0017f0b:	a8 08                	test   al,0x8
c0017f0d:	74 59                	je     c0017f68 <x87EmulHandler(regs*, void*)+0x7f>
c0017f0f:	0f 06                	clts   
c0017f11:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0017f16:	85 c0                	test   eax,eax
c0017f18:	74 0e                	je     c0017f28 <x87EmulHandler(regs*, void*)+0x3f>
c0017f1a:	83 ec 0c             	sub    esp,0xc
c0017f1d:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017f20:	e8 9c ff ff ff       	call   c0017ec1 <i386SaveCoprocessor(void*)>
c0017f25:	83 c4 10             	add    esp,0x10
c0017f28:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017f2e:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0017f32:	75 12                	jne    c0017f46 <x87EmulHandler(regs*, void*)+0x5d>
c0017f34:	83 ec 0c             	sub    esp,0xc
c0017f37:	68 40 02 00 00       	push   0x240
c0017f3c:	e8 92 fb fe ff       	call   c0007ad3 <malloc>
c0017f41:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0017f44:	eb 10                	jmp    c0017f56 <x87EmulHandler(regs*, void*)+0x6d>
c0017f46:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0017f4b:	83 ec 0c             	sub    esp,0xc
c0017f4e:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017f51:	e8 7f ff ff ff       	call   c0017ed5 <i386LoadCoprocessor(void*)>
c0017f56:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f5b:	83 c4 10             	add    esp,0x10
c0017f5e:	a3 68 c7 02 c0       	mov    ds:0xc002c768,eax
c0017f63:	83 c4 08             	add    esp,0x8
c0017f66:	5b                   	pop    ebx
c0017f67:	c3                   	ret    
c0017f68:	83 ec 0c             	sub    esp,0xc
c0017f6b:	68 11 2d 02 c0       	push   0xc0022d11
c0017f70:	e8 95 29 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017f75:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017f7d:	83 c4 18             	add    esp,0x18
c0017f80:	5b                   	pop    ebx
c0017f81:	e9 8a eb ff ff       	jmp    c0016b10 <Thr::terminateFromIRQ(int)>

c0017f86 <HalInitialiseCoprocessor()>:
c0017f86:	83 ec 10             	sub    esp,0x10
c0017f89:	6a 00                	push   0x0
c0017f8b:	68 e9 7e 01 c0       	push   0xc0017ee9
c0017f90:	6a 07                	push   0x7
c0017f92:	c7 05 68 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c768,0x0
c0017f9c:	e8 a9 4f ff ff       	call   c000cf4a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017fa1:	e8 aa 70 00 00       	call   c001f050 <avxDetect>
c0017fa6:	83 c4 10             	add    esp,0x10
c0017fa9:	85 c0                	test   eax,eax
c0017fab:	74 1c                	je     c0017fc9 <HalInitialiseCoprocessor()+0x43>
c0017fad:	c7 05 70 c7 02 c0 7a f0 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f07a
c0017fb7:	c7 05 6c c7 02 c0 8b f0 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f08b
c0017fc1:	83 c4 0c             	add    esp,0xc
c0017fc4:	e9 d3 70 00 00       	jmp    c001f09c <avxInit>
c0017fc9:	e8 12 74 00 00       	call   c001f3e0 <absolutelyNoChanceInHell>
c0017fce:	85 c0                	test   eax,eax
c0017fd0:	74 1c                	je     c0017fee <HalInitialiseCoprocessor()+0x68>
c0017fd2:	c7 05 70 c7 02 c0 f8 f3 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f3f8
c0017fdc:	c7 05 6c c7 02 c0 00 f4 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f400
c0017fe6:	83 c4 0c             	add    esp,0xc
c0017fe9:	e9 1a 74 00 00       	jmp    c001f408 <sseInit>
c0017fee:	e8 33 74 00 00       	call   c001f426 <x87Detect>
c0017ff3:	85 c0                	test   eax,eax
c0017ff5:	74 1c                	je     c0018013 <HalInitialiseCoprocessor()+0x8d>
c0017ff7:	c7 05 70 c7 02 c0 41 f4 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f441
c0018001:	c7 05 6c c7 02 c0 48 f4 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f448
c001800b:	83 c4 0c             	add    esp,0xc
c001800e:	e9 3c 74 00 00       	jmp    c001f44f <x87Init>
c0018013:	c7 05 70 c7 02 c0 9a 78 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001789a
c001801d:	c7 05 6c c7 02 c0 9a 78 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001789a
c0018027:	0f 20 c0             	mov    eax,cr0
c001802a:	83 c8 04             	or     eax,0x4
c001802d:	0f 22 c0             	mov    cr0,eax
c0018030:	83 c4 0c             	add    esp,0xc
c0018033:	c3                   	ret    

c0018034 <HalPanic(char const*)>:
c0018034:	53                   	push   ebx
c0018035:	83 ec 10             	sub    esp,0x10
c0018038:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001803c:	fa                   	cli    
c001803d:	53                   	push   ebx
c001803e:	68 27 2d 02 c0       	push   0xc0022d27
c0018043:	e8 c2 28 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0018048:	a1 64 c7 02 c0       	mov    eax,ds:0xc002c764
c001804d:	83 c4 10             	add    esp,0x10
c0018050:	85 c0                	test   eax,eax
c0018052:	74 09                	je     c001805d <HalPanic(char const*)+0x29>
c0018054:	83 ec 0c             	sub    esp,0xc
c0018057:	53                   	push   ebx
c0018058:	ff d0                	call   eax
c001805a:	83 c4 10             	add    esp,0x10
c001805d:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c0018062:	85 c0                	test   eax,eax
c0018064:	0f 84 dc 00 00 00    	je     c0018146 <HalPanic(char const*)+0x112>
c001806a:	52                   	push   edx
c001806b:	6a 01                	push   0x1
c001806d:	6a 0f                	push   0xf
c001806f:	50                   	push   eax
c0018070:	e8 55 05 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018075:	59                   	pop    ecx
c0018076:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001807c:	e8 39 07 ff ff       	call   c00087ba <VgaText::clearScreen()>
c0018081:	58                   	pop    eax
c0018082:	5a                   	pop    edx
c0018083:	68 a4 0e 02 c0       	push   0xc0020ea4
c0018088:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001808e:	e8 6f 05 ff ff       	call   c0008602 <VgaText::setTitle(char*)>
c0018093:	83 c4 0c             	add    esp,0xc
c0018096:	6a 01                	push   0x1
c0018098:	6a 0f                	push   0xf
c001809a:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180a0:	e8 25 05 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00180a5:	59                   	pop    ecx
c00180a6:	58                   	pop    eax
c00180a7:	68 40 2d 02 c0       	push   0xc0022d40
c00180ac:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180b2:	e8 f5 09 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00180b7:	83 c4 0c             	add    esp,0xc
c00180ba:	6a 0f                	push   0xf
c00180bc:	6a 01                	push   0x1
c00180be:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180c4:	e8 01 05 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00180c9:	58                   	pop    eax
c00180ca:	5a                   	pop    edx
c00180cb:	68 49 2d 02 c0       	push   0xc0022d49
c00180d0:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180d6:	e8 d1 09 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00180db:	83 c4 0c             	add    esp,0xc
c00180de:	6a 01                	push   0x1
c00180e0:	6a 0f                	push   0xf
c00180e2:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180e8:	e8 dd 04 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00180ed:	59                   	pop    ecx
c00180ee:	58                   	pop    eax
c00180ef:	68 8d 2d 02 c0       	push   0xc0022d8d
c00180f4:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180fa:	e8 ad 09 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00180ff:	58                   	pop    eax
c0018100:	5a                   	pop    edx
c0018101:	68 56 2d 02 c0       	push   0xc0022d56
c0018106:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001810c:	e8 9b 09 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0018111:	59                   	pop    ecx
c0018112:	58                   	pop    eax
c0018113:	68 90 2d 02 c0       	push   0xc0022d90
c0018118:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001811e:	e8 89 09 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0018123:	58                   	pop    eax
c0018124:	5a                   	pop    edx
c0018125:	53                   	push   ebx
c0018126:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001812c:	e8 7b 09 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0018131:	59                   	pop    ecx
c0018132:	5b                   	pop    ebx
c0018133:	68 8d 2d 02 c0       	push   0xc0022d8d
c0018138:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001813e:	e8 69 09 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0018143:	83 c4 10             	add    esp,0x10
c0018146:	eb fe                	jmp    c0018146 <HalPanic(char const*)+0x112>

c0018148 <HalQueryPerformanceCounter()>:
c0018148:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001814d:	31 d2                	xor    edx,edx
c001814f:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0018155:	31 c0                	xor    eax,eax
c0018157:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c001815e:	74 02                	je     c0018162 <HalQueryPerformanceCounter()+0x1a>
c0018160:	0f 31                	rdtsc  
c0018162:	c3                   	ret    

c0018163 <HalInitialise()>:
c0018163:	53                   	push   ebx
c0018164:	83 ec 08             	sub    esp,0x8
c0018167:	e8 15 50 ff ff       	call   c000d181 <setupINTS()>
c001816c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018171:	80 3d e0 bb 02 c0 00 	cmp    BYTE PTR ds:0xc002bbe0,0x0
c0018178:	75 0f                	jne    c0018189 <HalInitialise()+0x26>
c001817a:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0018180:	83 e2 fe             	and    edx,0xfffffffe
c0018183:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0018189:	c6 05 60 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c760,0x0
c0018190:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0018196:	83 e2 fe             	and    edx,0xfffffffe
c0018199:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001819f:	e8 a0 02 00 00       	call   c0018444 <picOpen()>
c00181a4:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c00181ab:	74 0a                	je     c00181b7 <HalInitialise()+0x54>
c00181ad:	e8 e2 01 00 00       	call   c0018394 <picDisable()>
c00181b2:	e8 0d 68 00 00       	call   c001e9c4 <apicOpen()>
c00181b7:	50                   	push   eax
c00181b8:	bb 0f 00 00 00       	mov    ebx,0xf
c00181bd:	6a 00                	push   0x0
c00181bf:	68 0a 7e 01 c0       	push   0xc0017e0a
c00181c4:	6a 00                	push   0x0
c00181c6:	e8 7f 4d ff ff       	call   c000cf4a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181cb:	83 c4 0c             	add    esp,0xc
c00181ce:	6a 00                	push   0x0
c00181d0:	68 0a 7e 01 c0       	push   0xc0017e0a
c00181d5:	6a 01                	push   0x1
c00181d7:	e8 6e 4d ff ff       	call   c000cf4a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181dc:	83 c4 0c             	add    esp,0xc
c00181df:	6a 00                	push   0x0
c00181e1:	68 9b 78 01 c0       	push   0xc001789b
c00181e6:	6a 02                	push   0x2
c00181e8:	e8 5d 4d ff ff       	call   c000cf4a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181ed:	83 c4 0c             	add    esp,0xc
c00181f0:	6a 00                	push   0x0
c00181f2:	68 0a 7e 01 c0       	push   0xc0017e0a
c00181f7:	6a 03                	push   0x3
c00181f9:	e8 4c 4d ff ff       	call   c000cf4a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181fe:	83 c4 0c             	add    esp,0xc
c0018201:	6a 00                	push   0x0
c0018203:	68 0a 7e 01 c0       	push   0xc0017e0a
c0018208:	6a 04                	push   0x4
c001820a:	e8 3b 4d ff ff       	call   c000cf4a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001820f:	83 c4 0c             	add    esp,0xc
c0018212:	6a 00                	push   0x0
c0018214:	68 0a 7e 01 c0       	push   0xc0017e0a
c0018219:	6a 05                	push   0x5
c001821b:	e8 2a 4d ff ff       	call   c000cf4a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018220:	83 c4 0c             	add    esp,0xc
c0018223:	6a 00                	push   0x0
c0018225:	68 3e 7e 01 c0       	push   0xc0017e3e
c001822a:	6a 06                	push   0x6
c001822c:	e8 19 4d ff ff       	call   c000cf4a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018231:	83 c4 0c             	add    esp,0xc
c0018234:	6a 00                	push   0x0
c0018236:	68 b4 78 01 c0       	push   0xc00178b4
c001823b:	6a 08                	push   0x8
c001823d:	e8 08 4d ff ff       	call   c000cf4a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018242:	83 c4 0c             	add    esp,0xc
c0018245:	6a 00                	push   0x0
c0018247:	68 0a 7e 01 c0       	push   0xc0017e0a
c001824c:	6a 09                	push   0x9
c001824e:	e8 f7 4c ff ff       	call   c000cf4a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018253:	83 c4 0c             	add    esp,0xc
c0018256:	6a 00                	push   0x0
c0018258:	68 0a 7e 01 c0       	push   0xc0017e0a
c001825d:	6a 0a                	push   0xa
c001825f:	e8 e6 4c ff ff       	call   c000cf4a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018264:	83 c4 0c             	add    esp,0xc
c0018267:	6a 00                	push   0x0
c0018269:	68 0a 7e 01 c0       	push   0xc0017e0a
c001826e:	6a 0b                	push   0xb
c0018270:	e8 d5 4c ff ff       	call   c000cf4a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018275:	83 c4 0c             	add    esp,0xc
c0018278:	6a 00                	push   0x0
c001827a:	68 1a 7d 01 c0       	push   0xc0017d1a
c001827f:	6a 0d                	push   0xd
c0018281:	e8 c4 4c ff ff       	call   c000cf4a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018286:	83 c4 0c             	add    esp,0xc
c0018289:	6a 00                	push   0x0
c001828b:	68 81 7d 01 c0       	push   0xc0017d81
c0018290:	6a 0e                	push   0xe
c0018292:	e8 b3 4c ff ff       	call   c000cf4a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018297:	83 c4 10             	add    esp,0x10
c001829a:	50                   	push   eax
c001829b:	6a 00                	push   0x0
c001829d:	68 0a 7e 01 c0       	push   0xc0017e0a
c00182a2:	53                   	push   ebx
c00182a3:	43                   	inc    ebx
c00182a4:	e8 a1 4c ff ff       	call   c000cf4a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182a9:	83 c4 10             	add    esp,0x10
c00182ac:	83 fb 1e             	cmp    ebx,0x1e
c00182af:	75 e9                	jne    c001829a <HalInitialise()+0x137>
c00182b1:	50                   	push   eax
c00182b2:	6a 00                	push   0x0
c00182b4:	68 72 2a 01 c0       	push   0xc0012a72
c00182b9:	6a 60                	push   0x60
c00182bb:	e8 8a 4c ff ff       	call   c000cf4a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182c0:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00182c5:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00182cf:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00182d6:	e8 f8 f7 fe ff       	call   c0007ad3 <malloc>
c00182db:	89 04 24             	mov    DWORD PTR [esp],eax
c00182de:	89 c3                	mov    ebx,eax
c00182e0:	e8 37 09 00 00       	call   c0018c1c <RTC::RTC()>
c00182e5:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c00182ef:	5a                   	pop    edx
c00182f0:	59                   	pop    ecx
c00182f1:	53                   	push   ebx
c00182f2:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00182f8:	e8 17 47 ff ff       	call   c000ca14 <Device::addChild(Device*)>
c00182fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00182ff:	6a 00                	push   0x0
c0018301:	6a 00                	push   0x0
c0018303:	6a 00                	push   0x0
c0018305:	53                   	push   ebx
c0018306:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018309:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001830e:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0018314:	83 c4 28             	add    esp,0x28
c0018317:	5b                   	pop    ebx
c0018318:	c3                   	ret    

c0018319 <HalMakeBeep(int)>:
c0018319:	53                   	push   ebx
c001831a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001831e:	85 db                	test   ebx,ebx
c0018320:	75 07                	jne    c0018329 <HalMakeBeep(int)+0x10>
c0018322:	e4 61                	in     al,0x61
c0018324:	83 e0 fc             	and    eax,0xfffffffc
c0018327:	eb 26                	jmp    c001834f <HalMakeBeep(int)+0x36>
c0018329:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001832e:	99                   	cdq    
c001832f:	f7 fb                	idiv   ebx
c0018331:	89 c1                	mov    ecx,eax
c0018333:	b0 b6                	mov    al,0xb6
c0018335:	e6 43                	out    0x43,al
c0018337:	88 c8                	mov    al,cl
c0018339:	e6 42                	out    0x42,al
c001833b:	89 c8                	mov    eax,ecx
c001833d:	c1 e8 08             	shr    eax,0x8
c0018340:	e6 42                	out    0x42,al
c0018342:	e4 61                	in     al,0x61
c0018344:	89 c2                	mov    edx,eax
c0018346:	83 ca 03             	or     edx,0x3
c0018349:	38 d0                	cmp    al,dl
c001834b:	74 04                	je     c0018351 <HalMakeBeep(int)+0x38>
c001834d:	88 d0                	mov    al,dl
c001834f:	e6 61                	out    0x61,al
c0018351:	5b                   	pop    ebx
c0018352:	c3                   	ret    

c0018353 <HalGetRand()>:
c0018353:	31 c0                	xor    eax,eax
c0018355:	c3                   	ret    

c0018356 <HalEndOfInterrupt(int)>:
c0018356:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c001835d:	74 23                	je     c0018382 <HalEndOfInterrupt(int)+0x2c>
c001835f:	83 ec 14             	sub    esp,0x14
c0018362:	6a 1b                	push   0x1b
c0018364:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001836a:	e8 73 ed fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c001836f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018374:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001837e:	83 c4 1c             	add    esp,0x1c
c0018381:	c3                   	ret    
c0018382:	e9 41 02 00 00       	jmp    c00185c8 <picEOI(int)>

c0018387 <HalRestart()>:
c0018387:	c3                   	ret    

c0018388 <HalShutdown()>:
c0018388:	c3                   	ret    

c0018389 <HalSleep()>:
c0018389:	c3                   	ret    
c001838a:	66 90                	xchg   ax,ax

c001838c <picIoWait()>:
c001838c:	eb 00                	jmp    c001838e <picIoWait()+0x2>
c001838e:	eb 00                	jmp    c0018390 <picIoWait()+0x4>
c0018390:	90                   	nop
c0018391:	c3                   	ret    
c0018392:	66 90                	xchg   ax,ax

c0018394 <picDisable()>:
c0018394:	83 ec 10             	sub    esp,0x10
c0018397:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001839e:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00183a3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00183a7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00183ac:	ee                   	out    dx,al
c00183ad:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00183b4:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00183b9:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00183bd:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00183c2:	ee                   	out    dx,al
c00183c3:	90                   	nop
c00183c4:	83 c4 10             	add    esp,0x10
c00183c7:	c3                   	ret    

c00183c8 <picGetIRQReg(int)>:
c00183c8:	83 ec 10             	sub    esp,0x10
c00183cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00183cf:	0f b6 c0             	movzx  eax,al
c00183d2:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00183d9:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00183dd:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00183e1:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00183e6:	ee                   	out    dx,al
c00183e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00183eb:	0f b6 c0             	movzx  eax,al
c00183ee:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00183f5:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00183f9:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00183fd:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018402:	ee                   	out    dx,al
c0018403:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001840a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001840f:	89 c2                	mov    edx,eax
c0018411:	ec                   	in     al,dx
c0018412:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018416:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001841a:	0f b6 c0             	movzx  eax,al
c001841d:	c1 e0 08             	shl    eax,0x8
c0018420:	89 c1                	mov    ecx,eax
c0018422:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0018429:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001842e:	89 c2                	mov    edx,eax
c0018430:	ec                   	in     al,dx
c0018431:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018435:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018439:	0f b6 c0             	movzx  eax,al
c001843c:	09 c8                	or     eax,ecx
c001843e:	83 c4 10             	add    esp,0x10
c0018441:	c3                   	ret    
c0018442:	66 90                	xchg   ax,ax

c0018444 <picOpen()>:
c0018444:	83 ec 50             	sub    esp,0x50
c0018447:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001844e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0018453:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018457:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001845b:	ee                   	out    dx,al
c001845c:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0018463:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018468:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001846c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018470:	ee                   	out    dx,al
c0018471:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0018479:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0018481:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0018488:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001848c:	89 c2                	mov    edx,eax
c001848e:	ec                   	in     al,dx
c001848f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0018493:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018497:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001849b:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00184a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00184a6:	89 c2                	mov    edx,eax
c00184a8:	ec                   	in     al,dx
c00184a9:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00184ad:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00184b1:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00184b5:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00184bc:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c00184c1:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00184c5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00184c9:	ee                   	out    dx,al
c00184ca:	e8 bd fe ff ff       	call   c001838c <picIoWait()>
c00184cf:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c00184d6:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00184db:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00184df:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00184e3:	ee                   	out    dx,al
c00184e4:	e8 a3 fe ff ff       	call   c001838c <picIoWait()>
c00184e9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00184ed:	0f b6 c0             	movzx  eax,al
c00184f0:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c00184f7:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c00184fb:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00184ff:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018503:	ee                   	out    dx,al
c0018504:	e8 83 fe ff ff       	call   c001838c <picIoWait()>
c0018509:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001850d:	0f b6 c0             	movzx  eax,al
c0018510:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0018517:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001851b:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001851f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018523:	ee                   	out    dx,al
c0018524:	e8 63 fe ff ff       	call   c001838c <picIoWait()>
c0018529:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0018530:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0018535:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0018539:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001853d:	ee                   	out    dx,al
c001853e:	e8 49 fe ff ff       	call   c001838c <picIoWait()>
c0018543:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001854a:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001854f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0018553:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018557:	ee                   	out    dx,al
c0018558:	e8 2f fe ff ff       	call   c001838c <picIoWait()>
c001855d:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0018564:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0018569:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001856d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018571:	ee                   	out    dx,al
c0018572:	e8 15 fe ff ff       	call   c001838c <picIoWait()>
c0018577:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001857e:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0018583:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0018587:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001858b:	ee                   	out    dx,al
c001858c:	e8 fb fd ff ff       	call   c001838c <picIoWait()>
c0018591:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0018596:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001859d:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c00185a1:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00185a5:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00185a9:	ee                   	out    dx,al
c00185aa:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c00185af:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00185b6:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00185ba:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c00185be:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00185c2:	ee                   	out    dx,al
c00185c3:	90                   	nop
c00185c4:	83 c4 50             	add    esp,0x50
c00185c7:	c3                   	ret    

c00185c8 <picEOI(int)>:
c00185c8:	83 ec 10             	sub    esp,0x10
c00185cb:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00185d0:	75 1e                	jne    c00185f0 <picEOI(int)+0x28>
c00185d2:	6a 0b                	push   0xb
c00185d4:	e8 ef fd ff ff       	call   c00183c8 <picGetIRQReg(int)>
c00185d9:	83 c4 04             	add    esp,0x4
c00185dc:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00185e1:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c00185e6:	25 80 00 00 00       	and    eax,0x80
c00185eb:	74 73                	je     c0018660 <picEOI(int)+0x98>
c00185ed:	8d 76 00             	lea    esi,[esi+0x0]
c00185f0:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00185f5:	75 31                	jne    c0018628 <picEOI(int)+0x60>
c00185f7:	6a 0b                	push   0xb
c00185f9:	e8 ca fd ff ff       	call   c00183c8 <picGetIRQReg(int)>
c00185fe:	83 c4 04             	add    esp,0x4
c0018601:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018606:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001860a:	98                   	cwde   
c001860b:	85 c0                	test   eax,eax
c001860d:	78 19                	js     c0018628 <picEOI(int)+0x60>
c001860f:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0018616:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001861b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001861f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018624:	ee                   	out    dx,al
c0018625:	eb 3d                	jmp    c0018664 <picEOI(int)+0x9c>
c0018627:	90                   	nop
c0018628:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001862d:	7e 19                	jle    c0018648 <picEOI(int)+0x80>
c001862f:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018636:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001863b:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001863f:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018644:	ee                   	out    dx,al
c0018645:	8d 76 00             	lea    esi,[esi+0x0]
c0018648:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001864f:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0018654:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018658:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001865d:	ee                   	out    dx,al
c001865e:	eb 04                	jmp    c0018664 <picEOI(int)+0x9c>
c0018660:	90                   	nop
c0018661:	8d 76 00             	lea    esi,[esi+0x0]
c0018664:	83 c4 10             	add    esp,0x10
c0018667:	c3                   	ret    

c0018668 <RTC::open(int, int, void*)>:
c0018668:	31 c0                	xor    eax,eax
c001866a:	c3                   	ret    
c001866b:	90                   	nop

c001866c <RTC::close(int, int, void*)>:
c001866c:	31 c0                	xor    eax,eax
c001866e:	c3                   	ret    
c001866f:	90                   	nop

c0018670 <RTC::timeInSecondsUTC()>:
c0018670:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018674:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001867a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018680:	c3                   	ret    
c0018681:	90                   	nop

c0018682 <RTC::timeInDatetimeUTC()>:
c0018682:	53                   	push   ebx
c0018683:	83 ec 14             	sub    esp,0x14
c0018686:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001868a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001868e:	8b 10                	mov    edx,DWORD PTR [eax]
c0018690:	50                   	push   eax
c0018691:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0018694:	83 c4 0c             	add    esp,0xc
c0018697:	52                   	push   edx
c0018698:	50                   	push   eax
c0018699:	53                   	push   ebx
c001869a:	e8 e9 40 ff ff       	call   c000c788 <secondsToDatetime(unsigned long long)>
c001869f:	89 d8                	mov    eax,ebx
c00186a1:	83 c4 14             	add    esp,0x14
c00186a4:	5b                   	pop    ebx
c00186a5:	c2 04 00             	ret    0x4

c00186a8 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00186a8:	56                   	push   esi
c00186a9:	53                   	push   ebx
c00186aa:	83 ec 14             	sub    esp,0x14
c00186ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00186b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00186b3:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00186b6:	8d 44 24 08          	lea    eax,[esp+0x8]
c00186ba:	52                   	push   edx
c00186bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00186bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00186c3:	50                   	push   eax
c00186c4:	e8 bf 40 ff ff       	call   c000c788 <secondsToDatetime(unsigned long long)>
c00186c9:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00186cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00186d1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00186d5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00186d9:	89 f0                	mov    eax,esi
c00186db:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00186df:	83 c4 20             	add    esp,0x20
c00186e2:	5b                   	pop    ebx
c00186e3:	5e                   	pop    esi
c00186e4:	ff e0                	jmp    eax

c00186e6 <RTC::~RTC()>:
c00186e6:	83 ec 0c             	sub    esp,0xc
c00186e9:	ba 2c 2e 02 c0       	mov    edx,0xc0022e2c
c00186ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00186f2:	89 10                	mov    DWORD PTR [eax],edx
c00186f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00186f8:	83 ec 0c             	sub    esp,0xc
c00186fb:	50                   	push   eax
c00186fc:	e8 13 3e ff ff       	call   c000c514 <Clock::~Clock()>
c0018701:	83 c4 10             	add    esp,0x10
c0018704:	90                   	nop
c0018705:	83 c4 0c             	add    esp,0xc
c0018708:	c3                   	ret    
c0018709:	90                   	nop

c001870a <RTC::~RTC()>:
c001870a:	83 ec 0c             	sub    esp,0xc
c001870d:	83 ec 0c             	sub    esp,0xc
c0018710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018714:	e8 cd ff ff ff       	call   c00186e6 <RTC::~RTC()>
c0018719:	83 c4 10             	add    esp,0x10
c001871c:	83 ec 08             	sub    esp,0x8
c001871f:	68 60 01 00 00       	push   0x160
c0018724:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018728:	e8 df 20 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001872d:	83 c4 10             	add    esp,0x10
c0018730:	83 c4 0c             	add    esp,0xc
c0018733:	c3                   	ret    

c0018734 <RTC::get_update_in_progress_flag()>:
c0018734:	83 ec 14             	sub    esp,0x14
c0018737:	6a 0a                	push   0xa
c0018739:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001873f:	e8 56 ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018744:	83 c4 1c             	add    esp,0x1c
c0018747:	0f b6 c0             	movzx  eax,al
c001874a:	c1 e8 07             	shr    eax,0x7
c001874d:	c3                   	ret    

c001874e <RTC::completeRTCRefresh()>:
c001874e:	55                   	push   ebp
c001874f:	57                   	push   edi
c0018750:	56                   	push   esi
c0018751:	53                   	push   ebx
c0018752:	83 ec 3c             	sub    esp,0x3c
c0018755:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c001875b:	83 ec 0c             	sub    esp,0xc
c001875e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0018762:	e8 cd ff ff ff       	call   c0018734 <RTC::get_update_in_progress_flag()>
c0018767:	83 c4 10             	add    esp,0x10
c001876a:	84 c0                	test   al,al
c001876c:	74 0e                	je     c001877c <RTC::completeRTCRefresh()+0x2e>
c001876e:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018774:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c001877a:	73 df                	jae    c001875b <RTC::completeRTCRefresh()+0xd>
c001877c:	50                   	push   eax
c001877d:	50                   	push   eax
c001877e:	6a 00                	push   0x0
c0018780:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018786:	e8 0f ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001878b:	89 c7                	mov    edi,eax
c001878d:	58                   	pop    eax
c001878e:	5a                   	pop    edx
c001878f:	6a 02                	push   0x2
c0018791:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018797:	e8 fe e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001879c:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00187a0:	59                   	pop    ecx
c00187a1:	5b                   	pop    ebx
c00187a2:	6a 04                	push   0x4
c00187a4:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187aa:	e8 eb e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00187af:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00187b3:	5e                   	pop    esi
c00187b4:	5d                   	pop    ebp
c00187b5:	6a 07                	push   0x7
c00187b7:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187bd:	e8 d8 e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00187c2:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c00187c6:	58                   	pop    eax
c00187c7:	5a                   	pop    edx
c00187c8:	6a 08                	push   0x8
c00187ca:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187d0:	e8 c5 e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00187d5:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c00187d9:	59                   	pop    ecx
c00187da:	5b                   	pop    ebx
c00187db:	6a 09                	push   0x9
c00187dd:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187e3:	e8 b2 e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00187e8:	0f b6 c0             	movzx  eax,al
c00187eb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00187ef:	83 c4 10             	add    esp,0x10
c00187f2:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c00187f8:	83 ec 0c             	sub    esp,0xc
c00187fb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00187ff:	e8 30 ff ff ff       	call   c0018734 <RTC::get_update_in_progress_flag()>
c0018804:	83 c4 10             	add    esp,0x10
c0018807:	84 c0                	test   al,al
c0018809:	74 0e                	je     c0018819 <RTC::completeRTCRefresh()+0xcb>
c001880b:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018811:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c0018817:	73 df                	jae    c00187f8 <RTC::completeRTCRefresh()+0xaa>
c0018819:	51                   	push   ecx
c001881a:	51                   	push   ecx
c001881b:	6a 00                	push   0x0
c001881d:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018823:	e8 72 e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018828:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001882c:	5b                   	pop    ebx
c001882d:	5e                   	pop    esi
c001882e:	6a 02                	push   0x2
c0018830:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018836:	e8 5f e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001883b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001883f:	5d                   	pop    ebp
c0018840:	58                   	pop    eax
c0018841:	6a 04                	push   0x4
c0018843:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018849:	e8 4c e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001884e:	88 c3                	mov    bl,al
c0018850:	58                   	pop    eax
c0018851:	5a                   	pop    edx
c0018852:	6a 07                	push   0x7
c0018854:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001885a:	e8 3b e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001885f:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018863:	59                   	pop    ecx
c0018864:	5e                   	pop    esi
c0018865:	6a 08                	push   0x8
c0018867:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001886d:	e8 28 e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018872:	5d                   	pop    ebp
c0018873:	89 c6                	mov    esi,eax
c0018875:	58                   	pop    eax
c0018876:	6a 09                	push   0x9
c0018878:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001887e:	e8 17 e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018883:	89 f9                	mov    ecx,edi
c0018885:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018889:	83 c4 10             	add    esp,0x10
c001888c:	0f b6 e8             	movzx  ebp,al
c001888f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018894:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0018898:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001889c:	74 27                	je     c00188c5 <RTC::completeRTCRefresh()+0x177>
c001889e:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c00188a2:	89 f0                	mov    eax,esi
c00188a4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00188a8:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00188ac:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00188b0:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c00188b4:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00188b8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00188bc:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00188c0:	e9 2d ff ff ff       	jmp    c00187f2 <RTC::completeRTCRefresh()+0xa4>
c00188c5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00188ca:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00188ce:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00188d2:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c00188d6:	75 c6                	jne    c001889e <RTC::completeRTCRefresh()+0x150>
c00188d8:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00188dd:	89 f1                	mov    ecx,esi
c00188df:	0f b6 fb             	movzx  edi,bl
c00188e2:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c00188e6:	0f b6 c9             	movzx  ecx,cl
c00188e9:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00188ed:	89 f1                	mov    ecx,esi
c00188ef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00188f3:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00188f7:	0f 94 c2             	sete   dl
c00188fa:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c00188fe:	0f 94 c0             	sete   al
c0018901:	21 d0                	and    eax,edx
c0018903:	31 d2                	xor    edx,edx
c0018905:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0018909:	0f 94 c2             	sete   dl
c001890c:	85 c2                	test   edx,eax
c001890e:	74 8e                	je     c001889e <RTC::completeRTCRefresh()+0x150>
c0018910:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0018914:	75 88                	jne    c001889e <RTC::completeRTCRefresh()+0x150>
c0018916:	52                   	push   edx
c0018917:	52                   	push   edx
c0018918:	6a 0b                	push   0xb
c001891a:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018920:	e8 75 e8 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018925:	83 c4 10             	add    esp,0x10
c0018928:	a8 04                	test   al,0x4
c001892a:	75 7a                	jne    c00189a6 <RTC::completeRTCRefresh()+0x258>
c001892c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018930:	c1 ef 04             	shr    edi,0x4
c0018933:	83 e6 0f             	and    esi,0xf
c0018936:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001893a:	c1 ed 04             	shr    ebp,0x4
c001893d:	6b ed 0a             	imul   ebp,ebp,0xa
c0018940:	c1 ea 04             	shr    edx,0x4
c0018943:	6b d2 0a             	imul   edx,edx,0xa
c0018946:	83 e1 0f             	and    ecx,0xf
c0018949:	01 d1                	add    ecx,edx
c001894b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001894f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0018953:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018957:	c1 ea 04             	shr    edx,0x4
c001895a:	6b d2 0a             	imul   edx,edx,0xa
c001895d:	83 e1 0f             	and    ecx,0xf
c0018960:	01 d1                	add    ecx,edx
c0018962:	89 fa                	mov    edx,edi
c0018964:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018968:	83 e2 07             	and    edx,0x7
c001896b:	89 d9                	mov    ecx,ebx
c001896d:	6b d2 0a             	imul   edx,edx,0xa
c0018970:	83 e1 0f             	and    ecx,0xf
c0018973:	83 e3 80             	and    ebx,0xffffff80
c0018976:	01 d1                	add    ecx,edx
c0018978:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001897c:	09 cb                	or     ebx,ecx
c001897e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018982:	c1 ea 04             	shr    edx,0x4
c0018985:	6b d2 0a             	imul   edx,edx,0xa
c0018988:	83 e1 0f             	and    ecx,0xf
c001898b:	01 d1                	add    ecx,edx
c001898d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018991:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0018995:	c1 ea 04             	shr    edx,0x4
c0018998:	6b d2 0a             	imul   edx,edx,0xa
c001899b:	01 d6                	add    esi,edx
c001899d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00189a1:	83 e2 0f             	and    edx,0xf
c00189a4:	01 d5                	add    ebp,edx
c00189a6:	a8 02                	test   al,0x2
c00189a8:	75 15                	jne    c00189bf <RTC::completeRTCRefresh()+0x271>
c00189aa:	f6 c3 80             	test   bl,0x80
c00189ad:	74 10                	je     c00189bf <RTC::completeRTCRefresh()+0x271>
c00189af:	83 e3 7f             	and    ebx,0x7f
c00189b2:	b9 18 00 00 00       	mov    ecx,0x18
c00189b7:	8d 43 0c             	lea    eax,[ebx+0xc]
c00189ba:	99                   	cdq    
c00189bb:	f7 f9                	idiv   ecx
c00189bd:	88 d3                	mov    bl,dl
c00189bf:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c00189c5:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c00189cb:	77 06                	ja     c00189d3 <RTC::completeRTCRefresh()+0x285>
c00189cd:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c00189d3:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00189d8:	31 c9                	xor    ecx,ecx
c00189da:	31 d2                	xor    edx,edx
c00189dc:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00189e0:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c00189e4:	89 cd                	mov    ebp,ecx
c00189e6:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c00189ea:	c1 e7 10             	shl    edi,0x10
c00189ed:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00189f3:	c1 e0 10             	shl    eax,0x10
c00189f6:	09 c5                	or     ebp,eax
c00189f8:	89 e9                	mov    ecx,ebp
c00189fa:	0f b7 c2             	movzx  eax,dx
c00189fd:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0018a01:	09 f8                	or     eax,edi
c0018a03:	89 c2                	mov    edx,eax
c0018a05:	50                   	push   eax
c0018a06:	50                   	push   eax
c0018a07:	88 d9                	mov    cl,bl
c0018a09:	51                   	push   ecx
c0018a0a:	52                   	push   edx
c0018a0b:	e8 f3 3b ff ff       	call   c000c603 <datetimeToSeconds(datetime_t)>
c0018a10:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0018a14:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0018a1a:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0018a20:	83 c4 4c             	add    esp,0x4c
c0018a23:	5b                   	pop    ebx
c0018a24:	5e                   	pop    esi
c0018a25:	5f                   	pop    edi
c0018a26:	5d                   	pop    ebp
c0018a27:	c3                   	ret    

c0018a28 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0018a28:	55                   	push   ebp
c0018a29:	57                   	push   edi
c0018a2a:	56                   	push   esi
c0018a2b:	53                   	push   ebx
c0018a2c:	83 ec 30             	sub    esp,0x30
c0018a2f:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0018a33:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0018a37:	6a 00                	push   0x0
c0018a39:	6a 00                	push   0x0
c0018a3b:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018a41:	e8 6c e8 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018a46:	83 c4 0c             	add    esp,0xc
c0018a49:	6a 00                	push   0x0
c0018a4b:	6a 02                	push   0x2
c0018a4d:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018a53:	e8 5a e8 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018a58:	89 f8                	mov    eax,edi
c0018a5a:	89 f9                	mov    ecx,edi
c0018a5c:	0f b6 c4             	movzx  eax,ah
c0018a5f:	31 d2                	xor    edx,edx
c0018a61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018a65:	c1 e9 10             	shr    ecx,0x10
c0018a68:	89 f0                	mov    eax,esi
c0018a6a:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018a6e:	89 f0                	mov    eax,esi
c0018a70:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0018a74:	0f b6 c4             	movzx  eax,ah
c0018a77:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018a7b:	89 f0                	mov    eax,esi
c0018a7d:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0018a81:	c1 e8 10             	shr    eax,0x10
c0018a84:	b9 64 00 00 00       	mov    ecx,0x64
c0018a89:	f7 f1                	div    ecx
c0018a8b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0018a8f:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0018a93:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018a97:	59                   	pop    ecx
c0018a98:	5b                   	pop    ebx
c0018a99:	89 fb                	mov    ebx,edi
c0018a9b:	6a 0b                	push   0xb
c0018a9d:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018aa3:	e8 f2 e6 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018aa8:	83 c4 10             	add    esp,0x10
c0018aab:	a8 04                	test   al,0x4
c0018aad:	89 c5                	mov    ebp,eax
c0018aaf:	75 6e                	jne    c0018b1f <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0018ab1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018ab5:	31 d2                	xor    edx,edx
c0018ab7:	0f b6 c1             	movzx  eax,cl
c0018aba:	b9 0a 00 00 00       	mov    ecx,0xa
c0018abf:	f7 f1                	div    ecx
c0018ac1:	c1 e0 04             	shl    eax,0x4
c0018ac4:	09 d0                	or     eax,edx
c0018ac6:	31 d2                	xor    edx,edx
c0018ac8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018acc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0018ad1:	f7 f1                	div    ecx
c0018ad3:	c1 e0 04             	shl    eax,0x4
c0018ad6:	09 d0                	or     eax,edx
c0018ad8:	31 d2                	xor    edx,edx
c0018ada:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018ade:	0f b6 c3             	movzx  eax,bl
c0018ae1:	f7 f1                	div    ecx
c0018ae3:	c1 e0 04             	shl    eax,0x4
c0018ae6:	09 d0                	or     eax,edx
c0018ae8:	31 d2                	xor    edx,edx
c0018aea:	89 c3                	mov    ebx,eax
c0018aec:	89 f0                	mov    eax,esi
c0018aee:	0f b6 c0             	movzx  eax,al
c0018af1:	f7 f1                	div    ecx
c0018af3:	c1 e0 04             	shl    eax,0x4
c0018af6:	09 d0                	or     eax,edx
c0018af8:	31 d2                	xor    edx,edx
c0018afa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018afe:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018b03:	f7 f1                	div    ecx
c0018b05:	c1 e0 04             	shl    eax,0x4
c0018b08:	09 d0                	or     eax,edx
c0018b0a:	31 d2                	xor    edx,edx
c0018b0c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018b10:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018b14:	f7 f1                	div    ecx
c0018b16:	c1 e0 04             	shl    eax,0x4
c0018b19:	09 d0                	or     eax,edx
c0018b1b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018b1f:	83 e5 02             	and    ebp,0x2
c0018b22:	75 1e                	jne    c0018b42 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018b24:	0f b6 c3             	movzx  eax,bl
c0018b27:	83 f8 0b             	cmp    eax,0xb
c0018b2a:	76 10                	jbe    c0018b3c <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0018b2c:	8d 53 f4             	lea    edx,[ebx-0xc]
c0018b2f:	84 d2                	test   dl,dl
c0018b31:	88 d3                	mov    bl,dl
c0018b33:	75 02                	jne    c0018b37 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0018b35:	b3 0c                	mov    bl,0xc
c0018b37:	83 cb 80             	or     ebx,0xffffff80
c0018b3a:	eb 06                	jmp    c0018b42 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018b3c:	85 c0                	test   eax,eax
c0018b3e:	75 02                	jne    c0018b42 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018b40:	b3 0c                	mov    bl,0xc
c0018b42:	50                   	push   eax
c0018b43:	0f b6 db             	movzx  ebx,bl
c0018b46:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0018b4b:	52                   	push   edx
c0018b4c:	6a 00                	push   0x0
c0018b4e:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b54:	e8 59 e7 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b59:	83 c4 0c             	add    esp,0xc
c0018b5c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018b61:	50                   	push   eax
c0018b62:	6a 02                	push   0x2
c0018b64:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b6a:	e8 43 e7 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b6f:	83 c4 0c             	add    esp,0xc
c0018b72:	53                   	push   ebx
c0018b73:	6a 04                	push   0x4
c0018b75:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b7b:	e8 32 e7 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b80:	83 c4 0c             	add    esp,0xc
c0018b83:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0018b88:	52                   	push   edx
c0018b89:	6a 07                	push   0x7
c0018b8b:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b91:	e8 1c e7 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b96:	83 c4 0c             	add    esp,0xc
c0018b99:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018b9e:	50                   	push   eax
c0018b9f:	6a 08                	push   0x8
c0018ba1:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018ba7:	e8 06 e7 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018bac:	83 c4 0c             	add    esp,0xc
c0018baf:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0018bb4:	55                   	push   ebp
c0018bb5:	6a 09                	push   0x9
c0018bb7:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018bbd:	e8 f0 e6 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018bc2:	5a                   	pop    edx
c0018bc3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018bc7:	e8 82 fb ff ff       	call   c001874e <RTC::completeRTCRefresh()>
c0018bcc:	83 c4 3c             	add    esp,0x3c
c0018bcf:	b0 01                	mov    al,0x1
c0018bd1:	5b                   	pop    ebx
c0018bd2:	5e                   	pop    esi
c0018bd3:	5f                   	pop    edi
c0018bd4:	5d                   	pop    ebp
c0018bd5:	c3                   	ret    

c0018bd6 <rtcIRQHandler(regs*, void*)>:
c0018bd6:	53                   	push   ebx
c0018bd7:	83 ec 10             	sub    esp,0x10
c0018bda:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018bde:	6a 0c                	push   0xc
c0018be0:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018be6:	e8 af e5 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018beb:	83 c4 10             	add    esp,0x10
c0018bee:	a8 80                	test   al,0x80
c0018bf0:	74 24                	je     c0018c16 <rtcIRQHandler(regs*, void*)+0x40>
c0018bf2:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0018bf9:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0018c00:	66 ff 05 78 c7 02 c0 	inc    WORD PTR ds:0xc002c778
c0018c07:	75 0d                	jne    c0018c16 <rtcIRQHandler(regs*, void*)+0x40>
c0018c09:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018c0d:	83 c4 08             	add    esp,0x8
c0018c10:	5b                   	pop    ebx
c0018c11:	e9 38 fb ff ff       	jmp    c001874e <RTC::completeRTCRefresh()>
c0018c16:	83 c4 08             	add    esp,0x8
c0018c19:	5b                   	pop    ebx
c0018c1a:	c3                   	ret    
c0018c1b:	90                   	nop

c0018c1c <RTC::RTC()>:
c0018c1c:	83 ec 1c             	sub    esp,0x1c
c0018c1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c23:	83 ec 08             	sub    esp,0x8
c0018c26:	68 0f 2e 02 c0       	push   0xc0022e0f
c0018c2b:	50                   	push   eax
c0018c2c:	e8 ad 38 ff ff       	call   c000c4de <Clock::Clock(char const*)>
c0018c31:	83 c4 10             	add    esp,0x10
c0018c34:	ba 2c 2e 02 c0       	mov    edx,0xc0022e2c
c0018c39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c3d:	89 10                	mov    DWORD PTR [eax],edx
c0018c3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c43:	83 ec 0c             	sub    esp,0xc
c0018c46:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018c4a:	6a 01                	push   0x1
c0018c4c:	68 d6 8b 01 c0       	push   0xc0018bd6
c0018c51:	6a 08                	push   0x8
c0018c53:	50                   	push   eax
c0018c54:	e8 67 3d ff ff       	call   c000c9c0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018c59:	83 c4 20             	add    esp,0x20
c0018c5c:	89 c2                	mov    edx,eax
c0018c5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c62:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0018c68:	fa                   	cli    
c0018c69:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018c6e:	83 c0 01             	add    eax,0x1
c0018c71:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018c76:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018c7b:	83 ec 08             	sub    esp,0x8
c0018c7e:	6a 0b                	push   0xb
c0018c80:	50                   	push   eax
c0018c81:	e8 14 e5 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018c86:	83 c4 10             	add    esp,0x10
c0018c89:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018c8d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018c92:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018c96:	83 ca 10             	or     edx,0x10
c0018c99:	0f b6 d2             	movzx  edx,dl
c0018c9c:	83 ec 04             	sub    esp,0x4
c0018c9f:	52                   	push   edx
c0018ca0:	6a 0b                	push   0xb
c0018ca2:	50                   	push   eax
c0018ca3:	e8 0a e6 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018ca8:	83 c4 10             	add    esp,0x10
c0018cab:	83 ec 0c             	sub    esp,0xc
c0018cae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018cb2:	e8 97 fa ff ff       	call   c001874e <RTC::completeRTCRefresh()>
c0018cb7:	83 c4 10             	add    esp,0x10
c0018cba:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018cbf:	83 e8 01             	sub    eax,0x1
c0018cc2:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018cc7:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018ccc:	85 c0                	test   eax,eax
c0018cce:	75 01                	jne    c0018cd1 <RTC::RTC()+0xb5>
c0018cd0:	fb                   	sti    
c0018cd1:	90                   	nop
c0018cd2:	83 c4 1c             	add    esp,0x1c
c0018cd5:	c3                   	ret    
c0018cd6:	66 90                	xchg   ax,ax

c0018cd8 <HalConsoleScroll(int, int)>:
c0018cd8:	83 ec 10             	sub    esp,0x10
c0018cdb:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0018ce3:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0018ceb:	90                   	nop
c0018cec:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018cf1:	0f 8f e1 00 00 00    	jg     c0018dd8 <HalConsoleScroll(int, int)+0x100>
c0018cf7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018cff:	90                   	nop
c0018d00:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0018d08:	0f 8f be 00 00 00    	jg     c0018dcc <HalConsoleScroll(int, int)+0xf4>
c0018d0e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018d12:	89 d0                	mov    eax,edx
c0018d14:	c1 e0 02             	shl    eax,0x2
c0018d17:	01 d0                	add    eax,edx
c0018d19:	c1 e0 05             	shl    eax,0x5
c0018d1c:	89 c2                	mov    edx,eax
c0018d1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d22:	01 d0                	add    eax,edx
c0018d24:	89 c2                	mov    edx,eax
c0018d26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d2a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018d31:	89 d0                	mov    eax,edx
c0018d33:	c1 e0 02             	shl    eax,0x2
c0018d36:	01 d0                	add    eax,edx
c0018d38:	c1 e0 05             	shl    eax,0x5
c0018d3b:	89 c2                	mov    edx,eax
c0018d3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d41:	01 d0                	add    eax,edx
c0018d43:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0018d49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d4d:	01 d0                	add    eax,edx
c0018d4f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0018d51:	88 10                	mov    BYTE PTR [eax],dl
c0018d53:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018d58:	75 66                	jne    c0018dc0 <HalConsoleScroll(int, int)+0xe8>
c0018d5a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d5e:	83 e0 01             	and    eax,0x1
c0018d61:	74 39                	je     c0018d9c <HalConsoleScroll(int, int)+0xc4>
c0018d63:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d67:	83 e0 0f             	and    eax,0xf
c0018d6a:	88 c2                	mov    dl,al
c0018d6c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018d70:	c1 e0 04             	shl    eax,0x4
c0018d73:	09 d0                	or     eax,edx
c0018d75:	88 c1                	mov    cl,al
c0018d77:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018d7b:	89 d0                	mov    eax,edx
c0018d7d:	c1 e0 02             	shl    eax,0x2
c0018d80:	01 d0                	add    eax,edx
c0018d82:	c1 e0 05             	shl    eax,0x5
c0018d85:	89 c2                	mov    edx,eax
c0018d87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d8b:	01 d0                	add    eax,edx
c0018d8d:	89 c2                	mov    edx,eax
c0018d8f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d93:	01 d0                	add    eax,edx
c0018d95:	88 ca                	mov    dl,cl
c0018d97:	88 10                	mov    BYTE PTR [eax],dl
c0018d99:	eb 25                	jmp    c0018dc0 <HalConsoleScroll(int, int)+0xe8>
c0018d9b:	90                   	nop
c0018d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018da0:	89 d0                	mov    eax,edx
c0018da2:	c1 e0 02             	shl    eax,0x2
c0018da5:	01 d0                	add    eax,edx
c0018da7:	c1 e0 05             	shl    eax,0x5
c0018daa:	89 c2                	mov    edx,eax
c0018dac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018db0:	01 d0                	add    eax,edx
c0018db2:	89 c2                	mov    edx,eax
c0018db4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018db8:	01 d0                	add    eax,edx
c0018dba:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0018dbd:	8d 76 00             	lea    esi,[esi+0x0]
c0018dc0:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018dc5:	e9 36 ff ff ff       	jmp    c0018d00 <HalConsoleScroll(int, int)+0x28>
c0018dca:	66 90                	xchg   ax,ax
c0018dcc:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018dd1:	e9 16 ff ff ff       	jmp    c0018cec <HalConsoleScroll(int, int)+0x14>
c0018dd6:	66 90                	xchg   ax,ax
c0018dd8:	90                   	nop
c0018dd9:	83 c4 10             	add    esp,0x10
c0018ddc:	c3                   	ret    
c0018ddd:	8d 76 00             	lea    esi,[esi+0x0]

c0018de0 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0018de0:	83 ec 14             	sub    esp,0x14
c0018de3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018de7:	88 04 24             	mov    BYTE PTR [esp],al
c0018dea:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018ded:	0f b6 c0             	movzx  eax,al
c0018df0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018df4:	89 d1                	mov    ecx,edx
c0018df6:	83 e1 0f             	and    ecx,0xf
c0018df9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018dfd:	c1 e2 04             	shl    edx,0x4
c0018e00:	0f b6 d2             	movzx  edx,dl
c0018e03:	09 ca                	or     edx,ecx
c0018e05:	c1 e2 08             	shl    edx,0x8
c0018e08:	09 d0                	or     eax,edx
c0018e0a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0018e0f:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0018e17:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018e1b:	89 d0                	mov    eax,edx
c0018e1d:	c1 e0 02             	shl    eax,0x2
c0018e20:	01 d0                	add    eax,edx
c0018e22:	c1 e0 04             	shl    eax,0x4
c0018e25:	89 c2                	mov    edx,eax
c0018e27:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018e2b:	01 d0                	add    eax,edx
c0018e2d:	d1 e0                	shl    eax,1
c0018e2f:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018e33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018e37:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0018e3c:	66 89 10             	mov    WORD PTR [eax],dx
c0018e3f:	90                   	nop
c0018e40:	83 c4 14             	add    esp,0x14
c0018e43:	c3                   	ret    

c0018e44 <HalConsoleCursorUpdate(int, int)>:
c0018e44:	83 ec 20             	sub    esp,0x20
c0018e47:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e4b:	89 c2                	mov    edx,eax
c0018e4d:	c1 e2 02             	shl    edx,0x2
c0018e50:	01 d0                	add    eax,edx
c0018e52:	c1 e0 04             	shl    eax,0x4
c0018e55:	89 c2                	mov    edx,eax
c0018e57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018e5b:	01 d0                	add    eax,edx
c0018e5d:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0018e62:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018e69:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0018e6e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018e72:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e76:	ee                   	out    dx,al
c0018e77:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018e7c:	0f b6 c0             	movzx  eax,al
c0018e7f:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018e86:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0018e8a:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018e8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018e92:	ee                   	out    dx,al
c0018e93:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0018e9a:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0018e9f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018ea3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018ea7:	ee                   	out    dx,al
c0018ea8:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018ead:	c1 e8 08             	shr    eax,0x8
c0018eb0:	0f b6 c0             	movzx  eax,al
c0018eb3:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0018eba:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018ebe:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018ec2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018ec6:	ee                   	out    dx,al
c0018ec7:	90                   	nop
c0018ec8:	83 c4 20             	add    esp,0x20
c0018ecb:	c3                   	ret    

c0018ecc <FAT::getName()>:
c0018ecc:	b8 60 2e 02 c0       	mov    eax,0xc0022e60
c0018ed1:	c3                   	ret    
c0018ed2:	66 90                	xchg   ax,ax

c0018ed4 <FAT::tell(void*, unsigned long long*)>:
c0018ed4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018ed9:	75 09                	jne    c0018ee4 <FAT::tell(void*, unsigned long long*)+0x10>
c0018edb:	b8 04 00 00 00       	mov    eax,0x4
c0018ee0:	c3                   	ret    
c0018ee1:	8d 76 00             	lea    esi,[esi+0x0]
c0018ee4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018ee9:	75 09                	jne    c0018ef4 <FAT::tell(void*, unsigned long long*)+0x20>
c0018eeb:	b8 04 00 00 00       	mov    eax,0x4
c0018ef0:	c3                   	ret    
c0018ef1:	8d 76 00             	lea    esi,[esi+0x0]
c0018ef4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ef8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018efb:	ba 00 00 00 00       	mov    edx,0x0
c0018f00:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018f04:	89 01                	mov    DWORD PTR [ecx],eax
c0018f06:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018f09:	b8 00 00 00 00       	mov    eax,0x0
c0018f0e:	c3                   	ret    
c0018f0f:	90                   	nop

c0018f10 <FAT::stat(void*, unsigned long long*)>:
c0018f10:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018f15:	75 09                	jne    c0018f20 <FAT::stat(void*, unsigned long long*)+0x10>
c0018f17:	b8 04 00 00 00       	mov    eax,0x4
c0018f1c:	c3                   	ret    
c0018f1d:	8d 76 00             	lea    esi,[esi+0x0]
c0018f20:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018f25:	75 09                	jne    c0018f30 <FAT::stat(void*, unsigned long long*)+0x20>
c0018f27:	b8 04 00 00 00       	mov    eax,0x4
c0018f2c:	c3                   	ret    
c0018f2d:	8d 76 00             	lea    esi,[esi+0x0]
c0018f30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f34:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018f37:	ba 00 00 00 00       	mov    edx,0x0
c0018f3c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018f40:	89 01                	mov    DWORD PTR [ecx],eax
c0018f42:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018f45:	b8 00 00 00 00       	mov    eax,0x0
c0018f4a:	c3                   	ret    
c0018f4b:	90                   	nop

c0018f4c <FAT::~FAT()>:
c0018f4c:	83 ec 0c             	sub    esp,0xc
c0018f4f:	ba ac 2e 02 c0       	mov    edx,0xc0022eac
c0018f54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f58:	89 10                	mov    DWORD PTR [eax],edx
c0018f5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f5e:	83 ec 0c             	sub    esp,0xc
c0018f61:	50                   	push   eax
c0018f62:	e8 ad 28 ff ff       	call   c000b814 <Filesystem::~Filesystem()>
c0018f67:	83 c4 10             	add    esp,0x10
c0018f6a:	90                   	nop
c0018f6b:	83 c4 0c             	add    esp,0xc
c0018f6e:	c3                   	ret    
c0018f6f:	90                   	nop

c0018f70 <FAT::~FAT()>:
c0018f70:	83 ec 0c             	sub    esp,0xc
c0018f73:	83 ec 0c             	sub    esp,0xc
c0018f76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018f7a:	e8 cd ff ff ff       	call   c0018f4c <FAT::~FAT()>
c0018f7f:	83 c4 10             	add    esp,0x10
c0018f82:	83 ec 08             	sub    esp,0x8
c0018f85:	6a 08                	push   0x8
c0018f87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018f8b:	e8 7c 18 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0018f90:	83 c4 10             	add    esp,0x10
c0018f93:	83 c4 0c             	add    esp,0xc
c0018f96:	c3                   	ret    
c0018f97:	90                   	nop

c0018f98 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018f98:	83 ec 1c             	sub    esp,0x1c
c0018f9b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018fa2:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018fa7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018fab:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0018fb2:	83 f8 ff             	cmp    eax,0xffffffff
c0018fb5:	75 35                	jne    c0018fec <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0018fb7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018fbb:	88 c2                	mov    dl,al
c0018fbd:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0018fc2:	01 d0                	add    eax,edx
c0018fc4:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018fc8:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0018fce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018fd2:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0018fd9:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0018fde:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018fe2:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0018fe9:	eb 19                	jmp    c0019004 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0018feb:	90                   	nop
c0018fec:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018ff0:	88 c2                	mov    dl,al
c0018ff2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ff6:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0018ffd:	01 d0                	add    eax,edx
c0018fff:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019003:	90                   	nop
c0019004:	83 ec 04             	sub    esp,0x4
c0019007:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001900b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001900f:	8d 44 24 15          	lea    eax,[esp+0x15]
c0019013:	50                   	push   eax
c0019014:	e8 da bf fe ff       	call   c0004ff3 <f_getlabel>
c0019019:	83 c4 10             	add    esp,0x10
c001901c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019020:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019025:	75 09                	jne    c0019030 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0019027:	b8 00 00 00 00       	mov    eax,0x0
c001902c:	eb 0a                	jmp    c0019038 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001902e:	66 90                	xchg   ax,ax
c0019030:	b8 01 00 00 00       	mov    eax,0x1
c0019035:	8d 76 00             	lea    esi,[esi+0x0]
c0019038:	83 c4 1c             	add    esp,0x1c
c001903b:	c3                   	ret    

c001903c <FAT::setlabel(LogicalDisk*, int, char*)>:
c001903c:	53                   	push   ebx
c001903d:	83 ec 58             	sub    esp,0x58
c0019040:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0019048:	8d 54 24 10          	lea    edx,[esp+0x10]
c001904c:	b9 00 00 00 00       	mov    ecx,0x0
c0019051:	b8 3c 00 00 00       	mov    eax,0x3c
c0019056:	83 e0 f8             	and    eax,0xfffffff8
c0019059:	89 c3                	mov    ebx,eax
c001905b:	b8 00 00 00 00       	mov    eax,0x0
c0019060:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c0019064:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c0019068:	83 c0 08             	add    eax,0x8
c001906b:	39 d8                	cmp    eax,ebx
c001906d:	72 f1                	jb     c0019060 <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c001906f:	01 c2                	add    edx,eax
c0019071:	89 0a                	mov    DWORD PTR [edx],ecx
c0019073:	83 c2 04             	add    edx,0x4
c0019076:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001907a:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019081:	83 f8 ff             	cmp    eax,0xffffffff
c0019084:	75 36                	jne    c00190bc <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c0019086:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001908a:	88 c2                	mov    dl,al
c001908c:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019091:	01 d0                	add    eax,edx
c0019093:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019097:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c001909d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00190a1:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c00190a8:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00190ad:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00190b1:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c00190b8:	eb 1a                	jmp    c00190d4 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c00190ba:	66 90                	xchg   ax,ax
c00190bc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00190c0:	88 c2                	mov    dl,al
c00190c2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00190c6:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00190cd:	01 d0                	add    eax,edx
c00190cf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00190d3:	90                   	nop
c00190d4:	83 ec 08             	sub    esp,0x8
c00190d7:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00190db:	8d 44 24 18          	lea    eax,[esp+0x18]
c00190df:	50                   	push   eax
c00190e0:	e8 8b 77 fe ff       	call   c0000870 <strcat>
c00190e5:	83 c4 10             	add    esp,0x10
c00190e8:	83 ec 0c             	sub    esp,0xc
c00190eb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00190ef:	50                   	push   eax
c00190f0:	e8 52 c0 fe ff       	call   c0005147 <f_setlabel>
c00190f5:	83 c4 10             	add    esp,0x10
c00190f8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00190fc:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0019101:	75 09                	jne    c001910c <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c0019103:	b8 00 00 00 00       	mov    eax,0x0
c0019108:	eb 0a                	jmp    c0019114 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c001910a:	66 90                	xchg   ax,ax
c001910c:	b8 01 00 00 00       	mov    eax,0x1
c0019111:	8d 76 00             	lea    esi,[esi+0x0]
c0019114:	83 c4 58             	add    esp,0x58
c0019117:	5b                   	pop    ebx
c0019118:	c3                   	ret    
c0019119:	90                   	nop
c001911a:	66 90                	xchg   ax,ax

c001911c <FAT::format(LogicalDisk*, int, char const*, int)>:
c001911c:	83 ec 2c             	sub    esp,0x2c
c001911f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019127:	83 ec 08             	sub    esp,0x8
c001912a:	68 84 2e 02 c0       	push   0xc0022e84
c001912f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019133:	e8 48 76 fe ff       	call   c0000780 <strcmp>
c0019138:	83 c4 10             	add    esp,0x10
c001913b:	85 c0                	test   eax,eax
c001913d:	0f 94 c0             	sete   al
c0019140:	0f b6 c0             	movzx  eax,al
c0019143:	85 c0                	test   eax,eax
c0019145:	74 0d                	je     c0019154 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0019147:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001914f:	e9 c0 00 00 00       	jmp    c0019214 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019154:	83 ec 08             	sub    esp,0x8
c0019157:	68 76 2e 02 c0       	push   0xc0022e76
c001915c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019160:	e8 1b 76 fe ff       	call   c0000780 <strcmp>
c0019165:	83 c4 10             	add    esp,0x10
c0019168:	85 c0                	test   eax,eax
c001916a:	0f 94 c0             	sete   al
c001916d:	0f b6 c0             	movzx  eax,al
c0019170:	85 c0                	test   eax,eax
c0019172:	74 10                	je     c0019184 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0019174:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001917c:	e9 93 00 00 00       	jmp    c0019214 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019181:	8d 76 00             	lea    esi,[esi+0x0]
c0019184:	83 ec 08             	sub    esp,0x8
c0019187:	68 7c 2e 02 c0       	push   0xc0022e7c
c001918c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019190:	e8 eb 75 fe ff       	call   c0000780 <strcmp>
c0019195:	83 c4 10             	add    esp,0x10
c0019198:	85 c0                	test   eax,eax
c001919a:	0f 94 c0             	sete   al
c001919d:	0f b6 c0             	movzx  eax,al
c00191a0:	85 c0                	test   eax,eax
c00191a2:	74 0c                	je     c00191b0 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c00191a4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00191ac:	eb 66                	jmp    c0019214 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00191ae:	66 90                	xchg   ax,ax
c00191b0:	83 ec 08             	sub    esp,0x8
c00191b3:	68 5c 05 02 c0       	push   0xc002055c
c00191b8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00191bc:	e8 bf 75 fe ff       	call   c0000780 <strcmp>
c00191c1:	83 c4 10             	add    esp,0x10
c00191c4:	85 c0                	test   eax,eax
c00191c6:	0f 94 c0             	sete   al
c00191c9:	0f b6 c0             	movzx  eax,al
c00191cc:	85 c0                	test   eax,eax
c00191ce:	74 0c                	je     c00191dc <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c00191d0:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00191d8:	eb 3a                	jmp    c0019214 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00191da:	66 90                	xchg   ax,ax
c00191dc:	83 ec 08             	sub    esp,0x8
c00191df:	68 82 2e 02 c0       	push   0xc0022e82
c00191e4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00191e8:	e8 93 75 fe ff       	call   c0000780 <strcmp>
c00191ed:	83 c4 10             	add    esp,0x10
c00191f0:	85 c0                	test   eax,eax
c00191f2:	0f 94 c0             	sete   al
c00191f5:	0f b6 c0             	movzx  eax,al
c00191f8:	85 c0                	test   eax,eax
c00191fa:	74 0c                	je     c0019208 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c00191fc:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0019204:	eb 0e                	jmp    c0019214 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019206:	66 90                	xchg   ax,ax
c0019208:	b8 08 00 00 00       	mov    eax,0x8
c001920d:	e9 ea 00 00 00       	jmp    c00192fc <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019212:	66 90                	xchg   ax,ax
c0019214:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001921b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0019220:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019224:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c001922b:	83 f8 ff             	cmp    eax,0xffffffff
c001922e:	75 34                	jne    c0019264 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0019230:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019234:	88 c2                	mov    dl,al
c0019236:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001923b:	01 d0                	add    eax,edx
c001923d:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019241:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0019247:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001924b:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019252:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019257:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001925b:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019262:	eb 18                	jmp    c001927c <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0019264:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019268:	88 c2                	mov    dl,al
c001926a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001926e:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019275:	01 d0                	add    eax,edx
c0019277:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001927b:	90                   	nop
c001927c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019280:	88 04 24             	mov    BYTE PTR [esp],al
c0019283:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019287:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001928b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019293:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0019298:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00192a0:	83 ec 0c             	sub    esp,0xc
c00192a3:	68 00 20 00 00       	push   0x2000
c00192a8:	e8 26 e8 fe ff       	call   c0007ad3 <malloc>
c00192ad:	83 c4 10             	add    esp,0x10
c00192b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00192b4:	68 00 20 00 00       	push   0x2000
c00192b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00192bd:	8d 44 24 08          	lea    eax,[esp+0x8]
c00192c1:	50                   	push   eax
c00192c2:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00192c6:	50                   	push   eax
c00192c7:	e8 78 c1 fe ff       	call   c0005444 <f_mkfs>
c00192cc:	83 c4 10             	add    esp,0x10
c00192cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00192d3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00192d8:	75 0a                	jne    c00192e4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00192da:	b8 00 00 00 00       	mov    eax,0x0
c00192df:	eb 1b                	jmp    c00192fc <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00192e1:	8d 76 00             	lea    esi,[esi+0x0]
c00192e4:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00192e9:	75 09                	jne    c00192f4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c00192eb:	b8 09 00 00 00       	mov    eax,0x9
c00192f0:	eb 0a                	jmp    c00192fc <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00192f2:	66 90                	xchg   ax,ax
c00192f4:	b8 01 00 00 00       	mov    eax,0x1
c00192f9:	8d 76 00             	lea    esi,[esi+0x0]
c00192fc:	83 c4 2c             	add    esp,0x2c
c00192ff:	c3                   	ret    

c0019300 <FAT::tryMount(LogicalDisk*, int)>:
c0019300:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0019306:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001930b:	83 f8 14             	cmp    eax,0x14
c001930e:	75 18                	jne    c0019328 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0019310:	83 ec 0c             	sub    esp,0xc
c0019313:	68 88 2e 02 c0       	push   0xc0022e88
c0019318:	e8 be 82 ff ff       	call   c00115db <KePanic(char const*)>
c001931d:	83 c4 10             	add    esp,0x10
c0019320:	b0 00                	mov    al,0x0
c0019322:	e9 ed 01 00 00       	jmp    c0019514 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019327:	90                   	nop
c0019328:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001932f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019335:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001933b:	3d 00 02 00 00       	cmp    eax,0x200
c0019340:	74 0a                	je     c001934c <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0019342:	b0 00                	mov    al,0x0
c0019344:	e9 cb 01 00 00       	jmp    c0019514 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019349:	8d 76 00             	lea    esi,[esi+0x0]
c001934c:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0019354:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001935b:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019362:	83 f8 ff             	cmp    eax,0xffffffff
c0019365:	74 09                	je     c0019370 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0019367:	b0 01                	mov    al,0x1
c0019369:	e9 a6 01 00 00       	jmp    c0019514 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001936e:	66 90                	xchg   ax,ax
c0019370:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001937a:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0019382:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0019389:	88 c2                	mov    dl,al
c001938b:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019390:	01 d0                	add    eax,edx
c0019392:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0019399:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c001939f:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00193a6:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c00193ad:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00193b2:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c00193b9:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c00193c0:	83 ec 0c             	sub    esp,0xc
c00193c3:	68 34 02 00 00       	push   0x234
c00193c8:	e8 06 e7 fe ff       	call   c0007ad3 <malloc>
c00193cd:	83 c4 10             	add    esp,0x10
c00193d0:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c00193d7:	83 ec 04             	sub    esp,0x4
c00193da:	6a 00                	push   0x0
c00193dc:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00193e3:	50                   	push   eax
c00193e4:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00193eb:	e8 4e a8 fe ff       	call   c0003c3e <f_mount>
c00193f0:	83 c4 10             	add    esp,0x10
c00193f3:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00193fa:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0019402:	74 1c                	je     c0019420 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0019404:	83 ec 0c             	sub    esp,0xc
c0019407:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001940e:	e8 e0 e6 fe ff       	call   c0007af3 <rfree>
c0019413:	83 c4 10             	add    esp,0x10
c0019416:	b0 00                	mov    al,0x0
c0019418:	e9 f7 00 00 00       	jmp    c0019514 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001941d:	8d 76 00             	lea    esi,[esi+0x0]
c0019420:	83 ec 04             	sub    esp,0x4
c0019423:	68 00 01 00 00       	push   0x100
c0019428:	6a 00                	push   0x0
c001942a:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019431:	50                   	push   eax
c0019432:	e8 b9 70 fe ff       	call   c00004f0 <memset>
c0019437:	83 c4 10             	add    esp,0x10
c001943a:	83 ec 08             	sub    esp,0x8
c001943d:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019444:	50                   	push   eax
c0019445:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001944c:	50                   	push   eax
c001944d:	e8 1e 74 fe ff       	call   c0000870 <strcat>
c0019452:	83 c4 10             	add    esp,0x10
c0019455:	83 ec 08             	sub    esp,0x8
c0019458:	68 96 2e 02 c0       	push   0xc0022e96
c001945d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019464:	50                   	push   eax
c0019465:	e8 06 74 fe ff       	call   c0000870 <strcat>
c001946a:	83 c4 10             	add    esp,0x10
c001946d:	83 ec 04             	sub    esp,0x4
c0019470:	6a 01                	push   0x1
c0019472:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0019479:	50                   	push   eax
c001947a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001947e:	50                   	push   eax
c001947f:	e8 1c a8 fe ff       	call   c0003ca0 <f_open>
c0019484:	83 c4 10             	add    esp,0x10
c0019487:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001948e:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0019495:	85 c0                	test   eax,eax
c0019497:	74 0b                	je     c00194a4 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0019499:	78 31                	js     c00194cc <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001949b:	83 e8 04             	sub    eax,0x4
c001949e:	83 f8 01             	cmp    eax,0x1
c00194a1:	77 29                	ja     c00194cc <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00194a3:	90                   	nop
c00194a4:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c00194ac:	83 ec 0c             	sub    esp,0xc
c00194af:	8d 44 24 14          	lea    eax,[esp+0x14]
c00194b3:	50                   	push   eax
c00194b4:	e8 97 af fe ff       	call   c0004450 <f_close>
c00194b9:	83 c4 10             	add    esp,0x10
c00194bc:	90                   	nop
c00194bd:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c00194c5:	85 c0                	test   eax,eax
c00194c7:	74 43                	je     c001950c <FAT::tryMount(LogicalDisk*, int)+0x20c>
c00194c9:	eb 31                	jmp    c00194fc <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c00194cb:	90                   	nop
c00194cc:	83 ec 0c             	sub    esp,0xc
c00194cf:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00194d6:	e8 18 e6 fe ff       	call   c0007af3 <rfree>
c00194db:	83 c4 10             	add    esp,0x10
c00194de:	83 ec 04             	sub    esp,0x4
c00194e1:	6a 00                	push   0x0
c00194e3:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00194ea:	50                   	push   eax
c00194eb:	6a 00                	push   0x0
c00194ed:	e8 4c a7 fe ff       	call   c0003c3e <f_mount>
c00194f2:	83 c4 10             	add    esp,0x10
c00194f5:	b0 00                	mov    al,0x0
c00194f7:	eb 1b                	jmp    c0019514 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00194f9:	8d 76 00             	lea    esi,[esi+0x0]
c00194fc:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019501:	83 c0 01             	add    eax,0x1
c0019504:	a3 80 c7 02 c0       	mov    ds:0xc002c780,eax
c0019509:	8d 76 00             	lea    esi,[esi+0x0]
c001950c:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0019513:	90                   	nop
c0019514:	81 c4 4c 03 00 00    	add    esp,0x34c
c001951a:	c3                   	ret    
c001951b:	90                   	nop

c001951c <FAT::allocateSwapfile(char const*, int)>:
c001951c:	55                   	push   ebp
c001951d:	57                   	push   edi
c001951e:	56                   	push   esi
c001951f:	53                   	push   ebx
c0019520:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0019526:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0019531:	83 ec 0c             	sub    esp,0xc
c0019534:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001953b:	e8 93 e5 fe ff       	call   c0007ad3 <malloc>
c0019540:	83 c4 10             	add    esp,0x10
c0019543:	89 c7                	mov    edi,eax
c0019545:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001954a:	83 ec 04             	sub    esp,0x4
c001954d:	50                   	push   eax
c001954e:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0019555:	57                   	push   edi
c0019556:	e8 3b 26 ff ff       	call   c000bb96 <File::File(char const*, Process*)>
c001955b:	83 c4 10             	add    esp,0x10
c001955e:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0019565:	83 ec 04             	sub    esp,0x4
c0019568:	8d 44 24 13          	lea    eax,[esp+0x13]
c001956c:	50                   	push   eax
c001956d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019571:	50                   	push   eax
c0019572:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019579:	e8 38 29 ff ff       	call   c000beb6 <File::stat(unsigned long long*, bool*)>
c001957e:	83 c4 10             	add    esp,0x10
c0019581:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019588:	c1 e0 14             	shl    eax,0x14
c001958b:	89 c7                	mov    edi,eax
c001958d:	89 c5                	mov    ebp,eax
c001958f:	c1 fd 1f             	sar    ebp,0x1f
c0019592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019596:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001959a:	89 f9                	mov    ecx,edi
c001959c:	31 c1                	xor    ecx,eax
c001959e:	89 cb                	mov    ebx,ecx
c00195a0:	89 e9                	mov    ecx,ebp
c00195a2:	31 d1                	xor    ecx,edx
c00195a4:	89 ce                	mov    esi,ecx
c00195a6:	89 f0                	mov    eax,esi
c00195a8:	09 d8                	or     eax,ebx
c00195aa:	0f 84 9c 00 00 00    	je     c001964c <FAT::allocateSwapfile(char const*, int)+0x130>
c00195b0:	83 ec 0c             	sub    esp,0xc
c00195b3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00195ba:	e8 c3 27 ff ff       	call   c000bd82 <File::unlink()>
c00195bf:	83 c4 10             	add    esp,0x10
c00195c2:	83 ec 08             	sub    esp,0x8
c00195c5:	6a 12                	push   0x12
c00195c7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00195ce:	e8 e1 25 ff ff       	call   c000bbb4 <File::open(FileOpenMode)>
c00195d3:	83 c4 10             	add    esp,0x10
c00195d6:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00195dd:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00195e3:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00195ea:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00195f1:	c1 e0 14             	shl    eax,0x14
c00195f4:	83 ec 04             	sub    esp,0x4
c00195f7:	6a 01                	push   0x1
c00195f9:	50                   	push   eax
c00195fa:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0019601:	e8 d1 bc fe ff       	call   c00052d7 <f_expand>
c0019606:	83 c4 10             	add    esp,0x10
c0019609:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019610:	8b 00                	mov    eax,DWORD PTR [eax]
c0019612:	83 c0 10             	add    eax,0x10
c0019615:	8b 00                	mov    eax,DWORD PTR [eax]
c0019617:	83 ec 0c             	sub    esp,0xc
c001961a:	8d 54 24 24          	lea    edx,[esp+0x24]
c001961e:	52                   	push   edx
c001961f:	8d 54 24 30          	lea    edx,[esp+0x30]
c0019623:	52                   	push   edx
c0019624:	6a 00                	push   0x0
c0019626:	68 00 04 00 00       	push   0x400
c001962b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019632:	ff d0                	call   eax
c0019634:	83 c4 20             	add    esp,0x20
c0019637:	83 ec 0c             	sub    esp,0xc
c001963a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019641:	e8 cc 25 ff ff       	call   c000bc12 <File::close()>
c0019646:	83 c4 10             	add    esp,0x10
c0019649:	8d 76 00             	lea    esi,[esi+0x0]
c001964c:	83 ec 08             	sub    esp,0x8
c001964f:	6a 01                	push   0x1
c0019651:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019658:	e8 57 25 ff ff       	call   c000bbb4 <File::open(FileOpenMode)>
c001965d:	83 c4 10             	add    esp,0x10
c0019660:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019667:	8b 00                	mov    eax,DWORD PTR [eax]
c0019669:	83 c0 0c             	add    eax,0xc
c001966c:	8b 00                	mov    eax,DWORD PTR [eax]
c001966e:	83 ec 0c             	sub    esp,0xc
c0019671:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019675:	52                   	push   edx
c0019676:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001967a:	52                   	push   edx
c001967b:	6a 00                	push   0x0
c001967d:	6a 04                	push   0x4
c001967f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019686:	ff d0                	call   eax
c0019688:	83 c4 20             	add    esp,0x20
c001968b:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019692:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019698:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001969f:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c00196a6:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00196a9:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c00196b0:	83 ec 0c             	sub    esp,0xc
c00196b3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00196ba:	e8 53 25 ff ff       	call   c000bc12 <File::close()>
c00196bf:	83 c4 10             	add    esp,0x10
c00196c2:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c00196c9:	ba 00 00 00 00       	mov    edx,0x0
c00196ce:	81 c4 3c 04 00 00    	add    esp,0x43c
c00196d4:	5b                   	pop    ebx
c00196d5:	5e                   	pop    esi
c00196d6:	5f                   	pop    edi
c00196d7:	5d                   	pop    ebp
c00196d8:	c3                   	ret    
c00196d9:	90                   	nop
c00196da:	66 90                	xchg   ax,ax

c00196dc <FAT::readDir(void*, unsigned long, void*, int*)>:
c00196dc:	57                   	push   edi
c00196dd:	56                   	push   esi
c00196de:	53                   	push   ebx
c00196df:	81 ec 50 02 00 00    	sub    esp,0x250
c00196e5:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00196ed:	74 0d                	je     c00196fc <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c00196ef:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00196f7:	75 0f                	jne    c0019708 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c00196f9:	8d 76 00             	lea    esi,[esi+0x0]
c00196fc:	b8 04 00 00 00       	mov    eax,0x4
c0019701:	e9 3a 01 00 00       	jmp    c0019840 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019706:	66 90                	xchg   ax,ax
c0019708:	83 ec 08             	sub    esp,0x8
c001970b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019712:	50                   	push   eax
c0019713:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001971a:	e8 fd af fe ff       	call   c000471c <f_readdir>
c001971f:	83 c4 10             	add    esp,0x10
c0019722:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0019729:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0019730:	83 ec 0c             	sub    esp,0xc
c0019733:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001973a:	83 c0 16             	add    eax,0x16
c001973d:	50                   	push   eax
c001973e:	e8 3d 6e fe ff       	call   c0000580 <strlen>
c0019743:	83 c4 10             	add    esp,0x10
c0019746:	ba 00 00 00 00       	mov    edx,0x0
c001974b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001974f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019753:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001975a:	0f b6 c0             	movzx  eax,al
c001975d:	83 e0 10             	and    eax,0x10
c0019760:	74 0a                	je     c001976c <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0019762:	b8 02 00 00 00       	mov    eax,0x2
c0019767:	eb 0b                	jmp    c0019774 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0019769:	8d 76 00             	lea    esi,[esi+0x0]
c001976c:	b8 01 00 00 00       	mov    eax,0x1
c0019771:	8d 76 00             	lea    esi,[esi+0x0]
c0019774:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019778:	83 ec 08             	sub    esp,0x8
c001977b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019782:	83 c0 16             	add    eax,0x16
c0019785:	50                   	push   eax
c0019786:	8d 44 24 14          	lea    eax,[esp+0x14]
c001978a:	83 c0 10             	add    eax,0x10
c001978d:	50                   	push   eax
c001978e:	e8 bd 6e fe ff       	call   c0000650 <strcpy>
c0019793:	83 c4 10             	add    esp,0x10
c0019796:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001979d:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00197a4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00197a8:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00197af:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00197b6:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00197bd:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00197c4:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00197cb:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00197d2:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00197d9:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00197e0:	89 c6                	mov    esi,eax
c00197e2:	89 d7                	mov    edi,edx
c00197e4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00197e6:	89 c8                	mov    eax,ecx
c00197e8:	89 fa                	mov    edx,edi
c00197ea:	89 f3                	mov    ebx,esi
c00197ec:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00197f3:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00197fa:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0019801:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0019808:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001980e:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0019815:	0f be c0             	movsx  eax,al
c0019818:	85 c0                	test   eax,eax
c001981a:	75 08                	jne    c0019824 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001981c:	b8 07 00 00 00       	mov    eax,0x7
c0019821:	eb 1d                	jmp    c0019840 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019823:	90                   	nop
c0019824:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001982b:	85 c0                	test   eax,eax
c001982d:	75 09                	jne    c0019838 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001982f:	b8 00 00 00 00       	mov    eax,0x0
c0019834:	eb 0a                	jmp    c0019840 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019836:	66 90                	xchg   ax,ax
c0019838:	b8 01 00 00 00       	mov    eax,0x1
c001983d:	8d 76 00             	lea    esi,[esi+0x0]
c0019840:	81 c4 50 02 00 00    	add    esp,0x250
c0019846:	5b                   	pop    ebx
c0019847:	5e                   	pop    esi
c0019848:	5f                   	pop    edi
c0019849:	c3                   	ret    
c001984a:	66 90                	xchg   ax,ax

c001984c <FAT::read(void*, unsigned long, void*, int*)>:
c001984c:	83 ec 1c             	sub    esp,0x1c
c001984f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019854:	74 0a                	je     c0019860 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0019856:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001985b:	75 0b                	jne    c0019868 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001985d:	8d 76 00             	lea    esi,[esi+0x0]
c0019860:	b8 04 00 00 00       	mov    eax,0x4
c0019865:	eb 41                	jmp    c00198a8 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019867:	90                   	nop
c0019868:	8d 44 24 08          	lea    eax,[esp+0x8]
c001986c:	50                   	push   eax
c001986d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019871:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019875:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019879:	e8 e5 a6 fe ff       	call   c0003f63 <f_read>
c001987e:	83 c4 10             	add    esp,0x10
c0019881:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019885:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019889:	89 c2                	mov    edx,eax
c001988b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001988f:	89 10                	mov    DWORD PTR [eax],edx
c0019891:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019895:	85 c0                	test   eax,eax
c0019897:	75 07                	jne    c00198a0 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0019899:	b8 00 00 00 00       	mov    eax,0x0
c001989e:	eb 08                	jmp    c00198a8 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00198a0:	b8 01 00 00 00       	mov    eax,0x1
c00198a5:	8d 76 00             	lea    esi,[esi+0x0]
c00198a8:	83 c4 1c             	add    esp,0x1c
c00198ab:	c3                   	ret    

c00198ac <FAT::write(void*, unsigned long, void*, int*)>:
c00198ac:	83 ec 1c             	sub    esp,0x1c
c00198af:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00198b4:	74 0a                	je     c00198c0 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c00198b6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00198bb:	75 0b                	jne    c00198c8 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c00198bd:	8d 76 00             	lea    esi,[esi+0x0]
c00198c0:	b8 04 00 00 00       	mov    eax,0x4
c00198c5:	eb 41                	jmp    c0019908 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00198c7:	90                   	nop
c00198c8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00198cc:	50                   	push   eax
c00198cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00198d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00198d5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00198d9:	e8 66 a8 fe ff       	call   c0004144 <f_write>
c00198de:	83 c4 10             	add    esp,0x10
c00198e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00198e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00198e9:	89 c2                	mov    edx,eax
c00198eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00198ef:	89 10                	mov    DWORD PTR [eax],edx
c00198f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00198f5:	85 c0                	test   eax,eax
c00198f7:	75 07                	jne    c0019900 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c00198f9:	b8 00 00 00 00       	mov    eax,0x0
c00198fe:	eb 08                	jmp    c0019908 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019900:	b8 01 00 00 00       	mov    eax,0x1
c0019905:	8d 76 00             	lea    esi,[esi+0x0]
c0019908:	83 c4 1c             	add    esp,0x1c
c001990b:	c3                   	ret    

c001990c <FAT::close(void*)>:
c001990c:	83 ec 1c             	sub    esp,0x1c
c001990f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019914:	75 0a                	jne    c0019920 <FAT::close(void*)+0x14>
c0019916:	b8 04 00 00 00       	mov    eax,0x4
c001991b:	eb 3f                	jmp    c001995c <FAT::close(void*)+0x50>
c001991d:	8d 76 00             	lea    esi,[esi+0x0]
c0019920:	83 ec 0c             	sub    esp,0xc
c0019923:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019927:	e8 24 ab fe ff       	call   c0004450 <f_close>
c001992c:	83 c4 10             	add    esp,0x10
c001992f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019933:	83 ec 0c             	sub    esp,0xc
c0019936:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001993a:	e8 a4 e1 fe ff       	call   c0007ae3 <free>
c001993f:	83 c4 10             	add    esp,0x10
c0019942:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019946:	85 c0                	test   eax,eax
c0019948:	75 0a                	jne    c0019954 <FAT::close(void*)+0x48>
c001994a:	b8 00 00 00 00       	mov    eax,0x0
c001994f:	eb 0b                	jmp    c001995c <FAT::close(void*)+0x50>
c0019951:	8d 76 00             	lea    esi,[esi+0x0]
c0019954:	b8 01 00 00 00       	mov    eax,0x1
c0019959:	8d 76 00             	lea    esi,[esi+0x0]
c001995c:	83 c4 1c             	add    esp,0x1c
c001995f:	c3                   	ret    

c0019960 <FAT::closeDir(void*)>:
c0019960:	83 ec 1c             	sub    esp,0x1c
c0019963:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019968:	75 0a                	jne    c0019974 <FAT::closeDir(void*)+0x14>
c001996a:	b8 04 00 00 00       	mov    eax,0x4
c001996f:	eb 3f                	jmp    c00199b0 <FAT::closeDir(void*)+0x50>
c0019971:	8d 76 00             	lea    esi,[esi+0x0]
c0019974:	83 ec 0c             	sub    esp,0xc
c0019977:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001997b:	e8 7a ad fe ff       	call   c00046fa <f_closedir>
c0019980:	83 c4 10             	add    esp,0x10
c0019983:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019987:	83 ec 0c             	sub    esp,0xc
c001998a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001998e:	e8 50 e1 fe ff       	call   c0007ae3 <free>
c0019993:	83 c4 10             	add    esp,0x10
c0019996:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001999a:	85 c0                	test   eax,eax
c001999c:	75 0a                	jne    c00199a8 <FAT::closeDir(void*)+0x48>
c001999e:	b8 00 00 00 00       	mov    eax,0x0
c00199a3:	eb 0b                	jmp    c00199b0 <FAT::closeDir(void*)+0x50>
c00199a5:	8d 76 00             	lea    esi,[esi+0x0]
c00199a8:	b8 01 00 00 00       	mov    eax,0x1
c00199ad:	8d 76 00             	lea    esi,[esi+0x0]
c00199b0:	83 c4 1c             	add    esp,0x1c
c00199b3:	c3                   	ret    

c00199b4 <FAT::truncate(void*, unsigned long long)>:
c00199b4:	83 ec 2c             	sub    esp,0x2c
c00199b7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00199bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00199bf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00199c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00199c7:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00199cc:	75 0a                	jne    c00199d8 <FAT::truncate(void*, unsigned long long)+0x24>
c00199ce:	b8 04 00 00 00       	mov    eax,0x4
c00199d3:	eb 47                	jmp    c0019a1c <FAT::truncate(void*, unsigned long long)+0x68>
c00199d5:	8d 76 00             	lea    esi,[esi+0x0]
c00199d8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00199dc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00199df:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00199e3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00199eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00199ef:	83 ec 08             	sub    esp,0x8
c00199f2:	50                   	push   eax
c00199f3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00199f7:	e8 83 aa fe ff       	call   c000447f <f_lseek>
c00199fc:	83 c4 10             	add    esp,0x10
c00199ff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019a07:	85 c0                	test   eax,eax
c0019a09:	75 09                	jne    c0019a14 <FAT::truncate(void*, unsigned long long)+0x60>
c0019a0b:	b8 00 00 00 00       	mov    eax,0x0
c0019a10:	eb 0a                	jmp    c0019a1c <FAT::truncate(void*, unsigned long long)+0x68>
c0019a12:	66 90                	xchg   ax,ax
c0019a14:	b8 01 00 00 00       	mov    eax,0x1
c0019a19:	8d 76 00             	lea    esi,[esi+0x0]
c0019a1c:	83 c4 2c             	add    esp,0x2c
c0019a1f:	c3                   	ret    

c0019a20 <FAT::seek(void*, unsigned long long)>:
c0019a20:	83 ec 2c             	sub    esp,0x2c
c0019a23:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019a27:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019a2b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019a2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a33:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019a38:	75 0a                	jne    c0019a44 <FAT::seek(void*, unsigned long long)+0x24>
c0019a3a:	b8 04 00 00 00       	mov    eax,0x4
c0019a3f:	eb 33                	jmp    c0019a74 <FAT::seek(void*, unsigned long long)+0x54>
c0019a41:	8d 76 00             	lea    esi,[esi+0x0]
c0019a44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a48:	83 ec 08             	sub    esp,0x8
c0019a4b:	50                   	push   eax
c0019a4c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019a50:	e8 2a aa fe ff       	call   c000447f <f_lseek>
c0019a55:	83 c4 10             	add    esp,0x10
c0019a58:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019a5c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019a60:	85 c0                	test   eax,eax
c0019a62:	75 08                	jne    c0019a6c <FAT::seek(void*, unsigned long long)+0x4c>
c0019a64:	b8 00 00 00 00       	mov    eax,0x0
c0019a69:	eb 09                	jmp    c0019a74 <FAT::seek(void*, unsigned long long)+0x54>
c0019a6b:	90                   	nop
c0019a6c:	b8 01 00 00 00       	mov    eax,0x1
c0019a71:	8d 76 00             	lea    esi,[esi+0x0]
c0019a74:	83 c4 2c             	add    esp,0x2c
c0019a77:	c3                   	ret    

c0019a78 <fatWrapperReadDisk>:
c0019a78:	53                   	push   ebx
c0019a79:	83 ec 18             	sub    esp,0x18
c0019a7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a80:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019a84:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019a89:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019a90:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019a94:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019a98:	ba 00 00 00 00       	mov    edx,0x0
c0019a9d:	83 ec 0c             	sub    esp,0xc
c0019aa0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019aa4:	53                   	push   ebx
c0019aa5:	52                   	push   edx
c0019aa6:	50                   	push   eax
c0019aa7:	51                   	push   ecx
c0019aa8:	e8 51 43 ff ff       	call   c000ddfe <LogicalDisk::read(unsigned long long, int, void*)>
c0019aad:	83 c4 20             	add    esp,0x20
c0019ab0:	83 c4 18             	add    esp,0x18
c0019ab3:	5b                   	pop    ebx
c0019ab4:	c3                   	ret    
c0019ab5:	8d 76 00             	lea    esi,[esi+0x0]

c0019ab8 <fatWrapperWriteDisk>:
c0019ab8:	53                   	push   ebx
c0019ab9:	83 ec 18             	sub    esp,0x18
c0019abc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ac0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019ac4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019ac9:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019ad0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019ad4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019ad8:	ba 00 00 00 00       	mov    edx,0x0
c0019add:	83 ec 0c             	sub    esp,0xc
c0019ae0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019ae4:	53                   	push   ebx
c0019ae5:	52                   	push   edx
c0019ae6:	50                   	push   eax
c0019ae7:	51                   	push   ecx
c0019ae8:	e8 7d 43 ff ff       	call   c000de6a <LogicalDisk::write(unsigned long long, int, void*)>
c0019aed:	83 c4 20             	add    esp,0x20
c0019af0:	83 c4 18             	add    esp,0x18
c0019af3:	5b                   	pop    ebx
c0019af4:	c3                   	ret    
c0019af5:	8d 76 00             	lea    esi,[esi+0x0]

c0019af8 <fatWrapperIoctl>:
c0019af8:	53                   	push   ebx
c0019af9:	83 ec 28             	sub    esp,0x28
c0019afc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019b00:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019b04:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019b08:	88 d0                	mov    al,dl
c0019b0a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019b0e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b13:	83 f8 02             	cmp    eax,0x2
c0019b16:	75 34                	jne    c0019b4c <fatWrapperIoctl+0x54>
c0019b18:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019b1c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019b20:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b25:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019b2c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019b32:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019b38:	89 c2                	mov    edx,eax
c0019b3a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019b3e:	66 89 10             	mov    WORD PTR [eax],dx
c0019b41:	b8 00 00 00 00       	mov    eax,0x0
c0019b46:	e9 c5 00 00 00       	jmp    c0019c10 <fatWrapperIoctl+0x118>
c0019b4b:	90                   	nop
c0019b4c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b51:	83 f8 01             	cmp    eax,0x1
c0019b54:	75 6a                	jne    c0019bc0 <fatWrapperIoctl+0xc8>
c0019b56:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019b5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019b5e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b63:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019b6a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019b70:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019b76:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019b7c:	89 c8                	mov    eax,ecx
c0019b7e:	89 da                	mov    edx,ebx
c0019b80:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019b84:	c1 e0 0a             	shl    eax,0xa
c0019b87:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019b8c:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0019b93:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019b99:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019b9f:	89 cb                	mov    ebx,ecx
c0019ba1:	c1 fb 1f             	sar    ebx,0x1f
c0019ba4:	53                   	push   ebx
c0019ba5:	51                   	push   ecx
c0019ba6:	52                   	push   edx
c0019ba7:	50                   	push   eax
c0019ba8:	e8 b3 5b 00 00       	call   c001f760 <__udivdi3>
c0019bad:	83 c4 10             	add    esp,0x10
c0019bb0:	89 c2                	mov    edx,eax
c0019bb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019bb6:	89 10                	mov    DWORD PTR [eax],edx
c0019bb8:	b8 00 00 00 00       	mov    eax,0x0
c0019bbd:	eb 51                	jmp    c0019c10 <fatWrapperIoctl+0x118>
c0019bbf:	90                   	nop
c0019bc0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019bc5:	85 c0                	test   eax,eax
c0019bc7:	75 07                	jne    c0019bd0 <fatWrapperIoctl+0xd8>
c0019bc9:	b8 00 00 00 00       	mov    eax,0x0
c0019bce:	eb 40                	jmp    c0019c10 <fatWrapperIoctl+0x118>
c0019bd0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019bd5:	83 f8 03             	cmp    eax,0x3
c0019bd8:	75 1a                	jne    c0019bf4 <fatWrapperIoctl+0xfc>
c0019bda:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019bde:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019be2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019be6:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019bec:	b8 00 00 00 00       	mov    eax,0x0
c0019bf1:	eb 1d                	jmp    c0019c10 <fatWrapperIoctl+0x118>
c0019bf3:	90                   	nop
c0019bf4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019bf9:	83 f8 04             	cmp    eax,0x4
c0019bfc:	75 0a                	jne    c0019c08 <fatWrapperIoctl+0x110>
c0019bfe:	b8 00 00 00 00       	mov    eax,0x0
c0019c03:	eb 0b                	jmp    c0019c10 <fatWrapperIoctl+0x118>
c0019c05:	8d 76 00             	lea    esi,[esi+0x0]
c0019c08:	b8 04 00 00 00       	mov    eax,0x4
c0019c0d:	8d 76 00             	lea    esi,[esi+0x0]
c0019c10:	83 c4 28             	add    esp,0x28
c0019c13:	5b                   	pop    ebx
c0019c14:	c3                   	ret    
c0019c15:	90                   	nop
c0019c16:	66 90                	xchg   ax,ax

c0019c18 <FAT::FAT()>:
c0019c18:	83 ec 1c             	sub    esp,0x1c
c0019c1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019c1f:	83 ec 0c             	sub    esp,0xc
c0019c22:	50                   	push   eax
c0019c23:	e8 c8 1b ff ff       	call   c000b7f0 <Filesystem::Filesystem()>
c0019c28:	83 c4 10             	add    esp,0x10
c0019c2b:	ba ac 2e 02 c0       	mov    edx,0xc0022eac
c0019c30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019c34:	89 10                	mov    DWORD PTR [eax],edx
c0019c36:	c7 05 80 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c780,0x0
c0019c40:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019c48:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019c4d:	7f 19                	jg     c0019c68 <FAT::FAT()+0x50>
c0019c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019c53:	c7 04 85 a0 c7 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd3860],0xffffffff
c0019c5e:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019c63:	eb e3                	jmp    c0019c48 <FAT::FAT()+0x30>
c0019c65:	8d 76 00             	lea    esi,[esi+0x0]
c0019c68:	90                   	nop
c0019c69:	83 c4 1c             	add    esp,0x1c
c0019c6c:	c3                   	ret    
c0019c6d:	90                   	nop
c0019c6e:	66 90                	xchg   ax,ax

c0019c70 <FAT::fixFilepath(char*)>:
c0019c70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c74:	8a 00                	mov    al,BYTE PTR [eax]
c0019c76:	0f be c0             	movsx  eax,al
c0019c79:	83 f8 40             	cmp    eax,0x40
c0019c7c:	7e 2e                	jle    c0019cac <FAT::fixFilepath(char*)+0x3c>
c0019c7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c82:	8a 00                	mov    al,BYTE PTR [eax]
c0019c84:	83 e8 41             	sub    eax,0x41
c0019c87:	88 c2                	mov    dl,al
c0019c89:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c8d:	88 10                	mov    BYTE PTR [eax],dl
c0019c8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c93:	8a 00                	mov    al,BYTE PTR [eax]
c0019c95:	0f be c0             	movsx  eax,al
c0019c98:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019c9f:	83 c0 30             	add    eax,0x30
c0019ca2:	88 c2                	mov    dl,al
c0019ca4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019ca8:	88 10                	mov    BYTE PTR [eax],dl
c0019caa:	66 90                	xchg   ax,ax
c0019cac:	90                   	nop
c0019cad:	c3                   	ret    
c0019cae:	66 90                	xchg   ax,ax

c0019cb0 <FAT::open(char const*, void**, FileOpenMode)>:
c0019cb0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019cb6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019cbe:	74 0c                	je     c0019ccc <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0019cc0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019cc8:	75 0e                	jne    c0019cd8 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0019cca:	66 90                	xchg   ax,ax
c0019ccc:	b8 04 00 00 00       	mov    eax,0x4
c0019cd1:	e9 46 01 00 00       	jmp    c0019e1c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019cd6:	66 90                	xchg   ax,ax
c0019cd8:	83 ec 08             	sub    esp,0x8
c0019cdb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019ce2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019ce6:	50                   	push   eax
c0019ce7:	e8 64 69 fe ff       	call   c0000650 <strcpy>
c0019cec:	83 c4 10             	add    esp,0x10
c0019cef:	83 ec 08             	sub    esp,0x8
c0019cf2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019cf6:	50                   	push   eax
c0019cf7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019cfe:	e8 6d ff ff ff       	call   c0019c70 <FAT::fixFilepath(char*)>
c0019d03:	83 c4 10             	add    esp,0x10
c0019d06:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019d0e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d15:	83 e0 01             	and    eax,0x1
c0019d18:	74 12                	je     c0019d2c <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0019d1a:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d21:	83 c8 01             	or     eax,0x1
c0019d24:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d2b:	90                   	nop
c0019d2c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d33:	83 e0 04             	and    eax,0x4
c0019d36:	74 24                	je     c0019d5c <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0019d38:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d3f:	83 c8 30             	or     eax,0x30
c0019d42:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d49:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d50:	83 c8 02             	or     eax,0x2
c0019d53:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d5a:	66 90                	xchg   ax,ax
c0019d5c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d63:	83 e0 02             	and    eax,0x2
c0019d66:	74 14                	je     c0019d7c <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0019d68:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d6f:	83 c8 02             	or     eax,0x2
c0019d72:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d79:	8d 76 00             	lea    esi,[esi+0x0]
c0019d7c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d83:	83 e0 08             	and    eax,0x8
c0019d86:	74 14                	je     c0019d9c <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0019d88:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d8f:	83 c8 04             	or     eax,0x4
c0019d92:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d99:	8d 76 00             	lea    esi,[esi+0x0]
c0019d9c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019da3:	83 e0 10             	and    eax,0x10
c0019da6:	74 14                	je     c0019dbc <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0019da8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019daf:	83 c8 08             	or     eax,0x8
c0019db2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019db9:	8d 76 00             	lea    esi,[esi+0x0]
c0019dbc:	83 ec 0c             	sub    esp,0xc
c0019dbf:	68 28 02 00 00       	push   0x228
c0019dc4:	e8 0a dd fe ff       	call   c0007ad3 <malloc>
c0019dc9:	83 c4 10             	add    esp,0x10
c0019dcc:	89 c2                	mov    edx,eax
c0019dce:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019dd5:	89 10                	mov    DWORD PTR [eax],edx
c0019dd7:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019ddf:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019de6:	8b 00                	mov    eax,DWORD PTR [eax]
c0019de8:	83 ec 04             	sub    esp,0x4
c0019deb:	52                   	push   edx
c0019dec:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019df0:	52                   	push   edx
c0019df1:	50                   	push   eax
c0019df2:	e8 a9 9e fe ff       	call   c0003ca0 <f_open>
c0019df7:	83 c4 10             	add    esp,0x10
c0019dfa:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019e01:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019e09:	74 09                	je     c0019e14 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0019e0b:	b8 01 00 00 00       	mov    eax,0x1
c0019e10:	eb 0a                	jmp    c0019e1c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019e12:	66 90                	xchg   ax,ax
c0019e14:	b8 00 00 00 00       	mov    eax,0x0
c0019e19:	8d 76 00             	lea    esi,[esi+0x0]
c0019e1c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019e22:	c3                   	ret    
c0019e23:	90                   	nop

c0019e24 <FAT::openDir(char const*, void**)>:
c0019e24:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019e2a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019e32:	74 0c                	je     c0019e40 <FAT::openDir(char const*, void**)+0x1c>
c0019e34:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019e3c:	75 0e                	jne    c0019e4c <FAT::openDir(char const*, void**)+0x28>
c0019e3e:	66 90                	xchg   ax,ax
c0019e40:	b8 04 00 00 00       	mov    eax,0x4
c0019e45:	e9 82 00 00 00       	jmp    c0019ecc <FAT::openDir(char const*, void**)+0xa8>
c0019e4a:	66 90                	xchg   ax,ax
c0019e4c:	83 ec 08             	sub    esp,0x8
c0019e4f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e56:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019e5a:	50                   	push   eax
c0019e5b:	e8 f0 67 fe ff       	call   c0000650 <strcpy>
c0019e60:	83 c4 10             	add    esp,0x10
c0019e63:	83 ec 08             	sub    esp,0x8
c0019e66:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019e6a:	50                   	push   eax
c0019e6b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e72:	e8 f9 fd ff ff       	call   c0019c70 <FAT::fixFilepath(char*)>
c0019e77:	83 c4 10             	add    esp,0x10
c0019e7a:	83 ec 0c             	sub    esp,0xc
c0019e7d:	6a 30                	push   0x30
c0019e7f:	e8 4f dc fe ff       	call   c0007ad3 <malloc>
c0019e84:	83 c4 10             	add    esp,0x10
c0019e87:	89 c2                	mov    edx,eax
c0019e89:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019e90:	89 10                	mov    DWORD PTR [eax],edx
c0019e92:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019e99:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e9b:	83 ec 08             	sub    esp,0x8
c0019e9e:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019ea2:	52                   	push   edx
c0019ea3:	50                   	push   eax
c0019ea4:	e8 86 a7 fe ff       	call   c000462f <f_opendir>
c0019ea9:	83 c4 10             	add    esp,0x10
c0019eac:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019eb3:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019ebb:	74 07                	je     c0019ec4 <FAT::openDir(char const*, void**)+0xa0>
c0019ebd:	b8 01 00 00 00       	mov    eax,0x1
c0019ec2:	eb 08                	jmp    c0019ecc <FAT::openDir(char const*, void**)+0xa8>
c0019ec4:	b8 00 00 00 00       	mov    eax,0x0
c0019ec9:	8d 76 00             	lea    esi,[esi+0x0]
c0019ecc:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019ed2:	c3                   	ret    
c0019ed3:	90                   	nop

c0019ed4 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019ed4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019eda:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019ee2:	75 0c                	jne    c0019ef0 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019ee4:	b8 04 00 00 00       	mov    eax,0x4
c0019ee9:	e9 d6 00 00 00       	jmp    c0019fc4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019eee:	66 90                	xchg   ax,ax
c0019ef0:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019ef8:	75 0a                	jne    c0019f04 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0019efa:	b8 04 00 00 00       	mov    eax,0x4
c0019eff:	e9 c0 00 00 00       	jmp    c0019fc4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019f04:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019f0c:	75 0a                	jne    c0019f18 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0019f0e:	b8 04 00 00 00       	mov    eax,0x4
c0019f13:	e9 ac 00 00 00       	jmp    c0019fc4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019f18:	83 ec 08             	sub    esp,0x8
c0019f1b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019f22:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019f29:	50                   	push   eax
c0019f2a:	e8 21 67 fe ff       	call   c0000650 <strcpy>
c0019f2f:	83 c4 10             	add    esp,0x10
c0019f32:	83 ec 08             	sub    esp,0x8
c0019f35:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019f3c:	50                   	push   eax
c0019f3d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019f44:	e8 27 fd ff ff       	call   c0019c70 <FAT::fixFilepath(char*)>
c0019f49:	83 c4 10             	add    esp,0x10
c0019f4c:	83 ec 08             	sub    esp,0x8
c0019f4f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019f53:	50                   	push   eax
c0019f54:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019f5b:	50                   	push   eax
c0019f5c:	e8 4d a8 fe ff       	call   c00047ae <f_stat>
c0019f61:	83 c4 10             	add    esp,0x10
c0019f64:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019f6b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019f72:	85 c0                	test   eax,eax
c0019f74:	74 0a                	je     c0019f80 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0019f76:	83 f8 04             	cmp    eax,0x4
c0019f79:	74 39                	je     c0019fb4 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019f7b:	eb 3f                	jmp    c0019fbc <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0019f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0019f80:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019f84:	0f b6 c0             	movzx  eax,al
c0019f87:	83 e0 10             	and    eax,0x10
c0019f8a:	0f 95 c2             	setne  dl
c0019f8d:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019f94:	88 10                	mov    BYTE PTR [eax],dl
c0019f96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f9a:	ba 00 00 00 00       	mov    edx,0x0
c0019f9f:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019fa6:	89 01                	mov    DWORD PTR [ecx],eax
c0019fa8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019fab:	b8 00 00 00 00       	mov    eax,0x0
c0019fb0:	eb 12                	jmp    c0019fc4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019fb2:	66 90                	xchg   ax,ax
c0019fb4:	b8 02 00 00 00       	mov    eax,0x2
c0019fb9:	eb 09                	jmp    c0019fc4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019fbb:	90                   	nop
c0019fbc:	b8 01 00 00 00       	mov    eax,0x1
c0019fc1:	8d 76 00             	lea    esi,[esi+0x0]
c0019fc4:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019fca:	c3                   	ret    
c0019fcb:	90                   	nop

c0019fcc <FAT::unlink(char const*)>:
c0019fcc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019fd2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019fda:	75 08                	jne    c0019fe4 <FAT::unlink(char const*)+0x18>
c0019fdc:	b8 04 00 00 00       	mov    eax,0x4
c0019fe1:	eb 61                	jmp    c001a044 <FAT::unlink(char const*)+0x78>
c0019fe3:	90                   	nop
c0019fe4:	83 ec 08             	sub    esp,0x8
c0019fe7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019fee:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019ff2:	50                   	push   eax
c0019ff3:	e8 58 66 fe ff       	call   c0000650 <strcpy>
c0019ff8:	83 c4 10             	add    esp,0x10
c0019ffb:	83 ec 08             	sub    esp,0x8
c0019ffe:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a002:	50                   	push   eax
c001a003:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a00a:	e8 61 fc ff ff       	call   c0019c70 <FAT::fixFilepath(char*)>
c001a00f:	83 c4 10             	add    esp,0x10
c001a012:	83 ec 0c             	sub    esp,0xc
c001a015:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a019:	50                   	push   eax
c001a01a:	e8 01 aa fe ff       	call   c0004a20 <f_unlink>
c001a01f:	83 c4 10             	add    esp,0x10
c001a022:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a029:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a030:	85 c0                	test   eax,eax
c001a032:	75 08                	jne    c001a03c <FAT::unlink(char const*)+0x70>
c001a034:	b8 00 00 00 00       	mov    eax,0x0
c001a039:	eb 09                	jmp    c001a044 <FAT::unlink(char const*)+0x78>
c001a03b:	90                   	nop
c001a03c:	b8 01 00 00 00       	mov    eax,0x1
c001a041:	8d 76 00             	lea    esi,[esi+0x0]
c001a044:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a04a:	c3                   	ret    
c001a04b:	90                   	nop

c001a04c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001a04c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a052:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c001a059:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c001a060:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a064:	88 d0                	mov    al,dl
c001a066:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a06a:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a072:	75 0c                	jne    c001a080 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c001a074:	b8 04 00 00 00       	mov    eax,0x4
c001a079:	e9 7e 01 00 00       	jmp    c001a1fc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001a07e:	66 90                	xchg   ax,ax
c001a080:	83 ec 08             	sub    esp,0x8
c001a083:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a08a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a08e:	50                   	push   eax
c001a08f:	e8 bc 65 fe ff       	call   c0000650 <strcpy>
c001a094:	83 c4 10             	add    esp,0x10
c001a097:	83 ec 08             	sub    esp,0x8
c001a09a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a09e:	50                   	push   eax
c001a09f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a0a6:	e8 c5 fb ff ff       	call   c0019c70 <FAT::fixFilepath(char*)>
c001a0ab:	83 c4 10             	add    esp,0x10
c001a0ae:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001a0b6:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001a0be:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a0c3:	83 e0 01             	and    eax,0x1
c001a0c6:	74 14                	je     c001a0dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c001a0c8:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a0cf:	83 c8 01             	or     eax,0x1
c001a0d2:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a0d9:	8d 76 00             	lea    esi,[esi+0x0]
c001a0dc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a0e1:	83 e0 02             	and    eax,0x2
c001a0e4:	74 12                	je     c001a0f8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c001a0e6:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a0ed:	83 c8 20             	or     eax,0x20
c001a0f0:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a0f7:	90                   	nop
c001a0f8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a0fd:	83 e0 04             	and    eax,0x4
c001a100:	74 12                	je     c001a114 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001a102:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a109:	83 c8 04             	or     eax,0x4
c001a10c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a113:	90                   	nop
c001a114:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a119:	83 e0 08             	and    eax,0x8
c001a11c:	74 12                	je     c001a130 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001a11e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a125:	83 c8 02             	or     eax,0x2
c001a128:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a12f:	90                   	nop
c001a130:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a135:	83 e0 01             	and    eax,0x1
c001a138:	74 12                	je     c001a14c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c001a13a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a141:	83 c8 01             	or     eax,0x1
c001a144:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a14b:	90                   	nop
c001a14c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a151:	83 e0 02             	and    eax,0x2
c001a154:	74 12                	je     c001a168 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c001a156:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a15d:	83 c8 20             	or     eax,0x20
c001a160:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a167:	90                   	nop
c001a168:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a16d:	83 e0 04             	and    eax,0x4
c001a170:	74 12                	je     c001a184 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c001a172:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a179:	83 c8 04             	or     eax,0x4
c001a17c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a183:	90                   	nop
c001a184:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a189:	83 e0 08             	and    eax,0x8
c001a18c:	74 12                	je     c001a1a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c001a18e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a195:	83 c8 02             	or     eax,0x2
c001a198:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a19f:	90                   	nop
c001a1a0:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001a1a7:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a1ae:	09 d0                	or     eax,edx
c001a1b0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a1b7:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001a1bf:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001a1c7:	83 ec 04             	sub    esp,0x4
c001a1ca:	52                   	push   edx
c001a1cb:	50                   	push   eax
c001a1cc:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a1d0:	50                   	push   eax
c001a1d1:	e8 bd ac fe ff       	call   c0004e93 <f_chmod>
c001a1d6:	83 c4 10             	add    esp,0x10
c001a1d9:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a1e0:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a1e7:	85 c0                	test   eax,eax
c001a1e9:	75 09                	jne    c001a1f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c001a1eb:	b8 00 00 00 00       	mov    eax,0x0
c001a1f0:	eb 0a                	jmp    c001a1fc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001a1f2:	66 90                	xchg   ax,ax
c001a1f4:	b8 01 00 00 00       	mov    eax,0x1
c001a1f9:	8d 76 00             	lea    esi,[esi+0x0]
c001a1fc:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a202:	c3                   	ret    
c001a203:	90                   	nop

c001a204 <FAT::rename(char const*, char const*)>:
c001a204:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a20a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a212:	74 0c                	je     c001a220 <FAT::rename(char const*, char const*)+0x1c>
c001a214:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001a21c:	75 0e                	jne    c001a22c <FAT::rename(char const*, char const*)+0x28>
c001a21e:	66 90                	xchg   ax,ax
c001a220:	b8 04 00 00 00       	mov    eax,0x4
c001a225:	e9 9e 00 00 00       	jmp    c001a2c8 <FAT::rename(char const*, char const*)+0xc4>
c001a22a:	66 90                	xchg   ax,ax
c001a22c:	83 ec 08             	sub    esp,0x8
c001a22f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a236:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a23d:	50                   	push   eax
c001a23e:	e8 0d 64 fe ff       	call   c0000650 <strcpy>
c001a243:	83 c4 10             	add    esp,0x10
c001a246:	83 ec 08             	sub    esp,0x8
c001a249:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001a250:	50                   	push   eax
c001a251:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a258:	e8 13 fa ff ff       	call   c0019c70 <FAT::fixFilepath(char*)>
c001a25d:	83 c4 10             	add    esp,0x10
c001a260:	83 ec 08             	sub    esp,0x8
c001a263:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001a26a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a26e:	50                   	push   eax
c001a26f:	e8 dc 63 fe ff       	call   c0000650 <strcpy>
c001a274:	83 c4 10             	add    esp,0x10
c001a277:	83 ec 08             	sub    esp,0x8
c001a27a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a27e:	50                   	push   eax
c001a27f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a286:	e8 e5 f9 ff ff       	call   c0019c70 <FAT::fixFilepath(char*)>
c001a28b:	83 c4 10             	add    esp,0x10
c001a28e:	83 ec 08             	sub    esp,0x8
c001a291:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a295:	50                   	push   eax
c001a296:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a29d:	50                   	push   eax
c001a29e:	e8 38 aa fe ff       	call   c0004cdb <f_rename>
c001a2a3:	83 c4 10             	add    esp,0x10
c001a2a6:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001a2ad:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001a2b4:	85 c0                	test   eax,eax
c001a2b6:	75 08                	jne    c001a2c0 <FAT::rename(char const*, char const*)+0xbc>
c001a2b8:	b8 00 00 00 00       	mov    eax,0x0
c001a2bd:	eb 09                	jmp    c001a2c8 <FAT::rename(char const*, char const*)+0xc4>
c001a2bf:	90                   	nop
c001a2c0:	b8 01 00 00 00       	mov    eax,0x1
c001a2c5:	8d 76 00             	lea    esi,[esi+0x0]
c001a2c8:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a2ce:	c3                   	ret    
c001a2cf:	90                   	nop

c001a2d0 <FAT::mkdir(char const*)>:
c001a2d0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a2d6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a2de:	75 08                	jne    c001a2e8 <FAT::mkdir(char const*)+0x18>
c001a2e0:	b8 04 00 00 00       	mov    eax,0x4
c001a2e5:	eb 61                	jmp    c001a348 <FAT::mkdir(char const*)+0x78>
c001a2e7:	90                   	nop
c001a2e8:	83 ec 08             	sub    esp,0x8
c001a2eb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a2f2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a2f6:	50                   	push   eax
c001a2f7:	e8 54 63 fe ff       	call   c0000650 <strcpy>
c001a2fc:	83 c4 10             	add    esp,0x10
c001a2ff:	83 ec 08             	sub    esp,0x8
c001a302:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a306:	50                   	push   eax
c001a307:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a30e:	e8 5d f9 ff ff       	call   c0019c70 <FAT::fixFilepath(char*)>
c001a313:	83 c4 10             	add    esp,0x10
c001a316:	83 ec 0c             	sub    esp,0xc
c001a319:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a31d:	50                   	push   eax
c001a31e:	e8 1d a8 fe ff       	call   c0004b40 <f_mkdir>
c001a323:	83 c4 10             	add    esp,0x10
c001a326:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a32d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a334:	85 c0                	test   eax,eax
c001a336:	75 08                	jne    c001a340 <FAT::mkdir(char const*)+0x70>
c001a338:	b8 00 00 00 00       	mov    eax,0x0
c001a33d:	eb 09                	jmp    c001a348 <FAT::mkdir(char const*)+0x78>
c001a33f:	90                   	nop
c001a340:	b8 01 00 00 00       	mov    eax,0x1
c001a345:	8d 76 00             	lea    esi,[esi+0x0]
c001a348:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a34e:	c3                   	ret    
c001a34f:	90                   	nop

c001a350 <FAT::exists(char const*)>:
c001a350:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a356:	83 ec 08             	sub    esp,0x8
c001a359:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a360:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a364:	50                   	push   eax
c001a365:	e8 e6 62 fe ff       	call   c0000650 <strcpy>
c001a36a:	83 c4 10             	add    esp,0x10
c001a36d:	83 ec 08             	sub    esp,0x8
c001a370:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a374:	50                   	push   eax
c001a375:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a37c:	e8 ef f8 ff ff       	call   c0019c70 <FAT::fixFilepath(char*)>
c001a381:	83 c4 10             	add    esp,0x10
c001a384:	83 ec 08             	sub    esp,0x8
c001a387:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001a38e:	50                   	push   eax
c001a38f:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a393:	50                   	push   eax
c001a394:	e8 15 a4 fe ff       	call   c00047ae <f_stat>
c001a399:	83 c4 10             	add    esp,0x10
c001a39c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a3a3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a3aa:	85 c0                	test   eax,eax
c001a3ac:	75 06                	jne    c001a3b4 <FAT::exists(char const*)+0x64>
c001a3ae:	b0 01                	mov    al,0x1
c001a3b0:	eb 06                	jmp    c001a3b8 <FAT::exists(char const*)+0x68>
c001a3b2:	66 90                	xchg   ax,ax
c001a3b4:	b0 00                	mov    al,0x0
c001a3b6:	66 90                	xchg   ax,ax
c001a3b8:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a3be:	c3                   	ret    
c001a3bf:	90                   	nop

c001a3c0 <isoReadDiscSectorHelper>:
c001a3c0:	83 ec 2c             	sub    esp,0x2c
c001a3c3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a3c7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a3cb:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a3d0:	83 e8 41             	sub    eax,0x41
c001a3d3:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c001a3da:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a3de:	ba 00 00 00 00       	mov    edx,0x0
c001a3e3:	83 ec 0c             	sub    esp,0xc
c001a3e6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a3ea:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a3ee:	52                   	push   edx
c001a3ef:	50                   	push   eax
c001a3f0:	51                   	push   ecx
c001a3f1:	e8 08 3a ff ff       	call   c000ddfe <LogicalDisk::read(unsigned long long, int, void*)>
c001a3f6:	83 c4 20             	add    esp,0x20
c001a3f9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a3fd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a402:	74 0c                	je     c001a410 <isoReadDiscSectorHelper+0x50>
c001a404:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a408:	c1 e0 0b             	shl    eax,0xb
c001a40b:	eb 0b                	jmp    c001a418 <isoReadDiscSectorHelper+0x58>
c001a40d:	8d 76 00             	lea    esi,[esi+0x0]
c001a410:	b8 00 00 00 00       	mov    eax,0x0
c001a415:	8d 76 00             	lea    esi,[esi+0x0]
c001a418:	83 c4 2c             	add    esp,0x2c
c001a41b:	c3                   	ret    

c001a41c <iso_kprintf>:
c001a41c:	83 ec 0c             	sub    esp,0xc
c001a41f:	83 ec 08             	sub    esp,0x8
c001a422:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a426:	68 5a 2c 02 c0       	push   0xc0022c5a
c001a42b:	e8 da 04 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a430:	83 c4 10             	add    esp,0x10
c001a433:	90                   	nop
c001a434:	83 c4 0c             	add    esp,0xc
c001a437:	c3                   	ret    

c001a438 <iso_kprintfd>:
c001a438:	83 ec 0c             	sub    esp,0xc
c001a43b:	83 ec 08             	sub    esp,0x8
c001a43e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a442:	68 3a 13 02 c0       	push   0xc002133a
c001a447:	e8 be 04 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a44c:	83 c4 10             	add    esp,0x10
c001a44f:	90                   	nop
c001a450:	83 c4 0c             	add    esp,0xc
c001a453:	c3                   	ret    

c001a454 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001a454:	b8 08 00 00 00       	mov    eax,0x8
c001a459:	c3                   	ret    

c001a45a <ISO9660::truncate(void*, unsigned long long)>:
c001a45a:	b8 01 00 00 00       	mov    eax,0x1
c001a45f:	c3                   	ret    

c001a460 <ISO9660::getName()>:
c001a460:	b8 10 2f 02 c0       	mov    eax,0xc0022f10
c001a465:	c3                   	ret    

c001a466 <ISO9660::closeDir(void*)>:
c001a466:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a46a:	8b 00                	mov    eax,DWORD PTR [eax]
c001a46c:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001a46f:	90                   	nop

c001a470 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a470:	b8 01 00 00 00       	mov    eax,0x1
c001a475:	c3                   	ret    

c001a476 <ISO9660::unlink(char const*)>:
c001a476:	b8 01 00 00 00       	mov    eax,0x1
c001a47b:	c3                   	ret    

c001a47c <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a47c:	b8 03 00 00 00       	mov    eax,0x3
c001a481:	c3                   	ret    

c001a482 <ISO9660::rename(char const*, char const*)>:
c001a482:	b8 01 00 00 00       	mov    eax,0x1
c001a487:	c3                   	ret    

c001a488 <ISO9660::mkdir(char const*)>:
c001a488:	b8 01 00 00 00       	mov    eax,0x1
c001a48d:	c3                   	ret    

c001a48e <ISO9660::~ISO9660()>:
c001a48e:	83 ec 0c             	sub    esp,0xc
c001a491:	ba 50 30 02 c0       	mov    edx,0xc0023050
c001a496:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a49a:	89 10                	mov    DWORD PTR [eax],edx
c001a49c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4a0:	83 ec 0c             	sub    esp,0xc
c001a4a3:	50                   	push   eax
c001a4a4:	e8 6b 13 ff ff       	call   c000b814 <Filesystem::~Filesystem()>
c001a4a9:	83 c4 10             	add    esp,0x10
c001a4ac:	90                   	nop
c001a4ad:	83 c4 0c             	add    esp,0xc
c001a4b0:	c3                   	ret    
c001a4b1:	90                   	nop

c001a4b2 <ISO9660::~ISO9660()>:
c001a4b2:	83 ec 0c             	sub    esp,0xc
c001a4b5:	83 ec 0c             	sub    esp,0xc
c001a4b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a4bc:	e8 cd ff ff ff       	call   c001a48e <ISO9660::~ISO9660()>
c001a4c1:	83 c4 10             	add    esp,0x10
c001a4c4:	83 ec 08             	sub    esp,0x8
c001a4c7:	6a 08                	push   0x8
c001a4c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a4cd:	e8 3a 03 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001a4d2:	83 c4 10             	add    esp,0x10
c001a4d5:	83 c4 0c             	add    esp,0xc
c001a4d8:	c3                   	ret    
c001a4d9:	90                   	nop

c001a4da <ISO9660::exists(char const*)>:
c001a4da:	83 ec 18             	sub    esp,0x18
c001a4dd:	68 2b 2f 02 c0       	push   0xc0022f2b
c001a4e2:	e8 f4 70 ff ff       	call   c00115db <KePanic(char const*)>
c001a4e7:	31 c0                	xor    eax,eax
c001a4e9:	83 c4 1c             	add    esp,0x1c
c001a4ec:	c3                   	ret    
c001a4ed:	90                   	nop

c001a4ee <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a4ee:	56                   	push   esi
c001a4ef:	53                   	push   ebx
c001a4f0:	53                   	push   ebx
c001a4f1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a4f5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a4f9:	85 db                	test   ebx,ebx
c001a4fb:	0f 84 ca 00 00 00    	je     c001a5cb <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a501:	85 f6                	test   esi,esi
c001a503:	0f 84 c2 00 00 00    	je     c001a5cb <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a509:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001a50e:	b8 03 00 00 00       	mov    eax,0x3
c001a513:	0f 85 b7 00 00 00    	jne    c001a5d0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a519:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a51b:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a521:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a528:	74 1b                	je     c001a545 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a52a:	85 c0                	test   eax,eax
c001a52c:	74 10                	je     c001a53e <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001a52e:	83 ec 0c             	sub    esp,0xc
c001a531:	68 49 2f 02 c0       	push   0xc0022f49
c001a536:	e8 a0 70 ff ff       	call   c00115db <KePanic(char const*)>
c001a53b:	83 c4 10             	add    esp,0x10
c001a53e:	8a 03                	mov    al,BYTE PTR [ebx]
c001a540:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a545:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a548:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a54f:	85 c0                	test   eax,eax
c001a551:	74 09                	je     c001a55c <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001a553:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a55a:	74 48                	je     c001a5a4 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001a55c:	83 ec 0c             	sub    esp,0xc
c001a55f:	68 59 2f 02 c0       	push   0xc0022f59
c001a564:	e8 a1 03 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a569:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a56c:	83 c4 10             	add    esp,0x10
c001a56f:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a576:	85 c0                	test   eax,eax
c001a578:	74 17                	je     c001a591 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001a57a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a581:	83 ec 0c             	sub    esp,0xc
c001a584:	68 79 2f 02 c0       	push   0xc0022f79
c001a589:	e8 7c 03 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a58e:	83 c4 10             	add    esp,0x10
c001a591:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a598:	83 ec 0c             	sub    esp,0xc
c001a59b:	50                   	push   eax
c001a59c:	e8 c6 c4 fe ff       	call   c0006a67 <init_percd>
c001a5a1:	83 c4 10             	add    esp,0x10
c001a5a4:	51                   	push   ecx
c001a5a5:	83 c3 03             	add    ebx,0x3
c001a5a8:	51                   	push   ecx
c001a5a9:	6a 00                	push   0x0
c001a5ab:	53                   	push   ebx
c001a5ac:	e8 79 bf fe ff       	call   c000652a <iso_open>
c001a5b1:	83 c4 10             	add    esp,0x10
c001a5b4:	89 c2                	mov    edx,eax
c001a5b6:	b8 01 00 00 00       	mov    eax,0x1
c001a5bb:	83 fa ff             	cmp    edx,0xffffffff
c001a5be:	74 10                	je     c001a5d0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a5c0:	83 c2 32             	add    edx,0x32
c001a5c3:	31 c0                	xor    eax,eax
c001a5c5:	01 d2                	add    edx,edx
c001a5c7:	89 16                	mov    DWORD PTR [esi],edx
c001a5c9:	eb 05                	jmp    c001a5d0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a5cb:	b8 04 00 00 00       	mov    eax,0x4
c001a5d0:	5a                   	pop    edx
c001a5d1:	5b                   	pop    ebx
c001a5d2:	5e                   	pop    esi
c001a5d3:	c3                   	ret    

c001a5d4 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a5d4:	53                   	push   ebx
c001a5d5:	83 ec 08             	sub    esp,0x8
c001a5d8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a5dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a5e0:	85 c0                	test   eax,eax
c001a5e2:	74 2d                	je     c001a611 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a5e4:	85 db                	test   ebx,ebx
c001a5e6:	74 29                	je     c001a611 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a5e8:	52                   	push   edx
c001a5e9:	b9 02 00 00 00       	mov    ecx,0x2
c001a5ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a5f2:	99                   	cdq    
c001a5f3:	f7 f9                	idiv   ecx
c001a5f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a5f9:	83 e8 32             	sub    eax,0x32
c001a5fc:	50                   	push   eax
c001a5fd:	e8 d0 bf fe ff       	call   c00065d2 <iso_read>
c001a602:	83 c4 10             	add    esp,0x10
c001a605:	89 03                	mov    DWORD PTR [ebx],eax
c001a607:	09 d0                	or     eax,edx
c001a609:	0f 94 c0             	sete   al
c001a60c:	0f b6 c0             	movzx  eax,al
c001a60f:	eb 05                	jmp    c001a616 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a611:	b8 04 00 00 00       	mov    eax,0x4
c001a616:	83 c4 08             	add    esp,0x8
c001a619:	5b                   	pop    ebx
c001a61a:	c3                   	ret    
c001a61b:	90                   	nop

c001a61c <ISO9660::seek(void*, unsigned long long)>:
c001a61c:	57                   	push   edi
c001a61d:	b8 04 00 00 00       	mov    eax,0x4
c001a622:	56                   	push   esi
c001a623:	51                   	push   ecx
c001a624:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a628:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a62c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a630:	85 d2                	test   edx,edx
c001a632:	74 26                	je     c001a65a <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a634:	89 d0                	mov    eax,edx
c001a636:	b9 02 00 00 00       	mov    ecx,0x2
c001a63b:	6a 00                	push   0x0
c001a63d:	99                   	cdq    
c001a63e:	f7 f9                	idiv   ecx
c001a640:	57                   	push   edi
c001a641:	56                   	push   esi
c001a642:	83 e8 32             	sub    eax,0x32
c001a645:	50                   	push   eax
c001a646:	e8 9d c0 fe ff       	call   c00066e8 <iso_seek>
c001a64b:	83 c4 10             	add    esp,0x10
c001a64e:	31 f0                	xor    eax,esi
c001a650:	31 fa                	xor    edx,edi
c001a652:	09 d0                	or     eax,edx
c001a654:	0f 95 c0             	setne  al
c001a657:	0f b6 c0             	movzx  eax,al
c001a65a:	5a                   	pop    edx
c001a65b:	5e                   	pop    esi
c001a65c:	5f                   	pop    edi
c001a65d:	c3                   	ret    

c001a65e <ISO9660::tell(void*, unsigned long long*)>:
c001a65e:	53                   	push   ebx
c001a65f:	83 ec 08             	sub    esp,0x8
c001a662:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a666:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a66a:	85 c0                	test   eax,eax
c001a66c:	74 24                	je     c001a692 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a66e:	85 db                	test   ebx,ebx
c001a670:	74 20                	je     c001a692 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a672:	b9 02 00 00 00       	mov    ecx,0x2
c001a677:	99                   	cdq    
c001a678:	f7 f9                	idiv   ecx
c001a67a:	83 ec 0c             	sub    esp,0xc
c001a67d:	83 e8 32             	sub    eax,0x32
c001a680:	50                   	push   eax
c001a681:	e8 e6 c0 fe ff       	call   c000676c <iso_tell>
c001a686:	83 c4 10             	add    esp,0x10
c001a689:	89 03                	mov    DWORD PTR [ebx],eax
c001a68b:	31 c0                	xor    eax,eax
c001a68d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a690:	eb 05                	jmp    c001a697 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a692:	b8 04 00 00 00       	mov    eax,0x4
c001a697:	83 c4 08             	add    esp,0x8
c001a69a:	5b                   	pop    ebx
c001a69b:	c3                   	ret    

c001a69c <ISO9660::stat(void*, unsigned long long*)>:
c001a69c:	56                   	push   esi
c001a69d:	53                   	push   ebx
c001a69e:	83 ec 10             	sub    esp,0x10
c001a6a1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a6a5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a6a9:	68 9d 2f 02 c0       	push   0xc0022f9d
c001a6ae:	e8 57 02 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a6b3:	83 c4 10             	add    esp,0x10
c001a6b6:	85 db                	test   ebx,ebx
c001a6b8:	74 2a                	je     c001a6e4 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a6ba:	85 f6                	test   esi,esi
c001a6bc:	74 26                	je     c001a6e4 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a6be:	89 d8                	mov    eax,ebx
c001a6c0:	b9 02 00 00 00       	mov    ecx,0x2
c001a6c5:	99                   	cdq    
c001a6c6:	83 ec 0c             	sub    esp,0xc
c001a6c9:	f7 f9                	idiv   ecx
c001a6cb:	83 e8 32             	sub    eax,0x32
c001a6ce:	50                   	push   eax
c001a6cf:	e8 c9 c0 fe ff       	call   c000679d <iso_total>
c001a6d4:	83 c4 10             	add    esp,0x10
c001a6d7:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a6de:	89 06                	mov    DWORD PTR [esi],eax
c001a6e0:	31 c0                	xor    eax,eax
c001a6e2:	eb 05                	jmp    c001a6e9 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a6e4:	b8 04 00 00 00       	mov    eax,0x4
c001a6e9:	5a                   	pop    edx
c001a6ea:	5b                   	pop    ebx
c001a6eb:	5e                   	pop    esi
c001a6ec:	c3                   	ret    
c001a6ed:	90                   	nop

c001a6ee <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a6ee:	55                   	push   ebp
c001a6ef:	57                   	push   edi
c001a6f0:	56                   	push   esi
c001a6f1:	53                   	push   ebx
c001a6f2:	83 ec 18             	sub    esp,0x18
c001a6f5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a6f9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a6fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a701:	68 a5 2f 02 c0       	push   0xc0022fa5
c001a706:	e8 ff 01 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a70b:	83 c4 10             	add    esp,0x10
c001a70e:	85 ff                	test   edi,edi
c001a710:	0f 94 c0             	sete   al
c001a713:	85 f6                	test   esi,esi
c001a715:	0f 94 c2             	sete   dl
c001a718:	09 d0                	or     eax,edx
c001a71a:	a8 01                	test   al,0x1
c001a71c:	0f 85 dd 00 00 00    	jne    c001a7ff <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a722:	85 db                	test   ebx,ebx
c001a724:	0f 84 d5 00 00 00    	je     c001a7ff <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a72a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a72d:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a733:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a73a:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a741:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a743:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a749:	74 1b                	je     c001a766 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a74b:	85 c0                	test   eax,eax
c001a74d:	74 10                	je     c001a75f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a74f:	83 ec 0c             	sub    esp,0xc
c001a752:	68 49 2f 02 c0       	push   0xc0022f49
c001a757:	e8 7f 6e ff ff       	call   c00115db <KePanic(char const*)>
c001a75c:	83 c4 10             	add    esp,0x10
c001a75f:	8a 03                	mov    al,BYTE PTR [ebx]
c001a761:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a766:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a769:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a770:	85 c0                	test   eax,eax
c001a772:	74 09                	je     c001a77d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a774:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a77b:	74 51                	je     c001a7ce <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a77d:	83 ec 0c             	sub    esp,0xc
c001a780:	68 ad 2f 02 c0       	push   0xc0022fad
c001a785:	e8 80 01 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a78a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a78d:	83 c4 10             	add    esp,0x10
c001a790:	83 3c 85 7c b7 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd4884],0x0
c001a798:	74 21                	je     c001a7bb <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a79a:	83 ec 0c             	sub    esp,0xc
c001a79d:	68 cd 2f 02 c0       	push   0xc0022fcd
c001a7a2:	e8 63 01 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a7a7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a7aa:	83 c4 10             	add    esp,0x10
c001a7ad:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a7b4:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a7bb:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a7c2:	83 ec 0c             	sub    esp,0xc
c001a7c5:	50                   	push   eax
c001a7c6:	e8 9c c2 fe ff       	call   c0006a67 <init_percd>
c001a7cb:	83 c4 10             	add    esp,0x10
c001a7ce:	52                   	push   edx
c001a7cf:	83 c3 03             	add    ebx,0x3
c001a7d2:	52                   	push   edx
c001a7d3:	6a 00                	push   0x0
c001a7d5:	53                   	push   ebx
c001a7d6:	e8 4f bd fe ff       	call   c000652a <iso_open>
c001a7db:	83 c4 10             	add    esp,0x10
c001a7de:	83 f8 ff             	cmp    eax,0xffffffff
c001a7e1:	89 c5                	mov    ebp,eax
c001a7e3:	75 21                	jne    c001a806 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a7e5:	50                   	push   eax
c001a7e6:	50                   	push   eax
c001a7e7:	6a 01                	push   0x1
c001a7e9:	53                   	push   ebx
c001a7ea:	e8 3b bd fe ff       	call   c000652a <iso_open>
c001a7ef:	83 c4 10             	add    esp,0x10
c001a7f2:	ba 02 00 00 00       	mov    edx,0x2
c001a7f7:	40                   	inc    eax
c001a7f8:	74 2b                	je     c001a825 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a7fa:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a7fd:	eb 24                	jmp    c001a823 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a7ff:	ba 04 00 00 00       	mov    edx,0x4
c001a804:	eb 1f                	jmp    c001a825 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a806:	83 ec 0c             	sub    esp,0xc
c001a809:	50                   	push   eax
c001a80a:	e8 8e bf fe ff       	call   c000679d <iso_total>
c001a80f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a816:	89 07                	mov    DWORD PTR [edi],eax
c001a818:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a81b:	e8 94 bd fe ff       	call   c00065b4 <iso_close>
c001a820:	83 c4 10             	add    esp,0x10
c001a823:	31 d2                	xor    edx,edx
c001a825:	83 c4 0c             	add    esp,0xc
c001a828:	89 d0                	mov    eax,edx
c001a82a:	5b                   	pop    ebx
c001a82b:	5e                   	pop    esi
c001a82c:	5f                   	pop    edi
c001a82d:	5d                   	pop    ebp
c001a82e:	c3                   	ret    
c001a82f:	90                   	nop

c001a830 <ISO9660::close(void*)>:
c001a830:	83 ec 0c             	sub    esp,0xc
c001a833:	b8 04 00 00 00       	mov    eax,0x4
c001a838:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a83c:	85 d2                	test   edx,edx
c001a83e:	74 1b                	je     c001a85b <ISO9660::close(void*)+0x2b>
c001a840:	89 d0                	mov    eax,edx
c001a842:	b9 02 00 00 00       	mov    ecx,0x2
c001a847:	99                   	cdq    
c001a848:	83 ec 0c             	sub    esp,0xc
c001a84b:	f7 f9                	idiv   ecx
c001a84d:	83 e8 32             	sub    eax,0x32
c001a850:	50                   	push   eax
c001a851:	e8 5e bd fe ff       	call   c00065b4 <iso_close>
c001a856:	83 c4 10             	add    esp,0x10
c001a859:	31 c0                	xor    eax,eax
c001a85b:	83 c4 0c             	add    esp,0xc
c001a85e:	c3                   	ret    
c001a85f:	90                   	nop

c001a860 <ISO9660::openDir(char const*, void**)>:
c001a860:	56                   	push   esi
c001a861:	53                   	push   ebx
c001a862:	50                   	push   eax
c001a863:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a867:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a86b:	85 db                	test   ebx,ebx
c001a86d:	0f 84 bd 00 00 00    	je     c001a930 <ISO9660::openDir(char const*, void**)+0xd0>
c001a873:	85 f6                	test   esi,esi
c001a875:	0f 84 b5 00 00 00    	je     c001a930 <ISO9660::openDir(char const*, void**)+0xd0>
c001a87b:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a87d:	38 15 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,dl
c001a883:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a88a:	74 1b                	je     c001a8a7 <ISO9660::openDir(char const*, void**)+0x47>
c001a88c:	85 c0                	test   eax,eax
c001a88e:	74 10                	je     c001a8a0 <ISO9660::openDir(char const*, void**)+0x40>
c001a890:	83 ec 0c             	sub    esp,0xc
c001a893:	68 49 2f 02 c0       	push   0xc0022f49
c001a898:	e8 3e 6d ff ff       	call   c00115db <KePanic(char const*)>
c001a89d:	83 c4 10             	add    esp,0x10
c001a8a0:	8a 03                	mov    al,BYTE PTR [ebx]
c001a8a2:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a8a7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a8aa:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a8b1:	85 c0                	test   eax,eax
c001a8b3:	74 10                	je     c001a8c5 <ISO9660::openDir(char const*, void**)+0x65>
c001a8b5:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a8bc:	74 1a                	je     c001a8d8 <ISO9660::openDir(char const*, void**)+0x78>
c001a8be:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a8c5:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a8cc:	83 ec 0c             	sub    esp,0xc
c001a8cf:	50                   	push   eax
c001a8d0:	e8 92 c1 fe ff       	call   c0006a67 <init_percd>
c001a8d5:	83 c4 10             	add    esp,0x10
c001a8d8:	50                   	push   eax
c001a8d9:	83 c3 03             	add    ebx,0x3
c001a8dc:	50                   	push   eax
c001a8dd:	6a 01                	push   0x1
c001a8df:	53                   	push   ebx
c001a8e0:	e8 45 bc fe ff       	call   c000652a <iso_open>
c001a8e5:	83 c4 10             	add    esp,0x10
c001a8e8:	83 f8 ff             	cmp    eax,0xffffffff
c001a8eb:	89 c3                	mov    ebx,eax
c001a8ed:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a8f2:	75 1c                	jne    c001a910 <ISO9660::openDir(char const*, void**)+0xb0>
c001a8f4:	53                   	push   ebx
c001a8f5:	53                   	push   ebx
c001a8f6:	68 f1 2f 02 c0       	push   0xc0022ff1
c001a8fb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a901:	e8 a6 e1 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a906:	83 c4 10             	add    esp,0x10
c001a909:	b8 01 00 00 00       	mov    eax,0x1
c001a90e:	eb 25                	jmp    c001a935 <ISO9660::openDir(char const*, void**)+0xd5>
c001a910:	51                   	push   ecx
c001a911:	01 db                	add    ebx,ebx
c001a913:	51                   	push   ecx
c001a914:	83 c3 65             	add    ebx,0x65
c001a917:	68 04 30 02 c0       	push   0xc0023004
c001a91c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a922:	e8 85 e1 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a927:	83 c4 10             	add    esp,0x10
c001a92a:	31 c0                	xor    eax,eax
c001a92c:	89 1e                	mov    DWORD PTR [esi],ebx
c001a92e:	eb 05                	jmp    c001a935 <ISO9660::openDir(char const*, void**)+0xd5>
c001a930:	b8 04 00 00 00       	mov    eax,0x4
c001a935:	5a                   	pop    edx
c001a936:	5b                   	pop    ebx
c001a937:	5e                   	pop    esi
c001a938:	c3                   	ret    
c001a939:	90                   	nop

c001a93a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a93a:	55                   	push   ebp
c001a93b:	57                   	push   edi
c001a93c:	56                   	push   esi
c001a93d:	53                   	push   ebx
c001a93e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a944:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001a94b:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a952:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001a959:	85 db                	test   ebx,ebx
c001a95b:	0f 84 e4 00 00 00    	je     c001aa45 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a961:	85 ed                	test   ebp,ebp
c001a963:	0f 84 dc 00 00 00    	je     c001aa45 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a969:	83 ec 0c             	sub    esp,0xc
c001a96c:	68 17 30 02 c0       	push   0xc0023017
c001a971:	e8 94 ff fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a976:	89 d8                	mov    eax,ebx
c001a978:	b9 02 00 00 00       	mov    ecx,0x2
c001a97d:	99                   	cdq    
c001a97e:	f7 f9                	idiv   ecx
c001a980:	83 e8 32             	sub    eax,0x32
c001a983:	89 04 24             	mov    DWORD PTR [esp],eax
c001a986:	e8 64 be fe ff       	call   c00067ef <iso_readdir>
c001a98b:	83 c4 10             	add    esp,0x10
c001a98e:	85 c0                	test   eax,eax
c001a990:	89 c3                	mov    ebx,eax
c001a992:	75 38                	jne    c001a9cc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001a994:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a999:	53                   	push   ebx
c001a99a:	53                   	push   ebx
c001a99b:	68 22 30 02 c0       	push   0xc0023022
c001a9a0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a9a6:	e8 01 e1 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a9ab:	83 c4 0c             	add    esp,0xc
c001a9ae:	68 10 01 00 00       	push   0x110
c001a9b3:	6a 00                	push   0x0
c001a9b5:	57                   	push   edi
c001a9b6:	e8 35 5b fe ff       	call   c00004f0 <memset>
c001a9bb:	83 c4 10             	add    esp,0x10
c001a9be:	b8 01 00 00 00       	mov    eax,0x1
c001a9c3:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001a9ca:	eb 7e                	jmp    c001aa4a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001a9cc:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a9d2:	8d 70 08             	lea    esi,[eax+0x8]
c001a9d5:	83 ec 0c             	sub    esp,0xc
c001a9d8:	56                   	push   esi
c001a9d9:	e8 a2 5b fe ff       	call   c0000580 <strlen>
c001a9de:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001a9e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a9ea:	83 c4 10             	add    esp,0x10
c001a9ed:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001a9f1:	75 0a                	jne    c001a9fd <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001a9f3:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001a9f6:	b8 02 00 00 00       	mov    eax,0x2
c001a9fb:	74 05                	je     c001aa02 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001a9fd:	b8 01 00 00 00       	mov    eax,0x1
c001aa02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aa06:	50                   	push   eax
c001aa07:	50                   	push   eax
c001aa08:	56                   	push   esi
c001aa09:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aa0d:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001aa11:	50                   	push   eax
c001aa12:	e8 39 5c fe ff       	call   c0000650 <strcpy>
c001aa17:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001aa1e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aa20:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001aa27:	5a                   	pop    edx
c001aa28:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001aa2d:	59                   	pop    ecx
c001aa2e:	68 35 30 02 c0       	push   0xc0023035
c001aa33:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001aa39:	e8 6e e0 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001aa3e:	83 c4 10             	add    esp,0x10
c001aa41:	31 c0                	xor    eax,eax
c001aa43:	eb 05                	jmp    c001aa4a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001aa45:	b8 04 00 00 00       	mov    eax,0x4
c001aa4a:	81 c4 1c 01 00 00    	add    esp,0x11c
c001aa50:	5b                   	pop    ebx
c001aa51:	5e                   	pop    esi
c001aa52:	5f                   	pop    edi
c001aa53:	5d                   	pop    ebp
c001aa54:	c3                   	ret    

c001aa55 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001aa55:	57                   	push   edi
c001aa56:	56                   	push   esi
c001aa57:	53                   	push   ebx
c001aa58:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001aa5c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001aa60:	39 35 84 c8 02 c0    	cmp    DWORD PTR ds:0xc002c884,esi
c001aa66:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001aa6a:	0f be cb             	movsx  ecx,bl
c001aa6d:	75 0b                	jne    c001aa7a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001aa6f:	0f be 05 60 42 02 c0 	movsx  eax,BYTE PTR ds:0xc0024260
c001aa76:	39 c8                	cmp    eax,ecx
c001aa78:	74 47                	je     c001aac1 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001aa7a:	83 ec 0c             	sub    esp,0xc
c001aa7d:	31 d2                	xor    edx,edx
c001aa7f:	68 a0 c8 02 c0       	push   0xc002c8a0
c001aa84:	6a 01                	push   0x1
c001aa86:	52                   	push   edx
c001aa87:	56                   	push   esi
c001aa88:	ff 34 8d 7c b7 02 c0 	push   DWORD PTR [ecx*4-0x3ffd4884]
c001aa8f:	e8 6a 33 ff ff       	call   c000ddfe <LogicalDisk::read(unsigned long long, int, void*)>
c001aa94:	83 c4 20             	add    esp,0x20
c001aa97:	85 c0                	test   eax,eax
c001aa99:	75 0e                	jne    c001aaa9 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001aa9b:	89 35 84 c8 02 c0    	mov    DWORD PTR ds:0xc002c884,esi
c001aaa1:	88 1d 60 42 02 c0    	mov    BYTE PTR ds:0xc0024260,bl
c001aaa7:	eb 18                	jmp    c001aac1 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001aaa9:	50                   	push   eax
c001aaaa:	68 00 08 00 00       	push   0x800
c001aaaf:	6a 00                	push   0x0
c001aab1:	57                   	push   edi
c001aab2:	e8 39 5a fe ff       	call   c00004f0 <memset>
c001aab7:	83 c4 10             	add    esp,0x10
c001aaba:	b8 01 00 00 00       	mov    eax,0x1
c001aabf:	eb 0e                	jmp    c001aacf <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001aac1:	be a0 c8 02 c0       	mov    esi,0xc002c8a0
c001aac6:	b9 00 08 00 00       	mov    ecx,0x800
c001aacb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aacd:	31 c0                	xor    eax,eax
c001aacf:	5b                   	pop    ebx
c001aad0:	5e                   	pop    esi
c001aad1:	5f                   	pop    edi
c001aad2:	c3                   	ret    
c001aad3:	90                   	nop

c001aad4 <ISO9660::tryMount(LogicalDisk*, int)>:
c001aad4:	53                   	push   ebx
c001aad5:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001aadb:	c7 05 84 c8 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002c884,0xdeadbeef
c001aae5:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001aaec:	8d 58 41             	lea    ebx,[eax+0x41]
c001aaef:	0f be db             	movsx  ebx,bl
c001aaf2:	53                   	push   ebx
c001aaf3:	8d 44 24 08          	lea    eax,[esp+0x8]
c001aaf7:	50                   	push   eax
c001aaf8:	6a 10                	push   0x10
c001aafa:	e8 56 ff ff ff       	call   c001aa55 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001aaff:	83 c4 10             	add    esp,0x10
c001ab02:	31 d2                	xor    edx,edx
c001ab04:	85 c0                	test   eax,eax
c001ab06:	75 33                	jne    c001ab3b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab08:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001ab0d:	75 2c                	jne    c001ab3b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab0f:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001ab14:	75 25                	jne    c001ab3b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab16:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001ab1b:	75 1e                	jne    c001ab3b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab1d:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001ab22:	75 17                	jne    c001ab3b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab24:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001ab29:	75 10                	jne    c001ab3b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab2b:	83 ec 0c             	sub    esp,0xc
c001ab2e:	53                   	push   ebx
c001ab2f:	e8 33 bf fe ff       	call   c0006a67 <init_percd>
c001ab34:	83 c4 10             	add    esp,0x10
c001ab37:	40                   	inc    eax
c001ab38:	0f 95 c2             	setne  dl
c001ab3b:	81 c4 08 08 00 00    	add    esp,0x808
c001ab41:	88 d0                	mov    al,dl
c001ab43:	5b                   	pop    ebx
c001ab44:	c3                   	ret    
c001ab45:	90                   	nop

c001ab46 <ISO9660::ISO9660()>:
c001ab46:	83 ec 0c             	sub    esp,0xc
c001ab49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab4d:	83 ec 0c             	sub    esp,0xc
c001ab50:	50                   	push   eax
c001ab51:	e8 9a 0c ff ff       	call   c000b7f0 <Filesystem::Filesystem()>
c001ab56:	83 c4 10             	add    esp,0x10
c001ab59:	ba 50 30 02 c0       	mov    edx,0xc0023050
c001ab5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab62:	89 10                	mov    DWORD PTR [eax],edx
c001ab64:	e8 10 c0 fe ff       	call   c0006b79 <fs_iso9660_init>
c001ab69:	90                   	nop
c001ab6a:	83 c4 0c             	add    esp,0xc
c001ab6d:	c3                   	ret    

c001ab6e <SoundCard::beginPlayback()>:
c001ab6e:	c7 44 24 04 b4 30 02 c0 	mov    DWORD PTR [esp+0x4],0xc00230b4
c001ab76:	e9 60 6a ff ff       	jmp    c00115db <KePanic(char const*)>
c001ab7b:	90                   	nop

c001ab7c <SoundCard::stopPlayback()>:
c001ab7c:	c7 44 24 04 b4 30 02 c0 	mov    DWORD PTR [esp+0x4],0xc00230b4
c001ab84:	e9 52 6a ff ff       	jmp    c00115db <KePanic(char const*)>
c001ab89:	90                   	nop

c001ab8a <SoundCard::SoundCard(char const*)>:
c001ab8a:	83 ec 1c             	sub    esp,0x1c
c001ab8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab91:	83 ec 08             	sub    esp,0x8
c001ab94:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ab98:	50                   	push   eax
c001ab99:	e8 0e 20 ff ff       	call   c000cbac <Device::Device(char const*)>
c001ab9e:	83 c4 10             	add    esp,0x10
c001aba1:	ba 00 31 02 c0       	mov    edx,0xc0023100
c001aba6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abaa:	89 10                	mov    DWORD PTR [eax],edx
c001abac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abb0:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001abb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abbb:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001abc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abc9:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001abd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abd7:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001abe1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abe5:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001abef:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001abf7:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001abfc:	7f 1a                	jg     c001ac18 <SoundCard::SoundCard(char const*)+0x8e>
c001abfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac02:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ac06:	83 c2 54             	add    edx,0x54
c001ac09:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001ac11:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001ac16:	eb df                	jmp    c001abf7 <SoundCard::SoundCard(char const*)+0x6d>
c001ac18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac1c:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ac23:	90                   	nop
c001ac24:	83 c4 1c             	add    esp,0x1c
c001ac27:	c3                   	ret    

c001ac28 <SoundCard::~SoundCard()>:
c001ac28:	83 ec 0c             	sub    esp,0xc
c001ac2b:	ba 00 31 02 c0       	mov    edx,0xc0023100
c001ac30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac34:	89 10                	mov    DWORD PTR [eax],edx
c001ac36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac3a:	83 ec 0c             	sub    esp,0xc
c001ac3d:	50                   	push   eax
c001ac3e:	e8 d3 1c ff ff       	call   c000c916 <Device::~Device()>
c001ac43:	83 c4 10             	add    esp,0x10
c001ac46:	90                   	nop
c001ac47:	83 c4 0c             	add    esp,0xc
c001ac4a:	c3                   	ret    
c001ac4b:	90                   	nop

c001ac4c <SoundCard::~SoundCard()>:
c001ac4c:	83 ec 0c             	sub    esp,0xc
c001ac4f:	83 ec 0c             	sub    esp,0xc
c001ac52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac56:	e8 cd ff ff ff       	call   c001ac28 <SoundCard::~SoundCard()>
c001ac5b:	83 c4 10             	add    esp,0x10
c001ac5e:	83 ec 08             	sub    esp,0x8
c001ac61:	68 e8 01 00 00       	push   0x1e8
c001ac66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac6a:	e8 9d fb fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001ac6f:	83 c4 10             	add    esp,0x10
c001ac72:	83 c4 0c             	add    esp,0xc
c001ac75:	c3                   	ret    

c001ac76 <SoundCard::configureRates(int, int, int)>:
c001ac76:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ac7a:	31 c0                	xor    eax,eax
c001ac7c:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001ac83:	75 20                	jne    c001aca5 <SoundCard::configureRates(int, int, int)+0x2f>
c001ac85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ac89:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001ac8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac93:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001ac99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac9d:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001aca3:	b0 01                	mov    al,0x1
c001aca5:	c3                   	ret    

c001aca6 <SoundCard::getSamples16(int, short*)>:
c001aca6:	55                   	push   ebp
c001aca7:	57                   	push   edi
c001aca8:	31 ff                	xor    edi,edi
c001acaa:	56                   	push   esi
c001acab:	53                   	push   ebx
c001acac:	31 db                	xor    ebx,ebx
c001acae:	83 ec 10             	sub    esp,0x10
c001acb1:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001acb5:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001acb9:	8d 04 36             	lea    eax,[esi+esi*1]
c001acbc:	50                   	push   eax
c001acbd:	6a 00                	push   0x0
c001acbf:	55                   	push   ebp
c001acc0:	e8 2b 58 fe ff       	call   c00004f0 <memset>
c001acc5:	83 c4 10             	add    esp,0x10
c001acc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001accc:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001acd3:	85 c0                	test   eax,eax
c001acd5:	74 1a                	je     c001acf1 <SoundCard::getSamples16(int, short*)+0x4b>
c001acd7:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001acdb:	75 14                	jne    c001acf1 <SoundCard::getSamples16(int, short*)+0x4b>
c001acdd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ace1:	55                   	push   ebp
c001ace2:	56                   	push   esi
c001ace3:	50                   	push   eax
c001ace4:	e8 f3 02 00 00       	call   c001afdc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001ace9:	83 c4 10             	add    esp,0x10
c001acec:	39 c3                	cmp    ebx,eax
c001acee:	0f 4c d8             	cmovl  ebx,eax
c001acf1:	47                   	inc    edi
c001acf2:	83 ff 20             	cmp    edi,0x20
c001acf5:	75 d1                	jne    c001acc8 <SoundCard::getSamples16(int, short*)+0x22>
c001acf7:	83 c4 0c             	add    esp,0xc
c001acfa:	89 d8                	mov    eax,ebx
c001acfc:	5b                   	pop    ebx
c001acfd:	5e                   	pop    esi
c001acfe:	5f                   	pop    edi
c001acff:	5d                   	pop    ebp
c001ad00:	c3                   	ret    
c001ad01:	90                   	nop

c001ad02 <SoundCard::getSamples32(int, int*)>:
c001ad02:	55                   	push   ebp
c001ad03:	57                   	push   edi
c001ad04:	31 ff                	xor    edi,edi
c001ad06:	56                   	push   esi
c001ad07:	31 f6                	xor    esi,esi
c001ad09:	53                   	push   ebx
c001ad0a:	83 ec 10             	sub    esp,0x10
c001ad0d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ad11:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ad15:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001ad19:	c1 e0 02             	shl    eax,0x2
c001ad1c:	50                   	push   eax
c001ad1d:	6a 00                	push   0x0
c001ad1f:	55                   	push   ebp
c001ad20:	e8 cb 57 fe ff       	call   c00004f0 <memset>
c001ad25:	83 c4 10             	add    esp,0x10
c001ad28:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001ad2f:	85 c0                	test   eax,eax
c001ad31:	74 1a                	je     c001ad4d <SoundCard::getSamples32(int, int*)+0x4b>
c001ad33:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ad37:	75 14                	jne    c001ad4d <SoundCard::getSamples32(int, int*)+0x4b>
c001ad39:	53                   	push   ebx
c001ad3a:	55                   	push   ebp
c001ad3b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad3f:	50                   	push   eax
c001ad40:	e8 67 03 00 00       	call   c001b0ac <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001ad45:	83 c4 10             	add    esp,0x10
c001ad48:	39 c6                	cmp    esi,eax
c001ad4a:	0f 4c f0             	cmovl  esi,eax
c001ad4d:	47                   	inc    edi
c001ad4e:	83 ff 20             	cmp    edi,0x20
c001ad51:	75 d5                	jne    c001ad28 <SoundCard::getSamples32(int, int*)+0x26>
c001ad53:	85 f6                	test   esi,esi
c001ad55:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001ad5c:	75 0f                	jne    c001ad6d <SoundCard::getSamples32(int, int*)+0x6b>
c001ad5e:	85 c0                	test   eax,eax
c001ad60:	74 1b                	je     c001ad7d <SoundCard::getSamples32(int, int*)+0x7b>
c001ad62:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad64:	83 ec 0c             	sub    esp,0xc
c001ad67:	53                   	push   ebx
c001ad68:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001ad6b:	eb 0d                	jmp    c001ad7a <SoundCard::getSamples32(int, int*)+0x78>
c001ad6d:	85 c0                	test   eax,eax
c001ad6f:	75 0c                	jne    c001ad7d <SoundCard::getSamples32(int, int*)+0x7b>
c001ad71:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad73:	83 ec 0c             	sub    esp,0xc
c001ad76:	53                   	push   ebx
c001ad77:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001ad7a:	83 c4 10             	add    esp,0x10
c001ad7d:	83 c4 0c             	add    esp,0xc
c001ad80:	89 f0                	mov    eax,esi
c001ad82:	5b                   	pop    ebx
c001ad83:	5e                   	pop    esi
c001ad84:	5f                   	pop    edi
c001ad85:	5d                   	pop    ebp
c001ad86:	c3                   	ret    
c001ad87:	90                   	nop

c001ad88 <SoundCard::addChannel(SoundPort*)>:
c001ad88:	83 ec 0c             	sub    esp,0xc
c001ad8b:	31 c0                	xor    eax,eax
c001ad8d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ad91:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001ad99:	74 1b                	je     c001adb6 <SoundCard::addChannel(SoundPort*)+0x2e>
c001ad9b:	40                   	inc    eax
c001ad9c:	83 f8 20             	cmp    eax,0x20
c001ad9f:	75 f0                	jne    c001ad91 <SoundCard::addChannel(SoundPort*)+0x9>
c001ada1:	83 ec 0c             	sub    esp,0xc
c001ada4:	68 d9 30 02 c0       	push   0xc00230d9
c001ada9:	e8 2d 68 ff ff       	call   c00115db <KePanic(char const*)>
c001adae:	83 c4 10             	add    esp,0x10
c001adb1:	83 c8 ff             	or     eax,0xffffffff
c001adb4:	eb 0b                	jmp    c001adc1 <SoundCard::addChannel(SoundPort*)+0x39>
c001adb6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001adba:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001adc1:	83 c4 0c             	add    esp,0xc
c001adc4:	c3                   	ret    
c001adc5:	90                   	nop

c001adc6 <SoundCard::removeChannel(int)>:
c001adc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001adca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001adce:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001add9:	c3                   	ret    
c001adda:	66 90                	xchg   ax,ax

c001addc <SoundPort::SoundPort(int, int, int, int)>:
c001addc:	83 ec 0c             	sub    esp,0xc
c001addf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ade3:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001adea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adee:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001adf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adf6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001adfa:	89 10                	mov    DWORD PTR [eax],edx
c001adfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae00:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ae04:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ae07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae0b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ae0f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ae12:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001ae17:	75 13                	jne    c001ae2c <SoundPort::SoundPort(int, int, int, int)+0x50>
c001ae19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae1d:	8b 00                	mov    eax,DWORD PTR [eax]
c001ae1f:	05 a0 0f 00 00       	add    eax,0xfa0
c001ae24:	d1 e0                	shl    eax,1
c001ae26:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ae2a:	66 90                	xchg   ax,ax
c001ae2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae30:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ae34:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001ae37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae3b:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001ae42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae46:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001ae49:	c1 e0 02             	shl    eax,0x2
c001ae4c:	83 ec 0c             	sub    esp,0xc
c001ae4f:	50                   	push   eax
c001ae50:	e8 7e cc fe ff       	call   c0007ad3 <malloc>
c001ae55:	83 c4 10             	add    esp,0x10
c001ae58:	89 c2                	mov    edx,eax
c001ae5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae5e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001ae61:	90                   	nop
c001ae62:	83 c4 0c             	add    esp,0xc
c001ae65:	c3                   	ret    
c001ae66:	66 90                	xchg   ax,ax

c001ae68 <SoundPort::~SoundPort()>:
c001ae68:	83 ec 0c             	sub    esp,0xc
c001ae6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae6f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ae72:	85 c0                	test   eax,eax
c001ae74:	74 1e                	je     c001ae94 <SoundPort::~SoundPort()+0x2c>
c001ae76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae7a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ae7d:	83 ec 0c             	sub    esp,0xc
c001ae80:	50                   	push   eax
c001ae81:	e8 5d cc fe ff       	call   c0007ae3 <free>
c001ae86:	83 c4 10             	add    esp,0x10
c001ae89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae8d:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ae94:	90                   	nop
c001ae95:	83 c4 0c             	add    esp,0xc
c001ae98:	c3                   	ret    
c001ae99:	90                   	nop
c001ae9a:	66 90                	xchg   ax,ax

c001ae9c <SoundPort::unpause()>:
c001ae9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aea0:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001aea4:	c3                   	ret    
c001aea5:	90                   	nop
c001aea6:	66 90                	xchg   ax,ax

c001aea8 <SoundPort::pause()>:
c001aea8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aeac:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001aeb0:	c3                   	ret    
c001aeb1:	90                   	nop
c001aeb2:	66 90                	xchg   ax,ax

c001aeb4 <SoundPort::getBufferUsed()>:
c001aeb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aeb8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aebb:	c3                   	ret    

c001aebc <SoundPort::getBufferSize()>:
c001aebc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aec0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001aec3:	c3                   	ret    

c001aec4 <SoundPort::buffer16(short*, int)>:
c001aec4:	55                   	push   ebp
c001aec5:	57                   	push   edi
c001aec6:	56                   	push   esi
c001aec7:	53                   	push   ebx
c001aec8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001aecc:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001aed0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001aed3:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001aed6:	74 68                	je     c001af40 <SoundPort::buffer16(short*, int)+0x7c>
c001aed8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001aedc:	85 c9                	test   ecx,ecx
c001aede:	7e 60                	jle    c001af40 <SoundPort::buffer16(short*, int)+0x7c>
c001aee0:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001aee4:	8d 70 01             	lea    esi,[eax+0x1]
c001aee7:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001aeea:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001aeed:	c1 e1 0f             	shl    ecx,0xf
c001aef0:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001aef3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aef6:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aef9:	74 4d                	je     c001af48 <SoundPort::buffer16(short*, int)+0x84>
c001aefb:	31 f6                	xor    esi,esi
c001aefd:	eb 21                	jmp    c001af20 <SoundPort::buffer16(short*, int)+0x5c>
c001aeff:	90                   	nop
c001af00:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001af05:	8d 79 01             	lea    edi,[ecx+0x1]
c001af08:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001af0b:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001af0e:	c1 e3 0f             	shl    ebx,0xf
c001af11:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001af14:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001af17:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001af1a:	74 1c                	je     c001af38 <SoundPort::buffer16(short*, int)+0x74>
c001af1c:	89 c6                	mov    esi,eax
c001af1e:	66 90                	xchg   ax,ax
c001af20:	8d 46 01             	lea    eax,[esi+0x1]
c001af23:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001af27:	75 d7                	jne    c001af00 <SoundPort::buffer16(short*, int)+0x3c>
c001af29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001af2d:	8d 76 00             	lea    esi,[esi+0x0]
c001af30:	5b                   	pop    ebx
c001af31:	5e                   	pop    esi
c001af32:	5f                   	pop    edi
c001af33:	5d                   	pop    ebp
c001af34:	c3                   	ret    
c001af35:	8d 76 00             	lea    esi,[esi+0x0]
c001af38:	5b                   	pop    ebx
c001af39:	8d 46 02             	lea    eax,[esi+0x2]
c001af3c:	5e                   	pop    esi
c001af3d:	5f                   	pop    edi
c001af3e:	5d                   	pop    ebp
c001af3f:	c3                   	ret    
c001af40:	5b                   	pop    ebx
c001af41:	31 c0                	xor    eax,eax
c001af43:	5e                   	pop    esi
c001af44:	5f                   	pop    edi
c001af45:	5d                   	pop    ebp
c001af46:	c3                   	ret    
c001af47:	90                   	nop
c001af48:	b8 01 00 00 00       	mov    eax,0x1
c001af4d:	eb e1                	jmp    c001af30 <SoundPort::buffer16(short*, int)+0x6c>
c001af4f:	90                   	nop

c001af50 <SoundPort::buffer32(int*, int)>:
c001af50:	55                   	push   ebp
c001af51:	57                   	push   edi
c001af52:	56                   	push   esi
c001af53:	53                   	push   ebx
c001af54:	83 ec 04             	sub    esp,0x4
c001af57:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001af5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001af5f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001af63:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001af66:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001af69:	89 04 24             	mov    DWORD PTR [esp],eax
c001af6c:	74 5a                	je     c001afc8 <SoundPort::buffer32(int*, int)+0x78>
c001af6e:	85 c0                	test   eax,eax
c001af70:	7e 56                	jle    c001afc8 <SoundPort::buffer32(int*, int)+0x78>
c001af72:	8d 71 01             	lea    esi,[ecx+0x1]
c001af75:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001af78:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001af7b:	8b 37                	mov    esi,DWORD PTR [edi]
c001af7d:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001af80:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001af83:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001af86:	74 4c                	je     c001afd4 <SoundPort::buffer32(int*, int)+0x84>
c001af88:	31 f6                	xor    esi,esi
c001af8a:	eb 1c                	jmp    c001afa8 <SoundPort::buffer32(int*, int)+0x58>
c001af8c:	8d 69 01             	lea    ebp,[ecx+0x1]
c001af8f:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001af92:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001af95:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001af98:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001af9c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001af9f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001afa2:	74 18                	je     c001afbc <SoundPort::buffer32(int*, int)+0x6c>
c001afa4:	89 de                	mov    esi,ebx
c001afa6:	66 90                	xchg   ax,ax
c001afa8:	8d 5e 01             	lea    ebx,[esi+0x1]
c001afab:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001afae:	75 dc                	jne    c001af8c <SoundPort::buffer32(int*, int)+0x3c>
c001afb0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001afb3:	90                   	nop
c001afb4:	83 c4 04             	add    esp,0x4
c001afb7:	5b                   	pop    ebx
c001afb8:	5e                   	pop    esi
c001afb9:	5f                   	pop    edi
c001afba:	5d                   	pop    ebp
c001afbb:	c3                   	ret    
c001afbc:	8d 46 02             	lea    eax,[esi+0x2]
c001afbf:	83 c4 04             	add    esp,0x4
c001afc2:	5b                   	pop    ebx
c001afc3:	5e                   	pop    esi
c001afc4:	5f                   	pop    edi
c001afc5:	5d                   	pop    ebp
c001afc6:	c3                   	ret    
c001afc7:	90                   	nop
c001afc8:	83 c4 04             	add    esp,0x4
c001afcb:	31 c0                	xor    eax,eax
c001afcd:	5b                   	pop    ebx
c001afce:	5e                   	pop    esi
c001afcf:	5f                   	pop    edi
c001afd0:	5d                   	pop    ebp
c001afd1:	c3                   	ret    
c001afd2:	66 90                	xchg   ax,ax
c001afd4:	b8 01 00 00 00       	mov    eax,0x1
c001afd9:	eb d9                	jmp    c001afb4 <SoundPort::buffer32(int*, int)+0x64>
c001afdb:	90                   	nop

c001afdc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001afdc:	55                   	push   ebp
c001afdd:	57                   	push   edi
c001afde:	56                   	push   esi
c001afdf:	53                   	push   ebx
c001afe0:	83 ec 0c             	sub    esp,0xc
c001afe3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001afe7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001afeb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001afef:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001aff3:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001aff9:	39 03                	cmp    DWORD PTR [ebx],eax
c001affb:	74 13                	je     c001b010 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001affd:	83 ec 0c             	sub    esp,0xc
c001b000:	68 2c 31 02 c0       	push   0xc002312c
c001b005:	e8 d1 65 ff ff       	call   c00115db <KePanic(char const*)>
c001b00a:	83 c4 10             	add    esp,0x10
c001b00d:	8d 76 00             	lea    esi,[esi+0x0]
c001b010:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001b016:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001b019:	74 11                	je     c001b02c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001b01b:	83 ec 0c             	sub    esp,0xc
c001b01e:	68 6b 31 02 c0       	push   0xc002316b
c001b023:	e8 b3 65 ff ff       	call   c00115db <KePanic(char const*)>
c001b028:	83 c4 10             	add    esp,0x10
c001b02b:	90                   	nop
c001b02c:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001b032:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b035:	74 11                	je     c001b048 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001b037:	83 ec 0c             	sub    esp,0xc
c001b03a:	68 6b 31 02 c0       	push   0xc002316b
c001b03f:	e8 97 65 ff ff       	call   c00115db <KePanic(char const*)>
c001b044:	83 c4 10             	add    esp,0x10
c001b047:	90                   	nop
c001b048:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001b04b:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001b04f:	85 f6                	test   esi,esi
c001b051:	7e 2d                	jle    c001b080 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001b053:	31 c0                	xor    eax,eax
c001b055:	8d 76 00             	lea    esi,[esi+0x0]
c001b058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b05b:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001b05e:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001b064:	85 c9                	test   ecx,ecx
c001b066:	0f 49 d1             	cmovns edx,ecx
c001b069:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001b06d:	c1 fa 0f             	sar    edx,0xf
c001b070:	01 d1                	add    ecx,edx
c001b072:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001b076:	83 c0 01             	add    eax,0x1
c001b079:	39 f0                	cmp    eax,esi
c001b07b:	75 db                	jne    c001b058 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001b07d:	8d 76 00             	lea    esi,[esi+0x0]
c001b080:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b083:	83 ec 04             	sub    esp,0x4
c001b086:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b089:	29 f0                	sub    eax,esi
c001b08b:	c1 e0 02             	shl    eax,0x2
c001b08e:	50                   	push   eax
c001b08f:	8d 04 b2             	lea    eax,[edx+esi*4]
c001b092:	50                   	push   eax
c001b093:	52                   	push   edx
c001b094:	e8 37 53 fe ff       	call   c00003d0 <memmove>
c001b099:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b09c:	29 f0                	sub    eax,esi
c001b09e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b0a1:	83 c4 1c             	add    esp,0x1c
c001b0a4:	89 f0                	mov    eax,esi
c001b0a6:	5b                   	pop    ebx
c001b0a7:	5e                   	pop    esi
c001b0a8:	5f                   	pop    edi
c001b0a9:	5d                   	pop    ebp
c001b0aa:	c3                   	ret    
c001b0ab:	90                   	nop

c001b0ac <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001b0ac:	55                   	push   ebp
c001b0ad:	57                   	push   edi
c001b0ae:	56                   	push   esi
c001b0af:	53                   	push   ebx
c001b0b0:	83 ec 0c             	sub    esp,0xc
c001b0b3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b0b7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b0bb:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001b0bf:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001b0c3:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001b0c9:	39 03                	cmp    DWORD PTR [ebx],eax
c001b0cb:	74 13                	je     c001b0e0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001b0cd:	83 ec 0c             	sub    esp,0xc
c001b0d0:	68 4c 31 02 c0       	push   0xc002314c
c001b0d5:	e8 01 65 ff ff       	call   c00115db <KePanic(char const*)>
c001b0da:	83 c4 10             	add    esp,0x10
c001b0dd:	8d 76 00             	lea    esi,[esi+0x0]
c001b0e0:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001b0e6:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001b0e9:	74 11                	je     c001b0fc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001b0eb:	83 ec 0c             	sub    esp,0xc
c001b0ee:	68 87 31 02 c0       	push   0xc0023187
c001b0f3:	e8 e3 64 ff ff       	call   c00115db <KePanic(char const*)>
c001b0f8:	83 c4 10             	add    esp,0x10
c001b0fb:	90                   	nop
c001b0fc:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001b102:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b105:	74 11                	je     c001b118 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001b107:	83 ec 0c             	sub    esp,0xc
c001b10a:	68 87 31 02 c0       	push   0xc0023187
c001b10f:	e8 c7 64 ff ff       	call   c00115db <KePanic(char const*)>
c001b114:	83 c4 10             	add    esp,0x10
c001b117:	90                   	nop
c001b118:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001b11b:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001b11f:	85 ff                	test   edi,edi
c001b121:	7e 21                	jle    c001b144 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001b123:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001b12a:	31 c0                	xor    eax,eax
c001b12c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b12f:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001b132:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001b135:	01 d5                	add    ebp,edx
c001b137:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001b13a:	83 c0 04             	add    eax,0x4
c001b13d:	39 c1                	cmp    ecx,eax
c001b13f:	75 eb                	jne    c001b12c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001b141:	8d 76 00             	lea    esi,[esi+0x0]
c001b144:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b147:	83 ec 04             	sub    esp,0x4
c001b14a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b14d:	29 f8                	sub    eax,edi
c001b14f:	c1 e0 02             	shl    eax,0x2
c001b152:	50                   	push   eax
c001b153:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b156:	50                   	push   eax
c001b157:	52                   	push   edx
c001b158:	e8 73 52 fe ff       	call   c00003d0 <memmove>
c001b15d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b160:	29 f8                	sub    eax,edi
c001b162:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b165:	83 c4 1c             	add    esp,0x1c
c001b168:	89 f8                	mov    eax,edi
c001b16a:	5b                   	pop    ebx
c001b16b:	5e                   	pop    esi
c001b16c:	5f                   	pop    edi
c001b16d:	5d                   	pop    ebp
c001b16e:	c3                   	ret    
c001b16f:	90                   	nop

c001b170 <PCI::open(int, int, void*)>:
c001b170:	83 ec 18             	sub    esp,0x18
c001b173:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b177:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b17b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b181:	8b 10                	mov    edx,DWORD PTR [eax]
c001b183:	50                   	push   eax
c001b184:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001b187:	31 c0                	xor    eax,eax
c001b189:	83 c4 1c             	add    esp,0x1c
c001b18c:	c3                   	ret    
c001b18d:	90                   	nop

c001b18e <PCI::close(int, int, void*)>:
c001b18e:	31 c0                	xor    eax,eax
c001b190:	c3                   	ret    
c001b191:	90                   	nop

c001b192 <PCI::PCI()>:
c001b192:	83 ec 0c             	sub    esp,0xc
c001b195:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b199:	83 ec 08             	sub    esp,0x8
c001b19c:	68 a3 31 02 c0       	push   0xc00231a3
c001b1a1:	50                   	push   eax
c001b1a2:	e8 c9 11 ff ff       	call   c000c370 <Bus::Bus(char const*)>
c001b1a7:	83 c4 10             	add    esp,0x10
c001b1aa:	ba 4c 32 02 c0       	mov    edx,0xc002324c
c001b1af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1b3:	89 10                	mov    DWORD PTR [eax],edx
c001b1b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1b9:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001b1c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1c7:	a3 a0 d0 02 c0       	mov    ds:0xc002d0a0,eax
c001b1cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1d0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b1d6:	0f b6 d0             	movzx  edx,al
c001b1d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1dd:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001b1e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1e8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b1ee:	0f b6 d0             	movzx  edx,al
c001b1f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1f5:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b1fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1fe:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b204:	8d 50 01             	lea    edx,[eax+0x1]
c001b207:	88 d1                	mov    cl,dl
c001b209:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b20d:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001b213:	0f b6 d0             	movzx  edx,al
c001b216:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b21a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b21e:	83 c9 c0             	or     ecx,0xffffffc0
c001b221:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b225:	90                   	nop
c001b226:	83 c4 0c             	add    esp,0xc
c001b229:	c3                   	ret    

c001b22a <PCI::readBAR8(unsigned int, int)>:
c001b22a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b22e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b232:	f6 c2 01             	test   dl,0x1
c001b235:	74 07                	je     c001b23e <PCI::readBAR8(unsigned int, int)+0x14>
c001b237:	83 e2 fc             	and    edx,0xfffffffc
c001b23a:	01 c2                	add    edx,eax
c001b23c:	ec                   	in     al,dx
c001b23d:	c3                   	ret    
c001b23e:	83 e2 f0             	and    edx,0xfffffff0
c001b241:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001b244:	c3                   	ret    
c001b245:	90                   	nop

c001b246 <PCI::readBAR16(unsigned int, int)>:
c001b246:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b24a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b24e:	f6 c2 01             	test   dl,0x1
c001b251:	74 08                	je     c001b25b <PCI::readBAR16(unsigned int, int)+0x15>
c001b253:	83 e2 fc             	and    edx,0xfffffffc
c001b256:	01 c2                	add    edx,eax
c001b258:	66 ed                	in     ax,dx
c001b25a:	c3                   	ret    
c001b25b:	83 e2 f0             	and    edx,0xfffffff0
c001b25e:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001b262:	c3                   	ret    
c001b263:	90                   	nop

c001b264 <PCI::readBAR32(unsigned int, int)>:
c001b264:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b268:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b26c:	f6 c2 01             	test   dl,0x1
c001b26f:	74 07                	je     c001b278 <PCI::readBAR32(unsigned int, int)+0x14>
c001b271:	83 e2 fc             	and    edx,0xfffffffc
c001b274:	01 c2                	add    edx,eax
c001b276:	ed                   	in     eax,dx
c001b277:	c3                   	ret    
c001b278:	83 e2 f0             	and    edx,0xfffffff0
c001b27b:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001b27e:	c3                   	ret    
c001b27f:	90                   	nop

c001b280 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001b280:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b284:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b288:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b28c:	f6 c2 01             	test   dl,0x1
c001b28f:	74 07                	je     c001b298 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001b291:	83 e2 fc             	and    edx,0xfffffffc
c001b294:	01 ca                	add    edx,ecx
c001b296:	ee                   	out    dx,al
c001b297:	c3                   	ret    
c001b298:	83 e2 f0             	and    edx,0xfffffff0
c001b29b:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001b29e:	c3                   	ret    
c001b29f:	90                   	nop

c001b2a0 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001b2a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b2a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b2a8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b2ac:	f6 c2 01             	test   dl,0x1
c001b2af:	74 08                	je     c001b2b9 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001b2b1:	83 e2 fc             	and    edx,0xfffffffc
c001b2b4:	01 ca                	add    edx,ecx
c001b2b6:	66 ef                	out    dx,ax
c001b2b8:	c3                   	ret    
c001b2b9:	83 e2 f0             	and    edx,0xfffffff0
c001b2bc:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001b2c0:	c3                   	ret    
c001b2c1:	90                   	nop

c001b2c2 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001b2c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b2c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b2ca:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b2ce:	f6 c2 01             	test   dl,0x1
c001b2d1:	74 07                	je     c001b2da <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001b2d3:	83 e2 fc             	and    edx,0xfffffffc
c001b2d6:	01 ca                	add    edx,ecx
c001b2d8:	ef                   	out    dx,eax
c001b2d9:	c3                   	ret    
c001b2da:	83 e2 f0             	and    edx,0xfffffff0
c001b2dd:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001b2e0:	c3                   	ret    
c001b2e1:	90                   	nop

c001b2e2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b2e2:	55                   	push   ebp
c001b2e3:	57                   	push   edi
c001b2e4:	56                   	push   esi
c001b2e5:	53                   	push   ebx
c001b2e6:	83 ec 0c             	sub    esp,0xc
c001b2e9:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001b2ee:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001b2f2:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001b2f6:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b2fa:	83 fe 07             	cmp    esi,0x7
c001b2fd:	76 10                	jbe    c001b30f <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001b2ff:	83 ec 0c             	sub    esp,0xc
c001b302:	68 ab 31 02 c0       	push   0xc00231ab
c001b307:	e8 cf 62 ff ff       	call   c00115db <KePanic(char const*)>
c001b30c:	83 c4 10             	add    esp,0x10
c001b30f:	0f b6 db             	movzx  ebx,bl
c001b312:	83 fb 0f             	cmp    ebx,0xf
c001b315:	76 10                	jbe    c001b327 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001b317:	83 ec 0c             	sub    esp,0xc
c001b31a:	68 db 31 02 c0       	push   0xc00231db
c001b31f:	e8 b7 62 ff ff       	call   c00115db <KePanic(char const*)>
c001b324:	83 c4 10             	add    esp,0x10
c001b327:	8d 04 36             	lea    eax,[esi+esi*1]
c001b32a:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b32f:	83 c8 f0             	or     eax,0xfffffff0
c001b332:	ee                   	out    dx,al
c001b333:	ba fa 0c 00 00       	mov    edx,0xcfa
c001b338:	89 e8                	mov    eax,ebp
c001b33a:	ee                   	out    dx,al
c001b33b:	89 f9                	mov    ecx,edi
c001b33d:	89 d8                	mov    eax,ebx
c001b33f:	0f b6 d9             	movzx  ebx,cl
c001b342:	83 c4 0c             	add    esp,0xc
c001b345:	c1 e0 08             	shl    eax,0x8
c001b348:	83 e3 fc             	and    ebx,0xfffffffc
c001b34b:	09 d8                	or     eax,ebx
c001b34d:	5b                   	pop    ebx
c001b34e:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001b353:	5e                   	pop    esi
c001b354:	5f                   	pop    edi
c001b355:	5d                   	pop    ebp
c001b356:	c3                   	ret    
c001b357:	90                   	nop

c001b358 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b358:	57                   	push   edi
c001b359:	56                   	push   esi
c001b35a:	53                   	push   ebx
c001b35b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b35f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b36b:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001b371:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b375:	83 ff 01             	cmp    edi,0x1
c001b378:	75 3f                	jne    c001b3b9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001b37a:	89 de                	mov    esi,ebx
c001b37c:	0f b6 c0             	movzx  eax,al
c001b37f:	c1 e0 10             	shl    eax,0x10
c001b382:	81 e6 fc 00 00 00    	and    esi,0xfc
c001b388:	0f b6 c9             	movzx  ecx,cl
c001b38b:	09 f0                	or     eax,esi
c001b38d:	c1 e1 08             	shl    ecx,0x8
c001b390:	0f b6 d2             	movzx  edx,dl
c001b393:	c1 e2 0b             	shl    edx,0xb
c001b396:	09 c8                	or     eax,ecx
c001b398:	09 d0                	or     eax,edx
c001b39a:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b39f:	0d 00 00 00 80       	or     eax,0x80000000
c001b3a4:	ef                   	out    dx,eax
c001b3a5:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b3aa:	ed                   	in     eax,dx
c001b3ab:	83 e3 02             	and    ebx,0x2
c001b3ae:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b3b5:	d3 e8                	shr    eax,cl
c001b3b7:	eb 44                	jmp    c001b3fd <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b3b9:	83 ff 02             	cmp    edi,0x2
c001b3bc:	75 2d                	jne    c001b3eb <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001b3be:	83 ec 0c             	sub    esp,0xc
c001b3c1:	0f b6 fb             	movzx  edi,bl
c001b3c4:	57                   	push   edi
c001b3c5:	0f b6 c9             	movzx  ecx,cl
c001b3c8:	51                   	push   ecx
c001b3c9:	0f b6 d2             	movzx  edx,dl
c001b3cc:	52                   	push   edx
c001b3cd:	0f b6 c0             	movzx  eax,al
c001b3d0:	50                   	push   eax
c001b3d1:	56                   	push   esi
c001b3d2:	e8 0b ff ff ff       	call   c001b2e2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b3d7:	89 c2                	mov    edx,eax
c001b3d9:	ed                   	in     eax,dx
c001b3da:	83 e3 02             	and    ebx,0x2
c001b3dd:	83 c4 20             	add    esp,0x20
c001b3e0:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b3e7:	d3 e8                	shr    eax,cl
c001b3e9:	eb 12                	jmp    c001b3fd <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b3eb:	83 ec 0c             	sub    esp,0xc
c001b3ee:	68 0b 32 02 c0       	push   0xc002320b
c001b3f3:	e8 e3 61 ff ff       	call   c00115db <KePanic(char const*)>
c001b3f8:	83 c4 10             	add    esp,0x10
c001b3fb:	31 c0                	xor    eax,eax
c001b3fd:	5b                   	pop    ebx
c001b3fe:	5e                   	pop    esi
c001b3ff:	5f                   	pop    edi
c001b400:	c3                   	ret    
c001b401:	90                   	nop

c001b402 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b402:	83 ec 18             	sub    esp,0x18
c001b405:	6a 00                	push   0x0
c001b407:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b40c:	50                   	push   eax
c001b40d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b412:	50                   	push   eax
c001b413:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b418:	50                   	push   eax
c001b419:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b41d:	e8 36 ff ff ff       	call   c001b358 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b422:	83 c4 2c             	add    esp,0x2c
c001b425:	c3                   	ret    

c001b426 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b426:	83 ec 18             	sub    esp,0x18
c001b429:	6a 0e                	push   0xe
c001b42b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b430:	50                   	push   eax
c001b431:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b436:	50                   	push   eax
c001b437:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b43c:	50                   	push   eax
c001b43d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b441:	e8 12 ff ff ff       	call   c001b358 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b446:	83 c4 2c             	add    esp,0x2c
c001b449:	0f b6 c0             	movzx  eax,al
c001b44c:	c3                   	ret    
c001b44d:	90                   	nop

c001b44e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b44e:	55                   	push   ebp
c001b44f:	57                   	push   edi
c001b450:	56                   	push   esi
c001b451:	53                   	push   ebx
c001b452:	83 ec 18             	sub    esp,0x18
c001b455:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001b45a:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001b45f:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001b464:	6a 0a                	push   0xa
c001b466:	56                   	push   esi
c001b467:	55                   	push   ebp
c001b468:	57                   	push   edi
c001b469:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b46d:	e8 e6 fe ff ff       	call   c001b358 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b472:	83 c4 14             	add    esp,0x14
c001b475:	6a 0a                	push   0xa
c001b477:	56                   	push   esi
c001b478:	55                   	push   ebp
c001b479:	57                   	push   edi
c001b47a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b47e:	89 c3                	mov    ebx,eax
c001b480:	0f b6 db             	movzx  ebx,bl
c001b483:	e8 d0 fe ff ff       	call   c001b358 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b488:	83 c4 2c             	add    esp,0x2c
c001b48b:	25 00 ff 00 00       	and    eax,0xff00
c001b490:	09 d8                	or     eax,ebx
c001b492:	5b                   	pop    ebx
c001b493:	5e                   	pop    esi
c001b494:	5f                   	pop    edi
c001b495:	5d                   	pop    ebp
c001b496:	c3                   	ret    
c001b497:	90                   	nop

c001b498 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b498:	83 ec 18             	sub    esp,0x18
c001b49b:	6a 08                	push   0x8
c001b49d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4a2:	50                   	push   eax
c001b4a3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4a8:	50                   	push   eax
c001b4a9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4ae:	50                   	push   eax
c001b4af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4b3:	e8 a0 fe ff ff       	call   c001b358 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4b8:	83 c4 2c             	add    esp,0x2c
c001b4bb:	0f b6 c4             	movzx  eax,ah
c001b4be:	c3                   	ret    
c001b4bf:	90                   	nop

c001b4c0 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b4c0:	83 ec 18             	sub    esp,0x18
c001b4c3:	6a 08                	push   0x8
c001b4c5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4ca:	50                   	push   eax
c001b4cb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4d0:	50                   	push   eax
c001b4d1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4d6:	50                   	push   eax
c001b4d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4db:	e8 78 fe ff ff       	call   c001b358 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4e0:	83 c4 2c             	add    esp,0x2c
c001b4e3:	c3                   	ret    

c001b4e4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b4e4:	83 ec 18             	sub    esp,0x18
c001b4e7:	6a 3c                	push   0x3c
c001b4e9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4ee:	50                   	push   eax
c001b4ef:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4f4:	50                   	push   eax
c001b4f5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4fa:	50                   	push   eax
c001b4fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4ff:	e8 54 fe ff ff       	call   c001b358 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b504:	83 c4 2c             	add    esp,0x2c
c001b507:	c3                   	ret    

c001b508 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b508:	83 ec 18             	sub    esp,0x18
c001b50b:	6a 18                	push   0x18
c001b50d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b512:	50                   	push   eax
c001b513:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b518:	50                   	push   eax
c001b519:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b51e:	50                   	push   eax
c001b51f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b523:	e8 30 fe ff ff       	call   c001b358 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b528:	83 c4 2c             	add    esp,0x2c
c001b52b:	0f b6 c4             	movzx  eax,ah
c001b52e:	c3                   	ret    
c001b52f:	90                   	nop

c001b530 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b530:	55                   	push   ebp
c001b531:	57                   	push   edi
c001b532:	56                   	push   esi
c001b533:	53                   	push   ebx
c001b534:	83 ec 28             	sub    esp,0x28
c001b537:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b53b:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001b540:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001b545:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001b54a:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b551:	8d 43 12             	lea    eax,[ebx+0x12]
c001b554:	83 c3 10             	add    ebx,0x10
c001b557:	0f b6 c0             	movzx  eax,al
c001b55a:	0f b6 db             	movzx  ebx,bl
c001b55d:	50                   	push   eax
c001b55e:	51                   	push   ecx
c001b55f:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001b563:	57                   	push   edi
c001b564:	55                   	push   ebp
c001b565:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b569:	e8 ea fd ff ff       	call   c001b358 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b56e:	83 c4 14             	add    esp,0x14
c001b571:	53                   	push   ebx
c001b572:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b576:	51                   	push   ecx
c001b577:	89 c6                	mov    esi,eax
c001b579:	57                   	push   edi
c001b57a:	55                   	push   ebp
c001b57b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b57f:	c1 e6 10             	shl    esi,0x10
c001b582:	e8 d1 fd ff ff       	call   c001b358 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b587:	83 c4 3c             	add    esp,0x3c
c001b58a:	5b                   	pop    ebx
c001b58b:	0f b7 c0             	movzx  eax,ax
c001b58e:	09 f0                	or     eax,esi
c001b590:	5e                   	pop    esi
c001b591:	5f                   	pop    edi
c001b592:	5d                   	pop    ebp
c001b593:	c3                   	ret    

c001b594 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b594:	55                   	push   ebp
c001b595:	57                   	push   edi
c001b596:	56                   	push   esi
c001b597:	53                   	push   ebx
c001b598:	83 ec 0c             	sub    esp,0xc
c001b59b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b59f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b5a3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b5a7:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001b5ab:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001b5b1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b5b5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b5b9:	83 f9 01             	cmp    ecx,0x1
c001b5bc:	75 5d                	jne    c001b61b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001b5be:	0f b6 c8             	movzx  ecx,al
c001b5c1:	89 f0                	mov    eax,esi
c001b5c3:	25 fc 00 00 00       	and    eax,0xfc
c001b5c8:	0f b6 d2             	movzx  edx,dl
c001b5cb:	c1 e1 10             	shl    ecx,0x10
c001b5ce:	c1 e2 0b             	shl    edx,0xb
c001b5d1:	09 c1                	or     ecx,eax
c001b5d3:	89 f8                	mov    eax,edi
c001b5d5:	0f b6 f8             	movzx  edi,al
c001b5d8:	c1 e7 08             	shl    edi,0x8
c001b5db:	09 f9                	or     ecx,edi
c001b5dd:	09 d1                	or     ecx,edx
c001b5df:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b5e4:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b5ea:	89 c8                	mov    eax,ecx
c001b5ec:	ef                   	out    dx,eax
c001b5ed:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b5f2:	ed                   	in     eax,dx
c001b5f3:	83 e6 02             	and    esi,0x2
c001b5f6:	0f b7 db             	movzx  ebx,bx
c001b5f9:	74 0a                	je     c001b605 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001b5fb:	c1 e3 10             	shl    ebx,0x10
c001b5fe:	0f b7 d0             	movzx  edx,ax
c001b601:	09 d3                	or     ebx,edx
c001b603:	eb 05                	jmp    c001b60a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001b605:	66 31 c0             	xor    ax,ax
c001b608:	09 c3                	or     ebx,eax
c001b60a:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b60f:	89 c8                	mov    eax,ecx
c001b611:	ef                   	out    dx,eax
c001b612:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b617:	89 d8                	mov    eax,ebx
c001b619:	eb 41                	jmp    c001b65c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b61b:	83 f9 02             	cmp    ecx,0x2
c001b61e:	75 45                	jne    c001b665 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001b620:	89 f1                	mov    ecx,esi
c001b622:	83 ec 0c             	sub    esp,0xc
c001b625:	0f b6 f1             	movzx  esi,cl
c001b628:	89 f9                	mov    ecx,edi
c001b62a:	56                   	push   esi
c001b62b:	0f b6 f9             	movzx  edi,cl
c001b62e:	57                   	push   edi
c001b62f:	0f b6 d2             	movzx  edx,dl
c001b632:	52                   	push   edx
c001b633:	0f b6 c0             	movzx  eax,al
c001b636:	50                   	push   eax
c001b637:	55                   	push   ebp
c001b638:	e8 a5 fc ff ff       	call   c001b2e2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b63d:	89 c2                	mov    edx,eax
c001b63f:	ed                   	in     eax,dx
c001b640:	83 c4 20             	add    esp,0x20
c001b643:	f6 c2 02             	test   dl,0x2
c001b646:	0f b7 db             	movzx  ebx,bx
c001b649:	74 0c                	je     c001b657 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001b64b:	0f b7 c8             	movzx  ecx,ax
c001b64e:	89 d8                	mov    eax,ebx
c001b650:	c1 e0 10             	shl    eax,0x10
c001b653:	09 c8                	or     eax,ecx
c001b655:	eb 05                	jmp    c001b65c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b657:	66 31 c0             	xor    ax,ax
c001b65a:	09 d8                	or     eax,ebx
c001b65c:	ef                   	out    dx,eax
c001b65d:	83 c4 0c             	add    esp,0xc
c001b660:	5b                   	pop    ebx
c001b661:	5e                   	pop    esi
c001b662:	5f                   	pop    edi
c001b663:	5d                   	pop    ebp
c001b664:	c3                   	ret    
c001b665:	c7 44 24 20 0b 32 02 c0 	mov    DWORD PTR [esp+0x20],0xc002320b
c001b66d:	83 c4 0c             	add    esp,0xc
c001b670:	5b                   	pop    ebx
c001b671:	5e                   	pop    esi
c001b672:	5f                   	pop    edi
c001b673:	5d                   	pop    ebp
c001b674:	e9 62 5f ff ff       	jmp    c00115db <KePanic(char const*)>
c001b679:	90                   	nop

c001b67a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b67a:	55                   	push   ebp
c001b67b:	57                   	push   edi
c001b67c:	56                   	push   esi
c001b67d:	53                   	push   ebx
c001b67e:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b684:	80 3d ac d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0ac,0x0
c001b68b:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001b692:	0f 85 bd 00 00 00    	jne    c001b755 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b698:	83 ec 0c             	sub    esp,0xc
c001b69b:	68 14 01 00 00       	push   0x114
c001b6a0:	e8 2e c4 fe ff       	call   c0007ad3 <malloc>
c001b6a5:	83 c4 0c             	add    esp,0xc
c001b6a8:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001b6ae:	68 11 32 02 c0       	push   0xc0023211
c001b6b3:	50                   	push   eax
c001b6b4:	89 c3                	mov    ebx,eax
c001b6b6:	e8 db 04 ff ff       	call   c000bb96 <File::File(char const*, Process*)>
c001b6bb:	83 c4 10             	add    esp,0x10
c001b6be:	85 db                	test   ebx,ebx
c001b6c0:	0f 84 6b 02 00 00    	je     c001b931 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b6c6:	57                   	push   edi
c001b6c7:	57                   	push   edi
c001b6c8:	6a 01                	push   0x1
c001b6ca:	53                   	push   ebx
c001b6cb:	e8 e4 04 ff ff       	call   c000bbb4 <File::open(FileOpenMode)>
c001b6d0:	83 c4 10             	add    esp,0x10
c001b6d3:	85 c0                	test   eax,eax
c001b6d5:	0f 85 56 02 00 00    	jne    c001b931 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b6db:	52                   	push   edx
c001b6dc:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b6e0:	50                   	push   eax
c001b6e1:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b6e5:	50                   	push   eax
c001b6e6:	53                   	push   ebx
c001b6e7:	e8 ca 07 ff ff       	call   c000beb6 <File::stat(unsigned long long*, bool*)>
c001b6ec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b6f0:	40                   	inc    eax
c001b6f1:	89 04 24             	mov    DWORD PTR [esp],eax
c001b6f4:	e8 da c3 fe ff       	call   c0007ad3 <malloc>
c001b6f9:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b6fd:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b701:	59                   	pop    ecx
c001b702:	a3 a8 d0 02 c0       	mov    ds:0xc002d0a8,eax
c001b707:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b709:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b70d:	51                   	push   ecx
c001b70e:	50                   	push   eax
c001b70f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b713:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b717:	53                   	push   ebx
c001b718:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b71b:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b71f:	83 c4 20             	add    esp,0x20
c001b722:	89 c8                	mov    eax,ecx
c001b724:	99                   	cdq    
c001b725:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b729:	0f 85 02 02 00 00    	jne    c001b931 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b72f:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b733:	0f 85 f8 01 00 00    	jne    c001b931 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b739:	83 ec 0c             	sub    esp,0xc
c001b73c:	53                   	push   ebx
c001b73d:	e8 d0 04 ff ff       	call   c000bc12 <File::close()>
c001b742:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b746:	83 c4 10             	add    esp,0x10
c001b749:	c6 05 ac d0 02 c0 01 	mov    BYTE PTR ds:0xc002d0ac,0x1
c001b750:	a3 a4 d0 02 c0       	mov    ds:0xc002d0a4,eax
c001b755:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b75d:	31 c9                	xor    ecx,ecx
c001b75f:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001b766:	8b 2d a4 d0 02 c0    	mov    ebp,DWORD PTR ds:0xc002d0a4
c001b76c:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b773:	8b 15 a8 d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d0a8
c001b779:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b77e:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b786:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b78b:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b793:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b797:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b79f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b7a3:	39 cd                	cmp    ebp,ecx
c001b7a5:	0f 8e 86 01 00 00    	jle    c001b931 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b7ab:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001b7ae:	d4 40                	aam    0x40
c001b7b0:	d5 39                	aad    0x39
c001b7b2:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b7b6:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001b7ba:	d4 40                	aam    0x40
c001b7bc:	d5 39                	aad    0x39
c001b7be:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b7c2:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001b7c6:	d4 40                	aam    0x40
c001b7c8:	d5 39                	aad    0x39
c001b7ca:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b7ce:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001b7d2:	d4 40                	aam    0x40
c001b7d4:	d5 39                	aad    0x39
c001b7d6:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b7da:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001b7de:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b7e2:	3c 56                	cmp    al,0x56
c001b7e4:	74 47                	je     c001b82d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001b7e6:	d4 40                	aam    0x40
c001b7e8:	d5 39                	aad    0x39
c001b7ea:	8d 58 d0             	lea    ebx,[eax-0x30]
c001b7ed:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001b7f1:	0f b6 db             	movzx  ebx,bl
c001b7f4:	c1 e3 04             	shl    ebx,0x4
c001b7f7:	d4 40                	aam    0x40
c001b7f9:	d5 39                	aad    0x39
c001b7fb:	83 e8 30             	sub    eax,0x30
c001b7fe:	0f b6 c0             	movzx  eax,al
c001b801:	09 c3                	or     ebx,eax
c001b803:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001b807:	c1 e3 04             	shl    ebx,0x4
c001b80a:	d4 40                	aam    0x40
c001b80c:	d5 39                	aad    0x39
c001b80e:	83 e8 30             	sub    eax,0x30
c001b811:	0f b6 c0             	movzx  eax,al
c001b814:	09 c3                	or     ebx,eax
c001b816:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001b81a:	c1 e3 04             	shl    ebx,0x4
c001b81d:	d4 40                	aam    0x40
c001b81f:	d5 39                	aad    0x39
c001b821:	83 e8 30             	sub    eax,0x30
c001b824:	0f b6 c0             	movzx  eax,al
c001b827:	09 c3                	or     ebx,eax
c001b829:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001b82d:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001b831:	80 fb 58             	cmp    bl,0x58
c001b834:	74 49                	je     c001b87f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001b836:	88 d8                	mov    al,bl
c001b838:	d4 40                	aam    0x40
c001b83a:	d5 39                	aad    0x39
c001b83c:	83 e8 30             	sub    eax,0x30
c001b83f:	0f b6 f8             	movzx  edi,al
c001b842:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001b846:	c1 e7 04             	shl    edi,0x4
c001b849:	d4 40                	aam    0x40
c001b84b:	d5 39                	aad    0x39
c001b84d:	83 e8 30             	sub    eax,0x30
c001b850:	0f b6 c0             	movzx  eax,al
c001b853:	09 c7                	or     edi,eax
c001b855:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001b859:	c1 e7 04             	shl    edi,0x4
c001b85c:	d4 40                	aam    0x40
c001b85e:	d5 39                	aad    0x39
c001b860:	83 e8 30             	sub    eax,0x30
c001b863:	0f b6 c0             	movzx  eax,al
c001b866:	09 c7                	or     edi,eax
c001b868:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001b86c:	c1 e7 04             	shl    edi,0x4
c001b86f:	d4 40                	aam    0x40
c001b871:	d5 39                	aad    0x39
c001b873:	83 e8 30             	sub    eax,0x30
c001b876:	0f b6 c0             	movzx  eax,al
c001b879:	09 c7                	or     edi,eax
c001b87b:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001b87f:	8d 41 10             	lea    eax,[ecx+0x10]
c001b882:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b886:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001b88a:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b88e:	83 f9 0a             	cmp    ecx,0xa
c001b891:	74 07                	je     c001b89a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001b893:	47                   	inc    edi
c001b894:	39 c5                	cmp    ebp,eax
c001b896:	75 16                	jne    c001b8ae <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001b898:	89 e8                	mov    eax,ebp
c001b89a:	83 f9 0a             	cmp    ecx,0xa
c001b89d:	0f 94 c1             	sete   cl
c001b8a0:	0f b6 c9             	movzx  ecx,cl
c001b8a3:	01 c1                	add    ecx,eax
c001b8a5:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b8aa:	75 0f                	jne    c001b8bb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001b8ac:	eb 1c                	jmp    c001b8ca <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001b8ae:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b8b1:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001b8b5:	40                   	inc    eax
c001b8b6:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001b8b9:	eb cb                	jmp    c001b886 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001b8bb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b8bf:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b8c4:	0f 85 d9 fe ff ff    	jne    c001b7a3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b8ca:	80 fb 58             	cmp    bl,0x58
c001b8cd:	74 10                	je     c001b8df <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001b8cf:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b8d4:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001b8d9:	0f 85 c4 fe ff ff    	jne    c001b7a3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b8df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b8e3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b8e7:	83 e8 30             	sub    eax,0x30
c001b8ea:	c1 e0 04             	shl    eax,0x4
c001b8ed:	83 eb 30             	sub    ebx,0x30
c001b8f0:	09 d8                	or     eax,ebx
c001b8f2:	0f b6 c0             	movzx  eax,al
c001b8f5:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b8f9:	0f 85 a4 fe ff ff    	jne    c001b7a3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b8ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b903:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b907:	83 e8 30             	sub    eax,0x30
c001b90a:	c1 e0 04             	shl    eax,0x4
c001b90d:	83 eb 30             	sub    ebx,0x30
c001b910:	09 d8                	or     eax,ebx
c001b912:	0f b6 c0             	movzx  eax,al
c001b915:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b919:	0f 85 84 fe ff ff    	jne    c001b7a3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b91f:	50                   	push   eax
c001b920:	50                   	push   eax
c001b921:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b925:	50                   	push   eax
c001b926:	56                   	push   esi
c001b927:	e8 24 4d fe ff       	call   c0000650 <strcpy>
c001b92c:	83 c4 10             	add    esp,0x10
c001b92f:	eb 05                	jmp    c001b936 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001b931:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b934:	31 f6                	xor    esi,esi
c001b936:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b93c:	89 f0                	mov    eax,esi
c001b93e:	5b                   	pop    ebx
c001b93f:	5e                   	pop    esi
c001b940:	5f                   	pop    edi
c001b941:	5d                   	pop    ebp
c001b942:	c3                   	ret    
c001b943:	90                   	nop

c001b944 <PCI::checkBus(unsigned char)>:
c001b944:	56                   	push   esi
c001b945:	53                   	push   ebx
c001b946:	31 db                	xor    ebx,ebx
c001b948:	51                   	push   ecx
c001b949:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b94e:	52                   	push   edx
c001b94f:	53                   	push   ebx
c001b950:	43                   	inc    ebx
c001b951:	56                   	push   esi
c001b952:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b956:	e8 0f 03 00 00       	call   c001bc6a <PCI::checkDevice(unsigned char, unsigned char)>
c001b95b:	83 c4 10             	add    esp,0x10
c001b95e:	83 fb 20             	cmp    ebx,0x20
c001b961:	75 eb                	jne    c001b94e <PCI::checkBus(unsigned char)+0xa>
c001b963:	58                   	pop    eax
c001b964:	5b                   	pop    ebx
c001b965:	5e                   	pop    esi
c001b966:	c3                   	ret    
c001b967:	90                   	nop

c001b968 <PCI::foundDevice(PCIDeviceInfo)>:
c001b968:	55                   	push   ebp
c001b969:	57                   	push   edi
c001b96a:	56                   	push   esi
c001b96b:	53                   	push   ebx
c001b96c:	83 ec 1c             	sub    esp,0x1c
c001b96f:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001b974:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b978:	3d ff ff 00 00       	cmp    eax,0xffff
c001b97d:	0f 84 63 01 00 00    	je     c001bae6 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001b983:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001b988:	66 3d 06 04          	cmp    ax,0x406
c001b98c:	75 2c                	jne    c001b9ba <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001b98e:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b993:	50                   	push   eax
c001b994:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b999:	50                   	push   eax
c001b99a:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b99f:	50                   	push   eax
c001b9a0:	53                   	push   ebx
c001b9a1:	e8 62 fb ff ff       	call   c001b508 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b9a6:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b9aa:	0f b6 c0             	movzx  eax,al
c001b9ad:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b9b1:	83 c4 2c             	add    esp,0x2c
c001b9b4:	5b                   	pop    ebx
c001b9b5:	5e                   	pop    esi
c001b9b6:	5f                   	pop    edi
c001b9b7:	5d                   	pop    ebp
c001b9b8:	eb 8a                	jmp    c001b944 <PCI::checkBus(unsigned char)>
c001b9ba:	0f b6 4c 24 54       	movzx  ecx,BYTE PTR [esp+0x54]
c001b9bf:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001b9c5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001b9c9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b9cd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b9d1:	85 d2                	test   edx,edx
c001b9d3:	74 34                	je     c001ba09 <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c001b9d5:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001b9d8:	85 c9                	test   ecx,ecx
c001b9da:	74 29                	je     c001ba05 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b9dc:	8b a9 18 01 00 00    	mov    ebp,DWORD PTR [ecx+0x118]
c001b9e2:	31 f5                	xor    ebp,esi
c001b9e4:	81 e5 ff 00 ff ff    	and    ebp,0xffff00ff
c001b9ea:	75 19                	jne    c001ba05 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b9ec:	39 b9 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],edi
c001b9f2:	75 11                	jne    c001ba05 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b9f4:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001b9fb:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001b9ff:	0f 84 e1 00 00 00    	je     c001bae6 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001ba05:	8b 12                	mov    edx,DWORD PTR [edx]
c001ba07:	eb c8                	jmp    c001b9d1 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001ba09:	3d 01 06 00 00       	cmp    eax,0x601
c001ba0e:	75 19                	jne    c001ba29 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001ba10:	83 ec 0c             	sub    esp,0xc
c001ba13:	68 64 01 00 00       	push   0x164
c001ba18:	e8 b6 c0 fe ff       	call   c0007ad3 <malloc>
c001ba1d:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba20:	89 c5                	mov    ebp,eax
c001ba22:	e8 ab 0e 00 00       	call   c001c8d2 <SATABus::SATABus()>
c001ba27:	eb 1e                	jmp    c001ba47 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001ba29:	3d 01 01 00 00       	cmp    eax,0x101
c001ba2e:	75 62                	jne    c001ba92 <PCI::foundDevice(PCIDeviceInfo)+0x12a>
c001ba30:	83 ec 0c             	sub    esp,0xc
c001ba33:	68 70 02 00 00       	push   0x270
c001ba38:	e8 96 c0 fe ff       	call   c0007ad3 <malloc>
c001ba3d:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba40:	89 c5                	mov    ebp,eax
c001ba42:	e8 f3 02 00 00       	call   c001bd3a <IDE::IDE()>
c001ba47:	58                   	pop    eax
c001ba48:	5a                   	pop    edx
c001ba49:	55                   	push   ebp
c001ba4a:	53                   	push   ebx
c001ba4b:	e8 c4 0f ff ff       	call   c000ca14 <Device::addChild(Device*)>
c001ba50:	83 ec 1c             	sub    esp,0x1c
c001ba53:	b9 09 00 00 00       	mov    ecx,0x9
c001ba58:	fc                   	cld    
c001ba59:	8d 74 24 60          	lea    esi,[esp+0x60]
c001ba5d:	89 e7                	mov    edi,esp
c001ba5f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ba61:	55                   	push   ebp
c001ba62:	e8 f3 0e ff ff       	call   c000c95a <Device::preOpenPCI(PCIDeviceInfo)>
c001ba67:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ba6a:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001ba6e:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001ba76:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001ba7e:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001ba86:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001ba89:	83 c4 4c             	add    esp,0x4c
c001ba8c:	5b                   	pop    ebx
c001ba8d:	5e                   	pop    esi
c001ba8e:	5f                   	pop    edi
c001ba8f:	5d                   	pop    ebp
c001ba90:	ff e0                	jmp    eax
c001ba92:	83 ec 0c             	sub    esp,0xc
c001ba95:	68 58 01 00 00       	push   0x158
c001ba9a:	e8 34 c0 fe ff       	call   c0007ad3 <malloc>
c001ba9f:	5a                   	pop    edx
c001baa0:	59                   	pop    ecx
c001baa1:	68 2a 32 02 c0       	push   0xc002322a
c001baa6:	50                   	push   eax
c001baa7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001baab:	e8 02 12 ff ff       	call   c000ccb2 <DriverlessDevice::DriverlessDevice(char const*)>
c001bab0:	5e                   	pop    esi
c001bab1:	5f                   	pop    edi
c001bab2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bab6:	50                   	push   eax
c001bab7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001babb:	53                   	push   ebx
c001babc:	e8 53 0f ff ff       	call   c000ca14 <Device::addChild(Device*)>
c001bac1:	83 c4 10             	add    esp,0x10
c001bac4:	b9 09 00 00 00       	mov    ecx,0x9
c001bac9:	fc                   	cld    
c001baca:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001bace:	89 fe                	mov    esi,edi
c001bad0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bad2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bad6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bada:	83 c4 1c             	add    esp,0x1c
c001badd:	5b                   	pop    ebx
c001bade:	5e                   	pop    esi
c001badf:	5f                   	pop    edi
c001bae0:	5d                   	pop    ebp
c001bae1:	e9 74 0e ff ff       	jmp    c000c95a <Device::preOpenPCI(PCIDeviceInfo)>
c001bae6:	83 c4 1c             	add    esp,0x1c
c001bae9:	5b                   	pop    ebx
c001baea:	5e                   	pop    esi
c001baeb:	5f                   	pop    edi
c001baec:	5d                   	pop    ebp
c001baed:	c3                   	ret    

c001baee <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001baee:	55                   	push   ebp
c001baef:	57                   	push   edi
c001baf0:	56                   	push   esi
c001baf1:	53                   	push   ebx
c001baf2:	83 ec 68             	sub    esp,0x68
c001baf5:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001bafc:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001bb00:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bb04:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001bb0b:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001bb10:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bb14:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001bb1b:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001bb20:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bb24:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001bb29:	6a 0c                	push   0xc
c001bb2b:	57                   	push   edi
c001bb2c:	53                   	push   ebx
c001bb2d:	56                   	push   esi
c001bb2e:	55                   	push   ebp
c001bb2f:	e8 24 f8 ff ff       	call   c001b358 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bb34:	83 c4 20             	add    esp,0x20
c001bb37:	57                   	push   edi
c001bb38:	53                   	push   ebx
c001bb39:	56                   	push   esi
c001bb3a:	55                   	push   ebp
c001bb3b:	e8 0e f9 ff ff       	call   c001b44e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001bb40:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001bb45:	57                   	push   edi
c001bb46:	53                   	push   ebx
c001bb47:	56                   	push   esi
c001bb48:	55                   	push   ebp
c001bb49:	e8 96 f9 ff ff       	call   c001b4e4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001bb4e:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001bb52:	83 c4 14             	add    esp,0x14
c001bb55:	6a 3c                	push   0x3c
c001bb57:	57                   	push   edi
c001bb58:	53                   	push   ebx
c001bb59:	56                   	push   esi
c001bb5a:	55                   	push   ebp
c001bb5b:	e8 f8 f7 ff ff       	call   c001b358 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bb60:	0f b6 c4             	movzx  eax,ah
c001bb63:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bb67:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001bb6b:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001bb6f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001bb74:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001bb7a:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001bb80:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bb84:	83 c4 20             	add    esp,0x20
c001bb87:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001bb8c:	74 30                	je     c001bbbe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bb8e:	31 c0                	xor    eax,eax
c001bb90:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001bb94:	7e 28                	jle    c001bbbe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bb96:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001bb9e:	39 cb                	cmp    ebx,ecx
c001bba0:	75 19                	jne    c001bbbb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bba2:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001bbaa:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001bbae:	75 0b                	jne    c001bbbb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bbb0:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001bbb7:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001bbbb:	40                   	inc    eax
c001bbbc:	eb d2                	jmp    c001bb90 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001bbbe:	31 d2                	xor    edx,edx
c001bbc0:	83 ec 0c             	sub    esp,0xc
c001bbc3:	57                   	push   edi
c001bbc4:	53                   	push   ebx
c001bbc5:	56                   	push   esi
c001bbc6:	52                   	push   edx
c001bbc7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001bbcb:	55                   	push   ebp
c001bbcc:	e8 5f f9 ff ff       	call   c001b530 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bbd1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bbd5:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001bbd9:	42                   	inc    edx
c001bbda:	83 c4 20             	add    esp,0x20
c001bbdd:	83 fa 06             	cmp    edx,0x6
c001bbe0:	75 de                	jne    c001bbc0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001bbe2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bbe6:	83 ec 0c             	sub    esp,0xc
c001bbe9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bbed:	c1 e2 08             	shl    edx,0x8
c001bbf0:	0f b6 c4             	movzx  eax,ah
c001bbf3:	09 d0                	or     eax,edx
c001bbf5:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001bbfa:	6a 02                	push   0x2
c001bbfc:	57                   	push   edi
c001bbfd:	53                   	push   ebx
c001bbfe:	56                   	push   esi
c001bbff:	55                   	push   ebp
c001bc00:	e8 53 f7 ff ff       	call   c001b358 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc05:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001bc0a:	83 c4 20             	add    esp,0x20
c001bc0d:	57                   	push   edi
c001bc0e:	53                   	push   ebx
c001bc0f:	56                   	push   esi
c001bc10:	55                   	push   ebp
c001bc11:	e8 82 f8 ff ff       	call   c001b498 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001bc16:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001bc1a:	57                   	push   edi
c001bc1b:	53                   	push   ebx
c001bc1c:	56                   	push   esi
c001bc1d:	55                   	push   ebp
c001bc1e:	e8 df f7 ff ff       	call   c001b402 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bc23:	b9 09 00 00 00       	mov    ecx,0x9
c001bc28:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001bc2d:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001bc31:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001bc35:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001bc39:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001bc3d:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001bc41:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001bc45:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001bc49:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001bc4d:	83 ec 0c             	sub    esp,0xc
c001bc50:	fc                   	cld    
c001bc51:	8d 74 24 58          	lea    esi,[esp+0x58]
c001bc55:	89 e7                	mov    edi,esp
c001bc57:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bc59:	55                   	push   ebp
c001bc5a:	e8 09 fd ff ff       	call   c001b968 <PCI::foundDevice(PCIDeviceInfo)>
c001bc5f:	81 c4 8c 00 00 00    	add    esp,0x8c
c001bc65:	5b                   	pop    ebx
c001bc66:	5e                   	pop    esi
c001bc67:	5f                   	pop    edi
c001bc68:	5d                   	pop    ebp
c001bc69:	c3                   	ret    

c001bc6a <PCI::checkDevice(unsigned char, unsigned char)>:
c001bc6a:	55                   	push   ebp
c001bc6b:	57                   	push   edi
c001bc6c:	56                   	push   esi
c001bc6d:	53                   	push   ebx
c001bc6e:	83 ec 0c             	sub    esp,0xc
c001bc71:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001bc76:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001bc7b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001bc7f:	6a 00                	push   0x0
c001bc81:	56                   	push   esi
c001bc82:	57                   	push   edi
c001bc83:	55                   	push   ebp
c001bc84:	e8 79 f7 ff ff       	call   c001b402 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bc89:	6a 00                	push   0x0
c001bc8b:	56                   	push   esi
c001bc8c:	57                   	push   edi
c001bc8d:	55                   	push   ebp
c001bc8e:	e8 5b fe ff ff       	call   c001baee <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bc93:	83 c4 20             	add    esp,0x20
c001bc96:	6a 00                	push   0x0
c001bc98:	56                   	push   esi
c001bc99:	57                   	push   edi
c001bc9a:	55                   	push   ebp
c001bc9b:	e8 86 f7 ff ff       	call   c001b426 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bca0:	83 c4 10             	add    esp,0x10
c001bca3:	a8 80                	test   al,0x80
c001bca5:	74 2d                	je     c001bcd4 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001bca7:	bb 01 00 00 00       	mov    ebx,0x1
c001bcac:	53                   	push   ebx
c001bcad:	56                   	push   esi
c001bcae:	57                   	push   edi
c001bcaf:	55                   	push   ebp
c001bcb0:	e8 4d f7 ff ff       	call   c001b402 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bcb5:	83 c4 10             	add    esp,0x10
c001bcb8:	0f b7 c0             	movzx  eax,ax
c001bcbb:	3d ff ff 00 00       	cmp    eax,0xffff
c001bcc0:	74 0c                	je     c001bcce <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001bcc2:	53                   	push   ebx
c001bcc3:	56                   	push   esi
c001bcc4:	57                   	push   edi
c001bcc5:	55                   	push   ebp
c001bcc6:	e8 23 fe ff ff       	call   c001baee <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bccb:	83 c4 10             	add    esp,0x10
c001bcce:	43                   	inc    ebx
c001bccf:	83 fb 08             	cmp    ebx,0x8
c001bcd2:	75 d8                	jne    c001bcac <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001bcd4:	83 c4 0c             	add    esp,0xc
c001bcd7:	5b                   	pop    ebx
c001bcd8:	5e                   	pop    esi
c001bcd9:	5f                   	pop    edi
c001bcda:	5d                   	pop    ebp
c001bcdb:	c3                   	ret    

c001bcdc <PCI::detect()>:
c001bcdc:	56                   	push   esi
c001bcdd:	53                   	push   ebx
c001bcde:	53                   	push   ebx
c001bcdf:	31 db                	xor    ebx,ebx
c001bce1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bce5:	6a 00                	push   0x0
c001bce7:	6a 00                	push   0x0
c001bce9:	6a 00                	push   0x0
c001bceb:	56                   	push   esi
c001bcec:	e8 35 f7 ff ff       	call   c001b426 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bcf1:	83 c4 10             	add    esp,0x10
c001bcf4:	a8 80                	test   al,0x80
c001bcf6:	75 21                	jne    c001bd19 <PCI::detect()+0x3d>
c001bcf8:	51                   	push   ecx
c001bcf9:	51                   	push   ecx
c001bcfa:	6a 00                	push   0x0
c001bcfc:	56                   	push   esi
c001bcfd:	e8 42 fc ff ff       	call   c001b944 <PCI::checkBus(unsigned char)>
c001bd02:	83 c4 10             	add    esp,0x10
c001bd05:	eb 2a                	jmp    c001bd31 <PCI::detect()+0x55>
c001bd07:	52                   	push   edx
c001bd08:	52                   	push   edx
c001bd09:	53                   	push   ebx
c001bd0a:	43                   	inc    ebx
c001bd0b:	56                   	push   esi
c001bd0c:	e8 33 fc ff ff       	call   c001b944 <PCI::checkBus(unsigned char)>
c001bd11:	83 c4 10             	add    esp,0x10
c001bd14:	83 fb 08             	cmp    ebx,0x8
c001bd17:	74 18                	je     c001bd31 <PCI::detect()+0x55>
c001bd19:	53                   	push   ebx
c001bd1a:	6a 00                	push   0x0
c001bd1c:	6a 00                	push   0x0
c001bd1e:	56                   	push   esi
c001bd1f:	e8 de f6 ff ff       	call   c001b402 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bd24:	83 c4 10             	add    esp,0x10
c001bd27:	0f b7 c0             	movzx  eax,ax
c001bd2a:	3d ff ff 00 00       	cmp    eax,0xffff
c001bd2f:	74 d6                	je     c001bd07 <PCI::detect()+0x2b>
c001bd31:	58                   	pop    eax
c001bd32:	5b                   	pop    ebx
c001bd33:	5e                   	pop    esi
c001bd34:	c3                   	ret    
c001bd35:	90                   	nop

c001bd36 <IDE::close(int, int, void*)>:
c001bd36:	83 c8 ff             	or     eax,0xffffffff
c001bd39:	c3                   	ret    

c001bd3a <IDE::IDE()>:
c001bd3a:	83 ec 0c             	sub    esp,0xc
c001bd3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd41:	83 ec 08             	sub    esp,0x8
c001bd44:	68 70 32 02 c0       	push   0xc0023270
c001bd49:	50                   	push   eax
c001bd4a:	e8 09 10 ff ff       	call   c000cd58 <HardDiskController::HardDiskController(char const*)>
c001bd4f:	83 c4 10             	add    esp,0x10
c001bd52:	ba 00 33 02 c0       	mov    edx,0xc0023300
c001bd57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd5b:	89 10                	mov    DWORD PTR [eax],edx
c001bd5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd61:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001bd68:	90                   	nop
c001bd69:	83 c4 0c             	add    esp,0xc
c001bd6c:	c3                   	ret    
c001bd6d:	90                   	nop

c001bd6e <IDE::prepareInterrupt(unsigned char)>:
c001bd6e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bd73:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bd77:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001bd7f:	c3                   	ret    

c001bd80 <selectDrive(unsigned char, unsigned char)>:
c001bd80:	c3                   	ret    
c001bd81:	90                   	nop

c001bd82 <IDE::getBase(unsigned char)>:
c001bd82:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001bd87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd8b:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001bd93:	c3                   	ret    

c001bd94 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001bd94:	55                   	push   ebp
c001bd95:	57                   	push   edi
c001bd96:	56                   	push   esi
c001bd97:	53                   	push   ebx
c001bd98:	83 ec 1c             	sub    esp,0x1c
c001bd9b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bd9f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bda3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bda7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bdab:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001bdae:	80 f9 03             	cmp    cl,0x3
c001bdb1:	77 4f                	ja     c001be02 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001bdb3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bdb7:	0f b6 f2             	movzx  esi,dl
c001bdba:	0f b6 db             	movzx  ebx,bl
c001bdbd:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001bdc0:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001bdc5:	80 ca 80             	or     dl,0x80
c001bdc8:	52                   	push   edx
c001bdc9:	6a 0c                	push   0xc
c001bdcb:	56                   	push   esi
c001bdcc:	57                   	push   edi
c001bdcd:	e8 c2 ff ff ff       	call   c001bd94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdd2:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001bdd7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bddb:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001bddf:	ee                   	out    dx,al
c001bde0:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001bde5:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001bde9:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001bded:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bdf5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bdf9:	83 c4 2c             	add    esp,0x2c
c001bdfc:	5b                   	pop    ebx
c001bdfd:	5e                   	pop    esi
c001bdfe:	5f                   	pop    edi
c001bdff:	5d                   	pop    ebp
c001be00:	eb 92                	jmp    c001bd94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be02:	0f b6 cb             	movzx  ecx,bl
c001be05:	83 f9 07             	cmp    ecx,0x7
c001be08:	77 12                	ja     c001be1c <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001be0a:	0f b6 d2             	movzx  edx,dl
c001be0d:	0f b6 db             	movzx  ebx,bl
c001be10:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001be18:	01 da                	add    edx,ebx
c001be1a:	eb 2f                	jmp    c001be4b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001be1c:	83 f9 0d             	cmp    ecx,0xd
c001be1f:	77 13                	ja     c001be34 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001be21:	0f b6 d2             	movzx  edx,dl
c001be24:	0f b6 db             	movzx  ebx,bl
c001be27:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001be2e:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001be32:	eb 17                	jmp    c001be4b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001be34:	83 f9 15             	cmp    ecx,0x15
c001be37:	77 13                	ja     c001be4c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001be39:	0f b6 d2             	movzx  edx,dl
c001be3c:	0f b6 db             	movzx  ebx,bl
c001be3f:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001be47:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001be4b:	ee                   	out    dx,al
c001be4c:	83 c4 1c             	add    esp,0x1c
c001be4f:	5b                   	pop    ebx
c001be50:	5e                   	pop    esi
c001be51:	5f                   	pop    edi
c001be52:	5d                   	pop    ebp
c001be53:	c3                   	ret    

c001be54 <IDE::read(unsigned char, unsigned char)>:
c001be54:	57                   	push   edi
c001be55:	56                   	push   esi
c001be56:	53                   	push   ebx
c001be57:	83 ec 10             	sub    esp,0x10
c001be5a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001be5e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001be62:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001be66:	8d 42 f8             	lea    eax,[edx-0x8]
c001be69:	3c 03                	cmp    al,0x3
c001be6b:	77 48                	ja     c001beb5 <IDE::read(unsigned char, unsigned char)+0x61>
c001be6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001be71:	0f b6 f1             	movzx  esi,cl
c001be74:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001be77:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001be7c:	0c 80                	or     al,0x80
c001be7e:	50                   	push   eax
c001be7f:	6a 0c                	push   0xc
c001be81:	56                   	push   esi
c001be82:	53                   	push   ebx
c001be83:	e8 0c ff ff ff       	call   c001bd94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be88:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001be8c:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001be91:	0f b6 d2             	movzx  edx,dl
c001be94:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001be98:	ec                   	in     al,dx
c001be99:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001be9d:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001bea2:	52                   	push   edx
c001bea3:	6a 0c                	push   0xc
c001bea5:	56                   	push   esi
c001bea6:	53                   	push   ebx
c001bea7:	e8 e8 fe ff ff       	call   c001bd94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001beac:	83 c4 20             	add    esp,0x20
c001beaf:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001beb3:	eb 4c                	jmp    c001bf01 <IDE::read(unsigned char, unsigned char)+0xad>
c001beb5:	0f b6 f2             	movzx  esi,dl
c001beb8:	83 fe 07             	cmp    esi,0x7
c001bebb:	77 12                	ja     c001becf <IDE::read(unsigned char, unsigned char)+0x7b>
c001bebd:	0f b6 c9             	movzx  ecx,cl
c001bec0:	0f b6 d2             	movzx  edx,dl
c001bec3:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001becb:	01 c2                	add    edx,eax
c001becd:	eb 31                	jmp    c001bf00 <IDE::read(unsigned char, unsigned char)+0xac>
c001becf:	83 fe 0d             	cmp    esi,0xd
c001bed2:	77 13                	ja     c001bee7 <IDE::read(unsigned char, unsigned char)+0x93>
c001bed4:	0f b6 c9             	movzx  ecx,cl
c001bed7:	0f b6 d2             	movzx  edx,dl
c001beda:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001bee1:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bee5:	eb 19                	jmp    c001bf00 <IDE::read(unsigned char, unsigned char)+0xac>
c001bee7:	31 c0                	xor    eax,eax
c001bee9:	83 fe 15             	cmp    esi,0x15
c001beec:	77 13                	ja     c001bf01 <IDE::read(unsigned char, unsigned char)+0xad>
c001beee:	0f b6 c9             	movzx  ecx,cl
c001bef1:	0f b6 d2             	movzx  edx,dl
c001bef4:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001befc:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bf00:	ec                   	in     al,dx
c001bf01:	83 c4 10             	add    esp,0x10
c001bf04:	5b                   	pop    ebx
c001bf05:	5e                   	pop    esi
c001bf06:	5f                   	pop    edi
c001bf07:	c3                   	ret    

c001bf08 <IDE::waitInterrupt(unsigned char)>:
c001bf08:	55                   	push   ebp
c001bf09:	57                   	push   edi
c001bf0a:	56                   	push   esi
c001bf0b:	53                   	push   ebx
c001bf0c:	31 db                	xor    ebx,ebx
c001bf0e:	83 ec 0c             	sub    esp,0xc
c001bf11:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bf15:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001bf1a:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001bf22:	89 e8                	mov    eax,ebp
c001bf24:	84 c0                	test   al,al
c001bf26:	75 30                	jne    c001bf58 <IDE::waitInterrupt(unsigned char)+0x50>
c001bf28:	50                   	push   eax
c001bf29:	6a 0c                	push   0xc
c001bf2b:	56                   	push   esi
c001bf2c:	57                   	push   edi
c001bf2d:	e8 22 ff ff ff       	call   c001be54 <IDE::read(unsigned char, unsigned char)>
c001bf32:	83 c4 10             	add    esp,0x10
c001bf35:	a8 01                	test   al,0x1
c001bf37:	75 27                	jne    c001bf60 <IDE::waitInterrupt(unsigned char)+0x58>
c001bf39:	f6 c3 04             	test   bl,0x4
c001bf3c:	75 12                	jne    c001bf50 <IDE::waitInterrupt(unsigned char)+0x48>
c001bf3e:	83 fb 32             	cmp    ebx,0x32
c001bf41:	7e 0d                	jle    c001bf50 <IDE::waitInterrupt(unsigned char)+0x48>
c001bf43:	83 ec 0c             	sub    esp,0xc
c001bf46:	6a 64                	push   0x64
c001bf48:	e8 73 a4 ff ff       	call   c00163c0 <milliTenthSleep(unsigned int)>
c001bf4d:	83 c4 10             	add    esp,0x10
c001bf50:	83 fb 3c             	cmp    ebx,0x3c
c001bf53:	74 0b                	je     c001bf60 <IDE::waitInterrupt(unsigned char)+0x58>
c001bf55:	43                   	inc    ebx
c001bf56:	eb c2                	jmp    c001bf1a <IDE::waitInterrupt(unsigned char)+0x12>
c001bf58:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001bf60:	83 c4 0c             	add    esp,0xc
c001bf63:	89 e8                	mov    eax,ebp
c001bf65:	5b                   	pop    ebx
c001bf66:	5e                   	pop    esi
c001bf67:	5f                   	pop    edi
c001bf68:	5d                   	pop    ebp
c001bf69:	c3                   	ret    

c001bf6a <ideChannel0IRQHandler(regs*, void*)>:
c001bf6a:	83 ec 10             	sub    esp,0x10
c001bf6d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bf71:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001bf78:	6a 07                	push   0x7
c001bf7a:	6a 00                	push   0x0
c001bf7c:	50                   	push   eax
c001bf7d:	e8 d2 fe ff ff       	call   c001be54 <IDE::read(unsigned char, unsigned char)>
c001bf82:	83 c4 1c             	add    esp,0x1c
c001bf85:	c3                   	ret    

c001bf86 <ideChannel1IRQHandler(regs*, void*)>:
c001bf86:	83 ec 10             	sub    esp,0x10
c001bf89:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bf8d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001bf94:	6a 07                	push   0x7
c001bf96:	6a 01                	push   0x1
c001bf98:	50                   	push   eax
c001bf99:	e8 b6 fe ff ff       	call   c001be54 <IDE::read(unsigned char, unsigned char)>
c001bf9e:	83 c4 1c             	add    esp,0x1c
c001bfa1:	c3                   	ret    

c001bfa2 <IDE::enableIRQs(unsigned char, bool)>:
c001bfa2:	57                   	push   edi
c001bfa3:	b8 02 00 00 00       	mov    eax,0x2
c001bfa8:	56                   	push   esi
c001bfa9:	53                   	push   ebx
c001bfaa:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bfaf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bfb3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bfb7:	74 02                	je     c001bfbb <IDE::enableIRQs(unsigned char, bool)+0x19>
c001bfb9:	31 c0                	xor    eax,eax
c001bfbb:	0f b6 db             	movzx  ebx,bl
c001bfbe:	bf 04 00 00 00       	mov    edi,0x4
c001bfc3:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001bfca:	50                   	push   eax
c001bfcb:	6a 0c                	push   0xc
c001bfcd:	53                   	push   ebx
c001bfce:	56                   	push   esi
c001bfcf:	e8 c0 fd ff ff       	call   c001bd94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bfd4:	83 c4 10             	add    esp,0x10
c001bfd7:	50                   	push   eax
c001bfd8:	6a 0c                	push   0xc
c001bfda:	53                   	push   ebx
c001bfdb:	56                   	push   esi
c001bfdc:	e8 73 fe ff ff       	call   c001be54 <IDE::read(unsigned char, unsigned char)>
c001bfe1:	83 c4 10             	add    esp,0x10
c001bfe4:	4f                   	dec    edi
c001bfe5:	75 f0                	jne    c001bfd7 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001bfe7:	5b                   	pop    ebx
c001bfe8:	5e                   	pop    esi
c001bfe9:	5f                   	pop    edi
c001bfea:	c3                   	ret    
c001bfeb:	90                   	nop

c001bfec <IDE::open(int, int, void*)>:
c001bfec:	55                   	push   ebp
c001bfed:	57                   	push   edi
c001bfee:	56                   	push   esi
c001bfef:	53                   	push   ebx
c001bff0:	83 ec 1c             	sub    esp,0x1c
c001bff3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bff7:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001bffe:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001c007:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001c010:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001c017:	0f 85 da 02 00 00    	jne    c001c2f7 <IDE::open(int, int, void*)+0x30b>
c001c01d:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001c023:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001c027:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c02b:	83 e0 7f             	and    eax,0x7f
c001c02e:	83 f8 05             	cmp    eax,0x5
c001c031:	74 05                	je     c001c038 <IDE::open(int, int, void*)+0x4c>
c001c033:	83 f8 0f             	cmp    eax,0xf
c001c036:	75 32                	jne    c001c06a <IDE::open(int, int, void*)+0x7e>
c001c038:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001c03e:	83 e0 fc             	and    eax,0xfffffffc
c001c041:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c048:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001c04e:	83 e0 fc             	and    eax,0xfffffffc
c001c051:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c058:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001c05e:	83 e0 fc             	and    eax,0xfffffffc
c001c061:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c068:	eb 14                	jmp    c001c07e <IDE::open(int, int, void*)+0x92>
c001c06a:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c074:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c07e:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c001c085:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c08a:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001c091:	89 fa                	mov    edx,edi
c001c093:	89 f1                	mov    ecx,esi
c001c095:	c1 e1 10             	shl    ecx,0x10
c001c098:	89 e8                	mov    eax,ebp
c001c09a:	c1 e0 0b             	shl    eax,0xb
c001c09d:	09 c1                	or     ecx,eax
c001c09f:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c0a6:	c1 e0 08             	shl    eax,0x8
c001c0a9:	09 c1                	or     ecx,eax
c001c0ab:	89 c8                	mov    eax,ecx
c001c0ad:	0d 08 00 00 80       	or     eax,0x80000008
c001c0b2:	ef                   	out    dx,eax
c001c0b3:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c0b8:	ed                   	in     eax,dx
c001c0b9:	c1 e8 10             	shr    eax,0x10
c001c0bc:	3d ff ff 00 00       	cmp    eax,0xffff
c001c0c1:	0f 84 f9 00 00 00    	je     c001c1c0 <IDE::open(int, int, void*)+0x1d4>
c001c0c7:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c0cd:	89 fa                	mov    edx,edi
c001c0cf:	89 c8                	mov    eax,ecx
c001c0d1:	ef                   	out    dx,eax
c001c0d2:	b0 fe                	mov    al,0xfe
c001c0d4:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c0d9:	ee                   	out    dx,al
c001c0da:	89 c8                	mov    eax,ecx
c001c0dc:	89 fa                	mov    edx,edi
c001c0de:	ef                   	out    dx,eax
c001c0df:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c0e4:	ed                   	in     eax,dx
c001c0e5:	3c fe                	cmp    al,0xfe
c001c0e7:	0f 85 a4 00 00 00    	jne    c001c191 <IDE::open(int, int, void*)+0x1a5>
c001c0ed:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c001c0f3:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001c0fa:	74 30                	je     c001c12c <IDE::open(int, int, void*)+0x140>
c001c0fc:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001c102:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001c106:	83 ec 0c             	sub    esp,0xc
c001c109:	40                   	inc    eax
c001c10a:	0f b6 c0             	movzx  eax,al
c001c10d:	50                   	push   eax
c001c10e:	55                   	push   ebp
c001c10f:	56                   	push   esi
c001c110:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001c116:	51                   	push   ecx
c001c117:	e8 94 38 ff ff       	call   c000f9b0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001c11c:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001c121:	83 c4 1c             	add    esp,0x1c
c001c124:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c12a:	eb 0a                	jmp    c001c136 <IDE::open(int, int, void*)+0x14a>
c001c12c:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001c136:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c13d:	bd f8 0c 00 00       	mov    ebp,0xcf8
c001c142:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c149:	89 ea                	mov    edx,ebp
c001c14b:	c1 e1 10             	shl    ecx,0x10
c001c14e:	c1 e0 08             	shl    eax,0x8
c001c151:	09 c1                	or     ecx,eax
c001c153:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c15a:	c1 e0 0b             	shl    eax,0xb
c001c15d:	09 c1                	or     ecx,eax
c001c15f:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c165:	89 c8                	mov    eax,ecx
c001c167:	ef                   	out    dx,eax
c001c168:	8b bb 50 01 00 00    	mov    edi,DWORD PTR [ebx+0x150]
c001c16e:	be fc 0c 00 00       	mov    esi,0xcfc
c001c173:	89 f2                	mov    edx,esi
c001c175:	89 f8                	mov    eax,edi
c001c177:	ee                   	out    dx,al
c001c178:	89 c8                	mov    eax,ecx
c001c17a:	89 ea                	mov    edx,ebp
c001c17c:	ef                   	out    dx,eax
c001c17d:	89 f2                	mov    edx,esi
c001c17f:	ed                   	in     eax,dx
c001c180:	0f b6 c0             	movzx  eax,al
c001c183:	39 f8                	cmp    eax,edi
c001c185:	74 49                	je     c001c1d0 <IDE::open(int, int, void*)+0x1e4>
c001c187:	83 ec 0c             	sub    esp,0xc
c001c18a:	68 88 32 02 c0       	push   0xc0023288
c001c18f:	eb 37                	jmp    c001c1c8 <IDE::open(int, int, void*)+0x1dc>
c001c191:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001c19a:	75 1a                	jne    c001c1b6 <IDE::open(int, int, void*)+0x1ca>
c001c19c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001c1a1:	3d 8a 00 00 00       	cmp    eax,0x8a
c001c1a6:	74 05                	je     c001c1ad <IDE::open(int, int, void*)+0x1c1>
c001c1a8:	83 c0 80             	add    eax,0xffffff80
c001c1ab:	75 09                	jne    c001c1b6 <IDE::open(int, int, void*)+0x1ca>
c001c1ad:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c1b4:	eb 1a                	jmp    c001c1d0 <IDE::open(int, int, void*)+0x1e4>
c001c1b6:	83 ec 0c             	sub    esp,0xc
c001c1b9:	68 90 32 02 c0       	push   0xc0023290
c001c1be:	eb 08                	jmp    c001c1c8 <IDE::open(int, int, void*)+0x1dc>
c001c1c0:	83 ec 0c             	sub    esp,0xc
c001c1c3:	68 c1 32 02 c0       	push   0xc00232c1
c001c1c8:	e8 0e 54 ff ff       	call   c00115db <KePanic(char const*)>
c001c1cd:	83 c4 10             	add    esp,0x10
c001c1d0:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001c1d7:	74 1a                	je     c001c1f3 <IDE::open(int, int, void*)+0x207>
c001c1d9:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001c1df:	83 e0 fc             	and    eax,0xfffffffc
c001c1e2:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001c1e9:	83 c0 08             	add    eax,0x8
c001c1ec:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001c1f3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c1f9:	89 c2                	mov    edx,eax
c001c1fb:	83 e2 0f             	and    edx,0xf
c001c1fe:	83 fa 08             	cmp    edx,0x8
c001c201:	75 0a                	jne    c001c20d <IDE::open(int, int, void*)+0x221>
c001c203:	83 e8 02             	sub    eax,0x2
c001c206:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c20d:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001c213:	89 c2                	mov    edx,eax
c001c215:	83 e2 0f             	and    edx,0xf
c001c218:	83 fa 08             	cmp    edx,0x8
c001c21b:	75 0a                	jne    c001c227 <IDE::open(int, int, void*)+0x23b>
c001c21d:	83 e8 02             	sub    eax,0x2
c001c220:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c227:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001c22e:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001c235:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c238:	89 d0                	mov    eax,edx
c001c23a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c23e:	8d 7a 01             	lea    edi,[edx+0x1]
c001c241:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001c245:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c249:	83 e1 3f             	and    ecx,0x3f
c001c24c:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c250:	89 f9                	mov    ecx,edi
c001c252:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001c259:	8d 78 02             	lea    edi,[eax+0x2]
c001c25c:	0f b6 c9             	movzx  ecx,cl
c001c25f:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c262:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001c266:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c26a:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c26e:	83 e2 3f             	and    edx,0x3f
c001c271:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c275:	89 f9                	mov    ecx,edi
c001c277:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c27d:	8d 78 03             	lea    edi,[eax+0x3]
c001c280:	0f b6 d1             	movzx  edx,cl
c001c283:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c286:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001c28a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c28e:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c292:	83 e1 3f             	and    ecx,0x3f
c001c295:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c299:	89 f9                	mov    ecx,edi
c001c29b:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001c2a1:	8d 78 04             	lea    edi,[eax+0x4]
c001c2a4:	0f b6 c9             	movzx  ecx,cl
c001c2a7:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c2aa:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001c2ae:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c2b2:	89 fa                	mov    edx,edi
c001c2b4:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001c2ba:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c2be:	83 e2 3f             	and    edx,0x3f
c001c2c1:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c2c5:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001c2cc:	66 85 f6             	test   si,si
c001c2cf:	74 65                	je     c001c336 <IDE::open(int, int, void*)+0x34a>
c001c2d1:	89 f9                	mov    ecx,edi
c001c2d3:	83 c0 05             	add    eax,0x5
c001c2d6:	0f b6 d1             	movzx  edx,cl
c001c2d9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c2dc:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c2e0:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001c2e4:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001c2ea:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001c2ee:	83 e0 3f             	and    eax,0x3f
c001c2f1:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001c2f5:	eb 3f                	jmp    c001c336 <IDE::open(int, int, void*)+0x34a>
c001c2f7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c2fe:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001c304:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c30b:	05 06 02 00 00       	add    eax,0x206
c001c310:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c317:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001c31e:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c325:	05 06 02 00 00       	add    eax,0x206
c001c32a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c331:	e9 bd fe ff ff       	jmp    c001c1f3 <IDE::open(int, int, void*)+0x207>
c001c336:	50                   	push   eax
c001c337:	50                   	push   eax
c001c338:	6a 00                	push   0x0
c001c33a:	53                   	push   ebx
c001c33b:	e8 2e fa ff ff       	call   c001bd6e <IDE::prepareInterrupt(unsigned char)>
c001c340:	5a                   	pop    edx
c001c341:	59                   	pop    ecx
c001c342:	6a 01                	push   0x1
c001c344:	53                   	push   ebx
c001c345:	e8 24 fa ff ff       	call   c001bd6e <IDE::prepareInterrupt(unsigned char)>
c001c34a:	83 c4 0c             	add    esp,0xc
c001c34d:	6a 00                	push   0x0
c001c34f:	6a 00                	push   0x0
c001c351:	53                   	push   ebx
c001c352:	e8 4b fc ff ff       	call   c001bfa2 <IDE::enableIRQs(unsigned char, bool)>
c001c357:	83 c4 0c             	add    esp,0xc
c001c35a:	6a 00                	push   0x0
c001c35c:	6a 01                	push   0x1
c001c35e:	53                   	push   ebx
c001c35f:	e8 3e fc ff ff       	call   c001bfa2 <IDE::enableIRQs(unsigned char, bool)>
c001c364:	83 c4 10             	add    esp,0x10
c001c367:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c36e:	74 34                	je     c001c3a4 <IDE::open(int, int, void*)+0x3b8>
c001c370:	83 ec 0c             	sub    esp,0xc
c001c373:	53                   	push   ebx
c001c374:	6a 01                	push   0x1
c001c376:	68 6a bf 01 c0       	push   0xc001bf6a
c001c37b:	6a 0e                	push   0xe
c001c37d:	53                   	push   ebx
c001c37e:	e8 3d 06 ff ff       	call   c000c9c0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c383:	83 c4 14             	add    esp,0x14
c001c386:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c38c:	53                   	push   ebx
c001c38d:	6a 01                	push   0x1
c001c38f:	68 86 bf 01 c0       	push   0xc001bf86
c001c394:	6a 0f                	push   0xf
c001c396:	53                   	push   ebx
c001c397:	e8 24 06 ff ff       	call   c000c9c0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c39c:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c3a2:	eb 38                	jmp    c001c3dc <IDE::open(int, int, void*)+0x3f0>
c001c3a4:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c3ae:	83 ec 0c             	sub    esp,0xc
c001c3b1:	53                   	push   ebx
c001c3b2:	6a 00                	push   0x0
c001c3b4:	68 6a bf 01 c0       	push   0xc001bf6a
c001c3b9:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c3bf:	53                   	push   ebx
c001c3c0:	e8 fb 05 ff ff       	call   c000c9c0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c3c5:	83 c4 14             	add    esp,0x14
c001c3c8:	53                   	push   ebx
c001c3c9:	6a 00                	push   0x0
c001c3cb:	68 86 bf 01 c0       	push   0xc001bf86
c001c3d0:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c3d6:	53                   	push   ebx
c001c3d7:	e8 e4 05 ff ff       	call   c000c9c0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c3dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c3de:	83 c4 20             	add    esp,0x20
c001c3e1:	83 ec 0c             	sub    esp,0xc
c001c3e4:	53                   	push   ebx
c001c3e5:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c3e8:	83 c4 0c             	add    esp,0xc
c001c3eb:	6a 07                	push   0x7
c001c3ed:	6a 00                	push   0x0
c001c3ef:	53                   	push   ebx
c001c3f0:	e8 5f fa ff ff       	call   c001be54 <IDE::read(unsigned char, unsigned char)>
c001c3f5:	83 c4 0c             	add    esp,0xc
c001c3f8:	6a 07                	push   0x7
c001c3fa:	6a 01                	push   0x1
c001c3fc:	53                   	push   ebx
c001c3fd:	e8 52 fa ff ff       	call   c001be54 <IDE::read(unsigned char, unsigned char)>
c001c402:	83 c4 0c             	add    esp,0xc
c001c405:	6a 01                	push   0x1
c001c407:	6a 00                	push   0x0
c001c409:	53                   	push   ebx
c001c40a:	e8 93 fb ff ff       	call   c001bfa2 <IDE::enableIRQs(unsigned char, bool)>
c001c40f:	83 c4 0c             	add    esp,0xc
c001c412:	6a 01                	push   0x1
c001c414:	6a 01                	push   0x1
c001c416:	53                   	push   ebx
c001c417:	e8 86 fb ff ff       	call   c001bfa2 <IDE::enableIRQs(unsigned char, bool)>
c001c41c:	83 c4 2c             	add    esp,0x2c
c001c41f:	31 c0                	xor    eax,eax
c001c421:	5b                   	pop    ebx
c001c422:	5e                   	pop    esi
c001c423:	5f                   	pop    edi
c001c424:	5d                   	pop    ebp
c001c425:	c3                   	ret    

c001c426 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c426:	55                   	push   ebp
c001c427:	57                   	push   edi
c001c428:	56                   	push   esi
c001c429:	53                   	push   ebx
c001c42a:	83 ec 1c             	sub    esp,0x1c
c001c42d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001c431:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c435:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c439:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c43d:	8d 42 f8             	lea    eax,[edx-0x8]
c001c440:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c444:	3c 03                	cmp    al,0x3
c001c446:	77 5a                	ja     c001c4a2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001c448:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c44c:	0f b6 db             	movzx  ebx,bl
c001c44f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c453:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c456:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c45b:	0c 80                	or     al,0x80
c001c45d:	50                   	push   eax
c001c45e:	6a 0c                	push   0xc
c001c460:	53                   	push   ebx
c001c461:	56                   	push   esi
c001c462:	e8 2d f9 ff ff       	call   c001bd94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c467:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c46b:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001c470:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c474:	0f b6 d2             	movzx  edx,dl
c001c477:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001c47b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c47d:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c482:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c486:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c48a:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c492:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c496:	83 c4 2c             	add    esp,0x2c
c001c499:	5b                   	pop    ebx
c001c49a:	5e                   	pop    esi
c001c49b:	5f                   	pop    edi
c001c49c:	5d                   	pop    ebp
c001c49d:	e9 f2 f8 ff ff       	jmp    c001bd94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4a2:	0f b6 c2             	movzx  eax,dl
c001c4a5:	83 f8 07             	cmp    eax,0x7
c001c4a8:	77 12                	ja     c001c4bc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001c4aa:	0f b6 db             	movzx  ebx,bl
c001c4ad:	0f b6 c2             	movzx  eax,dl
c001c4b0:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001c4b8:	01 c2                	add    edx,eax
c001c4ba:	eb 2f                	jmp    c001c4eb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c4bc:	83 f8 0d             	cmp    eax,0xd
c001c4bf:	77 13                	ja     c001c4d4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001c4c1:	0f b6 db             	movzx  ebx,bl
c001c4c4:	0f b6 d2             	movzx  edx,dl
c001c4c7:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001c4ce:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c4d2:	eb 17                	jmp    c001c4eb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c4d4:	83 f8 15             	cmp    eax,0x15
c001c4d7:	77 14                	ja     c001c4ed <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001c4d9:	0f b6 db             	movzx  ebx,bl
c001c4dc:	0f b6 d2             	movzx  edx,dl
c001c4df:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001c4e7:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c4eb:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c4ed:	83 c4 1c             	add    esp,0x1c
c001c4f0:	5b                   	pop    ebx
c001c4f1:	5e                   	pop    esi
c001c4f2:	5f                   	pop    edi
c001c4f3:	5d                   	pop    ebp
c001c4f4:	c3                   	ret    
c001c4f5:	90                   	nop

c001c4f6 <IDE::detect()>:
c001c4f6:	55                   	push   ebp
c001c4f7:	57                   	push   edi
c001c4f8:	56                   	push   esi
c001c4f9:	53                   	push   ebx
c001c4fa:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c500:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c507:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c50e:	0f 85 9e 02 00 00    	jne    c001c7b2 <IDE::detect()+0x2bc>
c001c514:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c51b:	31 f6                	xor    esi,esi
c001c51d:	31 ff                	xor    edi,edi
c001c51f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c527:	89 f8                	mov    eax,edi
c001c529:	c1 e0 06             	shl    eax,0x6
c001c52c:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c534:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c538:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c53c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c540:	c1 e0 04             	shl    eax,0x4
c001c543:	83 c8 a0             	or     eax,0xffffffa0
c001c546:	0f b6 c0             	movzx  eax,al
c001c549:	50                   	push   eax
c001c54a:	6a 06                	push   0x6
c001c54c:	56                   	push   esi
c001c54d:	53                   	push   ebx
c001c54e:	e8 41 f8 ff ff       	call   c001bd94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c553:	83 c4 0c             	add    esp,0xc
c001c556:	6a 0c                	push   0xc
c001c558:	56                   	push   esi
c001c559:	53                   	push   ebx
c001c55a:	e8 f5 f8 ff ff       	call   c001be54 <IDE::read(unsigned char, unsigned char)>
c001c55f:	83 c4 0c             	add    esp,0xc
c001c562:	6a 0c                	push   0xc
c001c564:	56                   	push   esi
c001c565:	53                   	push   ebx
c001c566:	e8 e9 f8 ff ff       	call   c001be54 <IDE::read(unsigned char, unsigned char)>
c001c56b:	83 c4 0c             	add    esp,0xc
c001c56e:	6a 0c                	push   0xc
c001c570:	56                   	push   esi
c001c571:	53                   	push   ebx
c001c572:	e8 dd f8 ff ff       	call   c001be54 <IDE::read(unsigned char, unsigned char)>
c001c577:	83 c4 0c             	add    esp,0xc
c001c57a:	6a 0c                	push   0xc
c001c57c:	56                   	push   esi
c001c57d:	53                   	push   ebx
c001c57e:	e8 d1 f8 ff ff       	call   c001be54 <IDE::read(unsigned char, unsigned char)>
c001c583:	68 ec 00 00 00       	push   0xec
c001c588:	6a 07                	push   0x7
c001c58a:	56                   	push   esi
c001c58b:	53                   	push   ebx
c001c58c:	e8 03 f8 ff ff       	call   c001bd94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c591:	83 c4 1c             	add    esp,0x1c
c001c594:	6a 0c                	push   0xc
c001c596:	56                   	push   esi
c001c597:	53                   	push   ebx
c001c598:	e8 b7 f8 ff ff       	call   c001be54 <IDE::read(unsigned char, unsigned char)>
c001c59d:	83 c4 0c             	add    esp,0xc
c001c5a0:	6a 0c                	push   0xc
c001c5a2:	56                   	push   esi
c001c5a3:	53                   	push   ebx
c001c5a4:	e8 ab f8 ff ff       	call   c001be54 <IDE::read(unsigned char, unsigned char)>
c001c5a9:	83 c4 0c             	add    esp,0xc
c001c5ac:	6a 0c                	push   0xc
c001c5ae:	56                   	push   esi
c001c5af:	53                   	push   ebx
c001c5b0:	e8 9f f8 ff ff       	call   c001be54 <IDE::read(unsigned char, unsigned char)>
c001c5b5:	83 c4 0c             	add    esp,0xc
c001c5b8:	6a 0c                	push   0xc
c001c5ba:	56                   	push   esi
c001c5bb:	53                   	push   ebx
c001c5bc:	e8 93 f8 ff ff       	call   c001be54 <IDE::read(unsigned char, unsigned char)>
c001c5c1:	83 c4 0c             	add    esp,0xc
c001c5c4:	6a 0c                	push   0xc
c001c5c6:	56                   	push   esi
c001c5c7:	53                   	push   ebx
c001c5c8:	e8 87 f8 ff ff       	call   c001be54 <IDE::read(unsigned char, unsigned char)>
c001c5cd:	83 c4 10             	add    esp,0x10
c001c5d0:	84 c0                	test   al,al
c001c5d2:	0f 84 61 01 00 00    	je     c001c739 <IDE::detect()+0x243>
c001c5d8:	31 ed                	xor    ebp,ebp
c001c5da:	50                   	push   eax
c001c5db:	6a 0c                	push   0xc
c001c5dd:	56                   	push   esi
c001c5de:	53                   	push   ebx
c001c5df:	e8 70 f8 ff ff       	call   c001be54 <IDE::read(unsigned char, unsigned char)>
c001c5e4:	83 c4 10             	add    esp,0x10
c001c5e7:	a8 01                	test   al,0x1
c001c5e9:	0f 85 6b 01 00 00    	jne    c001c75a <IDE::detect()+0x264>
c001c5ef:	a8 80                	test   al,0x80
c001c5f1:	75 04                	jne    c001c5f7 <IDE::detect()+0x101>
c001c5f3:	a8 08                	test   al,0x8
c001c5f5:	75 23                	jne    c001c61a <IDE::detect()+0x124>
c001c5f7:	45                   	inc    ebp
c001c5f8:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001c5fe:	7e da                	jle    c001c5da <IDE::detect()+0xe4>
c001c600:	83 ec 0c             	sub    esp,0xc
c001c603:	6a 32                	push   0x32
c001c605:	e8 b6 9d ff ff       	call   c00163c0 <milliTenthSleep(unsigned int)>
c001c60a:	83 c4 10             	add    esp,0x10
c001c60d:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001c613:	75 c5                	jne    c001c5da <IDE::detect()+0xe4>
c001c615:	e9 40 01 00 00       	jmp    c001c75a <IDE::detect()+0x264>
c001c61a:	31 c9                	xor    ecx,ecx
c001c61c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c620:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c001c624:	83 ec 0c             	sub    esp,0xc
c001c627:	68 80 00 00 00       	push   0x80
c001c62c:	55                   	push   ebp
c001c62d:	6a 00                	push   0x0
c001c62f:	56                   	push   esi
c001c630:	53                   	push   ebx
c001c631:	e8 f0 fd ff ff       	call   c001c426 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c636:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c63b:	89 f8                	mov    eax,edi
c001c63d:	c1 e0 06             	shl    eax,0x6
c001c640:	01 d8                	add    eax,ebx
c001c642:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c649:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c650:	89 d1                	mov    ecx,edx
c001c652:	89 f2                	mov    edx,esi
c001c654:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c65a:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c65e:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c664:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c668:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c66f:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c677:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c67e:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c686:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c68c:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c693:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c699:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c69d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c6a1:	83 c4 20             	add    esp,0x20
c001c6a4:	8a 55 37             	mov    dl,BYTE PTR [ebp+0x37]
c001c6a7:	83 c5 02             	add    ebp,0x2
c001c6aa:	83 c0 02             	add    eax,0x2
c001c6ad:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c6b3:	8a 55 34             	mov    dl,BYTE PTR [ebp+0x34]
c001c6b6:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c6bc:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c001c6c0:	75 e2                	jne    c001c6a4 <IDE::detect()+0x1ae>
c001c6c2:	89 f8                	mov    eax,edi
c001c6c4:	c1 e0 06             	shl    eax,0x6
c001c6c7:	01 d8                	add    eax,ebx
c001c6c9:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c6d0:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c6d7:	c1 ea 09             	shr    edx,0x9
c001c6da:	83 e2 01             	and    edx,0x1
c001c6dd:	80 e1 01             	and    cl,0x1
c001c6e0:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c6e6:	75 22                	jne    c001c70a <IDE::detect()+0x214>
c001c6e8:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c6ef:	74 47                	je     c001c738 <IDE::detect()+0x242>
c001c6f1:	83 ec 0c             	sub    esp,0xc
c001c6f4:	68 7c 01 00 00       	push   0x17c
c001c6f9:	e8 d5 b3 fe ff       	call   c0007ad3 <malloc>
c001c6fe:	89 04 24             	mov    DWORD PTR [esp],eax
c001c701:	89 c5                	mov    ebp,eax
c001c703:	e8 16 05 00 00       	call   c001cc1e <ATA::ATA()>
c001c708:	eb 17                	jmp    c001c721 <IDE::detect()+0x22b>
c001c70a:	83 ec 0c             	sub    esp,0xc
c001c70d:	68 84 01 00 00       	push   0x184
c001c712:	e8 bc b3 fe ff       	call   c0007ad3 <malloc>
c001c717:	89 04 24             	mov    DWORD PTR [esp],eax
c001c71a:	89 c5                	mov    ebp,eax
c001c71c:	e8 6f 0e 00 00       	call   c001d590 <ATAPI::ATAPI()>
c001c721:	5a                   	pop    edx
c001c722:	59                   	pop    ecx
c001c723:	55                   	push   ebp
c001c724:	53                   	push   ebx
c001c725:	e8 ea 02 ff ff       	call   c000ca14 <Device::addChild(Device*)>
c001c72a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c72d:	53                   	push   ebx
c001c72e:	57                   	push   edi
c001c72f:	6a 00                	push   0x0
c001c731:	55                   	push   ebp
c001c732:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c735:	83 c4 20             	add    esp,0x20
c001c738:	47                   	inc    edi
c001c739:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c73e:	74 0d                	je     c001c74d <IDE::detect()+0x257>
c001c740:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c748:	e9 da fd ff ff       	jmp    c001c527 <IDE::detect()+0x31>
c001c74d:	4e                   	dec    esi
c001c74e:	74 62                	je     c001c7b2 <IDE::detect()+0x2bc>
c001c750:	be 01 00 00 00       	mov    esi,0x1
c001c755:	e9 c5 fd ff ff       	jmp    c001c51f <IDE::detect()+0x29>
c001c75a:	50                   	push   eax
c001c75b:	6a 04                	push   0x4
c001c75d:	56                   	push   esi
c001c75e:	53                   	push   ebx
c001c75f:	e8 f0 f6 ff ff       	call   c001be54 <IDE::read(unsigned char, unsigned char)>
c001c764:	83 c4 0c             	add    esp,0xc
c001c767:	6a 05                	push   0x5
c001c769:	56                   	push   esi
c001c76a:	53                   	push   ebx
c001c76b:	89 c5                	mov    ebp,eax
c001c76d:	e8 e2 f6 ff ff       	call   c001be54 <IDE::read(unsigned char, unsigned char)>
c001c772:	89 e9                	mov    ecx,ebp
c001c774:	83 c4 10             	add    esp,0x10
c001c777:	0f b6 e9             	movzx  ebp,cl
c001c77a:	83 fd 14             	cmp    ebp,0x14
c001c77d:	74 2d                	je     c001c7ac <IDE::detect()+0x2b6>
c001c77f:	83 fd 69             	cmp    ebp,0x69
c001c782:	75 b5                	jne    c001c739 <IDE::detect()+0x243>
c001c784:	3c 96                	cmp    al,0x96
c001c786:	75 b1                	jne    c001c739 <IDE::detect()+0x243>
c001c788:	68 a1 00 00 00       	push   0xa1
c001c78d:	6a 07                	push   0x7
c001c78f:	56                   	push   esi
c001c790:	53                   	push   ebx
c001c791:	e8 fe f5 ff ff       	call   c001bd94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c796:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c79d:	e8 1e 9c ff ff       	call   c00163c0 <milliTenthSleep(unsigned int)>
c001c7a2:	83 c4 10             	add    esp,0x10
c001c7a5:	b1 01                	mov    cl,0x1
c001c7a7:	e9 70 fe ff ff       	jmp    c001c61c <IDE::detect()+0x126>
c001c7ac:	3c eb                	cmp    al,0xeb
c001c7ae:	75 cf                	jne    c001c77f <IDE::detect()+0x289>
c001c7b0:	eb d6                	jmp    c001c788 <IDE::detect()+0x292>
c001c7b2:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c7b8:	5b                   	pop    ebx
c001c7b9:	5e                   	pop    esi
c001c7ba:	5f                   	pop    edi
c001c7bb:	5d                   	pop    ebp
c001c7bc:	c3                   	ret    
c001c7bd:	90                   	nop

c001c7be <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c7be:	55                   	push   ebp
c001c7bf:	57                   	push   edi
c001c7c0:	56                   	push   esi
c001c7c1:	53                   	push   ebx
c001c7c2:	83 ec 1c             	sub    esp,0x1c
c001c7c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c7c9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c7cd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c7d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c7d5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c7d9:	88 c3                	mov    bl,al
c001c7db:	25 ff 00 00 00       	and    eax,0xff
c001c7e0:	0f 84 88 00 00 00    	je     c001c86e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c7e6:	83 ec 0c             	sub    esp,0xc
c001c7e9:	89 c7                	mov    edi,eax
c001c7eb:	68 eb 32 02 c0       	push   0xc00232eb
c001c7f0:	e8 15 e1 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001c7f5:	83 c4 10             	add    esp,0x10
c001c7f8:	83 ff 01             	cmp    edi,0x1
c001c7fb:	74 6b                	je     c001c868 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c7fd:	83 ff 02             	cmp    edi,0x2
c001c800:	75 58                	jne    c001c85a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c802:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c807:	50                   	push   eax
c001c808:	6a 01                	push   0x1
c001c80a:	01 ff                	add    edi,edi
c001c80c:	09 fe                	or     esi,edi
c001c80e:	89 f0                	mov    eax,esi
c001c810:	0f b6 f0             	movzx  esi,al
c001c813:	c1 e6 06             	shl    esi,0x6
c001c816:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c81e:	50                   	push   eax
c001c81f:	55                   	push   ebp
c001c820:	e8 2f f6 ff ff       	call   c001be54 <IDE::read(unsigned char, unsigned char)>
c001c825:	83 c4 10             	add    esp,0x10
c001c828:	a8 01                	test   al,0x1
c001c82a:	74 02                	je     c001c82e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c82c:	b3 07                	mov    bl,0x7
c001c82e:	a8 02                	test   al,0x2
c001c830:	74 02                	je     c001c834 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c832:	b3 03                	mov    bl,0x3
c001c834:	a8 04                	test   al,0x4
c001c836:	74 02                	je     c001c83a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c838:	b3 14                	mov    bl,0x14
c001c83a:	a8 08                	test   al,0x8
c001c83c:	74 02                	je     c001c840 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c83e:	b3 03                	mov    bl,0x3
c001c840:	a8 10                	test   al,0x10
c001c842:	74 02                	je     c001c846 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c844:	b3 15                	mov    bl,0x15
c001c846:	a8 20                	test   al,0x20
c001c848:	74 02                	je     c001c84c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c84a:	b3 03                	mov    bl,0x3
c001c84c:	a8 40                	test   al,0x40
c001c84e:	74 02                	je     c001c852 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c850:	b3 16                	mov    bl,0x16
c001c852:	a8 80                	test   al,0x80
c001c854:	74 18                	je     c001c86e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c856:	b3 0d                	mov    bl,0xd
c001c858:	eb 14                	jmp    c001c86e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c85a:	83 ff 03             	cmp    edi,0x3
c001c85d:	74 0d                	je     c001c86c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c85f:	83 ff 04             	cmp    edi,0x4
c001c862:	75 0a                	jne    c001c86e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c864:	b3 08                	mov    bl,0x8
c001c866:	eb 06                	jmp    c001c86e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c868:	b3 13                	mov    bl,0x13
c001c86a:	eb 02                	jmp    c001c86e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c86c:	b3 17                	mov    bl,0x17
c001c86e:	83 c4 1c             	add    esp,0x1c
c001c871:	88 d8                	mov    al,bl
c001c873:	5b                   	pop    ebx
c001c874:	5e                   	pop    esi
c001c875:	5f                   	pop    edi
c001c876:	5d                   	pop    ebp
c001c877:	c3                   	ret    

c001c878 <IDE::polling(unsigned char, unsigned int)>:
c001c878:	57                   	push   edi
c001c879:	56                   	push   esi
c001c87a:	53                   	push   ebx
c001c87b:	bb 04 00 00 00       	mov    ebx,0x4
c001c880:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c884:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c889:	52                   	push   edx
c001c88a:	6a 0c                	push   0xc
c001c88c:	56                   	push   esi
c001c88d:	57                   	push   edi
c001c88e:	e8 c1 f5 ff ff       	call   c001be54 <IDE::read(unsigned char, unsigned char)>
c001c893:	83 c4 10             	add    esp,0x10
c001c896:	4b                   	dec    ebx
c001c897:	75 f0                	jne    c001c889 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c899:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c89e:	50                   	push   eax
c001c89f:	6a 0c                	push   0xc
c001c8a1:	56                   	push   esi
c001c8a2:	57                   	push   edi
c001c8a3:	e8 ac f5 ff ff       	call   c001be54 <IDE::read(unsigned char, unsigned char)>
c001c8a8:	83 c4 10             	add    esp,0x10
c001c8ab:	a8 01                	test   al,0x1
c001c8ad:	75 17                	jne    c001c8c6 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c8af:	a8 20                	test   al,0x20
c001c8b1:	75 0f                	jne    c001c8c2 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c8b3:	4b                   	dec    ebx
c001c8b4:	74 10                	je     c001c8c6 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c8b6:	a8 80                	test   al,0x80
c001c8b8:	75 e4                	jne    c001c89e <IDE::polling(unsigned char, unsigned int)+0x26>
c001c8ba:	a8 08                	test   al,0x8
c001c8bc:	74 e0                	je     c001c89e <IDE::polling(unsigned char, unsigned int)+0x26>
c001c8be:	31 c0                	xor    eax,eax
c001c8c0:	eb 06                	jmp    c001c8c8 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c8c2:	b0 01                	mov    al,0x1
c001c8c4:	eb 02                	jmp    c001c8c8 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c8c6:	b0 02                	mov    al,0x2
c001c8c8:	5b                   	pop    ebx
c001c8c9:	5e                   	pop    esi
c001c8ca:	5f                   	pop    edi
c001c8cb:	c3                   	ret    

c001c8cc <SATABus::close(int, int, void*)>:
c001c8cc:	31 c0                	xor    eax,eax
c001c8ce:	c3                   	ret    
c001c8cf:	90                   	nop

c001c8d0 <SATABus::detect()>:
c001c8d0:	c3                   	ret    
c001c8d1:	90                   	nop

c001c8d2 <SATABus::SATABus()>:
c001c8d2:	83 ec 0c             	sub    esp,0xc
c001c8d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8d9:	83 ec 08             	sub    esp,0x8
c001c8dc:	68 24 33 02 c0       	push   0xc0023324
c001c8e1:	50                   	push   eax
c001c8e2:	e8 71 04 ff ff       	call   c000cd58 <HardDiskController::HardDiskController(char const*)>
c001c8e7:	83 c4 10             	add    esp,0x10
c001c8ea:	ba 50 33 02 c0       	mov    edx,0xc0023350
c001c8ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8f3:	89 10                	mov    DWORD PTR [eax],edx
c001c8f5:	83 ec 0c             	sub    esp,0xc
c001c8f8:	6a 50                	push   0x50
c001c8fa:	e8 b2 b5 fe ff       	call   c0007eb1 <Phys::allocateContiguousPages(int)>
c001c8ff:	83 c4 10             	add    esp,0x10
c001c902:	89 c2                	mov    edx,eax
c001c904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c908:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c90e:	83 ec 0c             	sub    esp,0xc
c001c911:	6a 50                	push   0x50
c001c913:	e8 dd cc fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001c918:	83 c4 10             	add    esp,0x10
c001c91b:	89 c2                	mov    edx,eax
c001c91d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c921:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c927:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c001c92c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c930:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c936:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c93a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c940:	83 ec 0c             	sub    esp,0xc
c001c943:	6a 03                	push   0x3
c001c945:	6a 50                	push   0x50
c001c947:	51                   	push   ecx
c001c948:	52                   	push   edx
c001c949:	50                   	push   eax
c001c94a:	e8 b9 d5 fe ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c94f:	83 c4 20             	add    esp,0x20
c001c952:	90                   	nop
c001c953:	83 c4 0c             	add    esp,0xc
c001c956:	c3                   	ret    
c001c957:	90                   	nop

c001c958 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c958:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c95c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c95f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c962:	09 c2                	or     edx,eax
c001c964:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c968:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c96e:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c970:	31 c0                	xor    eax,eax
c001c972:	c1 e9 08             	shr    ecx,0x8
c001c975:	83 e1 0f             	and    ecx,0xf
c001c978:	39 c8                	cmp    eax,ecx
c001c97a:	74 0a                	je     c001c986 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001c97c:	f6 c2 01             	test   dl,0x1
c001c97f:	74 08                	je     c001c989 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001c981:	d1 ea                	shr    edx,1
c001c983:	40                   	inc    eax
c001c984:	eb f2                	jmp    c001c978 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001c986:	83 c8 ff             	or     eax,0xffffffff
c001c989:	c3                   	ret    

c001c98a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001c98a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c98e:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001c991:	89 c2                	mov    edx,eax
c001c993:	c1 ea 08             	shr    edx,0x8
c001c996:	83 e2 0f             	and    edx,0xf
c001c999:	4a                   	dec    edx
c001c99a:	75 32                	jne    c001c9ce <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c99c:	83 e0 0f             	and    eax,0xf
c001c99f:	83 f8 03             	cmp    eax,0x3
c001c9a2:	75 2a                	jne    c001c9ce <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c9a4:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001c9a7:	b8 02 00 00 00       	mov    eax,0x2
c001c9ac:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001c9b2:	74 1c                	je     c001c9d0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c9b4:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001c9ba:	b8 04 00 00 00       	mov    eax,0x4
c001c9bf:	74 0f                	je     c001c9d0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c9c1:	31 c0                	xor    eax,eax
c001c9c3:	83 fa 03             	cmp    edx,0x3
c001c9c6:	0f 94 c0             	sete   al
c001c9c9:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001c9cd:	c3                   	ret    
c001c9ce:	31 c0                	xor    eax,eax
c001c9d0:	c3                   	ret    
c001c9d1:	90                   	nop

c001c9d2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001c9d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c9d6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c9d9:	0f ba e2 0f          	bt     edx,0xf
c001c9dd:	72 f7                	jb     c001c9d6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001c9df:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c9e2:	83 ca 10             	or     edx,0x10
c001c9e5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c9e8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c9eb:	83 ca 01             	or     edx,0x1
c001c9ee:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c9f1:	c3                   	ret    

c001c9f2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001c9f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c9f6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c9f9:	83 e2 fe             	and    edx,0xfffffffe
c001c9fc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c9ff:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca02:	83 e2 ef             	and    edx,0xffffffef
c001ca05:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ca08:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca0b:	0f ba e2 0e          	bt     edx,0xe
c001ca0f:	72 f7                	jb     c001ca08 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001ca11:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca14:	0f ba e2 0f          	bt     edx,0xf
c001ca18:	72 ee                	jb     c001ca08 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001ca1a:	c3                   	ret    
c001ca1b:	90                   	nop

c001ca1c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001ca1c:	55                   	push   ebp
c001ca1d:	57                   	push   edi
c001ca1e:	56                   	push   esi
c001ca1f:	53                   	push   ebx
c001ca20:	83 ec 1c             	sub    esp,0x1c
c001ca23:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ca27:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ca2b:	53                   	push   ebx
c001ca2c:	57                   	push   edi
c001ca2d:	e8 c0 ff ff ff       	call   c001c9f2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001ca32:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001ca36:	83 ec 0c             	sub    esp,0xc
c001ca39:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001ca3f:	c1 e5 0a             	shl    ebp,0xa
c001ca42:	01 e8                	add    eax,ebp
c001ca44:	89 03                	mov    DWORD PTR [ebx],eax
c001ca46:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ca48:	68 00 04 00 00       	push   0x400
c001ca4d:	6a 00                	push   0x0
c001ca4f:	50                   	push   eax
c001ca50:	e8 9b 3a fe ff       	call   c00004f0 <memset>
c001ca55:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001ca5b:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001ca5f:	83 c4 1c             	add    esp,0x1c
c001ca62:	01 e8                	add    eax,ebp
c001ca64:	89 03                	mov    DWORD PTR [ebx],eax
c001ca66:	c1 e6 08             	shl    esi,0x8
c001ca69:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ca70:	81 c6 00 80 00 00    	add    esi,0x8000
c001ca76:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001ca7c:	01 f0                	add    eax,esi
c001ca7e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001ca81:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001ca84:	68 00 01 00 00       	push   0x100
c001ca89:	6a 00                	push   0x0
c001ca8b:	50                   	push   eax
c001ca8c:	e8 5f 3a fe ff       	call   c00004f0 <memset>
c001ca91:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001ca97:	31 d2                	xor    edx,edx
c001ca99:	01 f0                	add    eax,esi
c001ca9b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001ca9e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001caa5:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001caab:	01 ee                	add    esi,ebp
c001caad:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001cab1:	83 c4 10             	add    esp,0x10
c001cab4:	c1 e5 0d             	shl    ebp,0xd
c001cab7:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001cabd:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001cac3:	83 c6 20             	add    esi,0x20
c001cac6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001caca:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001cad0:	01 e8                	add    eax,ebp
c001cad2:	01 d0                	add    eax,edx
c001cad4:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001cad7:	52                   	push   edx
c001cad8:	68 00 01 00 00       	push   0x100
c001cadd:	6a 00                	push   0x0
c001cadf:	50                   	push   eax
c001cae0:	e8 0b 3a fe ff       	call   c00004f0 <memset>
c001cae5:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001caeb:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001caf2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001caf6:	83 c4 10             	add    esp,0x10
c001caf9:	01 e8                	add    eax,ebp
c001cafb:	01 d0                	add    eax,edx
c001cafd:	81 c2 00 01 00 00    	add    edx,0x100
c001cb03:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001cb06:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001cb0c:	75 af                	jne    c001cabd <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001cb0e:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001cb15:	50                   	push   eax
c001cb16:	50                   	push   eax
c001cb17:	53                   	push   ebx
c001cb18:	57                   	push   edi
c001cb19:	e8 b4 fe ff ff       	call   c001c9d2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001cb1e:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001cb25:	83 c4 2c             	add    esp,0x2c
c001cb28:	5b                   	pop    ebx
c001cb29:	5e                   	pop    esi
c001cb2a:	5f                   	pop    edi
c001cb2b:	5d                   	pop    ebp
c001cb2c:	c3                   	ret    
c001cb2d:	90                   	nop

c001cb2e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001cb2e:	55                   	push   ebp
c001cb2f:	57                   	push   edi
c001cb30:	56                   	push   esi
c001cb31:	53                   	push   ebx
c001cb32:	31 db                	xor    ebx,ebx
c001cb34:	83 ec 0c             	sub    esp,0xc
c001cb37:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cb3b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001cb3f:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001cb42:	f7 c7 01 00 00 00    	test   edi,0x1
c001cb48:	74 7a                	je     c001cbc4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cb4a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cb4e:	89 d8                	mov    eax,ebx
c001cb50:	c1 e0 07             	shl    eax,0x7
c001cb53:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001cb5a:	55                   	push   ebp
c001cb5b:	56                   	push   esi
c001cb5c:	e8 29 fe ff ff       	call   c001c98a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001cb61:	5a                   	pop    edx
c001cb62:	59                   	pop    ecx
c001cb63:	83 f8 01             	cmp    eax,0x1
c001cb66:	75 21                	jne    c001cb89 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001cb68:	50                   	push   eax
c001cb69:	53                   	push   ebx
c001cb6a:	55                   	push   ebp
c001cb6b:	56                   	push   esi
c001cb6c:	e8 ab fe ff ff       	call   c001ca1c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cb71:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001cb78:	e8 56 af fe ff       	call   c0007ad3 <malloc>
c001cb7d:	89 04 24             	mov    DWORD PTR [esp],eax
c001cb80:	89 c5                	mov    ebp,eax
c001cb82:	e8 c1 10 00 00       	call   c001dc48 <SATA::SATA()>
c001cb87:	eb 24                	jmp    c001cbad <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001cb89:	83 f8 04             	cmp    eax,0x4
c001cb8c:	75 36                	jne    c001cbc4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cb8e:	51                   	push   ecx
c001cb8f:	53                   	push   ebx
c001cb90:	55                   	push   ebp
c001cb91:	56                   	push   esi
c001cb92:	e8 85 fe ff ff       	call   c001ca1c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cb97:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001cb9e:	e8 30 af fe ff       	call   c0007ad3 <malloc>
c001cba3:	89 04 24             	mov    DWORD PTR [esp],eax
c001cba6:	89 c5                	mov    ebp,eax
c001cba8:	e8 f5 17 00 00       	call   c001e3a2 <SATAPI::SATAPI()>
c001cbad:	58                   	pop    eax
c001cbae:	5a                   	pop    edx
c001cbaf:	55                   	push   ebp
c001cbb0:	56                   	push   esi
c001cbb1:	e8 5e fe fe ff       	call   c000ca14 <Device::addChild(Device*)>
c001cbb6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001cbb9:	56                   	push   esi
c001cbba:	6a 00                	push   0x0
c001cbbc:	53                   	push   ebx
c001cbbd:	55                   	push   ebp
c001cbbe:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001cbc1:	83 c4 20             	add    esp,0x20
c001cbc4:	d1 ef                	shr    edi,1
c001cbc6:	43                   	inc    ebx
c001cbc7:	83 fb 20             	cmp    ebx,0x20
c001cbca:	0f 85 72 ff ff ff    	jne    c001cb42 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001cbd0:	83 c4 0c             	add    esp,0xc
c001cbd3:	5b                   	pop    ebx
c001cbd4:	5e                   	pop    esi
c001cbd5:	5f                   	pop    edi
c001cbd6:	5d                   	pop    ebp
c001cbd7:	c3                   	ret    

c001cbd8 <SATABus::open(int, int, void*)>:
c001cbd8:	83 ec 14             	sub    esp,0x14
c001cbdb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cbdf:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001cbe5:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001cbeb:	52                   	push   edx
c001cbec:	50                   	push   eax
c001cbed:	e8 3c ff ff ff       	call   c001cb2e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001cbf2:	31 c0                	xor    eax,eax
c001cbf4:	83 c4 1c             	add    esp,0x1c
c001cbf7:	c3                   	ret    

c001cbf8 <ATA::close(int, int, void*)>:
c001cbf8:	83 ec 0c             	sub    esp,0xc
c001cbfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbff:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cc05:	85 c0                	test   eax,eax
c001cc07:	74 0c                	je     c001cc15 <ATA::close(int, int, void*)+0x1d>
c001cc09:	8b 10                	mov    edx,DWORD PTR [eax]
c001cc0b:	83 ec 0c             	sub    esp,0xc
c001cc0e:	50                   	push   eax
c001cc0f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cc12:	83 c4 10             	add    esp,0x10
c001cc15:	31 c0                	xor    eax,eax
c001cc17:	83 c4 0c             	add    esp,0xc
c001cc1a:	c3                   	ret    
c001cc1b:	90                   	nop

c001cc1c <ATA::powerSaving(PowerSavingLevel)>:
c001cc1c:	c3                   	ret    
c001cc1d:	90                   	nop

c001cc1e <ATA::ATA()>:
c001cc1e:	83 ec 0c             	sub    esp,0xc
c001cc21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc25:	83 ec 04             	sub    esp,0x4
c001cc28:	68 00 02 00 00       	push   0x200
c001cc2d:	68 1d 34 02 c0       	push   0xc002341d
c001cc32:	50                   	push   eax
c001cc33:	e8 aa 01 ff ff       	call   c000cde2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cc38:	83 c4 10             	add    esp,0x10
c001cc3b:	ba 90 33 02 c0       	mov    edx,0xc0023390
c001cc40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc44:	89 10                	mov    DWORD PTR [eax],edx
c001cc46:	90                   	nop
c001cc47:	83 c4 0c             	add    esp,0xc
c001cc4a:	c3                   	ret    
c001cc4b:	90                   	nop

c001cc4c <ATA::flush(bool)>:
c001cc4c:	53                   	push   ebx
c001cc4d:	83 ec 08             	sub    esp,0x8
c001cc50:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001cc55:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cc59:	83 f8 01             	cmp    eax,0x1
c001cc5c:	19 c0                	sbb    eax,eax
c001cc5e:	83 e0 fd             	and    eax,0xfffffffd
c001cc61:	05 ea 00 00 00       	add    eax,0xea
c001cc66:	50                   	push   eax
c001cc67:	6a 07                	push   0x7
c001cc69:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc70:	50                   	push   eax
c001cc71:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc77:	e8 18 f1 ff ff       	call   c001bd94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cc7c:	83 c4 0c             	add    esp,0xc
c001cc7f:	6a 00                	push   0x0
c001cc81:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc88:	50                   	push   eax
c001cc89:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc8f:	e8 e4 fb ff ff       	call   c001c878 <IDE::polling(unsigned char, unsigned int)>
c001cc94:	83 c4 18             	add    esp,0x18
c001cc97:	5b                   	pop    ebx
c001cc98:	c3                   	ret    
c001cc99:	90                   	nop

c001cc9a <ATA::readyForCommand()>:
c001cc9a:	56                   	push   esi
c001cc9b:	53                   	push   ebx
c001cc9c:	53                   	push   ebx
c001cc9d:	31 db                	xor    ebx,ebx
c001cc9f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cca3:	51                   	push   ecx
c001cca4:	6a 0c                	push   0xc
c001cca6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001ccad:	50                   	push   eax
c001ccae:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001ccb4:	e8 9b f1 ff ff       	call   c001be54 <IDE::read(unsigned char, unsigned char)>
c001ccb9:	83 c4 10             	add    esp,0x10
c001ccbc:	a8 88                	test   al,0x88
c001ccbe:	74 1f                	je     c001ccdf <ATA::readyForCommand()+0x45>
c001ccc0:	43                   	inc    ebx
c001ccc1:	83 fb 63             	cmp    ebx,0x63
c001ccc4:	7e dd                	jle    c001cca3 <ATA::readyForCommand()+0x9>
c001ccc6:	83 ec 0c             	sub    esp,0xc
c001ccc9:	6a 0a                	push   0xa
c001cccb:	e8 f0 96 ff ff       	call   c00163c0 <milliTenthSleep(unsigned int)>
c001ccd0:	83 c4 10             	add    esp,0x10
c001ccd3:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001ccd9:	75 c8                	jne    c001cca3 <ATA::readyForCommand()+0x9>
c001ccdb:	31 c0                	xor    eax,eax
c001ccdd:	eb 02                	jmp    c001cce1 <ATA::readyForCommand()+0x47>
c001ccdf:	b0 01                	mov    al,0x1
c001cce1:	5a                   	pop    edx
c001cce2:	5b                   	pop    ebx
c001cce3:	5e                   	pop    esi
c001cce4:	c3                   	ret    
c001cce5:	90                   	nop

c001cce6 <ATA::access(unsigned long long, int, void*, bool)>:
c001cce6:	55                   	push   ebp
c001cce7:	57                   	push   edi
c001cce8:	56                   	push   esi
c001cce9:	53                   	push   ebx
c001ccea:	83 ec 2c             	sub    esp,0x2c
c001cced:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ccf1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001ccf5:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ccf9:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001ccfd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cd01:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001cd05:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001cd09:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001cd0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cd13:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cd19:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cd1d:	c1 e0 06             	shl    eax,0x6
c001cd20:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001cd28:	74 5b                	je     c001cd85 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001cd2a:	89 fa                	mov    edx,edi
c001cd2c:	89 f0                	mov    eax,esi
c001cd2e:	c1 ea 1c             	shr    edx,0x1c
c001cd31:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001cd35:	89 d1                	mov    ecx,edx
c001cd37:	09 c1                	or     ecx,eax
c001cd39:	74 25                	je     c001cd60 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001cd3b:	31 ed                	xor    ebp,ebp
c001cd3d:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001cd44:	89 fa                	mov    edx,edi
c001cd46:	89 f0                	mov    eax,esi
c001cd48:	0f ad d0             	shrd   eax,edx,cl
c001cd4b:	d3 ea                	shr    edx,cl
c001cd4d:	f6 c1 20             	test   cl,0x20
c001cd50:	74 02                	je     c001cd54 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001cd52:	89 d0                	mov    eax,edx
c001cd54:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001cd58:	45                   	inc    ebp
c001cd59:	83 fd 06             	cmp    ebp,0x6
c001cd5c:	75 df                	jne    c001cd3d <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001cd5e:	eb 71                	jmp    c001cdd1 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001cd60:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001cd65:	89 f0                	mov    eax,esi
c001cd67:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001cd6e:	0f ac f8 10          	shrd   eax,edi,0x10
c001cd72:	bf 01 00 00 00       	mov    edi,0x1
c001cd77:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001cd7b:	c1 ee 18             	shr    esi,0x18
c001cd7e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001cd83:	eb 53                	jmp    c001cdd8 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001cd85:	6a 00                	push   0x0
c001cd87:	6a 3f                	push   0x3f
c001cd89:	57                   	push   edi
c001cd8a:	56                   	push   esi
c001cd8b:	e8 d0 2a 00 00       	call   c001f860 <__umoddi3>
c001cd90:	83 c4 10             	add    esp,0x10
c001cd93:	40                   	inc    eax
c001cd94:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001cd98:	6a 00                	push   0x0
c001cd9a:	68 f0 03 00 00       	push   0x3f0
c001cd9f:	57                   	push   edi
c001cda0:	56                   	push   esi
c001cda1:	e8 ba 29 00 00       	call   c001f760 <__udivdi3>
c001cda6:	83 c4 10             	add    esp,0x10
c001cda9:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001cdae:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001cdb5:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001cdba:	6a 00                	push   0x0
c001cdbc:	6a 3f                	push   0x3f
c001cdbe:	57                   	push   edi
c001cdbf:	31 ff                	xor    edi,edi
c001cdc1:	56                   	push   esi
c001cdc2:	e8 99 29 00 00       	call   c001f760 <__udivdi3>
c001cdc7:	83 c4 10             	add    esp,0x10
c001cdca:	83 e0 0f             	and    eax,0xf
c001cdcd:	89 c6                	mov    esi,eax
c001cdcf:	eb 07                	jmp    c001cdd8 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001cdd1:	31 f6                	xor    esi,esi
c001cdd3:	bf 02 00 00 00       	mov    edi,0x2
c001cdd8:	50                   	push   eax
c001cdd9:	6a 00                	push   0x0
c001cddb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cde2:	50                   	push   eax
c001cde3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cde7:	e8 b6 f1 ff ff       	call   c001bfa2 <IDE::enableIRQs(unsigned char, bool)>
c001cdec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cdef:	e8 a6 fe ff ff       	call   c001cc9a <ATA::readyForCommand()>
c001cdf4:	83 c4 10             	add    esp,0x10
c001cdf7:	84 c0                	test   al,al
c001cdf9:	75 0a                	jne    c001ce05 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001cdfb:	be 01 00 00 00       	mov    esi,0x1
c001ce00:	e9 9b 02 00 00       	jmp    c001d0a0 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001ce05:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ce0b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ce11:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001ce18:	c1 e0 04             	shl    eax,0x4
c001ce1b:	09 c6                	or     esi,eax
c001ce1d:	f7 c7 03 00 00 00    	test   edi,0x3
c001ce23:	75 05                	jne    c001ce2a <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001ce25:	83 ce a0             	or     esi,0xffffffa0
c001ce28:	eb 03                	jmp    c001ce2d <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001ce2a:	83 ce e0             	or     esi,0xffffffe0
c001ce2d:	89 f0                	mov    eax,esi
c001ce2f:	0f b6 f0             	movzx  esi,al
c001ce32:	56                   	push   esi
c001ce33:	6a 06                	push   0x6
c001ce35:	51                   	push   ecx
c001ce36:	52                   	push   edx
c001ce37:	e8 58 ef ff ff       	call   c001bd94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce3c:	83 c4 10             	add    esp,0x10
c001ce3f:	6a 00                	push   0x0
c001ce41:	6a 01                	push   0x1
c001ce43:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce4a:	50                   	push   eax
c001ce4b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce51:	e8 3e ef ff ff       	call   c001bd94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce56:	89 f8                	mov    eax,edi
c001ce58:	83 c4 10             	add    esp,0x10
c001ce5b:	0f b6 f0             	movzx  esi,al
c001ce5e:	83 fe 02             	cmp    esi,0x2
c001ce61:	75 6e                	jne    c001ced1 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001ce63:	6a 00                	push   0x0
c001ce65:	6a 08                	push   0x8
c001ce67:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce6e:	50                   	push   eax
c001ce6f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce75:	e8 1a ef ff ff       	call   c001bd94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce7a:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001ce7f:	50                   	push   eax
c001ce80:	6a 09                	push   0x9
c001ce82:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce89:	50                   	push   eax
c001ce8a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce90:	e8 ff ee ff ff       	call   c001bd94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce95:	83 c4 20             	add    esp,0x20
c001ce98:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001ce9d:	50                   	push   eax
c001ce9e:	6a 0a                	push   0xa
c001cea0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cea7:	50                   	push   eax
c001cea8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ceae:	e8 e1 ee ff ff       	call   c001bd94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ceb3:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001ceb8:	50                   	push   eax
c001ceb9:	6a 0b                	push   0xb
c001cebb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cec2:	50                   	push   eax
c001cec3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cec9:	e8 c6 ee ff ff       	call   c001bd94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cece:	83 c4 20             	add    esp,0x20
c001ced1:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001ced6:	50                   	push   eax
c001ced7:	6a 02                	push   0x2
c001ced9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cee0:	50                   	push   eax
c001cee1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cee7:	e8 a8 ee ff ff       	call   c001bd94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ceec:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001cef1:	50                   	push   eax
c001cef2:	6a 03                	push   0x3
c001cef4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cefb:	50                   	push   eax
c001cefc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf02:	e8 8d ee ff ff       	call   c001bd94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf07:	83 c4 20             	add    esp,0x20
c001cf0a:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001cf0f:	50                   	push   eax
c001cf10:	6a 04                	push   0x4
c001cf12:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf19:	50                   	push   eax
c001cf1a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf20:	e8 6f ee ff ff       	call   c001bd94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf25:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cf2a:	50                   	push   eax
c001cf2b:	6a 05                	push   0x5
c001cf2d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf34:	50                   	push   eax
c001cf35:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf3b:	e8 54 ee ff ff       	call   c001bd94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf40:	83 c4 20             	add    esp,0x20
c001cf43:	83 fe 02             	cmp    esi,0x2
c001cf46:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001cf4b:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001cf50:	85 c9                	test   ecx,ecx
c001cf52:	74 07                	je     c001cf5b <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001cf54:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cf59:	75 47                	jne    c001cfa2 <ATA::access(unsigned long long, int, void*, bool)+0x2bc>
c001cf5b:	89 f8                	mov    eax,edi
c001cf5d:	0f b6 f8             	movzx  edi,al
c001cf60:	31 c0                	xor    eax,eax
c001cf62:	83 ff 02             	cmp    edi,0x2
c001cf65:	0f 95 c0             	setne  al
c001cf68:	89 c6                	mov    esi,eax
c001cf6a:	74 0c                	je     c001cf78 <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001cf6c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cf71:	b8 30 00 00 00       	mov    eax,0x30
c001cf76:	75 2f                	jne    c001cfa7 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001cf78:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cf7c:	83 f2 01             	xor    edx,0x1
c001cf7f:	85 c9                	test   ecx,ecx
c001cf81:	74 09                	je     c001cf8c <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001cf83:	84 d2                	test   dl,dl
c001cf85:	b8 24 00 00 00       	mov    eax,0x24
c001cf8a:	75 1b                	jne    c001cfa7 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001cf8c:	85 f6                	test   esi,esi
c001cf8e:	0f 84 67 fe ff ff    	je     c001cdfb <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001cf94:	84 d2                	test   dl,dl
c001cf96:	b8 20 00 00 00       	mov    eax,0x20
c001cf9b:	75 0a                	jne    c001cfa7 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001cf9d:	e9 59 fe ff ff       	jmp    c001cdfb <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001cfa2:	b8 34 00 00 00       	mov    eax,0x34
c001cfa7:	50                   	push   eax
c001cfa8:	6a 07                	push   0x7
c001cfaa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cfb1:	50                   	push   eax
c001cfb2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfb8:	e8 d7 ed ff ff       	call   c001bd94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfbd:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001cfc1:	83 c4 10             	add    esp,0x10
c001cfc4:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001cfc9:	85 f6                	test   esi,esi
c001cfcb:	0f 84 b5 00 00 00    	je     c001d086 <ATA::access(unsigned long long, int, void*, bool)+0x3a0>
c001cfd1:	50                   	push   eax
c001cfd2:	6a 01                	push   0x1
c001cfd4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cfdb:	50                   	push   eax
c001cfdc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfe2:	e8 91 f8 ff ff       	call   c001c878 <IDE::polling(unsigned char, unsigned int)>
c001cfe7:	83 c4 10             	add    esp,0x10
c001cfea:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001cff0:	0f b6 c0             	movzx  eax,al
c001cff3:	85 c0                	test   eax,eax
c001cff5:	74 1f                	je     c001d016 <ATA::access(unsigned long long, int, void*, bool)+0x330>
c001cff7:	50                   	push   eax
c001cff8:	89 c6                	mov    esi,eax
c001cffa:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001d001:	0f b6 d2             	movzx  edx,dl
c001d004:	50                   	push   eax
c001d005:	52                   	push   edx
c001d006:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d00c:	e8 ad f7 ff ff       	call   c001c7be <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d011:	e9 87 00 00 00       	jmp    c001d09d <ATA::access(unsigned long long, int, void*, bool)+0x3b7>
c001d016:	85 ed                	test   ebp,ebp
c001d018:	74 3b                	je     c001d055 <ATA::access(unsigned long long, int, void*, bool)+0x36f>
c001d01a:	31 ff                	xor    edi,edi
c001d01c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d020:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001d024:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001d029:	50                   	push   eax
c001d02a:	50                   	push   eax
c001d02b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d032:	50                   	push   eax
c001d033:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d039:	e8 44 ed ff ff       	call   c001bd82 <IDE::getBase(unsigned char)>
c001d03e:	89 c2                	mov    edx,eax
c001d040:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001d045:	66 ef                	out    dx,ax
c001d047:	47                   	inc    edi
c001d048:	83 c4 10             	add    esp,0x10
c001d04b:	81 ff 00 01 00 00    	cmp    edi,0x100
c001d051:	75 c9                	jne    c001d01c <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001d053:	eb 23                	jmp    c001d078 <ATA::access(unsigned long long, int, void*, bool)+0x392>
c001d055:	51                   	push   ecx
c001d056:	0f b6 d2             	movzx  edx,dl
c001d059:	51                   	push   ecx
c001d05a:	52                   	push   edx
c001d05b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d061:	e8 1c ed ff ff       	call   c001bd82 <IDE::getBase(unsigned char)>
c001d066:	b9 00 01 00 00       	mov    ecx,0x100
c001d06b:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001d06f:	89 c2                	mov    edx,eax
c001d071:	fc                   	cld    
c001d072:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001d075:	83 c4 10             	add    esp,0x10
c001d078:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001d080:	4e                   	dec    esi
c001d081:	e9 43 ff ff ff       	jmp    c001cfc9 <ATA::access(unsigned long long, int, void*, bool)+0x2e3>
c001d086:	31 f6                	xor    esi,esi
c001d088:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d08d:	74 11                	je     c001d0a0 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001d08f:	50                   	push   eax
c001d090:	50                   	push   eax
c001d091:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001d096:	50                   	push   eax
c001d097:	53                   	push   ebx
c001d098:	e8 af fb ff ff       	call   c001cc4c <ATA::flush(bool)>
c001d09d:	83 c4 10             	add    esp,0x10
c001d0a0:	83 c4 2c             	add    esp,0x2c
c001d0a3:	89 f0                	mov    eax,esi
c001d0a5:	5b                   	pop    ebx
c001d0a6:	5e                   	pop    esi
c001d0a7:	5f                   	pop    edi
c001d0a8:	5d                   	pop    ebp
c001d0a9:	c3                   	ret    

c001d0aa <ATA::detectCHS()>:
c001d0aa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d0ae:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001d0b4:	c1 e0 06             	shl    eax,0x6
c001d0b7:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001d0bd:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001d0c7:	c7 44 24 04 74 33 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023374
c001d0cf:	e9 07 45 ff ff       	jmp    c00115db <KePanic(char const*)>

c001d0d4 <ATA::open(int, int, void*)>:
c001d0d4:	53                   	push   ebx
c001d0d5:	83 ec 08             	sub    esp,0x8
c001d0d8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d0dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d0e0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d0e4:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d0ea:	c1 e0 06             	shl    eax,0x6
c001d0ed:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d0f3:	01 d0                	add    eax,edx
c001d0f5:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001d0fc:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001d102:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001d109:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d113:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d11a:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001d120:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001d127:	75 0c                	jne    c001d135 <ATA::open(int, int, void*)+0x61>
c001d129:	83 ec 0c             	sub    esp,0xc
c001d12c:	53                   	push   ebx
c001d12d:	e8 78 ff ff ff       	call   c001d0aa <ATA::detectCHS()>
c001d132:	83 c4 10             	add    esp,0x10
c001d135:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d13b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d141:	c1 e0 06             	shl    eax,0x6
c001d144:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001d14b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d155:	d1 e8                	shr    eax,1
c001d157:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d15d:	6a 04                	push   0x4
c001d15f:	6a 0c                	push   0xc
c001d161:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d168:	50                   	push   eax
c001d169:	52                   	push   edx
c001d16a:	e8 25 ec ff ff       	call   c001bd94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d16f:	90                   	nop
c001d170:	90                   	nop
c001d171:	6a 00                	push   0x0
c001d173:	6a 0c                	push   0xc
c001d175:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d17c:	50                   	push   eax
c001d17d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d183:	e8 0c ec ff ff       	call   c001bd94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d188:	83 c4 14             	add    esp,0x14
c001d18b:	53                   	push   ebx
c001d18c:	e8 b9 fc fe ff       	call   c000ce4a <PhysicalDisk::startCache()>
c001d191:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d194:	e8 fd 0e ff ff       	call   c000e096 <createPartitionsForDisk(PhysicalDisk*)>
c001d199:	83 c4 18             	add    esp,0x18
c001d19c:	31 c0                	xor    eax,eax
c001d19e:	5b                   	pop    ebx
c001d19f:	c3                   	ret    

c001d1a0 <combineCharAndColour(char, unsigned char)>:
c001d1a0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d1a5:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001d1ab:	c1 e0 08             	shl    eax,0x8
c001d1ae:	09 d0                	or     eax,edx
c001d1b0:	c3                   	ret    

c001d1b1 <combineColours(unsigned char, unsigned char)>:
c001d1b1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d1b6:	c1 e0 04             	shl    eax,0x4
c001d1b9:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001d1bd:	c3                   	ret    

c001d1be <ATA::read(unsigned long long, int, void*)>:
c001d1be:	55                   	push   ebp
c001d1bf:	57                   	push   edi
c001d1c0:	56                   	push   esi
c001d1c1:	be 04 00 00 00       	mov    esi,0x4
c001d1c6:	53                   	push   ebx
c001d1c7:	83 ec 0c             	sub    esp,0xc
c001d1ca:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d1ce:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d1d2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d1d6:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d1da:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d1dd:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d1e3:	0f 87 a1 01 00 00    	ja     c001d38a <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d1e9:	85 c9                	test   ecx,ecx
c001d1eb:	be 06 00 00 00       	mov    esi,0x6
c001d1f0:	0f 84 94 01 00 00    	je     c001d38a <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d1f6:	55                   	push   ebp
c001d1f7:	55                   	push   ebp
c001d1f8:	6a 00                	push   0x0
c001d1fa:	51                   	push   ecx
c001d1fb:	53                   	push   ebx
c001d1fc:	52                   	push   edx
c001d1fd:	50                   	push   eax
c001d1fe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d202:	e8 df fa ff ff       	call   c001cce6 <ATA::access(unsigned long long, int, void*, bool)>
c001d207:	83 c4 20             	add    esp,0x20
c001d20a:	85 c0                	test   eax,eax
c001d20c:	89 c6                	mov    esi,eax
c001d20e:	0f 85 71 01 00 00    	jne    c001d385 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001d214:	50                   	push   eax
c001d215:	bd 10 27 00 00       	mov    ebp,0x2710
c001d21a:	50                   	push   eax
c001d21b:	03 1d b4 d0 02 c0    	add    ebx,DWORD PTR ds:0xc002d0b4
c001d221:	6a 0f                	push   0xf
c001d223:	6a 00                	push   0x0
c001d225:	89 da                	mov    edx,ebx
c001d227:	89 1d b4 d0 02 c0    	mov    DWORD PTR ds:0xc002d0b4,ebx
c001d22d:	e8 7f ff ff ff       	call   c001d1b1 <combineColours(unsigned char, unsigned char)>
c001d232:	59                   	pop    ecx
c001d233:	b9 0a 00 00 00       	mov    ecx,0xa
c001d238:	5b                   	pop    ebx
c001d239:	0f b6 d8             	movzx  ebx,al
c001d23c:	89 d0                	mov    eax,edx
c001d23e:	53                   	push   ebx
c001d23f:	99                   	cdq    
c001d240:	f7 fd                	idiv   ebp
c001d242:	99                   	cdq    
c001d243:	f7 f9                	idiv   ecx
c001d245:	83 c2 30             	add    edx,0x30
c001d248:	0f b6 d2             	movzx  edx,dl
c001d24b:	52                   	push   edx
c001d24c:	e8 4f ff ff ff       	call   c001d1a0 <combineCharAndColour(char, unsigned char)>
c001d251:	5f                   	pop    edi
c001d252:	bf e8 03 00 00       	mov    edi,0x3e8
c001d257:	5a                   	pop    edx
c001d258:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d25e:	53                   	push   ebx
c001d25f:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d264:	99                   	cdq    
c001d265:	f7 ff                	idiv   edi
c001d267:	99                   	cdq    
c001d268:	f7 f9                	idiv   ecx
c001d26a:	8d 42 30             	lea    eax,[edx+0x30]
c001d26d:	0f b6 c0             	movzx  eax,al
c001d270:	50                   	push   eax
c001d271:	e8 2a ff ff ff       	call   c001d1a0 <combineCharAndColour(char, unsigned char)>
c001d276:	5f                   	pop    edi
c001d277:	bf 64 00 00 00       	mov    edi,0x64
c001d27c:	5a                   	pop    edx
c001d27d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d283:	53                   	push   ebx
c001d284:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d289:	99                   	cdq    
c001d28a:	f7 ff                	idiv   edi
c001d28c:	99                   	cdq    
c001d28d:	f7 f9                	idiv   ecx
c001d28f:	8d 42 30             	lea    eax,[edx+0x30]
c001d292:	0f b6 c0             	movzx  eax,al
c001d295:	50                   	push   eax
c001d296:	e8 05 ff ff ff       	call   c001d1a0 <combineCharAndColour(char, unsigned char)>
c001d29b:	5a                   	pop    edx
c001d29c:	5a                   	pop    edx
c001d29d:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d2a3:	53                   	push   ebx
c001d2a4:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d2a9:	99                   	cdq    
c001d2aa:	f7 f9                	idiv   ecx
c001d2ac:	99                   	cdq    
c001d2ad:	f7 f9                	idiv   ecx
c001d2af:	8d 42 30             	lea    eax,[edx+0x30]
c001d2b2:	0f b6 c0             	movzx  eax,al
c001d2b5:	50                   	push   eax
c001d2b6:	e8 e5 fe ff ff       	call   c001d1a0 <combineCharAndColour(char, unsigned char)>
c001d2bb:	5a                   	pop    edx
c001d2bc:	5a                   	pop    edx
c001d2bd:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d2c3:	53                   	push   ebx
c001d2c4:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d2c9:	99                   	cdq    
c001d2ca:	f7 f9                	idiv   ecx
c001d2cc:	83 c2 30             	add    edx,0x30
c001d2cf:	0f b6 d2             	movzx  edx,dl
c001d2d2:	52                   	push   edx
c001d2d3:	e8 c8 fe ff ff       	call   c001d1a0 <combineCharAndColour(char, unsigned char)>
c001d2d8:	5a                   	pop    edx
c001d2d9:	5a                   	pop    edx
c001d2da:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d2e0:	53                   	push   ebx
c001d2e1:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d2e6:	99                   	cdq    
c001d2e7:	f7 fd                	idiv   ebp
c001d2e9:	99                   	cdq    
c001d2ea:	f7 f9                	idiv   ecx
c001d2ec:	8d 42 30             	lea    eax,[edx+0x30]
c001d2ef:	0f b6 c0             	movzx  eax,al
c001d2f2:	50                   	push   eax
c001d2f3:	e8 a8 fe ff ff       	call   c001d1a0 <combineCharAndColour(char, unsigned char)>
c001d2f8:	5d                   	pop    ebp
c001d2f9:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d2fe:	5a                   	pop    edx
c001d2ff:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d305:	53                   	push   ebx
c001d306:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d30b:	99                   	cdq    
c001d30c:	f7 fd                	idiv   ebp
c001d30e:	99                   	cdq    
c001d30f:	f7 f9                	idiv   ecx
c001d311:	8d 42 30             	lea    eax,[edx+0x30]
c001d314:	0f b6 c0             	movzx  eax,al
c001d317:	50                   	push   eax
c001d318:	e8 83 fe ff ff       	call   c001d1a0 <combineCharAndColour(char, unsigned char)>
c001d31d:	5d                   	pop    ebp
c001d31e:	5a                   	pop    edx
c001d31f:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d325:	53                   	push   ebx
c001d326:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d32b:	99                   	cdq    
c001d32c:	f7 ff                	idiv   edi
c001d32e:	99                   	cdq    
c001d32f:	f7 f9                	idiv   ecx
c001d331:	8d 42 30             	lea    eax,[edx+0x30]
c001d334:	0f b6 c0             	movzx  eax,al
c001d337:	50                   	push   eax
c001d338:	e8 63 fe ff ff       	call   c001d1a0 <combineCharAndColour(char, unsigned char)>
c001d33d:	5f                   	pop    edi
c001d33e:	5d                   	pop    ebp
c001d33f:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d345:	53                   	push   ebx
c001d346:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d34b:	99                   	cdq    
c001d34c:	f7 f9                	idiv   ecx
c001d34e:	99                   	cdq    
c001d34f:	f7 f9                	idiv   ecx
c001d351:	8d 42 30             	lea    eax,[edx+0x30]
c001d354:	0f b6 c0             	movzx  eax,al
c001d357:	50                   	push   eax
c001d358:	e8 43 fe ff ff       	call   c001d1a0 <combineCharAndColour(char, unsigned char)>
c001d35d:	5a                   	pop    edx
c001d35e:	5f                   	pop    edi
c001d35f:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d365:	53                   	push   ebx
c001d366:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d36b:	99                   	cdq    
c001d36c:	f7 f9                	idiv   ecx
c001d36e:	83 c2 30             	add    edx,0x30
c001d371:	0f b6 d2             	movzx  edx,dl
c001d374:	52                   	push   edx
c001d375:	e8 26 fe ff ff       	call   c001d1a0 <combineCharAndColour(char, unsigned char)>
c001d37a:	83 c4 10             	add    esp,0x10
c001d37d:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d383:	eb 05                	jmp    c001d38a <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d385:	be 01 00 00 00       	mov    esi,0x1
c001d38a:	83 c4 0c             	add    esp,0xc
c001d38d:	89 f0                	mov    eax,esi
c001d38f:	5b                   	pop    ebx
c001d390:	5e                   	pop    esi
c001d391:	5f                   	pop    edi
c001d392:	5d                   	pop    ebp
c001d393:	c3                   	ret    

c001d394 <ATA::write(unsigned long long, int, void*)>:
c001d394:	55                   	push   ebp
c001d395:	57                   	push   edi
c001d396:	56                   	push   esi
c001d397:	be 04 00 00 00       	mov    esi,0x4
c001d39c:	53                   	push   ebx
c001d39d:	83 ec 0c             	sub    esp,0xc
c001d3a0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d3a4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d3a8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d3ac:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d3b0:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d3b3:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d3b9:	0f 87 9c 01 00 00    	ja     c001d55b <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d3bf:	85 c9                	test   ecx,ecx
c001d3c1:	be 06 00 00 00       	mov    esi,0x6
c001d3c6:	0f 84 8f 01 00 00    	je     c001d55b <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d3cc:	55                   	push   ebp
c001d3cd:	55                   	push   ebp
c001d3ce:	6a 01                	push   0x1
c001d3d0:	51                   	push   ecx
c001d3d1:	53                   	push   ebx
c001d3d2:	52                   	push   edx
c001d3d3:	50                   	push   eax
c001d3d4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d3d8:	e8 09 f9 ff ff       	call   c001cce6 <ATA::access(unsigned long long, int, void*, bool)>
c001d3dd:	83 c4 20             	add    esp,0x20
c001d3e0:	85 c0                	test   eax,eax
c001d3e2:	89 c6                	mov    esi,eax
c001d3e4:	0f 85 6c 01 00 00    	jne    c001d556 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001d3ea:	50                   	push   eax
c001d3eb:	bd 10 27 00 00       	mov    ebp,0x2710
c001d3f0:	50                   	push   eax
c001d3f1:	6a 0f                	push   0xf
c001d3f3:	6a 00                	push   0x0
c001d3f5:	01 1d b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,ebx
c001d3fb:	e8 b1 fd ff ff       	call   c001d1b1 <combineColours(unsigned char, unsigned char)>
c001d400:	5a                   	pop    edx
c001d401:	59                   	pop    ecx
c001d402:	b9 0a 00 00 00       	mov    ecx,0xa
c001d407:	0f b6 d8             	movzx  ebx,al
c001d40a:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d40f:	53                   	push   ebx
c001d410:	99                   	cdq    
c001d411:	f7 fd                	idiv   ebp
c001d413:	99                   	cdq    
c001d414:	f7 f9                	idiv   ecx
c001d416:	8d 42 30             	lea    eax,[edx+0x30]
c001d419:	0f b6 c0             	movzx  eax,al
c001d41c:	50                   	push   eax
c001d41d:	e8 7e fd ff ff       	call   c001d1a0 <combineCharAndColour(char, unsigned char)>
c001d422:	5f                   	pop    edi
c001d423:	bf e8 03 00 00       	mov    edi,0x3e8
c001d428:	5a                   	pop    edx
c001d429:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d42f:	53                   	push   ebx
c001d430:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d435:	99                   	cdq    
c001d436:	f7 ff                	idiv   edi
c001d438:	99                   	cdq    
c001d439:	f7 f9                	idiv   ecx
c001d43b:	8d 42 30             	lea    eax,[edx+0x30]
c001d43e:	0f b6 c0             	movzx  eax,al
c001d441:	50                   	push   eax
c001d442:	e8 59 fd ff ff       	call   c001d1a0 <combineCharAndColour(char, unsigned char)>
c001d447:	5f                   	pop    edi
c001d448:	bf 64 00 00 00       	mov    edi,0x64
c001d44d:	5a                   	pop    edx
c001d44e:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d454:	53                   	push   ebx
c001d455:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d45a:	99                   	cdq    
c001d45b:	f7 ff                	idiv   edi
c001d45d:	99                   	cdq    
c001d45e:	f7 f9                	idiv   ecx
c001d460:	8d 42 30             	lea    eax,[edx+0x30]
c001d463:	0f b6 c0             	movzx  eax,al
c001d466:	50                   	push   eax
c001d467:	e8 34 fd ff ff       	call   c001d1a0 <combineCharAndColour(char, unsigned char)>
c001d46c:	5a                   	pop    edx
c001d46d:	5a                   	pop    edx
c001d46e:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d474:	53                   	push   ebx
c001d475:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d47a:	99                   	cdq    
c001d47b:	f7 f9                	idiv   ecx
c001d47d:	99                   	cdq    
c001d47e:	f7 f9                	idiv   ecx
c001d480:	8d 42 30             	lea    eax,[edx+0x30]
c001d483:	0f b6 c0             	movzx  eax,al
c001d486:	50                   	push   eax
c001d487:	e8 14 fd ff ff       	call   c001d1a0 <combineCharAndColour(char, unsigned char)>
c001d48c:	5a                   	pop    edx
c001d48d:	5a                   	pop    edx
c001d48e:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d494:	53                   	push   ebx
c001d495:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d49a:	99                   	cdq    
c001d49b:	f7 f9                	idiv   ecx
c001d49d:	83 c2 30             	add    edx,0x30
c001d4a0:	0f b6 d2             	movzx  edx,dl
c001d4a3:	52                   	push   edx
c001d4a4:	e8 f7 fc ff ff       	call   c001d1a0 <combineCharAndColour(char, unsigned char)>
c001d4a9:	5a                   	pop    edx
c001d4aa:	5a                   	pop    edx
c001d4ab:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d4b1:	53                   	push   ebx
c001d4b2:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d4b7:	99                   	cdq    
c001d4b8:	f7 fd                	idiv   ebp
c001d4ba:	99                   	cdq    
c001d4bb:	f7 f9                	idiv   ecx
c001d4bd:	8d 42 30             	lea    eax,[edx+0x30]
c001d4c0:	0f b6 c0             	movzx  eax,al
c001d4c3:	50                   	push   eax
c001d4c4:	e8 d7 fc ff ff       	call   c001d1a0 <combineCharAndColour(char, unsigned char)>
c001d4c9:	5d                   	pop    ebp
c001d4ca:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d4cf:	5a                   	pop    edx
c001d4d0:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d4d6:	53                   	push   ebx
c001d4d7:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d4dc:	99                   	cdq    
c001d4dd:	f7 fd                	idiv   ebp
c001d4df:	99                   	cdq    
c001d4e0:	f7 f9                	idiv   ecx
c001d4e2:	8d 42 30             	lea    eax,[edx+0x30]
c001d4e5:	0f b6 c0             	movzx  eax,al
c001d4e8:	50                   	push   eax
c001d4e9:	e8 b2 fc ff ff       	call   c001d1a0 <combineCharAndColour(char, unsigned char)>
c001d4ee:	5d                   	pop    ebp
c001d4ef:	5a                   	pop    edx
c001d4f0:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d4f6:	53                   	push   ebx
c001d4f7:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d4fc:	99                   	cdq    
c001d4fd:	f7 ff                	idiv   edi
c001d4ff:	99                   	cdq    
c001d500:	f7 f9                	idiv   ecx
c001d502:	8d 42 30             	lea    eax,[edx+0x30]
c001d505:	0f b6 c0             	movzx  eax,al
c001d508:	50                   	push   eax
c001d509:	e8 92 fc ff ff       	call   c001d1a0 <combineCharAndColour(char, unsigned char)>
c001d50e:	5f                   	pop    edi
c001d50f:	5d                   	pop    ebp
c001d510:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d516:	53                   	push   ebx
c001d517:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d51c:	99                   	cdq    
c001d51d:	f7 f9                	idiv   ecx
c001d51f:	99                   	cdq    
c001d520:	f7 f9                	idiv   ecx
c001d522:	8d 42 30             	lea    eax,[edx+0x30]
c001d525:	0f b6 c0             	movzx  eax,al
c001d528:	50                   	push   eax
c001d529:	e8 72 fc ff ff       	call   c001d1a0 <combineCharAndColour(char, unsigned char)>
c001d52e:	5a                   	pop    edx
c001d52f:	5f                   	pop    edi
c001d530:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d536:	53                   	push   ebx
c001d537:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d53c:	99                   	cdq    
c001d53d:	f7 f9                	idiv   ecx
c001d53f:	83 c2 30             	add    edx,0x30
c001d542:	0f b6 d2             	movzx  edx,dl
c001d545:	52                   	push   edx
c001d546:	e8 55 fc ff ff       	call   c001d1a0 <combineCharAndColour(char, unsigned char)>
c001d54b:	83 c4 10             	add    esp,0x10
c001d54e:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d554:	eb 05                	jmp    c001d55b <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d556:	be 01 00 00 00       	mov    esi,0x1
c001d55b:	83 c4 0c             	add    esp,0xc
c001d55e:	89 f0                	mov    eax,esi
c001d560:	5b                   	pop    ebx
c001d561:	5e                   	pop    esi
c001d562:	5f                   	pop    edi
c001d563:	5d                   	pop    ebp
c001d564:	c3                   	ret    
c001d565:	90                   	nop

c001d566 <ATAPI::write(unsigned long long, int, void*)>:
c001d566:	b8 03 00 00 00       	mov    eax,0x3
c001d56b:	c3                   	ret    

c001d56c <ATAPI::close(int, int, void*)>:
c001d56c:	83 ec 0c             	sub    esp,0xc
c001d56f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d573:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d579:	85 c0                	test   eax,eax
c001d57b:	74 0c                	je     c001d589 <ATAPI::close(int, int, void*)+0x1d>
c001d57d:	8b 10                	mov    edx,DWORD PTR [eax]
c001d57f:	83 ec 0c             	sub    esp,0xc
c001d582:	50                   	push   eax
c001d583:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d586:	83 c4 10             	add    esp,0x10
c001d589:	31 c0                	xor    eax,eax
c001d58b:	83 c4 0c             	add    esp,0xc
c001d58e:	c3                   	ret    
c001d58f:	90                   	nop

c001d590 <ATAPI::ATAPI()>:
c001d590:	83 ec 0c             	sub    esp,0xc
c001d593:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d597:	83 ec 04             	sub    esp,0x4
c001d59a:	68 00 08 00 00       	push   0x800
c001d59f:	68 bd 34 02 c0       	push   0xc00234bd
c001d5a4:	50                   	push   eax
c001d5a5:	e8 38 f8 fe ff       	call   c000cde2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d5aa:	83 c4 10             	add    esp,0x10
c001d5ad:	ba d8 33 02 c0       	mov    edx,0xc00233d8
c001d5b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5b6:	89 10                	mov    DWORD PTR [eax],edx
c001d5b8:	90                   	nop
c001d5b9:	83 c4 0c             	add    esp,0xc
c001d5bc:	c3                   	ret    
c001d5bd:	90                   	nop

c001d5be <ATAPI::readyForCommand()>:
c001d5be:	56                   	push   esi
c001d5bf:	53                   	push   ebx
c001d5c0:	53                   	push   ebx
c001d5c1:	31 db                	xor    ebx,ebx
c001d5c3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d5c7:	51                   	push   ecx
c001d5c8:	6a 0c                	push   0xc
c001d5ca:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d5d1:	50                   	push   eax
c001d5d2:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d5d8:	e8 77 e8 ff ff       	call   c001be54 <IDE::read(unsigned char, unsigned char)>
c001d5dd:	83 c4 10             	add    esp,0x10
c001d5e0:	a8 88                	test   al,0x88
c001d5e2:	74 25                	je     c001d609 <ATAPI::readyForCommand()+0x4b>
c001d5e4:	43                   	inc    ebx
c001d5e5:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d5eb:	7e da                	jle    c001d5c7 <ATAPI::readyForCommand()+0x9>
c001d5ed:	83 ec 0c             	sub    esp,0xc
c001d5f0:	68 5e 01 00 00       	push   0x15e
c001d5f5:	e8 c6 8d ff ff       	call   c00163c0 <milliTenthSleep(unsigned int)>
c001d5fa:	83 c4 10             	add    esp,0x10
c001d5fd:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d603:	75 c2                	jne    c001d5c7 <ATAPI::readyForCommand()+0x9>
c001d605:	31 c0                	xor    eax,eax
c001d607:	eb 02                	jmp    c001d60b <ATAPI::readyForCommand()+0x4d>
c001d609:	b0 01                	mov    al,0x1
c001d60b:	5a                   	pop    edx
c001d60c:	5b                   	pop    ebx
c001d60d:	5e                   	pop    esi
c001d60e:	c3                   	ret    
c001d60f:	90                   	nop

c001d610 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d610:	55                   	push   ebp
c001d611:	57                   	push   edi
c001d612:	56                   	push   esi
c001d613:	53                   	push   ebx
c001d614:	83 ec 20             	sub    esp,0x20
c001d617:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d61b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d61f:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001d623:	6a 01                	push   0x1
c001d625:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d62c:	50                   	push   eax
c001d62d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d633:	e8 6a e9 ff ff       	call   c001bfa2 <IDE::enableIRQs(unsigned char, bool)>
c001d638:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d63f:	59                   	pop    ecx
c001d640:	5e                   	pop    esi
c001d641:	50                   	push   eax
c001d642:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d648:	e8 21 e7 ff ff       	call   c001bd6e <IDE::prepareInterrupt(unsigned char)>
c001d64d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d650:	e8 69 ff ff ff       	call   c001d5be <ATAPI::readyForCommand()>
c001d655:	83 c4 10             	add    esp,0x10
c001d658:	84 c0                	test   al,al
c001d65a:	75 0a                	jne    c001d666 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001d65c:	bb 01 00 00 00       	mov    ebx,0x1
c001d661:	e9 5f 02 00 00       	jmp    c001d8c5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d666:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d66c:	c1 e0 04             	shl    eax,0x4
c001d66f:	0f b6 c0             	movzx  eax,al
c001d672:	50                   	push   eax
c001d673:	6a 06                	push   0x6
c001d675:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d67c:	50                   	push   eax
c001d67d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d683:	e8 0c e7 ff ff       	call   c001bd94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d688:	6a 00                	push   0x0
c001d68a:	6a 01                	push   0x1
c001d68c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d693:	50                   	push   eax
c001d694:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d69a:	e8 f5 e6 ff ff       	call   c001bd94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d69f:	83 c4 20             	add    esp,0x20
c001d6a2:	0f b6 c3             	movzx  eax,bl
c001d6a5:	50                   	push   eax
c001d6a6:	0f b6 df             	movzx  ebx,bh
c001d6a9:	6a 04                	push   0x4
c001d6ab:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6b2:	50                   	push   eax
c001d6b3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6b9:	e8 d6 e6 ff ff       	call   c001bd94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6be:	53                   	push   ebx
c001d6bf:	6a 05                	push   0x5
c001d6c1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6c8:	50                   	push   eax
c001d6c9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6cf:	e8 c0 e6 ff ff       	call   c001bd94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6d4:	83 c4 20             	add    esp,0x20
c001d6d7:	68 a0 00 00 00       	push   0xa0
c001d6dc:	6a 07                	push   0x7
c001d6de:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6e5:	50                   	push   eax
c001d6e6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6ec:	e8 a3 e6 ff ff       	call   c001bd94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6f1:	83 c4 0c             	add    esp,0xc
c001d6f4:	6a 01                	push   0x1
c001d6f6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6fd:	50                   	push   eax
c001d6fe:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d704:	e8 6f f1 ff ff       	call   c001c878 <IDE::polling(unsigned char, unsigned int)>
c001d709:	83 c4 10             	add    esp,0x10
c001d70c:	0f b6 d8             	movzx  ebx,al
c001d70f:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d715:	85 db                	test   ebx,ebx
c001d717:	74 20                	je     c001d739 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001d719:	53                   	push   ebx
c001d71a:	0f b6 c0             	movzx  eax,al
c001d71d:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d724:	52                   	push   edx
c001d725:	50                   	push   eax
c001d726:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d72c:	e8 8d f0 ff ff       	call   c001c7be <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d731:	83 c4 10             	add    esp,0x10
c001d734:	e9 8c 01 00 00       	jmp    c001d8c5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d739:	52                   	push   edx
c001d73a:	0f b6 c0             	movzx  eax,al
c001d73d:	52                   	push   edx
c001d73e:	50                   	push   eax
c001d73f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d745:	e8 38 e6 ff ff       	call   c001bd82 <IDE::getBase(unsigned char)>
c001d74a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d74e:	b9 06 00 00 00       	mov    ecx,0x6
c001d753:	89 c2                	mov    edx,eax
c001d755:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d758:	89 e8                	mov    eax,ebp
c001d75a:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d75e:	83 c4 10             	add    esp,0x10
c001d761:	0f b6 c0             	movzx  eax,al
c001d764:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d768:	85 db                	test   ebx,ebx
c001d76a:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d770:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d777:	0f 84 eb 00 00 00    	je     c001d868 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001d77d:	55                   	push   ebp
c001d77e:	55                   	push   ebp
c001d77f:	52                   	push   edx
c001d780:	50                   	push   eax
c001d781:	e8 82 e7 ff ff       	call   c001bf08 <IDE::waitInterrupt(unsigned char)>
c001d786:	83 c4 10             	add    esp,0x10
c001d789:	84 c0                	test   al,al
c001d78b:	0f 84 cb fe ff ff    	je     c001d65c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d791:	56                   	push   esi
c001d792:	56                   	push   esi
c001d793:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d79a:	50                   	push   eax
c001d79b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7a1:	e8 c8 e5 ff ff       	call   c001bd6e <IDE::prepareInterrupt(unsigned char)>
c001d7a6:	83 c4 0c             	add    esp,0xc
c001d7a9:	6a 04                	push   0x4
c001d7ab:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d7b2:	50                   	push   eax
c001d7b3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7b9:	e8 96 e6 ff ff       	call   c001be54 <IDE::read(unsigned char, unsigned char)>
c001d7be:	83 c4 0c             	add    esp,0xc
c001d7c1:	6a 05                	push   0x5
c001d7c3:	89 c6                	mov    esi,eax
c001d7c5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d7cc:	50                   	push   eax
c001d7cd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7d3:	e8 7c e6 ff ff       	call   c001be54 <IDE::read(unsigned char, unsigned char)>
c001d7d8:	83 c4 10             	add    esp,0x10
c001d7db:	0f b6 e8             	movzx  ebp,al
c001d7de:	89 f0                	mov    eax,esi
c001d7e0:	c1 e5 08             	shl    ebp,0x8
c001d7e3:	0f b6 f0             	movzx  esi,al
c001d7e6:	09 f5                	or     ebp,esi
c001d7e8:	31 f6                	xor    esi,esi
c001d7ea:	d1 fd                	sar    ebp,1
c001d7ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d7f1:	74 5c                	je     c001d84f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001d7f3:	39 ee                	cmp    esi,ebp
c001d7f5:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d7fb:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d802:	75 0d                	jne    c001d811 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001d804:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001d807:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001d80b:	4b                   	dec    ebx
c001d80c:	e9 57 ff ff ff       	jmp    c001d768 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001d811:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001d815:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001d819:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001d81e:	51                   	push   ecx
c001d81f:	51                   	push   ecx
c001d820:	52                   	push   edx
c001d821:	50                   	push   eax
c001d822:	e8 5b e5 ff ff       	call   c001bd82 <IDE::getBase(unsigned char)>
c001d827:	89 c2                	mov    edx,eax
c001d829:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001d82e:	66 ef                	out    dx,ax
c001d830:	46                   	inc    esi
c001d831:	83 c4 10             	add    esp,0x10
c001d834:	eb bd                	jmp    c001d7f3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001d836:	51                   	push   ecx
c001d837:	51                   	push   ecx
c001d838:	52                   	push   edx
c001d839:	50                   	push   eax
c001d83a:	e8 43 e5 ff ff       	call   c001bd82 <IDE::getBase(unsigned char)>
c001d83f:	89 c2                	mov    edx,eax
c001d841:	66 ed                	in     ax,dx
c001d843:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001d847:	83 c4 10             	add    esp,0x10
c001d84a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001d84e:	46                   	inc    esi
c001d84f:	39 ee                	cmp    esi,ebp
c001d851:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d857:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d85e:	75 d6                	jne    c001d836 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001d860:	01 f6                	add    esi,esi
c001d862:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001d866:	eb a3                	jmp    c001d80b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001d868:	51                   	push   ecx
c001d869:	51                   	push   ecx
c001d86a:	52                   	push   edx
c001d86b:	50                   	push   eax
c001d86c:	e8 97 e6 ff ff       	call   c001bf08 <IDE::waitInterrupt(unsigned char)>
c001d871:	83 c4 10             	add    esp,0x10
c001d874:	84 c0                	test   al,al
c001d876:	0f 84 e0 fd ff ff    	je     c001d65c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d87c:	52                   	push   edx
c001d87d:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d882:	52                   	push   edx
c001d883:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d88a:	50                   	push   eax
c001d88b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d891:	e8 d8 e4 ff ff       	call   c001bd6e <IDE::prepareInterrupt(unsigned char)>
c001d896:	83 c4 10             	add    esp,0x10
c001d899:	50                   	push   eax
c001d89a:	50                   	push   eax
c001d89b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d8a2:	50                   	push   eax
c001d8a3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d8a9:	e8 d4 e4 ff ff       	call   c001bd82 <IDE::getBase(unsigned char)>
c001d8ae:	8d 50 07             	lea    edx,[eax+0x7]
c001d8b1:	ec                   	in     al,dx
c001d8b2:	83 c4 10             	add    esp,0x10
c001d8b5:	a8 88                	test   al,0x88
c001d8b7:	74 0a                	je     c001d8c3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001d8b9:	4b                   	dec    ebx
c001d8ba:	75 dd                	jne    c001d899 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001d8bc:	bb 02 00 00 00       	mov    ebx,0x2
c001d8c1:	eb 02                	jmp    c001d8c5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d8c3:	31 db                	xor    ebx,ebx
c001d8c5:	83 c4 1c             	add    esp,0x1c
c001d8c8:	89 d8                	mov    eax,ebx
c001d8ca:	5b                   	pop    ebx
c001d8cb:	5e                   	pop    esi
c001d8cc:	5f                   	pop    edi
c001d8cd:	5d                   	pop    ebp
c001d8ce:	c3                   	ret    
c001d8cf:	90                   	nop

c001d8d0 <ATAPI::diskRemoved()>:
c001d8d0:	53                   	push   ebx
c001d8d1:	83 ec 14             	sub    esp,0x14
c001d8d4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d8d8:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d8df:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d8e5:	e8 9a 04 ff ff       	call   c000dd84 <LogicalDisk::unmount()>
c001d8ea:	58                   	pop    eax
c001d8eb:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d8f1:	e8 72 0e ff ff       	call   c000e768 <VCache::writeWriteBuffer()>
c001d8f6:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d8fc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d900:	83 c4 18             	add    esp,0x18
c001d903:	5b                   	pop    ebx
c001d904:	e9 4f 0e ff ff       	jmp    c000e758 <VCache::invalidateReadBuffer()>
c001d909:	90                   	nop

c001d90a <ATAPI::eject()>:
c001d90a:	57                   	push   edi
c001d90b:	b9 03 00 00 00       	mov    ecx,0x3
c001d910:	53                   	push   ebx
c001d911:	83 ec 14             	sub    esp,0x14
c001d914:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d918:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d91c:	fc                   	cld    
c001d91d:	31 c0                	xor    eax,eax
c001d91f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d921:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d926:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d92b:	50                   	push   eax
c001d92c:	50                   	push   eax
c001d92d:	6a 00                	push   0x0
c001d92f:	6a 00                	push   0x0
c001d931:	6a 00                	push   0x0
c001d933:	6a 02                	push   0x2
c001d935:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d939:	50                   	push   eax
c001d93a:	53                   	push   ebx
c001d93b:	e8 d0 fc ff ff       	call   c001d610 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d940:	83 c4 14             	add    esp,0x14
c001d943:	53                   	push   ebx
c001d944:	e8 87 ff ff ff       	call   c001d8d0 <ATAPI::diskRemoved()>
c001d949:	83 c4 24             	add    esp,0x24
c001d94c:	31 c0                	xor    eax,eax
c001d94e:	5b                   	pop    ebx
c001d94f:	5f                   	pop    edi
c001d950:	c3                   	ret    
c001d951:	90                   	nop

c001d952 <ATAPI::diskInserted()>:
c001d952:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d956:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d95d:	c3                   	ret    

c001d95e <ATAPI::detectMedia()>:
c001d95e:	56                   	push   esi
c001d95f:	53                   	push   ebx
c001d960:	83 ec 28             	sub    esp,0x28
c001d963:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d967:	6a 0c                	push   0xc
c001d969:	6a 00                	push   0x0
c001d96b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d96f:	56                   	push   esi
c001d970:	e8 7b 2b fe ff       	call   c00004f0 <memset>
c001d975:	58                   	pop    eax
c001d976:	5a                   	pop    edx
c001d977:	6a 00                	push   0x0
c001d979:	6a 00                	push   0x0
c001d97b:	6a 00                	push   0x0
c001d97d:	6a 00                	push   0x0
c001d97f:	56                   	push   esi
c001d980:	53                   	push   ebx
c001d981:	e8 8a fc ff ff       	call   c001d610 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d986:	83 c4 1c             	add    esp,0x1c
c001d989:	6a 0c                	push   0xc
c001d98b:	6a 00                	push   0x0
c001d98d:	56                   	push   esi
c001d98e:	e8 5d 2b fe ff       	call   c00004f0 <memset>
c001d993:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d998:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d99d:	59                   	pop    ecx
c001d99e:	58                   	pop    eax
c001d99f:	6a 01                	push   0x1
c001d9a1:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d9a5:	50                   	push   eax
c001d9a6:	6a 00                	push   0x0
c001d9a8:	6a 12                	push   0x12
c001d9aa:	56                   	push   esi
c001d9ab:	53                   	push   ebx
c001d9ac:	e8 5f fc ff ff       	call   c001d610 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d9b1:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d9b5:	83 c4 20             	add    esp,0x20
c001d9b8:	83 e0 7f             	and    eax,0x7f
c001d9bb:	83 f8 70             	cmp    eax,0x70
c001d9be:	74 15                	je     c001d9d5 <ATAPI::detectMedia()+0x77>
c001d9c0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d9c7:	75 0c                	jne    c001d9d5 <ATAPI::detectMedia()+0x77>
c001d9c9:	83 ec 0c             	sub    esp,0xc
c001d9cc:	53                   	push   ebx
c001d9cd:	e8 80 ff ff ff       	call   c001d952 <ATAPI::diskInserted()>
c001d9d2:	83 c4 10             	add    esp,0x10
c001d9d5:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d9d9:	83 e0 0f             	and    eax,0xf
c001d9dc:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d9e1:	0f b6 c0             	movzx  eax,al
c001d9e4:	75 19                	jne    c001d9ff <ATAPI::detectMedia()+0xa1>
c001d9e6:	83 f8 02             	cmp    eax,0x2
c001d9e9:	75 14                	jne    c001d9ff <ATAPI::detectMedia()+0xa1>
c001d9eb:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d9f2:	74 24                	je     c001da18 <ATAPI::detectMedia()+0xba>
c001d9f4:	83 ec 0c             	sub    esp,0xc
c001d9f7:	53                   	push   ebx
c001d9f8:	e8 d3 fe ff ff       	call   c001d8d0 <ATAPI::diskRemoved()>
c001d9fd:	eb 16                	jmp    c001da15 <ATAPI::detectMedia()+0xb7>
c001d9ff:	85 c0                	test   eax,eax
c001da01:	75 15                	jne    c001da18 <ATAPI::detectMedia()+0xba>
c001da03:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001da0a:	75 0c                	jne    c001da18 <ATAPI::detectMedia()+0xba>
c001da0c:	83 ec 0c             	sub    esp,0xc
c001da0f:	53                   	push   ebx
c001da10:	e8 3d ff ff ff       	call   c001d952 <ATAPI::diskInserted()>
c001da15:	83 c4 10             	add    esp,0x10
c001da18:	83 c4 24             	add    esp,0x24
c001da1b:	5b                   	pop    ebx
c001da1c:	5e                   	pop    esi
c001da1d:	c3                   	ret    

c001da1e <ATAPI::open(int, int, void*)>:
c001da1e:	56                   	push   esi
c001da1f:	53                   	push   ebx
c001da20:	50                   	push   eax
c001da21:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001da25:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001da29:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001da2d:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001da33:	c1 e0 06             	shl    eax,0x6
c001da36:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001da3c:	01 d0                	add    eax,edx
c001da3e:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001da45:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001da4b:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001da52:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001da5c:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001da63:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001da69:	6a 04                	push   0x4
c001da6b:	6a 0c                	push   0xc
c001da6d:	51                   	push   ecx
c001da6e:	52                   	push   edx
c001da6f:	e8 20 e3 ff ff       	call   c001bd94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001da74:	90                   	nop
c001da75:	90                   	nop
c001da76:	6a 00                	push   0x0
c001da78:	6a 0c                	push   0xc
c001da7a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001da81:	50                   	push   eax
c001da82:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001da88:	e8 07 e3 ff ff       	call   c001bd94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001da8d:	83 c4 14             	add    esp,0x14
c001da90:	68 78 01 00 00       	push   0x178
c001da95:	e8 39 a0 fe ff       	call   c0007ad3 <malloc>
c001da9a:	83 c4 0c             	add    esp,0xc
c001da9d:	6a 00                	push   0x0
c001da9f:	68 ff ff ff 7f       	push   0x7fffffff
c001daa4:	6a 00                	push   0x0
c001daa6:	6a 00                	push   0x0
c001daa8:	53                   	push   ebx
c001daa9:	68 6f 35 02 c0       	push   0xc002356f
c001daae:	89 c6                	mov    esi,eax
c001dab0:	50                   	push   eax
c001dab1:	e8 0c 01 ff ff       	call   c000dbc2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001dab6:	83 c4 14             	add    esp,0x14
c001dab9:	56                   	push   esi
c001daba:	e8 c3 01 ff ff       	call   c000dc82 <LogicalDisk::assignDriveLetter()>
c001dabf:	5a                   	pop    edx
c001dac0:	59                   	pop    ecx
c001dac1:	0f be c0             	movsx  eax,al
c001dac4:	50                   	push   eax
c001dac5:	68 c0 33 02 c0       	push   0xc00233c0
c001daca:	e8 3b ce fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001dacf:	58                   	pop    eax
c001dad0:	5a                   	pop    edx
c001dad1:	56                   	push   esi
c001dad2:	53                   	push   ebx
c001dad3:	e8 3c ef fe ff       	call   c000ca14 <Device::addChild(Device*)>
c001dad8:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001dade:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dae1:	e8 64 f3 fe ff       	call   c000ce4a <PhysicalDisk::startCache()>
c001dae6:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001daed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001daf0:	e8 69 fe ff ff       	call   c001d95e <ATAPI::detectMedia()>
c001daf5:	83 c4 14             	add    esp,0x14
c001daf8:	31 c0                	xor    eax,eax
c001dafa:	5b                   	pop    ebx
c001dafb:	5e                   	pop    esi
c001dafc:	c3                   	ret    
c001dafd:	90                   	nop

c001dafe <ATAPI::read(unsigned long long, int, void*)>:
c001dafe:	55                   	push   ebp
c001daff:	57                   	push   edi
c001db00:	56                   	push   esi
c001db01:	53                   	push   ebx
c001db02:	83 ec 1c             	sub    esp,0x1c
c001db05:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001db09:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001db0d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001db11:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001db18:	74 3c                	je     c001db56 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001db1a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001db1e:	b9 03 00 00 00       	mov    ecx,0x3
c001db23:	fc                   	cld    
c001db24:	31 c0                	xor    eax,eax
c001db26:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001db28:	89 e8                	mov    eax,ebp
c001db2a:	0f ce                	bswap  esi
c001db2c:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001db30:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001db35:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001db39:	50                   	push   eax
c001db3a:	50                   	push   eax
c001db3b:	55                   	push   ebp
c001db3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001db40:	c1 e5 0b             	shl    ebp,0xb
c001db43:	6a 00                	push   0x0
c001db45:	55                   	push   ebp
c001db46:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001db4a:	50                   	push   eax
c001db4b:	53                   	push   ebx
c001db4c:	e8 bf fa ff ff       	call   c001d610 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001db51:	83 c4 20             	add    esp,0x20
c001db54:	eb 1a                	jmp    c001db70 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001db56:	83 ec 0c             	sub    esp,0xc
c001db59:	53                   	push   ebx
c001db5a:	e8 ff fd ff ff       	call   c001d95e <ATAPI::detectMedia()>
c001db5f:	83 c4 10             	add    esp,0x10
c001db62:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001db69:	75 af                	jne    c001db1a <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001db6b:	b8 02 00 00 00       	mov    eax,0x2
c001db70:	83 c4 1c             	add    esp,0x1c
c001db73:	5b                   	pop    ebx
c001db74:	5e                   	pop    esi
c001db75:	5f                   	pop    edi
c001db76:	5d                   	pop    ebp
c001db77:	c3                   	ret    

c001db78 <SATA::close(int, int, void*)>:
c001db78:	83 ec 0c             	sub    esp,0xc
c001db7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db7f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001db85:	85 c0                	test   eax,eax
c001db87:	74 0c                	je     c001db95 <SATA::close(int, int, void*)+0x1d>
c001db89:	8b 10                	mov    edx,DWORD PTR [eax]
c001db8b:	83 ec 0c             	sub    esp,0xc
c001db8e:	50                   	push   eax
c001db8f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001db92:	83 c4 10             	add    esp,0x10
c001db95:	31 c0                	xor    eax,eax
c001db97:	83 c4 0c             	add    esp,0xc
c001db9a:	c3                   	ret    
c001db9b:	90                   	nop

c001db9c <SATA::powerSaving(PowerSavingLevel)>:
c001db9c:	c3                   	ret    
c001db9d:	90                   	nop

c001db9e <SATA::open(int, int, void*)>:
c001db9e:	56                   	push   esi
c001db9f:	53                   	push   ebx
c001dba0:	50                   	push   eax
c001dba1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dba5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dba9:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001dbb3:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001dbb9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dbbd:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001dbc7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001dbd1:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001dbd8:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001dbde:	e8 ff a1 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001dbe3:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001dbe9:	89 c6                	mov    esi,eax
c001dbeb:	e8 f2 a1 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001dbf0:	81 c6 00 10 00 00    	add    esi,0x1000
c001dbf6:	39 c6                	cmp    esi,eax
c001dbf8:	74 10                	je     c001dc0a <SATA::open(int, int, void*)+0x6c>
c001dbfa:	83 ec 0c             	sub    esp,0xc
c001dbfd:	68 08 34 02 c0       	push   0xc0023408
c001dc02:	e8 d4 39 ff ff       	call   c00115db <KePanic(char const*)>
c001dc07:	83 c4 10             	add    esp,0x10
c001dc0a:	83 ec 0c             	sub    esp,0xc
c001dc0d:	6a 02                	push   0x2
c001dc0f:	e8 e1 b9 fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001dc14:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001dc1a:	6a 03                	push   0x3
c001dc1c:	50                   	push   eax
c001dc1d:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001dc23:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001dc29:	e8 d0 c0 fe ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001dc2e:	83 c4 14             	add    esp,0x14
c001dc31:	53                   	push   ebx
c001dc32:	e8 13 f2 fe ff       	call   c000ce4a <PhysicalDisk::startCache()>
c001dc37:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dc3a:	e8 57 04 ff ff       	call   c000e096 <createPartitionsForDisk(PhysicalDisk*)>
c001dc3f:	83 c4 14             	add    esp,0x14
c001dc42:	31 c0                	xor    eax,eax
c001dc44:	5b                   	pop    ebx
c001dc45:	5e                   	pop    esi
c001dc46:	c3                   	ret    
c001dc47:	90                   	nop

c001dc48 <SATA::SATA()>:
c001dc48:	83 ec 0c             	sub    esp,0xc
c001dc4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc4f:	83 ec 04             	sub    esp,0x4
c001dc52:	68 00 02 00 00       	push   0x200
c001dc57:	68 1c 34 02 c0       	push   0xc002341c
c001dc5c:	50                   	push   eax
c001dc5d:	e8 80 f1 fe ff       	call   c000cde2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dc62:	83 c4 10             	add    esp,0x10
c001dc65:	ba 8c 34 02 c0       	mov    edx,0xc002348c
c001dc6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc6e:	89 10                	mov    DWORD PTR [eax],edx
c001dc70:	90                   	nop
c001dc71:	83 c4 0c             	add    esp,0xc
c001dc74:	c3                   	ret    
c001dc75:	90                   	nop

c001dc76 <SATA::access(unsigned long long, int, void*, bool)>:
c001dc76:	55                   	push   ebp
c001dc77:	57                   	push   edi
c001dc78:	56                   	push   esi
c001dc79:	53                   	push   ebx
c001dc7a:	83 ec 2c             	sub    esp,0x2c
c001dc7d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001dc81:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001dc86:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001dc8a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001dc8e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001dc92:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dc96:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dc9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dc9e:	7e 10                	jle    c001dcb0 <SATA::access(unsigned long long, int, void*, bool)+0x3a>
c001dca0:	83 ec 0c             	sub    esp,0xc
c001dca3:	68 2c 34 02 c0       	push   0xc002342c
c001dca8:	e8 2e 39 ff ff       	call   c00115db <KePanic(char const*)>
c001dcad:	83 c4 10             	add    esp,0x10
c001dcb0:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001dcb6:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001dcbc:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001dcc2:	89 e8                	mov    eax,ebp
c001dcc4:	c1 e0 07             	shl    eax,0x7
c001dcc7:	01 d0                	add    eax,edx
c001dcc9:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001dcd3:	8d 45 02             	lea    eax,[ebp+0x2]
c001dcd6:	51                   	push   ecx
c001dcd7:	c1 e0 07             	shl    eax,0x7
c001dcda:	51                   	push   ecx
c001dcdb:	01 d0                	add    eax,edx
c001dcdd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001dce1:	50                   	push   eax
c001dce2:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001dce8:	e8 6b ec ff ff       	call   c001c958 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001dced:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001dcf1:	83 c4 10             	add    esp,0x10
c001dcf4:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001dcf9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dcfd:	0f 84 5b 01 00 00    	je     c001de5e <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001dd03:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001dd07:	c1 e0 09             	shl    eax,0x9
c001dd0a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001dd0f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dd13:	74 0e                	je     c001dd23 <SATA::access(unsigned long long, int, void*, bool)+0xad>
c001dd15:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001dd1b:	89 c1                	mov    ecx,eax
c001dd1d:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001dd21:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dd23:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001dd27:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001dd2d:	8d 45 02             	lea    eax,[ebp+0x2]
c001dd30:	c1 e0 07             	shl    eax,0x7
c001dd33:	01 d0                	add    eax,edx
c001dd35:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd37:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001dd3d:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001dd43:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dd47:	c1 e1 05             	shl    ecx,0x5
c001dd4a:	01 c8                	add    eax,ecx
c001dd4c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001dd50:	83 e1 01             	and    ecx,0x1
c001dd53:	89 ce                	mov    esi,ecx
c001dd55:	8a 08                	mov    cl,BYTE PTR [eax]
c001dd57:	c1 e6 06             	shl    esi,0x6
c001dd5a:	83 e1 bf             	and    ecx,0xffffffbf
c001dd5d:	09 f1                	or     ecx,esi
c001dd5f:	88 08                	mov    BYTE PTR [eax],cl
c001dd61:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dd63:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001dd69:	81 c9 05 00 01 00    	or     ecx,0x10005
c001dd6f:	89 08                	mov    DWORD PTR [eax],ecx
c001dd71:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001dd77:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001dd7d:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001dd83:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001dd86:	50                   	push   eax
c001dd87:	68 90 00 00 00       	push   0x90
c001dd8c:	6a 00                	push   0x0
c001dd8e:	56                   	push   esi
c001dd8f:	e8 5c 27 fe ff       	call   c00004f0 <memset>
c001dd94:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001dd9a:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001dda0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dda4:	83 c4 10             	add    esp,0x10
c001dda7:	48                   	dec    eax
c001dda8:	25 ff ff 3f 00       	and    eax,0x3fffff
c001ddad:	89 c1                	mov    ecx,eax
c001ddaf:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001ddb5:	25 00 00 c0 ff       	and    eax,0xffc00000
c001ddba:	09 c8                	or     eax,ecx
c001ddbc:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001ddc2:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001ddc8:	83 c8 80             	or     eax,0xffffff80
c001ddcb:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001ddd1:	66 8b 06             	mov    ax,WORD PTR [esi]
c001ddd4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ddd8:	25 00 7f 00 00       	and    eax,0x7f00
c001dddd:	0d 27 80 ff ff       	or     eax,0xffff8027
c001dde2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001dde7:	66 89 06             	mov    WORD PTR [esi],ax
c001ddea:	b0 35                	mov    al,0x35
c001ddec:	75 02                	jne    c001ddf0 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001ddee:	b0 25                	mov    al,0x25
c001ddf0:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001ddf3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ddf7:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001ddfb:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001ddff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001de03:	c1 e8 10             	shr    eax,0x10
c001de06:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001de09:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001de0d:	c1 e8 18             	shr    eax,0x18
c001de10:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001de13:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001de17:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001de1a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001de1e:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001de21:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001de25:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001de29:	89 ee                	mov    esi,ebp
c001de2b:	31 c0                	xor    eax,eax
c001de2d:	c1 e6 07             	shl    esi,0x7
c001de30:	01 d6                	add    esi,edx
c001de32:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001de38:	80 e1 88             	and    cl,0x88
c001de3b:	74 0a                	je     c001de47 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001de3d:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001de42:	74 0a                	je     c001de4e <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001de44:	40                   	inc    eax
c001de45:	eb eb                	jmp    c001de32 <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001de47:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001de4c:	75 17                	jne    c001de65 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001de4e:	83 ec 0c             	sub    esp,0xc
c001de51:	68 65 34 02 c0       	push   0xc0023465
c001de56:	e8 af ca fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001de5b:	83 c4 10             	add    esp,0x10
c001de5e:	b8 01 00 00 00       	mov    eax,0x1
c001de63:	eb 5b                	jmp    c001dec0 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001de65:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001de69:	c1 e5 07             	shl    ebp,0x7
c001de6c:	b8 01 00 00 00       	mov    eax,0x1
c001de71:	01 ea                	add    edx,ebp
c001de73:	d3 e0                	shl    eax,cl
c001de75:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001de7b:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001de81:	85 c8                	test   eax,ecx
c001de83:	74 16                	je     c001de9b <SATA::access(unsigned long long, int, void*, bool)+0x225>
c001de85:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001de8b:	0f ba e1 1e          	bt     ecx,0x1e
c001de8f:	73 ea                	jae    c001de7b <SATA::access(unsigned long long, int, void*, bool)+0x205>
c001de91:	83 ec 0c             	sub    esp,0xc
c001de94:	68 73 34 02 c0       	push   0xc0023473
c001de99:	eb bb                	jmp    c001de56 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001de9b:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001dea1:	0f ba e0 1e          	bt     eax,0x1e
c001dea5:	72 b7                	jb     c001de5e <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001dea7:	31 c0                	xor    eax,eax
c001dea9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001deae:	75 10                	jne    c001dec0 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001deb0:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001deb6:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001deba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001debe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dec0:	83 c4 2c             	add    esp,0x2c
c001dec3:	5b                   	pop    ebx
c001dec4:	5e                   	pop    esi
c001dec5:	5f                   	pop    edi
c001dec6:	5d                   	pop    ebp
c001dec7:	c3                   	ret    

c001dec8 <SATA::read(unsigned long long, int, void*)>:
c001dec8:	55                   	push   ebp
c001dec9:	57                   	push   edi
c001deca:	56                   	push   esi
c001decb:	be 04 00 00 00       	mov    esi,0x4
c001ded0:	53                   	push   ebx
c001ded1:	83 ec 0c             	sub    esp,0xc
c001ded4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ded8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001dedc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dee0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001dee4:	8d 7b ff             	lea    edi,[ebx-0x1]
c001dee7:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001deed:	0f 87 1a 02 00 00    	ja     c001e10d <SATA::read(unsigned long long, int, void*)+0x245>
c001def3:	85 c9                	test   ecx,ecx
c001def5:	be 06 00 00 00       	mov    esi,0x6
c001defa:	0f 84 0d 02 00 00    	je     c001e10d <SATA::read(unsigned long long, int, void*)+0x245>
c001df00:	56                   	push   esi
c001df01:	56                   	push   esi
c001df02:	6a 00                	push   0x0
c001df04:	51                   	push   ecx
c001df05:	53                   	push   ebx
c001df06:	52                   	push   edx
c001df07:	50                   	push   eax
c001df08:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001df0c:	e8 65 fd ff ff       	call   c001dc76 <SATA::access(unsigned long long, int, void*, bool)>
c001df11:	83 c4 20             	add    esp,0x20
c001df14:	85 c0                	test   eax,eax
c001df16:	89 c6                	mov    esi,eax
c001df18:	0f 85 ea 01 00 00    	jne    c001e108 <SATA::read(unsigned long long, int, void*)+0x240>
c001df1e:	50                   	push   eax
c001df1f:	50                   	push   eax
c001df20:	6a 0f                	push   0xf
c001df22:	6a 00                	push   0x0
c001df24:	01 1d b4 d0 02 c0    	add    DWORD PTR ds:0xc002d0b4,ebx
c001df2a:	bb 0a 00 00 00       	mov    ebx,0xa
c001df2f:	e8 7d f2 ff ff       	call   c001d1b1 <combineColours(unsigned char, unsigned char)>
c001df34:	5a                   	pop    edx
c001df35:	59                   	pop    ecx
c001df36:	b9 10 27 00 00       	mov    ecx,0x2710
c001df3b:	0f b6 c0             	movzx  eax,al
c001df3e:	50                   	push   eax
c001df3f:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001df44:	99                   	cdq    
c001df45:	f7 f9                	idiv   ecx
c001df47:	99                   	cdq    
c001df48:	f7 fb                	idiv   ebx
c001df4a:	8d 42 30             	lea    eax,[edx+0x30]
c001df4d:	0f b6 c0             	movzx  eax,al
c001df50:	50                   	push   eax
c001df51:	e8 4a f2 ff ff       	call   c001d1a0 <combineCharAndColour(char, unsigned char)>
c001df56:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001df5c:	5f                   	pop    edi
c001df5d:	5d                   	pop    ebp
c001df5e:	bd e8 03 00 00       	mov    ebp,0x3e8
c001df63:	6a 0f                	push   0xf
c001df65:	6a 00                	push   0x0
c001df67:	e8 45 f2 ff ff       	call   c001d1b1 <combineColours(unsigned char, unsigned char)>
c001df6c:	5a                   	pop    edx
c001df6d:	59                   	pop    ecx
c001df6e:	0f b6 c0             	movzx  eax,al
c001df71:	50                   	push   eax
c001df72:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001df77:	99                   	cdq    
c001df78:	f7 fd                	idiv   ebp
c001df7a:	99                   	cdq    
c001df7b:	f7 fb                	idiv   ebx
c001df7d:	8d 42 30             	lea    eax,[edx+0x30]
c001df80:	0f b6 c0             	movzx  eax,al
c001df83:	50                   	push   eax
c001df84:	e8 17 f2 ff ff       	call   c001d1a0 <combineCharAndColour(char, unsigned char)>
c001df89:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001df8f:	5f                   	pop    edi
c001df90:	bf 64 00 00 00       	mov    edi,0x64
c001df95:	58                   	pop    eax
c001df96:	6a 0f                	push   0xf
c001df98:	6a 00                	push   0x0
c001df9a:	e8 12 f2 ff ff       	call   c001d1b1 <combineColours(unsigned char, unsigned char)>
c001df9f:	5a                   	pop    edx
c001dfa0:	59                   	pop    ecx
c001dfa1:	0f b6 c0             	movzx  eax,al
c001dfa4:	50                   	push   eax
c001dfa5:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001dfaa:	99                   	cdq    
c001dfab:	f7 ff                	idiv   edi
c001dfad:	99                   	cdq    
c001dfae:	f7 fb                	idiv   ebx
c001dfb0:	8d 42 30             	lea    eax,[edx+0x30]
c001dfb3:	0f b6 c0             	movzx  eax,al
c001dfb6:	50                   	push   eax
c001dfb7:	e8 e4 f1 ff ff       	call   c001d1a0 <combineCharAndColour(char, unsigned char)>
c001dfbc:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001dfc2:	58                   	pop    eax
c001dfc3:	5a                   	pop    edx
c001dfc4:	6a 0f                	push   0xf
c001dfc6:	6a 00                	push   0x0
c001dfc8:	e8 e4 f1 ff ff       	call   c001d1b1 <combineColours(unsigned char, unsigned char)>
c001dfcd:	59                   	pop    ecx
c001dfce:	5a                   	pop    edx
c001dfcf:	0f b6 c0             	movzx  eax,al
c001dfd2:	50                   	push   eax
c001dfd3:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001dfd8:	99                   	cdq    
c001dfd9:	f7 fb                	idiv   ebx
c001dfdb:	99                   	cdq    
c001dfdc:	f7 fb                	idiv   ebx
c001dfde:	8d 42 30             	lea    eax,[edx+0x30]
c001dfe1:	0f b6 c0             	movzx  eax,al
c001dfe4:	50                   	push   eax
c001dfe5:	e8 b6 f1 ff ff       	call   c001d1a0 <combineCharAndColour(char, unsigned char)>
c001dfea:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001dff0:	59                   	pop    ecx
c001dff1:	58                   	pop    eax
c001dff2:	6a 0f                	push   0xf
c001dff4:	6a 00                	push   0x0
c001dff6:	e8 b6 f1 ff ff       	call   c001d1b1 <combineColours(unsigned char, unsigned char)>
c001dffb:	5a                   	pop    edx
c001dffc:	59                   	pop    ecx
c001dffd:	0f b6 c0             	movzx  eax,al
c001e000:	50                   	push   eax
c001e001:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e006:	99                   	cdq    
c001e007:	f7 fb                	idiv   ebx
c001e009:	83 c2 30             	add    edx,0x30
c001e00c:	0f b6 d2             	movzx  edx,dl
c001e00f:	52                   	push   edx
c001e010:	e8 8b f1 ff ff       	call   c001d1a0 <combineCharAndColour(char, unsigned char)>
c001e015:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001e01b:	58                   	pop    eax
c001e01c:	5a                   	pop    edx
c001e01d:	6a 0f                	push   0xf
c001e01f:	6a 00                	push   0x0
c001e021:	e8 8b f1 ff ff       	call   c001d1b1 <combineColours(unsigned char, unsigned char)>
c001e026:	59                   	pop    ecx
c001e027:	b9 10 27 00 00       	mov    ecx,0x2710
c001e02c:	5a                   	pop    edx
c001e02d:	0f b6 c0             	movzx  eax,al
c001e030:	50                   	push   eax
c001e031:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e036:	99                   	cdq    
c001e037:	f7 f9                	idiv   ecx
c001e039:	99                   	cdq    
c001e03a:	f7 fb                	idiv   ebx
c001e03c:	8d 42 30             	lea    eax,[edx+0x30]
c001e03f:	0f b6 c0             	movzx  eax,al
c001e042:	50                   	push   eax
c001e043:	e8 58 f1 ff ff       	call   c001d1a0 <combineCharAndColour(char, unsigned char)>
c001e048:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e04e:	59                   	pop    ecx
c001e04f:	58                   	pop    eax
c001e050:	6a 0f                	push   0xf
c001e052:	6a 00                	push   0x0
c001e054:	e8 58 f1 ff ff       	call   c001d1b1 <combineColours(unsigned char, unsigned char)>
c001e059:	5a                   	pop    edx
c001e05a:	59                   	pop    ecx
c001e05b:	0f b6 c0             	movzx  eax,al
c001e05e:	50                   	push   eax
c001e05f:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e064:	99                   	cdq    
c001e065:	f7 fd                	idiv   ebp
c001e067:	99                   	cdq    
c001e068:	f7 fb                	idiv   ebx
c001e06a:	8d 42 30             	lea    eax,[edx+0x30]
c001e06d:	0f b6 c0             	movzx  eax,al
c001e070:	50                   	push   eax
c001e071:	e8 2a f1 ff ff       	call   c001d1a0 <combineCharAndColour(char, unsigned char)>
c001e076:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e07c:	5d                   	pop    ebp
c001e07d:	58                   	pop    eax
c001e07e:	6a 0f                	push   0xf
c001e080:	6a 00                	push   0x0
c001e082:	e8 2a f1 ff ff       	call   c001d1b1 <combineColours(unsigned char, unsigned char)>
c001e087:	5a                   	pop    edx
c001e088:	59                   	pop    ecx
c001e089:	0f b6 c0             	movzx  eax,al
c001e08c:	50                   	push   eax
c001e08d:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e092:	99                   	cdq    
c001e093:	f7 ff                	idiv   edi
c001e095:	99                   	cdq    
c001e096:	f7 fb                	idiv   ebx
c001e098:	8d 42 30             	lea    eax,[edx+0x30]
c001e09b:	0f b6 c0             	movzx  eax,al
c001e09e:	50                   	push   eax
c001e09f:	e8 fc f0 ff ff       	call   c001d1a0 <combineCharAndColour(char, unsigned char)>
c001e0a4:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e0aa:	5f                   	pop    edi
c001e0ab:	5d                   	pop    ebp
c001e0ac:	6a 0f                	push   0xf
c001e0ae:	6a 00                	push   0x0
c001e0b0:	e8 fc f0 ff ff       	call   c001d1b1 <combineColours(unsigned char, unsigned char)>
c001e0b5:	5a                   	pop    edx
c001e0b6:	59                   	pop    ecx
c001e0b7:	0f b6 c0             	movzx  eax,al
c001e0ba:	50                   	push   eax
c001e0bb:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e0c0:	99                   	cdq    
c001e0c1:	f7 fb                	idiv   ebx
c001e0c3:	99                   	cdq    
c001e0c4:	f7 fb                	idiv   ebx
c001e0c6:	8d 42 30             	lea    eax,[edx+0x30]
c001e0c9:	0f b6 c0             	movzx  eax,al
c001e0cc:	50                   	push   eax
c001e0cd:	e8 ce f0 ff ff       	call   c001d1a0 <combineCharAndColour(char, unsigned char)>
c001e0d2:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e0d8:	5f                   	pop    edi
c001e0d9:	5d                   	pop    ebp
c001e0da:	6a 0f                	push   0xf
c001e0dc:	6a 00                	push   0x0
c001e0de:	e8 ce f0 ff ff       	call   c001d1b1 <combineColours(unsigned char, unsigned char)>
c001e0e3:	5a                   	pop    edx
c001e0e4:	59                   	pop    ecx
c001e0e5:	0f b6 c0             	movzx  eax,al
c001e0e8:	50                   	push   eax
c001e0e9:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e0ee:	99                   	cdq    
c001e0ef:	f7 fb                	idiv   ebx
c001e0f1:	83 c2 30             	add    edx,0x30
c001e0f4:	0f b6 d2             	movzx  edx,dl
c001e0f7:	52                   	push   edx
c001e0f8:	e8 a3 f0 ff ff       	call   c001d1a0 <combineCharAndColour(char, unsigned char)>
c001e0fd:	83 c4 10             	add    esp,0x10
c001e100:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e106:	eb 05                	jmp    c001e10d <SATA::read(unsigned long long, int, void*)+0x245>
c001e108:	be 01 00 00 00       	mov    esi,0x1
c001e10d:	83 c4 0c             	add    esp,0xc
c001e110:	89 f0                	mov    eax,esi
c001e112:	5b                   	pop    ebx
c001e113:	5e                   	pop    esi
c001e114:	5f                   	pop    edi
c001e115:	5d                   	pop    ebp
c001e116:	c3                   	ret    
c001e117:	90                   	nop

c001e118 <SATA::write(unsigned long long, int, void*)>:
c001e118:	55                   	push   ebp
c001e119:	57                   	push   edi
c001e11a:	56                   	push   esi
c001e11b:	53                   	push   ebx
c001e11c:	83 ec 0c             	sub    esp,0xc
c001e11f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e123:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e127:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e12b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e12f:	8d 70 ff             	lea    esi,[eax-0x1]
c001e132:	b8 04 00 00 00       	mov    eax,0x4
c001e137:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001e13d:	0f 87 2c 02 00 00    	ja     c001e36f <SATA::write(unsigned long long, int, void*)+0x257>
c001e143:	85 db                	test   ebx,ebx
c001e145:	b8 06 00 00 00       	mov    eax,0x6
c001e14a:	0f 84 1f 02 00 00    	je     c001e36f <SATA::write(unsigned long long, int, void*)+0x257>
c001e150:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001e154:	c1 e6 09             	shl    esi,0x9
c001e157:	01 de                	add    esi,ebx
c001e159:	50                   	push   eax
c001e15a:	89 d7                	mov    edi,edx
c001e15c:	50                   	push   eax
c001e15d:	83 c7 01             	add    edi,0x1
c001e160:	6a 01                	push   0x1
c001e162:	89 cd                	mov    ebp,ecx
c001e164:	53                   	push   ebx
c001e165:	83 d5 00             	adc    ebp,0x0
c001e168:	6a 01                	push   0x1
c001e16a:	81 c3 00 02 00 00    	add    ebx,0x200
c001e170:	51                   	push   ecx
c001e171:	52                   	push   edx
c001e172:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e176:	e8 fb fa ff ff       	call   c001dc76 <SATA::access(unsigned long long, int, void*, bool)>
c001e17b:	83 c4 20             	add    esp,0x20
c001e17e:	39 f3                	cmp    ebx,esi
c001e180:	89 fa                	mov    edx,edi
c001e182:	89 e9                	mov    ecx,ebp
c001e184:	75 d3                	jne    c001e159 <SATA::write(unsigned long long, int, void*)+0x41>
c001e186:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e18a:	bd 10 27 00 00       	mov    ebp,0x2710
c001e18f:	bb 0a 00 00 00       	mov    ebx,0xa
c001e194:	01 05 b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,eax
c001e19a:	50                   	push   eax
c001e19b:	50                   	push   eax
c001e19c:	6a 0f                	push   0xf
c001e19e:	6a 00                	push   0x0
c001e1a0:	e8 0c f0 ff ff       	call   c001d1b1 <combineColours(unsigned char, unsigned char)>
c001e1a5:	5a                   	pop    edx
c001e1a6:	59                   	pop    ecx
c001e1a7:	0f b6 c0             	movzx  eax,al
c001e1aa:	50                   	push   eax
c001e1ab:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e1b0:	99                   	cdq    
c001e1b1:	f7 fd                	idiv   ebp
c001e1b3:	99                   	cdq    
c001e1b4:	f7 fb                	idiv   ebx
c001e1b6:	8d 42 30             	lea    eax,[edx+0x30]
c001e1b9:	0f b6 c0             	movzx  eax,al
c001e1bc:	50                   	push   eax
c001e1bd:	e8 de ef ff ff       	call   c001d1a0 <combineCharAndColour(char, unsigned char)>
c001e1c2:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001e1c8:	5e                   	pop    esi
c001e1c9:	5f                   	pop    edi
c001e1ca:	bf e8 03 00 00       	mov    edi,0x3e8
c001e1cf:	6a 0f                	push   0xf
c001e1d1:	6a 00                	push   0x0
c001e1d3:	e8 d9 ef ff ff       	call   c001d1b1 <combineColours(unsigned char, unsigned char)>
c001e1d8:	5a                   	pop    edx
c001e1d9:	59                   	pop    ecx
c001e1da:	0f b6 c0             	movzx  eax,al
c001e1dd:	50                   	push   eax
c001e1de:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e1e3:	99                   	cdq    
c001e1e4:	f7 ff                	idiv   edi
c001e1e6:	99                   	cdq    
c001e1e7:	f7 fb                	idiv   ebx
c001e1e9:	8d 42 30             	lea    eax,[edx+0x30]
c001e1ec:	0f b6 c0             	movzx  eax,al
c001e1ef:	50                   	push   eax
c001e1f0:	e8 ab ef ff ff       	call   c001d1a0 <combineCharAndColour(char, unsigned char)>
c001e1f5:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001e1fb:	5e                   	pop    esi
c001e1fc:	be 64 00 00 00       	mov    esi,0x64
c001e201:	58                   	pop    eax
c001e202:	6a 0f                	push   0xf
c001e204:	6a 00                	push   0x0
c001e206:	e8 a6 ef ff ff       	call   c001d1b1 <combineColours(unsigned char, unsigned char)>
c001e20b:	5a                   	pop    edx
c001e20c:	59                   	pop    ecx
c001e20d:	0f b6 c0             	movzx  eax,al
c001e210:	50                   	push   eax
c001e211:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e216:	99                   	cdq    
c001e217:	f7 fe                	idiv   esi
c001e219:	99                   	cdq    
c001e21a:	f7 fb                	idiv   ebx
c001e21c:	8d 42 30             	lea    eax,[edx+0x30]
c001e21f:	0f b6 c0             	movzx  eax,al
c001e222:	50                   	push   eax
c001e223:	e8 78 ef ff ff       	call   c001d1a0 <combineCharAndColour(char, unsigned char)>
c001e228:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001e22e:	58                   	pop    eax
c001e22f:	5a                   	pop    edx
c001e230:	6a 0f                	push   0xf
c001e232:	6a 00                	push   0x0
c001e234:	e8 78 ef ff ff       	call   c001d1b1 <combineColours(unsigned char, unsigned char)>
c001e239:	59                   	pop    ecx
c001e23a:	5a                   	pop    edx
c001e23b:	0f b6 c0             	movzx  eax,al
c001e23e:	50                   	push   eax
c001e23f:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e244:	99                   	cdq    
c001e245:	f7 fb                	idiv   ebx
c001e247:	99                   	cdq    
c001e248:	f7 fb                	idiv   ebx
c001e24a:	8d 42 30             	lea    eax,[edx+0x30]
c001e24d:	0f b6 c0             	movzx  eax,al
c001e250:	50                   	push   eax
c001e251:	e8 4a ef ff ff       	call   c001d1a0 <combineCharAndColour(char, unsigned char)>
c001e256:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001e25c:	59                   	pop    ecx
c001e25d:	58                   	pop    eax
c001e25e:	6a 0f                	push   0xf
c001e260:	6a 00                	push   0x0
c001e262:	e8 4a ef ff ff       	call   c001d1b1 <combineColours(unsigned char, unsigned char)>
c001e267:	5a                   	pop    edx
c001e268:	59                   	pop    ecx
c001e269:	0f b6 c0             	movzx  eax,al
c001e26c:	50                   	push   eax
c001e26d:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e272:	99                   	cdq    
c001e273:	f7 fb                	idiv   ebx
c001e275:	83 c2 30             	add    edx,0x30
c001e278:	0f b6 d2             	movzx  edx,dl
c001e27b:	52                   	push   edx
c001e27c:	e8 1f ef ff ff       	call   c001d1a0 <combineCharAndColour(char, unsigned char)>
c001e281:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001e287:	58                   	pop    eax
c001e288:	5a                   	pop    edx
c001e289:	6a 0f                	push   0xf
c001e28b:	6a 00                	push   0x0
c001e28d:	e8 1f ef ff ff       	call   c001d1b1 <combineColours(unsigned char, unsigned char)>
c001e292:	59                   	pop    ecx
c001e293:	5a                   	pop    edx
c001e294:	0f b6 c0             	movzx  eax,al
c001e297:	50                   	push   eax
c001e298:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e29d:	99                   	cdq    
c001e29e:	f7 fd                	idiv   ebp
c001e2a0:	99                   	cdq    
c001e2a1:	f7 fb                	idiv   ebx
c001e2a3:	8d 42 30             	lea    eax,[edx+0x30]
c001e2a6:	0f b6 c0             	movzx  eax,al
c001e2a9:	50                   	push   eax
c001e2aa:	e8 f1 ee ff ff       	call   c001d1a0 <combineCharAndColour(char, unsigned char)>
c001e2af:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e2b5:	59                   	pop    ecx
c001e2b6:	5d                   	pop    ebp
c001e2b7:	6a 0f                	push   0xf
c001e2b9:	6a 00                	push   0x0
c001e2bb:	e8 f1 ee ff ff       	call   c001d1b1 <combineColours(unsigned char, unsigned char)>
c001e2c0:	5a                   	pop    edx
c001e2c1:	59                   	pop    ecx
c001e2c2:	0f b6 c0             	movzx  eax,al
c001e2c5:	50                   	push   eax
c001e2c6:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e2cb:	99                   	cdq    
c001e2cc:	f7 ff                	idiv   edi
c001e2ce:	99                   	cdq    
c001e2cf:	f7 fb                	idiv   ebx
c001e2d1:	8d 42 30             	lea    eax,[edx+0x30]
c001e2d4:	0f b6 c0             	movzx  eax,al
c001e2d7:	50                   	push   eax
c001e2d8:	e8 c3 ee ff ff       	call   c001d1a0 <combineCharAndColour(char, unsigned char)>
c001e2dd:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e2e3:	5f                   	pop    edi
c001e2e4:	5d                   	pop    ebp
c001e2e5:	6a 0f                	push   0xf
c001e2e7:	6a 00                	push   0x0
c001e2e9:	e8 c3 ee ff ff       	call   c001d1b1 <combineColours(unsigned char, unsigned char)>
c001e2ee:	5a                   	pop    edx
c001e2ef:	59                   	pop    ecx
c001e2f0:	0f b6 c0             	movzx  eax,al
c001e2f3:	50                   	push   eax
c001e2f4:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e2f9:	99                   	cdq    
c001e2fa:	f7 fe                	idiv   esi
c001e2fc:	99                   	cdq    
c001e2fd:	f7 fb                	idiv   ebx
c001e2ff:	8d 42 30             	lea    eax,[edx+0x30]
c001e302:	0f b6 c0             	movzx  eax,al
c001e305:	50                   	push   eax
c001e306:	e8 95 ee ff ff       	call   c001d1a0 <combineCharAndColour(char, unsigned char)>
c001e30b:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e311:	5e                   	pop    esi
c001e312:	5f                   	pop    edi
c001e313:	6a 0f                	push   0xf
c001e315:	6a 00                	push   0x0
c001e317:	e8 95 ee ff ff       	call   c001d1b1 <combineColours(unsigned char, unsigned char)>
c001e31c:	5d                   	pop    ebp
c001e31d:	5a                   	pop    edx
c001e31e:	0f b6 c0             	movzx  eax,al
c001e321:	50                   	push   eax
c001e322:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e327:	99                   	cdq    
c001e328:	f7 fb                	idiv   ebx
c001e32a:	99                   	cdq    
c001e32b:	f7 fb                	idiv   ebx
c001e32d:	8d 42 30             	lea    eax,[edx+0x30]
c001e330:	0f b6 c0             	movzx  eax,al
c001e333:	50                   	push   eax
c001e334:	e8 67 ee ff ff       	call   c001d1a0 <combineCharAndColour(char, unsigned char)>
c001e339:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e33f:	59                   	pop    ecx
c001e340:	5e                   	pop    esi
c001e341:	6a 0f                	push   0xf
c001e343:	6a 00                	push   0x0
c001e345:	e8 67 ee ff ff       	call   c001d1b1 <combineColours(unsigned char, unsigned char)>
c001e34a:	5f                   	pop    edi
c001e34b:	5d                   	pop    ebp
c001e34c:	0f b6 c0             	movzx  eax,al
c001e34f:	50                   	push   eax
c001e350:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e355:	99                   	cdq    
c001e356:	f7 fb                	idiv   ebx
c001e358:	83 c2 30             	add    edx,0x30
c001e35b:	0f b6 d2             	movzx  edx,dl
c001e35e:	52                   	push   edx
c001e35f:	e8 3c ee ff ff       	call   c001d1a0 <combineCharAndColour(char, unsigned char)>
c001e364:	83 c4 10             	add    esp,0x10
c001e367:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e36d:	31 c0                	xor    eax,eax
c001e36f:	83 c4 0c             	add    esp,0xc
c001e372:	5b                   	pop    ebx
c001e373:	5e                   	pop    esi
c001e374:	5f                   	pop    edi
c001e375:	5d                   	pop    ebp
c001e376:	c3                   	ret    
c001e377:	90                   	nop

c001e378 <SATAPI::write(unsigned long long, int, void*)>:
c001e378:	b8 03 00 00 00       	mov    eax,0x3
c001e37d:	c3                   	ret    

c001e37e <SATAPI::close(int, int, void*)>:
c001e37e:	83 ec 0c             	sub    esp,0xc
c001e381:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e385:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e38b:	85 c0                	test   eax,eax
c001e38d:	74 0c                	je     c001e39b <SATAPI::close(int, int, void*)+0x1d>
c001e38f:	8b 10                	mov    edx,DWORD PTR [eax]
c001e391:	83 ec 0c             	sub    esp,0xc
c001e394:	50                   	push   eax
c001e395:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e398:	83 c4 10             	add    esp,0x10
c001e39b:	31 c0                	xor    eax,eax
c001e39d:	83 c4 0c             	add    esp,0xc
c001e3a0:	c3                   	ret    
c001e3a1:	90                   	nop

c001e3a2 <SATAPI::SATAPI()>:
c001e3a2:	83 ec 0c             	sub    esp,0xc
c001e3a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3a9:	83 ec 04             	sub    esp,0x4
c001e3ac:	68 00 08 00 00       	push   0x800
c001e3b1:	68 bc 34 02 c0       	push   0xc00234bc
c001e3b6:	50                   	push   eax
c001e3b7:	e8 26 ea fe ff       	call   c000cde2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e3bc:	83 c4 10             	add    esp,0x10
c001e3bf:	ba b0 35 02 c0       	mov    edx,0xc00235b0
c001e3c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3c8:	89 10                	mov    DWORD PTR [eax],edx
c001e3ca:	90                   	nop
c001e3cb:	83 c4 0c             	add    esp,0xc
c001e3ce:	c3                   	ret    
c001e3cf:	90                   	nop

c001e3d0 <SATAPI::diskRemoved()>:
c001e3d0:	c3                   	ret    
c001e3d1:	90                   	nop

c001e3d2 <SATAPI::diskInserted()>:
c001e3d2:	83 ec 18             	sub    esp,0x18
c001e3d5:	68 c8 34 02 c0       	push   0xc00234c8
c001e3da:	e8 2b c5 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e3df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e3e3:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001e3ea:	83 c4 1c             	add    esp,0x1c
c001e3ed:	c3                   	ret    

c001e3ee <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001e3ee:	55                   	push   ebp
c001e3ef:	57                   	push   edi
c001e3f0:	56                   	push   esi
c001e3f1:	53                   	push   ebx
c001e3f2:	83 ec 34             	sub    esp,0x34
c001e3f5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e3f9:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001e3fd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e401:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e405:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e409:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001e40f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e415:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e419:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001e41f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e423:	83 c0 02             	add    eax,0x2
c001e426:	c1 e0 07             	shl    eax,0x7
c001e429:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e42d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e431:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e435:	c1 e0 07             	shl    eax,0x7
c001e438:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e43c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e440:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e44a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e44e:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e454:	e8 ff e4 ff ff       	call   c001c958 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e459:	83 c4 10             	add    esp,0x10
c001e45c:	89 c2                	mov    edx,eax
c001e45e:	b8 01 00 00 00       	mov    eax,0x1
c001e463:	83 fa ff             	cmp    edx,0xffffffff
c001e466:	0f 84 5f 02 00 00    	je     c001e6cb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001e46c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e470:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e474:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e47a:	8b 00                	mov    eax,DWORD PTR [eax]
c001e47c:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e482:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e488:	89 d1                	mov    ecx,edx
c001e48a:	c1 e1 05             	shl    ecx,0x5
c001e48d:	01 c8                	add    eax,ecx
c001e48f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e491:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001e497:	81 c9 25 00 01 00    	or     ecx,0x10025
c001e49d:	89 08                	mov    DWORD PTR [eax],ecx
c001e49f:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e4a5:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001e4ab:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001e4b1:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001e4b4:	50                   	push   eax
c001e4b5:	68 90 00 00 00       	push   0x90
c001e4ba:	6a 00                	push   0x0
c001e4bc:	53                   	push   ebx
c001e4bd:	e8 2e 20 fe ff       	call   c00004f0 <memset>
c001e4c2:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e4c5:	b9 0c 00 00 00       	mov    ecx,0xc
c001e4ca:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e4ce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e4d0:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e4d6:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e4da:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e4de:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e4e4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e4e8:	48                   	dec    eax
c001e4e9:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e4ee:	89 c1                	mov    ecx,eax
c001e4f0:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e4f6:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e4fb:	09 c8                	or     eax,ecx
c001e4fd:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e503:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e509:	83 c8 80             	or     eax,0xffffff80
c001e50c:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e512:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e515:	25 00 7f 00 00       	and    eax,0x7f00
c001e51a:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e51f:	66 89 03             	mov    WORD PTR [ebx],ax
c001e522:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e526:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001e52a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e52e:	c1 e8 10             	shr    eax,0x10
c001e531:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e534:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e538:	c1 e8 18             	shr    eax,0x18
c001e53b:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001e53e:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e542:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e545:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e549:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e54c:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e550:	83 c4 10             	add    esp,0x10
c001e553:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e557:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e55b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e55f:	31 c0                	xor    eax,eax
c001e561:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001e567:	80 e1 88             	and    cl,0x88
c001e56a:	74 0a                	je     c001e576 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001e56c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e571:	74 0a                	je     c001e57d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c001e573:	40                   	inc    eax
c001e574:	eb eb                	jmp    c001e561 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c001e576:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e57b:	75 43                	jne    c001e5c0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c001e57d:	83 ec 0c             	sub    esp,0xc
c001e580:	68 e0 34 02 c0       	push   0xc00234e0
c001e585:	e8 80 c3 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e58a:	58                   	pop    eax
c001e58b:	5a                   	pop    edx
c001e58c:	68 f5 34 02 c0       	push   0xc00234f5
c001e591:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001e597:	e8 10 a5 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001e59c:	59                   	pop    ecx
c001e59d:	5b                   	pop    ebx
c001e59e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e5a2:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e5a8:	e8 45 e4 ff ff       	call   c001c9f2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e5ad:	5e                   	pop    esi
c001e5ae:	5f                   	pop    edi
c001e5af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e5b3:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e5b9:	e8 14 e4 ff ff       	call   c001c9d2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e5be:	eb 48                	jmp    c001e608 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c001e5c0:	b8 01 00 00 00       	mov    eax,0x1
c001e5c5:	88 d1                	mov    cl,dl
c001e5c7:	d3 e0                	shl    eax,cl
c001e5c9:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c001e5ce:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c001e5d4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e5d8:	89 c7                	mov    edi,eax
c001e5da:	c1 e3 07             	shl    ebx,0x7
c001e5dd:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001e5e1:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001e5e7:	85 c7                	test   edi,eax
c001e5e9:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001e5ef:	0f 84 a3 00 00 00    	je     c001e698 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c001e5f5:	0f ba e0 1e          	bt     eax,0x1e
c001e5f9:	73 1a                	jae    c001e615 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c001e5fb:	83 ec 0c             	sub    esp,0xc
c001e5fe:	68 07 35 02 c0       	push   0xc0023507
c001e603:	e8 02 c3 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e608:	83 c4 10             	add    esp,0x10
c001e60b:	b8 01 00 00 00       	mov    eax,0x1
c001e610:	e9 b6 00 00 00       	jmp    c001e6cb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001e615:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c001e61b:	83 f8 0d             	cmp    eax,0xd
c001e61e:	77 0a                	ja     c001e62a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c001e620:	83 ec 0c             	sub    esp,0xc
c001e623:	68 c8 00 00 00       	push   0xc8
c001e628:	eb 28                	jmp    c001e652 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e62a:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c001e630:	83 f8 0d             	cmp    eax,0xd
c001e633:	77 0a                	ja     c001e63f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c001e635:	83 ec 0c             	sub    esp,0xc
c001e638:	68 58 02 00 00       	push   0x258
c001e63d:	eb 13                	jmp    c001e652 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e63f:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c001e645:	83 f8 06             	cmp    eax,0x6
c001e648:	77 10                	ja     c001e65a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c001e64a:	83 ec 0c             	sub    esp,0xc
c001e64d:	68 dc 05 00 00       	push   0x5dc
c001e652:	e8 69 7d ff ff       	call   c00163c0 <milliTenthSleep(unsigned int)>
c001e657:	83 c4 10             	add    esp,0x10
c001e65a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e65e:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e661:	75 06                	jne    c001e669 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c001e663:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e667:	74 15                	je     c001e67e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e669:	83 fe 06             	cmp    esi,0x6
c001e66c:	77 10                	ja     c001e67e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e66e:	83 ec 0c             	sub    esp,0xc
c001e671:	68 c4 09 00 00       	push   0x9c4
c001e676:	e8 45 7d ff ff       	call   c00163c0 <milliTenthSleep(unsigned int)>
c001e67b:	83 c4 10             	add    esp,0x10
c001e67e:	46                   	inc    esi
c001e67f:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c001e685:	0f 85 56 ff ff ff    	jne    c001e5e1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c001e68b:	83 ec 0c             	sub    esp,0xc
c001e68e:	68 1a 35 02 c0       	push   0xc002351a
c001e693:	e9 6b ff ff ff       	jmp    c001e603 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e698:	0f ba e0 1e          	bt     eax,0x1e
c001e69c:	73 0d                	jae    c001e6ab <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c001e69e:	83 ec 0c             	sub    esp,0xc
c001e6a1:	68 2e 35 02 c0       	push   0xc002352e
c001e6a6:	e9 58 ff ff ff       	jmp    c001e603 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e6ab:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e6b0:	74 17                	je     c001e6c9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e6b2:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e6b7:	74 10                	je     c001e6c9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e6b9:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e6bf:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e6c3:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e6c7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e6c9:	31 c0                	xor    eax,eax
c001e6cb:	83 c4 2c             	add    esp,0x2c
c001e6ce:	5b                   	pop    ebx
c001e6cf:	5e                   	pop    esi
c001e6d0:	5f                   	pop    edi
c001e6d1:	5d                   	pop    ebp
c001e6d2:	c3                   	ret    
c001e6d3:	90                   	nop

c001e6d4 <SATAPI::eject()>:
c001e6d4:	57                   	push   edi
c001e6d5:	b9 03 00 00 00       	mov    ecx,0x3
c001e6da:	83 ec 18             	sub    esp,0x18
c001e6dd:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e6e1:	fc                   	cld    
c001e6e2:	31 c0                	xor    eax,eax
c001e6e4:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e6e6:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e6eb:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e6f0:	50                   	push   eax
c001e6f1:	6a 00                	push   0x0
c001e6f3:	6a 00                	push   0x0
c001e6f5:	6a 00                	push   0x0
c001e6f7:	6a 00                	push   0x0
c001e6f9:	6a 02                	push   0x2
c001e6fb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e6ff:	50                   	push   eax
c001e700:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e704:	e8 e5 fc ff ff       	call   c001e3ee <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e709:	83 c4 38             	add    esp,0x38
c001e70c:	31 c0                	xor    eax,eax
c001e70e:	5f                   	pop    edi
c001e70f:	c3                   	ret    

c001e710 <SATAPI::detectMedia()>:
c001e710:	53                   	push   ebx
c001e711:	83 ec 14             	sub    esp,0x14
c001e714:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e718:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e71e:	e8 45 00 ff ff       	call   c000e768 <VCache::writeWriteBuffer()>
c001e723:	59                   	pop    ecx
c001e724:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e72a:	e8 29 00 ff ff       	call   c000e758 <VCache::invalidateReadBuffer()>
c001e72f:	c7 04 24 43 35 02 c0 	mov    DWORD PTR [esp],0xc0023543
c001e736:	e8 cf c1 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e73b:	83 c4 10             	add    esp,0x10
c001e73e:	31 c0                	xor    eax,eax
c001e740:	8b 14 85 80 b8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4780]
c001e747:	85 d2                	test   edx,edx
c001e749:	74 0f                	je     c001e75a <SATAPI::detectMedia()+0x4a>
c001e74b:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e751:	75 07                	jne    c001e75a <SATAPI::detectMedia()+0x4a>
c001e753:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e75a:	40                   	inc    eax
c001e75b:	83 f8 1a             	cmp    eax,0x1a
c001e75e:	75 e0                	jne    c001e740 <SATAPI::detectMedia()+0x30>
c001e760:	83 c4 08             	add    esp,0x8
c001e763:	5b                   	pop    ebx
c001e764:	c3                   	ret    
c001e765:	90                   	nop

c001e766 <SATAPI::open(int, int, void*)>:
c001e766:	56                   	push   esi
c001e767:	53                   	push   ebx
c001e768:	51                   	push   ecx
c001e769:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e76d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e771:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e77b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e781:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e785:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e78f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e799:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e7a0:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e7a6:	e8 37 96 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001e7ab:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e7b1:	89 c6                	mov    esi,eax
c001e7b3:	e8 2a 96 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001e7b8:	81 c6 00 10 00 00    	add    esi,0x1000
c001e7be:	39 c6                	cmp    esi,eax
c001e7c0:	74 10                	je     c001e7d2 <SATAPI::open(int, int, void*)+0x6c>
c001e7c2:	83 ec 0c             	sub    esp,0xc
c001e7c5:	68 58 35 02 c0       	push   0xc0023558
c001e7ca:	e8 0c 2e ff ff       	call   c00115db <KePanic(char const*)>
c001e7cf:	83 c4 10             	add    esp,0x10
c001e7d2:	83 ec 0c             	sub    esp,0xc
c001e7d5:	6a 02                	push   0x2
c001e7d7:	e8 19 ae fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001e7dc:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e7e2:	6a 03                	push   0x3
c001e7e4:	50                   	push   eax
c001e7e5:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e7eb:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001e7f1:	e8 08 b5 fe ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001e7f6:	83 c4 14             	add    esp,0x14
c001e7f9:	68 78 01 00 00       	push   0x178
c001e7fe:	e8 d0 92 fe ff       	call   c0007ad3 <malloc>
c001e803:	83 c4 0c             	add    esp,0xc
c001e806:	6a 00                	push   0x0
c001e808:	68 ff ff ff 7f       	push   0x7fffffff
c001e80d:	6a 00                	push   0x0
c001e80f:	6a 00                	push   0x0
c001e811:	53                   	push   ebx
c001e812:	68 6e 35 02 c0       	push   0xc002356e
c001e817:	89 c6                	mov    esi,eax
c001e819:	50                   	push   eax
c001e81a:	e8 a3 f3 fe ff       	call   c000dbc2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e81f:	83 c4 14             	add    esp,0x14
c001e822:	56                   	push   esi
c001e823:	e8 5a f4 fe ff       	call   c000dc82 <LogicalDisk::assignDriveLetter()>
c001e828:	5a                   	pop    edx
c001e829:	59                   	pop    ecx
c001e82a:	0f be c0             	movsx  eax,al
c001e82d:	50                   	push   eax
c001e82e:	68 c0 33 02 c0       	push   0xc00233c0
c001e833:	e8 d2 c0 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e838:	58                   	pop    eax
c001e839:	5a                   	pop    edx
c001e83a:	56                   	push   esi
c001e83b:	53                   	push   ebx
c001e83c:	e8 d3 e1 fe ff       	call   c000ca14 <Device::addChild(Device*)>
c001e841:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e847:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e84a:	e8 fb e5 fe ff       	call   c000ce4a <PhysicalDisk::startCache()>
c001e84f:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e856:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e859:	e8 b2 fe ff ff       	call   c001e710 <SATAPI::detectMedia()>
c001e85e:	83 c4 14             	add    esp,0x14
c001e861:	31 c0                	xor    eax,eax
c001e863:	5b                   	pop    ebx
c001e864:	5e                   	pop    esi
c001e865:	c3                   	ret    

c001e866 <SATAPI::read(unsigned long long, int, void*)>:
c001e866:	55                   	push   ebp
c001e867:	57                   	push   edi
c001e868:	56                   	push   esi
c001e869:	53                   	push   ebx
c001e86a:	83 ec 3c             	sub    esp,0x3c
c001e86d:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001e871:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e875:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001e879:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e87d:	83 fd 04             	cmp    ebp,0x4
c001e880:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e884:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e888:	7e 10                	jle    c001e89a <SATAPI::read(unsigned long long, int, void*)+0x34>
c001e88a:	83 ec 0c             	sub    esp,0xc
c001e88d:	68 7c 35 02 c0       	push   0xc002357c
c001e892:	e8 44 2d ff ff       	call   c00115db <KePanic(char const*)>
c001e897:	83 c4 10             	add    esp,0x10
c001e89a:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e8a0:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e8a6:	51                   	push   ecx
c001e8a7:	50                   	push   eax
c001e8a8:	83 c0 02             	add    eax,0x2
c001e8ab:	c1 e0 07             	shl    eax,0x7
c001e8ae:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e8b4:	50                   	push   eax
c001e8b5:	52                   	push   edx
c001e8b6:	e8 61 e1 ff ff       	call   c001ca1c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e8bb:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e8bf:	b9 03 00 00 00       	mov    ecx,0x3
c001e8c4:	fc                   	cld    
c001e8c5:	31 c0                	xor    eax,eax
c001e8c7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e8c9:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e8ce:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e8d3:	83 c4 0c             	add    esp,0xc
c001e8d6:	6a 00                	push   0x0
c001e8d8:	6a 00                	push   0x0
c001e8da:	6a 00                	push   0x0
c001e8dc:	6a 00                	push   0x0
c001e8de:	6a 02                	push   0x2
c001e8e0:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e8e4:	50                   	push   eax
c001e8e5:	53                   	push   ebx
c001e8e6:	e8 03 fb ff ff       	call   c001e3ee <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e8eb:	83 c4 20             	add    esp,0x20
c001e8ee:	85 c0                	test   eax,eax
c001e8f0:	89 c6                	mov    esi,eax
c001e8f2:	75 46                	jne    c001e93a <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001e8f4:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e8f8:	b9 03 00 00 00       	mov    ecx,0x3
c001e8fd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e8ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e903:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e908:	0f c8                	bswap  eax
c001e90a:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e90e:	89 e8                	mov    eax,ebp
c001e910:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e914:	50                   	push   eax
c001e915:	55                   	push   ebp
c001e916:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001e91a:	c1 e5 0b             	shl    ebp,0xb
c001e91d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e921:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e925:	55                   	push   ebp
c001e926:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e92a:	50                   	push   eax
c001e92b:	53                   	push   ebx
c001e92c:	e8 bd fa ff ff       	call   c001e3ee <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e931:	83 c4 20             	add    esp,0x20
c001e934:	85 c0                	test   eax,eax
c001e936:	89 c6                	mov    esi,eax
c001e938:	74 0c                	je     c001e946 <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001e93a:	83 ec 0c             	sub    esp,0xc
c001e93d:	53                   	push   ebx
c001e93e:	e8 cd fd ff ff       	call   c001e710 <SATAPI::detectMedia()>
c001e943:	83 c4 10             	add    esp,0x10
c001e946:	83 c4 3c             	add    esp,0x3c
c001e949:	89 f0                	mov    eax,esi
c001e94b:	5b                   	pop    ebx
c001e94c:	5e                   	pop    esi
c001e94d:	5f                   	pop    edi
c001e94e:	5d                   	pop    ebp
c001e94f:	c3                   	ret    

c001e950 <IOAPIC::close(int, int, void*)>:
c001e950:	b8 00 00 00 00       	mov    eax,0x0
c001e955:	c3                   	ret    

c001e956 <apicGetBase()>:
c001e956:	55                   	push   ebp
c001e957:	89 e5                	mov    ebp,esp
c001e959:	83 ec 18             	sub    esp,0x18
c001e95c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e961:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e967:	83 e0 08             	and    eax,0x8
c001e96a:	0f b6 c0             	movzx  eax,al
c001e96d:	85 c0                	test   eax,eax
c001e96f:	75 07                	jne    c001e978 <apicGetBase()+0x22>
c001e971:	b8 00 00 00 00       	mov    eax,0x0
c001e976:	eb 21                	jmp    c001e999 <apicGetBase()+0x43>
c001e978:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e97d:	83 ec 08             	sub    esp,0x8
c001e980:	6a 1b                	push   0x1b
c001e982:	50                   	push   eax
c001e983:	e8 5a 87 fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c001e988:	83 c4 10             	add    esp,0x10
c001e98b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e98e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e991:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e994:	25 00 00 ff ff       	and    eax,0xffff0000
c001e999:	c9                   	leave  
c001e99a:	c3                   	ret    
c001e99b:	90                   	nop

c001e99c <IOAPIC::IOAPIC()>:
c001e99c:	83 ec 0c             	sub    esp,0xc
c001e99f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9a3:	83 ec 08             	sub    esp,0x8
c001e9a6:	68 e0 35 02 c0       	push   0xc00235e0
c001e9ab:	50                   	push   eax
c001e9ac:	e8 fb e1 fe ff       	call   c000cbac <Device::Device(char const*)>
c001e9b1:	83 c4 10             	add    esp,0x10
c001e9b4:	ba f0 35 02 c0       	mov    edx,0xc00235f0
c001e9b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9bd:	89 10                	mov    DWORD PTR [eax],edx
c001e9bf:	90                   	nop
c001e9c0:	83 c4 0c             	add    esp,0xc
c001e9c3:	c3                   	ret    

c001e9c4 <apicOpen()>:
c001e9c4:	55                   	push   ebp
c001e9c5:	89 e5                	mov    ebp,esp
c001e9c7:	53                   	push   ebx
c001e9c8:	83 ec 34             	sub    esp,0x34
c001e9cb:	a0 00 d1 02 c0       	mov    al,ds:0xc002d100
c001e9d0:	83 f0 01             	xor    eax,0x1
c001e9d3:	0f b6 c0             	movzx  eax,al
c001e9d6:	85 c0                	test   eax,eax
c001e9d8:	0f 84 a3 00 00 00    	je     c001ea81 <apicOpen()+0xbd>
c001e9de:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e9e2:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c001e9e7:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e9eb:	0f b6 c0             	movzx  eax,al
c001e9ee:	39 c2                	cmp    edx,eax
c001e9f0:	0f 83 84 00 00 00    	jae    c001ea7a <apicOpen()+0xb6>
c001e9f6:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001e9fd:	83 ec 0c             	sub    esp,0xc
c001ea00:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001ea03:	e8 cb 90 fe ff       	call   c0007ad3 <malloc>
c001ea08:	83 c4 10             	add    esp,0x10
c001ea0b:	89 c3                	mov    ebx,eax
c001ea0d:	83 ec 0c             	sub    esp,0xc
c001ea10:	53                   	push   ebx
c001ea11:	e8 86 ff ff ff       	call   c001e99c <IOAPIC::IOAPIC()>
c001ea16:	83 c4 10             	add    esp,0x10
c001ea19:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001ea1c:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001ea20:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001ea23:	89 14 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],edx
c001ea2a:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c001ea2f:	83 c0 01             	add    eax,0x1
c001ea32:	a3 c0 d0 02 c0       	mov    ds:0xc002d0c0,eax
c001ea37:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001ea3c:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001ea42:	83 ec 08             	sub    esp,0x8
c001ea45:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001ea48:	50                   	push   eax
c001ea49:	e8 c6 df fe ff       	call   c000ca14 <Device::addChild(Device*)>
c001ea4e:	83 c4 10             	add    esp,0x10
c001ea51:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ea54:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea56:	83 c0 08             	add    eax,0x8
c001ea59:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea5b:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001ea5f:	6a 00                	push   0x0
c001ea61:	6a 00                	push   0x0
c001ea63:	52                   	push   edx
c001ea64:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001ea67:	ff d0                	call   eax
c001ea69:	83 c4 10             	add    esp,0x10
c001ea6c:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001ea6f:	83 c0 01             	add    eax,0x1
c001ea72:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001ea75:	e9 68 ff ff ff       	jmp    c001e9e2 <apicOpen()+0x1e>
c001ea7a:	c6 05 00 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d100,0x1
c001ea81:	e8 d0 fe ff ff       	call   c001e956 <apicGetBase()>
c001ea86:	05 f0 00 00 00       	add    eax,0xf0
c001ea8b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ea8e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001ea91:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea93:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001ea96:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001ea9d:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001eaa4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001eaa7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001eaaa:	89 10                	mov    DWORD PTR [eax],edx
c001eaac:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001eab3:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c001eab8:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001eabb:	7d 7c                	jge    c001eb39 <apicOpen()+0x175>
c001eabd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eac0:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001eac7:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001eaca:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eacd:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001ead4:	c1 e8 08             	shr    eax,0x8
c001ead7:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001eadb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eade:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001eae5:	c1 e8 18             	shr    eax,0x18
c001eae8:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001eaeb:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001eaef:	3d ff 00 00 00       	cmp    eax,0xff
c001eaf4:	75 3a                	jne    c001eb30 <apicOpen()+0x16c>
c001eaf6:	e8 5b fe ff ff       	call   c001e956 <apicGetBase()>
c001eafb:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001eaff:	83 fa 01             	cmp    edx,0x1
c001eb02:	75 07                	jne    c001eb0b <apicOpen()+0x147>
c001eb04:	ba 60 03 00 00       	mov    edx,0x360
c001eb09:	eb 05                	jmp    c001eb10 <apicOpen()+0x14c>
c001eb0b:	ba 50 03 00 00       	mov    edx,0x350
c001eb10:	01 d0                	add    eax,edx
c001eb12:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001eb15:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001eb18:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb1a:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001eb1d:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001eb24:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001eb28:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001eb2b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001eb2e:	89 10                	mov    DWORD PTR [eax],edx
c001eb30:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001eb34:	e9 7a ff ff ff       	jmp    c001eab3 <apicOpen()+0xef>
c001eb39:	90                   	nop
c001eb3a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001eb3d:	c9                   	leave  
c001eb3e:	c3                   	ret    
c001eb3f:	90                   	nop

c001eb40 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001eb40:	55                   	push   ebp
c001eb41:	89 e5                	mov    ebp,esp
c001eb43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb46:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001eb4c:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001eb4f:	72 1d                	jb     c001eb6e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001eb51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb54:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001eb5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb5d:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001eb63:	01 d0                	add    eax,edx
c001eb65:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001eb68:	73 04                	jae    c001eb6e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001eb6a:	b0 01                	mov    al,0x1
c001eb6c:	eb 02                	jmp    c001eb70 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001eb6e:	b0 00                	mov    al,0x0
c001eb70:	5d                   	pop    ebp
c001eb71:	c3                   	ret    

c001eb72 <IOAPIC::read(int)>:
c001eb72:	55                   	push   ebp
c001eb73:	89 e5                	mov    ebp,esp
c001eb75:	83 ec 10             	sub    esp,0x10
c001eb78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb7b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001eb81:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001eb84:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001eb87:	0f b6 d0             	movzx  edx,al
c001eb8a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001eb8d:	89 10                	mov    DWORD PTR [eax],edx
c001eb8f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001eb92:	83 c0 10             	add    eax,0x10
c001eb95:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb97:	c9                   	leave  
c001eb98:	c3                   	ret    
c001eb99:	90                   	nop

c001eb9a <IOAPIC::open(int, int, void*)>:
c001eb9a:	55                   	push   ebp
c001eb9b:	89 e5                	mov    ebp,esp
c001eb9d:	57                   	push   edi
c001eb9e:	56                   	push   esi
c001eb9f:	53                   	push   ebx
c001eba0:	83 ec 04             	sub    esp,0x4
c001eba3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eba6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001eba9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ebaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebb2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ebb8:	8b 14 85 20 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd43e0]
c001ebbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebc2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ebc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebcb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ebd1:	8b 14 85 a0 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4360]
c001ebd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebdb:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001ebe1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebe4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001ebea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebed:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ebf3:	0f b6 f0             	movzx  esi,al
c001ebf6:	89 d0                	mov    eax,edx
c001ebf8:	ba 00 00 00 00       	mov    edx,0x0
c001ebfd:	89 c7                	mov    edi,eax
c001ebff:	83 e7 ff             	and    edi,0xffffffff
c001ec02:	89 f9                	mov    ecx,edi
c001ec04:	0f b6 da             	movzx  ebx,dl
c001ec07:	89 c8                	mov    eax,ecx
c001ec09:	89 da                	mov    edx,ebx
c001ec0b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001ec0e:	8d 5e 08             	lea    ebx,[esi+0x8]
c001ec11:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001ec15:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001ec19:	83 e0 00             	and    eax,0x0
c001ec1c:	09 d0                	or     eax,edx
c001ec1e:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ec22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec25:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ec2b:	8d 50 01             	lea    edx,[eax+0x1]
c001ec2e:	88 d1                	mov    cl,dl
c001ec30:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001ec33:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001ec39:	0f b6 d0             	movzx  edx,al
c001ec3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec3f:	83 c2 08             	add    edx,0x8
c001ec42:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ec46:	0f b6 c9             	movzx  ecx,cl
c001ec49:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001ec4f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ec53:	6a 01                	push   0x1
c001ec55:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec58:	e8 15 ff ff ff       	call   c001eb72 <IOAPIC::read(int)>
c001ec5d:	83 c4 08             	add    esp,0x8
c001ec60:	c1 f8 10             	sar    eax,0x10
c001ec63:	0f b6 c0             	movzx  eax,al
c001ec66:	8d 50 01             	lea    edx,[eax+0x1]
c001ec69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec6c:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001ec72:	b8 00 00 00 00       	mov    eax,0x0
c001ec77:	8d 65 f4             	lea    esp,[ebp-0xc]
c001ec7a:	5b                   	pop    ebx
c001ec7b:	5e                   	pop    esi
c001ec7c:	5f                   	pop    edi
c001ec7d:	5d                   	pop    ebp
c001ec7e:	c3                   	ret    
c001ec7f:	90                   	nop

c001ec80 <IOAPIC::write(int, int)>:
c001ec80:	55                   	push   ebp
c001ec81:	89 e5                	mov    ebp,esp
c001ec83:	83 ec 10             	sub    esp,0x10
c001ec86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec89:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ec8f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ec92:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ec95:	0f b6 d0             	movzx  edx,al
c001ec98:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ec9b:	89 10                	mov    DWORD PTR [eax],edx
c001ec9d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001eca0:	8d 50 10             	lea    edx,[eax+0x10]
c001eca3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001eca6:	89 02                	mov    DWORD PTR [edx],eax
c001eca8:	90                   	nop
c001eca9:	c9                   	leave  
c001ecaa:	c3                   	ret    
c001ecab:	90                   	nop

c001ecac <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001ecac:	55                   	push   ebp
c001ecad:	89 e5                	mov    ebp,esp
c001ecaf:	53                   	push   ebx
c001ecb0:	83 ec 2c             	sub    esp,0x2c
c001ecb3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ecb6:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001ecb9:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001ecbc:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001ecbf:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001ecc2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ecc5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ecc8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001eccb:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001ecce:	88 d8                	mov    al,bl
c001ecd0:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001ecd3:	88 c8                	mov    al,cl
c001ecd5:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001ecd8:	88 d0                	mov    al,dl
c001ecda:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001ecdd:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001ece1:	83 c0 08             	add    eax,0x8
c001ece4:	d1 e0                	shl    eax,1
c001ece6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001ece9:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001eced:	83 c0 08             	add    eax,0x8
c001ecf0:	d1 e0                	shl    eax,1
c001ecf2:	83 c0 01             	add    eax,0x1
c001ecf5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001ecf8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ecfb:	50                   	push   eax
c001ecfc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ecff:	e8 6e fe ff ff       	call   c001eb72 <IOAPIC::read(int)>
c001ed04:	83 c4 08             	add    esp,0x8
c001ed07:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ed0a:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001ed11:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ed14:	c1 e0 18             	shl    eax,0x18
c001ed17:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001ed1a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001ed1d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ed20:	52                   	push   edx
c001ed21:	50                   	push   eax
c001ed22:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed25:	e8 56 ff ff ff       	call   c001ec80 <IOAPIC::write(int, int)>
c001ed2a:	83 c4 0c             	add    esp,0xc
c001ed2d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ed30:	50                   	push   eax
c001ed31:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed34:	e8 39 fe ff ff       	call   c001eb72 <IOAPIC::read(int)>
c001ed39:	83 c4 08             	add    esp,0x8
c001ed3c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001ed3f:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001ed46:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001ed4d:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001ed54:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001ed58:	85 c0                	test   eax,eax
c001ed5a:	74 09                	je     c001ed65 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001ed5c:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001ed63:	eb 07                	jmp    c001ed6c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001ed65:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001ed6c:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001ed70:	85 c0                	test   eax,eax
c001ed72:	74 09                	je     c001ed7d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001ed74:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001ed7b:	eb 07                	jmp    c001ed84 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001ed7d:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001ed84:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001ed8b:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001ed8f:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001ed92:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001ed95:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ed98:	52                   	push   edx
c001ed99:	50                   	push   eax
c001ed9a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed9d:	e8 de fe ff ff       	call   c001ec80 <IOAPIC::write(int, int)>
c001eda2:	83 c4 0c             	add    esp,0xc
c001eda5:	90                   	nop
c001eda6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001eda9:	c9                   	leave  
c001edaa:	c3                   	ret    
c001edab:	90                   	nop

c001edac <APICTimer::close(int, int, void*)>:
c001edac:	b8 00 00 00 00       	mov    eax,0x0
c001edb1:	c3                   	ret    
c001edb2:	66 90                	xchg   ax,ax

c001edb4 <apicTimerHandler(regs*, void*)>:
c001edb4:	83 ec 0c             	sub    esp,0xc
c001edb7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001edbb:	8b 08                	mov    ecx,DWORD PTR [eax]
c001edbd:	b8 10 27 00 00       	mov    eax,0x2710
c001edc2:	ba 00 00 00 00       	mov    edx,0x0
c001edc7:	f7 f1                	div    ecx
c001edc9:	83 ec 0c             	sub    esp,0xc
c001edcc:	50                   	push   eax
c001edcd:	e8 ae f6 fe ff       	call   c000e480 <timerHandler(unsigned int)>
c001edd2:	83 c4 10             	add    esp,0x10
c001edd5:	90                   	nop
c001edd6:	83 c4 0c             	add    esp,0xc
c001edd9:	c3                   	ret    
c001edda:	66 90                	xchg   ax,ax

c001eddc <APICTimer::open(int, int, void*)>:
c001eddc:	83 ec 0c             	sub    esp,0xc
c001eddf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ede3:	8b 00                	mov    eax,DWORD PTR [eax]
c001ede5:	83 c0 24             	add    eax,0x24
c001ede8:	8b 00                	mov    eax,DWORD PTR [eax]
c001edea:	83 ec 08             	sub    esp,0x8
c001eded:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001edf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001edf5:	ff d0                	call   eax
c001edf7:	83 c4 10             	add    esp,0x10
c001edfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edfe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ee02:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ee08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee0c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ee10:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001ee16:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ee1a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ee20:	83 ec 0c             	sub    esp,0xc
c001ee23:	51                   	push   ecx
c001ee24:	6a 01                	push   0x1
c001ee26:	68 b4 ed 01 c0       	push   0xc001edb4
c001ee2b:	52                   	push   edx
c001ee2c:	50                   	push   eax
c001ee2d:	e8 8e db fe ff       	call   c000c9c0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ee32:	83 c4 20             	add    esp,0x20
c001ee35:	89 c2                	mov    edx,eax
c001ee37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee3b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ee41:	b8 00 00 00 00       	mov    eax,0x0
c001ee46:	83 c4 0c             	add    esp,0xc
c001ee49:	c3                   	ret    
c001ee4a:	66 90                	xchg   ax,ax

c001ee4c <APICTimer::write(int)>:
c001ee4c:	83 ec 0c             	sub    esp,0xc
c001ee4f:	83 ec 0c             	sub    esp,0xc
c001ee52:	68 14 36 02 c0       	push   0xc0023614
c001ee57:	e8 7f 27 ff ff       	call   c00115db <KePanic(char const*)>
c001ee5c:	83 c4 10             	add    esp,0x10
c001ee5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee63:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ee67:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ee6d:	90                   	nop
c001ee6e:	83 c4 0c             	add    esp,0xc
c001ee71:	c3                   	ret    
c001ee72:	66 90                	xchg   ax,ax

c001ee74 <APICTimer::APICTimer()>:
c001ee74:	83 ec 0c             	sub    esp,0xc
c001ee77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee7b:	83 ec 08             	sub    esp,0x8
c001ee7e:	68 24 36 02 c0       	push   0xc0023624
c001ee83:	50                   	push   eax
c001ee84:	e8 2b f5 fe ff       	call   c000e3b4 <Timer::Timer(char const*)>
c001ee89:	83 c4 10             	add    esp,0x10
c001ee8c:	ba 38 36 02 c0       	mov    edx,0xc0023638
c001ee91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee95:	89 10                	mov    DWORD PTR [eax],edx
c001ee97:	90                   	nop
c001ee98:	83 c4 0c             	add    esp,0xc
c001ee9b:	c3                   	ret    

c001ee9c <PIT::write(int)>:
c001ee9c:	83 ec 10             	sub    esp,0x10
c001ee9f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001eea3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001eea7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eead:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001eeb1:	a3 04 d1 02 c0       	mov    ds:0xc002d104,eax
c001eeb6:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001eebb:	89 c2                	mov    edx,eax
c001eebd:	c1 fa 1f             	sar    edx,0x1f
c001eec0:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001eec4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eec8:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001eecf:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001eed4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001eed8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001eedd:	ee                   	out    dx,al
c001eede:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eee2:	0f b6 c0             	movzx  eax,al
c001eee5:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001eeec:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001eef0:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001eef4:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001eef9:	ee                   	out    dx,al
c001eefa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eefe:	c1 f8 08             	sar    eax,0x8
c001ef01:	0f b6 c0             	movzx  eax,al
c001ef04:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001ef0b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ef0f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ef13:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ef18:	ee                   	out    dx,al
c001ef19:	90                   	nop
c001ef1a:	83 c4 10             	add    esp,0x10
c001ef1d:	c3                   	ret    
c001ef1e:	66 90                	xchg   ax,ax

c001ef20 <pitHandler(regs*, void*)>:
c001ef20:	83 ec 0c             	sub    esp,0xc
c001ef23:	8b 0d 04 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d104
c001ef29:	b8 10 27 00 00       	mov    eax,0x2710
c001ef2e:	89 c2                	mov    edx,eax
c001ef30:	c1 fa 1f             	sar    edx,0x1f
c001ef33:	f7 f9                	idiv   ecx
c001ef35:	83 ec 0c             	sub    esp,0xc
c001ef38:	50                   	push   eax
c001ef39:	e8 42 f5 fe ff       	call   c000e480 <timerHandler(unsigned int)>
c001ef3e:	83 c4 10             	add    esp,0x10
c001ef41:	90                   	nop
c001ef42:	83 c4 0c             	add    esp,0xc
c001ef45:	c3                   	ret    
c001ef46:	66 90                	xchg   ax,ax

c001ef48 <PIT::open(int, int, void*)>:
c001ef48:	83 ec 0c             	sub    esp,0xc
c001ef4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef4f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef51:	83 c0 24             	add    eax,0x24
c001ef54:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef56:	83 ec 08             	sub    esp,0x8
c001ef59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef5d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef61:	ff d0                	call   eax
c001ef63:	83 c4 10             	add    esp,0x10
c001ef66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef6a:	83 ec 0c             	sub    esp,0xc
c001ef6d:	6a 00                	push   0x0
c001ef6f:	6a 01                	push   0x1
c001ef71:	68 20 ef 01 c0       	push   0xc001ef20
c001ef76:	6a 00                	push   0x0
c001ef78:	50                   	push   eax
c001ef79:	e8 42 da fe ff       	call   c000c9c0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ef7e:	83 c4 20             	add    esp,0x20
c001ef81:	89 c2                	mov    edx,eax
c001ef83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef87:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ef8d:	b8 00 00 00 00       	mov    eax,0x0
c001ef92:	83 c4 0c             	add    esp,0xc
c001ef95:	c3                   	ret    
c001ef96:	66 90                	xchg   ax,ax

c001ef98 <PIT::close(int, int, void*)>:
c001ef98:	83 ec 0c             	sub    esp,0xc
c001ef9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef9f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001efa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efad:	6a 01                	push   0x1
c001efaf:	68 20 ef 01 c0       	push   0xc001ef20
c001efb4:	6a 00                	push   0x0
c001efb6:	50                   	push   eax
c001efb7:	e8 3a da fe ff       	call   c000c9f6 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001efbc:	83 c4 10             	add    esp,0x10
c001efbf:	b8 00 00 00 00       	mov    eax,0x0
c001efc4:	83 c4 0c             	add    esp,0xc
c001efc7:	c3                   	ret    

c001efc8 <PIT::PIT()>:
c001efc8:	83 ec 0c             	sub    esp,0xc
c001efcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efcf:	83 ec 08             	sub    esp,0x8
c001efd2:	68 60 36 02 c0       	push   0xc0023660
c001efd7:	50                   	push   eax
c001efd8:	e8 d7 f3 fe ff       	call   c000e3b4 <Timer::Timer(char const*)>
c001efdd:	83 c4 10             	add    esp,0x10
c001efe0:	ba 88 36 02 c0       	mov    edx,0xc0023688
c001efe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efe9:	89 10                	mov    DWORD PTR [eax],edx
c001efeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efef:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001eff5:	0f b6 d0             	movzx  edx,al
c001eff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001effc:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001f003:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f007:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f00d:	0f b6 d0             	movzx  edx,al
c001f010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f014:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001f019:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f01d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f023:	8d 50 01             	lea    edx,[eax+0x1]
c001f026:	88 d1                	mov    cl,dl
c001f028:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f02c:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001f032:	0f b6 d0             	movzx  edx,al
c001f035:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f039:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001f03d:	83 e1 3f             	and    ecx,0x3f
c001f040:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001f044:	90                   	nop
c001f045:	83 c4 0c             	add    esp,0xc
c001f048:	c3                   	ret    
c001f049:	66 90                	xchg   ax,ax
c001f04b:	66 90                	xchg   ax,ax
c001f04d:	66 90                	xchg   ax,ax
c001f04f:	90                   	nop

c001f050 <avxDetect>:
c001f050:	b8 01 00 00 00       	mov    eax,0x1
c001f055:	0f a2                	cpuid  
c001f057:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001f05d:	74 15                	je     c001f074 <avxDetect.noAVX>
c001f05f:	b8 01 00 00 00       	mov    eax,0x1
c001f064:	0f a2                	cpuid  
c001f066:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001f06c:	74 06                	je     c001f074 <avxDetect.noAVX>
c001f06e:	b8 01 00 00 00       	mov    eax,0x1
c001f073:	c3                   	ret    

c001f074 <avxDetect.noAVX>:
c001f074:	b8 00 00 00 00       	mov    eax,0x0
c001f079:	c3                   	ret    

c001f07a <avxSave>:
c001f07a:	53                   	push   ebx
c001f07b:	52                   	push   edx
c001f07c:	31 c0                	xor    eax,eax
c001f07e:	48                   	dec    eax
c001f07f:	89 c2                	mov    edx,eax
c001f081:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f085:	0f ae 23             	xsave  [ebx]
c001f088:	5a                   	pop    edx
c001f089:	5b                   	pop    ebx
c001f08a:	c3                   	ret    

c001f08b <avxLoad>:
c001f08b:	53                   	push   ebx
c001f08c:	52                   	push   edx
c001f08d:	31 c0                	xor    eax,eax
c001f08f:	48                   	dec    eax
c001f090:	89 c2                	mov    edx,eax
c001f092:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f096:	0f ae 2b             	xrstor [ebx]
c001f099:	5a                   	pop    edx
c001f09a:	5b                   	pop    ebx
c001f09b:	c3                   	ret    

c001f09c <avxInit>:
c001f09c:	e8 67 03 00 00       	call   c001f408 <sseInit>
c001f0a1:	50                   	push   eax
c001f0a2:	51                   	push   ecx
c001f0a3:	0f 20 e0             	mov    eax,cr4
c001f0a6:	0d 00 00 04 00       	or     eax,0x40000
c001f0ab:	0f 22 e0             	mov    cr4,eax
c001f0ae:	31 c9                	xor    ecx,ecx
c001f0b0:	0f 01 d0             	xgetbv 
c001f0b3:	0d 07 00 00 00       	or     eax,0x7
c001f0b8:	0f 01 d1             	xsetbv 
c001f0bb:	59                   	pop    ecx
c001f0bc:	58                   	pop    eax
c001f0bd:	c3                   	ret    

c001f0be <avxClose>:
c001f0be:	c3                   	ret    

c001f0bf <wouldSheSayYes>:
c001f0bf:	c3                   	ret    
c001f0c0:	49                   	dec    ecx
c001f0c1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001f0c5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001f0c9:	75 20                	jne    c001f0eb <isr0+0xb>
c001f0cb:	4e                   	dec    esi
c001f0cc:	79 61                	jns    c001f12f <isr7+0x3>
c001f0ce:	68 2e 2e 2e 00       	push   0x2e2e2e
c001f0d3:	66 90                	xchg   ax,ax
c001f0d5:	66 90                	xchg   ax,ax
c001f0d7:	66 90                	xchg   ax,ax
c001f0d9:	66 90                	xchg   ax,ax
c001f0db:	66 90                	xchg   ax,ax
c001f0dd:	66 90                	xchg   ax,ax
c001f0df:	90                   	nop

c001f0e0 <isr0>:
c001f0e0:	fa                   	cli    
c001f0e1:	68 00 00 00 00       	push   0x0
c001f0e6:	68 00 00 00 00       	push   0x0
c001f0eb:	e9 56 01 00 00       	jmp    c001f246 <int_common_stub>

c001f0f0 <isr1>:
c001f0f0:	fa                   	cli    
c001f0f1:	6a 00                	push   0x0
c001f0f3:	6a 01                	push   0x1
c001f0f5:	e9 4c 01 00 00       	jmp    c001f246 <int_common_stub>

c001f0fa <isr2>:
c001f0fa:	fa                   	cli    
c001f0fb:	6a 00                	push   0x0
c001f0fd:	6a 02                	push   0x2
c001f0ff:	e9 42 01 00 00       	jmp    c001f246 <int_common_stub>

c001f104 <isr3>:
c001f104:	fa                   	cli    
c001f105:	6a 00                	push   0x0
c001f107:	6a 03                	push   0x3
c001f109:	e9 38 01 00 00       	jmp    c001f246 <int_common_stub>

c001f10e <isr4>:
c001f10e:	fa                   	cli    
c001f10f:	6a 00                	push   0x0
c001f111:	6a 04                	push   0x4
c001f113:	e9 2e 01 00 00       	jmp    c001f246 <int_common_stub>

c001f118 <isr5>:
c001f118:	fa                   	cli    
c001f119:	6a 00                	push   0x0
c001f11b:	6a 05                	push   0x5
c001f11d:	e9 24 01 00 00       	jmp    c001f246 <int_common_stub>

c001f122 <isr6>:
c001f122:	fa                   	cli    
c001f123:	6a 00                	push   0x0
c001f125:	6a 06                	push   0x6
c001f127:	e9 1a 01 00 00       	jmp    c001f246 <int_common_stub>

c001f12c <isr7>:
c001f12c:	fa                   	cli    
c001f12d:	6a 00                	push   0x0
c001f12f:	6a 07                	push   0x7
c001f131:	e9 10 01 00 00       	jmp    c001f246 <int_common_stub>

c001f136 <isr8>:
c001f136:	fa                   	cli    
c001f137:	6a 08                	push   0x8
c001f139:	e9 08 01 00 00       	jmp    c001f246 <int_common_stub>

c001f13e <isr9>:
c001f13e:	fa                   	cli    
c001f13f:	6a 00                	push   0x0
c001f141:	6a 09                	push   0x9
c001f143:	e9 fe 00 00 00       	jmp    c001f246 <int_common_stub>

c001f148 <isr10>:
c001f148:	fa                   	cli    
c001f149:	6a 0a                	push   0xa
c001f14b:	e9 f6 00 00 00       	jmp    c001f246 <int_common_stub>

c001f150 <isr11>:
c001f150:	fa                   	cli    
c001f151:	6a 0b                	push   0xb
c001f153:	e9 ee 00 00 00       	jmp    c001f246 <int_common_stub>

c001f158 <isr12>:
c001f158:	fa                   	cli    
c001f159:	6a 0c                	push   0xc
c001f15b:	e9 e6 00 00 00       	jmp    c001f246 <int_common_stub>

c001f160 <isr13>:
c001f160:	fa                   	cli    
c001f161:	6a 0d                	push   0xd
c001f163:	53                   	push   ebx
c001f164:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f168:	81 fb 36 f3 01 c0    	cmp    ebx,0xc001f336
c001f16e:	5b                   	pop    ebx
c001f16f:	0f 84 c3 01 00 00    	je     c001f338 <finishSignal2>
c001f175:	e9 cc 00 00 00       	jmp    c001f246 <int_common_stub>

c001f17a <isr14>:
c001f17a:	fa                   	cli    
c001f17b:	6a 0e                	push   0xe
c001f17d:	e9 c4 00 00 00       	jmp    c001f246 <int_common_stub>

c001f182 <isr15>:
c001f182:	fa                   	cli    
c001f183:	6a 00                	push   0x0
c001f185:	6a 0f                	push   0xf
c001f187:	e9 ba 00 00 00       	jmp    c001f246 <int_common_stub>

c001f18c <isr16>:
c001f18c:	fa                   	cli    
c001f18d:	6a 00                	push   0x0
c001f18f:	6a 10                	push   0x10
c001f191:	e9 b0 00 00 00       	jmp    c001f246 <int_common_stub>

c001f196 <isr17>:
c001f196:	fa                   	cli    
c001f197:	6a 00                	push   0x0
c001f199:	6a 11                	push   0x11
c001f19b:	e9 a6 00 00 00       	jmp    c001f246 <int_common_stub>

c001f1a0 <isr18>:
c001f1a0:	fa                   	cli    
c001f1a1:	6a 00                	push   0x0
c001f1a3:	6a 12                	push   0x12
c001f1a5:	e9 9c 00 00 00       	jmp    c001f246 <int_common_stub>

c001f1aa <irq3>:
c001f1aa:	fa                   	cli    
c001f1ab:	6a 00                	push   0x0
c001f1ad:	6a 23                	push   0x23
c001f1af:	e9 92 00 00 00       	jmp    c001f246 <int_common_stub>

c001f1b4 <irq4>:
c001f1b4:	fa                   	cli    
c001f1b5:	6a 00                	push   0x0
c001f1b7:	6a 24                	push   0x24
c001f1b9:	e9 88 00 00 00       	jmp    c001f246 <int_common_stub>

c001f1be <irq5>:
c001f1be:	fa                   	cli    
c001f1bf:	6a 00                	push   0x0
c001f1c1:	6a 25                	push   0x25
c001f1c3:	e9 7e 00 00 00       	jmp    c001f246 <int_common_stub>

c001f1c8 <irq6>:
c001f1c8:	fa                   	cli    
c001f1c9:	6a 00                	push   0x0
c001f1cb:	6a 26                	push   0x26
c001f1cd:	e9 74 00 00 00       	jmp    c001f246 <int_common_stub>

c001f1d2 <irq7>:
c001f1d2:	fa                   	cli    
c001f1d3:	6a 00                	push   0x0
c001f1d5:	6a 27                	push   0x27
c001f1d7:	e9 6a 00 00 00       	jmp    c001f246 <int_common_stub>

c001f1dc <irq8>:
c001f1dc:	fa                   	cli    
c001f1dd:	6a 00                	push   0x0
c001f1df:	6a 28                	push   0x28
c001f1e1:	e9 60 00 00 00       	jmp    c001f246 <int_common_stub>

c001f1e6 <irq9>:
c001f1e6:	fa                   	cli    
c001f1e7:	6a 00                	push   0x0
c001f1e9:	6a 29                	push   0x29
c001f1eb:	e9 56 00 00 00       	jmp    c001f246 <int_common_stub>

c001f1f0 <irq10>:
c001f1f0:	fa                   	cli    
c001f1f1:	6a 00                	push   0x0
c001f1f3:	6a 2a                	push   0x2a
c001f1f5:	e9 4c 00 00 00       	jmp    c001f246 <int_common_stub>

c001f1fa <irq11>:
c001f1fa:	fa                   	cli    
c001f1fb:	6a 00                	push   0x0
c001f1fd:	6a 2b                	push   0x2b
c001f1ff:	e9 42 00 00 00       	jmp    c001f246 <int_common_stub>

c001f204 <irq12>:
c001f204:	fa                   	cli    
c001f205:	6a 00                	push   0x0
c001f207:	6a 2c                	push   0x2c
c001f209:	e9 38 00 00 00       	jmp    c001f246 <int_common_stub>

c001f20e <irq13>:
c001f20e:	fa                   	cli    
c001f20f:	6a 00                	push   0x0
c001f211:	6a 2d                	push   0x2d
c001f213:	e9 2e 00 00 00       	jmp    c001f246 <int_common_stub>

c001f218 <irq14>:
c001f218:	fa                   	cli    
c001f219:	6a 00                	push   0x0
c001f21b:	6a 2e                	push   0x2e
c001f21d:	e9 24 00 00 00       	jmp    c001f246 <int_common_stub>

c001f222 <irq15>:
c001f222:	fa                   	cli    
c001f223:	6a 00                	push   0x0
c001f225:	6a 2f                	push   0x2f
c001f227:	e9 1a 00 00 00       	jmp    c001f246 <int_common_stub>

c001f22c <irq1>:
c001f22c:	fa                   	cli    
c001f22d:	6a 00                	push   0x0
c001f22f:	6a 21                	push   0x21
c001f231:	eb 13                	jmp    c001f246 <int_common_stub>

c001f233 <irq2>:
c001f233:	fa                   	cli    
c001f234:	6a 00                	push   0x0
c001f236:	6a 22                	push   0x22
c001f238:	eb 0c                	jmp    c001f246 <int_common_stub>

c001f23a <isr96>:
c001f23a:	6a 00                	push   0x0
c001f23c:	6a 60                	push   0x60
c001f23e:	fb                   	sti    
c001f23f:	eb 37                	jmp    c001f278 <syscall_common_stub>

c001f241 <irq0>:
c001f241:	fa                   	cli    
c001f242:	6a 00                	push   0x0
c001f244:	6a 20                	push   0x20

c001f246 <int_common_stub>:
c001f246:	60                   	pusha  
c001f247:	1e                   	push   ds
c001f248:	06                   	push   es
c001f249:	0f a0                	push   fs
c001f24b:	0f a8                	push   gs
c001f24d:	66 b8 10 00          	mov    ax,0x10
c001f251:	66 8e d8             	mov    ds,ax
c001f254:	66 8e c0             	mov    es,ax
c001f257:	66 8e e0             	mov    fs,ax
c001f25a:	66 8e e8             	mov    gs,ax
c001f25d:	54                   	push   esp
c001f25e:	fc                   	cld    
c001f25f:	e8 5c dc fe ff       	call   c000cec0 <int_handler>
c001f264:	81 c4 04 00 00 00    	add    esp,0x4
c001f26a:	0f a9                	pop    gs
c001f26c:	0f a1                	pop    fs
c001f26e:	07                   	pop    es
c001f26f:	1f                   	pop    ds
c001f270:	61                   	popa   
c001f271:	81 c4 08 00 00 00    	add    esp,0x8
c001f277:	cf                   	iret   

c001f278 <syscall_common_stub>:
c001f278:	60                   	pusha  
c001f279:	1e                   	push   ds
c001f27a:	06                   	push   es
c001f27b:	0f a0                	push   fs
c001f27d:	0f a8                	push   gs
c001f27f:	66 b8 10 00          	mov    ax,0x10
c001f283:	66 8e d8             	mov    ds,ax
c001f286:	66 8e c0             	mov    es,ax
c001f289:	66 8e e0             	mov    fs,ax
c001f28c:	66 8e e8             	mov    gs,ax
c001f28f:	54                   	push   esp
c001f290:	fc                   	cld    
c001f291:	e8 2a dc fe ff       	call   c000cec0 <int_handler>
c001f296:	81 c4 04 00 00 00    	add    esp,0x4
c001f29c:	0f a9                	pop    gs
c001f29e:	0f a1                	pop    fs
c001f2a0:	07                   	pop    es
c001f2a1:	1f                   	pop    ds
c001f2a2:	e8 44 29 ff ff       	call   c0011beb <KiCheckSignalZ>
c001f2a7:	3d 00 00 00 00       	cmp    eax,0x0
c001f2ac:	0f 84 c0 00 00 00    	je     c001f372 <skipSignals>
c001f2b2:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001f2b7:	61                   	popa   
c001f2b8:	53                   	push   ebx
c001f2b9:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001f2bf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001f2c2:	5b                   	pop    ebx
c001f2c3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001f2c8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001f2cb:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001f2ce:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f2d1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001f2d4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001f2d7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001f2da:	81 c4 08 00 00 00    	add    esp,0x8
c001f2e0:	5e                   	pop    esi
c001f2e1:	5b                   	pop    ebx
c001f2e2:	59                   	pop    ecx
c001f2e3:	5a                   	pop    edx
c001f2e4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001f2e7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001f2ea:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001f2ed:	52                   	push   edx
c001f2ee:	51                   	push   ecx
c001f2ef:	53                   	push   ebx
c001f2f0:	56                   	push   esi
c001f2f1:	81 ec 08 00 00 00    	sub    esp,0x8
c001f2f7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001f2fa:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001f2fd:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001f300:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f303:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f306:	60                   	pusha  
c001f307:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001f30d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001f310:	89 e3                	mov    ebx,esp
c001f312:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001f315:	52                   	push   edx
c001f316:	68 36 f3 01 c0       	push   0xc001f336
c001f31b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001f31e:	89 dc                	mov    esp,ebx
c001f320:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001f323:	68 23 00 00 00       	push   0x23
c001f328:	51                   	push   ecx
c001f329:	68 02 02 00 00       	push   0x202
c001f32e:	68 1b 00 00 00       	push   0x1b
c001f333:	ff 36                	push   DWORD PTR [esi]
c001f335:	cf                   	iret   

c001f336 <finishSignal>:
c001f336:	cd 0f                	int    0xf

c001f338 <finishSignal2>:
c001f338:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001f33e:	e8 25 29 ff ff       	call   c0011c68 <KiFinishSignalZ>
c001f343:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001f349:	68 23 00 00 00       	push   0x23
c001f34e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001f351:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001f354:	68 1b 00 00 00       	push   0x1b
c001f359:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001f35c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f35f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001f362:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001f365:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001f368:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001f36b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001f36e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001f371:	cf                   	iret   

c001f372 <skipSignals>:
c001f372:	61                   	popa   
c001f373:	81 c4 08 00 00 00    	add    esp,0x8
c001f379:	cf                   	iret   
c001f37a:	90                   	nop
c001f37b:	90                   	nop

c001f37c <irq16>:
c001f37c:	fa                   	cli    
c001f37d:	6a 00                	push   0x0
c001f37f:	6a 30                	push   0x30
c001f381:	e9 c0 fe ff ff       	jmp    c001f246 <int_common_stub>

c001f386 <irq17>:
c001f386:	fa                   	cli    
c001f387:	6a 00                	push   0x0
c001f389:	6a 31                	push   0x31
c001f38b:	e9 b6 fe ff ff       	jmp    c001f246 <int_common_stub>

c001f390 <irq18>:
c001f390:	fa                   	cli    
c001f391:	6a 00                	push   0x0
c001f393:	6a 32                	push   0x32
c001f395:	e9 ac fe ff ff       	jmp    c001f246 <int_common_stub>

c001f39a <irq19>:
c001f39a:	fa                   	cli    
c001f39b:	6a 00                	push   0x0
c001f39d:	6a 33                	push   0x33
c001f39f:	e9 a2 fe ff ff       	jmp    c001f246 <int_common_stub>

c001f3a4 <irq20>:
c001f3a4:	fa                   	cli    
c001f3a5:	6a 00                	push   0x0
c001f3a7:	6a 34                	push   0x34
c001f3a9:	e9 98 fe ff ff       	jmp    c001f246 <int_common_stub>

c001f3ae <irq21>:
c001f3ae:	fa                   	cli    
c001f3af:	6a 00                	push   0x0
c001f3b1:	6a 35                	push   0x35
c001f3b3:	e9 8e fe ff ff       	jmp    c001f246 <int_common_stub>

c001f3b8 <irq22>:
c001f3b8:	fa                   	cli    
c001f3b9:	6a 00                	push   0x0
c001f3bb:	6a 36                	push   0x36
c001f3bd:	e9 84 fe ff ff       	jmp    c001f246 <int_common_stub>

c001f3c2 <irq23>:
c001f3c2:	fa                   	cli    
c001f3c3:	6a 00                	push   0x0
c001f3c5:	6a 37                	push   0x37
c001f3c7:	e9 7a fe ff ff       	jmp    c001f246 <int_common_stub>
c001f3cc:	66 90                	xchg   ax,ax
c001f3ce:	66 90                	xchg   ax,ax

c001f3d0 <i386GetRDRAND>:
c001f3d0:	b9 64 00 00 00       	mov    ecx,0x64

c001f3d5 <retry>:
c001f3d5:	0f c7 f0             	rdrand eax
c001f3d8:	72 05                	jb     c001f3df <retry.done>
c001f3da:	e2 f9                	loop   c001f3d5 <retry>

c001f3dc <retry.fail>:
c001f3dc:	31 c0                	xor    eax,eax
c001f3de:	c3                   	ret    

c001f3df <retry.done>:
c001f3df:	c3                   	ret    

c001f3e0 <absolutelyNoChanceInHell>:
c001f3e0:	b8 01 00 00 00       	mov    eax,0x1
c001f3e5:	0f a2                	cpuid  
c001f3e7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f3ed:	74 06                	je     c001f3f5 <sseDetect.noSSE>
c001f3ef:	b8 01 00 00 00       	mov    eax,0x1
c001f3f4:	c3                   	ret    

c001f3f5 <sseDetect.noSSE>:
c001f3f5:	31 c0                	xor    eax,eax
c001f3f7:	c3                   	ret    

c001f3f8 <sseSave>:
c001f3f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3fc:	0f ae 00             	fxsave [eax]
c001f3ff:	c3                   	ret    

c001f400 <sseLoad>:
c001f400:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f404:	0f ae 08             	fxrstor [eax]
c001f407:	c3                   	ret    

c001f408 <sseInit>:
c001f408:	e8 42 00 00 00       	call   c001f44f <x87Init>
c001f40d:	0f 20 e0             	mov    eax,cr4
c001f410:	66 0d 00 06          	or     ax,0x600
c001f414:	0f 22 e0             	mov    cr4,eax
c001f417:	c3                   	ret    

c001f418 <sseClose>:
c001f418:	c3                   	ret    
c001f419:	66 90                	xchg   ax,ax
c001f41b:	66 90                	xchg   ax,ax
c001f41d:	66 90                	xchg   ax,ax
c001f41f:	90                   	nop

c001f420 <value_37F>:
c001f420:	7f 03                	jg     c001f425 <value_37A+0x1>

c001f422 <value_37E>:
c001f422:	7e 03                	jle    c001f427 <x87Detect+0x1>

c001f424 <value_37A>:
c001f424:	7a 03                	jp     c001f429 <x87Detect+0x3>

c001f426 <x87Detect>:
c001f426:	b8 01 00 00 00       	mov    eax,0x1
c001f42b:	0f a2                	cpuid  
c001f42d:	f7 c2 01 00 00 00    	test   edx,0x1
c001f433:	74 06                	je     c001f43b <x87Detect.nox87>
c001f435:	b8 01 00 00 00       	mov    eax,0x1
c001f43a:	c3                   	ret    

c001f43b <x87Detect.nox87>:
c001f43b:	b8 00 00 00 00       	mov    eax,0x0
c001f440:	c3                   	ret    

c001f441 <x87Save>:
c001f441:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f445:	dd 30                	fnsave [eax]
c001f447:	c3                   	ret    

c001f448 <x87Load>:
c001f448:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f44c:	dd 20                	frstor [eax]
c001f44e:	c3                   	ret    

c001f44f <x87Init>:
c001f44f:	0f 20 c0             	mov    eax,cr0
c001f452:	66 25 fb ff          	and    ax,0xfffb
c001f456:	66 0d 22 00          	or     ax,0x22
c001f45a:	0f 22 c0             	mov    cr0,eax
c001f45d:	db e3                	fninit 
c001f45f:	0f 06                	clts   
c001f461:	d9 2d 24 f4 01 c0    	fldcw  WORD PTR ds:0xc001f424
c001f467:	c3                   	ret    

c001f468 <x87Close>:
c001f468:	c3                   	ret    
c001f469:	66 90                	xchg   ax,ax
c001f46b:	90                   	nop

c001f46c <__do_global_ctors_aux>:
c001f46c:	a1 20 04 02 c0       	mov    eax,ds:0xc0020420
c001f471:	83 f8 ff             	cmp    eax,0xffffffff
c001f474:	74 1a                	je     c001f490 <__do_global_ctors_aux+0x24>
c001f476:	55                   	push   ebp
c001f477:	89 e5                	mov    ebp,esp
c001f479:	53                   	push   ebx
c001f47a:	52                   	push   edx
c001f47b:	bb 20 04 02 c0       	mov    ebx,0xc0020420
c001f480:	ff d0                	call   eax
c001f482:	83 eb 04             	sub    ebx,0x4
c001f485:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f487:	83 f8 ff             	cmp    eax,0xffffffff
c001f48a:	75 f4                	jne    c001f480 <__do_global_ctors_aux+0x14>
c001f48c:	58                   	pop    eax
c001f48d:	5b                   	pop    ebx
c001f48e:	5d                   	pop    ebp
c001f48f:	c3                   	ret    
c001f490:	c3                   	ret    
c001f491:	66 90                	xchg   ax,ax
c001f493:	90                   	nop

c001f494 <__divdi3>:
c001f494:	55                   	push   ebp
c001f495:	57                   	push   edi
c001f496:	56                   	push   esi
c001f497:	53                   	push   ebx
c001f498:	83 ec 1c             	sub    esp,0x1c
c001f49b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f49f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f4a3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f4a6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f4aa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f4ae:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f4b2:	85 db                	test   ebx,ebx
c001f4b4:	0f 88 8e 00 00 00    	js     c001f548 <__divdi3+0xb4>
c001f4ba:	89 dd                	mov    ebp,ebx
c001f4bc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f4c4:	89 d3                	mov    ebx,edx
c001f4c6:	85 d2                	test   edx,edx
c001f4c8:	79 0d                	jns    c001f4d7 <__divdi3+0x43>
c001f4ca:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f4ce:	f7 d8                	neg    eax
c001f4d0:	83 d2 00             	adc    edx,0x0
c001f4d3:	f7 da                	neg    edx
c001f4d5:	89 d3                	mov    ebx,edx
c001f4d7:	89 c7                	mov    edi,eax
c001f4d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f4dc:	85 db                	test   ebx,ebx
c001f4de:	75 48                	jne    c001f528 <__divdi3+0x94>
c001f4e0:	39 ef                	cmp    edi,ebp
c001f4e2:	76 24                	jbe    c001f508 <__divdi3+0x74>
c001f4e4:	89 ea                	mov    edx,ebp
c001f4e6:	f7 f7                	div    edi
c001f4e8:	89 c1                	mov    ecx,eax
c001f4ea:	31 f6                	xor    esi,esi
c001f4ec:	89 c8                	mov    eax,ecx
c001f4ee:	89 f2                	mov    edx,esi
c001f4f0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f4f4:	85 c9                	test   ecx,ecx
c001f4f6:	74 07                	je     c001f4ff <__divdi3+0x6b>
c001f4f8:	f7 d8                	neg    eax
c001f4fa:	83 d2 00             	adc    edx,0x0
c001f4fd:	f7 da                	neg    edx
c001f4ff:	83 c4 1c             	add    esp,0x1c
c001f502:	5b                   	pop    ebx
c001f503:	5e                   	pop    esi
c001f504:	5f                   	pop    edi
c001f505:	5d                   	pop    ebp
c001f506:	c3                   	ret    
c001f507:	90                   	nop
c001f508:	85 ff                	test   edi,edi
c001f50a:	75 0b                	jne    c001f517 <__divdi3+0x83>
c001f50c:	b8 01 00 00 00       	mov    eax,0x1
c001f511:	31 d2                	xor    edx,edx
c001f513:	f7 f3                	div    ebx
c001f515:	89 c7                	mov    edi,eax
c001f517:	31 d2                	xor    edx,edx
c001f519:	89 e8                	mov    eax,ebp
c001f51b:	f7 f7                	div    edi
c001f51d:	89 c6                	mov    esi,eax
c001f51f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f522:	f7 f7                	div    edi
c001f524:	89 c1                	mov    ecx,eax
c001f526:	eb c4                	jmp    c001f4ec <__divdi3+0x58>
c001f528:	39 eb                	cmp    ebx,ebp
c001f52a:	77 3c                	ja     c001f568 <__divdi3+0xd4>
c001f52c:	0f bd f3             	bsr    esi,ebx
c001f52f:	83 f6 1f             	xor    esi,0x1f
c001f532:	75 40                	jne    c001f574 <__divdi3+0xe0>
c001f534:	39 eb                	cmp    ebx,ebp
c001f536:	72 09                	jb     c001f541 <__divdi3+0xad>
c001f538:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f53b:	0f 87 97 00 00 00    	ja     c001f5d8 <__divdi3+0x144>
c001f541:	b9 01 00 00 00       	mov    ecx,0x1
c001f546:	eb a4                	jmp    c001f4ec <__divdi3+0x58>
c001f548:	f7 d9                	neg    ecx
c001f54a:	83 d3 00             	adc    ebx,0x0
c001f54d:	f7 db                	neg    ebx
c001f54f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f552:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f556:	89 dd                	mov    ebp,ebx
c001f558:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f560:	e9 5f ff ff ff       	jmp    c001f4c4 <__divdi3+0x30>
c001f565:	8d 76 00             	lea    esi,[esi+0x0]
c001f568:	31 f6                	xor    esi,esi
c001f56a:	31 c9                	xor    ecx,ecx
c001f56c:	e9 7b ff ff ff       	jmp    c001f4ec <__divdi3+0x58>
c001f571:	8d 76 00             	lea    esi,[esi+0x0]
c001f574:	b8 20 00 00 00       	mov    eax,0x20
c001f579:	29 f0                	sub    eax,esi
c001f57b:	89 f1                	mov    ecx,esi
c001f57d:	d3 e3                	shl    ebx,cl
c001f57f:	89 fa                	mov    edx,edi
c001f581:	88 c1                	mov    cl,al
c001f583:	d3 ea                	shr    edx,cl
c001f585:	09 da                	or     edx,ebx
c001f587:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f58b:	89 f1                	mov    ecx,esi
c001f58d:	d3 e7                	shl    edi,cl
c001f58f:	89 eb                	mov    ebx,ebp
c001f591:	88 c1                	mov    cl,al
c001f593:	d3 eb                	shr    ebx,cl
c001f595:	89 f1                	mov    ecx,esi
c001f597:	d3 e5                	shl    ebp,cl
c001f599:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f59c:	88 c1                	mov    cl,al
c001f59e:	d3 ea                	shr    edx,cl
c001f5a0:	09 d5                	or     ebp,edx
c001f5a2:	89 e8                	mov    eax,ebp
c001f5a4:	89 da                	mov    edx,ebx
c001f5a6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f5aa:	89 d3                	mov    ebx,edx
c001f5ac:	89 c5                	mov    ebp,eax
c001f5ae:	f7 e7                	mul    edi
c001f5b0:	39 d3                	cmp    ebx,edx
c001f5b2:	72 18                	jb     c001f5cc <__divdi3+0x138>
c001f5b4:	74 0a                	je     c001f5c0 <__divdi3+0x12c>
c001f5b6:	89 e9                	mov    ecx,ebp
c001f5b8:	31 f6                	xor    esi,esi
c001f5ba:	e9 2d ff ff ff       	jmp    c001f4ec <__divdi3+0x58>
c001f5bf:	90                   	nop
c001f5c0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f5c3:	89 f1                	mov    ecx,esi
c001f5c5:	d3 e7                	shl    edi,cl
c001f5c7:	39 c7                	cmp    edi,eax
c001f5c9:	73 eb                	jae    c001f5b6 <__divdi3+0x122>
c001f5cb:	90                   	nop
c001f5cc:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f5cf:	31 f6                	xor    esi,esi
c001f5d1:	e9 16 ff ff ff       	jmp    c001f4ec <__divdi3+0x58>
c001f5d6:	66 90                	xchg   ax,ax
c001f5d8:	31 c9                	xor    ecx,ecx
c001f5da:	e9 0d ff ff ff       	jmp    c001f4ec <__divdi3+0x58>
c001f5df:	90                   	nop

c001f5e0 <__moddi3>:
c001f5e0:	55                   	push   ebp
c001f5e1:	57                   	push   edi
c001f5e2:	56                   	push   esi
c001f5e3:	53                   	push   ebx
c001f5e4:	83 ec 2c             	sub    esp,0x2c
c001f5e7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f5eb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f5ef:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f5f3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f5f7:	85 db                	test   ebx,ebx
c001f5f9:	0f 88 85 00 00 00    	js     c001f684 <__moddi3+0xa4>
c001f5ff:	89 de                	mov    esi,ebx
c001f601:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f609:	89 d7                	mov    edi,edx
c001f60b:	85 d2                	test   edx,edx
c001f60d:	79 09                	jns    c001f618 <__moddi3+0x38>
c001f60f:	f7 d8                	neg    eax
c001f611:	83 d2 00             	adc    edx,0x0
c001f614:	f7 da                	neg    edx
c001f616:	89 d7                	mov    edi,edx
c001f618:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f61c:	89 cd                	mov    ebp,ecx
c001f61e:	85 ff                	test   edi,edi
c001f620:	75 52                	jne    c001f674 <__moddi3+0x94>
c001f622:	89 c3                	mov    ebx,eax
c001f624:	39 f0                	cmp    eax,esi
c001f626:	76 24                	jbe    c001f64c <__moddi3+0x6c>
c001f628:	89 c8                	mov    eax,ecx
c001f62a:	89 f2                	mov    edx,esi
c001f62c:	f7 f3                	div    ebx
c001f62e:	89 d6                	mov    esi,edx
c001f630:	89 f0                	mov    eax,esi
c001f632:	31 d2                	xor    edx,edx
c001f634:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f638:	85 c9                	test   ecx,ecx
c001f63a:	74 07                	je     c001f643 <__moddi3+0x63>
c001f63c:	f7 d8                	neg    eax
c001f63e:	83 d2 00             	adc    edx,0x0
c001f641:	f7 da                	neg    edx
c001f643:	83 c4 2c             	add    esp,0x2c
c001f646:	5b                   	pop    ebx
c001f647:	5e                   	pop    esi
c001f648:	5f                   	pop    edi
c001f649:	5d                   	pop    ebp
c001f64a:	c3                   	ret    
c001f64b:	90                   	nop
c001f64c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f650:	85 db                	test   ebx,ebx
c001f652:	75 0d                	jne    c001f661 <__moddi3+0x81>
c001f654:	b8 01 00 00 00       	mov    eax,0x1
c001f659:	31 d2                	xor    edx,edx
c001f65b:	f7 f7                	div    edi
c001f65d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f661:	89 f0                	mov    eax,esi
c001f663:	31 d2                	xor    edx,edx
c001f665:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f669:	f7 f7                	div    edi
c001f66b:	89 e8                	mov    eax,ebp
c001f66d:	f7 f7                	div    edi
c001f66f:	89 d6                	mov    esi,edx
c001f671:	eb bd                	jmp    c001f630 <__moddi3+0x50>
c001f673:	90                   	nop
c001f674:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f678:	39 f7                	cmp    edi,esi
c001f67a:	76 20                	jbe    c001f69c <__moddi3+0xbc>
c001f67c:	89 c8                	mov    eax,ecx
c001f67e:	89 f2                	mov    edx,esi
c001f680:	eb b2                	jmp    c001f634 <__moddi3+0x54>
c001f682:	66 90                	xchg   ax,ax
c001f684:	f7 d9                	neg    ecx
c001f686:	83 d3 00             	adc    ebx,0x0
c001f689:	f7 db                	neg    ebx
c001f68b:	89 de                	mov    esi,ebx
c001f68d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f695:	e9 6f ff ff ff       	jmp    c001f609 <__moddi3+0x29>
c001f69a:	66 90                	xchg   ax,ax
c001f69c:	0f bd c7             	bsr    eax,edi
c001f69f:	83 f0 1f             	xor    eax,0x1f
c001f6a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f6a6:	75 24                	jne    c001f6cc <__moddi3+0xec>
c001f6a8:	39 f7                	cmp    edi,esi
c001f6aa:	72 06                	jb     c001f6b2 <__moddi3+0xd2>
c001f6ac:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f6b0:	77 0c                	ja     c001f6be <__moddi3+0xde>
c001f6b2:	89 e9                	mov    ecx,ebp
c001f6b4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f6b8:	19 fe                	sbb    esi,edi
c001f6ba:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f6be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f6c2:	89 f2                	mov    edx,esi
c001f6c4:	e9 6b ff ff ff       	jmp    c001f634 <__moddi3+0x54>
c001f6c9:	8d 76 00             	lea    esi,[esi+0x0]
c001f6cc:	b8 20 00 00 00       	mov    eax,0x20
c001f6d1:	89 c2                	mov    edx,eax
c001f6d3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f6d7:	29 da                	sub    edx,ebx
c001f6d9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f6dd:	88 d9                	mov    cl,bl
c001f6df:	d3 e7                	shl    edi,cl
c001f6e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f6e5:	88 d1                	mov    cl,dl
c001f6e7:	d3 e8                	shr    eax,cl
c001f6e9:	09 c7                	or     edi,eax
c001f6eb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f6ef:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f6f3:	89 d8                	mov    eax,ebx
c001f6f5:	88 d9                	mov    cl,bl
c001f6f7:	d3 e7                	shl    edi,cl
c001f6f9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f6fd:	89 f3                	mov    ebx,esi
c001f6ff:	88 d1                	mov    cl,dl
c001f701:	d3 eb                	shr    ebx,cl
c001f703:	89 c7                	mov    edi,eax
c001f705:	88 c1                	mov    cl,al
c001f707:	d3 e6                	shl    esi,cl
c001f709:	89 e8                	mov    eax,ebp
c001f70b:	88 d1                	mov    cl,dl
c001f70d:	d3 e8                	shr    eax,cl
c001f70f:	09 f0                	or     eax,esi
c001f711:	89 f9                	mov    ecx,edi
c001f713:	d3 e5                	shl    ebp,cl
c001f715:	89 da                	mov    edx,ebx
c001f717:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f71b:	89 d3                	mov    ebx,edx
c001f71d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f721:	89 c6                	mov    esi,eax
c001f723:	89 d1                	mov    ecx,edx
c001f725:	39 d3                	cmp    ebx,edx
c001f727:	72 27                	jb     c001f750 <__moddi3+0x170>
c001f729:	74 21                	je     c001f74c <__moddi3+0x16c>
c001f72b:	29 f5                	sub    ebp,esi
c001f72d:	19 cb                	sbb    ebx,ecx
c001f72f:	89 de                	mov    esi,ebx
c001f731:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f735:	d3 e6                	shl    esi,cl
c001f737:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f73b:	89 f9                	mov    ecx,edi
c001f73d:	d3 ed                	shr    ebp,cl
c001f73f:	09 ee                	or     esi,ebp
c001f741:	89 f0                	mov    eax,esi
c001f743:	d3 eb                	shr    ebx,cl
c001f745:	89 da                	mov    edx,ebx
c001f747:	e9 e8 fe ff ff       	jmp    c001f634 <__moddi3+0x54>
c001f74c:	39 c5                	cmp    ebp,eax
c001f74e:	73 db                	jae    c001f72b <__moddi3+0x14b>
c001f750:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f754:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f758:	89 d1                	mov    ecx,edx
c001f75a:	89 c6                	mov    esi,eax
c001f75c:	eb cd                	jmp    c001f72b <__moddi3+0x14b>
c001f75e:	66 90                	xchg   ax,ax

c001f760 <__udivdi3>:
c001f760:	55                   	push   ebp
c001f761:	57                   	push   edi
c001f762:	56                   	push   esi
c001f763:	53                   	push   ebx
c001f764:	83 ec 1c             	sub    esp,0x1c
c001f767:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f76b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f76f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f773:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f777:	85 d2                	test   edx,edx
c001f779:	75 41                	jne    c001f7bc <__udivdi3+0x5c>
c001f77b:	39 f7                	cmp    edi,esi
c001f77d:	76 15                	jbe    c001f794 <__udivdi3+0x34>
c001f77f:	89 e8                	mov    eax,ebp
c001f781:	89 f2                	mov    edx,esi
c001f783:	f7 f7                	div    edi
c001f785:	31 db                	xor    ebx,ebx
c001f787:	89 da                	mov    edx,ebx
c001f789:	83 c4 1c             	add    esp,0x1c
c001f78c:	5b                   	pop    ebx
c001f78d:	5e                   	pop    esi
c001f78e:	5f                   	pop    edi
c001f78f:	5d                   	pop    ebp
c001f790:	c3                   	ret    
c001f791:	8d 76 00             	lea    esi,[esi+0x0]
c001f794:	89 f9                	mov    ecx,edi
c001f796:	85 ff                	test   edi,edi
c001f798:	75 0b                	jne    c001f7a5 <__udivdi3+0x45>
c001f79a:	b8 01 00 00 00       	mov    eax,0x1
c001f79f:	31 d2                	xor    edx,edx
c001f7a1:	f7 f7                	div    edi
c001f7a3:	89 c1                	mov    ecx,eax
c001f7a5:	31 d2                	xor    edx,edx
c001f7a7:	89 f0                	mov    eax,esi
c001f7a9:	f7 f1                	div    ecx
c001f7ab:	89 c3                	mov    ebx,eax
c001f7ad:	89 e8                	mov    eax,ebp
c001f7af:	f7 f1                	div    ecx
c001f7b1:	89 da                	mov    edx,ebx
c001f7b3:	83 c4 1c             	add    esp,0x1c
c001f7b6:	5b                   	pop    ebx
c001f7b7:	5e                   	pop    esi
c001f7b8:	5f                   	pop    edi
c001f7b9:	5d                   	pop    ebp
c001f7ba:	c3                   	ret    
c001f7bb:	90                   	nop
c001f7bc:	39 f2                	cmp    edx,esi
c001f7be:	77 1c                	ja     c001f7dc <__udivdi3+0x7c>
c001f7c0:	0f bd da             	bsr    ebx,edx
c001f7c3:	83 f3 1f             	xor    ebx,0x1f
c001f7c6:	75 24                	jne    c001f7ec <__udivdi3+0x8c>
c001f7c8:	39 f2                	cmp    edx,esi
c001f7ca:	72 08                	jb     c001f7d4 <__udivdi3+0x74>
c001f7cc:	39 ef                	cmp    edi,ebp
c001f7ce:	0f 87 84 00 00 00    	ja     c001f858 <__udivdi3+0xf8>
c001f7d4:	b8 01 00 00 00       	mov    eax,0x1
c001f7d9:	eb ac                	jmp    c001f787 <__udivdi3+0x27>
c001f7db:	90                   	nop
c001f7dc:	31 db                	xor    ebx,ebx
c001f7de:	31 c0                	xor    eax,eax
c001f7e0:	89 da                	mov    edx,ebx
c001f7e2:	83 c4 1c             	add    esp,0x1c
c001f7e5:	5b                   	pop    ebx
c001f7e6:	5e                   	pop    esi
c001f7e7:	5f                   	pop    edi
c001f7e8:	5d                   	pop    ebp
c001f7e9:	c3                   	ret    
c001f7ea:	66 90                	xchg   ax,ax
c001f7ec:	b8 20 00 00 00       	mov    eax,0x20
c001f7f1:	29 d8                	sub    eax,ebx
c001f7f3:	88 d9                	mov    cl,bl
c001f7f5:	d3 e2                	shl    edx,cl
c001f7f7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f7fb:	89 fa                	mov    edx,edi
c001f7fd:	88 c1                	mov    cl,al
c001f7ff:	d3 ea                	shr    edx,cl
c001f801:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f805:	09 d1                	or     ecx,edx
c001f807:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f80b:	88 d9                	mov    cl,bl
c001f80d:	d3 e7                	shl    edi,cl
c001f80f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f813:	89 f7                	mov    edi,esi
c001f815:	88 c1                	mov    cl,al
c001f817:	d3 ef                	shr    edi,cl
c001f819:	88 d9                	mov    cl,bl
c001f81b:	d3 e6                	shl    esi,cl
c001f81d:	89 ea                	mov    edx,ebp
c001f81f:	88 c1                	mov    cl,al
c001f821:	d3 ea                	shr    edx,cl
c001f823:	09 d6                	or     esi,edx
c001f825:	89 f0                	mov    eax,esi
c001f827:	89 fa                	mov    edx,edi
c001f829:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f82d:	89 d7                	mov    edi,edx
c001f82f:	89 c6                	mov    esi,eax
c001f831:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f835:	39 d7                	cmp    edi,edx
c001f837:	72 13                	jb     c001f84c <__udivdi3+0xec>
c001f839:	74 09                	je     c001f844 <__udivdi3+0xe4>
c001f83b:	89 f0                	mov    eax,esi
c001f83d:	31 db                	xor    ebx,ebx
c001f83f:	e9 43 ff ff ff       	jmp    c001f787 <__udivdi3+0x27>
c001f844:	88 d9                	mov    cl,bl
c001f846:	d3 e5                	shl    ebp,cl
c001f848:	39 c5                	cmp    ebp,eax
c001f84a:	73 ef                	jae    c001f83b <__udivdi3+0xdb>
c001f84c:	8d 46 ff             	lea    eax,[esi-0x1]
c001f84f:	31 db                	xor    ebx,ebx
c001f851:	e9 31 ff ff ff       	jmp    c001f787 <__udivdi3+0x27>
c001f856:	66 90                	xchg   ax,ax
c001f858:	31 c0                	xor    eax,eax
c001f85a:	e9 28 ff ff ff       	jmp    c001f787 <__udivdi3+0x27>
c001f85f:	90                   	nop

c001f860 <__umoddi3>:
c001f860:	55                   	push   ebp
c001f861:	57                   	push   edi
c001f862:	56                   	push   esi
c001f863:	53                   	push   ebx
c001f864:	83 ec 1c             	sub    esp,0x1c
c001f867:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f86b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f86f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f873:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f877:	89 da                	mov    edx,ebx
c001f879:	85 c0                	test   eax,eax
c001f87b:	75 37                	jne    c001f8b4 <__umoddi3+0x54>
c001f87d:	39 df                	cmp    edi,ebx
c001f87f:	76 13                	jbe    c001f894 <__umoddi3+0x34>
c001f881:	89 f0                	mov    eax,esi
c001f883:	f7 f7                	div    edi
c001f885:	89 d0                	mov    eax,edx
c001f887:	31 d2                	xor    edx,edx
c001f889:	83 c4 1c             	add    esp,0x1c
c001f88c:	5b                   	pop    ebx
c001f88d:	5e                   	pop    esi
c001f88e:	5f                   	pop    edi
c001f88f:	5d                   	pop    ebp
c001f890:	c3                   	ret    
c001f891:	8d 76 00             	lea    esi,[esi+0x0]
c001f894:	89 fd                	mov    ebp,edi
c001f896:	85 ff                	test   edi,edi
c001f898:	75 0b                	jne    c001f8a5 <__umoddi3+0x45>
c001f89a:	b8 01 00 00 00       	mov    eax,0x1
c001f89f:	31 d2                	xor    edx,edx
c001f8a1:	f7 f7                	div    edi
c001f8a3:	89 c5                	mov    ebp,eax
c001f8a5:	89 d8                	mov    eax,ebx
c001f8a7:	31 d2                	xor    edx,edx
c001f8a9:	f7 f5                	div    ebp
c001f8ab:	89 f0                	mov    eax,esi
c001f8ad:	f7 f5                	div    ebp
c001f8af:	89 d0                	mov    eax,edx
c001f8b1:	eb d4                	jmp    c001f887 <__umoddi3+0x27>
c001f8b3:	90                   	nop
c001f8b4:	89 f1                	mov    ecx,esi
c001f8b6:	39 d8                	cmp    eax,ebx
c001f8b8:	76 0a                	jbe    c001f8c4 <__umoddi3+0x64>
c001f8ba:	89 f0                	mov    eax,esi
c001f8bc:	83 c4 1c             	add    esp,0x1c
c001f8bf:	5b                   	pop    ebx
c001f8c0:	5e                   	pop    esi
c001f8c1:	5f                   	pop    edi
c001f8c2:	5d                   	pop    ebp
c001f8c3:	c3                   	ret    
c001f8c4:	0f bd e8             	bsr    ebp,eax
c001f8c7:	83 f5 1f             	xor    ebp,0x1f
c001f8ca:	75 1c                	jne    c001f8e8 <__umoddi3+0x88>
c001f8cc:	39 d8                	cmp    eax,ebx
c001f8ce:	72 04                	jb     c001f8d4 <__umoddi3+0x74>
c001f8d0:	39 f7                	cmp    edi,esi
c001f8d2:	77 08                	ja     c001f8dc <__umoddi3+0x7c>
c001f8d4:	89 da                	mov    edx,ebx
c001f8d6:	29 fe                	sub    esi,edi
c001f8d8:	19 c2                	sbb    edx,eax
c001f8da:	89 f1                	mov    ecx,esi
c001f8dc:	89 c8                	mov    eax,ecx
c001f8de:	83 c4 1c             	add    esp,0x1c
c001f8e1:	5b                   	pop    ebx
c001f8e2:	5e                   	pop    esi
c001f8e3:	5f                   	pop    edi
c001f8e4:	5d                   	pop    ebp
c001f8e5:	c3                   	ret    
c001f8e6:	66 90                	xchg   ax,ax
c001f8e8:	ba 20 00 00 00       	mov    edx,0x20
c001f8ed:	29 ea                	sub    edx,ebp
c001f8ef:	89 e9                	mov    ecx,ebp
c001f8f1:	d3 e0                	shl    eax,cl
c001f8f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f8f7:	89 f8                	mov    eax,edi
c001f8f9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f8fd:	88 d1                	mov    cl,dl
c001f8ff:	d3 e8                	shr    eax,cl
c001f901:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f905:	09 c1                	or     ecx,eax
c001f907:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f90b:	89 e9                	mov    ecx,ebp
c001f90d:	d3 e7                	shl    edi,cl
c001f90f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f913:	89 d8                	mov    eax,ebx
c001f915:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f919:	88 d1                	mov    cl,dl
c001f91b:	d3 e8                	shr    eax,cl
c001f91d:	89 c7                	mov    edi,eax
c001f91f:	89 e9                	mov    ecx,ebp
c001f921:	d3 e3                	shl    ebx,cl
c001f923:	89 f0                	mov    eax,esi
c001f925:	88 d1                	mov    cl,dl
c001f927:	d3 e8                	shr    eax,cl
c001f929:	09 d8                	or     eax,ebx
c001f92b:	89 e9                	mov    ecx,ebp
c001f92d:	d3 e6                	shl    esi,cl
c001f92f:	89 f3                	mov    ebx,esi
c001f931:	89 fa                	mov    edx,edi
c001f933:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f937:	89 d1                	mov    ecx,edx
c001f939:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f93d:	89 c6                	mov    esi,eax
c001f93f:	89 d7                	mov    edi,edx
c001f941:	39 d1                	cmp    ecx,edx
c001f943:	72 27                	jb     c001f96c <__umoddi3+0x10c>
c001f945:	74 21                	je     c001f968 <__umoddi3+0x108>
c001f947:	89 ca                	mov    edx,ecx
c001f949:	29 f3                	sub    ebx,esi
c001f94b:	19 fa                	sbb    edx,edi
c001f94d:	89 d0                	mov    eax,edx
c001f94f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f953:	d3 e0                	shl    eax,cl
c001f955:	89 e9                	mov    ecx,ebp
c001f957:	d3 eb                	shr    ebx,cl
c001f959:	09 d8                	or     eax,ebx
c001f95b:	d3 ea                	shr    edx,cl
c001f95d:	83 c4 1c             	add    esp,0x1c
c001f960:	5b                   	pop    ebx
c001f961:	5e                   	pop    esi
c001f962:	5f                   	pop    edi
c001f963:	5d                   	pop    ebp
c001f964:	c3                   	ret    
c001f965:	8d 76 00             	lea    esi,[esi+0x0]
c001f968:	39 c3                	cmp    ebx,eax
c001f96a:	73 db                	jae    c001f947 <__umoddi3+0xe7>
c001f96c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f970:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f974:	89 d7                	mov    edi,edx
c001f976:	89 c6                	mov    esi,eax
c001f978:	eb cd                	jmp    c001f947 <__umoddi3+0xe7>

Disassembly of section .init:

c001f97a <_init>:
c001f97a:	55                   	push   ebp
c001f97b:	89 e5                	mov    ebp,esp
c001f97d:	e8 72 07 fe ff       	call   c00000f4 <frame_dummy>
c001f982:	e8 e5 fa ff ff       	call   c001f46c <__do_global_ctors_aux>
c001f987:	5d                   	pop    ebp
c001f988:	c3                   	ret    

Disassembly of section .fini:

c001f989 <_fini>:
c001f989:	55                   	push   ebp
c001f98a:	89 e5                	mov    ebp,esp
c001f98c:	e8 f3 06 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001f991:	5d                   	pop    ebp
c001f992:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f994 <Computer::~Computer()>:
c001f994:	83 ec 0c             	sub    esp,0xc
c001f997:	ba b4 0c 02 c0       	mov    edx,0xc0020cb4
c001f99c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9a0:	89 10                	mov    DWORD PTR [eax],edx
c001f9a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9a6:	83 ec 0c             	sub    esp,0xc
c001f9a9:	50                   	push   eax
c001f9aa:	e8 67 cf fe ff       	call   c000c916 <Device::~Device()>
c001f9af:	83 c4 10             	add    esp,0x10
c001f9b2:	90                   	nop
c001f9b3:	83 c4 0c             	add    esp,0xc
c001f9b6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f9b8 <Computer::~Computer()>:
c001f9b8:	83 ec 0c             	sub    esp,0xc
c001f9bb:	83 ec 0c             	sub    esp,0xc
c001f9be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9c2:	e8 cd ff ff ff       	call   c001f994 <Computer::~Computer()>
c001f9c7:	83 c4 10             	add    esp,0x10
c001f9ca:	83 ec 08             	sub    esp,0x8
c001f9cd:	68 70 01 00 00       	push   0x170
c001f9d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9d6:	e8 31 ae fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f9db:	83 c4 10             	add    esp,0x10
c001f9de:	83 c4 0c             	add    esp,0xc
c001f9e1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f9e2 <idleCommon()>:
c001f9e2:	83 ec 0c             	sub    esp,0xc
c001f9e5:	fa                   	cli    
c001f9e6:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001f9ec:	e8 b3 66 ff ff       	call   c00160a4 <schedule()>
c001f9f1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001f9f6:	48                   	dec    eax
c001f9f7:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001f9fc:	75 01                	jne    c001f9ff <idleCommon()+0x1d>
c001f9fe:	fb                   	sti    
c001f9ff:	83 c4 0c             	add    esp,0xc
c001fa02:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001fa04 <LinkedList<UnixFile>::~LinkedList()>:
c001fa04:	90                   	nop
c001fa05:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001fa06 <LinkedList<UnixFile>::LinkedList()>:
c001fa06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa0a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fa10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa14:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fa1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa1f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fa26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa2a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fa30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa34:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fa3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa3f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fa46:	90                   	nop
c001fa47:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001fa48 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001fa48:	83 ec 0c             	sub    esp,0xc
c001fa4b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fa50:	75 10                	jne    c001fa62 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001fa52:	83 ec 0c             	sub    esp,0xc
c001fa55:	68 c8 0e 02 c0       	push   0xc0020ec8
c001fa5a:	e8 7c 1b ff ff       	call   c00115db <KePanic(char const*)>
c001fa5f:	83 c4 10             	add    esp,0x10
c001fa62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa66:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa68:	85 c0                	test   eax,eax
c001fa6a:	74 34                	je     c001faa0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001fa6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa73:	85 c0                	test   eax,eax
c001fa75:	74 29                	je     c001faa0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001fa77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa7b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa7e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa82:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fa85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa89:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa8d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa94:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa97:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fa9e:	eb 65                	jmp    c001fb05 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001faa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faa4:	8b 00                	mov    eax,DWORD PTR [eax]
c001faa6:	85 c0                	test   eax,eax
c001faa8:	75 4b                	jne    c001faf5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001faaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fab1:	85 c0                	test   eax,eax
c001fab3:	75 40                	jne    c001faf5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fab5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fab9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fabd:	89 10                	mov    DWORD PTR [eax],edx
c001fabf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fac3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fac7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001faca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001face:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fad1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fadc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fadf:	85 c0                	test   eax,eax
c001fae1:	74 22                	je     c001fb05 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fae3:	83 ec 0c             	sub    esp,0xc
c001fae6:	68 ea 0e 02 c0       	push   0xc0020eea
c001faeb:	e8 eb 1a ff ff       	call   c00115db <KePanic(char const*)>
c001faf0:	83 c4 10             	add    esp,0x10
c001faf3:	eb 10                	jmp    c001fb05 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001faf5:	83 ec 0c             	sub    esp,0xc
c001faf8:	68 f4 0e 02 c0       	push   0xc0020ef4
c001fafd:	e8 d9 1a ff ff       	call   c00115db <KePanic(char const*)>
c001fb02:	83 c4 10             	add    esp,0x10
c001fb05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb09:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb0c:	8d 50 01             	lea    edx,[eax+0x1]
c001fb0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb13:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fb16:	90                   	nop
c001fb17:	83 c4 0c             	add    esp,0xc
c001fb1a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001fb1c <LinkedList<UnixFile>::getFirstElement()>:
c001fb1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb20:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb22:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001fb24 <LinkedList<UnixFile>::removeFirst()>:
c001fb24:	83 ec 0c             	sub    esp,0xc
c001fb27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb2b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb2d:	85 c0                	test   eax,eax
c001fb2f:	75 12                	jne    c001fb43 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001fb31:	83 ec 0c             	sub    esp,0xc
c001fb34:	68 00 0f 02 c0       	push   0xc0020f00
c001fb39:	e8 9d 1a ff ff       	call   c00115db <KePanic(char const*)>
c001fb3e:	83 c4 10             	add    esp,0x10
c001fb41:	eb 7e                	jmp    c001fbc1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001fb43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb47:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb4a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb4d:	85 c0                	test   eax,eax
c001fb4f:	74 10                	je     c001fb61 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001fb51:	83 ec 0c             	sub    esp,0xc
c001fb54:	68 4b 0f 02 c0       	push   0xc0020f4b
c001fb59:	e8 7d 1a ff ff       	call   c00115db <KePanic(char const*)>
c001fb5e:	83 c4 10             	add    esp,0x10
c001fb61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb65:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb67:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb6a:	85 c0                	test   eax,eax
c001fb6c:	75 33                	jne    c001fba1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001fb6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb72:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb7c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb87:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb8a:	83 f8 01             	cmp    eax,0x1
c001fb8d:	74 21                	je     c001fbb0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fb8f:	83 ec 0c             	sub    esp,0xc
c001fb92:	68 24 0f 02 c0       	push   0xc0020f24
c001fb97:	e8 3f 1a ff ff       	call   c00115db <KePanic(char const*)>
c001fb9c:	83 c4 10             	add    esp,0x10
c001fb9f:	eb 0f                	jmp    c001fbb0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fba1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fba5:	8b 00                	mov    eax,DWORD PTR [eax]
c001fba7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001fbaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbae:	89 10                	mov    DWORD PTR [eax],edx
c001fbb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbb4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fbb7:	8d 50 ff             	lea    edx,[eax-0x1]
c001fbba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbbe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fbc1:	83 c4 0c             	add    esp,0xc
c001fbc4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001fbc6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001fbc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fbca:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fbcd:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001fbce <DriverlessDevice::~DriverlessDevice()>:
c001fbce:	ba dc 1b 02 c0       	mov    edx,0xc0021bdc
c001fbd3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbd7:	89 10                	mov    DWORD PTR [eax],edx
c001fbd9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbdd:	50                   	push   eax
c001fbde:	e8 33 cd fe ff       	call   c000c916 <Device::~Device()>
c001fbe3:	83 c4 04             	add    esp,0x4
c001fbe6:	90                   	nop
c001fbe7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001fbe8 <DriverlessDevice::~DriverlessDevice()>:
c001fbe8:	83 ec 0c             	sub    esp,0xc
c001fbeb:	83 ec 0c             	sub    esp,0xc
c001fbee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbf2:	e8 d7 ff ff ff       	call   c001fbce <DriverlessDevice::~DriverlessDevice()>
c001fbf7:	83 c4 10             	add    esp,0x10
c001fbfa:	83 ec 08             	sub    esp,0x8
c001fbfd:	68 58 01 00 00       	push   0x158
c001fc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc06:	e8 01 ac fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fc0b:	83 c4 10             	add    esp,0x10
c001fc0e:	83 c4 0c             	add    esp,0xc
c001fc11:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001fc12 <LinkedList<Device>::addElement(Device*)>:
c001fc12:	83 ec 0c             	sub    esp,0xc
c001fc15:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fc1a:	75 10                	jne    c001fc2c <LinkedList<Device>::addElement(Device*)+0x1a>
c001fc1c:	83 ec 0c             	sub    esp,0xc
c001fc1f:	68 c8 0e 02 c0       	push   0xc0020ec8
c001fc24:	e8 b2 19 ff ff       	call   c00115db <KePanic(char const*)>
c001fc29:	83 c4 10             	add    esp,0x10
c001fc2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc30:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc32:	85 c0                	test   eax,eax
c001fc34:	74 3a                	je     c001fc70 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fc36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc3d:	85 c0                	test   eax,eax
c001fc3f:	74 2f                	je     c001fc70 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fc41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc45:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc48:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc4c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001fc52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc56:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc5a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fc5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc61:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc64:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fc6e:	eb 68                	jmp    c001fcd8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fc70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc74:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc76:	85 c0                	test   eax,eax
c001fc78:	75 4e                	jne    c001fcc8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fc7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc81:	85 c0                	test   eax,eax
c001fc83:	75 43                	jne    c001fcc8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fc85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc89:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc8d:	89 10                	mov    DWORD PTR [eax],edx
c001fc8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc93:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc97:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fc9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fca1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fcab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcaf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fcb2:	85 c0                	test   eax,eax
c001fcb4:	74 22                	je     c001fcd8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fcb6:	83 ec 0c             	sub    esp,0xc
c001fcb9:	68 ea 0e 02 c0       	push   0xc0020eea
c001fcbe:	e8 18 19 ff ff       	call   c00115db <KePanic(char const*)>
c001fcc3:	83 c4 10             	add    esp,0x10
c001fcc6:	eb 10                	jmp    c001fcd8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fcc8:	83 ec 0c             	sub    esp,0xc
c001fccb:	68 f4 0e 02 c0       	push   0xc0020ef4
c001fcd0:	e8 06 19 ff ff       	call   c00115db <KePanic(char const*)>
c001fcd5:	83 c4 10             	add    esp,0x10
c001fcd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcdc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fcdf:	8d 50 01             	lea    edx,[eax+0x1]
c001fce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fce6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fce9:	90                   	nop
c001fcea:	83 c4 0c             	add    esp,0xc
c001fced:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001fcee <LinkedList<Device>::LinkedList()>:
c001fcee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcf2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fcf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcfc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fd03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd07:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fd0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd12:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fd18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd1c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fd23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd27:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fd2e:	90                   	nop
c001fd2f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fd30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fd30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd34:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd36:	85 c0                	test   eax,eax
c001fd38:	75 0e                	jne    c001fd48 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fd3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd41:	85 c0                	test   eax,eax
c001fd43:	75 03                	jne    c001fd48 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fd45:	b0 01                	mov    al,0x1
c001fd47:	c3                   	ret    
c001fd48:	b0 00                	mov    al,0x0
c001fd4a:	90                   	nop
c001fd4b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fd4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fd4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd50:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd52:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fd54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fd54:	83 ec 0c             	sub    esp,0xc
c001fd57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd5b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd5d:	85 c0                	test   eax,eax
c001fd5f:	75 17                	jne    c001fd78 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001fd61:	83 ec 0c             	sub    esp,0xc
c001fd64:	68 00 0f 02 c0       	push   0xc0020f00
c001fd69:	e8 6d 18 ff ff       	call   c00115db <KePanic(char const*)>
c001fd6e:	83 c4 10             	add    esp,0x10
c001fd71:	e9 96 00 00 00       	jmp    c001fe0c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001fd76:	66 90                	xchg   ax,ax
c001fd78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd7f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fd82:	85 c0                	test   eax,eax
c001fd84:	0f 95 c0             	setne  al
c001fd87:	0f b6 c0             	movzx  eax,al
c001fd8a:	85 c0                	test   eax,eax
c001fd8c:	74 12                	je     c001fda0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001fd8e:	83 ec 0c             	sub    esp,0xc
c001fd91:	68 4b 0f 02 c0       	push   0xc0020f4b
c001fd96:	e8 40 18 ff ff       	call   c00115db <KePanic(char const*)>
c001fd9b:	83 c4 10             	add    esp,0x10
c001fd9e:	66 90                	xchg   ax,ax
c001fda0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fda4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fda6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fda9:	85 c0                	test   eax,eax
c001fdab:	0f 94 c0             	sete   al
c001fdae:	0f b6 c0             	movzx  eax,al
c001fdb1:	85 c0                	test   eax,eax
c001fdb3:	74 33                	je     c001fde8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001fdb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdb9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fdbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdc3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fdca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdce:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fdd1:	83 f8 01             	cmp    eax,0x1
c001fdd4:	74 22                	je     c001fdf8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fdd6:	83 ec 0c             	sub    esp,0xc
c001fdd9:	68 24 0f 02 c0       	push   0xc0020f24
c001fdde:	e8 f8 17 ff ff       	call   c00115db <KePanic(char const*)>
c001fde3:	83 c4 10             	add    esp,0x10
c001fde6:	eb 10                	jmp    c001fdf8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fde8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdec:	8b 00                	mov    eax,DWORD PTR [eax]
c001fdee:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001fdf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdf5:	89 10                	mov    DWORD PTR [eax],edx
c001fdf7:	90                   	nop
c001fdf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdfc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fdff:	8d 50 ff             	lea    edx,[eax-0x1]
c001fe02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe06:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fe09:	8d 76 00             	lea    esi,[esi+0x0]
c001fe0c:	83 c4 0c             	add    esp,0xc
c001fe0f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001fe10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001fe10:	83 ec 0c             	sub    esp,0xc
c001fe13:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fe18:	75 12                	jne    c001fe2c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001fe1a:	83 ec 0c             	sub    esp,0xc
c001fe1d:	68 c8 0e 02 c0       	push   0xc0020ec8
c001fe22:	e8 b4 17 ff ff       	call   c00115db <KePanic(char const*)>
c001fe27:	83 c4 10             	add    esp,0x10
c001fe2a:	66 90                	xchg   ax,ax
c001fe2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe30:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe32:	85 c0                	test   eax,eax
c001fe34:	74 36                	je     c001fe6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fe36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe3d:	85 c0                	test   eax,eax
c001fe3f:	74 2b                	je     c001fe6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fe41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe45:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe48:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fe4c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001fe4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe53:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fe57:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fe5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe61:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fe68:	eb 6a                	jmp    c001fed4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fe6a:	66 90                	xchg   ax,ax
c001fe6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe70:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe72:	85 c0                	test   eax,eax
c001fe74:	75 4e                	jne    c001fec4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fe76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe7d:	85 c0                	test   eax,eax
c001fe7f:	75 43                	jne    c001fec4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fe81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe85:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fe89:	89 10                	mov    DWORD PTR [eax],edx
c001fe8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe8f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fe93:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fe96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe9d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fea8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001feab:	85 c0                	test   eax,eax
c001fead:	74 25                	je     c001fed4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001feaf:	83 ec 0c             	sub    esp,0xc
c001feb2:	68 ea 0e 02 c0       	push   0xc0020eea
c001feb7:	e8 1f 17 ff ff       	call   c00115db <KePanic(char const*)>
c001febc:	83 c4 10             	add    esp,0x10
c001febf:	eb 13                	jmp    c001fed4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fec1:	8d 76 00             	lea    esi,[esi+0x0]
c001fec4:	83 ec 0c             	sub    esp,0xc
c001fec7:	68 f4 0e 02 c0       	push   0xc0020ef4
c001fecc:	e8 0a 17 ff ff       	call   c00115db <KePanic(char const*)>
c001fed1:	83 c4 10             	add    esp,0x10
c001fed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fed8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fedb:	8d 50 01             	lea    edx,[eax+0x1]
c001fede:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fee2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fee5:	90                   	nop
c001fee6:	83 c4 0c             	add    esp,0xc
c001fee9:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001feec <ACPI::~ACPI()>:
c001feec:	83 ec 0c             	sub    esp,0xc
c001feef:	ba c4 21 02 c0       	mov    edx,0xc00221c4
c001fef4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fef8:	89 10                	mov    DWORD PTR [eax],edx
c001fefa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fefe:	83 ec 0c             	sub    esp,0xc
c001ff01:	50                   	push   eax
c001ff02:	e8 0f ca fe ff       	call   c000c916 <Device::~Device()>
c001ff07:	83 c4 10             	add    esp,0x10
c001ff0a:	90                   	nop
c001ff0b:	83 c4 0c             	add    esp,0xc
c001ff0e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001ff10 <ACPI::~ACPI()>:
c001ff10:	83 ec 0c             	sub    esp,0xc
c001ff13:	83 ec 0c             	sub    esp,0xc
c001ff16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff1a:	e8 cd ff ff ff       	call   c001feec <ACPI::~ACPI()>
c001ff1f:	83 c4 10             	add    esp,0x10
c001ff22:	83 ec 08             	sub    esp,0x8
c001ff25:	68 64 12 00 00       	push   0x1264
c001ff2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff2e:	e8 d9 a8 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001ff33:	83 c4 10             	add    esp,0x10
c001ff36:	83 c4 0c             	add    esp,0xc
c001ff39:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001ff3c <LinkedList<Device>::~LinkedList()>:
c001ff3c:	90                   	nop
c001ff3d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001ff40 <LinkedList<Device>::isEmpty()>:
c001ff40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff44:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff46:	85 c0                	test   eax,eax
c001ff48:	75 0e                	jne    c001ff58 <LinkedList<Device>::isEmpty()+0x18>
c001ff4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff51:	85 c0                	test   eax,eax
c001ff53:	75 03                	jne    c001ff58 <LinkedList<Device>::isEmpty()+0x18>
c001ff55:	b0 01                	mov    al,0x1
c001ff57:	c3                   	ret    
c001ff58:	b0 00                	mov    al,0x0
c001ff5a:	90                   	nop
c001ff5b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001ff5c <LinkedList<Device>::getFirstElement()>:
c001ff5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff60:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff62:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001ff64 <LinkedList<Device>::removeFirst()>:
c001ff64:	83 ec 0c             	sub    esp,0xc
c001ff67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff6b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff6d:	85 c0                	test   eax,eax
c001ff6f:	75 17                	jne    c001ff88 <LinkedList<Device>::removeFirst()+0x24>
c001ff71:	83 ec 0c             	sub    esp,0xc
c001ff74:	68 00 0f 02 c0       	push   0xc0020f00
c001ff79:	e8 5d 16 ff ff       	call   c00115db <KePanic(char const*)>
c001ff7e:	83 c4 10             	add    esp,0x10
c001ff81:	e9 92 00 00 00       	jmp    c0020018 <LinkedList<Device>::removeFirst()+0xb4>
c001ff86:	66 90                	xchg   ax,ax
c001ff88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff8f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ff95:	85 c0                	test   eax,eax
c001ff97:	74 13                	je     c001ffac <LinkedList<Device>::removeFirst()+0x48>
c001ff99:	83 ec 0c             	sub    esp,0xc
c001ff9c:	68 4b 0f 02 c0       	push   0xc0020f4b
c001ffa1:	e8 35 16 ff ff       	call   c00115db <KePanic(char const*)>
c001ffa6:	83 c4 10             	add    esp,0x10
c001ffa9:	8d 76 00             	lea    esi,[esi+0x0]
c001ffac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffb0:	8b 00                	mov    eax,DWORD PTR [eax]
c001ffb2:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ffb8:	85 c0                	test   eax,eax
c001ffba:	75 34                	jne    c001fff0 <LinkedList<Device>::removeFirst()+0x8c>
c001ffbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffc0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ffc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ffd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffd5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ffd8:	83 f8 01             	cmp    eax,0x1
c001ffdb:	74 27                	je     c0020004 <LinkedList<Device>::removeFirst()+0xa0>
c001ffdd:	83 ec 0c             	sub    esp,0xc
c001ffe0:	68 24 0f 02 c0       	push   0xc0020f24
c001ffe5:	e8 f1 15 ff ff       	call   c00115db <KePanic(char const*)>
c001ffea:	83 c4 10             	add    esp,0x10
c001ffed:	eb 15                	jmp    c0020004 <LinkedList<Device>::removeFirst()+0xa0>
c001ffef:	90                   	nop
c001fff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fff4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fff6:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001fffc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020000:	89 10                	mov    DWORD PTR [eax],edx
c0020002:	66 90                	xchg   ax,ax
c0020004:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020008:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002000b:	8d 50 ff             	lea    edx,[eax-0x1]
c002000e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020012:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020015:	8d 76 00             	lea    esi,[esi+0x0]
c0020018:	83 c4 0c             	add    esp,0xc
c002001b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002001c <CPU::~CPU()>:
c002001c:	83 ec 0c             	sub    esp,0xc
c002001f:	ba 6c 23 02 c0       	mov    edx,0xc002236c
c0020024:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020028:	89 10                	mov    DWORD PTR [eax],edx
c002002a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002002e:	83 ec 0c             	sub    esp,0xc
c0020031:	50                   	push   eax
c0020032:	e8 df c8 fe ff       	call   c000c916 <Device::~Device()>
c0020037:	83 c4 10             	add    esp,0x10
c002003a:	90                   	nop
c002003b:	83 c4 0c             	add    esp,0xc
c002003e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0020040 <CPU::~CPU()>:
c0020040:	83 ec 0c             	sub    esp,0xc
c0020043:	83 ec 0c             	sub    esp,0xc
c0020046:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002004a:	e8 cd ff ff ff       	call   c002001c <CPU::~CPU()>
c002004f:	83 c4 10             	add    esp,0x10
c0020052:	83 ec 08             	sub    esp,0x8
c0020055:	68 94 11 00 00       	push   0x1194
c002005a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002005e:	e8 a9 a7 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0020063:	83 c4 10             	add    esp,0x10
c0020066:	83 c4 0c             	add    esp,0xc
c0020069:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c002006c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c002006c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020070:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020073:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0020074 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0020074:	90                   	nop
c0020075:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0020078 <ThreadControlBlock::ThreadControlBlock()>:
c0020078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002007c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0020083:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020087:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002008e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020092:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0020099:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002009d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c00200a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200a8:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c00200af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200b3:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00200b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200bb:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c00200bf:	90                   	nop
c00200c0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00200c4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00200c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200c8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00200ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200d2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00200d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200dd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00200e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200e8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00200ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200f2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00200f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200fd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020104:	90                   	nop
c0020105:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0020106 <PCI::~PCI()>:
c0020106:	83 ec 0c             	sub    esp,0xc
c0020109:	ba 4c 32 02 c0       	mov    edx,0xc002324c
c002010e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020112:	89 10                	mov    DWORD PTR [eax],edx
c0020114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020118:	83 ec 0c             	sub    esp,0xc
c002011b:	50                   	push   eax
c002011c:	e8 87 c2 fe ff       	call   c000c3a8 <Bus::~Bus()>
c0020121:	83 c4 10             	add    esp,0x10
c0020124:	90                   	nop
c0020125:	83 c4 0c             	add    esp,0xc
c0020128:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002012a <PCI::~PCI()>:
c002012a:	83 ec 0c             	sub    esp,0xc
c002012d:	83 ec 0c             	sub    esp,0xc
c0020130:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020134:	e8 cd ff ff ff       	call   c0020106 <PCI::~PCI()>
c0020139:	83 c4 10             	add    esp,0x10
c002013c:	83 ec 08             	sub    esp,0x8
c002013f:	68 5c 01 00 00       	push   0x15c
c0020144:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020148:	e8 bf a6 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c002014d:	83 c4 10             	add    esp,0x10
c0020150:	83 c4 0c             	add    esp,0xc
c0020153:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0020154 <IDE::~IDE()>:
c0020154:	83 ec 0c             	sub    esp,0xc
c0020157:	ba 00 33 02 c0       	mov    edx,0xc0023300
c002015c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020160:	89 10                	mov    DWORD PTR [eax],edx
c0020162:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020166:	83 ec 0c             	sub    esp,0xc
c0020169:	50                   	push   eax
c002016a:	e8 21 cc fe ff       	call   c000cd90 <HardDiskController::~HardDiskController()>
c002016f:	83 c4 10             	add    esp,0x10
c0020172:	90                   	nop
c0020173:	83 c4 0c             	add    esp,0xc
c0020176:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0020178 <IDE::~IDE()>:
c0020178:	83 ec 0c             	sub    esp,0xc
c002017b:	83 ec 0c             	sub    esp,0xc
c002017e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020182:	e8 cd ff ff ff       	call   c0020154 <IDE::~IDE()>
c0020187:	83 c4 10             	add    esp,0x10
c002018a:	83 ec 08             	sub    esp,0x8
c002018d:	68 70 02 00 00       	push   0x270
c0020192:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020196:	e8 71 a6 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c002019b:	83 c4 10             	add    esp,0x10
c002019e:	83 c4 0c             	add    esp,0xc
c00201a1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00201a2 <SATABus::~SATABus()>:
c00201a2:	83 ec 0c             	sub    esp,0xc
c00201a5:	ba 50 33 02 c0       	mov    edx,0xc0023350
c00201aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201ae:	89 10                	mov    DWORD PTR [eax],edx
c00201b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201b4:	83 ec 0c             	sub    esp,0xc
c00201b7:	50                   	push   eax
c00201b8:	e8 d3 cb fe ff       	call   c000cd90 <HardDiskController::~HardDiskController()>
c00201bd:	83 c4 10             	add    esp,0x10
c00201c0:	90                   	nop
c00201c1:	83 c4 0c             	add    esp,0xc
c00201c4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00201c6 <SATABus::~SATABus()>:
c00201c6:	83 ec 0c             	sub    esp,0xc
c00201c9:	83 ec 0c             	sub    esp,0xc
c00201cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201d0:	e8 cd ff ff ff       	call   c00201a2 <SATABus::~SATABus()>
c00201d5:	83 c4 10             	add    esp,0x10
c00201d8:	83 ec 08             	sub    esp,0x8
c00201db:	68 64 01 00 00       	push   0x164
c00201e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201e4:	e8 23 a6 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00201e9:	83 c4 10             	add    esp,0x10
c00201ec:	83 c4 0c             	add    esp,0xc
c00201ef:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00201f0 <ATA::~ATA()>:
c00201f0:	83 ec 0c             	sub    esp,0xc
c00201f3:	ba 90 33 02 c0       	mov    edx,0xc0023390
c00201f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201fc:	89 10                	mov    DWORD PTR [eax],edx
c00201fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020202:	83 ec 0c             	sub    esp,0xc
c0020205:	50                   	push   eax
c0020206:	e8 67 cc fe ff       	call   c000ce72 <PhysicalDisk::~PhysicalDisk()>
c002020b:	83 c4 10             	add    esp,0x10
c002020e:	90                   	nop
c002020f:	83 c4 0c             	add    esp,0xc
c0020212:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0020214 <ATA::~ATA()>:
c0020214:	83 ec 0c             	sub    esp,0xc
c0020217:	83 ec 0c             	sub    esp,0xc
c002021a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002021e:	e8 cd ff ff ff       	call   c00201f0 <ATA::~ATA()>
c0020223:	83 c4 10             	add    esp,0x10
c0020226:	83 ec 08             	sub    esp,0x8
c0020229:	68 7c 01 00 00       	push   0x17c
c002022e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020232:	e8 d5 a5 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0020237:	83 c4 10             	add    esp,0x10
c002023a:	83 c4 0c             	add    esp,0xc
c002023d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002023e <ATAPI::~ATAPI()>:
c002023e:	83 ec 0c             	sub    esp,0xc
c0020241:	ba d8 33 02 c0       	mov    edx,0xc00233d8
c0020246:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002024a:	89 10                	mov    DWORD PTR [eax],edx
c002024c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020250:	83 ec 0c             	sub    esp,0xc
c0020253:	50                   	push   eax
c0020254:	e8 19 cc fe ff       	call   c000ce72 <PhysicalDisk::~PhysicalDisk()>
c0020259:	83 c4 10             	add    esp,0x10
c002025c:	90                   	nop
c002025d:	83 c4 0c             	add    esp,0xc
c0020260:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0020262 <ATAPI::~ATAPI()>:
c0020262:	83 ec 0c             	sub    esp,0xc
c0020265:	83 ec 0c             	sub    esp,0xc
c0020268:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002026c:	e8 cd ff ff ff       	call   c002023e <ATAPI::~ATAPI()>
c0020271:	83 c4 10             	add    esp,0x10
c0020274:	83 ec 08             	sub    esp,0x8
c0020277:	68 84 01 00 00       	push   0x184
c002027c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020280:	e8 87 a5 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0020285:	83 c4 10             	add    esp,0x10
c0020288:	83 c4 0c             	add    esp,0xc
c002028b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002028c <SATA::~SATA()>:
c002028c:	83 ec 0c             	sub    esp,0xc
c002028f:	ba 8c 34 02 c0       	mov    edx,0xc002348c
c0020294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020298:	89 10                	mov    DWORD PTR [eax],edx
c002029a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002029e:	83 ec 0c             	sub    esp,0xc
c00202a1:	50                   	push   eax
c00202a2:	e8 cb cb fe ff       	call   c000ce72 <PhysicalDisk::~PhysicalDisk()>
c00202a7:	83 c4 10             	add    esp,0x10
c00202aa:	90                   	nop
c00202ab:	83 c4 0c             	add    esp,0xc
c00202ae:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00202b0 <SATA::~SATA()>:
c00202b0:	83 ec 0c             	sub    esp,0xc
c00202b3:	83 ec 0c             	sub    esp,0xc
c00202b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202ba:	e8 cd ff ff ff       	call   c002028c <SATA::~SATA()>
c00202bf:	83 c4 10             	add    esp,0x10
c00202c2:	83 ec 08             	sub    esp,0x8
c00202c5:	68 7c 01 00 00       	push   0x17c
c00202ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202ce:	e8 39 a5 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00202d3:	83 c4 10             	add    esp,0x10
c00202d6:	83 c4 0c             	add    esp,0xc
c00202d9:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00202da <SATAPI::~SATAPI()>:
c00202da:	83 ec 0c             	sub    esp,0xc
c00202dd:	ba b0 35 02 c0       	mov    edx,0xc00235b0
c00202e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202e6:	89 10                	mov    DWORD PTR [eax],edx
c00202e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202ec:	83 ec 0c             	sub    esp,0xc
c00202ef:	50                   	push   eax
c00202f0:	e8 7d cb fe ff       	call   c000ce72 <PhysicalDisk::~PhysicalDisk()>
c00202f5:	83 c4 10             	add    esp,0x10
c00202f8:	90                   	nop
c00202f9:	83 c4 0c             	add    esp,0xc
c00202fc:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00202fe <SATAPI::~SATAPI()>:
c00202fe:	83 ec 0c             	sub    esp,0xc
c0020301:	83 ec 0c             	sub    esp,0xc
c0020304:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020308:	e8 cd ff ff ff       	call   c00202da <SATAPI::~SATAPI()>
c002030d:	83 c4 10             	add    esp,0x10
c0020310:	83 ec 08             	sub    esp,0x8
c0020313:	68 84 01 00 00       	push   0x184
c0020318:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002031c:	e8 eb a4 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0020321:	83 c4 10             	add    esp,0x10
c0020324:	83 c4 0c             	add    esp,0xc
c0020327:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0020328 <IOAPIC::~IOAPIC()>:
c0020328:	83 ec 0c             	sub    esp,0xc
c002032b:	ba f0 35 02 c0       	mov    edx,0xc00235f0
c0020330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020334:	89 10                	mov    DWORD PTR [eax],edx
c0020336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002033a:	83 ec 0c             	sub    esp,0xc
c002033d:	50                   	push   eax
c002033e:	e8 d3 c5 fe ff       	call   c000c916 <Device::~Device()>
c0020343:	83 c4 10             	add    esp,0x10
c0020346:	90                   	nop
c0020347:	83 c4 0c             	add    esp,0xc
c002034a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002034c <IOAPIC::~IOAPIC()>:
c002034c:	83 ec 0c             	sub    esp,0xc
c002034f:	83 ec 0c             	sub    esp,0xc
c0020352:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020356:	e8 cd ff ff ff       	call   c0020328 <IOAPIC::~IOAPIC()>
c002035b:	83 c4 10             	add    esp,0x10
c002035e:	83 ec 08             	sub    esp,0x8
c0020361:	68 68 01 00 00       	push   0x168
c0020366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002036a:	e8 9d a4 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c002036f:	83 c4 10             	add    esp,0x10
c0020372:	83 c4 0c             	add    esp,0xc
c0020375:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0020378 <APICTimer::~APICTimer()>:
c0020378:	83 ec 0c             	sub    esp,0xc
c002037b:	ba 38 36 02 c0       	mov    edx,0xc0023638
c0020380:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020384:	89 10                	mov    DWORD PTR [eax],edx
c0020386:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002038a:	83 ec 0c             	sub    esp,0xc
c002038d:	50                   	push   eax
c002038e:	e8 59 e0 fe ff       	call   c000e3ec <Timer::~Timer()>
c0020393:	83 c4 10             	add    esp,0x10
c0020396:	90                   	nop
c0020397:	83 c4 0c             	add    esp,0xc
c002039a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c002039c <APICTimer::~APICTimer()>:
c002039c:	83 ec 0c             	sub    esp,0xc
c002039f:	83 ec 0c             	sub    esp,0xc
c00203a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203a6:	e8 cd ff ff ff       	call   c0020378 <APICTimer::~APICTimer()>
c00203ab:	83 c4 10             	add    esp,0x10
c00203ae:	83 ec 08             	sub    esp,0x8
c00203b1:	68 60 01 00 00       	push   0x160
c00203b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203ba:	e8 4d a4 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00203bf:	83 c4 10             	add    esp,0x10
c00203c2:	83 c4 0c             	add    esp,0xc
c00203c5:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00203c8 <PIT::~PIT()>:
c00203c8:	83 ec 0c             	sub    esp,0xc
c00203cb:	ba 88 36 02 c0       	mov    edx,0xc0023688
c00203d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203d4:	89 10                	mov    DWORD PTR [eax],edx
c00203d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203da:	83 ec 0c             	sub    esp,0xc
c00203dd:	50                   	push   eax
c00203de:	e8 09 e0 fe ff       	call   c000e3ec <Timer::~Timer()>
c00203e3:	83 c4 10             	add    esp,0x10
c00203e6:	90                   	nop
c00203e7:	83 c4 0c             	add    esp,0xc
c00203ea:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00203ec <PIT::~PIT()>:
c00203ec:	83 ec 0c             	sub    esp,0xc
c00203ef:	83 ec 0c             	sub    esp,0xc
c00203f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203f6:	e8 cd ff ff ff       	call   c00203c8 <PIT::~PIT()>
c00203fb:	83 c4 10             	add    esp,0x10
c00203fe:	83 ec 08             	sub    esp,0x8
c0020401:	68 5c 01 00 00       	push   0x15c
c0020406:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002040a:	e8 fd a3 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c002040f:	83 c4 10             	add    esp,0x10
c0020412:	83 c4 0c             	add    esp,0xc
c0020415:	c3                   	ret    

Disassembly of section userkernel:

c0025000 <KiDefaultSignalHandlerAbort(int)>:
c0025000:	57                   	push   edi
c0025001:	b9 07 00 00 00       	mov    ecx,0x7
c0025006:	56                   	push   esi
c0025007:	be 9d 24 02 c0       	mov    esi,0xc002249d
c002500c:	83 ec 24             	sub    esp,0x24
c002500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025013:	fc                   	cld    
c0025014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002501a:	50                   	push   eax
c002501b:	6a 00                	push   0x0
c002501d:	6a 38                	push   0x38
c002501f:	6a 01                	push   0x1
c0025021:	e8 2c 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0025026:	83 c4 34             	add    esp,0x34
c0025029:	5e                   	pop    esi
c002502a:	5f                   	pop    edi
c002502b:	c3                   	ret    

c002502c <KiDefaultSignalHandlerTerminate(int)>:
c002502c:	57                   	push   edi
c002502d:	b9 08 00 00 00       	mov    ecx,0x8
c0025032:	56                   	push   esi
c0025033:	be b9 24 02 c0       	mov    esi,0xc00224b9
c0025038:	83 ec 24             	sub    esp,0x24
c002503b:	89 e7                	mov    edi,esp
c002503d:	fc                   	cld    
c002503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025040:	54                   	push   esp
c0025041:	6a 00                	push   0x0
c0025043:	6a 37                	push   0x37
c0025045:	6a 01                	push   0x1
c0025047:	e8 06 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002504c:	83 c4 34             	add    esp,0x34
c002504f:	5e                   	pop    esi
c0025050:	5f                   	pop    edi
c0025051:	c3                   	ret    

c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0025052:	53                   	push   ebx
c0025053:	83 ec 10             	sub    esp,0x10
c0025056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0025062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025066:	cd 60                	int    0x60
c0025068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025078:	83 c4 10             	add    esp,0x10
c002507b:	5b                   	pop    ebx
c002507c:	c3                   	ret    

Disassembly of section align_previous:

c0026000 <DO_NOT_DELETE()>:
c0026000:	c3                   	ret    
